////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
// Возвращает пустую строку в том случае, если не удалось сформировать наименование или не заполнены операнды алгоритма.
//
// Параметры:
//	ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры;
//	ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры -
//	 	номенклатура или характеристика, для которой нужно получить наименование по заданному в настройках шаблону.
//
// Возвращаемое значение:
//	Строка - Наименование полученное по алгоритму расчета
//
Функция НаименованиеПоШаблону (Знач ШаблонНаименования, ОбъектСправочник) Экспорт
	
	ФормулаНаименованияСтруктура = ФормулаНаименования(ШаблонНаименования, ОбъектСправочник);
	ФормулаНаименования = """"" + " + СтрЗаменить(ФормулаНаименованияСтруктура.ФормулаНаименования,
		"МассивЗначенийРеквизитов[",
		"Параметры[");
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(ФормулаНаименования) Тогда
		
		Попытка
			
			Наименование = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
				ФормулаНаименования,
				ФормулаНаименованияСтруктура.МассивЗначенийРеквизитов);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно сформировать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			
			Если ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.Номенклатура")
			 ИЛИ ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.СерииНоменклатуры") Тогда
				
				ВидНоменклатуры = ОбъектСправочник.ВидНоменклатуры;
				
			Иначе
				
				Если ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСправочник.Владелец, "ВидНоменклатуры");
					
				ИначеЕсли ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
					
					ВидНоменклатуры = ОбъектСправочник.Владелец;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Подставляет в шаблон наименования значения реквизитов.
//
// Параметры:
//  ШаблонНаименования	 - Строка								 - шаблон наименования, заданный в виде номенклатуры
//  ОбъектСправочник	 - СправочникОбъект, СправочникСсылка	 - объект, для которого нужно рассчитать наименование.
// 
// Возвращаемое значение:
//  Структура - Структура с ключами:
//  * ФормулаНаименования - Строка - программный код, который нужно выполнить с помощью функции Выполнить для расчета наименования
//  * МассивЗначенийРеквизитов - Массив - значения реквизитов, используемых в формуле наименования
//  * ИндексыНаименованияВМассивеЗначенийРеквизитов - Массив - массив индексов элементов МассивЗначенийРеквизитов,
//  	которые хранят значение реквизита "Наименование".
//
Функция ФормулаНаименования(Знач ШаблонНаименования, Знач ОбъектСправочник) Экспорт
	
	Результат = Новый Структура(
		"ФормулаНаименования, МассивЗначенийРеквизитов, ИндексыНаименованияВМассивеЗначенийРеквизитов",
		"" + ШаблонНаименования, Новый Массив, Новый Массив);
		
	ОперандыФормулы = РаботаСФормуламиКлиентСервер.ОперандыТекстовойФормулы(ШаблонНаименования, Истина);
	Если ОперандыФормулы.Количество() > 0 Тогда
		// Т.к. наименование может формироваться у незаписанного в БД элемента, то
		// первую часть операндов получаем из объекта, расчет остальных происходит
		// в соответствующих методах.
		ТаблицаВычисления = Новый ТаблицаЗначений;
		СтрокаИсходныхДанных = ТаблицаВычисления.Добавить();
		СоответствияИменСтандартныхРеквизитов = РаботаСФормуламиПовтИсп.СоответствияИменСтандартныхРеквизитов();
		ИменаКолонокХарактеристик = Новый Соответствие;
		ВыраженияВычисления = Новый Соответствие;
		СчетчикВыражений = 0;
		Для Каждого ОперандФормулы Из ОперандыФормулы Цикл
			ЧастиОперанда = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ОперандФормулы);
			ИмяРеквизита = ЧастиОперанда[0];
			ЭтоХарактеристика = СтрНайти(ИмяРеквизита, "{") > 0;
			
			ЗначениеОперанда = Неопределено;
			ИмяОбъектаМетаданных = ОбъектСправочник.Метаданные().ПолноеИмя();
			ТипЗначения = Неопределено;
			СчетчикВыражений = СчетчикВыражений + 1;
			ИмяКолонкиРезультата = "РезультатВычисленияВыраженияФормулы" + Формат(СчетчикВыражений, "ЧН=0; ЧГ=0;");
			ВыраженияВычисления.Вставить(ОперандФормулы, ИмяКолонкиРезультата);
			
			Если НЕ ЭтоХарактеристика Тогда
				// Это реквизит.
				МетаданныеОбъекта = ОбъектСправочник.Метаданные();
				Реквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
				Если НЕ Реквизит = Неопределено Тогда
					ТипЗначения = Реквизит.Тип;
				Иначе
					Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
						Если Реквизит.Имя = ИмяРеквизита
							ИЛИ СоответствияИменСтандартныхРеквизитов.Получить(Реквизит.Имя) = ИмяРеквизита Тогда
							ТипЗначения = Реквизит.Тип;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ТипЗначения = Неопределено Тогда
					ВызватьИсключениеПоОшибкеШаблонаНаименования(ОперандФормулы, ИмяРеквизита);
				Иначе
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектСправочник)) Тогда
						ЗначениеОперанда = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСправочник, ИмяРеквизита);
					Иначе
						ЗначениеОперанда = ОбъектСправочник[ИмяРеквизита];
					КонецЕсли;
					
					Если ТаблицаВычисления.Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
						ТаблицаВычисления.Колонки.Добавить(ИмяРеквизита, ТипЗначения);
						СтрокаИсходныхДанных[ИмяРеквизита] = ЗначениеОперанда;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Это доп. реквизит или доп. сведение.
				
				СвойстваОбъекта = УправлениеСвойствами.СвойстваОбъекта(ОбъектСправочник);
				
				Если СвойстваОбъекта.Количество() > 0 Тогда
					Запрос = Новый Запрос;
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ДополнительныеРеквизитыИСведения.Ссылка КАК ДопРеквизит,
					|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
					|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение
					|ИЗ
					|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
					|ГДЕ
					|	НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
					|	И ДополнительныеРеквизитыИСведения.Ссылка В(&СвойстваОбъекта)
					|	И &ВыражениеИдентификаторДляФормул = &ИдентификаторДопРеквизита";
					ВыражениеИдентификаторДляФормул = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ДополнительныеРеквизитыИСведения.%1",
						РаботаСФормулами.ПолеИдентификатораДополнительныхРеквизитовИСведений());
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИдентификаторДляФормул", ВыражениеИдентификаторДляФормул);
					Запрос.Текст = ТекстЗапроса;
					
					ИдентификаторДопРеквизита = РаботаСФормулами.СвойстваХарактеристики(ИмяРеквизита).Идентификатор;
					Запрос.УстановитьПараметр("СвойстваОбъекта", СвойстваОбъекта);
					Запрос.УстановитьПараметр("ИдентификаторДопРеквизита", ИдентификаторДопРеквизита);
					
					ДопРеквизиты = Запрос.Выполнить().Выгрузить();
					
					Если ДопРеквизиты.Количество() = 0 Тогда
						// Ошибка в операнде - текущий реквизит не является не реквизитом предыдущего значения, и его не доп. реквизитом.
						ВызватьИсключениеПоОшибкеШаблонаНаименования(ОперандФормулы, ИмяРеквизита);
					ИначеЕсли ДопРеквизиты.Количество() > 1 Тогда
						ТекстСообщенияОбОшибке =
						НСтр("ru = 'Невозможно рассчитать наименование по шаблону.
						|В информационной базе хранится несколько записей дополнительных реквизитов и сведений с идентификатором ""%ИмяРеквизита%"", входящих в состав набора дополнительных реквизитов и сведений записываемого элемента справочника ""%ИмяОбъекта%"".'");
						
						ТекстСообщенияОбОшибке = СтрЗаменить(ТекстСообщенияОбОшибке, "%ИмяРеквизита%", ИмяРеквизита);
						ТекстСообщенияОбОшибке = СтрЗаменить(ТекстСообщенияОбОшибке,
															"%ИмяОбъекта%",
															ОбъектСправочник.Метаданные().Представление());
						
						ВызватьИсключение ТекстСообщенияОбОшибке;
					Иначе
						ДопРеквизит = ДопРеквизиты[0].ДопРеквизит;
						ТипЗначения = ДопРеквизиты[0].ТипЗначения;
						ЭтоДополнительноеСведение = ДопРеквизиты[0].ЭтоДополнительноеСведение;
					КонецЕсли;
				Иначе
					// Ошибка в операнде - текущий реквизит не является не реквизитом предыдущего значения, и его не доп. реквизитом.
					ВызватьИсключениеПоОшибкеШаблонаНаименования(ОперандФормулы, ИмяРеквизита);
				КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектСправочник)) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДополнительныеРеквизиты.Значение КАК Значение
					|ИЗ
					|	&ИмяОбъектаМетаданныхДополнительныеРеквизиты КАК ДополнительныеРеквизиты
					|ГДЕ
					|	ДополнительныеРеквизиты.Ссылка = &Ссылка
					|	И ДополнительныеРеквизиты.Свойство = &Свойство
					|	И НЕ &ЭтоДополнительноеСведение
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДополнительныеСведения.Значение КАК Значение
					|ИЗ
					|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|ГДЕ
					|	ДополнительныеСведения.Объект = &СсылкаНаОбъект
					|	И ДополнительныеСведения.Свойство = &Свойство
					|	И &ЭтоДополнительноеСведение";
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяОбъектаМетаданныхДополнительныеРеквизиты", ""+ИмяОбъектаМетаданных + ".ДополнительныеРеквизиты");
					
					Запрос.УстановитьПараметр("Ссылка", ОбъектСправочник);
					Запрос.УстановитьПараметр("Свойство", ДопРеквизит);
					Запрос.УстановитьПараметр("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗначениеОперанда = Выборка.Значение;
					Иначе
						ЗначениеОперанда = "";
					КонецЕсли;
					
				Иначе
					
					Если НЕ ЭтоДополнительноеСведение Тогда
						СтрокаДопРеквизита = ОбъектСправочник.ДополнительныеРеквизиты.Найти(ДопРеквизит, "Свойство");
						ЗначениеОперанда = ?(СтрокаДопРеквизита <> Неопределено, СтрокаДопРеквизита.Значение, "");
					Иначе
						ОбъектСправочникСсылка = ОбъектСправочник.Ссылка;
						Если НЕ ЗначениеЗаполнено(ОбъектСправочникСсылка) Тогда
							ЗначениеОперанда = Неопределено;
						Иначе
							Запрос = Новый Запрос;
							Запрос.Текст =
							"ВЫБРАТЬ ПЕРВЫЕ 1
							|	ДополнительныеСведения.Значение КАК Значение
							|ИЗ
							|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
							|ГДЕ
							|	ДополнительныеСведения.Объект = &СсылкаНаОбъект
							|	И ДополнительныеСведения.Свойство = &Свойство";
							Запрос.УстановитьПараметр("СсылкаНаОбъект", ОбъектСправочникСсылка);
							Запрос.УстановитьПараметр("Свойство", ДопРеквизит);
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								ЗначениеОперанда = Выборка.Значение;
							Иначе
								ЗначениеОперанда = "";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ИмяКолонки = "ДопРеквизит_" + СтрЗаменить(ДопРеквизит.УникальныйИдентификатор(), "-", "_");
				
				Если ТаблицаВычисления.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
					ТаблицаВычисления.Колонки.Добавить(ИмяКолонки, ТипЗначения);
					СтрокаИсходныхДанных[ИмяКолонки] = ЗначениеОперанда;
					ИменаКолонокХарактеристик.Вставить(ИмяРеквизита, ИмяКолонки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		РезультатВычислений = РаботаСФормулами.ПолучитьДанныеОперандовДляТаблицыДанных(ТаблицаВычисления,
			ВыраженияВычисления,
			ИменаКолонокХарактеристик,
			Истина);
		Если РезультатВычислений.ЕстьОшибки Тогда
			Для Каждого ИсходноеВыражениеИТекстОшибки Из РезультатВычислений.СообщенияОшибокПреобразования Цикл
				ТекстОшибки = ИсходноеВыражениеИТекстОшибки.Значение;
				ВызватьИсключение ТекстОшибки;
			КонецЦикла;
		Иначе
			ТаблицаРезультатов = РезультатВычислений.ТаблицаРезультатов; // ТаблицаЗначений -
			Для Каждого ВыражениеИИмяКолонкиРезультата Из ВыраженияВычисления Цикл
				ИсходноеВыражение = ВыражениеИИмяКолонкиРезультата.Ключ;
				ИмяКолонкиРезультата = ВыражениеИИмяКолонкиРезультата.Значение;
				РезультатВычисления = ТаблицаРезультатов[0][ИмяКолонкиРезультата];
				ОперандСоСкобками = РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(ИсходноеВыражение);
				ИндексВМассиве = Результат.МассивЗначенийРеквизитов.Количество();
				Результат.МассивЗначенийРеквизитов.Добавить(?(ЗначениеЗаполнено(РезультатВычисления), РезультатВычисления, ""));
				СтрокаЗаменыВШаблоне = "МассивЗначенийРеквизитов[" + ИндексВМассиве + "]";
				Результат.ФормулаНаименования = СтрЗаменить(Результат.ФормулаНаименования, ОперандСоСкобками, СтрокаЗаменыВШаблоне);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Допустимые типы номенклатуры для выбора по хозяйственной операции
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа;
//  ИспользоватьНаборы - Булево - Признак использования наборов номенклатуры.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыНоменклатуры - Типы номенклатуры, допустимые для указанной хозяйственной операции.
//
Функция ДопустимыеТипыНоменклатурыДляВыбора(ХозяйственнаяОперация, ИспользоватьНаборы = Ложь) Экспорт

	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	КонецЕсли;
	
	СписокОперацийБезУслуг = СписокХозяйственныхОперацийИсключающихУслуги();
	Если СписокОперацийБезУслуг.НайтиПоЗначению(ХозяйственнаяОперация) = Неопределено Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	КонецЕсли;
	
	СписокОперацийБезРабот = СписокХозяйственныхОперацийИсключающихРаботы();
	Если СписокОперацийБезРабот.НайтиПоЗначению(ХозяйственнаяОперация) = Неопределено Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли;
	
	Если ИспользоватьНаборы Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	КонецЕсли;

	Возврат МассивТиповНоменклатуры;

КонецФункции

// Процедура устанавливает параметры выбора для номенклатуры.
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа,
//	ЭлементНоменклатура - ПолеФормы - Поле для ввода номенклатуры,
//	ИспользоватьНаборы - Булево - Истина - признак использования наборов номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, ЭлементНоменклатура, ИспользоватьНаборы = Ложь) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивТиповНоменклатуры = ДопустимыеТипыНоменклатурыДляВыбора(ХозяйственнаяОперация, ИспользоватьНаборы);
	
	ФиксированныйМассивТиповНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ФиксированныйМассивТиповНоменклатуры));
	
	ЭлементНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораНоменклатуры()

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// с типом "Услуга".
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихУслуги() Экспорт
	
	СписокОпераций = СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// с типом "Работа".
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихРаботы() Экспорт
	
	СписокОпераций = СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// и с типом "Услуга", и с типом "Работа".
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихУслугиИРаботы() Экспорт
	
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути); 
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// с типом "Работа" с включенным признаком прослеживаемости по номера ГТД/РНПТ.
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихПрослеживаемыеРаботы() Экспорт
	
	СписокОпераций = СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ИменаПолейССуффиксом - Структура - коллекция, содержащая имена рекизитов с суффиксом. Ключом коллекции
//													выступает имя реквизита без суффикса, например "Номенклатура",
//													а значением задается имя реквизита с суффиксом,
//													например "НоменклатураОприходование".
//			* СписокСтрок - Массив Из СтрокаТабличнойЧасти, Неопределено - значение по умолчанию Неопределенно.
//			* ВыводитьНомераСтрок - Булево - значение по умолчанию Истина.
//			* ВыдаватьСообщения - Булево - значение по умолчанию пустая ИСТИНА - если ЛОЖЬ, но не будут выдаваться сообщения, просто выставится Отказ.
//			* ПутьКДаннымТаблицыФормы - Строка - значение по умолчанию "Объект" - путь к реквизиту формы, содержащий проверяемую табличную часть.
//																					Если проверяется таблица, которая сама является реквизитом формы, нужно
//																					передать "" (т.е. пустую строку).
//			* ИмяКолонкиХарактеристикаТаблицыФормы - Строка - значение по умолчанию "Характеристика" - имя колонки таблицы формы, рядом с которой нужно
//																вывести сообщение. Нужно переопределять, когда вместо колонки характеристики отображается какая-то
//																другая колонка, например, с какими-то строковыми представлениями.
//
Функция ПараметрыПроверкиЗаполненияХарактеристик() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИменаПолейССуффиксом",		Новый Структура);
	ПараметрыПроверки.Вставить("СписокСтрок",				Неопределено);
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",		Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	ПараметрыПроверки.Вставить("ВыдаватьСообщения",			Истина);
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы",	"Объект");
	ПараметрыПроверки.Вставить("ИмяКолонкиХарактеристикаТаблицыФормы", "Характеристика");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Характеристика" в объектах.
//
// Параметры:
//	Объект  - ДокументОбъект, СправочникОбъект - объект, для которого требуется проверить заполнение колонки "Характеристика" в табличной части;
//			- ФормаКлиентскогоПриложения - объект, для которого требуется проверить заполнение колонки "Характеристика" в табличной части, содержит в том числе:
//				* Ссылка - ДокументСсылка - 
//	МассивНепроверяемыхРеквизитов - Массив - реквизиты, которые не нужно проверять платформенной проверкой;
//	Отказ - Булево - Истина - признак отказа продолжения операции;
//	ПараметрыПроверки - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияХарактеристик();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	ИменаПолейССуффиксом  = ПараметрыПроверки.ИменаПолейССуффиксом;
	СписокСтрок           = ПараметрыПроверки.СписокСтрок;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".Характеристика");
	
	Если ИменаПолейССуффиксом.Свойство("Характеристика") Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + "." + ИменаПолейССуффиксом.Характеристика);
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	&ХарактеристикаСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ &ХарактеристикаСуффиксДопРеквизита2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,
	|	&НеЗаполненаХарактеристикаСуффиксДопРеквизита,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ &НоменклатураСуффиксДопРеквизита2";
	
	
	Если ИменаПолейССуффиксом.Количество() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1", "ТаблицаТоваров." + ИменаПолейССуффиксом.Номенклатура + " КАК " + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХарактеристикаСуффиксДопРеквизита1", "ТаблицаТоваров." + ИменаПолейССуффиксом.Характеристика + " КАК " + ИменаПолейССуффиксом.Характеристика);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХарактеристикаСуффиксДопРеквизита2", "ТаблицаТоваров." + ИменаПолейССуффиксом.Характеристика + " = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаХарактеристикаСуффиксДопРеквизита", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками." + ИменаПолейССуффиксом.Номенклатура + " КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками." + ИменаПолейССуффиксом.Характеристика + " = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполнена" + ИменаПолейССуффиксом.Характеристика);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита2", "
		|	ВЫРАЗИТЬ(СтрокиСОшибками." + ИменаПолейССуффиксом.Номенклатура + " КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками." + ИменаПолейССуффиксом.Характеристика + " = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХарактеристикаСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &ХарактеристикаСуффиксДопРеквизита2", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаХарактеристикаСуффиксДопРеквизита,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &НоменклатураСуффиксДопРеквизита2", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(ИменаПолейССуффиксом.Количество(),
							"," + ИменаПолейССуффиксом.Номенклатура + "," + ИменаПолейССуффиксом.Характеристика,
							"");
	
	ОтборСтрокДляПроверки = Неопределено;
	
	Если СписокСтрок = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
	Иначе
		ОтборСтрокДляПроверки = СписокСтрок;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, "НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не ПараметрыПроверки.ВыдаватьСообщения Тогда
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ = ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
							Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
						МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
						ПараметрыПроверки.ПредставлениеТЧ);
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ПараметрыПроверки.ИмяКолонкиХарактеристикаТаблицыФормы);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
													КлючДанных,
													Поле,
													ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
													Отказ);
		КонецЕсли;
		
		Если ИменаПолейССуффиксом.Свойство("Характеристика")
			И Выборка["НеЗаполнена" + ИменаПолейССуффиксом.Характеристика] Тогда
			
			ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИменаПолейССуффиксом.Характеристика].Синоним;
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ИменаПолейССуффиксом.Характеристика);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
													КлючДанных,
													Поле,
													ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
													Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки заполнения колонок "Содержание" в формах.
//
// Параметры:
//	Объект - ДокументОбъект - объект, для которого требуется проверить заполнение колонки "Содержание" в табличной части;
//	Отказ - Булево - Истина - признак отказа продолжения операции;
//	ИмяТЧ - Строка - имя табличной части в объекте.
//
Процедура ПроверитьЗаполнениеСодержания(Объект, Отказ, ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Содержание = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	СтрокиСОшибками.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Содержание"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();

	ПредставлениеТЧ                 = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;

	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""Содержание"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");

	Пока Выборка.Следующий() Цикл
					
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Содержание");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);

	КонецЦикла;
		
КонецПроцедуры

// Функция определяет наличие в табличной части работ.
//
// Параметры:
//	ТЧ - ДанныеФормыКоллекция - проверяемая табличная часть.
//
// Возвращаемое значение:
//	Структура:
//		* ЕстьРаботы - Булево - Истина - в ТЧ используются работы.
//
Функция ПроверитьНаличиеРабот(ТЧ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ 
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	ИСТИНА КАК ЕстьРаботы
	|ИЗ 
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ 
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры 
	|	= ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТЧ.Выгрузить(, "Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	ТипыНоменклатуры = Новый Структура("ЕстьРаботы", Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипыНоменклатуры.ЕстьРаботы = Истина;
		
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
	
КонецФункции //ПроверитьНаличиеРабот()

// Возвращает параметры проверки заполнения упаковок.
//
//	Возвращаемое значение:
//		Структура - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ИмяПоляУпаковка - Строка - значение по умолчанию "Упаковка".
//			* ВыводитьНомераСтрок - Булево - значение по умолчанию Истина.
//			* ОтборПроверяемыхСтрок - Структура - значение по умолчанию пустая Структура.
//			* ИменаПолейССуффиксом - Структура - коллекция, содержащая имена рекизитов с суффиксом. Ключом коллекции
//													выступает имя реквизита без суффикса, например "Номенклатура",
//													а значением задается имя реквизита с суффиксом,
//													например "НоменклатураОприходование".
//
Функция ПараметрыПроверкиЗаполненияУпаковок() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",					"Товары");
	ПараметрыПроверки.Вставить("ИмяПоляУпаковка",		"Упаковка");
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",	Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",	Новый Структура);
	ПараметрыПроверки.Вставить("ИменаПолейССуффиксом",	Новый Структура);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет заполнение колонок "Упаковка" в документах по адресному складу. Указание упаковок обязательно для товаров
// и необязательно для многооборотной тары.
//
// Параметры:
//	Объект	- ДокументОбъект, СправочникОбъект - объект, для которого требуется проверить заполнение колонки "Упаковка" в табличной части.
//			- ФормаКлиентскогоПриложения - объект, для которого требуется проверить заполнение колонки "Характеристика" в табличной части, содержит в том числе:
//				* Ссылка - ДокументСсылка - ссылка на документ в информационной базе.
//	МассивНепроверяемыхРеквизитов - Массив Из Строка - реквизиты, которые не нужно проверять платформенной проверкой.
//	Отказ - Булево - Истина - признак отказа продолжения операции.
//	ПараметрыПроверки - см. ПараметрыПроверкиЗаполненияУпаковок
//
Процедура ПроверитьЗаполнениеУпаковок(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияУпаковок();
	КонецЕсли;
	
	ИмяТЧ					= ПараметрыПроверки.ИмяТЧ;
	ИмяПоляУпаковка			= ПараметрыПроверки.ИмяПоляУпаковка;
	ВыводитьНомераСтрок		= ПараметрыПроверки.ВыводитьНомераСтрок;
	ОтборПроверяемыхСтрок	= ПараметрыПроверки.ОтборПроверяемыхСтрок;
	ИменаПолейССуффиксом	= ПараметрыПроверки.ИменаПолейССуффиксом;
	
	Если МассивНепроверяемыхРеквизитов.Найти(ИмяТЧ + "." + ИмяПоляУпаковка) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + "." + ИмяПоляУпаковка);
	
	Если ИменаПолейССуффиксом.Свойство("Упаковка") Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + "." + ИменаПолейССуффиксом.Упаковка);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	&УпаковкаСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	&ИмяПоляУпаковка					КАК Упаковка
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	&УпаковкаСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	&ИмяПоляУпаковка					КАК Упаковка
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
	|																												ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
	|	ИЛИ &УпаковкаСуффиксДопРеквизита2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,
	|	&НеЗаполненаУпаковкаСуффиксДопРеквизита,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СтрокиСОшибками.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|				И ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
	|																																ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаУпаковка
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИменаПолейССуффиксом.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &УпаковкаСуффиксДопРеквизита2", "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
		|	&НоменклатураСуффиксДопРеквизита1,
		|	&УпаковкаСуффиксДопРеквизита1,
		|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
		|	&ИмяПоляУпаковка					КАК Упаковка
		|ИЗ
		|	ВтТаблицаТоваров КАК ТаблицаТоваров
		|
		|ГДЕ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(&УпаковкаСуффиксДопРеквизита3 КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|	И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита2 КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита2 КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
		|																														ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаУпаковкаСуффиксДопРеквизита", "ВЫБОР
		|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(&УпаковкаСуффиксДопРеквизита4 КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|				И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита3 КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита3 КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
		|																																	ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаУпаковка1");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&НоменклатураСуффиксДопРеквизита1",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Номенклатура + " КАК " + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&НоменклатураСуффиксДопРеквизита2",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&НоменклатураСуффиксДопРеквизита3",
									"СтрокиСОшибками." + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УпаковкаСуффиксДопРеквизита1",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Упаковка + " КАК " + ИменаПолейССуффиксом.Упаковка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УпаковкаСуффиксДопРеквизита3",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Упаковка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УпаковкаСуффиксДопРеквизита4",
									"СтрокиСОшибками." + ИменаПолейССуффиксом.Упаковка);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &УпаковкаСуффиксДопРеквизита2", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпаковкаСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаУпаковкаСуффиксДопРеквизита,", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляУпаковка", "ТаблицаТоваров." + ИмяПоляУпаковка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ИменаДополнительныхРеквизитов = Новый Массив;
	ИменаДополнительныхРеквизитов.Добавить(ИмяПоляУпаковка);
	
	Если ИменаПолейССуффиксом.Количество() > 0 Тогда
		ИменаДополнительныхРеквизитов.Добавить(ИменаПолейССуффиксом.Номенклатура);
		ИменаДополнительныхРеквизитов.Добавить(ИменаПолейССуффиксом.Упаковка);
	КонецЕсли;
	
	ИменаВыгружаемыхРеквизитов = СтрСоединить(ИменаДополнительныхРеквизитов, ", ");
	
	Если ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
									Объект[ИмяТЧ].Выгрузить(ОтборПроверяемыхСтрок, "НомерСтроки, Номенклатура," + ИменаВыгружаемыхРеквизитов));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
									Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Номенклатура, " + ИменаВыгружаемыхРеквизитов));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	КонецЕсли;
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%Упаковка%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%Упаковка%"" в списке ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	ПредставлениеТЧ					= МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаУпаковка	= МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяПоляУпаковка].Синоним;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.НеЗаполненаУпаковка Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщения,	"%Упаковка%",		ПредставлениеРеквизитаУпаковка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%ТаблицаТовары%",	ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%НомерСтроки%",	Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяПоляУпаковка);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ИменаПолейССуффиксом.Свойство("Упаковка")
			И Выборка.НеЗаполненаУпаковка1 Тогда
			
			ПредставлениеРеквизитаУпаковкаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИменаПолейССуффиксом.Упаковка].Синоним;
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения,	"%Упаковка%",		ПредставлениеРеквизитаУпаковкаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%ТаблицаТовары%",	ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%НомерСтроки%",	Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИменаПолейССуффиксом.Упаковка);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки соответствия вида номенклатуры товаров другого качества виду номенклатуры исходного качества.
// Для номенклатуры, по которой ведется учет серий, товары другого качества должны быть одного вида с исходными.
//
// Параметры:
//	Объект - ДокументОбъект - документ, для которого проверяется соответствие номенклатуры;
//	Отказ - Булево - отказ продолжения операции;
//	ИмяТЧДляПроверки - Строка - значение по умолчанию "Товары";
//	ТаблицаДляПроверки - ТаблицаЗначений, Неопределено - если передана таблица значений, то проверяется она, попытка выгрузки из объекта не делается:
//		* НомерСтроки - Число
//		* Номенклатура - СправочникСсылка.Номенклатура
//		* НоменклатураОприходование - СправочникСсылка.Номенклатура.
//
Процедура ПроверитьВидНоменклатурыОприходования(Объект, Отказ, ИмяТЧДляПроверки = "Товары", ТаблицаДляПроверки = Неопределено) Экспорт
	
	// Номенклатура с разным качеством должна быть совместима по настройкам серий:
	// - или у серий должен быть один владелец (тогда настройки учета совпадают)
	// - или учета серий быть не должно.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.НоменклатураОприходование КАК НоменклатураБрак
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.НомерСтроки,
	|	ТоварыДляЗапроса.Номенклатура,
	|	ТоварыДляЗапроса.НоменклатураБрак,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВладелецСерий = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВладелецСерий
	|	КОНЕЦ КАК ВладелецСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВладелецСерий = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВидНоменклатуры
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВладелецСерий
	|	КОНЕЦ КАК ВладелецСерийБрак
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК ТоварыДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.НомерСтроки,
	|	ТоварыДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТоварыДляЗапроса.НоменклатураБрак КАК НоменклатураБрак
	|ИЗ
	|	ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|ГДЕ
	|	ТоварыДляЗапроса.ВладелецСерий <> ТоварыДляЗапроса.ВладелецСерийБрак
	|	И (ТоварыДляЗапроса.ВладелецСерий.ИспользоватьСерии
	|		ИЛИ ТоварыДляЗапроса.ВладелецСерийБрак.ИспользоватьСерии)";
	
	Если ТаблицаДляПроверки <> Неопределено Тогда
		Запрос.УстановитьПараметр("Товары", ТаблицаДляПроверки);
	Иначе
		Запрос.УстановитьПараметр("Товары",
			Объект[ИмяТЧДляПроверки].Выгрузить(,"НомерСтроки,Номенклатура,НоменклатураОприходование"));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = НСтр("ru='По номенклатурам %Номенклатура% и %НоменклатураБрак%(испорченный товар) различаются настройки учета по сериям.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НоменклатураБрак%", Выборка.НоменклатураБрак);
		Если ТаблицаДляПроверки = Неопределено Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧДляПроверки,Выборка.НомерСтроки,"НоменклатураОприходование");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект,Поле,,Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение коэффициента пересчета единицы измерения в метрические тонны.
// Например, для килограмма коэффициент = 0.001.
//
// Параметры:
//	УпаковкаЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка / единица измерения, 
//		для которой осуществляется пересчет.
//
// Возвращаемое значение:
//	Число - коэффициент.
//
Функция КоэффициентПересчетаВТонны(УпаковкаЕдиницаИзмерения) Экспорт
	
	КоэффициентПересчетаВТонны = 0;
	
	Если НЕ ЗначениеЗаполнено(УпаковкаЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось рассчитать коэффициент пересчета в тонны, т.к. единица измерения веса не заполнена. Обратитесь к администратору.'"));
		Возврат КоэффициентПересчетаВТонны;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|				И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Вес * УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Числитель / УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ / 1000 КАК КоэффициентПересчетаВТонны
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентПересчетаВТонны = Выборка.КоэффициентПересчетаВТонны;
	КонецЕсли;
	
	Если КоэффициентПересчетаВТонны = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать коэффициент пересчета в тонны для единицы ""%1"". Обратитесь к администратору.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(УпаковкаЕдиницаИзмерения));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КоэффициентПересчетаВТонны;
	
КонецФункции

// Возвращает значение коэффициента единицы измерения в кубические метры.
//
// Параметры:
//  УпаковкаЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка / единица измерения,
//  	для которой осуществляется пересчет.
// 
// Возвращаемое значение:
//  Число - коэффициент пересчета.
//
Функция КоэффициентПересчетаВКубическиеМетры(УпаковкаЕдиницаИзмерения) Экспорт
	
	КоэффициентПересчетаВКубическиеМетры = 0;
	
	Если НЕ ЗначениеЗаполнено(УпаковкаЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось рассчитать коэффициент пересчета в кубические метры, т.к. единица измерения объема не заполнена. Обратитесь к администратору.';"));
		Возврат КоэффициентПересчетаВКубическиеМетры;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|				И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Объем * УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Числитель / УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентПересчетаВКубическиеМетры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентПересчетаВКубическиеМетры = Выборка.КоэффициентПересчетаВКубическиеМетры;
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать коэффициент пересчета в кубические метры для единицы ""%1"". Обратитесь к администратору.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(УпаковкаЕдиницаИзмерения));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КоэффициентПересчетаВКубическиеМетры;
	
КонецФункции

#Область ПроцедурыРаботыССериями

// Процедура заполняет статусы указания серий в строках ТЧ товары (комментарий содержит описание подсистемы серий).
//  
//  Возможные статусы указания серий:
//  
//  -1 - серии указаны в таблице уточнения (нет картинки)
//  0 - серии указывать не требуется (нет картинки)
//  первый указанный статус - количество по сериям не совпадает с количеством товаров или серии не указаны (красная картинка)
//  второй указанный статус   - количество по сериям совпадает с количеством товаров (зеленая картинка)
//  третий указанный статус   - серии не указаны, их можно указывать, а можно и не указывать (синяя картинка)
// 	 1,2,21  - серии указываются справочно
// 	 3,4,23  - по сериям учитываются остатки, серии указываются по факту отбора
// 	 5,6,25  - по сериям учитываются остатки, серии указываются при планировании отбора,
// 		 заполняются по FEFO (используются только в документах отгрузки товаров)
// 	 7,8,27  - по сериям учитываются остатки, серии указываются при планировании отбора
// 	 9,10,11 - по сериям учитываются остатки, серии указываются при планировании отгрузки,
//  	по сериям формируются движения по регистру ТоварыКОтгрузке (как при приходе, так и при расходе)
//   13,14,15 - учитываются также, как 9,10,11 + по сериям учитывается себестоимость
//   17,18,28 - по сериям учитываются товары у партнеров (товары в пути, неотфактурованные поставки)
//   19,20,22 - по сериям учитываются товары у партнеров (товары в пути, неотфактурованные поставки).
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором нужно заполнить статусы.
//  ПараметрыУказанияСерий		 - Структура - состав полей задается функцией НоменклатураКлиентСервер.ПараметрыУказанияСерий
//  	(см. описание полей в комментарии к этой функции).
//  СтрокиТоваровДляОбработки	 - Массив - строки товаров, в которых нужно заполнить статусы указания серий,
//  	если передано "Неопределено", то статусы заполняются во всех строках товаров.
//  СтрокиСерийДляОбработки		 - Массив - строки серий, по данным которых нужно заполнить статусы указания серий,
//  	если передано "Неопределено", то учитываются все строки серий.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект,
											ПараметрыУказанияСерий,
											СтрокиТоваровДляОбработки = Неопределено,
											СтрокиСерийДляОбработки = Неопределено) Экспорт
	
	Если Не (ПараметрыУказанияСерий.ТоварВШапке
		Или Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Количество() <> 0 ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Если ПараметрыУказанияСерий.ТоварВШапке Тогда
				Объект.СтатусУказанияСерий = 0;	
			Иначе
				Для Каждого СтрТабл Из Объект[ПараметрыУказанияСерий.ИмяТЧТовары] Цикл
					Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
						СтрТабл.СтатусУказанияСерий = 0;
					Иначе
						Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
							СтрТабл[ИмяПоляСтатус] = 0;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено;
	
	Если Не СкладыВТЧ
		И ПараметрыУказанияСерий.ИмяПоляСклад <> Неопределено Тогда
		
		Если ПараметрыУказанияСерий.ИмяПоляСкладОтправитель <> Неопределено
			И ПараметрыУказанияСерий.ИмяПоляСкладПолучатель <> Неопределено Тогда
			Склад = Новый Структура("Отправитель,Получатель");
			Склад.Отправитель = Объект[ПараметрыУказанияСерий.ИмяПоляСкладОтправитель];
			Склад.Получатель  = Объект[ПараметрыУказанияСерий.ИмяПоляСкладПолучатель];
		Иначе
			Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
		КонецЕсли;
		
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		
		Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяТЧСерии) Тогда
			ТаблицаСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии];
		Иначе
			ТаблицаСерий = Новый ТаблицаЗначений;
			ТаблицаСерий.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаСерий.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаСерий.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
			ТаблицаСерий.Колонки.Добавить("Назначение",Новый ОписаниеТипов("СправочникСсылка.Назначения"));
			ТаблицаСерий.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
			
			СтрокаСерии = ТаблицаСерий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСерии, Объект);
		КонецЕсли;
		
		ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров);
		
		СтрокаТовара = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
		Если ПараметрыУказанияСерий.ЭтоЗаказ
			И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено
			И НЕ Объект.Обособленно Тогда
			// В шапке заказов при смене варианта обеспечения не очищается назначение,
			//	поэтому для необособленной отгрузки очистим назначение здесь.
			СтрокаТовара.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
		СтрокаТовара.НомерСтроки = 1;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовара);
		НайденныеСтрокиСерий = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		
		Выборка = ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий,
																ТаблицаТоваров,
																ТаблицаСерий,
																Склад,
																,
																НайденныеСтрокиСерий);
		
		Если Выборка.Следующий() Тогда
			
			Объект.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			
			СтатусыПоля = Новый Массив;
			СтатусыПоля.Добавить(14);
			СтатусыПоля.Добавить(18);
			СтатусыПоля.Добавить(20);
			
			Если СтатусыПоля.Найти(Выборка.СтатусУказанияСерий) = Неопределено Тогда
				Объект.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Выборка = ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий,
																Объект[ПараметрыУказанияСерий.ИмяТЧТовары],
																Объект[ПараметрыУказанияСерий.ИмяТЧСерии],
																Склад,
																СтрокиТоваровДляОбработки,
																СтрокиСерийДляОбработки);
		
		Пока Выборка.Следующий() Цикл
			СтрТабл = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][Выборка.НомерСтроки - 1];
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтрТабл[ИмяПоляСтатус] = Выборка[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо,
//  переподчиняет строки серий другим строкам ТЧ "Товары".
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа.
//  ПараметрыУказанияСерий		 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  ТекущаяСтрокаИдентификатор	 - Число - идентификатор текущей строки товаров в форме документа.
//  КэшированныеЗначения		 - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																			ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Возврат; // Если ТЧ Серии нет, тогда все статусы пересчитываются при изменении реквизитов ТЧ, а не при окончании редактирования
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
	Иначе
		ТекущаяСтрока = Неопределено //значит строку удалили;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	// Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		УчитыватьОстатки      = Ложь;
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета
		// - серии относились к нескольким строкам, но изменилось значение действия по отражению расхождения со строкой
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено
			И ((КэшированныеЗначения.Свойство("Действие")
					И КэшированныеЗначения.Действие <> ТекущаяСтрока.Действие)
				Или НайденныеСтрокиТоваров.Количество() = 0) Тогда//т.к. строк с такими ключевыми полями не осталось, значит такая строка была одна
			
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				УчитыватьОстатки   = Истина;
				ПереподчинитьСерии = Истина;
			ИначеЕсли КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
				ПереподчинитьСерии = Истина;
			Иначе //будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда		
			// Сначала переподчиним серии
			
			Если УчитыватьОстатки Тогда
				Если ТекущаяСтрока.КоличествоПоДокументу > ТекущаяСтрока.Количество Тогда
					КоличествоОстаток = ТекущаяСтрока.Количество;
				Иначе
					
					ЕстьНовыеСерии = Ложь;
					
					КоличествоСтрокСИзлишками = 0;
					
					Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
						Если СтрМас.КоличествоПоДокументу = 0 Тогда
							ЕстьНовыеСерии = Истина;
						ИначеЕсли СтрМас.КоличествоПоДокументу < СтрМас.Количество Тогда
							КоличествоСтрокСИзлишками = КоличествоСтрокСИзлишками + 1;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьНовыеСерии
						И КоличествоСтрокСИзлишками > 0 Тогда //Переподчиним количество серий за вычетом количества строк с излишками
						
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу - КоличествоСтрокСИзлишками;
						
					ИначеЕсли ЕстьНовыеСерии Тогда //Переподчиним количество серий равное количеству серий в документе
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу;
					Иначе //Переподчиним количество серий равное фактическому количеству серий в обрабатываемой строке
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу
											- (ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоДокументу);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если УчитыватьОстатки Тогда
					Если КоличествоОстаток > 0
						Или СтрМас.Количество <> СтрМас.КоличествоПоДокументу Тогда
						
						КоличествоОстаток = КоличествоОстаток - СтрМас.Количество;
						
						ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, ТекстПоляСвязи);
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, "Номенклатура,Характеристика" + ТекстПоляСвязи);
				КонецЕсли;
				
				Если ПересчитатьКоличество Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМас,СтруктураДействий,КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не УчитыватьОстатки Тогда
				// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
				НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			КонецЕсли;
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий для товара в шапке документа, если это необходимо, переподчиняет
// строки серий.
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура	 - основной реквизит формы документа.
//  ПараметрыУказанияСерий	 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  КэшированныеЗначения	 - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, Знач ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	
	ИзменилисьКлючевыеПоля = Ложь;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика
		Или КэшированныеЗначения.НазначениеШапка <> Объект.Назначение Тогда
		
		ИзменилисьКлючевыеПоля = Истина;
		
	Иначе
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			ИмяПоляШапкиТовара = НоменклатураКлиентСервер.ИмяПоляШапкиТовара(СтрМас);
			
			Если КэшированныеЗначения[ИмяПоляШапкиТовара] <> Объект[СтрМас] Тогда
				ИзменилисьКлючевыеПоля = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьСтатус = Ложь;

	Если ИзменилисьКлючевыеПоля Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		
		Если КэшированныеЗначения.НоменклатураШапка = Объект.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
			ПереподчинитьСерии = Истина;
		Иначе //будем переподчинять, если не поменялся вид номенклатуры
			ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.НоменклатураШапка,"ВидНоменклатуры");
			ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ВидНоменклатуры");
			
			ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			ПересчитатьСтатус  = Не (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
		КонецЕсли;
		
		Если ПереподчинитьСерии
			И ЕстьУпаковки
			И КэшированныеЗначения.УпаковкаШапка <> Объект.Упаковка Тогда
			
			ПересчитатьКоличество = Истина;
			
		КонецЕсли;
			
		Если ПереподчинитьСерии Тогда		
			СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			Для Каждого КлючИЗначение Из СтруктураПоискаСтарыеЗначения Цикл
				ИмяПоляШапкиТовара = НоменклатураКлиентСервер.ИмяПоляШапкиТовара(КлючИЗначение.Ключ);
				
				СтруктураПоискаСтарыеЗначения[КлючИЗначение.Ключ] = КэшированныеЗначения[ИмяПоляШапкиТовара];
			КонецЦикла;
			
			НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрМас,Объект, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(
						СтрМас,
						Новый Структура("ПересчитатьКоличествоУпаковок"),
						КэшированныеЗначения);
				КонецЕсли;	
				
			КонецЦикла;
		Иначе
			Объект.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьУпаковки Тогда
		Если КэшированныеЗначения.КоличествоУпаковокШапка <> Объект.КоличествоУпаковок Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	Иначе
		Если КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьСтатус Тогда 
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,Неопределено,Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет строки ТЧ "Серии", которым по полям связи нет соответствующих строк в ТЧ "Товары"
//  или в этих строках статус указания серий равен 0 (не указывать).
//
// Параметры:
//  ДокументОбъект			 - ДанныеФормыКоллекция, ДокументОбъект - ДокументОбъект, в котором нужно удалить неиспользуемые строки серий.
//  ПараметрыУказанияСерий	 - Структура - описание см. НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("Шапка")
		Или ПараметрыУказанияСерий.ТоварВШапке Тогда 
		ОчиститьНеиспользуемыеСерииСУчетомТовараВШапке(ДокументОбъект, ПараметрыУказанияСерий);
	Иначе
		ОчиститьНеиспользуемыеСерииВТЧТовары(ДокументОбъект, ПараметрыУказанияСерий, ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары]);
		ОчиститьНеиспользуемыеСерииВТЧСерии(ДокументОбъект, ПараметрыУказанияСерий, ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Если по сериям для переданных Номенклатуры/Склада учитывается себестоимость, то рассчитывает статус указания серий.
//  Проверяет принадлежность уже указанной серии переданной номенклатуре.
//
// Параметры:
//  ТекущаяСтрока			 - Структура - для которой рассчитывается статус указания серий;
//  Склад					 - СправочникСсылка.Склады	 - склад, для которого осуществляется расчет статуса указания серий;
//  ПараметрыУказанияСерий	 - Структура				 - структура, описанная в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  * Серия - СправочникСсылка.СерииНоменклатуры - если серия указана и она может использоваться с новым значением номенклатуры,
//  	на указанном складе, то возвращается переданное значение, если нет - пустая ссылка.
//  * СтатусУказанияСерий - Число - если серии указываются в ТЧ "Товары", то возвращается рассчитанный статус,
//  	если для переданной номенклатуры/склада серии не используется - возвращается 0
//  	иначе возвращается переданный статус.
//
Функция ПроверитьСериюРассчитатьСтатусПриИзмененииРеквизитаВТЧ(ТекущаяСтрока, Склад, ПараметрыУказанияСерий) Экспорт
	
	МетаданныеОбъекта = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Серия");
	СтруктураВозврата.Вставить("УказыватьСерии");
	
	СтруктураВозврата.Серия = ТекущаяСтрока.Серия;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК РазличаютсяВладельцыСерииИНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура,
	|	Справочник.СерииНоменклатуры КАК Серии
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Серии.Ссылка = &Серия
	|	И НЕ(Серии.ВидНоменклатуры.ВладелецСерий = Номенклатура.ВидНоменклатуры.ВладелецСерий
	|					И Серии.ВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|					И Номенклатура.ВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				ИЛИ Номенклатура.ВладелецСерий = Серии.ВидНоменклатуры
	|				ИЛИ Номенклатура.ВидНоменклатуры = Серии.ВидНоменклатуры)";
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Серия", ТекущаяСтрока.Серия);
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтруктураВозврата.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("СтатусУказанияСерий");
	Иначе
		Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			СтруктураВозврата.Вставить(ИмяПоляСтатус);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		СтруктураВозврата.Серия               = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураВозврата.СтатусУказанияСерий = 0;
		Иначе
			Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураВозврата[ИмяПоляСтатус] = 0;
			КонецЦикла;
		КонецЕсли;
		СтруктураВозврата.УказыватьСерии      = Ложь;
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристикиНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипСерииНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	ТаблицаТоваров.Колонки.Добавить("Характеристика", ТипХарактеристикиНоменклатуры);
	ТаблицаТоваров.Колонки.Добавить("Серия", ТипСерииНоменклатуры);
	
	Если ПараметрыУказанияСерий.ИменаПолейССуффиксом.Количество() Тогда
		ИменаПолейССуффиксом = ПараметрыУказанияСерий.ИменаПолейССуффиксом;
		
		Если ИменаПолейССуффиксом.Свойство("Номенклатура") Тогда
			ИмяРеквизита = ИменаПолейССуффиксом.Номенклатура;
			
			ДобавитьКолонкуВТаблицуТоваров(ТаблицаТоваров, ИмяРеквизита, ТипНоменклатура);
		КонецЕсли;
		
		Если ИменаПолейССуффиксом.Свойство("Характеристика") Тогда
			ИмяРеквизита = ИменаПолейССуффиксом.Характеристика;
			
			ДобавитьКолонкуВТаблицуТоваров(ТаблицаТоваров, ИмяРеквизита, ТипХарактеристикиНоменклатуры);
		КонецЕсли;
		
		Если ИменаПолейССуффиксом.Свойство("Серия") Тогда
			ИмяРеквизита = ИменаПолейССуффиксом.Серия;
			
			ДобавитьКолонкуВТаблицуТоваров(ТаблицаТоваров, ИмяРеквизита, ТипСерииНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	
	ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, МетаданныеОбъекта);
	
	ТаблицаСерий = Новый ТаблицаЗначений;
	ТаблицаСерий.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСерий.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСерий.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаСерий, МетаданныеОбъекта, Истина);
	
	СтрокаТовара = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовара,ТекущаяСтрока);
	СтрокаТовара.НомерСтроки = 1;
	СтрокаТовара.Серия = СтруктураВозврата.Серия;
	
	Выборка = ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, ТаблицаСерий, Склад);
	
	Если Выборка.Следующий() Тогда
		
		// Если серии указываются в отдельной ТЧ, то при изменении реквизитов
		// будут пересчитаны только статусы, связанные с сериями, указываемыми
		// в ТЧ "Товары" (т.е. по которым ведется учет себестоимости).
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(Выборка.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураВозврата.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураВозврата[ИмяПоляСтатус] = Выборка[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураВозврата.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураВозврата[ИмяПоляСтатус] = ТекущаяСтрока[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтруктураВозврата.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			СтруктураВозврата.УказыватьСерии = Ложь;
			СтруктураВозврата.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураВозврата.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерий;
		Иначе
			Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураВозврата[ИмяПоляСтатус] = ТекущаяСтрока[ИмяПоляСтатус];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура подбирает серии по FEFO и заполняет подобранными значениями ТЧ "Серии"
//  Учитываются движения документа, заполненные серии перезаполняются.
//
// Параметры:
//  Объект							 - ДанныеФормыКоллекция, ДокументОбъект - объект, в котором нужно заполнить статусы.
//  ПараметрыУказанияСерий			 - Структура - параметры указания серий, возвращаемые соответствующей процедурой модуля менеджера документа.
//  СтатусыУказанияСерийЗаполнены	 - Булево - если статусы указания серий в ТЧ Товары заполнены.
//
Процедура ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий, СтатусыУказанияСерийЗаполнены = Истина) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не СтатусыУказанияСерийЗаполнены Тогда
        НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
    КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		//++ Устарело_Производство21 


		//-- Устарело_Производство21
			ЗаполнитьСерииПоFEFOВТЧТовары(Объект, ПараметрыУказанияСерий);
		//++ Устарело_Производство21


		//-- Устарело_Производство21
	Иначе
		ЗаполнитьСерииПоFEFOВТЧСерии(Объект, ПараметрыУказанияСерий);
	КонецЕсли;	
		
КонецПроцедуры

// Функция проверяет наличие в ТЧ "Товары" строк, по которым серии заполнены по FEFO.
//
// Параметры:
//  ТЧ	 - ДанныеФормыКоллекция	 - проверяемая ТЧ объекта.
// 
// Возвращаемое значение:
//  Булево - признак наличия в ТЧ "Товары" строк, заполненных по FEFO.
//
Функция ЕстьСтрокиСЗаполненнымиПоFEFOСериями(ТЧ) Экспорт
	Возврат ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",6)).Количество() > 0;	
КонецФункции

// Функция проверяет наличие в ТЧ "Товары" строк, по которым серии можно заполнить по FEFO.
//
// Параметры:
//  ТЧ	 - ДанныеФормыКоллекция	 - проверяемая ТЧ объекта.
// 
// Возвращаемое значение:
//  Булево - признак наличия в ТЧ "Товары" строк, по которым серии можно заполнить по FEFO.
//
Функция ЕстьСтрокиСЗаполняемымиПоFEFOСериями(ТЧ) Экспорт
	Возврат ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",6)).Количество() > 0
		Или ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",5)).Количество() > 0
		Или ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",25)).Количество() > 0;
КонецФункции

// Проверяет, предусматривает ли политика указания серий на переданном складе указание серий
//  и проверяет принадлежность серии.
//
// Параметры:
//  Склад							 - СправочникСсылка.Склады	 - склад, на котором хранится номенклатура;
//  Номенклатура					 - СправочникСсылка.Номенклатура - номенклатура;
//  Серия							 - СправочникСсылка.СерииНоменклатуры	 - серия номенклатуры;
//  ИмяПараметраПолитикиУчетаСерий	 - Строка								 - имя реквизита политики учета серий, по которому нужно проверить
//  								статус указания серий.
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *СтатусУказанияСерий - Строка - статус указания серий;
//  *Серия - СправочникСсылка.СерииНоменклатуры - если серия принадлежит тому же виду номенклатуры,
//  	то переданная серия, иначе - пустая ссылка.
//
Функция СерияУказанаКорректно(Склад, Номенклатура, Серия, ИмяПараметраПолитикиУчетаСерий) Экспорт
	Результат = Новый Структура("СтатусУказанияСерий,Серия");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Результат.СтатусУказанияСерий = 0;
	Иначе
		Если ИмяПараметраПолитикиУчетаСерий = "УчетСебестоимостиПоСериям" Тогда
			Результат.СтатусУказанияСерий = 14;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПриПланированииОтгрузки" Тогда 
			Результат.СтатусУказанияСерий = 10;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПриПланированииОтбора" Тогда
			Результат.СтатусУказанияСерий = 8;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УчетСерийПоFEFO" Тогда
			Результат.СтатусУказанияСерий = 6;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПоФактуОтбора" Тогда
			Результат.СтатусУказанияСерий = 4;
		Иначе
			Результат.СтатусУказанияСерий = 2;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.СтатусУказанияСерий = 0 Тогда
		Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "ВидНоменклатуры")
			 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры") Тогда
			Результат.Серия = Серия;
		Иначе
			Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// По указанным параметрам функция возвращает статус указания серий.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад, для которого вычисляется статус указания серий;
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой вычисляется статус указания серий;
//	ИмяПараметраПолитикиУчетаСерий - Строка - имя параметра политики, который нужно проверить.
//
// Возвращаемое значение:
//	Число - статус указания серий.
//
Функция СтатусУказанияСерии(Склад, Номенклатура, ИмяПараметраПолитикиУчетаСерий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям 	КАК УчитыватьСебестоимостьПоСериям,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки 	КАК УказыватьПриПланированииОтгрузки,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора 	КАК УказыватьПриПланированииОтбора,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO 					КАК УчетСерийПоFEFO,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора 			КАК УказыватьПоФактуОтбора
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтатусУказанияСерий = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.УчитыватьСебестоимостьПоСериям Тогда 
			СтатусУказанияСерий = 14;
		ИначеЕсли Выборка.УказыватьПриПланированииОтгрузки Тогда 
			СтатусУказанияСерий = 10;
		ИначеЕсли Выборка.УказыватьПриПланированииОтбора Тогда
			СтатусУказанияСерий = 8;
		ИначеЕсли Выборка.УчетСерийПоFEFO Тогда
			СтатусУказанияСерий = 6;
		ИначеЕсли Выборка.УказыватьПоФактуОтбора Тогда
			СтатусУказанияСерий = 4;
		Иначе
			СтатусУказанияСерий = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусУказанияСерий;
	
КонецФункции

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ВыдаватьСообщения - Булево - значение по умолчанию ИСТИНА. Если ЛОЖЬ, тогда не будут выдаваться сообщения,
//											просто выставится Отказ.
//			* ПредставлениеТЧ - Строка - представление проверяемой табличной части. Если значение параметра не указано,
//											тогда представление принимает значение равное синониму реквизита объекта
//											метаданных.
//			* ИмяРеквизитаСерия - Строка - представление проверяемого реквизита серии. Если значение параметра не указано,
//											тогда представление принимает значение равное синониму реквизита объекта
//											метаданных.
//			* ПутьКДаннымТаблицыФормы - Строка - значение по умолчанию "Объект" - путь к реквизиту формы, содержащий
//													проверяемую табличную часть. Если проверяется таблица, которая сама
//													является реквизитом формы, нужно передать "" (т.е. пустую строку).
//
Функция ПараметрыПроверкиЗаполненияСерий() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ВыдаватьСообщения",			Истина);
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСерия",			"");
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы",	"Объект");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары"
//  Если статусы
//  	1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//  	3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//  	5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии заполняются по FEFO)
//  	7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отбора)
//  	9 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
//  	13 - количество по сериям не совпадает с количеством товаров или серия не указана (учет себестоимости по сериям)
// 			то выдается ошибка.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект, ФормаКлиентскогоПриложения - объект, в котором нужно проверить указание серий.
//  ПараметрыУказанияСерий - Массив - Массив из Структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  Отказ - Булево - признак ошибки проверки.
//  МассивНепроверяемыхРеквизитов - Массив Из Строка, Строка - массив имен реквизитов, которые нужно исключить из платформенной проверки.
//  ВыдаватьСообщения - Булево - признак того, что нужно выдавать сообщения об ошибках проверки.
//  ПараметрыПроверки - см. ПараметрыПроверкиЗаполненияСерий
//
Процедура ПроверитьЗаполнениеСерий(ДокументОбъект, ЗНАЧ ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов = Неопределено, ПараметрыПроверки = Неопределено) Экспорт

	Если ТипЗнч(ПараметрыУказанияСерий) = Тип("Структура") Тогда
		МассивПараметровУказанияСерий = Новый Массив;
		МассивПараметровУказанияСерий.Добавить(ПараметрыУказанияСерий);
		ПараметрыУказанияСерий = МассивПараметровУказанияСерий;
	КонецЕсли;

	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияСерий();
	КонецЕсли;

	МетаданныеДокумента = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий[0].ПолноеИмяОбъекта);
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
		Для каждого Параметры Из ПараметрыУказанияСерий Цикл
			МассивНепроверяемыхРеквизитов.Добавить(СтрШаблон("%1.Серия", Параметры.ИмяТЧТовары));
			
			Если Параметры.ИменаПолейССуффиксом.Количество() Тогда
				ИменаПолейССуффиксом = Параметры.ИменаПолейССуффиксом;
				
				Если ИменаПолейССуффиксом.Свойство("Серия") Тогда
					ИмяПоляСерия = ИменаПолейССуффиксом.Серия;
					
					Если ТипЗнч(ИмяПоляСерия) = Тип("Массив") Тогда
						Для Каждого Имя Из ИмяПоляСерия Цикл
							МассивНепроверяемыхРеквизитов.Добавить(СтрШаблон("%1.%2", Параметры.ИмяТЧТовары, Имя));
						КонецЦикла;
					Иначе
						МассивНепроверяемыхРеквизитов.Добавить(СтрШаблон("%1.%2", Параметры.ИмяТЧТовары, ИмяПоляСерия));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ДополнительныеСвойства")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект.ДополнительныеСвойства, "ПроверкаЗаполненияОтключитьКонтрольСерий")) Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	МассивТекстовЗапроса = Новый Массив;
	ТаблицыРезультата = Новый Массив;
	Запрос = Новый Запрос;

	Для каждого Параметры Из ПараметрыУказанияСерий Цикл

		Если Не Параметры.ИспользоватьСерииНоменклатуры Тогда
			Продолжить;
		КонецЕсли;

		НомерЗапроса = ПараметрыУказанияСерий.Найти(Параметры);

		Если Параметры.ТоварВШапке Тогда
			
			Если НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана().Найти(ДокументОбъект.СтатусУказанияСерий) <> Неопределено
				И ДокументОбъект.СтатусУказанияСерий <> 13 Тогда
				
				ТекстСообщения = НСтр("ru = 'Количество товара ""%Товар%"" не соответствует указанному для него количеству серий. Исправьте серии.'");
					
				ТекстСообщения = СтрЗаменить(ТекстСообщения,
					"%Товар%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДокументОбъект.Номенклатура, ДокументОбъект.Характеристика));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														"Номенклатура",
														ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
														Отказ);
				
			ИначеЕсли ДокументОбъект.СтатусУказанияСерий = 13 Тогда
				ТекстСообщения = НСтр("ru = 'Поле ""Серия"" не заполнено'");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														"Серия",
														ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
														Отказ);
				
			КонецЕсли;
			
			НоменклатураЛокализация.ПроверитьЗаполнениеСерий(ДокументОбъект, Параметры, Отказ, МассивНепроверяемыхРеквизитов, ПараметрыПроверки);

		ИначеЕсли Параметры.ИмяТЧТовары = Параметры.ИмяТЧСерии Тогда
			
			Если Параметры.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда

				// В текстах произвольных запросов должны уничтожаться все временные таблицы кроме "ТаблицаСерийДляЗапроса".
				МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Параметры.ПолноеИмяОбъекта);
				ТекстЗапроса =	МодульМенеджера.ТекстЗапросаПроверкиЗаполненияСерий(Параметры);

				КоличествоПодзапросов = СтрЧислоВхождений(ТекстЗапроса, ";") + 1;
				Для Счетчик = 1 По КоличествоПодзапросов Цикл
					ТаблицыРезультата.Добавить(Строка(Новый УникальныйИдентификатор));
				КонецЦикла;

			Иначе

				ТекстЗапроса = 
					"ВЫБРАТЬ
					|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
					|	ТаблицаСерий.Номенклатура КАК Номенклатура,
					|	ТаблицаСерий.Характеристика КАК Характеристика,
					|	ТаблицаСерий.Серия КАК Серия,
					|	""Серия"" КАК ИмяПоляСерия,
					|	&ИмяПоляУпаковка КАК Упаковка,
					|	&ИмяПоляКоличество КАК КоличествоУпаковок
					|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
					|ИЗ
					|	&ТаблицаСерий_НомерЗапроса КАК ТаблицаСерий
					|ГДЕ
					|	ТаблицаСерий.СтатусУказанияСерий > 0
					|	И НЕ ТаблицаСерий.СтатусУказанияСерий В (&СтатусыСерийСериюМожноУказать)";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляУпаковка",
					?(Параметры.ПоляСвязи.Найти("Упаковка") <> Неопределено, "ТаблицаСерий.Упаковка", "ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)"));
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличество", "ТаблицаСерий." + Параметры.ИмяПоляКоличество);

				ТаблицыРезультата.Добавить("ТаблицаСерийДляЗапроса" + НомерЗапроса);

			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
				"ВЫБРАТЬ
				|	ТаблицаСерийДляЗапроса.Номенклатура КАК Номенклатура,
				|	ТаблицаСерийДляЗапроса.Характеристика КАК Характеристика,
				|	ТаблицаСерийДляЗапроса.Серия КАК Серия,
				|	ТаблицаСерийДляЗапроса.ИмяПоляСерия КАК ИмяПоляСерия,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
				|			ТОГДА ТаблицаСерийДляЗапроса.Упаковка
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|	КОНЕЦ КАК Упаковка,
				|	СУММА(ВЫБОР
				|			КОГДА ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
				|					И &ИспользоватьАдресноеХранение_НомерЗапроса
				|				ТОГДА ТаблицаСерийДляЗапроса.КоличествоУпаковок / УпаковкиЕдиницыИзмерения.КоличествоУпаковок
				|			ИНАЧЕ ТаблицаСерийДляЗапроса.КоличествоУпаковок
				|		КОНЕЦ) КАК Количество
				|ПОМЕСТИТЬ ТоварыСОшибкамиВКоличестве
				|ИЗ
				|	ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|		ПО ТаблицаСерийДляЗапроса.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
				|ГДЕ
				|	НЕ ВЫРАЗИТЬ(ТаблицаСерийДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаСерийДляЗапроса.Номенклатура,
				|	ТаблицаСерийДляЗапроса.Характеристика,
				|	ТаблицаСерийДляЗапроса.Серия,
				|	ТаблицаСерийДляЗапроса.ИмяПоляСерия,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
				|			ТОГДА ТаблицаСерийДляЗапроса.Упаковка
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|	КОНЕЦ
				|
				|ИМЕЮЩИЕ
				|	СУММА(ВЫБОР
				|			КОГДА ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
				|					И &ИспользоватьАдресноеХранение_НомерЗапроса
				|				ТОГДА ТаблицаСерийДляЗапроса.КоличествоУпаковок / УпаковкиЕдиницыИзмерения.КоличествоУпаковок
				|			ИНАЧЕ ТаблицаСерийДляЗапроса.КоличествоУпаковок
				|		КОНЕЦ) > 1
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаСерийДляЗапроса.Номенклатура) КАК НоменклатураПредставление,
				|	ТаблицаСерийДляЗапроса.Серия КАК Серия,
				|	ТаблицаСерийДляЗапроса.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНеЗаполнена,
				|	НЕ ТоварыСОшибкамиВКоличестве.Номенклатура ЕСТЬ NULL КАК ОшибкаКоличества,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Числитель, 1) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Знаменатель, 1) <> 1
				|	КОНЕЦ КАК ОшибкаУпаковки,
				|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто) КАК ЭтоТоварноеМесто,
				|	ЕСТЬNULL(УпаковкиЕдиницыИзмерения.КоличествоУпаковок, 0) КАК КоличествоТоварныхМест,
				|	ЕСТЬNULL(ТоварыСОшибкамиВКоличестве.Количество, 0) КАК КоличествоСерий,
				|	ТаблицаСерийДляЗапроса.ИмяПоляСерия КАК ИмяПоляСерия,
				|	ТаблицаСерийДляЗапроса.НомерСтроки КАК НомерСтроки
				|ИЗ
				|	ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОшибкамиВКоличестве КАК ТоварыСОшибкамиВКоличестве
				|		ПО (ТоварыСОшибкамиВКоличестве.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура)
				|			И (ТоварыСОшибкамиВКоличестве.Характеристика = ТаблицаСерийДляЗапроса.Характеристика)
				|			И (ТоварыСОшибкамиВКоличестве.Серия = ТаблицаСерийДляЗапроса.Серия)
				|			И (ТоварыСОшибкамиВКоличестве.ИмяПоляСерия = ТаблицаСерийДляЗапроса.ИмяПоляСерия)
				|			И (ВЫБОР
				|				КОГДА ТоварыСОшибкамиВКоличестве.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ТоварыСОшибкамиВКоличестве.Упаковка = ТаблицаСерийДляЗапроса.Упаковка
				|			КОНЕЦ)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|		ПО ТаблицаСерийДляЗапроса.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
				|ГДЕ
				|	НЕ ВЫРАЗИТЬ(ТаблицаСерийДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии
				|		И (НЕ ТоварыСОшибкамиВКоличестве.Номенклатура ЕСТЬ NULL
				|			ИЛИ ВЫБОР
				|				КОГДА ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
				|					ТОГДА ЛОЖЬ
				|				ИНАЧЕ ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Числитель, 1) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Знаменатель, 1) <> 1
				|			КОНЕЦ) 
				|	ИЛИ НЕ ТоварыСОшибкамиВКоличестве.Номенклатура ЕСТЬ NULL
				|	ИЛИ ТаблицаСерийДляЗапроса.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|
				|
				|УПОРЯДОЧИТЬ ПО
				|	ТаблицаСерийДляЗапроса.НомерСтроки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаСерийДляЗапроса
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТоварыСОшибкамиВКоличестве";

			Если ТипЗнч(ДокументОбъект[Параметры.ИмяТЧТовары]) = Тип("ТаблицаЗначений") Тогда
				ТаблицаСерий = ДокументОбъект[Параметры.ИмяТЧТовары].Скопировать(Параметры.ОтборПроверяемыхСтрок);
			Иначе
				ТаблицаСерий = ДокументОбъект[Параметры.ИмяТЧТовары].Выгрузить(Параметры.ОтборПроверяемыхСтрок);
			КонецЕсли;

			ИмяПараметра = "ТаблицаСерий_" + НомерЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий_НомерЗапроса", ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, ТаблицаСерий);

			ИмяПараметра = "ИспользоватьАдресноеХранение_" + НомерЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИспользоватьАдресноеХранение_НомерЗапроса", ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, Параметры.ИспользоватьАдресноеХранение);

			Запрос.УстановитьПараметр("СтатусыСерийСериюМожноУказать", НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());

			МассивТекстовЗапроса.Добавить(ТекстЗапроса);

			ТаблицыРезультата.Добавить("ТоварыСОшибкамиВКоличестве" + НомерЗапроса);
			ТаблицыРезультата.Добавить("Результат" + НомерЗапроса);
			ТаблицыРезультата.Добавить("УничтожитьТаблицаСерийДляЗапроса" + НомерЗапроса);
			ТаблицыРезультата.Добавить("УничтожитьТоварыСОшибкамиВКоличестве" + НомерЗапроса);
			
		Иначе
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	&ТекстПоляВыбораТовары,
				|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
				|	ТаблицаТоваров.Характеристика КАК Характеристика,
				|	&ИмяПоляКоличествоТовары КАК Количество,
				|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
				|ПОМЕСТИТЬ ТаблицаТоваров
				|ИЗ
				|	&ТаблицаТоваров_НомерЗапроса КАК ТаблицаТоваров
				|
				|ГДЕ
				|	ТаблицаТоваров.СтатусУказанияСерий В (&СтатусыСерийСерияНеУказана)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	&ТекстПоляВыбораТовары,
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&ТекстПоляВыбораТовары,
				|	&ИмяПоляЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
				|	ТаблицаТоваров.Характеристика КАК Характеристика,
				|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	СУММА(ТаблицаТоваров.Количество) КАК Количество
				|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
				|ИЗ
				|	ТаблицаТоваров КАК ТаблицаТоваров
				|
				|СГРУППИРОВАТЬ ПО
				|	&ТекстПоляВыбораТовары,
				|	ТаблицаТоваров.Номенклатура,
				|	ТаблицаТоваров.Характеристика,
				|	ТаблицаТоваров.СтатусУказанияСерий
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	&ТекстПоляВыбораТовары,
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&ТекстПоляВыбораСерии,
				|	ТаблицаСерий.Серия КАК Серия,
				|	ТаблицаСерий.Номенклатура КАК Номенклатура,
				|	ТаблицаСерий.Характеристика КАК Характеристика,
				|	&ИмяПоляКоличествоСерии КАК Количество
				|ПОМЕСТИТЬ ТаблицаСерий
				|ИЗ
				|	&ТаблицаСерий_НомерЗапроса КАК ТаблицаСерий
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	&ТекстПоляВыбораСерии,
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&ТекстПоляВыбораСерии,
				|	ТаблицаСерий.Номенклатура КАК Номенклатура,
				|	ТаблицаСерий.Характеристика КАК Характеристика,
				|	СУММА(ТаблицаСерий.Количество) КАК Количество
				|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
				|ИЗ
				|	ТаблицаСерий КАК ТаблицаСерий
				|
				|СГРУППИРОВАТЬ ПО
				|	&ТекстПоляВыбораСерии,
				|	ТаблицаСерий.Номенклатура,
				|	ТаблицаСерий.Характеристика
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	&ТекстПоляВыбораСерии,
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) КАК КоличествоСерий,
				|	ТаблицаТоваровДляЗапроса.Количество КАК КоличествоТоваров,
				|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
				|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	ТаблицаТоваров.СтатусУказанияСерий = 13
				|		ИЛИ &СерииПриПланированииОтгрузкиУказываютсяВТЧТовары_НомерЗапроса
				|			И ТаблицаТоваров.СтатусУказанияСерий = 9 КАК ОшибкаНеУказанаСерия,
				|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество КАК ОшибкаНеРавноКоличество,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Характеристика) КАК Характеристика,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
				|ИЗ
				|	ТаблицаТоваров КАК ТаблицаТоваров
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
				|		ПО &ТекстПоляСвязиСоединениеТоварыВсеТовары
				|			И ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
				|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
				|		ПО &ТекстПоляСвязиСоединениеТоварыСерии
				|			И ТаблицаТоваров.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
				|			И ТаблицаТоваров.Характеристика = ТаблицаСерийДляЗапроса.Характеристика
				|ГДЕ
				|	(ТаблицаТоваров.СтатусУказанияСерий = 13
				|			ИЛИ &СерииПриПланированииОтгрузкиУказываютсяВТЧТовары_НомерЗапроса
				|				И ТаблицаТоваров.СтатусУказанияСерий = 9
				|			ИЛИ ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество)
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаТоваров
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаТоваровДляЗапроса
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаСерий
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ТаблицаСерийДляЗапроса";

			Если Параметры.ПоляСвязи.Количество() = 0 Тогда
				ТекстПоляСвязиСоединениеТоварыВсеТовары = "ИСТИНА";
				ТекстПоляСвязиСоединениеТоварыСерии = "ИСТИНА";
				ТекстПоляВыбораТовары = "ИСТИНА,";
				ТекстПоляВыбораСерии = "ИСТИНА,";
			Иначе
				ПоляСвязиСоединениеТоварыСерии = Новый Массив;
				Для Каждого ПолеСвязи Из Параметры.ПоляСвязи Цикл
					ПоляСвязиСоединениеТоварыСерии.Добавить(СтрШаблон("ТаблицаТоваров.%1 = ТаблицаСерийДляЗапроса.%1", ПолеСвязи));
				КонецЦикла;
				ТекстПоляСвязиСоединениеТоварыСерии = СтрСоединить(ПоляСвязиСоединениеТоварыСерии, "
					|			И ");
				ТекстПоляСвязиСоединениеТоварыВсеТовары = СтрЗаменить(ТекстПоляСвязиСоединениеТоварыСерии, "ТаблицаСерийДляЗапроса", "ТаблицаТоваровДляЗапроса");
				ТекстПоляВыбораТовары = СтрШаблон("ТаблицаТоваров.%1,", СтрСоединить(Параметры.ПоляСвязи, ",
					|	ТаблицаТоваров."));
				ТекстПоляВыбораСерии = СтрШаблон("ТаблицаСерий.%1,", СтрСоединить(Параметры.ПоляСвязи, ",
					|	ТаблицаСерий."));
			КонецЕсли;

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляВыбораТовары,", ТекстПоляВыбораТовары);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляВыбораСерии,", ТекстПоляВыбораСерии);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСвязиСоединениеТоварыСерии", ТекстПоляСвязиСоединениеТоварыСерии);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСвязиСоединениеТоварыВсеТовары", ТекстПоляСвязиСоединениеТоварыВсеТовары);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоТовары", "ТаблицаТоваров." + Параметры.ИмяПоляКоличество);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСерии", "ТаблицаСерий." + Параметры.ИмяПоляКоличество);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляЕдиницаИзмерения",
				?(Параметры.ПоляСвязи.Найти("Упаковка") <> Неопределено, "ТаблицаТоваров.Упаковка", "ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения"));

			Если Параметры.Свойство("ОтборПроверяемыхСтрок") Тогда
				ТаблицаТоваров = ДокументОбъект[Параметры.ИмяТЧТовары].Выгрузить(Параметры.ОтборПроверяемыхСтрок);
			Иначе
				ТаблицаТоваров = ДокументОбъект[Параметры.ИмяТЧТовары].Выгрузить();
			КонецЕсли;
			ИмяПараметра = "ТаблицаТоваров_" + НомерЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров_НомерЗапроса", ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, ТаблицаТоваров);

			Запрос.УстановитьПараметр("СтатусыСерийСерияНеУказана", НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана());

			ИмяПараметра = "ТаблицаСерий_" + НомерЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий_НомерЗапроса", ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, ДокументОбъект[Параметры.ИмяТЧСерии].Выгрузить());

			СерииПриПланированииОтгрузкиУказываютсяВТЧТовары = Не Параметры.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии;
			ИмяПараметра = "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары_" + НомерЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары_НомерЗапроса", ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, СерииПриПланированииОтгрузкиУказываютсяВТЧТовары);

			ПредставлениеТЧ = ?(ПустаяСтрока(ПараметрыПроверки.ПредставлениеТЧ),
								МетаданныеДокумента.ТабличныеЧасти[Параметры.ИмяТЧТовары].Синоним,
								ПараметрыПроверки.ПредставлениеТЧ);
			ЕстьРеквизитСерия = МетаданныеДокумента.ТабличныеЧасти[Параметры.ИмяТЧТовары].Реквизиты.Найти("Серия") <> Неопределено;

			МассивТекстовЗапроса.Добавить(ТекстЗапроса);

			ТаблицыРезультата.Добавить("ТаблицаТоваров" + НомерЗапроса);
			ТаблицыРезультата.Добавить("ТаблицаТоваровДляЗапроса" + НомерЗапроса);
			ТаблицыРезультата.Добавить("ТаблицаСерий" + НомерЗапроса);
			ТаблицыРезультата.Добавить("ТаблицаСерийДляЗапроса" + НомерЗапроса);
			ТаблицыРезультата.Добавить("Результат" + НомерЗапроса);
			ТаблицыРезультата.Добавить("УничтожитьТаблицаТоваров" + НомерЗапроса);
			ТаблицыРезультата.Добавить("УничтожитьТаблицаТоваровДляЗапроса" + НомерЗапроса);
			ТаблицыРезультата.Добавить("УничтожитьТаблицаСерий" + НомерЗапроса);
			ТаблицыРезультата.Добавить("УничтожитьТаблицаСерийДляЗапроса" + НомерЗапроса);

		КонецЕсли;

	КонецЦикла;

	Если МассивТекстовЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	Для каждого Параметры Из ПараметрыУказанияСерий Цикл

		Если Не Параметры.ИспользоватьСерииНоменклатуры Тогда
			Продолжить;
		КонецЕсли;

		НомерЗапроса = ПараметрыУказанияСерий.Найти(Параметры);
		ИндексРезультата = ТаблицыРезультата.Найти("Результат" + НомерЗапроса);
		Если ИндексРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат = РезультатЗапроса[ИндексРезультата];
		ПредставлениеТЧ = ?(ПустаяСтрока(ПараметрыПроверки.ПредставлениеТЧ),
						МетаданныеДокумента.ТабличныеЧасти[Параметры.ИмяТЧТовары].Синоним,
						ПараметрыПроверки.ПредставлениеТЧ);
									
		Если Параметры.ИмяТЧТовары = Параметры.ИмяТЧСерии Тогда

			Выборка = Результат.Выбрать();
				
			Если ПараметрыПроверки.ВыдаватьСообщения Тогда
				
				Пока Выборка.Следующий() Цикл
					Если Выборка.СерияНеЗаполнена Тогда
						
						ИмяРеквизитаСерия = ?(ПустаяСтрока(ПараметрыПроверки.ИмяРеквизитаСерия),
												МетаданныеДокумента.ТабличныеЧасти[Параметры.ИмяТЧТовары].Реквизиты[Выборка.ИмяПоляСерия].Синоним,
												ПараметрыПроверки.ИмяРеквизитаСерия);

						ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяРеквизитаСерия, Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеТЧ);

						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Параметры.ИмяТЧТовары, Выборка.НомерСтроки, Выборка.ИмяПоляСерия);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
						Продолжить;
					КонецЕсли;
					Если Выборка.ОшибкаКоличества Тогда
						Если Выборка.ЭтоТоварноеМесто Тогда
							ШаблонСообщения = НСтр("ru = 'Политика учета серий товара ""%1"" предусматривает, что количество товарных мест будет соответствовать количеству товара равному 1, т.е. %2'");
							ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НоменклатураПредставление, Формат(Выборка.КоличествоТоварныхМест, "ЧН=0; ЧГ="));
						Иначе
							ШаблонСообщения = НСтр("ru = 'Указанное количество товара ""%1"" с серией ""%2"" равно %3. Политика учета серий данного товара предусматривает, что количество по любой серии этого товара всегда будет равно 1.'");
							ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НоменклатураПредставление, Выборка.Серия, Формат(Выборка.КоличествоСерий, "ЧН=0; ЧГ="));
						КонецЕсли;
						// Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и
						// товары, есть поле КоличествоУпаковок.
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Параметры.ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
					КонецЕсли;
					Если Выборка.ОшибкаУпаковки Тогда
						ШаблонСообщения = НСтр("ru = 'Политика учета серий товара ""%1"" предусматривает, что серии указываются для каждого экземпляра. Укажите единичную упаковку в строке %2 списка ""%3"".'");
						ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НоменклатураПредставление, Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеТЧ);
						
						// Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и
						// товары, есть поле КоличествоУпаковок.
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Параметры.ИмяТЧТовары, Выборка.НомерСтроки, "Упаковка");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Не Результат.Пустой() Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;

			НоменклатураЛокализация.ПроверитьЗаполнениеСерий(ДокументОбъект,
															Параметры,
															Отказ,
															МассивНепроверяемыхРеквизитов,
															ПараметрыПроверки);

		ИначеЕсли Не Параметры.ТоварВШапке Тогда

			Если ПараметрыПроверки.ВыдаватьСообщения Тогда

				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.ОшибкаНеУказанаСерия
						Или Выборка.ОшибкаНеРавноКоличество Тогда
						Если (Выборка.СтатусУказанияСерий = 13
								Или СерииПриПланированииОтгрузкиУказываютсяВТЧТовары 
									И Выборка.СтатусУказанияСерий = 9)
								И ЕстьРеквизитСерия Тогда
							ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Серия"" в строке %1 списка ""%2""'");
							ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ="), ПредставлениеТЧ);
								
							Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Параметры.ИмяТЧТовары, Выборка.НомерСтроки, "Серия");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
						Иначе
							ШаблонСообщения = НСтр("ru = 'Для товара ""%1"" указано по сериям %2 %4. Необходимо указать %3 %4. Исправьте серии.'");
							ТекстСообщения = СтрШаблон(ШаблонСообщения,
								НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика),
								Формат(Выборка.КоличествоСерий, "ЧН=0; ЧГ="),
								Формат(Выборка.КоличествоТоваров, "ЧН=0; ЧГ="),
								Выборка.ЕдиницаИзмерения);
							
							Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Параметры.ИмяТЧТовары, Выборка.НомерСтроки, "СтатусУказанияСерий");
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы, Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Не Результат.Пустой() Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;

			НоменклатураЛокализация.ПроверитьЗаполнениеСерий(ДокументОбъект, Параметры, Отказ, МассивНепроверяемыхРеквизитов, ПараметрыПроверки);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Функция определяет, какую форму для указания серий нужно открыть (регистрации или подбора),
// подготавливает параметры (в т.ч. помещает нужные данные во временное хранилище) для ее открытия и возвращает их.
//
// Параметры:
//	Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа, содержит в том числе:
//									* Ссылка - ДокументСсылка, СправочникСсылка - 
//	ПараметрыУказанияСерий		 - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	ТекущиеДанныеИдентификатор	 - Число				 - идентификатор текущей строки товаров в форме документа;
//	Форма						 - ФормаКлиентскогоПриложения		 - форма, из которой инициировано указание серий;
//	Метаданные					 - ОбъектМетаданных 	 - метаданные объекта, для которого помещаются серии в хранилище, значение по умолчанию - Неопределено.
//															Если параметр не указан - метаданные извлекаются из ссылки (Объект.Ссылка).
//	ЗаголовокКолонкиКоличество	 - Строка				 - заголовок колонки с количеством в открываемой форме указания серий, значение по умолчанию - "".
//															Если заголовок не передан, то колонка будет называться в форме "Количество".
//
// Возвращаемое значение:
//	Структура - структура с именем и параметрами формы указания серий:
//  Основные поля.
//		* ИмяФормы - Строка - имя формы, которую нужно отрыть. Это или форма регистрации или формы подбора серий. Зависит от ПараметрыУказанияСерий
//		* АдресВоВременномХранилище - Строка - адрес во временном хранилище отобранных строк серий.
//												Если вызывается форма подбора серий, то во временном хранилище лежит структура(ТаблицаТоваров, ТаблицаСерий).
//												ТаблицаСерий - это ТЧ Серии, ТаблицаТоваров - сгруппированная по полям связи таблица товаров.
//		* РегистрироватьСерии - Булево - нужно ли согласно ПараметрыУказанияСерий давать возможность регистрировать серии (или только подбирать из имеющихся);
//		* ТолькоПросмотр - Булево - Истина - поле формы доступно только для просмотра;
//		* Количество - Число - количество товаров по срокам, для которых указываются серии. Имеет смысл, для формы регистрации серии, т.к. форма подбора открывается для всей ТЧ Товары;
//		* СерииВТЧТовары - Булево - признак, что серии указываются в той же ТЧ, что и товары;
//		* Регистратор - ДокументСсылка - имеет смысл для формы подбора серий. В этой форме отображаются остатки, при этом при отображении сторнируется
//										 изменение остатков текущим документом.
//		* ПараметрыУказанияСерий - Структура - значение параметра ПараметрыУказанияСерий данной функции для передачи в форму указания серий;
//		* ЗначенияПолейДляОпределенияРаспоряжения - Структура - имеет смысл для формы подбора серий, в которой показываются остатки. Для запроса остатков нужны
//													параметры. Возвращается функцией см. НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения.
//  Значения полей текущей строки или объекта, если в строке нет таких полей.
//		* Номенклатура - СправочникСсылка.Номенклатура - номенклатура;
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры;
//		* СтатусУказанияСерий - Число - статус указания серий;
//		* ХарактеристикиИспользуются - Булево - Истина - признак использования характеристик номенклатуры;
//		* Значения полей связи из ПараметрыУказанияСерий.ПоляСвязи;
//		* Склад - СправочникСсылка.Склады - склад;
//		* Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение;
//		* УпаковкаДляПодстановки - СправочникСсылка.УпаковкиЕдиницыИзмерения, Неопределено - упаковка, в которой нужно выводить количество в форме регистрации серий.
//								Если в ТЧ "Товары" для всех строк товара одна упаковка и упаковка не входит в поля связи - передается это значение, если упаковки
//								разные - то Неопределено.
//
Функция ПараметрыФормыУказанияСерий(Объект,ПараметрыУказанияСерий,ТекущиеДанныеИдентификатор,Форма, Метаданные = Неопределено, ЗаголовокКолонкиКоличество = "") Экспорт
	МетаданныеДокумента = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	// Если нужно будет изменять количество, то данные формы нужно заблокировать
	// Если заблокировать не удастся - вылетит исключение.
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр
		И ПараметрыУказанияСерий.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	ТекстВыбораТоваров = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстВыбораТоваров = ТекстВыбораТоваров + "
		|	ТаблицаТоваров."  + СтрМас + ", ";
		
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ТекущиеДанные = Объект; // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
	Иначе
		ТекущиеДанные = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
	КонецЕсли;

	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	ЕстьДействие = ПараметрыУказанияСерий.ПоляСвязи.Найти("Действие") <> Неопределено;
	УпаковкаДляПодстановки = Неопределено;
	ИдетОбработкаТоварныхМест = Ложь;
	Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста Тогда
		ИдетОбработкаТоварныхМест = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Упаковка, "ТипУпаковки")
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
	КонецЕсли;
	
	Если ЕстьДействие Тогда
		РегистрироватьСерии = ?(ТекущиеДанные.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать, Ложь, Истина);
	Иначе
		РегистрироватьСерии = ПараметрыУказанияСерий.РегистрироватьСерии;
	КонецЕсли;
	
	Если РегистрироватьСерии Тогда
		НомераСтрокДокумента = "";
		
		Если ЕстьУпаковки
			И ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда //не заполнена для тары
			ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(ТекущиеДанные.Упаковка, ТекущиеДанные.Номенклатура);
			КоэффициентУпаковки      = ДанныеУпаковки.Коэффициент; 
			НужноОкруглятьКоличество = ДанныеУпаковки.НужноОкруглятьКоличество;
		Иначе
			КоэффициентУпаковки = 1;
			НужноОкруглятьКоличество = Ложь;
		КонецЕсли;
		
		Упаковки = Новый Массив();
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			ЕстьУпаковкиВТЧТовары = Ложь;
			Если Объект.Свойство("Упаковка") Тогда
				Упаковки.Добавить(Объект.Упаковка);
			КонецЕсли;
		Иначе
			КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(Новый Массив); // ТаблицаЗначений
			ЕстьУпаковкиВТЧТовары = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
		КонецЕсли;
		
		КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(Новый Массив); // ТаблицаЗначений
		ЕстьУпаковкиВТЧСерии = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
		
		Если ЕстьУпаковкиВТЧТовары Тогда
			УпаковкиТЧТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧТовары);
		КонецЕсли;
		Если ЕстьУпаковкиВТЧСерии Тогда
			УпаковкиТЧСерии = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧСерии);
		КонецЕсли;
		
		Упаковки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Упаковки);
		ТипыУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Упаковки, "ТипУпаковки");
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			КоличествоВДокументе = Объект[ПараметрыУказанияСерий.ИмяПоляКоличество]*КоэффициентУпаковки;
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);
			
			ТекстПоляСвязиУпаковка = ?(ЕстьУпаковкиВТЧТовары И Не ЕстьУпаковки, ", Упаковка", "");
			
			ВыгружаемыеПоля = "Номенклатура,Характеристика" + ТекстПоляСвязи + ТекстПоляСвязиУпаковка;
			ТаблицаТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(, ВыгружаемыеПоля + ", " + ПараметрыУказанияСерий.ИмяПоляКоличество);
			ТаблицаТовары.Свернуть(ВыгружаемыеПоля, ПараметрыУказанияСерий.ИмяПоляКоличество);
			
			НайденныеСтрокиТоваровСгруппированные = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
			
			КоличествоВДокументе = 0;
			МинимальноеКоличествоЦелыхНаборов = 0;
			Для Каждого СтрМас Из НайденныеСтрокиТоваровСгруппированные Цикл
				
				Если ЕстьУпаковкиВТЧТовары Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - товарным местом,
					// то нужно исключать из алгоритма строки с другими типами упаковок. И наоборот.
					Если ИдетОбработкаТоварныхМест
						И Не ТоварныеМестаВСтроке Тогда
						Продолжить;
					ИначеЕсли Не ИдетОбработкаТоварныхМест
						И ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
				
					// Расчитаем упаковку, в которой нужно отображать количество в форме редактирования упаковок
					// Если для всех строк указана одна упаковка - то в ней и будем отображать количество
					// Если упаковка входит в поля связи, то она и будет единственной для всех строк.
					Если УпаковкаДляПодстановки = Неопределено Тогда
						УпаковкаДляПодстановки = СтрМас.Упаковка;
					ИначеЕсли УпаковкаДляПодстановки <> СтрМас.Упаковка Тогда
						УпаковкаДляПодстановки = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;
					
				КонецЕсли;
				
				Если НужноОкруглятьКоличество Тогда
					СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество] = Окр(СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество], 0, РежимОкругления.Окр15как20);
				КонецЕсли;
				
				Если ИдетОбработкаТоварныхМест Тогда
					// Количество упаковок, из которых состоит одна штука товара
					КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрМас.Упаковка, "КоличествоУпаковок");
					
					КоличествоЦелыхНаборов = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
					
					МинимальноеКоличествоЦелыхНаборов = ?(МинимальноеКоличествоЦелыхНаборов = 0,
															КоличествоЦелыхНаборов,
															Мин(КоличествоЦелыхНаборов, МинимальноеКоличествоЦелыхНаборов));
															
					КоличествоВДокументе = МинимальноеКоличествоЦелыхНаборов;
				Иначе
					КоличествоВДокументе = КоличествоВДокументе + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество]*КоэффициентУпаковки;
				КонецЕсли;
				
			КонецЦикла;
			
			НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				Если ЕстьУпаковкиВТЧТовары Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - товарным местом,
					// то нужно исключать из алгоритма строки с другими типами упаковок. И наоборот.
					Если ИдетОбработкаТоварныхМест
						И Не ТоварныеМестаВСтроке Тогда
						Продолжить;
					ИначеЕсли Не ИдетОбработкаТоварныхМест
						И ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НомераСтрокДокумента = НомераСтрокДокумента + Строка(СтрМас.НомерСтроки) + ", ";
			КонецЦикла;
			
			Если Не ПустаяСтрока(НомераСтрокДокумента) Тогда
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаСерий = Новый ТаблицаЗначений;
		ТаблицаСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаСерий.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Если ИдетОбработкаТоварныхМест Тогда
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если ЕстьУпаковкиВТЧСерии Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - товарным местом,
					// то нужно исключать из алгоритма строки с другими типами упаковок.
					Если Не ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// При использовании товарных мест, необходимо получить свернутую таблицу с количеством приведенным
				// к максимуму - для правильного использования в последующем алгоритме распределения в методе ОбработатьУказаниеСерий.
				СтрокаСерий = ТаблицаСерий.Найти(СтрМас.Серия, "Серия");
				Если СтрокаСерий <> Неопределено Тогда
					
					СтрокаСерий.Количество = Макс(СтрокаСерий.Количество, СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество]);
					СтрокаСерий.КоличествоУпаковок = СтрокаСерий.Количество;
					
				Иначе
					
					НоваяСтрока = ТаблицаСерий.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
					
					// Сделано неуниверсально. Если упаковки есть в полях связи, то поля с количеством во всех документах называются стандартно.
					Если Не ЕстьУпаковки Тогда
						НоваяСтрока.Количество = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл

				Если СтрМас.Серия.Пустая() Тогда
					Продолжить;
				КонецЕсли;

				Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
					И ЕстьУпаковкиВТЧСерии Тогда
					
					ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
												= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
					// Если форма указания серий вызывается для строки с упаковкой - не товарным местом,
					// то нужно исключать из алгоритма строки с типом упаковки "товарное место".
					Если ТоварныеМестаВСтроке Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаСерий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
				
				// Сделано неуниверсально. Если упаковки есть в полях связи, то поля с количеством во всех документах называются стандартно.
				Если Не ЕстьУпаковки Тогда
					НоваяСтрока.Количество = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСерий,УникальныйИдентификаторФормы);
		
	Иначе
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		Если НЕ ЕстьУпаковки Тогда
			ТаблицаТоваров.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		КонецЕсли;
		ТаблицаТоваров.Колонки.Добавить("НомераСтрокДокумента",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
		
		ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, Метаданные); 
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			СтрокаТовара = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
			Если ПараметрыУказанияСерий.ЭтоЗаказ
				И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено
				И Не Объект.Обособленно Тогда
				// В шапке заказов при смене варианта обеспечения не очищается назначение,
				//	поэтому для необособленной отгрузки сбросим назначение здесь.
				СтрокаТовара.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
			|	ТаблицаТоваров.НомерСтроки
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.СтатусУказанияСерий В(&ОтборПоСтатусам)
			|	И &УсловиеПоДействию
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|		ТаблицаТоваров.Характеристика КАК Характеристика,
			|		МИНИМУМ(ТаблицаТоваров.Количество) КАК Количество,
			|		МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки
			|	ИЗ
			|		ТаблицаТоваров КАК ТаблицаТоваров
			|	ГДЕ
			|		ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Количество
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Количество,
			|		ТаблицаТоваров.НомерСтроки
			|	ИЗ
			|		ТаблицаТоваров КАК ТаблицаТоваров
			|	ГДЕ
			|		ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)) КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.ТекстВыбораТоваров,", ТекстВыбораТоваров); 
			
			Если Не ЕстьУпаковки Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.Упаковка,", ""); 
			КонецЕсли;
			
			Если ЕстьДействие Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
											"&УсловиеПоДействию",
											"ТаблицаТоваров.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)");
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДействию", "ИСТИНА");
			КонецЕсли;		
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			Если ПараметрыУказанияСерий.НужноОкруглятьКоличество
				И СтрНайти(ПараметрыУказанияСерий.ИмяПоляКоличество, "КоличествоУпаковок") = 0 Тогда
				
				Если ПараметрыУказанияСерий.ТоварВШапке Тогда
					ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Объект.Упаковка, Объект.Номенклатура);
					Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
						Объект[ПараметрыУказанияСерий.ИмяПоляКоличество] = Окр(Объект[ПараметрыУказанияСерий.ИмяПоляКоличество], 0, РежимОкругления.Окр15как20);
					КонецЕсли;
				Иначе
					ПараметрыОкругления = ПараметрыОкругленияКоличестваШтучныхТоваров();
					ПараметрыОкругления.ИмяТЧ = ПараметрыУказанияСерий.ИмяТЧТовары;
					
					ДлинаИмяПоляКоличество = СтрДлина(ПараметрыУказанияСерий.ИмяПоляКоличество);
					
					Если ДлинаИмяПоляКоличество > 10 Тогда
						ПараметрыОкругления.СуффиксДопРеквизита = Прав(ПараметрыУказанияСерий.ИмяПоляКоличество, ДлинаИмяПоляКоличество - 10);
					КонецЕсли;
					
					ОкруглитьКоличествоШтучныхТоваров(Объект, Неопределено, ПараметрыОкругления);
				КонецЕсли;
				
			КонецЕсли;
			
			ТЧ = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить();
			
			Запрос.УстановитьПараметр("ТаблицаТоваров",ТЧ);

			ОтборПоСтатусамУказанияСерий = Новый Массив;
			ОтборПоСтатусамУказанияСерий.Добавить(3);
			ОтборПоСтатусамУказанияСерий.Добавить(23);
			ОтборПоСтатусамУказанияСерий.Добавить(4);
			ОтборПоСтатусамУказанияСерий.Добавить(5);
			ОтборПоСтатусамУказанияСерий.Добавить(25);
			ОтборПоСтатусамУказанияСерий.Добавить(6);
			ОтборПоСтатусамУказанияСерий.Добавить(7);
			ОтборПоСтатусамУказанияСерий.Добавить(27);
			ОтборПоСтатусамУказанияСерий.Добавить(8);
			Если ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии
				ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
				ОтборПоСтатусамУказанияСерий.Добавить(9);
				ОтборПоСтатусамУказанияСерий.Добавить(10);
				ОтборПоСтатусамУказанияСерий.Добавить(11);
			КонецЕсли;
			Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
				ОтборПоСтатусамУказанияСерий.Добавить(13);
				ОтборПоСтатусамУказанияСерий.Добавить(14);
				ОтборПоСтатусамУказанияСерий.Добавить(15);
				ОтборПоСтатусамУказанияСерий.Добавить(17);
				ОтборПоСтатусамУказанияСерий.Добавить(18);
				ОтборПоСтатусамУказанияСерий.Добавить(28);
				ОтборПоСтатусамУказанияСерий.Добавить(19);
				ОтборПоСтатусамУказанияСерий.Добавить(20);
				ОтборПоСтатусамУказанияСерий.Добавить(22);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ОтборПоСтатусам", ОтборПоСтатусамУказанияСерий);
			
			ПоляГруппировки = "Номенклатура,Характеристика" + ТекстПоляСвязи;
			
			ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДляСортировки",
				Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
			
			Количество               = 0;
			НомераСтрокДокумента     = "";
			НомерСтрокиДляСортировки = 0;
			
			НоваяСтрокаТоваров = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущаяГруппировка, Выборка, ПоляГруппировки) Тогда
					
					Если НоваяСтрокаТоваров <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
						НоваяСтрокаТоваров.Количество = Количество;
						
						НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
						НоваяСтрокаТоваров.НомераСтрокДокумента     = НомераСтрокДокумента;
						НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ТекущаяГруппировка,Выборка);
					НоваяСтрокаТоваров       = ТаблицаТоваров.Добавить();
					НомерСтрокиДляСортировки = Выборка.НомерСтроки;
					Количество           = 0;
					НомераСтрокДокумента = "";
					
				КонецЕсли;
				
				Количество           = Количество + Выборка.Количество;
				НомераСтрокДокумента = НомераСтрокДокумента + Выборка.НомерСтроки + ", ";
				
			КонецЦикла;
			
			Если НоваяСтрокаТоваров <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
				НоваяСтрокаТоваров.Количество = Количество;
				
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
				НоваяСтрокаТоваров.НомераСтрокДокумента = НомераСтрокДокумента;
				НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
			КонецЕсли;
			
			ТаблицаТоваров.Сортировать("НомерСтрокиДляСортировки");
			ТаблицаТоваров.Колонки.Удалить("НомерСтрокиДляСортировки");
			
		КонецЕсли;
		СтруктураДляВременногоХранилища = Новый Структура;
		СтруктураДляВременногоХранилища.Вставить("ТаблицаТоваров",ТаблицаТоваров);
		
		ТаблицаСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(); 
		
		Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Серия КАК Серия,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
			|	ТаблицаТоваров.Количество КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Серия КАК Серия,
			|	Упаковки.Ссылка КАК Упаковка
			|ПОМЕСТИТЬ УпаковкиТоваровПоТоварнымМестам
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
			|		ПО ТаблицаТоваров.Номенклатура.НаборУпаковок = Упаковки.Владелец
			|			И (Упаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто))
			|ГДЕ
			|	НЕ Упаковки.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	Упаковки.Ссылка
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
			|		ПО (ТаблицаТоваров.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
			|			И ТаблицаТоваров.Номенклатура = Упаковки.Владелец
			|			И (Упаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто))
			|ГДЕ
			|	НЕ Упаковки.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Упаковка КАК Упаковка,
			|	ТаблицаТоваров.Серия КАК Серия
			|ПОМЕСТИТЬ ПервыеНомераСтрокТоваровПоТоварнымМестам
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Серия КАК Серия,
			|	ТаблицаТоваров.Упаковка КАК Упаковка,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество
			|ПОМЕСТИТЬ ПолныеНаборыТоваровПоТоварнымМестам
			|ИЗ
			|	(ВЫБРАТЬ
			|		Упаковки.ТекстВыбораТоваров,
			|		Упаковки.Номенклатура КАК Номенклатура,
			|		Упаковки.Характеристика КАК Характеристика,
			|		Упаковки.Серия КАК Серия,
			|		Упаковки.Упаковка КАК Упаковка,
			|		ЕСТЬNULL(ТаблицаТоваров.Количество, 0) КАК Количество
			|	ИЗ
			|		УпаковкиТоваровПоТоварнымМестам КАК Упаковки
			|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|			ПО Упаковки.Номенклатура = ТаблицаТоваров.Номенклатура
			|				И Упаковки.Характеристика = ТаблицаТоваров.Характеристика
			|				И Упаковки.Серия = ТаблицаТоваров.Серия
			|				И Упаковки.Упаковка = ТаблицаТоваров.Упаковка
			|				И (&УсловиеСоединения)) КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия,
			|	ТаблицаТоваров.Упаковка
			|
			|ИМЕЮЩИЕ
			|	СУММА(ТаблицаТоваров.Количество) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Упаковка КАК Упаковка,
			|	ТаблицаТоваров.Серия КАК Серия,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(Упаковки.НомерСтроки) КАК НомерСтроки,
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|		ТаблицаТоваров.Характеристика КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|		ТаблицаТоваров.Серия КАК Серия,
			|		МИНИМУМ(ТаблицаТоваров.Количество) КАК Количество
			|	ИЗ
			|		ПолныеНаборыТоваровПоТоварнымМестам КАК ТаблицаТоваров
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПервыеНомераСтрокТоваровПоТоварнымМестам КАК Упаковки
			|			ПО ТаблицаТоваров.Номенклатура = Упаковки.Номенклатура
			|				И ТаблицаТоваров.Номенклатура = Упаковки.Номенклатура
			|				И ТаблицаТоваров.Характеристика = Упаковки.Характеристика
			|				И ТаблицаТоваров.Серия = Упаковки.Серия
			|				И (&УсловиеСоединения)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Серия
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаТоваров.НомерСтроки,
			|		ТаблицаТоваров.ТекстВыбораТоваров,
			|		ТаблицаТоваров.Номенклатура,
			|		ТаблицаТоваров.Характеристика,
			|		ТаблицаТоваров.Упаковка,
			|		ТаблицаТоваров.Серия,
			|		ТаблицаТоваров.Количество
			|	ИЗ
			|		ТаблицаТоваров КАК ТаблицаТоваров
			|	ГДЕ
			|		ЕСТЬNULL(ТаблицаТоваров.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)) КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаТоваров.НомерСтроки,
			|	ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Упаковка";
			
			ТекстыУсловияСоединенияТаблиц = Новый Массив;
			ТекстыУсловияСоединенияТаблиц.Добавить("ИСТИНА");
			
			ТекстВыбораТоваров= СтрЗаменить(ТекстВыбораТоваров, "ТаблицаТоваров.Упаковка,", "");
			ТекстВыбораУпаковок = СтрЗаменить(ТекстВыбораТоваров, "ТаблицаТоваров", "Упаковки");
			
			Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
				
				Если СтрНайти(ТекстВыбораТоваров, ПолеСвязи) = 0
					Или ПолеСвязи = "Упаковка" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ТекстыУсловияСоединенияТаблиц.Добавить(" Упаковки." + ПолеСвязи + " = ТаблицаТоваров." + ПолеСвязи);
				
			КонецЦикла;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.ТекстВыбораТоваров,", ТекстВыбораТоваров);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Упаковки.ТекстВыбораТоваров,", ТекстВыбораУпаковок);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединения", 
				СтрСоединить(ТекстыУсловияСоединенияТаблиц, Символы.ПС +"И " ));
				
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаСерий);
			ТаблицаСерий = Запрос.Выполнить().Выгрузить();
			
		Иначе
			
			СтрокиСерийКУдалению = ТаблицаСерий.НайтиСтроки(Новый Структура("Серия",Справочники.СерииНоменклатуры.ПустаяСсылка()));
			
			Для Каждого СтрМас Из СтрокиСерийКУдалению Цикл
				ТаблицаСерий.Удалить(СтрМас);
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураДляВременногоХранилища.Вставить("ТаблицаСерий",ТаблицаСерий);
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДляВременногоХранилища,УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = Новый Структура("Номенклатура,Характеристика,СтатусУказанияСерий,ХарактеристикиИспользуются"+ТекстПоляСвязи);
	ПараметрыФормыУказанияСерий.Вставить("НомераСтрокДокумента", НомераСтрокДокумента); 
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,Объект);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,ТекущиеДанные);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Склад", Неопределено);
	ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Склад", ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляСклад]);
	Иначе
		ПараметрыФормыУказанияСерий.Вставить("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Помещение") <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Помещение", ТекущиеДанные.Помещение);
	ИначеЕсли ПараметрыУказанияСерий.ИмяПоляПомещение = Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Помещение", Справочники.СкладскиеПомещения.ПустаяСсылка());
	Иначе
		ПараметрыФормыУказанияСерий.Вставить("Помещение", Объект[ПараметрыУказанияСерий.ИмяПоляПомещение]);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("УпаковкаДляПодстановки",УпаковкаДляПодстановки);
	ПараметрыФормыУказанияСерий.Вставить("ИдетОбработкаТоварныхМест", ИдетОбработкаТоварныхМест);
	
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("РегистрироватьСерии", РегистрироватьСерии);
	ПараметрыФормыУказанияСерий.Вставить("ТолькоПросмотр", ПараметрыУказанияСерий.ТолькоПросмотр);
	ПараметрыФормыУказанияСерий.Вставить("ТолькоРедактированиеКоличества", Ложь);
	ПараметрыФормыУказанияСерий.Вставить("Количество",КоличествоВДокументе);
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("СерииВТЧТовары", ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары);
	Если Объект.Свойство("Ссылка") Тогда
		ПараметрыФормыУказанияСерий.Вставить("Регистратор",Объект.Ссылка);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ПараметрыУказанияСерий",ПараметрыУказанияСерий);
	
	ЗначенияПолейДляОпределенияРаспоряжения = НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения(Объект,
																							  ТекущиеДанные,
																							  ПараметрыУказанияСерий);

	ПараметрыФормыУказанияСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", ЗначенияПолейДляОпределенияРаспоряжения);
	
	Если РегистрироватьСерии Тогда
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.РегистрацияИПодборСерийПоОднойСтрокеТоваров";
	Иначе
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ПодборСерийПоОстаткамДляВсехСтрокТоваров";
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("ИмяФормы", ИмяФормы);
	
	Если ЗначениеЗаполнено(ЗаголовокКолонкиКоличество) Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗаголовокКолонкиКоличество", ЗаголовокКолонкиКоличество);
	КонецЕсли;
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" документа,
//	перерасчитывает статусы указания серий строках товаров.
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура - основной реквизит формы документа,
//  ПараметрыУказанияСерий		 - Структура - параметры указания серий, возвращаемые соответствующей процедурой модуля менеджера документа,
//  ПараметрыФормыУказанияСерий	 - см. ПараметрыФормыУказанияСерий.
//  Действия					 - Структура - описание действий, которые необходимо выполнить со строками после указания серий, см. ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ
//  КешированныеЗначения		 - Структура - Сохраненные значения параметров, используемых при обработке строк.
//
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, Действия = Неопределено, КешированныеЗначения = Неопределено) Экспорт
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	
#Область ОбработкаПодбораСерий
	// Если обрабатывается результаты формы подбора серий,
	// то серии целиком загружаются из обработки.
	
	Если Не ПараметрыФормыУказанияСерий.РегистрироватьСерии Тогда 
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
		
		Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
			
			ЗаполнитьСерииВТЧПоТаблицеСерий(Объект,
											ПараметрыУказанияСерий,
											СтруктураВозврата.ТаблицаСерий,
											Действия);
											
			Если ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
				И Не ПараметрыУказанияСерий.ИспользоватьАдресноеХранение Тогда
				НоменклатураСервер.РазбитьТоварыПоТоварнымМестам(Объект[ПараметрыУказанияСерий.ИмяТЧТовары]);									
			КонецЕсли;
			
		Иначе
			Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(СтруктураВозврата.ТаблицаСерий);
			ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		КонецЕсли;
		
		
		Возврат;
	КонецЕсли;
#КонецОбласти

#Область ОбработкаРегистрацииСерий
// Удалим прежние строки серий
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	
	Если СтруктураПоиска.Свойство("Упаковка")
		И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
		И ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
		
		// При использовании товарных мест, изменения в строке касаются каждой упаковки - товарного места.
		СтруктураПоиска.Удалить("Упаковка");
		
	КонецЕсли;
	
	НомерВставляемойСтроки = 0;
	
	Упаковки = Новый Массив();
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЕстьУпаковкиВТЧТовары = Ложь;
		Если Объект.Свойство("Упаковка") Тогда
			Упаковки.Добавить(Объект.Упаковка);
		КонецЕсли;
	Иначе
		КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(Новый Массив); // ТаблицаЗначений
		ЕстьУпаковкиВТЧТовары = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
	КонецЕсли;
	
	КолонкиТаблицы = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(Новый Массив); // ТаблицаЗначений
	ЕстьУпаковкиВТЧСерии = КолонкиТаблицы.Колонки.Найти("Упаковка") <> Неопределено;
	
	Если ЕстьУпаковкиВТЧТовары Тогда
		УпаковкиТЧТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧТовары);
	КонецЕсли;
	
	Если ЕстьУпаковкиВТЧСерии Тогда
		УпаковкиТЧСерии = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(, "Упаковка").ВыгрузитьКолонку("Упаковка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Упаковки, УпаковкиТЧСерии);
	КонецЕсли;
	
	Упаковки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Упаковки);
	ТипыУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Упаковки, "ТипУпаковки");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	КоличествоУпаковокДоУдаленияСерий = 0;
	УпаковкиТоварныхМест = Новый Массив();
	
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	
	Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
		
		Если ЕстьУпаковкиВТЧТовары
			И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
			И ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
			ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
			Если Не ТоварныеМестаВСтроке Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТоварныеМестаВСтроке
				И УпаковкиТоварныхМест.Найти(СтрМас.Упаковка) = Неопределено Тогда
				УпаковкиТоварныхМест.Добавить(СтрМас.Упаковка);
			КонецЕсли;
			
		ИначеЕсли ЕстьУпаковкиВТЧТовары
			И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста 
			И Не ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
			ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(СтрМас.Упаковка)
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
			Если ТоварныеМестаВСтроке Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
			Если ЕстьУпаковкиВТЧТовары Тогда
				КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас.КоличествоУпаковок;
			Иначе
				КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаСерий.НайтиСтроки(Новый Структура("Серия", СтрМас.Серия)).Количество() = 0 Тогда 
			Если НомерВставляемойСтроки = 0 Тогда
				НомерВставляемойСтроки = СтрМас.НомерСтроки;
			КонецЕсли;
			Если ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества Тогда
				СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
			Иначе
				Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМас);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим новые строки серий
	СтрокиСерийДляОбработки =  Новый Массив;
	
	КоличествоУпаковокПослеУдаленияСерий = 0;
	
	Если ЕстьУпаковкиВТЧТовары
		И ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста
		И ПараметрыФормыУказанияСерий.ИдетОбработкаТоварныхМест Тогда
		
		ТаблицаДокумента = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(); // ТаблицаЗначений
		ТаблицаДокумента.Колонки.Добавить("СтрокаКОбработке", Новый ОписаниеТипов("Булево"));
		ТаблицаДокумента.Колонки.Добавить("КоличествоПоСериям", Новый ОписаниеТипов("Число"));
		
		СтарыеСтроки = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
		
		// Подготовка строк к обработке
		Для Каждого Строка Из СтарыеСтроки Цикл
			
			ТоварныеМестаВСтроке = (ТипыУпаковок.Получить(Строка.Упаковка)
										= Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто);
			
			Если ТоварныеМестаВСтроке Тогда
				Строка.СтрокаКОбработке = Истина;
			КонецЕсли;
		
		КонецЦикла;
		
		// Умножение серий на упаковки с типом "товарное место"
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Серия      КАК Серия,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ВТСерии
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Упаковка
		|ПОМЕСТИТЬ ВТУпаковки
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивУпаковок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Серия           КАК Серия,
		|	СписокУпаковок.Упаковка КАК Упаковка,
		|	Таблица.Количество      КАК КоличествоПоСериям,
		|	ИСТИНА                  КАК СтрокаКОбработке
		|ИЗ
		|	ВТСерии КАК Таблица
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТУпаковки КАК СписокУпаковок
		|		ПО (ИСТИНА)";
		Запрос.УстановитьПараметр("Таблица", ТаблицаСерий);
		Запрос.УстановитьПараметр("МассивУпаковок", УпаковкиТоварныхМест);
		
		ТаблицаСерийИУпаковок = Запрос.Выполнить().Выгрузить();
		
		// 1. Распределение на строки с указанными упаковками и сериями
		
		// Добавление количества заказов
		Ключ = "СтрокаКОбработке, Упаковка, Серия";
		
		Условие = "ПО [Количество]";
		НакладныеСервер.РаспределитьКоличество(ТаблицаСерийИУпаковок, ТаблицаДокумента, "КоличествоПоСериям", Ключ, Условие, Ложь);
		
		// 2. Распределение на строки с указанными упаковками
		Ключ = "СтрокаКОбработке, Упаковка";
		
		Условие = "ПО [Количество]";
		НакладныеСервер.РаспределитьКоличество(ТаблицаСерийИУпаковок, ТаблицаДокумента, "КоличествоПоСериям", Ключ, Условие, Ложь);
		
		// 3. Создание новых строк для оставшейся нераспределенной части
		Для Каждого Строка Из ТаблицаСерийИУпаковок Цикл
			Если Строка.КоличествоПоСериям = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыФормыУказанияСерий);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Серия, Упаковка");
			НоваяСтрока.Количество = Строка.КоличествоПоСериям;
			
			СтрокиСерийДляОбработки.Добавить(НоваяСтрока);
			
			Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
				
				СтруктураДействий = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Действия);
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
				СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КешированныеЗначения);
				
				КоличествоУпаковокПослеУдаленияСерий = КоличествоУпаковокПослеУдаленияСерий + НоваяСтрока.КоличествоУпаковок; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Для Каждого СтрТабл Из ТаблицаСерий Цикл
			СтруктураПоискаПоСериям = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
			СтруктураПоискаПоСериям.Вставить("Серия", СтрТабл.Серия);
			
			СтарыеСтроки = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаПоСериям);
			
			Если СтарыеСтроки.Количество() = 0 Тогда 
				Если НомерВставляемойСтроки = 0 Тогда
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
				Иначе
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Вставить(НомерВставляемойСтроки - 1);
				КонецЕсли;
			Иначе
				НоваяСтрока = СтарыеСтроки[0];
				
				Если СтарыеСтроки.Количество() > 1 Тогда
					
					Для Каждого СтрМасСтарыеСтроки из СтарыеСтроки Цикл
						Если СтрМасСтарыеСтроки <> НоваяСтрока Тогда
							Если ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества Тогда
								СтрМасСтарыеСтроки[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
							Иначе
								Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМасСтарыеСтроки);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			НомерВставляемойСтроки = НоваяСтрока.НомерСтроки + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
			
			Если ЕстьУпаковкиВТЧСерии
				И ПараметрыФормыУказанияСерий.Свойство("УпаковкаДляПодстановки") Тогда
				
				НоваяСтрока.Упаковка = ПараметрыФормыУказанияСерий.УпаковкаДляПодстановки;
				
			КонецЕсли;
			
			Если ПараметрыУказанияСерий.ИмяПоляКоличество <> "Количество"
				И ПараметрыУказанияСерий.ИмяПоляКоличество <> "КоличествоУпаковок" Тогда
				Если ЕстьУпаковки Тогда
					НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрТабл.КоличествоУпаковок;
				Иначе
					НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрТабл.Количество;
				КонецЕсли;
			КонецЕсли;
			
			СтрокиСерийДляОбработки.Добавить(НоваяСтрока);
			
			Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
				
				Если Действия <> Неопределено Тогда
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КешированныеЗначения);
					
				КонецЕсли;
				
				Если ЕстьУпаковкиВТЧТовары Тогда
					КоличествоУпаковокПослеУдаленияСерий = КоличествоУпаковокПослеУдаленияСерий + НоваяСтрока.КоличествоУпаковок; 
				Иначе
					КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
		
		Дельта = КоличествоУпаковокПослеУдаленияСерий - КоличествоУпаковокДоУдаленияСерий;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") 
			И ЕстьУпаковки Тогда
			ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(ПараметрыФормыУказанияСерий.Номенклатура,
																					ПараметрыФормыУказанияСерий.Упаковка); 
			
			Для Каждого СтрТабл Из ТаблицаТары Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрТабл.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрТабл.Характеристика);
				
				СтрокиТары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиТары.Количество() = 0 Тогда
					// Если форма указания серий была открыта после сканирования штрихкода товара,
					// то тара была добавлена в документ обработкой сканирования штрихкода.
					// Значит это условие может отработать только при ручном открытии формы серий, что эквивалентно
					// ручному редактированию количества товаров.
					// При ручном редактировании количества товаров мы тару не пересчитываем.
					Продолжить;	
				Иначе
					СтрокаТары = СтрокиТары[0];
				КонецЕсли;
				
				СтрокаТары.Количество         = СтрокаТары.Количество + Дельта * СтрТабл.Количество;
				СтрокаТары.КоличествоУпаковок = СтрокаТары.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьУпаковки
		И ЗначениеЗаполнено(ПараметрыФормыУказанияСерий.Упаковка) Тогда //не заполнена для тары
		КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
		КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество 
							/Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ПараметрыФормыУказанияСерий.Упаковка, ПараметрыФормыУказанияСерий.Номенклатура); 
	Иначе
		КоличествоСерий = ТаблицаСерий.Итог("Количество");
		КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество;
	КонецЕсли;	
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если КоличествоСерий <> КоличествоТоваров 
			И Действия <> Неопределено
			И Действия.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И Действия.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			Объект[ПараметрыУказанияСерий.ИмяПоляКоличество] = КоличествоСерий;
			КоличествоТоваров = КоличествоСерий;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Объект, Действия, КешированныеЗначения);
			
		КонецЕсли;
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров);
		
		НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																			Объект.СтатусУказанияСерий,
																			СерииУказаныПолностью,
																			КоличествоСерий);
		
	Иначе
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		Если КоличествоСерий <> КоличествоТоваров 
			И Действия <> Неопределено
			И Действия.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И Действия.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			ЕстьПересчетКоличества = Ложь;
			КоличествоЕдиницСуффикс = "";
			
			Если Действия.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
				Действия.Удалить("ПересчитатьКоличествоЕдиниц");
				ЕстьПересчетКоличества = Истина;
			ИначеЕсли Действия.Свойство("ПересчитатьКоличествоЕдиницСуффикс") Тогда
				КоличествоЕдиницСуффикс = Действия.ПересчитатьКоличествоЕдиницСуффикс;
				Действия.Удалить("ПересчитатьКоличествоЕдиницСуффикс");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			Если Действия.Свойство("ПересчитатьКоличествоУпаковок") Тогда
				Действия.Удалить("ПересчитатьКоличествоУпаковок");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			КоличествоКРаспределению = КоличествоСерий - КоличествоТоваров;
			
			Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
				Дельта = КоличествоКРаспределению;
				
				Если -Дельта > СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] Тогда
					Дельта = -СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество];
					СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
				Иначе
					СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] + Дельта;
				КонецЕсли;
				
				Если ЕстьПересчетКоличества Тогда
					Если ЕстьУпаковки Тогда
						Если КоличествоЕдиницСуффикс <> "" Тогда
							Действия.Вставить("ПересчитатьКоличествоЕдиницСуффикс", КоличествоЕдиницСуффикс);
						Иначе
							Действия.Вставить("ПересчитатьКоличествоЕдиниц");
						КонецЕсли; 
					Иначе
						Если КоличествоЕдиницСуффикс <> "" Тогда
							Действия.Вставить("ПересчитатьКоличествоУпаковокСуффикс", КоличествоЕдиницСуффикс);
						Иначе
							Действия.Вставить("ПересчитатьКоличествоУпаковок");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				КоличествоТоваров = КоличествоТоваров + Дельта;
				
				КоличествоКРаспределению = КоличествоКРаспределению - Дельта;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, Действия, КешированныеЗначения);
				
				Если ЕстьУпаковки
					И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
					ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(СтрокаТоваров.Номенклатура, СтрокаТоваров.Упаковка); 
					
					Для Каждого СтрТабл Из ТаблицаТары Цикл
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура", СтрТабл.Номенклатура);
						СтруктураПоиска.Вставить("Характеристика", СтрТабл.Характеристика);
						
						СтрокиТары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
						
						Если СтрокиТары.Количество() = 0 Тогда
							// Если форма указания серий была открыта после сканирования штрих-кода товара,
							// то тара была добавлена в документ обработкой сканирования штрих-кода.
							// Это условие может отработать только при ручном открытии формы серий, что эквивалентно
							// ручному редактированию количества товаров. При ручном редактировании количества
							// товаров мы тару не пересчитываем.
							Продолжить;	
						Иначе
							СтрокаТары = СтрокиТары[0];
						КонецЕсли;
						
						// Написано неуниверсально, т.к. во всех документах, в которых есть тара, поля "Количество" называются стандартно.
						СтрокаТары.Количество         = СтрокаТары.Количество + Дельта * СтрТабл.Количество;
						СтрокаТары.КоличествоУпаковок = СтрокаТары.Количество;
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТары, Действия, КешированныеЗначения);

					КонецЦикла;
					
				КонецЕсли;
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров
			И (КоличествоТоваров > 0
				Или ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества));
		 // В режиме ТолькоРедактированиеКоличества допускается нулевое количество как в ТЧ Товары, так и в ТЧ Серии.
		Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				
			Если СтрМас.СтатусУказанияСерий = 0 Тогда
				ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий, НайденныеСтрокиТоваров, СтрокиСерийДляОбработки);
				Прервать;
			КонецЕсли;
		
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																					СтрМас.СтатусУказанияСерий,
																					СерииУказаныПолностью,
																					КоличествоСерий,,
																					СтрМас);
			Иначе
				
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																						СтрМас[ИмяПоляСтатус],
																						СерииУказаныПолностью,
																						КоличествоСерий,,
																						СтрМас);
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
#КонецОбласти	

КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект			 - ДокументОбъект, ДанныеФормыСтруктура - документ, для которого нужно сформировать параметры проверки,
//  МенеджерОбъекта	 - ДокументМенеджер - менеджер документа, для которого нужно сформировать параметры проверки.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности указания серий в каждом документе, состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	ЗначенияРеквизитов = ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов);
	Возврат МенеджерОбъекта.ПараметрыУказанияСерий(ЗначенияРеквизитов);
	
КонецФункции

// Сохраняет режим сканирования серий. Используется для того, чтобы режим сканирования был един для всех форм.
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, в которой должен быть реквизит строкового типа РежимСканированияСерий.
//
Процедура СохранитьНастройкуРежимСканированияСерий(Форма) Экспорт
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("РежимСканированияСерий","",Форма.РежимСканированияСерий);
	
КонецПроцедуры

// Загружает из настроек режим сканирования серий. Если настройка не была ранее сохранена, то используется режим ТоварВсеСерии.
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, в которой должен быть реквизит строкового типа РежимСканированияСерий.
//
Процедура ЗагрузитьНастройкуРежимСканированияСерий(Форма) Экспорт
	
	Форма.РежимСканированияСерий = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("РежимСканированияСерий", "",
		"ТоварВсеСерии");
	
КонецПроцедуры

// Проверяет возможность открытия формы указания серий
//
// Параметры:
//  НастройкиИспользованияСерий	 - Структура, ФиксированнаяСтруктура - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий
//  ПараметрыУказанияСерий		 - Структура, ФиксированнаяСтруктура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//  ЗначенияПолейСвязи			 - Структура, ФиксированнаяСтруктура -
//
Процедура ПроверитьВозможностьОткрытияФормыУказанияСерий(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Экспорт
	
	Если Не НастройкиИспользованияСерий.ИспользоватьСерии Тогда
		ТекстИсключения = НСтр("ru = 'Для вида номенклатуры ""%ВидНоменклатуры%"" серии не используются'");
		
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ВидНоменклатуры%",НастройкиИспользованияСерий.ВидНоменклатуры);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	НоменклатураЛокализация.ПроверитьВозможностьОткрытияФормыУказанияСерий(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи);
	
КонецПроцедуры

// Формирует представление товара, по которому вводятся серии, для отображения в шапки формы указания серий
//
// Параметры:
//  ЗначенияПолейСвязи	 - Структура, ФиксированнаяСтруктура -
// 
// Возвращаемое значение:
//   Строка 
//
Функция ПредставлениеТовараВФормеУказанияСерий(ЗначенияПолейСвязи) Экспорт
	
	ТоварПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ЗначенияПолейСвязи.Номенклатура, ЗначенияПолейСвязи.Характеристика);
	
	НоменклатураЛокализация.ПредставлениеТовараВФормеУказанияСерий(ТоварПредставление, ЗначенияПолейСвязи);
	
	Возврат ТоварПредставление;
КонецФункции

// Разбирает отсканированную строку штрих-кода серии и возвращает в виде значений реквизитов
//
// Параметры:
//  ВведеннаяСтрока				 - Строка 
//  НастройкиИспользованияСерий	 - Структура, ФиксированнаяСтруктура - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий
// 
// Возвращаемое значение:
//  Структура - состав полей зависит от введенной строки и НастройкиИспользованияСерий 
//
Функция РеквизитыСерииИзСтроки(Знач ВведеннаяСтрока, НастройкиИспользованияСерий) Экспорт
	
	РеквизитыСерии = Новый Структура;
	
	Для Каждого Описание из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
		Если Описание.Использование Тогда
			РеквизитыСерии.Вставить(Описание.ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураЛокализация.РеквизитыСерииИзСтроки(РеквизитыСерии, ВведеннаяСтрока, НастройкиИспользованияСерий);
		
	Возврат РеквизитыСерии;
	
КонецФункции

// Добавляет реквизиты статусов указания серий в табличную часть товаров формы клиентского приложения.
// Рекомендуется использовать в обработчике события формы ПриСозданииНаСервере.
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма, в табличную часть которой добавляются реквизиты.
// ПараметрыУказанияСерий - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ДобавитьПоляСтатусовУказанияСерий(Форма, ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() Тогда
		
		ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧТовары;
		ИмяИсточникаЗначенийВФормеОбъекта = ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта;
		
		Если ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма" Тогда
			ИсточникРеквизитовТЧТовары = ИмяТЧТовары;
		Иначе
			ИсточникРеквизитовТЧТовары = ИмяИсточникаЗначенийВФормеОбъекта + "." + ИмяТЧТовары;
		КонецЕсли;
		
		ИменаРеквизитовТЧТовары	= Форма.ПолучитьРеквизиты(ИсточникРеквизитовТЧТовары);
		ТипСтатусаУказанияСерий	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
		ДобавляемыеРеквизиты	= Новый Массив;
		
		Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			ЕстьРеквизит = Ложь;
			
			Для Каждого ИменаРеквизитаТЧТовары Из ИменаРеквизитовТЧТовары Цикл
				Если ИменаРеквизитаТЧТовары.Имя = ИмяПоляСтатус Тогда
					ЕстьРеквизит = Истина;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьРеквизит Тогда
				ДобавляемыйРеквизит = Новый РеквизитФормы(ИмяПоляСтатус, ТипСтатусаУказанияСерий, ИсточникРеквизитовТЧТовары);
				
				ДобавляемыеРеквизиты.Добавить(ДобавляемыйРеквизит);
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавляемыеРеквизиты.Количество() Тогда
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Получает служебные реквизиты по номенклатуре в структуре
//
// Параметры:
// 		СтруктураДанных - Структура, СтрокаТаблицыЗначений - Структура данных, в которой необходимо заполнить поля
// 		СтруктураДействий - Структура - Структура с действиями по получению служебных реквизитов.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(СтруктураДанных, СтруктураДействий) Экспорт
	
	ОбработкаТабличнойЧастиСервер.НормализоватьДействия(СтруктураДействий);
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ОписаниеДополнительнойИнформации(СтруктураДействий);
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Для Каждого Источник Из СтруктураДопДанных.СтруктураИсточников Цикл
		ТаблицаВыгрузки.Колонки.Добавить(Источник.Ключ, ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(ТипЗнч(СтруктураДанных[Источник.Ключ])));
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ТаблицаВыгрузки.Добавить(), СтруктураДанных);
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", ТаблицаВыгрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВСтруктуре()

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
//  КоллекцияДанных		 - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить реквизиты
//  СтруктураДействий	 - Структура							 - Структура с действиями по получению служебных реквизитов
//  СтрокиЗаполнения	 - Массив, ДанныеФормыЭлементКоллекции	 - строки, для которых требуется заполнение.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий, СтрокиЗаполнения = Неопределено) Экспорт
	
	ОбработкаТабличнойЧастиСервер.НормализоватьДействия(СтруктураДействий);
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ОписаниеДополнительнойИнформации(СтруктураДействий);
	Колонки = "НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки;
	
	Если СтрокиЗаполнения = Неопределено Тогда
		
		Если ТипЗнч(КоллекцияДанных) = Тип("ТаблицаЗначений") Тогда
			ПараметрКоллекция = КоллекцияДанных;
		Иначе
			ПараметрКоллекция = КоллекцияДанных.Выгрузить(, Колонки);
		КонецЕсли;
		
	ИначеЕсли СтрокиЗаполнения.Количество() > 0 Тогда
		
		Если ТипЗнч(КоллекцияДанных) = Тип("ТаблицаЗначений") Тогда
			ПараметрКоллекция = КоллекцияДанных.Скопировать(СтрокиЗаполнения, Колонки);
		Иначе
			ПараметрКоллекция = КоллекцияДанных.Выгрузить(СтрокиЗаполнения, Колонки);
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", ПараметрКоллекция);
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		
		ТЗРезультат = Запрос.Выполнить().Выгрузить(); // ТабличнаяЧасть
		Для Каждого Стр Из ТЗРезультат Цикл
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Стр.НомерСтроки - 1], Стр, СтруктураДопДанных.РеквизитыЗаполнения);
		КонецЦикла;
		
	Иначе
		
		Выборка = Запрос.Выполнить().Выбрать();
		Для Номер = 0 По КоллекцияДанных.Количество()-1 Цикл
			Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Номер], Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения реквизитов по полю Номенклатура
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаРеквизитыПоНоменклатуре(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Для Каждого Запрос Из ОписаниеЗапроса.ТекстыЗапросов Цикл
		Если Запрос.Представление = "РеквизитыПоНоменклатуре" Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДействийЗаполнения = ДействияЗаполненияРеквизитовПоНоменклатуре(СтруктураДействий);
	
	Для Каждого ДействиеЗаполнения Из СтруктураДействийЗаполнения Цикл
		Если Не ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
				ДействиеЗаполнения.Ключ,
				СтруктураДействий,
				КэшированныеЗначения) Тогда 
				СтруктураДействийЗаполнения.Удалить(ДействиеЗаполнения.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		ПакетнаяОбработкаТабличнойЧастиСервер.НормализоватьДействия(СтруктураДействийЗаполнения);
	
		СтруктураДопДанных = ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеДополнительнойИнформации(СтруктураДействийЗаполнения);
		Колонки = "НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки;
		
		ТекстЗапроса = ПакетнаяОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(
									СтруктураДействийЗаполнения,
									СтруктураДопДанных,
									Истина);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КоллекцияДанных", "ВтИсточникДанных");
		
		ЗапросыПолученияДанныхПоНоменклатуре = СтрРазделить(ТекстЗапроса, ";");
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЗапросыПолученияДанныхПоНоменклатуре[0], "втТаблицаНоменклатуры");
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЗапросыПолученияДанныхПоНоменклатуре[1], "РеквизитыПоНоменклатуре");

	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения штрихкода номенклатуры
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаШтрихкодыНоменклатуры(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если Не ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьGTINВСтроке", СтруктураДействий, КэшированныеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	Штрихкоды.Штрихкод    КАК GTIN
	|ИЗ
	|	ВтИсточникДанных КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Штрихкоды.Номенклатура  = Товары.Номенклатура
	|		И Штрихкоды.Характеристика = Товары.Характеристика
	|";
	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "втТаблицаШтрихкодов");
	
КонецПроцедуры

// Заполняет служебные реквизиты по номенклатуре при пакетной обработке строк табличной части.
//
// Параметры:
//  СтруктураДанных - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуреПакетно(СтруктураДанных, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ОбработкаТабличнойЧастиСервер.НормализоватьДействия(СтруктураДействий);
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ОписаниеДополнительнойИнформации(СтруктураДействий);
	ДанныеЗаполнения = ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки("РеквизитыПоНоменклатуре", КэшированныеЗначения);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеЗаполнения[0], СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВСтруктуре()

// Возвращает только те действия со строкой табличной части, которые относятся к заполнению реквизитов 
// 
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
// 
// Возвращаемое значение:
//  Структура - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//
Функция ДействияЗаполненияРеквизитовПоНоменклатуре(СтруктураДействий) Экспорт
	
	Перем СтруктураПараметровДействия;
	СтруктураДействийЗаполнения = Новый Структура;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьВесУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакКод", СтруктураПараметровДействия);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакОписание", СтруктураПараметровДействия);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияТНВЭД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияТНВЭД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия);
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем") Тогда
		СтруктураДействийЗаполнения.Вставить("ПересчитатьВесОбъем", СтруктураДействий.ПересчитатьВесОбъем);
	КонецЕсли;
	
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(СтруктураДействий, 
		СтруктураДействийЗаполнения);
	
	Возврат СтруктураДействийЗаполнения;
	
КонецФункции

// Процедура заполнения колонок "ХарактеристикиИспользуются" в формах.
//
// Параметры:
//  ТаблицаФормы		 - ДанныеФормыКоллекция		 - табличная часть объекта, в котором нужно заполнить
//  		колонку "ХарактеристикиИспользуются";
//  ПараметрыЗаполнения	 - Структура, Неопределено	 - дополнительные параметры.
//
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы,ПараметрыЗаполнения = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита2,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1", "ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита + " КАК Номенклатура" + СуффиксДопРеквизита);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита2", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита + " КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),	
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))	
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита2,", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
	
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливаем условное оформление для назначений номенклатуры
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму 
//		ИмяПоляВводаНазначения - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика".
//		ПутьКПолюОтбораТипНоменклатуры - Строка - Полный путь к реквизиту "Тип номенклатуры",
//									если он отличается от "Объект.Товары.ТипНоменклатуры".
//		ТолькоТовары - Булево - Истина - признак того, что условное оформление применяется только в отношении товаров.
// 
Процедура УстановитьУсловноеОформлениеНазначенияНоменклатуры(Форма,
	                                                            ИмяПоляВводаНазначения = "ТоварыНазначение",
																ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры",
																ТолькоТовары = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНазначения]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	
	Если ТолькоТовары Тогда
		Текст = НСтр("ru = '<для товаров>'");
	Иначе
		Текст = НСтр("ru = '<для товаров и работ>'");
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика".
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются".
// 
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаХарактеристики]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для серий номенклатуры
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//		ОсобыйВариантУказанияСерий - Булево, Строка - Ложь, если серии указываются в отдельной ТЧ,
//			"СерииВсегдаВТЧТовары" - если у объекта нет специальной ТЧ для указания серий,
//			"СерииПриПланированииОтгрузкиУказываютсяВТЧТовары" - если серии могут указываться в разных ТЧ,
//				при этом серии с политикой учета "При планировании отгрузки" указываются в ТЧ Товары.
//		ИмяПоляВводаСерии - Строка - Наименование элемента формы, содержащего серии номенклатуры,
//									   если оно отличается от "ТоварыСерия".
//		ПутьКПолюОтбораСтатусУказанияСерий - Строка - Полный путь к реквизиту "Статус указания серий",
//														если он отличается от "Объект.Товары.СтатусУказанияСерий".
//		ПутьКПолюОтбораТипНоменклатуры - Строка - Полный путь к реквизиту "Тип номенклатуры",
//														если он отличается от "Объект.Товары.ТипНоменклатуры".
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ОсобыйВариантУказанияСерий,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
														
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	СерииВсегдаВТЧТовары = (ОсобыйВариантУказанияСерий = "СерииВсегдаВТЧТовары");
	СерииПриПланированииОтгрузкиУказываютсяВТЧТовары = (ОсобыйВариантУказанияСерий = "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	СписокТиповДляСерий = Новый СписокЗначений;
	СписокТиповДляСерий.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокТиповДляСерий.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	// Для товаров
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормыСерии = ЭлементыФормы[ИмяПоляВводаСерии]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормыСерии.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Серия не указывается
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормыСерии.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серия не указывается>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если Не СерииВсегдаВТЧТовары Тогда
		// Серия указывается отдельно
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормыСерии.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.ЗагрузитьЗначения(НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
		СписокСтатусовСерий.Удалить(СписокСтатусовСерий.НайтиПоЗначению(15));
		Если СерииПриПланированииОтгрузкиУказываютсяВТЧТовары Тогда
			СписокСтатусовСерий.Удалить(СписокСтатусовСерий.НайтиПоЗначению(11));
		КонецЕсли;
		
		ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокСтатусовСерий;
		
		ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		
		Если СерииПриПланированииОтгрузкиУказываютсяВТЧТовары Тогда
			ОтборЭлемента.ПравоеЗначение = 8;
		Иначе
			ОтборЭлемента.ПравоеЗначение = 11;
		КонецЕсли;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серия указывается отдельно>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормыСерии.Имя);
		
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.Добавить(15);
		Если СерииПриПланированииОтгрузкиУказываютсяВТЧТовары Тогда
			СписокСтатусовСерий.Добавить(11);
		КонецЕсли; 
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокСтатусовСерий;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		
	Иначе
		// Серия указывается в ТЧ Товары
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормыСерии.Имя);
		
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.ЗагрузитьЗначения(НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
	
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокСтатусовСерий;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление для единиц измерения номенклатуры
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//		ДополнительныеПараметры - Структура - см. НовыеПараметрыУсловногоОформленияЕдиницИзмерения()
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ДополнительныеПараметры = Неопределено) Экспорт

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	КонецЕсли;

	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляЕдиницаИзмерения]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПутьКПолюИспользоватьАдресноеХранение) Тогда
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Контейнер = ГруппаОтбора.Элементы;
	Иначе
		Контейнер = ЭлементУсловногоОформления.Отбор.Элементы;
	КонецЕсли;

	ЭлементОтбора = Контейнер.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюУпаковка);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПутьКПолюИспользоватьАдресноеХранение) Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ПутьКПолюТипИзмеряемойВеличины) Тогда
			ГруппаОтбора = Контейнер.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			Контейнер = ГруппаОтбора.Элементы;
		КонецЕсли;

		ЭлементОтбора = Контейнер.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюИспользоватьАдресноеХранение);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;

		Если ЗначениеЗаполнено(ДополнительныеПараметры.ПутьКПолюТипИзмеряемойВеличины) Тогда
			МерныеЕдиницы = Новый СписокЗначений;
			МерныеЕдиницы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Вес"));
			МерныеЕдиницы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Объем"));
			МерныеЕдиницы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Площадь"));
			МерныеЕдиницы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Длина"));

			ЭлементОтбора = Контейнер.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипИзмеряемойВеличины");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ПравоеЗначение = МерныеЕдиницы;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Дополнительные параметры функции НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения.
// 
// Возвращаемое значение:
//   Структура - свойства:
// 		* ИмяПоляЕдиницаИзмерения - Строка - Имя элемента формы "ЕдиницаИзмерения",
//									   		значение по умолчанию "ТоварыНоменклатураЕдиницаИзмерения".
// 		* ПутьКПолюУпаковка - Строка - Наименование элемента формы "Содержание",
//									   		значение по умолчанию "Объект.Товары.Упаковка".
// 		* ПутьКПолюИспользоватьАдресноеХранение - Строка - Наименование элемента формы "Упаковка",
//									   		значение по умолчанию "ТоварыУпаковка".
// 		* ПутьКПолюТипИзмеряемойВеличины - Строка - Полный путь к реквизиту "ВариантОформленияПродажи",
//														значение по умолчанию "Объект.Товары.ВариантОформленияПродажи".
//
Функция НовыеПараметрыУсловногоОформленияЕдиницИзмерения(ИспользуетсяАдресноеХранение = Ложь, ИспользуетсяТипИзмеряемойВеличины = Ложь) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПоляЕдиницаИзмерения", "ТоварыНоменклатураЕдиницаИзмерения");
	ДополнительныеПараметры.Вставить("ПутьКПолюУпаковка", "Объект.Товары.Упаковка");
	Если ИспользуетсяТипИзмеряемойВеличины Тогда
		ДополнительныеПараметры.Вставить("ПутьКПолюТипИзмеряемойВеличины", "Объект.Товары.ТипИзмеряемойВеличины");
	Иначе
		ДополнительныеПараметры.Вставить("ПутьКПолюТипИзмеряемойВеличины", "");
	КонецЕсли;
	Если ИспользуетсяАдресноеХранение Тогда
		ДополнительныеПараметры.Вставить("ПутьКПолюИспользоватьАдресноеХранение", "ИспользоватьАдресноеХранение");
	Иначе
		ДополнительныеПараметры.Вставить("ПутьКПолюИспользоватьАдресноеХранение", "");
	КонецЕсли;

	Возврат ДополнительныеПараметры;

КонецФункции

// Дополнительные параметры функции НоменклатураСервер.УстановитьУсловноеОформлениеСодержания.
// 
// Возвращаемое значение:
//   Структура - свойства:
// 		* ИмяПоляВводаСодержания - Строка - Наименование элемента формы "Содержание",
//									   		значение по умолчанию "ТоварыСодержание".
// 		* ИмяПоляВводаУпаковки - Строка - Наименование элемента формы "Упаковка",
//									   		значение по умолчанию "ТоварыУпаковка".
// 		* ПутьКПолюОтбораВариантаОформления - Строка - Полный путь к реквизиту "ВариантОформленияПродажи",
//														значение по умолчанию "Объект.Товары.ВариантОформленияПродажи".
// 		* ПутьКПолюОтбораСодержания - Строка - Полный путь к реквизиту "Содержание",
//												значение по умолчанию "Объект.Товары.Содержание".
//
Функция ДополнительныеПараметрыУстановитьУсловноеОформлениеСодержания() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПоляВводаСодержания", "ТоварыСодержание");
	ДополнительныеПараметры.Вставить("ИмяПоляВводаУпаковки", "ТоварыУпаковка");
	ДополнительныеПараметры.Вставить("ПутьКПолюОтбораВариантаОформления", "Объект.Товары.ВариантОформленияПродажи");
	ДополнительныеПараметры.Вставить("ПутьКПолюОтбораСодержания", "Объект.Товары.Содержание");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Устанавливаем условное оформление содержания в зависимости от варианта оформления продажи.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для элементов которой осуществляется настройка условного оформления;
//	ДополнительныеПараметры - Структура - описание см. НоменклатураСервер.ДополнительныеПараметрыУстановитьУсловноеОформлениеСодержания.
//
Процедура УстановитьУсловноеОформлениеСодержания(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыУстановитьУсловноеОформлениеСодержания();
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляВводаСодержания]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораВариантаОформления);
	
	СписокТиповВариантыОформленияПродажи = Новый СписокЗначений;
	СписокТиповВариантыОформленияПродажи.Добавить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	СписокТиповВариантыОформленияПродажи.Добавить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповВариантыОформленияПродажи;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ, оформляемых актом>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", ПолучитьФункциональнуюОпцию("НеБазоваяВерсия"));
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляВводаСодержания]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораВариантаОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораСодержания);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);	
	
	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляВводаУпаковки]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораВариантаОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

// Возвращает параметры, используемые при установке условного оформления поля номера ГТД.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при установке условного оформления поля номера ГТД, со следующими свойствами:
//		* ИмяПоляВводаНомераГТД - Строка - имя поля номера ГТД.
//		* ПутьКПолюВедетсяУчетПоГТД - Строка - путь к значению поля, хранящему сведения о ведении учета по ГТД.
//		* ПутьКПолюТипНоменклатуры - Строка - путь к значению поля, хранящему сведения о типе номенклатуры.
//		* ПутьКПолюПризнакаКорректировкиПУиПА - Строка - путь к значению поля, хранящему сведения об использовании документа корректировки приобретения услуг и прочих активов.
//
Функция ПараметрыУстановкиУсловногоОформленияНомераГТД() Экспорт
	
	ПараметрыУсловногоОформления = Новый Структура;
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаНомераГТД",					"ТоварыНомерГТД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоГТД",				"Объект.Товары.ВедетсяУчетПоГТД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюТипНоменклатуры",				"Объект.Товары.ТипНоменклатуры");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюПризнакаКорректировкиПУиПА",	"");
	
	Возврат ПараметрыУсловногоОформления;
	
КонецФункции

// Устанавливаем условное оформление номеров ГТД
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - содержит данные формы
//	ПараметрыУсловногоОформления - см. ПараметрыУстановкиУсловногоОформленияНомераГТД.
//
Процедура УстановитьУсловноеОформлениеНомераГТД(Форма, ПараметрыУсловногоОформления = Неопределено) Экспорт
	
	Если ПараметрыУсловногоОформления = Неопределено Тогда
		ПараметрыУсловногоОформления = ПараметрыУстановкиУсловногоОформленияНомераГТД();
	КонецЕсли;
	
	ИмяПоляВводаНомераГТД			= ПараметрыУсловногоОформления.ИмяПоляВводаНомераГТД;
	ПутьКПолюВедетсяУчетПоГТД		= ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоГТД;
	ПутьКПолюПризнакаОтбораПоРНПТ	= ПараметрыУсловногоОформления.ПутьКПолюПризнакаКорректировкиПУиПА;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНомераГТД]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если ПутьКПолюПризнакаОтбораПоРНПТ <> "" Тогда
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюПризнакаОтбораПоРНПТ);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НоменклатураЛокализация.ТекстПоляПоГТД());
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Если ПутьКПолюПризнакаОтбораПоРНПТ <> "" Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНомераГТД]; // ПолеФормы
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоГТД);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюПризнакаОтбораПоРНПТ);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<РНПТ не используются>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНомераГТД]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление для статусов указания серий
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//		СерииВсегдаВТЧТовары - Булево - Истина, если у объекта нет специальной ТЧ для указания серий
//		ИмяПоляВводаСтатусаУказанияСерий - Строка - Наименование элемента формы, содержащего статус указания
//									   				серии номенклатуры,если оно отличается от "ТоварыСтатусУказанияСерий"
//		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "СтатусУказанияСерий",
//									если он отличается от "Объект.Товары.СтатусУказанияСерий".
//
Процедура УстановитьУсловноеОформлениеСтатусовУказанияСерий(Форма,
															СерииВсегдаВТЧТовары,	
													  		ИмяПоляВводаСтатусаУказанияСерий = "ТоварыСтатусУказанияСерий",
													 		ПутьКПолюОтбора = "Объект.Товары.СтатусУказанияСерий") Экспорт
	
	Если СерииВсегдаВТЧТовары Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Возврат;
		КонецЕсли;												
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад") Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляВводаСтатусаУказанияСерий]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
КонецПроцедуры

#КонецОбласти

#Область РазбиениеНаТоварныеМестаСборВНабор

Процедура РазбитьТоварыПоТоварнымМестам(ТабличнаяЧастьТовары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоТоварныхМест
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (ВЫБОР
	|				КОГДА Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = Номенклатура.Ссылка
	|				КОГДА Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА УпаковкиЕдиницыИзмерения.Владелец = Номенклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)";
	
	ТаблицаТоваров = ТабличнаяЧастьТовары.Выгрузить();
	Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	НоменклатураИУпаковки = Запрос.Выполнить().Выгрузить();
	УпаковкиТоварныеМеста = НоменклатураИУпаковки.ВыгрузитьКолонку("ТоварноеМесто");
	
	Если НоменклатураИУпаковки.Количество() > 0 Тогда
		
		ТабличнаяЧастьТовары.Очистить();
		
		Для Каждого Строка Из ТаблицаТоваров Цикл
			Если УпаковкиТоварныеМеста.Найти(Строка.Упаковка) <> Неопределено Тогда
				ДобавитьИЗаполнитьСтроку(ТабличнаяЧастьТовары, Строка);
			Иначе
				УпаковкиНоменклатуры = НоменклатураИУпаковки.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
				Если УпаковкиНоменклатуры.Количество() = 0 Тогда
					ДобавитьИЗаполнитьСтроку(ТабличнаяЧастьТовары, Строка);
				Иначе
					Для Каждого СтрокаУпаковка Из УпаковкиНоменклатуры Цикл
						НоваяСтрока = ДобавитьИЗаполнитьСтроку(ТабличнаяЧастьТовары, Строка);
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * СтрокаУпаковка.КоличествоТоварныхМест;  
						НоваяСтрока.Упаковка = СтрокаУпаковка.ТоварноеМесто;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьКомплектностьТоварныхМест(ТабличнаяЧастьТоваров, Отказ, ПараметрыПроверки = Неопределено) Экспорт  
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	ТаблицаТоваров = ТабличнаяЧастьТоваров.Выгрузить();
	
	ЕстьОшибки = Ложь;	
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Таблица.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	&ПоляГруппировки,
	|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&УсловиеОтбораСтрокПроверкиКомплектности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	&ПоляГруппировки,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Номенклатура.Наименование КАК НоменклатураПредставление,
	|	Таблица.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Серия) КАК СерияПредставление,
	|	СУММА(Таблица.Количество) КАК Количество,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаТоваров КАК Таблица
	|ГДЕ
	|	ЕСТЬNULL(Таблица.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	&ПоляГруппировки,
	|	Таблица.Упаковка,
	|	Таблица.Характеристика.Наименование,
	|	Таблица.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	&ПоляГруппировки,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоТоварныхМест
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (УпаковкиЕдиницыИзмерения.Владелец = Номенклатура.Ссылка)
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаТоваров.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ТаблицаТоваров КАК ТаблицаТоваров)
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (УпаковкиЕдиницыИзмерения.Владелец = Номенклатура.НаборУпаковок)
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаТоваров.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ТаблицаТоваров КАК ТаблицаТоваров)
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Если ПараметрыПроверки.УсловиеОтбораСтрокПроверкиКомплектности <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокПроверкиКомплектности", 
									СтрЗаменить(ПараметрыПроверки.УсловиеОтбораСтрокПроверкиКомплектности, ПараметрыПроверки.ИмяТЧ + ".", "Таблица."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокПроверкиКомплектности", "ИСТИНА");
	КонецЕсли;
	
	ТекстПоляГруппировки = ПараметрыПроверки.ПоляГруппировкиПроверкиКомплектности;
	
	Если ТабличнаяЧастьТоваров.Количество() <> 0 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧастьТоваров[0], "Назначение") Тогда
			ПолеНазначение = ?(ЗначениеЗаполнено(ТекстПоляГруппировки), "Назначение,", "Назначение");
			ТекстПоляГруппировки = ПолеНазначение + ТекстПоляГруппировки;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПоляГруппировки = СтрЗаменить(ТекстПоляГруппировки, " ", "");
	ТекстПоляГруппировки = СтрЗаменить(ТекстПоляГруппировки, ",", ",Таблица.");
	Если ЗначениеЗаполнено(ТекстПоляГруппировки) Тогда
		ТекстПоляГруппировки = "Таблица." + ТекстПоляГруппировки;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировки", ТекстПоляГруппировки);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировки,", "");
	КонецЕсли;
	
	МаксимальныйНомерПоля = СтрРазделить(ТекстПоляГруппировки, ",").Количество();
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", ТаблицаТоваров);
	РезультатЗапроса 		= Запрос.ВыполнитьПакет();
	ВыборкаПоНоменклатуре 	= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаТоварныхМест 	= РезультатЗапроса[2].Выгрузить();
		
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ТоварныеМестаПоНоменклатуре = ТаблицаТоварныхМест.Скопировать(Новый Структура("Номенклатура", ВыборкаПоНоменклатуре.Номенклатура));
		Если ТоварныеМестаПоНоменклатуре.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВыборкаПоХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		Пока ВыборкаПоХарактеристике.Следующий() Цикл
			
			ПройтиРекурсивноПоПолямГруппировки(ВыборкаПоХарактеристике, ТоварныеМестаПоНоменклатуре, 1, МаксимальныйНомерПоля, ЕстьОшибки);
				
		КонецЦикла;
	КонецЦикла;
	
	Отказ = ?(ЕстьОшибки, Истина, Отказ);
				
КонецПроцедуры

// Параметры:
// 	Выборка - ВыборкаИзРезультатаЗапроса
//
Процедура ПройтиРекурсивноПоПолямГруппировки(Выборка, ТоварныеМестаПоНоменклатуре, НомерТекущегоПоля, МаксимальныйНомерПоля, ЕстьОшибки)
	
	Если НомерТекущегоПоля > МаксимальныйНомерПоля Тогда
		ПродолжитьОбходПоСериям(Выборка, ТоварныеМестаПоНоменклатуре, ЕстьОшибки);
	Иначе
		ВыборкаСледующегоУровня = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
		Пока ВыборкаСледующегоУровня.Следующий() Цикл
			ПройтиРекурсивноПоПолямГруппировки(ВыборкаСледующегоУровня, ТоварныеМестаПоНоменклатуре, НомерТекущегоПоля + 1, МаксимальныйНомерПоля, ЕстьОшибки); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОбходПоСериям(Выборка, ТоварныеМестаПоНоменклатуре, ЕстьОшибки)
	
	ЕстьПолеНазначение = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, "Назначение");
	
	ВыборкаПоСерии = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСерии.Следующий() Цикл 
		ВыборкаПоУпаковкам = ВыборкаПоСерии.Выбрать();
		
		КоличествоЦелыхНаборов = 999999999;
		МаксимальноеКоличествоНаборов = 0;
		
		Если ВыборкаПоУпаковкам.Количество() <> ТоварныеМестаПоНоменклатуре.Количество() Тогда
			КоличествоЦелыхНаборов = 0;
		КонецЕсли;
		
		КолонкаКоличествоВДокументе = ТоварныеМестаПоНоменклатуре.Колонки.Найти("КоличествоВДокументе");
		
		Если КолонкаКоличествоВДокументе = Неопределено Тогда
			ТоварныеМестаПоНоменклатуре.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
		Иначе
			ТоварныеМестаПоНоменклатуре.ЗаполнитьЗначения(0, "КоличествоВДокументе");
		КонецЕсли;
		
		Пока ВыборкаПоУпаковкам.Следующий() Цикл
			
			НайденныеСтроки = ТоварныеМестаПоНоменклатуре.НайтиСтроки(Новый Структура("Упаковка", ВыборкаПоУпаковкам.Упаковка));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаТоварноеМесто = НайденныеСтроки[0];
			Иначе 
				Продолжить;
			КонецЕсли;
			
			КоличествоТоварныхМест = СтрокаТоварноеМесто.КоличествоТоварныхМест;
			КоличествоЦелыхНаборов = Мин(КоличествоЦелыхНаборов, Цел(ВыборкаПоУпаковкам.КоличествоУпаковок / КоличествоТоварныхМест));
			МаксимальноеКоличествоНаборовТекущее = ОкруглитьГрубо(ВыборкаПоУпаковкам.КоличествоУпаковок / КоличествоТоварныхМест);
			МаксимальноеКоличествоНаборов = Макс(МаксимальноеКоличествоНаборов, МаксимальноеКоличествоНаборовТекущее);
			
			СтрокаТоварноеМесто.КоличествоВДокументе = ВыборкаПоУпаковкам.КоличествоУпаковок;

		КонецЦикла;
		
		ОписанияНедостач = Новый Массив;
		ОписанияИзлишков = Новый Массив;
		
		Для Каждого ТоварноеМестоСтрока Из ТоварныеМестаПоНоменклатуре Цикл
			КоличествоИзлишек = ТоварноеМестоСтрока.КоличествоВДокументе - КоличествоЦелыхНаборов * ТоварноеМестоСтрока.КоличествоТоварныхМест;
			КоличествоНедостача = МаксимальноеКоличествоНаборов * ТоварноеМестоСтрока.КоличествоТоварныхМест - ТоварноеМестоСтрока.КоличествоВДокументе;
			Если КоличествоИзлишек > 0 Тогда
				ОписанияИзлишков.Добавить(Строка(КоличествоИзлишек) + Символы.НПП + ТоварноеМестоСтрока.Упаковка);					
			КонецЕсли;
			Если КоличествоНедостача > 0 Тогда
				ОписанияНедостач.Добавить(Строка(КоличествоНедостача) + Символы.НПП + ТоварноеМестоСтрока.Упаковка);
			КонецЕсли;
		КонецЦикла;
		
		Если ОписанияИзлишков.Количество() <> 0 Или ОписанияНедостач.Количество() <> 0 Тогда
			ЕстьОшибки = Истина;
			СообщениеПользователю = НСтр("ru = 'Из следующих товарных мест нельзя собрать целое количество %ЕдИзм% товара ""%Товар%"": %ОписаниеИзлишков%. Необходимо или удалить эти товарные места, или дополнить товарными местами: %ОписаниеНедостач%.'");
			ОписаниеИзлишков = СтрСоединить(ОписанияИзлишков, ", ");
			ОписаниеНедостач = СтрСоединить(ОписанияНедостач, ", ");
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ОписаниеИзлишков%", 	ОписаниеИзлишков);
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ОписаниеНедостач%", 	ОписаниеНедостач);
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ЕдИзм%", 				ТоварныеМестаПоНоменклатуре[0].ЕдиницаИзмерения);
			Назначение = ?(ЕстьПолеНазначение, ВыборкаПоСерии.Назначение, "");
			ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
											ВыборкаПоСерии.НоменклатураПредставление,
											ВыборкаПоСерии.ХарактеристикаПредставление,
											, // Упаковка
											ВыборкаПоСерии.СерияПредставление,
											Назначение);
			СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%Товар%", ПредставлениеТовара);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет комплектность товарных мест в ордерах на отгрузку 
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ОрдерНаПеремещениеТоваров - обрабатываемый документ.
//
Процедура ЗаполнитьДействиеПоКомплектностиТоварныхМест(Объект) Экспорт 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОтгружаемыеТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ОтгружаемыеТовары.Характеристика,
	|	ОтгружаемыеТовары.Назначение,
	|	ОтгружаемыеТовары.Серия,
	|	ВЫРАЗИТЬ(ОтгружаемыеТовары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ОтгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ОтгружаемыеТовары.Действие
	|ПОМЕСТИТЬ ОтгружаемыеТовары
	|ИЗ
	|	&ОтгружаемыеТовары КАК ОтгружаемыеТовары
	|ГДЕ
	|	&УсловиеПоУпаковочнымЛистам
	|	И ОтгружаемыеТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгружаемыеТовары.Номенклатура,
	|	ОтгружаемыеТовары.Характеристика,
	|	ОтгружаемыеТовары.Назначение,
	|	ОтгружаемыеТовары.Серия,
	|	ОтгружаемыеТовары.Упаковка,
	|	ОтгружаемыеТовары.Действие,
	|	СУММА(ОтгружаемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ОтгружаемыеТоварныеМеста
	|ИЗ
	|	ОтгружаемыеТовары КАК ОтгружаемыеТовары
	|ГДЕ
	|	ЕСТЬNULL(ОтгружаемыеТовары.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгружаемыеТовары.Номенклатура,
	|	ОтгружаемыеТовары.Характеристика,
	|	ОтгружаемыеТовары.Назначение,
	|	ОтгружаемыеТовары.Серия,
	|	ОтгружаемыеТовары.Упаковка,
	|	ОтгружаемыеТовары.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Действие,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварныеМестаНоменклатуры
	|ИЗ
	|	ОтгружаемыеТоварныеМеста КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Товары.Номенклатура.НаборУпаковок = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Действие,
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|ИЗ
	|	ОтгружаемыеТоварныеМеста КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Товары.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныеМестаНоменклатуры.Номенклатура,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ТоварныеМестаНоменклатуры.Действие,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОтгружаемыеТоварныеМеста.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок - (ВЫРАЗИТЬ(ЕСТЬNULL(ОтгружаемыеТоварныеМеста.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОтгружаемыеТоварныеМеста.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ОтгружаемыеТоварныеМеста.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) КАК КоличествоНаборов
	|ПОМЕСТИТЬ ТаблицаКоличествоНаборовОтгрузить
	|ИЗ
	|	ТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтгружаемыеТоварныеМеста КАК ОтгружаемыеТоварныеМеста
	|		ПО ТоварныеМестаНоменклатуры.Номенклатура = ОтгружаемыеТоварныеМеста.Номенклатура
	|			И ТоварныеМестаНоменклатуры.Характеристика = ОтгружаемыеТоварныеМеста.Характеристика
	|			И ТоварныеМестаНоменклатуры.Назначение = ОтгружаемыеТоварныеМеста.Назначение
	|			И ТоварныеМестаНоменклатуры.Серия = ОтгружаемыеТоварныеМеста.Серия
	|			И ТоварныеМестаНоменклатуры.Действие = ОтгружаемыеТоварныеМеста.Действие
	|			И ТоварныеМестаНоменклатуры.ТоварноеМесто = ОтгружаемыеТоварныеМеста.Упаковка
	|ГДЕ
	|	ТоварныеМестаНоменклатуры.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеМестаНоменклатуры.Номенклатура,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ТоварныеМестаНоменклатуры.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннийЗапрос.Номенклатура,
	|	ВнутреннийЗапрос.Характеристика,
	|	ВнутреннийЗапрос.Назначение,
	|	ВнутреннийЗапрос.Серия,
	|	ВнутреннийЗапрос.Действие,
	|	ВнутреннийЗапрос.Упаковка,
	|	СУММА(ВнутреннийЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаКоличествоУпаковокОтобрать
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтгружаемыеТоварныеМеста.Номенклатура КАК Номенклатура,
	|		ОтгружаемыеТоварныеМеста.Характеристика КАК Характеристика,
	|		ОтгружаемыеТоварныеМеста.Назначение КАК Назначение,
	|		ОтгружаемыеТоварныеМеста.Серия КАК Серия,
	|		ОтгружаемыеТоварныеМеста.Действие КАК Действие,
	|		ОтгружаемыеТоварныеМеста.Упаковка КАК Упаковка,
	|		ОтгружаемыеТоварныеМеста.КоличествоУпаковок - ЕСТЬNULL(ТаблицаКоличествоНаборовОтгрузить.КоличествоНаборов, 0) * ОтгружаемыеТоварныеМеста.Упаковка.КоличествоУпаковок КАК КоличествоУпаковок
	|	ИЗ
	|		ОтгружаемыеТоварныеМеста КАК ОтгружаемыеТоварныеМеста
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоНаборовОтгрузить КАК ТаблицаКоличествоНаборовОтгрузить
	|			ПО ОтгружаемыеТоварныеМеста.Номенклатура = ТаблицаКоличествоНаборовОтгрузить.Номенклатура
	|				И ОтгружаемыеТоварныеМеста.Характеристика = ТаблицаКоличествоНаборовОтгрузить.Характеристика
	|				И ОтгружаемыеТоварныеМеста.Назначение = ТаблицаКоличествоНаборовОтгрузить.Назначение
	|				И ОтгружаемыеТоварныеМеста.Серия = ТаблицаКоличествоНаборовОтгрузить.Серия
	|				И ОтгружаемыеТоварныеМеста.Действие = ТаблицаКоличествоНаборовОтгрузить.Действие
	|	ГДЕ
	|		ОтгружаемыеТоварныеМеста.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтгружаемыеТоварныеМеста.Номенклатура,
	|		ОтгружаемыеТоварныеМеста.Характеристика,
	|		ОтгружаемыеТоварныеМеста.Назначение,
	|		ОтгружаемыеТоварныеМеста.Серия,
	|		ОтгружаемыеТоварныеМеста.Действие,
	|		ОтгружаемыеТоварныеМеста.Упаковка,
	|		ОтгружаемыеТоварныеМеста.КоличествоУпаковок
	|	ИЗ
	|		ОтгружаемыеТоварныеМеста КАК ОтгружаемыеТоварныеМеста
	|	ГДЕ
	|		ОтгружаемыеТоварныеМеста.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)) КАК ВнутреннийЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннийЗапрос.Номенклатура,
	|	ВнутреннийЗапрос.Характеристика,
	|	ВнутреннийЗапрос.Назначение,
	|	ВнутреннийЗапрос.Серия,
	|	ВнутреннийЗапрос.Действие,
	|	ВнутреннийЗапрос.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныеМестаНоменклатуры.Номенклатура,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ТоварныеМестаНоменклатуры.Действие,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ТаблицаКоличествоУпаковокОтобрать.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок - (ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаКоличествоУпаковокОтобрать.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(12, 0))) >= 0
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаКоличествоУпаковокОтобрать.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаКоличествоУпаковокОтобрать.КоличествоУпаковок, 0) / ТоварныеМестаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(12, 0))) - 1
	|		КОНЕЦ) КАК КоличествоНаборов
	|ПОМЕСТИТЬ ТаблицаКоличествоНаборовОтобрать
	|ИЗ
	|	ТоварныеМестаНоменклатуры КАК ТоварныеМестаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоУпаковокОтобрать КАК ТаблицаКоличествоУпаковокОтобрать
	|		ПО ТоварныеМестаНоменклатуры.Номенклатура = ТаблицаКоличествоУпаковокОтобрать.Номенклатура
	|			И ТоварныеМестаНоменклатуры.Характеристика = ТаблицаКоличествоУпаковокОтобрать.Характеристика
	|			И ТоварныеМестаНоменклатуры.Назначение = ТаблицаКоличествоУпаковокОтобрать.Назначение
	|			И ТоварныеМестаНоменклатуры.Серия = ТаблицаКоличествоУпаковокОтобрать.Серия
	|			И ТоварныеМестаНоменклатуры.Действие = ТаблицаКоличествоУпаковокОтобрать.Действие
	|			И ТоварныеМестаНоменклатуры.ТоварноеМесто = ТаблицаКоличествоУпаковокОтобрать.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеМестаНоменклатуры.Номенклатура,
	|	ТоварныеМестаНоменклатуры.Характеристика,
	|	ТоварныеМестаНоменклатуры.Назначение,
	|	ТоварныеМестаНоменклатуры.Серия,
	|	ТоварныеМестаНоменклатуры.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренняяТаблица.Номенклатура,
	|	ВнутренняяТаблица.Характеристика,
	|	ВнутренняяТаблица.Назначение,
	|	ВнутренняяТаблица.Серия,
	|	ВнутренняяТаблица.Упаковка,
	|	ВнутренняяТаблица.КоличествоУпаковокВНаборе,
	|	ВнутренняяТаблица.Действие,
	|	СУММА(ВнутренняяТаблица.КоличествоУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтгружаемыеТоварныеМеста.Номенклатура КАК Номенклатура,
	|		ОтгружаемыеТоварныеМеста.Характеристика КАК Характеристика,
	|		ОтгружаемыеТоварныеМеста.Назначение КАК Назначение,
	|		ОтгружаемыеТоварныеМеста.Серия КАК Серия,
	|		ОтгружаемыеТоварныеМеста.Упаковка КАК Упаковка,
	|		ОтгружаемыеТоварныеМеста.Упаковка.КоличествоУпаковок КАК КоличествоУпаковокВНаборе,
	|		ОтгружаемыеТоварныеМеста.Действие КАК Действие,
	|		ЕСТЬNULL(ТаблицаКоличествоНаборовОтгрузить.КоличествоНаборов, 0) * ОтгружаемыеТоварныеМеста.Упаковка.КоличествоУпаковок КАК КоличествоУпаковок
	|	ИЗ
	|		ОтгружаемыеТоварныеМеста КАК ОтгружаемыеТоварныеМеста
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоНаборовОтгрузить КАК ТаблицаКоличествоНаборовОтгрузить
	|			ПО ОтгружаемыеТоварныеМеста.Номенклатура = ТаблицаКоличествоНаборовОтгрузить.Номенклатура
	|				И ОтгружаемыеТоварныеМеста.Характеристика = ТаблицаКоличествоНаборовОтгрузить.Характеристика
	|				И ОтгружаемыеТоварныеМеста.Назначение = ТаблицаКоличествоНаборовОтгрузить.Назначение
	|				И ОтгружаемыеТоварныеМеста.Серия = ТаблицаКоличествоНаборовОтгрузить.Серия
	|				И ОтгружаемыеТоварныеМеста.Действие = ТаблицаКоличествоНаборовОтгрузить.Действие
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтгружаемыеТоварныеМеста.Номенклатура,
	|		ОтгружаемыеТоварныеМеста.Характеристика,
	|		ОтгружаемыеТоварныеМеста.Назначение,
	|		ОтгружаемыеТоварныеМеста.Серия,
	|		ОтгружаемыеТоварныеМеста.Упаковка,
	|		ОтгружаемыеТоварныеМеста.Упаковка.КоличествоУпаковок,
	|		ОтгружаемыеТоварныеМеста.Действие,
	|		ЕСТЬNULL(ТаблицаКоличествоНаборовОтобрать.КоличествоНаборов, 0) * ОтгружаемыеТоварныеМеста.Упаковка.КоличествоУпаковок
	|	ИЗ
	|		ОтгружаемыеТоварныеМеста КАК ОтгружаемыеТоварныеМеста
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоНаборовОтобрать КАК ТаблицаКоличествоНаборовОтобрать
	|			ПО ОтгружаемыеТоварныеМеста.Номенклатура = ТаблицаКоличествоНаборовОтобрать.Номенклатура
	|				И ОтгружаемыеТоварныеМеста.Характеристика = ТаблицаКоличествоНаборовОтобрать.Характеристика
	|				И ОтгружаемыеТоварныеМеста.Назначение = ТаблицаКоличествоНаборовОтобрать.Назначение
	|				И ОтгружаемыеТоварныеМеста.Серия = ТаблицаКоличествоНаборовОтобрать.Серия
	|				И ОтгружаемыеТоварныеМеста.Действие = ТаблицаКоличествоНаборовОтобрать.Действие) КАК ВнутренняяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутренняяТаблица.Номенклатура,
	|	ВнутренняяТаблица.Характеристика,
	|	ВнутренняяТаблица.Назначение,
	|	ВнутренняяТаблица.Серия,
	|	ВнутренняяТаблица.Упаковка,
	|	ВнутренняяТаблица.КоличествоУпаковокВНаборе,
	|	ВнутренняяТаблица.Действие";
	
	УсловиеПоУпаковочнымЛистам = "НЕ ОтгружаемыеТовары.ЭтоУпаковочныйЛист";
	ЭтоОрдерНаПеремещение = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров");
	Если ЭтоОрдерНаПеремещение Тогда
		УсловиеПоУпаковочнымЛистам = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоУпаковочнымЛистам", УсловиеПоУпаковочнымЛистам);
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаТоваров = Объект.ОтгружаемыеТовары.Выгрузить();
	
	Запрос.УстановитьПараметр("ОтгружаемыеТовары", ТаблицаТоваров);
	ТаблицаКоличествоУпаковок = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровОтобрать = ТаблицаТоваров.СкопироватьКолонки();
	ТаблицаТоваровНеОтгружать = ТаблицаТоваров.СкопироватьКолонки();
		
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		Если Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Упаковка, "ТипУпаковки") <> Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение, Серия, Упаковка, Действие");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтроки = ТаблицаКоличествоУпаковок.НайтиСтроки(СтруктураПоиска);//Массив
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденнаяСтрока = НайденныеСтроки[0];//СтрокаТаблицыЗначений
			
			КоличествоУпаковокРаспределить = Мин(НайденнаяСтрока.КоличествоУпаковок, Строка.КоличествоУпаковок);
			Если КоличествоУпаковокРаспределить = 0 Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
			НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - КоличествоУпаковокРаспределить;
			
			НовоеДействие = Неопределено;
			
			Если Строка.КоличествоУпаковок > КоличествоУпаковокРаспределить Тогда // Оставшееся количество понижаем в действии
				
				Если Строка.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить Тогда
					НовоеДействие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать;
					ТаблицаРезерва = ТаблицаТоваровОтобрать;
				Иначе
					НовоеДействие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;
					ТаблицаРезерва = ТаблицаТоваровНеОтгружать;
				КонецЕсли;
								
				НоваяСтрока = ТаблицаРезерва.Добавить(); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок - КоличествоУпаковокРаспределить;
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок / НайденнаяСтрока.КоличествоУпаковокВНаборе;
				НоваяСтрока.Действие = НовоеДействие;
				Строка.КоличествоУпаковок = КоличествоУпаковокРаспределить;
				Строка.Количество = КоличествоУпаковокРаспределить / НайденнаяСтрока.КоличествоУпаковокВНаборе;
				
				СтруктураПоиска.Вставить("Действие", НовоеДействие);
				НайденныеСтрокиНовоеДействие = ТаблицаКоличествоУпаковок.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтрокиНовоеДействие.Количество() = 0 Тогда 
					НайденнаяСтрока.Действие = НовоеДействие;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайденнаяСтрока.КоличествоУпаковок = 0 И НайденнаяСтрока.Действие <> НовоеДействие Тогда 
				ТаблицаКоличествоУпаковок.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаТоваров.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	СтрокиКУдалению.Очистить();
	Для Каждого Строка Из ТаблицаТоваровОтобрать Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение, Серия, Упаковка, Действие");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		
		НайденныеСтроки = ТаблицаКоличествоУпаковок.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			КоличествоУпаковокРаспределить = Мин(НайденныеСтроки[0].КоличествоУпаковок, Строка.КоличествоУпаковок);
			Если КоличествоУпаковокРаспределить <> 0 Тогда
				НоваяСтрокаОбъекта = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъекта, Строка);
				НоваяСтрокаОбъекта.КоличествоУпаковок = КоличествоУпаковокРаспределить;
				НоваяСтрокаОбъекта.Количество = КоличествоУпаковокРаспределить / НайденныеСтроки[0].КоличествоУпаковокВНаборе;
			КонецЕсли;
			
			НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок - КоличествоУпаковокРаспределить;
			
			Если Строка.КоличествоУпаковок > КоличествоУпаковокРаспределить Тогда // Оставшееся количество понижаем в действии
				
				НоваяСтрока = ТаблицаТоваровНеОтгружать.Добавить(); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковок - КоличествоУпаковокРаспределить;
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок / НайденныеСтроки[0].КоличествоУпаковокВНаборе;
				НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать;					
				
			КонецЕсли;
			
			Если НайденныеСтроки[0].КоличествоУпаковок = 0 Тогда 
				ТаблицаКоличествоУпаковок.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого СтрокаНеотгружаемых Из ТаблицаТоваровНеОтгружать Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНеотгружаемых);
		Если Не ЭтоОрдерНаПеремещение Тогда
			НоваяСтрока.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоОрдерНаПеремещение Тогда
		КолонкиГруппировок = "Номенклатура, Характеристика, Назначение, Серия, СтатусУказанияСерий, ЭтоУпаковочныйЛист, УпаковочныйЛистРодитель, УпаковочныйЛист, Упаковка, Действие";	
	ИначеЕсли ЭтоОрдерНаПеремещение Тогда 
		КолонкиГруппировок = "Номенклатура, Характеристика, Назначение, Серия, СтатусУказанияСерий, Упаковка, Действие";
	КонецЕсли;
	
	ТаблицаТоваров.Свернуть(КолонкиГруппировок, "Количество, КоличествоУпаковок");
	
	Объект.ОтгружаемыеТовары.Загрузить(ТаблицаТоваров);
			
КонецПроцедуры

#КонецОбласти

#Область ЗаполненияТабличныхЧастейДокумента

// Возвращает параметры проверки заполнения количества.
//
// Возвращаемое значение:
//	Структура - параметры проверки:
//		*ИмяТЧ - Строка - имя табличной части. Значение по умолчанию - "Товары".
//		*ИменаПолейССуффиксом - Структура - коллекция содержащая имена полей Количество и КоличествоУпаковок с суффиксом.
//											Ключом коллекции выступает имя реквизита без суффикса, например, "Количество",
//											а значением задается имя реквизита с суффиксом, например, "КоличествоФакт".
//											Если табличная часть не содержит поля с суффиксом, тогда не требуется
//											инициализировать коллекцию.
//		*ПроверитьВозможностьОкругления - Булево - признак того, что необходимо проверить возможность округления.
//		*УсловиеОтбораСтрокДляОкругления - Строка - условие выбора строк для проверки округления. В качестве имени
//													таблицы нужно использовать имя переданное в параметр ИмяТЧ.
//		*ПроверитьКомплектностьТоварныхМест - Булево - признак необходимости проверки комплектности товарных мест.
//		*УсловиеОтбораСтрокПроверкиКомплектности - Строка - условия для запроса. Например, "Не ТаблицаТовары.ЭтоУпаковочныйЛист".
//		*ПоляГруппировкиПроверкиКомплектности - Строка - поля, по которым группируются товары для формирования целых
//															товаров из товарных мест. Поля "Номенклатура",
//															"Характеристика" и "Серия" будут добавлены по умолчанию.
//															Поле "<Приставка>Назначение" нужно добавлять, если имя
//															колонки отлично от строки "Назначение". Например,
//															"НовоеНазначение".
//		*УсловиеОтбораСтрокПоДополнительнымПолям - Строка - сложное условие отбора строк, например,
//															<таблица>.<поле>.<поле>
//															или <таблица>.<поле> В (ВЫБРТАЬ ....), где
//															в качестве имени таблицы нужно использовать имя
//															переданное в параметр ИмяТЧ.
//		*ДополнительныеПоля - Структура - поля, участвующие в сложном условии отбора строк (в качестве имени таблицы нужно использовать имя переданное в параметр ИмяТЧ):
//			** Ключ - Строка - имя поля.
//			** Значение - Строка - представление поля в запросе.
//		*ПараметрыЗапроса - Структура - параметры запроса.
//										Ключом коллекции выступает имя параметра запроса,
//										а значением задается устанавливаемое значение параметра запроса.
//		*ПроверяемаяТаблица - ТаблицаЗначений, Неопределено - если передана таблица значений, то проверяется она,
//																иначе - Объект или ТЧ с именем переданным в параметр ИмяТЧ.
//
Функция ПараметрыПроверкиЗаполненияКоличества() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",										"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",							"");
	ПараметрыПроверки.Вставить("ПутьКДанным",								"Объект");
	ПараметрыПроверки.Вставить("ИменаПолейССуффиксом",						Новый Структура);
	ПараметрыПроверки.Вставить("ИмяПоляКоличествоСуффикс",					"");
	ПараметрыПроверки.Вставить("ПроверитьВозможностьОкругления",			Истина);
	ПараметрыПроверки.Вставить("УсловиеОтбораСтрокДляОкругления",			"");
	ПараметрыПроверки.Вставить("ПроверитьКомплектностьТоварныхМест",		Ложь);
	ПараметрыПроверки.Вставить("УсловиеОтбораСтрокПроверкиКомплектности",	"");
	ПараметрыПроверки.Вставить("ПоляГруппировкиПроверкиКомплектности",		"");
	ПараметрыПроверки.Вставить("УсловиеОтбораСтрокПоДополнительнымПолям",	"");
	ПараметрыПроверки.Вставить("ДополнительныеПоля",						Новый Структура);
	ПараметрыПроверки.Вставить("ПроверяемаяТаблица",						Неопределено);
	ПараметрыПроверки.Вставить("ПараметрыЗапроса",							Новый Структура);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет заполнение реквизитов Количество и КоличествоУпаковок в документах.
//
// Параметры:
//	Объект - ДокументОбъект - проверяемый документ.
//	ПроверяемыеРеквизиты - Массив Из Строка - проверяемые реквизиты.
//	Отказ - Булево - признака отказа продолжения операции с документом.
//	ПараметрыПроверки - См. ПараметрыПроверкиЗаполненияКоличества.
//
Процедура ПроверитьЗаполнениеКоличества(Объект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ЗаполнятьРеквизитОбязательно;
	Перем ЗаполнятьДопРеквизитОбязательно;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ИменаПолейССуффиксом = ПараметрыПроверки.ИменаПолейССуффиксом;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Если ИмяТЧ = "Объект" Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Количество"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КоличествоУпаковок"));
		
		Если Объект.Количество = 0 И Объект.КоличествоУпаковок <> 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения'"),
													КлючДанных,
													"КоличествоУпаковок",
													,
													Отказ);
			
		ИначеЕсли Объект.Количество = 0 Или Объект.КоличествоУпаковок = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""%ПредставлениеПоляКоличество%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
										"%ПредставлениеПоляКоличество%",
										Объект.Метаданные().Реквизиты.Количество.Синоним);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
													КлючДанных,
													"КоличествоУпаковок",
													,
													Отказ);
			
		КонецЕсли;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		РеквизитПроверки =  ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".КоличествоУпаковок");
		ЗаполнятьРеквизитОбязательно = РеквизитПроверки <> Неопределено;
		
		Если РеквизитПроверки <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитПроверки);
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".Количество"));
		КонецЕсли;
		
		ПредставлениеТЧ = ?(ПараметрыПроверки.ПредставлениеТЧ = "",
							МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
							ПараметрыПроверки.ПредставлениеТЧ);
		
		ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.КоличествоУпаковок.Синоним;
		
		Если ИменаПолейССуффиксом.Свойство("Количество") Тогда
			РеквизитПроверки = ПроверяемыеРеквизиты.Найти(ИмяТЧ + "." + ИменаПолейССуффиксом.КоличествоУпаковок);
			ЗаполнятьДопРеквизитОбязательно = РеквизитПроверки <> Неопределено;
			
			Если РеквизитПроверки <> Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(РеквизитПроверки);
				ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТЧ + "." + ИменаПолейССуффиксом.Количество));
			КонецЕсли;
			
			ПредставлениеРеквизитаКоличествоУпаковокДоп  = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИменаПолейССуффиксом.КоличествоУпаковок].Синоним;
		Иначе
			ЗаполнятьДопРеквизитОбязательно = Ложь;
			ПредставлениеРеквизитаКоличествоУпаковокДоп = "";
		КонецЕсли;
		
		ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		ШаблонОшибкаПересчета = СтрЗаменить(ШаблонОшибкаПересчета, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Для Каждого СтрокаТаб Из Объект[ИмяТЧ] Цикл
			
			Если СтрокаТаб.Количество = 0
				И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														Поле,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
				
			ИначеЕсли ЗаполнятьРеквизитОбязательно
				И (СтрокаТаб.Количество = 0
					Или СтрокаТаб.КоличествоУпаковок = 0) Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														Поле,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
				
			КонецЕсли;
			
			Если Не ИменаПолейССуффиксом.Свойство("Количество") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаб[ИменаПолейССуффиксом.Количество] = 0
				И СтрокаТаб[ИменаПолейССуффиксом.КоличествоУпаковок] <> 0 Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, ИменаПолейССуффиксом.КоличествоУпаковок);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														Поле,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
				
			ИначеЕсли ЗаполнятьДопРеквизитОбязательно
				И (СтрокаТаб[ИменаПолейССуффиксом.Количество] = 0
					Или СтрокаТаб[ИменаПолейССуффиксом.КоличествоУпаковок] = 0) Тогда
				
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковокДоп);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, ИменаПолейССуффиксом.КоличествоУпаковок);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														Поле,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьОкруглениеКоличества(Объект, Отказ, ПараметрыПроверки);
	
	Если ПараметрыПроверки.ПроверитьКомплектностьТоварныхМест Тогда 
		ПроверитьКомплектностьТоварныхМест(Объект[ИмяТЧ], Отказ, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность округления реквизита Количество в документах.
//
// Параметры:
//	Объект				- ДокументОбъект 			- проверяемый ДокументОбъект
//	Отказ				- Булево 					- отказ продолжения операции.
//	ПараметрыПроверки	- Структура, Неопределено	- см. ПараметрыПроверкиЗаполненияКоличества
//
Процедура ПроверитьОкруглениеКоличества(Объект, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;

	Если ПараметрыПроверки.ПроверяемаяТаблица <> Неопределено
		И ПараметрыПроверки.ПроверяемаяТаблица.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ИмяТЧ <> "Объект"
		И Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИменаПолейССуффиксом = ПараметрыПроверки.ИменаПолейССуффиксом;
	
	Если ПараметрыПроверки.ПроверитьВозможностьОкругления Тогда
		ДопустимыйПроцентОтклонения = Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Получить();
	Иначе
		ДопустимыйПроцентОтклонения = 0;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = ПроверитьОкруглениеКоличестваВнутренний(Объект, ПараметрыПроверки, ДопустимыйПроцентОтклонения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ИмяТЧ = "Объект" Тогда
		
		Если Не ПараметрыПроверки.ПроверитьВозможностьОкругления Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'Количество в ""%Упаковка%"" переведено в количество в ""%БазоваяЕдиницаИзмерения%"" с погрешностью - %КоличествоОтклонение% %Упаковка%, что недопустимо, что свидетельствует об ошибке в работе программы. Обратитесь к администратору.'");
		ИначеЕсли ДопустимыйПроцентОтклонения > 0 Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'После округления количество товара будет равно %КоличествоОкругленное% %БазоваяЕдиницаИзмерения%, при этом погрешность округления составит %КоличествоОтклонение% %Упаковка%, что превышает максимальную погрешность - %КоличествоМаксимальнаяПогрешность% %Упаковка%.'");
		Иначе
			ШаблонОшибкаОкругления = НСтр("ru = 'Количество в ""%Упаковка%"" некратно количеству в ""%БазоваяЕдиницаИзмерения%"". Отклонение - %КоличествоОтклонение% %Упаковка%.'");
		КонецЕсли;
		
	Иначе
		
		ПредставлениеТЧ	= ?(ПараметрыПроверки.ПредставлениеТЧ = "",
							Объект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним,
							ПараметрыПроверки.ПредставлениеТЧ);
		
		Если Не ПараметрыПроверки.ПроверитьВозможностьОкругления Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" количество в ""%Упаковка%"" переведено в количество в ""%БазоваяЕдиницаИзмерения%"" с отклонением - %КоличествоОтклонение% %Упаковка%, что свидетельствует об ошибке в работе программы. Обратитесь к администратору.'");
		ИначеЕсли ДопустимыйПроцентОтклонения > 0 Тогда
			ШаблонОшибкаОкругления = НСтр("ru = 'После округления количество товара будет равно %КоличествоОкругленное% %БазоваяЕдиницаИзмерения% в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"", при этом погрешность округления составит %КоличествоОтклонение% %Упаковка%, что превышает максимальную погрешность - %КоличествоМаксимальнаяПогрешность% %Упаковка%.'");
		Иначе 
			ШаблонОшибкаОкругления = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" количество в ""%Упаковка%"" некратно количеству в ""%БазоваяЕдиницаИзмерения%"". Отклонение - %КоличествоОтклонение% %Упаковка%.'");
		КонецЕсли;
		
		ШаблонОшибкаОкругления = СтрЗаменить(ШаблонОшибкаОкругления, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОтклонение > Выборка.КоличествоМаксимальнаяПогрешность Тогда
			
			ТекстСообщения = ШаблонОшибкаОкругления;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БазоваяЕдиницаИзмерения%", Выборка.БазоваяЕдиницаИзмерения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОтклонение%", Выборка.КоличествоОтклонение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.Упаковка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоМаксимальнаяПогрешность%", Выборка.КоличествоМаксимальнаяПогрешность);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОкругленное%", Выборка.КоличествоОкругленное);
			
			Если ИмяТЧ = "Объект" Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														"КоличествоУпаковок",
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КоличествоУпаковок");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														Поле,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.КоличествоСуффиксОтклонение > Выборка.КоличествоСуффиксМаксимальнаяПогрешность Тогда
			
			ТекстСообщения = ШаблонОшибкаОкругления;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%БазоваяЕдиницаИзмерения%", Выборка.БазоваяЕдиницаИзмерения);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОтклонение%", Выборка.КоличествоСуффиксОтклонение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.Упаковка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоМаксимальнаяПогрешность%", Выборка.КоличествоСуффиксМаксимальнаяПогрешность);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОкругленное%", Выборка.КоличествоСуффиксОкругленное);
			
			Если ИмяТЧ = "Объект" Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														ИменаПолейССуффиксом.КоличествоУпаковок,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИменаПолейССуффиксом.КоличествоУпаковок);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
														КлючДанных,
														Поле,
														ПараметрыПроверки.ПутьКДанным,
														Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность округления реквизита Количество в документах.
// 
// Параметры:
//  Объект - ДокументОбъект - проверяемый ДокументОбъект
//  ПараметрыПроверки - Структура, Неопределено - см. ПараметрыПроверкиЗаполненияКоличества
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонкой:
//   * НомерСтроки - Число - номер строки табличной части в которой количество округлено некорректно.
Функция НомераСтрокСНекорректнымОкруглениемКоличества(Объект, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияКоличества();
	КонецЕсли;
	
	Если ПараметрыПроверки.ПроверитьВозможностьОкругления Тогда
		ДопустимыйПроцентОтклонения = Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Получить();
	Иначе
		ДопустимыйПроцентОтклонения = 0;
	КонецЕсли;
	
	Запрос = ПроверитьОкруглениеКоличестваВнутренний(Объект, ПараметрыПроверки, ДопустимыйПроцентОтклонения); // Запрос
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("ОкруглениеВыполненоКорректно", Новый ОписаниеТипов("Булево"));
	Для Каждого Строка Из Таблица Цикл
		
		Строка.ОкруглениеВыполненоКорректно = Истина;
		Если Строка.КоличествоОтклонение > Строка.КоличествоМаксимальнаяПогрешность Тогда
			
			Строка.ОкруглениеВыполненоКорректно = Ложь;
			
		КонецЕсли;
		
		Если Строка.КоличествоСуффиксОтклонение > Строка.КоличествоСуффиксМаксимальнаяПогрешность Тогда
			
			Строка.ОкруглениеВыполненоКорректно = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат Таблица.Скопировать(Новый Структура("ОкруглениеВыполненоКорректно", Ложь), "НомерСтроки");
	
КонецФункции

// Возвращает параметры для округления.
//
//	Возвращаемое значение:
//		Структура - параметры для округления:
//			*ИмяТЧ - Строка - имя табличной части. Значение по умолчанию - "Товары".
//			*ИмяПоляКоличествоСуффикс - Строка - имя поля Количетсво с суффиксом. Если в табличной части содержится два
//													реквизита "Количество", тогда второй имеет в наименовании суффикс.
//													Если параметр заполнен, тогда проверяются оба реквизита.
//													Значение по умолчанию - "".
//			*УсловиеОтбораСтрокДляОкругления - Строка - условие выбора строк для проверки округления.
//														В качестве имени таблицы нужно использовать имя переданное в
//														параметр ИмяТЧ.
//			*УсловиеОтбораСтрокПоДополнительнымПолям - Строка - сложное условие отбора строк, например,
//																<таблица>.<поле>.<поле>
//																или <таблица>.<поле> В (ВЫБРТАЬ ....), где
//																в качестве имени таблицы нужно использовать имя
//																переданное в параметр ИмяТЧ.
//			*ДополнительныеПоля - Структура - поля, участвующие в сложном условии отбора строк (в качестве имени таблицы нужно использовать имя переданное в параметр ИмяТЧ):
//				** Ключ - Строка - имя поля.
//				** Значение - Строка - представление поля в запросе.
//			*ПараметрыЗапроса - Структура - параметры запроса.
//											Ключом коллекции выступает имя параметра запроса,
//											а значением задается устанавливаемое значение параметра запроса.
//
Функция ПараметрыОкругленияКоличестваШтучныхТоваров() Экспорт
	
	ПараметрыОкругления = Новый Структура;
	ПараметрыОкругления.Вставить("ИмяТЧ",									"Товары");
	ПараметрыОкругления.Вставить("ИмяПоляКоличествоСуффикс",				"");
	ПараметрыОкругления.Вставить("УсловиеОтбораСтрокДляОкругления",			"");
	ПараметрыОкругления.Вставить("УсловиеОтбораСтрокПоДополнительнымПолям",	"");
	ПараметрыОкругления.Вставить("ДополнительныеПоля",						Новый Структура);
	ПараметрыОкругления.Вставить("ПараметрыЗапроса",						Новый Структура);
	
	Возврат ПараметрыОкругления;
	
КонецФункции

// Округляет количество товара до целых штук при указании количества в документе в мерных единицах измерения.
//
// Параметры:
//	Объект - ДокументОбъект - объект документа.
//	РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//	ПараметрыОкругления - см. ПараметрыОкругленияКоличестваШтучныхТоваров.
//
Процедура ОкруглитьКоличествоШтучныхТоваров(Объект, РежимЗаписи = Неопределено, ПараметрыОкругления = Неопределено) Экспорт
	
	Если РежимЗаписи <> Неопределено
		И РежимЗаписи <> РежимЗаписиДокумента.Проведение
		И ТипЗнч(РежимЗаписи) = Тип("РежимЗаписиДокумента")
		И Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыОкругления = Неопределено Тогда
		ПараметрыОкругления = ПараметрыОкругленияКоличестваШтучныхТоваров();
	КонецЕсли;
	
	ИмяТЧ = ПараметрыОкругления.ИмяТЧ;
	ИмяПоляКоличествоСуффикс = ПараметрыОкругления.ИмяПоляКоличествоСуффикс;
	УсловиеОтбораСтрокПоДополнительнымПолям = ПараметрыОкругления.УсловиеОтбораСтрокПоДополнительнымПолям;
	УсловиеОтбораСтрокДляОкругления = ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.Упаковка,
	|	ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО(15, 0)) КАК КоличествоОкругленное,
	|	ВЫРАЗИТЬ(&ИмяПоляКоличествоСуффикс КАК ЧИСЛО(15, 0)) КАК КоличествоСуффиксОкругленное,
	|	&ДополнительныеПоля
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	И (ТЧ.Количество <> (ВЫРАЗИТЬ(ТЧ.Количество КАК ЧИСЛО(15, 0)))
	|			ИЛИ &ИмяПоляКоличествоСуффикс <> (ВЫРАЗИТЬ(&ИмяПоляКоличествоСуффикс КАК ЧИСЛО(15, 0))))
	|	И (&УсловиеОтбораСтрокДляОкругления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.КоличествоОкругленное КАК КоличествоОкругленное,
	|	ТЧ.КоличествоСуффиксОкругленное КАК КоличествоСуффиксОкругленное
	|ИЗ
	|	ВТ КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТУпаковкиЕдиницыХранения
	|			ПО (ТУпаковкиЕдиницыХранения.Ссылка = ТНоменклатура.ЕдиницаИзмерения)
	|				И (ТУпаковкиЕдиницыХранения.ТипИзмеряемойВеличины = &ШтучныйТип)
	|		ПО (ТНоменклатура.Ссылка = ТЧ.Номенклатура)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТУпаковкиТЧ
	|		ПО (ТУпаковкиТЧ.Ссылка = ТЧ.Упаковка)
	|			И (ТУпаковкиТЧ.ТипИзмеряемойВеличины В (&МерныеТипы))
	|ГДЕ
	|	&УсловиеОтбораСтрокПоДополнительнымПолям";
	
	Если ЗначениеЗаполнено(ИмяПоляКоличествоСуффикс) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСуффикс", "ТЧ." + ИмяПоляКоличествоСуффикс);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСуффикс", "0");
	КонецЕсли;
	
	Если УсловиеОтбораСтрокДляОкругления <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УсловиеОтбораСтрокДляОкругления",
									СтрЗаменить(УсловиеОтбораСтрокДляОкругления, ИмяТЧ + ".", "ТЧ."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОкругления.ДополнительныеПоля) Тогда
		Шаблон = "%1 КАК %2,
					|%3";
		ТекстПолей = Шаблон;
		
		Для каждого Поле Из ПараметрыОкругления.ДополнительныеПоля Цикл
			ТекстПолей = СтрШаблон(ТекстПолей, СтрЗаменить(Поле.Значение, ИмяТЧ + ".", "ТЧ."), Поле.Ключ, Шаблон);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ДополнительныеПоля", 
									Сред(ТекстПолей, 1, СтрНайти(ТекстПолей, ",", НаправлениеПоиска.СКонца,, 2) - 1));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоля", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбораСтрокПоДополнительнымПолям) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УсловиеОтбораСтрокПоДополнительнымПолям",
									СтрЗаменить(УсловиеОтбораСтрокПоДополнительнымПолям, ИмяТЧ + ".", "ТЧ."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокПоДополнительнымПолям", "ИСТИНА");	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Если ИмяТЧ = "Объект" Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Объект);
		
		Запрос.УстановитьПараметр("ТЧ", Таблица);
	Иначе
		Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить());
	КонецЕсли;
	
	Для Каждого ПараметрЗапроса Из ПараметрыОкругления.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МерныеТипы = Новый Массив;
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	
	Запрос.УстановитьПараметр("МерныеТипы", МерныеТипы);
	Запрос.УстановитьПараметр("ШтучныйТип", Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ИмяТЧ = "Объект" Тогда
			Объект.Количество = Выборка.КоличествоОкругленное;
			Если ЗначениеЗаполнено(ИмяПоляКоличествоСуффикс) Тогда
				Объект[ИмяПоляКоличествоСуффикс] = Выборка.КоличествоСуффиксОкругленное;
			КонецЕсли;
		Иначе
			Объект[ИмяТЧ][Выборка.НомерСтроки - 1].Количество = Выборка.КоличествоОкругленное;
			Если ЗначениеЗаполнено(ИмяПоляКоличествоСуффикс) Тогда
				Объект[ИмяТЧ][Выборка.НомерСтроки - 1][ИмяПоляКоличествоСуффикс] = Выборка.КоличествоСуффиксОкругленное;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения страны происхождения номенклатуры
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаСтранаПроисхожденияНоменклатуры(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем Параметры;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьСтрануПроисхожденияНоменклатуры",
		СтруктураДействий,
		КэшированныеЗначения,
		Параметры) Тогда
	
		ТекстЗарпоса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ВЫБОР
			|		КОГДА НЕ ИсточникДанных.ВедетсяУчетПоГТД ТОГДА
			|			ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
			|		КОГДА &ПолеНомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) ТОГДА
			|			НомераГТД.СтранаПроисхождения
			|		ИНАЧЕ
			|			СпрНоменклатура.СтранаПроисхождения
			|	КОНЕЦ КАК СтранаПроисхождения
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
			|		ПО НомераГТД.Ссылка = &ПолеНомерГТД
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Ссылка = &ПолеНоменклатура";
		
		ТекстЗарпоса = СтрЗаменить(ТекстЗарпоса, "&ПолеНомерГТД", "ИсточникДанных." + Параметры.НомерГТД);
		ТекстЗарпоса = СтрЗаменить(ТекстЗарпоса, "&ПолеНоменклатура", "ИсточникДанных." + Параметры.Номенклатура);
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "СтранаПроисхожденияНоменклатуры");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения содержания услуги по номенклатуре 
// и характеристике.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаСодержаниеУслуги(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьСодержание",
		СтруктураДействий,
		КэшированныеЗначения) Тогда
	
		ТекстЗарпоса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
			|	СпрНоменклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
			|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
			|	СпрХарактеристикиНоменклатуры.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
			|		ПО СпрХарактеристикиНоменклатуры.Ссылка = ИсточникДанных.Характеристика
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Ссылка = ИсточникДанных.Номенклатура"; 
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "СодержаниеУслуги");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения кода ТНВЭД по номенклатуре.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаКодТНВЭДПоНоменклатуре(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем НалогообложениеНДС;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьКодТНВЭД",
			СтруктураДействий,
			КэшированныеЗначения,
			НалогообложениеНДС) 
			И (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт 
			ИЛИ НалогообложениеНДС = Неопределено) Тогда
	
		ТекстЗарпоса = "
			|ВЫБРАТЬ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ЕСТЬNULL(СпрНоменклатура.КодТНВЭД, ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)) КАК КодТНВЭД
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Ссылка = ИсточникДанных.Номенклатура";
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "КодТНВЭДПоНоменклатуре");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПакетнаяОбработкаТабличныхЧастей

// Добавляет запросы в пакет запросов для получения данных, необходимых для проверки корректности и заполнения характеристики.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПроверитьХарактеристикуПоВладельцу",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		СписокЗапросов = ТекстыЗапросовПроверитьХарактеристикуПоВладельцу();
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПроверитьЗаполнитьУпаковкуПоВладельцу",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		СписокЗапросов = ТекстыЗапросовПроверитьЗаполнитьУпаковкуПоВладельцу();
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения учетного количества номенклатуры.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаЗаполнитьУчетноеКоличествоНоменклатуры(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьУчетноеКоличествоНоменклатуры",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		СписокЗапросов = ТекстыЗапросовЗаполнитьУчетноеКоличествоНоменклатуры();
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Склад", ПараметрыДействия.Склад);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Регистратор", ПараметрыДействия.Регистратор);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Организация", ПараметрыДействия.Организация);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("МоментВремени", ПараметрыДействия.МоментВремени);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для пересчета количества упаковок номенклатуры.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаПересчитатьКоличествоУпаковок(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПересчитатьКоличествоУпаковок",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		СписокЗапросов = ТекстыЗапросовПересчитатьКоличествоУпаковок();
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИмяПоляКоличествоУпаковок", "КоличествоУпаковок");

КонецПроцедуры

// Добавляет запрос в пакет запросов для пересчета количества упаковок номенклатуры с суффиксом.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокСуффикс(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПересчитатьКоличествоУпаковокСуффикс",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
			
		ПараметрыПересчета = ОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		СписокЗапросов = ТекстыЗапросовПересчитатьКоличествоУпаковок(
			КоличествоССуффиксом.Количество,
			"ПересчитатьКоличествоУпаковокСуффикс");
		
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИмяПоляКоличествоУпаковок", КоличествоССуффиксом.КоличествоУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для пересчета количества упаковок номенклатуры по весу.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокПоВесу(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПересчитатьКоличествоУпаковокПоВесу",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		ПараметрыПересчета = ОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		СписокЗапросов = ТекстыЗапросовПересчитатьКоличествоУпаковокПоВесуОбъему(
			"ПересчитатьКоличествоУпаковокПоВесу",
			КоличествоССуффиксом.Количество,
			КоличествоССуффиксом.КоличествоУпаковок,
			"Вес");
			
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИмяПоляКоличество", КоличествоССуффиксом.Количество);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИмяПоляКоличествоУпаковок", КоличествоССуффиксом.КоличествоУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для пересчета количества упаковок номенклатуры по объему.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокПоОбъему(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПересчитатьКоличествоУпаковокПоОбъему",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		ПараметрыПересчета = ОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		СписокЗапросов = ТекстыЗапросовПересчитатьКоличествоУпаковокПоВесуОбъему(
			"ПересчитатьКоличествоУпаковокПоОбъему",
			КоличествоССуффиксом.Количество,
			КоличествоССуффиксом.КоличествоУпаковок,
			"Объем");
			
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИмяПоляКоличество", КоличествоССуффиксом.Количество);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИмяПоляКоличествоУпаковок", КоличествоССуффиксом.КоличествоУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда, ИмяРеквизита = "")
	
	ШаблонСообщенияОбОшибке =
		НСтр("ru = 'Невозможно рассчитать наименование по шаблону.
				   |Ошибка в имени операнда ""%ИмяОперанда%"".'");
	ТекстСообщенияОбОшибке  =
		СтрЗаменить(ШаблонСообщенияОбОшибке, "%ИмяОперанда%", ИмяОперанда + ?(ИмяРеквизита = "", "", ":" + ИмяРеквизита));
	
	ВызватьИсключение ТекстСообщенияОбОшибке;
	
КонецПроцедуры

Функция ОкруглитьГрубо(Число)
	
	Если Цел(Число) <> Число Тогда
		Результат = Цел(Число) + 1;
	Иначе
		Результат = Число;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция добавляет новую строку в таблицу значений и копирует в нее данные из строки-источника
// 
// Параметры:
// 	Таблица - ТаблицаЗначений
// 	СтрокаИсточник - СтрокаТаблицыЗначений
// 	
// Возвращаемое значение:
// 	СтрокаТаблицыЗначений
//
Функция ДобавитьИЗаполнитьСтроку(Таблица, СтрокаИсточник)
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
	Возврат НоваяСтрока;
КонецФункции

Функция ВариантПереносаНастроекПоХарактеристикам(Приемник, Источник, СоответствияСкопированныхОбъектов) Экспорт
	
	РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ВладелецХарактеристик,ВидНоменклатуры,ИспользованиеХарактеристик");
	
	Если (Приемник.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
		И Приемник.ВидНоменклатуры = РеквизитыИсточника.ВидНоменклатуры)
		Или (Приемник.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
		И (Приемник.ВладелецХарактеристик = РеквизитыИсточника.ВидНоменклатуры 
		Или Приемник.ВладелецХарактеристик = РеквизитыИсточника.ВладелецХарактеристик)) Тогда
		ВариантПереноса = "ВзятьИзИсточника";
	ИначеЕсли Приемник.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры
		И РеквизитыИсточника.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры
		И СоответствияСкопированныхОбъектов.Свойство("Характеристики") Тогда
		ВариантПереноса = "ВзятьИзСоответствия";
	ИначеЕсли Приемник.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
		И РеквизитыИсточника.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда 
		ВариантПереноса = "НеИспользуются";
	Иначе
		ВариантПереноса = "НеПереносить";
	КонецЕсли;
	
	Возврат ВариантПереноса;
	
КонецФункции

Функция ВариантПереносаНастроекПоУпаковкам(Приемник, Источник, СоответствияСкопированныхОбъектов) Экспорт
	
	РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "ИспользоватьУпаковки,НаборУпаковок");
	
	Если Приемник.ИспользоватьУпаковки
		И РеквизитыИсточника.ИспользоватьУпаковки
		И Приемник.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
		И Приемник.НаборУпаковок = РеквизитыИсточника.НаборУпаковок Тогда
		
		ВариантПереноса = "ВзятьИзИсточника";
		
	ИначеЕсли Приемник.ИспользоватьУпаковки
		И РеквизитыИсточника.ИспользоватьУпаковки	
		И Приемник.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
		И Приемник.НаборУпаковок = РеквизитыИсточника.НаборУпаковок
		И СоответствияСкопированныхОбъектов.Свойство("Упаковки") Тогда
		
		ВариантПереноса = "ВзятьИзСоответствия";
		
	ИначеЕсли Не Приемник.ИспользоватьУпаковки
		И Не РеквизитыИсточника.ИспользоватьУпаковки Тогда
		
		ВариантПереноса = "НеИспользуются";
		
	Иначе
		ВариантПереноса = "НеПереносить";
	КонецЕсли;
	
	Возврат ВариантПереноса;

КонецФункции

#Область ПроцедурыРаботыССериями

Функция ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий,
													ТаблицаТовары,
													ТаблицаСерии,
													Склад, //Если склады в ТЧ, то параметр игнорируется
													СтрокиТоваровДляОбработки = Неопределено,
													СтрокиСерийДляОбработки = Неопределено) Экспорт
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	ТекстЗапроса = МодульМенеджера.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ТипЗнч(Склад) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("СкладОтправитель", Склад.Отправитель);
		Запрос.УстановитьПараметр("СкладПолучатель", Склад.Получатель);
	Иначе
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("СкладОтправитель", Склад);
		Запрос.УстановитьПараметр("СкладПолучатель", Склад);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоварыПараметрЗапроса = ТаблицаТовары;
	Иначе
		Если СтрокиТоваровДляОбработки <> Неопределено Тогда
			ТаблицаТоварыПараметрЗапроса = ТаблицаТовары.Выгрузить(СтрокиТоваровДляОбработки);
		Иначе
			ТаблицаТоварыПараметрЗапроса = ТаблицаТовары.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаСерии) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСерииПараметрЗапроса = ТаблицаСерии;
	Иначе
		Если СтрокиСерийДляОбработки <> Неопределено Тогда
			ТаблицаСерииПараметрЗапроса = ТаблицаСерии.Выгрузить(СтрокиСерийДляОбработки);
		Иначе
			ТаблицаСерииПараметрЗапроса = ТаблицаСерии.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
 	Запрос.УстановитьПараметр("Товары", ТаблицаТоварыПараметрЗапроса);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерииПараметрЗапроса);
	
	УстановитьПривилегированныйРежим(Истина); // В перемещении товаров один из складов может быть недоступен пользователю
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Структура, Объект);
	КонецЕсли;
	Если Структура.Свойство("Дата") И НЕ ЗначениеЗаполнено(Структура.Дата) Тогда
		Структура.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Структура.Свойство("ДатаОтгрузки") И НЕ ЗначениеЗаполнено(Структура.ДатаОтгрузки) Тогда
		Структура.ДатаОтгрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	Возврат Структура;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий)
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Ложь);
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаНаВнутренниеНужды", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаНаВнутренниеНужды", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Ложь);            
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеИзлишков) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеНедостач) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеНедостач", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеНедостач", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеПорчи) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеПорчи", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеПорчи", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.Пересчет) <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пересчет", Истина);
	Иначе
		Запрос.УстановитьПараметр("Пересчет", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеРезультатовПересчетов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтборИзЯчеек) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборИзЯчеек", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборИзЯчеек", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.КонтрольОтгрузки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("КонтрольОтгрузки", Истина);
	Иначе
		Запрос.УстановитьПараметр("КонтрольОтгрузки", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.РазмещениеВЯчейки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("РазмещениеВЯчейки", Истина);
	Иначе
		Запрос.УстановитьПараметр("РазмещениеВЯчейки", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПеремещениеМеждуПомещениями) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПеремещениеМеждуПомещениями", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПеремещениеМеждуПомещениями", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПродукцииИзПроизводства", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПродукцииИзПроизводства", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПередачаВПроизводствоОтгрузка", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПередачаВПроизводствоОтгрузка", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПередачаВПроизводствоПриемка) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПередачаВПроизводствоПриемка", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПередачаВПроизводствоПриемка", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещениюВПроизводстве) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещениюВПроизводстве", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещениюВПроизводстве", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещениюВПроизводстве) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещениюВПроизводстве", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещениюВПроизводстве", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ВозвратМатериаловИзПроизводстваОтгрузка) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВозвратМатериаловИзПроизводстваОтгрузка", Истина);
	Иначе
		Запрос.УстановитьПараметр("ВозвратМатериаловИзПроизводстваОтгрузка", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.СписаниеМатериаловНаЗатраты) <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписаниеМатериаловНаЗатраты", Истина);
	Иначе
		Запрос.УстановитьПараметр("СписаниеМатериаловНаЗатраты", Ложь);
	КонецЕсли;
	
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаТМЦВЭксплуатацию) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаТМЦВЭксплуатацию", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаТМЦВЭксплуатацию", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ВыбытиеТМЦИзЭксплуатации) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВыбытиеТМЦИзЭксплуатации", Истина);
	Иначе
		Запрос.УстановитьПараметр("ВыбытиеТМЦИзЭксплуатации", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОприходованиеТМЦВЭксплуатации) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОприходованиеТМЦВЭксплуатации", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОприходованиеТМЦВЭксплуатации", Ложь);
	КонецЕсли;
	
	Для каждого ДопПараметр Из ПараметрыУказанияСерий.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ДопПараметр.Ключ, ДопПараметр.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПланированиеОтгрузки", ПараметрыУказанияСерий.ПланированиеОтгрузки);
	
	Запрос.УстановитьПараметр("ПланированиеОтбора", ПараметрыУказанияСерий.ПланированиеОтбора);
	
	Запрос.УстановитьПараметр("ФактОтбора", ПараметрыУказанияСерий.ФактОтбора);
	
	Запрос.УстановитьПараметр("ПроверкаОтбора", ПараметрыУказанияСерий.ПроверкаОтбора);              
	
	Запрос.УстановитьПараметр("ПодготовкаОрдера", ПараметрыУказанияСерий.ПодготовкаОрдера);
	
	Запрос.УстановитьПараметр("ТолькоСерииДляСебестоимости", ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости);
	
	Запрос.УстановитьПараметр("Дата", ПараметрыУказанияСерий.Дата);
	
	Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",ПараметрыУказанияСерий.ИспользоватьАдресноеХранение);
	
	Запрос.УстановитьПараметр("Дата", ПараметрыУказанияСерий.Дата);
	Запрос.УстановитьПараметр("ТоварВШапке", ПараметрыУказанияСерий.ТоварВШапке);
	
	Запрос.УстановитьПараметр("ТолькоСерииСУчетомОстатков", ПараметрыУказанияСерий.ТолькоСерииСУчетомОстатков);
	
	Запрос.УстановитьПараметр("ОперацияДокумента", ПараметрыУказанияСерий.ОперацияДокумента);

КонецПроцедуры

Процедура ОчиститьНеиспользуемыеСерииСУчетомТовараВШапке(ДокументОбъект, ПараметрыУказанияСерий)
	
	ТЧТовары = Новый Массив;
	ТЧТовары.Добавить(ДокументОбъект);
	Если ПараметрыУказанияСерий.Свойство("Шапка") Тогда
		ОчиститьНеиспользуемыеСерииВТЧТовары(ДокументОбъект, ПараметрыУказанияСерий.Шапка, ТЧТовары);
	Иначе
		ОчиститьНеиспользуемыеСерииВТЧТовары(ДокументОбъект, ПараметрыУказанияСерий, ТЧТовары);
	КонецЕсли;	
	
	Если ПараметрыУказанияСерий.Свойство("ТЧ") Тогда
		ОчиститьНеиспользуемыеСерииВТЧТовары(ДокументОбъект, ПараметрыУказанияСерий.ТЧ, ДокументОбъект[ПараметрыУказанияСерий.ТЧ.ИмяТЧТовары]);	
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.Свойство("ТЧ") Тогда
		ТаблицаТовары = ДокументОбъект[ПараметрыУказанияСерий.ТЧ.ИмяТЧТовары].Выгрузить();
	Иначе
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТовары.Колонки.Добавить("СтатусУказанияСерий", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0, ДопустимыйЗнак.Неотрицательный)));
		
		Для каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ДокументОбъект[СтрМас]));
			ТаблицаТовары.Колонки.Добавить(СтрМас, Новый ОписаниеТипов(МассивТипов));
		КонецЦикла;
	КонецЕсли;
		
	НоваяСтрока = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументОбъект);
	
	
	Если ПараметрыУказанияСерий.Свойство("Шапка") Тогда
		Если ПараметрыУказанияСерий.Шапка.ЭтоЗаказ
			И СкладыКлиентСервер.ЕстьОтгрузка(ПараметрыУказанияСерий.Шапка.СкладскиеОперации)
			И НЕ ДокументОбъект.Обособленно Тогда
			
			НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ПараметрыУказанияСерий.Шапка.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии
			И Не ПараметрыУказанияСерий.ТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии
			И (НоваяСтрока.СтатусУказанияСерий = 9
			Или НоваяСтрока.СтатусУказанияСерий = 10) Тогда
			НоваяСтрока.СтатусУказанияСерий = 8;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ТЧ") Тогда
		ОчиститьНеиспользуемыеСерииВТЧСерии(ДокументОбъект, ПараметрыУказанияСерий.ТЧ, ТаблицаТовары);
	Иначе
		ОчиститьНеиспользуемыеСерииВТЧСерии(ДокументОбъект, ПараметрыУказанияСерий, ТаблицаТовары);
	КонецЕсли;	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеСерииВТЧТовары(ДокументОбъект, ПараметрыУказанияСерий, ТЧТовары)
	
	ЕстьСерииВТЧТовары = ТЧТовары.Количество() > 0
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТЧТовары[0], "Серия");
	
	Если ЕстьСерииВТЧТовары Тогда
		Для Каждого СтрТабл Из ТЧТовары Цикл
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				Если Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрТабл.СтатусУказанияСерий, ПараметрыУказанияСерий)
					Или НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрТабл.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
					
					СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					
				КонецЕсли;
			Иначе
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					Если ИмяПоляСтатус = "СтатусУказанияСерий" Тогда
						ИмяПоляСерия = "Серия";
					Иначе
						СоответствиеИмениПоляСерияСтатусуУказанияСерий = ПараметрыУказанияСерий.СоответствиеИмениПоляСерияСтатусуУказанияСерий; // Соответствие -
						ИмяПоляСерия = СоответствиеИмениПоляСерияСтатусуУказанияСерий.Получить(ИмяПоляСтатус);
					КонецЕсли;
					
					Если ИмяПоляСерия <> Неопределено
						И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрТабл, ИмяПоляСерия)
						И (НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрТабл[ИмяПоляСтатус], ПараметрыУказанияСерий)
							Или Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрТабл.СтатусУказанияСерий, ПараметрыУказанияСерий)) Тогда
						
						СтрТабл[ИмяПоляСерия] = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеСерииВТЧСерии(ДокументОбъект, ПараметрыУказанияСерий, ТаблицаТовары)
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии
		Или ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	ТекстПоляСвязиТовары = "";
	ТекстПоляСвязиСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязиТовары = ТекстПоляСвязиТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляСвязиСерии = ТекстПоляСвязиСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
		|			И ТаблицаТоваров."+СтрМас+" = ТаблицаСерий."+СтрМас;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	&ТекстПоляСвязиТовары,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляСвязиСерии,
	|	ТаблицаСерий.НомерСтроки,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ТаблицаСерий.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И ТаблицаСерий.Характеристика = ТаблицаТоваров.Характеристика
	|			И &ТекстПоляСвязиСоединениеТоварыСерии
	|ГДЕ
	|	НЕ ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) В (&СтатусыСерийУказываемыхВТЧСерии)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	СтатусыСерийУказываемыхВТЧСерии = Новый Массив;
	СтатусыСерийУказываемыхВТЧСерии.Добавить(1);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(2);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(3);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(4);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(5);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(6);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(7);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(8);
	Если ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии Тогда
		СтатусыСерийУказываемыхВТЧСерии.Добавить(9);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(10);
	КонецЕсли;
	
	ЕстьСерииВТЧТовары = ТаблицаТовары.Количество() > 0
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТаблицаТовары[0], "Серия");
		
	Если Не ЕстьСерииВТЧТовары Тогда
		СтатусыСерийУказываемыхВТЧСерии.Добавить(13);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(14);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(17);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(18);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(19);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(20);
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
	Запрос.УстановитьПараметр("СтатусыСерийУказываемыхВТЧСерии", СтатусыСерийУказываемыхВТЧСерии);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСвязиТовары,", ТекстПоляСвязиТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСвязиСерии,", ТекстПоляСвязиСерии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстПоляСвязиСоединениеТоварыСерии", ТекстПоляСвязиСоединениеТоварыСерии);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии][Выборка.НомерСтроки-1]);
		
	КонецЦикла;

КонецПроцедуры

// Настраивает отбор в параметрах по другим параметрам. Вызывается из обработки получения данных выбора
// и при создании формы выбора политик учета серий.
//
// Параметры:
//  Параметры - см. НоменклатураКлиентСервер.ПараметрыОтбораПолитикУчетаСерий
//  
// Возвращаемое значение:
//  Структура - содержит:
//  	* ТипПолитики - ФиксированныйМассив
//  	* ДляСклада - Булево
//  	* УказыватьПриОтраженииИзлишков - Булево
//  	* УказыватьПриОтраженииНедостач - Булево
//  	* ДляПроизводства - Булево
//  	* УчетТоваровВПутиОтПоставщикаПоСериям - Булево
//  	* УчетСерийВНеотфактурованныхПоставкахТоваров - Булево
//
Функция ОтборПолитикУчетаСерийПоПараметрам(Параметры) Экспорт
	
	Отбор = Новый Структура;
	
	Если Не Параметры.Свойство("ИспользоватьСерии") 
		Или Не Параметры.ИспользоватьСерии Тогда
		Возврат Отбор;
	КонецЕсли;
	
	МассивДопустимыхТиповПолитик = Новый Массив;
	
	// Для отображения предопределенной политики "Серии не используются"
	МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.ПустаяСсылка());
	
	Если Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		
		МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
		
	ИначеЕсли Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		
		Если Параметры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
			
		ИначеЕсли Параметры.ИспользоватьСрокГодностиСерии Тогда
			
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УправлениеПоFEFOОстаткамиСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям);
			
		Иначе	
			
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям);
			
		КонецЕсли;
	КонецЕсли;

	Отбор.Вставить("ТипПолитики", Новый ФиксированныйМассив(МассивДопустимыхТиповПолитик));
	
	Склад = Параметры.Склад;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
			
			Отбор.Вставить("ДляСклада", Истина);
			Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Склад) Тогда
				Отбор.Вставить("УказыватьПриОтраженииИзлишков", Ложь);
				Отбор.Вставить("УказыватьПриОтраженииНедостач", Ложь);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Отбор.Вставить("ДляПроизводства", Истина);
		КонецЕсли;
	Иначе
		
		Если СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач() Тогда
			Отбор.Вставить("УказыватьПриОтраженииИзлишков", Ложь);
			Отбор.Вставить("УказыватьПриОтраженииНедостач", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидНоменклатуры = Параметры.ВидНоменклатуры;
	
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьПередачуТоваровНаХранение = ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи");
	
	// Параметр ВидНоменклатуры передается только при выборе политики учета серий в шапке
	Если ЗначениеЗаполнено(ВидНоменклатуры)
		И (ИспользоватьНеотфактурованныеПоставки
			Или ИспользоватьТоварыВПутиОтПоставщиков
			Или ИспользоватьПередачуТоваровНаХранение) Тогда
		
		// Политику в шапке можно менять, поэтому она не заблокирована БСП, но
		// если сейчас в шапке указана политика с учетом серий по товарам в пути, неотфактуровке, у хранителей
		// и переработчиков, то менять политику можно только на ту, в которой те же значения флагов.

		ИменаРеквизитов = Новый Структура;
		ИменаРеквизитов.Вставить(
			"УчетСерийВНеотфактурованныхПоставкахТоваров",
			"ПолитикаУчетаСерий.УчетСерийВНеотфактурованныхПоставкахТоваров");
		ИменаРеквизитов.Вставить(
			"УчетТоваровВПутиОтПоставщикаПоСериям",
			"ПолитикаУчетаСерий.УчетТоваровВПутиОтПоставщикаПоСериям");
		ИменаРеквизитов.Вставить(
			"УчетСерийВПереданныхНаХранениеТоварах",
			"ПолитикаУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах");
		ИменаРеквизитов.Вставить(
			"УчетСерийПереданныхПереработчикуТоваров",
			"ПолитикаУчетаСерий.УчетСерийПереданныхПереработчикуТоваров");
		
		РеквизитыТекущейПолитикиУчетаСерий = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры, ИменаРеквизитов);
		
		Отбор.Вставить(
			"УчетСерийВНеотфактурованныхПоставкахТоваров",
			РеквизитыТекущейПолитикиУчетаСерий.УчетСерийВНеотфактурованныхПоставкахТоваров);
		
		Отбор.Вставить(
			"УчетТоваровВПутиОтПоставщикаПоСериям",
			РеквизитыТекущейПолитикиУчетаСерий.УчетТоваровВПутиОтПоставщикаПоСериям);
		
		Отбор.Вставить(
			"УчетСерийВПереданныхНаХранениеТоварах",
			РеквизитыТекущейПолитикиУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах);
		
		Отбор.Вставить(
			"УчетСерийПереданныхПереработчикуТоваров",
			РеквизитыТекущейПолитикиУчетаСерий.УчетСерийПереданныхПереработчикуТоваров);
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Функция ОтборВладельцаПодчиненныхСправочников(ВидНоменклатуры, ИмяРеквизитаВладелец) Экспорт
	
	ОтборВладельцаПодчиненныхСправочников = Новый Структура;
	
	ТипыНоменклатуры = Новый Массив;
	
	Если ИмяРеквизитаВладелец = "ВладелецХарактеристик" Тогда
		
		ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик = ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик(); 
		
		Если ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик.Найти(ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ОтборВладельцаПодчиненныхСправочников.Вставить("ОсобенностьУчета", ВидНоменклатуры.ОсобенностьУчета);
		Иначе
			ДанныеВыбора = Новый СписокЗначений;
			ОбщегоНазначенияУТ.ДоступныеДляВыбораЗначенияПеречисления("ОсобенностиУчетаНоменклатуры", ДанныеВыбора,, ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик);
			ДанныеВыбора.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка());
			
			ОтборВладельцаПодчиненныхСправочников.Вставить("ОсобенностьУчета", Новый ФиксированныйМассив(ДанныеВыбора.ВыгрузитьЗначения()));
		КонецЕсли;
	
		ОтборВладельцаПодчиненныхСправочников.Вставить("ИспользованиеХарактеристик",
			Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	ИначеЕсли ИмяРеквизитаВладелец = "ВладелецСерий" Тогда
		
		ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
		
		Если ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		КонецЕсли;
		
		ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий = ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий();
		
		Если ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий.Найти(ВидНоменклатуры.ОсобенностьУчета) <> Неопределено Тогда
			ОтборВладельцаПодчиненныхСправочников.Вставить("ОсобенностьУчета", ВидНоменклатуры.ОсобенностьУчета);
		Иначе
			ДанныеВыбора = Новый СписокЗначений;
			ОбщегоНазначенияУТ.ДоступныеДляВыбораЗначенияПеречисления("ОсобенностиУчетаНоменклатуры", ДанныеВыбора,, ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий);
			ДанныеВыбора.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка());
			
			ОтборВладельцаПодчиненныхСправочников.Вставить("ОсобенностьУчета", Новый ФиксированныйМассив(ДанныеВыбора.ВыгрузитьЗначения()));
		КонецЕсли;
	
		ОтборВладельцаПодчиненныхСправочников.Вставить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры", Ложь);
		ОтборВладельцаПодчиненныхСправочников.Вставить("ИспользоватьСерии", Истина);
	ИначеЕсли ИмяРеквизитаВладелец = "ВладелецТоварныхКатегорий" Тогда
		
		Если ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			Или ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
			ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		Иначе
			ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
			ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
			ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		КонецЕсли;

		
		ОтборВладельцаПодчиненныхСправочников.Вставить("ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры", Ложь);
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Получение отбора владельца подчиненных справочников для реквизита %1 не определено'"), ИмяРеквизитаВладелец);
	КонецЕсли;
	
	Если ТипыНоменклатуры.Количество() > 0 Тогда
		ОтборВладельцаПодчиненныхСправочников.Вставить("ТипНоменклатуры", Новый ФиксированныйМассив(ТипыНоменклатуры));
	КонецЕсли;
	
	Возврат ОтборВладельцаПодчиненныхСправочников;
	
КонецФункции

// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 
Функция ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик()
	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик = Новый Массив;
	
	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме);
	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Партнером);
	
	НоменклатураЛокализация.ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик(ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик);
	
	Возврат ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик;
	
КонецФункции

Функция ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий()
	
	ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий = Новый Массив;
	
	ОписанияИспользованияРеквизитовСерии = Справочники.ВидыНоменклатуры.ОписанияИспользованияРеквизитовСерии();
	
	Для Каждого Описания из ОписанияИспользованияРеквизитовСерии Цикл
		
		Если Не ПустаяСтрока(Описания.ОсобенностиУчета) Тогда
			
			ИменаОсобенностей = СтрРазделить(Описания.ОсобенностиУчета, ",");
			
			Для Каждого ИмяОсобенности из ИменаОсобенностей Цикл
				
				ЗначениеПеречисления = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры." + ИмяОсобенности);
				
				Если ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий.Найти(ЗначениеПеречисления) = Неопределено Тогда
					ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий.Добавить(ЗначениеПеречисления);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсобенностиУчетаОтКоторыхЗависятРеквизитыСерий;
	
КонецФункции

// Определяет, есть ли вид, для которого серии одинаково учитываются на всех складах по политике, для которой нужна
// ордерная схема.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВидНоменклатурыТребующийОбязательностиОрдернойСхемыПоИзлишкамНедостачам(Склад) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО ВидыНоменклатуры.Ссылка = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|			И (ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад)
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И ВидыНоменклатуры.ИспользоватьСерии
	|	И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				И ВидыНоменклатуры.ПолитикаУчетаСерий <> ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.СерииНеИспользуются)
	|				И (ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриОтраженииНедостач
	|					ИЛИ ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишков)
	|			ИЛИ НЕ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|				И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий <> ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.СерииНеИспользуются)
	|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииНедостач
	|					ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишков))";
	
	Запрос.УстановитьПараметр("Склад", Склад); 
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, Таблица, Знач Метаданные = Неопределено, ЭтоТаблицаСерий = Ложь) Экспорт
	
	Если Метаданные = Неопределено Тогда
		Метаданные = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		МетаданныеРеквизитовТЧТовары = Метаданные.Реквизиты;
	Иначе
		МетаданныеРеквизитовТЧТовары = Метаданные.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты;
	КонецЕсли;	
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
			Таблица.Колонки.Добавить(СтрМас,МетаданныеРеквизитовТЧТовары[СтрМас].Тип);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТаблицаСерий Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
			Таблица.Колонки.Добавить(СтрМас,МетаданныеРеквизитовТЧТовары[СтрМас].Тип);
		КонецЕсли;
	КонецЦикла;

	Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
		Если Таблица.Колонки.Найти("Отменено") = Неопределено Тогда
			Таблица.Колонки.Добавить("Отменено",Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если Таблица.Колонки.Найти("ВариантОбеспечения") = Неопределено Тогда
			Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Если Таблица.Колонки.Найти("СтатусУказанияСерий") = Неопределено Тогда
			Таблица.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		КонецЕсли;
	Иначе
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
				Таблица.Колонки.Добавить(СтрМас,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСерииВТЧПоТаблицеСерий(Объект, ПараметрыУказанияСерий, Серии, Действия) Экспорт
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	
	СвернутаяТаблицаТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика"+ТекстПоляСвязи); // ТаблицаЗначений
	СвернутаяТаблицаТоваров.Свернуть("Номенклатура,Характеристика"+ТекстПоляСвязи);
	
	Для Каждого СтрТабл Из СвернутаяТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрТабл);
		
		НайденныеСтрокиСерий = Серии.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиСерий.Количество() > 0 Тогда
			
			НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска); // Массив из СтрокаТабличнойЧасти
			НомерПервойУдаляемойСтроки = 0;
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				
				Если НомерПервойУдаляемойСтроки = 0 Тогда
					НомерПервойУдаляемойСтроки = СтрМас.НомерСтроки;
				КонецЕсли;
				
				Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Удалить(СтрМас);	
				
			КонецЦикла;
			
			Индекс = 0;
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если НомерПервойУдаляемойСтроки = 0 Тогда
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Добавить();
				Иначе
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Вставить(НомерПервойУдаляемойСтроки - 1 + Индекс);
					Индекс = Индекс + 1;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
				Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") = Неопределено Тогда 
					НоваяСтрока.КоличествоУпаковок = СтрМас.Количество;
				КонецЕсли;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, Неопределено);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

// Возвращает значение константы
//
// Параметры:
//  ТипИзмеряемойВеличиныСтрока	 - Строка - тип измеряемой величины строкой.
// 
// Возвращаемое значение:
//   СправочникСсылка.УпаковкиЕдиницыИзмерения 
//
Функция ЕдиницаИзмеренияПоУмолчанию(ТипИзмеряемойВеличиныСтрока) Экспорт
	
	Если ТипИзмеряемойВеличиныСтрока = "Вес" Тогда
		Значение = Константы.ЕдиницаИзмеренияВеса.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Объем" Тогда
		Значение = Константы.ЕдиницаИзмеренияОбъема.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Площадь" Тогда
		Значение = Константы.ЕдиницаИзмеренияПлощади.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Длина" Тогда 
		Значение = Константы.ЕдиницаИзмеренияДлины.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Штука" Тогда 
		Значение = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Розлив" Тогда 
		Значение = Константы.ЕдиницаИзмеренияРазливнойПродукции.Получить();
	Иначе
		Значение = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Процедура ЗаполнитьСерииПоFEFOВТЧСерии(Объект, ПараметрыУказанияСерий)
	
	Если ПараметрыУказанияСерий.ИмяПоляПомещение <> Неопределено Тогда
		// Если серии по FEFO заполняется в ТЧ "Серии", то помещения в документе не может быть.
		ТекстИсключения = НСтр("ru = 'Ошибка заполнения серий по FEFO. Есть складское помещение.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
    
    СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено;
    
	ТекстЗапроса = ТекстЗапросаДляЗаполненияСерийПОFEFO(ПараметрыУказанияСерий);
	
	КлючевыеПоля = "Номенклатура,Характеристика";
    ПоляСвязиВТекстЗапроса = "";
    Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
        КлючевыеПоля = КлючевыеПоля + "," + ПолеСвязи;
        ПоляСвязиВТекстЗапроса = ПоляСвязиВТекстЗапроса + "
        |ДанныеДокумента." + ПолеСвязи + ",";
    КонецЦикла;
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.ПоляСвязи,", ПоляСвязиВТекстЗапроса);
    
	Если ПараметрыУказанияСерий.ЭтоНакладная
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		ИмяПоляСклад = "СкладОтправитель";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Назначение КАК Назначение", "ДанныеДокумента.НазначениеОтправителя КАК Назначение");
	ИначеЕсли ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПередачаТоваровХранителю" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Назначение КАК Назначение", "ДанныеДокумента.НазначениеОтправителя КАК Назначение");
    Иначе
        ИмяПоляСклад = ПараметрыУказанияСерий.ИмяПоляСклад;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
   	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    
    Если Не СкладыВТЧ Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Склад", "&Склад");
        Запрос.УстановитьПараметр("Склад",Объект[ИмяПоляСклад]);
    КонецЕсли;
    
    Запрос.Текст = ТекстЗапроса;
	ТаблицаСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаСерий", ТаблицаСерий);
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ТаблицаТоваровПодмена = ТаблицаСерий.СкопироватьКолонки(); // ТаблицаЗначений
		ТаблицаТоваровПодмена.Очистить();
		ТаблицаТоваровПодмена.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		ЗаполнитьЗначенияСвойств(ТаблицаТоваровПодмена.Добавить(),Объект);
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровПодмена);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    
    РезультатЗапроса = Запрос.ВыполнитьПакет();
    
    Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(РезультатЗапроса[5].Выгрузить()); //Серии, которые не надо менять
    
    Выборка = РезультатЗапроса[4].Выбрать();
    СтруктураКоличества = Новый Структура("Количество,КоличествоУпаковок");
	ОстаткиПоСтрокамТоваров = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Характеристика") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
					ОстатокПоСерии = Выборка.СвободныйОстаток;
					КэшКлючевыхПолей = Новый Структура(КлючевыеПоля);
					Пока Выборка.Следующий() Цикл // Обход строк товаров
						Если ПараметрыУказанияСерий.ТоварВШапке Тогда
							ТекСтрока = Объект;
						Иначе
							ТекСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][Выборка.НомерСтроки - 1];
						КонецЕсли;
						Если ОстаткиПоСтрокамТоваров[Выборка.НомерСтроки] = Неопределено Тогда
							ОстатокПоТовару = ТекСтрока.Количество;
						Иначе
							ОстатокПоТовару = ОстаткиПоСтрокамТоваров[Выборка.НомерСтроки];
						КонецЕсли;
						
						Если ОстатокПоТовару = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекСтрока,КэшКлючевыхПолей,КлючевыеПоля) Тогда
							ЗаполнитьЗначенияСвойств(КэшКлючевыхПолей,ТекСтрока);
							// Выборка упорядочена по ключевым полям,
							// поэтому изменение ключевых полей говорит нужно добавить новую строку серий.
							НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока,,"Количество");
						НоваяСтрока.Серия = Выборка.Серия;
						ДобавляемоеКоличество = Мин(ОстатокПоТовару,ОстатокПоСерии);
						СтруктураКоличества.Количество         = НоваяСтрока.Количество + ДобавляемоеКоличество;
						СтруктураКоличества.КоличествоУпаковок = СтруктураКоличества.Количество;
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураКоличества); 
						
						ОстатокПоТовару = ОстатокПоТовару - ДобавляемоеКоличество;
						ОстаткиПоСтрокамТоваров.Вставить(Выборка.НомерСтроки,ОстатокПоТовару);
						
						Если ОстатокПоТовару = 0 Тогда
							ТекСтрока.СтатусУказанияСерий = 6;
							
							Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
								НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
										ТекСтрока[ИмяПоляСтатус],
										Истина,
										ДобавляемоеКоличество);
							КонецЦикла;

						КонецЕсли;
						ОстатокПоСерии = ОстатокПоСерии - ДобавляемоеКоличество;
						Если ОстатокПоСерии = 0 Тогда
							Прервать;
						КонецЕсли;
						ОстаткиПоСтрокамТоваров.Вставить(Выборка.НомерСтроки, ОстатокПоТовару)
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаТоваровПодмена[0],Объект);
		ТЧТовары = ТаблицаТоваровПодмена;
	Иначе
		ТЧТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары];
	КонецЕсли;
	НайденныеТовары = ТЧТовары.НайтиСтроки(Новый Структура("СтатусУказанияСерий",5)); // Массив из СтрокаТабличнойЧасти
	Если НайденныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляСклад = ПараметрыУказанияСерий.ИмяПоляСклад;
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ИмяПоляСклад) <> Неопределено;
    
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура";
	
	ЕдиницыИзмерения = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из НайденныеТовары Цикл
		
		Если СкладыВТЧ Тогда
			ТекущийСклад = Стр.Склад;
		Иначе
			ТекущийСклад = Объект[ИмяПоляСклад];
		КонецЕсли;
		ЭтоПодразделение = (ТипЗнч(ТекущийСклад) = Тип("СправочникСсылка.СтруктураПредприятия"));
		
		КоличествоНеРаспределено = 0;
		Если Стр.Количество = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии не заполнены. В табличной части ""Товары"" не указано количество.""'");
			
		ИначеЕсли ОстаткиПоСтрокамТоваров[Стр.НомерСтроки] = Неопределено Тогда 
			
			Если ЭтоПодразделение Тогда
				ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии не заполнены.
					|В подразделении ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии не заполнены.
					|На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			КонецЕсли; 

			КоличествоНеРаспределено = Стр.Количество;
			
		Иначе
			
			Если ЭтоПодразделение Тогда
				ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии заполнены не полностью.
					|В подразделении ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии заполнены не полностью.
					|На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			КонецЕсли; 
			КоличествоНеРаспределено = ОстаткиПоСтрокамТоваров[Стр.НомерСтроки];
			
		КонецЕсли;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеТовара%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Стр.Номенклатура, Стр.Характеристика));
		
		Если СкладыВТЧ Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(ТекущийСклад));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(Объект[ИмяПоляСклад]));
		КонецЕсли;
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Количество%", КоличествоНеРаспределено);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЕдиницаИзмерения%",ЕдиницыИзмерения.Найти(Стр.Номенклатура,"Номенклатура").ЕдиницаИзмерения);
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			Поле = "Номенклатура";
		Иначе
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Стр.НомерСтроки, "Номенклатура");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСерииПоFEFOВТЧТовары(Объект, ПараметрыУказанияСерий)
    
	Если Не (
			ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
			Или ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ОрдерНаПеремещениеТоваров"
			)Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка заполнения серий по FEFO. Процедура заполнения не поддерживает данный документ.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	
		Если ПараметрыУказанияСерий.ИмяПоляПомещение <> Неопределено Тогда
			Помещение = Объект[ПараметрыУказанияСерий.ИмяПоляПомещение];
		Иначе
			Помещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Помещение", Помещение);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Данные = ДанныеДляЗаполненияСерийПоFEFOВОрдере(Объект, ПараметрыУказанияСерий, Запрос);
	
	ВыборкаНомераСтрок = Данные.ВыборкаНомераСтрок;
	СоответствиеОстатки = Данные.СоответствиеОстатки;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
		И ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		СтруктураПересчетаКоличестваУпаковок = Новый Структура("ПересчитатьКоличествоУпаковок, ПересчитатьВесОбъем");
		
	Иначе
		СтруктураПересчетаКоличестваУпаковок = Новый Структура("ПересчитатьКоличествоУпаковок");
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Пока ВыборкаНомераСтрок.Следующий() Цикл
		
		СтрокаТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][ВыборкаНомераСтрок.НомерСтроки + НомерСтроки - 1];
		
		ОстатокТовара = СтрокаТоваров.Количество;
		
		ИзменяемаяСтрока = СтрокаТоваров; // СтрокаТабличнойЧасти
		
			ОстаткиСерийПоТовару = ОстаткиСерийПоТоваруОрдера(СтрокаТоваров, СоответствиеОстатки);
		
		Если ОстаткиСерийПоТовару = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтруктураОстаток Из ОстаткиСерийПоТовару Цикл
			Если СтруктураОстаток.СвободныйОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			КоличествоВСтроку = Мин(ОстатокТовара, СтруктураОстаток.СвободныйОстаток);
			
			ИзменяемаяСтрока.Количество = КоличествоВСтроку;
			ИзменяемаяСтрока.Серия = СтруктураОстаток.Серия;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИзменяемаяСтрока, СтруктураПересчетаКоличестваУпаковок, КэшированныеЗначения);
			
			ОстатокТовара = ОстатокТовара - ИзменяемаяСтрока.Количество;
			СтруктураОстаток.СвободныйОстаток = СтруктураОстаток.СвободныйОстаток - ИзменяемаяСтрока.Количество;
			
			Если ОстатокТовара > 0 Тогда
				НомерСтроки = НомерСтроки + 1;
				ИзменяемаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Вставить(ИзменяемаяСтрока.НомерСтроки);
				
				ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтрокаТоваров,,"Количество,КоличествоУпаковок,Серия");
				ИзменяемаяСтрока.Количество = ОстатокТовара;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИзменяемаяСтрока, СтруктураПересчетаКоличестваУпаковок, КэшированныеЗначения);
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Запрос = Новый Запрос;
	
		Запрос.Текст = ТекстЗапросаПроверкаЗаполненияСерийПоFEFOВОрдере(Объект, ПараметрыУказанияСерий);
		Запрос.УстановитьПараметр("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	
	ВыборкаНезаполненные = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНезаполненные.Следующий() Цикл
		
		КоличествоНеРаспределено = 0;
		Если ВыборкаНезаполненные.ЭтоТоварноеМесто Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% для товара ""%ПредставлениеТовара%"" серии не заполнены, т.к. указана упаковка - товарное место. Заполнение серий FEFO по товарным местам не поддерживается.'");
			
		ИначеЕсли ВыборкаНезаполненные.Количество = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% для товара ""%ПредставлениеТовара%"" серии не заполнены, т.к. не указано количество товаров.'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% для товара ""%ПредставлениеТовара%"" серии не заполнены. На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			КоличествоНеРаспределено = ВыборкаНезаполненные.Количество;
			
		КонецЕсли;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%", ВыборкаНезаполненные.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеТовара%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ВыборкаНезаполненные.Номенклатура, ВыборкаНезаполненные.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаНезаполненные.Склад,Помещение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Количество%", КоличествоНеРаспределено);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЕдиницаИзмерения%",ВыборкаНезаполненные.ЕдиницаИзмерения);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, ВыборкаНезаполненные.НомерСтроки, "Серия");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляЗаполненияСерийПоFEFOВОрдере(Объект, ПараметрыУказанияСерий, Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтатусУказанияСерий В (5, 6)
	|	И (ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)
	|			ИЛИ &УсловиеЕслиНеИспользуютсяСтатусы)
	|	И ДанныеДокумента.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Назначение
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ЕСТЬNULL(Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки
	|ИЗ
	|	ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ЕСТЬNULL(Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииТоваров.Номенклатура КАК Номенклатура,
	|	СерииТоваров.Характеристика КАК Характеристика,
	|	СерииТоваров.Назначение КАК Назначение,
	|	СерииТоваров.Серия КАК Серия,
	|	СУММА(СерииТоваров.СвободныйОстаток) КАК СвободныйОстаток,
	|	СерииТоваров.Серия.ГоденДо КАК ГоденДо,
	|	СерииТоваров.Серия.Номер КАК Номер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(Номенклатура, Характеристика, Назначение, Склад, Помещение) В
	|					(ВЫБРАТЬ
	|						ТаблицаТоваровДляЗапроса.Номенклатура,
	|						ТаблицаТоваровДляЗапроса.Характеристика,
	|						ТаблицаТоваровДляЗапроса.Назначение,
	|						&Склад,
	|						&Помещение
	|					ИЗ
	|						ТаблицаТоваровДляЗапроса)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладах.Номенклатура,
	|		ТоварыНаСкладах.Характеристика,
	|		ТоварыНаСкладах.Серия,
	|		ТоварыНаСкладах.Назначение,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыНаСкладах.ВНаличии + ТоварыНаСкладах.КОтгрузке
	|			ИНАЧЕ ТоварыНаСкладах.ВНаличии - ТоварыНаСкладах.КОтгрузке
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваров
	|			ПО ТоварыНаСкладах.Номенклатура = ТаблицаТоваров.Номенклатура
	|				И ТоварыНаСкладах.Характеристика = ТаблицаТоваров.Характеристика
	|				И ТоварыНаСкладах.Назначение = ТаблицаТоваров.Назначение
	|				И (ТоварыНаСкладах.Регистратор = &Ссылка)) КАК СерииТоваров
	|ГДЕ
	|	СерииТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииТоваров.Номенклатура,
	|	СерииТоваров.Характеристика,
	|	СерииТоваров.Назначение,
	|	СерииТоваров.Серия,
	|	СерииТоваров.Серия.ГоденДо,
	|	СерииТоваров.Серия.Номер
	|
	|ИМЕЮЩИЕ
	|	СУММА(СерииТоваров.СвободныйОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	ГоденДо,
	|	Номер,
	|	Серия";
	
	ИспользоватьСтатусыРасходныхОрдеров = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", Новый Структура("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]));
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
		И Не ИспользоватьСтатусыРасходныхОрдеров Тогда
		
		УсловиеЕслиНеИспользуютсяСтатусы = 
		" (НЕ ДанныеДокумента.ЭтоУпаковочныйЛист
		| И ДанныеДокумента.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		| И ДанныеДокумента.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЕслиНеИспользуютсяСтатусы", УсловиеЕслиНеИспользуютсяСтатусы);
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЕслиНеИспользуютсяСтатусы", "ЛОЖЬ");
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[2]; // РезультатЗапроса
	
	ВыборкаНомераСтрок = РезультатЗапроса.Выбрать();
	
	СоответствиеОстатки = Новый Соответствие;
	
	РезультатЗапроса = МассивРезультатов[3]; // РезультатЗапроса
	ВыборкаОстатки = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Номенклатура") Цикл
		СоответствиеОстатки.Вставить(ВыборкаОстатки.Номенклатура, Новый Соответствие);
		СоответствиеНоменклатура = СоответствиеОстатки[ВыборкаОстатки.Номенклатура];
		Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Характеристика") Цикл
			СоответствиеНоменклатура.Вставить(ВыборкаОстатки.Характеристика, Новый Соответствие);
			СоответствиеХарактеристика = СоответствиеНоменклатура[ВыборкаОстатки.Характеристика];
			Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Назначение") Цикл
				СоответствиеХарактеристика.Вставить(ВыборкаОстатки.Назначение, Новый Массив);
				МассивОстатки = СоответствиеХарактеристика[ВыборкаОстатки.Назначение]; // Массив
				Пока ВыборкаОстатки.Следующий() Цикл
					СтруктураОстаток = Новый Структура("Серия,СвободныйОстаток");
					ЗаполнитьЗначенияСвойств(СтруктураОстаток,ВыборкаОстатки);
					МассивОстатки.Добавить(СтруктураОстаток);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("ВыборкаНомераСтрок, СоответствиеОстатки", ВыборкаНомераСтрок, СоответствиеОстатки);
	
КонецФункции

Функция ОстаткиСерийПоТоваруОрдера(СтрокаТоваров, СоответствиеОстатки)
	
	Если СоответствиеОстатки[СтрокаТоваров.Номенклатура] = Неопределено			
		Или СоответствиеОстатки[СтрокаТоваров.Номенклатура][СтрокаТоваров.Характеристика] = Неопределено
		Или СоответствиеОстатки[СтрокаТоваров.Номенклатура][СтрокаТоваров.Характеристика][СтрокаТоваров.Назначение] = Неопределено Тогда
		
		Остатки = Неопределено;
		
	Иначе
		
		Остатки = СоответствиеОстатки[СтрокаТоваров.Номенклатура][СтрокаТоваров.Характеристика][СтрокаТоваров.Назначение];
		
	КонецЕсли;
	
	Возврат Остатки;
	
КонецФункции

Функция ТекстЗапросаПроверкаЗаполненияСерийПоFEFOВОрдере(Объект, ПараметрыУказанияСерий)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Количество КАК Количество,
	|	ДанныеДокумента.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтатусУказанияСерий = 5
	|	И (ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)
	|			ИЛИ &УсловиеЕслиНеИспользуютсяСтатусы)
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	&Склад КАК Склад,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЭтоТоварноеМесто
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	ИспользоватьСтатусыРасходныхОрдеров = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", Новый Структура("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]));
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
		И Не ИспользоватьСтатусыРасходныхОрдеров Тогда
		
		УсловиеЕслиНеИспользуютсяСтатусы = 
		" (НЕ ДанныеДокумента.ЭтоУпаковочныйЛист
		| И ДанныеДокумента.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		| И ДанныеДокумента.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЕслиНеИспользуютсяСтатусы", УсловиеЕслиНеИспользуютсяСтатусы);
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЕслиНеИспользуютсяСтатусы", "ЛОЖЬ");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляЗаполненияСерийПОFEFO(ПараметрыУказанияСерий)
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.ПоляСвязи,
	|	ДанныеДокумента.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтатусУказанияСерий В (5, 6)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Серия КАК Серия,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.ПоляСвязи,
	|	ДанныеДокумента.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровДляЗапроса.Склад КАК Склад,
	|	ТаблицаТоваровДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровДляЗапроса.Характеристика КАК Характеристика,
	|	ТаблицаТоваровДляЗапроса.Назначение КАК Назначение,
	|	СУММА(ТаблицаТоваровДляЗапроса.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваровДляЗапроса
	|ГДЕ
	|	ТаблицаТоваровДляЗапроса.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровДляЗапроса.Склад,
	|	ТаблицаТоваровДляЗапроса.Номенклатура,
	|	ТаблицаТоваровДляЗапроса.Характеристика,
	|	ТаблицаТоваровДляЗапроса.Назначение";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СерииТоваров.Номенклатура КАК Номенклатура,
	|	СерииТоваров.Характеристика КАК Характеристика,
	|	СерииТоваров.Назначение,
	|	СерииТоваров.Склад,
	|	СерииТоваров.Серия,
	|	СУММА(СерииТоваров.СвободныйОстаток) КАК СвободныйОстаток,
	|	СерииТоваров.Серия.ГоденДо КАК ГоденДо,
	|	СерииТоваров.Серия.Номер КАК Номер
	|ПОМЕСТИТЬ ТаблицаОстатковПоСериям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.Склад КАК Склад,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(Номенклатура, Характеристика, Назначение, Склад) В
	|					(ВЫБРАТЬ
	|						ТаблицаТоваровДляЗапроса.Номенклатура,
	|						ТаблицаТоваровДляЗапроса.Характеристика,
	|						ТаблицаТоваровДляЗапроса.Назначение,
	|						ТаблицаТоваровДляЗапроса.Склад
	|					ИЗ
	|						ТаблицаТоваровДляЗапроса)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладах.Номенклатура,
	|		ТоварыНаСкладах.Характеристика,
	|		ТоварыНаСкладах.Серия,
	|		ТоварыНаСкладах.Назначение,
	|		ТоварыНаСкладах.Склад,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыНаСкладах.ВНаличии + ТоварыНаСкладах.КОтгрузке
	|			ИНАЧЕ ТоварыНаСкладах.ВНаличии - ТоварыНаСкладах.КОтгрузке
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ПО ТоварыНаСкладах.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|				И ТоварыНаСкладах.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика
	|				И ТоварыНаСкладах.Назначение = ТаблицаТоваровДляЗапроса.Назначение
	|				И ТоварыНаСкладах.Склад = ТаблицаТоваровДляЗапроса.Склад
	|				И (ТоварыНаСкладах.Регистратор = &Ссылка)
	|	) КАК СерииТоваров
	|ГДЕ
	|	СерииТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииТоваров.Номенклатура,
	|	СерииТоваров.Характеристика,
	|	СерииТоваров.Назначение,
	|	СерииТоваров.Склад,
	|	СерииТоваров.Серия,
	|	СерииТоваров.Серия.ГоденДо,
	|	СерииТоваров.Серия.Номер
	|
	|ИМЕЮЩИЕ
	|	СУММА(СерииТоваров.СвободныйОстаток) > 0";
	
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Склад,
	|	ДанныеДокумента.НомерСтроки,
	|	ТаблицаОстатковПоСериям.Серия КАК Серия,
	|	ЕСТЬNULL(ТаблицаОстатковПоСериям.СвободныйОстаток, 0) КАК СвободныйОстаток
	|ИЗ
	|	ТаблицаОстатковПоСериям КАК ТаблицаОстатковПоСериям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ДанныеДокумента
	|		ПО (ДанныеДокумента.Номенклатура = ТаблицаОстатковПоСериям.Номенклатура)
	|			И (ДанныеДокумента.Характеристика = ТаблицаОстатковПоСериям.Характеристика)
	|			И (ДанныеДокумента.Назначение = ТаблицаОстатковПоСериям.Назначение)
	|			И (ДанныеДокумента.Склад = ТаблицаОстатковПоСериям.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Склад,
	|	ТаблицаОстатковПоСериям.ГоденДо,
	|	ТаблицаОстатковПоСериям.Номер,
	|	ТаблицаОстатковПоСериям.Серия,
	|	ДанныеДокумента.ПоляСвязи,
	|	ДанныеДокумента.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ПоляСвязи,
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Серия,
	|	ДанныеДокумента.Количество
	|ИЗ
	|	ТаблицаСерий КАК ДанныеДокумента
	|ГДЕ
	|	НЕ (ДанныеДокумента.Номенклатура, ДанныеДокумента.Склад) В
	|				(ВЫБРАТЬ
	|					ТаблицаТоваров.Номенклатура,
	|					ТаблицаТоваров.Склад
	|				ИЗ
	|					ТаблицаТоваров)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
// 	ТаблицаТовары - ТаблицаЗначений - 
// 	ДокументОбъект - ДокументОбъект - 
// 	ЗаполнятьПоОтрицательнымОстаткам - Булево - 
// 
// Возвращаемое значение:
//  Структура - Заполнить серии по данным товаров у партнеров:
// * ТаблицаТовары - ТаблицаЗначений -
// * ЕстьИзменения - Булево -
// * КоличествоИзначальноВерное - Булево -
Функция ЗаполнитьСерииПоДаннымТоваровУПартнеров(ТаблицаТовары, ДокументОбъект, ЗаполнятьПоОтрицательнымОстаткам) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура   КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Назначение     КАК Назначение,
	|	&Партнер                        КАК Партнер,
	|	&Контрагент                     КАК Контрагент,
	|	&Договор                        КАК Договор,
	|	&Ссылка                         КАК Ссылка,
	|	&Организация                    КАК Организация
	|ПОМЕСТИТЬ ВТЗагруженнаяТаблица
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаДокумента
	|;
	|
	|ВЫБРАТЬ
	|	КлючиАналитики.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка      КАК Ссылка
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	ВТЗагруженнаяТаблица КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитики
	|		ПО КлючиАналитики.Номенклатура = ТаблицаДокумента.Номенклатура
	|		И КлючиАналитики.Характеристика = ТаблицаДокумента.Характеристика
	|		И КлючиАналитики.Назначение = ТаблицаДокумента.Назначение
	|		И КлючиАналитики.МестоХранения = &Договор
	|		И КлючиАналитики.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КлючиАналитики.КлючАналитики,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючиАналитики.КлючАналитики,
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры                КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Назначение     КАК Назначение,
	|	СУММА(ТаблицаОстатков.КоличествоПоДаннымПартнера)         КАК КоличествоПоДаннымПартнера
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		&ТоварыОрганизацийОстаткиКоличествоОстаток            КАК КоличествоПоДаннымПартнера
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(
	|				,
	|				(АналитикаУчетаНоменклатуры, Организация) В
	|					(ВЫБРАТЬ
	|						ТаблицаДокумента.АналитикаУчетаНоменклатуры,
	|						ТаблицаДокумента.Организация
	|					ИЗ
	|						ВТТаблицаДокумента КАК ТаблицаДокумента)) КАК ТоварыОрганизацийОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СторноРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		СторноРегистра.Количество                 КАК КоличествоПоДаннымПартнера
	|	ИЗ
	|		ВТТаблицаДокумента КАК ТаблицаДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК СторноРегистра
	|			ПО СторноРегистра.Регистратор = ТаблицаДокумента.Ссылка
	|				И СторноРегистра.АналитикаУчетаНоменклатуры = ТаблицаДокумента.АналитикаУчетаНоменклатуры
	|				И СторноРегистра.Организация = ТаблицаДокумента.Организация
	|	ГДЕ
	|		СторноРегистра.Активность
	|		И &ВидДвижения
	|		И НЕ СторноРегистра.Регистратор ЕСТЬ NULL
	|	) КАК ТаблицаОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОстатков.КоличествоПоДаннымПартнера) > 0";
	
	Если ЗаполнятьПоОтрицательнымОстаткам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", "СторноРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыОрганизацийОстаткиКоличествоОстаток", "-ТоварыОрганизацийОстатки.КоличествоОстаток");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", "СторноРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыОрганизацийОстаткиКоличествоОстаток", "ТоварыОрганизацийОстатки.КоличествоОстаток");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ИзначальнаяТаблица = ТаблицаТовары.Скопировать();
	ТаблицаТовары.Колонки.Добавить("КоличествоПоДаннымПартнера", Новый ОписаниеТипов("Число"));
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Назначение");
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Партнер",       ДокументОбъект.Партнер);
	Запрос.УстановитьПараметр("Контрагент",    ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Договор",       ДокументОбъект.Договор);
	Запрос.УстановитьПараметр("Организация",   ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Ссылка",        ДокументОбъект.Ссылка);
	
	ТаблицаТоварыУПартнеров = Запрос.Выполнить().Выгрузить();
	
	// Выполняется распределение полученной таблицы на таблицу товары. При этом строка ТаблицаТовары может быть
	// разбита на несколько, если ей соответствует несколько строк в ТаблицаТоварыУПартнеров.
	
	Ключ = "Номенклатура, Характеристика, Назначение";
	
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличествоИЗаполнить(ТаблицаТоварыУПартнеров, ТаблицаТовары, "КоличествоПоДаннымПартнера", Ключ, Условие, Ложь, "Серия");
	
	// Заполнение количества по данным партнера - обработка ситуации, когда по данным партнера меньше серий,
	// чем указано количество в текущем документе. Количество на которое не хватило серий необходимо сохранить "как есть".
	КоличествоСтрок = ТаблицаТовары.Количество() - 1;
	Для Индекс = 0 По КоличествоСтрок Цикл
		Строка = ТаблицаТовары[КоличествоСтрок - Индекс];
		Если Строка.Количество > Строка.КоличествоПоДаннымПартнера
			И Строка.КоличествоПоДаннымПартнера > 0
			И ЗначениеЗаполнено(Строка.Серия) Тогда
			// Требуется разбить строку, если серия заполнена. Иначе - оставляем как есть.
			
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			КоличествоБезСерии = Строка.Количество - Строка.КоличествоПоДаннымПартнера;
			
			Строка.Количество = Строка.КоличествоПоДаннымПартнера;
			НоваяСтрока.Количество = КоличествоБезСерии;
			НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			
		ИначеЕсли Строка.КоличествоПоДаннымПартнера > 0 Тогда
			// Количество не отличается, либо меньше чем по данным партнера
			Строка.Количество = Строка.КоличествоПоДаннымПартнера;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьИзменения = Ложь;
	КоличествоИзначальноВерное = Ложь;
	
	Если ИзначальнаяТаблица.Количество() <> ТаблицаТовары.Количество() Тогда
		ЕстьИзменения = Истина;
	Иначе
		КоличествоИзначальноВерное = Истина;
		Для Индекс = 0 По ИзначальнаяТаблица.Количество() - 1 Цикл
			ИзначальнаяСтрока = ИзначальнаяТаблица[Индекс];
			ИзмененнаяСтрока = ТаблицаТовары[Индекс];
			
			// Расчет признака только для строк с сериями
			Если ИзмененнаяСтрока.СтатусУказанияСерий > 0
				И ИзмененнаяСтрока.Количество <> ИзмененнаяСтрока.КоличествоПоДаннымПартнера Тогда
				КоличествоИзначальноВерное = Ложь;
			КонецЕсли;
			
			Если ИзначальнаяСтрока.Серия <> ИзмененнаяСтрока.Серия Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТаблицаТовары",              ТаблицаТовары);
	СтруктураВозврата.Вставить("ЕстьИзменения",              ЕстьИзменения);
	СтруктураВозврата.Вставить("КоличествоИзначальноВерное", КоличествоИзначальноВерное);
	
	Возврат СтруктураВозврата;
	
КонецФункции


// Добавляет колонки в таблицу.
//
// Параметры:
//	ТаблицаТоваров - ТаблицаЗначений - таблица товаров.
//	ИмяРеквизита - Строка, Массив Из Строка - имя добавляемой колонки в таблицу.
//	ТипРеквизита - ОписаниеТипов - описание типа добавляемой колонки.
//
Процедура ДобавитьКолонкуВТаблицуТоваров(ТаблицаТоваров, ИмяРеквизита, ТипРеквизита)
	
	Если ТипЗнч(ИмяРеквизита) = Тип("Массив") Тогда
		Для Каждого Имя Из ИмяРеквизита Цикл
			ТаблицаТоваров.Колонки.Добавить(Имя, ТипРеквизита);
		КонецЦикла;
	Иначе
		ТаблицаТоваров.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника УпаковкиЕдиницыИзмерения.
//
// Параметры:
// 	ДанныеВыбора - СписокЗначений - 
// 	Параметры - Структура - может содержать:
// 		* ВыборРодителя - Булево
// 		* Ссылка - СправочникСсылка.УпаковкиЕдиницыИзмерения - обязателен в том случае, если заполнено свойство ВыборРодителя
// 		* Отбор - Отбор - обязателен в том случае, если заполнено свойство ВыборРодителя
// 		* Номенклатура - СправочникСсылка.Номенклатура
// 		* Склад - СправочникСсылка.Склады
// 		* ВсегдаВыбиратьЕдиницуИзмерения - Булево
// 		* ПоказыватьМерныеЕдиницыИзмерения - Булево
// 		* ПоказыватьТоварныеМеста - Булево
// 		* ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин
// 	СтандартнаяОбработка - Булево
// 
Процедура УпаковкиЕдиницыИзмеренияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;

	Если Параметры.Свойство("ВыборРодителя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	УпаковкиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
		|	ПРЕДСТАВЛЕНИЕ(УпаковкиНоменклатуры.Ссылка) КАК УпаковкаПредставление
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	&УсловиеПоСтрокеПоиска
		|	И УпаковкиНоменклатуры.Ссылка <> &Ссылка
		|	И УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|	И УпаковкиНоменклатуры.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкиНоменклатуры.Наименование";
		НеИспользуютсяДопЯзыки = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
		УсловиеПоСтрокеПоиска=?(
			НеИспользуютсяДопЯзыки,
			"УпаковкиНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""",
			"(УпаковкиНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
			|	ИЛИ УпаковкиНоменклатуры.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
			|	ИЛИ УпаковкиНоменклатуры.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~"")");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"&УсловиеПоСтрокеПоиска",
					?(Параметры.СтрокаПоиска = Неопределено, "ИСТИНА", УсловиеПоСтрокеПоиска));
		Если Параметры.СтрокаПоиска <> Неопределено Тогда
			Запрос.УстановитьПараметр("СтрокаПоиска", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска) + "%");
		КонецЕсли;
		Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);
		Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗначениеСписка = Новый Структура;
			ЗначениеСписка.Вставить("Значение", Выборка.Упаковка);
			ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(ЗначениеСписка, Выборка.УпаковкаПредставление);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Параметры.Свойство("Номенклатура")
		И Не (Параметры.Свойство("ВсегдаВыбиратьЕдиницуИзмерения") И Не ЗначениеЗаполнено(Параметры.Номенклатура)) Тогда 
		
		Номенклатура = Параметры.Номенклатура;
				
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Склад = Неопределено;
		Помещение = Неопределено;
		Параметры.Свойство("Номенклатура", Номенклатура);
		Если Параметры.Свойство("Склад",Склад) Тогда
			Параметры.Свойство("Помещение",Помещение);
			ДобавлятьЕдиницуХранения = Не СкладыСервер.ИспользоватьАдресноеХранение(Склад,Помещение)
		Иначе
			ДобавлятьЕдиницуХранения = Истина;
		КонецЕсли;
		
		ПоказыватьМерныеЕдиницыИзмерения = Неопределено;
		Если Не Параметры.Свойство("ПоказыватьМерныеЕдиницыИзмерения", ПоказыватьМерныеЕдиницыИзмерения) Тогда
			ПоказыватьМерныеЕдиницыИзмерения = Истина;
		КонецЕсли;
		
		ПоказыватьТоварныеМеста = Неопределено;
		Если Не Параметры.Свойство("ПоказыватьТоварныеМеста", ПоказыватьТоварныеМеста) Тогда
			ПоказыватьТоварныеМеста = Ложь;
		КонецЕсли;
		
		ЗаполнитьДанныеВыбораУпаковками(Номенклатура,
			ДанныеВыбора,
			Параметры,
			ПоказыватьМерныеЕдиницыИзмерения,
			ДобавлятьЕдиницуХранения,
			ПоказыватьТоварныеМеста);
		
		СтандартнаяОбработка = Ложь;
		
	Иначе
		
		ТипИзмеряемойВеличины = Неопределено;
		
		Если Не Параметры.Свойство("Отбор") 
			Или Не Параметры.Отбор.Свойство("ТипИзмеряемойВеличины",ТипИзмеряемойВеличины)
				И Не Параметры.Свойство("ТипИзмеряемойВеличины",ТипИзмеряемойВеличины) Тогда
			
			Если Не Параметры.Свойство("Отбор") Тогда
				Параметры.Вставить("Отбор", Новый Структура);
			КонецЕсли;
			МассивТиповЕдиниц = Новый Массив;
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Мощность);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Энергия);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Время);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.ПустаяСсылка());
			Параметры.Отбор.Вставить("ТипИзмеряемойВеличины", МассивТиповЕдиниц);
					
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВыбораУпаковками(Номенклатура, ДанныеВыбора, Параметры, Знач ПоказыватьМерныеЕдиницыИзмерения, ДобавлятьЕдиницуХранения, ПоказыватьТоварныеМеста)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка КАК Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование КАК Наименование,
	|	ЛОЖЬ КАК ЭтоЕдиницаХранения,
	|	3 КАК Порядок,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки КАК ДопустимыйКоэффициент
	|ПОМЕСТИТЬ УпаковкиЕдиницыИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО Номенклатура.ВесИспользовать
	|			И Номенклатура.ВесМожноУказыватьВДокументах
	|			И УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И (&ПоказыватьМерныеЕдиницыИзмерения
	|		ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	4,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО Номенклатура.ОбъемИспользовать
	|			И Номенклатура.ОбъемМожноУказыватьВДокументах
	|			И УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И (&ПоказыватьМерныеЕдиницыИзмерения
	|		ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	5,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО Номенклатура.ДлинаИспользовать
	|			И Номенклатура.ДлинаМожноУказыватьВДокументах
	|			И УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И (&ПоказыватьМерныеЕдиницыИзмерения
	|		ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	6,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО Номенклатура.ПлощадьИспользовать
	|			И Номенклатура.ПлощадьМожноУказыватьВДокументах
	|			И УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И (&ПоказыватьМерныеЕдиницыИзмерения
	|		ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	7,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	8,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	9,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления,
	|	УпаковкиНоменклатуры.Наименование,
	|	ЛОЖЬ,
	|	10,
	|	&ТекстЗапросаКоэффициентУпаковки,
	|	&ТекстЗапросаДоступностьКоэффициентУпаковки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрУпаковки.Ссылка,
	|	СпрУпаковки.ПометкаУдаления,
	|	СпрУпаковки.Наименование,
	|	ЛОЖЬ,
	|	1,
	|	СпрУпаковки.Числитель / СпрУпаковки.Знаменатель,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрУпаковки.Владелец = СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СпрУпаковки.Владелец = СпрНоменклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И НЕ СпрУпаковки.ПометкаУдаления
	|	И СпрУпаковки.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрУпаковки.Ссылка,
	|	СпрУпаковки.ПометкаУдаления,
	|	СпрУпаковки.Наименование,
	|	ЛОЖЬ,
	|	1,
	|	СпрУпаковки.Числитель / СпрУпаковки.Знаменатель,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрУпаковки.Владелец = СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СпрУпаковки.Владелец = СпрНоменклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И НЕ СпрУпаковки.ПометкаУдаления
	|	И &ПоказыватьТоварныеМеста
	|	И СпрУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаИзмерения.ПометкаУдаления,
	|	Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ИСТИНА,
	|	1,
	|	1,
	|	ИСТИНА
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И (&ДобавлятьЕдиницуХранения
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
	|			ИЛИ Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.ПометкаУдаления КАК ПометкаУдаления,
	|	МАКСИМУМ(УпаковкиЕдиницыИзмерения.ЭтоЕдиницаХранения) КАК ЭтоЕдиницаХранения,
	|	УпаковкиЕдиницыИзмерения.Наименование КАК УпаковкаПредставление,
	|	МИНИМУМ(УпаковкиЕдиницыИзмерения.Порядок) КАК Порядок,
	|	УпаковкиЕдиницыИзмерения.Коэффициент,
	|	УпаковкиЕдиницыИзмерения.ДопустимыйКоэффициент
	|ИЗ
	|	УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	&УсловиеПоСтрокеПоиска
	|	И &ДополнительныеУсловияПоПараметрамВыбора
	|	И УпаковкиЕдиницыИзмерения.ДопустимыйКоэффициент
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиЕдиницыИзмерения.Ссылка,
	|	УпаковкиЕдиницыИзмерения.ПометкаУдаления,
	|	УпаковкиЕдиницыИзмерения.Наименование,
	|	УпаковкиЕдиницыИзмерения.Коэффициент,
	|	УпаковкиЕдиницыИзмерения.ДопустимыйКоэффициент
	|
	|УПОРЯДОЧИТЬ ПО
	|	МИНИМУМ(УпаковкиЕдиницыИзмерения.Порядок),
	|	УпаковкиЕдиницыИзмерения.Коэффициент УБЫВ,
	|	УпаковкиЕдиницыИзмерения.Наименование";
	
	Запрос.УстановитьПараметр("ДобавлятьЕдиницуХранения", ДобавлятьЕдиницуХранения);
	Запрос.УстановитьПараметр("ПоказыватьМерныеЕдиницыИзмерения", ПоказыватьМерныеЕдиницыИзмерения);
	Запрос.УстановитьПараметр("ПоказыватьТоварныеМеста", ПоказыватьТоварныеМеста);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&УсловиеПоСтрокеПоиска",
		?(Параметры.СтрокаПоиска = Неопределено,
			"ИСТИНА",
			" УпаковкиЕдиницыИзмерения.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~"""));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
			"УпаковкиНоменклатуры",
			"Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаДоступностьКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаДоступностьКоэффициентаДляВыбораУпаковки(
			"УпаковкиНоменклатуры",
			"Номенклатура"));
	
	УсловияПоПараметрамВыбора = "";
	Если Параметры.Свойство("ПоказыватьТолькоУпаковки")
		И Параметры.ПоказыватьТолькоУпаковки = Истина Тогда
		УсловияПоПараметрамВыбора = УсловияПоПараметрамВыбора + "УпаковкиЕдиницыИзмерения.Ссылка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)"
	КонецЕсли;

	Если Не ЗначениеЗаполнено(УсловияПоПараметрамВыбора) Тогда
		УсловияПоПараметрамВыбора = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ДополнительныеУсловияПоПараметрамВыбора",
		УсловияПоПараметрамВыбора);
	
	Если Параметры.СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска) + "%");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоЕдиницаХранения Тогда
			ДанныеВыбора.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), Выборка.УпаковкаПредставление);
		Иначе
			ЗначениеСписка = Новый Структура;
			ЗначениеСписка.Вставить("Значение", Выборка.Упаковка);
			ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			ДанныеВыбора.Добавить(ЗначениеСписка, Выборка.УпаковкаПредставление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника ХарактеристикиНоменклатуры.
//
Процедура ХарактеристикиНоменклатурыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Перем Номенклатура;
	
	Если Не Параметры.Свойство("Номенклатура", Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	
	СтрокаПоиска = Параметры.СтрокаПоиска;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрХарактеристики.Ссылка КАК Характеристика,
	|	СпрХарактеристики.ПометкаУдаления КАК ПометкаУдаления,
	|	СпрХарактеристики.Наименование КАК ХарактеристикаПредставление
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО (СпрХарактеристики.Владелец = ВЫБОР
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА СпрНоменклатура.ВидНоменклатуры
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА СпрНоменклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И ВЫБОР
	|		КОГДА &ИспользуютсяДопЯзыки = ЛОЖЬ И &СтрокаПоискаЗаполнена = ИСТИНА ТОГДА
	|			СпрХарактеристики.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|		КОГДА &ИспользуютсяДопЯзыки = ИСТИНА И &СтрокаПоискаЗаполнена = ИСТИНА ТОГДА
	|			(СпрХарактеристики.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|			ИЛИ СпрХарактеристики.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|			ИЛИ СпрХарактеристики.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~"")
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикаПредставление
	|";
	Запрос.УстановитьПараметр("ИспользуютсяДопЯзыки", МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтрокаПоискаЗаполнена", ЗначениеЗаполнено(СтрокаПоиска));	
	
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска) + "%");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	ДанныеВыбора = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеСписка = Новый Структура;
		ЗначениеСписка.Вставить("Значение", Выборка.Характеристика);
		ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
	
		ДанныеВыбора.Добавить(ЗначениеСписка, Выборка.ХарактеристикаПредставление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПроверитьОкруглениеКоличестваВнутренний(Объект, ПараметрыПроверки, ДопустимыйПроцентОтклонения)
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ИменаПолейССуффиксом = ПараметрыПроверки.ИменаПолейССуффиксом;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТЧ.Количество КАК КоличествоВДокументе,
	|	ВЫРАЗИТЬ(ТЧ.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	&ИмяПоляКоличествоУпаковокСуффикс КАК КоличествоУпаковокСуффикс,
	|	&ИмяПоляКоличествоСуффикс КАК КоличествоВДокументеСуффикс,
	|	&ДополнительныеПоля
	|ПОМЕСТИТЬ ВТДляЗапроса
	|ИЗ
	|	&ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	И &УсловиеОтбораСтрокДляОкругления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляЗапроса.НомерСтроки,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины В (&МерныеТипы) КАК МожноОкруглять,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	ВТДляЗапроса.Номенклатура,
	|	ВТДляЗапроса.Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковок * &ТекстЗапросаКоэффициентУпаковки КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковок * &ТекстЗапросаКоэффициентУпаковки КАК ЧИСЛО(15, 0)) КАК КоличествоОкругленное,
	|	ВТДляЗапроса.КоличествоВДокументе КАК КоличествоВДокументе,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковокСуффикс * &ТекстЗапросаКоэффициентУпаковки КАК ЧИСЛО(15, 3)) КАК КоличествоСуффикс,
	|	ВЫРАЗИТЬ(ВТДляЗапроса.КоличествоУпаковокСуффикс * &ТекстЗапросаКоэффициентУпаковки КАК ЧИСЛО(15, 0)) КАК КоличествоСуффиксОкругленное,
	|	ВТДляЗапроса.КоличествоВДокументеСуффикс КАК КоличествоВДокументеСуффикс
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТДляЗапроса КАК ВТДляЗапроса
	|ГДЕ
	|	ЕСТЬNULL(ВТДляЗапроса.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|	И ВЫРАЗИТЬ(ВТДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = &ШтучныйТип
	|	И &УсловиеОтбораСтрокПоДополнительнымПолям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТЧ.БазоваяЕдиницаИзмерения) КАК БазоваяЕдиницаИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТЧ.Упаковка) КАК Упаковка,
	|	ТЧ.КоличествоОкругленное КАК КоличествоОкругленное,
	|	ТЧ.КоличествоСуффиксОкругленное КАК КоличествоСуффиксОкругленное,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|					И ТЧ.МожноОкруглять
	|				ТОГДА ВЫБОР
	|						КОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное > 0
	|							ТОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное
	|						ИНАЧЕ ТЧ.КоличествоОкругленное - ТЧ.Количество
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество > 0
	|						ТОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество
	|					ИНАЧЕ ТЧ.Количество - ТЧ.КоличествоВДокументе
	|				КОНЕЦ
	|		КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3)) КАК КоличествоОтклонение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|					И ТЧ.МожноОкруглять
	|				ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоОкругленное / ТЧ.КоэффициентУпаковки / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоМаксимальнаяПогрешность,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|				ТОГДА ВЫБОР
	|						КОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное > 0
	|							ТОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное
	|						ИНАЧЕ ТЧ.КоличествоСуффиксОкругленное - ТЧ.КоличествоСуффикс
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс > 0
	|						ТОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс
	|					ИНАЧЕ ТЧ.КоличествоСуффикс - ТЧ.КоличествоВДокументеСуффикс
	|				КОНЕЦ
	|		КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3)) КАК КоличествоСуффиксОтклонение,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПроверитьВозможностьОкругления
	|					И ТЧ.МожноОкруглять
	|				ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоСуффиксОкругленное / ТЧ.КоэффициентУпаковки / 100
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК КоличествоСуффиксМаксимальнаяПогрешность
	|ИЗ
	|	ВТ КАК ТЧ
	|ГДЕ
	|	((ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА ВЫБОР
	|								КОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное > 0
	|									ТОГДА ТЧ.Количество - ТЧ.КоличествоОкругленное
	|								ИНАЧЕ ТЧ.КоличествоОкругленное - ТЧ.Количество
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество > 0
	|								ТОГДА ТЧ.КоличествоВДокументе - ТЧ.Количество
	|							ИНАЧЕ ТЧ.Количество - ТЧ.КоличествоВДокументе
	|						КОНЕЦ
	|				КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3))) > (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоОкругленное / ТЧ.КоэффициентУпаковки / 100
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 3)))
	|			ИЛИ (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА ВЫБОР
	|								КОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное > 0
	|									ТОГДА ТЧ.КоличествоСуффикс - ТЧ.КоличествоСуффиксОкругленное
	|								ИНАЧЕ ТЧ.КоличествоСуффиксОкругленное - ТЧ.КоличествоСуффикс
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс > 0
	|								ТОГДА ТЧ.КоличествоВДокументеСуффикс - ТЧ.КоличествоСуффикс
	|							ИНАЧЕ ТЧ.КоличествоСуффикс - ТЧ.КоличествоВДокументеСуффикс
	|						КОНЕЦ
	|				КОНЕЦ / ТЧ.КоэффициентУпаковки КАК ЧИСЛО(15, 3))) > (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА &ПроверитьВозможностьОкругления
	|							И ТЧ.МожноОкруглять
	|						ТОГДА &ДопустимыйПроцентОтклонения * ТЧ.КоличествоСуффиксОкругленное / ТЧ.КоэффициентУпаковки / 100
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ЧИСЛО(15, 3))))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИменаПолейССуффиксом.Свойство("Количество") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСуффикс", "ТЧ." + ИменаПолейССуффиксом.Количество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоУпаковокСуффикс", "ТЧ." + ИменаПолейССуффиксом.КоличествоУпаковок);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСуффикс", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоУпаковокСуффикс", "0");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаКоэффициентУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
									"ВТДляЗапроса.Упаковка",
									"ВТДляЗапроса.Номенклатура"));
	
	Если ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УсловиеОтбораСтрокДляОкругления",
									СтрЗаменить(ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления, ИмяТЧ + ".", "ТЧ."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокДляОкругления", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПоля) Тогда
		Шаблон = "%1 КАК %2,
					|%3";
		ТекстПолей = Шаблон;
		
		Для Каждого Поле Из ПараметрыПроверки.ДополнительныеПоля Цикл
			ТекстПолей = СтрШаблон(ТекстПолей, СтрЗаменить(Поле.Значение, ИмяТЧ + ".", "ТЧ."), Поле.Ключ, Шаблон);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ДополнительныеПоля",
									Сред(ТекстПолей, 1, СтрНайти(ТекстПолей, ",", НаправлениеПоиска.СКонца,, 2) - 1));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоля", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.УсловиеОтбораСтрокПоДополнительнымПолям) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УсловиеОтбораСтрокПоДополнительнымПолям",
									СтрЗаменить(ПараметрыПроверки.УсловиеОтбораСтрокПоДополнительнымПолям,
												ИмяТЧ + ".",
												"ВТДляЗапроса."));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСтрокПоДополнительнымПолям", "ИСТИНА");	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ПараметрыПроверки.ПроверяемаяТаблица <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ТЧ", ПараметрыПроверки.ПроверяемаяТаблица);
		
	ИначеЕсли ИмяТЧ = "Объект" Тогда
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Таблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Таблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		Таблица.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Объект);
		
		Запрос.УстановитьПараметр("ТЧ", Таблица);
		
	Иначе
		Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДопустимыйПроцентОтклонения", ДопустимыйПроцентОтклонения);
	Запрос.УстановитьПараметр("ПроверитьВозможностьОкругления", ПараметрыПроверки.ПроверитьВозможностьОкругления);
	
	Для Каждого ПараметрЗапроса Из ПараметрыПроверки.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МерныеТипы = Новый Массив;
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	
	Запрос.УстановитьПараметр("МерныеТипы", МерныеТипы);
	Запрос.УстановитьПараметр("ШтучныйТип", Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук);
	
	Возврат Запрос;
	
КонецФункции

#Область ПакетнаяОбработкаТабличныхЧастейСлужебная

// Возвращает список запросов для проверки характеристики по владельцу.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовПроверитьХарактеристикуПоВладельцу()
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ЕСТЬNULL(ТаблицаХарактеристик.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК
	|		Характеристика,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|		ИЛИ
	|			ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|		ИЛИ
	|			ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
	|		ПО ВтИсточникДанных.Номенклатура = ТаблицаНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристик
	|		ПО ВтИсточникДанных.Характеристика = ТаблицаХарактеристик.Ссылка
	|		И (ВЫБОР
	|			КОГДА
	|				ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ТОГДА ТаблицаНоменклатуры.ВидНоменклатуры
	|			КОГДА
	|				ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА ТаблицаНоменклатуры.Ссылка
	|			КОГДА
	|				ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ТОГДА ТаблицаНоменклатуры.ВладелецХарактеристик
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ТаблицаХарактеристик.Владелец)";
	
	Результат.Добавить(ТекстЗапроса, "ПроверитьХарактеристикуПоВладельцу");
	
	Возврат Результат;
	
КонецФункции

// Возвращает список запросов для проверки и заполнения упаковки по владельцу.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовПроверитьЗаполнитьУпаковкуПоВладельцу()
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подзапрос.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаВес
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаВес.Ссылка
	|			И (ВтИсточникДанных.Номенклатура.ВесИспользовать)
	|			И (ВтИсточникДанных.Номенклатура.ВесМожноУказыватьВДокументах)
	|			И (ТаблицаВес.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаДлина
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаДлина.Ссылка
	|			И (ВтИсточникДанных.Номенклатура.ДлинаИспользовать)
	|			И (ВтИсточникДанных.Номенклатура.ДлинаМожноУказыватьВДокументах)
	|			И (ТаблицаДлина.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаОбъем
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаОбъем.Ссылка
	|			И (ВтИсточникДанных.Номенклатура.ОбъемИспользовать)
	|			И (ВтИсточникДанных.Номенклатура.ОбъемМожноУказыватьВДокументах)
	|			И (ТаблицаОбъем.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаПлощадь
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаПлощадь.Ссылка
	|			И (ВтИсточникДанных.Номенклатура.ПлощадьИспользовать)
	|			И (ВтИсточникДанных.Номенклатура.ПлощадьМожноУказыватьВДокументах)
	|			И (ТаблицаПлощадь.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаЕдиницИзмерения
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаЕдиницИзмерения.Ссылка
	|			И
	|				ВтИсточникДанных.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ТаблицаЕдиницИзмерения.ТипИзмеряемойВеличины
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаУпаковокИндивидуальные
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаУпаковокИндивидуальные.Ссылка
	|			И ВтИсточникДанных.Номенклатура.Ссылка = ТаблицаУпаковокИндивидуальные.Владелец
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТаблицаУпаковокНаборы
	|			ПО ВтИсточникДанных.Упаковка = ТаблицаУпаковокНаборы.Ссылка
	|			И ВтИсточникДанных.Номенклатура.НаборУпаковок = ТаблицаУпаковокНаборы.Владелец
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВтИсточникДанных.ИдентификаторСтрокиВТ
	|	ИЗ
	|		ВтИсточникДанных КАК ВтИсточникДанных
	|	ГДЕ
	|		ВтИсточникДанных.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Подзапрос";
	
	Результат.Добавить(ТекстЗапроса, "ПроверитьЗаполнитьУпаковкуПоВладельцу");
	
	Возврат Результат;
	
КонецФункции

// Возвращает список запросов для заполнения учетного количества номенклатуры.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовЗаполнитьУчетноеКоличествоНоменклатуры()
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ВтИсточникДанных.Номенклатура КАК Номенклатура,
	|	ВтИсточникДанных.Упаковка КАК Упаковка,
	|	Аналитика.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВтИсточникДанных.Номенклатура = Аналитика.Номенклатура
	|			И ВтИсточникДанных.Характеристика = Аналитика.Характеристика
	|			И (Аналитика.МестоХранения = &Склад)";
	
	Результат.Добавить(ТекстЗапроса, "ВтАналитика");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Подзапрос.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	СУММА(ЕСТЬNULL(Подзапрос.КоличествоОстаток, 0) / &ТекстЗапросаКоэффициентУпаковки) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		Аналитика.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|		Аналитика.Номенклатура КАК Номенклатура,
	|		Аналитика.Упаковка КАК Упаковка,
	|		ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени, Организация = &Организация) КАК ТоварыОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
	|			ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Аналитика.ИдентификаторСтрокиВТ,
	|		Аналитика.Номенклатура,
	|		Аналитика.Упаковка,
	|		-ТоварыОрганизаций.Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
	|			ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	ГДЕ
	|		ТоварыОрганизаций.Регистратор = &Регистратор) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.ИдентификаторСтрокиВТ,
	|	Подзапрос.Номенклатура,
	|	Подзапрос.Упаковка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
			"Подзапрос.Упаковка",
			"Подзапрос.Номенклатура"));
	
	Результат.Добавить(ТекстЗапроса, "ЗаполнитьУчетноеКоличествоНоменклатуры");
	
	Возврат Результат;
	
КонецФункции

// Возвращает список запросов для пересчета количества упаковок номенклатуры.
//
// Параметры:
// 	ИмяПоляКоличество - Строка - имя поля количества в табличной части.
// 	ИмяТаблицы - Строка - имя таблицы для помещения в пакет запросов.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовПересчитатьКоличествоУпаковок(ИмяПоляКоличество = "Количество", ИмяТаблицы = "ПересчитатьКоличествоУпаковок")
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	&ИмяПоляКоличествоУпаковок КАК ИмяПоляКоличествоУпаковок,
	|	ВЫРАЗИТЬ(&ПолеКоличество КАК ЧИСЛО) / &ТекстЗапросаКоэффициентУпаковки КАК Количество
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
			"ВтИсточникДанных.Упаковка",
			"ВтИсточникДанных.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ПолеКоличество",
		СтрШаблон("ВтИсточникДанных.%1", ИмяПоляКоличество));
	
	Результат.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список запросов для пересчета количества упаковок номенклатуры по весу или объему.
//
// Параметры:
// 	ИмяТаблицы - Строка - имя таблицы для помещения в пакет запросов.
// 	ИмяПоляКоличество - Строка - имя поля количества в табличной части.
// 	ИмяПоляКоличествоУпаковок - Строка - имя поля количества упаковок в табличной части.
// 	ВариантПересчета - Строка - имя варианта пересчета, Вес или Объем.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовПересчитатьКоличествоУпаковокПоВесуОбъему(ИмяТаблицы, ИмяПоляКоличество, ИмяПоляКоличествоУпаковок, ВариантПересчета)
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	&ИмяПоляКоличество КАК ИмяПоляКоличество,
	|	&ИмяПоляКоличествоУпаковок КАК ИмяПоляКоличествоУпаковок,
	|	&ПолеКоличество КАК Количество,
	|	&ПолеКоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных";
	
	Если ВариантПересчета = "Вес" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеКоличествоУпаковок",
			"ВтИсточникДанных.Вес * ВЫРАЗИТЬ(&ТекстЗапросаКоэффициентЕдиницыИзмеренияВеса / ВтИсточникДанных.ВесУпаковки КАК ЧИСЛО(15, 7))");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеКоличество",
			"ВтИсточникДанных.Вес * ВЫРАЗИТЬ(&ТекстЗапросаКоэффициентЕдиницыИзмеренияВеса / ВтИсточникДанных.ВесУпаковки КАК ЧИСЛО(15, 7)) * &ТекстЗапросаКоэффициентУпаковки");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентЕдиницыИзмеренияВеса",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
				"ВтИсточникДанных.ЕдиницаИзмеренияВеса"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
				"ВтИсточникДанных.Упаковка",
				"ВтИсточникДанных.Номенклатура"));
			
	ИначеЕсли ВариантПересчета = "Объем" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеКоличествоУпаковок",
			"ВтИсточникДанных.Объем * ВЫРАЗИТЬ(&ТекстЗапросаКоэффициентЕдиницыИзмеренияОбъема / ВтИсточникДанных.ОбъемУпаковки КАК ЧИСЛО(15, 7))");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ПолеКоличество",
			"ВтИсточникДанных.Объем * ВЫРАЗИТЬ(&ТекстЗапросаКоэффициентЕдиницыИзмеренияОбъема / ВтИсточникДанных.ОбъемУпаковки КАК ЧИСЛО(15, 7)) * &ТекстЗапросаКоэффициентУпаковки");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентЕдиницыИзмеренияОбъема",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
				"ВтИсточникДанных.ЕдиницаИзмеренияОбъема"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковкиДляВыбора(
				"ВтИсточникДанных.Упаковка",
				"ВтИсточникДанных.Номенклатура"));
		
	КонецЕсли;
		
	Результат.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
