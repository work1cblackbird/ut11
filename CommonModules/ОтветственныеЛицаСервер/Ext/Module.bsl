
#Область ПрограммныйИнтерфейс

// Возвращает структуру, содержащую информацию об ответственном лице организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - отбор по организации
//	Дата - Дата - отбор по дате
//  ОтветственноеЛицо - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - "вид" ответственного лица.
//
// Возвращаемое значение:
// 	Структура - Содержит ключи:
//		* СтруктурнаяЕдиница - СправочникСсылка.СтруктураПредприятия - 
//		* ОтветственноеЛицо - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - 
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица -
//		* Должность - Строка, СправочникСсылка -
//
Функция ПолучитьДанныеОтветственногоЛица(Организация, Дата = Неопределено, ОтветственноеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
		ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
	КонецЕсли;
	
	СтруктураОтветственных = ПолучитьОтветственныеЛицаОрганизации(Организация, Дата);
	Результат 			   = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Организация, ОтветственноеЛицо);
	
	Для Каждого МетаВидОтветственного Из Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления Цикл
		
		Ключ = МетаВидОтветственного.Имя;
		Если ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций[Ключ] Тогда
			Результат.Вставить("ФизическоеЛицо", СтруктураОтветственных[Ключ]);
			Результат.Вставить("Должность", 	 СтруктураОтветственных[Ключ + "Должность"]);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую информацию об ответственных лицах организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - отбор по организации
//	Дата - Дата - отбор по дате.
//
// Возвращаемое значение:
// Структура - Содержит ключи вида:
//		%ВидОтветственного% - СправочникСсылка.ФизическиеЛица - физическое лицо, соответствующее ответственному лицу
//		%ВидОтветственного%Должность - Строка - должность ответственного лица
//
// В ключи вместо %ВидОтветственного% подставляется имя значения перечисления ОтветственныеЛицаОрганизаций как оно задано в конфигураторе.
// Количество каждого из этих ключей соответствует количеству значений перечисления ОтветственныеЛицаОрганизаций.
//
Функция ПолучитьОтветственныеЛицаОрганизации(Организация, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураОтветственных = Новый Структура;
	
	СтруктураОтбора 	 = Новый Структура("Дата, Владелец", Дата, Организация);
	ТаблицаОтветственных = ПолучитьТаблицуОтветственныхЛицПоОтбору(СтруктураОтбора);
	ТаблицаОтветственных.Индексы.Добавить("ОтветственноеЛицо, ПравоПодписиПоДоверенности");
	
	Для Каждого МетаВидОтветственного Из Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления Цикл
		
		Ключ 			  = МетаВидОтветственного.Имя;
		ВидОтветственного = Перечисления.ОтветственныеЛицаОрганизаций[Ключ];
		СтрокаТаблицы 	  = Неопределено; // ответственный пока не определен
		
		// Попытаемся найти подходящее ответственное лицо
		СтруктураОтбора = Новый Структура("ОтветственноеЛицо", ВидОтветственного);
		СтрокиТаблицы = ТаблицаОтветственных.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТаблицы.Количество() = 1 Тогда
			
			// Если есть только один ответственный данного вида - вернем его
			СтрокаТаблицы = СтрокиТаблицы[0];
			
		ИначеЕсли СтрокиТаблицы.Количество() > 1 Тогда
			
			СтруктураОтбора.Вставить("ПравоПодписиПоДоверенности", Ложь);
			
			СтрокиТаблицы = ТаблицаОтветственных.НайтиСтроки(СтруктураОтбора);
			Если СтрокиТаблицы.Количество() = 1 Тогда
				// Если есть основной ответственный данного вида - вернем его
				СтрокаТаблицы = СтрокиТаблицы[0];
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			// Ответственное лицо этого вида не удалось определить
			СтруктураОтветственных.Вставить(Ключ, 				         Справочники.ФизическиеЛица.ПустаяСсылка());
			СтруктураОтветственных.Вставить(Ключ + "Должность",          "");
			СтруктураОтветственных.Вставить(Ключ + "ДолжностьСсылка",    Неопределено);
			СтруктураОтветственных.Вставить(Ключ + "Наименование",       "");
			СтруктураОтветственных.Вставить(Ключ + "Ссылка", 	         Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка());
		Иначе
			
			// Основное ответственное лицо этого вида найдено
			СтруктураОтветственных.Вставить(Ключ, 				         СтрокаТаблицы.ФизическоеЛицо);
			СтруктураОтветственных.Вставить(Ключ + "Должность",          СтрокаТаблицы.Должность);
			СтруктураОтветственных.Вставить(Ключ + "ДолжностьСсылка",    СтрокаТаблицы.ДолжностьСсылка);
			СтруктураОтветственных.Вставить(Ключ + "Наименование",       СтрокаТаблицы.Наименование);
			СтруктураОтветственных.Вставить(Ключ + "Ссылка", 	         СтрокаТаблицы.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтветственных;
	
КонецФункции

// Возвращает таблицу ответственных лиц, сформированную в соответствии с произвольным отбором.
//
// Параметры:
//  Отбор - Структура из КлючИЗначение - структура, содержащая параметры отбора данных справочника ОтветственныеЛицаОрганизаций:
//		* Ключ - Строка - имя реквизита справочника
//		* Значение - Произвольный - значение для отбора по ключу
//	ДопустимыПомеченныеНаУдаление - Булево - выводить в результирующую таблицу помеченные на удаление элементы.
//	СтрокаПоиска - Строка - Строка поиска. Необязательный.
//	
// Возвращаемое значение:
//	ТаблицаЗначений - Содержит колонки:
//		* Ссылка - СправочникСсылка.ОтветственныеЛицаОрганизаций - 
//		* Владелец - СправочникСсылка.Организации - 
//		* ОтветственноеЛицо - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций -
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - 
//		* Должность - Строка -
//		* ПравоПодписиПоДоверенности - Булево - 
//		* ОснованиеПраваПодписи - Строка -
//		* ДатаНачала - Дата -
//		* ДатаОкончания - Дата -
//		* ДокументПраваПодписи - Строка - 
//		* НомерДокументаПраваПодписи - Строка - 
//		* ДатаДокументаПраваПодписи - Дата -
//
Функция ПолучитьТаблицуОтветственныхЛицПоОтбору(Знач Отбор, ДопустимыПомеченныеНаУдаление = Ложь, СтрокаПоиска = "") Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстВыбираемыеПоля = "";
	ТекстОтбора = "";
	НомерОтбора = 0;
	
	ПоляОтбора = ЗначениеНастроекПовтИсп.РеквизитыСправочника("ОтветственныеЛицаОрганизаций");
	
	Если Отбор.Свойство("Дата") Тогда
		
		// Отбор по периоду действия записи об ответственном лице
		ТекстОтбора =
			ТекстОтбора
			+ ?(ТекстОтбора = "", "", " И ") + "ОтветственныеЛицаОрганизаций.ДатаНачала <= &ОтборПоДате
			| И (ОтветственныеЛицаОрганизаций.ДатаОкончания >= &ОтборПоДате 
			|	 ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0))
			|";
		Запрос.УстановитьПараметр("ОтборПоДате", НачалоДня(Отбор.Дата));
		
		Отбор.Удалить("Дата");
		
	КонецЕсли;
	
	Если Отбор.Свойство("Организация") Тогда
		Отбор.Вставить("Владелец", Отбор.Организация);
		Отбор.Удалить("Организация");
	КонецЕсли;
	
	Если НЕ ДопустимыПомеченныеНаУдаление Тогда
		Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	// Формируем секцию запроса "ГДЕ", устанавливаем параметры запроса
	Для Каждого ТекущийОтбор Из Отбор Цикл
		
		Если НЕ ПоляОтбора.Свойство(ТекущийОтбор.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерОтбора = НомерОтбора + 1;
		
		ТекстОтбора =
			ТекстОтбора
			+ ?(ТекстОтбора = "", "", " И ") + "ОтветственныеЛицаОрганизаций." + ТекущийОтбор.Ключ 
				+ ?(ТипЗнч(ТекущийОтбор.Значение) = Тип("Массив") ИЛИ ТипЗнч(ТекущийОтбор.Значение) = Тип("ФиксированныйМассив"), " В ", " = ")
				+ "(&ЗначениеОтбора" + СокрЛП(НомерОтбора) + ")
			|";
		
		Запрос.УстановитьПараметр("ЗначениеОтбора" + СокрЛП(НомерОтбора), ТекущийОтбор.Значение);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ТекстОтбора =
			ТекстОтбора
			+ ?(ТекстОтбора = "", "", " И ") + "ОтветственныеЛицаОрганизаций.Наименование ПОДОБНО &ОтборПоПредставлению
			|";
		Запрос.УстановитьПараметр("ОтборПоПредставлению", СтрокаПоиска + "%");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстОтбора) Тогда
		ТекстОтбора = "ИСТИНА";
	КонецЕсли;
	
	Для Каждого Поле Из ПоляОтбора Цикл
		ТекстВыбираемыеПоля = ТекстВыбираемыеПоля
			+ ?(ТекстВыбираемыеПоля = "", "", ",") + "
			|ОтветственныеЛицаОрганизаций." + Поле.Ключ + " КАК " + Поле.Ключ;
	КонецЦикла;
	
	// Формируем запрос, получаем данные
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ВыбираемыеПоля
	|ИЗ
	|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	&Отбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	ОтветственноеЛицо,
	|	ПравоПодписиПоДоверенности,
	|	ДатаНачала,
	|	ДатаОкончания,
	|	ФизическоеЛицо";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыбираемыеПоля", ТекстВыбираемыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор", ТекстОтбора);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры ответственных лиц по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Параметры ответственных лиц по умолчанию:
// * ИмяРеквизитаОрганизация - Строка - 
// * РеквизитыОтветственныеЛица - Неопределено, Структура - В структуре:
//		* Ключ - Строка - имя поля в запросе для получения значения ответственного лица
//		* Значение - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - "вид" ответственного лица
// * ИмяТаблицыОтветственныеЛица - Строка - 
// * ПсевдонимыДанныхОтветственныхЛиц - Строка, Неопределено - 
Функция ПараметрыОтветственныхЛицПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяРеквизитаОрганизация", "Организация");
	Структура.Вставить("РеквизитыОтветственныеЛица", Неопределено);
	Структура.Вставить("ИмяТаблицыОтветственныеЛица", "ТаблицаОтветственныеЛица");
	Структура.Вставить("ПсевдонимыДанныхОтветственныхЛиц", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Формирует временную таблицу, содержащую информацию об ответственных лицах в разрезе документов.
// Используется для формирования печатных форм документов подсистемой печати
//	- перед выборкой данных из шапки документа вызвать эту процедуру
//	- при выборке данных создать левое соединение таблицы документов с временной таблицей ТаблицаОтветственныеЛица по полю Ссылка.
//
// Параметры:
//	ОтборДокументы - Массив Из ДокументСсылка - ссылки на документы, по которым необходимо получить ответственных лиц.
//		Важно: если передан массив, то все его элементы должны иметь одинаковый тип.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - в него помещается сформированная временная таблица ТаблицаОтветственныеЛица
//	ПараметрыОтветственныхЛиц- Неопределено, Структура - В структуре:
//		* ИмяРеквизитаОрганизация - Строка - Имя поля документа для получения организации-владельца ответственного лица
//		* РеквизитыОтветственныеЛица - Неопределено, Структура - В структуре:
//			* Ключ - Строка - имя поля в запросе для получения значения ответственного лица
//			* Значение - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - "вид" ответственного лица
//		* ИмяТаблицыОтветственныеЛица - Строка - позволяет задать имя для формируемой временной таблицы
//		* ПсевдонимыДанныхОтветственныхЛиц - Неопределено - Соответствие - содержит данные:
//			* Ключ - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций.
//			* Значение - см. ОтветственныеЛицаСервер.ПсевдонимыДанныхОтветственныхЛицПоУмолчанию
// Количество строк в таблице "ТаблицаОтветственныеЛица" соответствует количеству элементов в ОтборДокументы.
//
// Структура временной таблицы "ТаблицаОтветственныеЛица"
//		Ссылка - ссылка на документ из ОтборДокументы
//		%Реквизит% - СправочникСсылка.ОтветственныеЛицаОрганизаций - значение реквизита ответственного лица из документа
//		%Реквизит%ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, соответствующее ответственному лицу
//		%Реквизит%Наименование - Строка - наименование для печати ответственного лица
//		%Реквизит%Должность - Строка - должность ответственного лица
//		%Реквизит%ОснованиеПраваПодписи - Строка - основание права подписи для неосновного ответственного лица
// Для полей, начинающихся с %Реквизит%, вместо %Реквизит% подставляется имя реквизита ответственного лица как оно задано в конфигураторе
// Количество каждого из этих полей соответствует количеству реквизитов ответственных лиц документа.
//
// Например, если в метаданных документа есть два реквизита ответственных лиц - Руководитель и Бухгалтер,
// то таблица ТаблицаОтветственныеЛица будет иметь следующую структуру:
//	Ссылка
//	Руководитель
//	РуководительФизическоеЛицо
//	РуководительНаименование
//	РуководительДолжность
//	РуководительОснованиеПраваПодписи
//	Бухгалтер
//	БухгалтерФизическоеЛицо
//	БухгалтерНаименование
//	БухгалтерДолжность
//	БухгалтерОснованиеПраваПодписи.
//
Процедура СформироватьВременнуюТаблицуОтветственныхЛицДокументов(ОтборДокументы, МенеджерВременныхТаблиц, ПараметрыОтветственныхЛиц = Неопределено) Экспорт
	
	Если ПараметрыОтветственныхЛиц = Неопределено Тогда
		ПараметрыОтветственныхЛиц = ПараметрыОтветственныхЛицПоУмолчанию();
	КонецЕсли;
	
	ИмяРеквизитаОрганизация = ПараметрыОтветственныхЛиц.ИмяРеквизитаОрганизация;
	РеквизитыОтветственныеЛица = ПараметрыОтветственныхЛиц.РеквизитыОтветственныеЛица;
	ИмяТаблицыОтветственныеЛица = ПараметрыОтветственныхЛиц.ИмяТаблицыОтветственныеЛица;
	ПсевдонимыДанныхОтветственныхЛиц = ПараметрыОтветственныхЛиц.ПсевдонимыДанныхОтветственныхЛиц;
	
	Если (ТипЗнч(ОтборДокументы) = Тип("Массив") ИЛИ ТипЗнч(ОтборДокументы) = Тип("ФиксированныйМассив"))
	 И ОтборДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОтборДокументы) <> Тип("Массив") И ТипЗнч(ОтборДокументы) <> Тип("ФиксированныйМассив") Тогда // это ссылка на документ
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ОтборДокументы);
	Иначе // это массив ссылок на документы
		МассивОбъектов = ОтборДокументы;
	КонецЕсли;
	
	МетаданныеДокумента = МассивОбъектов[0].Метаданные(); // ОбъектМетаданныхДокумент - 
	
	ИменаПолейПереданыВПараметрах = (РеквизитыОтветственныеЛица <> Неопределено);
	Если НЕ ИменаПолейПереданыВПараметрах Тогда
		РеквизитыОтветственныеЛица = ОтветственныеЛицаПовтИсп.РеквизитыОтветственныхЛицДокумента(МетаданныеДокумента.Имя);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтветственныеЛица) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаОрганизация = "ДокументДляПечати." + ИмяРеквизитаОрганизация;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	// Получим данные из документов
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ДокументДляПечати.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(ДокументДляПечати.Дата, ДЕНЬ) КАК Дата,
	|	&Организация КАК Организация,
	|	&ВыбранноеОтветственноеЛицо КАК ВыбранноеОтветственноеЛицо,
	|	&ОтветственноеЛицо КАК ОтветственноеЛицо
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	&ТаблицаДокумент КАК ДокументДляПечати
	|ГДЕ
	|	ДокументДляПечати.Ссылка В(&МассивОбъектов)";
	
	Если МетаданныеДокумента.Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,
			"ДокументДляПечати.Дата",
			"ЕСТЬNULL(ДокументДляПечати.ИсправляемыйДокумент.Дата, ДокументДляПечати.Дата)");
	КонецЕсли;
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ТаблицаДокумент", "Документ." + МетаданныеДокумента.Имя);
		
	Индекс = 0;
	Для Каждого КлючИЗначение Из РеквизитыОтветственныеЛица Цикл
		
		Индекс 		 = Индекс + 1;
		ТекстЗапроса = ШаблонЗапроса;
		
		Если Индекс > 1 Тогда
			ТекстЗапроса = "
			|ОБЪЕДИНИТЬ ВСЕ
			|" + ТекстЗапроса;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "&Организация", ИмяРеквизитаОрганизация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "&ВыбранноеОтветственноеЛицо", "ДокументДляПечати." + КлючИЗначение.Ключ);
		
		ТекстОтветственноеЛицо = СтрШаблон("ЗНАЧЕНИЕ(%1)", ПолучитьПолноеИмяПредопределенногоЗначения(КлючИЗначение.Значение));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "&ОтветственноеЛицо", ТекстОтветственноеЛицо);
		
		Если Индекс <> 1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса , "ПОМЕСТИТЬ ВТДанныеДокументов", "");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапроса;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОтветственноеЛицо,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Заполним пустые поля ответственных лиц значениями по умолчанию
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДанныеДокументов.Организация КАК Организация,
	|	ВТДанныеДокументов.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ВТДанныеДокументов.Дата КАК Дата
	|ПОМЕСТИТЬ ВТНезаполненныеОтветственные
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|ГДЕ
	|	ВТДанныеДокументов.ВыбранноеОтветственноеЛицо = ЗНАЧЕНИЕ(Справочник.ОтветственныеЛицаОрганизаций.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОтветственноеЛицо,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНезаполненныеОтветственные.Организация КАК Организация,
	|	ВТНезаполненныеОтветственные.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ВТНезаполненныеОтветственные.Дата КАК Дата,
	|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ответственный,
	|	ОтветственныеЛицаОрганизаций.ПравоПодписиПоДоверенности КАК ПравоПодписиПоДоверенности
	|ПОМЕСТИТЬ ВТКандидатыВОтветственныеПоУмолчанию
	|ИЗ
	|	ВТНезаполненныеОтветственные КАК ВТНезаполненныеОтветственные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|		ПО ВТНезаполненныеОтветственные.Организация = ОтветственныеЛицаОрганизаций.Владелец
	|			И ВТНезаполненныеОтветственные.ОтветственноеЛицо = ОтветственныеЛицаОрганизаций.ОтветственноеЛицо
	|			И ВТНезаполненныеОтветственные.Дата >= ОтветственныеЛицаОрганизаций.ДатаНачала
	|			И (ВТНезаполненныеОтветственные.Дата <= ОтветственныеЛицаОрганизаций.ДатаОкончания
	|				ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТКандидатыВОтветственныеПоУмолчанию.Организация,
	|	ВТКандидатыВОтветственныеПоУмолчанию.ОтветственноеЛицо,
	|	ВТКандидатыВОтветственныеПоУмолчанию.Дата,
	|	ВТКандидатыВОтветственныеПоУмолчанию.ОтветственноеЛицоПоУмолчанию
	|ПОМЕСТИТЬ ВТОтветственныеПоУмолчанию
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТКандидатыВОтветственныеПоУмолчанию.Организация КАК Организация,
	|		ВТКандидатыВОтветственныеПоУмолчанию.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|		ВТКандидатыВОтветственныеПоУмолчанию.Дата КАК Дата,
	|		ВТКандидатыВОтветственныеПоУмолчанию.Ответственный КАК ОтветственноеЛицоПоУмолчанию
	|	ИЗ
	|		ВТКандидатыВОтветственныеПоУмолчанию КАК ВТКандидатыВОтветственныеПоУмолчанию
	|	ГДЕ
	|		НЕ ВТКандидатыВОтветственныеПоУмолчанию.ПравоПодписиПоДоверенности
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТКандидатыВОтветственныеПоУмолчанию.Организация,
	|		ВТКандидатыВОтветственныеПоУмолчанию.ОтветственноеЛицо,
	|		ВТКандидатыВОтветственныеПоУмолчанию.Дата,
	|		МИНИМУМ(ВТКандидатыВОтветственныеПоУмолчанию.Ответственный)
	|	ИЗ
	|		ВТКандидатыВОтветственныеПоУмолчанию КАК ВТКандидатыВОтветственныеПоУмолчанию
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВТКандидатыВОтветственныеПоУмолчанию.Организация,
	|		ВТКандидатыВОтветственныеПоУмолчанию.ОтветственноеЛицо,
	|		ВТКандидатыВОтветственныеПоУмолчанию.Дата
	|	
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТКандидатыВОтветственныеПоУмолчанию.Ответственный) = 1
	|	) КАК ВТКандидатыВОтветственныеПоУмолчанию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОтветственноеЛицо,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДокументов.Ссылка,
	|	ВТДанныеДокументов.Дата,
	|	ВТДанныеДокументов.ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ВТДанныеДокументов.ВыбранноеОтветственноеЛицо = ЗНАЧЕНИЕ(Справочник.ОтветственныеЛицаОрганизаций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеПоУмолчанию.ОтветственноеЛицоПоУмолчанию, ЗНАЧЕНИЕ(Справочник.ОтветственныеЛицаОрганизаций.ПустаяСсылка))
	|		ИНАЧЕ ВТДанныеДокументов.ВыбранноеОтветственноеЛицо
	|	КОНЕЦ КАК ОтветственноеЛицоПоУмолчанию
	|ПОМЕСТИТЬ ВТДокументыСОтветственными
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеПоУмолчанию КАК ВТОтветственныеПоУмолчанию
	|		ПО ВТДанныеДокументов.Организация = ВТОтветственныеПоУмолчанию.Организация
	|			И ВТДанныеДокументов.ОтветственноеЛицо = ВТОтветственныеПоУмолчанию.ОтветственноеЛицо
	|			И ВТДанныеДокументов.Дата = ВТОтветственныеПоУмолчанию.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТДокументыСОтветственными.Ссылка,
	|	МАКСИМУМ(ФИОФизическихЛиц.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыФИОФизЛиц
	|ИЗ
	|	ВТДокументыСОтветственными КАК ВТДокументыСОтветственными
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|		ПО ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию.ФизическоеЛицо = ФИОФизическихЛиц.ФизическоеЛицо
	|			И ВТДокументыСОтветственными.Дата >= ФИОФизическихЛиц.Период
	|ГДЕ
	|	ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|	И ФИОФизическихЛиц.Период ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию.ФизическоеЛицо,
	|	ВТДокументыСОтветственными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериодыФИОФизЛиц.ФизическоеЛицо,
	|	ВТПериодыФИОФизЛиц.Ссылка,
	|	ВЫРАЗИТЬ(ФИОФизическихЛиц.Фамилия + ВЫБОР
	|			КОГДА ФИОФизическихЛиц.Имя = """"
	|				ТОГДА """"
	|			ИНАЧЕ "" "" + ПОДСТРОКА(ФИОФизическихЛиц.Имя, 1, 1) + "".""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ФИОФизическихЛиц.Отчество = """"
	|				ТОГДА """"
	|			ИНАЧЕ "" "" + ПОДСТРОКА(ФИОФизическихЛиц.Отчество, 1, 1) + "".""
	|		КОНЕЦ КАК СТРОКА(50)) КАК ФИО
	|ПОМЕСТИТЬ ВТФИОФизЛиц
	|ИЗ
	|	ВТПериодыФИОФизЛиц КАК ВТПериодыФИОФизЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|		ПО ВТПериодыФИОФизЛиц.ФизическоеЛицо = ФИОФизическихЛиц.ФизическоеЛицо
	|			И ВТПериодыФИОФизЛиц.Период = ФИОФизическихЛиц.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыСОтветственными.Ссылка,
	|	ВТДокументыСОтветственными.ОтветственноеЛицо,
	|	ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию,
	|	ЕСТЬNULL(ВТФИОФизЛиц.ФИО, """") КАК ФИО
	|ПОМЕСТИТЬ ВТДокументыСФИООтветственных
	|ИЗ
	|	ВТДокументыСОтветственными КАК ВТДокументыСОтветственными
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ВТФИОФизЛиц
	|		ПО ВТДокументыСОтветственными.ОтветственноеЛицоПоУмолчанию.ФизическоеЛицо = ВТФИОФизЛиц.ФизическоеЛицо
	|			И ВТДокументыСОтветственными.Ссылка = ВТФИОФизЛиц.Ссылка";
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Свернем результат - поместим всех ответственных в одну запись выборки запроса
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	&ВыборкаЗапроса
	|ПОМЕСТИТЬ ВТДокументыСФИООтветственныхСвернутая
	|ИЗ
	|	&ВложенныйЗапрос КАК ВТДокументыСФИООтветственных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДокументыСФИООтветственных.Ссылка
	|";
	
	ШаблонВложенногоЗапроса = "
	|ВЫБРАТЬ
	|	&ВыборкаВложенногоЗапроса
	|ИЗ
	|	ВТДокументыСФИООтветственных КАК ВТДокументыСФИООтветственных
	|ГДЕ
	|	ВТДокументыСФИООтветственных.ОтветственноеЛицо = &ОтветственноеЛицо
	|";
	
	Индекс = 0;
	СтрокаВыборкаЗапроса = "ВТДокументыСФИООтветственных.Ссылка";
	ТекстВложенногоЗапроса = "";
	
	ПсевдонимыДанныхПереданыВПараметрах = (ПсевдонимыДанныхОтветственныхЛиц <> Неопределено);
	Если НЕ ПсевдонимыДанныхПереданыВПараметрах Тогда
		ПсевдонимыДанныхОтветственныхЛиц = ПсевдонимыДанныхОтветственныхЛиц();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из РеквизитыОтветственныеЛица Цикл
		
		Индекс = Индекс + 1;
		
		СтрокаВыборкаВложенногоЗапроса = "ВТДокументыСФИООтветственных.Ссылка";
		Для Каждого КлючИЗначение2 Из РеквизитыОтветственныеЛица Цикл
			
			Если КлючИЗначение.Ключ = КлючИЗначение2.Ключ Тогда
				СтрокаВыборкаВложенногоЗапроса = СтрокаВыборкаВложенногоЗапроса + ",
				|	ВТДокументыСФИООтветственных.ОтветственноеЛицоПоУмолчанию КАК " + КлючИЗначение2.Ключ + ",
				|	ВТДокументыСФИООтветственных.ОтветственноеЛицоПоУмолчанию.Должность КАК %РеквизитДолжность%,
				|	ВТДокументыСФИООтветственных.ОтветственноеЛицоПоУмолчанию.ОснованиеПраваПодписи КАК %РеквизитОснованиеПраваПодписи%,
				|	ВТДокументыСФИООтветственных.ФИО КАК %РеквизитФИО%";
			Иначе
				СтрокаВыборкаВложенногоЗапроса = СтрокаВыборкаВложенногоЗапроса + ",
				|	ЗНАЧЕНИЕ(Справочник.ОтветственныеЛицаОрганизаций.ПустаяСсылка) КАК " + КлючИЗначение2.Ключ + ",
				|	"""" КАК %РеквизитДолжность%,
				|	"""" КАК %РеквизитОснованиеПраваПодписи%,
				|	"""" КАК %РеквизитФИО%";
			КонецЕсли;

			Если ПсевдонимыДанныхПереданыВПараметрах Тогда
				СтруктураИмен2 = ПсевдонимыДанныхОтветственныхЛиц.Получить(КлючИЗначение2.Ключ);
			Иначе
				СтруктураИмен2 = ПсевдонимыДанныхОтветственныхЛиц.Получить(КлючИЗначение2.Значение);
			КонецЕсли;

			СтрокаВыборкаВложенногоЗапроса = СтрЗаменить(СтрокаВыборкаВложенногоЗапроса, "%РеквизитФИО%", СтруктураИмен2.ФИО);
			СтрокаВыборкаВложенногоЗапроса = СтрЗаменить(СтрокаВыборкаВложенногоЗапроса, "%РеквизитДолжность%", СтруктураИмен2.Должность);
			СтрокаВыборкаВложенногоЗапроса = СтрЗаменить(СтрокаВыборкаВложенногоЗапроса, "%РеквизитОснованиеПраваПодписи%", СтруктураИмен2.ОснованиеПраваПодписи);
			
		КонецЦикла;
		
		Если Индекс > 1 Тогда
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + ШаблонВложенногоЗапроса;
		
		ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса , "&ВыборкаВложенногоЗапроса", СтрокаВыборкаВложенногоЗапроса);
		
		ТекстОтвественноеЛицо =  СтрШаблон("ЗНАЧЕНИЕ(%1)", ПолучитьПолноеИмяПредопределенногоЗначения(КлючИЗначение.Значение));
		ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса , "&ОтветственноеЛицо", ТекстОтвественноеЛицо);
		
		СтрокаВыборкаЗапроса = СтрокаВыборкаЗапроса + ",
		|	МАКСИМУМ(ВТДокументыСФИООтветственных." + КлючИЗначение.Ключ + ") КАК " + КлючИЗначение.Ключ + ",
		|	МАКСИМУМ(ВТДокументыСФИООтветственных.%РеквизитДолжность%) КАК %РеквизитДолжность%,
		|	МАКСИМУМ(ВТДокументыСФИООтветственных.%РеквизитОснованиеПраваПодписи%) КАК %РеквизитОснованиеПраваПодписи%,
		|	МАКСИМУМ(ВТДокументыСФИООтветственных.%РеквизитФИО%) КАК %РеквизитФИО%";
		
		Если ПсевдонимыДанныхПереданыВПараметрах Тогда
			СтруктураИмен = ПсевдонимыДанныхОтветственныхЛиц.Получить(КлючИЗначение.Ключ);
		Иначе
			СтруктураИмен = ПсевдонимыДанныхОтветственныхЛиц.Получить(КлючИЗначение.Значение);
		КонецЕсли;

		СтрокаВыборкаЗапроса = СтрЗаменить(СтрокаВыборкаЗапроса, "%РеквизитФИО%", СтруктураИмен.ФИО);
		СтрокаВыборкаЗапроса = СтрЗаменить(СтрокаВыборкаЗапроса, "%РеквизитДолжность%", СтруктураИмен.Должность);
		СтрокаВыборкаЗапроса = СтрЗаменить(СтрокаВыборкаЗапроса, "%РеквизитОснованиеПраваПодписи%", СтруктураИмен.ОснованиеПраваПодписи);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса , "&ВыборкаЗапроса", СтрокаВыборкаЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса ,  "&ВложенныйЗапрос", "(" + ТекстВложенногоЗапроса + ")");
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
	// Расшифруем данные - выберем нужные реквизиты ответственных лиц в отдельные поля
	ШаблонЗапроса = "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Выборка
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	ВТДокументыСФИООтветственныхСвернутая КАК ВТСвернутая
	|";
	
	ШаблонСтрокиВыборки = ",
	|	ВТСвернутая.%Реквизит% КАК %Реквизит%,
	|	ЕСТЬNULL(ВТСвернутая.%Реквизит%.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК %Реквизит%ФизическоеЛицо,
	|	ВТСвернутая.%РеквизитФИО% 
	|		+ ВЫБОР
	|			КОГДА ВТСвернутая.%РеквизитОснованиеПраваПодписи% ЕСТь NULL
	|				ИЛИ ВТСвернутая.%РеквизитОснованиеПраваПодписи% = """"
	|			ТОГДА """"
	|			ИНАЧЕ "", "" + ВТСвернутая.%РеквизитОснованиеПраваПодписи%
	|		  КОНЕЦ КАК %РеквизитНаименование%,
	|	ЕСТЬNULL(ВТСвернутая.%РеквизитДолжность%, """") КАК %РеквизитДолжность%,
	|	ЕСТЬNULL(ВТСвернутая.%РеквизитОснованиеПраваПодписи%, """") КАК %РеквизитОснованиеПраваПодписи%";

	СтрокаВыборка = "ВТСвернутая.Ссылка КАК Ссылка";
	Для Каждого КлючИЗначение Из РеквизитыОтветственныеЛица Цикл
		ТекущаяСтрокаВыборка = СтрЗаменить(ШаблонСтрокиВыборки, "%Реквизит%", КлючИЗначение.Ключ);
		
		Если ПсевдонимыДанныхПереданыВПараметрах Тогда
			СтруктураИмен = ПсевдонимыДанныхОтветственныхЛиц.Получить(КлючИЗначение.Ключ);
		Иначе
			СтруктураИмен = ПсевдонимыДанныхОтветственныхЛиц.Получить(КлючИЗначение.Значение);
		КонецЕсли;

		ТекущаяСтрокаВыборка = СтрЗаменить(ТекущаяСтрокаВыборка, "%РеквизитФИО%", СтруктураИмен.ФИО);
		ТекущаяСтрокаВыборка = СтрЗаменить(ТекущаяСтрокаВыборка, "%РеквизитНаименование%", СтруктураИмен.Наименование);
		ТекущаяСтрокаВыборка = СтрЗаменить(ТекущаяСтрокаВыборка, "%РеквизитДолжность%", СтруктураИмен.Должность);
		ТекущаяСтрокаВыборка = СтрЗаменить(ТекущаяСтрокаВыборка, "%РеквизитОснованиеПраваПодписи%", СтруктураИмен.ОснованиеПраваПодписи);
		
		СтрокаВыборка = СтрокаВыборка + ТекущаяСтрокаВыборка;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&Выборка", СтрокаВыборка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяТаблицыОтветственныеЛица);
	
	// Удалим ненужные временные таблицы
	Запрос.Текст = Запрос.Текст + ТекстЗапроса + "
	|;
	|УНИЧТОЖИТЬ ВТДанныеДокументов
	|;
	|УНИЧТОЖИТЬ ВТНезаполненныеОтветственные
	|;
	|УНИЧТОЖИТЬ ВТОтветственныеПоУмолчанию
	|;
	|УНИЧТОЖИТЬ ВТКандидатыВОтветственныеПоУмолчанию
	|;
	|УНИЧТОЖИТЬ ВТДокументыСОтветственными
	|;
	|УНИЧТОЖИТЬ ВТПериодыФИОФизЛиц
	|;
	|УНИЧТОЖИТЬ ВТФИОФизЛиц
	|;
	|УНИЧТОЖИТЬ ВТДокументыСФИООтветственных
	|;
	|УНИЧТОЖИТЬ ВТДокументыСФИООтветственныхСвернутая
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет менеджера в документе по договору, соглашению и партнеру
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект, ДанныеФормыСтруктура - заполняемый объект
//  Перезаполнить - Булево - если Истина, то заполнять даже заполненное значение.
//  ПоляПоиска - Строка - путь к данным, перечисленные через запятую, в которых есть значение реквизита Менеджер.
//                        Путь состоит из названия реквизита документа, точки и названия реквизита,
//                        содержащего ссылку на менеджера. Например "Клиент.ОсновнойМенеджер, Договор.Менеджер"
Процедура ЗаполнитьМенеджера(ДокументОбъект, Перезаполнить = Истина, ПоляПоиска = "") Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Менеджер") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНеуказанногоПользователя = Пользователи.СсылкаНеуказанногоПользователя();
	
	Если НЕ Перезаполнить И ЗначениеЗаполнено(ДокументОбъект.Менеджер)
		И ДокументОбъект.Менеджер <> СсылкаНеуказанногоПользователя Тогда
		Возврат;
	КонецЕсли;
		
	Если ПустаяСтрока(ПоляПоиска) Тогда
		Если МетаданныеДокумента.Реквизиты.Найти("Договор") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
			ИмяРеквизита = "Менеджер";
			Если ТипЗнч(ДокументОбъект.Договор) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") 
				Тогда
				ИмяРеквизита = "Ответственный";
			КонецЕсли;
			Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, ИмяРеквизита);
			Если ЗначениеЗаполнено(Менеджер) И Менеджер <> СсылкаНеуказанногоПользователя Тогда
				ДокументОбъект.Менеджер = Менеджер;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если МетаданныеДокумента.Реквизиты.Найти("Соглашение") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение, "Менеджер");
			Если ЗначениеЗаполнено(Менеджер) И Менеджер <> СсылкаНеуказанногоПользователя Тогда
				ДокументОбъект.Менеджер = Менеджер;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
			Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Партнер, "ОсновнойМенеджер");
			Если ЗначениеЗаполнено(Менеджер) И Менеджер <> СсылкаНеуказанногоПользователя Тогда
				ДокументОбъект.Менеджер = Менеджер;
			КонецЕсли;
		КонецЕсли;
	Иначе
		МассивПолейПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляПоиска, , Истина, Истина);
		Для Каждого СтрокаПоиска Из МассивПолейПоиска Цикл
			СоставПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				СтрокаПоиска, ".", Истина, Истина);
			Если ЗначениеЗаполнено(ДокументОбъект[СоставПути[0]]) Тогда
				Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект[СоставПути[0]], СоставПути[1]);
				Если ЗначениеЗаполнено(Менеджер) И Менеджер <> СсылкаНеуказанногоПользователя Тогда
					ДокументОбъект.Менеджер = Менеджер;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую структуру псевдонимов данных ответственных лиц.
//
// Возвращаемое значение:
//		Структура - содержит:
//			* Наименование - Строка - Наименование.
//			* ФИО - Строка - ФИО.
//			* Должность - Строка - Должность.
//			* ОснованиеПраваПодписи - Строка - ОснованиеПраваПодписи.
Функция ПсевдонимыДанныхОтветственныхЛицПоУмолчанию() Экспорт
	
	Псевдонимы = Новый Структура();
	Псевдонимы.Вставить("Наименование", "");
	Псевдонимы.Вставить("ФИО", "");
	Псевдонимы.Вставить("Должность", "");
	Псевдонимы.Вставить("ОснованиеПраваПодписи", "");
	
	Возврат Псевдонимы;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийИзмененияОтветственныхЛиц

// Обработчик события "ПриИзменении" ключевых реквизитов документа (Дата, Организация).
// Проверяет соответствие ответственных лиц документа и ключевых реквизитов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - свойство "Объект" формы документа.
//
Процедура ПриИзмененииСвязанныхРеквизитовДокумента(Объект) Экспорт
	
	ЗаполнитьОтветственныхЛицДокумента(Объект,, Истина);
	
КонецПроцедуры


// Обработчик подписки на событие ОтветственныеЛицаДокументаОбработкаЗаполнения.
// Заполняет реквизиты ответственных лиц документа значениями по умолчанию.
//
// Параметры:
// 	Источник - ДокументОбъект -
// 	ДанныеЗаполнения - Произвольный -
// 	СтандартнаяОбработка - Булево - 
// 
Процедура ОтветственныеЛицаДокументаОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ ОтветственныеЛицаПовтИсп.ЕстьРеквизитыОтветственныхЛицДокумента(Источник.Метаданные().Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтветственныхЛицДокумента(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик подписки на событие ОтветственныеЛицаДокументаПриКопировании.
// Заполняет реквизиты ответственных лиц документа значениями по умолчанию.
//
// Параметры:
// 	Источник - ДокументОбъект -
// 	ОбъектКопирования - ДокументОбъект -
// 
Процедура ОтветственныеЛицаДокументаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если НЕ ОтветственныеЛицаПовтИсп.ЕстьРеквизитыОтветственныхЛицДокумента(Источник.Метаданные().Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтветственныхЛицДокумента(Источник, ОбъектКопирования);
	
КонецПроцедуры

// Обработчик подписки на событие ОтветственныеЛицаДокументаОбработкаПроверкиЗаполнения.
// Проверяет корректность заполнения реквизитов ответственных лиц документа.
//
// Параметры:
// 	Источник - ДокументОбъект -
// 	Отказ - Булево -
// 	ПроверяемыеРеквизиты - Массив Из Строка -
//
Процедура ОтветственныеЛицаДокументаОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если НЕ ОтветственныеЛицаПовтИсп.ЕстьРеквизитыОтветственныхЛицДокумента(Источник.Метаданные().Имя) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхОтветственныхЛиц = СтруктураДанныхОтветственныхЛицДокумента(Источник);
	
	РеквизитыОтветственныеЛица = СтруктураДанныхОтветственныхЛиц.РеквизитыОтветственныеЛица;
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("Организация", РеквизитыОтветственныеЛица);
	Если СтруктураДанныхОтветственныхЛиц.Свойство("РеквизитыОтветственныеЛицаОрганизацииКонтрагента") Тогда
		СтруктураПроверки.Вставить("Контрагент", СтруктураДанныхОтветственныхЛиц.РеквизитыОтветственныеЛицаОрганизацииКонтрагента);
	КонецЕсли;
	
	Для Каждого КлючИЗначениеСтруктурыПроверки Из СтруктураПроверки Цикл
		
		Для Каждого КлючИЗначение Из КлючИЗначениеСтруктурыПроверки.Значение Цикл
			
			ЗначениеОтветственногоЛица = СтруктураДанныхОтветственныхЛиц[КлючИЗначение.Ключ];
			Если ЗначениеЗаполнено(ЗначениеОтветственногоЛица) Тогда
				
				РеквизитыДляПроверки =
					Новый Структура(
						"Дата, Организация, ОтветственноеЛицо",
						СтруктураДанныхОтветственныхЛиц.Дата, 
						СтруктураДанныхОтветственныхЛиц[КлючИЗначениеСтруктурыПроверки.Ключ], 
						КлючИЗначение.Значение);
				
				// Если реквизит заполнен некорректно - сообщим пользователю и установим параметр Отказ = Истина.
				Если НЕ ПроверитьСоответствиеРеквизитовИОтветственногоЛица(РеквизитыДляПроверки, ЗначениеОтветственногоЛица) Тогда
					
					ПредставлениеРеквизита = Источник.Метаданные().Реквизиты.Найти(КлючИЗначение.Ключ).Синоним;
					
					СообщениеОбОшибке = НСтр("ru = 'Ответственное лицо ""%ПредставлениеРеквизита%"" на дату %ПредставлениеДаты% не имеет права подписи этого документа.'");
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ПредставлениеРеквизита%", ПредставлениеРеквизита);
					СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ПредставлениеДаты%", Формат(СтруктураДанныхОтветственныхЛиц.Дата, "ДЛФ=D"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СообщениеОбОшибке,
						,
						"Объект." + КлючИЗначение.Ключ,
						,
						Отказ);
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеСлужебныеПроцедуры

// Формирует структуру, содержащую информацию об ответственных лицах документа
//	
//	Параметры:
//		Объект - ДокументОбъект, ДанныеФормыСтруктура - объект, для которого нужно получить данные
//	Возвращаемое значение:
//		Структура - С ключами:
//			* РеквизитыОтветственныеЛица - Структура Из КлючИЗначение - Содержит:
//				** Ключ - Строка - имя реквизита документа, хранящего информацию об ответственном лице
//				** Значение - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - "вид" ответственного лица
//			* Ссылка - ДокументСсылка -
//			* Дата   - Дата - дата документа
//          * Организация - СправочникСсылка.Организации - организация, для которой нужно получать ответственных лиц
//          <ИмяРеквизитаОтветственногоЛица> - СправочникСсылка.ОтветственныеЛицаОрганизаций - текущие ответственные
//              лица, указанные в документе.
//			
Функция СтруктураДанныхОтветственныхЛицДокумента(Объект)
	
	СтруктураДанных = Новый Структура("Ссылка, Дата, Организация");
	СтруктураДанных.Вставить(
		"РеквизитыОтветственныеЛица",
		ОтветственныеЛицаПовтИсп.РеквизитыОтветственныхЛицДокумента(Объект.Ссылка.Метаданные().Имя));
	Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура")
		И Объект.ДополнительныеСвойства.Свойство("ОтветственныеЛица") Тогда
		СтруктураДанных.Вставить(
			"РеквизитыОтветственныеЛица",
			Объект.ДополнительныеСвойства.ОтветственныеЛица.РеквизитыОтветственныеЛица);
		СтруктураДанных.Вставить(
			"РеквизитыОтветственныеЛицаОрганизацииКонтрагента",
			Объект.ДополнительныеСвойства.ОтветственныеЛица.РеквизитыОтветственныеЛицаОрганизацииКонтрагента);
		Для Каждого ЭлементСтруктуры Из СтруктураДанных.РеквизитыОтветственныеЛицаОрганизацииКонтрагента Цикл
			СтруктураДанных.Вставить(ЭлементСтруктуры.Ключ);
		КонецЦикла;
		СтруктураДанных.Вставить("Контрагент", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных.РеквизитыОтветственныеЛица Цикл
		СтруктураДанных.Вставить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Объект);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Проверяет соответствие ответственного лица и ключевых реквизитов документа.
//
// Параметры:
//	РеквизитыДляПроверки - Структура - структура реквизитов документа с ключами:
//		* Дата - Дата - 
//		* Организация - СправочникСсылка.Организации - 
//		* ОтветственноеЛицо - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - "вид" ответственного лица
//		* ПометкаУдаления - Булево - необязательный, проверять пометку удаления ответственного лица
//	ОтветственноеЛицоДляПроверки - СправочникСсылка.ОтветственныеЛицаОрганизаций - ответственное лицо.
//
// Возвращаемое значение:
//	Булево - результат проверки
//
Функция ПроверитьСоответствиеРеквизитовИОтветственногоЛица(РеквизитыДляПроверки, ОтветственноеЛицоДляПроверки)
	
	Если НЕ ЗначениеЗаполнено(ОтветственноеЛицоДляПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыОтветственногоЛица =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОтветственноеЛицоДляПроверки,
			"Владелец, ОтветственноеЛицо, ДатаНачала, ДатаОкончания, ПометкаУдаления"); 
	
	Дата = НачалоДня(РеквизитыДляПроверки.Дата);
	
	Если РеквизитыОтветственногоЛица.Владелец <> РеквизитыДляПроверки.Организация
	 Или РеквизитыОтветственногоЛица.ОтветственноеЛицо <> РеквизитыДляПроверки.ОтветственноеЛицо
	 Или РеквизитыОтветственногоЛица.ДатаНачала > Дата
	 Или (ЗначениеЗаполнено(РеквизитыОтветственногоЛица.ДатаОкончания) И РеквизитыОтветственногоЛица.ДатаОкончания < Дата)
	 Или (РеквизитыДляПроверки.Свойство("ПометкаУдаления")
	 		И РеквизитыОтветственногоЛица.ПометкаУдаления <> РеквизитыДляПроверки.ПометкаУдаления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие значений реквизитов ответственных лиц документа и ключевых реквизитов документа.
// Если значения не соответствуют то процедура подбирает подходящее значение для ответственного лица.
// Параметры:
// 	РеквизитыДокумента - ДокументОбъект, Структура - данные документа
//		- ключевые реквизиты (Дата, Организация, Ссылка)
//		- реквизиты ответственных лиц.
//
// Возвращаемое значение:
//  Структура - структура измененных реквизитов ответственных лиц документа
//		Ключ 	 - имя измененного реквизита документа
//		Значение - новое значение реквизита.
//
Функция СкорректироватьОтветственныхЛицДокумента(СтруктураДанныхОтветственныхЛиц)
	
	ИзмененныеРеквизиты = Новый Структура;
	
	РеквизитыОтветственныеЛица = СтруктураДанныхОтветственныхЛиц.РеквизитыОтветственныеЛица;
	Дата = ?(ЗначениеЗаполнено(СтруктураДанныхОтветственныхЛиц.Дата), СтруктураДанныхОтветственныхЛиц.Дата, ТекущаяДатаСеанса());
	
	СтруктураКорректировки = Новый Структура;
	СтруктураКорректировки.Вставить("Организация", РеквизитыОтветственныеЛица);
	Если СтруктураДанныхОтветственныхЛиц.Свойство("РеквизитыОтветственныеЛицаОрганизацииКонтрагента") Тогда
		СтруктураКорректировки.Вставить(
			"Контрагент", 
			СтруктураДанныхОтветственныхЛиц.РеквизитыОтветственныеЛицаОрганизацииКонтрагента);
	КонецЕсли;
	
	Для Каждого КлючИЗначениеСтруктурыКорректировки Из СтруктураКорректировки Цикл
		
		ОрганизацияДляКорректировки = СтруктураДанныхОтветственныхЛиц[КлючИЗначениеСтруктурыКорректировки.Ключ];
		
		ТаблицаОтветственных = ПолучитьТаблицуОтветственныхЛицПоОтбору(
			Новый Структура("Дата, Организация", Дата, ОрганизацияДляКорректировки));
		
		Для Каждого КлючИЗначение Из КлючИЗначениеСтруктурыКорректировки.Значение Цикл
			
			ЗначениеОтветственногоЛица = СтруктураДанныхОтветственныхЛиц[КлючИЗначение.Ключ];
			
			РеквизитыДляПроверки = Новый Структура;
			РеквизитыДляПроверки.Вставить("Дата", 			   Дата);
			РеквизитыДляПроверки.Вставить("Организация", 	   ОрганизацияДляКорректировки);
			РеквизитыДляПроверки.Вставить("ОтветственноеЛицо", КлючИЗначение.Значение);
			РеквизитыДляПроверки.Вставить("ПометкаУдаления",   Ложь);
			
			// Если выбрано неподходящее ответственное лицо, то очистим его
			Если ЗначениеЗаполнено(ЗначениеОтветственногоЛица)
			 И Не ПроверитьСоответствиеРеквизитовИОтветственногоЛица(РеквизитыДляПроверки, ЗначениеОтветственногоЛица) Тогда
				ЗначениеОтветственногоЛица = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
			// Если ответственное лицо не выбрано, то попытаемся подобрать его
			Если Не ЗначениеЗаполнено(ЗначениеОтветственногоЛица) Тогда
				СтрокиТаблицы = ТаблицаОтветственных.НайтиСтроки(Новый Структура("ОтветственноеЛицо", КлючИЗначение.Значение));
				Если СтрокиТаблицы.Количество() = 1 Тогда
					ЗначениеОтветственногоЛица = СтрокиТаблицы[0].Ссылка; // можно однозначно определить ответственного
				КонецЕсли;
			КонецЕсли;
			
			// Запомним изменение реквизита
			Если СтруктураДанныхОтветственныхЛиц[КлючИЗначение.Ключ] <> ЗначениеОтветственногоЛица Тогда
				ИзмененныеРеквизиты.Вставить(КлючИЗначение.Ключ, ЗначениеОтветственногоЛица);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

// Заполняет значения ответственных лиц документа значениями по умолчанию.
//
// Параметры:
//	Объект - ДокументОбъект - документ, реквизиты которого необходимо заполнить:
//  	* ДополнительныеСвойства - Структура - Дополнительные свойства объекта:
//  		** ОтключитьЗаполнениеОбъектаПоСтатистике - Булево - Истина, если необходимо отключить заполнение реквизитов по статистике.
//  		                                                     Например, в сценарии загрузки объектов из другой системы.
//         - ДанныеФормыСтруктура - данные документа при вызове из формы.
//	ДанныеЗаполнения - Произвольный - объект, содержащий данные для заполнения документа.
//	ПерезаполнятьНепустыеРеквизиты - Булево - необходимость перезаполнения реквизитов даже тогда, когда они уже содержат значения.
//
Процедура ЗаполнитьОтветственныхЛицДокумента(Объект, ДанныеЗаполнения = Неопределено, ПерезаполнятьНепустыеРеквизиты = Ложь)
	
	СтруктураДанныхОтветственныхЛиц = СтруктураДанныхОтветственныхЛицДокумента(Объект);
	
	// Заполним пустые реквизиты непустыми значениями из данных для заполнения, при этом
	// - не заполняем системные реквизиты
	// - не берем дату (в случае копирования документа или ввода на основании).
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из СтруктураДанныхОтветственныхЛиц Цикл
			
			Если КлючИЗначение.Ключ = "РеквизитыОтветственныеЛица"
			 ИЛИ КлючИЗначение.Ключ = "Ссылка"
			 ИЛИ (КлючИЗначение.Ключ = "Дата" И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура"))
			 ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("Строка") // автотестирование
			 ИЛИ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполняемыйРеквизит = Новый Структура(КлючИЗначение.Ключ);
			ЗаполнитьЗначенияСвойств(ЗаполняемыйРеквизит, ДанныеЗаполнения);
			Если ЗначениеЗаполнено(ЗаполняемыйРеквизит[КлючИЗначение.Ключ]) Тогда
				ЗаполнитьЗначенияСвойств(СтруктураДанныхОтветственныхЛиц, ЗаполняемыйРеквизит);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыОтветственныхЛицПоСтатистике(СтруктураДанныхОтветственныхЛиц, Объект, ПерезаполнятьНепустыеРеквизиты);
	
	// Проверим соответствие ответственных лиц дате и организации документа.
	// Если не соответствует - заполним ответственными лицами по умолчанию.
	ИзмененныеРеквизиты = СкорректироватьОтветственныхЛицДокумента(СтруктураДанныхОтветственныхЛиц);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхОтветственныхЛиц, ИзмененныеРеквизиты);
	
	// Перенесем реквизиты в объект
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанныхОтветственныхЛиц, , "Ссылка, Дата");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОтветственныхЛицПоСтатистике(СтруктураДанныхОтветственныхЛиц, Объект, ПерезаполнятьНепустыеРеквизиты)
	
	Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура")
		И Объект.ДополнительныеСвойства.Свойство("ОтключитьЗаполнениеОбъектаПоСтатистике")
		И Объект.ДополнительныеСвойства.ОтключитьЗаполнениеОбъектаПоСтатистике Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнятьПоСтатистике = ХранилищеОбщихНастроек.Загрузить(
		"НастройкиРаботыСДокументами", "ЗаполнятьРеквизитыДокументовПоСтатистике");
	Если ЗаполнятьПоСтатистике = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Получим значения реквизитов ответственных лиц по статистике
	ОписаниеРеквизитов = Новый Структура;
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Организация";
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Автор") Тогда
		Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
		Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	КонецЕсли;
	Для Каждого Реквизит Из СтруктураДанныхОтветственныхЛиц.РеквизитыОтветственныеЛица Цикл
		ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, Реквизит.Ключ, Параметры);
	КонецЦикла;
	РеквизитыДляОтбора = Новый Структура("Организация", СтруктураДанныхОтветственныхЛиц.Организация);
	ЗаполняемыеРеквизиты = ЗаполнениеОбъектовПоСтатистике.ПолучитьЗначенияРеквизитов(
		СтруктураДанныхОтветственныхЛиц.Ссылка, ОписаниеРеквизитов, РеквизитыДляОтбора);
	
	Для Каждого КлючИЗначение Из СтруктураДанныхОтветственныхЛиц.РеквизитыОтветственныеЛица Цикл
		Если (ПерезаполнятьНепустыеРеквизиты ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанныхОтветственныхЛиц[КлючИЗначение.Ключ]))
		 И ЗначениеЗаполнено(ЗаполняемыеРеквизиты[КлючИЗначение.Ключ]) Тогда
			СтруктураДанныхОтветственныхЛиц[КлючИЗначение.Ключ] = ЗаполняемыеРеквизиты[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует Имена полей реквизитов ответственных лиц для каждого значения из ПеречислениеСсылка.ОтветственныеЛицаОрганизаций
// 
// Возвращаемое значение:
//		Соответствие - содержит данные:
//			* Ключ - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций.
//			* Значение - см. ОтветственныеЛицаСервер.ПсевдонимыДанныхОтветственныхЛицПоУмолчанию.
Функция ПсевдонимыДанныхОтветственныхЛиц()
	
	СоответствиеПолей = Новый Соответствие();
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "РуководительНаименование";
	СтруктураПсевдонимов.ФИО = "РуководительФИО";
	СтруктураПсевдонимов.Должность = "РуководительДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "РуководительОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "ГлавныйБухгалтерНаименование";
	СтруктураПсевдонимов.ФИО = "ГлавныйБухгалтерФИО";
	СтруктураПсевдонимов.Должность = "ГлавныйБухгалтерДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "ГлавныйБухгалтерОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "РуководительКадровойСлужбыНаименование";
	СтруктураПсевдонимов.ФИО = "РуководительКадровойСлужбыФИО";
	СтруктураПсевдонимов.Должность = "РуководительКадровойСлужбыДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "РуководительКадровойСлужбыОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "КассирНаименование";
	СтруктураПсевдонимов.ФИО = "КассирФИО";
	СтруктураПсевдонимов.Должность = "КассирДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "КассирОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Кассир, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "ОтветственныйЗаБухгалтерскиеРегистрыНаименование";
	СтруктураПсевдонимов.ФИО = "ОтветственныйЗаБухгалтерскиеРегистрыФИО";
	СтруктураПсевдонимов.Должность = "ОтветственныйЗаБухгалтерскиеРегистрыДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "ОтветственныйЗаБухгалтерскиеРегистрыОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "ОтветственныйЗаНалоговыеРегистрыНаименование";
	СтруктураПсевдонимов.ФИО = "ОтветственныйЗаНалоговыеРегистрыФИО";
	СтруктураПсевдонимов.Должность = "ОтветственныйЗаНалоговыеРегистрыДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "ОтветственныйЗаНалоговыеРегистрыОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "УполномоченныйПредставительНаименование";
	СтруктураПсевдонимов.ФИО =  "УполномоченныйПредставительФИО";
	СтруктураПсевдонимов.Должность =  "УполномоченныйПредставительДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи =  "УполномоченныйПредставительОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "ИсполнительНаименование";
	СтруктураПсевдонимов.ФИО = "ИсполнительФИО";
	СтруктураПсевдонимов.Должность = "ИсполнительДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "ИсполнительОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель, СтруктураПсевдонимов);
	
	СтруктураПсевдонимов = ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураПсевдонимов.Наименование = "ОтветственныйЗаВУРНаименование";
	СтруктураПсевдонимов.ФИО = "ОтветственныйЗаВУРФИО";
	СтруктураПсевдонимов.Должность = "ОтветственныйЗаВУРДолжность";
	СтруктураПсевдонимов.ОснованиеПраваПодписи = "ОтветственныйЗаВУРОснованиеПраваПодписи";
	СоответствиеПолей.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаВУР, СтруктураПсевдонимов);
	
	Возврат СоответствиеПолей;
	
КонецФункции

#КонецОбласти

#КонецОбласти
