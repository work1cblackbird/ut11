///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обрабатывает вызов команды заполнения.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения  - форма, в которой требуется обработать событие.
//  ИмяКоманды - Строка - имя обрабатываемой команды.
//  ЗначенияПараметров - Структура из КлючИЗначение - произвольный список параметров.
//
Процедура ВыполнитьКоманду(Форма, ИмяКоманды, ЗначенияПараметров) Экспорт

	Если ИмяКоманды = "ЗаполнитьСклады" Тогда
		ЗаполнитьСкладВВыделенныхСтроках(Форма, ИмяКоманды, ЗначенияПараметров);
	КонецЕсли;

КонецПроцедуры

// Выполняет обработку события начала выбора для элемента.
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения  - форма, в которой требуется обработать событие.
//   Элемент              - ПолеФормы  - элемент, для которого требуется обработать событие.
//   ДанныеВыбора         - Неопределено,
//                        - СписокЗначений Из Произвольный - для заполнения списка доступных к выбору значений.
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//   Параметры            - Неопределено
//                        - Структура из КлючИЗначение - любые переданные параметры.
//
Процедура ОбработатьСобытиеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		Параметры = Неопределено) Экспорт

	Если Элемент.Имя = "ТаблицаСопоставленияДанных_Склад"
	  Или Элемент.Имя = "ТаблицаСопоставленияДанных_Серия" Тогда
		ОткрытьПодборСкладовИСерий(Форма, СтандартнаяОбработка, Параметры);
	КонецЕсли;

КонецПроцедуры

// В зависимости вида формы и от ключа назначения формы дополняются параметры открытия формы.
//
// Параметры:
//   ПараметрыФормы             - Структура - параметры формы, где ключ структуры - имя параметра, а значение - значение
//                                  параметра формы.
//   ИсточникПараметров         - Структура - параметры, на основании которых выполняется анализ необходимости дополнения параметров формы:
//     * КлючНазначенияФормы      - Строка - ключ назначения формы.
//     * ДанныеТорговойПлощадки   - Структура Из КлючИЗначение - данные торговой площадки.
//   ИмяОткрываемойФормы        - Строка - имя формы, параметры для которой нужно дополнить.
//
Процедура ДополнитьПараметрыФормы(ПараметрыФормы, ИсточникПараметров, ИмяОткрываемойФормы) Экспорт

	Если Не ПараметрыФормы.Свойство("УникальныйИдентификаторФормы") Тогда
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", Неопределено);
	КонецЕсли;
	
	КлючНазначенияИзПараметровФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "КлючНазначенияФормы", "");
	КлючНазначенияФормы             = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникПараметров, "КлючНазначенияФормы", "");
	ДанныеТорговойПлощадки          = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникПараметров, "ДанныеТорговойПлощадки", ДанныеТорговойПлощадкиПустые());
	
	КлючНазначенияОткрываемойФормы  = "";
	ЗаголовокФормы                  = "";
	ИмяДинамическогоСписка          = "";
	БыстрыйОтбор                    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "СтруктураБыстрогоОтбора", Новый Структура);
	Отбор                           = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыФормы, "Отбор", Новый Структура);
	ФиксированныеНастройки          = Неопределено;
	
	ЭтоOzon = Ложь;
	ЭтоЯМ   = Ложь;
	
	ХозОперацииПоставок          = Неопределено;
	ХозОперацииПродаж            = Неопределено;
	ХозОперацииПередачиВДоставку = Неопределено;
	
	ДоговорПродажиЧерезСкладыТорговойПлощадки = ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки;
	ДоговорПродажиЧерезСкладыСобственные      = ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыСобственные;
	
	СкладОтгрузки = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
	ЭтоРеализацияДляFBS = Ложь;
	
	ИспользуемыеХозОперации = Новый Структура;
	
	Если ДанныеТорговойПлощадки.ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ЭтоOzon = Истина;
		
		ИспользуемыеХозОперации = ИнтеграцияСМаркетплейсомOzonВызовСервера.ИспользуемыеХозяйственныеОперации(
			ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		
		Если ДанныеТорговойПлощадки.СпособОтраженияПродажFBO = "Комиссия" Тогда
			ХозОперацииПоставок = ИспользуемыеХозОперации.ПоставкиКомиссия;
		КонецЕсли;
		
		Если ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "Комиссия" Тогда
			ХозОперацииПродаж = ИспользуемыеХозОперации.ПродажиКомиссия;
			ХозОперацииПередачиВДоставку = ИспользуемыеХозОперации.ПродажиКомиссияПередачаВДоставку;
		ИначеЕсли ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "НеИспользуются"
					И ДанныеТорговойПлощадки.СпособОтраженияПродажFBO = "Комиссия" Тогда
			ХозОперацииПродаж = ИспользуемыеХозОперации.ПродажиКомиссия;
		ИначеЕсли ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути"
				И ДанныеТорговойПлощадки.СпособОтраженияПродажFBO = "Комиссия" Тогда
			ХозОперацииПродаж = ИспользуемыеХозОперации.ПродажиКомиссияРеализацияВПути;
		ИначеЕсли ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
			ХозОперацииПродаж = ИспользуемыеХозОперации.ПродажиРеализацияВПути;
		КонецЕсли;
		
		Если ДанныеТорговойПлощадки.СпособОтраженияПродажFBS = "РеализацияВПути" Тогда
			ЭтоРеализацияДляFBS = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеТорговойПлощадки.ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет") Тогда
		ЭтоЯМ = Истина;
		
		ИспользуемыеХозОперации = ИнтеграцияСЯндексМаркетВызовСервера.ИспользуемыеХозяйственныеОперации(
			ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		
		Если ДанныеТорговойПлощадки.СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.FBO") Тогда
			КонстантыСервиса = ИнтеграцияСЯндексМаркетКлиентСервер.КонстантыСервиса();
		
			Если ДанныеТорговойПлощадки.СпособОтраженияПродаж = КонстантыСервиса.СпособОтраженияПродажРеализация Тогда
				ХозОперацииПоставок = ИспользуемыеХозОперации.ПоставкиРеализация;
				ХозОперацииПродаж   = ИспользуемыеХозОперации.ПродажиРеализация;
				ДоговорПродажиЧерезСкладыТорговойПлощадки = ДанныеТорговойПлощадки.ДоговорРеализация;
			ИначеЕсли ДанныеТорговойПлощадки.СпособОтраженияПродаж = КонстантыСервиса.СпособОтраженияПродажКомиссия Тогда
				ХозОперацииПоставок = ИспользуемыеХозОперации.ПоставкиКомиссия;
				ХозОперацииПродаж   = ИспользуемыеХозОперации.ПродажиКомиссия;
				ДоговорПродажиЧерезСкладыТорговойПлощадки = ДанныеТорговойПлощадки.ДоговорКомиссия;
			КонецЕсли;
			
			СкладОтгрузки = ДанныеТорговойПлощадки.СкладОтгрузки;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеТорговойПлощадки.Вставить("ХозОперацииПоставок", ХозОперацииПоставок);
	ДанныеТорговойПлощадки.Вставить("ХозОперацииПродаж", ХозОперацииПродаж);
	ДанныеТорговойПлощадки.Вставить("ХозОперацииПередачиВДоставку", ХозОперацииПередачиВДоставку);
	
	БыстрыйОтборВДинамическийСписок = Ложь;
	
	Если ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов" Тогда
		
		ИмяДинамическогоСписка = "СписокДокументыПродажи";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы поставки <%1> (все)'"),
				ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
			
			Если КлючНазначенияИзПараметровФормы = "ВозвратТоваровОтКлиента" Тогда
				ПараметрыФормы.Вставить("КлючНазначенияФормы", "ПоступлениеТоваровОтХранителя");
			КонецЕсли;
		ИначеЕсли КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы продажи <%1> (все)'"),
				ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		ИначеЕсли КлючНазначенияФормы = "РаботаСПродажамиПередачаВДоставкуМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиПередачаВДоставкуМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы передачи в доставку <%1> (все)'"),
				ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по партнеру.
		Если ЭтоЯМ И ЗначениеЗаполнено(СкладОтгрузки) Тогда
			// Пропустить отбор.
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
					И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если ЭтоЯМ И ЗначениеЗаполнено(СкладОтгрузки) Тогда
			// Пропустить отбор.
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
					И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по складу.
		Если ЭтоЯМ И ЗначениеЗаполнено(СкладОтгрузки) Тогда
			БыстрыйОтбор.Вставить("Склад", СкладОтгрузки);
		КонецЕсли;
		
		// Отбор по договорам.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыТорговойПлощадки) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыТорговойПлощадки);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			Если ЭтоРеализацияДляFBS Тогда
				// Пропустить отбор.
			Иначе
				ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(
					ФиксированныеНастройки,
					ДанныеТорговойПлощадки,
					"ВсеДоговоры");
			КонецЕсли;
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиПередачаВДоставкуМП"
					И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыСобственные) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыСобственные);
		КонецЕсли;
		
		// Используемые хоз. операции.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
				И ХозОперацииПоставок <> Неопределено Тогда
			ПараметрыФормы.Вставить("ИспользуемыеХозОперации", ХозОперацииПоставок);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
					И ХозОперацииПродаж <> Неопределено Тогда
			ПараметрыФормы.Вставить("ИспользуемыеХозОперации", ХозОперацииПродаж);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиПередачаВДоставкуМП"
				И ХозОперацииПередачиВДоставку <> Неопределено Тогда
			ПараметрыФормы.Вставить("ИспользуемыеХозОперации", ХозОперацииПередачиВДоставку);
		Иначе
			ПараметрыФормы.Вставить("ИспользоватьЗагрузкуСохраненныхНастроек", Истина);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ИспользоватьЗагрузкуНастроек", Истина);
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы
			+ ?(ПустаяСтрока(КлючНазначенияИзПараметровФормы) Или КлючНазначенияОткрываемойФормы = КлючНазначенияФормы, "", КлючНазначенияИзПараметровФормы));
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.ЗаказКлиента.Форма.ФормаСпискаДокументов" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявки на поставку <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		ИначеЕсли КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказы клиентов <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
		
		// Отбор по партнеру.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по договорам.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыТорговойПлощадки) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыТорговойПлощадки);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			Если ЭтоРеализацияДляFBS Тогда
				// Пропустить отбор.
			ИначеЕсли ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыСобственные) Тогда
				Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыСобственные);
			КонецЕсли;
		КонецЕсли;
		
		// Используемые хоз. операции.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПоставок");
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПродаж");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ИспользоватьЗагрузкуНастроек", Истина);
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных" Тогда
		
		ИмяДинамическогоСписка = "СписокРаспоряженияНаОформление";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы поставки (к оформлению) <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		ИначеЕсли КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы продажи (к оформлению) <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по партнеру.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по договорам.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыТорговойПлощадки) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыТорговойПлощадки);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			Если ЭтоРеализацияДляFBS Тогда
				// Пропустить отбор.
			ИначеЕсли ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыСобственные) Тогда
				Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыСобственные);
			КонецЕсли;
		КонецЕсли;
		
		// Используемые хоз. операции.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПоставок");
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПродаж");
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ТипыРаспоряженийПродаж");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовОтчетыКомиссионеров.Форма.КОформлениюОтчетовКомиссионеров" Тогда
		
		ИмяДинамическогоСписка = "СписокНаОформление";
		
		Если КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчеты комиссионеров о продажах/Реализации через комиссионеров (к оформлению) <%1>'"), 
				ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по партнеру.
		Если Не БыстрыйОтбор.Свойство("Комиссионер") И ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			БыстрыйОтбор.Вставить("Комиссионер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) И ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по договорам.
		ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ВсеДоговоры");
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Акты о расхождениях после передачи товаров <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
		
		// Отбор по партнеру.
		Если ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по договорам.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыТорговойПлощадки) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыТорговойПлощадки);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ТипОснованияАктаОРасхождении", ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПередачаНаКомиссию"));
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументов" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявки на возврат товаров поставки <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		ИначеЕсли КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявки на возврат товаров от клиента <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
		
		// Отбор по партнеру.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по договорам.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыТорговойПлощадки) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыТорговойПлощадки);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			Если ЭтоРеализацияДляFBS Тогда
				// Пропустить отбор.
			ИначеЕсли ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыСобственные) Тогда
				Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыСобственные);
			КонецЕсли;
		КонецЕсли;
		
		// Используемые хоз. операции.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПоставок");
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПродаж");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов" Тогда
		
		ИмяДинамическогоСписка = "СписокРаспоряженияНаОформление";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы возвратов поставки (к оформлению) <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		ИначеЕсли КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы возвратов продажи (к оформлению) <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по партнеру.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		// Отбор по договорам.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыТорговойПлощадки) Тогда
			Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыТорговойПлощадки);
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			Если ЭтоРеализацияДляFBS Тогда
				// Пропустить отбор.
			ИначеЕсли ЗначениеЗаполнено(ДоговорПродажиЧерезСкладыСобственные) Тогда
				Отбор.Вставить("Договор", ДоговорПродажиЧерезСкладыСобственные);
			КонецЕсли;
		КонецЕсли;
		
		// Используемые хоз. операции.
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПоставок");
		ИначеЕсли КлючНазначенияОткрываемойФормы = "РаботаСПродажамиМП" Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ХозОперацииПродаж");
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "ТипыРаспоряженийПродаж");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.ТранспортнаяНакладная.Форма.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП"
				Или КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			ЗаголовокФормы = НСтр("ru = 'Транспортные накладные <%1>'");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Иные отборы.
		ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "Организация");
		ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки, ДанныеТорговойПлощадки, "НастройкиДляТТН");
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Строка(ДанныеТорговойПлощадки.Контрагент) + ", " + Строка(ДанныеТорговойПлощадки.Организация));
		
		ПараметрыФормы.Вставить("ВладелецОткрываемойФормы",     Неопределено);
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.Организация.УникальныйИдентификатор());
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовНДС.Форма.СписокДокументов" Тогда
		
		ИмяДинамическогоСписка = "СписокДокументыНДС";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП"
				Или КлючНазначенияФормы = "РаботаСПродажамиМП" Тогда
			// Устанавливаются параметры формы.
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по контрагенту.
		Если КлючНазначенияФормы = "РаботаСПродажамиМП"
				И ЭтоРеализацияДляFBS Тогда
			// Пропустить отбор.
		ИначеЕсли ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ВладелецОткрываемойФормы",     Неопределено);
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументов" Тогда
		
		ИмяДинамическогоСписка = "СписокДокументыВнутреннегоТовародвижения";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы поставки <%1> (все)'"),
				ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по складу.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(СкладОтгрузки) Тогда
			БыстрыйОтбор.Вставить("Склад", СкладОтгрузки);
		КонецЕсли;
		
		// Отбор по хоз.операциям.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП" 
				И ХозОперацииПоставок <> Неопределено Тогда
			ПараметрыФормы.Вставить("ИспользуемыеХозОперации", ХозОперацииПоставок);
		Иначе
			ПараметрыФормы.Вставить("ИспользоватьЗагрузкуСохраненныхНастроек", Истина);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ИспользоватьЗагрузкуНастроек", Истина);
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению" Тогда
		
		ИмяДинамическогоСписка = "СписокРаспоряженияНаОформление";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "ВнутреннееТовародвижениеМП";
			ПараметрыФормы.Вставить("КлючНазначенияФормы", "ВнутреннееТовародвижение");
			
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы поставки (к оформлению) <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ИспользоватьЗагрузкуСохраненныхНастроек", Истина);
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы",
			Строка(ДанныеТорговойПлощадки.УникальныйИдентификатор) + КлючНазначенияОткрываемойФормы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.ЗаказНаПеремещение.Форма.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказы на перемещение товаров <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
			
		// Отбор по складу.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
			 И ЗначениеЗаполнено(СкладОтгрузки) Тогда
			Отбор.Вставить("СкладПолучатель", СкладОтгрузки);
		КонецЕсли;
		
		БыстрыйОтборВДинамическийСписок = Истина;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);  
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеПеремещения.Форма.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "РаботаСПоставкамиМП" Тогда
			КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Акты о расхождениях после перемещения на склад  <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
			
		// Отбор по складу.
		Если КлючНазначенияОткрываемойФормы = "РаботаСПоставкамиМП"
				И ЗначениеЗаполнено(СкладОтгрузки) Тогда
			Отбор.Вставить("СкладПолучатель", СкладОтгрузки);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.ПриобретениеУслугПрочихАктивов.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			КлючНазначенияОткрываемойФормы = "ВзаиморасчетыМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Приобретение услуг и прочих активов <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
		
		// Отбор по партнеру.
		Если ЗначениеЗаполнено(ДанныеТорговойПлощадки.Партнер) Тогда
			Отбор.Вставить("Партнер", ДанныеТорговойПлощадки.Партнер);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	ИначеЕсли ИмяОткрываемойФормы = "Документ.ВзаимозачетЗадолженности.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			КлючНазначенияОткрываемойФормы = "ВзаиморасчетыМП";
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Взаимозачеты задолженности <%1>'"), ДанныеТорговойПлощадки.Контрагент);
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		БыстрыйОтборВДинамическийСписок = Истина;
		
		// Отбор по контрагенту.
		Если ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			ФиксированныеНастройки = ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(ФиксированныеНастройки,
				ДанныеТорговойПлощадки, "Взаиморасчеты");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.Контрагент.УникальныйИдентификатор());
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка" Тогда
		
		ИмяДинамическогоСписка = "СписокПлатежей";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			КлючНазначенияОткрываемойФормы = "ВзаиморасчетыМП";
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по банковскому счету.
		Если Не БыстрыйОтбор.Свойство("БанковскийСчетОтбор") Тогда
			БыстрыйОтбор.Вставить("БанковскийСчетОтбор", ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка"));
		КонецЕсли;
		
		// Отбор по контрагенту.
		БыстрыйОтбор.Вставить("КонтрагентПредставление", ДанныеТорговойПлощадки.Контрагент);
		
		БыстрыйОтборВДинамическийСписок = Истина;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.КПоступлению" Тогда
		
		ИмяДинамическогоСписка = "ЗаказыКПоступлению";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			// Устанавливаются параметры формы.
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по банковскому счету.
		Если Не БыстрыйОтбор.Свойство("БанковскийСчетОтбор") Тогда
			БыстрыйОтбор.Вставить("БанковскийСчетОтбор", ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка"));
		КонецЕсли;
		
		// Отбор по контрагенту.
		БыстрыйОтбор.Вставить("КонтрагентПредставление", ДанныеТорговойПлощадки.Контрагент);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.ЗаявкиКОплате" Тогда
		
		ИмяДинамическогоСписка = "ЗаявкиКОплате";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			// Устанавливаются параметры формы.
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по банковскому счету.
		Если Не БыстрыйОтбор.Свойство("БанковскийСчетОтбор") Тогда
			БыстрыйОтбор.Вставить("БанковскийСчетОтбор", ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка"));
		КонецЕсли;
		
		// Отбор по операциям.
		Если Не БыстрыйОтбор.Свойство("СписокОперацийОплаты") Тогда
			БыстрыйОтбор.Вставить("СписокОперацийОплаты", Неопределено);
		КонецЕсли;
		
		// Отбор по контрагенту.
		БыстрыйОтбор.Вставить("КонтрагентПредставление", ДанныеТорговойПлощадки.Контрагент);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.ЗаказыКОплате" Тогда
		
		ИмяДинамическогоСписка = "ЗаказыКОплате";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			// Устанавливаются параметры формы.
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по банковскому счету.
		Если Не БыстрыйОтбор.Свойство("БанковскийСчетОтбор") Тогда
			БыстрыйОтбор.Вставить("БанковскийСчетОтбор", ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка"));
		КонецЕсли;
		
		// Отбор по контрагенту.
		БыстрыйОтбор.Вставить("КонтрагентПредставление", ДанныеТорговойПлощадки.Контрагент);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.ВалютныйКонтроль" Тогда
		
		ИмяДинамическогоСписка = "ДокументыВалютногоКонтроля";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			// Устанавливаются параметры формы.
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если Не БыстрыйОтбор.Свойство("Организация") Тогда
			БыстрыйОтбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		// Отбор по банковскому счету.
		Если Не БыстрыйОтбор.Свойство("БанковскийСчетОтбор") Тогда
			БыстрыйОтбор.Вставить("БанковскийСчетОтбор", ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка"));
		КонецЕсли;
		
		// Отбор по контрагенту.
		БыстрыйОтбор.Вставить("КонтрагентПредставление", ДанныеТорговойПлощадки.Контрагент);

	ИначеЕсли ИмяОткрываемойФормы = "Документ.СверкаВзаиморасчетов2_5_11.ФормаСписка" Тогда

		ИмяДинамическогоСписка = "Список";
		
		Если КлючНазначенияФормы = "ВзаиморасчетыМП" Тогда
			ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сверки взаиморасчетов <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы + ", %1");
		Иначе
			Возврат;
		КонецЕсли;
		
		// Отбор по организации.
		Если БыстрыйОтбор.Свойство("Организация") И ЗначениеЗаполнено(БыстрыйОтбор.Организация) Тогда
			Отбор.Вставить("Организация", БыстрыйОтбор.Организация);
		Иначе
			Отбор.Вставить("Организация", ДанныеТорговойПлощадки.Организация);
		КонецЕсли;
		
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокФормы, Отбор.Организация);
		
		// Отбор по контрагенту.
		Если ЗначениеЗаполнено(ДанныеТорговойПлощадки.Контрагент) Тогда
			Отбор.Вставить("Контрагент", ДанныеТорговойПлощадки.Контрагент);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", ДанныеТорговойПлощадки.УникальныйИдентификатор);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ПараметрыФормы.Свойство("КлючНазначенияФормы") Или ПустаяСтрока(ПараметрыФормы.КлючНазначенияФормы) Тогда
		ПараметрыФормы.Вставить("КлючНазначенияФормы", КлючНазначенияОткрываемойФормы
			+ ДанныеТорговойПлощадки.ИдентификаторКлиента);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗаголовокФормы) Тогда
		ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	КонецЕсли;
	
	Если БыстрыйОтбор.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", БыстрыйОтбор);
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	Если ФиксированныеНастройки <> Неопределено Тогда
		ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяДинамическогоСписка) Тогда
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("КлючНазначенияФормы",    КлючНазначенияОткрываемойФормы);
		ДополнительныеСвойства.Вставить("ДанныеТорговойПлощадки", ДанныеТорговойПлощадки);
	
		Если БыстрыйОтборВДинамическийСписок И БыстрыйОтбор.Количество() > 0 Тогда
			ДополнительныеСвойства.Вставить("СтруктураБыстрогоОтбора", БыстрыйОтбор);
		КонецЕсли;
	
		ДополнительныеСвойстваДинСписков = Новый Структура;
		ДополнительныеСвойстваДинСписков.Вставить(ИмяДинамическогоСписка, ДополнительныеСвойства);
	
		ПараметрыФормы.Вставить("ДополнительныеСвойстваДинамическихСписков", ДополнительныеСвойстваДинСписков);
	КонецЕсли;

КонецПроцедуры

// Показывает состояние выполнения действия.
//
// Параметры:
//   Результат                - Структура - любая структура, ожидаются ключи "КодОшибки", "ОписаниеОшибки".
//   ДополнительныеПараметры  - Неопределено - 
//                            - см. НовоеОписаниеПараметровДействия.
//   ВывестиСообщениеОбОшибке - Булево - признак вывода сообщения.
//
Процедура ВывестиСостояние(Результат, ДополнительныеПараметры = Неопределено, ВывестиСообщениеОбОшибке = Ложь) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ПустаяСтрока(Результат.КодОшибки) Тогда
		Если ВывестиСообщениеОбОшибке И Результат.Свойство("ОписаниеОшибки") И Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		КонецЕсли;
		
		Если ВывестиСообщениеОбОшибке
				И Результат.Свойство("Детализация")
				И Результат.Детализация <> Неопределено Тогда
			Префикс = ?(Результат.Свойство("ОписаниеОшибки"), Символы.Таб, "");
			Для Индекс = 0 По Мин(4, Результат.Детализация.ВГраница()) Цикл
				ЭлементКоллекции = Результат.Детализация[Индекс];
				ОбщегоНазначенияКлиент.СообщитьПользователю(Префикс + ЭлементКоллекции);
			КонецЦикла;
			Если Результат.Детализация.ВГраница() > 4 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Префикс + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'и еще %1 аналогичных сообщений'"),
					Результат.Детализация.Количество() - 5));
			КонецЕсли;
		КонецЕсли;

		Если ДополнительныеПараметры <> Неопределено Тогда
			Состояние(ДополнительныеПараметры.ОписаниеДействия,, ДополнительныеПараметры.РезультатСОшибками, БиблиотекаКартинок.ЛоготипOzon2);
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры <> Неопределено Тогда
		Состояние(ДополнительныеПараметры.ОписаниеДействия,, ДополнительныеПараметры.УспешныйРезультат, БиблиотекаКартинок.ЛоготипOzon2);
	КонецЕсли;

КонецПроцедуры

// Возвращает новую структуру с описанием параметров действия.
//
// Возвращаемое значение:
//   Структура из КлючИЗначение - структура с описанием параметров действия.
//
Функция НовоеОписаниеПараметровДействия() Экспорт

	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Действие", "");
	ПараметрыДействия.Вставить("ОписаниеДействия", "");
	ПараметрыДействия.Вставить("УспешныйРезультат", "");
	ПараметрыДействия.Вставить("РезультатСОшибками", "");
	
	Возврат ПараметрыДействия;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. СтандартныеПодсистемыКлиент.ПриПолученииСерверногоОповещения
Процедура ПриПолученииСерверногоОповещения(ИмяОповещения, Результат) Экспорт

	Если ИмяОповещения = "ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные" Тогда
		Оповестить(ИмяОповещения, Результат, "ОбщийМодуль.ИнтеграцияСМаркетплейсамиКлиент.ПриПолученииСерверногоОповещения");
	
	ИначеЕсли ИмяОповещения = "ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьДанные" Тогда
		Оповестить(ИмяОповещения, Результат, "ОбщийМодуль.ИнтеграцияСМаркетплейсамиКлиент.ПриПолученииСерверногоОповещения");
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметров формы Справочник.УчетныеЗаписиМаркетплейсов.Формы.ВыгрузкаЗагрузкаДанных.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//
// Возвращаемое значение:
//   Структура - параметры для открытия формы выгрузки/загрузки данных:
//     * УчетнаяЗапись                              - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись 
//                                                      торговой площадки.
//     * ЗаголовокФормы                             - Строка - заголовок формы при открытии.
//     * ИмяОбъектаМетаданных                       - Строка - полное имя объекта метаданных. 
//                                                      Например: "Обработка.УправлениеПродажамиНаOzon".
//     * ИмяТабличнойЧасти                          - Строка - имя табличной части объекта метаданных.
//     * ИмяМакетаСШаблоном                         - Строка - имя макета объекта метаданных.
//     * ЛистыШаблона                               - Неопределено - используется одностраничный шаблон.
//                                                  - Структура - описание многостраничного шаблона:
//       ** ИмяЛиста                                  - Строка - имя листа.
//       ** ИмяМакетаСШаблоном                        - Строка - имя макета объекта метаданных.
//       ** Служебный                                 - Произвольный - дополнительная служебная информация.
//     * ЭтоЗагрузкаДанных                          - Булево - признак действия: загрузка - значение Истина, выгрузка - 
//                                                      значение Ложь.
//     * ВариантВыгрузкиЗагрузки                    - Строка - вариант загрузки по умолчанию из доступных значений:
//                                                      "ЗаполнениеТаблицы", "ВнешнийФайл", "ИнтеграционнымиМетодами".
//     * ДоступныИнтеграционныеМетоды               - Булево - признак доступности выгрузки/загрузки интеграционными методами.
//     * ЗагружатьНезаполненныеСтроки               - Булево - признак доступности загрузки незаполненных строк.
//     * СсылкаНаОбъект                             - Неопределено, ЛюбаяСсылка - значение, определяющее тип реквизита 
//                                                      выбора объекта выгрузки/загрузки.
//     * СсылкаНаОбъектЗаголовок                    - Строка - заголовок реквизита выбора объекта выгрузки/загрузки.
//     * СсылкаНаОбъектПараметрыВыбора              - Массив Из Структура - массив структур с ключами "Имя" (Строка), 
//                                                      "ПутьКДанным" (Строка, Массив Из Строка) для последующей
//                                                      установки связей параметров выбора для реквизита выбора объекта 
//                                                      выгрузки/загрузки.
//     * СсылкаНаОбъектЗаписыватьЗагружаемыйФайл    - Булево - признак записи файла в присоединенные файлы ссылки на объект.
//     * ПояснениеВариантаЗагрузкиИзМакета          - Строка - текст в форме выгрузки/загрузки при загрузке из макета.
//     * ПодсказкаВариантаЗагрузкиИзМакета          - Строка - текст в подсказке (знак вопроса) в форме выгрузки/загрузки при 
//                                                      загрузке из макета.
//     * ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл - Строка - текст в форме выгрузки/загрузки при загрузке из файла.
//     * ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл - Строка - текст в подсказке (знак вопроса) в форме выгрузки/загрузки 
//                                                      при загрузке из файла.
//     * ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI  - Строка - текст в форме выгрузки/загрузки при загрузке интеграционными 
//                                                      методами.
//     * ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI  - Строка - текст  в подсказке (знак вопроса) в форме выгрузки/загрузки 
//                                                      при загрузке интеграционными методами.
//     * ВидПериода                                 - ПеречислениеСсылка.ДоступныеПериодыОтчета - вид выбираемого периода 
//                                                      выгрузки/загрузки.
//     * ДатаВПериоде                               - Дата - дата, для которой нужно установить период.
//     * ИмяФормыДополнительныхНастроек             - Строка - имя формы, открываемой для заполнения дополнительных настроек.
//     * ПараметрыФормыДополнительныхНастроек       - Структура - параметры открытия формы для заполнения дополнительных 
//                                                      настроек, см. параметры открываемой формы.
//     * ИмяФормыСопоставленияДанных                - Строка - имя формы, открываемой для сопоставления загружаемых данных.
//     * ПодсказкаОткрытияФормыСопоставленияДанных  - Строка - заголовок команды для формы, открываемой для сопоставления 
//                                                      загружаемых данных.
//     * ИмяФормыПослеЗагрузкиДанных                - Строка - имя формы, открываемой после загрузки данных.
//     * ПодсказкаОткрытияФормыПослеЗагрузкиДанных  - Строка - заголовок команды для формы, открываемой после загрузки данных.
//     * ДополнительныеПараметрыФормы               - Произвольный, Неопределено - любые дополнительные параметры, 
//                                                      которые будут переданы в форму выгрузки/загрузки.
//
Функция ПараметрыФормыВыгрузкиЗагрузки(УчетнаяЗапись) Экспорт

	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);

	ПараметрыФормы.Вставить("ЗаголовокФормы", "");

	ПараметрыФормы.Вставить("ИмяОбъектаМетаданных", "");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "");
	ПараметрыФормы.Вставить("ИмяМакетаСШаблоном", "");
	ПараметрыФормы.Вставить("ЛистыШаблона", Неопределено);

	ПараметрыФормы.Вставить("ЭтоЗагрузкаДанных", Истина);
	ПараметрыФормы.Вставить("ВариантВыгрузкиЗагрузки", "ВнешнийФайл");
	ПараметрыФормы.Вставить("ДоступныИнтеграционныеМетоды", Ложь);
	ПараметрыФормы.Вставить("ЗагружатьНезаполненныеСтроки", Ложь);

	ПараметрыФормы.Вставить("СсылкаНаОбъект", Неопределено);
	ПараметрыФормы.Вставить("СсылкаНаОбъектЗаголовок", НСтр("ru = 'Ссылка на объект для выгрузки / загрузки данных'"));
	ПараметрыФормы.Вставить("СсылкаНаОбъектПараметрыВыбора", Новый Массив);		// Для хранения массива структур с ключами "Имя, ПутьКДанным".
	ПараметрыФормы.Вставить("СсылкаНаОбъектЗаписыватьЗагружаемыйФайл", Ложь);	// Устанавливать можно только объектов метаданных,
																				// для которых есть справочник присоединенных файлов.

	ПараметрыФормы.Вставить("ПояснениеВариантаЗагрузкиИзМакета",          "");
	ПараметрыФормы.Вставить("ПодсказкаВариантаЗагрузкиИзМакета",          "");
	ПараметрыФормы.Вставить("ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл", "");
	ПараметрыФормы.Вставить("ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл", "");
	ПараметрыФормы.Вставить("ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI",  "");
	ПараметрыФормы.Вставить("ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI",  "");

	ПараметрыФормы.Вставить("ВидПериода",   ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ДатаВПериоде", Дата(1,1,1));

	ПараметрыФормы.Вставить("ИмяФормыСопоставленияДанных", "");
	ПараметрыФормы.Вставить("ПодсказкаОткрытияФормыСопоставленияДанных", "");

	ПараметрыФормы.Вставить("ИмяФормыДополнительныхНастроек", "");
	ПараметрыФормы.Вставить("ПараметрыФормыДополнительныхНастроек", ПараметрыФормыДополнительныхНастроек());

	ПараметрыФормы.Вставить("ИмяФормыПослеЗагрузкиДанных", "");
	ПараметрыФормы.Вставить("ПодсказкаОткрытияФормыПослеЗагрузкиДанных", "");

	ПараметрыФормы.Вставить("ДополнительныеПараметрыФормы", Неопределено);

	Возврат ПараметрыФормы;

КонецФункции

Функция ДанныеТорговойПлощадкиПустые()

	ДанныеТорговойПлощадкиПустые = Новый Структура;
	ДанныеТорговойПлощадкиПустые.Вставить("ВидМаркетплейса",                           ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.ПустаяСсылка"));
	ДанныеТорговойПлощадкиПустые.Вставить("Организация",                               ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ДанныеТорговойПлощадкиПустые.Вставить("Партнер",                                   ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ДанныеТорговойПлощадкиПустые.Вставить("Контрагент",                                ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ДанныеТорговойПлощадкиПустые.Вставить("ПостфиксЗаголовкаФормы",                    "");
	ДанныеТорговойПлощадкиПустые.Вставить("ИдентификаторКлиента",                      "");
	ДанныеТорговойПлощадкиПустые.Вставить("УникальныйИдентификатор",                   Новый УникальныйИдентификатор());
	ДанныеТорговойПлощадкиПустые.Вставить("ДоговорПродажиЧерезСкладыТорговойПлощадки", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеТорговойПлощадкиПустые.Вставить("ДоговорПродажиЧерезСкладыСобственные",      ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	
	Возврат ДанныеТорговойПлощадкиПустые;

КонецФункции

Функция ПараметрыФормыДополнительныхНастроек()

	ПараметрыФормы = Новый Структура;
	// Основные.
	ПараметрыФормы.Вставить("УчетнаяЗапись",   ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ЗаголовокФормы",  "");
	ПараметрыФормы.Вставить("ВариантНастроек", "");

	// Заполняемые в Справочник.УчетныеЗаписиМаркетплейсов.Формы.ВыгрузкаЗагрузкаДанных.
	ПараметрыФормы.Вставить("СсылкаНаОбъект",                   Неопределено);
	ПараметрыФормы.Вставить("ИмяОбъектаМетаданных",             "");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти",                "");
	ПараметрыФормы.Вставить("ИнформацияПоКолонкам",             Неопределено);
	ПараметрыФормы.Вставить("ЗначенияПараметровСсылкиНаОбъект", Новый Структура);
	
	Возврат ПараметрыФормы;

КонецФункции

Функция НовыйИсточникОповещенияВыгрузкаЗагрузкаДанных()

	ИсточникОповещения = Новый Структура;
	ИсточникОповещения.Вставить("ИдентификаторФормыОповещения", Неопределено);
	ИсточникОповещения.Вставить("ИмяМетода",                    "");

	Возврат ИсточникОповещения;

КонецФункции

// Открывает форму выгрузки/загрузки данных.
//
// Параметры:
//   ПараметрыФормы - Структура - параметры открытия формы, см. ПараметрыФормыВыгрузкиЗагрузки.
//   Уникальность   - Неопределено, Произвольный - ключ, значение которого будет использоваться для поиска уже открытых форм.
//
Процедура ОткрытьФормуВыгрузкиЗагрузкиДанных(ПараметрыФормы, Уникальность = Неопределено) Экспорт

	ОчиститьСообщения();

	ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных",
		ПараметрыФормы,
		,
		?(Уникальность = Неопределено, Новый УникальныйИдентификатор(), Уникальность));

КонецПроцедуры

// Подготавливает параметры открытия формы сопоставления в зависимости от объекта выгрузки/загрузки данных.
//
// Параметры:
//   ТаблицаСопоставленияДанных - ТаблицаЗначений - собирается динамически в зависимости от макета выгрузки/загрузки,
//                                см. Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных.ТаблицаСопоставленияДанных.
//   ДанныеДляСопоставления     - Массив Из Число - идентификаторы выделенных строк ТаблицаСопоставленияДанных.
//   Параметры                  - см. Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных.ПараметрыПодготовкиКСопоставлениюДанных.
//
// Возвращаемое значение:
//   Структура Из КлючИЗначение - список параметров в зависимости от объекта выгрузки/загрузки данных.
//
Функция ПодготовитьПараметрыФормыСопоставленияИзВыгрузкиЗагрузкиДанных(Знач ТаблицаСопоставленияДанных,
		Знач ДанныеДляСопоставления, Параметры) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПолеОбработчикаСобытияПриИзменении", "");

	Если Параметры.ИмяОбъектаМетаданных = "Обработка.УправлениеПродажамиНаOzon" Тогда

		ДанныеВыделенныхСтрок = Новый Массив;

		ПараметрыФормы.ПолеОбработчикаСобытияПриИзменении = "ТаблицаСопоставленияДанных_" + "Номенклатура";

		Если Параметры.ИмяТабличнойЧасти = "ДанныеПоставок"
			Или Параметры.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат"
			Или Параметры.ИмяТабличнойЧасти = "ДанныеОРеализованныхТоварах" Тогда

			Если Параметры.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда
				ПараметрыФормы.Вставить("ИмяИдентификатора", "ИдентификаторSKU");
			Иначе
				ПараметрыФормы.Вставить("ИмяИдентификатора", "ИдентификаторПубликации");
			КонецЕсли;

			МассивДобавленныхИдентификаторов = Новый Массив;

			Для Каждого ИдентификаторСтроки Из ДанныеДляСопоставления Цикл
				СтрокаДанных = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если СтрокаДанных <> Неопределено Тогда
					Если СтрокаДанных.РезультатСопоставленияСтроки <> "СтрокаНеСопоставлена"
						Или ПустаяСтрока(СтрокаДанных[ПараметрыФормы.ИмяИдентификатора])
						Или СтрокаДанных[ПараметрыФормы.ИмяИдентификатора] = "<...>" Тогда
						Продолжить;
					ИначеЕсли МассивДобавленныхИдентификаторов.Найти(СтрокаДанных[ПараметрыФормы.ИмяИдентификатора])
							<> Неопределено Тогда
						Продолжить;
					КонецЕсли;

					МассивДобавленныхИдентификаторов.Добавить(СтрокаДанных[ПараметрыФормы.ИмяИдентификатора]);

					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("ИдентификаторПубликации", "");
					ДанныеСтроки.Вставить("ИдентификаторОбъектаМаркетплейса", "");
					ДанныеСтроки.Вставить("НаименованиеОбъектаМаркетплейса", "");
					ДанныеСтроки.Вставить("ПредставлениеОбъектаМаркетплейса", "");
					ДанныеСтроки.Вставить("ВидОбъектаМаркетплейса",
						ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар"));
					ДанныеСтроки.Вставить("Номенклатура",
						ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
					ДанныеСтроки.Вставить("Характеристика",
						ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
					ДанныеСтроки.Вставить("Упаковка",
						ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
					ДанныеСтроки.Вставить("Статус",
						ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ПустаяСсылка"));
					ДанныеСтроки.Вставить("Категория", Неопределено);
					ДанныеСтроки.Вставить("ИсточникКатегорииМаркетплейса", Неопределено);
					ДанныеСтроки.Вставить("ИдентификаторКатегорииМаркетплейса", "");
					ДанныеСтроки.Вставить("НаименованиеКатегорииМаркетплейса", "");
					ДанныеСтроки.Вставить("ВариантЗагрузки", 2);
					ДанныеСтроки.Вставить("ИндексСтатуса", 5);

					ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаДанных);

					Если Параметры.ИмяТабличнойЧасти = "ДанныеПоставок"
						Или Параметры.ИмяТабличнойЧасти = "ДанныеЗаявокНаВозврат" Тогда
						ДанныеСтроки.Вставить("ИдентификаторFBOSKU",          СтрокаДанных["ИдентификаторSKU"]);
						ДанныеСтроки.Вставить("ИдентификаторFBSSKU",          СтрокаДанных["ИдентификаторSKU"]);
					КонецЕсли;

					ДанныеВыделенныхСтрок.Добавить(ДанныеСтроки);
				КонецЕсли;
			КонецЦикла;

			Если ДанныеВыделенныхСтрок.Количество() = 0 Тогда
				ПредставлениеКолонки = НСтр("ru = 'Идентификатор 1С'");
				Параметры.СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для выбранных позиций уже выполнено сопоставление номенклатуре учетной системы 1С или не заполнено значение в колонке ""%1"".'"),
					ПредставлениеКолонки);
			КонецЕсли;
		КонецЕсли;

		ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса",  Параметры.УчетнаяЗапись);
		ПараметрыФормы.Вставить("УстановитьВариантЗагрузки",  Истина);
		ПараметрыФормы.Вставить("ВариантЗагрузкиДанных",      1); // Обновление и загрузка новых позиций.
		ПараметрыФормы.Вставить("ЗагрузитьИзображения",       Истина);
		ПараметрыФормы.Вставить("ОбработкаПереданныхПозиций", Истина);
		ПараметрыФормы.Вставить("ДанныеВыделенныхСтрок",      ДанныеВыделенныхСтрок);
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

Функция ПолучитьФиксированныеНастройкиОткрытияСпискаДокументов(Знач НастройкиКомпоновкиДанных, ДанныеТорговойПлощадки, ВидНастройки)

	Если ЗначениеЗаполнено(ВидНастройки) Тогда
		Если НастройкиКомпоновкиДанных = Неопределено Тогда
			НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
		КонецЕсли;

		Если ВидНастройки = "ВсеДоговоры" Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки);
			Если ДанныеТорговойПлощадки.Свойство("ДоговорПродажиЧерезСкладыСобственные") Тогда
				СписокЗначений.Добавить(ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыСобственные);
			КонецЕсли;
			Если ДанныеТорговойПлощадки.Свойство("ДоговорКомиссия") Тогда
				СписокЗначений.Добавить(ДанныеТорговойПлощадки.ДоговорКомиссия);
			КонецЕсли;
			Если ДанныеТорговойПлощадки.Свойство("ДоговорРеализация") Тогда
				СписокЗначений.Добавить(ДанныеТорговойПлощадки.ДоговорРеализация);
			КонецЕсли;

			ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Договор");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		КонецЕсли;

		Если ВидНастройки = "НастройкиДляТТН" Тогда
			ГруппаОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Грузополучатель");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ДанныеТорговойПлощадки.Контрагент;

			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Грузоотправитель");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ДанныеТорговойПлощадки.Контрагент;
		КонецЕсли;

		Если ВидНастройки = "Организация" Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			СписокЗначений.Добавить(ДанныеТорговойПлощадки.Организация);

			ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		КонецЕсли;

		Если ВидНастройки = "Взаиморасчеты" Тогда
			ГруппаОтбораИли = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КонтрагентДебитор");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ДанныеТорговойПлощадки.Контрагент;

			ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КонтрагентКредитор");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ДанныеТорговойПлощадки.Контрагент;
		КонецЕсли;

		Если ВидНастройки = "ХозОперацииПоставок" И ЗначениеЗаполнено(ДанныеТорговойПлощадки.ХозОперацииПоставок) Тогда
			ХозОперацииПоставок =
				ИнтеграцияСМаркетплейсомOzonВызовСервера.ХозОперацииРаздела(ДанныеТорговойПлощадки.ХозОперацииПоставок);
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ХозОперацииПоставок);

			ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		КонецЕсли;

		Если ВидНастройки = "ХозОперацииПродаж" И ЗначениеЗаполнено(ДанныеТорговойПлощадки.ХозОперацииПродаж) Тогда
			ХозОперацииПродаж =
				ИнтеграцияСМаркетплейсомOzonВызовСервера.ХозОперацииРаздела(ДанныеТорговойПлощадки.ХозОперацииПродаж);
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ХозОперацииПродаж);

			ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		КонецЕсли;

		Если ВидНастройки = "ТипыРаспоряженийПродаж" Тогда
			Типы = Новый СписокЗначений;
			Типы.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
			Типы.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
			Типы.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));

			ЭлементОтбора = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТипРаспоряжения");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = Типы;
		КонецЕсли;
	Иначе
		НастройкиКомпоновкиДанных = Неопределено;
	КонецЕсли;

	Возврат НастройкиКомпоновкиДанных;

КонецФункции

#Область ВыгрузкаЗагрузкаДанныхСлужебныеПроцедурыИФункции

#Область ВыборСкладовИСерий

Процедура ЗаполнитьСкладВВыделенныхСтроках(Форма, ИмяКоманды, ЗначенияПараметров)

	ВыделенныеСтроки = Форма.Элементы.ТаблицаСопоставленияДанных.ВыделенныеСтроки;

	ЗаполнятьСклад = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Форма,
		Форма.ТаблицаСопоставленияДанных,
		НСтр("ru='Таблица загружаемых данных'"),
		ВыделенныеСтроки);
	Если ЗаполнятьСклад Тогда
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));

		СтруктураОтбора = Новый Структура("ВыборГруппыСкладов, ДокументПродажи, ЭтоГруппа", МассивОтбора, Истина, Ложь);
		СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);

		ПустойСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ДанныеФормы = Новый Структура("Склад, СкладГруппа, ГруппаСкладов", ПустойСклад, Ложь, ПустойСклад);
		ЗаполнитьЗначенияСвойств(ДанныеФормы, Форма);

		Если ДанныеФормы.СкладГруппа Тогда
			СтруктураПараметров.Вставить("ГруппаСкладов", ДанныеФормы.Склад);
		ИначеЕсли ЗначениеЗаполнено(ДанныеФормы.ГруппаСкладов) Тогда
			СтруктураПараметров.Вставить("ГруппаСкладов", ДанныеФормы.ГруппаСкладов);
		Иначе
			СтруктураПараметров.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		КонецЕсли;

		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);
		ПараметрыОповещения.Вставить("ВыделенныеСтроки",   ВыделенныеСтроки);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСкладВВыделенныхСтрокахЗавершение",
			ЭтотОбъект,
			ПараметрыОповещения);

		ОткрытьФорму(
			"Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			Форма,
			,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Обработчик оповещения.
//
Процедура ЗаполнитьСкладВВыделенныхСтрокахЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ОбновитьСтатистикуСопоставления", Истина);
	Параметры.Вставить("ВыделенныеСтроки", ДополнительныеПараметры.ВыделенныеСтроки);
	Параметры.Вставить("ВыбранныйСклад", Результат);

	ИсточникОповещения = НовыйИсточникОповещенияВыгрузкаЗагрузкаДанных();
	ИсточникОповещения.ИдентификаторФормыОповещения = ДополнительныеПараметры.ИдентификаторФормы;
	ИсточникОповещения.ИмяМетода                    = "ЗаполнитьСкладыВВыделенныхСтроках";

	Оповестить(
		"ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере",
		Параметры,
		ИсточникОповещения);

КонецПроцедуры

Процедура ОткрытьПодборСкладовИСерий(Форма, СтандартнаяОбработка, Знач Параметры)

	ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Форма, Параметры);
	Если ПараметрыФормы <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"Обработка.ЗапросКоличестваИСерий.Форма",
			ПараметрыФормы,
			Форма,
			,
			,
			,
			Новый ОписаниеОповещения("ОбработатьВыборСкладаИСерии", ЭтотОбъект, ПараметрыФормы));
	КонецЕсли;

КонецПроцедуры

// Подготавливает параметры открытия формы запроса количества и серий.
//
// Параметры:
//   Форма          - ФормаКлиентскогоПриложения  - форма, для которой подготавливаются параметры.
//   ПараметрыФормы - см. ОбеспечениеВДокументахКлиентСервер.ПараметрыФормыЗапросаКоличестваИСерий.
//
// Возвращаемое значение:
//   - Неопределено - если не пройдены проверки заполнения.
//   - Структура Из КлючИЗначение.
//
Функция ПараметрыФормыЗапросаКоличестваИСерий(Форма, Знач ПараметрыФормы = Неопределено)

	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Режим = ПараметрыФормы.Режим;
	Иначе
		Режим = ОбеспечениеВДокументахКлиентСервер.РежимПодборСкладов();
	КонецЕсли;

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();

	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
				Форма,
				Форма.ТаблицаСопоставленияДанных,
				Форма.Элементы.ТаблицаСопоставленияДанных.ТекущаяСтрока,
				ПараметрыПроверки,
				Форма.Склад,
				Режим) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(ПараметрыФормы) <> Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;

	ПараметрыФормы.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);

	Возврат ПараметрыФормы;

КонецФункции

// Обработчик оповещения.
//
Процедура ОбработатьВыборСкладаИСерии(ВыбранноеЗначение, Знач ПараметрыФормы) Экспорт

	Если Не ОбеспечениеВДокументахКлиент.ЕстьПодобранныеТовары(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	ОбеспечениеВДокументахКлиент.ПоказатьВопросСнятьФлагОтгружатьОднойДатойПослеВыбораОбеспечения(
		ЭтотОбъект,
		ВыбранноеЗначение,
		ПараметрыФормы,
		"ОбработатьВыборСкладаИСерииПослеВопроса");

КонецПроцедуры

// Обработчик оповещения.
//
Процедура ОбработатьВыборСкладаИСерииПослеВопроса(Результат, Знач Параметры) Экспорт

	Параметры.Вставить("ОбновитьСтатистикуСопоставления", Истина);
	ПараметрыЗаполнения =
		ОбеспечениеВДокументахКлиент.ПараметрыОбработкиДатОтгрузкиПослеЗаполненияОбеспечения(Результат);
	Параметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);

	ИсточникОповещения = НовыйИсточникОповещенияВыгрузкаЗагрузкаДанных();
	ИсточникОповещения.ИмяМетода                        = "ОбработатьВыборСкладаИСерии";
	Если Параметры.Свойство("ПараметрыФормы") И Параметры.ПараметрыФормы.Свойство("ИдентификаторФормы") Тогда
		ИсточникОповещения.ИдентификаторФормыОповещения = Параметры.ПараметрыФормы.ИдентификаторФормы;
	КонецЕсли;

	Оповестить(
		"ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере",
		Параметры,
		ИсточникОповещения);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Отправления

// Процедура заполнения сведений по товарам и распределение по отправлениям на основании документов.
//
// Параметры:
//   Результат - Произвольный -
//   ДополнительныеПараметры - Структура:
//     * МассивСсылок - Массив Из ДокументСсылка.ЗаказКлиента - основание.
//     * Форма        - ФормаКлиентскогоПриложения - форма-владелец.
//
Процедура ЗаполнитьИРаспределитьВызов(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	МассивСсылок = Новый Массив();
	Если Не ДополнительныеПараметры.Свойство("МассивСсылок", МассивСсылок) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрано ни одного документа, для которого возможно заполнение сведений по товарам.'"));
		Возврат;
	КонецЕсли; 
	
	Ссылка       = МассивСсылок[0];
	ДанныеЗаказа = Неопределено;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ДанныеЗаказа = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПолучитьДанныеЗаказа(Ссылка, );
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаТоваровХранителю") 
				Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеЗаказа = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПолучитьДанныеЗаказа(, Ссылка);
	КонецЕсли;
	
	Если ДанныеЗаказа = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет заказов для заполнения сведений по товарам.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", ДанныеЗаказа.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("Заказ",         ДанныеЗаказа.Заказ);
	ПараметрыОткрытия.Вставить("НомерЗаказа",   ДанныеЗаказа.НомерЗаказа);
	
	ОткрытьФорму(
		"РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Форма.ЗаполнениеДанныхЭкземпляров",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		ДанныеЗаказа.Заказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
