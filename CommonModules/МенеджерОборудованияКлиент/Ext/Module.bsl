#Область ПрограммныйИнтерфейс

#Область Системные

// Производит получение события от устройства.
// 
// Параметры:
//  ОписаниеСобытия - Структура:
//   * Источник - Строка - Источник внешнего события.
//   * Событие - Строка - Наименование события.
//   * Данные - Строка - Данные для события.
//  ОписаниеОшибки - Строка - описание ошибки
//
// Возвращаемое значение:
//  Структура.
//  Неопределено.
//
Функция ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	// Поиск обработчика события
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИДУстройства = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИДУстройства) И Подключение.ИменаСобытий.Количество() > 0) Тогда
			// Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				// Обрабатываем сообщение
				РезультатОбработки = Подключение.ОбработчикДрайвера.ОбработатьСобытие(ОбъектДрайвера, Подключение, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные);
				// Оповещаем 
				Если РезультатОбработки.Результат Тогда 
					Результат = Новый Структура();
					Результат.Вставить("ИмяСобытия", РезультатОбработки.Событие);
					Результат.Вставить("Параметр",   РезультатОбработки.Данные);
					Результат.Вставить("Источник",   "ПодключаемоеОборудование");
					Возврат Результат;
				Иначе
					ОписаниеОшибки = ОписаниеСобытия.Событие;
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит обработку данных события, полученных от клиента.
// 
// Параметры:
//  ОписаниеСобытия - Структура:
//   * Источник - Строка - Источник внешнего события.
//   * Событие - Строка - Наименование события.
//   * Данные - Строка - Данные для события.
//  ОписаниеОшибки - Строка - описание ошибки
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	// Поиск обработчика события
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИДУстройства = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИДУстройства) И Подключение.ИменаСобытий.Количество() > 0) Тогда
			// Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = Подключение.ОбъектДрайвера;
				// Обрабатываем сообщение
				РезультатОбработки = Подключение.ОбработчикДрайвера.ОбработатьСобытие(ОбъектДрайвера, Подключение, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные);
				// Оповещаем 
				Если РезультатОбработки.Результат Тогда 
					Оповестить(РезультатОбработки.Событие, РезультатОбработки.Данные, "ПодключаемоеОборудование");
				Иначе
					Результат = Ложь;
					ОписаниеОшибки = ОписаниеСобытия.Событие;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры подключения драйвера.
// 
// Параметры:
//  ДанныеДрайвера - Структура - Данные драйвера.
// 
// Возвращаемое значение:
//  Структура - Параметры подключения:
//   *Наименование - Строка.
//   *ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования.
//   *ПодключениеИзМакета - Булево.
//   *ПодключениеЛокальноПоИдентификатору - Булево. 
//   *ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование.
//   *ВерсияДрайвера - Строка.
//   *ИмяМакетаДрайвера - Строка.
//   *РевизияИнтерфейса - Строка.
//   *ШиринаСтроки - Строка.
//   *ПечатьКвитанцийНаТерминале - Булево. 
//   *КороткиеСлипЧеки - Булево.
//   *ВыдачиНаличныхДенежныхСредств - Булево. 
//   *ОплатаЭлектроннымиСертификатами - Булево.
//   *СтолбцовНаДисплее - Число.
//   *СтрокНаДисплее - Число. 
//   *ДисплейОтображаетТекст - Булево.
//   *ДисплейОтображаетГрафику - Булево.
//   *ДисплейОтображаетQRКод - Булево.  
//   *ДисплейОтображаетHTML - Булево.
//   *ДисплейОтображаетСтатус - Булево.
//   *ИдентификаторУстройства - УникальныйИдентификатор.
//   *ОбъектДрайвера - Неопределено -
//   *Параметры - Неопределено -
//   *ОбработчикДрайвера - Неопределено -
//
Функция ПараметрыПодключенияДрайвера(ДанныеДрайвера) Экспорт
	
	Подключение = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ДанныеДрайвера);
	Подключение.Вставить("ОбъектДрайвера"    , Неопределено);
	Подключение.Вставить("Параметры"         , Неопределено);   
	Подключение.Вставить("ОбработчикДрайвера", ПодключаемоеОборудованиеДрайверКлиент);
	Возврат Подключение;
	
КонецФункции

// Параметры подключения устройства.
// 
// Параметры:
//  ДанныеУстройства - Неопределено, Произвольный, Структура - Данные устройства
// 
// Возвращаемое значение:
//  Структура - Параметры подключения:
//   * Наименование - Строка.
//   * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования.
//   * ПодключениеИзМакета - Булево.
//   * ПодключениеЛокальноПоИдентификатору - Булево. 
//   * ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование.
//   * ВерсияДрайвера - Строка.
//   * ИмяМакетаДрайвера - Строка.
//   * РевизияИнтерфейса - Строка.
//   * ШиринаСтроки - Строка.
//   * ПечатьКвитанцийНаТерминале - Булево. 
//   * КороткиеСлипЧеки - Булево.
//   * ВыдачиНаличныхДенежныхСредств - Булево.
//   * ОплатаЭлектроннымиСертификатами - Булево. 
//   * ЧастичнаяОтмена - Булево. 
//   * СписокОперацийПоКартам - Булево.
//   * ConsumerPresentedQR - Булево.   
//   * ПокупкаСЗачислениемНаКарту - Булево.  
//   * СтолбцовНаДисплее - Число.
//   * СтрокНаДисплее - Число. 
//   * ДисплейОтображаетТекст - Булево.
//   * ДисплейОтображаетГрафику - Булево.
//   * ДисплейОтображаетQRКод - Булево.
//   * ИдентификаторУстройства - УникальныйИдентификатор.
//   * ОбъектДрайвера - Неопределено -
//   * Параметры - Неопределено -
//   * ОбработчикДрайвера - Неопределено -
//   * Клиенты - Массив из СправочникСсылка.РабочиеМеста -
//   * Ссылка - СправочникСсылка.ПодключаемоеОборудование.
//   * СетевоеОборудование - Булево. 
//   * КоличествоПодключенных - Число -
//   * ИменаСобытий - Массив Из Строка -
//   * ИДУстройства - Строка.
//
Функция ПараметрыПодключенияУстройства(ДанныеУстройства) Экспорт
	
	Подключение = ПараметрыПодключенияДрайвера(ДанныеУстройства);
	Подключение.Вставить("Клиенты", Новый Массив());
	Подключение.Вставить("Ссылка"                  , ДанныеУстройства.Ссылка);
	Подключение.Вставить("Параметры"               , ДанныеУстройства.Параметры);
	Подключение.Вставить("ПараметрыXML"            , ДанныеУстройства.ПараметрыXML);    
	Подключение.Вставить("ПараметрыПриложенияXML"  , ДанныеУстройства.ПараметрыПриложенияXML);    
	Подключение.Вставить("СетевоеОборудование"     , ДанныеУстройства.СетевоеОборудование);
	Подключение.Вставить("КоличествоПодключенных"  , 0);
	Подключение.Вставить("ИменаСобытий"            , Новый Массив());
	Подключение.Вставить("ИДУстройства"            , "");
	Возврат Подключение;
	
КонецФункции

// Событие устройств ввода новый формат.
// 
// Возвращаемое значение:
//  Булево - Событие устройств ввода новый формат
//
Функция СобытиеУстройствВводаНовыйФормат() Экспорт
	
	СтандартнаяОбработка = Истина;
	НовыйФормат = Ложь;
	МенеджерОборудованияКлиентПереопределяемый.СобытиеУстройствВводаНовыйФормат(НовыйФормат, СтандартнаяОбработка);
	Результат = ?(Не СтандартнаяОбработка, НовыйФормат, Ложь); 
	
	Возврат Результат;
	
КонецФункции

// Возвращает необходимость печати слип чека алкогольной продукции. 
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПечатьСлипЧекаАлкогольнойПродукции() Экспорт
	
	Результат = Ложь;
	ПечатьСлипЧека = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентПереопределяемый.ПечатьСлипЧекаАлкогольнойПродукции(ПечатьСлипЧека, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ПечатьСлипЧека);
	Возврат Результат; 
	
КонецФункции                               

// Возвращает необходимость печати слип чека эквайринговой операции. 
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПечатьСлипЧекаЭквайринговойОперации() Экспорт
	
	ПечатьСлипЧека = Истина;      
	ПолныйСлипЧек  = Истина; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентПереопределяемый.ПечатьСлипЧекаЭквайринговойОперации(ПечатьСлипЧека, ПолныйСлипЧек, СтандартнаяОбработка);
	
	Результат = Новый Структура();
	Результат.Вставить("ПечатьСлипЧека", ?(СтандартнаяОбработка, Истина, ПечатьСлипЧека)); 
	Результат.Вставить("ПолныйСлипЧек" , ?(СтандартнаяОбработка, Истина, ПолныйСлипЧек));
	
	Возврат Результат; 
	
КонецФункции 

// Возвращает необходимость вывода QR-кода чека на дисплей покупателя после фискализации. 
// 
// Возвращаемое значение:
//  Булево.
//
Функция ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации() Экспорт
	
	Результат = Истина;
	ВыводQRКодаЧека = Результат; 
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентПереопределяемый.ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации(ВыводQRКодаЧека, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, ВыводQRКодаЧека);
	Возврат Результат; 
	
КонецФункции

// Возвращает глобальные переменные подключаемого оборудования
//
// Возвращаемое значение:
//  Структура:
//   * ПараметрыПодключенияПО - Массив из Структура
//   * ДрайверыОборудования - Соответствие из КлючИЗначение
//   * ПоследнийСлипЧек - Строка
//   * ЗавершениеРаботыСистемы - Булево
//   * ДанныеОчереди - Неопределено
//   * ФискальныеУстройства - Массив из Структура
//   * ПроверкиКодаМаркировки - Массив из Структура
//   * РабочееМесто - СправочникСсылка.РабочиеМеста
//   * MACАдрес - Строка
//   * ДлительныеОперации - Соответствие из КлючИЗначение
//   * ПромежуточныйРезультат - Соответствие из КлючИЗначение
//
Функция ПодключаемоеОборудование() Экспорт
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие();
	КонецЕсли;
	
	ПодключаемоеОборудование = ПараметрыПриложения.Получить("БПО.ПодключаемоеОборудование");
	
	Если ПодключаемоеОборудование = Неопределено Тогда
		ПодключаемоеОборудование = Новый Структура();
		ПодключаемоеОборудование.Вставить("ПараметрыПодключенияПО" , Новый Массив());
		ПодключаемоеОборудование.Вставить("ДрайверыОборудования"   , Новый Соответствие());
		ПодключаемоеОборудование.Вставить("ПоследнийСлипЧек"       , "");
		ПодключаемоеОборудование.Вставить("ЗавершениеРаботыСистемы", Ложь);
		ПодключаемоеОборудование.Вставить("ДанныеОчереди"          , Неопределено);
		ПодключаемоеОборудование.Вставить("ФискальныеУстройства"   , Новый Массив());
		ПодключаемоеОборудование.Вставить("ПроверкиКодаМаркировки" , Новый Массив());
		ПодключаемоеОборудование.Вставить("РабочееМесто"           , Неопределено);
		ПодключаемоеОборудование.Вставить("ЕстьПодключаемоеОборудование", Ложь);
		ПодключаемоеОборудование.Вставить("MACАдрес"               , "");
		ПодключаемоеОборудование.Вставить("ДлительныеОперации"     , Новый Соответствие());
		ПодключаемоеОборудование.Вставить("ПромежуточныйРезультат" , Новый Соответствие());
		ПараметрыПриложения.Вставить("БПО.ПодключаемоеОборудование", ПодключаемоеОборудование);
	КонецЕсли;
	
	Возврат ПодключаемоеОборудование;
	
КонецФункции

// Получить описание драйвера.
//
// Параметры:
//  СтрокаXML - Строка.
//
// Возвращаемое значение:
//  см. МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера
//
Функция ПолучитьОписаниеДрайвера(СтрокаXML) Экспорт
	
	ПараметрыXML = ОбщегоНазначенияБПОКлиент.ПрочитатьКорневойЭлементXML(СтрокаXML);      
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыОписанияДрайвера();
	Параметры.НаименованиеДрайвера = ?(ПараметрыXML.Свойство("Name"), ПараметрыXML.Name, "");
	Параметры.ОписаниеДрайвера     = ?(ПараметрыXML.Свойство("Description"), ПараметрыXML.Description, "");
	Параметры.ТипОборудования      = ?(ПараметрыXML.Свойство("EquipmentType"), ПараметрыXML.EquipmentType, "");
	Параметры.ВерсияДрайвера       = ?(ПараметрыXML.Свойство("DriverVersion"), ПараметрыXML.DriverVersion, ""); 
	Параметры.ВерсияИнтеграционногоКомпонента = ?(ПараметрыXML.Свойство("IntegrationComponentVersion"), ПараметрыXML.IntegrationComponentVersion, "");    
	Параметры.URLЗагрузкиДрайвера   = ?(ПараметрыXML.Свойство("DownloadURL"), ПараметрыXML.DownloadURL, "");
	Параметры.ЛогДрайвераПутьКФайлу = ?(ПараметрыXML.Свойство("LogPath"), ПараметрыXML.LogPath, "");
	Параметры.ИнтеграционныйКомпонент   = ПараметрыXML.Свойство("IntegrationComponent") И ВРег(ПараметрыXML.IntegrationComponent) = "TRUE"; 
	Параметры.ОсновнойДрайверУстановлен = ПараметрыXML.Свойство("MainDriverInstalled") И ВРег(ПараметрыXML.MainDriverInstalled) = "TRUE"; 
	Параметры.ЛогДрайвераВключен        = ПараметрыXML.Свойство("LogIsEnabled") И ВРег(ПараметрыXML.LogIsEnabled) = "TRUE"; 
	Параметры.ПоддерживаетсяЛокализация = ПараметрыXML.Свойство("LocalizationSupported") И ВРег(ПараметрыXML.LocalizationSupported) = "TRUE"; 
	Параметры.ЭтоЭмулятор               = ПараметрыXML.Свойство("IsEmulator") И ВРег(ПараметрыXML.IsEmulator) = "TRUE"; 
	Параметры.ИнформацияОбОкружении     = ?(ПараметрыXML.Свойство("EnvironmentInformation"), ПараметрыXML.EnvironmentInformation, ""); 
	Параметры.АвтоНастройкаОборудования = ПараметрыXML.Свойство("AutoSetup") И ВРег(ПараметрыXML.AutoSetup) = "TRUE";
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область РабочееМесто         

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = РабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		
		РабочееМестоИдентификаторКлиента = ИдентификаторКлиентаДляРабочегоМеста();   
	#Если Не ВебКлиент Тогда   
		РабочееМестоИмяКомпьютера = ИмяКомпьютера();
	#Иначе 
		РабочееМестоИмяКомпьютера = "";
	#КонецЕсли
		ПодключаемоеОборудование = ПодключаемоеОборудование();
		MACАдрес = ПодключаемоеОборудование.MACАдрес;
		МассивРабочихМест = НайтиРабочиеМестаПоИдентификатору(РабочееМестоИдентификаторКлиента, РабочееМестоИмяКомпьютера, MACАдрес);
		Если МассивРабочихМест.Количество() = 0 Тогда
			ЕстьПодключаемоеОборудование = ПодключаемоеОборудование.ЕстьПодключаемоеОборудование;
			Если ОбщегоНазначенияБПОКлиент.ЭтоВебКлиент() И ЕстьПодключаемоеОборудование Тогда  
				Если ПустаяСтрока(MACАдрес) Тогда
					Контекст = Новый Структура();
					Контекст.Вставить("ИдентификаторКлиента", РабочееМестоИдентификаторКлиента);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеMACАдресаЗавершение", ЭтотОбъект, Контекст);
					УстанавливатьРасширениеБраузера = Истина;
					НачатьПолучениеMACАдреса(Оповещение, УстанавливатьРасширениеБраузера);
				Иначе
					ПривязатьРабочееМестоПоMACАдресу(РабочееМестоИдентификаторКлиента, MACАдрес);
				КонецЕсли;
				Результат = Ложь;
			Иначе
				Параметры = Новый Структура;
				Параметры.Вставить("ИдентификаторКлиента", РабочееМестоИдентификаторКлиента);
				Параметры.Вставить("ИмяКомпьютера"       , РабочееМестоИмяКомпьютера);  
				РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);  
				Результат = Истина;
			КонецЕсли;
		Иначе
			РабочееМесто = МассивРабочихМест[0];   
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат И (РабочееМесто <> РабочееМестоКлиента()) Тогда
		УстановитьРабочееМесто(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура для выбора рабочего места текущего сеанса.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места.
// 
// Параметры:
//  ОбработкаОповещения - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - Строка - идентификатор клиента
//
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	УстановитьРежимПодключенияРасширенияИнформацииОКомпьютере(Истина);
	ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места.
// 
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  Параметры - Структура - параметры операции.
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место.
// 
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место клиента.
//
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ПодключаемоеОборудование.РабочееМесто = РабочееМесто;
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Возвращает текущее рабочее место на клиенте.
//
// Параметры:
//  ЗапрашиватьНаСервере - Булево - если Истина, то в случае когда рабочее место отсутствует на клиенте, 
//                         будет выполнен запрос на сервер.
//
// Возвращаемое значение:
//  СправочникСсылка.РабочиеМеста
//
Функция РабочееМестоКлиента(ЗапрашиватьНаСервере = Истина) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	РабочееМесто = ПодключаемоеОборудование.РабочееМесто;
	Если ЗапрашиватьНаСервере И Не ЗначениеЗаполнено(РабочееМесто) Тогда
		ИнформацияОРабочемМесте = МенеджерОборудованияВызовСервера.ИнформацияОРабочемМестеКлиента();
		РабочееМесто = ИнформацияОРабочемМесте.РабочееМесто;
		ПодключаемоеОборудование.РабочееМесто = РабочееМесто;
		ПодключаемоеОборудование.ЕстьПодключаемоеОборудование = ИнформацияОРабочемМесте.ЕстьПодключаемоеОборудование;
	КонецЕсли;
	
	Возврат РабочееМесто;
	
КонецФункции

// Возвращает массив содержащий рабочие места по найденным параметрам.
//
// Параметры:
//  ИдентификаторКлиента - Строка - идентификатор клиента для рабочего места       
//  ИмяКомпьютера - Строка - Имя компьютера   
//  MACАдрес - Строка - 
//
// Возвращаемое значение:
//  Массив.
Функция НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента, ИмяКомпьютера, MACАдрес = "") Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИдентификатору(ИдентификаторКлиента, ИмяКомпьютера, MACАдрес);
	
КонецФункции

// Открытие формы списка рабочих мест.
// 
// Параметры:
//  ПараметрКоманды - Структура - параметры команды.
//  ПараметрыВыполненияКоманды - Структура:
//   *Источник - ФормаКлиентскогоПриложения - форма родитель.
//   *Уникальность - УникальныйИдентификатор - уникальный идентификатор формы.
//   *Окно - ОкноКлиентскогоПриложения - окно приложения.
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Идентификатор клиента для рабочего места.
// 
// Возвращаемое значение:
//  Строка - Идентификатор клиента для рабочего места
Функция ИдентификаторКлиентаДляРабочегоМеста() Экспорт
	
	Возврат МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста();
	
КонецФункции

#КонецОбласти            

#Область ОбщиеМетодыДрайвера

// Функция возвращает структуру с данными драйвера.
//
// Параметры:
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
// Возвращаемое значение:
//  Структура:
//   * Наименование - Строка
Функция ДанныеДрайвераОборудования(ИдентификаторДрайвера) Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	
КонецФункции

// Поиск по идентификатору подключенного ранее устройства. 
//
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
// Возвращаемое значение:
//  СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПодключенноеУстройство(ИдентификаторУстройства) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	СписокПодключений = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенноеУстройство = Неопределено;  
	
	Если СписокПодключений <> Неопределено Тогда
		Для Каждого Подключение Из СписокПодключений Цикл
			Если Подключение.Ссылка = ИдентификаторУстройства Тогда
				ПодключенноеУстройство = Подключение;
				Прервать;
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли; 
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Возвращает соответствие содержащее типы оборудования,
// ключем является строка на русском и английском языках, а значением ссылка на перечисление
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение
Функция СоответствиеТиповОборудования() Экспорт
	
	ИмяПараметра = "БПО.СоответствиеТиповОборудования";
	Возврат ОбщегоНазначенияБПОКлиент.ПараметрПриложения(ИмяПараметра);
	
КонецФункции

// Формирования массива типов оборудования
// 
// Параметры:
//   ТипыПО - Массив из Строка, Строка - тип оборудования.
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ТипыПодключаемогоОборудования -  
//           
Функция ПолучитьТипыОборудования(ТипыПО) Экспорт
	
	Соответствие = СоответствиеТиповОборудования();
	МассивТипов = Новый Массив();
	Если ТипЗнч(ТипыПО) = Тип("Строка") Тогда    
		ТипыВМассиве = СтрРазделить(ТипыПО, ",", Ложь);
		Для Каждого ТипОборудования Из ТипыВМассиве Цикл
			МассивТипов.Добавить(Соответствие.Получить(СокрЛП(ТипОборудования)));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипОборудования Из ТипыПО Цикл   
			Если ТипЗнч(ТипОборудования) = Тип("Строка") Тогда 
				МассивТипов.Добавить(Соответствие.Получить(СокрЛП(ТипОборудования)));   
			ИначеЕсли ТипЗнч(ТипОборудования) = Тип("ПеречислениеСсылка.ТипыПодключаемогоОборудования") Тогда 
				МассивТипов.Добавить(ТипОборудования);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТипыПО) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ТипыПО Цикл
			Если КлючИЗначение.Значение Тогда
				МассивТипов.Добавить(Соответствие.Получить(КлючИЗначение.Ключ));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;     
	
	Возврат МассивТипов; 
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
// Параметры:
//  ТипыПодключаемогоОборудования - Структура, Массив из Строка, Строка - тип оборудования.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПодключаемоеОборудование
//
Функция ПолучитьПодключенныеУстройства(ТипыПодключаемогоОборудования) Экспорт
	
	ПодключенныеУстройства = Новый Массив();
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	СписокПодключений = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	Если СписокПодключений = Неопределено Тогда
		Возврат ПодключенныеУстройства;
	КонецЕсли;
		
	Если ТипЗнч(ТипыПодключаемогоОборудования) = Тип("Структура") Тогда  
		Для Каждого Подключение Из СписокПодключений Цикл
			Для Каждого КлючИЗначение Из ТипыПодключаемогоОборудования Цикл   
				// Находим устройство по одному подходящему типу.
				Если КлючИЗначение.Значение Тогда     
					ЗначениеКлюча = Ложь;
					Если Подключение.ТипыОборудования.Свойство(КлючИЗначение.Ключ, ЗначениеКлюча) И ЗначениеКлюча Тогда
						ПодключенныеУстройства.Добавить(Подключение);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
	Иначе
		ТипыОборудования = ПолучитьТипыОборудования(ТипыПодключаемогоОборудования);
		Для Каждого Подключение Из СписокПодключений Цикл
			Если ТипыОборудования.Найти(Подключение.ТипОборудования) <> Неопределено Тогда 
				ПодключенныеУстройства.Добавить(Подключение);
			КонецЕсли; 
		КонецЦикла;    
	КонецЕсли;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Поиск по типу подключенные ранее устройства.
//
// Параметры:
//  ИдентификаторОбъекта - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
//
// Возвращаемое значение:
//  Массив.
//
Функция ПодключенныеУстройстваПоИдентификаторуОбъекта(ИдентификаторОбъекта) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	СписокПодключений = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	ПодключенныеУстройства = Новый Массив();
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.ИдентификаторОбъекта = ИдентификаторОбъекта Тогда
			ПодключенныеУстройства.Добавить(Подключение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции

// Получает описание драйвера.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//  ДанныеДрайвера - см. МенеджерОборудованияВызовСервера.ДанныеДрайвераОборудования
//
Процедура НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, ИдентификаторДрайвера = Неопределено, ДанныеДрайвера = Неопределено) Экспорт
	
	Если ИдентификаторДрайвера <> Неопределено Тогда
		ДанныеДрайвера = МенеджерОборудованияВызовСервера.ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	КонецЕсли;
	
	НовоеПодключение = ПараметрыПодключенияДрайвера(ДанныеДрайвера);
	
	ОбработчикДрайвера = НовоеПодключение.ОбработчикДрайвера;
	ОбработчикДрайвера.НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, НовоеПодключение); 
	
КонецПроцедуры

// Получает описание оборудования.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторОборудования - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ДанныеОборудования - см. МенеджерОборудованияВызовСервера.ДанныеУстройства  
//
Процедура НачатьПолучениеОписанияОборудования(ОповещениеПриЗавершении, ИдентификаторОборудования = Неопределено, ДанныеОборудования = Неопределено) Экспорт

	
	Если ИдентификаторОборудования <> Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторОборудования);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОборудования) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить описание оборудования, возможно устройство отмечено не используемым.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, ИдентификаторОборудования);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НовоеПодключение = ПараметрыПодключенияУстройства(ДанныеОборудования);
	Если Не ПустаяСтрока(ДанныеОборудования.ИдентификаторОбъекта) Тогда
		СписокПодключений = ПодключенныеУстройстваПоИдентификаторуОбъекта(ДанныеОборудования.ИдентификаторОбъекта);
		НовоеПодключение.КоличествоПодключенных = СписокПодключений.Количество();
	КонецЕсли;
	
	ОбработчикДрайвера = НовоеПодключение.ОбработчикДрайвера;     
	ОбработчикДрайвера.НачатьПолучениеОписанияДрайвера(ОповещениеПриЗавершении, НовоеПодключение);
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства, Неопределено, ПараметрыУстройства);
		
		НовоеПодключение = ПараметрыПодключенияУстройства(ДанныеОборудования);
		ОбработчикДрайвера = НовоеПодключение.ОбработчикДрайвера;    
		ОбработчикДрайвера.НачатьТестУстройства(ОповещениеПриЗавершении, НовоеПодключение, Неопределено);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры    

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//
Процедура НачатьАвтонастройкуУстройства(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства, Неопределено, ПараметрыУстройства);
		
		НовоеПодключение = МенеджерОборудованияКлиент.ПараметрыПодключенияУстройства(ДанныеОборудования);
		ОбработчикДрайвера = НовоеПодключение.ОбработчикДрайвера;    
		ОбработчикДрайвера.НачатьАвтонастройкуУстройства(ОповещениеПриЗавершении, НовоеПодключение, Неопределено);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры    

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор драйвера.
//  ПараметрыУстройства - Структура - параметры устройства.
//  ПараметрыВыполнения - Структура - параметры выполнения команды.
// 
Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, ИдентификаторУстройства, ПараметрыУстройства = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства);
		НовоеПодключение = ПараметрыПодключенияУстройства(ДанныеОборудования);
		НовоеПодключение.Параметры = ?(ПараметрыУстройства = Неопределено, ДанныеОборудования.Параметры, ПараметрыУстройства);
		
		ОбработчикДрайвера = НовоеПодключение.ОбработчикДрайвера;   
		ОбработчикДрайвера.НачатьВыполнитьДополнительноеДействие(ОповещениеПриЗавершении, НовоеПодключение, ПараметрыВыполнения)
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ОписаниеОшибки = НСтр("ru='Устройство подключено, операция не может быть выполнена. Для отключения устройства требуется закрыть все формы приложения для текущей информационной базы.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Установить компоненту подключения оборудования.
//
// Параметры:
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
// Возвращаемое значение:
//  см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании.
// 
Асинх Функция УстановитьДрайверОборудованияАсинх(ИдентификаторДрайвера) Экспорт
	
	ДанныеДрайвера = ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	Если НЕ ЗначениеЗаполнено(ДанныеДрайвера) Тогда
		ОписаниеОшибки = НСтр("ru = 'Драйвер не найден.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	                 
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Для продолжения работы требуется установка внешней компоненты ""%1""'"), ДанныеДрайвера.Наименование); 
	Если ДанныеДрайвера.ПодключениеИзМакета Тогда
		Если Не ДанныеДрайвера.МакетДоступен Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Макет драйвера ""%1"" не найден.'"), ДанныеДрайвера.ИмяМакетаДрайвера); 
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			РезультатВыполнения.ИдентификаторОбъекта    = ДанныеДрайвера.ИдентификаторОбъекта;
			РезультатВыполнения.ИдентификаторУстройства = ДанныеДрайвера.Ссылка;
			Возврат РезультатВыполнения;
		Иначе
			ПараметрыУстановки = ВнешниеКомпонентыБПОКлиент.ПараметрыУстановки();
			ПараметрыУстановки.ТекстПояснения = ТекстСообщения;
			Результат = Ждать ВнешниеКомпонентыБПОКлиент.УстановитьКомпонентуИзМакетаАсинх(ДанныеДрайвера.ИмяМакетаДрайвера, ПараметрыУстановки); // Структура
		КонецЕсли;
	Иначе
		ПараметрыУстановки = ВнешниеКомпонентыБПОКлиент.ПараметрыУстановки();
		ПараметрыУстановки.ПредложитьЗагрузить  = НЕ ДанныеДрайвера.СнятСПоддержки;
		ПараметрыУстановки.ПредложитьУстановить = Истина;
		ПараметрыУстановки.ТекстПояснения = ТекстСообщения; 
		Результат = Ждать ВнешниеКомпонентыБПОКлиент.УстановитьКомпонентуАсинх(ДанныеДрайвера.ИдентификаторОбъекта, Неопределено, ПараметрыУстановки);  // Структура
	КонецЕсли;

	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат.Установлено, Результат.ОписаниеОшибки);
	РезультатВыполнения.ИдентификаторОбъекта    = ДанныеДрайвера.ИдентификаторОбъекта;
	РезультатВыполнения.ИдентификаторУстройства = ДанныеДрайвера.Ссылка;
	Возврат РезультатВыполнения;
	
КонецФункции

// Установить компоненту подключения оборудования.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторДрайвера - СправочникСсылка.ДрайверыОборудования - идентификатор драйвера.
//
Процедура УстановитьДрайверОборудования(ОповещениеПриЗавершении, ИдентификаторДрайвера) Экспорт
		
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.УстановитьДрайверОборудования";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	
	ДанныеДрайвера = ДанныеДрайвераОборудования(ИдентификаторДрайвера);
	Если НЕ ЗначениеЗаполнено(ДанныеДрайвера) Тогда
		ОписаниеОшибки = НСтр("ru = 'Драйвер не найден.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ДанныеДрайвера", ДанныеДрайвера);
	Оповещение = Новый ОписаниеОповещения("УстановитьДрайверОборудованияЗавершение", ЭтотОбъект, Контекст);
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Для продолжения работы требуется установка внешней компоненты ""%1"".'"),
		ДанныеДрайвера.Наименование);
	
	Если ДанныеДрайвера.ПодключениеИзМакета Или ОбщегоНазначенияБПОКлиентСервер.ЭтоМобильныйКлиент() Тогда
		Если Не ДанныеДрайвера.МакетДоступен Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Макет драйвера ""%1"" не найден.'"), ДанныеДрайвера.ИмяМакетаДрайвера); 
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ДопустимаУстановкаКомпоненты(ДанныеДрайвера.ИмяМакетаДрайвера) Тогда
				ПараметрыУстановки = ВнешниеКомпонентыБПОКлиент.ПараметрыУстановки();
				ПараметрыУстановки.ТекстПояснения = ТекстСообщения;
				ВнешниеКомпонентыБПОКлиент.УстановитьКомпонентуИзМакета(Оповещение, ДанныеДрайвера.ИмяМакетаДрайвера, ПараметрыУстановки);
			Иначе
				ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Для компоненты %1 не предусмотрена работа в web-клиенте.'"), ДанныеДрайвера.Наименование);
				РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыУстановки = ВнешниеКомпонентыБПОКлиент.ПараметрыУстановки();
		ПараметрыУстановки.ТекстПояснения       = ТекстСообщения; 
		ПараметрыУстановки.ПредложитьЗагрузить  = НЕ ДанныеДрайвера.СнятСПоддержки;;
		ПараметрыУстановки.ПредложитьУстановить = Истина;
		ВнешниеКомпонентыБПОКлиент.УстановитьКомпоненту(Оповещение, ДанныеДрайвера.ИдентификаторОбъекта, Неопределено, ПараметрыУстановки);
	КонецЕсли;
	
КонецПроцедуры

// Завершение установки драйвера оборудования
// 
// Параметры:
//  Результат - Структура
//  Контекст - Структура
//
Процедура УстановитьДрайверОборудованияЗавершение(Результат, Контекст) Экспорт
	
	Если Контекст.ОповещениеПриЗавершении <> Неопределено Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Результат.Установлено, Результат.ОписаниеОшибки);
		РезультатВыполнения.ИдентификаторОбъекта    = Контекст.ДанныеДрайвера.ИдентификаторОбъекта;
		РезультатВыполнения.ИдентификаторУстройства = Контекст.ДанныеДрайвера.Ссылка;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ВыбратьУстройство

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  Отбор - Структура, Массив из Строка, Строка - тип оборудования для выбора устройства.
//          см. МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
// Возвращаемое значение:
//  см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании
//
Асинх Функция ВыбратьУстройствоАсинх(Отбор, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Если Отбор.Свойство("ТипыПО") Тогда
			СписокОборудованияОтбор = Отбор; 
		Иначе
			СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
			СписокОборудованияОтбор.ТипыПО = Отбор;
		КонецЕсли;                  
	Иначе
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = Отбор;
	КонецЕсли;                  
		
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОборудованияОтбор);
	СписокУстройств          = Новый СписокЗначений();
	Для Каждого Устройства Из СписокДоступныхУстройств Цикл
		СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
	КонецЦикла;
	
	Если СписокУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
	ИначеЕсли СписокУстройств.Количество() = 1 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		РезультатВыполнения.ИдентификаторУстройства = СписокУстройств[0].Значение;
	Иначе
		Результат = Ждать СписокУстройств.ВыбратьЭлементАсинх(ТекстЗаголовкаВыбора);
		Если Результат = Неопределено Тогда 
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеВыбрано);
		Иначе
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
			РезультатВыполнения.ИдентификаторУстройства = Результат.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  ОповещениеВыбора - ОписаниеОповещения - событие описания оповещения.
//  Отбор - Строка - тип оборудования для выбора устройства.
//        - Массив из Строка
//        - см. МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
Процедура ВыбратьУстройство(ОповещениеВыбора, Отбор, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
		
	Если ТипЗнч(Отбор) <> Тип("Структура") Тогда
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = Отбор;
	ИначеЕсли Не Отбор.Свойство("ТипыПО") Тогда
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = Отбор;
	Иначе
		СписокОборудованияОтбор = Отбор;
	КонецЕсли;
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОборудованияОтбор);
	СписокУстройств          = Новый СписокЗначений();
	Для Каждого Устройства Из СписокДоступныхУстройств Цикл
		СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
	КонецЦикла;
	
	Если СписокУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
	ИначеЕсли СписокУстройств.Количество() = 1 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		РезультатВыполнения.ИдентификаторУстройства = СписокУстройств[0].Значение;
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеВыбора"  , ОповещениеВыбора);
		Контекст.Вставить("СообщениеНеВыбрано", СообщениеНеВыбрано);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
		СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Завершение выбора устройства.
// 
// Параметры:
//  Результат - Структура
//  Контекст - Структура
// 
Процедура ВыбратьУстройствоЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Контекст.СообщениеНеВыбрано);
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеВыбора, РезультатВыполнения);
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		РезультатВыполнения.ИдентификаторУстройства = Результат.Значение;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеВыбора, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеОтключенияОборудования                 

// Начать подключения устройств.
//
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для выбора устройства.
//  ИдентификаторУстройства - Массив из Строка, СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  СетевоеОборудование - Булево - использовать сетевое оборудование при подключении.
//
// Возвращаемое значение:
//  Массив из см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании - Результаты подключения устройств.
//
Асинх Функция ПодключениеОборудованияАсинх(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, СетевоеОборудование = Истина) Экспорт
	
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ПодключениеОборудованияАсинх";
	УИДЗамера = ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация);     
	
	ПодключенноеОборудование = Новый Массив(); // Результаты подключения устройств
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);   
		ПодключенноеОборудование.Добавить(РезультатВыполнения);
		// Замер производительности
		ОбщегоНазначенияБПОКлиент.ЗавершитьЗамерВремениБПО(УИДЗамера, Истина);
		Возврат ПодключенноеОборудование;
	КонецЕсли;
	
	УстройстваДляПодключения = УстройстваДляПодключения(ИдентификаторКлиента, ТипыПО, ИдентификаторУстройства, СетевоеОборудование);
	ПодключенноеОборудование = УстройстваДляПодключения.ПодключенноеОборудование;
	ОборудованиеДляПодключения = УстройстваДляПодключения.ОборудованиеДляПодключения;
	
	Для Каждого Устройство Из ОборудованиеДляПодключения Цикл
		
		НовоеПодключение = ПараметрыПодключенияУстройства(Устройство);
		РезультатПодключения = Ждать НовоеПодключение.ОбработчикДрайвера.ПодключитьУстройствоАсинх(НовоеПодключение);
		Если РезультатПодключения.Результат Тогда
			НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
			НовоеПодключение.КоличествоПодключенных = 1;
			ПодключаемоеОборудование = ПодключаемоеОборудование();
			ПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
			Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, Устройство.Ссылка);
			Результат.ПодключенноеУстройство = НовоеПодключение;
			ПодключенноеОборудование.Добавить(Результат);
		Иначе
			ОписаниеОшибки = СтрШаблон(НСтр("ru='Не удалось подключить устройство (%1): %2'"), ИдентификаторУстройства, РезультатПодключения.ОписаниеОшибки);
			Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки, Устройство.Ссылка);
			Результат.ОшибкаЗагрузки = РезультатПодключения.ОшибкаЗагрузки;
			ПодключенноеОборудование.Добавить(Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	// Замер производительности
	ОбщегоНазначенияБПОКлиент.ЗавершитьЗамерВремениБПО(УИДЗамера, Истина);
	
	Возврат ПодключенноеОборудование;
	
КонецФункции

// Начать подключения устройства.
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для выбора устройства.
//  ИдентификаторУстройства - Массив из Строка, СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  СетевоеОборудование - Булево - использовать сетевое оборудование при подключении.
//
Процедура НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, СетевоеОборудование = Истина) Экспорт
	
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.НачатьПодключениеОборудования";
	УИДЗамера = ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация);     
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);   
		// Замер производительности
		ОбщегоНазначенияБПОКлиент.ЗавершитьЗамерВремениБПО(УИДЗамера, Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения); 
		Возврат;
	КонецЕсли;
	
	УстройстваДляПодключения = УстройстваДляПодключения(ИдентификаторКлиента, ТипыПО, ИдентификаторУстройства, СетевоеОборудование);
	ПодключенноеОборудование = УстройстваДляПодключения.ПодключенноеОборудование;
	Для Каждого РезультатПодключения Из ПодключенноеОборудование Цикл
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатПодключения); 
	КонецЦикла;
	
	ОборудованиеДляПодключения = УстройстваДляПодключения.ОборудованиеДляПодключения;
	Если ОборудованиеДляПодключения.Количество() > 0 Тогда 
		Контекст = Новый Структура();  
		Контекст.Вставить("ПараметрыПодключения");
		Контекст.Вставить("ИдентификаторКлиента",       ИдентификаторКлиента);
		Контекст.Вставить("ОповещениеПриПодключении",   ОповещениеПриПодключении);
		Контекст.Вставить("ОборудованиеДляПодключения", ОборудованиеДляПодключения);
		НачатьПодключениеОборудованияРекурсивно(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры  

// Производит подключение доступного оборудования по списку типов ПО
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для подключения устройств.
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО);
	 
 КонецПроцедуры

// Начать подключать одиночный экземпляр устройства определяемый идентификатором.
//
// Параметры:
//  ОповещениеПриПодключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - Массив из Строка, СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для отключения устройств.
//
Процедура НачатьОтключениеОборудованияПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО);
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для отключения устройств.
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО);
	
КонецПроцедуры

// Начать отключать устройства определенное идентификатором.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ИдентификаторУстройства -  Массив из Строка, СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, Неопределено, ИдентификаторУстройства);
	
КонецПроцедуры

// Функция подключает устройства по типу оборудования.
//
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для отключения устройств.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//      
// Возвращаемое значение:
//  Массив из см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании - Результаты отключения устройств.
//  
Асинх Функция ОтключениеОборудованияАсинх(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	ОтключенноеОборудование = Новый Массив(); // Результаты отключения устройств  
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	
	ПодключенныеУстройства = УстройстваДляОтключения(ТипыПО, ИдентификаторУстройства);
	Для Каждого ОтключаемоеУстройство Из ПодключенныеУстройства Цикл // Структура
		КлиентПодключения = ОтключаемоеУстройство.Клиенты.Найти(ИдентификаторКлиента);
		Если КлиентПодключения <> Неопределено Тогда  
			// Необходимое устройство
			Если ОтключаемоеУстройство.КоличествоПодключенных = 1 Тогда
				РезультатОперации = Ждать ОтключаемоеУстройство.ОбработчикДрайвера.ОтключитьУстройствоАсинх(ОтключаемоеУстройство);
				Если РезультатОперации.Результат Тогда
					// Отключить устройство.
					ОтключаемоеУстройство .КоличествоПодключенных = 0;
					НомерСтрокиМассива = ПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ОтключаемоеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						ПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
					РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
					РезультатВыполнения.ИдентификаторУстройства = ОтключаемоеУстройство.Ссылка;
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru='При отключении устройства ""%1"" произошла ошибка.'"), 
						ОтключаемоеУстройство.Наименование);
					РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
					РезультатВыполнения.ИдентификаторУстройства = ОтключаемоеУстройство.Ссылка;
				КонецЕсли;
				ОтключенноеОборудование.Добавить(РезультатВыполнения);
			Иначе
				ОтключаемоеУстройство.КоличествоПодключенных = ОтключаемоеУстройство.КоличествоПодключенных - 1;
				ОтключаемоеУстройство.Клиенты.Удалить(КлиентПодключения);
				РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, ОтключаемоеУстройство.Ссылка);
				ОтключенноеОборудование.Добавить(РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;    
	
	Возврат ОтключенноеОборудование;
	
КонецФункции  

// Функция подключает устройства по типу оборудования.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для отключения устройств.
//  ИдентификаторУстройства - Массив из Строка, СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//
Процедура НачатьОтключениеОборудования(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПодключенныеУстройства = УстройстваДляОтключения(ТипыПО, ИдентификаторУстройства);
	
	Для Каждого ОтключаемоеУстройство Из ПодключенныеУстройства Цикл
		КлиентПодключения = ОтключаемоеУстройство.Клиенты.Найти(ИдентификаторКлиента);
		Если КлиентПодключения <> Неопределено Тогда  
			Если ОтключаемоеУстройство.КоличествоПодключенных = 1 Тогда
				Контекст = Новый Структура();
				Контекст.Вставить("ОтключаемоеУстройство",  ОтключаемоеУстройство);
				Контекст.Вставить("ОповещениеПриОтключении", ОповещениеПриОтключении);
				Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудованияЗавершение", ЭтотОбъект, Контекст);
				ОтключаемоеУстройство.ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ОтключаемоеУстройство);
			Иначе
				ОтключаемоеУстройство.КоличествоПодключенных = ОтключаемоеУстройство.КоличествоПодключенных - 1;
				ОтключаемоеУстройство.Клиенты.Удалить(КлиентПодключения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;    
	
КонецПроцедуры  

// Завершение отключения оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Контекст - Структура:
//   * ПодключенноеУстройство - Структура:
//      * Наименование - Строка - наименование устройства
//   * ОповещениеПриОтключении - ОписаниеОповещения
// 
Процедура НачатьОтключениеОборудованияЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	ОтключаемоеУстройство = Контекст.ОтключаемоеУстройство; // Структура
	Если РезультатВыполнения.Результат Тогда
		// Отключить устройство.
		ОтключаемоеУстройство.КоличествоПодключенных = 0;
		ПодключаемоеОборудование = ПодключаемоеОборудование();
		Индекс = ПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ОтключаемоеУстройство);
		Если Индекс <> Неопределено Тогда
			ПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(Индекс);
		КонецЕсли;
		Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
		Результат.ИдентификаторУстройства = ОтключаемоеУстройство.Ссылка;
	Иначе
		ОписаниеОшибки = СтрШаблон(
			НСтр("ru='При отключении устройства ""%1"" произошла ошибка.'"), 
			ОтключаемоеУстройство.Наименование);
		Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		Результат.ИдентификаторУстройства = ОтключаемоеУстройство.Ссылка;
	КонецЕсли;
	Если Контекст.ОповещениеПриОтключении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриОтключении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Производит принудительное отключение всего подключенного оборудования, независимо от числа ссылок на подключение.
//
// Возвращаемое значение:
//  Булево.
// 
Асинх Функция ОтключениеВсегоОборудованияАсинх() Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого ПодключенноеУстройство Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		РезультатОперации = Ждать ПодключаемоеОборудованиеДрайверКлиент.ОтключитьУстройствоАсинх(ПодключенноеУстройство);
 		Если НЕ РезультатОперации.Результат Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='При отключении оборудования произошла ошибка: %1'"), РезультатОперации.ОписаниеОшибки);
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ПодключенноеУстройство.КоличествоПодключенных = 0;
	КонецЦикла;
	
	КоличествоПодключенныхКлиентов = 0;
	Для Каждого ПодключенноеУстройство Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		КоличествоПодключенныхКлиентов = КоличествоПодключенныхКлиентов + ПодключенноеУстройство.КоличествоПодключенных;
	КонецЦикла;
	
	ПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();        
	
	Возврат Истина;
	
КонецФункции

// Производит принудительное отключение всего подключенного оборудования, независимо от числа ссылок на подключение.
//
// Параметры:
//  ОповещениеПриОтключении - ОписаниеОповещения - событие описания оповещения.
//
Процедура НачатьОтключениеВсегоОборудования(ОповещениеПриОтключении = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ПараметрыПодключенияПО   = ПодключаемоеОборудование.ПараметрыПодключенияПО;
	
	Для Каждого ПодключенноеУстройство Из ПараметрыПодключенияПО Цикл
		Оповещение = Новый ОписаниеОповещения("НачатьОтключениеВсегоОборудованияЗавершение", ЭтотОбъект);
		ПодключенноеУстройство.ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ПодключенноеУстройство);
		ПодключенноеУстройство.КоличествоПодключенных = 0;
	КонецЦикла;
	ПараметрыПодключенияПО.Очистить();
	
КонецПроцедуры

// Завершение отключения всего оборудования.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура НачатьОтключениеВсегоОборудованияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При отключении оборудования произошла ошибка: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает подключено ли оборудование.
// 
// Параметры: 
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - ИдентификаторУстройства.
// 
// Возвращаемое значение:
//  Булево - Устройство подключено
//
Функция УстройствоПодключено(ИдентификаторУстройства) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.Ссылка = ИдентификаторУстройства Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	ОповещениеПриПодключении - ОписаниеОповещения - оповещение при подключении.
//	Форма - ФормаКлиентскогоПриложения - открываемая форма.
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка - содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования = Неопределено) Экспорт
	
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ПодключениеОборудованиеПриОткрытииФормы";
	УИДЗамера = ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриПодключении);
	
	Если ОповещениеПриПодключении = Неопределено Тогда
		ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
	ПодключаемоеОборудование = ПодключаемоеОборудованиеНаФорме(Форма);
	Если ПодключаемоеОборудование <> Неопределено Тогда
		
		Если ПодключаемоеОборудование.ТребуетсяЗапросСпискаОборудованияНаКлиенте Тогда
			Отбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
			Отбор.ТипыПО = ПодключаемоеОборудование.ТипыПО;
			ОбновитьРабочееМестоКлиента();
			ПодключаемоеОборудование.СписокОборудования = МенеджерОборудованияВызовСервера.СписокОборудования(Отбор);
		КонецЕсли;
		
		СписокНаФорме = Форма.ПодключаемоеОборудованиеБПО.СписокОборудования;
		Если СписокНаФорме.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Контекст = Новый Структура();
		Контекст.Вставить("Форма", Форма);
		Контекст.Вставить("ОповещениеПриПодключении", ОповещениеПриПодключении);
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПриОткрытииФормыЗавершение", ЭтотОбъект, Контекст);
		СписокОборудования = Новый Массив();
		Для Каждого Элемент Из СписокНаФорме Цикл
			СписокОборудования.Добавить(Элемент);
		КонецЦикла;
		СписокНаФорме.Очистить();
		
		Если СуществуютРеквизитыНаФорме(Форма, "ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
			ЗаполнитьПоддерживаемыеТипыПодключаемогоОборудованияНаФорме(Форма, ПодключаемоеОборудование.ТипыПО);
		КонецЕсли;
		Если СуществуютРеквизитыНаФорме(Форма, "ИспользоватьПодключаемоеОборудование") Тогда
			Форма.ИспользоватьПодключаемоеОборудование = Истина;
		КонецЕсли;
		
		НачатьПодключениеОборудования(
			Оповещение, Форма.УникальныйИдентификатор, СписокОборудования);
			
	Иначе
		Если СуществуютРеквизитыНаФорме(Форма, "ИспользоватьПодключаемоеОборудование, ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
			
			ЗаполнитьПоддерживаемыеТипыПодключаемогоОборудованияНаФорме(Форма, ПоддерживаемыеТипыПодключаемогоОборудования);
			
			Если Форма.ИспользоватьПодключаемоеОборудование Тогда
				НачатьПодключениеОборудованиеПоТипу(
					ОповещениеПриПодключении,
					Форма.УникальныйИдентификатор,
					ПолучитьТипыОборудования(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//  Результат - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании.
//  Контекст - Структура.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормыЗавершение(Результат, Контекст) Экспорт
	
	Если Результат.Результат Тогда
		ПодключенноеУстройство =  Новый Структура();
		ПодключенноеУстройство.Вставить("ИдентификаторУстройства", Результат.ПодключенноеУстройство.ИдентификаторУстройства);
		ПодключенноеУстройство.Вставить("ТипОборудованияИмя", Результат.ПодключенноеУстройство.ТипОборудованияИмя);
		Контекст.Форма.ПодключаемоеОборудованиеБПО.СписокОборудования.Добавить(ПодключенноеУстройство);
	КонецЕсли;
	
	Если Контекст.ОповещениеПриПодключении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриПодключении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения по умолчанию
//
// Параметры:
//	РезультатВыполнения - Структура - результат выполнения операции.
//	Параметры - Произвольный - дополнительный параметр переданный в оповещение.
//
Процедура ПодключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При подключении оборудования произошла ошибка:""%1"".'"), РезультатВыполнения.ОписаниеОшибки); 
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
// Параметры:
//	ОповещениеПриОтключении - ОписаниеОповещения - оповещение при отключении.
//	Форма - ФормаКлиентскогоПриложения - закрываемая форма.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма) Экспорт
	
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОтключениеОборудованиеПриЗакрытииФормы";
	УИДЗамера = ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриОтключении);
	
	Если ОповещениеПриОтключении = Неопределено Тогда
		ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
	ПодключаемоеОборудование = ПодключаемоеОборудованиеНаФорме(Форма);
	Если ПодключаемоеОборудование <> Неопределено Тогда
		ТипыПО = Новый Массив();
		Для Каждого Элемент Из ПодключаемоеОборудование.СписокОборудования Цикл
			ТипыПО.Добавить(Элемент.ТипОборудованияИмя);
		КонецЦикла;
		НачатьОтключениеОборудования(ОповещениеПриОтключении, Форма.УникальныйИдентификатор, ТипыПО);
	Иначе
		Если СуществуютРеквизитыНаФорме(Форма, "ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
			НачатьОтключениеОборудованияПоТипу(
				ОповещениеПриОтключении,
				Форма.УникальныйИдентификатор,
				ПолучитьТипыОборудования(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения отключения оборудования при закрытии формы по умолчанию
// 
// Параметры:
//  РезультатВыполнения - Структура
//  Параметры - Структура
// 
Процедура ОтключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При отключении оборудования произошла ошибка: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - открываемая форма.
// 
// Возвращаемое значение:
//   Массив из см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании.
// 
Асинх Функция ПодключитьОборудованиеПриОткрытииФормыАсинх(Форма) Экспорт
	
	РезультатыПодключения = Новый Массив();
	
	ПодключаемоеОборудование = ПодключаемоеОборудованиеНаФорме(Форма);
	Если ПодключаемоеОборудование <> Неопределено Тогда
		
		РезультатыПодключения = Ждать ПодключениеОборудованияАсинх(
			Форма.УникальныйИдентификатор,
			ПодключаемоеОборудование.СписокОборудования);
			
		Форма.ПодключаемоеОборудованиеБПО.СписокОборудования = Неопределено;
		СписокОборудования = Новый Массив();
		Для Каждого Результат Из РезультатыПодключения Цикл
			Если Результат.Результат Тогда
				ПараметрыПодключения = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(Результат.ПодключенноеУстройство);
				ПараметрыПодключения.Удалить("ШаблонЛокализации");
				СписокОборудования.Добавить(Новый ФиксированнаяСтруктура(ПараметрыПодключения));
			КонецЕсли;
		КонецЦикла;
		Форма.ПодключаемоеОборудованиеБПО.СписокОборудования = Новый ФиксированныйМассив(СписокОборудования);
		
		Если СуществуютРеквизитыНаФорме(Форма, "ПоддерживаемыеТипыПодключаемогоОборудования") Тогда
			ЗаполнитьПоддерживаемыеТипыПодключаемогоОборудованияНаФорме(Форма, ПодключаемоеОборудование.ТипыПО);
		КонецЕсли;
		Если СуществуютРеквизитыНаФорме(Форма, "ИспользоватьПодключаемоеОборудование") Тогда
			Форма.ИспользоватьПодключаемоеОборудование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатыПодключения;
	
	
КонецФункции

// Отключение оборудования при закрытии формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - закрываемая форма.
//
// Возвращаемое значение:
//   Массив из см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании.
// 
Асинх Функция ОтключитьОборудованиеПриЗакрытииФормыАсинх(Форма) Экспорт
	
	// Замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОтключениеОборудованиеПриЗакрытииФормы";
	УИДЗамера = ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация);
	
	Результат = Новый Массив();
	ПодключаемоеОборудование = ПодключаемоеОборудованиеНаФорме(Форма);
	Если ПодключаемоеОборудование <> Неопределено Тогда
		Результат = Ждать ОтключениеОборудованияАсинх(Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	#Если Не МобильноеПриложениеКлиент Тогда 
	ОбщегоНазначенияБПОКлиент.ЗавершитьЗамерВремениБПО(УИДЗамера);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПечатающееУстройство

// Начать подключение печатающего устройства
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПодключениеПечатающегоУстройства(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства = Неопределено) Экспорт
	
	ПараметрыВыполнение = Новый Структура();
	ПараметрыВыполнение.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыВыполнение.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	ПараметрыВыполнение.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		
		ПоддерживаемыеТипы = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
		ПоддерживаемыеТипы.ПринтерЧеков = Истина;
		ПоддерживаемыеТипы.ККТ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеПечатающегоУстройства_ВыборЗавершение", ЭтотОбъект, ПараметрыВыполнение);
		ВыбратьУстройство(Оповещение, ПоддерживаемыеТипы,
			НСтр("ru='Выберите устройство для печати'"),
			НСтр("ru='Для данного рабочего места нет доступных устройств для печати.'"), 
			НСтр("ru='Устройство для печати не выбрано.'"));
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, ИдентификаторУстройства); 
		НачатьПодключениеПечатающегоУстройства_ВыборЗавершение(РезультатВыполнения, ПараметрыВыполнение);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения печатающего устройства.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнение - Структура
// 
Процедура НачатьПодключениеПечатающегоУстройства_ВыборЗавершение(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрыВыполнение.ИдентификаторУстройства = РезультатВыполнения.ИдентификаторУстройства; 
		// Поиск подключенного устройства.
		ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнение.ИдентификаторУстройства);                                                
		Если ПодключенноеУстройство = Неопределено Тогда
			НачатьПодключениеОборудованиеПоИдентификатору(ПараметрыВыполнение.ОповещениеПриЗавершении, ПараметрыВыполнение.ИдентификаторКлиента, ПараметрыВыполнение.ИдентификаторУстройства);
		Иначе
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, ПараметрыВыполнение.ИдентификаторУстройства); 
			РезультатВыполнения.Вставить("ПечатающееУстройствоБылоПодключенное", Истина);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманды

// Выполнение команды обработчика для подключенного устройства.
//
// Параметры:
//  ПодключенноеУстройство - СправочникСсылка.ПодключаемоеОборудование
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды) Экспорт
	
	Команда = ПараметрыВыполнениеКоманды.Команда;
	
	// Вызываем модуль "Процессор данных" отвечающий за подготовку данных для выполнение команды на оборудовании.
	Если ПараметрыВыполнениеКоманды.ПодготовитьДанные Тогда
		
		ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);
		ПроцессорДанных = ПараметрыВыполнениеКоманды.ПроцессорДанных;   
		// Подготовка данных для проведения операции на сервере.
		ДанныеОперации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеОперации(ПараметрыПодключенияСервер, ПроцессорДанных, Команда, ПараметрыВыполнениеКоманды.ПараметрыОперации); 
		
		Если ДанныеОперации = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка подготовки данных для операции.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
			Возврат;
		ИначеЕсли НЕ ДанныеОперации.Результат Тогда
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ДанныеОперации.ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
			Возврат;
		КонецЕсли; 
	Иначе
		ДанныеОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		Если ДанныеОперации = Неопределено Тогда
			ДанныеОперации = Новый Структура();
		КонецЕсли; 
	КонецЕсли;
	
	ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
	Если ОбработчикДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ПараметрыВыполнениеКоманды.Вставить("ДанныеОперации", ДанныеОперации);
		ПараметрыВыполнениеКоманды.Вставить("ПодключенноеУстройство", ПодключенноеУстройство);
		
		Если Команда = "CheckFiscalization"
			И ПараметрыВыполнениеКоманды.Свойство("ОповещениеПослеОткрытииЧека")
			И ПараметрыВыполнениеКоманды.ОповещениеПослеОткрытииЧека <> Неопределено Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеОткрытииЧека", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, "GetCurrentStatus", ДанныеОперации.ТекущееСостояние);
		Иначе        
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, Команда, ДанныеОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "После открытия чека", вызывается во время команды "CheckFiscalization".
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПослеОткрытииЧека(РезультатВыполнения, ПараметрыВыполнениеКоманды)  Экспорт
	
	ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
	ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;

	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("ВходныеПараметры", ПараметрыВыполнениеКоманды.ДанныеОперации);
	ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
	ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
		ТекущееСостояние = ДанныеОперации.ТекущееСостояние;
		ФискальныеДанныеСтруктура = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(
			ТекущееСостояние.РезультатXML, ПодключенноеУстройство.РевизияИнтерфейса, ТекущееСостояние.НомерСменыККТ, ТекущееСостояние.НомерЧекаККТ);
		ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ФискальныеДанныеСтруктура.НомерСменыККТ, Число(ФискальныеДанныеСтруктура.НомерЧекаККТ) + 1, ДанныеОперации.ЗаводскойНомерФН); 
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ЗавершениеПечати", ЭтотОбъект, ПараметрыВыполнениеКоманды);
	ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Оповещение);
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПослеОткрытииЧека, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик оповещения "Завершение печати", вызывается после открытия чека.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ЗавершениеПечати(РезультатВыполнения, ПараметрыВыполнениеКоманды)  Экспорт
	
	Если РезультатВыполнения.ПродолжитьПечать Тогда        
		
		ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
		ПараметрыОперации = ПараметрыВыполнениеКоманды.ПараметрыОперации;
		ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;
		
		ДополнительныеПараметры = Новый Структура();
		ЗаполнитьПараметрыОперацииПодписиЧека(ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, РезультатВыполнения);
		ДополнительныеПараметры.Вставить("АдресЧека"  , ?(РезультатВыполнения.Свойство("АдресЧека"), РезультатВыполнения.АдресЧека, Неопределено));
		ДополнительныеПараметры.Вставить("ПодписьЧека", ?(РезультатВыполнения.Свойство("ПодписьЧека"), РезультатВыполнения.ПодписьЧека, Неопределено));
		ДанныеОперации.Вставить("ПодписьЧека", ДополнительныеПараметры);
		ПараметрыОперации.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		 
		Если НЕ ПустаяСтрока(ДополнительныеПараметры.АдресЧека) Тогда // Необходима печать слип-чека алко-продукции.
			ПечатьСлипЧека = ПечатьСлипЧекаАлкогольнойПродукции(); 
			Если ПечатьСлипЧека И ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
				ШиринаСтроки = ?(ПодключенноеУстройство.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ШиринаСтроки, 36);
				
				МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				
				ДанныеОперации.ТестовыеЧеки = МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.XMLПакетИнфоКвитанции(
					ДополнительныеПараметры, ШиринаСтроки, ПодключенноеУстройство.РевизияИнтерфейса);
			КонецЕсли;
		КонецЕсли;
		
		ОбработчикДрайвера = ПараметрыВыполнениеКоманды.ПодключенноеУстройство.ОбработчикДрайвера;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_Завершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, ПараметрыВыполнениеКоманды.Команда, ПараметрыВыполнениеКоманды.ДанныеОперации);
		
	Иначе
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, РезультатВыполнения.ОписаниеОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

// Заполнить параметры операции подписи чека.
// 
// Параметры:
//  ПараметрыОперации - Структура
//  НомерСмены - Число - номер открытой/закрытой смены.
//  НомерЧека - Число - номер фискального чека.
//  ЗаводскойНомерФН - Число - заводской номер фискального накопителя
//
Процедура ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыОперации, НомерСмены = Неопределено, 
	НомерЧека = Неопределено, ЗаводскойНомерФН = Неопределено) Экспорт; 
	
	ПараметрыОперации.Вставить("ИНН"       , Неопределено);
	ПараметрыОперации.Вставить("КПП"       , Неопределено);
	
	ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
	ПараметрыОперации.Вставить("НомерЧека" , НомерЧека);
	ПараметрыОперации.Вставить("НомерКассы"      , Неопределено);
	ПараметрыОперации.Вставить("ЗаводскойНомерФН", ЗаводскойНомерФН);
	ПараметрыОперации.Вставить("НаименованиеОрганизации", Неопределено);
	
КонецПроцедуры

// Начать выполнение команды ответственному обработчику драйвера
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  ПараметрыОперации - Структура
//  ПараметрыВыполнениеКоманды - Структура
//  ПечатающееУстройство - СправочникСсылка.ПодключаемоеОборудование - идентификатор печатающего устройства.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства, ПараметрыОперации, ПараметрыВыполнениеКоманды, ПечатающееУстройство = Неопределено) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Устройство не выбрано или не подключено.'");
			РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат; 
	КонецЕсли;          
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = СтрШаблон("ОбщийМодуль.МенеджерОборудованияКлиент.НачатьВыполнениеКоманды.%1", ПараметрыВыполнениеКоманды.Команда);
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
#КонецЕсли          
	
	ПараметрыВыполнениеКоманды.Вставить("ОповещениеПриЗавершении"   , ОповещениеПриЗавершении);  
	ПараметрыВыполнениеКоманды.Вставить("ИдентификаторКлиента"      , ИдентификаторКлиента);
	ПараметрыВыполнениеКоманды.Вставить("ИдентификаторУстройства"   , ИдентификаторУстройства);
	ПараметрыВыполнениеКоманды.Вставить("ПараметрыОперации"         , ПараметрыОперации);
	ПараметрыВыполнениеКоманды.Вставить("Подключено"                , Ложь);
	ПараметрыВыполнениеКоманды.Вставить("ПодключенноеУстройство"    , Неопределено);
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройство"           , ПечатающееУстройство);
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоПодключено"      , Ложь);   
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоБылоПодключенное", Ложь);   
	ПараметрыВыполнениеКоманды.Вставить("СетевоеОборудование");
	ПараметрыВыполнениеКоманды.Вставить("ПечатающееУстройствоДополнительныхДокументов"); 
	ПараметрыВыполнениеКоманды.Вставить("ПодключенноеПечатающееУстройствоДополнительныхДокументов");
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);                                                
	Если ПодключенноеУстройство = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПодключениеЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ИдентификаторКлиента, ИдентификаторУстройства);
	Иначе
		ПараметрыВыполнениеКоманды.ПодключенноеУстройство = ПодключенноеУстройство;
		// Нужно ли использовать печатающее устройство.
		Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство И ПараметрыВыполнениеКоманды.ПечатьСлипЧека
			И НЕ ПодключенноеУстройство.ПечатьКвитанцийНаТерминале Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			НачатьПодключениеПечатающегоУстройства(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПечатающееУстройство); 
		Иначе
			ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
		КонецЕсли;
	КонецЕсли;
	                                    
КонецПроцедуры

// Завершение подключения оборудования
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПодключениеЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		
		ПодключенноеУстройство = РезультатПодключения.ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.ПодключенноеУстройство = ПодключенноеУстройство;
		ПараметрыВыполнениеКоманды.Подключено = Истина;
		
		// Нужно ли использовать печатающее устройство.
		Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство И ПараметрыВыполнениеКоманды.ПечатьСлипЧека
			И НЕ ПодключенноеУстройство.ПечатьКвитанцийНаТерминале Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			НачатьПодключениеПечатающегоУстройства(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройство); 
		Иначе
			ВыполнениеКомандыОбработчика(ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru='При подключении оборудования произошла ошибка: %1'"), РезультатПодключения.ОписаниеОшибки);
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		РезультатОперации.ИдентификаторУстройства = ПараметрыВыполнениеКоманды.ИдентификаторУстройства;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Завершение подключения печатающего устройства
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатающегоУстройстваЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ПараметрыВыполнениеКоманды.ПечатающееУстройство = РезультатПодключения.ИдентификаторУстройства;
		ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено = Истина;  
		
		Если РезультатПодключения.Свойство("ПечатающееУстройствоБылоПодключенное") И РезультатПодключения.ПечатающееУстройствоБылоПодключенное Тогда
			ПараметрыВыполнениеКоманды.ПечатающееУстройствоБылоПодключенное = Истина;
		КонецЕсли;
		ВыполнениеКомандыОбработчика(ПараметрыВыполнениеКоманды.ПодключенноеУстройство, ПараметрыВыполнениеКоманды);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru='При подключении печатающего устройства произошла ошибка: %1'"), РезультатПодключения.ОписаниеОшибки); 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		РезультатВыполнения.ИдентификаторУстройства = РезультатПодключения.ИдентификаторУстройства;
		// Отключение оборудования при завершение
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Завершение выполнения команды
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура:
//   * ПараметрыОперации - Структура:
//      ** ОбработатьДанные - Булево
//      ** ОбработатьДанныеПриОшибке - Булево
//      ** ИспользоватьПечатающееУстройство - Булево
//      ** ДополнительныеПараметры - Структура
// 
Процедура НачатьВыполнениеКоманды_Завершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	// Обработка данный на сервере после выполнение команды
	Если (РезультатВыполнения.Результат И ПараметрыВыполнениеКоманды.ОбработатьДанные)
		Или (ПараметрыВыполнениеКоманды.Свойство("ОбработатьДанныеПриОшибке") И ПараметрыВыполнениеКоманды.ОбработатьДанныеПриОшибке) Тогда
		
		ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПараметрыВыполнениеКоманды.ПодключенноеУстройство);   
		ПараметрыПодключенияСервер.Вставить("ИдентификаторУстройства", ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		ПроцессорДанных = ПараметрыВыполнениеКоманды.ПроцессорДанных;
		Команда = ПараметрыВыполнениеКоманды.Команда;
		// Вызываем модуль  отвечающий за обработку данных после выполнение команды на оборудовании.
		МенеджерОборудованияВызовСервера.ОбработатьДанныеОперации(ПараметрыПодключенияСервер, ПроцессорДанных, Команда, РезультатВыполнения, ПараметрыВыполнениеКоманды.ДанныеОперации); 
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ИдентификаторУстройства") И НЕ ЗначениеЗаполнено(РезультатВыполнения.ИдентификаторУстройства) Тогда 
		РезультатВыполнения.ИдентификаторУстройства = ПараметрыВыполнениеКоманды.ИдентификаторУстройства;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		Если ПараметрыВыполнениеКоманды.Свойство("ПараметрыОперации") 
			И ПараметрыВыполнениеКоманды.ПараметрыОперации <> Неопределено
			И ПараметрыВыполнениеКоманды.ПараметрыОперации.Свойство("ДополнительныеПараметры") Тогда
			РезультатВыполнения.Вставить("ДополнительныеПараметры", ПараметрыВыполнениеКоманды.ПараметрыОперации.ДополнительныеПараметры);
		КонецЕсли;
		Если ПараметрыВыполнениеКоманды.Команда = "CheckFiscalization" 
			И ОбщегоНазначенияБПОКлиент.ИспользуетсяДисплеиПокупателя() 
			И ВыводQRКодаЧекаНаДисплейПокупателяПослеФискализации() Тогда
				СообщениеНаДисплее = СтрШаблон(НСтр("ru = 'Электронный чек%1Проверьте чек в ФНС'"), Символы.ПС);
				МодульОборудованиеДисплеиПокупателяКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
				ПараметрыОперацииQR = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя(СообщениеНаДисплее, РезультатВыполнения.QRКодЧекаККТ);
				ПараметрыОперацииQR.ВнутренняяОперация = Истина;
				МодульОборудованиеДисплеиПокупателяКлиент.НачатьВыводQRКодаНаДисплейПокупателя(Неопределено, Неопределено, Неопределено, ПараметрыОперацииQR); 
		КонецЕсли;
	Иначе          
		ДополнительнаяОбработкаОшибки(РезультатВыполнения);
		Если ПараметрыВыполнениеКоманды.Команда = "CheckFiscalization"
			И ПараметрыВыполнениеКоманды.Свойство("ОповещениеПриОшибкеПечатиЧека")
			И ПараметрыВыполнениеКоманды.ОповещениеПриОшибкеПечатиЧека <> Неопределено Тогда
				ДанныеОперации = ПараметрыВыполнениеКоманды.ДанныеОперации;
				ПараметрыВыполнения = Новый Структура();
				ПараметрыВыполнения.Вставить("ВходныеПараметры", ПараметрыВыполнениеКоманды.ДанныеОперации);
				ПараметрыВыполнения.Вставить("ОписаниеОшибки"  , Неопределено); 
				ПараметрыВыполнения.Вставить("ПродолжитьПечать", Истина);
				ПараметрыВыполнения.Вставить("ОповещениеПродолжения", Неопределено);
				ЗаполнитьПараметрыОперацииПодписиЧека(ПараметрыВыполнения, ДанныеОперации.НомерСменыККТ, ДанныеОперации.НомерЧекаККТ, ДанныеОперации.ЗаводскойНомерФН); 
				ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриОшибкеПечатиЧека, ПараметрыВыполнения);
		КонецЕсли;
	КонецЕсли;                        
	
	Если ПараметрыВыполнениеКоманды.ИспользоватьПечатающееУстройство 
		И ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено И РезультатВыполнения.Свойство("ТестовыеЧеки") Тогда
		// Поиск подключенного устройства.
		ПечатающееУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнениеКоманды.ПечатающееУстройство);                                                
		Если ПечатающееУстройство = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Ошибка печати слип чека. Операция отменена.'");
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстОшибки, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
		Иначе
			Если РезультатВыполнения.Свойство("ТекстСлипЧека") И Не ПустаяСтрока(РезультатВыполнения.ТекстСлипЧека) Тогда
				ПодключаемоеОборудование = ПодключаемоеОборудование();
				ПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", РезультатВыполнения.ТекстСлипЧека);
			КонецЕсли;
			// Результат выполнения исходной операции
			ПараметрыВыполнениеКоманды.Вставить("РезультатВыполнения", РезультатВыполнения);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ПечатающееУстройство.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПечатающееУстройство, "PrintText", РезультатВыполнения);
		КонецЕсли;
	ИначеЕсли ПараметрыВыполнениеКоманды.Свойство("ПараметрыОперации")
		И ПараметрыВыполнениеКоманды.ПараметрыОперации <> Неопределено
		И ПараметрыВыполнениеКоманды.ПараметрыОперации.Свойство("УстройствоПечати")
		И ПараметрыВыполнениеКоманды.ПараметрыОперации.Свойство("ПакетДокументов") 
		И (ЗначениеЗаполнено(ПараметрыВыполнениеКоманды.ПараметрыОперации.УстройствоПечати) 
		ИЛИ ЗначениеЗаполнено(ПараметрыВыполнениеКоманды.ПараметрыОперации.ПакетДокументов)) Тогда
			НачатьПодключениеУстройстваПечатиДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнениеКоманды);
	Иначе
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключение оборудования печати.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьПодключениеУстройстваПечатиДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РезультатВыполнения", РезультатВыполнения);
	ДополнительныеПараметры.Вставить("ПараметрыВыполнениеКоманды", ПараметрыВыполнениеКоманды);
	ДополнительныеПараметры.Вставить("УстройствКПодключению", 0);
	ДополнительныеПараметры.Вставить("ПодключеноУстройств", 0);
	ДополнительныеПараметры.Вставить("МассивУстройствДляПодключения", Новый Массив);
	ДополнительныеПараметры.Вставить("НеобходимаПечатьКопииЧека", Истина);
	
	ПечатающееУстройство = ПолучитьПодключенноеУстройство(ПараметрыВыполнениеКоманды.ПараметрыОперации.УстройствоПечати);
	Если ПечатающееУстройство = Неопределено И ЗначениеЗаполнено(ПараметрыВыполнениеКоманды.ПараметрыОперации.УстройствоПечати) Тогда
		ДополнительныеПараметры.МассивУстройствДляПодключения.Добавить(ПараметрыВыполнениеКоманды.ПараметрыОперации.УстройствоПечати);
		ДополнительныеПараметры.УстройствКПодключению = 1;
	ИначеЕсли ПечатающееУстройство <> Неопределено Тогда
		ДополнительныеПараметры.ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов = ПечатающееУстройство;
		ДополнительныеПараметры.ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов = ПечатающееУстройство.ИдентификаторУстройства;
	Иначе
		ДополнительныеПараметры.НеобходимаПечатьКопииЧека = Ложь;
	КонецЕсли;
	
	Для Каждого СоответствиеУстройства Из ПараметрыВыполнениеКоманды.ПараметрыОперации.ПакетДокументов Цикл
		Если ДополнительныеПараметры.МассивУстройствДляПодключения.Найти(СоответствиеУстройства.Значение) = Неопределено 
			И ПолучитьПодключенноеУстройство(СоответствиеУстройства.Значение) = Неопределено Тогда
			ДополнительныеПараметры.МассивУстройствДляПодключения.Добавить(СоответствиеУстройства.Значение);
			ДополнительныеПараметры.УстройствКПодключению = ДополнительныеПараметры.УстройствКПодключению + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныеПараметры.УстройствКПодключению > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ДополнительныеПараметры.МассивУстройствДляПодключения);
	Иначе
		НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Печать дополнительных документов.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнение - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыВыполнение.ПодключеноУстройств = ПараметрыВыполнение.ПодключеноУстройств + 1;
		Если ПараметрыВыполнение.ПодключеноУстройств < ПараметрыВыполнение.УстройствКПодключению Тогда
			Возврат;
		КонецЕсли;
		
		Если ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Свойство("КопияРаспечатана") И ПараметрыВыполнение.ПараметрыВыполнениеКоманды.КопияРаспечатана 
			ИЛИ НЕ ПараметрыВыполнение.НеобходимаПечатьКопииЧека Тогда
			
			Команда = "PrintText";
			СоответствиеПечати = ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ДанныеОперации.ДополнительныеДокументы;
			ДокументПечати = СоответствиеПечати.Получить(0); 

			УстройствоПечати = ПолучитьПодключенноеУстройство(ДокументПечати.УстройствоПечати);
			ДанныеОперации = Новый Структура;
			ДанныеОперации.Вставить("ТестовыеЧеки", Новый Массив);
			ДанныеОперации.ТестовыеЧеки = ДокументПечати.ТекстПечати;

			ПараметрыВыполнение.Вставить("РезультатВыполнения", РезультатВыполнения);
			ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ДанныеОперации.ДополнительныеДокументы.Удалить(0);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение", ЭтотОбъект, ПараметрыВыполнение);
			УстройствоПечати.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, УстройствоПечати, Команда, ДанныеОперации);
			
		Иначе
			
			ПараметрыВыполнениеКоманды = ПараметрыВыполнение.ПараметрыВыполнениеКоманды;
			Команда                    = "PrintText";
			ДанныеОперации             = ПараметрыВыполнениеКоманды.ДанныеОперации;
			Если Не ЗначениеЗаполнено(ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов) Тогда
				ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов = РезультатВыполнения.ИдентификаторУстройства;
				ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов = РезультатВыполнения.ПодключенноеУстройство;
			КонецЕсли;
			ПараметрыПодключения = ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов;
			ОбработчикДрайвера = ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов.ОбработчикДрайвера;
			
			ПараметрыВыполнение.Вставить("РезультатВыполнения", РезультатВыполнения); 
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение", ЭтотОбъект, ПараметрыВыполнение);
			ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПараметрыПодключения, Команда, ДанныеОперации);
		
		КонецЕсли;
		
	Иначе
		НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение(РезультатВыполнения, ПараметрыВыполнение);
	КонецЕсли;
	
КонецПроцедуры

// Завершение печати дополнительных документов.
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнение - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ДополнительныеДокументы = ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ДанныеОперации.ДополнительныеДокументы;
		Если ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Свойство("КопияРаспечатана") И ПараметрыВыполнение.ПараметрыВыполнениеКоманды.КопияРаспечатана И ДополнительныеДокументы.Количество() > 0 Тогда
			НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнение);
		ИначеЕсли НЕ ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Свойство("КопияРаспечатана") И ДополнительныеДокументы.Количество() > 0 Тогда
			ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Вставить("КопияРаспечатана", Истина);
			НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнение);
		Иначе
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнение.ПараметрыВыполнениеКоманды, ПараметрыВыполнение.РезультатВыполнения);
		КонецЕсли;
	Иначе
		
		ТекстСообщения = СтрШаблон(
		НСтр("ru='При печати дополнительных документов произошла ошибка: %1'"),
		РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
		Если ОбщегоНазначенияБПОКлиент.ИспользуетсяБазоваяФункциональность() Тогда
			
			Если РезультатВыполнения.Свойство("ОписаниеОшибки") Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ОписаниеОшибки;
			КонецЕсли;
			
			Попытка
				МодульЖурналРегистрацииКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ЖурналРегистрацииКлиент");
				МодульЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Подключаемое оборудование.'"),
				"Ошибка", 
				ТекстСообщения);
			Исключение
				ОбщегоНазначенияБПОКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнение.ПараметрыВыполнениеКоманды, ПараметрыВыполнение.РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение печати
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ПечатьЗавершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, ПараметрыВыполнениеКоманды.РезультатВыполнения);
	Иначе
		// При команде "AuthorizeVoid" нельзя выполнить аварийную отмену последней операции отмены
		Если ПараметрыВыполнениеКоманды.Команда = "AuthorizeVoid" Тогда
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, ПараметрыВыполнениеКоманды.РезультатВыполнения);
		// При команде "Settlement" нельзя выполнить аварийную отмену последней операции
		ИначеЕсли ПараметрыВыполнениеКоманды.Команда = "Settlement" Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru='При получении итогов дня по картам, произошла ошибка печати слип чека.
					|На печатающем устройстве не поддерживается печать текстовых документов.
					|Терминал: %1
					|Печатающее устройство: %2'"),
				ПараметрыВыполнениеКоманды.ИдентификаторУстройства,
				ПараметрыВыполнениеКоманды.ПечатающееУстройство);
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
			Если ОбщегоНазначенияБПОКлиент.ИспользуетсяБазоваяФункциональность() Тогда
				
				Если РезультатВыполнения.Свойство("ОписаниеОшибки") Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + РезультатВыполнения.ОписаниеОшибки;
				КонецЕсли;
				
				Попытка
					ОбщегоНазначенияБПОКлиент.ЗаписатьОшибкуВЖурналРегистрации(
						НСтр("ru = 'Подключаемое оборудование.'"),
						ТекстСообщения);
				Исключение
					ОбщегоНазначенияБПОКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
			
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, ТекстСообщения, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			// Отключение оборудования.
			ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
		Иначе
			
			ПараметрыВыполнениеКоманды.Вставить("ОписаниеОшибки", РезультатВыполнения.ОписаниеОшибки);
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки + Символы.ПС
				+ НСтр("ru = 'Продолжить без печати слип-чека?'") + Символы.ПС
				+ НСтр("ru = 'ВНИМАНИЕ:'") + Символы.ПС
				+ НСтр("ru = 'При отмене выполнится отмена операции на эквайринговом терминале.'") + Символы.ПС
				+ НСтр("ru = 'Подготовьте банковскую карту покупателя.'");
			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ОКОтмена, ,, НСтр("ru = 'При печати слип-чека произошла ошибка'"));  
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

// Завершение отмены операции
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьВыполнениеКоманды_ОтменаОперацииИЗавершение(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяПлатежныеСистемы() Тогда
		МодульОборудованиеПлатежныеСистемыКлиентСервер = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиентСервер");
		ПараметрыОперации = МодульОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, ПараметрыВыполнениеКоманды.ДанныеОперации, , "ИдентификаторЗапроса");
		ЛогированиеОперацийБПОСлужебныйВызовСервера.ЗаписатьИсториюПлатежнойОперации("EmergencyVoid", ПараметрыОперации, РезультатВыполнения);
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Эквайринговая операция отменена - ошибка печати слип чека возникла ошибка.'");
	Иначе
		ТекстСообщения = НСтр("ru='Ошибка отмены операции транзакции. Обратитесь в банк.'");
	КонецЕсли;
	
	Если ПараметрыВыполнениеКоманды.Свойство("ОписаниеОшибки") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + ПараметрыВыполнениеКоманды.ОписаниеОшибки;
	КонецЕсли;
	
	РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
	// Отключение оборудования.
	ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатВыполнения);
	
КонецПроцедуры  

// Отключение оборудования 
// 
// Параметры:
//  ПараметрыВыполнениеКоманды - Структура
//  РезультатОперации - Структура
//
Процедура ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, РезультатОперации = Неопределено) Экспорт
	
	Если ПараметрыВыполнениеКоманды.Свойство("ПечатающееУстройствоДополнительныхДокументов") И ЗначениеЗаполнено(ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов) Тогда
		НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов);
	КонецЕсли;
	
	КонтекстВыполнения = Новый Структура();   
	КонтекстВыполнения.Вставить("РезультатОперации", РезультатОперации);
	КонтекстВыполнения.Вставить("ПараметрыВыполнениеКоманды", ПараметрыВыполнениеКоманды);
	
	Если ПараметрыВыполнениеКоманды.ПечатающееУстройствоПодключено И НЕ ПараметрыВыполнениеКоманды.ПечатающееУстройствоБылоПодключенное Тогда                               
			ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеПослеВыполнениеКоманды_ОтключитьПечатающееУстройствоЗавершение", ЭтотОбъект, КонтекстВыполнения);
		НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ПечатающееУстройство);
	Иначе
		ОтключитьОборудованиеПослеВыполнениеКоманды_ОтключитьПечатающееУстройствоЗавершение(Неопределено, КонтекстВыполнения);
	КонецЕсли;     
	
КонецПроцедуры                  

// Завершение отключения оборудования
// 
Процедура ОтключитьОборудованиеПослеВыполнениеКоманды_ОтключитьПечатающееУстройствоЗавершение(РезультатОтключения, КонтекстВыполнения) Экспорт
	
	ПараметрыВыполнениеКоманды = КонтекстВыполнения.ПараметрыВыполнениеКоманды;
	РезультатОперации = КонтекстВыполнения.РезультатОперации;    
	
	СетевоеОборудование = ПараметрыВыполнениеКоманды.ПодключенноеУстройство.СетевоеОборудование;
	ОтключениеОборудования = ПараметрыВыполнениеКоманды.Подключено;
	
	Если ПараметрыВыполнениеКоманды.Свойство("ОставитьПодключенным") И ПараметрыВыполнениеКоманды.ОставитьПодключенным Тогда
		ОтключениеОборудования = Ложь;
	КонецЕсли;
	
	Если ОтключениеОборудования Или СетевоеОборудование Тогда
		
		Если РезультатОперации <> Неопределено Тогда
			КонтекстВыполнения = Новый Структура();   
			КонтекстВыполнения.Вставить("РезультатОперации", РезультатОперации);
			КонтекстВыполнения.Вставить("ПараметрыВыполнениеКоманды", ПараметрыВыполнениеКоманды);
			ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеПослеВыполнениеКоманды_ОтключитьЗавершение", ЭтотОбъект, КонтекстВыполнения);
		Иначе  
			ОповещениеПриОтключении = Неопределено;
		КонецЕсли;
			
		НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
		
	Иначе   
		Если РезультатОперации <> Неопределено Тогда
			ЗавершениеВыполнениеКоманды(РезультатОперации, ПараметрыВыполнениеКоманды);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 


// Завершение отключения оборудования
// 
Процедура ОтключитьОборудованиеПослеВыполнениеКоманды_ОтключитьЗавершение(РезультатОтключения, КонтекстВыполнения) Экспорт
	
	ПараметрыВыполнениеКоманды = КонтекстВыполнения.ПараметрыВыполнениеКоманды;
	РезультатОперации = КонтекстВыполнения.РезультатОперации;           
	
	ЗавершениеВыполнениеКоманды(РезультатОперации, ПараметрыВыполнениеКоманды);
	
КонецПроцедуры 

// Начать получение параметров устройства
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//
Процедура НачатьПолучениеПараметровУстройства(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	Если ИдентификаторУстройства = Неопределено Или ПустаяСтрока(ИдентификаторУстройства) Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Устройство не выбрано или не подключено.'");
			РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);      
	Если ПодключенноеУстройство = Неопределено Тогда
		ПараметрыВыполнениеКоманды = Новый Структура();
		ПараметрыВыполнениеКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);  
		ПараметрыВыполнениеКоманды.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
		ПараметрыВыполнениеКоманды.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеПараметровУстройства_ПодключениеЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ИдентификаторКлиента, ИдентификаторУстройства);
	Иначе                                                                                                                       
		ПараметровУстройства = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);
		РезультатОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, ИдентификаторУстройства);
		РезультатОперации.ПодключенноеУстройство = ПодключенноеУстройство; 
		РезультатОперации.Вставить("ПараметровУстройства", ПараметровУстройства);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;    
	
КонецПроцедуры

// Завершение подключения оборудования
// 
// Параметры:
//  РезультатПодключения - Структура
//  ПараметрыВыполнениеКоманды - Структура
// 
Процедура НачатьПолучениеПараметровУстройства_ПодключениеЗавершение(РезультатПодключения, ПараметрыВыполнениеКоманды) Экспорт
	
	Если РезультатПодключения.Результат Тогда  
		ПодключенноеУстройство = РезультатПодключения.ПодключенноеУстройство;   
		ПараметровУстройства = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПодключенноеУстройство);  
		РезультатПодключения.Вставить("ПараметровУстройства", ПараметровУстройства);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатПодключения);
		НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатПодключения);
	КонецЕсли;
	
КонецПроцедуры

// Начинает выполнение операции на эквайринговом терминале.
// 
Процедура НачатьВыполнениеКоманды_ПослеЗакрытияВопроса(Результат, ПараметрыВыполнениеКоманды) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда    
		ПодключенноеУстройство = ПараметрыВыполнениеКоманды.ПодключенноеУстройство;
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ОтменаОперацииИЗавершение", ЭтотОбъект, ПараметрыВыполнениеКоманды);
		ПодключенноеУстройство.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПодключенноеУстройство, "EmergencyVoid", ПараметрыВыполнениеКоманды.ДанныеОперации);  
	Иначе
		// Отключение оборудования.
		ОтключитьОборудованиеПослеВыполнениеКоманды(ПараметрыВыполнениеКоманды, ПараметрыВыполнениеКоманды.РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры  

#КонецОбласти

#Область Интерфейсные
 
// Выполнить настройку оборудования.
// 
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование.
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор, ОповещениеПриЗавершении = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ФормаНастройки = "Справочник.ПодключаемоеОборудование.Форма.ФормаНастройки";
	ТекущийЯзык = ТекущийЯзык();
	Если ТипЗнч(ТекущийЯзык) = Тип("Строка") Тогда
		КодЯзыка = ТекущийЯзык;
	Иначе
		КодЯзыка = ТекущийЯзык.КодЯзыка;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);       
	ПараметрыФормы.Вставить("КодЯзыка", КодЯзыка);       
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	ОткрытьФорму(ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Завершение настройки оборудования.
// 
// Параметры:
//  Результат - Структура - результат возвращаемый формой при закрытии.
//  Параметры - Структура - параметры команды.
// 
Процедура ВыполнитьНастройкуОборудования_Завершение(Результат, Параметры) Экспорт
	
	РезультатЗавершения = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗавершения);
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьПодключаемоеОборудование";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования.
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьДрайверыОборудования";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы списка платежных операций
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьПлатежныеОперации(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	// ++ НеМобильноеПриложение
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьПлатежныеОперации";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("РегистрСведений.ПлатежныеОперации.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
	// -- НеМобильноеПриложение
	
КонецПроцедуры

// Открытие формы списка фискальных операций
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьФискальныеОперации(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьФискальныеОперации";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы списка операций очереди чеков
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьОчередьЧеков(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ОткрытьОчередьЧеков(ПараметрКоманды, ПараметрыВыполненияКоманды);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Преобразовать данные со сканера в массив.
// 
// Параметры:
//  Параметр - Структура:
//   * Штрихкод - Строка - штрихкод.
//   * Количество - Число - количество.
// 
// Возвращаемое значение:
//  Массив из Структура.
//
Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие(); // АПК:222 - Для обратной совместимости
	
	Данные = Новый Массив;
	Данные.Добавить(ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
	
	Возврат Данные;
	
КонецФункции

// Преобразовать данные со сканера в структуру.
// 
// Параметры:
//  Параметр - Структура - Параметр:
//   * Штрихкод - Строка - штрихкод.
//   * Количество - Число - количество.
// 
// Возвращаемое значение:
//  Структура - Преобразовать данные со сканера в структуру:
//   * Штрихкод - Строка - штрихкод со сканера.
//   * Количество - Число - количество товаров.
//
Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие(); // АПК:222 - Для обратной совместимости
	
	Если Параметр[1] = Неопределено Тогда
		Данные = Новый Структура("Штрихкод, Количество", Параметр[0], 1);    // Достаем штрихкод из основных данных
	Иначе
		Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1], 1); // Достаем штрихкод из дополнительных данных
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область УпрощениеНастройкиПараметров

// Начинает асинхронное заполнение ключевых параметров оборудования по идентификатору
//
// Параметры:
//  ОповещениеЗавершения  - ОписаниеОповещения - оповещение которое будет вызвано по результатам заполнения параметров
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
Процедура НачатьПолучениеКлючевыхПараметров(ОповещениеЗавершения, Идентификатор) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("КлючевыеПараметры",    Новый Структура());
	Контекст.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Контекст.Вставить("Идентификатор",        Идентификатор);

	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеКлючевыхПараметровЗавершение", ЭтотОбъект, Контекст);
	НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор);

КонецПроцедуры

// Завершает асинхронное заполнение ключевых параметров оборудования по идентификатору
//
// Параметры:
//  Результат - Структура
//  Контекст - Структура
Процедура НачатьПолучениеКлючевыхПараметровЗавершение(Результат, Контекст) Экспорт
	
	ОповещениеЗавершения = Контекст.ОповещениеЗавершения;

	Если Результат.Результат Тогда
	
		Идентификатор      = Контекст.Идентификатор;
		КлючевыеПараметры  = Контекст.КлючевыеПараметры;
		ОписаниеИнтерфейса = Результат.ОписаниеДрайвера.ПараметрыДрайвера;
		
		ПрочитатьАтрибутыКлючевыхПараметров(ОписаниеИнтерфейса, КлючевыеПараметры);
	
		ПодключаемоеОборудование = ПодключаемоеОборудование();
		Если Не ПодключаемоеОборудование.Свойство("СобственныеПараметрыОборудования") Тогда
			ПодключаемоеОборудование.Вставить("СобственныеПараметрыОборудования", Новый Соответствие());
		КонецЕсли;
		ПодключаемоеОборудование.СобственныеПараметрыОборудования.Вставить(Идентификатор, КлючевыеПараметры);
		
		// добавить общие параметры
		Если Не КлючевыеПараметры.Свойство("LogEnabled") Тогда
			ДобавитьПараметрЛогДрайвераВключен(КлючевыеПараметры, Результат.ОписаниеДрайвера.ЛогДрайвераВключен);
		КонецЕсли;
		Если Не КлючевыеПараметры.Свойство("LogPath") Тогда
			ДобавитьПараметрЛогДрайвераПутьКФайлу(КлючевыеПараметры, Результат.ОписаниеДрайвера.ЛогДрайвераПутьКФайлу);
		КонецЕсли;
		
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает атрибуты параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//  - Неопределено
//  - Структура - см. НовыйАтрибутыПараметра
//
Функция АтрибутыПараметра(Идентификатор, ИмяПараметра) Экспорт

	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Если Не ПодключаемоеОборудование.Свойство("СобственныеПараметрыОборудования") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КлючевыеПараметры = ПодключаемоеОборудование.СобственныеПараметрыОборудования.Получить(Идентификатор);
	Если КлючевыеПараметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АтрибутыПараметра = Неопределено;
	Если Не КлючевыеПараметры.Свойство(ИмяПараметра, АтрибутыПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АтрибутыПараметра;

КонецФункции

// Возвращает Истина если параметр с именем ИмяПараметра существует, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//  Булево - 
Функция ПараметрСуществует(Идентификатор, ИмяПараметра) Экспорт

	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Возврат АтрибутыПараметра <> Неопределено;

КонецФункции

// Возвращает тип параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//   Тип - Тип - Тип значения параметра (Число, Строка, Булево)
Функция ТипПараметра(Идентификатор, ИмяПараметра) Экспорт
	
	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Если АтрибутыПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АтрибутыПараметра.Тип;

КонецФункции

// Возвращает значение параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//
// Возвращаемое значение:
//  Число, Строка, Булево, Неопределено - установленное значение параметра
Функция ЗначениеПараметра(Идентификатор, ИмяПараметра) Экспорт

	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Если АтрибутыПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АтрибутыПараметра.Стандартный Тогда
		Возврат АтрибутыПараметра.ЗначениеСтандартного;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияВызовСервера.ПараметрыУстройства(Идентификатор);
	ИмяРеквизита        = АтрибутыПараметра.ИмяРеквизита;
	ЗначениеПараметра   = Неопределено;
	Если Не ПараметрыУстройства.Свойство(ИмяРеквизита, ЗначениеПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АтрибутыПараметра.Преобразование = "Инвертировать" И АтрибутыПараметра.Тип = Тип("Булево") Тогда
		ЗначениеПараметра = Не ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;

КонецФункции

// Устанавливает значение параметра оборудования по стандартному имени параметра, имя проверяется по словарю возможных вариантов
//
// Параметры:
//  Идентификатор - СправочникСсылка.ПодключаемоеОборудование - идентификатор оборудования
//  ИмяПараметра - Строка - стандартное имя параметра оборудования
//  НовоеЗначение - Число, Строка, Булево, Неопределено - новое значение параметра которое требуется установить
// 
// Возвращаемое значение:
//  Булево - результат выполнения
Функция УстановитьЗначениеПараметра(Идентификатор, ИмяПараметра, НовоеЗначение) Экспорт
	
	АтрибутыПараметра = АтрибутыПараметра(Идентификатор, ИмяПараметра);
	Если АтрибутыПараметра = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если АтрибутыПараметра.ТолькоЧтение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыУстройства = МенеджерОборудованияВызовСервера.ПараметрыУстройства(Идентификатор);
	ИмяРеквизита        = АтрибутыПараметра.ИмяРеквизита;
	Если АтрибутыПараметра.Преобразование = "Инвертировать" И АтрибутыПараметра.Тип = Тип("Булево") Тогда
		НовоеЗначение = Не НовоеЗначение;
	КонецЕсли;
	ПараметрыУстройства.Вставить(ИмяРеквизита, НовоеЗначение);
	
	
	Возврат МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Идентификатор, ПараметрыУстройства);
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#Область Системные

// Устарела: следует использовать ИнтеграцияПодсистемБПОКлиент.ПередНачаломРаботыСистемы.
// Вызываемая перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
	ИнтеграцияПодсистемБПОКлиент.ПередНачаломРаботыСистемы();
	
КонецПроцедуры

// Устарела: следует использовать ИнтеграцияПодсистемБПОКлиент.ПриНачалеРаботыСистемы.
// Функция, вызываемая при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ИнтеграцияПодсистемБПОКлиент.ПриНачалеРаботыСистемы();
	
КонецПроцедуры

// Устарела: следует использовать ИнтеграцияПодсистемБПОКлиент.ПередЗавершениемРаботыСистемы.
//
Процедура ПередЗавершениемРаботыСистемы() Экспорт
	
	ИнтеграцияПодсистемБПОКлиент.ПередЗавершениемРаботыСистемы();
	
КонецПроцедуры

// Устарела: следует использовать ОбщегоНазначенияБПОКлиент.ДатаСеанса.
// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата().
//
// Возвращаемое значение:
//  Дата.
//
Функция ДатаСеанса() Экспорт
	
	Возврат ОбщегоНазначенияБПОКлиент.ДатаСеанса();
	
КонецФункции

#Если Не ВебКлиент Тогда

// Устарела: больше не используется.
// Установить или переустановить драйверы помеченные флагами.
//
Процедура ПереустановитьПомеченныеПоставляемыеДрайверы() Экспорт
	
	ПараметрыРаботыКлиента = ИнтеграцияПодсистемБПОКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	ОборудованиеДляПереустановки = Новый Массив;
	Для Каждого ИмяМакетаДрайвера Из ПараметрыРаботыКлиента.ОборудованиеДляПереустановки Цикл
		ОборудованиеДляПереустановки.Добавить(ИмяМакетаДрайвера);
	КонецЦикла;

	ВнешниеКомпонентыБПОКлиент.ПереустановитьКомпоненты(ОборудованиеДляПереустановки);
	
КонецПроцедуры

// Устарела: следует использовать ОбщегоНазначенияБПОКлиент.ПрочитатьКорневойЭлементXML.
// Читает корневой элемент XML.
//
// Параметры:
//  СтрокаXML - Строка - XML строка.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПрочитатьКорневойЭлементXML(СтрокаXML) Экспорт
	
	Возврат ОбщегоНазначенияБПОКлиент.ПрочитатьКорневойЭлементXML(СтрокаXML);
	
КонецФункции

#КонецЕсли

// Устарела: больше не используется.
// Возвращает значения параметров, необходимых для работы клиентского кода конфигурации
// без дополнительных серверных вызовов.
// 
// Возвращаемое значение:
//   см. ИнтеграцияПодсистемБПОКлиент.ПараметрыРаботыКлиентаПриЗапуске
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Возврат ИнтеграцияПодсистемБПОКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
КонецФункции

// Устарела: следует использовать ИнтеграцияПодсистемБПОКлиент.ОбработкаВнешнегоСобытия.
// Выполняет обработку внешнего события, вызывается из глобального модуля
//
// Параметры:
//  Источник - Строка.
//  Событие - Строка.
//  Данные - Строка.
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	ИнтеграцияПодсистемБПОКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределеннаяФискализации

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ПодключениеСистемыВзаимодействия.
// Подключает обработчики системы оповещения, для использования в распределенной фискализации
//
Процедура ПодключениеСистемыВзаимодействия() Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ПодключениеСистемыВзаимодействия(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ОбработкаОповещенияПодключенияСообщенийФискализации.
// Завершение подключения обработчика системы оповещения
// 
// Параметры:
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияПодключенияСообщенийФискализации(ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ОбработкаОповещенияПодключенияСообщенийФискализации(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ОбработкаОповещенияСообщенийФискализации.
// Обработчик появлении новых сообщений в обсуждении 
//
// Параметры:
//  Сообщение - СообщениеСистемыВзаимодействия
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияСообщенийФискализации(Сообщение, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ОбработкаОповещенияСообщенийФискализации(Сообщение, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_ПослеОткрытияЧека.
// Обработчик после открытия чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека.
// Обработчик после ошибки печати чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_Завершение.
// Завершение фискализации чеков в очереди
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ОбщиеПараметры - Структура
// 
Процедура ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации.
// Завершение фискализации пакетной операции в очереди
// 
// Параметры:
//  РезультатВыполнения - см. ОборудованиеЧекопечатающиеУстройстваКлиент.РезультатПродажаСВыдачейНаличных
//  ОбщиеПараметры - Структура
// 
Процедура ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации(РезультатВыполнения, ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_Начало.
// Начать фискализацию чеков в очереди
// 
// Параметры:
//  Параметры - см. ПараметрыФискализацииОчередиЧеков
Процедура ФискализацияЧековВОчереди_Начало(Параметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди_Начало(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ПараметрыФискализацииОчередиЧеков.
// Возвращает структуру параметров для выполнения фискализации очереди чеков
// 
// Возвращаемое значение:
//  Структура:
//   * Форма - ФормаКлиентскогоПриложения
//   * КассаККМ - ОпределяемыйТип.КассаБПО
Функция ПараметрыФискализацииОчередиЧеков() Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		Возврат МодульРаспределеннаяФискализацияКлиент.ПараметрыФискализацииОчередиЧеков();
	КонецЕсли;
	
КонецФункции

// Устарела: следует использовать РаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди.
// Выполнить фискализацию чеков в очереди
//
// Параметры:
//  РазрешенаАвтоматическаяФискализация - Булево
//  Параметры - см. ПараметрыФискализацииОчередиЧеков.
Процедура ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация = Истина, Параметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРаспределеннаяФискализация() Тогда
		МодульРаспределеннаяФискализацияКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("РаспределеннаяФискализацияКлиент");
		МодульРаспределеннаяФискализацияКлиент.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Устарела: больше не используется
// Выводит текст в панель состояния.
//
// Параметры:
//  ТекстСообщения - Строка
//  Прогресс - Число - индикатор прогресса
//  Пояснение - Строка
//
Процедура СостояниеПроцесса(ТекстСообщения, Прогресс = Неопределено, Пояснение = Неопределено) Экспорт
	
#Если НЕ МобильныйКлиент Тогда
	Состояние(ТекстСообщения, Прогресс);
#КонецЕсли 
	
КонецПроцедуры

// Устарела: следует использовать ВыбратьУстройство.
// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
// Параметры:
//  ОповещениеВыбора - ОписаниеОповещения - событие описания оповещения.
//  ТипОборудования - Структура, Массив из Строка, Строка - тип оборудования для выбора устройства.
//  ТекстЗаголовкаВыбора - Строка - Заголовок окна выбора.
//  СообщениеНеПодключено - Строка - Текст сообщения о не подключенных устройствах
//  СообщениеНеВыбрано - Строка - Текст сообщения о не выбранных устройствах
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, СообщениеНеПодключено = "", СообщениеНеВыбрано = "") Экспорт
	
	Если Не ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеПодключено) Тогда
		СообщениеНеПодключено = НСтр("ru='Необходимые устройства не подключены к текущему рабочему месту.'");
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеНеВыбрано) Тогда
		СообщениеНеВыбрано = НСтр("ru='Устройство не выбрано.'");
	КонецЕсли;
		
	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();   
	СписокОтбор.ТипыПО = ТипОборудования;                  
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);   
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, СообщениеНеПодключено);
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, Идентификатор);
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, РезультатВыполнения);
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("ОповещениеВыбора"   , ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбрано" , СообщениеНеВыбрано);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устарела: больше не используется
// Завершение выбора устройства
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, Параметры.СообщениеНеВыбрано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	Иначе
		Идентификатор = ?(Результат = Неопределено, Неопределено, Результат.Значение);
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, Идентификатор);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбора, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#Область ВыборКодаВидаНоменклатурнойКлассификации

// Устарела: больше не используется
// Процедура открывает форму выбора кода вида номенклатурной классификации
//
// Параметры:
//  ОповещениеПриВыборе - ОписаниеОповещения - событие описания оповещения.
//
Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации(ОповещениеПриВыборе) Экспорт
	
	// ++ Локализация
	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе", ОповещениеПриВыборе);
	Обработчик = Новый ОписаниеОповещения("НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение", ЭтотОбъект, ПараметрыКоманды);
	ОткрытьФорму("ОбщаяФорма.КодВидаНоменклатурнойКлассификации", ,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	// -- Локализация
	
КонецПроцедуры

// Устарела: больше не используется
// Завершение выбора 
// 
// Параметры:
//  Результат - Структура
//  Параметры - Структура
// 
Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Параметры.ОповещениеПриВыборе <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриВыборе, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ККТ

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСессииРегистрацииКМ.
// Осуществляет открытие сессии регистрации КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ.
// Осуществляет закрытии сессии регистрации КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ.
// Осуществляет запрос КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры, ДополнительныеПараметры);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ.
// Начать получения результатов запроса КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ.
// Начать подтверждение КМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - обработчик результата.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы.
//  Параметры - Структура - Содержит параметры выполнения операции.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//
Процедура НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, Параметры, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
		МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Параметры);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Чекопечатающие устройства не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТСД

// Устарела: следует использовать ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД.
// Начать загрузку данных из терминала сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   СворачиватьДанные - Булево
//
Процедура НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, СворачиватьДанные = Ложь) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяТерминалыСбораДанных() Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗавершении, УникальныйИдентификатор);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД.
// Начать выгрузку данных в терминал сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ТаблицаВыгрузкиТоваров - ТаблицаЗначений - 
//   ПолнаяВыгрузка - Булево -
//
Процедура НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров, ПолнаяВыгрузка = Истина) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяТерминалыСбораДанных() Тогда              
		МодульОборудованиеТерминалыСбораДанныхКлиентСервер = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиентСервер");
		ПараметрыОперации = МодульОборудованиеТерминалыСбораДанныхКлиентСервер.ПараметрыВыгрузкиВТСД();     
		ПараметрыОперации.ТаблицаТоваров = ТаблицаВыгрузкиТоваров;    
		ПараметрыОперации.ЧастичнаяВыгрузка = Не ПолнаяВыгрузка;
		
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьВыгрузкуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеТерминалыСбораДанныхКлиент.НачатьОчисткуДанныеВТСД.
// Начать очистку данных в терминале сбора данных.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//
Процедура НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяТерминалыСбораДанных() Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьОчисткуДанныеВТСД(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Терминалы сбора данных не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеВесы

// Устарела: следует использовать ОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов
// Получает вес с электронных весов.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения - идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//   ОтображатьСообщения     - Булево.
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Ложь) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяВесовоеОборудование() Тогда
		МодульОборудованиеВесовоеОборудованиеКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
		МодульОборудованиеВесовоеОборудованиеКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, Неопределено); 
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Весовое оборудование не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

// Устарела: следует использовать ОборудованиеВесовоеОборудованиеКлиент.НачатьУстановкуВесаТарыЭлектронныхВесов
// Начать установку веса тары на электронных весах.
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения - идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - идентификатор устройства, если неопределенно - будет предложен выбор.
//   Вес                     - Число - вес тары.
//
Процедура НачатьУстановкуВесаТары(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, Вес = Неопределено) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяВесовоеОборудование() Тогда
		
		МодульОборудованиеВесовоеОборудованиеКлиентСервер = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер");
		МодульОборудованиеВесовоеОборудованиеКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
		
		ПараметрыОперации = МодульОборудованиеВесовоеОборудованиеКлиентСервер.ПараметрыОперацииЭлектронныеВесы(Вес);
		МодульОборудованиеВесовоеОборудованиеКлиент.НачатьУстановкуВесаТарыЭлектронныхВесов(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации); 
		
	Иначе
		РезультатОперации                = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании();
		РезультатОперации.Результат      = Ложь;
		РезультатОперации.ОписаниеОшибки = НСтр("ru = 'Подсистема Весовое оборудование не используется'");
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Подключение оборудования рекурсивно
// 
// Параметры:
//  РезультатПодключения - Структура
//  Контекст - Структура
//   * ПараметрыПодключения - Структура
//   * ОповещениеПриПодключении - ОписаниеОповещения
Процедура НачатьПодключениеОборудованияРекурсивно(РезультатПодключения, Контекст) Экспорт
	
	ОборудованиеДляПодключения = Контекст.ОборудованиеДляПодключения;
	Если РезультатПодключения <> Неопределено Тогда
		ОборудованиеДляПодключения.Удалить(ОборудованиеДляПодключения.ВГраница());
		Если РезультатПодключения.Результат Тогда
			ПараметрыПодключения = Контекст.ПараметрыПодключения; // Структура
			ПараметрыПодключения.Клиенты.Добавить(Контекст.ИдентификаторКлиента);
			ПараметрыПодключения.КоличествоПодключенных = 1;
			ПодключаемоеОборудование = ПодключаемоеОборудование();
			ПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(ПараметрыПодключения);
			
			Если Контекст.ОповещениеПриПодключении <> Неопределено Тогда
				Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина);
				Результат.ПодключенноеУстройство  = ПараметрыПодключения;
				Результат.ИдентификаторУстройства = ПараметрыПодключения.ИдентификаторУстройства;
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриПодключении, Результат);
			КонецЕсли;
		Иначе
			Если Контекст.ОповещениеПриПодключении <> Неопределено Тогда
				ПараметрыПодключения = Контекст.ПараметрыПодключения; // Структура
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru='Не удалось подключить устройство (%1): %2'"), 
					ПараметрыПодключения.Наименование, 
					РезультатПодключения.ОписаниеОшибки);
				Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
				Результат.ИдентификаторУстройства = ПараметрыПодключения.ИдентификаторУстройства;
				Результат.ОшибкаЗагрузки = РезультатПодключения.ОшибкаЗагрузки;
				ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриПодключении, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОборудованиеДляПодключения.Количество()>0 Тогда
		Оповещение       = Новый ОписаниеОповещения("НачатьПодключениеОборудованияРекурсивно", ЭтотОбъект, Контекст);
		Устройство       = ОборудованиеДляПодключения[ОборудованиеДляПодключения.ВГраница()];
		НовоеПодключение = ПараметрыПодключенияУстройства(Устройство);
		Контекст.ПараметрыПодключения = НовоеПодключение;
		НовоеПодключение.ОбработчикДрайвера.НачатьПодключениеУстройства(Оповещение, НовоеПодключение);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает объект драйвера из локального кеша клиентского приложения
// 
// Параметры:
//   ИдентификаторОбъекта - Строка -
// 
// Возвращаемое значение:
//   ОбъектВнешнейКомпоненты
// 
Функция ОбъектДрайвераИзКэша(ИдентификаторОбъекта) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого ДрайверОборудования Из ПодключаемоеОборудование.ДрайверыОборудования Цикл
		Если ДрайверОборудования.Ключ = ИдентификаторОбъекта  Тогда
			ОбъектДрайвера = ДрайверОборудования.Значение;
			Возврат ОбъектДрайвера;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДопустимаУстановкаКомпоненты(ИмяМакета) Экспорт

#Если ВебКлиент Тогда
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяБСП() Тогда
		Реквизиты = МенеджерОборудованияВызовСервера.СовместимостьВнешнейКомпонентыИзФайла(ИмяМакета);
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Результат = ТекущийКлиентПоддерживаетсяКомпонентой(Реквизиты);
			Возврат Результат = Истина; // Результат может содержать Неопределено
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
#Иначе
	Возврат Истина;
#КонецЕсли

КонецФункции

Процедура УстановитьРежимПодключенияРасширенияИнформацииОКомпьютере(Режим) Экспорт
	
	Если ОбщегоНазначенияБПОКлиент.ЭтоВебКлиент() Тогда
		ИмяПараметра = "БПО.ВыполнятьУстановкуРасширенияИнформацииОКомпьютере";
		ОбщегоНазначенияБПОКлиент.УстановитьПараметрПриложения(ИмяПараметра, Режим);
		МенеджерОборудованияКлиентПереопределяемый.УстановитьРежимПодключенияРасширенияИнформацииОКомпьютере(Режим);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеMACАдреса(ОбработкаОповещения, УстанавливатьРасширение = Истина, ЗапускПриложения = Ложь) Экспорт
	
#Если ВебКлиент Тогда
	Контекст = Новый Структура();
	Контекст.Вставить("ОбработкаОповещения", ОбработкаОповещения);
	Контекст.Вставить("УстанавливатьРасширение", УстанавливатьРасширение);
	Контекст.Вставить("ЗапускПриложения", ЗапускПриложения);

	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияПолученияИнформацииОКомпьютере_Завершение", ЭтотОбъект, Контекст);
	НачатьПодключениеРасширенияПолученияИнформацииОКомпьютере(Оповещение);
#Иначе 
	ВыполнитьПолучениеИнформацииОСетевыхАдаптерах(ОбработкаОповещения);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьПолучениеMACАдресаЗавершение(MACАдрес, Контекст) Экспорт
	
	ПривязатьРабочееМестоПоMACАдресу(Контекст.ИдентификаторКлиента, MACАдрес);
	
КонецПроцедуры

// Выполняет отображение списка рабочих мест для выбора рабочего места к текущему идентификатору веб-клиента
//
// Параметры:
//   ИдентификаторКлиента - Строка
//   MACАдрес - Строка
//
Процедура ПривязатьРабочееМестоПоMACАдресу(ИдентификаторКлиента, MACАдрес) Экспорт
	
	СписокРабочихМест = МенеджерОборудованияВызовСервера.ПривязатьРабочееМестоПоMACАдресу(ИдентификаторКлиента, MACАдрес); 
	Если СписокРабочихМест.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	РабочееМесто = СписокРабочихМест[0];
	ПодключаемоеОборудование().РабочееМесто = РабочееМесто;
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеMACАдреса

Процедура НачатьПодключениеРасширенияПолученияИнформацииОКомпьютере_Завершение(Результат, Контекст) Экспорт
	
	ОбработкаОповещения = Контекст.ОбработкаОповещения;
	УстанавливатьРасширение = Контекст.УстанавливатьРасширение;
	ЗапускПриложения = Контекст.ЗапускПриложения;
	
	Если Результат Тогда
		ВыполнитьПолучениеИнформацииОСетевыхАдаптерах(ОбработкаОповещения);
	Иначе
		Если ЗапускПриложения Тогда
			// при запуске приложения не нужно создавать рабочее место, 
			// т.к. еще не устанавливалось расширение работы с браузером,
			// расширение будет установлено позднее при обращении к оборудованию.
			Возврат;
		КонецЕсли;
		Если УстанавливатьРасширение Тогда
			ВыполнитьУстановкуРасширенияСПомощьюБПО(ОбработкаОповещения);
		Иначе
			Если ОбработкаОповещения <> Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОбработкаОповещения, Неопределено);
			КонецЕсли;     
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьУстановкуРасширенияСПомощьюБПО(ОбработкаОповещения)
	
	ИмяПараметра = "БПО.ВыполнятьУстановкуРасширенияИнформацииОКомпьютере";
	ВыполнятьУстановку = ОбщегоНазначенияБПОКлиент.ПараметрПриложения(ИмяПараметра);
	Если ВыполнятьУстановку = Неопределено Тогда
		ВыполнятьУстановку = Истина;
	КонецЕсли;
	Если ВыполнятьУстановку Тогда
		Оповещение = Новый ОписаниеОповещения("ПоказатьВопросНачатьПодключениеРасширения_Завершение", ЭтотОбъект, ОбработкаОповещения);
		ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСКомпьютеромБПО",,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ОбработкаОповещения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОбработкаОповещения, Неопределено);
		КонецЕсли;     
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросНачатьПодключениеРасширения_Завершение(Результат, ОбработкаОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
#Если ВебКлиент Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияПолученияИнформацииОКомпьютере_Завершение", ЭтотОбъект, ОбработкаОповещения);
		НачатьУстановкуРасширенияПолученияИнформацииОКомпьютере(Оповещение);
#КонецЕсли
	Иначе
		
		УстановитьРежимПодключенияРасширенияИнформацииОКомпьютере(Ложь);
		
		Если ОбработкаОповещения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОбработкаОповещения, Неопределено);
		КонецЕсли;     
	КонецЕсли;     
	
КонецПроцедуры

Процедура НачатьУстановкуРасширенияПолученияИнформацииОКомпьютере_Завершение(ОбработкаОповещения) Экспорт
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОбработкаОповещения", ОбработкаОповещения);
	Контекст.Вставить("УстанавливатьРасширение", Ложь); // если расширение не установилось, повторно не устанавливать
	Контекст.Вставить("ЗапускПриложения", Ложь);
	
#Если ВебКлиент Тогда
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияПолученияИнформацииОКомпьютере_Завершение", ЭтотОбъект, Контекст);  
	НачатьПодключениеРасширенияПолученияИнформацииОКомпьютере(Оповещение);
#КонецЕсли
	
КонецПроцедуры 

Процедура ВыполнитьПолучениеИнформацииОСетевыхАдаптерах(ОбработкаОповещения) Экспорт
	
#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
	
	НачатьПолучениеИнформацииОСетевыхАдаптерахЗавершение(Новый Массив(), ОбработкаОповещения);
	
#Иначе
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеИнформацииОСетевыхАдаптерахЗавершение", ЭтотОбъект, ОбработкаОповещения);   
	НачатьПолучениеИнформацииОСетевыхАдаптерах(Оповещение);
	
#КонецЕсли
	
КонецПроцедуры 

Процедура НачатьПолучениеИнформацииОСетевыхАдаптерахЗавершение(Результат, ОбработкаОповещения) Экспорт
	
	Если Результат.Количество() > 0 Тогда
		MACАдрес = Результат[0].MACАдрес;
	Иначе
		MACАдрес = "";
	КонецЕсли;     
	
	Если ОбработкаОповещения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, MACАдрес);
	КонецЕсли;     
	
КонецПроцедуры 

#КонецОбласти

#Область ПодключениеОборудования

// Начать подключения устройств.
//
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для выбора устройства.
//  ИдентификаторУстройства - Массив из Строка, СправочникСсылка.ПодключаемоеОборудование - подключаемое устройство.
//  СетевоеОборудование - Булево - использовать сетевое оборудование при подключении.
//
// Возвращаемое значение:
//  Структура - Результаты подключения устройств.
//
Функция УстройстваДляПодключения(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, СетевоеОборудование = Истина)

	ПодключенноеОборудование = Новый Массив(); // Результаты подключения устройств
	ОборудованиеДляПодключения = Новый Массив();
	
	ТекущийЯзык = ТекущийЯзык();
	КодЯзыкаПользователя = ?(ТипЗнч(ТекущийЯзык) = Тип("Строка"), ТекущийЯзык, ТекущийЯзык.КодЯзыка); 
	
	Если ЭтоСписокОборудования(ТипыПО) Тогда
		СписокОборудования = ТипыПО;
	Иначе
		ОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		ОборудованияОтбор.ТипыПО = ТипыПО;
		ОборудованияОтбор.Идентификатор = ИдентификаторУстройства;
		ОборудованияОтбор.СетевоеОборудование = СетевоеОборудование;
		ОборудованияОтбор.КодЯзыка = КодЯзыкаПользователя;
		СписокОборудования = МенеджерОборудованияВызовСервера.СписокОборудования(ОборудованияОтбор); 
	КонецЕсли;
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(Устройство.Ссылка);
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				
				Если Устройство.СетевоеОборудование И НЕ Устройство.ДоступноТекущемуПользователю Тогда
					ОписаниеОшибки = НСтр("ru='Нет прав на использование для текущего пользователя.'");
					Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
					Результат.ИдентификаторОбъекта = Устройство.ИдентификаторОбъекта;
					ПодключенноеОборудование.Добавить(Результат);
					Продолжить;
				КонецЕсли;
				
				ОборудованиеДляПодключения.Добавить(Устройство);
				
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
				Результат = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Истина, Неопределено, Устройство.Ссылка);
				Результат.ПодключенноеУстройство = ПодключенноеУстройство;
				Результат.ИдентификаторОбъекта   = Устройство.ИдентификаторОбъекта;
				ПодключенноеОборудование.Добавить(Результат);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = 
			НСтр("ru='Устройство отсутствует на текущем рабочем месте и не может использоваться для подключения. Укажите другое устройство.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ПодключенноеОборудование.Добавить(РезультатВыполнения);
	ИначеЕсли ТипыПО = Неопределено И ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Нет доступного оборудования для подключения.'");
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(Ложь, ОписаниеОшибки);
		ПодключенноеОборудование.Добавить(РезультатВыполнения);
	КонецЕсли; 
	
	Результат = Новый Структура();
	Результат.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
	Результат.Вставить("ОборудованиеДляПодключения", ОборудованиеДляПодключения);
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПоддерживаемыеТипыПодключаемогоОборудованияНаФорме(Форма, ПоддерживаемыеТипыПодключаемогоОборудования)
	
	Если ПоддерживаемыеТипыПодключаемогоОборудования = Неопределено Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "";
	КонецЕсли;
	
	Если ТипЗнч(Форма.ПоддерживаемыеТипыПодключаемогоОборудования) = Тип("Строка") Тогда
		Если ТипЗнч(ПоддерживаемыеТипыПодключаемогоОборудования) = Тип("Структура") Тогда
			Форма.ПоддерживаемыеТипыПодключаемогоОборудования = СтруктураТипОборудованияВСтроку(ПоддерживаемыеТипыПодключаемогоОборудования);
		Иначе
			Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Форма.ПоддерживаемыеТипыПодключаемогоОборудования) = Тип("Структура") Тогда
		Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	ИначеЕсли ТипЗнч(Форма.ПоддерживаемыеТипыПодключаемогоОборудования) = Тип("Массив") Тогда
		ТипыОборудования = ПолучитьТипыОборудования(ПоддерживаемыеТипыПодключаемогоОборудования);
		Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ТипыОборудования;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеОборудования

// Функция отключает устройства
//
// Параметры:
//  ИдентификаторКлиента - УникальныйИдентификатор
//  ТипыПО - Структура, Массив из Строка, Строка - тип оборудования для отключения устройств.
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - отключаемое устройство.
//      
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПодключаемоеОборудование - Результаты отключения устройств.
//  
Функция УстройстваДляОтключения(ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	ОтключенноеОборудование  = Новый Массив(); // Результаты отключения устройств  
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	
	Если ТипыПО <> Неопределено Тогда
		ПодключенныеУстройства = ПолучитьПодключенныеУстройства(ТипыПО);
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда   
		ПодключенноеУстройство = ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
		Если ПодключенноеУстройство <> Неопределено Тогда        
			ПодключенныеУстройства = Новый Массив();
			ПодключенныеУстройства.Добавить(ПодключенноеУстройство);
		Иначе
			Возврат ОтключенноеОборудование; 
		КонецЕсли;   
	Иначе
		Возврат ОтключенноеОборудование; 
	КонецЕсли;
	
	Возврат ПодключенныеУстройства;
	
КонецФункции  

#КонецОбласти

#Область ККТ

// Процедура дополнительной обработки ошибки.
// 
// Параметры:
//  РезультатВыполнения - Структура 
//
Процедура ДополнительнаяОбработкаОшибки(РезультатВыполнения)     
	
	ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
	
	Если СтрНайти(ВРег(ОписаниеОшибки), ВРег(НСтр("ru='Не поддерживается в данной версии'"))) > 0 Тогда
		ОписаниеОшибки = НСтр("ru='Не поддерживается в данной версии.'") 
		+ Символы.НПП + НСтр("ru='Обновите прошивку ККТ до актуальной версии.'");
	КонецЕсли;
	
	РезультатВыполнения.ОписаниеОшибки = ОписаниеОшибки; 
	
КонецПроцедуры

// Функция возвращает идентификатор открытой сессии для фискального устройства.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства
// 
// Возвращаемое значение:
//  Неопределено - Сессия проверки кодов маркировки
Функция СессияПроверкиКодовМаркировки(ИдентификаторУстройства) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	ИдентификаторСессии = Неопределено;
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			ИдентификаторСессии = ФискальноеУстройство.ИдентификаторСессии;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСессии;
	
КонецФункции

// Процедура сохраняет идентификатор открытой сессии для фискального устройства.
//
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Устройство.
//  ИдентификаторСессии - Строка
//  ИдентификаторЗапроса - Строка
//
Процедура УстановитьСессиюПроверкиКодовМаркировки(ИдентификаторУстройства, ИдентификаторСессии = Неопределено, ИдентификаторЗапроса = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			ФискальноеУстройство.ИдентификаторСессии = ИдентификаторСессии;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ФискальноеУстройство = Новый Структура();
	ФискальноеУстройство.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ФискальноеУстройство.Вставить("ИдентификаторСессии" , ИдентификаторСессии);
	ФискальноеУстройство.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	ФискальныеУстройства.Добавить(ФискальноеУстройство);
	
КонецПроцедуры

// Функция возвращает проверяет ли устройство код маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор -Идентификатор устройства
// 
// Возвращаемое значение:
//  Структура - Проверка кода маркировки:
//   * ИдентификаторСессии - УникальныйИдентификатор.
//   * ИдентификаторЗапроса - УникальныйИдентификатор.
//
Функция ПроверкаКодаМаркировки(ИдентификаторУстройства) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторСессии");
	Результат.Вставить("ИдентификаторЗапроса");   
	Результат.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			Результат.ИдентификаторСессии  = ФискальноеУстройство.ИдентификаторСессии;
			Результат.ИдентификаторЗапроса = ФискальноеУстройство.ИдентификаторЗапроса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура сохраняет статус проверки кода маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства.
//  ИдентификаторЗапроса - Неопределено - Идентификатор запроса
//
Процедура УстановитьПроверкуКодаМаркировки(ИдентификаторУстройства, ИдентификаторЗапроса = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			   ФискальноеУстройство.ИдентификаторЗапроса = ИдентификаторЗапроса;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Результат проверки кода маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства
//  ИдентификаторСессии - УникальныйИдентификатор - Идентификатор сессии
//  ПараметрыЗапросаКМ -Структура - Параметры запроса КМ.
// 
// Возвращаемое значение:
//  Неопределено - Результат проверки кода маркировки
Функция РезультатПроверкиКодаМаркировки(ИдентификаторУстройства, ИдентификаторСессии, ПараметрыЗапросаКМ) Экспорт
	
	РезультатПроверки  = Неопределено;
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ПроверкиКодаМаркировки = ПодключаемоеОборудование.ПроверкиКодаМаркировки;
	
	Для Каждого ПроверкаКодаМаркировки Из ПроверкиКодаМаркировки Цикл
		Если ПроверкаКодаМаркировки.ИдентификаторУстройства = ИдентификаторУстройства
			И ПроверкаКодаМаркировки.ИдентификаторСессии = ИдентификаторСессии
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.КонтрольнаяМарка = ПараметрыЗапросаКМ.КонтрольнаяМарка  
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.Количество = ПараметрыЗапросаКМ.Количество
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = ПараметрыЗапросаКМ.ПланируемыйСтатусТовара Тогда
				РезультатПроверки = ПроверкаКодаМаркировки.РезультатПроверки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Процедура устанавливает результат проверки кода маркировки.
// 
// Параметры:
//  ИдентификаторУстройства - УникальныйИдентификатор - Идентификатор устройства.
//  ИдентификаторСессии - УникальныйИдентификатор
//  ПараметрыЗапросаКМ - Структура
//  РезультатПроверки - Структура
//  ИдентификаторЗапроса - УникальныйИдентификатор
//
Процедура УстановитьРезультатПроверкиКодаМаркировки(ИдентификаторУстройства, ИдентификаторСессии, ПараметрыЗапросаКМ, РезультатПроверки, ИдентификаторЗапроса = Неопределено) Экспорт
	
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	ФискальныеУстройства = ПодключаемоеОборудование.ФискальныеУстройства;
	Для Каждого ФискальноеУстройство Из ФискальныеУстройства Цикл
		Если ФискальноеУстройство.ИдентификаторУстройства = ИдентификаторУстройства Тогда
			   ФискальноеУстройство.ИдентификаторЗапроса = ИдентификаторЗапроса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПроверкиКодаМаркировки = ПодключаемоеОборудование.ПроверкиКодаМаркировки;
	Для Каждого ПроверкаКодаМаркировки Из ПроверкиКодаМаркировки Цикл
		Если ПроверкаКодаМаркировки.ИдентификаторУстройства = ИдентификаторУстройства
			И ПроверкаКодаМаркировки.ИдентификаторСессии = ИдентификаторСессии
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.КонтрольнаяМарка = ПараметрыЗапросаКМ.КонтрольнаяМарка  
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.Количество = ПараметрыЗапросаКМ.Количество
			И ПроверкаКодаМаркировки.ПараметрыЗапросаКМ.ПланируемыйСтатусТовара = ПараметрыЗапросаКМ.ПланируемыйСтатусТовара Тогда
				ПроверкаКодаМаркировки.РезультатПроверки = РезультатПроверки;
			Возврат;
		КонецЕсли;
	КонецЦикла;                             
	
	ПроверкаКодаМаркировки = Новый Структура();
	ПроверкаКодаМаркировки.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ПроверкаКодаМаркировки.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПроверкаКодаМаркировки.Вставить("ПараметрыЗапросаКМ" , ПараметрыЗапросаКМ);
	ПроверкаКодаМаркировки.Вставить("РезультатПроверки"  , РезультатПроверки);  
	
	ПроверкиКодаМаркировки.Добавить(ПроверкаКодаМаркировки);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманды

// Завершение выполнение команды
// 
// Параметры:
//  РезультатОперации - Структура
//  ПараметрыВыполнениеКоманды - Структура
//
Процедура ЗавершениеВыполнениеКоманды(РезультатОперации, ПараметрыВыполнениеКоманды) Экспорт
	
	Если ПараметрыВыполнениеКоманды.Свойство("СообщенияВСлужбуТехническойПоддержки") 
		И ПараметрыВыполнениеКоманды.СообщенияВСлужбуТехническойПоддержки 
		И ОбщегоНазначенияБПОКлиент.ИспользуетсяСообщенияВСлужбуТехническойПоддержки() Тогда
		
		МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиБПОКлиент");
		Если Не РезультатОперации.Результат Тогда
			
			ПараметрыВыполнениеКоманды.Вставить("РезультатВыполненияОперации", РезультатОперации);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполнениеКоманды_ПроверкаРезультата", ЭтотОбъект, ПараметрыВыполнениеКоманды);
			
			ДополнительныеДанные = Новый Структура();
			ДополнительныеДанные.Вставить("Операция",          ПараметрыВыполнениеКоманды.Команда);
			ДополнительныеДанные.Вставить("ОписаниеОшибки",    РезультатОперации.ОписаниеОшибки);
			ДополнительныеДанные.Вставить("ПараметрыОперации", ПараметрыВыполнениеКоманды.ПараметрыОперации);
			
			ТекстВопроса = СтрШаблон(НСтр("ru = '%1
				|
				|Подготовить сообщение об ошибке разработчику?'"), РезультатОперации.ОписаниеОшибки);
			
			Параметры = МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ПараметрыОтправкиСообщенияОбОшибке();
			Параметры.Вставить("ИдентификаторОборудования", ПараметрыВыполнениеКоманды.ИдентификаторУстройства);
			Параметры.Вставить("ТекстОшибки",               РезультатОперации.ОписаниеОшибки);
			Параметры.Вставить("ДополнительныеДанные",      ДополнительныеДанные);
			Параметры.Вставить("ТекстВопроса",              ТекстВопроса);
			
			МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ПоказатьВопросОправкиСообщенияОбОшибке(ОписаниеОповещения, Параметры);
				
			Возврат; // Вызов оповещения будет выполнен в процедуре ЗавершениеВыполнениеКоманды_ПроверкаРезультата
			
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, РезультатОперации); 
	
КонецПроцедуры

// Завершает проверку результата операции
// 
// Параметры:
//  Результат - Структура
//  ПараметрыВыполнениеКоманды - см. ПараметрыПроверкиРезультатаОперации     
//
Процедура ЗавершениеВыполнениеКоманды_ПроверкаРезультата(Результат, ПараметрыВыполнениеКоманды) Экспорт
	
	Если ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, ПараметрыВыполнениеКоманды.РезультатВыполненияОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УпрощениеНастройкиПараметров

// Возвращает словарь реквизитов и возможных вариантов имен параметров производителя драйверов
//
// Возвращаемое значение:
//  см. МенеджерОборудованияКлиентПовтИсп.СловарьКлючевыхСвойств
Функция СловарьКлючевыхСвойств() 
	
	Возврат МенеджерОборудованияКлиентПовтИсп.СловарьКлючевыхСвойств();
	
КонецФункции

// Возвращает имя параметра по имени параметра указанного в файле XML
//
// Параметры:
//  ИмяПараметраXML - Строка - имя параметра оборудования заданное в файле XML
//  Преобразование - Булево
//
// Возвращаемое значение:
//  Строка, Неопределено - если имя параметра найдено в словаре, возвращает имя стандартного параметра
Функция ИмяКлючевогоПараметра(ИмяПараметраXML, Преобразование = Неопределено)
	
	Словарь = СловарьКлючевыхСвойств();
	
	Для Каждого КлючЗначение Из Словарь Цикл
		Если КлючЗначение.Значение.Свойство(ИмяПараметраXML, Преобразование) Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру атрибуты параметра
//
// Возвращаемое значение:
//  Структура:
//   * Стандартный - Булево - реквизит предусмотрен стандартами БПО
//   * ИмяПараметраXML - Строка - имя параметра как оно задано у производителя оборудования
//   * ИмяПараметра - Строка - имя стандартного параметра
//   * ИмяРеквизита - Строка - имя реквизита, под которым хранится значение данного параметра в справочнике
//   * ТолькоЧтение - Булево - параметр только для чтения
//   * Тип - Тип - Тип значения параметра (Число, Строка, Булево)
//   * Заголовок - Строка - заголовок параметра
//   * ЗначениеПоУмолчанию - Число, Строка, Булево - значение параметра по умолчанию
//   * Описание - Строка - описание параметра
//   * СтрокаФорматирования - Строка - строка форматирования параметра
//   * СписокВыбора - СписокЗначений из Строка - возможные варианты значения параметра
// 
Функция НовыйАтрибутыПараметра()
	
	Результат = Новый Структура();
	Результат.Вставить("Стандартный",          Ложь);
	Результат.Вставить("ЗначениеСтандартного", "");
	Результат.Вставить("ИмяПараметраXML",      "");
	Результат.Вставить("ИмяПараметра",         "");
	Результат.Вставить("ИмяРеквизита",         "");
	Результат.Вставить("ТолькоЧтение",         Ложь);
	Результат.Вставить("Тип",                  Тип("Число"));
	Результат.Вставить("Заголовок",            "");
	Результат.Вставить("ЗначениеПоУмолчанию",  "");
	Результат.Вставить("Описание",             "");
	Результат.Вставить("СтрокаФорматирования", "");
	Результат.Вставить("СписокВыбора",         Новый СписокЗначений());
	Результат.Вставить("Преобразование",       "");
	
	Возврат Результат;
КонецФункции

// Возвращает структуру атрибуты параметра
//
// Параметры:
//  ЧтениеXML - ЧтениеXML - открытый для чтения объект XML
//
// Возвращаемое значение:
//  Структура - см. НовыйАтрибутыПараметра
Функция ПрочитатьАтрибутыПараметра(ЧтениеXML)
	
	ИмяПараметраXML =  ЧтениеXML.ЗначениеАтрибута("Name");
	Преобразование  = Неопределено;
	ИмяПараметра    = ИмяКлючевогоПараметра(ИмяПараметраXML, Преобразование);
	Если ИмяПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеАтрибута = ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly"));
	ТолькоЧтение     = (ЗначениеАтрибута = "TRUE" Или ЗначениеАтрибута = "ИСТИНА");
	
	ЗначениеАтрибута = ВРег(ЧтениеXML.ЗначениеАтрибута("TypeValue"));
	ПараметрТип      = ?(НЕ ПустаяСтрока(ЗначениеАтрибута), ЗначениеАтрибута, "STRING");
	
	Результат = НовыйАтрибутыПараметра();
	Результат.ИмяПараметраXML = ИмяПараметраXML;
	Результат.ИмяПараметра    = ИмяПараметра;
	Результат.Тип             = Тип(ПараметрТип);
	Результат.ТолькоЧтение    = ТолькоЧтение;
	Результат.ИмяРеквизита    = ?(ТолькоЧтение, "R_", "P_") + ИмяПараметраXML;
	Результат.Заголовок       = ЧтениеXML.ЗначениеАтрибута("Caption");
	Результат.Описание        = ЧтениеXML.ЗначениеАтрибута("Description");
	Результат.Преобразование  = Преобразование;
	Результат.ЗначениеПоУмолчанию  = ЧтениеXML.ЗначениеАтрибута("DefaultValue");
	Результат.СтрокаФорматирования = ЧтениеXML.ЗначениеАтрибута("FieldFormat");
	
	Возврат Результат;
КонецФункции

// Заполняет список выбора в атрибутах параметра из XML
//
// Параметры:
//  АтрибутыПараметра - Структура - в которую нужно занести список выбора
//  ЧтениеXML - ЧтениеXML - открытый для чтения объект XML
Процедура ПрочитатьСписокВыбора(АтрибутыПараметра, ЧтениеXML)
	
	#Если Не ВебКлиент Тогда
	СписокВыбора = Новый СписокЗначений();
	АтрибутыПараметра.Вставить("СписокВыбора", СписокВыбора);
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.Имя = "ChoiceList" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда  
			Прервать;
		ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Значение = ЧтениеXML.ЗначениеАтрибута("Value");
		ИначеЕсли ЧтениеXML.Имя = "#text" И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда  
			Представление = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда  
			СписокВыбора.Добавить(Значение, Представление);
		КонецЕсли;
	КонецЦикла;
	#КонецЕсли

КонецПроцедуры

// Заполнить структуру стандартных параметров по описанию интерфейса
//
// Параметры:
//  ОписаниеИнтерфейса - Строка - строка XML в которой находится описание интерфейса
//  КлючевыеПараметры - Структура - структура содержащая найденные ключевые параметры и их атрибуты
Процедура ПрочитатьАтрибутыКлючевыхПараметров(ОписаниеИнтерфейса, КлючевыеПараметры)
	
	#Если Не ВебКлиент Тогда
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ОписаниеИнтерфейса);
	ЧтениеXML.ПерейтиКСодержимому();
	
	АтрибутыПараметра = Неопределено;
	Если ЧтениеXML.Имя = "Settings" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = "ChoiceList" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				Если АтрибутыПараметра <> Неопределено Тогда
					ПрочитатьСписокВыбора(АтрибутыПараметра, ЧтениеXML);
				КонецЕсли;
			ИначеЕсли ЧтениеXML.Имя = "Parameter" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				АтрибутыПараметра = ПрочитатьАтрибутыПараметра(ЧтениеXML);
				Если АтрибутыПараметра <> Неопределено Тогда
					КлючевыеПараметры.Вставить(АтрибутыПараметра.ИмяПараметра, АтрибутыПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Процедура ДобавитьПараметрЛогДрайвераВключен(КлючевыеПараметры, Значение)
	
	АтрибутыПараметра = НовыйАтрибутыПараметра();
	АтрибутыПараметра.Стандартный     = Истина;
	АтрибутыПараметра.ИмяПараметраXML = "";
	АтрибутыПараметра.ИмяПараметра    = "LogEnabled";
	АтрибутыПараметра.Тип             = Тип("Булево");
	АтрибутыПараметра.ТолькоЧтение    = Истина;
	АтрибутыПараметра.ИмяРеквизита    = "";
	АтрибутыПараметра.Заголовок       = НСтр("ru = 'Включен лог'");
	АтрибутыПараметра.Описание        = "";
	АтрибутыПараметра.Преобразование  = "";
	АтрибутыПараметра.ЗначениеСтандартного = Значение;
	АтрибутыПараметра.ЗначениеПоУмолчанию  = Ложь;
	АтрибутыПараметра.СтрокаФорматирования = "";
	
	КлючевыеПараметры.Вставить(АтрибутыПараметра.ИмяПараметра, АтрибутыПараметра);

КонецПроцедуры

Процедура ДобавитьПараметрЛогДрайвераПутьКФайлу(КлючевыеПараметры, Значение)
	
	АтрибутыПараметра = НовыйАтрибутыПараметра();
	АтрибутыПараметра.Стандартный     = Истина;
	АтрибутыПараметра.ИмяПараметраXML = "";
	АтрибутыПараметра.ИмяПараметра    = "LogPath";
	АтрибутыПараметра.Тип             = Тип("Строка");
	АтрибутыПараметра.ТолькоЧтение    = Истина;
	АтрибутыПараметра.ИмяРеквизита    = "";
	АтрибутыПараметра.Заголовок       = НСтр("ru = 'Путь к log-файлу'");
	АтрибутыПараметра.Описание        = "";
	АтрибутыПараметра.Преобразование  = "";
	АтрибутыПараметра.ЗначениеСтандартного = Значение;
	АтрибутыПараметра.ЗначениеПоУмолчанию  = "";
	АтрибутыПараметра.СтрокаФорматирования = "";
	
	КлючевыеПараметры.Вставить(АтрибутыПараметра.ИмяПараметра, АтрибутыПараметра);

КонецПроцедуры

#КонецОбласти

Функция ПодключаемоеОборудованиеНаФорме(Форма)

	ЗначенияСвойств = Новый Структура("ПодключаемоеОборудованиеБПО", Null);
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Форма);

	Результат = ЗначенияСвойств.ПодключаемоеОборудованиеБПО;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЭтоСписокОборудования(Список)
	Возврат ТипЗнч(Список) = Тип("Массив") И Список.Количество() > 0 И ТипЗнч(Список[0]) = Тип("Структура");
КонецФункции

// Проверка существуют ли реквизиты на форме
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИменаРеквизитов - Строка - Имена реквизитов формы через запятую 
//
Функция СуществуютРеквизитыНаФорме(Форма, ИменаРеквизитов)
	
	МассивРеквизитов = СтрРазделить(ИменаРеквизитов,",", Ложь);
	
	ЗначенияСвойств = Новый Структура(ИменаРеквизитов);
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		ЗначенияСвойств.Вставить(ИмяРеквизита, Null);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Форма);
	
	Для Каждого КлючЗначение Из ЗначенияСвойств Цикл
		Если КлючЗначение.Значение = Null Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;     
	
	Возврат Истина;
	
КонецФункции

Функция ТекущийКлиентПоддерживаетсяКомпонентой(Реквизиты)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Браузер = Неопределено;
#Если ВебКлиент Тогда
	Строка = СистемнаяИнформация.ИнформацияПрограммыПросмотра;
	
	Если СтрНайти(Строка, "Chrome/") > 0 Тогда
		Браузер = "Chrome";
	ИначеЕсли СтрНайти(Строка, "MSIE") > 0 Тогда
		Браузер = "MSIE";
	ИначеЕсли СтрНайти(Строка, "Safari/") > 0 Тогда
		Браузер = "Safari";
	ИначеЕсли СтрНайти(Строка, "Firefox/") > 0 Тогда
		Браузер = "Firefox";
	КонецЕсли;
#КонецЕсли
	
	Если Реквизиты.Свойство("ЦелевыеПлатформы") Тогда
		ЦелевыеПлатформы = Реквизиты.ЦелевыеПлатформы;
	Иначе
		ЦелевыеПлатформы = Реквизиты;
	КонецЕсли;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат ЦелевыеПлатформы.Linux_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат ЦелевыеПлатформы.Linux_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат ЦелевыеПлатформы.Linux_x86_Chrome;
		КонецЕсли;
			
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат ЦелевыеПлатформы.Linux_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат ЦелевыеПлатформы.Linux_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат ЦелевыеПлатформы.Linux_x86_64_Chrome;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат ЦелевыеПлатформы.MacOS_x86_64;
		КонецЕсли;
		
		Если Браузер = "Safari" Тогда
			Возврат ЦелевыеПлатформы.MacOS_x86_64_Safari;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат ЦелевыеПлатформы.MacOS_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат ЦелевыеПлатформы.MacOS_x86_64_Chrome;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат ЦелевыеПлатформы.Windows_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_MSIE;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат ЦелевыеПлатформы.Windows_x86_64_MSIE;
		КонецЕсли;
	
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
		// В браузере может быть неправильно определен тип платформы.
	
		Если Браузер = "Firefox" Тогда
			Возврат ЦелевыеПлатформы.MacOS_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат ЦелевыеПлатформы.MacOS_x86_64_Chrome;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СтруктураТипОборудованияВСтроку(ТипыПО)
	
	МассивТипов = Новый Массив();
	Для Каждого КлючИЗначение Из ТипыПО Цикл
		Если КлючИЗначение.Значение Тогда
			МассивТипов.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат СтрСоединить(МассивТипов, ",");
	
КонецФункции

#КонецОбласти