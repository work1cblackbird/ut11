#Область ПрограммныйИнтерфейс


// Создает документы "Уведомление об остатках прослеживаемых товаров"
// и "Уведомление о ввозе прослеживаемых товаров" в фоне.
// 
// Параметры:
//  ПараметрыCоздания - Структура:
//						ДанныеКОформлению - Массив - массив данных, по которым нужно сформировать уведомления
//  АдресРезультата - строка - адрес, куда будет помещен результат 
//
Процедура СоздатьУведомленияВФоне(ПараметрыСоздания, АдресРезультата) Экспорт     
	
	ДанныеУведомлений = ПараметрыСоздания.ДанныеКОформлению;   
	
	СозданныеДокументы =  Новый Массив; 
	
	Основания        = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ДанныеУведомлений,"Основание"), "Контрагент, Склад");  
	ЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ДанныеУведомлений,"КодТНВЭД", Истина), "ЕдиницаИзмерения");   
	ТипыУведомлений  = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(ДанныеУведомлений,"ТипУведомления", Истина), "Имя"); 
	
	Для каждого ТекущиеДанные из ДанныеУведомлений Цикл
				
		ИмяТипаУведомления = ТипыУведомлений.Получить(ТекущиеДанные.ТипУведомления);
		
		Если ИмяТипаУведомления = "УведомлениеОВвозеПрослеживаемыхТоваров" Тогда
			
			ТаблицаДанныхДляУведомлений = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ДанныеТЧТоварыПоОснованию(ТекущиеДанные.Основание, ТекущиеДанные.КодТНВЭД);
			ТаблицаЕдиницИзмерения = ТаблицаДанныхДляУведомлений.Скопировать();
			ТаблицаЕдиницИзмерения.Свернуть("ЕдиницаИзмерения");
			
			Для Каждого СтрокаТаблицы Из ТаблицаЕдиницИзмерения Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("ЕдиницаИзмерения", СтрокаТаблицы.ЕдиницаИзмерения);
				СтрокиТаблицыДанных = ТаблицаДанныхДляУведомлений.НайтиСтроки(Отбор);
				
				ДокументОбъект = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.СоздатьДокумент();
				ДокументОбъект.КодТНВЭД = ТекущиеДанные.КодТНВЭД;
				ДокументОбъект.Организация = ТекущиеДанные.Организация;
				ДокументОбъект.ПервичныйДокумент = ТекущиеДанные.Основание;
				ДокументОбъект.Дата = ТекущаяДатаСеанса();
				ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
				ДокументОбъект.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
				ДокументОбъект.ЕдиницаПрослеживаемости = ЕдиницыИзмерения.Получить(ТекущиеДанные.КодТНВЭД);
				ЗаполнитьЗначенияСвойств(ДокументОбъект, Основания.Получить(ТекущиеДанные.Основание));
				Для Каждого Элемент Из СтрокиТаблицыДанных Цикл
					СтрокаТЧ = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элемент);
				КонецЦикла;
				// Запись документа
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
				Исключение
					ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ДокументОбъект);
				КонецПопытки
			КонецЦикла;
		ИначеЕсли ИмяТипаУведомления = "УведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда 
			
			ДокументОбъект = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.СоздатьДокумент();
			ДокументОбъект.Организация = ТекущиеДанные.Организация;
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ДокументОбъект.Заполнить(ТекущиеДанные.Основание);
			// Запись документа
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			Исключение
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ДокументОбъект);
			КонецПопытки
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументы, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения".
//
//
// Параметры:
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект.
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта.
//  <МетаданныеОбъекта>  - <Метаданные>.
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	Если  Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;

	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ (НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаполняемыйЭлемент Из СтруктураЗаполнения Цикл
		ЗначениеЗаполнения = ДанныеЗаполнения[ЗаполняемыйЭлемент.Ключ];
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Массив")
			ИЛИ ТипЗнч(ЗначениеЗаполнения) = Тип("ФиксированныйМассив") Тогда
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения[0];
		Иначе
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти
