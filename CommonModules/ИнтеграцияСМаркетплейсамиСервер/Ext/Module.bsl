///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя события журнала регистрации при работе с торговой площадкой.
//
// Параметры:
//   Источник - Неопределено - для получения общего имени события;
//            - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки;
//            - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки.
//
// Возвращаемое значение:
//   Строка - Наименование события для записей в журнале регистрации.
//
Функция СобытиеЖурналаРегистрации(Знач Источник = Неопределено) Экспорт

	Если Источник = Неопределено Тогда
		ИмяСобытия = НСтр("ru = 'Интеграция с маркетплейсами'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.УчетныеЗаписиМаркетплейсов") Тогда
			Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ВидМаркетплейса");
		КонецЕсли;
		
		Если Источник = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
			ИмяСобытия = ИнтеграцияСЯндексМаркетСервер.СобытиеЖурналаРегистрации();
		ИначеЕсли Источник = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
			ИмяСобытия = ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяСобытия;

КонецФункции

// Возвращает признак использования интеграции хотя бы с одним маркетплейсом.
//
// Возвращаемое значение:
//   Булево - признак использования интеграции.
//
Функция ИспользуетсяИнтеграцияСМаркетплейсами() Экспорт

	ИспользуютсяИнтеграцияСOzon = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ЕстьУчетныеЗаписиOzon = Ложь;
	Если ИспользуютсяИнтеграцияСOzon Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		ЕстьУчетныеЗаписиOzon = Не Результат.Пустой();
	КонецЕсли;

	ИспользуютсяИнтеграцияСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");
	ЕстьУчетныеЗаписиЯндексМаркет = Ложь;
	Если ИспользуютсяИнтеграцияСЯндексМаркет Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		ЕстьУчетныеЗаписиЯндексМаркет = Не Результат.Пустой();
	КонецЕсли;

	ИспользуютсяИнтеграцииСМаркетплейсами = ИспользуютсяИнтеграцияСOzon И ЕстьУчетныеЗаписиOzon
			Или ИспользуютсяИнтеграцияСЯндексМаркет И ЕстьУчетныеЗаписиЯндексМаркет;

	Возврат ИспользуютсяИнтеграцииСМаркетплейсами;

КонецФункции

// Создает элементы подсистемы "Интеграция с Ozon" в форме присоединенного файла.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыЭлементаПрисоединенныхФайлов(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Или ТипЗнч(Форма.Объект.Ссылка) <> Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;

	ЭлементПубликуетсяНаМП = Форма.Элементы.Вставить("ПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.ГруппаКоманды, Форма.Элементы.ФормаОткрытьФайлДляПросмотра);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ВидФлажка = ВидФлажка.Выключатель;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Объект.ПубликуетсяВСервисах";
	ЭлементПубликуетсяНаМП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;

КонецПроцедуры

// Создает элементы подсистемы "Интеграция с Ozon" в форме списка присоединенных файлов.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыСпискаПрисоединенныхФайлов(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Или ТипЗнч(Форма.ВладелецФайла) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;

	ПсевдонимПоля = "ПубликуетсяВСервисах";
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.Список.ТекстЗапроса);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];
	ТекстПоля = ОператорВыбрать.Источники[0].Источник.Псевдоним + "." + ПсевдонимПоля;

	ПолеПубликуетсяВСервисах = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
	ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяВСервисах);
	ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

	КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяВСервисах);
	КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;
	ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

	Форма.Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	ЭлементПубликуетсяНаМП = Форма.Элементы.Добавить(ПсевдонимПоля, Тип("ПолеФормы"), Форма.Элементы.Список);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Список.ПубликуетсяВСервисах";

КонецПроцедуры

// Создает элементы подсистемы "Интеграция с Ozon" в форме сертификата номенклатуры.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыЭлементаСертификатаНоменклатуры(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		Возврат;
	КонецЕсли;

	ЭлементПубликуетсяНаМП = Форма.Элементы.Вставить("ПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.ГруппаИзображение, Форма.Элементы.ГруппаКоманднаяПанельИГиперссылка);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ВидФлажка = ВидФлажка.Выключатель;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Объект.ПубликуетсяВСервисах";
	ЭлементПубликуетсяНаМП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;

КонецПроцедуры

// При создании формы списка контекст сертификатов номенклатуры.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыСпискаКонтекстСертификатовНоменклатуры(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.СертификатыНоменклатуры.ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("СертификатыНоменклатуры.ПубликуетсяВСервисах");
	Форма.СертификатыНоменклатуры.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	НовыйЭлемент = Форма.Элементы.Добавить("СертификатыНоменклатурыПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.СертификатыНоменклатуры);
	НовыйЭлемент.ПутьКДанным = "СертификатыНоменклатуры.ПубликуетсяВСервисах";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;

КонецПроцедуры

// Описывает структуру ошибки.
//
// Возвращаемое значение:
//   Структура - описание ошибки:
//     * КодОшибки      - Строка - код ошибки;
//     * ОписаниеОшибки - Строка - текстовое описание ошибки;
//     * Детализация    - Массив Из Строка - детализированная информация по ошибке;
//                      - Неопределено - детализация не используется (по умолчанию).
//
Функция НоваяОшибка() Экспорт

	Ошибка = Новый Структура;
	Ошибка.Вставить("КодОшибки",      "");
	Ошибка.Вставить("ОписаниеОшибки", "");
	Ошибка.Вставить("Детализация",    Неопределено);

	Возврат Ошибка;

КонецФункции

#Область РаботаСВнешнимиРесурсами

// Возвращает общие параметры подключения к REST API Яндекс.OAuth.
// 
// Возвращаемое значение:
//   Структура Из КлючИЗначение - дополненная структура функции ПараметрыСоединения().
//
Функция ПараметрыРаботыССервисомАвторизации() Экспорт

	ПараметрыРаботы = ПараметрыСоединения();
	ПараметрыРаботы.Сервер = "oauth.yandex.ru";
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2'"));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'"));
	ПараметрыРаботы.Вставить("ТипОбъектОшибка", ФабрикаXDTO.Тип("oauth.yandex.ru", "error"));

	Возврат ПараметрыРаботы;

КонецФункции

// Возвращает общие параметры подключения к REST API Яндекс.Диск.
// 
// Возвращаемое значение:
//   Структура Из КлючИЗначение - дополненная структура функции ПараметрыСоединения().
//
Функция ПараметрыРаботыСЯндексДиском() Экспорт

	ПараметрыРаботы = ПараметрыСоединения();
	ПараметрыРаботы.Сервер = "cloud-api.yandex.net";
	ПараметрыРаботы.Порт = 443;
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2'"));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'"));
	ПараметрыРаботы.Вставить("ТипОбъектОшибка", ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "error"));

	Возврат ПараметрыРаботы;

КонецФункции

// Возвращает общие параметры приложения для использования в механизмах сервиса.
// 
// Возвращаемое значение:
//   Структура - дополненная структура функции ПараметрыПриложения().
//
Функция ПараметрыПриложенияЯндексДиск() Экспорт

	ПараметрыПриложенияЯндексДиск = ПараметрыПриложения();
	ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения = "ЯндексДиск";
	ПараметрыПриложенияЯндексДиск.client_id = "17d0ffccaae840dba48edd4e246f6f27";
	ПараметрыПриложенияЯндексДиск.client_secret = "80ebf05fe140474d9b7adbdf6ade7e4e";

	Возврат ПараметрыПриложенияЯндексДиск;

КонецФункции

// Формирует HTTPЗапрос по переданным данным.
// 
// Параметры:
//   Адрес                   - Строка - путь к ресурсу на сервере.
//   ТелоЗапроса             - Строка, ДвоичныеДанные - источник для установки тела запроса.
//                               Применимо для методов HTTP: OPTIONS, PATCH, POST и PUT.
//   ДополнительныеЗаголовки - Соответствие Из КлючИЗначение - заголовки запроса. Могут перезаписывать обязательные 
//                               заголовки функции. Названия заголовков регистронезависимые.
// 
// Возвращаемое значение:
//   HTTPЗапрос - подготовленный для отправки запрос HTTP.
//
Функция ЗапросHTTP(Адрес, ТелоЗапроса = "", ДополнительныеЗаголовки = Неопределено) Экспорт

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("charset", "UTF-8");
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("content-type", "application/json");

	Если ДополнительныеЗаголовки <> Неопределено Тогда
		Для Каждого Заголовок Из ДополнительныеЗаголовки Цикл
			Заголовки.Вставить(НРег(Заголовок.Ключ), Заголовок.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);

	Если Не ПустаяСтрока(ТелоЗапроса) Тогда
		Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Запрос;

КонецФункции

// Записывает список ключей и значений по адресу в защищенное хранилище.
// 
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
//   ПараметрыПриложения       - Структура - используется для формирования адреса в хранилище, см. ПараметрыПриложения.
//   ДанныеПриложения          - Структура, Соответствие Из Произвольный - источник пар ключ/значение для записи в 
//                                 защищенное хранилище.
//
Процедура ЗаписатьДанныеПриложенияВХранилище(УчетнаяЗаписьМаркетплейса, ПараметрыПриложения, ДанныеПриложения) Экспорт

	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложения.ИдентификаторПриложения;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ЭлементДанных Из ДанныеПриложения Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресВХранилище, ЭлементДанных.Значение, ЭлементДанных.Ключ);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Получает данные приложения из хранилища.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
//   ПараметрыПриложения       - Структура - используется для формирования адреса в хранилище, см. ПараметрыПриложения.
//   Ключи                     - Строка - имена ключей, разделенные запятыми.
// 
// Возвращаемое значение:
//   Произвольный, Структура, Неопределено - данные из безопасного хранилища. Если указан один ключ, то возвращается его 
//     значение, иначе структура. Если данные отсутствуют - Неопределенно.
//
Функция ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗаписьМаркетплейса, ПараметрыПриложения, Ключи) Экспорт

	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложения.ИдентификаторПриложения;
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, Ключи);

КонецФункции

#Область РаботаСЯндексАвторизацией

// Формирует адрес для интерактивного запроса кода подтверждения.
// 
// Параметры:
//   КодПриложения - Строка - код приложения Яндекс, для которого запрашивается доступ.
// 
// Возвращаемое значение:
//   Строка - адрес для перехода на страницу запроса кода подтверждения.
//
Функция АдресЗапросаКодаПодтверждения(КодПриложения) Экспорт

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "authorizeRequest");
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.client_id = КодПриложения;

	ПараметрыСоединения = ПараметрыРаботыССервисомАвторизации();

	Метод = "authorize";

	СтрокаСоединения = ПротоколПоУмолчанию(ПараметрыСоединения.Порт) + ПараметрыСоединения.Сервер + "/" + Метод + ПараметрыЗапроса(ОбъектXDTO, ТипОбъекта);

	Возврат СтрокаСоединения;

КонецФункции

// Запрашивает токены авторизации приложения по коду подтверждения от пользователя.
// 
// Параметры:
//   Приложение       - Структура - описание приложения Яндекс. 
//                        Содержит ключи: client_id, client_secret.
//   КодПодтверждения - Строка - код подтверждения, указанный пользователем.
// 
// Возвращаемое значение:
//   Структура - результат обмена кода подтверждения на ключи доступа для приложения.
//               Содержит ключи: Отказ, token_type, access_token, expires_in, refresh_token.
//
Функция ЗапроситьТокеныАвторизацииПоКоду(Приложение, КодПодтверждения) Экспорт

	ПараметрыРаботы = ПараметрыРаботыССервисомАвторизации();

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.code = КодПодтверждения;
	ЗапросОбъект.client_id = Приложение.client_id;
	ЗапросОбъект.client_secret = Приложение.client_secret;

	ТелоЗапроса = ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта, Ложь);
	Метод = "token";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос);

	ПараметрыОтвета = Новый Структура("Отказ, token_type, access_token, expires_in, refresh_token", Истина);

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПараметрыОтвета;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыОтвета, РезультатПриведения.Объект);
			ПараметрыОтвета.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.error_description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При авторизации с данным кодом подтверждения возникла ошибка.
			|Подробности см. в журнале регистрации.'"));
	КонецЕсли;

	Возврат ПараметрыОтвета;

КонецФункции

// Запрашивает токены авторизации приложения по токену обновления.
// 
// Параметры:
//   Приложение      - Структура - описание приложения Яндекс. 
//                       Содержит ключи: client_id, client_secret.
//   ТокенОбновления - Строка - токен обновления, полученный при предыдущем запросе.
// 
// Возвращаемое значение:
//   Структура - результат обновления токенов доступа для приложения.
//               Содержит ключи: Отказ, token_type, access_token, expires_in, refresh_token.
//
Функция ОбновитьТокеныАвторизации(Приложение, ТокенОбновления) Экспорт

	ПараметрыРаботы = ПараметрыРаботыССервисомАвторизации();

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "refreshRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.refresh_token = ТокенОбновления;
	ЗапросОбъект.client_id = Приложение.client_id;
	ЗапросОбъект.client_secret = Приложение.client_secret;

	ТелоЗапроса = ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта, Ложь);
	Метод = "token";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос);

	ПараметрыОтвета = Новый Структура("Отказ, token_type, access_token, expires_in, refresh_token", Истина);

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПараметрыОтвета;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыОтвета, РезультатПриведения.Объект);
			ПараметрыОтвета.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.error_description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При авторизации с данным кодом подтверждения возникла ошибка.
			|Подробности см. в журнале регистрации.'"));
	КонецЕсли;

	Возврат ПараметрыОтвета;

КонецФункции

#КонецОбласти

#Область РаботаСЯндексДиском

// Получает из хранилища токен доступа, выданный приложению для работы с сервисом Яндекс.Диск.
// 
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
// 
// Возвращаемое значение:
//   Строка - токен доступа приложения.
//
Функция ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса) Экспорт

	ПараметрыПриложения = ПараметрыПриложенияЯндексДиск();
	ТокенДоступа = ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗаписьМаркетплейса, ПараметрыПриложения, "access_token");

	Возврат ТокенДоступа;

КонецФункции

// Получает метаинформацию о файле или каталоге с помощью запроса GET к методу v1/disk/resources.
// 
// Параметры:
//   ТокенДоступа       - Строка - access_token приложения.
//   ПрисоединенныйФайл - СправочникСсылка.НоменклатураПрисоединенныеФайлы - файл, по которому запрашивается информация 
//                          от сервиса.
//   СписокПолей        - Строка - имена реквизитов, разделенные запятой. Подробности см. в описании метода API.
// 
// Возвращаемое значение:
//   Структура - содержит свойство "Отказ" (булево) и значения запрошенных полей.
//
Функция ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, СписокПолей = "name") Экспорт

	СписокКлючей = "Отказ, КодСостояния" + ?(ПустаяСтрока(СписокПолей), "", ", ") + СписокПолей;

	ИнформацияОРесурсе = Новый Структура(СписокКлючей, Истина);
	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	ПутьКФайлуНаЯДиске = ПутьКРесурсу(ПрисоединенныйФайл);

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "metainfoRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;
	ЗапросОбъект.fields = СписокПолей;

	Метод = "v1/disk/resources";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	ИнформацияОРесурсе.КодСостояния = РезультатОтправки.КодСостояния;

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ИнформацияОРесурсе;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "metainfoResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
			ЗаполнитьЗначенияСвойств(ИнформацияОРесурсе, ОтветОбъект);
			ИнформацияОРесурсе.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	Возврат ИнформацияОРесурсе;

КонецФункции

// Загружает файл на сервис Яндекс.Диск в папку приложения и публикует его.
// 
// Параметры:
//   ТокенДоступа          - Строка - access_token приложения.
//   ПрисоединенныйФайл    - СправочникСсылка.НоменклатураПрисоединенныеФайлы - файл, который загружается на сервис.
//   ОбновитьФайлНаСервисе - Булево - признак обновления.
// 
// Возвращаемое значение:
//   Структура из КлючИЗначение - содержит путь к файлу на сервисе, публичную ссылку и признак отказа в выполнении операции.
//
Функция ЗагрузитьФайлНаСервис(ТокенДоступа, ПрисоединенныйФайл, ОбновитьФайлНаСервисе = Истина) Экспорт

	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	РезультатПубликации = Новый Структура("ПутьКФайлуНаЯДиске, ПубличнаяСсылка, Отказ", "", "", Истина);
	ПутьКФайлуНаЯДиске = ПутьКРесурсу(ПрисоединенныйФайл);
	РезультатПубликации.ПутьКФайлуНаЯДиске = ПутьКФайлуНаЯДиске;

	ИнформацияОРесурсе = ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл);
	Если ИнформацияОРесурсе.КодСостояния = 200 И Не ОбновитьФайлНаСервисе Тогда
		РезультатПубликации.ПубличнаяСсылка = ИнформацияОРесурсе.public_url;
		РезультатПубликации.Отказ = Ложь;
		Возврат РезультатПубликации;
	КонецЕсли;

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "uploadGetRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;

	Метод = "v1/disk/resources/upload";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "uploadGetResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат РезультатПубликации;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОтветОбъект.href);

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "image/jpeg");

	ПараметрыСоединения = ПараметрыСоединения();
	ПараметрыСоединения.Сервер = СтруктураURI.Хост;
	ПараметрыСоединения.Порт = СтруктураURI.Порт;
	ТелоЗапроса = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл, Ложь);
	Если ТелоЗапроса = Неопределено Тогда
		Возврат РезультатПубликации;
	КонецЕсли;

	Метод = СтруктураURI.ПутьНаСервере;

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыСоединения, Запрос, "PUT");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		ШаблонОшибки = НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;
	ЗапросОбъект.fields = "public_key";

	Метод = "v1/disk/resources/publish";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "PUT");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат РезультатПубликации;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	ИнформацияОРесурсе = ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, "public_url");

	Если Не ИнформацияОРесурсе.Отказ Тогда
		РезультатПубликации.ПубличнаяСсылка = ИнформацияОРесурсе.public_url;
		РезультатПубликации.Отказ = Ложь;
	КонецЕсли;
	Возврат РезультатПубликации;

КонецФункции

// Удаляет ресурс с сервиса Яндекс.Диск из папки приложения.
// 
// Параметры:
//   ТокенДоступа       - Строка - access_token приложения.
//   ПутьКФайлуНаЯДиске - Строка - путь к файлу на сервисе, возвращается функцией ЗагрузитьФайлНаСервис().
// 
// Возвращаемое значение:
//   Булево - признак успешного завершения операции удаления файла.
//
Функция УдалитьФайлССервиса(ТокенДоступа, ПутьКФайлуНаЯДиске) Экспорт

	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "deleteRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;

	Метод = "v1/disk/resources";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "DELETE");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Проверяет, что переданная ссылка является публичной для сервиса Яндекс.Диск.
// 
// Параметры:
//   URL - Строка - url ссылки в формате: [Протокол://]<Сервер>/<Ключ>.
// 
// Возвращаемое значение:
//   Булево - является ли ссылка публичной.
//
Функция ЭтоПубличнаяСсылкаЯндексДиска(URL) Экспорт
	
	Возврат (СтрНайти(НРег(URL), "yadi.") > 0);
	
КонецФункции

// Генерирует url для скачивания файла по публичной ссылке сервиса Яндекс.Диск.
// 
// Параметры:
//   ТокенДоступа    - Строка - access_token приложения.
//   ПубличнаяСсылка - Строка - url файла в формате: [Протокол://]<Сервер>/<Ключ>.
// 
// Возвращаемое значение:
//   Строка - содержит путь к файлу на сервисе.
//
Функция ПолучитьФайлПоПубличнойСсылкеИзСервиса(ТокенДоступа, ПубличнаяСсылка) Экспорт
	
	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	
	ТипОбъекта        = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "downloadGetPublic");
	ЗапросОбъект      = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.public_key = ПубличнаяСсылка;

	Метод = "v1/disk/public/resources/download";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept",        "application/json");
	Заголовки.Вставить("Content-Type",  "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПубличнаяСсылка;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат ПубличнаяСсылка;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПубличнаяСсылка;
	КонецЕсли;
	
	Возврат ОтветОбъект.href;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет загрузку информации о продажах товаров через торговую площадку. Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку);

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
		
	ИначеЕсли ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет") Тогда
		ИнтеграцияСЯндексМаркетСервер.ЗагрузитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Выполняет обновление информации о продажах товаров через торговую площадку. Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбновитьИнформациюОПродажахТоваровЧерезТорговыеПлощадки(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОПродажахТоваровЧерезСкладыOzon);

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Выполняет загрузку необработанных заказов (отправлений) с торговой площадки. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьНеобработанныеЗаказыСТорговойПлощадки(УчетнаяЗапись) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки);
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьНеобработанныеЗаказыРегламентнымЗаданием(УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет статусы заказов (отправлений) торговой площадки. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбновитьСтатусыЗаказовТорговойПлощадки(УчетнаяЗапись) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеСтатусовЗаказовТорговойПлощадки);
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьСтатусыЗаказовРегламентнымЗаданием(УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

// Получает этикетки для сформированных отправлений с торговой площадки. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ПолучитьЭтикеткиДляЗаказовТорговойПлощадки(УчетнаяЗапись) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеЭтикетокДляЗаказовТорговойПлощадки);
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьЭтикеткиОтправленийРегламентнымЗаданием(УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет следующие свойства регламентных заданий:
//  - зависимость от функциональных опций;
//  - возможность выполнения в различных режимах работы программы;
//  - прочие параметры.
//
// Параметры:
//   Настройки - см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.Настройки.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	// Яндекс Маркет
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ВыгрузкаОстатковТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ЗагрузкаРекомендованныхЦенЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	// Ozon
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ВыгрузкаОстатковНаМаркетплейсOzon;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ВыгрузкаЦенНаМаркетплейсOzon;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ЗагрузкаОстатковСМаркетплейсаOzon;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ЗагрузкаЦенСМаркетплейсаOzon;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОПродажахТоваровЧерезСкладыOzon;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	// Общие
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Оповещение                    = СерверныеОповещения.НовоеСерверноеОповещение("ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные");
	Оповещение.ИмяМодуляПолучения = "ИнтеграцияСМаркетплейсамиКлиент";
	Оповещение.ПериодПроверки     = 60;
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
	Оповещение                    = СерверныеОповещения.НовоеСерверноеОповещение("ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьДанные");
	Оповещение.ИмяМодуляПолучения = "ИнтеграцияСМаркетплейсамиКлиент";
	Оповещение.ПериодПроверки     = 60;
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//   ВнешнийАдрес - Строка - адрес URL картинки.
// 
// Возвращаемое значение:
//   См. ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище.
//
Функция ДанныеФайлаПоВнешнейСсылке(Знач ВнешнийАдрес) Экспорт
	
	Ответ = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ВнешнийАдрес, Неопределено, Истина);
	Возврат Ответ;
	
КонецФункции

// Проверяет является ли указанное значение файлом картинки.
// 
// Параметры:
//   ПроверяемоеЗначение - ДвоичныеДанные, Строка - данные картинки или адрес во временном хранилище.
// 
// Возвращаемое значение:
//   Булево - это файл картинки.
//
Функция ЭтоФайлКартинки(ПроверяемоеЗначение) Экспорт
	
	ЭтоФайлКартинки = Истина;
	ДвоичныеДанныеИзображения = ПроверяемоеЗначение;
	
	Если ЭтоАдресВременногоХранилища(ПроверяемоеЗначение) Тогда
		ДвоичныеДанныеИзображения = ПолучитьИзВременногоХранилища(ПроверяемоеЗначение);
	КонецЕсли;
	
	МеханизмКартинка = Новый Картинка(ДвоичныеДанныеИзображения);
	Если МеханизмКартинка.Формат() = Неопределено 
			Или МеханизмКартинка.Формат() = ФорматКартинки.НеизвестныйФормат Тогда
		ЭтоФайлКартинки = Ложь;
	КонецЕсли;
	
	Возврат ЭтоФайлКартинки;
	
КонецФункции

// Добавляет реквизит формы УчетнаяЗаписьМаркетплейса и заполняет его значением из параметров формы.
// Вызывается из форм обработок ПодборТоваровПоОтбору и ПодборТоваровВДокументПродажи.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - изменяемая форма.
//
Процедура ДобавитьЗаполнитьУчетнуюЗапись(Форма) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;

	РеквизитУчетнаяЗапись = Новый РеквизитФормы("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитУчетнаяЗапись);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Форма.Параметры.Свойство("УчетнаяЗаписьМаркетплейса", Форма.УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

// Заполняет параметр учетной записи в компоновщике настроек.
//
// Параметры:
//   СтруктураНастроек - Структура - настройки:
//     * КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки КД, в которых содержатся необходимые 
//                               параметры.
//   Компоновщик       - КомпоновщикНастроекКомпоновкиДанных - настройки КД, для которых требуется установить параметры.
//
Процедура ЗаполнитьУчетнуюЗапись(СтруктураНастроек, Компоновщик) Экспорт

	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		ПараметрУчетнаяЗапись = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(СтруктураНастроек.КомпоновщикНастроек.Настройки, "УчетнаяЗаписьМаркетплейса");
		Если ПараметрУчетнаяЗапись <> Неопределено 
				И ЗначениеЗаполнено(ПараметрУчетнаяЗапись.Значение) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				Компоновщик.Настройки, "УчетнаяЗаписьМаркетплейса",
				ПараметрУчетнаяЗапись.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Дополняет схему компоновки данных для маркетплейсов. 
// Выполняет инъекцию в текст запроса СКД для ценообразования. Вызывается из обработки ПодборТоваровПоОтбору.
// 
// Параметры:
//   СтруктураНастроек     - Структура - данные, структура настроек;
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - модифицируемая схема.
//
Процедура ДополнитьСКДДляМаркетплейсов(СтруктураНастроек, СхемаКомпоновкиДанных) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");
	ИспользуетсяЦенообразование25       = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураНастроек.УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");

	РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];

	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	СхемаЗапроса.УстановитьТекстЗапроса(РабочийНаборДанных.Запрос);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];
	
	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon";
		УсловиеСоединения =
			"(СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
			|И (СтатусыПубликации.Номенклатура = ИсходныеДанныеПоследнийЗапрос.Номенклатура)
			|И (СтатусыПубликации.Характеристика = ИсходныеДанныеПоследнийЗапрос.Характеристика)
			|И &УсловиеПоУпаковке
			|И (СтатусыПубликации.ОбъектПубликации = НЕОПРЕДЕЛЕНО)";
		
	ИначеЕсли ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет";
		УсловиеСоединения =
			"(СтатусыПубликации.УчетнаяЗапись= &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.Номенклатура = ИсходныеДанныеПоследнийЗапрос.Номенклатура)
			|И (СтатусыПубликации.Характеристика = ИсходныеДанныеПоследнийЗапрос.Характеристика)
			|И &УсловиеПоУпаковке";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусыПубликации = ЗапросПакета.ДоступныеТаблицы.Найти(ИмяТаблицы);
	Если ОператорВыбрать.Источники.НайтиПоИмени(ИмяТаблицы) <> Неопределено Тогда
		Возврат;	// Инъекция уже выполнена.
	КонецЕсли;
	
	ИсточникСтатусыПубликации = ОператорВыбрать.Источники.Добавить(ТаблицаСтатусыПубликации, "СтатусыПубликации");
	ИсточникСтатусыПубликации.Соединения.Очистить();

	Если ИспользуетсяЦенообразование25 Тогда
    	УсловиеСоединения = СтрЗаменить(УсловиеСоединения, "&УсловиеПоУпаковке", "(ВЫБОР
			|		КОГДА СтатусыПубликации.Упаковка = СтатусыПубликации.Номенклатура.ЕдиницаИзмерения
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ИНАЧЕ СтатусыПубликации.Упаковка
			|	КОНЕЦ = ИсходныеДанныеПоследнийЗапрос.Упаковка)");
	Иначе
		УсловиеСоединения = СтрЗаменить(УсловиеСоединения, "&УсловиеПоУпаковке", "ИСТИНА");
	КонецЕсли;

	Если ОператорВыбрать.Источники[0].Соединения.Добавить(ИсточникСтатусыПубликации, УсловиеСоединения) Тогда
		ПоследнееСоединение = ОператорВыбрать.Источники[0].Соединения[ОператорВыбрать.Источники[0].Соединения.Количество() - 1];
		ПоследнееСоединение.ОбязательноеСоединение = Ложь;
		ПоследнееСоединение.НачалоГруппыНеобязательныхСоединений = Истина;

		ТекстПоля = "НЕ СтатусыПубликации.Номенклатура ЕСТЬ NULL";
		ПсевдонимПоля = "ЯвляетсяТоваромМаркетплейса";
		ПолеПубликуетсяНаМП = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
		ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяНаМП);
		ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

		КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяНаМП);
		КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;
		ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

		РабочийНаборДанных.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();

		ПолеНабора             = РабочийНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле        = ПсевдонимПоля;
		ПолеНабора.ПутьКДанным = ПсевдонимПоля;

		ПараметрУчетнаяЗапись = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрУчетнаяЗапись.Имя = "УчетнаяЗаписьМаркетплейса";
		ПараметрУчетнаяЗапись.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов");
		ПараметрУчетнаяЗапись.ОграничениеИспользования = Истина;
		ПараметрУчетнаяЗапись.ВключатьВДоступныеПоля = Ложь;

		ПараметрыОтбора = Новый Структура("ВПользовательскиеНастройки", Истина);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ПсевдонимПоля, Истина, ВидСравненияКомпоновкиДанных.Равно, Ложь, ПараметрыОтбора);
	КонецЕсли;

КонецПроцедуры

// Дополняет текст запроса для маркетплейсов.
// Выполняет инъекцию в текст запроса для подбора товаров. Вызывается из обработки ПодборТоваровВДокументПродажи.
//
// Параметры:
//   ШаблонТекстЗапроса        - Строка - текст запроса для динамического списка.
//   ТипСписка                 - Строка - может принимать значения: "СписокНоменклатура", "СписокХарактеристики", 
//                                 "СписокНоменклатураПартнера".
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//
Процедура ДополнитьТекстЗапросаДляМаркетплейсов(ШаблонТекстЗапроса, ТипСписка, УчетнаяЗаписьМаркетплейса) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");

	Если ТипСписка <> "СписокНоменклатура" И ТипСписка <> "СписокХарактеристики" Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстЗапроса);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];

	КолонкаНоменклатура = ЗапросПакета.Колонки.Найти("Номенклатура");
	ЗначениеПоляНоменклатура = Строка(КолонкаНоменклатура.Поля[0]);
	КолонкаХарактеристика = ЗапросПакета.Колонки.Найти("Характеристика");
	Если КолонкаХарактеристика = Неопределено Тогда
		ЗначениеПоляХарактеристика = "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	Иначе
		ЗначениеПоляХарактеристика = Строка(КолонкаХарактеристика.Поля[0]);
	КонецЕсли;
	КолонкаУпаковка = ЗапросПакета.Колонки.Найти("Упаковка");
	ЗначениеПоляУпаковка = Строка(КолонкаУпаковка.Поля[0]);

	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon";
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
			|И (СтатусыПубликации.Номенклатура = %1)
			|И (СтатусыПубликации.Характеристика = %2)
			|И (СтатусыПубликации.Упаковка = %3)
			|И (СтатусыПубликации.ОбъектПубликации = НЕОПРЕДЕЛЕНО)",
			ЗначениеПоляНоменклатура, ЗначениеПоляХарактеристика, ЗначениеПоляУпаковка);
		
	ИначеЕсли ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет";
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(СтатусыПубликации.УчетнаяЗапись = &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.Номенклатура = %1)
			|И (СтатусыПубликации.Характеристика = %2)
			|И (ВЫБОР
			|		КОГДА СтатусыПубликации.Упаковка = СтатусыПубликации.Номенклатура.ЕдиницаИзмерения
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ИНАЧЕ СтатусыПубликации.Упаковка
			|	КОНЕЦ = %3)",
			ЗначениеПоляНоменклатура, ЗначениеПоляХарактеристика, ЗначениеПоляУпаковка);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусыПубликации = ЗапросПакета.ДоступныеТаблицы.Найти(ИмяТаблицы);
	Если ОператорВыбрать.Источники.НайтиПоИмени(ИмяТаблицы) <> Неопределено Тогда
		Возврат;	// Инъекция уже выполнена.
	КонецЕсли;
	ИсточникСтатусыПубликации = ОператорВыбрать.Источники.Добавить(ТаблицаСтатусыПубликации);
	ИсточникСтатусыПубликации.Источник.Псевдоним = "СтатусыПубликации";
	ИсточникСтатусыПубликации.Соединения.Очистить();

	ОператорВыбрать.Источники[0].Соединения.Добавить(ИсточникСтатусыПубликации, УсловиеСоединения);

	ТекстПоля = "НЕ СтатусыПубликации.Номенклатура ЕСТЬ NULL";
	ПсевдонимПоля = "ПубликуетсяНаМаркетплейсе";
	ПолеПубликуетсяНаМП = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
	ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяНаМП);
	ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

	КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяНаМП);
	КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;

	ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

	ШаблонТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

КонецПроцедуры

// Устанавливает условное оформление динамических списков.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма клиентского приложения, для которой устанавливается условное оформление.
//
Процедура УстановитьУсловноеОформлениеДинамическихСписков(Форма) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;

	Форма.СписокНоменклатура.УстановитьОбязательноеИспользование("ПубликуетсяНаМаркетплейсе", Истина);

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокСтандартныйПоискНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокРасширенныйПоискНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ПубликуетсяНаМаркетплейсе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);

	Форма.СписокХарактеристики.УстановитьОбязательноеИспользование("ПубликуетсяНаМаркетплейсе", Истина);

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокСтандартныйПоискХарактеристики.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокРасширенныйПоискХарактеристики.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ПубликуетсяНаМаркетплейсе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);

КонецПроцедуры

// Подготавливает состав результата записи загружаемых данных.
// 
// Возвращаемое значение:
//   Структура - результат записи:
//     * ОписаниеОшибки  - Строка - Описание ошибки.
//     * СсылкаНаОбъект  - Неопределено, ЛюбаяСсылка - ссылка на созданный при загрузке объект.
//     * Ссылки          - Массив из ЛюбаяСсылка - все записанные ссылки для заполнения параметра отбора динамического
//                           списка формы Справочники.УчетныеЗаписиМаркетплейсов.Формы.ВыгрузкаЗагрузкаДанных.
//     * СостоянияСсылок - Соответствие из КлючИЗначение - описание ошибки.
//     * Служебное       - Произвольный, Неопределено - любые дополнительные данные.
//
Функция РезультатЗаписиЗагружаемыхДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки",  "");
	Результат.Вставить("СсылкаНаОбъект",  Неопределено);
	Результат.Вставить("Ссылки",          Новый Массив);
	Результат.Вставить("СостоянияСсылок", Новый Соответствие);
	Результат.Вставить("Служебное",       Неопределено);
	
	Возврат Результат;
	
КонецФункции

#Область ДлительныеОперации

// Сообщает о прогрессе выполнения длительной операции.
//
// Параметры:
//   ВсегоОбрабатываемыхОбъектов - Число - общее количество обрабатываемых за итерацию объектов.
//   ИндексТекущегоОбъекта       - Число - порядковый номер текущего объекта в итерации.
//   ВыполненоПроцентовИтерации  - Число - процент, установленный в предыдущем обращении в данную процедуру.
//   ПараметрыПрогресса          - Структура - характеристики прогресса, см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса.
//
Процедура УстановитьПроцентПрогресса(Знач ВсегоОбрабатываемыхОбъектов, ИндексТекущегоОбъекта,
			ВыполненоПроцентовИтерации, ПараметрыПрогресса) Экспорт

	ВсегоОбрабатываемыхОбъектов = ?(ВсегоОбрабатываемыхОбъектов = 0, 1, ВсегоОбрабатываемыхОбъектов);

	ТекущийПроцентВыполнения = Окр(ИндексТекущегоОбъекта / ВсегоОбрабатываемыхОбъектов, 1);
	Если ВыполненоПроцентовИтерации = ТекущийПроцентВыполнения Тогда
		Возврат;
	КонецЕсли;

	ВыполненоПроцентовИтерации = ТекущийПроцентВыполнения;

	Процент = ИндексТекущегоОбъекта * (ПараметрыПрогресса.ШагИтерацииВПроцентах / ВсегоОбрабатываемыхОбъектов)
		+ ПараметрыПрогресса.ПрогрессВыполнения;
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.СообщитьПрогресс(Процент);

КонецПроцедуры

// Конструктор параметров прогресса.
//
// Возвращаемое значение:
//   Структура:
//     * ШагИтерацииВПроцентах - Число - максимальный размер итерации в процентах.
//     * ПрогрессВыполнения    - Число - текущий прогресс процесса до перехода к новой итерации.
//
Функция ПараметрыПрогресса() Экспорт

	ПараметрыПрогресса = Новый Структура;
	ПараметрыПрогресса.Вставить("ШагИтерацииВПроцентах", 100);
	ПараметрыПрогресса.Вставить("ПрогрессВыполнения", 0);
	
	Возврат ПараметрыПрогресса;

КонецФункции

#КонецОбласти

#Область Документы

// Определяет набор используемых функциональных опций.
//
// Параметры:
//   Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение с клиентом;
//              - Неопределено - соглашения не используются.
//
// Возвращаемое значение:
//   Структура - используемые функциональные опции:
//     * ИспользоватьХарактеристикиНоменклатуры             - Булево - используются ли характеристики номенклатуры.
//     * ИспользоватьУпаковкиНоменклатуры                   - Булево - используются ли упаковки номенклатуры.
//     * ИспользоватьПартнеровИКонтрагентов                 - Булево - разделять ли партнеров и контрагентов.
//     * ИспользоватьСоглашенияСКлиентами                   - Булево - используется ли соглашения с клиентами.
//     * ИспользуютсяДоговорыКонтрагентов                   - Булево - используется ли договоры контрагентов.
//     * ИспользоватьНаправленияДеятельности                - Булево - используются ли направления деятельности.
//     * ИспользоватьНесколькоСкладов                       - Булево - используется ли несколько складов.
//     * ИспользоватьСкладыВТабличнойЧастиДокументовПродажи - Булево - разрешено ли выбирать склады в табличных частях документов продажи.
//     * ИспользоватьОрдернуюСхемуПриОтгрузке               - Булево - используется ли ордерная схема при отгрузке.
//     * ИспользоватьУчетНДС                                - Булево - используется ли учет НДС.
//     * ИспользуетсяЦенообразование25                      - Булево - используется ли ценообразование версии 2.5.
//     * КомиссионерВедетУчетПоРНПТ                         - Булево - ведет ли комиссионер учет по РНПТ.
//     * ИспользоватьЗаказыКлиентов                         - Булево - используются ли заказы клиентов. 
//     * ИспользоватьРасширенныеВозможностиЗаказаКлиента    - Булево - используются ли расширенные возможности заказов клиентов.  
//     * ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента       - Булево - используется ли построчная отгрузка в заказах клиентов.
//     * ИспользоватьОтгрузкуБезПереходаПраваСобственности  - Булево - используется ли реализация с отложенным переходом права собственности.
//     * ИспользоватьКорректировкиРеализаций                - Булево - используются ли корректировки реализаций.
//     * ИспользоватьКомиссиюПриПродажах                    - Булево - используются ли продажи через комиссионера.
//
Функция ПолучитьФункциональныеОпции(Соглашение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	Результат.Вставить("ИспользоватьУпаковкиНоменклатуры",       ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры"));
	Результат.Вставить("ИспользоватьПартнеровИКонтрагентов",     ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов"));
	Результат.Вставить("ИспользоватьСоглашенияСКлиентами",       ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	Результат.Вставить("ИспользуютсяДоговорыКонтрагентов",       ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"));
	Результат.Вставить("ИспользоватьНаправленияДеятельности",    ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	Результат.Вставить("ИспользоватьНесколькоСкладов",           ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));
	Результат.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",   ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке"));
	Результат.Вставить("ИспользоватьУчетНДС",                    ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	Результат.Вставить("ИспользуетсяЦенообразование25",          ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25"));
	
	Если Результат.ИспользоватьСоглашенияСКлиентами Тогда
		Результат.Вставить("ИспользуютсяДоговорыКонтрагентов",
			Результат.ИспользуютсяДоговорыКонтрагентов
				И ЗначениеЗаполнено(Соглашение)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов"));
	КонецЕсли;
	
	Результат.Вставить("КомиссионерВедетУчетПоРНПТ",
		(Результат.ИспользоватьСоглашенияСКлиентами
			И Справочники.СоглашенияСКлиентами.КомиссионерВедетУчетПоРНПТ(Соглашение))
				Или УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ТекущаяДатаСеанса()));
				
	Результат.Вставить("ИспользоватьЗаказыКлиентов",                         ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов"));
	Результат.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента",    ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	Результат.Вставить("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента",       ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента"));
	Результат.Вставить("ИспользоватьОтгрузкуБезПереходаПраваСобственности",  ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности"));
	Результат.Вставить("ИспользоватьКорректировкиРеализаций",                ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций"));
	Результат.Вставить("ИспользоватьКомиссиюПриПродажах",                    ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
	Результат.Вставить("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи", ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняет блокировку документа от изменения другими режимами или пользователями.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - документ к блокировке.
//   ИмяСобытия     - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Строка - описание ошибки при выполнении блокировки документа.
//
Функция ЗаблокироватьДокумент(ДокументОбъект, ИмяСобытия) Экспорт
	
	ОписаниеОшибки = "";
	
	Попытка
		ДокументОбъект.Заблокировать();
		
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать ""%1"" по причине: %2. Подробнее см. в журнале регистрации.'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ДокументОбъект.Ссылка,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект.Метаданные().ПредставлениеОбъекта,
			ДокументОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

// Выполняет запись и (или) проведение документа.
//
// Параметры:
//   ДокументОбъект    - ДокументОбъект - документ к записи и (или) проведению.
//   Провести          - Булево - признак проведения документа. 
//   ИмяСобытия        - Строка - имя события журнала регистрации.
//   ЗаписатьПриОшибке - Булево - признак записи при неудачной попытке проведения документа. 
//
// Возвращаемое значение:
//   См. НовыйРезультатЗаписиДокументов.
//
Функция ЗаписатьПровестиДокумент(ДокументОбъект, Провести, ИмяСобытия, ЗаписатьПриОшибке = Истина) Экспорт
	
	Результат = НовыйРезультатЗаписиДокументов();
	
	ОписаниеОшибкиЗаписи    = "";
	ПодробноеОписаниеОшибки = "";
	
	Если Провести И ДокументОбъект.ПроверитьЗаполнение() Тогда
		// Проведение документа
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			УстановитьПривилегированныйРежим(Ложь);
			Результат.ЗаписьВыполнена = Истина;
			
		Исключение
			ОписаниеОшибкиЗаписи    = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не Результат.ЗаписьВыполнена И ЗаписатьПриОшибке Тогда
		// Запись при неудачной попытке проведения
		Попытка
			Если Не ДокументОбъект.ЭтоНовый() И ДокументОбъект.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.Записать(РежимЗаписи);
			УстановитьПривилегированныйРежим(Ложь);
			Результат.ЗаписьВыполнена = Истина;
			
		Исключение
			ОписаниеОшибкиЗаписи    = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеОшибкиЗаписи) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибкиЗаписи;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект.Метаданные(),
			ДокументОбъект.Ссылка,
			ПодробноеОписаниеОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает документы заказов клиента.
//
// Параметры:
//   Результат          - См. РезультатЗаписиЗагружаемыхДанных.
//   ТаблицаЗаказов     - ТаблицаЗначений - подготовленная таблица данных для загрузки.
//   Параметры          - Структура - параметры заполнения документов:
//     * ВидТорговойПлощадки          - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки;
//     * УчетнаяЗапись                - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки;
//     * ВалютаУчета                  - СправочникСсылка.Валюты, Неопределено - валюта учета учетной записи;
//     * Организация                  - СправочникСсылка.Организации - организация в шапке;
//     * Партнер                      - СправочникСсылка.Партнеры - партнер в шапке;
//     * Контрагент                   - СправочникСсылка.Контрагенты - контрагент в шапке;
//     * Соглашение                   - СправочникСсылка.СоглашенияСКлиентами - соглашение в шапке;
//     * Договор                      - СправочникСсылка.ДоговорыКонтрагентов - договор в шапке;
//     * ХозяйственнаяОперация        - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция в шапке;
//     * ПричинаОтменыПоУмолчанию     - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены по умолчанию;
//     * КодОшибки                    - Строка - код ошибки для результат выполнения;
//     * СобытиеЖурналаРегистрации    - Строка - наименование события для записей в журнале регистрации;
//     * ЗагружатьНезаполненныеСтроки - Булево - добавлять ли строки с несопоставленными показателями;
//     * ПерезаписатьДокументы        - Булево - перезаписывать ли существующие документы;
//     * ОчиститьТабличныеЧасти       - Булево - очищать табличные части документов перед обработкой;
//     * ОбработатьВариантОбеспечения - Булево - заполнять вариант обеспечения с возможным переносом строк;
//     * ПараметрыОбработки           - Структура Из КлючИЗначение, Неопределено - параметры обработки табличных частей документов;
//     * ТекстЗапроса                 - Строка - текст запроса для обработки заказов;
//     * ЗаписатьНеобработанныеЗаказы - Булево - записать необработанные заказы торговой площадки в специализированный регистр сведений.
//   ПараметрыПрогресса - См. ПараметрыПрогресса.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ЗаписатьЗаказыКлиентов(Результат, ТаблицаЗаказов, Параметры, ПараметрыПрогресса = Неопределено) Экспорт
	
	Ошибка = НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Партнер    = Параметры.Партнер;
	Контрагент = Параметры.Контрагент;
	Соглашение = Параметры.Соглашение;
	Договор    = Параметры.Договор;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер    = Справочники.Партнеры.РозничныйПокупатель;
		Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
		Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		Договор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(Соглашение);
	
	Если Не ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов Тогда
		ТекстОшибки = НСтр("ru = 'Отключена функциональная опция ""Использовать заказы клиентов"".'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
		ТекстОшибки = НСтр("ru = 'Загрузка и обработка заказов доступны при использовании заказов клиентов в режимах ""Заказ только со склада"" или ""Заказ со склада и под заказ"".'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсамиСервер.ЗаписатьЗаказыКлиентов");
	
	Если Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Яндекс Маркет)'");
	ИначеЕсли Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Озон)'");
	Иначе
		УчетнаяЗаписьПредставление = НСтр("ru = '(Не определен)'");
	КонецЕсли;
	
	УчетнаяЗаписьПредставление     = УчетнаяЗаписьПредставление + " " + СокрЛП(Параметры.УчетнаяЗапись);
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Параметры.Организация);
	ДоступныеСостоянияДокументов   = ДоступныеСостоянияДокументов();
	СозданныеДокументы             = Новый Соответствие; 
	НастройкиСкладов               = Новый Соответствие;
	ОкруглятьКоличество            = Истина;
	ЗаполнитьОбособленно           = ?(ЗначениеЗаполнено(Соглашение),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ОбеспечиватьЗаказыОбособленно"),
		Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	*
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок";
	ЗаказыТорговыхПлощадок = Запрос.Выполнить().Выгрузить();
	ЗаказыТорговыхПлощадок.Колонки.Добавить("ДополнительныеСведения");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",                  ТекущаяДатаСеанса());
	ДанныеЗаполнения.Вставить("Организация",           Параметры.Организация);
	ДанныеЗаполнения.Вставить("Валюта",                ?(ЗначениеЗаполнено(Параметры.ВалютаУчета), 
															Параметры.ВалютаУчета, 
															ВалютаРегламентированногоУчета));
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("Партнер",               Партнер);
	ДанныеЗаполнения.Вставить("Контрагент",            Контрагент);
	ДанныеЗаполнения.Вставить("Соглашение",            Соглашение);
	ДанныеЗаполнения.Вставить("Договор",               Договор);
	
	Если Параметры.ПараметрыОбработки = Неопределено Тогда
		Параметры.ПараметрыОбработки = Новый Структура;
		Параметры.ПараметрыОбработки.Вставить("СтруктураДействий",            Неопределено);
		Параметры.ПараметрыОбработки.Вставить("ПересчитатьКоличествоЕдиниц",  Ложь);
		Параметры.ПараметрыОбработки.Вставить("ЗаполнитьВариантОбеспечения",  Ложь);
		Параметры.ПараметрыОбработки.Вставить("ЗаполнитьЦены",                Ложь);
		Параметры.ПараметрыОбработки.Вставить("ОчиститьАвтоматическуюСкидку", Истина);
		Параметры.ПараметрыОбработки.Вставить("ПересчитатьЦенаВключаетНДС",   Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Параметры.ТекстЗапроса;
	
	ТаблицаСкладов = ПолучитьСопоставленныеСклады(Параметры.УчетнаяЗапись, Ложь, Истина);
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",                    Параметры.УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТаблицаЗаказов",                   ТаблицаЗаказов);
	Запрос.УстановитьПараметр("ТаблицаСкладов",                   ТаблицаСкладов);
	Запрос.УстановитьПараметр("ИспользоватьУпаковкиНоменклатуры", ЗначенияФункциональныхОпций.ИспользоватьУпаковкиНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаОстатков = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ТаблицаЗаказов.Количество() / 100);
		
	ВыборкаНомерДокумента = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсегоСтрок            = ВыборкаНомерДокумента.Количество();
	НомерТекущейСтроки    = 1;
	ПроцентВыполнения     = 0;
	
	Если ВсегоСтрок = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для загрузки заказов с торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Параметры.УчетнаяЗапись);
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Пока ВыборкаНомерДокумента.Следующий() Цикл
		Если ПараметрыПрогресса <> Неопределено Тогда
			УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);
		КонецЕсли;
		
		ЗаказКлиентаОбъект      = Неопределено;
		ЗаказКлиентаСсылка      = Неопределено;
		ЗаказКлиентаСостояние   = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
		НовыйЗаказ              = Неопределено;
		ИдентификаторЭкземпляра = 1;
		
		ВыборкаДанных = ВыборкаНомерДокумента.Выбрать();
		Пока ВыборкаДанных.Следующий() Цикл
			Если ЗаказКлиентаОбъект = Неопределено Тогда
				ЗаказКлиентаСсылка = ВыборкаДанных.ЗаказКлиентаСсылка;
				
				Если Не ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
					ЗаказКлиентаСсылка = СозданныеДокументы.Получить(ВыборкаНомерДокумента.НомерДокумента);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
					// Существующий документ
					Если Не Параметры.ПерезаписатьДокументы
							И Не ВыборкаДанных.ЗаказКлиентаПометкаУдаления Тогда
						Прервать;
					КонецЕсли;
					
					ЗаказКлиентаОбъект    = ЗаказКлиентаСсылка.ПолучитьОбъект();
					ЗаказКлиентаСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
					
					ТекстОшибки = ЗаблокироватьДокумент(ЗаказКлиентаОбъект, Параметры.СобытиеЖурналаРегистрации);
					
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						Если Ошибка.Детализация = Неопределено Тогда
							Ошибка.Детализация = Новый Массив;
						КонецЕсли;
						Ошибка.КодОшибки = Параметры.КодОшибки;
						Ошибка.Детализация.Добавить(ТекстОшибки);
						
						ЗаказКлиентаОбъект = Неопределено;
						
						Прервать;
					КонецЕсли;
					
				Иначе
					// Новый документ
					ЗаказКлиентаОбъект    = Документы.ЗаказКлиента.СоздатьДокумент();
					ЗаказКлиентаСостояние = ДоступныеСостоянияДокументов.СостояниеНовый;
				КонецЕсли;
				
				НовыйЗаказ = ЗаказыТорговыхПлощадок.Добавить();
				НовыйЗаказ.УчетнаяЗапись                        = Параметры.УчетнаяЗапись;
				НовыйЗаказ.Заказ                                = Неопределено;
				НовыйЗаказ.Статус                               = Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению(
																	ВыборкаДанных.СтатусОтправления, 
																	ВыборкаДанных.ПодстатусОтправления);
				НовыйЗаказ.ДатаПлановойОтгрузки                 = ВыборкаДанных.ДатаСборки;
				НовыйЗаказ.ИдентификаторЗаказа                  = ВыборкаДанных.ИдентификаторЗаказа;
				НовыйЗаказ.НомерЗаказа                          = ВыборкаДанных.НомерЗаказа;
				НовыйЗаказ.НомерОтправления                     = ВыборкаДанных.НомерОтправления;
				НовыйЗаказ.ИдентификаторСкладаТорговойПлощадки  = ВыборкаДанных.ИдентификаторСклада;
				НовыйЗаказ.ДатаУстановкиСтатуса                 = ТекущаяДатаСеанса();
				НовыйЗаказ.ДатаСозданияЗаказа                   = ВыборкаДанных.ДатаОтправления;
				НовыйЗаказ.НомерРодительскогоОтправления        = ВыборкаДанных.НомерРодительскогоОтправления;
				НовыйЗаказ.НаименованиеСкладаТорговойПлощадки   = ВыборкаДанных.НаименованиеСклада;
				НовыйЗаказ.ТребуетсяЗаполнениеСведенийПоТоварам = ВыборкаНомерДокумента.ТребуетсяГТД
																	Или ВыборкаНомерДокумента.ТребуетсяРНПТ
																	Или ВыборкаНомерДокумента.ТребуетсяСтранаПроисхождения
																	Или ВыборкаНомерДокумента.ТребуетсяМаркировка
																	Или ВыборкаНомерДокумента.ТребуетсяУИНЮвелирногоИзделия;
				НовыйЗаказ.ДополнительныеСведения               = Новый Массив;
				
				АдресДоставки = Новый Массив;
				АдресДоставки.Добавить(ВыборкаДанных.РегионДоставки);
				АдресДоставки.Добавить(ВыборкаДанных.ГородДоставки);
				АдресДоставки.Добавить(ВыборкаДанных.АдресДоставки);
				
				ДанныеЗаполнения.Вставить("НомерПоДаннымКлиента", ВыборкаДанных.НомерДокумента);
				ДанныеЗаполнения.Вставить("ДатаПоДаннымКлиента",  ВыборкаДанных.ДатаОтправления);
				ДанныеЗаполнения.Вставить("Склад",                ВыборкаДанных.Склад);
				ДанныеЗаполнения.Вставить("АдресДоставки",        СтрСоединить(АдресДоставки, ", "));
				ДанныеЗаполнения.Вставить("Комментарий",          ВыборкаДанных.КомментарийКЗаказу);
				
				НастройкиСклада = НастройкиСкладов.Получить(ВыборкаДанных.ИдентификаторСклада);
				Если НастройкиСклада = Неопределено Тогда
					НастройкиСклада = НастройкиСклада(Параметры.УчетнаяЗапись, ВыборкаДанных.ИдентификаторСклада);
					НастройкиСкладов.Вставить(ВыборкаДанных.ИдентификаторСклада, НастройкиСклада);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, НастройкиСклада, Истина);
				
				Если ЗаказКлиентаЗаполнить(ЗаказКлиентаОбъект, ДанныеЗаполнения, 
						ЗначенияФункциональныхОпций, Параметры.СобытиеЖурналаРегистрации) Тогда
					Если ЗаказКлиентаСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
						ЗаказКлиентаСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(ЗаказКлиентаОбъект, ДанныеЗаполнения);
					ЗаказКлиентаСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
				КонецЕсли;
				
				ЗаказКлиентаОбъект.Склад = ДанныеЗаполнения.Склад;
				
				Если НовыйЗаказ.Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки Тогда
					Если ЗаказКлиентаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
							И ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента
							И Не ЗначенияФункциональныхОпций.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
						ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
					КонецЕсли;
				Иначе
					Если ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента
							И Не ЗначенияФункциональныхОпций.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
						ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
					КонецЕсли;
				КонецЕсли;
				
				Если Параметры.ОчиститьТабличныеЧасти Тогда
					ЗаказКлиентаОбъект.Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
			
			Если Не Параметры.ЗагружатьНезаполненныеСтроки
					И Не ЗначениеЗаполнено(ВыборкаДанных.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			СкладГруппа = ?(ЗначениеЗаполнено(ЗаказКлиентаОбъект.Склад)
									И ЗначенияФункциональныхОпций.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи,
								Справочники.Склады.ЭтоГруппа(ЗаказКлиентаОбъект.Склад),
								Ложь);
				
			// Заполнение строки табличной части
			СтрокаТабличнойЧасти = ЗаказКлиентаОбъект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = ВыборкаДанных.Номенклатура;
			
			Если ЗначенияФункциональныхОпций.ИспользоватьХарактеристикиНоменклатуры Тогда
				СтрокаТабличнойЧасти.Характеристика = ВыборкаДанных.Характеристика;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДанных.Упаковка)
					И ВыборкаДанных.Упаковка <> ВыборкаДанных.ЕдиницаИзмерения Тогда
				Если ЗначенияФункциональныхОпций.ИспользоватьУпаковкиНоменклатуры Тогда
					СтрокаТабличнойЧасти.Упаковка = ВыборкаДанных.Упаковка;
					КоличествоУпаковок            = ВыборкаДанных.Количество;
					Количество                    = Окр(КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
														3, РежимОкругления.Окр15как20);
				Иначе
					СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КоличествоУпаковок            = Окр(ВыборкаДанных.Количество * ВыборкаДанных.УпаковкаКоэффициент, 
														3, РежимОкругления.Окр15как20);
					Количество                    = КоличествоУпаковок;
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				КоличествоУпаковок            = ВыборкаДанных.Количество;
				Количество                    = КоличествоУпаковок;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.КоличествоУпаковок  = КоличествоУпаковок;
			СтрокаТабличнойЧасти.Количество          = Количество;
			СтрокаТабличнойЧасти.Цена                = ВыборкаДанных.Цена;
			СтрокаТабличнойЧасти.Сумма               = ВыборкаДанных.Сумма;
			СтрокаТабличнойЧасти.СуммаСНДС           = ВыборкаДанных.Сумма;
			СтрокаТабличнойЧасти.Обособленно         = ЗаполнитьОбособленно;
			СтрокаТабличнойЧасти.ВариантОбеспечения  = Перечисления.ВариантыОбеспечения.СоСклада;
			СтрокаТабличнойЧасти.Склад               = ?(Не СкладГруппа, ВыборкаДанных.Склад, Справочники.Склады.ПустаяСсылка());
			СтрокаТабличнойЧасти.КодСтроки           = СтрокаТабличнойЧасти.НомерСтроки;
			СтрокаТабличнойЧасти.ИдентификаторСтроки = "";
			СтрокаТабличнойЧасти.ДатаОтгрузки        = ЗаказКлиентаОбъект.ДатаОтгрузки;
			СтрокаТабличнойЧасти.Отменено            = ЗначениеЗаполнено(ВыборкаДанных.ИдентификаторПричиныОтмены);
			СтрокаТабличнойЧасти.ПричинаОтмены       = ВыборкаДанных.ПричинаОтмены;
			
			Если ЗаказКлиентаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
					Или ЗаказКлиентаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
					Или Не ЗначениеЗаполнено(ЗаказКлиентаОбъект.ХозяйственнаяОперация) Тогда
				СтрокаТабличнойЧасти.СуммаРучнойСкидки = ВыборкаДанных.СуммаСкидки;
			КонецЕсли;
			
			// Обеспечение
			Если ЗаказКлиентаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
					И ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента
					И Не ЗначенияФункциональныхОпций.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
					И НовыйЗаказ.Статус <> Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен Тогда
				СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			КонецЕсли;
			
			НоваяСтрока = Неопределено;
			
			Если Параметры.ОбработатьВариантОбеспечения Тогда
				Если НовыйЗаказ.Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("Номенклатура",   СтрокаТабличнойЧасти.Номенклатура);
					Отбор.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
					Если СкладГруппа Тогда
						Отбор.Вставить("ГруппаСкладов", ЗаказКлиентаОбъект.Склад);
					Иначе
						Отбор.Вставить("Склад", СтрокаТабличнойЧасти.Склад);
					КонецЕсли;
					
					НайденныеСтроки       = ТаблицаОстатков.НайтиСтроки(Отбор);
					ОстатокКРаспределению = СтрокаТабличнойЧасти.Количество;
					
					Для Каждого ЭлементКоллекции Из НайденныеСтроки Цикл
						Если ОстатокКРаспределению <= 0 Тогда
							Прервать;
						ИначеЕсли ЭлементКоллекции.Остаток <= 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаТабличнойЧасти.Количество <= ЭлементКоллекции.Остаток Тогда
							ДляРаспределенияКоличество = СтрокаТабличнойЧасти.Количество;
							СтрокаТабличнойЧасти.Склад = ЭлементКоллекции.Склад;
							
						Иначе
							ДляРаспределенияКоличество = ЭлементКоллекции.Остаток;
							
							Количество          = ДляРаспределенияКоличество;
							КоличествоУпаковок  = Окр(Количество 
														/ ?(ВыборкаДанных.УпаковкаКоэффициент = 0, 1, ВыборкаДанных.УпаковкаКоэффициент), 
													3, РежимОкругления.Окр15как20);
							Если ОкруглятьКоличество Тогда
								КоличествоУпаковок         = Цел(КоличествоУпаковок);
								Количество                 = Окр(КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
																3, РежимОкругления.Окр15как20);
								ДляРаспределенияКоличество = Количество;
							КонецЕсли;
							
							Если Количество > 0 Тогда
								НоваяСтрока = ЗаказКлиентаОбъект.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
								
								НоваяСтрока.Склад               = ЭлементКоллекции.Склад;
								НоваяСтрока.Количество          = Количество;
								НоваяСтрока.КоличествоУпаковок  = КоличествоУпаковок;
								НоваяСтрока.КодСтроки           = НоваяСтрока.НомерСтроки;
								НоваяСтрока.ИдентификаторСтроки = "";
								
								СтрокаТабличнойЧасти.Количество         = СтрокаТабличнойЧасти.Количество - ДляРаспределенияКоличество;
								СтрокаТабличнойЧасти.КоличествоУпаковок = Окр(СтрокаТабличнойЧасти.Количество 
																				/ ?(ВыборкаДанных.УпаковкаКоэффициент = 0, 1, ВыборкаДанных.УпаковкаКоэффициент), 
																			3, РежимОкругления.Окр15как20);
								Если ОкруглятьКоличество Тогда
									СтрокаТабличнойЧасти.КоличествоУпаковок = Цел(СтрокаТабличнойЧасти.КоличествоУпаковок);
									СтрокаТабличнойЧасти.Количество         = Окр(СтрокаТабличнойЧасти.КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
																					3, РежимОкругления.Окр15как20);
								КонецЕсли;
								
								// Дополнительные сведения по товарам заказа
								Для Индекс = 1 По НоваяСтрока.КоличествоУпаковок Цикл
									ДопСведения = Новый Структура;
									ДопСведения.Вставить("ИдентификаторТовара",          ВыборкаДанных.ИдентификаторSKU);
									ДопСведения.Вставить("ИдентификаторЭкземпляра",      ИдентификаторЭкземпляра);
									ДопСведения.Вставить("НомерОтправления",             ВыборкаДанных.НомерОтправления);
									ДопСведения.Вставить("КодСтроки",                    НоваяСтрока.КодСтроки);
									ДопСведения.Вставить("ИдентификаторСтроки",          НоваяСтрока.ИдентификаторСтроки);
									ДопСведения.Вставить("ТребуетсяНомерГТД",            ВыборкаДанных.ТребуетсяГТД);
									ДопСведения.Вставить("ТребуетсяРНПТ",                ВыборкаДанных.ТребуетсяРНПТ);
									ДопСведения.Вставить("ТребуетсяСтранаПроисхождения", ВыборкаДанных.ТребуетсяСтранаПроисхождения);
									ДопСведения.Вставить("ТребуетсяМаркировка",          ВыборкаДанных.ТребуетсяМаркировка);
									ДопСведения.Вставить("ТребуетсяУИН",                 ВыборкаДанных.ТребуетсяУИНЮвелирногоИзделия);
									ДопСведения.Вставить("Количество",                   1);
									
									НовыйЗаказ.ДополнительныеСведения.Добавить(ДопСведения);
									ИдентификаторЭкземпляра = ИдентификаторЭкземпляра + 1;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
						ЭлементКоллекции.Остаток = ЭлементКоллекции.Остаток - ДляРаспределенияКоличество;
						ОстатокКРаспределению    = ОстатокКРаспределению - ДляРаспределенияКоличество;
					КонецЦикла;
					
					Если ОстатокКРаспределению > 0 Тогда
						Если Не ЗначенияФункциональныхОпций.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
							СтрокаТабличнойЧасти.Отменено      = Истина;
							СтрокаТабличнойЧасти.ПричинаОтмены = Параметры.ПричинаОтменыПоУмолчанию;
							
						Иначе
							СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли НовыйЗаказ.Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен Тогда
					СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
					СтрокаТабличнойЧасти.Отменено           = Истина;
					Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПричинаОтмены) Тогда
						СтрокаТабличнойЧасти.ПричинаОтмены = Параметры.ПричинаОтменыПоУмолчанию;
					КонецЕсли;
					
				Иначе
					СтрокаТабличнойЧасти.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				КонецЕсли;
			КонецЕсли;
			
			Если НовыйЗаказ.Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки Тогда
				// Дополнительные сведения по товарам заказа
				Для Индекс = 1 По СтрокаТабличнойЧасти.КоличествоУпаковок Цикл
					ДопСведения = Новый Структура;
					ДопСведения.Вставить("ИдентификаторТовара",          ВыборкаДанных.ИдентификаторSKU);
					ДопСведения.Вставить("ИдентификаторЭкземпляра",      ИдентификаторЭкземпляра);
					ДопСведения.Вставить("НомерОтправления",             ВыборкаДанных.НомерОтправления);
					ДопСведения.Вставить("КодСтроки",                    СтрокаТабличнойЧасти.КодСтроки);
					ДопСведения.Вставить("ИдентификаторСтроки",          СтрокаТабличнойЧасти.ИдентификаторСтроки);
					ДопСведения.Вставить("ТребуетсяНомерГТД",            ВыборкаДанных.ТребуетсяГТД);
					ДопСведения.Вставить("ТребуетсяРНПТ",                ВыборкаДанных.ТребуетсяРНПТ);
					ДопСведения.Вставить("ТребуетсяСтранаПроисхождения", ВыборкаДанных.ТребуетсяСтранаПроисхождения);
					ДопСведения.Вставить("ТребуетсяМаркировка",          ВыборкаДанных.ТребуетсяМаркировка);
					ДопСведения.Вставить("ТребуетсяУИН",                 ВыборкаДанных.ТребуетсяУИНЮвелирногоИзделия);
					ДопСведения.Вставить("Количество",                   1);
					
					НовыйЗаказ.ДополнительныеСведения.Добавить(ДопСведения);
					ИдентификаторЭкземпляра = ИдентификаторЭкземпляра + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаказКлиентаОбъект <> Неопределено Тогда
			Если ЗаказКлиентаОбъект.Товары.Количество() > 0 Тогда
				// Постобработка табличной части
				Если Не ЗаказКлиентаОбработатьТЧ(ЗаказКлиентаОбъект, Параметры.ПараметрыОбработки, 
							Параметры.СобытиеЖурналаРегистрации) Тогда
					ЗаказКлиентаСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
				КонецЕсли;
				
				ЗаказКлиентаОбъект.МаксимальныйКодСтроки = ЗаказКлиентаОбъект.Товары.Количество();
				
				// Запись и проведение документа
				РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ЗаказКлиентаОбъект, 
					Истина, Параметры.СобытиеЖурналаРегистрации);
				ЗаказКлиентаСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
					ЗаказКлиентаСостояние, 
					ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
					
				Если ЗаказКлиентаСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
					ЗаказКлиентаОбъект.Разблокировать();
				КонецЕсли;
				
				Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
					Если Ошибка.Детализация = Неопределено Тогда
						Ошибка.Детализация = Новый Массив;
					КонецЕсли;
					Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
				КонецЕсли;
			
			ИначеЕсли Не ЗаказКлиентаОбъект.ЭтоНовый() 
						И Параметры.ПерезаписатьДокументы Тогда
				// Запись и пометка на удаление документа
				ЗаказКлиентаОбъект.ПометкаУдаления = Истина;
				
				РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ЗаказКлиентаОбъект, 
					Ложь, Параметры.СобытиеЖурналаРегистрации);
				ЗаказКлиентаСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
					ЗаказКлиентаСостояние, 
					ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
					
				ЗаказКлиентаОбъект.Разблокировать();
				
				Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
					Если Ошибка.Детализация = Неопределено Тогда
						Ошибка.Детализация = Новый Массив;
					КонецЕсли;
					Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
				ЗаказКлиентаСсылка = ЗаказКлиентаОбъект.Ссылка;
			КонецЕсли;
			
			СозданныеДокументы.Вставить(ВыборкаНомерДокумента.НомерДокумента, ЗаказКлиентаСсылка);
			НовыйЗаказ.Заказ = ЗаказКлиентаСсылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаказКлиентаСсылка) 
				И Результат.Ссылки.Найти(ЗаказКлиентаСсылка) = Неопределено Тогда
			Результат.Ссылки.Добавить(ЗаказКлиентаСсылка);
			Результат.СостоянияСсылок.Вставить(ЗаказКлиентаСсылка, ЗаказКлиентаСостояние);
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
	// Новые необработанные заказы торговой площадки
	Если Параметры.ЗаписатьНеобработанныеЗаказы
			И ЗаказыТорговыхПлощадок.Количество() > 0 Тогда
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.ИсточникДанных = ЗаказыТорговыхПлощадок;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
			БлокировкаДанных.Заблокировать();
			
			Для Каждого СтрокаТаблицыЗначений Из ЗаказыТорговыхПлощадок Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.Заказ) Тогда
					Запись = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицыЗначений);
					Запись.ТребуетсяПолучениеЭтикеток = (Запись.Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
					Запись.Записать(Параметры.ПерезаписатьДокументы);
					
					НаборЗаписей = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Заказ.Установить(СтрокаТаблицыЗначений.Заказ);
					НаборЗаписей.Прочитать();
					НаборЗаписей.Очистить();
					Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.ДополнительныеСведения Цикл
						Запись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, ЭлементКоллекции);
						Запись.Заказ = СтрокаТаблицыЗначений.Заказ;
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Ошибка.КодОшибки      = Параметры.КодОшибки;
			Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При записи заказов с торговой площадки <%1> возникли ошибки. Подробности см. в журнале регистрации.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				Параметры.УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
				
			ЗаписьЖурналаРегистрации(Параметры.СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Создает документы продажи с отложенным переходом права собственности.
//
// Параметры:
//   Результат          - См. РезультатЗаписиЗагружаемыхДанных.
//   ТаблицаДанных      - ТаблицаЗначений - подготовленная таблица сопоставленных данных для загрузки.
//   Параметры          - Структура - параметры заполнения документов:
//     * ВидТорговойПлощадки             - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки;
//     * УчетнаяЗапись                   - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки;
//     * ВалютаУчета                     - СправочникСсылка.Валюты, Неопределено - валюта учета учетной записи;
//     * Организация                     - СправочникСсылка.Организации - организация в шапке;
//     * Партнер                         - СправочникСсылка.Партнеры - партнер в шапке;
//     * Контрагент                      - СправочникСсылка.Контрагенты - контрагент в шапке;
//     * Соглашение                      - СправочникСсылка.СоглашенияСКлиентами - соглашение в шапке;
//     * Договор                         - СправочникСсылка.ДоговорыКонтрагентов - договор в шапке;
//     * СкладВШапке                     - СправочникСсылка.Склады, Неопределено, Строка - склад в шапке;
//     * ПерезаписатьСклад               - Булево - перезаписывать склад в существующих документах реализации;
//     * КодОшибки                       - Строка - код ошибки для результат выполнения;
//     * СобытиеЖурналаРегистрации       - Строка - наименование события для записей в журнале регистрации;
//     * ЗагружатьНезаполненныеСтроки    - Булево - добавлять ли строки с несопоставленными показателями;
//     * ПерезаписатьДокументы           - Булево - перезаписывать ли существующие документы;
//     * ОчиститьТабличныеЧасти          - Булево - очищать табличные части документов перед обработкой;
//     * ПараметрыОбработкиРеализация    - Структура Из КлючИЗначение, Неопределено - параметры обработки табличных частей документов реализации;
//     * ПараметрыОбработкиКорректировка - Структура Из КлючИЗначение, Неопределено - параметры обработки табличных частей документов корректировки;
//     * ТекстЗапроса                    - Строка - текст запроса для отражения продаж с отложенным переходом права собственности.
//   ПараметрыПрогресса - См. ПараметрыПрогресса.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ЗаписатьПродажиСОтложеннымПереходомПраваСобственности(Результат, ТаблицаДанных, Параметры, ПараметрыПрогресса = Неопределено) Экспорт
	
	Ошибка = НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Партнер    = Параметры.Партнер;
	Контрагент = Параметры.Контрагент;
	Соглашение = Параметры.Соглашение;
	Договор    = Параметры.Договор;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер    = Справочники.Партнеры.РозничныйПокупатель;
		Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
		Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		Договор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(Соглашение);
	
	Если Не ЗначенияФункциональныхОпций.ИспользоватьОтгрузкуБезПереходаПраваСобственности Тогда
		ТекстОшибки = НСтр("ru = 'Для отражения данных о реализованных товарах по схеме ""Реализация с отложенным переходом права собственности"" необходимо включить возможность оформления отгрузки с отложенным переходом права собственности в настройках раздела ""НСИ и администрирование"" - ""Продажи"" - ""Оптовые продажи"".'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПродажиСОтложеннымПереходомПраваСобственности");
	
	Если Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Яндекс Маркет)'");
	ИначеЕсли Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Озон)'");
	Иначе
		УчетнаяЗаписьПредставление = НСтр("ru = '(Не определен)'");
	КонецЕсли;
	
	УчетнаяЗаписьПредставление       = УчетнаяЗаписьПредставление + " " + СокрЛП(Параметры.УчетнаяЗапись);
	ВалютаРегламентированногоУчета   = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Параметры.Организация);
	ДоступныеСостоянияДокументов     = ДоступныеСостоянияДокументов();
	ВариантыРезультатовСопоставления = ИнтеграцияСМаркетплейсамиКлиентСервер.ВариантыРезультатовСопоставления();
	СозданныеРеализации              = Новый Соответствие;
	СозданныеКорректировки           = Новый Соответствие;
	
	РеквизитыШапкиРеализация = Новый Структура;
	РеквизитыШапкиРеализация.Вставить("Организация",           Параметры.Организация);
	РеквизитыШапкиРеализация.Вставить("Партнер",               Партнер);
	РеквизитыШапкиРеализация.Вставить("Контрагент",            Контрагент);
	РеквизитыШапкиРеализация.Вставить("Соглашение",            ?(ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами, 
																	Соглашение, 
																	Справочники.СоглашенияСКлиентами.ПустаяСсылка()));
	РеквизитыШапкиРеализация.Вставить("Договор",               ?(ЗначенияФункциональныхОпций.ИспользуютсяДоговорыКонтрагентов, 
																	Договор, 
																	Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
	РеквизитыШапкиРеализация.Вставить("Валюта",                ?(ЗначениеЗаполнено(Параметры.ВалютаУчета), 
																	Параметры.ВалютаУчета, 
																	ВалютаРегламентированногоУчета));
	РеквизитыШапкиРеализация.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
	
	ДанныеЗаполненияРеализация = Новый Структура;
	ДанныеЗаполненияРеализация.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	ДанныеЗаполненияРеализация.Вставить("РеквизитыШапки",           РеквизитыШапкиРеализация);
	
	Если ТипЗнч(Параметры.СкладВШапке) = Тип("СправочникСсылка.Склады") Тогда
		ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Склад", Параметры.СкладВШапке);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполненияРеализация.РеквизитыШапки.Соглашение) Тогда
		ДанныеЗаполненияРеализация.Вставить("Партнер", ДанныеЗаполненияРеализация.РеквизитыШапки.Партнер);
	КонецЕсли;
	
	Если Параметры.ПараметрыОбработкиРеализация = Неопределено Тогда
		Параметры.ПараметрыОбработкиРеализация = Новый Структура;
		Параметры.ПараметрыОбработкиРеализация.Вставить("СтруктураДействий",            Неопределено);
		Параметры.ПараметрыОбработкиРеализация.Вставить("ПересчитатьКоличествоЕдиниц",  Ложь);
		Параметры.ПараметрыОбработкиРеализация.Вставить("ЗаполнитьЦены",                Ложь);
		Параметры.ПараметрыОбработкиРеализация.Вставить("ОчиститьАвтоматическуюСкидку", Истина);
		Параметры.ПараметрыОбработкиРеализация.Вставить("ПересчитатьЦенаВключаетНДС",   Истина);
	КонецЕсли;
	
	ДанныеЗаполненияКорректировка = Новый Структура;
	ДанныеЗаполненияКорректировка.Вставить("Реализация");
	ДанныеЗаполненияКорректировка.Вставить("Организация",           Параметры.Организация);
	ДанныеЗаполненияКорректировка.Вставить("Валюта",                ?(ЗначениеЗаполнено(Параметры.ВалютаУчета), 
																		Параметры.ВалютаУчета, 
																		ВалютаРегламентированногоУчета));
	ДанныеЗаполненияКорректировка.Вставить("ПараметрыОформления",   Новый Структура("ВводитьНаОснованииНепроведенного", Истина));
	ДанныеЗаполненияКорректировка.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	
	Если Параметры.ПараметрыОбработкиКорректировка = Неопределено Тогда
		Параметры.ПараметрыОбработкиКорректировка = Новый Структура;
		Параметры.ПараметрыОбработкиКорректировка.Вставить("СтруктураДействий",          Неопределено);
		Параметры.ПараметрыОбработкиКорректировка.Вставить("ЗаполнитьВариантОтражения",  Истина);
		Параметры.ПараметрыОбработкиКорректировка.Вставить("ПересчитатьЦенаВключаетНДС", Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Параметры.ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаДанных",             ТаблицаДанных);
	Запрос.УстановитьПараметр("КоличествоСтрок",           ТаблицаДанных.Количество());
	Запрос.УстановитьПараметр("Организация",               Параметры.Организация);
	Запрос.УстановитьПараметр("Склад",                     Параметры.СкладВШапке);
	Запрос.УстановитьПараметр("УчетнаяЗапись",             Параметры.УчетнаяЗапись);
	Запрос.УстановитьПараметр("КомментарийНевыкупТоваров", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = '%1. Невыкуп товаров'"),
																УчетнаяЗаписьПредставление) + "%");
	Запрос.УстановитьПараметр("КомментарийВозвратТоваров", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = '%1. Возврат товаров'"),
																УчетнаяЗаписьПредставление) + "%");
	Запрос.УстановитьПараметр("КомментарийКорректировка",  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = '%1. Корректировка стоимости'"),
																УчетнаяЗаписьПредставление) + "%");
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ТаблицаДанных.Количество() / 100);
	
	ЕстьПокупательВВыборке        = (РезультатЗапроса.Колонки.Найти("Покупатель") <> Неопределено);
	ЕстьСкладВВыборке             = (РезультатЗапроса.Колонки.Найти("Склад") <> Неопределено);
	ЕстьЗаказВВыборке             = (РезультатЗапроса.Колонки.Найти("ЗаказКлиентаСсылка") <> Неопределено);
	ЕстьРеализацияДругогоПериода  = (РезультатЗапроса.Колонки.Найти("РеализацияДругогоПериода") <> Неопределено);
	ВыполнитьКорректировкуПоСумме = Параметры.ВыполнитьКорректировкуПоСумме И (РезультатЗапроса.Колонки.Найти("КорректировкаРеализацииПоСумме") <> Неопределено);
	
	ВыборкаНомерОтправления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсегоСтрок              = ВыборкаНомерОтправления.Количество();
	НомерТекущейСтроки      = 1;
	ПроцентВыполнения       = 0;
	НеПроведенныеПоЗаказам  = Ложь;
	
	Если ВсегоСтрок = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для загрузки продаж с отложенным переходом правом собственности с торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Параметры.УчетнаяЗапись);
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Пока ВыборкаНомерОтправления.Следующий() Цикл
		Если ПараметрыПрогресса <> Неопределено Тогда
			УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);
		КонецЕсли;
		
		ВыборкаДатаДокумента = ВыборкаНомерОтправления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДатаДокумента.Следующий() Цикл
			
			ВыборкаДатаДоставки = ВыборкаДатаДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДатаДоставки.Следующий() Цикл
				РеализацияТоваровУслугОбъект     = Неопределено;
				РеализацияТоваровУслугСсылка     = Неопределено;
				РеализацияТоваровУслугСостояние  = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
				РеализацияТоваровУслугСумма      = ВыборкаДатаДоставки.РеализацияТоваровУслугСумма;
				ДатаПереходаПраваСобственности   = ВыборкаДатаДоставки.ДатаДоставки;
				
				// Товары, переданные в доставку
				ТолькоТоварыПереданные = Неопределено;
				
				Если ЕстьЗаказВВыборке Тогда
					ЗаказКлиентаСсылка = ВыборкаДатаДоставки.ЗаказКлиентаСсылка;
				Иначе
					ЗаказКлиентаСсылка = Неопределено;
				КонецЕсли;
				
				ВыборкаДанных = ВыборкаДатаДоставки.Выбрать();
				Пока ВыборкаДанных.Следующий() Цикл
					Если ТолькоТоварыПереданные = Неопределено Тогда
						ТолькоТоварыПереданные = (ВыборкаДанных.ТипОперации = 1);
					ИначеЕсли ТолькоТоварыПереданные И ВыборкаДанных.ТипОперации <> 1 Тогда
						Прервать;
					КонецЕсли;
					
					Если РеализацияТоваровУслугОбъект = Неопределено Тогда
						РеализацияТоваровУслугСсылка = ВыборкаДанных.РеализацияТоваровУслугСсылка;
						
						Если Не ЗначениеЗаполнено(РеализацияТоваровУслугСсылка) Тогда
							РеализацияТоваровУслугСсылка = СозданныеРеализации.Получить(ВыборкаНомерОтправления.НомерОтправления);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(РеализацияТоваровУслугСсылка) Тогда
							// Существующий документ
							Если ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
								Прервать;
							КонецЕсли;
							
							Если ВыборкаДанных.ТипОперации <> 1 Тогда
								Если ЗначениеЗаполнено(РеализацияТоваровУслугСсылка) 
										Или Результат.Ссылки.Найти(РеализацияТоваровУслугСсылка) <> Неопределено Тогда
									Прервать;
								КонецЕсли;
							ИначеЕсли Не Параметры.ПерезаписатьДокументы Тогда
								Прервать;
							КонецЕсли;
							
							РеализацияТоваровУслугОбъект    = РеализацияТоваровУслугСсылка.ПолучитьОбъект();
							РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
							
							ТекстОшибки = ЗаблокироватьДокумент(РеализацияТоваровУслугОбъект, Параметры.СобытиеЖурналаРегистрации);
							
							Если Не ПустаяСтрока(ТекстОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(ТекстОшибки);
								
								Прервать;
							КонецЕсли;
							
						Иначе
							// Новый документ
							РеализацияТоваровУслугОбъект    = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
							РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеНовый;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ВыборкаДанных.НомерСчетаФактуры) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Отражение продаж юридическому лицу по заказу (отправлению) №%1 от %2 необходимо скорректировать вручную.'"),
								ВыборкаДанных.НомерОтправления,
								Формат(ВыборкаДанных.ДатаОтправления, "ДЛФ=D;"));
								
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(ТекстОшибки);
						КонецЕсли;
						
						ДанныеЗаполненияРеализация.Вставить("Дата",                           КонецДня(ВыборкаДанных.ДатаПередачиВДоставку));
						ДанныеЗаполненияРеализация.Вставить("Основание",                      СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																									НСтр("ru = '%1. Отчет о реализации товаров'"),
																									УчетнаяЗаписьПредставление));
						ДанныеЗаполненияРеализация.Вставить("ОснованиеНомер",                 ВыборкаДанных.НомерОтправления);
						ДанныеЗаполненияРеализация.Вставить("ОснованиеДата",                  ВыборкаДанных.ДатаОтправления);
						ДанныеЗаполненияРеализация.Вставить("Статус",                         ?(ДатаПереходаПраваСобственности = Дата(1, 1, 1), 
																									Перечисления.СтатусыРеализацийТоваровУслуг.ВПути, 
																									Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено));
						ДанныеЗаполненияРеализация.Вставить("ДатаПереходаПраваСобственности", ДатаПереходаПраваСобственности);
						ДанныеЗаполненияРеализация.Вставить("Комментарий",                    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																									НСтр("ru = '%1. Отчет о реализации товаров по заказу (отправлению) №%2 от %3'"),
																									УчетнаяЗаписьПредставление,
																									ВыборкаДанных.НомерОтправления,
																									Формат(ВыборкаДанных.ДатаОтправления, "ДЛФ=D;")));
						
						Если ЕстьПокупательВВыборке Тогда
							Если ЗначениеЗаполнено(ВыборкаДанных.Покупатель) Тогда
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Партнер",    ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.Покупатель, "Партнер"));
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Контрагент", ВыборкаДанных.Покупатель);
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Соглашение", Справочники.СоглашенияСКлиентами.ПустаяСсылка());
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Договор",    Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
								
							Иначе
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Партнер",    Партнер);
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Контрагент", Контрагент);
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Соглашение", ?(ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами, 
																										Соглашение, 
																										Справочники.СоглашенияСКлиентами.ПустаяСсылка()));
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Договор",    ?(ЗначенияФункциональныхОпций.ИспользуютсяДоговорыКонтрагентов, 
																										Договор, 
																										Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
							КонецЕсли;
								
							Если Не ЗначениеЗаполнено(ДанныеЗаполненияРеализация.РеквизитыШапки.Соглашение) Тогда
								ДанныеЗаполненияРеализация.Вставить("Партнер", ДанныеЗаполненияРеализация.РеквизитыШапки.Партнер);
							ИначеЕсли ДанныеЗаполненияРеализация.Свойство("Партнер") Тогда
								ДанныеЗаполненияРеализация.Удалить("Партнер");
							КонецЕсли;
						КонецЕсли;
							
						Если РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеНовый
								Или Параметры.ПерезаписатьСклад Тогда
							Если ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
								ДанныеЗаполненияРеализация.Вставить("РеализацияПоЗаказам", ЗначениеЗаполнено(ЗаказКлиентаСсылка));
								ДанныеЗаполненияРеализация.Вставить("ДокументОснование",   ЗаказКлиентаСсылка);
								
								Склад = Справочники.Склады.ПустаяСсылка();
								
							Иначе
								ДанныеЗаполненияРеализация.Вставить("РеализацияПоЗаказам", Ложь);
								ДанныеЗаполненияРеализация.Вставить("ДокументОснование",   Неопределено);
								
								Склад = Справочники.Склады.ПустаяСсылка();
								
								Если ТипЗнч(Параметры.СкладВШапке) = Тип("Строка") Тогда
									Склад       = ВыборкаДанных[Параметры.СкладВШапке];
									СкладГруппа = ?(ЗначениеЗаполнено(Склад)
															И ЗначенияФункциональныхОпций.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи,
														Справочники.Склады.ЭтоГруппа(Склад),
														Ложь);
									
									Если Не СкладГруппа Тогда
										Склад = Справочники.Склады.ПустаяСсылка();
									КонецЕсли;
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(Склад)
										И ЕстьСкладВВыборке Тогда
									Склад = ВыборкаДанных.Склад;
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(Склад) Тогда
								ДанныеЗаполненияРеализация.РеквизитыШапки.Вставить("Склад", Склад);
							КонецЕсли;
						КонецЕсли;
							
						Если РеализацияТоваровУслугЗаполнить(РеализацияТоваровУслугОбъект, ДанныеЗаполненияРеализация, 
								ЗначенияФункциональныхОпций, Параметры.СобытиеЖурналаРегистрации) Тогда
							Если РеализацияТоваровУслугСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
								РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
							КонецЕсли;
						Иначе
							ЗаполнитьЗначенияСвойств(РеализацияТоваровУслугОбъект, ДанныеЗаполненияРеализация);
							ЗаполнитьЗначенияСвойств(РеализацияТоваровУслугОбъект, ДанныеЗаполненияРеализация.РеквизитыШапки);
							РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						Если (РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеНовый
									Или Параметры.ПерезаписатьСклад)
								И ДанныеЗаполненияРеализация.РеквизитыШапки.Свойство("Склад") Тогда
							РеализацияТоваровУслугОбъект.Склад = ДанныеЗаполненияРеализация.РеквизитыШапки.Склад;
						КонецЕсли;
							
						Если Не ЗначениеЗаполнено(ЗаказКлиентаСсылка)
								И Параметры.ОчиститьТабличныеЧасти Тогда
							РеализацияТоваровУслугОбъект.Товары.Очистить();
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
						Если РеализацияТоваровУслугОбъект.Товары.Количество() > 0 Тогда
							Прервать;
						Иначе
							ЗаказКлиентаСсылка = Неопределено;
						КонецЕсли;
					КонецЕсли;
					
					Если Не Параметры.ЗагружатьНезаполненныеСтроки
							И ВыборкаДанных.РезультатСопоставленияСтроки <> ВариантыРезультатовСопоставления.СтрокаСопоставлена Тогда
						Продолжить;
					КонецЕсли;
					
					// Заполнение строки табличной части
					СтрокаТабличнойЧасти = РеализацияТоваровУслугОбъект.Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура = ВыборкаДанных.Номенклатура;
					
					Если ВыборкаДанных.ХарактеристикиИспользуются Тогда
						СтрокаТабличнойЧасти.Характеристика = ВыборкаДанных.Характеристика;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаДанных.Упаковка)
							И ВыборкаДанных.Упаковка <> ВыборкаДанных.НоменклатураЕдиницаИзмерения Тогда
						Если ЗначенияФункциональныхОпций.ИспользоватьУпаковкиНоменклатуры Тогда
							СтрокаТабличнойЧасти.Упаковка = ВыборкаДанных.Упаковка;
							КоличествоУпаковок            = ВыборкаДанных.Количество;
							Количество                    = Окр(КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
																3, РежимОкругления.Окр15как20);
						Иначе
							СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
							КоличествоУпаковок            = Окр(ВыборкаДанных.Количество * ВыборкаДанных.УпаковкаКоэффициент, 
																3, РежимОкругления.Окр15как20);
							Количество                    = КоличествоУпаковок;
						КонецЕсли;
					Иначе
						СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
						КоличествоУпаковок            = ВыборкаДанных.Количество;
						Количество                    = КоличествоУпаковок;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.КоличествоУпаковок = КоличествоУпаковок;
					СтрокаТабличнойЧасти.Количество         = Количество;
					СтрокаТабличнойЧасти.Цена               = ВыборкаДанных.Цена;
					СтрокаТабличнойЧасти.Сумма              = ВыборкаДанных.Сумма;
					СтрокаТабличнойЧасти.СуммаСНДС          = ВыборкаДанных.Сумма;
					СтрокаТабличнойЧасти.СуммаРучнойСкидки  = ВыборкаДанных.СуммаСкидки;
					
					Если ЕстьСкладВВыборке Тогда
						СтрокаТабличнойЧасти.Склад = ВыборкаДанных.Склад;
					Иначе
						СтрокаТабличнойЧасти.Склад = РеализацияТоваровУслугОбъект.Склад;
					КонецЕсли;
					
					Если ЕстьЗаказВВыборке Тогда
						СтрокаТабличнойЧасти.ЗаказКлиента = ВыборкаДанных.ЗаказКлиентаСсылка;
					КонецЕсли;
				КонецЦикла;
				
				Если РеализацияТоваровУслугОбъект <> Неопределено Тогда
					Если РеализацияТоваровУслугОбъект.Товары.Количество() > 0 Тогда
						// Постобработка табличной части
						Если Не ЗначениеЗаполнено(ЗаказКлиентаСсылка)
								И Не РеализацияТоваровУслугОбработатьТЧ(РеализацияТоваровУслугОбъект, 
										Параметры.ПараметрыОбработкиРеализация, 
										Параметры.СобытиеЖурналаРегистрации) Тогда
							РеализацияТоваровУслугСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						// Запись и проведение документа
						НеПроводитьДокумент    = ЕстьЗаказВВыборке И ЗначениеЗаполнено(ВыборкаДатаДоставки.ЗаказКлиентаСсылка);
						НеПроведенныеПоЗаказам = НеПроведенныеПоЗаказам Или НеПроводитьДокумент;
						
						РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(РеализацияТоваровУслугОбъект, 
							Не НеПроводитьДокумент, Параметры.СобытиеЖурналаРегистрации);
						РеализацияТоваровУслугСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
							РеализацияТоваровУслугСостояние, 
							ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
							
						Если РеализацияТоваровУслугСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
							РеализацияТоваровУслугОбъект.Разблокировать();
						КонецЕсли;
						
						Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
						КонецЕсли;
					
					ИначеЕсли Не РеализацияТоваровУслугОбъект.ЭтоНовый() Тогда
						// Запись и пометка на удаление документа
						РеализацияТоваровУслугОбъект.ПометкаУдаления = Истина;
						
						РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(РеализацияТоваровУслугОбъект, 
							Ложь, Параметры.СобытиеЖурналаРегистрации);
						РеализацияТоваровУслугСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
							РеализацияТоваровУслугСостояние, 
							ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
							
						РеализацияТоваровУслугОбъект.Разблокировать();
						
						Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
						КонецЕсли;
					КонецЕсли;
					
					РеализацияТоваровУслугСумма = РеализацияТоваровУслугОбъект.СуммаДокумента;
					
					Если Не ЗначениеЗаполнено(РеализацияТоваровУслугСсылка) Тогда
						РеализацияТоваровУслугСсылка = РеализацияТоваровУслугОбъект.Ссылка;
					КонецЕсли;
					
					СозданныеРеализации.Вставить(ВыборкаНомерОтправления.НомерОтправления, РеализацияТоваровУслугСсылка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеализацияТоваровУслугСсылка) 
						И Результат.Ссылки.Найти(РеализацияТоваровУслугСсылка) = Неопределено Тогда
					Результат.Ссылки.Добавить(РеализацияТоваровУслугСсылка);
					Результат.СостоянияСсылок.Вставить(РеализацияТоваровУслугСсылка, РеализацияТоваровУслугСостояние);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеализацияТоваровУслугСсылка) Тогда
					// Доставленные товары
					Если ВыполнитьКорректировкуПоСумме
							И ВыборкаДатаДоставки.Сумма <> РеализацияТоваровУслугСумма
							И ДатаПереходаПраваСобственности = Дата(1, 1, 1) Тогда
						ДатаПереходаПраваСобственности = КонецДня(ВыборкаДанных.ДатаПередачиВДоставку);
					КонецЕсли;
					
					ВыборкаДанных.Сбросить();
					Пока ВыборкаДанных.Следующий() Цикл
						Если ВыборкаДанных.ТипОперации <> 1 
								Или Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
							Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияТоваровУслугСсылка, "ДатаПереходаПраваСобственности") <> ДатаПереходаПраваСобственности Тогда
								РеализацияТоваровУслугОбъект = РеализацияТоваровУслугСсылка.ПолучитьОбъект();
								
								ТекстОшибки = ЗаблокироватьДокумент(РеализацияТоваровУслугОбъект, Параметры.СобытиеЖурналаРегистрации);
								
								Если Не ПустаяСтрока(ТекстОшибки) Тогда
									Если Ошибка.Детализация = Неопределено Тогда
										Ошибка.Детализация = Новый Массив;
									КонецЕсли;
									Ошибка.Детализация.Добавить(ТекстОшибки);
									
									Если Результат.Ссылки.Найти(РеализацияТоваровУслугСсылка) = Неопределено Тогда
										Результат.Ссылки.Добавить(РеализацияТоваровУслугСсылка);
										Результат.СостоянияСсылок.Вставить(РеализацияТоваровУслугСсылка, 
											ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
									КонецЕсли;
									
								Иначе
									РеализацияТоваровУслугОбъект.Статус                         = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
									РеализацияТоваровУслугОбъект.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
									
									РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(РеализацияТоваровУслугОбъект, 
										Истина, Параметры.СобытиеЖурналаРегистрации);
									РеализацияТоваровУслугСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
										ДоступныеСостоянияДокументов.СостояниеОбновлен, 
										РеализацияТоваровУслугСостояние);
										
									Если Результат.Ссылки.Найти(РеализацияТоваровУслугОбъект.Ссылка) = Неопределено Тогда
										Результат.Ссылки.Добавить(РеализацияТоваровУслугОбъект.Ссылка);
									КонецЕсли;
									Результат.СостоянияСсылок.Вставить(РеализацияТоваровУслугСсылка, РеализацияТоваровУслугСостояние);
										
									РеализацияТоваровУслугОбъект.Разблокировать();
									
									Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
										Если Ошибка.Детализация = Неопределено Тогда
											Ошибка.Детализация = Новый Массив;
										КонецЕсли;
										Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					// Корректировка по стоимости
					Если ВыполнитьКорректировкуПоСумме 
							И СозданныеКорректировки.Получить(ВыборкаНомерОтправления.НомерОтправления) = Неопределено Тогда
						КорректировкаРеализацииОбъект    = Неопределено;
						КорректировкаРеализацииСсылка    = Неопределено;
						КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
						
						Если ВыборкаДатаДоставки.Сумма <> РеализацияТоваровУслугСумма Тогда
							Если ЗначениеЗаполнено(ВыборкаНомерОтправления.КорректировкаРеализацииСсылка)
									И Параметры.ПерезаписатьДокументы
									И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНомерОтправления.КорректировкаРеализацииСсылка, "Проведен") Тогда
								КорректировкаРеализацииСсылка    = ВыборкаНомерОтправления.КорректировкаРеализацииСсылка;
								КорректировкаРеализацииОбъект    = КорректировкаРеализацииСсылка.ПолучитьОбъект();
								КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
								
								ТекстОшибки = ЗаблокироватьДокумент(КорректировкаРеализацииОбъект, Параметры.СобытиеЖурналаРегистрации);
								
								Если Не ПустаяСтрока(ТекстОшибки) Тогда
									Если Ошибка.Детализация = Неопределено Тогда
										Ошибка.Детализация = Новый Массив;
									КонецЕсли;
									Ошибка.Детализация.Добавить(ТекстОшибки);
									
								Иначе
									РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
										Ложь, Параметры.СобытиеЖурналаРегистрации);
									КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
										КорректировкаРеализацииСостояние, 
										ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
										
									КорректировкаРеализацииОбъект.Разблокировать();
									
									Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
										Если Ошибка.Детализация = Неопределено Тогда
											Ошибка.Детализация = Новый Массив;
										КонецЕсли;
										Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(КорректировкаРеализацииСсылка) 
										И Результат.Ссылки.Найти(КорректировкаРеализацииСсылка) = Неопределено Тогда
									Результат.Ссылки.Добавить(КорректировкаРеализацииСсылка);
									Результат.СостоянияСсылок.Вставить(КорректировкаРеализацииСсылка, КорректировкаРеализацииСостояние);
								КонецЕсли;
								
								КорректировкаРеализацииОбъект    = Неопределено;
								КорректировкаРеализацииСсылка    = Неопределено;
								КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
							КонецЕсли;
							
							// Товары, переданные в доставку
							ТолькоТоварыПереданные = Неопределено;
							
							ВыборкаДанных.Сбросить();
							Пока ВыборкаДанных.Следующий() Цикл
								Если ТолькоТоварыПереданные = Неопределено Тогда
									ТолькоТоварыПереданные = (ВыборкаДанных.ТипОперации = 1);
								ИначеЕсли ТолькоТоварыПереданные И ВыборкаДанных.ТипОперации <> 1 Тогда
									Прервать;
								КонецЕсли;
								
								Если Не ЗначенияФункциональныхОпций.ИспользоватьКорректировкиРеализаций Тогда
									ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Корректировка стоимости по заказу (отправлению) №%1 от %2 не оформлен.'"),
										ВыборкаДанных.НомерОтправления,
										Формат(ВыборкаДанных.ДатаОтправления, "ДЛФ=D;"));
										
									Если Ошибка.Детализация = Неопределено Тогда
										Ошибка.Детализация = Новый Массив;
									КонецЕсли;
									Ошибка.Детализация.Добавить(ТекстОшибки + " " + НСтр("ru = 'Подробности см. в журнале регистрации.'"));
									
									ТекстОшибки = ТекстОшибки + Символы.ПС
										+ НСтр("ru = 'Для отражения данных о корректировке стоимости товаров по схеме ""Реализация с отложенным переходом права собственности"" необходимо включить опцию корректировок реализаций в настройках раздела ""НСИ и администрирование"" - ""Продажи"" - ""Оптовые продажи"".'");
										
									ЗаписьЖурналаРегистрации(Параметры.СобытиеЖурналаРегистрации, 
										УровеньЖурналаРегистрации.Предупреждение,
										,
										,
										ТекстОшибки);
									Прервать;
								КонецЕсли;
								
								Если КорректировкаРеализацииОбъект = Неопределено Тогда
									КорректировкаРеализацииСсылка = ВыборкаДанных.КорректировкаРеализацииПоСумме;
									
									Если ЗначениеЗаполнено(КорректировкаРеализацииСсылка) Тогда
										// Существующий документ
										КорректировкаРеализацииОбъект    = КорректировкаРеализацииСсылка.ПолучитьОбъект();
										КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
										
										ТекстОшибки = ЗаблокироватьДокумент(КорректировкаРеализацииОбъект, Параметры.СобытиеЖурналаРегистрации);
										
										Если Не ПустаяСтрока(ТекстОшибки) Тогда
											Если Ошибка.Детализация = Неопределено Тогда
												Ошибка.Детализация = Новый Массив;
											КонецЕсли;
											Ошибка.Детализация.Добавить(ТекстОшибки);
											
											Прервать;
										КонецЕсли;
										
									Иначе
										// Новый документ
										КорректировкаРеализацииОбъект    = Документы.КорректировкаРеализации.СоздатьДокумент();
										КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНовый;
									КонецЕсли;
									
									ДанныеЗаполненияКорректировка.Вставить("Дата",              КонецДня(ДатаПереходаПраваСобственности));
									ДанныеЗаполненияКорректировка.Вставить("ДокументОснование", РеализацияТоваровУслугСсылка);
									ДанныеЗаполненияКорректировка.Вставить("Основание",         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																									НСтр("ru = '%1. Отчет о реализации товаров'"),
																									УчетнаяЗаписьПредставление));
									ДанныеЗаполненияКорректировка.Вставить("ОснованиеНомер",    ВыборкаДанных.НомерОтправления);
									ДанныеЗаполненияКорректировка.Вставить("ОснованиеДата",     ВыборкаДанных.ДатаОтправления);
									ДанныеЗаполненияКорректировка.Вставить("Комментарий",       СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																									НСтр("ru = '%1. Корректировка стоимости по заказу №%2 от %3'"), 
																									УчетнаяЗаписьПредставление,
																									ВыборкаДанных.НомерОтправления,
																									Формат(ВыборкаДанных.ДатаОтправления, "ДЛФ=D;")));
									
									Если КорректировкаРеализацииЗаполнить(КорректировкаРеализацииОбъект, ДанныеЗаполненияКорректировка, 
											ЗначенияФункциональныхОпций, Параметры.СобытиеЖурналаРегистрации) Тогда
										Если КорректировкаРеализацииСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
											КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
										КонецЕсли;
									Иначе
										ЗаполнитьЗначенияСвойств(КорректировкаРеализацииОбъект, ДанныеЗаполненияКорректировка);
										Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(
											КорректировкаРеализацииОбъект.ДокументОснование,
											КорректировкаРеализацииОбъект.Товары,
											КорректировкаРеализацииОбъект.Расхождения,
											КорректировкаРеализацииОбъект.Ссылка);
											
										КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
									КонецЕсли;
									
									Если Не ЗначениеЗаполнено(КорректировкаРеализацииОбъект.Основание) Тогда
										КорректировкаРеализацииОбъект.Основание = ДанныеЗаполненияКорректировка.Основание;
									КонецЕсли;
									КорректировкаРеализацииОбъект.ОснованиеНомер = ДанныеЗаполненияКорректировка.ОснованиеНомер;
									КорректировкаРеализацииОбъект.ОснованиеДата  = ДанныеЗаполненияКорректировка.ОснованиеДата;
									
									КорректировкаРеализацииОбъект.Товары.Очистить();
								КонецЕсли;
								
								Если Не Параметры.ЗагружатьНезаполненныеСтроки
										И ВыборкаДанных.РезультатСопоставленияСтроки <> ВариантыРезультатовСопоставления.СтрокаСопоставлена Тогда
									Продолжить;
								КонецЕсли;
								
								// Заполнение строки табличной части
								СтрокаТабличнойЧасти = КорректировкаРеализацииОбъект.Товары.Добавить();
								СтрокаТабличнойЧасти.Номенклатура = ВыборкаДанных.Номенклатура;
								
								Если ВыборкаДанных.ХарактеристикиИспользуются Тогда
									СтрокаТабличнойЧасти.Характеристика = ВыборкаДанных.Характеристика;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ВыборкаДанных.Упаковка)
										И ВыборкаДанных.Упаковка <> ВыборкаДанных.НоменклатураЕдиницаИзмерения Тогда
									Если ЗначенияФункциональныхОпций.ИспользоватьУпаковкиНоменклатуры Тогда
										СтрокаТабличнойЧасти.Упаковка = ВыборкаДанных.Упаковка;
										КоличествоУпаковок            = ВыборкаДанных.Количество;
										Количество                    = Окр(КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
																			3, РежимОкругления.Окр15как20);
									Иначе
										СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
										КоличествоУпаковок            = Окр(ВыборкаДанных.Количество * ВыборкаДанных.УпаковкаКоэффициент, 
																			3, РежимОкругления.Окр15как20);
										Количество                    = КоличествоУпаковок;
									КонецЕсли;
								Иначе
									СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
									КоличествоУпаковок            = ВыборкаДанных.Количество;
									Количество                    = КоличествоУпаковок;
								КонецЕсли;
								
								СтрокаТабличнойЧасти.КоличествоУпаковок = КоличествоУпаковок;
								СтрокаТабличнойЧасти.Количество         = Количество;
								СтрокаТабличнойЧасти.Цена               = ВыборкаДанных.Цена;
								СтрокаТабличнойЧасти.Сумма              = ВыборкаДанных.Сумма;
								СтрокаТабличнойЧасти.СуммаСНДС          = ВыборкаДанных.Сумма;
								СтрокаТабличнойЧасти.ВариантОтражения   = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализацию;
								
								Если ЕстьСкладВВыборке Тогда
									СтрокаТабличнойЧасти.Склад = ВыборкаДанных.Склад;
								Иначе
									СтрокаТабличнойЧасти.Склад = КорректировкаРеализацииОбъект.Склад;
								КонецЕсли;
								
								Если ЕстьЗаказВВыборке Тогда
									СтрокаТабличнойЧасти.ЗаказКлиента = ВыборкаДанных.ЗаказКлиентаСсылка;
								КонецЕсли;
							КонецЦикла;
							
							Если КорректировкаРеализацииОбъект <> Неопределено Тогда
								// Постобработка табличной части
								СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(КорректировкаРеализацииОбъект);
								Если Параметры.ПараметрыОбработкиКорректировка.ПересчитатьЦенаВключаетНДС Тогда
									СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
								КонецЕсли;
								
								СтруктураДействий = Новый Структура;
								СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																						КорректировкаРеализацииОбъект));
								СтруктураДействий.Вставить("ПересчитатьСумму",     "КоличествоУпаковок");
								СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
								СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
								
								Параметры.ПараметрыОбработкиКорректировка.Вставить("СтруктураДействий", СтруктураДействий);
								
								Если Не КорректировкаРеализацииОбработатьТЧ(КорректировкаРеализацииОбъект, Параметры.ПараметрыОбработкиКорректировка, 
											Параметры.СобытиеЖурналаРегистрации) Тогда
									КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
								КонецЕсли;
								
								Если КорректировкаРеализацииОбъект.Расхождения.Количество() > 0 Тогда
									// Запись и проведение документа
									РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
										Истина, Параметры.СобытиеЖурналаРегистрации);
									КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
										КорректировкаРеализацииСостояние, 
										ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
										
									Если КорректировкаРеализацииСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
										КорректировкаРеализацииОбъект.Разблокировать();
									КонецЕсли;
									
									Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
										Если Ошибка.Детализация = Неопределено Тогда
											Ошибка.Детализация = Новый Массив;
										КонецЕсли;
										Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
									КонецЕсли;
								
								ИначеЕсли Не КорректировкаРеализацииОбъект.ЭтоНовый() Тогда
									// Запись и пометка на удаление документа
									КорректировкаРеализацииОбъект.ПометкаУдаления = Истина;
									
									РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
										Ложь, Параметры.СобытиеЖурналаРегистрации);
									КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
										КорректировкаРеализацииСостояние, 
										ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
										
									КорректировкаРеализацииОбъект.Разблокировать();
									
									Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
										Если Ошибка.Детализация = Неопределено Тогда
											Ошибка.Детализация = Новый Массив;
										КонецЕсли;
										Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
									КонецЕсли;
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(КорректировкаРеализацииСсылка) Тогда
									КорректировкаРеализацииСсылка = КорректировкаРеализацииОбъект.Ссылка;
								КонецЕсли;
								
								СозданныеКорректировки.Вставить(ВыборкаНомерОтправления.НомерОтправления, КорректировкаРеализацииСсылка);
							КонецЕсли;
							
							Если ЗначениеЗаполнено(КорректировкаРеализацииСсылка) 
									И Результат.Ссылки.Найти(КорректировкаРеализацииСсылка) = Неопределено Тогда
								Результат.Ссылки.Добавить(КорректировкаРеализацииСсылка);
								Результат.СостоянияСсылок.Вставить(КорректировкаРеализацииСсылка, КорректировкаРеализацииСостояние);
							КонецЕсли;
						КонецЕсли;
						
						Если КорректировкаРеализацииОбъект = Неопределено
								И ЗначениеЗаполнено(ВыборкаДатаДоставки.КорректировкаРеализацииПоСумме)
								И Параметры.ПерезаписатьДокументы
								И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДатаДоставки.КорректировкаРеализацииПоСумме, "ПометкаУдаления") Тогда
							КорректировкаРеализацииСсылка    = ВыборкаДатаДоставки.КорректировкаРеализацииПоСумме;
							КорректировкаРеализацииОбъект    = КорректировкаРеализацииСсылка.ПолучитьОбъект();
							КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
							
							ТекстОшибки = ЗаблокироватьДокумент(КорректировкаРеализацииОбъект, Параметры.СобытиеЖурналаРегистрации);
							
							Если Не ПустаяСтрока(ТекстОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(ТекстОшибки);
								
							Иначе
								КорректировкаРеализацииОбъект.ПометкаУдаления = Истина;
								
								РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
									Ложь, Параметры.СобытиеЖурналаРегистрации);
								КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
									КорректировкаРеализацииСостояние, 
									ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
									
								КорректировкаРеализацииОбъект.Разблокировать();
								
								Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
									Если Ошибка.Детализация = Неопределено Тогда
										Ошибка.Детализация = Новый Массив;
									КонецЕсли;
									Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(КорректировкаРеализацииСсылка) 
								И Результат.Ссылки.Найти(КорректировкаРеализацииСсылка) = Неопределено Тогда
							Результат.Ссылки.Добавить(КорректировкаРеализацииСсылка);
							Результат.СостоянияСсылок.Вставить(КорректировкаРеализацииСсылка, КорректировкаРеализацииСостояние);
						КонецЕсли;
					КонецЕсли;
					
					// Невыкупы и возврат
					КорректировкаРеализацииОбъект    = Неопределено;
					КорректировкаРеализацииСсылка    = Неопределено;
					КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
					
					ВыборкаДанных.Сбросить();
					Пока ВыборкаДанных.Следующий() Цикл
						Если ВыборкаДанных.ТипОперации = 3
								Или ВыборкаДанных.ТипОперации = 4 Тогда
							Если ЕстьРеализацияДругогоПериода
									И ВыборкаДанных.РеализацияДругогоПериода Тогда
								Если Результат.Служебное.Найти(РеализацияТоваровУслугСсылка) = Неопределено Тогда
									Результат.Служебное.Добавить(РеализацияТоваровУслугСсылка);
								КонецЕсли;
							КонецЕсли;
							
							Если Не ЗначенияФункциональныхОпций.ИспользоватьКорректировкиРеализаций Тогда
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									?(ВыборкаДанных.ТипОперации = 3, 
										НСтр("ru = 'Невыкуп товаров по заказу (отправлению) №%1 от %2 не оформлен.'"), 
										НСтр("ru = 'Возврат товаров по заказу (отправлению) №%1 от %2 не оформлен.'")),
									ВыборкаДанных.НомерОтправления,
									Формат(ВыборкаДанных.ДатаОтправления, "ДЛФ=D;"));
									
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(ТекстОшибки + " " + НСтр("ru = 'Подробности см. в журнале регистрации.'"));
								
								ТекстОшибки = ТекстОшибки + Символы.ПС
									+ НСтр("ru = 'Для отражения данных о невыкупах и возвратах товаров по схеме ""Реализация с отложенным переходом права собственности"" необходимо включить опцию корректировок реализаций в настройках раздела ""НСИ и администрирование"" - ""Продажи"" - ""Оптовые продажи"".'");
									
								ЗаписьЖурналаРегистрации(Параметры.СобытиеЖурналаРегистрации, 
									УровеньЖурналаРегистрации.Предупреждение,
									,
									,
									ТекстОшибки);
								Прервать;
							КонецЕсли;
							
							Если КорректировкаРеализацииОбъект = Неопределено Тогда
								КорректировкаРеализацииСсылка = ВыборкаДанных.КорректировкаРеализацииСсылка;
								
								Если ЗначениеЗаполнено(КорректировкаРеализацииСсылка) Тогда
									// Существующий документ
									Если Не Параметры.ПерезаписатьДокументы Тогда
										Прервать;
									КонецЕсли;
									
									КорректировкаРеализацииОбъект    = КорректировкаРеализацииСсылка.ПолучитьОбъект();
									КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
									
									ТекстОшибки = ЗаблокироватьДокумент(КорректировкаРеализацииОбъект, Параметры.СобытиеЖурналаРегистрации);
									
									Если Не ПустаяСтрока(ТекстОшибки) Тогда
										Если Ошибка.Детализация = Неопределено Тогда
											Ошибка.Детализация = Новый Массив;
										КонецЕсли;
										Ошибка.Детализация.Добавить(ТекстОшибки);
										
										Прервать;
									КонецЕсли;
									
								Иначе
									// Новый документ
									КорректировкаРеализацииОбъект    = Документы.КорректировкаРеализации.СоздатьДокумент();
									КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеНовый;
								КонецЕсли;
								
								ДанныеЗаполненияКорректировка.Вставить("Дата",              КонецДня(Макс(ДатаПереходаПраваСобственности, ВыборкаДанных.ДатаНевыкупаВозврата)));
								ДанныеЗаполненияКорректировка.Вставить("ДокументОснование", РеализацияТоваровУслугСсылка);
								ДанныеЗаполненияКорректировка.Вставить("Основание",         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																								НСтр("ru = '%1. Отчет о реализации товаров'"),
																								УчетнаяЗаписьПредставление));
								ДанныеЗаполненияКорректировка.Вставить("ОснованиеНомер",    ВыборкаДанных.НомерОтправления);
								ДанныеЗаполненияКорректировка.Вставить("ОснованиеДата",     ВыборкаДанных.ДатаОтправления);
								ДанныеЗаполненияКорректировка.Вставить("Комментарий",       СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																								?(ВыборкаДанных.ТипОперации = 3, 
																									НСтр("ru = '%1. Невыкуп товаров по заказу №%2 от %3'"), 
																									НСтр("ru = '%1. Возврат товаров по заказу №%2 от %3'")),
																								УчетнаяЗаписьПредставление,
																								ВыборкаДанных.НомерОтправления,
																								Формат(ВыборкаДанных.ДатаОтправления, "ДЛФ=D;")));
								
								Если КорректировкаРеализацииЗаполнить(КорректировкаРеализацииОбъект, ДанныеЗаполненияКорректировка, 
										ЗначенияФункциональныхОпций, Параметры.СобытиеЖурналаРегистрации) Тогда
									Если КорректировкаРеализацииСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
										КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
									КонецЕсли;
								Иначе
									ЗаполнитьЗначенияСвойств(КорректировкаРеализацииОбъект, ДанныеЗаполненияКорректировка);
									Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(
										КорректировкаРеализацииОбъект.ДокументОснование,
										КорректировкаРеализацииОбъект.Товары,
										КорректировкаРеализацииОбъект.Расхождения,
										КорректировкаРеализацииОбъект.Ссылка);
										
									КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
								КонецЕсли;
								
								Если Не ЗначениеЗаполнено(КорректировкаРеализацииОбъект.Основание) Тогда
									КорректировкаРеализацииОбъект.Основание = ДанныеЗаполненияКорректировка.Основание;
								КонецЕсли;
								КорректировкаРеализацииОбъект.ОснованиеНомер = ДанныеЗаполненияКорректировка.ОснованиеНомер;
								КорректировкаРеализацииОбъект.ОснованиеДата  = ДанныеЗаполненияКорректировка.ОснованиеДата;
							КонецЕсли;
							
							Если Не Параметры.ЗагружатьНезаполненныеСтроки
									И ВыборкаДанных.РезультатСопоставленияСтроки <> ВариантыРезультатовСопоставления.СтрокаСопоставлена Тогда
								Продолжить;
							КонецЕсли;
							
							// Заполнение строки табличной части
							Номенклатура = ВыборкаДанных.Номенклатура;
							
							Если ВыборкаДанных.ХарактеристикиИспользуются Тогда
								Характеристика = ВыборкаДанных.Характеристика;
							Иначе
								Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ВыборкаДанных.Упаковка)
									И ВыборкаДанных.Упаковка <> ВыборкаДанных.НоменклатураЕдиницаИзмерения Тогда
								Если ЗначенияФункциональныхОпций.ИспользоватьУпаковкиНоменклатуры Тогда
									Упаковка           = ВыборкаДанных.Упаковка;
									КоличествоУпаковок = ВыборкаДанных.Количество;
									Количество         = Окр(КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
															3, РежимОкругления.Окр15как20);
								Иначе
									Упаковка           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
									КоличествоУпаковок = Окр(ВыборкаДанных.Количество * ВыборкаДанных.УпаковкаКоэффициент, 
															3, РежимОкругления.Окр15как20);
									Количество         = КоличествоУпаковок;
								КонецЕсли;
							Иначе
								Упаковка           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
								КоличествоУпаковок = ВыборкаДанных.Количество;
								Количество         = КоличествоУпаковок;
							КонецЕсли;
							
							Отбор = Новый Структура;
							Отбор.Вставить("Номенклатура",   Номенклатура);
							Отбор.Вставить("Характеристика", Характеристика);
							Отбор.Вставить("Упаковка",       Упаковка);
							
							НайденныеСтроки = КорректировкаРеализацииОбъект.Товары.НайтиСтроки(Отбор);
							Найдено         = Ложь;
							
							Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
								Если Количество > 0
										И СтрокаТабличнойЧасти.Количество > 0 
										И Окр(ВыборкаДанных.Сумма / Количество, 2, РежимОкругления.Окр15как20) = Окр(СтрокаТабличнойЧасти.СуммаСНДС / СтрокаТабличнойЧасти.Количество, 2, РежимОкругления.Окр15как20) Тогда
									Найдено                                 = Истина;
									ДляСписанияКоличество                   = Мин(Количество, СтрокаТабличнойЧасти.Количество);
									Количество                              = Количество - ДляСписанияКоличество;
									СтрокаТабличнойЧасти.Количество         = СтрокаТабличнойЧасти.Количество - ДляСписанияКоличество;
									ДляСписанияКоличествоУпаковок           = Мин(КоличествоУпаковок, СтрокаТабличнойЧасти.КоличествоУпаковок);
									КоличествоУпаковок                      = КоличествоУпаковок - ДляСписанияКоличествоУпаковок;
									СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок - ДляСписанияКоличествоУпаковок;
									
									Если СтрокаТабличнойЧасти.Количество = 0 Тогда
										КорректировкаРеализацииОбъект.Товары.Удалить(СтрокаТабличнойЧасти);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							Если Не Найдено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если КорректировкаРеализацииОбъект <> Неопределено Тогда
						// Постобработка табличной части
						Параметры.ПараметрыОбработкиКорректировка.Вставить("СтруктураДействий", Неопределено);
						
						Если Не КорректировкаРеализацииОбработатьТЧ(КорректировкаРеализацииОбъект, Параметры.ПараметрыОбработкиКорректировка, 
									Параметры.СобытиеЖурналаРегистрации) Тогда
							КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						Если КорректировкаРеализацииОбъект.Расхождения.Количество() > 0 Тогда
							// Запись и проведение документа
							РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
								Истина, Параметры.СобытиеЖурналаРегистрации);
							КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
								КорректировкаРеализацииСостояние, 
								ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
								
							Если КорректировкаРеализацииСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
								КорректировкаРеализацииОбъект.Разблокировать();
							КонецЕсли;
							
							Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
							КонецЕсли;
						
						ИначеЕсли Не КорректировкаРеализацииОбъект.ЭтоНовый() Тогда
							// Запись и пометка на удаление документа
							КорректировкаРеализацииОбъект.ПометкаУдаления = Истина;
							
							РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
								Ложь, Параметры.СобытиеЖурналаРегистрации);
							КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
								КорректировкаРеализацииСостояние, 
								ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
								
							КорректировкаРеализацииОбъект.Разблокировать();
							
							Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
							КонецЕсли;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(КорректировкаРеализацииСсылка) Тогда
							КорректировкаРеализацииСсылка = КорректировкаРеализацииОбъект.Ссылка;
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(ВыборкаДатаДоставки.КорректировкаРеализацииСсылка)
								И Параметры.ПерезаписатьДокументы
								И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДатаДоставки.КорректировкаРеализацииСсылка, "ПометкаУдаления") Тогда
						КорректировкаРеализацииСсылка    = ВыборкаДатаДоставки.КорректировкаРеализацииСсылка;
						КорректировкаРеализацииОбъект    = КорректировкаРеализацииСсылка.ПолучитьОбъект();
						КорректировкаРеализацииСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
						
						ТекстОшибки = ЗаблокироватьДокумент(КорректировкаРеализацииОбъект, Параметры.СобытиеЖурналаРегистрации);
						
						Если Не ПустаяСтрока(ТекстОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(ТекстОшибки);
							
						Иначе
							КорректировкаРеализацииОбъект.ПометкаУдаления = Истина;
							
							РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(КорректировкаРеализацииОбъект, 
								Ложь, Параметры.СобытиеЖурналаРегистрации);
							КорректировкаРеализацииСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
								КорректировкаРеализацииСостояние, 
								ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
								
							КорректировкаРеализацииОбъект.Разблокировать();
							
							Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
								
							Иначе
								КорректировкаРеализацииСсылка = КорректировкаРеализацииОбъект.Ссылка;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(КорректировкаРеализацииСсылка) 
							И Результат.Ссылки.Найти(КорректировкаРеализацииСсылка) = Неопределено Тогда
						Результат.Ссылки.Добавить(КорректировкаРеализацииСсылка);
						Результат.СостоянияСсылок.Вставить(КорректировкаРеализацииСсылка, КорректировкаРеализацииСостояние);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
	Если НеПроведенныеПоЗаказам Тогда
		ТекстОшибки = НСтр("ru = 'Документы реализации, созданные при загрузке отчета по оформленным ранее заказам, необходимо проверить по составу и стоимости, а затем провести их.'");
			
		Если Ошибка.Детализация = Неопределено Тогда
			Ошибка.Детализация = Новый Массив;
		КонецЕсли;
		Ошибка.Детализация.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Создает документы взаимозачета по продажам с отложенным переходом права собственности.
//
// Параметры:
//   Результат          - См. РезультатЗаписиЗагружаемыхДанных.
//   ТаблицаДанных      - ТаблицаЗначений - подготовленная таблица сопоставленных данных для загрузки.
//   Параметры          - Структура - параметры заполнения документов:
//     * ВидТорговойПлощадки       - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки;
//     * УчетнаяЗапись             - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки;
//     * ВалютаУчета               - СправочникСсылка.Валюты, Неопределено - валюта учета учетной записи;
//     * Организация               - СправочникСсылка.Организации - организация взаимозачета;
//     * Партнер                   - СправочникСсылка.Партнеры - партнер взаимозачета;
//     * Контрагент                - СправочникСсылка.Контрагенты - контрагент взаимозачета;
//     * Соглашение                - СправочникСсылка.СоглашенияСКлиентами - соглашение взаимозачета;
//     * Договор                   - СправочникСсылка.ДоговорыКонтрагентов - договор взаимозачета;
//     * КодОшибки                 - Строка - код ошибки для результат выполнения;
//     * СобытиеЖурналаРегистрации - Строка - наименование события для записей в журнале регистрации;
//     * ПерезаписатьДокументы     - Булево - перезаписывать ли существующие документы;
//     * ОчиститьТабличныеЧасти    - Булево - очищать табличные части документов перед обработкой;
//     * ТекстЗапроса              - Строка - текст запроса для отражения взаимозачета по продажам;
//     * ИсключаемыеОбъекты        - Массив Из ДокументСсылка.РеализацияТоваровУслуг - исключаемые из обработки документы.
//   ПараметрыПрогресса - См. ПараметрыПрогресса.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ЗаписатьВзаимозачетыЗадолженности(Результат, Параметры, ПараметрыПрогресса = Неопределено) Экспорт
	
	Ошибка = НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Результат.Ссылки.Количество() = 0 Тогда
		Возврат Ошибка;
	КонецЕсли;
	
	ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(Параметры.Соглашение);
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсамиСервер.ЗаписатьВзаимозачетыЗадолженности");
	
	Если Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Яндекс Маркет)'");
	ИначеЕсли Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Озон)'");
	Иначе
		УчетнаяЗаписьПредставление = НСтр("ru = '(Не определен)'");
	КонецЕсли;
	
	УчетнаяЗаписьПредставление     = УчетнаяЗаписьПредставление + " " + СокрЛП(Параметры.УчетнаяЗапись);
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Параметры.Организация);
	ДоступныеСостоянияДокументов   = ДоступныеСостоянияДокументов();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидОперации",  Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами);
	ДанныеЗаполнения.Вставить("Организация",  Параметры.Организация);
	ДанныеЗаполнения.Вставить("ТипДебитора",  Перечисления.ТипыУчастниковВзаимозачета.Клиент);
	ДанныеЗаполнения.Вставить("ТипКредитора", Перечисления.ТипыУчастниковВзаимозачета.Клиент);
	ДанныеЗаполнения.Вставить("Валюта",       ?(ЗначениеЗаполнено(Параметры.ВалютаУчета), 
													Параметры.ВалютаУчета, 
													ВалютаРегламентированногоУчета));
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ТипРасчетов",        Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ПараметрыОбъекта.Вставить("Организация",        Параметры.Организация);
	ПараметрыОбъекта.Вставить("Партнер",            Параметры.Партнер);
	ПараметрыОбъекта.Вставить("Контрагент",         Параметры.Контрагент);
	ПараметрыОбъекта.Вставить("Договор",            Параметры.Договор);
	ПараметрыОбъекта.Вставить("Объект",             Параметры.Договор);
	ПараметрыОбъекта.Вставить("ТипОбъектаРасчетов", Перечисления.ТипыОбъектовРасчетов.Договор);
	
	ОбъектРасчетов = ОпределитьОбъектРасчетов(ПараметрыОбъекта);

	Запрос = Новый Запрос;
	Запрос.Текст = Параметры.ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ЗагруженныеОбъекты",                Результат.Ссылки);
	Запрос.УстановитьПараметр("ИсключаемыеОбъекты",                Параметры.ИсключаемыеОбъекты);
	Запрос.УстановитьПараметр("Организация",                       Параметры.Организация);
	Запрос.УстановитьПараметр("ВидОперации",                       Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами);
	Запрос.УстановитьПараметр("Контрагент",                        Параметры.Контрагент);
	Запрос.УстановитьПараметр("ТипРасчетов",                       Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	Запрос.УстановитьПараметр("КомментарийНевыкупТоваров",         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = '%1. Невыкуп товаров'"),
																		УчетнаяЗаписьПредставление) + "%");
	Запрос.УстановитьПараметр("КомментарийВозвратТоваров",         СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = '%1. Возврат товаров'"),
																		УчетнаяЗаписьПредставление) + "%");
	Запрос.УстановитьПараметр("КомментарийКорректировка",          СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = '%1. Корректировка стоимости'"),
																		УчетнаяЗаписьПредставление) + "%");
	Запрос.УстановитьПараметр("КомментарийОформлениеВзаимозачета", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = '%1. Оформление взаимозачета'"),
																		УчетнаяЗаписьПредставление) + "%");
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Результат.Ссылки.Количество() / 10);
		
	ВыборкаДатаДокумента = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсегоСтрок           = ВыборкаДатаДокумента.Количество();
	НомерТекущейСтроки   = 1;
	ПроцентВыполнения    = 0;
	
	Пока ВыборкаДатаДокумента.Следующий() Цикл
		Если ПараметрыПрогресса <> Неопределено Тогда
			УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);
		КонецЕсли;
		
		ВыборкаКонтрагент = ВыборкаДатаДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаЭтоВозврат = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЭтоВозврат.Следующий() Цикл
				ВзаимозачетЗадолженностиОбъект    = Неопределено;
				ВзаимозачетЗадолженностиСсылка    = Неопределено;
				ВзаимозачетЗадолженностиСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
				
				ВыборкаДанных = ВыборкаЭтоВозврат.Выбрать();
				Пока ВыборкаДанных.Следующий() Цикл
					Если ВзаимозачетЗадолженностиОбъект = Неопределено Тогда
						ВзаимозачетЗадолженностиСсылка = ВыборкаДанных.ВзаимозачетЗадолженностиСсылка;
						
						Если ЗначениеЗаполнено(ВзаимозачетЗадолженностиСсылка) Тогда
							// Существующий документ
							Если Не Параметры.ПерезаписатьДокументы Тогда
								Прервать;
							КонецЕсли;
							
							ВзаимозачетЗадолженностиОбъект    = ВзаимозачетЗадолженностиСсылка.ПолучитьОбъект();
							ВзаимозачетЗадолженностиСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
							
							ТекстОшибки = ЗаблокироватьДокумент(ВзаимозачетЗадолженностиОбъект, Параметры.СобытиеЖурналаРегистрации);
							
							Если Не ПустаяСтрока(ТекстОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(ТекстОшибки);
								
								Прервать;
							КонецЕсли;
							
						Иначе
							// Новый документ
							ВзаимозачетЗадолженностиОбъект    = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
							ВзаимозачетЗадолженностиСостояние = ДоступныеСостоянияДокументов.СостояниеНовый;
						КонецЕсли;
						
						ДанныеЗаполнения.Вставить("Дата",               КонецДня(ВыборкаДанных.ДатаДокумента));
						ДанныеЗаполнения.Вставить("КонтрагентДебитор",  ?(ВыборкаДанных.ЭтоВозврат, Параметры.Контрагент, ВыборкаДанных.Контрагент));
						ДанныеЗаполнения.Вставить("КонтрагентКредитор", ?(ВыборкаДанных.ЭтоВозврат, ВыборкаДанных.Контрагент, Параметры.Контрагент));
						ДанныеЗаполнения.Вставить("Комментарий",        СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			НСтр("ru = '%1. Оформление взаимозачета'") + " " 
																			+ ?(ВыборкаДанных.ЭтоВозврат, 
																				НСтр("ru = '(невыкуп, возврат товаров)'"), 
																				НСтр("ru = '(доставленные товары)'")),
																			УчетнаяЗаписьПредставление));
						
						Если ВзаимозачетЗадолженностиЗаполнить(ВзаимозачетЗадолженностиОбъект, ДанныеЗаполнения, 
								ЗначенияФункциональныхОпций, Параметры.СобытиеЖурналаРегистрации) Тогда
							Если ВзаимозачетЗадолженностиСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
								ВзаимозачетЗадолженностиСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
							КонецЕсли;
						Иначе
							ЗаполнитьЗначенияСвойств(ВзаимозачетЗадолженностиОбъект, ДанныеЗаполнения);
							ВзаимозачетЗадолженностиСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						ВзаимозачетЗадолженностиОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами;
						
						Если Параметры.ОчиститьТабличныеЧасти Тогда
							ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Очистить();
							ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Очистить();
						КонецЕсли;
					КонецЕсли;
					
					// Заполнение строки табличной части 
					Если ВыборкаДанных.ЭтоВозврат Тогда
						СтрокаТабличнойЧасти = ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Добавить();
					Иначе
						СтрокаТабличнойЧасти = ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Добавить();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаДанных);
					
					Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
						СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
					КонецЕсли;
				КонецЦикла;
				
				Если ВзаимозачетЗадолженностиОбъект <> Неопределено Тогда
					Если ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Количество() > 0 
							Или ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Количество() > 0 Тогда
						Если ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Количество() > 0 Тогда
							СтрокаТабличнойЧасти = ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Добавить();
							Сумма                = ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Итог("Сумма");
						Иначе
							СтрокаТабличнойЧасти = ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Добавить();
							Сумма                = ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Итог("Сумма");
						КонецЕсли;
						
						СтрокаТабличнойЧасти.ТипРасчетов         = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
						СтрокаТабличнойЧасти.Организация         = Параметры.Организация;
						СтрокаТабличнойЧасти.Партнер             = Параметры.Партнер;
						СтрокаТабличнойЧасти.Сумма               = Сумма;
						СтрокаТабличнойЧасти.СуммаВзаиморасчетов = Сумма;
						СтрокаТабличнойЧасти.ОбъектРасчетов      = ОбъектРасчетов;
						
						Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
							СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "ВалютаВзаиморасчетов");
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
							СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
						КонецЕсли;
						
						// Постобработка табличной части
						Если Не ВзаимозачетЗадолженностиОбработатьТЧ(ВзаимозачетЗадолженностиОбъект) Тогда
							ВзаимозачетЗадолженностиСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						// Запись и проведение документа
						РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ВзаимозачетЗадолженностиОбъект, 
							Истина, Параметры.СобытиеЖурналаРегистрации);
						ВзаимозачетЗадолженностиСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
							ВзаимозачетЗадолженностиСостояние, 
							ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
							
						Если ВзаимозачетЗадолженностиСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
							ВзаимозачетЗадолженностиОбъект.Разблокировать();
						КонецЕсли;
						
						Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
						КонецЕсли;
					
					ИначеЕсли Не ВзаимозачетЗадолженностиОбъект.ЭтоНовый()
								И Параметры.ПерезаписатьДокументы Тогда
						// Запись и пометка на удаление документа
						ВзаимозачетЗадолженностиОбъект.ПометкаУдаления = Истина;
						
						РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ВзаимозачетЗадолженностиОбъект, 
							Ложь, Параметры.СобытиеЖурналаРегистрации);
						ВзаимозачетЗадолженностиСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
							ВзаимозачетЗадолженностиСостояние, 
							ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
							
						ВзаимозачетЗадолженностиОбъект.Разблокировать();
						
						Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВзаимозачетЗадолженностиСсылка) Тогда
						ВзаимозачетЗадолженностиСсылка = ВзаимозачетЗадолженностиОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВзаимозачетЗадолженностиСсылка) 
						И Результат.Ссылки.Найти(ВзаимозачетЗадолженностиСсылка) = Неопределено Тогда
					Результат.Ссылки.Добавить(ВзаимозачетЗадолженностиСсылка);
					Результат.СостоянияСсылок.Вставить(ВзаимозачетЗадолженностиСсылка, ВзаимозачетЗадолженностиСостояние);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

// Создает документы продажи через комиссионера (агента).
//
// Параметры:
//   Результат          - См. РезультатЗаписиЗагружаемыхДанных.
//   ТаблицаДанных      - ТаблицаЗначений - подготовленная таблица сопоставленных данных для загрузки.
//   Параметры          - Структура - параметры заполнения документов:
//     * ВидТорговойПлощадки            - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки;
//     * УчетнаяЗапись                  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки;
//     * ВалютаУчета                    - СправочникСсылка.Валюты, Неопределено - валюта учета учетной записи;
//     * Организация                    - СправочникСсылка.Организации - организация в шапке;
//     * Партнер                        - СправочникСсылка.Партнеры - партнер в шапке;
//     * Контрагент                     - СправочникСсылка.Контрагенты - контрагент в шапке;
//     * Соглашение                     - СправочникСсылка.СоглашенияСКлиентами - соглашение в шапке;
//     * Договор                        - СправочникСсылка.ДоговорыКонтрагентов, Неопределено - договор в шапке;
//     * НомерВходящегоДокумента        - Строка - номер входящего документа;
//     * ДатаВходящегоДокумента         - Дата - дата входящего документа;
//     * НачалоПериода                  - Дата, Неопределено - начало периода в загружаемых данных;
//     * КонецПериода                   - Дата, Неопределено - окончание периода в загружаемых данных;
//     * УслугаПродажиЧерезКомиссионера - СправочникСсылка.Номенклатура, Неопределено - услуга по комиссионной продаже товаров;
//     * КодОшибки                      - Строка - код ошибки для результат выполнения;
//     * СобытиеЖурналаРегистрации      - Строка - наименование события для записей в журнале регистрации;
//     * ЗагружатьНезаполненныеСтроки   - Булево - добавлять ли строки с несопоставленными показателями;
//     * ПерезаписатьДокументы          - Булево - перезаписывать ли существующие документы;
//     * ОчиститьТабличныеЧасти         - Булево - очищать табличные части документов перед обработкой;
//     * ПараметрыОбработки             - Структура Из КлючИЗначение, Неопределено - параметры обработки табличных частей документов;
//     * ТекстЗапроса                   - Строка - текст запроса для отражения продаж через комиссионера.
//   ПараметрыПрогресса - См. ПараметрыПрогресса.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ЗаписатьПродажиЧерезКомиссионера(Результат, ТаблицаДанных, Параметры, ПараметрыПрогресса = Неопределено) Экспорт
	
	Ошибка = НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(Параметры.Соглашение);
	
	Если Не ЗначенияФункциональныхОпций.ИспользоватьКомиссиюПриПродажах Тогда
		ТекстОшибки = НСтр("ru = 'Для отражения данных о реализованных товарах по схеме ""Продажи через комиссионера (агента)"" необходимо включить опцию ведения комиссионных продаж в настройках раздела ""НСИ и администрирование"" - ""Продажи"" - ""Оптовые продажи"".'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПродажиЧерезКомиссионера");
	
	Если Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Яндекс Маркет)'");
	ИначеЕсли Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		УчетнаяЗаписьПредставление = НСтр("ru = '(Озон)'");
	Иначе
		УчетнаяЗаписьПредставление = НСтр("ru = '(Не определен)'");
	КонецЕсли;
	
	УчетнаяЗаписьПредставление       = УчетнаяЗаписьПредставление + " " + СокрЛП(Параметры.УчетнаяЗапись);
	ВалютаРегламентированногоУчета   = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Параметры.Организация);
	ДоступныеСостоянияДокументов     = ДоступныеСостоянияДокументов();
	ВариантыРезультатовСопоставления = ИнтеграцияСМаркетплейсамиКлиентСервер.ВариантыРезультатовСопоставления();
	
	РеквизитыШапки = Новый Структура;
	РеквизитыШапки.Вставить("Организация",           Параметры.Организация);
	РеквизитыШапки.Вставить("Партнер",               Параметры.Партнер);
	РеквизитыШапки.Вставить("Контрагент",            Параметры.Контрагент);
	РеквизитыШапки.Вставить("Соглашение",            ?(ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами, 
															Параметры.Соглашение, 
															Справочники.СоглашенияСКлиентами.ПустаяСсылка()));
	РеквизитыШапки.Вставить("Договор",               ?(ЗначенияФункциональныхОпций.ИспользуютсяДоговорыКонтрагентов, 
															Параметры.Договор, 
															Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
	РеквизитыШапки.Вставить("Валюта",                ?(ЗначениеЗаполнено(Параметры.ВалютаУчета), 
															Параметры.ВалютаУчета, 
															ВалютаРегламентированногоУчета));
	РеквизитыШапки.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ЗаполнятьПоДаннымКОформлению", Истина);
	ДанныеЗаполнения.Вставить("РеквизитыШапки",               РеквизитыШапки);
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",      Параметры.НомерВходящегоДокумента);
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента",       Параметры.ДатаВходящегоДокумента);
	
	Если ТаблицаДанных.Колонки.Найти("СуммаВознаграждения") = Неопределено Тогда
		ДанныеЗаполнения.Вставить("СпособРасчетаВознаграждения", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	Иначе
		ДанныеЗаполнения.Вставить("СпособРасчетаВознаграждения", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроизвольнаяСумма);
		ДанныеЗаполнения.Вставить("Услуга",                      Параметры.УслугаПродажиЧерезКомиссионера);
	КонецЕсли;
	
	Если ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами Тогда
		ДанныеЗаполнения.Вставить("ЗаполнятьПоСоглашению", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, РеквизитыШапки, Истина);
	КонецЕсли;
	
	Если Параметры.ПараметрыОбработки = Неопределено Тогда
		Параметры.ПараметрыОбработки = Новый Структура;
		Параметры.ПараметрыОбработки.Вставить("СтруктураДействий",           Неопределено);
		Параметры.ПараметрыОбработки.Вставить("ПересчитатьКоличествоЕдиниц", Ложь);
		Параметры.ПараметрыОбработки.Вставить("ЗаполнитьЦены",               Истина);
		Параметры.ПараметрыОбработки.Вставить("ПересчитатьЦенаВключаетНДС",  Истина);
		Параметры.ПараметрыОбработки.Вставить("КомиссионерВедетУчетПоРНПТ",  ЗначенияФункциональныхОпций.КомиссионерВедетУчетПоРНПТ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Параметры.ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаДанных",           ТаблицаДанных);
	Запрос.УстановитьПараметр("КоличествоСтрок",         ТаблицаДанных.Количество());
	Запрос.УстановитьПараметр("Организация",             Параметры.Организация);
	Запрос.УстановитьПараметр("Партнер",                 Параметры.Партнер);
	Запрос.УстановитьПараметр("Контрагент",              Параметры.Контрагент);
	Запрос.УстановитьПараметр("Соглашение",              РеквизитыШапки.Соглашение);
	Запрос.УстановитьПараметр("Договор",                 РеквизитыШапки.Договор);
	Запрос.УстановитьПараметр("НачалоПериода",           Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",            Параметры.КонецПериода);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", Параметры.НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  Параметры.ДатаВходящегоДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ТаблицаДанных.Количество() / 100);
	
	ВыборкаДатаДокумента = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсегоСтрок           = ВыборкаДатаДокумента.Количество();
	НомерТекущейСтроки   = 1;
	ПроцентВыполнения    = 0;
	
	Если ВсегоСтрок = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для загрузки продаж через комиссионера (агента) с торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Параметры.УчетнаяЗапись);
		
		Ошибка.КодОшибки      = Параметры.КодОшибки;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Пока ВыборкаДатаДокумента.Следующий() Цикл
		Если ПараметрыПрогресса <> Неопределено Тогда
			УстановитьПроцентПрогресса(
				ВсегоСтрок,
				НомерТекущейСтроки,
				ПроцентВыполнения,
				ПараметрыПрогресса);
		КонецЕсли;
		
		ВыборкаНачалоПериода = ВыборкаДатаДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНачалоПериода.Следующий() Цикл
			Если Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
				СуммаПродажиКРаспределению = ВыборкаНачалоПериода.СуммаПродажи;
				БазоваяСуммаВознаграждения = Окр(ВыборкаНачалоПериода.БазоваяКомиссия * 0.01, 2);
				ВознаграждениеПослеСкидок  = ВыборкаНачалоПериода.БазоваяКомиссия - ВыборкаНачалоПериода.БаллыЗаСкидки;
				
				Если ВознаграждениеПослеСкидок < БазоваяСуммаВознаграждения Тогда
					СуммаВознагражденияКРаспределению = БазоваяСуммаВознаграждения;
				Иначе
					СуммаВознагражденияКРаспределению = ВознаграждениеПослеСкидок;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаДоговор = ВыборкаНачалоПериода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				ОтчетКомиссионераОбъект    = Неопределено;
				ОтчетКомиссионераСсылка    = Неопределено;
				ОтчетКомиссионераСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
				ЕстьСчетаФактуры           = Ложь;
				
				ВыборкаДанных = ВыборкаДоговор.Выбрать();
				Пока ВыборкаДанных.Следующий() Цикл
					Если ОтчетКомиссионераОбъект = Неопределено Тогда
						ОтчетКомиссионераСсылка = ВыборкаДанных.ОтчетКомиссионераСсылка;
						
						Если ЗначениеЗаполнено(ОтчетКомиссионераСсылка) Тогда
							// Существующий документ
							Если Не Параметры.ПерезаписатьДокументы Тогда
								Прервать;
							КонецЕсли;
							
							ОтчетКомиссионераОбъект    = ОтчетКомиссионераСсылка.ПолучитьОбъект();
							ОтчетКомиссионераСостояние = ДоступныеСостоянияДокументов.СостояниеНеОбновлен;
							
							ТекстОшибки = ЗаблокироватьДокумент(ОтчетКомиссионераОбъект, Параметры.СобытиеЖурналаРегистрации);
							
							Если Не ПустаяСтрока(ТекстОшибки) Тогда
								Если Ошибка.Детализация = Неопределено Тогда
									Ошибка.Детализация = Новый Массив;
								КонецЕсли;
								Ошибка.Детализация.Добавить(ТекстОшибки);
								
								Прервать;
							КонецЕсли;
							
						Иначе
							// Новый документ
							ОтчетКомиссионераОбъект    = Документы.ОтчетКомиссионера.СоздатьДокумент();
							ОтчетКомиссионераСостояние = ДоступныеСостоянияДокументов.СостояниеНовый;
						КонецЕсли;
						
						ДанныеЗаполнения.Вставить("Дата",          КонецДня(ВыборкаДанных.ДатаДокумента));
						ДанныеЗаполнения.Вставить("НачалоПериода", ВыборкаДанных.НачалоПериода);
						ДанныеЗаполнения.Вставить("КонецПериода",  ВыборкаДанных.КонецПериода);
						ДанныеЗаполнения.Вставить("Комментарий",   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = '%1. Отчет о реализации товаров %2за период с %3 по %4'"),
																		УчетнаяЗаписьПредставление,
																		?(ЗначениеЗаполнено(Параметры.НомерВходящегоДокумента), "№" + Параметры.НомерВходящегоДокумента + " ", ""),
																		Формат(ВыборкаДанных.НачалоПериода, "ДЛФ=D;"),
																		Формат(ВыборкаДанных.КонецПериода, "ДЛФ=D;")));
						Если Параметры.Договор = Неопределено Тогда
							ДанныеЗаполнения.РеквизитыШапки.Вставить("Договор", ВыборкаДанных.Договор);
						КонецЕсли;
						
						Если ОтчетКомиссионераЗаполнить(ОтчетКомиссионераОбъект, ДанныеЗаполнения, 
								ЗначенияФункциональныхОпций, Параметры.СобытиеЖурналаРегистрации) Тогда
							Если ОтчетКомиссионераСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
								ОтчетКомиссионераСостояние = ДоступныеСостоянияДокументов.СостояниеОбновлен;
							КонецЕсли;
						Иначе
							ЗаполнитьЗначенияСвойств(ОтчетКомиссионераОбъект, ДанныеЗаполнения);
							ЗаполнитьЗначенияСвойств(ОтчетКомиссионераОбъект, ДанныеЗаполнения.РеквизитыШапки);
							ОтчетКомиссионераСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						Если Параметры.ОчиститьТабличныеЧасти Тогда
							ОтчетКомиссионераОбъект.Товары.Очистить();
						КонецЕсли;
					КонецЕсли;
					
					Если Не Параметры.ЗагружатьНезаполненныеСтроки
							И ВыборкаДанных.РезультатСопоставленияСтроки <> ВариантыРезультатовСопоставления.СтрокаСопоставлена Тогда
						Продолжить;
					КонецЕсли;
					
					// Заполнение строки табличной части
					СтрокаТабличнойЧасти = ОтчетКомиссионераОбъект.Товары.Добавить();
					СтрокаТабличнойЧасти.Номенклатура = ВыборкаДанных.Номенклатура;
					
					Если ВыборкаДанных.ХарактеристикиИспользуются Тогда
						СтрокаТабличнойЧасти.Характеристика = ВыборкаДанных.Характеристика;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаДанных.Упаковка)
							И ВыборкаДанных.Упаковка <> ВыборкаДанных.НоменклатураЕдиницаИзмерения Тогда
						Если ЗначенияФункциональныхОпций.ИспользоватьУпаковкиНоменклатуры Тогда
							СтрокаТабличнойЧасти.Упаковка = ВыборкаДанных.Упаковка;
							КоличествоУпаковок            = ВыборкаДанных.Количество;
							Количество                    = Окр(КоличествоУпаковок * ВыборкаДанных.УпаковкаКоэффициент, 
																3, РежимОкругления.Окр15как20);
						Иначе
							СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
							КоличествоУпаковок            = Окр(ВыборкаДанных.Количество * ВыборкаДанных.УпаковкаКоэффициент, 
																3, РежимОкругления.Окр15как20);
							Количество                    = КоличествоУпаковок;
						КонецЕсли;
					Иначе
						СтрокаТабличнойЧасти.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
						КоличествоУпаковок            = ВыборкаДанных.Количество;
						Количество                    = КоличествоУпаковок;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Цена                          = ВыборкаДанных.Цена;
					СтрокаТабличнойЧасти.ЦенаПродажи                   = ВыборкаДанных.ЦенаПродажи;
					СтрокаТабличнойЧасти.Количество                    = Количество;
					СтрокаТабличнойЧасти.КоличествоУпаковок            = КоличествоУпаковок;
					СтрокаТабличнойЧасти.КоличествоУпаковокФакт        = КоличествоУпаковок;
					СтрокаТабличнойЧасти.КоличествоУпаковокУчет        = КоличествоУпаковок;
					СтрокаТабличнойЧасти.Сумма                         = ВыборкаДанных.Сумма;
					СтрокаТабличнойЧасти.СуммаСНДС                     = ВыборкаДанных.Сумма;
					СтрокаТабличнойЧасти.СуммаПродажи                  = ВыборкаДанных.СуммаПродажи;
					СтрокаТабличнойЧасти.СуммаВознаграждения           = ВыборкаДанных.СуммаВознаграждения;
					
					СтрокаТабличнойЧасти.Покупатель                    = ВыборкаДанных.Покупатель;
					СтрокаТабличнойЧасти.НомерСчетаФактурыКомиссионера = ВыборкаДанных.НомерСчетаФактуры;
					СтрокаТабличнойЧасти.ДатаСчетаФактурыКомиссионера  = ВыборкаДанных.ДатаСчетаФактуры;
					СтрокаТабличнойЧасти.НомерДокументаОтгрузки        = ВыборкаДанных.НомерОтправления;
					СтрокаТабличнойЧасти.ДатаДокументаОтгрузки         = ВыборкаДанных.ДатаОтправления;
					
					Если Не ЗначенияФункциональныхОпций.КомиссионерВедетУчетПоРНПТ Тогда
						СтрокаТабличнойЧасти.НомерГТД = Неопределено;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаДанных.НомерСчетаФактуры) Тогда
						ЕстьСчетаФактуры = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ОтчетКомиссионераОбъект <> Неопределено Тогда
					Если ОтчетКомиссионераОбъект.Товары.Количество() > 0 Тогда
						// Постобработка табличной части
						Если Не ОтчетКомиссионераОбработатьТЧ(ОтчетКомиссионераОбъект, Параметры.ПараметрыОбработки, 
									Параметры.СобытиеЖурналаРегистрации) Тогда
							ОтчетКомиссионераСостояние = ДоступныеСостоянияДокументов.СостояниеОшибкиЗаполнения;
						КонецЕсли;
						
						// Расчет вознаграждения
						Если Параметры.ВидТорговойПлощадки = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
							Если ОтчетКомиссионераОбъект.НачалоПериода >= Дата(2023, 10, 1) Тогда   
								СуммаВознаграждения = ?(СуммаВознагражденияКРаспределению = 0, 
									0, 
									Окр(ОтчетКомиссионераОбъект.Товары.Итог("СуммаПродажи") * СуммаВознагражденияКРаспределению / СуммаПродажиКРаспределению, 2));
									
								Если ОтчетКомиссионераОбъект.СуммаВознаграждения <> СуммаВознаграждения Тогда
									ОтчетКомиссионераОбъект.СуммаВознаграждения = СуммаВознаграждения;
									КомиссионнаяТорговляСервер.РассчитатьСуммуВознаграждения(ОтчетКомиссионераОбъект, "СуммаПродажи");
								КонецЕсли;
								
								СуммаПродажиКРаспределению        = СуммаПродажиКРаспределению - ОтчетКомиссионераОбъект.Товары.Итог("СуммаПродажи");
								СуммаВознагражденияКРаспределению = СуммаВознагражденияКРаспределению - ОтчетКомиссионераОбъект.СуммаВознаграждения;
								
								Если СуммаПродажиКРаспределению = 0
										И СуммаВознагражденияКРаспределению <> 0 Тогда
									ОтчетКомиссионераОбъект.Товары[0].СуммаВознаграждения = ОтчетКомиссионераОбъект.Товары[0].СуммаВознаграждения 
										+ СуммаВознагражденияКРаспределению;
								КонецЕсли;
							КонецЕсли;
							
							ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ОтчетКомиссионераОбъект.СтавкаНДСВознаграждения);
							
							ОтчетКомиссионераОбъект.СуммаВознаграждения    = ОтчетКомиссионераОбъект.Товары.Итог("СуммаВознаграждения");
							ОтчетКомиссионераОбъект.СуммаНДСВознаграждения = Окр(ОтчетКомиссионераОбъект.СуммаВознаграждения
								* ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
						КонецЕсли;
						
						// Запись и проведение документа
						РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ОтчетКомиссионераОбъект, 
							Истина, Параметры.СобытиеЖурналаРегистрации);
						ОтчетКомиссионераСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
							ОтчетКомиссионераСостояние, 
							ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
							
						Если ОтчетКомиссионераСостояние <> ДоступныеСостоянияДокументов.СостояниеНовый Тогда
							ОтчетКомиссионераОбъект.Разблокировать();
						КонецЕсли;
						
						Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
						КонецЕсли;
						
						Если ЕстьСчетаФактуры Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Отражение продаж юридическим лицам в документе №%1 от %2 необходимо скорректировать вручную.'"),
								ОтчетКомиссионераОбъект.Номер,
								Формат(ОтчетКомиссионераОбъект.Дата, "ДЛФ=D;"));
								
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(ТекстОшибки);
						КонецЕсли;
						
					ИначеЕсли Не ОтчетКомиссионераОбъект.ЭтоНовый() Тогда
						// Запись и пометка на удаление документа
						ОтчетКомиссионераОбъект.ПометкаУдаления = Истина;
						
						РезультатЗаписиДокумента = ЗаписатьПровестиДокумент(ОтчетКомиссионераОбъект, 
							Ложь, Параметры.СобытиеЖурналаРегистрации);
						ОтчетКомиссионераСостояние = ?(РезультатЗаписиДокумента.ЗаписьВыполнена, 
							ОтчетКомиссионераСостояние, 
							ДоступныеСостоянияДокументов.СостояниеНеОбновлен);
							
						ОтчетКомиссионераОбъект.Разблокировать();
						
						Если Не ПустаяСтрока(РезультатЗаписиДокумента.ОписаниеОшибки) Тогда
							Если Ошибка.Детализация = Неопределено Тогда
								Ошибка.Детализация = Новый Массив;
							КонецЕсли;
							Ошибка.Детализация.Добавить(РезультатЗаписиДокумента.ОписаниеОшибки);
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ОтчетКомиссионераСсылка) Тогда
						ОтчетКомиссионераСсылка = ОтчетКомиссионераОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОтчетКомиссионераСсылка) 
						И Результат.Ссылки.Найти(ОтчетКомиссионераСсылка) = Неопределено Тогда
					Результат.Ссылки.Добавить(ОтчетКомиссионераСсылка);
					Результат.СостоянияСсылок.Вставить(ОтчетКомиссионераСсылка, ОтчетКомиссионераСостояние);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗаказов

// Выполняет загрузку заказов (отправлений) с торговой площадки.
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура из КлючИЗначение - параметры задаются в модуле маркетплейса.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ЗагрузитьЗаказыСТорговойПлощадки(УчетнаяЗапись, Параметры) Экспорт
	
	Ошибка = НоваяОшибка();
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		Ошибка = ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьЗаказыСТорговойПлощадки(
			УчетнаяЗапись,
			Параметры);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Обновляет статусы заказов (отправлений) с торговой площадки.
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура из КлючИЗначение - параметры задаются в модуле маркетплейса.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ОбновитьСтатусыЗаказовСТорговойПлощадки(УчетнаяЗапись, Параметры) Экспорт
	
	Ошибка = НоваяОшибка();
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		Ошибка = ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьСтатусыЗаказовТорговойПлощадки(
			УчетнаяЗапись,
			Параметры);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Выполняет подтверждение сборки заказов (отправлений) на торговой площадке.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Заказы            - Массив Из ДокументСсылка.ЗаказКлиента - список обрабатываемых заказов.
//   НомераОтправлений - Строка, Массив Из Строка - номера отправлений, для которых нужно создать экземпляры товаров.
//   ОбновитьСтатусы   - Булево - обновить статусы отправлений перед сборкой.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ПодтвердитьСборкуЗаказовНаТорговойПлощадке(УчетнаяЗапись, Знач Заказы, Знач НомераОтправлений,
			Знач ОбновитьСтатусы = Истина) Экспорт
	
	Если ОбновитьСтатусы Тогда
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("НачалоПериода",       Неопределено);
		ПараметрыФункции.Вставить("ОкончаниеПериода",    Неопределено);
		ПараметрыФункции.Вставить("ИдентификаторЗаказа", Неопределено);
		ПараметрыФункции.Вставить("Заказ",               Заказы);
		
		ОбновитьСтатусыЗаказовСТорговойПлощадки(УчетнаяЗапись, ПараметрыФункции);
	КонецЕсли;
	
	Ошибка      = НоваяОшибка();
	Детализация = Новый Массив;
	Заказы      = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Заказы);
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	ПараметрыЗаполнения = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ПараметрыЗаполненияДанныхПоЭкземплярам();
	ПараметрыЗаполнения.ПроверитьЗаказы          = Истина;
	ПараметрыЗаполнения.ВернутьСведенияПоТоварам = Истина;
	
	РезультатЗаполнения = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаполнитьДанныеПоЭкземплярам(Заказы, ПараметрыЗаполнения);
	
	Для Каждого Заказ Из Заказы Цикл
		РезультатПроверкиЗаказа = РезультатЗаполнения.РезультатПроверкиЗаказов[Заказ];
		
		Индекс = НомераОтправлений.ВГраница();
		Пока Индекс >= 0 Цикл
			НомерОтправления = НомераОтправлений[Индекс];
			
			// Проверить готовность отправления
			Если РезультатПроверкиЗаказа.ОтправленияКПодтверждениюСборки.Найти(НомерОтправления) = Неопределено Тогда
				НомераОтправлений.Удалить(Индекс);
			ИначеЕсли СтрНайти(НомерОтправления, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) = 0 Тогда
				ЕстьНеОтмеченныеПодчиненные = Ложь;
				
				Для Каждого ЭлементКоллекции Из РезультатПроверкиЗаказа.ОтправленияВСборке Цикл
					Если ЭлементКоллекции <> НомерОтправления
							И СтрНайти(ЭлементКоллекции, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0
							И НомераОтправлений.Найти(ЭлементКоллекции) = Неопределено Тогда
						ДанныеОтправления = РезультатПроверкиЗаказа.ДанныеПоНомерамОтправлений.Получить(ЭлементКоллекции);
						Если ДанныеОтправления <> Неопределено 
								И ДанныеОтправления.НомерРодительскогоОтправления = НомерОтправления Тогда
							ЕстьНеОтмеченныеПодчиненные = Истина;
							Детализация.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Для сборки отправления %1 требуется предварительно собрать или отметить для сборки с основным подчиненное отправление %2.'",
									ОбщегоНазначения.КодОсновногоЯзыка()),
								НомерОтправления,
								ЭлементКоллекции));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьНеОтмеченныеПодчиненные Тогда
					НомераОтправлений.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЦикла;
	
	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		// Подтверждение сборки
		Ошибка = ИнтеграцияСМаркетплейсомOzonСервер.ПодтвердитьСборкуЗаказовНаТорговойПлощадке(
			УчетнаяЗапись,
			НомераОтправлений);
	КонецЕсли;
	
	Если Детализация.Количество() > 0 Тогда
		Если ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При сборке заказов по отправлениям для торговой площадки <%1> возникли ошибки.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецЕсли;
		
		Если Ошибка.Детализация = Неопределено Тогда
			Ошибка.Детализация = Новый Массив;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибка.Детализация, Детализация);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Выполняет отмену заказов (отправлений) на торговой площадке.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Заказы            - Массив Из ДокументСсылка.ЗаказКлиента - список обрабатываемых заказов.
//   НомераОтправлений - Строка, Массив Из Строка - номера отправлений, для которых выполняется отмена.
//   ПричинаОтмены     - Структура - причина отмены:
//     * Идентификатор   - Число - идентификатор причины отмены отправления;
//     * Наименование    - Строка - наименование причины отмены;
//     * Ссылка          - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//   ОбновитьСтатусы   - Булево - обновить статусы отправлений перед отменой.
//
// Возвращаемое значение:
//   См. НоваяОшибка.
//
Функция ОтменитьЗаказыНаТорговойПлощадке(УчетнаяЗапись, Знач Заказы, Знач НомераОтправлений, 
			Знач ПричинаОтмены, Знач ОбновитьСтатусы = Истина) Экспорт
	
	Если ОбновитьСтатусы Тогда
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("НачалоПериода",       Неопределено);
		ПараметрыФункции.Вставить("ОкончаниеПериода",    Неопределено);
		ПараметрыФункции.Вставить("ИдентификаторЗаказа", Неопределено);
		ПараметрыФункции.Вставить("Заказ",               Заказы);
		
		ОбновитьСтатусыЗаказовСТорговойПлощадки(УчетнаяЗапись, ПараметрыФункции);
	КонецЕсли;
	
	Ошибка = НоваяОшибка();
	
	ПараметрыЗаполнения = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ПараметрыЗаполненияДанныхПоЭкземплярам();
	ПараметрыЗаполнения.ЗаписатьСведенияОбЭкземплярах  = Ложь;
	ПараметрыЗаполнения.ЗаписатьСведенияОбОтправлениях = Ложь;
	ПараметрыЗаполнения.ВернутьСведенияПоТоварам       = Истина;
	ПараметрыЗаполнения.ПроверитьЗаказы                = Истина;
	
	РезультатЗаполнения = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаполнитьДанныеПоЭкземплярам(Заказы, ПараметрыЗаполнения);
	
	Результат = РегистрыСведений.ЗаказыТорговыхПлощадок.ПроверитьВозможностьОтменыТоваровОтправления(
					Заказы,
					НомераОтправлений,
					РезультатЗаполнения);
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	КодОшибкиПоУмолчанию = "Ошибка_прочие";
	
	Если НомераОтправлений.Количество() > 0 Тогда
		Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
			Ошибка = ИнтеграцияСМаркетплейсомOzonСервер.ОтменитьСборкуЗаказовНаТорговойПлощадке(
				УчетнаяЗапись,
				НомераОтправлений,
				ПричинаОтмены);
				
			КодОшибкиПоУмолчанию = ИнтеграцияСМаркетплейсомOzonСервер.КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат.ИнформацияДляПользователя) Тогда
		Если ПустаяСтрока(Ошибка.КодОшибки) Тогда
			Ошибка.КодОшибки = КодОшибкиПоУмолчанию;
			Ошибка.ОписаниеОшибки = Результат.ИнформацияДляПользователя;
		Иначе
			Ошибка.ОписаниеОшибки = Результат.ИнформацияДляПользователя + Символы.ПС + Ошибка.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Выполняет отмену строк заказа и возвращает результат.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Заказ         - ДокументСсылка.ЗаказКлиента - заказ для отмены строк.
//   ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - 
//                 - Структура - причина отмены строк заказа:
//     * Идентификатор - Число - идентификатор причины отмены отправления;
//     * Наименование  - Строка - наименование причины отмены;
//     * Ссылка        - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//   КлючиЗаписей  - Неопределено - для отмены всех строк заказа;
//                 - Массив из СтрокаГруппировкиДинамическогоСписка - группировка динамического списка;
//                 - Массив из РегистрСведенийКлючЗаписи.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок -
//                                 набор ключей записей, по которым требуется отмена строк заказа.
//   ИмяСобытия    - Строка - имя события журнала регистрации.
//
// Возвращаемое значение:
//   Булево - результат отмены.
//
Функция ОтменитьЗаказ(Заказ, ПричинаОтмены, КлючиЗаписей = Неопределено, ИмяСобытия = "") Экспорт

	ОтменаВыполнена = Ложь;
	
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия = СобытиеЖурналаРегистрации();
	КонецЕсли;
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	
	ОписаниеОшибки = ЗаблокироватьДокумент(ЗаказОбъект, ИмяСобытия);
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат ОтменаВыполнена;
	КонецЕсли;
	
	Товары = ЗаказОбъект.Товары;
	
	ЗаписатьЗаказ         = Ложь;
	ПропущенныеСтроки     = Новый Массив;
	ПересчитываемыеСтроки = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Если КлючиЗаписей = Неопределено Тогда
			Результат = ОтменитьСтрокиЗаказа(Товары, ПричинаОтмены);
			
			ЗаписатьЗаказ = Результат.ЗаписатьЗаказ;
			ПропущенныеСтроки = Результат.ПропущенныеСтроки;
			ПересчитываемыеСтроки = Результат.ПересчитываемыеСтроки;
		Иначе
			// Блокировка изменения сведений по товарам.
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных =
				БлокировкаДанных.Добавить("РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", Заказ);
			БлокировкаДанных.Заблокировать();
			
			Для Каждого КлючЗаписи Из КлючиЗаписей Цикл
				Если ТипЗнч(КлючЗаписи) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
					НаборЗаписей = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Заказ.Установить(Заказ);
					НаборЗаписей.Прочитать();
					
					Для Каждого Запись Из НаборЗаписей Цикл
						Если Запись[КлючЗаписи.ИмяГруппировки] = КлючЗаписи.Ключ Тогда
							Результат = ОтменитьСтрокиЗаказаДляЭкземпляра(Товары, Запись, ПричинаОтмены);
							
							ЗаписатьЗаказ = Макс(ЗаписатьЗаказ, Результат.ЗаписатьЗаказ);
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПропущенныеСтроки,     Результат.ПропущенныеСтроки);
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПересчитываемыеСтроки, Результат.ПересчитываемыеСтроки);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок") Тогда
					Результат = ОтменитьСтрокиЗаказаДляЭкземпляра(Товары, КлючЗаписи, ПричинаОтмены);
					
					ЗаписатьЗаказ = Макс(ЗаписатьЗаказ, Результат.ЗаписатьЗаказ);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПропущенныеСтроки,     Результат.ПропущенныеСтроки);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПересчитываемыеСтроки, Результат.ПересчитываемыеСтроки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию = Ложь;
		
		Если ЗаписатьЗаказ Тогда
			Если ПересчитываемыеСтроки.Количество() > 0 Тогда
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
				
				ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ПересчитываемыеСтроки, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			Результат = ЗаписатьПровестиДокумент(ЗаказОбъект, ЗаказОбъект.Проведен, ИмяСобытия, Ложь);
			Если Результат.ЗаписьВыполнена Тогда
				ЗафиксироватьТранзакцию = Истина;
			Иначе
				ОбщегоНазначения.СообщитьПользователю(Результат.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗафиксироватьТранзакцию Тогда
			ЗафиксироватьТранзакцию();
			ОтменаВыполнена = Истина;
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		
		Если КлючиЗаписей = Неопределено Тогда
			ШаблонСообщения =
				НСтр("ru = 'Не удалось отменить заказ %1 по причине: %2. Повторите действие.'");
		Иначе
			ШаблонСообщения =
				НСтр("ru = 'Не удалось отменить выделенные позиции в заказе %1 по причине: %2. Повторите действие.'");
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Заказ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Если ПропущенныеСтроки.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пропущены отмененные ранее строки заказа: %1.'"),
			СтрСоединить(ПропущенныеСтроки, ", "));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтменаВыполнена;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузкаЗагрузкаДанныхСлужебныеПроцедурыИФункции

// Конструктор определения используемых методов. Заполняется в модуле менеджера объекта метаданных.
// Описание синтаксиса процедур / функций см. в ИспользуемыеМетодыМенеджераОбъектаМетаданных().
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ВыполнитьПроверкуИнформацииПоКолонкам                    - Булево - признак наличия функции.
//            Используется для проверки наличия различий в сохраненных пользователем настройках по колонкам
//            и базовых настройках, заданных на этапе разработки, с целью восстановления стандартных настроек
//            при наличии расхождений.
//              С параметрами:
//                ИнформацияПоКолонкам - см. ИнициализироватьТаблицуИнформацииПоКолонкам.
//                ИмяТабличнойЧасти    - Строка - имя загружаемой табличной части объекта метаданных,
//                                         например: "ДанныеПоставок".
//              С возвращаемым значением:
//                Булево - результат проверки.
//     * УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть        - Булево - признак наличия процедуры.
//            Используется для заполнения основных настроек.
//              С параметрами:
//              Параметры - смотри ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//     * ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных    - Булево - признак наличия процедуры.
//            Используется для добавления условного оформления в форму.
//              С параметрами:
//                Форма             - ФормаКлиентскогоПриложения - форма, для которой необходимо дополнить
//                                      условное оформление.
//                ИмяТабличнойЧасти - Строка - имя загружаемой табличной части объекта метаданных,
//                                      например: "ДанныеПоставок".
//     * НастроитьДинамическийСписокОтображенияРезультатаЗагрузки - Булево - признак наличия процедуры.
//            Используется изменения текста запроса динамического списка и заполнения его свойств и параметров.
//              С параметрами:
//                СвойстваДинамическогоСписка - Структура - см. ОбщегоНазначения.СтруктураСвойствДинамическогоСписка.
//                ИмяТабличнойЧасти - Строка - имя загружаемой табличной части объекта метаданных,
//                                      например: "ДанныеПоставок".
//     * ПолучитьДанныеИнтеграционнымиМетодами                    - Булево - признак наличия функции.
//            Используется для получения данных по API.
//              С параметрами:
//                Параметры                  - см. ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//              С возвращаемым значением:
//                ТаблицаЗначений - таблица результата сопоставления.
//     * СопоставитьЗагружаемыеДанные                             - Булево - признак наличия функции.
//            Используется для сопоставления данных, загружаемых в табличную часть объекта метаданных, с данными в ИБ.
//              С параметрами:
//                ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения
//                                               загруженных сопоставленных данных.
//                ДанныеИзФайла              - ТаблицаЗначений - динамически подготовленная таблица с загруженными данными.
//                Параметры                  - см. ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//              С возвращаемым значением:
//                ТаблицаЗначений - таблица результата сопоставления.
//     * ЗаписатьЗагружаемыеДанные                                - Булево - признак наличия процедуры.
//            Используется для записи загружаемых данных в учетную систему 1С.
//              С параметрами:
//                ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения
//                                               загруженных сопоставленных данных.
//                Параметры                  - Структура - параметры, переданные из формы-источника.
//                СсылкаДляОбновленияДанных  - ДокументСсылка, Неопределено - ссылка для заполнения загружаемыми данными.
//              С возвращаемым значением:
//                Структура - смотри РезультатЗаписиЗагружаемыхДанных.
//     * НаименованиеСохраняемогоФайла                            - Булево - признак наличия функции.
//            Используется для формирования наименования присоединенного файла в зависимости от типа ссылки.
//              С параметрами:
//                СсылкаНаОбъект   - ДокументСсылка - ссылка на объект, для которого нужно получить наименование файла.
//                ДляВыгрузкиВФайл - Булево - признак формирования наименования файла для сохранения
//                                     в файловую систему пользователя.
//              С возвращаемым значением:
//                Строка - наименование файла.
//     * ЗаполнитьШапкуМакета                                     - Булево - признак наличия процедуры.
//            Используется для заполнения шапки выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ЗаполнитьЗаголовокТаблицыМакета                          - Булево - признак наличия процедуры.
//            Используется для заполнения заголовка таблицы выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ПолучитьДанныеСтрокТаблицыМакета                         - Булево - признак наличия функции.
//            Используется для подготовки коллекции данных по строкам таблицы выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ВывестиТаблицуМакета                                     - Булево - признак наличия процедуры.
//            Используется для вывода таблицы макета выгружаемого табличного документа,
//            если подготовки данных таблицы и стандартного вывода не достаточно.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ЗаполнитьПодвалМакета                                    - Булево - признак наличия процедуры.
//            Используется для заполнения подвала выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//
Функция ИспользуемыеМетодыМенеджераОбъектаМетаданных() Экспорт

	ИспользуемыеМетоды = Новый Структура;

	// Основные методы.
	ИспользуемыеМетоды.Вставить("ВыполнитьПроверкуИнформацииПоКолонкам",                    Ложь);
	ИспользуемыеМетоды.Вставить("УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть",        Ложь);
	ИспользуемыеМетоды.Вставить("ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных",    Ложь);
	ИспользуемыеМетоды.Вставить("НастроитьДинамическийСписокОтображенияРезультатаЗагрузки", Ложь);
	ИспользуемыеМетоды.Вставить("ПолучитьДанныеИнтеграционнымиМетодами",                    Ложь);
	ИспользуемыеМетоды.Вставить("СопоставитьЗагружаемыеДанные",                             Ложь);
	ИспользуемыеМетоды.Вставить("ЗаписатьЗагружаемыеДанные",                                Ложь);

	// Выгрузка в файл - см. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
	ИспользуемыеМетоды.Вставить("НаименованиеСохраняемогоФайла",                            Ложь);
	ИспользуемыеМетоды.Вставить("ЗаполнитьШапкуМакета",                                     Ложь);
	ИспользуемыеМетоды.Вставить("ЗаполнитьЗаголовокТаблицыМакета",                          Ложь);
	ИспользуемыеМетоды.Вставить("ПолучитьДанныеСтрокТаблицыМакета",                         Ложь);
	ИспользуемыеМетоды.Вставить("ВывестиТаблицуМакета",                                     Ложь);
	ИспользуемыеМетоды.Вставить("ЗаполнитьПодвалМакета",                                    Ложь);

	Возврат ИспользуемыеМетоды;

КонецФункции

// Возвращает признак использования запрашиваемого метода.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//   ИмяМетода            - Строка - имя проверяемого метода.
//
// Возвращаемое значение:
//   Булево.
//
Функция МетодКонфигурацииИспользуется(ИмяОбъектаМетаданных, ИмяМетода) Экспорт

	МетодИспользуется = Ложь;

	МенеджерОбъекта = МенеджерОбъекта(ИмяОбъектаМетаданных);
	Методы = МенеджерОбъекта.ОпределитьИспользуемыеМетоды();

	Попытка
		МетодИспользуется = Методы[ИмяМетода];
	Исключение
		МетодИспользуется = Ложь;
	КонецПопытки;

	Возврат МетодИспользуется;

КонецФункции

// Конструктор параметров шапки макета.
//
// Возвращаемое значение:
//   Структура:
//     * Параметры - Структура - данные по параметрам, где ключ - имя параметра, значение - значение параметра.
//     * Шаблоны   - Массив Из Структура - данные по каждому шаблону в шапке макета, см. ДанныеШаблона.
//
Функция ПараметрыШапки() Экспорт

	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("Параметры", Новый Структура);
	ПараметрыШапки.Вставить("Шаблоны",   Новый Массив);

	Возврат ПараметрыШапки;

КонецФункции

// Конструктор заполняемых данных шаблона.
//
// Возвращаемое значение:
//   Структура:
//     * Шаблон               - Строка - содержимое ячейки шапки макета.
//     * КлючевыеСловаШаблона - Массив Из Строка - слова, заключенные в эталонном макете объекта метаданных в фигурные 
//                                скобки, например {отчет}. Состав этих слов должен полностью совпадать в загружаемом 
//                                макете с эталонным.
//     * ПараметрыШаблона     - Массив Из Строка - слова, заключенные в эталонном макете объекта метаданных в фигурные 
//                                скобки, например: [НачалоПериода]. Параметры определяются в загружаемом макете в 
//                                порядке расположения между ключевыми словами.
//     * ШиринаОбластиПоиска  - Число - количество ячеек по горизонтали.
//     * ВысотаОбластиПоиска  - Число - количество ячеек по вертикали.
//
Функция ДанныеШаблона()

	ДанныеШаблона = Новый Структура;
	ДанныеШаблона.Вставить("Шаблон",               "");
	ДанныеШаблона.Вставить("КлючевыеСловаШаблона", Новый Массив);
	ДанныеШаблона.Вставить("ПараметрыШаблона",     Новый Массив);
	ДанныеШаблона.Вставить("ШиринаОбластиПоиска",  0); // Сколько колонок нужно читать для шаблона.
	ДанныеШаблона.Вставить("ВысотаОбластиПоиска",  0); // Сколько строк нужно читать для шаблона.

	Возврат ДанныеШаблона;

КонецФункции

// Конструктор структуры параметров для формы Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных.
//
// Возвращаемое значение:
//   Структура - список параметров:
//    * ИмяОбъектаМетаданных - Строка - имя объекта метаданных, из которого берутся данные для выгрузки/загрузки.
//    * ИмяТабличнойЧасти - Строка - имя таблицы-источника колонок из указанного объекта метаданных.
//    * ИмяМакетаСШаблоном - Строка - имя макета-источника данных, ожидаемых при загрузке.
//    * ОбязательныеКолонки - Массив из Строка - имена колонок, заполнение которых проверяется.
//          Строки с незаполненными значениями будут пропущены при записи в ИБ.
//    * ЗаполняемыеПриЗагрузкеКолонки - Соответствие Из КлючИЗначение - ключом является имя колонки, 
//          значением синоним колонки.
//          Добавляются доступные для редактирования пользователем реквизиты из состава объекта метаданных,
//          а также служебные невидимые реквизиты (отсутствующие в реквизитах объекта метаданных),
//          необходимые на этапе сопоставления данных.
//    * ТипыДанныхКолонок - Соответствие из КлючИЗначение - ключом является имя колонки, значением тип значения колонки.
//          Добавляются типы реквизитов для дальнейшей обработки данных.
//          Если для реквизита тип не добавлен, то по умолчанию используется тип Строка.
//    * ОсновныеКолонки - Массив из Строка - имена колонок, которые можно отфильтровать вариантом "Основные".
//    * ПустыеВИтогахКолонки - Массив из Строка - имена колонок для определения строки итогов.
//          Для указанных колонок в строке итогов всегда не заполнены значения.
//    * КомандаИзменитьПоведениеЭлементовФормы - Строка - имя команды изменения поведения элементов формы.
//          Например: КомандаИзменитьПоведениеЭлементовФормы =
//                         "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ИзменитьПоведениеЭлементовФормы".
//    * ПодключаемыеОбработчикиСобытий - Структура из КлючИЗначение - в ключе указывается имя поля и события, 
//          а в значении путь к процедуре/функции, выполняемой на сервере.
//          Доступны события формы Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных:
//                 Подключаемый_ТаблицаСопоставленияДанныхПолеПриИзменении - "ПриИзменении",
//                 Подключаемый_ТаблицаСопоставленияДанныхПолеНачалоВыбора - "ПараметрыНачалаВыбора",
//                 ОбработкаОповещения для имени события "ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере" -
//                        в источнике передается имя метода.
//          Например: ОбработчикиСобытий.Вставить("ИдентификаторПубликацииПриИзменении",
//                    "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
//                  ОбработчикиСобытий.Вставить("СкладПараметрыНачалаВыбора",
//                    "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПараметрыНачалаВыбора");
//                  ОбработчикиСобытий.Вставить("ЗаполнитьСкладыВВыделенныхСтроках",
//                    "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ЗаполнитьСкладыВВыделенныхСтроках"); // Оповещение.
//    * ПодключаемыеКомандыЗаполнения - Структура из КлючИЗначение - в ключе указывается имя подключаемой команды,
//          а в значении структура с ключами с ключами "Представление, Действие, Картинка".
//          В ключе Действие указывается путь к процедуре, выполняемой на клиенте. 
//          Если в ключе Действие ничего не задано, то используется команда формы Подключаемый_ВыполнитьКоманду.
//          Если картинка задана, то она будет отображена для команды.
//          Например: ПодключаемыеКомандыЗаполнения.Вставить("ЗаполнитьСклады",
//                    Новый Структура("Представление, Действие, Картинка", НСтр("ru = 'Заполнить склады'"), ""));.
//    * ДополнительныеПараметры - Структура из КлючИЗначение - произвольный состав дополнительных параметров.
//          Может использоваться в подключаемых алгоритмах.
//    * АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат загрузки.
//    * ВысотаЗаголовкаТаблицыМакетаСШаблоном - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//          Заполняется программно, по умолчанию 1.
//    * ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число -высота заголовка загружаемого макета.
//          Заполняется программно, по умолчанию 1,
//          но может быть задана при заполнении параметров формы в алгоритмах подключения.
//          Например: Параметры.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = 3;
//                  (с учетом строки с нумерацией колонок, которой нет в шапке шаблона).
//     * ЛистыШаблона                             - Неопределено - используется одностраничный шаблон.
//                                                - Структура - описание многостраничного шаблона:
//       ** ИмяЛиста                                 - Строка - имя листа.
//       ** ИмяМакетаСШаблоном                       - Строка - имя макета объекта метаданных.
//       ** Служебный                                - Произвольный - дополнительная служебная информация.
//       ** ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//       ** ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//       ** ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//       ** ВысотаЗаголовкаТаблицыМакетаСШаблоном    - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//       ** ШаблонСДанными                           - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//       ** ЗаполняемыйШаблон                        - Неопределено, ТабличныйДокумент - заполняемый табличный документ.
//
Функция ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть() Экспорт

	ПараметрыПоУмолчанию = Новый Структура;
	ПараметрыПоУмолчанию.Вставить("ИмяОбъектаМетаданных",                     "");
	ПараметрыПоУмолчанию.Вставить("ИмяТабличнойЧасти",                        "");
	ПараметрыПоУмолчанию.Вставить("ИмяМакетаСШаблоном",                       "");
	ПараметрыПоУмолчанию.Вставить("ОбязательныеКолонки",                      Новый Массив);
	ПараметрыПоУмолчанию.Вставить("ПустыеВИтогахКолонки",                     Новый Массив);
	ПараметрыПоУмолчанию.Вставить("ЗаполняемыеПриЗагрузкеКолонки",            Новый Соответствие);
	ПараметрыПоУмолчанию.Вставить("ТипыДанныхКолонок",                        Новый Соответствие);
	ПараметрыПоУмолчанию.Вставить("ОсновныеКолонки",                          Новый Массив);
	ПараметрыПоУмолчанию.Вставить("КомандаИзменитьПоведениеЭлементовФормы",   "");
	ПараметрыПоУмолчанию.Вставить("ПодключаемыеОбработчикиСобытий",           Новый Структура);
	ПараметрыПоУмолчанию.Вставить("ПодключаемыеКомандыЗаполнения",            Новый Структура);
	ПараметрыПоУмолчанию.Вставить("ДополнительныеПараметры",                  Новый Структура);
	ПараметрыПоУмолчанию.Вставить("АдресХранилища",                           "");
	ПараметрыПоУмолчанию.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    1);
	ПараметрыПоУмолчанию.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);
	ПараметрыПоУмолчанию.Вставить("ЛистыШаблона",                             Неопределено);

	Возврат ПараметрыПоУмолчанию;

КонецФункции

// Создать таблицу со списком неоднозначностей для которых в ИБ имеется несколько подходящих вариантов данных.
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * НомерСтроки - Число  - номер строки, в которой была обнаружена неоднозначность;
//     * Колонка     - Строка - имя колонки, в которой была обнаружена неоднозначность.
//
Функция НовыйСписокНеоднозначностей() Экспорт

	СписокНеоднозначностей = Новый ТаблицаЗначений;
	СписокНеоднозначностей.Колонки.Добавить("НомерСтроки");
	СписокНеоднозначностей.Колонки.Добавить("Колонка");

	Возврат СписокНеоднозначностей;

КонецФункции

// Возвращает доступные состояния документов, отображаемые в списке загруженных документов.
//
// Возвращаемое значение:
//   Структура:
//     * СостояниеНовый            - Строка - документ новый.
//     * СостояниеОбновлен         - Строка - документ переоформлен.
//     * СостояниеНеОбновлен       - Строка - документ не обновлен.
//     * СостояниеОшибкиЗаполнения - Строка - ошибки при заполнении документа.
//
Функция ДоступныеСостоянияДокументов() Экспорт

	ДоступныеСостоянияДокументов = Новый Структура;
	ДоступныеСостоянияДокументов.Вставить("СостояниеНовый",            НСтр("ru = 'Создан новый'"));
	ДоступныеСостоянияДокументов.Вставить("СостояниеОбновлен",         НСтр("ru = 'Обновлен'"));
	ДоступныеСостоянияДокументов.Вставить("СостояниеНеОбновлен",       НСтр("ru = 'Не обновлен'"));
	ДоступныеСостоянияДокументов.Вставить("СостояниеОшибкиЗаполнения", НСтр("ru = 'Ошибки заполнения'"));

	Возврат ДоступныеСостоянияДокументов;

КонецФункции

// Получает менеджер объекта метаданных.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//   СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
Функция МенеджерОбъекта(ПолноеИмяОбъектаМетаданных) Экспорт

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если МенеджерОбъекта = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается для объекта с типом: %1'"),
			ПолноеИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат МенеджерОбъекта;

КонецФункции

// Получает имя менеджера объекта метаданных.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//    Строка
//
Функция ИмяМенеджераОбъекта(ПолноеИмяОбъектаМетаданных) Экспорт

	ОбъектМетаданных = ОбъектМетаданных(ПолноеИмяОбъектаМетаданных);
	ИмяБазовогоТипа  = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);

	ЧастиИмени = СтрРазделить(ПолноеИмяОбъектаМетаданных, ".");
	ЧастиИмени[0] = ИмяБазовогоТипа;

	ИмяМенеджераОбъекта = СтрСоединить(ЧастиИмени, ".");

	Возврат ИмяМенеджераОбъекта;

КонецФункции

// Получает объект метаданных.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//   ОбъектМетаданных
//
Функция ОбъектМетаданных(ПолноеИмяОбъектаМетаданных) Экспорт

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается для объекта с типом: %1'"),
			ПолноеИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат ОбъектМетаданных;

КонецФункции

// Получает табличную часть объект метаданных.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//   ИмяТабличнойЧасти    - Строка - имя табличной части.
//
// Возвращаемое значение:
//    ОбъектМетаданных - табличная часть объекта метаданных.
//
Функция ТабличнаяЧастьОбъектаМетаданных(ИмяОбъектаМетаданных, ИмяТабличнойЧасти) Экспорт

	ОбъектМетаданных = ОбъектМетаданных(ИмяОбъектаМетаданных);
	ТабличнаяЧасть   = ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);

	Если ТабличнаяЧасть = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть %1 не поддерживается для объекта с типом: %2'"),
			ИмяТабличнойЧасти,
			ИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат ТабличнаяЧасть;

КонецФункции

// Формирует имя файла для выгрузки/загрузки.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - имя объекта метаданных.
//   СсылкаНаОбъект       - ЛюбаяСсылка - ссылка объекта для формирования имени файла.
//   ДляВыгрузкиВФайл     - Булево - признак выгрузки/загрузки.
//
// Возвращаемое значение:
//   Строка - имя файла для выгрузки/загрузки.
//
Функция СформироватьИмяФайлаДляОбъектаМетаданных(Знач ИмяОбъектаМетаданных, СсылкаНаОбъект,
			ДляВыгрузкиВФайл = Ложь) Экспорт

	ИмяФайла = "";

	Если МетодКонфигурацииИспользуется(ИмяОбъектаМетаданных, "НаименованиеСохраняемогоФайла") Тогда
		МенеджерОбъекта = МенеджерОбъекта(ИмяОбъектаМетаданных);
		ИмяФайла = МенеджерОбъекта.НаименованиеСохраняемогоФайла(СсылкаНаОбъект, ДляВыгрузкиВФайл);
	КонецЕсли;

	Если ПустаяСтрока(ИмяФайла) Тогда
		Если СтрНайти(ИмяОбъектаМетаданных, ".ТабличныеЧасти.") Тогда
			ИмяОбъектаМетаданных = СтрЗаменить(ИмяОбъектаМетаданных, ".ТабличныеЧасти.", Символы.ПС);
			ЧастиИмениОбъектаМетаданных = СтрРазделить(ИмяОбъектаМетаданных, Символы.ПС);
			МетаданныеОбъекта = ТабличнаяЧастьОбъектаМетаданных(
					ЧастиИмениОбъектаМетаданных[0], ЧастиИмениОбъектаМетаданных[1]);
		Иначе
			МетаданныеОбъекта = ОбъектМетаданных(ИмяОбъектаМетаданных);
		КонецЕсли;

		Если МетаданныеОбъекта <> Неопределено Тогда
			ИмяФайла = СокрЛП(МетаданныеОбъекта.Синоним);
			Если СтрДлина(ИмяФайла) = 0 Тогда
				ИмяФайла = ИмяОбъектаМетаданных;
			КонецЕсли;
		Иначе
			ИмяФайла = ИмяОбъектаМетаданных;
		КонецЕсли;
	КонецЕсли;

	ИмяФайла = СтрЗаменить(ИмяФайла,":","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"|","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"""","");

	Возврат ИмяФайла;

КонецФункции

// Возвращает найденный по наименованию файл из присоединенных файлов.
//
// Параметры:
//   СсылкаНаОбъект    - ЛюбаяСсылка - ссылка на объект, для которого нужен поиск присоединенного файла, должен иметь 
//                         справочник присоединенных файлов.
//   НаименованиеФайла - Строка - наименование искомого файла.
//
// Возвращаемое значение:
//   Неопределено, СправочникСсылка - ссылка на присоединенный файл из справочника присоединенных файлов ссылки на объект.
//
Функция НайтиПрисоединенныйФайл(СсылкаНаОбъект, НаименованиеФайла) Экспорт

	ПрисоединенныйФайл = Неопределено;

	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект, Файлы);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Наименование = НаименованиеФайла И Не Файл.ПометкаУдаления Тогда
			ПрисоединенныйФайл = Файл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрисоединенныйФайл;

КонецФункции

// Записывает или обновляет присоединенный файл для объекта метаданных и возвращает ссылку на него.
//
// Параметры:
//   СсылкаНаОбъект                   - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - ссылка объект, для которого есть 
//                                        справочник присоединенных файлов.
//   ПутьКВременномуФайлу             - Строка - путь к файлу на сервере, в котором содержится записываемая информация.
//   ПутьКВыбранномуФайлу             - Строка - путь к файлу, который был выбран пользователем.
//   НаименованиеПрисоединенногоФайла - Строка - наименование, под которым будет записан файл.
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка на справочник присоединенных файлов для объекта метаданных.
//
Функция ЗаписатьПрисоединенныйФайл(СсылкаНаОбъект, ПутьКВременномуФайлу, ПутьКВыбранномуФайлу,
			НаименованиеПрисоединенногоФайла) Экспорт

	ПрисоединенныйФайл = Неопределено;

	Если Не ПустаяСтрока(ПутьКВременномуФайлу) Тогда
		Попытка
			ИмяФайла        = СтрЗаменить(ПутьКВременномуФайлу, "\", "/");
			ИмяФайла        = Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца) + 1);
			РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
				ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));

			ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКВременномуФайлу);
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ПрисоединенныйФайл = НайтиПрисоединенныйФайл(
				СсылкаНаОбъект, НаименованиеПрисоединенногоФайла);

			Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
				ИнформацияОФайле.Вставить("РасширениеБезТочки", РасширениеФайла);
				ИнформацияОФайле.Вставить("РасширениеБезТочки", РасширениеФайла);

				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле)
			Иначе
				ДополнительныеРеквизиты = Новый Структура;
				ДополнительныеРеквизиты.Вставить("ДатаСоздания", ТекущаяУниверсальнаяДата());

				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
				ПараметрыФайла.Автор                       = Пользователи.АвторизованныйПользователь();
				ПараметрыФайла.ВладелецФайлов              = СсылкаНаОбъект;
				ПараметрыФайла.ИмяБезРасширения            = НаименованиеПрисоединенногоФайла;
				ПараметрыФайла.РасширениеБезТочки          = РасширениеФайла;
				ПараметрыФайла.ГруппаФайлов                = Неопределено;
				ПараметрыФайла.ВремяИзмененияУниверсальное = ДополнительныеРеквизиты.ДатаСоздания;

				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, 
					АдресВременногоХранилищаФайла,
					,
					ПутьКВыбранномуФайлу);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации() + "."
					+ НСтр("ru = 'Запись загружаемого файла в присоединенные файлы'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				, 
				СсылкаНаОбъект, 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

	Возврат ПрисоединенныйФайл;

КонецФункции

// Заполняет в параметрах выгрузки/загрузки данных информацию об именах колонок, их типах
// и обязательности заполнения.
//
// Параметры:
//  Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
Процедура ЗаполнитьИнформациюПоЗагружаемымРеквизитам(Параметры) Экспорт

	ОбъектМетаданных = ТабличнаяЧастьОбъектаМетаданных(
		Параметры.ИмяОбъектаМетаданных,
		Параметры.ИмяТабличнойЧасти);

	Если ОбъектМетаданных <> Неопределено Тогда
		Для Каждого РеквизитОбъектаМетаданных Из ОбъектМетаданных.Реквизиты Цикл
			Параметры.ЗаполняемыеПриЗагрузкеКолонки.Вставить(РеквизитОбъектаМетаданных.Имя,
				РеквизитОбъектаМетаданных.Синоним);
			Параметры.ТипыДанныхКолонок.Вставить(РеквизитОбъектаМетаданных.Имя, РеквизитОбъектаМетаданных.Тип);

			Если РеквизитОбъектаМетаданных.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
				Параметры.ОбязательныеКолонки.Добавить(РеквизитОбъектаМетаданных.Имя);
				Параметры.ОсновныеКолонки.Добавить(РеквизитОбъектаМетаданных.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#Область ИнформацияПоШапкеМакета

Функция ОбластьЗаголовкаШаблонаТаблицы(Шаблон)

	Попытка
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("ЗаголовокТаблицы");
	Исключение
		ОбластьШапкиТаблицы = Шаблон;

		ВысотаШапки = 1;
		СчетчикПустыхСтрок = 0;

		Для НомерСтроки = 1 По ОбластьШапкиТаблицы.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ОбластьШапкиТаблицы.ШиринаТаблицы Цикл
				Ячейка = ОбластьШапкиТаблицы.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
				Если ЗначениеЗаполнено(Ячейка.Текст) Тогда
					ВысотаШапки = НомерСтроки;
				КонецЕсли;
			КонецЦикла;

			Если СчетчикПустыхСтрок = 10 Тогда
				Прервать;
			ИначеЕсли ВысотаШапки <> НомерСтроки Тогда
				СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьЗаголовокТаблицы = ОбластьШапкиТаблицы.ПолучитьОбласть(1, 1, ВысотаШапки, ОбластьШапкиТаблицы.ШиринаТаблицы);
	КонецПопытки;

	Возврат ОбластьЗаголовокТаблицы;

КонецФункции

Процедура ЗаполнитьПараметрыШапки(Шаблон, ПараметрыШапки)

	ПараметрыШапки.Вставить("Параметры", Новый Структура);
	ПараметрыШапки.Вставить("Шаблоны",   Новый Массив);

	Попытка
		ДанныеШапки = Шаблон.ПолучитьОбласть("ДанныеШапки");

		Для НомерСтроки = 1 По ДанныеШапки.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ДанныеШапки.ШиринаТаблицы Цикл
				Ячейка = ДанныеШапки.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
				ТекстШаблона = Ячейка.Текст;

				Если ПустаяСтрока(ТекстШаблона) Тогда
					Продолжить;
				КонецЕсли;

				ТекстЯчейки = Ячейка.Текст;	// ТекстЯчейки = ТекстЯчейкиКРазбору(ТекстЯчейки);
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "{", Символы.ПС + "{");
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "}", "}" + Символы.ПС);
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "[", Символы.ПС + "[");
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "]", "]" + Символы.ПС);

				ШиринаОбластиПоиска = 1;	// ШиринаОбластиПоиска = Шаблон.ШиринаТаблицы - НомерКолонки + 1; // Сколько колонок нужно читать для шаблона.
				ВысотаОбластиПоиска = 1;

				// Определение размера области поиска параметров.
				РазмерОбластиПоиска = Ячейка.Примечание.Текст; // Ожидается в примечании текст по шаблону: "ШиринаОбластиПоиска = 7; ВысотаОбластиПоиска = 4".

				Если Не ПустаяСтрока(РазмерОбластиПоиска) Тогда
					ШиринаОбластиПоискаИзПримечания = 1;
					ВысотаОбластиПоискаИзПримечания = 1;

					РазмерОбластиПоиска = СтрЗаменить(РазмерОбластиПоиска, "=", "");
					РазмерОбластиПоиска = СтрРазделить(РазмерОбластиПоиска, Символы.ПС);
					Для Каждого ОбластьПоиска Из РазмерОбластиПоиска Цикл
						Если СтрНайти(ОбластьПоиска, "ШиринаОбластиПоиска") > 0 Тогда
							ШиринаОбластиПоискаИзПримечания = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(СтрЗаменить(ОбластьПоиска, "ШиринаОбластиПоиска", "")));
						КонецЕсли;
						Если СтрНайти(ОбластьПоиска, "ВысотаОбластиПоиска") > 0 Тогда
							ВысотаОбластиПоискаИзПримечания = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(СтрЗаменить(ОбластьПоиска, "ВысотаОбластиПоиска", "")));
						КонецЕсли;
					КонецЦикла;

					ШиринаОбластиПоиска = ШиринаОбластиПоискаИзПримечания;
					ВысотаОбластиПоиска = ВысотаОбластиПоискаИзПримечания;
				КонецЕсли;

				// Разбор шаблона.
				ПараметрыШаблона     = Новый Массив;
				КлючевыеСловаШаблона = Новый Массив;

				СоставЯчейки = СтрРазделить(ТекстЯчейки, Символы.ПС, Ложь);
				Для Каждого ЧастьСостава Из СоставЯчейки Цикл
					Если СтрНайти(ЧастьСостава, "{") > 0 Тогда
						КлючевоеСлово = СтрЗаменить(ЧастьСостава, "{", "");
						КлючевоеСлово = СтрЗаменить(КлючевоеСлово, "}", "");

						КлючевыеСловаШаблона.Добавить(КлючевоеСлово);
					КонецЕсли;
					Если СтрНайти(ЧастьСостава, "[") > 0 Тогда
						ИмяПараметра = СтрЗаменить(ЧастьСостава, "[", "");
						ИмяПараметра = СтрЗаменить(ИмяПараметра, "]", "");

						ПараметрыШаблона.Добавить(ИмяПараметра);
						ПараметрыШапки.Параметры.Вставить(ИмяПараметра, "");
					КонецЕсли;
				КонецЦикла;

				Если ПараметрыШаблона.Количество() > 0 Тогда
					ДанныеШаблона = ДанныеШаблона();
					ДанныеШаблона.Шаблон               = ТекстШаблона;
					ДанныеШаблона.КлючевыеСловаШаблона = КлючевыеСловаШаблона;
					ДанныеШаблона.ПараметрыШаблона     = ПараметрыШаблона;
					ДанныеШаблона.ШиринаОбластиПоиска  = ШиринаОбластиПоиска; // Сколько колонок нужно читать для шаблона.
					ДанныеШаблона.ВысотаОбластиПоиска  = ВысотаОбластиПоиска; // Сколько строк нужно читать для шаблона.

					ПараметрыШапки.Шаблоны.Добавить(ДанныеШаблона);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры

// Заполняет параметры шапки чтением данных из присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл          - СправочникСсылка - ссылка на присоединенный файл объекта метаданных.
//   ИнформацияПоКолонкамТаблица - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ПараметрыШапки              - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//
Процедура ЗаполнитьПараметрыШапкиИзПрисоединенногоФайла(ПрисоединенныйФайл, ИнформацияПоКолонкамТаблица,
			ПараметрыШапки) Экспорт

	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;

	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);

	ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ПутьКВременномуФайлу);

	СодержимоеФайла = Новый ТабличныйДокумент;
	СодержимоеФайла.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	ФайловаяСистема.УдалитьВременныйФайл(ПутьКВременномуФайлу);

	ТаблицаСДаннымиМакета = ПолучитьТаблицуСДаннымиИзМакета(СодержимоеФайла);

	ИнициализироватьКолонкиИШапку(ИнформацияПоКолонкамТаблица, ТаблицаСДаннымиМакета, ПараметрыШапки);

КонецПроцедуры

// Возвращает колонки-реквизиты зависимые от функциональных опций.
//
// Параметры:
//   ПолноеИмяОбъекта - Строка - полное наименование объекта.
//   
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение:
//     * Ключ     - Строка - имя колонки;
//     * Значение - Булево - признак доступности.
//
Функция КолонкиЗависимыеОтФункциональныхОпций(ПолноеИмяОбъекта)

	ИнформацияОФункциональныхОпциях = Новый Соответствие;
	ИмяОбъектаССуффиксомРеквизит = ПолноеИмяОбъекта + ".Реквизит.";

	ФункциональныеОпции = ДоступностьОбъектовПоОпциям();
	Для Каждого ФункциональнаяОпция Из ФункциональныеОпции Цикл
		Если СтрНачинаетсяС(ФункциональнаяОпция.Ключ, ИмяОбъектаССуффиксомРеквизит) Тогда
			ИнформацияОФункциональныхОпциях.Вставить(Сред(ФункциональнаяОпция.Ключ, СтрДлина(ИмяОбъектаССуффиксомРеквизит) + 1), ФункциональнаяОпция.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ИнформацияОФункциональныхОпциях;

КонецФункции

Функция ДоступностьОбъектовПоОпциям()

	Параметры = Новый Структура;
	ОбщегоНазначенияПереопределяемый.ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(Параметры);

	ДоступностьОбъектов = Новый Соответствие;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Значение = -1;
		Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
			Если Элемент.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Значение = -1 Тогда
				Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, Параметры);
			КонецЕсли;
			ПолноеИмя = Элемент.Объект.ПолноеИмя();
			Если Значение = Истина Тогда
				ДоступностьОбъектов.Вставить(ПолноеИмя, Истина);
			Иначе
				Если ДоступностьОбъектов[ПолноеИмя] = Неопределено Тогда
					ДоступностьОбъектов.Вставить(ПолноеИмя, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Новый ФиксированноеСоответствие(ДоступностьОбъектов);

КонецФункции

#КонецОбласти

#Область ПодготовкаКЗагрузкеДанных

// Возвращает предопределенные стандартные колонки.
//
// Параметры:
//   ДобавитьОписаниеКолонок        - Булево - признак добавления описания колонки,т.е. типа и синонима.
//   ДобавитьСписокНеоднозначностей - Булево - признак добавления колонки описания неоднозначностей.
//
// Возвращаемое значение:
//   Массив из Строка    - список имен стандартных колонок;
//   Массив из Структура - список стандартных колонок с именем, типом и синонимом.
//
Функция СтандартныеКолонкиЗагрузки(ДобавитьОписаниеКолонок = Истина, ДобавитьСписокНеоднозначностей = Истина)
	
	СтандартныеКолонки = Новый Массив;
	
	Если ДобавитьОписаниеКолонок Тогда
		ОписаниеКолонки = "Имя, Тип, Синоним";
		
		ТипБулево    = Новый ОписаниеТипов("Булево");
		ТипСтрока    = Новый ОписаниеТипов("Строка");
		ТипЧисло     = Новый ОписаниеТипов("Число");
		ТипСоставной = Новый ОписаниеТипов("Булево, Строка, Число",, Новый КвалификаторыСтроки(1024));
		
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "НомерСтроки",
			ТипЧисло, НСтр("ru = '№'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "РезультатСопоставленияСтроки",
			ТипСтрока, НСтр("ru = 'Результат'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "СтрокаОбработана",
			ТипБулево, НСтр("ru = 'Обработана'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "ОписаниеОшибки",
			ТипСтрока, НСтр("ru = 'Причина'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "Служебный",
			ТипСоставной, НСтр("ru = 'Служебный'")));
		
		Если ДобавитьСписокНеоднозначностей Тогда
			СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "СписокНеоднозначностей",
				Новый ОписаниеТипов("СписокЗначений"), НСтр("ru = 'Список неоднозначностей'")));
		КонецЕсли;
		
	Иначе
		СтандартныеКолонки.Добавить("НомерСтроки");
		СтандартныеКолонки.Добавить("РезультатСопоставленияСтроки");
		СтандартныеКолонки.Добавить("СтрокаОбработана");
		СтандартныеКолонки.Добавить("ОписаниеОшибки");
		СтандартныеКолонки.Добавить("Служебный");
		Если ДобавитьСписокНеоднозначностей Тогда
			СтандартныеКолонки.Добавить("СписокНеоднозначностей");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтандартныеКолонки;
	
КонецФункции

// Добавляет стандартные колонки или реквизиты формы в зависимости от типа коллекции.
//
// Параметры:
//   Коллекция - ТаблицаЗначений         - дополняемая таблица.
//             - Массив из РеквизитФормы - дополняемый список реквизитов формы.
//   ДобавитьСписокНеоднозначностей - Булево - признак добавления колонки для заполнения списка неоднозначностей.
//   ИмяКоллекцииФормы - Строка - имя коллекции для добавления реквизитов формы.
//
Процедура ДобавитьСтандартныеКолонки(Коллекция, ДобавитьСписокНеоднозначностей = Истина,
			ИмяКоллекцииФормы = "") Экспорт

	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции <> Тип("ТаблицаЗначений") И ТипКоллекции <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	СтандартныеКолонки = СтандартныеКолонкиЗагрузки(Истина, ДобавитьСписокНеоднозначностей);

	ДобавитьКакРеквизитФормы = Не ПустаяСтрока(ИмяКоллекцииФормы);

	Для Каждого Колонка Из СтандартныеКолонки Цикл
		Если ДобавитьКакРеквизитФормы Тогда
			Коллекция.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип,
				ИмяКоллекцииФормы, Колонка.Синоним));
		Иначе
			Коллекция.Колонки.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Синоним);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Инициализируется таблица информации по колонкам.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо инициализировать таблицу информации по колонкам;
//         - Неопределено - при незаполненном значении параметра создается таблица значений.
//
// Возвращаемое значение:
//   ТаблицаЗначений - если параметр Форма не заполнен, иначе ничего не возвращается.
//
Функция ИнициализироватьТаблицуИнформацииПоКолонкам(Форма = Неопределено) Экспорт

	ТипСтрока       = Новый ОписаниеТипов("Строка");
	ТипСтрока150    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100));
	ТипБулево       = Новый ОписаниеТипов("Булево");
	ТипСтрока       = Новый ОписаниеТипов("Строка");
	ТипЧислоЦелое   = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0));
	ТипЧислоДробное = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 3));
	ТипПроизвольный = Новый ОписаниеТипов();

	Если Форма = Неопределено Тогда
		ТаблицаИнформацииПоКолонкам = Новый ТаблицаЗначений;

		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ПредставлениеКолонки",      ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Синоним",                   ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ИмяКолонки",                ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Группа",                    ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Использование",             ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Родитель",                  ТипСтрока);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Примечание",                ТипСтрока);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ТипКолонки",                ТипПроизвольный);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ОбязательнаДляЗаполнения",  ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ВидимостьВМакете",          ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ВидимостьПриСопоставлении", ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ВИтогахВсегдаПустая",       ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Ширина",                    ТипЧислоДробное);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ПозицияВМакете",            ТипЧислоЦелое);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Позиция",                   ТипЧислоЦелое);

		Возврат ТаблицаИнформацииПоКолонкам;

	Иначе // Заполнение таблицы формы.

		МассивРеквизитов = Новый Массив;

		Если СтрНайти(Форма.ИмяФормы, "РедактированиеБланка") = 0 Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ПредставлениеКолонки", ТипСтрока150, "ИнформацияПоКолонкам"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Синоним",              ТипСтрока150, "ИнформацияПоКолонкам"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидимостьВМакете",     ТипБулево,    "ИнформацияПоКолонкам"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Группа",               ТипСтрока150, "ИнформацияПоКолонкам"));
		КонецЕсли;

		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяКолонки",                ТипСтрока150,    "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Использование",             ТипСтрока150,    "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Родитель",                  ТипСтрока,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Примечание",                ТипСтрока,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипКолонки",                ТипПроизвольный, "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ОбязательнаДляЗаполнения",  ТипБулево,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидимостьПриСопоставлении", ТипБулево,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВИтогахВсегдаПустая",       ТипБулево,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Ширина",                    ТипЧислоДробное, "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ПозицияВМакете",            ТипЧислоЦелое,   "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Позиция",                   ТипЧислоЦелое,   "ИнформацияПоКолонкам"));

		Форма.ИзменитьРеквизиты(МассивРеквизитов);

	КонецЕсли;

КонецФункции

// Определяет состав колонок для загрузки данных и параметров шапки, если она задана.
//
// Параметры:
//   ПараметрыЗагрузки    - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//   ИнформацияПоКолонкам - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ПараметрыШапки       - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//
Процедура ОпределитьИнформациюПоКолонкамИПараметрамШапки(ПараметрыЗагрузки, ИнформацияПоКолонкам, ПараметрыШапки) Экспорт

	МенеджерОбъекта = МенеджерОбъекта(ПараметрыЗагрузки.ИмяОбъектаМетаданных);

	Макет = МенеджерОбъекта.ПолучитьМакет(ПараметрыЗагрузки.ИмяМакетаСШаблоном);
	Если Макет = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается, т.к. отсутствует макет %1 у объекта с типом: %2'"),
			ПараметрыЗагрузки.ИмяМакетаСШаблоном,
			ПараметрыЗагрузки.ИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если ПараметрыШапки <> Неопределено Тогда
		ЗаполнитьПараметрыШапки(Макет, ПараметрыШапки);
	КонецЕсли;

	ОбластьЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(Макет);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    ОбластьЗаголовокТаблицы.ВысотаТаблицы);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", ОбластьЗаголовокТаблицы.ВысотаТаблицы);

	ЗаполнитьИнформациюПоЗагружаемымРеквизитам(ПараметрыЗагрузки);

	ОпределитьИнформациюПоКолонкамТабличнаяЧасть(ИнформацияПоКолонкам, Макет, ПараметрыЗагрузки);

	ТребуетсяПересчетПозиций = Ложь;

	СписокКолонокСФункциональнымиОпциями = КолонкиЗависимыеОтФункциональныхОпций(ПараметрыЗагрузки.ИмяОбъектаМетаданных + "." + ПараметрыЗагрузки.ИмяТабличнойЧасти);
	Для Каждого ФункциональнаяОпцияКолонкиВключена Из СписокКолонокСФункциональнымиОпциями Цикл
		СтрокаСИнформациейОКолонке = ИнформацияПоКолонкам.Найти(ФункциональнаяОпцияКолонкиВключена.Ключ, "ИмяКолонки");
		Если СтрокаСИнформациейОКолонке <> Неопределено Тогда
			Если НЕ ФункциональнаяОпцияКолонкиВключена.Значение Тогда
				ИнформацияПоКолонкам.Удалить(СтрокаСИнформациейОКолонке);
				ТребуетсяПересчетПозиций = Истина;
			КонецЕсли;
		Иначе
			Если ФункциональнаяОпцияКолонкиВключена.Значение Тогда
				СоздатьИнформациюПоКолонкамНаОснованииШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам, ФункциональнаяОпцияКолонкиВключена.Ключ);
				ТребуетсяПересчетПозиций = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ТребуетсяПересчетПозиций Тогда
		ИнформацияПоКолонкам.Сортировать("Позиция");
		Позиция = 1;
		ПозицияВМакете = 1;

		Для Каждого Колонка Из ИнформацияПоКолонкам Цикл
			Колонка.Позиция = Позиция;
			Позиция = Позиция + 1;

			Если Колонка.ВидимостьВМакете Тогда
				Колонка.ПозицияВМакете = ПозицияВМакете;
				ПозицияВМакете = ПозицияВМакете + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьИнформациюПоКолонкамТабличнаяЧасть(Знач ИнформацияПоКолонкам, Знач Макет, ПараметрыЗагрузки)

	Если МетодКонфигурацииИспользуется(ПараметрыЗагрузки.ИмяОбъектаМетаданных, "УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть") Тогда
		МенеджерОбъекта = МенеджерОбъекта(ПараметрыЗагрузки.ИмяОбъектаМетаданных);
		МенеджерОбъекта.УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть(ПараметрыЗагрузки);
	КонецЕсли;

	Если ИнформацияПоКолонкам.Количество() = 0 Тогда
		ЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(Макет);
		СоздатьИнформациюПоКолонкамНаОснованииШаблона(ЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам);
	КонецЕсли;

КонецПроцедуры

// Заполняет таблицу о колонках в макете. Информация используется для построения таблицы сопоставления.
//
// Параметры:
//   ОбластьЗаголовокТаблицы  - ТабличныйДокумент - область заголовка макета.
//   ПараметрыЗагрузки        - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//   ИнформацияПоКолонкам     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ИменаДобавляемыхКолонок  - Строка - список добавляемых колонок через запятую. Если значение не заполонено, то 
//                                добавляются все.
//
Процедура СоздатьИнформациюПоКолонкамНаОснованииШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам,
			ИменаДобавляемыхКолонок = Неопределено)

	ВыборочноеДобавление = Ложь;
	Если ЗначениеЗаполнено(ИменаДобавляемыхКолонок) Тогда
		ВыборочноеДобавление = Истина;
		МассивДобавляемыхКолонок = СтрРазделить(ИменаДобавляемыхКолонок, ",", Ложь);
		Позиция = ИнформацияПоКолонкам.Количество() + 1;
	Иначе
		ИнформацияПоКолонкам.Очистить();
		Позиция = 1;
	КонецЕсли;

	Если ПараметрыЗагрузки.Свойство("ТипыДанныхКолонок") Тогда
		СоответствиеТиповДанныхКолонок = ПараметрыЗагрузки.ТипыДанныхКолонок;
	Иначе
		СоответствиеТиповДанныхКолонок = Новый Соответствие;
	КонецЕсли;

	ВысотаШапки = ОбластьЗаголовокТаблицы.ВысотаТаблицы;
	Если ВысотаШапки >= 2 Тогда
		НомерКолонки = 1;
		Группы = Новый Соответствие;
		ИспользуетсяГруппировка = Истина;
		Пока НомерКолонки <= ОбластьЗаголовокТаблицы.ШиринаТаблицы Цикл
			Область = ОбластьЗаголовокТаблицы.ПолучитьОбласть(1, НомерКолонки);
			Ячейка = ОбластьЗаголовокТаблицы.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть;
			Группа = Ячейка.Текст;
			Для Индекс = НомерКолонки По НомерКолонки + Область.ШиринаТаблицы -1 Цикл
				Группы.Вставить(Индекс, Группа);
			КонецЦикла;
			НомерКолонки = НомерКолонки + Область.ШиринаТаблицы;
		КонецЦикла;
	Иначе
		ИспользуетсяГруппировка = Ложь;
	КонецЕсли;

	ОбъектМетаданных = ТабличнаяЧастьОбъектаМетаданных(ПараметрыЗагрузки.ИмяОбъектаМетаданных, ПараметрыЗагрузки.ИмяТабличнойЧасти);

	ДобавленныеКолонки = Новый Массив;

	Для НомерСтроки = 1 По ВысотаШапки Цикл
		Для НомерКолонки = 1 По ОбластьЗаголовокТаблицы.ШиринаТаблицы Цикл
			Ячейка = ОбластьЗаголовокТаблицы.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;

			Если ПустаяСтрока(Ячейка.ПараметрРасшифровки) Тогда
				Продолжить;
			ИначеЕсли НЕ ПустаяСтрока(Ячейка.Параметр) Тогда
				Продолжить;
			КонецЕсли;

			Если Ячейка.Имя = "R1C1" Тогда
				ИмяРеквизита = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Текст);
				ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Ячейка.Текст), Ячейка.Текст, Ячейка.ПараметрРасшифровки);
				Родитель = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Текст);
			Иначе
				ИмяРеквизита = Ячейка.Имя;
				ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Ячейка.Текст), Ячейка.Текст, Ячейка.Имя);
				Родитель = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Имя);
			КонецЕсли;

			Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
				Попытка
					МетаданныеРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
				Исключение
					МетаданныеРеквизита = Неопределено;
				КонецПопытки;

				ТипДанныхКолонки = Новый ОписаниеТипов("Строка");
				Если МетаданныеРеквизита <> Неопределено Тогда
					ТипДанныхКолонки = МетаданныеРеквизита.Тип;
				КонецЕсли;
				Если СоответствиеТиповДанныхКолонок <> Неопределено Тогда
					ТипДанныхКолонкиПереопределенный = СоответствиеТиповДанныхКолонок.Получить(ИмяРеквизита);
					Если ТипДанныхКолонкиПереопределенный <> Неопределено Тогда
						ТипДанныхКолонки = ТипДанныхКолонкиПереопределенный;
					КонецЕсли;
				КонецЕсли;

				Если ВыборочноеДобавление И МассивДобавляемыхКолонок.Найти(ИмяРеквизита) = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ДобавленныеКолонки.Добавить(ИмяРеквизита);

				ОбязательнаДляЗаполнения = Ячейка.Шрифт.Полужирный = Истина
					Или Ячейка.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт
					Или ПараметрыЗагрузки.ОбязательныеКолонки.Найти(ИмяРеквизита) <> Неопределено;
				ВИтогахВсегдаПустая      = ПараметрыЗагрузки.ПустыеВИтогахКолонки.Найти(ИмяРеквизита) <> Неопределено;

				ПримечаниеВШапкеКолонки = Ячейка.Примечание.Текст + ?(ОбязательнаДляЗаполнения,
					Символы.ПС + НСтр("ru = 'Обязательно для заполнения.'"), "");

				СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
				СтрокаИнфоПроКолонки.ИмяКолонки                = ИмяРеквизита;
				СтрокаИнфоПроКолонки.ПредставлениеКолонки      = ПредставлениеРеквизита;
				СтрокаИнфоПроКолонки.ТипКолонки                = ТипДанныхКолонки;
				СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения  = ОбязательнаДляЗаполнения;
				СтрокаИнфоПроКолонки.Позиция                   = Позиция;
				СтрокаИнфоПроКолонки.ПозицияВМакете            = Позиция;
				СтрокаИнфоПроКолонки.Родитель                  = Родитель;
				СтрокаИнфоПроКолонки.ВидимостьВМакете          = (Ячейка.ШиринаКолонки > 0);
				СтрокаИнфоПроКолонки.ВидимостьПриСопоставлении = (Ячейка.ШиринаКолонки > 0);
				СтрокаИнфоПроКолонки.Примечание                = ПримечаниеВШапкеКолонки;
				СтрокаИнфоПроКолонки.Ширина                    = Ячейка.ШиринаКолонки;
				СтрокаИнфоПроКолонки.ВИтогахВсегдаПустая       = ВИтогахВсегдаПустая;

				Если МетаданныеРеквизита <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
					Если МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
						СтрокаИнфоПроКолонки.Использование = "ДляГруппы";
					ИначеЕсли МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
						СтрокаИнфоПроКолонки.Использование = "ДляГруппыИЭлемента";
					Иначе
						СтрокаИнфоПроКолонки.Использование = "ДляЭлемента";
					КонецЕсли;
				КонецЕсли;

				Если ИспользуетсяГруппировка Тогда
					ГруппаКолонки = Группы.Получить(НомерКолонки);
					СтрокаИнфоПроКолонки.Группа =
						?(СтрокаИнфоПроКолонки.ПредставлениеКолонки = ГруппаКолонки, "", ГруппаКолонки);
				КонецЕсли;

				Позиция = Позиция + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого Реквизит Из ПараметрыЗагрузки.ЗаполняемыеПриЗагрузкеКолонки Цикл
		ИмяРеквизита     = Реквизит.Ключ;
		СинонимРеквизита = Реквизит.Значение;

		Если ДобавленныеКолонки.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДобавленныеКолонки.Добавить(ИмяРеквизита);

		ТипДанныхКолонки = Новый ОписаниеТипов("Строка");
		Если СоответствиеТиповДанныхКолонок <> Неопределено Тогда
			ТипДанныхКолонкиПереопределенный = СоответствиеТиповДанныхКолонок.Получить(ИмяРеквизита);
			Если ТипДанныхКолонкиПереопределенный <> Неопределено Тогда
				ТипДанныхКолонки = ТипДанныхКолонкиПереопределенный;
			КонецЕсли;
		КонецЕсли;

		ОбязательнаДляЗаполнения = ПараметрыЗагрузки.ОбязательныеКолонки.Найти(ИмяРеквизита) <> Неопределено;
		ВИтогахВсегдаПустая      = ПараметрыЗагрузки.ПустыеВИтогахКолонки.Найти(ИмяРеквизита) <> Неопределено;

		СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
		СтрокаИнфоПроКолонки.ИмяКолонки                = ИмяРеквизита;
		СтрокаИнфоПроКолонки.ПредставлениеКолонки      = СинонимРеквизита;
		СтрокаИнфоПроКолонки.ТипКолонки                = ТипДанныхКолонки;
		СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения  = ОбязательнаДляЗаполнения;
		СтрокаИнфоПроКолонки.Позиция                   = Позиция;
		СтрокаИнфоПроКолонки.ПозицияВМакете            = -1;
		СтрокаИнфоПроКолонки.Родитель                  = ИмяРеквизита;
		СтрокаИнфоПроКолонки.ВидимостьВМакете          = Ложь;
		СтрокаИнфоПроКолонки.ВидимостьПриСопоставлении = Истина;
		СтрокаИнфоПроКолонки.Примечание                = НСтр("ru = 'Служебная колонка'");
		СтрокаИнфоПроКолонки.ВИтогахВсегдаПустая       = ВИтогахВсегдаПустая;

		Попытка
			МетаданныеРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
		Исключение
			МетаданныеРеквизита = Неопределено;
		КонецПопытки;

		Если МетаданныеРеквизита <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
			Если МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				СтрокаИнфоПроКолонки.Использование = "ДляГруппы";
			ИначеЕсли МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
				СтрокаИнфоПроКолонки.Использование = "ДляГруппыИЭлемента";
			Иначе
				СтрокаИнфоПроКолонки.Использование = "ДляЭлемента";
			КонецЕсли;
		КонецЕсли;

		Если ИспользуетсяГруппировка Тогда
			СтрокаИнфоПроКолонки.Группа = Группы.Получить(НомерКолонки);
		КонецЕсли;

		Позиция = Позиция + 1;
	КонецЦикла;

КонецПроцедуры

Функция ШиринаКолонкиПоТипу(Тип)

	ШиринаКолонки = 20;

	Если Тип.СодержитТип(Тип("Булево")) Тогда 
		ШиринаКолонки = 3;
	ИначеЕсли Тип.СодержитТип(Тип("Число")) Тогда 
		ШиринаКолонки = Тип.КвалификаторыЧисла.Разрядность + 1;
	ИначеЕсли Тип.СодержитТип(Тип("Строка")) Тогда 
		Если Тип.КвалификаторыСтроки.Длина > 0 Тогда 
			ШиринаКолонки = ?(Тип.КвалификаторыСтроки.Длина > 20, 20, Тип.КвалификаторыСтроки.Длина);
		Иначе
			ШиринаКолонки = 20;
		КонецЕсли;
	ИначеЕсли Тип.СодержитТип(Тип("Дата")) Тогда 
		ШиринаКолонки = 12;
	ИначеЕсли Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		ШиринаКолонки = 20;
	Иначе
		Для Каждого ТипОбъекта Из Тип.Типы() Цикл
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
				Если Не МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0  Тогда
					ШиринаКолонки = МетаданныеОбъекта.ДлинаКода + 1;
				КонецЕсли;

				Если МетаданныеОбъекта.ДлинаНаименования > 0  Тогда
					Если МетаданныеОбъекта.ДлинаНаименования > ШиринаКолонки Тогда
						ШиринаКолонки = ?(МетаданныеОбъекта.ДлинаНаименования > 30, 30, МетаданныеОбъекта.ДлинаНаименования + 1);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
				ДлинаПредставления = СтрДлина(МетаданныеОбъекта.Представление());
				ШиринаКолонки      = ?( ДлинаПредставления > 30, 30, ДлинаПредставления + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ШиринаКолонки;

КонецФункции

// Создает шапку бланка по информации о колонках.
//
// Параметры:
//   ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//   ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//   
// Возвращаемое значение:
//   ТабличныйДокумент - шапка бланка.
//
Функция ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(ИнформацияПоКолонкам, ПараметрыШапки,
			ВысотаЗаголовкаТаблицыЗагружаемогоМакета) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьМакет("ПростойШаблон");

	КолонкиИмеютГруппировку = КолонкиИмеютГруппировку(ИнформацияПоКолонкам);
	Если КолонкиИмеютГруппировку Тогда
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьЗаголовокСГруппой = Макет.ПолучитьОбласть("Шапка2Строки");
		ОбластьЗаголовокБезГруппы = Макет.ПолучитьОбласть("Шапка2СтрокиБезГруппы");
		НомерСтроки = 2;
	Иначе
		ОбластьЗаголовокБезГруппы = Макет.ПолучитьОбласть("Заголовок");
		НомерСтроки = 1;
	КонецЕсли;

	РазницаВШапке = ВысотаЗаголовкаТаблицыЗагружаемогоМакета - НомерСтроки;

	ИнформацияПоКолонкам.Сортировать("Позиция");

	Группа = Неопределено;
	ПозицияНачалоГруппы = 1;
	Сдвиг = 0;
	Для Позиция = 0 По ИнформацияПоКолонкам.Количество() -1 Цикл
		Колонка = ИнформацияПоКолонкам.Получить(Позиция);

		Если Колонка.ВидимостьВМакете Тогда
			Если Группа = Неопределено Тогда
				Группа = Колонка.Группа;
			КонецЕсли;

			Если КолонкиИмеютГруппировку Тогда
				Если ПустаяСтрока(Колонка.Группа) Тогда
					ОбластьЗаголовок = ОбластьЗаголовокБезГруппы;
					ОбластьИмяКолонки = ОбластьЗаголовок.Область(НомерСтроки - 1, 1, НомерСтроки + РазницаВШапке, 1);
					ОбластьИмяКолонки.Объединить();
				Иначе
					ОбластьЗаголовок = ОбластьЗаголовокСГруппой;
					ОбластьИмяКолонки = ОбластьЗаголовок.Область(НомерСтроки, 1, НомерСтроки + РазницаВШапке, 1);
					ОбластьИмяКолонки.Объединить();
				КонецЕсли;
			Иначе
				ОбластьЗаголовок = ОбластьЗаголовокБезГруппы;
				ОбластьИмяКолонки = ОбластьЗаголовок.Область(НомерСтроки, 1, НомерСтроки + РазницаВШапке, 1);
				ОбластьИмяКолонки.Объединить();
			КонецЕсли;

			ОбластьИмяКолонки.Имя = Колонка.ИмяКолонки;
			ОбластьИмяКолонки.Расшифровка = Колонка.Группа;
			ОбластьИмяКолонки.Примечание.Текст = Колонка.Примечание;
			Если Колонка.ОбязательнаДляЗаполнения Тогда
				ОбластьИмяКолонки.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
			Иначе
				ОбластьИмяКолонки.Шрифт = Неопределено;
			КонецЕсли;

			ОбластьИмяКолонки.ШиринаКолонки = ?(Колонка.Ширина = 0, ШиринаКолонкиПоТипу(Колонка.ТипКолонки), Колонка.Ширина);
			ОбластьЗаголовок.Параметры.Заголовок = ?(ПустаяСтрока(Колонка.Синоним), Колонка.ПредставлениеКолонки, Колонка.Синоним);
			ТабличныйДокумент.Присоединить(ОбластьЗаголовок);

			Если КолонкиИмеютГруппировку И Колонка.Группа <> Группа Тогда
				Если Не ПустаяСтрока(Группа) Тогда
					Область = ТабличныйДокумент.Область(1, ПозицияНачалоГруппы, 1, Позиция - Сдвиг);
					Область.Текст = Группа;
					Область.Объединить();
					Область.Обвести(Линия, Линия, Линия, Линия);
				КонецЕсли;
				ПозицияНачалоГруппы = Позиция + 1 - Сдвиг;
				Группа = Колонка.Группа;
			КонецЕсли;
		Иначе
			Сдвиг = Сдвиг + 1;
		КонецЕсли;
	КонецЦикла;

	Если КолонкиИмеютГруппировку И Не ПустаяСтрока(Группа) Тогда
		Область = ТабличныйДокумент.Область(1, ПозицияНачалоГруппы, 1, Позиция - Сдвиг);
		Область.Текст = Группа;
		Область.Объединить();
		Область.Обвести(Линия, Линия, Линия, Линия);
	КонецЕсли;

	ШаблоныДанныхШапки   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Шаблоны", Новый Массив);
	ПараметрыДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Параметры", Новый Структура);
	МассивСтрокШапки = Новый Массив;

	Если ШаблоныДанныхШапки.Количество() > 0 Тогда
		Для Каждого ДанныеШаблона Из ШаблоныДанныхШапки Цикл
			СтрокаШапки = ДанныеШаблона.Шаблон; // Шаблон состоит из ключевых слов в фигурных скобках {} и параметров в квадратных скобках [],
			//									например: "{Отчет} о {реализации} {№} [Параметр1] {от} [Параметр2]".

			Для Каждого ПараметрШаблона Из ПараметрыДанныхШапки Цикл
				СтрокаШапки = СтрЗаменить(СтрокаШапки,
					"[" + ПараметрШаблона.Ключ + "]",
					?(ЗначениеЗаполнено(ПараметрШаблона.Значение), Строка(ПараметрШаблона.Значение), "_____________"));
			КонецЦикла;
			
			СтрокаШапки = СтрЗаменить(СтрокаШапки, "{", "");
			СтрокаШапки = СтрЗаменить(СтрокаШапки, "}", "");

			МассивСтрокШапки.Добавить(СтрокаШапки);
		КонецЦикла;
	КонецЕсли;

	Если МассивСтрокШапки.Количество() > 0 Тогда
		ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
		ОбластьЗаполнения = ИтоговыйТабличныйДокумент.ПолучитьОбласть(1, 1, 1, ТабличныйДокумент.ШиринаТаблицы);
		ОбластьЗаполнения.Область(1, 1, 1, ОбластьЗаполнения.ШиринаТаблицы).Объединить();

		Для Каждого СтрокаШапки Из МассивСтрокШапки Цикл
			ОбластьЗаполнения.ТекущаяОбласть.Текст = СтрокаШапки;
			ИтоговыйТабличныйДокумент.Вывести(ОбластьЗаполнения);
		КонецЦикла;

		ИтоговыйТабличныйДокумент.Вывести(ТабличныйДокумент);
	Иначе
		ИтоговыйТабличныйДокумент = ТабличныйДокумент
	КонецЕсли;

	Возврат ИтоговыйТабличныйДокумент;

КонецФункции

Функция КолонкиИмеютГруппировку(Знач ИнформацияПоКолонкам)

	ГруппыКолонок = Новый Соответствие;
	Для Каждого КолонкаТаблицы Из ИнформацияПоКолонкам Цикл
		ГруппыКолонок.Вставить(КолонкаТаблицы.Группа);
	КонецЦикла;
	Возврат ?(ГруппыКолонок.Количество() > 1, Истина, Ложь);

КонецФункции

// Подготавливает состав результата получения данных по API.
// 
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИнформацияОбОшибке            - см. НоваяОшибка.
//     * АдресТаблицыЗагруженныхДанных - Неопределено, Строка - адрес хранилища с данными.
//     * ПараметрыШапки                - см. ПараметрыШапки.
//
Функция РезультатПолученияДанныхИнтеграционнымиМетодами() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИнформацияОбОшибке", НоваяОшибка());
	Результат.Вставить("АдресТаблицыЗагруженныхДанных", Неопределено);
	Результат.Вставить("ПараметрыШапки", ПараметрыШапки());

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Конструктор параметров загрузки табличного документа.
//
// Параметры:
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, для которой нужны параметры.
//
// Возвращаемое значение:
//   Структура:
//     * ДанныеФайла                              - Неопределено, ДвоичныеДанные - данные файла, которые требуется загрузить.
//     * РасширениеФайла                          - Строка - расширение файла.
//     * ЗаполняемыйШаблон                        - Неопределено, ТабличныйДокумент - заполняемый табличный документ.
//     * ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//     * ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//     * ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//     * ВысотаЗаголовкаТаблицыМакетаСШаблоном    - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//     * АдресХранилища                           - Строка - адрес хранилища, в которое будет помещен результат загрузки.
//     * ЛистыШаблона                             - Неопределено - используется одностраничный шаблон.
//                                                - Структура - описание многостраничного шаблона:
//       ** ИмяЛиста                                 - Строка - имя листа.
//       ** ИмяМакетаСШаблоном                       - Строка - имя макета объекта метаданных.
//       ** Служебный                                - Произвольный - дополнительная служебная информация.
//       ** ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//       ** ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//       ** ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//       ** ВысотаЗаголовкаТаблицыМакетаСШаблоном    - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//       ** ШаблонСДанными                           - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//       ** ЗаполняемыйШаблон                        - Неопределено, ТабличныйДокумент - заполняемый табличный документ.
//
Функция ПараметрыЗагрузкиТабличногоДокумента(УникальныйИдентификаторФормы) Экспорт

	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ДанныеФайла",                              Неопределено);
	ПараметрыЗагрузки.Вставить("РасширениеФайла",                          "");
	ПараметрыЗагрузки.Вставить("ЗаполняемыйШаблон",                        Неопределено);
	ПараметрыЗагрузки.Вставить("ПараметрыШапки",                           ПараметрыШапки());
	ПараметрыЗагрузки.Вставить("ИнформацияПоКолонкам",                     Новый ТаблицаЗначений);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    1);
	ПараметрыЗагрузки.Вставить("АдресХранилища",                           ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификаторФормы));
	ПараметрыЗагрузки.Вставить("ЛистыШаблона",                             Неопределено);

	Возврат ПараметрыЗагрузки;

КонецФункции

// Загружает данные в таблицу значений.
//
// Параметры:
//   ПараметрыЗагрузки - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента.
//
// Возвращаемое значение:
//   См. ТабличныйДокументВТаблицу.
//
Функция ЗагрузитьФайлВТаблицу(ПараметрыЗагрузки) Экспорт

	ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(ПараметрыЗагрузки.РасширениеФайла);
	ДвоичныеДанные = ПараметрыЗагрузки.ДанныеФайла; // ДвоичныеДанные
	ДвоичныеДанные.Записать(ПутьКВременномуФайлу);

	ДанныеФайла = Новый ТабличныйДокумент;
	ДанныеФайла.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	ФайловаяСистема.УдалитьВременныйФайл(ПутьКВременномуФайлу);
	
	Если ПараметрыЗагрузки.ЛистыШаблона <> Неопределено Тогда
		Для Каждого Область Из ДанныеФайла.Области Цикл
			ОбластьИмя = СтрЗаменить(Область.Имя, "ё", "е");
			
			Если ПараметрыЗагрузки.ЛистыШаблона.Свойство(ОбластьИмя) Тогда
				ШаблонСДанными = Новый ТабличныйДокумент;
				ШаблонСДанными.Вывести(ДанныеФайла.ПолучитьОбласть(Область.Имя));
				
				ПараметрыЗагрузки.ЛистыШаблона[ОбластьИмя].ШаблонСДанными = ШаблонСДанными;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = ТабличныйДокументВТаблицу(ДанныеФайла, ПараметрыЗагрузки);

	Возврат Результат;

КонецФункции

// Создает таблицу значений по данным из шаблона и сохраняет ее во временное хранилище.
// 
// Параметры:
//   ШаблонСДанными     - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//   ПараметрыЗагрузки  - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента.
//   КакТаблицаЗначений - Булево - Истина, если требуется вернуть результат в виде таблицы значений.
//
// Возвращаемое значение:
//   - ТаблицаЗначений - если запрашивается результат в виде таблицы.
//   - Структура - если запрашивается результат в виде структуры:
//       * ШаблонБезОшибокЗаполнения     - Булево - признак отсутствия ошибок.
//       * АдресТаблицыЗагруженныхДанных - Строка - адрес временного хранилища с загруженными данными.
//       * ПараметрыШапки                - Структура Из КлючИЗначение - параметры шапки.
//       * ШаблонСДанными                - ТабличныйДокумент - загружаемый табличный документ.
//       * ЛистыШаблона                  - Неопределено - используется одностраничный шаблон.
//                                       - Структура - описание многостраничного шаблона:
//         ** ИмяЛиста                                 - Строка - имя листа.
//         ** ИмяМакетаСШаблоном                       - Строка - имя макета объекта метаданных.
//         ** Служебный                                - Произвольный - дополнительная служебная информация.
//         ** ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//         ** ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//         ** ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//         ** ВысотаЗаголовкаТаблицыМакетаСШаблоном    - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//         ** ШаблонСДанными                           - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//         ** ЗаполняемыйШаблон                        - Неопределено, ТабличныйДокумент - заполняемый табличный документ.
//
Функция ТабличныйДокументВТаблицу(ШаблонСДанными, Знач ПараметрыЗагрузки, КакТаблицаЗначений = Ложь) Экспорт

	ПараметрыПрогресса = ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 30;

	Если ПараметрыЗагрузки.ЛистыШаблона = Неопределено Тогда
		Результат = ЛистТабличногоДокументаВТаблицу(ШаблонСДанными, ПараметрыЗагрузки, ПараметрыПрогресса);

	Иначе
		ШагИтерации = Цел(ПараметрыПрогресса.ШагИтерацииВПроцентах / ПараметрыЗагрузки.ЛистыШаблона.Количество());
		ПараметрыПрогресса.ШагИтерацииВПроцентах = ШагИтерации;
		
		ТаблицаЗагруженныхДанных = Новый ТаблицаЗначений;
		
		Для Каждого КлючИЗначение Из ПараметрыЗагрузки.ЛистыШаблона Цикл
			ПараметрыЗагрузки.ПараметрыШапки                           = ОбщегоНазначения.СкопироватьРекурсивно(КлючИЗначение.Значение.ПараметрыШапки);
			ПараметрыЗагрузки.ЗаполняемыйШаблон                        = КлючИЗначение.Значение.ЗаполняемыйШаблон;
			ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = КлючИЗначение.Значение.ВысотаЗаголовкаТаблицыЗагружаемогоМакета;
			ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыМакетаСШаблоном    = КлючИЗначение.Значение.ВысотаЗаголовкаТаблицыМакетаСШаблоном;
			
			Если ТипЗнч(КлючИЗначение.Значение.ИнформацияПоКолонкам) = Тип("ТаблицаЗначений") Тогда
				ПараметрыЗагрузки.ИнформацияПоКолонкам = КлючИЗначение.Значение.ИнформацияПоКолонкам.Скопировать();
			Иначе
				ПараметрыЗагрузки.ИнформацияПоКолонкам.Очистить();
				Для Каждого ЭлементКоллекции Из КлючИЗначение.Значение.ИнформацияПоКолонкам Цикл
					ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки.ИнформацияПоКолонкам.Добавить(), ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
			
			Результат = ЛистТабличногоДокументаВТаблицу(КлючИЗначение.Значение.ШаблонСДанными, ПараметрыЗагрузки, ПараметрыПрогресса);
			Результат.ТаблицаЗагруженныхДанных.ЗаполнитьЗначения(КлючИЗначение.Значение.Служебный, "Служебный");

			ПараметрыПрогресса.ПрогрессВыполнения = ПараметрыПрогресса.ПрогрессВыполнения + ШагИтерации;
			
			Для Каждого ЭлементКоллекции Из Результат.ТаблицаЗагруженныхДанных.Колонки Цикл
				Если ТаблицаЗагруженныхДанных.Колонки.Найти(ЭлементКоллекции.Имя) = Неопределено Тогда
					ТаблицаЗагруженныхДанных.Колонки.Добавить(ЭлементКоллекции.Имя, Новый ОписаниеТипов(ЭлементКоллекции.ТипЗначения), ЭлементКоллекции.Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.ТаблицаЗагруженныхДанных, ТаблицаЗагруженныхДанных);
			
			КлючИЗначение.Значение.ПараметрыШапки = Результат.ПараметрыШапки;
			КлючИЗначение.Значение.ШаблонСДанными = Результат.ШаблонСДанными;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗагруженныхДанных Цикл
			СтрокаТаблицыЗначений.НомерСтроки = ТаблицаЗагруженныхДанных.Индекс(СтрокаТаблицыЗначений) + 1;
		КонецЦикла;
		
		Результат.ТаблицаЗагруженныхДанных = ТаблицаЗагруженныхДанных.Скопировать();
	КонецЕсли;
	
	Если КакТаблицаЗначений Тогда
		Возврат Результат.ТаблицаЗагруженныхДанных;
	КонецЕсли;
	
	АдресХранилища = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "АдресХранилища", "");
	Результат.Вставить("АдресТаблицыЗагруженныхДанных", ПоместитьВоВременноеХранилище(Результат.ТаблицаЗагруженныхДанных, АдресХранилища));
	Результат.Удалить("ТаблицаЗагруженныхДанных");
	Результат.Вставить("ЛистыШаблона", ПараметрыЗагрузки.ЛистыШаблона);
	
	Возврат Результат;

КонецФункции

// Создает таблицу значений по данным из шаблона и сохраняет ее во временное хранилище.
// 
// Параметры:
//   ШаблонСДанными     - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//   ПараметрыЗагрузки  - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента. 
//   ПараметрыПрогресса - Структура - характеристики прогресса, см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса.
//
// Возвращаемое значение:
//   Структура Из КлючИЗначение:
//     * ШаблонБезОшибокЗаполнения - Булево - признак отсутствия ошибок.
//     * ТаблицаЗагруженныхДанных  - Строка - адрес временного хранилища с загруженными данными.
//     * ПараметрыШапки            - Структура Из КлючИЗначение - параметры шапки.
//     * ШаблонСДанными            - ТабличныйДокумент - загружаемый табличный документ.
//
Функция ЛистТабличногоДокументаВТаблицу(ШаблонСДанными, Знач ПараметрыЗагрузки, Знач ПараметрыПрогресса)

	Результат = Новый Структура;
	Результат.Вставить("ШаблонБезОшибокЗаполнения", Истина);
	Результат.Вставить("ТаблицаЗагруженныхДанных",  Новый ТаблицаЗначений);
	Результат.Вставить("ПараметрыШапки",            Новый Структура);
	Результат.Вставить("ШаблонСДанными",            Новый ТабличныйДокумент);
	
	ТаблицаСДаннымиМакета = ПолучитьТаблицуСДаннымиИзМакета(ШаблонСДанными);

	ИнформацияПоКолонкам                     = ПараметрыЗагрузки.ИнформацияПоКолонкам;
	ПараметрыШапки                           = ПараметрыЗагрузки.ПараметрыШапки;
	ЗаполняемыйШаблон                        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ЗаполняемыйШаблон", Неопределено);
	ВысотаЗаголовкаТаблицыЗагружаемогоМакета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);
	ВысотаЗаголовкаТаблицыМакетаСШаблоном    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ВысотаЗаголовкаТаблицыМакетаСШаблоном", 1);

	ЗагружатьВТабличныйДокумент = (ЗаполняемыйШаблон <> Неопределено);

	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");

	ТаблицаИнформацияПоКолонкам = ИнформацияПоКолонкам.Скопировать();

	СтрокаСДаннымиТаблицы = 0;
	ИнициализироватьКолонкиИШапку(ТаблицаИнформацияПоКолонкам, ТаблицаСДаннымиМакета, ПараметрыШапки, СтрокаСДаннымиТаблицы);

	Отбор = Новый Структура("ВИтогахВсегдаПустая", Истина);
	КоличествоПустыхКолонокДляОпределенияСтрокиИтогов = ТаблицаИнформацияПоКолонкам.НайтиСтроки(Отбор).Количество();

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	АвтоЦвет = Новый Цвет();

	ТаблицаЗагруженныхДанных = Новый ТаблицаЗначений;

	Для Каждого Колонка Из ТаблицаИнформацияПоКолонкам Цикл
		Если Колонка.ТипКолонки = Неопределено Тогда
			ТипКолонки = ОписаниеТипаСтрока;
		Иначе
			ТипКолонки = Колонка.ТипКолонки;
		КонецЕсли;
		ТаблицаЗагруженныхДанных.Колонки.Добавить(Колонка.ИмяКолонки, ТипКолонки, Колонка.ПредставлениеКолонки);
	КонецЦикла;

	ДобавитьСтандартныеКолонки(ТаблицаЗагруженныхДанных);

	Если ЗагружатьВТабличныйДокумент Тогда
		Отбор = Новый Структура("ВидимостьВМакете", Истина);
		КолонкиМакета = ТаблицаИнформацияПоКолонкам.НайтиСтроки(Отбор);

		СтрокаНачалаВывода = ВысотаЗаголовкаТаблицыЗагружаемогоМакета + ПараметрыШапки.Шаблоны.Количество();
		КоличествоКолонокШаблона = КолонкиМакета.Количество();

		ОбластьВывода = ЗаполняемыйШаблон.ПолучитьОбласть(СтрокаНачалаВывода, 1,
			СтрокаНачалаВывода , КоличествоКолонокШаблона);

		Счетчик = 1;
		Для Каждого Колонка Из КолонкиМакета Цикл
			Если ЗначениеЗаполнено(Колонка.ПозицияВМакете) Тогда
				ОбластьЗаполнения = ОбластьВывода.Область(1, Счетчик, 1, Счетчик);
				ОбластьЗаполнения.Параметр = Колонка.ИмяКолонки;
				ОбластьЗаполнения.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СтрокаСДаннымиТаблицы = СтрокаСДаннымиТаблицы
		+ ?(ЗагружатьВТабличныйДокумент, ВысотаЗаголовкаТаблицыЗагружаемогоМакета, ВысотаЗаголовкаТаблицыМакетаСШаблоном) - 1;
	КорректировкаНомераСтроки = СтрокаСДаннымиТаблицы - 1;
	
	ВсегоСтрок = ТаблицаСДаннымиМакета.Количество() - СтрокаСДаннымиТаблицы;
	ПроцентВыполнения = 0;

	// Начало чтения со строки за шапкой.
	Для НомерСтроки = СтрокаСДаннымиТаблицы По ТаблицаСДаннымиМакета.Количество() Цикл
		УстановитьПроцентПрогресса(ВсегоСтрок, НомерСтроки - СтрокаСДаннымиТаблицы, ПроцентВыполнения, ПараметрыПрогресса);

		СтрокаТаблицы = ТаблицаСДаннымиМакета.Получить(НомерСтроки - 1);

		СтрокаТаблицыПустая     = Истина;
		КоличествоКолонокИтогов = 0;
		СтрокаБезОшибок = Истина;

		НоваяСтрока = ТаблицаЗагруженныхДанных.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки - КорректировкаНомераСтроки;

		НомерКолонки = 0;
		Для Каждого Колонка Из ТаблицаИнформацияПоКолонкам Цикл
			Если Колонка.ПозицияВМакете = -1 Тогда
				Продолжить;
			КонецЕсли;

			НомерКолонки = НомерКолонки + 1;

			ЗначениеЯчейки = СокрЛП(СтрокаТаблицы["Колонка_" + Колонка.ПозицияВМакете]);

			Если СтрокаТаблицыПустая Тогда
				СтрокаТаблицыПустая = Не ЗначениеЗаполнено(ЗначениеЯчейки);
			КонецЕсли;

			КоличествоКолонокИтогов = КоличествоКолонокИтогов + ?(Колонка.ВИтогахВсегдаПустая И Не ЗначениеЗаполнено(ЗначениеЯчейки), 1, 0);

			ИмяКолонки = Колонка.ИмяКолонки;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				НоваяСтрока[ИмяКолонки] = ПриведениеЗначенияКПростомуТипу(ЗначениеЯчейки, Колонка.ТипКолонки);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(НоваяСтрока[ИмяКолонки]) И ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки(Колонка.ТипКолонки.Типы(), ЗначениеЯчейки);
			КонецЕсли;

			Если ЗагружатьВТабличныйДокумент Тогда
				Ячейка = ОбластьВывода.Область(1, НомерКолонки, 1, НомерКолонки);
				Если Колонка.ОбязательнаДляЗаполнения И Не ЗначениеЗаполнено(НоваяСтрока[ИмяКолонки]) Тогда
					Ячейка.ЦветФона  = ЦветаСтиля.ЦветФонаВнимание;
					Ячейка.ЦветРамки = WebЦвета.СеребристоСерый;
					Ячейка.Обвести(Линия,, Линия, Линия);
					СтрокаБезОшибок = Ложь;
				Иначе
					Ячейка.ЦветФона = АвтоЦвет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если СтрокаТаблицыПустая Тогда
			ТаблицаЗагруженныхДанных.Удалить(НоваяСтрока);
			КорректировкаНомераСтроки = КорректировкаНомераСтроки + 1;
		ИначеЕсли КоличествоПустыхКолонокДляОпределенияСтрокиИтогов <> 0 И КоличествоКолонокИтогов = КоличествоПустыхКолонокДляОпределенияСтрокиИтогов Тогда
			ТаблицаЗагруженныхДанных.Удалить(НоваяСтрока);
			// После обнаружения строки итогов прерываем чтение.
			Прервать;
		Иначе
			Результат.ШаблонБезОшибокЗаполнения = СтрокаБезОшибок;

			Если ЗагружатьВТабличныйДокумент Тогда
				ОбластьВывода.Параметры.Заполнить(НоваяСтрока);
				ЗаполняемыйШаблон.Вывести(ОбластьВывода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Результат.ТаблицаЗагруженныхДанных = ТаблицаЗагруженныхДанных.Скопировать();
	Результат.ПараметрыШапки           = ПараметрыШапки;

	ЗаполненныеШаблоны = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "ЗаполненныеШаблоны", Новый Массив);

	Если ЗагружатьВТабличныйДокумент Тогда
		Если ЗаполненныеШаблоны.Количество() > 0 Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;

			// Вывести строки шапки в результирующий табличный документ.
			ОбластьЗаполнения = ТабличныйДокумент.ПолучитьОбласть(1, 1, 1, ЗаполняемыйШаблон.ШиринаТаблицы);
			ОбластьЗаполнения.Область(1, 1, 1, ЗаполняемыйШаблон.ШиринаТаблицы).Объединить();

			Для Каждого СтрокаШапки Из ЗаполненныеШаблоны Цикл
				ОбластьЗаполнения.ТекущаяОбласть.Текст = СтрокаШапки;
				ТабличныйДокумент.Вывести(ОбластьЗаполнения);
			КонецЦикла;

			// Вывести в результирующий табличный документ заполненный загружаемыми строками табличный документ.
			ТабличныйДокумент.Вывести(ЗаполняемыйШаблон);

			Результат.Вставить("ШаблонСДанными", ТабличныйДокумент);
		Иначе
			Результат.Вставить("ШаблонСДанными", ЗаполняемыйШаблон);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Считывает данные табличного документа в таблицу значений.
//
// Параметры:
//   МакетСДанными             - ТабличныйДокумент - данные, прочитанные из файла.
//   МаксимальнаяШиринаТаблицы - Число - максимальное количество перебираемых строк при поиске колонок шапки.
//
// Возвращаемое значение:
//   ТаблицаЗначений, ДеревоЗначений - таблица с составом колонок из файла, колонки именуются с префиксом "Колонка_".
//
Функция ПолучитьТаблицуСДаннымиИзМакета(МакетСДанными, МаксимальнаяШиринаТаблицы = 100)

	ТабличныйДокумент = Новый ТабличныйДокумент;

	КоличествоКолонок = ?(МакетСДанными.ШиринаТаблицы = 0, 1, Мин(МакетСДанными.ШиринаТаблицы, МаксимальнаяШиринаТаблицы));
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		АдресЯчейки = "R1" + "C" + Формат(НомерКолонки, "ЧГ=0");
		Ячейка = ТабличныйДокумент.Область(АдресЯчейки);
		Ячейка.Текст = "Колонка_" + Формат(НомерКолонки, "ЧГ=0");
	КонецЦикла;

	ТабличныйДокумент.Вывести(МакетСДанными);

	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	Построитель.Выполнить();
	ТаблицаСДаннымиИзМакета = Построитель.Результат.Выгрузить();

	Возврат ТаблицаСДаннымиИзМакета;

КонецФункции

Функция ЗначениеЯчейки(Типы, ЗначениеЯчейки)

	ДанныеЯчейки = "";
	Для Каждого ТипДанных Из Типы Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипДанных);
		
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			Если Не МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0 Тогда
				ДанныеЯчейки = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЯчейки) Тогда
				ДанныеЯчейки = Справочники[МетаданныеОбъекта.Имя].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЯчейки) Тогда
				ДанныеЯчейки = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
			Для Каждого ЗначениеПеречисления Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
				Если Строка(ЗначениеПеречисления) = СокрЛП(ЗначениеЯчейки) Тогда
					ДанныеЯчейки = Перечисления[МетаданныеОбъекта.Имя][ЗначениеПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(МетаданныеОбъекта) Тогда
			ДанныеЯчейки = ПланыСчетов[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки);
			Если ДанныеЯчейки.Пустая() Тогда
				ДанныеЯчейки = ПланыСчетов[МетаданныеОбъекта.Имя].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
			Если НЕ МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0 Тогда
				ДанныеЯчейки = ПланыВидовХарактеристик[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда
				ДанныеЯчейки = ПланыВидовХарактеристик[МетаданныеОбъекта.Имя].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		Иначе
			ДанныеЯчейки = СтрЗаменить(ЗначениеЯчейки, Символы.НПП, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеЯчейки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЯчейки;
	
КонецФункции

// Приводит строковое значение к требуемому простому типу.
//
// Параметры:
//   Значение - Строка - преобразуемое значение.
//   ОписаниеТипов - ОписаниеТипов из Дата, Булево, Строка, Число - ожидаемый тип значения.
//
// Возвращаемое значение:
//   Дата, Булево, Строка, Число - преобразованное значение.
//
Функция ПриведениеЗначенияКПростомуТипу(Значение, ОписаниеТипов) Экспорт

	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если Тип = Тип("Дата") Тогда
			Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение, ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);

		ИначеЕсли Тип = Тип("Булево") Тогда
			ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(Значение);

		ИначеЕсли Тип = Тип("Строка") Тогда
			ОписаниеТипаБулево = Новый ОписаниеТипов("Строка");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(СтрЗаменить(Значение, Символы.НПП, ""));

		ИначеЕсли Тип = Тип("Число") Тогда
			НецифровыеСимволы = СтрСоединить(СтрРазделить(Значение, "1234567890,."));
			Значение = СтрСоединить(СтрРазделить(Значение, НецифровыеСимволы));
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Возврат ОписаниеТипаЧисло.ПривестиЗначение(Значение);

		КонецЕсли;
	КонецЦикла;

	Возврат Значение;

КонецФункции

Функция ТекстЯчейкиКРазбору(Знач ТекстЯчейки)

	ЛишниеСимволы = "[]{}";
	ТекстЯчейки = СтрРазделить(ТекстЯчейки, ЛишниеСимволы, Ложь);
	ТекстЯчейки = СтрСоединить(ТекстЯчейки, " ");
	ТекстЯчейки = СтрРазделить(ТекстЯчейки, " ", Ложь);

	// Удалим лишние пробелы.
	Для Инд = 0 По ТекстЯчейки.Количество() - 1 Цикл
		ТекстЯчейки[Инд] = СокрЛП(ТекстЯчейки[Инд]);
	КонецЦикла;

	ТекстЯчейки = СтрСоединить(ТекстЯчейки, " ");

	Возврат ТекстЯчейки;

КонецФункции

// Заполняет параметры шапки и определяет колонки из загружаемых данных.
//
// Параметры:
//   ИнформацияПоКолонкам  - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ТаблицаСДаннымиМакета - ТаблицаЗначений - 
//   ПараметрыШапки        - Структура - 
//   СтрокаСДаннымиТаблицы - Число - номер строки, с которой начинается чтение данных строк таблицы.
//   ВысотаШапки           - Число - максимальное количество перебираемых строк при поиске колонок шапки.
//
Процедура ИнициализироватьКолонкиИШапку(ИнформацияПоКолонкам, ТаблицаСДаннымиМакета, ПараметрыШапки = Неопределено,
			СтрокаСДаннымиТаблицы = 0, ВысотаШапки = 100)

	Для Каждого Строка Из ИнформацияПоКолонкам Цикл
		Строка.ПозицияВМакете = -1;
	КонецЦикла;

	КолонокКПоиску = ИнформацияПоКолонкам.Количество();
	НомерСтроки = 1;

	// Чтение данных шапки.
	ШаблоныДанныхШапки   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Шаблоны",   Новый Массив);
	ПараметрыДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Параметры", Новый Структура);

	// Очистка значений параметров.
	Для Каждого ПараметрДанныхШапки Из ПараметрыДанныхШапки Цикл
		ПараметрыДанныхШапки[ПараметрДанныхШапки.Ключ] = "";
	КонецЦикла;

	МассивСтрокШапки    = Новый Массив; // Для формирования заголовка в ЗаполняемыйШаблон.
	ОбработанныеШаблоны = Новый Массив; // Шаблоны, исключаемые из обработки.
	ОбработанныеЯчейки  = Новый Массив; // Ячейки, исключаемые из обработки.

	НомерОбработаннойСтроки = 1;

	Если ШаблоныДанныхШапки.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСДаннымиМакета Цикл
			Если НомерСтроки = ВысотаШапки Тогда
				Прервать;
			КонецЕсли;

			Если ШаблоныДанныхШапки.Количество() = ОбработанныеШаблоны.Количество() Тогда
				Прервать;
			КонецЕсли;

			Для НомерКолонки = 1 По ТаблицаСДаннымиМакета.Колонки.Количество() Цикл
				АдресЯчейки = Строка(НомерСтроки) + ";" + Строка(НомерКолонки);
				Если ОбработанныеЯчейки.Найти(АдресЯчейки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Колонка = ТаблицаСДаннымиМакета.Колонки.Получить(НомерКолонки - 1);

				ЗначениеЯчейки = СокрЛП(СтрокаТаблицы[Колонка.Имя]);

				Если ПустаяСтрока(ЗначениеЯчейки) Тогда
					Продолжить;
				КонецЕсли;

				ШаблонНайден = Ложь;

				Для Каждого ДанныеШаблона Из ШаблоныДанныхШапки Цикл
					Если ШаблонНайден Тогда
						Прервать;
					КонецЕсли;

					Шаблон = ДанныеШаблона.Шаблон;  // Шаблон состоит ключевых слов в фигурных скобках ({}), параметров в квадратных скобках ([])
													// и любых иных слов и символов, например:
													// "{Отчет} {реализации} {№} [Параметр1] {от} [Параметр2]".
													// Шаблон - это отдельная ячейка в области ДанныеШапки макета используемого объекта метаданных.

					Если ОбработанныеШаблоны.Найти(Шаблон) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;

					КлючевыеСловаШаблона = ДанныеШаблона.КлючевыеСловаШаблона;
					ПараметрыШаблона     = ДанныеШаблона.ПараметрыШаблона;
					ШиринаОбластиПоиска  = ДанныеШаблона.ШиринаОбластиПоиска;
					ВысотаОбластиПоиска  = ДанныеШаблона.ВысотаОбластиПоиска;

					ВсегоСовпадений = КлючевыеСловаШаблона.Количество();

					Если ВсегоСовпадений = 0 Тогда // Нет ключевых слов поиска.
						Продолжить;
					КонецЕсли;

					ЗначениеОбласти = ЗначениеЯчейки;

					ПоследняяСтрокаОбласти = НомерСтроки;

					СодержимоеЯчеек = Новый Массив;
					СодержимоеЯчеек.Добавить(Новый Структура("Строка, Колонка, СодержимоеЯчейки",
						НомерСтроки, НомерКолонки, ЗначениеЯчейки));
					НачальнаяСтрокаОбласти  = НомерСтроки;
					НачальнаяКолонкаОбласти = НомерКолонки;
					КонечнаяСтрокаОбласти  = НомерСтроки;
					КонечнаяКолонкаОбласти = НомерКолонки;

					// Чтение данных из области поиска.
					// Область поиска задается в примечании ячейки области ДанныеШапки макета используемого объекта метаданных в формате:
					// "ШиринаОбластиПоиска = 8
					//  ВысотаОбластиПоиска = 4".
					Если ВысотаОбластиПоиска <> 1 Или ШиринаОбластиПоиска <> 1 Тогда
						НачальныйНомерСтроки   = НомерСтроки + ?(ШиринаОбластиПоиска > 1, 0, 1);
						НачальныйНомерКолонки  = НомерКолонки + ?(ШиринаОбластиПоиска > 1, 1, 0);
						ПоследняяСтрокаОбласти = Мин(НомерСтроки + ВысотаОбластиПоиска - 1, ТаблицаСДаннымиМакета.Количество());
						ВсегоКолонокОбласти    = Мин(НомерКолонки + ШиринаОбластиПоиска - 1, ТаблицаСДаннымиМакета.Колонки.Количество());

						Для НомерСтрокиОбласти = НачальныйНомерСтроки По ПоследняяСтрокаОбласти Цикл
							СтрокаОбласти = ТаблицаСДаннымиМакета.Получить(НомерСтрокиОбласти - 1);
							Для НомерКолонкиОбласти = НачальныйНомерКолонки По ВсегоКолонокОбласти Цикл
								ЗначениеЯчейкиОбласти = СокрЛП(СтрокаОбласти["Колонка_" + (НомерКолонкиОбласти)]);

								СодержимоеЯчеек.Добавить(Новый Структура("Строка, Колонка, СодержимоеЯчейки",
									НомерСтрокиОбласти, НомерКолонкиОбласти, ЗначениеЯчейкиОбласти));

								Если ПустаяСтрока(ЗначениеЯчейкиОбласти) Тогда
									Продолжить;
								КонецЕсли;

								ЗначениеОбласти = ЗначениеОбласти + Символы.ПС + ЗначениеЯчейкиОбласти;
							КонецЦикла;

							НачальныйНомерКолонки = НомерКолонки;
						КонецЦикла;

						НомерКолонки = ВсегоКолонокОбласти;
					КонецЕсли;

					// Удаление из шаблона незначимых частей для поиска параметров.
					ПодготовленныйШаблон = СтрЗаменить(Шаблон, "{", Символы.ПС + "{");
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "{", Символы.ПС + "{");
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "}", "}" + Символы.ПС);
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "[", Символы.ПС + "[");
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "]", "]" + Символы.ПС);
					ЗначимыеЧастиШаблона = СтрРазделить(ПодготовленныйШаблон, Символы.ПС, Ложь);

					Инд = ЗначимыеЧастиШаблона.Количество() - 1;
					Пока Инд >=0 Цикл
						ЧастьШаблона = ЗначимыеЧастиШаблона[Инд];
						Если СтрНайти(ЧастьШаблона, "{") = 0 И СтрНайти(ЧастьШаблона, "[") = 0 Тогда
							ЗначимыеЧастиШаблона.Удалить(Инд);
						КонецЕсли;
						Инд = Инд - 1;
					КонецЦикла;

					// Поиск ключевых слов.
					ЗначениеОбласти = ТекстЯчейкиКРазбору(ЗначениеОбласти);
					ШаблонОбласти   = "";

					НачальнаяПозиция = 1;
					Для Каждого КлючевоеСловоШаблона Из КлючевыеСловаШаблона Цикл
						Позиция = СтрНайти(ЗначениеОбласти, КлючевоеСловоШаблона);
						Если Позиция = 0 Тогда
							Продолжить;
						КонецЕсли;

						ДлинаСлова = СтрДлина(КлючевоеСловоШаблона);
						Замена = Сред(ЗначениеОбласти, Позиция, ДлинаСлова);

						// Анализ содержимого до ключевого слова, т.к. между ключевыми словами может содержаться параметр.
						СтрокаДоСловаЗамены = "";
						ДобавлятьСловоДоЗамены = Ложь;
						ИндЗначимойЧасти = ЗначимыеЧастиШаблона.Найти("{" + КлючевоеСловоШаблона + "}");
						Если ИндЗначимойЧасти <> Неопределено И ИндЗначимойЧасти > 0 Тогда
							ПредыдущаяЗначимаяЧасть = ЗначимыеЧастиШаблона[ИндЗначимойЧасти - 1];
							Если СтрНайти(ПредыдущаяЗначимаяЧасть, "[") > 0 Тогда
								СтрокаДоСловаЗамены = Сред(ЗначениеОбласти, НачальнаяПозиция, ?(НачальнаяПозиция = Позиция, 0, Позиция -1 - НачальнаяПозиция));
								ДобавлятьСловоДоЗамены = Истина;
								Если ПустаяСтрока(СтрокаДоСловаЗамены) Тогда
									СтрокаДоСловаЗамены = " ";
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;

						// Заполнение шаблона области.
						ЗначениеОбласти = Лев(ЗначениеОбласти, Позиция - 1) + Сред(ЗначениеОбласти, Позиция + ДлинаСлова);
						ШаблонОбласти   = ШаблонОбласти + ?(ДобавлятьСловоДоЗамены, Символы.ПС + СокрЛП(СтрокаДоСловаЗамены), "")
							+ Символы.ПС +  "{" + Замена + "}";

						НачальнаяПозиция = Позиция;
						ВсегоСовпадений = ВсегоСовпадений - 1;
					КонецЦикла;

					ШаблонОбласти = ШаблонОбласти + Символы.ПС + СокрЛП(Сред(ЗначениеОбласти, НачальнаяПозиция));
					СоставЯчейки = СтрРазделить(ШаблонОбласти, Символы.ПС, Ложь);

					ШаблонНайден = Истина;
					НайденыПараметры = Ложь;
					СтрокаШапки = Шаблон;

					// Заполнение параметров.
					ИндексПараметра = 0;
					Для ИндексЧасти = 0 По СоставЯчейки.Количество() - 1 Цикл
						Если ИндексПараметра > ПараметрыШаблона.Количество() - 1 Тогда
							Прервать;
						КонецЕсли;

						Если СтрНайти(СоставЯчейки[ИндексЧасти], "{") = 0 Тогда
							Попытка
								ЗначениеПараметра = СоставЯчейки[ИндексЧасти];
								ПараметрыДанныхШапки[ПараметрыШаблона[ИндексПараметра]] = ЗначениеПараметра;

								СтрокаШапки = СтрЗаменить(СтрокаШапки, "[" + ПараметрыШаблона[ИндексПараметра] + "]", ЗначениеПараметра);

								НайденыПараметры = Истина;
								ИндексПараметра = ИндексПараметра + 1;
							Исключение
								Прервать;
							КонецПопытки;
						КонецЕсли;

						// Получим обработанные ячейки.
						Инд = 0;
						Для Каждого СодержимоеЯчейки Из СодержимоеЯчеек Цикл
							ИскомаяЧасть = СтрЗаменить(СоставЯчейки[ИндексЧасти], "{", "");
							ИскомаяЧасть = СтрЗаменить(ИскомаяЧасть, "}", "");
							Если СтрНайти(СодержимоеЯчейки.СодержимоеЯчейки, ИскомаяЧасть) > 0 Тогда
								КонечнаяСтрокаОбласти  = Макс(КонечнаяСтрокаОбласти, СодержимоеЯчейки.Строка);
								КонечнаяКолонкаОбласти = Макс(КонечнаяКолонкаОбласти, СодержимоеЯчейки.Колонка);
								Прервать;
							КонецЕсли;

							Инд = Инд + 1;
						КонецЦикла;
					КонецЦикла;

					// Заполнение строки шапки для вывода в ЗаполняемыйШаблон.
					Если НайденыПараметры Тогда
						СтрокаШапки = СтрЗаменить(СтрокаШапки, "{", "");
						СтрокаШапки = СтрЗаменить(СтрокаШапки, "}", "");
						МассивСтрокШапки.Добавить(СтрокаШапки);
						ОбработанныеШаблоны.Добавить(Шаблон);
					КонецЕсли;

					// Добавление обработанных ячеек области текущего шаблона для исключения из анализа других шаблонов.
					Для СтрокаЯчейки = НачальнаяСтрокаОбласти По КонечнаяСтрокаОбласти Цикл
						Для КолонкаЯчейки = НачальнаяКолонкаОбласти По КонечнаяКолонкаОбласти Цикл
							АдресЯчейки = Строка(СтрокаЯчейки) + ";" + Строка(КолонкаЯчейки);
							ОбработанныеЯчейки.Добавить(АдресЯчейки);
						КонецЦикла;
					КонецЦикла;

					НомерОбработаннойСтроки = Макс(НомерСтроки, КонечнаяСтрокаОбласти - 1);
				КонецЦикла;
			КонецЦикла;

			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;

	Если МассивСтрокШапки.Количество() > 0 Тогда
		ПараметрыШапки.Вставить("ЗаполненныеШаблоны", МассивСтрокШапки);
	КонецЕсли;

	Если ОбработанныеШаблоны.Количество() = 0 Тогда
		НомерСтрокиВыборки = 1;
	Иначе
		НомерСтрокиВыборки = НомерОбработаннойСтроки + 1;
	КонецЕсли;

	// Чтение заголовка таблицы.
	Для НомерСтроки = НомерСтрокиВыборки По ТаблицаСДаннымиМакета.Количество() - 1 Цикл
		СтрокаТаблицы = ТаблицаСДаннымиМакета[НомерСтроки - 1];

		Если НомерСтроки = ВысотаШапки Тогда
			Прервать;
		КонецЕсли;

		Если КолонокКПоиску = 0 Тогда
			Прервать;
		КонецЕсли;

		// Поиск по точному совпадению значения ячейки табличного документа ожидаемому значению.
		Для Каждого Колонка Из ТаблицаСДаннымиМакета.Колонки Цикл
			ЗначениеЯчейки = СокрЛП(СтрокаТаблицы[Колонка.Имя]);
			ПозицияВМакете = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Колонка.Имя, "Колонка_", ""));

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				// Возможно, шапка начинается с группы колонок.
				Отбор = Новый Структура("Группа, ПозицияВМакете", ЗначениеЯчейки, -1);
				НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонки.Количество() > 0 Тогда
					Если СтрокаСДаннымиТаблицы = 0 Тогда
						СтрокаСДаннымиТаблицы = НомерСтроки;
					Иначе
						СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
					КонецЕсли;

					Продолжить;
				КонецЕсли;

				// Поиск колонки.
				Отбор = Новый Структура("Синоним, ПозицияВМакете", ЗначениеЯчейки, -1);
				НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонки.Количество() > 0 Тогда
					НайденныеКолонки[0].ПозицияВМакете = ПозицияВМакете;
					КолонокКПоиску = КолонокКПоиску - 1;

					Если СтрокаСДаннымиТаблицы = 0 Тогда
						СтрокаСДаннымиТаблицы = НомерСтроки;
					Иначе
						СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
					КонецЕсли;
				Иначе
					Отбор = Новый Структура("ПредставлениеКолонки, ПозицияВМакете", ЗначениеЯчейки, -1);
					НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
					Если НайденныеКолонки.Количество() > 0 Тогда
						НайденныеКолонки[0].ПозицияВМакете = ПозицияВМакете;
						КолонокКПоиску = КолонокКПоиску - 1;

						Если СтрокаСДаннымиТаблицы = 0 Тогда
							СтрокаСДаннымиТаблицы = НомерСтроки;
						Иначе
							СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если КолонокКПоиску > 0 Тогда
			// Поиск по частичному вхождению ожидаемого значения в значение ячейки табличного документа.
			Для Каждого Колонка Из ТаблицаСДаннымиМакета.Колонки Цикл
				ЗначениеЯчейки = СокрЛП(СтрокаТаблицы[Колонка.Имя]);
				ПозицияВМакете = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Колонка.Имя, "Колонка_", ""));

				Отбор = Новый Структура("ПозицияВМакете", ПозицияВМакете);
				НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонки.Количество() = 0 И ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					Отбор = Новый Структура("ПозицияВМакете", -1);
					НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);

					Для Каждого НайденнаяКолонка Из НайденныеКолонки Цикл
						Если Не ПустаяСтрока(НайденнаяКолонка.Синоним) Тогда
							СоставСинонима = СтрРазделить(НайденнаяКолонка.Синоним, "/", Ложь);
							Для Каждого ЧастьСинонима Из СоставСинонима Цикл
								ПозицияСинонима = СтрНайти(ЗначениеЯчейки, СокрЛП(ЧастьСинонима));
								Если ПозицияСинонима > 0 Тогда
									НайденнаяКолонка.ПозицияВМакете = ПозицияВМакете;
									КолонокКПоиску = КолонокКПоиску - 1;

									Если СтрокаСДаннымиТаблицы = 0 Тогда
										СтрокаСДаннымиТаблицы = НомерСтроки;
									Иначе
										СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
									КонецЕсли;

									ЗавершитьПоиск = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗавершитьПоиск Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;

						Если Не ПустаяСтрока(НайденнаяКолонка.ПредставлениеКолонки) Тогда
							СоставСинонима = СтрРазделить(НайденнаяКолонка.ПредставлениеКолонки, "/", Ложь);
							ЗавершитьПоиск = Ложь;
							Для Каждого ЧастьСинонима Из СоставСинонима Цикл
								ПозицияПредставленияКолонки = СтрНайти(ЗначениеЯчейки, СокрЛП(ЧастьСинонима));
								Если ПозицияПредставленияКолонки > 0 Тогда
									НайденнаяКолонка.ПозицияВМакете = ПозицияВМакете;
									КолонокКПоиску = КолонокКПоиску - 1;

									Если СтрокаСДаннымиТаблицы = 0 Тогда
										СтрокаСДаннымиТаблицы = НомерСтроки;
									Иначе
										СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
									КонецЕсли;

									ЗавершитьПоиск = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗавершитьПоиск Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	СтрокаСДаннымиТаблицы = СтрокаСДаннымиТаблицы + 1;

КонецПроцедуры

// Конструктор параметров загрузки методами API.
//
// Возвращаемое значение:
//   Структура:
//     * ИмяОбъектаМетаданных          - Строка - имя объекта метаданных, из которого берутся данные для выгрузки/загрузки.
//     * ИмяТабличнойЧасти             - Строка - имя таблицы-источника колонок из указанного объекта метаданных.
//     * АдресТаблицыЗагруженныхДанных - Строка - адрес хранилища с результатом.
//     * ОбязательныеКолонки           - Массив из Строка - имена колонок, заполнение которых проверяется.
//     * ПараметрыШапки                - см. ПараметрыШапки.
//     * ИнформацияПоКолонкам          - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//     * УчетнаяЗапись                 - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//     * НачалоПериода                 - Дата - начало выборки данных.
//     * КонецПериода                  - Дата - окончание выборки данных.
//     * ЛистыШаблона                             - Неопределено - используется одностраничный шаблон.
//                                                - Структура - описание многостраничного шаблона:
//       ** ИмяЛиста                                 - Строка - имя листа.
//       ** ИмяМакетаСШаблоном                       - Строка - имя макета объекта метаданных.
//       ** Служебный                                - Произвольный - дополнительная служебная информация.
//       ** ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//       ** ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//       ** ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//       ** ВысотаЗаголовкаТаблицыМакетаСШаблоном    - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//       ** ШаблонСДанными                           - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//       ** ЗаполняемыйШаблон                        - Неопределено, ТабличныйДокумент - заполняемый табличный документ.
//
Функция ПараметрыЗагрузкиИнтеграционнымиМетодами() Экспорт

	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ИмяОбъектаМетаданных",          "");
	ПараметрыЗагрузки.Вставить("ИмяТабличнойЧасти",             "");
	ПараметрыЗагрузки.Вставить("АдресТаблицыЗагруженныхДанных", "");
	ПараметрыЗагрузки.Вставить("ОбязательныеКолонки",           Новый Массив);
	ПараметрыЗагрузки.Вставить("ПараметрыШапки",                ПараметрыШапки());
	ПараметрыЗагрузки.Вставить("ИнформацияПоКолонкам",          Новый ТаблицаЗначений);
	ПараметрыЗагрузки.Вставить("ЛистыШаблона",                  Неопределено);

	ПараметрыЗагрузки.Вставить("УчетнаяЗапись",                 Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
	ПараметрыЗагрузки.Вставить("НачалоПериода",                 Дата(1, 1, 1));
	ПараметрыЗагрузки.Вставить("КонецПериода",                  Дата(1, 1, 1));

	Возврат ПараметрыЗагрузки;

КонецФункции

#КонецОбласти

#Область ПодготовкаКВыгрузкеДанных

// Конструктор параметров выгрузки данных в макет.
//
// Возвращаемое значение:
//   Структура:
//     * УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//     * ИмяОбъектаМетаданных    - Строка - полное имя объекта метаданных.
//     * ИмяМакетаСШаблоном      - Строка - имя макета объекта метаданных.
//     * СсылкаНаОбъект          - Неопределено, ЛюбаяСсылка - ссылка на объект, данные по которому выводятся в табличный 
//                                   документ.
//     * ИнформацияПоКолонкам    - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//     * ПараметрыШапки          - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//     * ДополнительныеПараметры - Структура - любые дополнительные параметры.
//
Функция ПараметрыВыгрузкиДанныхВМакет() Экспорт

	ПараметрыВыгрузкиДанныхВМакет = Новый Структура;
	ПараметрыВыгрузкиДанныхВМакет.Вставить("УчетнаяЗапись",           Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ИмяОбъектаМетаданных",    "");
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ИмяМакетаСШаблоном",      "");
	ПараметрыВыгрузкиДанныхВМакет.Вставить("СсылкаНаОбъект",          Неопределено);
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ИнформацияПоКолонкам",    Новый ТаблицаЗначений);
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ПараметрыШапки",          ПараметрыШапки());
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ДополнительныеПараметры", Новый Структура);

	Возврат ПараметрыВыгрузкиДанныхВМакет;
	
КонецФункции

// Формирует табличный документ для переданной в параметра ссылки на объект.
//
// Параметры:
//   Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыВыгрузкиДанныхВМакет.
//
// Возвращаемое значение:
//   Структура:
//     * ШаблонСДанными - ТабличныйДокумент - сформированный табличный документ;
//     * ОписаниеОшибки - Строка - описание ошибки.
//
Функция СформироватьТабличныйДокументПоИмениМакетаСШаблоном(Параметры) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ШаблонСДанными", Новый ТабличныйДокумент);
	Результат.Вставить("ОписаниеОшибки", "");

	МенеджерОбъекта = МенеджерОбъекта(Параметры.ИмяОбъектаМетаданных); // МенеджерОбъектаМетаданных

	Макет = УправлениеПечатью.МакетПечатнойФормы(Параметры.ИмяОбъектаМетаданных + "." + Параметры.ИмяМакетаСШаблоном); // ТабличныйДокумент

	Если Макет = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается, т.к. отсутствует макет %1 у объекта с типом: %2'"),
			Параметры.ИмяМакетаСШаблоном,
			Параметры.ИмяОбъектаМетаданных);
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;

	МассивОшибок = Новый Массив;

	ШаблонСДанными = Результат.ШаблонСДанными;

	// Заполнение шапки макета.

	Попытка
		ОбластьДанныеШапки = Макет.ПолучитьОбласть("ДанныеШапки");
	Исключение
		ОбластьДанныеШапки = Неопределено;
	КонецПопытки;

	// ОбластьДанныеШапки может быть переопределена и заполнена в модуле менеджера используемого объекта метаданных.
	Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ЗаполнитьШапкуМакета") Тогда
		МенеджерОбъекта.ЗаполнитьШапкуМакета(ОбластьДанныеШапки, Параметры);
	КонецЕсли;

	Если ОбластьДанныеШапки <> Неопределено Тогда
		ШаблонСДанными.Вывести(ОбластьДанныеШапки);
	КонецЕсли;

	// Заполнение заголовка таблицы макета.

	Попытка
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	Исключение
		ОбластьЗаголовокТаблицы = Неопределено;
	КонецПопытки;

	// ОбластьЗаголовокТаблицы может быть переопределена и заполнена в модуле менеджера используемого объекта метаданных.
	Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ЗаполнитьЗаголовокТаблицыМакета") Тогда
		МенеджерОбъекта.ЗаполнитьЗаголовокТаблицыМакета(ОбластьЗаголовокТаблицы, Параметры);
	КонецЕсли;

	Если ОбластьЗаголовокТаблицы <> Неопределено Тогда
		ШаблонСДанными.Вывести(ОбластьЗаголовокТаблицы);
	КонецЕсли;

	// Заполнение строк макета.

	Попытка
		ОбластьДанныеСтроки = Макет.ПолучитьОбласть("ДанныеСтроки");
	Исключение
		ОбластьДанныеСтроки = Неопределено;
	КонецПопытки;

	ДанныеСтрокМакета = Неопределено;
	Если ОбластьДанныеСтроки <> Неопределено Тогда
		// Данные строк таблицы макета должны быть получены в модуле менеджера используемого объекта метаданных.
		ОписаниеОшибки = "";

		Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ПолучитьДанныеСтрокТаблицыМакета") Тогда
			ДанныеСтрокМакета = МенеджерОбъекта.ПолучитьДанныеСтрокТаблицыМакета(Параметры, ОписаниеОшибки);
		КонецЕсли;

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			МассивОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ОбластьДанныеСтроки <> Неопределено И ДанныеСтрокМакета <> Неопределено Тогда
		Если ТипЗнч(ДанныеСтрокМакета) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			Пока ДанныеСтрокМакета.Следующий() Цикл
				ОбластьДанныеСтроки.Параметры.Заполнить(ДанныеСтрокМакета);
				ШаблонСДанными.Вывести(ОбластьДанныеСтроки);
			КонецЦикла;
		Иначе
			Для Каждого ДанныеСтроки Из ДанныеСтрокМакета Цикл
				ОбластьДанныеСтроки.Параметры.Заполнить(ДанныеСтроки);
				ШаблонСДанными.Вывести(ОбластьДанныеСтроки);
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Таблица макета может быть заполнена в модуле менеджера используемого объекта метаданных.
		Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ВывестиТаблицуМакета") Тогда
			МенеджерОбъекта.ВывестиТаблицуМакета(ШаблонСДанными, Параметры);
		КонецЕсли;
	КонецЕсли;

	// Заполнение подвала макета.

	Попытка
		ОбластьДанныеПодвала = Макет.ПолучитьОбласть("ДанныеПодвала");
	Исключение
		ОбластьДанныеПодвала = Неопределено;
	КонецПопытки;

	// ОбластьДанныеПодвала может быть переопределена и заполнена в модуле менеджера используемого объекта метаданных.
	Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ЗаполнитьПодвалМакета") Тогда
		МенеджерОбъекта.ЗаполнитьПодвалМакета(ОбластьДанныеПодвала, Параметры);
	КонецЕсли;

	Если ОбластьДанныеПодвала <> Неопределено Тогда
		ШаблонСДанными.Вывести(ОбластьДанныеПодвала);
	КонецЕсли;

	Результат.ШаблонСДанными = ШаблонСДанными;
	Результат.ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

// Формирует строку параметров запроса (QUERY).
// 
// Параметры:
//   ОбъектXDTO          - ОбъектXDTO - объект, из реквизитов с формой "атрибут" которого формируется строка.
//   ТипОбъекта          - ТипОбъектаXDTO - тип объекта из операнда ОбъектXDTO.
//   ДобавитьРазделитель - Булево - добавить к строке предваряющий разделитель (знак вопроса).
// 
// Возвращаемое значение:
//   Строка - строковое представление параметров запроса для использования в URI.
//
Функция ПараметрыЗапроса(ОбъектXDTO, ТипОбъекта, ДобавитьРазделитель = Истина)

	СтрокиПараметров = Новый Массив;

	Для Каждого Свойство Из ТипОбъекта.Свойства Цикл
		Если Свойство.Форма = ФормаXML.Атрибут Тогда
			СтрокиПараметров.Добавить(Свойство.Имя + "=" + КодироватьСтроку(XMLСтрока(ОбъектXDTO[Свойство.Имя]), СпособКодированияСтроки.КодировкаURL));
		КонецЕсли;
	КонецЦикла;

	Если СтрокиПараметров.Количество() > 0 Тогда
		Если ДобавитьРазделитель Тогда
			Возврат "?" + СтрСоединить(СтрокиПараметров, "&");
		Иначе
			Возврат СтрСоединить(СтрокиПараметров, "&");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПараметрыСоединения()

	Возврат Новый Структура("Сервер, Порт, Протокол", "", 443, "https");

КонецФункции

// Возвращает описание приложения Яндекс.
// 
// Возвращаемое значение:
//   Структура - описание приложения Яндекс. Содержит ключи: client_id, client_secret.
//
Функция ПараметрыПриложения()

	Возврат Новый Структура("ИдентификаторПриложения, client_id, client_secret", "", "", "");

КонецФункции

// Анализирует код состояния запроса после обработки сервером на корректность (диапазон 200-299).
// Применяется в случаях возврата сервером множества значений кода состояния.
// 
// Параметры:
//   КодСостояния - Число - код состояния запроса HTTP.
// 
// Возвращаемое значение:
//   Булево - признак успешной обработки запроса сервером.
//
Функция ЗапросУспешноОбработан(КодСостояния)

	Возврат КодСостояния >= 200 И КодСостояния <= 299;

КонецФункции

// Проверяет строку на допустимость использования в качестве метода HTTP согласно разделу 4 RFC 7231.
// 
// Параметры:
//   Метод - Строка - переданный метод HTTP.
// 
// Возвращаемое значение:
//   Булево - признак допустимости метода HTTP.
//
Функция МетодHTTPДопустим(Метод)

	Методы = Новый Структура;
	Методы.Вставить("DELETE");
	Методы.Вставить("GET");
	Методы.Вставить("POST");
	Методы.Вставить("PUT");
	
	Возврат Методы.Свойство(ВРег(Метод)) <> Неопределено;

КонецФункции

Функция ПротоколПоУмолчанию(Порт)

	ПортыПоУмолчанию = Новый Соответствие;
	ПортыПоУмолчанию.Вставить(80, "http://");
	ПортыПоУмолчанию.Вставить(443, "https://");
	ПортыПоУмолчанию.Вставить(21, "ftp://");
	ПортыПоУмолчанию.Вставить(990, "ftps://");

	Протокол = ПортыПоУмолчанию.Получить(Порт);
	Если Протокол = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Протокол;
	КонецЕсли;

КонецФункции

// Формирует и отправляет запрос HTTP с анализом ответа сервера.
// 
// Параметры:
//   ПараметрыПодключения - Структура - параметры подключения к серверу, см. ПараметрыСоединения.
//   Запрос               - HTTPЗапрос - запрос для отправки.
//   МетодHTTP            - Строка - метод HTTP из допустимых по разделу 4 RFC 7231.
// 
// Возвращаемое значение:
//   Структура - информация об отправке и обработке запроса сервером. Содержит ключи: КодСостояния, ТекстОтвета, Отказ, 
//     ТекстОшибки.
//
Функция ВыполнитьЗапросHTTP(ПараметрыПодключения, Запрос, МетодHTTP = "POST")

	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Протокол);
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт,,, Прокси, 20, ЗащищенноеСоединение, Ложь);

	Ответ = Новый Структура();
	Ответ.Вставить("КодСостояния", 0);
	Ответ.Вставить("ТекстОтвета", "");
	Ответ.Вставить("Отказ", Ложь);
	Ответ.Вставить("ТекстОшибки", "");

	Если Не МетодHTTPДопустим(МетодHTTP) Тогда
		ШаблонОшибки = НСтр("ru = 'Указан недопустимый метод HTTP (%1)'");
		Ответ.Отказ = Истина;
		Ответ.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, МетодHTTP);
		Возврат Ответ;
	КонецЕсли;

	Попытка
		РезультатЗапроса = Соединение.ВызватьHTTPМетод(ВРег(МетодHTTP), Запрос);

		Ответ.КодСостояния = РезультатЗапроса.КодСостояния;
		Ответ.ТекстОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При отправке запроса на сервер %1 возникла ошибка: %2'"),
			ПараметрыПодключения.Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
		Ответ.Отказ = Истина;
		Ответ.ТекстОшибки = ТекстОшибки;
	КонецПопытки;

	Возврат Ответ;

КонецФункции   

// Выполняет попытку приведения строки в формате JSON к указанному типу объекта XDTO.
// 
// Параметры:
//   ТекстОбъекта - Строка - строковое описание объекта в формате JSON.
//   ТипОбъекта   - ТипОбъектаXDTO - тип объекта для приведения.
// 
// Возвращаемое значение:
//   Структура - результат выполнения приведения. Содержит ключи: Объект, Отказ, ТекстОшибки.
//
Функция ПривестиКТипуОбъекта(ТекстОбъекта, ТипОбъекта)

	РезультатПриведения = Новый Структура("Объект, Отказ, ТекстОшибки", Неопределено, Ложь, "");

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ТекстОбъекта);
		РезультатПриведения.Объект = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON, ТипОбъекта);
	Исключение
		РезультатПриведения.Отказ = Истина;
		РезультатПриведения.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;

	Возврат РезультатПриведения

КонецФункции

// Возвращает путь к ресурсу (папке или файлу) относительно папки приложения.
// 
// Параметры:
//   ПрисоединенныйФайл - СправочникСсылка.НоменклатураПрисоединенныеФайлы - файл, по которому запрашивается информация 
//                          от сервиса.
// 
// Возвращаемое значение:
//   Строка - путь к ресурсу в кодировке URL.
//
Функция ПутьКРесурсу(ПрисоединенныйФайл)

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ДатаМодификацииУниверсальная, Расширение");
	Возврат "app:/" + ПрисоединенныйФайл.УникальныйИдентификатор() + Формат(ЗначенияРеквизитов.ДатаМодификацииУниверсальная, "ДФ=ггггММддччммсс") + "." + ЗначенияРеквизитов.Расширение;

КонецФункции

#Область СкладыСлужебный

// Определяет сопоставленные склады из данных информационной базы.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТолькоСсылки              - Булево - признак возврата только массива складов, иначе возвращается таблица.
//   ВыводитьПодчиненныеСклады - Булево - признак включения в ответ подчиненных складов.
// 
// Возвращаемое значение:
//   - Массив Из СправочникСсылка.Склады - список ссылок СправочникСсылка.Склады.
//   - ТаблицаЗначений - таблица с данными по складам.
//
Функция ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, ТолькоСсылки = Истина,
			ВыводитьПодчиненныеСклады = Истина) Экспорт

	СопоставленныеСклады = Новый ТаблицаЗначений;
	СопоставленныеСклады.Колонки.Добавить("Группа",              		   Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СопоставленныеСклады.Колонки.Добавить("Склад",               		   Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СопоставленныеСклады.Колонки.Добавить("ИдентификаторСклада", 		   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СопоставленныеСклады.Колонки.Добавить("НаименованиеСклада",  		   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250)));
	СопоставленныеСклады.Колонки.Добавить("ИспользуетсяДляСхемыРаботыFBO", Новый ОписаниеТипов("Булево"));
	СопоставленныеСклады.Колонки.Добавить("ИспользуетсяДляСхемыРаботыFBS", Новый ОписаниеТипов("Булево"));
	СопоставленныеСклады.Колонки.Добавить("ИспользуетсяДляСхемыРаботыDBS", Новый ОписаниеТипов("Булево"));
	СопоставленныеСклады.Колонки.Добавить("ЗаполненыНастройкиСклада",      Новый ОписаниеТипов("Булево"));

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствияОбъектов.Объект1С КАК Склад,
		|	СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторСклада,
		|	СоответствияОбъектов.НаименованиеОбъектаМаркетплейса КАК НаименованиеСклада,
		|	СоответствияОбъектов.ИспользуетсяДляСхемыРаботыFBO КАК ИспользуетсяДляСхемыРаботыFBO,
		|	СоответствияОбъектов.ИспользуетсяДляСхемыРаботыFBS КАК ИспользуетсяДляСхемыРаботыFBS,
		|	СоответствияОбъектов.ИспользуетсяДляСхемыРаботыDBS КАК ИспользуетсяДляСхемыРаботыDBS,
		|	Склады.ЭтоГруппа КАК ЭтоГруппаСкладов
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СоответствияОбъектов.Объект1С = Склады.Ссылка
		|ГДЕ
		|	СоответствияОбъектов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)"; 
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ТолькоСсылки Тогда
			Возврат Новый Массив;
		Иначе
			Возврат СопоставленныеСклады;
		КонецЕсли;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВыводитьПодчиненныеСклады И Выборка.ЭтоГруппаСкладов Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПодчиненныеСклады = СкладыСервер.СписокПодчиненныхСкладов(Выборка.Склад);
			УстановитьПривилегированныйРежим(Ложь);
			
			Для Каждого Склад Из ПодчиненныеСклады Цикл
				НоваяСтрока = СопоставленныеСклады.Добавить();
				НоваяСтрока.Группа = Выборка.Склад;
				НоваяСтрока.Склад = Склад.Значение;
				НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
				НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
				НоваяСтрока.ИспользуетсяДляСхемыРаботыFBO = Выборка.ИспользуетсяДляСхемыРаботыFBO;
				НоваяСтрока.ИспользуетсяДляСхемыРаботыFBS = Выборка.ИспользуетсяДляСхемыРаботыFBS;
				НоваяСтрока.ИспользуетсяДляСхемыРаботыDBS = Выборка.ИспользуетсяДляСхемыРаботыDBS;
			КонецЦикла;
			
		Иначе
			НоваяСтрока = СопоставленныеСклады.Добавить();
			НоваяСтрока.Группа = Выборка.Склад;
			НоваяСтрока.Склад = Выборка.Склад;
			НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
			НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
			НоваяСтрока.ИспользуетсяДляСхемыРаботыFBO = Выборка.ИспользуетсяДляСхемыРаботыFBO;
			НоваяСтрока.ИспользуетсяДляСхемыРаботыFBS = Выборка.ИспользуетсяДляСхемыРаботыFBS;
			НоваяСтрока.ИспользуетсяДляСхемыРаботыDBS = Выборка.ИспользуетсяДляСхемыРаботыDBS;
		КонецЕсли;
	КонецЦикла;

	Если ТолькоСсылки Тогда
		СопоставленныеСклады.Свернуть("Склад");
		Возврат СопоставленныеСклады.ВыгрузитьКолонку("Склад");
	Иначе
		СопоставленныеСклады.Свернуть("Группа, Склад, ИдентификаторСклада, НаименованиеСклада, ИспользуетсяДляСхемыРаботыFBO, ИспользуетсяДляСхемыРаботыFBS, ИспользуетсяДляСхемыРаботыDBS, ЗаполненыНастройкиСклада");

		ЗаполнитьПризнакНаличияНастроекСкладов(СопоставленныеСклады, УчетнаяЗаписьМаркетплейса);

		Возврат СопоставленныеСклады;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьПризнакНаличияНастроекСкладов(ТаблицаСкладов, УчетнаяЗапись)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса КАК ИдентификаторСклада,
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК РеквизитСклада,
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК ЗначениеРеквизитаСклада
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса В(&Реквизиты)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса В(&ИдентификаторыСкладов)
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеквизитСклада),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначениеРеквизитаСклада)
		|ПО
		|	ИдентификаторСклада";

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	ИменаРеквизитов = РеквизитыНастроекСкладаFBS(ВидМаркетплейса);

	ИдентификаторыСкладов = ТаблицаСкладов.ВыгрузитьКолонку("ИдентификаторСклада");

	Запрос.УстановитьПараметр("УчетнаяЗапись",         УчетнаяЗапись);
	Запрос.УстановитьПараметр("Реквизиты",             ИменаРеквизитов);
	Запрос.УстановитьПараметр("ИдентификаторыСкладов", ИдентификаторыСкладов);

	ТаблицаСкладов.Индексы.Добавить("ИдентификаторСклада");

	ВыборкаНастроек = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНастроек.Следующий() Цикл
		Если ВыборкаНастроек.РеквизитСклада > 0 Тогда
			СтрокаСклада = ТаблицаСкладов.Найти(ВыборкаНастроек.ИдентификаторСклада, "ИдентификаторСклада");
			Если СтрокаСклада <> Неопределено Тогда
				СтрокаСклада.ЗаполненыНастройкиСклада = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТаблицаСкладов.Индексы.Очистить();

КонецПроцедуры

// Возвращает список имен реквизитов настроек склада FBS.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид площадки для получения имен реквизитов настроек.
//
// Возвращаемое значение:
//   Массив из Строка - список имен реквизитов, если без типов данных.
//
Функция РеквизитыНастроекСкладаFBS(ВидМаркетплейса) Экспорт

	ИменаРеквизитов = Новый Массив;

	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ИменаРеквизитов.Добавить("АдресДоставкиПеревозчика");
		ИменаРеквизитов.Добавить("АдресДоставкиПеревозчикаЗначение");
		ИменаРеквизитов.Добавить("АдресДоставкиПеревозчикаЗначенияПолей");
		ИменаРеквизитов.Добавить("ЗонаДоставки");
		ИменаРеквизитов.Добавить("Курьер");
		ИменаРеквизитов.Добавить("ПеревозчикПартнер");
		ИменаРеквизитов.Добавить("СпособДоставки");
		ИменаРеквизитов.Добавить("ВремяДоставкиС");
		ИменаРеквизитов.Добавить("ВремяДоставкиПо");
	КонецЕсли;

	Возврат ИменаРеквизитов;

КонецФункции

// Возвращает сохраненные настройки склада торговой площадки.
//
// Параметры:
//   УчетнаяЗапись       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//   ИдентификаторСклада - Строка - идентификатор склада торговой площадки.
//
// Возвращаемое значение:
//   Структура из КлючИЗначение - список реквизитов с их значениями.
//
Функция НастройкиСклада(УчетнаяЗапись, ИдентификаторСклада) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИмяРеквизита,
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Значение,
		|	СоответствияОбъектовМаркетплейсов.ДополнительныеСведения КАК ЗначениеСтрока
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = Значение(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса В(&ИменаРеквизитов)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторСклада";

	Запрос.УстановитьПараметр("УчетнаяЗапись",       УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторСклада", ИдентификаторСклада);

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	ИменаРеквизитов = РеквизитыНастроекСкладаFBS(ВидМаркетплейса);

	Запрос.УстановитьПараметр("ИменаРеквизитов",     ИменаРеквизитов);

	НастройкиСклада = Новый Структура;

	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультата.Следующий() Цикл
		НастройкиСклада.Вставить(ВыборкаРезультата.ИмяРеквизита,
			?(ВыборкаРезультата.Значение = "ДополнительныеСведения", ВыборкаРезультата.ЗначениеСтрока, ВыборкаРезультата.Значение));
	КонецЦикла;

	Возврат НастройкиСклада;

КонецФункции

// Сохраняет сохраненные настройки склада торговой площадки и возвращает результат.
//
// Параметры:
//   УчетнаяЗапись       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//   ИдентификаторСклада - Строка - идентификатор склада торговой площадки.
//   ИсточникНастроек    - Форма  - идентификатор склада торговой площадки.
//
// Возвращаемое значение:
//   Структура - результат выполнения:
//     * Выполнено      - Булево - признак успешности сохранения настроек;
//     * ОписаниеОшибки - Строка - описание ошибки.
//
Функция СохранитьНастройкиСклада(УчетнаяЗапись, ИдентификаторСклада, ИсточникНастроек) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	ИменаРеквизитов = РеквизитыНастроекСкладаFBS(ВидМаркетплейса);

	ВидОбъектаСклад = Перечисления.ВидыОбъектовМаркетплейсов.Склад;

	НачатьТранзакцию();
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СоответствияОбъектовМаркетплейсов");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
		ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаСклад);
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторОбъектаМаркетплейса", ИдентификаторСклада);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
		НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВидОбъектаСклад);
		НаборЗаписей.Отбор.ИдентификаторВладельцаОбъектаМаркетплейса.Установить(ИдентификаторСклада);

		Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			ЗначениеРеквизита = ИсточникНастроек[ИмяРеквизита];
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			Запись.ВидОбъектаМаркетплейса = ВидОбъектаСклад;
			Запись.ИдентификаторОбъектаМаркетплейса = ИмяРеквизита;
			Запись.ИдентификаторВладельцаОбъектаМаркетплейса = ИдентификаторСклада;

			Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") И СтрДлина(ЗначениеРеквизита) > 150 Тогда
				Запись.Объект1С = "ДополнительныеСведения";
				Запись.ДополнительныеСведения = ЗначениеРеквизита;
			Иначе
				Запись.Объект1С = ЗначениеРеквизита;
			КонецЕсли;

			Запись.ДатаАктуальности = ТекущаяДатаСеанса();
		КонецЦикла;

		НаборЗаписей.Записать();

		УстановитьПривилегированныйРежим(Ложь);

		Результат.Выполнено = Истина;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();

		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидМаркетплейса),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);

		Результат.ОписаниеОшибки = ТекстОшибки;
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДокументыСлужебный

// Конструктор результата записи и (или) проведения документа.
//
// Возвращаемое значение:
//   Структура - результат записи и (или) проведения документа:
//     * ЗаписьВыполнена - Булево - результат записи;
//     * ОписаниеОшибки  - Строка - описание ошибки при выполнении процедуры записи.
//
Функция НовыйРезультатЗаписиДокументов()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаписьВыполнена", Ложь);
	Результат.Вставить("ОписаниеОшибки",  "");
	
	Возврат Результат;
	
КонецФункции

// Заполняет заказ клиента данными из другого объекта.
//
// Параметры:
//   ЗаказКлиентаОбъект          - ДокументОбъект.ЗаказКлиента - заказ клиента к заполнению.
//   ДанныеЗаполнения            - Структура Из КлючИЗначение - данные заполнения. 
//   ЗначенияФункциональныхОпций - См. ПолучитьФункциональныеОпции. 
//   ИмяСобытия                  - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат заполнения документа.
//
Функция ЗаказКлиентаЗаполнить(ЗаказКлиентаОбъект, ДанныеЗаполнения, ЗначенияФункциональныхОпций, 
			ИмяСобытия)
	
	Если ЗначенияФункциональныхОпций = Неопределено Тогда
		ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(ДанныеЗаполнения.Соглашение);
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(ЗаказКлиентаОбъект, ДанныеЗаполнения);
		ЗаказКлиентаОбъект.Заполнить(ДанныеЗаполнения);
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ЗаказКлиентаОбъект.Метаданные(),
			ЗаказКлиентаОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ЗаказКлиентаОбъект.Соглашение) Тогда
		ЗаказКлиентаОбъект.ЗаполнитьУсловияПродажПоСоглашению(Ложь);
	КонецЕсли;
	
	ЗаказКлиентаОбъект.ПометкаУдаления       = Ложь;
	ЗаказКлиентаОбъект.Дата                  = ДанныеЗаполнения.Дата;
	ЗаказКлиентаОбъект.Организация           = ДанныеЗаполнения.Организация;
	ЗаказКлиентаОбъект.ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
	
	Если Не ЗначениеЗаполнено(ЗаказКлиентаОбъект.Контрагент) Тогда
		ЗаказКлиентаОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказКлиентаОбъект.Соглашение) Тогда
		ОрганизацияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиентаОбъект.Соглашение, "Организация");
		Если ЗначениеЗаполнено(ОрганизацияСоглашения)
				И ОрганизацияСоглашения <> ЗаказКлиентаОбъект.Организация Тогда
			ЗаказКлиентаОбъект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(ЗаказКлиентаОбъект.Соглашение) Тогда
		ЗаказКлиентаОбъект.Соглашение = ДанныеЗаполнения.Соглашение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказКлиентаОбъект.Договор)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиентаОбъект.Договор, "Организация") <> ЗаказКлиентаОбъект.Организация Тогда
		ЗаказКлиентаОбъект.Договор = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользуютсяДоговорыКонтрагентов Тогда
		ЗаказКлиентаОбъект.Договор = ДанныеЗаполнения.Договор;
	КонецЕсли;
	
	Если ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента
			И Не ЗначенияФункциональныхОпций.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		// Заказ только со склада
		ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента
				И ЗначенияФункциональныхОпций.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		// Заказ со склада и под заказ
		ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	Иначе
		// Заказ как счет
		ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;
	
	ЗаказКлиентаОбъект.ЭтоЗаказКакСчет = Не ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	ДатаОтгрузкиВСтроке = ТекущаяДатаСеанса();
	Если ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами
			И ЗначениеЗаполнено(ЗаказКлиентаОбъект.Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ЗаказКлиентаОбъект.Соглашение, Истина);
		
		Если УсловияПродаж.СтатусСоглашения <> Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Тогда
			Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
				ДатаОтгрузкиВСтроке = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
					ТекущаяДатаСеанса(),
					Перечисления.Периодичность.День,
					УсловияПродаж.СрокПоставки) + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаказКлиентаОбъект.ДатаОтгрузки = ДатаОтгрузкиВСтроке;
	
	Если ЗаказКлиентаОбъект.ЭтоНовый() Тогда
		ЗаказКлиентаОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет постобработку табличной части "Товары" для заказа клиента.
//
// Параметры:
//   ЗаказКлиентаОбъект             - ДокументОбъект.ЗаказКлиента - заказ клиента к заполнению.
//   Параметры                      - Структура - параметры обработки табличной части: 
//     * СтруктураДействий            - Структура Из КлючИЗначение - структура с действиями, которые нужно произвести;
//                                    - Неопределено - использовать структуру действий по умолчанию.
//     * ПересчитатьКоличествоЕдиниц  - Булево - необходимо ли выполнять пересчет количества.
//     * ЗаполнитьЦены                - Булево - заполнять ли цены товаров.
//     * ЗаполнитьВариантОбеспечения  - Булево - заполнять ли варианты обеспечения.
//     * ОчиститьАвтоматическуюСкидку - Булево - очистить признак автоматических скидок.
//     * ПересчитатьЦенаВключаетНДС   - Булево - требуется ли обратный пересчет цен и сумм с (без) НДС.
//   ИмяСобытия                     - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат обработки табличной части.
//
Функция ЗаказКлиентаОбработатьТЧ(ЗаказКлиентаОбъект, Параметры, ИмяСобытия)
	
	Если ЗаказКлиентаОбъект.Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Параметры.СтруктураДействий = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиентаОбъект);
		Если Параметры.ПересчитатьЦенаВключаетНДС Тогда
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		Если Параметры.ПересчитатьКоличествоЕдиниц Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
																	ЗаказКлиентаОбъект, 
																	Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗаказКлиентаОбъект.Склад)));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",      ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																	ЗаказКлиентаОбъект, Истина));
		СтруктураДействий.Вставить("ПересчитатьСумму",        "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",     СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",    СтруктураПересчетаСуммы);
		
		Если Параметры.ОчиститьАвтоматическуюСкидку Тогда
			СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
		КонецЕсли;
		
		Если Параметры.ЗаполнитьВариантОбеспечения Тогда
			ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(ЗаказКлиентаОбъект);
			ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, "ВариантОбеспечения", ПараметрыДокумента);
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЗаказКлиентаОбъект, Документы.ЗаказКлиента);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаказКлиентаОбъект, ПараметрыУказанияСерий);
	Иначе
		СтруктураДействий = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СтруктураДействий);
	КонецЕсли;
	
	Если Параметры.ЗаполнитьЦены Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Дата",                         ЗаказКлиентаОбъект.Дата);
		ПараметрыЗаполнения.Вставить("Организация",                  ЗаказКлиентаОбъект.Организация);
		ПараметрыЗаполнения.Вставить("Валюта",                       ЗаказКлиентаОбъект.Валюта);
		ПараметрыЗаполнения.Вставить("Партнер",                      ЗаказКлиентаОбъект.Партнер);
		ПараметрыЗаполнения.Вставить("РассчитыватьНаборы",           Истина);
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС",           ЗаказКлиентаОбъект.НалогообложениеНДС);
		ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", ЗаказКлиентаОбъект.ВернутьМногооборотнуюТару);
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения",               "Цена, ВидЦены, СрокПоставки");
		
		Если ЗаказКлиентаОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И ПродажиСервер.ЭтоДоговорПоНовойКомиссии(ЗаказКлиентаОбъект.Договор) Тогда
			УчетныйВидЦеныДоговора = КомиссионнаяТорговляСервер.ВидЦеныДоговора(ЗаказКлиентаОбъект.Договор, Истина);
			ПараметрыЗаполнения.Вставить("ВидЦены", УчетныйВидЦеныДоговора);
		Иначе
			ПараметрыЗаполнения.Вставить("Соглашение", ЗаказКлиентаОбъект.Соглашение);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	
	Попытка
		Если Параметры.ЗаполнитьЦены Тогда
			ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
				ЗаказКлиентаОбъект.Товары,
				, // Массив строк или структура отбора
				ПараметрыЗаполнения,
				СтруктураДействий);
		Иначе
			// TODO - ПакетнаяОбработкаТабличнойЧастиСервер
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказКлиентаОбъект.Товары, 
				СтруктураДействий, 
				КэшированныеЗначения);
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ЗаказКлиентаОбъект.Метаданные(),
			ЗаказКлиентаОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Если Параметры.ПересчитатьЦенаВключаетНДС
			И Не ЗаказКлиентаОбъект.ЦенаВключаетНДС Тогда
		Для Каждого СтрокаТабличнойЧасти Из ЗаказКлиентаОбъект.Товары Цикл
			СтрокаТабличнойЧасти.Сумма             = СтрокаТабличнойЧасти.СуммаСНДС - СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаРучнойСкидки = ?(СтрокаТабличнойЧасти.СуммаСНДС = 0, 
															0, 
															СтрокаТабличнойЧасти.СуммаРучнойСкидки * СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.СуммаСНДС);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ЗаказКлиентаОбъект.Товары Цикл
		СтрокаТабличнойЧасти.Цена = Окр((СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки) 
				/ ?(СтрокаТабличнойЧасти.КоличествоУпаковок = 0, 1, СтрокаТабличнойЧасти.КоличествоУпаковок), 2, РежимОкругления.Окр15как20);
		
		Если СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = ?(СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена = 0, 0, 
				Окр(100 * СтрокаТабличнойЧасти.СуммаРучнойСкидки 
					/ (СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена), 2, РежимОкругления.Окр15как20));
		Иначе
			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 0;
		КонецЕсли;
	КонецЦикла;
		
	Если Параметры.ОчиститьАвтоматическуюСкидку Тогда
		ЗаказКлиентаОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет документ реализации данными из другого объекта.
//
// Параметры:
//   РеализацияТоваровУслугОбъект - ДокументОбъект.РеализацияТоваровУслуг - документ реализации к заполнению.
//   ДанныеЗаполнения             - Структура Из КлючИЗначение - данные заполнения. 
//   ЗначенияФункциональныхОпций  - См. ПолучитьФункциональныеОпции. 
//   ИмяСобытия                   - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат заполнения документа.
//
Функция РеализацияТоваровУслугЗаполнить(РеализацияТоваровУслугОбъект, ДанныеЗаполнения, ЗначенияФункциональныхОпций, 
			ИмяСобытия)
	
	Если ЗначенияФункциональныхОпций = Неопределено Тогда
		ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(ДанныеЗаполнения.РеквизитыШапки.Соглашение);
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(РеализацияТоваровУслугОбъект, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(РеализацияТоваровУслугОбъект, ДанныеЗаполнения.РеквизитыШапки);
		РеализацияТоваровУслугОбъект.Заполнить(ДанныеЗаполнения);
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			РеализацияТоваровУслугОбъект.Метаданные(),
			РеализацияТоваровУслугОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РеализацияТоваровУслугОбъект.Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(РеализацияТоваровУслугОбъект.Соглашение, Истина, Истина);
		РеализацияТоваровУслугОбъект.ЗаполнитьУсловияПродаж(УсловияПродаж);
	КонецЕсли;
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(РеализацияТоваровУслугОбъект.Склад);
	Если СтруктураОтветственного <> Неопределено Тогда
		РеализацияТоваровУслугОбъект.Отпустил          = СтруктураОтветственного.Ответственный;
		РеализацияТоваровУслугОбъект.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	РеализацияТоваровУслугОбъект.ПометкаУдаления       = Ложь;
	РеализацияТоваровУслугОбъект.Дата                  = ДанныеЗаполнения.Дата;
	РеализацияТоваровУслугОбъект.Организация           = ДанныеЗаполнения.РеквизитыШапки.Организация;
	РеализацияТоваровУслугОбъект.ХозяйственнаяОперация = ДанныеЗаполнения.РеквизитыШапки.ХозяйственнаяОперация;
	
	Если Не ЗначениеЗаполнено(РеализацияТоваровУслугОбъект.Контрагент) Тогда
		РеализацияТоваровУслугОбъект.Контрагент = ДанныеЗаполнения.РеквизитыШапки.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеализацияТоваровУслугОбъект.Соглашение) Тогда
		ОрганизацияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияТоваровУслугОбъект.Соглашение, "Организация");
		Если ЗначениеЗаполнено(ОрганизацияСоглашения)
				И ОрганизацияСоглашения <> РеализацияТоваровУслугОбъект.Организация Тогда
			РеализацияТоваровУслугОбъект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами 
				И Не ЗначениеЗаполнено(РеализацияТоваровУслугОбъект.Соглашение) Тогда
		РеализацияТоваровУслугОбъект.Соглашение = ДанныеЗаполнения.РеквизитыШапки.Соглашение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеализацияТоваровУслугОбъект.Договор)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияТоваровУслугОбъект.Договор, "Организация") <> РеализацияТоваровУслугОбъект.Организация Тогда
		РеализацияТоваровУслугОбъект.Договор = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользуютсяДоговорыКонтрагентов Тогда
		РеализацияТоваровУслугОбъект.Договор = ДанныеЗаполнения.РеквизитыШапки.Договор;
	КонецЕсли;
	
	Если РеализацияТоваровУслугОбъект.ЭтоНовый() Тогда
		РеализацияТоваровУслугОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет постобработку табличной части "Товары" для документа реализации.
//
// Параметры:
//   РеализацияТоваровУслугОбъект   - ДокументОбъект.РеализацияТоваровУслуг - документ реализации к заполнению.
//   Параметры                      - Структура - параметры обработки табличной части: 
//     * СтруктураДействий            - Структура Из КлючИЗначение - структура с действиями, которые нужно произвести;
//                                    - Неопределено - использовать структуру действий по умолчанию.
//     * ПересчитатьКоличествоЕдиниц  - Булево - необходимо ли выполнять пересчет количества.
//     * ЗаполнитьЦены                - Булево - заполнять ли цены товаров.
//     * ОчиститьАвтоматическуюСкидку - Булево - очистить признак автоматических скидок.
//     * ПересчитатьЦенаВключаетНДС   - Булево - требуется ли обратный пересчет цен и сумм с (без) НДС.
//   ИмяСобытия                     - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат обработки табличной части.
//
Функция РеализацияТоваровУслугОбработатьТЧ(РеализацияТоваровУслугОбъект, Параметры, ИмяСобытия)
	
	Если РеализацияТоваровУслугОбъект.Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Параметры.СтруктураДействий = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(РеализацияТоваровУслугОбъект);
		Если Параметры.ПересчитатьЦенаВключаетНДС Тогда
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		Если Параметры.ПересчитатьКоличествоЕдиниц Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																РеализацияТоваровУслугОбъект));
		СтруктураДействий.Вставить("ПересчитатьСумму",     "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД",    РеализацияТоваровУслугОбъект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		Если Параметры.ОчиститьАвтоматическуюСкидку Тогда
			СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(РеализацияТоваровУслугОбъект, Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(РеализацияТоваровУслугОбъект, ПараметрыУказанияСерий);
	Иначе
		СтруктураДействий = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СтруктураДействий);
	КонецЕсли;
	
	Если Параметры.ЗаполнитьЦены Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Дата",                         РеализацияТоваровУслугОбъект.Дата);
		ПараметрыЗаполнения.Вставить("Организация",                  РеализацияТоваровУслугОбъект.Организация);
		ПараметрыЗаполнения.Вставить("Валюта",                       РеализацияТоваровУслугОбъект.Валюта);
		ПараметрыЗаполнения.Вставить("Партнер",                      РеализацияТоваровУслугОбъект.Партнер);
		ПараметрыЗаполнения.Вставить("РассчитыватьНаборы",           Истина);
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС",           РеализацияТоваровУслугОбъект.НалогообложениеНДС);
		ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", РеализацияТоваровУслугОбъект.ВернутьМногооборотнуюТару);
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения",               "Цена, ВидЦены, СрокПоставки");
		
		Если КомиссионнаяТорговляСервер.РеализацияЧерезКомиссионера(РеализацияТоваровУслугОбъект.ХозяйственнаяОперация) Тогда
			ПараметрыЗаполнения.Вставить("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияТоваровУслугОбъект.Договор, "ВидЦенПродажи"));
		Иначе
			ПараметрыЗаполнения.Вставить("Соглашение", РеализацияТоваровУслугОбъект.Соглашение);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	
	Попытка
		Если Параметры.ЗаполнитьЦены Тогда
			ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
				РеализацияТоваровУслугОбъект.Товары,
				, // Массив строк или структура отбора
				ПараметрыЗаполнения,
				СтруктураДействий);
		Иначе
			// TODO - ПакетнаяОбработкаТабличнойЧастиСервер
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(РеализацияТоваровУслугОбъект.Товары, 
				СтруктураДействий, 
				КэшированныеЗначения);
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			РеализацияТоваровУслугОбъект.Метаданные(),
			РеализацияТоваровУслугОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Если Параметры.ПересчитатьЦенаВключаетНДС
			И Не РеализацияТоваровУслугОбъект.ЦенаВключаетНДС Тогда
		Для Каждого СтрокаТабличнойЧасти Из РеализацияТоваровУслугОбъект.Товары Цикл
			СтрокаТабличнойЧасти.Сумма             = СтрокаТабличнойЧасти.СуммаСНДС - СтрокаТабличнойЧасти.СуммаНДС;
			СтрокаТабличнойЧасти.СуммаРучнойСкидки = ?(СтрокаТабличнойЧасти.СуммаСНДС = 0, 
															0, 
															СтрокаТабличнойЧасти.СуммаРучнойСкидки * СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.СуммаСНДС);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из РеализацияТоваровУслугОбъект.Товары Цикл
		СтрокаТабличнойЧасти.Цена = Окр((СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки) 
				/ ?(СтрокаТабличнойЧасти.КоличествоУпаковок = 0, 1, СтрокаТабличнойЧасти.КоличествоУпаковок), 2, РежимОкругления.Окр15как20);
		
		Если СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = ?(СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена = 0, 0, 
				Окр(100 * СтрокаТабличнойЧасти.СуммаРучнойСкидки 
					/ (СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.Цена), 2, РежимОкругления.Окр15как20));
		Иначе
			СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 0;
		КонецЕсли;
	КонецЦикла;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(РеализацияТоваровУслугОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(РеализацияТоваровУслугОбъект.Склад, СкладГруппа, РеализацияТоваровУслугОбъект.Товары, Ложь);
		
	Если Параметры.ОчиститьАвтоматическуюСкидку Тогда
		РеализацияТоваровУслугОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет корректировку реализации данными из другого объекта.
//
// Параметры:
//   КорректировкаРеализацииОбъект - ДокументОбъект.КорректировкаРеализации - корректировка реализации к заполнению.
//   ДанныеЗаполнения              - Структура Из КлючИЗначение - данные заполнения. 
//   ЗначенияФункциональныхОпций   - См. ПолучитьФункциональныеОпции. 
//   ИмяСобытия                    - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат заполнения документа.
//
Функция КорректировкаРеализацииЗаполнить(КорректировкаРеализацииОбъект, ДанныеЗаполнения, ЗначенияФункциональныхОпций, 
			ИмяСобытия)
	
	Если ЗначенияФункциональныхОпций = Неопределено Тогда
		ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(ДанныеЗаполнения.Соглашение);
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(КорректировкаРеализацииОбъект, ДанныеЗаполнения);
		КорректировкаРеализацииОбъект.Заполнить(ДанныеЗаполнения);
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			КорректировкаРеализацииОбъект.Метаданные(),
			КорректировкаРеализацииОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(
		КорректировкаРеализацииОбъект.ДокументОснование,
		КорректировкаРеализацииОбъект.Товары,
		КорректировкаРеализацииОбъект.Расхождения,
		КорректировкаРеализацииОбъект.Ссылка);
	
	Если КорректировкаРеализацииОбъект.ЭтоНовый() Тогда
		КорректировкаРеализацииОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет постобработку табличных частей "Товары" и "Расхождения" для корректировки реализации.
//
// Параметры:
//   КорректировкаРеализацииОбъект - ДокументОбъект.КорректировкаРеализации - корректировка реализации к заполнению.
//   Параметры                     - Структура - параметры обработки табличной части: 
//     * СтруктураДействий           - Структура Из КлючИЗначение - структура с действиями, которые нужно произвести;
//                                   - Неопределено - использовать структуру действий по умолчанию.
//     * ЗаполнитьВариантОтражения   - Булево - заполнить вариант отражения в табличных частях.
//   ИмяСобытия                    - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат обработки табличной части.
//
Функция КорректировкаРеализацииОбработатьТЧ(КорректировкаРеализацииОбъект, Параметры, ИмяСобытия)
	
	Если Параметры.СтруктураДействий = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(КорректировкаРеализацииОбъект);
		Если Параметры.ПересчитатьЦенаВключаетНДС Тогда
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму",     "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	Иначе
		СтруктураДействий = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СтруктураДействий);
	КонецЕсли;
	
	Если КорректировкаРеализацииОбъект.Товары.Количество() > 0 Тогда
		Если Параметры.ЗаполнитьВариантОтражения Тогда
			Для Каждого СтрокаТабличнойЧасти Из КорректировкаРеализацииОбъект.Товары Цикл
				Если Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорректировкаРеализацииОбъект.ДокументОснование, "Дата")) <> Год(КорректировкаРеализацииОбъект.Дата) Тогда
					СтрокаТабличнойЧасти.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы;
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВариантОтражения) Тогда
					ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(
						СтрокаТабличнойЧасти.Склад, 
						КорректировкаРеализацииОбъект.Дата);
						
					Если ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
						СтрокаТабличнойЧасти.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации;
					Иначе
						СтрокаТабличнойЧасти.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// TODO - ПакетнаяОбработкаТабличнойЧастиСервер
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КорректировкаРеализацииОбъект.Товары, 
			СтруктураДействий, 
			КэшированныеЗначения);
	КонецЕсли;
	
	КорректировкаРеализацииОбъект.ЗаполнитьРасхождения();
	
	Если КорректировкаРеализацииОбъект.Расхождения.Количество() > 0 Тогда
		Для Каждого СтрокаТабличнойЧасти Из КорректировкаРеализацииОбъект.Расхождения Цикл
			Если Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорректировкаРеализацииОбъект.ДокументОснование, "Дата")) <> Год(КорректировкаРеализацииОбъект.Дата) Тогда
				СтрокаТабличнойЧасти.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВариантОтражения) Тогда
				ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(
					СтрокаТабличнойЧасти.Склад, 
					КорректировкаРеализацииОбъект.Дата);
					
				Если ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
					СтрокаТабличнойЧасти.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации;
				Иначе
					СтрокаТабличнойЧасти.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(КорректировкаРеализацииОбъект, Документы.КорректировкаРеализации);
		ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
		ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(КорректировкаРеализацииОбъект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет документ комиссии данными из другого объекта.
//
// Параметры:
//   ОтчетКомиссионераОбъект     - ДокументОбъект.ОтчетКомиссионера - документ комиссии к заполнению.
//   ДанныеЗаполнения            - Структура Из КлючИЗначение - данные заполнения. 
//   ЗначенияФункциональныхОпций - См. ПолучитьФункциональныеОпции. 
//   ИмяСобытия                  - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат заполнения документа.
//
Функция ОтчетКомиссионераЗаполнить(ОтчетКомиссионераОбъект, ДанныеЗаполнения, ЗначенияФункциональныхОпций, 
			ИмяСобытия)
	
	Если ЗначенияФункциональныхОпций = Неопределено Тогда
		ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(ДанныеЗаполнения.РеквизитыШапки.Соглашение);
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(ОтчетКомиссионераОбъект, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ОтчетКомиссионераОбъект, ДанныеЗаполнения.РеквизитыШапки);
		ОтчетКомиссионераОбъект.Заполнить(ДанныеЗаполнения);
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ОтчетКомиссионераОбъект.Метаданные(),
			ОтчетКомиссионераОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	ОтчетКомиссионераОбъект.ПометкаУдаления       = Ложь;
	ОтчетКомиссионераОбъект.Дата                  = ДанныеЗаполнения.Дата;
	ОтчетКомиссионераОбъект.Организация           = ДанныеЗаполнения.РеквизитыШапки.Организация;
	ОтчетКомиссионераОбъект.ХозяйственнаяОперация = ДанныеЗаполнения.РеквизитыШапки.ХозяйственнаяОперация;
	
	Если Не ЗначениеЗаполнено(ОтчетКомиссионераОбъект.Контрагент) Тогда
		ОтчетКомиссионераОбъект.Контрагент = ДанныеЗаполнения.РеквизитыШапки.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетКомиссионераОбъект.Соглашение) Тогда
		ОрганизацияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетКомиссионераОбъект.Соглашение, "Организация");
		Если ЗначениеЗаполнено(ОрганизацияСоглашения)
				И ОрганизацияСоглашения <> ОтчетКомиссионераОбъект.Организация Тогда
			ОтчетКомиссионераОбъект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользоватьСоглашенияСКлиентами 
				И Не ЗначениеЗаполнено(ОтчетКомиссионераОбъект.Соглашение) Тогда
		ОтчетКомиссионераОбъект.Соглашение = ДанныеЗаполнения.РеквизитыШапки.Соглашение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетКомиссионераОбъект.Договор)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетКомиссионераОбъект.Договор, "Организация") <> ОтчетКомиссионераОбъект.Организация Тогда
		ОтчетКомиссионераОбъект.Договор = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	ИначеЕсли ЗначенияФункциональныхОпций.ИспользуютсяДоговорыКонтрагентов Тогда
		ОтчетКомиссионераОбъект.Договор = ДанныеЗаполнения.РеквизитыШапки.Договор;
	КонецЕсли;
	
	Если ОтчетКомиссионераОбъект.ЭтоНовый() Тогда
		ОтчетКомиссионераОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет постобработку табличной части "Товары" для документа комиссии.
//
// Параметры:
//   ОтчетКомиссионераОбъект       - ДокументОбъект.ОтчетКомиссионера - документ комиссии к заполнению.
//   Параметры                     - Структура - параметры обработки табличной части: 
//     * СтруктураДействий           - Структура Из КлючИЗначение - структура с действиями, которые нужно произвести;
//                                   - Неопределено - использовать структуру действий по умолчанию.
//     * ПересчитатьКоличествоЕдиниц - Булево - необходимо ли выполнять пересчет количества.
//     * ЗаполнитьЦены               - Булево - заполнять ли цены товаров.
//     * ПересчитатьЦенаВключаетНДС  - Булево - требуется ли обратный пересчет цен и сумм с (без) НДС.
//     * КомиссионерВедетУчетПоРНПТ  - Булево - ведет ли комиссионер учет по РНПТ.
//   ИмяСобытия                    - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат обработки табличной части.
//
Функция ОтчетКомиссионераОбработатьТЧ(ОтчетКомиссионераОбъект, Параметры, ИмяСобытия)
	
	Если ОтчетКомиссионераОбъект.Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Заполнение количества РНПТ
	Если Параметры.КомиссионерВедетУчетПоРНПТ
			И ЗначениеЗаполнено(ОтчетКомиссионераОбъект.Организация) Тогда
		ПараметрыПолученияКоэффициентаРНПТ = УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ПараметрыПолученияКоэффициентаРНПТ(
			ОтчетКомиссионераОбъект,
			"Партнер");
		УчетПрослеживаемыхТоваровЛокализация.ЗаполнитьКоличествоПоРНПТВТабличнойЧасти(
			ПараметрыПолученияКоэффициентаРНПТ,
			ОтчетКомиссионераОбъект.Товары);
	КонецЕсли;
		
	Если Параметры.СтруктураДействий = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОтчетКомиссионераОбъект);
		Если Параметры.ПересчитатьЦенаВключаетНДС Тогда
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		Если Параметры.ПересчитатьКоличествоЕдиниц Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",         ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
																	ОтчетКомиссионераОбъект));
		СтруктураДействий.Вставить("ПересчитатьСумму",           "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",        СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",       СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД",          ОтчетКомиссионераОбъект.НалогообложениеНДС);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ОтчетКомиссионераОбъект, Документы.ОтчетКомиссионера);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетКомиссионераОбъект, ПараметрыУказанияСерий);
	Иначе
		СтруктураДействий = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.СтруктураДействий);
	КонецЕсли;
	
	Если Параметры.ЗаполнитьЦены Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Дата",               ОтчетКомиссионераОбъект.Дата);
		ПараметрыЗаполнения.Вставить("Организация",        ОтчетКомиссионераОбъект.Организация);
		ПараметрыЗаполнения.Вставить("Валюта",             ОтчетКомиссионераОбъект.Валюта);
		ПараметрыЗаполнения.Вставить("Партнер",            ОтчетКомиссионераОбъект.Партнер);
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ОтчетКомиссионераОбъект.НалогообложениеНДС);
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения",     "Цена, ВидЦены, СрокПоставки");
		
		Если ЗначениеЗаполнено(ОтчетКомиссионераОбъект.Договор) Тогда
			ПараметрыЗаполнения.Вставить("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетКомиссионераОбъект.Договор, "ВидЦенУчетный"));
		Иначе
			ПараметрыЗаполнения.Вставить("Соглашение", ОтчетКомиссионераОбъект.Соглашение);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЦеныЗаполнены = Ложь;
		
		Если Параметры.ЗаполнитьЦены Тогда
			ЦеныЗаполнены = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
				ОтчетКомиссионераОбъект.Товары,
				, // Массив строк или структура отбора
				ПараметрыЗаполнения,
				СтруктураДействий);
		КонецЕсли;
			
		Если Не ЦеныЗаполнены Тогда
			// TODO - ПакетнаяОбработкаТабличнойЧастиСервер
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОтчетКомиссионераОбъект.Товары, 
				СтруктураДействий, 
				КэшированныеЗначения);
			
			Если Параметры.ПересчитатьЦенаВключаетНДС
					И Не ОтчетКомиссионераОбъект.ЦенаВключаетНДС Тогда
				Для Каждого СтрокаТабличнойЧасти Из ОтчетКомиссионераОбъект.Товары Цикл
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
				КонецЦикла;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
				
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОтчетКомиссионераОбъект.Товары, 
					СтруктураДействий, 
					КэшированныеЗначения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ОтчетКомиссионераОбъект.Метаданные(),
			ОтчетКомиссионераОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ОтчетКомиссионераОбъект.СтавкаНДСВознаграждения) Тогда
		ТекущаяСтрока = Новый Структура("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("СкорректироватьСтавкуНДС",
			ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ОтчетКомиссионераОбъект));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		ОтчетКомиссионераОбъект.СтавкаНДСВознаграждения = ТекущаяСтрока.СтавкаНДС;
	КонецЕсли;
	
	ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ОтчетКомиссионераОбъект.СтавкаНДСВознаграждения);
	
	ОтчетКомиссионераОбъект.СуммаВознаграждения    = ОтчетКомиссионераОбъект.Товары.Итог("СуммаВознаграждения");
	ОтчетКомиссионераОбъект.СуммаНДСВознаграждения = Окр(ОтчетКомиссионераОбъект.СуммаВознаграждения
		* ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	Возврат Истина;
	
КонецФункции

// Определяет объект расчетов по переданным параметрам.
//
// Параметры:
//   Параметры - Структура - параметры для поиска и заполнения объектов взаиморасчетов:
//     * ТипРасчетов        - ПеречислениеСсылка.ТипыРасчетовСПартнерами - тип расчетов;
//     * Организация        - СправочникСсылка.Организации - организация;
//     * Партнер            - СправочникСсылка.Партнеры - партнер;
//     * Контрагент         - СправочникСсылка.Контрагенты - контрагент;
//     * Договор            - СправочникСсылка.ДоговорыКонтрагентов - договор взаимозачета;
//     * Объект             - ОпределяемыйТип.ОбъектРасчетов - объект расчетов;
//     * ТипОбъектаРасчетов - ПеречислениеСсылка.ТипыОбъектовРасчетов - тип объекта расчетов.
//
// Возвращаемое значение:
//   - СправочникСсылка.ОбъектыРасчетов - объект расчетов.
//   - Неопределено - ошибка создания объекта расчетов.
//
Функция ОпределитьОбъектРасчетов(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОбъектыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	НЕ ОбъектыРасчетов.ПометкаУдаления
		|	И ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов
		|	И ОбъектыРасчетов.Организация = &Организация
		|	И ОбъектыРасчетов.Партнер = &Партнер
		|	И ОбъектыРасчетов.Контрагент = &Контрагент
		|	И ОбъектыРасчетов.Договор = &Договор
		|	И ОбъектыРасчетов.Объект = &Объект
		|	И ОбъектыРасчетов.ТипОбъектаРасчетов = &ТипОбъектаРасчетов";

	Для Каждого КлючИЗначение Из Параметры Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВыборкаДанных.Следующий() Тогда
		Результат = ВыборкаДанных.Ссылка;
	
	Иначе
		Результат = Неопределено;
		НачатьТранзакцию();
		
		Попытка
			ОбъектРасчетовОбъект = Справочники.ОбъектыРасчетов.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ОбъектРасчетовОбъект, Параметры);
			
			ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Договор, 
				"Наименование, ВалютаВзаиморасчетов");
			
			ОбъектРасчетовОбъект.Наименование            = ПараметрыДоговора.Наименование;
			ОбъектРасчетовОбъект.ТипСсылки               = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ДоговорыКонтрагентов");
			ОбъектРасчетовОбъект.ВалютаВзаиморасчетов    = ПараметрыДоговора.ВалютаВзаиморасчетов;
			ОбъектРасчетовОбъект.Валюта                  = ОбъектРасчетовОбъект.ВалютаВзаиморасчетов;
			ОбъектРасчетовОбъект.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
			
			ОбъектРасчетовОбъект.Записать();
			Результат = ОбъектРасчетовОбъект.Ссылка;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет документ взаимозачета данными из другого объекта.
//
// Параметры:
//   ВзаимозачетЗадолженностиОбъект - ДокументОбъект.ВзаимозачетЗадолженности - документ взаимозачета к заполнению.
//   ДанныеЗаполнения               - Структура Из КлючИЗначение - данные заполнения. 
//   ЗначенияФункциональныхОпций    - См. ПолучитьФункциональныеОпции. 
//   ИмяСобытия                     - Строка - имя события журнала регистрации. 
//
// Возвращаемое значение:
//   Булево - результат заполнения документа.
//
Функция ВзаимозачетЗадолженностиЗаполнить(ВзаимозачетЗадолженностиОбъект, ДанныеЗаполнения, ЗначенияФункциональныхОпций, 
			ИмяСобытия)
	
	Если ЗначенияФункциональныхОпций = Неопределено Тогда
		ЗначенияФункциональныхОпций = ПолучитьФункциональныеОпции(ДанныеЗаполнения.Соглашение);
	КонецЕсли;
	
	Попытка
		ЗаполнитьЗначенияСвойств(ВзаимозачетЗадолженностиОбъект, ДанныеЗаполнения);
		ВзаимозачетЗадолженностиОбъект.Заполнить(ДанныеЗаполнения);
		
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,
			ВзаимозачетЗадолженностиОбъект.Метаданные(),
			ВзаимозачетЗадолженностиОбъект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	ВзаимозачетЗадолженностиОбъект.ПометкаУдаления = Ложь;
	ВзаимозачетЗадолженностиОбъект.Дата            = ДанныеЗаполнения.Дата;
	ВзаимозачетЗадолженностиОбъект.Организация     = ДанныеЗаполнения.Организация;
	
	Если ВзаимозачетЗадолженностиОбъект.ЭтоНовый() Тогда
		ВзаимозачетЗадолженностиОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет постобработку табличных частей "Задолженность" для документа взаимозачета.
//
// Параметры:
//   ВзаимозачетЗадолженностиОбъект - ДокументОбъект.ВзаимозачетЗадолженности - документ взаимозачета к заполнению.
//
// Возвращаемое значение:
//   Булево - результат обработки табличной части.
//
Функция ВзаимозачетЗадолженностиОбработатьТЧ(ВзаимозачетЗадолженностиОбъект)
	
	Если ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность.Количество() = 0 
			И ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ВзаимозачетЗадолженностиОбъект.Организация);
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	
	Для Каждого СтрокаТабличнойЧасти Из ВзаимозачетЗадолженностиОбъект.ДебиторскаяЗадолженность Цикл
		Если СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.СуммаВзаиморасчетов;
		ИначеЕсли СтрокаТабличнойЧасти.СуммаРегл = 0 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.СуммаРегл = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				ВзаимозачетЗадолженностиОбъект.Дата,
				СтрокаТабличнойЧасти.ОбъектРасчетов);
		КонецЕсли;
			
		Если СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
			СтрокаТабличнойЧасти.СуммаУпр = СтрокаТабличнойЧасти.СуммаВзаиморасчетов;
		ИначеЕсли СтрокаТабличнойЧасти.СуммаУпр = 0 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.СуммаУпр = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов,
				ВалютаУправленческогоУчета,
				ВзаимозачетЗадолженностиОбъект.Дата,
				СтрокаТабличнойЧасти.ОбъектРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ВзаимозачетЗадолженностиОбъект.КредиторскаяЗадолженность Цикл
		Если СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
			СтрокаТабличнойЧасти.СуммаРегл = СтрокаТабличнойЧасти.СуммаВзаиморасчетов;
		ИначеЕсли СтрокаТабличнойЧасти.СуммаРегл = 0 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.СуммаРегл = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				ВзаимозачетЗадолженностиОбъект.Дата,
				СтрокаТабличнойЧасти.ОбъектРасчетов);
		КонецЕсли;
			
		Если СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
			СтрокаТабличнойЧасти.СуммаУпр = СтрокаТабличнойЧасти.СуммаВзаиморасчетов;
		ИначеЕсли СтрокаТабличнойЧасти.СуммаУпр = 0 И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
			СтрокаТабличнойЧасти.СуммаУпр = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов,
				ВалютаРегламентированногоУчета,
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов,
				ВалютаУправленческогоУчета,
				ВзаимозачетЗадолженностиОбъект.Дата,
				СтрокаТабличнойЧасти.ОбъектРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Конструктор результата отмены строк.
//
// Возвращаемое значение:
//   Структура - результат отмены строк:
//     * ЗаписатьЗаказ - Булево - признак необходимости записи заказа;
//     * ПропущенныеСтроки - Массив из Строка - список номеров пропущенных строк заказа.
//     * ПересчитываемыеСтроки - Массив из Строка - пересчитываемые строки заказа.
//
Функция РезультатОтменыСтрок()

	Результат = Новый Структура;
	Результат.Вставить("ЗаписатьЗаказ",         Ложь);
	Результат.Вставить("ПропущенныеСтроки",     Новый Массив);
	Результат.Вставить("ПересчитываемыеСтроки", Новый Массив);

	Возврат Результат;

КонецФункции

// Выполняет отмену строк заказа.
//
// Параметры:
//   Таблица       - ТабличнаяЧасть - табличная часть заказа.
//   КлючЗаписи    - РегистрСведенийКлючЗаписи.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок - ключ записи, 
//                     по которому требуется отмена строк заказа.
//                 - РегистрСведенийЗапись.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок - запись, по которой 
//                     требуется отмена строк заказа.
//   ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов -
//                 - Структура - причина отмены строк заказа:
//     * Идентификатор - Число - идентификатор причины отмены отправления;
//     * Наименование  - Строка - наименование причины отмены;
//     * Ссылка        - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//
// Возвращаемое значение:
//   Структура - см. РезультатОтменыСтрок.
//
Функция ОтменитьСтрокиЗаказаДляЭкземпляра(Таблица, Знач КлючЗаписи, Знач ПричинаОтмены)

	Результат = РезультатОтменыСтрок();

	ДанныеЗаписи =
			РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ДанныеЗаписи, КлючЗаписи);
	ДанныеЗаписи.Прочитать();
	Если ДанныеЗаписи.Выбран() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("КодСтроки", ДанныеЗаписи.КодСтроки);
		Результат = ОтменитьСтрокиЗаказа(Таблица, ПричинаОтмены, Отбор, ДанныеЗаписи.Количество);
		
		Если Результат.ПересчитываемыеСтроки.Количество() = 2 Тогда
			ДанныеЗаписи.КодСтроки = Результат.ПересчитываемыеСтроки[1].КодСтроки;
			ДанныеЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет отмену строк заказа.
//
// Параметры:
//   Таблица          - ТабличнаяЧасть - табличная часть заказа.
//   ПричинаОтмены    - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - 
//                    - Структура - причина отмены:
//     * Идентификатор - Число - идентификатор причины отмены отправления;
//     * Наименование  - Строка - наименование причины отмены;
//     * Ссылка        - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//   Отбор            - Неопределено - для отмены всех строк заказа;
//                    - Структура из КлючИЗначение - отбор отменяемых строк заказа.
//                    - Массив из РегистрСведенийКлючЗаписи - набор ключей записей,
//   КоличествоОтмены - Неопределено - для отмены всех строк заказа;
//                    - Число - отменяемое количество, актуально при использовании отбора строк заказа.
//
// Возвращаемое значение:
//   См. РезультатОтменыСтрок.
//
Функция ОтменитьСтрокиЗаказа(Таблица, Знач ПричинаОтмены, Знач Отбор = Неопределено,
			Знач КоличествоОтмены = Неопределено)

	Результат = РезультатОтменыСтрок();
	
	Если Отбор = Неопределено Тогда
		СтрокиЗаказа = Таблица;
	Иначе
		СтрокиЗаказа = Таблица.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		Если КоличествоОтмены = Неопределено Тогда
			КоличествоОтмены = СтрокаЗаказа.КоличествоУпаковок;
		КонецЕсли;
		
		ЗакрываемоеКоличество = Мин(КоличествоОтмены, СтрокаЗаказа.КоличествоУпаковок);
		КоличествоОтмены = КоличествоОтмены - ЗакрываемоеКоличество;
		
		РазбитьСтроку = (СтрокаЗаказа.КоличествоУпаковок <> ЗакрываемоеКоличество);
		
		Если СтрокаЗаказа.Отменено Тогда
			Результат.ПропущенныеСтроки.Добавить(СтрокаЗаказа.НомерСтроки);
		Иначе
			Если РазбитьСтроку Тогда
				НоваяСтрока = Таблица.Вставить(Таблица.Индекс(СтрокаЗаказа) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказа);
				НоваяСтрока.КоличествоУпаковок = СтрокаЗаказа.КоличествоУпаковок - ЗакрываемоеКоличество;
				Результат.ПересчитываемыеСтроки.Добавить(НоваяСтрока);
				
				СтрокаЗаказа.КоличествоУпаковок = ЗакрываемоеКоличество;
				СтрокаЗаказа.КодСтроки = 0;
				СтрокаЗаказа.ИдентификаторСтроки = Новый УникальныйИдентификатор();
				Результат.ПересчитываемыеСтроки.Добавить(СтрокаЗаказа);
			КонецЕсли;
			
			СтрокаЗаказа.Отменено = Истина;
			
			Если ТипЗнч(ПричинаОтмены) = Тип("Структура") Тогда
				СтрокаЗаказа.ПричинаОтмены = ПричинаОтмены.Ссылка;
			Иначе
				СтрокаЗаказа.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Результат.ЗаписатьЗаказ = Истина;
		КонецЕсли;
			
		Если КоличествоОтмены = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОтправленияСлужебный

// Получает список причин отмены из сервиса.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений - Строка, Массив Из Строка, Неопределено - номера отправлений.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьПричиныОтмены(УчетнаяЗапись, НомераОтправлений = Неопределено) Экспорт
	
	Ошибка = НоваяОшибка();
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		Ошибка = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПричиныОтмены(УчетнаяЗапись, НомераОтправлений);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
