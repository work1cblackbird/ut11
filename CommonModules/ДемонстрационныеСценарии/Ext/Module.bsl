#Область СлужебныйПрограммныйИнтерфейс

// Создает элементы формы для отображения доступных языков
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения  - форма, для которой отображаются языки
//
Процедура СоздатьЭлементыФормыЯзыкиКонфигурации(Форма) Экспорт
	
	Если ЭлементыЯзыкиКонфигурацииСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ЯзыкиКонфигурации = ЯзыкиКонфигурации();
	
	Для Каждого ЯзыкКонфигурации Из ЯзыкиКонфигурации Цикл
		
		ГруппаРазмещения = Форма.Элементы.ПодменюЯзыкРедактирования;
	
		НоваяКоманда = Форма.Команды.Добавить("ПереключитьНаЯзыкРедактирования_" + ЯзыкКонфигурации);
		НоваяКоманда.Действие = "Подключаемый_ИзменитьЯзыкРедактирования";
		
		КнопкаПодменю = Форма.Элементы.Добавить("ПереключитьНаЯзыкРедактирования_" + ЯзыкКонфигурации,
		                                        Тип("КнопкаФормы"),
		                                        ГруппаРазмещения);
		
		КнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок             = ЯзыкКонфигурации;
		КнопкаПодменю.ТолькоВоВсехДействиях = Ложь; 
		
		ГруппаРазмещения = Форма.Элементы.ПодменюЯзыкПросмотра;
	
		НоваяКоманда = Форма.Команды.Добавить("ПереключитьНаЯзыкПросмотра_" + ЯзыкКонфигурации);
		НоваяКоманда.Действие = "Подключаемый_ИзменитьЯзыкПросмотра";
		
		КнопкаПодменю = Форма.Элементы.Добавить("ПереключитьНаЯзыкПросмотра_" + ЯзыкКонфигурации,
		                                        Тип("КнопкаФормы"),
		                                        ГруппаРазмещения);
		
		КнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок             = ЯзыкКонфигурации;
		КнопкаПодменю.ТолькоВоВсехДействиях = Ложь;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает данные присоединенного файла для обработки в форме объекта
//
// Параметры:
//  СсылкаНаПрисоединенныйФайл - СправочникСсылка.ДемонстрационныеСценарииПрисоединенныеФайлы - файл, для которого получаются данные
// 
// Возвращаемое значение:
//   Структура   - содержит:
//    *Наименование    - Строка - имя файла
//    *ТекстHTML       - Строка - текст, содержащийся в файле
//    *ДатаМодификации - Дата - дата последнего изменения
//    *Изменил         - СправочникСсылка.Пользователи - автор последнего изменения
//    *Редактируется   - Булево - признак того, что файл сейчас редактируется
//    *ДатаЗахвата     - Дата - дата захвата файла
//    *Редактирует     - СправочникСсылка.Пользователи - пользователь, редактирующий файл в данный момент
//
Функция ДанныеПрисоединенногоФайлаДляФормыОбъекта(СсылкаНаПрисоединенныйФайл) Экспорт
	
	ПустаяДата               = Дата(1, 1, 1);
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Наименование",    "");
	СтруктураВозврата.Вставить("ТекстHTML",       ДемонстрационныеСценарииКлиентСервер.ПустойТекстHTML());
	СтруктураВозврата.Вставить("ДатаМодификации", ПустаяДата);
	СтруктураВозврата.Вставить("Изменил",         ПользователиПустаяСсылка);
	СтруктураВозврата.Вставить("Редактируется",   Ложь);
	СтруктураВозврата.Вставить("ДатаЗахвата",     ПустаяДата);
	СтруктураВозврата.Вставить("Редактирует",     ПользователиПустаяСсылка); 
	
	Если Не ЗначениеЗаполнено(СсылкаНаПрисоединенныйФайл) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(СсылкаНаПрисоединенныйФайл);
	
	СтруктураВозврата.ТекстHTML       = ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайла);
	СтруктураВозврата.ДатаМодификации = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
	СтруктураВозврата.ДатаЗахвата     = ДанныеФайла.ДатаЗаема;
	СтруктураВозврата.Редактирует     = ДанныеФайла.Редактирует;
	СтруктураВозврата.Редактируется   = ДанныеФайла.ФайлРедактируется;
	СтруктураВозврата.Изменил         = ДанныеФайла.АвторТекущейВерсии;
	СтруктураВозврата.Наименование    = ДанныеФайла.Наименование;
	
	Возврат СтруктураВозврата;
	
КонецФункции 

// Получает текущие языки конфигурации
//
// Возвращаемое значение:
//   Массив Из Строка - 
//
Функция ЯзыкиКонфигурации() Экспорт
	
	Языки = Новый Массив;
	Для каждого Язык Из Метаданные.Языки Цикл
		Языки.Добавить(Язык.КодЯзыка);
	КонецЦикла;
	
	Возврат Языки;
	
КонецФункции

// Формирует строку для представления объектов конфигурации или профилей в режиме просмотра
//
// Параметры:
//  ЗаголовокПредставления  - Строка - заголовок строки
//  СписокПредставлений     - СписокЗначений - содержит представления объектов
//  МаксимальнаяДлинаСтроки - Число - максимальная длина формируемого представления
//
// Возвращаемое значение:
//   Строка - сформированное представление
//
Функция СтрокаПредставлениеСЕще(ЗаголовокПредставления, СписокПредставлений, МаксимальнаяДлинаСтроки) Экспорт

	Представление = ЗаголовокПредставления;
	
	ОбработаноЭлементов = 0;
	Для Каждого ЭлементСписка Из СписокПредставлений Цикл
		
		Если СтрДлина(Представление) + СтрДлина(ЭлементСписка.Представление) < МаксимальнаяДлинаСтроки Тогда
			Представление = Представление + ?(ОбработаноЭлементов = 0, " ", ", ") + ЭлементСписка.Представление;
		Иначе
			Возврат Представление + " " + СтрШаблон(НСтр("ru = 'и еще %1'"), Строка(СписокПредставлений.Количество() - ОбработаноЭлементов));
		КонецЕсли; 
		
		ОбработаноЭлементов = ОбработаноЭлементов + 1;
		
	КонецЦикла; 
	
	Возврат Представление;
	
КонецФункции

// Загружает сохраненную настройку по варианту отображения формы для пользователя
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения  - форма, для которой выполняется действие
//  ДоступныеЗначения  - Массив Из Строка            - доступные для текущего пользователя значения
//  МетаданныеОбъекта  - ОбъектМетаданных            - метаданные объекта
//
Процедура ЗагрузитьНастройкуПоВариантуОтображенияФормы(Форма, ДоступныеЗначения, МетаданныеОбъекта) Экспорт
	
	Форма.ЕстьПравоРедактирования          = ПравоДоступа("Изменение", МетаданныеОбъекта);
	
	РежимОтображенияНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РежимОтображенияФормаОписанияПроцессов",
	                                                                             "НастройкиПользователя",
	                                                                              Неопределено);
	
	Если Не ЗначениеЗаполнено(РежимОтображенияНастройки) Тогда
		
		РежимОтображенияНастройки = "Просмотр";
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ВыполнитьПоиск")
		И Не Форма.Параметры.ВыполнитьПоиск Тогда
		
		РежимОтображенияНастройки = "Редактирование";
		
	КонецЕсли;
	
	Если ДоступныеЗначения.Найти(РежимОтображенияНастройки) = Неопределено Тогда
		
		РежимОтображенияНастройки = "Просмотр";
		
	КонецЕсли;
	
	Если Не Форма.ЕстьПравоРедактирования Тогда
		
		РежимОтображенияНастройки = "Просмотр";
		Форма.Элементы.ПодменюРежимПросмотраРедактирования.Видимость = Ложь;
		
	КонецЕсли;
	
	ПараметрыПереключения = ДемонстрационныеСценарииКлиентСервер.НовыйПараметрыПереключенияВариантаОтображения();
	ПараметрыПереключения.Форма                          = Форма;
	ПараметрыПереключения.НовыйВариант                   = РежимОтображенияНастройки;
	
	ДемонстрационныеСценарииКлиентСервер.ПереключитьВариантОтображения(ПараметрыПереключения);
	
КонецПроцедуры

// Устанавливает языки в форме по умолчанию
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения  - форма, для которой выполняется действие
//  ИмяРеквизитаЧтение         - Строка - имя реквизита в котором находится текст для просмотра
//  ИмяРеквизитаРедактирование - Строка - имя реквизита в котором находится текст для редактирования
//
Процедура УстановитьНастройкуПоЯзыкамВФорме(Форма, ИмяРеквизитаЧтение, ИмяРеквизитаРедактирование) Экспорт 
	
	КодТекущегоЯзыка =  ТекущийЯзык().КодЯзыка;
	
	Форма[ИмяРеквизитаРедактирование] = КодТекущегоЯзыка;
	Форма[ИмяРеквизитаЧтение] = КодТекущегоЯзыка;
	
КонецПроцедуры

// Возвращает доступные для пользователя варианты отображения
//
// Параметры:
//  ВключатьРежимПеревод  - Булево - требуется ли включать вариант "Перевод"
//
// Возвращаемое значение:
//   Массив Из Строка - доступные варианты отображения
//
Функция ДоступныеВариантыОтображения(ВключатьРежимПеревод = Истина) Экспорт
	
	ДоступныеВарианты = Новый Массив;
	ДоступныеВарианты.Добавить("Просмотр");
	ДоступныеВарианты.Добавить("Редактирование");
	
	Если ВключатьРежимПеревод Тогда
		ДоступныеВарианты.Добавить("Перевод");
	КонецЕсли;
	
	Возврат ДоступныеВарианты;
	
КонецФункции

// Заполняет описания сценариев в форме 
//
// Параметры:
//  ТекущийОбъект         - СправочникОбъект.ДемонстрационныеСценарии - объект, для которого выполняется действие
//  ОписанияСценарияФорма - ТаблицаЗначений - реквизит формы, в который помещаются описания
//
Процедура ЗаполнитьОписанияСценариев(ТекущийОбъект, ОписанияСценарияФорма) Экспорт

	ОписанияСценарияФорма.Очистить();
	Для каждого ТекСтрока Из ТекущийОбъект.ОписанияСценария Цикл
		
		НоваяСтрока = ОписанияСценарияФорма.Добавить();
		Попытка
			ДанныеПрисоединенногоФайла = ДанныеПрисоединенногоФайлаДляФормыОбъекта(ТекСтрока.ПрисоединенныйФайл);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПрисоединенногоФайла);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		НоваяСтрока.КодЯзыка = ТекСтрока.КодЯзыка;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет описания сценариев в форме сценариями другого объекта 
//
// Параметры:
//  ДругойОбъект          - СправочникОбъект.ДемонстрационныеСценарии - объект, чьими описаниями копируются
//  ОписанияСценарияФорма - ТаблицаЗначений - реквизит формы, в который помещаются описания
//
Процедура ЗаполнитьОписанияСценариевВФормеСценариямиДругогоОбъекта(ДругойОбъект, ОписанияСценарияФорма) Экспорт
	
	ОписанияСценарияФорма.Очистить();
	
	Если ЗначениеЗаполнено(ДругойОбъект)
		И ТипЗнч(ДругойОбъект) = Тип("СправочникСсылка.ДемонстрационныеСценарии") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДемонстрационныеСценарииПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ДемонстрационныеСценарииПрисоединенныеФайлы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДемонстрационныеСценарииПрисоединенныеФайлы КАК ДемонстрационныеСценарииПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ДемонстрационныеСценарииПрисоединенныеФайлы.ПометкаУдаления
		|	И ДемонстрационныеСценарииПрисоединенныеФайлы.ВладелецФайла = &ДругойОбъект";
		
		Запрос.УстановитьПараметр("ДругойОбъект", ДругойОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НоваяСтрока = ОписанияСценарияФорма.Добавить();
			ДанныеПрисоединенногоФайла = ДанныеПрисоединенногоФайлаДляФормыОбъекта(Выборка.Ссылка);
			НоваяСтрока.ТекстHTML      = ДанныеПрисоединенногоФайла.ТекстHTML;
			НоваяСтрока.КодЯзыка       = ДемонстрационныеСценарииКлиентСервер.КодЯзыкаИзИмениФайла(ДанныеПрисоединенногоФайла.Наименование);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает присоединенный файл сценария
//
// Параметры:
//  ВладелецФайла - СправочникСсылка.ДемонстрационныеСценарии - сценарий для которого создается файл
//  Форма         - ФормаКлиентскогоПриложения  - форма, в которой выполняется действие
//  КодЯзыка       - Строка  - код языка, для которого создается файл
//
// Возвращаемое значение:
//   Структура - содержит:
//     * Успешно            - Булево - признак успешности выполнения операции
//     * ПрисоединенныйФайл - СправочникСсылка.ДемонстрационныеСценарииПрисоединенныеФайлы, Неопределено - ссылка на созданный файл
//     * ТекстОшибки        - Строка - текст ошибки в случае неудачи
//
Функция РезультатСозданияПрисоединенногоФайлаСценария(ВладелецФайла, Форма, КодЯзыка) Экспорт
	
	СправочникОбъект = Форма.Объект;
	
	РезультатСоздания = Новый Структура;
	РезультатСоздания.Вставить("Успешно",            Ложь);
	РезультатСоздания.Вставить("ПрисоединенныйФайл", Неопределено);
	РезультатСоздания.Вставить("ТекстОшибки",        "");
	
	Если Не ЗначениеЗаполнено(КодЯзыка) Тогда
		РезультатСоздания.ТекстОшибки = НСтр("ru = 'Не указан код языка'");
		Возврат РезультатСоздания;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КодЯзыка", КодЯзыка);
	
	ТекстСценария = "";
	НайденныеСтроки = Форма.ОписанияСценария.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекстСценария =   НайденныеСтроки[0].ТекстHTML;
	Иначе
		НоваяСтрока = Форма.ОписанияСценария.Добавить();
		НоваяСтрока.КодЯзыка = КодЯзыка;
		НоваяСтрока.ТекстHTML = ДемонстрационныеСценарииКлиентСервер.ПустойТекстHTML();
		ТекстСценария = НоваяСтрока.ТекстHTML
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ТекстСценария);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Форма.УникальныйИдентификатор);
	
	ПараметрыЗаписиФайла = РаботаСФайлами.ПараметрыДобавленияФайла(); 
	ПараметрыЗаписиФайла.ВладелецФайлов              = ВладелецФайла;
	ПараметрыЗаписиФайла.ИмяБезРасширения            =  ДемонстрационныеСценарииКлиентСервер.ИмяФайлаОписанияСценария(СправочникОбъект.ПолныйКод,КодЯзыка);
	ПараметрыЗаписиФайла.РасширениеБезТочки          = "HTML";
	ПараметрыЗаписиФайла.ВремяИзмененияУниверсальное = Неопределено;
	
	Попытка
	
		СозданныйПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
		                                    ПараметрыЗаписиФайла,
		                                    АдресВоВременномХранилище,
		                                    "");
	
	Исключение
		
		РезультатСоздания.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатСоздания;
		
	КонецПопытки;
	
	РезультатСоздания.Успешно            = Истина;
	РезультатСоздания.ПрисоединенныйФайл = СозданныйПрисоединенныйФайл;
	
	Возврат РезультатСоздания;
	
КонецФункции

// Выполняет запись нового присоединенного файла сценария из формы объекта
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения  - форма, в которой выполняется действие
//  ТекущийОбъект - СправочникОбъект.ДемонстрационныеСценарии - сценарий для которого записываются файлы
//  Отказ         - Булево  - признак неудачи выполнения операции
//
Процедура ЗаписатьНовыеОписанияСценариевИзФормыОбъекта(Форма, ТекущийОбъект, Отказ) Экспорт
	
	Для Каждого ОписаниеСценария Из Форма.ОписанияСценария Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеСценария.ДатаМодификации) Тогда
			
			Если ТекущийОбъект.Ссылка.Пустая() Тогда
				
				СсылкаНового = Справочники.ДемонстрационныеСценарии.ПолучитьСсылку(Форма.УникальныйИдентификатор);
				ТекущийОбъект.УстановитьСсылкуНового(СсылкаНового); 
				СсылкаНаСценарий = ТекущийОбъект.ПолучитьСсылкуНового();
				
			Иначе
				
				СсылкаНаСценарий = ТекущийОбъект.Ссылка;
				
			КонецЕсли;
			
			РезультатСоздания = РезультатСозданияПрисоединенногоФайлаСценария(
				СсылкаНаСценарий, 
				Форма,
				ОписаниеСценария.КодЯзыка);
				
			Если РезультатСоздания.Успешно Тогда
				
				НоваяСтрока = ТекущийОбъект.ОписанияСценария.Добавить();
				НоваяСтрока.КодЯзыка           = ОписаниеСценария.КодЯзыка;
				НоваяСтрока.ПрисоединенныйФайл = РезультатСоздания.ПрисоединенныйФайл;
				
				ОписаниеСценария.ЕстьИзмененияРедактирования = Ложь;
				
			Иначе
				
				ОбщегоНазначения.СообщитьПользователю(РезультатСоздания.ТекстОшибки);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеСценария.ЕстьИзмененияРедактирования Тогда
			
			ПрисоединенныйФайл = ДемонстрационныеСценарииКлиентСервер.ПрисоединенныйФайлСценария(Форма, ОписаниеСценария.КодЯзыка);
			
			РезультатСохранения = РезультатОбновленияПрисоединенногоФайла(ПрисоединенныйФайл, Форма.УникальныйИдентификатор, ОписаниеСценария.ТекстHTML);
			
			Если Не РезультатСохранения Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет присоединенный файл сценария
//
// Параметры:
//  ПрисоединенныйФайл       - СправочникСсылка.ДемонстрационныеСценарииПрисоединенныеФайлы - обновляемый файл
//  УникальныйИдентификатор  - УникальныйИдентификатор  - идентификатор формы, в которой выполняется действие
//  НовыеДанные              - Строка, ДвоичныеДанные  - новое содержимое файла
//
// Возвращаемое значение:
//   Булево - Истина, если успешно
//
Функция РезультатОбновленияПрисоединенногоФайла(ПрисоединенныйФайл, УникальныйИдентификатор, НовыеДанные) Экспорт
	
	ТекущиеДанныеПрисоединенногоФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор, , Истина); 
	
	Если ТипЗнч(НовыеДанные) = Тип("Строка") Тогда
		НовыеДанные = ПолучитьДвоичныеДанныеИзСтроки(НовыеДанные);
	КонецЕсли;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НовыеДанные, УникальныйИдентификатор);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("Файл"); 
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВоВременномХранилище;
	СведенияОФайле.РасширениеБезТочки = ТекущиеДанныеПрисоединенногоФайла.Расширение;
	Если Не ПустаяСтрока(СведенияОФайле.РасширениеБезТочки) Тогда
		СведенияОФайле.ИмяБезРасширения = Лев(ТекущиеДанныеПрисоединенногоФайла.ИмяФайла,
		                                  СтрДлина(ТекущиеДанныеПрисоединенногоФайла.ИмяФайла) - СтрДлина(СведенияОФайле.РасширениеБезТочки) - 1);
	Иначе
		СведенияОФайле.ИмяБезРасширения = ТекущиеДанныеПрисоединенногоФайла.ИмяФайла;
	КонецЕсли;
	
	СведенияОФайле.Кодировка = ТекущиеДанныеПрисоединенногоФайла.Кодировка;
	
	РезультатСохранения = РаботаСФайламиСлужебныйВызовСервера.СохранитьИзмененияИОсвободитьФайл(
		ТекущиеДанныеПрисоединенногоФайла, СведенияОФайле, Ложь, "", "", УникальныйИдентификатор); 
		
	Возврат РезультатСохранения;
	
КонецФункции

// Добавляет роли чтения подсистемы описание процессов в профиль
//
// Параметры:
//  ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа 
//
Процедура ДобавитьРолиЧтениеОбъектовПодсистемыОписаниеПроцессов(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ПодсистемаОписаниеПроцессов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГлоссариев");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДемонстрационныхСценариев");
	
КонецПроцедуры

// Обрабатывает переданные в форму сценария при открытии параметры поиска, если требуется выполнить поиск
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения  - форма, для которой выполняется действие
//  Параметры  - Структура - параметеры выполняемого поиска
//
Процедура ОбработатьПереданныеВФормуОбъектаПараметрыПоиска(Форма, Параметры) Экспорт
	
	Если Параметры.Свойство("ВыполнитьПоиск")
		И Параметры.ВыполнитьПоиск Тогда
		
		Форма.ПараметрыПоискаПриОткрытии = Параметры.ПараметрыПоиска;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует объект ДокументHTML из текста HTML
//
// Параметры:
//  ТекстHTML   - Строка - текст из которого будет сформирован объект ДокументHTML
//  Кодировка   - Строка  - кодировка текста
//
// Возвращаемое значение:
//   ДокументHTML - сформированный объект
//
Функция ОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка = Неопределено) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = СтрНайти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = СтрНайти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = ЛЕВ(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + ПРАВ(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		
	Иначе
		
		Попытка
		
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		
		Исключение
			
			ЧтениеHTML.УстановитьСтроку(ТекстHTML);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Выполняет перевод
//
// Параметры:
//  ПереводимыйТекст - Строка - текст, который переводится
//  ЯзыкСКоторогоПереводим         - строка  - код языка, с которого выполняется перевод
//  ЯзыкНаКоторыйПереводим         - строка  - код языка, на который выполняется перевод
//
// Возвращаемое значение:
//   Структура - содержит:
//     * Успешно               - Булево - признак успешности выполнения операции
//     * СообщениеПользователю - Строка - текст сообщения пользователю
//     * ПереведенныйТекст     - Строка - результат перевода
//
Функция РезультатПереводаНаДругиеЯзыки(ПереводимыйТекст, ЯзыкСКоторогоПереводим, ЯзыкНаКоторыйПереводим) Экспорт
	
	РезультатПеревода = Новый Структура;
	РезультатПеревода.Вставить("Успешно",               Ложь);
	РезультатПеревода.Вставить("СообщениеПользователю", "");
	РезультатПеревода.Вставить("ПереведенныйТекст"      , "");
	
	ДокументHTML = ОбъектДокументHTMLИзТекстаHTML(ПереводимыйТекст);
	СоответствиеТекстовУзламДокумента = СоответствиеТекстовУзламДокумента(ДокументHTML.Тело);
	
	Если СоответствиеТекстовУзламДокумента.Количество() = 0 Тогда
		
		РезультатПеревода.СообщениеПользователю = НСтр("ru = 'Текст для перевода в исходном сценарии найден не был'");
		Возврат РезультатПеревода;
		
	КонецЕсли;
	
	МассивСтрокДляПеревода = Новый Массив;
	Для Каждого ЭлементСоответствия Из СоответствиеТекстовУзламДокумента Цикл
		МассивСтрокДляПеревода.Добавить(ЭлементСоответствия.Значение.Текст);
	КонецЦикла;
	
	Попытка
	
		ДанныеПеревода = ПереводТекстаНаДругиеЯзыки.ПеревестиТексты(МассивСтрокДляПеревода, ЯзыкНаКоторыйПереводим, ЯзыкСКоторогоПереводим); 
	
	Исключение
		
		РезультатПеревода.СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатПеревода;

	КонецПопытки;
	
	Для Каждого ЭлементПеревода Из ДанныеПеревода Цикл
		
		ХешТекста = ХешТекста(ЭлементПеревода.Ключ);
		
		ДанныеУзлов = СоответствиеТекстовУзламДокумента.Получить(ХешТекста);
		
		Если ДанныеУзлов <> Неопределено Тогда
			
			Для Каждого УзелДокумента Из ДанныеУзлов.УзлыДокумента Цикл
				
				УзелДокумента.ЗначениеУзла = ЭлементПеревода.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	РезультатПеревода.ПереведенныйТекст = ТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	РезультатПеревода.Успешно         = Истина; 
	
	Возврат РезультатПеревода;
	
КонецФункции

// Кэширует языки конфигурации в реквизите формы
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения  - форма, в которой выполняется действие
//
Процедура УстановитьЯзыкиКонфигурацииВФорме(Форма) Экспорт

	Форма.ЯзыкиКонфигурации = Новый СписокЗначений;
	Форма.ЯзыкиКонфигурации.ЗагрузитьЗначения(ЯзыкиКонфигурации());

КонецПроцедуры

// Получает имя мультиязычного реквизита объекта текущего языка пользователя
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита
//  ЯзыкСКоторогоПереводим         - строка  - код языка, с которого выполняется перевод
//
// Возвращаемое значение:
//   Строка - имя мультиязычного реквизита
//
Функция ИмяМультиязычногоРеквизита(ИмяРеквизита) Экспорт
	
	Постфикс = МультиязычностьСервер.СуффиксТекущегоЯзыка();
	
	Возврат ИмяРеквизита + Постфикс;

КонецФункции

// Метод сбросывает размеры и положение окна. Позволяет восстановить размеры формы
// после открытия-закрытия сворачиваемых форм и перерисовки элементов с учетом видимости
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой необходимо сбросить настройки
//
Процедура СброситьРазмерыИПоложениеОкна(Форма) Экспорт
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить(Форма.ИмяФормы, "", ИмяПользователя);
	КонецЕсли;
	Форма.КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработчик фонового задания по поиску в демонстрационных сценариях
//
// Параметры:
//  ПараметрыПоиска - Структура  - 
//  АдресХранилища  - Строка  - адрес, по которому будет помещен результат выполнения операции
//
Процедура ВыполнитьПоискВДемонстрационныхСценариях(ПараметрыПоиска, АдресХранилища) Экспорт
	
	РезультатПоиска = РезультатГлобальногоПоискаВДемонстрационныхСценариях(ПараметрыПоиска);
	
	ПоместитьВоВременноеХранилище(РезультатПоиска, АдресХранилища);
	
КонецПроцедуры

// Обработчик фонового задания по выполнению замены в демонстрационных сценариях
//
// Параметры:
//  ПараметрыЗамены - Структура  - 
//  АдресХранилища - Строка  - адрес, по которому будет помещен результат выполнения операции
//
Процедура ВыполнитьЗаменуВДемонстрационныхСценариях(ПараметрыЗамены, АдресХранилища) Экспорт
	
	РезультатЗамены = РезультатЗаменыВДемонстрационныхСценариях(ПараметрыЗамены);
	
	ПоместитьВоВременноеХранилище(РезультатЗамены, АдресХранилища);
	
КонецПроцедуры 

// Обработчик фонового задания по выполнению замены в демонстрационных сценариях
//
// Параметры:
//  ПараметрыЗамены - Структура  - 
//  АдресХранилища - Строка  - адрес, по которому будет помещен результат выполнения операции
//
Процедура ВыполнитьПереводДемонстрационныхСценариев (ПараметрыЗамены, АдресХранилища) Экспорт
	
	РезультатЗамены = РезультатПереводаВДемонстрационныхСценариях(ПараметрыЗамены);
	
	ПоместитьВоВременноеХранилище(РезультатЗамены, АдресХранилища);
	
КонецПроцедуры

// Ищет уникальные ссылки в HTML документе
//
// Параметры:
//  ТекстСценария   - Строка - текст HTML документа
//
// Возвращаемое значение:
//   Массив из Строка - найденные ссылки
//
Функция УникальныеСсылкиВHTMLДокументе(ТекстСценария) Экспорт

	ДлинаТекста = СтрДлина(ТекстСценария);
	НачалоГиперссылки = "<a href=""";
	ДлинаНачалаТегаГиперссылки = 8;
	ПозицияНайденного = СтрНайти(ТекстСценария, НачалоГиперссылки, НаправлениеПоиска.СНачала, 1);
	НайденныеСсылки = Новый Массив;
	
	Пока ПозицияНайденного <> 0 Цикл
		
		НачалоПоискаТелаГиперссылки = ПозицияНайденного + ДлинаНачалаТегаГиперссылки;
		ГдеИщемТелоГиперссылки = Прав(ТекстСценария, ДлинаТекста - НачалоПоискаТелаГиперссылки);
		НайденнаяПозицияОкончаниеГиперссылки = СтрНайти(ГдеИщемТелоГиперссылки, """", НаправлениеПоиска.СНачала, ДлинаНачалаТегаГиперссылки);
		Если НайденнаяПозицияОкончаниеГиперссылки = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НайденнаяСсылка = Сред(ТекстСценария, НачалоПоискаТелаГиперссылки + 1, НайденнаяПозицияОкончаниеГиперссылки - 1);
		Если НайденныеСсылки.Найти(НайденнаяСсылка) = Неопределено Тогда
			НайденныеСсылки.Добавить(НайденнаяСсылка);
		КонецЕсли;
		
		ПозицияНайденного = СтрНайти(ТекстСценария, НачалоГиперссылки, НаправлениеПоиска.СНачала, ПозицияНайденного + НайденнаяПозицияОкончаниеГиперссылки);
		
	КонецЦикла;
	
	Возврат НайденныеСсылки;
	
КонецФункции

// Получает ссылку на объект по навигационной ссылке
//
// Параметры:
//  НавигационнаяСсылка  - Строка - 
//
// Возвращаемое значение:
//   СправочникСсылка, ДокументСсылка, Неопределено - полученная из навигационной ссылки ссылка на объект
//
Функция СсылкаНаОбъектПоНавигационнойСсылке(НавигационнаяСсылка) Экспорт
	
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
	
	ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ПредставлениеИдентификатора = Сред(НавигационнаяСсылка, ВтораяТочка + 5);
	ПредставлениеИдентификатора = Прав(ПредставлениеИдентификатора, 8) + "-"
	                              + Сред(ПредставлениеИдентификатора, 21, 4) + "-"
	                              + Сред(ПредставлениеИдентификатора, 17, 4) + "-"
	                              + Лев(ПредставлениеИдентификатора, 4) + "-"
	                              + Сред(ПредставлениеИдентификатора, 5, 12);
	
	Попытка
		ТипСсылки = ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка");
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ТипСсылки);
		Результат = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ПредставлениеИдентификатора));
	Исключение
		Результат = Неопределено; 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление текущей версии конфигурации
//
// Возвращаемое значение:
//   Строка - сформированное представление текущей версии конфигурации
//
Функция ПредставлениеТекущаяВерсияКонфигурации() Экспорт
	
	Возврат СтрШаблон(НСтр("ru = '%1 версии %2 от %3'"),
	                  Метаданные.КраткаяИнформация, 
	                  Метаданные.Версия, 
	                  Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
	
КонецФункции

// Формирует данные описаний процессов для выгрузки
//
// Параметры:
//  Поставщик  - Строка - строковое представление поставщика описаний процессов
//
// Возвращаемое значение:
//   Структура  - содержит:
//     * Успешно               - Булево - признак того, что отчет сформирован успешно.
//     * СообщенияОбОшибках    - Массив Из Строка - сообщения об ошибках, в случае, если подготовка данных завершилась неудачей.
//     * ПодготовленныеДанные  - Структура - подготовленные данные.
//
Функция РезультатПостановкиНаПоддержку(Поставщик) Экспорт
	
	РезультатПостановки = Новый Структура;
	РезультатПостановки.Вставить("Успешно",           Истина);
	РезультатПостановки.Вставить("СообщениеОбОшибке", "");
	
	ВыполнитьПостановкуНаПоддержку(РезультатПостановки, Поставщик);
	
	Возврат РезультатПостановки;
	
КонецФункции 

// Используется фоновым заданием по постановке на поддержку описаний процессов от текущей версии.
// Параметры:
//  ПараметрыФормирования  - Структура - 
//  АдресХранилища         - Строка - адрес временного хранилища, в которое будут помещены полученные данные
//
Процедура ПоставитьОписанияПроцессовНаПоддержкуОтТекущейВерсии(ПараметрыФормирования, АдресХранилища) Экспорт
	
	РезультатПостановки = РезультатПостановкиНаПоддержку(ПараметрыФормирования.Поставщик);
	
	ПоместитьВоВременноеХранилище(РезультатПостановки, АдресХранилища);
	
КонецПроцедуры

// Конструктор структуры, содержащей реквизиты справочника "Описание процессов"
//
// Возвращаемое значение:
//  Структура - содержит:
//   *Ссылка               - СправочникСсылка.ДемонстрационныеСценарии - 
//   *ПометкаУдаления      - Булево - 
//   *ЭтоГруппа            - Булево - 
//   *ТипГруппы            - ПеречислениеСсылка.ТипыГруппДемонстрационныхСценариев - 
//   *ПолныйКод            - Строка - 
//   *Код                  - Строка -  
//   *Наименование         - Строка - 
//   *НаименованиеЯзык1    - Строка - 
//   *НаименованиеЯзык2    - Строка - 
//   *Комментарий          - Строка - 
//   *Статус               - ПеречислениеСсылка.СтатусыДемонстрационныхСценариев- 
//   *ПрофилиГруппДоступа  - ТаблицаЗначений - 
//   *ОбъектыКонфигурации  - ТаблицаЗначений - 
//
Функция НовыйДанныеРеквизитовОписаниеПроцессов() Экспорт
	
	ДанныеРеквизитов = Новый Структура;
	
	ДанныеРеквизитов.Вставить("Ссылка",             Новый ОписаниеТипов("СправочникСсылка.ДемонстрационныеСценарии"));
	ДанныеРеквизитов.Вставить("ПометкаУдаления",    Новый ОписаниеТипов("Булево"));
	ДанныеРеквизитов.Вставить("ЭтоГруппа",          Новый ОписаниеТипов("Булево"));
	ДанныеРеквизитов.Вставить("ТипГруппы",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыГруппДемонстрационныхСценариев"));
	ДанныеРеквизитов.Вставить("Родитель",           Новый ОписаниеТипов("СправочникСсылка.ДемонстрационныеСценарии"));
	ДанныеРеквизитов.Вставить("ПолныйКод",          ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеРеквизитов.Вставить("Код",                ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ДанныеРеквизитов.Вставить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРеквизитов.Вставить("НаименованиеЯзык1",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРеквизитов.Вставить("НаименованиеЯзык2",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРеквизитов.Вставить("Комментарий",        ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДанныеРеквизитов.Вставить("Статус",             Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДемонстрационныхСценариев"));
	ДанныеРеквизитов.Вставить("ПрофилиГруппДоступа");
	ДанныеРеквизитов.Вставить("ОбъектыКонфигурации");
	
	Возврат ДанныеРеквизитов;
	
КонецФункции

// Конструктор структуры, содержащей реквизиты справочника "Глоссарий"
//
// Возвращаемое значение:
//  Структура - содержит:
//   *Ссылка               - СправочникСсылка.Глоссарий - 
//   *ПометкаУдаления      - Булево - 
//   *Код                  - Строка -  
//   *Наименование         - Строка - 
//   *НаименованиеЯзык1    - Строка - 
//   *НаименованиеЯзык2    - Строка - 
//   *ОбъектыКонфигурации  - ТаблицаЗначений - 
//
Функция НовыйДанныеРеквизитовГлоссарий() Экспорт
	
	ДанныеРеквизитов = Новый Структура;
	
	ДанныеРеквизитов.Вставить("Ссылка",             Новый ОписаниеТипов("СправочникСсылка.ДемонстрационныеСценарии"));
	ДанныеРеквизитов.Вставить("ПометкаУдаления",    Новый ОписаниеТипов("Булево"));
	ДанныеРеквизитов.Вставить("Код",                ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ДанныеРеквизитов.Вставить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРеквизитов.Вставить("НаименованиеЯзык1",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРеквизитов.Вставить("НаименованиеЯзык2",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеРеквизитов.Вставить("Комментарий",        ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДанныеРеквизитов.Вставить("ОбъектыКонфигурации");
	
	Возврат ДанныеРеквизитов;
	
КонецФункции 

// Формирует объект JSON по данным справочника Глоссарий
//
// Параметры:
//  ДанныеРеквизитовГлоссария - см. НовыйДанныеРеквизитовГлоссарий
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстJSONРеквизитовГлоссария(ДанныеРеквизитовГлоссария) Экспорт
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("UUID");
	ЗаписьДанных.ЗаписатьЗначение(Строка(ДанныеРеквизитовГлоссария.Ссылка.УникальныйИдентификатор()));
	
	ЗаписьДанных.ЗаписатьИмяСвойства("DeletionMark");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеРеквизитовГлоссария.ПометкаУдаления);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Code");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеРеквизитовГлоссария.Код);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Name");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеРеквизитовГлоссария.Наименование);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("NameLanguage1");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеРеквизитовГлоссария.НаименованиеЯзык1);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("NameLanguage2");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеРеквизитовГлоссария.НаименованиеЯзык2);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("ObjectsOfMetadata");
	ЗаписьДанных.ЗаписатьНачалоМассива();
	
	Для Каждого СтрокаТаблицы Из ДанныеРеквизитовГлоссария.ОбъектыКонфигурации Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектКонфигурации) Тогда
			ЗаписьДанных.ЗаписатьЗначение(Строка(СтрокаТаблицы.ОбъектКонфигурации.УникальныйИдентификатор()));
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьДанных.ЗаписатьКонецМассива();
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ТекстJSON = ЗаписьДанных.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

// Формирует объект JSON по данным справочника "Описание процессов"
//
// Параметры:
//  ДанныеРеквизитовГлоссария - см.НовыйДанныеРеквизитовОписаниеПроцессов()
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстJSONРеквизитыОписаниеПроцессов(ДанныеОписания) Экспорт
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("UUID");
	ЗаписьДанных.ЗаписатьЗначение(Строка(ДанныеОписания.Ссылка.УникальныйИдентификатор()));
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Parent");
	Если ЗначениеЗаполнено(ДанныеОписания.Родитель) Тогда
		ЗаписьДанных.ЗаписатьЗначение(Строка(ДанныеОписания.Родитель.УникальныйИдентификатор()));
	Иначе
		ЗаписьДанных.ЗаписатьЗначение("");
	КонецЕсли;
	
	ЗаписьДанных.ЗаписатьИмяСвойства("DeletionMark");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.ПометкаУдаления);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("FullCode");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.ПолныйКод);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Code");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.Код);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Name");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.Наименование);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Status");
	ЗначениеСтатуса = ?(ЗначениеЗаполнено(ДанныеОписания.Статус), Перечисления.СтатусыДемонстрационныхСценариев.Индекс(ДанныеОписания.Статус), -1);
	ЗаписьДанных.ЗаписатьЗначение(ЗначениеСтатуса);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Comment");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.Комментарий);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("IsGroup");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.ЭтоГруппа);
	
	Если ДанныеОписания.ЭтоГруппа Тогда
		ЗаписьДанных.ЗаписатьИмяСвойства("KindOfGroup");
		ЗаписьДанных.ЗаписатьЗначение(Перечисления.ТипыГруппДемонстрационныхСценариев.Индекс(ДанныеОписания.ТипГруппы));
	КонецЕсли;
	
	ЗаписьДанных.ЗаписатьИмяСвойства("NameLanguage1");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.НаименованиеЯзык1);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("NameLanguage2");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеОписания.НаименованиеЯзык2);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("AccessGroupProfiles");
	ЗаписьДанных.ЗаписатьНачалоМассива();
	
	Для Каждого СтрокаТаблицы Из ДанныеОписания.ПрофилиГруппДоступа Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Профиль) Тогда
			ЗаписьДанных.ЗаписатьЗначение(Строка(СтрокаТаблицы.Профиль.УникальныйИдентификатор()));
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьДанных.ЗаписатьКонецМассива();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("ObjectsOfMetadata");
	ЗаписьДанных.ЗаписатьНачалоМассива();
	
	Для Каждого СтрокаТаблицы Из ДанныеОписания.ОбъектыКонфигурации Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектКонфигурации) Тогда
			ЗаписьДанных.ЗаписатьЗначение(Строка(СтрокаТаблицы.ОбъектКонфигурации.УникальныйИдентификатор()));
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьДанных.ЗаписатьКонецМассива();
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ТекстJSON = ЗаписьДанных.Закрыть();
		
	Возврат ТекстJSON;
	
КонецФункции

// Устанавливает константу "Описания процессов на поддержке"
//
// Параметры:
//  ДанныеКонфигурации - Строка
//  Поставщик          - Строка
//
Процедура УстановитьКонстантуОписанияПроцессовНаПоддержке(ДанныеКонфигурации, Поставщик) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("ConfigurationDescription");
	ЗаписьДанных.ЗаписатьЗначение(ДанныеКонфигурации);
	
	ЗаписьДанных.ЗаписатьИмяСвойства("Supplier");
	ЗаписьДанных.ЗаписатьЗначение(Поставщик);
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	ТекстJSON = ЗаписьДанных.Закрыть();
	
	Константы.ОписанияПроцессовНаПоддержке.Установить(ТекстJSON);
	
КонецПроцедуры

// Читает данные константы"Описания процессов на поддержке"
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ДанныеКонфигурации - строка
//   * Поставщик          - строка
//
Функция РезультатЧтенияКонстантыОписанияПроцессовНаПоддержке() Экспорт
	
	ДанныеКонстанты = Новый Структура;
	ДанныеКонстанты.Вставить("ДанныеКонфигурации", "");
	ДанныеКонстанты.Вставить("Поставщик",          "");
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ДанныеОписания = Константы.ОписанияПроцессовНаПоддержке.Получить();
	
	РезультатЧтения = РезультатЧтенияСтрокиJSON(ДанныеОписания, "");
	Если Не РезультатЧтения.Успешно Тогда
		
		Возврат ДанныеКонстанты;
		
	Иначе
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатЧтения.Данные, "ConfigurationDescription")
			Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатЧтения.Данные, "Supplier") Тогда
			
			Возврат ДанныеКонстанты;
			
		КонецЕсли;
		
		ДанныеКонстанты.ДанныеКонфигурации = РезультатЧтения.Данные.ConfigurationDescription;
		ДанныеКонстанты.Поставщик          = РезультатЧтения.Данные.Supplier; 
		
		Возврат ДанныеКонстанты;
		
	КонецЕсли;
	
КонецФункции

// Читает строку, в которой содержится JSON
// 
// Параметры:
//  Значение                - Строка - переданная строка
//  СообщениеОшибкиФормата  - Строка - сообщение об ошибке которое будет выдано если чтение формата завершится неудачей
//  ПрочитатьВСоответствие  - Булево - признак необходимости преобразовывать прочтенные данные в соответствие
//
// Возвращаемое значение:
//   Структура  -  содержит:
//     * Успешно       - Булево - признак успешности выполнения операции
//     * Данные        - Соответствие -
//     * ТекстОшибки   - Строка - текст ошибки, если операция закончилась 
//
Функция РезультатЧтенияСтрокиJSON(Значение, СообщениеОшибкиФормата, ПрочитатьВСоответствие = Ложь) Экспорт
	
	РезультатЧтения = Новый Структура;
	РезультатЧтения.Вставить("Успешно",      Истина);
	РезультатЧтения.Вставить("Данные",       Неопределено);
	РезультатЧтения.Вставить("ТекстОшибки",  "");
	
	Если ТипЗнч(Значение) <> Тип("Строка")
		Или ПустаяСтрока(Значение)
		Или Лев(Значение, 1) = "<" Тогда
		РезультатЧтения.Успешно = Ложь;
		РезультатЧтения.ТекстОшибки = СообщениеОшибкиФормата;
		Возврат РезультатЧтения;
	КонецЕсли;
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		РезультатЧтения.Данные = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
		ЧтениеJSON.Закрыть();
	Исключение
		
		РезультатЧтения.Успешно = Ложь;
		РезультатЧтения.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат РезультатЧтения;
	
КонецФункции

// Получает хэш текста
//
// Возвращаемое значение:
//  Число -
//
Функция ХешТекста(Текст) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.Добавить(ЗначениеВСтрокуВнутр(Текст));
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

// Создает поток в памяти из двоичных данных
//
// Параметры:
//  ДвоичныеДанные - данные, из которых создается поток
//
// Возвращаемое значение:
//  ПотокВПамяти -
//
Функция ПотокВПамятиИзДвоичныхДанных(ДвоичныеДанныеФайлаЗагрузки) Экспорт
	
	ПотокЗагрузки = Новый ПотокВПамяти;
	ДвоичныеДанныеФайлаЗагрузки.Записать(ПотокЗагрузки);
	
	Возврат ПотокЗагрузки;
	
КонецФункции

// Конструктор структуры, содержащей реквизиты результат разбора ссылок документа
//
// Возвращаемое значение:
//  Структура - Новый результат разбора ссылок:
// * Команды - Соответствие Из Строка- 
// * СсылкиНаОбъекты - Соответствие Из Строка - 
// * Списки - Соответствие Из Строка - 
// * ВнешниеСсылки - Соответствие Из Строка - 
//
Функция НовыйРезультатРазбораСсылок() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Команды",         Новый Соответствие);
	Результат.Вставить("СсылкиНаОбъекты", Новый Соответствие);
	Результат.Вставить("Списки",          Новый Соответствие);
	Результат.Вставить("ВнешниеСсылки",   Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции 

// Создает каталог на диске для разархивирования файлов при загрузке
//
// Возвращаемое значение:
//   Структура -  содержит:
//    * Успешно     - Булево -  
//    * ТекстОшибки - Строка -
//    * ИмяКаталога - Строка - имя созданного каталога
//
Функция РезультатСозданияКаталогДляРазархивированияВыгрузки() Экспорт
	
	РезультатСоздания = Новый Структура;
	РезультатСоздания.Вставить("Успешно",     Истина);
	РезультатСоздания.Вставить("ТекстОшибки", "");
	РезультатСоздания.Вставить("ИмяКаталога", "");
	
	Попытка
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(); 
		РазделительПути = ПолучитьРазделительПути();
		МассивСтрокКаталога = СтрРазделить(ИмяВременногоФайла, РазделительПути); 
		МассивСтрокКаталога.Удалить(МассивСтрокКаталога.Количество() - 1); 
		КаталогРазархивированныхФайлов = СтрСоединить(МассивСтрокКаталога, РазделительПути);
		КаталогРазархивированныхФайлов =  КаталогРазархивированныхФайлов + РазделительПути + "DesriptionUpload" + РазделительПути;
		
		Если ДемонстрационныеСценарииКлиентСервер.КаталогНаДискеСуществует(КаталогРазархивированныхФайлов) Тогда
			
			УдалитьФайлы(КаталогРазархивированныхФайлов);
			
		Иначе
			
			СоздатьКаталог(КаталогРазархивированныхФайлов);
			
		КонецЕсли;
		
		РезультатСоздания.ИмяКаталога = КаталогРазархивированныхФайлов;
		
	Исключение
		
		РезультатСоздания.Успешно = Ложь;
		РезультатСоздания.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат РезультатСоздания;
	 
КонецФункции

// Получает текст HTML из данных присоединенного файла
//
// Параметры:
//  ДанныеФайла - см.РаботаСФайлами.ДанныеФайла
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайла) Экспорт
	
	ТекстHTML = ДемонстрационныеСценарииКлиентСервер.ПустойТекстHTML();
	
	Если ЭтоАдресВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ТекстHTML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла, "UTF-8");
		ДемонстрационныеСценарииКлиентСервер.ДобавитьТегиТелаЕслиНеобходимо(ТекстHTML);
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭлементыЯзыкиКонфигурацииСозданы(Форма)
	
	Возврат Форма.Элементы.ПодменюЯзыкРедактирования.ПодчиненныеЭлементы.Количество() > 0;
	
КонецФункции

Функция ТекстовоеСодержимоеТекстаHTML(ТекстHTML)
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура);
	Возврат ФорматированныйДокумент.ПолучитьТекст();
	
КонецФункции

#Область Перевод

Функция ТекстHTMLИзОбъектаДокументHTML(ДокументHTML)
	Попытка
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
		Возврат ЗаписьHTML.Закрыть();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция СоответствиеТекстовУзламДокумента(ТелоДокументаHTML)
	
	СоответствиеТекстовУзламДокумента = Новый Соответствие;
	
	Для Каждого ДочернийУзел Из ТелоДокументаHTML.ДочерниеУзлы Цикл
		
		ОбработатьДанныеУзлаДокументаHTMLДляПолученияТекстовДляПеревода(ДочернийУзел, СоответствиеТекстовУзламДокумента);
		
	КонецЦикла;
	
	Возврат СоответствиеТекстовУзламДокумента;
	 
КонецФункции

Процедура ОбработатьДанныеУзлаДокументаHTMLДляПолученияТекстовДляПеревода(УзелДокумента, СоответствиеТекстовУзламДокумента)
	
	Если УзелДокумента.ТипУзла = ТипУзлаDOM.Текст Тогда
		
		Если Не ПустаяСтрока(УзелДокумента.ЗначениеУзла) Тогда
			
			ДобавитьДанныеУзлаДляПеревода(СоответствиеТекстовУзламДокумента, УзелДокумента);
			
		КонецЕсли;
		
		
	Иначе 
		
		Для Каждого ДочернийУзел Из УзелДокумента.ДочерниеУзлы Цикл
		
			ОбработатьДанныеУзлаДокументаHTMLДляПолученияТекстовДляПеревода(ДочернийУзел, СоответствиеТекстовУзламДокумента);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДанныеУзлаДляПеревода(СоответствиеТекстовУзламДокумента, УзелДокумента)
	
	ХешТекста = ХешТекста(УзелДокумента.ЗначениеУзла);
	
	ЭлементСоответствия =  СоответствиеТекстовУзламДокумента.Получить(ХешТекста);
	Если ЭлементСоответствия = Неопределено Тогда
		
		ДанныеТекста = Новый Структура;
		ДанныеТекста.Вставить("Текст",         УзелДокумента.ЗначениеУзла);
		ДанныеТекста.Вставить("УзлыДокумента", Новый Массив);
		ДанныеТекста.УзлыДокумента.Добавить(УзелДокумента);
		
		СоответствиеТекстовУзламДокумента.Вставить(ХешТекста, ДанныеТекста); 
		
	Иначе
		
		ЭлементСоответствия.УзлыДокумента.Добавить(УзелДокумента);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ЗаменаВДемонстрационныхСценариях

Функция РезультатЗаменыВДемонстрационныхСценариях(ПараметрыЗамены)

	РезультатЗамены = Новый Структура;
	РезультатЗамены.Вставить("Успешно",    Ложь);
	РезультатЗамены.Вставить("КОбработке", ПараметрыЗамены.Сценарии.Количество());
	РезультатЗамены.Вставить("Обработано", 0);
	РезультатЗамены.Вставить("Ошибки",     Новый Массив);
	
	Для Каждого СценарийКОбработке Из ПараметрыЗамены.Сценарии Цикл
		
		ВсеФайлыУспешноОбработаны = Истина;
		
		Для Каждого ДанныеФайла Из СценарийКОбработке.ДанныеФайлов Цикл
			
			ПрисоединенныйФайл = ДанныеФайла.Значение.СсылкаНаФайл;
			КодЯзыка           = ДанныеФайла.Значение.КодЯзыка;
			
			ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
			
			Если ДанныеПрисоединенногоФайла.ФайлРедактируется Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Замена не выполнена, сценарий ""%1"" с кодом языка ""%2"" редактируется пользователем %3'"),
				                        Строка(СценарийКОбработке.Сценарий), КодЯзыка, ДанныеПрисоединенногоФайла.Редактирует);
				ДанныеОшибки = ДанныеОшибкиЗамены(СценарийКОбработке.Сценарий, КодЯзыка, ТекстОшибки);
				РезультатЗамены.Ошибки.Добавить(ДанныеОшибки);
				ВсеФайлыУспешноОбработаны = Ложь;
				Продолжить;
				
			КонецЕсли;
	
			Если ЭтоАдресВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
				
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
				ТекстHTML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла, "UTF-8");
				ПозицииНайденного = ДемонстрационныеСценарииКлиентСервер.ПозицииНайденногоВТексте(ТекстHTML, ПараметрыЗамены);
				
				Если ПозицииНайденного.Количество() > 0 Тогда
					
					ЗаменитьНайденноеВТексте(ТекстHTML, ПараметрыЗамены, ПозицииНайденного); 
					
				Иначе
					
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Замена не выполнена, сценарий ""%1"" с кодом языка ""%2"" - не найдено что заменять'"),
					               Строка(СценарийКОбработке.Сценарий), КодЯзыка);
					ДанныеОшибки = ДанныеОшибкиЗамены(СценарийКОбработке.Сценарий, КодЯзыка, ТекстОшибки);
					РезультатЗамены.Ошибки.Добавить(ДанныеОшибки);
					ВсеФайлыУспешноОбработаны = Ложь;
					Продолжить;
					
				КонецЕсли;
				
				РезультатСохранения = РезультатОбновленияПрисоединенногоФайла(ПрисоединенныйФайл, ПараметрыЗамены.УникальныйИдентификатор, ТекстHTML);
				
				Если Не РезультатСохранения Тогда
					
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Замена не выполнена, сценарий ""%1"" с кодом языка ""%2"" - не удалось записать файл'"),
					               Строка(СценарийКОбработке.Сценарий), КодЯзыка);
					ДанныеОшибки = ДанныеОшибкиЗамены(СценарийКОбработке.Сценарий, КодЯзыка, ТекстОшибки);
					РезультатЗамены.Ошибки.Добавить(ДанныеОшибки);
					ВсеФайлыУспешноОбработаны = Ложь;
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Замена не выполнена, сценарий ""%1"" с кодом языка ""%2"" - не удалось получить данные файла'"),
				                        Строка(СценарийКОбработке.Сценарий), КодЯзыка);
				ДанныеОшибки = ДанныеОшибкиЗамены(СценарийКОбработке.Сценарий, КодЯзыка, ТекстОшибки);
				РезультатЗамены.Ошибки.Добавить(ДанныеОшибки);
				ВсеФайлыУспешноОбработаны = Ложь;
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеФайлыУспешноОбработаны Тогда
			РезультатЗамены.Обработано = РезультатЗамены.Обработано + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗамены.Успешно = Истина;
	
	Возврат РезультатЗамены;
	
КонецФункции

Функция ДанныеОшибкиЗамены(Сценарий, КодЯзыка, ТекстОшибки)

	ДанныеОшибкиЗамены = Новый Структура;
	ДанныеОшибкиЗамены.Вставить("Сценарий",    Сценарий);
	ДанныеОшибкиЗамены.Вставить("КодЯзыка",    КодЯзыка);
	ДанныеОшибкиЗамены.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат ДанныеОшибкиЗамены;
	
КонецФункции

Процедура ЗаменитьНайденноеВТексте(ТекстДляИзменения, ПараметрыЗамены, ПозицииНайденного)
	
	Сдвиг                      = 0;
	ДлинаЧтоМеняем             = СтрДлина(ПараметрыЗамены.ЧтоМеняем);
	ДлинаНаЧтоМеняем           = СтрДлина(ПараметрыЗамены.НаЧтоМеняем);
	ИзменениеСдвигаПослеЗамены = ДлинаНаЧтоМеняем - ДлинаЧтоМеняем;
	ДлинаВсегоТекста           = СтрДлина(ТекстДляИзменения);
	
	Для Каждого ПозицияНайденногоВТексте Из ПозицииНайденного Цикл
		
		ТекстДляИзменения = Лев(ТекстДляИзменения, ПозицияНайденногоВТексте + Сдвиг -1)
			+ ПараметрыЗамены.НаЧтоМеняем
			+ Прав(ТекстДляИзменения, ДлинаВсегоТекста - ПозицияНайденногоВТексте - ДлинаЧтоМеняем + 1);
			
		Сдвиг = Сдвиг + ИзменениеСдвигаПослеЗамены;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискВДемонстрационныхСценариях

Функция РезультатГлобальногоПоискаВДемонстрационныхСценариях(ПараметрыПоиска) 
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Успешно",               Истина);
	РезультатПоиска.Вставить("СообщениеПользователю", "");
	РезультатПоиска.Вставить("Результаты",            Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДемонстрационныеСценарииПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
	|	ДемонстрационныеСценарии.Ссылка                    КАК Сценарий
	|ИЗ
	|	Справочник.ДемонстрационныеСценарииПрисоединенныеФайлы КАК ДемонстрационныеСценарииПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|		ПО ДемонстрационныеСценарииПрисоединенныеФайлы.ВладелецФайла = ДемонстрационныеСценарии.Ссылка
	|ГДЕ
	|	НЕ ДемонстрационныеСценарии.ПометкаУдаления
	|	И НЕ ДемонстрационныеСценарииПрисоединенныеФайлы.ПометкаУдаления
	|ИТОГИ ПО
	|	Сценарий";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ВыборкаСценарии = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСценарии.Следующий() Цикл
		
		ЭлементНайдено = Неопределено;
		
		ВыборкаФайлы = ВыборкаСценарии.Выбрать();
		
		Пока ВыборкаФайлы.Следующий() Цикл
			
			ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ВыборкаФайлы.ПрисоединенныйФайл);
			
			Если ЭтоАдресВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
				
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
				ТекстHTML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла, "UTF-8");
				ПозицииНайденного = ДемонстрационныеСценарииКлиентСервер.ПозицииНайденногоВТексте(ТекстHTML, ПараметрыПоиска);
				
				Если ПозицииНайденного.Количество() > 0 Тогда
					
					Если ЭлементНайдено = Неопределено Тогда
						ЭлементНайдено = Новый Структура;
						ЭлементНайдено.Вставить("Сценарий", ВыборкаСценарии.Сценарий);
						ЭлементНайдено.Вставить("КоличествоВхождений", 0);
						ЭлементНайдено.Вставить("ДанныеФайлов", Новый Массив);
					КонецЕсли;
					
					ЭлементНайдено.КоличествоВхождений = ЭлементНайдено.КоличествоВхождений + ПозицииНайденного.Количество();
					ЭлементНайдено.ДанныеФайлов.Добавить(ДанныеНайденногоФайлаДляЗамены(ДанныеПрисоединенногоФайла));
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭлементНайдено <> Неопределено Тогда
			
			РезультатПоиска.Результаты.Добавить(ЭлементНайдено);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция ДанныеНайденногоФайлаДляЗамены(ДанныеПрисоединенногоФайла)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СсылкаНаФайл", ДанныеПрисоединенногоФайла.Ссылка);
	СтруктураВозврата.Вставить("КодЯзыка", ДемонстрационныеСценарииКлиентСервер.КодЯзыкаИзИмениФайла(ДанныеПрисоединенногоФайла.Наименование));
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти 

#Область ПереводДемонстрационныхСценариев

Функция РезультатПереводаВДемонстрационныхСценариях(ПараметрыПеревода)
	
	Результат = Новый Структура;
	Результат.Вставить("ВсегоОбъектов", 0);
	Результат.Вставить("Переведено",    0);
	Результат.Вставить("Ошибки",        Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПереводДемонстрационныхСценариев();
	
	Запрос.УстановитьПараметр("Сценарии", ПараметрыПеревода.ПереводимыеСценарии);
	Запрос.УстановитьПараметр("КодыЯзыка", КодыЯзыковПараметрыПеревода(ПараметрыПеревода));
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаСценарии = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСценарии.Следующий() Цикл
		
		Результат.ВсегоОбъектов = Результат.ВсегоОбъектов + 1; 
		
		ПараметрыПереводаСценария = НовыйПараметрыПереводаСценария(ПараметрыПеревода);
		ПараметрыПереводаСценария.Сценарий = ВыборкаСценарии.Сценарий;
		
		ВыборкаПрисоединенныеФайлы = ВыборкаСценарии.Выбрать();
		
		Пока ВыборкаПрисоединенныеФайлы.Следующий() Цикл 
			
			Если ВыборкаПрисоединенныеФайлы.КодЯзыка = ПараметрыПереводаСценария.ИсходныйЯзык Тогда
				
				ПараметрыПереводаСценария.ФайлИсходныйЯзык = ВыборкаПрисоединенныеФайлы.ПрисоединенныйФайл;
				
			ИначеЕсли ВыборкаПрисоединенныеФайлы.КодЯзыка = ПараметрыПереводаСценария.ЦелевойЯзык Тогда 
				
				ПараметрыПереводаСценария.ФайлЦелевойЯзык = ВыборкаПрисоединенныеФайлы.ПрисоединенныйФайл;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВыполнитьПереводСценария(ПараметрыПереводаСценария, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьПереводСценария(ПараметрыПереводаСценария, Результат)
	
	ТекстHTMLИсходный   = "";
	ДанныеФайлаИсходный = Неопределено;
	ДанныеФайлаЦелевой  = Неопределено;
	
	ШаблонОшибкиНечегоПереводить  = НСтр("ru = 'Текст для перевода с языка ""%1"" в сценарии ""%2"" не найден'");
	ШаблонОшибкиПереводСуществует = НСтр("ru = 'Для языка ""%1"" сценария ""%2"" уже есть перевод, а флаг ""Перезаписывать переводы"" установлен не был'");
	ШаблонОшибкиПереводНеВыполнен = НСтр("ru = 'Перевод для сценария ""%1"" не выполнен по причине %2'");
	ШаблонОшибкиНеУдалосьЗаписать = НСтр("ru = 'Не удалось записать сценарий ""%1"" после перевода'");
	ШаблонОшибкиНеУдалосьСоздать  = НСтр("ru = 'Не удалось записать сценарий ""%1"" после перевода по причине ""%2""'");
	ШаблонОшибкиНеУдалосьСтатус   = НСтр("ru = 'Не удалось обновить статус сценария ""%1"" после перевода по причине ""%2""'");
	ШаблонОшибкиФайлРедактируется = НСтр("ru = 'Сценарий ""%1"" на языке ""%2"" захвачен для редактирования, перевод не выполнен'");
	
	Если Не ЗначениеЗаполнено(ПараметрыПереводаСценария.ФайлИсходныйЯзык) Тогда
		
		ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
		ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
		ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ИсходныйЯзык;
		ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиНечегоПереводить,
		                                             ПараметрыПереводаСценария.ИсходныйЯзык,
		                                             ПараметрыПереводаСценария.Сценарий);
		
		Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеФайлаИсходный = РаботаСФайлами.ДанныеФайла(ПараметрыПереводаСценария.ФайлИсходныйЯзык);
	
	ТекстHTMLИсходный = ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайлаИсходный);
	ТекстовоеСодержимоеИсходный = ТекстовоеСодержимоеТекстаHTML(ТекстHTMLИсходный);
	
	Если ПустаяСтрока(ТекстовоеСодержимоеИсходный) Тогда
		
		ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
		ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
		ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ИсходныйЯзык;
		ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиНечегоПереводить,
		                                             ПараметрыПереводаСценария.ИсходныйЯзык,
		                                             ПараметрыПереводаСценария.Сценарий);
		
		Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПереводаСценария.ФайлЦелевойЯзык) Тогда
		
		ДанныеФайлаЦелевой = РаботаСФайлами.ДанныеФайла(ПараметрыПереводаСценария.ФайлЦелевойЯзык);
		
		Если Не ПараметрыПереводаСценария.ПерезаписыватьСуществующийПеревод Тогда
			
			ТекстHTMLЦелевой = ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайлаЦелевой);
			ТекстовоеСодержимоеЦелевой = ТекстовоеСодержимоеТекстаHTML(ТекстHTMLЦелевой);
			
			Если Не ПустаяСтрока(ТекстовоеСодержимоеЦелевой) Тогда
				
				ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
				ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
				ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ЦелевойЯзык;
				ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиПереводСуществует,
				                                             ПараметрыПереводаСценария.ЦелевойЯзык,
				                                             ПараметрыПереводаСценария.Сценарий);
				
				Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);
		
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеФайлаЦелевой.ФайлРедактируется Тогда
			
			ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
			ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
			ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ЦелевойЯзык;
			ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиФайлРедактируется,
			                                             ПараметрыПереводаСценария.Сценарий,
			                                             ПараметрыПереводаСценария.ЦелевойЯзык);
			
			Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);
	
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	РеузультатПеревода = РезультатПереводаНаДругиеЯзыки(ТекстHTMLИсходный, ПараметрыПереводаСценария.ИсходныйЯзык, ПараметрыПереводаСценария.ЦелевойЯзык);
	
	Если Не РеузультатПеревода.Успешно Тогда
		
		ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
		ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
		ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ЦелевойЯзык;
		ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиПереводНеВыполнен,
		                                             ПараметрыПереводаСценария.Сценарий,
		                                             РеузультатПеревода.СообщениеПользователю);
		
		Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);

		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПереводаСценария.ФайлЦелевойЯзык) Тогда
		
		РезультатСохранения = РезультатОбновленияПрисоединенногоФайла(
				ПараметрыПереводаСценария.ФайлЦелевойЯзык,
				ПараметрыПереводаСценария.УникальныйИдентификатор, 
				РеузультатПеревода.ПереведенныйТекст);
				
		Если Не РезультатСохранения Тогда
			
			ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
			ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
			ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ЦелевойЯзык;
			ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиНеУдалосьЗаписать,
			                                             ПараметрыПереводаСценария.Сценарий);
			
			Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);
			
			Возврат;
			
		КонецЕсли;
		
		Результат.Переведено = Результат.Переведено + 1;
		
	Иначе
		
		    РезультатСоздания = РезультатСозданияНовогоПрисоединенногоФайлаСценария(
			РеузультатПеревода.ПереведенныйТекст,
			ПараметрыПереводаСценария.УникальныйИдентификатор,
			ПараметрыПереводаСценария.Сценарий,
			ПараметрыПереводаСценария.ЦелевойЯзык);
			
			Если Не РезультатСоздания.Успешно Тогда
				
				ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
				ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
				ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ЦелевойЯзык;
				ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиНеУдалосьСоздать,
				                                             ПараметрыПереводаСценария.Сценарий,
				                                             РезультатСоздания.ТекстОшибки);
				
				Результат.Ошибки.Добавить(ДанныеОшибкиПеревода);
				
			КонецЕсли;
			
			Результат.Переведено = Результат.Переведено + 1;
		
	КонецЕсли;
		
	Если ПараметрыПереводаСценария.УстанавливатьСтатус Тогда
		
		Попытка
	
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПараметрыПереводаСценария.Сценарий.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыПереводаСценария.Сценарий.Ссылка);
			Блокировка.Заблокировать();
			
			СценарийОбъект = ПараметрыПереводаСценария.Сценарий.ПолучитьОбъект();
			СценарийОбъект.Статус = ПараметрыПереводаСценария.УстанавливаемыйСтатус;
			
			СценарийОбъект.Записать();
			
		Исключение
			
			ДанныеОшибкиПеревода = НовыйДанныеОшибкиПеревода();
			ДанныеОшибкиПеревода.Сценарий    = ПараметрыПереводаСценария.Сценарий;
			ДанныеОшибкиПеревода.КодЯзыка    = ПараметрыПереводаСценария.ЦелевойЯзык;
			ДанныеОшибкиПеревода.ТекстОшибки = СтрШаблон(ШаблонОшибкиНеУдалосьСтатус,
			                                             ПараметрыПереводаСценария.Сценарий,
			                                             КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Результат.Ошибки.Добавить(ДанныеОшибкиПеревода)
		
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатСозданияНовогоПрисоединенногоФайлаСценария(ТекстСценария, УникальныйИдентификатор, Сценарий, КодЯзыка)
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",       Ложь);
	Результат.Вставить("ТекстОшибки",   "");
	
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(ТекстСценария);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ПараметрыЗаписиФайла = РаботаСФайлами.ПараметрыДобавленияФайла(); 
	ПараметрыЗаписиФайла.ВладелецФайлов              = Сценарий;
	ПараметрыЗаписиФайла.ИмяБезРасширения            = СтрШаблон("%1_%2_%3", "ОписаниеСценария_" ,
	                                                             ДемонстрационныеСценарииКлиентСервер.ПолныйКодСтрокойДляИмениФайла(СценарийОбъект.ПолныйКод), 
	                                                             КодЯзыка);
	ПараметрыЗаписиФайла.РасширениеБезТочки          = "HTML";
	ПараметрыЗаписиФайла.ВремяИзмененияУниверсальное = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СценарийОбъект.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СценарийОбъект.Ссылка);
		Блокировка.Заблокировать();
	
		СозданныйПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
		                                    ПараметрыЗаписиФайла,
		                                    АдресВоВременномХранилище,
		                                    "");
		
		НоваяСтрока = СценарийОбъект.ОписанияСценария.Добавить();
		НоваяСтрока.КодЯзыка           = КодЯзыка;
		НоваяСтрока.ПрисоединенныйФайл = СозданныйПрисоединенныйФайл;
		
		СценарийОбъект.Записать();
		
		Результат.Успешно = Истина;
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция НовыйДанныеОшибкиПеревода()
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Сценарий", Неопределено);
	ДанныеОшибки.Вставить("КодЯзыка", "");
	ДанныеОшибки.Вставить("ТекстОшибки", "");
	
	Возврат ДанныеОшибки;
	
КонецФункции

Функция НовыйПараметрыПереводаСценария(ПараметрыПеревода)
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Сценарий",                          Неопределено);
	Параметры.Вставить("ПерезаписыватьСуществующийПеревод", ПараметрыПеревода.ПерезаписыватьСуществующийПеревод);
	Параметры.Вставить("УстанавливатьСтатус",               ПараметрыПеревода.УстанавливатьСтатус);
	Параметры.Вставить("УстанавливаемыйСтатус",             ПараметрыПеревода.УстанавливаемыйСтатус);
	Параметры.Вставить("ИсходныйЯзык",                      ПараметрыПеревода.ИсходныйЯзык);
	Параметры.Вставить("ЦелевойЯзык",                       ПараметрыПеревода.ЦелевойЯзык);
	Параметры.Вставить("УникальныйИдентификатор",           ПараметрыПеревода.УникальныйИдентификатор);
	Параметры.Вставить("ФайлИсходныйЯзык",                  Неопределено);
	Параметры.Вставить("ФайлЦелевойЯзык",                   Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Функция ТекстЗапросаПереводДемонстрационныхСценариев()
	
	Возврат "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарииОписанияСценария.КодЯзыка           КАК КодЯзыка,
	|	ДемонстрационныеСценарииОписанияСценария.Ссылка             КАК Сценарий,
	|	ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
	|ГДЕ
	|	ДемонстрационныеСценарииОписанияСценария.Ссылка В(&Сценарии)
	|	И ДемонстрационныеСценарииОписанияСценария.КодЯзыка В(&КодыЯзыка)
	|ИТОГИ ПО
	|	Сценарий";
	
КонецФункции

Функция КодыЯзыковПараметрыПеревода(ПараметрыПеревода) 

	КодыЯзыков = Новый Массив;
	
	КодыЯзыков.Добавить(ПараметрыПеревода.ИсходныйЯзык);
	КодыЯзыков.Добавить(ПараметрыПеревода.ЦелевойЯзык); 
	
	Возврат КодыЯзыков;
	
КонецФункции

#КонецОбласти

#Область ПостановкаНаПоддержку

Процедура ВыполнитьПостановкуНаПоддержку(РезультатПостановки, Поставщик)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПостановкаНаПоддержку();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НачатьТранзакцию();
	
	Попытка
	
		ПоставитьНаПоддержкуОписанияПроцессов(РезультатЗапроса[0]);
		ПоставитьНаПоддержкуГлоссарий(РезультатЗапроса[1]);
		
		УстановитьКонстантуОписанияПроцессовНаПоддержке(ПредставлениеТекущаяВерсияКонфигурации(), Поставщик);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Описания процессов'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Пользователи,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РезультатПостановки.Успешно = Ложь;
		
		ТекстСообщенияОбОшибке = СтрШаблон(НСтр("ru = 'Постановка описаний процессов на поддержку не выполнена, по причине %1'"), 
		                         ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РезультатПостановки.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПоставитьНаПоддержкуГлоссарий(РезультатЗапроса)
	
	ВыборкаСсылкаГлоссарий = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылкаГлоссарий.Следующий() Цикл
		
		ДанныеКИзменению = Новый Массив;
		
		ДанныеРеквизитовГлоссария = НовыйДанныеРеквизитовГлоссарий();
		ДанныеРеквизитовГлоссария.Ссылка = ВыборкаСсылкаГлоссарий.СсылкаНаСправочникГлоссарий;
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовГлоссария, ВыборкаСсылкаГлоссарий, , "ОбъектыКонфигурации");
		ДанныеРеквизитовГлоссария.ОбъектыКонфигурации = ВыборкаСсылкаГлоссарий.ОбъектыКонфигурации.Выгрузить();
		
		ТекстJSONРеквизитыГлоссария = ТекстJSONРеквизитовГлоссария(ДанныеРеквизитовГлоссария);
		ХешРеквизитыГлоссария = ХешТекста(ТекстJSONРеквизитыГлоссария);
		
		Если ХешРеквизитыГлоссария <> ВыборкаСсылкаГлоссарий.ХэшДанныхПоставщикаРеквизитыГлоссария Тогда
			
			РеквизитыКИзменению = НовыйДанныеКИзменениюПоставкаНаПоддержку();
			РеквизитыКИзменению.ТипДанныхХеша = "Ссылка";
			РеквизитыКИзменению.ЗначениеХеша  = ХешРеквизитыГлоссария;
			
			ДанныеКИзменению.Добавить(РеквизитыКИзменению);
			
		КонецЕсли;
		
		ВыборкаОписанияНаЯзыке = ВыборкаСсылкаГлоссарий.Выбрать();
		
		Пока ВыборкаОписанияНаЯзыке.Следующий() Цикл
			
			ТекстHTML = "";
			Вложения = Новый Структура;
			ФорматированныйДокументОписания = ВыборкаОписанияНаЯзыке.Описание.Получить();
			ФорматированныйДокументОписания.ПолучитьHTML(ТекстHTML, Вложения);
			
			ТекстHTMLОписания = ТекстHTML;
			
			ХешОписанияНаЯзыке = ХешТекста(ТекстHTMLОписания);
			
			Если ХешОписанияНаЯзыке <> ВыборкаОписанияНаЯзыке.ХэшДанныхПоставщикаОписанияГлоссарияНаЯзыке Тогда
				
				РеквизитыКИзменению = НовыйДанныеКИзменениюПоставкаНаПоддержку();
				РеквизитыКИзменению.ТипДанныхХеша = ВыборкаОписанияНаЯзыке.КодЯзыка;
				РеквизитыКИзменению.ЗначениеХеша  = ХешОписанияНаЯзыке;
				
				ДанныеКИзменению.Добавить(РеквизитыКИзменению);
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ДанныеКИзменению.Количество() > 0 Тогда
			
			ОбновитьХешиВСправочники(ДанныеКИзменению, ДанныеРеквизитовГлоссария.Ссылка, "ОписанияГлоссария");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоставитьНаПоддержкуОписанияПроцессов(РезультатЗапроса)
	
	ВыборкаСсылкаОписаниеПроцессов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылкаОписаниеПроцессов.Следующий() Цикл
		
		ДанныеКИзменению = Новый Массив;
		
		ДанныеРеквизитовОписания = НовыйДанныеРеквизитовОписаниеПроцессов();
		
		ЗаполнитьЗначенияСвойств(ДанныеРеквизитовОписания, ВыборкаСсылкаОписаниеПроцессов, , "ПрофилиГруппДоступа, ОбъектыКонфигурации");
		
		ДанныеРеквизитовОписания.Ссылка              = ВыборкаСсылкаОписаниеПроцессов.СсылкаОписаниеПроцессов;
		ДанныеРеквизитовОписания.ПрофилиГруппДоступа = ВыборкаСсылкаОписаниеПроцессов.ПрофилиГруппДоступа.Выгрузить();
		ДанныеРеквизитовОписания.ОбъектыКонфигурации = ВыборкаСсылкаОписаниеПроцессов.ОбъектыКонфигурации.Выгрузить();
		
		ТекстJSONРеквизитыОписаниеПроцессов = ТекстJSONРеквизитыОписаниеПроцессов(ДанныеРеквизитовОписания); 
		
		ХешРеквизитыОписания = ХешТекста(ТекстJSONРеквизитыОписаниеПроцессов);
		
		Если ХешРеквизитыОписания <> ВыборкаСсылкаОписаниеПроцессов.ХэшДанныхПоставщикаРеквизитыСправочника Тогда
			
			РеквизитыКИзменению = НовыйДанныеКИзменениюПоставкаНаПоддержку();
			РеквизитыКИзменению.ТипДанныхХеша = "Ссылка";
			РеквизитыКИзменению.ЗначениеХеша  = ХешРеквизитыОписания;
			
			ДанныеКИзменению.Добавить(РеквизитыКИзменению);
			
		КонецЕсли;
		
		ВыборкаОписанияНаЯзыке = ВыборкаСсылкаОписаниеПроцессов.Выбрать();
		
		Пока ВыборкаОписанияНаЯзыке.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаОписанияНаЯзыке.ПрисоединенныйФайл) Тогда
			
				ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыборкаОписанияНаЯзыке.ПрисоединенныйФайл);
				ТекстHTMLОписания = ТекстHTMLПоДаннымПрисоединенногоФайла(ДанныеФайла); 
				ХешОписанияНаЯзыке = ХешТекста(ТекстHTMLОписания);
				
				Если ХешОписанияНаЯзыке <> ВыборкаОписанияНаЯзыке.ХэшДанныхПоставщикаОписаниеНаЯзыке Тогда
					
					РеквизитыКИзменению = НовыйДанныеКИзменениюПоставкаНаПоддержку();
					РеквизитыКИзменению.ТипДанныхХеша = ВыборкаОписанияНаЯзыке.КодЯзыка;
					РеквизитыКИзменению.ЗначениеХеша  = ХешОписанияНаЯзыке;
					
					ДанныеКИзменению.Добавить(РеквизитыКИзменению);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеКИзменению.Количество() > 0 Тогда
			
			ОбновитьХешиВСправочники(ДанныеКИзменению, ДанныеРеквизитовОписания.Ссылка, "ОписанияСценария");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьХешиВСправочники(ДанныеКИзменению, СсылкаНаСправочник, ИмяТабличнойЧасти)
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СсылкаНаСправочник.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаСправочник);
		Блокировка.Заблокировать();
		
		СправочникОбъект = СсылкаНаСправочник.ПолучитьОбъект();
		
		Для Каждого ДанныеИзменяемогоХеша Из ДанныеКИзменению Цикл
			
			Если ДанныеИзменяемогоХеша.ТипДанныхХеша = "Ссылка" Тогда
				
				СправочникОбъект.ХэшДанныхПоставщика = ДанныеИзменяемогоХеша.ЗначениеХеша;
				
			Иначе
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("КодЯзыка", ДанныеИзменяемогоХеша.ТипДанныхХеша);
				
				НайденныеСтроки = СправочникОбъект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыПоиска);
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					НайденнаяСтрока.ХэшДанныхПоставщика = ДанныеИзменяемогоХеша.ЗначениеХеша;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		СправочникОбъект.Записать();
		
	Исключение
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйДанныеКИзменениюПоставкаНаПоддержку()
	
	ДанныеКИзменению = Новый Структура;
	
	ДанныеКИзменению.Вставить("ТипДанныхХеша", "");
	ДанныеКИзменению.Вставить("ЗначениеХеша", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ДанныеКИзменению;
	
КонецФункции

Функция ТекстЗапросаПостановкаНаПоддержку()
	
	Возврат "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарииОписанияСценария.КодЯзыка            КАК КодЯзыка,
	|	ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл  КАК ПрисоединенныйФайл,
	|	ДемонстрационныеСценарииОписанияСценария.ХэшДанныхПоставщика КАК ХэшДанныхПоставщикаОписаниеНаЯзыке,
	|	ДемонстрационныеСценарии.Ссылка                              КАК СсылкаОписаниеПроцессов,
	|	ДемонстрационныеСценарии.ХэшДанныхПоставщика                 КАК ХэшДанныхПоставщикаРеквизитыСправочника,
	|	ДемонстрационныеСценарии.ПометкаУдаления                     КАК ПометкаУдаления,
	|	ДемонстрационныеСценарии.Родитель                            КАК Родитель,
	|	ДемонстрационныеСценарии.ЭтоГруппа                           КАК ЭтоГруппа,
	|	ДемонстрационныеСценарии.Код                                 КАК Код,
	|	ДемонстрационныеСценарии.Наименование                        КАК Наименование,
	|	ДемонстрационныеСценарии.ПолныйКод                           КАК ПолныйКод,
	|	ДемонстрационныеСценарии.Статус                              КАК Статус,
	|	ДемонстрационныеСценарии.Комментарий                         КАК Комментарий,
	|	ДемонстрационныеСценарии.ТипГруппы                           КАК ТипГруппы,
	|	ДемонстрационныеСценарии.НаименованиеЯзык1                   КАК НаименованиеЯзык1,
	|	ДемонстрационныеСценарии.НаименованиеЯзык2                   КАК НаименованиеЯзык2,
	|	ДемонстрационныеСценарии.ПрофилиГруппДоступа.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Профиль КАК Профиль
	|	)                                                            КАК ПрофилиГруппДоступа,
	|	ДемонстрационныеСценарии.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации                                      КАК ОбъектКонфигурации
	|	) КАК ОбъектыКонфигурации
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
	|		ПО ДемонстрационныеСценарииОписанияСценария.Ссылка = ДемонстрационныеСценарии.Ссылка
	|ИТОГИ ПО
	|	СсылкаОписаниеПроцессов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГлоссарийОписанияГлоссария.КодЯзыка            КАК КодЯзыка,
	|	ГлоссарийОписанияГлоссария.Описание            КАК Описание,
	|	ГлоссарийОписанияГлоссария.ХэшДанныхПоставщика КАК ХэшДанныхПоставщикаОписанияГлоссарияНаЯзыке,
	|	Глоссарий.Ссылка                               КАК СсылкаНаСправочникГлоссарий,
	|	Глоссарий.ХэшДанныхПоставщика                  КАК ХэшДанныхПоставщикаРеквизитыГлоссария,
	|	Глоссарий.ПометкаУдаления                      КАК ПометкаУдаления,
	|	Глоссарий.Код КАК                              Код,
	|	Глоссарий.Наименование                         КАК Наименование,
	|	Глоссарий.НаименованиеЯзык1                    КАК НаименованиеЯзык1,
	|	Глоссарий.НаименованиеЯзык2                    КАК НаименованиеЯзык2,
	|	Глоссарий.ОбъектыКонфигурации.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектКонфигурации КАК ОбъектКонфигурации
	|	)                                              КАК ОбъектыКонфигурации
	|ИЗ
	|	Справочник.Глоссарий КАК Глоссарий 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Глоссарий.ОписанияГлоссария КАК ГлоссарийОписанияГлоссария
	|		ПО ГлоссарийОписанияГлоссария.Ссылка = Глоссарий.Ссылка
	|ИТОГИ ПО
	|	СсылкаНаСправочникГлоссарий";
	
	
КонецФункции 

#КонецОбласти

#КонецОбласти
