#Область ПрограммныйИнтерфейс

#Область Авторизация

// Возвращает текущий ключ сессии для обмена с ФГИС "Сатурн".
// При отсутствии действующего ключа, получает новый.
// 
// Параметры:
// 	Пользователь - ОпределяемыйТип.ПользователиИС, Неопределено - Пользователь, для которого необходимо получить ключ сессии.
// 		Если пользователь не указан, то ключ будет получен для текущего пользователя системы или без учета пользователя.
//  БезУчетаПользователя - Булево - Устанавливается в Истина, если требуется получить ключ сессии
//  	без учета пользователя. Например, для выполнения регламентного задания.
//  	Если Истина, тогда значение параметра Пользователь игнорируется.
//  ПовторноеПолучение - Булево - Служебный параметр. Предназначен для защиты от зацикливания.
//  	Например, если из сервиса будет получен уже просроченый токен или наша система использует некорректное время.
// Возвращаемое значение:
//  Структура:
//   * ТокенАвторизации - Строка, Неопределено - Действующий ключ сессии для пользователя.
//   * ТекстОшибки - Строка, Неопределено - Описание ошибки.
//   * РезультатыЗапросов - Массив из Структура - результаты запросов.
Функция ПолучитьКлючСессии(Пользователь = Неопределено, БезУчетаПользователя = Ложь, ПовторноеПолучение = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТокенАвторизации",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",        Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатыЗапросов", Новый Массив());
	
	ДанныеКлючаСессии = ДанныеКлючаСессии();
	ПараметрыПолученияКлючаСессии = ПараметрыПолученияКлючаСессии();
	
	// получим ключ сессии из параметра сеанса
	Попытка 
		Данные = ПараметрыСеанса[ПараметрыПолученияКлючаСессии.ИмяПараметраСеанса].Получить();
	Исключение
		// параметр сеанса неинициализирован
		Данные = Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКлючаСессии, Данные);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяУниверсальнаяДата();
	СрокДействия = ТекущаяДата + ПараметрыПолученияКлючаСессии.ВремяДоОкончанияДействияДляОбновления;
	
	Если ЗначениеЗаполнено(ДанныеКлючаСессии.ДействуетДо)
		И ДанныеКлючаСессии.ДействуетДо > СрокДействия Тогда
		ВозвращаемоеЗначение.ТокенАвторизации = ДанныеКлючаСессии.ТокенАвторизации;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	// получим ключ сессии из регистра
	Если БезУчетаПользователя Тогда
		ТекущийПользователь = Неопределено;
	ИначеЕсли Пользователь <> Неопределено Тогда
		ТекущийПользователь  = Пользователь;
	Иначе
		ТекущийПользователь  = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ДанныеИзРегистра = ПолучитьДанныеКлючаСессииИзРегистра(ТекущийПользователь);
	
	Если ДанныеИзРегистра.ДанныеРегистра = Неопределено Тогда
		ВозвращаемоеЗначение.ТекстОшибки = ДанныеИзРегистра.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДанныеИзРегистра.ДанныеРегистра.ДанныеКлючаСессии.ДействуетДо)
		И ДанныеИзРегистра.ДанныеРегистра.ДанныеКлючаСессии.ДействуетДо > СрокДействия Тогда
		ПараметрыСеанса[ПараметрыПолученияКлючаСессии.ИмяПараметраСеанса] = Новый ХранилищеЗначения(ДанныеИзРегистра.ДанныеРегистра.ДанныеКлючаСессии);
		ВозвращаемоеЗначение.ТокенАвторизации = ДанныеИзРегистра.ДанныеРегистра.ДанныеКлючаСессии.ТокенАвторизации;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	// получим ключ сессии из сервиса
	Если ПовторноеПолучение Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Возникла ошибка получения токена авторизации ФГИС ""Сатурн"": некорректный срок действия токена авторизации.
		                            |Проверьте текущие дату и время на компьютере (сервере).'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатОбновления = ОбновитьКлючСессии(
		ПараметрыПолученияКлючаСессии,
		ДанныеИзРегистра.ДанныеРегистра,
		ДанныеИзРегистра.ДанныеРегистра.ДанныеКлючаСессии.ДействуетДо > ТекущаяДата);
	
	ВозвращаемоеЗначение.РезультатыЗапросов = РезультатОбновления.РезультатыЗапросов;
	
	Если РезультатОбновления.Успешно Тогда
		
		Результат = ПолучитьКлючСессии(ТекущийПользователь, БезУчетаПользователя, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.РезультатыЗапросов, ВозвращаемоеЗначение.РезультатыЗапросов);
		Возврат Результат;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Возникла ошибка получения токена авторизации ФГИС ""Сатурн"":
					   |%1'"),
			РезультатОбновления.ТекстОшибки);
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка           - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив из Строка - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	ИнтерфейсСАТУРН.УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры);
	
КонецПроцедуры

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ДокументыСАТУРН.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("САТУРНПрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// см. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекРаботыСФайлами(Настройки) Экспорт
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ДокументыСАТУРН.Тип.Типы() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Настройки.НеОчищатьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСинхронизироватьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСоздаватьФайлыПоШаблону.Добавить(МетаданныеТипа);
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонПредставленияДокументаДляПоляИнтеграции(МетаданныеДокумента, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "САТУРН";
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокумента.Синоним;
	ФормыИмениДокумента.Склоненная = ПолучитьСклоненияСтроки(НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2), "Л=ru_RU", "ПД=Винительный")[0];
	ФормыИмениДокумента.РодИмени   = "М";
	
	Если МетаданныеДокумента = Метаданные.Документы.НакладнаяСАТУРН Тогда
		
		ФормыИмениДокумента.РодИмени   = "Ж";
		ФормыИмениДокумента.Склоненная = НСтр("ru='накладную ФГИС ""Сатурн""'");
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ПроизводственнаяОперацияСАТУРН Тогда
		
		ФормыИмениДокумента.РодИмени   = "Ж";
		ФормыИмениДокумента.Склоненная = НСтр("ru='производственную операцию ФГИС ""Сатурн""'");
		
	КонецЕсли;
	
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			НСтр("ru = 'в архиве'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'оформлена'"), НСтр("ru = 'оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'создана'"), НСтр("ru = 'создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'получена'"), НСтр("ru = 'получено'")))));
	
	Возврат Шаблон;
	
КонецФункции

Функция ИспользоватьАвтоматическийОбменДанными(ОрганизацияСАТУРН) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРегламентныхЗаданий.РегламентноеЗадание
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК НастройкиРегламентныхЗаданий
	|ГДЕ
	|	НастройкиРегламентныхЗаданий.ОрганизацияСАТУРН = &ОрганизацияСАТУРН
	|	И НастройкиРегламентныхЗаданий.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаСАТУРН.ОбменДанными)";
	
	Запрос.УстановитьПараметр("ОрганизацияСАТУРН", ОрганизацияСАТУРН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Задание = РегламентныеЗаданияСервер.Задание(ВыборкаДетальныеЗаписи.РегламентноеЗадание);
		Если Задание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Задание.Использование Тогда
			ВозвращаемоеЗначение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Устанавливает видимость команды "Выполнить обмен" в формах документов, протокола и панели обмена с САТУРН.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма с кнопкой "Выполнить обмен с ФГИС САТУРН"
//  ИмяЭлемента - Строка - Имя кнопки формы
Процедура УстановитьВидимостьКомандыВыполнитьОбмен(Форма, ИмяЭлемента) Экспорт
	
	Если НЕ ОбщегоНазначенияИС.ПравоОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ДокументыСАТУРН, "Изменение") Тогда
		Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументовСАТУРН(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	РаботаСФайлами.УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

#Область СтатусыОформления

// Возвращает допустимые типы документа-основания для указанного документа САТУРН.
//
// Параметры:
//	МетаданныеДокументаСАТУРН - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыСАТУРНПоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	ОписаниеТипов - ОпределяемыйТип.Основание<МетаданныеДокументаСАТУРН.Имя>.Тип
//		тип реквизита ДокументОснование указанного документа САТУРН
//
Функция ДокументыОснованияДляДокументаСАТУРН(МетаданныеДокументаСАТУРН) Экспорт
	
	ТипыОснования = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокументаСАТУРН).Тип;
	
	Возврат ТипыОснования;
	
КонецФункции

Процедура ПриСозданииНаСервереФормыСпискаДокументовСАТУРН(Форма, ИменаСписков, ИменаСписковКОформлению) Экспорт
	
	ИмяДокумента = ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь);
	
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено
		ИЛИ НЕ Метаданные.ОпределяемыеТипы.ДокументыСАТУРНПоддерживающиеСтатусыОформления.Тип.СодержитТип(Тип("ДокументСсылка." + ИмяДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	МетаРеквизитОснование      = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(Метаданные.Документы[ИмяДокумента]);
	ТипыДокументаОснования     = МетаРеквизитОснование.Тип.Типы();
	СтрокиСоединенияДокументов = Новый Массив;
	СтрокиОтбораДокументов     = Новый Массив;
	
	// Подготовим строки соединения и отбора по доступным документам-основаниям.
	Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
		
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим соединение с документом-основанием для RLS.
		СтрокиСоединенияДокументов.Добавить("	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК ДоступКДокументу" + МетаданныеОснования.Имя + "
			|		ПО Таблица.ДокументОснование = ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка");
		
		СтрокиОтбораДокументов.Добавить("ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
		
	КонецЦикла;
	
	Если СтрокиОтбораДокументов.Количество() = 0 Тогда
		
		// Нет ни одного доступного документа-основания.
		ТекстСоединения = "";
		ТекстОтбора =     " И ЛОЖЬ";
		
	Иначе
		
		ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
		ТекстОтбора     = " ИЛИ " + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + " ИЛИ ");
		
	КонецЕсли;
	
	//Выполним общие действия для всех динамических список формы.
	ИменаВсехСписков = ИменаСписков + ?(ИменаСписковКОформлению = "" ИЛИ ИменаСписков = "", "", ", ") + ИменаСписковКОформлению;
	СпискиКОформлению = Новый Структура(ИменаСписковКОформлению);
	
	Для Каждого ИмяСписка Из Новый Структура(ИменаВсехСписков) Цикл
		
		Список = Форма[ИмяСписка.Ключ];
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"ПустойДокументОснование",
			ИнтеграцияИС.МассивПустыхЗначенийСоставногоТипа(МетаРеквизитОснование.Тип));
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"БезОтбораПоОрганизацииСАТУРН",
			Истина);
		
		Список.ТекстЗапроса = СтрЗаменить(
			Список.ТекстЗапроса,
			"//%СоединениеСОснованиями%",
			?(СпискиКОформлению.Свойство(ИмяСписка.Ключ),
				СтрЗаменить(ТекстСоединения, ".ДокументОснование", ".Основание"),
				ТекстСоединения));
		
		Список.ТекстЗапроса = СтрЗаменить(
			Список.ТекстЗапроса,
			"//%ОтборПоДоступнымОснованиям%",
			ТекстОтбора);
		
	КонецЦикла;
		
	УстановитьВидимостьКомандыВыполнитьОбмен(Форма, "СписокВыполнитьОбмен");
	
КонецПроцедуры

Функция ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если Не ИнтеграцияСАТУРНВызовСервера.ВестиУчетПродукции() Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовСАТУРН.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеОформленныхДокументов(МетаданныеДокументаСАТУРН, ДокументОснование, ДокументыПоОснованию, СтатусыОформления) Экспорт
	
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокументаСАТУРН);
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокументаСАТУРН);
	
	Если НЕ ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов 			 = ДокументыПоОснованию[МетаданныеДокументаСАТУРН.Имя];
	ШаблонПредставленияДокумента = ШаблонПредставленияДокументаСАТУРНДляПоляИнтеграции(МетаданныеДокументаСАТУРН, ДокументОснование);
	
	АрхивныйСтатус = Ложь;
	Если СтатусыОформления.Свойство(МетаданныеДокументаСАТУРН.Имя) Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокументаСАТУРН.Имя].Статус;
		АрхивныйСтатус   = СтатусыОформления[МетаданныеДокументаСАТУРН.Имя].Архивный;
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ПустаяСсылка();
	КонецЕсли;
	
	ИмяКоманды   = Неопределено;
	ТекстНадписи = Неопределено;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		Если МассивДокументов.Количество() = 1 Тогда
			
			Если АрхивныйСтатус Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Иначе
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрыть;
			КонецЕсли;
			
			Статус = МассивДокументов[0].Статус;
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияДокумента.ПредставлениеДокумента,
				Статус);
				
			НуженРазделительВТексте = ЗначениеЗаполнено(Статус);
			
		Иначе
			
			ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Если АрхивныйСтатус Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.СтатусОформленияАрхивный;
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеНесколькихДокументов,
					СокрЛП(МассивДокументов.Количество()));
			КонецЕсли;
			
			НуженРазделительВТексте = Истина;
			
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено
			И Не АрхивныйСтатус Тогда
			ТекстНадписи = ТекстНадписи + ?(НуженРазделительВТексте, ", ", "") + СокрЛП(СтатусОформления);
		КонецЕсли;
		
	Иначе
		
		Если Не АрхивныйСтатус И СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстНадписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
		,
		ИмяКоманды);
	
	Описание = Новый Структура;
	Описание.Вставить("ТекстНадписи",        ФорматированныйТекстНадписи);
	Описание.Вставить("СтатусОформления",    СтатусОформления);
	Описание.Вставить("МассивДокументов",    МассивДокументов);
	Описание.Вставить("МетаданныеДокумента", МетаданныеДокументаСАТУРН);
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонПредставленияДокументаСАТУРНДляПоляИнтеграции(МетаданныеДокументаСАТУРН, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "САТУРН";
	ИмяДокумента = МетаданныеДокументаСАТУРН.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокументаСАТУРН.Синоним;
	ФормыИмениДокумента.Склоненная = НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2); // имя с маленькой буквы
	ФормыИмениДокумента.РодИмени   = "М";
	
	Если МетаданныеДокументаСАТУРН = Метаданные.Документы.НакладнаяСАТУРН Тогда
		
		ФормыИмениДокумента.РодИмени   = "Ж";
		ФормыИмениДокумента.Склоненная = НСтр("ru='накладную ФГИС ""Сатурн""'");
		
	ИначеЕсли МетаданныеДокументаСАТУРН = Метаданные.Документы.ПроизводственнаяОперацияСАТУРН Тогда
		
		ФормыИмениДокумента.РодИмени   = "Ж";
		ФормыИмениДокумента.Склоненная = НСтр("ru='производственную операцию ФГИС ""Сатурн""'");
		
	КонецЕсли;
	
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			" "+НСтр("ru='оформлять не требуется'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='оформлена'"), НСтр("ru='оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='создана'"), НСтр("ru='создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='получена'"), НСтр("ru='получено'")))));
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#Область СохранениеДанных

// Загрузить место хранения
//
// Параметры:
//  ДанныеМестаХранения - Структура - (см. ИнтерфейсСАТУРН.ДанныеМестаХранения).
//  СправочникОбъект - СправочникОбъект.МестаХраненияСАТУРН, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск  - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.МестаХраненияСАТУРН - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьМестоХранения(ДанныеМестаХранения, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена();
	КонецЕсли;
	
	Возврат Справочники.МестаХраненияСАТУРН.ЗагрузитьОбъект(ДанныеМестаХранения, ПараметрыОбмена, СправочникОбъект, ТребуетсяПоиск);
	
КонецФункции

// Загрузить место применения
//
// Параметры:
//  ДанныеМестаХранения - Структура - (см. Справочник.МестаПримененияСАТУРН.ДанныеОбъекта).
//  СправочникОбъект - СправочникОбъект.МестаПримененияСАТУРН, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена - Структура, Неопределено - см. ПараметрыОбмена.
//  ТребуетсяПоиск  - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.МестаПримененияСАТУРН - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьМестоПрименения(ДанныеМестаПрименения, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена();
	КонецЕсли;
	
	Возврат Справочники.МестаПримененияСАТУРН.ЗагрузитьОбъект(ДанныеМестаПрименения, ПараметрыОбмена, СправочникОбъект, ТребуетсяПоиск);
	
КонецФункции

// Загрузить организацию
//
// Параметры:
//  ДанныеОрганизации - Структура - (см. ИнтерфейсСАТУРН.ДанныеОрганизации).
//  СправочникОбъект - СправочникОбъект.КлассификаторОрганизацийСАТУРН, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена - Структура, Неопределено - см. ПараметрыОбмена.
//  ТребуетсяПоиск  - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторОрганизацийСАТУРН - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизации, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена();
	КонецЕсли;
	
	Возврат Справочники.КлассификаторОрганизацийСАТУРН.ЗагрузитьОбъект(ДанныеОрганизации, ПараметрыОбмена, СправочникОбъект, ТребуетсяПоиск);
	
КонецФункции

// Загрузить ПАТ
//
// Параметры:
//  ДанныеПАТ - Структура - (см. ИнтерфейсСАТУРН.ДанныеПАТ).
//  СправочникОбъект - СправочникОбъект.КлассификаторПАТСАТУРН, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена - Структура, Неопределено - см. ПараметрыОбмена.
//  ТребуетсяПоиск  - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторПАТСАТУРН - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьПАТ(ДанныеПАТ, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена();
	КонецЕсли;
	
	Возврат Справочники.КлассификаторПАТСАТУРН.ЗагрузитьОбъект(ДанныеПАТ, ПараметрыОбмена, СправочникОбъект, ТребуетсяПоиск);
	
КонецФункции

// Загрузить партию
//
// Параметры:
//  ДанныеПартии - Структура - (см. ИнтерфейсСАТУРН.ДанныеПартии).
//  СправочникОбъект - СправочникОбъект.Партия, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена - Структура, Неопределено - см. ПараметрыОбмена.
//  ТребуетсяПоиск  - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.Партия - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьПартию(ДанныеПартии, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена();
	КонецЕсли;
	
	Возврат Справочники.ПартииСАТУРН.ЗагрузитьОбъект(ДанныеПартии, ПараметрыОбмена, СправочникОбъект, ТребуетсяПоиск);
	
КонецФункции

// Загрузить импортируемую партию
//
// Параметры:
//  ДанныеИмпортируемойПартии - Структура - (см. ИнтерфейсСАТУРН.ДанныеИмпортируемойПартии).
//  СправочникОбъект - СправочникОбъект.ИмпортируемаяПартияСАТУРН, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена - Структура, Неопределено - см. ПараметрыОбмена.
//  ТребуетсяПоиск  - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ИмпортируемаяПартияСАТУРН - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьИмпортируемуюПартию(ДанныеИмпортируемойПартии, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбмена();
	КонецЕсли;
	
	Возврат Справочники.ИмпортируемаяПартияСАТУРН.ЗагрузитьОбъект(ДанныеИмпортируемойПартии, ПараметрыОбмена, СправочникОбъект, ТребуетсяПоиск);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализРасхожденийПриДвиженииСАТУРН);
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыСАТУРН.Имя);
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыСАТУРН.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСАТУРН.ИмяМетода);
	
КонецПроцедуры

//см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСАТУРН;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется            = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыСАТУРН;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН;
	
КонецПроцедуры

#КонецОбласти

// Функция определяет признак использования справочника транспортных средств.
//
// Возвращаемое значение:
//	Булево - Признак использования справочника транспортных средств.
//
Функция УказываетсяТранспортноеСредство() Экспорт
	
	УказываетсяТранспортноеСредство = Ложь;
	ИнтеграцияСАТУРНПереопределяемый.УказываетсяТранспортноеСредство(УказываетсяТранспортноеСредство);
	Возврат УказываетсяТранспортноеСредство;
	
КонецФункции

// Сопоставляет продукцию САТУРН с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ОписаниеТабличнойЧасти - Строка, ТаблицаЗначений - имя табличной части или таблица значений для сопоставления.
//  ИмяКолонкиВыделеннаяПартия - Неопределено, Строка - имя колонки выделенная партия
Процедура ЗаписатьСоответствиеНоменклатуры(Объект, ОписаниеТабличнойЧасти = "Товары", ИмяКолонкиВыделеннаяПартия = Неопределено) Экспорт
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Данные.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	Данные.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	Данные.Колонки.Добавить("Партия",         Новый ОписаниеТипов("СправочникСсылка.ПартииСАТУРН"));
	
	Если ОписаниеТабличнойЧасти = "Шапка" Тогда
		ЗаполнитьЗначенияСвойств(Данные.Добавить(), Объект);
	ИначеЕсли ТипЗнч(ОписаниеТабличнойЧасти) = Тип("Строка") Тогда
		Для Каждого СтрокаТаблицы Из Объект[ОписаниеТабличнойЧасти] Цикл
			НоваяСтрока = Данные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если ИмяКолонкиВыделеннаяПартия <> Неопределено
				И ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиВыделеннаяПартия]) Тогда
				НоваяСтрока = Данные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Партия = СтрокаТаблицы[ИмяКолонкиВыделеннаяПартия];
			КонецЕсли;
		КонецЦикла;
	Иначе
		Данные = ОписаниеТабличнойЧасти;
		Если ИмяКолонкиВыделеннаяПартия <> Неопределено Тогда
			Для Каждого СтрокаТаблицы Из ОписаниеТабличнойЧасти Цикл
				Если Не ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиВыделеннаяПартия]) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Данные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Партия = СтрокаТаблицы[ИмяКолонкиВыделеннаяПартия];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия   КАК Партия
	|ПОМЕСТИТЬ ИсходныеДанныеПредварительно
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	ИсходныеДанныеПредварительно КАК Т
	|ГДЕ
	|	Т.Партия <> &ПустаяПартия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ ТаблицаПредварительно
	|ИЗ
	|	ИсходныеДанные КАК Т
	|ГДЕ
	|	НЕ Т.Серия В (&НезаполненныеЗначенияСерии)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ПустаяСерия,
	|	Т.Партия
	|ИЗ
	|	ИсходныеДанные КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаПредварительно КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК УжеСопоставлено
	|		ПО УжеСопоставлено.Номенклатура   = Т.Номенклатура
	|		И  УжеСопоставлено.Характеристика = Т.Характеристика
	|		И  УжеСопоставлено.Серия          = Т.Серия
	|		И  УжеСопоставлено.Партия  = Т.Партия
	|ГДЕ
	|	Т.Номенклатура НЕ В (&НезаполненныеЗначенияНоменклатура)
	|	И УжеСопоставлено.Номенклатура ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Серия,
	|	Т.Партия
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия          КАК Серия,
	|	Таблица.Партия         КАК Партия,
	|	Таблица.Партия.ПАТ     КАК ПАТ,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок, ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок, 0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура   = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.Партия   = Таблица.Партия
	|		 И Сопоставлено.Серия          = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура   = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.Партия   = Таблица.Партия
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Партия");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("НезаполненныеЗначенияНоменклатура", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Номенклатура));
	Запрос.УстановитьПараметр("ПустаяПартия",                      Справочники.ПартииСАТУРН.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",                       ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии",        ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыСАТУРН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.Партия.Установить(Выборка.Партия, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура   = Выборка.Номенклатура;
		НоваяЗапись.Характеристика = Выборка.Характеристика;
		НоваяЗапись.Серия          = Выборка.Серия;
		НоваяЗапись.Партия         = Выборка.Партия;
		НоваяЗапись.ПАТ            = Выборка.ПАТ;
		НоваяЗапись.Порядок        = Выборка.Порядок + 1;
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыСАТУРН);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		// Требуется повторная инициализация поля (серия соответствия может быть сброшена заполнением статуса)
		НоваяЗапись.Серия          = Выборка.Серия;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры САТУРН произошла ошибка:'")
			+ Символы.ПС + "%1";
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияСАТУРНСлужебный.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область Документы

Процедура ЗаполнитьСопоставленнуюПродукциюВДокументе(ВходящиеДанные, ЗаполнятьПАТ) Экспорт
	
	// Приоритеты:
	//1. По полному соответствию (номенклатура, характеристика, серия)
	//2. По неполному соответствию (номенклатура, характеристика)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",   ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаДанных.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	
	ТипВходящихДанных = ТипЗнч(ВходящиеДанные);
	Если ТипВходящихДанных = Тип("ДанныеФормыКоллекция")
		Или ТипВходящихДанных = Тип("ТаблицаЗначений")
		Или ТипВходящихДанных = Тип("Массив") Тогда
		
		Если ВходящиеДанные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнятьСопоставление = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходящиеДанные[0], "НоменклатураДляВыбора");
		
		ИндексСтроки = 0;
		Для Каждого СтрокаДанных Из ВходящиеДанные Цикл
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДанных);
			СтрокаТаблицы.ИндексСтроки = ИндексСтроки;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
	ИначеЕсли ТипВходящихДанных = Тип("ДанныеФормыЭлементКоллекции")
		Или ТипВходящихДанных = Тип("СтрокаТаблицыЗначений")
		Или ТипВходящихДанных = Тип("Структура") Тогда
		
		ЗаполнятьСопоставление = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВходящиеДанные, "НоменклатураДляВыбора");
		
		Если Не ЗначениеЗаполнено(ВходящиеДанные.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВходящиеДанные);
		СтрокаТаблицы.ИндексСтроки = -1;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнятьПАТ И Не ЗаполнятьСопоставление
		Или ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТаблицаДанных);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.ИндексСтроки   КАК ИндексСтроки,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыСАТУРН.ПАТ КАК ПАТ,
	|	Товары.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ПолноеСоответствие
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеНоменклатурыСАТУРН
	|			ПО СоответствиеНоменклатурыСАТУРН.Номенклатура = Товары.Номенклатура
	|			И СоответствиеНоменклатурыСАТУРН.Характеристика = Товары.Характеристика
	|			И СоответствиеНоменклатурыСАТУРН.Серия = Товары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолноеСоответствие.ПАТ КАК ПАТ,
	|	ПолноеСоответствие.ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	ПолноеСоответствие КАК ПолноеСоответствие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СоответствиеНоменклатурыСАТУРН.ПАТ, НЕОПРЕДЕЛЕНО) КАК ПАТ,
	|	Товары.ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеНоменклатурыСАТУРН
	|			ПО СоответствиеНоменклатурыСАТУРН.Номенклатура = Товары.Номенклатура
	|			И СоответствиеНоменклатурыСАТУРН.Характеристика = Товары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПолноеСоответствие КАК ПолноеСоответствие
	|			ПО ПолноеСоответствие.ИндексСтроки = Товары.ИндексСтроки
	|ГДЕ
	|	ПолноеСоответствие.ИндексСтроки ЕСТЬ NULL
	|
	|ИТОГИ ПО
	|	ИндексСтроки";
	
	ВыборкаПоСтроке = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтроке.Следующий() Цикл
		
		Если ВыборкаПоСтроке.ИндексСтроки = -1 Тогда
			Данные = ВходящиеДанные;
		Иначе
			Данные = ВходящиеДанные.Получить(ВыборкаПоСтроке.ИндексСтроки);
		КонецЕсли;
		
		МассивПАТ = Новый Массив;
		
		ВыборкаПАТ = ВыборкаПоСтроке.Выбрать();
		Пока ВыборкаПАТ.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаПАТ.ПАТ) Тогда
				Продолжить;
			КонецЕсли;
			МассивПАТ.Добавить(ВыборкаПАТ.ПАТ);
		КонецЦикла;
		
		КоличествоСопоставлено = МассивПАТ.Количество();
		
		Если ЗаполнятьПАТ
			И КоличествоСопоставлено = 1 Тогда
			Данные.ПАТ = МассивПАТ[0];
		КонецЕсли;
		
		Если ЗаполнятьСопоставление Тогда
			Если КоличествоСопоставлено = 0 Тогда
				Данные.СопоставлениеТекст = НСтр("ru = '<Не сопоставлено>'");
			ИначеЕсли КоличествоСопоставлено = 1 Тогда
				Данные.СопоставлениеТекст = "";
			Иначе
				Данные.СопоставлениеТекст = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
			КонецЕсли;
			Данные.НоменклатураДляВыбора.ЗагрузитьЗначения(МассивПАТ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСопоставленныеТовары(ТабличнаяЧасть, НоменклатураДляВыбора, ЗаполнятьНоменклатуру) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатуры.ПАТ КАК ПАТ,
	|	СоответствиеНоменклатуры.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатуры.ПАТ В (&ПАТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатуры.ПАТ КАК ПАТ,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Номенклатура) = 1
	|			И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Характеристика) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СопоставленоОднозначно,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Номенклатура) КАК Количество,
	|	МАКСИМУМ(СоответствиеНоменклатуры.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеНоменклатуры.Характеристика) КАК Характеристика
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатуры.ПАТ В (&ПАТ)
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатуры.ПАТ";
	
	ПАТ = Новый Массив;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ПАТ.Добавить(СтрокаТЧ.ПАТ);
	КонецЦикла;
	Запрос.УстановитьПараметр("ПАТ", ПАТ);
	
	Сопоставление = Запрос.ВыполнитьПакет();
	НоменклатураДляВыбора.Загрузить(Сопоставление[0].Выгрузить());
	ТаблицаСопоставленныеТовары = Сопоставление[1].Выгрузить();
	ТаблицаСопоставленныеТовары.Индексы.Добавить("ПАТ");
	
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		СтрокаСопоставление = ТаблицаСопоставленныеТовары.Найти(СтрокаТЧ.ПАТ, "ПАТ");
		
		Если СтрокаСопоставление = Неопределено Тогда
			СтрокаТЧ.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>'");
			СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		ИначеЕсли СтрокаСопоставление.СопоставленоОднозначно Тогда
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				СтрокаТЧ.СопоставлениеНоменклатура   = СтрокаСопоставление.Номенклатура;
				СтрокаТЧ.СопоставлениеХарактеристика = СтрокаСопоставление.Характеристика;
				Если ЗаполнятьНоменклатуру Тогда
					СтрокаТЧ.Номенклатура   = СтрокаСопоставление.Номенклатура;
					СтрокаТЧ.Характеристика = СтрокаСопоставление.Характеристика;
				КонецЕсли;
			Иначе
				СтрокаТЧ.СопоставлениеНоменклатура   = "";
				СтрокаТЧ.СопоставлениеХарактеристика = "";
			КонецЕсли;
		Иначе
			СтрокаТЧ.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), СтрокаСопоставление.Количество);
			СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТипИзмеряемойВеличиныИКоличествоВУпаковке(ТабличнаяЧасть) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "Номенклатура") Тогда
		
		ЕстьКоличествоВУпаковке = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "КоличествоВУпаковкеСАТУРН");
		ЕстьУпаковка = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "Упаковка");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "ТипИзмеряемойВеличиныСАТУРН") Тогда
			
			ТипИзмеряемойВеличиныОбъем = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем;
			ТипИзмеряемойВеличиныВес   = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес;
			
			Данные = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок(ТабличнаяЧасть);
			Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
				
				Если ЕстьУпаковка Тогда
					Упаковка = СтрокаТаблицы.Упаковка;
				Иначе
					Упаковка = Неопределено;
				КонецЕсли;
				
				ДанныеУпаковки = ИнтеграцияИСКлиентСервер.ПолучитьДанныеУпаковки(
					Данные, СтрокаТаблицы.Номенклатура, Упаковка);
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН) Тогда
					Если ДанныеУпаковки.ТипИзмеряемойВеличиныОбъем Тогда
						СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
					ИначеЕсли ДанныеУпаковки.ТипИзмеряемойВеличиныВес Тогда
						СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
					ИначеЕсли ДанныеУпаковки.Объем > 0 Тогда
						СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
					Иначе
						СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьКоличествоВУпаковке Тогда
					Если СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем Тогда
						СтрокаТаблицы.КоличествоВУпаковкеСАТУРН = ДанныеУпаковки.Объем;
					ИначеЕсли СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес Тогда
						СтрокаТаблицы.КоличествоВУпаковкеСАТУРН = ДанныеУпаковки.Вес;
					Иначе
						СтрокаТаблицы.КоличествоВУпаковкеСАТУРН = 0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область УсловноеОформление

Процедура УстановитьУсловноеОформлениеПоляПАТ(Форма, ИмяЭлемента = "ТоварыПАТ", ИмяТЧ = "Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "ПАТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеТекст");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеТекст"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Сворачивает остатки по партиям регистра соответствие номенклатуры САТУРН
//
Процедура СверткаРегистраСоответствиеНоменклатурыСАТУРН() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыСАТУРН);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.СоответствиеНоменклатурыСАТУРН.СверткаРегистраСоответствиеНоменклатурыСАТУРН();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДальнейшиеДействия

Функция НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействие, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействие", ДальнейшееДействие) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена в форме документа.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru = 'Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru = 'Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru = 'Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействие1";
	
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ВсеТребующиеДействияСписок = Новый СписокЗначений;
		ВсеТребующиеДействияСписок.ЗагрузитьЗначения(ВсеТребующиеДействия);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ВсеТребующиеОжиданияСписок = Новый СписокЗначений;
		ВсеТребующиеОжиданияСписок.ЗагрузитьЗначения(ВсеТребующиеОжидания);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеОжиданияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый СписокЗначений();
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Инициализирует структуру реквизитов транспортного средства.
// Используется для заполенния в переопределении ИнтеграцияИСПереопределяемый.ПриОпределенииРеквизитовТранспортногоСредства
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * НомерТранспортногоСредства - Строка
Функция ИнициализироватьСтруктуруРеквизитовТранспортногоСредства() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомерТранспортногоСредства",    "");
	
	Возврат Результат;
	
КонецФункции

Функция ТипОрганизации(Код) Экспорт
	
	ТипОрганизации = Неопределено;
	
	Если Код = 1 Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийСАТУРН.ЮридическоеЛицо;
	ИначеЕсли Код = 2 Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийСАТУРН.ФизическоеЛицо;
	ИначеЕсли Код = 3 Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийСАТУРН.ИндивидуальныйПредприниматель;
	ИначеЕсли Не ЗначениеЗаполнено(Код) Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийСАТУРН.ПустаяСсылка();
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип организации с кодом: %1'"),
				Код);
	КонецЕсли;
	
	Возврат ТипОрганизации;
	
КонецФункции

// Возвращает структуру параметров заполнения табличной части.
// 
// Возвращаемое значение:
//  Структура - 
Функция ПараметрыЗаполненияТабличнойЧастиТовары() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти",              "Товары");
	ПараметрыЗаполнения.Вставить("ЗаполнитьАртикул",               Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКод",                   Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьЕдиницуИзмерения",      Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнитьТипНоменклатуры",       Истина);
	ПараметрыЗаполнения.Вставить("ОбработатьУпаковки",             Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц",    Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок",  Истина);
	ПараметрыЗаполнения.Вставить("ПроверитьСериюРассчитатьСтатус", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКоличествоСАТУРН",      Ложь);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОрганизациииКонтагенты

// Конструктор новой структуры реквизитов организации/контрагента.
// 
// Возвращаемое значение:
//  Структура - Реквизиты организации контрагента:
// * ИНН - Строка -
Функция ИнициализироватьСтруктуруРеквизитовОрганизацииКонтрагента() Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ИНН",                    "");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция РеквизитыОрганизацииКонтрагента(ТаблицаИсточникиРеквизитов, ОрганизацияКонтрагент, Подразделение = Неопределено) Экспорт
	
	Отбор = Новый Структура("ОрганизацияКонтрагент");
	
	Отбор.ОрганизацияКонтрагент = ОрганизацияКонтрагент;
	
	РеквизитыОрганизации = ТаблицаИсточникиРеквизитов.НайтиСтроки(Отбор);
	Результат = ИнициализироватьСтруктуруРеквизитовОрганизацииКонтрагента();
	Если РеквизитыОрганизации.Количество() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыОрганизации[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Таблица для получения реквизитов по органзиация/контрагент, подразделение.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов ключей реквизитов организаций:
// * НомерСтроки            - Число                                           - Номер строки
// * ОрганизацияКонтрагент  - ОпределяемыйТип.ОрганизацияКонтрагентГосИС      - Организация
// * ТорговыйОбъект         - ОпределяемыйТип.ТорговыйОбъектСАТУРН             - Торговый объект
// * ПроизводственныйОбъект - ОпределяемыйТип.ПроизводственныйОбъектИС        - Производственный объект
// * ОрганизацияСАТУРН      - СправочникСсылка.КлассификаторОрганизацийСАТУРН - Ссылка на классификатор САТУРН
// * МестоХранения          - СправочникСсылка.МестаХраненияСАТУРН            - Ссылка на место хранения САТУРН
// * ИНН                    - Строка                                          - ИНН
Функция НоваяТаблицаОрганизацияКонтрагент() Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений();
	ВозвращаемоеЗначение.Колонки.Добавить("НомерСтроки",                         ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ВозвращаемоеЗначение.Колонки.Добавить("ОрганизацияКонтрагент",               Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("ТорговыйОбъект",                      Метаданные.ОпределяемыеТипы.ТорговыйОбъектСАТУРН.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("ПроизводственныйОбъект",              Метаданные.ОпределяемыеТипы.ПроизводственныйОбъектИС.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("МестоХраненияТорговыйОбъект",         Новый ОписаниеТипов("СправочникСсылка.МестаХраненияСАТУРН"));
	ВозвращаемоеЗначение.Колонки.Добавить("МестоХраненияПроизводственныйОбъект", Новый ОписаниеТипов("СправочникСсылка.МестаХраненияСАТУРН"));
	ВозвращаемоеЗначение.Колонки.Добавить("ОрганизацияСАТУРН",                   Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийСАТУРН"));
	ВозвращаемоеЗначение.Колонки.Добавить("ИНН",                                 ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ВозвращаемоеЗначение.Индексы.Добавить("ОрганизацияКонтрагент");
	ВозвращаемоеЗначение.Индексы.Добавить("НомерСтроки");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавляет в таблицу отбора данные отбора
// 
// Параметры:
//  ТаблицаОтбора - см. НоваяТаблицаОрганизацияКонтрагент.
//  ОрганизацияКонтрагент  - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация.
//  ТорговыйОбъект         - ОпределяемыйТип.ТорговыйОбъектСАТУРН, Неопределено - торговый объект.
//  ПроизводственныйОбъект - ОпределяемыйТип.ПроизводственныйОбъектИС - производственный объект.
//  ИНН                    - Строка - ИНН организации/контрагента
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - добавленная строка в таблицу сопосталений
Функция ДобавитьВТаблицуОтбораСопоставлений(ТаблицаОтбора, ОрганизацияКонтрагент, ТорговыйОбъект = Неопределено, 
	ПроизводственныйОбъект = Неопределено, ИНН = "") Экспорт
	
	СтрокаТаблицы = ТаблицаОтбора.Добавить();
	СтрокаТаблицы.ОрганизацияКонтрагент  = ОрганизацияКонтрагент;
	СтрокаТаблицы.ТорговыйОбъект         = ТорговыйОбъект;
	СтрокаТаблицы.ПроизводственныйОбъект = ПроизводственныйОбъект;
	СтрокаТаблицы.ИНН                    = ИНН;
	СтрокаТаблицы.НомерСтроки            = ТаблицаОтбора.Количество();
	
	Возврат СтрокаТаблицы
	
КонецФункции

// Возвращает представления объектов, сопоставленных с хозяйствующим субъектом и предприятием.
//
// Параметры:
//  ПараметрыПолученияСопоставлений - Массив Из см. НовыеПараметрыФормированияПредставленияСопоставлений -
// 
// Возвращаемое значение:
// Соответствие Из КлючИЗначение:
//  * Ключ - см. НовыеПараметрыФормированияПредставленияСопоставлений
//  * Значение - Структура:
//  	** ОрганизацияКонтрагент - Структура - Структура со свойствами контрагента хозяйствующего субъекта:
//			*** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//			*** Ссылка - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, Неопределено - ссылка на сопоставленный объект или Неопределено.
//  	** ТорговыйОбъект - Структура - Структура со свойствами торгового объекта хозяйствующего субъекта:
//			*** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//			*** Ссылка - ОпределяемыйТип.Склад, Неопределено - ссылка на сопоставленный объект или Неопределено.
//  	** ПроизводственныйОбъект - Структура - Структура со свойствами производственного объекта хозяйствующего субъекта:
//			*** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//			*** Ссылка - ОпределяемыйТип.Склад, Неопределено - ссылка на сопоставленный объект или Неопределено.
//
Функция ПредставленияСопоставлений(ПараметрыПолученияСопоставлений) Экспорт
	
	ПустаяСтрока         = Новый ФорматированнаяСтрока("");
	ВозвращаемоеЗначение = Новый Соответствие();
	
	ЗначенияОрганизацияйСАТУРН       = Новый Массив();
	ТаблицаСопоставленийМестХранения = Справочники.МестаХраненияСАТУРН.НоваяТаблицаСопоставленияМестХранения();
	
	Для Каждого ПараметрПолученияСопоставлений Из ПараметрыПолученияСопоставлений Цикл
		
		Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.ОрганизацияСАТУРН) Тогда
			ЗначенияОрганизацияйСАТУРН.Добавить(ПараметрПолученияСопоставлений.ОрганизацияСАТУРН);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.МестоХранения) Тогда
			НоваяСтрока = ТаблицаСопоставленийМестХранения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрПолученияСопоставлений, "ОрганизацияСАТУРН,МестоХранения");
		КонецЕсли;
		
		РезультатСопоставления = Новый Структура("ОрганизацияКонтрагент, ТорговыйОбъект, ПроизводственныйОбъект");
		РезультатСопоставления.ОрганизацияКонтрагент  = Новый Структура("Представление, Значение", ПустаяСтрока, Неопределено);
		РезультатСопоставления.ТорговыйОбъект         = Новый Структура("Представление, Значение", ПустаяСтрока, Неопределено);
		РезультатСопоставления.ПроизводственныйОбъект = Новый Структура("Представление, Значение", ПустаяСтрока, Неопределено);
		
		ВозвращаемоеЗначение.Вставить(
			ПараметрПолученияСопоставлений,
			РезультатСопоставления);
		
	КонецЦикла;
	
	ЗначенияСопоставленийОрганизаций  = Справочники.КлассификаторОрганизацийСАТУРН.ОрганизацииКонтрагентыПоКлассификаторамСАТУРН(ЗначенияОрганизацияйСАТУРН);
	Справочники.МестаХраненияСАТУРН.ЗаполнитьТаблицуСопоставлений(ТаблицаСопоставленийМестХранения);
	
	Для Каждого КлючИЗначение Из ВозвращаемоеЗначение Цикл
		
		ПараметрПолученияСопоставлений = КлючИЗначение.Ключ;
		РезультатСопоставления         = КлючИЗначение.Значение;
		
		Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.ОрганизацияСАТУРН) Тогда
			
			ЗначениеСопоставления = ЗначенияСопоставленийОрганизаций[ПараметрПолученияСопоставлений.ОрганизацияСАТУРН];
			РезультатСопоставления.ОрганизацияКонтрагент.Значение = ЗначениеСопоставления;
			
			Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.ОрганизацияКонтрагент)
				И Не (ПараметрПолученияСопоставлений.ОрганизацияКонтрагент = ЗначениеСопоставления.Организация
					Или ПараметрПолученияСопоставлений.ОрганизацияКонтрагент = ЗначениеСопоставления.Контрагент) Тогда
				ЗначенияПоСсылке = Неопределено;
			Иначе
				ЗначенияПоСсылке = Новый Массив;
				Если ЗначениеЗаполнено(ЗначениеСопоставления.Организация) Тогда
					ЗначенияПоСсылке.Добавить(ЗначениеСопоставления.Организация);
				ИначеЕсли ЗначениеЗаполнено(ЗначениеСопоставления.Контрагент) Тогда
					ЗначенияПоСсылке.Добавить(ЗначениеСопоставления.Контрагент);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьСсылкуИПредставлениеКлассификатора(
				ПараметрПолученияСопоставлений.ОрганизацияСАТУРН,
				ЗначенияПоСсылке,
				РезультатСопоставления.ОрганизацияКонтрагент.Представление,
				ПараметрПолученияСопоставлений.ОрганизацияСАТУРНОбязательноеЗаполнение,,
				ПараметрПолученияСопоставлений.ОрганизацияКонтрагент);
		
		ИначеЕсли ЗначениеЗаполнено(ПараметрПолученияСопоставлений.ОрганизацияКонтрагент) Тогда
			
			ЗаполнитьСсылкуИПредставлениеКлассификатора(
				Неопределено,
				ПараметрПолученияСопоставлений.ОрганизацияКонтрагент,
				РезультатСопоставления.ОрганизацияКонтрагент.Представление,
				ПараметрПолученияСопоставлений.ОрганизацияСАТУРНОбязательноеЗаполнение);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.МестоХранения) Тогда
			
			СтруктураПоиска = Новый Структура("ОрганизацияСАТУРН,МестоХранения");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПараметрПолученияСопоставлений);
			
			ПоискСтрок = ТаблицаСопоставленийМестХранения.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТаблицы Из ПоискСтрок Цикл
				
				ПараметрыНавигационнойСсылки = Новый Структура("ПрефиксНавигационнойСсылки,ПрефиксРеквизита");
				ПараметрыНавигационнойСсылки.ПрефиксНавигационнойСсылки = "ОткрытьМестаХраненияОрганизации";
				ПараметрыНавигационнойСсылки.ПрефиксРеквизита           = ПараметрПолученияСопоставлений.Префикс;
				
				Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.Склад)
					И (ТипЗнч(СтрокаТаблицы.ТорговыйОбъект) <> Тип("Массив")
					   И Не ПараметрПолученияСопоставлений.Склад = СтрокаТаблицы.ТорговыйОбъект
					   Или ТипЗнч(СтрокаТаблицы.ТорговыйОбъект) = Тип("Массив")
					   И СтрокаТаблицы.ТорговыйОбъект.Найти(ПараметрПолученияСопоставлений.Склад) = Неопределено) Тогда
					ЗначенияПоСсылке = Неопределено;
				Иначе
					Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.Склад)
						И ТипЗнч(СтрокаТаблицы.ТорговыйОбъект) = Тип("Массив") Тогда
						ЗначенияПоСсылке = ПараметрПолученияСопоставлений.Склад;
					Иначе
						ЗначенияПоСсылке = СтрокаТаблицы.ТорговыйОбъект;
					КонецЕсли;
				КонецЕсли;
				
				РезультатСопоставления.ТорговыйОбъект.Значение = СтрокаТаблицы.ТорговыйОбъект;
				ЗаполнитьСсылкуИПредставлениеКлассификатора(
					ПараметрПолученияСопоставлений.МестоХранения,
					ЗначенияПоСсылке,
					РезультатСопоставления.ТорговыйОбъект.Представление,
					ПараметрПолученияСопоставлений.МестоХраненияОбязательноеЗаполнение,
					ПараметрыНавигационнойСсылки,
					ПараметрПолученияСопоставлений.Склад);
				
				Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.Склад)
					И (ТипЗнч(СтрокаТаблицы.ПроизводственныйОбъект) <> Тип("Массив")
					   И Не ПараметрПолученияСопоставлений.Склад = СтрокаТаблицы.ПроизводственныйОбъект
					   Или ТипЗнч(СтрокаТаблицы.ПроизводственныйОбъект) = Тип("Массив")
					   И СтрокаТаблицы.ПроизводственныйОбъект.Найти(ПараметрПолученияСопоставлений.Склад) = Неопределено) Тогда
					ЗначенияПоСсылке = Неопределено;
				Иначе
					Если ЗначениеЗаполнено(ПараметрПолученияСопоставлений.Склад)
						И ТипЗнч(СтрокаТаблицы.ПроизводственныйОбъект) = Тип("Массив") Тогда
						ЗначенияПоСсылке = ПараметрПолученияСопоставлений.Склад;
					Иначе
						ЗначенияПоСсылке = СтрокаТаблицы.ПроизводственныйОбъект;
					КонецЕсли;
				КонецЕсли;
				
				РезультатСопоставления.ПроизводственныйОбъект.Значение = СтрокаТаблицы.ПроизводственныйОбъект;
				ЗаполнитьСсылкуИПредставлениеКлассификатора(
					ПараметрПолученияСопоставлений.МестоХранения,
					ЗначенияПоСсылке,
					РезультатСопоставления.ПроизводственныйОбъект.Представление,
					ПараметрПолученияСопоставлений.МестоХраненияОбязательноеЗаполнение,
					ПараметрыНавигационнойСсылки,
					ПараметрПолученияСопоставлений.Склад);
					
			КонецЦикла;
		
		ИначеЕсли ЗначениеЗаполнено(ПараметрПолученияСопоставлений.Склад) Тогда
			
			ЗаполнитьСсылкуИПредставлениеКлассификатора(
				Неопределено,
				ПараметрПолученияСопоставлений.Склад,
				РезультатСопоставления.ТорговыйОбъект.Представление,
				ПараметрПолученияСопоставлений.МестоХраненияОбязательноеЗаполнение);
			
			ЗаполнитьСсылкуИПредставлениеКлассификатора(
				Неопределено,
				ПараметрПолученияСопоставлений.Склад,
				РезультатСопоставления.ПроизводственныйОбъект.Представление,
				ПараметрПолученияСопоставлений.МестоХраненияОбязательноеЗаполнение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыеПараметрыФормированияПредставленияСопоставлений() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Префикс",                                 "");
	ВозвращаемоеЗначение.Вставить("ОрганизацияСАТУРН",                       Неопределено);
	ВозвращаемоеЗначение.Вставить("МестоХранения",                           Неопределено);
	ВозвращаемоеЗначение.Вставить("ОрганизацияСАТУРНОбязательноеЗаполнение", Ложь);
	ВозвращаемоеЗначение.Вставить("МестоХраненияОбязательноеЗаполнение",     Ложь);
	ВозвращаемоеЗначение.Вставить("ОрганизацияКонтрагент",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("Склад",                                   Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьСсылкуИПредставлениеКлассификатора(ЗначениеКлассификатора, ЗначенияПоСсылке, Представление, ОбязательноеЗаполнение, ПараметрыНавигационнойСсылки = Неопределено, ЗначениеИзОснования = Неопределено)
	
	Если ЗначенияПоСсылке = Неопределено Тогда
		СопоставленоОбъектов = 0;
	Иначе
		Если ТипЗнч(ЗначенияПоСсылке) = Тип("Массив") Тогда
			ЗначенияПоСсылкеВМассиве = ЗначенияПоСсылке;
		Иначе
			ЗначенияПоСсылкеВМассиве = Новый Массив;
			Если ЗначениеЗаполнено(ЗначенияПоСсылке) Тогда
				ЗначенияПоСсылкеВМассиве.Добавить(ЗначенияПоСсылке);
			КонецЕсли;
		КонецЕсли;
		СопоставленоОбъектов = ЗначенияПоСсылкеВМассиве.Количество();
	КонецЕсли;
	
	Если СопоставленоОбъектов = 0 Тогда
		
		Если ЗначениеЗаполнено(ЗначениеИзОснования) Тогда
			
			ДанныеПредставления = Новый Массив();
			ДанныеПредставления.Добавить(
				Новый ФорматированнаяСтрока(
					Строка(ЗначениеИзОснования),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					ПолучитьНавигационнуюСсылку(ЗначениеИзОснования)));
			ДанныеПредставления.Добавить(" ");
			ДанныеПредставления.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = '<не сопоставлено>'"),,
					ЦветаСтиля.ЦветОсобогоТекста));
			
			Представление = Новый ФорматированнаяСтрока(ДанныеПредставления);
			
		Иначе
			
			Если ПараметрыНавигационнойСсылки = Неопределено Тогда
				Если ЗначениеКлассификатора = Неопределено Тогда
					ЗначениеНавигационнойСсылки = ПолучитьНавигационнуюСсылку(ЗначенияПоСсылке);
				Иначе
					ЗначениеНавигационнойСсылки = ПолучитьНавигационнуюСсылку(ЗначениеКлассификатора);
				КонецЕсли;
			Иначе
			
				ДанныеНавигационнойСсылки = Новый Массив;
				ДанныеНавигационнойСсылки.Добавить(ПараметрыНавигационнойСсылки.ПрефиксНавигационнойСсылки);
				ДанныеНавигационнойСсылки.Добавить(ПараметрыНавигационнойСсылки.ПрефиксРеквизита);
				
				ЗначениеНавигационнойСсылки = СтрСоединить(ДанныеНавигационнойСсылки, "_");
				
			КонецЕсли;
			
			Если ОбязательноеЗаполнение Тогда
				ЦветГиперссылкиНеСопоставлено = ЦветаСтиля.ЦветОсобогоТекста;
			Иначе
				ЦветГиперссылкиНеСопоставлено = ЦветаСтиля.ЦветГиперссылкиГосИС;
			КонецЕсли;
			
			Представление = Новый ФорматированнаяСтрока(
				НСтр("ru = '<не сопоставлено>'"),,
				ЦветГиперссылкиНеСопоставлено,,
				ЗначениеНавигационнойСсылки);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеПредставления = Новый Массив();
		
		СопоставленныйОбъект = ЗначенияПоСсылкеВМассиве[0];
		
		Если ТипЗнч(СопоставленныйОбъект) = Тип("Массив") Тогда
			
			Для Каждого ЭлементСсылки Из СопоставленныйОбъект Цикл
				
				Если ДанныеПредставления.Количество() Тогда
					ДанныеПредставления.Добавить(" ");
				КонецЕсли;
				
				ДанныеПредставления.Добавить(
					Новый ФорматированнаяСтрока(
						СтрШаблон(НСтр("ru = '%1'"), ЭлементСсылки),,,,
						ПолучитьНавигационнуюСсылку(ЭлементСсылки)));
					
			КонецЦикла;
			
		Иначе
			
			ДанныеПредставления.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(НСтр("ru = '%1'"), СопоставленныйОбъект),,,,
					ПолучитьНавигационнуюСсылку(СопоставленныйОбъект)));
			
		КонецЕсли;
		
		Если СопоставленоОбъектов > 1 Тогда
			
			ДанныеПредставления.Добавить(" ");
			ДанныеПредставления.Добавить(СтрШаблон(НСтр("ru = '( + еще %1 )'"), СопоставленоОбъектов - 1));
			
		КонецЕсли;
		
		Представление = Новый ФорматированнаяСтрока(ДанныеПредставления);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКонтрагентаДляПоискаОрганизацииСАТУРН(Контрагент) Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН",                "");
	ДанныеКонтрагента.Вставить("КПП",                "");
	ДанныеКонтрагента.Вставить("ОГРН",               "");
	ДанныеКонтрагента.Вставить("Наименование",       "");
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "");
	ДанныеКонтрагента.Вставить("Тип",                Перечисления.ТипыОрганизацийСАТУРН.ПустаяСсылка());
	
	ИнтеграцияСАТУРНПереопределяемый.ЗаполнитьДанныеКонтрагентаДляПоискаОрганизацийСАТУРН(ДанныеКонтрагента, Контрагент);
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

#КонецОбласти

Функция РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЗаписыватьСтатус = Истина, СообщениеПрерывания = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	САТУРНПрисоединенныеФайлы.Ссылка                       КАК Сообщение,
	|	САТУРНПрисоединенныеФайлы.Операция                     КАК Операция,
	|	САТУРНПрисоединенныеФайлы.ТипСообщения                 КАК ТипСообщения,
	|	САТУРНПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаСоздания,
	|	ЛОЖЬ                                                   КАК КПередаче,
	|	ВЫБОР КОГДА САТУРНПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	САТУРНПрисоединенныеФайлы.СтатусОбработки     КАК СтатусОбработки,
	|	НЕОПРЕДЕЛЕНО                                  КАК ПротоколОбмена,
	|	САТУРНПрисоединенныеФайлы.Версия              КАК Версия,
	|	САТУРНПрисоединенныеФайлы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО                                  КАК ОрганизацияСАТУРН
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК САТУРНПрисоединенныеФайлы
	|ГДЕ
	|	САТУРНПрисоединенныеФайлы.Документ = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийСАТУРН.Сообщение                  КАК Сообщение,
	|	ОчередьСообщенийСАТУРН.Операция                   КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)   КАК ТипСообщения,
	|	ОчередьСообщенийСАТУРН.ДатаСоздания               КАК ДатаСоздания,
	|	ВЫБОР КОГДА ОчередьСообщенийСАТУРН.Операция В (&ОперацииРасчетСтатуса) ТОГДА
	|		ЛОЖЬ
	|	КОГДА ОчередьСообщенийСАТУРН.ДатаМодификацииУниверсальная <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР КОГДА ОчередьСообщенийСАТУРН.Операция В (&ОперацииРасчетСтатуса) ТОГДА
	|		ИСТИНА
	|	КОГДА ОчередьСообщенийСАТУРН.ДатаМодификацииУниверсальная = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ                                      КАК Передан,
	|	НЕОПРЕДЕЛЕНО                               КАК СтатусОбработки,
	|	ОчередьСообщенийСАТУРН.ПротоколОбмена      КАК ПротоколОбмена,
	|	1,
	|	ОчередьСообщенийСАТУРН.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОчередьСообщенийСАТУРН.ОрганизацияСАТУРН   КАК ОрганизацияСАТУРН
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийСАТУРН КАК ОчередьСообщенийСАТУРН
	|ГДЕ
	|	ОчередьСообщенийСАТУРН.Документ = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания ВОЗР
	|";
	
	АбстрактныеОперации = Перечисления.ВидыОперацийСАТУРН.АбстрактныеОперации();
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ОперацииРасчетСтатуса", АбстрактныеОперации);
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументовСАТУРН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыДокументовСАТУРН.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	АбстрактнаяОперацияРасчетСтатуса = ДокументыПоддерживающиеСтатусыСообщенийВТабличнойЧасти().Получить(ТипДокумента);
	
	КешИдентификаторовСтрок = Новый Соответствие;
	ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Ложь;
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Пока Выборка.Следующий() Цикл
			
			Если СообщениеПрерывания <> Неопределено
				И Выборка.Сообщение = СообщениеПрерывания Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыОбновления = Неопределено;
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					// Получить организацию из сообщения для определения использования автоматического обмена по организации
					ПараметрыОбновленияСтатуса = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
					ПараметрыОбновленияСтатуса.Вставить("ОрганизацияСАТУРН", Выборка.ОрганизацияСАТУРН);
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
						ДокументСсылка,
						Выборка.Операция,
						ПараметрыОбновленияСтатуса);
					
				ИначеЕсли Выборка.Передан Тогда
					
					Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
						// дополнительные операции по обработке документа выполняются при обработке сообщениия по абстрактной операции
						Продолжить;
					КонецЕсли;
					
					СтатусОбработки = Выборка.СтатусОбработки;
					
					ЭтоСообщениеВОчередиОбмена = Ложь;
					
					Если Не ЗначениеЗаполнено(СтатусОбработки) Тогда
						Если Выборка.ПротоколОбмена <> Неопределено Тогда
							ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
							ЭтоСообщениеВОчередиОбмена = Истина;
						КонецЕсли;
						Если ПротоколОбмена = Неопределено Тогда
							Если АбстрактныеОперации.Найти(Выборка.Операция) <> Неопределено Тогда
								СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается;
								ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Истина;
							Иначе
								Продолжить;
							КонецЕсли;
						ИначеЕсли ПротоколОбмена.Количество() > 0 Тогда
							ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
							СтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
						КонецЕсли;
					КонецЕсли;
					
					Если ЭтоСообщениеВОчередиОбмена
						И ПоследняяЗаписьПротоколаОбмена <> Неопределено Тогда
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
							ДокументСсылка,
							Выборка.Операция,
							СтатусОбработки);
						
					Иначе
						
						ПараметрыОбновленияСтатуса = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
						ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
						ПараметрыОбновленияСтатуса.ПротоколОбмена    = Выборка.ПротоколОбмена;
						ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
						ПараметрыОбновленияСтатуса.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
						
						Если ЭтоСообщениеВОчередиОбмена Тогда
							// Требуется обработка сообщения и запись результатов в протокол при выполнении обмена.
							ПараметрыОбновленияСтатуса.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается;
						Иначе
							ПараметрыОбновленияСтатуса.СтатусОбработки = СтатусОбработки;
						КонецЕсли;
						
						Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
							
							ЕстьКПередаче = Ложь;
							ЕстьПередано = Ложь;
							ОрганизацияСАТУРН = Неопределено;
							ВыборкаСтатусыПередачиСообщений = РезультатЗапроса.Выбрать();
							// Выборка отсортирована по дате создания.
							// Сообщения раньше абстрактной операции относятся к предыдущим действиям документа (например, загрузка, создание документа)
							Пока ВыборкаСтатусыПередачиСообщений.Следующий() Цикл
								Если Выборка.Сообщение = ВыборкаСтатусыПередачиСообщений.Сообщение
									Или Выборка.ДатаСоздания > ВыборкаСтатусыПередачиСообщений.ДатаСоздания Тогда
									Продолжить;
								КонецЕсли;
								Если ВыборкаСтатусыПередачиСообщений.КПередаче Тогда
									ЕстьКПередаче = Истина;
									ОрганизацияСАТУРН =  ВыборкаСтатусыПередачиСообщений.ОрганизацияСАТУРН;
								ИначеЕсли ВыборкаСтатусыПередачиСообщений.Передан Тогда
									Если АбстрактныеОперации.Найти(ВыборкаСтатусыПередачиСообщений.Операция) <> Неопределено
										И ВыборкаСтатусыПередачиСообщений.ПротоколОбмена <> Неопределено Тогда
										ПротоколОбмена = ВыборкаСтатусыПередачиСообщений.ПротоколОбмена.Получить();
										Если ПротоколОбмена <> Неопределено Тогда
											ЕстьПередано = Истина;
											Прервать;
										КонецЕсли;
									Иначе
										ЕстьПередано = Истина;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							Если ЕстьКПередаче И Не ЕстьПередано Тогда
								ПараметрыОбновленияСтатуса.Вставить("ОрганизацияСАТУРН", ОрганизацияСАТУРН);
								ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
									ДокументСсылка,
									Выборка.Операция,
									ПараметрыОбновленияСтатуса);
							Иначе
								ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
									ДокументСсылка,
									Выборка.Операция,
									ПараметрыОбновленияСтатуса);
							КонецЕсли;
						
						Иначе
							ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
								ДокументСсылка,
								Выборка.Операция,
								ПараметрыОбновленияСтатуса);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПараметрыОбновления <> Неопределено Тогда
						ПараметрыОбновления.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ПротоколОбмена <> Неопределено Тогда
					ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
				КонецЕсли;
				Если ПротоколОбмена = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.СтатусОбработки   = Выборка.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
				ПараметрыОбновленияСтатуса.ПротоколОбмена    = ПротоколОбмена;
				ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
				ПараметрыОбновленияСтатуса.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
					ДокументСсылка,
					Выборка.Операция,
					ПараметрыОбновленияСтатуса);
					
				ПараметрыОбновления.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторСтроки)
				И КешИдентификаторовСтрок.Получить(Выборка.ИдентификаторСтроки) = Неопределено Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
				ЗаписьНабора.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				
				КешИдентификаторовСтрок.Вставить(Выборка.ИдентификаторСтроки, Истина);
				
			КонецЕсли;
			
			Если СообщениеПрерывания = Неопределено Тогда
				
				Если ПараметрыОбновления <> Неопределено Тогда
					РегистрыСведений.СтатусыДокументовСАТУРН.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				КонецЕсли;
				
			Иначе
				
				Если (Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята
					Или Выборка.СтатусОбработки = Неопределено) Тогда
					
					Если ПараметрыОбновления <> Неопределено Тогда
						РегистрыСведений.СтатусыДокументовСАТУРН.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
				// дополнительные операции по обработке документа выполняются при обработке сообщениия по абстрактной операции
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаписыватьСтатус Тогда
		
		// Перед расчетом результирующего статуса записать набор данных в регистре.
		НаборЗаписей.Записать();
		
		Если Выборка.Количество() > 0 
			И Не ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса
			И АбстрактнаяОперацияРасчетСтатуса <> Неопределено Тогда
			
			ПараметрыОбновленияСтатуса = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = АбстрактнаяОперацияРасчетСтатуса;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена;
			
			ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
				ДокументСсылка,
				АбстрактнаяОперацияРасчетСтатуса,
				ПараметрыОбновленияСтатуса);
				
			ПараметрыОбновления.ИдентификаторСтроки = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("УникальныйИдентификаторИС");
			
			Если ПараметрыОбновления <> Неопределено Тогда
				РегистрыСведений.СтатусыДокументовСАТУРН.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ДокументыПоддерживающиеСтатусыСообщенийВТабличнойЧасти()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Тип("ДокументСсылка.ИмпортПродукцииСАТУРН"), Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу);
	Результат.Вставить(Тип("ДокументСсылка.ПланПримененияСАТУРН"),  Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу);
	
	Возврат Результат;
	
КонецФункции

// Параметры обмена.
// 
// Параметры:
//  ЗначениеОтбора - Неопределено - Организации или настройка регламентного задания
//  УникальныйИдентификатор - Неопределено - Уникальный идентификатор
// 
// Возвращаемое значение:
//  Структура - Параметры обмена:
// * Организации - Неопределено -
// * СообщенияКПодписанию - Неопределено -
// * ОжидатьНаСервере - Булево -
// * ОжидатьНаКлиенте - Булево -
// * ФоновоеЗадание - Неопределено -
// * Изменения - Массив -
// * ОбработанныеЭлементыОчереди - Массив -
// * ОчередьСообщений - ТаблицаЗначений 
// * ЗависимостиСообщений - ТаблицаЗначений 
// * УникальныйИдентификатор - Неопределено -
// * АдресВоВременномХранилище - Неопределено -
// * ПараметрыОптимизации - см. ИнтеграцияСАТУРНСлужебный.ПараметрыОптимизации
// * ПараметрыПреобразования - см. ИнтеграцияСАТУРНСлужебный.ПараметрыПреобразования
// * АдресДанныхЛогаЗапроса - Неопределено -
// * ОрганизацииСАТУРН - СправочникСсылка.КлассификаторОрганизацийСАТУРН - 
Функция ПараметрыОбмена(ЗначениеОтбора = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбмена = Новый Структура;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.НастройкиРегламентныхЗаданийСАТУРН") Тогда
		ПараметрыОбмена.Вставить("НастройкаРегламентногоЗадания", ЗначениеОтбора);
		// Организации определяются из настройки регламентного задания
		ПараметрыОбмена.Вставить("ОрганизацииСАТУРН",             Неопределено);
		ЭтоРегламентноеЗадание = Истина;
	Иначе
		ПараметрыОбмена.Вставить("НастройкаРегламентногоЗадания", Неопределено);
		ПараметрыОбмена.Вставить("ОрганизацииСАТУРН",             ЗначениеОтбора);
		ЭтоРегламентноеЗадание = Ложь;
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("ОжидатьНаСервере", Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте", Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",   Неопределено);
	ПараметрыОбмена.Вставить("Изменения",        Новый Массив);
	
	ПараметрыОбмена.Вставить("ЭтоРегламентноеЗадание",      ЭтоРегламентноеЗадание);
	ПараметрыОбмена.Вставить("ДатаПоследнегоЗапросаСписка", '00010101');
	
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьСообщений",            ИнтеграцияСАТУРНСлужебный.ИнициализиоватьОчередьСообщений());
	ПараметрыОбмена.Вставить("ЗависимостиСообщений",        ИнтеграцияСАТУРНСлужебный.ИнициализироватьЗависимостиСообщений());
	ПараметрыОбмена.Вставить("ПараметрыОптимизации",        ИнтеграцияСАТУРНСлужебный.ПараметрыОптимизации());
	ПараметрыОбмена.Вставить("ПараметрыПреобразования",     ИнтеграцияСАТУРНСлужебный.ПараметрыПреобразования());
	
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", Неопределено);
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("КОтложеннойЗагрузке",          Новый Соответствие());
	ПараметрыОбмена.Вставить("ЛогиныПоПользователям",        Новый Соответствие());
	ПараметрыОбмена.Вставить("КоличествоЗапросовПоСекундам", Новый Соответствие());
	
	Возврат ПараметрыОбмена;
	
КонецФункции

#Область Авторизация

Функция ПараметрыПолученияКлючаСессии()
	
	ПараметрыПолученияКлючаСессии = Новый Структура;
	ПараметрыПолученияКлючаСессии.Вставить("ИмяПараметраСеанса", "ДанныеКлючаСессииСАТУРН");
	ПараметрыПолученияКлючаСессии.Вставить("ВремяДоОкончанияДействияДляОбновления", 60);
	
	Возврат ПараметрыПолученияКлючаСессии; 
	
КонецФункции

Функция ДанныеКлючаСессии()
	
	ДанныеКлючаСессии = Новый Структура;
	ДанныеКлючаСессии.Вставить("ДействуетДо",      Дата(1,1,1));
	ДанныеКлючаСессии.Вставить("Идентификатор",    "");
	ДанныеКлючаСессии.Вставить("ТокенАвторизации", "");
	
	Возврат ДанныеКлючаСессии; 
	
КонецФункции

Функция ПолучитьДанныеКлючаСессииИзРегистра(Пользователь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДанныеРегистра", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",    Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь",         Пользователь);
	Запрос.УстановитьПараметр("БезУчетаПользователя", Пользователь = Неопределено);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПодключения.Логин,
	|	НастройкиПодключения.КлючАвторизации,
	|	ЕСТЬNULL(ДанныеКлючаСессии.Данные, НЕОПРЕДЕЛЕНО) КАК Данные
	|ИЗ
	|	РегистрСведений.НастройкиПодключенияСАТУРН КАК НастройкиПодключения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеКлючаСессииСАТУРН КАК ДанныеКлючаСессии
	|		ПО НастройкиПодключения.Логин = ДанныеКлючаСессии.Логин
	|ГДЕ
	|	&БезУчетаПользователя
	|	ИЛИ НастройкиПодключения.Пользователь = &Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Если Пользователь = Неопределено Тогда
			ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не найдено ни одной настройки подключения к ФГИС ""Сатурн""'");
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для пользователя %1 не найдена настройка подключения к ФГИС ""Сатурн""'"), Пользователь);
		КонецЕсли;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Выборка.Следующий();
	
	ДанныеРегистра = Новый Структура;
	ДанныеРегистра.Вставить("Логин",             Выборка.Логин);
	ДанныеРегистра.Вставить("КлючАвторизации",   Выборка.КлючАвторизации);
	ДанныеРегистра.Вставить("ДанныеКлючаСессии", ДанныеКлючаСессии());
	Если Выборка.Данные <> Неопределено Тогда
		Данные = Выборка.Данные.Получить();
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ДанныеРегистра.ДанныеКлючаСессии, Данные)
		КонецЕсли;
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеРегистра = ДанныеРегистра;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбновитьКлючСессии(ПараметрыПолученияКлючаСессии, ТекущиеДанные, ПродлитьСрокДействияКлюча)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Успешно",            Истина);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",        Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатыЗапросов", Новый Массив());
	
	ТребуетсяАктуализацияДанных = Ложь;
	НовыеДанные = Неопределено;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеКлючаСессииСАТУРН");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Логин", ТекущиеДанные.Логин);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Логин", ТекущиеДанные.Логин);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеКлючаСессии.Данные КАК Данные
		|ИЗ
		|	 РегистрСведений.ДанныеКлючаСессииСАТУРН КАК ДанныеКлючаСессии
		|ГДЕ
		|	ДанныеКлючаСессии.Логин = &Логин";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДанныеКлючаСессии = Выборка.Данные.Получить();
			Если ТипЗнч(ДанныеКлючаСессии) = Тип("Структура")
				И ДанныеКлючаСессии.ТокенАвторизации <> ТекущиеДанные.ДанныеКлючаСессии.ТокенАвторизации Тогда
				ТребуетсяАктуализацияДанных = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ТребуетсяАктуализацияДанных Тогда
			Результат = ОбновитьКлючСессииИзСервиса(ТекущиеДанные, ПродлитьСрокДействияКлюча, ВозвращаемоеЗначение.РезультатыЗапросов);
			Если Результат.Успешно Тогда
				НовыеДанные = Новый ХранилищеЗначения(ТекущиеДанные.ДанныеКлючаСессии);
				Запись = РегистрыСведений.ДанныеКлючаСессииСАТУРН.СоздатьМенеджерЗаписи();
				Запись.Логин = ТекущиеДанные.Логин;
				Запись.Данные = НовыеДанные;
				Запись.Записать();
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
				ВозвращаемоеЗначение.Успешно     = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если НовыеДанные <> Неопределено Тогда
		ПараметрыСеанса[ПараметрыПолученияКлючаСессии.ИмяПараметраСеанса] = НовыеДанные;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбновитьКлючСессииИзСервиса(ТекущиеДанные, ПродлитьСрокДействияКлюча, РезультатыЗапросов, НовыйКлюч = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", Неопределено);
	ВозвращаемоеЗначение.Вставить("Успешно",     Истина);
	
	Если ПродлитьСрокДействияКлюча Тогда
		
		Результат = ИнтерфейсСАТУРН.ПродлитьТокенАвторизации(
			ТекущиеДанные.Логин,
			ТекущиеДанные.ДанныеКлючаСессии.ТокенАвторизации,
			ТекущиеДанные.ДанныеКлючаСессии.Идентификатор);
			
		Если Результат.РезультатЗапроса <> Неопределено Тогда
			ЭлементРезультата = Новый Структура();
			ЭлементРезультата.Вставить("Операция",         Результат.Операция);
			ЭлементРезультата.Вставить("РезультатЗапроса", Результат.РезультатЗапроса);
			РезультатыЗапросов.Добавить(ЭлементРезультата);
		КонецЕсли;
		
		Если Результат.ДействуетДо = Неопределено Тогда
			Если Не НовыйКлюч
				И Результат.КодОшибки = -406 Тогда
				РезультатОбновления = ОбновитьКлючСессииИзСервиса(ТекущиеДанные, Ложь, РезультатыЗапросов);
				ВозвращаемоеЗначение.ТекстОшибки = РезультатОбновления.ТекстОшибки;
				ВозвращаемоеЗначение.Успешно     = РезультатОбновления.Успешно;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
				ВозвращаемоеЗначение.Успешно     = Ложь;
			КонецЕсли;
		Иначе
			ТекущиеДанные.ДанныеКлючаСессии.ДействуетДо = Результат.ДействуетДо;
		КонецЕсли;
		
	Иначе
		
		Идентификатор = Строка(Новый УникальныйИдентификатор);
		Результат = ИнтерфейсСАТУРН.ПолучитьТокенАвторизации(ТекущиеДанные.Логин, ТекущиеДанные.КлючАвторизации, Идентификатор);
		Если Результат.РезультатЗапроса <> Неопределено Тогда
			ЭлементРезультата = Новый Структура();
			ЭлементРезультата.Вставить("Операция",         Результат.Операция);
			ЭлементРезультата.Вставить("РезультатЗапроса", Результат.РезультатЗапроса);
			РезультатыЗапросов.Добавить(ЭлементРезультата);
		КонецЕсли;
		Если Результат.ТокенАвторизации = Неопределено Тогда
			ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
			ВозвращаемоеЗначение.Успешно     = Ложь;
		Иначе
			ТекущиеДанные.ДанныеКлючаСессии.Идентификатор    = Идентификатор;
			ТекущиеДанные.ДанныеКлючаСессии.ТокенАвторизации = Результат.ТокенАвторизации;
			РезультатОбновления = ОбновитьКлючСессииИзСервиса(ТекущиеДанные, Истина, РезультатыЗапросов, Истина);
			ВозвращаемоеЗначение.ТекстОшибки = РезультатОбновления.ТекстОшибки;
			ВозвращаемоеЗначение.Успешно     = РезультатОбновления.Успешно;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Получить представление статуса.
//
// Параметры:
//  Статус                     - ПеречислениеСсылка - Статус документа.
//  ВходящиеДальнейшееДействие - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - входящие дальнейшие действия.
//  ДопустимыеДействия         - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Список разрешенных дальнейших действий.
//  КраткоеПредставление       - Булево - Краткое представление для отображения в строке товаров
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса.
//
Функция ПредставлениеСтатуса(Статус, ВходящиеДальнейшееДействие, ДопустимыеДействия) Экспорт
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН") Тогда
		МассивДопустимыеДействия = Новый Массив;
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(Статус) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВнимания = СтатусыЦветТекстаТребуетВнимания();
		
		ПредставленниеСтатуса = Строка(Статус);
		
		Если СтатусыЦветТекстаТребуетВнимания.Найти(Статус) <> Неопределено Тогда
			СтатусПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					ПредставленниеСтатуса,,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусПредставление = Новый ФорматированнаяСтрока(ПредставленниеСтатуса);
		КонецЕсли;
		
	Иначе
		СтатусПредставление = Статус;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН")
		И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки     = "";
		ЯвляетсяГиперссылкой = Истина;
		Представление        = НРег(Строка(ДальнейшееДействие));
		Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию Тогда
			ТекстГиперссылки = "ОтменитьОперацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеПередачуДанных Тогда
			ТекстГиперссылки = "ОтменитьПередачуДанных";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную Тогда
			ТекстГиперссылки = "ПодтвердитьНакладную";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную Тогда
			ТекстГиперссылки = "ВернутьНакладную";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза Тогда
			ТекстГиперссылки = "ПодтвердитьУтерюГруза";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат Тогда
			ТекстГиперссылки = "ПодтвердитьВозврат";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате Тогда
			ТекстГиперссылки = "ПодтвердитьУтерюПриВозврате";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр Тогда
			ТекстГиперссылки = "ПередатьНаДосмотр";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт Тогда
			ТекстГиперссылки = "ПодтвердитьЭкспорт";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт Тогда
			ТекстГиперссылки = "ОтклонитьЭкспорт";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеИмпорт Тогда
			ТекстГиперссылки = "ПодтвердитьИмпорт";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта Тогда
			ТекстГиперссылки = "ЗагрузитьПартииИмпорта";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитьВвоз Тогда
			ТекстГиперссылки = "ОтменитьИмпорт";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию Тогда
			ТекстГиперссылки = "АннулироватьОперацию";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			Если НЕ ЯвляетсяГиперссылкой Тогда
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)));
			Иначе
				
				ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
				
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					Представление,
					Новый Шрифт(,,,, Истина),
					ЦветСтиля,
					,
					ТекстГиперссылки);
			КонецЕсли;
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

// Получить статусы, цвет текста которых "требует внимания"
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка - Статусы, для которых требуется устанавливать цвет "требует внимания"
//
Функция СтатусыЦветТекстаТребуетВнимания() Экспорт
	
	СтатусыЦветТекстаТребуетВнимания = Новый Массив;
	
	Для Каждого Статус Из Документы.АктИнвентаризацииСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.АктПримененияСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ИмпортПродукцииСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.НакладнаяСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПроизводственнаяОперацияСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ЗапросОстатковПартийСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПланПримененияСАТУРН.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	
	Возврат СтатусыЦветТекстаТребуетВнимания;
	
КонецФункции

// Выполняет начальную запись в регистр "Статусы документов САТУРН"
// 
// Параметры:
//  Источник - ДокументОбъект.
Процедура ЗаписатьСтатусДокументаПоУмолчанию(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый)
		Или Источник.ДополнительныеСвойства.Свойство("ТребуетсяПерезаписьСтатусаПоУмолчанию");
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовСАТУРН.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыДокументовСАТУРН.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

#КонецОбласти

Функция ФорматироватьЛогЗапросов(ИсходныйТекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Если КоличествоСтрок = 0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	Для СмещениеСКонца = 0 По КоличествоСтрок - 1 Цикл
		
		НомерСтрокиСКонца = КоличествоСтрок - СмещениеСКонца;
		ТекущаяСтрока     = ТекстовыйДокумент.ПолучитьСтроку(НомерСтрокиСКонца);
		ДанныеСтроки      = Новый Массив();
		Если СтрНачинаетсяС(ТекущаяСтрока, "{")
			Или СтрНачинаетсяС(ТекущаяСтрока, "[") Тогда
			Попытка
				ДанныеСтроки.Добавить(ОбщегоНазначенияИС.ФорматироватьJSON(ТекущаяСтрока));
			Исключение
				Продолжить;
			КонецПопытки;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстовыйДокумент.УдалитьСтроку(НомерСтрокиСКонца);
		ТекстовыйДокумент.ВставитьСтроку(НомерСтрокиСКонца, СтрСоединить(ДанныеСтроки, Символы.ПС));
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
	
КонецФункции

Функция СостояниеОбмена(ОрганизацииСАТУРН) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийСАТУРН.Сообщение), 0) КАК КоличествоСообщений
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийСАТУРН КАК ОчередьСообщенийСАТУРН
	|ГДЕ
	|	&БезОтбора ИЛИ ОчередьСообщенийСАТУРН.ОрганизацияСАТУРН В(&ОрганизацияСАТУРН)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийСАТУРН.Сообщение), 0) > 0
	|",
	"ЕстьСообщенияОжидающиеОтправки");
		
	// Таблица организаций САТУРН
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаОрганизаций.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН
	|ПОМЕСТИТЬ ТаблицаОрганизацийСАТУРН
	|ИЗ
	|	&ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|");

	// Задание для отправки сообщений в САТУРН
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Настройки.РегламентноеЗадание              КАК РегламентноеЗадание,
	|	ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН
	|ПОМЕСТИТЬ ОбменДанными
	|ИЗ
	|	ТаблицаОрганизацийСАТУРН КАК ТаблицаОрганизацийСАТУРН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК Настройки
	|		ПО Настройки.ОрганизацияСАТУРН = ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН
	|		И Настройки.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаСАТУРН.ОбменДанными)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбменДанными.РегламентноеЗадание КАК РегламентноеЗадание,
	|	ОбменДанными.ОрганизацияСАТУРН   КАК ОрганизацияСАТУРН
	|ИЗ
	|	ОбменДанными КАК ОбменДанными
	|",
	"НастройкаРегламентногоОбменаДанными");

	// Задание для загрузки статусов накладных
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Настройки.РегламентноеЗадание              КАК РегламентноеЗадание,
	|	ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН
	|ПОМЕСТИТЬ ЗагрузкаСтатусовНакладных
	|ИЗ
	|	ТаблицаОрганизацийСАТУРН КАК ТаблицаОрганизацийСАТУРН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК Настройки
	|		ПО Настройки.ОрганизацияСАТУРН = ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН
	|		И Настройки.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаСАТУРН.ЗагрузкаСтатусовНакладных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагрузкаСтатусовНакладных.РегламентноеЗадание КАК РегламентноеЗадание,
	|	ЗагрузкаСтатусовНакладных.ОрганизацияСАТУРН   КАК ОрганизацияСАТУРН
	|ИЗ
	|	ЗагрузкаСтатусовНакладных КАК ЗагрузкаСтатусовНакладных
	|",
	"НастройкаЗагрузкаСтатусовНакладных");
	
	// Задание для загрузки импортируемых партий
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Настройки.РегламентноеЗадание              КАК РегламентноеЗадание,
	|	ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН
	|ПОМЕСТИТЬ ЗагрузкаИмпортируемыхПартий
	|ИЗ
	|	ТаблицаОрганизацийСАТУРН КАК ТаблицаОрганизацийСАТУРН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН.Роли КАК КлассификаторОрганизацийСАТУРНРоли
	|		ПО ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН = КлассификаторОрганизацийСАТУРНРоли.Ссылка
	|		И КлассификаторОрганизацийСАТУРНРоли.Роль = ЗНАЧЕНИЕ(Перечисление.РолиКонтрагентовСАТУРН.Импортер)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК Настройки
	|		ПО Настройки.ОрганизацияСАТУРН = ТаблицаОрганизацийСАТУРН.ОрганизацияСАТУРН
	|		И Настройки.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаСАТУРН.ЗагрузкаИмпортируемыхПартий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагрузкаИмпортируемыхПартий.РегламентноеЗадание КАК РегламентноеЗадание,
	|	ЗагрузкаИмпортируемыхПартий.ОрганизацияСАТУРН   КАК ОрганизацияСАТУРН
	|ИЗ
	|	ЗагрузкаИмпортируемыхПартий КАК ЗагрузкаИмпортируемыхПартий",
	"НастройкаЗагрузкаИмпортируемыхПартий");

	ТаблицаОрганизаций = ТаблицаОрганизаций(ОрганизацииСАТУРН);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОрганизацияСАТУРН",  ОрганизацииСАТУРН);
	Запрос.УстановитьПараметр("БезОтбора",          ОрганизацииСАТУРН.Количество() = 0);
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", ТаблицаОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат РезультатыЗапроса;
	
КонецФункции

Функция ТаблицаОрганизаций(ОрганизацииСатурн)
	ВозвращаемоеЗначение = Новый ТаблицаЗначений();
	ВозвращаемоеЗначение.Колонки.Добавить("ОрганизацияСАТУРН", Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийСАТУРН"));
		
	Если ОрганизацииСатурн.Количество() = 0 Тогда
		
		ТаблицаСопоставлений = НоваяТаблицаОрганизацияКонтрагент();
		
		ДоступныеОрганизации = ОбщегоНазначенияИС.ДоступныеОрганизации();
		
		Для Каждого Строка Из ДоступныеОрганизации Цикл
			ДобавитьВТаблицуОтбораСопоставлений(
				ТаблицаСопоставлений, Строка.Значение);
			
		КонецЦикла;
		
		Справочники.КлассификаторОрганизацийСАТУРН.ЗаполнитьТаблицуСопоставленийКлассификаторамиСАТУРН(ТаблицаСопоставлений);
		
		Для Каждого Организация Из ТаблицаСопоставлений Цикл
			ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение.Добавить(), Организация);
		КонецЦикла;
		
	Иначе
		Для Каждого Организация Из ОрганизацииСатурн Цикл
			НоваяСтрока = ВозвращаемоеЗначение.Добавить();
			
			НоваяСтрока.ОрганизацияСАТУРН = Организация;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти