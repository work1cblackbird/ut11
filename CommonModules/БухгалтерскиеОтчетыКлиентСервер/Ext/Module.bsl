
#Область ПрограммныйИнтерфейс

#Область ЭлементыНастройки

// Функция-конструктор описания элементов настройки
// 
// Возвращаемое значение:
//  Структура - описание элементов настройки
//
Функция НовыйОписаниеЭлементовНастройки() Экспорт
	
	Описание = Новый Структура;
	
	Описание.Вставить("Разделы",                  "РазделыОтчета");
	Описание.Вставить("РазделОтчет",              "Отчет");
	Описание.Вставить("РазделНастройки",          "НастройкиОтчета");
	Описание.Вставить("КнопкаСформироватьОтчет",  "Сформировать");
	Описание.Вставить("КнопкаОткрытьНастройки",   "ПоказатьНастройки");
	Описание.Вставить("КнопкаПрименитьНастройки", "ПрименитьНастройки");
	Описание.Вставить("КнопкаЗакрытьНастройки",   "ВернутьсяВОтчет");
	
	Возврат Описание;
	
КонецФункции

// Процедура - Показать настройки
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения
//  ОписаниеЭлементов	 - см. НовыйОписаниеЭлементовНастройки()
//
Процедура ПоказатьНастройки(Форма, ОписаниеЭлементов = Неопределено) Экспорт
	
	Если ОписаниеЭлементов = Неопределено Тогда
		ОписаниеЭлементов = НовыйОписаниеЭлементовНастройки();
	КонецЕсли;
	
	Форма.Элементы[ОписаниеЭлементов.КнопкаПрименитьНастройки].КнопкаПоУмолчанию = Истина;
	Форма.Элементы[ОписаниеЭлементов.Разделы].ТекущаяСтраница                    = Форма.Элементы[ОписаниеЭлементов.РазделНастройки];
	
КонецПроцедуры

// Процедура - Скрыть настройки
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения
//  ОписаниеЭлементов	 - см. НовыйОписаниеЭлементовНастройки()
//
Процедура СкрытьНастройки(Форма, ОписаниеЭлементов = Неопределено) Экспорт
	
	Если ОписаниеЭлементов = Неопределено Тогда
		ОписаниеЭлементов = НовыйОписаниеЭлементовНастройки();
	КонецЕсли;
	
	Форма.Элементы[ОписаниеЭлементов.КнопкаСформироватьОтчет].КнопкаПоУмолчанию = Истина;
	Форма.Элементы[ОписаниеЭлементов.Разделы].ТекущаяСтраница                   = Форма.Элементы[ОписаниеЭлементов.РазделОтчет];
	
КонецПроцедуры

// Варианты типов группировки, используемые в списке выбора таблицы настроек отчета.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - набор вариантов для значения у элемента списка.
//
Функция ТипГруппировки() Экспорт
	
	Варианты = Новый Структура;
	Варианты.Вставить("Элементы",       0);
	Варианты.Вставить("Иерархия",       1);
	Варианты.Вставить("ТолькоИерархия", 2);
	
	Возврат Новый ФиксированнаяСтруктура(Варианты);
	
КонецФункции

// Варианты размещений дополнительных полей, используемые в списке выбора настроек отчета.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - набор вариантов для значения у элемента списка.
//
Функция РазмещениеДополнительныхПолей() Экспорт
	
	Варианты = Новый Структура;
	Варианты.Вставить("ВместеСВладельцем", 0); // Синоним "В одной колонке".
	Варианты.Вставить("Отдельно",          1); // Синоним "В отдельных колонках".
	
	Возврат Новый ФиксированнаяСтруктура(Варианты);
	
КонецФункции

// Варианты переодичности выводимых данных, используемые в списке выбора настроек отчета.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - набор вариантов для значения у элемента списка.
//
Функция Периодичность() Экспорт

	Варианты = Новый Структура;
	Варианты.Вставить("Период",      0);
	Варианты.Вставить("Регистратор", 2);
	Варианты.Вставить("День",        6);
	Варианты.Вставить("Неделя",      7);
	Варианты.Вставить("Декада",      8);
	Варианты.Вставить("Месяц",       9);
	Варианты.Вставить("Квартал",    10);
	Варианты.Вставить("Полугодие",  11);
	Варианты.Вставить("Год",        12);
	
	Возврат Новый ФиксированнаяСтруктура(Варианты);
	
КонецФункции

// Задает список параметров настроек, являющихся служебными или служащими лишь для оформления.
//
// Возвращаемое значение:
//   Структура   - имена параметров (ключи структуры).
//
Функция ПараметрыНеВлияющиеНаДанныеОтчета() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ВыводитьЗаголовок",       Истина);
	СписокПараметров.Вставить("ВыводитьПодвал",          Истина);
	СписокПараметров.Вставить("ВыделятьОтрицательные",   Истина);
	СписокПараметров.Вставить("ДоступныеТипыДокументов", Истина);
	СписокПараметров.Вставить("МакетОформления",         Истина);
	СписокПараметров.Вставить("ПоследнийЛист",           Истина);
	СписокПараметров.Вставить("ОтветственноеЛицо",       Истина);
	СписокПараметров.Вставить("СчетаРасчетов",           Истина);
	СписокПараметров.Вставить("УменьшенныйАвтоотступ",   Истина);
	
	Возврат СписокПараметров;
	
КонецФункции

#КонецОбласти

// Используется при оповещении о выгрузке сформированого отчета при нажатии на кнопку "Выгрузить".
// 
// Возвращаемое значение:
//  Строка - Имя события выгрузка результата отчета
Функция ИмяСобытияВыгрузкаРезультатаОтчета() Экспорт
	
	Возврат "ВыгрузкаРезультатаОтчета";
	
КонецФункции


// Получает параметр вывода компоновщика настроек или настройки СКД.
//
// Параметры:
// 	Настройка - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек 
//		или настройка/группировка СКД.
//  ИмяПараметра - Строка - Имя параметра СКД.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - Параметр вывода.
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Возвращает элемент структуры настроек компоновки данных содержащий поле группировки с указанным именем.
// Поиск осуществляется по указанной структуре и все ее подчиненным структурам.
// В случае неудачи возвращает Неопределено.
//
// Параметры:
//   КоллекцияГруппировок - ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных,
//               КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных, Элемент структуры компоновки данных - 
//               Коллекция, внутри которой производится поиск.
//   ИмяПоля - Строка - Имя поля группировки.
//
// Возвращаемое значение:
//   ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных, Неопределено - Найденная группировка.
//
Функция НайтиГруппировку(КоллекцияГруппировок, ИмяПоля) Экспорт
	
	Для каждого Элемент Из КоллекцияГруппировок Цикл
		
		Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
			Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
				Если Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
					Возврат Элемент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Элемент.Структура.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Группировка = НайтиГруппировку(Элемент.Структура, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД.
//
// Параметры:
//	Настройка - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек или настройка/группировка СКД.
//	ИмяПараметра - Строка - Имя параметра СКД.
//	Значение - Произвольный - Значение параметра вывода СКД.
//	Использование - Булево - Признак использования параметра. По умолчанию всегда принимается равным Истине.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - Параметр вывода.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//                     ОтборКомпоновкиДанных - Элемент структуры.
//	Поле - Строка - имя поля, по которому добавляется отбор.
//	Значение - Произвольный - Значение отбора.
//	ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнений компоновки данных (по умолчанию: Равно).
//	Использование - Булево - Признак использования отбора (по умолчанию: Истина).
//  ВПользовательскиеНастройки - Булево - Признак добавления отбора в пользовательские настройки.
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЗначениеОтбораКомпоновки = Значение;
	// Механизмы компоновки в качестве списка принимают СписокЗначений,
	// но не более очевидную коллекцию - Массив.
	ТипЗначенияОтбора = ТипЗнч(Значение);
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		Или ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
		Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Если ТипЗначенияОтбора = Тип("Массив") Тогда
			ЗначениеОтбораКомпоновки = Новый СписокЗначений;
			ЗначениеОтбораКомпоновки.ЗагрузитьЗначения(Значение);
		ИначеЕсли ТипЗначенияОтбора = Тип("ФиксированныйМассив") Тогда
			ЗначениеОтбораКомпоновки = Новый СписокЗначений;
			ЗначениеОтбораКомпоновки.ЗагрузитьЗначения(Новый Массив(Значение));
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = ЗначениеОтбораКомпоновки;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Функция добавляет выбранное поле и возвращает элемент выбранного поля. 
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//	                   ВыбранныеПоляКомпоновкиДанных - Элемент структуры настройки отчета.
//	Поле - Строка - имя поля, которое нужно добавить в СКД.
//	Заголовок - Строка - Заголовок добавляемого поля.
// 
// Возвращаемое значение:
//	ВыбранноеПолеКомпоновкиДанных - Добавленное поле.
//
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПоле;
	
КонецФункции

// Возвращает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - 
//              Настройки, в которых происходит поиск параметра. Не поддерживает тип ДанныеРасшифровкиКомпоновкиДанных.
//  Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Искомый параметр.
//	
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - Настройки, 
//              в которых происходит поиск параметра. 
//	Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно установить значение параметра.
//  Значение - Произвольный - Значение параметра.
//	Использование - Булево - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр, для которого установлено значение.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает значение параметров ФорматнаяСтрока для настроек компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - Настройки, 
//              в которых происходит поиск и установка параметра. 
//
Процедура УстановитьПараметрыФорматныеСтроки(Настройки) Экспорт
	
	ФорматныеСтроки = Новый Структура();
	ФорматныеСтроки.Вставить("ФорматнаяСтрокаДата",  НСтр("ru = 'ДФ=dd.MM.yy'"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрокаМесяц", НСтр("ru = 'ДФ = ''MMM yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрока1Кв",   НСтр("ru = 'ДФ = ''""1 кв."" yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрока2Кв",   НСтр("ru = 'ДФ = ''""2 кв."" yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрока3Кв",   НСтр("ru = 'ДФ = ''""3 кв."" yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрока4Кв",   НСтр("ru = 'ДФ = ''""4 кв."" yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрока1Полугодие",   НСтр("ru = 'ДФ = ''""1 полугодие"" yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрока2Полугодие",   НСтр("ru = 'ДФ = ''""2 полугодие"" yy'''"));
	ФорматныеСтроки.Вставить("ФорматнаяСтрокаГод",   НСтр("ru = 'ДФ = ''yyyy'''"));

	Для каждого КлючИЗначение Из ФорматныеСтроки Цикл
		ЗначениеПараметра = ПолучитьПараметр(Настройки, КлючИЗначение.Ключ);
		
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение      = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



// Возвращает строку с представлением периода.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода.
//	КонецПериода - Дата - Конец периода.
//	ТолькоДаты - Булево - Если Ложь, то возвращаемая строка включает предлог "за".
//	ВидПериода - ПеречислениеСсылка.ВидПериода - Вид периода. Если конец периода не задан или не является концом года, параметр игнорируется.
//
// Возвращаемое значение:
//  Строка - Текст представления периода.
//
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь, ВидПериода = 0) Экспорт
	
	ТекстПериод = "";
	
	
	ВидыПериода = ВидыПериода();
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ");
			Если ВидПериода = ВидыПериода.МежотчетныйПериод
				И КонецДня(КонецПериода) = КонецГода(КонецПериода) Тогда
				ТекстПериод = ТекстПериод
				+ СтрШаблон(НСтр("ru = 'межотчетный период %1-%2 гг.'"), 
					Формат(КонецПериода, "ДФ=гггг"), Формат(КонецГода(КонецПериода) + 1, "ДФ=гггг"));
			Иначе
				ТекстПериод = ТекстПериод
				+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина")
				+ ?(ВидПериода = ВидыПериода.ОтчетныйИМежотчетныйПериод,
					НСтр("ru = ', включая межотчетный период'"), "");
			КонецЕсли;
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда

		ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("ru = 'за'")+ " ")
			+ ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");

	КонецЕсли;

	
	Возврат ТекстПериод;
	
КонецФункции



// Оставлена для совместимости. Следует использовать БухгалтерскиеОтчеты.ИмяОтчета(), ИмяОтчетаПоИмениФормы().
//    
// Возвращает имя объекта метаданных, которому принадлежит форма.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ПолучитьИдентификаторОбъекта(Форма) Экспорт
	
	Возврат ИмяОтчетаПоИмениФормы(Форма);
	
КонецФункции

// Возвращает имя отчета (объекта метаданных), которому принадлежит форма.
// Следует использовать для форм, принадлежащих отчету.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
// Возвращаемое значение:
//	Строка       - Имя отчета (объекта метаданных).
//  Неопределено - Передана не форма отчета (например, если отчет использует общую форму).
//
Функция ИмяОтчетаПоИмениФормы(Форма) Экспорт
	
	ЭлементыИмени = СтрРазделить(Форма.ИмяФормы, ".");
	Если ЭлементыИмени.Количество() > 1 И ЭлементыИмени[0] = "Отчет" Тогда
		Возврат ЭлементыИмени[1];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли указанное значение простым типом данных.
//
// Параметры:
// 	Значение - Произвольный - Проверяемое значение.
//
// Возвращаемое значение:
//	Булево - Истина, если значение простого типа, иначе Ложь.
//
Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

// Возвращает дату начала периода.
//
// Параметры:
//	Период - Дата - Дата, для которой необходимо определить начало периода.
//	Периодичность - Число - Определяет вид периода.
//
// Возвращаемое значение:
//	Дата - Дата, соответствующая началу периода.
//
Функция НачалоПериода(Период, Периодичность) Экспорт
	
	НачалоПериода = Период;
	Если Периодичность = 6 Тогда       //День
		НачалоПериода = НачалоДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		НачалоПериода = НачалоНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) <= 10 Тогда
			НачалоПериода = Дата(Год(Период), Месяц(Период), 1);
		ИначеЕсли День(Период) > 10 И День(Период) <= 20 Тогда
			НачалоПериода = Дата(Год(Период), Месяц(Период), 11);
		Иначе
			НачалоПериода = Дата(Год(Период), Месяц(Период), 21);
		КонецЕсли;
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		НачалоПериода = НачалоМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		НачалоПериода = НачалоКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		НачалоПериода = ?(Месяц(Период) < 7, НачалоДня(Дата(Год(Период), 1, 1)), НачалоДня(Дата(Год(Период), 7, 1)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
//
// Параметры:
//	Период - Дата - Дата, для которой необходимо определить конец периода.
//	Периодичность - Число - Определяет вид периода.
//
// Возвращаемое значение:
//	Дата - Дата, соответствующая окончания периода.
//
Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает вид ближайшего периода между двумя датами.
//
// Параметры:
//	Периодичность - Число - Исходное значение периодичности.
//	НачалоПериода - ДатаВремя - Дата и время начала периода.
//	КонецПериода - ДатаВремя - Дата и время окончания периода.
//
// Возвращаемое значение:
//	Число - Вид периодичности.
//
Функция ПолучитьЗначениеПериодичности(Периодичность, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Периодичность;
	Если Периодичность = 0 Тогда
		Если ЗначениеЗаполнено(НачалоПериода)
			И ЗначениеЗаполнено(КонецПериода) Тогда
			Разность = КонецПериода - НачалоПериода;
			Если Разность / 86400 < 45 Тогда
				Результат = 6; // День.
			Иначе
				Результат = 9; // Месяц.
			КонецЕсли;
		Иначе
			Результат = 9; // Месяц.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Виды периода, используемые, если конец периода отчета является концом года.
//
// Применяется, если в конфигурации используется межотчетный период.
// См.: БухгалтерскийУчетКлиентСервер.ИспользуетсяМежотчетныйПериод()
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - виды периода.
//
Функция ВидыПериода() Экспорт
	
	ВидПериода = Новый Структура;
	ВидПериода.Вставить("ОтчетныйПериод",             0);
	ВидПериода.Вставить("МежотчетныйПериод",          1);
	ВидПериода.Вставить("ОтчетныйИМежотчетныйПериод", 2);
	
	Возврат Новый ФиксированнаяСтруктура(ВидПериода);
	
КонецФункции   


// Возвращает наименование фонового задания для выполнения отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
// Возвращаемое значение:
//	Строка - Наименование фонового задания.
//
Функция ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма, ИмяОтчета = "") Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отчета: %1'");
	
	Если ПустаяСтрока(ИмяОтчета) Тогда
		ИмяОтчета = ИмяОтчетаПоИмениФормы(Форма);
	КонецЕсли;
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, ИмяОтчета);
	
	Возврат НаименованиеЗадания;
	
КонецФункции

// Возвращает значение указанного свойства поля структуры.
//
// Параметры:
//	ЭлементСтруктура - КомпоновщикНастроекКомпоновкиДанных, Произвольный - Структура, в которой хранится поле.
//	Поле - Произвольный - Поле, для которого определяется значение свойства.
//	Свойство - Строка - Имя свойства, значение которого требуется получить.
//
// Возвращаемое значение:
//	Произвольный - Значение запрашиваемого свойства поля либо Неопределено.
//
Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = СтрНайти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Скрывает видимость элементов формы, связанных с настройками отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	ДополнительныеПараметры - Структура, Неопределено - Структура, содержащая ключи:
//		* СкрыватьНастройкиПриФормированииОтчета - Булево - Признак необходимости скрытия настроек.
//		* ИмяГруппаПанельНастроек - Строка - Имя панели с настройками на форме.
//		* ИмяКнопкаПанельНастроек - Строка - Имя кнопки вызова панели настроек (опционально).
//
Процедура СкрыватьНастройкиПриФормированииОтчета(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		СкрыватьНастройкиПриФормированииОтчета = Форма.СкрыватьНастройкиПриФормированииОтчета;
		ПанельНастроек       = Форма.Элементы.ГруппаПанельНастроек;
		КнопкаПанельНастроек = Форма.Элементы.ПанельНастроек;
	Иначе
		СкрыватьНастройкиПриФормированииОтчета = ДополнительныеПараметры.СкрыватьНастройкиПриФормированииОтчета;
		ПанельНастроек       = Форма.Элементы[ДополнительныеПараметры.ИмяГруппаПанельНастроек];
		Если ДополнительныеПараметры.Свойство("ИмяКнопкаПанельНастроек") Тогда
			КнопкаПанельНастроек = Форма.Элементы[ДополнительныеПараметры.ИмяКнопкаПанельНастроек];
		Иначе
			КнопкаПанельНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СкрыватьНастройкиПриФормированииОтчета Тогда
		Если ПанельНастроек.Видимость Тогда
			Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПанельНастроекСкрытаАвтоматически", Истина);
		КонецЕсли;
		ПанельНастроек.Видимость = Ложь;
		Если КнопкаПанельНастроек <> Неопределено Тогда
			ИзменитьЗаголовокКнопкиПанельНастроек(КнопкаПанельНастроек, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает заголовок кнопки отображения / скрытия панели настроек отчета.
//
// Параметры:
//	Кнопка - КнопкаФормы - Кнопка отображения / скрытия панели настроек.
//	ВидимостьПанелиНастроек - Булево - Признак видимости кнопки.
//
Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	Если ВидимостьПанелиНастроек Тогда
		Кнопка.Заголовок = НСтр("ru = 'Скрыть настройки'");
	Иначе
		Кнопка.Заголовок = НСтр("ru = 'Показать настройки'");
	КонецЕсли;
		
КонецПроцедуры

// Вычисляет сумму выделенных ячеек табличного документа.
//
// Параметры:
//	Сумма - Число - Сумма значений ячеек.
//	СтруктураАдресВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//	Результат - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//
Процедура ВычислитьСуммуВЯчейках(Сумма, СтруктураАдресВыделеннойОбласти, Результат) Экспорт
	Перем РазделительДробнойЧасти;
	
	Если Не СтруктураАдресВыделеннойОбласти.Свойство("РазделительДробнойЧасти", РазделительДробнойЧасти) Тогда
		ЭталонноеЧисло = Формат(1.1);
		РазделительДробнойЧасти = ?(СтрДлина(ЭталонноеЧисло) > 3, "", Сред(ЭталонноеЧисло, 2, 1));
	КонецЕсли;

	Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
		Если ИндексСтрока = 0 Тогда // Выделена колонка отчета (без ограничений), суммы из нее получить нельзя.
			Продолжить;
		КонецЕсли;
		
		Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
			Если ИндексКолонка = 0 Тогда // Выделена строка отчета (без ограничений), суммы из нее получить нельзя.
				Продолжить;
			КонецЕсли;
			
			Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
			Если Ячейка.Видимость <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
				Сумма = Сумма + Ячейка.Значение;
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(Ячейка.Текст) Тогда
				Продолжить;
			КонецЕсли;

			Сумма = Сумма + СтрокаСФорматомВЧисло(Ячейка.Текст, РазделительДробнойЧасти);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступность показателя.
// Ищет показатель в доступных полях компоновщика данных (ДоступныеПоля) по имени (ИмяПоказателя).
//
// Параметры:
//	ДоступныеПоля - ДоступныеПоляКомпоновкиДанных - Коллекция доступных полей, в которой осуществляется поиск.
//	ИмяПоказателя - Строка - Имя искомого показателя.
//
// Возвращаемое значение:
//	Булево - Истина, если показатель есть среди доступных, в противном случае - Ложь.
//
Функция ПоказательДоступен(ДоступныеПоля, ИмяПоказателя) Экспорт
	
	Возврат ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоказателя)) <> Неопределено;
	
КонецФункции	

// Выполняет настройку формы отчета при изменении организации.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ОрганизацияПриИзменении(Форма, знач Организация = Неопределено) Экспорт 
	
	Отчет = Форма.Отчет;
	ТипыСвязанныеСОрганизацией = БухгалтерскиеОтчетыВызовСервера.ТипыСвязанныеСОрганизацией();
	Если Организация = Неопределено Тогда
		Организация = Отчет.Организация; // вариант по умолчанию
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					ЭлементОтбора.ПравоеЗначение = Организация;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Неопределено;
				КонецЕсли; 
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Отчет, "ВключатьОбособленныеПодразделения") Тогда
					Отчет.ВключатьОбособленныеПодразделения = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение)) Тогда
				ЭлементОтбора.ПравоеЗначение = Неопределено;
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПодразделениеПриИзменении(Форма);
	
КонецПроцедуры

// Выполняет настройку формы отчета при изменении подразделения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ПодразделениеПриИзменении(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					ЭлементОтбора.ПравоеЗначение = Отчет.Подразделение;
				Иначе
					ЭлементОтбора.ПравоеЗначение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет служебные элементы отбора, которые не нужно показывать пользователю, и элементы,
// у которых снят флаг использования.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, отбор которого нужно обработать.
//
Процедура УдалитьНеиспользуемыйОтбор(КомпоновщикНастроек) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование ИЛИ ЭтоСлужебныйЭлементОтбора(ЭлементОтбора) Тогда
			
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыДляУдаления Цикл
		
		Отбор.Элементы.Удалить(Элемент);
		
	КонецЦикла;

КонецПроцедуры

// Удаляет ИдентификаторПользовательскойНастройки для элементов отбора,
// тем самым перемещая отбор из пользовательских настроек в обычные.
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиданных - Компоновщик в настройках которого нужно переместить отборы.
//
Процедура УдалитьИдентификаторПользовательскойНастройкиИзОтбора(КомпоновщикНастроек) Экспорт
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = "";
	КонецЦикла;
	
КонецПроцедуры

// Возвращает номер субконто по пути поля компоновки.
//
// Параметры:
//  Путь - Строка - Путь поля субконто.
// 
// Возвращаемое значение:
//  Число, Неопределено - номер субконто.
//
Функция НомерСубконто(Путь) Экспорт
	
	НомерСтрокой = СтрЗаменить(Путь, "Субконто", "");
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСтрокой) Тогда
		
		НомерСубконто = Число(НомерСтрокой);
		
	Иначе
		
		НомерСубконто = Неопределено;
		
	КонецЕсли;

	Возврат НомерСубконто;
	
КонецФункции

// Дает возможность работать с произвольными разделителем дробной части и разделителем групп разрядов.
// Также как и СтроковыеФункцииКлиентСервер.СтрокаВЧисло() работает без выдачи исключений.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к числу.
//  РазделительДробнойЧасти - Строка - Символ, который является разделителем дробной части. Если не указан, то будет
//             использован первый символ отличный от цифры в ряду символов справа. Например, и "ъ111,222.333ъ" ,
//             и "111,222,333" будут распознаны как 111222.333 , если разделитель не указан явно; но, если указан
//             разделитель "," , то будут распознаны соответственно как 111.222333 и 111222.333
//
// Возвращаемое значение:
//   Число - распознанное число или 0, если не удалось распознать.
//
Функция СтрокаСФорматомВЧисло(Знач Значение, РазделительДробнойЧасти = "") Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат 0;
	КонецЕсли;
	
	ДлинаЗначения = СтрДлина(Значение);
	Если ДлинаЗначения = 1 И Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
		// Отдельно обрабатываем тривиальный случай. Например, "-" .
		Возврат 0;
	КонецЕсли;
	
	// Определяем самую левую и самую правую из цифр строки.
	Для ЛеваяГраница = 1 По ДлинаЗначения Цикл
		ТекущийСимвол = Сред(Значение, ЛеваяГраница, 1);
		Если ТекущийСимвол >= "0" И ТекущийСимвол <= "9" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для ПраваяГраница = 0 По ДлинаЗначения - 1 Цикл
		ТекущийСимвол = Сред(Значение, ДлинаЗначения - ПраваяГраница, 1);
		Если ТекущийСимвол >= "0" И ТекущийСимвол <= "9" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПраваяГраница = ДлинаЗначения - ПраваяГраница;
	Если ПраваяГраница < ЛеваяГраница Тогда
		// В строке вообще отсутствуют цифры.
		Возврат 0;
	КонецЕсли;
	
	// Определяем знак числа.
	Если СтрНайти(Значение, "-", НаправлениеПоиска.СКонца, ЛеваяГраница) <> 0   // соответствует форматам ЧО=3 или ЧО=4
	 Или СтрНайти(Значение, "-", НаправлениеПоиска.СНачала, ПраваяГраница) <> 0 // соответствует форматам ЧО=1 или ЧО=2
	 Или СтрНайти(Значение, "(", НаправлениеПоиска.СКонца, ЛеваяГраница) <> 0   // соответствует формату ЧО=0
		И СтрНайти(Значение, ")", НаправлениеПоиска.СНачала, ПраваяГраница) <> 0 Тогда
		ЗнакЗначения = -1;
	Иначе
		ЗнакЗначения = 1;
	КонецЕсли;
	
	Если ПраваяГраница <> ДлинаЗначения Или ЛеваяГраница <> 1 Тогда
		ДлинаЗначения = ПраваяГраница - ЛеваяГраница + 1;
		Значение = Сред(Значение, ЛеваяГраница, ДлинаЗначения);
	КонецЕсли;
	
	// Определяем дробную часть числа.
	ТолькоЦифры = Новый Массив;
	РазделительНайден = Ложь;
	РазрядовПослеЗапятой = 0;
	Для НомерСимвола = 0 По ДлинаЗначения - 1 Цикл
		
		ТекущийСимвол = Сред(Значение, ДлинаЗначения - НомерСимвола, 1);
		
		ЭтоЦифра = (ТекущийСимвол >= "0" И ТекущийСимвол <= "9");
		Если ЭтоЦифра Тогда
			ТолькоЦифры.Вставить(0, ТекущийСимвол);
		КонецЕсли;
		
		Если РазделительНайден Тогда
			Продолжить;
		КонецЕсли;
			
		Если ЭтоЦифра Тогда
			РазрядовПослеЗапятой = РазрядовПослеЗапятой + 1;
		ИначеЕсли ПустаяСтрока(РазделительДробнойЧасти)
		 Или ТекущийСимвол = РазделительДробнойЧасти Тогда
			РазделительНайден = Истина;
		КонецЕсли;

	КонецЦикла;
	Если Не РазделительНайден Тогда // строка не содержит дробной части
		РазрядовПослеЗапятой = 0;
	КонецЕсли;
	
	// Преобразуем в число с учетом дробной части.
	ТипЧисло = Новый ОписаниеТипов("Число");
	ЗначениеТолькоЦифры = СтрСоединить(ТолькоЦифры);
	Результат = ЗнакЗначения * ТипЧисло.ПривестиЗначение(ЗначениеТолькоЦифры);
	Если РазрядовПослеЗапятой <> 0 И ЗначениеЗаполнено(Результат) Тогда
		Результат = Результат / Pow(10, РазрядовПослеЗапятой);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Функция - Имя макета оформления по умолчанию
// 
// Возвращаемое значение:
//  Строка - имя макета
//
Функция ИмяМакетаОформленияПоУмолчанию() Экспорт
	
	ЗначениеПоУмолчанию = "ОформлениеОтчетовЗеленый";
	
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Конструктор параметров открытия формы стандартного отчета.
//
// Возвращаемое значение:
//	Структура - Содержит ключи с параметрами открытия формы.
//
Функция НовыйПараметрыФормыСтандартногоОтчета() Экспорт
	
	ПараметрыФормы= Новый Структура();
	
	ПараметрыФормы.Вставить("ОткрытьРасшифровку", Ложь);
	ПараметрыФормы.Вставить("АдресРасшифровки");
	ПараметрыФормы.Вставить("ИдентификаторРасшифровки");
	ПараметрыФормы.Вставить("ИмяОтчета");
	ПараметрыФормы.Вставить("ИмяИсходногоОтчета");
	ПараметрыФормы.Вставить("РеквизитыПравилРасшифровки");
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает имена разделов настроек стандартного отчета.
// 
// Возвращаемое значение:
//  Структура - Ключ - имя раздела настроек стандартного отчета, значение - флаг заполнения настроек по умолчанию.
//
Функция РазделыНастроекСтандартногоОтчета() Экспорт
	
	РазделыНастроек = Новый Структура();
	
	РазделыНастроек.Вставить("Группировка", 		Ложь);
	РазделыНастроек.Вставить("Отбор", 				Ложь);
	РазделыНастроек.Вставить("Показатели", 			Ложь);
	РазделыНастроек.Вставить("ДополнительныеПоля", 	Ложь);
	РазделыНастроек.Вставить("УсловноеОформление", 	Ложь);
	
	Возврат РазделыНастроек;
	
КонецФункции

// Проверяет в форме отчета, использует ли она отложенную инициализацию компоновщика настроек.
// Критерий проверки - наличие реквизита КомпоновщикИнициализирован формы отчета.
//
// Если используется отложенная инициализация, то в ходе работы пользователя с формой отчета требуется вызов.
// БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек
//
// Другим критерием может быть наличие у отчета двух схем - 
// для инициализации при создании формы используется основная пустая схема.
//
// Отчет, использующий отложенную инициализацию компоновщика настроек должен в составе реквизитов иметь
// реквизит ПользовательскиеНастройки для хранения адреса, по которому размещены настройки для передачи
// между компонентами механизма отложенной инициализации.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма отчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует отложенную инициализацию компоновщика настроек.
//
Функция ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КомпоновщикИнициализирован");
	
КонецФункции

// Проверяет, инициализирован ли компоновщик настроек.
// Если форма не использует отложенную инициализацию, то компоновщик настроек считается инициализированным.
// 
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма отчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если компоновщик настроек инициализирован, с настройками возможна работа пользователя.
//
Функция КомпоновщикНастроекИнициализирован(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Форма.КомпоновщикИнициализирован;
	
КонецФункции

// Устанавливает конвенциональный признак, что пользователь поменял организацию.
// Он используется в БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек() для отчетов,
// поддерживающих отложенную инициализацию компоновщика настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура УстановитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ОрганизацияИзменилась = Истина;
	
КонецПроцедуры

// Проверяет значение конвенционального признака, что пользователь поменял организацию.
// Он используется в БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек() для отчетов,
// поддерживающих отложенную инициализацию компоновщика настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//
// Возвращаемое значение:
//  Булево - Истина, если есть основания полагать, что отложенная инициализация компоновщика вызвана изменением организации.
//  Неопределено - отчет не использует отложенную инициализацию компоновщика.
//
Функция ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ОрганизацияИзменилась;
	
КонецФункции


// Устанавливает период отчета в настройках (см. НовыйУниверсальныеНастройки())
// исходя их переданного значения начала периода и периодичности отчета,
// периодичность при этом будет сброшена.
//
// Параметры:
//  Настройки - Структура - настройки отчета, см. НовыйУниверсальныеНастройки().
//  НачалоПериода - Дата - Дата начала периода.
//
Процедура ПреобразоватьПериодичностьОтчетаВПериод(Настройки, НачалоПериода) Экспорт
	
	Настройки.НачалоПериода = НачалоПериода;
	МаксимальныйКонецПериода = Настройки.КонецПериода;
	
	Если Настройки.Периодичность = 6 Тогда // По дням.
		
		Настройки.КонецПериода = КонецДня(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 7 Тогда // По неделям.
		
		Настройки.КонецПериода = КонецНедели(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 8 Тогда // По декадам.
		
		Настройки.КонецПериода = Мин(КонецМесяца(Настройки.НачалоПериода), КонецДня(Настройки.НачалоПериода + 9*60*60*24));
		
	ИначеЕсли Настройки.Периодичность = 9 Тогда // По месяцам.
		
		Настройки.КонецПериода = КонецМесяца(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 10 Тогда // По кварталам.
		
		Настройки.КонецПериода = КонецКвартала(Настройки.НачалоПериода);
		
	ИначеЕсли Настройки.Периодичность = 11 Тогда // По полугодиям.
		
		Если ДеньГода(Настройки.НачалоПериода) = 1 Тогда
			Настройки.КонецПериода = Дата(Год(Настройки.НачалоПериода), 6, 30,23,59,59);
		Иначе
			Настройки.КонецПериода = КонецГода(Настройки.НачалоПериода);
		КонецЕсли;
		
	ИначеЕсли Настройки.Периодичность = 12 Тогда // По годам.
		
		Настройки.КонецПериода = КонецГода(Настройки.НачалоПериода);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаксимальныйКонецПериода) И МаксимальныйКонецПериода < Настройки.КонецПериода Тогда
		Настройки.КонецПериода = МаксимальныйКонецПериода;
	КонецЕсли;

	Настройки.Периодичность = 0; // За период отчета.
	
КонецПроцедуры

// Проверяет в форме отчета применение нескольких рабочих схем компоновки данных.
// Критерий проверки - наличие реквизита ТекущаяСхемаКомпоновкиДанных объекта отчета.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует несколько рабочих схем компоновки данных.
//
Функция ОтчетПоддерживаетНесколькоСхемКомпоновкиДанных(Форма) Экспорт
	
	Если Не ОтчетИспользуетОтложеннуюИнициализациюКомпоновщикаНастроек(Форма) Тогда
		Возврат Ложь; // Не поддерживается несколько схем компоновки данных без отложенной инициализации компоновщика.
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "ТекущаяСхемаКомпоновкиДанных");
	
КонецФункции

// Инициализирует параметры проверки актуальности данных закрытия месяца для бухгалтерских отчетов.
//
//	Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма отчета, имеет основной реквизит "Отчет".
//
//	Возвращаемое значение:
//		Структура - содержит следующие свойства:
//			* Организация - СправочникСсылка.Организации - организация, для которой будет производиться проверка актуальности;
//			* НачалоПериода - Дата - начало периода, в рамках которого будет проводиться проверка актуальности данных;
//			* КонецПериода - Дата - конец периода, в рамках которого будет проводиться проверка актуальности данных;
//			* СписокОрганизаций - Массив - массив значений с типом СправочникСсылка.Организации -
//									организации, для которых будет производиться проверка актуальности;
//			* ЭтапыЗакрытияМесяца - Массив - операции закрытия месяца для которых будет проводиться проверка актуальности,
//										содержит элементы с типом ПеречислениеСсылка.ОперацииЗакрытияМесяца;
//			* УникальныйИдентификаторФормы - Строка - уникальный идентификатор формы для которой устанавливается актуальность данных.
//
Функция ИнициализироватьПараметрыПроверкиАктуальности(Форма) Экспорт
	
	ЭтапыЗакрытияМесяца = Новый Массив;
	ЭтапыЗакрытияМесяца.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости"));
	ЭтапыЗакрытияМесяца.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов"));
	ЭтапыЗакрытияМесяца.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете"));
	ЭтапыЗакрытияМесяца.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам"));
	ЭтапыЗакрытияМесяца.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииЗакрытияМесяца.РасчетКурсовыхРазниц"));
	ЭтапыЗакрытияМесяца.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата"));

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Организация", Форма.Отчет.Организация);
	СтруктураВозврата.Вставить("НачалоПериода", Форма.Отчет.НачалоПериода);
	СтруктураВозврата.Вставить("КонецПериода", Форма.Отчет.КонецПериода);
	СтруктураВозврата.Вставить("СписокОрганизаций", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Отчет.Организация));
	СтруктураВозврата.Вставить("ЭтапыЗакрытияМесяца", ЭтапыЗакрытияМесяца);
	СтруктураВозврата.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ЭтоСлужебныйЭлементОтбора(Знач ЭлементОтбора)
	
	Возврат СтрНачинаетсяС(ЭлементОтбора.Представление, "###");

КонецФункции

#КонецОбласти
