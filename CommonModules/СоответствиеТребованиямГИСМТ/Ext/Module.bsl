#Область ПрограммныйИнтерфейс
	
// Проверка документов ВГИСМТ.
// Запуск фонового задания для обновления
Процедура ПроверкаДокументовВГИСМТ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСтатусовДокументовВГИСМТ);
		
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат
	КонецЕсли;
	
	ВыполнитьОтдельныеПроверки();
	
	ОбновитьСтатусыОбработкиДокументовВГИСМТ();
	
КонецПроцедуры

// Проверка документа на соответствие требованиям ГИС МТ.
// 
// Параметры:
//  ПараметрыПроверки - Структура - Параметры проверки:
// * Документ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ
// * УникальныйИдентификатор - УникальныйИдентификатор
// * ЭтоФоноваяПроверкаДокумента - Булево
// * ДополнитьРезультатДаннымиКомандыФормы - Булево
// Возвращаемое значение:
//  Структура - Проверка документа на соответствие требованиям ГИС МТ:
// * ТребуетсяОбновлениеКлючаСессии - Булево - Требуется обновление ключа сессии
// * РезультатПроверки - Неопределено , ХранилищеЗначения - Результат проверки документа
// * Документ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ
// * Организация - Неопределено, ОпределяемыйТип.Организация - Организация
// * Контрагент - Неопределено, ОпределяемыйТип.КонтрагентГосИС - Контрагент
// * АдресВоВременномХранилище - Неопределено, Строка -Адрес во временном хранилище
// * ДлительнаяОперация - Неопределено, Строка -Длительная операция
// * Ожидать - Неопределено, Строка -Длительная операция
Функция ПроверкаДокументаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки) Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат Обработки.ПроверкаДокументовИСМП.ПроверкаДокументаНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки);
	
КонецФункции

// Обработчик события динамического списка для документов, подлежащих проверке в ГИС МТ
// 
// Параметры:
//  Строки - СтрокиДинамическогоСписка
Процедура ПриПолученииДанныхНаСервереДокумента(Строки) Экспорт
	
	ДанныеДокументов = Новый ТаблицаЗначений;
	ДанныеДокументов.Колонки.Добавить("Документ", Метаданные.ОпределяемыеТипы.ПрикладныеДокументыГИСМТ.Тип);
	КолонкиДоступны = Ложь;
	
	Для Каждого Строка Из Строки Цикл
		ДанныеСтроки = Строка.Значение.Данные;
		
		НоваяСтрока = ДанныеДокументов.Добавить();
		НоваяСтрока.Документ = ДанныеСтроки["Ссылка"];
		
		КолонкиДоступны = ДанныеСтроки.Свойство("Ссылка") И ДанныеСтроки.Свойство("СостояниеГИСМТ");
	КонецЦикла;
	
	Если Не КолонкиДоступны Тогда
		Возврат;
	КонецЕсли;

	Представления = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Документ
		|ПОМЕСТИТЬ Т
		|ИЗ
		|	&ДанныеДокументов КАК ДанныеДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыОбработкиДокументовИСМП.Состояние,
		|	РезультатыОбработкиДокументовИСМП.Документ
		|ИЗ
		|	Т КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|		ПО РезультатыОбработкиДокументовИСМП.Документ = Т.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатыОбработкиДокументовИСМП.ДатаСтатуса";
	
	Запрос.УстановитьПараметр("ДанныеДокументов", ДанныеДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Представления.Вставить(ВыборкаДетальныеЗаписи.Документ, ВыборкаДетальныеЗаписи.Состояние);
	КонецЦикла;
	
	Для Каждого Строка Из Строки Цикл
		
		ДанныеСтроки = Строка.Значение.Данные;
		
		ДанныеСтроки["СостояниеГИСМТ"] = Представления.Получить(ДанныеСтроки["Ссылка"]);
		
	КонецЦикла;
	
КонецПроцедуры

// Результат проверки по массиву документов.
// 
// Параметры:
//  МассивДокументов - Массив из ОпределяемыйТип.ПрикладныеДокументыГИСМТ - массив документов
//  МассивИдентификаторов - Неопределено, Массив из Строка - массив идентификаторов
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - результаты проверки по массиву документов:
//  * Ключ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ
//  * Значение - см. ПустойРезультатПроверки
Функция РезультатПроверкиПоМассивуДокументов(МассивДокументов, МассивИдентификаторов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыОбработкиДокументовИСМП.Статус                                       КАК Статус,
		|	РезультатыОбработкиДокументовИСМП.Состояние                                    КАК Состояние,
		|	РезультатыОбработкиДокументовИСМП.Результаты                                   КАК Результаты,
		|	РезультатыОбработкиДокументовИСМП.ХешСуммаДокумента                            КАК ХешСуммаДокумента,
		|	РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи                          КАК ИдентификаторЗаписи,
		|	РезультатыОбработкиДокументовИСМП.СтатусОтправки                               КАК СтатусОтправки,
		|	РезультатыОбработкиДокументовИСМП.ТипДокумента                                 КАК ТипДокумента,
		|	РезультатыОбработкиДокументовИСМП.Идентификатор                                КАК Идентификатор,
		|	ЕСТЬNULL(РезультатыОбработкиДокументовИСМП.ДатаДобавления, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтправкиВГИСМТ,
		|	РезультатыОбработкиДокументовИСМП.Документ                                     КАК Документ,
		|	РезультатыОбработкиДокументовИСМП.Организация                                  КАК Организация,
		|	РезультатыОбработкиДокументовИСМП.ДатаСтатуса                                  КАК ДатаСтатуса,
		|	РезультатыОбработкиДокументовИСМП.Дата                                         КАК Дата,
		|	РезультатыОбработкиДокументовИСМП.Контрагент                                   КАК Контрагент,
		|	РезультатыОбработкиДокументовИСМП.ВыполненаПредварительнаяПроверка             КАК ВыполненаПредварительнаяПроверка,
		|	РезультатыОбработкиДокументовИСМП.ОтправленНаПредварительнуюПроверку           КАК ОтправленНаПредварительнуюПроверку,
		|	РезультатыОбработкиДокументовИСМП.СтатусДокументаВСервисе                      КАК СтатусДокументаВСервисе,
		|	РезультатыОбработкиДокументовИСМП.ДатаДобавления                               КАК ДатаДобавления,
		|	РезультатыОбработкиДокументовИСМП.ПроверкаОтключена                            КАК ПроверкаОтключена
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|ГДЕ
		|	РезультатыОбработкиДокументовИСМП.Документ В (&МассивДокументов)
		|	И &УсловиеИдентификаторЭлектронногоДокумента";
	
	Запрос.УстановитьПараметр("МассивДокументов",      МассивДокументов);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	УсловиеИдентификаторЭлектронногоДокумента = "";
	
	Если ТипЗнч(МассивИдентификаторов) = Тип("Массив") И МассивИдентификаторов.Количество() > 0 Тогда
		УсловиеИдентификаторЭлектронногоДокумента = "И РезультатыОбработкиДокументовИСМП.Идентификатор В (&МассивИдентификаторов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеИдентификаторЭлектронногоДокумента", УсловиеИдентификаторЭлектронногоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РезультатПроверки = Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		ПустойРезультатПроверки = ПустойРезультатПроверки();
		
		ЗаполнитьЗначенияСвойств(ПустойРезультатПроверки, ВыборкаДетальныеЗаписи);
		
		РезультатПроверки.Вставить(ВыборкаДетальныеЗаписи.Документ, ПустойРезультатПроверки);
	
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Состояние команды соответствие требованиям ГИС МТ.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ
//  РезультатПроверкиПоДокументу - Неопределено, см. РезультатПроверкиПоДокументу - результат проверки по документу
// 
// Возвращаемое значение:
//  Структура - Состояние команды соответствие требованиям ГИС МТ:
// * Заголовок - Строка - 
// * Видимость - Булево - 
// * ЦветТекста - Цвет - 
// * ВидКнопкиФормы - Строка - 
// * ОтображениеФигуры - ОтображениеФигурыКнопки - 
// * Статус - Неопределено - 
Функция СостояниеКомандыСоответствиеТребованиямГИСМТ(Документ, РезультатПроверкиПоДокументу = Неопределено) Экспорт

	СостояниеКоманды = Новый Структура;
	СостояниеКоманды.Вставить("Заголовок",         НСтр("ru = 'Ожидается проверка в ГИС МТ'"));
	СостояниеКоманды.Вставить("Видимость",         Ложь);
	СостояниеКоманды.Вставить("ЦветТекста",        ЦветаСтиля.ЦветГиперссылкиГосИС);
	СостояниеКоманды.Вставить("ВидКнопкиФормы",    "ГиперссылкаКоманднойПанели");
	СостояниеКоманды.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Нет);
	СостояниеКоманды.Вставить("Статус",            Неопределено);
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат СостояниеКоманды;
	КонецЕсли;
	
	Если РезультатПроверкиПоДокументу = Неопределено Тогда
		РезультатПроверкиПоДокументу = РезультатПроверкиПоДокументу(Документ);
		
		Если РезультатПроверкиПоДокументу = Неопределено Тогда
			Возврат СостояниеКоманды;
		КонецЕсли;
	КонецЕсли;
	
	ОтображаемыеСтатусы = Новый Массив;
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой);
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением);
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось);
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием);
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.Завершено);
	ОтображаемыеСтатусы.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута);
	
	СостояниеКоманды.Заголовок = РезультатПроверкиПоДокументу.Состояние;
	СостояниеКоманды.Статус    = РезультатПроверкиПоДокументу.Статус;
	СостояниеКоманды.Видимость = ОтображаемыеСтатусы.Найти(РезультатПроверкиПоДокументу.Статус) <> Неопределено
		И ЗначениеЗаполнено(СостояниеКоманды.Заголовок);
	
	Если РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой
		Или РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута Тогда
		СостояниеКоманды.ЦветТекста = ЦветаСтиля.ЦветТекстаПроблемаГосИС;
	ИначеЕсли РезультатПроверкиПоДокументу.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.Завершено Тогда
		СостояниеКоманды.ЦветТекста     = ЦветаСтиля.ЦветТекстаПоложительногоЗначения;
		СостояниеКоманды.ВидКнопкиФормы = "ОбычнаяКнопка";
	КонецЕсли;
	
	Возврат СостояниеКоманды;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализировать параметры обработки.
// 
// Параметры:
//  Документ - Произвольный - Документ
//  Параметры - Структура - Параметры:
// * РезультатПроверкиПоДокументу - Произвольный, Структура - :
// см. ПустойРезультатПроверки
// 
// Возвращаемое значение:
//  Структура - Инициализировать параметры обработки:
// * ТребуетсяОбновлениеКлючаСессии - Булево - 
// * Документ - Произвольный - 
// * РеквизитыДокумента - Неопределено, Структура - :
// ** Дата - Дата
// ** Организация - ОпределяемыйТип.Организация
// ** Контрагент - ОпределяемыйТип.КонтрагентГосИС
// ** ОрганизацияИНН - Строка - 
// ** КонтрагентИНН - Строка - 
// * Организация - ОпределяемыйТип.Организация
// * НастройкиОбменаЭД - Структура, Произвольный - :
// ** Формировать - Булево
// ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовГИСМТ
// ** Формат - Строка
// * Статус - Неопределено - 
// * СписокОперацийГИСМТ - Неопределено - 
// * ПараметрыСканирования - Структура - :
// ** ДопустимыеВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС
// ** ОтборПоВидуПродукции - Булево - 
// ** КэшМаркируемойПродукции - Неопределено - 
// ** СоздаватьШтрихкодУпаковки - Булево - 
// ** ДокументОснование - Неопределено - 
// ** ВозможнаЗагрузкаТСД - Булево - 
// ** ТолькоМаркируемаяПродукция - Булево - 
// ** КэшированныеЗначения - Неопределено - 
// ** АдресДанныхДокументаОснования - Неопределено - 
// ** ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево - 
// ** ДанныеВыбораПоМаркируемойПродукции - Неопределено - 
// ** ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - 
// ** ДополнительныеВариантыСопоставленияНоменклатуры - Неопределено - 
// ** ДополнительныеПараметры - Структура - 
// ** ОперацияКонтроляАкцизныхМарок - Строка - 
// ** ПараметрыУказанияСерий - Неопределено - 
// ** Склад - Неопределено - 
// ** ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - 
// ** ИмяКолонкиШтрихкодУпаковки - Строка - 
// ** КонтрольРасхожденийСДокументомОснованием - Булево - 
// ** РазрешенаОбработкаБезУказанияМарки - Булево - 
// ** РазрешеноЗапрашиватьКодМаркировки - Булево - 
// ** СопоставлятьНоменклатуру - Булево - 
// ** Организация - Неопределено - 
// ** ДоступнаПечатьЭтикеток - Булево - 
// ** ДопустимыйСпособВводаВОборот - Неопределено - 
// ** ИдентификаторФормы - Неопределено - 
// ** Владелец - Неопределено - 
// ** ПроверятьДублиКодовМаркировки - Строка - 
// ** ДанныеТаблицыТовары - Неопределено - 
// ** СсылкаНаОбъект - Неопределено - 
// ** КонтрольУникальностиКодовМаркировки - Булево - 
// ** РазрешенаОбработкаКодовСПустойНоменклатурой - Булево - 
// ** ДетализацияСтруктурыХранения - Неопределено - 
// ** ПоддерживаютсяОперацииАгрегации - Булево - 
// ** КонтрольПустыхУпаковок - Булево - 
// ** РазрешенаОбработкаНеНайденныхЛогистическихУпаковок - Булево - 
// ** КонтролироватьСоставАгрегатов - Булево - 
// ** ВыводитьСообщенияОбОшибках - Булево - 
// ** ПроверятьАлфавитКодовМаркировки - Булево - 
// ** КонтролироватьСтандартнуюВложенность - Булево - 
// ** ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД - Булево - 
// ** ПроверятьСтруктуруКодовМаркировки - Булево - 
// ** ЗапрашиватьКоличествоМерногоТовара - Булево - 
// ** СозданиеНаборов - Булево - 
// ** ПодсистемаИСМПСуществует - Булево - 
// ** РасширеннаяВерсияГосИС - Булево - 
// ** РежимБРМК - Булево - 
// ** ЭтоМаркировкаТоваровИСМП - Булево - 
// * ДанныеШтрихкодов - Структура - :
// ** ДанныеШтрихкодовДокумента - ТаблицаЗначений - :
// *** Штрихкод - Строка - 
// *** ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - 
// *** ОшибкаРазбора - Булево - 
// *** ОтсутствуетВСервисе - Булево - 
// *** ОшибкаСтатуса - Булево - 
// *** ВСеройЗоне - Булево - 
// *** ОписаниеОшибки - Строка - 
// *** ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - 
// *** ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - 
// *** ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - 
// *** ДанныеРазбора - Строка
// *** ПримечаниеКРезультатуРазбора - Строка
// *** СоставКодаМаркировки - Строка
// *** ВидыПродукцииКодаМаркировки -  ПеречислениеСсылка.ВидыПродукцииИС
// *** ДанныеСервиса - Строка
// *** ХешСуммаНормализации - Строка
// *** НормализованныйШтрихкод - Строка
// ** СтрокиСРазобраннымиШтрихкодами - Массив из Строка
// ** ВидыПродукцииВДокументе - Массив из ПеречислениеСсылка.ВидыПродукцииИС
// * ИдентификаторыПроверок - Структура - :
// ** НаличиеРегистрацииОрганизацииВГИСМТ - Строка - 
// ** НаличиеРегистрацииКонтрагентаВГИСМТ - Строка - 
// ** НаличиеИдентификатораЭДОЛайтУОрганизации - Строка - 
// ** НаличиеИдентификатораЭДОЛайтУКонтрагента - Строка - 
// ** ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО - Строка - 
// ** НаличиеТоварныхГруппУКонтрагента - Строка - 
// ** НаличиеТоварныхГруппУОрганизации - Строка - 
// ** НаличиеОшибокВКодахМаркировки - Строка - 
// ** ЛимитВремениОбработкиДокументаГИСМТ - Строка - 
// ** ПрочаяПроверкаГИСМТ - Строка - 
// * РезультатыПроверок - Структура из КлючИЗначение:
//    * Ключ - Строка
//    * Значение - Строка
// * СтатусОтправки - Неопределено - 
// * Идентификатор - Строка
// * ДатаОтправкиВГИСМТ - Дата
// * ВыполненаПредварительнаяПроверка - Булево
// * ОтправленНаПредварительнуюПроверку - Булево
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовГИСМТ
// * СтатусЭДО - Неопределено, Строка - 
Функция ИнициализироватьПараметрыОбработки(Документ, Параметры) Экспорт
	РеквизитыДокумента = Неопределено;
	СтатусЭДО = Неопределено;
	
	РезультатПроверкиПоДокументу = Параметры.РезультатПроверкиПоДокументу;
	
	Параметры.Свойство("РеквизитыДокумента", РеквизитыДокумента);
	Параметры.Свойство("РеквизитыДокумента", СтатусЭДО);
	
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = РеквизитыДокумента(Документ);
	КонецЕсли;
	
	Если СтатусЭДО = Неопределено Тогда
		ВозможенЭДО = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип.СодержитТип(ТипЗнч(Документ));
		СтатусЭДО = "";
		Если ВозможенЭДО Тогда
			СтатусДокументооборота = ОбменСКонтрагентами.СтатусДокументооборота(Документ);
			СтатусЭДО              = СтатусДокументооборота.Статус;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканирования(Документ);
	
	ДанныеШтрихкодов = ПолучитьИРазобратьШтрихкодыДокумента(Документ, ПараметрыСканирования);

	НастройкиОбменаЭД = ОбменСКонтрагентами.НастройкиОтправки(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ))[Документ];
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТребуетсяОбновлениеКлючаСессии",     Ложь);
	ПараметрыОбработки.Вставить("Документ",                           Документ);
	ПараметрыОбработки.Вставить("РеквизитыДокумента",                 РеквизитыДокумента);
	ПараметрыОбработки.Вставить("Организация",                        РеквизитыДокумента.Организация);
	ПараметрыОбработки.Вставить("НастройкиОбменаЭД",                  НастройкиОбменаЭД);
	ПараметрыОбработки.Вставить("Статус",                             Неопределено);
	ПараметрыОбработки.Вставить("СписокОперацийГИСМТ",                Неопределено); // Список операций, связанных с обработкой исходного документа
	ПараметрыОбработки.Вставить("ПараметрыСканирования",              ПараметрыСканирования);
	ПараметрыОбработки.Вставить("ДанныеШтрихкодов",                   ДанныеШтрихкодов);
	ПараметрыОбработки.Вставить("ИдентификаторыПроверок",             ИдентификаторыПроверок());
	ПараметрыОбработки.Вставить("РезультатыПроверок",                 Новый Соответствие);
	ПараметрыОбработки.Вставить("СтатусОтправки",                     Неопределено);
	ПараметрыОбработки.Вставить("Идентификатор",                      РезультатПроверкиПоДокументу.Идентификатор);
	ПараметрыОбработки.Вставить("ДатаОтправкиВГИСМТ",                 РезультатПроверкиПоДокументу.ДатаОтправкиВГИСМТ);
	ПараметрыОбработки.Вставить("ВыполненаПредварительнаяПроверка",   РезультатПроверкиПоДокументу.ВыполненаПредварительнаяПроверка);
	ПараметрыОбработки.Вставить("ОтправленНаПредварительнуюПроверку", РезультатПроверкиПоДокументу.ОтправленНаПредварительнуюПроверку);
	ПараметрыОбработки.Вставить("ТипДокумента",                       РезультатПроверкиПоДокументу.ТипДокумента);
	ПараметрыОбработки.Вставить("СтатусЭДО",                          СтатусЭДО);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОбработки;
	
КонецФункции

Функция ПолучитьИРазобратьШтрихкодыДокумента(Документ, ПараметрыСканирования) Экспорт
	
	ДанныеШтрихкодовДокумента = Новый ТаблицаЗначений;
	ДанныеШтрихкодовДокумента.Колонки.Добавить("Штрихкод",            Новый ОписаниеТипов("Строка"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ШтрихкодУпаковки",    Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ОшибкаРазбора",       Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ОтсутствуетВСервисе", Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ОшибкаСтатуса",       Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ВСеройЗоне",          Новый ОписаниеТипов("Булево"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ОписаниеОшибки",      Новый ОписаниеТипов("Строка"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ВидПродукции",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ВидУпаковки",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ТипШтрихкода",        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ДанныеРазбора");
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ПримечаниеКРезультатуРазбора");
	ДанныеШтрихкодовДокумента.Колонки.Добавить("СоставКодаМаркировки");
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ВидыПродукцииКодаМаркировки");
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ДанныеСервиса");
	ДанныеШтрихкодовДокумента.Колонки.Добавить("ХешСуммаНормализации");
	ДанныеШтрихкодовДокумента.Колонки.Добавить("НормализованныйШтрихкод");
	
	СтрокиСРазобраннымиШтрихкодами = Новый Массив;
	
	ШтрихкодыУпаковокПоДокументу = ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(Документ, ПараметрыСканирования);
	
	ДанныеШтрихкодов = Новый Структура;
	ДанныеШтрихкодов.Вставить("ДанныеШтрихкодовДокумента",      ДанныеШтрихкодовДокумента);
	ДанныеШтрихкодов.Вставить("СтрокиСРазобраннымиШтрихкодами", СтрокиСРазобраннымиШтрихкодами);
	ДанныеШтрихкодов.Вставить("ВидыПродукцииВДокументе",        Новый Массив);
	ДанныеШтрихкодов.Вставить("СтрокиСоСтатусами",              Новый Массив);
	
	Если ШтрихкодыУпаковокПоДокументу.Количество() = 0 Тогда
		Возврат ДанныеШтрихкодов;
	КонецЕсли;
	
	ТаблицаМаркируемойПродукции = ЭлектронноеВзаимодействиеИСМП.ТаблицаМаркируемойПродукцииДокумента(Документ,
		ПараметрыСканирования.ДопустимыеВидыПродукции);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка"));
	
	ДанныеШтрихкодов.ВидыПродукцииВДокументе = ИнтеграцияИСМП.ВидыПродукцииПоТаблицеНоменклатуры(ТаблицаМаркируемойПродукции);
	
	Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковокПоДокументу Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода = ДанныеШтрихкодовДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СтрокаТаблицы);
		
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			ДанныеШтрихкода.Штрихкод,
			ПараметрыСканирования.ДопустимыеВидыПродукции,
			ДанныеШтрихкода.ПримечаниеКРезультатуРазбора);
		
		Если ДанныеРазбора = Неопределено Тогда
			
			ДанныеШтрихкода.ОшибкаРазбора  = Истина;
			ДанныеШтрихкода.ОписаниеОшибки = ДанныеШтрихкода.ПримечаниеКРезультатуРазбора.ТекстОшибки;
			
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода.ДанныеРазбора               = ДанныеРазбора;
		ДанныеШтрихкода.ВидыПродукцииКодаМаркировки = ДанныеРазбора.ВидыПродукции;
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, ДанныеРазбора);
		Если ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
			ДанныеШтрихкода.ВидПродукции = ДанныеРазбора.ВидыПродукции[0];
		КонецЕсли;
		
		СтрокиСРазобраннымиШтрихкодами.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Возврат ДанныеШтрихкодов;
	
КонецФункции

Функция ОшибкиНедоступныеДляПовторнойОтправкиДокумента() Экспорт
	
	СписокОшибок = Новый Соответствие;
	СписокОшибок.Вставить(4,   "Проверка отсутствия регистрации УД (Документ не может быть повторно обработан");
	СписокОшибок.Вставить(46,  "Проверка имени файла и титулов УД (Имя или структура документа некорректны)");
	СписокОшибок.Вставить(54,  "Проверка заполненной даты исправления (Дата Исправления УПД(и) имеет пустое значение или имеет неверный формат)");
	СписокОшибок.Вставить(69,  "Проверка кода итога приёмки товаров (работ, услуг, прав). Поле «КодИтога» Титула Покупателя (если указан) заполнено некорректным значением");
	СписокОшибок.Вставить(71,  "Проверка наличия сведений о маркированных товарах в УД. Проверка валидности УД (В документе нет сведений о кодах идентификации маркированного товара)");
	СписокОшибок.Вставить(72,  "Проверка по типу документа (Некорректный тип документа)");
	СписокОшибок.Вставить(76,  "Проверка ID документа (Документ с не найден)");
	СписокОшибок.Вставить(79,  "Коды идентификации имеют длину менее 18 символов либо содержат недопустимые символы");
	СписокОшибок.Вставить(102, "Документ содержит КИ разных товарных групп");
	СписокОшибок.Вставить(103, "Документ не содержит Кодов Маркировки");
	СписокОшибок.Вставить(146, "Код маркировки уже отгружен/продан");
	
	Возврат СписокОшибок;
	
КонецФункции

Процедура ОтправитьДокументНаПовторнуюОбработку(ПараметрыОбработки) Экспорт
	
	РезультатОтправки = ИнтерфейсИСМП.ОтправитьДокументНаПовторнуюОбработку(ПараметрыОбработки.Организация, ПараметрыОбработки.Идентификатор);
	Если ЗначениеЗаполнено(РезультатОтправки.КодОшибки)
		Или ЗначениеЗаполнено(РезультатОтправки.ТекстОшибки) Тогда
		ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.Ошибка;
	Иначе
		ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ;
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТИзФоновогоЗадания(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	Обработки.ПроверкаДокументовИСМП.РезультатПроверкиДокументаНаСоответствиеТребованиямГИСМТИзФоновогоЗадания(ПараметрыФоновогоЗадания, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьРегистрТоварныеГруппыДокументаГИСМТ(Организации = Неопределено) Экспорт
	
	// Требуется для формирования очереди из опрашиваемых документов
	
	ВидыПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РезультатыОбработкиДокументовИСМП.Документ            КАК Документ,
		|	РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи КАК ИдентификаторЗаписи
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеГруппыДокументаГИСМТ КАК ТоварныеГруппыДокументаГИСМТ
		|		ПО РезультатыОбработкиДокументовИСМП.Документ = ТоварныеГруппыДокументаГИСМТ.Документ
		|			И РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи = ТоварныеГруппыДокументаГИСМТ.ИдентификаторЗаписи
		|ГДЕ
		|	(ТоварныеГруппыДокументаГИСМТ.Документ ЕСТЬ NULL 
		|		ИЛИ ТоварныеГруппыДокументаГИСМТ.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка))
		|	И &Условие
		|ИТОГИ ПО
		|	Документ";
	
	Если ЗначениеЗаполнено(Организации) Тогда
		Запрос.УстановитьПараметр("Организация", Организации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "РезультатыОбработкиДокументовИСМП.Организация В(&Организация)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ИСТИНА");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументу.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыПродукцииВДокументе = Новый Массив;
		
		Товары = ЭлектронноеВзаимодействиеИСМП.ТаблицаМаркируемойПродукцииДокумента(ВыборкаПоДокументу.Документ, ВидыПродукции);
		
		Если Товары.Количество() > 0 Тогда
			
			Товары.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
			
			ВидыПродукцииВДокументе = ИнтеграцияИСМП.ВидыПродукцииПоТаблицеНоменклатуры(Товары);
			
		КонецЕсли;
		
		Если ВидыПродукцииВДокументе.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаПоДокументу.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ТоварныеГруппыДокумента = Новый Структура;
			ТоварныеГруппыДокумента.Вставить("Документ",            ВыборкаПоДокументу.Документ);
			ТоварныеГруппыДокумента.Вставить("ИдентификаторЗаписи", ВыборкаДетальныеЗаписи.ИдентификаторЗаписи);
			ТоварныеГруппыДокумента.Вставить("ТоварныеГруппы",      ВидыПродукцииВДокументе);
			
			ЗафиксироватьТоварныеГруппыДокументаГИСМТ(ТоварныеГруппыДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализацияДанныхПоРезультатамОбработкиДокументов() Экспорт
	
	ДанныеДокументов = Новый ТаблицаЗначений;
	ДанныеДокументов.Колонки.Добавить("Документ",            Метаданные.ОпределяемыеТипы.ПрикладныеДокументыГИСМТ.Тип);
	ДанныеДокументов.Колонки.Добавить("ИдентификаторЗаписи", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ДанныеДокументов.Колонки.Добавить("Организация",         Метаданные.ОпределяемыеТипы.Организация.Тип);
	ДанныеДокументов.Колонки.Добавить("Статус",              Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиДокументовИСМП"));
	ДанныеДокументов.Колонки.Добавить("Результаты",          Новый ОписаниеТипов("ХранилищеЗначения"));
	ДанныеДокументов.Колонки.Добавить("Состояние",           ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеДокументов.Колонки.Добавить("ДатаСтатуса",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеДокументов.Колонки.Добавить("ХешСуммаДокумента",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеДокументов.Колонки.Добавить("ТипДокумента",        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовГИСМТ"));
	ДанныеДокументов.Колонки.Добавить("СтатусОтправки",      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтправкиГИСМТ"));
	ДанныеДокументов.Колонки.Добавить("Идентификатор",       ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция СостояниеФоновойПроверкиДокумента(ИдентификаторЗадания, АдресРезультата) Экспорт
	
	ФоновоеЗадание = Новый Структура;
	ФоновоеЗадание.Вставить("Статус",              "Выполняется");
	ФоновоеЗадание.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	ФоновоеЗадание.Вставить("АдресРезультата",      АдресРезультата);
	ФоновоеЗадание.Вставить("КраткоеПредставлениеОшибки",   "");
	ФоновоеЗадание.Вставить("ПодробноеПредставлениеОшибки", "");
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
		ФоновоеЗадание.Статус = "Ошибка";
		ФоновоеЗадание.КраткоеПредставлениеОшибки   = ОбработкаОшибок.КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		ФоновоеЗадание.ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		Возврат ФоновоеЗадание;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат ФоновоеЗадание;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
		Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ФоновоеЗадание.Статус = "Ошибка";
		ФоновоеЗадание.КраткоеПредставлениеОшибки   = Строка(Задание.Состояние);
		ФоновоеЗадание.ПодробноеПредставлениеОшибки = Строка(Задание.Состояние);
		Возврат ФоновоеЗадание;
	КонецЕсли;
	
	ФоновоеЗадание.Статус = "Выполнено";
	Возврат ФоновоеЗадание;
	
КонецФункции

Процедура ПрерватьФоновуюПроверкуДокумента(ИдентификаторЗадания) Экспорт
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Задание.Отменить();
	КонецЕсли;
	
КонецПроцедуры

Функция ФоноваяПроверкаДокументовГИСМТРазрешена() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьФоновуюПроверкуДокументовГИСМТ");
КонецФункции

// Результат проверки по документу.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ - Документ
//  ИдентификаторЭлектронногоДокумента - Неопределено - Идентификатор электронного документа
// 
// Возвращаемое значение:
//  см. ПустойРезультатПроверки
Функция РезультатПроверкиПоДокументу(Документ, ИдентификаторЭлектронногоДокумента = Неопределено) Экспорт
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	Если ЗначениеЗаполнено(ИдентификаторЭлектронногоДокумента) Тогда
		МассивИдентификатор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторЭлектронногоДокумента);
	КонецЕсли;
	РезультатПроверки = РезультатПроверкиПоМассивуДокументов(МассивДокументов, МассивИдентификатор);
	
	Возврат РезультатПроверки[Документ];
	
КонецФункции

Функция ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(ДанныеДляЗаписи, ПроверитьХэш = Ложь, Дополнить = Ложь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеДляЗаписи);
	
	Если ПроверитьХэш Тогда
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			Если МенеджерЗаписи.ХешСуммаДокумента = ДанныеДляЗаписи.ХешСуммаДокумента Тогда
				
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеДляЗаписи);
				МенеджерЗаписи.ДатаСтатуса = ТекущаяДатаСеанса();
				
				МенеджерЗаписи.Записать();
				
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Дополнить Тогда
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеДляЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.ДатаСтатуса = ТекущаяДатаСеанса();
	
	МенеджерЗаписи.Записать();
	
	Возврат Истина;
	
КонецФункции

Процедура ЗафиксироватьТоварныеГруппыДокументаГИСМТ(ДанныеДляЗаписи) Экспорт
	
	НаборЗаписей = РегистрыСведений.ТоварныеГруппыДокументаГИСМТ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДанныеДляЗаписи.Документ);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ДанныеДляЗаписи.ИдентификаторЗаписи);
	Для Каждого ВидПродукции Из ДанныеДляЗаписи.ТоварныеГруппы Цикл
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		Запись.Документ            = ДанныеДляЗаписи.Документ;
		Запись.ИдентификаторЗаписи = ДанныеДляЗаписи.ИдентификаторЗаписи;
		Запись.ВидПродукции        = ВидПродукции;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция РеквизитыДокумента(Документ) Экспорт
	
	РеквизитыДокумента = Новый Структура("Дата, Организация, Контрагент");
	
	СоответствиеТребованиямГИСМТПереопределяемый.ПриОпределенииРеквизитовДокумента(Документ, РеквизитыДокумента);
	
	ИННКПППоОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(РеквизитыДокумента.Организация);
	РеквизитыДокумента.Вставить("ОрганизацияИНН", ИННКПППоОрганизации.ИНН);
	
	РеквизитыДокумента.Вставить("КонтрагентИНН", "");

	Если ЗначениеЗаполнено(РеквизитыДокумента.Контрагент) Тогда
		МассивКонтрагент = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДокумента.Контрагент);
		СоответствиеИННКонтрагентам = ИнтеграцияИСМП.ИНННалоговыйНомерКонтрагентов(МассивКонтрагент);
		
		РеквизитыДокумента.КонтрагентИНН = СоответствиеИННКонтрагентам[РеквизитыДокумента.Контрагент];
	КонецЕсли;
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Функция ВозможныеПроблемыОбмена() Экспорт
	
	Идентификаторы = Новый Структура;
	Идентификаторы.Вставить("ОтправленныеДокументыСОшибками",             "ОтправленныеДокументыСОшибками");
	Идентификаторы.Вставить("ПробитыеЧекиККТСОшибками",                   "ПробитыеЧекиККТСОшибками");
	Идентификаторы.Вставить("ОтправленныеДокументыОтсутствующиеВЛКГИСМТ", "ОтправленныеДокументыОтсутствующиеВЛКГИСМТ");
	Идентификаторы.Вставить("ПробитыеЧекиККТОтсутствующиеВЛКГИСМТ",       "ПробитыеЧекиККТОтсутствующиеВЛКГИСМТ");
	Идентификаторы.Вставить("НеОтправленныеДокументыСОшибкми",            "НеОтправленныеДокументыСОшибкми");
	
	Приоритет = Новый Массив;
	Приоритет.Добавить(Идентификаторы.ОтправленныеДокументыСОшибками);
	Приоритет.Добавить(Идентификаторы.ПробитыеЧекиККТСОшибками);
	Приоритет.Добавить(Идентификаторы.ОтправленныеДокументыОтсутствующиеВЛКГИСМТ);
	Приоритет.Добавить(Идентификаторы.ПробитыеЧекиККТОтсутствующиеВЛКГИСМТ);
	Приоритет.Добавить(Идентификаторы.НеОтправленныеДокументыСОшибкми);
	
	Представления = Новый Соответствие();
	
	Представления.Вставить(Идентификаторы.ОтправленныеДокументыСОшибками,
		НСтр("ru = 'Есть электронные документы, обработанные в ЛК ГИС МТ с ошибками (%1)'"));
	
	Представления.Вставить(Идентификаторы.ПробитыеЧекиККТСОшибками,
		НСтр("ru = 'Есть пробитые чеки ККТ, обработанные в ЛК ГИС МТ с ошибками (%1)'"));
	
	Представления.Вставить(Идентификаторы.ОтправленныеДокументыОтсутствующиеВЛКГИСМТ,
		НСтр("ru = 'Есть электронные документы, отсутствующие в ЛК ГИС МТ (%1)'"));
	
	Представления.Вставить(Идентификаторы.ПробитыеЧекиККТОтсутствующиеВЛКГИСМТ,
		НСтр("ru = 'Есть пробитые чеки ККТ, отсутствующие в ЛК ГИС МТ (%1)'"));
	
	Представления.Вставить(Идентификаторы.НеОтправленныеДокументыСОшибкми,
		НСтр("ru = 'Есть неотправленные или неподписанные покупателем электронные документы с ошибками (%1)'"));
	
	Возврат Новый Структура("Идентификаторы, Приоритет, Представления",
		Идентификаторы, Приоритет, Представления)
	
КонецФункции

Функция ЛимитВремениОбработкиДокумента() Экспорт
	
	Лимит = 60*60*24;

	Возврат Лимит;
	
КонецФункции

// Пустой результат проверки.
// 
// Возвращаемое значение:
//  Структура - Пустой результат проверки:
// * Документ 
// * Дата 
// * ДатаСтатуса 
// * ДатаОтправкиВГИСМТ 
// * Организация 
// * Контрагент 
// * Статус 
// * СтатусОтправки 
// * ТипДокумента 
// * Состояние 
// * Результаты 
// * ХешСуммаДокумента 
// * Идентификатор 
// * ИдентификаторЗаписи 
// * ВыполненаПредварительнаяПроверка 
// * ОтправленНаПредварительнуюПроверку 
// * СтатусДокументаВСервисе 
// * СписокОпераций 
// * ДатаДобавления 
// * ПроверкаОтключена 
Функция ПустойРезультатПроверки()
	
	РезультатПроверкиПоДокументу = Новый Структура;
	РезультатПроверкиПоДокументу.Вставить("Документ");
	РезультатПроверкиПоДокументу.Вставить("Дата");
	РезультатПроверкиПоДокументу.Вставить("ДатаСтатуса");
	РезультатПроверкиПоДокументу.Вставить("ДатаОтправкиВГИСМТ");
	РезультатПроверкиПоДокументу.Вставить("Организация");
	РезультатПроверкиПоДокументу.Вставить("Контрагент");
	РезультатПроверкиПоДокументу.Вставить("Статус");
	РезультатПроверкиПоДокументу.Вставить("СтатусОтправки");
	РезультатПроверкиПоДокументу.Вставить("ТипДокумента");
	РезультатПроверкиПоДокументу.Вставить("Состояние");
	РезультатПроверкиПоДокументу.Вставить("Результаты");
	РезультатПроверкиПоДокументу.Вставить("ХешСуммаДокумента");
	РезультатПроверкиПоДокументу.Вставить("Идентификатор");
	РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи");
	РезультатПроверкиПоДокументу.Вставить("ВыполненаПредварительнаяПроверка");
	РезультатПроверкиПоДокументу.Вставить("ОтправленНаПредварительнуюПроверку");
	РезультатПроверкиПоДокументу.Вставить("СтатусДокументаВСервисе");
	РезультатПроверкиПоДокументу.Вставить("СписокОпераций");
	РезультатПроверкиПоДокументу.Вставить("ДатаДобавления");
	РезультатПроверкиПоДокументу.Вставить("ПроверкаОтключена");
	
	Возврат РезультатПроверкиПоДокументу;
	
КонецФункции

Функция ПараметрыСканирования(Документ)
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	ДанныеШапки = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(Документ);
	ДанныеШапки.Вставить("ПроверкаГИСМТ");
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки);
	
	ДопустимыеВидыПродукции = ОбщегоНазначенияИСКлиентСервер.ПересечениеМассивов(ПараметрыСканирования.ДопустимыеВидыПродукции, ВидыПродукцииИСМП);
	
	ПараметрыСканирования.ДопустимыеВидыПродукции = ДопустимыеВидыПродукции;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

Функция ДокументСодержитМаркируемуюПродукцию(Документ, ПараметрыСканирования)
	
	ТаблицаМаркируемойПродукции = ЭлектронноеВзаимодействиеИСМП.ТаблицаМаркируемойПродукцииДокумента(Документ,
		ПараметрыСканирования.ДопустимыеВидыПродукции);
	
	Возврат ТаблицаМаркируемойПродукции.Количество() > 0;
	
КонецФункции

Процедура УдалитьИзРегистраДляОтслеживанияСоответствияТребованиямГИСМТ(МассивДокументов, ИдентификаторЭлектронногоДокумента = "")
	
	МассивРезультатов = РезультатПроверкиПоМассивуДокументов(МассивДокументов);
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		СуществующийРезультат = МассивРезультатов[Документ];
			
		УдалитьЗапись = СуществующийРезультат <> Неопределено
			И (ИдентификаторЭлектронногоДокумента = ""
			Или (ИдентификаторЭлектронногоДокумента <> "" И СуществующийРезультат.Идентификатор = ИдентификаторЭлектронногоДокумента));
			
		Если УдалитьЗапись Тогда
			МенеджерЗаписи = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Документ            = Документ;
			МенеджерЗаписи.ИдентификаторЗаписи = СуществующийРезультат.ИдентификаторЗаписи;
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВРегистрДляОтслеживанияСоответствияТребованиямГИСМТ(Знач МассивДокументов)
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	МассивНеподходящихТиповДокументов = Новый Массив;
	Для Каждого Документ Из МассивДокументов Цикл
		ТипыДокументов = Метаданные.РегистрыСведений.РезультатыОбработкиДокументовИСМП.Измерения.Документ.Тип;
		Если Не ТипыДокументов.СодержитТип(ТипЗнч(Документ)) Тогда
			МассивНеподходящихТиповДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из МассивНеподходящихТиповДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивДокументов, ЭлементКоллекции);
	КонецЦикла;
	
	СоответствиеИдентификаторовЭДО = СоответствиеСтатусовЭДО(МассивДокументов);
	МассивИдентификаторов = Новый Массив;
	Для Каждого Строка Из СоответствиеИдентификаторовЭДО Цикл
		Если ЗначениеЗаполнено(Строка.Значение.ИдентификаторЭлектронногоДокумента) Тогда
			МассивИдентификаторов.Добавить(Строка.Значение.ИдентификаторЭлектронногоДокумента);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеРезультатов = РезультатПроверкиПоМассивуДокументов(МассивДокументов, МассивИдентификаторов);
	
	Для Каждого Документ Из МассивДокументов Цикл
	
		СуществующийРезультат = СоответствиеРезультатов[Документ];
		ТекущийСтатусЭДО = СоответствиеИдентификаторовЭДО[Документ];
		
		СтатусЭДО                          = ТекущийСтатусЭДО.СтатусЭДО;
		ЭлектронныйДокумент                = ТекущийСтатусЭДО.ЭлектронныйДокумент;
		ИдентификаторЭлектронногоДокумента = ТекущийСтатусЭДО.ИдентификаторЭлектронногоДокумента;
		
		ТипДокумента = Неопределено;
		СоответствиеТребованиямГИСМТПереопределяемый.ПриОпределенииТипаДокументаГИСМТ(Документ, ТипДокумента);
		
		ПараметрыСканирования = ПараметрыСканирования(Документ);
		ДокументСодержитМаркируемуюПродукцию = ДокументСодержитМаркируемуюПродукцию(Документ, ПараметрыСканирования);
		
		Если Не ДокументСодержитМаркируемуюПродукцию Тогда
			
			Если СуществующийРезультат <> Неопределено Тогда
				МенеджерЗаписи = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
				//@skip-check wrong-type-expression
				МенеджерЗаписи.Документ            = Документ;
				МенеджерЗаписи.ИдентификаторЗаписи = СуществующийРезультат.ИдентификаторЗаписи;
				МенеджерЗаписи.Удалить();
				
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ШтрихкодыУпаковокПоДокументу = ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(Документ, ПараметрыСканирования);
		
		РеквизитыДокумента = РеквизитыДокумента(Документ);
		
		СтрокиДляРассчетаХешСуммыДокумента = Новый Массив;
		СтрокиДляРассчетаХешСуммыДокумента.Добавить(РеквизитыДокумента.ОрганизацияИНН);
		СтрокиДляРассчетаХешСуммыДокумента.Добавить(РеквизитыДокумента.КонтрагентИНН);
		Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковокПоДокументу Цикл
			СтрокиДляРассчетаХешСуммыДокумента.Добавить(СтрокаТаблицы.Штрихкод);
		КонецЦикла;
		
		ХешСуммаДокумента = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрСоединить(СтрокиДляРассчетаХешСуммыДокумента));
		
		Если СуществующийРезультат = Неопределено
			Или СуществующийРезультат.ХешСуммаДокумента <> ХешСуммаДокумента Тогда
			
			ТекстСостояния = НСтр("ru = 'Ожидается проверка в ГИС МТ'");
			
			Если СтатусЭДО = "Утвержден" Тогда
				СостояниеОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ;
				Статус            = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
			Иначе
				СостояниеОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен;
				Статус            = Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось;
			КонецЕсли;
			
			Если СуществующийРезультат = Неопределено Тогда
				
				ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор());
				
			Иначе
				
				Если ЗначениеЗаполнено(СуществующийРезультат.Идентификатор) И СуществующийРезультат.Идентификатор <> ИдентификаторЭлектронногоДокумента Тогда
					ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор());
				Иначе
					ИдентификаторЗаписи = СуществующийРезультат.ИдентификаторЗаписи;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Дата")
			Иначе
				Дата = РеквизитыДокумента.Дата;
			КонецЕсли;
			
			Если Дата < ДатаНачалаОтслеживанияСтатуса() Тогда
				Возврат;
			КонецЕсли;
			
			РезультатПроверкиПоДокументу = Новый Структура;
			РезультатПроверкиПоДокументу.Вставить("Документ",            Документ);
			РезультатПроверкиПоДокументу.Вставить("Дата",                Дата);
			РезультатПроверкиПоДокументу.Вставить("Организация",         РеквизитыДокумента.Организация);
			РезультатПроверкиПоДокументу.Вставить("Контрагент",          РеквизитыДокумента.Контрагент);
			РезультатПроверкиПоДокументу.Вставить("Статус",              Статус);
			РезультатПроверкиПоДокументу.Вставить("СтатусОтправки",      СостояниеОтправки);
			РезультатПроверкиПоДокументу.Вставить("ТипДокумента",        ТипДокумента);
			РезультатПроверкиПоДокументу.Вставить("Состояние",           ТекстСостояния);
			РезультатПроверкиПоДокументу.Вставить("Результаты",          Неопределено);
			РезультатПроверкиПоДокументу.Вставить("ХешСуммаДокумента",   ХешСуммаДокумента);
			РезультатПроверкиПоДокументу.Вставить("Идентификатор",       ИдентификаторЭлектронногоДокумента);
			РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи);
			
			Если СтатусЭДО = "Утвержден" Тогда
				
				РезультатПроверкиПоДокументу.Вставить("ДатаДобавления", ТекущаяДатаСеанса());
				
			КонецЕсли;
			
			ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(РезультатПроверкиПоДокументу);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
Функция СоответствиеСтатусовЭДО(МассивДокументов)
	
	СоответствиеСтатусовЭДО = Новый Соответствие;
	
	Для Каждого Документ Из МассивДокументов Цикл
		СтатусЭДО = "";
		ЭлектронныйДокумент = Неопределено;
		ИдентификаторЭлектронногоДокумента = "";
		
		ДоступенСтатусЭДО = ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов().ПривестиЗначение(Документ) = Документ;
		
		Если ДоступенСтатусЭДО Тогда
			СтатусДокументооборота = ОбменСКонтрагентами.СтатусДокументооборота(Документ);
			
			СтатусЭДО           = СтатусДокументооборота.Статус;
			ЭлектронныйДокумент = СтатусДокументооборота.ЭлектронныйДокумент;
			
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				СведенияОбЭлектронномДокументе = ОбменСКонтрагентами.СведенияОбЭлектронномДокументе(ЭлектронныйДокумент);
				ИдентификаторЭлектронногоДокумента = СведенияОбЭлектронномДокументе.Сообщения.ДанныеОтправителя.ИмяФайлаБезРасширения;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураСостоянияЭДО = Новый Структура;
		СтруктураСостоянияЭДО.Вставить("СтатусЭДО",                          СтатусЭДО);
		СтруктураСостоянияЭДО.Вставить("ЭлектронныйДокумент",                ЭлектронныйДокумент);
		СтруктураСостоянияЭДО.Вставить("ИдентификаторЭлектронногоДокумента", ИдентификаторЭлектронногоДокумента);
		
		СоответствиеСтатусовЭДО.Вставить(Документ, СтруктураСостоянияЭДО);
	КонецЦикла;
	
	Возврат СоответствиеСтатусовЭДО;
	
КонецФункции

Функция ИдентификаторыПроверок() Экспорт
	
	ИдентификаторыПроверок = Новый Структура;
	
	ИдентификаторыПроверок.Вставить("НаличиеРегистрацииОрганизацииВГИСМТ", "НаличиеРегистрацииОрганизацииВГИСМТ");
	ИдентификаторыПроверок.Вставить("НаличиеРегистрацииКонтрагентаВГИСМТ", "НаличиеРегистрацииКонтрагентаВГИСМТ");
	
	ИдентификаторыПроверок.Вставить("НаличиеИдентификатораЭДОЛайтУОрганизации", "НаличиеИдентификатораЭДОЛайтУОрганизации");
	ИдентификаторыПроверок.Вставить("НаличиеИдентификатораЭДОЛайтУКонтрагента", "НаличиеИдентификатораЭДОЛайтУКонтрагента");
	
	ИдентификаторыПроверок.Вставить("ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО", "ПроверкаФорматаЭлектронногоДокументаВНастройкахЭДО");
	
	ИдентификаторыПроверок.Вставить("НаличиеТоварныхГруппУКонтрагента", "НаличиеТоварныхГруппУКонтрагента");
	ИдентификаторыПроверок.Вставить("НаличиеТоварныхГруппУОрганизации", "НаличиеТоварныхГруппУОрганизации");
	
	ИдентификаторыПроверок.Вставить("НаличиеОшибокВКодахМаркировки", "НаличиеОшибокВКодахМаркировки");
	
	ИдентификаторыПроверок.Вставить("ЛимитВремениОбработкиДокументаГИСМТ", "ЛимитВремениОбработкиДокументаГИСМТ");
	ИдентификаторыПроверок.Вставить("ПрочаяПроверкаГИСМТ", "ПрочаяПроверкаГИСМТ");
	
	Возврат ИдентификаторыПроверок;
	
КонецФункции

Функция ДатаНачалаОтслеживанияСтатуса()
	
	Возврат Дата(2023, 8, 1);
	
КонецФункции

Функция ПустаяТаблицаДанныеДокументовГИСМТ()
	
	ДанныеДокументовГИСМТ = Новый ТаблицаЗначений;
	ДанныеДокументовГИСМТ.Колонки.Добавить("ИдентификаторЭлектронногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ДанныеДокументовГИСМТ.Колонки.Добавить("ТипДокумента",                       Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовГИСМТ"));
	ДанныеДокументовГИСМТ.Колонки.Добавить("СтатусДокументаВСервисе",            Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДокументовИСМП"));
	
	Возврат ДанныеДокументовГИСМТ;
	
КонецФункции

#Область СобытияФормИСМП

Функция ПараметрыИнтеграции()
	
	ПараметрыИнтеграции = Новый Структура;
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",                "Объект");
	ПараметрыИнтеграции.Вставить("РазмещатьЭлементыИнтерфейса",            Ложь);
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",             "ГруппаСостояниеЭДО");
	ПараметрыИнтеграции.Вставить("Группировка",                            "Горизонтальная");
	ПараметрыИнтеграции.Вставить("ИмяКомандыСоответствиеТребованиямГИСМТ", "СоответствиеТребованиямГИСМТГосИС");
	ПараметрыИнтеграции.Вставить("ЗапуститьПроверкуДокументаВФоне",        Ложь);
	ПараметрыИнтеграции.Вставить("ИнтервалОбработкиОжидания",              1);
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	ПараметрыИнтеграцииФормыПроверки = ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма);
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграцииФормыПроверки.ИмяКомандыСоответствиеТребованиямГИСМТ) Тогда
		
		ПараметрыИнтеграции.Вставить("СоответствиеТребованиямГИСМТ", ПараметрыИнтеграцииФормыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура МодификацияЭлементовФормы(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить("СоответствиеТребованиямГИСМТ");
	
	Если Настройки = Неопределено Тогда
		Возврат;
	ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОтображениеСостоянияСоответствияТребованиямГИСМТ(Форма, Настройки);
	
КонецПроцедуры

Процедура ДобавитьОтображениеСостоянияСоответствияТребованиямГИСМТ(Форма, ПараметрыИнтеграции)
	
	ЭлементыФормы = Форма.Элементы;
	
	ИмяКоманды = ПараметрыИнтеграции.ИмяКомандыСоответствиеТребованиямГИСМТ;
	
	Если Форма.Команды.Найти(ИмяКоманды) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяРодительскойГруппыФормы) Тогда
		Родитель = ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы];
		
		Родитель.Группировка   = ГруппировкаПодчиненныхЭлементовФормы[ПараметрыИнтеграции.Группировка];
	КонецЕсли;
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = "СоответствиеТребованиямГИСМТ";
	
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Родитель);
	Кнопка.ИмяКоманды             = ИмяКоманды;
	Кнопка.Вид                    = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
	Кнопка.ЦветТекста             = ЦветаСтиля.ЦветГиперссылкиГосИС;
	Кнопка.ОтображениеФигуры      = ОтображениеФигурыКнопки.Нет;
	Кнопка.Отображение            = ОтображениеКнопки.Текст;
	Кнопка.ОтображениеПодсказки   = ОтображениеПодсказки.ОтображатьСправа;
	Кнопка.АвтоМаксимальнаяШирина = Ложь;
	
	Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	Кнопка.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Проверить на соответствие требованиям ГИС МТ'");
	
КонецПроцедуры

Функция ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма = Неопределено) Экспорт
	
	ПараметрыИнтеграции = ПараметрыИнтеграции();
	
	Если Форма <> Неопределено Тогда
		СоответствиеТребованиямГИСМТПереопределяемый.ПриОпределенииПараметровИнтеграции(Форма, ПараметрыИнтеграции);
	КонецЕсли;
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Процедура УправлениеВидимостьюЭлеменовСоответствияТребованиямГИСМТ(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("СоответствиеТребованиямГИСМТ");
	Если (ПараметрыИнтеграции = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	КомандаФормы = Форма.Элементы[ПараметрыИнтеграции.ИмяКомандыСоответствиеТребованиямГИСМТ];
	
	ТекущееСостояниеКомандыФормы = СостояниеКомандыСоответствиеТребованиямГИСМТ(Объект.Ссылка);
	
	ЗаполнитьЗначенияСвойств(КомандаФормы, ТекущееСостояниеКомандыФормы);
	КомандаФормы.Вид = ВидКнопкиФормы[ТекущееСостояниеКомандыФормы.ВидКнопкиФормы];
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	// Запуск проверки документа в фоне
	
	Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить("СоответствиеТребованиямГИСМТ");
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.ЗапуститьПроверкуДокументаВФоне = Ложь;
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ФоноваяПроверкаДокументовГИСМТРазрешена() Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Форма[Настройки.ИмяРеквизитаФормыОбъект].Ссылка;
	
	СуществующийРезультат = РезультатПроверкиПоДокументу(Документ);
	
	Если СуществующийРезультат <> Неопределено
		И СуществующийРезультат.Статус <> Перечисления.СтатусыОбработкиДокументовИСМП.Завершено Тогда
		Настройки.ЗапуститьПроверкуДокументаВФоне = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

Процедура ВыполнитьДействияПриЗаписиФискальныхОпераций(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЗаписьРегистра Из Источник Цикл
		ЗарегистрироватьЗаписьФискальнойОперацииКОтслеживанию(ЗаписьРегистра);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоответствиеТребованиямГИСМТПриЗаписиДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ПометкаУдаления Тогда
		УдалитьИзРегистраДляОтслеживанияСоответствияТребованиямГИСМТ(МассивДокументов);
	Иначе
		ДобавитьВРегистрДляОтслеживанияСоответствияТребованиямГИСМТ(МассивДокументов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеАннулированияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт

	ОбработатьСобытиеСЭлектроннымДокументом(ЭлектронныйДокумент, "ПослеАннулирования");

КонецПроцедуры

Процедура ПослеИзмененияОтраженияВУчете(ЭлектронныйДокумент, ДобавленныеОбъектыУчета, УдаленныеОбъектыУчета) Экспорт

	Если ДобавленныеОбъектыУчета.Количество() > 0 Тогда
		ДобавитьВРегистрДляОтслеживанияСоответствияТребованиямГИСМТ(ДобавленныеОбъектыУчета);
	КонецЕсли;
		
	Если УдаленныеОбъектыУчета.Количество() > 0 Тогда
		УдалитьИзРегистраДляОтслеживанияСоответствияТребованиямГИСМТ(УдаленныеОбъектыУчета);
	КонецЕсли;

КонецПроцедуры

// Событие возникает после успешного завершения электронного документооборота.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
Процедура ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент) Экспорт
	
	ОбработатьСобытиеСЭлектроннымДокументом(ЭлектронныйДокумент, "ПослеЗавершенияОбмена");
	
КонецПроцедуры

Процедура ОбработатьСобытиеСЭлектроннымДокументом(ЭлектронныйДокумент, Событие)
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбЭлектронномДокументе = ОбменСКонтрагентами.СведенияОбЭлектронномДокументе(ЭлектронныйДокумент);
	
	ТипыДокументов = Метаданные.РегистрыСведений.РезультатыОбработкиДокументовИСМП.Измерения.Документ.Тип;
	
	МассивДокументов = Новый Массив;
	
	Для Каждого Документ Из СведенияОбЭлектронномДокументе.ОбъектыУчета Цикл
		Если ЗначениеЗаполнено(Документ) И ТипыДокументов.СодержитТип(ТипЗнч(Документ)) Тогда
			МассивДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Событие = "ПослеАннулирования" Тогда
		
		ИдентификаторЭлектронногоДокумента = СведенияОбЭлектронномДокументе.Сообщения.ДанныеОтправителя.ИмяФайлаБезРасширения;
		
		УдалитьИзРегистраДляОтслеживанияСоответствияТребованиямГИСМТ(МассивДокументов, ИдентификаторЭлектронногоДокумента);
	
	ИначеЕсли Событие = "ПослеЗавершенияОбмена" Тогда
		
		ПослеЗавершенияОбмена(МассивДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗавершенияОбмена(МассивДокументов)
		
	МассивРезультатов = РезультатПроверкиПоМассивуДокументов(МассивДокументов);
		
	Для Каждого Документ Из МассивДокументов Цикл
		
		СуществующийРезультат = МассивРезультатов[Документ];
		Если СуществующийРезультат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуществующийРезультат.ДатаСтатуса    = ТекущаяДатаСеанса();
		СуществующийРезультат.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
		СуществующийРезультат.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ;
		СуществующийРезультат.Состояние      = ТекстСостоянияДокумента(СуществующийРезультат);
		СуществующийРезультат.ДатаДобавления = ТекущаяДатаСеанса();
		ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(СуществующийРезультат,,Истина);
	КонецЦикла;
	
КонецПроцедуры

// Событие возникает после успешного завершения электронного документооборота.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - ссылка на электронный документ.
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ссылка на электронный документ.
//
Процедура ПослеФормированияЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбЭлектронномДокументе = ОбменСКонтрагентами.СведенияОбЭлектронномДокументе(ЭлектронныйДокумент);
	
	Если Не СведенияОбЭлектронномДокументе.СодержитМаркируемыеТовары Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДокументов = Метаданные.РегистрыСведений.РезультатыОбработкиДокументовИСМП.Измерения.Документ.Тип;
	
	ДокументыОснования = Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("Документ", ТипыДокументов);
	
	Для Каждого Документ Из СведенияОбЭлектронномДокументе.ОбъектыУчета Цикл
		Если ЗначениеЗаполнено(Документ) И ТипыДокументов.СодержитТип(ТипЗнч(Документ)) Тогда
			ДокументыОснования.Добавить().Документ = Документ;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭлектронногоДокумента = СведенияОбЭлектронномДокументе.Сообщения.ДанныеОтправителя.ИмяФайлаБезРасширения;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Документ КАК Документ
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	&ДокументыНаПроверку КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	|	ВТ_Документы.Документ                                 КАК Документ,
	|	РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|		ПО ВТ_Документы.Документ = РезультатыОбработкиДокументовИСМП.Документ
	|		И РезультатыОбработкиДокументовИСМП.Идентификатор <> &ИдентификаторЭлектронногоДокумента
	|";
	
	Запрос.УстановитьПараметр("ИдентификаторЭлектронногоДокумента", ИдентификаторЭлектронногоДокумента);
	Запрос.УстановитьПараметр("ДокументыНаПроверку",                ДокументыОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		РеквизитыДокумента = РеквизитыДокумента(Выборка.Документ);
		
		Если ПустаяСтрока(Выборка.ИдентификаторЗаписи) Тогда
			
			ХешСуммаДокумента = ХешСуммаДокумента(Выборка.Документ, ЭлектронныйДокумент, РеквизитыДокумента);
			
			ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПД;
			
			ТекстСостояния = НСтр("ru = 'Ожидается проверка в ГИС МТ'");
			
			СостояниеОтправки   = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ;
			Статус              = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
			ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор());
			
			РезультатПроверкиПоДокументу = Новый Структура;
			РезультатПроверкиПоДокументу.Вставить("Документ",            Выборка.Документ);
			РезультатПроверкиПоДокументу.Вставить("Дата",                РеквизитыДокумента.Дата);
			РезультатПроверкиПоДокументу.Вставить("Организация",         РеквизитыДокумента.Организация);
			РезультатПроверкиПоДокументу.Вставить("Контрагент",          РеквизитыДокумента.Контрагент);
			РезультатПроверкиПоДокументу.Вставить("Статус",              Статус);
			РезультатПроверкиПоДокументу.Вставить("СтатусОтправки",      СостояниеОтправки);
			РезультатПроверкиПоДокументу.Вставить("ТипДокумента",        ТипДокумента);
			РезультатПроверкиПоДокументу.Вставить("Состояние",           ТекстСостояния);
			РезультатПроверкиПоДокументу.Вставить("Результаты",          Неопределено);
			РезультатПроверкиПоДокументу.Вставить("ХешСуммаДокумента",   ХешСуммаДокумента);
			РезультатПроверкиПоДокументу.Вставить("Идентификатор",       ИдентификаторЭлектронногоДокумента);
			РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи);
			
			ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(РезультатПроверкиПоДокументу);
			
		Иначе
			
			Если Не СведенияОбЭлектронномДокументе.СодержитМаркируемыеТовары Тогда
				
				МенеджерЗаписи = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Документ            = Выборка.Документ;
				МенеджерЗаписи.ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
				МенеджерЗаписи.Удалить();
				
				Возврат;
			КонецЕсли;

			ТекстСостояния      = НСтр("ru = 'Ожидается проверка УПД в ГИС МТ'");
			СостояниеОтправки   = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен;
			Статус              = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
			
			РезультатПроверкиПоДокументу = Новый Структура;
			РезультатПроверкиПоДокументу.Вставить("Документ",            Выборка.Документ);
			РезультатПроверкиПоДокументу.Вставить("Организация",         РеквизитыДокумента.Организация);
			РезультатПроверкиПоДокументу.Вставить("Статус",              Статус);
			РезультатПроверкиПоДокументу.Вставить("СтатусОтправки",      СостояниеОтправки);
			РезультатПроверкиПоДокументу.Вставить("Состояние",           ТекстСостояния);
			РезультатПроверкиПоДокументу.Вставить("Результаты",          Неопределено);
			РезультатПроверкиПоДокументу.Вставить("Идентификатор",       ИдентификаторЭлектронногоДокумента);
			РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи", Выборка.ИдентификаторЗаписи);
				
			МенеджерЗаписи = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, РезультатПроверкиПоДокументу);
			МенеджерЗаписи.Прочитать();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, РезультатПроверкиПоДокументу);
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ХешСуммаДокумента(Документ, ЭлектронныйДокумент = Неопределено, РеквизитыДокумента = Неопределено, ПараметрыСканирования = Неопределено)
	
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = РеквизитыДокумента(Документ);
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Документ);
	КонецЕсли;
	
	ШтрихкодыУпаковокПоДокументу = ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(Документ, ПараметрыСканирования);
	
	ШтрихкодыУпаковокПоДокументу.Сортировать("Штрихкод");
	
	СтрокиДляРассчетаХешСуммыДокумента = Новый Массив;
	СтрокиДляРассчетаХешСуммыДокумента.Добавить(РеквизитыДокумента.ОрганизацияИНН);
	СтрокиДляРассчетаХешСуммыДокумента.Добавить(РеквизитыДокумента.КонтрагентИНН);
	Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковокПоДокументу Цикл
		СтрокиДляРассчетаХешСуммыДокумента.Добавить(СтрокаТаблицы.Штрихкод);
	КонецЦикла;
	
	ХешСуммаДокумента = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрСоединить(СтрокиДляРассчетаХешСуммыДокумента));
	
	Возврат ХешСуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ВыполнитьОтдельныеПроверки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыОбработкиДокументовИСМП.Документ
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|ГДЕ
		|	РезультатыОбработкиДокументовИСМП.СтатусОтправки = &СтатусОтправки
		|	И РезультатыОбработкиДокументовИСМП.Статус = &Статус
		|	И НЕ РезультатыОбработкиДокументовИСМП.ОтправленНаПредварительнуюПроверку
		|	И НЕ РезультатыОбработкиДокументовИСМП.ВыполненаПредварительнаяПроверка
		|	И РезультатыОбработкиДокументовИСМП.Идентификатор = """"";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось);
	Запрос.УстановитьПараметр("СтатусОтправки", Перечисления.СтатусОтправкиГИСМТ.НеОтправлен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДокументыДляПроверки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ДокументыДляПроверки.Добавить(Выборка.Документ);
	КонецЦикла;
	
	РезультатыПроверки = РезультатПроверкиПоМассивуДокументов(ДокументыДляПроверки);
	
	Для Каждого КлючИначение Из РезультатыПроверки Цикл
		
		Документ = КлючИначение.Ключ;
		
		СуществующийРезультат = РезультатыПроверки[Документ];
		Если СуществующийРезультат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("РезультатПроверкиПоДокументу", СуществующийРезультат);
		
		ПараметрыОбработки = ИнициализироватьПараметрыОбработки(Документ, Параметры);
		ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(Документ);
		
		Если ЭтоДокументПриобретения Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработки.Статус         = СуществующийРезультат.Статус;
		ПараметрыОбработки.СтатусОтправки = СуществующийРезультат.СтатусОтправки;
		
		Обработки.ПроверкаДокументовИСМП.ВыполнитьОтдельныеПроверкиПродавцаИПокупателя(ПараметрыОбработки,
			ЭтоДокументПриобретения);
		
		ИтоговыйРезультат = Обработки.ПроверкаДокументовИСМП.СформироватьИтоговыйРезультатПоИтогамОтдельныхПроверок(
			ПараметрыОбработки);
		
		РезультатПроверкиПоДокументу = Новый Структура;
		РезультатПроверкиПоДокументу.Вставить("Документ",                           СуществующийРезультат.Документ);
		РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи",                СуществующийРезультат.ИдентификаторЗаписи);
		РезультатПроверкиПоДокументу.Вставить("Статус",                             ИтоговыйРезультат.Статус);
		РезультатПроверкиПоДокументу.Вставить("Результаты",                         Новый ХранилищеЗначения(ИтоговыйРезультат.Результаты));
		РезультатПроверкиПоДокументу.Вставить("Состояние",                          ИтоговыйРезультат.Состояние);
		РезультатПроверкиПоДокументу.Вставить("СтатусОтправки",                     СуществующийРезультат.СтатусОтправки);
		РезультатПроверкиПоДокументу.Вставить("ВыполненаПредварительнаяПроверка",   СуществующийРезультат.ВыполненаПредварительнаяПроверка);
		РезультатПроверкиПоДокументу.Вставить("ОтправленНаПредварительнуюПроверку", СуществующийРезультат.ОтправленНаПредварительнуюПроверку);
		
		Если Не ЗначениеЗаполнено(РезультатПроверкиПоДокументу.Состояние) Тогда
			РезультатПроверкиПоДокументу.Состояние = ТекстСостоянияДокумента(РезультатПроверкиПоДокументу);
		КонецЕсли;
		
		ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(РезультатПроверкиПоДокументу,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусыОбработкиДокументовВГИСМТ(ПоЧекам = Ложь) Экспорт
	
	Если Не ПоЧекам Тогда
		ПредварительнаяПроверкаУПД();
	КонецЕсли;
	
	ПараметрыОбмена = ИнициализироватьПараметрыОбмена(ПоЧекам);
	
	ДанныеДляОпросаСервисаГИСМТ = СформироватьОчередьЗапросовКСервису(ПараметрыОбмена);
	
	ДанныеДокументовГИСМТ = ПустаяТаблицаДанныеДокументовГИСМТ();
	ДанныеДокументовГИСМТ.Колонки.Добавить("РезультатСохранен", Новый ОписаниеТипов("Булево"));
	
	ПараметрыТочечнойЗагрузки = Новый Массив;
	
	Для Каждого ДанныеПоОрганизации Из ДанныеДляОпросаСервисаГИСМТ.Данные Цикл
		
		КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
			ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ДанныеПоОрганизации.Организация));
			
		ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
		Если ТребуетсяОбновлениеКлючаСессии = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеПоВидуПродукции Из ДанныеПоОрганизации.Данные Цикл
			
			Если ТребуетсяОбновлениеКлючаСессии = Неопределено Тогда
				Прервать;
			КонецЕсли;
		
			Для Каждого ДанныеПоТипуДокумента Из ДанныеПоВидуПродукции.Данные Цикл
				
				Если ТребуетсяОбновлениеКлючаСессии = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Для Каждого СтрокаИнтервала Из ДанныеПоТипуДокумента.ТаблицаИнтервалов Цикл
					
					ПараметрыЗагрузки = Новый Структура;
					ПараметрыЗагрузки.Вставить("Организация",               ДанныеПоОрганизации.Организация);
					ПараметрыЗагрузки.Вставить("ВидПродукции",              ДанныеПоВидуПродукции.ВидПродукции);
					ПараметрыЗагрузки.Вставить("НачалоПериода",             СтрокаИнтервала.ДатаНачала);
					ПараметрыЗагрузки.Вставить("КонецПериода",              СтрокаИнтервала.ДатаОкончания);
					ПараметрыЗагрузки.Вставить("ТипыЭлектронныхДокументов", ДанныеПоТипуДокумента.ТипыДокументов);
					ПараметрыЗагрузки.Вставить("ТипЗапроса",                ПараметрыОбмена.ТипЗапроса);
					
					Если СтрокаИнтервала.ЭтоЗапросСписком Тогда
					
						РезультатЗапроса = СтатусОбработкиДокументовВГИСМТСписком(ПараметрыЗагрузки);
						
						Если Не ПустаяСтрока(РезультатЗапроса.ТекстОшибки) Тогда
							
							СтрокаРезультата = Новый Структура("Организация, ТекстОшибки");
							СтрокаРезультата.Организация = ДанныеПоОрганизации.Организация;
							СтрокаРезультата.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
							
							ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
							
							Продолжить;
							
						КонецЕсли;
						
						Для Каждого СтрокаЗапросСервиса Из РезультатЗапроса.Данные Цикл
							ЗаполнитьЗначенияСвойств(ДанныеДокументовГИСМТ.Добавить(), СтрокаЗапросСервиса);
						КонецЦикла;
						
					Иначе
						
						ПараметрыТочечнойЗагрузки.Добавить(ПараметрыЗагрузки);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбработатьТочечнуюЗагрузкуСтатусовИзСервиса(ПараметрыТочечнойЗагрузки, ДанныеДляОпросаСервисаГИСМТ, ДанныеДокументовГИСМТ);
	
	ОбновитьСтатусыДокументовПоДаннымИзСервиса(ПараметрыОбмена, ДанныеДокументовГИСМТ);
	
	ОбработатьПолучениеОшибок(ПараметрыОбмена);
	
КонецПроцедуры

Процедура ОбработатьПолучениеОшибок(ПараметрыОбмена)
	
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.КЗапросуОшибокЭлементыОчереди Цикл
		СтатусОбработкиДокумента = Обработки.ПроверкаДокументовИСМП.СтатусОбработкиУниверсальногоДокументаПоИдентификатору(
			ЭлементОчереди.Организация, ЭлементОчереди.ИдентификаторЭлектронногоДокумента);
		
		РезультатПроверкиПоДокументу = Новый Структура;
		РезультатПроверкиПоДокументу.Вставить("Документ",                ЭлементОчереди.Документ);
		РезультатПроверкиПоДокументу.Вставить("Организация",             ЭлементОчереди.Организация);
		РезультатПроверкиПоДокументу.Вставить("Идентификатор",           ЭлементОчереди.ИдентификаторЭлектронногоДокумента);
		РезультатПроверкиПоДокументу.Вставить("ИдентификаторЗаписи",     ЭлементОчереди.ИдентификаторЗаписи);
		РезультатПроверкиПоДокументу.Вставить("СтатусДокументаВСервисе", ЭлементОчереди.СтатусДокументаВСервисе);
		РезультатПроверкиПоДокументу.Вставить("СписокОперацийГИСМТ",     СтатусОбработкиДокумента.СписокОпераций);
		
		РезультатПроверкиПоДокументу.Вставить("РеквизитыДокумента",      РеквизитыДокумента(ЭлементОчереди.Документ));
		РезультатПроверкиПоДокументу.Вставить("ИдентификаторыПроверок",  ИдентификаторыПроверок());
		РезультатПроверкиПоДокументу.Вставить("РезультатыПроверок",      Неопределено);
		ИтоговыйРезультат = Обработки.ПроверкаДокументовИСМП.ОшибкиКвитанции(РезультатПроверкиПоДокументу);
		
		РезультатПроверкиПоДокументу.Вставить("Статус",     ИтоговыйРезультат.Статус);
		РезультатПроверкиПоДокументу.Вставить("Результаты", Новый ХранилищеЗначения(ИтоговыйРезультат.Результаты));
		РезультатПроверкиПоДокументу.Вставить("Состояние",  ИтоговыйРезультат.Состояние);
		
		ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(РезультатПроверкиПоДокументу,,Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПредварительнаяПроверкаУПД()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыОбработкиДокументовИСМП.Документ                           КАК Документ,
		|	РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи                КАК ИдентификаторЗаписи,
		|	РезультатыОбработкиДокументовИСМП.Организация                        КАК Организация,
		|	РезультатыОбработкиДокументовИСМП.Статус                             КАК Статус,
		|	РезультатыОбработкиДокументовИСМП.Результаты                         КАК Результаты,
		|	РезультатыОбработкиДокументовИСМП.Состояние                          КАК Состояние,
		|	РезультатыОбработкиДокументовИСМП.ДатаСтатуса                        КАК ДатаСтатуса,
		|	РезультатыОбработкиДокументовИСМП.ХешСуммаДокумента                  КАК ХешСуммаДокумента,
		|	РезультатыОбработкиДокументовИСМП.ТипДокумента                       КАК ТипДокумента,
		|	РезультатыОбработкиДокументовИСМП.СтатусОтправки                     КАК СтатусОтправки,
		|	РезультатыОбработкиДокументовИСМП.Идентификатор                      КАК Идентификатор,
		|	РезультатыОбработкиДокументовИСМП.Дата                               КАК Дата,
		|	РезультатыОбработкиДокументовИСМП.Контрагент                         КАК Контрагент,
		|	РезультатыОбработкиДокументовИСМП.СтатусДокументаВСервисе            КАК СтатусДокументаВСервисе,
		|	РезультатыОбработкиДокументовИСМП.ДатаДобавления                     КАК ДатаДобавления,
		|	РезультатыОбработкиДокументовИСМП.ВыполненаПредварительнаяПроверка   КАК ВыполненаПредварительнаяПроверка,
		|	РезультатыОбработкиДокументовИСМП.ОтправленНаПредварительнуюПроверку КАК ОтправленНаПредварительнуюПроверку
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|ГДЕ
		|	РезультатыОбработкиДокументовИСМП.Идентификатор <> """"
		|	И РезультатыОбработкиДокументовИСМП.ТипДокумента В (&ТипУПД)
		|	И НЕ РезультатыОбработкиДокументовИСМП.ВыполненаПредварительнаяПроверка";
	
	ТипУПД = Новый Массив;
	ТипУПД.Добавить(Перечисления.ТипыДокументовГИСМТ.УПД);
	ТипУПД.Добавить(Перечисления.ТипыДокументовГИСМТ.УПДИсправительный);
	
	Запрос.УстановитьПараметр("ТипУПД", ТипУПД);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыПроверки = ПустойРезультатПроверки();
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроверки, ВыборкаДетальныеЗаписи);
		
		ПараметрыПроверки.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
		Если ПараметрыПроверки.ОтправленНаПредварительнуюПроверку Тогда
			ЗагрузитьРезультатПредварительнойПроверки(ПараметрыПроверки);
		Иначе
			ПредварительнаяПроверкаУПДПоДокументу(ПараметрыПроверки);
		КонецЕсли;
		
		Если ПараметрыПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыПроверки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой Тогда
			ПараметрыПроверки.Состояние = ТекстСостоянияДокумента(ПараметрыПроверки);
		КонецЕсли;
		
		ЗафиксироватьРезультатПроверкиНаСоответствиеТребованиямГИСМТ(ПараметрыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПредварительнойПроверки(ПараметрыПроверки)
	РеквизитыДокумента = РеквизитыДокумента(ПараметрыПроверки.Документ);
	ПараметрыПроверки.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	ЗагрузитьРезультатПредварительнойПроверкиПоДокументу(ПараметрыПроверки);
	
	Если ПараметрыПроверки.Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
		
		ПараметрыПроверки.Вставить("ИдентификаторыПроверок", ИдентификаторыПроверок());
		ИтоговыйРезультат = Обработки.ПроверкаДокументовИСМП.СформироватьИтоговыйРезультатПоИтогамПроверокДокументаВСервисеГИСМТ(
			ПараметрыПроверки);
		ПараметрыПроверки.Вставить("Статус",     ИтоговыйРезультат.Статус);
		ПараметрыПроверки.Вставить("Результаты", Новый ХранилищеЗначения(ИтоговыйРезультат.Результаты));
		ПараметрыПроверки.Вставить("Состояние",  ИтоговыйРезультат.Состояние);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатПредварительнойПроверкиПоДокументу(ПараметрыПроверки) Экспорт
	
	РезультатПроверки = ИнтерфейсИСМП.СтатусПредварительнойПроверкиУПД(ПараметрыПроверки.Организация, ПараметрыПроверки.Идентификатор);
	
	ПараметрыПроверки.ТребуетсяОбновлениеКлючаСессии = РезультатПроверки.ТребуетсяОбновлениеКлючаСессии;
	
	Если ПараметрыПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		ПараметрыПроверки.ВыполненаПредварительнаяПроверка = Истина;
	КонецЕсли;
	
	Если РезультатПроверки.Статус = "VERIFIED" Тогда
		Возврат;
	КонецЕсли;

	Если РезультатПроверки.Статус = "NOT_VALID" Тогда
		ОписаниеПолей = Новый Структура("ЭтоСписокОпераций", Ложь);
		ПараметрыПроверки.Вставить("РезультатыПроверок");
		ПараметрыПроверки.РезультатыПроверок = Обработки.ПроверкаДокументовИСМП.ОшибкиОперацийВыполненныхВСервисеПоДокументу(
			ПараметрыПроверки, РезультатПроверки.Ошибки, ОписаниеПолей);
		ПараметрыПроверки.Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредварительнаяПроверкаУПДПоДокументу(ПараметрыПроверки) Экспорт
	
	ЭлектронныйДокумент = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(ПараметрыПроверки.Документ);
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		ПараметрыПроверки.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ПредварительнаяПроверкаУПДГИСМТ(ПараметрыПроверки);
		
		Если ПараметрыПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПроверки.ТекстОшибки) Тогда // Ошибок нет, проверка выполнена
			
			РезультатыПроверок = Новый Соответствие;
			СостояниеОшибки = "";
			РезультатПроверки = Новый Структура;
			
			ЕстьОшибки = ЗначениеЗаполнено(ПараметрыПроверки.ТекстОшибки);
			Если ЕстьОшибки Тогда
				СостояниеОшибки = "В УПД по данным ГИС МТ найдены ошибки";
			КонецЕсли;
			
			РезультатПроверки.Вставить("ЕстьОшибки", ЕстьОшибки);
			РезультатПроверки.Вставить("ОшибкаСервиса", Ложь);
			РезультатПроверки.Вставить("СостояниеОшибки", СостояниеОшибки);
			РезультатПроверки.Вставить("Данные", ПараметрыПроверки.ТекстОшибки);
			РезультатПроверки.Вставить("ТекстОшибки", ПараметрыПроверки.ТекстОшибки);
			
			РезультатыПроверок.Вставить("ПредварительнаяПроверкаУПД", РезультатПроверки);
			
			ПараметрыПроверки.Вставить("РезультатыПроверок", РезультатыПроверок);
			
			ПараметрыПроверки.Вставить("Статус", Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой);
		Иначе
			ПараметрыПроверки.Вставить("ВыполненаПредварительнаяПроверка",   Ложь);
			ПараметрыПроверки.Вставить("ОтправленНаПредварительнуюПроверку", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредварительнаяПроверкаУПДГИСМТ(ПараметрыПроверки)
	
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ПараметрыПроверки.ЭлектронныйДокумент);
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ОсновнойФайл);
	ДанныеBase64 = ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(ДвоичныеДанныеФайла);
	
	РезультатПроверки = ИнтерфейсИСМП.ПредварительнаяПроверкаУПД(ПараметрыПроверки.Организация, ПараметрыПроверки.Идентификатор, ДанныеBase64);
	
	ПараметрыПроверки.ТребуетсяОбновлениеКлючаСессии = РезультатПроверки.ТребуетсяОбновлениеКлючаСессии;
	
	Если ПараметрыПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ТекстОшибки", "");
	
	Если ЗначениеЗаполнено(РезультатПроверки.ТекстПроверки)
		И СтрНайти(РезультатПроверки.ТекстПроверки, "успешно отправлен") = 0 Тогда
			ПараметрыПроверки.ТекстОшибки = РезультатПроверки.ТекстПроверки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусыДокументовПоДаннымИзСервиса(ПараметрыОбмена, СтатусыДокументовВСервисе)
	
	СостояниеОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ;
	
	Для Каждого СтрокаТаблицы Из СтатусыДокументовВСервисе Цикл
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьДокументов.Найти(
			СтрокаТаблицы.ИдентификаторЭлектронногоДокумента, "ИдентификаторЭлектронногоДокумента");
		
		Если ЭлементОчереди = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусДокументаВСервисе = СтрокаТаблицы.СтатусДокументаВСервисе;
		
		ОбновитьРезультатыОбработкиДокументовИСМП = (ЭлементОчереди.СтатусОтправки <> СостояниеОтправки
			Или ЭлементОчереди.СтатусДокументаВСервисе <> СтатусДокументаВСервисе)
			И Не СтрокаТаблицы.РезультатСохранен;
		
		ЗапроситьСписокОшибок = ОбновитьРезультатыОбработкиДокументовИСМП
			И СтатусДокументаВСервисе = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки;
			
		Если ОбновитьРезультатыОбработкиДокументовИСМП И Не ЗапроситьСписокОшибок Тогда
			
			РезультатОбработкиДокумента = Новый Структура;
			РезультатОбработкиДокумента.Вставить("СтатусДокументаВСервисе", СтатусДокументаВСервисе);
			РезультатОбработкиДокумента.Вставить("СписокОпераций",          Неопределено); // Необходимо загружать отдельно
			
			ЗафиксироватьРезультатОбработкиДокумента(ЭлементОчереди, РезультатОбработкиДокумента);
		КонецЕсли;
		
		СоответствиеТребованиямГИСМТПереопределяемый.ПриПолученииСтатусаДокументаИзОчереди(СтрокаТаблицы);
		
		Если ЗапроситьСписокОшибок Тогда
			ПараметрыОбмена.КЗапросуОшибокЭлементыОчереди.Добавить(ЭлементОчереди);
			ЭлементОчереди.СтатусДокументаВСервисе = СтатусДокументаВСервисе;
		Иначе
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверкаДокументовИСМП = Обработки.ПроверкаДокументовИСМП.Создать();
	
	Для Каждого СтрокаТаблицы Из ПараметрыОбмена.ОчередьДокументов Цикл
		ЭлементОчереди = СтатусыДокументовВСервисе.Найти(
			СтрокаТаблицы.ИдентификаторЭлектронногоДокумента, "ИдентификаторЭлектронногоДокумента");
		Если ЭлементОчереди <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверкаДокументовИСМП.ПроверкаТаймаутаЗагрузкиГИСМТ(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает результат запроса статуса обработки документа в сервисе.
//
// Параметры:
//   ЭлементОчереди              - СтрокаТаблицыЗначений из см. ИнициализироватьОчередьДокументов.
//   РезультатОбработкиДокумента - Структура:
//   * СтатусДокументаВСервисе - ПеречислениеСсылка.СтатусыДокументовИСМП.
//   * СписокОпераций          - ХранилищеЗначения - Список операций, связанных с обработкой исходного документа.
Процедура ЗафиксироватьРезультатОбработкиДокумента(ЭлементОчереди, РезультатОбработкиДокумента) Экспорт
	
	СостояниеОтправки       = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ;
	СтатусДокументаВСервисе = РезультатОбработкиДокумента.СтатусДокументаВСервисе;
	
	ОбновитьРезультатыОбработкиДокументовИСМП = ЭлементОчереди.СтатусОтправки <> СостояниеОтправки
		Или ЭлементОчереди.СтатусДокументаВСервисе <> СтатусДокументаВСервисе;
	
	СтатусОбработкиПрикладногоДокумента = Неопределено;
	Если ОбновитьРезультатыОбработкиДокументовИСМП Тогда
		СтатусОбработкиПрикладногоДокумента = РассчитатьСтатусОбработкиПрикладногоДокумента(СостояниеОтправки, СтатусДокументаВСервисе);
	КонецЕсли;
	
	МенеджерЗаписиОбщий = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
	МенеджерЗаписиОбщий.Документ            = ЭлементОчереди.Документ;
	МенеджерЗаписиОбщий.ИдентификаторЗаписи = ЭлементОчереди.ИдентификаторЗаписи;
	МенеджерЗаписиОбщий.Прочитать();

	Если Не МенеджерЗаписиОбщий.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписиОбщий.СтатусДокументаВСервисе = СтатусДокументаВСервисе;
	МенеджерЗаписиОбщий.СписокОпераций = Новый ХранилищеЗначения(РезультатОбработкиДокумента.СписокОпераций);
	
	Если ОбновитьРезультатыОбработкиДокументовИСМП Тогда
		МенеджерЗаписиОбщий.ДатаСтатуса       = ТекущаяДатаСеанса();
		МенеджерЗаписиОбщий.Статус            = СтатусОбработкиПрикладногоДокумента;
		МенеджерЗаписиОбщий.СтатусОтправки    = СостояниеОтправки;
		МенеджерЗаписиОбщий.Состояние         = ТекстСостоянияДокумента(МенеджерЗаписиОбщий);
	КонецЕсли;
	
	МенеджерЗаписиОбщий.Записать();
	
КонецПроцедуры

Функция РассчитатьСтатусОбработкиПрикладногоДокумента(СостояниеОтправки, СтатусДокументаВСервисе)
	
	Если СостояниеОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ Тогда
		
		Если СтатусДокументаВСервисе = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
			
			Возврат Перечисления.СтатусыОбработкиДокументовИСМП.Завершено;
			
		ИначеЕсли СтатусДокументаВСервисе = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
			
			Возврат Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
			
		ИначеЕсли СтатусДокументаВСервисе = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
			
			Возврат Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный статус обработки документа в сервисе ""%1""'"), СтатусДокументаВСервисе);
			
		КонецЕсли;
		
	ИначеЕсли СостояниеОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ Тогда
		
		Возврат Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием;
		
	ИначеЕсли СостояниеОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен Тогда
		
		Возврат Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеОтправки) Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный статус отправки ""%1""'"), СостояниеОтправки);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Статус отправки не заполнен'");
		
	КонецЕсли;
	
КонецФункции

Функция ТекстСостоянияДокумента(ПараметрыОбработки) Экспорт
	
	Если (ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
		И ПараметрыОбработки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.Завершено)
		Или (ПараметрыОбработки.ВыполненаПредварительнаяПроверка
		И ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен) Тогда
		
		ТекстСостояния = НСтр("ru = 'УПД проверен в ГИС МТ'");
	
	ИначеЕсли ПараметрыОбработки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута Тогда
		
		ТекстСостояния = НСтр("ru = 'Документ не найден в ГИС МТ'");
		
	ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ
		Или (Не ПараметрыОбработки.ВыполненаПредварительнаяПроверка
		И ПараметрыОбработки.ОтправленНаПредварительнуюПроверку 
		И ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен) Тогда
	
		ТекстСостояния = НСтр("ru = 'Ожидается проверка УПД в ГИС МТ'");
	
	ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.НеОтправлен
		И ПараметрыОбработки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОжиданием Тогда
		
		ТекстСостояния = НСтр("ru = 'Проверен в ГИС МТ'");
		
	ИначеЕсли ПараметрыОбработки.Статус = Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСПредупреждением Тогда
		
		ТекстСостояния = НСтр("ru = 'Рекомендации ГИС МТ'");
	
	ИначеЕсли ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ
		И ПараметрыОбработки.СтатусДокументаВСервисе = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
		
		ТекстСостояния = НСтр("ru = 'Обрабатывается в ГИС МТ'");
		
	КонецЕсли;
	
	Возврат ТекстСостояния
	
КонецФункции

// Инициализирует параметры обмена.
//
// Параметры:
//   ПоЧекам                 - Булево
//   Организации             - Неопределено, Массив из ОпределяемыйТип.Организация - Организации.
//   УникальныйИдентификатор - Неопределено, УникальныйИдентификатор - уникальный идентификатор.
//
// Возвращаемое значение:
//   Структура:
//   * Организации                    - Неопределено, Массив из ОпределяемыйТип.Организация - Организации.
//   * ТребуетсяОбновлениеКлючаСессии - Булево.
//   * ОчередьИнтерваловПоСтатистике  - Массив из Структура:
//     ** ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС.
//     ** Данные       - см. РассчитатьИнтервалыЗагрузки.
//   * ОчередьДокументов                  - см. ИнициализироватьОчередьДокументов.
//   * ОбработанныеЭлементыОчереди        - Массив.
//   * КЗапросуОшибокЭлементыОчереди      - Массив.
//   * ОтсутствуютВСервисеЭлементыОчереди - Массив.
//
//   * Изменения                      - Массив.
//   * КОбновлениюКлючейСессии        - Неопределено.
//   * ОжидатьНаСервере               - Булево.
//   * ОжидатьНаКлиенте               - Булево.
//   * ФоновоеЗадание                 - Неопределено.
//   * УникальныйИдентификатор        - Неопределено, УникальныйИдентификатор - уникальный идентификатор.
//   * АдресВоВременномХранилище      - Строка, Неопределено - адрес во временном хранилище.
//   * АдресДанныхЛогаЗапроса         - Строка, Неопределено - адрес во временном хранилище.
//
Функция ИнициализироватьПараметрыОбмена(ПоЧекам, Организации = Неопределено, УникальныйИдентификатор = Неопределено)
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("Организации",                        Организации);
	ПараметрыОбмена.Вставить("ТребуетсяОбновлениеКлючаСессии",     Ложь);
	ПараметрыОбмена.Вставить("ОчередьИнтерваловПоСтатистике",      Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьДокументов",                  ИнициализироватьОчередьДокументов());
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди",        Новый Массив);
	ПараметрыОбмена.Вставить("КЗапросуОшибокЭлементыОчереди",      Новый Массив);
	ПараметрыОбмена.Вставить("ОтсутствуютВСервисеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("СтопЛист",                           Новый Соответствие);
	
	ПараметрыОбмена.Вставить("Изменения",               Новый Массив);
	ПараметрыОбмена.Вставить("КОбновлениюКлючейСессии", Неопределено);
	ПараметрыОбмена.Вставить("ОжидатьНаСервере",        Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте",        Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",          Неопределено);
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор = Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса",    Неопределено);
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса",    ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	КонецЕсли;
		
	Если ПоЧекам Тогда
		ТипыДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыДокументовГИСМТ.ЧекККТ);
		ТипЗапроса = "receipt";
	Иначе
		ТипыДокументов = СоответствиеТребованиямГИСМТКлиентСервер.ТипыЭлектронныхДокументовГИСМТ();
		ТипЗапроса = "doc";
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("ТипЗапроса",     ТипЗапроса);
	ПараметрыОбмена.Вставить("ТипыДокументов", ТипыДокументов);
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Функция ИнициализироватьОчередьДокументов()
	
	ОчередьДокументов = Новый ТаблицаЗначений;
	ОчередьДокументов.Колонки.Добавить("Организация",                        Метаданные.ОпределяемыеТипы.Организация.Тип);
	ОчередьДокументов.Колонки.Добавить("Документ",                           Метаданные.ОпределяемыеТипы.ПрикладныеДокументыГИСМТ.Тип);
	ОчередьДокументов.Колонки.Добавить("ИдентификаторЗаписи",                ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОчередьДокументов.Колонки.Добавить("ИдентификаторЭлектронногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ОчередьДокументов.Колонки.Добавить("СтатусОтправки",                     Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОтправкиГИСМТ"));
	ОчередьДокументов.Колонки.Добавить("СтатусДокументаВСервисе",            Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДокументовИСМП"));
	ОчередьДокументов.Колонки.Добавить("ДатаОтправкиВГИСМТ",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОчередьДокументов.Колонки.Добавить("ВыполненаПредварительнаяПроверка",   Новый ОписаниеТипов("Булево"));
	
	// Индексы
	ОчередьДокументов.Индексы.Добавить("Документ, ИдентификаторЗаписи");
	ОчередьДокументов.Индексы.Добавить("ИдентификаторЭлектронногоДокумента");
	
	Возврат ОчередьДокументов;
	
КонецФункции

// Получает статусы обработки документов в сервисе по отбору.
//
// Параметры:
//   ПараметрыЗагрузки - Структура:
//   * Организация               - ОпределяемыйТип.Организация.
//   * ВидПродукции              - ПеречислениеСсылка.ВидыПродукцииИС.
//   * НачалоПериода             - Дата.
//   * КонецПериода              - Дата.
//   * ТипыЭлектронныхДокументов - Массив из ПеречислениеСсылка.ТипыДокументовГИСМТ.
//
// Возвращаемое значение:
//   Структура:
//   * ТребуетсяОбновлениеКлючаСессии - Булево.
//   * ТекстОшибки                    - Строка.
//   * Данные                         - ТаблицаЗначений:
//     ** ИдентификаторЭлектронногоДокумента - Строка.
//     ** ТипДокумента                       - ПеречислениеСсылка.ТипыДокументовГИСМТ.
//     ** СтатусДокументаВСервисе            - ПеречислениеСсылка.СтатусыДокументовИСМП.
//
Функция СтатусОбработкиДокументовВГИСМТСписком(ПараметрыЗагрузки) Экспорт
	
	ДанныеДокументовГИСМТ = ПустаяТаблицаДанныеДокументовГИСМТ();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("Данные",                         ДанныеДокументовГИСМТ);
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыОтбора.Вставить("Интервал",      Истина);
	ПараметрыОтбора.Вставить("НачалоПериода", ПараметрыЗагрузки.НачалоПериода);
	ПараметрыОтбора.Вставить("КонецПериода",  КонецДня(ПараметрыЗагрузки.КонецПериода));
	
	ТипыЭлектронныхДокументовСтрокой = Новый Массив;
	Для Каждого ТипЭлектронногоДокумента Из ПараметрыЗагрузки.ТипыЭлектронныхДокументов Цикл
		ТипыЭлектронныхДокументовСтрокой.Добавить(ТипЭлектронногоДокумента(ТипЭлектронногоДокумента));
	КонецЦикла;
	ПараметрыОтбора.Вставить("ТипДокумента",      СтрСоединить(ТипыЭлектронныхДокументовСтрокой, ","));
	ПараметрыОтбора.Вставить("КоличествоЗаписей", МаксимальноеКоличествоЭлементовВЗапросеКСпискуДокументов());
	ПараметрыОтбора.Вставить("ТипЗапроса",        ПараметрыЗагрузки.ТипЗапроса);
	
	ПараметрыНавигации = Неопределено;
	
	Пока ПараметрыНавигации = Неопределено
		Или ПараметрыНавигации.КоличествоЗаписейОбработано = ПараметрыОтбора.КоличествоЗаписей Цикл
		
		РезультатЗапроса = СпискаЗагруженныхДокументовПоОтбору(
			ПараметрыЗагрузки.Организация, ПараметрыЗагрузки.ВидПродукции,
			ПараметрыОтбора, ПараметрыНавигации);
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки)
			Или РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии
			Или РезультатЗапроса.НайденныеДокументы = Неопределено Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии;
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапроса.ТекстОшибки;
			
			Прервать;
			
		ИначеЕсли РезультатЗапроса.НайденныеДокументы.Количество() = 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Для Каждого ЭлементМассива Из РезультатЗапроса.НайденныеДокументы Цикл
			
			Если ТипыЭлектронныхДокументовСтрокой.Найти(ЭлементМассива.Тип) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = ДанныеДокументовГИСМТ.Добавить();
			Строка.ИдентификаторЭлектронногоДокумента = ЭлементМассива.Идентификатор;
			Строка.ТипДокумента                       = ТипЭлектронногоДокумента(ЭлементМассива.Тип);
			Строка.СтатусДокументаВСервисе            = ЭлементМассива.Статус;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеДокументовГИСМТ.Свернуть("ИдентификаторЭлектронногоДокумента, ТипДокумента, СтатусДокументаВСервисе");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТипЭлектронногоДокумента(ТипДокумента)
	
	Если ТипЗнч(ТипДокумента) = Тип("Строка") Тогда
		
		Если ТипДокумента = "UNIVERSAL_TRANSFER_DOCUMENT" Тогда
			Возврат Перечисления.ТипыДокументовГИСМТ.УПД;
		ИначеЕсли ТипДокумента = "UNIVERSAL_TRANSFER_DOCUMENT_FIX" Тогда
			Возврат Перечисления.ТипыДокументовГИСМТ.УПДИсправительный;
		ИначеЕсли ТипДокумента = "UNIVERSAL_CORRECTION_DOCUMENT" Тогда
			Возврат Перечисления.ТипыДокументовГИСМТ.УКД;
		ИначеЕсли ТипДокумента = "UNIVERSAL_CORRECTION_DOCUMENT_FIX" Тогда
			Возврат Перечисления.ТипыДокументовГИСМТ.УКДИсправительный;
		ИначеЕсли ТипДокумента = "RECEIPT" Тогда
			Возврат Перечисления.ТипыДокументовГИСМТ.ЧекККТ;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовГИСМТ") Тогда
		
		Если ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПД Тогда
			Возврат "UNIVERSAL_TRANSFER_DOCUMENT";
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УПДИсправительный Тогда
			Возврат "UNIVERSAL_TRANSFER_DOCUMENT_FIX";
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УКД Тогда
			Возврат "UNIVERSAL_CORRECTION_DOCUMENT";
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовГИСМТ.УКДИсправительный Тогда
			Возврат "UNIVERSAL_CORRECTION_DOCUMENT_FIX";
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовГИСМТ.ЧекККТ Тогда
			Возврат "RECEIPT";
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Тип электнонного документа по значению %1 неопределен.'"), ТипДокумента);
	
КонецФункции

Функция СпискаЗагруженныхДокументовПоОтбору(Организация, ВидПродукции, ПараметрыОтбора, ПараметрыНавигации = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НайденныеДокументы",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ПараметрыНавигации",             Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"pg=%1",
			ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппа(ВидПродукции)));
	
	Если ПараметрыОтбора.Свойство("ТипДокумента") Тогда
		
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"documentType=%1",
				ПараметрыОтбора.ТипДокумента));
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ОтправительИНН") Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"senderInn=%1",
				ПараметрыОтбора.ОтправительИНН));
	КонецЕсли;
	Если ПараметрыОтбора.Свойство("ПолучательИНН") Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"receiverInn=%1",
				ПараметрыОтбора.ПолучательИНН));
	КонецЕсли;
	Если ПараметрыОтбора.Свойство("ОтправительИНН") И ПараметрыОтбора.Свойство("ПолучательИНН") Тогда
		ВызватьИсключение НСтр("ru = 'Одновременно оба параметра нельзя указать: senderInn, receiverInn'");
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("СтатусДокумента") Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"documentStatus=%1",
				ПараметрыОтбора.СтатусДокумента));
	КонецЕсли;
	Если ПараметрыОтбора.Свойство("ФорматДокумента") Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"documentFormat=%1",
				ПараметрыОтбора.ФорматДокумента));
	КонецЕсли;

	Если ПараметрыОтбора.Свойство("Идентификатор") Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"number=%1",
				ПараметрыОтбора.Идентификатор));
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Интервал") Тогда
		Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"DateFrom=%1",
					ИнтеграцияИС.ДатаUTC(ПараметрыОтбора.НачалоПериода)));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"DateTo=%1",
					ИнтеграцияИС.ДатаUTC(ПараметрыОтбора.КонецПериода)));
		КонецЕсли;
	КонецЕсли;
	
	// Значение устанавливает количество записей в ответе
	// Не более 10000 записей, по умолчанию 20 записей
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"limit=%1",
			Формат(ПараметрыОтбора.КоличествоЗаписей, "ЧГ=0;")));
	
	Если ПараметрыНавигации <> Неопределено Тогда
		Если ПараметрыНавигации.Направление = "Далее" Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"did=%1",
					ПараметрыНавигации.НомерДокументаПоследний));
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"orderedColumnValue=%1",
					ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее));
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"pageDir=%1",
					"NEXT"));
		ИначеЕсли ПараметрыНавигации.Направление = "Назад" Тогда
			// Значение номера документа, по которому сортируются записи ("точка отсчёта" - запись, с которой начнётся выборка)
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"did=%1",
					ПараметрыНавигации.НомерДокументаПервый));
			// Значение столбца, "точки отсчёта" (запись, с которой начинается выборка), по которому сортируются записи
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"orderedColumnValue=%1",
					ПараметрыНавигации.ЗначениеПоляСортировкиПервое));
			// Выбор направления
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"pageDir=%1",
					"PREV"));
		КонецЕсли;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/%1/list%2",
		ПараметрыОтбора.ТипЗапроса,
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				НайденныеДокументы  = Новый Массив;
				КоличествоЭлементов = ДанныеОбработки["results"].Количество();
				
				ПараметрыНавигации = ИнтерфейсИСМПСлужебный.ИнициализироватьПараметрыНавигацииПоДокументам();
				ПараметрыНавигации.КоличествоЗаписейВсего      = КоличествоЭлементов;
				ПараметрыНавигации.КоличествоЗаписейОбработано = КоличествоЭлементов;
				ВозвращаемоеЗначение.ПараметрыНавигации = ПараметрыНавигации;
				
				Если КоличествоЭлементов > 0 Тогда
					
					Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
						
						Если ПараметрыОтбора.ТипЗапроса = "doc" Тогда
							СтрокаДанных = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиДокумента(
								ЭлементДанных);
						Иначе
							СтрокаДанных = ИнтерфейсИСМПСлужебный.ИнициализироватьДанныеШапкиЧека(
								ЭлементДанных);
						КонецЕсли;
						
						НайденныеДокументы.Добавить(СтрокаДанных);
						
					КонецЦикла;
					
					Если КоличествоЭлементов > 0 Тогда
						ПолеНомер = ?(ПараметрыОтбора.ТипЗапроса = "doc", "number", "did");
						ПараметрыНавигации.НомерДокументаПервый            = ДанныеОбработки["results"][0][ПолеНомер];
						ПараметрыНавигации.ЗначениеПоляСортировкиПервое    = ДанныеОбработки["results"][0]["receivedAt"];
						ПараметрыНавигации.НомерДокументаПоследний         = ДанныеОбработки["results"][КоличествоЭлементов - 1][ПолеНомер];
						ПараметрыНавигации.ЗначениеПоляСортировкиПоследнее = ДанныеОбработки["results"][КоличествоЭлементов - 1]["receivedAt"];
					КонецЕсли;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.НайденныеДокументы = НайденныеДокументы;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьТочечнуюЗагрузкуСтатусовИзСервиса(ПараметрыТочечнойЗагрузки, ДанныеДляОпросаСервисаГИСМТ, ДанныеДокументовГИСМТ)
	
	Если ПараметрыТочечнойЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляОпределенияИдентификаторов = Новый ТаблицаЗначений;
	ДанныеДляОпределенияИдентификаторов.Колонки.Добавить("Организация",   Метаданные.ОпределяемыеТипы.Организация.Тип);
	ДанныеДляОпределенияИдентификаторов.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеДляОпределенияИдентификаторов.Колонки.Добавить("КонецПериода",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеДляОпределенияИдентификаторов.Колонки.Добавить("ТипДокумента",  Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовГИСМТ"));
	ДанныеДляОпределенияИдентификаторов.Колонки.Добавить("ВидПродукции",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого Строка Из ПараметрыТочечнойЗагрузки Цикл
		Для Каждого ТипДокумента Из Строка.ТипЭлектронногоДокумента Цикл
			НоваяСтрока = ДанныеДляОпределенияИдентификаторов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ТипДокумента = ТипДокумента;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляОпросаСервисаГИСМТ.МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыТочечнойЗагрузки.Организация КАК Организация,
		|	ПараметрыТочечнойЗагрузки.НачалоПериода КАК НачалоПериода,
		|	ПараметрыТочечнойЗагрузки.КонецПериода КАК КонецПериода,
		|	ПараметрыТочечнойЗагрузки.ТипДокумента КАК ТипДокумента,
		|	ПараметрыТочечнойЗагрузки.ВидПродукции КАК ВидПродукции
		|ПОМЕСТИТЬ ПараметрыТочечнойЗагрузки
		|ИЗ
		|	&ДанныеДляОпределенияИдентификаторов КАК ПараметрыТочечнойЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоДокументам.Организация КАК Организация,
		|	ДанныеПоДокументам.ВидПродукции КАК ВидПродукции,
		|	ДанныеПоДокументам.ТипДокумента КАК ТипДокумента,
		|	ДанныеПоДокументам.Дата КАК Дата,
		|	ДанныеПоДокументам.Документ КАК Документ,
		|	ДанныеПоДокументам.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
		|	ДанныеПоДокументам.Идентификатор КАК Идентификатор
		|ИЗ
		|	ПараметрыТочечнойЗагрузки КАК ПараметрыТочечнойЗагрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоДокументам КАК ДанныеПоДокументам
		|		ПО ПараметрыТочечнойЗагрузки.Организация = ДанныеПоДокументам.Организация
		|			И ПараметрыТочечнойЗагрузки.ТипДокумента = ДанныеПоДокументам.ТипДокумента
		|			И ПараметрыТочечнойЗагрузки.ВидПродукции = ДанныеПоДокументам.ВидПродукции
		|			И (ДанныеПоДокументам.Дата МЕЖДУ ПараметрыТочечнойЗагрузки.НачалоПериода И ПараметрыТочечнойЗагрузки.КонецПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Дата,
		|	ВидПродукции,
		|	ТипДокумента
		|ИТОГИ ПО
		|	Организация";
	
	Запрос.УстановитьПараметр("ДанныеДляОпределенияИдентификаторов", ДанныеДляОпределенияИдентификаторов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоОрганизации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизации.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РезультатЗапросаСтатуса = Обработки.ПроверкаДокументовИСМП.СтатусОбработкиУниверсальногоДокументаПоИдентификатору(ВыборкаПоОрганизации.Организация, ВыборкаДетальныеЗаписи.Идентификатор);
			
			Если РезультатЗапросаСтатуса.ТребуетсяОбновлениеКлючаСессии Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатЗапросаСтатуса.Статус) Тогда
				
				Запись = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
				Запись.Документ            = ВыборкаДетальныеЗаписи.Документ;
				Запись.ИдентификаторЗаписи = ВыборкаДетальныеЗаписи.ИдентификаторЗаписи;
				Запись.Прочитать();
				Если Запись.Выбран() И Запись.Статус <> РезультатЗапросаСтатуса.Статус Тогда
					Запись.Статус         = РезультатЗапросаСтатуса.Статус;
					Запись.СписокОпераций = Новый ХранилищеЗначения(РезультатЗапросаСтатуса.СписокОпераций);
					Запись.Записать();
				КонецЕсли;
				
				СтрокаДанныеДокумента = ДанныеДокументовГИСМТ.Добавить();
				СтрокаДанныеДокумента.СтатусДокументаВСервисе = РезультатЗапросаСтатуса.Статус;
				СтрокаДанныеДокумента.Идентификатор           = ВыборкаДетальныеЗаписи.Идентификатор;
				СтрокаДанныеДокумента.РезультатСохранен       = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФискальныеЧеки

Процедура НачальноеЗаполнениеПоРегиструФискальныеОперации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДокументовКОтслеживанию           = ИнициализацияДанныхПоРезультатамОбработкиДокументов();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФискальныеОперации.ДокументОснование   КАК ДокументОснование,
		|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
		|	ФискальныеОперации.Организация         КАК Организация,
		|	ФискальныеОперации.Дата                КАК Дата,
		|	ФискальныеОперации.ДанныеXML           КАК ДанныеXML,
		|	ФискальныеОперации.НомерЧекаККМ        КАК НомерЧекаККМ,
		|	ФискальныеОперации.ЗаводскойНомерФН    КАК ЗаводскойНомерФН
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|		ПО ФискальныеОперации.ДокументОснование = РезультатыОбработкиДокументовИСМП.Документ
		|			И ФискальныеОперации.ИдентификаторЗаписи = РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи
		|ГДЕ
		|	ФискальныеОперации.НомерЧекаККМ > 0
		|	И ФискальныеОперации.ЗаводскойНомерФН <> """"
		|	И РезультатыОбработкиДокументовИСМП.Документ ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеXML = ВыборкаДетальныеЗаписи.ДанныеXML.Получить();
		
		Если ДанныеXMLПоФискальнойОперацииСодержатКодыМаркируемогоТовара(ДанныеXML) Тогда
			
			ЗаполнитьДанныеДляРегистрацииФискальнойОперации(
				ВыборкаДетальныеЗаписи,
				ДанныеXML,
				ДанныеДокументовКОтслеживанию.Добавить());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДокументовКОтслеживанию.Количество() > 0 Тогда
			
			НаборЗаписей = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ДанныеДокументовКОтслеживанию);
			НаборЗаписей.Записать(Ложь);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьЗаписьФискальнойОперацииКОтслеживанию(ЗаписьФискальнойОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеXML = ЗаписьФискальнойОперации.ДанныеXML.Получить();
	
	Если Не ДанныеXMLПоФискальнойОперацииСодержатКодыМаркируемогоТовара(ДанныеXML) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписиРезультатыОбработкиДокументовИСМП = РегистрыСведений.РезультатыОбработкиДокументовИСМП.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРезультатыОбработкиДокументовИСМП.Документ            = ЗаписьФискальнойОперации.ДокументОснование;
	МенеджерЗаписиРезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи = ЗаписьФискальнойОперации.ИдентификаторЗаписи;
	
	МенеджерЗаписиРезультатыОбработкиДокументовИСМП.Прочитать();
	Если МенеджерЗаписиРезультатыОбработкиДокументовИСМП.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДляРегистрацииФискальнойОперации(
		ЗаписьФискальнойОперации,
		ДанныеXML,
		МенеджерЗаписиРезультатыОбработкиДокументовИСМП);
		
		МенеджерЗаписиРезультатыОбработкиДокументовИСМП.Записать();
		
КонецПроцедуры

Процедура ЗаполнитьДанныеДляРегистрацииФискальнойОперации(ЗаписьФискальнойОперации, ДанныеXML, СтрокаРезультатыОбработкиДокументовИСМП) Экспорт
	
	ХешСуммаДокумента      = ИнтеграцияИС.ХешированиеДанныхSHA256(ДанныеXML);
	ИдентификаторДокумента = XMLСтрока(ЗаписьФискальнойОперации.НомерЧекаККМ) + ЗаписьФискальнойОперации.ЗаводскойНомерФН;
	ТекстСостояния         = НСтр("ru = 'Ожидается проверка чека в ГИС МТ'");
	
	СтрокаРезультатыОбработкиДокументовИСМП = СтрокаРезультатыОбработкиДокументовИСМП;
	СтрокаРезультатыОбработкиДокументовИСМП.Документ            = ЗаписьФискальнойОперации.ДокументОснование;
	СтрокаРезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи = ЗаписьФискальнойОперации.ИдентификаторЗаписи;
	СтрокаРезультатыОбработкиДокументовИСМП.Дата                = ЗаписьФискальнойОперации.Дата;
	СтрокаРезультатыОбработкиДокументовИСМП.Организация         = ЗаписьФискальнойОперации.Организация;
	СтрокаРезультатыОбработкиДокументовИСМП.Статус              = Перечисления.СтатусыОбработкиДокументовИСМП.НеВыполнялось;
	СтрокаРезультатыОбработкиДокументовИСМП.Результаты          = Неопределено;
	СтрокаРезультатыОбработкиДокументовИСМП.Состояние           = ТекстСостояния;
	СтрокаРезультатыОбработкиДокументовИСМП.ДатаСтатуса         = ТекущаяДатаСеанса();
	СтрокаРезультатыОбработкиДокументовИСМП.ХешСуммаДокумента   = ХешСуммаДокумента;
	СтрокаРезультатыОбработкиДокументовИСМП.ТипДокумента        = Перечисления.ТипыДокументовГИСМТ.ЧекККТ;
	СтрокаРезультатыОбработкиДокументовИСМП.СтатусОтправки      = Перечисления.СтатусОтправкиГИСМТ.ОтправленВОФД;
	СтрокаРезультатыОбработкиДокументовИСМП.Идентификатор       = ИдентификаторДокумента;
	СтрокаРезультатыОбработкиДокументовИСМП.ДатаДобавления      = ЗаписьФискальнойОперации.Дата;
	
КонецПроцедуры

Функция ДанныеXMLПоФискальнойОперацииСодержатКодыМаркируемогоТовара(ВходныеДанныеXML) Экспорт
	
	Если ТипЗнч(ВходныеДанныеXML) = Тип("ХранилищеЗначения") Тогда
		ДанныеXML = ВходныеДанныеXML.Получить();
	Иначе
		ДанныеXML = ВходныеДанныеXML;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеXML) = Тип("Строка") И Не ПустаяСтрока(ДанныеXML) Тогда
		
		ДанныеФискализации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗагрузитьДанныеФискализацииИзXML(ДанныеXML);
		
		Для Каждого ПозицияЧека Из ДанныеФискализации.ПозицииЧека Цикл
			
			Если ПозицияЧека.Свойство("ДанныеКодаТоварнойНоменклатуры") Тогда
				
				ШтрихкодBase64 = ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара;
				
				Если ЗначениеЗаполнено(ШтрихкодBase64) Тогда
					
					ДвоичныеДанные = Base64Значение(ШтрихкодBase64);
					
					Если ДвоичныеДанные <> Неопределено И ДвоичныеДанные.Размер() > 0 Тогда
						Возврат Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОчередиНаПолучениеИнформацииПоДокументамСписком

Функция СформироватьОчередьЗапросовКСервису(ПараметрыОбмена) Экспорт
	
	ДанныеПоОрганизациям    = Новый Массив;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Данные",                  ДанныеПоОрганизациям);
	ВозвращаемоеЗначение.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	ЗаполнитьРегистрТоварныеГруппыДокументаГИСМТ();
	
	СтатусыДокументовИСМП = Новый Массив;
	СтатусыДокументовИСМП.Добавить(Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	СтатусыДокументовИСМП.Добавить(Перечисления.СтатусыДокументовИСМП.Обрабатывается);
	
	СтатусыДокументНеОтправленВГИсМТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыОбработкиДокументовИСМП.Организация                      КАК Организация,
		|	ТоварныеГруппыДокументаГИСМТ.ВидПродукции                          КАК ВидПродукции,
		|	РезультатыОбработкиДокументовИСМП.ТипДокумента                     КАК ТипДокумента,
		|	НАЧАЛОПЕРИОДА(РезультатыОбработкиДокументовИСМП.Дата, ДЕНЬ)        КАК Дата,
		|	РезультатыОбработкиДокументовИСМП.Документ                         КАК Документ,
		|	РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи              КАК ИдентификаторЗаписи,
		|	РезультатыОбработкиДокументовИСМП.Идентификатор                    КАК Идентификатор,
		|	РезультатыОбработкиДокументовИСМП.Идентификатор                    КАК ИдентификаторЭлектронногоДокумента,
		|	РезультатыОбработкиДокументовИСМП.СтатусОтправки                   КАК СтатусОтправки,
		|	РезультатыОбработкиДокументовИСМП.Статус                           КАК СтатусДокументаВСервисе,
		|	РезультатыОбработкиДокументовИСМП.Статус                           КАК СтатусОбработкиПрикладногоДокумента,
		|	РезультатыОбработкиДокументовИСМП.ДатаДобавления                   КАК ДатаОтправкиВГИСМТ,
		|	РезультатыОбработкиДокументовИСМП.ВыполненаПредварительнаяПроверка КАК ВыполненаПредварительнаяПроверка
		|ПОМЕСТИТЬ ДанныеПоДокументам
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеГруппыДокументаГИСМТ КАК ТоварныеГруппыДокументаГИСМТ
		|		ПО РезультатыОбработкиДокументовИСМП.Документ = ТоварныеГруппыДокументаГИСМТ.Документ
		|		И РезультатыОбработкиДокументовИСМП.ИдентификаторЗаписи = ТоварныеГруппыДокументаГИСМТ.ИдентификаторЗаписи
		|ГДЕ
		|	РезультатыОбработкиДокументовИСМП.ТипДокумента В (&ТипыДокументов)
		|	И РезультатыОбработкиДокументовИСМП.СтатусДокументаВСервисе В (&СтатусыДокументовИСМП)
		|	И Не РезультатыОбработкиДокументовИСМП.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусОтправкиГИСМТ.НеОтправлен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоДокументам.Организация                         КАК Организация,
		|	ДанныеПоДокументам.ВидПродукции                        КАК ВидПродукции,
		|	ДанныеПоДокументам.ТипДокумента                        КАК ТипДокумента,
		|	ДанныеПоДокументам.Дата                                КАК Дата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоДокументам.Идентификатор) КАК Количество
		|ИЗ
		|	ДанныеПоДокументам КАК ДанныеПоДокументам
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПоДокументам.ТипДокумента,
		|	ДанныеПоДокументам.Организация,
		|	ДанныеПоДокументам.ВидПродукции,
		|	ДанныеПоДокументам.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ВидПродукции,
		|	Дата
		|ИТОГИ
		|ПО
		|	Организация,
		|	ВидПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоДокументам.Документ                            КАК Документ,
		|	ДанныеПоДокументам.ИдентификаторЗаписи                 КАК ИдентификаторЗаписи,
		|	ДанныеПоДокументам.Организация                         КАК Организация,
		|	ДанныеПоДокументам.ВидПродукции                        КАК ВидПродукции,
		|	ДанныеПоДокументам.ТипДокумента                        КАК ТипДокумента,
		|	ДанныеПоДокументам.Дата                                КАК Дата,
		|	ДанныеПоДокументам.ИдентификаторЭлектронногоДокумента  КАК ИдентификаторЭлектронногоДокумента,
		|	ДанныеПоДокументам.СтатусОтправки                      КАК СтатусОтправки,
		|	ДанныеПоДокументам.СтатусДокументаВСервисе             КАК СтатусДокументаВСервисе,
		|	ДанныеПоДокументам.СтатусОбработкиПрикладногоДокумента КАК СтатусОбработкиПрикладногоДокумента,
		|	ДанныеПоДокументам.ДатаОтправкиВГИСМТ                  КАК ДатаОтправкиВГИСМТ
		|ИЗ
		|	ДанныеПоДокументам КАК ДанныеПоДокументам
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ВидПродукции,
		|	ТипДокумента,
		|	Дата";
	
	Запрос.УстановитьПараметр("ТипыДокументов",                   ПараметрыОбмена.ТипыДокументов);
	Запрос.УстановитьПараметр("СтатусыДокументовИСМП",            СтатусыДокументовИСМП);
	Запрос.УстановитьПараметр("СтатусыДокументНеОтправленВГИсМТ", СтатусыДокументНеОтправленВГИсМТ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаПоИнтервалам = РезультатЗапроса[1];
	
	ТипыДокументовПоДатам = Новый ТаблицаЗначений;
	ТипыДокументовПоДатам.Колонки.Добавить("Дата",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТипыДокументовПоДатам.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовГИСМТ"));
	ТипыДокументовПоДатам.Колонки.Добавить("Количество",   ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ВыборкаПоОрганизации = РезультатЗапросаПоИнтервалам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоВидуПродукции = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ДанныеПоОрганизации = Новый Массив;
		
		Пока ВыборкаПоВидуПродукции.Следующий() Цикл
			
			ТипыДокументовПоДатам.Очистить();
			
			ВыборкаДетальныеЗаписи = ВыборкаПоВидуПродукции.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТипыДокументовПоДатам.Добавить(), ВыборкаДетальныеЗаписи);
			КонецЦикла;
			
			//@skip-check query-in-loop
			ОчередьЗапросов = РассчитатьИнтервалыЗагрузки(ВыборкаПоВидуПродукции.Организация,
				ВыборкаПоВидуПродукции.ВидПродукции, ТипыДокументовПоДатам);
			
			ДанныеПоОрганизации.Добавить(
				Новый Структура("ВидПродукции, Данные", ВыборкаПоВидуПродукции.ВидПродукции, ОчередьЗапросов));
			
		КонецЦикла;
		
		ДанныеПоОрганизациям.Добавить(
			Новый Структура("Организация, Данные", ВыборкаПоОрганизации.Организация, ДанныеПоОрганизации));
		
	КонецЦикла;
		
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыОбмена.ОчередьДокументов.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Рассчитывает интервалы для опроса сервиса ГИС МТ по списку документов
//
// Параметры:
//   Организация           - ОпределяемыйТип.Организация        - Ссылка на организацию.
//   ВидПродукции          - ПеречислениеСсылка.ВидыПродукцииИС - Обрабатываемый вид продукции.
//   ТипыДокументовПоДатам - ТаблицаЗначений                    - Данные для рассчетов:
//   * Дата         - Дата                                   - Дата (начало дня) документа.
//   * ТипДокумента - ПеречислениеСсылка.ТипыДокументовГИСМТ - Тип обрабатываемого документа.
//   * Количество   - Число                                  - Ожидаемое количество документов.
//
// Возвращаемое значение:
//   Массив из Структура:
//   * ТаблицаИнтервалов - ТаблицаЗначений:
//     ** ДатаНачала                  - Дата.
//     ** ДатаОкончания               - Дата.
//     ** КоличествоЗапросовКСервису  - Число.
//     ** ОжидаемоеКоличествоЗаПериод - Число.
//     ** ЭтоЗапросСписком            - Булево.
//   * ТипыДокументов - Массив из ПеречислениеСсылка.ТипыДокументовГИСМТ.
//
Функция РассчитатьИнтервалыЗагрузки(Организация, ВидПродукции, ТипыДокументовПоДатам) Экспорт
	
	МаксимальноеКоличествоВЗапросе = МаксимальноеКоличествоЭлементовВЗапросеКСпискуДокументов();
	
	КоличествоПоТипамДокументов = ТипыДокументовПоДатам.Скопировать();
	КоличествоПоТипамДокументов.Свернуть("ТипДокумента", "Количество");
	
	КоличествоВДеньПоВсемТипамДокументов = 0;
	
	// Заполнение предполагаемого количества на основе статистики и значений по умолчанию
	КоличествоПоТипуДокумента = Новый Соответствие;
	Для Каждого Строка Из КоличествоПоТипамДокументов Цикл
		//@skip-check query-in-loop
		КоличествоВДень = КоличествоЭлементовВЗапросеКСпискуДокументов(Организация, Строка.ТипДокумента, ВидПродукции);
		КоличествоПоТипуДокумента[Строка.ТипДокумента] = КоличествоВДень;
		КоличествоВДеньПоВсемТипамДокументов = КоличествоВДеньПоВсемТипамДокументов + КоличествоВДень;
	КонецЦикла;
	
	КомбинацииТиповДокументов = ВозможныеКомбинацииТиповДокументовДляЗапросаКСервису(КоличествоПоТипамДокументов.ВыгрузитьКолонку("ТипДокумента"));
	
	ВариантыЗапросовКСервису = Новый Массив;
	
	Для Каждого Комбинация Из КомбинацииТиповДокументов Цикл
		
		ДанныеДляРасчета = Новый Массив;
		
		Для Каждого ДанныеКомбинации Из Комбинация Цикл
			
			Если ТипЗнч(ДанныеКомбинации) = Тип("ПеречислениеСсылка.ТипыДокументовГИСМТ") Тогда
				
				КоличествоВДень = КоличествоПоТипуДокумента[ДанныеКомбинации];
				
				Отбор = Новый Структура("ТипДокумента", ДанныеКомбинации);
				
				СтрокиПоТипуДокумента = ТипыДокументовПоДатам.НайтиСтроки(Отбор);
				
				ТипыДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеКомбинации);
				
			Иначе
				
				КоличествоВДень      = 0;
				НаличиеТипаДокумента = Новый Соответствие;
				Для Каждого ТипДокументаКомбинации Из ДанныеКомбинации Цикл
					КоличествоВДень = КоличествоВДень + КоличествоПоТипуДокумента[ТипДокументаКомбинации];
					НаличиеТипаДокумента.Вставить(ТипДокументаКомбинации, Истина);
				КонецЦикла;
				
				СтрокиПоТипуДокумента = ТипыДокументовПоДатам.СкопироватьКолонки("Дата, Количество");
				
				Для Каждого Строка Из ТипыДокументовПоДатам Цикл
					Если НаличиеТипаДокумента[Строка.ТипДокумента] = Истина Тогда
						ЗаполнитьЗначенияСвойств(СтрокиПоТипуДокумента.Добавить(), Строка);
					КонецЕсли;
				КонецЦикла;
				
				СтрокиПоТипуДокумента.Свернуть("Дата", "Количество");
				
				ТипыДокументов = ДанныеКомбинации;
				
			КонецЕсли;
			
			ДанныеДляРасчета.Добавить(
				Новый Структура("СтрокиПоТипуДокумента, КоличествоВДень, ТипыДокументов", СтрокиПоТипуДокумента, КоличествоВДень, ТипыДокументов));
			
		КонецЦикла;
		
		ЗапросыКСервису            = Новый Массив;
		КоличествоЗапросовКСервису = 0;
		Для Каждого Строка Из ДанныеДляРасчета Цикл
			
			СгруппированныеСтрокиПоТипуДокумента = СформироватьОчередьЗапросовОтобранныеПоТипуДокумента(Строка.СтрокиПоТипуДокумента, Строка.КоличествоВДень, МаксимальноеКоличествоВЗапросе);
			
			ТаблицаИнтервалов = СформироватьОчередьЗапросовПоИнтервалам(СгруппированныеСтрокиПоТипуДокумента, Строка.КоличествоВДень, МаксимальноеКоличествоВЗапросе);
			
			КоличествоЗапросовКСервису = КоличествоЗапросовКСервису + ТаблицаИнтервалов.Итог("КоличествоЗапросовКСервису");
			
			ЗапросыКСервису.Добавить(
				Новый Структура("ТаблицаИнтервалов, ТипыДокументов", ТаблицаИнтервалов, Строка.ТипыДокументов));
			
		КонецЦикла;
		
		ВариантыЗапросовКСервису.Добавить(Новый Структура("ЗапросыКСервису, КоличествоЗапросовКСервису", ЗапросыКСервису, КоличествоЗапросовКСервису));
		
	КонецЦикла;
	
	ВыбранныйВариантЗапроса = Неопределено;
	Для Каждого ТекщийВариантЗапроса Из ВариантыЗапросовКСервису Цикл
		
		Если ВыбранныйВариантЗапроса = Неопределено
			Или ТекщийВариантЗапроса.КоличествоЗапросовКСервису < ВыбранныйВариантЗапроса.КоличествоЗапросовКСервису Тогда
			ВыбранныйВариантЗапроса = ТекщийВариантЗапроса;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныйВариантЗапроса.ЗапросыКСервису;
	
КонецФункции

Функция СформироватьОчередьЗапросовОтобранныеПоТипуДокумента(СтрокиПоТипуДокумента, КоличествоВДень, МаксимальноеКоличествоВЗапросе)
	
	ДанныеКРаспределению = Новый ТаблицаЗначений;
	ДанныеКРаспределению.Колонки.Добавить("Дата",                  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеКРаспределению.Колонки.Добавить("Количество",            ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеКРаспределению.Колонки.Добавить("ОжидаемоеКоличествоЗаСутки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеКРаспределению.Колонки.Добавить("КоличествоПакетныхЗапросов", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеКРаспределению.Колонки.Добавить("ДопустимЗапросСписком", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из СтрокиПоТипуДокумента Цикл
		
		ОжидаемоеКоличествоЗаСутки = Макс(Строка.Количество, КоличествоВДень);
		
		КоличествоПакетныхЗапросов = Окр((ОжидаемоеКоличествоЗаСутки / МаксимальноеКоличествоВЗапросе) + 0.5, 0, 0);
		
		НоваяСтрока = ДанныеКРаспределению.Добавить();
		НоваяСтрока.Дата                       = Строка.Дата;
		НоваяСтрока.Количество                 = Строка.Количество;
		НоваяСтрока.ОжидаемоеКоличествоЗаСутки = ОжидаемоеКоличествоЗаСутки;
		НоваяСтрока.КоличествоПакетныхЗапросов = КоличествоПакетныхЗапросов;
		НоваяСтрока.ДопустимЗапросСписком      = (КоличествоПакетныхЗапросов <= Строка.Количество);
		
	КонецЦикла;
	
	СгруппированныеСтрокиПоТипуДокумента = Новый Массив;
	
	КонечныйИндекс = ДанныеКРаспределению.Количество() - 1;
	
	ДопустимЗапросСписком = Ложь;
	
	Для Сч = 0 По КонечныйИндекс Цикл
		
		Строка = ДанныеКРаспределению[Сч];
		
		Если Не ДопустимЗапросСписком И Строка.ДопустимЗапросСписком Тогда
			
			ГруппировкаПоДатам = Новый Массив;
			ГруппировкаПоДатам.Добавить(Строка);
			
			СгруппированныеСтрокиПоТипуДокумента.Добавить(ГруппировкаПоДатам);
			
		ИначеЕсли ДопустимЗапросСписком И Строка.ДопустимЗапросСписком Тогда
			
			ПредыдущаяСтрока = ДанныеКРаспределению[Сч - 1];
			
			КоличествоДней = (НачалоДня(Строка.Дата) - НачалоДня(ПредыдущаяСтрока.Дата))/(60*60*24) - 1;
			
			ОжидаемоеКоличествоЗаПериод = КоличествоДней * КоличествоВДень + Строка.ОжидаемоеКоличествоЗаСутки + ПредыдущаяСтрока.ОжидаемоеКоличествоЗаСутки;
			
			КоличествоПакетныхЗапросов = Окр((ОжидаемоеКоличествоЗаПериод / МаксимальноеКоличествоВЗапросе) + 0.5, 0, 0);
			
			Если КоличествоПакетныхЗапросов > Строка.КоличествоПакетныхЗапросов + ПредыдущаяСтрока.КоличествоПакетныхЗапросов Тогда
				
				ГруппировкаПоДатам = Новый Массив;
				
				СгруппированныеСтрокиПоТипуДокумента.Добавить(ГруппировкаПоДатам);
				
			КонецЕсли;
			
			ГруппировкаПоДатам.Добавить(Строка);
			
		ИначеЕсли Не Строка.ДопустимЗапросСписком Тогда
			
			СгруппированныеСтрокиПоТипуДокумента.Добавить(Строка);
			
		КонецЕсли;
		
		ДопустимЗапросСписком = Строка.ДопустимЗапросСписком;
		
	КонецЦикла;
	
	Возврат СгруппированныеСтрокиПоТипуДокумента;
	
КонецФункции

Функция СформироватьОчередьЗапросовПоИнтервалам(СгруппированныеСтрокиПоТипуДокумента, КоличествоВДень, МаксимальноеКоличествоВЗапросе)
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("ДатаНачала",                  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Интервалы.Колонки.Добавить("ДатаОкончания",               ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Интервалы.Колонки.Добавить("ЭтоЗапросСписком",            Новый ОписаниеТипов("Булево"));
	Интервалы.Колонки.Добавить("КоличествоЗапросовКСервису",  ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Интервалы.Колонки.Добавить("ОжидаемоеКоличествоЗаПериод", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого Данные Из СгруппированныеСтрокиПоТипуДокумента Цикл
		
		Если ТипЗнч(Данные) = Тип("СтрокаТаблицыЗначений") Тогда
			
			ДатаНачала                 = Данные.Дата;
			ДатаОкончания              = Данные.Дата;
			ЭтоЗапросСписком           = Ложь;
			КоличествоЗапросовКСервису = Данные.Количество;
			
		Иначе
			
			ДатаНачала                 = Данные[0].Дата;
			ДатаОкончания              = Данные[Данные.ВГраница()].Дата;
			ЭтоЗапросСписком           = Истина;
			КоличествоЗапросовКСервису = 0;
			
			Если Данные.Количество() = 1 Тогда
				
				ОжидаемоеКоличествоЗаПериод = Данные[0].ОжидаемоеКоличествоЗаСутки;
				КоличествоЗапросовКСервису  = Данные[0].КоличествоПакетныхЗапросов;
				
			Иначе
				
				ОжидаемоеКоличество = 0;
				Для Каждого Строка Из Данные Цикл
					ОжидаемоеКоличество = ОжидаемоеКоличество + Строка.ОжидаемоеКоличествоЗаСутки;
				КонецЦикла;
				
				КоличествоДней = (ДатаОкончания - ДатаНачала)/(60*60*24) - (Данные.Количество() - 1);
				
				ОжидаемоеКоличествоЗаПериод = КоличествоДней * КоличествоВДень + ОжидаемоеКоличество;
				КоличествоЗапросовКСервису  = Окр((ОжидаемоеКоличествоЗаПериод / МаксимальноеКоличествоВЗапросе) + 0.5, 0, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = Интервалы.Добавить();
		НоваяСтрока.ДатаНачала                  = ДатаНачала;
		НоваяСтрока.ДатаОкончания               = ДатаОкончания;
		НоваяСтрока.ЭтоЗапросСписком            = ЭтоЗапросСписком;
		НоваяСтрока.ОжидаемоеКоличествоЗаПериод = ОжидаемоеКоличествоЗаПериод;
		НоваяСтрока.КоличествоЗапросовКСервису  = КоличествоЗапросовКСервису;
		
	КонецЦикла;
	
	Возврат Интервалы;
	
КонецФункции

Функция ВозможныеКомбинацииТиповДокументовДляЗапросаКСервису(ТипыДокументов)
	
	ОбщийСписок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТипыДокументов);
	
	ВариантыГруппировкиТиповДокументов = Новый Массив;
	
	ВариантыГруппировкиТиповДокументов.Добавить(
		Новый Структура("Список1, Список2", Неопределено, ОбщийСписок));
	
	Если ОбщийСписок.Количество() > 1 Тогда
		ВариантыГруппировкиТиповДокументов.Добавить(
			Новый Структура("Список1, Список2", ОбщийСписок, Неопределено));
	КонецЕсли;
	
	Если ОбщийСписок.Количество() > 2 Тогда
		Для Сч = 0 По ОбщийСписок.ВГраница() - 1 Цикл
			Для Сч2 = (Сч + 1) По ОбщийСписок.ВГраница() Цикл
				Список1 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбщийСписок[Сч]);
				Список1.Добавить(ОбщийСписок[Сч2]);
				Список2 = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбщийСписок, Список1);
				ВариантыГруппировкиТиповДокументов.Добавить(
					Новый Структура("Список1, Список2", Список1, Список2));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщийСписок.Количество() > 3 Тогда
		Для Сч = 0 По ОбщийСписок.ВГраница() - 2 Цикл
			Для Сч2 = (Сч + 1) По ОбщийСписок.ВГраница() - 1 Цикл
				Для Сч3 = (Сч2 + 1) По ОбщийСписок.ВГраница() Цикл
					Список1 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбщийСписок[Сч]);
					Список1.Добавить(ОбщийСписок[Сч2]);
					Список1.Добавить(ОбщийСписок[Сч3]);
					Список2 = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбщийСписок, Список1);
					ВариантыГруппировкиТиповДокументов.Добавить(
						Новый Структура("Список1, Список2", Список1, Список2));
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИтоговаяТаблицаВариантов = Новый Массив;
	Для Каждого ТекущийВариант Из ВариантыГруппировкиТиповДокументов Цикл
		
		Если ТекущийВариант.Список1 = Неопределено Тогда
			ИтоговаяТаблицаВариантов.Добавить(ТекущийВариант.Список2);
		ИначеЕсли ТекущийВариант.Список2 = Неопределено Тогда
			ИтоговаяТаблицаВариантов.Добавить(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийВариант.Список1));
		Иначе
			Данные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийВариант.Список1);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Данные, ТекущийВариант.Список2);
			ИтоговаяТаблицаВариантов.Добавить(Данные);
			Если ТекущийВариант.Список2.Количество() > 1 Тогда
				Данные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийВариант.Список1);
				Данные.Добавить(ТекущийВариант.Список2);
				ИтоговаяТаблицаВариантов.Добавить(Данные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтоговаяТаблицаВариантов;
	
КонецФункции

Функция КоличествоЭлементовВЗапросеКСпискуДокументов(Организация, ТипДокумента, ВидПродукции) Экспорт
	
	Количество = Неопределено;
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(ТипДокумента)
		Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
		Возврат МинимальноеКоличествоЭлементовВЗапросеКСпискуДокументов();
	КонецЕсли;
	
	Если Количество <> Неопределено Тогда
		Возврат Количество;
	КонецЕсли;
	
	МинимальноеКоличество = МинимальноеКоличествоЭлементовВЗапросеКСпискуДокументов();
	
	ТипыДокументов = Новый Массив;
	
	ПрикладныеДокументыИСМП = Метаданные.ОпределяемыеТипы.ПрикладныеДокументыГИСМТ.Тип.Типы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(СтатусыПроверкиИПодбораДокументовИСМП.Документ) КАК ТипДокумента
	|ИЗ
	|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИС КАК СтатусыПроверкиИПодбораДокументовИСМП
	|ГДЕ
	|	СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции = &ВидПродукции";
	Запрос.УстановитьПараметр("ВидПродукции", ВидПродукции);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПрикладныеДокументыИСМП.Найти(Выборка.ТипДокумента) = Неопределено
			Или Метаданные.НайтиПоТипу(Выборка.ТипДокумента).Реквизиты.Найти("Организация") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТипыДокументов.Добавить(Выборка.ТипДокумента);
	КонецЦикла;
	
	Если ТипыДокументов.Количество() = 0 Тогда
		Возврат МинимальноеКоличество;
	КонецЕсли;
	
	Подзапросы = Новый Массив;
	Для Каждого Тип Из ТипыДокументов Цикл
		Подзапрос =
			СтрШаблон(
				"ВЫБРАТЬ
				|	ТаблицаДокумент.Организация КАК Организация,
				|	НАЧАЛОПЕРИОДА(ТаблицаДокумент.Дата, ДЕНЬ) КАК Дата,
				|	СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции КАК ВидПродукции,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыПроверкиИПодбораДокументовИСМП.Документ) КАК Количество
				|ИЗ
				|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИС КАК СтатусыПроверкиИПодбораДокументовИСМП
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1 КАК ТаблицаДокумент
				|		ПО СтатусыПроверкиИПодбораДокументовИСМП.Документ = ТаблицаДокумент.Ссылка
				|ГДЕ
				|	НЕ ТаблицаДокумент.Ссылка ЕСТЬ NULL
				|	И СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции = &ВидПродукции
				|	И ТаблицаДокумент.Организация = &Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаДокумент.Организация,
				|	СтатусыПроверкиИПодбораДокументовИСМП.ВидМаркируемойПродукции,
				|	НАЧАЛОПЕРИОДА(ТаблицаДокумент.Дата, ДЕНЬ)", Метаданные.НайтиПоТипу(Тип).Имя);
		Подзапросы.Добавить(Подзапрос);
	КонецЦикла;
	
	РезделительПодзапросов = "
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|";
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.ВидПродукции КАК ВидПродукции,
		|	МИНИМУМ(ВложенныйЗапрос.Дата) КАК ДатаНачала,
		|	МАКСИМУМ(ВложенныйЗапрос.Дата) КАК ДатаОкончания,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(
		|	%1
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ВидПродукции",
		СтрСоединить(Подзапросы, РезделительПодзапросов));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидПродукции", ВидПродукции);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат МинимальноеКоличество;
	КонецЕсли;
	
	КоличествоДней = (НачалоДня(Выборка.ДатаОкончания) - НачалоДня(Выборка.ДатаНачала))/(60*60*24);

	КоличествоДней = Макс(КоличествоДней, 1);
	
	Количество = Окр(Выборка.Количество / КоличествоДней);
	
	Возврат Макс(Количество, МинимальноеКоличество);
	
КонецФункции

Функция МинимальноеКоличествоЭлементовВЗапросеКСпискуДокументов() Экспорт
	Возврат 3;
КонецФункции

Функция МаксимальноеКоличествоЭлементовВЗапросеКСпискуДокументов() Экспорт
	Возврат 10000;
КонецФункции

#КонецОбласти

#КонецОбласти
