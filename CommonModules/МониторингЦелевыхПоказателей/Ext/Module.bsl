///////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы формирования монитора целевых показателей
///////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиМонитораЦелевыхПоказателей

// Возвращает пользовательские настройки монитора целевых показателей
//
// Параметры:
//	Дашборд - СправочникСсылка.ДашбордыМЦП - дашборд с настройками МЦП
//
// Возвращаемое значение:
//	Структура - содержит пользовательские настройки:
//		* ВариантГруппировкиПоказателей - Строка - принимает значения "ПоКатегориямЦелей" и "ПоСостоянию"
//		* ВариантОтображенияДеталей - Строка - принимает значения "ПоказыватьТолькоТекущееЗначение" и "ПоказыватьТекущееЗначениеИДетали"
//		* КоличествоКолонокМонитораПоказателей - Число - количество колонок на форме.
//		* РазмерДиаграмм - Число - принимает значения 1(малый) и 2(Крупный)
//		* ПериодАвтообновления - Число - период в минутах.
//
Функция ПолучитьНастройкиМонитораЦелевыхПоказателей(Дашборд = Неопределено) Экспорт
	
	НастройкиПоУмолчанию = МониторингЦелевыхПоказателейКлиентСервер.СтандартныеНастройки();
	
	НастройкиМонитораЦелевыхПоказателей = Новый Структура;
	
	Если Дашборд = Неопределено Тогда
		Дашборд = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиМонитораЦелевыхПоказателей", "ДашбордПоУмолчанию", , , ИмяПользователя());
		Если Не ДашбордДоступенДляПользователя(Дашборд) Тогда
			Дашборд = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Дашборд <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дашборд", Дашборд);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДашбордыМЦП.ВариантГруппировкиПоказателей КАК ВариантГруппировкиПоказателей,
		|	ДашбордыМЦП.КоличествоКолонок КАК КоличествоКолонок,
		|	ДашбордыМЦП.Масштаб КАК Масштаб,
		|	ДашбордыМЦП.ПериодАвтообновления КАК ПериодАвтообновления,
		|	ДашбордыМЦП.ВыводитьОтборПоказателей КАК ВыводитьОтборПоказателей,
		|	ДашбордыМЦП.ВариантыАнализа.(
		|		ВариантАнализа КАК ВариантАнализа,
		|		ВариантОтображения КАК ВариантОтображения,
		|		Детали КАК Детали,
		|		ИтогТаблицы КАК ИтогТаблицы,
		|		ИСТИНА КАК Доступность
		|	) КАК ВариантыАнализа
		|ИЗ
		|	Справочник.ДашбордыМЦП КАК ДашбордыМЦП
		|ГДЕ
		|	ДашбордыМЦП.Ссылка = &Дашборд";
		НастройкиДашборда = Запрос.Выполнить().Выбрать();
		НастройкиДашборда.Следующий();
	Иначе
		НастройкиДашборда = Неопределено;
	КонецЕсли;
	НастройкиМонитораЦелевыхПоказателей.Вставить("Дашборд", Дашборд);
	
	// порядок вывода показателей
	Если НастройкиДашборда = Неопределено Тогда
		ВариантГруппировкиПоказателей = НастройкиПоУмолчанию.ВариантГруппировкиПоказателей;
	Иначе 
		ВариантГруппировкиПоказателей = НастройкиДашборда.ВариантГруппировкиПоказателей;
	КонецЕсли;
	Если ВариантГруппировкиПоказателей = "ПоВажности" Тогда
		ВариантГруппировкиПоказателей = "ПоСостоянию";
	КонецЕсли;
	
	Если НастройкиДашборда = Неопределено Тогда
		КоличествоКолонокМонитораПоказателей = НастройкиПоУмолчанию.КоличествоКолонокМонитораПоказателей;
	Иначе 
		КоличествоКолонокМонитораПоказателей = НастройкиДашборда.КоличествоКолонок;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантГруппировкиПоказателей", ВариантГруппировкиПоказателей);
	НастройкиМонитораЦелевыхПоказателей.Вставить("КоличествоКолонокМонитораПоказателей", КоличествоКолонокМонитораПоказателей);
	НастройкиМонитораЦелевыхПоказателей.Вставить("АвторасчетКоличестваКолонок", (КоличествоКолонокМонитораПоказателей = 0));
	
	// Внешний вид показателей
	Если НастройкиДашборда = Неопределено Тогда
		РазмерДиаграмм = НастройкиПоУмолчанию.РазмерДиаграмм;
		ПроизвольныйМасштаб = НастройкиПоУмолчанию.ПроизвольныйМасштаб;
	Иначе 
		Масштаб = НастройкиДашборда.Масштаб;
		Если Масштаб > 200 Тогда
			РазмерДиаграмм = 0;
			ПроизвольныйМасштаб = Масштаб;
		Иначе
			РазмерДиаграмм = Масштаб/100;
			ПроизвольныйМасштаб = Масштаб;
		КонецЕсли;
	КонецЕсли;
	
	ВариантОтображенияДеталей = "ПоказыватьТекущееЗначениеИДетали";
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("РазмерДиаграмм", РазмерДиаграмм);
	НастройкиМонитораЦелевыхПоказателей.Вставить("ПроизвольныйМасштаб", ПроизвольныйМасштаб);
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантОтображенияДеталей", ВариантОтображенияДеталей);
	
	// Обновление данных
	Если НастройкиДашборда = Неопределено Тогда
		ПериодАвтообновления = НастройкиПоУмолчанию.ПериодАвтообновления;
	Иначе 
		ПериодАвтообновления = НастройкиДашборда.ПериодАвтообновления;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ПериодАвтообновления", ПериодАвтообновления);
	
	// Вывод отбора показателей
	Если НастройкиДашборда = Неопределено Тогда
		ВыводитьОтборПоказателей = НастройкиПоУмолчанию.ВыводитьОтборПоказателей;
	Иначе
		ВыводитьОтборПоказателей = НастройкиДашборда.ВыводитьОтборПоказателей;
	КонецЕсли;
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВыводитьОтборПоказателей", ВыводитьОтборПоказателей);
	
	// Отображаемые варианты анализа
	Если НастройкиДашборда = Неопределено Тогда
		ВариантыАнализа = Неопределено;
	Иначе
		ВариантыАнализа = НастройкиДашборда.ВариантыАнализа.Выгрузить();
	КонецЕсли;
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантыАнализаПользовательскиеНастройки", Новый ХранилищеЗначения(ВариантыАнализа));
	
	Возврат НастройкиМонитораЦелевыхПоказателей;
	
КонецФункции

// Процедура вызывается из фонового задания для подготовки данных для заполнения 
// монитора целевых показателей.
//
// Параметры:
//	ПараметрыСоставаМонитора - Структура - структура параметров для подготовки данных:
//		* СтруктураНастроек - см. МониторингЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей
//		* ОтборСтатус - Строка, СписокЗначений - значения отбираемых статусов
//		* ПериодичностьКонтроля - ПеречислениеСсылка.Периодичность - периодичность контроля варианта анализа
//		* УчитыватьВариантыОтображения - Булево - учитывать визуальное представление при подготовке данных
//		* ДемонстрационныйРежим - Булево - получить демонстрационные данные вместо реальных
//  АдресХранилища - Строка - адрес временного хранилища с подготовленными данными.
//
Процедура ПодготовитьДанныеДляЗаполнения(ПараметрыСоставаМонитора, АдресХранилища) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ПолучитьСоставМонитораЦелевыхПоказателей");
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Если ПараметрыСоставаМонитора.Свойство("РежимАнализаВзаимосвязанных")
		И ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных Тогда
		ДанныеДляЗаполнения.Вставить("Монитор", ПолучитьСоставМонитораВзаимосвязанных(ПараметрыСоставаМонитора));
	Иначе
		ДанныеДляЗаполнения.Вставить("Монитор", ПолучитьСоставМонитора(ПараметрыСоставаМонитора));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ?(
		ДанныеДляЗаполнения.Монитор.НаборИсточниковДанных = Неопределено, 1,
		ДанныеДляЗаполнения.Монитор.НаборИсточниковДанных.Количество()));

КонецПроцедуры

// Функция возвращает подготовленный состав монитора целевых показателей
//
// Параметры:
//	ПараметрыСоставаМонитора - см. МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения.ПараметрыСоставаМонитора
//
// Возвращаемое значение:
//	Структура -
Функция ПолучитьСоставМонитора(ПараметрыСоставаМонитора) Экспорт
	ОтборВариантовАнализа			= ПараметрыСоставаМонитора.ОтборВариантовАнализа;
	ПринудительноОбновитьДанные		= ПараметрыСоставаМонитора.ПринудительноОбновитьДанные;
	ДемонстрационныйРежим			= ПараметрыСоставаМонитора.ДемонстрационныйРежим;
	СтруктураНастроек				= ПараметрыСоставаМонитора.СтруктураНастроек;
	ОтборЗонаВнимания				= ПараметрыСоставаМонитора.ОтборЗонаВнимания;
	ОтборСтатус						= ПараметрыСоставаМонитора.ОтборСтатус;
	Если ПараметрыСоставаМонитора.Свойство("ПериодичностьКонтроля") Тогда
		ПериодичностьКонтроля		= ПараметрыСоставаМонитора.ПериодичностьКонтроля;
	Иначе
		ПериодичностьКонтроля		= Перечисления.Периодичность.ПустаяСсылка();
	КонецЕсли;
	УчитыватьВариантыОтображения	= ПараметрыСоставаМонитора.УчитыватьВариантыОтображения;
	
	ПолученныйСоставМонитора			= Новый Структура("НаборИсточниковДанных, СтатистикаПоСтрокам, Пустой",,, Истина);
	НаборИсточниковДанных				= Новый ТаблицаЗначений;
	ТекущийПользователь					= Пользователи.ТекущийПользователь();
	ЗоныВнимания						= Перечисления.ЗоныВниманияВариантовАнализа;
	
	ЗапросСостава = Новый Запрос;
	ЗапросСостава.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	ЗапросСостава.УстановитьПараметр("ПериодичностьКонтроля", ПериодичностьКонтроля);
	
	Если ОтборВариантовАнализа = Неопределено Тогда
		
		Если СтруктураНастроек.Свойство("Дашборд")
			И ЗначениеЗаполнено(СтруктураНастроек.Дашборд) Тогда
			ЗапросСостава.УстановитьПараметр("Дашборд", СтруктураНастроек.Дашборд);
			ЗапросСостава.Текст = "ВЫБРАТЬ
			|	ВариантыАнализа.Цель,
			|	ВариантыАнализа.ЦелевойПоказатель,
			|	ВариантыАнализа.ВариантАнализа,
			|	ВариантыАнализа.ВариантОтображения,
			|	ВариантыАнализа.ВыводитьПодробности,
			|	ВариантыАнализа.ВыводитьИтогТаблицы,
			|	ВариантыАнализа.СостояниеПоНарастающемуИтогу,
			|	ВариантыАнализа.Группа,
			|	ВариантыАнализа.КраткоеНаименованиеЦелевогоПоказателя
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
			|		ВЫБОР
			|			КОГДА ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения ЕСТЬ NULL 
			|				ТОГДА ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения
			|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
			|		КОНЕЦ КАК ВариантОтображения,
			|		ВЫБОР
			|			КОГДА ПользовательскиеНастройкиВариантовАнализа.Детали ЕСТЬ NULL 
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.Детали
			|		КОНЕЦ КАК ВыводитьПодробности,
			|		ВЫБОР
			|			КОГДА ПользовательскиеНастройкиВариантовАнализа.ИтогТаблицы ЕСТЬ NULL 
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.ИтогТаблицы
			|		КОНЕЦ КАК ВыводитьИтогТаблицы,
			|		ВЫБОР
			|			КОГДА ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КатегорияЦели КАК Группа,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя
			|	ИЗ
			|		Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДашбордыМЦП.ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
			|			ПО ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка = ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа
			|	ГДЕ
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
			|		И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления
			|		И ПользовательскиеНастройкиВариантовАнализа.Ссылка = &Дашборд
			|		И &УсловиеПериодичностьКонтроля) КАК ВариантыАнализа
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВариантыАнализа.Цель.КатегорияЦели.РеквизитДопУпорядочиванияИерархического  ИЕРАРХИЯ,
			|	ВариантыАнализа.Цель.РеквизитДопУпорядочиванияИерархического,
			|	ВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания";
		Иначе
			ЗапросСостава.Текст = "ВЫБРАТЬ
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
			|	ЛОЖЬ КАК ВыводитьПодробности,
			|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения,
			|	ВЫБОР
			|		КОГДА ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КатегорияЦели КАК Группа,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя
			|ИЗ
			|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
			|ГДЕ
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
			|	И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления
			|	И &УсловиеПериодичностьКонтроля
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КатегорияЦели.РеквизитДопУпорядочиванияИерархического ИЕРАРХИЯ,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.РеквизитДопУпорядочиванияИерархического,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.РеквизитДопУпорядочивания";
		КонецЕсли;
		
	Иначе
		ЗапросСостава.УстановитьПараметр("ОтборВариантовАнализа", ОтборВариантовАнализа);
		
		Если СтруктураНастроек.Свойство("Дашборд")
			И ЗначениеЗаполнено(СтруктураНастроек.Дашборд) Тогда
			ЗапросСостава.УстановитьПараметр("Дашборд", СтруктураНастроек.Дашборд);
			ЗапросСостава.Текст = "ВЫБРАТЬ
			|	ВариантыАнализа.Цель,
			|	ВариантыАнализа.ЦелевойПоказатель,
			|	ВариантыАнализа.ВариантАнализа,
			|	ВЫБОР 
			|		КОГДА ВариантыАнализа.ВариантОтображения = ЗНАЧЕНИЕ(Перечисление.ВариантыОтображенияВариантовАнализа.ПустаяСсылка)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОтображенияВариантовАнализа.Кратко)
			|			ИНАЧЕ ВариантыАнализа.ВариантОтображения
			|	КОНЕЦ КАК ВариантОтображения,
			|	ВариантыАнализа.ВыводитьПодробности,
			|	ВариантыАнализа.ВыводитьИтогТаблицы,
			|	ВариантыАнализа.СостояниеПоНарастающемуИтогу,
			|	ВариантыАнализа.Группа,
			|	ВариантыАнализа.КраткоеНаименованиеЦелевогоПоказателя
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
			|		ВЫБОР
			|			КОГДА ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения ЕСТЬ NULL 
			|				ТОГДА ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения
			|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
			|		КОНЕЦ КАК ВариантОтображения,
			|		ВЫБОР
			|			КОГДА ПользовательскиеНастройкиВариантовАнализа.Детали ЕСТЬ NULL 
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.Детали
			|		КОНЕЦ КАК ВыводитьПодробности,
			|		ВЫБОР
			|			КОГДА ПользовательскиеНастройкиВариантовАнализа.ИтогТаблицы ЕСТЬ NULL 
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.ИтогТаблицы
			|		КОНЕЦ КАК ВыводитьИтогТаблицы,
			|		ВЫБОР
			|			КОГДА ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КатегорияЦели КАК Группа,
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя
			|	ИЗ
			|		Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДашбордыМЦП.ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
			|			ПО ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка = ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа
			|	ГДЕ
			|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
			|		И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления
			|		И ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка В(&ОтборВариантовАнализа)
			|		И ПользовательскиеНастройкиВариантовАнализа.Ссылка = &Дашборд
			|		И &УсловиеПериодичностьКонтроля) КАК ВариантыАнализа
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВариантыАнализа.Цель.КатегорияЦели.РеквизитДопУпорядочиванияИерархического ИЕРАРХИЯ,
			|	ВариантыАнализа.Цель.РеквизитДопУпорядочиванияИерархического,
			|	ВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания";
		Иначе
			ЗапросСостава.Текст = "ВЫБРАТЬ
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
			|	ЛОЖЬ КАК ВыводитьПодробности,
			|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения,
			|	ВЫБОР
			|		КОГДА ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КатегорияЦели КАК Группа,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя
			|ИЗ
			|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
			|ГДЕ
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
			|	И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления
			|	И ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка В(&ОтборВариантовАнализа)
			|	И &УсловиеПериодичностьКонтроля
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.КатегорияЦели.РеквизитДопУпорядочиванияИерархического ИЕРАРХИЯ,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.РеквизитДопУпорядочиванияИерархического,
			|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.РеквизитДопУпорядочивания";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодичностьКонтроля) Тогда
		ВыражениеУсловиеПериодичностьКонтроля = "ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПериодичностьКонтроля = &ПериодичностьКонтроля";
	Иначе
		ВыражениеУсловиеПериодичностьКонтроля = "ИСТИНА";
	КонецЕсли;
	ЗапросСостава.Текст = СтрЗаменить(ЗапросСостава.Текст, "&УсловиеПериодичностьКонтроля", ВыражениеУсловиеПериодичностьКонтроля);
	
	РезультатЗапросаСостава = ЗапросСостава.Выполнить();
	
	Если НЕ РезультатЗапросаСостава.Пустой() Тогда
		
		НаборИсточниковДанных = РезультатЗапросаСостава.Выгрузить();
		
		// Дополним таблицу источниками данных, состоянием и трендом
		НаборИсточниковДанных.Колонки.Добавить("ИсточникДанных");
		НаборИсточниковДанных.Колонки.Добавить("ЗонаВнимания");
		НаборИсточниковДанных.Колонки.Добавить("Пустой");
		НаборИсточниковДанных.Колонки.Добавить("РасчетыНеактуальны");
		НаборИсточниковДанных.Колонки.Добавить("ОшибкаРасчета");
		НаборИсточниковДанных.Колонки.Добавить("ПорядокЗоныВнимания");
		НаборИсточниковДанных.Колонки.Добавить("Статус");
		НаборИсточниковДанных.Колонки.Добавить("Позиция");
		
		Позиция = 1;
		Для Каждого ЭлементНабора Из НаборИсточниковДанных Цикл
			ВариантАнализа = ЭлементНабора.ВариантАнализа;
			
			// Получим данные варианта анализа
			ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(
				ВариантАнализа,
				ЭлементНабора.ВариантОтображения,
				ПринудительноОбновитьДанные,,
				ДемонстрационныйРежим);
			ЭлементНабора.ИсточникДанных = Новый ХранилищеЗначения(ИсточникДанныхВариантаАнализа);
			
			ЭлементНабора.Пустой = ИсточникДанныхВариантаАнализа.Пустой;
			ЭлементНабора.ОшибкаРасчета = ИсточникДанныхВариантаАнализа.ОшибкаРасчета;
			ЭлементНабора.РасчетыНеактуальны = НЕ ИсточникДанныхВариантаАнализа.РасчетыАктуальны;
			// Получим зону внимания
			ЗаполнитьЗначенияСвойств(ЭлементНабора, ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда);
			ЭлементНабора.Позиция = Позиция;
			
			Позиция = Позиция + 1;
		КонецЦикла;
		
		// Установим отбор по состоянию показателей
		Если ОтборСтатус = "ЦельДостигнута"
			Или ОтборСтатус = "ПриемлемоеСостояние" 
			Или ОтборСтатус = "НеприемлемоеСостояние"
			Или ОтборСтатус = "СостояниеНеОпределено"
			Или ОтборСтатус = "РассчитаноСОшибками" Тогда
			
			ОтборПоСтатусу = Новый Структура("Статус", ОтборСтатус);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоСтатусу);
			
		КонецЕсли;
		
		// Установим отбор по зоне внимания
		Если ОтборЗонаВнимания = 1 Тогда
			
			ОтборКритических = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКритических);
			
		ИначеЕсли ОтборЗонаВнимания = 2 Тогда
			
			ОтборВажных = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборВажных);
			
		ИначеЕсли ОтборЗонаВнимания = 3 Тогда
			
			ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
			ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборКСведению);
			
			Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
				
				НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
				
			КонецЦикла;
			
			ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
			ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборПоРассчитаннымСОшибками);
			
			Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
				
				НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
				
			КонецЦикла;
			
		ИначеЕсли ОтборЗонаВнимания = 4 Тогда
			
			ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКСведению);
			
		ИначеЕсли ОтборЗонаВнимания = 5 Тогда
			
			ОтборПоРассчитаннымСОшибкой = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоРассчитаннымСОшибкой);
			
		КонецЕсли;
		
		ПолученныйСоставМонитора.Пустой = (НаборИсточниковДанных.Количество() = 0);
		
		ПолученныйСоставМонитора.Вставить("НаборИсточниковДанных", НаборИсточниковДанных);
		
		ПолученныйСоставМонитора.Вставить("СтатистикаПоСтрокам",
			СтатистикаИсточниковДанныхПоСостояниям(
				НаборИсточниковДанных,
				УчитыватьВариантыОтображения));
	Иначе
		Если ЕстьДоступныеВариантыАнализа() Тогда
			ПолученныйСоставМонитора.НаборИсточниковДанных = НаборИсточниковДанных;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныйСоставМонитора.Вставить("Параметры", ПараметрыСоставаМонитора);
	
	Возврат ПолученныйСоставМонитора;
	
КонецФункции

// Функция возвращает подготовленный состав взаимосвязанных показателей монитора
// Параметры:
//	ПараметрыСоставаМонитора - Структура - структура параметров для подготовки данных. См. МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения.
//
// Возвращаемое значение:
//	См. ПолучитьВзаимосвязанныеВариантыАнализа
//
Функция ПолучитьСоставМонитораВзаимосвязанных(ПараметрыСоставаМонитора) Экспорт
	ВидПоиска						= Перечисления.ВидыПоискаСвязанныхПоказателей[ПараметрыСоставаМонитора.ВидПоиска];
	СвойстваВариантаАнализа			= МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(
		ПараметрыСоставаМонитора.СвойстваВариантаАнализа);
	АдресаДинамическихПараметров	= ПараметрыСоставаМонитора.АдресаДинамическихПараметров.Получить();
	ОтборЗонаВнимания				= ПараметрыСоставаМонитора.ОтборЗонаВнимания;
	
	ПолученныйСоставМонитора = ПолучитьВзаимосвязанныеВариантыАнализа(
		ВидПоиска,
		СвойстваВариантаАнализа.Ссылка,
		ОтборЗонаВнимания,
		АдресаДинамическихПараметров,
		ПараметрыСоставаМонитора.ДемонстрационныйРежим);
	
	ПолученныйСоставМонитора.Вставить("Параметры", ПараметрыСоставаМонитора);
		
	Возврат ПолученныйСоставМонитора;
	
КонецФункции

// Возвращает порядок вывода блоков информации в виде структуры
//
// Параметры:
//	СоставМонитора - Структура - таблица ссылок на показатели, которые должны попасть в отчет
// Возвращаемое значение:
//	Структура - описание порядка вывода блоков информации.
//
Функция СтруктураВывода(СоставМонитора) Экспорт
	СтруктураВывода = Новый Структура("ПорядокВывода", Новый Массив);
	
	НаборИсточниковДанных = СоставМонитора.НаборИсточниковДанных;
	Параметры = СоставМонитора.Параметры;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	Если Параметры.РежимАнализаВзаимосвязанных Тогда
		// Создадим элементы формы для анализируемого показателя
		ОтборАнализируемых = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка());
		ДобавитьЭлементВывода(СтруктураВывода, "Анализируемые", НаборИсточниковДанных.НайтиСтроки(ОтборАнализируемых));
		
		// Создадим элементы формы для взаимосвязанных показателей
		ОтборЗависимых = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
		ДобавитьЭлементВывода(СтруктураВывода, "Зависимые", НаборИсточниковДанных.НайтиСтроки(ОтборЗависимых));
		
		ОтборВлияющих = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
		ДобавитьЭлементВывода(СтруктураВывода, "Влияющие", НаборИсточниковДанных.НайтиСтроки(ОтборВлияющих));
	Иначе 
		Если Параметры.СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоСостоянию" Тогда
			Отбор = Новый Структура("Статус, ВариантОтображения", "НеприемлемоеСостояние", ВариантыОтображенияВариантовАнализа.Кратко);
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиНеприемлемоеСостояниеКратко", НаборИсточниковДанных.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус, ВариантОтображения", "ПриемлемоеСостояние", ВариантыОтображенияВариантовАнализа.Кратко);
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиПриемлемоеСостояниеКратко", НаборИсточниковДанных.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус, ВариантОтображения", "ЦельДостигнута", ВариантыОтображенияВариантовАнализа.Кратко);
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиЦельДостигнутаКратко", НаборИсточниковДанных.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус, ВариантОтображения", "СостояниеНеОпределено", ВариантыОтображенияВариантовАнализа.Кратко);
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиСостояниеНеопределеноКратко", НаборИсточниковДанных.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус, ВариантОтображения", "РассчитаноСОшибками", ВариантыОтображенияВариантовАнализа.Кратко);
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиРассчитаноСОшибкамиКратко", НаборИсточниковДанных.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
			НаборИсточниковДанныхНеКраткие = ПрименитьКТаблицеУсловиеНе(НаборИсточниковДанных.Скопировать(), Отбор);
			НаборИсточниковДанныхНеКраткие.Сортировать("Позиция");
			
			Отбор = Новый Структура("Статус", "НеприемлемоеСостояние");
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиНеприемлемоеСостояниеПодробно", НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус", "ПриемлемоеСостояние");
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиПриемлемоеСостояниеПодробно", НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус", "ЦельДостигнута");
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиЦельДостигнутаПодробно", НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус", "СостояниеНеОпределено");
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиСостояниеНеопределеноПодробно", НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор));
			
			Отбор = Новый Структура("Статус", "РассчитаноСОшибками");
			ДобавитьЭлементВывода(СтруктураВывода, "ПоказателиРассчитаноСОшибкамиПодробно", НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор));
		ИначеЕсли Параметры.СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			КатегорииЦелей = НаборИсточниковДанных.Скопировать(,"Группа"); // ТаблицаЗначений -
			КатегорииЦелей.Свернуть("Группа");
			
			Для Каждого КатегорияЦелей Из КатегорииЦелей Цикл 
				Отбор = Новый Структура("ВариантОтображения, Группа", ВариантыОтображенияВариантовАнализа.Кратко, КатегорияЦелей.Группа);
				ИмяЭлемента = "Показатели" + УникальныйИдентификаторВСтроку(КатегорияЦелей.Группа.УникальныйИдентификатор())
					+ "Кратко";
				ДобавитьЭлементВывода(СтруктураВывода, ИмяЭлемента, НаборИсточниковДанных.НайтиСтроки(Отбор));
			КонецЦикла;
			
			Отбор = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
			НаборИсточниковДанныхНеКраткие = ПрименитьКТаблицеУсловиеНе(НаборИсточниковДанных.Скопировать(), Отбор);
			НаборИсточниковДанныхНеКраткие.Сортировать("Позиция");
			
			Для Каждого КатегорияЦелей Из КатегорииЦелей Цикл 
				Отбор = Новый Структура("Группа", КатегорияЦелей.Группа);
				ИмяЭлемента = "Показатели" + УникальныйИдентификаторВСтроку(КатегорияЦелей.Группа.УникальныйИдентификатор())
					+ "Подробно";
				ДобавитьЭлементВывода(СтруктураВывода, ИмяЭлемента, НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВывода;
КонецФункции

#КонецОбласти

#Область РегламентированныйРасчетИсточниковДанныхЦелевыхПоказателей

// Выполняет расчет источников данных, доступных хотя бы одному пользователю.
// Вызывается из регламентного задания "РасчетИсточниковДанныхВариантовАнализа".
//
Процедура РасчетИсточниковДанныхВариантовАнализа() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетИсточниковДанныхВариантовАнализа);
	
	ИспользоватьМониторингЦелевыхПоказателей = ПолучитьФункциональнуюОпцию("ИспользоватьМониторингЦелевыхПоказателей");

	Если Не ИспользоватьМониторингЦелевыхПоказателей Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим все настроенные варианты анализа с учетом пользовательских настроек
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПользовательскихВариантовАнализа = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВариантыАнализаЦелевыхПоказателей"));
	ОписаниеТипаВариантаАнализа = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа"));
	ОписаниеТипаВариантаОтображения = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаПользовательскихВариантовАнализа.Колонки.Добавить("ВариантАнализа", ОписаниеТипаВариантаАнализа);
	ТаблицаПользовательскихВариантовАнализа.Колонки.Добавить("ВариантОтображения", ОписаниеТипаВариантаОтображения);
	
	Для Каждого Пользователь Из ТаблицаПользователей Цикл 
		
		ПользовательИнформационнойБазы = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		Если Не ПользовательИнформационнойБазы = Неопределено Тогда
			ИмяПользователяТаблицы = ПользовательИнформационнойБазы.Имя;
			
			ХранилищеВариантовАнализаПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантыАнализаПользовательскиеНастройки",, ИмяПользователяТаблицы);
			Если Не ХранилищеВариантовАнализаПользователя = Неопределено Тогда
				
				ВариантыАнализаПользователя = ХранилищеВариантовАнализаПользователя.Получить();
				Для Каждого ВариантАнализаПользователя Из ВариантыАнализаПользователя Цикл 
					НовыйВариантВТаблице = ТаблицаПользовательскихВариантовАнализа.Добавить();
					НовыйВариантВТаблице.ВариантАнализа = ВариантАнализаПользователя.ВариантАнализа;
					НовыйВариантВТаблице.ВариантОтображения = ВариантАнализаПользователя.ВариантОтображения;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПользовательскихВариантовАнализа.Свернуть("ВариантАнализа, ВариантОтображения");
	
	Запрос.УстановитьПараметр("ВариантыАнализа", ТаблицаПользовательскихВариантовАнализа);
	Запрос.Текст =
	"ВЫБРАТЬ
		|	ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
		|	ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
		|ПОМЕСТИТЬ ПользовательскиеНастройкиВариантовАнализа
		|ИЗ
		|	&ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыАнализа.ВариантАнализа,
		|	ВариантыАнализа.ВариантОтображения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
		|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения КАК ВариантОтображения
		|	ИЗ
		|		Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
		|	ГДЕ
		|		(НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
		|		ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
		|	ИЗ
		|		ПользовательскиеНастройкиВариантовАнализа КАК ПользовательскиеНастройкиВариантовАнализа) КАК ВариантыАнализа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВариантыАнализа.ВариантАнализа,
		|	ВариантыАнализа.ВариантОтображения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВариантовАнализа = РезультатЗапроса.Выгрузить();
	Для Каждого ТекущийВариантАнализа Из ТаблицаВариантовАнализа Цикл 
		
		ПолучитьИсточникДанныхВариантаАнализа(ТекущийВариантАнализа.ВариантАнализа, ТекущийВариантАнализа.ВариантОтображения, Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область АнализВзаимосвязанныхЦелевыхПоказателей

// Возвращает набор источников данных взаимосвязанных вариантов анализа
//
// Параметры:
//	ВидПоиска - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - способ поиска связей
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого ищутся взаимосвязанные
//	ОтборЗонаВнимания - Число - характеризует статус или набор статусов
//	АдресаДинамическихПараметров - ТаблицаЗначений - содержит варианты анализа и адреса их дин. параметров.
//	ДемоДанные - Булево - Флаг построения отчета по демо-данным.
//
// Возвращаемое значение:
//	Структура - содержит набор источников данных и обобщенную информацию об источниках взаимосвязанных показателей:
//	 *НаборИсточниковДанных - ТаблицаЗначений - Таблица источников:
//	   **ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Вариант анализа.
//	   **Цель - СправочникСсылка.СтруктураЦелей - Цель.
//	   **ЦельЦелевойПоказатель - Строка - Целевой показатель.
//	   **СостояниеПоНарастающемуИтогу - Булево - флаг расчета состояния по нарастающему итогу.
//	   **ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - Вариант отображения.
//	   **ВыводитьПодробности - Булево - Флаг вывода подробностей.
//	   **ВыводитьИтогТаблицы - Булево - Флаг вывода итогов таблицы.
//	   **Позиция - Число - реквизит дополнительного упорядочивания варианта анализа.
//	   **НаименованиеЦелевогоПоказателя - Строка - Краткое наименование целевого показателя.
//	   **Группа - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - группа.
//	   **ИсточникДанных - См. ПолучитьИсточникДанныхВариантаАнализа
//	   **ЗонаВнимания - См. ЗонаАнализаЗначения
//	   **Пустой - Булево - 
//	   **РасчетыНеактуальны - Булево - 
//	   **ОшибкаРасчета - Булево - 
//	   **ПорядокЗоныВнимания - Неопределено, ПеречислениеСсылка.ЗоныВниманияВариантовАнализа - 
//	 *СтатистикаПоСтрокам - См. СтатистикаИсточниковДанныхПоЗонамВнимания
//	 *Пустой - Булево - Флаг пустого состава монитора.
//
Функция ПолучитьВзаимосвязанныеВариантыАнализа(ВидПоиска, ВариантАнализа, ОтборЗонаВнимания, АдресаДинамическихПараметров, ДемоДанные = Ложь) Экспорт
	
	ПолученныйСоставМонитора = Новый Структура;
	ПолученныйСоставМонитора.Вставить("Пустой", Истина);
	
	НаборИсточниковДанных = Новый ТаблицаЗначений;
	
	ВидыПоиска = Перечисления.ВидыПоискаСвязанныхПоказателей;
	ЗоныВнимания = Перечисления.ЗоныВниманияВариантовАнализа;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.Текст = ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа();
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	Если ВидПоиска = ВидыПоиска.ВзаимосвязанныеПоказатели
		И (НЕ РезультатПакетаЗапросов[1].Пустой() ИЛИ Не РезультатПакетаЗапросов[2].Пустой()) Тогда
		
		Если Не РезультатПакетаЗапросов[1].Пустой() Тогда
			НаборИсточниковДанных = РезультатПакетаЗапросов[1].Выгрузить();
			
		КонецЕсли;
		
		Если Не РезультатПакетаЗапросов[2].Пустой() Тогда
			Если НаборИсточниковДанных.Количество() = 0 Тогда
				НаборИсточниковДанных = РезультатПакетаЗапросов[2].Выгрузить();
				
			Иначе
				ВыборкаВариантов = РезультатПакетаЗапросов[2].Выбрать();
				
				Пока ВыборкаВариантов.Следующий() Цикл 
					НоваяСтрока = НаборИсточниковДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВариантов);
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПоиска = ВидыПоиска.ЗависимыеПоказатели И Не РезультатПакетаЗапросов[1].Пустой() Тогда
		Если Не РезультатПакетаЗапросов[1].Пустой() Тогда
			НаборИсточниковДанных = РезультатПакетаЗапросов[1].Выгрузить();
			
		КонецЕсли;
		
	ИначеЕсли ВидПоиска = ВидыПоиска.ВлияющиеПоказатели И Не РезультатПакетаЗапросов[2].Пустой() Тогда
		Если Не РезультатПакетаЗапросов[2].Пустой() Тогда
			НаборИсточниковДанных = РезультатПакетаЗапросов[2].Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РезультатПакетаЗапросов[3].Пустой() Тогда
		ВыборкаВариантов = РезультатПакетаЗапросов[3].Выбрать();
		
		Пока ВыборкаВариантов.Следующий() Цикл 
			НоваяСтрока = НаборИсточниковДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВариантов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополним таблицу служебными колонками
	НаборИсточниковДанных.Колонки.Добавить("ИсточникДанных");
	НаборИсточниковДанных.Колонки.Добавить("ЗонаВнимания");
	НаборИсточниковДанных.Колонки.Добавить("Пустой");
	НаборИсточниковДанных.Колонки.Добавить("РасчетыНеактуальны");
	НаборИсточниковДанных.Колонки.Добавить("ОшибкаРасчета");
	НаборИсточниковДанных.Колонки.Добавить("ПорядокЗоныВнимания");
	
	Для Каждого ЭлементНабора Из НаборИсточниковДанных Цикл 
		ВариантАнализа = ЭлементНабора.ВариантАнализа;
		
		// Получим адрес динамических параметров
		ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
		НайденныеСоставМонитора = АдресаДинамическихПараметров.НайтиСтроки(ОтборПоВариантуАнализа);
		Если НайденныеСоставМонитора.Количество() > 0 Тогда
			АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
			
			Если Не ПустаяСтрока(АдресДинамическихПараметров) Тогда
				ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
				
				ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, , ДинамическиеПараметры, ДемоДанные);
			Иначе
				ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, , , ДемоДанные);
				
			КонецЕсли;
		Иначе
		
			ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, , , ДемоДанные);
			
		КонецЕсли;
		
		// Получим данные варианта анализа
		ЭлементНабора.ИсточникДанных = Новый ХранилищеЗначения(ИсточникДанныхВариантаАнализа);
		
		ЭлементНабора.Пустой = ИсточникДанныхВариантаАнализа.Пустой;
		ЭлементНабора.ОшибкаРасчета = ИсточникДанныхВариантаАнализа.ОшибкаРасчета;
		// Получим зону внимания
		ЭлементНабора.ЗонаВнимания = ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда.ЗонаВнимания;
		ЭлементНабора.ПорядокЗоныВнимания = ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания;
		
	КонецЦикла;
	
	// Установим отбор
	Если ОтборЗонаВнимания = 1 Тогда
		
		ОтборКритических = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКритических);
		
	ИначеЕсли ОтборЗонаВнимания = 2 Тогда
		
		ОтборВажных = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборВажных);
		
	ИначеЕсли ОтборЗонаВнимания = 3 Тогда
		
		ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборКСведению);
		
		Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
			
			НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
			
		КонецЦикла;
		
		ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборПоРассчитаннымСОшибками);
		
		Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
			
			НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
			
		КонецЦикла;
		
	ИначеЕсли ОтборЗонаВнимания = 4 Тогда
		
		ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКСведению);
		
	ИначеЕсли ОтборЗонаВнимания = 5 Тогда
		
		ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоРассчитаннымСОшибками);
		
	КонецЕсли;
	
	Если Не НаборИсточниковДанных.Количество() = 0 Тогда
		ПолученныйСоставМонитора.Пустой = Ложь;
		
	КонецЕсли;
	
	ПолученныйСоставМонитора.Вставить("НаборИсточниковДанных", НаборИсточниковДанных);
	
	ПолученныйСоставМонитора.Вставить("СтатистикаПоСтрокам", СтатистикаИсточниковДанныхПоЗонамВнимания(НаборИсточниковДанных, Истина));
	
	Возврат ПолученныйСоставМонитора;
	
КонецФункции

// Возвращает доступность зависимых/влияющих вариантов анализа для текущего пользователя
// и переданного варианта анализа.
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого ищутся взаимосвязанные.
//
// Возвращаемое значение:
//	Структура - содержит признаки доступности:
//		*ЕстьДоступныеВлияющие - Булево - 
//		*ЕстьДоступныеЗависимые - Булево - 
//
Функция ПолучитьПараметрыДоступностиАнализаВзаимосвязанных(ВариантАнализа) Экспорт
	
	СтруктураДоступныхВзаимосвязей = Новый Структура("ЕстьДоступныеВлияющие, ЕстьДоступныеЗависимые", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.Текст = ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа();
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	// Есть доступные зависимые измеримые цели и варианты анализа
	СтруктураДоступныхВзаимосвязей.ЕстьДоступныеЗависимые = (НЕ РезультатПакетаЗапросов[1].Пустой());
	
	// Есть доступные влияющие измеримые цели и варианты анализа
	СтруктураДоступныхВзаимосвязей.ЕстьДоступныеВлияющие = (НЕ РезультатПакетаЗапросов[2].Пустой());
	
	Возврат СтруктураДоступныхВзаимосвязей;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатнойФормыВариантаАнализаИСводногоОтчета

// Заполняет табличный документ информацией отдельных вариантов анализа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - табличный документ для заполнения
//	СоставМонитора - Структура - см. ПодготовитьДанныеДляЗаполнения:
//	 *Параметры - Структура -:
//	  **РежимАнализаВзаимосвязанных - Булево - 
//	СтруктураВывода - Структура - описание порядка вывода блоков информации.
//
Процедура ВывестиОтдельныеПоказатели(ТабличныйДокумент, СоставМонитора, СтруктураВывода) Экспорт
	ВыводитьОбозначения = Ложь;
	
	Если ТипЗнч(СоставМонитора) = Тип("ДанныеФормыКоллекция") Тогда
		СоставМонитора = СоставМонитора.Выгрузить(,"ВариантАнализа, АдресДинамическихПараметров"); // ТаблицаЗначений - 
		КолонкаТаблицы = СоставМонитора.Колонки.ВариантАнализа; // КолонкаТаблицыЗначений - 
		КолонкаТаблицы.Имя = "Значение";
	КонецЕсли;
	
	Параметры = СоставМонитора.Параметры;
	
	// Вывод показателей
	Если Параметры.РежимАнализаВзаимосвязанных Тогда
		Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
			Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
				Для Каждого ОписаниеИсточникаДанных Из СтруктураВывода[ЭлементВывода] Цикл
					ВывестиОтдельныйПоказатель(ТабличныйДокумент, ОписаниеИсточникаДанных);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
			Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
				Для Каждого ОписаниеИсточникаДанных Из СтруктураВывода[ЭлементВывода] Цикл
					ВывестиОтдельныйПоказатель(ТабличныйДокумент, ОписаниеИсточникаДанных);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Вывод обозначений
	Если ВыводитьОбозначения И СоставМонитора.Количество() > 1 Тогда
		МакетОбозначений = Отчеты.МониторЦелевыхПоказателей.ПолучитьМакет("МакетОбозначенийЭлектроннойФормыПоказателя");
		ОбластьОбозначений = МакетОбозначений.ПолучитьОбласть("Обозначения");
		ТабличныйДокумент.Вывести(ОбластьОбозначений);
	КонецЕсли;
КонецПроцедуры

// Заполняет табличный документ информацией отдельного варианта анализа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - табличный документ для заполнения
//	ОписаниеИсточникаДанных - Структура - полное описание источника данных.
//
Процедура ВывестиОтдельныйПоказатель(ТабличныйДокумент, ОписаниеИсточникаДанных) Экспорт
	ИсточникСПараметрами = ОписаниеИсточникаДанных.ИсточникДанных.Получить(); // См. ИнициализироватьИсточникДанных
	
	Если Не ИсточникСПараметрами.ОшибкаРасчета И Не ИсточникСПараметрами.Пустой И ИсточникСПараметрами.РасчетыАктуальны Тогда
		ПодготовитьИсточник(ИсточникСПараметрами, ОписаниеИсточникаДанных.ВариантАнализа);
	КонецЕсли;
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	ЗаполнитьСправочныеДанныеПоказателя(ТабличныйДокумент, ОписаниеИсточникаДанных.ВариантАнализа, ИсточникСПараметрами);
	ЗаполнитьДанныеДиаграммы(ТабличныйДокумент, ОписаниеИсточникаДанных.ВариантАнализа, ИсточникСПараметрами);
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
КонецПроцедуры

// Устанавливает стандартные параметры вывода для табличного документа
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - табличный документ для настройки.
//
Процедура УстановитьПараметрыВывода(ТабличныйДокумент) Экспорт
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Поля
	ТабличныйДокумент.ПолеСверху = 5;
	ТабличныйДокумент.ПолеСнизу = 10;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	
	ТабличныйДокумент.РазмерКолонтитулаСверху = 5;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 5;
	
	// Колонтитулы
	ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = СтрШаблон(НСтр("ru= 'Страница [&%1] из [&%2]'"), "НомерСтраницы", "СтраницВсего");
	// Прочие параметры
	ТабличныйДокумент.Защита = Истина;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.КлючПараметровПечати = "ПечатнаяФормаМонитораЦелевыхПоказателей";
	ТабличныйДокумент.ИспользуемоеИмяФайла = НСтр("ru= 'Монитор целевых показателей'");
КонецПроцедуры

#КонецОбласти

#Область АгрегатныеФункцииСистемыКомпоновкиДанных

// Возвращает последнее значение из переданного из СКД массива итогов
//
// Параметры:
//	Данные - Массив из Произвольный - массив итогов.
//	РазвернутьМассив - Булево - Истина, если нужно получить первое значение массива
//
// Возвращаемое значение:
//	Произвольный - последнее значение в массиве.
//
Функция ПолучитьПоследнееЗначениеМассива(Данные, РазвернутьМассив = Ложь) Экспорт
	
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		Возврат Данные[?(РазвернутьМассив, 0, КоличествоЭлементов - 1)];
	Иначе
		Возврат Null;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РасчетИсточниковДанныхИЗначенийВариантовАнализа

// Возвращает источник данных варианта анализа
// Если источник данных в кэше устарел, то производится перерасчет и обновление кэша.
//
// Параметры:
//	ВариантАнализа - Структура
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ПринудительноОбновитьДанные - Булево - указывает, что проверять актуальность данных не нужно.
//	ДинамическиеПараметры - Неопределено -
//						- Структура - содержит примененные дин. параметры варианта анализа:
//							*ПериодичностьРасчетаПоказателя - ПеречислениеСсылка.Периодичность - периодичность расчета.
//							*ОбъектАнализа - Строка - имя поля-измерения, которое будет в роли объекта анализа.
//	ДемоДанные - Булево - Флаг построения отчета по демо-данным.
//
// Возвращаемое значение:
//	Структура - источник данных варианта анализа.
//
Функция ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ВариантОтображения, ПринудительноОбновитьДанные = Ложь, ДинамическиеПараметры = Неопределено, ДемоДанные = Ложь) Экспорт
	// Инициализация переменных
	ИсточникДанных = Новый Структура;
	ПолучатьДанныеИзИБ = Истина;
	
	Если ДемоДанные Тогда
		ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаИзДемоДанных(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры);
	Иначе
		// Проверим устарели ли данные показателя
		// Если ПериодАктуальностиРасчета = 0, то данные всегда берутся из ИБ.
		Если Не ВариантАнализа.ПериодАктуальностиРасчета = 0 И Не ПринудительноОбновитьДанные И Не ВариантАнализа.ПометкаУдаления Тогда
			// Проверим есть ли данные в кэше и их актуальность
			Если СвойстваДанныхВариантаАнализаВКэше(ВариантАнализа, ВариантОтображения).ДанныеАктуальны Тогда
				ПолучатьДанныеИзИБ = Ложь;
				
				// Получим данные из кэша
				ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаИзКэша(ВариантАнализа, ВариантОтображения);
			КонецЕсли;
		КонецЕсли;
		
		// Получим данные из ИБ
		Если ПолучатьДанныеИзИБ Тогда
			ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаИзИнформационнойБазы(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры);
			
			Если Не ВариантАнализа.ПометкаУдаления И ДинамическиеПараметры = Неопределено Тогда
				ЗаписатьДанныеВариантаАнализаВКэш(ИсточникДанных, ВариантОтображения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсточникДанных;
КонецФункции

// Возвращает источник данных варианта анализа, на основании демонстрационных данных.
//
// Параметры:
//	ВариантАнализа - Структура - реквизиты варианта анализа
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ДинамическиеПараметры - Неопределено -
//						- Структура - содержит примененные дин. параметры варианта анализа:
//							*ПериодичностьРасчетаПоказателя - ПеречислениеСсылка.Периодичность - периодичность расчета.
//							*ОбъектАнализа - Строка - имя поля-измерения, которое будет в роли объекта анализа.
//	ТаблицаДанных - Неопределено, 
//				  - ТаблицаЗначений - таблица с возможными колонками (см. Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаДемоДанных.ИсточникДемоДанных):
//					*Период - Дата - 
//					*ОбъектАнализа - Произвольный - 
//					*ЗначениеПоказателя - Число -
//					*ЦелевоеЗначение - Число -
//					*ЦелевойДиапазонМаксимум - Число -
//					*ЦелевойДиапазонМинимум - Число -
//					*ПриведенноеГраничноеПозитивноеОтклонение - Число - 
//					*ПриведенноеГраничноеНегативноеОтклонение - Число -
//					*ГраничноеПозитивноеОтклонение - Число - 
//					*ГраничноеНегативноеОтклонение - Число - 
//					*ЗначениеПоказателяДополнительное - Число - 
//
// Возвращаемое значение:
//	См. ИнициализироватьИсточникДанных
Функция ПолучитьИсточникДанныхВариантаАнализаИзДемоДанных(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры = Неопределено, ТаблицаДанных = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	#Область ИнициализацияИсточникаДанных
	ИсточникДанных = ИнициализироватьИсточникДанных(ВариантАнализа);
	#КонецОбласти
	
	#Область ИнициализацияПараметровРасчета
	ПараметрыРасчета = ПараметрыРасчета(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры);
	ИсточникДанных.ПараметрыРасчета = ПараметрыРасчета;
	#КонецОбласти 
	
	ИсточникДанных.ДляТаблицы = ПараметрыРасчета.ДляТаблицы;
	
	#Область НастройкаИКонтрольСхемыКомпоновкиДанных
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхДляРасчета(ПараметрыРасчета);
	
	Если Не КонтрольКорректностиНастроекИДанных("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	#КонецОбласти 
	
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа;
	// Получим таблицу с непрерывным интервалом значений периодов
	ТаблицаПериодов = ПериодыЗаданнойПериодичности(ПериодАнализа.ДатаНачала,
			ПериодАнализа.ДатаОкончания,
			ПараметрыРасчета.ПериодичностьРасчетаПоказателя);
	
	Если ПараметрыРасчета.ЕстьСравнение Тогда
		ПериодСравнения = ПараметрыРасчета.ПериодСравнения;
		ТаблицаПериодов = ДополнитьТаблицуПериодов(ТаблицаПериодов,
				ПериодСравнения.ДатаНачала,
				ПериодСравнения.ДатаОкончания,
				ПараметрыРасчета.ПериодичностьРасчетаПоказателя);
	КонецЕсли;
	
	#Область НастройкаКомпоновщикаНастроек
	КомпоновщикНастроек = КомпоновщикНастроекДляРасчета(СхемаКомпоновкиДанных, ПараметрыРасчета, ДинамическиеПараметры);
	#КонецОбласти 
	
	#Область КэшированиеПараметровРасчетаИсточникаДанных
	// Заполним динамические свойства варианта анализа в источнике данных
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя = ПараметрыРасчета.ПериодичностьРасчетаПоказателя;
	
	Цель = ВариантАнализа.Владелец;
	
	Если Не СхемаКомпоновкиДанных.Параметры.Найти("ВалютаРасчета") = Неопределено 
		И СхемаКомпоновкиДанных.Параметры.Найти("ВалютаРасчета").Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
		
		ВалютаРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВалютаРасчета");
		ДинамическиеСвойстваВариантаАнализа.Размерность = ВалютаРасчета.Значение;
	Иначе 
		ДинамическиеСвойстваВариантаАнализа.Размерность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Цель, "Размерность");
	КонецЕсли;
	
	ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Цель);
	ДоступныеЗначенияАнализа = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Цель);
	ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	
	Если ДоступныеОбъектыАнализа.НайтиПоЗначению(ПараметрыРасчета.ОбъектАнализаПоле) <> Неопределено Тогда
		ДоступноеПоле = ДоступныеПоляВыбора.НайтиПоле(ПараметрыРасчета.ОбъектАнализаПоле);
		ОбъектАнализаЗаголовок = ДоступноеПоле.Заголовок;
	Иначе
		ОбъектАнализаЗаголовок = "";
	КонецЕсли;
	ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа = ПараметрыРасчета.ОбъектАнализаИмяПоля;
	ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление = ОбъектАнализаЗаголовок;
	
	Если ДоступныеЗначенияАнализа.НайтиПоЗначению(ПараметрыРасчета.ЗначениеАнализаПоле) <> Неопределено Тогда
		ДоступноеПоле = ДоступныеПоляВыбора.НайтиПоле(ПараметрыРасчета.ЗначениеАнализаПоле);
		ЗначениеАнализаЗаголовок = ДоступноеПоле.Заголовок;
	Иначе
		ЗначениеАнализаЗаголовок = "";
	КонецЕсли;
	ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
	ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление = ЗначениеАнализаЗаголовок;
	
	Если ДоступныеЗначенияАнализа.НайтиПоЗначению(ПараметрыРасчета.ЗначениеАнализаДополнительноеПоле) <> Неопределено Тогда
		ДоступноеПоле = ДоступныеПоляВыбора.НайтиПоле(ПараметрыРасчета.ЗначениеАнализаДополнительноеПоле);
		ЗначениеАнализаДополнительноеЗаголовок = ДоступноеПоле.Заголовок;
	Иначе
		ЗначениеАнализаДополнительноеЗаголовок = "";
	КонецЕсли;
	ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаДополнительное = ПараметрыРасчета.ЗначениеАнализаДополнительноеИмяПоля;
	ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаДополнительноеПредставление = ЗначениеАнализаДополнительноеЗаголовок;
	#КонецОбласти
	
	#Область ПолучениеДанных
	ИсточникДанных.ДатаРасчета = ТекущаяДатаСеанса();
	Если ТаблицаДанных <> Неопределено Тогда
		ИсточникДанных.Данные = ТаблицаДанных;
	Иначе
		ИсточникДанных.Данные = Справочники.ВариантыАнализаЦелевыхПоказателей.ДемонстрационныеДанныеВариантаАнализа(ВариантАнализа);
	КонецЕсли;
	#КонецОбласти
	
	#Область УстановкаЗаголовковСлужебныхКолонок	
	КолонкиИсточникаДанных = ИсточникДанных.Данные.Колонки;
	
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа);
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление;
	КонецЕсли;
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти(ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление;
	КонецЕсли;
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти(ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаДополнительное);
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаДополнительноеПредставление;
	КонецЕсли;
	
	// Целевые значения
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = НСтр("ru= 'Цель'");
	КонецЕсли;
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = НСтр("ru= 'Граница негативных отклонений'");
	КонецЕсли;
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = НСтр("ru= 'Граница позитивных отклонений'");
	КонецЕсли;
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = НСтр("ru= 'Целевой диапазон максимум'");
	КонецЕсли;
	ИскомаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
	Если ИскомаяКолонка <> Неопределено Тогда
		ИскомаяКолонка.Заголовок = НСтр("ru= 'Целевой диапазон минимум'");
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПостобработкаИКонтрольКорректностиНастроекИДанных
	Если Не КонтрольКорректностиНастроекИДанных("Данные", ИсточникДанных.Данные, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	// Дополним таблицу целевыми значениями
	Если ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ДинамикаИзменения
		Или ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		ЦелевыеЗначенияНаДаты = ПолучитьЦелевыеЗначенияНаДаты(ИсточникДанных.Данные.ВыгрузитьКолонку("Период"), ВариантАнализа);
		
		Если ЦелевыеЗначенияНаДаты.Количество() > 0 Тогда
			Для Каждого СтрокаДанных Из ИсточникДанных.Данные Цикл 
				ЦелевыеЗначенияНаДату = ЦелевыеЗначенияНаДаты.Найти(СтрокаДанных.Период, "Период");
				Если ЦелевыеЗначенияНаДату <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, ЦелевыеЗначенияНаДаты.Найти(СтрокаДанных.Период, "Период"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Зафиксируем актуальность факта расчета
	ИсточникДанных.ДанныеАктуальны = Истина;
	
	СвернутьДанные(ИсточникДанных, ПараметрыРасчета);
	
	Если Не КонтрольКорректностиНастроекИДанных("АктуальностьРасчетов", ИсточникДанных.Данные, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	// Обработаем таблицу значений для двух видов анализа по объектам
	Если ПараметрыРасчета.ЕстьНарастающийИтог Тогда 
		РассчитатьНарастающийИтог(ИсточникДанных.Данные, ПараметрыРасчета);
	КонецЕсли;
	
	// Проверим, что после анализа и подготовки источника, в нем все еще достаточно данных.
	Если Не КонтрольКорректностиНастроекИДанных("Данные", ИсточникДанных.Данные, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	#КонецОбласти 
	
	#Область КэшированиеСводнойИнформацииПоПериодам
	ЗаполнитьСводнуюИнформациюОбИсточникеДанных(ИсточникДанных, ПараметрыРасчета);
	#КонецОбласти
	
	#Область ДополнениеДанныхПрогнозом
	ДополнитьДанныеПрогнозом(ИсточникДанных, ПараметрыРасчета);
	#КонецОбласти 
	
	#Область КэшированиеЗоныАнализаИТренда
	ЗаполнитьЗоныАнализаИТренд(ИсточникДанных, ПараметрыРасчета);
	#КонецОбласти 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИсточникДанных;
КонецФункции

#КонецОбласти

#Область РаботаСПериодамиИДатами

// Возвращает дату, смещенную на указанное количество периодов
//
// Параметры:
//	Дата - Дата - исходная дата
//	Периодичность - ПеречислениеСсылка.Периодичность - шаг периода
//	ЧислоПериодов - Число - число периодов, на которые нужно сдвинуть исходную дату
//  НеделяДекадаСПервогоДня - Булево - указывает, будет ли для периодичности "Неделя" и "Декада"
// 		расчетная дата смещаться на начало недели или декады.
//
// Возвращаемое значение:
//	Дата - дата, смещенная на указанное количество периодов.
//
Функция ДатаСоСмещением(Дата, Периодичность, ЧислоПериодов, НеделяДекадаСПервогоДня = Истина) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат ДобавитьМесяц(Дата, 12 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ДобавитьМесяц(Дата, 6 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат ДобавитьМесяц(Дата, 3 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат ДобавитьМесяц(Дата, ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если НеделяДекадаСПервогоДня Тогда
			Возврат ДатаСоСмещениемДляДекады(Дата, ЧислоПериодов);
		Иначе
			Возврат Дата + 3600 * 24 * 10 * ЧислоПериодов;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Если НеделяДекадаСПервогоДня Тогда
 			Возврат НачалоНедели(Дата + 3600 * 24 * 7 * ЧислоПериодов);
		Иначе
			Возврат Дата + 3600 * 24 * 7 * ЧислоПериодов;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат Дата  + 3600 * 24 * ЧислоПериодов;
		
	Иначе
		Возврат Дата;
		
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление периода варианта анализа 
// 
// Параметры:
//	ИсточникДанных - См. ИнициализироватьИсточникДанных
//
// Возвращаемое значение:
//	Строка - строковое представление периода варианта анализа.
// 
Функция ПредставлениеПериодаВариантаАнализа(Знач ИсточникДанных) Экспорт
	Перем ТекстовоеПредставлениеПериода;
	
	ВариантАнализа = ИсточникДанных.ВариантАнализа; // Структура -
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
		
		СтандартныйПериодАнализа = ВариантАнализа.ПериодАнализа.Получить(); // СтандартныйПериод -
		ТекстовоеПредставлениеПериода = Строка(Формат(СтандартныйПериодАнализа.ДатаОкончания, "ДЛФ=D"));
	ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
		
		ПериодАнализа = ВариантАнализа.ПериодАнализа.Получить();
		Если ТипЗнч(ПериодАнализа) = Тип("СтандартныйПериод") Тогда
			ТекстовоеПредставлениеПериода = ПредставлениеСтандартногоПериода(ПериодАнализа, Ложь);
		Иначе
			ТекстовоеПредставлениеПериода = Строка(ПериодАнализа);
		КонецЕсли;
	ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		СтандартныйПериодАнализа = ВариантАнализа.ПериодАнализа.Получить(); // СтандартныйПериод - 
		СтандартныйПериодСравнения = ВариантАнализа.ПериодСравнения.Получить(); // СтандартныйПериод - 
		ТекстовоеПредставлениеПериода = Строка(Формат(СтандартныйПериодСравнения.ДатаОкончания, "ДЛФ=D")) + "/"
			+ Строка(Формат(СтандартныйПериодАнализа.ДатаОкончания, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат ТекстовоеПредставлениеПериода;
КонецФункции

// Возвращает таблицу значений, дополненную невошедшими датами 
// для последующего использования в качестве объекта СКД.
//
// Параметры:
//  ТаблицаПериодов - ТаблицаЗначений - таблица периодов:
//    *Период - Дата - 
//  НачалоПериода 	- Дата - начало периода
//  КонецПериода	- Дата - окончание периода
//  Периодичность	- ПеречислениеСсылка.Периодичность - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД".
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений, содержащая колонку "Период" и значения периодов:
//    *Период - Дата - 
//
Функция ДополнитьТаблицуПериодов(Знач ТаблицаПериодов, НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	РазностьДат = ОбщегоНазначенияУТ.РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 0;
	Пока Счетчик <= РазностьДат Цикл 
		ДобавляемыйПериод = ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		ИскомаяСтрока = ТаблицаПериодов.Найти(ДобавляемыйПериод, "Период");
		Если ИскомаяСтрока = Неопределено Тогда
			НовыйПериод = ТаблицаПериодов.Добавить();
			НовыйПериод.Период = ДобавляемыйПериод;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ТаблицаПериодов.Сортировать("Период");
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает таблицу значений для последующего использования в качестве внешнего источника.
//
// Параметры:
//  НачалоПериода 	- Дата - начало периода.
//  КонецПериода	- Дата - окончание периода.
//  Периодичность	- ПеречислениеСсылка.Периодичность - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД".
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "Период" и значения периодов.
//
Функция ПериодыЗаданнойПериодичности(НачалоПериода, КонецПериода, Периодичность) Экспорт 
	
	Перем ТаблицаПериодов;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период");
	
	НовыйПериод = ТаблицаПериодов.Добавить();
	НовыйПериод.Период = НачалоПериода;
	
	РазностьДат = ОбщегоНазначенияУТ.РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 1;
	Пока Счетчик <= РазностьДат Цикл 
		
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.Период = ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает таблицу значений для последующего использования в качестве внешнего источника.
//
// Параметры:
//  НачалоПериода 	- Дата - начало периода.
//  КонецПериода	- Дата - окончание периода.
//  Периодичность	- ПеречислениеСсылка.Периодичность - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД".
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "ДатаРасчета" и значения периодов.
//
Функция ПериодыСДатойНаКонецПериода(НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	Перем ТаблицаПериодов;
	
	Месяцы = Новый Соответствие;
	Месяцы.Вставить(1, НСтр("ru = 'Январь'"));
	Месяцы.Вставить(2, НСтр("ru = 'Февраль'"));
	Месяцы.Вставить(3, НСтр("ru = 'Март'"));
	Месяцы.Вставить(4, НСтр("ru = 'Апрель'"));
	Месяцы.Вставить(5, НСтр("ru = 'Май'"));
	Месяцы.Вставить(6, НСтр("ru = 'Июнь'"));
	Месяцы.Вставить(7, НСтр("ru = 'Июль'"));
	Месяцы.Вставить(8, НСтр("ru = 'Август'"));
	Месяцы.Вставить(9, НСтр("ru = 'Сентябрь'"));
	Месяцы.Вставить(10, НСтр("ru = 'Октябрь'"));
	Месяцы.Вставить(11, НСтр("ru = 'Ноябрь'"));
	Месяцы.Вставить(12, НСтр("ru = 'Декабрь'"));
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаРасчета");
	ТаблицаПериодов.Колонки.Добавить("ИмяМесяца");
	ТаблицаПериодов.Колонки.Добавить("Месяц");
	
	НовыйПериод = ТаблицаПериодов.Добавить();
	НовыйПериод.ДатаРасчета = КонецПериода(НачалоПериода, Периодичность);
	НовыйПериод.Месяц = Месяц(НовыйПериод.ДатаРасчета);
	НовыйПериод.ИмяМесяца = Месяцы[НовыйПериод.Месяц];
	
	РазностьДат = ОбщегоНазначенияУТ.РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 1;
	Пока Счетчик <= РазностьДат Цикл
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.ДатаРасчета = КонецПериода(ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик, Ложь), Периодичность);
		НовыйПериод.Месяц = Месяц(НовыйПериод.ДатаРасчета);
		НовыйПериод.ИмяМесяца = Месяцы[НовыйПериод.Месяц];
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает таблицу значений для последующего использования в качестве внешнего источника.
//
// Параметры:
//	НачалоПериода - Дата - начало периода
//	КонецПериода- Дата - окончание периода
//	ШагПериодовСравнения- ПеречислениеСсылка.Периодичность - период, в котором будет выделен отрезок от начала и до окончания периода.
//	КоличествоПериодов- Число - количество сравниваемых периодов заданной периодичности.
//	
// Пример: НачалоПериода = начало года, КонецПериода = текущая дата, ШагПериодовСравнения = год, КоличествоПериодов = 2
//	Будет получен набор периодов с начала года до текущей даты за текущий и прошлый год.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений, содержащая колонки "ДатаНачалаРасчета", "ДатаОкончанияРасчета" и значения дат:
//    *ДатаНачалаРасчета - Дата - 
//    *ДатаОкончанияРасчета - Дата - 
//
Функция ПериодыСравненияСАналогичнымиПериодамиВПрошлом(НачалоПериода, КонецПериода, ШагПериодовСравнения, КоличествоПериодов) Экспорт
	
	Перем ТаблицаПериодов;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаНачалаРасчета");
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончанияРасчета");
	Для Счетчик = 0 По КоличествоПериодов - 1 Цикл
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.ДатаНачалаРасчета = ДатаСоСмещением(НачалоПериода, ШагПериодовСравнения, -Счетчик, Ложь);
		
		// Проверка, что указан полный кратный период
		МинимальнаяПериодичностьПолногоПериода = МинимальнаяПериодичностьПолногоПериода(НачалоПериода, КонецПериода, ШагПериодовСравнения);
		
		Если МинимальнаяПериодичностьПолногоПериода <> Неопределено Тогда
			НовыйПериод.ДатаОкончанияРасчета = КонецПериода(ДатаСоСмещением(КонецПериода, ШагПериодовСравнения, -Счетчик, Ложь), МинимальнаяПериодичностьПолногоПериода);
		Иначе
			НовыйПериод.ДатаОкончанияРасчета = ДатаСоСмещением(КонецПериода, ШагПериодовСравнения, -Счетчик, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеЦветовRGBHSV

// Возвращает компоненты цвета по модели HSV, по переданным компонентам RGB
//
// Параметры:
//	Красный - Число - от 0 до 255
//	Зеленый - Число - от 0 до 255
//	Синий - Число - от 0 до 255
//	Тон - Число - возвращается значение от 0 до 360 (градусов)
//	Насыщенность - Число - возвращается значение от 0 до 100 (%)
//	Светлота - Число - возвращается значение от 0 до 100 (%).
//
Процедура ПолучитьТонНасыщенностьЯркостьПоКрасныйЗеленыйСиний(Красный, Зеленый, Синий, Тон, Насыщенность, Светлота) Экспорт
	
	ПриведенныйКрасный = Красный/255;
	ПриведенныйЗеленый = Зеленый/255;
	ПриведенныйСиний = Синий/255;
	
	// Определим светлоту
	МаксЦветов = Макс(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);	
	МинЦветов = Мин(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);
	
	Светлота = Окр(100 * МаксЦветов);
	
	// Определим насыщенность
	Если МаксЦветов = 0 Тогда 
		Насыщенность = 0;
		
	Иначе 
		Насыщенность = Окр(100 * (1 - МинЦветов/МаксЦветов));
		
	КонецЕсли;
	
	// Определим цветовой тон
	Если МаксЦветов = МинЦветов Тогда
		Тон = 0;
		
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый >= ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйЗеленый - ПриведенныйСиний)/(МаксЦветов - МинЦветов);
		
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый < ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйЗеленый - ПриведенныйСиний)/(МаксЦветов - МинЦветов) + 360;
		
	ИначеЕсли МаксЦветов = ПриведенныйЗеленый Тогда
		Тон = 60*(ПриведенныйСиний - ПриведенныйКрасный)/(МаксЦветов - МинЦветов) + 120;
		
	ИначеЕсли МаксЦветов = ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйКрасный - ПриведенныйЗеленый)/(МаксЦветов - МинЦветов) + 240;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает компоненты цвета по модели RGB, по переданным Web-цвету.
//
// Параметры:
//	Цвет - WebЦвета - системное перечисление.
//	Красный - Число - возвращается значение от 0 до 255.
//	Зеленый - Число - возвращается значение от 0 до 255.
//	Синий - Число - возвращается значение от 0 до 255.
//
Процедура ПолучитьКрасныйЗеленыйСинийВебЦвета(Цвет, Красный, Зеленый, Синий) Экспорт
	
	СоставляющиеВебЦветов = МониторингЦелевыхПоказателейПовтИсп.СоставляющиеВебЦветов();
	СтрокаВебЦвета = СоставляющиеВебЦветов.Найти(Цвет, "ВебЦвет");
	
	Если Не СтрокаВебЦвета = Неопределено Тогда
		Красный = СтрокаВебЦвета.Красный;
		Зеленый = СтрокаВебЦвета.Зеленый;
		Синий   = СтрокаВебЦвета.Синий;
	Иначе 
		Красный = 0;
		Зеленый = 0;
		Синий = 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает компоненты цвета по модели RGB, по переданным компонентам HSV.
//
// Параметры:
//	Тон - Число - от 0 до 360 (градусов).
//	Насыщенность - Число - от 0 до 100 (%).
//	Светлота - Число - от 0 до 100 (%).
//	Красный - Число - возвращается значение от 0 до 255.
//	Зеленый - Число - возвращается значение от 0 до 255.
//	Синий - Число - возвращается значение от 0 до 255.
//
Процедура ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(Тон, Насыщенность, Светлота, Красный, Зеленый, Синий) Экспорт
	
	ПриведеннаяНасыщенность = Насыщенность/100;
	ПриведеннаяСветлота = Светлота/100;
	
	Целые60 = Цел(Тон/60);
	Остаток60 = Тон/60 - Целые60;
	
	pTemp = ПриведеннаяСветлота * (1 - ПриведеннаяНасыщенность);
	qTemp = ПриведеннаяСветлота * (1 - Остаток60 * ПриведеннаяНасыщенность);
	tTemp = ПриведеннаяСветлота * (1 - (1 - Остаток60) * ПриведеннаяНасыщенность);
	
	Если Целые60 = 0 Тогда
		ПриведенныйКрасный = ПриведеннаяСветлота;
		ПриведенныйЗеленый = tTemp;
		ПриведенныйСиний= pTemp;
		
	ИначеЕсли Целые60 = 1 Тогда
		ПриведенныйКрасный = qTemp;
		ПриведенныйЗеленый = ПриведеннаяСветлота;
		ПриведенныйСиний= pTemp;
		
	ИначеЕсли Целые60 = 2 Тогда
		ПриведенныйКрасный = pTemp;
		ПриведенныйЗеленый = ПриведеннаяСветлота;
		ПриведенныйСиний= tTemp;
		
	ИначеЕсли Целые60 = 3 Тогда
		ПриведенныйКрасный = pTemp;
		ПриведенныйЗеленый = qTemp;
		ПриведенныйСиний= ПриведеннаяСветлота;
		
	ИначеЕсли Целые60 = 4 Тогда
		ПриведенныйКрасный = tTemp;
		ПриведенныйЗеленый = pTemp ;
		ПриведенныйСиний= ПриведеннаяСветлота;
		
	ИначеЕсли Целые60 = 5 Тогда
		ПриведенныйКрасный = ПриведеннаяСветлота;
		ПриведенныйЗеленый = pTemp;
		ПриведенныйСиний= qTemp;
		
	КонецЕсли;
	
	Красный = Окр(255 * ПриведенныйКрасный, 0);
	Зеленый = Окр(255 * ПриведенныйЗеленый, 0);
	Синий = Окр(255 * ПриведенныйСиний, 0);
	
КонецПроцедуры

// Возвращает компоненты дополнительного цвета по модели HSV, по переданным компонентам HSV.
//
// Параметры:
//	Тон - Число - от 0 до 360 (градусов).
//	Насыщенность - Число - от 0 до 100 (%).
//	Светлота - Число - от 0 до 100 (%).
//	НовыйТон - Число - возвращается значение от 0 до 360 (градусов).
//	НоваяНасыщенность - Число - возвращается значение от 0 до 100 (%).
//	НоваяСветлота - Число - возвращается значение от 0 до 100 (%).
//
Процедура ПолучитьДополнительныйЦветПоТонуНасыщенностиЯркости(Тон, Насыщенность, Светлота, НовыйТон, НоваяНасыщенность, НоваяСветлота) Экспорт
	
	ПриведеннаяНасыщенность = Насыщенность/100;
	ПриведеннаяСветлота = Светлота/100;
	
	Если Тон >= 180 Тогда
		НовыйТон = Тон - 180;
		
	Иначе
		НовыйТон = Тон + 180;
		
	КонецЕсли;
	
	НоваяНасыщенность = 100 * (ПриведеннаяСветлота * ПриведеннаяНасыщенность) / (ПриведеннаяСветлота * (ПриведеннаяНасыщенность - 1) + 1);
	
	НоваяСветлота = 100 * (ПриведеннаяСветлота * (ПриведеннаяНасыщенность - 1) + 1);
	
КонецПроцедуры

// Возвращает компоненты дополнительного цвета по модели HSV, по переданным компонентам RGB.
//
// Параметры:
//	Красный - Число - от 0 до 255.
//	Зеленый - Число - от 0 до 255.
//	Синий - Число - от 0 до 255.
//	НовыйКрасный - Число - возвращается значение от 0 до 255.
//	НовыйЗеленый - Число - возвращается значение от 0 до 255.
//	НовыйСиний - Число - возвращается значение от 0 до 255.
//
Процедура ПолучитьДополнительныйЦветПоКрасныйЗеленыйСиний(Красный, Зеленый, Синий, НовыйКрасный, НовыйЗеленый, НовыйСиний) Экспорт
	
	Тон = 0;
	Насыщенность = 0;
	Светлота = 0;
	НовыйТон = 0;
	НоваяНасыщенность = 0;
	НоваяСветлота = 0;
	
	ПолучитьТонНасыщенностьЯркостьПоКрасныйЗеленыйСиний(Красный, Зеленый, Синий, Тон, Насыщенность, Светлота);
	ПолучитьДополнительныйЦветПоТонуНасыщенностиЯркости(Тон, Насыщенность, Светлота, НовыйТон, НоваяНасыщенность, НоваяСветлота);
	ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(НовыйТон, НоваяНасыщенность, НоваяСветлота, НовыйКрасный, НовыйЗеленый, НовыйСиний);
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

// Обработчик подписки на событие ВариантОтчетаПередУдалением.
//
// Параметры:
//	Источник - СправочникОбъект.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа
//	Отказ - Булево - признак отказа удаления объекта.
//
Процедура ВариантОтчетаПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВариантОтчета = Источник.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	ОтчетыДляРасшифровки.Ссылка
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки КАК ОтчетыДляРасшифровки
		|ГДЕ
		|	ОтчетыДляРасшифровки.ВариантОтчета = &ВариантОтчета";
	Запрос.УстановитьПараметр("ВариантОтчета", ВариантОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВариантАнализаОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВариантыАнализаЦелевыхПоказателей -
		УдаляемыеОтчетыРасшифровки = ВариантАнализаОбъект.ОтчетыДляРасшифровки.НайтиСтроки(
			Новый Структура("ВариантОтчета", ВариантОтчета));
		
		Для Каждого Строка Из УдаляемыеОтчетыРасшифровки Цикл 
			ВариантАнализаОбъект.ОтчетыДляРасшифровки.Удалить(Строка);
		КонецЦикла;
		
		ВариантАнализаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Процедура заполняет справочники "Категории целей", "Структура целей" и "Варианты анализа целевых показателей",
// а также регистр сведений "Целевые значение вариантов анализа" по заданному шаблону.
// Если ранее демонстрационные показатели уже были созданы, то восстанавливаются стандартные настройки.
// Процедура используется только при обновлении информационной базы, первом запуске
// и может быть вызвана из раздела "Администрирование".
//
Процедура ЗаполнитьСтруктуруЦелейИВариантыАнализа() Экспорт
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	КаталогВременныхФайлов = ФайловаяСистема.СоздатьВременныйКаталог("kpitmp");
	
	// Извлечение файла модели
	АрхивПолноеИмя = КаталогВременныхФайлов + "ModelData.zip";
	Попытка
		ИмяМакетаСКодомЯзыка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"МониторингЦелевыхПоказателейДемонстрационнаяМодель_%1", 
				ОбщегоНазначения.КодОсновногоЯзыка());
		
		Если Метаданные.ОбщиеМакеты.Найти(ИмяМакетаСКодомЯзыка) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьОбщийМакет(ИмяМакетаСКодомЯзыка);
		ДвоичныеДанные.Записать(АрхивПолноеИмя);
	Исключение
		СобытиеЖР = НСтр("ru = 'Загрузка демонстрационной модели целевых показателей'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(АрхивПолноеИмя);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
	УдалитьФайлы(АрхивПолноеИмя);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогВременныхФайлов + "ModelData.xml");
	
	ИмяОбъекта = Неопределено;
	НовыйЭлементОбъекта = Неопределено;
	НовыйНаборЗаписей = Неопределено; // РегистрСведенийНаборЗаписей -
	ПропуститьЗапись = Ложь;
	ТекстСсылкиТекущегоЭлемента = "";
	Пока ЧтениеXML.Прочитать() Цикл  // ПоставляемаяМодельПоказателей
		ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И (ЛокальноеИмя = "КатегорииЦелей" 
			Или ЛокальноеИмя = "ВариантыАнализаЦелевыхПоказателей" 
			Или ЛокальноеИмя = "СтруктураЦелей"
			Или ЛокальноеИмя = "ЦелевыеЗначенияВариантовАнализа") Тогда
			
			ИмяОбъекта = ЛокальноеИмя;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И (ЛокальноеИмя = "КатегорияЦелей" 
			Или ЛокальноеИмя = "ВариантАнализа" 
			Или ЛокальноеИмя = "ЭлементСтруктурыЦелей")
			И Не ИмяОбъекта = "ЦелевыеЗначенияВариантовАнализа" Тогда
			
			НовыйЭлементОбъекта = Справочники[ИмяОбъекта].СоздатьЭлемент();
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЛокальноеИмя = "ЦелевоеЗначениеВариантаАнализа" Тогда
			
			НовыйНаборЗаписей = РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей -
			НовыйЭлементОбъекта = НовыйНаборЗаписей.Добавить();
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И (ЛокальноеИмя = "КатегорияЦелей" 
			Или ЛокальноеИмя = "ВариантАнализа" 
			Или ЛокальноеИмя = "ЭлементСтруктурыЦелей")
			И Не ИмяОбъекта = "ЦелевыеЗначенияВариантовАнализа" Тогда
			
			Если НовыйЭлементОбъекта <> Неопределено И Не ПропуститьЗапись Тогда
				НовыйЭлементОбъекта.Записать();
				НовыйЭлементОбъекта = Неопределено;
			ИначеЕсли НовыйЭлементОбъекта <> Неопределено И ПропуститьЗапись Тогда
				НовыйЭлементОбъекта = Неопределено;
				ПропуститьЗапись = Ложь;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И ЛокальноеИмя = "ЦелевоеЗначениеВариантаАнализа" Тогда
			
			Если НовыйЭлементОбъекта <> Неопределено И Не ПропуститьЗапись Тогда
				НовыйНаборЗаписей.Записать();
			ИначеЕсли НовыйЭлементОбъекта <> Неопределено И ПропуститьЗапись Тогда
				ПропуститьЗапись = Ложь;
			КонецЕсли;
		Иначе
			Если НовыйЭлементОбъекта <> Неопределено И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяЭлемента = ЛокальноеИмя;
			ИначеЕсли НовыйЭлементОбъекта <> Неопределено И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Если ИмяЭлемента = "Ссылка" 
					Или ИмяЭлемента = "Родитель" Тогда
					
					УникальныйИдентификатор = Новый УникальныйИдентификатор(ЧтениеXML.Значение);
					СсылкаЭлементаОбъекта = Справочники[ИмяОбъекта].ПолучитьСсылку(УникальныйИдентификатор);
					
					Если ИмяЭлемента = "Ссылка" Тогда
						ТекстСсылкиТекущегоЭлемента = ЧтениеXML.Значение;
						
						// Отмена записи для вариантов анализа и показателей
						ПропуститьЗапись = ПропуститьЗапись(ТекстСсылкиТекущегоЭлемента);
						
						Если ОбъектЕстьВБазеДанных(ИмяОбъекта, СсылкаЭлементаОбъекта) Тогда
							НовыйЭлементОбъекта = СсылкаЭлементаОбъекта.ПолучитьОбъект();
						Иначе
							НовыйЭлементОбъекта.УстановитьСсылкуНового(СсылкаЭлементаОбъекта);
						КонецЕсли;
					Иначе
						НовыйЭлементОбъекта[ИмяЭлемента] = СсылкаЭлементаОбъекта;
					КонецЕсли;
				ИначеЕсли ИмяЭлемента = "Владелец" Тогда
					УникальныйИдентификатор = Новый УникальныйИдентификатор(ЧтениеXML.Значение);
					СсылкаЭлементаОбъекта = Справочники.СтруктураЦелей.ПолучитьСсылку(УникальныйИдентификатор);
					НовыйЭлементОбъекта[ИмяЭлемента] = СсылкаЭлементаОбъекта;
				ИначеЕсли ИмяЭлемента = "КатегорияЦели" Тогда
					УникальныйИдентификатор = Новый УникальныйИдентификатор(ЧтениеXML.Значение);
					СсылкаЭлементаОбъекта = Справочники.КатегорииЦелей.ПолучитьСсылку(УникальныйИдентификатор);
					НовыйЭлементОбъекта[ИмяЭлемента] = СсылкаЭлементаОбъекта;
				ИначеЕсли ИмяОбъекта = "ЦелевыеЗначенияВариантовАнализа" И ИмяЭлемента = "ВариантАнализа" Тогда
					УникальныйИдентификатор = Новый УникальныйИдентификатор(ЧтениеXML.Значение);
					СсылкаЭлементаОбъекта = Справочники.ВариантыАнализаЦелевыхПоказателей.ПолучитьСсылку(УникальныйИдентификатор);
					НовыйНаборЗаписей.Отбор.ВариантАнализа.Установить(СсылкаЭлементаОбъекта);
					
					ПропуститьЗапись = ПропуститьЗапись(ЧтениеXML.Значение);
					
					НовыйЭлементОбъекта[ИмяЭлемента] = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
				Иначе
					// Заполнение параметров, ссылающихся на данные
					Если ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И ТекстСсылкиТекущегоЭлемента = "4838f66e-bcda-11e4-8d8d-e0cb4ed5f4cc" Тогда // Вариант анализа "Курс EUR"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, "КонвертируемаяВалюта", ВалютаEUR());
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, "ВалютаРасчета", ВалютаRUB());
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И ТекстСсылкиТекущегоЭлемента = "e859aeb6-bce3-11e4-8d8d-e0cb4ed5f4cc" Тогда // Вариант анализа "Курс USD"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, "КонвертируемаяВалюта", ВалютаUSD());
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, "ВалютаРасчета", ВалютаRUB());
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И ТекстСсылкиТекущегоЭлемента = "4838f66b-bcda-11e4-8d8d-e0cb4ed5f4cc" Тогда // Вариант анализа "Остаток ДС / RUB"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						
						УстановитьЗначениеОтбораПоИдентификатору(ПользовательскиеНастройки, "40ff4cd7-1c9f-42f1-b57d-4c241d5c2fd5", ВалютаRUB());
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И ТекстСсылкиТекущегоЭлемента = "4838f66c-bcda-11e4-8d8d-e0cb4ed5f4cc" Тогда // Вариант анализа "Остаток ДС / USD"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						
						УстановитьЗначениеОтбораПоИдентификатору(ПользовательскиеНастройки, "40ff4cd7-1c9f-42f1-b57d-4c241d5c2fd5", ВалютаUSD());
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И ТекстСсылкиТекущегоЭлемента = "4838f66d-bcda-11e4-8d8d-e0cb4ed5f4cc" Тогда // Вариант анализа "Остаток ДС / EUR"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						
						УстановитьЗначениеОтбораПоИдентификатору(ПользовательскиеНастройки, "40ff4cd7-1c9f-42f1-b57d-4c241d5c2fd5", ВалютаEUR());
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И (ТекстСсылкиТекущегоЭлемента = "49c43ecb-bcea-11e4-8d8d-e0cb4ed5f4cc"         // Вариант анализа "Исполнение плана продаж (неделя)"
						Или ТекстСсылкиТекущегоЭлемента = "405ff23a-bd08-11e4-8d8d-e0cb4ed5f4cc") Тогда // Вариант анализа "Исполнение плана продаж (месяц)"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, 
							"Сценарий", 
							Планирование.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланПродаж));
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ТекстСсылкиТекущегоЭлемента = "4838f663-bcda-11e4-8d8d-e0cb4ed5f4cc" // Структура целей "Контроль исполнения плана продаж"
						И ИмяЭлемента = "ХранилищеНастроекКомпоновкиДанных" Тогда
						
						ХранилищеНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
						
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, 
							"Сценарий", 
							Планирование.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланПродаж));
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И (ТекстСсылкиТекущегоЭлемента = "2d6a8c2a-bcec-11e4-8d8d-e0cb4ed5f4cc"         // Вариант анализа "Исполнение плана закупок (неделя)"
						Или ТекстСсылкиТекущегоЭлемента = "af11cd1c-bd0c-11e4-8d8d-e0cb4ed5f4cc") Тогда // Вариант анализа "Исполнение плана закупок (месяц)"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, 
							"Сценарий", 
							Планирование.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланЗакупок));
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ТекстСсылкиТекущегоЭлемента = "4838f664-bcda-11e4-8d8d-e0cb4ed5f4cc" // Структура целей "Контроль исполнения плана закупок"
						И ИмяЭлемента = "ХранилищеНастроекКомпоновкиДанных" Тогда
						
						ХранилищеНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
						
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, 
							"Сценарий", 
							Планирование.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланЗакупок));
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
						
					ИначеЕсли ИмяЭлемента = "ХранилищеПользовательскихНастроекКомпоновкиДанных" 
						И (ТекстСсылкиТекущегоЭлемента = "2d6a8c2b-bcec-11e4-8d8d-e0cb4ed5f4cc"         // Вариант анализа "Исполнение плана производства (неделя)"
						Или ТекстСсылкиТекущегоЭлемента = "af11cd1d-bd0c-11e4-8d8d-e0cb4ed5f4cc") Тогда // Вариант анализа "Исполнение плана производства (месяц)"
						
						ХранилищеПользовательскихНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						ПользовательскиеНастройки = ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
						
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройки, 
							"Сценарий", 
							Планирование.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланПроизводства));
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(ПользовательскиеНастройки);
						
					ИначеЕсли ТекстСсылкиТекущегоЭлемента = "4838f665-bcda-11e4-8d8d-e0cb4ed5f4cc" // Структура целей "Контроль исполнения плана производства"
						И ИмяЭлемента = "ХранилищеНастроекКомпоновкиДанных" Тогда
						
						ХранилищеНастроекКомпоновкиДанных = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
						НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
						
						КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, 
							"Сценарий", 
							Планирование.ПолучитьСценарийПоУмолчанию(Перечисления.ТипыПланов.ПланПроизводства));
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
						
					ИначеЕсли Не ИспользоватьНесколькоВалют
						И (ТекстСсылкиТекущегоЭлемента = "e859aeb7-bce3-11e4-8d8d-e0cb4ed5f4cc"       // Вариант анализа "Остаток ДС в упр. валюте (неделя)"
							Или ТекстСсылкиТекущегоЭлемента = "3a30c0ea-bd02-11e4-8d8d-e0cb4ed5f4cc") // Вариант анализа "Остаток ДС в упр. валюте (месяц)"
						И ИмяЭлемента = "ОбъектАнализа" Тогда
						
						НовыйЭлементОбъекта[ИмяЭлемента] = Новый ХранилищеЗначения(Новый ПолеКомпоновкиДанных("МестоХранения"));
					Иначе
						НовыйЭлементОбъекта[ИмяЭлемента] = XMLЗначение(ТипЗнч(НовыйЭлементОбъекта[ИмяЭлемента]), ЧтениеXML.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(КаталогВременныхФайлов);
КонецПроцедуры

#КонецОбласти 

#Область Прочее

// Возвращает заполненную и настроенную диаграмму для монитора показателей.
//
// Параметры:
//	Диаграмма - Диаграмма - исходный объект.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//	ИсточникСПараметрами - См. ИнициализироватьИсточникДанных
//
// Возвращаемое значение:
//	Диаграмма - заполненная данными и настроенная диаграмма.
//
Функция ЗаполнитьДиаграммуДляМонитора(Диаграмма, ВариантАнализа, ИсточникСПараметрами) Экспорт
	ПодготовитьИсточник(ИсточникСПараметрами, ВариантАнализа);
	
	ИсточникДанныхДляДиаграммы = ИсточникСПараметрами.Данные;
	ДинамическиеСвойстваВариантаАнализа = ИсточникСПараметрами.ДинамическиеСвойстваВариантаАнализа;
	
	УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникСПараметрами, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа, ИсточникСПараметрами.СвойстваОбщейСтатистики);
	
	// Установим настройки для точек
	Если Не ИсточникДанныхДляДиаграммы.Колонки.Найти("Период") = Неопределено Тогда
		УстановитьИменаТочекДиаграммы(Диаграмма.Точки,
				ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа,
				ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя);
	КонецЕсли;
	
	Если Не ИсточникДанныхДляДиаграммы.Колонки.Найти("Признак") = Неопределено 
		И ВариантАнализа.РассчитыватьПрогноз 
		И Не ИсточникСПараметрами.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
		// Выделим все периоды прогноза
		ОтборПоПризнаку = Новый Структура("Признак", Истина);
		НайденныеСтрокиСПериодами = ИсточникДанныхДляДиаграммы.НайтиСтроки(ОтборПоПризнаку);
		ПериодыСПризнаком = ИсточникДанныхДляДиаграммы.Скопировать(НайденныеСтрокиСПериодами, "Период");
		УстановитьПользовательскиеНастройкиТочекДиаграммы(Диаграмма.Точки, ВариантАнализа, ПериодыСПризнаком);
		
		// Удалить серию "Признак"
		КолонкиИсточника = ИсточникДанныхДляДиаграммы.Колонки;
		КолонкиИсточника.Удалить(КолонкиИсточника.Индекс(КолонкиИсточника.Найти("Признак")));
		
	КонецЕсли;
	
	УстановитьНастройкиПоУмолчаниюСерийДиаграммы(Диаграмма.Серии);
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
		УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникСПараметрами);
	Иначе
		УстановитьПользовательскиеНастройкиСерийДиаграммы(Диаграмма.Серии, ИсточникСПараметрами);
	КонецЕсли;
	
	Возврат Диаграмма;
	
КонецФункции

// Заполняет таблицу значений для монитора показателей
//
// Параметры:
//	ТаблицаЗначенийМонитора - ТаблицаЗначений - исходный объект
//	ИдентификаторЭлементаФормы - Строка - строковый идентификатор элемента формы, определяющий уникальность
//	ВариантАнализа - Структура - реквизиты варианта анализа
//	ИсточникСПараметрами - См. ИнициализироватьИсточникДанных
//
Процедура ЗаполнитьТаблицуДляМонитора(ТаблицаЗначенийМонитора, ИдентификаторЭлементаФормы, ВариантАнализа, ИсточникСПараметрами) Экспорт
	
	ПодготовитьИсточник(ИсточникСПараметрами, ВариантАнализа);
	
	ДанныеИсточникаДанных = ИсточникСПараметрами.Данные;
	ДинамическиеСвойстваВариантаАнализа = ИсточникСПараметрами.ДинамическиеСвойстваВариантаАнализа;
	
	КолонкиИсточника = ДанныеИсточникаДанных.Колонки;
	Для Каждого КолонкаИсточника Из КолонкиИсточника Цикл
		Если КолонкаИсточника.Имя = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
			КолонкаИсточника.Имя = "КолонкаОбъектАнализа"
				+ ?(Не ПустаяСтрока(ИдентификаторЭлементаФормы), "__", "") + ИдентификаторЭлементаФормы;
		ИначеЕсли КолонкаИсточника.Имя = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа Тогда
			КолонкаИсточника.Имя = "КолонкаЗначениеАнализа"
				+ ?(Не ПустаяСтрока(ИдентификаторЭлементаФормы), "__", "") + ИдентификаторЭлементаФормы;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаЗначенийМонитора) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаЗначенийМонитора.Загрузить(ДанныеИсточникаДанных);
	Иначе
		ТаблицаЗначенийМонитора = ДанныеИсточникаДанных;
	КонецЕсли;
	
	// Форматируем значение в соответствии с данными показателя
	Для Каждого СтрокаТаблицыЗначенийМонитора Из ТаблицаЗначенийМонитора Цикл
		ИмяКолонкиЗначение = "КолонкаЗначениеАнализа" + ?(Не ПустаяСтрока(ИдентификаторЭлементаФормы), "__", "") + ИдентификаторЭлементаФормы;
		УстанавливаемоеЗначение = Окр(СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение], ВариантАнализа.ТочностьРасчетаДробнойЧасти);
		
		СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение] = УстанавливаемоеЗначение;
	КонецЦикла;
КонецПроцедуры

// Возвращает диаграмму с сообщением об ошибке в заголовке
// 
// Параметры:
//	ДиаграммаПриОшибках - Диаграмма - диаграмма, в которой будет установлено сообщение об ошибке
//	ТекстОшибки - Строка - текст выводимой ошибки.
//
// Возвращаемое значение:
//	Диаграмма - диаграмма, в которой будет установлено сообщение об ошибке.
// 
Функция ПолучитьДиаграммуПриОшибкахРасчета(ДиаграммаПриОшибках, ТекстОшибки) Экспорт
	ДиаграммаПриОшибках.ИсточникДанных = Неопределено;
	
	// Установим заголовок с ошибкой
	ДиаграммаПриОшибках.ОбластьЗаголовка.Верх = 0;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Лево = 0;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Низ = 1;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Право = 1;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Текст = ТекстОшибки;
	ДиаграммаПриОшибках.ОбластьЗаголовка.ЦветТекста = WebЦвета.Красный;
	
	ДиаграммаПриОшибках.ОбластьПостроения.Верх = 0;
	ДиаграммаПриОшибках.ОбластьПостроения.Лево = 0;
	ДиаграммаПриОшибках.ОбластьПостроения.Низ = 0;
	ДиаграммаПриОшибках.ОбластьПостроения.Право = 0;
	
	ДиаграммаПриОшибках.ОтображатьЛегенду = Ложь;
	
	Возврат ДиаграммаПриОшибках;
КонецФункции

// Возвращает валюту по умолчанию для заполнения настроек структуры целей и вариантов анализа.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - валюта по умолчанию для настроек.
//
Функция ПолучитьВалютуПоУмолчанию() Экспорт
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Возврат ВалютаУправленческогоУчета;
	
КонецФункции

// Возвращает имя значения объекта метаданных перечисление по ссылке.
//
// Параметры:
//  ПеречислениеСсылка - ПеречислениеСсылка - значение перечисления.
//
// Возвращаемое значение:
//  Строка - Если не найдено, то пустая строка.
//
Функция ПолучитьИмяЗначенияПеречисления(ПеречислениеСсылка) Экспорт
	
	ИмяЗначения = "";
	
	Если Не ПеречислениеСсылка.Пустая() Тогда
		ИмяЗначения = ОбщегоНазначения.ИмяЗначенияПеречисления(ПеречислениеСсылка);
	КонецЕсли;
	
	Возврат ИмяЗначения;
	
КонецФункции

// Возвращает индекс картинки, характеризующей состояние(статус) показателя для списка.
//
// Параметры:
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//
// Возвращаемое значение:
//	Число - индекс картинки в коллекции.
//
Функция ПолучитьИндексКартинкиСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ИндексКартинкиСтатусаПоказателя;
	
	ИндексКартинкиСтатусаПоказателя = Неопределено;
	
	ВидЦелевогоПоказателя = ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
		ВариантАнализа);
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "Владелец.ЦелевойТренд");
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных,
			ЦелевойТренд,
			ВидЦелевогоПоказателя,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ТочностьРасчетаДробнойЧасти"));
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_"
		+ ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиСтатуса");
	ТекстСекции = СекцияИмяКартинкиСостояния.ТекущаяОбласть.Параметр;
	
	Если ТекстСекции = "ПиктограммаПоказателяЦельДостигнута" Тогда
		ИндексКартинкиСтатусаПоказателя = 3;
	ИначеЕсли ТекстСекции = "ПиктограммаПоказателяПриемлемоеЗначение" Тогда
		ИндексКартинкиСтатусаПоказателя = 2;
	ИначеЕсли ТекстСекции = "ПиктограммаПоказателяСтатусНеопределен" Тогда
		ИндексКартинкиСтатусаПоказателя = 1;
	ИначеЕсли ТекстСекции = "ПиктограммаПоказателяНеприемлемоеЗначение" Тогда
		ИндексКартинкиСтатусаПоказателя = 0;
	КонецЕсли;
	
	Возврат ИндексКартинкиСтатусаПоказателя;
	
КонецФункции

// Возвращает индекс картинки, характеризующей тренд(характер изменений) показателя для списка.
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа.
//
// Возвращаемое значение:
//	Число - индекс картинки в коллекции.
//
Функция ПолучитьИндексКартинкиТрендаДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ИндексКартинкиТрендаПоказателя;
	
	ИндексКартинкиТрендаПоказателя = Неопределено;
	
	ВидЦелевогоПоказателя = ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
		ВариантАнализа);
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "Владелец.ЦелевойТренд");
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойТренд, ВидЦелевогоПоказателя,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ТочностьРасчетаДробнойЧасти"));
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_"
		+ ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиТренда");
	ТекстСекции = СекцияИмяКартинкиТренда.ТекущаяОбласть.Параметр;
	
	Если ТекстСекции = "ПиктограммаТрендаБезИзменений" Тогда
		ИндексКартинкиТрендаПоказателя = 6;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеВДиапазоне" Тогда
		ИндексКартинкиТрендаПоказателя = 5;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеУхудшается" Тогда
		ИндексКартинкиТрендаПоказателя = 4;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеУлучшается" Тогда
		ИндексКартинкиТрендаПоказателя = 3;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостВДиапазоне" Тогда
		ИндексКартинкиТрендаПоказателя = 2;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостУхудшается" Тогда
		ИндексКартинкиТрендаПоказателя = 1;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостУлучшается" Тогда
		ИндексКартинкиТрендаПоказателя = 0;
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаНеопределен" Тогда
		ИндексКартинкиТрендаПоказателя = 7;
	КонецЕсли;
	
	Возврат ИндексКартинкиТрендаПоказателя;
	
КонецФункции

// Возвращает картинку, характеризующую состояние(статус) показателя
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы.
//
// Возвращаемое значение:
//	Картинка		- картинка из библиотеки картинок.
//
Функция ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем КартинкаСтатусаПоказателя;
	
	КартинкаСтатусаПоказателя = Новый Картинка;
	
	ВидЦелевогоПоказателя = ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
		ВариантАнализа);
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "Владелец.ЦелевойТренд");
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойТренд, ВидЦелевогоПоказателя,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ТочностьРасчетаДробнойЧасти"));
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_"
		+ ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиСтатуса");
	ИмяКартинкиСостояния = СекцияИмяКартинкиСостояния.ТекущаяОбласть.Параметр;
	
	КартинкаСтатусаПоказателя = БиблиотекаКартинок[ИмяКартинкиСостояния];
	
	Возврат КартинкаСтатусаПоказателя;
	
КонецФункции

// Возвращает картинку, характеризующую тренд(характер изменений) показателя
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа.
//
// Возвращаемое значение:
//	Число - индекс картинки из библиотеки.
//
Функция ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем КартинкаТрендаПоказателя;
	
	КартинкаТрендаПоказателя = Новый Картинка;
	
	ВидЦелевогоПоказателя = ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
		ВариантАнализа);
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "Владелец.ЦелевойТренд");
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойТренд, ВидЦелевогоПоказателя,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ТочностьРасчетаДробнойЧасти"));
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_"
		+ ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиТренда");
	ИмяКартинкиТренда = СекцияИмяКартинкиТренда.ТекущаяОбласть.Параметр;
	
	КартинкаТрендаПоказателя = БиблиотекаКартинок[ИмяКартинкиТренда];
	
	Возврат КартинкаТрендаПоказателя;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов строки
// 
// Параметры:
//  ДлинаСтроки - Число - количество символов в строке.
//
// Возвращаемое значение:
//	ОписаниеТипов - описание строкового типа заданной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

// Служебная функция, предназначенная для получения описания типов булево.
//
// Возвращаемое значение:
//	ОписаниеТипов - описание булевого типа.
//
Функция ПолучитьОписаниеТиповБулево() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповБулево() 

// Возвращает структуру, содержащую все свойства варианта анализа
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа.
//
// Возвращаемое значение:
//  Структура - структура реквизитов и сопутствующих данных варианта анализа.
//
Функция ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных) Экспорт
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	// Инициализируем переменные
	СвойстваВариантаАнализа = Новый Структура;
	СвойстваВариантаАнализа.Вставить("Цель");
	СвойстваВариантаАнализа.Вставить("КатегорияЦели");
	СвойстваВариантаАнализа.Вставить("ЦелевойПоказатель");
	СвойстваВариантаАнализа.Вставить("КраткоеНаименованиеЦелевогоПоказателя");
	СвойстваВариантаАнализа.Вставить("Описание");
	СвойстваВариантаАнализа.Вставить("ФормулаРасчета");
	СвойстваВариантаАнализа.Вставить("Размерность");
	СвойстваВариантаАнализа.Вставить("ВариантАнализа");
	СвойстваВариантаАнализа.Вставить("Ответственный");
	СвойстваВариантаАнализа.Вставить("ЦелевойТренд");
	СвойстваВариантаАнализа.Вставить("ЦелевыеЗначения");
	СвойстваВариантаАнализа.Вставить("ФактическийТренд");
	СвойстваВариантаАнализа.Вставить("ФактическоеЗначение");
	СвойстваВариантаАнализа.Вставить("ФактическоеСостояние");
	СвойстваВариантаАнализа.Вставить("ПериодАнализа");
	СвойстваВариантаАнализа.Вставить("ПериодСравнения");
	СвойстваВариантаАнализа.Вставить("ТипАнализа");
	СвойстваВариантаАнализа.Вставить("ПериодичностьРасчетаПоказателя");
	СвойстваВариантаАнализа.Вставить("ОбъектАнализа");
	СвойстваВариантаАнализа.Вставить("ЗначениеАнализа");
	СвойстваВариантаАнализа.Вставить("КратностьЗначений");
	СвойстваВариантаАнализа.Вставить("ТочностьРасчетаДробнойЧасти");
	СвойстваВариантаАнализа.Вставить("МетодРасчетаЗначений");
	СвойстваВариантаАнализа.Вставить("ПользовательскиеОтборы");
	СвойстваВариантаАнализа.Вставить("ДатаВремяФормирования");
	СвойстваВариантаАнализа.Вставить("Пользователь");
	СвойстваВариантаАнализа.Вставить("СпособРасчета");
	СвойстваВариантаАнализа.Вставить("Адекватность");
	
	ВидыОтклоненийОтЦелевыхЗначенийПоказателей = Перечисления.ВидыОтклоненийОтЦелевыхЗначенийПоказателей;
	ВидыЦелевыхЗначенийВариантовАнализа = Перечисления.ВидыЦелевыхЗначенийВариантовАнализа;
	
	// Получим свойства варианта анализа и цели
	ЗапросСвойствВариантаАнализа = Новый Запрос;
	ЗапросСвойствВариантаАнализа.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	ЗапросСвойствВариантаАнализа.Текст =
	"ВЫБРАТЬ
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.Ссылка КАК Цель,
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.КатегорияЦели КАК КатегорияЦели,
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя,
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.Описание КАК Описание,
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.ФормулаРасчета КАК ФормулаРасчета,
		|	ВариантыАнализаЦелевыхПоказателей.Владелец.ЦелевойТренд КАК ЦелевойТренд,
		|	ВариантыАнализаЦелевыхПоказателей.ПериодАнализа,
		|	ВариантыАнализаЦелевыхПоказателей.ПериодСравнения,
		|	ВариантыАнализаЦелевыхПоказателей.ТипАнализа,
		|	ВариантыАнализаЦелевыхПоказателей.ПериодичностьРасчетаПоказателя,
		|	ВариантыАнализаЦелевыхПоказателей.ОбъектАнализа,
		|	ВариантыАнализаЦелевыхПоказателей.ЗначениеАнализа,
		|	ВариантыАнализаЦелевыхПоказателей.МетодРасчетаЗначений,
		|	ВариантыАнализаЦелевыхПоказателей.ХранилищеПользовательскихНастроекКомпоновкиДанных,
		|	ВариантыАнализаЦелевыхПоказателей.Ответственный,
		|	ВариантыАнализаЦелевыхПоказателей.ТочностьРасчетаДробнойЧасти,
		|	ВариантыАнализаЦелевыхПоказателей.КратностьЗначений,
		|	ВариантыАнализаЦелевыхПоказателей.Ссылка КАК ВариантАнализа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа";
	
	РезультатЗапросаСвойствВариантаАнализа = ЗапросСвойствВариантаАнализа.Выполнить();
	
	Если Не РезультатЗапросаСвойствВариантаАнализа.Пустой() Тогда
		ВыборкаСвойствВариантаАнализа = РезультатЗапросаСвойствВариантаАнализа.Выбрать();
		ВыборкаСвойствВариантаАнализа.Следующий();
		
		ЗаполнитьЗначенияСвойств(СвойстваВариантаАнализа, ВыборкаСвойствВариантаАнализа);
		
		Если СвойстваВариантаАнализа.Ответственный.Пустая() Тогда
			СвойстваВариантаАнализа.Ответственный = НСтр("ru= 'Ответственный не определен'");
		КонецЕсли;
		
		СвойстваВариантаАнализа.ПериодАнализа = ПредставлениеСтандартногоПериода(ВыборкаСвойствВариантаАнализа.ПериодАнализа.Получить());
		
		ПериодСравнения = ВыборкаСвойствВариантаАнализа.ПериодСравнения.Получить();
		Если Не ПериодСравнения = Неопределено И СвойстваВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
			СвойстваВариантаАнализа.ПериодСравнения = ПредставлениеСтандартногоПериода(ВыборкаСвойствВариантаАнализа.ПериодСравнения.Получить());
		Иначе
			СвойстваВариантаАнализа.ПериодСравнения = Неопределено;
		КонецЕсли;
		
		// Заполним информацию по пользовательским настройкам
		ПользовательскиеНастройки = ВыборкаСвойствВариантаАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить(); // ПользовательскиеНастройкиКомпоновкиДанных - 
		Если Не ПользовательскиеНастройки = Неопределено Тогда
			ПользовательскиеНастройкиЭлементы = ПользовательскиеНастройки.Элементы;
			
			ПользовательскиеОтборы = "";
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиЭлементы Цикл
				Если (ТипЗнч(ПользовательскаяНастройка) = Тип("ЭлементОтбораКомпоновкиДанных")
						Или ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных"))
						И ПользовательскаяНастройка.Использование Тогда
						
					ПользовательскиеОтборы = НСтр("ru= 'Установлены пользовательские отборы'");
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПустаяСтрока(ПользовательскиеОтборы) Тогда
				СвойстваВариантаАнализа.ПользовательскиеОтборы = ПользовательскиеОтборы;
			Иначе
				СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено;
			КонецЕсли;
		Иначе
			СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено;
		КонецЕсли;
		
		СвойстваВариантаАнализа.Размерность = Символы.НПП + Строка(ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.Размерность);
		СвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя;
		СвойстваВариантаАнализа.ОбъектАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление;
		СвойстваВариантаАнализа.ЗначениеАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление;
	КонецЕсли;
	
	// Заполним информацию о фактическом состоянии
	СвойстваВариантаАнализа.ФактическийТренд = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	СвойстваВариантаАнализа.ФактическоеСостояние = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
	СвойстваВариантаАнализа.ФактическоеЗначение = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений);
	
	// Заполним информацию по целям
	ПредставлениеРазмерности = "";
	Если Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность) И Не ДинамическиеСвойстваВариантаАнализа.Размерность = Неопределено Тогда
		ПредставлениеРазмерности = Символы.НПП + ДинамическиеСвойстваВариантаАнализа.Размерность;
	КонецЕсли;
	
	Если Не ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = Неопределено И Не ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения.Пустая() Тогда
		Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
			РазмерностьОтклонения = Символы.НПП + ДинамическиеСвойстваВариантаАнализа.Размерность;
		ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
			РазмерностьОтклонения = "%";
		КонецЕсли;
		
		Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
			Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
			
				ШаблонТекстаЦелевогоЗначения = НСтр("ru='%1%2'");
				ШаблонТекстаЦелевогоЗначения = ШаблонТекстаЦелевогоЗначения + Символы.ПС
					+ НСтр("ru='с позитивным отклонением %3%4 и негативным отклонением %5%6'");
				ПредставлениеЦелевогоЗначения = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				ПредставлениеПозитивногоОтклонения = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				ПредставлениеНегативногоОтклонения = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				
				СвойстваВариантаАнализа.ЦелевыеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаЦелевогоЗначения,
					ПредставлениеЦелевогоЗначения,
					ПредставлениеРазмерности,
					ПредставлениеПозитивногоОтклонения,
					РазмерностьОтклонения,
					ПредставлениеНегативногоОтклонения,
					РазмерностьОтклонения);
				
			ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
				
				ШаблонТекстаЦелевогоЗначения = НСтр("ru='%1%2'");
				ШаблонТекстаЦелевогоЗначения = ШаблонТекстаЦелевогоЗначения + Символы.ПС
					+ НСтр("ru='с позитивным отклонением %3%4 и негативным отклонением %5%6'");
				ПредставлениеЦелевогоЗначения = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				
				СвойстваВариантаАнализа.ЦелевыеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаЦелевогоЗначения,
					ПредставлениеЦелевогоЗначения,
					ПредставлениеРазмерности,
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение,
					РазмерностьОтклонения,
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение,
					РазмерностьОтклонения);
				
			КонецЕсли;
		Иначе 
			Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
				ШаблонТекстаЦелевогоЗначения = НСтр("ru='%1 - %2%3'");
				ШаблонТекстаЦелевогоЗначения = ШаблонТекстаЦелевогоЗначения + Символы.ПС
					+ НСтр("ru='с позитивным отклонением %4%5 и негативным отклонением %6%7'");
				ПредставлениеДиапазонМинимум = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				ПредставлениеДиапазонМаксимум = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				ПредставлениеПозитивногоОтклонения = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				ПредставлениеНегативногоОтклонения = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				
				СвойстваВариантаАнализа.ЦелевыеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаЦелевогоЗначения,
					ПредставлениеДиапазонМинимум,
					ПредставлениеДиапазонМаксимум,
					ПредставлениеРазмерности,
					ПредставлениеПозитивногоОтклонения,
					РазмерностьОтклонения,
					ПредставлениеНегативногоОтклонения,
					РазмерностьОтклонения);
				
			ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
				
				ШаблонТекстаЦелевогоЗначения = НСтр("ru='%1 - %2%3'");
				ШаблонТекстаЦелевогоЗначения = ШаблонТекстаЦелевогоЗначения + Символы.ПС
					+ НСтр("ru='с позитивным отклонением %4%5 и негативным отклонением %6%7'");
				ПредставлениеДиапазонМинимум = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				ПредставлениеДиапазонМаксимум = ПолучитьСокращенноеПредставлениеЧисла(
					ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум,
					СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти,
					СвойстваВариантаАнализа.КратностьЗначений);
				
				СвойстваВариантаАнализа.ЦелевыеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаЦелевогоЗначения,
					ПредставлениеДиапазонМинимум,
					ПредставлениеДиапазонМаксимум,
					ПредставлениеРазмерности,
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение,
					РазмерностьОтклонения,
					ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение,
					РазмерностьОтклонения);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РазмерностьОтклонения = "";
		СвойстваВариантаАнализа.ЦелевыеЗначения = НСтр("ru='Цели не установлены'");
	КонецЕсли;
	
	// Заполним информацию о прогнозе
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "РассчитыватьПрогноз") 
		И Не ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = Неопределено
		И Не ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
		
		СвойстваВариантаАнализа.СпособРасчета	= ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.СпособРасчета;
		СвойстваВариантаАнализа.Адекватность	= Строка(Окр(100 * ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Адекватность, 2)) + " " + "%";
	КонецЕсли;

	// Заполним информацию о сформировавшем и дате актуальности информации.
	СвойстваВариантаАнализа.ДатаВремяФормирования = ТекущаяДатаСеанса();
	СвойстваВариантаАнализа.Пользователь = Пользователи.ТекущийПользователь();
	
	Возврат СвойстваВариантаАнализа;
КонецФункции

// Возвращает представление числа в виде тыс., млн
// 
// Параметры:
//	ИсходноеЧисло - Число - форматируемое число
//	Разрядность - Число - количество знаков после запятой
//	ВидПредставленияЧисла - ПеречислениеСсылка.ВидыПредставленияЧисел - вид представления возвращаемой строки.
//
// Возвращаемое значение:
//	Строка - строковое представление числа в виде <ФорматированноеЧисло> <Размерность>.
//
Функция ПолучитьСокращенноеПредставлениеЧисла(ИсходноеЧисло, Разрядность, ВидПредставленияЧисла) Экспорт 
	
	СокращенноеПредставлениеЧисла = "";
	СокращенноеПредставлениеПорядкаЧисел = "";
	
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='%1 тыс.'");
	ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='%1 млн.'");
	Иначе
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='%1'");
	КонецЕсли;
	
	ФорматнаяСтрокаЧисла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ЧДЦ=%1;ЧН='"),
		Формат(Разрядность, "ЧГ=0;"));
	СокращенноеПредставлениеЧисла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СокращенноеПредставлениеПорядкаЧисел,
		Формат(ИсходноеЧисло, ФорматнаяСтрокаЧисла));
	
	Возврат СокращенноеПредставлениеЧисла;
	
КонецФункции

// Возвращает строку для видов тыс., млн
// 
// Параметры:
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//
// Возвращаемое значение:
//	Строка - представление размерности числа (пустая строка, "тыс." или "млн.").
//
Функция ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) Экспорт
	
	СокращенноеПредставлениеПорядкаЧисел = "";
	
	ВидПредставленияЧисла = ВариантАнализа.КратностьЗначений;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='тыс.'");
	ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='млн.'");
	КонецЕсли;
	
	Возврат СокращенноеПредставлениеПорядкаЧисел;
	
КонецФункции

// Возвращает количества источников данных с разбивкой по зонам внимания и вариантам отображения.
//
// Параметры:
//	НаборИсточниковДанных - ТаблицаЗначений - анализируемый набор
//	УчитыватьВариантыОтображения - Булево
//
// Возвращаемое значение:
//	Структура - содержит количества источников данных.
//
Функция СтатистикаИсточниковДанныхПоЗонамВнимания(НаборИсточниковДанных, УчитыватьВариантыОтображения = Ложь) Экспорт
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ЗоныВнимания = Перечисления.ЗоныВниманияВариантовАнализа;
	
	Если УчитыватьВариантыОтображения Тогда
		СтатистикаПоСтрокам = Новый Структура;
		СтатистикаПоСтрокам.Вставить("КритическоеСостояниеКратко");
		СтатистикаПоСтрокам.Вставить("КритическоеСостояниеПодробно");
		СтатистикаПоСтрокам.Вставить("ВажноКратко");
		СтатистикаПоСтрокам.Вставить("ВажноПодробно");
		СтатистикаПоСтрокам.Вставить("КСведениюКратко");
		СтатистикаПоСтрокам.Вставить("КСведениюПодробно");
		СтатистикаПоСтрокам.Вставить("РассчитанныеСОшибкамиКратко");
		СтатистикаПоСтрокам.Вставить("РассчитанныеСОшибкамиПодробно");
		
		// Отберем критическое состояние
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КритическоеСостояние, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.КритическоеСостояниеКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		ОтборВсехКратких = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
		НаборИсточниковДанныхБезКратких = ПрименитьКТаблицеУсловиеНЕ(НаборИсточниковДанных, ОтборВсехКратких);
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		СтатистикаПоСтрокам.КритическоеСостояниеПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем важные
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.Важно, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.ВажноКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		СтатистикаПоСтрокам.ВажноПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели к сведению
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КСведению, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.КСведениюКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		СтатистикаПоСтрокам.КСведениюПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели, рассчитанные с ошибками
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.РассчитанныеСОшибками, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.РассчитанныеСОшибкамиКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		СтатистикаПоСтрокам.РассчитанныеСОшибкамиПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
	Иначе
		СтатистикаПоСтрокам = Новый Структура;
		СтатистикаПоСтрокам.Вставить("КритическоеСостояние");
		СтатистикаПоСтрокам.Вставить("Важно");
		СтатистикаПоСтрокам.Вставить("КСведению");
		СтатистикаПоСтрокам.Вставить("РассчитанныеСОшибками");
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		СтатистикаПоСтрокам.КритическоеСостояние = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		СтатистикаПоСтрокам.Важно = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		СтатистикаПоСтрокам.КСведению = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		СтатистикаПоСтрокам.РассчитанныеСОшибками = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
	КонецЕсли;
	
	Возврат СтатистикаПоСтрокам;
	
КонецФункции

// Возвращает количества источников данных с разбивкой по состояниям и вариантам отображения.
//
// Параметры:
//	НаборИсточниковДанных - ТаблицаЗначений - анализируемый набор
//	УчитыватьВариантыОтображения - Булево
//
// Возвращаемое значение:
//	Структура - содержит количества источников данных.
//
Функция СтатистикаИсточниковДанныхПоСостояниям(НаборИсточниковДанных, УчитыватьВариантыОтображения = Ложь) Экспорт
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	Если УчитыватьВариантыОтображения Тогда
		СтатистикаПоСтрокам = Новый Структура;
		СтатистикаПоСтрокам.Вставить("НеприемлемоеСостояниеКратко");
		СтатистикаПоСтрокам.Вставить("НеприемлемоеСостояниеПодробно");
		СтатистикаПоСтрокам.Вставить("ПриемлемоеСостояниеКратко");
		СтатистикаПоСтрокам.Вставить("ПриемлемоеСостояниеПодробно");
		СтатистикаПоСтрокам.Вставить("ЦельДостигнутаКратко");
		СтатистикаПоСтрокам.Вставить("ЦельДостигнутаПодробно");
		СтатистикаПоСтрокам.Вставить("СостояниеНеОпределеноКратко");
		СтатистикаПоСтрокам.Вставить("СостояниеНеОпределеноПодробно");
		СтатистикаПоСтрокам.Вставить("РассчитаноСОшибкамиКратко");
		СтатистикаПоСтрокам.Вставить("РассчитаноСОшибкамиПодробно");
		
		// Отберем неприемлемые значения
		Отбор = Новый Структура("Статус, ВариантОтображения", "НеприемлемоеСостояние", ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.НеприемлемоеСостояниеКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		ОтборВсехКратких = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
		НаборИсточниковДанныхБезКратких = ПрименитьКТаблицеУсловиеНЕ(НаборИсточниковДанных, ОтборВсехКратких);
		
		Отбор = Новый Структура("Статус", "НеприемлемоеСостояние");
		СтатистикаПоСтрокам.НеприемлемоеСостояниеПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем приемлемые значения
		Отбор = Новый Структура("Статус, ВариантОтображения", "ПриемлемоеСостояние", ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.ПриемлемоеСостояниеКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "ПриемлемоеСостояние");
		СтатистикаПоСтрокам.ПриемлемоеСостояниеПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели, достигшие цели
		Отбор = Новый Структура("Статус, ВариантОтображения", "ЦельДостигнута", ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.ЦельДостигнутаКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "ЦельДостигнута");
		СтатистикаПоСтрокам.ЦельДостигнутаПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели, у которых состояние не определено
		Отбор = Новый Структура("Статус, ВариантОтображения", "СостояниеНеОпределено", ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.СостояниеНеОпределеноКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "СостояниеНеОпределено");
		СтатистикаПоСтрокам.СостояниеНеОпределеноПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели, рассчитанные с ошибками
		Отбор = Новый Структура("Статус, ВариантОтображения", "РассчитаноСОшибками", ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.РассчитаноСОшибкамиКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "РассчитаноСОшибками");
		СтатистикаПоСтрокам.РассчитаноСОшибкамиПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
	Иначе
		СтатистикаПоСтрокам = Новый Структура;
		СтатистикаПоСтрокам.Вставить("НеприемлемоеСостояние");
		СтатистикаПоСтрокам.Вставить("ПриемлемоеСостояние");
		СтатистикаПоСтрокам.Вставить("ЦельДостигнута");
		СтатистикаПоСтрокам.Вставить("СостояниеНеОпределено");
		СтатистикаПоСтрокам.Вставить("РассчитаноСОшибками");
		
		Отбор = Новый Структура("Статус", "НеприемлемоеСостояние");
		СтатистикаПоСтрокам.НеприемлемоеСостояние = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "ПриемлемоеСостояние");
		СтатистикаПоСтрокам.ПриемлемоеСостояние = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "ЦельДостигнута");
		СтатистикаПоСтрокам.ЦельДостигнута = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "СостояниеНеОпределено");
		СтатистикаПоСтрокам.СостояниеНеОпределено = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("Статус", "РассчитаноСОшибками");
		СтатистикаПоСтрокам.РассчитаноСОшибками = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
	КонецЕсли;
	
	Возврат СтатистикаПоСтрокам;
	
КонецФункции

// Возвращает свойства типов анализа - доступные типы диаграмм, 
// доступность объекта анализа, требуется ли оформление типа анализа.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ТипАнализа - ПеречислениеСсылка.ТипыАнализаПоказателей -
// * ТипДиаграммы - ПеречислениеСсылка.ТипыДиаграммПоказателей -
// * ОформлениеПокомпонентногоСравненияДоступно - Булево - 
// * ОбъектАнализаДоступен - Булево - 
// * ПериодСравненияДоступен - Булево - 
// * ПрогнозированиеДоступно - Булево - 
// * ВыводитьМаркерыТочекДоступно - Булево - 
// * ВыводитьМаркерТочекПрогнозаДоступно - Булево - 
// * ВыводитьПодписиКДиаграммамДоступно - Булево - 
// * ОкантовкаДиаграммДоступно - Булево - 
// * РежимСглаживанияДиаграммДоступно - Булево - 
Функция ТипыАнализаИДиаграмм() Экспорт
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("ТипАнализа", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыАнализаПоказателей"));
	ТаблицаСоответствий.Колонки.Добавить("ТипДиаграммы", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДиаграммПоказателей"));
	ТаблицаСоответствий.Колонки.Добавить("ОформлениеПокомпонентногоСравненияДоступно", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ОбъектАнализаДоступен", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ПериодСравненияДоступен", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ПрогнозированиеДоступно", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ВыводитьМаркерыТочекДоступно", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ВыводитьМаркерТочекПрогнозаДоступно", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ВыводитьПодписиКДиаграммамДоступно", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("ОкантовкаДиаграммДоступно", ОписаниеТипаБулево);
	ТаблицаСоответствий.Колонки.Добавить("РежимСглаживанияДиаграммДоступно", ОписаниеТипаБулево);
	
	ТипыСравнений = Перечисления.ТипыАнализаПоказателей;
	ТипыДиаграмм = Перечисления.ТипыДиаграммПоказателей;
	
	// Пустой тип анализа
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	
	// Динамика изменений
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Истина;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Ложь;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Ложь;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Истина;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Истина;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	// Покомпонентное сравнение (динамика)
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Ложь;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСНакоплением;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластями;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластямиИНакоплением;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластямиНормированный;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Ложь;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	// Покомпонентное сравнение (структура)
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Круговая;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	// Текущее состояние
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ИзмерениеТекущегоСостояния;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Измерительная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Ложь;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Ложь;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	// Сравнение с прошлым периодом
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Истина;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Истина;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	НовоеСравнение.ВыводитьМаркерыТочекДоступно = Ложь;
	НовоеСравнение.ВыводитьМаркерТочекПрогнозаДоступно = Ложь;
	НовоеСравнение.ВыводитьПодписиКДиаграммамДоступно = Истина;
	НовоеСравнение.ОкантовкаДиаграммДоступно = Истина;
	НовоеСравнение.РежимСглаживанияДиаграммДоступно = Ложь;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Возвращает цвета, характеризующие состояние(статус) и тренд (изменение) показателя.
//
// Параметры:
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//	ИсточникДанных - См. ПолучитьИсточникДанныхВариантаАнализаИзДемоДанных
//
// Возвращаемое значение:
//	Структура - со свойствами:
//		*ЦветСостояния - Цвет - цвет состояния.
//		*ЦветТренда - Цвет - цвет тренда.
//
Функция ПолучитьЦветаСостоянияИТрендаПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	ЦветаСостоянияИТренда = Новый Структура("ЦветСостояния, ЦветТренда");
	
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа.Владелец, "ЦелевойТренд");
	НастройкиОформления = ВариантАнализа.ХранилищеНастроекОформления.Получить();
	
	ЦветСостояния = Новый Цвет;
	
	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
			ВариантАнализа);
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных,
			ЦелевойТренд,
			ВидЦелевогоЗначения,
			ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_"
		+ ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	
	// Получим цвет состояния
	СекцияЦветСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗначениеЦветаСтатуса");
	
	ИмяЦвета = СекцияЦветСостояния.ТекущаяОбласть.Параметр;
	Если ИмяЦвета <> "Неопределено" Тогда
		ЦветСостояния = НастройкиОформления.Цвета[ИмяЦвета];
	Иначе
		ЦветСостояния = Новый Цвет(65, 48, 3);
	КонецЕсли;
	ЦветаСостоянияИТренда.ЦветСостояния = ЦветСостояния;
	
	// Получим цвет тренда
	СекцияЦветТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗначениеЦветаТренда");
	
	ИмяЦвета = СекцияЦветТренда.ТекущаяОбласть.Параметр;
	Если ИмяЦвета <> "Неопределено" Тогда
		ЦветТренда = НастройкиОформления.Цвета[ИмяЦвета];
	Иначе
		ЦветТренда = Новый Цвет(65, 48, 3);
	КонецЕсли;
	ЦветаСостоянияИТренда.ЦветТренда = ЦветТренда;
	
	Возврат ЦветаСостоянияИТренда;
КонецФункции

// Возвращает таблицу значений с примененным к ней отбором
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - обрабатываемая таблица
//	СтруктураОтборов - Структура - применяемые отборы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - обработанная таблица.
//
Функция ПрименитьКТаблицеУсловие(ТаблицаЗначений, СтруктураОтборов) Экспорт
	
	ТаблицаЗначенийКОбработке = ТаблицаЗначений.Скопировать();
	
	СтрокиКУдалению = НайтиСтрокиТаблицыПоУсловиюНЕ(ТаблицаЗначенийКОбработке, СтруктураОтборов);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаЗначенийКОбработке.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКОбработке;
	
КонецФункции

// Возвращает таблицу значений с примененным к ней отбором по условию НЕ
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - обрабатываемая таблица
//	СтруктураОтборов - Структура - применяемые отборы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - обработанная таблица.
//
Функция ПрименитьКТаблицеУсловиеНЕ(ТаблицаЗначений, СтруктураОтборов) Экспорт
	
	ТаблицаЗначенийКОбработке = ТаблицаЗначений.Скопировать();
	
	СтрокиКУдалению = ТаблицаЗначенийКОбработке.НайтиСтроки(СтруктураОтборов);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаЗначенийКОбработке.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКОбработке;
	
КонецФункции

// Возвращает результат проверки шаблона расчета целевого показателя
//
// Параметры:
//	МакетСКДПоказателя - СхемаКомпоновкиДанных - проверяемый шаблон расчета.
//
// Возвращаемое значение:
//	Структура - содержит признак корректности шаблона и описание ошибки
//			МакетКорректный - Булево
//			ОписаниеОшибок - Массив - обнаруженные ошибки.
//
Функция ПроверитьСхемуКомпоновкиДанных(МакетСКДПоказателя) Экспорт
	
	РезультатПроверки = Новый Структура("МакетКорректный, ОписаниеОшибок", Истина, Неопределено);
	
	МассивОшибок = Новый Массив;
	
	// Проверим заполненность макета
	Если МакетСКДПоказателя = Неопределено Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не заполнен.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	// Проверим доступность обязательных наборов данных
	
	Если МакетСКДПоказателя.НаборыДанных.Найти("ТаблицаПериодов") = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""%1"". 
			|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"),
			"ТаблицаПериодов");
		МассивОшибок.Добавить(ТекстОшибки);
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	Если МакетСКДПоказателя.НаборыДанных.Найти("ЦелевыеЗначения") = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""%1"". 
			|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"),
			"ЦелевыеЗначения");
		МассивОшибок.Добавить(ТекстОшибки);
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	Если МакетСКДПоказателя.НаборыДанных.Найти("ДанныеДляАнализа") = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""%1"". 
			|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"),
			"ДанныеДляАнализа");
		МассивОшибок.Добавить(ТекстОшибки);
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	// Проверим корректность связей наборов данных
	
	ТаблицаПериодовЕсть = Ложь;
	ЦелевыеЗначенияЕсть = Ложь;
	ДанныеДляАнализаЕсть = Ложь;
	Если МакетСКДПоказателя.СвязиНаборовДанных.Количество() = 2 Тогда
		
		Для Каждого СвязьНаборовДанных Из МакетСКДПоказателя.СвязиНаборовДанных Цикл 
			
			Если СтрНайти(СвязьНаборовДанных.ВыражениеИсточник, "ТаблицаПериодов")
				И СтрНайти(СвязьНаборовДанных.ВыражениеПриемник, "ЦелевыеЗначения") Тогда
				
					ТаблицаПериодовЕсть = Истина;
					ЦелевыеЗначенияЕсть = Истина;
				
			ИначеЕсли СтрНайти(СвязьНаборовДанных.ВыражениеИсточник, "ТаблицаПериодов")
				И СтрНайти(СвязьНаборовДанных.ВыражениеПриемник, "ЦелевыеЗначения") Тогда
				
					ТаблицаПериодовЕсть = Истина;
					ДанныеДляАнализаЕсть = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаПериодовЕсть И Не ЦелевыеЗначенияЕсть ИЛИ МакетСКДПоказателя.СвязиНаборовДанных.Количество() < 2 Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит связи между таблицей периодов и целевых значений. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	Если ТаблицаПериодовЕсть И Не ДанныеДляАнализаЕсть ИЛИ МакетСКДПоказателя.СвязиНаборовДанных.Количество() < 2 Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит связи между таблицей периодов и данными для анализа. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	// Проверим, что вариант настроек один
	Если МакетСКДПоказателя.ВариантыНастроек.Количество() <> 1 Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать один вариант настроек. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	URLСхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(МакетСКДПоказателя, Новый УникальныйИдентификатор());
	НовыйИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(НовыйИсточникДоступныхНастроек);
		
	// Проверим, что служебные поля доступны
	СлужебныеРесурсы = Справочники.СтруктураЦелей.СлужебныеПоляЗначенияАнализа();
	СлужебныеИзмерения = Справочники.СтруктураЦелей.СлужебныеПоляОбъектаАнализа();
	
	Для Каждого СлужебныйРесурс Из СлужебныеРесурсы Цикл 
		
		ИскомоеСлужебноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СлужебныйРесурс));
		Если ИскомоеСлужебноеПоле = Неопределено Тогда
			
			СтрокаОшибки = СтрШаблон(НСтр("ru='Шаблон расчета целевого показателя должен содержать служебное поле %%1. 
				|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"),
				"СлужебныйРесурс");
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, СлужебныйРесурс);
			МассивОшибок.Добавить(СтрокаОшибки);
			РезультатПроверки.МакетКорректный = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИскомоеСлужебноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Период"));
	Если ИскомоеСлужебноеПоле = Неопределено Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать служебное поле ""Период"". 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	// Проверим, что доступны измерения кроме служебных
	КоличествоНеслужебныхИзмерений = 0;
	Для Каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл 
		
		Если Не ДоступноеПолеВыбора.Ресурс
			И Не ДоступноеПолеВыбора.Папка
			И Не ДоступноеПолеВыбора.Таблица
			И СлужебныеИзмерения.Найти(Строка(ДоступноеПолеВыбора.Поле)) = Неопределено Тогда
			
			КоличествоНеслужебныхИзмерений = КоличествоНеслужебныхИзмерений + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНеслужебныхИзмерений < 1 Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать неслужебные измерения. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	КоличествоНеслужебныхРесурсов = 0;
	Для Каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл 
		
		Если ДоступноеПолеВыбора.Ресурс 
			И Не ДоступноеПолеВыбора.Папка 
			И Не ДоступноеПолеВыбора.Таблица 
			И СлужебныеРесурсы.Найти(Строка(ДоступноеПолеВыбора.Поле)) = Неопределено Тогда
			
			КоличествоНеслужебныхРесурсов = КоличествоНеслужебныхРесурсов + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНеслужебныхРесурсов < 1 Тогда
		
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать неслужебные ресурсы. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	// Запишем ошибки в результат
	
	РезультатПроверки.ОписаниеОшибок = МассивОшибок;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает строковое представление уникального идентификатора.
// Символы "-" заменяются на "_".
// 
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - идентификатор, который требуется преобразовать в строку.
//
// Возвращаемое значение:
//	Строка - строковое представление уникального идентификатора.
//
Функция УникальныйИдентификаторВСтроку(УникальныйИдентификатор) Экспорт
	Возврат СтрЗаменить(Строка(УникальныйИдентификатор), "-", "_");
КонецФункции

// Возвращает уникальный идентификатор из строки, которая была получена функцией УникальныйИдентификаторВСтроку.
// 
// Параметры:
//	Строка - Строка - строковое представление уникального идентификатора, полученное функцией УникальныйИдентификаторВСтроку.
//
// Возвращаемое значение:
//	УникальныйИдентификатор - идентификатор, полученный из строки.
//
Функция СтрокуВУникальныйИдентификатор(Строка) Экспорт
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(Строка, "_", "-"));
КонецФункции

// Возвращает локализованное представление состояния
// 
// Параметры:
//	Состояние - Строка - строковое значение состояния показателя.
//
// Возвращаемое значение:
//	Строка - локализованное, адаптированное для интерфейса представление состояния.
// 
Функция ПредставлениеСостояния(Состояние) Экспорт
	Если Состояние = "НеприемлемоеСостояние" Тогда
		Представление = НСтр("ru= 'Неприемлемое состояние'");
	ИначеЕсли Состояние = "ПриемлемоеСостояние" Тогда
		Представление = НСтр("ru= 'Приемлемое состояние'");
	ИначеЕсли Состояние = "ЦельДостигнута" Тогда
		Представление = НСтр("ru= 'Цель достигнута'");
	ИначеЕсли Состояние = "СостояниеНеопределено" Тогда
		Представление = НСтр("ru= 'Состояние не определено'");
	ИначеЕсли Состояние = "РассчитаноСОшибками" Тогда
		Представление = НСтр("ru= 'Рассчитано с ошибками'");
	Иначе
		Представление = Состояние;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прогнозирование

// Функция рассчитывает прогноз на основании переданной таблицы значений и дополняет ее при необходимости.
//
// Параметры:
//   ИсточникДанных - См. ИнициализироватьИсточникДанных
//   ПараметрыРасчетаПрогноза - Структура - со свойствами:
//    *КолонкаХ - Строка - наименование колонки для данных по оси Х.
//    *КолонкаУ - Строка - наименование колонки для данных по оси У.
//    *КолонкаПризнак - Строка - 
//    *Базис - Структура -:
//       **ДатаНачала - Дата - базовая дата отчета.
//       **Период - ПеречислениеСсылка.Периодичность - Используемый период для расчета.
//       **КоличествоПериодов - Число - количество периодов между соседними значениями дат по оси Х.
//    *ГлубинаАнализа - Число - смещение по оси Х, в пределах которого рассчитывается тренд.
//    *Смещение - Число - смещение по оси Х, в пределах которого рассчитываются экстраполируемые значения.
//    *ДополнятьТаблицу - Булево - если Истина, то в таблицу значений добавляются экстраполированные значения.
//    *Прогноз - Булево - 
//
// Возвращаемое значение:
//   Структура - со свойствами:
//    *Значение - Число - экстраполированное значение для смещения по оси Х, или неопределено, при ошибке в расчете.
//    *Адекватность - Число - значение коэффициента отклонения.
//    *СпособРасчета - Строка, Неопределено - содержит наименование метода расчета.
//    *Пустой - Булево - 
//
Функция СформироватьПрогнозныеЗначенияИсточникаДанных(ИсточникДанных, ПараметрыРасчетаПрогноза)
	
	КолонкаХ = ПараметрыРасчетаПрогноза.КолонкаХ;
	КолонкаУ = ПараметрыРасчетаПрогноза.КолонкаУ;
	КолонкаПризнак = ПараметрыРасчетаПрогноза.КолонкаПризнак;
	Базис = ПараметрыРасчетаПрогноза.Базис;
	ГлубинаАнализа = ПараметрыРасчетаПрогноза.ГлубинаАнализа;
	Смещение = ПараметрыРасчетаПрогноза.Смещение;
	ДополнятьТаблицу = ПараметрыРасчетаПрогноза.ДополнятьТаблицу;
	Прогноз = ПараметрыРасчетаПрогноза.Прогноз;
		
	СтруктураНеобходимостиРасчетов = Новый Структура;
	СтруктураНеобходимостиРасчетов.Вставить("Линейная",			Истина);
	СтруктураНеобходимостиРасчетов.Вставить("Логарифмическая",	Истина);
	СтруктураНеобходимостиРасчетов.Вставить("Квадратичная",		Истина);
	СтруктураНеобходимостиРасчетов.Вставить("Экспоненциальная",	Истина);
	
	СтруктураРезультатПрогноза = Новый Структура("Значение, Адекватность, СпособРасчета, Пустой");
	
	ПозицияБазиса = 0;
	
	СумФакт=0;
	СумЛогФакт=0;
	СумФактАргумент=0;
	СумФактЛогАргумент=0;
	СумЛогФактАргумент=0;
	СумФактАргумент2=0;
	СумАргумент=0;
	СумЛогАргумент=0;
	СумАргумент2=0;
	СумЛогАргумент2=0;
	СумАргумент3=0;
	СумАргумент4=0;
	
	ТаблицаЗначений = ИсточникДанных.Данные;
	ДатаПослФактЗначения = ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения;
	
	Если ТаблицаЗначений.Найти(Базис.ДатаНачала, КолонкаХ) = Неопределено Тогда
		СтруктураРезультатПрогноза.Вставить("Значение",			0);
		СтруктураРезультатПрогноза.Вставить("Адекватность",		0);
		СтруктураРезультатПрогноза.Вставить("СпособРасчета",	Неопределено);
		СтруктураРезультатПрогноза.Вставить("Пустой",			Истина);
		
		Возврат СтруктураРезультатПрогноза;
	КонецЕсли;
	
	// Всегда подается с непрерывным интервалом
	РабочаяТаблица = ТаблицаСНепрерывнымИнтервалом(ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса); 
	
	Если РабочаяТаблица = Неопределено Тогда
		СтруктураРезультатПрогноза.Вставить("Значение",			0);
		СтруктураРезультатПрогноза.Вставить("Адекватность",		0);
		СтруктураРезультатПрогноза.Вставить("СпособРасчета",	Неопределено);
		СтруктураРезультатПрогноза.Вставить("Пустой",			Истина);
		
		Возврат СтруктураРезультатПрогноза;
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("ПорядковыйНомер");
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		НомерСтроки = Строка.ПорядковыйНомер;
		
		Факт=Строка.Значение;
		
		СумФакт=СумФакт+Факт;
		СумЛогФакт=СумЛогФакт+?(Факт>0,Log(Факт),0);
		СумФактАргумент=СумФактАргумент+Факт*НомерСтроки;
		СумФактЛогАргумент=СумФактЛогАргумент+Факт*Log(НомерСтроки);
		СумЛогФактАргумент=СумЛогФактАргумент+?(Факт>0,Log(Факт),0)*НомерСтроки;
		СумФактАргумент2=СумФактАргумент2+Факт*Pow(НомерСтроки,2);
		СумАргумент=СумАргумент+НомерСтроки;
		СумЛогАргумент=СумЛогАргумент+Log(НомерСтроки);
		СумАргумент2=СумАргумент2+Pow(НомерСтроки,2);
		СумЛогАргумент2=СумЛогАргумент2+Pow(Log(НомерСтроки),2);
		СумАргумент3=СумАргумент3+Pow(НомерСтроки,3);
		СумАргумент4=СумАргумент4+Pow(НомерСтроки,4);
		
	КонецЦикла; 
	КолФакт  = РабочаяТаблица.Количество();
	СредФакт = ?(КолФакт>0,СумФакт/КолФакт,0);
	
	// Формулы Крамера для линейной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		ОпределительЛинПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЛин1 = СумФакт*СумАргумент2-СумАргумент*СумФактАргумент;
		ОпределительЛин2 = КолФакт*СумФактАргумент-СумФакт*СумАргумент;
		
		Если ОпределительЛинПолный=0 Тогда
			СтруктураНеобходимостиРасчетов.Линейная = Ложь;
		Иначе
			КоэффициентЛинейной1=ОпределительЛин1/ОпределительЛинПолный;
			КоэффициентЛинейной2=ОпределительЛин2/ОпределительЛинПолный;
		КонецЕсли; 
	КонецЕсли;
	// Формулы Крамера для экспоненциальной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		ОпределительЭкспПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЭксп1 = СумЛогФакт*СумАргумент2-СумАргумент*СумЛогФактАргумент;
		ОпределительЭксп2 = КолФакт*СумЛогФактАргумент-СумЛогФакт*СумАргумент;
		
		Если ОпределительЭкспПолный=0 Тогда
			СтруктураНеобходимостиРасчетов.Экспоненциальная = Ложь;
		Иначе
			КоэффициентЭкспоненциальной1=Exp(ОпределительЭксп1/ОпределительЭкспПолный);
			КоэффициентЭкспоненциальной2=ОпределительЭксп2/ОпределительЭкспПолный;
		КонецЕсли;
	КонецЕсли;
	// Формулы Крамера для логарифмической аппроксимации
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		ОпределительЛогПолный = КолФакт*СумЛогАргумент2-Pow(СумЛогАргумент,2);
		ОпределительЛог1 = СумФакт*СумЛогАргумент2-СумЛогАргумент*СумФактЛогАргумент;
		ОпределительЛог2 = КолФакт*СумФактЛогАргумент-СумФакт*СумЛогАргумент;
		
		Если ОпределительЛогПолный=0 Тогда
			СтруктураНеобходимостиРасчетов.Логарифмическая = Ложь;
		Иначе
			КоэффициентЛогарифмической1=ОпределительЛог1/ОпределительЛогПолный;
			КоэффициентЛогарифмической2=ОпределительЛог2/ОпределительЛогПолный;
		КонецЕсли;
		
	КонецЕсли;
	// Формулы Крамера для квадратичной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		ОпределительКвПолный =КолФакт*СумАргумент2*СумАргумент4+2*СумАргумент*СумАргумент2*СумАргумент3-
			Pow(СумАргумент2,3)-КолФакт*Pow(СумАргумент3,2)-Pow(СумАргумент,2)*СумАргумент4;
		ОпределительКв1 = СумФакт*СумАргумент2*СумАргумент4+СумАргумент*СумАргумент3*СумФактАргумент2+СумФактАргумент*СумАргумент2*СумАргумент3-
			Pow(СумАргумент2,2)*СумФактАргумент2-СумФактАргумент*СумАргумент*СумАргумент4-Pow(СумАргумент3,2)*СумФакт;
		ОпределительКв2 = КолФакт*СумФактАргумент*СумАргумент4+СумФакт*СумАргумент3*СумАргумент2+СумАргумент*СумФактАргумент2*СумАргумент2-
			Pow(СумАргумент2,2)*СумФактАргумент-СумФакт*СумАргумент*СумАргумент4-КолФакт*СумФактАргумент2*СумАргумент3;
		ОпределительКв3 = КолФакт*СумАргумент2*СумФактАргумент2+СумАргумент*СумФактАргумент*СумАргумент2+СумАргумент*СумАргумент3*СумФакт-
			Pow(СумАргумент2,2)*СумФакт-Pow(СумАргумент,2)*СумФактАргумент2-КолФакт*СумАргумент3*СумФактАргумент;
		
		Если ОпределительКвПолный=0 Тогда
			СтруктураНеобходимостиРасчетов.Квадратичная = Ложь;
		Иначе
			КоэффициентКвадратичной1=ОпределительКв1/ОпределительКвПолный;
			КоэффициентКвадратичной2=ОпределительКв2/ОпределительКвПолный;
			КоэффициентКвадратичной3=ОпределительКв3/ОпределительКвПолный;
		КонецЕсли;
		
	КонецЕсли;
	
	СумОстЛинейной = 0;
	СумОстКвадратичной = 0;
	СумОстЭкспоненциальной = 0;
	СумОстЛогарифмической = 0;
	СумПолн = 0;
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		Факт = Строка.Значение;
		НомерСтроки = Строка.ПорядковыйНомер;
		
		Если СтруктураНеобходимостиРасчетов.Линейная Тогда
			РасчетПоЛинейной=КоэффициентЛинейной1+КоэффициентЛинейной2*НомерСтроки;
			СумОстЛинейной=СумОстЛинейной+Pow((Факт-РасчетПоЛинейной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
			РасчетПоКвадратичной=КоэффициентКвадратичной1+КоэффициентКвадратичной2*НомерСтроки+КоэффициентКвадратичной3*Pow(НомерСтроки,2);
			СумОстКвадратичной=СумОстКвадратичной+Pow((Факт-РасчетПоКвадратичной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
			РасчетПоЭкспоненциальной=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*НомерСтроки);
			СумОстЭкспоненциальной=СумОстЭкспоненциальной+Pow((Факт-РасчетПоЭкспоненциальной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
			РасчетПоЛогарифмической=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(НомерСтроки);
			СумОстЛогарифмической=СумОстЛогарифмической+Pow((Факт-РасчетПоЛогарифмической),2);
		КонецЕсли;
		
		СумПолн=СумПолн+Pow((СредФакт-Факт),2);
		
	КонецЦикла;
	
	МаксКоэффициент = Неопределено;
	ВыбранноеЗначение = Неопределено;
	
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		КоэффДетЛинейной=?(СумПолн<>0,1-СумОстЛинейной/СумПолн,1);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент = КоэффДетЛинейной;
		ИначеЕсли МаксКоэффициент < КоэффДетЛинейной Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент = КоэффДетЛинейной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		
		КоэффДетКвадратичной=?(СумПолн<>0,1-СумОстКвадратичной/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент = КоэффДетКвадратичной;
		ИначеЕсли МаксКоэффициент < КоэффДетКвадратичной Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент = КоэффДетКвадратичной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		
		КоэффДетЛогарифмической=?(СумПолн<>0,1-СумОстЛогарифмической/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Логарифмическая";
			МаксКоэффициент = КоэффДетЛогарифмической;
		ИначеЕсли МаксКоэффициент < КоэффДетЛогарифмической Тогда
			ВыбранноеЗначение = "Логарифмическая";
			МаксКоэффициент = КоэффДетЛогарифмической;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		
		КоэффДетЭкспоненциальной=?(СумПолн<>0,1-СумОстЭкспоненциальной/СумПолн,0);
		
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент = КоэффДетЭкспоненциальной;
		ИначеЕсли МаксКоэффициент < КоэффДетЭкспоненциальной Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент = КоэффДетЭкспоненциальной;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		СтруктураРезультатПрогноза.Вставить("Значение",			0);
		СтруктураРезультатПрогноза.Вставить("Адекватность",		0);
		СтруктураРезультатПрогноза.Вставить("СпособРасчета",	Неопределено);
		СтруктураРезультатПрогноза.Вставить("Пустой",			Истина);
		
		Возврат СтруктураРезультатПрогноза;
	КонецЕсли;
	
	Если ДополнятьТаблицу Тогда
		ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(31, 3);
		Если Прогноз Тогда
			КолонкаПрогноза = ТаблицаЗначений.Колонки.Добавить("Прогноз", ОписаниеТипаЧисло, "Прогноз");
		Иначе
			КолонкаТренда = ТаблицаЗначений.Колонки.Добавить("Тренд", ОписаниеТипаЧисло, "Тренд");
		КонецЕсли;
		ТаблицаЗначений.Колонки.Добавить(КолонкаПризнак, ПолучитьОписаниеТиповБулево(), КолонкаПризнак);
	КонецЕсли;
	
	БазовоеЗначение = СтандартноеБазовоеЗначениеДляДиаграмм();
	
	Для Инд = ?(ДополнятьТаблицу, 0, Смещение) По Смещение Цикл
		
		Аргумент = ПозицияБазиса + Инд;
		
		Если Не Инд = 0 И ВыбранноеЗначение = "Линейная" Тогда
			
			// Линейная аппроксимация
			
			СуммаРасч = КоэффициентЛинейной1+КоэффициентЛинейной2*Аргумент;
			Адекватность = КоэффДетЛинейной;
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Квадратичная" Тогда
			
			// Квадратичная аппроксимация
			
			СуммаРасч=КоэффициентКвадратичной1+КоэффициентКвадратичной2*Аргумент+КоэффициентКвадратичной3*Pow(Аргумент,2); 
			Адекватность = КоэффДетКвадратичной;
			
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Экспоненциальная" Тогда
			
			// Экспоненциальная аппроксимация
			
			СуммаРасч=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*Аргумент); 
			Адекватность = КоэффДетЭкспоненциальной;
			
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Логарифмическая" Тогда
			
			// Логарифмическая аппроксимация
			
			СуммаРасч=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(Аргумент);
			Адекватность = КоэффДетЛогарифмической;
			
		КонецЕсли;
		
		Если ДополнятьТаблицу Тогда
			ТекДата = ДатаСоСмещением(Базис.ДатаНачала, Базис.Период, Инд * Базис.КоличествоПериодов);
			
			СтрокаССуществующимПериодом = ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
			
			Если СтрокаССуществующимПериодом = Неопределено Тогда
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока[КолонкаХ] = ТекДата;
				НоваяСтрока[КолонкаУ] = БазовоеЗначение;
			Иначе 
				НоваяСтрока = СтрокаССуществующимПериодом;
				Если ТекДата > ДатаПослФактЗначения Тогда
					НоваяСтрока[КолонкаУ] = БазовоеЗначение;
				КонецЕсли;
			КонецЕсли;
			
			Если Прогноз Тогда
				Если ТекДата = ДатаПослФактЗначения Тогда
					НоваяСтрока[КолонкаПрогноза.Имя] = НоваяСтрока[КолонкаУ];
				Иначе
					НоваяСтрока[КолонкаПрогноза.Имя] = СуммаРасч;
				КонецЕсли;
			Иначе 
				НоваяСтрока[КолонкаТренда.Имя] = СуммаРасч;
			КонецЕсли;
			
			Если КолонкаПризнак <> Неопределено Тогда
				НоваяСтрока[КолонкаПризнак] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнятьТаблицу Тогда 
		
		// Заполним базовым значением "пустых" точек трендов и прогнозов
		ОтборНеПризнак = Новый Структура("Признак", Ложь);
		СтрокиНеПризнак = ТаблицаЗначений.НайтиСтроки(ОтборНеПризнак);
		Для Каждого СтрокаНеПризнак Из СтрокиНеПризнак Цикл 
			СтрокаНеПризнак[?(Прогноз, КолонкаПрогноза.Имя, КолонкаТренда.Имя)] = БазовоеЗначение;	
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураРезультатПрогноза.Вставить("Значение",			СуммаРасч);
	СтруктураРезультатПрогноза.Вставить("Адекватность",		Адекватность);
	СтруктураРезультатПрогноза.Вставить("СпособРасчета",	ВыбранноеЗначение);
	СтруктураРезультатПрогноза.Вставить("Пустой",			Ложь);
		
	Возврат СтруктураРезультатПрогноза;
	
КонецФункции

// Формирует таблицу, в которой строки идут с заданным шагом по датам.
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - исходные данные (см. ИнициализироватьИсточникДанных.Данные).
//	Базис - Структура - свойства:
//		*ДатаНачала - Дата - базовая дата отчета.
//		*Период - ПеречислениеСсылка.Периодичность - используемый период для расчета.
//		*КоличествоПериодов - Число - количество периодов между соседними значениями дат по оси Х.
//	ГлубинаАнализа - Число - смещение по оси Х, в пределах которого рассчитывается тренд.
//	КолонкаХ - Строка - наименование колонки для данных по оси Х.
//	КолонкаУ - Строка - наименование колонки для данных по оси У.
//	ПозицияБазиса - Число - 
//
// Возвращаемое значение:
//	- ТаблицаЗначений - если удалось обработать.
//	- Неопределено - если данных недостаточно для экстраполяции.
//
Функция ТаблицаСНепрерывнымИнтервалом(Знач ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса)
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	РабочаяТаблица.Колонки.Добавить("ПорядковыйНомер", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	РабочаяТаблица.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	РабочаяТаблица.Колонки.Добавить("Значение", ОбщегоНазначения.ОписаниеТипаЧисло(31, 3));
	
	ПоследнееЗаполненное = Неопределено;
	КоличествоЗаполненныхДанных = 0;
	ПорядковыйНомер = 1;
	
	Для Инд = 1 По ГлубинаАнализа Цикл
		ТекДата = ДатаСоСмещением(Базис.ДатаНачала, Базис.Период, (Инд - ГлубинаАнализа) * Базис.КоличествоПериодов);
		ФактСтрока = ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
		
		Если ФактСтрока = Неопределено Тогда
			
			Если ПоследнееЗаполненное <> Неопределено Тогда
				НоваяСтрока = РабочаяТаблица.Добавить();
				НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
				НоваяСтрока.Дата = ТекДата;
				НоваяСтрока.Значение = 0;
				ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
		Иначе
		
			НоваяСтрока = РабочаяТаблица.Добавить();
			НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
			НоваяСтрока.Дата			= ТекДата;
			НоваяСтрока.Значение		= ФактСтрока[КолонкаУ];
			КоличествоЗаполненныхДанных = КоличествоЗаполненныхДанных + 1;
			Если ПоследнееЗаполненное <> Неопределено И ПоследнееЗаполненное < ПорядковыйНомер - 1 Тогда
				НачЗначение = РабочаяТаблица.Найти(ПоследнееЗаполненное, "ПорядковыйНомер").Значение;
				КонЗначение = НоваяСтрока.Значение;
				Коэффициент = (КонЗначение - НачЗначение) / (ПорядковыйНомер - ПоследнееЗаполненное + 1);
				
				Для Инд2 = ПоследнееЗаполненное + 1 По ПорядковыйНомер - 1 Цикл
					ПустойПериод = РабочаяТаблица.Найти(Инд2, "ПорядковыйНомер");
					ПустойПериод.Значение = НачЗначение + Коэффициент * Инд2;
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследнееЗаполненное = ПорядковыйНомер;
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЗаполненныхДанных < 2 Тогда 
		Возврат Неопределено;
	Иначе
		ПозицияБазиса = ПорядковыйНомер - 1;
		Возврат РабочаяТаблица;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ЗоныАнализаЗначенийЦелевыхПоказателей

// Возвращает зону анализа источника данных
//
// Параметры:
//	ИсточникДанных - См. ПолучитьИсточникДанныхВариантаАнализаИзДемоДанных
//	Тренд - ПеречислениеСсылка.ВидыЦелевыхТрендовПоказателей - Тренд.
//	ВидЦелевогоЗначения - ПеречислениеСсылка.ВидыЦелевыхЗначенийВариантовАнализа - диапазон или значение.
//	ТочностьРасчетаДробнойЧасти - Число - целое число, устанавливающее степень округления при расчетах.
//
// Возвращаемое значение:
//	Структура - содержит указание на зону анализа и характер изменений:
//		*НомерЗоны - Число - 
//		*ФактическийТренд - Строка - характер изменений показателя "Рост", "Падение", "БезИзменений".
//					
//
Функция ЗонаАнализаЗначения(ИсточникДанных, Тренд, ВидЦелевогоЗначения, ТочностьРасчетаДробнойЧасти)
	
	ЗонаАнализа = Новый Структура;
	ЗонаАнализа.Вставить("НомерЗоны", 0);
	ЗонаАнализа.Вставить("ФактическийТренд", "");
	ВидыЦелевыхЗначений = Перечисления.ВидыЦелевыхЗначенийВариантовАнализа;
	
	ВидыТрендов = Перечисления.ВидыЦелевыхТрендовПоказателей;
	ПоследнееЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение;
	
	ПредпоследнееЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПредпоследнееЗначение;
	ЗонаАнализаНомерЗоны = 0;
	
	Если Не ИсточникДанных.РасчетыАктуальны Тогда 
		ЗонаАнализаНомерЗоны = 500;
		
	ИначеЕсли Не ИсточникДанных.ОшибкаРасчета И (ВидЦелевогоЗначения = Неопределено ИЛИ ИсточникДанных.Пустой) Тогда
		ЗонаАнализаНомерЗоны = 0;
		
	ИначеЕсли ИсточникДанных.ОшибкаРасчета Тогда 
		ЗонаАнализаНомерЗоны = 100;
		
	Иначе 
		// Получим зону анализа факта
		Если ВидЦелевогоЗначения = ВидыЦелевыхЗначений.Значение Тогда
			ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение;
			ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение;
			ПриведенноеГраничноеНегативноеОтклонение  = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение;
			
			Если Тренд = ВидыТрендов.Максимизация Тогда
				Если ПоследнееЗначение > ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 1;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 2;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеПозитивноеОтклонение
					И ПоследнееЗначение > ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 3;
				ИначеЕсли ПоследнееЗначение = ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 4;
				ИначеЕсли ПоследнееЗначение < ЦелевоеЗначение
					И ПоследнееЗначение > ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 5;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 6;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 7;
				КонецЕсли;
				
			ИначеЕсли Тренд = ВидыТрендов.Минимизация Тогда
				Если ПоследнееЗначение > ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 1;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 2;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеНегативноеОтклонение
					И ПоследнееЗначение > ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 3;
				ИначеЕсли ПоследнееЗначение = ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 4;
				ИначеЕсли ПоследнееЗначение < ЦелевоеЗначение
					И ПоследнееЗначение > ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 5;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 6;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 7;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначений.Диапазон Тогда
			ЦелевойДиапазонМаксимум = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум;
			ЦелевойДиапазонМинимум = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум;
			ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение;
			ПриведенноеГраничноеНегативноеОтклонение  = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение;
			
			Если ПоследнееЗначение > ПриведенноеГраничноеПозитивноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 1;
			ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеПозитивноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 2;
			ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеПозитивноеОтклонение
				И ПоследнееЗначение > ЦелевойДиапазонМаксимум Тогда
				ЗонаАнализаНомерЗоны = 3;
			ИначеЕсли ПоследнееЗначение = ЦелевойДиапазонМаксимум Тогда
				ЗонаАнализаНомерЗоны = 4;
			ИначеЕсли ПоследнееЗначение < ЦелевойДиапазонМаксимум
				И ПоследнееЗначение > ЦелевойДиапазонМинимум Тогда
				ЗонаАнализаНомерЗоны = 5;
			ИначеЕсли ПоследнееЗначение = ЦелевойДиапазонМинимум Тогда
				ЗонаАнализаНомерЗоны = 6;
			ИначеЕсли ПоследнееЗначение < ЦелевойДиапазонМинимум
				И ПоследнееЗначение > ПриведенноеГраничноеНегативноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 7;
			ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеНегативноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 8;
			ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеНегативноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 9;
			КонецЕсли;
			
			Если ЗонаАнализаНомерЗоны > 7
				И (Тренд = ВидыТрендов.Максимизация Или Тренд = ВидыТрендов.Минимизация) Тогда
				ЗонаАнализаНомерЗоны = 7;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗонаАнализа.НомерЗоны = ЗонаАнализаНомерЗоны;
	
	// Получим реальный тренд
	// Если вариант анализа сравнивается с прошлыми периодами, то трендом является изменение по сравнению с прошлым периодом
	// Если сравнение не указано, то трендом является изменение в указанном периоде.
	Если Не ИсточникДанных.Пустой И ИсточникДанных.РасчетыАктуальны Тогда
		Если ИсточникДанных.Свойство("ДанныеСравнения") И Не ИсточникДанных.ДанныеСравнения = Неопределено Тогда
			ДанныеСравнения = ИсточникДанных.ДанныеСравнения; // Структура
			РазницаМеждуЗначениямиФакта = Окр(ПоследнееЗначение - ДанныеСравнения.ПоследнееФактическоеЗначение, ТочностьРасчетаДробнойЧасти);
		Иначе
			РазницаМеждуЗначениямиФакта = Окр(ПоследнееЗначение - ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		КонецЕсли;
		
		Если РазницаМеждуЗначениямиФакта > 0 Тогда
			ФактическийТренд = "Рост";
		ИначеЕсли РазницаМеждуЗначениямиФакта = 0 Тогда
			ФактическийТренд = "БезИзменений";
		ИначеЕсли РазницаМеждуЗначениямиФакта < 0 Тогда
			ФактическийТренд = "Падение";
		КонецЕсли;
	Иначе
		ФактическийТренд = "Неопределен";
	КонецЕсли;
	
	ЗонаАнализа.ФактическийТренд = ФактическийТренд;
	
	Возврат ЗонаАнализа;
	
КонецФункции

#КонецОбласти

#Область РаботаСПериодамиИДатами

Функция ДатаСоСмещениемДляДекады(Знач РасчетнаяДата, Знач Смещение)
	
	// анализируем
	ГодДатыНачала						= Год(РасчетнаяДата);
	МесяцДатыНачала						= Месяц(РасчетнаяДата);
	ДеньДатыНачала						= День(РасчетнаяДата);
	ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
	ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
	НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
	
	// изменяем
	НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
	
	// синтезируем
	ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
	ДекадаВГоду							= НомерДекадыНЭ % 36;
	МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
	ДекадаВМесяце						= ДекадаВГоду % 3;
	ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
	
	Возврат Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
	
КонецФункции

Процедура ЗаменитьИмяПериодичности(Выражение, НовоеИмяПериодичности)
	
	// Не переводимые выражения полей схемы компоновки данных на языке кода.
	Выражение = СтрЗаменить(Выражение, """ДЕНЬ""", """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, """НЕДЕЛЯ""", """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, """ДЕКАДА""", """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, """МЕСЯЦ""", """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, """КВАРТАЛ""", """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, """ПОЛУГОДИЕ""", """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, """ГОД""", """" + НовоеИмяПериодичности + """");
	
КонецПроцедуры

Функция ПериодАктуальностиРасчетаВМинутах(ВариантАнализа)
	
	ПериодВМинутах = 0;
	КоличествоПериодов = ВариантАнализа.ПериодАктуальностиРасчета;
	ВидПериодаАктуальностиРасчета = ВариантАнализа.ВидПериодаАктуальностиРасчета;
	
	ВидыПериодовАктуальностиРасчета = Перечисления.ВидыПериодовАктуальностиРасчета;
	
	Если ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.День Тогда
		ПериодВМинутах = КоличествоПериодов * 1440;
	ИначеЕсли ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.Час Тогда
		ПериодВМинутах = КоличествоПериодов * 60;
	ИначеЕсли ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.Минута Тогда
		ПериодВМинутах = КоличествоПериодов;
	КонецЕсли;
	
	Возврат ПериодВМинутах;
	
КонецФункции

Функция НачалоПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ДатаСоСмещением(НачалоГода(Дата), Периодичность, ?(Месяц(Дата)>6, 1, 0));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат ДатаСоСмещением(НачалоГода(Дата), Периодичность, ОбщегоНазначенияУТ.РазностьДат(НачалоГода(Дата), Дата, Периодичность));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
		
	КонецЕсли;
	
КонецФункции

Функция КонецПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат КонецГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		Возврат КонецМесяца(ДобавитьМесяц(НачалоГода(Дата), ?(Месяц(Дата) <= 6, 1, 2) * 6 - 1));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		Возврат КонецКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат КонецМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Возврат КонецДня(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Возврат КонецНедели(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		
		Возврат КонецДня(Дата);
		
	Иначе 
		Возврат Дата;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеВариантаСтандартногоПериода(ТекущийВариантСтандартногоПериода)
	
	// Для платформы ниже 8.3.15
	Если ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.Вчера Тогда
		ПредставлениеВарианта = НСтр("ru = 'Вчера'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ДоКонцаЭтогоГода Тогда
		ПредставлениеВарианта = НСтр("ru = 'До конца этого года'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала Тогда
		ПредставлениеВарианта = НСтр("ru = 'До конца этого квартала'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца Тогда
		ПредставлениеВарианта = НСтр("ru = 'До конца этого месяца'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия Тогда
		ПредставлениеВарианта = НСтр("ru = 'До конца этого полугодия'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ДоКонцаЭтойДекады Тогда
		ПредставлениеВарианта = НСтр("ru = 'До конца этой декады'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ДоКонцаЭтойНедели Тогда
		ПредставлениеВарианта = НСтр("ru = 'До конца этой недели'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.Завтра Тогда
		ПредставлениеВарианта = НСтр("ru = 'Завтра'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.Месяц Тогда
		ПредставлениеВарианта = НСтр("ru = 'Месяц'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.Последние7Дней Тогда
		ПредставлениеВарианта = НСтр("ru = 'Последние 7 дней'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		ПредставлениеВарианта = НСтр("ru = 'Произвольный период'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлаяДекада Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлая декада'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлаяДекадаДоТакогоЖеНомераДня Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлая декада до такого же номера дня'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлаяНеделя Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлая неделя'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлая неделя до такого же дня недели'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлоеПолугодие Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлое полугодие'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлое полугодие до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлыйГод Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлый год'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлый год до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлыйКвартал Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлый квартал'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлый квартал до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлыйМесяц Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлый месяц'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Прошлый месяц до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.Сегодня Тогда
		ПредставлениеВарианта = НСтр("ru = 'Сегодня'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующаяДекада Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующая декада'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующаяДекадаДоТакогоЖеНомераДня Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующая декада до такого же номера дня'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующаяНеделя Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующая неделя'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующаяНеделяДоТакогоЖеДняНедели Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующая неделя до такого же дня недели'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующееПолугодие Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующее полугодие'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующееПолугодиеДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующее полугодие до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.Следующие7Дней Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующие 7 дней'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующийГод Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующий год'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующийГодДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующий год до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующийКвартал Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующий квартал'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующийКварталДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующий квартал до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующийМесяц Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующий месяц'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты Тогда
		ПредставлениеВарианта = НСтр("ru = 'Следующий месяц до такой же даты'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		ПредставлениеВарианта = НСтр("ru = 'С начала этого года'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		ПредставлениеВарианта = НСтр("ru = 'С начала этого квартала'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		ПредставлениеВарианта = НСтр("ru = 'С начала этого месяца'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		ПредставлениеВарианта = НСтр("ru = 'С начала этого полугодия'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СНачалаЭтойДекады Тогда
		ПредставлениеВарианта = НСтр("ru = 'С начала этой декады'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		ПредставлениеВарианта = НСтр("ru = 'С начала этой недели'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ЭтаДекада Тогда
		ПредставлениеВарианта = НСтр("ru = 'Эта декада'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ЭтаНеделя Тогда
		ПредставлениеВарианта = НСтр("ru = 'Эта неделя'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ЭтоПолугодие Тогда
		ПредставлениеВарианта = НСтр("ru = 'Это полугодие'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ЭтотГод Тогда
		ПредставлениеВарианта = НСтр("ru = 'Этот год'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ЭтотКвартал Тогда
		ПредставлениеВарианта = НСтр("ru = 'Этот квартал'");
	ИначеЕсли ТекущийВариантСтандартногоПериода = ВариантСтандартногоПериода.ЭтотМесяц Тогда
		ПредставлениеВарианта = НСтр("ru = 'Этот месяц'");
	Иначе
		ПредставлениеВарианта = Строка(ПредставлениеВарианта);
	КонецЕсли;
	
	Возврат ПредставлениеВарианта;
КонецФункции

Функция ПредставлениеСтандартногоПериода(ЗначениеСтандартногоПериода, ВыводитьВариант = Истина)
	
	ПредставлениеДатыНачала = Формат(ЗначениеСтандартногоПериода.ДатаНачала, "ДЛФ=D");
	ПредставлениеДатыОкончания = Формат(ЗначениеСтандартногоПериода.ДатаОкончания, "ДЛФ=D");
	
	Если ВыводитьВариант Тогда
		Шаблон = НСтр("ru = '%3 (%1 - %2)'");
		ПредставлениеВарианта = ПредставлениеВариантаСтандартногоПериода(ЗначениеСтандартногоПериода.Вариант);
	Иначе
		Шаблон = НСтр("ru = '%1 - %2'");
		ПредставлениеВарианта = "";
	КонецЕсли;
	ПредставлениеСтандартногоПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон,
		ПредставлениеДатыНачала,
		ПредставлениеДатыОкончания,
		ПредставлениеВарианта);
	
	Возврат ПредставлениеСтандартногоПериода;
	
КонецФункции

Функция ПрименитьФорматДаты(Дата, Периодичность)
	
	ФорматированнаяДата = "01.01.01";
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ФорматнаяСтрока = СтрШаблон(НСтр("ru='ДФ=%1'"), "dd.MM.yy");
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматнаяСтрока = СтрШаблон(НСтр("ru='ДФ=%1'"), "dd.MM.yy");
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматнаяСтрока = СтрШаблон(НСтр("ru='ДФ=%1'"), "dd.MM.yy");
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматнаяСтрока = НСтр("ru='ДФ=''MMM yyyy'''");
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматнаяСтрока = НСтр("ru='ДФ=''%1""""КВ""""'''");
		ПараметрКварталаНаЯзыкеКода = "к";
		ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ФорматнаяСтрока, ПараметрКварталаНаЯзыкеКода);
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ФорматнаяСтрока = НСтр("ru='ДФ=''%1 """"КВ""""'''");
		ПараметрКварталаНаЯзыкеКода = "к";
		ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ФорматнаяСтрока, ПараметрКварталаНаЯзыкеКода);
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматнаяСтрока = НСтр("ru='ДФ=yyyy'");
		ФорматированнаяДата = Формат(Дата(Дата), ФорматнаяСтрока);
	КонецЕсли;

	Возврат ФорматированнаяДата;
	
КонецФункции

Процедура УстановитьПериодВыраженийПолейИтогов(СхемаКомпоновки, Периодичность)
	
	ПоляИтогов = СхемаКомпоновки.ПоляИтога;
	ИмяПериодичности = ПолучитьИмяЗначенияПеречисления(Периодичность);
	
	Для Каждого ПолеИтога Из ПоляИтогов Цикл 
		ЗаменитьИмяПериодичности(ПолеИтога.Выражение, ИмяПериодичности);
	КонецЦикла;
	
КонецПроцедуры

Функция МинимальнаяПериодичностьПолногоПериода(НачалоПериода, КонецПериода, МаксимальнаяПериодичность)
	МинимальнаяПериодичностьПолногоПериода = Неопределено;
	
	Периодичность = Перечисления.Периодичность;
	ИмяМаксПериодичности = ПолучитьИмяЗначенияПеречисления(МаксимальнаяПериодичность);
	
	УпорядоченныеЗначения = Новый Массив;
	УпорядоченныеЗначения.Добавить("Год");
	УпорядоченныеЗначения.Добавить("Полугодие");
	УпорядоченныеЗначения.Добавить("Квартал");
	УпорядоченныеЗначения.Добавить("Месяц");
	
	Проверять = Ложь;
	Для Каждого УпорядоченноеЗначение Из УпорядоченныеЗначения Цикл
		Если Не Проверять Тогда
			Проверять = УпорядоченноеЗначение = ИмяМаксПериодичности;
		КонецЕсли;
		Если Проверять 
			И НачалоПериода(НачалоПериода, Периодичность[УпорядоченноеЗначение]) = НачалоПериода
			И КонецПериода(НачалоПериода, Периодичность[УпорядоченноеЗначение]) = КонецПериода Тогда
			МинимальнаяПериодичностьПолногоПериода = Периодичность[УпорядоченноеЗначение];
		КонецЕсли;
	КонецЦикла;
	
	Возврат МинимальнаяПериодичностьПолногоПериода;
КонецФункции

#КонецОбласти

#Область АнализВзаимосвязанныхЦелевыхПоказателей

Функция ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа()
	
	Текст = "ВЫБРАТЬ
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения
		|ПОМЕСТИТЬ ДоступныеВариантыАнализа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
		|	ДоступныеВариантыАнализа.Цель,
		|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
		|	ВЫБОР
		|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
		|	ДоступныеВариантыАнализа.ВариантОтображения,
		|	ЛОЖЬ КАК ВыводитьПодробности,
		|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
		|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
		|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели) КАК Группа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЦелей КАК СтруктураЦелей
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
		|			ПО СтруктураЦелей.Ссылка = ДоступныеВариантыАнализа.Цель
		|		ПО ВариантыАнализаЦелевыхПоказателей.Владелец.Родитель = СтруктураЦелей.Ссылка
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
		|	И СтруктураЦелей.ЦельИзмеримая
		|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
		|	ДоступныеВариантыАнализа.Цель,
		|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
		|	ВЫБОР
		|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
		|	ДоступныеВариантыАнализа.ВариантОтображения,
		|	ЛОЖЬ КАК ВыводитьПодробности,
		|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
		|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
		|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели) КАК Группа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЦелей КАК СтруктураЦелей
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
		|			ПО СтруктураЦелей.Ссылка = ДоступныеВариантыАнализа.Цель
		|		ПО ВариантыАнализаЦелевыхПоказателей.Владелец = СтруктураЦелей.Родитель
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
		|	И СтруктураЦелей.ЦельИзмеримая
		|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
		|	ДоступныеВариантыАнализа.Цель,
		|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
		|	ВЫБОР
		|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
		|	ДоступныеВариантыАнализа.ВариантОтображения,
		|	ЛОЖЬ КАК ВыводитьПодробности,
		|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
		|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
		|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка) КАК Группа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
		|		ПО ВариантыАнализаЦелевыхПоказателей.Ссылка = ДоступныеВариантыАнализа.ВариантАнализа
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
		|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )";
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДиаграмм

// Заполняет секцию "Диаграмма" переданного табличного документа.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - ТабличныйДокумент для заполнения.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//	ИсточникДанных - См. ИнициализироватьИсточникДанных
//
Процедура ЗаполнитьДанныеДиаграммы(ТабличныйДокумент, ВариантАнализа, ИсточникДанных)
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	МакетПечатнойФормыВариантаАнализа = МониторингЦелевыхПоказателейПовтИсп.МакетСтраницыПоказателя();
	
	Если Не ИсточникДанных.РасчетыАктуальны ИЛИ ИсточникДанных.ОшибкаРасчета ИЛИ ИсточникДанных.Пустой Тогда
		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатЗаголовокОшибкаРасчета");
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОбластьМакета.Параметры.ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатЗаголовок");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета, 2, "Результат");
	
	Если Не ИсточникДанных.ОшибкаРасчета И Не ИсточникДанных.Пустой И ИсточникДанных.РасчетыАктуальны Тогда
		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатДиаграмма");
		
		ВыведеннаяОбласть = ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Результат");
		
		ОбластьМакетаСДиаграммой = ОбластьМакета.Области.РасположениеДиаграммы;
		
		РисунокДиаграмма = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
		РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
		РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
		
		Индекс = ТабличныйДокумент.Рисунки.Индекс(РисунокДиаграмма);
		РисунокДиаграмма.Имя = "Диаграмма";
		Диаграмма = РисунокДиаграмма.Объект;
		
		УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникДанных, ВариантАнализа);
		
		УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных.СвойстваОбщейСтатистики);
		
		Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
			Или ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
			УстановитьИменаТочекДиаграммы(Диаграмма.Точки,
					ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа,
					ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя);
		КонецЕсли;
		
		Если Не ИсточникДанных.Данные.Колонки.Найти("Признак") = Неопределено 
			И ВариантАнализа.РассчитыватьПрогноз 
			И ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
			// Выделим все периоды прогноза
			ОтборПоПризнаку = Новый Структура("Признак", Истина);
			НайденныеСтрокиСПериодами = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПризнаку);
			ПериодыСПризнаком = ИсточникДанных.Данные.Скопировать(НайденныеСтрокиСПериодами, "Период");
			УстановитьПользовательскиеНастройкиТочекДиаграммы(Диаграмма.Точки, ВариантАнализа, ПериодыСПризнаком);
			
			// Удалить серию "Признак"
			КолонкиИсточника = ИсточникДанных.Данные.Колонки;
			КолонкиИсточника.Удалить(КолонкиИсточника.Индекс(КолонкиИсточника.Найти("Признак")));
		КонецЕсли;
		
		УстановитьНастройкиПоУмолчаниюСерийДиаграммы(Диаграмма.Серии);
		
		Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
			УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных);
		Иначе
			УстановитьПользовательскиеНастройкиСерийДиаграммы(Диаграмма.Серии, ИсточникДанных);
		КонецЕсли;
		
		Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
		РисунокДиаграмма.Защита = Ложь;
		
		Диаграмма.ПрозрачныйФон = Истина;
		
		ВерхДиаграммы = ВыведеннаяОбласть.Верх;
		ЛевоДиаграммы = ВыведеннаяОбласть.Лево + ОбластьМакетаСДиаграммой.Лево;
		НизДиаграммы = ВерхДиаграммы + ОбластьМакетаСДиаграммой.Низ - ОбластьМакетаСДиаграммой.Верх + 10;
		ПравоДиаграммы = ЛевоДиаграммы + ОбластьМакетаСДиаграммой.Право - ОбластьМакетаСДиаграммой.Лево;
		
		ОбластьМакетаСДиаграммой = ТабличныйДокумент.Область(ВерхДиаграммы, ЛевоДиаграммы, НизДиаграммы, ПравоДиаграммы);
		ТабличныйДокумент.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);
	КонецЕсли;
КонецПроцедуры

// Устанавливает имена точек диаграммы соответствии с данными диаграммы из внешнего источника.
//
// Параметры:
//	ТочкиДиаграммы - ТочкиДиаграммы - содержит точки объекта Диаграмма.
//	ЗначениеАнализаИмяПоля - Произвольный -
//	Периодичность - ПеречислениеСсылка.Периодичность - 
//
Процедура УстановитьИменаТочекДиаграммы(ТочкиДиаграммы, ЗначениеАнализаИмяПоля, Периодичность)
	
	Для каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл
		Если ТочкаДиаграммы.Значение = ЗначениеАнализаИмяПоля Тогда
			Прервать;
		КонецЕсли;
		
		ТочкаДиаграммы.Текст = ПрименитьФорматДаты(ТочкаДиаграммы.Текст, Периодичность);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает источник данных для диаграммы.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма
//	ИсточникДанных - см. ИнициализироватьИсточникДанных
//	ВариантАнализа - Структура- реквизиты варианта анализа.
//	Минидиаграмма - Булево - Флаг минидиаграммы.
//
Процедура УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникДанных, ВариантАнализа, Минидиаграмма = Ложь)
	ДанныеИсточникаДанных = ИсточникДанных.Данные;
	КолонкиИсточникаДанных = ДанныеИсточникаДанных.Колонки;
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	СвойстваОбщейСтатистики = ИсточникДанных.СвойстваОбщейСтатистики;
	
	ТипыАнализа = Перечисления.ТипыАнализаПоказателей;
	ТипАнализа = ВариантАнализа.ТипАнализа;
	СерииВКолонках = Не (ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния)
			И Не (ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение);
	
	ЕстьГрадиент = ((ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение)
			И ВариантАнализа.ТолькоЦветОсновнойСерии
			И ВариантАнализа.ГрадиентДляПокомпонентногоСравнения);
	ПоВесуСерии = Ложь;
	
	Если ЕстьГрадиент Тогда
		МаксимумИсточникаДанных = СвойстваОбщейСтатистики.ПоОбъектамАнализа.Максимум;
	КонецЕсли;
	
	Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнениеДинамика
		Или (ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение 
		И ИсточникДанных.ПараметрыРасчета.РежимПокомпонентногоСравнения = 1) Тогда
		Диаграмма.СерииВСтроках = Ложь;
		
		Для Каждого СтрокаИсточникаДанных Из ДанныеИсточникаДанных Цикл
			ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(СтрокаИсточникаДанных["Период"]);
			ТекущаяТочкаДиаграммы.Текст = СтрокаИсточникаДанных["Период"];
			Для Каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
				ИмяКолонкиИсточникаДанных = КолонкаИсточникаДанных.Имя;
				ЗаголовокКолонкиИсточникаДанных = КолонкаИсточникаДанных.Заголовок;
				
				Если ИмяКолонкиИсточникаДанных = "Период" Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(ИмяКолонкиИсточникаДанных);
				ТекущаяСерияДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
				ТекущаяСерияДиаграммы.Текст = ЗаголовокКолонкиИсточникаДанных;
				
				ТекущееЗначение = СтрокаИсточникаДанных[ИмяКолонкиИсточникаДанных];
				
				Если Не КолонкиИсточникаДанных.Найти("Период") = Неопределено Тогда
					ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяТочкаДиаграммы.Текст,
						ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя);
				Иначе 
					ФорматированнаяПодписьТочкиСерии = ТекущаяТочкаДиаграммы.Текст;
				КонецЕсли;
				
				ТекстПодсказки = ТекущаяСерияДиаграммы.Текст + " / " + Строка(ТекущееЗначение) + " / " + ФорматированнаяПодписьТочкиСерии;
				
				Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
				ТекущаяСерияДиаграммы, 
				ТекущееЗначение, ,
				ТекстПодсказки);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаИсточникаДанных Из ДанныеИсточникаДанных Цикл
			ЗначениеСтроки = СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа];
			
			Если ЕстьГрадиент Тогда
				Если Не МаксимумИсточникаДанных = 0 Тогда
					ВесСерии = Окр(100 * ЗначениеСтроки / МаксимумИсточникаДанных);
				Иначе
					ВесСерии = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если СерииВКолонках Тогда
				Если ТипАнализа = ТипыАнализа.ДинамикаИзменения Тогда
					ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(СтрокаИсточникаДанных["Период"]);
					ТекущаяТочкаДиаграммы.Текст = СтрокаИсточникаДанных["Период"];
				ИначеЕсли ТипАнализа = ТипыАнализа.СравнениеСПрошлымПериодом Тогда
					ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(СтрокаИсточникаДанных["ПериодСравнения"]);
					ТекущаяТочкаДиаграммы.Текст = СтрокаИсточникаДанных["ПериодСравнения"];
				Иначе
					ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(
						СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа]);
					ТекущаяТочкаДиаграммы.Текст = СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа];
				КонецЕсли;
			Иначе
				Если ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
					ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(
						СтрокаИсточникаДанных["Период"]);
				Иначе
					ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(
						СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа]);
				КонецЕсли;
				
				Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение И ПоВесуСерии Тогда
					Если ЕстьГрадиент Тогда
						ШаблонТекста = НСтр("ru='%1 = %2#%3#'");
					Иначе
						ШаблонТекста = НСтр("ru='%1 = %2'");
					КонецЕсли;
					ТекстСерии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекста,
						Строка(СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа]),
						ЗначениеСтроки,
						ВесСерии);
				ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
					
					Шаблон1 = НСтр("ru='ДФ=%Парам1%; ДЛФ=D'");
					Шаблон1 = СтрЗаменить(Шаблон1, "%Парам1%", "dd.MM.yy");
					ПредставлениеДаты = Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, Шаблон1);
					
					ШаблонТекста = НСтр("ru='%1 на %2 = %3'");
					ТекстСерии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекста,
						ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу,
						ПредставлениеДаты,
						ЗначениеСтроки);
				Иначе
					ТекстСерии = СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа];
				КонецЕсли;
				
				ТекущаяСерияДиаграммы.Текст = ТекстСерии;
			КонецЕсли;
			
			Для Каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
				ИмяКолонкиИсточникаДанных = КолонкаИсточникаДанных.Имя;
				ЗаголовокКолонкиИсточникаДанных = КолонкаИсточникаДанных.Заголовок;
				
				Если ИмяКолонкиИсточникаДанных = "Период" 
					ИЛИ ?(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа = Неопределено, Ложь, СтрНайти(ИмяКолонкиИсточникаДанных, ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа))
					ИЛИ ИмяКолонкиИсточникаДанных = "ПериодСравнения"
					ИЛИ ИмяКолонкиИсточникаДанных = "Признак" Тогда
					Продолжить;
				КонецЕсли;
				
				Если СерииВКолонках Тогда
					ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(ИмяКолонкиИсточникаДанных);
					ТекущаяСерияДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
					ТекущаяСерияДиаграммы.Текст = ЗаголовокКолонкиИсточникаДанных;
				Иначе
					ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(ИмяКолонкиИсточникаДанных);
					ТекущаяТочкаДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
					ТекущаяТочкаДиаграммы.Текст = ЗаголовокКолонкиИсточникаДанных;
				КонецЕсли;
				
				ТекущееЗначение = СтрокаИсточникаДанных[ИмяКолонкиИсточникаДанных];
				
				Если СерииВКолонках Тогда
					Если Не КолонкиИсточникаДанных.Найти("Период") = Неопределено Тогда
						ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяТочкаДиаграммы.Текст,
							ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя);
					Иначе 
						ФорматированнаяПодписьТочкиСерии = ТекущаяТочкаДиаграммы.Текст;
					КонецЕсли;
				Иначе
					Если Не КолонкиИсточникаДанных.Найти("Период") = Неопределено И Не ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
						ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяСерияДиаграммы.Текст, ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя);
					Иначе 
						ФорматированнаяПодписьТочкиСерии = ТекущаяСерияДиаграммы.Текст;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
					Если ЕстьГрадиент И ПоВесуСерии Тогда
						ТекстСерии = ТекущаяСерияДиаграммы.Текст;
						
						НачалоМаркераВесаСерии = СтрНайти(ТекстСерии, "#");
						ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
						МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
						
						ТекстПодсказки = СтрЗаменить(ТекстСерии, МаркерВесаСерии, "");
					Иначе 
						ТекстПодсказки = ТекущаяСерияДиаграммы.Текст;
					КонецЕсли;
					
					Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы,
						ТекущаяСерияДиаграммы,
						ТекущееЗначение,,
						ТекстПодсказки);
					
				ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
					Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы,
						ТекущаяСерияДиаграммы,
						ТекущееЗначение,,
						ТекущаяСерияДиаграммы.Текст);
					
				Иначе
					Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы,
						ТекущаяСерияДиаграммы,
						ТекущееЗначение,,
						Строка(ТекущееЗначение) + " / " + ФорматированнаяПодписьТочкиСерии);
					
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Устанавливает настройки по умолчанию для измерительной диаграммы.
// Такие параметры, как, полосы, размеры и т.д.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//	ИсточникДанных - См. ИнициализироватьИсточникДанных
//
Процедура УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных)
	
	// Инициализируем переменные
	ПолосыДиаграммы = Диаграмма.ПолосыИзмерительнойДиаграммы;
	
	ЦветаПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
	ВключатьНоль = ВариантАнализа.ВключатьНоль;
	
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанных.Цель, "ЦелевойТренд");
	
	СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
	
	// Контрольные значения построения диаграммы
	ЦелевоеЗначение = ПолучитьЗначениеСокращенногоПредставленияЧисла(
		СвойстваДанныхПоПериодам.ЦелевоеЗначение,
		ТочностьРасчетаДробнойЧасти);
	ЦелевойДиапазонМинимум = ПолучитьЗначениеСокращенногоПредставленияЧисла(
		СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум,
		ТочностьРасчетаДробнойЧасти);
	ЦелевойДиапазонМаксимум = ПолучитьЗначениеСокращенногоПредставленияЧисла(
		СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум,
		ТочностьРасчетаДробнойЧасти);
	
	Если ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Максимизация Тогда
		МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(
			СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение,
			ТочностьРасчетаДробнойЧасти);
		МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(
			СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение,
			ТочностьРасчетаДробнойЧасти);
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Минимизация Тогда
		МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(
			СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение,
			ТочностьРасчетаДробнойЧасти);
		МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(
			СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение,
			ТочностьРасчетаДробнойЧасти);
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Диапазон Тогда
		МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(
			СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение,
			ТочностьРасчетаДробнойЧасти);
		МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(
			СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение,
			ТочностьРасчетаДробнойЧасти);
	КонецЕсли;
	
	ТекущееЗначение = ПолучитьЗначениеСокращенногоПредставленияЧисла(
		ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение,
		ТочностьРасчетаДробнойЧасти);
	
	МинимальноеЗначение = Мин(ТекущееЗначение, МинимальноеЗначениеЦели);
	МаксимальноеЗначение = Макс(ТекущееЗначение, МаксимальноеЗначениеЦели);
	БазовоеЗначение = ?(ВключатьНоль, 0, МинимальноеЗначение);
	
	// Настройки диаграммы
	Диаграмма.НачальныйУголИзмерительнойДиаграммы	= 0;
	Диаграмма.КонечныйУголИзмерительнойДиаграммы	= 180;
	Диаграмма.ТолщинаШкалыИзмерительнойДиаграммы	= 10;
	Диаграмма.ТолщинаВтулкиИзмерительнойДиаграммы	= 10;
	
	Диаграмма.БазовоеЗначение			= БазовоеЗначение;
	Диаграмма.АвтоМинимальноеЗначение	= ВключатьНоль;
	Диаграмма.МинимальноеЗначение		= МинимальноеЗначение;
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= МаксимальноеЗначение;

	// Добавим полосы диаграммы
	Если ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Максимизация Тогда
		Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда
			ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
			ПолосаМеньшеМинимума.Начало = БазовоеЗначение;
			ПолосаМеньшеМинимума.Конец = МинимальноеЗначениеЦели;
			ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
			Подсказка = НСтр("ru= 'Диапазон недопустимых значений: Показатель < Мин. = %1.'");
			ПолосаМеньшеМинимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МинимальноеЗначениеЦели);
			
			ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначениеЦели;
			ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевоеЗначение;
			ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			Подсказка = НСтр("ru= 'Диапазон допустимых значений: Мин. = %1 < Показатель < Цель = %2'"); 
			ПолосаБольшеМинимумаМеньшеЦели.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МинимальноеЗначениеЦели,
				ЦелевоеЗначение);
			
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевоеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначениеЦели;
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
			Подсказка = НСтр("ru= 'Диапазон достижения цели: Цель = %1 < Показатель < Макс. = %2'");
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				ЦелевоеЗначение,
				МаксимальноеЗначениеЦели);
			
			Если МаксимальноеЗначение > МаксимальноеЗначениеЦели Тогда
				ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
				ПолосаБольшеМаксимума.Начало = МаксимальноеЗначениеЦели;
				ПолосаБольшеМаксимума.Конец = МаксимальноеЗначение;
				ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["ПозитивноеОтклонение"];
				Подсказка = НСтр("ru= 'Диапазон значений: Показатель > Макс. = %1'");
				ПолосаБольшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Подсказка,
					МаксимальноеЗначениеЦели);
			КонецЕсли;
		
			Если ТекущееЗначение <= МинимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
				
			ИначеЕсли ТекущееЗначение > МинимальноеЗначениеЦели И ТекущееЗначение < ЦелевоеЗначение Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				
			ИначеЕсли ТекущееЗначение >= ЦелевоеЗначение И ТекущееЗначение < МаксимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
				
			ИначеЕсли ТекущееЗначение >= МаксимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ПозитивноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ПозитивноеОтклонение"];
				
			КонецЕсли;
		Иначе
			// Одна полоса фактических значений
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = Диаграмма.МинимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = Диаграмма.МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = НСтр("ru='Цели не установлены. Диапазон без учета целевых значений.'");
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
			
		КонецЕсли;
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Минимизация Тогда
		Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда
			ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
			ПолосаМеньшеМинимума.Начало = БазовоеЗначение;
			ПолосаМеньшеМинимума.Конец = МинимальноеЗначениеЦели;
			ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["ПозитивноеОтклонение"];
			Подсказка = НСтр("ru= 'Диапазон значений: Показатель < Мин. = %1.'");
			ПолосаМеньшеМинимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МинимальноеЗначениеЦели);
			
			ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначениеЦели;
			ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевоеЗначение;
			ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
			Подсказка = НСтр("ru= 'Диапазон достижения цели: Мин. = %1 < Показатель < Цель = %2'"); 
			ПолосаБольшеМинимумаМеньшеЦели.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МинимальноеЗначениеЦели,
				ЦелевоеЗначение);
			
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевоеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначениеЦели;
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			Подсказка = НСтр("ru= 'Диапазон допустимых значений: Цель = %1 < Показатель < Макс. = %2'");
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				ЦелевоеЗначение,
				МаксимальноеЗначениеЦели);
			
			Если МаксимальноеЗначение > МаксимальноеЗначениеЦели Тогда
				ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
				ПолосаБольшеМаксимума.Начало = МаксимальноеЗначениеЦели;
				ПолосаБольшеМаксимума.Конец = МаксимальноеЗначение;
				ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
				Подсказка = НСтр("ru= 'Диапазон недопустимых значений: Показатель > Макс. = %1'");
				ПолосаБольшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Подсказка,
					МаксимальноеЗначениеЦели);
			КонецЕсли;
			
			Если ТекущееЗначение < МинимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ПозитивноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ПозитивноеОтклонение"];
				
			ИначеЕсли ТекущееЗначение > МинимальноеЗначениеЦели И ТекущееЗначение <= ЦелевоеЗначение Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
				
			ИначеЕсли ТекущееЗначение > ЦелевоеЗначение И ТекущееЗначение < МаксимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				
			ИначеЕсли ТекущееЗначение >= МаксимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
				
			КонецЕсли;
		Иначе
			// Одна полоса фактических значений
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = Диаграмма.МинимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = Диаграмма.МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = НСтр("ru='Цели не установлены. Диапазон без учета целевых значений.'");
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
			
		КонецЕсли;
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Диапазон Тогда
		Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда
			ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
			ПолосаМеньшеМинимума.Начало = БазовоеЗначение;
			ПолосаМеньшеМинимума.Конец = МинимальноеЗначениеЦели;
			ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
			Подсказка = НСтр("ru= 'Диапазон недопустимых значений: Показатель < Мин. = %1.'");
			ПолосаМеньшеМинимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МинимальноеЗначениеЦели);
			
			ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначениеЦели;
			ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевойДиапазонМинимум;
			ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			Подсказка = НСтр("ru= 'Диапазон допустимых значений: Мин. = %1 < Показатель < Цель (мин.) = %2'"); 
			ПолосаБольшеМинимумаМеньшеЦели.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МинимальноеЗначениеЦели,
				ЦелевойДиапазонМинимум);
			
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевойДиапазонМинимум;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = ЦелевойДиапазонМаксимум;
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
			Подсказка = НСтр("ru= 'Диапазон достижения цели: Цель (мин.) = %1 < Показатель < Цель (макс.) = %2'");
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				ЦелевойДиапазонМинимум,
				ЦелевойДиапазонМаксимум);
			
			ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМаксимума.Начало = ЦелевойДиапазонМаксимум;
			ПолосаБольшеМаксимума.Конец = МаксимальноеЗначениеЦели;
			ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			Подсказка = НСтр("ru= 'Диапазон допустимых значений: Цель (макс.) = %1 < Показатель < Макс. = %2'"); 
			ПолосаБольшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				ЦелевойДиапазонМаксимум,
				МаксимальноеЗначениеЦели);
			
			ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМаксимума.Начало = МаксимальноеЗначениеЦели;
			ПолосаБольшеМаксимума.Конец = МаксимальноеЗначение;
			ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
			Подсказка = НСтр("ru= 'Диапазон значений: Показатель > Макс. = %1'");
			ПолосаБольшеМаксимума.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Подсказка,
				МаксимальноеЗначениеЦели);
				
			Если ТекущееЗначение < МинимальноеЗначениеЦели
				Или ТекущееЗначение > МаксимальноеЗначениеЦели Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
				
			ИначеЕсли (ТекущееЗначение >= МинимальноеЗначениеЦели И ТекущееЗначение < ЦелевойДиапазонМинимум)
				Или (ТекущееЗначение > ЦелевойДиапазонМаксимум И ТекущееЗначение <= МаксимальноеЗначениеЦели) Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				
			ИначеЕсли ТекущееЗначение >= ЦелевойДиапазонМинимум И ТекущееЗначение <= ЦелевойДиапазонМаксимум Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
				
			КонецЕсли;
		Иначе
			// Одна полоса фактических значений
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = МинимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = НСтр("ru='Цели не установлены. Диапазон без учета целевых значений.'");
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Устанавливает настройки по умолчанию оформления объекта диаграммы.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//
Процедура УстановитьНастройкиПоУмолчаниюОбъектаДиаграммы(Диаграмма, ВариантАнализа, СвойстваОбщейСтатистики)
	
	Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	
	ИмяТипаДиаграммы = ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ТипДиаграммы);
	Диаграмма.ТипДиаграммы = ТипДиаграммы[ИмяТипаДиаграммы];
	
	Если ВариантАнализа.РежимСглаживанияДиаграмм Тогда
		Диаграмма.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	Иначе
		Диаграмма.РежимСглаживания = РежимСглаживанияДиаграммы.Нет;
	КонецЕсли;
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		И ВариантАнализа.РежимПокомпонентногоСравнения = 0 Тогда
		Диаграмма.СерииВСтроках = Истина;
	КонецЕсли;
	
	Если Перечисления.ТипыДиаграммПоказателей.Гистограммы().Найти(ВариантАнализа.ТипДиаграммы) <> Неопределено Тогда
		Диаграмма.РежимПробелов = РежимПробеловДиаграммы.ПоловинаШирины;
		
		Если ВариантАнализа.ВыводитьПодписиКДиаграммам 
			И НЕ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика
			И НЕ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.СерияЗначение;
			
			Если СтрНайти(ИмяТипаДиаграммы, "Горизонтальная") > 0 Тогда
				Диаграмма.ПоложениеПодписей = ПоложениеПодписейКДиаграмме.КрайАвто;
			КонецЕсли;
		Иначе
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
		КонецЕсли;
	ИначеЕсли СтрНайти(ИмяТипаДиаграммы, "Круговая") > 0 Тогда
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.СерияПроцент;
	КонецЕсли;
	
	Диаграмма.Окантовка = ВариантАнализа.ОкантовкаДиаграмм;
	
	ЗаполнитьЗначенияСвойств(Диаграмма, ПараметрыБазовогоЗначенияДляДиаграмм(ВариантАнализа, СвойстваОбщейСтатистики));
	
	//@skip-warning
	Диаграмма.ФорматЗначенийВПодписях = "ЧДЦ=" + ВариантАнализа.ТочностьРасчетаДробнойЧасти; //@skip-warning
	Диаграмма.РазделительПодписей = " / ";
КонецПроцедуры

// Устанавливает настройки по умолчанию области заголовка диаграммы.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма.
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа.
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиЗаголовкаДиаграммы(Диаграмма, ВариантАнализа)
	ОбластьЗаголовка = Диаграмма.ОбластьЗаголовка;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	
	ОбластьЗаголовка.Верх = 0;
	ОбластьЗаголовка.Низ = 0;
	ОбластьЗаголовка.Лево = 0;
	ОбластьЗаголовка.Право = 0;
КонецПроцедуры

// Устанавливает настройки по умолчанию области построения диаграммы.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиПостроенияДиаграммы(Диаграмма, ВариантАнализа)
	ОбластьПостроения = Диаграмма.ОбластьПостроения;
	ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	ИмяТипаДиаграммы = ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ТипДиаграммы);
	ПоложениеПодписей = ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы;
	
	Если Диаграмма.БазовоеЗначение <> 0 Тогда
		ОбластьПостроения.ЦветШкалы = WebЦвета.СинеСерый;
	Иначе
		ОбластьПостроения.ЦветШкалы = WebЦвета.Серебряный;
	КонецЕсли;
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		
		ОбластьПостроения.ШкалаТочек.ОриентацияПодписей = ОриентацияПодписейДиаграммы.Горизонтально;;
		
	ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
		
		ОбластьПостроения.ШкалаТочек.ОриентацияПодписей = ОриентацияПодписейДиаграммы.Авто;
		ПоложениеПодписей = ПоложениеПодписейШкалыДиаграммы.Нет;
		
		Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
			ОбластьПостроения.Шрифт = Новый Шрифт(,,Истина);
			ОбластьПостроения.ЦветШкалы = WebЦвета.Белый;
		КонецЕсли;
	КонецЕсли;
	Если СтрНайти(ИмяТипаДиаграммы, "Горизонтальная") > 0 Тогда
		ПоложениеПодписей = ПоложениеПодписейШкалыДиаграммы.Нет;
	КонецЕсли;
	
	ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы = ПоложениеПодписейШкалыДиаграммы.Авто;
	ОбластьПостроения.ШкалаЗначений.ОтображениеЛинийСетки = ОтображениеЛинийСеткиДиаграммы.НеОтображать;
	ОбластьПостроения.ШкалаТочек.ПоложениеПодписейШкалы = ПоложениеПодписей;
	ОбластьПостроения.ФорматШкалыЗначений = "ЧДЦ=" + ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	Если ОтображатьЛегенду Тогда
		ОбластьПостроения.Верх = 0;
		ОбластьПостроения.Низ = 0.76;
		ОбластьПостроения.Лево = 0;
		ОбластьПостроения.Право = 1;
	Иначе 
		ОбластьПостроения.Верх = 0;
		ОбластьПостроения.Низ = 0.95;
		ОбластьПостроения.Лево = 0;
		ОбластьПостроения.Право = 1;
	КонецЕсли;
КонецПроцедуры

// Устанавливает настройки по умолчанию области легенды диаграммы.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект диаграмма.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиЛегендыДиаграммы(Диаграмма, ВариантАнализа)
	ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	
	Диаграмма.ОтображатьЛегенду = ОтображатьЛегенду;
	
	ОбластьЛегенды = Диаграмма.ОбластьЛегенды;
	
	Если ОтображатьЛегенду Тогда
		ОбластьЛегенды.Верх = 0.82;
		ОбластьЛегенды.Низ = 1;
		ОбластьЛегенды.Лево = 0;
		ОбластьЛегенды.Право = 1;
	Иначе
		ОбластьЛегенды.Верх = 0;
		ОбластьЛегенды.Низ = 0;
		ОбластьЛегенды.Лево = 0;
		ОбластьЛегенды.Право = 0;
	КонецЕсли;
КонецПроцедуры

// Устанавливает настройки по умолчанию для всех областей диаграммы.
// Осуществляет вызов соответствующих процедур.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа
//	СвойстваОбщейСтатистики - Структура - структура, содержащая статистику по источнику данных (см. ИнициализироватьИсточникДанных.СвойстваОбщейСтатистики):
// 	* ПоПериодам - Структура -:
// 	** Количество - Число - 
// 	** Минимум - Число - 
// 	** Максимум - Число -
// 	** Среднее - Число -
// 	** Размах - Число - 
// 	** СтандартноеОтклонение - Число - 
// 	** Медиана - Число - 
// 	* ПоОбъектамАнализа - Структура -:
// 	** Количество - Число - 
// 	** Минимум - Число - 
// 	** Максимум - Число -
// 	** Среднее - Число -
// 	** Размах - Число - 
// 	** СтандартноеОтклонение - Число - 
// 	** Медиана - Число -
//
Процедура УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа, СвойстваОбщейСтатистики)
	
	УстановитьНастройкиПоУмолчаниюОбъектаДиаграммы(Диаграмма, ВариантАнализа, СвойстваОбщейСтатистики);
	
	УстановитьНастройкиПоУмолчаниюОбластиЗаголовкаДиаграммы(Диаграмма, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюОбластиПостроенияДиаграммы(Диаграмма, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюОбластиЛегендыДиаграммы(Диаграмма, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюТочекДиаграммы(Диаграмма, ВариантАнализа);
	
КонецПроцедуры

// Устанавливает настройки умолчания оформления серий диаграммы.
//
// Параметры:
//	СерииДиаграммы - СерииДиаграммы - содержит серии объекта Диаграмма.
//
Процедура УстановитьНастройкиПоУмолчаниюСерийДиаграммы(СерииДиаграммы)
	Для каждого СерияДиаграммы Из СерииДиаграммы Цикл
		ИдентификаторСерии = СерияДиаграммы.Значение;
		
		Если СтрНайти(ИдентификаторСерии, "ЦелевоеЗначение")
			ИЛИ СтрНайти(ИдентификаторСерии, "ЦелевойДиапазон") Тогда
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
			СерияДиаграммы.Индикатор = Истина;
		ИначеЕсли СтрНайти(ИдентификаторСерии, "Приведенное") Тогда
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
			СерияДиаграммы.Индикатор = Истина;
		ИначеЕсли СтрНайти(ИдентификаторСерии, "Тренд")
			ИЛИ СтрНайти(ИдентификаторСерии, "Прогноз") Тогда
			СерияДиаграммы.Индикатор = Истина;
		Иначе
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

// Устанавливает настройки по умолчанию точек диаграммы.
//
// Параметры:
//	Диаграмма - Диаграмма - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//
Процедура УстановитьНастройкиПоУмолчаниюТочекДиаграммы(Диаграмма, ВариантАнализа)
	
	ТочкиДиаграммы = Диаграмма.Точки;
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		Для Каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл 
			Если СтрНайти(ТочкаДиаграммы.Значение, "Прогноз") Тогда
				ТочкаДиаграммы.Цвет = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета["Прогноз"];
				ТочкаДиаграммы.ПриоритетЦвета = Истина;
			ИначеЕсли СтрНайти(ТочкаДиаграммы.Значение, "Прошлый") Тогда
				ТочкаДиаграммы.Цвет = WebЦвета.ТемноСерый;
				ТочкаДиаграммы.ПриоритетЦвета = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры оформления серий диаграммы в соответствии с настройками показателя.
//
// Параметры:
//	СерииДиаграммы - СерииДиаграммы - содержит серии объекта Диаграмма.
//	ИсточникДанных - См. ИнициализироватьИсточникДанных
//
Процедура УстановитьПользовательскиеНастройкиСерийДиаграммы(СерииДиаграммы, ИсточникДанных)
	ПараметрыРасчета = ИсточникДанных.ПараметрыРасчета;
	
	ТипАнализа = ПараметрыРасчета.ТипАнализа;
	ТипыАнализа = ПараметрыРасчета.ТипыАнализа;
	ТипДиаграммыВарианта = ИсточникДанных.ПараметрыРасчета.ТипДиаграммы;
	ТипыДиаграмм = Перечисления.ТипыДиаграммПоказателей;
	ВариантАнализа = ИсточникДанных.ВариантАнализа; // Структура -
	Цвета = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
	ЗначениеАнализаИмяПоля = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
	ОбъектАнализаМаксимум = ИсточникДанных.СвойстваДанныхПоОбъектамАнализа.ОбъектАнализаМаксимум;
	
	Если Не (ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение 
		Или ТипАнализа = ТипыАнализа.ПокомпонентноеСравнениеДинамика) Тогда
		
		Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
			ИдентификаторСерии = СерияДиаграммы.Значение;
			
			Если СтрНайти(ИдентификаторСерии, "Признак") Тогда
				Продолжить;
			КонецЕсли;
			
			// Цвета и маркеры серий
			Если СтрНайти(ИдентификаторСерии, "ПриведенноеГраничноеПозитивноеОтклонение")
				ИЛИ СтрНайти(ИдентификаторСерии, "ПриведенноеГраничноеНегативноеОтклонение") Тогда
				
				СерияДиаграммы.Цвет = ВыбратьЦвет(Цвета, ИдентификаторСерии);
				
			ИначеЕсли СтрНайти(ИдентификаторСерии, "Прогноз")
				ИЛИ СтрНайти(ИдентификаторСерии, "Тренд") Тогда
				
				Если ВариантАнализа.ВыводитьМаркерТочекПрогноза Тогда
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Ромб;
					СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
				Иначе
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
					СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 2);
				КонецЕсли;
				СерияДиаграммы.Цвет = Цвета[ИдентификаторСерии];
				
			ИначеЕсли СтрНайти(ИдентификаторСерии, "ЦелевойДиапазон")
				ИЛИ СтрНайти(ИдентификаторСерии, "ЦелевоеЗначение") Тогда
				СерияДиаграммы.Цвет = Цвета["ЦелевоеЗначение"];
				
			ИначеЕсли СтрНайти(ИдентификаторСерии, ЗначениеАнализаИмяПоля) Тогда 
				Если ВариантАнализа.ВыводитьМаркерыТочек Тогда
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Круг;
				Иначе
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
				КонецЕсли;
				СерияДиаграммы.Цвет = Цвета["Значение"];
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение 
		Или ТипАнализа = ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		Если ВариантАнализа.ТолькоЦветОсновнойСерии Тогда
			ЦветОсновнойСерии = Цвета["Значение"]; // Цвет -
			ЦветНегативногоЗначения = Цвета["НегативноеОтклонение"];
			КоличествоСерийДиаграммы = СерииДиаграммы.Количество();
			
			Если ТипДиаграммыВарианта = ТипыДиаграмм.ГистограммаГоризонтальная
				Или ТипДиаграммыВарианта = ТипыДиаграмм.ГистограммаГоризонтальнаяОбъемная
				Или ТипДиаграммыВарианта = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальная
				Или ТипДиаграммыВарианта = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальнаяОбъемная
				Или ТипДиаграммыВарианта = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальная 
				Или ТипДиаграммыВарианта = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальнаяОбъемная Тогда
				ДиаграммаГоризонтальная = Истина;
			Иначе
				ДиаграммаГоризонтальная = Ложь;
			КонецЕсли;
			
			ИсходныйКрасный = 0;
			ИсходныйЗеленый = 0;
			ИсходныйСиний = 0;
			ИсходныйТон = 0;
			ИсходнаяНасыщенность = 0;
			ИсходнаяСветлота = 0;
			МаксимумГрадаций = Мин(5, КоличествоСерийДиаграммы);
			ПоВесуСерии = Ложь;
			
			ПолучитьКрасныйЗеленыйСинийВебЦвета(ЦветОсновнойСерии,
					ИсходныйКрасный,
					ИсходныйЗеленый,
					ИсходныйСиний);
			ПолучитьТонНасыщенностьЯркостьПоКрасныйЗеленыйСиний(ИсходныйКрасный,
					ИсходныйЗеленый,
					ИсходныйСиний,
					ИсходныйТон,
					ИсходнаяНасыщенность,
					ИсходнаяСветлота);
			
			Если ПоВесуСерии Тогда 
				Если ВариантАнализа.ГрадиентДляПокомпонентногоСравнения Тогда
					ВесМаксимальнойСерии = 0;
					Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
						// По весу серии
						ТекстСерии = СерияДиаграммы.Текст;
						НачалоМаркераВесаСерии = СтрНайти(ТекстСерии, "#");
						ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
						МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
						
						ВесМаксимальнойСерии = Макс(ВесМаксимальнойСерии, Число(СтрЗаменить(МаркерВесаСерии, "#","")));
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			НомерОформляемойСерии = 1;
			Пока НомерОформляемойСерии <= КоличествоСерийДиаграммы Цикл 
				Если ДиаграммаГоризонтальная Тогда
					СерияДиаграммы = СерииДиаграммы[КоличествоСерийДиаграммы - НомерОформляемойСерии];
				Иначе
					СерияДиаграммы = СерииДиаграммы[НомерОформляемойСерии-1];
				КонецЕсли;
				
				Если ВариантАнализа.ГрадиентДляПокомпонентногоСравнения Тогда
					Если ПоВесуСерии Тогда
						// По весу серии
						ТекстСерии = СерияДиаграммы.Текст;
						НачалоМаркераВесаСерии = СтрНайти(ТекстСерии, "#");
						ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
						МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
						
						СерияДиаграммы.Текст = СтрЗаменить(ТекстСерии, МаркерВесаСерии, "");
						
						ВесСерии = Число(СтрЗаменить(МаркерВесаСерии, "#",""));
						
						Если ВесМаксимальнойСерии = 0 Тогда
							Продолжить;
							
						КонецЕсли;
						
						КоэффициентВесаСерии = ВесСерии/ВесМаксимальнойСерии;
						
						СерияКрасный = 0;
						СерияЗеленый = 0;
						СерияСиний = 0;
						
						// По весу серии
						Если ВариантАнализа.ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения И ВесСерии
							= ВесМаксимальнойСерии Тогда
							// Если выделять первое значение ИсходнаяНасыщенность * КоэффициентВесаСерии
							ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(ИсходныйТон,
								100,
								ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии),
								СерияКрасный,
								СерияЗеленый,
								СерияСиний);
							ПолучитьДополнительныйЦветПоКрасныйЗеленыйСиний(СерияКрасный,
								СерияЗеленый,
								СерияСиний,
								СерияКрасный,
								СерияЗеленый,
								СерияСиний);
						Иначе
							ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(ИсходныйТон,
								ИсходнаяНасыщенность * КоэффициентВесаСерии, ИсходнаяСветлота
									+ (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии),
								СерияКрасный,
								СерияЗеленый,
								СерияСиний);
						КонецЕсли;
						
						Если ВесСерии < 0 Тогда
							СерияДиаграммы.Цвет = ЦветНегативногоЗначения;
						Иначе
							СерияДиаграммы.Цвет = Новый Цвет(СерияКрасный, СерияЗеленый, СерияСиний);
						КонецЕсли;
					Иначе
						// Шагами не более 5
						Если НомерОформляемойСерии > МаксимумГрадаций Тогда
							НомерГрадации = Цел(НомерОформляемойСерии % МаксимумГрадаций);
						Иначе
							НомерГрадации = НомерОформляемойСерии;
						КонецЕсли;
						// Осветляем почти до белого
						Если МаксимумГрадаций > 1 Тогда
							НовыйКоэффициентСветлоты = ИсходнаяСветлота + (НомерГрадации - 1) * (100 - ИсходнаяСветлота) / (МаксимумГрадаций - 1);
							Если ИсходнаяНасыщенность <> 0 Тогда
								НовыйКоэффициентНасыщенности = 100 - (НомерГрадации - 1) * 20;//(НомерГрадации - 2) * (ИсходнаяНасыщенность - 25) / (МаксимумГрадаций - 1);
							Иначе
								НовыйКоэффициентНасыщенности = ИсходнаяНасыщенность;
							КонецЕсли;
							
							ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(ИсходныйТон,
								НовыйКоэффициентНасыщенности,
								НовыйКоэффициентСветлоты, 
								СерияКрасный,
								СерияЗеленый,
								СерияСиний);
						Иначе
							ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(ИсходныйТон,
								ИсходнаяНасыщенность, 
								ИсходнаяСветлота, 
								СерияКрасный,
								СерияЗеленый,
								СерияСиний);
						КонецЕсли;
					
						СерияДиаграммы.Цвет = Новый Цвет(СерияКрасный, СерияЗеленый, СерияСиний);
					КонецЕсли;
				Иначе
					СерияДиаграммы.Цвет = ЦветОсновнойСерии;
					
				КонецЕсли;
				
				Если ПоВесуСерии Тогда 
					Если ВариантАнализа.ГрадиентДляПокомпонентногоСравнения
						И ВариантАнализа.ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения И ВесСерии
						= ВесМаксимальнойСерии Тогда
						// Если выделять первое значение ИсходнаяНасыщенность * КоэффициентВесаСерии
						ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(ИсходныйТон,
							100,
							ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии),
							СерияКрасный,
							СерияЗеленый,
							СерияСиний);
						ПолучитьДополнительныйЦветПоКрасныйЗеленыйСиний(СерияКрасный,
							СерияЗеленый,
							СерияСиний,
							СерияКрасный,
							СерияЗеленый,
							СерияСиний);
					КонецЕсли;
				Иначе
					Если ВариантАнализа.ГрадиентДляПокомпонентногоСравнения
						И ВариантАнализа.ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения
						И СерияДиаграммы.Значение = ОбъектАнализаМаксимум Тогда
						Если СерииДиаграммы.Количество() > 1 Тогда
							ИсходныйКрасныйМаксСерии = 0;
							ИсходныйЗеленыйМаксСерии = 0;
							ИсходныйСинийМаксСерии = 0;
							НовыйКрасныйМаксСерии = 0;
							НовыйЗеленыйМаксСерии = 0;
							НовыйСинийМаксСерии = 0;
							
							Если ЦветОсновнойСерии.Вид = ВидЦвета.Абсолютный Тогда
								ИсходныйКрасныйМаксСерии = ЦветОсновнойСерии.Красный;
								ИсходныйЗеленыйМаксСерии = ЦветОсновнойСерии.Зеленый;
								ИсходныйСинийМаксСерии = ЦветОсновнойСерии.Синий;
							ИначеЕсли ЦветОсновнойСерии.Вид = ВидЦвета.WebЦвет Тогда
								ПолучитьКрасныйЗеленыйСинийВебЦвета(ЦветОсновнойСерии,
									ИсходныйКрасныйМаксСерии,
									ИсходныйЗеленыйМаксСерии,
									ИсходныйСинийМаксСерии);
							КонецЕсли;
							
							ПолучитьДополнительныйЦветПоКрасныйЗеленыйСиний(ИсходныйКрасныйМаксСерии,
								ИсходныйЗеленыйМаксСерии,
								ИсходныйСинийМаксСерии,
								НовыйКрасныйМаксСерии,
								НовыйЗеленыйМаксСерии,
								НовыйСинийМаксСерии);
								
							СерияДиаграммы.Цвет = Новый Цвет(НовыйКрасныйМаксСерии, НовыйЗеленыйМаксСерии, НовыйСинийМаксСерии);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НомерОформляемойСерии = НомерОформляемойСерии + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
			Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
				Если ВариантАнализа.ВыводитьМаркерыТочек Тогда
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Круг;
				Иначе
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыбратьЦвет(Цвета, ИдентификаторСерии)
	
	Результат = Неопределено;
	
	Если ИдентификаторСерии = "ПриведенноеГраничноеПозитивноеОтклонение" Тогда
		Результат = Цвета["ПозитивноеОтклонение"];
	ИначеЕсли ИдентификаторСерии = "ПриведенноеГраничноеНегативноеОтклонение" Тогда
		Результат = Цвета["НегативноеОтклонение"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает параметры оформления точек диаграммы в соответствии с настройками показателя.
//
// Параметры:
//	ТочкиДиаграммы - ТочкиДиаграммы - содержит точки объекта Диаграмма.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//	ПериодыСПризнаком - ТаблицаЗначений - таблица периодов:
//	 *Период - Дата - 
//
Процедура УстановитьПользовательскиеНастройкиТочекДиаграммы(ТочкиДиаграммы, ВариантАнализа, ПериодыСПризнаком)
	
	ЦветаПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
	
	Для каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл
		
		ИдентификаторТочки = ТочкаДиаграммы.Значение;
		
		// Найдем точки с "Признак" = Истина в источнике данных
		Если Не ПериодыСПризнаком.Найти(Дата(ИдентификаторТочки)) = Неопределено Тогда
			
			ТочкаДиаграммы.ПриоритетЦвета = Истина;
			ТочкаДиаграммы.Цвет = ЦветаПоказателя["Прогноз"];
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатнойФормыВариантаАнализаИСводногоОтчета

// Заполняет шапку табличного документа (Имя показателя, статус, параметры).
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - Табличный документ для заполнения.
//	ВариантАнализа - Структура - реквизиты варианта анализа.
//	ИсточникДанных - См. ИнициализироватьИсточникДанных
//
Процедура ЗаполнитьСправочныеДанныеПоказателя(ТабличныйДокумент, ВариантАнализа, ИсточникДанных)
	
	ТипыАнализа = Перечисления.ТипыАнализаПоказателей;
	ТипАнализа = ВариантАнализа.ТипАнализа;
	
	СвойстваВариантаАнализа = ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных);
	МакетПечатнойФормы = МониторингЦелевыхПоказателейПовтИсп.МакетСтраницыПоказателя();
	Разделитель = МониторингЦелевыхПоказателейПовтИсп.ПолучитьРазделительПечатнойФормыВариантаАнализа();
	
	ЕстьСравнение = (ТипАнализа = ТипыАнализа.СравнениеСПрошлымПериодом);
	
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаНаименование"); // ТабличныйДокумент - 
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа); 
	
	ТабличныйДокумент.Вывести(ОбластьМакета, 1, "Шапка");
	ТабличныйДокумент.Вывести(Разделитель, 2, "Шапка");
	
	// Выведем информацию о цели
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦелиЗаголовок"); // ТабличныйДокумент - 
	ТабличныйДокумент.Вывести(ОбластьМакета, 2, "Шапка");
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦелиСодержание"); // ТабличныйДокумент - 
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	// Выведем информацию о фактическом состоянии
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОФактическомСостоянии"); // ТабличныйДокумент - 
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	// Выведем информацию о параметрах анализа
	ОбластьМакетаПараметров = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОПараметрахАнализа"); // ТабличныйДокумент - 
	ЗаполнитьЗначенияСвойств(ОбластьМакетаПараметров.Параметры, СвойстваВариантаАнализа);
	
	Если Не ЕстьСравнение Тогда
		ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаПериодСравнения, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Если Не ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
		ОбластьМакета = ОбластьМакетаПараметров.ПолучитьОбласть("ШапкаОбъектАнализа"); // ТабличныйДокумент - 
		ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаОбъектАнализа, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПараметров, 3, "Шапка");
	
	// Выведем информацию о параметрах анализа
	Если ВариантАнализа.РассчитыватьПрогноз 
		И Не ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = Неопределено
		И Не ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
		ОбластьМакетаПараметровПрогноза = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОПараметрахПрогноза"); // ТабличныйДокумент - 
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПараметровПрогноза.Параметры, СвойстваВариантаАнализа);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПараметровПрогноза, 3, "Шапка");
		
	КонецЕсли;

	ТабличныйДокумент.Вывести(Разделитель, 3, "Шапка");
	
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаОтветственный"); // ТабличныйДокумент - 
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаСформирован"); // ТабличныйДокумент - 
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
КонецПроцедуры

#КонецОбласти

#Область РасчетИсточниковДанныхИЗначенийВариантовАнализа

Функция ПолучитьИсточникДанныхВариантаАнализаИзИнформационнойБазы(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	
	#Область ИнициализацияИсточникаДанных
	ИсточникДанных = ИнициализироватьИсточникДанных(ВариантАнализа);
	#КонецОбласти
	
	#Область ИнициализацияПараметровРасчета
	ПараметрыРасчета = ПараметрыРасчета(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры);
	ИсточникДанных.ПараметрыРасчета = ПараметрыРасчета;
	#КонецОбласти 
	
	ИсточникДанных.ДляТаблицы = ПараметрыРасчета.ДляТаблицы;
	
	#Область НастройкаИКонтрольСхемыКомпоновкиДанных
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхДляРасчета(ПараметрыРасчета);
	
	Если Не КонтрольКорректностиНастроекИДанных("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	#КонецОбласти 
	
	// Получим таблицу с непрерывным интервалом значений периодов
	ТаблицаПериодов = ПериодыЗаданнойПериодичности(ПараметрыРасчета.ПериодАнализа.ДатаНачала,
		ПараметрыРасчета.ПериодАнализа.ДатаОкончания,
		ПараметрыРасчета.ПериодичностьРасчетаПоказателя);
	Если ПараметрыРасчета.ЕстьСравнение Тогда
		ТаблицаПериодов = ДополнитьТаблицуПериодов(ТаблицаПериодов,
			ПараметрыРасчета.ПериодСравнения.ДатаНачала,
			ПараметрыРасчета.ПериодСравнения.ДатаОкончания,
			ПараметрыРасчета.ПериодичностьРасчетаПоказателя);
	КонецЕсли;
	
	#Область НастройкаКомпоновщикаНастроек
	КомпоновщикНастроек = КомпоновщикНастроекДляРасчета(СхемаКомпоновкиДанных, ПараметрыРасчета, ДинамическиеПараметры);
	#КонецОбласти 
	
	#Область НастройкаИКонтрольМакетаКомпоновкиДанных
	НастройкиМакетаКомпоновкиДанных = НастройкиМакетаКомпоновкиДанныхДляРасчета(СхемаКомпоновкиДанных, КомпоновщикНастроек);
	
	Если Не КонтрольКорректностиНастроекИДанных("НастройкиМакетаКомпоновкиДанных", НастройкиМакетаКомпоновкиДанных, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	МакетКомпоновкиДанных = НастройкиМакетаКомпоновкиДанных.МакетКомпоновкиДанных;
	#КонецОбласти 
	
	#Область КэшированиеПараметровРасчетаИсточникаДанных
	// Заполним динамические свойства варианта анализа в источнике данных
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя = ПараметрыРасчета.ПериодичностьРасчетаПоказателя;
	
	Если Не СхемаКомпоновкиДанных.Параметры.Найти("ВалютаРасчета") = Неопределено 
		И СхемаКомпоновкиДанных.Параметры.Найти("ВалютаРасчета").Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
		
		ВалютаРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВалютаРасчета");
		ДинамическиеСвойстваВариантаАнализа.Размерность = ВалютаРасчета.Значение;
	Иначе 
		ДинамическиеСвойстваВариантаАнализа.Размерность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "Владелец.Размерность");
	КонецЕсли;
	
	ИскомоеЗначениеАнализа = НастройкиКомпоновкиДанных.ДоступныеПоляВыбора.НайтиПоле(ПараметрыРасчета.ЗначениеАнализаПоле);
	Если Не КонтрольКорректностиНастроекИДанных("ЗначениеАнализа", ИскомоеЗначениеАнализа, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	Иначе
		ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
		ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление = ИскомоеЗначениеАнализа.Заголовок;
	КонецЕсли;
	
	Если ПараметрыРасчета.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		Или ПараметрыРасчета.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
		Если ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
			ИскомыйОбъектАнализа = НастройкиКомпоновкиДанных.ДоступныеПоляВыбора.НайтиПоле(ПараметрыРасчета.ОбъектАнализаПоле);
			Если Не КонтрольКорректностиНастроекИДанных("ОбъектАнализа", ИскомыйОбъектАнализа, ИсточникДанных, ПараметрыРасчета) Тогда
				Возврат ИсточникДанных;
			Иначе
				ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа = ПараметрыРасчета.ОбъектАнализаИмяПоля;
				ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление = ИскомыйОбъектАнализа.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРасчета.РежимПокомпонентногоСравнения = 1 Тогда
			ИскомоеЗначениеАнализаДополнительное = НастройкиКомпоновкиДанных.ДоступныеПоляВыбора.НайтиПоле(ПараметрыРасчета.ЗначениеАнализаДополнительноеПоле);
			Если Не КонтрольКорректностиНастроекИДанных("ЗначениеАнализаДополнительное", ИскомоеЗначениеАнализаДополнительное, ИсточникДанных, ПараметрыРасчета) Тогда
				Возврат ИсточникДанных;
			Иначе
				ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаДополнительное = ПараметрыРасчета.ЗначениеАнализаДополнительноеИмяПоля;
				ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаДополнительноеПредставление = ИскомоеЗначениеАнализаДополнительное.Заголовок;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолучениеДанных
	ИсточникДанных.ДатаРасчета = ТекущаяДатаСеанса();
	РезультатПолученияДанных = РезультатПолученияДанных(МакетКомпоновкиДанных, ТаблицаПериодов);
	
	Если Не КонтрольКорректностиНастроекИДанных("РезультатПолученияДанных", РезультатПолученияДанных, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	ИсточникДанных.Данные = РезультатПолученияДанных.Данные;
	#КонецОбласти
	
	#Область ПостобработкаИКонтрольКорректностиНастроекИДанных
	Если Не КонтрольКорректностиНастроекИДанных("Данные", ИсточникДанных.Данные, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	// Зафиксируем актуальность факта расчета
	ИсточникДанных.ДанныеАктуальны = Истина;
	
	СвернутьДанные(ИсточникДанных, ПараметрыРасчета);
	
	Если Не КонтрольКорректностиНастроекИДанных("АктуальностьРасчетов", ИсточникДанных.Данные, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	// Обработаем таблицу значений для двух видов анализа по объектам
	Если ПараметрыРасчета.ЕстьНарастающийИтог Тогда 
		РассчитатьНарастающийИтог(ИсточникДанных.Данные, ПараметрыРасчета);
	КонецЕсли;
	
	// Проверим, что после анализа и подготовки источника, в нем все еще достаточно данных.
	Если Не КонтрольКорректностиНастроекИДанных("Данные", ИсточникДанных.Данные, ИсточникДанных, ПараметрыРасчета) Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	#КонецОбласти 
	
	#Область КэшированиеСводнойИнформацииПоПериодам
	ЗаполнитьСводнуюИнформациюОбИсточникеДанных(ИсточникДанных, ПараметрыРасчета);
	#КонецОбласти
	
	#Область ДополнениеДанныхПрогнозом
	ДополнитьДанныеПрогнозом(ИсточникДанных, ПараметрыРасчета);
	#КонецОбласти 
	
	#Область КэшированиеЗоныАнализаИТренда
	ЗаполнитьЗоныАнализаИТренд(ИсточникДанных, ПараметрыРасчета);
	#КонецОбласти 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИсточникДанных;
КонецФункции

Функция ВидОтклоненияОтЦелевогоЗначения(ВариантАнализа, ДатаЦелевогоЗначения)
	
	ВидОтклоненияОтЦелевогоЗначения = Перечисления.ВидыОтклоненийОтЦелевыхЗначенийПоказателей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа.Ссылка);
	Запрос.УстановитьПараметр("ДатаЦелевогоЗначения", ДатаЦелевогоЗначения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидОтклоненияОтЦелевогоЗначения
	|ИЗ
	|	РегистрСведений.ЦелевыеЗначенияВариантовАнализа.СрезПоследних(&ПараметрПериода, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	ВыражениеПараметрПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"КОНЕЦПЕРИОДА(&ДатаЦелевогоЗначения, %1)",
		ВРег(ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьРасчетаПоказателя)));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрПериода", ВыражениеПараметрПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ВидОтклоненияОтЦелевогоЗначения = Выборка.ВидОтклоненияОтЦелевогоЗначения;
		
	КонецЕсли;
	
	Возврат ВидОтклоненияОтЦелевогоЗначения;
	
КонецФункции

Процедура ЗаписатьДанныеВариантаАнализаВКэш(ИсточникДанных, ВариантОтображения)
	
	НаборЗаписей = РегистрыСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВариантАнализа.Значение = ИсточникДанных.ВариантАнализа;
	НаборЗаписей.Отбор.ВариантАнализа.Использование = Истина;
	НаборЗаписей.Отбор.ВариантОтображения.Значение = ВариантОтображения;
	НаборЗаписей.Отбор.ВариантОтображения.Использование = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВариантАнализа = ИсточникДанных.ВариантАнализа;
	НоваяЗапись.ВариантОтображения = ВариантОтображения;
	НоваяЗапись.ДатаРасчета = ИсточникДанных.ДатаРасчета;
	НоваяЗапись.ИсточникДанных = Новый ХранилищеЗначения(ИсточникДанных);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, СтрокаСПоследнимиЗначениями, ВариантАнализа)
	
	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа);
	
	СвойстваДанныхПоПериодам.ВидЦелевогоЗначения = ВидЦелевогоЗначения;
	СвойстваДанныхПоПериодам.ЦелевоеЗначение = СтрокаСПоследнимиЗначениями.ЦелевоеЗначение;
	СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум = СтрокаСПоследнимиЗначениями.ЦелевойДиапазонМаксимум;
	СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум = СтрокаСПоследнимиЗначениями.ЦелевойДиапазонМинимум;
	СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидОтклоненияОтЦелевогоЗначения(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения);
	СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение = СтрокаСПоследнимиЗначениями.ГраничноеПозитивноеОтклонение;
	СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение = СтрокаСПоследнимиЗначениями.ГраничноеНегативноеОтклонение;
	СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение = СтрокаСПоследнимиЗначениями.ПриведенноеГраничноеПозитивноеОтклонение;
	СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение = СтрокаСПоследнимиЗначениями.ПриведенноеГраничноеНегативноеОтклонение;
	
КонецПроцедуры


// Шаблон источника данных построения отчета.
// 
// Параметры:
// 	ВариантАнализа - Структура - Вариант анализа цели.
//
// Возвращаемое значение:
// 	Структура - Описание:
// 	* Цель - СправочникСсылка.СтруктураЦелей - Цель.
// 	* ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Вариант анализа цели.
// 	* ПараметрыРасчета - Неопределено -
// 	* Данные - ТаблицаЗначений - таблица с колонками:
// 	** Период - Дата - 
// 	** ПериодСравнения - Дата - 
// 	** Признак - Булево - 
// 	* ДатаРасчета - Дата -
// 	* ДанныеАктуальны - Булево -
// 	* РасчетыАктуальны - Булево -
// 	* ДляТаблицы - Булево -
// 	* Пустой - Булево -
// 	* ОшибкаРасчета - Булево -
// 	* ОписаниеОшибки - Строка -
// 	* ДинамическиеСвойстваВариантаАнализа - Структура -:
// 	** Отборы - Неопределено -
// 	** ПериодичностьРасчетаПоказателя - Неопределено -
// 	** ЗначениеАнализаДополнительноеПредставление - Строка -
// 	** ЗначениеАнализаДополнительное - Неопределено -
// 	** ЗначениеАнализаПредставление - Строка -
// 	** ЗначениеАнализа - Неопределено -
// 	** ОбъектАнализаПредставление - Строка -
// 	** ОбъектАнализа - Неопределено -
// 	** Размерность - Неопределено -
// 	* СвойстваОбщейСтатистики - Структура -:
// 	** ПоПериодам - Структура -:
// 	*** Количество - Число - 
// 	*** Минимум - Число - 
// 	*** Максимум - Число -
// 	*** Среднее - Число -
// 	*** Размах - Число - 
// 	*** СтандартноеОтклонение - Число - 
// 	*** Медиана - Число - 
// 	** ПоОбъектамАнализа - Структура -:
// 	*** Количество - Число - 
// 	*** Минимум - Число - 
// 	*** Максимум - Число -
// 	*** Среднее - Число -
// 	*** Размах - Число - 
// 	*** СтандартноеОтклонение - Число - 
// 	*** Медиана - Число - 
// 	* СвойстваЗоныАнализаИТренда - Структура -:
// 	** ЦелевыеЗначенияПредставление - Неопределено -
// 	** ПорядокЗоныВнимания - Неопределено -
// 	** ЗонаВнимания - Неопределено -
// 	** ХарактерИзменений - Неопределено -
// 	** ПояснениеКСтатусу - Неопределено -
// 	** Статус - Неопределено -
// 	** ТочекВРеальномТренде - Неопределено -
// 	** ПояснениеКТренду - Неопределено -
// 	** ФактическийТренд - Неопределено -
// 	** НомерЗоныАнализа - Неопределено -
// 	** ЦелевойТренд - Неопределено -
// 	** ИзмененияСтабильны - Неопределено -
// 	* СвойстваПрогнозаДанныхПоПериодам - Структура -:
// 	** СтатистическиеПараметрыТренда - Неопределено -
// 	** ДополнятьТаблицу - Неопределено -
// 	** ГлубинаАнализа - Неопределено -
// 	** Базис - Неопределено -
// 	** КоличествоПериодов - Неопределено -
// 	** ДатаНачала - Неопределено -
// 	** Смещение - Неопределено -
// 	** Периодичность - Неопределено -
// 	* СвойстваДанныхПоОбъектамАнализа - Структура -:
// 	** МинимальноеЗначение - Неопределено -
// 	** МаксимальноеЗначение - Неопределено -
// 	** ОбъектАнализаМинимум - Неопределено -
// 	** ОбъектАнализаМаксимум - Неопределено -
//
Функция ИнициализироватьИсточникДанных(ВариантАнализа) Экспорт
	
	ИсточникДанных = Новый Структура;
	ИсточникДанных.Вставить("Цель", ВариантАнализа.Владелец);
	ИсточникДанных.Вставить("ВариантАнализа",							ВариантАнализа);
	ИсточникДанных.Вставить("ПараметрыРасчета",							Неопределено);
	ИсточникДанных.Вставить("Данные",									Новый ТаблицаЗначений);
	ИсточникДанных.Вставить("ДатаРасчета",								Дата(1,1,1)); 
	ИсточникДанных.Вставить("ДанныеАктуальны",							Ложь);
	ИсточникДанных.Вставить("РасчетыАктуальны",							Истина);
	ИсточникДанных.Вставить("ДляТаблицы",								Ложь);
	ИсточникДанных.Вставить("Пустой",									Ложь);
	ИсточникДанных.Вставить("ОшибкаРасчета",							Ложь);
	ИсточникДанных.Вставить("ОписаниеОшибки",							"");
	
	ДинамическиеСвойстваВариантаАнализа = Новый Структура;
	ДинамическиеСвойстваВариантаАнализа.Вставить("Размерность",										Неопределено);
	ДинамическиеСвойстваВариантаАнализа.Вставить("ОбъектАнализа",									Неопределено);
	ДинамическиеСвойстваВариантаАнализа.Вставить("ОбъектАнализаПредставление",						"");
	ДинамическиеСвойстваВариантаАнализа.Вставить("ЗначениеАнализа",									Неопределено);
	ДинамическиеСвойстваВариантаАнализа.Вставить("ЗначениеАнализаПредставление",					"");
	ДинамическиеСвойстваВариантаАнализа.Вставить("ЗначениеАнализаДополнительное",					Неопределено);
	ДинамическиеСвойстваВариантаАнализа.Вставить("ЗначениеАнализаДополнительноеПредставление",		"");
	ДинамическиеСвойстваВариантаАнализа.Вставить("ПериодичностьРасчетаПоказателя",					Неопределено);
	ДинамическиеСвойстваВариантаАнализа.Вставить("Отборы",											Неопределено);
	
	ИсточникДанных.Вставить("ДинамическиеСвойстваВариантаАнализа", ДинамическиеСвойстваВариантаАнализа);
	
	СвойстваДанныхПоПериодам = Новый Структура;
	СвойстваДанныхПоПериодам.Вставить("ДатаПервогоЗначения",						Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ДатаПредпоследнегоЗначения",					Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ДатаПоследнегоЗначения",						Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ПервоеЗначение",								Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ПредпоследнееЗначение",						Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ПоследнееЗначение",							Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ОбщийИтог",									Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ВидЦелевогоЗначения",						Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ЦелевоеЗначение",							Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ЦелевойДиапазонМинимум",						Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ЦелевойДиапазонМаксимум",					Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ВидОтклоненияОтЦелевогоЗначения",			Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ГраничноеПозитивноеОтклонение",				Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ГраничноеНегативноеОтклонение",				Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ПриведенноеГраничноеПозитивноеОтклонение",	Неопределено);
	СвойстваДанныхПоПериодам.Вставить("ПриведенноеГраничноеНегативноеОтклонение",	Неопределено);
	
	ИсточникДанных.Вставить("СвойстваДанныхПоПериодам", СвойстваДанныхПоПериодам);
	
	СвойстваДанныхПоПериодамСравнения = Новый Структура;
	СвойстваДанныхПоПериодамСравнения.Вставить("ДатаПервогоЗначения",							Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ДатаПредпоследнегоЗначения",					Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ДатаПоследнегоЗначения",						Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ПервоеЗначение",								Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ПредпоследнееЗначение",							Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ПоследнееЗначение",								Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ОбщийИтог",										Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ВидЦелевогоЗначения",							Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ЦелевоеЗначение",								Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ЦелевойДиапазонМинимум",						Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ЦелевойДиапазонМаксимум",						Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ВидОтклоненияОтЦелевогоЗначения",				Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ГраничноеПозитивноеОтклонение",					Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ГраничноеНегативноеОтклонение",					Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ПриведенноеГраничноеПозитивноеОтклонение",		Неопределено);
	СвойстваДанныхПоПериодамСравнения.Вставить("ПриведенноеГраничноеНегативноеОтклонение",		Неопределено);
	
	ИсточникДанных.Вставить("СвойстваДанныхПоПериодамСравнения", СвойстваДанныхПоПериодамСравнения);
	
	СвойстваДанныхПоОбъектамАнализа = Новый Структура;
	СвойстваДанныхПоОбъектамАнализа.Вставить("ОбъектАнализаМаксимум",			Неопределено);
	СвойстваДанныхПоОбъектамАнализа.Вставить("ОбъектАнализаМинимум",			Неопределено);
	СвойстваДанныхПоОбъектамАнализа.Вставить("МаксимальноеЗначение",			Неопределено);
	СвойстваДанныхПоОбъектамАнализа.Вставить("МинимальноеЗначение",				Неопределено);
	
	ИсточникДанных.Вставить("СвойстваДанныхПоОбъектамАнализа", СвойстваДанныхПоОбъектамАнализа);
	
	СвойстваПрогнозаДанныхПоПериодам = Новый Структура;
	СвойстваПрогнозаДанныхПоПериодам.Вставить("Периодичность",					Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("Смещение",						Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("ДатаНачала",						Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("КоличествоПериодов",				Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("Базис",							Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("ГлубинаАнализа",					Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("ДополнятьТаблицу",				Неопределено);
	СвойстваПрогнозаДанныхПоПериодам.Вставить("СтатистическиеПараметрыТренда",	Неопределено);
	
	ИсточникДанных.Вставить("СвойстваПрогнозаДанныхПоПериодам", СвойстваПрогнозаДанныхПоПериодам);
	
	СвойстваЗоныАнализаИТренда = Новый Структура;
	СвойстваЗоныАнализаИТренда.Вставить("ИзмененияСтабильны",					Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ЦелевойТренд",							Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("НомерЗоныАнализа",						Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ФактическийТренд",						Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ПояснениеКТренду",						Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ТочекВРеальномТренде",					Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("Статус",								Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ПояснениеКСтатусу",					Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ХарактерИзменений",					Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ЗонаВнимания",							Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ПорядокЗоныВнимания",					Неопределено);
	СвойстваЗоныАнализаИТренда.Вставить("ЦелевыеЗначенияПредставление",			Неопределено);
	
	ИсточникДанных.Вставить("СвойстваЗоныАнализаИТренда", СвойстваЗоныАнализаИТренда);
	
	СтруктураСтатистики = Новый Структура;
	СтруктураСтатистики.Вставить("Количество",					0);
	СтруктураСтатистики.Вставить("Минимум",						0);
	СтруктураСтатистики.Вставить("Максимум",					0);
	СтруктураСтатистики.Вставить("Среднее",						0);
	СтруктураСтатистики.Вставить("Размах",						0);
	СтруктураСтатистики.Вставить("СтандартноеОтклонение",		0);
	СтруктураСтатистики.Вставить("Медиана",						0);
	
	СвойстваОбщейСтатистики = Новый Структура;
	СвойстваОбщейСтатистики.Вставить("ПоПериодам", СтруктураСтатистики);
	СвойстваОбщейСтатистики.Вставить("ПоОбъектамАнализа", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСтатистики));
	
	ИсточникДанных.Вставить("СвойстваОбщейСтатистики", СвойстваОбщейСтатистики);
	
	Возврат ИсточникДанных;
	
КонецФункции

Функция ИсточникДанныхПустойПоИтогам(ДанныеИсточникаДанных)
	РезультатПроверки = Истина;
	
	Если Не ДанныеИсточникаДанных = Неопределено Тогда
		КолонкиИсточникаДанных = ДанныеИсточникаДанных.Колонки;
		
		Для каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
			ИтогПоКолонке = ДанныеИсточникаДанных.Итог(КолонкаИсточникаДанных.Имя);
			
			Если Не ИтогПоКолонке = Неопределено И Не ИтогПоКолонке = 0 Тогда
				РезультатПроверки = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

Функция ОбщаяСтатистикаИсточникаДанных(ИсточникДанных)
	
	АнализИсточникаДанных = Новый АнализДанных;
	АнализИсточникаДанных.ТипАнализа = Тип("АнализДанныхОбщаяСтатистика");
	АнализИсточникаДанных.ИсточникДанных = ИсточникДанных;
	РезультатАнализИсточникаДанных = АнализИсточникаДанных.Выполнить();
	
	Возврат РезультатАнализИсточникаДанных;
	
КонецФункции

// Изменяет состав колонок источника данных в зависимости от назначения показателя.
//
// Параметры:
//		ИсточникДанных - см. ИнициализироватьИсточникДанных
//		ВариантАнализа - Структура - реквизиты варианта анализа.
//
Процедура ПодготовитьИсточник(ИсточникДанных, ВариантАнализа)
	
	ВидыЦелевыхЗначенийВариантовАнализа	= Перечисления.ВидыЦелевыхЗначенийВариантовАнализа;	
	КолонкиИсточникаДанных				= ИсточникДанных.Данные.Колонки;
	ДанныеИсточника						= ИсточникДанных.Данные;
	ДатаПоследнегоЗначения				= ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ТипыАнализа	= Перечисления.ТипыАнализаПоказателей;
	ТипАнализа	= ВариантАнализа.ТипАнализа;
	
	Если ИсточникДанных.ДляТаблицы Тогда
		// Удалим колонки, которые не нужны при покомпонентном сравнении
		КолонкиКУдалению = Новый Массив;
		Для Каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл 
			ИмяКолонки = КолонкаИсточникаДанных.Имя;
			Если Не ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа 
				И Не ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
				КолонкиКУдалению.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		Для Каждого КолонкаКУдалению Из КолонкиКУдалению Цикл 
			КолонкиИсточникаДанных.Удалить(КолонкаКУдалению);
		КонецЦикла;
		
	ИначеЕсли ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение 
		И ИсточникДанных.ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
		// Удалим колонки, которые не нужны при покомпонентном сравнении
		КолонкиКУдалению = Новый Массив;
		Для Каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл 
			ИмяКолонки = КолонкаИсточникаДанных.Имя;
			Если Не ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа 
				И Не ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
				КолонкиКУдалению.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		Для Каждого КолонкаКУдалению Из КолонкиКУдалению Цикл 
			КолонкиИсточникаДанных.Удалить(КолонкаКУдалению);
		КонецЦикла;
		
	ИначеЕсли ТипАнализа = ТипыАнализа.ДинамикаИзменения
		Или ТипАнализа = ТипыАнализа.ПокомпонентноеСравнениеДинамика
		Или (ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение 
			И ИсточникДанных.ПараметрыРасчета.РежимПокомпонентногоСравнения = 1)Тогда
		
		ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ДатаПоследнегоЗначения, ВариантАнализа);
		
		Если ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Диапазон Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = Неопределено Тогда 
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеНегативноеОтклонение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеПозитивноеОтклонение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
		Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
			Если ИсточникДанных.ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
				НовыеДанныеИсточника = Новый ТаблицаЗначений;
				НовыеДанныеИсточника.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
				
				// Преобразуем серии из строк в колонки
				ТаблицаСОбъектамиАнализа = ДанныеИсточника.Скопировать(, ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "," + ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
				ТаблицаСОбъектамиАнализа.Свернуть(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа);
				ОбъектыАнализа = ТаблицаСОбъектамиАнализа.ВыгрузитьКолонку(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа);
				
				// Упорядочим колонки по их весу
				ТаблицаСОбъектамиАнализаПоПорядку = ДанныеИсточника.СкопироватьКолонки(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "," + ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
				Для Каждого ОбъектАнализа Из ОбъектыАнализа Цикл 
					ОтборПоОбъектуАнализа = Новый Структура(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа, ОбъектАнализа);
					НайденныеСтроки = ДанныеИсточника.НайтиСтроки(ОтборПоОбъектуАнализа);
					
					ВременнаяТаблицаДляПодитога = Новый ТаблицаЗначений;
					ВременнаяТаблицаДляПодитога = ДанныеИсточника.Скопировать(НайденныеСтроки, ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "," + ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
					
					Если ВариантАнализа.МетодРасчетаЗначений = Перечисления.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.Сумма Тогда
						ВременнаяТаблицаДляПодитога.Свернуть(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа, ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
						
						НоваяСтрока = ТаблицаСОбъектамиАнализаПоПорядку.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВременнаяТаблицаДляПодитога[0]);
					Иначе
						НоваяСтрока = ТаблицаСОбъектамиАнализаПоПорядку.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВременнаяТаблицаДляПодитога[ВременнаяТаблицаДляПодитога.Количество()-1]);
					КонецЕсли;
				КонецЦикла;
				ТаблицаСОбъектамиАнализаПоПорядку.Свернуть(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа);
				ОбъектыАнализа = ТаблицаСОбъектамиАнализаПоПорядку.ВыгрузитьКолонку(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа);
				
				// Сформируем хеш значений на случай, если объект анализа не ссылочного типа
				ТаблицаСОбъектамиАнализаПоПорядку.Колонки.Добавить("Хеш", ОбщегоНазначения.ОписаниеТипаСтрока(32));
				Для Каждого СтрокаОбъектАнализа Из ТаблицаСОбъектамиАнализаПоПорядку Цикл 
						// Сформируем уникальный идентификатор по хешу
						ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
						ХешированиеДанных.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(СтрокаОбъектАнализа[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа]));
						СтрокаОбъектАнализа.Хеш = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
						ХешированиеДанных = Неопределено;
				КонецЦикла;
				
				// Создадим колонки
				Для Каждого СтрокаОбъектАнализа Из ТаблицаСОбъектамиАнализаПоПорядку Цикл 
					ЗначениеОбъектаАнализа = СтрокаОбъектАнализа[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа];
					Если Не ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Null")
						И (ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Строка")
						Или ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеОбъектаАнализа) = "Перечисление") Тогда
						УИДОбъектаАнализа = СтрокаОбъектАнализа.Хеш;
					ИначеЕсли ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Null") Тогда
						УИДОбъектаАнализа = "ЗначениеNull";
					ИначеЕсли ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Неопределено") Тогда
						УИДОбъектаАнализа = "НеопределенноеЗначение";
					ИначеЕсли ЗначениеЗаполнено(ЗначениеОбъектаАнализа) Тогда
						УИДОбъектаАнализа = ЗначениеОбъектаАнализа.УникальныйИдентификатор();
					ИначеЕсли Не ЗначениеЗаполнено(ЗначениеОбъектаАнализа) Тогда
						УИДОбъектаАнализа = "ЗначениеНеЗаполнено";
					КонецЕсли;
					УИДОбъектаАнализаНормализованный = СтрЗаменить(Строка(УИДОбъектаАнализа), "-", "_");
					НовыеДанныеИсточника.Колонки.Добавить(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + УИДОбъектаАнализаНормализованный, ,
						Строка(ЗначениеОбъектаАнализа));
				КонецЦикла;
					
				// Создадим строки с периодами
				ТаблицаСПериодами = ДанныеИсточника.Скопировать(, "Период");
				ТаблицаСПериодами.Свернуть("Период");
				ТаблицаСПериодами.Сортировать("Период ВОЗР");
				
				Для Каждого Период Из ТаблицаСПериодами Цикл  
					НоваяСтрока = НовыеДанныеИсточника.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Период);
				КонецЦикла;
				
				// Перенесем цифры из строк в колонки
				Для Каждого СтрокаДанных Из ДанныеИсточника Цикл 
					ЗначениеОбъектаАнализа = СтрокаДанных[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа];
					Если Не ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Null")
						И (ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Строка")
						Или ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеОбъектаАнализа) = "Перечисление") Тогда
						ОтборПоОбъектуАнализа = Новый Структура(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа, ЗначениеОбъектаАнализа);
						НайденныеХеши = ТаблицаСОбъектамиАнализаПоПорядку.НайтиСтроки(ОтборПоОбъектуАнализа);
						
						УИДОбъектаАнализа = НайденныеХеши[0].Хеш;
					ИначеЕсли ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Null") Тогда
						УИДОбъектаАнализа = "ЗначениеNull";
					ИначеЕсли ТипЗнч(ЗначениеОбъектаАнализа) = Тип("Неопределено") Тогда
						УИДОбъектаАнализа = "НеопределенноеЗначение";
					ИначеЕсли ЗначениеЗаполнено(ЗначениеОбъектаАнализа) Тогда
						УИДОбъектаАнализа = ЗначениеОбъектаАнализа.УникальныйИдентификатор();
					ИначеЕсли Не ЗначениеЗаполнено(ЗначениеОбъектаАнализа) Тогда
						УИДОбъектаАнализа = "ЗначениеНеЗаполнено";
					КонецЕсли;
					
					УИДОбъектаАнализаНормализованный = СтрЗаменить(Строка(УИДОбъектаАнализа), "-", "_");
					
					СтрокаПериода = НовыеДанныеИсточника.Найти(СтрокаДанных.Период, "Период");
					СтрокаПериода[ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + УИДОбъектаАнализаНормализованный] = СтрокаДанных[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа];
				КонецЦикла;
				
				ИскомаяКолонка = НовыеДанныеИсточника.Колонки.Найти(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + "ЗначениеNull");
				Если ИскомаяКолонка <> Неопределено
					И НовыеДанныеИсточника.Итог(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + "ЗначениеNull") = 0 Тогда 
					НовыеДанныеИсточника.Колонки.Удалить(НовыеДанныеИсточника.Колонки.Индекс(ИскомаяКолонка));
				КонецЕсли;
				ИскомаяКолонка = НовыеДанныеИсточника.Колонки.Найти(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + "НеопределенноеЗначение");
				Если ИскомаяКолонка <> Неопределено
					И НовыеДанныеИсточника.Итог(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + "НеопределенноеЗначение") = 0 Тогда 
					НовыеДанныеИсточника.Колонки.Удалить(НовыеДанныеИсточника.Колонки.Индекс(ИскомаяКолонка));
				КонецЕсли;
				ИскомаяКолонка = НовыеДанныеИсточника.Колонки.Найти(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + "ЗначениеНеЗаполнено");
				Если ИскомаяКолонка <> Неопределено
					И НовыеДанныеИсточника.Итог(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа + "__" + "ЗначениеНеЗаполнено") = 0 Тогда 
					НовыеДанныеИсточника.Колонки.Удалить(НовыеДанныеИсточника.Колонки.Индекс(ИскомаяКолонка));
				КонецЕсли;
				
				ДанныеИсточника = НовыеДанныеИсточника.Скопировать();
				
				ИсточникДанных.Данные = ДанныеИсточника;
			Иначе
				УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
				Если Не УдаляемаяКолонка = Неопределено Тогда
					КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				КонецЕсли;
				
				УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
				Если Не УдаляемаяКолонка = Неопределено Тогда
					КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				КонецЕсли;
				
				УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
				Если Не УдаляемаяКолонка = Неопределено Тогда
					КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ДатаПоследнегоЗначения, ВариантАнализа);
		
		Если ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Диапазон Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
		Иначе
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеПозитивноеОтклонение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеНегативноеОтклонение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
		// Для измерительной диаграммы оставим только последнее фактическое значение
		ОтборПоДате = Новый Структура("Период", НачалоДня(ДатаПоследнегоЗначения));
		МассивСтрок = ДанныеИсточника.НайтиСтроки(ОтборПоДате);
		ИсточникДанных.Данные = ДанныеИсточника.Скопировать(МассивСтрок);
		
		// Перенесем отдельные значения в структуру источника
		КолонкиИсточникаДанных = ИсточникДанных.Данные.Колонки;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
		Если ВариантАнализа.РассчитыватьПрогноз Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("Прогноз");
			Если Не УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			КонецЕсли;
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
		Если Не УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
		КонецЕсли;
		
	ИначеЕсли ТипАнализа = ТипыАнализа.СравнениеСПрошлымПериодом Тогда 
		
		// Для сравнения с прошлыми периодами перезаполним данные
		// на основании текущих и предыдущих значений.
		ДанныеДляСравненияПериодов = Новый ТаблицаЗначений;
		КолонкиДанных = ДанныеДляСравненияПериодов.Колонки;
		
		ПредставлениеКолонки = НСтр("ru='Период сравнения'");
		КолонкиДанных.Добавить("ПериодСравнения",, ПредставлениеКолонки);
		
		ПредставлениеКолонки = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление;
		КолонкиДанных.Добавить(ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа,
			ОбщегоНазначения.ОписаниеТипаЧисло(31,3),
			ПредставлениеКолонки);
		
		ПредставлениеКолонки = НСтр("ru='Целевое значение'");
		КолонкиДанных.Добавить("ЦелевоеЗначение",
			ОбщегоНазначения.ОписаниеТипаЧисло(31,3),
			ПредставлениеКолонки);
		
		ПредставлениеКолонки = НСтр("ru='Приведенное граничное позитивное отклонение'");
		КолонкиДанных.Добавить("ПриведенноеГраничноеПозитивноеОтклонение",
			ОбщегоНазначения.ОписаниеТипаЧисло(31,3),
			ПредставлениеКолонки);
		
		ПредставлениеКолонки = НСтр("ru='Приведенное граничное негативное отклонение'");
		КолонкиДанных.Добавить("ПриведенноеГраничноеНегативноеОтклонение",
			ОбщегоНазначения.ОписаниеТипаЧисло(31,3),
			ПредставлениеКолонки);
		
		СтрокаПрошлогоПериода = ДанныеДляСравненияПериодов.Добавить();
		ПредставлениеПрошлогоПериода = ПредставлениеСтандартногоПериода(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсточникДанных.ВариантАнализа, "ПериодСравнения").Получить(), Ложь);
		СтрокаПрошлогоПериода.ПериодСравнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Прошлый %1'"),
			ПредставлениеПрошлогоПериода); 
		СтрокаПрошлогоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ОбщийИтог;
		СтрокаПрошлогоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ЦелевоеЗначение; 
		СтрокаПрошлогоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ПриведенноеГраничноеПозитивноеОтклонение; 
		СтрокаПрошлогоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ПриведенноеГраничноеНегативноеОтклонение; 
		
		СтрокаТекущегоПериода = ДанныеДляСравненияПериодов.Добавить();
		ПредставлениеТекущегоПериода = ПредставлениеСтандартногоПериода(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсточникДанных.ВариантАнализа, "ПериодАнализа").Получить(), Ложь);
		СтрокаТекущегоПериода.ПериодСравнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Текущий %1'"),
			ПредставлениеТекущегоПериода); 
		СтрокаТекущегоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.СвойстваДанныхПоПериодам.ОбщийИтог;
		СтрокаТекущегоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение; 
		СтрокаТекущегоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение; 
		СтрокаТекущегоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение; 
		
		Если ВариантАнализа.РассчитыватьПрогноз
			И Не ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда 
			ДатаПрогноза = НачалоДня(ДатаСоСмещением(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
				ВариантАнализа.ПериодичностьРасчетаПоказателя, 1));
			
			СтрокаПрогнозногоПериода = ДанныеДляСравненияПериодов.Добавить();
			СтрокаПрогнозногоПериода.ПериодСравнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Прогноз на %1'"),
				Формат(ДатаПрогноза, "ДЛФ=D;")); 
			СтрокаПрогнозногоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.Данные.Найти(ДатаПрогноза, "Период").Прогноз; 
			СтрокаПрогнозногоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение; 
			СтрокаПрогнозногоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение; 
			СтрокаПрогнозногоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение; 
			
		КонецЕсли;
		
		ИсточникДанных.Данные = ДанныеДляСравненияПериодов;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПоПериодам(ИсточникДанных, ПараметрыРасчета)
	НесколькоЗначений = (ПараметрыРасчета.РежимПокомпонентногоСравнения = 1);
	
	ИменаПолейСвертки = "Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение";
	ИменаПолейСвертки = ИменаПолейСвертки + ", ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение";
		
	ДанныеПоПериодам = ИсточникДанных.Данные.Скопировать();
	ДанныеПоПериодам.Свернуть(ИменаПолейСвертки, ПараметрыРасчета.ЗначениеАнализаИмяПоля);
		
	Если НесколькоЗначений Тогда
		
		ДанныеДопПоля = ИсточникДанных.Данные.Скопировать(); // ТаблицаЗначений - 
		ДанныеДопПоля.Свернуть(ИменаПолейСвертки, ПараметрыРасчета.ЗначениеАнализаДополнительноеИмяПоля);
		КолонкаТаблицы = ДанныеДопПоля.Колонки[ПараметрыРасчета.ЗначениеАнализаДополнительноеИмяПоля]; // КолонкаТаблицыЗначений - 
		КолонкаТаблицы.Имя = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
		
		// Перенесем данные дополнительного поля в колонку основного
		Для Каждого СтрокаДанныхДопПоля Из ДанныеДопПоля Цикл 
			НоваяДопСтрока = ДанныеПоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяДопСтрока, СтрокаДанныхДопПоля);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеПоПериодам.Сортировать("Период");
	
	Возврат ДанныеПоПериодам;
КонецФункции

Функция КонтрольКорректностиНастроекИДанных(ТипПроверяемогоОбъекта, ПроверяемыйОбъект, ИсточникДанных, ПараметрыРасчета)
	РезультатПроверки = Истина;
	
	ВариантАнализа = ПараметрыРасчета.ВариантАнализа; // СправочникСсылка.ВариантыАнализаЦелевыхПоказателей, СправочникОбъект.ВариантыАнализаЦелевыхПоказателей -
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа;
	ПериодичностьРасчетаПоказателя = ПараметрыРасчета.ПериодичностьРасчетаПоказателя;
		
	Если ТипПроверяемогоОбъекта = "СхемаКомпоновкиДанных"
		И ПроверяемыйОбъект = Неопределено Тогда
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Шаблон расчета не определен'");
		
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если ТипПроверяемогоОбъекта = "НастройкиМакетаКомпоновкиДанных"
		И ПроверяемыйОбъект.МакетКомпоновкиДанных = Неопределено Тогда
		
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = ПроверяемыйОбъект.ИнформацияОбОшибках;
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьРасчетаПоказателя, -1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если ТипПроверяемогоОбъекта = "РезультатПолученияДанных"
		И ПроверяемыйОбъект.Данные = Неопределено Тогда
		
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Неверный шаблон расчета: %1'"),
			ПроверяемыйОбъект.ИнформацияОбОшибках);
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания),
				ПериодичностьРасчетаПоказателя,
				-1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если ТипПроверяемогоОбъекта = "Данные" Тогда
		Если ПроверяемыйОбъект = Неопределено Тогда
			ИсточникДанных.Пустой = Истина;
			ИсточникДанных.ОшибкаРасчета = Истина;
			ИсточникДанных.ОписаниеОшибки = НСтр("ru='Неверный шаблон расчета'");
			
			СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
			СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
			СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания),
					ПериодичностьРасчетаПоказателя,
					-1);
			СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
			
			// Определим зоны анализа, статус, тренд
			СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
			ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
			
			РезультатПроверки = Ложь;
		ИначеЕсли Не ПроверяемыйОбъект = Неопределено 
			И (ИсточникДанныхПустойПоИтогам(ПроверяемыйОбъект) ИЛИ ПроверяемыйОбъект.Количество() = 0) Тогда 
			
			ИсточникДанных.Пустой = Истина;
			ИсточникДанных.ОшибкаРасчета = Истина;
			ИсточникДанных.ОписаниеОшибки = НСтр("ru='Недостаточно данных для отображения. 
				|Проверьте настройки варианта анализа.'");
			
			ИсточникДанных.Данные = Новый ТаблицаЗначений;
			
			СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
			СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
			СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьРасчетаПоказателя, -1);
			СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
			
			ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам,
				ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения),
				ВариантАнализа);
			
			// Определим зоны анализа, статус, тренд
			СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
			ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
			
			РезультатПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим актуальность бизнес-данных расчета.
	// Если расчеты не актуальны, например, нарушены последовательности - расчет останавливается.
	Если ТипПроверяемогоОбъекта = "АктуальностьРасчетов" Тогда
		КолонкаАктуальностиРасчетов = ИсточникДанных.Данные.Колонки.Найти("РасчетыАктуальны");
		Если Не КолонкаАктуальностиРасчетов = Неопределено Тогда
			ОтборПоАктуальности = Новый Структура("РасчетыАктуальны", Истина);
			НайденныеСтрокиАктуальности = ИсточникДанных.Данные.НайтиСтроки(ОтборПоАктуальности);
			
			Если НайденныеСтрокиАктуальности.Количество() > 0 Тогда
				ИсточникДанных.РасчетыАктуальны = Истина;
				ИсточникДанных.Данные.Удалить(НайденныеСтрокиАктуальности[0]);
			КонецЕсли;
			
			ОтборПоАктуальности = Новый Структура("РасчетыАктуальны", Ложь);
			НайденныеСтрокиНеАктуальности = ИсточникДанных.Данные.НайтиСтроки(ОтборПоАктуальности);
			
			Если НайденныеСтрокиНеАктуальности.Количество() > 0 Тогда
				ИсточникДанных.РасчетыАктуальны = Ложь;
				ИсточникДанных.Данные.Удалить(НайденныеСтрокиНеАктуальности[0]);
			КонецЕсли;
			
			Если Не ИсточникДанных.РасчетыАктуальны Тогда
				ИсточникДанных.Данные = Новый ТаблицаЗначений;
				ИсточникДанных.ОшибкаРасчета = Истина;
				ИсточникДанных.ОписаниеОшибки = НСтр("ru='Данные не актуальны'");
				
				СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
				СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
				СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания),
						ПериодичностьРасчетаПоказателя,
						-1);
				СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
				
				ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам,
					ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения),
					ВариантАнализа);
				
				// Определим зоны анализа, статус, тренд
				СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
				ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
				
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипПроверяемогоОбъекта = "ОбъектАнализа" 
		И ПроверяемыйОбъект = Неопределено Тогда
		
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Объект анализа не найден в шаблоне расчета'");
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания),
				ПериодичностьРасчетаПоказателя,
				-1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если ТипПроверяемогоОбъекта = "ЗначениеАнализа"
		И ПроверяемыйОбъект = Неопределено Тогда
		
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Значение анализа не найдено в шаблоне расчета'");
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания),
				ПериодичностьРасчетаПоказателя,
				-1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		РезультатПроверки = Ложь;
	КонецЕсли; 
	
	Если ТипПроверяемогоОбъекта = "ЗначениеАнализаДополнительное"
		И ПроверяемыйОбъект = Неопределено Тогда
		
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Дополнительное значение анализа не найдено в шаблоне расчета'");
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания),
				ПериодичностьРасчетаПоказателя,
				-1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		РезультатПроверки = Ложь;
	КонецЕсли; 
	
	Возврат РезультатПроверки;
КонецФункции

Процедура ЗаполнитьЗоныАнализаИТренд(ИсточникДанных, ПараметрыРасчета)
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ПараметрыРасчета.ВариантАнализа, ИсточникДанных));
КонецПроцедуры

Процедура ДополнитьДанныеПрогнозом(ИсточникДанных, ПараметрыРасчета)
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа;
	ПериодичностьРасчетаПоказателя = ПараметрыРасчета.ПериодичностьРасчетаПоказателя;
	ЗначениеАнализаИмяПоля = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
	ГоризонтПрогноза = ПараметрыРасчета.ГоризонтПрогноза;
	ГлубинаАнализаПрогноза = ПараметрыРасчета.ГлубинаАнализаПрогноза;
	
	Если ПараметрыРасчета.ДобавлятьПрогноз Тогда
		// Добавим данные прогноза
		Если ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.Год Тогда
			ДатаНачала = НачалоГода(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза));
		ИначеЕсли ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.Полугодие Тогда
			ДатаНачала = ДатаСоСмещением(НачалоКвартала(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза)), Перечисления.Периодичность.Квартал, -1);
		ИначеЕсли ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.Квартал Тогда
			ДатаНачала = НачалоКвартала(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза));
		ИначеЕсли ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.Месяц Тогда
			ДатаНачала = НачалоМесяца(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза));
		ИначеЕсли ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.Декада Тогда
			ДатаНачала = ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза);
		ИначеЕсли ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.Неделя Тогда
			ДатаНачала = НачалоНедели(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза));
		ИначеЕсли ПериодичностьРасчетаПоказателя = Перечисления.Периодичность.День Тогда
			ДатаНачала = НачалоДня(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя, -ГоризонтПрогноза));
		КонецЕсли;
		
		ШагПериодов = 1;
		Базис = Новый Структура("ДатаНачала, Период, КоличествоПериодов", ДатаНачала, ПериодичностьРасчетаПоказателя, ШагПериодов);
		
		ПараметрыРасчетаПрогноза = Новый Структура; 
		
		ПараметрыРасчетаПрогноза.Вставить("КолонкаХ", "Период");
		ПараметрыРасчетаПрогноза.Вставить("КолонкаУ", ЗначениеАнализаИмяПоля);
		ПараметрыРасчетаПрогноза.Вставить("КолонкаПризнак", "Признак");
		ПараметрыРасчетаПрогноза.Вставить("Базис", Базис);
		
		ПараметрыРасчетаПрогноза.Вставить("ГлубинаАнализа", ГлубинаАнализаПрогноза);
		ПараметрыРасчетаПрогноза.Вставить("Смещение", ГоризонтПрогноза);
		ПараметрыРасчетаПрогноза.Вставить("ДополнятьТаблицу", Истина);
		ПараметрыРасчетаПрогноза.Вставить("Прогноз", Истина);
		
		СтатистическиеПараметрыТренда = СформироватьПрогнозныеЗначенияИсточникаДанных(ИсточникДанных, ПараметрыРасчетаПрогноза);
		
		// Заполним статистические свойства данных прогноза
		СвойстваПрогнозаДанныхПоПериодам = ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам;
		СвойстваПрогнозаДанныхПоПериодам.Периодичность = ПериодичностьРасчетаПоказателя;
		СвойстваПрогнозаДанныхПоПериодам.Смещение = ГоризонтПрогноза;
		СвойстваПрогнозаДанныхПоПериодам.ДатаНачала = ДатаНачала;
		СвойстваПрогнозаДанныхПоПериодам.КоличествоПериодов = ШагПериодов;
		СвойстваПрогнозаДанныхПоПериодам.Базис = Базис;
		СвойстваПрогнозаДанныхПоПериодам.ГлубинаАнализа = ГлубинаАнализаПрогноза;
		СвойстваПрогнозаДанныхПоПериодам.ДополнятьТаблицу = ПараметрыРасчетаПрогноза.ДополнятьТаблицу;
		СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = СтатистическиеПараметрыТренда;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСводнуюИнформациюОбИсточникеДанных(ИсточникДанных, ПараметрыРасчета)
	ВариантАнализа = ПараметрыРасчета.ВариантАнализа;
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа;
	ПериодСравнения = ПараметрыРасчета.ПериодСравнения;
	ПериодичностьРасчетаПоказателя = ПараметрыРасчета.ПериодичностьРасчетаПоказателя;
	ЗначениеАнализаИмяПоля = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
	ОбъектАнализаИмяПоля = ПараметрыРасчета.ОбъектАнализаИмяПоля;
	ЕстьСравнение = ПараметрыРасчета.ЕстьСравнение;
	ГоризонтПрогноза = ПараметрыРасчета.ГоризонтПрогноза;
	
	ДанныеПоПериодам = ДанныеПоПериодам(ИсточникДанных, ПараметрыРасчета);
	
	// Заполним сводную информацию по периодам
	СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
	СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
	КоличествоСтрокДанных = ДанныеПоПериодам.Количество();
	Если Не ПустаяСтрока(ДанныеПоПериодам[КоличествоСтрокДанных - 1 - ГоризонтПрогноза].Период) Тогда
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = ДанныеПоПериодам[КоличествоСтрокДанных - 1 - ГоризонтПрогноза].Период;
	КонецЕсли;
	Если КоличествоСтрокДанных > (1 + ГоризонтПрогноза) И Не ПустаяСтрока(ДанныеПоПериодам[КоличествоСтрокДанных - 2 - ГоризонтПрогноза].Период) Тогда
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДанныеПоПериодам[КоличествоСтрокДанных - 2 - ГоризонтПрогноза].Период;
	КонецЕсли;
	
	СтрокаСПоследнимиЗначениями = ДанныеПоПериодам.Найти(СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "Период");
	СвойстваДанныхПоПериодам.ПервоеЗначение = ДанныеПоПериодам[0][ЗначениеАнализаИмяПоля];
	
	СтрокаПредпоследнегоЗначения = ДанныеПоПериодам.Найти(СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения, "Период");
	Если Не СтрокаПредпоследнегоЗначения = Неопределено Тогда 
		СвойстваДанныхПоПериодам.ПредпоследнееЗначение = СтрокаПредпоследнегоЗначения[ЗначениеАнализаИмяПоля];
	Иначе
		СвойстваДанныхПоПериодам.ПредпоследнееЗначение = СтрокаСПоследнимиЗначениями[ЗначениеАнализаИмяПоля];
	КонецЕсли;
	
	СвойстваДанныхПоПериодам.ПоследнееЗначение = СтрокаСПоследнимиЗначениями[ЗначениеАнализаИмяПоля];
	СвойстваДанныхПоПериодам.ОбщийИтог = СвойстваДанныхПоПериодам.ПоследнееЗначение;
	
	// Заполним информацию о целевых значениях на последний период расчета
	ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, СтрокаСПоследнимиЗначениями, ВариантАнализа);
	
	// Заполним статистические свойства данных по периодам сравнения
	Если ЕстьСравнение Тогда
		СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
		СвойстваДанныхПоПериодамСравнения.ДатаПервогоЗначения = ПериодСравнения.ДатаНачала;
		СвойстваДанныхПоПериодамСравнения.ДатаПоследнегоЗначения = НачалоПериода(ПериодСравнения.ДатаОкончания, ПериодичностьРасчетаПоказателя);
		СвойстваДанныхПоПериодамСравнения.ДатаПредпоследнегоЗначения = ДатаСоСмещением(СвойстваДанныхПоПериодамСравнения.ДатаПоследнегоЗначения, ПериодичностьРасчетаПоказателя, -1);
		
		СтрокаСПоследнимиЗначениями = ДанныеПоПериодам.Найти(СвойстваДанныхПоПериодамСравнения.ДатаПоследнегоЗначения, "Период");
		
		СвойстваДанныхПоПериодамСравнения.ПервоеЗначение = ДанныеПоПериодам.Найти(СвойстваДанныхПоПериодамСравнения.ДатаПервогоЗначения, "Период")[ЗначениеАнализаИмяПоля];
		СвойстваДанныхПоПериодамСравнения.ПоследнееЗначение = СтрокаСПоследнимиЗначениями[ЗначениеАнализаИмяПоля];
		СвойстваДанныхПоПериодамСравнения.ОбщийИтог = СвойстваДанныхПоПериодамСравнения.ПоследнееЗначение;
		
		ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодамСравнения, СтрокаСПоследнимиЗначениями, ВариантАнализа);
	КонецЕсли;
	
	// Заполним свойства общей статистики
	СвойстваОбщейСтатистики = ИсточникДанных.СвойстваОбщейСтатистики;
	ОбщаяСтатистикаПоПериодам = ОбщаяСтатистикаИсточникаДанных(ДанныеПоПериодам);
		
	ЗаполнитьЗначенияСвойств(СвойстваОбщейСтатистики.ПоПериодам, ОбщаяСтатистикаПоПериодам.НепрерывныеПоля[ЗначениеАнализаИмяПоля]);
	
	Если (ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ПокомпонентноеСравнение
		Или ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ПокомпонентноеСравнениеДинамика)
		И ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
		
		// Удалим данные для статистики по периоду
		Если ИсточникДанных.Данные.Количество() > 1 Тогда
			ОтборПоПустомуОбъектуАнализа = Новый Структура(ОбъектАнализаИмяПоля, Неопределено);
			НайденныеСтроки = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПустомуОбъектуАнализа);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				ИсточникДанных.Данные.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
			ОтборПоПустомуОбъектуАнализа = Новый Структура(ОбъектАнализаИмяПоля, "");
			НайденныеСтроки = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПустомуОбъектуАнализа);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				ИсточникДанных.Данные.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеПоОбъектамАнализа = ИсточникДанных.Данные.Скопировать();
		ДанныеПоОбъектамАнализа.Колонки.Удалить("Период");
		
		// Заполним статистические свойства данных по объектам анализа
		КолонкаЗначенияПоказателя = ДанныеПоОбъектамАнализа.Колонки[ЗначениеАнализаИмяПоля];
		РазрядностьДробнойЧасти = КолонкаЗначенияПоказателя.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
		ОбщаяСтатистика = ОбщаяСтатистикаИсточникаДанных(ДанныеПоОбъектамАнализа);
		
		НепрерывноеПоле = ОбщаяСтатистика.НепрерывныеПоля[ЗначениеАнализаИмяПоля]; // ИнформацияНепрерывногоПоляАнализаДанных -
		МаксимальноеЗначение = Окр(НепрерывноеПоле.Максимум, РазрядностьДробнойЧасти);
		СтрокаСМаксимальнымЗначением = ДанныеПоОбъектамАнализа.Найти(МаксимальноеЗначение, ЗначениеАнализаИмяПоля);
		
		МинимальноеЗначение = Окр(НепрерывноеПоле.Минимум, РазрядностьДробнойЧасти);
		СтрокаСМинимальнымЗначением = ДанныеПоОбъектамАнализа.Найти(МинимальноеЗначение, ЗначениеАнализаИмяПоля);
		
		СвойстваДанныхПоОбъектамАнализа = ИсточникДанных.СвойстваДанныхПоОбъектамАнализа;
		Если Не СтрокаСМаксимальнымЗначением = Неопределено Тогда
			СвойстваДанныхПоОбъектамАнализа.ОбъектАнализаМаксимум = СтрокаСМаксимальнымЗначением[ОбъектАнализаИмяПоля];
		КонецЕсли;
		Если Не СтрокаСМинимальнымЗначением = Неопределено Тогда
			СвойстваДанныхПоОбъектамАнализа.ОбъектАнализаМинимум = СтрокаСМинимальнымЗначением[ОбъектАнализаИмяПоля];
		КонецЕсли;
		СвойстваДанныхПоОбъектамАнализа.МаксимальноеЗначение = МаксимальноеЗначение;
		СвойстваДанныхПоОбъектамАнализа.МинимальноеЗначение = МинимальноеЗначение;
		
		ЗаполнитьЗначенияСвойств(СвойстваОбщейСтатистики.ПоОбъектамАнализа, НепрерывноеПоле);
	КонецЕсли;
КонецПроцедуры

Процедура СвернутьДанные(ИсточникДанных, ПараметрыРасчета)
	Если ПараметрыРасчета.ВариантОтображения = ПараметрыРасчета.ВариантыОтображения.Таблица Тогда
		ИсточникДанных.Данные.Свернуть(ПараметрыРасчета.ОбъектАнализаИмяПоля + 
			", Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", 
			ПараметрыРасчета.ЗначениеАнализаИмяПоля);
	ИначеЕсли ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ПокомпонентноеСравнениеДинамика
		Или ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ПокомпонентноеСравнение Тогда
		
		Если ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
			ОтборПоПустымПериодам = Новый Структура("Период", Неопределено);
			НайденныеПустыеПериоды = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПустымПериодам);
			
			Для Каждого СтрокаСПустымПериодом Из НайденныеПустыеПериоды Цикл 
				ИсточникДанных.Данные.Удалить(СтрокаСПустымПериодом);
			КонецЦикла;
			
			#Область ОбходСхлопыванияТаблицыПериодов
			// Обход "схлопывания" таблицы периодов в вложенной группировке
			Если ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда // По аналитике
				ОтборыВспомогательныхПериодов = Новый Структура(ПараметрыРасчета.ОбъектАнализаИмяПоля, Неопределено);
				НайденныеВспомогательныеПериоды = ИсточникДанных.Данные.НайтиСтроки(ОтборыВспомогательныхПериодов);
				
				Для Каждого СтрокаВспомогательногоПериода Из НайденныеВспомогательныеПериоды Цикл 
					ОтборыСтрокПоПериоду = Новый Структура("Период", СтрокаВспомогательногоПериода.Период);
					НайденныеДанные = ИсточникДанных.Данные.НайтиСтроки(ОтборыСтрокПоПериоду);
					
					Для Каждого СтрокаДанных Из НайденныеДанные Цикл 
						ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаВспомогательногоПериода,
							"Период, 
							|ЦелевоеЗначение, 
							|ЦелевойДиапазонМаксимум, 
							|ЦелевойДиапазонМинимум, 
							|ГраничноеПозитивноеОтклонение, 
							|ГраничноеНегативноеОтклонение, 
							|ПриведенноеГраничноеПозитивноеОтклонение, 
							|ПриведенноеГраничноеНегативноеОтклонение");
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого СтрокаВспомогательногоПериода Из НайденныеВспомогательныеПериоды Цикл 
					ИсточникДанных.Данные.Удалить(СтрокаВспомогательногоПериода);
				КонецЦикла;
			КонецЕсли;
			#КонецОбласти
		КонецЕсли;
		
		Если ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
			ИсточникДанных.Данные.Свернуть(ПараметрыРасчета.ОбъектАнализаИмяПоля + 
				", Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", 
				ПараметрыРасчета.ЗначениеАнализаИмяПоля);
		Иначе
			ИсточникДанных.Данные.Свернуть("Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", 
				ПараметрыРасчета.ЗначениеАнализаИмяПоля + ", " + ПараметрыРасчета.ЗначениеАнализаДополнительноеИмяПоля);
		КонецЕсли;
	Иначе
		ИсточникДанных.Данные.Свернуть(
			"Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", 
			ПараметрыРасчета.ЗначениеАнализаИмяПоля);
	КонецЕсли;
КонецПроцедуры

Функция РезультатПолученияДанных(МакетКомпоновкиДанных, ТаблицаПериодов)
	РезультатПолученияДанных = Новый Структура("Данные, ИнформацияОбОшибках");
	Данные = Неопределено;
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПериодов", ТаблицаПериодов);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Попытка
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных,, Истина);
	Исключение
		РезультатПолученияДанных.ИнформацияОбОшибках = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат РезультатПолученияДанных;
	КонецПопытки; 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Попытка
		Данные = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		РезультатПолученияДанных.ИнформацияОбОшибках = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат РезультатПолученияДанных;
	КонецПопытки;
	
	РезультатПолученияДанных.Данные = Данные;
	
	Возврат РезультатПолученияДанных;
КонецФункции

Функция НастройкиМакетаКомпоновкиДанныхДляРасчета(СхемаКомпоновкиДанных, КомпоновщикНастроек)
	НастройкиМакетаКомпоновкиДанных = Новый Структура("МакетКомпоновкиДанных, ИнформацияОбОшибках");
	МакетКомпоновкиДанных = Неопределено;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
	Исключение
		НастройкиМакетаКомпоновкиДанных.ИнформацияОбОшибках = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат НастройкиМакетаКомпоновкиДанных;
	КонецПопытки;
	
	// Установим связь внешней, чтобы все данные таблицы периодов попали в результат
	СвязиНаборовДанных = МакетКомпоновкиДанных.СвязиНаборовДанных;
	Для Каждого СвязьНабораДанных Из СвязиНаборовДанных Цикл 
		Если СвязьНабораДанных.НаборДанныхИсточник = "ТаблицаПериодов"
			И СвязьНабораДанных.НаборДанныхПриемник = "ДанныеДляАнализа" Тогда
			СвязьНабораДанных.ТипСвязи = ТипСвязиНаборовДанныхКомпоновкиДанных.Внешняя;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим корректность СКД
	РезультатПроверкиСхемыКомпоновкиДанных = ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных);
	Если Не РезультатПроверкиСхемыКомпоновкиДанных.МакетКорректный Тогда
		МакетКомпоновкиДанных = Неопределено;
		
		Для Каждого ОписаниеОшибки Из РезультатПроверкиСхемыКомпоновкиДанных.ОписаниеОшибок Цикл 
			НастройкиМакетаКомпоновкиДанных.ИнформацияОбОшибках = Строка(НастройкиМакетаКомпоновкиДанных.ИнформацияОбОшибках) + ОписаниеОшибки + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиМакетаКомпоновкиДанных.МакетКомпоновкиДанных = МакетКомпоновкиДанных;
	
	Возврат НастройкиМакетаКомпоновкиДанных;
КонецФункции

Функция КомпоновщикНастроекДляРасчета(СхемаКомпоновкиДанных, ПараметрыРасчета, ДинамическиеПараметры)
	Адреса = ПараметрыРасчета.Адреса;
	
	Если Не Адреса.НастройкиКомпоновкиДанных = Неопределено Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Адреса.НастройкиКомпоновкиДанных);
	Иначе
		НастройкиКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Если Не Адреса.ПользовательскиеНастройки = Неопределено Тогда 
		ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(Адреса.ПользовательскиеНастройки);
	Иначе
		ПользовательскиеНастройки = Неопределено;
	КонецЕсли;
	
	URLСхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	НовыйИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемаКомпоновкиДанных);
	
	// Восстановим пользовательские настройки отборов
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(НовыйИсточникДоступныхНастроек);
	Если Не НастройкиКомпоновкиДанных = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Если Не ПользовательскиеНастройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;
	
	// Проверим, что можно применять нарастающий итог для компоновки
	Если Не КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НарастающимИтогом") = Неопределено Тогда
		СхемаКомпоновкиДанных.Параметры.НарастающимИтогом.Значение = ПараметрыРасчета.ЕстьНарастающийИтог;
	Иначе 
		ПараметрыРасчета.ЕстьНарастающийИтог = Ложь;
	КонецЕсли;
	
	// Установим значения параметров валюты
	УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, Истина);
	
	ПрименитьНастройкиВариантаОтображения(КомпоновщикНастроек, ПараметрыРасчета, ДинамическиеПараметры);
	
	Возврат КомпоновщикНастроек;
КонецФункции

// Процедура устанавливает связанные параметры валюты расчета отчета
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ПользовательскиеНастройкиМодифицированы - Булево - обязательный к установке признак модификации польз. настроек отчета.
//
Процедура УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы)
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеРасчета");
	Если ПараметрДанныеОтчета <> Неопределено Тогда
		ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
		БазоваяВалютаПоУмолчанию = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	
		ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВалютаРасчета");
		Если ПараметрВалюта <> Неопределено Тогда
			Если ПараметрДанныеОтчета.Значение = 1
				ИЛИ ПараметрДанныеОтчета.Значение = 2 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРасчета", ВалютаУправленческогоУчета);
			ИначеЕсли ПараметрДанныеОтчета.Значение = 3 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРасчета", БазоваяВалютаПоУмолчанию);
			ИначеЕсли ПараметрДанныеОтчета.Значение = 0 Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВалютаРасчета", Справочники.Валюты.ПустаяСсылка());
			КонецЕсли;
				
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



// Возвращает схему компоновки для расчета целевого показателя.
// 
// Параметры:
// 	ПараметрыРасчета - См. ПараметрыРасчета
// Возвращаемое значение:
// 	СхемаКомпоновкиДанных - схема компоновки.
Функция СхемаКомпоновкиДанныхДляРасчета(ПараметрыРасчета)
	// Получение схемы с проверкой на ее корректность и существование.
	// Если схема не определена, расчет останавливается.
	ВариантАнализа = ПараметрыРасчета.ВариантАнализа; // Структура -
	ПериодичностьРасчетаПоказателя = ПараметрыРасчета.ПериодичностьРасчетаПоказателя; // ПеречислениеСсылка.Периодичность - 
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа;
	ПериодСравнения = ПараметрыРасчета.ПериодСравнения;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыРасчета.Адреса.СхемаКомпоновкиДанных); // СхемаКомпоновкиДанных -
	
	Если Не СхемаКомпоновкиДанных = Неопределено Тогда
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных, "ВариантАнализа", ВариантАнализа);
		
		// Настройка параметров схемы, связанных с интервалом расчета значений и периода показателя.
		ПривестиВыраженияПолейИтоговКУказаннойТочности(СхемаКомпоновкиДанных, ВариантАнализа.КратностьЗначений,
			ВариантАнализа.ТочностьРасчетаДробнойЧасти);
		УстановитьПериодВыраженийПолейИтогов(СхемаКомпоновкиДанных, ПериодичностьРасчетаПоказателя);
		
		// Для показателей, где используется период сравнения, установим его значение
		ПараметрПериодСравнения = КомпоновкаДанныхСервер.ПолучитьПараметрСКД(СхемаКомпоновкиДанных, "ПериодСравнения");
		Если ПараметрПериодСравнения <> Неопределено Тогда
			КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
					"ПериодСравнения",
					ПериодСравнения);
			КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
					"НачалоПериодаСравнения",
					ПериодСравнения.ДатаНачала);
			КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
					"КонецПериодаСравнения",
					ПериодСравнения.ДатаОкончания);
		КонецЕсли;
		
		Если ПараметрыРасчета.ДобавлятьПрогноз Тогда
			ПериодАнализа.ДатаОкончания = ДатаСоСмещением(ПериодАнализа.ДатаОкончания,
					ПериодичностьРасчетаПоказателя,
					ПараметрыРасчета.ГоризонтПрогноза);
		КонецЕсли;
		
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
				"Период",
				ПериодАнализа);
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
				"НачалоПериода",
				ПериодАнализа.ДатаНачала);
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
				"КонецПериода",
				ПериодАнализа.ДатаОкончания);
		ЗначениеПараметра = ?(ЗначениеЗаполнено(ПериодСравнения.ДатаНачала),
			Мин(ПериодСравнения.ДатаНачала, ПериодАнализа.ДатаНачала),
			ПериодАнализа.ДатаНачала);
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
				"ПриведенноеНачалоПериода",
				ЗначениеПараметра);
		
		// Установим связи наборов данных по периоду
		Если СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета") = Неопределено
			ИЛИ (НЕ СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета") = Неопределено
			И Не СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета").Значение) Тогда
			СвязиНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных;
			Для Каждого СвязьНаборовДанных Из СвязиНаборовДанных Цикл 
				Если СвязьНаборовДанных.НаборДанныхПриемник = "ДанныеДляАнализа" Тогда 
					Если СтрНайти(СвязьНаборовДанных.ВыражениеИсточник, "Период") Тогда
						СвязьНаборовДанных.ВыражениеПриемник =
							ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(ПериодичностьРасчетаПоказателя).Период;
					КонецЕсли;
				ИначеЕсли СвязьНаборовДанных.НаборДанныхПриемник = "ЦелевыеЗначения" Тогда 
					СвязьНаборовДанных.ВыражениеИсточник = СтрШаблон("КОНЕЦПЕРИОДА(Период, ""%1"")",
						ВРег(ПолучитьИмяЗначенияПеречисления(ПериодичностьРасчетаПоказателя)));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Не СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета") = Неопределено
			И СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета").Значение Тогда
			СвязиНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных;
			Для Каждого СвязьНаборовДанных Из СвязиНаборовДанных Цикл 
				Если СтрНайти(СвязьНаборовДанных.ВыражениеИсточник, "Период") Тогда
					СвязьНаборовДанных.ВыражениеИсточник = СтрШаблон("КОНЕЦПЕРИОДА(Период, ""%1"")",
						ВРег(ПолучитьИмяЗначенияПеречисления(ПериодичностьРасчетаПоказателя)));
					СвязьНаборовДанных.ВыражениеПриемник = СтрШаблон("КОНЕЦПЕРИОДА(ДатаРасчета, ""%1"")",
						ВРег(ПолучитьИмяЗначенияПеречисления(ПериодичностьРасчетаПоказателя)));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции


// Описание
// 
// Параметры:
// 	ВариантАнализа - Структура - реквизиты варианта анализа
// 	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - Описание
// 	ДинамическиеПараметры - Структура, Произвольный, Неопределено - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ЗначениеАнализаДополнительноеИмяПоля - Строка, Неопределено -
// * ЗначениеАнализаДополнительноеПоле - ПолеКомпоновкиДанных, Произвольный, Неопределено -
// * ЗначениеАнализаИмяПоля - Строка, Неопределено -
// * ЗначениеАнализаПоле - ПолеКомпоновкиДанных, Произвольный, Неопределено -
// * ОбъектАнализаИмяПоля - Строка, Неопределено -
// * ОбъектАнализаПоле - ПолеКомпоновкиДанных, Произвольный, Неопределено -
// * Адреса - Структура -:
// ** СхемаКомпоновкиДанных - Строка - Адрес временного хранилища схемы компоновки.
// ** НастройкиКомпоновкиДанных - Строка - Адрес временного хранилища настроек компоновки.
// ** ПользовательскиеНастройки - Строка - Адрес временного хранилища пользовательских настроек.
// * ГлубинаАнализаПрогноза - Число -
// * ГоризонтПрогноза - Число -
// * ДобавлятьПрогноз - Булево -
// * ПериодичностьРасчетаПоказателя - ПеречислениеСсылка.Периодичность -
// * РежимПокомпонентногоСравнения - Число -
// * ДляТаблицы - Булево -
// * РассчитыватьПрогноз - Булево -
// * ЕстьНарастающийИтог - Булево -
// * ЕстьСравнение - Булево -
// * ПериодСравнения - СтандартныйПериод -
// * ПериодАнализа - СтандартныйПериод -
// * МетодыРасчета - ПеречислениеМенеджер.МетодыРасчетаВариантовАнализаЦелевыхПоказателей -
// * ТипДиаграммы - ПеречислениеСсылка.ТипыДиаграммПоказателей -
// * ТипАнализа - ПеречислениеСсылка.ТипыАнализаПоказателей -
// * ТипыАнализа - ПеречислениеМенеджер.ТипыАнализаПоказателей -
// * ВариантыОтображения - ПеречислениеМенеджер.ВариантыОтображенияВариантовАнализа -
Функция ПараметрыРасчета(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры)
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ВариантАнализа", ВариантАнализа);
	
	ПараметрыРасчета.Вставить("ВариантыОтображения", Перечисления.ВариантыОтображенияВариантовАнализа);
	ПараметрыРасчета.Вставить("ВариантОтображения", ВариантОтображения);
	ПараметрыРасчета.Вставить("ТипыАнализа", Перечисления.ТипыАнализаПоказателей);
	ПараметрыРасчета.Вставить("ТипАнализа", ВариантАнализа.ТипАнализа);
	ПараметрыРасчета.Вставить("ТипДиаграммы", ВариантАнализа.ТипДиаграммы);
	ПараметрыРасчета.Вставить("МетодыРасчета", Перечисления.МетодыРасчетаВариантовАнализаЦелевыхПоказателей);
	ПараметрыРасчета.Вставить("ПериодАнализа", ВариантАнализа.ПериодАнализа.Получить());
	ПараметрыРасчета.Вставить("ПериодСравнения", ВариантАнализа.ПериодСравнения.Получить());
	ПараметрыРасчета.Вставить("ЕстьСравнение", Ложь);
	ПараметрыРасчета.Вставить("ЕстьНарастающийИтог", ВариантАнализа.МетодРасчетаЗначений = ПараметрыРасчета.МетодыРасчета.СуммаНарастающимИтогом);
	ПараметрыРасчета.Вставить("РассчитыватьПрогноз", Ложь);
	ПараметрыРасчета.Вставить("ДляТаблицы", Ложь);
	ПараметрыРасчета.Вставить("РежимПокомпонентногоСравнения", ВариантАнализа.РежимПокомпонентногоСравнения);
	
	// Получим настройки периодичности
	Если Не ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ПериодичностьРасчетаПоказателя") Тогда
		ПериодичностьРасчетаПоказателя = ДинамическиеПараметры.ПериодичностьРасчетаПоказателя;
	Иначе
		ПериодичностьРасчетаПоказателя = ВариантАнализа.ПериодичностьРасчетаПоказателя;
	КонецЕсли;
	ПараметрыРасчета.Вставить("ПериодичностьРасчетаПоказателя", ПериодичностьРасчетаПоказателя);
	
	// Уточним настройки расчета
	Если ПараметрыРасчета.ВариантОтображения = ПараметрыРасчета.ВариантыОтображения.Диаграмма Тогда 
		Если ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.ДинамикаИзменения Тогда
			ПараметрыРасчета.РассчитыватьПрогноз = Истина;
		ИначеЕсли ПараметрыРасчета.ТипАнализа = ПараметрыРасчета.ТипыАнализа.СравнениеСПрошлымПериодом Тогда
			ПараметрыРасчета.ЕстьСравнение = Истина;
			ПараметрыРасчета.РассчитыватьПрогноз = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыРасчета.ВариантОтображения = ПараметрыРасчета.ВариантыОтображения.Таблица Тогда 
		ПараметрыРасчета.ДляТаблицы = Истина;
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("ДобавлятьПрогноз", ПараметрыРасчета.РассчитыватьПрогноз И ВариантАнализа.РассчитыватьПрогноз);
	ПараметрыРасчета.Вставить("ГоризонтПрогноза", ?(ПараметрыРасчета.ДобавлятьПрогноз, ВариантАнализа.ГоризонтПрогноза, 0));
	ПараметрыРасчета.Вставить("ГлубинаАнализаПрогноза", ВариантАнализа.ГлубинаАнализаПрогноза);
	ПараметрыРасчета.Вставить("Адреса", Справочники.ВариантыАнализаЦелевыхПоказателей.АдресаСхемыКомпоновкиДанныхИПользовательскихНастроек(ВариантАнализа));
	
	// Получим настройки полей варианта анализа
	Если Не ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ОбъектАнализа") Тогда
		ОбъектАнализаПоле = Новый ПолеКомпоновкиДанных(ДинамическиеПараметры.ОбъектАнализа);
		ОбъектАнализаИмяПоля = ДинамическиеПараметры.ОбъектАнализа;
	Иначе
		Если ТипЗнч(ВариантАнализа.ОбъектАнализа) = Тип("Строка") Тогда
			ОбъектАнализаПоле = Новый ПолеКомпоновкиДанных(ВариантАнализа.ОбъектАнализа);
		ИначеЕсли ВариантАнализа.ОбъектАнализа = Неопределено Тогда
			ОбъектАнализаПоле = Неопределено;
		Иначе
			ОбъектАнализаПоле = ВариантАнализа.ОбъектАнализа.Получить();
		КонецЕсли;
		
		Если Не ОбъектАнализаПоле = Неопределено Тогда
			ОбъектАнализаИмяПоля = Строка(ОбъектАнализаПоле);
		Иначе
			ОбъектАнализаИмяПоля = Неопределено;
		КонецЕсли;
	КонецЕсли;
	ПараметрыРасчета.Вставить("ОбъектАнализаПоле", ОбъектАнализаПоле);
	ПараметрыРасчета.Вставить("ОбъектАнализаИмяПоля", ОбъектАнализаИмяПоля);
	
	Если ТипЗнч(ВариантАнализа.ЗначениеАнализа) = Тип("Строка") Тогда
		ЗначениеАнализаПоле = Новый ПолеКомпоновкиДанных(ВариантАнализа.ЗначениеАнализа);
	ИначеЕсли ВариантАнализа.ЗначениеАнализа = Неопределено Тогда
		ЗначениеАнализаПоле = Неопределено;
	Иначе
		ЗначениеАнализаПоле = ВариантАнализа.ЗначениеАнализа.Получить();
	КонецЕсли;
	Если Не ЗначениеАнализаПоле = Неопределено Тогда
		ЗначениеАнализаИмяПоля = Строка(ЗначениеАнализаПоле);
	Иначе
		ЗначениеАнализаИмяПоля = Неопределено;
	КонецЕсли;
	ПараметрыРасчета.Вставить("ЗначениеАнализаПоле", ЗначениеАнализаПоле);
	ПараметрыРасчета.Вставить("ЗначениеАнализаИмяПоля", ЗначениеАнализаИмяПоля);
	
	Если ТипЗнч(ВариантАнализа.ЗначениеАнализаДополнительное) = Тип("Строка") Тогда
		ЗначениеАнализаДополнительноеПоле = Новый ПолеКомпоновкиДанных(ВариантАнализа.ЗначениеАнализаДополнительное);
	ИначеЕсли ВариантАнализа.ЗначениеАнализаДополнительное = Неопределено Тогда
		ЗначениеАнализаДополнительноеПоле = Неопределено;
	Иначе
		ЗначениеАнализаДополнительноеПоле = ВариантАнализа.ЗначениеАнализаДополнительное.Получить();
	КонецЕсли;
	Если Не ЗначениеАнализаДополнительноеПоле = Неопределено Тогда
		ЗначениеАнализаДополнительноеИмяПоля = Строка(ЗначениеАнализаДополнительноеПоле);
	Иначе
		ЗначениеАнализаДополнительноеИмяПоля = Неопределено;
	КонецЕсли;
	ПараметрыРасчета.Вставить("ЗначениеАнализаДополнительноеПоле", ЗначениеАнализаДополнительноеПоле);
	ПараметрыРасчета.Вставить("ЗначениеАнализаДополнительноеИмяПоля", ЗначениеАнализаДополнительноеИмяПоля);
	
	Возврат ПараметрыРасчета;
КонецФункции

Функция ПолучитьИсточникДанныхВариантаАнализаИзКэша(ВариантАнализа, ВариантОтображения)
	
	ИсточникДанных = Неопределено; 
	
	ПериодВМинутах = ПериодАктуальностиРасчетаВМинутах(ВариантАнализа);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("ВариантОтображения", ВариантОтображения);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодАктуальностиРасчета", ПериодВМинутах);
	Запрос.Текст = ТекстЗапросаДанныхВариантаАнализаВКэше();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ИсточникДанных = Выборка.ИсточникДанных.Получить();
		ИсточникДанных.ДатаРасчета = Выборка.ДатаРасчета;
		ИсточникДанных.ДанныеАктуальны = Выборка.ДанныеАктуальны;
		
	КонецЕсли;
	
	Возврат ИсточникДанных;
	
КонецФункции

Функция ПорядокЗоныВнимания(ЗонаВнимания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗонаВнимания);
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗоныВниманияВариантовАнализа.Порядок КАК Порядок
		|ИЗ
		|	Перечисление.ЗоныВниманияВариантовАнализа КАК ЗоныВниманияВариантовАнализа
		|ГДЕ
		|	ЗоныВниманияВариантовАнализа.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Порядок;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПривестиВыраженияПолейИтоговКУказаннойТочности(СхемаКомпоновки, ВидПредставленияЧисла, Разрядность)
	
	ПоляИтогов = СхемаКомпоновки.ПоляИтога;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	ЗнаменательТребуется = Ложь;
	
	Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		Знаменатель = Формат(Pow(10, 3), "ЧГ=0;");
		ЗнаменательТребуется = Истина;
	ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		Знаменатель = Формат(Pow(10, 6), "ЧГ=0;");
		ЗнаменательТребуется = Истина;
	КонецЕсли;
	
	ШаблонВыраженияЧисла = "Число(31, %1)";
	ВыражениеЧисла = """" + СтрШаблон(ШаблонВыраженияЧисла, Разрядность) + """";
	
	Если ЗнаменательТребуется Тогда
		ШаблонСУчетомЗнаменателя = "ВЫРАЗИТЬ((%1) / %3, %2)";
	Иначе
		ШаблонСУчетомЗнаменателя = "ВЫРАЗИТЬ((%1), %2)";
	КонецЕсли;
	
	Для Каждого ПолеИтога Из ПоляИтогов Цикл 
		Если ПолеИтога.ПутьКДанным = "ГраничноеПозитивноеОтклонение"
			ИЛИ ПолеИтога.ПутьКДанным = "ГраничноеНегативноеОтклонение" Тогда
			
			ЧастьВыражения = СтрШаблон(ШаблонСУчетомЗнаменателя,
				ПолеИтога.Выражение, ВыражениеЧисла, Знаменатель);
			
			ПолеИтога.Выражение = СтрШаблон(
				"ВЫБОР
				|	КОГДА ВидОтклоненияОтЦелевогоЗначения = ЗНАЧЕНИЕ(Перечисление.ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное)
				|		ТОГДА %1
				|		ИНАЧЕ %2
				|КОНЕЦ",
				ЧастьВыражения, ПолеИтога.Выражение);
		Иначе
			ПолеИтога.Выражение = СтрШаблон(ШаблонСУчетомЗнаменателя,
				ПолеИтога.Выражение, ВыражениеЧисла, Знаменатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкиВариантаОтображения(КомпоновщикНастроек, ПараметрыРасчета, ДинамическиеПараметры = Неопределено)
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ТипыАнализаПоказателей = Перечисления.ТипыАнализаПоказателей;
	
	ВариантАнализа = ПараметрыРасчета.ВариантАнализа; // Структура -
	ВариантОтображения = ПараметрыРасчета.ВариантОтображения;
	
	ТипАнализа = ВариантАнализа.ТипАнализа;
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа; // СтандартныйПериод -
	ПериодСравнения = ПараметрыРасчета.ПериодСравнения; // СтандартныйПериод -
	
	Если ТипАнализа = ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		ПриведенноеНачалоПериода = Мин(ПериодАнализа.ДатаНачала, ПериодСравнения.ДатаНачала);
		ПриведенноеОкончаниеПериода = Макс(ПериодАнализа.ДатаОкончания, ПериодСравнения.ДатаОкончания);
	Иначе
		ПриведенноеНачалоПериода = ПериодАнализа.ДатаНачала;
		ПриведенноеОкончаниеПериода = ПериодАнализа.ДатаОкончания;
	КонецЕсли;
	ИмяПериодичности = ПолучитьИмяЗначенияПеречисления(ПараметрыРасчета.ПериодичностьРасчетаПоказателя);
	
	// Получим настройки полей варианта анализа
	Если Не ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ОбъектАнализа") Тогда
		ОбъектАнализаПоле = Новый ПолеКомпоновкиДанных(ДинамическиеПараметры.ОбъектАнализа);
		ОбъектАнализаИмяПоля = ДинамическиеПараметры.ОбъектАнализа;
	Иначе
		ОбъектАнализаПоле = ПараметрыРасчета.ОбъектАнализаПоле;
		Если Не ОбъектАнализаПоле = Неопределено Тогда
			ОбъектАнализаИмяПоля = Строка(ОбъектАнализаПоле);
		Иначе
			ОбъектАнализаИмяПоля = Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	ЗначениеАнализаПоле = ПараметрыРасчета.ЗначениеАнализаПоле;
		
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	ПараметрыГруппировкиПериода = Новый Структура("НачалоПериода, КонецПериода, ТипГруппировки, ТипДополнения"); 
	ПараметрыГруппировкиПериода.Вставить("НачалоПериода", ПриведенноеНачалоПериода);
	ПараметрыГруппировкиПериода.Вставить("КонецПериода", ПриведенноеОкончаниеПериода);
	ПараметрыГруппировкиПериода.Вставить("ТипДополнения", ТипДополненияПериодаКомпоновкиДанных[ИмяПериодичности]);
	
	Если ВариантОтображения = ВариантыОтображенияВариантовАнализа.Диаграмма
		ИЛИ ВариантОтображения = ВариантыОтображенияВариантовАнализа.Кратко Тогда
		Если ТипАнализа = ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек,
			                                                 "Период",,
			                                                 ПараметрыГруппировкиПериода);
			
			УстановитьУпорядочиваниеГруппировки(КомпоновщикНастроек.Настройки, 
				Новый ПолеКомпоновкиДанных("Период"), 
				НаправлениеСортировкиКомпоновкиДанных.Возр,
				Ложь, Ложь);
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
			Если ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
			КонецЕсли;
			
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек,
			                                                 "Период",,
			                                                 ПараметрыГруппировкиПериода);
			
			УстановитьУпорядочиваниеГруппировки(КомпоновщикНастроек.Настройки, 
				Новый ПолеКомпоновкиДанных("Период"), 
				НаправлениеСортировкиКомпоновкиДанных.Возр,
				Ложь, Ложь);
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
			Если ПараметрыРасчета.РежимПокомпонентногоСравнения = 0 Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
			КонецЕсли;
			
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек,
			                                                                 "Период",
			                                                                 ПараметрыГруппировкиПериода);
			
			УстановитьУпорядочиваниеГруппировки(КомпоновщикНастроек.Настройки, 
				Новый ПолеКомпоновкиДанных("Период"), 
				НаправлениеСортировкиКомпоновкиДанных.Возр,
				Ложь, Ложь);
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек,
			                                                 "Период",,
			                                                 ПараметрыГруппировкиПериода);
			
			УстановитьУпорядочиваниеГруппировки(КомпоновщикНастроек.Настройки, 
				Новый ПолеКомпоновкиДанных("Период"), 
				НаправлениеСортировкиКомпоновкиДанных.Возр,
				Ложь, Ложь);
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек,
			                                                 "Период",,
			                                                 ПараметрыГруппировкиПериода);
			
			УстановитьУпорядочиваниеГруппировки(КомпоновщикНастроек.Настройки, 
				Новый ПолеКомпоновкиДанных("Период"), 
				НаправлениеСортировкиКомпоновкиДанных.Возр,
				Ложь, Ложь);
		КонецЕсли;
	ИначеЕсли ВариантОтображения = ВариантыОтображенияВариантовАнализа.Таблица Тогда 
		КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек,
		                                                                 "Период",
		                                                                 ПараметрыГруппировкиПериода);
		
		УстановитьУпорядочиваниеГруппировки(КомпоновщикНастроек.Настройки, 
			Новый ПолеКомпоновкиДанных("Период"), 
			НаправлениеСортировкиКомпоновкиДанных.Возр,
			Ложь, Ложь);
	КонецЕсли;
	
	Если Не КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти("РасчетыАктуальны") = Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "РасчетыАктуальны");
	КонецЕсли;
	
	// Добавим выбранное значение анализа и удалим добавленные ранее
	СлужебныеПоля = Справочники.СтруктураЦелей.СлужебныеПоляЗначенияАнализа();
	ПоляКУдалению = Новый Массив;
	ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл 
		Если СлужебныеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
			ПоляКУдалению.Добавить(ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПолеКУдалению Из ПоляКУдалению Цикл 
		ВыбранныеПоля.Удалить(ПолеКУдалению);
	КонецЦикла;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ЗначениеАнализаПоле);
	Если (ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика
		Или ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение)
		И ПараметрыРасчета.РежимПокомпонентногоСравнения = 1 Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПараметрыРасчета.ЗначениеАнализаДополнительноеПоле);
	КонецЕсли;
КонецПроцедуры

Функция РассчитатьНарастающийИтог(ТаблицаПоПериодам, ПараметрыРасчета)
	КолонкаРасчета = ПараметрыРасчета.ЗначениеАнализаИмяПоля;
	КолонкаРасчетаДополнительная = ПараметрыРасчета.ЗначениеАнализаДополнительноеИмяПоля;
	КолонкаОбъектаАнализа = ПараметрыРасчета.ОбъектАнализаИмяПоля;
	
	ПериодАнализа = ПараметрыРасчета.ПериодАнализа;
	ПериодСравнения = ПараметрыРасчета.ПериодСравнения;

	НарастающиеИтоги = Новый Структура("ОбщийИтог, ОбщийИтогДополнительный, ОбщийИтогСравнения", 0, 0);
	
	ПериодСравненияУказан = (НЕ ПериодСравнения = Неопределено);
	
	Если ПериодСравненияУказан Тогда
		КонецПериодаСравнения = ПериодСравнения.ДатаОкончания;
	КонецЕсли;
	
	ПериодыСовпадают = (ПериодАнализа = ПериодСравнения);
	
	ВременнаяКопияТаблицы = ТаблицаПоПериодам.Скопировать();
	ЕстьОбъектАнализа = ВременнаяКопияТаблицы.Колонки.Найти(КолонкаОбъектаАнализа) <> Неопределено;
	Если ЕстьОбъектАнализа Тогда
		ВременнаяКопияТаблицы.Сортировать(КолонкаОбъектаАнализа + " Возр" + ", " + "Период Возр");
	Иначе
		ВременнаяКопияТаблицы.Сортировать("Период Возр");
	КонецЕсли;
	
	БазовыйИндекс = 0;
	ОбщийИтог = 0;
	ОбщийИтогДополнительный = 0;
	ОбщийИтогСравнения = 0;
	СчитатьОбщийИтог = Ложь;
	СчитатьОбщийИтогДополнительный = Не ЕстьОбъектАнализа И ПараметрыРасчета.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика;
	СчитатьОбщийИтогСравнения = Ложь;
	ПериодПредыдущейСтроки = Дата("00010101010101");
	Для Каждого СтрокаТаблицы Из ВременнаяКопияТаблицы Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтрокиТаблицы = ВременнаяКопияТаблицы.Индекс(СтрокаТаблицы);
		// Обнуление общего итога для покомпонентной динамики
		Если ПериодПредыдущейСтроки > СтрокаТаблицы.Период Тогда
			БазовыйИндекс = ИндексСтрокиТаблицы;
		КонецЕсли;
		
		Если ПериодСравненияУказан И СтрокаТаблицы.Период < КонецПериодаСравнения Тогда
			Если Не СчитатьОбщийИтогСравнения Тогда
				БазовыйИндекс = ИндексСтрокиТаблицы;
				СчитатьОбщийИтогСравнения = Истина;
				СчитатьОбщийИтог = Ложь;
			КонецЕсли;
		Иначе
			Если Не СчитатьОбщийИтог Тогда
				БазовыйИндекс = ИндексСтрокиТаблицы;
				СчитатьОбщийИтогСравнения = Ложь;
				СчитатьОбщийИтог = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если СчитатьОбщийИтог Тогда
			ОбщийИтог = ОбщийИтог + СтрокаТаблицы[КолонкаРасчета];
			Если СчитатьОбщийИтогДополнительный Тогда
				ОбщийИтогДополнительный = ОбщийИтогДополнительный + СтрокаТаблицы[КолонкаРасчетаДополнительная];
			КонецЕсли;
		КонецЕсли;
		
		Если СчитатьОбщийИтогСравнения Тогда
			ОбщийИтогСравнения = ОбщийИтогСравнения + СтрокаТаблицы[КолонкаРасчета];
		КонецЕсли;
		
		Если ИндексСтрокиТаблицы > БазовыйИндекс Тогда
			СтрокаТаблицы[КолонкаРасчета] = СтрокаТаблицы[КолонкаРасчета]
				+ ВременнаяКопияТаблицы[ИндексСтрокиТаблицы-1][КолонкаРасчета];
			Если СчитатьОбщийИтогДополнительный Тогда
				СтрокаТаблицы[КолонкаРасчетаДополнительная] = СтрокаТаблицы[КолонкаРасчетаДополнительная]
					+ ВременнаяКопияТаблицы[ИндексСтрокиТаблицы-1][КолонкаРасчетаДополнительная];
			КонецЕсли;
		КонецЕсли;
		
		ПериодПредыдущейСтроки = СтрокаТаблицы.Период;
	КонецЦикла;
	
	// Перенесем данные нарастающего итога в исходную таблицу с произвольной сортировкой.
	Для Каждого СтрокаТаблицы Из ТаблицаПоПериодам Цикл 
		Если ЕстьОбъектАнализа Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить(КолонкаОбъектаАнализа, СтрокаТаблицы[КолонкаОбъектаАнализа]);
			ПараметрыПоиска.Вставить("Период", СтрокаТаблицы.Период);
		Иначе
			ПараметрыПоиска = Новый Структура("Период", СтрокаТаблицы.Период);
		КонецЕсли;
		ИскомыеСтроки = ВременнаяКопияТаблицы.НайтиСтроки(ПараметрыПоиска);
		Если ИскомыеСтроки.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ИскомыеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если ПериодыСовпадают Тогда
		НарастающиеИтоги.ОбщийИтог = ОбщийИтогСравнения;
	Иначе 
		НарастающиеИтоги.ОбщийИтог = ОбщийИтог;
		Если СчитатьОбщийИтогДополнительный Тогда
			НарастающиеИтоги.ОбщийИтогДополнительный = ОбщийИтогДополнительный;
		КонецЕсли;
	КонецЕсли;
	НарастающиеИтоги.ОбщийИтогСравнения = ОбщийИтогСравнения;
	
	Возврат НарастающиеИтоги;
КонецФункции

Функция СвойстваДанныхВариантаАнализаВКэше(ВариантАнализа, ВариантОтображения)
	
	СвойстваДанныхВариантаАнализаВКэше = Новый Структура("ДатаРасчета, ДанныеАктуальны", Дата(1,1,1), Ложь); 
	ПериодВМинутах = ПериодАктуальностиРасчетаВМинутах(ВариантАнализа);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("ВариантОтображения", ВариантОтображения);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодАктуальностиРасчета", ПериодВМинутах);
	Запрос.Текст = ТекстЗапросаДанныхВариантаАнализаВКэше(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СвойстваДанныхВариантаАнализаВКэше.ДатаРасчета = Выборка.ДатаРасчета;
		СвойстваДанныхВариантаАнализаВКэше.ДанныеАктуальны = Выборка.ДанныеАктуальны;
	КонецЕсли;
	
	Возврат СвойстваДанныхВариантаАнализаВКэше;
	
КонецФункции

// Возвращает зону внимания, характеризующую состояние(статус) показателя
//
// Параметры:
//	ВариантАнализа - Структура - реквизиты варианта анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы.
//
// Возвращаемое значение:
//	Структура		- свойства зоны анализа.
//
Функция СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных) Экспорт
	
	ЦелевойТренд = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа.Владелец, "ЦелевойТренд");
	
	СвойстваЗоныАнализаИТренда = Новый Структура;
	СвойстваЗоныАнализаИТренда.Вставить("ИзмененияСтабильны");
	СвойстваЗоныАнализаИТренда.Вставить("ЦелевойТренд");
	СвойстваЗоныАнализаИТренда.Вставить("НомерЗоныАнализа");
	СвойстваЗоныАнализаИТренда.Вставить("ФактическийТренд");
	СвойстваЗоныАнализаИТренда.Вставить("ПояснениеКТренду");
	СвойстваЗоныАнализаИТренда.Вставить("ТочекВРеальномТренде");
	СвойстваЗоныАнализаИТренда.Вставить("Статус");
	СвойстваЗоныАнализаИТренда.Вставить("ПояснениеКСтатусу");
	СвойстваЗоныАнализаИТренда.Вставить("ХарактерИзменений");
	СвойстваЗоныАнализаИТренда.Вставить("ЗонаВнимания");
	СвойстваЗоныАнализаИТренда.Вставить("ПорядокЗоныВнимания");
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения,
		ВариантАнализа);
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных,
		ЦелевойТренд,
		ВидЦелевогоЗначения,
		ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	ИмяОбластиМатрицыСостояний = "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона" + "_"
		+ ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	ПояснениеКСтатусу = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ПояснениеКСтатусу").ТекущаяОбласть.Параметр;
	ПояснениеКТренду  = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ПояснениеКТренду").ТекущаяОбласть.Параметр;
	
	СвойстваЗоныАнализаИТренда.ИзмененияСтабильны = Ложь;
	СвойстваЗоныАнализаИТренда.ЦелевойТренд = ЦелевойТренд;
	СвойстваЗоныАнализаИТренда.НомерЗоныАнализа = ЗонаАнализа.НомерЗоны;
	СвойстваЗоныАнализаИТренда.ФактическийТренд = ЗонаАнализа.ФактическийТренд;
	СвойстваЗоныАнализаИТренда.ПояснениеКТренду = МониторингЦелевыхПоказателейПовтИсп.ПредставлениеПоясненияКТрендуМатрицыСостояния(ПояснениеКТренду);
	СвойстваЗоныАнализаИТренда.ТочекВРеальномТренде = Неопределено;
	СвойстваЗоныАнализаИТренда.Статус = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "Статус").ТекущаяОбласть.Параметр;
	СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу = МониторингЦелевыхПоказателейПовтИсп.ПредставлениеПоясненияКСтатусуМатрицыСостояния(ПояснениеКСтатусу);
	СвойстваЗоныАнализаИТренда.ХарактерИзменений = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ХарактерИзменений").ТекущаяОбласть.Параметр;
	СвойстваЗоныАнализаИТренда.ЗонаВнимания = Перечисления.ЗоныВниманияВариантовАнализа[МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗонаВнимания").ТекущаяОбласть.Параметр];
	СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания = ПорядокЗоныВнимания(СвойстваЗоныАнализаИТренда.ЗонаВнимания);
	
	Возврат СвойстваЗоныАнализаИТренда;
	
КонецФункции

Функция ТекстЗапросаДанныхВариантаАнализаВКэше(ТолькоСвойства = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	МАКСИМУМ(ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета) КАК ДатаРасчета,
		|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа КАК ВариантАнализа
		|ПОМЕСТИТЬ МаксимумДатыРасчета
		|ИЗ
		|	РегистрСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ИсточникиДанныхВариантовАнализаЦелевыхПоказателей
		|ГДЕ
		|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета КАК ДатаРасчета,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета, &ТекущаяДата, МИНУТА) <= &ПериодАктуальностиРасчета
		|				И ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета >= МаксимумДатыРасчета.ДатаРасчета
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДанныеАктуальны
		|ИЗ
		|	РегистрСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ИсточникиДанныхВариантовАнализаЦелевыхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимумДатыРасчета КАК МаксимумДатыРасчета
		|		ПО ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = МаксимумДатыРасчета.ВариантАнализа
		|ГДЕ
		|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
		|	И ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантОтображения = &ВариантОтображения";
	
	Если Не ТолькоСвойства Тогда
		ТекстЗапроса = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ТекстЗапроса, "ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ИсточникДанных", "ИсточникДанных");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьУпорядочиваниеГруппировки(ПолеГруппировки, ПолеУпорядочивания, ТипУпорядочивания, Очищать = Ложь, Добавлять = Истина)
	ЭлементыПорядка = ПолеГруппировки.Порядок.Элементы;
	Если Очищать Тогда
		ЭлементыПорядка.Очистить();
	КонецЕсли;
	
	Если Добавлять Тогда
		НовыйЭлементПорядка = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Иначе
		НовыйЭлементПорядка = ЭлементыПорядка.Вставить(0, Тип("ЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;
	НовыйЭлементПорядка.Использование = Истина;
	НовыйЭлементПорядка.Поле = ПолеУпорядочивания;
	НовыйЭлементПорядка.ТипУпорядочивания = ТипУпорядочивания;
КонецПроцедуры

Функция ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, Дата)
	
	СтруктураЦелей = Новый Структура;
	СтруктураЦелей.Вставить("ЦелевоеЗначение");
	СтруктураЦелей.Вставить("ЦелевойДиапазонМинимум");
	СтруктураЦелей.Вставить("ЦелевойДиапазонМаксимум");
	СтруктураЦелей.Вставить("ГраничноеПозитивноеОтклонение");
	СтруктураЦелей.Вставить("ГраничноеНегативноеОтклонение");
	СтруктураЦелей.Вставить("ПриведенноеГраничноеПозитивноеОтклонение");
	СтруктураЦелей.Вставить("ПриведенноеГраничноеНегативноеОтклонение");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа.Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевоеЗначение,
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМинимум,
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМаксимум,
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеНегативноеОтклонение,
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеПозитивноеОтклонение,
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеНегативноеОтклонение,
		|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеПозитивноеОтклонение
		|ИЗ
		|	РегистрСведений.ЦелевыеЗначенияВариантовАнализа.СрезПоследних(&Дата, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураЦелей, Выборка);
	КонецЕсли;
	
	Возврат СтруктураЦелей;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Функция ПропуститьЗапись(ТекстСсылкиТекущегоЭлемента)
	ПропуститьЗапись = Ложь;
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	ИспользоватьПланированиеПродаж = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж");
	ИспользоватьПланированиеЗакупок = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок");
	ИспользоватьПланированиеПроизводства = Ложь;
	
	ПланированиеИспользуется = ИспользоватьПланированиеПродаж Или ИспользоватьПланированиеЗакупок Или ИспользоватьПланированиеПроизводства;
	
	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьПроизводство21 = Ложь;
	ЗаказыИспользуются = ИспользоватьЗаказыКлиентов Или ИспользоватьЗаказыПоставщикам Или ИспользоватьПроизводство21;
	
	Если Не ИспользоватьНесколькоВалют
		И (ТекстСсылкиТекущегоЭлемента =      "4838f66b-bcda-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "4838f66c-bcda-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "4838f66d-bcda-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "4838f666-bcda-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "4838f667-bcda-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "4838f66e-bcda-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "e859aeb6-bce3-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		// Не записываем показатели вида "Остаток ДС / <Валюта>" и курсы валют
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если ИспользоватьНесколькоВалют
		И ВалютаEUR().Пустая()
		И (ТекстСсылкиТекущегоЭлемента =      "4838f66e-bcda-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "4838f66d-bcda-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если ИспользоватьНесколькоВалют
		И ВалютаUSD().Пустая()
		И (ТекстСсылкиТекущегоЭлемента =      "e859aeb6-bce3-11e4-8d8d-e0cb4ed5f4cc" 
			Или ТекстСсылкиТекущегоЭлемента = "4838f66c-bcda-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		ПропуститьЗапись = Истина;
	КонецЕсли;
	
	Если Не ПланированиеИспользуется
		И ТекстСсылкиТекущегоЭлемента = "41b22eaa-bcda-11e4-8d8d-e0cb4ed5f4cc" Тогда
		
		// Не записываем группу показателей "Исполнение планов"
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если Не ИспользоватьПланированиеПродаж 
		И (ТекстСсылкиТекущегоЭлемента =      "4838f663-bcda-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "49c43ecb-bcea-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "405ff23a-bd08-11e4-8d8d-e0cb4ed5f4cc"
			) Тогда
		
		// Не записываем показатели планирования продаж
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если Не ИспользоватьПланированиеЗакупок 
		И (ТекстСсылкиТекущегоЭлемента =      "4838f664-bcda-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "2d6a8c2a-bcec-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "af11cd1c-bd0c-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		// Не записываем показатели планирования закупок
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если Не ИспользоватьПланированиеПроизводства 
		И (ТекстСсылкиТекущегоЭлемента =      "4838f665-bcda-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "2d6a8c2b-bcec-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "af11cd1d-bd0c-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		// Не записываем показатели планирования производства
		ПропуститьЗапись = Истина;
	КонецЕсли;
	
	Если Не ЗаказыИспользуются
		И ТекстСсылкиТекущегоЭлемента = "e859aec0-bce3-11e4-8d8d-e0cb4ed5f4cc" Тогда
		
		// Не записываем группу показателей "Исполнение заказов"
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если Не ИспользоватьЗаказыКлиентов 
		И (ТекстСсылкиТекущегоЭлемента =      "e859aebe-bce3-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "e859aebf-bce3-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "807b18c8-bcfc-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		// Не записываем показатели контроля заказов клиентов
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если Не ИспользоватьЗаказыПоставщикам 
		И (ТекстСсылкиТекущегоЭлемента =      "e859aec1-bce3-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "e859aec2-bce3-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "807b18c9-bcfc-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		// Не записываем показатели контроля заказов поставщикам
		ПропуститьЗапись = Истина;
	КонецЕсли;
	Если Не ИспользоватьПроизводство21
		И (ТекстСсылкиТекущегоЭлемента =      "e859aec3-bce3-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "e859aec4-bce3-11e4-8d8d-e0cb4ed5f4cc"
			Или ТекстСсылкиТекущегоЭлемента = "807b18ca-bcfc-11e4-8d8d-e0cb4ed5f4cc") Тогда
		
		// Не записываем показатели контроля заказов на производство
		ПропуститьЗапись = Истина;
	КонецЕсли;
	
	Возврат ПропуститьЗапись;
КонецФункции


// Устанавливает значение отбора по идентификатору пользовательской настройки.
// 
// Параметры:
// 	ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - 
// 	ИдентификаторПользовательскойНастройки - Строка -
// 	Значение - Произвольный -
Процедура УстановитьЗначениеОтбораПоИдентификатору(ПользовательскиеНастройки, ИдентификаторПользовательскойНастройки, Значение)
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			ПользовательскаяНастройка.ПравоеЗначение = Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция для проверки объектов при открытии форм и перед записью.
// Может использоваться как функция проверки по умолчанию, если
// достаточно логики - заблокированные объекты зарегистрированы на узлах плана обмена ОбновлениеИнформационнойБазы.
//
// Параметры:
//  МетаданныеИОтбор - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
// Возвращаемое значение:
//  Булево - Истина, если объект обновлен и доступен для изменения.
//
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Данные = МетаданныеИОтбор.Данные;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Если Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			Возврат Истина;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеИОтбор = Неопределено Тогда
		МетаданныеИОтбор = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(Данные, Неопределено);
	КонецЕсли;
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		
		ДанныеТекущегоОбъектаОбновлены = Истина;
		
	Иначе
		
		ДанныеТекущегоОбъектаОбновлены = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено,
			МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
		
	КонецЕсли;
	
	Если НЕ ДанныеТекущегоОбъектаОбновлены Тогда
		Возврат ДанныеТекущегоОбъектаОбновлены;
	КонецЕсли;
	
	СвязанныеОбъекты = Новый Массив;
	
	ДанныеСвязанныхОбъектовОбновлены = Истина;
	
	Если МетаданныеИОтбор.Метаданные = Метаданные.Справочники.ВариантыАнализаЦелевыхПоказателей Тогда
		
		СвязанныйОбъект = Новый Структура("Метаданные, Отбор");
		СвязанныйОбъект.Метаданные = Метаданные.Справочники.СтруктураЦелей;
		Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей") Тогда
			СвязанныйОбъект.Отбор = Данные.Владелец;
		КонецЕсли;
		СвязанныеОбъекты.Добавить(СвязанныйОбъект);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.МониторЦелевыхПоказателей Тогда
		
		СвязанныйОбъект = Новый Структура("Метаданные, Отбор");
		СвязанныйОбъект.Метаданные = Метаданные.Справочники.СтруктураЦелей;
		СвязанныеОбъекты.Добавить(СвязанныйОбъект);
		СвязанныйОбъект = Новый Структура("Метаданные, Отбор");
		СвязанныйОбъект.Метаданные = Метаданные.Справочники.ВариантыАнализаЦелевыхПоказателей;
		СвязанныеОбъекты.Добавить(СвязанныйОбъект);
		
	КонецЕсли;
	
	Для каждого МетаданныеСвязанногоОбъекта Из СвязанныеОбъекты Цикл
	
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
			Неопределено, МетаданныеСвязанногоОбъекта.Метаданные, МетаданныеСвязанногоОбъекта.Отбор) Тогда
			ДанныеСвязанныхОбъектовОбновлены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеТекущегоОбъектаОбновлены И ДанныеСвязанныхОбъектовОбновлены;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЕстьДоступныеВариантыАнализа()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
	|	И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Проверяет, что данный дашборд доступен для текущего пользователя
// 
// Параметры:
// 	Дашборд - СправочникСсылка.ДашбордыМЦП - дашборд МЦП для проверки доступности.
// Возвращаемое значение:
// 	Булево - Истина, если дашборд доступен для пользователя
Функция ДашбордДоступенДляПользователя(Дашборд)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Дашборд", Дашборд);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДашбордыМЦП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДашбордыМЦП КАК ДашбордыМЦП
	|ГДЕ
	|	ДашбордыМЦП.Ссылка = &Дашборд
	|	И ДашбордыМЦП.Автор = &ТекущийПользователь
	|	И ДашбордыМЦП.ТолькоДляАвтора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДашбордыМЦППользователиДашборда.Ссылка
	|ИЗ
	|	Справочник.ДашбордыМЦП.ПользователиДашборда КАК ДашбордыМЦППользователиДашборда
	|ГДЕ
	|	ДашбордыМЦППользователиДашборда.Ссылка = &Дашборд
	|	И ДашбордыМЦППользователиДашборда.Пользователь = &ТекущийПользователь";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ДобавитьЭлементВывода(СтруктураВывода, ИмяЭлемента, ЗначениеЭлемента)
	СтруктураВывода.Вставить(ИмяЭлемента, ЗначениеЭлемента);
	СтруктураВывода.ПорядокВывода.Добавить(ИмяЭлемента);
КонецПроцедуры

Функция НайтиСтрокиТаблицыПоУсловиюНЕ(ТаблицаЗначений, СтруктураОтборов)
	
	НайденныеСтроки = Новый Массив;
	
	ИсключаемыеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураОтборов);
	
	Для каждого СтрокаТаблицыЗначенийКОбработке Из ТаблицаЗначений Цикл
		Если ИсключаемыеСтроки.Найти(СтрокаТаблицыЗначенийКОбработке) = Неопределено Тогда
			НайденныеСтроки.Добавить(СтрокаТаблицыЗначенийКОбработке);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

// Возвращает базовое значение, для построения диаграмм
Функция СтандартноеБазовоеЗначениеДляДиаграмм()
	
	Возврат 0;
	
КонецФункции

// Возвращает параметры базового значения, для построения диаграмм
// 
// Параметры:
// 	ВариантАнализа - Структура - реквизиты варианта анализа.
// 	СвойстваОбщейСтатистики - Структура - структура статистических параметров источника данных (см. ИнициализироватьИсточникДанных.СвойстваОбщейСтатистики):
// 	* ПоОбъектамАнализа - Структура -:
// 	** Количество - Число - 
// 	** Минимум - Число - 
// 	** Максимум - Число - 
// 	** Среднее - Число - 
// 	** Размах - Число -
// 	** СтандартноеОтклонение - Число -
// 	** Медиана - Число -
// 	* ПоПериодам - Структура -:
// 	** Количество - Число - 
// 	** Минимум - Число - 
// 	** Максимум - Число - 
// 	** Среднее - Число - 
// 	** Размах - Число -
// 	** СтандартноеОтклонение - Число -
// 	** Медиана - Число -
// Возвращаемое значение:
// 	Структура - Описание:
// 	* АвтоМаксимальноеЗначение - Булево -
// 	* МаксимальноеЗначение - Число -
// 	* АвтоМинимальноеЗначение - Булево -
// 	* МинимальноеЗначение - Число -
// 	* БазовоеЗначение - Число -
Функция ПараметрыБазовогоЗначенияДляДиаграмм(ВариантАнализа, СвойстваОбщейСтатистики)
	ПараметрыБазовогоЗначенияДляДиаграмм = Новый Структура;
	ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("БазовоеЗначение",			СтандартноеБазовоеЗначениеДляДиаграмм());
	ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("МинимальноеЗначение",		0);
	ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("АвтоМинимальноеЗначение",	Истина);
	ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("МаксимальноеЗначение",		0);
	ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("АвтоМаксимальноеЗначение",	Истина);
	
	Если (ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		Или ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика)
		И ВариантАнализа.РежимПокомпонентногоСравнения = 0 Тогда
		ИспользуемаяСтатистика = СвойстваОбщейСтатистики.ПоОбъектамАнализа;
	Иначе
		ИспользуемаяСтатистика = СвойстваОбщейСтатистики.ПоПериодам;
	КонецЕсли;
	
	Если ВариантАнализа.РежимШкалыЗначений = Перечисления.РежимШкалыЗначенийДиаграмм.Авто
		И Не ВариантАнализа.ВключатьНоль Тогда
		Если Не (ИспользуемаяСтатистика.Максимум > 0 И ИспользуемаяСтатистика.Минимум < 0)
			И Не (ИспользуемаяСтатистика.Максимум = 0 И ИспользуемаяСтатистика.Минимум = 0)
			И Не ИспользуемаяСтатистика.Размах = 0 Тогда
			Если ИспользуемаяСтатистика.Минимум > 0 Тогда
				ПорядокБлижайшегоКНулю = Log10(ИспользуемаяСтатистика.Минимум);
			ИначеЕсли ИспользуемаяСтатистика.Минимум < 0 Тогда
				ПорядокБлижайшегоКНулю = Log10(-ИспользуемаяСтатистика.Максимум);
			Иначе
				ПорядокБлижайшегоКНулю = 0;
			КонецЕсли;
			ПорядокРазмаха = Log10(ИспользуемаяСтатистика.Размах);
			
			Если ПорядокРазмаха < ПорядокБлижайшегоКНулю Тогда
				Если ИспользуемаяСтатистика.Минимум >= 0 Тогда
					МинимальноеЗначение = ИспользуемаяСтатистика.Минимум - Pow(10, ПорядокРазмаха - 1);
				Иначе
					МинимальноеЗначение = ИспользуемаяСтатистика.Максимум + Pow(10, ПорядокРазмаха - 1);
				КонецЕсли;
				
				ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("БазовоеЗначение", МинимальноеЗначение);
				ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("МинимальноеЗначение", МинимальноеЗначение);
				ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("АвтоМинимальноеЗначение", Ложь);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВариантАнализа.РежимШкалыЗначений = Перечисления.РежимШкалыЗначенийДиаграмм.ПоМинимальномуЗначению Тогда
		ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("БазовоеЗначение", ИспользуемаяСтатистика.Минимум);
		ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("МинимальноеЗначение", ИспользуемаяСтатистика.Минимум);
		ПараметрыБазовогоЗначенияДляДиаграмм.Вставить("АвтоМинимальноеЗначение", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыБазовогоЗначенияДляДиаграмм;
КонецФункции

// Возвращает значение числа в виде тыс., млн
// 
// Параметры:
//	ИсходноеЧисло - Число - форматируемое число
//	Разрядность - Число - количество знаков после запятой
//
// Возвращаемое значение:
//	Строка - Представление числа.
//
Функция ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсходноеЧисло, Разрядность)
	
	ЗначениеСокращенногоПредставленияЧисла = "";
	
	ЗначениеСокращенногоПредставленияЧисла = СтрЗаменить(Формат(ИсходноеЧисло, "ЧДЦ=" + Разрядность + ";ЧН="), " ", Символы.НПП);
	
	Возврат Число(ЗначениеСокращенногоПредставленияЧисла);
	
КонецФункции

// Возвращает вид целевого значения показателя на указанную дату/
//
// Параметры:
//		ДатаАктуальности - Дата - дата на которую хотим получить вид действующего целевого значения.
//		ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - Ссылка на вариант анализа.
//
// Возвращаемое значение:
//		- ПеречислениеСсылка.ВидыЦелевыхЗначенийВариантовАнализа - Вид целевого значения.
//		- Неопределено -
//
Функция ПолучитьВидЦелевогоЗначения(ДатаАктуальности, ВариантАнализа)
	ВидЦелевогоЗначения = Неопределено;
	
	ЗапросЦелевогоЗначения = Новый Запрос;
	ЗапросЦелевогоЗначения.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	ЗапросЦелевогоЗначения.УстановитьПараметр("ВариантАнализа", ВариантАнализа.Ссылка);
	ЗапросЦелевогоЗначения.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидЦелевогоЗначения
	|ИЗ
	|	РегистрСведений.ЦелевыеЗначенияВариантовАнализа.СрезПоследних(&ПараметрПериода, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	ВыражениеГраницыПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"КОНЕЦПЕРИОДА(&ДатаАктуальности, %1)",
		ВРег(ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьРасчетаПоказателя)));
	ЗапросЦелевогоЗначения.Текст = СтрЗаменить(ЗапросЦелевогоЗначения.Текст, "&ПараметрПериода", ВыражениеГраницыПериода);
	
	РезультатЗапроса = ЗапросЦелевогоЗначения.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВидЦелевогоЗначения = Выборка.ВидЦелевогоЗначения;
	КонецЕсли;
	
	Возврат ВидЦелевогоЗначения;
КонецФункции


// Возвращает таблицу целевых значений.
// 
// Параметры:
// 	МассивДат - Массив из Дата - массив дат.
// 	ВариантАнализа - Структура - реквизиты варианта анализа.
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с колонками:
// 	 *Период - Дата -
// 	 *ВидЦелевогоЗначения - ПеречислениеСсылка.ВидыЦелевыхЗначенийВариантовАнализа -
// 	 *ВидОтклоненияОтЦелевогоЗначения - ПеречислениеСсылка.ВидыОтклоненийОтЦелевыхЗначенийПоказателей -
// 	 *ЦелевоеЗначение - Число -
// 	 *ЦелевойДиапазонМинимум - Число -
// 	 *ЦелевойДиапазонМаксимум - Число -
// 	 *ПриведенноеГраничноеНегативноеОтклонение - Число -
// 	 *ПриведенноеГраничноеПозитивноеОтклонение - Число -
// 	 *ГраничноеНегативноеОтклонение - Число -
// 	 *ГраничноеПозитивноеОтклонение - Число -
//
Функция ПолучитьЦелевыеЗначенияНаДаты(МассивДат, ВариантАнализа)
	
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	ЗнаменательТребуется = Ложь;
	
	Если ВариантАнализа.КратностьЗначений = ВидыПредставленияЧисел.ВТысячах Тогда
		Знаменатель = Формат(Pow(10, 3), "ЧГ=0;");
		ЗнаменательТребуется = Истина;
	ИначеЕсли ВариантАнализа.КратностьЗначений = ВидыПредставленияЧисел.ВМиллионах Тогда
		Знаменатель = Формат(Pow(10, 6), "ЧГ=0;");
		ЗнаменательТребуется = Истина;
	КонецЕсли;
	
	Разрядность = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	ДатыЦелевыхЗначений = Новый ТаблицаЗначений;
	ДатыЦелевыхЗначений.Колонки.Добавить("ДатаЦелевогоЗначения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для Счетчик = 1 По МассивДат.Количество() Цикл 
		ДатыЦелевыхЗначений.Добавить();
	КонецЦикла;
	
	ДатыЦелевыхЗначений.ЗагрузитьКолонку(МассивДат, "ДатаЦелевогоЗначения");
	
	ЗапросЦелевыхЗначений = Новый Запрос;
	ЗапросЦелевыхЗначений.УстановитьПараметр("ДатыЦелевыхЗначений", ДатыЦелевыхЗначений);
	ЗапросЦелевыхЗначений.УстановитьПараметр("ВариантАнализа", ВариантАнализа.Ссылка);
	Текст =
	"ВЫБРАТЬ
	|	ДатыЦелевыхЗначений.ДатаЦелевогоЗначения КАК ДатаЦелевогоЗначения
	|ПОМЕСТИТЬ ДатыЦелевыхЗначений
	|ИЗ
	|	&ДатыЦелевыхЗначений КАК ДатыЦелевыхЗначений
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаЦелевогоЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыЦелевыхЗначений.ДатаЦелевогоЗначения КАК Период,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидЦелевогоЗначения КАК ВидЦелевогоЗначения,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидОтклоненияОтЦелевогоЗначения КАК ВидОтклоненияОтЦелевогоЗначения,
	|	&ВыражениеЦелевоеЗначение КАК ЦелевоеЗначение,
	|	&ВыражениеЦелевойДиапазонМинимум КАК ЦелевойДиапазонМинимум,
	|	&ВыражениеЦелевойДиапазонМаксимум КАК ЦелевойДиапазонМаксимум,
	|	&ВыражениеПриведенноеГраничноеНегативноеОтклонение КАК ПриведенноеГраничноеНегативноеОтклонение,
	|	&ВыражениеПриведенноеГраничноеПозитивноеОтклонение КАК ПриведенноеГраничноеПозитивноеОтклонение,
	|	ВЫБОР КОГДА ВидОтклоненияОтЦелевогоЗначения = ЗНАЧЕНИЕ(Перечисление.ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное)
	|		ТОГДА &ВыражениеГраничноеНегативноеОтклонение
	|		ИНАЧЕ ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеНегативноеОтклонение
	|	КОНЕЦ КАК ГраничноеНегативноеОтклонение,
	|	ВЫБОР КОГДА ВидОтклоненияОтЦелевогоЗначения = ЗНАЧЕНИЕ(Перечисление.ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное)
	|		ТОГДА &ВыражениеГраничноеПозитивноеОтклонение
	|		ИНАЧЕ ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеПозитивноеОтклонение
	|	КОНЕЦ КАК ГраничноеПозитивноеОтклонение
	|ИЗ
	|	ДатыЦелевыхЗначений КАК ДатыЦелевыхЗначений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦелевыеЗначенияВариантовАнализа КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних
	|		ПО ДатыЦелевыхЗначений.ДатаЦелевогоЗначения >= ЦелевыеЗначенияВариантовАнализаСрезПоследних.Период
	|ГДЕ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВариантАнализа = &ВариантАнализа";
	
	Если ЗнаменательТребуется Тогда
		ШаблонВыражения = "ВЫРАЗИТЬ(%1 / %3 КАК Число(31, %2))";
	Иначе
		ШаблонВыражения = "ВЫРАЗИТЬ(%1 КАК Число(31, %2))";
	КонецЕсли;
	ВыражениеЦелевоеЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевоеЗначение",
		Разрядность,
		Знаменатель);
	ВыражениеЦелевойДиапазонМинимум = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМинимум",
		Разрядность,
		Знаменатель);
	ВыражениеЦелевойДиапазонМаксимум = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМаксимум",
		Разрядность,
		Знаменатель);
	ВыражениеПриведенноеГраничноеНегативноеОтклонение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеНегативноеОтклонение",
		Разрядность,
		Знаменатель);
	ВыражениеПриведенноеГраничноеПозитивноеОтклонение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеПозитивноеОтклонение",
		Разрядность,
		Знаменатель);
	ВыражениеГраничноеНегативноеОтклонение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеНегативноеОтклонение",
		Разрядность,
		Знаменатель);
	ВыражениеГраничноеПозитивноеОтклонение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыражения,
		"ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеПозитивноеОтклонение",
		Разрядность,
		Знаменатель);
	Текст = СтрЗаменить(Текст, "&ВыражениеЦелевоеЗначение", ВыражениеЦелевоеЗначение);
	Текст = СтрЗаменить(Текст, "&ВыражениеЦелевойДиапазонМинимум", ВыражениеЦелевойДиапазонМинимум);
	Текст = СтрЗаменить(Текст, "&ВыражениеЦелевойДиапазонМаксимум", ВыражениеЦелевойДиапазонМаксимум);
	Текст = СтрЗаменить(Текст, "&ВыражениеПриведенноеГраничноеНегативноеОтклонение", ВыражениеПриведенноеГраничноеНегативноеОтклонение);
	Текст = СтрЗаменить(Текст, "&ВыражениеПриведенноеГраничноеПозитивноеОтклонение", ВыражениеПриведенноеГраничноеПозитивноеОтклонение);
	Текст = СтрЗаменить(Текст, "&ВыражениеГраничноеНегативноеОтклонение", ВыражениеГраничноеНегативноеОтклонение);
	Текст = СтрЗаменить(Текст, "&ВыражениеГраничноеПозитивноеОтклонение", ВыражениеГраничноеПозитивноеОтклонение);
	ЗапросЦелевыхЗначений.Текст = Текст;
	
	РезультатЗапроса = ЗапросЦелевыхЗначений.Выполнить();
	ЦелевыеЗначения = РезультатЗапроса.Выгрузить();
	
	Возврат ЦелевыеЗначения;
КонецФункции

Функция ОбъектЕстьВБазеДанных(ИмяТаблицы, Ссылка)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	&ТаблицаИсточника КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка");
	ТаблицаИсточника = СтрЗаменить("Справочник.%1", "%1", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаИсточника", ТаблицаИсточника);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция ВалютаEUR()
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &Код");
	Запрос.УстановитьПараметр("Код", "978");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Валюта = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Валюта;
КонецФункции

Функция ВалютаUSD()
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &Код");
	Запрос.УстановитьПараметр("Код", "840");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Валюта = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Валюта;
КонецФункции

Функция ВалютаRUB()
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &Код");
	Запрос.УстановитьПараметр("Код", "643");
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Валюта = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Валюта;
КонецФункции

#КонецОбласти

#КонецОбласти 