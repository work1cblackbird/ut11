#Область ПрограммныйИнтерфейс

// Определяет логотип по виду торговой площадки.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки.
//
// Возвращаемое значение:
//   Картинка - логотип.
//
Функция ЛоготипТорговойПлощадки(ВидМаркетплейса) Экспорт

	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		Логотип = БиблиотекаКартинок.ЛоготипOzon2;;
	ИначеЕсли ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет") Тогда
		Логотип = БиблиотекаКартинок.ЛоготипЯндексМаркет;
	Иначе
		Логотип = БиблиотекаКартинок.ПустаяКартинка;
	КонецЕсли;
	
	Возврат Логотип;

КонецФункции

// Возвращает данные по отправлениям заказа.
//
// Параметры:
//   Заказ                    - ДокументСсылка.ЗаказКлиента - проверяемый заказ.
//   РезультатПроверкиЗаказов - Соответствие из Структура - где: ключ - заказ, значение - структура из ответа.
//
// Возвращаемое значение:
//   Неопределено, Произвольный, Структура из КлючИЗначение - сведения по отправлениям заказа с ключами:
//     * МаксимальныйИдентификаторЭкземпляра - Число - количество отправлений по заказу;
//     * УчетнаяЗапись                       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//     * ВидМаркетплейса                     - ПеречислениеСсылка.ВидыМаркетплейсов - вид торговой площадки.
//     * ОтправленияВСборке                  - Массив из Строка - собираемые отправления, 
//                                               по которым есть экземпляры.
//     * ОтправленияКПодтверждениюСборки     - Массив из Строка - собираемые отправления,
//                                               которые готовы к подтверждению сборки.
//     * ОтправленияНеВСборке                - Массив из Строка - отправления, 
//                                               по которым не требуется сборка.
//     * ОтправленияБезТоваров               - Массив из Строка - собираемые отправления,
//                                               по которым нет экземпляров.
//     * ОтправленияСНезаполненнымиДанными   - Массив из Строка - собираемые отправления,
//                                               по которым есть экземпляры с незаполненными данными.
//     * ОтправленияИзмененные               - Массив из Строка - собираемые отправления,
//                                               по которым нужно перезаполнить документы отгрузки.
//     * ОтправленияБезДокументовОтгрузки    - Массив из Строка - собираемые отправления,
//                                               для которых нужно создать документы отгрузки.
//     * ОтправленияОтмененные               - Массив из Строка - отмененные отправления.
//     * ЭкземплярыБезДокументовОтгрузки     - Массив из Строка - список идентификаторов экземпляров без документов отгрузки.
//     * ИзмененныеДокументыОтгрузки         - Соответствие из КлючИЗначение - список измененных документов отгрузки,
//                                               где: ключ - ссылка на документ отгрузки, значение - номер отправления.
//     * ДанныеПоНомерамОтправлений          - Соответствие из КлючИЗначение - список номеров отправлений и их данных,
//                                               где: ключ - номер отправления, значение - ключи данных для записи заказа.
//     * ДетализацияПроблемПоОтправлениям    - Соответствие из КлючИЗначение - список номеров отправлений с описанием 
//                                               выявленных по ним проблемам.
//
Функция РезультатПроверкиЗаказа(Заказ, РезультатПроверкиЗаказов) Экспорт

	РезультатПроверкиЗаказа = РезультатПроверкиЗаказов[Заказ]; // Структура, Неопределено
	Если РезультатПроверкиЗаказа = Неопределено Тогда
		РезультатПроверкиЗаказа = Новый Структура;
		РезультатПроверкиЗаказа.Вставить("МаксимальныйИдентификаторЭкземпляра", 0);
		РезультатПроверкиЗаказа.Вставить("ХозяйственнаяОперация",               ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка"));
		РезультатПроверкиЗаказа.Вставить("УчетнаяЗапись",                       ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка"));
		РезультатПроверкиЗаказа.Вставить("ВидМаркетплейса",                     ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.ПустаяСсылка"));
		РезультатПроверкиЗаказа.Вставить("ОтправленияВСборке",                  Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияКПодтверждениюСборки",     Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияНеВСборке",                Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияБезТоваров",               Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияСНезаполненнымиДанными",   Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияИзмененные",               Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияБезДокументовОтгрузки",    Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ОтправленияОтмененные",               Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ЭкземплярыБезДокументовОтгрузки",     Новый Массив);
		РезультатПроверкиЗаказа.Вставить("ИзмененныеДокументыОтгрузки",         Новый Соответствие);
		РезультатПроверкиЗаказа.Вставить("ДанныеПоНомерамОтправлений",          Новый Соответствие);
		РезультатПроверкиЗаказа.Вставить("ДетализацияПроблемПоОтправлениям",    Новый Соответствие);
		
		РезультатПроверкиЗаказов.Вставить(Заказ, РезультатПроверкиЗаказа);
	КонецЕсли;
	
	Возврат РезультатПроверкиЗаказа;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СопоставлениеДанных

// Возвращает доступные варианты результатов сопоставления загружаемой строки.
//
// Возвращаемое значение:
//   Структура - доступные варианты результатов сопоставления с клюами:
//     * СтрокаСопоставлена   - Строка - в значении представление с загружаемой строкой.
//     * СтрокаНеСопоставлена - Строка - в значении представление с загружаемой строкой.
//     * Неоднозначность      - Строка - в значении представление с загружаемой строкой.
//
Функция ВариантыРезультатовСопоставления() Экспорт

	ВариантыРезультатовСопоставления = Новый Структура;
	ВариантыРезультатовСопоставления.Вставить("СтрокаСопоставлена",   "СтрокаСопоставлена");
	ВариантыРезультатовСопоставления.Вставить("СтрокаНеСопоставлена", "СтрокаНеСопоставлена");
	ВариантыРезультатовСопоставления.Вставить("Неоднозначность",      "Неоднозначность");

	Возврат ВариантыРезультатовСопоставления;

КонецФункции

// Устанавливает результат сопоставления в строке.
// В заполняемой строке в колонке РезультатСопоставленияСтроки содержится ограниченный список значений
// (см. ВариантыРезультатовСопоставления).
//
// Параметры:
//   ТекущиеДанные                    - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции - строка заполнения
//                                           результата сопоставления.
//   КолонкиОбязательныеПриПроверке   - СписокЗначений Из Строка - список обязательных колонок.
//   КолонкиДополнительныеПриПроверке - СписокЗначений Из Строка - список проверяемых дополнительных колонок.
//
Процедура ЗаполнитьРезультатСопоставленияСтроки(ТекущиеДанные, КолонкиОбязательныеПриПроверке,
			КолонкиДополнительныеПриПроверке) Экспорт

	ВариантыРезультатовСопоставления = ВариантыРезультатовСопоставления();
	Ошибки = Новый Массив;

	Для Каждого Колонка Из КолонкиОбязательныеПриПроверке Цикл
		Если Не ЗначениеЗаполнено(ТекущиеДанные[Колонка.Значение]) Тогда
			Ошибки.Добавить(Колонка.Значение);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Колонка Из КолонкиДополнительныеПриПроверке Цикл
		Если Не ЗначениеЗаполнено(ТекущиеДанные[Колонка.Значение]) Тогда
			Ошибки.Добавить(Колонка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, "; ");
	ЗаполненыВсеОбязательныеКолонки = ПустаяСтрока(ОписаниеОшибки);

	Если ТекущиеДанные.РезультатСопоставленияСтроки = ВариантыРезультатовСопоставления.Неоднозначность Тогда
		ТекущиеДанные.СтрокаОбработана = ЗаполненыВсеОбязательныеКолонки;
		Возврат;
	КонецЕсли;

	ТекущиеДанные.РезультатСопоставленияСтроки = ?(ЗаполненыВсеОбязательныеКолонки,
		ВариантыРезультатовСопоставления.СтрокаСопоставлена,
		ВариантыРезультатовСопоставления.СтрокаНеСопоставлена);
	ТекущиеДанные.ОписаниеОшибки               = ОписаниеОшибки;
	ТекущиеДанные.СтрокаОбработана             = ЗаполненыВсеОбязательныеКолонки;

КонецПроцедуры

#КонецОбласти

#Область РаботаСЗаказамиИОтправлениями

// Возвращает представление навигационной ссылки документа отгрузки.
//
// Параметры:
//   Документ    - Неопределено, ДокументСсылка - ссылка на документ.
//   Статус      - ПеречислениеСсылка.СтатусыЗаказовТорговыхПлощадок - статус документа торговой площадки.
//
// Возвращаемое значение:
//   Строка - представление навигационной ссылки документа отгрузки.
//
Функция ШаблонНавигационнойСсылкиДокументаОтгрузки(Знач Документ, Знач Статус) Экспорт

	ЭтоРеализация = (ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ЭтоПередача   = (ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваровХранителю"));
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки")
			Или Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке") Тогда
		Если ЭтоРеализация Тогда
			Шаблон = НСтр("ru = 'Отгружается реализацией № %1 от %2'");
		ИначеЕсли ЭтоПередача Тогда
			Шаблон = НСтр("ru = 'Отгружается передачей товаров № %1 от %2'");
		Иначе
			Шаблон = "";
		КонецЕсли;
	Иначе
		Если ЭтоРеализация Тогда
			Шаблон = НСтр("ru = 'Отгружен реализацией № %1 от %2'");
		ИначеЕсли ЭтоПередача Тогда
			Шаблон = НСтр("ru = 'Отгружается передачей товаров № %1 от %2'");
		Иначе
			Шаблон = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

#КонецОбласти

#КонецОбласти
