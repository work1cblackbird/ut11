
#Область ПрограммныйИнтерфейс

// Процедура формирует отчет-расшифровку, по описанию, подготовленному соответствующей функцией клиентского модуля.
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ОписаниеОбработкиРасшифровки - ОписаниеОбработкиРасшифровкиКомпоновкиДанных - значение, сформированное соответствующей клиентской функцией.
//
Процедура ОбработатьРасшифровку(Форма, ИмяРеквизитаФормы, ОписаниеОбработкиРасшифровки) Экспорт
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы]);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	ИдентификаторРасшифровки = ОписаниеОбработкиРасшифровки.Идентификатор; // ИдентификаторРасшифровкиКомпоновкиДанных -
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ИдентификаторРасшифровки,
		ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;
	
	// Получить таблицу для вывода отчета.
	ТаблицаРезультатаОтчета = Форма["Таблица" + ИмяРеквизитаФормы];
	ТаблицаРезультатаОтчета.Очистить();
	
	// Вывести отчет.
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
	
	Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

// Процедура формирует отчет, расположенный в форме настройками, которые сделал пользователь.
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ИмяОтчета - Строка - имя формируемого отчета в метаданных
//		ИмяВариантаНастроек - Строка - имя варианта отчета в настройках отчета.
//
Процедура СформироватьОтчет(Форма, ИмяРеквизитаФормы, ИмяОтчета, ИмяВариантаНастроек) Экспорт
	Перем ДанныеРасшифровки;
	
	Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	// При обновлении отчета применяются пользовательские настройки.
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);
	
	Форма["АдресСхемы" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ОтчетОбъект.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных -
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ПараметрМакетОформления = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если ПараметрМакетОформления.Значение = "Main" 
			Или ПараметрМакетОформления.Значение = "Основной" Тогда
			ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
			ПараметрМакетОформления.Использование = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ПараметрМакетОформления = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если ПараметрМакетОформления.Значение = "Main" 
					Или ПараметрМакетОформления.Значение = "Основной" Тогда
					ПараметрМакетОформления.Значение = "ОформлениеОтчетовБежевый";
					ПараметрМакетОформления.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Элементы["Таблица" + ИмяРеквизитаФормы].РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Обычный;
	КонецЕсли;
	
	// Вывести отчет.
	ТаблицаРезультатаОтчета = Форма["Таблица" + ИмяРеквизитаФормы];
	ТаблицаРезультатаОтчета.Очистить();
	
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);

	Форма["АдресДанныхРасшифровки" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
КонецПроцедуры

// Процедура инициализирует отчет, расположенный в форме настройками по умолчанию и устанавливает контекстные отборы.
//
// Параметры:
//		Форма - Форма - форма, в которой расположен отчет
//		ИмяРеквизитаФормы - Строка - имя реквизита формы типа ОтчетОбъект
//		ИмяОтчета - Строка - имя формируемого отчета в метаданных
//		ИмяВариантаНастроек - Строка - имя варианта отчета в настройках отчета
//		Отбор - Структура - ключ - имя отбора, значение - значение отбора
//		Параметры - Структура - ключ - имя параметра, значение - значение параметра.
//
Процедура УстановитьСтандартныеНастройки(Форма, ИмяРеквизитаФормы, ИмяОтчета, ИмяВариантаНастроек, Отбор, Параметры = Неопределено) Экспорт
	Если Не ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение(ИмяРеквизитаФормы);		
	
	Форма["АдресСхемы" + ИмяРеквизитаФормы] = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Форма["АдресСхемы" + ИмяРеквизитаФормы]);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	НастройкиКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаНастроек].Настройки;
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных -
	Для Каждого Элемент Из Отбор Цикл
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.Ключ);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Элемент.Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;
	
	Если Параметры <> Неопределено Тогда
		Для каждого Элемент Из Параметры Цикл
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает строковое представление уникального идентификатора
// Символы "-" заменяются на "_"
// Предназначена для использования в выражениях СКД.
// 
// Параметры:
//	ИсточникИдентификатора - ЛюбаяСсылка, Строка, УникальныйИдентификатор - любая ссылка, строка, число.
//
// Возвращаемое значение:
//	Строка - строковое представление уникального идентификатора.
//
Функция СтрУникальныйИдентификатор(ИсточникИдентификатора) Экспорт
	СтрУникальныйИдентификатор = Неопределено;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ИсточникИдентификатора)) Тогда
		УникальныйИдентификатор = ИсточникИдентификатора.УникальныйИдентификатор();
		СтрУникальныйИдентификатор = МониторингЦелевыхПоказателей.УникальныйИдентификаторВСтроку(УникальныйИдентификатор);
	ИначеЕсли ТипЗнч(ИсточникИдентификатора) = Тип("УникальныйИдентификатор") Тогда
		СтрУникальныйИдентификатор = МониторингЦелевыхПоказателей.УникальныйИдентификаторВСтроку(УникальныйИдентификатор);
	Иначе
		СтрУникальныйИдентификатор = ИсточникИдентификатора;
	КонецЕсли;
	
	Возврат СтрУникальныйИдентификатор;
КонецФункции

#Область ПостобработкаОтчетов

// Процедура изменяет настройки диаграмм и их элементов в части оформления 
// Параметры оформления (поддерживаемые) могут использовать независимо.
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета
//		ПараметрыДиаграмм - Структура - Структура изменяемых параметров диаграмм
//			Поддерживаемые параметры:
//				МаксимумСерийКоличество - Число - больше 0, определяет количество выводимых серий диаграммы, "лишние" серии объединяются в сводную серию.
//					Значение 999 используется для снятия ограничения и вывода всех серий.
//				МаксимумСерийПроцент - Число - 0 - 100%, , определяет количество выводимых серий диаграммы, "лишние" серии объединяются в сводную серию. 
//					Значение 999 используется для снятия ограничения и вывода всех серий.
//				ТипДиаграммы - Строка - название типа диаграммы, как оно задано в конфигураторе
//				ВыделениеСерийДиаграмм - Число - "0" - не выделять, "1" - выделять первую серию, "2" - Выделять отслеживаемые аналитики
//				ГрадиентСерийДиаграмм - Булево - включает/отключает режима градиента цветом серий данных.
//
Процедура ОформитьДиаграммыОтчета(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм = Неопределено) Экспорт
	Если ПараметрыДиаграмм = Неопределено Тогда
		ПараметрыДиаграмм = ПараметрыДиаграмм(КомпоновщикНастроек);
	КонецЕсли;
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		ОбъектРисунка = Рисунок.Объект;
		Если ТипЗнч(ОбъектРисунка) = Тип("Диаграмма") Тогда
			Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
			Рисунок.ЦветЛинии = ЦветаСтиля.ЦветРамки;
			
			УстановитьОформлениеПоУмолчаниюДиаграммы(ОбъектРисунка, ПараметрыДиаграмм);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьПараметрыОформленияДиаграмм(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм);
КонецПроцедуры

// Возвращает структуру параметров диаграмм для переопределения
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
// Возвращаемое значение:
//		Структура - в ключе задается имя параметра, в значении - значение параметры.
Функция ПараметрыДиаграмм(КомпоновщикНастроек) Экспорт
	ПараметрыДиаграмм = Новый Структура;
	
	ПараметрМаксимумСерий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "МаксимумСерийКоличество");
	Если ПараметрМаксимумСерий <> Неопределено И ПараметрМаксимумСерий.Использование Тогда
		ПараметрыДиаграмм.Вставить("МаксимумСерийКоличество", ПараметрМаксимумСерий.Значение);
	КонецЕсли;
	
	ПараметрТипДиаграммы = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ТипДиаграммы");
	Если ПараметрТипДиаграммы <> Неопределено И ПараметрТипДиаграммы.Использование Тогда
		ПараметрыДиаграмм.Вставить("ТипДиаграммы", ПараметрТипДиаграммы.Значение);
	КонецЕсли;
	
	ПараметрВыделениеСерийДиаграмм = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыделениеСерийДиаграмм");
	Если ПараметрВыделениеСерийДиаграмм <> Неопределено И ПараметрВыделениеСерийДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ВыделениеСерийДиаграмм", ПараметрВыделениеСерийДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрГрадиентСерийДиаграмм = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ГрадиентСерийДиаграмм");
	Если ПараметрГрадиентСерийДиаграмм <> Неопределено И ПараметрГрадиентСерийДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ГрадиентСерийДиаграмм", ПараметрГрадиентСерийДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрОтображениеМаркеровТочекДиаграмм = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтображениеМаркеровТочекДиаграмм");
	Если ПараметрОтображениеМаркеровТочекДиаграмм <> Неопределено И ПараметрОтображениеМаркеровТочекДиаграмм.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтображениеМаркеровТочекДиаграмм", ПараметрОтображениеМаркеровТочекДиаграмм.Значение);
	КонецЕсли;
	
	ПараметрОтслеживаемыеАналитики = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтслеживаемыеАналитики");
	Если ПараметрОтслеживаемыеАналитики <> Неопределено И ПараметрОтслеживаемыеАналитики.Использование Тогда
		ПараметрыДиаграмм.Вставить("ОтслеживаемыеАналитики", ПараметрОтслеживаемыеАналитики.Значение);
	КонецЕсли;
	
	Возврат ПараметрыДиаграмм;
КонецФункции

// Процедура удаляет строки с вспомогательными параметрами из секции параметров отчета.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки.
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//		ТабличныйДокумент - ТабличныйДокумент - результат вывода отчета.
//		ПараметрыОтчета - Массив из Строка - имена параметров отчета.
//
Процедура СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ТабличныйДокумент, ПараметрыОтчета) Экспорт
	СкрываемыеПараметрыОтчета = Новый Массив;
	Для Каждого ПараметрОтчета Из ПараметрыОтчета Цикл
		ДобавитьПредставленияПараметраВМассив(СхемаКомпоновкиДанных,
			КомпоновщикНастроек,
			СкрываемыеПараметрыОтчета,
			ПараметрОтчета);
	КонецЦикла;
	
	Для Каждого СкрываемыйПараметрОтчета Из СкрываемыеПараметрыОтчета Цикл 
		ВосстановитьЗаголовокПараметров = Ложь;
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(СкрываемыйПараметрОтчета);
		Если НайденнаяОбласть <> Неопределено 
			И НайденнаяОбласть.РежимИзмененияРазмераКолонки = РежимИзмененияРазмера.Обычный Тогда
			УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
			
			Если СтрНайти(ТабличныйДокумент.Область(НайденнаяОбласть.Верх, НайденнаяОбласть.Лево - 1).Текст, 
					НСтр("ru= 'Параметры'") + ":") > 0 Тогда
				ВосстановитьЗаголовокПараметров = Истина;
				Строка = НайденнаяОбласть.Верх;
				Колонка = НайденнаяОбласть.Лево - 1;
			КонецЕсли;
			
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Если ВосстановитьЗаголовокПараметров
				И ПустаяСтрока(ТабличныйДокумент.Область(Строка, Колонка + 1, Строка, Колонка + 1).Текст) Тогда
				ВосстановитьЗаголовокПараметров = Ложь;
			КонецЕсли;
			
			Если ВосстановитьЗаголовокПараметров Тогда
				ТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст = НСтр("ru= 'Параметры'") + ":";
			КонецЕсли;
			
			Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
				ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура добавляет в массив вспомогательные параметры отчета,
// которые не отключаются автоматически по значениям функциональных опций
// Следует использовать совместно с методом ОтчетыУТПереопределяемый.НастроитьПараметрыОтборыПоФункциональнымОпциям.
//
// Параметры:
//		ПараметрыОтчета - Массив из Строка - имена параметров отчета.
//
Процедура ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ПараметрыОтчета) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ПараметрыОтчета.Добавить("ПоказыватьПродажи");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ПараметрыОтчета.Добавить("Валюта");
		ПараметрыОтчета.Добавить("ВалютаОтчета");
		ПараметрыОтчета.Добавить("ДанныеОтчета");
		ПараметрыОтчета.Добавить("ДанныеПоДенежнымСредствам");
		ПараметрыОтчета.Добавить("ДанныеПоРасчетам");
		ПараметрыОтчета.Добавить("ВыводитьСуммы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		ПараметрыОтчета.Добавить("ВидЦены");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		ПараметрыОтчета.Добавить("ЕдиницыКоличества");
	КонецЕсли;
КонецПроцедуры

// Перебирает ячейки макета компоновки и подменяет их текст.
//
// Параметры:
//		ПараметрыЗамены - Структура, Соответствие - Ключ определяет текст, заданный в схеме компоновки
//													(обрамленный знаками "%"), значение - текст замены.
//		МакетКомпоновки - МакетКомпоновкиДанных - Макет компоновки, заголовки которого будут подменены.
//
Процедура УстановитьЗаголовкиМакетаКомпоновки(ПараметрыЗамены, МакетКомпоновки) Экспорт
	
	Если Не (ТипЗнч(ПараметрыЗамены) = Тип("Структура")
		Или ТипЗнч(ПараметрыЗамены) = Тип("Соответствие")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ТекМакет Из МакетКомпоновки.Макеты Цикл
		Если ТипЗнч(ТекМакет.Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТаблицыКомпоновки Из ТекМакет.Макет Цикл
			Для Каждого ЯчейкаТаблицыОбластиКомпоновки Из СтрокаТаблицыКомпоновки.Ячейки Цикл
				Для Каждого Элемент Из ЯчейкаТаблицыОбластиКомпоновки.Элементы Цикл
					Для каждого Поле Из ПараметрыЗамены Цикл
						СтрокаЗамены = "%" + Поле.Ключ + "%";
						Если СтрНайти(Элемент.Значение, СтрокаЗамены) > 0 Тогда
							Элемент.Значение = СтрЗаменить(Элемент.Значение, СтрокаЗамены, Поле.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет поиск представлений параметров по их имени
// и помещает найденные представления в переданный массив.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема отчета
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		Параметры - Массив - скрываемые из табличного документа отчета параметры
//		ИмяПараметра - Строка - имя скрываемого параметра отчета.
//
Процедура ДобавитьПредставленияПараметраВМассив(СхемаКомпоновкиДанных, КомпоновщикНастроек, Параметры, ИмяПараметра) Экспорт
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
	Если Не Параметр = Неопределено Тогда
		ЗаголовокПараметра = Параметр.Заголовок;
		
		ПараметрКомпоновки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ИмяПараметра);
		Если ЗначениеЗаполнено(ПараметрКомпоновки.ИдентификаторПользовательскойНастройки) Тогда
			ИдентификаторНастройки = ПараметрКомпоновки.ИдентификаторПользовательскойНастройки;
			Если НЕ КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки) = Неопределено Тогда
				ПользовательскоеПредставлениеПараметра = "";
			Иначе
				ПользовательскоеПредставлениеПараметра = ПараметрКомпоновки.ПредставлениеПользовательскойНастройки;
			КонецЕсли;
		Иначе
			ПользовательскоеПредставлениеПараметра = ПараметрКомпоновки.ПредставлениеПользовательскойНастройки;
		КонецЕсли;
		
		Параметры.Добавить(ЗаголовокПараметра);
		Параметры.Добавить(ПользовательскоеПредставлениеПараметра);
	КонецЕсли;
КонецПроцедуры

#Область СтандартныеСтроковыеПараметрыЗамены

// Возвращает структуру для подмены заголовков полей веса, объема и таблицы группировки количества по единицам измерения.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета.
//	ПереопределениеЗаголовков - Структура - позволяет переопределить заголовки, может содержать свойства:
//		* ИтогоВЕдиницахХранения - Строка -
//		* ИтогоВЕдиницахДляОтчетов - Строка -
//
// Возвращаемое значение:
//	Структура - в ключе задается шаблон замены заголовка, а в значении - значение замены.
//
Функция ЗаголовкиПолейЕдиницИзмерений(КомпоновщикНастроек, ПереопределениеЗаголовков = Неопределено) Экспорт
	
	СтруктураЗаголовков = Новый Структура;
	
	Если ПереопределениеЗаголовков = Неопределено Тогда
		ПереопределениеЗаголовков = Новый Структура;
	КонецЕсли;
	Если НЕ ПереопределениеЗаголовков.Свойство("ИтогоВЕдиницахХранения") Тогда
		ПереопределениеЗаголовков.Вставить("ИтогоВЕдиницахХранения", НСтр("ru='Итого товаров в единицах хранения'"));
	КонецЕсли;
	Если НЕ ПереопределениеЗаголовков.Свойство("ИтогоВЕдиницахДляОтчетов") Тогда
		ПереопределениеЗаголовков.Вставить("ИтогоВЕдиницахДляОтчетов", НСтр("ru='Итого товаров в единицах для отчетов'"));
	КонецЕсли;
	
	ЕдиницаВеса = Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	ЕдиницаОбъема = Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	
	ПараметрЕдиницыКоличества = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ЕдиницыКоличества");
	
	Если ПараметрЕдиницыКоличества <> Неопределено И ПараметрЕдиницыКоличества.Значение = 0 Тогда
		ЗаголовокЕдИзм = ПереопределениеЗаголовков.ИтогоВЕдиницахХранения;
	Иначе
		ЗаголовокЕдИзм = ПереопределениеЗаголовков.ИтогоВЕдиницахДляОтчетов;
	КонецЕсли;
	
	СтруктураЗаголовков.Вставить("ЕдиницаВеса", ЕдиницаВеса);
	СтруктураЗаголовков.Вставить("ЕдиницаОбъема", ЕдиницаОбъема);
	СтруктураЗаголовков.Вставить("ЗаголовокГруппировкиЕдИзм", ЗаголовокЕдИзм);

	Возврат СтруктураЗаголовков;
	
КонецФункции

// Возвращает соответствие для подмены заголовков полей веса, объема и таблицы группировки количества по единицам измерения.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета.
//
// Возвращаемое значение:
//	Соответствие - в ключе задается шаблон замены заголовка, а в значении - значение замены.
//
Функция СоответствиеЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек) Экспорт
	
	СоответствиеЗаголовков = Новый Соответствие;
	
	ЕдиницаВеса = Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	ЕдиницаОбъема = Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	
	ПараметрЕдиницыКоличества = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ЕдиницыКоличества");
	
	Если ПараметрЕдиницыКоличества <> Неопределено
		И ПараметрЕдиницыКоличества.Значение = 0 Тогда
		ЗаголовокЕдИзм = НСтр("ru='Итого товаров в единицах хранения'");
	Иначе
		ЗаголовокЕдИзм = НСтр("ru='Итого товаров в единицах для отчетов'");
	КонецЕсли;
	
	СоответствиеЗаголовков.Вставить("12", ЕдиницаВеса); // ЕдиницаВеса
	СоответствиеЗаголовков.Вставить("13", ЕдиницаОбъема); // ЕдиницаОбъема
	СоответствиеЗаголовков.Вставить("11", ЗаголовокЕдИзм); // ЗаголовокГруппировкиЕдИзм

	Возврат СоответствиеЗаголовков;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиОтчетов

// Процедура устанавливает формулу расчета и формат динамического периода
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - СКД отчета
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ДополнятьПериод - Булево - признак использования дополнения периода.
//		ДополнениеПути - Строка - Префикс к полю динамического периода, например, "Периоды."
//
Процедура НастроитьДинамическийПериод(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДополнятьПериод = Ложь, ДополнениеПути = "") Экспорт
	
	ПараметрПериодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	
	Если ПараметрПериодичность <> Неопределено 
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ДополнениеПути + "ДинамическийПериод")) Тогда
		
		ИскомоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ДополнениеПути + "ДинамическийПериод");
		
		Если ИскомоеПоле <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(ПараметрПериодичность.Значение) Тогда
				ВызватьИсключение НСтр("ru= 'Некорректная настройка параметра ""Периодичность"".'") ;
			КонецЕсли;
			
			ВыражениеПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(ПараметрПериодичность.Значение).Период;
			
			ИскомоеПоле.Выражение = ДополнениеПути + ВыражениеПериод;
			
			ПараметрОформленияФормат = ИскомоеПоле.Оформление.Элементы.Найти("Формат");
			ПараметрОформленияФормат.Значение = ФорматнаяСтрокаПериодовКомпоновкиДанных(ПараметрПериодичность.Значение);
			ПараметрОформленияФормат.Использование = Истина;
			
			Если ДополнятьПериод Тогда
				
				ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрПериодичность.Значение)];
				ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период"); // ЗначениеПараметраНастроекКомпоновкиДанных, Неопределено -
				
				Если ПараметрПериод <> Неопределено Тогда
					
					ПолеДинамическийПериод = Новый ПолеКомпоновкиДанных(ДополнениеПути + "ДинамическийПериод");
					Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(КомпоновщикНастроек);
					
					ЛитералыПоддерживаемыхПолейПериодов = "ПериодГод,ПериодПолугодие,ПериодКвартал,ПериодМесяц,ПериодДекада,ПериодНеделя,ПериодДень";
					ПоддерживаемыеПоляПериодов = СтрРазделить(ЛитералыПоддерживаемыхПолейПериодов, ",");
					
					Если ЗначениеЗаполнено(ДополнениеПути) Тогда
						Для каждого ЭлементСписка Из ПоддерживаемыеПоляПериодов Цикл
							ЭлементСписка = ДополнениеПути + ЭлементСписка;
						КонецЦикла;
					КонецЕсли;
					
					Для Каждого Группировка Из Группировки Цикл
						ЭлементГруппировки = Группировка.Значение; // ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных -
						ПоляГруппировкиЭлемента = ЭлементГруппировки.ПоляГруппировки;
						Если ПоляГруппировкиЭлемента.Элементы.Количество() = 1
							И ПоляГруппировкиЭлемента.Элементы[0].Поле = ПолеДинамическийПериод Тогда
							
							ГруппировкаДинамическийПериод = ЭлементГруппировки.ПоляГруппировки.Элементы[0];
							ГруппировкаРодитель = Группировка.Значение.Родитель;
							
							НачалоПериодаДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
							КонецПериодаДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
								
							// Включим дополнение периода в зависимости от размещения группировки
							ГруппировкаДинамическийПериод.ТипДополнения = ДополнениеПериода;
							
							// Корневой элемент или группировка первого уровня
							Если ТипЗнч(ГруппировкаРодитель) = Тип("НастройкиКомпоновкиДанных")
								Или ТипЗнч(ГруппировкаРодитель) = Тип("ТаблицаКомпоновкиДанных")
								Или ТипЗнч(ГруппировкаРодитель) = Тип("ДиаграммаКомпоновкиДанных") Тогда
								
								СтандартныйПериодПараметр = ПараметрПериод.Значение; // СтандартныйПериод -
								НачалоПериодаДополнения = СтандартныйПериодПараметр.ДатаНачала;
								КонецПериодаДополнения = СтандартныйПериодПараметр.ДатаОкончания;
								
							// Есть родительская группировка и в ней одно поле, что характерно для группировок по периодам.
							ИначеЕсли ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаКомпоновкиДанных")
									Или ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
									Или ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
							
								ЭлементыГруппировкиРодителя = ГруппировкаРодитель.ПоляГруппировки.Элементы;
								Если ЭлементыГруппировкиРодителя.Количество() = 1 Тогда
									
									ИндексПоддерживаемогоПериодаРодителя = ПоддерживаемыеПоляПериодов.Найти(Строка(ЭлементыГруппировкиРодителя[0].Поле));
									Если ИндексПоддерживаемогоПериодаРодителя <> Неопределено Тогда
										ПоддерживаемыйПериодРодитель = ПоддерживаемыеПоляПериодов[ИндексПоддерживаемогоПериодаРодителя];
										
										ТипДополненияПоРодительскойГруппировке = ТипДополненияПериодаКомпоновкиДанных[СтрЗаменить(ПоддерживаемыйПериодРодитель, "Период", "")];
										
										НачалоПериодаДополнения = ТипДополненияПоРодительскойГруппировке;
										КонецПериодаДополнения = ТипДополненияПоРодительскойГруппировке;
									
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
							ГруппировкаДинамическийПериод.НачалоПериода = НачалоПериодаДополнения;
							ГруппировкаДинамическийПериод.КонецПериода = КонецПериодаДополнения;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение параметра схемы компоновки данных
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема.
//	Параметр - Строка, ПараметрКомпоновкиДанных - имя параметра КД для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ПараметрСхемыКомпоновкиДанных, Неопределено - Значение параметра, если параметр не найден.
//
Функция ПолучитьПараметрСКД(СхемаКомпоновкиДанных, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		ЗначениеПараметра = СхемаКомпоновкиДанных.Параметры.Найти(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает параметр схемы компоновки данных
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки.
//	Параметр - Строка, ПараметрКомпоновкиДанных - параметр, который требуется установить.
//	Значение - Произвольный - значение, которое требуется установить.
//	Использование - Булево - признак использования параметра КД.
//
// Возвращаемое значение:
//	ПараметрСхемыКомпоновкиДанных - установленный параметр настроек КД. Неопределено, если параметр не найден.
//
Функция УстановитьПараметрСКД(СхемаКомпоновкиДанных, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрСКД(СхемаКомпоновкиДанных, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если ТипЗнч(СхемаКомпоновкиДанных) <> Тип("СхемаКомпоновкиДанных") Тогда
			ЗначениеПараметра.Использование	= Использование;
		КонецЕсли;
		ЗначениеПараметра.Значение		= Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//	Элементы - КоллекцияДоступныхПолейКомпоновкиДанных - поля СКД.
//	ПолноеИмя - Строка - полное имя поля СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт
	
	МассивЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		ТекущееИмя = ТекущееИмя +"." + МассивЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции

// Получает и возвращает запрос из переданного макета компоновки данных
//
// Параметры:
//  Макет - МакетКомпоновкиДанных - макет, из которого требуется получить запрос.
//  ИмяНабораДанных - Строка - имя набора данных из макета, для которого получается запрос.
//
// Возвращаемое значение:
//	Строка - запрос, сформированный на основании макета компоновки.
//
Функция ПолучитьЗапросИзМакетаКомпоновки(Макет, ИмяНабораДанных) Экспорт

	Запрос = Новый Запрос(Макет.НаборыДанных[ИмяНабораДанных].Запрос);

	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	Возврат Запрос;

КонецФункции

// Получает и возвращает макет компоновки данных для схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - СхемаКомпоновкиДанных - для которой получается макет компоновки
//  Настройки - НастройкиКомпоновкиДанных - применяются к схеме.
//
// Возвращаемое значение:
//	МакетКомпоновкиДанных - макет, скомпилированный из схемы и настроек.
//
Функция ПолучитьМакетКомпоновки(СхемаКомпоновки, Настройки) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Возврат КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

КонецФункции

// Удаляет отбор из настроек и пользовательских настроек отчета
// Если переданы настройки компоновки данных, то только из них.
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных - Настройки.
//  ИмяЭлемента  - Строка - имя элемента, который будет удален.
//
Процедура УдалитьЭлементОтбораИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиКомпоновкиДанных) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиКомпоновкиДанных) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, ИмяЭлемента); // Массив Из ЭлементОтбораКомпоновкиДанных
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		Если ЭлементОтбора.Родитель <> Неопределено Тогда
			ЭлементОтбора.Родитель.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
		
		ЭлементПользовательскихНастроек = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено Тогда
			ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
		Иначе
			Для Каждого ЭлементПользНастроек Из ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементПользНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
					ЭлементыПользовательскихОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ЭлементПользНастроек, ИмяЭлемента);
					Для Каждого ЭлементПользовательскогоОтбора Из ЭлементыПользовательскихОтборов Цикл
						ЭлементПользНастроек.Элементы.Удалить(ЭлементПользовательскогоОтбора);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет параметр из пользовательских настроек отчета
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - Настройки
//  ИмяПараметра  - Строка - имя параметра, который будет удален.
//
Процедура УдалитьПараметрИзПользовательскихНастроекОтчета(НастройкиКомпоновкиДанных, ИмяПараметра) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЗначениеПоиска = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЭлементыПараметрыДанных = Настройки.ПараметрыДанных;
	
	ЭлементПараметрыДанных = ЭлементыПараметрыДанных.НайтиЗначениеПараметра(ЗначениеПоиска);
	Если ЭлементПараметрыДанных <> Неопределено Тогда
		ЭлементПараметрыДанных.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Удаляет выбранное поле из настроек и пользовательских настроек отчета
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных -
//  ИменаЭлементов - Строка, Массив Из Строка - имя элемента, который будет удален.
//  ИскатьВГруппировках - Булево - Искать поле в выбранных полях группировок отчета первого уровня.
//
Процедура УдалитьВыбранноеПолеИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИменаЭлементов, ИскатьВГруппировках = Ложь) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиКомпоновкиДанных) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиКомпоновкиДанных) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
		КоллекцияИменЭлементов = Новый Массив;
	Иначе
		КоллекцияИменЭлементов = ИменаЭлементов;
	КонецЕсли;
	
	ЗначенияПоиска = Новый Массив;
	Для Каждого ИмяЭлемента Из КоллекцияИменЭлементов Цикл
		ЗначенияПоиска.Добавить(Новый ПолеКомпоновкиДанных(ИмяЭлемента));
	КонецЦикла;
	
	МассивЭлементов = Новый Массив; // Массив из ВыбранноеПолеКомпоновкиДанных -
	
	ВыбранныеПоля = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	НайтиВыбранноеПолеРекурсивно(ВыбранныеПоля.Элементы, МассивЭлементов, ЗначенияПоиска);
	
	Если ИскатьВГруппировках Тогда
		Для Каждого ЭлементСтруктурыОтчета Из Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктурыОтчета) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				НайтиВыбранноеПолеРекурсивно(ЭлементСтруктурыОтчета.Выбор.Элементы, МассивЭлементов, ЗначенияПоиска);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		ИдентификаторПользовательскойНастройкиЭлемента = Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(Элемент);
		Если Элемент.Родитель <> Неопределено Тогда
			Элемент.Родитель.Элементы.Удалить(Элемент);
		Иначе
			ВыбранныеПоля.Элементы.Удалить(Элемент);
		КонецЕсли;
		
		ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройкиВыбранныхПолей);
		Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
			ЭлементПользовательскихНастроек = ПользовательскиеНастройкиВыбранныхПолей.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройкиЭлемента);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				Если ЭлементПользовательскихНастроек.Родитель <> Неопределено Тогда
					ЭлементПользовательскихНастроек.Родитель.Элементы.Удалить(ЭлементПользовательскихНастроек);
				Иначе
					ПользовательскиеНастройкиВыбранныхПолей.Элементы.Удалить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Удаляет выбранное поле из настроек и пользовательских настроек отчета
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных - 
//  ИмяЭлемента - Строка - имя элемента, родитель которого будет удален.
//
Процедура УдалитьГруппуВыбранногоПоляИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиКомпоновкиДанных) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиКомпоновкиДанных) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	МассивЭлементов = Новый Массив; // Массив из ВыбранноеПолеКомпоновкиДанных -
	
	ВыбранныеПоля = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	НайтиВыбранноеПолеРекурсивно(ВыбранныеПоля.Элементы, МассивЭлементов, ЗначениеПоиска);
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		ИдентификаторПользовательскойНастройкиЭлемента = Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(Элемент);;
		Если Элемент.Родитель <> Неопределено И Элемент.Родитель.Родитель <> Неопределено Тогда
			Элемент.Родитель.Родитель.Элементы.Удалить(Элемент.Родитель);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройкиВыбранныхПолей);
		Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
			ЭлементПользовательскихНастроек = ПользовательскиеНастройкиВыбранныхПолей.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройкиЭлемента);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				Если ЭлементПользовательскихНастроек.Родитель <> Неопределено Тогда
					ЭлементПользовательскихНастроек.Родитель.Элементы.Удалить(ЭлементПользовательскихНастроек);
				Иначе
					ПользовательскиеНастройкиВыбранныхПолей.Элементы.Удалить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет группировку из настроек и пользовательских настроек отчета
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - Настройки.
//  ИмяЭлемента - Строка - имя элемента, который будет удален.
//
Процедура УдалитьГруппировкуИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ЗначениеПоиска  = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	СоответствиеЭлементов = Новый Соответствие;
	
	СтруктураГруппировок   = Настройки.Структура;
	
	НайтиГруппировкуРекурсивно(СтруктураГруппировок, СоответствиеЭлементов, ЗначениеПоиска);
	Для Каждого Группировка Из СоответствиеЭлементов Цикл
		ТекущийЭлементГруппировки = Группировка.Ключ; // ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных -
		Если ТекущийЭлементГруппировки.ПоляГруппировки.Элементы.Количество() = 1 Тогда
			Если ТипЗнч(ТекущийЭлементГруппировки.Родитель) = Тип("ТаблицаКомпоновкиДанных") Тогда
				КоллекцияКолонки = ТекущийЭлементГруппировки.Родитель.Колонки;
				КоллекцияСтроки  = ТекущийЭлементГруппировки.Родитель.Строки;
				Для каждого ЭлементГруппировки Из КоллекцияКолонки Цикл
					Если ЭлементГруппировки = Группировка.Ключ Тогда
						КоллекцияКолонки.Удалить(Группировка.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого ЭлементГруппировки Из КоллекцияСтроки Цикл
					Если ЭлементГруппировки = Группировка.Ключ Тогда
						КоллекцияСтроки.Удалить(Группировка.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ТекущийЭлементГруппировки.Родитель) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				КоллекцияСерии = ТекущийЭлементГруппировки.Родитель.Серии;
				КоллекцияТочки = ТекущийЭлементГруппировки.Родитель.Точки;
				Для каждого ЭлементГруппировки Из КоллекцияСерии Цикл
					Если ЭлементГруппировки = Группировка.Ключ Тогда
						КоллекцияСерии.Удалить(Группировка.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого ЭлементГруппировки Из КоллекцияТочки Цикл
					Если ЭлементГруппировки = Группировка.Ключ Тогда
						КоллекцияТочки.Удалить(Группировка.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ТекущийЭлементГруппировки.Родитель.Структура.Удалить(Группировка.Ключ);
			КонецЕсли;
		Иначе
			ТекущийЭлементГруппировки.ПоляГруппировки.Элементы.Удалить(Группировка.Значение);
		КонецЕсли;
		
		ИдентификаторПользовательскойНастройкиЭлемента = ТекущийЭлементГруппировки.ИдентификаторПользовательскойНастройки;
		
		ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройкиЭлемента);
		Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
			ЭлементПользовательскихНастроек = ПользовательскиеНастройкиВыбранныхПолей.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройкиЭлемента);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				Если ЭлементПользовательскихНастроек.Родитель <> Неопределено Тогда
					ЭлементПользовательскихНастроек.Родитель.Элементы.Удалить(ЭлементПользовательскихНастроек);
				Иначе
					ПользовательскиеНастройкиВыбранныхПолей.Элементы.Удалить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Отключает использование выбранного поле в пользовательских настройках отчета
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - Настройки
//  ИмяЭлемента - Строка - имя элемента, который будет отключен.
//
Процедура ОтключитьВыбранноеПолеВПользовательскихНастройках(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ВыбранныеПоля = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(
		ИдентификаторПользовательскойНастройкиВыбранныхПолей);
	
	Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
		
		ЗначениеПоиска  = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		МассивЭлементов = Новый Массив;
		
		НайтиВыбранноеПолеРекурсивно(ПользовательскиеНастройкиВыбранныхПолей.Элементы, МассивЭлементов, ЗначениеПоиска);
		Для Каждого Элемент Из МассивЭлементов Цикл
			Элемент.Использование = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Включает использование выбранного поле в пользовательских настройках отчета
//
// Параметры:
//  НастройкиКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - Настройки
//  ИмяЭлемента - Строка - имя элемента, который будет отключен.
//
Процедура ВключитьВыбранноеПолеВПользовательскихНастройках(НастройкиКомпоновкиДанных, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	ВыбранныеПоля = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(
		ИдентификаторПользовательскойНастройкиВыбранныхПолей);
	
	Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
		
		ЗначениеПоиска  = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		МассивЭлементов = Новый Массив;
		
		НайтиВыбранноеПолеРекурсивно(ПользовательскиеНастройкиВыбранныхПолей.Элементы, МассивЭлементов, ЗначениеПоиска);
		Для Каждого Элемент Из МассивЭлементов Цикл
			Элемент.Использование = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает структуру отчета от удаляемых полей.
//
// Параметры:
//  СтруктураОтчета - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных 
//  УдаляемыеПоля  - Массив - содержит поля компоновки, которые необходимо удалить из структуры отчета.
//
Процедура ОчиститьСтруктуруПоФункциональнымОпциям(СтруктураОтчета, УдаляемыеПоля) Экспорт

	Для Каждого ЭлементСтруктуры Из СтруктураОтчета Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			Или ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			ОчиститьСтруктуруПоФункциональнымОпциям(ЭлементСтруктуры.Структура, УдаляемыеПоля);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ОчиститьСтруктуруПоФункциональнымОпциям(ЭлементСтруктуры.Строки, УдаляемыеПоля);
			Продолжить;
			
		КонецЕсли;
		
		ПоляГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы;
		Индекс = ПоляГруппировки.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Если Не УдаляемыеПоля.Найти(ПоляГруппировки[Индекс].Поле) = Неопределено Тогда
				ПоляГруппировки.Удалить(ПоляГруппировки[Индекс]);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметризуемые заголовки выбранных полей компоновки данных.
//
// Параметры:
//	Поля - ВыбранныеПоляКомпоновкиДанных - поля компоновки данных, у которых требуется установить заголовки.
//	Параметры - Структура, Соответствие - параметры замены текста заголовка поля компоновки данных.
//											Ключ определяет текст, заданный в схеме компоновки (обрамленный знаками "%").
//											Значение - текст замены.
//
Процедура УстановитьЗаголовкиВыбранныхПолей(Поля, Параметры) Экспорт
	
	Если Не (ТипЗнч(Параметры) = Тип("Структура")
		Или ТипЗнч(Параметры) = Тип("Соответствие")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Поле Из Поля Цикл
		Если ТипЗнч(Поле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Параметр Из Параметры Цикл
			СтрокаЗамены = "%" + Параметр.Ключ + "%";
			
			Если СтрНайти(Поле.Заголовок, СтрокаЗамены) > 0 Тогда
				Поле.Заголовок = СтрЗаменить(Поле.Заголовок, СтрокаЗамены, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(Поле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			УстановитьЗаголовкиВыбранныхПолей(Поле.Элементы, Параметры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметризуемые заголовки полей группировки компоновки данных.
//
// Параметры:
//	Поля - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных, КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных - поля компоновки данных, у которых требуется установить заголовки.
//	Параметры - Структура, Соответствие - параметры замены текста заголовка поля компоновки данных.
//											Ключ определяет текст, заданный в схеме компоновки (обрамленный знаками "%").
//											Значение - текст замены.
//
Процедура УстановитьЗаголовкиПолейГруппировки(Поля, Параметры) Экспорт
	
	Если Не (ТипЗнч(Параметры) = Тип("Структура")
		Или ТипЗнч(Параметры) = Тип("Соответствие")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрЗаголовок = Новый ПараметрКомпоновкиДанных("Заголовок");
	
	Для Каждого Поле Из Поля Цикл
		Если ТипЗнч(Поле) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрВыводаЗаголовка = Поле.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрЗаголовок);
		
		Если ПараметрВыводаЗаголовка.Использование Тогда
			Для Каждого Параметр Из Параметры Цикл
				СтрокаЗамены = "%" + Параметр.Ключ + "%";
				
				Если СтрНайти(ПараметрВыводаЗаголовка.Значение, СтрокаЗамены) > 0 Тогда
					ПараметрВыводаЗаголовка.Значение = СтрЗаменить(ПараметрВыводаЗаголовка.Значение, СтрокаЗамены, Параметр.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыИВыраженияСистемыКомпоновкиДанных

// Возвращает непечатный символ по имени
//
// Параметры:
//	ИмяСимвола - Строка - имя непечатного символа как оно задано в системном перечислении Символы.
//
// Возвращаемое значение:
//	Строка - значение символа
//
Функция ЗначениеСимвола(ИмяСимвола) Экспорт
	ВозвращаемыйСимвол = "";
	
	Если ИмяСимвола = "ВК" Тогда
		ВозвращаемыйСимвол = Символы.ВК;
	ИначеЕсли ИмяСимвола = "Втаб" Тогда
		ВозвращаемыйСимвол = Символы.ВТаб;
	ИначеЕсли ИмяСимвола = "НПП" Тогда
		ВозвращаемыйСимвол = Символы.НПП;
	ИначеЕсли ИмяСимвола = "ПС" Тогда
		ВозвращаемыйСимвол = Символы.ПС;
	ИначеЕсли ИмяСимвола = "ПФ" Тогда
		ВозвращаемыйСимвол = Символы.ПФ;
	ИначеЕсли ИмяСимвола = "Таб" Тогда
		ВозвращаемыйСимвол = Символы.Таб;
	КонецЕсли;
	
	Возврат ВозвращаемыйСимвол
КонецФункции

// Полный аналог СтрЗаменить для использования в выражениях СКД
//
// Параметры:
//  Строка - Строка - Исходная строка. 
//  ПодстрокаПоиска - Строка - Искомая подстрока. 
//  ПодстрокаЗамены - Строка - Подстрока, на которую будет заменена подстрока поиска. 
//
// Возвращаемое значение:
//  Строка - полученная в результате замены.
//
Функция СтрЗаменитьКомпоновка(Строка, ПодстрокаПоиска, ПодстрокаЗамены) Экспорт
	Возврат СтрЗаменить(Строка, ПодстрокаПоиска, ПодстрокаЗамены);
КонецФункции

// Формирует новый макет компоновки после замены параметров в выражениях итоговых полей
// Вызывается из отчета СебестоимостьТоваров.
//
// Параметры:
//  МакетКомпоновкиДанных - МакетКомпоновкиДанных - исходный макет, сформированный в отчете 
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки отчета, в которой есть параметр ИспользуютсяОборотныеАналитики 
//							и этот параметр указан в выражениях итоговых полей
//	НастройкиОтчета - НастройкиКомпоновкиДанных - настройки, на основании которых будет формировать новый макет компоновки
//	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - данные расшифровки отчета.
//
Процедура ОптимизацияИспользованияОборотнойАналитики(МакетКомпоновкиДанных, СхемаКомпоновкиДанных, НастройкиОтчета, Знач ДанныеРасшифровки) Экспорт

	ИспользуетсяОборотнаяАналитика = Ложь;
	
	Для Каждого СвязьНаборовДанных Из МакетКомпоновкиДанных.СвязиНаборовДанных Цикл 
		Если СвязьНаборовДанных.НаборДанныхИсточник = "ОборотнаяАналитика" 
			Или СвязьНаборовДанных.НаборДанныхПриемник = "ОборотнаяАналитика" Тогда
			
			ИспользуетсяОборотнаяАналитика = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МакетКомпоновкиДанных.НаборыДанных.Найти("Документы") <> Неопределено Тогда
		ИспользуетсяОборотнаяАналитика = Истина;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ИспользуетсяОборотнаяАналитика", ИспользуетсяОборотнаяАналитика);
	
	Для Каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл 
		Если СтрНайти(ПолеИтога.Выражение, "&ИспользуетсяОборотнаяАналитика") <> 0 Тогда
			ИмяПоляИтогаОсновнойАналитики = ПолеИтога.ПутьКДанным;
			ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяПоляИтогаОсновнойАналитики, ".");
			ИмяПоляИтогаПоДокументам = "Док_" + ЧастиИмени[ЧастиИмени.Количество()-1];
			ВыражениеИтога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сумма(%1)",
					?(ИспользуетсяОборотнаяАналитика, ИмяПоляИтогаПоДокументам, ИмяПоляИтогаОсновнойАналитики));
			ПолеИтога.Выражение = СтрЗаменить(ПолеИтога.Выражение, "&ИспользуетсяОборотнаяАналитика", ВыражениеИтога);
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

КонецПроцедуры

// Вычисляет порядковое место числа относительно других чисел массива после его сортировки.
//
// Параметры:
//	ДанныеГрупповойОбработкиКомпоновкиДанных - Структура - Структура со свойствами:
//	 *Данные - ТаблицаЗначений - обрабатываемая таблица СКД, место определяется для значений первой колонки
//	 *ТекущийЭлемент - СтрокаТаблицыЗначений - текущая строка таблицы значений.
//	ПорядокСортировки - НаправлениеСортировкиКомпоновкиДанных - определяет, сверху или снизу массива будет вычисляться порядковое место.
//
// Возвращаемое значение:
//	Число - поле СКД
//
Функция МестоВПорядке(ДанныеГрупповойОбработкиКомпоновкиДанных, ПорядокСортировки) Экспорт
	МестоВПорядке = 0;
	
	Данные			= ДанныеГрупповойОбработкиКомпоновкиДанных.Данные;
	ИмяПоля			= ДанныеГрупповойОбработкиКомпоновкиДанных.Данные.Колонки[0].Имя;
	
	Если ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент <> Неопределено Тогда
		ЗначениеПоля	= ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент[0];
		
		Если ЗначениеПоля = 0 Тогда
			Возврат	"<>";
		КонецЕсли;
		
		КопияДанных = Данные.Скопировать();
		КопияДанных.Сортировать(ИмяПоля + " " + ПорядокСортировки);
		
		ИскомаяСтрока = КопияДанных.Найти(ЗначениеПоля, ИмяПоля);
		
		Если ИскомаяСтрока <> Неопределено Тогда
			МестоВПорядке = КопияДанных.Индекс(ИскомаяСтрока) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МестоВПорядке;
КонецФункции

// Вычисляет сумму неклассифицированного оборота для отчетов, использующих оборотные аналитики
// Вызывается при расчете сумм ресурсов.
//
// Параметры:
//	ДанныеГрупповойОбработкиКомпоновкиДанных - Структура - Структура со свойствами:
//	 *Данные - ТаблицаЗначений - таблица данных.
//			Состав колонок обрабатываемых данных: 
//				"ИмяОборотнойАналитики" - колонка со значениями оборотной аналитики.
//				"ИмяРесурса" - колонка ресурсы основного набора данных.
//				"Об_ИмяРесурса" - колонка ресурса набора данных по документам. Имя образуется путем добавления
//						префикса "Об_" к имени колонки ИмяРесурса.
//				"Док_ИмяРесурса" - колонка ресурса набора данных по оборотным аналитикам. Имя образуется путем
//						добавления префикса "Об_" к имени колонки ИмяРесурса.
//	 *ТекущийЭлемент - СтрокаТаблицыЗначений - Текущая строка таблицы данных.
//	 *ВременныеДанныеОбработки - Структура - Структура со свойствами (не обязательны):
//	   **ОборотНакопительный - Число - Оборот накопительный.
//	   **НеклассифицированныйОборот - Число - Неклассифицированный оборот.
//	   **ОбработанноеЗначениеАналитики - Произвольный - Обработанное значение аналитики.
//	ИмяРесурса - Строка - имя обрабатываемого ресурса.
//	ИтогРесурса - Число, Null - Расчитанный итог.
//	ИмяОборотнойАналитики - Строка - имя обрабатываемой аналитики.
//	ЗначениеАналитики - Произвольный - Значение аналитики.
//
// Возвращаемое значение:
//	Число - итог по полю.
//
Функция КлассификацияОборота(ДанныеГрупповойОбработкиКомпоновкиДанных, ИмяРесурса, ИтогРесурса, ИмяОборотнойАналитики, ЗначениеАналитики) Экспорт
	Данные = ДанныеГрупповойОбработкиКомпоновкиДанных.Данные;
	ТекущаяСтрока = ДанныеГрупповойОбработкиКомпоновкиДанных.ТекущийЭлемент;
	ВременныеДанные = ДанныеГрупповойОбработкиКомпоновкиДанных.ВременныеДанныеОбработки;
	ЗначениеОборота = 0;
	
	Если Не ВременныеДанные.Свойство("ОборотНакопительный") Тогда
		ВременныеДанные.Вставить("ОборотНакопительный", 0);
	КонецЕсли;
	Если Не ВременныеДанные.Свойство("НеклассифицированныйОборот") Тогда
		ВременныеДанные.Вставить("НеклассифицированныйОборот", ?(ИтогРесурса = Null, 0, ИтогРесурса));
	КонецЕсли;
	Если Не ВременныеДанные.Свойство("ОбработанноеЗначениеАналитики") Тогда
		ВременныеДанные.Вставить("ОбработанноеЗначениеАналитики", Новый Соответствие);
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ОбновлятьВременныеДанные = 
			// Расчет на 1-ом уровне группировки
			(ЗначениеАналитики <> Null И ВременныеДанные.ОбработанноеЗначениеАналитики[ЗначениеАналитики] = Неопределено)
			// Расчет на 2-ом и более уровнях группировки
			ИЛИ (ЗначениеАналитики = Null И ВременныеДанные.ОбработанноеЗначениеАналитики.Количество() = 0);

		Если ТекущаяСтрока["Док_"+ ИмяРесурса] = Null Тогда
			ЗначениеОборота = 0;
		ИначеЕсли ТекущаяСтрока["Об_"+ ИмяРесурса] > ТекущаяСтрока["Док_"+ ИмяРесурса] Тогда
			ЗначениеОборота = ТекущаяСтрока["Док_"+ ИмяРесурса];
		Иначе
			ЗначениеОборота = ТекущаяСтрока["Об_"+ ИмяРесурса];
		КонецЕсли;
		
		ЗначениеОборота = ?(ЗначениеОборота = Null, 0, ЗначениеОборота);
		
		Если ОбновлятьВременныеДанные Тогда
			ВременныеДанные.Вставить("ОборотНакопительный", 
				ВременныеДанные.ОборотНакопительный + ЗначениеОборота);
				
			ВременныеДанные.Вставить("НеклассифицированныйОборот", 
				ВременныеДанные.НеклассифицированныйОборот - ЗначениеОборота);
		КонецЕсли;
		
		Если ЗначениеАналитики = Null Тогда
			ЗначениеОборота = ВременныеДанные.НеклассифицированныйОборот;
		КонецЕсли;
		
		ВременныеДанные.ОбработанноеЗначениеАналитики.Вставить(ЗначениеАналитики, ЗначениеАналитики);
	Иначе 
		Если Данные.Итог("Док_"+ ИмяРесурса) = Null Тогда
			ЗначениеОборота = 0;
		ИначеЕсли Данные.Итог("Об_"+ ИмяРесурса) > Данные.Итог("Док_"+ ИмяРесурса) Тогда
			ЗначениеОборота = Данные.Итог("Док_"+ ИмяРесурса);
		Иначе
			ЗначениеОборота = Данные.Итог("Об_"+ ИмяРесурса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеОборота;
КонецФункции

Функция ГраницаПериода(Дата, ВидГраницыИмяЗначения) Экспорт
	Возврат Новый Граница(Дата, ВидГраницы[ВидГраницыИмяЗначения]);
КонецФункции

// Вычисляет модуль
//
// Параметры:
// 	Число - Число
//
// Возвращаемое значение:
// Число - Модуль числа 
//
Функция МодульЧисла(Число) Экспорт
	
	Если ТипЗнч(Число) = Тип("Число") Тогда
		Возврат Макс(Число, -Число);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСхемойКомпоновкиДанных
	
// Возвращает пустую схему СКД
//
// Параметры:
//  ИмяИсточника - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ТипИсточника - Строка - тип источника данных новой схему компоновки данных (необязательное по умолчанию "Local").
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - пустая схема компоновки данных.
//
Функция ПустаяСхема(ИмяИсточника = "ИсточникДанных1", ТипИсточника = "Local") Экспорт
	
	НоваяСхема = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = НоваяСхема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ИмяИсточника;
	ИсточникДанных.ТипИсточникаДанных = ТипИсточника;
	
	Возврат НоваяСхема;
	
КонецФункции

// Возвращается независимую копию исходной схемы компоновки данных
//
// Параметры:
//  ИсходнаяСхема - СхемаКомпоновкиДанных - схема, которую требуется скопировать.
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - новая схема компоновки данных с настройками, идентичными исходной схеме.
//
Функция СкопироватьСхемуКомпоновкиДанных(ИсходнаяСхема) Экспорт
	
	Если ТипЗнч(ИсходнаяСхема) = Тип("СхемаКомпоновкиДанных") Тогда
		
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(ИсходнаяСхема));
		
	Иначе
		
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

// Добавляет новый набор данных заданного типа и возвращает ссылку на него
//
// Параметры:
//  СхемаНабор - СхемаКомпоновкиДанных -
//  			- НаборыДанныхСхемыКомпоновкиДанных -
//  			- НаборДанныхОбъединениеСхемыКомпоновкиДанных - схема или набор компоновки данных, в которой необходимо создать новый набор.
//  ТипНабора - Тип - Тип нового набора (необязательное по умолчанию "НаборДанныхЗапросСхемыКомпоновкиДанных")
//  					Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
//  					Тип("НаборДанныхОбъектСхемыКомпоновкиДанных").
//  ИмяНабора - Строка - имя нового набора (необязательное по умолчанию "НаборДанных1")
//  ИмяИсточника - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ИмяОбъекта - Строка - имя внешнего источника данных (необязательное по умолчанию равно имени набора данных).
//
// Возвращаемое значение:
//  НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - новый набор данных заданного типа.
//
Функция ДобавитьПустойНаборДанных(СхемаНабор, ТипНабора = Неопределено, ИмяНабора = "НаборДанных1", ИмяИсточника = "ИсточникДанных1", ИмяОбъекта = "") Экспорт
	
	Если ТипНабора = Неопределено Тогда
		ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	КонецЕсли;
	
	Если ТипЗнч(СхемаНабор) = Тип("СхемаКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор.НаборыДанных;
		
	ИначеЕсли ТипЗнч(СхемаНабор) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор;
		
	ИначеЕсли ТипЗнч(СхемаНабор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор.Элементы;
		
	КонецЕсли;
	
	НовыйНабор = НаборыДанных.Добавить(ТипНабора);
	
	НовыйНабор.Имя = ИмяНабора;
	Если Не ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
		И ЗначениеЗаполнено(ИмяИсточника) Тогда
		
		НовыйНабор.ИсточникДанных = ИмяИсточника;
		
	КонецЕсли;
	
	Если ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		НовыйНабор.ИмяОбъекта = ?(ЗначениеЗаполнено(ИмяОбъекта), ИмяОбъекта, ИмяНабора);
	КонецЕсли;
		
	Возврат НовыйНабор;
	
КонецФункции

// Позволяет копировать наборы данных из одной схемы в другую или внутри схемы.
// Возвращает массив ссылок на скопированные наборы в приемнике.
//
// Параметры:
// 	ПриемникНаборовДанных - СхемаКомпоновкиДанных - 
//							- НаборыДанныхСхемыКомпоновкиДанных -
//							- НаборДанныхОбъединениеСхемыКомпоновкиДанных - Набор приемник.
// 	ИсточникНаборовДанных - СхемаКомпоновкиДанных - 
//							НаборыДанныхСхемыКомпоновкиДанных -
//							НаборДанныхОбъединениеСхемыКомпоновкиДанных - 
//							НаборДанныхЗапросСхемыКомпоновкиДанных - 
//							НаборДанныхОбъектСхемыКомпоновкиДанных - Набор источник.
// 	ОсновноеИмяНабораДанных - Строка - имя набора данных в приемнике.
//									Если в приемнике уже есть набор данных с таким именем, то к имени будет добавлен очередной порядковый номер.
//									Если источник содержит несколько наборов данных, то основное имя применятся не будет.
//									Если источник содержит одно объединение, то основное имя будет применено только к нему.
//									Если имя не задано, то по возможности будут сохранятся исходные имена наборов данных.
//
// Возвращаемое значение:
// 	Массив из НаборыДанныхСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных, НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - ссылки
// 				на скопированные наборы в приемнике.
//
Функция СкопироватьНаборыДанных(ПриемникНаборовДанных, ИсточникНаборовДанных, ОсновноеИмяНабораДанных = "") Экспорт
	
	Перем СкопированныеНаборыДанных;
	
	СкопированныеНаборыДанных = Новый Массив;
	ЭтоОбъединение = Ложь;
	
	// Коллекция, в которую можно добавить набор данных
	Если ТипЗнч(ПриемникНаборовДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Приемник = ПриемникНаборовДанных.НаборыДанных;
	ИначеЕсли ТипЗнч(ПриемникНаборовДанных) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		Приемник = ПриемникНаборовДанных;
	ИначеЕсли ТипЗнч(ПриемникНаборовДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Приемник = ПриемникНаборовДанных.Элементы;
		ЭтоОбъединение = Истина;
	Иначе 
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
		
	// Коллекция, в которой содержатся наборы данных
	Если ТипЗнч(ИсточникНаборовДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Источник = ИсточникНаборовДанных.НаборыДанных;
	ИначеЕсли ТипЗнч(ИсточникНаборовДанных) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		Источник = ИсточникНаборовДанных;
	ИначеЕсли ТипЗнч(ИсточникНаборовДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Источник = ИсточникНаборовДанных.Элементы;
	ИначеЕсли ТипЗнч(ИсточникНаборовДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
		Или ТипЗнч(ИсточникНаборовДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		Источник = Новый Массив;
		Источник.Добавить(ИсточникНаборовДанных);
	Иначе 
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 2'") ;
	КонецЕсли;
		
	Для Каждого НаборИсточник Из Источник Цикл 
		ТипНабора = ТипЗнч(НаборИсточник);
		ИмяНабора = ?(ЗначениеЗаполнено(ОсновноеИмяНабораДанных), ОсновноеИмяНабораДанных, НаборИсточник.Имя);
		
		НовыйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(Приемник, ТипНабора, ИмяНабора);
		ЗаполнитьЗначенияСвойств(НовыйНабор, НаборИсточник, , "Имя");
		
		СкопированныеНаборыДанных.Добавить(НовыйНабор);
		
		Если ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			// Рекурсивно перенести наборы данных
			СкопированныеВРекурсии = СкопироватьНаборыДанных(НовыйНабор, НаборИсточник);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СкопированныеНаборыДанных, СкопированныеВРекурсии, Истина);
		КонецЕсли;
		
		СкопироватьПоляНабораДанных(НовыйНабор, НаборИсточник);
		
		Если ТипЗнч(ПриемникНаборовДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			СкопироватьПоляНабораДанных(ПриемникНаборовДанных, НовыйНабор, ЭтоОбъединение);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СкопированныеНаборыДанных;
	
КонецФункции

// Позволяет копировать поля из одного набора данных в другой.
// Если поле уже есть в приемнике, то оно пропускается.
// Возвращает массив ссылок на скопированные поля набора данных в приемнике.
//
// Параметры:
// 	ПриемникПолейНабораДанных - НаборДанныхОбъединениеСхемыКомпоновкиДанных - 
//								- НаборДанныхЗапросСхемыКомпоновкиДанных - 
//								- НаборДанныхОбъектСхемыКомпоновкиДанных - набор приемник.
// 	ИсточникПолейНабораДанных - НаборДанныхОбъединениеСхемыКомпоновкиДанных - 
//								- НаборДанныхЗапросСхемыКомпоновкиДанных - 
//								- НаборДанныхОбъектСхемыКомпоновкиДанных - набор источник.
// 	ДублироватьИмяВПутиПоля - Булево - признак необходимости приравнять путь к данным и выражение поля (по умолчанию Ложь).
//
// Возвращаемое значение:
// 	Массив из ПолеНабораДанныхСхемыКомпоновкиДанных, ПапкаПолейНабораДанныхСхемыКомпоновкиДанных - ссылки на скопированные поля набораданных в приемнике.
//
Функция СкопироватьПоляНабораДанных(ПриемникПолейНабораДанных, ИсточникПолейНабораДанных, ДублироватьИмяВПутиПоля = Ложь) Экспорт
	
	Перем СкопированныеПоляНабораДанных;
	
	СкопированныеПоляНабораДанных = Новый Массив;
	
	ПоляПриемника = ПриемникПолейНабораДанных.Поля;
	ПоляИсточника = ИсточникПолейНабораДанных.Поля;
	
	// Перенести поля, кроме свойств ПараметрыРедактирования, 
	Для Каждого ПолеИсточника Из ПоляИсточника Цикл 
		Если Не ПоляПриемника.Найти(ПолеИсточника.ПутьКДанным) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПолеИсточника) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ПолеПриемника = ФинансоваяОтчетностьСервер.НовоеПолеНабора(ПриемникПолейНабораДанных, "НовоеПоле");
			ЗаполнитьЗначенияСвойств(ПолеПриемника, ПолеИсточника);
			
			Если ДублироватьИмяВПутиПоля Тогда
				ПолеПриемника.ПутьКДанным = ПолеПриемника.Поле;
			КонецЕсли;
			
			ДоступныеЗначенияПоляИсточника = ПолеИсточника.ПолучитьДоступныеЗначения();
			Если Не ДоступныеЗначенияПоляИсточника = Неопределено Тогда
				ПолеПриемника.УстановитьДоступныеЗначения(ДоступныеЗначенияПоляИсточника);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПолеПриемника.Роль, ПолеИсточника.Роль);
		Иначе
			ПолеПриемника = ФинансоваяОтчетностьСервер.НоваяГруппаНабора(ПриемникПолейНабораДанных, "НоваяГруппа");
			ЗаполнитьЗначенияСвойств(ПолеПриемника, ПолеИсточника);
		КонецЕсли;
		
		СкопированныеПоляНабораДанных.Добавить(ПолеПриемника);
	КонецЦикла;
	
	Возврат СкопированныеПоляНабораДанных;
	
КонецФункции

// Создает новую связь наборов данных в переданной схеме.
// Возвращает объект созданной связи.
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, в которую нужно добавить связь.
// 	НаборДанныхИсточник - Строка -
//							- НаборДанныхОбъединениеСхемыКомпоновкиДанных -
//							- НаборДанныхЗапросСхемыКомпоновкиДанных -
//							- НаборДанныхОбъектСхемыКомпоновкиДанных - имя набора данных, от которого будет осуществляться связь.
// 	НаборДанныхПриемник - Строка -
//							- НаборДанныхОбъединениеСхемыКомпоновкиДанных -
//							- НаборДанныхЗапросСхемыКомпоновкиДанных -
//							- НаборДанныхОбъектСхемыКомпоновкиДанных - имя набора данных, к которому будет осуществляться связь.
// 	ВыражениеИсточник - Строка - выражение, по которому будет определяться значение связи источника.
// 	ВыражениеПриемник - Строка - выражение, по которому будет определяться значение связи приемника.
// 	Параметр - Строка - имя параметра, в который будет помещено значение связи источника.
// 	РазрешенСписокПараметров - Булево - возможность использования в качестве значения параметра список значений.
//
// Возвращаемое значение:
// 	СвязьНаборовДанныхСхемыКомпоновкиДанных - добавленная связь.
//
Функция ДобавитьСвязьНаборовДанных(СхемаКомпоновкиДанных, НаборДанныхИсточник, НаборДанныхПриемник, ВыражениеИсточник, ВыражениеПриемник, Параметр = Неопределено, РазрешенСписокПараметров = Ложь) Экспорт
	
	Перем НоваяСвязь;
	
	Если ТипЗнч(НаборДанныхИсточник) = Тип("Строка") Тогда
		ИмяНабораДанныхИсточника = НаборДанныхИсточник;
	ИначеЕсли ТипЗнч(НаборДанныхИсточник) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
		Или ТипЗнч(НаборДанныхИсточник) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
		Или ТипЗнч(НаборДанныхИсточник) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		ИмяНабораДанныхИсточника = НаборДанныхИсточник.Имя;
	Иначе 
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 2'") ;
	КонецЕсли;
	
	Если ТипЗнч(НаборДанныхПриемник) = Тип("Строка") Тогда
		ИмяНабораДанныхПриемника = НаборДанныхПриемник;
	ИначеЕсли ТипЗнч(НаборДанныхПриемник) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
		Или ТипЗнч(НаборДанныхПриемник) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
		Или ТипЗнч(НаборДанныхПриемник) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		ИмяНабораДанныхПриемника = НаборДанныхПриемник.Имя;
	Иначе 
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 3'") ;
	КонецЕсли;
	
	НоваяСвязь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	НоваяСвязь.НаборДанныхИсточник = ИмяНабораДанныхИсточника;
	НоваяСвязь.НаборДанныхПриемник = ИмяНабораДанныхПриемника;
	НоваяСвязь.ВыражениеИсточник = ВыражениеИсточник;
	НоваяСвязь.ВыражениеПриемник = ВыражениеПриемник;
	Если ЗначениеЗаполнено(Параметр) Тогда
		НоваяСвязь.Параметр = Параметр;
		НоваяСвязь.РазрешенСписокПараметров = РазрешенСписокПараметров;
	КонецЕсли;
	
	Возврат НоваяСвязь;
	
КонецФункции 

// Добавляет или перезаполняет свойства параметра в схеме компоновки данных
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, в которую нужно добавить параметры или найти и перезаполнить свойства.
//	ИмяПараметра - Строка - имя параметра.
//	ТипЗначения - Тип, Неопределено - тип значений параметра.
//	Значение - Произвольный, Неопределено - значение по умолчанию.
//	ИспользованиеВсегда - Булево - Истина, тогда параметры будет использоваться всегда. Ложь - автоматическое управление платформой.
//	ПерезаполнитьСуществующий - Булево - Истина, перед добавлением будет осуществляться поиск параметра с заданным именем.
//		Внимание, операция ресурсоемкая и следует включать только если нельзя проверить уникальность параметров иначе.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных - созданный или перезаполненный параметр.
// 
Функция ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, ТипЗначения = Неопределено, Значение = Неопределено, ИспользованиеВсегда = Истина, ПерезаполнитьСуществующий = Ложь) Экспорт
	
	Перем Параметр;
	
	Если Не ПерезаполнитьСуществующий Тогда
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Иначе
		Параметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
		ПараметрСуществует = Параметр <> Неопределено;
		
		Если Не ПараметрСуществует Тогда
			Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	Параметр.Имя = ИмяПараметра;
	Если ТипЗначения <> Неопределено Тогда
		Параметр.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		Параметр.Значение = Значение;
	КонецЕсли;
	
	Параметр.Использование = ?(ИспользованиеВсегда,
								ИспользованиеПараметраКомпоновкиДанных.Всегда,
								ИспользованиеПараметраКомпоновкиДанных.Авто);
	
	Возврат Параметр;
	
КонецФункции

// Добавляет отбор для сравнения со списком значений, выгруженных из указанной колонки таблицы.
// 
// Параметры:
//	ЭлементНастроекКомпоновки - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры компоновки данных
//	ТаблицаДанных - ТаблицаЗначений - таблица с данными
//	ИмяКолонки - Строка - имя колонки, со значениями которой будут сравнение в отборе.
//
Процедура ДобавитьОтборПоКолонкеТаблицыЗначений(ЭлементНастроекКомпоновки, ТаблицаДанных, ИмяКолонки) Экспорт
	
	Перем МассивЗначенийОтбора, СписокЗначений;
	
	МассивЗначенийОтбора = ТаблицаДанных.ВыгрузитьКолонку(ИмяКолонки);
	МассивЗначенийОтбора = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначенийОтбора);
	
	Если Не (МассивЗначенийОтбора.Количество() = 1 
		И ТипЗнч(МассивЗначенийОтбора[0]) = Тип("Null")) Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(МассивЗначенийОтбора);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ЭлементНастроекКомпоновки,
			ИмяКолонки,
			СписокЗначений,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

КонецПроцедуры

// Возвращает признак того, что хотя бы одно из переданных имен таблиц встречается в хотя бы одном тексте запроса одного
// из наборов данных.
// 
// Параметры:
//	НаборыДанных - НаборыДанныхСхемыКомпоновкиДанных - коллекция наборов данных
//	ИменаТаблиц - Массив - имена искомых таблиц.
//
// Возвращаемое значение:
//	Булево - Истина, имена таблиц встречаются в запросах наборов данных.
// 
Функция НаборыДанныхСсылаютсяВЗапросахНаТаблицы(НаборыДанных, ИменаТаблиц) Экспорт
	// Проверим запросы источников данных, на использование имени таблицы
	Для Каждого НаборДанных Из НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
				Запрос = НРег(НаборДанных.Запрос);
				СтрокаПоиска = НРег(ИмяТаблицы);
				Если СтрНайти(Запрос, СтрокаПоиска) > 0 Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Если НаборыДанныхСсылаютсяВЗапросахНаТаблицы(НаборДанных.Элементы, ИменаТаблиц) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Позволяет копировать параметры из одной схемы в другую или внутри схемы.
// Возвращает массив ссылок на скопированные параметры в приемнике.
// ВНИМАНИЕ. Параметры редактирования не переносятся.
//
// Параметры:
// 	ПриемникПараметров - СхемаКомпоновкиДанных - схема-приемник
//						- ПараметрыСхемыКомпоновкиДанных - коллекция-приемник параметров
// 	ИсточникПараметров - СхемаКомпоновкиДанных - схема-источник
//						- ПараметрыСхемыКомпоновкиДанных - коллекция-источник параметров
//	ПерезаполнитьСуществующий - Булево - Истина, перед добавлением будет осуществляться поиск параметра с заданным именем.
//		Внимание, операция ресурсоемкая и следует включать только если нельзя проверить уникальность параметров иначе.
//
//
// Возвращаемое значение:
// 	Массив - ссылки на скопированные параметры в приемнике:
// 		* Элементы - ПараметрКомпоновкиДанных - отдельный параметр.
//
Функция СкопироватьПараметры(ПриемникПараметров, ИсточникПараметров, ПерезаполнитьСуществующий = Ложь) Экспорт
	
	Перем СкопированныеПараметры;
	
	СкопированныеПараметры = Новый Массив;
	
	// Коллекция, в которую можно добавить набор данных
	Если ТипЗнч(ПриемникПараметров) = Тип("СхемаКомпоновкиДанных") Тогда
		Приемник = ПриемникПараметров.Параметры;
	ИначеЕсли ТипЗнч(ПриемникПараметров) = Тип("ПараметрыСхемыКомпоновкиДанных") Тогда
		Приемник = ПриемникПараметров;
	Иначе 
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 1'") ;
	КонецЕсли;
		
	// Коллекция, в которой содержатся наборы данных
	Если ТипЗнч(ИсточникПараметров) = Тип("СхемаКомпоновкиДанных") Тогда
		Источник = ИсточникПараметров.Параметры;
	ИначеЕсли ТипЗнч(ИсточникПараметров) = Тип("ПараметрыСхемыКомпоновкиДанных") Тогда
		Источник = ИсточникПараметров;
	Иначе 
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 2'") ;
	КонецЕсли;
		
	Для Каждого ПараметрИсточника Из Источник Цикл
		Если Не ПерезаполнитьСуществующий Тогда
			НовыйПараметр = Приемник.Добавить();
		Иначе
			НовыйПараметр = Приемник.Найти(ПараметрИсточника.Имя);
			
			Если НовыйПараметр = Неопределено Тогда
				НовыйПараметр = Приемник.Добавить();
			КонецЕсли;
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточника);
	КонецЦикла;
	
	Возврат СкопированныеПараметры;
	
КонецФункции

// Параметры функции КомпоновкаДанныхСервер.ВыгрузитьРезультатСКД
// 
// Возвращаемое значение:
//  Структура:
//  * СхемаКомпоновки - Строка - адрес во временном хранилище
//								или полное имя макета, например, Документ.РеализацияТоваровУслуг.ДанныеШаблонаСообщений.
//						- СхемаКомпоновкиДанных - собственно схема компоновки данных.
//  * НастройкиКомпоновки - Строка - адрес во временном хранилище настроек компоновки или имя варианта настроек компоновки.
//						- НастройкиКомпоновкиДанных - собственно настройки компоновки.
//						- Неопределено - будут применены настройки по умолчанию. 
//  * ОжидаемыеКолонки - ТаблицаЗначений - если колонки, описанные в макете, отключаются по ФО, то
//					в полученной после использования компоновки таблице(дереве) значений они будут отсутствовать,
//					если этот параметр передан, то функция дополнит полученную таблицу(дерево) значений недостающими
//					колонками.
//  * ВыполнятьВПривилегированномРежиме - Булево - значение по умолчанию Ложь.
//  * ТипРезультата - Строка - возможные значения: ""ТаблицаЗначений"", "ДеревоЗначений"", значение по умолчанию ""ТаблицаЗначений"".
//  * ВнешниеНаборыДанных - Структура, Неопределено - внешние наборы компоновки данных,
//									если передана структура, то ключ - наименование внешнего набора,
//									значение - таблица значений внешнего набора.
//  * ВозможностьИспользованияВнешнихФункций - Булево - Указывает возможность использования функции
//														общих модулей конфигурации в выражениях компоновки данных, значение
//														по умолчанию - Истина.
//
Функция ПараметрыВыгрузитьРезультатСКД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СхемаКомпоновки", "");
	Результат.Вставить("НастройкиКомпоновки", Неопределено);
	Результат.Вставить("ОжидаемыеКолонки", Новый ТаблицаЗначений);
	Результат.Вставить("ВыполнятьВПривилегированномРежиме", Ложь);
	Результат.Вставить("ВнешниеНаборыДанных", Неопределено);
	Результат.Вставить("ВозможностьИспользованияВнешнихФункций", Истина);
	Результат.Вставить("ТипРезультата", "ТаблицаЗначений");
	
	Возврат Результат;
	
КонецФункции

// Исполняет макет компоновки, применяя настройки, и возвращает таблицу значений или дерево значений
//
// Параметры:
//  Параметры - см. КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД
//  АдресВременногоХранилища - Строка - если в этом параметре передается адрес временного хранилища,
//  				то результатирующая таблица помещается по этому адресу.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Строка - результирующая таблица значений или ее адрес во временном хранилище 
//
Функция ВыгрузитьРезультатСКД(Параметры, АдресВременногоХранилища = "") Экспорт
	
	Если Параметры.ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	СхемаКомпоновки = СхемаКомпоновкиПоПараметру(Параметры.СхемаКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиКомпоновкиПоПараметру(СхемаКомпоновки, Параметры.НастройкиКомпоновки),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если Параметры.ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Параметры.ВозможностьИспользованияВнешнихФункций);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
			Параметры.ВнешниеНаборыДанных,,
			Параметры.ВозможностьИспользованияВнешнихФункций);
	КонецЕсли;
	
	Если Параметры.ТипРезультата = "ТаблицаЗначений" Тогда
		РезультирующаяТаблица = Новый ТаблицаЗначений;
	ИначеЕсли Параметры.ТипРезультата = "ДеревоЗначений" Тогда
		РезультирующаяТаблица = Новый ДеревоЗначений;
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестный тип результата %ТипРезультата%'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРезультата%", Параметры.ТипРезультата);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультирующаяТаблица);	
	РезультирующаяТаблица = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если Параметры.ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ОжидаемыеКолонки = Параметры.ОжидаемыеКолонки; // ТаблицаЗначений -
	Для Каждого Колонка Из ОжидаемыеКолонки.Колонки Цикл
		Если РезультирующаяТаблица.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			РезультирующаяТаблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;

	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультирующаяТаблица, АдресВременногоХранилища);
		Возврат АдресВременногоХранилища;
	Иначе
		Возврат РезультирующаяТаблица;
	КонецЕсли;
	
КонецФункции

// Инициализировать компоновщик настроек компоновки данных.
// Схему компоновки данных можно передать непосредственно в параметре, или задать имя (адрес) макета
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
//  СхемаКомпоновкиДанных - Строка, СхемаКомпоновкиДанных - адрес схемы компоновки временном хранилище
//											или полное имя макета, например, Документ.РеализацияТоваровУслуг.ДанныеШаблонаСообщений
//											или собственно схема компоновки.
//  НастройкиКомпоновки - Строка - адрес во временном хранилище настроек компоновки или имя варианта настроек компоновки.
//						- НастройкиКомпоновкиДанных - собственно настройки компоновки.
//						- Неопределено - будут применены настройки по умолчанию.
//
Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, Знач СхемаКомпоновкиДанных, Знач НастройкиКомпоновки = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиПоПараметру(СхемаКомпоновкиДанных);
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	НастройкиКомпоновки = НастройкиКомпоновкиПоПараметру(СхемаКомпоновкиДанных, НастройкиКомпоновки); 
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Заполняет массив элементов компоновки.
// 
// Параметры:
// 	КоллекцияЭлементов - КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных, КоллекцияВыбранныхПолейКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных, КоллекцияЭлементовПорядкаКомпоновкиДанных - Описание
// 	МассивЭлементов - Массив из ВыбранноеПолеКомпоновкиДанных - массив элементов.
// 	ЗначенияПоиска - ПолеКомпоновкиДанных, Массив из ПолеКомпоновкиДанных - Значение поиска.
Процедура НайтиВыбранноеПолеРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначенияПоиска) Экспорт

	Если ТипЗнч(ЗначенияПоиска) = Тип("ПолеКомпоновкиДанных") Тогда
		ЗначенияПоиска = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначенияПоиска);
	КонецЕсли;
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Для Каждого ЗначениеПоиска Из ЗначенияПоиска Цикл
				Если Элемент.Поле = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			
			Продолжить;
			
		Иначе
			
			НайтиВыбранноеПолеРекурсивно(Элемент.Элементы, МассивЭлементов, ЗначенияПоиска);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Получает полное имя поля по частям
//
// Параметры:
//	ПолноеИмя - Строка - полное имя поля СКД.
//
// Возвращаемое значение:
//	Массив из Строка - массив, содержащий части полного имени.
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = СтрНайти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = СтрНайти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//	Элементы - КоллекцияДоступныхПолейКомпоновкиДанных - поля СКД.
//	Имя - Строка - имя поля СКД
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СтруктураСерийЦветов(СерииДиаграммы)
	СтруктураСерийЦветов = Новый Структура;
	СтруктураЦвета = Новый Структура("Красный, Зеленый, Синий", 0, 0, 0);

	Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
		СтруктураЦветаСерии = Новый Структура; 
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СтруктураЦветаСерии, СтруктураЦвета, Истина);
		
		ВидЦветаСерии = СерияДиаграммы.Цвет.Вид;
		Если ВидЦветаСерии = ВидЦвета.WebЦвет Тогда
			МониторингЦелевыхПоказателей.ПолучитьКрасныйЗеленыйСинийВебЦвета(СерияДиаграммы.Цвет,
															СтруктураЦветаСерии.Красный,
															СтруктураЦветаСерии.Зеленый,
															СтруктураЦветаСерии.Синий);
		ИначеЕсли ВидЦветаСерии = ВидЦвета.Абсолютный Тогда 
			СтруктураЦветаСерии.Красный = СерияДиаграммы.Цвет.Красный;
			СтруктураЦветаСерии.Зеленый = СерияДиаграммы.Цвет.Зеленый;
			СтруктураЦветаСерии.Синий = СерияДиаграммы.Цвет.Синий;
		КонецЕсли;
		
		ОписаниеЦвета = "Цвет_"
						+ Строка(СтруктураЦветаСерии.Красный)
						+ "_"
						+ Строка(СтруктураЦветаСерии.Зеленый)
						+ "_"
						+ Строка(СтруктураЦветаСерии.Синий);
		Если Не СтруктураСерийЦветов.Свойство(ОписаниеЦвета) Тогда
			СтруктураСерийЦветов.Вставить(ОписаниеЦвета, Новый Структура);
			
			ОписаниеСерии = СтруктураСерийЦветов[ОписаниеЦвета]; // Структура: * Серии - Массив серий диаграммы
			ОписаниеСерии.Вставить("Серии", Новый Массив);
			ОписаниеСерии.Серии.Добавить(СерияДиаграммы);
			
			ОписаниеСерии.Вставить("Цвет", СтруктураЦветаСерии);
		Иначе
			ОписаниеСерии = СтруктураСерийЦветов[ОписаниеЦвета]; // Структура -
			МассивСерии = ОписаниеСерии.Серии; // Массив -
			МассивСерии.Добавить(СерияДиаграммы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураСерийЦветов;
КонецФункции

Процедура СформироватьГрадиентПоСериямЦветов(СтруктураСерийЦветов)
	Для Каждого СерияРазныхЦветов Из СтруктураСерийЦветов Цикл 
		ДанныеСерии = СерияРазныхЦветов.Значение; // Структура: * Серии - массив серий диаграммы
		ОбрабатываемыеСерии = ДанныеСерии.Серии;
		КоличествоСерий = ОбрабатываемыеСерии.Количество();
		
		Если КоличествоСерий = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветСерии = СерияРазныхЦветов.Значение.Цвет; // Цвет -
		
		Тон = 0; 
		Насыщенность = 0; 
		Светлота = 0;
		
		НомерСерии = 0;
		Для Каждого ОбрабатываемаяСерия Из ОбрабатываемыеСерии Цикл
			Если Тон + Насыщенность + Светлота = 0 Тогда
				МониторингЦелевыхПоказателей.ПолучитьТонНасыщенностьЯркостьПоКрасныйЗеленыйСиний(ЦветСерии["Красный"],
					ЦветСерии["Зеленый"],
					ЦветСерии["Синий"],
					Тон,
					Насыщенность,
					Светлота);
			КонецЕсли;
			
			// Установим коэффициент 0.8, чтобы градиент не уходил в белый цвет
			ШагГрадиентаСветлоты = 0.8 * (100 - Светлота) / (КоличествоСерий - 1);
			
			// Насыщенность ограничивать не требуется
			ШагГрадиентаНасыщенности = (100 - ?(Насыщенность = 0, 100, Насыщенность)) / (КоличествоСерий - 1);
			
			НовыйКрасный = 0; 
			НовыйЗеленый = 0;
			НовыйСиний = 0;
			
			МониторингЦелевыхПоказателей.ПолучитьКрасныйЗеленыйСинийПоТонуНасыщенностиЯркости(Тон, 
				Насыщенность + ШагГрадиентаНасыщенности * НомерСерии, 
				Светлота + ШагГрадиентаСветлоты * НомерСерии, 
				НовыйКрасный, НовыйЗеленый, НовыйСиний);
			
			НовыйЦветСерии = Новый Цвет(НовыйКрасный, НовыйЗеленый, НовыйСиний);
			
			ОбрабатываемаяСерия.Цвет = НовыйЦветСерии;
			
			НомерСерии = НомерСерии + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Устанавливает для переданной диаграммы стандартное оформление
// 
// Параметры:
//	Диаграмма - Диаграмма - изменяемая диаграмма
//	ПараметрыДиаграммы - Структура - структура параметров, соответствующих свойствам диаграммы.
//
Процедура УстановитьОформлениеПоУмолчаниюДиаграммы(Диаграмма, ПараметрыДиаграммы = Неопределено)
	// Оформление диаграммы
	ПараметрыДиаграммыПереданы = (ПараметрыДиаграммы <> Неопределено);
	
	Если ПараметрыДиаграммыПереданы Тогда
		ПараметрОтчет = Неопределено;
		ОтчетОбъектПередан = ПараметрыДиаграммы.Свойство("Отчет", ПараметрОтчет) 
			И ПараметрОтчет <> Неопределено;
		
		ПараметрРасширенноеОформлениеСерий = Ложь;
		ПараметрРасширенноеОформлениеСерий = ПараметрыДиаграммы.Свойство("РасширенноеОформлениеСерий", ПараметрРасширенноеОформлениеСерий)
			И ПараметрРасширенноеОформлениеСерий;
		
		ПараметрМаксимумСерий = 0;
		Если ПараметрыДиаграммы.Свойство("МаксимумСерийКоличество", ПараметрМаксимумСерий)
			И ПараметрМаксимумСерий > 0 И ПараметрМаксимумСерий <> 999 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Ограничено;
			Диаграмма.МаксимумСерийКоличество = ПараметрМаксимумСерий;
		ИначеЕсли ПараметрыДиаграммы.Свойство("МаксимумСерийПроцент", ПараметрМаксимумСерий)
			И ПараметрМаксимумСерий > 0 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.Процент;
			Диаграмма.МаксимумСерийПроцент = ПараметрМаксимумСерий;
		ИначеЕсли ПараметрМаксимумСерий = 999 И ПараметрМаксимумСерий <> 999 Тогда
			Диаграмма.МаксимумСерий = МаксимумСерий.НеЗадано;
		КонецЕсли;
		
		ПараметрТипДиаграммы = Неопределено;
		Если ПараметрыДиаграммы.Свойство("ТипДиаграммы", ПараметрТипДиаграммы) Тогда
			Если ПараметрТипДиаграммы <> "Произвольный" Тогда
				Диаграмма.ТипДиаграммы = ПараметрТипДиаграммы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Оформление области построения
	ОбластьПостроения = Диаграмма.ОбластьПостроения;
	ОбластьПостроения.ЦветШкалы = Метаданные.ЭлементыСтиля.ЦветШкалыДиаграммы.Значение;
	ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
	
	// Оформление области легенды
	ОбластьЛегенды = Диаграмма.ОбластьЛегенды;
	ОбластьЛегенды.Прокрутка = Истина;
	
	// Оформление серий и точек
	СерииДиаграммы = Диаграмма.Серии;
	ОтображениеМаркеровТочекДиаграмм = Ложь;
	Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
		Если ПараметрыДиаграммы.Свойство("ОтображениеМаркеровТочекДиаграмм", ОтображениеМаркеровТочекДиаграмм) Тогда
			УстановитьОформлениеПоУмолчаниюСерии(СерияДиаграммы, ОтображениеМаркеровТочекДиаграмм);
		Иначе
			УстановитьОформлениеПоУмолчаниюСерии(СерияДиаграммы);
		КонецЕсли;
		
		// Оформим серии диаграммы по расширенному алгоритму отчета
		Если ПараметрыДиаграммыПереданы И ОтчетОбъектПередан И ПараметрРасширенноеОформлениеСерий Тогда
			ПараметрОтчет.УстановитьРасширенноеОформлениеСерии(СерияДиаграммы);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыДиаграммы <> Неопределено Тогда
		ПараметрВыделениеСерийДиаграмм = Неопределено;
		ПараметрГрадиентСерийДиаграмм = Ложь;
		Если ПараметрыДиаграммы.Свойство("ВыделениеСерийДиаграмм", ПараметрВыделениеСерийДиаграмм)
			И ПараметрВыделениеСерийДиаграмм <> 0 
			И ПараметрыДиаграммы.Свойство("ГрадиентСерийДиаграмм", ПараметрГрадиентСерийДиаграмм) 
			И ПараметрГрадиентСерийДиаграмм Тогда
			СтруктураСерийЦветов = СтруктураСерийЦветов(СерииДиаграммы);
			СформироватьГрадиентПоСериямЦветов(СтруктураСерийЦветов);
		КонецЕсли;
	КонецЕсли;	

	УстановитьОформлениеПоУмолчаниюСводнойСерии(Диаграмма.СводнаяСерия);
КонецПроцедуры

Процедура УстановитьОформлениеПоУмолчаниюСерии(Серия, ОтображатьМаркерыТочек = Истина)
	// Устанавливаемые свойства серии
	Если Не ОтображатьМаркерыТочек Тогда
		Серия.Маркер = ТипМаркераДиаграммы.Нет;
	КонецЕсли;
КонецПроцедуры
 
Процедура УстановитьОформлениеПоУмолчаниюСводнойСерии(Серия)
	// Устанавливаемые свойства серии
	Серия.Маркер = ТипМаркераДиаграммы.Нет;
	Серия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 3);
	Серия.Цвет = Метаданные.ЭлементыСтиля.ЦветСводнойСерииДиаграммы.Значение;
КонецПроцедуры

Процедура УдалитьПараметрыОформленияДиаграмм(КомпоновщикНастроек, ТабличныйДокумент, ПараметрыДиаграмм)
	
	// Параметры, обрабатываемые в коде
	Если ПараметрыДиаграмм <> Неопределено Тогда
		ДоступныеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры;
		
		Для Каждого ПараметрДиаграмм Из ПараметрыДиаграмм Цикл
			ПараметрДиаграмм = ДоступныеПараметры.НайтиПараметр(Новый ПараметрКомпоновкиДанных(ПараметрДиаграмм.Ключ));
			
			Если ПараметрДиаграмм <> Неопределено Тогда
				НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(ПараметрДиаграмм.Заголовок);
				
				Если НайденнаяОбласть <> Неопределено Тогда
					УдаляемаяОбласть = ТабличныйДокумент.Область(НайденнаяОбласть.Верх,, НайденнаяОбласть.Низ);
					ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
					
					Если ТабличныйДокумент.ФиксацияСверху <> 0 Тогда
						ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ФиксацияСверху - 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Функция ФорматнаяСтрокаПериодовКомпоновкиДанных(Периодичность)
	ФорматнаяСтрока = "";
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ФорматнаяСтрока = НСтр("ru = 'ДЛФ=D'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматнаяСтрока = НСтр("ru = 'ДЛФ=D'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматнаяСтрока = НСтр("ru = 'ДЛФ=D'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматнаяСтрока = НСтр("ru = 'ДФ=''ММММ гггг'''");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматнаяСтрока = НСтр("ru = 'ДФ=''%1 ""кв."" гггг'''");
		ПараметрКварталаНаЯзыкеКода = "к";
		ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ФорматнаяСтрока, ПараметрКварталаНаЯзыкеКода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ФорматнаяСтрока = СтрШаблон(НСтр("ru = 'ДФ=%1'"), "MM.yyyy");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматнаяСтрока = НСтр("ru = 'ДФ=yyyy'");
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
КонецФункции

Процедура НайтиГруппировкуРекурсивно(КоллекцияЭлементов, СоответствиеЭлементов, ЗначениеПоиска)
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для Каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл
				Если ТипЗнч(ПолеГруппировки) <> Тип("АвтоПолеГруппировкиКомпоновкиДанных") 
						И ПолеГруппировки.Поле = ЗначениеПоиска
				Тогда
					СоответствиеЭлементов.Вставить(Элемент, ПолеГруппировки)
				КонецЕсли;
			КонецЦикла;
			НайтиГруппировкуРекурсивно(Элемент.Структура, СоответствиеЭлементов, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Строки, СоответствиеЭлементов, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Колонки, СоответствиеЭлементов, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Серии, СоответствиеЭлементов, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Точки, СоответствиеЭлементов, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// Настройки компоновки по параметру.
// 
// Параметры:
//  СхемаКомпоновки - СхемаКомпоновкиДанных
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных
// 
// Возвращаемое значение:
//  Произвольный, НастройкиКомпоновкиДанных - Настройки компоновки по параметру
Функция НастройкиКомпоновкиПоПараметру(СхемаКомпоновки, Знач НастройкиКомпоновки) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновки) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(НастройкиКомпоновки) Тогда
			
			НастройкиКомпоновки = ПолучитьИзВременногоХранилища(НастройкиКомпоновки);
			Если ТипЗнч(НастройкиКомпоновки) <> Тип("НастройкиКомпоновкиДанных") Тогда
				ТекстИсключения = НСтр("ru = 'По переданному адресу временного хранилища не удалось получить настройки компоновки данных.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Возврат НастройкиКомпоновки;
			
		Иначе
			
			Возврат СхемаКомпоновки.ВариантыНастроек[НастройкиКомпоновки].Настройки;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(НастройкиКомпоновки) = Тип("НастройкиКомпоновкиДанных") Тогда		
		
		Возврат НастройкиКомпоновки;
		
	Иначе 
		
		Возврат СхемаКомпоновки.НастройкиПоУмолчанию;
		
	КонецЕсли;
	
КонецФункции

Функция СхемаКомпоновкиПоПараметру(Знач СхемаКомпоновки) Экспорт
	
	Если ТипЗнч(СхемаКомпоновки) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(СхемаКомпоновки) Тогда
			
			СхемаКомпоновки = ПолучитьИзВременногоХранилища(СхемаКомпоновки);
			Если ТипЗнч(СхемаКомпоновки) <> Тип("СхемаКомпоновкиДанных") Тогда
				ТекстИсключения = НСтр("ru = 'По переданному адресу временного хранилища не удалось получить схему компоновки данных.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Возврат СхемаКомпоновки;
		Иначе
			Возврат ОбщегоНазначенияУТ.МакетПоИмени(СхемаКомпоновки);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СхемаКомпоновки) = Тип("СхемаКомпоновкиДанных") Тогда
		Возврат СхемаКомпоновки;
	Иначе
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Неподдерживаемый тип параметра ""%1""'"), "СхемаКомпоновки");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

