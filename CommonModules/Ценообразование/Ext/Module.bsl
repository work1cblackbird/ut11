////////////////////////////////////////////////////////////////////////////////
// Модуль "Ценообразование", содержит процедуры и функции для  проверки
// корректности документов установки цен и для обработки 
// пользователем введенных данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатуры);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатуры25);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.БонусныеБаллы);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.УсловияЗакупок);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.БонусныеБаллы;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
			
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам цен и скидок.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЦеныНоменклатуры");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЦеныНоменклатуры25");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЦеныНоменклатурыПоставщиков");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "БонусныеБаллы");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "УсловияЗакупок");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияВидовЦенЗаполняемыхПоДаннымИб

// Получить вид цены "Прайс-лист".
// 
// Параметры:
//  ЦенаВключаетНДС - Неопределено, Булево - Цена включает НДС
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыЦен - Вид цены "Прайс-лист".
Функция ВидЦеныПрайсЛист(ЦенаВключаетНДС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЦен.Ссылка,
	|	ВидыЦен.ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияВидовЦен.Действует)");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЦенаВключаетНДС = Неопределено Или Выборка.ЦенаВключаетНДС = ЦенаВключаетНДС  Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		ВидЦеныПрайсЛист = Справочники.ВидыЦен.СоздатьЭлемент();
		ВидЦеныПрайсЛист.ВалютаЦены = Константы.БазоваяВалютаПоУмолчанию.Получить();
		ВидЦеныПрайсЛист.ЦенаВключаетНДС = Истина;
		ВидЦеныПрайсЛист.ИспользоватьПриПродаже = Истина;
		ВидЦеныПрайсЛист.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
		ВидЦеныПрайсЛист.СхемаКомпоновкиДанных = "Типовой";
		ВидЦеныПрайсЛист.Идентификатор = "ПрайсЛист";
		ВидЦеныПрайсЛист.Наименование = НСтр("ru = 'Прайс-лист'");
		ВидЦеныПрайсЛист.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
		ВидЦеныПрайсЛист.Записать();
		
		Возврат ВидЦеныПрайсЛист.Ссылка;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиКорректностиЗаполненияДокументов

// Проверяет корректность заполнения документа установки цен номенклатуры
// Вызывается из процедуры документа "ОбработкаПроведения".
//
// Параметры:
//  ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо проверить корректность
//  ДеревоЦен             - ТаблицаЗначений - таблица цен номенклатуры документа, для которой необходимо проверить корректность
//  ВидыЦен               - Массив - массив видов цен для проверки наличия ранее установленных цен
//  ИспользуетсяЦенообразование25 - Булево - Флаг использования нового ценообразования
//  Отказ                 - Булево - Флаг отказа от проведения документа.
//
Процедура ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(ДокументУстановкиЦен,
	                                                                       ДеревоЦен,
	                                                                       ВидыЦен,
	                                                                       ИспользуетсяЦенообразование25 = Ложь,
	                                                                       Отказ) Экспорт
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	МассивПроверок    = Новый Массив();
	МассивПроверок.Добавить("ВременнаяТаблицаЦен");
	МассивПроверок.Добавить("ВременнаяТаблицаЦенБезДублей");
	МассивПроверок.Добавить("КорректностьТоваров");
	МассивПроверок.Добавить("НаличиеДублейТоваров");
	МассивПроверок.Добавить("НаличиеУстановленныхЦен");
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаЦен" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен2_5(ТекстЗапроса, ПараметрыЗапроса, ДеревоЦен);
			Иначе
				СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен(ТекстЗапроса, ПараметрыЗапроса, ДеревоЦен);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦенБезДублей" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен2_5(ТекстЗапроса);
			Иначе
				СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен(ТекстЗапроса);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "КорректностьТоваров" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросКорректностьТоваровДляРегистрацииЦен2_5(ТекстЗапроса);
			Иначе
				СформироватьЗапросКорректностьТоваровДляРегистрацииЦен(ТекстЗапроса);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "НаличиеДублейТоваров" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросНаличиеДублейДляРегистрацииЦен2_5(ТекстЗапроса);
			Иначе
				СформироватьЗапросНаличиеДублейДляРегистрацииЦен(ТекстЗапроса);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент = "НаличиеУстановленныхЦен" Тогда
			
			Если ИспользуетсяЦенообразование25 Тогда
				СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен2_5(ТекстЗапроса, ПараметрыЗапроса, ДокументУстановкиЦен, ВидыЦен);
			Иначе
				СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен(ТекстЗапроса, ПараметрыЗапроса, ДокументУстановкиЦен, ВидыЦен);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
	
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "КорректностьТоваров" Тогда
			
			СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен(Выборка, ДокументУстановкиЦен, ИспользуетсяЦенообразование25, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеДублейТоваров" Тогда
			
			СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен(Выборка, ДокументУстановкиЦен, ИспользуетсяЦенообразование25, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУстановленныхЦен" Тогда
			
			СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен(Выборка, ДокументУстановкиЦен, ИспользуетсяЦенообразование25, Отказ);
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПартнера()

// Проверяет корректность заполнения документа установки цен номенклатуры.
// Вызывается из процедуры документа "ОбработкаПроведения".
//
// Параметры:
//  ДокументУстановкиЦен	- ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика - Документ, для которого необходимо 
//								осуществить проверки.
//  ДеревоЦен				- ДеревоЗначений - дерево цен
//  Отказ					- Булево - Флаг отказа от проведения документа.
//
Процедура ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(ДокументУстановкиЦен,
	                                                                                 ДеревоЦен,
	                                                                                 Отказ) Экспорт
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	МассивПроверок    = Новый Массив();
	МассивПроверок.Добавить("ВременнаяТаблицаТовары");
	МассивПроверок.Добавить("КорректностьТоваров");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров") Тогда
		МассивПроверок.Добавить("КорректностьНоменклатурыПартнера");
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦенПоставщика(ТекстЗапроса, ПараметрыЗапроса, ДеревоЦен);
			
		ИначеЕсли ТекЭлемент = "КорректностьТоваров" Тогда
			
			СформироватьЗапросКорректностьТоваровДляРегистрацииЦенПоставщика(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьНоменклатурыПартнера" Тогда
			
			НоменклатураПартнеровСервер.СформироватьЗапросКорректностьЗаполненияНоменклатурыПартнера(ТекстЗапроса, ПараметрыЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
	
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "КорректностьТоваров" Тогда
			
			СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦенПоставщика(Выборка, ДокументУстановкиЦен, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьНоменклатурыПартнера" Тогда
			
			НоменклатураПартнеровСервер.СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПартнера(Выборка, ДокументУстановкиЦен, Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика()

#КонецОбласти

#Область ПроцедурыИФункцииПересчетаСуммВТабличныхЧастях

// Рассчитывает сумму скидки в зависимости от процента скидки
//
// Параметры:
//  ТекСтрока                         - СтрокаТабличнойЧасти - Строка табличной части Товары документа
//  ПересчитыватьАвтоматическуюСкидку - Булево - Истина, если в документе есть автоматические скидки
//  ОчищатьАвтоматическуюСкидку       - Булево - Истина, если необходимо очистить процент и сумму авто скидок
//  ПересчитыватьРучнуюСкидку         - Булево - Истина, если в документе есть ручные скидки
//  ЦенаВключаетНДС                   - Булево - Признак включения НДС в цену в документе.
//  ИмяКоличества                     - Строка - Имя поля количество.
//
Процедура ПересчитатьСуммыВСтроке(ТекСтрока,
	                              Знач ПересчитыватьАвтоматическуюСкидку,
	                              Знач ОчищатьАвтоматическуюСкидку,
	                              Знач ПересчитыватьРучнуюСкидку,
	                              Знач ЦенаВключаетНДС,
								  ИмяКоличества = "КоличествоУпаковок") Экспорт
	
	СуммаБезСкидки = ТекСтрока.Цена * ТекСтрока[ИмяКоличества];
	СуммаСоСкидкой = СуммаБезСкидки;   
	
	Если ПересчитыватьРучнуюСкидку Тогда
		Если  ТекСтрока.ПроцентРучнойСкидки <> 0 Тогда
			ТекСтрока.СуммаРучнойСкидки = СуммаБезСкидки * ТекСтрока.ПроцентРучнойСкидки / 100;
			СуммаСоСкидкой              = СуммаСоСкидкой - ТекСтрока.СуммаРучнойСкидки;
		КонецЕсли;
	КонецЕсли;
		
	Если ПересчитыватьАвтоматическуюСкидку Тогда
		
		Если ОчищатьАвтоматическуюСкидку Тогда
			
			ТекСтрока.ПроцентАвтоматическойСкидки = 0;
			ТекСтрока.СуммаАвтоматическойСкидки   = 0;
			
		ИначеЕсли ТекСтрока.ПроцентАвтоматическойСкидки <> 0 Тогда
			
			ТекСтрока.СуммаАвтоматическойСкидки = СуммаБезСкидки * ТекСтрока.ПроцентАвтоматическойСкидки / 100;
			СуммаСоСкидкой                      = СуммаСоСкидкой - ТекСтрока.СуммаАвтоматическойСкидки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрока.Сумма    = СуммаСоСкидкой;
	ТекСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, ЦенаВключаетНДС);
	ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
	
КонецПроцедуры // ПересчитатьСуммыВСтроке()

// Рассчитывает суммовые реквизиты строки исходя из реквизита "СуммаСНДС"
//
// Параметры:
//  СтрокаТаблицы - СтрокаТабличнойЧасти -  Строка табличной части Товары документа
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену в документе
//  АвтоматическаяСкидка - Булево - Истина, если в документе есть автоматические скидки
//  РучнаяСкидка - Булево - Истина, если в документе есть ручные скидки
//  ПересчитатьЦену - Булево - Истина, если требуется пересчитать цену.
//  ИмяКоличества - Строка - Имя поля количество.
//  СтавкаНДС - СправочникСсылка.СтавкиНДС, Неопределено - Ставка НДС. Используется, если одноименного реквизита нет в строке.
//
Процедура ПересчитатьСуммыВСтрокеПоСуммеСНДС(
	СтрокаТаблицы,
	Знач ЦенаВключаетНДС,
	Знач АвтоматическаяСкидка,
	Знач РучнаяСкидка,
	Знач ПересчитатьЦену = Ложь,
	ИмяКоличества = "КоличествоУпаковок",
	СтавкаНДС = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДСЧислом = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	Иначе
		СтавкаНДСЧислом = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТаблицы.СтавкаНДС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаСНДС) Тогда
		СтрокаТаблицы.СуммаНДС = Окр(СтрокаТаблицы.СуммаСНДС * (СтавкаНДСЧислом/(100+СтавкаНДСЧислом)), 2);
		СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаСНДС - ?(ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		
		ОбщийПроцентСкидки = ?(АвтоматическаяСкидка,СтрокаТаблицы.ПроцентАвтоматическойСкидки, 0)
			+ ?(РучнаяСкидка, СтрокаТаблицы.ПроцентРучнойСкидки, 0);
		
		СуммаБезСкидки = ?(ОбщийПроцентСкидки=0, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма * 100 / (100-ОбщийПроцентСкидки));
	Иначе
		Если СтрокаТаблицы.Количество = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТаблицы.Цена*СтрокаТаблицы[ИмяКоличества];
	КонецЕсли;
	
	Если АвтоматическаяСкидка Тогда
		СтрокаТаблицы.СуммаАвтоматическойСкидки = Окр(СуммаБезСкидки*СтрокаТаблицы.ПроцентАвтоматическойСкидки/100, 2);
	КонецЕсли;
	
	Если РучнаяСкидка Тогда
		СтрокаТаблицы.СуммаРучнойСкидки = Окр(СуммаБезСкидки*СтрокаТаблицы.ПроцентРучнойСкидки/100, 2);
	КонецЕсли;
	
	Если ПересчитатьЦену И СтрокаТаблицы[ИмяКоличества] <> 0 Тогда
		СтрокаТаблицы.Цена = СуммаБезСкидки / СтрокаТаблицы[ИмяКоличества];
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыВСтрокеПоСуммеСНДС()

// Осуществляет пересчет цен и сумм в тч Товары из валюты в валюту
//
// Параметры:
//  Документ                           - ДокументОбъект - Документ, для которого необходимо осуществить пересчет
//  СтараяВалюта                       - СправочникСсылка.Валюты - Валюта, из которой необходимо пересчитать цены 
//  НоваяВалюта                        - СправочникСсылка.Валюты - Валюта, в которую необходимо пересчитать цены
//  СтруктураКурсовСтаройВалюты        - Структура - Курс и кратность валюты, из которой необходимо пересчитать цены
//  СтруктураКурсовНовойВалюты         - Структура - Курс и кратность валюты, в которую необходимо пересчитать цены
//  ПересчитыватьСуммы                 - Булево - Флаг, определяющий необходимость пересчета полей Сумма и СуммаНДС
//  ПересчитыватьАвтоматическиеСкидки  - Булево - Флаг, определяющий необходимость пересчета автоматических скидок
//  ПересчитыватьРучныеСкидки          - Булево - Флаг, определяющий необходимость пересчета ручных скидок.
//
Процедура ПересчитатьСуммыВВалютуТовары(Документ,
	                                    Знач СтараяВалюта,
	                                    Знач НоваяВалюта,
	                                    Знач СтруктураКурсовСтаройВалюты,
	                                    Знач СтруктураКурсовНовойВалюты,
	                                    Знач ПересчитыватьСуммы = Истина,
	                                    Знач ПересчитыватьАвтоматическиеСкидки = Ложь,
	                                    Знач ПересчитыватьРучныеСкидки = Ложь
										) Экспорт
	
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		
		ТекСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
			ТекСтрока.Цена,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		Если ПересчитыватьСуммы Тогда
			ПересчитатьСуммыВСтроке(
				ТекСтрока,
				ПересчитыватьАвтоматическиеСкидки,
				Ложь,
				ПересчитыватьРучныеСкидки,
				Документ.ЦенаВключаетНДС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммыВВалютуТовары()

// Устарела. Осуществляет пересчет цен и сумм в тч Товары из валюты в валюту.
// Использовать Ценообразование.ПересчитатьСуммыТаблицыВВалюту
//
// Параметры:
//  Таблица                            - ТабличнаяЧасть -  Таблица, в которой необходим пересчет
//  ЦенаВключаетНДС                    - Булево - Истина, если цена включает ндс
//  СтараяВалюта                       - СправочникСсылка.Валюты - Валюта, из которой необходимо пересчитать цены 
//  НоваяВалюта                        - СправочникСсылка.Валюты - Валюта, в которую необходимо пересчитать цены
//  СтруктураКурсовСтаройВалюты        - Структура - Курс и кратность валюты, из которой необходимо пересчитать цены
//  СтруктураКурсовНовойВалюты         - Структура - Курс и кратность валюты, в которую необходимо пересчитать цены
//  ПересчитыватьАвтоматическиеСкидки  - Булево - Флаг, определяющий необходимость пересчета автоматических скидок
//  ПересчитыватьРучныеСкидки          - Булево - Флаг, определяющий необходимость пересчета ручных скидок.
//  ИмяКоличества                      - Строка - Имя поля количество.
//
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(
	Таблица,
	ЦенаВключаетНДС,
	Знач СтараяВалюта,
	Знач НоваяВалюта,
	Знач СтруктураКурсовСтаройВалюты,
	Знач СтруктураКурсовНовойВалюты,
	Знач ПересчитыватьАвтоматическиеСкидки = Ложь,
	Знач ПересчитыватьРучныеСкидки = Ложь,
	ИмяКоличества="КоличествоУпаковок") Экспорт
	
	ПараметрыПересчета = ПараметрыПересчетаСуммТаблицыВВалюту(ЦенаВключаетНДС, СтараяВалюта, НоваяВалюта);
	ПараметрыПересчета.СтруктураКурсовСтаройВалюты       = СтруктураКурсовСтаройВалюты;
	ПараметрыПересчета.СтруктураКурсовНовойВалюты        = СтруктураКурсовНовойВалюты;
	ПараметрыПересчета.ПересчитыватьАвтоматическиеСкидки = ПересчитыватьАвтоматическиеСкидки;
	ПараметрыПересчета.ПересчитыватьРучныеСкидки         = ПересчитыватьРучныеСкидки;
	ПараметрыПересчета.ИмяКоличества                     = ИмяКоличества;
	
	ПересчитатьСуммыТаблицыВВалюту(Таблица, ПараметрыПересчета);
	
КонецПроцедуры // ПересчитатьСуммыТабличнойЧастиВВалюту()

// Осуществляет пересчет цен и сумм в тч Товары из валюты в валюту
//
// Параметры:
//  Таблица            - ТабличнаяЧасть -  Таблица, в которой необходим пересчет
//  ПараметрыПересчета - см. ПараметрыПересчетаСуммТаблицыВВалюту
//
Процедура ПересчитатьСуммыТаблицыВВалюту(Таблица, ПараметрыПересчета) Экспорт
	
	СуммаКРаспределению = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
		Таблица.Итог("СуммаСНДС"),
		ПараметрыПересчета.СтруктураКурсовСтаройВалюты,
		ПараметрыПересчета.СтруктураКурсовНовойВалюты);
	
	МассивСумм = Новый Массив;
	Для н = 0 По Таблица.Количество()-1 Цикл
		
		ТекСтрока = Таблица[н];
		ТекСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
			ТекСтрока.Цена,
			ПараметрыПересчета.СтруктураКурсовСтаройВалюты,
			ПараметрыПересчета.СтруктураКурсовНовойВалюты);
		МассивСумм.Добавить(
			РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
				ТекСтрока.СуммаСНДС,
				ПараметрыПересчета.СтруктураКурсовСтаройВалюты,
				ПараметрыПересчета.СтруктураКурсовНовойВалюты));
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для н = 0 По Таблица.Количество()-1 Цикл
			
			ТекСтрока = Таблица[н];
			ТекСтрока.СуммаСНДС = МассивСумм[н];
			
			ПересчитатьСуммыВСтрокеПоСуммеСНДС(
				ТекСтрока,
				ПараметрыПересчета.ЦенаВключаетНДС,
				ПараметрыПересчета.ПересчитыватьАвтоматическиеСкидки,
				ПараметрыПересчета.ПересчитыватьРучныеСкидки,
				Истина,
				ПараметрыПересчета.ИмяКоличества,
				ПараметрыПересчета.СтавкаНДС);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыТабличнойЧастиВВалюту()

// Параметры пересчета сумм таблицы в валюту.
// 
// Параметры:
//  ЦенаВключаетНДС - Булево - Истина, если цена включает ндс
//  СтараяВалюта    - СправочникСсылка.Валюты - Валюта, из которой необходимо пересчитать цены
//  НоваяВалюта     - СправочникСсылка.Валюты - Валюта, в которую необходимо пересчитать цены
//  ДатаДокумента   - Дата - Дата документа
//  БазоваяВалюта     - СправочникСсылка.Валюты - Валюта, относительно которой получен курс
// 
// Возвращаемое значение:
//  Структура - описание:
// * ЦенаВключаетНДС                    - Булево - Истина, если цена включает ндс
// * СтараяВалюта                       - СправочникСсылка.Валюты - Валюта, из которой необходимо пересчитать цены
// * НоваяВалюта                        - СправочникСсылка.Валюты - Валюта, в которую необходимо пересчитать цены
// * ПересчитыватьАвтоматическиеСкидки  - Булево - Флаг, определяющий необходимость пересчета автоматических скидок
// * ПересчитыватьРучныеСкидки          - Булево - Флаг, определяющий необходимость пересчета ручных скидок
// * ИмяКоличества                      - Строка - Имя поля количество
// * СтавкаНДС                          - СправочникСсылка.СтавкиНДС - общая для всех строк таблицы ставка НДС
// * СтруктураКурсовСтаройВалюты        - Структура из см. РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты - Курс и кратность валюты, из которой необходимо пересчитать цены
// * СтруктураКурсовНовойВалюты         - Структура из см. РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты - Курс и кратность валюты, в которую необходимо пересчитать цены
Функция ПараметрыПересчетаСуммТаблицыВВалюту(ЦенаВключаетНДС, СтараяВалюта, НоваяВалюта, ДатаДокумента = Неопределено, БазоваяВалюта = Неопределено) Экспорт
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ЦенаВключаетНДС",                   ЦенаВключаетНДС);
	ПараметрыПересчета.Вставить("СтараяВалюта",                      СтараяВалюта);
	ПараметрыПересчета.Вставить("НоваяВалюта",                       НоваяВалюта);
	ПараметрыПересчета.Вставить("ПересчитыватьАвтоматическиеСкидки", Ложь);
	ПараметрыПересчета.Вставить("ПересчитыватьРучныеСкидки",         Ложь);
	ПараметрыПересчета.Вставить("ИмяКоличества",                     "КоличествоУпаковок");
	ПараметрыПересчета.Вставить("СтавкаНДС",                         Справочники.СтавкиНДС.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда
		ПараметрыПересчета.Вставить("СтруктураКурсовСтаройВалюты", РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента, БазоваяВалюта));
		ПараметрыПересчета.Вставить("СтруктураКурсовНовойВалюты",  РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента, БазоваяВалюта));
	Иначе
		ПараметрыПересчета.Вставить("СтруктураКурсовСтаройВалюты", Новый Структура);
		ПараметрыПересчета.Вставить("СтруктураКурсовНовойВалюты",  Новый Структура);
	КонецЕсли;
	
	Возврат ПараметрыПересчета;
	
КонецФункции

// Осуществляет пересчет сумм в тч ЭтапыГрафикаОплаты из валюты в валюту
//
// Параметры:
//  Документ - ДокументОбъект - Документ, для которого необходимо осуществить пересчет
//  СуммаКРаспределениюОплаты - Число - Сумма документа, которую необходимо распределить на этапы оплаты
//  СуммаКРаспределениюЗалога - Число - Сумма залога по документу, которую необходимо распределить на этапы оплаты.
//
Процедура РаспределитьСуммуПоЭтапамОплаты(Документ, Знач СуммаКРаспределениюОплаты, Знач СуммаКРаспределениюЗалога) Экспорт
	
	КоличествоЭтаповОплаты    = Документ.ЭтапыГрафикаОплаты.Количество();
	ПроцентОплатыПоЭтапам     = Документ.ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");
	Если Документ.ЭтапыГрафикаОплаты.Выгрузить().Колонки.Найти("ПроцентЗалогаЗаТару") <> Неопределено Тогда
		ПроцентЗалогаПоЭтапам = Документ.ЭтапыГрафикаОплаты.Итог("ПроцентЗалогаЗаТару");
	Иначе
		ПроцентЗалогаПоЭтапам = 0
	КонецЕсли;
	НомерЭтапа                = 1;
	РаспределеннаяСуммаОплаты = 0;
	РаспределеннаяСуммаЗалога = 0;
	
	Если КоличествоЭтаповОплаты = 0 Или ПроцентОплатыПоЭтапам = 0 Или ПроцентЗалогаПоЭтапам = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЭтап Из Документ.ЭтапыГрафикаОплаты Цикл
		
		ЭтоПоследнийЭтап = ПроцентОплатыПоЭтапам = 100 И ПроцентЗалогаПоЭтапам = 100 И КоличествоЭтаповОплаты = НомерЭтапа;
		
		Если ЭтоПоследнийЭтап Тогда
			ТекЭтап.СуммаПлатежа      = СуммаКРаспределениюОплаты - РаспределеннаяСуммаОплаты;
			ТекЭтап.СуммаЗалогаЗаТару = СуммаКРаспределениюЗалога - РаспределеннаяСуммаЗалога;
		Иначе
			ТекЭтап.СуммаПлатежа       = Окр(СуммаКРаспределениюОплаты * ТекЭтап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
			ТекЭтап.СуммаЗалогаЗаТару  = Окр(СуммаКРаспределениюЗалога * ТекЭтап.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
			РаспределеннаяСуммаОплаты  = РаспределеннаяСуммаОплаты + ТекЭтап.СуммаПлатежа;
			РаспределеннаяСуммаЗалога  = РаспределеннаяСуммаЗалога + ТекЭтап.СуммаЗалогаЗаТару;
			НомерЭтапа                 = НомерЭтапа + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьСуммуПоЭтапамОплаты()

// Устарела.
// Осуществляет пересчет на заполненных полей "СуммаВзаиморасчетов" в указанной табличной части.
//
// Параметры:
//	Документ          - ДокументОбъект - Объект документа, для которого выполняется пересчет сумм взаиморасчетов 
//											в товарной части.
//	ИмяТабличнойЧасти - Строка         - Имя табличная части объекта документа.
//	СтруктураКурса    - Структура      - Данные курса валюты.
//	Дата              - Дата           - Дата, на которую выполняется расчет.
//	ИспользуетсяНДС   - Булево         - Истина - Признак, наличия в товарной части суммовых реквизитов, включающих НДС.
//
Процедура РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Документ,
							ИмяТабличнойЧасти,
							СтруктураКурса = Неопределено,
							Дата = Неопределено,
							ИспользуетсяНДС = Истина) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	ВалютаДокумента = Документ.Валюта;
	ВалютаЗаказа = Документ.ВалютаВзаиморасчетов;
	
	Если ВалютаДокумента = ВалютаЗаказа Тогда
		
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если ИспользуетсяНДС Тогда
				Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов)
					ИЛИ ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов <> ТабличнаяЧасть[Индекс].СуммаСНДС Тогда
					
					ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов = ТабличнаяЧасть[Индекс].СуммаСНДС;
					
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов)
					ИЛИ ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов <> ТабличнаяЧасть[Индекс].Сумма Тогда
					
					ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов = ТабличнаяЧасть[Индекс].Сумма;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СуммаВзаиморасчетовПоТЧ = ТабличнаяЧасть.Итог("СуммаВзаиморасчетов");
		
		Если ТабличнаяЧасть.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество() = 0
			И (Документ.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоТЧ
				ИЛИ (Документ.СуммаВзаиморасчетов < СуммаВзаиморасчетовПоТЧ И СуммаВзаиморасчетовПоТЧ > 0)) Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Дата = ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата,ТекущаяДатаСеанса());
		КонецЕсли;
		
		// Получение коэффициента пересчета в валюту заказа
		КоэффициентПересчетаВВалютуЗаказа = 1;
		Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") И СтруктураКурса.Курс > 0 Тогда
			ВалютаРегУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Документ.Организация);
			
			Если НЕ ВалютаЗаказа = ВалютаРегУчета И ВалютаДокумента = ВалютаРегУчета Тогда
				КоэффициентПересчетаВВалютуЗаказа = СтруктураКурса.КурсЗнаменатель/СтруктураКурса.КурсЧислитель;
			Иначе
				КоэффициентПересчетаВВалютуЗаказа = СтруктураКурса.КурсЧислитель*СтруктураКурса.КурсЗнаменатель;
			КонецЕсли;
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КурсВалютыДокумента.КурсЧислитель, 1) *
			|	ЕСТЬNULL(КурсВалютыЗаказа.КурсЗнаменатель, 1) /
			|	(ЕСТЬNULL(КурсВалютыЗаказа.КурсЧислитель, 1) *
			|	ЕСТЬNULL(КурсВалютыДокумента.КурсЗнаменатель, 1)) КАК КоэффициентПересчета
			|ИЗ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОтносительныеКурсыВалют.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаЗаказа И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыЗаказа
			|		ПО (ИСТИНА)");
			Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
			Запрос.УстановитьПараметр("ВалютаЗаказа", ВалютаЗаказа);
			Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Документ.Организация));
			Запрос.УстановитьПараметр("НаДату", Дата);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КоэффициентПересчетаВВалютуЗаказа = Выборка.КоэффициентПересчета;
			КонецЕсли;
		КонецЕсли;
		
		// Сумму, которая должна быть распределена по табличной части,
		// 		получим из разности общей суммы взаиморасчетов
		// 		и итога по заполненным значениям колонки "СуммаВзаиморасчетов".
		СуммаКРаспределению = Документ.СуммаВзаиморасчетов - СуммаВзаиморасчетовПоТЧ;
		МассивСумм = Новый Массив;
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов) Тогда
				Если ИспользуетсяНДС Тогда
					МассивСумм.Добавить(Окр(ТабличнаяЧасть[Индекс].СуммаСНДС * КоэффициентПересчетаВВалютуЗаказа, 2));
				Иначе
					МассивСумм.Добавить(Окр(ТабличнаяЧасть[Индекс].Сумма * КоэффициентПересчетаВВалютуЗаказа, 2));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
		
		ИндексМассиваСумм = 0;
		Если МассивСумм <> Неопределено Тогда
			Для Индекс=0 По ТабличнаяЧасть.Количество()-1 Цикл
				Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов) Тогда
					ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов = МассивСумм[ИндексМассиваСумм];
					ИндексМассиваСумм = ИндексМассиваСумм + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияВидовЦенЗаполняемыхПоДаннымИб

// Возвращает имена и типы полей, которые должны обязательно присутствовать.
// в СКД, используемой для заполнения цен по данным ИБ.
//
// Возвращаемое значение:
//	 Соответствие - В ключах содержатся имена полей. В значениях - типы полей.
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных(ИспользуетсяЦенообразование25 = Ложь) Экспорт
	
	Поля = Новый Соответствие;
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ИспользуетсяЦенообразование25 Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			Поля.Вставить("ХарактеристикаЦО", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			Поля.Вставить("УпаковкаЦОДляСвязи", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			Поля.Вставить("Упаковка", 			Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			Поля.Вставить("Коэффициент", 		Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Поля.Вставить("СерияЦОДляСвязи", 	Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		КонецЕсли;
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			Поля.Вставить("Характеристика", 	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			Поля.Вставить("Упаковка", 			Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			Поля.Вставить("Коэффициент", 		Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
	КонецЕсли;
	
	Поля.Вставить("Цена",   Новый ОписаниеТипов("Число"));
	Поля.Вставить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат Поля;
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема, которую необходимо проверить.
//  СообщениеОбОшибке     - Строка - содержит вводную часть сообщения об ошибке.
//  ВыводитьСообщения   - Булево - Истина - не выводить сообщения поьзователю, только проверка.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена успешно.
//
Функция ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено, ВыводитьСообщения = Истина) Экспорт
	
	Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
	
	Возврат ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке, ВыводитьСообщения);
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема, которую необходимо проверить.
//  СообщениеОбОшибке     - Строка - содержит вводную часть сообщения об ошибке.
//  ВыводитьСообщения   - Булево - Истина - не выводить сообщения поьзователю, только проверка.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена успешно.
//
Функция ПроверитьСхемуКомпоновкиДанных2_5(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено, ВыводитьСообщения = Истина) Экспорт
	
	Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных(Истина);
	
	Возврат ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке, ВыводитьСообщения);
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема, которую необходимо проверить.
//  Поля - см. ПолучитьОбязательныеПоляСхемыКомпоновкиДанных
//  СообщениеОбОшибке     - Строка - Строка, содержит вводную часть сообщения об ошибке.
//  ВыводитьСообщения   - Булево - Истина - не выводить сообщения поьзователю, только проверка.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена успешно.
//
Функция ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке = Неопределено, ВыводитьСообщения = Истина) Экспорт
	
	Результат = Истина;
	
	Если СхемаКомпоновкиДанных <> Неопределено И ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") И СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		
		Для Каждого Поле Из Поля Цикл
			Если Не ПроверитьПолеНабораДанныхСКД(РабочийНаборДанных, Поле.Ключ, Поле.Значение, СообщениеОбОшибке, ВыводитьСообщения) Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВыводитьСообщения Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ НСтр("ru='Схема компоновки данных для заполнения цен должна содержать один набор данных.'"));
		Результат = Ложь;
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Позволяет проверить корректность схемы видов цен, при необходимости исправить ошибки,
// а также заполнить список критических ошибок, которые необходимо будет исправить пользователю.
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема видов цен.
//   СхемаСодержитКритическиеОшибки - Булево - флаг наличия критических ошибок, который необходимо взвести,
//   				чтобы пользователь не смог применить схему, пока не будут исправлены ошибки.
//   СписокКритическихОшибок - СписокЗначений - Список, содержащий тексты сообщений о критических ошибках.
//   СписокПрочихСообщений - СписокЗначений - Список, содержащий тексты сообщений о исправленных ошибках и прочие замечания.
//   				Данный список сообщений выводится пользователю один раз.
//
Процедура ПроверкаКорректностиСхемыВидовЦен(СхемаКомпоновкиДанных, СхемаСодержитКритическиеОшибки,
					СписокКритическихОшибок, СписокПрочихСообщений) Экспорт

	Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
	
	СообщениеОбОшибке = "";
	ВыводитьСообщения = Ложь;
	
	Результат = ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке, ВыводитьСообщения);
	
	Если Не Результат Тогда
		СхемаСодержитКритическиеОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Схема содержит ошибки и не может быть применена.'");
		СписокКритическихОшибок.Добавить(ТекстОшибки);
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			СписокКритическихОшибок.Добавить(СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормированияЗапросовПроверкиРегистрацииЦен

// Формирует запрос для формирования временной таблицы цен
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//  ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
//  ДеревоЦен - ТаблицаЗначений - таблица цен, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен(ТекстЗапроса,
	                                                             ПараметрыЗапроса,
	                                                             ДеревоЦен)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки      КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура     КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика   КАК Характеристика,
		|	ВременнаяТаблицаТовары.ЭтоГруппа        КАК ЭтоГруппа
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&ДеревоЦен КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|";
		
	ПараметрыЗапроса.Вставить("ДеревоЦен", ДеревоЦен);
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для формирования временной таблицы цен без дублей строк
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаТовары.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура          КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика        КАК Характеристика
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТоварыБезДублей
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для проверки наличия незаполненной номенклатуры в таблице цен
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьТоваровДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура   КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.ЭтоГруппа      КАК ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНоменклатуры,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			И НЕ ДокументТовары.ЭтоГруппа
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХарактеристики
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	ИЛИ (ДокументТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И НЕ ДокументТовары.ЭтоГруппа)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросКорректностьТоваровДляРегистрацииЦен()

// Формирует запрос для проверки наличия дублей заполнения таблицы цен
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеДублейДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.Характеристика           КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросНаличиеДублейДляРегистрацииЦен()

// Формирует запрос для проверки наличия зарегистрированных ранее цен
//
// Параметры:
//  ТекстЗапроса          - Строка - текстовая строка, к которой необходимо добавить текст запроса
//  ПараметрыЗапроса      - Структура - структура, содержащая параметры запроса
//  ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, к которому необходимо сформировать запрос
//  ВидыЦен               - Массив - массив видов цен для проверки наличия ранее установленных цен.
//
Процедура СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен(ТекстЗапроса,
	                                                                 ПараметрыЗапроса,
	                                                                 ДокументУстановкиЦен,
	                                                                 ВидыЦен)
	
	Текст =
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ), ЦеныНоменклатуры.Период, СЕКУНДА)+1 КАК НомерВПределахДня,
	|	ВременнаяТаблицаТовары.НомерСтроки  КАК НомерСтроки,
	|	ЦеныНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика     КАК Характеристика,
	|	&ПолеВидЦены                        КАК ВидЦены
	|ИЗ
	|	&Таблица КАК ЦеныНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаТоварыБезДублей КАК ВременнаяТаблицаТовары
	|ПО
	|	ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|	И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|
	|ГДЕ
	|	ЦеныНоменклатуры.Период = &ДатаДокумента
	|	И ЦеныНоменклатуры.Регистратор <> &УстановкаЦен
	|	И (ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.Характеристика) В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДокументТовары.Номенклатура   КАК Номенклатура,
	|			ДокументТовары.Характеристика КАК Характеристика
	|		ИЗ
	|			ВременнаяТаблицаТовары КАК ДокументТовары)
	|	И &ПолеВидЦены В (&ВидыЦен)
	|;
	|";
	
	Если ТипЗнч(ДокументУстановкиЦен.Ссылка) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		Текст = СтрЗаменить(Текст, "&Таблица", "РегистрСведений.ЦеныНоменклатуры");
		Текст = СтрЗаменить(Текст, "&ПолеВидЦены", "ЦеныНоменклатуры.ВидЦены");
	Иначе
		Текст = СтрЗаменить(Текст, "&Таблица", "РегистрСведений.ЦеныНоменклатурыПоставщиков");
		Текст = СтрЗаменить(Текст, "&ПолеВидЦены", "ЦеныНоменклатуры.ВидЦеныПоставщика");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Текст;
	
	ПараметрыЗапроса.Вставить("УстановкаЦен",  ДокументУстановкиЦен.Ссылка);
	ПараметрыЗапроса.Вставить("ДатаДокумента", ДокументУстановкиЦен.Дата);
	ПараметрыЗапроса.Вставить("ВидыЦен",       ВидыЦен);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиРегистрацииЦен2_5

// Формирует запрос для формирования временной таблицы цен
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//  ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
//  ДеревоЦен - ТаблицаЗначений - таблица цен, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен2_5(ТекстЗапроса,
	                                                             ПараметрыЗапроса,
	                                                             ДеревоЦен)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки      КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура     КАК Номенклатура,
		|	ВременнаяТаблицаТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ВременнаяТаблицаТовары.ЭтоГруппа        КАК ЭтоГруппа
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&ДеревоЦен КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО
		|;
		|";
		
	ПараметрыЗапроса.Вставить("ДеревоЦен", ДеревоЦен);
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для формирования временной таблицы цен без дублей строк
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен2_5(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаТовары.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура          КАК Номенклатура,
		|	ВременнаяТаблицаТовары.ХарактеристикаЦО      КАК ХарактеристикаЦО
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТоварыБезДублей
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для проверки наличия незаполненной номенклатуры в таблице цен
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьТоваровДляРегистрацииЦен2_5(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура   КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ДокументТовары.ЭтоГруппа      КАК ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНоменклатуры,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|			И НЕ ДокументТовары.ЭтоГруппа
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХарактеристики
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	ИЛИ (ДокументТовары.ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|	И НЕ ДокументТовары.ЭтоГруппа)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросКорректностьТоваровДляРегистрацииЦен()

// Формирует запрос для проверки наличия дублей заполнения таблицы цен
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеДублейДляРегистрацииЦен2_5(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.ХарактеристикаЦО         КАК ХарактеристикаЦО
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.ХарактеристикаЦО
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросНаличиеДублейДляРегистрацииЦен()

// Формирует запрос для проверки наличия зарегистрированных ранее цен
//
// Параметры:
//  ТекстЗапроса          - Строка - текстовая строка, к которой необходимо добавить текст запроса
//  ПараметрыЗапроса      - Структура - структура, содержащая параметры запроса
//  ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, к которому необходимо сформировать запрос
//  ВидыЦен               - Массив - массив видов цен для проверки наличия ранее установленных цен.
//
Процедура СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен2_5(ТекстЗапроса,
	                                                                 ПараметрыЗапроса,
	                                                                 ДокументУстановкиЦен,
	                                                                 ВидыЦен)
	
	Текст =
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ), ЦеныНоменклатуры.Период, СЕКУНДА)+1 КАК НомерВПределахДня,
	|	ВременнаяТаблицаТовары.НомерСтроки  КАК НомерСтроки,
	|	ЦеныНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ЦеныНоменклатуры.ХарактеристикаЦО   КАК ХарактеристикаЦО,
	|	&ПолеВидЦены                        КАК ВидЦены
	|ИЗ
	|	&Таблица КАК ЦеныНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаТоварыБезДублей КАК ВременнаяТаблицаТовары
	|ПО
	|	ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|	И ЦеныНоменклатуры.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
	|
	|ГДЕ
	|	ЦеныНоменклатуры.Период = &ДатаДокумента
	|	И ЦеныНоменклатуры.Регистратор <> &УстановкаЦен
	|	И (ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.ХарактеристикаЦО) В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДокументТовары.Номенклатура   КАК Номенклатура,
	|			ДокументТовары.ХарактеристикаЦО КАК ХарактеристикаЦО
	|		ИЗ
	|			ВременнаяТаблицаТовары КАК ДокументТовары)
	|	И &ПолеВидЦены В (&ВидыЦен)
	|;
	|";
	
	Если ТипЗнч(ДокументУстановкиЦен.Ссылка) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		Текст = СтрЗаменить(Текст, "&Таблица", "РегистрСведений.ЦеныНоменклатуры25");
		Текст = СтрЗаменить(Текст, "&ПолеВидЦены", "ЦеныНоменклатуры.ВидЦены");
	Иначе
		Текст = СтрЗаменить(Текст, "&Таблица", "РегистрСведений.ЦеныНоменклатурыПоставщиков");
		Текст = СтрЗаменить(Текст, "&ПолеВидЦены", "ЦеныНоменклатуры.ВидЦеныПоставщика");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Текст;
	
	ПараметрыЗапроса.Вставить("УстановкаЦен",  ДокументУстановкиЦен.Ссылка);
	ПараметрыЗапроса.Вставить("ДатаДокумента", ДокументУстановкиЦен.Дата);
	ПараметрыЗапроса.Вставить("ВидыЦен",       ВидыЦен);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахРегистрацииЦен

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
//  Выборка               - ВыборкаИзРезультатаЗапроса - 
//  ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо вывести
//                                                                    сообщения об ошибках.
//  ИспользуетсяЦенообразование25  - Булево - флаг использования нового ценообразования.
//  Отказ                 - Булево - флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен(Выборка,
	                                                            ДокументУстановкиЦен,
	                                                            ИспользуетсяЦенообразование25,
	                                                            Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ИспользуетсяЦенообразование25 Тогда
			Характеристика = "ХарактеристикаЦО";
		Иначе
			Характеристика = "Характеристика";
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияНоменклатуры Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке ""%НомерСтроки%"" списка ""Таблица цен""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументУстановкиЦен.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХарактеристики Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Характеристика"" в строке ""%НомерСтроки%"" списка ""Таблица цен""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументУстановкиЦен.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, Характеристика),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен()

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
//  Выборка               - ВыборкаИзРезультатаЗапроса - 
//  ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо вывести
//                                                                    сообщения об ошибках.
//  ИспользуетсяЦенообразование25  - Булево - флаг использования нового ценообразования.
//  Отказ                 - Булево - флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен(Выборка,
	                                                             ДокументУстановкиЦен,
	                                                             ИспользуетсяЦенообразование25,
	                                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ИспользуетсяЦенообразование25 Тогда
			Характеристика = Выборка.ХарактеристикаЦО;
		Иначе
			Характеристика = Выборка.Характеристика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Характеристика);
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен()

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
//  Выборка                         - ВыборкаИзРезультатаЗапроса - 
//  ДокументУстановкиЦен            - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо вывести
//  ИспользуетсяЦенообразование25  - Булево - флаг использования нового ценообразования.
//  Отказ                 - Булево  - флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен(Выборка,
	                                                                ДокументУстановкиЦен,
	                                                                ИспользуетсяЦенообразование25,
	                                                                Отказ)

	Пока Выборка.Следующий() Цикл
		
		Если ИспользуетсяЦенообразование25 Тогда
			Характеристика = Выборка.ХарактеристикаЦО;
		Иначе
			Характеристика = Выборка.Характеристика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента%, номер в пределах дня %НомерВПределахДня% уже установлена'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Характеристика);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%",         Выборка.ВидЦены);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаДокумента%",     Формат(ДокументУстановкиЦен.Дата, "ДФ=dd.MM.yy"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерВПределахДня%", Выборка.НомерВПределахДня);
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента%, номер в пределах дня %НомерВПределахДня% уже установлена'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%",         Выборка.ВидЦены);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаДокумента%",     Формат(ДокументУстановкиЦен.Дата, "ДФ=dd.MM.yy"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерВПределахДня%", Выборка.НомерВПределахДня);
			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;

КонецПроцедуры // СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен()

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиРегистрацииЦенПоставщика

// Формирует запрос для формирования временной таблицы цен
//
// Параметры:
//  ТекстЗапроса     - Строка          - текстовая строка, к которой необходимо добавить текст запроса
//  ПараметрыЗапроса - Структура       - структура, содержащая параметры запроса
//  Товары           - ТаблицаЗначений - таблица с товарами
//
Процедура СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦенПоставщика(ТекстЗапроса,
	                                                                       ПараметрыЗапроса,
	                                                                       Товары)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.НоменклатураПартнера   КАК НоменклатураКонтрагента,
		|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦеныПоставщика,
		|	ВременнаяТаблицаТовары.Упаковка               КАК Упаковка
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|;
		|";
		
	ПараметрыЗапроса.Вставить("Товары", Товары);
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦенПоставщика()

// Формирует запрос для проверки корректности заполнения тч Товары документа УстановкаЦенНоменклатурыПартнера.
//
//
// Параметры:
//  ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьТоваровДляРегистрацииЦенПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
		|	ДокументТовары.Номенклатура          КАК Номенклатура,
		|	ДокументТовары.Характеристика        КАК Характеристика,
		|	ДокументТовары.ВидЦеныПоставщика     КАК ВидЦеныПоставщика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.ВидЦеныПоставщика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросКорректностьТоваровДляРегистрацииЦенПоставщика()

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахРегистрацииЦенПоставщика

Процедура СообщитьПользователюОбОшибкеРегистрацииЦенПоставщика(ТекстОшибки, ДокументУстановкиЦен, НомерСтроки, Поле, Отказ)
	
	Если ТипЗнч(ДокументУстановкиЦен) = Тип("ДанныеФормыСтруктура") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", НомерСтроки, Поле),
			,
			Отказ);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, Поле),
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатурыПоставщика.
//
// Параметры:
//  Выборка               - ВыборкаИзРезультатаЗапроса - 
//  ДокументУстановкиЦен  - ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика - документ, для которого необходимо
//                                                                                вывести сообщения об ошибках.
//  Отказ                 - Булево - флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦенПоставщика(Выборка,
	                                                                      ДокументУстановкиЦен,
	                                                                      Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидЦеныПоставщика) Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" с видом цены ""%ВидЦеныПоставщика%"" повторяется'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",      Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",    Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныПоставщика%", Выборка.ВидЦеныПоставщика);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с видом цены ""%ВидЦеныПоставщика%"" повторяется'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",      Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныПоставщика%", Выборка.ВидЦеныПоставщика);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СообщитьПользователюОбОшибкеРегистрацииЦенПоставщика(ТекстОшибки, ДокументУстановкиЦен, Выборка.НомерСтроки, "Номенклатура", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦенПоставщика()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияВидовЦенЗаполняемыхПоДаннымИб

// Проверяет набор данных СКД, что он содержит заданное поле соответствующего типа
//
// Параметры:
//  НаборДанных         - НаборыДанныхСхемыКомпоновкиДанных - набор данных, который необходимо проверить
//  ИмяПоля             - Строка - содержащее имя поля
//  ТипЗначения         - ОписаниеТипов - тип который должно иметь поле СКД
//  СообщениеОбОшибке   - Строка - содержит вводную часть сообщения об ошибке.
//  ВыводитьСообщения   - Булево - Истина - не выводить сообщения поьзователю, только проверка.
//
// Возвращаемое значение:
//  Булево - Истина, если набор данных содержит требуемое поле.
//
Функция ПроверитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, СообщениеОбОшибке = Неопределено, ВыводитьСообщения = Истина)
	
	Поле = НаборДанных.Поля.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТипыПоля       = Поле.ТипЗначения.Типы();
		ДопустимыеТипы = ТипЗначения.Типы();
		
		Результат = Истина;
		Если Поле <> Неопределено И ТипыПоля.Количество() = ДопустимыеТипы.Количество() Тогда
			
			Для Каждого Тип Из ДопустимыеТипы Цикл
				Если ТипыПоля.Найти(Тип) = Неопределено Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат и ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ СтрЗаменить(СтрЗаменить(НСтр("ru='Схема компоновки данных для заполнения цен должна содержать поле ""%ИмяПоля%"" с типом значения ""%ТипЗначения%"".'"), "%ИмяПоля%", ИмяПоля), "%ТипЗначения%", ТипЗначения));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Устанавливка служебного параметр использования варианта ценообразования.
//
// Параметры:
//  ОбъектНастройки - КомпоновщикНастроекКомпоновкиДанных, НастройкиВложенногоОбъектаКомпоновкиДанных - откуда брать настройки.
//
// Возвращаемое значение:
//   Булево - признак использования параметра варианта ценообразования.
//
Функция УстановитьВариантЦенообразованияВСКД(ОбъектНастройки) Экспорт
	
	ИспользуетсяЦенообразование25  = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		ОбъектНастройки.Настройки, 
		"ИспользуетсяЦенообразование25");
	
	Если ИспользуетсяЦенообразование25 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ОбъектНастройки, "ИспользуетсяЦенообразование25", ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25());
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
