///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вспомогательный метод для обработки JSON на web - клиенте
//
// Параметры:
//  СтрокаJSON - Строка - исходные данные в формате JSON
//  ДанныеОтвета - Структура, Неопределено - результат разбора ответа
//
Процедура ОбработатьJSON(СтрокаJSON, ДанныеОтвета) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаJSON) Тогда
		
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(СтрокаJSON);
		
		Попытка
			ДанныеОтвета = ПрочитатьJSON(ЧтениеОтвета);
		Исключение
			
			ЛокализованноеСообщение = НСтр("ru = 'Ошибка разбора JSON, возможно, получено служебное сообщение о недоступности сервера лояльности.'");
			
			КодОсновногоЯзыка = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьКодОсновногоЯзыка(КодОсновногоЯзыка);
			ИмяСобытия = НСтр("ru = 'Попытка разбора ответа от сервера лояльности';
							|en = 'Attempt to parse the response from the loyalty server'", КодОсновногоЯзыка);
					
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , , ЛокализованноеСообщение);
				
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательный метод для сериализации на web - клиенте
//
// Параметры:
//  СтруктураПараметров - Структура - параметры для сериализации
// 
// Возвращаемое значение:
//  Результат - Строка, Неопределено - результат сериализации
//
Функция СериализоватьСтруктуруПараметров(СтруктураПараметров) Экспорт
	
	СтруктураОтветаJSON = Новый ЗаписьJSON;
	СтруктураОтветаJSON.УстановитьСтроку();
	ЗаписатьJSON(СтруктураОтветаJSON, СтруктураПараметров);
	СериализованнаяСтруктураПараметров = СтруктураОтветаJSON.Закрыть();
	
КонецФункции

// Процедура пакетной записи сообщений в журнал регистрации.
// После записи переменная СобытияДляЖурналаРегистрации очищается.
//
// Параметры:
//  ИмяСобытия - Строка - имя записываемого события.
//  ЛокализованноеСообщение - Строка - сообщение для записи в журнал регистрации
//
Процедура ЗаписатьСобытияВЖурналРегистрации(ИмяСобытия, ЛокализованноеСообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , , ЛокализованноеСообщение);
	
КонецПроцедуры

// Выполняет обращение к ресурсу сервера лояльности 
//
// Параметры:
//  ПараметрыВыполненияЗапроса - Структура:
//		* ТипЗапроса - Строка - по умолчанию "POST"
//		* АдресСервера - Строка
//		* Логин - Строка
//		* Пароль - Строка
//		* Ресурс - Строка
//		* ПараметрыМетода - Структура
//		* ИнтернетПрокси
//
// Возвращаемое значение:
//   Структура:
//		* ДанныеОтвета - Строка
//		* ЕстьОшибки - Булево
//		* ТекстОшибки - Строка
//
Функция ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса) Экспорт
	
	РезультатВыполнения = СерверЛояльностиПолучательДанныхКлиентСервер.РезультатВыполненияЗапросаПоУмолчанию();
	
	Если СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыВыполненияЗапросаКорректны(ПараметрыВыполненияЗапроса) Тогда
		
		ПараметрыПодключения = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьПараметрыПодключенияИзСтроки(ПараметрыВыполненияЗапроса.АдресСервера);
		
		ТипЗапроса				= ПараметрыВыполненияЗапроса.ТипЗапроса;
		АдресСервера			= ПараметрыПодключения.АдресСервера;
		Логин					= ПараметрыВыполненияЗапроса.Логин;
		Пароль 					= ПараметрыВыполненияЗапроса.Пароль;
		Ресурс					= ПараметрыВыполненияЗапроса.Ресурс;
		Порт					= ПараметрыПодключения.ПортПодключения;
		ИнтернетПрокси			= ПолучениеФайловИзИнтернета.ПолучитьПрокси(АдресСервера);
		ЗащищенноеСоединение	= ?(ПараметрыПодключения.ЭтоЗащищенноеСоединение,
			ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(), Неопределено);
		
		ПараметрыМетода = ПараметрыВыполненияЗапроса.ПараметрыМетода;
		
		ДобавитьПараметрыВРесурс(Ресурс, ПараметрыМетода);
		
		ТаймаутПоУмолчанию = 60;
		ТаймаутВСекундах = ?(ПараметрыВыполненияЗапроса.Таймаут = 0, ТаймаутПоУмолчанию, ПараметрыВыполненияЗапроса.Таймаут);
		HTTPСоединение = Новый HTTPСоединение(АдресСервера,, Логин, Пароль, ИнтернетПрокси, ТаймаутВСекундах,
			ЗащищенноеСоединение);
		НTTPЗапрос = Новый HTTPЗапрос(Ресурс);
		
		Если ПараметрыВыполненияЗапроса.Свойство("ТелоЗапроса")
			И Не ПустаяСтрока(ПараметрыВыполненияЗапроса.ТелоЗапроса) Тогда 
			
			НTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыВыполненияЗапроса.ТелоЗапроса);
			
		КонецЕсли;
		
		Попытка
			
			Ответ = HTTPСоединение.ВызватьHTTPМетод(ТипЗапроса, НTTPЗапрос);
			
			КодСостояния = Ответ.КодСостояния;
			
			РезультатВыполнения.ЕстьОшибки = (КодСостояния > 200);
			
			Если КодСостояния >= 500 Тогда
				
				ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При выполнении запроса к серверу лояльности возникла ошибка на стороне сервера. Код ошибки: %1'"),
				КодСостояния);
				
			ИначеЕсли КодСостояния >= 400 Тогда
				
				ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Некорректно указаны параметры выполнения запроса к серверу лояльности. Код ошибки: %1'"),
				КодСостояния);
				
			КонецЕсли;
			
			РезультатВыполнения.ТекстОшибки = ТекстОшибки;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			РезультатВыполнения.ЕстьОшибки = Истина;
			РезультатВыполнения.ТекстОшибки =
			СтрШаблон(
			НСтр("ru = 'Не удалось установить соединение с сервером лояльности.
			|Тип запроса: %1
			|Адрес сервера: %2
			|Логин: %3
			|Пароль: %4
			|Ресурс: %5
			|Описание ошибки: %6'"),
			Строка(ТипЗапроса),
			Строка(АдресСервера),
			Строка(Логин),
			НСтр("ru = '********'"),
			Строка(Ресурс),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
		Если РезультатВыполнения.ЕстьОшибки Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		ДанныеОтвета = Ответ.ПолучитьТелоКакСтроку();
		РезультатВыполнения.ДанныеОтвета = ДанныеОтвета;
		
	Иначе
		РезультатВыполнения.ЕстьОшибки = Истина;
		РезультатВыполнения.ТекстОшибки =
		НСтр("ru = 'Проверьте указанные параметры соединения с сервером лояльности в настройках РМК.'");
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет параметры метода в ресурс метода 
//
// Параметры:
//  Ресурс - Строка - ресурс метода, имя конечной точки для обращения
//  ПараметрыВыполненияМетода - Структура - исходные данные параметров метода
//
Процедура ДобавитьПараметрыВРесурс(Ресурс, ПараметрыВыполненияМетода)
	
	Если ЗначениеЗаполнено(Ресурс)	И ЗначениеЗаполнено(ПараметрыВыполненияМетода)
		И ТипЗнч(ПараметрыВыполненияМетода) = Тип("Структура") Тогда
	
		ПараметрыМетодаСтрокой = "?";
		
		Для каждого Параметр Из ПараметрыВыполненияМетода Цикл
		
			ОбъединяющийСимвол = ?(СтрЗаканчиваетсяНа(ПараметрыМетодаСтрокой, "?"),
				"", "&");
			ПараметрыМетодаСтрокой = СтрШаблон("%1%2%3=%4",
				ПараметрыМетодаСтрокой, ОбъединяющийСимвол, Параметр.Ключ, Параметр.Значение);
		
		КонецЦикла;
		
		Ресурс = СтрШаблон("/%1/%2", Ресурс, ПараметрыМетодаСтрокой);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
