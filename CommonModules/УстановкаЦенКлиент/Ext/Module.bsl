
#Область ПрограммныйИнтерфейс

// Выгружает дерево цен в Excel на стороне WEB клиента
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - , в которой необходимо рассчитать цены
//  ПараметрыПечати - Структура - параметры печати, используемые при формировании печатной формы.
//
Процедура ВыгрузитьВExcelБезСсылкиВЕБ(Форма, ПараметрыПечати) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяДополнительнойКолонки", Форма.ИмяДополнительнойКолонки);
	ДополнительныеПараметры.Вставить("ИспользуетсяЦенообразование25", Форма.ИспользуетсяЦенообразование25);
	ДополнительныеПараметры.Вставить("ПараметрыПечати", ПараметрыПечати);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	
	АдресФайлаВоВременномХранилище = УстановкаЦенВызовСервера.ВыгрузитьВExcelБезСсылкиВЕБ(
		ПредопределенноеЗначение("Документ.УстановкаЦенНоменклатуры.ПустаяСсылка"),
		ДополнительныеПараметры);
		
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(,АдресФайлаВоВременномХранилище));
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Расширение = "xls";
	
	НачатьПолучениеФайлов(
		Новый ОписаниеОповещения("ВыгрузитьВExcelБезСсылкиНачатьПолучениеФайловЗавершениеВЕБ", УстановкаЦенКлиент, ДополнительныеПараметры),
		ПолучаемыеФайлы,
		ДиалогВыбораФайла,
		Истина);
	
КонецПроцедуры

// Загружает данные из Excel в дерево цен формы на стороне ВЕБ клиента
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - в которую необходимо загрузить данные из Excel.
//
Процедура ЗагрузитьИзExcelБезСсылкиВЕБ(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИспользуетсяЦенообразование25", Форма.ИспользуетсяЦенообразование25);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("ЗагрузитьИзExcelБезСсылкиДиалогВыбораФайлаЗавершениеВЕБ",
			УстановкаЦенКлиент,
			ДополнительныеПараметры));
	
КонецПроцедуры

// Проверяет заполненность обязательных параметров схем компоновки данных,
// используемых для расчета цен.
//
// Параметры:
//  Форма - см. УстановкаЦенСервер.ПостроитьДеревоЦен.Форма
//
// Возвращаемое значение:
//  Булево - Признак наличия ошибок.
//
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(Форма) Экспорт
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Ошибки = УстановкаЦенВызовСервера.ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
		ВидыЦен,
		Форма.АдресХранилищаНастройкиКомпоновкиДанных,
		Форма.АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		
	Для Каждого СтруктураОшибки Из Ошибки Цикл
		СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтруктураОшибки.ВидЦены);
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтруктураОшибки.Описание,
				Форма.Объект.Ссылка,
				"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтруктураОшибки.Описание,
				,
				"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

// Выгружает дерево цен в Excel
//
// Параметры:
//  Форма - см. УстановкаЦенСервер.ПостроитьДеревоЦен.Форма
//  ПараметрыПечати - Структура - параметры печати, используемые при формировании печатной формы.
//
// Результат:
//  Файл, результат выгрузки.
//
Процедура ВыгрузитьВExcel(Форма, ПараметрыПечати) Экспорт
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
		COMОбъект = 0;
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить цены в Excel.
		                               |Убедитесь, что на компьютере установлена программа Microsoft Excel.
		                               |Подробности:'") + " "
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ВыводитьКоды = ?(ЗначениеЗаполнено(Форма.ИмяДополнительнойКолонки), Истина, Ложь);
	
	МассивДокументов = Новый Массив;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Для Каждого СтрокаТЧ Из Форма.СохраненныеДокументы Цикл
			МассивДокументов.Добавить(СтрокаТЧ.Ссылка);
		КонецЦикла;
	Иначе
		МассивДокументов.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	МассивИнформации = УстановкаЦенВызовСервера.ВыгрузитьВExcel(
		МассивДокументов,
		Форма.УникальныйИдентификатор,
		ПараметрыПечати);
		
	Если МассивИнформации = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить цены в Excel.'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ДополнительныеПараметры = 
		Новый Структура("Форма, ПараметрыПечати, ВыводитьКоды", Форма, ПараметрыПечати, ВыводитьКоды);
		
	Для Каждого Информация Из МассивИнформации Цикл
	
		ДополнительныеПараметры.Вставить("Информация", Информация);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыгрузитьВExcelПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		РаботаСФайламиКлиент.ПолучитьПрисоединенныйФайл(
			Оповещение,
			Информация.Файл,
			Форма.УникальныйИдентификатор,
			Новый Структура("ДанныеФайла, ДляРедактирования", Информация.ДанныеФайла, Истина));
		
	КонецЦикла;
		
КонецПроцедуры

// Загружает данные из Excel в дерево цен формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которую необходимо загрузить данные из Excel
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом..
//
Процедура ЗагрузитьИзExcel(Форма, ПрисоединенныйФайл) Экспорт
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(
		ПрисоединенныйФайл,
		Форма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = 
		Новый Структура("Форма, ПрисоединенныйФайл", Форма, ПрисоединенныйФайл);
	
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗагрузитьИзExcelПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		РаботаСФайламиКлиент.ПолучитьПрисоединенныйФайл(
			Оповещение,
			ПрисоединенныйФайл,
			Форма.УникальныйИдентификатор,
			Новый Структура("ДанныеФайла, ДляРедактирования", ДанныеФайла, Ложь));
		
	Иначе
		
		// Не надо получать файл на диск чтобы не затереть несохраненные изменения
		РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
		ИмяВременногоФайла         = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		ЗагрузитьИзExcelПродолжение(
			Новый Структура("ОписаниеОшибки, ПолноеИмяФайла", "", ИмяВременногоФайла),
			ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Элементы - ЭлементыФормы - Элементы обрабатываемой формы. Должны включать:
// 	* ДеревоЦен - ДеревоЗначений, ТаблицаФормы, ДанныеФормыЭлементДерева, ДанныеФормыДерево - основной элемент формы с деревом цен
// 	ВыбранныеЦены - ТаблицаЗначений - 
// 	ДатаДействующихЦен - Дата
// 	ТекущаяДата - Дата
// 	ИспользоватьХарактеристикиНоменклатуры - Булево
// 	НеИспользоватьФормулы - Булево
// Возвращаемое значение:
// 	ФорматированнаяСтрока, Строка - 
Функция ИнформацияТекущейСтроки(Элементы,
	                            ВыбранныеЦены,
	                            ДатаДействующихЦен,
	                            ТекущаяДата,
	                            ИспользоватьХарактеристикиНоменклатуры,
	                            НеИспользоватьФормулы = Ложь) Экспорт
	
	Элемент = Элементы.ДеревоЦен;
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или
		Элемент  = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаНоменклатура = Строка(ТекущиеДанные.Номенклатура)
	                    + ?(ИспользоватьХарактеристикиНоменклатуры,
	                      ?(ЗначениеЗаполнено(ТекущиеДанные.Характеристика), " (" + Строка(ТекущиеДанные.Характеристика) + ")", ""), "");
	
	ФорматированнаяСтрокаНоменклатура = Новый ФорматированнаяСтрока(СтрокаНоменклатура, Новый Шрифт(,,Истина));
	ФорматированнаяСтрокаВидЦен = "";
	ФорматированнаяСтрокаСтараяЦена = "";
	ФорматированнаяСтрокаПроцентИзменения = "";
	ФорматированнаяСтрокаСуммаИзменения = "";
	ФорматированнаяСтрокаЦена = "";
	ФорматированнаяСтрокаДопИнформация = "";
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		ПозицияПодстроки = 0;
	Иначе
		ПозицияПодстроки = СтрНайти(Элемент.ТекущийЭлемент.Имя, "ВидЦены");
	КонецЕсли;
	
	
	Если ПозицияПодстроки <> 0 Тогда

		ИмяКолонки = Прав(Элемент.ТекущийЭлемент.Имя, СтрДлина(Элемент.ТекущийЭлемент.Имя) - ПозицияПодстроки + 1);
			
		ГруппаЦен = Элементы.Найти("ДеревоЦен" + "ГруппаЦены" + ИмяКолонки);
		
		Если ГруппаЦен <> Неопределено Тогда
		 	Если ТекущиеДанные.свойство("Валюта" + ИмяКолонки) Тогда
				НаименованиеВалюты = " " + Строка(ТекущиеДанные["Валюта" + ИмяКолонки]);
			Иначе	
				НаименованиеВалюты = Прав(ГруппаЦен.Заголовок, 4);
			КонецЕсли;
			НаименованиеВидаЦен = Лев(ГруппаЦен.Заголовок, СтрДлина(ГруппаЦен.Заголовок) - 5);
		КонецЕсли;
		
		Если НеИспользоватьФормулы Тогда
			
			ФорматированнаяСтрокаВидЦен = Новый ФорматированнаяСтрока(" | ", НаименованиеВидаЦен);
			
		Иначе
	
				СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", ТекущиеДанные.ЦеноваяГруппа);	
				
				ФормулаВидаЦен = "";
				
				Если ТекущиеДанные.свойство("Формула" + ИмяКолонки) Тогда
					ФормулаВидаЦен = ТекущиеДанные["Формула" + ИмяКолонки];
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ФормулаВидаЦен) Тогда					
					НайденныеВидыЦен = ВыбранныеЦены.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
					Если НайденныеВидыЦен.Количество() = 1 Тогда
						ВидЦены = НайденныеВидыЦен[0];
						Если ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
						
							ФормулаВидаЦен = ВидЦены.Формула;
							ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
											
							Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
								ФормулаВидаЦен = ЦеновыеГруппыАлгоритмов[0].Формула;
							КонецЕсли;
									
						ИначеЕсли ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен") Тогда
							
							ФормулаВидаЦен = "[" + ВидЦены.БазовыйВидЦены + "]*" + Формат(((ВидЦены.Наценка/100)+1),"ЧРД=.; ЧГ=0");
							ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
											
							Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
								
								ФормулаВидаЦен = "[" + ЦеновыеГруппыАлгоритмов[0].БазовыйВидЦены + "]*" + Формат(((ЦеновыеГруппыАлгоритмов[0].Наценка/100)+1),"ЧРД=.; ЧГ=0");
								
							КонецЕсли;		
		
						ИначеЕсли ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуПоступления")
						 	Или ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков") 
						 	Или ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам") 
						 	Или ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам") 
						 	Или ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости") Тогда
							
							ФормулаВидаЦен = "[" + ВидЦены.Ссылка + "]*" + Формат(((ВидЦены.Наценка/100)+1),"ЧРД=.; ЧГ=0");
							ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
											
							Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
								
								ФормулаВидаЦен = "[" + ВидЦены.Ссылка + "]*" + Формат(((ЦеновыеГруппыАлгоритмов[0].Наценка/100)+1),"ЧРД=.; ЧГ=0");
								
							КонецЕсли;		
		
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;

				Если ЗначениеЗаполнено(ФормулаВидаЦен) Тогда
					
					Если ЦеновыеГруппыАлгоритмов <> Неопределено И ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
							
						ФормулаВидаЦен = " <" + ЦеновыеГруппыАлгоритмов[0].ЦеноваяГруппа + "> = " + ФормулаВидаЦен;
						
					Иначе
						
						ФормулаВидаЦен = " = " + ФормулаВидаЦен;
								
					КонецЕсли;	
				КонецЕсли;
				
				#Если ВебКлиент Тогда
				ФорматированнаяСтрокаВидЦен = Новый ФорматированнаяСтрока(" | ", НаименованиеВидаЦен + ФормулаВидаЦен);
				#Иначе
				ФорматированнаяСтрокаВидЦен = Новый ФорматированнаяСтрока(" | ", ГруппаЦен.КартинкаШапки, " ", НаименованиеВидаЦен + ФормулаВидаЦен);
				#КонецЕсли
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаДействующихЦен) Тогда
			ДатаЦен = ДатаДействующихЦен;
		Иначе
			ДатаЦен = НачалоДня(ТекущаяДата)-1;
		КонецЕсли;
			
		Если ТекущиеДанные["СтараяЦена" + ИмяКолонки] = ТекущиеДанные[ИмяКолонки]
			И ТекущиеДанные[ИмяКолонки] <> 0 Тогда
			
			ФорматированнаяСтрокаСтараяЦена = Новый ФорматированнаяСтрока(" | ", НСтр("ru='<Цена не изменилась>'"));
			
		ИначеЕсли ТекущиеДанные["СтараяЦена" + ИмяКолонки] <> 0 Тогда
				
			СтрокаСтараяЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные["СтараяЦена" + ИмяКолонки], "ЧДЦ=2"));
			
			
			СтрокаДатаДействующихЦен = Формат(ДатаЦен, "ДЛФ=D");
			
			СтрокаДатаДействующихЦен = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Цена на %1:'"),
				СтрокаДатаДействующихЦен);
				
			ФорматированнаяСтрокаСтараяЦена = Новый ФорматированнаяСтрока(" | ", СтрокаДатаДействующихЦен, " ", СтрокаСтараяЦена, НаименованиеВалюты);
			
		КонецЕсли;
		
		Если ТекущиеДанные["ПроцентИзменения" + ИмяКолонки] <> 0 Тогда
			
			СтрокаПроцентИзменения = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные["ПроцентИзменения" + ИмяКолонки], "ЧЦ=5; ЧДЦ=2"), Новый Шрифт(,,Истина));
			ФорматированнаяСтрокаПроцентИзменения = Новый ФорматированнаяСтрока(" ", СтрокаПроцентИзменения, "%");
			
		КонецЕсли;

		Если ТекущиеДанные["СуммаИзменения" + ИмяКолонки] <> 0 Тогда
			
			СтрокаСуммаИзменения = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные["СуммаИзменения" + ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина));
			
			Если ТекущиеДанные["СуммаИзменения" + ИмяКолонки] > 0 Тогда
				#Если ВебКлиент Тогда
				ИзменениеСтрока = Новый ФорматированнаяСтрока(" | ");
				#Иначе
				ИзменениеСтрока = Новый ФорматированнаяСтрока(" | ", БиблиотекаКартинок.ПиктограммаТрендаРостВДиапазоне, " ");
				#КонецЕсли
			Иначе
				#Если ВебКлиент Тогда
				ИзменениеСтрока = Новый ФорматированнаяСтрока(" | ");
				#Иначе
				ИзменениеСтрока = Новый ФорматированнаяСтрока(" | ", БиблиотекаКартинок.ПиктограммаТрендаПадениеУлучшается, " ");
				#КонецЕсли
			КонецЕсли;
			
			ФорматированнаяСтрокаСуммаИзменения = Новый ФорматированнаяСтрока(ИзменениеСтрока, СтрокаСуммаИзменения, НаименованиеВалюты);
			
		КонецЕсли;
		
		Если ТекущиеДанные[ИмяКолонки] <> 0 Тогда
			
			Если ТекущиеДанные[ИмяКолонки] > ТекущиеДанные["СтараяЦена" + ИмяКолонки] Тогда
				СтрокаЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные[ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина), WebЦвета.ТемноСиний);
			ИначеЕсли ТекущиеДанные[ИмяКолонки] < ТекущиеДанные["СтараяЦена" + ИмяКолонки] Тогда
				СтрокаЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные[ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина), WebЦвета.ТемноЗеленый);
			Иначе
				СтрокаЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные[ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина));
			КонецЕсли;
					
			ЦенаИзменена = ТекущиеДанные["ИзмененаВручную" + ИмяКолонки];
			
			Если ЦенаИзменена Тогда
				КартинкаЦенаИзменена = БиблиотекаКартинок.Изменить;
				#Если ВебКлиент Тогда
				ФорматированнаяСтрокаЦена = Новый ФорматированнаяСтрока(" | ", СтрокаЦена, НаименованиеВалюты);
				#Иначе
				ФорматированнаяСтрокаЦена = Новый ФорматированнаяСтрока(" | ", КартинкаЦенаИзменена, СтрокаЦена, НаименованиеВалюты);
				#КонецЕсли
			Иначе
				ФорматированнаяСтрокаЦена = Новый ФорматированнаяСтрока(" | ", СтрокаЦена, НаименованиеВалюты);
			КонецЕсли;
			
		КонецЕсли;
		
		// для макета
		// макет показа установленной цены
		Если НайденныеВидыЦен = Неопределено Тогда
			НайденныеВидыЦен = ВыбранныеЦены.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
		КонецЕсли;
		Если НайденныеВидыЦен.Количество() = 1 И НайденныеВидыЦен[0].Свойство("ДатаПоследнейУстановкиЦены") Тогда
			ДатаПоследнейУстановкиЦены = НайденныеВидыЦен[0].ДатаПоследнейУстановкиЦены;
			
			Если ДатаПоследнейУстановкиЦены > ДатаЦен Тогда 
				ДатаПоследнейУстановкиЦеныФС = формат(ДатаПоследнейУстановкиЦены, "ДЛФ=D;");
				СтрокаСобщение = " По виду цен установлена цена будущей датой - " + ДатаПоследнейУстановкиЦеныФС;
				#Если ВебКлиент Тогда
				ФорматированнаяСтрокаДопИнформация = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(" | ", " ! ", СтрокаСобщение),,WebЦвета.Красный);
				#Иначе
				ФорматированнаяСтрокаДопИнформация = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(" | ", БиблиотекаКартинок.Внимание16, СтрокаСобщение),,WebЦвета.Красный);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(
		ФорматированнаяСтрокаНоменклатура,
		ФорматированнаяСтрокаВидЦен,
		ФорматированнаяСтрокаСтараяЦена,
		ФорматированнаяСтрокаСуммаИзменения,
		ФорматированнаяСтрокаПроцентИзменения,
		ФорматированнаяСтрокаЦена,
		ФорматированнаяСтрокаДопИнформация);
	
КонецФункции


// Параметры:
// 	Элементы - ЭлементыФормы
// 	ВыбранныеЦены - ТаблицаЗначений - 
// 	ДатаДействующихЦен - Дата
// 	ТекущаяДата - Дата
// 	ИспользоватьХарактеристикиНоменклатуры - Булево
// 	ТекущееМаркетинговоеМероприятие - СправочникСсылка.МаркетинговыеМероприятия
// 	ЕстьЦенаУстановленнаяБудующейДатой - Булево
// 	ВидЦены - СправочникСсылка.ВидыЦен
// Возвращаемое значение:
// 	ФорматированнаяСтрока, Строка - Описание
Функция ПолучитьИнформационнуюСтрокуДляЯчейки(Элементы,
	                            ВыбранныеЦены,
	                            ДатаДействующихЦен,
	                            ТекущаяДата,
	                            ИспользоватьХарактеристикиНоменклатуры,
	                            ЕстьЦенаУстановленнаяБудующейДатой,
								ВидЦены = Неопределено) Экспорт
	
	Элемент = Элементы.ДеревоЦен;//ТаблицаФормы
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или
		Элемент  = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ФорматированнаяСтрокаВидЦен = "";
	ФорматированнаяСтрокаСтараяЦена = "";
	ФорматированнаяСтрокаПроцентИзменения = "";
	ФорматированнаяСтрокаСуммаИзменения = "";
	ФорматированнаяСтрокаЦена = "";
	ФорматированнаяСтрокаДопИнформация = "";
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		ПозицияПодстроки = 0;
	Иначе
		ПозицияПодстроки = СтрНайти(Элемент.ТекущийЭлемент.Имя, "ВидЦены");
	КонецЕсли;
	
	Если ПозицияПодстроки <> 0 Тогда

		ИмяКолонки = Прав(Элемент.ТекущийЭлемент.Имя, СтрДлина(Элемент.ТекущийЭлемент.Имя) - ПозицияПодстроки + 1);
			
		ГруппаЦен = Элементы.Найти("ДеревоЦен" + "ГруппаЦены" + ИмяКолонки);
		
		Если ГруппаЦен <> Неопределено Тогда
		 	Если ТекущиеДанные.свойство("Валюта" + ИмяКолонки) Тогда
				НаименованиеВалюты = Новый ФорматированнаяСтрока( " " + Строка(ТекущиеДанные["Валюта" + ИмяКолонки]),Новый Шрифт(,,Истина));
			Иначе	
				НаименованиеВалюты = Новый ФорматированнаяСтрока(Прав(ГруппаЦен.Заголовок, 4),Новый Шрифт(,,Истина));
			КонецЕсли;
			НаименованиеВидаЦен = Лев(ГруппаЦен.Заголовок, СтрДлина(ГруппаЦен.Заголовок) - 5);
		КонецЕсли;
		
		Если ВидЦены = Неопределено Тогда
			НайденныеВидыЦен = ВыбранныеЦены.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
			Если НайденныеВидыЦен.Количество() = 1 Тогда
				ВидЦены = НайденныеВидыЦен[0];
			КонецЕсли;		
		КонецЕсли;
		
		ФорматСтрокиНаименованиеВидаЦен = Новый ФорматированнаяСтрока(НаименованиеВидаЦен, Новый Шрифт(,,Истина),,,ПолучитьНавигационнуюСсылку(ВидЦены.Ссылка));
		
		#Если ВебКлиент Тогда
			ФорматированнаяСтрокаВидЦен = Новый ФорматированнаяСтрока("  ", ФорматСтрокиНаименованиеВидаЦен);
		#Иначе
			ФорматированнаяСтрокаВидЦен = Новый ФорматированнаяСтрока("  ", ГруппаЦен.КартинкаШапки, " ", ФорматСтрокиНаименованиеВидаЦен);
		#КонецЕсли
				
		Если ТекущиеДанные["ПроцентИзменения" + ИмяКолонки] <> 0 Тогда
			
			СтрокаПроцентИзменения = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные["ПроцентИзменения" + ИмяКолонки], "ЧЦ=5; ЧДЦ=2"), Новый Шрифт(,,Истина));
			ФорматированнаяСтрокаПроцентИзменения = Новый ФорматированнаяСтрока(" (", СтрокаПроцентИзменения, "%)");
			
		КонецЕсли;

		Если ТекущиеДанные["СуммаИзменения" + ИмяКолонки] <> 0 Тогда
			
			СтрокаСуммаИзменения = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные["СуммаИзменения" + ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина));
			
			Если ТекущиеДанные["СуммаИзменения" + ИмяКолонки] > 0 Тогда
				#Если ВебКлиент Тогда
				ИзменениеСтрока = Новый ФорматированнаяСтрока("  ");
				#Иначе
				ИзменениеСтрока = Новый ФорматированнаяСтрока("  ", БиблиотекаКартинок.ПиктограммаТрендаРостВДиапазоне, " ");
				#КонецЕсли
			Иначе
				#Если ВебКлиент Тогда
				ИзменениеСтрока = Новый ФорматированнаяСтрока("  ");
				#Иначе
				ИзменениеСтрока = Новый ФорматированнаяСтрока("  ", БиблиотекаКартинок.ПиктограммаТрендаПадениеУлучшается, " ");
				#КонецЕсли
			КонецЕсли;
			
			ФорматированнаяСтрокаСуммаИзменения = Новый ФорматированнаяСтрока(ИзменениеСтрока, СтрокаСуммаИзменения, НаименованиеВалюты);
			
		КонецЕсли;
		
		Если ТекущиеДанные[ИмяКолонки] <> 0 Тогда
			
			Если ТекущиеДанные[ИмяКолонки] > ТекущиеДанные["СтараяЦена" + ИмяКолонки] Тогда
				СтрокаЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные[ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина), WebЦвета.ТемноСиний);
			ИначеЕсли ТекущиеДанные[ИмяКолонки] < ТекущиеДанные["СтараяЦена" + ИмяКолонки] Тогда
				СтрокаЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные[ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина), WebЦвета.ТемноЗеленый);
			Иначе
				СтрокаЦена = Новый ФорматированнаяСтрока(Формат(ТекущиеДанные[ИмяКолонки], "ЧДЦ=2"), Новый Шрифт(,,Истина));
			КонецЕсли;
					
			ЦенаИзменена = ТекущиеДанные["ИзмененаВручную" + ИмяКолонки];
			
			Если ЦенаИзменена Тогда
				КартинкаЦенаИзменена = БиблиотекаКартинок.Изменить;
				#Если ВебКлиент Тогда
				ФорматированнаяСтрокаЦена = Новый ФорматированнаяСтрока(" = ", СтрокаЦена, НаименованиеВалюты);
				#Иначе
				ФорматированнаяСтрокаЦена = Новый ФорматированнаяСтрока(" = ", КартинкаЦенаИзменена, СтрокаЦена, НаименованиеВалюты);
				#КонецЕсли
			Иначе
				ФорматированнаяСтрокаЦена = Новый ФорматированнаяСтрока(" = ", СтрокаЦена, НаименованиеВалюты);
			КонецЕсли;
			
		КонецЕсли;
				
		ФорматированнаяСтрокаОтступ = Новый ФорматированнаяСтрока("  ");
		ФорматированнаяИсторияИзмененияЦены = Новый ФорматированнаяСтрока(НСтр("ru = 'история'"),Новый Шрифт(,,Истина),,,"СсылкаГруппыИсторииИзмененияЦены");
			
		Если ЕстьЦенаУстановленнаяБудующейДатой Тогда 

			#Если ВебКлиент Тогда
				ФорматированнаяСтрокаДопИнформация = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("  ", " ! ",),,WebЦвета.Красный);
			#Иначе
				ФорматированнаяСтрокаДопИнформация = Новый ФорматированнаяСтрока("  ", БиблиотекаКартинок.Внимание16, "  ");
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
		
	Возврат Новый ФорматированнаяСтрока(
	    "",
		ФорматированнаяСтрокаВидЦен,
		ФорматированнаяСтрокаЦена,
		ФорматированнаяСтрокаСуммаИзменения,
		ФорматированнаяСтрокаПроцентИзменения,
		ФорматированнаяСтрокаОтступ,
		ФорматированнаяИсторияИзмененияЦены,
		ФорматированнаяСтрокаДопИнформация);
	
КонецФункции
	

// Формирует информационные строки по истории изменения вида цен
// 
// Параметры:
// 	Параметры - Структура:
// 	 * ПредыдущаяВалюта - СправочникСсылка.Валюты
// Возвращаемое значение:
// 	Структура - Описание:
// * ФорматированнаяСтрокаПиктограммаТренда - ФорматированнаяСтрока -
// * ФорматированнаяСтрокаДинамики - ФорматированнаяСтрока -
// * ФорматированнаяСтрокаИстории - ФорматированнаяСтрока -
Функция ПолучитьИнформационнуюСтрокуИстории(Параметры) Экспорт
	
	СтрокаЦенаНаДату = НСтр("ru = 'Цена на %1'") + " ";
	СтрокаЦенаНаДату = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЦенаНаДату, Формат(Параметры.Период,"ДЛФ=D;"));
	СтрокаЗначениеЦены =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' %2 %3'"),,Формат(Параметры.Цена,"ЧДЦ=2"), Параметры.Валюта); 
	ФорматированнаяСтрокаПиктограммаТренда = Новый ФорматированнаяСтрока(" ");
	ФорматированнаяСтрокаОтступ = Новый ФорматированнаяСтрока(" ");
	Если Параметры.ЦенаИзменена Тогда
		#Если ВебКлиент Тогда
			ФорматированнаяСтрокаНачалоСтроки = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("", " V ",""),Новый Шрифт(,,Истина),,);
		#Иначе
			ФорматированнаяСтрокаНачалоСтроки = Новый ФорматированнаяСтрока("",БиблиотекаКартинок.Изменить, "");
		#КонецЕсли		
	ИначеЕсли Параметры.Период > ТекущаяДата() Тогда
		#Если ВебКлиент Тогда
			ФорматированнаяСтрокаНачалоСтроки = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("", " ! ",""),,WebЦвета.Красный);
		#Иначе
			ФорматированнаяСтрокаНачалоСтроки = Новый ФорматированнаяСтрока("", БиблиотекаКартинок.Внимание16, "");
		#КонецЕсли 	
	Иначе
		ФорматированнаяСтрокаНачалоСтроки = Новый ФорматированнаяСтрока("    ");
	КонецЕсли;
	
	СтрокаЗначениеЦены = Новый ФорматированнаяСтрока(СтрокаЗначениеЦены,Новый Шрифт(,,Истина));
	
	ФорматированнаяСтрокаЦенаНаДату = Новый ФорматированнаяСтрока(СтрокаЦенаНаДату,ФорматированнаяСтрокаОтступ,СтрокаЗначениеЦены); 
	
	Если Параметры.Свойство("ПредыдущаяЦена") И Параметры.ПредыдущаяЦена<>0 Тогда
			ИзменениеЦены = Параметры.Цена - Параметры.ПредыдущаяЦена;
			ПроцентИзменения = Параметры.Цена/(Параметры.ПредыдущаяЦена/100)-100; 
			СтрокаИзменениеЦены = Новый ФорматированнаяСтрока("",Формат(ИзменениеЦены,"ЧДЦ=2"));
			СтрокаВалютыИзмененияЦены = Новый ФорматированнаяСтрока(" ",Параметры.ПредыдущаяВалюта["Наименование"]," ");
			СтрокаИзмененияПроцента = Новый ФорматированнаяСтрока(" (",Формат(ПроцентИзменения,"ЧДЦ=2"),"%) ");	
		Если ИзменениеЦены > 0 Тогда
			#Если НЕ ВебКлиент Тогда
				ФорматированнаяСтрокаПиктограммаТренда = Новый ФорматированнаяСтрока("", БиблиотекаКартинок.ПиктограммаТрендаРостВДиапазоне,"");
			#КонецЕсли				
		ИначеЕсли  ИзменениеЦены < 0 Тогда 
			#Если НЕ ВебКлиент Тогда
				ФорматированнаяСтрокаПиктограммаТренда = Новый ФорматированнаяСтрока("", БиблиотекаКартинок.ПиктограммаТрендаПадениеУлучшается,"");
			#КонецЕсли	
		Иначе
			 ФорматированнаяСтрокаПиктограммаТренда = Новый ФорматированнаяСтрока("");
		КонецЕсли;
		
		ФорматированнаяСтрокаИзменение = Новый ФорматированнаяСтрока(СтрокаИзменениеЦены,СтрокаВалютыИзмененияЦены, СтрокаИзмененияПроцента);
	Иначе 
		ФорматированнаяСтрокаИзменение = Новый ФорматированнаяСтрока("  ");
	КонецЕсли;		
	
	Если Параметры.Свойство("МаркетинговоеМероприятие") И ЗначениеЗаполнено(Параметры.МаркетинговоеМероприятие) Тогда
		ФорматированнаяСтрокаМаркетинговоеМероприятие = Новый ФорматированнаяСтрока("по акции",Новый Шрифт(,,Истина),WebЦвета.Коралловый,,ПолучитьНавигационнуюСсылку(Параметры.МаркетинговоеМероприятие));
	Иначе
		ФорматированнаяСтрокаМаркетинговоеМероприятие = " ";
	КонецЕсли;		
	
	ФорматированнаяСтрокаИстории = Новый ФорматированнаяСтрока(
						ФорматированнаяСтрокаОтступ,
						ФорматированнаяСтрокаЦенаНаДату);
						
	ФорматированнаяСтрокаДинамики = Новый ФорматированнаяСтрока(
						ФорматированнаяСтрокаИзменение);
												
	ФорматированнаяСтрокаДинамики = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаДинамики,Новый Шрифт(,,Истина),,);
	ФорматированнаяСтрокаИстории = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаИстории,Новый Шрифт(,,Истина),,);

	
	Если НЕ Параметры.ЭтоТекущаяЦена Тогда 
		ФорматированнаяСтрокаИстории = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаИстории,Новый Шрифт(,,Истина),WebЦвета.Серый);
		ФорматированнаяСтрокаДинамики = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаДинамики,Новый Шрифт(,,Истина),WebЦвета.Серый);	
	КонецЕсли;					
						
	СтруктураСтрокиИстории = Новый Структура();
	СтруктураСтрокиИстории.Вставить("ФорматированнаяСтрокаИстории",ФорматированнаяСтрокаИстории);
	СтруктураСтрокиИстории.Вставить("ФорматированнаяСтрокаДинамики",ФорматированнаяСтрокаДинамики);
	СтруктураСтрокиИстории.Вставить("ФорматированнаяСтрокаПиктограммаТренда",ФорматированнаяСтрокаПиктограммаТренда);
	СтруктураСтрокиИстории.Вставить("ФорматированнаяСтрокаНачалоСтроки",ФорматированнаяСтрокаНачалоСтроки);
	СтруктураСтрокиИстории.Вставить("ФорматированнаяСтрокаПоАкции",ФорматированнаяСтрокаМаркетинговоеМероприятие);
	
	Возврат СтруктураСтрокиИстории;
						
КонецФункции

#Если Не ВебКлиент Тогда

// Выгружает дерево цен в Excel
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - , в которой необходимо рассчитать цены
//  ПараметрыПечати - Структура - параметры печати, используемые при формировании печатной формы.
//
Процедура ВыгрузитьВExcelБезСсылки(Форма, ПараметрыПечати) Экспорт
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить цены в Excel.
		                               |Убедитесь, что на компьютере установлена программа Microsoft Excel.
		                               |Подробности:'") + " "
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	АдресФайлаВоВременномХранилище = УстановкаЦенВызовСервера.ВыгрузитьВExcelБезСсылки(
		ПредопределенноеЗначение("Документ.УстановкаЦенНоменклатуры.ПустаяСсылка"),
		Форма.УникальныйИдентификатор,
		ПараметрыПечати);
		
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(,АдресФайлаВоВременномХранилище));
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Расширение = "xls";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыПечати", ПараметрыПечати);
	ДополнительныеПараметры.Вставить("COMОбъект", COMОбъект);
	НачатьПолучениеФайлов(
		Новый ОписаниеОповещения("ВыгрузитьВExcelБезСсылкиНачатьПолучениеФайловЗавершение", УстановкаЦенКлиент, ДополнительныеПараметры),
		ПолучаемыеФайлы,
		ДиалогВыбораФайла,
		Истина);
	
КонецПроцедуры

// Загружает данные из Excel в дерево цен формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - в которую необходимо загрузить данные из Excel.
//
Процедура ЗагрузитьИзExcelБезСсылки(Форма) Экспорт
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить цены из файла Excel.
		                               |Убедитесь, что на сервере установлена программа Microsoft Excel.
		                               |Подробности:'")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("COMОбъект", COMОбъект);
	
	ИмяВременногоФайла = Неопределено;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("ЗагрузитьИзExcelБезСсылкиДиалогВыбораФайлаЗавершение",
			УстановкаЦенКлиент,
			ДополнительныеПараметры));
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьИзExcelПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить цены из файла Excel.
		                               |Убедитесь, что на сервере установлена программа Microsoft Excel.
		                               |Подробности:'")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ИмяВременногоФайла = Результат.ПолноеИмяФайла;
	Форма              = ДополнительныеПараметры.Форма;
	ПрисоединенныйФайл = ДополнительныеПараметры.ПрисоединенныйФайл;
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Попытка
		COMОбъект.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
		Workbook      = COMОбъект.Workbooks.Open(ИмяВременногоФайла,,Истина,,,,,,,,Ложь);
		SettingsSheet = Workbook.Worksheets(1);
		Sheet         = Workbook.Worksheets(2);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Файл не может быть загружен.
		                               |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("ИдентификаторВидЦены, НомерКолонкиЦена, НомерКолонкиУпаковка");
			НоваяСтрока.ИдентификаторВидЦены = SettingsSheet.Cells(НомерСтроки, 1).Value;
			НоваяСтрока.НомерКолонкиЦена     = SettingsSheet.Cells(НомерСтроки, 5).Value;
			НоваяСтрока.НомерКолонкиУпаковка = SettingsSheet.Cells(НомерСтроки, 7).Value;
			МассивСтруктурВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если МассивСтруктурВидыЦен.Количество() > 0 Тогда
			
			// Загрузка цен номенклатуры
			НомерСтроки = 3;
			ЕстьДополнительнаяКолонка = (СтрДлина(Sheet.Cells(НомерСтроки, 2).Value) <> 36);
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value) Цикл
				
				Для Каждого СтрокаТЧ Из МассивСтруктурВидыЦен Цикл
					
					НоваяСтрока = Новый Структура(
						"ИдентификаторНоменклатура,
						|ИдентификаторХарактеристика,
						|ИдентификаторСерияЦО,
						|ИдентификаторУпаковкаЦО,
						|ИдентификаторУпаковка,
						|ИдентификаторВидЦены,
						|Цена");
					НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					НоваяСтрока.ИдентификаторХарактеристика = Sheet.Cells(НомерСтроки, 3 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					Если ИспользуетсяЦенообразование25 Тогда
						НоваяСтрока.ИдентификаторСерияЦО        = Sheet.Cells(НомерСтроки, 4 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
						НоваяСтрока.ИдентификаторУпаковкаЦО     = Sheet.Cells(НомерСтроки, 5 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					КонецЕсли;
					НоваяСтрока.ИдентификаторУпаковка       = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиУпаковка).Value;
					НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;
					НоваяСтрока.Цена                        = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
					МассивСтруктурТовары.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Workbook.Close(0);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Файл не может быть загружен.
			           |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
			           |Подробности: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	Данные = Новый Структура(
		"ФормаВладелец, ВидыЦен, Товары", 
		Форма.УникальныйИдентификатор, МассивСтруктурВидыЦен, МассивСтруктурТовары);
	
	Оповестить("ЗагрузитьИзExcel", Данные);
	
КонецПроцедуры

Процедура ВыгрузитьВExcelПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить цены в Excel.
		                               |Убедитесь, что на компьютере установлена программа Microsoft Excel.
		                               |Подробности:'") + " "
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ИмяВременногоФайла = Результат.ПолноеИмяФайла;
	Форма              = ДополнительныеПараметры.Форма;
	ПараметрыПечати    = ДополнительныеПараметры.ПараметрыПечати;
	ВыводитьКоды       = ДополнительныеПараметры.ВыводитьКоды;
	Информация         = ДополнительныеПараметры.Информация;
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Попытка
		
		COMОбъект.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
		
		НомерКолонки = ?(ИспользуетсяЦенообразование25, 7, 5) + ?(ВыводитьКоды,1,0);
		НомерСтроки  = 1;
		
		Workbook = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
		Sheet = Workbook.Worksheets(1);
		
		// Установка автофильтра на колонки цен
		Sheet.Range(Sheet.Cells(2, 1), Sheet.Cells(2, 256)).AutoFilter();
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик
		Sheet.Columns(2 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		Sheet.Columns(3 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		Если ИспользуетсяЦенообразование25 Тогда
			Sheet.Columns(4 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
			Sheet.Columns(5 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		КонецЕсли;
		
		// Создание служебной таблицы для обратной загрузки
		SettingsSheet = Workbook.Worksheets.Add();
		SettingsSheet.Cells(НомерСтроки, 1).Value = НСтр("ru='Уникальный идентификатор'");
		SettingsSheet.Cells(НомерСтроки, 2).Value = НСтр("ru='Вид цены'");
		SettingsSheet.Cells(НомерСтроки, 3).Value = НСтр("ru='Номер колонки ""Старая цена""'");
		SettingsSheet.Cells(НомерСтроки, 4).Value = НСтр("ru='Номер колонки ""Процент изменения""'");
		SettingsSheet.Cells(НомерСтроки, 5).Value = НСтр("ru='Номер колонки ""Цена""'");
		SettingsSheet.Cells(НомерСтроки, 6).Value = НСтр("ru='Номер колонки ""Единица измерения""'");
		SettingsSheet.Cells(НомерСтроки, 7).Value = НСтр("ru='Номер колонки ""Уникальный идентификатор""'");
		
		НомерСтроки = НомерСтроки + 1;
		ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроекДляКлиента);
		Для Каждого ВидЦены Из ДеревоНастроек.Строки Цикл
			Если ВидЦены.ВыводитьНаПечать Тогда
				
				ВыводитьСтаруюЦену       = Ложь;
				ВыводитьПроцентИзменения = Ложь;
				ВыводитьСуммуИзменения   = Ложь;
				Для Каждого Колонка Из ВидЦены.Строки Цикл
					Если Колонка.Параметр = "СтараяЦена" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСтаруюЦену = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "ПроцентИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьПроцентИзменения = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "СуммаИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСуммуИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				SettingsSheet.Cells(НомерСтроки, 1).Value = Строка(ВидЦены.Параметр.УникальныйИдентификатор());
				SettingsSheet.Cells(НомерСтроки, 2).Value = Строка(ВидЦены.Параметр); // Наименование вида цены
				
				Если ВыводитьСтаруюЦену Тогда
					SettingsSheet.Cells(НомерСтроки, 3).Value = НомерКолонки; // Старая цена
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 3).Value = 0;
				КонецЕсли;
				
				Если ВыводитьСуммуИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Сумма изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				Если ВыводитьПроцентИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Процент изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				SettingsSheet.Cells(НомерСтроки, 5).Value = НомерКолонки; // Цена
				НомерКолонки = НомерКолонки + 1;
				
				SettingsSheet.Cells(НомерСтроки, 6).Value = НомерКолонки; // Единица измерения
				НомерКолонки = НомерКолонки + 1;
				
				Sheet.Columns(НомерКолонки).Hidden = Истина;
				SettingsSheet.Cells(НомерСтроки, 7).Value = НомерКолонки; // Уникальный идентификатор упаковки
				НомерКолонки = НомерКолонки + 1;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		ВидыЦен = Новый Массив;
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("НомерКолонкиСтараяЦена, НомерКолонкиПроцентИзменения, НомерКолонкиЦена");
			НоваяСтрока.НомерКолонкиСтараяЦена       = SettingsSheet.Cells(НомерСтроки, 3).Value;
			НоваяСтрока.НомерКолонкиПроцентИзменения = SettingsSheet.Cells(НомерСтроки, 4).Value;
			НоваяСтрока.НомерКолонкиЦена             = SettingsSheet.Cells(НомерСтроки, 5).Value;
			ВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ШаблонФормулы = "=IF(RC[СтараяЦен]<>0,ROUND((RC[НомерКолонкиЦена]-RC[СтараяЦен])/RC[СтараяЦен]*100,2),0)";
		
		Если ВидыЦен.Количество() > 0 Тогда
			
			НомерСтроки = 3;
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 3).Value) Цикл
				
				Для Каждого СтрокаТЧ Из ВидыЦен Цикл
					
					Если СтрокаТЧ.НомерКолонкиСтараяЦена <> 0
						И СтрокаТЧ.НомерКолонкиПроцентИзменения <> 0
						И СтрокаТЧ.НомерКолонкиЦена <> 0 Тогда
						
						Формула = СтрЗаменить(ШаблонФормулы, "[СтараяЦен]", СтрокаТЧ.НомерКолонкиСтараяЦена);
						Формула = СтрЗаменить(Формула, "[НомерКолонкиЦена]", СтрокаТЧ.НомерКолонкиЦена);
						
						Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения).Formula = Формула;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Установка защиты на ячейки
		Sheet.Protection.AllowEditRanges.Add(
			НСтр("ru = 'Цены номенклатуры'"),                                           // Title
			Sheet.Range(Sheet.Cells(3, 1), Sheet.Cells(НомерСтроки-1, НомерКолонки-1)), // Range
			                                                                            // Password
		);
		
		Sheet.Protect(,//Password
				Ложь,  //DrawingObjects
				Истина,//Contents
				Истина,//Scenarios
				Ложь,  //UserInterfaceOnly
				Истина,//AllowFormattingCells
				Истина,//AllowFormattingColumns
				Истина,//AllowFormattingRows
				Ложь,  //AllowInsertingColumns
				Ложь,  //AllowInsertingRows
				Истина,//AllowInsertingHyperlinks
				Ложь,  //AllowDeletingColumns
				Ложь,  //AllowDeletingRows
				Истина,//AllowSorting
				Истина,//AllowFiltering
				Истина); //AllowUsingPivotTables
		
		SettingsSheet.Visible = Ложь;
		Workbook.Save();
		Workbook.Close(0);
		
		COMОбъект.Quit();
		COMОбъект = 0;
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыгрузитьВExcelОкончание",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		РаботаСФайламиКлиент.ПоместитьПрисоединенныйФайл(
			Оповещение,
			Информация.Файл,
			Форма.УникальныйИдентификатор);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось записать данные в файл. Подробности:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьВExcelОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Информация = ДополнительныеПараметры.Информация;
	
	РаботаСФайламиКлиент.ОткрытьФормуФайла(Информация.Файл);
	
КонецПроцедуры

// Параметры изменения в элементе дерева цен.
// 
// Параметры:
//  ВариантВыполнения -Строка - Вариант выполнения
// 
// Возвращаемое значение:
//  Структура - Параметры изменения в элементе дерева цен:
// * ВариантВыполнения - Строка
// * ИмяКолонкиУпаковка - Строка
// * ИмяКолонкиЗапретаРедактирования - Строка
// * СоответствиеКоэффициентовУпаковокНоменклатуры - Неопределено
// * ТекущееЗначениеУпаковки - Неопределено
// * ТекущееЗначение - Неопределено
// * КоэффициентУпаковкиЦеныИсточника - Число
// * ИмяТекущейКолонки - Строка
// * НоваяФормула - Строка
// * ПроцентИзменения - Число
// * СуммаИзменения - Число
// * ИзмененПроцент - Булево
// * ИзмененаФормула - Булево
// * ИзмененаСумма - Булево
// * Номенклатура - СправочникСсылка.Номенклатура, Неопределено -
// * ИспользоватьУпаковкиНоменклатуры - Булево
Функция ПараметрыИзмененияВЭлементеДереваЦен(ВариантВыполнения) Экспорт
	ПараметрыВызова = Новый Структура();
	ПараметрыВызова.Вставить("ВариантВыполнения", ВариантВыполнения);
	ПараметрыВызова.Вставить("ИмяКолонкиУпаковка", "");
	ПараметрыВызова.Вставить("ИмяКолонкиЗапретаРедактирования", "");
	
	Если ВариантВыполнения = "ЗаполнитьУпаковкиНоменклатуры" Тогда
		ПараметрыВызова.Вставить("МассивСтруктурУпаковокНоменклатуры", Неопределено);
	ИначеЕсли ВариантВыполнения = "ИзменитьУпаковкуВСтрокеДереваЦен"
		Или ПараметрыВызова.ВариантВыполнения = "ИзменитьВалютуВСтрокеДереваЦен" Тогда
		ПараметрыВызова.Вставить("ТекущееЗначение", Неопределено);
		ПараметрыВызова.Вставить("ИмяТекущейКолонки", "");
	ИначеЕсли ВариантВыполнения = "ИзменитьДанныеВСтрокеДереваЦен" Тогда
		ПараметрыВызова.Вставить("СоответствиеКоэффициентовУпаковокНоменклатуры", Неопределено);
		ПараметрыВызова.Вставить("ТекущееЗначениеУпаковки", Неопределено);
		ПараметрыВызова.Вставить("ТекущееЗначение", Неопределено);
		ПараметрыВызова.Вставить("КоэффициентУпаковкиЦеныИсточника", 0);
		ПараметрыВызова.Вставить("ИмяТекущейКолонки", "");
		ПараметрыВызова.Вставить("НоваяФормула", "");
		ПараметрыВызова.Вставить("ПроцентИзменения", 0);
		ПараметрыВызова.Вставить("СуммаИзменения", 0);
		ПараметрыВызова.Вставить("ИзмененПроцент", Ложь);
		ПараметрыВызова.Вставить("ИзмененаФормула", Ложь);
		ПараметрыВызова.Вставить("ИзмененаСумма", Ложь);
		ПараметрыВызова.Вставить("Номенклатура", Неопределено);
		ПараметрыВызова.Вставить("ИспользоватьУпаковкиНоменклатуры", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыВызова;
КонецФункции

Процедура ПрименитьИзмененияВДеревеЦен(ЭлементДереваЦен, ПараметрыВызова) Экспорт

	ЭлементыДереваЦенТекущие = ЭлементДереваЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваЦенТекущий Из ЭлементыДереваЦенТекущие Цикл
		
		Если ЭлементДереваЦенТекущий[ПараметрыВызова.ИмяКолонкиЗапретаРедактирования] Тогда
			Продолжить;
		КонецЕсли;

		Если ПараметрыВызова.ВариантВыполнения = "ЗаполнитьУпаковкиНоменклатуры" Тогда
			ЗаполнитьУпаковкиНоменклатуры(ЭлементДереваЦенТекущий, ПараметрыВызова);
		ИначеЕсли ПараметрыВызова.ВариантВыполнения = "ИзменитьДанныеВСтрокеДереваЦен" Тогда 
			ИзменитьДанныеВСтрокеДереваЦен(ЭлементДереваЦенТекущий, ПараметрыВызова);
		ИначеЕсли ПараметрыВызова.ВариантВыполнения = "ИзменитьУпаковкуВСтрокеДереваЦен"
			Или ПараметрыВызова.ВариантВыполнения = "ИзменитьВалютуВСтрокеДереваЦен" Тогда
			ИмяТекущейКолонки 	= ПараметрыВызова.ИмяТекущейКолонки;
			ТекущееЗначение 	= ПараметрыВызова.ТекущееЗначение;
			
			ЭлементДереваЦенТекущий[ИмяТекущейКолонки] = ТекущееЗначение;
		КонецЕсли;
		
		ПрименитьИзмененияВДеревеЦен(ЭлементДереваЦенТекущий, ПараметрыВызова);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ТекущийЭлементДереваЦен - ПолеФормы
// 	ПараметрыВызова - Структура - где:
//   * МассивСтруктурУпаковокНоменклатуры - Массив - массив упаковок.
Процедура ЗаполнитьУпаковкиНоменклатуры(ТекущийЭлементДереваЦен, ПараметрыВызова)
	ЗначениеКолонкиУпаковка = ТекущийЭлементДереваЦен[ПараметрыВызова.ИмяКолонкиУпаковка];
	Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) 
		И УстановкаЦенКлиентСервер.НайтиСтруктуруУпаковкиНоменклатурыВМассиве(ПараметрыВызова.МассивСтруктурУпаковокНоменклатуры, 
																				ТекущийЭлементДереваЦен.Номенклатура, 
																				ЗначениеКолонкиУпаковка) = Неопределено Тогда
		Структура = УстановкаЦенКлиентСервер.ИнициализироватьОписаниеУпаковкиНоменклатуры();
		Структура.Номенклатура = ТекущийЭлементДереваЦен.Номенклатура;
		Структура.Упаковка = ЗначениеКолонкиУпаковка;
		ПараметрыВызова.МассивСтруктурУпаковокНоменклатуры.Добавить(Структура)
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьДанныеВСтрокеДереваЦен(ТекущийЭлементДереваЦен, Знач ПараметрыВызова)

	ИмяТекущейКолонки 	= ПараметрыВызова.ИмяТекущейКолонки;
	ТекущееЗначение 	= ПараметрыВызова.ТекущееЗначение;
	КоэффициентУпаковкиЦеныИсточника 				= ПараметрыВызова.КоэффициентУпаковкиЦеныИсточника;
	СоответствиеКоэффициентовУпаковокНоменклатуры 	= ПараметрыВызова.СоответствиеКоэффициентовУпаковокНоменклатуры;
	
	Если ПараметрыВызова.ИспользоватьУпаковкиНоменклатуры Тогда
		
		ЗначениеКолонкиУпаковка = ТекущийЭлементДереваЦен[ПараметрыВызова.ИмяКолонкиУпаковка];
		Если ПараметрыВызова.ТекущееЗначениеУпаковки = ЗначениеКолонкиУпаковка
			И ТекущийЭлементДереваЦен[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
			
			Если ПараметрыВызова.ИзмененПроцент Тогда
				
				Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = ПараметрыВызова.ПроцентИзменения;
					ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = Окр(
						ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки] * ((ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1), 15, 2);
				Иначе
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = 0;
				КонецЕсли;
			ИначеЕсли ПараметрыВызова.ИзмененаФормула Тогда
				 	
				ТекущийЭлементДереваЦен["Формула"+ИмяТекущейКолонки] = ПараметрыВызова.НоваяФормула;
				// рассчитываем по формуле
				// заполняем отклонения 
				Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
						100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
						     - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки]) / ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки], 5, 2);
				Иначе
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
				КонецЕсли;
			ИначеЕсли ПараметрыВызова.ИзмененаСумма Тогда
			
				ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки] 
														+ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки];
				
				Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
						100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
						       - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки]) / ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки],
						5,
						2);
				Иначе
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
				КонецЕсли;
			Иначе
				ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = ТекущееЗначение;
				Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
						100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
													- ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки]) 
													/ ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки], 5, 2);
				Иначе
					ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
				КонецЕсли;
			КонецЕсли;
			ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки] = 
			ТекущийЭлементДереваЦен[ИмяТекущейКолонки] - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки];
			
			ТекущийЭлементДереваЦен["ИзмененаВручную"       + ИмяТекущейКолонки] = 
													(ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки] <> 0);
			ТекущийЭлементДереваЦен["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
			
		Иначе
			
			// Определим коэффициент упаковки влияющей цены
			КоэффициентУпаковкиЦеныНазначения = 1;
			
			Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
				РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
																							ПараметрыВызова.Номенклатура, 
																							ЗначениеКолонкиУпаковка);
				Если РезультатПоиска <> Неопределено Тогда
					КоэффициентУпаковкиЦеныНазначения = РезультатПоиска;
				КонецЕсли;
			КонецЕсли;
			
			Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
				НоваяЦена = ТекущееЗначение;
			Иначе
				НоваяЦена = ТекущееЗначение / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
			КонецЕсли;
			
			Если ТекущийЭлементДереваЦен[ИмяТекущейКолонки] <> НоваяЦена Или ПараметрыВызова.ИзмененаФормула Тогда
				
				Если ПараметрыВызова.ИзмененПроцент Тогда
					 
					Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = ПараметрыВызова.ПроцентИзменения;
						ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = Окр(
							ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки] 
							* ((ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1), 15, 2);
					Иначе
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
						ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = 0;
					КонецЕсли;
				
				ИначеЕсли ПараметрыВызова.ИзмененаФормула Тогда
					 	
					ТекущийЭлементДереваЦен["Формула"+ИмяТекущейКолонки] = ПараметрыВызова.НоваяФормула;
					// заполняем отклонения 
					Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
							100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
							       - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки]) 
							       / ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки],
							5,
							2);
					Иначе
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
					
				ИначеЕсли ПараметрыВызова.ИзмененаСумма Тогда
				
					ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = 
											ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки] 
											+ ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки];
					
					Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
							100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
							       - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки]) / ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки],
							5,
							2);
					Иначе
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				Иначе
					
					ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = НоваяЦена;
					
					Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
							100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
							       - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки]) 
							       / ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки],
							5,
							2);
					Иначе
						ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки] = 
					ТекущийЭлементДереваЦен[ИмяТекущейКолонки]-ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки];
				ТекущийЭлементДереваЦен["ИзмененаВручную"       + ИмяТекущейКолонки] = 
													(ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки] <> 0);
				ТекущийЭлементДереваЦен["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НоваяЦена = ТекущееЗначение;
		
		Если ПараметрыВызова.ИзмененаФормула Тогда
			
			ТекущийЭлементДереваЦен["Формула"+ИмяТекущейКолонки] = ПараметрыВызова.НоваяФормула;
		
		КонецЕсли;	
		
		Если ТекущийЭлементДереваЦен[ИмяТекущейКолонки] <> НоваяЦена Или ПараметрыВызова.ИзмененаФормула Тогда
					
			ТекущийЭлементДереваЦен[ИмяТекущейКолонки] = НоваяЦена;
			ТекущийЭлементДереваЦен["ИзмененаВручную"       + ИмяТекущейКолонки] = 
													(ТекущийЭлементДереваЦен[ИмяТекущейКолонки] 
													- ТекущийЭлементДереваЦен["СтараяЦена" + ИмяТекущейКолонки] <> 0);
			ТекущийЭлементДереваЦен["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
			
			Если ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
				ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
					100 * (ТекущийЭлементДереваЦен[ИмяТекущейКолонки]
					 - ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки])/ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки],
					5,
					2);
				ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки] = ТекущийЭлементДереваЦен[ИмяТекущейКолонки]-ТекущийЭлементДереваЦен["СтараяЦена"+ИмяТекущейКолонки];
			Иначе
				ТекущийЭлементДереваЦен["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
				ТекущийЭлементДереваЦен["СуммаИзменения"+ИмяТекущейКолонки] = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Параметры:
// 	ПолученныеФайлы - Массив из ОписаниеПередаваемогоФайла - 
// 	ДополнительныеПараметры - Структура - Дополнительный параметры
Процедура ВыгрузитьВExcelБезСсылкиНачатьПолучениеФайловЗавершениеВЕБ(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ПолученныеФайлы[0].ПолноеИмя;

	ЗапуститьПриложениеАсинх(ПолноеИмя);	
	
КонецПроцедуры

Процедура ЗагрузитьИзExcelБезСсылкиДиалогВыбораФайлаЗавершениеВЕБ(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ВыбранныеФайлы[0];
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьИзExcelОбработатьФайлНаСервереЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	НачатьПомещениеФайлаНаСервер(ОповещениеОЗавершении, , , ,ПолноеИмя, ДополнительныеПараметры.УникальныйИдентификатор);	
	
КонецПроцедуры

Процедура ЗагрузитьИзExcelОбработатьФайлНаСервереЗавершение(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт

	Данные = УстановкаЦенВызовСервера.ОбработатьЗагрузкуИзПрайсЛистЭксельНаСервере(ОписаниеПомещенногоФайла.Адрес, ДополнительныеПараметры);
	
	Оповестить("ЗагрузитьИзExcel", Данные);		

КонецПроцедуры


#Если Не ВебКлиент Тогда

// Параметры:
// 	ПолученныеФайлы - Массив из ОписаниеПередаваемогоФайла - 
// 	ДополнительныеПараметры - Структура - Дополнительный параметры
Процедура ВыгрузитьВExcelБезСсылкиНачатьПолучениеФайловЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма           = ДополнительныеПараметры.Форма;
	ПараметрыПечати = ДополнительныеПараметры.ПараметрыПечати;
	COMОбъект       = ДополнительныеПараметры.COMОбъект;
	
	ВыводитьКоды = ?(ЗначениеЗаполнено(Форма.ИмяДополнительнойКолонки), Истина, Ложь);
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Попытка
		
		НомерКолонки = ?(ИспользуетсяЦенообразование25, 7, 5) + ?(ВыводитьКоды,1,0);
		НомерСтроки  = 1;
		
		COMОбъект.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
		
		Workbook = COMОбъект.Workbooks.Open(ПолученныеФайлы[0].ПолноеИмя);
		Sheet = Workbook.Worksheets(1);
		Sheet.name = НСтр("ru='Прайс-лист'");
		
		// Установка автофильтра на колонки цен
		Sheet.Range(Sheet.Cells(2, 1), Sheet.Cells(2, 256)).AutoFilter();
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик
		Sheet.Columns(2 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		Sheet.Columns(3 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		
		Если ИспользуетсяЦенообразование25 Тогда
			Sheet.Columns(4 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
			Sheet.Columns(5 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		КонецЕсли;
		
		НомерПоследнегоЛиста = Workbook.WorkSheets.Count;		
		
		// Создание служебной таблицы для обратной загрузки
		SettingsSheet = Workbook.Worksheets.Add(, Workbook.WorkSheets(НомерПоследнегоЛиста));
		SettingsSheet.name = " ";
		SettingsSheet.Cells(НомерСтроки, 1).Value = НСтр("ru='Уникальный идентификатор'");
		SettingsSheet.Columns(1).Hidden = Истина;
		SettingsSheet.Cells(НомерСтроки, 2).Value = НСтр("ru='Вид цены'");
		SettingsSheet.Columns(2).Hidden = Истина;
		SettingsSheet.Cells(НомерСтроки, 3).Value = НСтр("ru='Номер колонки ""Старая цена""'");
		SettingsSheet.Columns(3).Hidden = Истина;
		SettingsSheet.Cells(НомерСтроки, 4).Value = НСтр("ru='Номер колонки ""Процент изменения""'");
		SettingsSheet.Columns(4).Hidden = Истина;
		SettingsSheet.Cells(НомерСтроки, 5).Value = НСтр("ru='Номер колонки ""Цена""'");
		SettingsSheet.Columns(5).Hidden = Истина;
		SettingsSheet.Cells(НомерСтроки, 6).Value = НСтр("ru='Номер колонки ""Единица измерения""'");
		SettingsSheet.Columns(6).Hidden = Истина;
		SettingsSheet.Cells(НомерСтроки, 7).Value = НСтр("ru='Номер колонки ""Уникальный идентификатор""'");
		SettingsSheet.Columns(7).Hidden = Истина;
		
		НомерСтроки = НомерСтроки + 1;
		ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроекДляКлиента);
		Для Каждого ВидЦены Из ДеревоНастроек.Строки Цикл
			Если ВидЦены.ВыводитьНаПечать Тогда
				
				ВыводитьСтаруюЦену       = Ложь;
				ВыводитьПроцентИзменения = Ложь;
				ВыводитьСуммуИзменения   = Ложь;
				Для Каждого Колонка Из ВидЦены.Строки Цикл
					Если Колонка.Параметр = "СтараяЦена" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСтаруюЦену = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "ПроцентИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьПроцентИзменения = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "СуммаИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСуммуИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				SettingsSheet.Cells(НомерСтроки, 1).Value = Строка(ВидЦены.Параметр.УникальныйИдентификатор());
				SettingsSheet.Cells(НомерСтроки, 2).Value = Строка(ВидЦены.Параметр); // Наименование вида цены
				
				Если ВыводитьСтаруюЦену Тогда
					SettingsSheet.Cells(НомерСтроки, 3).Value = НомерКолонки; // Старая цена
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 3).Value = 0;
				КонецЕсли;
				
				Если ВыводитьСуммуИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Сумма изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				Если ВыводитьПроцентИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Процент изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				SettingsSheet.Cells(НомерСтроки, 5).Value = НомерКолонки; // Цена
				НомерКолонки = НомерКолонки + 1;
				
				SettingsSheet.Cells(НомерСтроки, 6).Value = НомерКолонки; // Единица измерения
				НомерКолонки = НомерКолонки + 1;
				
				Sheet.Columns(НомерКолонки).Hidden = Истина;
				SettingsSheet.Cells(НомерСтроки, 7).Value = НомерКолонки; // Уникальный идентификатор упаковки
				НомерКолонки = НомерКолонки + 1;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		ВидыЦен = Новый Массив;
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("НомерКолонкиСтараяЦена, НомерКолонкиПроцентИзменения, НомерКолонкиЦена");
			НоваяСтрока.НомерКолонкиСтараяЦена       = SettingsSheet.Cells(НомерСтроки, 3).Value;
			НоваяСтрока.НомерКолонкиПроцентИзменения = SettingsSheet.Cells(НомерСтроки, 4).Value;
			НоваяСтрока.НомерКолонкиЦена             = SettingsSheet.Cells(НомерСтроки, 5).Value;
			ВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ШаблонФормулы = "=IF(RC[СтараяЦен]<>0,ROUND((RC[НомерКолонкиЦена]-RC[СтараяЦен])/RC[СтараяЦен]*100,2),0)";
		
		Если ВидыЦен.Количество() > 0 Тогда
			
			НомерСтроки = 3;
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 3).Value) Цикл
				
				Для Каждого СтрокаТЧ Из ВидыЦен Цикл
					
					Если СтрокаТЧ.НомерКолонкиСтараяЦена <> 0
						И СтрокаТЧ.НомерКолонкиПроцентИзменения <> 0
						И СтрокаТЧ.НомерКолонкиЦена <> 0 Тогда
						
						Формула = СтрЗаменить(ШаблонФормулы, "[СтараяЦен]", СтрокаТЧ.НомерКолонкиСтараяЦена);
						Формула = СтрЗаменить(Формула, "[НомерКолонкиЦена]", СтрокаТЧ.НомерКолонкиЦена);
						
						Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения).Formula = Формула;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Установка защиты на ячейки
		Sheet.Protection.AllowEditRanges.Add(
			НСтр("ru = 'Цены номенклатуры'"),                                           // Title
			Sheet.Range(Sheet.Cells(3, 1), Sheet.Cells(НомерСтроки-1, НомерКолонки-1)), // Range
			                                                                            // Password
		);
		
		Sheet.Protect(,//Password
				Ложь,  //DrawingObjects
				Истина,//Contents
				Истина,//Scenarios
				Ложь,  //UserInterfaceOnly
				Истина,//AllowFormattingCells
				Истина,//AllowFormattingColumns
				Истина,//AllowFormattingRows
				Ложь,  //AllowInsertingColumns
				Ложь,  //AllowInsertingRows
				Истина,//AllowInsertingHyperlinks
				Ложь,  //AllowDeletingColumns
				Ложь,  //AllowDeletingRows
				Истина,//AllowSorting
				Истина,//AllowFiltering
				Истина); //AllowUsingPivotTables
		
		Workbook.Worksheets(1).Activate();
		Workbook.Save();
		
		COMОбъект.Application.Visible = Истина;
		Workbook.Activate();
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось записать данные в файл. Подробности:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьИзExcelБезСсылкиДиалогВыбораФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма           = ДополнительныеПараметры.Форма;
	COMОбъект       = ДополнительныеПараметры.COMОбъект;
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Попытка
		COMОбъект.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
		Workbook      = COMОбъект.Workbooks.Open(ВыбранныеФайлы[0],,Истина,,,,,,,,Ложь);
		Sheet         = Workbook.Worksheets(1);
		SettingsSheet = Workbook.Worksheets(2);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Файл не может быть загружен.
			           |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
			           |Подробности: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("ИдентификаторВидЦены, НомерКолонкиЦена, НомерКолонкиУпаковка");
			НоваяСтрока.ИдентификаторВидЦены = SettingsSheet.Cells(НомерСтроки, 1).Value;
			НоваяСтрока.НомерКолонкиЦена     = SettingsSheet.Cells(НомерСтроки, 5).Value;
			НоваяСтрока.НомерКолонкиУпаковка = SettingsSheet.Cells(НомерСтроки, 7).Value;
			МассивСтруктурВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если МассивСтруктурВидыЦен.Количество() > 0 Тогда
			
			// Загрузка цен номенклатуры
			НомерСтроки = 3;
			ЕстьДополнительнаяКолонка = (СтрДлина(Sheet.Cells(НомерСтроки, 2).Value) <> 36);
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value) Цикл
				
				Для Каждого СтрокаТЧ Из МассивСтруктурВидыЦен Цикл
					
					НоваяСтрока = Новый Структура(
						"ИдентификаторНоменклатура,
						|ИдентификаторХарактеристика,
						|ИдентификаторСерияЦО,
						|ИдентификаторУпаковкаЦО,
						|ИдентификаторУпаковка,
						|ИдентификаторВидЦены,
						|Цена");
					НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					НоваяСтрока.ИдентификаторХарактеристика = Sheet.Cells(НомерСтроки, 3 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					Если ИспользуетсяЦенообразование25 Тогда
						НоваяСтрока.ИдентификаторСерияЦО        = Sheet.Cells(НомерСтроки, 4 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
						НоваяСтрока.ИдентификаторУпаковкаЦО     = Sheet.Cells(НомерСтроки, 5 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					КонецЕсли;
					НоваяСтрока.ИдентификаторУпаковка       = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиУпаковка).Value;
					НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;
					НоваяСтрока.Цена                        = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
					МассивСтруктурТовары.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Workbook.Close(0);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Файл не может быть загружен.
			           |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
			           |Подробности: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	Данные = Новый Структура(
		"ФормаВладелец, ВидыЦен, Товары", 
		Форма.УникальныйИдентификатор, МассивСтруктурВидыЦен, МассивСтруктурТовары);
	
	Оповестить("ЗагрузитьИзExcel", Данные);
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти