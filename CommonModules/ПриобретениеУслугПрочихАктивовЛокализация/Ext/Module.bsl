
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры


// Дополняет параметры выбора статей и аналитик в документе.
//
// Параметры:
// 	ПараметрыВыбора - См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
Процедура ДополнитьПараметрыВыбораСтатейИАналитик(ПараметрыВыбора, ХозяйственнаяОперация) Экспорт
	
	//++ Локализация
	ПараметрыВыбора.ВыборСтатьиДоходов = Ложь;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	ПроверитьЗаполнениеКоличестваПоРНПТ(Объект, Отказ);
	УчетПрослеживаемыхТоваровЛокализация.ПроверитьДанныеПрослеживаемостиНомеровГТД(Объект, Объект.Расходы, Объект.Дата, "Расходы");
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	
	ОчиститьКоличествоПоРНПТВТаблицеРасходы(Объект);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Документы.ЗаписьКнигиПокупок.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	
	// Авансовый отчет
	УсловиеВидимости = Новый Структура;
	УсловиеВидимости.Вставить("Реквизит", Метаданные.Документы.ПриобретениеУслугПрочихАктивов.Реквизиты.ХозяйственнаяОперация.Имя);
	УсловиеВидимости.Вставить("ВидСравнения", ВидСравнения.Равно);
	УсловиеВидимости.Вставить("Значение", Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.АвансовыйОтчет";
	КомандаПечати.Идентификатор = "АвансовыйОтчет3";
	КомандаПечати.Представление = НСтр("ru = 'Авансовый отчет'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.СписокФорм = "ФормаДокумента";
	КомандаПечати.УсловияВидимости.Добавить(УсловиеВидимости);
	
	

	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АвансовыйОтчет",
			НСтр("ru='Авансовый отчет'"),
			АвансовыйОтчетЛокализация.СформироватьПечатнуюФормуАвансовогоОтчетаСтараяВерсия(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	//-- Локализация
КонецПроцедуры


//++ Локализация


//-- Локализация
#КонецОбласти


//++ Локализация
#Область Фискализация

// Возвращает таблицу товаров для заполнения позиций строк в параметрах чека на оплату
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для получения товарных позиций
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с товарными позициями с количественными и суммовыми показателями
Функция ПозицииНоменклатурыПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Валюта, Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Содержание КАК НоменклатураНаименование,
	|	"""" КАК ХарактеристикаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.КурсЧислитель * КурсВалютыДокумента.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсВалютыДокумента.КурсЧислитель) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаДокумента, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента И БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.КурсЗнаменатель <> 0
	|	И КурсВалютыДокумента.КурсЧислитель <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Количество             КАК Количество,
	|	ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаНоменклатуры.СуммаНДС * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК СуммаНДС,
	|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
	|			ТаблицаНоменклатуры.Цена
	|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
	|			ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(31,2)) КАК Цена,
	|	
	|	ТаблицаНоменклатуры.НоменклатураНаименование           КАК НоменклатураНаименование,
	|	ТаблицаНоменклатуры.ХарактеристикаНаименование         КАК ХарактеристикаНаименование,
	|	ТаблицаНоменклатуры.Упаковка               КАК Упаковка,
	|	ТаблицаНоменклатуры.Упаковка               КАК УпаковкаНаименование
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.НомерСтроки
	|";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаДокумента", РеквизитыДокумента.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", РеквизитыДокумента.Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(РеквизитыДокумента.Организация));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
//-- Локализация

// Заполняет массив допустимых наименований входящих документов.
//
// Параметры:
//  МассивНаименований	 - Массив - массив наименования входящих документов.
//
Процедура ДополнитьНаименованияВходящихДокументов(МассивНаименований) Экспорт
	
КонецПроцедуры

#Область ОбработчикиСобытийФормыДокумента

// Возвращает параметры, используемые при установке условного оформления поля количества по РНПТ.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при установке условного оформления поля количества по РНПТ, со следующими
//										свойствами:
//		* ИмяПоляВводаКоличествоПоРНПТ - Строка - имя поля количества по РНПТ.
//		* ИмяПоляЕдиницаИзмеренияТНВЭД - Строка - имя поля единица измерения ТН ВЭД.
//		* ПутьКПолюВедетсяУчетПоРНПТ - Строка - путь к значению поля, хранящему сведения о ведении учета по РНПТ.
//		* ПутьКПолюДатаДокумента - Строка - путь к значению поля, хранящему сведения о дате объекта.
//
Функция ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ() Экспорт
	
	ПараметрыУсловногоОформления = Новый Структура;
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаКоличествоПоРНПТ",	"РасходыКоличествоПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляЕдиницаИзмеренияТНВЭД",	"РасходыКодТНВЭДЕдИзм");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоРНПТ",		"Объект.Расходы.ВедетсяУчетПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюДатаДокумента",			"Объект.Дата");
	
	Возврат ПараметрыУсловногоОформления;
	
КонецФункции

// Устанавливаем условное оформление количества по РНПТ основных средств.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//		* УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление компановки данных элементов формы.
//	ПараметрыУсловногоОформления - см. ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ
//
Процедура УстановитьУсловноеОформлениеФормыДокумента(Форма, ПараметрыУсловногоОформления = Неопределено) Экспорт
	
	Если ПараметрыУсловногоОформления = Неопределено Тогда
		ПараметрыУсловногоОформления = ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ();
	КонецЕсли;
	
	ИмяПоляВводаКоличествоПоРНПТ = ПараметрыУсловногоОформления.ИмяПоляВводаКоличествоПоРНПТ;
	ДатаНачалаПрослеживаемости = УчетПрослеживаемыхТоваровЛокализация.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
	ЭлементыФормы		= Форма.Элементы;
	УсловноеОформление	= Форма.УсловноеОформление;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаКоличествоПоРНПТ].Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не прослеживается>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмеренияТНВЭД].Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Заполняет служебный реквизит 'ВедетсяУчетПоРНПТ' табличной части 'Расходы'.
//
// Параметры:
//	ТаблицаТовары - ДанныеФормыКоллекция - табличная часть документа, в которой осуществляется заполнение реквизита.
//
Процедура ЗаполнитьПризнакВедетсяУчетРНПТ(ТаблицаТовары) Экспорт
	
	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасходов.НомерСтроки		КАК НомерСтроки,
	|	ТаблицаРасходов.НомерГТД		КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаРасходов
	|ИЗ
	|	&ТаблицаРасходов КАК ТаблицаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасходов.НомерСтроки	КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДанныеГТД.ТипНомераГТД В(ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|										ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ						КАК ВедетсяУчетПоРНПТ
	|ИЗ
	|	ТаблицаРасходов КАК ТаблицаРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеГТД
	|		ПО ТаблицаРасходов.НомерГТД = ДанныеГТД.Ссылка";
	
	ВыгружаемыеКолонки = "НомерСтроки, НомерГТД";
	
	Запрос.УстановитьПараметр("ТаблицаРасходов", ТаблицаТовары.Выгрузить(, ВыгружаемыеКолонки)); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТаблицаТовары[Выборка.НомерСтроки - 1].ВедетсяУчетПоРНПТ = Выборка.ВедетсяУчетПоРНПТ;
	КонецЦикла;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Возвращает признак прослеживаемости ОС.
//
// Параметры:
//	НомерГТД - СправочникСсылка.НомераГТД - значение номера ГТД.
//
// Возвращаемое значение:
//	Булево - признак учета ОС в системе учета прослеживаемых импортных товаров.
//
Функция ТоварПрослеживается(НомерГТД) Экспорт
	
	ТоварПрослеживается = Ложь;
	
	//++ Локализация
	
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		ТипНомераГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомерГТД, "ТипНомераГТД");
		
		ТоварПрослеживается = ТипНомераГТД = Перечисления.ТипыНомеровГТД.НомерРНПТ
								Или ТипНомераГТД = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта;
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат ТоварПрослеживается;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//  ДокументОбъект - ДокументОбъект.ПриобретениеУслугПрочихАктивов -
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры
//++ Локализация


//-- Локализация

#КонецОбласти

#Область ФрагментыПроводокРеглУчета

//++ Локализация


//-- Локализация

#КонецОбласти

//++ Локализация

#Область Прочее

Процедура ПроверитьЗаполнениеКоличестваПоРНПТ(Объект, Отказ)
	
	Если Не УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1, 1, 1)) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгружаемыеКолонки = "НомерСтроки, НомерГТД, КоличествоПоРНПТ";
	
	ТаблицаОС = Объект.Расходы.Выгрузить(, ВыгружаемыеКолонки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки		КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД,
	|	ТаблицаОС.КоличествоПоРНПТ	КАК КоличествоПоРНПТ
	|ПОМЕСТИТЬ ТаблицаОСДляЗапроса
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОСДляЗапроса КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеГТД
	|		ПО ТаблицаОС.НомерГТД = ДанныеГТД.Ссылка
	|
	|ГДЕ
	|	ТаблицаОС.КоличествоПоРНПТ = 0
	|	И ДанныеГТД.ТипНомераГТД В(ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОшибкаЗаполненияКоличестваПоРНПТ = НСтр("ru='Не заполнена колонка ""Количество по РНПТ"" в строке %НомерСтроки% списка ""Расходы"".'");
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрЗаменить(ОшибкаЗаполненияКоличестваПоРНПТ, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Расходы", Выборка.НомерСтроки, "КоличествоПоРНПТ");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьКоличествоПоРНПТВТаблицеРасходы(Объект)
	
	ВыгружаемыеКолонки = "НомерСтроки, НомерГТД, КоличествоПоРНПТ";
	
	ТаблицаОС = Объект.Расходы.Выгрузить(, ВыгружаемыеКолонки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки		КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД,
	|	ТаблицаОС.КоличествоПоРНПТ	КАК КоличествоПоРНПТ
	|ПОМЕСТИТЬ ТаблицаОСДляЗапроса
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОСДляЗапроса КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеГТД
	|		ПО ТаблицаОС.НомерГТД = ДанныеГТД.Ссылка
	|
	|ГДЕ
	|	ТаблицаОС.КоличествоПоРНПТ > 0
	|	И (НЕ ДанныеГТД.ТипНомераГТД В(ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта))
	|		ИЛИ НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Дата",		Объект.Дата);
	Запрос.УстановитьПараметр("ТаблицаОС",	ТаблицаОС);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Расходы[Выборка.НомерСтроки - 1].КоличествоПоРНПТ = 0;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#КонецОбласти
