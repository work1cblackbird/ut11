
#Область ПрограммныйИнтерфейс

// Проверяет, действует ли соглашение для партнера в данный момент 
//
// Параметры:
//  Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение,
//                для которого выполняется проверка.
//  Партнер - СправочникСсылка.Партнеры - партнер,
//                для которого выполняется проверка.
//
// Возвращаемое значение:
//  Булево    - Истина, если действует, ложь в обратном случае.
// 
Функция СоглашениеДействуетДляПартнера(Соглашение,Партнер)  Экспорт
	
	Если Соглашение.Пустая() Или Партнер.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашениеСКлиентом.Ссылка,
	|	СоглашениеСКлиентом.Склад,
	|	СоглашениеСКлиентом.Валюта,
	|	СоглашениеСКлиентом.ЦенаВключаетНДС,
	|	СоглашениеСКлиентом.Наименование,
	|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСКлиентом.ХозяйственнаяОперация,
	|	СоглашениеСКлиентом.Организация,
	|	СоглашениеСКлиентом.СегментНоменклатуры,
	|	ЕСТЬNULL(Склады.ЭтоГруппа, ЛОЖЬ) КАК ЭтоГруппаСкладов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО СоглашениеСКлиентом.Склад = Склады.Ссылка
	|ГДЕ
	|	НЕ СоглашениеСКлиентом.ПометкаУдаления
	|	И (СоглашениеСКлиентом.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СоглашениеСКлиентом.ДатаНачалаДействия <= &ТекущаяДата)
	|	И (СоглашениеСКлиентом.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СоглашениеСКлиентом.ДатаОкончанияДействия >= &ТекущаяДата)
	|	И (СоглашениеСКлиентом.Партнер = &Партнер
	|			ИЛИ СоглашениеСКлиентом.СегментПартнеров В
	|				(ВЫБРАТЬ
	|					ПартнерыСегмента.Сегмент
	|				ИЗ
	|					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|				ГДЕ
	|					ПартнерыСегмента.Партнер = &Партнер)
	|			ИЛИ СоглашениеСКлиентом.Типовое
	|				И СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
	|	И СоглашениеСКлиентом.Ссылка = &Соглашение
	|	И СоглашениеСКлиентом.ДоступноВнешнимПользователям
	|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)";
	
	Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("Соглашение",Соглашение);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает соглашение партнера по умолчанию.
//
// Параметры:
//  Партнер - СправочникСсылка.Партнеры - партнер, для которого получается соглашение.
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса, Неопределено - содержит ссылку на соглашение и реквизиты соглашения,
//
Функция ПолучитьСоглашениеПартнераПоУмолчанию(Партнер, ХозяйственнаяОперация) Экспорт
	
	Если Партнер.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашениеСКлиентом.Ссылка,
	|	СоглашениеСКлиентом.Типовое,
	|	СоглашениеСКлиентом.Валюта,
	|	СоглашениеСКлиентом.Контрагент,
	|	СоглашениеСКлиентом.ФормаОплаты,
	|	СоглашениеСКлиентом.Склад,
	|	СоглашениеСКлиентом.ДатаНачалаДействия,
	|	СоглашениеСКлиентом.ДатаОкончанияДействия,
	|	СоглашениеСКлиентом.Наименование,
	|	СоглашениеСКлиентом.Организация,
	|	СоглашениеСКлиентом.ЦенаВключаетНДС,
	|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСКлиентом.ХозяйственнаяОперация,
	|	ЕСТЬNULL(Склады.ЭтоГруппа, ЛОЖЬ) КАК ЭтоГруппаСкладов
	|ПОМЕСТИТЬ ДоступныеСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО СоглашениеСКлиентом.Склад = Склады.Ссылка
	|ГДЕ
	|	НЕ СоглашениеСКлиентом.ПометкаУдаления
	|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И (СоглашениеСКлиентом.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СоглашениеСКлиентом.ДатаНачалаДействия < &ТекущаяДата)
	|	И (СоглашениеСКлиентом.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СоглашениеСКлиентом.ДатаОкончанияДействия > &ТекущаяДата)
	|	И (СоглашениеСКлиентом.Партнер = &Партнер
	|	ИЛИ ВЫБОР КОГДА СоглашениеСКлиентом.Типовое И СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка) ТОГДА ИСТИНА
	|		КОГДА СоглашениеСКлиентом.СегментПартнеров В
	|			(ВЫБРАТЬ
	|				ПартнерыСегмента.Сегмент
	|			ИЗ
	|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|			ГДЕ
	|				ПартнерыСегмента.Партнер = &Партнер) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|			ИЛИ &ИспользоватьСоглашенияСКлиентами = ЛОЖЬ)
	|	И СоглашениеСКлиентом.ДоступноВнешнимПользователям
	|	И ВЫБОР
	|			КОГДА &ТолькоТиповые = ИСТИНА
	|					И &ТолькоИндивидуальные = ЛОЖЬ
	|					И СоглашениеСКлиентом.Типовое
	|				ТОГДА ИСТИНА
	|			КОГДА &ТолькоИндивидуальные = ИСТИНА
	|					И НЕ &ТолькоТиповые = ИСТИНА
	|					И НЕ СоглашениеСКлиентом.Типовое
	|				ТОГДА ИСТИНА
	|			КОГДА &ТолькоТиповые = ЛОЖЬ
	|					И &ТолькоИндивидуальные = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			КОГДА &ИспользоватьСоглашенияСКлиентами = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеСоглашения.Типовое КАК Типовое,
	|	КОЛИЧЕСТВО(ДоступныеСоглашения.Типовое) КАК Количество
	|ПОМЕСТИТЬ ДоступныеСоглашенияПоТипам
	|ИЗ
	|	ДоступныеСоглашения КАК ДоступныеСоглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеСоглашения.Типовое
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеСоглашенияПоТипам.Количество
	|ПОМЕСТИТЬ Типовые
	|ИЗ
	|	ДоступныеСоглашенияПоТипам КАК ДоступныеСоглашенияПоТипам
	|ГДЕ
	|	ДоступныеСоглашенияПоТипам.Типовое
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеСоглашенияПоТипам.Количество
	|ПОМЕСТИТЬ Индивидуальные
	|ИЗ
	|	ДоступныеСоглашенияПоТипам КАК ДоступныеСоглашенияПоТипам
	|ГДЕ
	|	НЕ ДоступныеСоглашенияПоТипам.Типовое
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоИндивидуальные = 1
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВложенныйЗапрос.КоличествоТиповые = 1
	|				И ЕСТЬNULL(ВложенныйЗапрос.КоличествоИндивидуальные, 0) = 0
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК Типовое
	|ПОМЕСТИТЬ ТипСоглашения
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВложенныйЗапрос.КоличествоТиповые КАК КоличествоТиповые,
	|		ВложенныйЗапрос.КоличествоИндивидуальные КАК КоличествоИндивидуальные
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Типовые.Количество КАК КоличествоТиповые,
	|			Индивидуальные.Количество КАК КоличествоИндивидуальные
	|		ИЗ
	|			Типовые КАК Типовые
	|				ЛЕВОЕ СОЕДИНЕНИЕ Индивидуальные КАК Индивидуальные
	|				ПО (ИСТИНА)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Типовые.Количество,
	|			Индивидуальные.Количество
	|		ИЗ
	|			Индивидуальные КАК Индивидуальные
	|				ЛЕВОЕ СОЕДИНЕНИЕ Типовые КАК Типовые
	|				ПО (ИСТИНА)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеСоглашения.Ссылка,
	|	ДоступныеСоглашения.Валюта,
	|	ДоступныеСоглашения.Склад,
	|	ДоступныеСоглашения.Контрагент,
	|	ДоступныеСоглашения.ФормаОплаты,
	|	ДоступныеСоглашения.ЦенаВключаетНДС,
	|	ДоступныеСоглашения.Наименование,
	|	ДоступныеСоглашения.Организация,
	|	ДоступныеСоглашения.ИспользуютсяДоговорыКонтрагентов,
	|	ДоступныеСоглашения.ХозяйственнаяОперация,
	|	ДоступныеСоглашения.ЭтоГруппаСкладов,
	|	&Партнер КАК Партнер
	|ИЗ
	|	ДоступныеСоглашения КАК ДоступныеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипСоглашения КАК ТипСоглашения
	|		ПО ДоступныеСоглашения.Типовое = ТипСоглашения.Типовое";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ИспользоватьТиповыеСоглашенияСКлиентами			= ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами	= ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьСоглашенияСКлиентами                = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	Запрос.УстановитьПараметр("ТолькоТиповые",ТолькоТиповые);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные",ТолькоИндивидуальные);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами",ИспользоватьСоглашенияСКлиентами);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",ХозяйственнаяОперация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает основного менеджера партнера
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнеры - партнер, для которого получаем значение основного менеджера.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - основной менеджер партнера.
//
Функция ОсновнойМенеджерПартнера(Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Партнеры.ОсновнойМенеджер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА Партнеры.ОсновнойМенеджер
		|		ИНАЧЕ ЕСТЬNULL(БизнесРегионы.ОсновнойМенеджер, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	КОНЕЦ КАК ОсновнойМенеджер
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БизнесРегионы КАК БизнесРегионы
		|		ПО Партнеры.БизнесРегион = БизнесРегионы.Ссылка
		|ГДЕ
		|	Партнеры.Ссылка = &Партнер";
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Справочники.Пользователи.ПустаяСсылка();
		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.ОсновнойМенеджер;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ОсновнойМенеджер");
		
	КонецЕсли;
	
КонецФункции

// Получает основного менеджера контактного лица партнера.
//
// Параметры:
//  КонтактноеЛицо  - СправочникСсылка.КонтактныеЛицаПартнеров - контактное лицо партнера, для которого получаем значение основного менеджера.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - основной менеджер контактного лица партнера.
//
Функция ОсновнойМенеджерКонтактногоЛица(КонтактноеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ВЫБОР
		|		КОГДА Партнеры.ОсновнойМенеджер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА Партнеры.ОсновнойМенеджер
		|		ИНАЧЕ ЕСТЬNULL(БизнесРегионы.ОсновнойМенеджер, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	КОНЕЦ КАК ОсновнойМенеджер
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БизнесРегионы КАК БизнесРегионы
		|		ПО Партнеры.БизнесРегион = БизнесРегионы.Ссылка
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка = &КонтактноеЛицо";
		
		Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Справочники.Пользователи.ПустаяСсылка();
		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.ОсновнойМенеджер;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО КонтактныеЛицаПартнеров.Владелец = Партнеры.Ссылка
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка = &КонтактноеЛицо";
		
		Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Справочники.Пользователи.ПустаяСсылка();
		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.ОсновнойМенеджер;
			
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

// Получает основного менеджера внешнего пользователя.
//
// Параметры:
//  ВнешнийПользователь  - СправочникСсылка.ВнешниеПользователи - внешний пользователь, для которого получаем значение основного менеджера.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - основной менеджер внешнего пользователя.
//
Функция ОсновнойМенеджерВнешнегоПользователя(ВнешнийПользователь) Экспорт
	
	ОбъектАвторизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешнийПользователь, "ОбъектАвторизации");
	
	Если ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат ОсновнойМенеджерПартнера(ОбъектАвторизации);
	ИначеЕсли ТипЗнч(ОбъектАвторизации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Возврат ОсновнойМенеджерКонтактногоЛица(ОбъектАвторизации);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает менеджер документа по умолчанию в зависимости от типа авторизованного пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи   - основной менеджер внешнего пользователя.
//
Функция МенеджерДокументаПоУмолчанию() Экспорт
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат ОсновнойМенеджерВнешнегоПользователя(Пользователи.АвторизованныйПользователь());
	Иначе
		Возврат Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АктПриемкиСоСтороныКлиента

Процедура ПолучитьЗагруженныеТоварыИзХранилища(Форма, КэшированныеЗначения ,АдресТоваровВХранилище, ЭтоАктОРасхожденияПослеОтгрузки, ВызыватьУправлениеДоступностью = Истина) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Форма.Объект);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполнитьСтавкуНДС);
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Форма.Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеИзВнешнегоИсточника.Номенклатура,
	|	ДанныеИзВнешнегоИсточника.Характеристика,
	|	ДанныеИзВнешнегоИсточника.Упаковка,
	|	ДанныеИзВнешнегоИсточника.КоличествоУпаковок,
	|	ДанныеИзВнешнегоИсточника.Цена,
	|	ДанныеИзВнешнегоИсточника.СтавкаНДС,
	|	ДанныеИзВнешнегоИсточника.ХарактеристикиИспользуются
	|ПОМЕСТИТЬ ДанныеВнешнегоИсточника
	|ИЗ
	|	&ДанныеИзВнешнегоИсточника КАК ДанныеИзВнешнегоИсточника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Упаковка,
	|	ДанныеДокумента.КоличествоУпаковок,
	|	ДанныеДокумента.Цена,
	|	ДанныеДокумента.НомерСтроки
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВнешнегоИсточника.Номенклатура,
	|	ДанныеВнешнегоИсточника.Характеристика,
	|	ДанныеВнешнегоИсточника.Упаковка,
	|	ДанныеВнешнегоИсточника.КоличествоУпаковок,
	|	ДанныеВнешнегоИсточника.Цена,
	|	ЕСТЬNULL(ДанныеДокумента.НомерСтроки, 0) КАК НомерСтроки,
	|	ДанныеВнешнегоИсточника.СтавкаНДС,
	|	ДанныеВнешнегоИсточника.ХарактеристикиИспользуются
	|ИЗ
	|	ДанныеВнешнегоИсточника КАК ДанныеВнешнегоИсточника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО ДанныеВнешнегоИсточника.Номенклатура = ДанныеДокумента.Номенклатура
	|			И ДанныеВнешнегоИсточника.Характеристика = ДанныеДокумента.Характеристика
	|			И ДанныеВнешнегоИсточника.Упаковка = ДанныеДокумента.Упаковка
	|			И ДанныеВнешнегоИсточника.Цена = ДанныеДокумента.Цена
	|ГДЕ
	|	ДанныеВнешнегоИсточника.КоличествоУпаковок <> ЕСТЬNULL(ДанныеДокумента.КоличествоУпаковок, 0)";
	
	Запрос.УстановитьПараметр("ДанныеИзВнешнегоИсточника", ТоварыИзХранилища);
	Запрос.УстановитьПараметр("ДанныеДокумента", Форма.Объект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.НомерСтроки > 0 Тогда
			
			СтрокаТЧТовары = Форма.Объект.Товары[Выборка.НомерСтроки - 1];
			СтрокаТЧТовары.КоличествоУпаковок = Выборка.КоличествоУпаковок;
			
		Иначе
			
			СтрокаТЧТовары = Форма.Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, Выборка);
			СамообслуживаниеКлиентСервер.ЗаполнитьДокументОснованиеВСтроке(СтрокаТЧТовары,
			                                                               Форма.ДокументыОснования,
			                                                               ЭтоАктОРасхожденияПослеОтгрузки);
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Форма.Объект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, Форма.ПараметрыУказанияСерий);
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
	Если ВызыватьУправлениеДоступностью Тогда
		РасхожденияКлиентСервер.УправлениеДоступностью(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Оформляет заказ
//
// Параметры:
//  СтруктураЗаказа  - Структура - содержит информацию необходимую для оформления заказа.
//  Проводить  - Булево - признак необходимости проведения заказа.
//
Процедура ОформитьЗаказ(СтруктураЗаказа, Проводить = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументЗаказ = Документы.ЗаказКлиента.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ДокументЗаказ,СтруктураЗаказа);
	ДокументЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ДокументЗаказ.Приоритет = ЗначениеНастроекПовтИсп.ПолучитьПриоритетПоУмолчанию(ДокументЗаказ.Приоритет);
	ДокументЗаказ.СкидкиРассчитаны = Истина;
	ДокументЗаказ.Менеджер = СамообслуживаниеСервер.ОсновнойМенеджерПартнера(СтруктураЗаказа.Партнер);
	ДокументЗаказ.КонтактноеЛицо = СтруктураЗаказа.КонтактноеЛицо;
	ДокументЗаказ.ДополнительнаяИнформация = СтруктураЗаказа.ДополнительнаяИнформация;
	ДокументЗаказ.Товары.Загрузить(СтруктураЗаказа.Товары.Выгрузить());
	
	Если ДокументЗаказ.НеОтгружатьЧастями Тогда
		Для Каждого СтрокаТовары Из ДокументЗаказ.Товары Цикл
			СтрокаТовары.ДатаОтгрузки = ДокументЗаказ.ДатаОтгрузки;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
			И ДокументЗаказ.НеОтгружатьЧастями
			И Не ЗначениеЗаполнено(ДокументЗаказ.ДатаОтгрузки) Тогда
		
		ДатаОтгрузки = ТекущаяДатаСеанса();
		Для Каждого СтрокаТовары Из ДокументЗаказ.Товары Цикл
			СтрокаТовары.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	ДокументЗаказ.СкидкиНаценки.Загрузить(СтруктураЗаказа.СкидкиНаценки.Выгрузить());
	
	Если СтруктураЗаказа.Свойство("Договор") И ЗначениеЗаполнено(СтруктураЗаказа.Договор) Тогда
		
		ДокументЗаказ.Договор = СтруктураЗаказа.Договор;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.БанковскийСчет,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
		
		Запрос.УстановитьПараметр("Договор",СтруктураЗаказа.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументЗаказ.БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
			ДокументЗаказ.БанковскийСчет            = Выборка.БанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗаказ.Договор) Тогда
		
		ДокументЗаказ.ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаказ.Договор,"ОплатаВВалюте");
		
	Иначе
		
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ДокументЗаказ.ФормаОплаты, ДокументЗаказ.БанковскийСчет, ДокументЗаказ.Касса);
		ДокументЗаказ.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию(ВалютаОплаты, ДокументЗаказ.Организация);
	
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументЗаказ);
	
	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаказ.Соглашение, "ОбеспечиватьЗаказыОбособленно");
	ОбеспечениеВДокументахСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ДокументЗаказ.Товары, ЗаполнитьОбособленно);
	
	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(ДокументЗаказ.НаправлениеДеятельности, ДокументЗаказ.Соглашение, ДокументЗаказ.Договор);
	
	ДокументЗаказ.Записать(?(Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	
	Если Проводить Тогда
		ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаТовары.НоменклатураНабора,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.Упаковка,
	|	ЗаказКлиентаТовары.КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзинаПокупателя.ОбъектАвторизации,
	|	КорзинаПокупателя.НоменклатураНабора,
	|	КорзинаПокупателя.ХарактеристикаНабора,
	|	КорзинаПокупателя.Номенклатура,
	|	КорзинаПокупателя.Характеристика,
	|	КорзинаПокупателя.Упаковка,
	|	КорзинаПокупателя.КоличествоУпаковок,
	|	КорзинаПокупателя.Цена,
	|	КорзинаПокупателя.ДатаПомещения,
	|	КорзинаПокупателя.Валюта
	|ИЗ
	|	РегистрСведений.КорзинаПокупателя КАК КорзинаПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО КорзинаПокупателя.Номенклатура = ДанныеДокумента.Номенклатура
	|			И КорзинаПокупателя.Характеристика = ДанныеДокумента.Характеристика
	|			И КорзинаПокупателя.Упаковка = ДанныеДокумента.Упаковка
	|ГДЕ
	|	КорзинаПокупателя.ОбъектАвторизации = &ОбъектАвторизации
	|	И ДанныеДокумента.КоличествоУпаковок ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ОбъектАвторизации",СтруктураЗаказа.ОбъектАвторизации);
	Запрос.УстановитьПараметр("Заказ",ДокументЗаказ.Ссылка);
	
	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектАвторизации.Установить(СтруктураЗаказа.ОбъектАвторизации, Истина);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Записывает контактную информацию партнера
//
// Параметры:
//  Партнер					- СправочникСсылка.Партнеры - партнер, для которого записывается контактная информация
//  КонтактнаяИнформация	- ТаблицаЗначений - содержит новое значение контактной информации партнера.
//
Процедура ЗаписатьКонтактнуюИнформациюПартнера(Партнер, КонтактнаяИнформация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектПартнер = Партнер.ПолучитьОбъект();
	ОбъектПартнер.КонтактнаяИнформация.Загрузить(КонтактнаяИнформация);
	ОбъектПартнер.Записать();
	
КонецПроцедуры

// Получает таблицу вложений объекта метаданных для вывода в форму объекта
//
//Параметры:
//  Владелец  - ДокументСсылка     - объект метаданных владелец присоединенных файлов.
//  ФормироватьРазмерПредставление - Булево - признак того, что необходимо формировать текстовое представление размера файла.
//  ОтбиратьПоАвтору               - Булево - признак необходимости отбора по файлам созданным текущим внешним пользователем.
//
// Возвращаемое значение:
//  ТаблицаЗначений   - таблица значений, содержащая информацию о вложениях.
//
Функция ВложенияОбъектаМетаданных(Владелец, ФормироватьРазмерПредставление = Ложь, ОтбиратьПоАвтору = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяВладельца = Владелец.Метаданные().Имя;
	ПолноеИмяСправочникаПрисоединенныеФайлы = "Справочник." + ИмяВладельца + "ПрисоединенныеФайлы";
	
	Если ФормироватьРазмерПредставление Тогда
		ТекстРазмерПредставление = ",
		|ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление";
	Иначе
		ТекстРазмерПредставление = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер КАК РазмерФайла,
	|	Файлы.ПодписанЭП,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = &ПустаяСтрока
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла" + ТекстРазмерПредставление + "
	|ИЗ
	|	" + ПолноеИмяСправочникаПрисоединенныеФайлы + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Владелец
	|	И НЕ Файлы.ПометкаУдаления";

	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ПустаяСтрока","");

	
	Если ОтбиратьПоАвтору Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И Файлы.Автор = &Автор";
		Запрос.УстановитьПараметр("Автор", ВнешниеПользователи.ТекущийВнешнийПользователь());
	КонецЕсли;
	
	Если ИмяВладельца = "РассылкаКлиентам" Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И Файлы.ИДФайлаЭлектронногоПисьма = &ПустаяСтрока";
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
	КонецЕсли;
		
	ТаблицаКВозврату =  Запрос.Выполнить().Выгрузить(); // ТаблицаЗначений
	
	Если ФормироватьРазмерПредставление Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаКВозврату Цикл
		
			СтрокаТаблицы.РазмерПредставление = 
				ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(СтрокаТаблицы.РазмерФайла);
		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКВозврату;
	
КонецФункции

// Формирует массив возможных видов информации о доступности товаров для партнеров.
// Используется при определении максимального статуса по группе складов.
// Чем выше статус, тем меньше порядковый номер сообщения в массиве.
//
//
// Возвращаемое значение:
//   Массив Из Строка - сформированный массив.
//
Функция МассивТекстовДоступности() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(НСтр("ru = 'В наличии'"));
	Массив.Добавить(НСтр("ru = 'Услуга доступна'"));
	Массив.Добавить(НСтр("ru = 'Требует уточнения'"));
	Массив.Добавить(НСтр("ru = 'Ожидается'") + " ");
	Массив.Добавить(НСтр("ru = 'Согласно графика'"));
	Массив.Добавить(НСтр("ru = 'Доступно под заказ'"));
	Массив.Добавить(НСтр("ru = 'Нет в наличии'"));
	
	Возврат Массив;
	
КонецФункции

// Формирует текстовое представление вхождения суммы НДС в цену
//
// Параметры:
//  ЦенаВключаетНДС  - Булево - признак включение суммы НДС в цену.
//
// Возвращаемое значение:
//   Строка - сформированное текстовое представление.
//
Функция ТекстЦенаВключаетНДС(ЦенаВключаетНДС) Экспорт
	
	Если ЗначениеЗаполнено(ЦенаВключаетНДС) Тогда
		Если ЦенаВключаетНДС Тогда
			Возврат НСтр("ru = 'Цена включает НДС'");
		Иначе
			Возврат НСтр("ru = 'Цена не включает НДС'");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ТекстВалютаЦенаВключаетНДС(Валюта, ЦенаВключаетНДС)
	
	ТекстЦенаВключаетНДС = ТекстЦенаВключаетНДС(ЦенаВключаетНДС);
	Если Не ПустаяСтрока(ТекстЦенаВключаетНДС) Тогда
		ТекстЦенаВключаетНДС = ", " + ТекстЦенаВключаетНДС; 
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Валюта: %1 %2'"), Валюта, ТекстЦенаВключаетНДС);
	
КонецФункции

Функция ТекстОперация(Операция)

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция: %1'"), Операция);

КонецФункции

Функция ТекстНалогообложениеНДС(НалогообложениеНДС)

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Налогообложение НДС: %1'"), НалогообложениеНДС);

КонецФункции

// Формирует текстовое представление полей формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой формируются текстовые представления.
//
Процедура СформироватьТекстовыеПредставленияПолейФормыДокумента(Форма) Экспорт
	
	Объект = Форма.Объект; // ДокументОбъект
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Форма.ТекстНалогообложение        = "";
		Форма.ТекстВалютаЦенаВключаетНДС  = "";
		Если Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			Форма.ТекстОперация               = "";
		КонецЕсли;
	Иначе
		Форма.ТекстНалогообложение        = ТекстНалогообложениеНДС(Объект.НалогообложениеНДС);
		Форма.ТекстВалютаЦенаВключаетНДС  = ТекстВалютаЦенаВключаетНДС(Объект.Валюта, Объект.ЦенаВключаетНДС);
		Если Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			Форма.ТекстОперация               = ТекстОперация(Объект.ХозяйственнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет общие действия для форм самообслуживания при создании на сервер
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой выполняются необходимые действия
//  Отказ  - Булево - устанавливается ЛОЖЬ, если не выполнены условия открытия формы.
//
Процедура ФормыСамообслуживаниеПриСозданииНаСервере(Форма, Отказ) Экспорт
	
	Объект = Форма.Объект; // ДокументОбъект, СправочникОбъект
	
	ДанныеОбъектаАвторизации = ПартнерыИКонтрагентыВызовСервера.ДанныеАвторизовавшегосяВнешнегоПользователя();
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъектаАвторизации);
	
	Если Объект.Партнер.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип ("СправочникСсылка.Претензии") 
		И Не ДанныеОбъектаАвторизации.АвторизованПартнер 
		И ЗначениеЗаполнено(ДанныеОбъектаАвторизации.КонтактноеЛицо) Тогда
		
		Если Объект.ПартнерыИКонтактныеЛица.НайтиСтроки(Новый Структура("КонтактноеЛицо", ДанныеОбъектаАвторизации.КонтактноеЛицо)).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.ПартнерыИКонтактныеЛица.Добавить();
			НоваяСтрока.Партнер = Объект.Партнер;
			НоваяСтрока.КонтактноеЛицо = ДанныеОбъектаАвторизации.КонтактноеЛицо;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		ИмяРеквизитаОтветственный = "Менеджер";
	Иначе
		ИмяРеквизитаОтветственный = "Ответственный";
	КонецЕсли;
	
	Если Объект[ИмяРеквизитаОтветственный] = Справочники.Пользователи.ПустаяСсылка() Тогда
		Объект[ИмяРеквизитаОтветственный] = СамообслуживаниеСервер.ОсновнойМенеджерПартнера(Объект.Партнер);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступенПросмотрОстатковВПодборе() Экспорт

	Возврат ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РаспределениеЗапасов);

КонецФункции

Процедура ЗаполнитьСписокВыбораКонтактныхЛиц(Список, Партнер, КонтактноеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаПартнеров.Ссылка = &КонтактноеЛицо
	|			ТОГДА &МоиДокументы
	|		ИНАЧЕ КонтактныеЛицаПартнеров.Представление
	|	КОНЕЦ КАК Представление,
	|	ВЫБОР
	|		КОГДА КонтактныеЛицаПартнеров.Ссылка = &КонтактноеЛицо
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер
	|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания УБЫВ";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	Запрос.УстановитьПараметр("МоиДокументы", "<" + НСтр("ru = 'Мои документы'") + ">");
	
	Список.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Список.Добавить(Выборка.Ссылка, Выборка.Представление);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура УстановитьЦветФонаИнформацииНTML(ТекстHTML) Экспорт
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "body bgcolor=""#ffffff""", "BODY bgColor=""#fcfaeb""");
	КонецЕсли;
	
КонецПроцедуры



// Обработчик события создания форм списков
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	Отказ - Булево - 
// 	СтандартнаяОбработка - Булево -
//
Процедура ФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
	          Форма.Элементы,
	          "СвязанныеДокументы",
	          "Видимость",
	          ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.СвязанныеДокументы));

КонецПроцедуры

#Область Договора

// Настраивается видимость, заполняется список выбора и устанавливается значение по умолчанию 
//    реквизита формы "Договор".
//
// Параметры:
//  Данные                            - Структура - параметры, на основании которых выполняются настройки
//  Элемент                           - ПолеФормы - для которого выполняются настройки
//  ИспользуютсяДоговораКонтрагентов  - Булево - признак того, что в конфигурации используются договора.
//  ХозяйственнаяОперацияДоговора     - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственные операции документа
//
Процедура УправлениеЭлементомФормыДоговор(Данные, Элемент, ИспользуютсяДоговораКонтрагентов, ХозяйственнаяОперацияДоговора = Неопределено) Экспорт
	
	Если ИспользуютсяДоговораКонтрагентов Тогда
		
		Если ХозяйственнаяОперацияДоговора = Неопределено Тогда
			Если ТипЗнч(Данные) = Тип("ФормаКлиентскогоПриложения") Тогда
				ХозяйственнаяОперация = Данные.ХозяйственнаяОперация;
			Иначе
				ХозяйственнаяОперация = ?(Данные.Свойство("ХозяйственнаяОперация"),
				Данные.ХозяйственнаяОперация,
				Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			КонецЕсли;
		Иначе
			ХозяйственнаяОперация =  ХозяйственнаяОперацияДоговора;
		КонецЕсли;
		
		Элемент.Видимость = Истина;
		Элемент.Доступность = Истина;
		Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
			ЗаполнитьСписокВыбораДоговоров(Данные, Элемент.СписокВыбора, ХозяйственнаяОперация);
			Если Не ЗначениеЗаполнено(Данные.Договор) Тогда
				ЗаполнитьДоговорПоУмолчанию(Данные, ХозяйственнаяОперация) ;
			КонецЕсли;
		Иначе
			Данные.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Данные.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоговорПоУмолчанию(Данные, ХозяйственнаяОперация)
	
	Данные.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Данные,
		ХозяйственнаяОперация,
		Данные.Валюта);
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораДоговоров(Данные, СписокВыбора, ХозяйственнаяОперация) 
	
	СписокВыбора.ЗагрузитьЗначения(
	ПродажиСервер.ПолучитьДоступныеДоговоры(
		Данные.Договор,
		Данные.Партнер,
		Данные.Контрагент,
		Данные.Организация,
		ХозяйственнаяОперация,
		Данные.Валюта,
		Данные.Соглашение));
	
КонецПроцедуры

#КонецОбласти

#Область Контрагенты

// Настраивается видимость, заполняется список выбора и устанавливается значение по умолчанию 
//    реквизита формы "Контрагент".
//
// Параметры:
//  Объект                 - ДокументОбъект, ФормаКлиентскогоПриложения - объект, содержащий реквизиты Контрагент и Партнер.
//  Данные                 - Структура - параметры, на основании которых выполняются настройки.
//  Элемент                - ПолеФормы - для которого выполняются настройки.
//  ЗаполнениеПоСоглашению - Булево - признак необходимости заполнения по соглашения
//
Процедура УправлениеЭлементомФормыКонтрагент(Объект, Данные, Элемент, ЗаполнениеПоСоглашению = Ложь) Экспорт

	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		ЗаполнитьСписокВыбораКонтрагента(Данные.Партнер, Элемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Контрагент) Тогда
		Элемент.Доступность = Ложь;
		Объект.Контрагент = Данные.Контрагент;
		ЗаполнениеПоСоглашению = Истина;
	Иначе
		Элемент.Доступность = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		КонецЕсли;
		ЗаполнениеПоСоглашению = Ложь;
	КонецЕсли;

КонецПроцедуры

// Заполняет список выбора контрагента
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнеры - партнер, на основании которого формируется список выбора
//  СписокВыбора  - СписокЗначений -  формируемый список выбора.
//
Процедура ЗаполнитьСписокВыбораКонтрагента(Партнер, Элемент)

	Элемент.СписокВыбора.ЗагрузитьЗначения(ПартнерыИКонтрагенты.ПолучитьВсехКонтрагентовПартнера(Партнер));

КонецПроцедуры

#КонецОбласти

#Область Склады

// Настраивается видимость, заполняется список выбора и устанавливается значение по умолчанию 
//    реквизита формы "Склад".
//
// Параметры:
//  Объект  - ДокументОбъект, ФормаКлиентскогоПриложения - объект, содержащий реквизит Склад
//  Данные  - Структура - параметры, на основании которых выполняются настройки
//  Элемент - ПолеФормы - для которого выполняются настройки.
//
Процедура УправлениеЭлементомФормыСклад(Объект, Данные, Элемент) Экспорт

	Если Данные = Неопределено Тогда
		Элемент.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	НеПолучатьГруппыСкладов = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи")
	                          ИЛИ (ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	
	ЗаполнитьСписокВыбораСклада(Данные, Элемент, НеПолучатьГруппыСкладов);
	
	Если ЗначениеЗаполнено(Данные.Склад) Тогда
		
		Если НЕ (НеПолучатьГруппыСкладов И Данные.ЭтоГруппаСкладов) Тогда
			Объект.Склад = Данные.Склад;
		КонецЕсли;
		
		Если Данные.ЭтоГруппаСкладов Тогда
			Элемент.Доступность = Истина;
			
		Иначе
			Элемент.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		Элемент.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

// Заполняет список выбора контрагента
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнеры - данные, на основании которых формируется список выбора
//  СписокВыбора  - СписокЗначений -  формируемый список выбора.
//
Процедура ЗаполнитьСписокВыбораСклада(Данные, Элемент, НеПолучатьГруппыСкладов) Экспорт
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ВсеДоступныеСкладыПартнера(Данные, НеПолучатьГруппыСкладов));
	
КонецПроцедуры

// Формирует массив доступных партнеру складов
//
// Параметры:
//  Данные  - Структура, ВыборкаИзРезультатаЗапроса - параметры необходимые для определения доступных партнеру складов.
//
// Возвращаемое значение:
//   Массив Из СправочникСсылка.Склады  - массив, содержащий доступные для выбора склады.
//
Функция ВсеДоступныеСкладыПартнера(Данные, НеПолучатьГруппыСкладов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления";
	
	Если Данные.ЭтоГруппаСкладов Тогда
		Запрос.Текст = Запрос.Текст + "
		            |	И Склады.Ссылка В ИЕРАРХИИ(&Склад)";
		Запрос.УстановитьПараметр("Склад", Данные.Склад );
	КонецЕсли;
	
	Если НеПолучатьГруппыСкладов Тогда
		Запрос.Текст = Запрос.Текст + "
		            |	И НЕ Склады.ЭтоГруппа";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		            |	И ВЫБОР КОГДА Склады.ЭтоГруппа ТОГДА НЕ Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить) ИНАЧЕ ИСТИНА КОНЕЦ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Склады.Наименование";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Настраивается видимость, заполняется список выбора и устанавливается значение по умолчанию 
//    реквизита формы "Склад".
//
// Параметры:
//  Объект  - ДокументОбъект, ФормаКлиентскогоПриложения - объект, содержащий реквизит ФормаОплаты
//  Данные  - Структура                                  - параметры, на основании которых выполняются настройки
//  Элемент - ПолеФормы                                  - для которого выполняются настройки.
//
Процедура УправлениеЭлементомФормыФормаОплаты(Объект, Данные, Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Данные.ФормаОплаты) Тогда
		Объект.ФормаОплаты = Данные.ФормаОплаты;
		Элемент.ТолькоПросмотр = Истина;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Объект.ФормаОплаты = Элемент.СписокВыбора[0].Значение;
		КонецЕсли;
		Элемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
