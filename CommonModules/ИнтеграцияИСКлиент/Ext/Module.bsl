// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ФормыДокументовИС

Процедура ПослеЗаписиВФормеОбъектаДокументаИС(Форма, Объект, ИмяПодсистемы, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ПредыдущийДокументОснование")
	 И ПараметрыЗаписи.ПредыдущийДокументОснование <> Объект.ДокументОснование Тогда
		
		ПараметрыЗаписи.Вставить("Основание", ПараметрыЗаписи.ПредыдущийДокументОснование);
		
		Оповестить(
			ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма),
			ПараметрыЗаписи,
			Объект.Ссылка);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДокументОснование") Тогда
		ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	КонецЕсли;
	
	Оповестить(
		ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма),
		ПараметрыЗаписи,
		Объект.Ссылка);
	
КонецПроцедуры

Функция ОбработкаОповещенияВФормеСпискаДокументовИС(Форма, ИмяПодсистемы, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбновитьСписок = Ложь;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма) Тогда
		
		ОбновитьСписок = Истина;
	
	ИначеЕсли ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Тогда
		
		ТипЗначения = ТипЗнч(Параметр.Ссылка);
		ПолноеИмяОбъекта = ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Истина);
		Если СтрНачинаетсяС(ПолноеИмяОбъекта, "Справочник.") Тогда
			ТипДокумента = Тип("СправочникСсылка." + ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь));
		ИначеЕсли СтрНачинаетсяС(ПолноеИмяОбъекта, "Документ.") Тогда
			ТипДокумента = Тип("ДокументСсылка." + ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь));
		КонецЕсли;
		
		Если ИмяПодсистемы = "ЗЕРНО" Тогда
			МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияЗЕРНОКлиент");
			МодульОбработки.ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник);
		КонецЕсли;
		
		Если ИмяПодсистемы = "ИСМП" Тогда
			МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
			МодульОбработки.ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник);
		КонецЕсли;
		
		Если ТипЗначения = Тип("Массив") Тогда
			
			Для Каждого ЭлементДанных Из Параметр.Ссылка Цикл
				Если ТипЗнч(ЭлементДанных) = ТипДокумента Тогда
					ОбновитьСписок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Не ОбновитьСписок Тогда
			ОбновитьСписок = (ТипЗначения = ТипДокумента);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы) Тогда
		
		ОжидаемоеСвойство = ИнтеграцияИСКлиентСервер.ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы);
		
		Если (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(ОжидаемоеСвойство)) Тогда
			
			Параметр.Свойство(ОжидаемоеСвойство, ОбновитьСписок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Список")
			И ВидимостьВИерархии(Форма.Элементы.Список) Тогда
			Форма.Элементы.Список.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокКОформлению")
			И ВидимостьВИерархии(Форма.Элементы.СписокКОформлению) Тогда
			Форма.Элементы.СписокКОформлению.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокПоДокументамКОформлению")
			И ВидимостьВИерархии(Форма.Элементы.СписокПоДокументамКОформлению) Тогда
			Форма.Элементы.СписокПоДокументамКОформлению.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокКОформлениюГосмониторинг")
			И ВидимостьВИерархии(Форма.Элементы.СписокКОформлениюГосмониторинг) Тогда
			Форма.Элементы.СписокКОформлениюГосмониторинг.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбновитьСписок;
	
КонецФункции

Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки) Экспорт
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции" Тогда
		
		Форма.СохраненВыборПоМаркируемойПродукции = Ложь;
		Форма.ДанныеВыбораПоМаркируемойПродукции  = Неопределено;
		ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
		Форма.Модифицированность = Истина;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНоменклатуру" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Номенклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьХарактеристику" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Характеристика);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСерию" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Серия);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьШаблонЭтикетки" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.ШаблонЭтикетки);
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуУказанияНоменклатуры(ФормаВладелец, ОповещениеОЗавершении, ВидыПродукцииИС) Экспорт
	
	ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования();
	ПараметрыСканирования.ДопустимыеВидыПродукции = ВидыПродукцииИС;
	ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара = Ложь;
	ПараметрыОткрытияФормыУточненияДанных.ПараметрыСканирования = ПараметрыСканирования;
	ОткрытьФорму(
		"ОбщаяФорма.ФормаУточненияДанныхИС",
		ПараметрыОткрытияФормыУточненияДанных, ФормаВладелец,,,,
		ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ФормыДокументовОснований

Функция ОбработкаОповещенияВФормеДокументаОснования(Форма, Объект, ИмяСобытия, Параметр, Источник) Экспорт
	
	СобытиеОбработано = Ложь;
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат СобытиеОбработано;
	КонецЕсли;
	
	// Вызовем обработки оповещения всех подсистем.
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		ИмяПодсистемы = КлючИЗначение.Ключ;
		
		Если НЕ ИнтеграцияИСКлиентСервер.ЭтоИмяСобытияОповещения(ИмяСобытия, ИмяПодсистемы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодсистемаСуществует(ИмяПодсистемы) Тогда
			
			МодульИнтеграцииКлиент = ОбщийМодуль(ИмяПодсистемы);
			
			МестоВызова = Новый Структура;
			МестоВызова.Вставить("Форма", Форма);
			МестоВызова.Вставить("Объект", Объект);
			
			Событие = Новый Структура;
			Событие.Вставить("Имя",        ИмяПодсистемы);
			Событие.Вставить("Параметр",   Параметр);
			Событие.Вставить("Источник",   Источник);
			Событие.Вставить("Обработано", Ложь);
			
			МодульИнтеграцииКлиент.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие);
			
		КонецЕсли;
		
		Если Событие.Обработано Тогда
			СобытиеОбработано = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СобытиеОбработано;
	
КонецФункции

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СобытиеОбработано = Ложь;
	ИнтегрируемыеПодсистемы = ИнтеграцияИСКлиентСервер.ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма);
	
	Если НЕ ЗначениеЗаполнено(ИнтегрируемыеПодсистемы) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим имя подсистемы по имени элемента управления.
	//  Поскольку элемент управления есть и ведет сюда считаем что подсистема установлена
	ИмяПодсистемы = ИмяИнтегрируемойПодсистемыПоИмениЭлементаФормы(ИнтегрируемыеПодсистемы, Элемент);
	
	Если НЕ ИнтеграцияИСКлиентСервер.ЭтоИмяКомандыНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, ИмяПодсистемы) Тогда
		
		// Имя команды сформировано не функцией ИнтеграцияИСКлиентСервер.ИмяКоманды...()
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Некорректное имя команды навигационной ссылки: ""%1""'"),
			НавигационнаяСсылкаФорматированнойСтроки);
		
		ВызватьИсключение ОбщегоНазначенияИСКлиентСервер.ТекстОшибки(ПредставлениеПодсистемы(ИмяПодсистемы), УточнениеОшибки); // некорректное имя команды навигационной ссылки
		
	КонецЕсли;
	
	// Вызовем обработку навигационной ссылки подсистемы.
	МодульИнтеграцииКлиент = ОбщийМодуль(ИмяПодсистемы);
	МодульИнтеграцииКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		СобытиеОбработано);
	
КонецПроцедуры

Процедура ОбновитьПолеИнтеграцииВФормеДокументаОснования(Форма, Подсистема) Экспорт
	
	ИмяРеквизитаОбъект = Форма.ПараметрыИнтеграцииГосИС.Получить(Подсистема.Имя).ИмяРеквизитаФормыОбъект;
	
	ТекстНадписи = "";
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(СтрШаблон("%1.ДокументОснование", Подсистема.Имя));
	Если ПараметрыИнтеграции <> Неопределено И ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяРеквизитаФормы) Тогда
		ИмяРеквизитаФормы = ПараметрыИнтеграции.ИмяРеквизитаФормы;
		ТекстНадписи = Подсистема.МодульВызовСервера.ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Форма[ИмяРеквизитаОбъект].Ссылка);
		Форма[ИмяРеквизитаФормы] = ТекстНадписи;
		Если ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
			Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормы].Видимость = ЗначениеЗаполнено(ТекстНадписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Функция проверяет необходимость обновления статусов серий в строке.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма документа, в которой инициировано указание серий;
//  Элемент                - ТаблицаФормы     - таблица формы, отображающая ТЧ товаров;
//  КэшированныеЗначения   - Произвольный     - кэшированные значения формы;
//  ПараметрыУказанияСерий - Структура        - параметры указания серий таблицы;
//  Удаление               - Булево           - признак удаления строки
// 
// Возвращаемое значение:
//  Булево - необходимо обновить статусы серий.
//
Функция НеобходимоОбновитьСтатусыСерий(Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий = "", Удаление = Ложь) Экспорт
	
	Обновить = Ложь;
	ИнтеграцияИСКлиентПереопределяемый.УстановитьОбновитьСтатусыСерий(Обновить, Форма, Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Удаление);
	Возврат Обновить;
	
КонецФункции

Процедура ОткрытьПодборСерий(Форма, ПараметрыУказанияСерий = "", Текст, СтандартнаяОбработка, ТекущиеДанные = Неопределено) Экспорт
	
	ПодборНеВыполнен = Ложь;

	ИнтеграцияИСКлиентПереопределяемый.ЗаполнитьДляУказанияСерийНуженСерверныйВызов(
		ПодборНеВыполнен,
		Форма,
		?(ПараметрыУказанияСерий = "",Форма.ПараметрыУказанияСерий, ПараметрыУказанияСерий),
		Текст,
		ТекущиеДанные,
		СтандартнаяОбработка);
	
	Если ПодборНеВыполнен Тогда
		
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - 
			| в этом документе для указания серий нужен контекстный серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Возвращает Истина если источник выбора - форма указания серии. Переводит выбранное значение в вид Структура, с ключем
//  Значение содержащим серию
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - проверяемая форма
//  ВыбранноеЗначение - Произвольный - результат указания серии до модификации
// 
// Возвращаемое значение:
//  Булево - Это форма указания серий
Функция ЭтоФормаУказанияСерий(Форма, ВыбранноеЗначение) Экспорт
	
	ЭтоФормаУказанияСерий = Ложь;
	ИнтеграцияИСКлиентПереопределяемый.ЗаполнитьЭтоФормаУказанияСерий(ЭтоФормаУказанияСерий, Форма, ВыбранноеЗначение);
	Возврат ЭтоФормаУказанияСерий;
	
КонецФункции

// Возвращает параметры указания серий формы конфигурации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо получить параметры указания серий
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий формы
Функция ПараметрыУказанияСерий(Форма) Экспорт
	
	ПараметрыУказанияСерий = Неопределено;
	ИнтеграцияИСКлиентПереопределяемый.ПриПолученииПараметровУказанияСерий(ПараметрыУказанияСерий, Форма);
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Показывает оповещение пользователя об окончании заполнения серий.
//
// Параметры:
//	СерииЗаполнены - Булево - Признак успешного заполнения серий (Истина).
//	СписокОшибок   - Массив Из см. ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю.Ошибки, Неопределено	- Список ошибок.
//
Процедура ОповеститьОбОкончанииЗаполненияСерийВДокументе(СерииЗаполнены, СписокОшибок) Экспорт
	
	ОчиститьСообщения();
	
	Если СерииЗаполнены Тогда
		Текст     = НСтр("ru = 'Серии заполнены'");
		Пояснение = НСтр("ru='Серии заполнены'");
		
		ПоказатьОповещениеПользователя(Текст, , Пояснение, БиблиотекаКартинок.Информация32ГосИС);
	Иначе
		Текст     = НСтр("ru = 'Серии не заполнены'");
		Пояснение = НСтр("ru='Не удалось заполнить серии'");
		
		ПоказатьОповещениеПользователя(Текст, , Пояснение, БиблиотекаКартинок.Информация32ГосИС);
		
		Если СписокОшибок = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'В табличной части нет товаров, по которым нужно заполнить серии.'");
			
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВСпискахДокументов

// Функция проверяет что
//  * в динамическом списке формы из которого производится выбор есть строки
//  * пользователь не выбрал строки группировок.
// Параметры:
//  Список                     - ТаблицаФормы - список формы
//  ПоТекущейСтроке            - Булево       - переключатель единичного и множественного выбора
//  СообщатьОшибкуПользователю - Булево       - необходимость вывести "сообщение по умолчанию",
//                                              если Ложь то взаимодействие с пользователем оставляется для вызывающей функции.
//
// Возвращаемое значение:
//  Булево - признак корректности выбора
Функция ВыборСтрокиСпискаКорректен(Список, ПоТекущейСтроке = Ложь, СообщатьОшибкуПользователю = Истина) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Результат = Ложь;
	
	Если ПоТекущейСтроке Тогда
		
		Если Список.ТекущиеДанные <> Неопределено И ТипЗнч(Список.ТекущаяСтрока) <> ТипГруппировка Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Если Список.ВыделенныеСтроки.Количество() Тогда
			Результат = Истина;
			Для Каждого Элемент Из Список.ВыделенныеСтроки Цикл
				Результат = Результат И (ТипЗнч(Элемент) <> ТипГруппировка);
			КонецЦикла;
			
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СообщатьОшибкуПользователю Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Операция недоступна для выбранного объекта'"),,
			Список.Имя);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает данные выделенных строк (или колонки из них) исключая строки группировки
//
// Параметры:
//  ДинамическийСписок - ТаблицаФормы - имя элемента формы связанного с динамическим списком для выбора
//  Колонка            - Строка       - вернуть результат в виде ДанныеСтроки[ИмяКолонки]
//                     - Неопределено - вернуть результат в виде массива выделенных строк
//
// Возвращаемое значение:
//  Массив - данные выделенных строк списка
Функция ВыделенныеЭлементыСпискаБезГрупп(ДинамическийСписок, Колонка = Неопределено) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Результат = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ДинамическийСписок.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) <> ТипГруппировка Тогда
			Если Колонка = Неопределено Тогда
				Результат.Добавить(ВыделеннаяСтрока);
			Иначе
				Результат.Добавить(ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока)[Колонка]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Заполняет массив документов по которым должен быть установлен архивный статус и отдает для архивирования
//
// Параметры:
//   Форма                    - ФормаКлиентскогоПриложения - источник данных команды
//   СсылкаДинамическийСписок - ТаблицаФормы     - динамический список формы (при вызове из формы списка)
//                            - ДокументСсылка   - ссылка на архивируемый документ (при вызове из формы документа)
//   МодульОбработки          - ОбщийМодуль      - обработчик архивирования
//  ОповещениеПриЗавершении   - ОписаниеОповещения, Неопределено - оповещение о завершении
Процедура АрхивироватьДокументы(Форма, СсылкаДинамическийСписок, МодульОбработки, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если ТипЗнч(СсылкаДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		
		Если Не ВыборСтрокиСпискаКорректен(СсылкаДинамическийСписок) Тогда
			Возврат;
		КонецЕсли; 
	
		ДокументыКАрхивированию = ВыделенныеЭлементыСпискаБезГрупп(СсылкаДинамическийСписок);
		ТекстВопроса = НСтр("ru = 'Подтвердите операцию: по выделенным документам дальнейшие действия не требуются'");
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СсылкаДинамическийСписок) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(СсылкаДинамическийСписок) = Тип("Массив") Тогда
			ДокументыКАрхивированию = СсылкаДинамическийСписок;
		Иначе
			ДокументыКАрхивированию = Новый Массив;
			ДокументыКАрхивированию.Добавить(СсылкаДинамическийСписок);
		КонецЕсли;
		
		Если ДокументыКАрхивированию.Количество() > 1 Тогда
			ТекстВопроса = НСтр("ru = 'Подтвердите операцию: по выделенным документам дальнейшие действия не требуются'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Подтвердите операцию: по текущему документу дальнейшие действия не требуются'");
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументыКАрхивированию", ДокументыКАрхивированию);
	// Используется в механизме оповещений
	ДополнительныеПараметры.Вставить("Контекст",                СсылкаДинамическийСписок);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие",      НСтр("ru = 'Архивирование документов'"));
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ИдентификаторВладельца",  Форма.УникальныйИдентификатор);
	
	//@skip-warning одноименные обработчики архивирования ГосИС
	ПоказатьВопрос(
		Новый ОписаниеОповещения("АрхивироватьДокументы", МодульОбработки, ДополнительныеПараметры),
		ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

// Заполняет массив распоряжений по которым должен быть установлен архивный статус оформления и отдает для архивирования
//
// Параметры:
//   Форма              - ФормаКлиентскогоПриложения - источник данных команды
//   ДинамическийСписок - ТаблицаФормы     - динамический список распоряжений на форме
//   МодульОбработки    - ОбщийМодуль      - обработчик архивирования
//   ПустаяСсылка       - ДокументСсылка   - пустой документ ГосИС (источник данных "Документ")
//   Колонка            - Строка           - имя колонки "Документ-основание" (источник данных "Основание")
//
Процедура АрхивироватьРаспоряжения(Форма, ДинамическийСписок, МодульОбработки, ПустаяСсылка, Колонка = "ДокументОснование") Экспорт
	
	ОчиститьСообщения();
	
	Если Не ВыборСтрокиСпискаКорректен(ДинамическийСписок) Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжения = ВыделенныеЭлементыСпискаБезГрупп(ДинамическийСписок, Колонка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Распоряжения", Распоряжения);
	ДополнительныеПараметры.Вставить("ПустаяСсылка", ПустаяСсылка);
	// Используется в механизме оповещений
	ДополнительныеПараметры.Вставить("Контекст",                ДинамическийСписок);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие",      НСтр("ru = 'Архивирование распоряжений на оформление'"));
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
	ДополнительныеПараметры.Вставить("ИдентификаторВладельца",  Форма.УникальныйИдентификатор);
	
	//@skip-warning одноименные обработчики архивирования ГосИС
	ПоказатьВопрос(
		Новый ОписаниеОповещения("АрхивироватьРаспоряжения", МодульОбработки, ДополнительныеПараметры),
		НСтр("ru = 'Подтвердите действие: по выделенным документам не требуется оформление документов'"),
		РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

// Открывает распоряжение из списка документов к оформлению
//
// Параметры:
//   ДинамическийСписок   - ТаблицаФормы - динамический список распоряжений на форме
//   СтандартнаяОбработка - Булево       - признак стандартной обработки выбора
//   Колонка              - Строка       - имя колонки "Документ-основание" (источник данных "Основание")
//
Процедура ОткрытьРаспоряжение(ДинамическийСписок, СтандартнаяОбработка, Колонка = "ДокументОснование") Экспорт
	
	ОчиститьСообщения();
	
	Если Не ВыборСтрокиСпискаКорректен(ДинамическийСписок, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ДинамическийСписок.ТекущиеДанные;
	ПоказатьЗначение( ,ТекущиеДанные[Колонка]);
	
КонецПроцедуры

// Открывает отчет о расхождениях при оформлении распоряжение из списка документов к оформлению
//
// Параметры:
//   ДинамическийСписок   - ТаблицаФормы - динамический список распоряжений на форме
//   ИмяОтчета            - Строка       - имя открываемого отчета
//   Колонка              - Строка       - имя колонки "Документ-основание" (источник данных "Основание")
//
Процедура ОткрытьОтчетОРасхожденияхИзРаспоряжений(ДинамическийСписок, ИмяОтчета, Колонка = "ДокументОснование") Экспорт
	
	ОчиститьСообщения();
	
	Если Не ВыборСтрокиСпискаКорректен(ДинамическийСписок) Тогда
		Возврат;
	КонецЕсли;
	
	Распоряжения = ВыделенныеЭлементыСпискаБезГрупп(ДинамическийСписок, Колонка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ДокументОснование", Распоряжения));
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму(СтрШаблон("Отчет.%1.Форма", ИмяОтчета), ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаКодовМаркировки

// Открывает форму загрузки кодов маркировки из таблицы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма источник события.
// 	ДоступнаИерархия - Булево - Признак доступности иерархии.
// 	Заголовок - Строка - Заголовок открываемой формы.
//
Процедура ОткрытьФормуЗагрузкиКодовМаркировки(Форма, ДоступнаИерархия, Заголовок) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",               Заголовок);
	ПараметрыОткрытия.Вставить("ИспользоватьКодУпаковки", ДоступнаИерархия);
	
	ОткрытьФорму("ОбщаяФорма.ЗагрузкаКодовМаркировкиИС", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает признак того, что владелец формы является формой загрузки кодов маркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма-источник события.
// 	Владелец - ФормаКлиентскогоПриложения - владелец формы для проверки.
// Возвращаемое значение:
// 	Булево - Признак формы загрузки кодов маркировки.
//
Функция ЭтоЗагрузкаКодовМаркировки(Форма, Владелец) Экспорт
	
	Возврат ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения")
		И Форма.ИмяФормы = "ОбщаяФорма.ЗагрузкаКодовМаркировкиИС"
		И Форма.ВладелецФормы = Владелец;
	
КонецФункции

#КонецОбласти

#Область НастройкаНоменклатуры

// Параметры открытия формы настройки частичного выбытия.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы настройки частичного выбытия:
// * ФормаВладелец                   - Неопределено, ФормаКлиентскогоПриложения - Обязательный. Форма-владелец настройки.
// * РежимПросмотра                  - Булево                     - Открывает форму только для просмотра
// * Номенклатура                    - Неопределено, ОпределяемыйТип.Номенклатура - Номенклатура для настройки соответствий.
// * ВидПродукции                    - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
// * ЕдиницаХранения                 - Неопределено, ОпределяемыйТип.Упаковка     - Базовая единица хранения.
// * НаборУпаковок                   - Неопределено, ОпределяемыйТип.НаборУпаковокНоменклатурыИС - Набор упаковок, если используется.
// * УпаковкиВключены                - Булево  - Для номенклатуры упаковки используются и включены.
// * ДопустимоИспользованиеУпаковок         - Булево  - В конфигурации присутствует механизм упаковок.
// * ДопустимыУпаковкиМеньшеЕдиницыХранения - Булево  - Коэффициент упаковки может быть менее 1.
// * КарточкаТовараСодержитВесовойПризнак   - Булево  - Карточка товара содержит признак весового товара.
// * ДопустимаНастройкаЛогистическойЕдиницы - Булево  - Разрешена настройка логистической единицы.
Функция ПараметрыОткрытияФормыНастройкиНоменклатуры() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	// Состояние
	ВозвращаемоеЗначение.Вставить("ФормаВладелец",      Неопределено);
	ВозвращаемоеЗначение.Вставить("РежимПросмотра",     Ложь);
	// Источник данных
	ВозвращаемоеЗначение.Вставить("Номенклатура",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕдиницаХранения",    Неопределено);
	ВозвращаемоеЗначение.Вставить("НаборУпаковок",      Неопределено);
	ВозвращаемоеЗначение.Вставить("УпаковкиВключены",   Ложь);
	// Параметры конфигурации
	ВозвращаемоеЗначение.Вставить("ДопустимоИспользованиеУпаковок",         Истина);
	ВозвращаемоеЗначение.Вставить("ДопустимыУпаковкиМеньшеЕдиницыХранения", Истина);
	ВозвращаемоеЗначение.Вставить("КарточкаТовараСодержитВесовойПризнак",   Истина);
	ВозвращаемоеЗначение.Вставить("ДопустимаНастройкаЛогистическойЕдиницы", Истина);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработка действия гиперссылки настройки параметров номенклатуры.
// 
// Параметры:
//  ОповещениеОЗавершении      - ОписаниеОповещения - Оповещение о завершении настройки.
//  ПараметрыОбработкиДействия - см. ПараметрыОткрытияФормыНастройкиНоменклатуры.
Процедура ОбработкаДействияНастройкиНоменклатуры(ОповещениеОЗавершении, ПараметрыОбработкиДействия) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработкиДействия.Номенклатура) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Настройка возможна только для сохраненной номенклатуры.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыОбработкиДействия);
	ПараметрыОткрытия.Удалить("ФормаВладелец");
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаНастройкиНоменклатурыИС",
		ПараметрыОткрытия,
		ПараметрыОбработкиДействия.ФормаВладелец,,,,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

// Параметры открытия формы списка потребительских упаковок.
// 
// Возвращаемое значение:
// Структура - Параметры открытия формы списка потребительских упаковок:
// * ПараметрыФормы - Неопределено, Структура - параметры формы
// * ВладелецФормы - Неопределено, ФормаКлиентскогоПриложения - владелец формы
// * ОповещениеОЗакрытии - Неопределено, ОписаниеОповещения - оповещение о закрытии
// * РежимОткрытияОкна - Неопределено, РежимОткрытияОкнаФормы - режим открытия окна
// * Организациия - Неопределено, ОпределяемыйТип.Организация - огранизация
Функция ПараметрыОткрытияФормыСпискаПотребительскихУпаковок() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ПараметрыФормы",      Неопределено);
	Параметры.Вставить("ВладелецФормы",       Неопределено);
	Параметры.Вставить("ОповещениеОЗакрытии", Неопределено);
	Параметры.Вставить("РежимОткрытияОкна",   Неопределено);
	Параметры.Вставить("Организациия",        Неопределено);
	
	Возврат Параметры
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтегрируемыеПодсистемы

Процедура ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование = Неопределено, Владелец = Неопределено, ОписаниеОповещения = Неопределено, КорректировочныйДокумент = Ложь) Экспорт
	
	Если КорректировочныйДокумент Тогда
		ПараметрыФормы = Новый Структура("Основание", Новый Структура("Основание, Корректировочный", ДокументОснование, КорректировочныйДокумент));
	Иначе
		ПараметрыФормы = Новый Структура("Основание", ДокументОснование);
	КонецЕсли;
	
	ОткрытьФорму(
		ПолноеИмяДокумента + ".Форма.ФормаДокумента",
		ПараметрыФормы,
		Владелец,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияДокументаСДополнительнымиПараметрами(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ИмяФильтра",      ДополнительныеПараметры.ИмяФильтра);
	Основание.Вставить("ЗначениеФильтра", ВыбранныйЭлемент.Значение);
	Основание.Вставить("Основание",       ДополнительныеПараметры.ДокументОснование);
	
	Если ДополнительныеПараметры.Свойство("Корректировочный") И ДополнительныеПараметры.Корректировочный Тогда
		Основание.Вставить("Корректировочный", ДополнительныеПараметры.Корректировочный);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		ДополнительныеПараметры.ПолноеИмяДокумента + ".Форма.ФормаДокумента",
		ПараметрыФормы,
		ДополнительныеПараметры.Владелец,,,,
		ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВыбратьИзСпискаИОткрытьФормуСозданияДокумента(ПараметрыВыбораИзСписка, КорректировочныйДокумент = Ложь) Экспорт
	
	СписокДляВыбора = Новый СписокЗначений;
	СписокДляВыбора.ЗагрузитьЗначения(ПараметрыВыбораИзСписка.ОбъектыДляВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолноеИмяДокумента", ПараметрыВыбораИзСписка.ПолноеИмяДокумента);
	ДополнительныеПараметры.Вставить("ДокументОснование",  ПараметрыВыбораИзСписка.ДокументОснование);
	ДополнительныеПараметры.Вставить("Владелец",           ПараметрыВыбораИзСписка.Владелец);
	ДополнительныеПараметры.Вставить("ИмяФильтра",         ПараметрыВыбораИзСписка.ИмяФильтра);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ПараметрыВыбораИзСписка.ОписаниеОповещения);
	
	Если КорректировочныйДокумент Тогда
		ДополнительныеПараметры.Вставить("Корректировочный", КорректировочныйДокумент);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуСозданияДокументаСДополнительнымиПараметрами",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПараметрыВыбораИзСписка.Владелец.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗемельныхУчастков(ВладелецФормы) Экспорт
	
	Если ИнтеграцияИСКлиентСерверПовтИсп.ЗемельныйУчастокИСПереопределен() Тогда
		ИнтеграцияИСКлиентПереопределяемый.ОткрытьФормуСпискаЗемельныхУчастков(ВладелецФормы);
	Иначе
		ОткрытьФорму("Справочник.ЗемельныеУчасткиИС.ФормаСписка",, ВладелецФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СкопироватьШтрихКодВБуферОбмена(ЭлементФормы, Знач Штрихкод) Экспорт
	
	Попытка
		HTMLДокумент = ЭлементФормы.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = Штрихкод;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = НСтр("ru = 'Штрихкод скопирован в буфер обмена.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.УспешнаяПроверкаНаличияГосИС);
	Исключение
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(Штрихкод);
	КонецПопытки;

КонецПроцедуры

#Область ДальнейшиеДействия

// Инициализировать структура данных для подготовки сообщений к передаче
//
//  Параметры:
//   ДинамическийСписок - ТаблицаФормы - Динамический список.
//   ДальнейшееДействие - ПеречислениеСсылка - Дальнейшее действие.
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении проведения документов.
// Возвращаемое значение:
//  Структура - обязательные параметры для подготовки сообщений к передаче:
// * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении проведения документов
// * ПричинаНедоступности - Строка - Причина недоступности
// * ДействиеНедоступно - Булево - Признак недоступности действия
// * ДальнейшееДействие - ПеречислениеСсылка - Дальнейшее действие (ПеречислениеСсылка..ДальнейшиеДействияПоВзаимодействию*)
// * ДинамическийСписок - ТаблицаФормы - Динамический список
// * РеквизитыДокументов - Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка - Документ
//    * Значение - Структура - Реквизиты документа
// * НепроведенныеДокументы - Массив Из ДокументСсылка - Непроведенные документы
// * ПараметрыПередачи - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
Функция СтруктураПодготовкиСообщенийКПередаче(ДинамическийСписок, ДальнейшееДействие, ОповещениеПриЗавершении) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивДокументов",        Новый Массив);
	Контекст.Вставить("НепроведенныеДокументы",  Новый Массив);
	Контекст.Вставить("РеквизитыДокументов",     Новый Соответствие);
	Контекст.Вставить("ДинамическийСписок",      ДинамическийСписок);
	Контекст.Вставить("ДальнейшееДействие",      ДальнейшееДействие);
	Контекст.Вставить("ДействиеНедоступно",      Ложь);
	Контекст.Вставить("ПричинаНедоступности",    "");
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПередачи",       Неопределено);
	
	Возврат Контекст;
	
КонецФункции

// Процедура - Определить доступность действий
//
// Параметры:
//  Контекст                       - (См. СтруктураПодготовкиСообщенийКПередаче).
//  ИменаКолонокДальнейшиеДействия - Массив Из Строка - Имена колонок с дальнейшими действиями.
//  ИменаРеквизитов                - Структура,Строка,Неопределено - Имена реквизитов для сохранения в РеквизитыДокументов.
//
Процедура ОпределитьДоступностьДействий(Контекст, ИменаКолонокДальнейшиеДействия, ИменаРеквизитов = Неопределено) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	ИмяПоляСсылка  = "Ссылка";
	
	Если ТипЗнч(Контекст.ДинамическийСписок.ТекущаяСтрока) = Тип("РегистрСведенийКлючЗаписи.ВскрытыеПотребительскиеУпаковкиИС") Тогда
		ИмяПоляСсылка = "Документ";
	КонецЕсли;
	
	Если Контекст.ПараметрыПередачи <> Неопределено
		И Контекст.ПараметрыПередачи.ИмяПоляСсылка <> Неопределено Тогда
		ИмяПоляСсылка = Контекст.ПараметрыПередачи.ИмяПоляСсылка;
	КонецЕсли;
	
	ВыделенныеСтроки = Контекст.ДинамическийСписок.ВыделенныеСтроки;
	Если Контекст.ПараметрыПередачи <> Неопределено
		И Контекст.ПараметрыПередачи.ВыделенныеСтроки <> Неопределено Тогда
		ВыделенныеСтроки = Контекст.ПараметрыПередачи.ВыделенныеСтроки;
	КонецЕсли;
	
	ДокументыДляПолученияРеквизитов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = ТипГруппировка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Контекст.ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока);
		ПроверкаПройдена = Ложь;
		Для Каждого ИмяКолонки Из ИменаКолонокДальнейшиеДействия Цикл
			ПроверкаПройдена = ПроверкаПройдена Или (ДанныеСтроки[ИмяКолонки] = Контекст.ДальнейшееДействие);
		КонецЦикла;
		Если ПроверкаПройдена Тогда 
			Контекст.МассивДокументов.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
			Если Не ДанныеСтроки.Проведен Тогда
				Контекст.НепроведенныеДокументы.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
			КонецЕсли;
		КонецЕсли;
		Если ИменаРеквизитов <> Неопределено Тогда
			РеквизитыДокумента = Новый Структура;
			Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из ИменаРеквизитов Цикл
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, КлючИЗначение.Ключ) Тогда
						РеквизитыДокумента.Вставить(КлючИЗначение.Ключ, ДанныеСтроки[КлючИЗначение.Ключ]);
					Иначе
						ДокументыДляПолученияРеквизитов.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, ИменаРеквизитов) Тогда
					РеквизитыДокумента.Вставить(ИменаРеквизитов, ДанныеСтроки[ИменаРеквизитов]);
				Иначе
					ДокументыДляПолученияРеквизитов.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
				КонецЕсли;
			КонецЕсли;
			Контекст.РеквизитыДокументов.Вставить(ДанныеСтроки[ИмяПоляСсылка], РеквизитыДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументыДляПолученияРеквизитов.Количество() Тогда
		
		Реквизиты = Новый Массив;
		Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из ИменаРеквизитов Цикл
				Реквизиты.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
		Иначе
			Реквизиты.Добавить(ИменаРеквизитов);
		КонецЕсли;
		
		ЗначенияРеквизитов = ИнтеграцияИСВызовСервера.ЗначенияРеквизитовОбъектов(ДокументыДляПолученияРеквизитов, Реквизиты);
		
		Для Каждого ДокументСсылка Из ДокументыДляПолученияРеквизитов Цикл
			Контекст.РеквизитыДокументов.Вставить(ДокументСсылка, ЗначенияРеквизитов[ДокументСсылка]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Подготовить сообщения к передаче
//
// Параметры:
//  Контекст - Структура - см СтруктураПодготовкиСообщенийКПередаче()
//
Процедура ПодготовитьСообщенияКПередаче(Контекст) Экспорт
	
	ВыделенныеСтроки = Контекст.ДинамическийСписок.ВыделенныеСтроки;
	Если Контекст.ПараметрыПередачи <> Неопределено
		И Контекст.ПараметрыПередачи.ВыделенныеСтроки <> Неопределено Тогда
		ВыделенныеСтроки = Контекст.ПараметрыПередачи.ВыделенныеСтроки;
	КонецЕсли;
	
	Если Контекст.МассивДокументов.Количество() = 0
		Или Контекст.ДействиеНедоступно Тогда
		
		Если Контекст.ДействиеНедоступно И ЗначениеЗаполнено(Контекст.ПричинаНедоступности) Тогда
			ПользовательскоеПредупреждение = Контекст.ПричинаНедоступности;
		ИначеЕсли Контекст.ДинамическийСписок.ВыделенныеСтроки.Количество() = 1 Тогда
			ПользовательскоеПредупреждение = НСтр("ru = 'Команда не может быть выполнена для указанного документа.'");
		Иначе
			ПользовательскоеПредупреждение = НСтр("ru = 'Команда не может быть выполнена для указанных документов.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(,ПользовательскоеПредупреждение);
		
		Возврат;
		
	КонецЕсли;
	
	Если Контекст.НепроведенныеДокументы.Количество() > 0 Тогда
		
		Если Контекст.НепроведенныеДокументы.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документы. Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПодтверждениеПроведения", ИнтеграцияИСКлиент, Контекст),
			ТекстВопроса,
			Кнопки);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст);
	
КонецПроцедуры

// Только для внутреннего использования.
// 
// Параметры:
// 	ЭлементФормы - ПолеФормы - Элемент формы
// Возвращаемое значение:
// 	Неопределено - Элемент формы
Функция ПолучитьФормуПоЭлементуФормы(ЭлементФормы) Экспорт
	
	Если ТипЗнч(ЭлементФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат ЭлементФормы;
	ИначеЕсли ЭлементФормы.Родитель = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПолучитьФормуПоЭлементуФормы(ЭлементФормы.Родитель);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДиалогПроведенияДокументов

// Только для внутреннего использования.
Процедура ПодготовитьСообщенияКПередачеПодтверждениеПроведения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(Контекст.НепроведенныеДокументы);
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	НепроведенныеДокументы = Новый Массив;
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
				ИнформацияОДокументе.Ссылка);
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Контекст.МассивДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Контекст.МассивДокументов, НепроведенныеДокументы);
	
	// Оповещаем открытые формы о том, что были проведены документы.
	ТипыПроведенныхДокументов = Новый Соответствие;
	Для Каждого ПроведенныйДокумент Из Контекст.МассивДокументов Цикл
		ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
	КонецЦикла;
	Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
		ОповеститьОбИзменении(Тип.Ключ);
	КонецЦикла;
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		
		Если Контекст.НепроведенныеДокументы.Количество() = НепроведенныеДокументы.Количество() Тогда
			
			Если Контекст.НепроведенныеДокументы.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Не удалось провести документ'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Не удалось провести документы'");
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		Иначе
			
			ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
			
			КнопкиДиалога = Новый СписокЗначений;
			Если Контекст.МассивДокументов.Количество() = 0 Тогда
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
			Иначе
				ТекстДиалога = ТекстДиалога + " " + НСтр("ru = 'Продолжить?'");
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения", ЭтотОбъект, Контекст),
				ТекстДиалога,
				КнопкиДиалога);
		
		КонецЕсли; 
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Пропустить Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСМетаданными

Функция ПодсистемаСуществует(КраткоеИмяПодсистемы)
	
	ПолноеИмяПодсистемы = ОбщегоНазначенияИСКлиентСервер.ПолноеИмяПодсистемы(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(ПолноеИмяПодсистемы);
	
КонецФункции

Функция ОбщийМодуль(КраткоеИмяПодсистемы)
	
	ИмяМодуля = ОбщегоНазначенияИСКлиентСервер.МодульКлиент(КраткоеИмяПодсистемы);
	Возврат ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

Функция ПредставлениеПодсистемы(ИмяПодсистемы)
	
	Если НЕ ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		Представление = НСтр("ru = '<Интеграция>'");
	Иначе
		ИмяМодуля = ОбщегоНазначенияИСКлиентСервер.МодульКлиентСервер(ИмяПодсистемы);
		Представление = ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля).ПредставлениеПодсистемы();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ИмяИнтегрируемойПодсистемыПоИмениЭлементаФормы(ИнтегрируемыеПодсистемы, Элемент)
	
	ИмяПодсистемы = "";
	
	Для Каждого КлючИЗначение Из ИнтегрируемыеПодсистемы Цикл
		
		Если Элемент.Имя = ИнтеграцияИСКлиентСервер.ИмяПоляИнтеграцииВФормеДокументаОснования(КлючИЗначение.Ключ) Тогда
			ИмяПодсистемы = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось определить имя интегрируемой подсистемы по имени элемента формы ""%1""'"),
			Элемент.Имя);
			
		ВызватьИсключение ОбщегоНазначенияИСКлиентСервер.ТекстОшибки(, УточнениеОшибки); // неизвестное имя интегрируемой подсистемы
		
	КонецЕсли;
	
	Возврат ИмяПодсистемы;
	
КонецФункции

#КонецОбласти

Функция ПараметрыОткрытияФормыВскрытияПотребительскойУпаковки() Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПараметрыСканирования");
	ПараметрыОткрытия.Вставить("ИмяПодсистемы");
	ПараметрыОткрытия.Вставить("КодМаркировки");
	ПараметрыОткрытия.Вставить("ОповещениеОЗакрытии");
	ПараметрыОткрытия.Вставить("СохранитьПолныйКод", Ложь);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ОткрытьФормуВскрытияПотребительскойУпаковки(ПараметрыОткрытия, ВладелецФормы) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Организация",        ПараметрыОткрытия.ПараметрыСканирования.Организация);
	ПараметрыОткрытияФормы.Вставить("ИмяПодсистемы",      ПараметрыОткрытия.ИмяПодсистемы);
	ПараметрыОткрытияФормы.Вставить("СохранитьПолныйКод", ПараметрыОткрытия.СохранитьПолныйКод);
	
	Если ПараметрыОткрытия.КодМаркировки <> Неопределено Тогда
		ПараметрыОткрытияФормы.Вставить("КодМаркировки", ПараметрыОткрытия.КодМаркировки);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ВскрытиеПотребительскойУпаковкиИС",
		ПараметрыОткрытияФормы,
		ВладелецФормы,,,,
		ПараметрыОткрытия.ОповещениеОЗакрытии);
		
КонецПроцедуры

Функция ВидимостьВИерархии(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Элемент.Видимость И Элемент.Родитель <> Неопределено Тогда
		Возврат ВидимостьВИерархии(Элемент.Родитель);
	ИначеЕсли Элемент.Видимость И Элемент.Родитель = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти