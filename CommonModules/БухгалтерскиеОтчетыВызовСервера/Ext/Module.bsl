
#Область ПрограммныйИнтерфейс

#Область НастройкаОтчета

// Инициализирует компоновщик настроек отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	ОрганизацияИзменилась - Булево - При вызове инициализации из-за изменения организации необходимо передать Истина.
//	ИмяВариантаНастроек - Строка - Имя варианта настроек.
//
Процедура ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась = Ложь, ИмяВариантаНастроек = "") Экспорт
	
	Форма.КомпоновщикИнициализирован = Истина;
	
	Форма.Элементы.НастройкиОтчета.Видимость = Истина;
	
	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	
	ИмяСхемы = БухгалтерскиеОтчеты.ИмяСхемыКомпоновкиДанныхОтчета(Форма.Отчет, ИмяОтчета);
	Схема = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяСхемы);
	
	Если БухгалтерскиеОтчеты.ОтчетПоддерживаетНесколькоСхемКомпоновкиДанных(ИмяОтчета) Тогда
		Форма.Отчет.ТекущаяСхемаКомпоновкиДанных = ИмяСхемы;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяВариантаНастроек) Тогда
		ИмяВариантаНастроек = ИмяОтчета;
	КонецЕсли;
	
	ВариантНастроек = Схема.ВариантыНастроек.Найти(ИмяВариантаНастроек);
	
	Если ВариантНастроек <> Неопределено Тогда
		Настройки = ВариантНастроек.Настройки;
	Иначе
		Настройки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, Форма.УникальныйИдентификатор);
	ИнициализироватьКомпоновщикНастроекСКД(Форма.Отчет.КомпоновщикНастроек, Форма.СхемаКомпоновкиДанных, ИмяОтчета);
	
	Форма.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ТекущиеПользовательскиеНастройки = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(Форма.ПользовательскиеНастройки) Тогда
		ТекущиеПользовательскиеНастройки = ПолучитьИзВременногоХранилища(Форма.ПользовательскиеНастройки);
	КонецЕсли;
	
	ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(Форма, ТекущиеПользовательскиеНастройки);
	
	Если ОрганизацияИзменилась Тогда
		БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма, Форма.Отчет.Организация);
	КонецЕсли;

	ОбновитьОписаниеОтборовОтчета(Форма);

КонецПроцедуры

// Устанавливает для отчета настройки по умолчанию.
//
// Параметры:
//	ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	ИдентификаторОбъекта = БухгалтерскиеОтчеты.ИмяОтчета(ФормаОтчета);
	
	// Если отчет открывается для непосредственного формирования, то его контекст может быть задан через параметры.
	СформироватьПриОткрытии =
		ФормаОтчета.Параметры.Свойство("СформироватьПриОткрытии") 
		И ФормаОтчета.Параметры.СформироватьПриОткрытии = Истина;
		
	ЗначенияПоУмолчанию = БухгалтерскиеОтчеты.БазовыеРеквизитыЗначенияПоУмолчанию();
	СместитьПериодОтчета(ЗначенияПоУмолчанию.НачалоПериода, ЗначенияПоУмолчанию.КонецПериода, ИдентификаторОбъекта);
	
	Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
		
		Если Не Отчет.Свойство(ЗначениеПоУмолчанию.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СформироватьПриОткрытии И ЗначениеЗаполнено(Отчет[ЗначениеПоУмолчанию.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		Отчет[ЗначениеПоУмолчанию.Ключ] = ЗначениеПоУмолчанию.Значение;
		
	КонецЦикла;
	
	Если Отчет.Свойство("Подразделение") Тогда
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Отчет.Подразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	ИначеЕсли Отчет.Свойство("ПодразделениеОрганизации") Тогда
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Отчет.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательБУ") Тогда
		Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("СальдоНаНачалоДт") Тогда
		Отчет.СальдоНаНачалоДт   = Истина;
		Отчет.СальдоНаНачалоКт   = Истина;
		Отчет.СальдоНаКонецДт    = Истина;
		Отчет.СальдоНаКонецКт    = Истина;
		Отчет.ОборотыЗаПериодДт  = Истина;
		Отчет.ОборотыЗаПериодКт  = Истина;
		Отчет.ОборотыСоСчетамиДт = Истина;
		Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		
		Настройки = Новый Структура();
		
		Настройки.Вставить("Показатели",			Истина);
		Настройки.Вставить("Группировка",			Ложь);
		Настройки.Вставить("РазвернутоеСальдо",		Ложь);
		Настройки.Вставить("Отбор",					Истина);
		Настройки.Вставить("ДополнительныеПоля",	Истина);
		Настройки.Вставить("УсловноеОформление",	Истина);
		
		ФормаОтчета.ЗаполнитьНастройкамиПоУмолчанию(Настройки);
		
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("Интервалы") Тогда
		Отчет.Интервалы.Очистить();
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Представление = "До 7 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Представление = "От 8 до 15 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Представление = "От 16 до 30 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Представление = "От 31 до 60 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Представление = "От 61 до 90 дней";
	КонецЕсли;
	
	Если Отчет.Свойство("Период") Тогда
		Отчет.Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ФормаОтчета.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЛегендуДиаграмм") Тогда
		ФормаОтчета.ВыводитьЛегендуДиаграмм = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьПримечания") Тогда
		ФормаОтчета.ВыводитьПримечания = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательПоступление") Тогда
		Отчет.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательРасход") Тогда
		Отчет.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательЗадолженность") Тогда
		Отчет.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Отчет.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
	БухгалтерскиеОтчетыПереопределяемый.УстановитьНастройкиПоУмолчанию(ФормаОтчета);
	
КонецПроцедуры


#КонецОбласти


#Область ВыводОтчета

// Возвращает список имен макетов оформления отчета.
//
// Возвращаемое значение:
//	СписокЗначений - Содержит строки с именами макетов оформления.
//
Функция ПолучитьСписокМакетовОформления() Экспорт
	
	СписокМакетовОформления = Новый СписокЗначений;
	Для Каждого ОбщийМакет Из Метаданные.ОбщиеМакеты Цикл
		Если ОбщийМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.МакетОформленияКомпоновкиДанных Тогда
			
			СписокМакетовОформления.Добавить(ОбщийМакет.Имя, ОбщийМакет.Синоним);

		КонецЕсли;

	КонецЦикла;
	
	СписокМакетовОформления.Добавить(НСтр("ru = 'Основной'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Яркий'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Море'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Арктика'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Зеленый'"));
	СписокМакетовОформления.Добавить(НСтр("ru = 'Античный'"));
	
	Возврат СписокМакетовОформления;
	
КонецФункции

// Устанавливает макет оформления отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* МакетОформления - Строка - Имя макета оформления.
//	НастройкаКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	СтандартнаяОбработка = Истина;
	БухгалтерскиеОтчетыПереопределяемый.УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	МакетОформления	= Неопределено;
	
	Если ПараметрыОтчета.Свойство("МакетОформления", МакетОформления) Тогда
		Если НЕ ЗначениеЗаполнено(МакетОформления) ИЛИ МакетОформления = "МакетОформленияОтчетовЗеленый" Тогда
			МакетОформления = БухгалтерскиеОтчетыКлиентСервер.ИмяМакетаОформленияПоУмолчанию();
		ИначеЕсли МакетОформления = "МакетОформленияОтчетовЧерноБелый" Тогда
			МакетОформления = "ОформлениеОтчетовЧерноБелый";
		КонецЕсли;
	Иначе
		МакетОформления = БухгалтерскиеОтчетыКлиентСервер.ИмяМакетаОформленияПоУмолчанию();
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", МакетОформления);
	
КонецПроцедуры

// Выводит заголовок отчета в общем формате, без своего формата строк.
// Установленный собственный формат строк позволяет повысить визуальную привлекательность отчета на печати 
// или на экране в программе, но некрасиво экспортируется в некоторые другие программы работы с электронными
// таблицами, что затрудняет аналитическую работу с данными отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ВключатьОбособленныеПодразделения - Булево - Признак вывод данным по обособленным подразделениям.
//		* ИдентификаторОтчета - Строка - Имя отчета.
//		* НаборПоказателей - Массив - Массив строк с именам выводимых показателей отчета (опционально).
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, по которому выводятся данные (опционально).
//		* ВыводитьЕдиницуИзмерения - Булево - Признак необходимости вывода единицы измерения (опционально).
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	ОбластиЗаголовка = ОбластиЗаголовкаОтчета();
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	ОбластиЗаголовка.Заголовок                  = Макет.ПолучитьОбласть("ОбластьЗаголовок|КолонкиЗаголовка");
	ОбластиЗаголовка.ОписаниеНастроек           = Макет.ПолучитьОбласть("ОписаниеНастроек|КолонкиЗаголовка");
	ОбластиЗаголовка.Организация                = Макет.ПолучитьОбласть("Организация|КолонкиЗаголовка");
	ОбластиЗаголовка.ОписаниеЕдиницыИзмерения   = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения|КолонкиЗаголовка");
	ОбластиЗаголовка.ВыравниватьНастройкиИОтбор = Истина;
	
	ВывестиЗаголовокОтчетаПоМакету(ОбластиЗаголовка, ПараметрыОтчета, КомпоновщикНастроек, Результат);
	
КонецПроцедуры

// Выводит подвал отчета в общем формате, без своего формата строк, с автоматическим расположением содержимого 
// в колонках в зависимости от их ширины.
// Установленный собственный формат строк позволяет повысить визуальную привлекательность отчета на печати 
// или на экране в программе, но некрасиво экспортируется в некоторые другие программы работы с электронными
// таблицами, что затрудняет аналитическую работу с данными отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ОтветственноеЛицо - Перечисления.ОтветственныеЛицаОрганизаций - Вид ответственного лица.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиПодвалОтчета(ПараметрыОтчета, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	ОбластьПодписиОтветственный = Макет.ПолучитьОбласть("Подписи|КолонкаОтветственный");
	ОбластьПодписиДолжность     = Макет.ПолучитьОбласть("Подписи|КолонкаДолжность");
	ОбластьПодписиПодпись       = Макет.ПолучитьОбласть("Подписи|КолонкаПодпись");
	ОбластьПодписиРасшифровка   = Макет.ПолучитьОбласть("Подписи|КолонкаРасшифровка");
	ОбластьПодписиРазделитель   = Макет.ПолучитьОбласть("Подписи|КолонкаРазделитель");
	
	ШиринаКолонкиОтветственный	= ОбластьПодписиОтветственный.ТекущаяОбласть.ШиринаКолонки;
	ШиринаКолонкиДолжность		= ОбластьПодписиДолжность.ТекущаяОбласть.ШиринаКолонки;
	ШиринаКолонкиПодпись		= ОбластьПодписиПодпись.ТекущаяОбласть.ШиринаКолонки;
	ШиринаКолонкиРасшифровка	= ОбластьПодписиРасшифровка.ТекущаяОбласть.ШиринаКолонки;
	
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо")
		И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		
		ДанныеОтветственногоЛица = ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета);
		
		ОбластьПодписиДолжность.Параметры.Заполнить(ДанныеОтветственногоЛица);		
		ОбластьПодписиРасшифровка.Параметры.Заполнить(ДанныеОтветственногоЛица);		
	КонецЕсли;
	
	НомерКолонки = 1;
	ОбластьПодписиТаблица = Результат.Вывести(ОбластьПодписиОтветственный);
	ВерхняяГраница = ОбластьПодписиТаблица.Верх;
	НижняяГраница = ОбластьПодписиТаблица.Низ;
	
	ДополнитьКолонкуДоМинимальнойШирины(Результат, ВерхняяГраница, НомерКолонки, ОбластьПодписиРазделитель, ШиринаКолонкиОтветственный);
	
	ПрисоединитьКолонкуСРазделителями(Результат, ВерхняяГраница, НомерКолонки, 
		ОбластьПодписиДолжность, ОбластьПодписиРазделитель, ШиринаКолонкиДолжность);
	
	ПрисоединитьКолонкуСРазделителями(Результат, ВерхняяГраница, НомерКолонки, 
		ОбластьПодписиПодпись, ОбластьПодписиРазделитель, ШиринаКолонкиПодпись);
	
	ПрисоединитьКолонкуСРазделителями(Результат, ВерхняяГраница, НомерКолонки, 
		ОбластьПодписиРасшифровка, ОбластьПодписиРазделитель, ШиринаКолонкиРасшифровка);
	
	Результат.Область(ВерхняяГраница,,НижняяГраница).Имя = "Подписи";

КонецПроцедуры

#КонецОбласти

#Область ПредставленияОбъектов

// Заменяет представление отборов, отображаемое в поле табличного документа до первого заполнения отчета.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - содержит реквизиты Отчет и Результат.
//
Процедура ОбновитьОписаниеОтборовОтчета(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	Если Отчет.Свойство("РежимРасшифровки") И Отчет.РежимРасшифровки
	 Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Результат")
	 Или Форма.Результат.Области.Найти("ОписаниеОтборовОтчета") = Неопределено // отчет ранее заполнялся
	 Или Форма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения <> ДополнительныйРежимОтображения.Неактуальность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ТекстОтбор = ОписаниеОтборовОтчета(ПараметрыОтчета, Отчет.КомпоновщикНастроек);
	
	// Выводим представление отборов ниже надписи "Отчет не сформирован".
	Форма.Результат.Область(9, 2).Текст = ТекстОтбор;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

// Возвращает признак использования подразделений.
//
// Возвращаемое значение:
//	Булево - Истина, если подразделения используются, иначе Ложь.
//
Функция ИспользоватьПодразделения() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения();
	
КонецФункции

// Возвращает описание типов со справочниками, имеющими владельца организацию.
//
// Возвращаемое значение:
//	ОписаниеТипов - Содержит типы справочников, имеющими владельца организацию.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ТипыСвязанныеСОрганизацией();
	
КонецФункции

#КонецОбласти

// Вызывается из обработчика события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//	ЗагружатьТолькоРеквизиты - Булево - Признак загрузки только значений реквизитов отчета без настроек СКД.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	// Для отчетов, использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки.
	РежимРасшифровки = Ложь;
	Если ФормаОтчета.Параметры.Свойство("КлючВарианта") И ЗначениеЗаполнено(ФормаОтчета.Параметры.КлючВарианта) Тогда
		Если Отчет.Свойство("РежимРасшифровки") И ФормаОтчета.Отчет.РежимРасшифровки Тогда
			РежимРасшифровки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки, загружаем настройки по умолчанию.
	Если Настройки = Неопределено ИЛИ РежимРасшифровки Тогда
		// Установка настроек по умолчанию.
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);
	Иначе 
		// Восстановление сохраненных настроек.
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			
			Если ДополнительныеСвойства.Свойство("Организация") 
				И ЗначениеЗаполнено(ДополнительныеСвойства.Организация) Тогда
				// Доступ к организации мог быть изменен с момента сохранения настроек.
				// Недоступную организацию исключим из состава настроек.
				ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
				Если ДоступныеОрганизации.Найти(ДополнительныеСвойства.Организация) = Неопределено Тогда
					ДополнительныеСвойства.Удалить("Организация");
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("МакетОформления") Тогда
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
					ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
					"МакетОформления", 
					ДополнительныеСвойства.МакетОформления);
			КонецЕсли;
			
			// Восстановление реквизитов отчета.
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					
					ТипСохраненногоРеквизита = ТипЗнч(ЭлементСтруктуры.Значение);
					
					Если ТипСохраненногоРеквизита = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Очистить();
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементСтруктуры.Значение, ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ]);
						Продолжить;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Подразделение"
						И Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
						Продолжить;
					ИначеЕсли ЭлементСтруктуры.Ключ = "РежимРасшифровки" Тогда
						Продолжить;
					ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипСохраненногоРеквизита)
						И Не ОбщегоНазначения.СсылкаСуществует(ЭлементСтруктуры.Значение) Тогда
						// Объект по ссылке был удален, такое значение настройки восстанавливать не нужно.
						Продолжить;
					КонецЕсли;
					
					ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Восстановление реквизитов формы.
			Для Каждого ИмяРеквизита Из СохраняемыеРеквизитыФормы() Цикл
				Если ДополнительныеСвойства.Свойство(ИмяРеквизита)
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, ИмяРеквизита) Тогда
					ФормаОтчета[ИмяРеквизита] = ДополнительныеСвойства[ИмяРеквизита];
				КонецЕсли;
			КонецЦикла;
			
			// Восстановление особенных настроек
			Если ДополнительныеСвойства.Свойство("ВидимостьПанелиНастроек") 
				И НЕ ЕстьЭлементФормы(ФормаОтчета, "РазделыОтчета") Тогда
				
				Если ЕстьЭлементФормы(ФормаОтчета, "ПанельНастроек") Тогда
					БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
						ФормаОтчета.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
				КонецЕсли;
					
				Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
 					ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("ОписаниеОтборовОтчета") Тогда
				ВывестиОписаниеОтбора(ФормаОтчета, ДополнительныеСвойства.ОписаниеОтборовОтчета);
			КонецЕсли;
			
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьДиаграмму") 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьДиаграмму") Тогда
				
				ФормаОтчета.ВыводитьДиаграмму = Истина;
				
			КонецЕсли;
			
			Если Не ДополнительныеСвойства.Свойство("ВыводитьЛегендуДиаграмм") 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВыводитьЛегендуДиаграмм") Тогда
				
				ФормаОтчета.ВыводитьЛегендуДиаграмм = Истина;
				
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("МакетОформления")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "МакетОформления") Тогда
				ФормаОтчета.МакетОформления = ДополнительныеСвойства.МакетОформления;
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
					ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
					"МакетОформления", ФормаОтчета.МакетОформления);
			КонецЕсли;
			
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек.
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные.
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек.
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
		
		Если Отчет.Свойство("Организация") Тогда
			УстановитьОрганизацию(ФормаОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "МинимальныйВидПериода") Тогда
		МинимальныйВидПериода = ФормаОтчета.МинимальныйВидПериода;
	Иначе
		МинимальныйВидПериода = Неопределено;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчеты.ИмяОтчета(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если ФормаОтчета.Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = "Выводить наименование счета";
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ВидПериода") И НЕ ЗначениеЗаполнено(ФормаОтчета.ВидПериода) Тогда
		ФормаОтчета.ВидПериода = ВыборПериодаКлиентСервер.ПолучитьВидПериода(
			ФормаОтчета.Отчет.НачалоПериода, ФормаОтчета.Отчет.КонецПериода, МинимальныйВидПериода);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета.Отчет, "ВключатьОбособленныеПодразделения") Тогда
		ВключатьОбособленныеПодразделенияЗнач = ФормаОтчета.Отчет.ВключатьОбособленныеПодразделения;
	Иначе
		ВключатьОбособленныеПодразделенияЗнач = Ложь;
	КонецЕсли; 
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			ФормаОтчета.ПолеОрганизация, ФормаОтчета.Отчет.Организация, ВключатьОбособленныеПодразделенияЗнач);
	КонецЕсли;
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ИдентификаторЗаданияАктуализации")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "АдресХранилищаАктуализации") Тогда
		
		БухгалтерскиеОтчетыПереопределяемый.ПроверитьАктуальность(ФормаОтчета);
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает данные ответственного лица для подписи в отчете.
//
// Параметры:
//	Параметры - Структура - Настройки формирования отчета, содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ОтветственноеЛицо - Перечисления.ОтветственныеЛицаОрганизаций - Вид ответственного лица.
//		* Период - Дата - Период формирования отчета (опционально).
//		* КонецПериода - Дата - Конец периода формирования отчета (опционально).
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Должность - Строка - Должность ответственного лица.
//		* РасшифровкаПодписи - Строка - Фамилия и инициалы ответственного лица.
//
Функция ПолучитьДанныеОтветственногоЛица(Параметры) Экспорт
	
	ДанныеОтветственногоЛица = Новый Структура("Должность,РасшифровкаПодписи");
	
	Если Не Параметры.Свойство("Организация")
		ИЛИ Не Параметры.Свойство("ОтветственноеЛицо") Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация)
		ИЛИ Не ЗначениеЗаполнено(Параметры.ОтветственноеЛицо) Тогда
		Возврат ДанныеОтветственногоЛица;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		Период = Параметры.Период;
	ИначеЕсли Параметры.Свойство("КонецПериода") И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Период = КонецДня(Параметры.КонецПериода);
	Иначе
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
		
	РеквизитыОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Параметры.Организация, Период);

	// Сначала проверяем ответственных за регистры, потом все остальные виды ответственных.
	Если Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры Тогда
		Ключ = "ОтветственныйЗаБухгалтерскиеРегистры";
	
	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
		Ключ = "ОтветственныйЗаНалоговыеРегистры";
	
	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
		Ключ = "Руководитель";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
		Ключ = "ГлавныйБухгалтер";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы Тогда
		Ключ = "РуководительКадровойСлужбы";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
		Ключ = "Кассир";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель Тогда
		Ключ = "УполномоченныйПредставитель";

	ИначеЕсли Параметры.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель Тогда
		Ключ = "Исполнитель";

	КонецЕсли;

	ДанныеОтветственногоЛица.Должность 			= РеквизитыОтветственныхЛиц[Ключ + "ДолжностьПредставление"];
	ДанныеОтветственногоЛица.РасшифровкаПодписи = РеквизитыОтветственныхЛиц[Ключ + "Представление"];
	
	Возврат ДанныеОтветственногоЛица;
			
КонецФункции

// Проверяет завершение актуализации для формы отчета.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметры выполнения фонового задания, см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//	ДанныеАктуализации - Структура - данные актуализации отчета, служит для последующего изменения данных формы отчета:
//			* ИдентификаторЗаданияАктуализации - Строка - идентификатор выполняемого задания актуализации;
//			* АдресХранилищаАктуализации - Строка - адрес хранения данных выполненного задания актуализации отчета;
//	ЗапускАктуализацииЕслиНеЗапущено - Булево - признак выполнения проверки актуализации,
//		если установлен, тогда если расчет закрытия месяца не выполняется, будет запущено задание проверки актуальности.
//
Процедура ПроверитьВыполнениеАктуализацииОтчета(ПараметрыПроверки, ДанныеАктуализации, ЗапускАктуализацииЕслиНеЗапущено = Ложь) Экспорт

	Если ЗапускАктуализацииЕслиНеЗапущено Тогда
		Если Не БухгалтерскиеОтчеты.РасчетЗакрытияМесяцаВыполняется(ПараметрыПроверки) Тогда
			БухгалтерскиеОтчеты.ПроверитьАктуальность(ПараметрыПроверки, ДанныеАктуализации);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	РезультатВыполнения = ДлительныеОперации.ОперацияВыполнена(ДанныеАктуализации.ИдентификаторЗаданияАктуализации);
	БухгалтерскиеОтчеты.ОбработатьРезультатВыполненияАктуализации(РезультатВыполнения, ДанныеАктуализации);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет служебные параметры отчета необходимые для работы формы отчета.
//
// Параметры:
//  Отчет			 - ОтчетОбъект		 - Отчет форма которого инициализируется.
//  РеквизитыФормы	 - Структура		 - Структура реквизитов формы.
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма инициализация которой производится.
//
Процедура ИнициализацияФормыОтчета(Отчет, РеквизитыФормы, Форма)
	
	Если РеквизитыФормы.Свойство("ИнформационнаяБазаФайловая") Тогда
		Форма.ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	КонецЕсли;
	
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	МенеджерОтчета = Отчеты[БухгалтерскиеОтчеты.ИмяОтчета(Форма)];
	Если РеквизитыФормы.Свойство("НаборПоказателей") Тогда
		Форма.НаборПоказателей = Новый ФиксированныйМассив(МенеджерОтчета.ПолучитьНаборПоказателей());
	КонецЕсли;
	
	ПараметрМакетОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "МакетОформления") Тогда
			Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
		Если РеквизитыФормы.Свойство("МакетОформления") Тогда
			Форма.МакетОформления = ПараметрМакетОформления.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ПанельНастроек") Тогда
		БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Форма.Элементы.ПанельНастроек, Форма.Элементы.ГруппаПанельНастроек.Видимость);
	КонецЕсли;
	
	УстановитьНастройкиПоУмолчанию(Форма); // Значения по умолчанию могут быть заменены позже, при загрузке настроек отчета.
	
	Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
		ВыборПериодаКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
		Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ГруппировкаТипГруппировки") Тогда
		БухгалтерскиеОтчеты.УстановитьУсловноеОформлениеТипГруппировки(Форма);
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("СоответствиеОрганизаций")
		И ЕстьЭлементФормы(Форма, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Форма.Элементы.ПолеОрганизация, Форма.СоответствиеОрганизаций);
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("ИспользуетсяНесколькоОрганизаций") Тогда
		Форма.ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("ВестиУчетЗатратПоПодразделениям") Тогда
		Форма.ВестиУчетЗатратПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	КонецЕсли;
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(Форма);


	БухгалтерскиеОтчетыПереопределяемый.ПриСозданииНаСервере(Форма);

КонецПроцедуры

Процедура ИнициализацияРасшифровкиПоВиду(Отчет, Параметры, РеквизитыФормы, Форма)
	
	// Взведем флаг расшифровки
	Отчет.РежимРасшифровки = Истина;
	
	// 1 - из временного хранилища, 2 - из параметров формы
	Если Параметры.ВидРасшифровки = 1 Тогда
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
		ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
	ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
		ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
	КонецЕсли;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
		И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
		Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
	КонецЕсли;
	
	Если Параметры.Свойство("СформироватьПриОткрытии") и Параметры.СформироватьПриОткрытии = Истина 
		и РеквизитыФормы.Свойство("КомпоновщикИнициализирован") и Не Форма.КомпоновщикИнициализирован Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КлючТекущегоВарианта") Тогда
			ИнициализацияКомпоновщикаНастроек(Форма, , Форма.КлючТекущегоВарианта);
		Иначе
			ИнициализацияКомпоновщикаНастроек(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОчищатьТаблицуГруппировок") И Форма.Отчет.Свойство("Группировка") Тогда
		Форма.Отчет.Группировка.Очистить();
	КонецЕсли;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОчищатьДополнительныеПоля") И Форма.Отчет.Свойство("ДополнительныеПоля") Тогда
		Форма.Отчет.ДополнительныеПоля.Очистить();
	КонецЕсли;

	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОчищатьИнтервалы") И Форма.Отчет.Свойство("Интервалы") Тогда
		Форма.Отчет.Интервалы.Очистить();
	КонецЕсли;

	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОчищатьСчетаРасчетов") И Форма.Отчет.Свойство("СчетаРасчетов") Тогда
		Форма.Отчет.СчетаРасчетов.Очистить();
	КонецЕсли;
	
	// Установка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	
	// Загрузка пользовательских настроек в компоновщик настроек отчета
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
	// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек.
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Загрузка основных настроек
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Очистка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	// Установка значений реквизитов отчета и формы
	Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
		Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
			// Табличные части отчета могут быть переданы в виде массива структур
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда 
				Для Каждого СтрокаСведений Из ЭлементСтруктуры.Значение Цикл
					НоваяСтрока = Отчет[ЭлементСтруктуры.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
				КонецЦикла;
			Иначе
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		ИначеЕсли РеквизитыФормы.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
		Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
	КонецЕсли;
	
	Попытка
		Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
	Исключение
		// Запись в журнал регистрации не требуется.
	КонецПопытки;
	Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
		Попытка
			Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
		Исключение
			// Запись в журнал регистрации не требуется.
		КонецПопытки;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СформироватьПриОткрытии") Тогда
		// При наличии реквизита формы СформироватьПриОткрытии
		// формирование отчета инициируется формой отчета в событии ПриОткрытии
		Форма.СформироватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Производится инициализация формы для открытия отчета в качестве расшифровки. 
// Вызывается при обработке события формы отчета ПриСозданииНаСервере.
// В качестве настроек расшифровки могут использоваться настройки в универсальном формате 
// (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки),
// или же эти универсальные настройки будут собраны по данным исходного отчета.
//
// Параметры:
//  Отчет			 - ОтчетОбъект		 - Открываемый отчет.
//  Параметры		 - Структура		 - Параметры формы, переданные при открытии.
//  РеквизитыФормы	 - Структура		 - Структура реквизитов формы.
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма открываемого отчета.
//
Процедура ИнициализацияРасшифровкиПоНастройкам(Отчет, Параметры, РеквизитыФормы, Форма)
	
	Отчет.РежимРасшифровки 	= Истина;
	ИмяОтчета 				= БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	НастройкиРасшифровки 	= Неопределено;
	

	МенеджерОтчета = Отчеты[ИмяОтчета];
	МенеджерОтчета.АдаптироватьНастройки(НастройкиРасшифровки);
	
	Если НастройкиРасшифровки.Свойство("КлючВарианта") 
		И ЗначениеЗаполнено(НастройкиРасшифровки.КлючВарианта)Тогда
		Форма.УстановитьТекущийВариант(НастройкиРасшифровки.КлючВарианта);
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("КомпоновщикИнициализирован") И Не Форма.КомпоновщикИнициализирован Тогда
		Если РеквизитыФормы.Свойство("КлючТекущегоВарианта") Тогда
			ИнициализацияКомпоновщикаНастроек(Форма, , Форма.КлючТекущегоВарианта);
		Иначе
			ИнициализацияКомпоновщикаНастроек(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыФормы.Свойство("МакетОформления") И ПустаяСтрока(Форма.МакетОформления)
	   И Не ПустаяСтрока(НастройкиРасшифровки.МакетОформления) Тогда
		Форма.МакетОформления = НастройкиРасшифровки.МакетОформления;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.Отбор,					НастройкиРасшифровки.Отбор);
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление,	НастройкиРасшифровки.УсловноеОформление);
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отчет.КомпоновщикНастроек.Настройки.Порядок,				НастройкиРасшифровки.Порядок, Ложь);
	
	// Субконто1 может быть недоступно из-за функциональных опций. Например, отключена работа с ОС и НМА. Тогда отчет
	// при расшифровке из ОСВ не будет содержать Субконто1 среди доступных полей.
	// Однако при переносе в расшифровывающий отчет отбор по Субконто1 все-равно должен быть используемым.
	ПолеСубконто1 = Новый ПолеКомпоновкиДанных("Субконто1");
	ЭлементОтбораСубконто1 = Неопределено;
	Если Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеСубконто1) = Неопределено Тогда

		Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			   И ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение = ПолеСубконто1 Тогда

				ЭлементОтбораСубконто1 = ЭлементОтбора;
				Прервать;

			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	Отчет.КомпоновщикНастроек.Восстановить();
	Если ЭлементОтбораСубконто1 <> Неопределено Тогда
		ЭлементОтбораСубконто1.Использование = Истина;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УдалитьНеиспользуемыйОтбор(Отчет.КомпоновщикНастроек);
	
	// Установка значений реквизитов отчета и формы
	Для Каждого ЭлементСтруктуры Из НастройкиРасшифровки Цикл
		Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Если ТипЗнч(ЭлементСтруктуры.Значение) <> Тип("Массив") Тогда
				Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		ИначеЕсли РеквизитыФормы.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Отчет.Свойство("Группировка") Тогда
		
		Для Каждого СтрокаГруппировки Из НастройкиРасшифровки.ТаблицаГруппировка Цикл
			
			НоваяСтрока = Отчет.Группировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отчет.Свойство("ДополнительныеПоля") Тогда
		
		Для Каждого СтрокаДополнительныеПоля Из НастройкиРасшифровки.ТаблицаДополнительныеПоля Цикл
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДополнительныеПоля);
			
		КонецЦикла;
		
	КонецЕсли;
	

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СформироватьПриОткрытии") Тогда
		// При наличии реквизита формы СформироватьПриОткрытии
		// формирование отчета инициируется формой отчета в событии ПриОткрытии
		Форма.СформироватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры


Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура();
	
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		
		РеквизитыФормы.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	
	Возврат РеквизитыФормы;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
	
	Если (НРег(Поле) <> "подразделение" Или БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям())
	   И (НРег(Поле) <> "договор" Или БухгалтерскийУчетПереопределяемый.ВестиУчетПоДоговорам()) Тогда

		НоваяСтрока = Группировка.Добавить();
		
		НоваяСтрока.Использование  = Структура.Использование;
		НоваяСтрока.Поле           = Поле;
		НоваяСтрока.Представление  = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Представление) Тогда
			НоваяСтрока.Представление = Поле;
		КонецЕсли;
		
		ТипГруппировки = Структура.ПоляГруппировки.Элементы[0].ТипГруппировки;
		Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			НоваяСтрока.ТипГруппировки = 1;
		ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			НоваяСтрока.ТипГруппировки = 2;
		Иначе
			НоваяСтрока.ТипГруппировки = 0;
		КонецЕсли;

	КонецЕсли;
	Если Структура.Структура.Количество() > 0 Тогда
		ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СместитьПериодОтчета(НачалоМесяца, КонецМесяца, ИмяОтчета)
	
	Смещение = 0;
	БухгалтерскиеОтчетыКлиентСерверПереопределяемый.УстановитьСмещениеПериодаОтчета(Смещение, ИмяОтчета);
	Если Не ЗначениеЗаполнено(Смещение) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоМесяца = ДобавитьМесяц(НачалоМесяца, Смещение);
	КонецМесяца  = КонецМесяца(НачалоМесяца);
	
КонецПроцедуры

Процедура УстановитьОрганизацию(Форма)
	
	// Определяем основную организацию
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		// Если основная организация задана и это не та организация с которой хочет открыться отчет
		// подставляем основную организацию, и устанавливаем настройки по умолчанию.
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ОсновнаяОрганизация <> Форма.Отчет.Организация Тогда
			Форма.Отчет.Организация = ОсновнаяОрганизация;
			РеквизитыФормы = РеквизитыФормы(Форма);
			Если РеквизитыФормы.Свойство("ОрганизацияИзменилась") Тогда
				Форма.ОрганизацияИзменилась = Истина;
			КонецЕсли;

			// Реквизит ВключатьОбособленныеПодразделения должен быть только у отчетов, которые поддерживают выбор варианта:
			// выводить по всей организации или по организации без обособленных подразделений.
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "ВключатьОбособленныеПодразделения") Тогда
				Форма.Отчет.ВключатьОбособленныеПодразделения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Форма.Отчет.Организация = ОсновнаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры


Процедура ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление для списка активных отборов в отчете.
//
// Параметры:
//  ПараметрыОтчета - Структура - может содержать свойство "Подразделение".
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - источник отборов.
//
// Возвращаемое значение:
//   Строка      - представление отборов.
//
Функция ОписаниеОтборовОтчета(ПараметрыОтчета, КомпоновщикНастроек)
	
	СтандартнаяОбработка = Истина;
	ТекстОтбор = "";
	БухгалтерскиеОтчетыПереопределяемый.ОписаниеОтборовОтчета(ПараметрыОтчета, КомпоновщикНастроек, СтандартнаяОбработка, ТекстОтбор);
	Если Не СтандартнаяОбработка Тогда
		Возврат ТекстОтбор;
	КонецЕсли;
	
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстБыстрыйОтбор = "";
	Если ПараметрыОтчета.Свойство("БыстрыйОтбор") И ЗначениеЗаполнено(ПараметрыОтчета.БыстрыйОтбор) Тогда
		ТекстБыстрыйОтбор = ПараметрыОтчета.БыстрыйОтбор;
	КонецЕсли;
	ДополнитьТекстОтбора(ТекстОтбор, ТекстБыстрыйОтбор);
	
	ТекстПодразделение = "";
	Если ПараметрыОтчета.Свойство("Подразделение") И ЗначениеЗаполнено(ПараметрыОтчета.Подразделение) Тогда
		ТекстПодразделение = СтрШаблон(НСтр("ru = 'Подразделение Равно ""%1""'"), ПараметрыОтчета.Подразделение);
	КонецЕсли;
	ДополнитьТекстОтбора(ТекстОтбор, ТекстПодразделение);
	
	Возврат ТекстОтбор;
	
КонецФункции


Функция ЗаполнитьПараметрыОтчетаИзНастроекКомпоновщика(ОтчетОбъект, КомпоновщикНастроекКД)
	
	// Получим параметры формирования отчета, сохраненные в параметре схемы КД.
	ПараметрНастройкиОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКД, "НастройкиОтчета");
	ЗначениеНастройкиОтчета = Неопределено;
	Если ПараметрНастройкиОтчета <> Неопределено Тогда
		ЗначениеНастройкиОтчета = ПараметрНастройкиОтчета.Значение.Получить();
	КонецЕсли;
	
	// Если в схеме КД нет служебного параметра "НастройкиОтчета" или он не инициализирован, то ничего не делаем.
	Если ЗначениеНастройкиОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОтчетОбъект.Метаданные().ПолноеИмя());
	
	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",     ОтчетОбъект.СхемаКомпоновкиДанных);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",       ОтчетОбъект.Метаданные().Имя);
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", КомпоновщикНастроекКД.ПолучитьНастройки());
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ЗначениеНастройкиОтчета);
	
	// Стандартный период, используемый при формировании отчета в рассылке, хранится в отдельном параметре схемы КД.
	ПараметрПериод = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКД, "ПериодОтчета");
	Если ПараметрПериод <> Неопределено И ПараметрПериод.Использование
		И ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
		ПараметрыОтчета.Вставить("ПериодОтчета",  ПараметрПериод.Значение);
		ПараметрыОтчета.Вставить("НачалоПериода", ПараметрПериод.Значение.ДатаНачала);
		ПараметрыОтчета.Вставить("КонецПериода",  ПараметрПериод.Значение.ДатаОкончания);
		ПараметрыОтчета.Вставить("Период",        ПараметрПериод.Значение.ДатаОкончания);
	КонецЕсли;
	
	// Проверим наличие дополнительных параметров формирования отчета, которые зависят от каких-либо условий.
	// Определяются в модуле объекта отчета.
	ДопСвойства = КомпоновщикНастроекКД.Настройки.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("ДополнительныеПараметрыОтчета") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета, ДопСвойства.ДополнительныеПараметрыОтчета, Истина);
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции


Процедура ДополнитьТекстОтбора(ОсновнойТекстОтбор, ДополнительныйТекстОтбор)
	
	Если Не ПустаяСтрока(ОсновнойТекстОтбор) И Не ПустаяСтрока(ДополнительныйТекстОтбор) Тогда
		ОсновнойТекстОтбор = ДополнительныйТекстОтбор + " " + НСтр("ru = 'И'") + " " + ОсновнойТекстОтбор;
	ИначеЕсли ПустаяСтрока(ОсновнойТекстОтбор) И Не ПустаяСтрока(ДополнительныйТекстОтбор) Тогда
		ОсновнойТекстОтбор = ДополнительныйТекстОтбор;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета(ПараметрыОтчета, МенеджерОтчета)
	Перем ПараметрыИсполненияОтчета, ЗначениеПараметра;
	
	Попытка
		ПараметрыИсполненияОтчета = МенеджерОтчета.ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	Если Не ЗначениеЗаполнено(ПараметрыИсполненияОтчета) Тогда
		ПараметрыИсполненияОтчета = Новый Структура;
	КонецЕсли;
	
	ПараметрыПоУмолчанию = Новый Структура;
	ПараметрыПоУмолчанию.Вставить("ПриВыводеЗаголовка",             			Ложь);
	ПараметрыПоУмолчанию.Вставить("ПередКомпоновкойМакета",         			Ложь);
	ПараметрыПоУмолчанию.Вставить("ДанныеРасшифровки",              			Истина);
	ПараметрыПоУмолчанию.Вставить("ПослеКомпоновкиМакета",          			Ложь);
	ПараметрыПоУмолчанию.Вставить("ВнешниеНаборыДанных",         				Ложь);
	ПараметрыПоУмолчанию.Вставить("ПриВыводеПодвала",            				Ложь);
	ПараметрыПоУмолчанию.Вставить("ПередВыводомЭлементаРезультата", 			Ложь);
	ПараметрыПоУмолчанию.Вставить("ПослеВыводаРезультата",          			Ложь);
	ПараметрыПоУмолчанию.Вставить("ПривилегированныйРежим",        				Истина);
	ПараметрыПоУмолчанию.Вставить("ФиксированныйМакетЗаголовкаИПодвала",        Ложь);

	Для каждого Параметр Из ПараметрыПоУмолчанию Цикл
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыИсполненияОтчета, "Использовать" + Параметр.Ключ, Неопределено) = Неопределено Тогда
			ПараметрыИсполненияОтчета.Вставить("Использовать" + Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыИсполненияОтчета, "ПроверкаИтогов", Неопределено) = Неопределено Тогда
		ПараметрыИсполненияОтчета.Вставить("ПроверкаИтогов", Ложь);
	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки")
		И ПараметрыОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
		ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки = ПараметрыОтчета.ИспользоватьДанныеРасшифровки;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыИсполненияОтчета, "МинимальнаяШиринаЗаголовка", Неопределено) = Неопределено Тогда
		ПараметрыИсполненияОтчета.Вставить("МинимальнаяШиринаЗаголовка", 0);
	КонецЕсли;
	
	Возврат ПараметрыИсполненияОтчета;
	
КонецФункции

// Выводит заголовок отчета из макета с установленным собственным форматом строк.
// Установленный собственный формат строк позволяет повысить визуальную привлекательность отчета на печати 
// или на экране в программе, но некрасиво экспортируется в некоторые другие программы работы с электронными
// таблицами, что затрудняет аналитическую работу с данными отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - Организация, по которой формируется отчет.
//		* ВключатьОбособленныеПодразделения - Булево - Признак вывод данным по обособленным подразделениям.
//		* ИдентификаторОтчета - Строка - Имя отчета.
//		* НаборПоказателей - Массив - Массив строк с именам выводимых показателей отчета (опционально).
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Подразделение, по которому выводятся данные (опционально).
//		* ВыводитьЕдиницуИзмерения - Булево - Признак необходимости вывода единицы измерения (опционально).
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиЗаголовокОтчетаФиксированныйМакет(ПараметрыОтчета, КомпоновщикНастроек, Результат)
	
	ОбластиЗаголовка = ОбластиЗаголовкаОтчета();
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиФиксированныйМакет");
	
	ОбластиЗаголовка.Заголовок                  = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластиЗаголовка.ОписаниеНастроек           = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластиЗаголовка.Организация                = Макет.ПолучитьОбласть("Организация");
	ОбластиЗаголовка.ОписаниеЕдиницыИзмерения   = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
	ОбластиЗаголовка.ВыравниватьНастройкиИОтбор = Истина;
	
	ВывестиЗаголовокОтчетаПоМакету(ОбластиЗаголовка, ПараметрыОтчета, КомпоновщикНастроек, Результат);
	
КонецПроцедуры

// Выравнивает область настроек и отбора по ширине отчета.
//
// Параметры:
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВыровнятьНастройкиИОтбор(Результат, МинимальнаяШиринаЗаголовка)
	
	ОбластьНастройкиИОтбор = Результат.Области.Найти("НастройкиИОтбор");
	Если ОбластьНастройкиИОтбор <> Неопределено Тогда
		КонечнаяКолонкаОбласти = Макс(Результат.ШиринаТаблицы, МинимальнаяШиринаЗаголовка);
		Для НомерСтрокиОбласти = ОбластьНастройкиИОтбор.Верх По ОбластьНастройкиИОтбор.Низ Цикл
			СтрокаОбласти = Результат.Область(НомерСтрокиОбласти, 1, НомерСтрокиОбласти, КонечнаяКолонкаОбласти);
			СтрокаОбласти.ПоВыделеннымКолонкам = Истина;
			СтрокаОбласти.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выводит подвал отчета из макета с установленным собственным форматом строк.
// Установленный собственный формат строк позволяет повысить визуальную привлекательность отчета на печати 
// или на экране в программе, но некрасиво экспортируется в некоторые другие программы работы с электронными
// таблицами, что затрудняет аналитическую работу с данными отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ОтветственноеЛицо - Перечисления.ОтветственныеЛицаОрганизаций - Вид ответственного лица.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ВывестиПодвалОтчетаФиксированныйМакет(ПараметрыОтчета, КомпоновщикНастроек, Результат) 
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиФиксированныйМакет");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	// Ответственное лицо
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо")
		И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		
		ОбластьПодписи.Параметры.Заполнить(ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета));		
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
			
КонецПроцедуры

Процедура ДополнитьКолонкуДоМинимальнойШирины(ТабличныйДокумент, НомерСтроки, НомерКолонки, 
	ОбластьКолонкаРазделитель, МинимальнаяШиринаКолонки)
	
	ШиринаКолонки = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).ШиринаКолонки;
	
	Пока ШиринаКолонки < МинимальнаяШиринаКолонки Цикл
		
		ШиринаРазделителя = ПрисоединитьКолонкуОбластиИВосстановитьШирину(ТабличныйДокумент,
			НомерСтроки, НомерКолонки, ОбластьКолонкаРазделитель);
		
		ШиринаКолонки = ШиринаКолонки + ШиринаРазделителя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисоединитьКолонкуСРазделителями(ТабличныйДокумент, НомерСтроки, НомерКолонки, 
	ПрисоединяемаяОбласть, ОбластьКолонкаРазделитель, МинимальнаяШиринаКолонки)
	
	ПрисоединитьКолонкуОбластиИВосстановитьШирину(ТабличныйДокумент, НомерСтроки, НомерКолонки, ПрисоединяемаяОбласть);
	
	ДополнитьКолонкуДоМинимальнойШирины(ТабличныйДокумент, НомерСтроки, НомерКолонки, 
		ОбластьКолонкаРазделитель, МинимальнаяШиринаКолонки);
	
КонецПроцедуры

Функция ПрисоединитьКолонкуОбластиИВосстановитьШирину(ТабличныйДокумент, НомерСтроки, НомерКолонки, ПрисоединяемаяОбласть)
	
	НомерКолонки = НомерКолонки + 1;
	
	ОбластьКолонки = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
	
	ШиринаКолонкиДо = ОбластьКолонки.ШиринаКолонки;
	
	ТабличныйДокумент.Присоединить(ПрисоединяемаяОбласть);
	
	ОбластьКолонки.ШиринаКолонки = ШиринаКолонкиДо;
	
	Возврат ШиринаКолонкиДо;
	
КонецФункции

Функция ОбластиЗаголовкаОтчета()
	ОбластиЗаголовкаОтчета = Новый Структура(
		"Заголовок,
		|ОписаниеНастроек,
		|Организация,
		|ОписаниеЕдиницыИзмерения,
		|ВыравниватьНастройкиИОтбор");
	Возврат ОбластиЗаголовкаОтчета;
КонецФункции

Процедура ВывестиЗаголовокОтчетаПоМакету(ОбластиЗаголовка, ПараметрыОтчета, КомпоновщикНастроек, Результат)
	
	ОбластьЗаголовок        = ОбластиЗаголовка.Заголовок;
	ОбластьОписаниеНастроек = ОбластиЗаголовка.ОписаниеНастроек;
	ОбластьОрганизация      = ОбластиЗаголовка.Организация;
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		КонецПериода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "КонецПериода", '00010101');
		ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация,
				ПараметрыОтчета.ВключатьОбособленныеПодразделения, КонецПериода);
		// В веб-клиенте может обрезаться заголовок отчета, если название организации короткое.
		// Дополним его пробелами справа
		Если СтрДлина(ТекстОрганизация) < 100 Тогда
			ТекстОрганизация = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ТекстОрганизация, 100, " ", "Справа");
		КонецЕсли;
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	
	НачалоНастройкиИОтбор = Результат.ВысотаТаблицы + 1;
	КонецНастройкиИОтбор = 0;
	
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		
		Результат.Вывести(ОбластьОписаниеНастроек);
		КонецНастройкиИОтбор = Результат.ВысотаТаблицы;
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = ОписаниеОтборовОтчета(ПараметрыОтчета, КомпоновщикНастроек);
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		
		Результат.Вывести(ОбластьОписаниеНастроек);
		КонецНастройкиИОтбор = Результат.ВысотаТаблицы;
	КонецЕсли;
	
	СкрытьНастройкиОтчета = Новый Структура;
	СкрытьНастройкиОтчета.Вставить("ОборотноСальдоваяВедомость", Истина);
	СкрытьНастройкиОтчета.Вставить("КарточкаСчета",              Истина);
	СкрытьНастройкиОтчета.Вставить("КарточкаСубконто",           Истина);
	СкрытьНастройкиОтчета.Вставить("ОтчетПоПроводкам",           Истина);
	СкрытьНастройкиОтчета.Вставить("Продажи",                    Истина);
	
	Если Не СкрытьНастройкиОтчета.Свойство(ПараметрыОтчета.ИдентификаторОтчета) Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
			КонецНастройкиИОтбор = Результат.ВысотаТаблицы;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластиЗаголовка.ВыравниватьНастройкиИОтбор И КонецНастройкиИОтбор > 0 Тогда
		Результат.Область(НачалоНастройкиИОтбор,,КонецНастройкиИОтбор).Имя = "НастройкиИОтбор";
	КонецЕсли;
	
	// Единица измерения
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ВыводитьЕдиницуИзмерения", Ложь) Тогда
		Результат.Вывести(ОбластиЗаголовка.ОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// Возвращает фрагмент текста из строки, содержащийся между указанными строковыми маркерами.
//
// Параметры:
//	Текст - Строка - Исходный текст.
//	МаркерНачало - Строка - Маркер начала для выделения фрагмента.
//	МаркерКонец - Строка - Маркер окончания для выделения фрагмента.
//
// Возвращаемое значение:
//	Строка - Фрагмент текста между маркерами.
//
Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец) Экспорт
	
	ПозицияМаркерНачало = СтрНайти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = СтрНайти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции

// Возвращает строковый идентификатор отчета.
//
// Параметры:
//	ОтчетОбъект - ОтчетОбъект.* - Отчет, для которого требуется получить идентификатор.
//
// Возвращаемое значение:
//	Строка - Идентификатор отчета.
//
Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

// Возвращает количество показателей, выводимых в отчет.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи вида "ПоказательБУ", "ПоказательНУ" и др.
//
// Возвращаемое значение:
//	Число - Количество включенных показателей в отчете.
//
Функция КоличествоПоказателей(ПараметрыОтчета) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

// Создает и заполняет настройки для новой строки группировки СКД.
//
// Параметры:
//	ПолеВыбраннойГруппировки - Структура - Описание группировки, содержит ключи:
//		* Поле - Строка - Имя поля группировки.
//		* ТипГруппировки - Число - Задает тип группировки: 1 - Иерархия, 2 - Только иерархия, иначе - Элементы.
//	Группировка - ГруппировкаТаблицыКомпоновкиДанных - Группировка, в которой добавляется новая строка.
//
Процедура ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка) Экспорт
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
	Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
	Иначе
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	КонецЕсли;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

// Добавляет в настройки СКД все поля группировки из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Группировка - ТабличнаяЧасть - Таблица Группировки отчета.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		СтруктураНастроек = КомпоновщикНастроек.Настройки.Структура;
	Иначе
		СтруктураНастроек = КомпоновщикНастроек;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		Если ЭлементСтруктуры.Имя <> "Группировка"
		 Или ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		ПерваяГруппировка = Истина;

		// Заполнить все поля группировки.
		Группировка = ЭлементСтруктуры;
		Родитель = Группировка.Родитель;
		Индекс = Родитель.Структура.Индекс(Группировка);
		Родитель.Структура.Удалить(Группировка);
		Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
			
			Если Не ПолеВыбраннойГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;

			Если ПерваяГруппировка Тогда
				Группировка = Родитель.Структура.Вставить(Индекс, Тип("ГруппировкаКомпоновкиДанных"));
				ПерваяГруппировка = Ложь;
			Иначе
				Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			
			ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

// Добавляет в настройки СКД все дополнительные поля из табличной части отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ДополнительныеПоля - ТабличнаяЧасть - Таблица Группировки отчета.
//		* РазмещениеДополнительныхПолей - Число - Способ размещения дополнительных полей.
//			Если равно 0, то вместе с владельцем, если 1, то отдельно.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//
Процедура ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.РазмещениеДополнительныхПолей = 0 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
	ИначеЕсли ПараметрыОтчета.РазмещениеДополнительныхПолей = 1 Тогда
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	
	Для Каждого ПолеГруппировки Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		
		Если Не ПолеГруппировки.Использование Тогда
			Продолжить;
		КонецЕсли;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПолеГруппировки.Поле);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет группировку по периоду в отчет.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* Периодичность - Число - Определяет периодичность формирования отчета.
//	Структура - ГруппировкаКомпоновкиДанных, ГруппировкаТаблицыКомпоновкиДанных - Коллекция полей,
//		системы компоновки данных, в которую добавляется группировка периодичности.
//
Процедура ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура) Экспорт
	
	Если ПараметрыОтчета.Периодичность <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Структура = Структура.Структура.Добавить();
	КонецЕсли;
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период"));		
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
	Если ПараметрыОтчета.Периодичность = 2 Тогда
		// Убираем лишние строки с незаполненным регистратором.
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		
	ИначеЕсли ПараметрыОтчета.Периодичность >= 6 Тогда
		// Убираем лишние строки: начальные и конечные остатки при отсутствии оборотов.
		
		ГруппаОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтбора.Представление = НСтр("ru = 'Исключение пустых оборотов'");
		ГруппаОтбора.Использование = Истина;
		
		Для каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если Не ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
		
		КонецЦикла; 

		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		
	КонецЕсли;
	
КонецПроцедуры


// Ищет в выборке первую таблицу компоновки данных
//
// Параметры:
//  ТелоМакетаКомпоновки - ТелоМакетаКомпоновкиДанных - Тело макета компоновки данных.
//
// Возвращаемое значение:
//  ТаблицаМакетаКомпоновкиДанных - найденную таблицу.
//
Функция НайтиТаблицуМакетаКомпоновкиДанных(ТелоМакетаКомпоновки) Экспорт

	Для Каждого ТекущаяТаблицаМакетаКомпоновкиДанных Из ТелоМакетаКомпоновки Цикл
		
		Если ТипЗнч(ТекущаяТаблицаМакетаКомпоновкиДанных) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТекущаяТаблицаМакетаКомпоновкиДанных;
	
КонецФункции

// Устанавливает настройки компоновщика отчета по умолчанию.
//
// Параметры:
//	ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Заполняет табличную часть "ДополнительныеПоля" отчета из настроек компоновщика.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек СКД.
//	ДополнительныеПоля - ТабличнаяЧасть - Табличная часть отчета "Дополнительные поля".
//	Группировка - ТабличнаяЧасть - Табличная часть отчета "Группировка".
//
Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка) Экспорт
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И СтрНайти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текстовое представление для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации, Неопределено - Организация, для которой сформировать представление.
//	ВключатьОбособленныеПодразделения - Булево - Признак включения слов "с обособленными подразделениями" в текст.
//	Период - Дата - дата, на которую нужно получить значения периодических реквизитов
//
// Возвращаемое значение:
//	Строка - Представление организации.
//
Функция ПолучитьТекстОрганизация(Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь, Период = '00010101') Экспорт
	
	ТекстОрганизации = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ВключатьОбособленныеПодразделения Тогда
			ТекстОрганизации = ПолучитьТекстОбособленныхПодразделений(Организация, Период);
		Иначе
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Период);
			ТекстОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
			Если ПустаяСтрока(ТекстОрганизации) Тогда
				ТекстОрганизации = СведенияОбОрганизации.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОрганизации;
	
КонецФункции

// Возвращает представление организации с обособленными подразделениями.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой сформировать представление.
//	Период - Дата - дата, на которую нужно получить значения периодических реквизитов
//
// Возвращаемое значение:
//	Строка - Представление организации.
//
Функция ПолучитьТекстОбособленныхПодразделений(Организация, Период = '00010101') Экспорт
	
	ТекстОрганизации = "";
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Период);
	ТекстОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Если ПустаяСтрока(ТекстОрганизации) Тогда
		ТекстОрганизации = СведенияОбОрганизации.Представление;
	КонецЕсли;
	
	ТекстОрганизации = ТекстОрганизации + " " + НСтр("ru = 'с обособленными подразделениями'");
	
	Возврат ТекстОрганизации;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
// 

// Возвращает сумму выделенных ячеек табличного документа.
//
// Параметры:
//	Результат - ТабличныйДокумент - Табличный документ, содержащий ячейки для суммирования.
//	КэшВыделеннойОбласти - Структура - Содержит ячейки выделенной области.
//
// Возвращаемое значение:
//	Число - Сумма значений ячеек.
//
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							ЧислоВЯчейке = Число(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
							Сумма = Сумма + ЧислоВЯчейке;
						КонецЕсли;
					КонецЕсли;
				Исключение
					// Запись в журнал регистрации не требуется.
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

// Формирует отчет по переданным параметрам и помещает его результат во временное хранилище.
//
// Параметры:
//	ПараметрыОтчета - Структура - Содержит ключи:
//		* ИдентификаторОтчета - Строка - Имя отчета, как оно указано в метаданных.
//		* СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//		* НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отчета.
//	АдресХранилища - Строка - Адрес временного хранилища, в которое необходимо поместить результат.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	РезультатФормированияОтчета = ПодготовитьОтчет(ПараметрыОтчета);
	
	ПоместитьВоВременноеХранилище(РезультатФормированияОтчета, АдресХранилища);
	
КонецПроцедуры

// Возвращает последний использовавшийся тип файла, в котором сохранялся табличный документ отчета.
//
// Возвращаемое значение:
//   ТипФайлаТабличногоДокумента - для передачи в метод Записать() табличного документа.
//
Функция ТипФайлаТабличногоДокументаПоУмолчанию() Экспорт
	
	ТипФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"ДиалогВыбораФайла", "ТипФайлаТабличногоДокумента", ТипФайлаТабличногоДокумента.XLS);
	
	Возврат ТипФайла;
	
КонецФункции

// Запоминает последний использовавшийся тип файла, в котором сохранялся табличный документ отчета.
//
// Параметры:
//  ТипФайла     - ТипФайлаТабличногоДокумента - сохраняемое значение.
//
Процедура СохранитьТипФайлаТабличногоДокументаПоУмолчанию(ТипФайла) Экспорт
	
	ОписаниеНастройки = Новый ОписаниеНастроек;
	ОписаниеНастройки.КлючОбъекта   = "ДиалогВыбораФайла";
	ОписаниеНастройки.КлючНастроек  = "ТипФайлаТабличногоДокумента";
	ОписаниеНастройки.Представление = НСтр("ru = 'Значение по-умолчанию для формата в диалоге выбора файла при сохранении отчета'");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ОписаниеНастройки.КлючОбъекта, ОписаниеНастройки.КлючНастроек, ТипФайла, ОписаниеНастройки); 
	
КонецПроцедуры

// Преобразует табличный документ в двоичные данные и возвращает адрес временного хранилища, куда они помещены.
//
// Параметры:
//  СохраняемыйДокумент - ТабличныйДокумент - преобразуемый в двоичные данные.
//  ТипФайла     - ТипФайлаТабличногоДокумента - в какой формат файла сохранить табличный документ.
//
// Возвращаемое значение:
//   Строка      - адрес временного хранилища, содержащего объект типа ДвоичныеДанные.
//
Функция ДвоичныеДанныеИзТабличногоДокумента(СохраняемыйДокумент, ТипФайла) Экспорт

	ВозможностьЗаписиВПоток = Новый Соответствие;
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.DOCX,  Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.MXL,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.ODS,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.PDF,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.TXT,   Истина);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.HTML5, Ложь);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.XLS,   Ложь);
	ВозможностьЗаписиВПоток.Вставить(ТипФайлаТабличногоДокумента.XLSX,  Ложь);
	
	ПреобразоватьЧерезПоток = ВозможностьЗаписиВПоток[ТипФайла];
	Если ПреобразоватьЧерезПоток = Неопределено Тогда

		// Формат, который был выбран пользователем для сохранения табличного документа, определяется по расширению файла.
		// Поэтому из набора значений перечисления ТипФайлаТабличногоДокумента используются только значения, имеющие различные
		// расширения файла. См. БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКакПриПодключенииРасширенияРаботыСФайлами()
		
		ТекстИсключения = НСтр("ru = 'Сохранение результата отчета в табличный документ формата %1 не предусмотрено'");
		ВызватьИсключение СтрШаблон(ТекстИсключения, ТипФайла);

	КонецЕсли;
		
	Если ПреобразоватьЧерезПоток Тогда
		
		Поток = Новый ПотокВПамяти;
		СохраняемыйДокумент.Записать(Поток, ТипФайла);
		ДвоичныеДанныеФайла = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
	Иначе

		ИмяФайла = ПолучитьИмяВременногоФайла();
		СохраняемыйДокумент.Записать(ИмяФайла, ТипФайла);
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
		
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла)
	
КонецФункции

// Выполняет дополнительную обработку результата отчета после его формирования:
//	- настраивает параметры печати;
//	- устанавливает колонтитулы.
//
// Параметры:
//	ИдентификаторОтчета - Строка - Имя отчета.
//	Результат - ТабличныйДокумент - Результат формирования отчета.
//
Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	МаксимумТочек = 9;
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) <> Тип("Диаграмма") Тогда
				Продолжить;
			КонецЕсли;
			
			Диаграмма = Рисунок.Объект;
			
			Диаграмма.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > МаксимумТочек);
			Диаграмма.ОбластьПостроения.ШкалаЗначений.ФорматПодписей = "ЧГ=3,0";
			Диаграмма.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
			
			Диаграмма.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы =
				ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
			Диаграмма.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
			Диаграмма.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
			Диаграмма.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			
			Если ЗначениеЗаполнено(Диаграмма.ОбластьПостроения.ШкалаЗначений.ТекстЗаголовка) Тогда
				Диаграмма.ОбластьЗаголовка.Расположение = РасположениеОбластиЗаголовкаДиаграммы.Верх;
				Диаграмма.ОбластьЗаголовка.Текст = Диаграмма.ОбластьПостроения.ШкалаЗначений.ТекстЗаголовка;
				Диаграмма.ОбластьЗаголовка.Шрифт = Новый Шрифт(, , Истина);
			КонецЕсли;
		Исключение
			// Запись в журнал регистрации не требуется.
		КонецПопытки;
	КонецЦикла;
	
	// Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
	УправлениеКолонтитулами.УстановитьКолонтитулы(
		Результат, Метаданные.Отчеты[ИдентификаторОтчета].Синоним, Пользователи.ТекущийПользователь());

КонецПроцедуры

// Проверяет необходимость выполнения обработки проверки заполнения.
// 
// Параметры:
//  ОтчетОбъект - ОтчетОбъект.* - Проверяемый отчет.
// 
// Возвращаемое значение:
//  Булево - Истина, если проверка не требуется, Ложь в противном случае.
//
Функция ПропуститьПроверкуЗаполнения(ОтчетОбъект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОтчетОбъект, "КомпоновщикНастроек") Тогда
		
		ДополнительныеСвойства = ОтчетОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
		
		Если ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗаполнения")
			И ДополнительныеСвойства.ПропуститьПроверкуЗаполнения Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признаки проверки отчета перед формирование по умолчанию.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* КорректностьПериода - Булево - Признак проверки периода отчета.
//		* ВыборПоказателя - Булево - Признак необходимости проверять выбранные показатели отчета.
//		* СписокВидовСубконто - Булево - Признак необходимости проверять список видов субконто.
//
Функция СтандартныеПроверкиЗаполнения() Экспорт
	
	Проверки = Новый Структура;
	Проверки.Вставить("КорректностьПериода", Истина);
	Проверки.Вставить("ВыборПоказателя",     Истина);
	Проверки.Вставить("СписокВидовСубконто", Ложь);
	Возврат Проверки;

КонецФункции

// Формирует отчет по переданным параметрам.
//
// Параметры:
//	ПараметрыОтчета - Структура - содержит ключи:
//		* ИдентификаторОтчета - Строка - Имя отчета, как оно указано в метаданных.
//		* СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема отчета.
//		* НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отчета.
//
// Возвращаемое значение:
//   Структура   - содержит ключи:
//      * Результат - ТабличныйДокумент - сформированный отчет.
//      * ДанныеРасшифровки - Строка - адрес во временном хранилище, куда помещены данные расшифровок.
//      * КонтрольноеСоотношениеИтоговВыполняется - Булево - Ложь, если проверка проводилась и была неуспешна; иначе Истина.
//
Функция ПодготовитьОтчет(ПараметрыОтчета) Экспорт
	Перем ДанныеРасшифровкиОбъект;	
	
	Результат = Новый ТабличныйДокумент;
	
	РезультатФормированияОтчета = Новый Структура;
	РезультатФормированияОтчета.Вставить("Выполнено",         Истина);
	РезультатФормированияОтчета.Вставить("Результат",         Результат);
	РезультатФормированияОтчета.Вставить("ДанныеРасшифровки", ПараметрыОтчета.ДанныеРасшифровки);
	РезультатФормированияОтчета.Вставить("КонтрольноеСоотношениеИтоговВыполняется", Истина);
	РезультатФормированияОтчета.Вставить("КраткоеПредставлениеОшибки",   "");
	РезультатФормированияОтчета.Вставить("ПодробноеПредставлениеОшибки", "");
	
	МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	ПараметрыИсполненияОтчета = ПолучитьПараметрыИсполненияОтчета(ПараметрыОтчета, МенеджерОтчета);
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	// Определим необходимость вывода заголовка.
	ВыводитьРаздел = Ложь;
	Если ПараметрыОтчета.Свойство("ВыводитьЗаголовок", ВыводитьРаздел) Тогда
	ИначеЕсли КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок", ВыводитьРаздел) Тогда
	Иначе
		ВыводитьРаздел = Истина;
	КонецЕсли;
	Если ВыводитьРаздел Тогда
		// Если нет прямого указания не выводить, то выводим заголовок.
		Если ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка Тогда
			МенеджерОтчета.ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		ИначеЕсли ПараметрыИсполненияОтчета.ИспользоватьФиксированныйМакетЗаголовкаИПодвала Тогда
			ВывестиЗаголовокОтчетаФиксированныйМакет(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;

	КонецЕсли;
	
	Если ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета Тогда
		МенеджерОтчета.ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных, КомпоновщикНастроек);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить();
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Попытка
		
		// В качестве схемы компоновки будет выступать схема самого отчета.
		// В качестве настроек отчета - текущие настройки отчета.
		// Данные расшифровки будем помещать в ДанныеРасшифровки.
		Если ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки Тогда 
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета);
		КонецЕсли;
		
		// Вызываем событие отчета
		Если ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета Тогда
			МенеджерОтчета.ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
		КонецЕсли;

		Если ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных Тогда
			ВнешниеНаборыДанных = МенеджерОтчета.ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);
		КонецЕсли;
	
		// Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
		КонецЕсли;	
		
		// Создадим и инициализируем процессор вывода результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		// Перед началом вывода установим привилегированный режим
		Если ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
	
		// Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		
		Если ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата Тогда
			// Основной цикл вывода отчета
			ЭлементРезультата = ПроцессорКомпоновки.Следующий();
			Пока ЭлементРезультата <> Неопределено Цикл
				
				ПропуститьЭлемент = Ложь;
				МенеджерОтчета.ПередВыводомЭлементаРезультата(
					ПараметрыОтчета,
					МакетКомпоновки,
					ДанныеРасшифровкиОбъект,
					ЭлементРезультата,
					ПропуститьЭлемент);
				
				Если Не ПропуститьЭлемент Тогда // Элемент получен, выведем его при помощи процессора вывода.
					ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				КонецЕсли;	

				// Получим следующий элемент результата компоновки.
				ЭлементРезультата = ПроцессорКомпоновки.Следующий();
				
			КонецЦикла;
			
			// Завершение вывода отчета
			ПроцессорВывода.ЗакончитьВывод();

		Иначе

			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

		КонецЕсли;
		
		// Проверим, нет ли очевидных расхождений в общих итогах, вызванных повреждением информационной базы.
		Если ПараметрыИсполненияОтчета.ПроверкаИтогов Тогда
			МенеджерОтчета.ПроверитьКорректностьИтогов(ПараметрыОтчета, Результат);
		КонецЕсли;
		
		// После окончания процессором вывода отчета, поместим расшифровку во временное хранилище.
		ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект);
		РезультатФормированияОтчета.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(
			ДанныеДляРасшифровки, РезультатФормированияОтчета.ДанныеРасшифровки);
		
		// Отключаем привилегированный режим если он использовался
		Если ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
		// Записываем в журнал регистрации
		Событие = НСтр("ru = 'Ошибка формирования отчета'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			Событие,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета],
			, // Данных нет
			ПодробноеПредставлениеОшибки);
		
		// Информируем пользователя файловой версии
		Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отчет не сформирован! %1'"), ИнформацияОбОшибке.Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		РезультатФормированияОтчета.Выполнено                    = Ложь;
		РезультатФормированияОтчета.КраткоеПредставлениеОшибки   = ТекстСообщения;
		РезультатФормированияОтчета.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки;
		
		Возврат РезультатФормированияОтчета;

	КонецПопытки;

	// Определим необходимость вывода подвала.
	Если ПараметрыОтчета.Свойство("ВыводитьПодвал", ВыводитьРаздел) Тогда
	ИначеЕсли КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал", ВыводитьРаздел) Тогда
	Иначе
		ВыводитьРаздел = Истина;
	КонецЕсли;
	Если ВыводитьРаздел Тогда
		// Если нет прямого запрета выводить подвал, то выводим его.
		Если ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала Тогда 
			МенеджерОтчета.ПриВыводеПодвала(ПараметрыОтчета, Результат);
		ИначеЕсли ПараметрыИсполненияОтчета.ИспользоватьФиксированныйМакетЗаголовкаИПодвала Тогда
			ВывестиПодвалОтчетаФиксированныйМакет(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		Иначе
			ВывестиПодвалОтчета(ПараметрыОтчета, Результат);
		КонецЕсли;

	КонецЕсли;
	
	ВыровнятьНастройкиИОтбор(Результат, ПараметрыИсполненияОтчета.МинимальнаяШиринаЗаголовка);
	
	Если ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата Тогда
		МенеджерОтчета.ПослеВыводаРезультата(ПараметрыОтчета, Результат);
	Иначе
		ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	КонецЕсли;

	Если ПараметрыИсполненияОтчета.ПроверкаИтогов
	   И ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства.Свойство("КонтрольноеСоотношениеИтоговВыполняется") Тогда
		
		РезультатФормированияОтчета.КонтрольноеСоотношениеИтоговВыполняется =
			ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства.КонтрольноеСоотношениеИтоговВыполняется;
			
	КонецЕсли;

	Возврат РезультатФормированияОтчета;
	
КонецФункции

// Вызывается из обработчика события "ПриКомпоновкеРезультата".
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - Объект отчета.
//  ДокументРезультат - ТабличныйДокумент - Табличный документ для вывода результата формирования отчета.
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки.
//
Процедура ОбработкаСобытияПриКомпоновкеРезультата(ОтчетОбъект, ДокументРезультат, ДанныеРасшифровки) Экспорт
	
	ДокументРезультат.Очистить();
	
	// Параметры формирования отчета.
	ПараметрыОтчета = ЗаполнитьПараметрыОтчетаИзНастроекКомпоновщика(ОтчетОбъект, ОтчетОбъект.КомпоновщикНастроек);
	
	Если ПараметрыОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование отчета и помещение результата во временное хранилище.
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	
	// Получение результатов формирования и копирование результатов в параметр "ДокументРезультат".
	ДанныеОтчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДокументРезультат.Вывести(ДанныеОтчета.Результат);
	
	ДанныеРасшифровки = ДанныеОтчета.ДанныеРасшифровки;
	
	// Для рассылки отчета. Отчет рассылается всегда, даже если он пустой.
	ДопСвойства = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("ОтчетПустой", Ложь);
	
	// Для рассылки отчета. Используется для заполнения параметров шаблонов текста письма, отправляемого в рассылке.
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОтчетОбъект.Метаданные().ПолноеИмя());
	ДопСвойства.Вставить("ПредставлениеОтчета", МенеджерОтчета.ПолучитьТекстЗаголовка(ПараметрыОтчета));
	
КонецПроцедуры

// Возвращает копию описания макета схемы компоновки данных.
// 
// Параметры:
//	ОписаниеМакета - ОписаниеМакетаСхемыКомпоновкиДанных - Исходное описание.
//	ФормаЗаписи - Строка - Форма записи описания макета в XML.
//
// Возвращаемое значение:
//	ОписаниеМакетаСхемыКомпоновкиДанных - Копия исходного описания макета.
//
Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

// Описание результата формирования отчета.
// 
// Возвращаемое значение:
//  Структура - Результат формирования отчета:
// * Выполнено - Булево.
// * Результат - ТабличныйДокумент. 
// * ДанныеРасшифровки .
// * КонтрольноеСоотношениеИтоговВыполняется - Булево. 
// * КраткоеПредставлениеОшибки - Строка.
// * ПодробноеПредставлениеОшибки - Строка.
Функция РезультатФормированияОтчета() Экспорт

	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("Выполнено",                    Истина);
	РезультатФормирования.Вставить("Результат",                    Новый ТабличныйДокумент);
	РезультатФормирования.Вставить("ДанныеРасшифровки");
	РезультатФормирования.Вставить("КонтрольноеСоотношениеИтоговВыполняется", Истина);
	РезультатФормирования.Вставить("КраткоеПредставлениеОшибки",   "");
	РезультатФормирования.Вставить("ПодробноеПредставлениеОшибки", "");
	
	Возврат РезультатФормирования;
	
КонецФункции

// Вызывается из обработчика события "ПриСохраненииПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - Сохраняемые настройки.
//	СохранятьТолькоРеквизиты - Булево - Признак сохранения только значений реквизитов отчета без настроек СКД.
//
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, СохранятьТолькоРеквизиты = Ложь) Экспорт
	
	ОтчетОбъект = ФормаОтчета.РеквизитФормыВЗначение("Отчет");
	
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	Если НЕ СохранятьТолькоРеквизиты Тогда
		ТекущиеНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	КонецЕсли;

	// Сохранение реквизитов отчета
	ДополнительныеСвойства = Новый Структура;
	Для Каждого Реквизит Из ОтчетМетаданные.Реквизиты Цикл
		Если Реквизит.Имя <> "РежимРасшифровки"
			И Реквизит.Имя <> "СписокСформированныхЛистов" Тогда
			ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОтчетМетаданные.ТабличныеЧасти Цикл
		ДополнительныеСвойства.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;
	
	// Сохранение реквизитов формы.
	// Одноименные реквизиты отчета имеют больший приоритет.
	ДополнитьЗначениямиРеквизитовФормы(ДополнительныеСвойства, ФормаОтчета, СохраняемыеРеквизитыФормы());
	
	Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ПанельНастроекСкрытаАвтоматически")
			И Настройки.ДополнительныеСвойства.ПанельНастроекСкрытаАвтоматически = Истина Тогда
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", Истина);
		Иначе
			ДополнительныеСвойства.Вставить("ВидимостьПанелиНастроек", ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним представление отборов для показа при открытии отчета.
	Если (Не ДополнительныеСвойства.Свойство("РежимРасшифровки") Или Не ДополнительныеСвойства.РежимРасшифровки) Тогда
		
		ПараметрыОтчета = Новый Структура;
		Если ДополнительныеСвойства.Свойство("Подразделение") Тогда
			ПараметрыОтчета.Вставить("Подразделение", ДополнительныеСвойства.Подразделение);
		ИначеЕсли ДополнительныеСвойства.Свойство("ПодразделениеОрганизации") Тогда
			ПараметрыОтчета.Вставить("Подразделение", ДополнительныеСвойства.ПодразделениеОрганизации);
		КонецЕсли;
		ТекстОтбор = ОписаниеОтборовОтчета(ПараметрыОтчета, ОтчетОбъект.КомпоновщикНастроек);
		ДополнительныеСвойства.Вставить("ОписаниеОтборовОтчета", ТекстОтбор);
		
	КонецЕсли;
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(ДополнительныеСвойства));
	
КонецПроцедуры

// Дополняет структуру значениями реквизитов формы.
// Значения реквизитов, уже имеющихся в структуре, имеют больший приоритет. 
//
// Параметры:
//  Данные			 - Структура - дополняемая коллекция.
//  Форма			 - ФормаКлиентскогоПриложения - форма отчета.
//  ИменаРеквизитов	 - Массив - имена реквизитов, могут отсутствовать на форме.
//
Процедура ДополнитьЗначениямиРеквизитовФормы(Данные, Форма, ИменаРеквизитов)
	
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
		
		Если Данные.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
			Данные.Вставить(ИмяРеквизита, Форма[ИмяРеквизита]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Содержит имена реквизитов формы, сохраняемых в составе настроек.
// 
// Возвращаемое значение:
//  Массив - имена реквизитов формы.
//
Функция СохраняемыеРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("НачалоПериода");
	ИменаРеквизитов.Добавить("КонецПериода");
	
	ИменаРеквизитов.Добавить("ВыводитьЗаголовок");
	ИменаРеквизитов.Добавить("ВыводитьПодвал");
	ИменаРеквизитов.Добавить("ВыводитьЕдиницуИзмерения");
	ИменаРеквизитов.Добавить("ВыводитьДиаграмму");
	ИменаРеквизитов.Добавить("ВыводитьЛегендуДиаграмм");
	ИменаРеквизитов.Добавить("ВыводитьПримечания");
	
	ИменаРеквизитов.Добавить("МакетОформления");
	
	ИменаРеквизитов.Добавить("СкрыватьНастройкиПриФормированииОтчета");
	ИменаРеквизитов.Добавить("СтандартныеГруппировки");
	ИменаРеквизитов.Добавить("ВидПериода");
	
	Возврат ИменаРеквизитов;
	
КонецФункции

Процедура ВывестиОписаниеОтбора(ФормаОтчета, ОписаниеОтбора)
	
	Если ПустаяСтрока(ОписаниеОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	// Если отчет формируется при открытии, то не выводим представление отбора.
	Если ФормаОтчета.Параметры.Свойство("СформироватьПриОткрытии")
		И ФормаОтчета.Параметры.СформироватьПриОткрытии = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Какое-то исключение
	Если БухгалтерскиеОтчеты.ИмяОтчета(ФормаОтчета) = "ОборотноСальдоваяВедомость" Тогда
		Возврат;
	КонецЕсли;
   
	// Проверяем, что есть, куда выводить.
	Если ФормаОтчета.Элементы.Найти("Результат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Занято = ФормаОтчета.Результат.ВысотаТаблицы <> 0
   		Или ФормаОтчета.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения <> ДополнительныйРежимОтображения.Неактуальность;
	Если Занято Тогда
		Возврат;
	КонецЕсли;
	
    // Выводим представление отборов ниже надписи "Отчет не сформирован".
	ОбластьОписания = ФормаОтчета.Результат.Область(9, 1, 9, 2);
	ОбластьОписания.Имя = "ОписаниеОтборовОтчета";
	ОбластьОписания.ВысотаСтроки = 14;
   
	ОбластьОписания = ФормаОтчета.Результат.Область(9, 1);
	ОбластьОписания.Шрифт = Новый Шрифт(ОбластьОписания.Шрифт, , 11);
	ОбластьОписания.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьОписания.Текст = НСтр("ru = 'Отбор:'");
	
	ОбластьОписания = ФормаОтчета.Результат.Область(9, 2);
	ОбластьОписания.Шрифт = Новый Шрифт(ОбластьОписания.Шрифт, , 11);
	ОбластьОписания.Текст = ОписаниеОтбора;
	
КонецПроцедуры

// Выполняет инициализацию компоновщика настроек в форме отчета по переданным настройкам.
//
// Параметры:
//	ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//	Настройки - НастройкиКомпоновкиДанных - Настройки, которые необходимо загрузить в компоновщик.
//
Процедура ПриЗагрузкеПользовательскихНастроекКомпоновщикаНаСервере(ФормаОтчета, Настройки) Экспорт

	// Если настройки не заданы или отчет в режиме расшифровки, загружаем настройки по умолчанию.
	Если Настройки = Неопределено Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиКомпоновщикаПоУмолчанию(ФормаОтчета);
	Иначе 
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Перенос пользовательских настроек в основные
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Очистка пользовательских настроек
		ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает доступное поле по полю компоновки.
//
// Параметры:
//	ПолеКомпоновкиДанных - Строка, ПолеКомпоновкиДанных - Искомое поле.
//	ОбластьПоиска - КомпоновщикНастроекКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных, 
//		НастройкиВложенногоОбъектаКомпоновкиДанных - Коллекция полей для поиска.
//
// Возвращаемое значение:
//	ДоступноеПолеКомпоновкиДанных - Найденное поле или Неопределено.
//
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

// Возвращает массив полей, по которым следует расшифровать отчет.
//
// Параметры:
//	Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных, ДанныеРасшифровкиКомпоновкиДанных - Значения текущей расшифровки.
//	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Коллекция данных расшифровки отчета.
//	ТекущийОтчет - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек отчета.
//	ВключатьРесурсы - Булево - Признак включения в результат полей-ресурсов.
//
// Возвращаемое значение:
//	Массив - Массив значений типа ЗначениеПоляРасшифровкиКомпоновкиДанных.
//
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

// Возвращает параметры расшифровки ячейки отчета.
//
// Параметры:
//	Адрес - Строка - Адрес временного хранилища с данными расшифровки отчета.
//	ИдентификаторОбъекта - Строка - Имя отчета.
//	Расшифровка - Произвольный - Значения полей расшифровки.
//
// Возвращаемое значение:
//	Структура - Содержит ключи (опционально):
//		* ОткрытьОбъект - Булево - Если Истина, то необходимо открыть указанный объект.
//		* Значение - Произвольный - Значение расшифровывающего объекта.
//		* СписокПунктовМеню - СписокЗначений - Пункты меню для отображения выбора режима расшифровки.
//
Функция ПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ДанныеОбъекта = Неопределено;
	ПараметрыРасшифровки = Новый Структура;
	
	Если ИдентификаторОбъекта = Неопределено Тогда
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
		ИдентификаторОбъекта = ДанныеОбъекта.Объект.ИдентификаторОтчета;
	КонецЕсли;
	
	ПараметрыИсполненияОтчета = Отчеты[ИдентификаторОбъекта].ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьРасширенныеПараметрыРасшифровки") 
		И ПараметрыИсполненияОтчета.ИспользоватьРасширенныеПараметрыРасшифровки Тогда
		Отчеты[ИдентификаторОбъекта].ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки);
		
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	Если ДанныеОбъекта = Неопределено Тогда
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
	
		ПоляРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		Если ПоляРасшифровки.Количество() > 0 И ЗначениеЗаполнено(ПоляРасшифровки[0].Значение) Тогда
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение", ПоляРасшифровки[0].Значение);
		КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Вызывается из обработчика ПриСозданииНаСервере формы отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Отказ - Булево - Признак отказа от открытия.
//	СтандартнаяОбработка - Булево - Признак необходимости выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		
	Отчет     = Форма.Отчет;
	Параметры = Форма.Параметры;
	РеквизитыФормы = РеквизитыФормы(Форма);
	
	ИнициализацияФормыОтчета(Отчет, РеквизитыФормы, Форма);
	
	Если Параметры.Свойство("ОткрытьРасшифровку") И Параметры.ОткрытьРасшифровку Тогда
		СтандартнаяОбработка = Ложь;
		ИнициализацияРасшифровкиПоНастройкам(Отчет, Параметры, РеквизитыФормы, Форма);
	ИначеЕсли Параметры.Свойство("ВидРасшифровки") Тогда
		СтандартнаяОбработка = Ложь;
		ИнициализацияРасшифровкиПоВиду(Отчет, Параметры, РеквизитыФормы, Форма);
	КонецЕсли;
	
	БухгалтерскиеОтчеты.УстановитьАктивностьКнопокКоманднойПанели(Форма);
	
	БухгалтерскиеОтчетыПереопределяемый.УдалитьСсылкуНаСправкуИзОписанияФорматированнойСтроки(Форма);
	
КонецПроцедуры


// Отменяет выполнение фоновых заданий по списку идентификаторов.
//
// Параметры:
//	ИдентификаторыОтменяемыхЗаданий - Массив - Содержит идентификаторы фоновых заданий.
//
Процедура ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий) Экспорт
	
	Для каждого ИдентификаторЗадания Из ИдентификаторыОтменяемыхЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьКомпоновщикНастроекСКД(КомпоновщикНастроек, СхемаКомпоновкиДанных, ИмяОтчета)

    Попытка
        КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    Исключение
        ИмяСобытияЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            НСтр("ru = 'Отчеты.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
            ИмяОтчета);
            
        ТекстПредставленияОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации(
            ИмяСобытияЖурнала,
            УровеньЖурналаРегистрации.Ошибка,
            ,
            ,
            ТекстПредставленияОшибки);
        ВызватьИсключение;
    КонецПопытки;

КонецПроцедуры


#КонецОбласти
