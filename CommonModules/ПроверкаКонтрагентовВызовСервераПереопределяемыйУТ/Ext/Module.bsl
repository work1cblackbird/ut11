////////////////////////////////////////////////////////////////////////////////
// Проверка контрагентов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает таблицу счет-фактур, созданных на основании документа
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма документ, чьи счета-фактуры будут получены.
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено   - таблица, содержащая данные о счет-фактурах, выписанных на основании документа.
//
Функция ПолучитьКонтрагентовСчетФактурДокумента(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.Свойство("ДанныеСчетФактур") Тогда
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ДанныеСчетФактур = Неопределено Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			ТаблицаСчетФактур = Новый ТаблицаЗначений;
			ТаблицаСчетФактур.Колонки.Добавить("Дата");
			ТаблицаСчетФактур.Колонки.Добавить("Контрагент");
			ТаблицаСчетФактур.Колонки.Добавить("Ссылка");
			ТаблицаСчетФактур.Колонки.Добавить("ЕстьОшибки");
			ТаблицаСчетФактур.Колонки.Добавить("ТипСчетФактуры");
			
			Для Каждого ЭлементМассива Из Форма.РеквизитыПроверкиКонтрагентов.ДанныеСчетФактур Цикл
				
				НоваяСтрока = ТаблицаСчетФактур.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				
			КонецЦикла;
			
			Возврат ТаблицаСчетФактур;
			
		КонецЕсли;
		
	КонецЕсли;

	ДокументСсылка = Форма.Объект.Ссылка;
	
	ТекстЗапроса = "";
	ТекстОбъединения = "";
	Объединить =
	"
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.Контрагент,
		|	СчетФактураВыданный.Ссылка,
		|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) Дата,
		|	ЛОЖЬ КАК ЕстьОшибки,
		|	ТИПЗНАЧЕНИЯ(СчетФактураВыданный.Ссылка) КАК ТипСчетФактуры
		|ПОМЕСТИТЬ СчетФактураВыданныйВременная
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданный.Проведен
		|	И НЕ СчетФактураВыданный.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|";
		ТекстОбъединения = "ВЫБРАТЬ РАЗЛИЧНЫЕ * ИЗ СчетФактураВыданныйВременная";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураПолученный) Тогда
		ТекстЗапросаСчетФактураПолученный = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Контрагент,
		|	СчетФактураПолученный.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Исправление
		|			ТОГДА НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаИсправления, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ)
		|	КОНЕЦ КАК Дата,
		|	ЛОЖЬ КАК ЕстьОшибки,
		|	ТИПЗНАЧЕНИЯ(СчетФактураПолученный.Ссылка) КАК ТипСчетФактуры
		|ПОМЕСТИТЬ СчетФактураПолученныйВременная
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
		|	И СчетФактураПолученный.Проведен
		|	И НЕ СчетФактураПолученный.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|";
		ТекстОбъединенияЗапросаСчетФактураПолученный = "ВЫБРАТЬ РАЗЛИЧНЫЕ * ИЗ СчетФактураПолученныйВременная";
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСчетФактураПолученный;
			ТекстОбъединения = ТекстОбъединения + Объединить + ТекстОбъединенияЗапросаСчетФактураПолученный;
		Иначе
			ТекстЗапроса = ТекстЗапросаСчетФактураПолученный;
			ТекстОбъединения = ТекстОбъединенияЗапросаСчетФактураПолученный;
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент) Тогда
		ТекстЗапросаСчетФактураПолученныйНА = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Контрагент,
		|	СчетФактураПолученный.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Исправление
		|			ТОГДА НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаИсправления, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ)
		|	КОНЕЦ КАК Дата,
		|	ЛОЖЬ КАК ЕстьОшибки,
		|	ТИПЗНАЧЕНИЯ(СчетФактураПолученный.Ссылка) КАК ТипСчетФактуры
		|ПОМЕСТИТЬ СчетФактураПолученныйНАВременная
		|ИЗ
		|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
		|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
		|	И СчетФактураПолученный.Проведен
		|	И НЕ СчетФактураПолученный.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|";
		ТекстОбъединенияЗапросаСчетФактураПолученныйНА = "ВЫБРАТЬ РАЗЛИЧНЫЕ * ИЗ СчетФактураПолученныйНАВременная";
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСчетФактураПолученныйНА;
			ТекстОбъединения = ТекстОбъединения + Объединить + ТекстОбъединенияЗапросаСчетФактураПолученныйНА;
		Иначе
			ТекстЗапроса = ТекстЗапросаСчетФактураПолученныйНА;
			ТекстОбъединения = ТекстОбъединенияЗапросаСчетФактураПолученныйНА;
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураКомиссионеру) Тогда
		ТекстЗапросаСчетФактураКомиссионеру = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураКомиссионеру.Комиссионер,
		|	СчетФактураКомиссионеру.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураКомиссионеру.ДатаВыставления = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(СчетФактураКомиссионеру.Дата, ДЕНЬ)
		|		ИНАЧЕ СчетФактураКомиссионеру.ДатаВыставления
		|	КОНЕЦ КАК Дата,
		|	ЛОЖЬ КАК ЕстьОшибки,
		|	ТИПЗНАЧЕНИЯ(СчетФактураКомиссионеру.Ссылка) КАК ТипСчетФактуры
		|ПОМЕСТИТЬ СчетФактураКомиссионеруВременная
		|ИЗ
		|	Документ.СчетФактураКомиссионеру КАК СчетФактураКомиссионеру
		|ГДЕ
		|	СчетФактураКомиссионеру.ДокументОснование = &ДокументОснование
		|	И СчетФактураКомиссионеру.Проведен
		|	И НЕ СчетФактураКомиссионеру.Комиссионер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураКомиссионеруПокупатели.Покупатель,
		|	СчетФактураКомиссионеру.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураКомиссионеру.ДатаВыставления = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НАЧАЛОПЕРИОДА(СчетФактураКомиссионеру.Дата, ДЕНЬ)
		|		ИНАЧЕ СчетФактураКомиссионеру.ДатаВыставления
		|	КОНЕЦ КАК Дата,
		|	ЛОЖЬ,
		|	ТИПЗНАЧЕНИЯ(СчетФактураКомиссионеру.Ссылка)
		|ПОМЕСТИТЬ СчетФактураКомиссионеруПокупателиВременная
		|ИЗ
		|	Документ.СчетФактураКомиссионеру.Покупатели КАК СчетФактураКомиссионеруПокупатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураКомиссионеру КАК СчетФактураКомиссионеру
		|		ПО СчетФактураКомиссионеруПокупатели.Ссылка = СчетФактураКомиссионеру.Ссылка
		|ГДЕ
		|	СчетФактураКомиссионеру.ДокументОснование = &ДокументОснование
		|	И СчетФактураКомиссионеру.Проведен
		|	И СчетФактураКомиссионеруПокупатели.Покупатель ССЫЛКА Справочник.Контрагенты
		|	И НЕ СчетФактураКомиссионеруПокупатели.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|";
		ТекстОбъединенияСчетФактураКомиссионеру =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ * ИЗ СчетФактураКомиссионеруВременная
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ * ИЗ СчетФактураКомиссионеруПокупателиВременная";
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСчетФактураКомиссионеру;
			ТекстОбъединения = ТекстОбъединения + Объединить + ТекстОбъединенияСчетФактураКомиссионеру;
		Иначе
			ТекстЗапроса = ТекстЗапросаСчетФактураКомиссионеру;
			ТекстОбъединения = ТекстОбъединенияСчетФактураКомиссионеру;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос = Новый Запрос(ТекстЗапроса + ТекстОбъединения);
		Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			ТаблицаСчетовФактур = Результат.Выгрузить();
			
			ДанныеСчетФактур = Новый Массив;
			Для Каждого СтрокаТаблицы Из ТаблицаСчетовФактур Цикл
				
				ДанныеСчетФактуры = Новый Структура;
				ДанныеСчетФактуры.Вставить("Дата",           СтрокаТаблицы.Дата );
				ДанныеСчетФактуры.Вставить("Контрагент",     СтрокаТаблицы.Контрагент );
				ДанныеСчетФактуры.Вставить("Ссылка",         СтрокаТаблицы.Ссылка );
				ДанныеСчетФактуры.Вставить("ЕстьОшибки",     СтрокаТаблицы.ЕстьОшибки );
				ДанныеСчетФактуры.Вставить("ТипСчетФактуры", СтрокаТаблицы.ТипСчетФактуры );
				
			КонецЦикла;
			
			Форма.РеквизитыПроверкиКонтрагентов.Вставить("ДанныеСчетФактур", ДанныеСчетФактур);
			
			Возврат ТаблицаСчетовФактур;
		Иначе
			
			Форма.РеквизитыПроверкиКонтрагентов.Вставить("ДанныеСчетФактур", Неопределено);
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Дополнительные действия, выполняемые при создании на сервере документа, в котором используется "Проверка контрагентов".
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой дополняются действия при создании на сервере.
//
Процедура ФормаДокументаПриСозданииНаСервере(Форма) Экспорт

	ПроверкаИспользуется                 = Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется;
	Если НЕ ПартнерыИКонтрагенты.ЕстьРеквизитФормы(Форма,"ИспользоватьПартнеровКакКонтрагентов") Тогда
		ИспользоватьПартнеровКакКонтрагентов = Ложь;
	Иначе
		ИспользоватьПартнеровКакКонтрагентов = Форма.ИспользоватьПартнеровКакКонтрагентов;
	КонецЕсли;
	
	Описание = ПроверкаКонтрагентов.ОписаниеДокументов(Форма);
	Для Каждого СтрокаОписание Из Описание Цикл
		
		ПараметрыЭлементаФормы = СтрокаОписание.Элемент;
		Если ПараметрыЭлементаФормы.ОтключатьВидимостьБезусловно <> Неопределено Тогда
			ПараметрыЭлементаФормы.ОтключатьВидимостьБезусловно.Видимость = Ложь;
		КонецЕсли;
		Если Не ПроверкаИспользуется Тогда
			Если ПараметрыЭлементаФормы.ВидОтображения = "УправлениеСтраницами" Тогда
				ПараметрыЭлементаФормы.ГруппаСтраниц.Видимость = Ложь;
			ИначеЕсли ПараметрыЭлементаФормы.ВидОтображения = "Видимость" Тогда
				ПараметрыЭлементаФормы.ЭлементУправлениеВидимостью.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		Если Не Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЭтоНекорректныйКонтрагент", "Видимость", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "АвансыПоставщикамЭтоНекорректныйКонтрагент", "Видимость", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру описания параметров оформляемого документа
//
// Возвращаемое значение:
//   Структура   - пустая структура описания оформляемого документа.
//
Функция СтруктураПараметровОформляемогоЭлемента() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОтображения","");
	СтруктураПараметров.Вставить("ЭлементУправлениеВидимостью",Неопределено);
	СтруктураПараметров.Вставить("СтраницаЕстьПроблема", Неопределено);
	СтруктураПараметров.Вставить("СтраницаНетПроблемы", Неопределено);
	СтруктураПараметров.Вставить("ГруппаСтраниц",Неопределено);
	СтруктураПараметров.Вставить("ОтключатьВидимостьБезусловно",Неопределено);
	СтруктураПараметров.Вставить("ЭлементФормыПодсказка",Неопределено);
	СтруктураПараметров.Вставить("Имя",Неопределено);

	Возврат СтруктураПараметров;
	
КонецФункции

// Управление видимостью элементов, относящихся к проверке контрагентов в формах справочника "Контрагенты" при создании
// на сервере. Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой выполняются действия.
//
Процедура ПриСозданииНаСервереУправлениеВидимостью(Форма) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
	                                                             "ГруппаРезультатПроверкиКонтрагентов", 
	                                                             "Видимость", 
	                                                             Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется);

КонецПроцедуры

#КонецОбласти
