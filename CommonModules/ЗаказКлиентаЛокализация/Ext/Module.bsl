
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	Движения = Объект.Движения;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт

	//++ Локализация 
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			ДатаОтгрузкиШапка = ?(ЗначениеЗаполнено(Объект.ДатаОтгрузки), Объект.ДатаОтгрузки, ТекущаяДатаСеанса());
			
			НастройкиСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиСистемыНалогообложения",
			Объект.Организация,
			ДатаОтгрузкиШапка);
			
			Если НастройкиСистемыНалогообложения.ПрименяетсяУСН Тогда
				
				НастройкиУчетаНДСПриУСН = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаНДСПриУСН",
				Объект.Организация,
				ДатаОтгрузкиШапка); 
				Если НастройкиУчетаНДСПриУСН <> Неопределено Тогда
					НалогообложениеОрганизации = НастройкиУчетаНДСПриУСН.ОсновноеНалогообложение; 
				Иначе
					НалогообложениеОрганизации = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли;
				Если Объект.НалогообложениеНДС <> НалогообложениеОрганизации Тогда
					ТекстОшибки = НСтр("ru='Налогообложение на дату отгрузки не соответствует налогообложению документа. 
					|Необходимо исправить Налогообложение текущего документа.'");
					ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ 
			|	&Организация КАК Организация,
			|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР 
			|		КОГДА ЗаказКлиентаТовары.ДатаОтгрузки = &ПустаяДата 
			|		ТОГДА &ДатаШапки
			|	ИНАЧЕ ЗаказКлиентаТовары.ДатаОтгрузки
			|	КОНЕЦ КАК ДатаОтгрузки
			|ПОМЕСТИТЬ ВТ_СтрокиДокумента
			|ИЗ
			|	&ТаблицаТоваров КАК ЗаказКлиентаТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_СтрокиДокумента.Организация КАК Организация,
			|	ВТ_СтрокиДокумента.НомерСтроки КАК НомерСтроки,
			|	ВТ_СтрокиДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
			|	МАКСИМУМ(НалогообложениеОрганизации.Период) КАК Период
			|ПОМЕСТИТЬ ВТ_НалогообложениеНаДатуСтрокиДокумента
			|ИЗ
			|	ВТ_СтрокиДокумента КАК ВТ_СтрокиДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДСПриУСН КАК НалогообложениеОрганизации
			|		ПО ВТ_СтрокиДокумента.Организация = НалогообложениеОрганизации.Организация
			|		И ВТ_СтрокиДокумента.ДатаОтгрузки >= НалогообложениеОрганизации.Период 
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_СтрокиДокумента.Организация,
			|	ВТ_СтрокиДокумента.НомерСтроки,
			|	ВТ_СтрокиДокумента.ДатаОтгрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НалогообложениеНаДатуСтрокиДокумента.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ВТ_НалогообложениеНаДатуСтрокиДокумента КАК ВТ_НалогообложениеНаДатуСтрокиДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДСПриУСН КАК НалогообложениеОрганизации
			|		ПО ВТ_НалогообложениеНаДатуСтрокиДокумента.Организация = НалогообложениеОрганизации.Организация 
			|		И ВТ_НалогообложениеНаДатуСтрокиДокумента.Период = НалогообложениеОрганизации.Период
			|ГДЕ
			|	НалогообложениеОрганизации.ОсновноеНалогообложение <> &НалогообложениеДокумента";
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
			Запрос.УстановитьПараметр("ДатаШапки", Объект.Дата);
			Запрос.УстановитьПараметр("НалогообложениеДокумента", Перечисления.ТипыНалогообложенияНДС.СНДСБезНдс(Объект.НалогообложениеНДС));
			Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(,"НомерСтроки,ДатаОтгрузки"));
			Выборка = Запрос.Выполнить().Выбрать();
			ТекстОшибки = НСтр("ru='Налогообложение на дату отгрузки в строке %1 не соответствует налогообложению документа. 
			|Для строки %1 необходимо создать отдельный документ или исправить налогообложение текущего документа.'");
			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки,Выборка.НомерСтроки));
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

		//++ Локализация
		
		// ЭлектронноеВзаимодействие.КоммерческиеПредложения
		Документы.ЗапросКоммерческихПредложенийПоставщиков.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения

		//++ Устарело_Производство21


		//-- Устарело_Производство21
		
		РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ДобавитьКомандуСоздатьНаОсновании(
			КомандыСозданияНаОсновании);
	
		//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	//++ Локализация
	// Извещение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьИзвещений";
	КомандаПечати.Идентификатор = "Извещение";
	КомандаПечати.Представление = НСтр("ru = 'Извещение'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

//++ Локализация

// Возвращает данные для формирования печатной формы "Извещение".
//
// Параметры:
//	ПараметрыПечати - Структура - параметры, используемые для подготовки данных.
//	МассивОбъектов - Массив Из ДокументСсылка.ЗаказКлиента - ссылки на документы, по которым необходимо
//																получить данные.
//	КодЯзыка - Строка - язык, на котором будет выводиться печатная форма.
//						Состоит из кода языка по ISO 639-1 и, опционально, кода страны по ISO 3166-1, разделенных
//						символом подчеркивания. Примеры: "en", "en_US", "en_GB", "ru", "ru_RU".
//
// Возвращаемое значение:
//	Структура - коллекция данных, используемая для формирования печатной формы:
//		* РезультатПоШапке - РезультатЗапроса - общие данные документа.
//		* РезультатПоЭтапамОплаты - РезультатЗапроса - данные графика оплаты по документу.
//		* РезультатПоТабличнойЧасти - РезультатЗапроса - данные табличной части документа.
//
Функция ПолучитьДанныеДляПечатнойФормыИзвещения(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат Документы.ЗаказКлиента.ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

#Область СчетНаОплату_1_01

// Возвращает данные для формирования электронного Счета на оплату.
//
// Параметры:
//	МассивОбъектов - Массив из ДокументСсылка.ЗаказКлиента - ссылки на документы, по которым необходимо
//																получить данные.
//
// Возвращаемое значение:
//	Структура - коллекция данных, используемая для формирования электронного Счета на оплату, содержащая следующие свойства:
//		* РезультатПоШапке - РезультатЗапроса - общие данные документа.
//		* РезультатПоЭтапамОплаты - РезультатЗапроса - данные графика оплаты по документу.
//		* РезультатПоТабличнойЧасти - РезультатЗапроса - данные табличной части документа.
//
Функция ДанныеДокументовДляСчетаНаОплату_1_01(МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	ОтображатьСкидки = Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
						<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныхДокументовДляСчетаНаОплату();
	
	Запрос.УстановитьПараметр("МассивОбъектов",		МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов",		КолонкаКодов);
	Запрос.УстановитьПараметр("ОтображатьСкидки",	ОтображатьСкидки);
	
	ПакетРезультатаЗапроса		= Запрос.ВыполнитьПакет();
	МаксимальныйИндексПакета	= ПакетРезультатаЗапроса.ВГраница();
	РезультатПоШапке			= ПакетРезультатаЗапроса[МаксимальныйИндексПакета - 2];
	РезультатПоЭтапамОплаты		= ПакетРезультатаЗапроса[МаксимальныйИндексПакета - 1];
	РезультатПоТабличнойЧасти	= ПакетРезультатаЗапроса[МаксимальныйИндексПакета];
	
	ДанныеДокументов = Новый Структура;
	ДанныеДокументов.Вставить("РезультатПоШапке",			РезультатПоШапке);
	ДанныеДокументов.Вставить("РезультатПоЭтапамОплаты",	РезультатПоЭтапамОплаты);
	ДанныеДокументов.Вставить("РезультатПоТабличнойЧасти",	РезультатПоТабличнойЧасти);
	
	Возврат ДанныеДокументов;
	
КонецФункции

// Возвращает текст запроса для получения данных о товарах заказа-основания, используемого при формировании ЭД
// Счета на оплату.
//
// Параметры:
//	ЭтоТекстВТ - Булево - признак необходимости формирования текста запроса временной таблицы. Если значение Истина,
//							тогда формируется текст временной таблицы.
//
// Возвращаемое значение:
//	Строка - текст запроса для получения данных.
//
Функция ТекстЗапросаВТТоваровОснованияСчетаНаОплату_1_01(ЭтоТекстВТ = Истина) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка					КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация	КАК ХозяйственнаяОперация,
	|	ТоварыДокумента.НомерСтроки				КАК НомерСтроки,
	|	ВариантыКомплектации.Ссылка										КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектации.ВариантПредставленияНабораВПечатныхФормах	КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектации.ВариантРасчетаЦеныНабора					КАК ВариантРасчетаЦеныНабора,
	|	ТоварыДокумента.НоменклатураНабора		КАК НоменклатураНабора,
	|	ТоварыДокумента.ХарактеристикаНабора	КАК ХарактеристикаНабора,
	|	ТоварыДокумента.Номенклатура			КАК Номенклатура,
	|	ТоварыДокумента.Характеристика			КАК Характеристика,
	|	ТоварыДокумента.Упаковка				КАК Упаковка,
	|	ТоварыДокумента.Количество				КАК Количество,
	|	ТоварыДокумента.КоличествоУпаковок		КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|							ИЛИ ТоварыДокумента.СуммаРучнойСкидки <> 0
	|							ИЛИ ТоварыДокумента.СуммаАвтоматическойСкидки <> 0
	|						ТОГДА (ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС) / ТоварыДокумента.КоличествоУпаковок
	|					ИНАЧЕ ТоварыДокумента.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|					ТОГДА (ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС) / ТоварыДокумента.КоличествоУпаковок
	|				ИНАЧЕ ТоварыДокумента.Сумма / ТоварыДокумента.КоличествоУпаковок
	|			КОНЕЦ
	|	КОНЕЦ									КАК Цена,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|			ТОГДА ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС
	|		ИНАЧЕ ТоварыДокумента.Сумма
	|	КОНЕЦ									КАК СтоимостьБезНДС,
	|	ТоварыДокумента.СтавкаНДС				КАК СтавкаНДС,
	|	ТоварыДокумента.СуммаСНДС				КАК СтоимостьСНДС,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА ТоварыДокумента.СуммаРучнойСкидки + ТоварыДокумента.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ									КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|						ТОГДА (ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС
	|							+ ТоварыДокумента.СуммаРучнойСкидки + ТоварыДокумента.СуммаАвтоматическойСкидки)
	|							/ ТоварыДокумента.КоличествоУпаковок
	|					ИНАЧЕ ТоварыДокумента.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|					ТОГДА (ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС) / ТоварыДокумента.КоличествоУпаковок
	|				ИНАЧЕ ТоварыДокумента.Сумма / ТоварыДокумента.КоличествоУпаковок
	|			КОНЕЦ
	|	КОНЕЦ									КАК ЦенаБезСкидки,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|						ТОГДА ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС
	|							+ ТоварыДокумента.СуммаРучнойСкидки + ТоварыДокумента.СуммаАвтоматическойСкидки
	|					ИНАЧЕ ТоварыДокумента.Сумма + ТоварыДокумента.СуммаРучнойСкидки
	|						+ ТоварыДокумента.СуммаАвтоматическойСкидки
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеДокумента.ЦенаВключаетНДС
	|					ТОГДА ТоварыДокумента.Сумма - ТоварыДокумента.СуммаНДС
	|				ИНАЧЕ ТоварыДокумента.Сумма
	|			КОНЕЦ
	|	КОНЕЦ									КАК СтоимостьБезНДСБезСкидки,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА ТоварыДокумента.СуммаСНДС + ТоварыДокумента.СуммаАвтоматическойСкидки
	|				+ ТоварыДокумента.СуммаРучнойСкидки
	|		ИНАЧЕ ТоварыДокумента.СуммаСНДС
	|	КОНЕЦ									КАК СтоимостьСНДСБезСкидки,
	|	ТоварыДокумента.СуммаНДС				КАК СуммаНДС,
	|	ТоварыДокумента.Содержание				КАК Содержание,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ									КАК ЭтоТовар,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВернутьМногооборотнуюТару
	|				И ТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ									КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ ТоварыОснования
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОснований КАК ТаблицаОснований
	|		ПО ТоварыДокумента.Ссылка = ТаблицаОснований.ДокументОснование
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектации
	|		ПО ТоварыДокумента.НоменклатураНабора = ВариантыКомплектации.Владелец
	|			И ТоварыДокумента.ХарактеристикаНабора = ВариантыКомплектации.Характеристика
	|			И ВариантыКомплектации.Основной
	|
	|ГДЕ
	|	НЕ ТоварыДокумента.Отменено
	|	И (ТоварыДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И (НЕ ДанныеДокумента.ВернутьМногооборотнуюТару
	|				ИЛИ ДанныеДокумента.ТребуетсяЗалогЗаТару))";
	
	Если Не ЭтоТекстВТ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыОснования", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

//-- Локализация

Процедура СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, КомплектПечатныхФорм) Экспорт
	
	//++ Локализация
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"Извещение");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ЗаказКлиента", КомплектПечати.Объекты);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьИзвещений.СформироватьПечатнуюФормуИзвещение(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

Процедура КомплектПечатныхФорм(КомплектПечатныхФорм) Экспорт
	
	//++ Локализация
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "Извещение", НСтр("ru = 'Извещение'"), 0);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


//++ Локализация
#Область Фискализация

// Возвращает таблицу товаров для заполнения позиций строк в параметрах чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для получения товарных позиций
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблицу с товарными позициями с количественными и суммовыми показателями
Функция ПозицииНоменклатурыПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Валюта, Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Упаковка КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок КАК Количество,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Отменено = ЛОЖЬ
	|	И (НЕ ТаблицаДокумента.Ссылка.ВернутьМногооборотнуюТару
	|		ИЛИ (Не ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару
	|			И ТаблицаДокумента.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.КурсЧислитель КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаДокумента, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
	|ГДЕ
	|	КурсВалюты.КурсЗнаменатель <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Количество             КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Сумма * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(31,2)) КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС              КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.СуммаНДС * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(31,2)) КАК СуммаНДС,
	|	ТаблицаНоменклатуры.Валюта                 КАК Валюта,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЦенаВключаетНДС ТОГДА
	|			ТаблицаНоменклатуры.Цена
	|		КОГДА ТаблицаНоменклатуры.Количество = 0 ТОГДА
	|			ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК ЧИСЛО(31,2)) КАК Цена,
	|	
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Номенклатура) = ТИП(Строка) ТОГДА
	|			ТаблицаНоменклатуры.Номенклатура
	|		ИНАЧЕ
	|			ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименование,
	|	ТаблицаНоменклатуры.Упаковка               КАК Упаковка,
	|	ТаблицаНоменклатуры.Упаковка               КАК УпаковкаНаименование
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|		ПО ТаблицаНоменклатуры.Валюта = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.НомерСтроки
	|";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("ДатаДокумента", РеквизитыДокумента.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", РеквизитыДокумента.Валюта);
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("БазоваяВалюта", ВалютаРеглУчета);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		Если СтрокаТовары.Валюта <> ВалютаРеглУчета Тогда
			Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтавкаНДС, "Ставка");
			СтрокаТовары.СуммаНДС = Окр(СтрокаТовары.Сумма * Ставка / (100 + Ставка), 2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

//++ Локализация
#Область Печать

#Область СчетНаОплату_1_01

Функция ТекстЗапросаДанныхДокументовДляСчетаНаОплату()
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВТОснованийСчетаНаОплату_1_01());
	ТекстыЗапроса.Добавить(ТекстЗапросаВТТоваровОснованияСчетаНаОплату_1_01());
	ТекстыЗапроса.Добавить(СчетНаОплатуКлиентуЛокализация.ТекстЗапросаВТТоваровСчетаНаОплату_1_01());
	ТекстыЗапроса.Добавить(СчетНаОплатуКлиентуЛокализация.ТекстЗапросаВТНоменклатураДокументовСчетаНаОплату_1_01());
	ТекстыЗапроса.Добавить(ТекстЗапросаДанныеШапкиСчетаНаОплату_1_01());
	ТекстыЗапроса.Добавить(ТекстЗапросаДанныеЭтаповОплатыСчетаНаОплату_1_01());
	ТекстыЗапроса.Добавить(СчетНаОплатуКлиентуЛокализация.ТекстЗапросаДанныеТоваровСчетаНаОплату_1_01());
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТОснованийСчетаНаОплату_1_01()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОснований.Ссылка	КАК Ссылка,
	|	ТаблицаОснований.Ссылка	КАК ДокументОснование
	|ПОМЕСТИТЬ ТаблицаОснований
	|ИЗ
	|	Документ.ЗаказКлиента КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДокументОснование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеШапкиСчетаНаОплату_1_01()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка	КАК Ссылка,
	|	ДанныеДокумента.Номер	КАК НомерДокумента,
	|	ДанныеДокумента.Дата	КАК ДатаДокумента,
	|	ДанныеДокумента.Ссылка										КАК ДокументОснование,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка)						КАК НаименованиеОснования,
	|	ДанныеДокумента.Номер										КАК НомерОснования,
	|	ДанныеДокумента.Дата										КАК ДатаОснования,
	|	ЕСТЬNULL(ДанныеДоговора.ИдентификаторГосКонтракта, """")	КАК ИдентификаторГосКонтракта,
	|	""""														КАК ДополнительныеСведения,
	|	ЕСТЬNULL(ДанныеСчетаОрганизации.Владелец, ДанныеДокумента.Организация)	КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.БанковскийСчет											КАК БанковскийСчет,
	|	ДанныеДокумента.Организация					КАК Организация,
	|	ДанныеДокумента.Контрагент					КАК Контрагент,
	|	ДанныеДокумента.БанковскийСчетКонтрагента	КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ											КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя	КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ											КАК Грузополучатель,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя	КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.СуммаДокумента	КАК СтоимостьСНДС,
	|	ДанныеДокумента.ДатаОтгрузки				КАК ДатаНачалаПоставки,
	|	ДанныеДокумента.НазначениеПлатежа			КАК НазначениеПлатежа,
	|	ДанныеДокумента.ИдентификаторПлатежа		КАК ИнформацияДляОплаты,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ФормаОплаты)	КАК СпособОплаты,
	|	ДанныеДокумента.Валюта								КАК Валюта,
	|	ДанныеВалюты.НаименованиеПолное						КАК НаименованиеВалюты,
	|	ДанныеВалюты.Код									КАК КодВалюты,
	|	ДанныеОрганизации.ВалютаРегламентированногоУчета	КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.НалогообложениеНДС	КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ								КАК УчитыватьНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК ОперацияОблагаетсяНДСУПокупателя,
	|	ЛОЖЬ								КАК ЧастичнаяОплата,
	|	100									КАК ПроцентОплаты,
	|	ВЫБОР
	|		КОГДА НоменклатураДокументов.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА НоменклатураДокументов.ЕстьУслуги
	|				И НЕ НоменклатураДокументов.ЕстьТовары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК ТолькоУслуги
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОснований КАК ТаблицаОснований
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОснований.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|		ПО ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСчетаОрганизации
	|		ПО ДанныеДокумента.БанковскийСчет = ДанныеСчетаОрганизации.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК ДанныеВалюты
	|		ПО ДанныеДокумента.Валюта = ДанныеВалюты.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизации
	|		ПО ДанныеДокумента.Организация = ДанныеОрганизации.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураДокументов КАК НоменклатураДокументов
	|		ПО ДанныеДокумента.Ссылка = НоменклатураДокументов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеЭтаповОплатыСчетаНаОплату_1_01()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1							КАК Порядок,
	|	ЭтапыОплаты.Ссылка			КАК Ссылка,
	|	ЭтапыОплаты.НомерСтроки		КАК НомерСтроки,
	|	ЭтапыОплаты.ДатаПлатежа		КАК ДатаПлатежа,
	|	ЭтапыОплаты.ПроцентПлатежа	КАК ПроцентПлатежа,
	|	ЭтапыОплаты.СуммаПлатежа	КАК СуммаПлатежа,
	|	ЛОЖЬ						КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОснований КАК ТаблицаОснований
	|		ПО ЭтапыОплаты.Ссылка = ТаблицаОснований.Ссылка
	|
	|ГДЕ
	|	ЭтапыОплаты.СуммаПлатежа > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2								КАК Порядок,
	|	ЭтапыОплаты.Ссылка				КАК Ссылка,
	|	ЭтапыОплаты.НомерСтроки			КАК НомерСтроки,
	|	ЭтапыОплаты.ДатаПлатежа			КАК ДатаПлатежа,
	|	ЭтапыОплаты.ПроцентЗалогаЗаТару	КАК ПроцентПлатежа,
	|	ЭтапыОплаты.СуммаЗалогаЗаТару	КАК СуммаПлатежа,
	|	ИСТИНА							КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОснований КАК ТаблицаОснований
	|		ПО ЭтапыОплаты.Ссылка = ТаблицаОснований.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ПО ЭтапыОплаты.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ЭтапыОплаты.СуммаЗалогаЗаТару > 0
	|	И ДанныеДокумента.ТребуетсяЗалогЗаТару
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	Порядок";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти
//-- Локализация

#КонецОбласти
