
#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеДанных

// Получить коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекцию(Коллекция, ИсходнаяКоллекция = Неопределено, НастройкиСервиса = Неопределено) Экспорт
	
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Возврат ПолучитьКоллекциюПродаж(НастройкиСервиса, Неопределено, Истина);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат ПолучитьКоллекциюТоваров(НастройкиСервиса, ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Возврат ПолучитьКоллекциюХарактеристикНоменклатуры(ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат ПолучитьКоллекциюПокупателей(ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат ПолучитьКоллекциюСкладов(ИсходнаяКоллекция);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
		Возврат ПолучитьКоллекциюОстатков();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		Возврат ПолучитьКоллекциюПромоАкций(НастройкиСервиса, Неопределено);
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
		Возврат ПолучитьКоллекциюСезонныхКоэффициентов(ИсходнаяКоллекция);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить исходную коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
// 
// Возвращаемое значение:
//  Массив из Произвольный
Функция ПолучитьИсходнуюКоллекцию(Коллекция) Экспорт
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Возврат ПолучитьКоллекциюТоваровИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Возврат ПолучитьКоллекциюХарактеристикИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Возврат ПолучитьКоллекциюПокупателейИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Возврат ПолучитьКоллекциюСкладовИсходную();
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
		Возврат ПолучитьКоллекциюСезонныхКоэффициентовИсходную();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить сводку по коллекции.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить сводку по коллекции:
// * КоличествоДанных - Число -
// * ДатаПервойЗаписи - Дата -
// * ДатаПоследнейЗаписи - Дата -
// * Дополнительно - Неопределено -
Функция ПолучитьСводкуПоКоллекции(Коллекция, НастройкиСервиса = Неопределено) Экспорт
	
	Ответ = ОписаниеОтветаСводкиПоКоллекции();
	
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
		
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
			ДатыПродаж = ПолучитьДатыНачалаОкончанияПродаж();
			ДатаАктуальности = ДатыПродаж.ДатаНачалаПродаж;
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
			ДатыОстатков = ПолучитьДатыНачалаОкончанияОстатков();
			ДатаАктуальности = ДатыОстатков.ДатаНачалаОстатков;
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
			ДатыОстатков = ПолучитьДатыНачалаОкончанияПромоАкций();
			ДатаАктуальности = ДатыОстатков.ДатаНачалаПромо;
		КонецЕсли;
		
		Ответ = Неопределено;
		
		Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
			Ответ = ОписаниеОтветаСводкиПоКоллекции();
			Возврат Ответ;
		КонецЕсли;
		
		РазличныеТовары = Новый Массив();
		Пока СервисПрогнозирования.ЕстьНевыгруженныйПериод(Коллекция, ДатаАктуальности) Цикл
			ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(Коллекция, ДатаАктуальности, ДатаАктуальности);
			
			КоллекцияДанных = Неопределено;
			Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
				ПорцияВыгрузки = ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки, Ложь);
				КоллекцияДанных = ПорцияВыгрузки.Коллекция;
			ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки Тогда
				ПорцияВыгрузки = ПолучитьКоллекциюОстатков(ДиапазонДатДляВыгрузки);
			ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
				ПорцияВыгрузки = ПолучитьКоллекциюПромоАкций(НастройкиСервиса, ДиапазонДатДляВыгрузки);
			КонецЕсли;
			
			ДатаАктуальности = НачалоДня(ПорцияВыгрузки.ДатаОкончанияВыборкиПорции) + 86400;
			
			Если Ответ = Неопределено
				И ПорцияВыгрузки.КоличествоДанных > 0 Тогда
				Ответ = ОписаниеОтветаСводкиПоКоллекции();
				ЗаполнитьЗначенияСвойств(Ответ, ПорцияВыгрузки);
				Ответ.КоллекцияДанных = КоллекцияДанных;
			ИначеЕсли ПорцияВыгрузки.КоличествоДанных > 0 Тогда
				Ответ.КоличествоДанных = Ответ.КоличествоДанных + ПорцияВыгрузки.КоличествоДанных;
				Ответ.ДатаПервойЗаписи = ?(ПорцияВыгрузки.ДатаПервойЗаписи < Ответ.ДатаПервойЗаписи,
					ПорцияВыгрузки.ДатаПервойЗаписи,
					Ответ.ДатаПервойЗаписи);
				Ответ.ДатаПоследнейЗаписи = ?(ПорцияВыгрузки.ДатаПоследнейЗаписи > Ответ.ДатаПоследнейЗаписи,
					ПорцияВыгрузки.ДатаПоследнейЗаписи,
					Ответ.ДатаПоследнейЗаписи);
				Ответ.КоллекцияДанных = КоллекцияДанных;
			КонецЕсли;
			
			Если ПорцияВыгрузки.КоличествоДанных > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					РазличныеТовары , ПорцияВыгрузки.Коллекция.ВыгрузитьКолонку("КодТовара"));
				РазличныеТовары = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РазличныеТовары);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ответ = Неопределено Тогда
			Ответ = ОписаниеОтветаСводкиПоКоллекции();
		КонецЕсли;
		
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи
			Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки
			Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо Тогда
			ШаблонСообщенияТовары = НСтр("ru='Различных товаров: %1'");
			Ответ.Дополнительно = СтрШаблон(ШаблонСообщенияТовары, РазличныеТовары.Количество());
		КонецЕсли;
		Ответ.КатегориальнаяКоллекция = Ложь;
		
		Возврат Ответ;
		
	ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады
		Или Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
		// Для категориальных скорее всего хватит исходных коллекций
		
		Ответ = ОписаниеОтветаСводкиПоКоллекции();
		
		Если Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
			КоллекцияДанных = ПолучитьКоллекциюТоваровИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
			КоллекцияДанных = ПолучитьКоллекциюХарактеристикИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
			КоллекцияДанных = ПолучитьКоллекциюПокупателейИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
			КоллекцияДанных = ПолучитьКоллекциюСкладовИсходную();
		ИначеЕсли Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность Тогда
			КоллекцияДанных = ПолучитьКоллекциюСезонныхКоэффициентовИсходную();
		КонецЕсли;
		
		Ответ.КоличествоДанных = КоллекцияДанных.Количество();
		Ответ.КатегориальнаяКоллекция = Истина;
		
		Возврат Ответ;
		
	Иначе
		Возврат Ответ;
	КонецЕсли;
КонецФункции

// Получить даты начала окончания продаж.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачалаПродаж - Дата -
//   * ДатаОкончанияПродаж - Дата -
Функция ПолучитьДатыНачалаОкончанияПродаж() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(, , ДЕНЬ, ) КАК Продажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ)
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , ДЕНЬ, ) КАК Продажи
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаПродаж,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияПродаж
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоПродаж = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	НачалоПродаж.Следующий();
	ДатаНачалаПродаж = НачалоПродаж.ДатаНачалаПродаж;
	ДатаОкончанияПродаж = НачалоПродаж.ДатаОкончанияПродаж;
	
	Возврат Новый Структура("ДатаНачалаПродаж, ДатаОкончанияПродаж", ДатаНачалаПродаж, ДатаОкончанияПродаж);
	
КонецФункции

// Получить аналог номенклатуры по значению.
// 
// Параметры:
//  ИмяПоляАналога - Строка - 
//  ЗначениеАналога - Произвольный - 
//  ДопСвойствоАналога - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - 
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура
Функция ПолучитьАналогНоменклатурыПоЗначению(ИмяПоляАналога, ЗначениеАналога, ДопСвойствоАналога) Экспорт
	
	ИзвлекатьРеквизиты = Ложь;
	ИзвлекатьДопРеквизиты = Ложь;
	
	ИмяПоляВтораяЧасть = "";
	Если СтрНачинаетсяС(ИмяПоляАналога, "Реквизит_") Тогда
		ИзвлекатьРеквизиты = Истина;
		ИмяПоляВтораяЧасть = Сред(ИмяПоляАналога, 10);
	ИначеЕсли СтрНачинаетсяС(ИмяПоляАналога, "ДопРеквизит_") Тогда
		ИзвлекатьДопРеквизиты = Истина;
		ИмяПоляВтораяЧасть = Сред(ИмяПоляАналога, 13);
	ИначеЕсли СтрНачинаетсяС(ИмяПоляАналога, "ДопСвойство_") Тогда
		ИзвлекатьДопРеквизиты = Истина;
		ИмяПоляВтораяЧасть = Сред(ИмяПоляАналога, 13);
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапросаРеквизиты =
	"ВЫБРАТЬ
	|	ТаблицаОбъект.Ссылка,
	|	ТаблицаОбъект.Код
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Справочник.Номенклатура КАК ТаблицаОбъект
	|
	|ГДЕ
	|	&ИмяРеквизита = &ЗначениеРеквизита
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОбъект.Ссылка
	|ИЗ
	|	ВТТовары КАК ТаблицаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОбъект.Код
	|";
	
	ТекстЗапросаДопСвойства =
	"ВЫБРАТЬ
	|	ТаблицаОбъект.Ссылка,
	|	ТаблицаОбъект.Ссылка.Код
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ТаблицаОбъект
	|
	|ГДЕ
	|	ТаблицаОбъект.Свойство = &ТребуемоеДопСвойство
	|	И ТаблицаОбъект.Значение = &ЗначениеРеквизита
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОбъект.Ссылка
	|ИЗ
	|	ВТТовары КАК ТаблицаОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОбъект.Код
	|";
	
	Запрос = Новый Запрос();
	
	Если ИзвлекатьРеквизиты Тогда
		Запрос.Текст = ТекстЗапросаРеквизиты;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизита", "ТаблицаОбъект." + ИмяПоляВтораяЧасть);
	ИначеЕсли ИзвлекатьДопРеквизиты Тогда
		Запрос.Текст = ТекстЗапросаДопСвойства;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеАналога);
	Запрос.УстановитьПараметр("ТребуемоеДопСвойство", ДопСвойствоАналога);
	Запрос.УстановитьПараметр("ИмяПоляВтораяЧасть", ИмяПоляВтораяЧасть);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Разное

// Получает элемент справочника Номенклатура по его идентификатору, либо
// первое вхождение по значению реквизита содержащего идентификатор аналога товара.
//
// Параметры:
//  ЗначениеИдентификатора	 - Строка	 - 
//  НастройкиСервиса		 - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//  НайденныеАналоги		 - Соответствие из Произвольный - где ключ это идентификатор, а значение это найденная ранее номенклатура.
// 
// Возвращаемое значение:
//  см. ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналогаОтвет.
Функция ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(ЗначениеИдентификатора, НастройкиСервиса, НайденныеАналоги) Экспорт
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	ЭтоУИД = СервисПрогнозирования.ЭтоУникальныйИдентификатор(ЗначениеИдентификатора);
	ЗначениеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервиса.РеквизитАналогиТовараСвойство, "ТипЗначения");
	Если ЭтоУИД
		И (ЗначениеСвойства = Новый ОписаниеТипов("СправочникСсылка.Номенклатура")
			Или ЗначениеСвойства = Неопределено) Тогда
		Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		НайденныеАналоги.Вставить(ЗначениеИдентификатора, Номенклатура);
	ИначеЕсли Не ПустаяСтрока(НастройкиСервиса.РеквизитАналогиТовараВИсточнике) Тогда
		Если НайденныеАналоги.Получить(ЗначениеИдентификатора) <> Неопределено Тогда
			Номенклатура = НайденныеАналоги.Получить(ЗначениеИдентификатора);
		Иначе
			ЗначениеИдентификатораОбработанное = ЗначениеИдентификатора;
			ЭтоСсылкаНаНоменклатуру = Ложь;
			Если ЭтоУИД Тогда
				// Если аналоги заданы через ссылочный тип, не являющийся номенклатурой, может быть две ситуации:
				// 1. Пришел идентификатор номенклатуры, т.к. сервис не сгруппировал конкретную товарную позицию по аналогам.
				// 2. Пришел идентификатор доп. реквизита, т.к. сервису удалось произвести такую группировку.
				Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
				ЗначениеИдентификатораОбработанное = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				ЭтоСсылкаНаНоменклатуру = СсылкаНаОбъектСуществует(ЗначениеИдентификатораОбработанное);
				Если ЭтоСсылкаНаНоменклатуру Тогда
					НайденныеАналоги.Вставить(ЗначениеИдентификатора, ЗначениеИдентификатораОбработанное);
					Номенклатура = ЗначениеИдентификатораОбработанное;
				Иначе
					ЗначениеИдентификатораОбработанное = ПолучитьСсылкуПоОписаниюТиповИдентификатору(ЗначениеСвойства,
						ЗначениеИдентификатора);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭтоСсылкаНаНоменклатуру Тогда
				Номенклатура = ПолучитьАналогНоменклатурыПоЗначению(НастройкиСервиса.РеквизитАналогиТовараВИсточнике,
					ЗначениеИдентификатораОбработанное, НастройкиСервиса.РеквизитАналогиТовараСвойство);
				НайденныеАналоги.Вставить(ЗначениеИдентификатора, Номенклатура);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ПланПродаж,
			,
			ТекстНеБылСопоставленТоварПоУИД(ЗначениеИдентификатора));
	КонецЕсли;
	
	Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналогаОтвет();
	Ответ.Номенклатура = Номенклатура;
	Ответ.НайденныеАналоги = НайденныеАналоги;
	Возврат Ответ;
	
КонецФункции

// Получает элемент справочника ТоварныеКатегории по его идентификатору.
//
// Параметры:
//  ЗначениеИдентификатора - Строка - 
// 
// Возвращаемое значение:
//  СправочникСсылка.ТоварныеКатегории - 
Функция ПолучитьТоварнуюКатегориюПоИдентификаторуКатегории(ЗначениеИдентификатора) Экспорт
	
	ЭтоУИД           = СервисПрогнозирования.ЭтоУникальныйИдентификатор(ЗначениеИдентификатора);
	НеСопоставленУИД = Ложь;
	
	Если ЭтоУИД Тогда
		Идентификатор = Новый УникальныйИдентификатор(ЗначениеИдентификатора);
		ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПолучитьСсылку(Идентификатор);
		Если СтрНайти(ТоварнаяКатегория, "<Объект не найден>") Тогда
			НеСопоставленУИД = Истина;
		КонецЕсли;
	Иначе
		НеСопоставленУИД = Истина;
	КонецЕсли;
	
	Если НеСопоставленУИД Тогда
		ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ПланПродажПоКатегориям,
			,
			ТекстНеБылаСопоставленаТоварнаяКатегорияПоУИД(ЗначениеИдентификатора));
	КонецЕсли;
	
	Возврат ТоварнаяКатегория;
	
КонецФункции

// Найти описание реквизита коллекции по имени в сервисе.
// 
// Параметры:
//  РеквизитыКоллекции - Массив из Структура - 
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Неопределено, Структура из Произвольный - см. ОписаниеВыгружаемогоЭлементаДанных.
Функция НайтиОписаниеРеквизитаКоллекцииПоИмениВСервисе(РеквизитыКоллекции, ИмяРеквизита) Экспорт
	
	Для Каждого ОписаниеРеквизита Из РеквизитыКоллекции Цикл
		Если ОписаниеРеквизита.Значение.ИмяВСервисе = ИмяРеквизита Тогда
			Возврат ОписаниеРеквизита.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Получить ссылку по описанию типов идентификатору.
// 
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - Описание типа
//  ТекстИдентификатора - Строка - Текст идентификатора
// 
// Возвращаемое значение:
//  Произвольный
Функция ПолучитьСсылкуПоОписаниюТиповИдентификатору(ОписаниеТипа, ТекстИдентификатора) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(ТекстИдентификатора);
	ТипСвойства = ОписаниеТипа.Типы()[0];
	ИмяТипа = Метаданные.НайтиПоТипу(ТипСвойства).ПолноеИмя();
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипа).ПолучитьСсылку(Идентификатор);
	
КонецФункции

// Последняя известная дата продажи.
// 
// Возвращаемое значение:
//  Дата - Последняя известная дата продажи
Функция ПоследняяИзвестнаяДатаПродажи() Экспорт
	
	ПоследняяИзвестнаяПродажа = Дата(1, 1, 1);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЕСТЬNULL(Набор.Период, &ПустаяДата)), ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ 
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланыПродажОбороты.Период КАК Период
	|	ИЗ
	|		РегистрНакопления.ПланыПродаж.Обороты(, , Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))) КАК ПланыПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ВыручкаИСебестоимостьПродажОбороты.Период
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОперацииПродаж)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		) КАК ВыручкаИСебестоимостьПродажОбороты
	|
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ
	|	) КАК Набор";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	
	НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов);
	ОтборПартнеров = ПолучитьОтборПартнеров(НастройкиОтборов);
	ОтборСкладов = ПолучитьОтборСкладов(НастройкиОтборов);
	ОтборОрганизаций = ПолучитьОтборОрганизаций(НастройкиОтборов);
	
	ОперацииПродаж = ОперацииПродаж();
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ЕстьОтборНоменклатуры(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ЕстьОтборПартнеров(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ЕстьОтборСкладов(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
	
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Не Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы", Настройки.ИспользоватьПлановыеОстаткиИПродажи
		И Настройки.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("СценарийПланов", Настройки.СценарийПрогнозированияФактИПлан);
	
	Запрос.УстановитьПараметр("ОперацииПродаж", ОперацииПродаж);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ПоследняяИзвестнаяПродажа = Выборка.Период;
	КонецЕсли;
	
	Возврат ПоследняяИзвестнаяПродажа;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Записать прогноз продаж.
// 
// Параметры:
//  СтруктураОтвета - Массив из Структура - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ИмяМодели - Строка - 
//  ИдОбучения - Строка - 
//  КачествоМодели - Массив из Структура - 
Процедура ЗаписатьПрогнозПродаж(СтруктураОтвета, ВидПлана, ИмяМодели, ИдОбучения, КачествоМодели) Экспорт
	
	ТребуемыеРеквизитыВидаПлана = "Владелец, Периодичность, ДеньНеделиНачалаПрогноза, НачалоПрогнозирования, 
		|ДеньНеделиНачалаПрогноза, СтруктураНастроек, ЗаполнятьСкладВТЧ, ЗаполнятьПартнераВТЧ, 
		|ЗаполнятьПоХарактеристикамНоменклатуры, ВидЦены";
	РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизитыВидаПлана);
	
	ТекущийСценарий          = РеквизитыВидаПлана.Владелец;
	ТекущаяПериодичность     = РеквизитыВидаПлана.Периодичность;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	
	// Для оптимальной загрузки требуется пересортировать принимаемые данные.
	ДанныеДляЗагрузки = Новый ТаблицаЗначений();
	ДанныеДляЗагрузки.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДанныеДляЗагрузки.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеДляЗагрузки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДанныеДляЗагрузки.Колонки.Добавить("Партнер",        Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДанныеДляЗагрузки.Колонки.Добавить("Дата",           Новый ОписаниеТипов("Дата"));
	ДанныеДляЗагрузки.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	
	НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	Если НастройкиСервиса.ОкруглятьШтучныеПозиции Тогда
		ЕдиницаИзмеренияКоличестваШтук = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
	КонецЕсли;
	НайденныеАналоги = Новый Соответствие();
	
	ПараметрыТекущегоПрогноза = Новый Структура();
	ПараметрыТекущегоПрогноза.Вставить("Периодичность",                  ТекущаяПериодичность);
	ПараметрыТекущегоПрогноза.Вставить("ДеньНеделиНачалаПрогноза",       ДеньНеделиНачалаПрогноза);
	ПараметрыТекущегоПрогноза.Вставить("ЕдиницаИзмеренияКоличестваШтук", ЕдиницаИзмеренияКоличестваШтук);
	
	Для Каждого ТекущийПрогноз Из СтруктураОтвета Цикл
		Если ИмяМодели = "auto" Тогда
			ЗаполнитьДанныеТекущегоПрогнозаСОптимальнойМоделью(ТекущийПрогноз, Истина, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза,
				НастройкиСервиса, НайденныеАналоги);
		Иначе
			ПараметрыТекущегоПрогноза.Вставить("ИмяМодели", ИмяМодели);
			ЗаполнитьДанныеТекущегоПрогнозаСВыбраннойМоделью(ТекущийПрогноз, Истина, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза,
				НастройкиСервиса, НайденныеАналоги);
		КонецЕсли;
	КонецЦикла;
	
	КачествоДляЗагрузки = Новый ТаблицаЗначений();
	КачествоДляЗагрузки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КачествоДляЗагрузки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КачествоДляЗагрузки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КачествоДляЗагрузки.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КачествоДляЗагрузки.Колонки.Добавить("Качество", Новый ОписаниеТипов("Число"));
	
	Для Каждого Качество Из КачествоМодели Цикл
		Если Качество["model"] <> "1C_model" Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КачествоДляЗагрузки.Добавить();
		
		Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(Качество["product_id"], НастройкиСервиса,
			НайденныеАналоги);
		Номенклатура = Ответ.Номенклатура;
		НайденныеАналоги = Ответ.НайденныеАналоги;
		
		Если Номенклатура = Неопределено
			Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если Не СервисПрогнозирования.ПустоеЗначениеСервиса(Качество["customer_id"]) Тогда //@skip-warning
			Идентификатор = Новый УникальныйИдентификатор(Качество["customer_id"]);
			Партнер = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
			НоваяСтрока.Партнер = Партнер;
		КонецЕсли;
		
		Если Не СервисПрогнозирования.ПустоеЗначениеСервиса(Качество["shop_id"]) Тогда
			Идентификатор = Новый УникальныйИдентификатор(Качество["shop_id"]);
			Склад = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
			НоваяСтрока.Склад = Склад;
		КонецЕсли;
		
		Если Не СервисПрогнозирования.ПустоеЗначениеСервиса(Качество["item_variant_id"]) Тогда
			Идентификатор = Новый УникальныйИдентификатор(Качество["item_variant_id"]);
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
			НоваяСтрока.Характеристика = Характеристика;
		КонецЕсли;
		
		НоваяСтрока.Качество = Число(Качество["MAE"]);
	КонецЦикла;
	
	// Требуется загружать не все данные, а только те, которые подходят по заданным настройкам модели (вида плана).
	
	// Планы на даты прогноза перезаписываются. Планы на более ранние даты остаются как есть.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.Номенклатура КАК Номенклатура,
	|	ВходящаяТаблица.Характеристика КАК Характеристика,
	|	ВходящаяТаблица.Партнер КАК Партнер,
	|	НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ) КАК Дата,
	|	ВходящаяТаблица.Количество КАК Количество
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Партнер
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.Номенклатура КАК Номенклатура,
	|	ВходящаяТаблица.Характеристика КАК Характеристика,
	|	ВходящаяТаблица.Партнер КАК Партнер,
	|	ВходящаяТаблица.Качество КАК Качество
	|ПОМЕСТИТЬ ВТКачество
	|ИЗ
	|	&КачествоПоПозициям КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Партнер
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящиеДанные.Склад КАК Склад,
	|	ВходящиеДанные.Номенклатура КАК Номенклатура,
	|	ВходящиеДанные.Характеристика КАК Характеристика,
	|	ВходящиеДанные.Партнер КАК Партнер,
	|	ВходящиеДанные.Дата КАК Дата,
	|	ВходящиеДанные.Количество КАК Количество,
	|	ЕСТЬNULL(КачествоПоПозициям.Качество, 0) КАК Качество,
	|	ЕСТЬNULL(ПланыПродаж.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКачество КАК КачествоПоПозициям
	|		ПО ВходящиеДанные.Номенклатура = КачествоПоПозициям.Номенклатура
	|			И ВходящиеДанные.Характеристика = КачествоПоПозициям.Характеристика
	|			И ВходящиеДанные.Партнер = КачествоПоПозициям.Партнер
	|			И ВходящиеДанные.Склад = КачествоПоПозициям.Склад
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланыПродаж
	|		ПО (ПланыПродаж.НачалоПериода = ВходящиеДанные.Дата)
	|			И (ПланыПродаж.Склад = ВходящиеДанные.Склад)
	|			И (ПланыПродаж.Партнер = ВходящиеДанные.Партнер)
	|			И (ПланыПродаж.Сценарий = &Сценарий)
	|			И (ПланыПродаж.ВидПлана = &ВидПлана)
	|			И (ПланыПродаж.Проведен)
	|			И (ПланыПродаж.НачалоПериода >= &НачалоПрогнозирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящиеДанные.Дата,
	|	ВходящиеДанные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланПродаж.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Сценарий = &Сценарий
	|	И ПланПродаж.ВидПлана = &ВидПлана
	|	И ПланПродаж.НачалоПериода >= &НачалоПрогнозирования
	|	И ПланПродаж.Проведен
	|";
	
	// Все даты сдвигаются к началу текущей периодичности.
	НачалоПрогнозирования = РеквизитыВидаПлана.НачалоПрогнозирования;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	НачалоПрогнозирования = СдвинутьДатуКНачалуПериода(НачалоПрогнозирования, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
	
	Запрос.УстановитьПараметр("ВходящаяТаблица", ДанныеДляЗагрузки);
	Запрос.УстановитьПараметр("КачествоПоПозициям", КачествоДляЗагрузки);
	Запрос.УстановитьПараметр("Сценарий", ТекущийСценарий);
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("НачалоПрогнозирования", НачалоПрогнозирования);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаДляФильтрации = МассивРезультатов[2].Выгрузить();
	ВсеПодходящиеПланы = МассивРезультатов[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СервисПрогнозированияФильтрЗагрузкиПрогноза");
	
	// 1 шаг фильтрации - применение общего фильтра на загрузку.
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ВтВходящиеДанные", ТаблицаДляФильтрации);
	ЗначениеКонстанты = Константы.НастройкиОтборовНаЗагрузкуСервисаПрогнозирования.Получить();
	Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
		ФильтрНаЗагрузку = ЗначениеКонстанты.Получить();
		Если ЗначениеЗаполнено(ФильтрНаЗагрузку)
			И ФильтрНаЗагрузку.Свойство("ОбщийОтборЗагрузки") Тогда
			ОтборыСКД = ФильтрНаЗагрузку.ОбщийОтборЗагрузки;
			ТаблицаДляФильтрации = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, ОтборыСКД, Неопределено, ВнешниеНаборы);
		КонецЕсли;
	КонецЕсли;
	
	// 2 шаг фильтрации - применение фильтра на загрузку из вида плана.
	ВнешниеНаборы.Вставить("ВтВходящиеДанные", ТаблицаДляФильтрации);
	СтруктураНастроек = РеквизитыВидаПлана.СтруктураНастроек.Получить();
	Если ЗначениеЗаполнено(СтруктураНастроек) Тогда
		ОтборыСКД = СтруктураНастроек.ОтборНоменклатурыНастройки;
		ТаблицаДляФильтрации = ПолучитьРезультатСКД(СхемаКомпоновкиДанных, ОтборыСКД, Неопределено, ВнешниеНаборы);
	КонецЕсли;
	
	// Если данные флаги взведены, в один документ может записаться несколько партнеров и складов.
	// В ином случае ожидается, что сервис прогнозирования вернет единственные значения партнера и склада.
	ЗаполнятьНесколькоСкладов   = РеквизитыВидаПлана.ЗаполнятьСкладВТЧ;
	ЗаполнятьНесколькоПартнеров = РеквизитыВидаПлана.ЗаполнятьПартнераВТЧ;
	
	ТекущиеЗначения = Новый Структура("Дата");
	Если Не ЗаполнятьНесколькоПартнеров Тогда
		ТекущиеЗначения.Вставить("Партнер");
	КонецЕсли;
	Если Не ЗаполнятьНесколькоСкладов Тогда
		ТекущиеЗначения.Вставить("Склад");
	КонецЕсли;
	
	ТекущийДокумент = Неопределено;
	
	СтруктураДействийКоличество = Новый Структура;
	СтруктураДействийКоличество.Вставить("ПересчитатьКоличествоУпаковок");
	
	ВалютаСценарияПланирования = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыВидаПлана.ВидЦены) Тогда
		ВалютаСценарияПланирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийСценарий, "Валюта");
	КонецЕсли;
	
	ПараметрыЗаполненияЦен = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполненияЦен.ВидЦены = РеквизитыВидаПлана.ВидЦены;
	ПараметрыЗаполненияЦен.Валюта = ВалютаСценарияПланирования;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляФильтрации Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеЗначения, ТекущаяСтрока) Тогда
			
			Если ТекущийДокумент <> Неопределено Тогда
				НачатьТранзакцию();
				Попытка
					УстановитьБлокировкуНаПланПродаж(ТекущийДокумент.Ссылка);
					
					ПараметрыЗаполненияЦен.Дата = ТекущийДокумент.Дата;
					Если ЗначениеЗаполнено(РеквизитыВидаПлана.ВидЦены) Тогда
						
						ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(ТекущийДокумент.Товары,
							Неопределено,
							ПараметрыЗаполненияЦен,
							СтруктураДействий);
					КонецЕсли;
					
					ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Документы.ПланПродаж,
						,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
				ТекущийДокумент = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
				ТекущийДокумент.Товары.Очистить();
				
				НайденныйДокумент = ВсеПодходящиеПланы.Найти(ТекущаяСтрока.Ссылка);
				Если НайденныйДокумент <> Неопределено Тогда
					ВсеПодходящиеПланы.Удалить(НайденныйДокумент);
				КонецЕсли;
				
			Иначе
				ТекущийДокумент = Документы.ПланПродаж.СоздатьДокумент();
			КонецЕсли;
			
			ТекущийДокумент.Склад = ?(ЗаполнятьНесколькоСкладов, Неопределено, ТекущаяСтрока.Склад);
			ТекущийДокумент.Партнер = ?(ЗаполнятьНесколькоПартнеров, Неопределено, ТекущаяСтрока.Партнер);
			
			ТекущийДокумент.Дата = НачалоДня(ТекущаяДатаСеанса());
			ТекущийДокумент.НачалоПериода = СдвинутьДатуКНачалуПериода(ТекущаяСтрока.Дата, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
			ТекущийДокумент.ОкончаниеПериода = ДобавитьПериодичностьКДате(ТекущийДокумент.НачалоПериода, ТекущаяПериодичность);
			ТекущийДокумент.Статус = Перечисления.СтатусыПланов.ВПодготовке;
			ТекущийДокумент.Сценарий = ТекущийСценарий;
			ТекущийДокумент.Периодичность = ТекущаяПериодичность;
			ТекущийДокумент.ВидПлана = ВидПлана;
			ТекущийДокумент.ЗаполнятьПоДаннымСервиса = Истина;
			
			ЗаполнитьЗначенияСвойств(ТекущиеЗначения, ТекущаяСтрока);
			
		КонецЕсли;
		
		НоваяСтрока = ТекущийДокумент.Товары.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
		НоваяСтрока.Склад = ТекущаяСтрока.Склад;
		НоваяСтрока.Партнер = ТекущаяСтрока.Партнер;
		НоваяСтрока.Количество = ТекущаяСтрока.Количество;
		НоваяСтрока.ДатаОтгрузки = СдвинутьДатуКНачалуПериода(ТекущаяСтрока.Дата, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(НоваяСтрока, СтруктураДействийКоличество, Неопределено);
		
	КонецЦикла;
	
	Если ТекущийДокумент <> Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			УстановитьБлокировкуНаПланПродаж(ТекущийДокумент.Ссылка);
			
			Если ЗначениеЗаполнено(РеквизитыВидаПлана.ВидЦены) Тогда
				ПараметрыЗаполненияЦен.Дата = ТекущийДокумент.Дата;
				ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(ТекущийДокумент.Товары,
					Неопределено,
					ПараметрыЗаполненияЦен,
					СтруктураДействий);
			КонецЕсли;
			
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродаж,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	// Необработанные документы введенные ранее требуется удалить.
	НачатьТранзакцию();
	Попытка
		Для Индекс = 0 По ВсеПодходящиеПланы.Количество() - 1 Цикл
			ТекущийДокумент = ВсеПодходящиеПланы[Индекс].ПолучитьОбъект();
			ТекущийДокумент.Товары.Очистить();
			ТекущийДокумент.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПланПродаж,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Записать прогноз продаж.
// 
// Параметры:
//  СтруктураОтвета - Массив из Структура - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ИмяМодели - Строка - 
//  ИдОбучения - Строка - 
//  КачествоМодели - Массив из Структура - 
Процедура ЗаписатьПрогнозПродажПоКатегориям(СтруктураОтвета, ВидПлана, ИмяМодели, ИдОбучения, КачествоМодели) Экспорт
	
	ТребуемыеРеквизитыВидаПлана = "Владелец, Периодичность, ДеньНеделиНачалаПрогноза, НачалоПрогнозирования, 
		|ДеньНеделиНачалаПрогноза, СтруктураНастроек, ЗаполнятьСкладВТЧ";
	РеквизитыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизитыВидаПлана);
	
	ТекущийСценарий          = РеквизитыВидаПлана.Владелец;
	ТекущаяПериодичность     = РеквизитыВидаПлана.Периодичность;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	
	// Для оптимальной загрузки требуется пересортировать принимаемые данные.
	
	ДанныеДляЗагрузки = Новый ТаблицаЗначений();
	ДанныеДляЗагрузки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДанныеДляЗагрузки.Колонки.Добавить("ТоварнаяКатегория", Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
	ДанныеДляЗагрузки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДанныеДляЗагрузки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	ПараметрыТекущегоПрогноза = Новый Структура();
	ПараметрыТекущегоПрогноза.Вставить("Периодичность",            ТекущаяПериодичность);
	ПараметрыТекущегоПрогноза.Вставить("ДеньНеделиНачалаПрогноза", ДеньНеделиНачалаПрогноза);
	
	Для Каждого ТекущийПрогноз Из СтруктураОтвета Цикл
		Если ИмяМодели = "auto" Тогда
			ЗаполнитьДанныеТекущегоПрогнозаСОптимальнойМоделью(ТекущийПрогноз, Ложь, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза);
		Иначе
			ПараметрыТекущегоПрогноза.Вставить("ИмяМодели", ИмяМодели);
			ЗаполнитьДанныеТекущегоПрогнозаСВыбраннойМоделью(ТекущийПрогноз, Ложь, ДанныеДляЗагрузки, ПараметрыТекущегоПрогноза);
		КонецЕсли;
	КонецЦикла;
	
	// Требуется загружать не все данные, а только те, которые подходят по заданным настройкам модели (вида плана).
	
	// Планы на даты прогноза перезаписываются. Планы на более ранние даты остаются как есть.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящаяТаблица.Склад КАК Склад,
	|	ВходящаяТаблица.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	НАЧАЛОПЕРИОДА(ВходящаяТаблица.Дата, ДЕНЬ) КАК Дата,
	|	ВходящаяТаблица.Количество КАК Количество
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	ТоварнаяКатегория
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящиеДанные.Склад КАК Склад,
	|	ВходящиеДанные.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ВходящиеДанные.Дата КАК Дата,
	|	ВходящиеДанные.Количество КАК Количество,
	|	ЕСТЬNULL(ПланыПродаж.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка
	|ИЗ
	|	ВТВходящиеДанные КАК ВходящиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланыПродаж
	|		ПО (ПланыПродаж.НачалоПериода = ВходящиеДанные.Дата)
	|			И (ПланыПродаж.Склад = ВходящиеДанные.Склад)
	|			И (ПланыПродаж.Сценарий = &Сценарий)
	|			И (ПланыПродаж.ВидПлана = &ВидПлана)
	|			И (ПланыПродаж.Проведен)
	|			И (ПланыПродаж.НачалоПериода >= &НачалоПрогнозирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВходящиеДанные.Дата,
	|	ВходящиеДанные.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланПродаж.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Сценарий = &Сценарий
	|	И ПланПродаж.ВидПлана = &ВидПлана
	|	И ПланПродаж.НачалоПериода >= &НачалоПрогнозирования
	|	И ПланПродаж.Проведен
	|";
	
	// Все даты сдвигаются к началу текущей периодичности.
	НачалоПрогнозирования = РеквизитыВидаПлана.НачалоПрогнозирования;
	ДеньНеделиНачалаПрогноза = РеквизитыВидаПлана.ДеньНеделиНачалаПрогноза;
	НачалоПрогнозирования = СдвинутьДатуКНачалуПериода(НачалоПрогнозирования, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
	
	Запрос.УстановитьПараметр("ВходящаяТаблица", ДанныеДляЗагрузки);
	Запрос.УстановитьПараметр("Сценарий", ТекущийСценарий);
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("НачалоПрогнозирования", НачалоПрогнозирования);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаДляФильтрации = МассивРезультатов[1].Выгрузить();
	ВсеПодходящиеПланы = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	// Если данные флаги взведены, в один документ может записаться несколько складов.
	// В ином случае ожидается, что сервис прогнозирования вернет единственные значения склада.
	ЗаполнятьНесколькоСкладов = РеквизитыВидаПлана.ЗаполнятьСкладВТЧ;
	
	ТекущиеЗначения = Новый Структура("Дата");
	Если Не ЗаполнятьНесколькоСкладов Тогда
		ТекущиеЗначения.Вставить("Склад");
	КонецЕсли;
	
	ТекущийДокумент = Неопределено;
	
	Для Каждого ТекущаяСтрока Из ТаблицаДляФильтрации Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ТоварнаяКатегория) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеЗначения, ТекущаяСтрока) Тогда
			
			Если ТекущийДокумент <> Неопределено Тогда
				НачатьТранзакцию();
				Попытка
					УстановитьБлокировкуНаПланПродажПоКатегориям(ТекущийДокумент.Ссылка);
					ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Документы.ПланПродажПоКатегориям,
						,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
				ТекущийДокумент = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
				ТекущийДокумент.ТоварныеКатегории.Очистить();
				
				НайденныйДокумент = ВсеПодходящиеПланы.Найти(ТекущаяСтрока.Ссылка);
				Если НайденныйДокумент <> Неопределено Тогда
					ВсеПодходящиеПланы.Удалить(НайденныйДокумент);
				КонецЕсли;
				
			Иначе
				ТекущийДокумент = Документы.ПланПродажПоКатегориям.СоздатьДокумент();
			КонецЕсли;
			
			ТекущийДокумент.Склад = ?(ЗаполнятьНесколькоСкладов, Неопределено, ТекущаяСтрока.Склад);
			
			ТекущийДокумент.Дата = НачалоДня(ТекущаяДатаСеанса());
			ТекущийДокумент.НачалоПериода = СдвинутьДатуКНачалуПериода(ТекущаяСтрока.Дата, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
			ТекущийДокумент.ОкончаниеПериода = ДобавитьПериодичностьКДате(ТекущийДокумент.НачалоПериода, ТекущаяПериодичность);
			ТекущийДокумент.Статус = Перечисления.СтатусыПланов.ВПодготовке;
			ТекущийДокумент.Сценарий = ТекущийСценарий;
			ТекущийДокумент.Периодичность = ТекущаяПериодичность;
			ТекущийДокумент.ВидПлана = ВидПлана;
			
			ЗаполнитьЗначенияСвойств(ТекущиеЗначения, ТекущаяСтрока);
			
		КонецЕсли;
		
		НоваяСтрока = ТекущийДокумент.ТоварныеКатегории.Добавить();
		НоваяСтрока.ТоварнаяКатегория = ТекущаяСтрока.ТоварнаяКатегория;
		НоваяСтрока.Склад = ТекущаяСтрока.Склад;
		НоваяСтрока.Количество = ТекущаяСтрока.Количество;
		НоваяСтрока.ДатаОтгрузки = СдвинутьДатуКНачалуПериода(ТекущаяСтрока.Дата, ТекущаяПериодичность, ДеньНеделиНачалаПрогноза);
		
	КонецЦикла;
	
	Если ТекущийДокумент <> Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			УстановитьБлокировкуНаПланПродажПоКатегориям(ТекущийДокумент.Ссылка);
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПродажПоКатегориям,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	// Необработанные документы введенные ранее требуется удалить.
	НачатьТранзакцию();
	Попытка
		Для Индекс = 0 По ВсеПодходящиеПланы.Количество() - 1 Цикл
			ТекущийДокумент = ВсеПодходящиеПланы[Индекс].ПолучитьОбъект();
			ТекущийДокумент.ТоварныеКатегории.Очистить();
			ТекущийДокумент.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПланПродажПоКатегориям,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СоставПередаваемыхДанных

// Коллекции в порядке важности.
// 
// Параметры:
//  ИспользоватьПланированиеПродаж - Булево - 
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
Функция КоллекцииПоПорядку(ИспользоватьПланированиеПродаж) Экспорт
	
	Ответ = Новый Массив();
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары);
	Если ИспользоватьПланированиеПродаж Тогда
		Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры);
		Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели);
	КонецЕсли;
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо);
	Ответ.Добавить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность);
	
	Возврат Ответ;
	
КонецФункции

// Получить описание реквизитов коллекций.
// 
// Возвращаемое значение:
//  Соответствие из см. ОписаниеВыгружаемогоЭлементаДанных.
Функция ПолучитьОписаниеРеквизитовВсехКоллекций() Экспорт
	
	Описание          = Новый Соответствие();
	ОсновноеОписание  = ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	ВложенноеОписание = ОсновноеОписаниеВыгружаемогоЭлементаДанных();
	
	// Обязательные коллекции.
	ПродажиКоллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "sales");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", ПродажиКоллекция);
	ОсновноеОписание.Вставить("ТипДанных",     "dict");
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Продажи'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПродаж(ВложенноеОписание));
	Описание.Вставить(ПродажиКоллекция, ОписаниеКоллекции);
	
	// Необязательные коллекции.
	Товары = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "products");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", Товары);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Товары'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииТоваров(ВложенноеОписание));
	Описание.Вставить(Товары, ОписаниеКоллекции);
	
	ХарактеристикиНоменклатуры = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "product_variants");
	ОсновноеОписание.Вставить("ИмяВИсточнике", ХарактеристикиНоменклатуры);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Характеристики номенклатуры'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииХарактеристик(ВложенноеОписание));
	Описание.Вставить(ХарактеристикиНоменклатуры, ОписаниеКоллекции);
	
	Покупатели = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customers");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Покупатели);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Покупатели'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииПокупателей(ВложенноеОписание));
	Описание.Вставить(Покупатели, ОписаниеКоллекции);
	
	Склады = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shops");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Склады);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Склады/магазины'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииСкладов(ВложенноеОписание));
	Описание.Вставить(Склады, ОписаниеКоллекции);
	
	Остатки = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "stock");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Остатки);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Остатки товаров'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииОстатковТоваров(ВложенноеОписание));
	Описание.Вставить(Остатки, ОписаниеКоллекции);
	
	Промо = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "promo");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Промо);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Промоакции'"),
		Ложь, ПолучитьОписаниеРеквизитовКоллекцииПромоАкций(ВложенноеОписание));
	Описание.Вставить(Промо, ОписаниеКоллекции);
	
	Сезонность = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность;
	ОсновноеОписание.Вставить("ИмяВСервисе",   "seasonality");
	ОсновноеОписание.Вставить("ИмяВИсточнике", Сезонность);
	ОписаниеКоллекции = ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		НСтр("ru = 'Сезонность'"),
		Истина, ПолучитьОписаниеРеквизитовКоллекцииСезонности(ВложенноеОписание));
	Описание.Вставить(Сезонность, ОписаниеКоллекции);
	
	Возврат Описание;
	
КонецФункции

// Получить описание метаданных по коллекции.
// 
// Параметры:
//  ИмяКоллекции - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - Имя коллекции
// 
// Возвращаемое значение:
//  Массив из см. ШаблонОписанияМетаданных.
Функция ПолучитьОписаниеМетаданныхПоКоллекции(ИмяКоллекции) Экспорт
	
	Если ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ПланПродаж;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ПланПродаж";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_РеализацияТоваровУслуг";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.КорректировкаРеализации;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_КорректировкаРеализации";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВозвратТоваровОтКлиента;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВозвратТоваровОтКлиента";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ОтчетКомиссионера;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ОтчетКомиссионера";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатков;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатков";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатковОПродажахЗаПрошлыеПериоды";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ВводОстатковТоваров;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ВводОстатковТоваров";
		Описания.Добавить(ОписаниеОбъекта);
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Документы.ОтчетОРозничныхПродажах;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Документ_ОтчетОРозничныхПродажах";
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Номенклатура";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.ХарактеристикиНоменклатуры;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_ХарактеристикиНоменклатуры";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Партнеры;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Партнеры";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	ИначеЕсли ИмяКоллекции = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады Тогда
		Описания = Новый Массив();
		
		ОписаниеОбъекта = ШаблонОписанияМетаданных();
		ОписаниеОбъекта.ОбъектМетаданных = Метаданные.Справочники.Склады;
		ОписаниеОбъекта.ИмяОбъектаДопРеквизитовСвойств = "Справочник_Склады";
		
		Описания.Добавить(ОписаниеОбъекта);
		
		Возврат Описания;
	Иначе
		ВызватьИсключение ТекстНеРеализованаВыгрузкаДопРеквизитов(ИмяКоллекции);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Тексты

// Текст для события журнала регистрации.
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСобытиеЖурналаРегистрации() Экспорт
	ТекстСобытия = НСтр("ru='Сервис прогнозирования продаж'");
	Возврат ТекстСобытия;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШаблоныИСтруктуры

// Шаблон описания метаданных.
// 
// Возвращаемое значение:
//  Структура - Шаблон описания метаданных:
// * ОбъектМетаданных - Произвольный - 
// * ИмяОбъектаДопРеквизитовСвойств - Строка -  
Функция ШаблонОписанияМетаданных()
	Возврат Новый Структура("ОбъектМетаданных, ИмяОбъектаДопРеквизитовСвойств");
КонецФункции

// Описание ответа порции периодической коллекции.
// 
// Возвращаемое значение:
//  Структура:
// * Коллекция - ТаблицаЗначений -
// * КоличествоДанных - Число -
// * ДатаПервойЗаписи - Дата -
// * ДатаПоследнейЗаписи - Дата -
// * ДатаОкончанияВыборкиПорции - Дата -
Функция ОписаниеОтветаПорцииПериодическойКоллекции()
	
	Структура = Новый Структура();
	Структура.Вставить("Коллекция", Новый ТаблицаЗначений);
	Структура.Вставить("КоличествоДанных", 0);
	Структура.Вставить("ДатаПервойЗаписи", Дата(1, 1, 1));
	Структура.Вставить("ДатаПоследнейЗаписи", Дата(1, 1, 1));
	Структура.Вставить("ДатаОкончанияВыборкиПорции", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции

// Сводная информация по коллекции.
// 
// Возвращаемое значение:
//  Структура:
// * КоличествоДанных - Число - 
// * ДатаПервойЗаписи - Дата - 
// * ДатаПоследнейЗаписи - Дата - 
// * Дополнительно - Неопределено, Произвольный - 
// * КатегориальнаяКоллекция - Булево -
// * КоллекцияДанных - Неопределено, Произвольный - 
Функция ОписаниеОтветаСводкиПоКоллекции()
	
	Структура = Новый Структура();
	Структура.Вставить("КоличествоДанных", 0);
	Структура.Вставить("ДатаПервойЗаписи", Дата(1, 1, 1));
	Структура.Вставить("ДатаПоследнейЗаписи", Дата(1, 1, 1));
	Структура.Вставить("Дополнительно", Неопределено);
	Структура.Вставить("КатегориальнаяКоллекция", Ложь);
	Структура.Вставить("КоллекцияДанных", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Шаблон ответа функции ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога
// 
// Возвращаемое значение:
//   - Структура:
//    * Номенклатура - СправочникСсылка.Номенклатура - найденная номенклатура.
//    * НайденныеАналоги - Соответствие - где ключ это идентификатор, а значение это найденная ранее номенклатура.
//
Функция ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналогаОтвет()
	
	Возврат Новый Структура("Номенклатура, НайденныеАналоги");
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

// Получить даты начала окончания продаж.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачалаПромо - Дата -
//   * ДатаОкончанияПромо - Дата -
Функция ПолучитьДатыНачалаОкончанияПромоАкций()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СкидкиНаценки.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МаркетинговыеМероприятия.ПлановаяДатаНачала
	|		ИНАЧЕ МаркетинговыеМероприятия.ДатаНачала
	|	КОНЕЦ, ДЕНЬ) КАК Дата
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаПромо,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияПромо
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоОстатков = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	НачалоОстатков.Следующий();
	ДатаНачалаПромо = НачалоОстатков.ДатаНачалаПромо;
	ДатаОкончанияПромо = НачалоОстатков.ДатаОкончанияПромо;
	
	Возврат Новый Структура("ДатаНачалаПромо, ДатаОкончанияПромо", ДатаНачалаПромо, ДатаОкончанияПромо);
	
КонецФункции

// Получить даты начала окончания продаж.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачалаОстатков - Дата -
//   * ДатаОкончанияОстатков - Дата -
Функция ПолучитьДатыНачалаОкончанияОстатков()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТоварыНаСкладах.Период, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВтДаты
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(, , ДЕНЬ, ) КАК ТоварыНаСкладах
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачалаОстатков,
	|	МАКСИМУМ(ЕСТЬNULL(ВтДаты.Дата, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаОкончанияОстатков
	|ИЗ
	|	ВтДаты КАК ВтДаты";
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоОстатков = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	НачалоОстатков.Следующий();
	ДатаНачалаОстатков = НачалоОстатков.ДатаНачалаОстатков;
	ДатаОкончанияОстатков = НачалоОстатков.ДатаОкончанияОстатков;
	
	Возврат Новый Структура("ДатаНачалаОстатков, ДатаОкончанияОстатков", ДатаНачалаОстатков, ДатаОкончанияОстатков);
	
КонецФункции

// Получить коллекцию продаж.
// 
// Параметры:
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//  ДиапазонДатДляВыгрузки - Неопределено, Структура из Дата - см. СервисПрогнозирования.ДиапазонДатДляВыгрузки
//  ПолучитьДополнительныеРеквизиты - Булево - Получить дополнительные реквизиты
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекциюПродаж(НастройкиСервиса, ДиапазонДатДляВыгрузки = Неопределено, ПолучитьДополнительныеРеквизиты = Истина)
	
	Запрос = Новый Запрос();
	Если НастройкиСервиса.УчетПотерянныхПродаж = 0 Тогда
		ТекстЗапроса = ТекстЗапросаКоллекцииПродажБезУчетаПотерянных();
	ИначеЕсли НастройкиСервиса.УчетПотерянныхПродаж = 1 Тогда // По остаткам.
		ТекстЗапроса = ТекстЗапросаКоллекцииПродажБезУчетаПотерянных(); // Учет на стороне сервиса.
	Иначе // По заказам.
		ТекстЗапроса = ТекстЗапросаКоллекцииПродажСУчетомПотерянныхПоЗаказам();
		Запрос.УстановитьПараметр("КоэффициентЗаказов", НастройкиСервиса.КоэффициентВосстановленияУчетаПотерянныхПродаж);
	КонецЕсли;
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.РеквизитыОбъектаВсеТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	ДопРеквизитыПоМетаданным = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0 И ПолучитьДополнительныеРеквизиты;
	
	Для Каждого ОписаниеДопРеквизитовМетаданного Из ДопРеквизитыПоМетаданным Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ОписаниеДопРеквизитовМетаданного.Значение.ПодменяемоеИмяВЗапросе
			+ ",", ОписаниеДопРеквизитовМетаданного.Значение.РеквизитыОбъектаТекстом);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитыВсе,", РеквизитыОбъектаВсеТекстом);
	
	НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры(НастройкиОтборов);
	ОтборПартнеров    = ПолучитьОтборПартнеров(НастройкиОтборов);
	ОтборСкладов      = ПолучитьОтборСкладов(НастройкиОтборов);
	ОтборОрганизаций  = ПолучитьОтборОрганизаций(НастройкиОтборов);
	
	Если ДиапазонДатДляВыгрузки = Неопределено Тогда
		ДатаНачалаПродаж = ПолучитьДатыНачалаОкончанияПродаж().ДатаНачалаПродаж;
		ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(
			Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи, ДатаНачалаПродаж);
	КонецЕсли;
	
	ОперацииПродаж = ОперацииПродаж();
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизаций);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ЕстьОтборНоменклатуры(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ЕстьОтборПартнеров(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ЕстьОтборСкладов(НастройкиОтборов));
	Запрос.УстановитьПараметр("УстановленОтборПоОрганизациям", ЕстьОтборОрганизаций(НастройкиОтборов));
	
	Запрос.УстановитьПараметр("ИспользоватьТолькоПланы", НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
		И Не НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("ИспользоватьОстаткиИПланы", НастройкиСервиса.ИспользоватьПлановыеОстаткиИПродажи
		И НастройкиСервиса.ИспользоватьРеальныеОстаткиИПродажи);
	Запрос.УстановитьПараметр("СценарийПланов", НастройкиСервиса.СценарийПрогнозированияФактИПлан);
	
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	Запрос.УстановитьПараметр("ОперацииПродаж", ОперацииПродаж);
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ТекстУпорядочиванияЗапроса = "";
	
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
	Если ИнфоОКоллекции.ВложенноеОписание["КодКлиента"].Выгружать Тогда
		ТекстУпорядочиванияЗапроса = ",
			|	КодКлиента";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КодКлиента", "Набор.КодКлиента");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоПартнеру",
			"Продажи.АналитикаУчетаПоПартнерам.Партнер = НевыполненныеЗаказы.КодКлиента");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КодКлиента", "&ПустаяСтрока");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоПартнеру", "ИСТИНА");
	КонецЕсли;
	Если ИнфоОКоллекции.ВложенноеОписание["КодХарактеристики"].Выгружать Тогда
		Если ПустаяСтрока(ТекстУпорядочиванияЗапроса) Тогда
			ТекстУпорядочиванияЗапроса = ",
				|	КодХарактеристики";
		Иначе
			ТекстУпорядочиванияЗапроса = ТекстУпорядочиванияЗапроса + ",
				|	КодХарактеристики";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КодХарактеристики", "Набор.КодХарактеристики");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоХарактеристике",
			"Продажи.АналитикаУчетаНоменклатуры.Характеристика = НевыполненныеЗаказы.КодХарактеристики");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КодХарактеристики", "&ПустаяСтрока");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияСНевыполненнымиЗаказамиПоХарактеристике", "ИСТИНА");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУпорядочиванияЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстУпорядочиванияЗапроса;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если Ответ.КоличествоДанных > 0 Тогда
		Ответ.ДатаПервойЗаписи = Результат[0].Дата;
		Ответ.ДатаПоследнейЗаписи = Результат[Ответ.КоличествоДанных - 1].Дата;
	КонецЕсли;
	
	Если ЕстьДопРеквизиты Тогда
		Ответ.Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов, Ложь);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Ответ.Коллекция = Результат;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить коллекцию товаров исходную.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Номенклатура.
Функция ПолучитьКоллекциюТоваровИсходную()
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ
	|		Номенклатура.Ссылка В ИЕРАРХИИ(&ОтборНоменклатуры))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получить коллекцию товаров.
// 
// Параметры:
//  НастройкиСервиса - Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
Функция ПолучитьКоллекциюТоваров(НастройкиСервиса, ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюТоваровИсходную();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Ссылка КАК Код,
	|	&НеобязательныеРеквизиты
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК Категории
	|			ПО &ВыгружатьКатегории
	|				И Категории.Ссылка = Номенклатура.ТоварнаяКатегория
	|ГДЕ
	|	Номенклатура.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	ВТКоллекция.Наименование,
	|	ВТКоллекция.Код,
	|	&НаборНеобязательныхРеквизитов,
	|	&Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Номенклатура.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары];
	ВыгружатьКодКатегорий          = ИнфоОКоллекции.ВложенноеОписание["КодКатегории"].Выгружать;
	ВыгружатьНаименованиеКатегорий = ИнфоОКоллекции.ВложенноеОписание["НаименованиеКатегории"].Выгружать;
	ВыгружатьВидНоменклатуры       = ИнфоОКоллекции.ВложенноеОписание["КодВидаНоменклатуры"].Выгружать;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	СтрокиНеобязательныхРеквизитов      = Новый Массив();
	СтрокиНаборНеобязательныхРеквизитов = Новый Массив();
	
	Если ВыгружатьКодКатегорий Тогда
		ТекстСтрокиРеквизита = "ЕСТЬNULL(Категории.Ссылка, """") КАК КодКатегории";
		Если ВыгружатьНаименованиеКатегорий Или ВыгружатьВидНоменклатуры Тогда
			ТекстСтрокиРеквизита = ТекстСтрокиРеквизита + ",";
		КонецЕсли;
		СтрокиНеобязательныхРеквизитов.Добавить(ТекстСтрокиРеквизита);
		СтрокиНаборНеобязательныхРеквизитов.Добавить("ВТКоллекция.КодКатегории,");
	КонецЕсли;
	Если ВыгружатьНаименованиеКатегорий Тогда
		ТекстСтрокиРеквизита = "ЕСТЬNULL(Категории.Наименование, """") КАК НаименованиеКатегории";
		Если ВыгружатьВидНоменклатуры Тогда
			ТекстСтрокиРеквизита = ТекстСтрокиРеквизита + ",";
		КонецЕсли;
		СтрокиНеобязательныхРеквизитов.Добавить(ТекстСтрокиРеквизита);
		СтрокиНаборНеобязательныхРеквизитов.Добавить("ВТКоллекция.НаименованиеКатегории,");
	КонецЕсли;
	Если ВыгружатьВидНоменклатуры Тогда
		СтрокиНеобязательныхРеквизитов.Добавить("ЕСТЬNULL(Номенклатура.ВидНоменклатуры, """") КАК КодВидаНоменклатуры");
		СтрокиНаборНеобязательныхРеквизитов.Добавить("ВТКоллекция.КодВидаНоменклатуры,");
	КонецЕсли;
	
	КоличествоСтрокРеквизитов = СтрокиНеобязательныхРеквизитов.Количество();
	Если КоличествоСтрокРеквизитов = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка КАК Код,", "Ссылка КАК Код"); // Удаление лишней запятой последнего стандартного поля выборки.
		ТекстЗапросаНеобязательныеРеквизиты           = "";
		ТекстЗапросаНаборНеобязательныхРеквизитов     = "";
	Иначе
		Если КоличествоСтрокРеквизитов > 1 Тогда
			ТекстЗапросаНеобязательныеРеквизиты       = СтрСоединить(СтрокиНеобязательныхРеквизитов, Символы.ПС + Символы.Таб);
			ТекстЗапросаНаборНеобязательныхРеквизитов = СтрСоединить(СтрокиНаборНеобязательныхРеквизитов, Символы.ПС + Символы.Таб);
		Иначе
			ТекстЗапросаНеобязательныеРеквизиты       = СтрокиНеобязательныхРеквизитов[0];
			ТекстЗапросаНаборНеобязательныхРеквизитов = СтрокиНаборНеобязательныхРеквизитов[0];
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НеобязательныеРеквизиты",        ТекстЗапросаНеобязательныеРеквизиты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаборНеобязательныхРеквизитов,", ТекстЗапросаНаборНеобязательныхРеквизитов);
	
	Запрос.УстановитьПараметр("ВыгружатьКатегории",   ВыгружатьКодКатегорий Или ВыгружатьНаименованиеКатегорий);
	Запрос.УстановитьПараметр("ИсходнаяКоллекция",    ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты",     ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

// Получить коллекцию товаров исходную.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ХарактеристикиНоменклатуры.
Функция ПолучитьКоллекциюХарактеристикИсходную()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатуры.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Получить коллекцию товаров.
// 
// Параметры:
//  ИсходнаяКоллекция - Неопределено, Массив из Произвольный - Исходная коллекция
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
Функция ПолучитьКоллекциюХарактеристикНоменклатуры(ИсходнаяКоллекция)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюХарактеристикИсходную();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Код,
	|	ХарактеристикиНоменклатуры.ВидНоменклатуры КАК КодВидаНоменклатуры
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.Наименование,
	|	ВТКоллекция.Код,
	|	ВТКоллекция.КодВидаНоменклатуры,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_ХарактеристикиНоменклатуры.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюПокупателейИсходную()
	
	ОтборПартнеров = ПолучитьОтборПартнеров();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ
	|		Партнеры.Ссылка В ИЕРАРХИИ(&ОтборПартнеров))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборПартнеров", ОтборПартнеров);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам", ОтборПартнеров.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюПокупателей(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюПокупателейИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Ссылка КАК КодПокупателя
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.КодПокупателя,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Партнеры.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ПолучитьКоллекциюСкладовИсходную()
	
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоСкладам
	|		ИЛИ
	|		Склады.Ссылка В ИЕРАРХИИ(&ОтборСкладов))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюСкладов(ИсходнаяКоллекция = Неопределено)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюСкладовИсходную();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка,
	|	Склады.Ссылка КАК КодСклада
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТКоллекция.Ссылка,
	|	&Реквизиты,
	|	ВТКоллекция.КодСклада,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТКоллекция КАК ВТКоллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаОбъект
	|			ПО ВТКоллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И ВТКоллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТКоллекция.Ссылка";
	
	ОписаниеДопРеквизитов = ДопРеквизитыКоллекции(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады);
	
	РеквизитыОбъектаВсеТекстом = ОписаниеДопРеквизитов.ДопРеквизитыПоМетаданным.Справочник_Склады.РеквизитыОбъектаТекстом;
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	ЕстьДопРеквизиты = ВсеДопРеквизитыКлючи.Количество() > 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Реквизиты,", РеквизитыОбъектаВсеТекстом);
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ЕстьДопРеквизиты", ЕстьДопРеквизиты);
	Запрос.УстановитьПараметр("ТребуемыеДопСвойства", ВсеДопРеквизитыСвойства);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЕстьДопРеквизиты Тогда
		Коллекция = ОбработатьКоллекциюСДопРеквизитами(Результат, ОписаниеДопРеквизитов);
	Иначе
		Результат.Колонки.Удалить("Свойство");
		Результат.Колонки.Удалить("Значение");
		Коллекция = Результат;
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

// Получить коллекцию остатков.
// 
// Параметры:
//  ДиапазонДатДляВыгрузки - Неопределено, Структура - Диапазон дат для выгрузки:
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
// 
// Возвращаемое значение:
//  см. ОписаниеОтветаПорцииПериодическойКоллекции.
Функция ПолучитьКоллекциюОстатков(ДиапазонДатДляВыгрузки = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ОстаткиИОбороты.ВНаличииКонечныйОстаток) КАК Количество,
	|	ОстаткиИОбороты.Номенклатура КАК КодТовара,
	|	ОстаткиИОбороты.Склад КАК КодСклада,
	|	НАЧАЛОПЕРИОДА(ОстаткиИОбороты.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, День, , 
	|		(НЕ &УстановленОтборПоНоменклатуре ИЛИ Номенклатура В (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоСкладам ИЛИ Склад В (&ОтборСкладов))) КАК ОстаткиИОбороты
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОстаткиИОбороты.Период, ДЕНЬ),
	|	ОстаткиИОбороты.Склад,
	|	ОстаткиИОбороты.Номенклатура
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ОстаткиИОбороты.Номенклатура,
	|	ОстаткиИОбороты.Склад";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборСкладов = ПолучитьОтборСкладов();
	
	Если ДиапазонДатДляВыгрузки = Неопределено Тогда
		ДатыОстатков = ПолучитьДатыНачалаОкончанияОстатков();
		ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(
			Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки, ДатыОстатков.ДатаНачалаОстатков);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДиапазонДатДляВыгрузки.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если Ответ.КоличествоДанных > 0 Тогда
		Ответ.ДатаПервойЗаписи = Результат[0].Дата;
		Ответ.ДатаПоследнейЗаписи = Результат[Ответ.КоличествоДанных - 1].Дата;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКоллекциюПромоАкций(НастройкиСервиса, ДиапазонДатДляВыгрузки = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДиапазонДат.Дата, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВТДиапазонДат
	|ИЗ
	|	&ДиапазонСгенерированныхДат КАК ДиапазонДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ПлановаяДатаНачала, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ДатаНачала, ДЕНЬ)
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МаркетинговыеМероприятия.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ПлановаяДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(МаркетинговыеМероприятия.ДатаОкончания, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончания,
	|	МаркетинговыеМероприятия.Наименование КАК Наименование,
	|	НЕОПРЕДЕЛЕНО КАК КодСклада,
	|	ПартнерыСегмента.Партнер КАК КодКлиента,
	|	НоменклатураСегмента.Номенклатура КАК КодТовара,
	|	НоменклатураСегмента.Характеристика КАК КодХарактеристики,
	|	0 КАК Скидка,
	|	""activity"" КАК Тип
	|ПОМЕСТИТЬ ВТКоллекцияАкций
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО МаркетинговыеМероприятия.СегментНоменклатуры = НоменклатураСегмента.Сегмент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО МаркетинговыеМероприятия.СегментПартнеров = ПартнерыСегмента.Сегмент
	|ГДЕ
	|	НЕ МаркетинговыеМероприятия.ПометкаУдаления
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL
	|		ИЛИ НоменклатураСегмента.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ ПартнерыСегмента.Партнер ЕСТЬ NULL
	|		ИЛИ ПартнерыСегмента.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Набор.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(Набор.ДатаОкончания) КАК ДатаОкончания,
	|	Набор.СкидкаНаценка.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.Склады
	|			ТОГДА Набор.Источник
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодСклада,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|						ТОГДА Набор.Источник
	|					ИНАЧЕ ПартнерыСегмента.Партнер
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодКлиента,
	|	ДействиеСкидокНаценокПоНоменклатуре.Номенклатура КАК КодТовара,
	|	ДействиеСкидокНаценокПоНоменклатуре.Характеристика КАК КодХарактеристики,
	|	Набор.Скидка КАК Скидка,
	|	""discount"" КАК Тип
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДействиеСкидокНаценок.Период, ДЕНЬ) КАК ДатаНачала,
	|		НЕОПРЕДЕЛЕНО КАК ДатаОкончания,
	|		ДействиеСкидокНаценок.Источник КАК Источник,
	|		ДействиеСкидокНаценок.СкидкаНаценка КАК СкидкаНаценка,
	|		ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК Скидка,
	|		ДействиеСкидокНаценок.Статус КАК Статус,
	|		ДействиеСкидокНаценок.СегментПартнеров КАК СегментПартнеров
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|	ГДЕ
	|		ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|		И ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки >= 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО,
	|		НАЧАЛОПЕРИОДА(ДействиеСкидокНаценок.Период, ДЕНЬ),
	|		ДействиеСкидокНаценок.Источник,
	|		ДействиеСкидокНаценок.СкидкаНаценка,
	|		ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки,
	|		ДействиеСкидокНаценок.Статус,
	|		ДействиеСкидокНаценок.СегментПартнеров
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|	ГДЕ
	|		ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
	|		И ДействиеСкидокНаценок.СкидкаНаценка.ЗначениеСкидкиНаценки >= 0) КАК Набор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|	ПО (Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами)
	|		И (ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|		И (ПартнерыСегмента.Сегмент = ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).СегментПартнеров)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценокПоНоменклатуре КАК ДействиеСкидокНаценокПоНоменклатуре
	|	ПО Набор.СкидкаНаценка = ДействиеСкидокНаценокПоНоменклатуре.Источник
	|ГДЕ
	|	(НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ ДействиеСкидокНаценокПоНоменклатуре.Номенклатура ЕСТЬ NULL
	|		ИЛИ ДействиеСкидокНаценокПоНоменклатуре.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|	И (НЕ &УстановленОтборПоПартнерам
	|		ИЛИ (ВЫБОР
	|			КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|							ТОГДА Набор.Источник
	|						ИНАЧЕ ПартнерыСегмента.Партнер
	|					КОНЕЦ
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ ЕСТЬ NULL)
	|		ИЛИ (ВЫБОР
	|			КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|				ТОГДА ВЫБОР
	|						КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|							ТОГДА Набор.Источник
	|						ИНАЧЕ ПартнерыСегмента.Партнер
	|					КОНЕЦ
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ В ИЕРАРХИИ (&ОтборПартнеров)))
	|	И (НЕ &УстановленОтборПоСкладам
	|		ИЛИ ПартнерыСегмента.Партнер ЕСТЬ NULL
	|		ИЛИ ПартнерыСегмента.Партнер В ИЕРАРХИИ (&ОтборСкладов))
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Источник,
	|	Набор.Статус,
	|	Набор.СкидкаНаценка,
	|	Набор.СегментПартнеров,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.Склады
	|			ТОГДА Набор.Источник
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Набор.Источник ССЫЛКА Справочник.СоглашенияСКлиентами
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Набор.Источник КАК Справочник.СоглашенияСКлиентами).Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|						ТОГДА Набор.Источник
	|					ИНАЧЕ ПартнерыСегмента.Партнер
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДействиеСкидокНаценокПоНоменклатуре.Номенклатура,
	|	ДействиеСкидокНаценокПоНоменклатуре.Характеристика,
	|	Набор.Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДиапазонДат.Дата КАК Дата,
	|	Набор.Наименование КАК Наименование,
	|	Набор.КодСклада КАК КодСклада,
	|	&КодКлиента КАК КодКлиента,
	|	Набор.КодТовара КАК КодТовара,
	|	&КодХарактеристики КАК КодХарактеристики,
	|	СУММА(Набор.Скидка) КАК Скидка,
	|	Набор.Тип КАК Тип
	|ИЗ
	|	ВТКоллекцияАкций КАК Набор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДиапазонДат КАК ДиапазонДат
	|		ПО Набор.ДатаНачала <= ДиапазонДат.Дата
	|			И Набор.ДатаОкончания >= ДиапазонДат.Дата
	|ГДЕ
	|	ДиапазонДат.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ДиапазонДат.Дата,
	|	Набор.Наименование,
	|	Набор.КодСклада,
	|	&КодКлиента,
	|	Набор.КодТовара,
	|	&КодХарактеристики,
	|	Набор.Тип
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Тип,
	|	КодТовара
	|";
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	ОтборПартнеров    = ПолучитьОтборПартнеров();
	ОтборСкладов      = ПолучитьОтборСкладов();
	
	ДатыНачалаОкончания = ПолучитьДатыНачалаОкончанияПромоАкций();
	ДатаНачалаПромо     = ДатыНачалаОкончания.ДатаНачалаПромо;
	Если ДиапазонДатДляВыгрузки = Неопределено Тогда
		ДиапазонДатДляВыгрузки = СервисПрогнозирования.ДиапазонДатДляВыгрузки(
			Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо, ДатаНачалаПромо);
	КонецЕсли;
	
	ДиапазонСгенерированныхДат = Новый ТаблицаЗначений();
	ДиапазонСгенерированныхДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДобавляемаяДатаДиапазона = ДатаНачалаПромо;
	
	НоваяСтрока = ДиапазонСгенерированныхДат.Добавить();
	НоваяСтрока.Дата = ДобавляемаяДатаДиапазона;
	Пока ДобавляемаяДатаДиапазона < ДатыНачалаОкончания.ДатаОкончанияПромо Цикл
		ДобавляемаяДатаДиапазона = КонецДня(ДобавляемаяДатаДиапазона) + 1;
		НоваяСтрока = ДиапазонСгенерированныхДат.Добавить();
		НоваяСтрока.Дата = ДобавляемаяДатаДиапазона;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала",                 ДиапазонДатДляВыгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",              ДиапазонДатДляВыгрузки.ДатаОкончания);
	Запрос.УстановитьПараметр("ДиапазонСгенерированныхДат", ДиапазонСгенерированныхДат);
	
	Запрос.УстановитьПараметр("ОтборНоменклатуры",             ОтборНоменклатуры);
	Запрос.УстановитьПараметр("ОтборПартнеров",                ОтборПартнеров);
	Запрос.УстановитьПараметр("ОтборСкладов",                  ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоПартнерам",    ОтборПартнеров.Количество() > 0);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам",      ОтборСкладов.Количество() > 0);
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи];
	Если ИнфоОКоллекции.ВложенноеОписание["КодКлиента"].Выгружать Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодКлиента", "Набор.КодКлиента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодКлиента", "&ПустаяСтрока");
	КонецЕсли;
	Если ИнфоОКоллекции.ВложенноеОписание["КодХарактеристики"].Выгружать Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодХарактеристики", "Набор.КодХарактеристики");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодХарактеристики", "&ПустаяСтрока");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = ОписаниеОтветаПорцииПериодическойКоллекции();
	Ответ.Коллекция = Результат;
	Ответ.КоличествоДанных = Результат.Количество();
	Ответ.ДатаОкончанияВыборкиПорции = ДиапазонДатДляВыгрузки.ДатаОкончания;
	
	Если Ответ.КоличествоДанных > 0 Тогда
		Ответ.ДатаПервойЗаписи = Результат[0].Дата;
		Ответ.ДатаПоследнейЗаписи = Результат[Ответ.КоличествоДанных - 1].Дата;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьКоллекциюСезонныхКоэффициентовИсходную()
	
	ОтборСкладов = ПолучитьОтборСкладов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СезоннаяГруппа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СезонныеГруппы КАК СезоннаяГруппа
	|ГДЕ
	|	НЕ СезоннаяГруппа.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтборСкладов", ОтборСкладов);
	Запрос.УстановитьПараметр("УстановленОтборПоСкладам", ОтборСкладов.Количество() > 0);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКоллекциюСезонныхКоэффициентов(ИсходнаяКоллекция)
	
	Если ИсходнаяКоллекция = Неопределено Тогда
		ИсходнаяКоллекция = ПолучитьКоллекциюСезонныхКоэффициентовИсходную();
	КонецЕсли;
	
	ОтборНоменклатуры = ПолучитьОтборНоменклатуры();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СезонныеГруппы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТКоллекция
	|ИЗ
	|	Справочник.СезонныеГруппы КАК СезонныеГруппы
	|ГДЕ
	|	СезонныеГруппы.Ссылка В (&ИсходнаяКоллекция)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СезонныеКоэффициенты.Периодичность КАК Периодичность,
	|	СезонныеКоэффициенты.НомерПериода КАК НомерПериода,
	|	СезонныеКоэффициенты.Коэффициент КАК ВесовойКоэффициентСезонности,
	|	Номенклатура.Ссылка КАК КодТовара
	|ИЗ
	|	РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоллекция КАК ВТКоллекция
	|		ПО ВТКоллекция.Ссылка = СезонныеКоэффициенты.СезоннаяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Номенклатура.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
	|ГДЕ
	|	НЕ Номенклатура.Ссылка ЕСТЬ NULL
	|	И (НЕ &УстановленОтборПоНоменклатуре
	|		ИЛИ Номенклатура.Ссылка В ИЕРАРХИИ (&ОтборНоменклатуры))";
	
	Запрос.УстановитьПараметр("ИсходнаяКоллекция", ИсходнаяКоллекция);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.УстановитьПараметр("УстановленОтборПоНоменклатуре", ОтборНоменклатуры.Количество() > 0);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СоставПередаваемыхДанных

// Основное описание выгружаемого элемента данных.
// 
// Возвращаемое значение:
//  Структура:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - Строка - 
//  * ТипДанных - Строка - 
Функция ОсновноеОписаниеВыгружаемогоЭлементаДанных() Экспорт
	
	Описание = Новый Структура();
	Описание.Вставить("ИмяВСервисе",   "");
	Описание.Вставить("Обязательный",  Ложь);
	Описание.Вставить("Выгружать",     Ложь);
	Описание.Вставить("ИмяВИсточнике", "");
	Описание.Вставить("ТипДанных",     "");
	
	Возврат Описание;
	
КонецФункции

// Описание выгружаемого элемента данных.
// 
// Параметры:
//  ОсновноеОписание - Структура Из Произвольный - см. ОсновноеОписаниеВыгружаемогоЭлементаДанных:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж, Строка - 
//  * ТипДанных - Строка - 
//  Представление - Строка -
//  Категориальный - Булево - 
//  ВложенноеОписание - см. ОписаниеВыгружаемогоЭлементаДанных.
// Возвращаемое значение:
//  Структура:
//  * ИмяВСервисе - Строка - 
//  * Обязательный - Булево -
//  * Выгружать - Булево -  
//  * ИмяВИсточнике - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж, Строка - 
//  * ТипДанных - Строка - 
//  * Представление - Строка -
//  * Категориальный - Булево - 
//  * ВложенноеОписание - см. ОписаниеВыгружаемогоЭлементаДанных.
Функция ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
	Представление = "",
	Категориальный = Истина,
	ВложенноеОписание = Неопределено)
	
	Возврат СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
		Представление,
		Категориальный,
		ВложенноеОписание);
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПродаж(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код склада/магазина'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "quantity");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Количество");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Количество'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "price");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Цена");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Цена",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Цена продажи за единицу'")));

	ОсновноеОписание.Вставить("ИмяВСервисе",   "sum");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Сумма");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Сумма",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Сумма продажи'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customer_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодКлиента");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код покупателя'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодХарактеристики");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодХарактеристики",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код характеристики'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииТоваров(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Код");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Код",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_name");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Наименование");
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование'")));
	
	// Дополнительные поля по категориям товаров и виду номенклатуры.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "category_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодКатегории");
	Описание.Вставить("КодКатегории",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код категории'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "category_name");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "НаименованиеКатегории");
	Описание.Вставить("НаименованиеКатегории",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование категории'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_category_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодВидаНоменклатуры");
	Описание.Вставить("КодВидаНоменклатуры",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код вида номенклатуры'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииХарактеристик(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Код");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Код",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код характеристики'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_name");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Наименование");
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_category_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодВидаНоменклатуры");
	Описание.Вставить("КодВидаНоменклатуры",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код вида номенклатуры'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПокупателей(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customer_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодПокупателя");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодПокупателя",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru='Код покупателя'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииСкладов(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru='Код склада/магазина'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииОстатковТоваров(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код склада/магазина'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "stock_quantity");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Количество");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Количество",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Количество'")));
	
	// Необязательные поля.
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииПромоАкций(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "promo_name");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Наименование");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Наименование",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Наименование'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "discount");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Скидка");
	ОсновноеОписание.Вставить("ТипДанных",     "number");
	Описание.Вставить("Скидка",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Сумма скидки'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "shop_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодСклада");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодСклада",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код склада/магазина'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "type");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Тип");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Тип",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Тип акции'")));
	
	// Необязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "customer_id");
	ОсновноеОписание.Вставить("Обязательный",  Ложь);
	ОсновноеОписание.Вставить("Выгружать",     Ложь);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодКлиента");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодКлиента",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код покупателя'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_variant_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодХарактеристики");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("КодХарактеристики",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код характеристики'")));
	
	Возврат Описание;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитовКоллекцииСезонности(ОсновноеОписание)
	
	Описание = Новый Структура();
	
	// Обязательные поля.
	ОсновноеОписание.Вставить("ИмяВСервисе",   "periodicity");
	ОсновноеОписание.Вставить("Обязательный",  Истина);
	ОсновноеОписание.Вставить("Выгружать",     Истина);
	ОсновноеОписание.Вставить("ИмяВИсточнике", "Периодичность");
	ОсновноеОписание.Вставить("ТипДанных",     "string");
	Описание.Вставить("Периодичность",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Периодичность хранения сезонных коэффициентов'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "period_number");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "НомерПериода");
	Описание.Вставить("НомерПериода",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Номер периода'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "seasonal_coefficient");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "ВесовойКоэффициентСезонности");
	Описание.Вставить("ВесовойКоэффициентСезонности",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Весовой коэффициент сезонности'")));
	
	ОсновноеОписание.Вставить("ИмяВСервисе",   "item_id");
	ОсновноеОписание.Вставить("ИмяВИсточнике", "КодТовара");
	Описание.Вставить("КодТовара",
		ОписаниеВыгружаемогоЭлементаДанных(ОсновноеОписание,
			НСтр("ru = 'Код товара'")));
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область Разное

Функция ДопРеквизитыКоллекции(ИмяКоллекции)
	
	ИмяТаблицыОбъединения = "Набор";
	ИмяТаблицыМетаданного = "ТаблицаОбъект";
	
	// 1. Составление полного списка реквизитов.
	// 2. Составление полного списка доп.реквизитов/свойств.
	
	ВсеРеквизиты = Новый Массив();
	ВсеДопРеквизитыКлючи = Новый Массив();
	ВсеДопРеквизитыСвойства = Новый Массив();
	
	РеквизитыОбъектаВсеТекстом = "";
	
	Настройки = СервисПрогнозирования.ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = Настройки.Коллекции[ИмяКоллекции];
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	Для Каждого КлючЗначение Из ДоступныеРеквизиты Цикл
		ЧастиКлюча = СтрРазделить(КлючЗначение.Ключ, "_");
		Если ЧастиКлюча.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		ТипРеквизита = ЧастиКлюча[0];
		ИмяРеквизита = ЧастиКлюча[1];
		ИмяРеквизитаСТипом = ТипРеквизита + "_" + ИмяРеквизита;
		Если ТипРеквизита = "Реквизит" Тогда
			Если ВсеРеквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				ВсеРеквизиты.Добавить(ИмяРеквизита);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КлючЗначение.Значение.ДополнительноеСвойство) Тогда
			Если ВсеДопРеквизитыКлючи.Найти(ИмяРеквизитаСТипом) = Неопределено Тогда
				ВсеДопРеквизитыКлючи.Добавить(ИмяРеквизитаСТипом);
				ВсеДопРеквизитыСвойства.Добавить(КлючЗначение.Значение.ДополнительноеСвойство);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 3. Текст выбора всех реквизитов, для запроса - агрегатора подзапросов.
	Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		РеквизитыОбъектаВсеТекстом = РеквизитыОбъектаВсеТекстом
			+ ИмяТаблицыОбъединения + ".Реквизит_" + ИмяРеквизита + ", ";
	КонецЦикла;
	
	// 4. Текст выбора всех реквизитов, для запроса к конкретному объекту метаданных.
	ОписаниеМетаданных = ПолучитьОписаниеМетаданныхПоКоллекции(ИмяКоллекции);
	
	ДопРеквизитыПоМетаданным = Новый Структура();
	Для Каждого ОписаниеМетаданного Из ОписаниеМетаданных Цикл
		
		РеквизитыОбъектаСобираемые = Новый Структура();
		Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
			РеквизитыОбъектаСобираемые.Вставить(ИмяРеквизита, Ложь);
		КонецЦикла;
		
		ПоляПоОбъектуМетаданных = Новый Структура();
		ПоляПоОбъектуМетаданных.Вставить("РеквизитыОбъектаТекстом", "");
		ПоляПоОбъектуМетаданных.Вставить("РеквизитыОбъектаСобираемые", РеквизитыОбъектаСобираемые);
		ПоляПоОбъектуМетаданных.Вставить("ПодменяемоеИмяВЗапросе", ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств + "_Реквизиты");
		ДопРеквизитыПоМетаданным.Вставить(ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств,
			ПоляПоОбъектуМетаданных);
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		Для Каждого ОписаниеМетаданного Из ОписаниеМетаданных Цикл
			ЭтоРеквизитТекущегоМетаданного = ОписаниеМетаданного.ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
			РеквизитыОбъектаСобираемые = ДопРеквизитыПоМетаданным[ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств].РеквизитыОбъектаСобираемые;
			Если ЭтоРеквизитТекущегоМетаданного Тогда
				РеквизитыОбъектаСобираемые[ИмяРеквизита] = Истина;
			КонецЕсли;
			ДопРеквизитыПоМетаданным[ОписаниеМетаданного.ИмяОбъектаДопРеквизитовСвойств].РеквизитыОбъектаСобираемые = РеквизитыОбъектаСобираемые;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ДопРеквизитыПоМетаданным Цикл
		Ключ = КлючЗначение;
		РеквизитыОбъектаТекстом = ДопРеквизитыПоМетаданным[Ключ.Ключ].РеквизитыОбъектаТекстом;
		Для Каждого ИмяРеквизита Из ВсеРеквизиты Цикл
			Если КлючЗначение.Значение.РеквизитыОбъектаСобираемые[ИмяРеквизита] Тогда
				РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом
					+ ИмяТаблицыМетаданного + "." + ИмяРеквизита + " КАК Реквизит_" + ИмяРеквизита + ", ";
			Иначе
				РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом
					+ "НЕОПРЕДЕЛЕНО КАК Реквизит_" + ИмяРеквизита + ", ";
			КонецЕсли;
		КонецЦикла;
		ДопРеквизитыПоМетаданным[Ключ.Ключ].РеквизитыОбъектаТекстом = РеквизитыОбъектаТекстом;
	КонецЦикла;
	
	ВозвращаемаяСтруктура = Новый Структура();
	ВозвращаемаяСтруктура.Вставить("РеквизитыОбъектаВсеТекстом", РеквизитыОбъектаВсеТекстом);
	ВозвращаемаяСтруктура.Вставить("ДопРеквизитыПоМетаданным", ДопРеквизитыПоМетаданным);
	ВозвращаемаяСтруктура.Вставить("ВсеДопРеквизитыСвойства", ВсеДопРеквизитыСвойства);
	ВозвращаемаяСтруктура.Вставить("ВсеДопРеквизитыКлючи", ВсеДопРеквизитыКлючи);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

Функция ОбработатьКоллекциюСДопРеквизитами(Коллекция, ОписаниеДопРеквизитов, ГруппироватьПоСсылке = Истина)
	
	ВсеДопРеквизитыСвойства = ОписаниеДопРеквизитов.ВсеДопРеквизитыСвойства;
	ВсеДопРеквизитыКлючи = ОписаниеДопРеквизитов.ВсеДопРеквизитыКлючи;
	
	КолонкиКоллекции = "";
	
	ВозвращаемаяТаблица = Коллекция.СкопироватьКолонки();
	Для Каждого ОписаниеКолонки Из ВсеДопРеквизитыКлючи Цикл
		ВозвращаемаяТаблица.Колонки.Добавить(ОписаниеКолонки);
	КонецЦикла;
	
	Если Не ГруппироватьПоСсылке Тогда
		Для Каждого Колонка Из ВозвращаемаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если ИмяКолонки <> "Свойство"
				И ИмяКолонки <> "Значение"
				И Не СтрНайти(ИмяКолонки, "ДопРеквизит_")
				И Не СтрНайти(ИмяКолонки, "ДопСвойство_") Тогда
				КолонкиКоллекции = КолонкиКоллекции + ", " + ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КолонкиКоллекции = "Ссылка";
	КонецЕсли;
	
	ТекущиеПоля = Новый Структура(КолонкиКоллекции);
	ТекущаяСтрока = Неопределено;
	Для Каждого Строка Из Коллекция Цикл
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеПоля, Строка) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущиеПоля, Строка);
			
			ТекущаяСтрока = ВозвращаемаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Строка);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Свойство)
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			Индекс = ВсеДопРеквизитыСвойства.Найти(Строка.Свойство);
			Если Индекс <> Неопределено Тогда
				ТекущаяСтрока[ВсеДопРеквизитыКлючи[Индекс]] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВозвращаемаяТаблица.Колонки.Удалить("Свойство");
	ВозвращаемаяТаблица.Колонки.Удалить("Значение");
	Возврат ВозвращаемаяТаблица;
	
КонецФункции

Функция СсылкаНаОбъектСуществует(СсылкаНаОбъект)
	
	// Объект не найден вернет Неопределено.
	ПроверочноеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ПометкаУдаления");
	Возврат ПроверочноеЗначение <> Неопределено;
	
КонецФункции

Функция СдвинутьДатуКНачалуПериода(Дата, Периодичность, ДеньНеделиНачалаПрогноза)
	
	День = 86400;
	ОбработаннаяДата = Дата;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ОбработаннаяДата = НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Если ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.ПустаяСсылка() Тогда
			// Остается как есть.
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Понедельник Тогда
			ОбработаннаяДата = НачалоНедели(Дата);
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Вторник Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Среда Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 2;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Четверг Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 3;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Пятница Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 4;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Суббота Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 5;
		ИначеЕсли ДеньНеделиНачалаПрогноза = Перечисления.ДниНедели.Воскресенье Тогда
			ОбработаннаяДата = НачалоНедели(Дата) + День * 6;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ОбработаннаяДата = НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ОбработаннаяДата = НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ОбработаннаяДата = НачалоГода(Дата);
	КонецЕсли;
	
	Возврат ОбработаннаяДата;
	
КонецФункции

Функция ДобавитьПериодичностьКДате(Дата, Периодичность)
	
	День = 86400;
	ОбработаннаяДата = Дата;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ОбработаннаяДата = ОбработаннаяДата + День;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ОбработаннаяДата = ОбработаннаяДата + День * 7;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 6);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ОбработаннаяДата = ДобавитьМесяц(ОбработаннаяДата, 12);
	Иначе
		ОбработаннаяДата = ОбработаннаяДата + День;
	КонецЕсли;
	
	// Один день требуется отнять т.к. при прогнозе на 1 день, начать и закончить мы должны внутри одного дня.
	// Аналогично и для других периодичностей. 01.01.2020 + неделя = 07.01.2020, а не 08.01.2020.
	Возврат ОбработаннаяДата - День;
	
КонецФункции

// Заполнение данных текущей строки прогноза продаж по оптимальной модели.
// 
// Параметры:
//  ТекущийПрогноз - Соответствие из Произвольный - 
//  ПрогнозПоТоварам - Булево - 
//  ДанныеДляЗагрузки - ТаблицаЗначений - 
//  ПараметрыТекущегоПрогноза - Структура из Произвольный - 
//  НастройкиСервиса - Структура - 
//  НайденныеАналоги - Соответствие из Произвольный - 
Процедура ЗаполнитьДанныеТекущегоПрогнозаСОптимальнойМоделью(ТекущийПрогноз, ПрогнозПоТоварам, ДанныеДляЗагрузки,
	ПараметрыТекущегоПрогноза,
	НастройкиСервиса = Неопределено,
	НайденныеАналоги = Неопределено)
	
	Склад          = Неопределено;
	ДатыКоличества = Новый Соответствие();
	
	// Для полей из дополнительных коллекций, добавляется id коллеции, к примеру "category_id_1635".
	Если ПрогнозПоТоварам Тогда
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Партнер        = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "_id" Тогда
				Продолжить; // Уникальный идентификатор документа MongoDB.
			ИначеЕсли КлючЗначение.Ключ = "obj_id" Тогда
				Продолжить; // Внутренний уникальный идентификатор. Не применимо.
			ИначеЕсли КлючЗначение.Ключ = "item_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(КлючЗначение.Значение, НастройкиСервиса,
					НайденныеАналоги);
				Номенклатура     = Ответ.Номенклатура;
				НайденныеАналоги = Ответ.НайденныеАналоги;
				
				Если Номенклатура = Неопределено
					Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "item_variant_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор  = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Партнер       = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			Иначе
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Ключ);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				Количество  = Число(КлючЗначение.Значение);
				Если НастройкиСервиса.ОкруглятьШтучныеПозиции Тогда
					Если Количество < 0 Тогда
						Количество = 0;
					ИначеЕсли Количество > 0 Тогда
						Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
							И ЗначениеЗаполнено(Номенклатура) Тогда
							ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
							Если ЕдиницаИзмерения = ПараметрыТекущегоПрогноза.ЕдиницаИзмеренияКоличестваШтук Тогда
								Количество = Окр(Количество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ДатыКоличества.Вставить(ДатаПродажи, Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДатыКоличества Цикл
			НоваяСтрока = ДанныеДляЗагрузки.Добавить();
			НоваяСтрока.Склад          = Склад;
			НоваяСтрока.Номенклатура   = Номенклатура;
			НоваяСтрока.Характеристика = Характеристика;
			НоваяСтрока.Партнер        = Партнер;
			НоваяСтрока.Дата           = КлючЗначение.Ключ;
			НоваяСтрока.Количество     = КлючЗначение.Значение;
		КонецЦикла;
		
	Иначе // Прогноз по товарным категориям.
		
		ТоварнаяКатегория = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "_id" Тогда
				Продолжить; // Уникальный идентификатор документа MongoDB.
			ИначеЕсли КлючЗначение.Ключ = "obj_id" Тогда
				Продолжить; // Внутренний уникальный идентификатор. Не применимо.
			ИначеЕсли СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор     = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				Продолжить; // Не применимо.
			ИначеЕсли КлючЗначение.Ключ = "item_variant_id" Тогда
				Продолжить; // Не применимо.
			ИначеЕсли КлючЗначение.Ключ = "item_id" Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			Иначе
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Ключ);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				Количество  = Число(КлючЗначение.Значение);
				ДатыКоличества.Вставить(ДатаПродажи, Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДатыКоличества Цикл
			НоваяСтрока                   = ДанныеДляЗагрузки.Добавить();
			НоваяСтрока.Склад             = Склад;
			НоваяСтрока.ТоварнаяКатегория = ТоварнаяКатегория;
			НоваяСтрока.Дата              = КлючЗначение.Ключ;
			НоваяСтрока.Количество        = КлючЗначение.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных текущей строки прогноза продаж по выбранной модели.
// 
// Параметры:
//  ТекущийПрогноз - Соответствие из Произвольный - 
//  ПрогнозПоТоварам - Булево - 
//  ДанныеДляЗагрузки - ТаблицаЗначений - 
//  ПараметрыТекущегоПрогноза - Структура из Произвольный - 
//  НастройкиСервиса - Структура - 
//  НайденныеАналоги - Соответствие из Произвольный - 
Процедура ЗаполнитьДанныеТекущегоПрогнозаСВыбраннойМоделью(ТекущийПрогноз, ПрогнозПоТоварам, ДанныеДляЗагрузки,
	ПараметрыТекущегоПрогноза,
	НастройкиСервиса = Неопределено,
	НайденныеАналоги = Неопределено)
	
	Склад       = Неопределено;
	ДатаПродажи = Неопределено;
	Количество  = 0;
	
	// Для полей из дополнительных коллекций, добавляется id коллеции, к примеру "category_id_1635".
	Если ПрогнозПоТоварам Тогда
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Партнер        = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			Если КлючЗначение.Ключ = "item_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Ответ = ПолучитьНоменклатуруПоИдентификаторуТовараИлиАналога(КлючЗначение.Значение, НастройкиСервиса,
					НайденныеАналоги);
				Номенклатура     = Ответ.Номенклатура;
				НайденныеАналоги = Ответ.НайденныеАналоги;
				
				Если Номенклатура = Неопределено
					Или Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "date" Тогда
				
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Значение);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				
			ИначеЕсли КлючЗначение.Ключ = ПараметрыТекущегоПрогноза.ИмяМодели Тогда
				
				Количество = Число(КлючЗначение.Значение);
				Если НастройкиСервиса.ОкруглятьШтучныеПозиции Тогда
					Если Количество < 0 Тогда
						Количество = 0;
					ИначеЕсли Количество > 0 Тогда
						Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
							И ЗначениеЗаполнено(Номенклатура) Тогда
							ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
							Если ЕдиницаИзмерения = ПараметрыТекущегоПрогноза.ЕдиницаИзмеренияКоличестваШтук Тогда
								Количество = Окр(Количество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "item_variant_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор  = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "customer_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Партнер       = Справочники.Партнеры.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ДанныеДляЗагрузки.Добавить();
		НоваяСтрока.Склад          = Склад;
		НоваяСтрока.Номенклатура   = Номенклатура;
		НоваяСтрока.Характеристика = Характеристика;
		НоваяСтрока.Партнер        = Партнер;
		НоваяСтрока.Дата           = ДатаПродажи;
		НоваяСтрока.Количество     = Количество;
		
	Иначе // Прогноз по товарным категориям.
		
		ТоварнаяКатегория = Неопределено;
		
		Для Каждого КлючЗначение Из ТекущийПрогноз Цикл
			
			// Для полей из дополнительных коллекций, добавляется приставка идентификатора коллеции, к примеру "category_id_1635".
			Если СтрНайти(КлючЗначение.Ключ, "category_id") Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор     = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "date" Тогда
				
				ДатаПродажи = СервисПрогнозирования.ДатаСервисаВДатуПрограммы(КлючЗначение.Значение);
				ДатаПродажи = СдвинутьДатуКНачалуПериода(ДатаПродажи,
					ПараметрыТекущегоПрогноза.Периодичность, ПараметрыТекущегоПрогноза.ДеньНеделиНачалаПрогноза);
				
			ИначеЕсли КлючЗначение.Ключ = ПараметрыТекущегоПрогноза.ИмяМодели Тогда
				Количество = Число(КлючЗначение.Значение);
			ИначеЕсли КлючЗначение.Ключ = "shop_id" Тогда
				Если СервисПрогнозирования.ПустоеЗначениеСервиса(КлючЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Идентификатор = Новый УникальныйИдентификатор(КлючЗначение.Значение);
				Склад         = Справочники.Склады.ПолучитьСсылку(Идентификатор);
				
			ИначеЕсли КлючЗначение.Ключ = "item_id" Тогда
				Продолжить; // Не применимо. Присутствует при "category_processing" = "reduce".
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ДанныеДляЗагрузки.Добавить();
		НоваяСтрока.Склад             = Склад;
		НоваяСтрока.ТоварнаяКатегория = ТоварнаяКатегория;
		НоваяСтрока.Дата              = ДатаПродажи;
		НоваяСтрока.Количество        = Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкуНаПланПродаж(СсылкаНаДокумент)
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПланПродаж");
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаДокумент);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
КонецПроцедуры

Процедура УстановитьБлокировкуНаПланПродажПоКатегориям(СсылкаНаДокумент)
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПланПродажПоКатегориям");
	ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", СсылкаНаДокумент);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
КонецПроцедуры

Функция ОперацииПродаж()
	Ответ = Новый Массив();
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.СторноРеализации);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	Ответ.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	Возврат Ответ
КонецФункции

#КонецОбласти

#Область Отборы

Функция ПолучитьОтборНоменклатуры(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхНоменклатура");
	
	Если ЕстьОтборНоменклатуры(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Номенклатура");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборПартнеров(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхПартнеры");
	
	Если ЕстьОтборПартнеров(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Партнер");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборСкладов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхСклады");
	
	Если ЕстьОтборСкладов(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Склад");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтборОрганизаций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПанельУправленияСервисомПрогнозирования.ПолучитьМакет("ФильтрОтправляемыхДанныхОрганизации");
	
	Если ЕстьОтборОрганизаций(НастройкиОтборов) Тогда
		Возврат ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, "Организация");
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

Функция ЕстьОтборНоменклатуры(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Номенклатура");
	
КонецФункции

Функция ЕстьОтборПартнеров(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Партнер");
	
КонецФункции

Функция ЕстьОтборСкладов(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Склад");
	
КонецФункции

Функция ЕстьОтборОрганизаций(НастройкиОтборов = Неопределено)
	
	Если НастройкиОтборов = Неопределено Тогда
		НастройкиОтборов = СервисПрогнозирования.ПолучитьОбщийОтборВыгрузки();
	КонецЕсли;
	
	Возврат ЕстьПолеВОтборе(НастройкиОтборов, "Организация");
	
КонецФункции

Функция ЕстьПолеВОтборе(НастройкиОтборов, ИмяПоля)
	
	Если Не ТипЗнч(НастройкиОтборов) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборыНастроек = НастройкиОтборов.Отбор; // ОтборКомпоновкиДанных.
	
	Для Каждого ПолеОтбора Из ОтборыНастроек.Элементы Цикл
		Если Не ПолеОтбора.Использование
			Или Не ЗначениеЗаполнено(ПолеОтбора.ПравоеЗначение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ПолеОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Возврат ЕстьПолеВОтборе(ПолеОтбора, ИмяПоля);
		ИначеЕсли СтрНачинаетсяС(Строка(ПолеОтбора.ЛевоеЗначение), ИмяПоля) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиОтборов, ИмяОтбираемогоПоля = Неопределено, ВнешниеНаборыДанных = Неопределено)
	
	ПараметрыСКД = КомпоновкаДанныхСервер.ПараметрыВыгрузитьРезультатСКД();
	
	НастройкиСхемы = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиСхемы.Отбор, НастройкиОтборов.Отбор);
	
	ЭлементыОтбора = НастройкиСхемы.Отбор.Элементы; // КоллекцияЭлементовОтбораКомпоновкиДанных -
	КУдалению      = Новый Массив();
	
	Если ИмяОтбираемогоПоля <> Неопределено Тогда
		
		Для Индекс = 0 По ЭлементыОтбора.Количество() - 1 Цикл
			ЭлементОтбора = ЭлементыОтбора[Индекс];
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				КУдалению.Добавить(ЭлементОтбора);
				Продолжить;
			КонецЕсли;
			Если Не СтрНачинаетсяС(Строка(ЭлементОтбора.ЛевоеЗначение), ИмяОтбираемогоПоля) Тогда
				КУдалению.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
	Иначе // Проверка некорректного заполнения отборов загрузки прогноза и номенклатуры видов планов.
		
		Для Индекс = 0 По ЭлементыОтбора.Количество() - 1 Цикл
			ЭлементОтбора = ЭлементыОтбора[Индекс];
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				КУдалению.Добавить(ЭлементОтбора);
				Продолжить;
			КонецЕсли;
			Если Не ЭлементОтбора.Использование Тогда
				КУдалению.Добавить(ЭлементОтбора);
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(ЭлементОтбора.ЛевоеЗначение)
				Или Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				КУдалению.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого УдаляемыйЭлемент Из КУдалению Цикл
		НастройкиСхемы.Отбор.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ПараметрыСКД.СхемаКомпоновки = СхемаКомпоновкиДанных;
	ПараметрыСКД.НастройкиКомпоновки = НастройкиСхемы;
	ПараметрыСКД.ВнешниеНаборыДанных = ВнешниеНаборыДанных;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатСКД = КомпоновкаДанныхСервер.ВыгрузитьРезультатСКД(ПараметрыСКД);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат РезультатСКД;
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ТекстНеРеализованаВыгрузкаДопРеквизитов(ИмяКоллекции)
	ТекстШаблона = НСтр("ru='Не реализована настройка выгрузки дополнительных реквизитов для коллекции: %1'");
	Возврат СтрШаблон(ТекстШаблона, ИмяКоллекции);
КонецФункции

Функция ТекстНеБылСопоставленТоварПоУИД(ТекстИдентификатора)
	ТекстШаблона = НСтр("ru='Не найдена позиция номенклатуры соответствующая идентификатору: %1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстИдентификатора);
КонецФункции

Функция ТекстНеБылаСопоставленаТоварнаяКатегорияПоУИД(ТекстИдентификатора)
	
	ТекстШаблона = НСтр("ru='Не найдена позиция товарной категории соответствующая идентификатору: %1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстИдентификатора);
	
КонецФункции

Функция ТекстЗапросаКоллекцииПродажБезУчетаПотерянных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.КоличествоОборот КАК Количество,
	|	Продажи.СуммаОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.Номенклатура КАК КодТовара,
	|	Продажи.Характеристика КАК КодХарактеристики,
	|	Продажи.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиПлановые
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))
	|		) КАК Продажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ПланПродаж_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ПОМЕСТИТЬ ВТОстаткиПлановыеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиПлановые КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиПлановые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.КоличествоОборот КАК Количество,
	|	Продажи.СуммаВыручкиОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаВыручкиОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаВыручкиОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура КАК КодТовара,
	|	Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК КодХарактеристики,
	|	Продажи.АналитикаУчетаПоПартнерам.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	Продажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиФактические
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОперацииПродаж)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		)КАК Продажи
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиПлановыеСДопРеквизитами КАК ОстаткиПлановые
	|		ПО (НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) = ОстаткиПлановые.Дата)
	|			И Продажи.Склад = ОстаткиПлановые.КодСклада
	|			И Продажи.АналитикаУчетаНоменклатуры.Номенклатура = ОстаткиПлановые.КодТовара
	|ГДЕ
	|	ОстаткиПлановые.КодТовара ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коллекция.Ссылка КАК Ссылка,
	|	Коллекция.Дата КАК Дата,
	|	Коллекция.Количество КАК Количество,
	|	Коллекция.Сумма КАК Сумма,
	|	Коллекция.Цена КАК Цена,
	|	Коллекция.КодТовара КАК КодТовара,
	|	Коллекция.КодХарактеристики КАК КодХарактеристики,
	|	Коллекция.КодКлиента КАК КодКлиента,
	|	Коллекция.КодСклада КАК КодСклада,
	|	Коллекция.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Документ_РеализацияТоваровУслуг_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение
	|ПОМЕСТИТЬ ВТОстаткиФактическиеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_КорректировкаРеализации_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВозвратТоваровОтКлиента_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ОтчетКомиссионера_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатков_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатков КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатковОПродажахЗаПрошлыеПериоды_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатковТоваров_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковТоваров КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ОтчетОРозничныхПродажах_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиФактические
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Дата КАК Дата,
	|	СУММА(Набор.Количество) КАК Количество,
	|	СУММА(Набор.Сумма) КАК Сумма,
	|	СРЕДНЕЕ(Набор.Цена) КАК Цена,
	|	Набор.КодТовара КАК КодТовара,
	|	&КодХарактеристики КАК КодХарактеристики,
	|	&КодКлиента КАК КодКлиента,
	|	Набор.КодСклада КАК КодСклада,
	|	&РеквизитыВсе,
	|	Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Набор.Свойство КАК Свойство,
	|	Набор.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Набор.Ссылка КАК Ссылка,
	|		Набор.Дата КАК Дата,
	|		Набор.Количество КАК Количество,
	|		Набор.Сумма КАК Сумма,
	|		Набор.Цена КАК Цена,
	|		Набор.КодТовара КАК КодТовара,
	|		Набор.КодХарактеристики КАК КодХарактеристики,
	|		Набор.КодКлиента КАК КодКлиента,
	|		Набор.КодСклада КАК КодСклада,
	|		&РеквизитыВсе,
	|		Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Набор.Свойство КАК Свойство,
	|		Набор.Значение КАК Значение
	|	ИЗ
	|		ВТОстаткиФактическиеСДопРеквизитами КАК Набор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Набор.Ссылка КАК Ссылка,
	|		Набор.Дата,
	|		Набор.Количество,
	|		Набор.Сумма,
	|		Набор.Цена,
	|		Набор.КодТовара,
	|		Набор.КодХарактеристики,
	|		Набор.КодКлиента,
	|		Набор.КодСклада,
	|		&РеквизитыВсе,
	|		Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Набор.Свойство КАК Свойство,
	|		Набор.Значение КАК Значение
	|	ИЗ
	|		ВТОстаткиПлановыеСДопРеквизитами КАК Набор) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Дата,
	|	Набор.КодТовара,
	|	&КодХарактеристики,
	|	&КодКлиента,
	|	Набор.КодСклада,
	|	Набор.ХозяйственнаяОперация,
	|	&РеквизитыВсе,
	|	Набор.Свойство,
	|	Набор.Значение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Набор.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара,
	|	КодСклада";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКоллекцииПродажСУчетомПотерянныхПоЗаказам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Период,
	|	СУММА(ВЫБОР
	|		КОГДА Обороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход)
	|			ТОГДА Обороты.ЗаказаноОборот
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ЗаказаноПриход,
	|	СУММА(ВЫБОР
	|		КОГДА Обороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|			ТОГДА - Обороты.ЗаказаноОборот
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ЗаказаноРасход,
	|	Обороты.Распоряжение КАК Распоряжение,
	|	Обороты.Номенклатура КАК Номенклатура,
	|	Обороты.Характеристика КАК Характеристика,
	|	Обороты.Склад КАК Склад
	|ПОМЕСТИТЬ Обороты
	|ИЗ	
	|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(&ДатаНачала, &ДатаОкончания, Запись,
	|		(НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Распоряжение.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))) КАК Обороты
	|ГДЕ
	|	Обороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ),
	|	Обороты.Распоряжение,
	|	Обороты.Номенклатура,
	|	Обороты.Характеристика,
	|	Обороты.Склад
	|;
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеЗаказа.Период, ДЕНЬ) КАК Дата,
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеЗаказа.ЗаказаноРасход <> 0
	|			ТОГДА ДанныеЗаказа.ЗаказаноРасход
	|		ИНАЧЕ ДанныеЗаказа.ЗаказаноПриход * -1
	|	КОНЕЦ) КАК КоличествоОтменено,
	|	ДанныеЗаказа.Распоряжение.Партнер КАК КодКлиента,
	|	ДанныеЗаказа.Номенклатура КАК КодТовара,
	|	ДанныеЗаказа.Характеристика КАК КодХарактеристики,
	|	ДанныеЗаказа.Склад КАК КодСклада
	|ПОМЕСТИТЬ ВТНевыполненныеЗаказы
	|ИЗ
	|	Обороты КАК ДанныеЗаказа
	|ГДЕ
	|	ДанныеЗаказа.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеЗаказа.ЗаказаноПриход < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеЗаказа.Период, ДЕНЬ),
	|	ДанныеЗаказа.Распоряжение.Партнер,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.Характеристика,
	|	ДанныеЗаказа.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.КоличествоОборот КАК Количество,
	|	Продажи.СуммаОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаОборот / Продажи.КоличествоОборот КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.Номенклатура КАК КодТовара,
	|	Продажи.Характеристика КАК КодХарактеристики,
	|	Продажи.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиПлановые
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|		(&ИспользоватьТолькоПланы
	|				ИЛИ &ИспользоватьОстаткиИПланы)
	|		И Сценарий = &СценарийПланов
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ Склад В ИЕРАРХИИ (&ОтборСкладов))
	|		) КАК Продажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ПланПродаж_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ПОМЕСТИТЬ ВТОстаткиПлановыеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиПлановые КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПродаж.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиПлановые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) КАК Дата,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.КоличествоОборот + ЕСТЬNULL(НевыполненныеЗаказы.КоличествоОтменено, 0) * &КоэффициентЗаказов КАК Количество,
	|	Продажи.СуммаВыручкиОборот КАК Сумма,
	|	ВЫБОР
	|		КОГДА Продажи.КоличествоОборот <> 0
	|				И Продажи.СуммаВыручкиОборот <> 0
	|			ТОГДА ВЫРАЗИТЬ(Продажи.СуммаВыручкиОборот
	|				/ (Продажи.КоличествоОборот + ЕСТЬNULL(НевыполненныеЗаказы.КоличествоОтменено, 0) * &КоэффициентЗаказов) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Продажи.АналитикаУчетаНоменклатуры.Номенклатура КАК КодТовара,
	|	Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК КодХарактеристики,
	|	Продажи.АналитикаУчетаПоПартнерам.Партнер КАК КодКлиента,
	|	ВЫБОР
	|		КОГДА Продажи.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Продажи.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК КодСклада,
	|	Продажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТОстаткиФактические
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, 
	|		НЕ &ИспользоватьТолькоПланы
	|		И ХозяйственнаяОперация В (&ОперацииПродаж)
	|		И (НЕ &УстановленОтборПоНоменклатуре
	|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В ИЕРАРХИИ (&ОтборНоменклатуры))
	|		И (НЕ &УстановленОтборПоПартнерам
	|				ИЛИ АналитикаУчетаПоПартнерам.Партнер В ИЕРАРХИИ (&ОтборПартнеров))
	|		И (НЕ &УстановленОтборПоСкладам
	|				ИЛИ АналитикаУчетаНоменклатуры.МестоХранения В ИЕРАРХИИ (&ОтборСкладов))
	|		И (НЕ &УстановленОтборПоОрганизациям
	|				ИЛИ АналитикаУчетаПоПартнерам.Организация В ИЕРАРХИИ (&ОтборОрганизаций))
	|		)КАК Продажи
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиПлановыеСДопРеквизитами КАК ОстаткиПлановые
	|		ПО (НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) = ОстаткиПлановые.Дата)
	|			И Продажи.Склад = ОстаткиПлановые.КодСклада
	|			И Продажи.АналитикаУчетаНоменклатуры.Номенклатура = ОстаткиПлановые.КодТовара
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНевыполненныеЗаказы КАК НевыполненныеЗаказы
	|		ПО НАЧАЛОПЕРИОДА(Продажи.Период, ДЕНЬ) = НевыполненныеЗаказы.Дата
	|			И Продажи.Склад = НевыполненныеЗаказы.КодСклада
	|			И Продажи.АналитикаУчетаНоменклатуры.Номенклатура = НевыполненныеЗаказы.КодТовара
	|			И &УсловиеСоединенияСНевыполненнымиЗаказамиПоХарактеристике
	|			И &УсловиеСоединенияСНевыполненнымиЗаказамиПоПартнеру
	|ГДЕ
	|	ОстаткиПлановые.КодТовара ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНевыполненныеЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Коллекция.Ссылка КАК Ссылка,
	|	Коллекция.Дата КАК Дата,
	|	Коллекция.Количество КАК Количество,
	|	Коллекция.Сумма КАК Сумма,
	|	Коллекция.Цена КАК Цена,
	|	Коллекция.КодТовара КАК КодТовара,
	|	Коллекция.КодХарактеристики КАК КодХарактеристики,
	|	Коллекция.КодКлиента КАК КодКлиента,
	|	Коллекция.КодСклада КАК КодСклада,
	|	Коллекция.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Документ_РеализацияТоваровУслуг_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение КАК Значение
	|ПОМЕСТИТЬ ВТОстаткиФактическиеСДопРеквизитами
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_КорректировкаРеализации_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВозвратТоваровОтКлиента_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ОтчетКомиссионера_Реквизиты,
	|	ДополнительныеРеквизитыОбъекта.Свойство,
	|	ДополнительныеРеквизитыОбъекта.Значение
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыОбъекта
	|			ПО &ЕстьДопРеквизиты
	|			И Коллекция.Ссылка = ДополнительныеРеквизитыОбъекта.Ссылка
	|			И ДополнительныеРеквизитыОбъекта.Свойство В (&ТребуемыеДопСвойства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатков_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатков КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатковОПродажахЗаПрошлыеПериоды_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ВводОстатковТоваров_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковТоваров КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Коллекция.Ссылка,
	|	Коллекция.Дата,
	|	Коллекция.Количество,
	|	Коллекция.Сумма,
	|	Коллекция.Цена,
	|	Коллекция.КодТовара,
	|	Коллекция.КодХарактеристики,
	|	Коллекция.КодКлиента,
	|	Коллекция.КодСклада,
	|	Коллекция.ХозяйственнаяОперация,
	|	&Документ_ОтчетОРозничныхПродажах_Реквизиты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТОстаткиФактические КАК Коллекция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ТаблицаОбъект
	|			ПО Коллекция.Ссылка = ТаблицаОбъект.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОстаткиФактические
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Дата КАК Дата,
	|	СУММА(Набор.Количество) КАК Количество,
	|	СУММА(Набор.Сумма) КАК Сумма,
	|	СРЕДНЕЕ(Набор.Цена) КАК Цена,
	|	Набор.КодТовара КАК КодТовара,
	|	&КодХарактеристики КАК КодХарактеристики,
	|	&КодКлиента КАК КодКлиента,
	|	Набор.КодСклада КАК КодСклада,
	|	&РеквизитыВсе,
	|	Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Набор.Свойство КАК Свойство,
	|	Набор.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Набор.Ссылка КАК Ссылка,
	|		Набор.Дата КАК Дата,
	|		Набор.Количество КАК Количество,
	|		Набор.Сумма КАК Сумма,
	|		Набор.Цена КАК Цена,
	|		Набор.КодТовара КАК КодТовара,
	|		Набор.КодХарактеристики КАК КодХарактеристики,
	|		Набор.КодКлиента КАК КодКлиента,
	|		Набор.КодСклада КАК КодСклада,
	|		&РеквизитыВсе,
	|		Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Набор.Свойство КАК Свойство,
	|		Набор.Значение КАК Значение
	|	ИЗ
	|		ВТОстаткиФактическиеСДопРеквизитами КАК Набор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Набор.Ссылка КАК Ссылка,
	|		Набор.Дата,
	|		Набор.Количество,
	|		Набор.Сумма,
	|		Набор.Цена,
	|		Набор.КодТовара,
	|		Набор.КодХарактеристики,
	|		Набор.КодКлиента,
	|		Набор.КодСклада,
	|		&РеквизитыВсе,
	|		Набор.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		Набор.Свойство КАК Свойство,
	|		Набор.Значение КАК Значение
	|	ИЗ
	|		ВТОстаткиПлановыеСДопРеквизитами КАК Набор) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Дата,
	|	Набор.КодТовара,
	|	&КодХарактеристики,
	|	&КодКлиента,
	|	Набор.КодСклада,
	|	Набор.ХозяйственнаяОперация,
	|	&РеквизитыВсе,
	|	Набор.Свойство,
	|	Набор.Значение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Набор.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодТовара,
	|	КодСклада";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти