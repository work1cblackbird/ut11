////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции планирования
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Извлекает операнды из текстовой формулы
//
// Параметры:
//  Формула - Строка - текст формулы.
//
// Возвращаемое значение:
//  Массив из Строка - Операнды из текстовой формулы (без внешних скобок, например, "Номенклатура.{ДР.Экспедитор}").
//
Функция ОперандыТекстовойФормулы(Формула) Экспорт
	
	МассивОперандов = РаботаСФормуламиКлиентСервер.ОперандыТекстовойФормулы(Формула);
	
	Если (МассивОперандов.Найти("ПланируемыеКонечныеОстатки") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыйКонечныйДефицит") <> Неопределено)
		И МассивОперандов.Найти("ПланируемыеНачальныеОстатки") = Неопределено Тогда
		
		МассивОперандов.Добавить("ПланируемыеНачальныеОстатки");
		
	КонецЕсли;
	
	Если (МассивОперандов.Найти("ПланируемыеКонечныеОстаткиСОтбором") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыйКонечныйДефицитСОтбором") <> Неопределено)
		И МассивОперандов.Найти("ПланируемыеНачальныеОстаткиСОтбором") = Неопределено Тогда
		
		МассивОперандов.Добавить("ПланируемыеНачальныеОстаткиСОтбором");
		
	КонецЕсли;
	
	Если (МассивОперандов.Найти("ПланируемыеНачальныеОстатки") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыеКонечныеОстатки") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыйКонечныйДефицит") <> Неопределено)
		Или МассивОперандов.Найти("ПланыПрихода") <> Неопределено Тогда
		
		Если МассивОперандов.Найти("ПланыЗакупок") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыЗакупок");
		КонецЕсли;
		
		
		Если МассивОперандов.Найти("ПланыСборкиКомплекты") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыСборкиКомплекты");
		КонецЕсли;
		
		Если МассивОперандов.Найти("ПланыРазборкиКомплектующие") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыРазборкиКомплектующие");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (МассивОперандов.Найти("ПланируемыеНачальныеОстатки") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыеКонечныеОстатки") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыйКонечныйДефицит") <> Неопределено)
		Или МассивОперандов.Найти("ПланыРасхода") <> Неопределено Тогда
		
		Если МассивОперандов.Найти("ПланыПродаж") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыПродаж");
		КонецЕсли;
		
		Если МассивОперандов.Найти("ПланыВнутреннихПотреблений") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыВнутреннихПотреблений");
		КонецЕсли;
		
		
		Если МассивОперандов.Найти("ПланыРазборкиКомплекты") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыРазборкиКомплекты");
		КонецЕсли;
		
		Если МассивОперандов.Найти("ПланыСборкиКомплектующие") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыСборкиКомплектующие");
		КонецЕсли;
		
		Если МассивОперандов.Найти("КорректировкиПлановыхПотребностей") = Неопределено Тогда
			МассивОперандов.Добавить("КорректировкиПлановыхПотребностей");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (МассивОперандов.Найти("ПланируемыеНачальныеОстаткиСОтбором") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыеКонечныеОстаткиСОтбором") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыйКонечныйДефицитСОтбором") <> Неопределено)
		Или МассивОперандов.Найти("ПланыПриходаСОтбором") <> Неопределено Тогда
		
		Если МассивОперандов.Найти("ПланыЗакупокСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыЗакупокСОтбором");
		КонецЕсли;
		
		
		Если МассивОперандов.Найти("ПланыСборкиКомплектыСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыСборкиКомплектыСОтбором");
		КонецЕсли;
		
		Если МассивОперандов.Найти("ПланыРазборкиКомплектующиеСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыРазборкиКомплектующиеСОтбором");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (МассивОперандов.Найти("ПланируемыеНачальныеОстаткиСОтбором") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыеКонечныеОстаткиСОтбором") <> Неопределено
		Или МассивОперандов.Найти("ПланируемыйКонечныйДефицитСОтбором") <> Неопределено)
		Или МассивОперандов.Найти("ПланыРасходаСОтбором") <> Неопределено Тогда
		
		Если МассивОперандов.Найти("ПланыПродажСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыПродажСОтбором");
		КонецЕсли;
		
		Если МассивОперандов.Найти("ПланыВнутреннихПотребленийСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыВнутреннихПотребленийСОтбором");
		КонецЕсли;
		
		
		Если МассивОперандов.Найти("ПланыРазборкиКомплектыСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыРазборкиКомплектыСОтбором");
		КонецЕсли;
		
		Если МассивОперандов.Найти("ПланыСборкиКомплектующиеСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("ПланыСборкиКомплектующиеСОтбором");
		КонецЕсли;
		
		Если МассивОперандов.Найти("КорректировкиПлановыхПотребностейСОтбором") = Неопределено Тогда
			МассивОперандов.Добавить("КорректировкиПлановыхПотребностейСОтбором");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОперандов;
	
КонецФункции

#Область ПроцедурыКроссТаблиц

// Преобразование Таблицы в Кросс-таблицу с переносом значений реквизитов периода в колонки кросс-таблицы.
//
// Параметры:
//  КроссТаблица - ДанныеФормыКоллекция - Кросс-таблица в форме
//  Таблица      - ДанныеФормыКоллекция - Табличная часть объекта
//  Параметры    - Структура - Дополнительные настройки, передаваемые в процедуру:
//                            ТаблицаПериоды, Периодичность, СтруктураРеквизитовПериода, СтруктураРеквизитов, 
//                            ПоляГруппировки
//  ПолуфабрикатыПоДатам - ТаблицаЗначений
//
Процедура ЗаполнитьКроссТаблицуИзТаблицы(КроссТаблица, Таблица, Параметры, ПолуфабрикатыПоДатам = Неопределено) Экспорт
	
	ТаблицаПериоды             = Параметры.ТаблицаПериоды;
	Периодичность              = Параметры.Периодичность;
	СтруктураРеквизитовПериода = Параметры.СтруктураРеквизитовПериода;
	СтруктураРеквизитов        = Параметры.СтруктураРеквизитов;
	ПоляГруппировки            = Параметры.ПоляГруппировки;
	
	СтруктураИтоговыхРеквизитов = Неопределено;
	Если НЕ Параметры.Свойство("СтруктураИтоговыхРеквизитов", СтруктураИтоговыхРеквизитов) Тогда
		СтруктураИтоговыхРеквизитов = Новый Структура;
	КонецЕсли;
	
	КроссТаблица.Очистить();
	Если ПолуфабрикатыПоДатам <> Неопределено Тогда
		ПолуфабрикатыПоДатам.Очистить();
	КонецЕсли;
	
	СтрокаИсключений = "";
	Для каждого ИтоговыйРеквизит Из СтруктураИтоговыхРеквизитов Цикл
		СтрокаИсключений = СтрокаИсключений + ?(ПустаяСтрока(СтрокаИсключений), "", ", ") + ИтоговыйРеквизит.Ключ;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Отбор = Новый Структура;
		Для каждого Элемент Из СтруктураРеквизитовПериода Цикл
			Если Элемент.Ключ = "ДатаОкончания" Тогда
				Отбор.Вставить(
					Элемент.Ключ, 
					ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТаблицы[Элемент.Значение], Периодичность));
			Иначе
				Отбор.Вставить(
					Элемент.Ключ, 
					ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТаблицы[Элемент.Значение], Периодичность));
			КонецЕсли;
		КонецЦикла;
		
		НайденныеСтрокиПериодов = ТаблицаПериоды.НайтиСтроки(Отбор);
		
		Если НЕ ПустаяСтрока(ПоляГруппировки) Тогда
			Отбор = Новый Структура(ПоляГруппировки);
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			НайденныеСтроки = КроссТаблица.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество()=0 Тогда
				НоваяСтрока = КроссТаблица.Добавить();
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
			Если ПолуфабрикатыПоДатам <> Неопределено
				И СтрокаТаблицы.Полуфабрикат Тогда
				Отбор = Новый Структура(ПоляГруппировки + ", ДатаВыпускаПродукцииПолуфабриката");
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
				НайденныеСтрокиПолуфабрикаты = ПолуфабрикатыПоДатам.НайтиСтроки(Отбор);
				Если НайденныеСтрокиПолуфабрикаты.Количество()=0 Тогда
					НоваяСтрокаПолуфабрикаты = ПолуфабрикатыПоДатам.Добавить();
				Иначе
					НоваяСтрокаПолуфабрикаты = НайденныеСтрокиПолуфабрикаты[0];
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока = КроссТаблица.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,,СтрокаИсключений);
		Если ПолуфабрикатыПоДатам <> Неопределено 
			И СтрокаТаблицы.Полуфабрикат Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПолуфабрикаты, СтрокаТаблицы,,СтрокаИсключений);
		КонецЕсли;
		
		Если НайденныеСтрокиПериодов.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаПериода = НайденныеСтрокиПериодов[0];
		
		Для каждого Элемент Из СтруктураРеквизитов Цикл
			Если СтруктураИтоговыхРеквизитов.Свойство(Элемент.Значение) Тогда
				НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки] = НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки] + СтрокаТаблицы[Элемент.Значение];
			ИначеЕсли Элемент.Значение = "Расшифровка"
				И ЗначениеЗаполнено(НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки])
				И ЗначениеЗаполнено(СтрокаТаблицы[Элемент.Значение]) Тогда
				
				МассивСтрокНС = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки], " = ");
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы[Элемент.Значение], " = ");
				Если МассивСтрок.Количество() > 1 И МассивСтрокНС.Количество() > 1 Тогда
					МассивСтрокНС[0] = МассивСтрокНС[0] + " + " + МассивСтрок[0];
					МассивСтрокНС[1] = МассивСтрокНС[1] + " + " + МассивСтрок[1];
					
					НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки] = МассивСтрокНС[0] + " = " + МассивСтрокНС[1]
						+ " = " + НоваяСтрока["Количество_"+ СтрокаПериода.ИмяКолонки];
				ИначеЕсли МассивСтрок.Количество() > 1 Тогда
					НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки] = МассивСтрокНС[0] + " + " + МассивСтрок[0]
						+ " = " + МассивСтрокНС[0] + " + " + МассивСтрок[1]
						+ " = " + НоваяСтрока["Количество_"+ СтрокаПериода.ИмяКолонки];
				КонецЕсли;
			
			Иначе
				НоваяСтрока[Элемент.Ключ + СтрокаПериода.ИмяКолонки] = СтрокаТаблицы[Элемент.Значение];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Элемент Из СтруктураИтоговыхРеквизитов Цикл
			НоваяСтрока[Элемент.Значение] = НоваяСтрока[Элемент.Значение] + СтрокаТаблицы[Элемент.Ключ];
		КонецЦикла;
		
		Если ПолуфабрикатыПоДатам <> Неопределено 
			И СтрокаТаблицы.Полуфабрикат Тогда
			
			Для каждого Элемент Из СтруктураРеквизитов Цикл
				Если СтруктураИтоговыхРеквизитов.Свойство(Элемент.Значение) Тогда
					НоваяСтрокаПолуфабрикаты[Элемент.Ключ + СтрокаПериода.ИмяКолонки] = НоваяСтрокаПолуфабрикаты[Элемент.Ключ + СтрокаПериода.ИмяКолонки] + СтрокаТаблицы[Элемент.Значение];
				Иначе
					НоваяСтрокаПолуфабрикаты[Элемент.Ключ + СтрокаПериода.ИмяКолонки] = СтрокаТаблицы[Элемент.Значение];
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент Из СтруктураИтоговыхРеквизитов Цикл
				НоваяСтрокаПолуфабрикаты[Элемент.Значение] = НоваяСтрокаПолуфабрикаты[Элемент.Значение] + СтрокаТаблицы[Элемент.Ключ];
			КонецЦикла;
			
			НоваяСтрока["Замещен_" + СтрокаПериода.ИмяКолонки] = Ложь;
			НоваяСтрока["ЗамещенКЗаказу_" + СтрокаПериода.ИмяКолонки] = Ложь;
			НоваяСтрока["Отменено_" + СтрокаПериода.ИмяКолонки] = Ложь;
			НоваяСтрока["Комментарий_" + СтрокаПериода.ИмяКолонки] = "";
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

// Процедура рассчитывает добавленное поле "Номер строки" для кросс-таблицы
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - Форма в которой есть кросс-таблица
//  ИмяРеквизитаКроссТаблицы - Строка - Имя кросс-таблицы в форме.
//
Процедура РассчитатьНомерСтрокиКроссТаблицы(Форма, Знач ИмяРеквизитаКроссТаблицы) Экспорт 

	КроссТаблица = Форма[ИмяРеквизитаКроссТаблицы]; // см. СлужебнаяКроссТаблица 
	 
	НомерСтроки = 0;
	Для каждого СтрокаТЧ Из КроссТаблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТЧ.НомерСтроки = НомерСтроки;
	
	КонецЦикла; 

КонецПроцедуры
 
#КонецОбласти 

// Возвращает служебную таблицу значений
//
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит:
//  * НомерСтроки - Число - 
//
Функция СлужебнаяКроссТаблица() Экспорт
	
	Возврат Неопределено;
	
КонецФункции


#Область  ПроцедурыИФункцииОбщегоНазначенияДляПланирования

// Расчет дат начала и окончания периода планирования с заданной периодичностью
//
// Параметры:
//  Периодичность  	- ПеречислениеСсылка.Периодичность - Периодичность с которой нужно рассчитать даты
//  НачалоПериода  	- Дата - Дата начала периода
//  ОкончаниеПериода  	- Дата - Дата окончания периода.
//  ТекущаяДатаСеанса   - Дата - Текущая дата.
//  КоличествоПериодов - Число
//  ТребуетсяПересчетОкончанияПериода - Булево
//
Процедура УстановитьНачалоОкончаниеПериодаПлана(Знач Периодичность, НачалоПериода, ОкончаниеПериода, ТекущаяДатаСеанса, КоличествоПериодов = 1, ТребуетсяПересчетОкончанияПериода = Ложь) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		
		НачалоПериода = РассчитатьДатуНачалаПериода(НачалоПериода, Периодичность);
		
	Иначе
		
		НачалоПериода = РассчитатьДатуНачалаПериода(ТекущаяДатаСеанса, Периодичность);
		
	КонецЕсли;
	
	Если ТребуетсяПересчетОкончанияПериода Тогда
		
		ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, КоличествоПериодов);
		
	ИначеЕсли ЗначениеЗаполнено(ОкончаниеПериода) И Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") И ОкончаниеПериода > НачалоПериода Тогда
		// Перерасчет даты окончания не нужен
	ИначеЕсли ЗначениеЗаполнено(ОкончаниеПериода) И ОкончаниеПериода > НачалоПериода Тогда
		
		НачалоПоследнегоПериода = РассчитатьДатуНачалаПериода(ОкончаниеПериода, Периодичность);
		ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПоследнегоПериода, Периодичность, 1);
		
	Иначе
		
		ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, КоличествоПериодов);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок для интервала дат с заданной периодичностью (День, неделя, декада, месяц и т.д.).
//
// Параметры:
//  Периодичность 	- ПеречислениеСсылка.Периодичность - Периодичность для которой нужно сформировать заголовок
//  ДатаНачала 		- Дата - Дата начала периода
//  ДатаОкончания 	- Дата - Дата окончания периода
//  ОтображатьНомерПериода  - Булево - Флаг отображения заголовка по номеру периода в пределах года.
//  Замещен - Булево
//
// Возвращаемое значение:
//  Строка - Текстовое представление заголовка периода.
//
Функция СформироватьЗаголовокПериода(Знач Периодичность, Знач ДатаНачала, Знач ДатаОкончания, Знач ОтображатьНомерПериода = Ложь, Замещен = Ложь) Экспорт
	
	Заголовок = "";
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Если ОтображатьНомерПериода Тогда
			Заголовок = Формат(ДеньГода(ДатаНачала), "ЧДЦ=0; ЧГ=0") + " " + НСтр("ru='день'");
		Иначе
			Заголовок = Формат(ДатаНачала, "ДЛФ=D");
		КонецЕсли;
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Если ОтображатьНомерПериода Тогда
			Заголовок = НСтр("ru='%НомерНедели% неделя'");
			Если Год(ДатаНачала) <> Год(ДатаОкончания) Тогда
				НомерНедели = Формат(НеделяГода(ДатаНачала), "ЧДЦ=0; ЧГ=0") + "/" +  Формат(НеделяГода(ДатаОкончания), "ЧДЦ=0; ЧГ=0");
			Иначе
				НомерНедели = Формат(НеделяГода(ДатаНачала), "ЧДЦ=0; ЧГ=0");
			КонецЕсли; 
			Заголовок = СтрЗаменить(Заголовок, "%НомерНедели%", НомерНедели);
		Иначе
			ТекстДатаНачала = Формат(НачалоДня(ДатаНачала)+1, НСтр("ru = 'ДФ=dd.MM'")); 
			ТекстДатаОкончания = Формат(ДатаОкончания, НСтр("ru = 'ДФ=dd.MM'"));
			Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - %2'"), ТекстДатаНачала, ТекстДатаОкончания);
		КонецЕсли;
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		ТекстДатаНачала = Формат(НачалоДня(ДатаНачала)+1, НСтр("ru = 'ДФ=dd.MM'")); 
		ТекстДатаОкончания = Формат(ДатаОкончания, НСтр("ru = 'ДФ=dd.MM'"));
		Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - %2'"), ТекстДатаНачала, ТекстДатаОкончания);
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Если ОтображатьНомерПериода Тогда
			Заголовок = Формат(Месяц(НачалоДня(ДатаНачала)+1), "ЧДЦ=0; ЧГ=0") + " " + НСтр("ru='месяц'");
		Иначе
			ФорматнаяСтрока = "ДФ='MMMM yyyy'; L =%Язык%";
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			#Иначе
				КодОсновногоЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
			#КонецЕсли
			ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока,"%Язык%", КодОсновногоЯзыка);
			Заголовок = Формат(НачалоДня(ДатаНачала)+1, ФорматнаяСтрока);
		КонецЕсли;
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Если ОтображатьНомерПериода Тогда
			Заголовок = Формат(ДатаНачала, НСтр("ru = 'ДФ=''q'''")) + " " + НСтр("ru='квартал'");
		Иначе
			ТекстДатаНачала = Формат(ДатаНачала, НСтр("ru = 'ДФ=''q'''"));
			ТекстДатаОкончания = Формат(ДатаНачала, НСтр("ru = 'ДФ=yyyy'"));
			Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 кв. %2'"), ТекстДатаНачала, ТекстДатаОкончания);
		КонецЕсли;
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Если ОтображатьНомерПериода Тогда
			Заголовок = ?(ДатаНачала=НачалоГода(ДатаНачала),"1", "2");
		Иначе
			ТекстДатаНачала = ?(ДатаНачала=НачалоГода(ДатаНачала),"1", "2");
			ТекстДатаОкончания = Формат(ДатаНачала, НСтр("ru = 'ДФ=yyyy'"));
			Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 полугодие %2'"), ТекстДатаНачала, ТекстДатаОкончания);
		КонецЕсли;
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Заголовок = Формат(ДатаНачала, НСтр("ru = 'ДФ=yyyy'")) + НСтр("ru = ' г.'");
	Иначе 
		Заголовок = Строка(ДатаНачала);
	КонецЕсли;
	
	Если Замещен Тогда
		Заголовок = Заголовок + " " + НСтр("ru='(замещен)'");
	КонецЕсли;
	
	Возврат Заголовок;

КонецФункции

// Рассчитывает дату начала периода по указанной дате и периодичности
//
// Параметры:
//  Дата			 - Дата							 - дата, к которой будет рассчитана дата начала периода
//  Периодичность	 - ПеречислениеСсылка.Периодичность	 - значение перечисления "Периодичность".
// 
// Возвращаемое значение:
//  Дата - Дата начала периода
//
Функция РассчитатьДатуНачалаПериода(Знач Дата, Знач Периодичность) Экспорт
	
	ОдинДень = 86400;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ДатаНачала = НачалоДня(Дата);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ДатаНачала = НачалоНедели(Дата);
				
	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда
		
		ДеньМесяца   = День(Дата);
		НачалоМесяца = НачалоМесяца(Дата);
		
		Если ДеньМесяца = 1 Или ДеньМесяца = 11 Или ДеньМесяца = 21 Тогда
			ДатаНачала = Дата;
		ИначеЕсли ДеньМесяца <= 10 Тогда // Первая декада
			ДатаНачала = НачалоМесяца
		ИначеЕсли ДеньМесяца <= 20 Тогда // Вторая декада
			ДатаНачала = НачалоМесяца + ОдинДень * 10;
		Иначе // Третья декада
			ДатаНачала = НачалоМесяца + ОдинДень * 20;
		КонецЕсли;
		
	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда
		
		ДатаНачала = НачалоМесяца(Дата);
		
	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда
		
		ДатаНачала = НачалоКвартала(Дата);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда
		
		НачалоГода      = НачалоГода(Дата);
		НачалоПолугодия = ДобавитьМесяц(НачалоГода,6);
		
		Если Дата >= НачалоПолугодия Тогда
			ДатаНачала = НачалоПолугодия;
		Иначе
			ДатаНачала = НачалоГода;
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда
		
		ДатаНачала = НачалоГода(Дата);
		
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

// Рассчитывает дату окончания периода по указанной дате и периодичности
//
// Параметры:
//  Дата			 - Дата							 - дата, к которой будет рассчитана дата окончания периода
//  Периодичность	 - ПеречислениеСсылка.Периодичность	 - значение перечисления "Периодичность".
// 
// Возвращаемое значение:
//  Дата - Дата окончания периода.
//
Функция РассчитатьДатуОкончанияПериода(Знач Дата, Знач Периодичность) Экспорт
	
	ОдинДень = 86400;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ДатаОкончания = КонецДня(Дата);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ДатаОкончания = КонецНедели(Дата);
				
	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда
		
		ДеньМесяца   = День(Дата);
		КонецМесяца = КонецМесяца(Дата);
		НачалоМесяца = НачалоМесяца(Дата);
		
		Если ДеньМесяца = 10 Или ДеньМесяца = 20 Или ДеньМесяца = День(КонецМесяца) Тогда
			ДатаОкончания = КонецДня(Дата);
		ИначеЕсли ДеньМесяца <= 9 Тогда // Первая декада
			ДатаОкончания = НачалоМесяца - 1 + ОдинДень * 10
		ИначеЕсли ДеньМесяца <= 19 Тогда // Вторая декада
			ДатаОкончания = НачалоМесяца - 1 + ОдинДень * 20;
		Иначе // Третья декада
			ДатаОкончания = КонецМесяца;
		КонецЕсли;
		
	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда
		
		ДатаОкончания = КонецМесяца(Дата);
		
	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда
		
		ДатаОкончания = КонецКвартала(Дата);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда
		
		КонецГода      = КонецГода(Дата);
		КонецПолугодия = ДобавитьМесяц(КонецГода,-6);
		
		Если Дата < КонецПолугодия Тогда
			ДатаОкончания = КонецПолугодия;
		Иначе
			ДатаОкончания = КонецГода;
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда
		
		ДатаОкончания = КонецГода(Дата);
		
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

// Проверяет даты периода в табличной части соответствуют границам периода планирования.
//
// Параметры:
//  Объект    - ДокументСсылка.ПланЗакупок - документ плана, в котором проверяют даты периода
// 	          - ДокументСсылка.ПланОстатков -
// 	          - ДокументСсылка.ПланПродаж -
// 	          - ДокументСсылка.ПланПродажПоКатегориям -
// 	          - ДокументСсылка.ПланПроизводства -
// 	          - ДокументСсылка.ПланСборкиРазборки - 
// 	          - ДанныеФормыСтруктура - со свойством:
// 	             * Ссылка - ДокументСсылка
//  Отказ     - Булево - Присваивается Истина, если операция выполнена не успешно
//  Параметры - Структура - Дополнительные параметры (ДатаНачала, ДатаОкончания и т.д.).
//
Процедура ПроверитьДатуПериодаТЧ(Объект, Отказ, Параметры) Экспорт 

	Если ЗначениеЗаполнено(Параметры.Периодичность) И ЗначениеЗаполнено(Параметры.ДатаНачала) И ЗначениеЗаполнено(Параметры.ДатаОкончания) Тогда
		
		ПрефиксПутиКТЧ = "";
		Если Параметры.Свойство("ПрефиксПутиКТЧ") Тогда
			ПрефиксПутиКТЧ = Параметры.ПрефиксПутиКТЧ;
		КонецЕсли;
		
		Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
			КлючДанных = Объект;
		Иначе
			КлючДанных = Объект.Ссылка;
		КонецЕсли;
		
		ШаблонАдреса = " " + НСтр("ru='в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		ШаблонАдреса = СтрЗаменить(ШаблонАдреса,"%ПредставлениеТЧ%", Параметры.ПредставлениеТЧ);
		
		ТекстОшибки = НСтр("ru='%1 должна соответствовать периоду плана ""%2"" - ""%3""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Параметры.ПредставлениеДатыПериода,
			Формат(Параметры.ДатаНачала, "ДЛФ=DD"), Формат(Параметры.ДатаОкончания, "ДЛФ=DD"));
		
		Для Каждого СтрокаТЧ Из Объект[Параметры.ИмяТЧ] Цикл
			
			АдресОшибки = СтрЗаменить(ШаблонАдреса,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);

			ДатаПериода = СтрокаТЧ[Параметры.ИмяПоляДатыПериода];
			
			Если ЗначениеЗаполнено(ДатаПериода) И (ДатаПериода < Параметры.ДатаНачала ИЛИ ДатаПериода > Параметры.ДатаОкончания) Тогда
				
				ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПрефиксПутиКТЧ + Параметры.ИмяТЧ, 
					СтрокаТЧ.НомерСтроки, Параметры.ИмяПоляДатыПериода);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					КлючДанных,
					ПутьКТабличнойЧасти,
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Сравнивает измененные реквизиты, которые влияют на обновление интерфейса
//
// Параметры:
//  Объект               - ДокументОбъект - или реквизит формы "Объект" в котором проверяются измененные реквизиты
//  Форма                - ФормаКлиентскогоПриложения - Форма документа
//  ИмяРеквизитаПроверки - Строка - Имя реквизита создаваемого на форме для сохранения значений реквизитов объекта.
//
// Возвращаемое значение:
//  Булево - Истина, если интерфейс должен быть обновлен.
//
Функция НеобходимоОбновитьИнтерфейс(Объект, Форма, Знач ИмяРеквизитаПроверки) Экспорт 

	ПроверяемыеРеквизиты = Новый Массив();
	ПроверяемыеРеквизиты.Добавить("Периодичность");
	ПроверяемыеРеквизиты.Добавить("ПланироватьПоСумме");
	ПроверяемыеРеквизиты.Добавить("НачалоПериода");
	ПроверяемыеРеквизиты.Добавить("ОкончаниеПериода");
	ПроверяемыеРеквизиты.Добавить("ВидПлана");
	
	РеквизитыПроверки = Форма[ИмяРеквизитаПроверки];
	Если ТипЗнч(РеквизитыПроверки) = Тип("Структура") Тогда
	
		Для каждого РеквизитПроверки Из РеквизитыПроверки Цикл
		
			Если ПроверяемыеРеквизиты.Найти(РеквизитПроверки.Ключ) <> Неопределено И РеквизитПроверки.Значение <> Объект[РеквизитПроверки.Ключ] Тогда
			
				Возврат Истина;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

// Сохраняет значения реквизитов объекта в структуру на форме для последующей проверки изменений.
//
// Параметры:
// Объект               - ДокументОбъект - или реквизит формы "Объект" в котором проверяются измененные реквизиты
// Форма                - ФормаКлиентскогоПриложения
// ИмяРеквизитаПроверки - Строка - Имя реквизита созданного на форме для сохранения значений реквизитов объекта.
//
Процедура СохранитьЗначенияПроверяемыхРеквизитов(Объект, Форма, Знач ИмяРеквизитаПроверки) Экспорт 
	
	РеквизитыПроверки = Форма[ИмяРеквизитаПроверки];
	ЗаполнитьЗначенияСвойств(РеквизитыПроверки, Объект);
	
КонецПроцедуры

// Сохраняет значения реквизитов объекта в структуру на форме для последующей проверки изменений.
//
// Параметры:
// Объект                 - ДокументОбъект - или реквизит формы "Объект" в котором проверяются измененные реквизиты
// Форма                  - ФормаКлиентскогоПриложения
// ИмяРеквизитаПроверки   - Строка - Имя реквизита созданного на форме для сохранения значений реквизитов объекта
// ИменаРеквизитовОбъекта - Строка - Имена реквизитов объекта, в которые восстанавливаются значения.
//
Процедура ВосстановитьЗначенияИзПроверяемыхРеквизитов(Объект, Форма, Знач ИмяРеквизитаПроверки, Знач ИменаРеквизитовОбъекта) Экспорт 
	
	РеквизитыПроверки = Форма[ИмяРеквизитаПроверки];
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыПроверки, ИменаРеквизитовОбъекта);
	
КонецПроцедуры

// Функция возвращает значение типа плана по ссылки документа
//
// Параметры:
//  Ссылка  - ЛюбаяСсылка - Ссылка на документ плана для которого требуется определить тип.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыПланов   - Тип плана: план продаж, план закупок, план сборки (разборки) и т.д.
//
Функция ПолучитьТипПланаПоСсылке(Знач Ссылка) Экспорт 

	ТипЗначения = ТипЗнч(Ссылка);
	
	Если ТипЗначения = Тип("ДокументСсылка.ПланЗакупок") Тогда
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланЗакупок");
	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПланОстатков") Тогда
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланОстатков");
	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПланПродаж") Тогда
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланПродаж");
	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПланПродажПоКатегориям") Тогда
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланПродажПоКатегориям");
	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПланВнутреннихПотреблений") Тогда
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланВнутреннихПотреблений");
		
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПланСборкиРазборки") Тогда
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланСборкиРазборки");
	
	Иначе
	
		ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПустаяСсылка");
	
	КонецЕсли; 

	Возврат ТипПлана;
	
КонецФункции 

// Функция - Получить текст выбираемых полей компоновки с учетом пользовательских настроек.
//
// Параметры:
//  КомпоновщикНастроек			 - КомпоновщикНастроекКомпоновкиДанных 	 - компоновщик настроек, по которому получаются поля
//  УдалятьНеиспользуемыеПоля	 - Булево	 - Если Истина, то из пользовательских полей удаляются все не используемые поля
//  ИспользуемыеПоля			 - Массив	 - используемые для выборки поля.
//
// Возвращаемое значение:
//  Строка - строковое перечисление выбираемых полей.
//
Функция ПолучитьТекстВыбираемыхПолейКомпоновки(КомпоновщикНастроек, УдалятьНеиспользуемыеПоля = Ложь, ИспользуемыеПоля = Неопределено) Экспорт 
	
	ПоляЗаполнения = "";
	
	Если ИспользуемыеПоля = Неопределено Тогда
		ИспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	ПоляГруппировки = ПолучитьПоляГруппировок(КомпоновщикНастроек);
	ПоляВыбора = ПолучитьПоляВыбора(КомпоновщикНастроек);
		
	Если ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки) Тогда
		НастройкаПользователя = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки);
		Если НастройкаПользователя <> Неопределено
			И НастройкаПользователя.Структура.Количество() > 0
			И НастройкаПользователя.Структура[0].Использование Тогда
			
			Если УдалятьНеиспользуемыеПоля Тогда
				Для каждого Поле Из ПоляГруппировки Цикл
					
					Если НЕ Поле.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИспользуемыеПоля.Найти(Строка(Поле.Поле)) = Неопределено Тогда
					
						Поле.Использование = Ложь;
					
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки) Тогда
		НастройкаПользователя = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки);
		Если НастройкаПользователя <> Неопределено Тогда
			Если УдалятьНеиспользуемыеПоля Тогда
				Для каждого Поле Из ПоляВыбора Цикл
					
					Если НЕ Поле.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИспользуемыеПоля.Найти(Строка(Поле.Поле)) = Неопределено Тогда
					
						Поле.Использование = Ложь;
					
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Для каждого Поле Из ПоляГруппировки Цикл
		Если НЕ Поле.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ПоляЗаполнения) Тогда
			ПоляЗаполнения = ПоляЗаполнения + ", ";
		КонецЕсли; 
		ПоляЗаполнения = ПоляЗаполнения + Строка(Поле.Поле);
		
	КонецЦикла; 
	Для каждого Поле Из ПоляВыбора Цикл
		Если НЕ Поле.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ПустаяСтрока(ПоляЗаполнения) Тогда
			ПоляЗаполнения = ПоляЗаполнения + ", ";
		КонецЕсли; 
		ПоляЗаполнения = ПоляЗаполнения + Строка(Поле.Поле);
	КонецЦикла;
	
	Возврат ПоляЗаполнения;

КонецФункции 

// Возвращает поля группировки компоновщика настроек
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик в котором необходимо получить поля группировки.
//
// Возвращаемое значение:
//  КоллекцияПолейГруппировкиКомпоновкиДанных - Коллекция элементов полей группировки.
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек) Экспорт 
	
	ПоляГруппировки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки) Тогда
		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 
			И КомпоновщикНастроек.Настройки.Структура[0].Использование Тогда
			ПоляГруппировки = КомпоновщикНастроек.Настройки.Структура[0].ПоляГруппировки.Элементы;
		КонецЕсли;
	Иначе
		ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройки <> Неопределено
			И ЭлементНастройки.Структура.Количество() > 0
			И ЭлементНастройки.Структура[0].Использование Тогда
			ПоляГруппировки = ЭлементНастройки.Структура[0].ПоляГруппировки.Элементы;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляГруппировки;

КонецФункции 

// Возвращает поля выбора компоновщика настроек
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик в котором необходимо получить поля выбора.
//
// Возвращаемое значение:
//  КоллекцияВыбранныхПолейКомпоновкиДанных - Коллекция элементов полей выбора.
//
Функция ПолучитьПоляВыбора(КомпоновщикНастроек) Экспорт 
	
	ПоляВыбора = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки) Тогда
		ПоляВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	Иначе
		ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройки <> Неопределено Тогда
			ПоляВыбора = ЭлементНастройки.Элементы;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляВыбора;

КонецФункции 

// Вычисление дня недели
//
// Параметры:
//	ДеньНедели	 - ПеречислениеСсылка.ДниНедели - день недели.
// Возвращаемое значение:
//	Число - номер дня недели.
Функция НомерДняНедели(Знач ДеньНедели) Экспорт 

	Если НЕ ЗначениеЗаполнено(ДеньНедели) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Понедельник") Тогда
		Возврат 1;
	ИначеЕсли ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Вторник") Тогда
		Возврат 2;
	ИначеЕсли ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Среда") Тогда
		Возврат 3;
	ИначеЕсли ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Четверг") Тогда
		Возврат 4;
	ИначеЕсли ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Пятница") Тогда
		Возврат 5;
	ИначеЕсли ДеньНедели = ПредопределенноеЗначение("Перечисление.ДниНедели.Суббота") Тогда
		Возврат 6;
	Иначе
		Возврат 7
	КонецЕсли;

КонецФункции 

// Возвращает имя подсистемы "Планирование" в УТ /"БюджетированиеИПланирование" в КА и УП.
// 
// Возвращаемое значение:
//  Строка - Имя подсистемы планирования
Функция ИмяПодсистемыПланирования() Экспорт
	
	Возврат ОбщегоНазначенияУТВызовСервера.ИмяПодсистемыПланирования();
	
КонецФункции

#КонецОбласти

#Область ПростоеЗаполнение

// Возвращает отбор для выборки показателей
//
// Параметры:
//  ТипПлана			 - ПеречислениеСсылка.ТипыПланов	 - Значение перечисления типы плана
//  Параметры			 - Структура						 - Значение для отбора
//  ПараметрыВидаПлана	 - Структура						 - Значение реквизитов вида плана.
// 
// Возвращаемое значение:
//  Структура - Структура отбора
//
Функция ОтборДляЗаполненияПоказателей(ТипПлана, Параметры, ПараметрыВидаПлана) Экспорт
	
	Отбор = Новый Структура();
	
	Если ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланЗакупок") Тогда
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад Тогда
			Отбор.Вставить("ОтборСклад", 		Параметры.Склад);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьПодразделение") И ПараметрыВидаПлана.ЗаполнятьПодразделение Тогда
			Отбор.Вставить("ОтборПодразделениеЗакупки",Параметры.Подразделение);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьПартнера") И ПараметрыВидаПлана.ЗаполнятьПартнера Тогда
			Если Параметры.Свойство("Поставщик") И Параметры.Поставщик Тогда
				Отбор.Вставить("ОтборПоставщик", 	Параметры.Партнер);
			КонецЕсли;
			Если Параметры.Свойство("Клиент") И Параметры.Клиент Тогда
				Отбор.Вставить("ОтборКлиент", 	Параметры.Партнер);
			КонецЕсли;
			Отбор.Вставить("ОтборПартнер", 		Параметры.Партнер);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСоглашение") И ПараметрыВидаПлана.ЗаполнятьСоглашение Тогда
			Отбор.Вставить("ОтборСоглашение", 	Параметры.Соглашение);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСоглашение")
			И ПараметрыВидаПлана.ЗаполнятьСоглашение
			И Параметры.Свойство("ВидЦеныПоставщика") Тогда
			Отбор.Вставить("ОтборВидЦеныПоставщика",	Параметры.ВидЦеныПоставщика);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланОстатков") Тогда
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад Тогда
			Отбор.Вставить("ОтборСклад", 		Параметры.Склад);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланПродаж") Тогда
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад Тогда
			Отбор.Вставить("ОтборСклад", 		Параметры.Склад);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьПодразделение") И ПараметрыВидаПлана.ЗаполнятьПодразделение Тогда
			Отбор.Вставить("ОтборПодразделениеПродажи",Параметры.Подразделение);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьПартнера") И ПараметрыВидаПлана.ЗаполнятьПартнера Тогда
			Если Параметры.Свойство("Поставщик") И Параметры.Поставщик Тогда
				Отбор.Вставить("ОтборПоставщик", 	Параметры.Партнер);
			КонецЕсли;
			Если Параметры.Свойство("Клиент") И Параметры.Клиент Тогда
				Отбор.Вставить("ОтборКлиент", 	Параметры.Партнер);
			КонецЕсли;
			Отбор.Вставить("ОтборПартнер", 		Параметры.Партнер);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСоглашение") И ПараметрыВидаПлана.ЗаполнятьСоглашение Тогда
			Отбор.Вставить("ОтборСоглашение", 	Параметры.Соглашение);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьМенеджера") И ПараметрыВидаПлана.ЗаполнятьМенеджера Тогда
			Отбор.Вставить("ОтборМенеджер", 	Параметры.Менеджер);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьФорматМагазина") И ПараметрыВидаПлана.ЗаполнятьФорматМагазина Тогда
			Отбор.Вставить("ОтборФорматМагазина", 	Параметры.ФорматМагазина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланПродажПоКатегориям") Тогда
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьПодразделение") И ПараметрыВидаПлана.ЗаполнятьПодразделение Тогда
			Отбор.Вставить("ОтборПодразделениеПродажи", Параметры.Подразделение);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад Тогда
			Отбор.Вставить("ОтборСклад", Параметры.Склад);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьФорматМагазина") И ПараметрыВидаПлана.ЗаполнятьФорматМагазина Тогда
			Отбор.Вставить("ОтборФорматМагазина", Параметры.ФорматМагазина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланСборкиРазборки") 
					И ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад Тогда
		Отбор.Вставить("ОтборСклад",Параметры.Склад);
	КонецЕсли;
	
	Если ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.ПланВнутреннихПотреблений") Тогда
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад Тогда
			Отбор.Вставить("ОтборСклад", Параметры.Склад);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.Свойство("ЗаполнятьПодразделение") И ПараметрыВидаПлана.ЗаполнятьПодразделение Тогда
			Отбор.Вставить("ОтборПодразделениеВнутреннихПотреблений", Параметры.Подразделение);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ПараметрыВидаПлана.Свойство("ПланированиеПоНазначениям") И ПараметрыВидаПлана.ПланированиеПоНазначениям
		И ПараметрыВидаПлана.Свойство("ЗаполнятьНазначениеВТЧ") И Не ПараметрыВидаПлана.ЗаполнятьНазначениеВТЧ Тогда
		Отбор.Вставить("ОтборНазначение", Параметры.Назначение);
	КонецЕсли;
		
	Возврат Отбор;
	
КонецФункции

// Возвращает отбор для выборки по умолчанию
//
// Параметры:
//  Параметры			 - Структура						 - Значение для отбора
//  ПараметрыВидаПлана	 - Структура						 - Значение реквизитов вида плана.
// 
// Возвращаемое значение:
//  Соответствие - Структура отбора
//
Функция ОтборДляВыборки(Параметры, ПараметрыВидаПлана) Экспорт
	
	Отбор = Новый Соответствие();
	
	Если ПараметрыВидаПлана.Свойство("ПланированиеПоНазначениям") И ПараметрыВидаПлана.ПланированиеПоНазначениям
		И ПараметрыВидаПлана.Свойство("ЗаполнятьНазначениеВТЧ") И Не ПараметрыВидаПлана.ЗаполнятьНазначениеВТЧ Тогда
		Отбор.Вставить("Назначение", Параметры.Назначение);
	КонецЕсли;
	
	Если ПараметрыВидаПлана.Свойство("ЗаполнятьПартнера") И ПараметрыВидаПлана.ЗаполнятьПартнера
		И ПараметрыВидаПлана.Свойство("ЗаполнятьПартнераВТЧ") И Не ПараметрыВидаПлана.ЗаполнятьПартнераВТЧ Тогда
		Отбор.Вставить("Партнер", Параметры.Партнер);
		ПараметрыПартнера = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.Партнер, "Поставщик, Клиент");
		Если ПараметрыПартнера.Свойство("Поставщик") И ПараметрыПартнера.Поставщик Тогда
			Отбор.Вставить("Поставщик", Параметры.Партнер);
		КонецЕсли;
		Если ПараметрыПартнера.Свойство("Клиент") И ПараметрыПартнера.Клиент Тогда
			Отбор.Вставить("Клиент", Параметры.Партнер);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВидаПлана.Свойство("ЗаполнятьСоглашение") И ПараметрыВидаПлана.ЗаполнятьСоглашение
		И ПараметрыВидаПлана.Свойство("ЗаполнятьСоглашениеВТЧ") И Не ПараметрыВидаПлана.ЗаполнятьСоглашениеВТЧ Тогда
		Отбор.Вставить("Соглашение", Параметры.Соглашение);
	КонецЕсли;
	
	Если ПараметрыВидаПлана.Свойство("ЗаполнятьСклад") И ПараметрыВидаПлана.ЗаполнятьСклад
		И ПараметрыВидаПлана.Свойство("ЗаполнятьСкладВТЧ") И Не ПараметрыВидаПлана.ЗаполнятьСкладВТЧ Тогда
		Отбор.Вставить("Склад", Параметры.Склад);
	КонецЕсли;
	
	Если ПараметрыВидаПлана.Свойство("ЗаполнятьПодразделение") И ПараметрыВидаПлана.ЗаполнятьПодразделение Тогда
		Отбор.Вставить("Подразделение", Параметры.Подразделение);
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

// Устанавливает представление формулы
//
// Параметры:
// Форма             - ФормаКлиентскогоПриложения - Форма документа
// ТекущаяСтрока     - ДанныеФормыЭлементКоллекции - Текущие данные табличной части.
//
Процедура УстановитьПредставлениеФормулы(Форма, ТекущаяСтрока) Экспорт
	
	Если Форма.Объект.КроссТаблица Тогда
		
		АктивныеПериоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
		
		Для каждого Период Из АктивныеПериоды Цикл
			
			Если ТекущаяСтрока.Свойство("ФормулаВычисление_" + Период.ИмяКолонки) Тогда
				Если ТекущаяСтрока.Свойство("Полуфабрикат")
					И ТекущаяСтрока.Полуфабрикат Тогда
					ТекущаяСтрока["ФормулаВычисление_" + Период.ИмяКолонки] = ТекстУстановкиФормулыПолуфабриката();
				Иначе
					ТекущаяСтрока["ФормулаВычисление_" + Период.ИмяКолонки] = ?(Не ЗначениеЗаполнено(ТекущаяСтрока["ФормулаВычисление_" + Период.ИмяКолонки]), 
						ТекстУстановкиНовойФормулы(), ТекущаяСтрока["ФормулаВычисление_" + Период.ИмяКолонки]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если ТекущаяСтрока.Свойство("ФормулаВычисление") Тогда
			ТекущаяСтрока.ФормулаВычисление = ?(Не ЗначениеЗаполнено(ТекущаяСтрока.ФормулаВычисление), 
				ТекстУстановкиНовойФормулы(), ТекущаяСтрока.ФормулаВычисление);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Очищает значение реквизита "ФормулаВычисление"
//
// Параметры:
// Форма             - ФормаКлиентскогоПриложения - Форма документа.
//
Процедура ОчиститьЗначениеФормулы(Форма) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ФормулаВычисление", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	
	Если СтруктураПоиска.ФормулаВычисление <> Неопределено Тогда
		Форма.ФормулаВычисление = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значения дополнительных параметров
//
// Параметры:
// Форма           - ФормаКлиентскогоПриложения - Форма документа
// ДопРеквизиты    - Массив из см. Планирование.СтруктураДопПоля - Массив дополнительных реквизитов
// ИмяТЧ           - Строка - Имя табличной части.
//
Процедура ОтобразитьЗначениеДополнительныхПараметров(Форма, ДопРеквизиты, ИмяТЧ) Экспорт
	
	ТекущиеДанные = Форма.Элементы[ИмяТЧ].ТекущиеДанные;
	ТекущийЭлементПолеФормы = Форма.Элементы[ИмяТЧ].ТекущийЭлемент; // ПолеФормы - 
	АктивныеПериоды = Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	
	Префикс = ИмяТЧ + "Количество_";
	Префикс2 = ИмяТЧ + "КартинкаКомментарий_";
	
	Если ТекущиеДанные = Неопределено Тогда
		ПланированиеКлиентСервер.ОчиститьЗначениеФормулы(Форма);
		Возврат;
	КонецЕсли;
	
	ПериодНайден = Ложь;
	
	Если ТекущийЭлементПолеФормы <> Неопределено Тогда
		
		Для каждого Период Из АктивныеПериоды Цикл
			
			Для каждого ДопРеквизит Из ДопРеквизиты Цикл
				
				ИмяКолонки = ДопРеквизит.Имя + "_" + Период.ИмяКолонки;
				
				Если ТекущиеДанные.Свойство(ИмяКолонки) Тогда
					Форма[ДопРеквизит.Имя] = ?(АктивныеПериоды.Количество() = 1, ТекущиеДанные[ИмяКолонки], Неопределено);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТекущийЭлементПолеФормы.Имя = Префикс + Период.ИмяКолонки
				ИЛИ ТекущийЭлементПолеФормы.Имя = Префикс2 + Период.ИмяКолонки Тогда
				
				ПериодНайден = Истина;
				
				Если ТекущиеДанные.Свойство("ФормулаВычисление_" + Период.ИмяКолонки) 
					И НЕ ЗначениеЗаполнено(ТекущиеДанные["ФормулаВычисление_" + Период.ИмяКолонки]) Тогда
					ТекущиеДанные["ФормулаВычисление_" + Период.ИмяКолонки] = ТекстУстановкиНовойФормулы();
				КонецЕсли;
				
				Для каждого ДопРеквизит Из ДопРеквизиты Цикл
					
					ИмяКолонки = ДопРеквизит.Имя + "_" + Период.ИмяКолонки;
					
					Если ТекущиеДанные.Свойство(ИмяКолонки) Тогда
						Форма[ДопРеквизит.Имя] = ТекущиеДанные[ИмяКолонки];
					КонецЕсли;
					
					Если ДопРеквизит.Имя = "ФормулаВычисление" И ДопРеквизит.СоздаватьРеквизит 
						И Форма[ДопРеквизит.ПутьКДанным] <> ТекстУстановкиФормулыПолуфабриката() Тогда
						ПолеВыражения = Форма.Элементы[ДопРеквизит.ИмяЭлемента]; // ПолеФормы, РасширениеПоляФормыДляПоляНадписи - 
						ПолеВыражения.Гиперссылка = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ПериодНайден Тогда
		
		Для каждого ДопРеквизит Из ДопРеквизиты Цикл
			Если ДопРеквизит.Имя = "ФормулаВычисление" И ДопРеквизит.СоздаватьРеквизит Тогда
				Форма[ДопРеквизит.Имя] = ТекстВыборкаКолонкиКоличества();
				ПолеВыражения = Форма.Элементы[ДопРеквизит.ИмяЭлемента]; // ПолеФормы, РасширениеПоляФормыДляПоляНадписи - 
				ПолеВыражения.Гиперссылка = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли; 
	
КонецПроцедуры

// Функция - возвращает текст установки новой формулы
// 
// Возвращаемое значение:
//  Строка - представление пустой формулы.
//
Функция ТекстУстановкиНовойФормулы() Экспорт 

	Возврат НСтр("ru = 'Задать формулу'");

КонецФункции 

// Функция возвращает текст колонки количества
//
// Возвращаемое значение:
//	Строка - текст колонки количества.
Функция ТекстВыборкаКолонкиКоличества() Экспорт 

	Возврат НСтр("ru = 'Выберите колонку количества'");

КонецФункции

// Функция возвращает текст для строки полуфабриката
//
// Возвращаемое значение:
//	Строка - текст строки полуфабриката.
Функция ТекстУстановкиФормулыПолуфабриката() Экспорт 

	Возврат НСтр("ru = 'Выберите строку с продукцией'");

КонецФункции

// Вычисление номера текущей колонки
//
// Параметры:
//	СлужебныеПараметры	 - Структура - служебные параметры.
//	ПользовательскийПараметр - Структура - пользовательские параметры.
// Возвращаемое значение:
//	Число - номер текущий колонки.
Функция НомерТекущейКолонки(СлужебныеПараметры = Неопределено, ПользовательскийПараметр = Неопределено) Экспорт
	
	Если ТипЗнч(СлужебныеПараметры) = Тип("Структура") И СлужебныеПараметры.Свойство("Период") Тогда
		
		Возврат СлужебныеПараметры.Период.НомерКолонки;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

// Вычисление значения колонки
//
// Параметры:
//	СлужебныеПараметры	 - Структура - служебные параметры.
//	ПользовательскийПараметр - Структура - пользовательские параметры.
// Возвращаемое значение:
//	Число - значение в колонке.
Функция ЗначениеКолонки(СлужебныеПараметры = Неопределено, ПользовательскийПараметр = Неопределено) Экспорт
	
	Если ПользовательскийПараметр <> Неопределено И ТипЗнч(СлужебныеПараметры) = Тип("Структура") И СлужебныеПараметры.Свойство("Периоды") Тогда
		
		НайденныеСтроки = СлужебныеПараметры.Периоды.НайтиСтроки(Новый Структура("НомерКолонки", ПользовательскийПараметр));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Возврат СлужебныеПараметры.ТекущиеДанные["Количество_"+НайденныеСтроки[0].ИмяКолонки];
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьПараметрыКФункциям(РасчетнаяФормула, Параметры) Экспорт
	
	МассивФункций = ФункцииФормулы();
	
	Для каждого ТекущаяФункция Из МассивФункций Цикл
		РасчетнаяФормула = СтрЗаменить(РасчетнаяФормула, ТекущаяФункция, "ПланированиеКлиентСервер." + ТекущаяФункция + Параметры + ",");
	КонецЦикла;
	
	Возврат РасчетнаяФормула;
	
КонецФункции

Функция УдалитьПараметрыВФункциях(РасчетнаяФормула, Параметры) Экспорт

	МассивФункций = ФункцииФормулы();
	
	Для каждого ТекущаяФункция Из МассивФункций Цикл
		РасчетнаяФормула = СтрЗаменить(РасчетнаяФормула, ТекущаяФункция + Параметры + ",", ТекущаяФункция);
	КонецЦикла;
	
	Возврат РасчетнаяФормула;

КонецФункции

Функция ФункцииФормулы()
	
	МассивФункций = Новый Массив();
	МассивФункций.Добавить("ЗначениеКолонки(");
	МассивФункций.Добавить("НомерТекущейКолонки(");
	
	Возврат МассивФункций
	
КонецФункции

#КонецОбласти