// @strict-types

#Область СлужебныеПроцедурыИФункции

#Область АсинхронныеОперации

// Ожидает завершения асинхронной операции.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  АсинхронныеОперации   - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
Процедура ОжидатьЗавершенияАсинхронныхОпераций(ОповещениеОЗавершении, АсинхронныеОперации) Экспорт
	
	КонтекстОжидания = НовыйКонтекстОжиданияЗавершенияАсинхронныхОпераций();
	КонтекстОжидания.ОповещениеОЗавершении = ОповещениеОЗавершении;
	
	ПроверитьВыполнениеАсинхронныхОпераций(АсинхронныеОперации, КонтекстОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ЗавершенныеОперации - См. ОжидатьЗавершенияАсинхронныхОпераций.АсинхронныеОперации
Функция НовыйКонтекстОжиданияЗавершенияАсинхронныхОпераций()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ЗавершенныеОперации", Новый Массив);
	Возврат Контекст;
КонецФункции

// Параметры:
//  АсинхронныеОперации - См. ОжидатьЗавершенияАсинхронныхОпераций.АсинхронныеОперации
//  КонтекстОжидания - См. НовыйКонтекстОжиданияЗавершенияАсинхронныхОпераций
Процедура ПроверитьВыполнениеАсинхронныхОпераций(АсинхронныеОперации, КонтекстОжидания)
	
	АдресаРесурсовДляПроверки = Новый Соответствие;
	ПовторитьПосле = 1;
	
	Если ЗначениеЗаполнено(АсинхронныеОперации) Тогда
		
		Для Каждого АсинхроннаяОперация Из АсинхронныеОперации Цикл
			
			Если АсинхроннаяОперация.Статус = "Выполняется" Тогда
				АдресаРесурсовДляПроверки.Вставить(АсинхроннаяОперация.ИдентификаторУчетнойЗаписи,
					АсинхроннаяОперация.АдресРесурса);
				ПовторитьПосле = Макс(ПовторитьПосле, АсинхроннаяОперация.ПовторитьПосле);
			Иначе
				КонтекстОжидания.ЗавершенныеОперации.Добавить(АсинхроннаяОперация);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресаРесурсовДляПроверки) Тогда
		ВыполнитьОбработкуОповещения(КонтекстОжидания.ОповещениеОЗавершении, КонтекстОжидания.ЗавершенныеОперации);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьВыполнениеАсинхронныхОперации", ЭтотОбъект, КонтекстОжидания);
	
	ОбщегоНазначенияБЭДКлиент.ОбработатьОповещениеЧерезИнтервал(ПовторитьПосле, Оповещение, АдресаРесурсовДляПроверки);
	
КонецПроцедуры

// Параметры:
//  АдресаРесурсовДляПроверки - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Строка - адрес ресурса для проверки результата.
//  КонтекстОжидания - См. НовыйКонтекстОжиданияЗавершенияАсинхронныхОпераций
Процедура ПроверитьВыполнениеАсинхронныхОперации(АдресаРесурсовДляПроверки, КонтекстОжидания) Экспорт
	
	Если Не ЗначениеЗаполнено(АдресаРесурсовДляПроверки) Тогда
		ВыполнитьОбработкуОповещения(КонтекстОжидания.ОповещениеОЗавершении, КонтекстОжидания.ЗавершенныеОперации);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = СервисОблачногоЭДОВызовСервера.ПроверитьВыполнениеАсинхронныхОперацииВФоне(
		АдресаРесурсовДляПроверки);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАсинхронныхОпераций", ЭтотОбъект, КонтекстОжидания);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Ожидает завершения длительной операции.
// 
// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстОжидания - См. НовыйКонтекстОжиданияЗавершенияАсинхронныхОпераций
Процедура ОбработатьРезультатПроверкиАсинхронныхОпераций(ДлительнаяОперация, КонтекстОжидания) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(КонтекстОжидания.ОповещениеОЗавершении, ДлительнаяОперация);
		Возврат;
	КонецЕсли;
	
	АсинхронныеОперации = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // Массив из см. ИнтеграцияОблачногоЭДО.НоваяАсинхроннаяОперация
	
	ПроверитьВыполнениеАсинхронныхОпераций(АсинхронныеОперации, КонтекстОжидания);
	
КонецПроцедуры

// Параметры:
//  АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - Строка - адрес значения во временном хранилище.
Функция АдресаРезультатовАсинхронныхОпераций(АсинхронныеОперации, КонтекстДиагностики) Экспорт
	
	АдресаРезультатов = Новый Соответствие; // См. АдресаРезультатовАсинхронныхОпераций
	
	Для Каждого АсинхроннаяОперация Из АсинхронныеОперации Цикл
		АдресРезультата = АдресРезультатаАсинхроннойОперации(АсинхроннаяОперация, КонтекстДиагностики);
		Если ЗначениеЗаполнено(АдресРезультата) Тогда
			АдресаРезультатов.Вставить(АсинхроннаяОперация.ИдентификаторУчетнойЗаписи, АдресРезультата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат АдресаРезультатов;
	
КонецФункции

// Параметры:
//  АсинхроннаяОперация  - см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
Функция АдресРезультатаАсинхроннойОперации(АсинхроннаяОперация, КонтекстДиагностики)
		
	Если АсинхроннаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли АсинхроннаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить асинхронную операцию облачного ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(АсинхроннаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + АсинхроннаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(АсинхроннаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + АсинхроннаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение операции облачного ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ИнтеграцияОблачногоЭДО);
		Возврат "";
	КонецЕсли;
	
	Возврат АсинхроннаяОперация.АдресРезультата;
	
КонецФункции

#КонецОбласти

#КонецОбласти
