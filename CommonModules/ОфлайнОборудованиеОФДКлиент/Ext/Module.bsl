////////////////////////////////////////////////////////////////////////////////
// Подсистема "Офлайн-оборудование".
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//  Параметры: 
//  ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения для выполнения.
//  Команда - Строка - НаименованиеКоманды.
//  ВходныеПараметры - Структура - ВыходныеПараметрыФункции.
//  ОбъектДрайвера - СправочникСсылка.ОфлайнОборудование - Объект драйвера торгового оборудования.
//  Параметры - Структура - Параметры устройства.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, ОбъектДрайвера, Параметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	Если Команда = "ЗагрузитьДанные" Тогда
		НачатьЗагрузкуДокументов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ЗагрузитьОбороты" Тогда
		НачатьЗагрузкуОборотов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ЗагрузитьЧеки" Тогда
		НачатьЗагрузкуЧековКассовойСмены(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "УстановитьФлагДанныеЗагружены" Тогда
		НачатьУстановкуФлагаДанныеЗагружены(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция осуществляет загрузку документов из облака Эвотор
//
Процедура НачатьЗагрузкуДокументов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗагрузки = Новый Структура;
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	
	ОфлайнОборудованиеОФДВызовСервера.НачатьЗагрузкуДокументов(Параметры, РезультатЗагрузки);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
		
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = РезультатЗагрузки.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ДокументыЗагрузки = ОбработатьСписокДокументов(РезультатЗагрузки.ДанныеСмен, ЕстьОшибки, СообщениеОбОшибке);
		
		Если ЕстьОшибки Тогда
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Иначе
			Результат = ОфлайнОборудование1СЭвоторВызовСервера.ЗаполнитьДатуПоследнейПопыткиЗагрузки(Параметры, ТекущаяДата());
			Если Не Результат Тогда
				СообщениеОбОшибке = НСтр("ru = 'При записи данных произошла ошибка'");
				СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
				РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			Иначе
				РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ДокументыЗагрузки);
			КонецЕсли;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку документов из облака Эвотор
//
Процедура НачатьЗагрузкуОборотов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗагрузки = Новый Структура;
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";

	ОфлайнОборудованиеОФДВызовСервера.НачатьЗагрузкуОборотовКассовойСмены(Параметры, РезультатЗагрузки);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
		
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = РезультатЗагрузки.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ОборотыСмены = ОбработатьОбороты(РезультатЗагрузки.ДанныеСмены, Параметры.НомерСмены, ЕстьОшибки, СообщениеОбОшибке);
		
		Если ЕстьОшибки Тогда
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, ОборотыСмены);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку документов из облака Эвотор
//
Процедура НачатьЗагрузкуЧековКассовойСмены(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗагрузки = Новый Структура;
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";

	ОфлайнОборудованиеОФДВызовСервера.НачатьЗагрузкуЧековКассовойСмены(Параметры, РезультатЗагрузки);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
		
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = РезультатЗагрузки.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ДокументыЗагрузки = ОбработатьСписокДокументов(РезультатЗагрузки.ДанныеСмен, ЕстьОшибки, СообщениеОбОшибке);
		
		Если ЕстьОшибки Тогда
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, ДокументыЗагрузки);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуФлагаДанныеЗагружены(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	Результат = ОфлайнОборудование1СЭвоторВызовСервера.ЗаполнитьДатуПоследнейЗагрузки(Параметры, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

Функция ОбработатьСписокДокументов(МассивДанных, ЕстьОшибки, СообщениеОбОшибке)
	
	СтруктураВозвращаемыхДанных = Новый Массив;
	СтруктураДанных = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	
	Для Каждого Смена Из МассивДанных Цикл
		
		ОтчетОПродажахККМ = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОПродажахККМ();
		ОтчетОПродажахККМ.ДатаОткрытияСмены = Смена.ДатаОткрытия;
		ОтчетОПродажахККМ.ДатаЗакрытияСмены = Смена.ДатаЗакрытия;
		ОтчетОПродажахККМ.НомерСмены        = Смена.НомерСмены;
		
		Для Каждого Чек Из Смена.ДанныеЧеков Цикл
			
			ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
			ЧекККМ.ДатаЧека                = Чек.ДатаЧека;
			ЧекККМ.НомерЧека               = Чек.ФискальныйНомерЧека;
			
			Если Чек.ПризнакРасчета = "ПРИХОД" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(1);
			ИначеЕсли Чек.ПризнакРасчета = "ВОЗВРАТПРИХОДА" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(2);
			ИначеЕсли Чек.ПризнакРасчета = "РАСХОД" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(3);
			ИначеЕсли Чек.ПризнакРасчета = "ВОЗВРАТРАСХОДА" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(4);
			Иначе
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(1);
			КонецЕсли; 
			
			Если Чек.СистемаНалогообложения = "ОСН" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(0);
			ИначеЕсли Чек.СистемаНалогообложения = "УПРОЩЕННАЯДОХОД" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(1);
			ИначеЕсли Чек.СистемаНалогообложения = "УПРОЩЕННАЯДОХОДРАСХОД" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(2);
			ИначеЕсли Чек.СистемаНалогообложения = "ЕНВД" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(3);
			ИначеЕсли Чек.СистемаНалогообложения = "ЕСН" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(4);
			ИначеЕсли Чек.СистемаНалогообложения = "ПАТЕНТ" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(5);
			ИначеЕсли Чек.СистемаНалогообложения = "" Тогда
				ЧекККМ.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
			КонецЕсли;
			
			Если Чек.ПризнакРасчета = "ПРИХОД" ИЛИ Чек.ПризнакРасчета = "ВОЗВРАТРАСХОДА" Тогда
				ЭтоПродажа = Истина;
			Иначе
				ЭтоПродажа = Ложь;
			КонецЕсли;
			Если Чек.ДанныеПоРасчетам.СуммаНаличными <> 0 Тогда
				ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
				ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(ЭтоПродажа, Чек.ДанныеПоРасчетам.СуммаНаличными, -Чек.ДанныеПоРасчетам.СуммаНаличными);
				ОплатаЧекаККМ.СуммаЭлектроннойОплаты        = 0;
				ОплатаЧекаККМ.СуммаПостоплатой              = 0;
				ОплатаЧекаККМ.СуммаПредоплатой              = 0;
				ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
			ИначеЕсли Чек.ДанныеПоРасчетам.СуммаЭлектронными <> 0 Тогда
				ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
				ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ?(ЭтоПродажа, Чек.ДанныеПоРасчетам.СуммаЭлектронными, -Чек.ДанныеПоРасчетам.СуммаЭлектронными);
				ОплатаЧекаККМ.СуммаНаличнойОплаты           = 0;
				ОплатаЧекаККМ.СуммаПостоплатой              = 0;
				ОплатаЧекаККМ.СуммаПредоплатой              = 0;
				ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
			ИначеЕсли Чек.ДанныеПоРасчетам.СуммаПостоплатами <> 0 Тогда
				ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
				ОплатаЧекаККМ.СуммаПостоплатой = ?(ЭтоПродажа, Чек.ДанныеПоРасчетам.СуммаПостоплатами, -Чек.ДанныеПоРасчетам.СуммаПостоплатами);
				ОплатаЧекаККМ.СуммаНаличнойОплаты           = 0;
				ОплатаЧекаККМ.СуммаЭлектроннойОплаты        = 0;
				ОплатаЧекаККМ.СуммаПредоплатой              = 0;
				ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
			ИначеЕсли Чек.ДанныеПоРасчетам.СуммаПредоплатами <> 0 Тогда
				ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
				ОплатаЧекаККМ.СуммаПредоплатой = ?(ЭтоПродажа, Чек.ДанныеПоРасчетам.СуммаПредоплатами, -Чек.ДанныеПоРасчетам.СуммаПредоплатами);
				ОплатаЧекаККМ.СуммаНаличнойОплаты           = 0;
				ОплатаЧекаККМ.СуммаПостоплатой              = 0;
				ОплатаЧекаККМ.СуммаЭлектроннойОплаты        = 0;
				ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
			КонецЕсли;
			
			ЧекККМ.ЭтоЧекКоррекции = Чек.ЯвляетсяЧекомКоррекции;
			Если Чек.ЯвляетсяЧекомКоррекции Тогда
				ЧекККМ.ДанныеКоррекции.ДатаКорректируемогоРасчета = Чек.ДанныеКоррекции.ДатаКорректируемогоРасчета;
				Если Чек.ДанныеКоррекции.Свойство("НомерПредписания") Тогда
					ЧекККМ.ДанныеКоррекции.НомерПредписания           = Чек.ДанныеКоррекции.НомерПредписания;
				КонецЕсли;
				ЧекККМ.ДанныеКоррекции.ТипКоррекции               = Чек.ДанныеКоррекции.ТипКоррекции;
				ЧекККМ.ДанныеКоррекции.ФискальныйНомер            = Чек.ДанныеКоррекции.ФискальныйНомер;
			КонецЕсли;
			
			Для Каждого Товар Из Чек.Товары Цикл
				
				ТоварККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
				ТоварККМ.Наименование                 = Товар.Наименование;
				ТоварККМ.Количество                   = ?(ЭтоПродажа, Товар.Количество, -Товар.Количество);
				ТоварККМ.Сумма                        = ?(ЭтоПродажа, Товар.Сумма, -Товар.Сумма);
				ТоварККМ.Цена                         = Товар.Стоимость;
				Если Товар.СтавкаНДС = 1 Тогда
					ТоварККМ.СтавкаНДС = "20";
				ИначеЕсли Товар.СтавкаНДС = 2 Тогда
					ТоварККМ.СтавкаНДС = "10";
				ИначеЕсли Товар.СтавкаНДС = 3 Тогда
					ТоварККМ.СтавкаНДС = "20/120";
				ИначеЕсли Товар.СтавкаНДС = 4 Тогда
					ТоварККМ.СтавкаНДС = "10/110";
				ИначеЕсли Товар.СтавкаНДС = 5 Тогда
					ТоварККМ.СтавкаНДС = "0";
				ИначеЕсли Товар.СтавкаНДС = 6 Тогда
					ТоварККМ.СтавкаНДС = "none";
				Иначе
					ТоварККМ.СтавкаНДС = "20";
				КонецЕсли; 
				Если Товар.ПризнакСпособаРасчета = "ПРЕДОПЛАТА100%" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(1);
				ИначеЕсли Товар.ПризнакСпособаРасчета = "ПРЕДОПЛАТА" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(2);
				ИначеЕсли Товар.ПризнакСпособаРасчета = "АВАНС" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(3);
				ИначеЕсли Товар.ПризнакСпособаРасчета = "ПОЛНЫЙРАСЧЕТ" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(4);
				ИначеЕсли Товар.ПризнакСпособаРасчета = "ЧАСТИЧНЫЙРАСЧЕТКРЕДИТ" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(5);
				ИначеЕсли Товар.ПризнакСпособаРасчета = "КРЕДИТ" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(6);
				ИначеЕсли Товар.ПризнакСпособаРасчета = "ОПЛАТАКРЕДИТА" Тогда
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(7);
				Иначе
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(4);
				КонецЕсли;
				ТоварККМ.ПризнакПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакПредметаРасчетаПоКоду(Товар.ПризнакПредметаРасчета); 
				
				Если ЗначениеЗаполнено(Товар.КодПредметаРасчета) Тогда
					ТоварККМ.КодПредметаРасчета.Значение = Товар.КодПредметаРасчета.ЗначениеКода;
					ТоварККМ.КодПредметаРасчета.ТипКода = Товар.КодПредметаРасчета.ТипКода;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Товар.МераКоличестваПредметаРасчета) Тогда
					ТоварККМ.МераКоличестваПредметаРасчета.МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.МераКоличестваПредметаРасчетаККТПоКоду(Товар.МераКоличестваПредметаРасчета.Идентификатор);
					ТоварККМ.МераКоличестваПредметаРасчета.Значение = Товар.МераКоличестваПредметаРасчета.Значение;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Товар.ДанныеАгента) Тогда
					ТоварККМ.ДанныеАгента.ИНН = Товар.ДанныеАгента.ИНН;
					ТоварККМ.ДанныеАгента.Наименование = Товар.ДанныеАгента.Наименование;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Товар.ДанныеПоставщика) Тогда
					ТоварККМ.ДанныеПоставщика.ИНН = Товар.ДанныеПоставщика.ИНН;
					ТоварККМ.ДанныеПоставщика.Наименование = Товар.ДанныеПоставщика.Наименование;
				КонецЕсли;
				
				ЧекККМ.Товары.Добавить(ТоварККМ);
			КонецЦикла;
			ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
		КонецЦикла;
		СтруктураДанных.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
	КонецЦикла;
	
	Если СтруктураДанных.ОтчетыОПродажах.Количество() > 0 Тогда
		ЕстьОшибки = Ложь;
	Иначе
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Нет данных к загрузке'");
	КонецЕсли;
	
	СтруктураВозвращаемыхДанных.Добавить(СтруктураДанных);
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции  

Функция ОбработатьОбороты(ДанныеЗагрузки, НомерСмены, ЕстьОшибки, СообщениеОбОшибке)
	
	СтруктураВозвращаемыхДанных = МенеджерОфлайнОборудованияКлиентСервер.ДанныеОборотовКассовойСмены();
	ЗаполнитьЗначенияСвойств(СтруктураВозвращаемыхДанных, ДанныеЗагрузки);
	СтруктураВозвращаемыхДанных.ДатаЗакрытияСмены = ДанныеЗагрузки.ДатаЗакрытия;
	СтруктураВозвращаемыхДанных.ДатаОткрытияСмены = ДанныеЗагрузки.ДатаОткрытия;
	СтруктураВозвращаемыхДанных.НомерСмены = НомерСмены;
	Если ЗначениеЗаполнено(ДанныеЗагрузки) Тогда
		ЕстьОшибки = Ложь;
	Иначе
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Нет данных к загрузке'");
	КонецЕсли;
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции  

// Процедура добавляет в массив выходных параметров сообщение об ошибке.
//		Параметры:
//			- ВыходныеПараметры - массив, в который будет помещено сообщение об ошибке.
//			- ТекстСообщения - текст сообщения, содержащий информация об ошибке.
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

