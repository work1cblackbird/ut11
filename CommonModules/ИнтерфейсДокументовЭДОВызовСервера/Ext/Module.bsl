
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметры просмотра электронного документа по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - объект учета.
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыОткрытияЭлектронногоДокумента
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыеПараметрыПросмотраЭлектронногоДокумента
Функция ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(Знач ОбъектУчета, Знач ПараметрыОткрытия) Экспорт
	
	Если ПараметрыОткрытия.НовыйДокумент Тогда
		ПараметрыПросмотра = ИнтерфейсДокументовЭДО.ПараметрыПросмотраНовогоЭлектронногоДокументаПоОбъектуУчета(
			ОбъектУчета, ПараметрыОткрытия);
	Иначе
		ПараметрыПросмотра = ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(
			ОбъектУчета, ПараметрыОткрытия);
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

// См. ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОписанию.
Функция ПараметрыПросмотраЭлектронногоДокументаПоОписанию(Знач ОписаниеЭлектронногоДокументаОбъектаУчета) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОписанию(ОписаниеЭлектронногоДокументаОбъектаУчета);
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыОткрытияЭлектронногоДокумента
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра
Функция ПодготовитьДанныеДляПросмотра(Знач ОбъектУчета, Знач НастройкиФормирования, Знач ПараметрыОткрытия) Экспорт
	
	ОтборОписанияОбъектаУчета = Новый Структура;
	ОтборОписанияОбъектаУчета.Вставить("Направление", НастройкиФормирования.Направление);
	Если НастройкиФормирования.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ОтборОписанияОбъектаУчета.Вставить("Организация", НастройкиФормирования.НастройкиВнутреннегоЭДО.Организация);
		ОтборОписанияОбъектаУчета.Вставить("ВидДокумента", НастройкиФормирования.НастройкиВнутреннегоЭДО.ВидДокумента);
	Иначе
		ОтборОписанияОбъектаУчета.Вставить("Организация", НастройкиФормирования.НастройкиОтправки.Отправитель);
		ОтборОписанияОбъектаУчета.Вставить("Контрагент", НастройкиФормирования.НастройкиОтправки.Получатель);
		ОтборОписанияОбъектаУчета.Вставить("Договор", НастройкиФормирования.НастройкиОтправки.Договор);
		ОтборОписанияОбъектаУчета.Вставить("ВидДокумента", НастройкиФормирования.НастройкиОтправки.ВидДокумента);
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчетаПоОтбору(ОбъектУчета, ОтборОписанияОбъектаУчета);
	
	Возврат ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета,
		 НастройкиФормирования, ПараметрыОткрытия);
	
КонецФункции

// Формирует данные электронного документа.
// 
// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл) Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл);
КонецФункции

// Возвращает параметры открытия страницы опроса.
// 
// Возвращаемое значение:
//  Строка - параметры открытия страницы опроса.
//
Функция ПараметрыОткрытияСтраницыОпроса() Экспорт

	ШаблонКонфигурации = НСтр("ru = '%1 (%2)'");
	Конфигурация = СтрШаблон(ШаблонКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	
	СтрокаВозврата = "?conf=" + КодироватьСтроку(Конфигурация, СпособКодированияСтроки.КодировкаURL);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации <> Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата + "&login="
			+ КодироватьСтроку(ДанныеАутентификации.Логин, СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	
	Возврат СтрокаВозврата;

КонецФункции

Функция ЭлектронныйДокументСообщенияЭДО(Сообщение) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЭлектронныйДокументСообщенияЭДО(Сообщение);
КонецФункции	

Функция ЕстьПравоЧтенияДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоЧтенияДокументов();
КонецФункции

Функция ЕстьПравоОбработкиДокументов() Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
КонецФункции

Функция ЕстьПравоНастройкиОбмена() Экспорт
	Возврат НастройкиЭДО.ЕстьПравоНастройкиОбмена();
КонецФункции

Функция ОтложеннаяОтправкаЭлектронныхДокументов() Экспорт
	Возврат НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
КонецФункции

Функция ЭтоВнутреннийВидДокумента(ВидДокумента) Экспорт
	Возврат ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(ВидДокумента);
КонецФункции

Процедура ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(ЭлектронныйДокумент);
КонецПроцедуры

Процедура ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий) Экспорт
	ИнтеграцияЭДО.ОтменитьФормированиеДокументовПоОбъектамУчета(ОбъектыУчета, Комментарий);	
КонецПроцедуры

Функция ИспользуетсяЭДОИВнутреннийЭДО() Экспорт	
	Возврат НастройкиЭДО.ИспользуетсяОбменЭлектроннымиДокументами() И НастройкиЭДО.ИспользуютсяВнутренниеДокументы();	
КонецФункции

Функция СообщениеОтправителя(ЭлектронныйДокумент) Экспорт
	Возврат ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
КонецФункции

Функция КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета) Экспорт	
	Возврат ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);	
КонецФункции

Функция НастройкиОтправки(КлючНастроекОтправки) Экспорт	
	Возврат НастройкиЭДО.НастройкиОтправки(КлючНастроекОтправки);	
КонецФункции

Функция ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(ОбъектУчета);
КонецФункции

Функция СостояниеОбъектаУчетаУстановлено(ОбъектУчета) Экспорт
	Возврат ИнтеграцияЭДО.СостояниеОбъектаУчетаУстановлено(ОбъектУчета);	
КонецФункции

#Область Переформирование

Функция ПараметрыПереформированияДокумента(Сообщение) Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента(Сообщение);
КонецФункции

// Выполняет действия формирования нового электронного документа и принудительного закрытия старого.
// 
// Параметры:
//  Параметры - См. ИнтерфейсДокументовЭДО.ПараметрыПереформированияДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики 
//
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПереформированияДокументов 
Функция ПереформироватьДокумент(Параметры, КонтекстДиагностики) Экспорт
	
	Результат = ИнтерфейсДокументовЭДО.НовыйРезультатПереформированияДокументов();
	
	НачатьТранзакцию();
	
	Попытка
		
		ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(Параметры.ЭлектронныйДокумент);
	
		Если Параметры.ТребуетсяФормированиеДокумента = Истина Тогда
			НаборДействий = Новый Соответствие;
			ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	
			ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
			ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
			ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета.Добавить(Параметры.ОбъектУчета);
			
			Если ЗначениеЗаполнено(Параметры.ПараметрыДействийПоЭДО.МаршрутыПодписанияОбъектов) Тогда
				ПараметрыВыполненияДействийПоЭДО.МаршрутыПодписанияОбъектов 
					= Параметры.ПараметрыДействийПоЭДО.МаршрутыПодписанияОбъектов;
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.ПараметрыДействийПоЭДО.ПодписантыОбъектов) Тогда
				ПараметрыВыполненияДействийПоЭДО.ПодписантыОбъектов = Параметры.ПараметрыДействийПоЭДО.ПодписантыОбъектов;
			КонецЕсли;
			
			Если Параметры.Свойство("Настройки") Тогда
				ПараметрыВыполненияДействийПоЭДО.НастройкиОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.Настройки);
			КонецЕсли;
				
			Если Параметры.Свойство("ДопДанные") Тогда
				ПараметрыВыполненияДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.ДопДанные);
			КонецЕсли;
			
			Результат.РезультатДействийПоЭДО = ЭлектронныеДокументыЭДО.ВыполнитьДействияЭДО(
				ПараметрыВыполненияДействийПоЭДО);
			Результат.СформированныеДокументы = Результат.РезультатДействийПоЭДО.Итог.ОбработанныеДокументы;
	
			Если ЗначениеЗаполнено(Результат.РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
				ОтменитьТранзакцию();
				Результат.ЕстьОшибки = Истина;
				Возврат Результат;
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
	
				АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(Параметры.ОбъектУчета);
				ОтборПоВидуДокумента = Новый Структура("ВидДокумента", Параметры.ВидСообщения);
				АктуальныеЭлектронныеДокументыПоВидуДокумента = АктуальныеЭлектронныеДокументы.НайтиСтроки(ОтборПоВидуДокумента);
				
				Для каждого СтрокаАктуальныйЭлектронныйДокумент Из АктуальныеЭлектронныеДокументыПоВидуДокумента Цикл
					АктуальныйЭлектронныйДокумент = СтрокаАктуальныйЭлектронныйДокумент.ЭлектронныйДокумент;
					ПакетыДокументовЭДО.ДобавитьДокументВПакет(Параметры.ИдентификаторПакета,
						АктуальныйЭлектронныйДокумент, КонтекстДиагностики);
				КонецЦикла;
	
			КонецЕсли;		
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
			Для Каждого СформированныйДокумент Из Результат.СформированныеДокументы Цикл
				ПакетыДокументовЭДО.ДобавитьДокументВПакет(Параметры.ИдентификаторПакета,
					СформированныйДокумент.Ключ, КонтекстДиагностики);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторПакета) Тогда
			ПакетыДокументовЭДО.УдалитьДокументИзПакета(Параметры.ИдентификаторПакета, Параметры.ЭлектронныйДокумент);
		КонецЕсли;
	
		Если Параметры.Свойство("ДопДанные") Тогда
			Параметры.ПараметрыДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(Параметры.ОбъектУчета, Параметры.ДопДанные);
		КонецЕсли;
		
		Если Параметры.Свойство("Комментарий") Тогда
			ПараметрыДействия = ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия();
			ПараметрыДействия.Комментарий = Параметры.Комментарий;
			Для Каждого Действие Из Параметры.ПараметрыДействийПоЭДО.НаборДействий Цикл
				Параметры.ПараметрыДействийПоЭДО.ДополнительныеПараметрыДействий.Вставить(
					Действие.Ключ, ПараметрыДействия);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыДействийПоЭДО = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ПараметрыДействийПоЭДО);
		Результат.РезультатДействийПоЭДО = ЭлектронныеДокументыЭДО.ВыполнитьДействияЭДО(ПараметрыДействийПоЭДО, 
			КонтекстДиагностики);
		
		Если ЗначениеЗаполнено(Результат.РезультатДействийПоЭДО.ОшибкиФормирования) Тогда
			ОтменитьТранзакцию();
			Результат.ЕстьОшибки = Истина;
			Возврат Результат;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПечатьЭлектронныхДокументов

Функция ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение = Неопределено) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПредставлениеКарточкиСообщения(Сообщение, ОтветноеСообщение);
	
КонецФункции

Функция ПредставлениеСообщения(Сообщение, СообщениеОтвета = Неопределено, ПараметрыПечати = Неопределено) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПредставлениеСообщения(Сообщение, СообщениеОтвета, ПараметрыПечати);
	
КонецФункции

// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	Возврат ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
КонецФункции 

// см. Обработка.ПротоколОбменаПоДокументуЭДО.ПечатныеФормыПротоколовОбмена
Функция ПечатныеФормыПротоколовОбмена(Знач ЭлектронныеДокументы) Экспорт
	Возврат Обработки.ПротоколОбменаПоДокументуЭДО.ПечатныеФормыПротоколовОбмена(ЭлектронныеДокументы);
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлектронныхДокументов

Функция СформироватьФайлыВыгрузкиЭДВФорматеPDF(Знач ЭлектронныеДокументы, Знач АдресДанныхВХранилище) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДВФорматеPDF(ЭлектронныеДокументы, АдресДанныхВХранилище);
	
КонецФункции

Функция СформироватьФайлыВыгрузкиЭДВФорматеPDFДлительнаяОперация(Знач ЭлектронныеДокументы, Знач АдресДанныхВХранилище, Знач ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДВФорматеPDF", ЭлектронныеДокументы, АдресДанныхВХранилище);
		
КонецФункции

Функция СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(Знач ЭлектронныеДокументы, Знач АдресДанныхВХранилище) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДДокументооборотЦеликом(ЭлектронныеДокументы,
		АдресДанныхВХранилище);
	
КонецФункции

// Возвращает описание длительной операции по подготовке электронных документов для выгрузки ФНС.
// 
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьФункцию
//
Функция ЗапуститьПодготовкуЭлектронныхДокументовДляВыгрузкиФНС(Знач ЭлектронныеДокументы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 1;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обмен с контрагентами. Отправка и получение электронных документов.'");

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтерфейсДокументовЭДО.СформироватьФайлыВыгрузкиЭДДляФНС", ЭлектронныеДокументы);
	
КонецФункции

// Возвращает структуру с подготовленными данными для дальнейшей выгрузки документов в каталог для предоставления в ФНС.
// 
// Параметры:
//  АдресРезультата - Строка - Адрес результата во временном хранилище, содержащий данные по результатам выполнения 
//                             функции ИнтеграцияБРОЭДО.СформироватьФайлыВыгрузкиЭДДляФНС
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор для помещения файлов 
//                                                      во временное хранилище 
// 
// Возвращаемое значение:
//  Структура - Структура результатов обработки и массива сохраняемых файлов:
//  * РезультатыОбработки - Соответствие Из КлючИЗначение - Результаты обработки документов по организациям:
//   ** Ключ - Строка - Наименование организации
//   ** Значение - Структура: 
//    *** КоличествоДокументов - Число
//    *** КоличествоВФормализованномВиде - Число
//    *** НаименованиеАрхиваФормализованных - Строка
//    *** КоличествоСНанесениемШтамповЭП - Число
//    *** НаименованиеАрхиваСНанесениемШтампов - Строка
//    *** КоличествоСОтдельнымиШтампамиЭП - Число
//    *** НаименованиеАрхиваСОтдельнымиШтампами - Строка
//    *** КоличествоНеВыгружено - Число
//    *** НаименованиеФайлаСНевыгруженными - Строка
//  * МассивСохраняемыхФайлов - Массив из ОписаниеПередаваемогоФайла
//  * Ошибки - Массив из Структура:
//   ** КлючДанных - ЛюбаяСсылка
//   ** ТекстОшибки - Строка
Функция ВыгрузкаЭДДляФНСПодготовитьДанныеДляВыгрузкиВКаталог(Знач АдресРезультата, Знач УникальныйИдентификатор) Экспорт
	
	Результат = Новый Структура("РезультатыОбработки, МассивСохраняемыхФайлов, Ошибки", 
		Новый Соответствие, Новый Массив, Новый Массив);
	
	РезультатВыгрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
	Результат.РезультатыОбработки = ОбщегоНазначения.СкопироватьРекурсивно(РезультатВыгрузки.РезультатыОбработки);
	Результат.Ошибки = ОбщегоНазначения.СкопироватьРекурсивно(РезультатВыгрузки.Ошибки);
	Для Каждого Элемент Из РезультатВыгрузки.СоответствиеФайлов Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Элемент.Ключ,
			ПоместитьВоВременноеХранилище(Элемент.Значение, УникальныйИдентификатор));
		Результат.МассивСохраняемыхФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ВыгруженныеФайлы - Массив из ОписаниеПереданногоФайла
Процедура УдалитьВыгруженныеФайлыИзХранилища(ВыгруженныеФайлы) Экспорт
	ИнтерфейсДокументовЭДО.УдалитьВыгруженныеФайлыИзХранилища(ВыгруженныеФайлы);
КонецПроцедуры

#КонецОбласти

Функция РеквизитыДокументаПоФайлу(Знач ПараметрыФайла) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла = ПараметрыФайла.ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыФайла.АдресХранилища);
	
	Возврат ИнтерфейсДокументовЭДО.РеквизитыДокументаПоФайлу(ОписаниеФайла);
	
КонецФункции

// Создает электронный документ по файлу
//
// Параметры:
//  ПараметрыСоздания - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу
//  ПараметрыФайла - Структура:
//  * ИмяФайла - Строка
//  * АдресХранилища - Строка
//
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу
Функция СоздатьЭлектронныйДокументПоФайлу(Знач ПараметрыСоздания, Знач ПараметрыФайла) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ИмяФайла = ПараметрыФайла.ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыФайла.АдресХранилища);
	
	Возврат ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
	
КонецФункции

#Область ДействияПоЭДО

// Возвращает описание длительной операции выполнения действий по ЭДО.
// 
// Параметры:
//  ПараметрыВыполненияДействий - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// Возвращаемое значение:
//  См. ДлительныеОперации.ВыполнитьФункцию
Функция ВыполнитьДействияПоИнтеграциямЭДОВФоне(Знач ПараметрыВыполненияДействий) Экспорт
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	// См. ИнтерфейсДокументовЭДО.ВыполнитьДействияПоИнтеграциямЭДО
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтерфейсДокументовЭДО.ВыполнитьДействияПоИнтеграциямЭДО", ПараметрыВыполненияДействий);
	
КонецФункции

// Возвращает результат действий по интеграциям ЭДО из временного хранилища.
// 
// Параметры:
//  АдресРезультата - Строка
//
// Возвращаемое значение:
//  - Произвольный
//  - См. ИнтерфейсДокументовЭДО.НовыеРезультатыВыполненияДействийПоИнтеграциямЭДО
//
Функция РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента(Знач АдресРезультата) Экспорт
	
	РезультатыПоИнтеграциямЭДО = ПолучитьИзВременногоХранилища(АдресРезультата); // См. ИнтерфейсДокументовЭДО.ВыполнитьДействияПоИнтеграциямЭДО
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ЗначениеЗаполнено(РезультатыПоИнтеграциямЭДО) Тогда
		Возврат РезультатыПоИнтеграциямЭДО;
	КонецЕсли;
	
	РезультатыПоИнтеграциямЭДОДляКлиента = ИнтерфейсДокументовЭДО.РезультатыВыполненияДействийПоИнтеграциямЭДОДляКлиента(
		РезультатыПоИнтеграциямЭДО);
	
	Возврат РезультатыПоИнтеграциямЭДОДляКлиента;
	
КонецФункции

// Параметры:
//  ПараметрыПродолженияДействийПоИнтеграциямЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор менеджера действий интеграции ЭДО.
//  * Значение - Произвольный
//  ПараметрыВыполненияДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  См. ДлительныеОперации.ВыполнитьФункцию
Функция ПродолжитьВыполнениеДействийПоИнтеграциямЭДОВФоне(Знач ПараметрыПродолженияДействийПоИнтеграциямЭДО, Знач ПараметрыВыполненияДействий) Экспорт
	
	ПараметрыПродолженияВФоне = ИнтерфейсДокументовЭДО.ПараметрыПродолженияДействийПоИнтеграциямЭДОВФоне(
		ПараметрыПродолженияДействийПоИнтеграциямЭДО);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	// См. ИнтерфейсДокументовЭДО.ПродолжитьВыполнениеДействийПоИнтеграциямЭДОПослеОбработкиРезультатов
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтерфейсДокументовЭДО.ПродолжитьВыполнениеДействийПоИнтеграциямЭДОПослеОбработкиРезультатов",
		ПараметрыПродолженияВФоне, ПараметрыВыполненияДействий);
	
КонецФункции

#КонецОбласти

#Область ОтправитьИПолучить

// Параметры:
//  УчетныеЗаписиОбмена - Неопределено, Массив из Строка - идентификаторы оператора электронного документооборота
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ПараметрыОтправкиПолученияДокументовЭДО
Функция ПараметрыОтправкиПолученияДокументовЭДО(УчетныеЗаписиОбмена = Неопределено) Экспорт
	Возврат ИнтерфейсДокументовЭДО.ПараметрыОтправкиПолученияДокументовЭДО(УчетныеЗаписиОбмена);
КонецФункции

// Используется отправка получение с отбором по организации.
// 
// Возвращаемое значение:
//  - Булево
//  - Неопределено - Используется отправка получение с отбором по организации
//
Функция ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации() Экспорт
	Возврат ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ИнтерфейсЭДО",
		"ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации", Неопределено);
КонецФункции


// Установить отправку получение с отбором по организации.
// 
// Параметры:
// Включить - Булево, Неопределено - сохраняемое значение в настройку
//
Процедура УстановитьОтправкуПолучениеСОтборомПоОрганизации(Включить) Экспорт
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ИнтерфейсЭДО",
		"ИспользуетсяОтправкаПолучениеСОтборомПоОрганизации", Включить);
КонецПроцедуры

#КонецОбласти

Функция ДоступныеКомандыПечатиОбъекта(Объект) Экспорт
	
	Команды =  ИнтеграцияЭДО.КомандыПечатиДляОтправкиНеформализованногоЭДО(Объект.Метаданные());
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Команды);
	
КонецФункции

Функция ПечатныеФормыДокументов(КомандаПечатиВФайл, ОбъектУчета, ТипФайлаТабличногоДокумента) Экспорт
	
	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	НастройкиСохранения.ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента);
	
	РезультатПечати = УправлениеПечатью.НапечататьВФайл(КомандаПечатиВФайл, МассивОбъектовУчета, НастройкиСохранения);
	Если Не ЗначениеЗаполнено(РезультатПечати) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатПечати);
	
КонецФункции

Функция КомандаПечатиОбъекта(Объект, Идентификатор) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.КомандаПечатиОбъекта(Объект, Идентификатор)
	
КонецФункции

Функция НайтиСоздатьВидВнутреннегоДокумента(Объект, Команда) Экспорт
	
	Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект)); 
	Возврат ЭлектронныеДокументыЭДО.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);
				
КонецФункции

Функция СуществуюНастройкиВнутреннегоЭДО(Организация, ВидДокумента) Экспорт
	Возврат ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО(Организация, ВидДокумента);	
КонецФункции

Функция ЕстьАктуальныеЭлектронныеДокументы(ОбъектыУчета, ВидВнутреннегоДокумента) Экспорт
	
	АктуальныеЭлектронныеДокументы = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ОбъектыУчета);					
	Возврат ЗначениеЗаполнено(АктуальныеЭлектронныеДокументы.Найти(ВидВнутреннегоДокумента, "ВидДокумента"));
	
КонецФункции

Функция ОписаниеФайловДокументаПакета(ОписаниеФайла) Экспорт
	
	ДанныеПакета = Новый Структура;
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	РезультатРаспаковки = СинхронизацияЭДО.РаспаковатьФайлТранспортногоКонтейнера(ОписаниеФайла,
		КонтекстДиагностики);
		
	ДанныеФайлаКартинок = РезультатРаспаковки.Картинки;
	ДанныеПакета.Вставить("ДанныеФайлаКартинок", ДанныеФайлаКартинок);
	
	Для Каждого Документ Из РезультатРаспаковки.Метаданные.Документы Цикл
		ДанныеОсновногоФайла = Документ.ОписаниеДанных;
		ДанныеФайлаДопДанных = Документ.ОписаниеДополнительныхДанных;
	КонецЦикла;
	
	ДанныеПакета.Вставить("ДанныеОсновногоФайла", ДанныеОсновногоФайла);
	ДанныеПакета.Вставить("ДанныеФайлаДопДанных", ДанныеФайлаДопДанных);
	
	Возврат ДанныеПакета;
	
КонецФункции

Функция КонтрагентыДляОтправкиПриглашений(МассивСсылокНаОбъекты) Экспорт
	
	Если МассивСсылокНаОбъекты.Количество() = 0
		Или ИнтеграцияЭДО.ЭтоКонтрагент(МассивСсылокНаОбъекты[0])
		Или ИнтеграцияЭДО.ЭтоОрганизация(МассивСсылокНаОбъекты[0]) Тогда
		
		Возврат МассивСсылокНаОбъекты;
		
	Иначе
		
		СоответствиеКонтрагентов = ИнтеграцияЭДО.СвязанныеКонтрагенты(МассивСсылокНаОбъекты);
		
		МассивКонтрагентов = Новый Массив;
		
		Для Каждого СтрокаСоответствия Из СоответствиеКонтрагентов Цикл
			МассивКонтрагентов.Добавить(СтрокаСоответствия.Значение);
		КонецЦикла;
		
		Возврат МассивКонтрагентов;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структурированную информацию о файле. Используется в различных командах работы с файлами
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ФайлСсылка - ОпределяемыйТип.ПрисоединенныйФайл
//  ПараметрыДанныхФайла - см. РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла
//  ЭтоМассовоеШтампирование - Булево - признак, показывающий, что файл запрошен в рамках массового штампирования.
//
// Возвращаемое значение:
//  см. РаботаСФайлами.ДанныеФайла
Функция ДанныеФайла(Знач ФайлСсылка, Знач ПараметрыДанныхФайла = Неопределено, ЭтоМассовоеШтампирование = Ложь) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлСсылка, ПараметрыДанныхФайла);
	
	// Если имя файла слишком длинное, то сокращаем наименование
	Если Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ДанныеФайла.ПолноеНаименованиеВерсии) Тогда
		ДанныеФайла.ПолноеНаименованиеВерсии = 
			Обработки.ФорматДоговорныйДокумент101.ОбработанноеИмяФайлаДляОткрытия(ДанныеФайла.ПолноеНаименованиеВерсии);
	КонецЕсли;
	
	ИдентификаторФормы = Неопределено;
	Если ПараметрыДанныхФайла <> Неопределено Тогда
		ИдентификаторФормы = ПараметрыДанныхФайла.ИдентификаторФормы;
	КонецЕсли;
	
	ЭлектронныеДокументыЭДО.ПодменитьФайлНаФайлСВизуализацией(ДанныеФайла, ИдентификаторФормы, ЭтоМассовоеШтампирование);
	ДанныеФайла.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла));
	
	Возврат ДанныеФайла;

КонецФункции

// Параметры:
//  ФайлСсылка - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  ПараметрыДанныхФайла - см. РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла
// 
// Возвращаемое значение:
// См. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ДанныеФайлаДлительнаяОперация(Знач ФайлСсылка, Знач ПараметрыДанныхФайла) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ПараметрыДанныхФайла.ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайла", ФайлСсылка, ПараметрыДанныхФайла);
	
КонецФункции

// См. ЭлектронныеДокументыЭДО.ВыгрузкаДанныхВФайлДоступнаДляОбъектов
Функция ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов) Экспорт
	
	Возврат ЭлектронныеДокументыЭДО.ВыгрузкаДанныхВФайлДоступнаДляОбъектов(МассивОбъектов);
	
КонецФункции

Функция ДанныеТабличногоДокумента(Знач ТабличныйДокумент, Знач ТипФайла) Экспорт
	
	Поток = Новый ПотокВПамяти();
	ТабличныйДокумент.Записать(Поток, ТипФайла);
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Переопределяет получение формы электронного документа.
//
// Параметры:
//  ВидФормы				 - Строка - Имя стандартной формы.
//  Параметры				 - Структура - Параметры формы.
//  ВыбраннаяФорма			 - Строка - Имя открываемой формы.
//  ДополнительнаяИнформация - Структура - Дополнительная информация открытия формы.
//  СтандартнаяОбработка	 - Булево - Признак отказа от выполнения операции.
//  ЭтоВходящийЭДО - Булево
//
Процедура ОбработкаПолученияФормыЭлектронногоДокумента(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
	СтандартнаяОбработка, ЭтоВходящийЭДО = Ложь) Экспорт
	
	ИспользуютсяЛегкиеКарточки = ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов();
	
	Если ВидФормы <> "ФормаОбъекта"
		Или Не ИнтерфейсДокументовЭДО.ИспользоватьИнтеграциюОблачногоЭДО()
		И Не ИспользуютсяЛегкиеКарточки Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = Неопределено;
	
	Если ИспользуютсяЛегкиеКарточки
		Или Параметры.Свойство("ЭтоОблачныйЭДО") И Параметры.ЭтоОблачныйЭДО 
		Или Параметры.Свойство("Ключ", ЭлектронныйДокумент) И ЗначениеЗаполнено(ЭлектронныйДокумент)
		И ЭлектронныеДокументыЭДО.ЭтоДокументОблачногоЭДО(ЭлектронныйДокумент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ЛегкийИнтерфейсДокументовЭДО.ПутьКФормеПросмотраЭлектронногоДокумента(ЭтоВходящийЭДО);
		ЛегкийИнтерфейсДокументовЭДО.ПодготовитьПараметрыОткрытияФормыПросмотраИсходящегоДокумента(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации
Функция РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(Знач ДлительнаяОперация) Экспорт
	Возврат ИнтерфейсДокументовЭДО.РезультатПодготовкиДанныхПросмотраПослеДлительнойОперации(ДлительнаяОперация);
КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации
Функция РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(Знач ДлительнаяОперация) Экспорт
	Возврат ИнтерфейсДокументовЭДО.РезультатПодготовкиДанныхПросмотраПоФайлуXMLПослеДлительнойОперации(ДлительнаяОперация);
КонецФункции

#Область НастройкаИнтерфейса

// См. ИнтерфейсДокументовЭДО.ТребуетсяПоказатьОкноВыбораВариантаИнтерфейса
Функция ТребуетсяПоказатьОкноВыбораВариантаИнтерфейса() Экспорт

	Возврат ИнтерфейсДокументовЭДО.ТребуетсяПоказатьОкноВыбораВариантаИнтерфейса();

КонецФункции

// Сохраняет выбранный пользователем вариант интерфейса ЭДО.
// 
// Параметры:
//  Легкий - Булево
Процедура СохранитьВариантИнтерфейсаПоУмолчанию(Легкий = Ложь) Экспорт
	
	КлючОбъектаНастроек = ИнтерфейсДокументовЭДОКлиентСервер.КлючОбъектаНастроекИнтерфейсаЭДО();
	КлючНастройки = "ИспользуетсяЛегкийВариантИнтерфейса";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроек, КлючНастройки, Легкий);
	
КонецПроцедуры

// Сохраняет выбранный пользователем вариант интерфейса ЭДО, записывает информацию о том, 
// что пользователю было предложено выбрать вариант интерфейса.
// 
// Параметры:
//  Легкий - Булево
Процедура СохранитьВыборВариантаИнтерфейсаИзФормыВыбора(Легкий = Ложь) Экспорт
	
	СохранитьВариантИнтерфейсаПоУмолчанию(Легкий);
	
	КлючОбъектаНастроек = ИнтерфейсДокументовЭДОКлиентСервер.КлючОбъектаНастроекИнтерфейсаЭДО();
	КлючНастройки = "ОзнакомленСВозможностьюВыбратьВариантИнтерфейса";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроек, КлючНастройки, Истина);
	
КонецПроцедуры

// См. ИнтерфейсДокументовЭДО.ВыбранЛегкийВариантИнтерфейса
Функция ВыбранЛегкийВариантИнтерфейса() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ВыбранЛегкийВариантИнтерфейса();
	
КонецФункции

// Сохраняет пользовательскую настройку использования легкого варианта интерфейса карточек документов.
// 
// Параметры:
//  ЛегкиеКарточки - Булево
Процедура СохранитьИспользованиеЛегкихКарточекЭлектронныхДокументовПоУмолчанию(ЛегкиеКарточки = Ложь) Экспорт
	
	КлючОбъектаНастроек = ИнтерфейсДокументовЭДОКлиентСервер.КлючОбъектаНастроекИнтерфейсаЭДО();
	КлючНастройки = "ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроек, КлючНастройки, ЛегкиеКарточки);
	
КонецПроцедуры

// См. ИнтерфейсДокументовЭДО.ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов
Функция ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов() Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ИспользуютсяЛегкиеКарточкиЭлектронныхДокументов();
	
КонецФункции

#КонецОбласти // НастройкаИнтерфейса

#Область ПакетыДокументовЭДО

// Параметры:
//  ИдентификаторПакета - см. РегистрСведений.ПакетыДокументовЭДО.ИдентификаторПакета
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура УдалитьДокументИзПакета(Знач ИдентификаторПакета, Знач ЭлектронныйДокумент, КонтекстДиагностики = Неопределено) Экспорт
	
	ИнтерфейсДокументовЭДО.УдалитьДокументИзПакета(ИдентификаторПакета, ЭлектронныйДокумент, КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

// см. ИнтерфейсДокументовЭДО.ПроштампованныйФайлPDF
Функция ПроштампованныйФайлPDF(СообщениеЭДО, УникальныйИдентификатор, ПроверятьДоступностьВыводаПДФ_А3 = Истина) Экспорт
	
	Возврат ИнтерфейсДокументовЭДО.ПроштампованныйФайлPDF(СообщениеЭДО, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти