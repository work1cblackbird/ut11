////////////////////////////////////////////////////////////////////////////////////////
// Модуль "КомиссионнаяТорговляКлиент", содержит процедуры и функции для 
// обработки действий пользователя в процессе работы с документами комиссионной торговли.
//
////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события "ПриИзменении" поля "СтавкаНДСВознаграждения".
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - объект, в форме которого вызывается обработчик.
//  ПроцентНДС - Число - значение процента НДС, которое необходимо заполнить.
//
Процедура СтавкаНДСВознагражденияПриИзменении(Объект, ПроцентНДС) Экспорт
	
	ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	РассчитатьКомиссионноеВознаграждениеНДС(Объект, ПроцентНДС);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "СуммаПродажи" таблицы.
//
// Параметры:
//  СтрокаТаблицы - ДанныеФормыЭлементКоллекции - строка таблицы для заполнения полей при изменении суммы.
//  ЕстьСуммаПродажиНДС - Булево - Истина, если в строке таблицы есть поле СуммаПродажиНДС.
//  ИмяКолонкиСуммаПродажи - Строка - имя колонки суммы.
//
Процедура СуммаПродажиПриИзменении(СтрокаТаблицы, ЕстьСуммаПродажиНДС, ИмяКолонкиСуммаПродажи = "СуммаПродажи") Экспорт
	
	СтрокаТаблицы.ЦенаПродажи = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы[ИмяКолонкиСуммаПродажи] / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
	Если ЕстьСуммаПродажиНДС Тогда
		СтрокаТаблицы.СуммаПродажиНДС = СуммаПродажиНДС(СтрокаТаблицы[ИмяКолонкиСуммаПродажи], СтрокаТаблицы.СтавкаНДС);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Упаковка" таблицы.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - объект, в форме которого вызывается обработчик.
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы для заполнения полей при изменении упаковки.
//  ИспользоватьСоглашенияСКлиентами - Булево - Истина, если соглашения с клиентом, используются.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ОтчетКомиссионераТоварыУпаковкаПриИзменении(Объект, ТекущаяСтрока, ИспользоватьСоглашенияСКлиентами, КэшированныеЗначения) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить(
		   "ЗаполнитьУсловияПродаж", 
		   ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить(
		   "ЗаполнитьЦенуПродажи",
		   ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
	   ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ПересчитатьЦенуПродажиЗаУпаковку");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		"Партнер");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "КоличествоУпаковок" таблицы.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - объект, в форме которого вызывается обработчик.
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы для заполнения полей при изменении количества упаковок.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ОтчетКомиссионераТоварыКоличествоУпаковокПриИзменении(Объект, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтчетКомиссионера(СтруктураДействий, Объект);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		"Партнер");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ЦенаПродажи" таблицы.
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы для заполнения полей при изменении цены продажи.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ОтчетКомиссионераТоварыЦенаПродажиПриИзменении(ТекущаяСтрока, КэшированныеЗначения) Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВозможностиВыполненияДействий

// Процедура определяет необходимость расчета комиссионного вознаграждения.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - вызывается после вычисления необходимости расчета вознаграждения.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается процедура.
//
Процедура НеобходимоРассчитатьВознаграждение(ОписаниеОповещения, Форма) Экспорт
	
	СпособРасчетаВознаграждения = Форма.Объект.СпособРасчетаВознаграждения;
	СпособРасчетаСумма = СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроизвольнаяСумма");
	СпособРасчетаПроцент = СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента")
			ИЛИ СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи");
	
	Если (СпособРасчетаСумма И Форма.Объект.СуммаВознаграждения = 0) ИЛИ (СпособРасчетаПроцент И Форма.Объект.ПроцентВознаграждения = 0)
		ИЛИ СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
			
		Если ТипЗнч(ОписаниеОповещения.ДополнительныеПараметры) = Тип("Структура") Тогда
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("ОчиститьКомиссионноеВознаграждение", Истина);
		КонецЕсли;
			
		НеобходимоОчиститьКомиссионноеВознаграждение(ОписаниеОповещения, Форма);
	Иначе
		НеобходимоРассчитатьКомиссионноеВознаграждение(ОписаниеОповещения, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит сообщения пользователю, если заполнение не было выполнено.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект, содержит в том числе:
//	* Ссылка - ДокументСсылка.ОтчетКомитенту, ДокументСсылка.ОтчетКомитентуОСписании - Ссылка на документ
//
Процедура ПроверитьЗаполнениеДокументаПоОстаткам(Объект) Экспорт
	
	Если Объект.Товары.Количество() = 0 Тогда
	   
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет данных о продажах товаров комитента ""%1""'"),
				Объект.Партнер);
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет данных о списании товаров комитента ""%1""'"),
				Объект.Партнер);
		Иначе
			Текст = "";
		КонецЕсли;
				
		Если Не ПустаяСтрока(Текст) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Объект.Ссылка,
				, // Поле
				// Отказ
			);
		КонецЕсли;
	   
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность реквизитов, необходимых для пересчета из валюты в валюту
//
// Параметры:
// 	ОписаниеОповещения - ОписаниеОповещения - 
// 	Объект - ДокументОбъект - Объект, для которого выполняются проверки
// 	СтараяВалюта - СправочникСсылка.Валюты - Предыдущая валюта документа.
// ИмяКолонкиСуммаПродажи - Строка - имя колонки, в которой содержится сумма продажи.
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены.
//
Функция ПроверитьНеобходимостьПересчетаВВалютуОтчетыПоКомиссии(ОписаниеОповещения, Объект, СтараяВалюта, ИмяКолонкиСуммаПродажи = "СуммаПродажи") Экспорт
	
	Если ЗначениеЗаполнено(Объект.Валюта)
	   И ЗначениеЗаполнено(СтараяВалюта)
	   И СтараяВалюта <> Объект.Валюта
	   И (Объект.Товары.Итог("Цена") <> 0
	    ИЛИ Объект.Товары.Итог(ИмяКолонкиСуммаПродажи) <> 0) Тогда
	
		ТекстСообщения = НСтр("ru = 'Пересчитать суммы в документе в валюту ""%Валюта%""?'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Объект.Валюта);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Да'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Нет'"));
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстСообщения,
			Кнопки,
			,
			Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

// Процедура показывает оповещение пользователю об окончании расчета
// комиссионного вознаграждения.
//
// Параметры:
//  СпособРасчетаВознаграждения - ПеречислениеСсылка.СпособыРасчетаКомиссионногоВознаграждения - способ расчета.
//
Процедура ОповеститьОбОкончанииРасчетаВознаграждения(СпособРасчетаВознаграждения) Экспорт
	
	Если СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Вознаграждение очищено.'"),
		,
		НСтр("ru='Комиссионное вознаграждение в документе очищено.'"),
		БиблиотекаКартинок.Информация32);
		
	ИначеЕсли не ЗначениеЗаполнено(СпособРасчетаВознаграждения) Тогда
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Способ расчета не заполнен.'"),
		,
		НСтр("ru='Перед расчетом комиссионного вознаграждения, Способ расчета, в документе, необходимо заполнить.'"),
		БиблиотекаКартинок.Информация32);
		
	Иначе
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Вознаграждение рассчитано.'"),
		,
		НСтр("ru='Комиссионное вознаграждение в документе рассчитано.'"),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Процедура рассчитывает сумму НДС комиссионного вознаграждения.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция, ДанныеФормыЭлементКоллекции - объект или строка объекта, для которых необходимо рассчитать.
//  ПроцентНДС - Число - значение процента НДС.
//
Процедура РассчитатьКомиссионноеВознаграждениеНДС(Объект, ПроцентНДС) Экспорт
	
	Объект.СуммаНДСВознаграждения = Окр(Объект.СуммаВознаграждения * ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
	
КонецПроцедуры

// Процедура заполняет поле "Дата платежа" в документе.
//
// Параметры:
// 	ОписаниеОповещения - ОписаниеОповещения - 
//	ДатаПлатежа - Дата - 
//	ПараметрыЗаписи - Структура - Параметры записи документа.
//
Процедура ЗаполнитьДатуПлатежа(ОписаниеОповещения, ДатаПлатежа, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
		ПоказатьВводДаты(ОписаниеОповещения, ДатаПлатежа, НСтр("ru = 'Введите дату платежа'"), ЧастиДаты.Дата);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДатаПлатежа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НеобходимоРассчитатьКомиссионноеВознаграждение(ОписаниеОповещения, Форма)
	
	Если Форма.Объект.Товары.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.СпособРасчетаВознаграждения) Тогда
			Если ТипЗнч(ОписаниеОповещения.ДополнительныеПараметры) = Тип("Структура") Тогда
				ОписаниеОповещения.ДополнительныеПараметры.Вставить("ВосстановитьРеквизиты", Истина);
			КонецЕсли;
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(Истина, НСтр("ru = 'Да'"));
			Кнопки.Добавить(Ложь, НСтр("ru = 'Нет'"));
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Рассчитать комиссионное вознаграждение?'"), Кнопки,, Истина);
		Иначе 
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НеобходимоОчиститьКомиссионноеВознаграждение(ОписаниеОповещения, Форма)
	
	Если Форма.Объект.Товары.Итог("СуммаВознаграждения") <> 0 Тогда
		
		Если ТипЗнч(ОписаниеОповещения.ДополнительныеПараметры) = Тип("Структура") Тогда
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("ВосстановитьРеквизиты", Истина);
		КонецЕсли;
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Да'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Нет'"));
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Комиссионное вознаграждение будет очищено, продолжить?'"), Кнопки,, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаПродажиНДС(СуммаПродажи, СтавкаНДС)
	
	СуммаПродажиНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаПродажи, СтавкаНДС);
	Возврат Окр(СуммаПродажиНДС, 2, РежимОкругления.Окр15как20);
	
КонецФункции

#КонецОбласти
