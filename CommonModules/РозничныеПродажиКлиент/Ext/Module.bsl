#Область ПрограммныйИнтерфейс

// Открывает кассовую смену
//
// Параметры:
//  ПараметрыКассыККМ - Структура, ФиксированнаяСтруктура - Параметры кассы ККМ:
//  	* ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//  	* ИспользоватьБезПодключенияОборудования - Булево
//  	* КассаККМ - СправочникСсылка.КассыККМ
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции.
//
Процедура ОткрытьКассовуюСмену(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	ПараметрыОповещенияЗавершенияОперации = Новый Структура;

	КассаККМ = Неопределено;
	КассаККМДляРазъезднойТорговли = Ложь;
	КассаККМБезПодключенияОборудования = Ложь;
	
	Если (ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
		Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура"))
		И ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		КассаККМБезПодключенияОборудования = Истина;
		КассаККМ = ПараметрыКассыККМ.КассаККМ;
		КассаККМДляРазъезднойТорговли = ПараметрыКассыККМ.РазъезднаяТорговля;
		
	Иначе
		
		КассаККМБезПодключенияОборудования = Ложь;
		Если ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
			Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура") Тогда
			ФискальноеУстройство = ПараметрыКассыККМ.ИдентификаторУстройства;
		Иначе
			ФискальноеУстройство = ПараметрыКассыККМ;
		КонецЕсли;
		
		ПараметрыОповещенияЗавершенияОперации.Вставить("ФискальноеУстройство", ФискальноеУстройство);
		ПараметрыОповещенияЗавершенияОперации.Вставить("РеквизитыКассира", РозничныеПродажиВызовСервера.РеквизитыКассира());
		ПараметрыОповещенияЗавершенияОперации.Вставить("РеквизитыАдресаМестаРасчетов", РозничныеПродажиВызовСервера.РеквизитыАдресаМестаРасчетов(ФискальноеУстройство));

		КассаККМ = РозничныеПродажиВызовСервера.КассаККМПоПодключаемомуОборудованияДляРМК(ФискальноеУстройство);
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			ПараметрыКассыККМФискальногоУстройства = РозничныеПродажиВызовСервера.ПараметрыКассыККМ(КассаККМ);
			КассаККМДляРазъезднойТорговли = ПараметрыКассыККМФискальногоУстройства.РазъезднаяТорговля;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОповещенияЗавершенияОперации.Вставить("КассаККМБезПодключенияОборудования", КассаККМБезПодключенияОборудования);
	ПараметрыОповещенияЗавершенияОперации.Вставить("КассаККМ", КассаККМ);	
	ПараметрыОповещенияЗавершенияОперации.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ПараметрыОповещенияЗавершенияОперации.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	
	ОповещениеЗавершенияОперации = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект, ПараметрыОповещенияЗавершенияОперации);
	Если КассаККМДляРазъезднойТорговли Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ОткрытьФорму("Документ.КассоваяСмена.Форма.ФормаЗапросаМестаРасчетов",
					ПараметрыОткрытияФормы,
					,
					,
					,
					,
					ОповещениеЗавершенияОперации,
					РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершенияОперации, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКассовуюСменуЗавершение(Результат, Параметры) Экспорт
	
	ПараметрыКассыККМ = Параметры.ПараметрыКассыККМ;
	КассаККМ		  = Параметры.КассаККМ;
	КассаККМБезПодключенияОборудования = Параметры.КассаККМБезПодключенияОборудования;
	
	ОписаниеОповещенияЗавершение = Параметры.ОписаниеОповещенияЗавершение;
	
    ДополнительныеПараметры = Новый Структура;
	
	// Адрес и место расчетов, где осуществляется разъездная торговля
	АдресРасчетов = Неопределено;
	МестоРасчетов = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Результат = КодВозвратаДиалога.ОК Тогда
		Если ЗначениеЗаполнено(Результат.АдресРасчетов) Тогда
			АдресРасчетов = Результат.АдресРасчетов;
			ДополнительныеПараметры.Вставить("АдресРасчетов", АдресРасчетов);
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.МестоРасчетов) Тогда
			МестоРасчетов = Результат.МестоРасчетов;
			ДополнительныеПараметры.Вставить("МестоРасчетов", МестоРасчетов);
		КонецЕсли;
	КонецЕсли;
	
	Если КассаККМБезПодключенияОборудования Тогда
		
		ОписаниеОшибки = "";
		Результат = РозничныеПродажиВызовСервера.ОткрытьКассовуюСмену(КассаККМ, ДополнительныеПараметры, ОписаниеОшибки);
		Если Не Результат Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'При открытии смены произошла ошибка.
				           |Смена не открыта.
				           |Дополнительное описание:
				           |%1'"),
				ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Результат);
		КонецЕсли;
		
	Иначе
		
		Контекст = Новый Структура;
		Контекст.Вставить("ФискальноеУстройство",         Параметры.ФискальноеУстройство);
		Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		РеквизитыКассира = Параметры.РеквизитыКассира; // см. РозничныеПродажиВызовСервера.РеквизитыКассира
		ПараметрыОперации.Кассир = РеквизитыКассира.Наименование;
		ПараметрыОперации.КассирИНН = РеквизитыКассира.ИНН;

		ПараметрыОперации.АдресРасчетов = ?(ЗначениеЗаполнено(АдресРасчетов), АдресРасчетов, Параметры.РеквизитыАдресаМестаРасчетов.АдресРасчетов);
		ПараметрыОперации.МестоРасчетов = ?(ЗначениеЗаполнено(МестоРасчетов), МестоРасчетов, Параметры.РеквизитыАдресаМестаРасчетов.МестоРасчетов);
		
		ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(
			Новый ОписаниеОповещения("ПослеВыполненияКомандыОткрытияСмены", ЭтотОбъект, Контекст),
			Новый УникальныйИдентификатор,
			Параметры.ФискальноеУстройство,
			ПараметрыОперации,
			ДополнительныеПараметры);
		
	КонецЕсли;
		
КонецПроцедуры

// Закрывает кассовую смену
//
// Параметры:
//  ПараметрыКассыККМ - Структура, ФиксированнаяСтруктура - Параметры кассы ККМ:
//  	* ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//  	* ИспользоватьБезПодключенияОборудования - Булево
//  	* КассаККМ - СправочникСсылка.КассыККМ
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции.
//
Процедура ЗакрытьКассовуюСмену(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Если (ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
		Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура"))
		И ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		СформироватьОтчетОРозничныхПродажах(ПараметрыКассыККМ.КассаККМ);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
		
	Иначе
		
		ОборудованиеПодключено = Ложь;
		Если ТипЗнч(ПараметрыКассыККМ) = Тип("фиксированнаяСтруктура")
			Или ТипЗнч(ПараметрыКассыККМ) = Тип("Структура") Тогда
			ФискальноеУстройство = ПараметрыКассыККМ.ИдентификаторУстройства;
			ОборудованиеПодключено = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ФискальноеУстройство);
		Иначе
			ФискальноеУстройство   = ПараметрыКассыККМ;
			ОборудованиеПодключено = Истина;
		КонецЕсли;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ФискальноеУстройство",         ФискальноеУстройство);
		Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
		
		ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		
		РеквизитыКассира = РозничныеПродажиВызовСервера.РеквизитыКассира();
		ПараметрыОперации.Кассир = РеквизитыКассира.Наименование;
		ПараметрыОперации.КассирИНН = РеквизитыКассира.ИНН;

 		РеквизитыАдресаМестаРасчетов = РозничныеПродажиВызовСервера.РеквизитыАдресаМестаРасчетов(ФискальноеУстройство);
		ПараметрыОперации.АдресРасчетов = РеквизитыАдресаМестаРасчетов.АдресРасчетов;
		ПараметрыОперации.МестоРасчетов = РеквизитыАдресаМестаРасчетов.МестоРасчетов;
		
		ПараметрыОбработкиСостоянияСмены = РозничныеПродажиВызовСервера.ПолучитьПараметрыОбработкиСостоянияСмены(ФискальноеУстройство);
		Если ПараметрыОбработкиСостоянияСмены.СтруктураСостояниеКассовойСмены.РазъезднаяТорговля Тогда
			Если ЗначениеЗаполнено(ПараметрыОбработкиСостоянияСмены.СтруктураСостояниеКассовойСмены.АдресРасчетов) Тогда
				ПараметрыОперации.АдресРасчетов = ПараметрыОбработкиСостоянияСмены.СтруктураСостояниеКассовойСмены.АдресРасчетов;	
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыОбработкиСостоянияСмены.СтруктураСостояниеКассовойСмены.МестоРасчетов) Тогда
				ПараметрыОперации.МестоРасчетов = ПараметрыОбработкиСостоянияСмены.СтруктураСостояниеКассовойСмены.МестоРасчетов;	
			КонецЕсли;
		КонецЕсли;
				
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(
			Новый ОписаниеОповещения("ПослеВыполненияКомандыЗакрытияСмены", ЭтотОбъект, Контекст),
			Новый УникальныйИдентификатор,
			ФискальноеУстройство,
			ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

// Сформировать отчет без гашения.
// 
// Параметры:
//  ПараметрыКассыККМ - см. ЗакрытьКассовуюСмену.ПараметрыКассыККМ
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции.
//
Процедура СформироватьОтчетБезГашения(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	                    
	Контекст = Новый Структура;
	Контекст.Вставить("ФискальноеУстройство",         ПараметрыКассыККМ.ИдентификаторУстройства);
	Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	
	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены(); 
	РеквизитыКассира = РозничныеПродажиВызовСервера.РеквизитыКассира();
	ПараметрыОперации.Кассир = РеквизитыКассира.Наименование;
	ПараметрыОперации.КассирИНН = РеквизитыКассира.ИНН;
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеОтчетаБезГашения(
			Новый ОписаниеОповещения("ПослеВыполненияКомандыОтчетБезГашения", ЭтотОбъект, Контекст),
			Новый УникальныйИдентификатор,
			ПараметрыКассыККМ.ИдентификаторУстройства,
			ПараметрыОперации);  
			
КонецПроцедуры

// Открывает форму для ввода суммы перед операцией внесения денежных средств
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыКассыККМ - Структура -
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - 
//
Процедура ВнесениеДенежныхСредств(Форма, ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                        Форма);
	Контекст.Вставить("ПараметрыКассыККМ",            ПараметрыКассыККМ);
	Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КассаККМ", ПараметрыКассыККМ.КассаККМ);
	
	ОткрытьФорму(
		"Документ.ВнесениеДенежныхСредствВКассуККМ.Форма.ВводСуммы",
		ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("ВнесениеДенегЗавершение", ЭтотОбъект, Контекст),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму для ввода суммы перед операцией выемки денежных средств
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыКассыККМ - Структура -
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - 
//
Процедура ВыемкаДенежныхСредств(Форма, ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                        Форма);
	Контекст.Вставить("ПараметрыКассыККМ",            ПараметрыКассыККМ);
	Контекст.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	
	ОткрытьФорму(
		"Документ.ВыемкаДенежныхСредствИзКассыККМ.Форма.ВводСуммы",
		Новый Структура("Валюта", ПараметрыКассыККМ.Валюта),,,,,
		Новый ОписаниеОповещения("ВыемкаДенегЗавершение", ЭтотОбъект, Контекст),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обновляет информацию, выведенную на дисплее покупателя
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ИдентификаторУстройства - Строка -
//  Текст - Строка - 
//
Процедура ВывестиТекстНаДисплейПокупателя(Форма, ИдентификаторУстройства, Текст) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                             Форма);
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства",           ИдентификаторУстройства);
	ДополнительныеПараметры.Вставить("ТекстДляВыводаНаДисплейПокупателя", Текст);
	
	ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(
		Новый ОписаниеОповещения("ПослеЗавершенияОчисткиДисплеяПокупателя", ЭтотОбъект, ДополнительныеПараметры),
		Форма.УникальныйИдентификатор,
		ИдентификаторУстройства);
	
КонецПроцедуры

// Обновляет выведенную информацию на всех дисплеях покупателя
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Дисплеи - СписокЗначений из Структура - Список значений из структур данных, описывающих дисплеи.
//  Текст - Строка - Выводимый текст
//
Процедура ВывестиТекстНаДисплеиПокупателя(Форма, Дисплеи, Текст) Экспорт
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение; // Структура
		
		Если Не МенеджерОборудованияУТКлиент.ОборудованиеПодключено(Дисплей.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РозничныеПродажиКлиент.ВывестиТекстНаДисплейПокупателя(
			Форма,
			Дисплей.Ссылка,
			Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для вывода на дисплей покупателя.
//
// Параметры:
//  Заголовок - Строка - Заголовок выводимого на дисплей покупателя значения.
//  Значение - Число, Строка - Выводимое значение (Сумма).
//
// Возвращаемое значение:
//  Строка - Подготовленная строка.
//
Функция ПодготовитьСтрокуКВыводуНаДисплейПокупателя(Заголовок = "", Значение = "") Экспорт
	
	Результат = "";
	
	ДлинаТекста     = 20;
	Пробелы20       = "                    ";
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	
	ЗначениеИтог = Формат(Значение, ФорматнаяСтрока);
	
	ДлинаЗначения = СтрДлина(ЗначениеИтог);
	ДлинаЗаголовка = СтрДлина(Заголовок);
	Если ДлинаЗначения + ДлинаЗаголовка > ДлинаТекста Тогда
		Результат = Лев(ЗначениеИтог, ДлинаТекста);
	ИначеЕсли ДлинаЗначения + ДлинаЗаголовка = ДлинаТекста Тогда
		Результат = Заголовок + ЗначениеИтог;
	Иначе
		Результат = Заголовок + Лев(Пробелы20, ДлинаТекста - ДлинаЗаголовка - ДлинаЗначения) + ЗначениеИтог;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запускает механизм проверки кодов маркировки средствами ККТ
// 
// Параметры:
//  ПозицииЧека - Массив - Позиции чека
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма владелец
//  ЗаголовокКнопкиИгнорировать - Строка, Неопределено - Заголовок кнопки игнорировать
//  ОповещениеОЗавершении - ОписаниеОповещения - Оповещение о завершении
//  ФормаПросмотра - ФормаКлиентскогоПриложения, Неопределено - Форма просмотра
//
Процедура ПроверитьКодМаркировкиСредствамиККТ(ПозицииЧека, ФормаВладелец, ЗаголовокКнопкиИгнорировать = Неопределено, ОповещениеОЗавершении, ФормаПросмотра = Неопределено) Экспорт
	
	РозничныеПродажиКлиентЛокализация.ПроверитьКодМаркировкиСредствамиККТ(ПозицииЧека, ФормаВладелец, ЗаголовокКнопкиИгнорировать, ОповещениеОЗавершении, ФормаПросмотра);
	
КонецПроцедуры

// Определяет, требуется ли проверка кодов маркировки средствами ККТ.
// 
// Параметры:
//  ПараметрыОперацииФискализацииЧека - Структура - Параметры операции фискализации чека
// 
// Возвращаемое значение:
//  Булево - Истина - требуется проверка кодов маркировки средствами ККТ
//
Функция ТребуетсяПроверкаКодовМаркировкиСредствамиККТ(ПараметрыОперацииФискализацииЧека) Экспорт
	
	Возврат РозничныеПродажиКлиентЛокализация.ТребуетсяПроверкаКодовМаркировкиСредствамиККТ(ПараметрыОперацииФискализацииЧека);
	
КонецФункции

#Область УправлениеСостояниемСмены

// Контролирует параметры текущей кассовой смены, при необходимости открывает и закрывает кассовую смену.
//
// Параметры:
//  Форма - Форма - Форма документа в которой выполняется контроль кассовой смены
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции.
//
Процедура ОбработатьСостояниеСмены(Форма, ОписаниеОповещенияЗавершение) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПараметрыККТ") Тогда
		ПараметрыКассыККМ = Форма.ПараметрыККТ.ИдентификаторУстройства;
		Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Форма.ПараметрыККТ.ИдентификаторУстройства);
	Иначе
		ПараметрыКассыККМ = Форма.ПараметрыКассыККМ;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "КассаККМ") Тогда
			КассаККМ = Форма.Объект.КассаККМ;
		Иначе
			КассаККМ = Форма.КассаККМ;
		КонецЕсли;
		Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Кассир") Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.СтруктураСостояниеКассовойСмены);
	КонецЕсли;
	
	Если Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Форма.ПраваДоступа.ОткрытьСмену Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ОткрытьКассовуюСмену", НСтр("ru = 'Открыть смену'"));
		Кнопки.Добавить("Отмена",               НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры),
			НСтр("ru = 'Перед выполнением операции требуется открыть новую кассовую смену.'"), Кнопки);
		Возврат;
		
	ИначеЕсли Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Не Форма.ПраваДоступа.ОткрытьСмену Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Кассовая смена не открыта.'"));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		Возврат;
		
	КонецЕсли;
	
	Если Форма.СтруктураСостояниеКассовойСмены.Ошибка24Часа
		И Форма.ПраваДоступа.ОткрытьСмену
		И Форма.ПраваДоступа.ЗакрытьСмену Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ЗакрытьИОткрытьКассовуюСмену", НСтр("ru = 'Открыть смену'"));
		Кнопки.Добавить("Отмена",                       НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры),
			НСтр("ru = 'С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.'"), Кнопки);
		Возврат;
		
	ИначеЕсли Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И (Не Форма.ПраваДоступа.ОткрытьСмену ИЛИ Не Форма.ПраваДоступа.ЗакрытьСмену) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.'"));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
	
КонецПроцедуры

// Контролирует параметры текущей кассовой смены оборудования, при необходимости открывает и закрывает кассовую смену
// в автоматическом режиме.
//
// Параметры:
//  Оборудование - СправочникСсылка.ПодключаемоеОборудование
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции.
//
Процедура ОбработатьСостояниеСменыАвтоматически(Оборудование, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Параметры = РозничныеПродажиВызовСервера.ПолучитьПараметрыОбработкиСостоянияСмены(Оборудование);
	
	Если Не Параметры.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Параметры.ПраваДоступа.ОткрытьСмену Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", Оборудование);
		ДополнительныеПараметры.Вставить("Форма", Параметры);
		
		УправлениеСостояниемСменыОбработкаКоманды("ОткрытьКассовуюСмену", ДополнительныеПараметры);
		
		Возврат;
		
	ИначеЕсли Не Параметры.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Не Параметры.ПраваДоступа.ОткрытьСмену Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.СтруктураСостояниеКассовойСмены.Ошибка24Часа
		И Параметры.ПраваДоступа.ОткрытьСмену
		И Параметры.ПраваДоступа.ЗакрытьСмену Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", Оборудование);
		ДополнительныеПараметры.Вставить("Форма", Параметры);
		
		УправлениеСостояниемСменыОбработкаКоманды("ЗакрытьИОткрытьКассовуюСмену", ДополнительныеПараметры);
		
		Возврат;
		
	ИначеЕсли Не Параметры.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И (Не Параметры.ПраваДоступа.ОткрытьСмену ИЛИ Не Параметры.ПраваДоступа.ЗакрытьСмену) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаПлатежнымиКартами

// Вызывает процедуры оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура:
//  	* Форма - ФормаКлиентскогоПриложения - содержит в том числе:
//  		** ЭквайринговыеТерминалы - см. Справочники.ЭквайринговыеТерминалы.ПараметрыЭквайринговыхТерминаловПоОрганизации
//  	* ЭквайринговыеТерминалы 	- СписокЗначений из СправочникСсылка.ПодключаемоеОборудование - содержит:
//  		** Значение - СправочникСсылка.ПодключаемоеОборудование
//  								- СправочникСсылка.ПодключаемоеОборудование
//  	* ОповещениеОЗавершении - ОписаниеОповещения
//  	* ПараметрыКассыККМ - Структура
//  	* ФормаАвторизации_Сумма - Число
//  	* ФормаАвторизации_ПределСуммы - Число
//  	* Валюта - СправочникСсылка.Валюты
//  	* СтруктураЭквайринговыйТерминал - Структура
//  	
Процедура ДобавитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатПроведения Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() = 1 Тогда
		
		ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(
			ДополнительныеПараметры.ЭквайринговыеТерминалы[0].Значение,
			ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
		
		Для каждого Терминал Из ДополнительныеПараметры.ЭквайринговыеТерминалы Цикл
			ТерминалЗначение = Терминал.Значение;
			ПараметрыФормы.СписокВыбора.Добавить(ТерминалЗначение, ТерминалЗначение.Ссылка);
		КонецЦикла;
		
		ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения(
				"ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала",
				РозничныеПродажиКлиент, ДополнительныеПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

// Вызывает процедуры отмены оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
// 	ДополнительныеПараметры - см. ДобавитьОплатуКартой.ДополнительныеПараметры
//
Процедура ОтменитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не РезультатПроведения Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны, ДанныеОтменыОплатыКартой", Ложь, Ложь, ДополнительныеПараметры));
		Возврат;
	КонецЕсли;
	
	РезультатОтменыОплатыКартой = СтруктураРезультатаОтменыОплатыКартой();
	РезультатОтменыОплатыКартой.СуммаОперации  = ТекущиеДанные.Сумма;
	РезультатОтменыОплатыКартой.СсылочныйНомер = ТекущиеДанные.СсылочныйНомер;
	РезультатОтменыОплатыКартой.НомерЧека      = ТекущиеДанные.НомерЧекаЭТ;
	РезультатОтменыОплатыКартой.СтрокаОплаты   = ТекущиеДанные;
	
	РезультатОтменыОплатыКартой.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
	РезультатОтменыОплатыКартой.Форма                   = ДополнительныеПараметры.Форма;
	
	ИдентификаторУстройстваЭТ = Неопределено;
	Для каждого Терминал Из ДополнительныеПараметры.Форма.ЭквайринговыеТерминалы Цикл
		ТерминалЗначение = Терминал.Значение;
		Если ТерминалЗначение.Ссылка = ТекущиеДанные.ЭквайринговыйТерминал Тогда
			СтруктураЭквайринговыйТерминал = ТерминалЗначение;
			ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ)
		Или (СтруктураЭквайринговыйТерминал <> Неопределено
		   И СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
				
				ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
				ПараметрыОперации.ТипТранзакции  = ДополнительныеПараметры.ТипТранзакции;
				ПараметрыОперации.СуммаОперации  = ТекущиеДанные.Сумма;
				ПараметрыОперации.НомерКарты     = "";
				ПараметрыОперации.НомерЧека      = ТекущиеДанные.НомерЧекаЭТ;
				ПараметрыОперации.СсылочныйНомер = ТекущиеДанные.СсылочныйНомер;
				ПараметрыОперации.КодАвторизации = ТекущиеДанные.КодАвторизации;
				
				Оповещение = Новый ОписаниеОповещения(
					"ПослеВыполненияОперацииОтменыОплатыКартойНаЭквайринговомТерминале",
					ЭтотОбъект,
					РезультатОтменыОплатыКартой);
				
				ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
					Оповещение,
					ДополнительныеПараметры.Форма.УникальныйИдентификатор,
					ИдентификаторУстройстваЭТ,
					ПараметрыОперации,
					,
					ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства);
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")  + " "+ ТекущиеДанные.Сумма               + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")     + " "+ ТекущиеДанные.НомерПлатежнойКарты + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'") + " "+ ТекущиеДанные.СсылочныйНомер      + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")      + " "+ ТекущиеДанные.НомерЧекаЭТ         + Символы.ПС;
				ТекстВопроса = ТекстВопроса + Символы.ПС;
				ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения(
						"ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации",
						РозничныеПродажиКлиент,
						РезультатОтменыОплатыКартой),
					ТекстВопроса,
					РежимДиалогаВопрос.ДаНет);
				
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Эквайринговый терминал не подключен. Операция по карте не выполнена.'");
			РозничныеПродажиВызовСервера.ЗаписьВЖурналРегистрации(ТекстСообщения, "ОтменитьОплатуКартой");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ВыполнитьОбработкуОповещения(
				ОповещениеПриЗавершении,
				Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны, ДанныеОтменыОплатыКартой", Ложь, Ложь, ДополнительныеПараметры));
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны, ДанныеОтменыОплатыКартой", Ложь, Ложь, ДополнительныеПараметры));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Закрывает сессию проверки на ККТ
//
// Параметры:
//  УникальныйИдентификатор - см. МенеджерОборудованияКлиент.НачатьЗакрытииСессииРегистрацииКМ.УникальныйИдентификатор 
// 	ИдентификаторУстройства - см. МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки.ИдентификаторУстройства
//
Процедура ЗакрытьСессиюПроверкиКМНаККТ(УникальныйИдентификатор, ИдентификаторУстройства) Экспорт
	
	Если МенеджерОборудованияКлиент.СессияПроверкиКодовМаркировки(ИдентификаторУстройства) <> Неопределено Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗакрытьСессиюПроверкиКМНаККТЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, , ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

// Метод для обработчки оповещения о завершении операции последовательного подключения оборудования при открытии формы. Используется в формах РМК паре с
// см. МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы
// Срабатывает каждый раз после подключениии очередного устройства. 
//
// Параметры:
//  Данные - см. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании 
//  ДополнительныеПараметры - Структура:
//   *Форма - ФормаКлиентскогоПриложения
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормыЗавершение(Данные, ДополнительныеПараметры) Экспорт
	
	СтатусПодключения = 1;
	ОтборДляПоиска = Новый Структура("Ссылка", Данные.ИдентификаторУстройства);
	Если Данные.Результат Тогда
		СтатусПодключения = 0;
	Иначе
		СообщитьОбОшибкеПриВыполненииОперацииНаУстройстве(Данные.ИдентификаторУстройства, "ПодключениеУстройства", Данные.ОписаниеОшибки);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДополнительныеПараметры.Форма.Оборудование.НайтиСтроки(ОтборДляПоиска) Цикл
		СтрокаТЧ.Подключено = СтатусПодключения;
	КонецЦикла;
	
	Оповестить("ОборудованиеПодключено", Новый Структура("ИдентификаторОборудования,Подключено", Данные.ИдентификаторУстройства, СтатусПодключения), ДополнительныеПараметры.Форма);
	
КонецПроцедуры

// Выдает сообщение пользователю об ошибке при выполнении операции на устройстве.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование
//  ТокенОперации - Строка - Поддерживаемые значения: ПодключениеУстройства, ОтключениеУстройства
//  ОписаниеОШибки - Строка -
//  ПутьКТабличнойЧасти - Строка
//
Процедура СообщитьОбОшибкеПриВыполненииОперацииНаУстройстве(Устройство, ТокенОперации, ОписаниеОшибки, ПутьКТабличнойЧасти="") Экспорт

	Если ТокенОперации = "ПодключениеУстройства" Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства %Устройство% произошла ошибка:
		                            |""%ОписаниеОшибки%"".'");
	ИначеЕсли ТокенОперации = "ОтключениеУстройства" Тогда
		ТекстСообщения = НСтр("ru = 'При отключении устройства %Устройство% произошла ошибка:
		                            |""%ОписаниеОшибки%"".'");
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции на устройстве %Устройство% произошла ошибка:
		                            |""%ОписаниеОшибки%"".'");
	КонецЕсли;
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Устройство%",     Устройство);
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,
		,
		ПутьКТабличнойЧасти,
		,
		Ложь);
	
КонецПроцедуры

// Открывает форму Подключенное оборудование, вызывается из форм разных РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ПодключитьОборудованиеПриОткрытии - Булево
//
Процедура ОткрытьФормуПодключенноеОборудование(Форма, ПодключитьОборудованиеПриОткрытии = Истина) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",           Форма.УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ПодключитьОборудованиеПриОткрытии", ПодключитьОборудованиеПриОткрытии);
	ПараметрыОткрытия.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования", Форма.ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ПодключенноеОборудование", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Выполняет обработку оповещения при подключении оборудования. Вызывается из форм РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Параметр - Структура:
//   *ИдентификаторОборудования - СправочникСсылка.ПодключаемоеОборудование
//   *Подключено - Число -
//  Источник - Произвольный
//
Процедура ОбработатьСобытиеОборудованиеПодключено(Форма, Параметр, Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") 
		И Источник.ИмяФормы = "Документ.ЧекККМ.Форма.ПодключенноеОборудование"
		И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		СтатусПодключенияДляЗамены = 1 - Параметр.Подключено;
		СтрокиОборудования = Форма.Оборудование.НайтиСтроки(Новый Структура("Ссылка,Подключено", Параметр.ИдентификаторОборудования, СтатусПодключенияДляЗамены));
		Для Каждого СтрокаОборудования Из СтрокиОборудования Цикл
			СтрокаОБорудования.Подключено = Параметр.Подключено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает подтверждение пользователя для отмены проведения документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ОписаниеОповещенияЗавершения - ОписаниеОповещения -
//
Процедура ОтобразитьВопросОНеобходимостиНепроведенногоДокумента(Форма, ОписаниеОповещенияЗавершения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершения", ОписаниеОповещенияЗавершения);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОтменеПроведенияДокумента", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru = 'Операция возможна только с непроведенным документом, отменить проведение документа?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Выполняет проверку возможности добавления оплаты бонусными баллами.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ПроверятьСтатусПроведения - Булево -
//  
// Возвращаемое значение:
//  Булево -
//
Функция ПроверитьВозможностьДобавленияОплатыБонуснымиБаллами(Форма, ПроверятьСтатусПроведения = Истина) Экспорт
	Результат = Истина;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если Форма.Объект.ЗаменяющиеТовары.Количество() = 0 Тогда
			
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'Для добавления оплаты бонусными баллами необходимо указать заменяющую позицию.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,);
			
		ИначеЕсли ЗначениеЗаполнено(Форма.Объект.Ссылка) 
				И РозничныеПродажиВызовСервера.НаОснованииЗаказаОформленаОтгрузка(Форма.Объект.Ссылка) Тогда
					
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'На основании заявки оформлена отгрузка. Добавить оплату бонусными баллами нельзя.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,);
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если Форма.Объект.Товары.Количество() = 0 Тогда
			
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'Для добавления оплаты бонусными баллами укажите хотя бы одну номенклатурную позицию.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,);
			
		ИначеЕсли ЗначениеЗаполнено(Форма.Объект.Ссылка) 
				И РозничныеПродажиВызовСервера.НаОснованииЗаказаОформленаОтгрузка(Форма.Объект.Ссылка) Тогда
					
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'На основании заказа оформлена отгрузка. Добавить оплату бонусными баллами нельзя.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверятьСтатусПроведения И Форма.Объект.Проведен Тогда
		
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Перед добавлением оплаты бонусными баллами необходимо отменить проведение документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,);
		
	КонецЕсли;
	
	Возврат Результат
КонецФункции

// Запрашивает подтверждение изменения операции при закрытии кассвой смены.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  ОповещениеОЗавершении - ОписаниеОповещения -
// 
// Возвращаемое значение:
//  Булево -
//
Функция ЗапроситьПодтверждениеИзмененияОперацииПриЗакрытииКассовойСмены(Форма, ОповещениеОЗавершении) Экспорт
	
	Результат = Ложь;
	ОперацияДоИзменения = ОбщегоНазначенияУТКлиентСервер.ПолучитьЗначениеДоИзменения(Форма, Форма.Элементы.ОперацияПриЗакрытииКассовойСмены.Имя);
	Если ОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ОперацииПриЗакрытииКассовойСмены.Нет")
		И Форма.НаборКонстант.ОперацияПриЗакрытииКассовойСмены <> ОперацияДоИзменения Тогда
		Результат = Истина;
		ТекстВопроса = НСтр("ru = 'Текущий режим работы не является рекомендуемым и более не поддерживается.
						|После изменения режима возврат к текущей настройке будет недоступен. Продолжить?'");
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьВкладкуОтчетыЗаСменуФормыДокументаКассоваяСмена(Документ)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ОткрытьФорму("Документ.КассоваяСмена.ФормаОбъекта", Новый Структура("Ключ,ОткрытьВкладкуОтчетыЗаСмену", Документ, Истина));
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьПользователюОписаниеОшибкиПриЗакрытииКассовойСмены(ОписаниеОшибки)

	// Текст ошибки должен появиться в окне открытого документа.
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Смена закрыта на фискальном регистраторе.
								|Дополнительное описание:
								|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьОтчетОРозничныхПродажах(Объект)
	
	ОписаниеОшибки = "";
	МассивДокументов = РозничныеПродажиВызовСервера.ЗакрытьКассовуюСмену(Объект, Ложь, ОписаниеОшибки);
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КассоваяСмена") Тогда
			ОткрытьВкладкуОтчетыЗаСменуФормыДокументаКассоваяСмена(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	СообщитьПользователюОписаниеОшибкиПриЗакрытииКассовойСмены(ОписаниеОшибки);
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, МассивДокументов);
	
КонецПроцедуры

Процедура ПослеОтветаНаВопросОбОтменеПроведенияДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОтменеПроведенияДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПодключаемоеОборудованиеУТКлиент.ЗаписатьОбъект(
			ДополнительныеПараметры.Форма,
			РежимЗаписиДокумента.ОтменаПроведения,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтветаНаВопросОбОтменеПроведенияДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Возвращается результат выполнения метода формы управляемого приложения Записать
	Если Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Снимает признак доступности формы, если он установлен.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ЗаблокироватьФорму(Форма) Экспорт
	
	Если Форма.Доступность = Истина Тогда
		Форма.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак доступности формы, если он не установлен.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура РазблокироватьФорму(Форма) Экспорт
	
	Если Форма.Доступность = Ложь Тогда
		Форма.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область УправлениеСостояниемСмены

Процедура УправлениеСостояниемСменыОбработкаКоманды(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат = "ОткрытьКассовуюСмену" Тогда
		ОткрытьКассовуюСмену(
			ДополнительныеПараметры.ПараметрыКассыККМ,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеОткрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
	Если Результат = "ЗакрытьИОткрытьКассовуюСмену" Тогда
		ЗакрытьКассовуюСмену(
			ДополнительныеПараметры.ПараметрыКассыККМ,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеЗакрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеЗакрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("Структура")
			Или ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("ФиксированнаяСтруктура") Тогда
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ;
		Иначе
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМФискальноеУстройство);
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма.Объект, "Кассир") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
		ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены);
		КонецЕсли;
		
		Если Не ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
			РозничныеПродажиКлиент.ОткрытьКассовуюСмену(ДополнительныеПараметры.ПараметрыКассыККМ, ДополнительныеПараметры.ОбработкаОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеОткрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("Структура")
			Или ТипЗнч(ДополнительныеПараметры.ПараметрыКассыККМ) = Тип("ФиксированнаяСтруктура") Тогда
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ;
		Иначе
			КассаККМФискальноеУстройство = ДополнительныеПараметры.ПараметрыКассыККМ;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМФискальноеУстройство);
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма.Объект, "Кассир") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
		ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаПлатежнымиКартами

Функция СтруктураРезультатаОплатыКартой()
	
	РезультатОплатыКартой = Новый Структура;
	РезультатОплатыКартой.Вставить("ЭквайринговыйТерминал");
	РезультатОплатыКартой.Вставить("НомерКарты");
	РезультатОплатыКартой.Вставить("СуммаОперации");
	РезультатОплатыКартой.Вставить("СсылочныйНомер");
	РезультатОплатыКартой.Вставить("НомерЧека");
	РезультатОплатыКартой.Вставить("КодАвторизации");
	
	РезультатОплатыКартой.Вставить("ОповещениеОЗавершении");
	
	Возврат РезультатОплатыКартой;
	
КонецФункции

Процедура ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(СтруктураЭквайринговыйТерминал, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЭквайринговыйТерминал <> Неопределено Тогда
		ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	Иначе
		ИдентификаторУстройстваЭТ = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = ИдентификаторУстройстваЭТ;
	ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = СтруктураЭквайринговыйТерминал;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ)
		Или (СтруктураЭквайринговыйТерминал <> Неопределено
		   И СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Сумма",       ДополнительныеПараметры.ФормаАвторизации_Сумма);
			ПараметрыФормы.Вставить("ПределСуммы", ДополнительныеПараметры.ФормаАвторизации_ПределСуммы);
			ПараметрыФормы.Вставить("Валюта",      ДополнительныеПараметры.Валюта);
			
			Если СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
				ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Не СтруктураЭквайринговыйТерминал.НеЗапрашиватьНомерКарты);
			КонецЕсли;
			
			ОткрытьФорму(
				"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,,
				Новый ОписаниеОповещения(
					"ДобавитьОплатуКартойЗавершение",
					РозничныеПродажиКлиент,
					ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Эквайринговый терминал не подключен. Операция по карте не выполнена.'");
			РозничныеПродажиВызовСервера.ЗаписьВЖурналРегистрации(
				ТекстСообщения, "ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала"); 
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		// Не выбран эквайринговый терминал
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Результат - Структура
// 	ДополнительныеПараметры - см. ДобавитьОплатуКартой.ДополнительныеПараметры
//
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТолькоЗаполнитьРезультатОплатыКартой") 
		И ДополнительныеПараметры.ТолькоЗаполнитьРезультатОплатыКартой = Истина Тогда
	
		Если НЕ (ТипЗнч(Результат) = Тип("Структура")
			И Результат.Свойство("Сумма")
			И Результат.Свойство("НомерЧека")
			И Результат.Свойство("НомерКарты")
			И Результат.Свойство("СсылочныйНомер")) Тогда

			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			Возврат;
		КонецЕсли;

		РезультатОплатыКартой = СтруктураРезультатаОплатыКартой();
		РезультатОплатыКартой.ЭквайринговыйТерминал = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.Ссылка;
		РезультатОплатыКартой.НомерКарты            = Результат.НомерКарты;
		РезультатОплатыКартой.СуммаОперации         = Результат.Сумма;
		РезультатОплатыКартой.НомерЧека             = Результат.НомерЧека;
		РезультатОплатыКартой.СсылочныйНомер        = Результат.СсылочныйНомер;
		РезультатОплатыКартой.КодАвторизации        = Неопределено;

		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатОплатыКартой);		
		
	ИначеЕсли Не ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		Если НЕ (ТипЗнч(Результат) = Тип("Структура")
			И Результат.Свойство("Сумма")
			И Результат.Свойство("НомерЧека")
			И Результат.Свойство("СсылочныйНомер")) Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			Возврат;
		КонецЕсли;
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("РозничныеПродажиКлиент.ДобавитьОплатуКартойЗавершение");
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.СуммаОперации  = Результат.Сумма;
		ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
		ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияОперацииОплатыКартойНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры);
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			ДополнительныеПараметры.Форма.УникальныйИдентификатор,
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ,
			ПараметрыОперации,
			,
			ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства);
		
	Иначе
		
		Если НЕ (ТипЗнч(Результат) = Тип("Структура")
			И Результат.Свойство("Сумма")
			И Результат.Свойство("НомерЧека")
			И Результат.Свойство("НомерКарты")
			И Результат.Свойство("СсылочныйНомер")) Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ Результат.Сумма + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
		
		РезультатОплатыКартой = СтруктураРезультатаОплатыКартой();
		РезультатОплатыКартой.ЭквайринговыйТерминал = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.Ссылка;
		РезультатОплатыКартой.НомерКарты            = Результат.НомерКарты;
		РезультатОплатыКартой.СуммаОперации         = Результат.Сумма;
		РезультатОплатыКартой.НомерЧека             = Результат.НомерЧека;
		РезультатОплатыКартой.СсылочныйНомер        = Результат.СсылочныйНомер;
		РезультатОплатыКартой.КодАвторизации        = Неопределено;
		
		РезультатОплатыКартой.ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ОплатаКартойПослеВопросаОЗавершенииАвторизации",
				РозничныеПродажиКлиент,
				РезультатОплатыКартой),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	РезультатВыполнения - Структура
// 	ДополнительныеПараметры - см. ДобавитьОплатуКартой.ДополнительныеПараметры
//
Процедура ПослеВыполненияОперацииОплатыКартойНаЭквайринговомТерминале(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении операции возникла ошибка:
			           |""%1"".
			           |Оплата по карте не была произведена.'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		РозничныеПродажиВызовСервера.ЗаписьВЖурналРегистрации(
			ТекстСообщения, "ПослеВыполненияОперацииОплатыКартойНаЭквайринговомТерминале");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	Иначе
		
		РезультатОплатыКартой = СтруктураРезультатаОплатыКартой();
		РезультатОплатыКартой.ЭквайринговыйТерминал = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.Ссылка;
		РезультатОплатыКартой.НомерКарты            = РезультатВыполнения.НомерКарты;
		РезультатОплатыКартой.СуммаОперации         = РезультатВыполнения.СуммаОперации;
		РезультатОплатыКартой.СсылочныйНомер        = РезультатВыполнения.СсылочныйНомер;
		РезультатОплатыКартой.НомерЧека             = РезультатВыполнения.НомерЧекаЭТ;
		РезультатОплатыКартой.КодАвторизации        = РезультатВыполнения.КодАвторизации;
		
		РезультатОплатыКартой.ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатОплатыКартой);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, РезультатОплатыКартой) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(РезультатОплатыКартой.ОповещениеОЗавершении, РезультатОплатыКартой);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(РезультатОплатыКартой.ОповещениеОЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

Функция СтруктураРезультатаОтменыОплатыКартой()
	
	РезультатОтменыОплатыКартой = Новый Структура;
	РезультатОтменыОплатыКартой.Вставить("СуммаОперации");
	РезультатОтменыОплатыКартой.Вставить("СсылочныйНомер");
	РезультатОтменыОплатыКартой.Вставить("НомерЧека");
	
	РезультатОтменыОплатыКартой.Вставить("СтрокаОплаты");
	РезультатОтменыОплатыКартой.Вставить("ОповещениеПриЗавершении");
	РезультатОтменыОплатыКартой.Вставить("Форма");
	
	Возврат РезультатОтменыОплатыКартой;
	
КонецФункции

Процедура ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, РезультатОтменыОплатыКартой) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартойЗавершение", РезультатОтменыОплатыКартой.Форма, РезультатОтменыОплатыКартой));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			РезультатОтменыОплатыКартой.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны, ДанныеОтменыОплатыКартой",
				Ложь, Ложь, РезультатОтменыОплатыКартой));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияОперацииОтменыОплатыКартойНаЭквайринговомТерминале(РезультатВыполнения, РезультатОтменыОплатыКартой) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении операции возникла ошибка:
			           |""%1"".
			           |Отмена оплаты по карте не была произведена.'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		РозничныеПродажиВызовСервера.ЗаписьВЖурналРегистрации(
			ТекстСообщения, "ПослеВыполненияОперацииОтменыОплатыКартойНаЭквайринговомТерминале");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(
			РезультатОтменыОплатыКартой.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны, ДанныеОтменыОплатыКартой",
				Ложь, Ложь, РезультатОтменыОплатыКартой));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартойЗавершение", РезультатОтменыОплатыКартой.Форма, РезультатОтменыОплатыКартой));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает операцию последовательной отмены оплаты платежными картами.
// 
// Параметры:
//  Результат - Булево
//  ДополнительныеПараметры - Структура, Неопределено - 
// 
Процедура ОтменитьОплатуПлатежнымиКартамиПоследовательно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() > 0 Тогда
		
		СтрокаОплаты = ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами[ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() - 1];
		ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Удалить(ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Найти(СтрокаОплаты));

		ПараметрыОтмены = Новый Структура;
		Если ДополнительныеПараметры.Свойство("Действие") И ДополнительныеПараметры.Действие = "ОтменитьОплатыПоследовательно" Тогда
			ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
		Иначе		
			ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиПоследовательно", РозничныеПродажиКлиент, ДополнительныеПараметры));
		КонецЕсли;
		ПараметрыОтмены.Вставить("ТекущиеДанные",           СтрокаОплаты);
		ПараметрыОтмены.Вставить("Форма",                   ДополнительныеПараметры.Форма);
		ПараметрыОтмены.Вставить("Валюта",                  ДополнительныеПараметры.Валюта);
		ПараметрыОтмены.Вставить("ПараметрыКассыККМ",       ДополнительныеПараметры.ПараметрыКассыККМ);
		ПараметрыОтмены.Вставить("ТипТранзакции",           ДополнительныеПараметры.ТипТранзакции);
		
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	РезультатВыбора - Структура:
// 		* Действие - Строка
// 		* ВыбраннаяСтрока - ДанныеФормыЭлементКоллекции
// 	ДополнительныеПараметры - Структура
// 
Процедура ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Если РезультатВыбора.Действие = "ОтменитьОплату" Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("КодАвторизации");
			ПараметрыОтбора.Вставить("НомерПлатежнойКарты");
			ПараметрыОтбора.Вставить("НомерСтроки");
			ПараметрыОтбора.Вставить("НомерЧекаЭТ");
			ПараметрыОтбора.Вставить("СсылочныйНомер");
			ПараметрыОтбора.Вставить("Сумма");
			ПараметрыОтбора.Вставить("ЭквайринговыйТерминал");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, РезультатВыбора.ВыбраннаяСтрока);
			
			НайденныеСтроки = ДополнительныеПараметры.Форма.Объект.ОплатаПлатежнымиКартами.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ПараметрыОтмены = Новый Структура;
				ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
				ПараметрыОтмены.Вставить("ТекущиеДанные",           НайденныеСтроки[0]);
				ПараметрыОтмены.Вставить("Форма",                   ДополнительныеПараметры.Форма);
				ПараметрыОтмены.Вставить("Валюта",                  ДополнительныеПараметры.Валюта);
				ПараметрыОтмены.Вставить("ПараметрыКассыККМ",       ДополнительныеПараметры.ПараметрыКассыККМ);
				ПараметрыОтмены.Вставить("ТипТранзакции",           ДополнительныеПараметры.ТипТранзакции);
				
				ВыполнитьОбработкуОповещения(
					Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
				
			КонецЕсли;
		ИначеЕсли РезультатВыбора.Действие = "ОтменитьОплатыПоследовательно" Тогда
			Если РезультатВыбора.ВыбраннаяСтрока.Количество() > 0 Тогда
				
				ПараметрыОтмены = Новый Структура;
				ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
				ПараметрыОтмены.Вставить("СтрокиОплатыПлатежнымиКартами", РезультатВыбора.ВыбраннаяСтрока);
				ПараметрыОтмены.Вставить("Форма",                   ДополнительныеПараметры.Форма);
				ПараметрыОтмены.Вставить("Валюта",                  ДополнительныеПараметры.Валюта);
				ПараметрыОтмены.Вставить("ПараметрыКассыККМ",       ДополнительныеПараметры.ПараметрыКассыККМ);
				ПараметрыОтмены.Вставить("ТипТранзакции",           ДополнительныеПараметры.ТипТранзакции);
				
				ПараметрыОтмены.Вставить("Действие",				РезультатВыбора.Действие);
				
				ВыполнитьОбработкуОповещения(
					Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиПоследовательно", ЭтотОбъект, ПараметрыОтмены));
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

Процедура ПослеЗавершенияОчисткиДисплеяПокупателя(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя();
		ПараметрыОперации.СтрокиТекста = ДополнительныеПараметры.ТекстДляВыводаНаДисплейПокупателя;
		
		ОборудованиеДисплеиПокупателяКлиент.НачатьВыводИнформацииНаДисплейПокупателя(
			Новый ОписаниеОповещения("ПослеВыводаТекстаНаДисплейПокупателя", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.Форма.УникальныйИдентификатор,
			ДополнительныеПараметры.ИдентификаторУстройства,
			ПараметрыОперации);
		
	Иначе
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.
			           |Дополнительное описание:
			           |%1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаТекстаНаДисплейПокупателя(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.
			           |Дополнительное описание:
			           |%1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КассовыеСмены

Процедура ПослеВыполненияКомандыОткрытияСмены(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СменаОткрытаНаУстройстве = РезультатВыполнения.Результат;
	Если Не СменаОткрытаНаУстройстве Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При открытии смены произошла ошибка.
			           |Смена не открыта на фискальном устройстве.
			           |Дополнительное описание:
			           |%1'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, СменаОткрытаНаУстройстве);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияКомандыЗакрытияСмены(РезультатВыполнения, Контекст) Экспорт
	
	СнятZОтчетНаУстройстве = РезультатВыполнения.Результат;
	Если СнятZОтчетНаУстройстве Тогда
		
		ОткрытьВкладкуОтчетыЗаСменуФормыДокументаКассоваяСмена(РезультатВыполнения.КассоваяСмена);
		СообщитьПользователюОписаниеОшибкиПриЗакрытииКассовойСмены(РезультатВыполнения.ОписаниеОшибки);
		
		НачатьВыполнениеЗакрытиеКассовойСменыНаЭквайринговомТерминале(РезультатВыполнения, Контекст);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'При снятии отчета на фискальном устройстве произошла ошибка.
		                    |""%ОписаниеОшибки%""
		                    |
		                    |Если смена на фискальном устройстве закрыта, то
		                    |нажмите ""Да"" для формирования отчета о розничных продажах.
		                    |
		                    |Закрыть смену?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОшибки",               РезультатВыполнения.ОписаниеОшибки);
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", Контекст.ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("ФискальноеУстройство",         Контекст.ФискальноеУстройство);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ПослеОтветаНаВопросОПринудительномФормированииОтчетаОРозничныхПродажах",
				РозничныеПродажиКлиент,
				ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеЗакрытиеКассовойСменыНаЭквайринговомТерминале(РезультатВыполнения, Контекст)  
	
	ПодключаемоеОборудование = РозничныеПродажиВызовСервера.ОборрудованиеЭквайринговогоТерминалаДляСверкиИтогов(Контекст.ФискальноеУстройство);   
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", РозничныеПродажиКлиент, Контекст); 
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда    	
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, Новый УникальныйИдентификатор, ПодключаемоеОборудование, ПараметрыОперации);	
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);  
	КонецЕсли;  
	
КонецПроцедуры           
	

Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда     	
		Если РезультатВыполнения.Результат Тогда
			ТекстСообщения = НСтр("ru = 'Сверка итогов эквайринга выполнена успешно.'");
		Иначе
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
	Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Истина);
	КонецЕсли;   
	
КонецПроцедуры

Процедура ПослеОтветаНаВопросОПринудительномФормированииОтчетаОРозничныхПродажах(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СформироватьОтчетОРозничныхПродажах(Контекст.ФискальноеУстройство);
		
		Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Истина);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном устройстве произошла ошибка.
		                     |""%ОписаниеОшибки%""
		                     |Отчет на фискальном устройстве не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Контекст.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияКомандыОтчетБезГашения(РезультатВыполнения, Контекст) Экспорт    
	
	Если РезультатВыполнения <> Неопределено Тогда     	
		Если РезультатВыполнения.Результат Тогда 
			 ТекстСообщения = НСтр("ru='Операция успешно завершена.'");
		Иначе
			ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать Отчет без гашения, произошла ошибка. 	
			|Дополнительное описание:
			|%1'"),
			РезультатВыполнения.ОписаниеОшибки); 		 		
		КонецЕсли;   
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;    
	
	Если Контекст.ОписаниеОповещенияЗавершение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещенияЗавершение, Истина);
	КонецЕсли;   
	
КонецПроцедуры 

#КонецОбласти

#Область ВнесениеИВыемкаДенег

// Параметры:
// 	ИзымаемаяСумма - Число
// 	ДополнительныеПараметры - Структура:
//		* ОписаниеОповещенияЗавершение - ОписаниеОповещения
//
Процедура ВыемкаДенегЗавершение(ИзымаемаяСумма, ДополнительныеПараметры) Экспорт
	
	Если ИзымаемаяСумма <> Неопределено И ТипЗнч(ИзымаемаяСумма) = Тип("Число") Тогда
		
		РеквизитыВыемкаДенежныхСредствИзКассыККМ = Новый Структура;
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("Организация",    ДополнительныеПараметры.ПараметрыКассыККМ.Организация);
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("КассаККМ",       ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ);
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("СуммаДокумента", ИзымаемаяСумма);
		РеквизитыВыемкаДенежныхСредствИзКассыККМ.Вставить("Валюта",         ДополнительныеПараметры.ПараметрыКассыККМ.Валюта);
		
		//Создаем документ ВыемкаДенежныхСредствИзКассыККМ независимо от ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования
		СсылкаНаДокументВыемка = Неопределено;
		ОписаниеОшибки = "";
		Результат = РозничныеПродажиВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(
			РеквизитыВыемкаДенежныхСредствИзКассыККМ, СсылкаНаДокументВыемка, ОписаниеОшибки);
		
		Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено
			И ДополнительныеПараметры.ОписаниеОповещенияЗавершение.ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("СсылкаНаДокумент", СсылкаНаДокументВыемка);
		КонецЕсли;
			
		Если Результат Тогда
			
			Если Не ДополнительныеПараметры.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
				
				ПараметрыОперации = Новый Структура;
				ПараметрыОперации.Вставить("СуммаДокумента",                  ИзымаемаяСумма);
				ПараметрыОперации.Вставить("ДокументСсылка",                  СсылкаНаДокументВыемка);
				ПараметрыОперации.Вставить("Организация",                     ДополнительныеПараметры.ПараметрыКассыККМ.Организация);
				ПараметрыОперации.Вставить("ТорговыйОбъект",                  ДополнительныеПараметры.ПараметрыКассыККМ.КассаККМ);
				ПараметрыОперации.Вставить("ПодключенноеОборудование",        ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства);
				
				ПодключаемоеОборудованиеУТКлиент.ПробитьЧекВыемкаДенежныхСредств(
					ДополнительныеПараметры.Форма,
					ПараметрыОперации,
					Неопределено,
					ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
			Иначе
				
				Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Результат);
				КонецЕсли;
					
			КонецЕсли;
			
		Иначе		
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'При выемке денежных средств из кассы ККМ произошла ошибка.
				           |Дополнительное описание:
				           |%1'"), ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Результат);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	СтруктураВыбранныеДанные - Структура
// 	ДополнительныеПараметры - Структура:
//		* ОписаниеОповещенияЗавершение - ОписаниеОповещения
//
Процедура ВнесениеДенегЗавершение(СтруктураВыбранныеДанные, ДополнительныеПараметры) Экспорт
	Результат = Ложь;
	
	Если Не СтруктураВыбранныеДанные = Неопределено Тогда
		
		РеквизитыВнесениеДенежныхСредствВКассуККМ = Новый Структура;
		РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("Организация",       СтруктураВыбранныеДанные.Организация);
		РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("Касса",             СтруктураВыбранныеДанные.Касса);
		РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("КассаККМ",          СтруктураВыбранныеДанные.КассаККМ);
		РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("СуммаДокумента",    СтруктураВыбранныеДанные.СуммаВнесения);
		РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("Валюта",            СтруктураВыбранныеДанные.Валюта);
		РеквизитыВнесениеДенежныхСредствВКассуККМ.Вставить("ДокументОснование", СтруктураВыбранныеДанные.ПриходныйКассовыйОрдер);
		
		//Создаем документ ВнесениеДенежныхСредствВКассуККМ независимо от ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования
		СсылкаНаДокументВнесение = Неопределено;
		ОписаниеОшибки = "";
		Результат = РозничныеПродажиВызовСервера.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(
			РеквизитыВнесениеДенежныхСредствВКассуККМ, СсылкаНаДокументВнесение, ОписаниеОшибки);
			
		Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ДополнительныеПараметры.ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("СсылкаНаДокумент", СсылкаНаДокументВнесение);
		КонецЕсли;
		
		Если Результат Тогда 
					
			Если Не ДополнительныеПараметры.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
				
				ПараметрыОперации = Новый Структура;
				ПараметрыОперации.Вставить("СуммаДокумента",                   СтруктураВыбранныеДанные.СуммаВнесения);
				ПараметрыОперации.Вставить("Валюта",                           СтруктураВыбранныеДанные.Валюта);
				ПараметрыОперации.Вставить("ДокументСсылка",                   СсылкаНаДокументВнесение);
				ПараметрыОперации.Вставить("Организация",                      СтруктураВыбранныеДанные.Организация);
				ПараметрыОперации.Вставить("ТорговыйОбъект",                   СтруктураВыбранныеДанные.КассаККМ);
				ПараметрыОперации.Вставить("ПодключенноеОборудование",         ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства);
				
				ПодключаемоеОборудованиеУТКлиент.ПробитьЧекВнесениеДенежныхСредств(
					ДополнительныеПараметры.Форма,
					ПараметрыОперации,
					Неопределено,
					ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
			Иначе
				
				Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Результат);
				КонецЕсли;
					
			КонецЕсли;
					
		Иначе
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'При внесении денежных средств в кассу ККМ произошла ошибка.
				           |Дополнительное описание:
				           |%1'"),
				ОписаниеОшибки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Если ДополнительныеПараметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, Результат);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

Процедура ЗакрытьСессиюПроверкиКМНаККТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Обработать, при необходимости, результат закрытия сессии проверки КМ на ККТ.
	Возврат;
	
КонецПроцедуры

#КонецОбласти
