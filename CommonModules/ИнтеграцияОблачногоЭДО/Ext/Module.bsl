// strict-types

#Область ПрограммныйИнтерфейс

// См. ЭлектронноеВзаимодействие.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки
// 
// Параметры:
//  Типы - См. ЭлектронноеВзаимодействие.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.Типы
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.АдресСервисаОблачногоЭДО);
	Типы.Добавить(Метаданные.Константы.ИспользоватьИнтеграциюОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.ВизуализацииДокументовОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияПравилВизуализацииОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО);
	Типы.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиОблачногоЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрактМенеджераДействийЭДО

// Параметры:
//  МенеджерыДействийЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО) Экспорт
	
	ИспользоватьИнтеграциюОблачногоЭДО = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюОблачногоЭДО");
	
	Если ИспользоватьИнтеграциюОблачногоЭДО Тогда
		МенеджерыДействийЭДО.Вставить(
			ИнтеграцияОблачногоЭДОКлиентСервер.ИдентификаторМенеджераДействийЭДО(),
			ИнтеграцияОблачногоЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет указанные действия над переданными объектами в облачном ЭДО.
// 
// Параметры:
//  ПараметрыВыполнения - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - Неопределено
//                      - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияДействийЭДО
Функция ВыполнитьДействияЭДО(ПараметрыВыполнения, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатВыполненияДействий = НовыйРезультатВыполненияДействийЭДО();
	
	Если КонтекстДиагностики <> Неопределено Тогда
		РезультатВыполненияДействий.КонтекстДиагностики = КонтекстДиагностики;
	КонецЕсли;
	
	ОбъектыОперацийПоУчетнымЗаписям = ОбъектыОперацийПоУчетнымЗаписямСервиса(ПараметрыВыполнения.ОбъектыДействий);
	
	Если Не ЗначениеЗаполнено(ОбъектыОперацийПоУчетнымЗаписям) Тогда
		Возврат РезультатВыполненияДействий;
	КонецЕсли;
	
	КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	
	ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики);
	
	Для Каждого ОбъектыОперацииПоУчетнойЗаписи Из ОбъектыОперацийПоУчетнымЗаписям Цикл
		
		ИдентификаторУчетнойЗаписи = ОбъектыОперацииПоУчетнойЗаписи.Ключ;
		ОбъектыОперации = ОбъектыОперацииПоУчетнойЗаписи.Значение;
		
		ПараметрыОперации = НовыеПараметрыВыполненияОперацииПоДействиямЭДО();
		ПараметрыОперации.ОбъектыОперации = ОбъектыОперации;
		ПараметрыОперации.НаборДействий = ПараметрыВыполнения.НаборДействий;
		ПараметрыОперации.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
		ПараметрыОперации.ОбработатьТолькоИзвещения = ПараметрыВыполнения.ОбработатьТолькоИзвещения;
		
		ОтпечаткиПоКонтекстам = ПараметрыВыполнения.ОтпечаткиСертификатов; // См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
		Если ОтпечаткиПоКонтекстам <> Неопределено Тогда
			ПараметрыОперации.ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(
				ОтпечаткиПоКонтекстам);
		КонецЕсли;
		
		ОперацияПоДействиямЭДО = ОперацияСервисаПоДействиямЭДО(ПараметрыОперации, КонтекстДиагностики);
		
		РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияПоДействиямЭДО);
		
		ДополнитьРезультатВыполненияДействийРезультатомОперацииСервиса(
			РезультатВыполненияДействий, РезультатОперации, ПараметрыОперации.НаборДействий);
		
	КонецЦикла;
	
	Возврат РезультатВыполненияДействий;
	
КонецФункции

// Параметры:
//  РезультатВыполненияДействий - см. ВыполнитьДействияЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияДействийЭДО
Функция РезультатВыполненияДействийЭДОДляКлиента(РезультатВыполненияДействий) Экспорт
	Возврат РезультатВыполненияДействий;
КонецФункции

// Параметры:
//  ПараметрыПродолженияПоУчетнымЗаписям - см. ИнтеграцияОблачногоЭДОКлиент.НовыеПараметрыПродолженияВыполненияДействийЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДОКлиент.НовыеПараметрыПродолженияВыполненияДействийЭДО
Функция ПараметрыПродолженияДействийЭДОВФоне(ПараметрыПродолженияПоУчетнымЗаписям) Экспорт
	Возврат ПараметрыПродолженияПоУчетнымЗаписям;
КонецФункции

// Параметры:
//  ПараметрыПродолженияПоУчетнымЗаписям - см. ПараметрыПродолженияДействийПоИнтеграциямЭДОВФоне
//  ПараметрыВыполнения - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияДействийЭДО
Функция ПродолжитьВыполнениеДействийЭДОПослеОбработкиРезультатов(ПараметрыПродолженияПоУчетнымЗаписям, ПараметрыВыполнения) Экспорт
	
	РезультатВыполненияДействий = НовыйРезультатВыполненияДействийЭДО();
	
	Если Не ЗначениеЗаполнено(ПараметрыПродолженияПоУчетнымЗаписям) Тогда
		Возврат РезультатВыполненияДействий;
	КонецЕсли;
	
	КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	
	ОбъектыОперацийПоУчетнымЗаписям = ОбъектыОперацийПоУчетнымЗаписямСервиса(ПараметрыВыполнения.ОбъектыДействий);
	
	Для Каждого ПараметрыПродолженияПоУчетнойЗаписи Из ПараметрыПродолженияПоУчетнымЗаписям Цикл
		
		ИдентификаторУчетнойЗаписи = ПараметрыПродолженияПоУчетнойЗаписи.Ключ;
		ПараметрыПродолжения = ПараметрыПродолженияПоУчетнойЗаписи.Значение;
		
		ОперацияСервиса = ОперацияСервисаПоДобавлениюПодписейФайлов(ИдентификаторУчетнойЗаписи,
			ПараметрыПродолжения.ПодписиДанных);
		
		ПараметрыОперации = НовыеПараметрыВыполненияОперацииПоДействиямЭДО();
		ПараметрыОперации.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
		ПараметрыОперации.ОбъектыОперации = ОбъектыОперацийПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи];
		ПараметрыОперации.НаборДействий = ПараметрыПродолжения.НаборДействий;
		ПараметрыОперации.МаркерыАвторизации = МаркерыАвторизацииИзРасшифрованныхМаркеров(
			ПараметрыПродолжения.РасшифрованныеМаркеры);
		
		ОтпечаткиПоКонтекстам = ПараметрыВыполнения.ОтпечаткиСертификатов; // См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
		Если ОтпечаткиПоКонтекстам <> Неопределено Тогда
			ПараметрыОперации.ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(
				ОтпечаткиПоКонтекстам);
		КонецЕсли;
		
		ОперацияПоДействиямЭДО = ОперацияСервисаПоДействиямЭДО(ПараметрыОперации, КонтекстДиагностики);
		
		Если ОперацияСервиса = Неопределено Тогда
			ОперацияСервиса = ОперацияПоДействиямЭДО;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОперацияСервиса.ОписанияМетодов,
				ОперацияПоДействиямЭДО.ОписанияМетодов);
		КонецЕсли;
		
		РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
		
		ДополнитьРезультатВыполненияДействийРезультатомОперацииСервиса(
			РезультатВыполненияДействий, РезультатОперации, ПараметрыОперации.НаборДействий);
		
	КонецЦикла;
	
	Возврат РезультатВыполненияДействий;
	
КонецФункции

#КонецОбласти

#Область КонтрактМенеджераДанных

// Возвращаемое значение:
//  ОбщийМодуль
Функция МенеджерДанныхИнтеграцииОблачногоЭДО() Экспорт
	Возврат ИнтеграцияОблачногоЭДО;
КонецФункции

#КонецОбласти // КонтрактМенеджераДанных

#Область УчетныеЗаписиОблачногоЭДО

// Параметры:
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Булево
Функция ОрганизацияПодключена(Организация) Экспорт
	Возврат РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ОрганизацияПодключена(Организация);
КонецФункции

#КонецОбласти

#Область ПросмотрДокумента

// Параметры:
//  ДанныеКомпонентов - см. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентовПросмотраДокумента(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	ОбъектыУчета = ПараметрыЗаполнения.ОбъектыУчетаДокумента;
	ПредварительныйПросмотр = ПараметрыЗаполнения.ПредварительныйПросмотр;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПометкиНаУдаление) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление(
			ДанныеКомпонентов.ПанельПометкиНаУдаление, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
		ДанныеКомпонентов.ПанельКомандНастроекВизуализации.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		ДанныеКомпонентов.ПанельВизуализации.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонентов.ПанельИтогов, СвойстваДокумента,
			ПредварительныйПросмотр);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтветственного) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельОтветственного(
			ДанныеКомпонентов.ПанельОтветственного, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандВходящегоДокумента) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента(
			ДанныеКомпонентов.ПанельКомандВходящегоДокумента, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандИсходящегоДокумента) Тогда
		ИмяФайла = ?(ЗначениеЗаполнено(ПредварительныйПросмотр), ПредварительныйПросмотр.ИмяДобавляемогоФайла, "");
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента(
			ДанныеКомпонентов.ПанельКомандИсходящегоДокумента, СвойстваДокумента, НастройкиФормы, ОбъектыУчета,
				ИмяФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонентов.ПанельПакета, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКарточки) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКарточки(
			ДанныеКомпонентов.ПанельКарточки, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСостояния) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСостояния(
			ДанныеКомпонентов.ПанельСостояния, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтраженияВУчете) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете(
			ДанныеКомпонентов.ПанельОтраженияВУчете, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей) Тогда
		ДанныеКомпонентов.ПанельПодписей.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		ДанныеКомпонентов.ПанельМаршрута.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента) Тогда
		ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента) Тогда
		ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента) Тогда
		ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонентов - см. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	ПредварительныйПросмотр = ПараметрыЗаполнения.ПредварительныйПросмотр; // См. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов 
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		СвойстваДокумента.Организация);
	Если Не ЗначениеЗаполнено(ИдентификаторУчетнойЗаписи) Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует учетная запись облачного ЭДО'");
	КонецЕсли;
	
	ИдентификаторДокумента = СвойстваДокумента.ИдентификаторДокумента;
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИтогиДокументаПоСодержанию(ИдентификаторДокумента);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 0);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(СвойстваДокумента.Ссылка);
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИменаФайловОтправителейДокументовПакета(ИдентификаторПакета);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 1);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		ПараметрыВизуализации = НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = НастройкиФормы.ВыводитьБанковскиеРеквизиты;
		ПараметрыВизуализации.ВыводитьДопДанные = Не НастройкиФормы.ОтключитьВыводДопДанных;
		ПараметрыВизуализации.ВыводитьКопияВерна = Не НастройкиФормы.ОтключитьВыводКопияВерна;
		ПараметрыВизуализации.ВыводитьШапкуСИдДокумента = Ложь;
		
		Если ЗначениеЗаполнено(ПредварительныйПросмотр) Тогда
			ФайлДокумента = Новый Структура;
			ФайлДокумента.Вставить("ИмяФайла", ПредварительныйПросмотр.ИмяДобавляемогоФайла);
			ФайлДокумента.Вставить("Данные", Base64Строка(ПредварительныйПросмотр.ДвоичныеДанныеДобавляемогоФайла));
			ФайлыДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлДокумента);
			
			ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаВизуализацияФайловДокументаЭДО(ФайлыДокумента,
				ПараметрыВизуализации);
		Иначе
			ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаВизуализацияДокумента(ИдентификаторДокумента,
				ПараметрыВизуализации);
		КонецЕсли;
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 2);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей)
		Или ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента)
		Или ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента)
		Или ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУстановленныеПодписи(ИдентификаторДокумента);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 3);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента)
		Или ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСопроводительныеЗаписиДокумента(ИдентификаторДокумента);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 4);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута)
		И ДанныеКомпонентов.ПанельМаршрута.АсинхронноеПолучение Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаМаршрутПодписанияДокумента(ИдентификаторДокумента);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 5);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	ИтогиДокументаПоСодержаниюВФорматеСервиса = РезультатыМетодов[0]; // См. СервисОблачногоЭДО.НовыеИтогиДокументаПоСодержанию
	ИменаФайловОтправителейДокументовПакета = РезультатыМетодов[1]; // См. СервисОблачногоЭДО.НовыеИменаФайловОтправителейДокументовПакета
	ВизуализацияВФорматеСервиса = РезультатыМетодов[2]; // См. СервисОблачногоЭДО.НовыеСвойстваВизуализацииДокумента
	ОписаниеПодписейВФорматеСервиса = РезультатыМетодов[3]; // См. СервисОблачногоЭДО.НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
	СопроводительныеЗаписиВФорматеСервиса = РезультатыМетодов[4]; // См. СервисОблачногоЭДО.НовыеСопроводительныеЗаписиДокумента
	МаршрутПодписанияВФорматеСервиса = РезультатыМетодов[5]; // См. СервисОблачногоЭДО.НовыйРезультатМетодаМаршрутПодписанияДокумента
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		ЗаполнитьДанныеКомпонентаПанельИтоговАсинхронно(ДанныеКомпонентов.ПанельИтогов, СвойстваДокумента,
			ИтогиДокументаПоСодержаниюВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		ЗаполнитьДанныеКомпонентаПанельПакетаАсинхронно(ДанныеКомпонентов.ПанельПакета, СвойстваДокумента,
			ИменаФайловОтправителейДокументовПакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
		ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализацииАсинхронно(
			ДанныеКомпонентов.ПанельКомандНастроекВизуализации, ВизуализацияВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		ЗаполнитьДанныеКомпонентаПанельВизуализацииАсинхронно(ДанныеКомпонентов.ПанельВизуализации,
			ВизуализацияВФорматеСервиса, НастройкиФормы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей) Тогда
		ЗаполнитьДанныеКомпонентаПанельПодписейАсинхронно(ДанныеКомпонентов.ПанельПодписей,
			ОписаниеПодписейВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента) Тогда
		ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокументаАсинхронно(
			ДанныеКомпонентов.ПанельСопроводительнойЗаписки, СвойстваДокумента, СопроводительныеЗаписиВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокументаАсинхронно(
			ДанныеКомпонентов.ПанельСопроводительнойЗаписки, СвойстваДокумента, СопроводительныеЗаписиВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		ЗаполнитьДанныеКомпонентаПанельМаршрутаАсинхронно(ДанныеКомпонентов.ПанельМаршрута, СвойстваДокумента,
			МаршрутПодписанияВФорматеСервиса, ОписаниеПодписейВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента) Тогда
		ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокументаАсинхронно(
			ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента, ОписаниеПодписейВФорматеСервиса,
				СопроводительныеЗаписиВФорматеСервиса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента) Тогда
		ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокументаАсинхронно(
			ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента, СвойстваДокумента,
			ОписаниеПодписейВФорматеСервиса, СопроводительныеЗаписиВФорматеСервиса, МаршрутПодписанияВФорматеСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ВыводитьДопДанные - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ВыводитьКопияВерна - Булево
//  * ПодсказкаQRКода - Строка
//  * ПубличнаяСсылкаQRКода - Строка
Функция НовыеПараметрыВизуализацииДокумента() Экспорт
	ПараметрыВизуализацииДокумента = Новый Структура;
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьДопДанные", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьБанковскиеРеквизиты", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ВыводитьКопияВерна", Истина);
	ПараметрыВизуализацииДокумента.Вставить("ПодсказкаQRКода", "");
	ПараметрыВизуализацииДокумента.Вставить("ПубличнаяСсылкаQRКода", "");
	Возврат ПараметрыВизуализацииДокумента;
КонецФункции

// Параметры:
//  ОписаниеОбъектаУчета - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ОписаниеОбъектаУчета
//  НастройкиФормирования - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.НастройкиФормирования
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотра
Функция ПодготовитьДанныеПредварительногоПросмотра(ОписаниеОбъектаУчета, НастройкиФормирования,
	ПараметрыОткрытия) Экспорт
	Возврат ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
КонецФункции

// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл) Экспорт
	Возврат ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыВизуализации - см. НовыеПараметрыВизуализацииДокумента
// 
// Возвращаемое значение:
//  Структура:
//  * Визуализация - см. РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
//  * СостояниеДокументаПолное - см. РегистрыСведений.СостоянияДокументовЭДО.НовоеСостояниеДокументаПолное
//  * ОписанияУстановленныхПодписей - см. ОписанияУстановленныхПодписейИзФорматаСервиса
Функция ДанныеДляПросмотраДокументаЭДО(ЭлектронныйДокумент, ПараметрыВизуализации) Экспорт
	
	ДанныеДляПросмотра = Новый Структура;
	ДанныеДляПросмотра.Вставить("Визуализация", Новый Структура);
	ДанныеДляПросмотра.Вставить("СостояниеДокументаПолное", Новый Структура);
	ДанныеДляПросмотра.Вставить("ОписанияУстановленныхПодписей", Новый ТаблицаЗначений);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"Организация, ИдентификаторДокумента");
	
	Организация = РеквизитыДокумента.Организация;
	ИдентификаторДокумента = РеквизитыДокумента.ИдентификаторДокумента;
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		Организация);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаВизуализацияДокумента(
		ИдентификаторДокумента, ПараметрыВизуализации);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСостояниеДокументаЭДО(ИдентификаторДокумента);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУстановленныеПодписи(ИдентификаторДокумента);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	ВизуализацияВФорматеСервиса = РезультатыМетодов[0]; // См. ВизуализацияДокументаИзФорматаСервиса.СвойстваВизуализацииВФорматеСервиса
	Если ЗначениеЗаполнено(ВизуализацияВФорматеСервиса) Тогда
		Визуализация = ВизуализацияДокументаИзФорматаСервиса(ВизуализацияВФорматеСервиса);
		СохранитьКэшВизуализацииДокумента(ЭлектронныйДокумент, Визуализация);
		ДанныеДляПросмотра.Визуализация = Визуализация;
	КонецЕсли;
	
	СостояниеДокументаВФорматеСервиса = РезультатыМетодов[1]; // См. СостояниеДокументаИзФорматаСервиса.СостояниеДокументаВФорматаСервиса
	Если ЗначениеЗаполнено(СостояниеДокументаВФорматеСервиса) Тогда
		СостояниеДокументаПолное = СостояниеДокументаИзФорматаСервиса(СостояниеДокументаВФорматеСервиса);
		ДанныеДляПросмотра.СостояниеДокументаПолное = СостояниеДокументаПолное;
	КонецЕсли;
	
	УстановленныеПодписиВФорматеСервиса = РезультатыМетодов[2]; // см. ОписанияУстановленныхПодписейИзФорматаСервиса.УстановленныеПодписиВФорматаСервиса
	Если ЗначениеЗаполнено(УстановленныеПодписиВФорматеСервиса) Тогда
		ОписанияУстановленныхПодписей = ОписанияУстановленныхПодписейИзФорматаСервиса(УстановленныеПодписиВФорматеСервиса);
		ДанныеДляПросмотра.ОписанияУстановленныхПодписей = ОписанияУстановленныхПодписей;
	КонецЕсли;
	
	Возврат ДанныеДляПросмотра;
	
КонецФункции

// Параметры:
//  ОписанияЭлектронныхДокументовПоОбъектуУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  УчитыватьВсеАктуальные - Булево
// 
// Возвращаемое значение:
//  см. ИнтерфейсДокументовЭДО.НовыйНаборСтатусовЭлектронныхДокументов
Функция СтатусыЭлектронныхДокументов(ОписанияЭлектронныхДокументовПоОбъектуУчета, УчитыватьВсеАктуальные = Ложь) Экспорт
	
	НаборСтатусов = ИнтерфейсДокументовЭДО.НовыйНаборСтатусовЭлектронныхДокументов();
	
	Если УчитыватьВсеАктуальные Тогда
		
		ОбъектыУчета = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияЭлектронныхДокументовПоОбъектуУчета,
			"ОбъектУчета", Истина);
	Иначе
		
		ОбъектыУчета = Новый Массив;
		
	КонецЕсли;
	
	РеквизитыАктуальныхДокументов = РеквизитыАктуальныхДокументовДляПросмотраСтатусов(ОбъектыУчета);
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияЭлектронныхДокументовПоОбъектуУчета, "Организация", Истина);
	ОрганизацииДокументов = ОбщегоНазначения.ВыгрузитьКолонку(РеквизитыАктуальныхДокументов, "Организация", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Организации, ОрганизацииДокументов, Истина);
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	Если Не ЗначениеЗаполнено(УчетныеЗаписиСервиса) Тогда
		Возврат НаборСтатусов;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	НастройкиФормирования = НастройкиФормированияДокументовЭДО(ОписанияЭлектронныхДокументовПоОбъектуУчета,
		КонтекстДиагностики);
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиСервиса Цикл
		
		Организация = УчетнаяЗапись.Организация;
		ОтборПоОрганизации = Новый Структура("Организация", Организация);
		НастройкиФормированияПоОрганизации = НастройкиФормирования.НайтиСтроки(ОтборПоОрганизации);
		РеквизитыАктуальныхДокументовПоОрганизации = РеквизитыАктуальныхДокументов.НайтиСтроки(ОтборПоОрганизации);
		ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(РеквизитыАктуальныхДокументовПоОрганизации,
			"ИдентификаторДокумента");
		
		Если Не ЗначениеЗаполнено(НастройкиФормированияПоОрганизации)
			И Не ЗначениеЗаполнено(ИдентификаторыДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(УчетнаяЗапись.Идентификатор);
		
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСостоянияДокументовЭДО(ИдентификаторыДокументов);
		
		РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
		
		Если РезультатВыполнения.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		СостоянияДокументовПоУчетнойЗаписи = РезультатВыполнения.РезультатМетода;
		
		Если ЗначениеЗаполнено(СостоянияДокументовПоУчетнойЗаписи) Тогда
			ЗаполнитьСостоянияАктуальныхДокументов(РеквизитыАктуальныхДокументов, СостоянияДокументовПоУчетнойЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтерфейсДокументовЭДО.ЗаполнитьСтатусыПоАктуальнымДокументам(НаборСтатусов, РеквизитыАктуальныхДокументов);
	
	РезультатыПоискаНастроек = РезультатыПоискаНастроекПоОбъектамУчета(ОписанияЭлектронныхДокументовПоОбъектуУчета,
		НастройкиФормирования);
	
	ИнтерфейсДокументовЭДО.ЗаполнитьСтатусыПоНастройкам(НаборСтатусов, РезультатыПоискаНастроек);
	
	Возврат НаборСтатусов;
	
КонецФункции

// Параметры:
//  ОписанияДокументовОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  ПараметрыВизуализации - См. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента
// 
// Возвращаемое значение:
//  См. НовыеДанныеПредварительногоПросмотра
Функция ДанныеДляПредварительногоПросмотра(ОписанияДокументовОбъектаУчета, ПараметрыВизуализации) Экспорт
	
	ДанныеПросмотра = НовыеДанныеПредварительногоПросмотра();
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		ОписанияДокументовОбъектаУчета[0].Организация);
	Если Не ЗначениеЗаполнено(ИдентификаторУчетнойЗаписи) Тогда
		ДанныеПросмотра.Ошибка = Истина;
		Возврат ДанныеПросмотра;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	НастройкиФормирования = НастройкиФормированияДокументовЭДО(	ОписанияДокументовОбъектаУчета, КонтекстДиагностики);
	
	ДанныеДляСозданияДокументовЭДО = ДанныеДляФормированияДокументовЭДО(ОписанияДокументовОбъектаУчета, НастройкиФормирования,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ДанныеДляСозданияДокументовЭДО.ДанныеДокументовОблачногоЭДО) Тогда
		ДанныеПросмотра.Ошибка = Истина;
		Возврат ДанныеПросмотра;
	КонецЕсли;
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСформироватьФайлыИВизуализациюДокументаЭДО(
		ДанныеДляСозданияДокументовЭДО.ДанныеДокументовОблачногоЭДО[0], ПараметрыВизуализации);
	
	РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения.РезультатМетода) Тогда
		ДанныеПросмотра.Ошибка = Истина;
		Возврат ДанныеПросмотра;
	КонецЕсли;
	
	РезультатФормирования = СервисОблачногоЭДО.НовыйРезультатМетодаСформироватьФайлыИВизуализациюДокументаЭДО();
	ЗаполнитьЗначенияСвойств(РезультатФормирования, РезультатВыполнения.РезультатМетода);
	
	Если ЗначениеЗаполнено(РезультатФормирования.ФайлыДокумента.Ошибки) Тогда
		ДанныеПросмотра.Ошибка = Истина;
		Возврат ДанныеПросмотра;
	КонецЕсли;
	
	ВизуализацияВФорматеСервиса = РезультатФормирования.Визуализация;
	Визуализация = ВизуализацияДокументаИзФорматаСервиса(ВизуализацияВФорматеСервиса);
	
	ДанныеПросмотра.КонтекстДиагностики = КонтекстДиагностики;
	ДанныеПросмотра.ОписаниеДокументаЭДО = ДанныеДляСозданияДокументовЭДО.ОписанияДокументовЭДО[0];
	ДанныеПросмотра.ОсновнойФайл = РезультатФормирования.ФайлыДокумента.ОсновнойФайл;
	ДанныеПросмотра.ДополнительныйФайл = РезультатФормирования.ФайлыДокумента.ДополнительныйФайл;
	ДанныеПросмотра.Визуализация = Визуализация;
	
	Возврат ДанныеПросмотра;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыВизуализации - См. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента
//
// Возвращаемое значение:
//  - Неопределено
//  - ТабличныйДокумент
//  
Функция ВизуализацияДокумента(ЭлектронныйДокумент, ПараметрыВизуализации) Экспорт
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"Организация, ИдентификаторДокумента");
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		СвойстваДокумента.Организация);
	Если Не ЗначениеЗаполнено(ИдентификаторУчетнойЗаписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи);
	ПараметрыВыполнения.ИспользоватьМетодGET = Истина;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаВизуализацияДокумента(
		СвойстваДокумента.ИдентификаторДокумента, ПараметрыВизуализации);
	
	РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатСервиса.ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВизуализацияВФорматеСервиса = РезультатСервиса.РезультатМетода; // см. СервисОблачногоЭДО.НовыеСвойстваВизуализацииДокумента
	Визуализация = ВизуализацияДокументаИзФорматаСервиса(ВизуализацияВФорматеСервиса);
	
	Возврат Визуализация;
	
КонецФункции

#КонецОбласти

#Область ПросмотрДокументаИзКэша

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  
// Возвращаемое значение:
//  - Неопределено - если кэш отсутствует.
//  - Структура:
//    * Данные - Строка
//             - ТабличныйДокумент
//    * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
Функция ДанныеВизуализацииДокументаИзКэша(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВизуализацииДокументовОблачногоЭДО.Данные КАК Данные,
		|	ВизуализацииДокументовОблачногоЭДО.ТипДанных КАК ТипДанных
		|ИЗ
		|	РегистрСведений.ВизуализацииДокументовОблачногоЭДО КАК ВизуализацииДокументовОблачногоЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПравилВизуализацииОблачногоЭДО КАК СостоянияПравилВизуализацииОблачногоЭДО
		|		ПО ВизуализацииДокументовОблачногоЭДО.ИдентификаторПравила = СостоянияПравилВизуализацииОблачногоЭДО.ИдентификаторПравила
		|ГДЕ
		|	ВизуализацииДокументовОблачногоЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|	И НЕ ВизуализацииДокументовОблачногоЭДО.ТребуетсяОбновление
		|	И ВизуализацииДокументовОблачногоЭДО.ДатаОбновленияПравила >= ЕСТЬNULL(СостоянияПравилВизуализацииОблачногоЭДО.ДатаОбновления, ДАТАВРЕМЯ(1, 1, 1))";
		
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеВизуализации = Новый Структура;
	ДанныеВизуализации.Вставить("Данные", "");
	ДанныеВизуализации.Вставить("ТипДанных", Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ПустаяСсылка());
	
	ХранилищеЗначенияДанных = Выборка.Данные; // ХранилищеЗначения
	Данные = ХранилищеЗначенияДанных.Получить(); // Строка,ТабличныйДокумент
	ТипДанных = Выборка.ТипДанных; // ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
	
	ДанныеВизуализации.Данные = Данные;
	ДанныеВизуализации.ТипДанных = ТипДанных;
	
	Возврат ДанныеВизуализации;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СвойстваВизуализации - см. РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
Процедура СохранитьКэшВизуализацииДокумента(ЭлектронныйДокумент, СвойстваВизуализации) Экспорт
	
	ЗарегистрироватьПравило = Ложь;
	
	ИдентификаторПравила = СвойстваВизуализации.ИдентификаторПравила;
	
	Если ЗначениеЗаполнено(СвойстваВизуализации.ИдентификаторПравила) Тогда
		ЗарегистрироватьПравило = Не РегистрыСведений.СостоянияПравилВизуализацииОблачногоЭДО.ЕстьПравило(
			ИдентификаторПравила);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.Записать(ЭлектронныйДокумент, СвойстваВизуализации);
		
		Если ЗарегистрироватьПравило Тогда
			РегистрыСведений.СостоянияПравилВизуализацииОблачногоЭДО.Записать(ИдентификаторПравила,
				СвойстваВизуализации.ДатаОбновленияПравила);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Подписи

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  См. ОписанияУстановленныхПодписейИзФорматаСервиса
Функция ОписанияУстановленныхПодписейДокументаЭДО(ЭлектронныйДокумент) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"Организация, ИдентификаторДокумента");
	
	Организация = РеквизитыДокумента.Организация;
	ИдентификаторДокумента = РеквизитыДокумента.ИдентификаторДокумента;
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(Организация);
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУстановленныеПодписи(ИдентификаторДокумента);
	
	РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатВыполнения.ЕстьОшибка Тогда
		Возврат НовыйНаборОписанийУстановленныхПодписей();
	КонецЕсли;
	
	УстановленныеПодписиВФорматеСервиса = РезультатВыполнения.РезультатМетода; // см. ОписанияУстановленныхПодписейИзФорматаСервиса.УстановленныеПодписиВФорматаСервиса
	Если ЗначениеЗаполнено(УстановленныеПодписиВФорматеСервиса) Тогда
		ОписанияУстановленныхПодписей = ОписанияУстановленныхПодписейИзФорматаСервиса(УстановленныеПодписиВФорматеСервиса);
	Иначе
		ОписанияУстановленныхПодписей = НовыйНаборОписанийУстановленныхПодписей();
	КонецЕсли;
	
	Возврат ОписанияУстановленныхПодписей;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  См. НовыйНаборОписанийУстановленныхПодписей
Функция ПроверитьИПолучитьПодписиДокумента(ЭлектронныйДокумент) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"Организация, ИдентификаторДокумента");
	
	Организация = РеквизитыДокумента.Организация;
	ИдентификаторДокумента = РеквизитыДокумента.ИдентификаторДокумента;
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(Организация);
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПроверитьПодписиДокументовЭДО(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента));
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУстановленныеПодписи(ИдентификаторДокумента);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОписаниеМетода);
	
	Если РезультатВыполнения.ЕстьОшибка Тогда
		Возврат НовыйНаборОписанийУстановленныхПодписей();
	КонецЕсли;
	
	УстановленныеПодписиВФорматеСервиса = РезультатВыполнения.РезультатыМетодов[1]; // см. ОписанияУстановленныхПодписейИзФорматаСервиса.УстановленныеПодписиВФорматаСервиса
	Если ЗначениеЗаполнено(УстановленныеПодписиВФорматеСервиса) Тогда
		ОписанияУстановленныхПодписей = ОписанияУстановленныхПодписейИзФорматаСервиса(УстановленныеПодписиВФорматеСервиса);
	Иначе
		ОписанияУстановленныхПодписей = НовыйНаборОписанийУстановленныхПодписей();
	КонецЕсли;
	
	Возврат ОписанияУстановленныхПодписей;
	
КонецФункции

#КонецОбласти

#Область РаботаСПакетамиДокументовЭДО

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  Структура:
//  * Отказ - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция УдалитьДокументИзПакета(ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"Организация, ИдентификаторДокумента");
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		РеквизитыДокумента.Организация);
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи);
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУдалитьИзПакетаДокументовЭДО(
		РеквизитыДокумента.ИдентификаторДокумента);
	РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатВыполнения.ЕстьОшибка Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

// Создать объекты учета по документам ЭДО.
// 
// Параметры:
//  СпособыОбработкиДокументов - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Значение - Строка - способ обработки.
// 
// Возвращаемое значение:
//  Структура - Создать объекты учета по документам ЭДО:
//  * ОбъектыУчетаДокументов - ТаблицаЗначений:
//  ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция СоздатьОбъектыУчетаПоДокументамЭДО(СпособыОбработкиДокументов) Экспорт
	
	ОбъектыУчетаДокументов = НовыеОбъектыУчетаДокументов();
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("ОбъектыУчетаДокументов", ОбъектыУчетаДокументов);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	ЭлектронныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(СпособыОбработкиДокументов, "Ключ");
	Если Не ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОтборПоДокументу = Новый Структура("ЭлектронныйДокумент", ЭлектронныеДокументы);
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	Если ЗначениеЗаполнено(НаКонтроле) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторыДокументовПоОрганизациям = ИдентификаторыДокументовПоОрганизациям(ЭлектронныеДокументы);
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыДокументовПоОрганизациям, "Ключ");
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	
	Для Каждого ИдентификаторыДокументовПоОрганизации Из ИдентификаторыДокументовПоОрганизациям Цикл
		
		Организация = ИдентификаторыДокументовПоОрганизации.Ключ;
		ИдентификаторыДокументовЭДО = ИдентификаторыДокументовПоОрганизации.Значение;
		
		УчетнаяЗаписьСервиса = УчетныеЗаписиСервиса.Найти(Организация, "Организация");
		Если УчетнаяЗаписьСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыВыполненияМетода = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьСервиса.Идентификатор);
		
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСведенияНоменклатурыДокументовЭДО(ИдентификаторыДокументовЭДО);
		
		РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполненияМетода, ОписаниеМетода);
		
		Если РезультатСервиса.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияНоменклатурыДокументовВФорматеСервиса = РезультатСервиса.РезультатМетода; // См. СервисОблачногоЭДО.НовыеСведенияНоменклатурыДокументовЭДО
		
		//@skip-check query-in-loop - обработка порции по организации.
		ИдентификаторыДокументовНаКонтроле = ВыполнитьКонтрольСопоставленияНоменклатуры(
			СведенияНоменклатурыДокументовВФорматеСервиса);
		
		ИдентификаторыДокументовЭДО = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИдентификаторыДокументовЭДО,
			ИдентификаторыДокументовНаКонтроле);
		
		Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУчетныеДанныеДокументовЭДО(ИдентификаторыДокументовЭДО);
		
		РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполненияМетода, ОписаниеМетода);
		
		Если РезультатСервиса.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		УчетныеДанныеДокументовВФорматеСервиса = РезультатСервиса.РезультатМетода; // См. ОтразитьЭлектронныеДокументы.УчетныеДанныеДокументовВФорматеСервиса
		
		//@skip-check query-in-loop - обработка порции по организации.
		ОбъектыУчетаДокументовПоОрганизации = ОтразитьЭлектронныеДокументыВУчете(УчетныеДанныеДокументовВФорматеСервиса,
			СпособыОбработкиДокументов);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОбъектыУчетаДокументовПоОрганизации ,ОбъектыУчетаДокументов);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Приглашения

// Параметры:
//  ПараметрыЗаполнения - см. ИнтерфейсДокументовЭДО.НовыеПараметрыДанныхЗаполненияНастройкиОтправкиПриглашений
//  
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыеДанныеЗаполненияНастройкиОтправкиПриглашений
Функция ДанныеЗаполненияНастройкиОтправкиПриглашений(ПараметрыЗаполнения) Экспорт
	
	Результат = ИнтерфейсДокументовЭДО.НовыеДанныеЗаполненияНастройкиОтправкиПриглашений();
	
	Организация = ПараметрыЗаполнения.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьПараметрыСвязей = ЗначениеЗаполнено(ПараметрыЗаполнения.ПараметрыПолученияСвязиИдентификаторов);
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		Организация);
	
	ИдентификаторМетодаПолученияСпискаОператоровЭДО = "Операторы";
	ИдентификаторМетодаПолученияСвязиИдентификаторовЭДО = "СвязиИдентификаторов";
	
	Если ПараметрыЗаполнения.ЗаполнитьОператоровЭДО Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПолученияСпискаОператоровЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаПолученияСпискаОператоровЭДО);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ЗаполнитьПараметрыСвязей Тогда
		КлючевыеРеквизитыКонтрагентов = Неопределено;
		ПараметрыПолученияВФорматСервиса = ПараметрыПолученияСвязиИдентификаторовВФорматСервиса(
			ПараметрыЗаполнения.ПараметрыПолученияСвязиИдентификаторов, КлючевыеРеквизитыКонтрагентов);
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаНаборПараметровСвязиИдентификаторовАбонентовЭДО(
			ПараметрыПолученияВФорматСервиса);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(
			ОписаниеМетода, ИдентификаторМетодаПолученияСвязиИдентификаторовЭДО);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	Если ПараметрыЗаполнения.ЗаполнитьОператоровЭДО Тогда
		СписокОператоровЭДОВФорматеСервиса = РезультатыМетодов[ИдентификаторМетодаПолученияСпискаОператоровЭДО]; // см. СписокОператоровЭДОИзФорматаСервиса.СписокОператоровЭДОВФорматеСервиса
		Результат.ОператорыЭДО = СписокОператоровЭДОИзФорматаСервиса(СписокОператоровЭДОВФорматеСервиса);
	КонецЕсли;
	
	Если ЗаполнитьПараметрыСвязей Тогда
		ПараметрыСвязиВФорматеСервиса = РезультатыМетодов[ИдентификаторМетодаПолученияСвязиИдентификаторовЭДО]; // см. ПараметрыСвязиИзФорматаСервиса.ПараметрыСвязиВФорматеСервиса
		Результат.ПараметрыСвязиИдентификаторовЭДО = ПараметрыСвязиИзФорматаСервиса(ПараметрыСвязиВФорматеСервиса,
			КлючевыеРеквизитыКонтрагентов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ПараметрыПолучения - см. ИнтерфейсДокументовЭДО.НовыеПараметрыПолученияСвязиИдентификаторов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ИнтерфейсДокументовЭДО.НовыеПараметрыСвязиИдентификаторов
Функция ПараметрыСвязиИдентификаторов(ПараметрыПолучения, КонтекстДиагностики = Неопределено) Экспорт
	
	ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		ПараметрыПолучения.Организация);
	
	Если Не ЗначениеЗаполнено(ИдентификаторУчетнойЗаписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент = ПараметрыПолучения.Контрагент;
	
	Если Контрагент = Неопределено
		И ТипЗнч(ПараметрыПолучения.ИдентификаторыКонтрагента) = Тип("ТаблицаЗначений") Тогда
		НаборКонтрагентов = ПараметрыПолучения.ИдентификаторыКонтрагента.ВыгрузитьКолонку("Контрагент");
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Массив") Тогда
		НаборКонтрагентов = Контрагент;
	Иначе
		НаборКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	КонецЕсли;
	
	КлючевыеРеквизитыКонтрагентов = КлючевыеРеквизитыКонтрагентов(НаборКонтрагентов);
	
	ПараметрыПолученияВФорматСервиса = ПараметрыПолученияСвязиИдентификаторовВФорматСервиса(
		ПараметрыПолучения, КлючевыеРеквизитыКонтрагентов);
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаНаборПараметровСвязиИдентификаторовАбонентовЭДО(
		ПараметрыПолученияВФорматСервиса);
	
	РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатВыполнения.ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСвязиВФорматеСервиса = РезультатВыполнения.РезультатМетода;
	
	ПараметрыСвязи = ПараметрыСвязиИзФорматаСервиса(ПараметрыСвязиВФорматеСервиса, КлючевыеРеквизитыКонтрагентов);
	
	Если ПараметрыПолучения.ПолучатьПочтовыеАдреса Тогда
		ЗаполнитьПочтовыеАдресаКонтрагентовВПараметрахСвязиИдентификаторов(ПараметрыСвязи);
	КонецЕсли;
	
	Возврат ПараметрыСвязи;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Обработано - Число
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатДействияСПриглашениями() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Обработано", 0);
	Результат.Вставить("КонтекстДиагностики", Новый Структура);
	Возврат Результат;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ОтправитьПриглашения(Приглашения, РасшифрованныеМаркеры) Экспорт
	
	Результат = Новый Структура;
	
	ДанныеПриглашенийПоОрганизациям = ДанныеПриглашенийДляОтправкиПоОрганизациям(Приглашения);
	
	МаркерыАвторизации = МаркерыАвторизацииПоОрганизациямПриглашений(Приглашения, РасшифрованныеМаркеры);
	
	РезультатыСервисаПоОрганизациям = ВыполнитьДействиеСПриглашениямиВСервисе(
		"ОбменСКонтрагентамиВОблаке.ОтправитьПриглашенияЭДО",
		ДанныеПриглашенийПоОрганизациям, МаркерыАвторизации);
	
	Результат = ОбновитьСтатусыПриглашенийПоРезультатамСервиса(РезультатыСервисаПоОрганизациям);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ПринятьПриглашения(Приглашения, РасшифрованныеМаркеры) Экспорт
	
	ДанныеПриглашенийПоОрганизациям = ДанныеПриглашенийДляПринятияПоОрганизациям(Приглашения);
	
	МаркерыАвторизации = МаркерыАвторизацииПоОрганизациямПриглашений(Приглашения, РасшифрованныеМаркеры);
	
	РезультатыСервисаПоОрганизациям = ВыполнитьДействиеСПриглашениямиВСервисе(
		"ОбменСКонтрагентамиВОблаке.ПринятьПриглашенияЭДО",
		ДанныеПриглашенийПоОрганизациям, МаркерыАвторизации);
	
	Результат = ОбновитьСтатусыПриглашенийПоРезультатамСервиса(РезультатыСервисаПоОрганизациям);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ОтклонитьПриглашения(Приглашения, РасшифрованныеМаркеры) Экспорт
	
	Результат = Новый Структура;
	
	ДанныеПриглашенийПоОрганизациям = ДанныеПриглашенийДляОтклоненияПоОрганизациям(Приглашения);
	
	МаркерыАвторизации = МаркерыАвторизацииПоОрганизациямПриглашений(Приглашения, РасшифрованныеМаркеры);
	
	РезультатыСервисаПоОрганизациям = ВыполнитьДействиеСПриглашениямиВСервисе(
		"ОбменСКонтрагентамиВОблаке.ОтклонитьПриглашенияЭДО",
		ДанныеПриглашенийПоОрганизациям, МаркерыАвторизации);
	
	Результат = ОбновитьСтатусыПриглашенийПоРезультатамСервиса(РезультатыСервисаПоОрганизациям);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УчетныеЗаписиЭДО

// Параметры:
//  Организации - Неопределено,Массив из ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьУчетныеЗаписиЭДО(Организации = Неопределено) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСписокУчетныхЗаписейЭДО();
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиСервиса Цикл
		
		ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(УчетнаяЗапись.Идентификатор);
		
		РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(
			ПараметрыВыполнения, ОписаниеМетода);
		
		Если РезультатСервиса.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат КонтекстДиагностики;
	
КонецФункции

// Параметры:
//  ПараметрыДанных - см. УчетныеЗаписиЭДО.НовыеПараметрыДанныхПоИдентификаторамДляРегистрацииВЭДО
// 
// Возвращаемое значение:
//  См. УчетныеЗаписиЭДО.НовыеДанныеПоИдентификаторамДляРегистрацииВЭДО
Функция ДанныеПоИдентификаторамДляРегистрацииВЭДО(ПараметрыДанных) Экспорт
	
	Результат = УчетныеЗаписиЭДО.НовыеДанныеПоИдентификаторамДляРегистрацииВЭДО();
	
	Организация = ПараметрыДанных.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		Организация);
	
	Если ПараметрыДанных.ЗаполнятьИдентификаторыОрганизации Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИдентификаторыОрганизацииВСервисе1СЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 0);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	Если ПараметрыДанных.ЗаполнятьОператоровЭДО Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОператорыДляРегистрацииВЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, 1);
		СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	КонецЕсли;
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	Если ПараметрыДанных.ЗаполнятьИдентификаторыОрганизации Тогда
		РезультатМетода = РезультатыМетодов[0]; // см. ИдентификаторыОрганизацииПоРезультатуСервиса.РезультатСервиса
		Результат.ИдентификаторыОрганизации = ИдентификаторыОрганизацииПоРезультатуСервиса(РезультатМетода,
			Результат.КонтекстДиагностики);
	КонецЕсли;
	
	Если ПараметрыДанных.ЗаполнятьОператоровЭДО Тогда
		ОператорыДляРегистрацииВЭДОВФорматаСервиса = РезультатыМетодов[1]; // см. ОператорыДляРегистрацииВЭДОИзФорматаСервиса.ОператорыДляРегистрацииВЭДОВФорматаСервиса
		Результат.ОператорыЭДО = ОператорыДляРегистрацииВЭДОИзФорматаСервиса(ОператорыДляРегистрацииВЭДОВФорматаСервиса);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СертификатДляПодписания - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * СертификатыДляВыбора - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ДанныеСоглашения - Неопределено,ДвоичныеДанные
//  * ДанныеДляРегистрации - Неопределено,ДвоичныеДанные
Функция НовыеДанныеДляПодписанияНаРегистрациюВЭДО() Экспорт
	ДанныеДляПодписания = Новый Структура;
	ДанныеДляПодписания.Вставить("СертификатДляПодписания", Неопределено);
	ДанныеДляПодписания.Вставить("СертификатыДляВыбора", Новый Массив);
	ДанныеДляПодписания.Вставить("ДанныеСоглашения", Неопределено);
	ДанныеДляПодписания.Вставить("ДанныеДляРегистрации", Неопределено);
	Возврат ДанныеДляПодписания;
КонецФункции

// Параметры:
//  ПараметрыРегистрации - см. ИнтеграцияОблачногоЭДОКлиент.НовыеПараметрыРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * ИдентификаторЗаявки - Строка
//  * СертификатыУжеЗарегистрированы - Булево
//  * ДанныеДляПодписания - Неопределено - заявка на регистрацию не сформирована.
//                        - см. НовыеДанныеДляПодписанияНаРегистрациюВЭДО
//  * ТекстОшибки - Строка
Функция ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО(ПараметрыРегистрации) Экспорт
	
	РезультатПодготовкиДанных = Новый Структура;
	РезультатПодготовкиДанных.Вставить("ИдентификаторЗаявки", "");
	РезультатПодготовкиДанных.Вставить("СертификатыУжеЗарегистрированы", Ложь);
	РезультатПодготовкиДанных.Вставить("ДанныеДляПодписания", Неопределено);
	РезультатПодготовкиДанных.Вставить("ТекстОшибки", "");
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		ПараметрыРегистрации.Организация);
	
	ДанныеЗаявки = ДанныеЗаявкиНаРегистрациюВЭДО(ПараметрыРегистрации);
	РезультатПодготовкиДанных.ИдентификаторЗаявки = ДанныеЗаявки.Идентификатор;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУстановитьДанныеАутентификацииПользователяИнтернетПоддежки(
		ДанныеАутентификации);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСформироватьЗаявкуНаРегистрациюВЭДО(ДанныеЗаявки);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		РезультатПодготовкиДанных.ТекстОшибки = СтрСоединить(РезультатОперации.Ошибки, Символы.ПС);
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	Если Не ДанныеАутентификацииПользователяИнтернетПоддержкиУстановлены(РезультатыМетодов[0],
		РезультатПодготовкиДанных.ТекстОшибки) Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатФормированияЗаявки = РезультатыМетодов[1]; // См. ЗаявкаНаРегистрациюВЭДОСформирована.РезультатФормирования
	
	СертификатыБезДоверенностей = СертификатыДляРегистрацииБезДоверенностей(РезультатФормированияЗаявки);
	
	Если ЗначениеЗаполнено(СертификатыБезДоверенностей) Тогда
		
		ОперацияСервиса.ОписанияМетодов.Очистить();
		
		РезультатОперации = СформироватьЗаявкуНаРегистрациюВЭДОПослеВыгрузкиДоверенностейПоСертификатам(
			ОперацияСервиса, ПараметрыРегистрации.Организация, ДанныеЗаявки, СертификатыБезДоверенностей);
		
		Если РезультатОперации = Неопределено Тогда
		ИначеЕсли ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
			РезультатПодготовкиДанных.ТекстОшибки = СтрСоединить(РезультатОперации.Ошибки, Символы.ПС);
			Возврат РезультатПодготовкиДанных;
		Иначе
			РезультатыМетодов = РезультатОперации.РезультатыМетодов;
			РезультатФормированияЗаявки = РезультатыМетодов[ОперацияСервиса.ОписанияМетодов.ВГраница()];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаявкаНаРегистрациюВЭДОСформирована(РезультатФормированияЗаявки, РезультатПодготовкиДанных) Тогда
		
		Если РезультатФормированияЗаявки.Ошибка.СертификатыУжеЗарегистрированы Тогда
			УчетныеЗаписиЭДО.ЗаписатьСертификатыУчетнойЗаписи(ПараметрыРегистрации.ИдентификаторОрганизации,
				ПараметрыРегистрации.СертификатыДляРегистрации);
		КонецЕсли;
		
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	ОперацияСервиса.ОписанияМетодов.Очистить();
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО(
		ДанныеЗаявки.Идентификатор);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		РезультатПодготовкиДанных.ТекстОшибки = СтрСоединить(РезультатОперации.Ошибки, Символы.ПС);
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	РезультатПодготовкиДанных.ДанныеДляПодписания = ДанныеДляПодписанияНаРегистрациюВЭДО(РезультатыМетодов[0],
		РезультатПодготовкиДанных.ТекстОшибки);
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ИдентификаторЗаявки - Строка
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * ДанныеДляПодписания - Неопределено
//                        - см. НовыеДанныеДляПодписанияНаРегистрациюВЭДО
Функция ЗаполнитьДанныеДляПодписанияНаРегистрациюВЭДОПоСертификату(Организация, ИдентификаторЗаявки, Сертификат) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ТекстОшибки", "");
	РезультатЗаполнения.Вставить("ДанныеДляПодписания", Неопределено);
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		Организация);
	
	ОтпечатокСертификата = КриптографияБЭД.ОтпечатокСертификата(Сертификат);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаЗаполнитьПодписантаДанныхНаРегистрациюВЭДО(
		ИдентификаторЗаявки, ОтпечатокСертификата);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО(ИдентификаторЗаявки);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		РезультатЗаполнения.ТекстОшибки = СтрСоединить(РезультатОперации.Ошибки, Символы.ПС);
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	Если Не ПодписантДанныхНаРегистрациюВЭДОЗаполнен(РезультатыМетодов[0], РезультатЗаполнения.ТекстОшибки) Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	РезультатЗаполнения.ДанныеДляПодписания = ДанныеДляПодписанияНаРегистрациюВЭДО(РезультатыМетодов[1],
		РезультатЗаполнения.ТекстОшибки);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ИдентификаторЗаявки - Строка
//  Подписи - Структура:
//  * ПодписьСоглашения - ДвоичныеДанные
//  * ПодписьДанныхДляРегистрации - ДвоичныеДанные
//  * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Строка
Функция ОтправитьРегистрационныйПакетЭДО(Организация, ИдентификаторЗаявки, Подписи) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибка", "");
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(
		Организация);
	
	ПодписиЗаявки = НовыеПодписиЗаявкиНаРегистрациюВЭДО();
	ПодписиЗаявки.Идентификатор = ИдентификаторЗаявки;
	ПодписиЗаявки.ПодписьСоглашения = Base64Строка(Подписи.ПодписьСоглашения);
	ПодписиЗаявки.ПодписьДанныхДляРегистрации = Base64Строка(Подписи.ПодписьДанныхДляРегистрации);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаДобавитьПодписиЗаявкиНаРегистрациюВЭДО(ПодписиЗаявки);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтправитьЗаявкуНаРегистрациюВЭДО(ИдентификаторЗаявки);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		Результат.Ошибка = СтрСоединить(РезультатОперации.Ошибки, Символы.ПС);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	
	РезультатыМетодов = РезультатОперации.РезультатыМетодов;
	
	РезультатДобавленияПодписей = РезультатыМетодов[0]; // См. СервисОблачногоЭДО.НовыйРезультатМетодаДобавитьПодписиЗаявкиНаРегистрациюВЭДО
	
	Если Не РезультатДобавленияПодписей.Успех Тогда
		Результат.Успех = Ложь;
		Результат.Ошибка = РезультатДобавленияПодписей.Ошибка;
	КонецЕсли;
	
	РезультатОтправки = РезультатыМетодов[1]; // См. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьЗаявкуНаРегистрациюВЭДО
	
	Если Не РезультатОтправки.Успех Тогда
		Результат.Успех = Ложь;
		Результат.Ошибка = РезультатОтправки.Ошибка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторыЗаявокПоОрганизациям - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из Строка
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиРегистрационныхПакетовЭДО
Функция ПроверитьОбработкуРегистрационныхПакетовЭДО(ИдентификаторыЗаявокПоОрганизациям) Экспорт
	
	Результат = НовыйРезультатОбработкиРегистрационныхПакетовЭДО(); // см. ПроверитьОбработкуРегистрационныхПакетовЭДО
	
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыЗаявокПоОрганизациям, "Ключ"); // Массив из ОпределяемыйТип.Организация
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиСервиса Цикл
		
		Организация = УчетнаяЗапись.Организация;
		
		ИдентификаторыЗаявок = ИдентификаторыЗаявокПоОрганизациям[Организация];
		
		ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(УчетнаяЗапись.Идентификатор);
		
		СостоянияРегистрации = СостоянияРегистрацииЗаявокВЭДО(ПараметрыВыполнения, ИдентификаторыЗаявок,
			КонтекстДиагностики);
		
		ЗаполнитьРезультатОбработкиПоСостояниямРегистрацииВЭДО(Результат, СостоянияРегистрации, Организация);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьИнформациюОбУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	ИнформацияОбУчетнойЗаписиЭДО = УчетныеЗаписиЭДО.ИнформацияОбУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО);
	
	Если Не ЗначениеЗаполнено(ИнформацияОбУчетнойЗаписиЭДО) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена учетная запись ЭДО с идентификатором %1'"),
			ИдентификаторУчетнойЗаписиЭДО);
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Организация = УчетныеЗаписиЭДО.ОрганизацияУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО);
	
	ИдентификаторОблачногоЭДО = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(Организация);
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторОблачногоЭДО);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОбновитьИнформациюОбУчетнойЗаписиЭДО(ИнформацияОбУчетнойЗаписиЭДО);
	
	РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатСервиса.ЕстьОшибка Тогда
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, РезультатСервиса.ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РезультатОбновления = РезультатСервиса.РезультатМетода; // См. СервисОблачногоЭДО.НовыйРезультатОбновленияИнформацииОбУчетнойЗаписиЭДО
	
	ИнформацияОбновлена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОбновления, "Успех", Ложь); // Булево
	
	Если ИнформацияОбновлена Тогда
		Результат.Успех = Истина;
	Иначе
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОбновления, "Ошибка", ""); // Строка
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  ПараметрыУведомлений - см. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  РасшифрованныеМаркеры - см. МаркерыАвторизацииИзРасшифрованныхМаркеров.РасшифрованныеМаркеры
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, ПараметрыУведомлений, РасшифрованныеМаркеры) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	МаркерыАвторизации = МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры);
	Если Не ЗначениеЗаполнено(МаркерыАвторизации) Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики,
			НСтр("ru = 'Не указан маркер для авторизации в сервисе ЭДО'"));
		Возврат Результат;
	КонецЕсли;
	
	Организация = УчетныеЗаписиЭДО.ОрганизацияУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО);
	
	ИдентификаторОблачногоЭДО = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(Организация);
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторОблачногоЭДО);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОбновитьНастройкиУведомленийУчетнойЗаписиЭДО(
		ИдентификаторУчетнойЗаписиЭДО, ПараметрыУведомлений, МаркерыАвторизации[0]);
	
	РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатСервиса.ЕстьОшибка Тогда
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, РезультатСервиса.ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РезультатОбновления = РезультатСервиса.РезультатМетода; // См. СервисОблачногоЭДО.НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
	
	НастройкиОбновлены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОбновления, "Успех", Ложь); // Булево
	
	Если НастройкиОбновлены Тогда
		Результат.Успех = Истина;
	Иначе
		ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатОбновления, "Ошибка", ""); // Строка
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  РасшифрованныеМаркеры - см. МаркерыАвторизацииИзРасшифрованныхМаркеров.РасшифрованныеМаркеры
//  Организация - Неопределено,ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Структура:
//  * ПараметрыУведомлений - Неопределено
//                         - см. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НастройкиУведомленийУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, РасшифрованныеМаркеры, Организация = Неопределено) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыУведомлений", Неопределено);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	МаркерыАвторизации = МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры);
	Если Не ЗначениеЗаполнено(МаркерыАвторизации) Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики,
			НСтр("ru = 'Не указан маркер для авторизации в сервисе ЭДО'"));
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = УчетныеЗаписиЭДО.ОрганизацияУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО);
	КонецЕсли;
	
	ИдентификаторОблачногоЭДО = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.ИдентификаторУчетнойЗаписи(Организация);
	
	ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторОблачногоЭДО);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаНастройкиУведомленийУчетнойЗаписиЭДО(
		ИдентификаторУчетнойЗаписиЭДО, МаркерыАвторизации[0]);
	
	РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатСервиса.ЕстьОшибка Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, РезультатСервиса.ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	РезультатПолучения = РезультатСервиса.РезультатМетода;
	
	Результат.ПараметрыУведомлений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолучения, "Настройки"); // Структура
	
	ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолучения, "Ошибка", ""); // Строка
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Параметры:
//  Набор - Массив из Произвольный
//        - Массив из Строка
//  Значение - Произвольный,Строка
Процедура ДобавитьУникальноеЗначение(Набор, Значение)
	
	Если ЗначениеЗаполнено(Значение)
		И Набор.Найти(Значение) = Неопределено Тогда
		Набор.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Набор - Массив из Произвольный
//        - Массив из Строка
//  Значение - Произвольный,Строка
Процедура ДобавитьЗаполненноеЗначение(Набор, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		Набор.Добавить(Значение);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
// 
// Возвращаемое значение:
//  ТабличныйДокумент
Функция ТабличныйДокументИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(Поток);
	
	Поток.Закрыть();
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ТекстОшибки - Строка
Процедура ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки) Экспорт
	Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстОшибки, ТекстОшибки);
	ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДействийПоЭДО

#Область Общее

// Возвращаемое значение:
//  Структура:
//  * АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  * РезультатыДействий  - см. НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатВыполненияДействийЭДО()
	Результат = Новый Структура;
	Результат.Вставить("АсинхронныеОперации", Новый Массив);
	Результат.Вставить("РезультатыДействий", НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - см. РегистрСведений.УчетныеЗаписиОблачногоЭДО.Идентификатор
//  * Значение - см. НовыйРезультатДействийЭДО
Функция НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Итог                 - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования   - Массив из см. НовоеОписаниеОшибкиФормирования
//  * ДанныеДляПодписания  - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//
Функция НовыйРезультатДействийЭДО()
	РезультатДействий = Новый Структура;
	РезультатДействий.Вставить("Итог", ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	РезультатДействий.Вставить("ОшибкиФормирования", Новый Массив);
	РезультатДействий.Вставить("ДанныеДляПодписания", Новый Массив);
	РезультатДействий.Вставить("ЗашифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки());
	РезультатДействий.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	Возврат РезультатДействий;
КонецФункции

// Параметры:
//  ОбъектыДействий - см. ВыполнитьДействияЭДО.ПараметрыВыполнения
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - см. РегистрСведений.УчетныеЗаписиОблачногоЭДО.Идентификатор
//  * Значение - см. НовыеОбъектыОперацииПоДействиямЭДО
Функция ОбъектыОперацийПоУчетнымЗаписямСервиса(ОбъектыДействий)
	
	Результат = Новый Соответствие; // см. ОбъектыОперацийПоУчетнымЗаписямСервиса
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		АктуальныеДокументыОбъектовУчета = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ОбъектыДействий.ОбъектыУчета);
		
		ЭлектронныеДокументы = АктуальныеДокументыОбъектовУчета.ВыгрузитьКолонку("ЭлектронныйДокумент");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеДокументы, ОбъектыДействий.ЭлектронныеДокументы);
		
		ОбъектыУчета = АктуальныеДокументыОбъектовУчета.ВыгрузитьКолонку("ОбъектУчета");
		ОбъектыУчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыДействий.ОбъектыУчета, ОбъектыУчета);
		
	Иначе
		
		ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
		ОбъектыУчета = ОбъектыДействий.ОбъектыУчета;
		
	КонецЕсли;
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить();
	
	ЗаполнитьОбъектыОперацийПоОбъектамУчета(Результат, УчетныеЗаписиСервиса, ОбъектыУчета);
	
	ЗаполнитьОбъектыОперацийПоДокументамЭДО(Результат, УчетныеЗаписиСервиса, ЭлектронныеДокументы);
	
	ЗаполнитьОбъектыОперацийПоУчетнымЗаписямЭДО(Результат, ОбъектыДействий.ИдентификаторыОрганизаций);
	
	ЗаполнитьОбъектыОперацийПоОписаниямДокументов(Результат, УчетныеЗаписиСервиса,
		ОбъектыДействий.ОписанияДокументовПоФайлам);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОписанияДокументовПоФайлам - Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
//  * ИдентификаторыДокументовЭДО - Массив из Строка
//  * ОписанияОбъектовУчета - см. ИнтеграцияЭДО.ОписанияОбъектовУчета
//  * ДатыСинхронизацииПоТипам - Соответствие из КлючИЗначение:
//  ** Ключ - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ** Значение - Дата
Функция НовыеОбъектыОперацииПоДействиямЭДО()
	ОбъектыОперации = Новый Структура;
	ОбъектыОперации.Вставить("ОписанияДокументовПоФайлам", Новый Массив);
	ОбъектыОперации.Вставить("ИдентификаторыДокументовЭДО", Новый Массив);
	ОбъектыОперации.Вставить("ОписанияОбъектовУчета", Новый ТаблицаЗначений);
	ОбъектыОперации.Вставить("ДатыСинхронизацииПоТипам", Новый Соответствие);
	Возврат ОбъектыОперации;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция НовыйИдентификаторДокументаВСервисе()
	Возврат Строка(Новый УникальныйИдентификатор);
КонецФункции

// Параметры:
//  ОписаниеДокументаЭДО - См. НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьДокументЭДО(ОписаниеДокументаЭДО)
	
	НовыйДокумент = Неопределено;
	
	ЭтоВходящийЭДО = ОписаниеДокументаЭДО.ЭтоВходящийЭДО;
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокумента = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокумента);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ОписаниеДокументаЭДО.Идентификатор);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = Неопределено; // Неопределено,ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
	
		НайденныйДокумент = НайтиДокументПоИдентификаторуОблачногоЭДО(ОписаниеДокументаЭДО.Идентификатор, ЭтоВходящийЭДО);
		
		ЕстьИзмененияДокументаЭДО = Истина;
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			ДокументОбъект = НайденныйДокумент.ПолучитьОбъект();
			ЕстьИзмененияДокументаЭДО = ЕстьИзмененияДокументаЭДО(ДокументОбъект, ОписаниеДокументаЭДО);
		ИначеЕсли ЭтоВходящийЭДО Тогда
			ДокументОбъект = Документы.ЭлектронныйДокументВходящийЭДО.СоздатьДокумент(); 
		Иначе
			ДокументОбъект = Документы.ЭлектронныйДокументИсходящийЭДО.СоздатьДокумент();
		КонецЕсли;
		
		Если ЕстьИзмененияДокументаЭДО Тогда
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.ЭтоОблачныйЭДО = Истина;
			ДокументОбъект.ИдентификаторДокумента = ОписаниеДокументаЭДО.Идентификатор;
			ДокументОбъект.ФорматОсновногоТитула = ОписаниеДокументаЭДО.Формат;
			ДокументОбъект.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
			ДокументОбъект.Организация = ОписаниеДокументаЭДО.Организация;
			ДокументОбъект.Контрагент = ОписаниеДокументаЭДО.Контрагент;
			ДокументОбъект.ДоговорКонтрагента = ОписаниеДокументаЭДО.Договор;
			ДокументОбъект.НомерДокумента = ОписаниеДокументаЭДО.Номер;
			ДокументОбъект.ДатаДокумента = ОписаниеДокументаЭДО.Дата;
			ДокументОбъект.СуммаДокумента = ОписаниеДокументаЭДО.Сумма;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ДатаИзмененияСостояния = ДокументОбъект.Дата;
		Если ЗначениеЗаполнено(ОписаниеДокументаЭДО.ДатаИзмененияСостояния) Тогда
			ДатаИзмененияСостояния = ОписаниеДокументаЭДО.ДатаИзмененияСостояния;
		КонецЕсли;
		
		ОписаниеСостоянияЭДО = НовоеОписаниеСостоянияДокументаЭДО();
		ОписаниеСостоянияЭДО.ЭлектронныйДокумент = ДокументОбъект.Ссылка;
		ОписаниеСостоянияЭДО.Состояние = ОписаниеДокументаЭДО.Состояние;
		ОписаниеСостоянияЭДО.СостояниеДополнение = ОписаниеДокументаЭДО.СостояниеДополнение;
		ОписаниеСостоянияЭДО.ДатаИзменения = ДатаИзмененияСостояния;
		ОписаниеСостоянияЭДО.Комментарий = ОписаниеДокументаЭДО.КомментарийСостояния;
		
		ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияЭДО);
		
		Если ЗначениеЗаполнено(ОписаниеДокументаЭДО.ОбъектыУчета) Тогда
			Для Каждого ОбъектУчета Из ОписаниеДокументаЭДО.ОбъектыУчета Цикл
				ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ДокументОбъект.Ссылка, ОбъектУчета);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
			УстановитьКонтрольОтраженияВУчете(ДокументОбъект.Ссылка, ОписаниеДокументаЭДО);
		КонецЕсли;
		
		НовыйДокумент = ДокументОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйДокумент;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЭтоВходящийЭДО - Булево
//  * Идентификатор - Строка
//  * Формат - Строка - идентификатор формата основного титула.
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО,ОпределяемыйТип.КонтрагентБЭД
//  * Договор - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Дата - Дата
//  * Номер - Строка
//  * Сумма - Число
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостояниеДополнение - Строка
//  * ДатаИзмененияСостояния - Дата
//  * КомментарийСостояния - Строка
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
Функция НовоеОписаниеДокументаЭДО()
	Описание = Новый Структура;
	Описание.Вставить("ЭтоВходящийЭДО", Ложь);
	Описание.Вставить("Идентификатор", "");
	Описание.Вставить("Формат", "");
	Описание.Вставить("Организация", Неопределено);
	Описание.Вставить("Контрагент", Неопределено);
	Описание.Вставить("Договор", Неопределено);
	Описание.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("Дата", Дата(1, 1, 1));
	Описание.Вставить("Номер", "");
	Описание.Вставить("Сумма", 0);
	Описание.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("СостояниеДополнение", "");
	Описание.Вставить("ДатаИзмененияСостояния", '00010101');
	Описание.Вставить("КомментарийСостояния", "");
	Описание.Вставить("ОбъектыУчета", Новый Массив);
	Возврат Описание;
КонецФункции

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  УчетныеЗаписиСервиса - см. УчетныеЗаписиСервиса
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗаполнитьОбъектыОперацийПоОбъектамУчета(ОбъектыОпераций, УчетныеЗаписиСервиса, ОбъектыУчета)
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(ОбъектыУчета);
	УникальныеОрганизации = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияОбъектовУчета, "Организация", Истина);
	Для Каждого Организация Из УникальныеОрганизации Цикл
		УчетнаяЗаписьСервиса = УчетныеЗаписиСервиса.Найти(Организация, "Организация");
		Если УчетнаяЗаписьСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыОперации = ОбъектыОпераций[УчетнаяЗаписьСервиса.Идентификатор];
		Если ОбъектыОперации = Неопределено Тогда
			ОбъектыОперации = НовыеОбъектыОперацииПоДействиямЭДО();
			ОбъектыОпераций.Вставить(УчетнаяЗаписьСервиса.Идентификатор, ОбъектыОперации);
		КонецЕсли;
		
		Отбор = Новый Структура("Организация", Организация);
		ОбъектыОперации.ОписанияОбъектовУчета = ОписанияОбъектовУчета.Скопировать(Отбор);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  УчетныеЗаписиСервиса - см. УчетныеЗаписиСервиса
//  ДокументыЭДО - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЗаполнитьОбъектыОперацийПоДокументамЭДО(ОбъектыОпераций, УчетныеЗаписиСервиса, ДокументыЭДО)
		
	Если Не ЗначениеЗаполнено(ДокументыЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДокументовПоОрганизациям = ИдентификаторыДокументовПоОрганизациям(ДокументыЭДО);
	
	Для Каждого ИдентификаторыДокументовПоОрганизации Из ИдентификаторыДокументовПоОрганизациям Цикл
		Организация = ИдентификаторыДокументовПоОрганизации.Ключ;
		ИдентификаторыДокументовЭДО = ИдентификаторыДокументовПоОрганизации.Значение;
		
		УчетнаяЗаписьСервиса = УчетныеЗаписиСервиса.Найти(Организация, "Организация");
		Если УчетнаяЗаписьСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыОперации = ОбъектыОпераций[УчетнаяЗаписьСервиса.Идентификатор];
		Если ОбъектыОперации = Неопределено Тогда
			ОбъектыОперации = НовыеОбъектыОперацииПоДействиямЭДО();
			ОбъектыОпераций.Вставить(УчетнаяЗаписьСервиса.Идентификатор, ОбъектыОперации);
		КонецЕсли;
		
		ОбъектыОперации.ИдентификаторыДокументовЭДО = ИдентификаторыДокументовЭДО;
		ОбъектыОпераций.Вставить(УчетнаяЗаписьСервиса.Идентификатор, ОбъектыОперации);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  ИдентификаторыУчетныхЗаписей - Массив из Строка
Процедура ЗаполнитьОбъектыОперацийПоУчетнымЗаписямЭДО(ОбъектыОпераций, ИдентификаторыУчетныхЗаписей)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыУчетныхЗаписей) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииУчетныхЗаписей = УчетныеЗаписиЭДО.ОрганизацииУчетныхЗаписей(ИдентификаторыУчетныхЗаписей);
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ОрганизацииУчетныхЗаписей, "Значение", Истина);
	УчетныеЗаписиОблачногоЭДО = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	
	СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Выгрузить(УчетныеЗаписиОблачногоЭДО);
	
	ТипыСинхронизации = Перечисления.ТипыСинхронизацииОблачногоЭДО.Значения();
	
	ОтборСостоянийСинхронизации = Новый Структура("ИдентификаторУчетнойЗаписи", "");
	
	Для Каждого УчетнаяЗаписьОблачногоЭДО Из УчетныеЗаписиОблачногоЭДО Цикл
		
		Идентификатор = УчетнаяЗаписьОблачногоЭДО.Идентификатор;
		
		ОбъектыОперации = ОбъектыОпераций[Идентификатор];
		Если ОбъектыОперации = Неопределено Тогда
			ОбъектыОперации = НовыеОбъектыОперацииПоДействиямЭДО();
			ОбъектыОпераций.Вставить(Идентификатор, ОбъектыОперации);
		КонецЕсли;
		
		ДатыСинхронизацииПоТипам = ОбъектыОперации.ДатыСинхронизацииПоТипам;
		
		ОтборСостоянийСинхронизации.ИдентификаторУчетнойЗаписи = Идентификатор;
		СостоянияСинхронизацииУчетнойЗаписи = СостоянияСинхронизации.НайтиСтроки(ОтборСостоянийСинхронизации);
		Для Каждого СостояниеСинхронизации Из СостоянияСинхронизацииУчетнойЗаписи Цикл
			ДатыСинхронизацииПоТипам.Вставить(СостояниеСинхронизации.ТипСинхронизации,
				СостояниеСинхронизации.ДатаСинхронизации);
		КонецЦикла;
		
		Для Каждого ТипСинхронизации Из ТипыСинхронизации Цикл
			Если ДатыСинхронизацииПоТипам[ТипСинхронизации] = Неопределено Тогда
				ДатыСинхронизацииПоТипам.Вставить(ТипСинхронизации, '00010101');
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  УчетныеЗаписиСервиса - см. УчетныеЗаписиСервиса
//  ОписанияДокументовПоФайлам - Массив из см. ИнтерфейсДокументовЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
Процедура ЗаполнитьОбъектыОперацийПоОписаниямДокументов(ОбъектыОпераций, УчетныеЗаписиСервиса, ОписанияДокументовПоФайлам)
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовПоФайлам) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовПоФайлам Цикл
		
		УчетнаяЗаписьСервиса = УчетныеЗаписиСервиса.Найти(ОписаниеДокумента.Организация, "Организация");
		Если УчетнаяЗаписьСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыОперации = ОбъектыОпераций[УчетнаяЗаписьСервиса.Идентификатор];
		Если ОбъектыОперации = Неопределено Тогда
			ОбъектыОперации = НовыеОбъектыОперацииПоДействиямЭДО();
			ОбъектыОпераций.Вставить(УчетнаяЗаписьСервиса.Идентификатор, ОбъектыОперации);
		КонецЕсли;
		
		ОбъектыОперации.ОписанияДокументовПоФайлам.Добавить(ОписаниеДокумента);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПараметрыВыполнения - см. ВыполнитьДействияЭДО.ПараметрыВыполнения
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики)
	ИнтерфейсДокументовЭДО.ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики);
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ОбъектыОперации - см. НовыеОбъектыОперацииПоДействиямЭДО
//  * НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * ИдентификаторУчетнойЗаписи - Строка
//  * МаркерыАвторизации - Массив из см. НовыйМаркерАвторизацииВФорматеСервиса
//  * ОтпечаткиСертификатов - Массив из Строка
//  * ОбработатьТолькоИзвещения - Булево
Функция НовыеПараметрыВыполненияОперацииПоДействиямЭДО()
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектыОперации", Новый Структура);
	Параметры.Вставить("НаборДействий", Новый Соответствие);
	Параметры.Вставить("ИдентификаторУчетнойЗаписи", "");
	Параметры.Вставить("МаркерыАвторизации", Новый Массив);
	Параметры.Вставить("ОтпечаткиСертификатов", Новый Массив);
	Параметры.Вставить("ОбработатьТолькоИзвещения", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. СервисОблачногоЭДО.НоваяОперацияСервиса
Функция ОперацияСервисаПоДействиямЭДО(ПараметрыВыполнения, КонтекстДиагностики)
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = ПараметрыВыполнения.ИдентификаторУчетнойЗаписи;
	
	ОписанияМетодов = ОперацияСервиса.ОписанияМетодов;
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отклонить) Тогда
		
		ДобавитьОписаниеМетодаОтклоненияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Аннулировать) Тогда
		
		ДобавитьОписаниеМетодаАннулированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПринятьАннулирование) Тогда
		
		ДобавитьОписаниеМетодаПринятияАннулированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование) Тогда
		
		ДобавитьОписаниеМетодаОтклоненияАннулированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно) Тогда
		
		ДобавитьОписаниеМетодаЗакрытияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ВернутьВРаботу) Тогда
		
		ДобавитьОписаниеМетодаВозвратаВРаботуДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Утвердить) Тогда
		
		ДобавитьОписаниеМетодаУтвержденияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать) Тогда
		
		ДобавитьОписаниеМетодаФормированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики);
		
		ДобавитьОписаниеМетодаФормированияДокументовЭДОПоФайлам(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьОтвет) Тогда
		
		ДобавитьОписаниеМетодаФормированияОтветныхТитуловДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения,
			КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьПодписание) Тогда
		
		ДобавитьОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Подписать) Тогда
		
		ДобавитьОписаниеМетодаПодготовкиДанныхДляПодписания(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики);
		Возврат ОперацияСервиса; // Требуется обработка на клиенте.
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыВыполнения.МаркерыАвторизации) Тогда
			ДобавитьОписаниеМетодаПолученияМаркеровАвторизации(ОписанияМетодов, ПараметрыВыполнения);
			Возврат ОперацияСервиса; // Требуется обработка на клиенте.
		КонецЕсли;
		
		ДобавитьОписаниеМетодаОтправкиДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики);
		
		ДобавитьОписаниеМетодаОтправкиКонтейнеровЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Загрузить) Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыВыполнения.МаркерыАвторизации) Тогда
			ДобавитьОписаниеМетодаПолученияМаркеровАвторизации(ОписанияМетодов, ПараметрыВыполнения);
			Возврат ОперацияСервиса; // Требуется обработка на клиенте.
		КонецЕсли;
		
		ДобавитьОписаниеМетодаПолученияПриглашенийИзСервисаЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
		ДобавитьОписаниеМетодаПолученияИзмененныхПриглашенийЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
		ДобавитьОписаниеМетодаПолученияКонтейнеровЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
		ДобавитьОписаниеМетодаПолученияИзмененныхДокументыЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
		ДобавитьОписаниеМетодаПолученияИзмененныхПакетовДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
		ДобавитьОписаниеМетодаПолученияИзмененныхСостоянийВизуализацийДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтправитьВАрхив) Тогда
		
		ДобавитьОписаниеМетодаОтправкиВАрхивДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения);
		
	КонецЕсли;
	
	Возврат ОперацияСервиса;
	
КонецФункции

// Параметры:
//  НаборДействий - Соответствие из КлючИЗначение
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействие(НаборДействий, Действие)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействие(НаборДействий, Действие);
КонецФункции

// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО)
	Возврат ИнтерфейсДокументовЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
КонецФункции

// Параметры:
//  РезультатВыполнения - см. НовыйРезультатВыполненияДействийЭДО
//  РезультатОперации - см. СервисОблачногоЭДО.ВыполнитьОперациюСервиса
//  НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
// 
Процедура ДополнитьРезультатВыполненияДействийРезультатомОперацииСервиса(РезультатВыполнения, РезультатОперации, НаборДействий)
	
	Если ЗначениеЗаполнено(РезультатОперации.АсинхроннаяОперация) Тогда
		РезультатВыполнения.АсинхронныеОперации.Добавить(РезультатОперации.АсинхроннаяОперация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОперации.РезультатыМетодов) Тогда
		ИдентификаторУчетнойЗаписи = РезультатОперации.ИдентификаторУчетнойЗаписи;
		РезультатДействий = ОбработатьРезультатыМетодовОперацииСервисаПоДействиямЭДО(ИдентификаторУчетнойЗаписи,
			РезультатОперации.РезультатыМетодов, РезультатВыполнения.КонтекстДиагностики);
		РезультатВыполнения.РезультатыДействий.Вставить(ИдентификаторУчетнойЗаписи, РезультатДействий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОперации.Ошибки) Тогда
		ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО.'");
		ДействияЭДО = ОбщегоНазначения.ВыгрузитьКолонку(НаборДействий, "Ключ");
		ПредставлениеДействийЭДО = СтрСоединить(ДействияЭДО, ", ");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выполнить действия ЭДО: %1'"), ПредставлениеДействийЭДО)
			+ Символы.ПС + СтрСоединить(РезультатОперации.Ошибки, Символы.ПС);
		ДобавитьНеизвестнуюОшибку(РезультатВыполнения.КонтекстДиагностики, ВидОперации, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  РезультатыМетодовОперации - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор метода в операции.
//  * Значение - Структура,Массив из Структура
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействийЭДО
Функция ОбработатьРезультатыМетодовОперацииСервисаПоДействиямЭДО(ИдентификаторУчетнойЗаписи, РезультатыМетодовОперации, КонтекстДиагностики) Экспорт
	
	РезультатДействий = НовыйРезультатДействийЭДО();
	
	Для Каждого РезультатМетодаОперации Из РезультатыМетодовОперации Цикл
		
		ИдентификаторМетода = РезультатМетодаОперации.Ключ;
		РезультатМетода = РезультатМетодаОперации.Значение;
		ОбработатьРезультатМетодаОперацииСервисаПоДействиямЭДО(ИдентификаторУчетнойЗаписи,
			ИдентификаторМетода, РезультатМетода, РезультатДействий, КонтекстДиагностики);
		
	КонецЦикла;
	
	Возврат РезультатДействий;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  ИдентификаторМетода - Строка
//  РезультатМетода - Структура,Массив из Структура
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьРезультатМетодаОперацииСервисаПоДействиямЭДО(ИдентификаторУчетнойЗаписи, ИдентификаторМетода, РезультатМетода, РезультатДействий, КонтекстДиагностики)
	
	Если ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаФормированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДОПоФайлам() Тогда
		
		ОбработатьРезультатМетодаФормированияДокументовЭДОПоФайлам(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаФормированияОтветныхТитуловДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаФормированияОтветныхТитуловДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПодготовкиДанныхДляПодписания() Тогда
		
		ОбработатьРезультатМетодаПодготовкиДанныхДляПодписания(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаДобавленияПодписейФайлов() Тогда
		
		ОбработатьРезультатМетодаДобавленияПодписейФайлов(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтправкиДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтправкиДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияМаркеровАвторизации() Тогда
		
		ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтправкиКонтейнеровЭДО() Тогда
		
		ОбработатьРезультатМетодаОтправкиКонтейнеровЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияПриглашенийИзСервисаЭДО() Тогда
		
		ОбработатьРезультатМетодаПолученияПриглашенийИзСервисаЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхПриглашенийЭДО() Тогда
		
		ОбработатьРезультатМетодаПолученияИзмененныхПриглашенийЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода,
			РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияКонтейнеровЭДО() Тогда
		
		ОбработатьРезультатМетодаПолученияКонтейнеровЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхДокументыЭДО() Тогда
		
		ОбработатьРезультатМетодаПолученияИзмененныхДокументыЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода,
			РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхПакетовДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаПолученияИзмененныхПакетовДокументовЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхСостоянийВизуализацийДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаИзмененияПравилВизуализацииДокументовЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаУтвержденияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаУтвержденияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтклоненияПодписанияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтклоненияПодписанияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаАннулированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаАннулированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПринятияАннулированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаПринятияАннулированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтклоненияАннулированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтклоненияАннулированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтклоненияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтклоненияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтправкиВАрхивДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтправкиВАрхивДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаЗакрытияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаЗакрытияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаВозвратаВРаботуДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаВозвратаВРаботуДокументовЭДО(РезультатМетода, РезультатДействий);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сформировать

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаФормированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики)
	
	ОписанияОбъектовУчета = ПараметрыВыполнения.ОбъектыОперации.ОписанияОбъектовУчета;
	
	Если Не ЗначениеЗаполнено(ОписанияОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = ОписанияОбъектовУчета.ВыгрузитьКолонку("ОбъектУчета");
	
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(ОбъектыУчета);
	
	ГотовыеОбъектыУчета = РезультатПроверки.Готовые;
	
	КоличествоОписаний = ОписанияОбъектовУчета.Количество();
	Если КоличествоОписаний <> ГотовыеОбъектыУчета.Количество() Тогда
		Пока КоличествоОписаний > 0 Цикл
			КоличествоОписаний = КоличествоОписаний - 1;
			ТекущееОписание = ОписанияОбъектовУчета[КоличествоОписаний];
			Если ГотовыеОбъектыУчета.Найти(ТекущееОписание.ОбъектУчета) = Неопределено Тогда
				ОписанияОбъектовУчета.Удалить(ТекущееОписание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиФормирования = НастройкиФормированияДокументовЭДО(ОписанияОбъектовУчета, КонтекстДиагностики);
	
	ДанныеДляСозданияДокументовЭДО = ДанныеДляФормированияДокументовЭДО(ОписанияОбъектовУчета, НастройкиФормирования,
		КонтекстДиагностики);
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСформироватьДокументыЭДО(
		ДанныеДляСозданияДокументовЭДО.ДанныеДокументовОблачногоЭДО);
	
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаФормированияДокументовЭДО());
	
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
	ОбновитьДокументыЭДО(ДанныеДляСозданияДокументовЭДО.ОписанияДокументовЭДО);
	
	ДополнитьОбъектыОперацийСформированнымиДокументамиЭДО(ПараметрыВыполнения.ОбъектыОперации,
		ДанныеДляСозданияДокументовЭДО.ОписанияДокументовЭДО);
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ЕстьНастройка - Булево
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Формат - Строка
//  * ЗаполнениеКодаТовара - Строка
//  * ВыгружатьДополнительныеСведения - Булево
Функция НовыеНастройкиФормированияДокументовЭДО()
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока50 = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	
	НастройкиФормирования = Новый ТаблицаЗначений;
	// Ключ настройки по объекту учета.
	НастройкиФормирования.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	НастройкиФормирования.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	НастройкиФормирования.Колонки.Добавить("Договор", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
	НастройкиФормирования.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	НастройкиФормирования.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	// Настройки формирования учетных данных.
	НастройкиФормирования.Колонки.Добавить("ЕстьНастройка", ОписаниеТипаБулево);
	НастройкиФормирования.Колонки.Добавить("ИдентификаторОрганизации", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ИдентификаторКонтрагента", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ТребуетсяОтветнаяПодпись", ОписаниеТипаБулево);
	НастройкиФормирования.Колонки.Добавить("ТребуетсяИзвещениеОПолучении", ОписаниеТипаБулево);
	НастройкиФормирования.Колонки.Добавить("Формат", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ЗаполнениеКодаТовара", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ВыгружатьДополнительныеСведения", ОписаниеТипаБулево);
	
	Возврат НастройкиФормирования;
КонецФункции

// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписанияОбъектовУчета
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыеНастройкиФормированияДокументовЭДО
Функция НастройкиФормированияДокументовЭДО(ОписанияОбъектовУчета, КонтекстДиагностики)
	
	НастройкиДокументовЭДО = НовыеНастройкиФормированияДокументовЭДО();
	
	ДополнитьКлючамиНастроекОбъектовУчета(НастройкиДокументовЭДО, ОписанияОбъектовУчета);
	
	ЗаполнитьНастройкиФормированияДокументовЭДО(НастройкиДокументовЭДО, КонтекстДиагностики);
	
	Возврат НастройкиДокументовЭДО;
	
КонецФункции

// Параметры:
//  НастройкиФормирования - См. НовыеНастройкиФормированияДокументовЭДО
//  ОписанияОбъектовУчета - См. НастройкиФормированияДокументовЭДО.ОписанияОбъектовУчета
Процедура ДополнитьКлючамиНастроекОбъектовУчета(НастройкиФормирования, ОписанияОбъектовУчета)
	
	ИменаРеквизитов = "Организация, Контрагент, Договор, ТипДокумента";
	Отбор = Новый Структура(ИменаРеквизитов);
	
	ТипыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияОбъектовУчета, "ТипДокумента", Истина);
	ВидыДокументовПоТипам = ИнтерфейсДокументовЭДО.ВидыДокументовПоСтандартнымТипам(ТипыДокументов);
	
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчета Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ОписаниеОбъектаУчета);
		НайденныеНастройки =  НастройкиФормирования.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(НайденныеНастройки) Тогда
			НастройкаФормирования = НастройкиФормирования.Добавить();
			ЗаполнитьЗначенияСвойств(НастройкаФормирования, ОписаниеОбъектаУчета);
			НастройкаФормирования.ВидДокумента = ВидыДокументовПоТипам[ОписаниеОбъектаУчета.ТипДокумента];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  НастройкиДокументовЭДО - См. НовыеНастройкиФормированияДокументовЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьНастройкиФормированияДокументовЭДО(НастройкиДокументовЭДО, КонтекстДиагностики)
	
	КлючНастройки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	
	Для Каждого НастройкаДокументаЭДО Из НастройкиДокументовЭДО Цикл
		
		КлючНастройки.Отправитель = НастройкаДокументаЭДО.Организация;
		КлючНастройки.Получатель = НастройкаДокументаЭДО.Контрагент;
		КлючНастройки.Договор = НастройкаДокументаЭДО.Договор;
		КлючНастройки.ВидДокумента = НастройкаДокументаЭДО.ВидДокумента;
		
		НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастройки);
		
		Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаДокументаЭДО.ЕстьНастройка = Истина;
		НастройкаДокументаЭДО.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
		НастройкаДокументаЭДО.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
		НастройкаДокументаЭДО.ТребуетсяОтветнаяПодпись = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
		НастройкаДокументаЭДО.ТребуетсяИзвещениеОПолучении = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
		НастройкаДокументаЭДО.Формат = НастройкиОтправки.Формат;
		НастройкаДокументаЭДО.ЗаполнениеКодаТовара = НастройкиОтправки.ЗаполнениеКодаТовара;
		НастройкаДокументаЭДО.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписанияОбъектовУчета
//  НастройкиФормирования - См. НастройкиФормированияДокументовЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * ОписанияДокументовЭДО - Массив из См. НовоеОписаниеДокументаЭДО
//  * ДанныеДокументовОблачногоЭДО - Массив из см. НовыеДанныеДляФормированияДокументаВОблачномЭДО
Функция ДанныеДляФормированияДокументовЭДО(ОписанияОбъектовУчета, НастройкиФормирования, КонтекстДиагностики)
	
	ДанныеДокументов = Новый Массив; // Массив из см. НовыеДанныеДляФормированияДокументаВОблачномЭДО
	ОписанияДокументовЭДО = Новый Массив; // Массив из См. НовоеОписаниеДокументаЭДО
	
	Результат = Новый Структура;
	Результат.Вставить("ОписанияДокументовЭДО", ОписанияДокументовЭДО);
	Результат.Вставить("ДанныеДокументовОблачногоЭДО", ДанныеДокументов);
	
	КлючиНастроекВФорматеСервиса = КлючиНастроекВФорматеСервиса(НастройкиФормирования);
	
	ИменаСвойствОтбора = "Организация, Контрагент, Договор, ТипДокумента";
	ОтборНастроек = Новый Структура(ИменаСвойствОтбора);
	
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчета Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборНастроек, ОписаниеОбъектаУчета);
		НайденныеНастройки = НастройкиФормирования.НайтиСтроки(ОтборНастроек);
		Если Не ЗначениеЗаполнено(НайденныеНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаФормирования = НайденныеНастройки[0];
		
		Если Не НастройкаФормирования.ЕстьНастройка Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФормированияДанных = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ПараметрыФормированияДанных.Формат = НастройкаФормирования.Формат;
		ПараметрыФормированияДанных.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		ПараметрыФормированияДанных.ЗаполнениеКодаТовара = НастройкаФормирования.ЗаполнениеКодаТовара;
		ПараметрыФормированияДанных.ВыгружатьДополнительныеСведения = НастройкаФормирования.ВыгружатьДополнительныеСведения;
		
		ДанныеОбъектаУчета = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(
			ОписаниеОбъектаУчета.ОбъектУчета, ПараметрыФормированияДанных);
		Если ДанныеОбъектаУчета.ОшибкаФормированияВПрикладнойЧасти Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторДокументаОблачногоЭДО = НовыйИдентификаторДокументаВСервисе();
		ИндексНастройки = НастройкиФормирования.Индекс(НастройкаФормирования);
		КлючНастройкиВФорматеСервиса = КлючиНастроекВФорматеСервиса[ИндексНастройки];
		
		ДанныеДокумента = НовыеДанныеДляФормированияДокументаВОблачномЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, КлючНастройкиВФорматеСервиса);
		ДанныеДокумента.Идентификатор = ИдентификаторДокументаОблачногоЭДО;
		ДанныеДокумента.ИдентификаторОтправителя = НастройкаФормирования.ИдентификаторОрганизации;
		ДанныеДокумента.ИдентификаторПолучателя = НастройкаФормирования.ИдентификаторКонтрагента;
		ДанныеДокумента.ТребуетсяОтветнаяПодпись = НастройкаФормирования.ТребуетсяОтветнаяПодпись;
		ДанныеДокумента.ТребуетсяИзвещениеОПолучении = НастройкаФормирования.ТребуетсяИзвещениеОПолучении;
		ДанныеДокумента.Формат = НастройкаФормирования.Формат;
		ДанныеДокумента.УчетныеДанные.Данные = ДеревоУчетныхДанныхВСтруктуру(ДанныеОбъектаУчета.Данные);
		ДанныеДокумента.УчетныеДанные.Формат = ДанныеОбъектаУчета.Формат;
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
		ОписаниеДокументаЭДО = НовоеОписаниеДокументаЭДО();
		ОписаниеДокументаЭДО.Идентификатор = ИдентификаторДокументаОблачногоЭДО;
		ОписаниеДокументаЭДО.Формат = НастройкаФормирования.Формат;
		ОписаниеДокументаЭДО.Организация = ОписаниеОбъектаУчета.Организация;
		ОписаниеДокументаЭДО.Контрагент = ОписаниеОбъектаУчета.Контрагент;
		ОписаниеДокументаЭДО.Договор = ОписаниеОбъектаУчета.Договор;
		ОписаниеДокументаЭДО.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			ОписаниеОбъектаУчета.ТипДокумента);
		
		РеквизитыОснования = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ОписаниеОбъектаУчета.ОбъектУчета);
		ОписаниеДокументаЭДО.Номер = РеквизитыОснования.Номер;
		ОписаниеДокументаЭДО.Дата = РеквизитыОснования.Дата;
		ОписаниеДокументаЭДО.Сумма = РеквизитыОснования.СуммаДокумента;
		
		ОписаниеДокументаЭДО.ОбъектыУчета = ДанныеОбъектаУчета.Основания;
		
		ОписаниеДокументаЭДО.Состояние = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОбработкаОблачнымЭДО;
		
		ОписанияДокументовЭДО.Добавить(ОписаниеДокументаЭДО);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОбъектыОперации - см. НовыеОбъектыОперацииПоДействиямЭДО
//  ОписанияДокументовЭДО - Массив из см. НовоеОписаниеДокументаЭДО
Процедура ДополнитьОбъектыОперацийСформированнымиДокументамиЭДО(ОбъектыОперации, ОписанияДокументовЭДО)
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДокументовЭДО = ОбъектыОперации.ИдентификаторыДокументовЭДО;
	
	Для Каждого ОписаниеДокументаЭДО Из ОписанияДокументовЭДО Цикл
		ИдентификаторыДокументовЭДО.Добавить(ОписаниеДокументаЭДО.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаФормированияДокументовЭДО()
	Возврат "Сформировать";
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаФормированияДокументовЭДО(РезультатФормирования, РезультатДействий)
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(РезультатФормирования.СостоянияДокументовЭДО,
		"ИдентификаторДокумента");
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	
	ОписанияСостоянийЭДО = ОписанияСостоянийДокументовИзФорматаСервиса(
		РезультатФормирования.СостоянияДокументовЭДО, ДокументыПоИдентификаторам);
	
	ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ДокументПоИдентификатору Из ДокументыПоИдентификаторам Цикл
		Итог.ОбработанныеДокументы.Вставить(ДокументПоИдентификатору.Ключ, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;

	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Обработано);
	
КонецПроцедуры

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаФормированияДокументовЭДОПоФайлам(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики)
	
	ОписанияДокументовПоФайлам = ПараметрыВыполнения.ОбъектыОперации.ОписанияДокументовПоФайлам;
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовПоФайлам) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияПоОрганизациям = ДанныеДляФормированияДокументовЭДОПоФайлам(ОписанияДокументовПоФайлам);
	
	ДанныеДокументовЭДО = ДанныеДляФормированияПоОрганизациям[ОписанияДокументовПоФайлам[0].Организация];
	
	Если Не ЗначениеЗаполнено(ДанныеДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСформироватьДокументыЭДОПоФайлам(ДанныеДокументовЭДО);
	ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДОПоФайлам();
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаФормированияДокументовЭДОПоФайлам()
	Возврат "СформироватьПоФайлам";
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Получатель        - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Договор           - Неопределено,Структура:
//  ** Наименование     - Строка
//  ** Номер            - Строка
//  ** Дата             - Дата
//  ** Сторона1         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  ** Сторона2         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  * ВидДокумента      - Структура:
//  ** Наименование     - Строка
//  ** ИмяТипаДокумента - Строка
//  * Номер             - Строка
//  * Дата              - Дата
//  * Сумма             - Число
//  * ОсновнойФайл      - Структура:
//  ** ИмяФайла         - Строка
//  ** Данные           - Строка - двоичные данные в формате base64.
//  * ДополнительныйФайл - Неопределено,Структура:
//  ** ИмяФайла         - Строка
//  ** Данные           - Строка - двоичные данные в формате base64.
Функция НовыеДанныеДляФормированияДокументаЭДОПоФайлам()
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Отправитель", Новый Структура);
	Результат.Вставить("Получатель", Новый Структура);
	Результат.Вставить("Договор", Неопределено);
	Результат.Вставить("ВидДокумента", Новый Структура);
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("ОсновнойФайл", Новый Структура);
	Результат.Вставить("ДополнительныйФайл", Неопределено);
	Возврат Результат;
КонецФункции

// Параметры:
//  ОписанияДокументовПоФайлам - см. ОписанияСостоянийДокументовИзФорматаСервиса
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. НовыеДанныеДляФормированияДокументаЭДОПоФайлам
Функция ДанныеДляФормированияДокументовЭДОПоФайлам(ОписанияДокументовПоФайлам)
	
	Результат = Новый Соответствие; // см. ДанныеДляФормированияДокументовЭДОПоФайлам
	
	КлючиНастроек = КлючиНастроекВФорматеСервиса(ОписанияДокументовПоФайлам);
	
	Индекс = 0;
	Для Каждого ОписаниеДокумента Из ОписанияДокументовПоФайлам Цикл
		
		НаборДанных = Результат[ОписаниеДокумента.Организация];
		Если НаборДанных = Неопределено Тогда
			НаборДанных = Новый Массив;
			Результат.Вставить(ОписаниеДокумента.Организация, НаборДанных);
		КонецЕсли;
		
		ДанныеДляФормирования = НовыеДанныеДляФормированияДокументаЭДОПоФайлам();
		НаборДанных.Добавить(ДанныеДляФормирования);
		
		КлючНастройки = КлючиНастроек[Индекс];
		ЗаполнитьЗначенияСвойств(ДанныеДляФормирования, КлючНастройки);
		
		ДанныеДляФормирования.Идентификатор = ОписаниеДокумента.Идентификатор;
		ДанныеДляФормирования.Номер = ОписаниеДокумента.Номер;
		ДанныеДляФормирования.Дата = ОписаниеДокумента.Дата;
		ДанныеДляФормирования.Сумма = ОписаниеДокумента.Сумма;
		ДанныеДляФормирования.ОсновнойФайл = ОписаниеДокумента.ОсновнойФайл;
		ДанныеДляФормирования.ДополнительныйФайл = ОписаниеДокумента.ДополнительныйФайл;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаФормированияДокументовЭДОПоФайлам(РезультатФормирования, РезультатДействий)
	
	ОбработатьРезультатМетодаФормированияДокументовЭДО(РезультатФормирования, РезультатДействий);
	
КонецПроцедуры

#КонецОбласти

#Область СформироватьОтвет

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаФормированияОтветныхТитуловДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтветныхТитулов = Новый Массив; // см. ОписаниеМетодаФормированияОтветныхТитуловДокументовЭДО
	
	СвойстваДокументов = СвойстваДокументовДляФормированияОтветныхТитулов(ИдентификаторыДокументовЭДО);
	
	ЭлектронныеДокументы = СвойстваДокументов.ВыгрузитьКолонку("Ссылка");
	
	ОбъектыУчетаДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныеДокументы);
	
	Для Каждого СвойстваДокумента Из СвойстваДокументов Цикл
		
		ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		
		НаборОбъектовУчета = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
		Для Каждого ОбъектыУчетаДокумента Из ОбъектыУчетаДокументов Цикл
			Если ОбъектыУчетаДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент Тогда
				НаборОбъектовУчета.Добавить(ОбъектыУчетаДокумента.ОбъектУчета);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ПараметрыФормирования.Формат = ФорматыЭДО.ФорматОтветногоТитула(СвойстваДокумента.ФорматОсновногоТитула);
		
		ДанныеОбъектаУчета = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(НаборОбъектовУчета, ПараметрыФормирования);
		
		ДанныеОтветногоТитула = НовыеДанныеОтветногоТитула();
		ДанныеОтветногоТитула.ИдентификаторДокумента = СвойстваДокумента.ИдентификаторДокумента;
		ДанныеОтветногоТитула.УчетныеДанные.Данные = ДеревоУчетныхДанныхВСтруктуру(ДанныеОбъектаУчета.Данные);
		ДанныеОтветногоТитула.УчетныеДанные.Формат = ДанныеОбъектаУчета.Формат;
		
		ДанныеОтветныхТитулов.Добавить(ДанныеОтветногоТитула);
		
	КонецЦикла;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСформироватьОтветныеТитулыДокументовЭДО(ДанныеОтветныхТитулов);
	ИдентификаторМетода = ИдентификаторМетодаФормированияОтветныхТитуловДокументовЭДО();
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из см. Документ.ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИдентификаторДокумента - см. Документ.ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента
//  * ФорматОсновногоТитула - см. Документ.ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула
//
Функция СвойстваДокументовДляФормированияОтветныхТитулов(ИдентификаторыДокументовЭДО)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументовЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращаемое значение:
//  Структура - Новые данные ответного титула:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура:
//  ** Данные - См. ДеревоУчетныхДанныхВСтруктуру
//  ** Формат - Строка - формат учетных данных.
Функция НовыеДанныеОтветногоТитула()
	ДанныеОтветногоТитула = Новый Структура;
	ДанныеОтветногоТитула.Вставить("ИдентификаторДокумента", "");
	ДанныеОтветногоТитула.Вставить("УчетныеДанные", Новый Структура);
	ДанныеОтветногоТитула.УчетныеДанные.Вставить("Данные", Новый Структура);
	ДанныеОтветногоТитула.УчетныеДанные.Вставить("Формат", "");
	Возврат ДанныеОтветногоТитула;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаФормированияОтветныхТитуловДокументовЭДО()
	Возврат "СформироватьОтвет";
КонецФункции

// Параметры:
//  РезультатУтверждения - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаФормированияОтветныхТитуловДокументовЭДО(РезультатУтверждения, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатУтверждения, РезультатДействий,
		Перечисления.ДействияПоЭДО.Утвердить);
	
КонецПроцедуры

#КонецОбласти

#Область Подписать

#Область ПодготовкаДанныхДляПодписания

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаПодготовкиДанныхДляПодписания(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Отпечатки = ПараметрыВыполнения.ОтпечаткиСертификатов;
	
	Если ПараметрыВыполнения.ОбработатьТолькоИзвещения Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО(
			ИдентификаторыДокументовЭДО, Отпечатки);
	Иначе
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПодготовитьДанныеДляПодписанияДокументовЭДО(
			ИдентификаторыДокументовЭДО, Отпечатки);
	КонецЕсли;
	
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаПодготовкиДанныхДляПодписания());
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПодготовкиДанныхДляПодписания()
	Возврат "ПодготовитьПодписание";
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из См. НовыеДанныеСообщенияДляИнтерактивногоПодписания
Функция НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания()
	Возврат ИнтеграцияОблачногоЭДОКлиентСервер.НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания();
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка - идентификатор данных электронного документа.
//  * Данные - Неопределено,ДвоичныеДанные
//  * Представление - Структура:
//  ** Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Представление - Строка
//  * ТребуетсяЗаполнитьПодписанта - Булево
//  * ТребуетсяДоверенность - Булево
//  * ДоверенностиПоСертификатам - Соответствие из КлючИЗначение:
//  ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** Значение - Строка - номер доверенности.
Функция НовыеДанныеСообщенияДляИнтерактивногоПодписания() Экспорт
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ИдентификаторДанных", "");
	ДанныеСообщения.Вставить("Данные", Неопределено);
	ДанныеСообщения.Вставить("Представление", Новый Структура);
	ДанныеСообщения.Представление.Вставить("Значение", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	ДанныеСообщения.Представление.Вставить("Представление", "");
	ДанныеСообщения.Вставить("ТребуетсяЗаполнитьПодписанта", Ложь);
	ДанныеСообщения.Вставить("ТребуетсяДоверенность", Ложь);
	ДанныеСообщения.Вставить("ДоверенностиПоСертификатам", Новый Соответствие);
	Возврат ДанныеСообщения;
КонецФункции

// Параметры:
//  РезультатПодготовкиДанных - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * ДанныеДляПодписания - Массив из Структура:
//  ** ОтпечаткиСертификатов - Массив из Строка
//  ** НаборДанных - Массив из Структура:
//  *** ИдентификаторДокумента - Строка
//  *** Данные - Строка - ДвоичныеДанные в формате base64.
//  *** ИдентификаторФайла - Строка
//  *** ТребуетсяЗаполнитьПодписанта - Булево
//  *** ТребуетсяДоверенность - Булево
//  *** ДоверенностиПоСертификатам - Неопределено - при значении ТребуетсяМЧД = Ложь.
//                                 - Массив из Структура:
//  **** ОтпечатокСертификата - Строка
//  **** НомерДоверенности - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПодготовкиДанныхДляПодписания(РезультатПодготовкиДанных, РезультатДействий)
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Подписать, 0);
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных.ДанныеДляПодписания) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПодписания = РезультатДействий.ДанныеДляПодписания;
	
	ДанныеДляПодписанияВСервисе = РезультатПодготовкиДанных.ДанныеДляПодписания;

	ОтпечаткиСертификатов = Новый Массив; // Массив из Строка
	
	ИдентификаторыДокументовЭДО = Новый Массив; // Массив из Строка
	
	Для Каждого ОписаниеНабораДанныхВСервисе Из ДанныеДляПодписанияВСервисе Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтпечаткиСертификатов,
			ОписаниеНабораДанныхВСервисе.ОтпечаткиСертификатов, Истина);
		Для Каждого НаборДанныхВСервисе Из ОписаниеНабораДанныхВСервисе.НаборДанных Цикл
			Если ЗначениеЗаполнено(НаборДанныхВСервисе.ИдентификаторДокумента) Тогда
				ИдентификаторыДокументовЭДО.Добавить(НаборДанныхВСервисе.ИдентификаторДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(ОтпечаткиСертификатов);
	
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументовЭДО);
	
	Для Каждого ОписаниеНабораДанныхВСервисе Из ДанныеДляПодписанияВСервисе Цикл
		
		ОписаниеНабораДанных = НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания();
		
		Для Каждого ОтпечатокСертификата Из ОписаниеНабораДанныхВСервисе.ОтпечаткиСертификатов Цикл
			Сертификат = СертификатыПоОтпечаткам[ОтпечатокСертификата]; // СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
			ОписаниеНабораДанных.Сертификаты.Добавить(Сертификат);
		КонецЦикла;
		
		Для Каждого НаборДанныхВСервисе Из ОписаниеНабораДанныхВСервисе.НаборДанных Цикл
			ДанныеСообщения = НовыеДанныеСообщенияДляИнтерактивногоПодписания();
			ЭлектронныйДокумент = ДокументыПоИдентификаторам[НаборДанныхВСервисе.ИдентификаторДокумента];
			ДанныеСообщения.ИдентификаторДанных = НаборДанныхВСервисе.ИдентификаторДанных;
			ДанныеСообщения.Данные = Base64Значение(НаборДанныхВСервисе.Данные);
			ДанныеСообщения.Представление.Значение = ЭлектронныйДокумент;
			ДанныеСообщения.Представление.Представление = Строка(ЭлектронныйДокумент);
			ДанныеСообщения.ТребуетсяЗаполнитьПодписанта = НаборДанныхВСервисе.ТребуетсяЗаполнитьПодписанта;
			ДанныеСообщения.ТребуетсяДоверенность = НаборДанныхВСервисе.ТребуетсяДоверенность;
			ДанныеСообщения.ДоверенностиПоСертификатам = ДоверенностиПоСертификатамИзФорматаСервиса(
				НаборДанныхВСервисе.ДоверенностиПоСертификатам, СертификатыПоОтпечаткам);
			ОписаниеНабораДанных.НаборДанных.Добавить(ДанныеСообщения);
		КонецЦикла;
		
		ДанныеДляПодписания.Добавить(ОписаниеНабораДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДоверенностиПоСертификатамВФорматеСервиса - Неопределено
//                                            - Массив из Структура:
// * ОтпечатокСертификата - Строка
// * НомерДоверенности - Строка
// СертификатыПоОтпечаткам - см. КриптографияБЭД.СертификатыПоОтпечаткам
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - Строка - номер доверенности.
Функция ДоверенностиПоСертификатамИзФорматаСервиса(ДоверенностиПоСертификатамВФорматеСервиса, СертификатыПоОтпечаткам)
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ДоверенностиПоСертификатамВФорматеСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДоверенностьПоСертификату Из ДоверенностиПоСертификатамВФорматеСервиса Цикл
		
		Сертификат = СертификатыПоОтпечаткам[ДоверенностьПоСертификату.ОтпечатокСертификата];
		Если Не ЗначениеЗаполнено(Сертификат) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(Сертификат, ДоверенностьПоСертификату.НомерДоверенности);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхДляПодписанияПоВыбраннымСертификатам

// Параметры:
//  ДанныеДляЗаполненияПоУчетнымЗаписям - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - Массив из Структура:
//  ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - выбранный сертификат.
//  ** НомерДоверенности - Строка
//  ** ИдентификаторыДанных - Массив из Строка - идентификаторы данных электронных документов.
//
// Возвращаемое значение:
//  Структура:
//  * АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  * ЗаполненныеДанныеПоУчетнымЗаписям - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  ** Значение - см. ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Функция ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам(ДанныеДляЗаполненияПоУчетнымЗаписям) Экспорт
	
	АсинхронныеОперации = Новый Массив; // Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
	ЗаполненныеДанныеПоУчетнымЗаписям = Новый Соответствие;
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("АсинхронныеОперации", АсинхронныеОперации);
	Результат.Вставить("ЗаполненныеДанныеПоУчетнымЗаписям", ЗаполненныеДанныеПоУчетнымЗаписям);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Асинхронно = Ложь;
	
	Сертификаты = Новый Массив; // Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	Для Каждого ДанныеДляЗаполненияПоУчетнойЗаписи Из ДанныеДляЗаполненияПоУчетнымЗаписям Цикл
		ДанныеДляЗаполнения = ДанныеДляЗаполненияПоУчетнойЗаписи.Значение;
		Для Каждого ОписаниеНабораДанных Из ДанныеДляЗаполнения Цикл
			ДобавитьУникальноеЗначение(Сертификаты, ОписаниеНабораДанных.Сертификат);
		КонецЦикла;
	КонецЦикла;
	
	ОтпечаткиСертификатов = КриптографияБЭД.ОтпечаткиСертификатов(Сертификаты);
	
	Для Каждого ДанныеДляЗаполненияПоУчетнойЗаписи Из ДанныеДляЗаполненияПоУчетнымЗаписям Цикл
		
		ИдентификаторУчетнойЗаписи = ДанныеДляЗаполненияПоУчетнойЗаписи.Ключ;
		ДанныеДляЗаполнения = ДанныеДляЗаполненияПоУчетнойЗаписи.Значение;
		
		ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи);
		
		ДанныеДляЗаполненияВФорматеСервиса = ДанныеДляЗаполненияПоВыбраннымСертификатамВФорматеСервиса(
			ДанныеДляЗаполнения, ОтпечаткиСертификатов);
		
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам(
			ДанныеДляЗаполненияВФорматеСервиса);
		
		Если Асинхронно Тогда
			РезультатСервисаАсинхронно = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписаниюАсинхронно(
				ПараметрыВыполнения, ОписаниеМетода);
			АсинхроннаяОперация = СервисОблачногоЭДО.АсинхроннаяОперацияПоРезультатуСервисаАсинхронно(
				ИдентификаторУчетнойЗаписи, РезультатСервисаАсинхронно);
			АсинхронныеОперации.Добавить(АсинхроннаяОперация);
		Иначе
			РезультатСервиса = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
			ЗаполненныеДанные = ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам(
				РезультатСервиса.РезультатМетода, КонтекстДиагностики);
			ЗаполненныеДанныеПоУчетнымЗаписям.Вставить(ИдентификаторУчетнойЗаписи, ЗаполненныеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеДляЗаполнения - Массив из Структура:
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - выбранный сертификат.
//  * НомерДоверенности - Строка
//  * ИдентификаторыДанных - Массив из Строка - идентификаторы данных электронных документов.
//  ОтпечаткиСертификатов - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - Строка - отпечаток сертификата.
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторыДанных - Массив из Строка
//  * ОтпечатокСертификата - Строка
//  * НомерДоверенности - Строка
Функция ДанныеДляЗаполненияПоВыбраннымСертификатамВФорматеСервиса(ДанныеДляЗаполнения, ОтпечаткиСертификатов)
	
	ДанныеДляЗаполненияВФорматеСервиса = Новый Массив; // См. ДанныеДляЗаполненияПоВыбраннымСертификатамВФорматеСервиса
	
	Для Каждого ОписаниеНабораДанных Из ДанныеДляЗаполнения Цикл
		
		ОтпечатокСертификата = ОтпечаткиСертификатов[ОписаниеНабораДанных.Сертификат];
		
		ОписаниеНабораДанныхВФорматеСервиса = Новый Структура;
		ОписаниеНабораДанныхВФорматеСервиса.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
		ОписаниеНабораДанныхВФорматеСервиса.Вставить("НомерДоверенности", ОписаниеНабораДанных.НомерДоверенности);
		ОписаниеНабораДанныхВФорматеСервиса.Вставить("ИдентификаторыДанных", ОписаниеНабораДанных.ИдентификаторыДанных);
		
		ДанныеДляЗаполненияВФорматеСервиса.Добавить(ОписаниеНабораДанныхВФорматеСервиса);
		
	КонецЦикла;
	
	Возврат ДанныеДляЗаполненияВФорматеСервиса;
	
КонецФункции

// Параметры:
//  РезультатЗаполненияДанных - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * НаборДанных - Массив из Структура:
//  ** ИдентификаторФайла - Строка - идентификатор файла электронного документа в сервисе.
//  ** Данные - Строка - двоичные данные в формате base64.
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор файла электронного документа.
//  * Значение - ДвоичныеДанные
Функция ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам(РезультатЗаполненияДанных, КонтекстДиагностики) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ЭлементНабора Из РезультатЗаполненияДанных.НаборДанных Цикл
		ЗаполненнныеДанные = Base64Значение(ЭлементНабора.Данные);
		Результат.Вставить(ЭлементНабора.ИдентификаторФайла, ЗаполненнныеДанные);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеПодписей

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  ПодписиДанных - Массив из Структура:
//  * ИдентификаторДанных - Строка
//  * Подпись - ДвоичныеДанные
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. СервисОблачногоЭДО.НоваяОперацияСервиса
Функция ОперацияСервисаПоДобавлениюПодписейФайлов(ИдентификаторУчетнойЗаписи, ПодписиДанных)
	
	Если Не ЗначениеЗаполнено(ПодписиДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОперацияСервиса = СервисОблачногоЭДО.НоваяОперацияСервиса();
	ОперацияСервиса.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
	
	ПодписиДанныхВФорматеСервиса = Новый Массив; // см. ОписаниеМетодаДобавленияПодписей.ПодписиДанных
	
	Для Каждого ПодписьДанных Из ПодписиДанных Цикл
		ПодписьДанныхВФорматеСервиса = НоваяПодписьДанныхВФорматеСервиса();
		ПодписьДанныхВФорматеСервиса.ИдентификаторДанных = ПодписьДанных.ИдентификаторДанных;
		ПодписьДанныхВФорматеСервиса.Подпись = Base64Строка(ПодписьДанных.Подпись);
		ПодписиДанныхВФорматеСервиса.Добавить(ПодписьДанныхВФорматеСервиса);
	КонецЦикла;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаДобавитьПодписиФайловДокументовЭДО(ПодписиДанныхВФорматеСервиса);
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаДобавленияПодписейФайлов());
	ОперацияСервиса.ОписанияМетодов.Добавить(ОписаниеМетода);
	
	ДатаСинхронизации = РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.ДатаСинхронизацииПоТипу(
		ИдентификаторУчетнойЗаписи, Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияВизуализацийЭДО);
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИзмененныеСостоянияВизуализацийДокументовЭДО(ДатаСинхронизации);
	ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхСостоянийВизуализацийДокументовЭДО();
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
	ОперацияСервиса.ОписанияМетодов.Добавить(ОписаниеМетода);
	
	Возврат ОперацияСервиса;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка - идентификатор файла электронного документа.
//  * Подпись - Строка - двоичные данные в формате base64.
Функция НоваяПодписьДанныхВФорматеСервиса()
	ПодписьДанных = Новый Структура;
	ПодписьДанных.Вставить("ИдентификаторДанных", "");
	ПодписьДанных.Вставить("Подпись", "");
	Возврат ПодписьДанных;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаДобавленияПодписейФайлов()
	Возврат "ДобавитьПодписи";
КонецФункции

// Параметры:
//  РезультатДобавленияПодписей - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаДобавленияПодписейФайлов(РезультатДобавленияПодписей, РезультатДействий)
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(РезультатДобавленияПодписей.СостоянияДокументовЭДО,
		"ИдентификаторДокумента");
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	
	ОписанияСостоянийЭДО = ОписанияСостоянийДокументовИзФорматаСервиса(
		РезультатДобавленияПодписей.СостоянияДокументовЭДО, ДокументыПоИдентификаторам);
	
	ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ДокументПоИдентификатору Из ДокументыПоИдентификаторам Цикл
		Итог.ОбработанныеДокументы.Вставить(ДокументПоИдентификатору.Ключ, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Подписать, Обработано);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Отправить

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаОтправкиДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОбработатьТолькоИзвещения Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтправитьИзвещенияДокументовЭДО(ИдентификаторыДокументовЭДО,
			ПараметрыВыполнения.МаркерыАвторизации);
	Иначе
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтправитьДокументыЭДО(ИдентификаторыДокументовЭДО,
			ПараметрыВыполнения.МаркерыАвторизации);
	КонецЕсли;
	
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаОтправкиДокументовЭДО());
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтправкиДокументовЭДО()
	Возврат "Отправить";
КонецФункции

// Параметры:
//  РезультатОтправки - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтправкиДокументовЭДО(РезультатОтправки, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтправки, РезультатДействий,
		Перечисления.ДействияПоЭДО.Отправить);
	
КонецПроцедуры

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаОтправкиКонтейнеровЭДО(ОписанияМетодов, ПараметрыВыполнения, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам)
		ИЛИ Не ЗначениеЗаполнено(ПараметрыВыполнения.МаркерыАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтправитьКонтейнерыЭДО(ПараметрыВыполнения.МаркерыАвторизации);
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаОтправкиКонтейнеровЭДО());
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтправкиКонтейнеровЭДО()
	Возврат "ОтправитьКонтейнеры";
КонецФункции

// Параметры:
//  РезультатОтправки - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьКонтейнерыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтправкиКонтейнеровЭДО(РезультатОтправки, РезультатДействий)
	
	Если ЗначениеЗаполнено(РезультатОтправки.Отправлено) Тогда
		Отправлено = РезультатДействий.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Отправить];
		Отправлено = ?(ЗначениеЗаполнено(Отправлено), Отправлено + РезультатОтправки.Отправлено,
			РезультатОтправки.Отправлено);
		РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Отправить, Отправлено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Получить

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияКонтейнеровЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПолучитьКонтейнерыЭДО(ПараметрыВыполнения.МаркерыАвторизации);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаПолученияКонтейнеровЭДО());
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияКонтейнеровЭДО()
	Возврат "ПолучитьКонтейнеры"
КонецФункции

// Параметры:
//  РезультатПолучения - см. СервисОблачногоЭДО.НовыйРезультатМетодаПолучитьКонтейнерыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПолученияКонтейнеровЭДО(РезультатПолучения, РезультатДействий)
	
	Если ЗначениеЗаполнено(РезультатПолучения.Получено) Тогда
		Получено = РезультатДействий.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Загрузить];
		Получено = ?(ЗначениеЗаполнено(Получено), Получено + РезультатПолучения.Получено,
			РезультатПолучения.Получено);
		РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Загрузить, Получено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПолучения.ИдентификаторыДокументовДляОбработкиИзвещений) Тогда
		ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(
			РезультатПолучения.ИдентификаторыДокументовДляОбработкиИзвещений);
		ДокументыДляОбработкиИзвещений = РезультатДействий.ДокументыДляОбработкиИзвещений;
		Для Каждого ДокументПоИдентификату Из ДокументыПоИдентификаторам Цикл
			ДокументыДляОбработкиИзвещений.Вставить(ДокументПоИдентификату.Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияИзмененныхДокументыЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ДатаСинхронизации = ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияДокументовЭДО];
	
	Если ДатаСинхронизации <> Неопределено Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИзмененныеДокументыЭДО(ДатаСинхронизации);
		ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхДокументыЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияИзмененныхДокументыЭДО()
	Возврат "ПолучитьДокументы";
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  РезультатМетода - см. СервисОблачногоЭДО.НовыйРезультатМетодаИзмененныеДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПолученияИзмененныхДокументыЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода, РезультатДействий)
	
	ДатаСинхронизации = ДатаИзФорматаСервиса(РезультатМетода.ДатаОкончанияВыборки);
	Если ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Записать(ИдентификаторУчетнойЗаписи,
			Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияДокументовЭДО, ДатаСинхронизации);
	КонецЕсли;
	
	ОписанияДокументовВФорматеСервиса = РезультатМетода.ОписанияДокументовЭДО;
	Если Не ЗначениеЗаполнено(ОписанияДокументовВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияДокументовЭДО = ОписанияДокументовИзФорматаСервиса(ОписанияДокументовВФорматеСервиса);
	
	ДокументыЭДО = ОбновитьДокументыЭДО(ОписанияДокументовЭДО);
	
	СоздатьОбъектыУчетаПоДокументамНаКонтролеОтражения(ДокументыЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ДокументЭДО Из ДокументыЭДО Цикл
		Итог.ОбработанныеДокументы.Вставить(ДокументЭДО, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Загрузить, Обработано);
	
КонецПроцедуры

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияИзмененныхПакетовДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ДатаСинхронизации = ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ПакетыДокументовЭДО];
	
	Если ДатаСинхронизации <> Неопределено Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИзмененныеПакетыДокументовЭДО(ДатаСинхронизации);
		ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхПакетовДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияИзмененныхПакетовДокументовЭДО()
	Возврат "ПолучитьПакеты";
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  РезультатМетода - см. СервисОблачногоЭДО.НовыйРезультатПолученияИзмененныхПакетовДокументовЭДО
Процедура ОбработатьРезультатМетодаПолученияИзмененныхПакетовДокументовЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода)
	
	ДатаСинхронизации = ДатаИзФорматаСервиса(РезультатМетода.ДатаОкончанияВыборки);
	Если ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Записать(ИдентификаторУчетнойЗаписи,
			Перечисления.ТипыСинхронизацииОблачногоЭДО.ПакетыДокументовЭДО, ДатаСинхронизации);
	КонецЕсли;
	
	ОписанияПакетовВФорматеСервиса = РезультатМетода.ОписанияПакетов;
	Если Не ЗначениеЗаполнено(ОписанияПакетовВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияПакетов = ОписанияПакетовИзФорматаСервиса(ОписанияПакетовВФорматеСервиса);
	
	ОбновитьПакетыДокументовПоОписаниям(ОписанияПакетов);
	
КонецПроцедуры

// Параметры:
//  ОписанияПакетовВФорматеСервиса - Массив из Структура:
//  * ИдентификаторПакета - Строка
//  * Дата - Строка - дата в формате ISO.
//  * КлючСортировки - Строка
//  * Состав - Массив из Строка - идентификаторы документов.
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеПакетаДокументовИзФорматаСервиса
//
Функция ОписанияПакетовИзФорматаСервиса(ОписанияПакетовВФорматеСервиса)
	
	ОписанияПакетов = Новый Массив; // см. ОписанияПакетовИзФорматаСервиса
	
	ИдентификаторыДокументов = Новый Массив; // см. ДокументыПоИдентификаторамСервиса.ИдентификаторыДокументов
	ИдентификаторыПервыхДокументов = Новый Массив; // см. РеквизитыДокументовДляОбновленияПакетов.ИдентификаторыДокументов
	Для Каждого ОписаниеПакетаВФорматеСервиса Из ОписанияПакетовВФорматеСервиса Цикл
		ИдентификаторыДокументовПакета = ОписаниеПакетаВФорматеСервиса.Состав;
		Если ЗначениеЗаполнено(ИдентификаторыДокументовПакета) Тогда
			ИдентификаторыПервыхДокументов.Добавить(ИдентификаторыДокументовПакета[0]);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыДокументов, ИдентификаторыДокументовПакета);
		КонецЕсли;
	КонецЦикла;
	
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	РеквизитыПервыхДокументов = РеквизитыДокументовДляОбновленияПакетов(ИдентификаторыПервыхДокументов);
	
	Для Каждого ОписаниеПакетаВФорматеСервиса Из ОписанияПакетовВФорматеСервиса Цикл
		
		ОписаниеПакета = НовоеОписаниеПакетаДокументовИзФорматаСервиса();
		ИдентификаторПакета = Новый УникальныйИдентификатор(ОписаниеПакетаВФорматеСервиса.ИдентификаторПакета);
		ОписаниеПакета.ИдентификаторПакета = ИдентификаторПакета;
		
		РеквизитыПервогоДокумента = Неопределено;
		Если Не ЗначениеЗаполнено(ОписаниеПакетаВФорматеСервиса.Состав) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторДокумента = ОписаниеПакетаВФорматеСервиса.Состав[0];
		РеквизитыПервогоДокумента = РеквизитыПервыхДокументов.Найти(ИдентификаторДокумента, "ИдентификаторДокумента");
		Если РеквизитыПервогоДокумента <> Неопределено Тогда
			ОписаниеПакета.Организация = РеквизитыПервогоДокумента.Организация;
			ОписаниеПакета.Контрагент = РеквизитыПервогоДокумента.Контрагент;
			ОписаниеПакета.ДоговорКонтрагента = РеквизитыПервогоДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
		СоставПакета = ОписаниеПакета.Состав;
		Для Каждого ИдентификаторДокумента Из ОписаниеПакетаВФорматеСервиса.Состав Цикл
			ЭлектронныйДокумент = ДокументыПоИдентификаторам[ИдентификаторДокумента];
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				СоставПакета.Добавить(ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		ОписанияПакетов.Добавить(ОписаниеПакета);
		
	КонецЦикла;
	
	Возврат ОписанияПакетов;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * Дата - Дата
//  * КлючСортировки - Строка
//  * Состав - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Функция НовоеОписаниеПакетаДокументовИзФорматаСервиса()
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторПакета", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Описание.Вставить("Организация", Неопределено);
	Описание.Вставить("Контрагент", Неопределено);
	Описание.Вставить("ДоговорКонтрагента", Неопределено);
	Описание.Вставить("Дата", '00010101');
	Описание.Вставить("КлючСортировки", "");
	Описание.Вставить("Состав", Новый Массив);
	Возврат Описание;
КонецФункции

// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторДокумента - Строка
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//
Функция РеквизитыДокументовДляОбновленияПакетов(ИдентификаторыДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//  ОписанияПакетов - см. ОписанияПакетовИзФорматаСервиса
Процедура ОбновитьПакетыДокументовПоОписаниям(ОписанияПакетов)
	
	ИдентификаторыПакетов = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияПакетов, "ИдентификаторПакета"); // Массив из УникальныйИдентификатор
	ТекущийСоставПакетов = ТекущийСоставПакетовДокументовЭДО(ИдентификаторыПакетов);
	
	Для Каждого ОписаниеПакета Из ОписанияПакетов Цикл
		
		ТекущийСоставПакета = ТекущийСоставПакетов[ОписаниеПакета.ИдентификаторПакета];
		Если ТекущийСоставПакета = Неопределено Тогда
			ТекущийСоставПакета = Новый Массив;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеПакета.Состав) Тогда
			ОбновитьПакетДокументовПоОписанию(ОписаниеПакета, ТекущийСоставПакета);
		Иначе
			УдалитьПакетДокументовПоОписанию(ОписаниеПакета, ТекущийСоставПакета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыПакетов - Массив из УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - УникальныйИдентификатор
//  * Значение - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Функция ТекущийСоставПакетовДокументовЭДО(ИдентификаторыПакетов)
	
	Результат = Новый Соответствие; // см. ТекущийСоставПакетовДокументовЭДО
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент,
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|ГДЕ
		|	СоставПакетовДокументовЭДО.ИдентификаторПакета В (&ИдентификаторыПакетов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ИдентификаторыПакетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоставПакета = Результат[Выборка.ИдентификаторПакета];
		Если СоставПакета = Неопределено Тогда
			СоставПакета = Новый Массив;
			Результат.Вставить(Выборка.ИдентификаторПакета, СоставПакета);
		КонецЕсли;
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент; // ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		СоставПакета.Добавить(ЭлектронныйДокумент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписаниеПакета - см. НовоеОписаниеПакетаДокументовИзФорматаСервиса
//  ТекущийСоставПакета - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ОбновитьПакетДокументовПоОписанию(ОписаниеПакета, ТекущийСоставПакета)
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписейПакетов = РегистрыСведений.ПакетыДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписейПакетов.Отбор.ИдентификаторПакета.Установить(ОписаниеПакета.ИдентификаторПакета);
		
		ЗаписьНабораПакетов = НаборЗаписейПакетов.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабораПакетов, ОписаниеПакета);
		НаборЗаписейПакетов.Записать();
		
		ДокументыКУдалениюИзПакета = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
		
		Для Каждого ЭлектронныйДокумент Из ОписаниеПакета.Состав Цикл
			Если ТекущийСоставПакета.Найти(ЭлектронныйДокумент) <> Неопределено Тогда
				ДокументыКУдалениюИзПакета.Добавить(ЭлектронныйДокумент);
			Иначе
				НаборЗаписейСоставаПакетов = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
				НаборЗаписейСоставаПакетов.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
				ЗаписьНабораСоставаПакетов = НаборЗаписейСоставаПакетов.Добавить();
				ЗаписьНабораСоставаПакетов.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ЗаписьНабораСоставаПакетов.ИдентификаторПакета = ОписаниеПакета.ИдентификаторПакета;
				НаборЗаписейСоставаПакетов.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлектронныйДокумент Из ДокументыКУдалениюИзПакета Цикл
			НаборЗаписейПоСоставуПакетов = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
			НаборЗаписейПоСоставуПакетов.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
			НаборЗаписейПоСоставуПакетов.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  ОписаниеПакета - см. НовоеОписаниеПакетаДокументовИзФорматаСервиса
//  ТекущийСоставПакета - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура УдалитьПакетДокументовПоОписанию(ОписаниеПакета, ТекущийСоставПакета)
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписейПоПакетам = РегистрыСведений.ПакетыДокументовЭДО.СоздатьНаборЗаписей();
		НаборЗаписейПоПакетам.Отбор.ИдентификаторПакета.Установить(ОписаниеПакета.ИдентификаторПакета);
		
		Для Каждого ЭлектронныйДокумент Из ТекущийСоставПакета Цикл
			НаборЗаписейПоСоставуПакетов = РегистрыСведений.СоставПакетовДокументовЭДО.СоздатьНаборЗаписей();
			НаборЗаписейПоСоставуПакетов.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
			НаборЗаписейПоСоставуПакетов.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияИзмененныхСостоянийВизуализацийДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)

	ДатаСинхронизации = ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияВизуализацийЭДО];
	
	Если ДатаСинхронизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИзмененныеСостоянияВизуализацийДокументовЭДО(ДатаСинхронизации);
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода,
		ИдентификаторМетодаПолученияИзмененныхСостоянийВизуализацийДокументовЭДО());
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияИзмененныхСостоянийВизуализацийДокументовЭДО()
	Возврат "ИзмененныеСостоянияВизуализаций";
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  РезультатМетода - см. СервисОблачногоЭДО.НовыйРезультатПолученияИзмененныхСостоянийВизуализацийДокументовЭДО
Процедура ОбработатьРезультатМетодаИзмененияПравилВизуализацииДокументовЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода)
	
	ВерсииДанныхВизуализацийВФорматеСервиса = РезультатМетода.ВерсииДанныхВизуализаций;
	Если ЗначениеЗаполнено(ВерсииДанныхВизуализацийВФорматеСервиса) Тогда
		
		ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(
			ВерсииДанныхВизуализацийВФорматеСервиса, "ИдентификаторДокумента");
		ДокументыПоИдентификаторамСервиса = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
		
		ВерсииДанныхДокументов = РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеВерсииДанныхДокументов();
		
		Для Каждого ВерсияДанныхВизуализацииВФорматеСервиса Из ВерсииДанныхВизуализацийВФорматеСервиса Цикл
			ЭлектронныйДокумент = ДокументыПоИдентификаторамСервиса[
				ВерсияДанныхВизуализацииВФорматеСервиса.ИдентификаторДокумента];
			Если ЭлектронныйДокумент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВерсияДанныхДокумента = ВерсииДанныхДокументов.Добавить();
			ВерсияДанныхДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент;
			ВерсияДанныхДокумента.ВерсияДанных = ВерсияДанныхВизуализацииВФорматеСервиса.ВерсияДанных;
		КонецЦикла;
		
		РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.ОчиститьИзмененныеВизуализацииДокументов(
			ВерсииДанныхДокументов);
		
	КонецЕсли;
	
	ДатыОбновленияПравил = РезультатМетода.ДатыОбновленияПравил;
	Если ЗначениеЗаполнено(ДатыОбновленияПравил) Тогда
		
		Для Каждого ДатаОбновленияПравила Из ДатыОбновленияПравил Цикл
			ДатаОбновления = ДатаИзФорматаСервиса(ДатаОбновленияПравила.ДатаОбновления);
			РегистрыСведений.СостоянияПравилВизуализацииОблачногоЭДО.Записать(ДатаОбновленияПравила.ИдентификаторПравила,
				ДатаОбновления);
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаСинхронизации = ДатаИзФорматаСервиса(РезультатМетода.ДатаОкончанияВыборки);
	Если ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Записать(ИдентификаторУчетнойЗаписи,
			Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияВизуализацийЭДО, ДатаСинхронизации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МаркерыАвторизации

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияМаркеровАвторизации(ОписанияМетодов, ПараметрыВыполнения)
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО(
		ПараметрыВыполнения.ОтпечаткиСертификатов);
	СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаПолученияМаркеровАвторизации());
	ОписанияМетодов.Добавить(ОписаниеМетода);
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияМаркеровАвторизации()
	Возврат "МаркерыАвторизации"
КонецФункции

// Возвращаемое значение:
//  Структура - Новые данные сервиса для расшифровки:
//  * ИдентификаторУчетнойЗаписиЭДО - Строка
//  * ОтпечатокСертификата - Строка
//  * Данные - Строка - двоичные данные в формате base64.
Функция НовыйМаркерАвторизацииВФорматеСервиса()
	ЗашифрованныйМаркер = Новый Структура;
	ЗашифрованныйМаркер.Вставить("ИдентификаторУчетнойЗаписиЭДО", "");
	ЗашифрованныйМаркер.Вставить("ОтпечатокСертификата", "");
	ЗашифрованныйМаркер.Вставить("Данные", "");
	Возврат ЗашифрованныйМаркер;
КонецФункции

// Параметры:
//  РезультатПолучения - см. СервисОблачногоЭДО.НовыйРезультатПолученияМаркеровАвторизацииПоУчетнымЗаписямЭДО
//  РезультатДействий - Структура:
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатПолучения, РезультатДействий)
	
	Если Не ЗначениеЗаполнено(РезультатПолучения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеМаркеры = ЗашифрованныеМаркерыИзМаркеровАвторизации(РезультатПолучения.ЗашифрованныеМаркеры);
	
	Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатДействий.ЗашифрованныеМаркеры,
			ЗашифрованныеМаркеры, Истина);
	Иначе
		РезультатДействий.ЗашифрованныеМаркеры = ЗашифрованныеМаркеры;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииВФорматеСервиса
// 
// Возвращаемое значение:
//  См. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
Функция ЗашифрованныеМаркерыИзМаркеровАвторизации(МаркерыАвторизации)
	
	ЗашифрованныеМаркеры = КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки();
	
	Для Каждого МаркерАвторизации Из МаркерыАвторизации Цикл
		ИдентификаторУчетнойЗаписиЭДО = МаркерАвторизации.ИдентификаторУчетнойЗаписиЭДО;
		ДанныеПоСертификатам = ЗашифрованныеМаркеры[ИдентификаторУчетнойЗаписиЭДО];
		Если ДанныеПоСертификатам = Неопределено Тогда
			ДанныеПоСертификатам = Новый Массив;
			ЗашифрованныеМаркеры.Вставить(ИдентификаторУчетнойЗаписиЭДО, ДанныеПоСертификатам);
		КонецЕсли;
		ДанныеРасшифровки = КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки();
		ДанныеРасшифровки.Сертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(МаркерАвторизации.ОтпечатокСертификата);
		ДанныеРасшифровки.Данные = Base64Значение(МаркерАвторизации.Данные);
		ДанныеПоСертификатам.Добавить(ДанныеРасшифровки);
	КонецЦикла;
	
	Возврат ЗашифрованныеМаркеры;
	
КонецФункции

// Параметры:
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  Массив из см. НовыйМаркерАвторизацииВФорматеСервиса
Функция МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры)
	
	МаркерыАвторизации = Новый Массив; // см. МаркерыАвторизацииИзРасшифрованныхМаркеров
	
	Если Не ЗначениеЗаполнено(РасшифрованныеМаркеры) Тогда
		Возврат МаркерыАвторизации;
	КонецЕсли;
	
	Сертификаты = Новый Массив; // Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	Для Каждого РасшифрованныйМаркер Из РасшифрованныеМаркеры Цикл
		Сертификат = РасшифрованныйМаркер.Значение.Сертификат;
		Если Сертификаты.Найти(Сертификат) = Неопределено Тогда
			Сертификаты.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	ОтпечаткиПоСертификатам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сертификаты, "Отпечаток");
	
	Для Каждого РасшифрованныйМаркер Из РасшифрованныеМаркеры Цикл
		ДанныеРасшифровки = РасшифрованныйМаркер.Значение;
		
		МаркерАвторизации = НовыйМаркерАвторизацииВФорматеСервиса();
		МаркерАвторизации.ИдентификаторУчетнойЗаписиЭДО = РасшифрованныйМаркер.Ключ;
		МаркерАвторизации.ОтпечатокСертификата = ОтпечаткиПоСертификатам[ДанныеРасшифровки.Сертификат];
		МаркерАвторизации.Данные = Base64Строка(ДанныеРасшифровки.Данные);
		МаркерыАвторизации.Добавить(МаркерАвторизации);
	КонецЦикла;
	
	Возврат МаркерыАвторизации;
	
КонецФункции

#КонецОбласти

#Область Утвердить

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаУтвержденияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаУтвердитьДокументыЭДО(ИдентификаторыДокументовЭДО);
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетодаУтвержденияДокументовЭДО());
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаУтвержденияДокументовЭДО()
	Возврат "Утвердить";
КонецФункции

// Параметры:
//  РезультатУтверждения - см. СервисОблачногоЭДО.НовыйРезультатМетодаУтвердитьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаУтвержденияДокументовЭДО(РезультатУтверждения, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатУтверждения, РезультатДействий,
		Перечисления.ДействияПоЭДО.Утвердить);
	
КонецПроцедуры

#КонецОбласти

#Область ОтклонитьПодписание

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаОтклоненияПодписанияДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтклоненияПодписанияДокументовЭДО()
	Возврат "ОтклонитьПодписание";
КонецФункции

// Параметры:
//  РезультатОтклоненияПодписания - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтклонитьПодписаниеДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтклоненияПодписанияДокументовЭДО(РезультатОтклоненияПодписания, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтклоненияПодписания, РезультатДействий,
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
	
КонецПроцедуры

#КонецОбласти

#Область Аннулировать

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаАннулированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаАннулироватьДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаАннулированияДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаАннулированияДокументовЭДО()
	Возврат "Аннулировать";
КонецФункции

// Параметры:
//  РезультатАннулирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаАннулироватьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаАннулированияДокументовЭДО(РезультатАннулирования, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатАннулирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.Аннулировать);
	
КонецПроцедуры

#КонецОбласти

#Область ПринятьАннулирование

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПринятияАннулированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПринятьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаПринятияАннулированияДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПринятияАннулированияДокументовЭДО()
	Возврат "ПринятьАннулирование";
КонецФункции

// Параметры:
//  РезультатПринятияАннулирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаПринятьАннулированиеДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПринятияАннулированияДокументовЭДО(РезультатПринятияАннулирования, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатПринятияАннулирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	
КонецПроцедуры

#КонецОбласти

#Область ОтклонитьАннулирование

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтклоненияАннулированияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтклонитьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаОтклоненияАннулированияДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтклоненияАннулированияДокументовЭДО()
	Возврат "ОтклонитьАннулирование";
КонецФункции

// Параметры:
//  РезультатОтклоненияАннулирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтклонитьАннулированиеДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтклоненияАннулированияДокументовЭДО(РезультатОтклоненияАннулирования, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтклоненияАннулирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	
КонецПроцедуры

#КонецОбласти

#Область Отклонить

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтклоненияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтклонитьДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаОтклоненияДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтклоненияДокументовЭДО()
	Возврат "Отклонить";
КонецФункции

// Параметры:
//  РезультатОтклонения - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтклонитьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтклоненияДокументовЭДО(РезультатОтклонения, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтклонения, РезультатДействий,
		Перечисления.ДействияПоЭДО.Отклонить);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправитьВАрхив

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтправкиВАрхивДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаОтправитьВАрхивДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаОтправкиВАрхивДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтправкиВАрхивДокументовЭДО()
	Возврат "ОтправитьВАрхив";
КонецФункции

// Параметры:
//  РезультатОтправкиВАрхив - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьВАрхивДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтправкиВАрхивДокументовЭДО(РезультатОтправкиВАрхив, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтправкиВАрхив, РезультатДействий,
		Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	
КонецПроцедуры

#КонецОбласти

#Область ЗакрытьПринудительно

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаЗакрытияДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаЗакрытьДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаЗакрытияДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаЗакрытияДокументовЭДО()
	Возврат "Закрыть";
КонецФункции

// Параметры:
//  РезультатЗакрытия - см. СервисОблачногоЭДО.НовыйРезультатМетодаЗакрытьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаЗакрытияДокументовЭДО(РезультатЗакрытия, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатЗакрытия, РезультатДействий,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	
КонецПроцедуры

#КонецОбласти

#Область ВернутьВРаботу

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаВозвратаВРаботуДокументовЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ИдентификаторыДокументовЭДО = ПараметрыВыполнения.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаВернутьВРаботуДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаВозвратаВРаботуДокументовЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаВозвратаВРаботуДокументовЭДО()
	Возврат "ВернутьВРаботу";
КонецФункции

// Параметры:
//  РезультатВозвратаВРаботу - см. СервисОблачногоЭДО.НовыйРезультатМетодаВернутьВРаботуДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаВозвратаВРаботуДокументовЭДО(РезультатВозвратаВРаботу, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатВозвратаВРаботу, РезультатДействий,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ОбработкаДействийПоЭДО

#Область ПросмотрДокумента

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПакета
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента)
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(СвойстваДокумента.Ссылка);
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыПакета = ПакетыДокументовЭДОПовтИспНаВызов.ДокументыПакета(Строка(ИдентификаторПакета));
	
	ЕстьНеформализованныеДокументы = ЭлектронныеДокументыЭДО.ЕстьНеформализованныеДокументы(ЭлектронныеДокументыПакета);
	
	Если ЕстьНеформализованныеДокументы Тогда
		ДанныеКомпонента.АсинхронноеПолучение = Истина;
	Иначе
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПакета
//  СвойстваДокумента - Структура:
//  * Ссылка - Число
//  ИменаФайловОтправителейВФорматеСервиса - См. СервисОблачногоЭДО.НовыеИменаФайловОтправителейДокументовПакета
Процедура ЗаполнитьДанныеКомпонентаПанельПакетаАсинхронно(ДанныеКомпонента, СвойстваДокумента,
	ИменаФайловОтправителейВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(ИменаФайловОтправителейВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаФайловОтправителей = ИменаФайловОтправителейДокументовИзФорматаСервиса(ИменаФайловОтправителейВФорматеСервиса);
	
	ДанныеДокументовПакета = ЛегкийИнтерфейсДокументовЭДО.ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета(
		СвойстваДокумента, ИменаФайловОтправителей);
	Если ДанныеДокументовПакета <> Неопределено Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПакетаПоПараметрам(ДанныеКомпонента,
			ДанныеДокументовПакета);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельМаршрута
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  МаршрутПодписанияВФорматеСервиса - см. СервисОблачногоЭДО.НовыйРезультатМетодаМаршрутПодписанияДокумента
//  ОписаниеПодписейВФорматеСервиса - См. СервисОблачногоЭДО.НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельМаршрутаАсинхронно(ДанныеКомпонента, СвойстваДокумента,
	МаршрутПодписанияВФорматеСервиса, ОписаниеПодписейВФорматеСервиса)
	
	Если Не ЗначениеЗаполнено(МаршрутПодписанияВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.МаршрутПодписания = МаршрутПодписанияИзФорматаСервиса(МаршрутПодписанияВФорматеСервиса.Тип);
	ДанныеКомпонента.ПредставлениеМаршрута = МаршрутПодписанияВФорматеСервиса.Представление;
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
	
	ОписанияПодписей = ОписанияУстановленныхПодписейДокументаИзФорматаСервиса(ОписаниеПодписейВФорматеСервиса);
	ДанныеКомпонента.КоличествоПодписей = ОписанияПодписей.Количество();
	
	СостояниеПодписанияВФорматеСервиса = МаршрутПодписанияВФорматеСервиса.СостояниеПодписания;
	Если Не ЗначениеЗаполнено(СостояниеПодписанияВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаМаршрутаПодписания = ДанныеКомпонента.СхемаМаршрутаПодписания;
	
	ОрганизацииВФорматеСервиса = ОбщегоНазначения.ВыгрузитьКолонку(СостояниеПодписанияВФорматеСервиса, "Организация");
	ОрганизацииПоИдентификаторам = ОрганизацииИзФорматаСервиса(ОрганизацииВФорматеСервиса);
	
	ОтпечаткиСертификатов = ОбщегоНазначения.ВыгрузитьКолонку(СостояниеПодписанияВФорматеСервиса,
		"ОтпечатокСертификата");
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(ОтпечаткиСертификатов);
	
	МетаданныеТребованияКПодписаниюЭД = Метаданные.Перечисления.ТребованияКПодписаниюЭД;
	
	Для Каждого СвойстваСостоянияПодписания Из СостояниеПодписанияВФорматеСервиса Цикл
		
		ИдентификаторОрганизации = ИдентификаторУчастникаСделкиПоРеквизитам(СвойстваСостоянияПодписания.Организация);
		
		ЭлементСхемы = СхемаМаршрутаПодписания.Добавить();
		ЭлементСхемы.Идентификатор = СвойстваСостоянияПодписания.Идентификатор;
		ЭлементСхемы.ИдентификаторРодителя = СвойстваСостоянияПодписания.ИдентификаторРодителя;
		ЭлементСхемы.Порядок = СвойстваСостоянияПодписания.Порядок;
		ЭлементСхемы.ПредставлениеПодписанта = СвойстваСостоянияПодписания.ПредставлениеПодписанта;
		ЭлементСхемы.Сертификат = СертификатыПоОтпечаткам[СвойстваСостоянияПодписания.ОтпечатокСертификата];
		ЭлементСхемы.Организация = ОрганизацииПоИдентификаторам[ИдентификаторОрганизации];
		ЭлементСхемы.ЭтоТекущийПодписант = СвойстваСостоянияПодписания.ЭтоТекущийПодписант;
		ЭлементСхемы.Требование = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			СвойстваСостоянияПодписания.Требование, МетаданныеТребованияКПодписаниюЭД);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ТипМаршрута - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.МаршрутыПодписания
Функция МаршрутПодписанияИзФорматаСервиса(ТипМаршрута)
	
	Если ТипМаршрута = "ОднойДоступнойПодписью" Тогда
		Возврат Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	Иначе
		Возврат Справочники.МаршрутыПодписания.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ИменаФайловОтправителейВФорматеСервиса - См. СервисОблачногоЭДО.НовыеИменаФайловОтправителейДокументовПакета
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Строка
Функция ИменаФайловОтправителейДокументовИзФорматаСервиса(ИменаФайловОтправителейВФорматеСервиса)
	
	ИменаФайловОтправителей = Новый Соответствие;
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ИменаФайловОтправителейВФорматеСервиса,
		"ИдентификаторДокумента");
	
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	
	Для Каждого ИмяФайлаОтправителя Из ИменаФайловОтправителейВФорматеСервиса Цикл
		ЭлектронныйДокумент = ДокументыПоИдентификаторам[ИмяФайлаОтправителя.ИдентификаторДокумента];
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ИменаФайловОтправителей.Вставить(ЭлектронныйДокумент, ИмяФайлаОтправителя.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаФайловОтправителей;
	
КонецФункции

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельВизуализации
//  ВизуализацияВФорматеСервиса - См. СервисОблачногоЭДО.НовыеСвойстваВизуализацииДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализацииАсинхронно(ДанныеКомпонента,
	ВизуализацияВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(ВизуализацияВФорматеСервиса)
		Или Не ЗначениеЗаполнено(ВизуализацияВФорматеСервиса.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиВизуализации = ВизуализацияВФорматеСервиса.Настройки;
	
	ЗначениеНастройки = Неопределено;
	
	Если НастройкиВизуализации.Свойство("ВыводитьБанковскиеРеквизиты", ЗначениеНастройки) Тогда
		ДанныеКомпонента.ЕстьНастройкаВыводаБанковскихРеквизитов = Истина; 
		ДанныеКомпонента.ВыводитьБанковскиеРеквизиты = ЗначениеНастройки;
	КонецЕсли;
	
	Если НастройкиВизуализации.Свойство("ВыводитьДополнительныеДанные", ЗначениеНастройки) Тогда
		ДанныеКомпонента.ЕстьНастройкаВыводаДополнительныхДанных = Истина; 
		ДанныеКомпонента.ВыводитьДополнительныеДанные = ЗначениеНастройки;
	КонецЕсли;
	
	Если НастройкиВизуализации.Свойство("ВыводитьКопияВерна", ЗначениеНастройки) Тогда
		ДанныеКомпонента.ЕстьНастройкаНастройкаВыводаКопияВерна = Истина; 
		ДанныеКомпонента.ВыводитьКопияВерна = ЗначениеНастройки;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельВизуализации
//  ВизуализацияВФорматеСервиса - См. СервисОблачногоЭДО.НовыеСвойстваВизуализацииДокумента
//  НастройкиФормы - См. ЛегкийИнтерфейсДокументовЭДО.НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализацииАсинхронно(ДанныеКомпонента, ВизуализацияВФорматеСервиса,
	НастройкиФормы)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(ВизуализацияВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ВизуализацияДокумента = ВизуализацияДокументаИзФорматаСервиса(ВизуализацияВФорматеСервиса);
	
	ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализации(ДанныеКомпонента, ВизуализацияДокумента, 
		НастройкиФормы);
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  ПредварительныйПросмотр - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента, ПредварительныйПросмотр)
	
	Если ЗначениеЗаполнено(ПредварительныйПросмотр)
		И ЗначениеЗаполнено(ПредварительныйПросмотр.ИтогиДокумента) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(
			ДанныеКомпонента, СвойстваДокумента, ПредварительныйПросмотр.ИтогиДокумента);
	Иначе
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  ИтогиДокумента - См. СервисОблачногоЭДО.НовыеИтогиДокументаПоСодержанию
Процедура ЗаполнитьДанныеКомпонентаПанельИтоговАсинхронно(ДанныеКомпонента, СвойстваДокумента, ИтогиДокумента)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если ЗначениеЗаполнено(ИтогиДокумента) Тогда
		ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(
			ДанныеКомпонента, СвойстваДокумента, ИтогиДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПодписей
//  ОписаниеПодписейВФорматеСервиса - См. СервисОблачногоЭДО.НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельПодписейАсинхронно(ДанныеКомпонента, ОписаниеПодписейВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(ОписаниеПодписейВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияПодписей = ОписанияУстановленныхПодписейДокументаИзФорматаСервиса(ОписаниеПодписейВФорматеСервиса);
	
	ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонента, ОписанияПодписей);
	
КонецПроцедуры

// Параметры:
//  ОписаниеПодписейВФорматеСервиса - См. СервисОблачногоЭДО.НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
//  
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДО.НовыеОписанияУстановленныхПодписей
Функция ОписанияУстановленныхПодписейДокументаИзФорматаСервиса(ОписаниеПодписейВФорматеСервиса)
	
	ОписанияПодписей = ЛегкийИнтерфейсДокументовЭДО.НовыеОписанияУстановленныхПодписей();
	
	Для Каждого ОписаниеПодписиВФорматеСервиса Из ОписаниеПодписейВФорматеСервиса Цикл
		ОписаниеПодписи = ОписанияПодписей.Добавить();
		ОписаниеПодписи.ПодписанныйОбъект = ОписаниеПодписиВФорматеСервиса.ПодписанныйОбъект;
		ОписаниеПодписи.ПорядковыйНомер = ОписаниеПодписиВФорматеСервиса.ПорядковыйНомер;
		ОписаниеПодписи.Владелец = ОписаниеПодписиВФорматеСервиса.Владелец;
		ОписаниеПодписи.ДатаПодписи = ДатаИзФорматаСервиса(ОписаниеПодписиВФорматеСервиса.ДатаПодписи);
		ОписаниеПодписи.ДатаПроверкиПодписи = ДатаИзФорматаСервиса(ОписаниеПодписиВФорматеСервиса.ДатаПроверкиПодписи);
		ОписаниеПодписи.ДоверенностьПредставление = ОписаниеПодписиВФорматеСервиса.Владелец;
		ОписаниеПодписи.ПодписьВерна = ОписаниеПодписиВФорматеСервиса.ПодписьВерна;
		ОписаниеПодписи.ПодписьВернаПредставление = ОписаниеПодписиВФорматеСервиса.ПодписьВернаПредставление;
		ОписаниеПодписи.ЭтоВходящаяПодпись = ОписаниеПодписиВФорматеСервиса.ЭтоВходящаяПодпись;
		ОписаниеПодписи.ЭтоПодписьПоДоверенности = ОписаниеПодписиВФорматеСервиса.ЭтоПодписьПоДоверенности;
		ОписаниеПодписи.ПодписьПоДоверенностиВерна = ОписаниеПодписиВФорматеСервиса.ПодписьПоДоверенностиВерна;
		ОписаниеПодписи.ДоверенностьПроверенаУспешно = ОписаниеПодписиВФорматеСервиса.ДоверенностьПроверенаУспешно;
		ОписаниеПодписи.ПроверкаДоверенностиВыполненаВручную = 
			ОписаниеПодписиВФорматеСервиса.ПроверкаДоверенностиВыполненаВручную;
		ОписаниеПодписи.ПроверкаПолномочийВыполненаБезОшибок = 
			ОписаниеПодписиВФорматеСервиса.ПроверкаПолномочийВыполненаБезОшибок;
	КонецЦикла;
	
	Возврат ОписанияПодписей;
	
КонецФункции

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписиВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСопроводительныеЗаписиДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокументаАсинхронно(ДанныеКомпонента,
	СвойстваДокумента, СопроводительныеЗаписиВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(СопроводительныеЗаписиВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	СопроводительныеЗаписи = СопроводительныеЗаписиДокументаИзФорматаСервиса(СопроводительныеЗаписиВФорматеСервиса);
	ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента(
		ДанныеКомпонента, СвойстваДокумента, СопроводительныеЗаписи);
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписиВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСопроводительныеЗаписиДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокументаАсинхронно(ДанныеКомпонента,
	СвойстваДокумента, СопроводительныеЗаписиВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(СопроводительныеЗаписиВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
	СопроводительныеЗаписи = СопроводительныеЗаписиДокументаИзФорматаСервиса(СопроводительныеЗаписиВФорматеСервиса);
	ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(
		ДанныеКомпонента, СвойстваДокумента, СопроводительныеЗаписи);
	
КонецПроцедуры

// Параметры:
//  СопроводительныеЗаписиВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСопроводительныеЗаписиДокумента
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
Функция СопроводительныеЗаписиДокументаИзФорматаСервиса(СопроводительныеЗаписиВФорматеСервиса)
	
	СопроводительныеЗаписи = Новый ТаблицаЗначений;
	СопроводительныеЗаписи.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	СопроводительныеЗаписи.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СопроводительныеЗаписи.Колонки.Добавить("ДополнительнаяИнформация", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Для Каждого СопроводительнаяЗаписьВФорматеСервиса Из СопроводительныеЗаписиВФорматеСервиса Цикл
		СопроводительнаяЗапись = СопроводительныеЗаписи.Добавить();
		СопроводительнаяЗапись.Направление = НаправлениеИзФорматаСервиса(
			СопроводительнаяЗаписьВФорматеСервиса.Направление);
		СопроводительнаяЗапись.Дата = ДатаИзФорматаСервиса(СопроводительнаяЗаписьВФорматеСервиса.Дата);
		СопроводительнаяЗапись.ДополнительнаяИнформация = 
			СопроводительнаяЗаписьВФорматеСервиса.ДополнительнаяИнформация;
	КонецЦикла;
	
	Возврат СопроводительныеЗаписи;
	
КонецФункции

// Параметры:
//  СостояниеДокументаВФорматаСервиса - см. СостояниеДокументаИзФорматаСервиса.СостояниеДокументаВФорматаСервиса
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СостоянияДокументовЭДО.НовоеСостояниеДокументаПолное
Функция СостояниеДокументаИзФорматаСервиса(СостояниеДокументаВФорматаСервиса)
	
	СостояниеДокументаПолное = РегистрыСведений.СостоянияДокументовЭДО.НовоеСостояниеДокументаПолное();
	СостояниеПоИмени = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
		СостояниеДокументаВФорматаСервиса.ИмяСостояния, Метаданные.Перечисления.СостоянияДокументовЭДО); // ПеречислениеСсылка.СостоянияДокументовЭДО
	СостояниеДокументаПолное.Состояние = СостояниеПоИмени;
	СостояниеДокументаПолное.Дополнение = СостояниеДокументаВФорматаСервиса.Дополнение;
	СостояниеДокументаПолное.ДатаИзменения = ДатаИзФорматаСервиса(СостояниеДокументаВФорматаСервиса.ДатаИзменения);
	СостояниеДокументаПолное.Комментарий = СостояниеДокументаВФорматаСервиса.Комментарий;
	
	Возврат СостояниеДокументаПолное;
	
КонецФункции

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента
//  ОписаниеПодписейВФорматеСервиса - См. СервисОблачногоЭДО.НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
//  СопроводительныеЗаписиВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСопроводительныеЗаписиДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокументаАсинхронно(ДанныеКомпонента,
	ОписаниеПодписейВФорматеСервиса, СопроводительныеЗаписиВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если ЗначениеЗаполнено(ОписаниеПодписейВФорматеСервиса) Тогда
		ДанныеКомпонента.КоличествоПодписей = ОписаниеПодписейВФорматеСервиса.Количество();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СопроводительныеЗаписиВФорматеСервиса) Тогда
		ДанныеКомпонента.КоличествоСопроводительныхЗаписок = СопроводительныеЗаписиВФорматеСервиса.Количество();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ОписаниеПодписейВФорматеСервиса - См. СервисОблачногоЭДО.НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
//  СопроводительныеЗаписиВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСопроводительныеЗаписиДокумента
//  МаршрутПодписанияВФорматеСервиса - см. СервисОблачногоЭДО.НовыйРезультатМетодаМаршрутПодписанияДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокументаАсинхронно(ДанныеКомпонента, СвойстваДокумента,
	ОписаниеПодписейВФорматеСервиса, СопроводительныеЗаписиВФорматеСервиса, МаршрутПодписанияВФорматеСервиса)
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
	
	Если ЗначениеЗаполнено(ОписаниеПодписейВФорматеСервиса) Тогда
		ДанныеКомпонента.КоличествоПодписей = ОписаниеПодписейВФорматеСервиса.Количество();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СопроводительныеЗаписиВФорматеСервиса) Тогда
		ДанныеКомпонента.КоличествоСопроводительныхЗаписок = СопроводительныеЗаписиВФорматеСервиса.Количество();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаршрутПодписанияВФорматеСервиса) Тогда
		ДанныеКомпонента.ПредставлениеПрогрессаПодписания = МаршрутПодписанияВФорматеСервиса.ПредставлениеПрогресса;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭтоВходящийЭДО - Булево
//  * ЭтоОблачныйЭДО - Булево
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторДокумента - Строка
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * НаОзнакомлении - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ЭтапПодписанияОтсутствует - Булево
//
Функция РеквизитыАктуальныхДокументовДляПросмотраСтатусов(ОбъектыУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ПОМЕСТИТЬ ОбъектыУчетаДокументовЭДО
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ОбъектыУчета)
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ИСТИНА КАК ЭтоВходящийЭДО,
		|	ЭлектронныйДокументВходящийЭДО.ЭтоОблачныйЭДО КАК ЭтоОблачныйЭДО,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении
		|ИЗ
		|	ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ЛОЖЬ,
		|	ЭлектронныйДокументИсходящийЭДО.ЭтоОблачныйЭДО,
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении
		|ИЗ
		|	ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ЭлектронныйДокументИсходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка";
	
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	
	РеквизитыАктуальныхДокументов = Запрос.Выполнить().Выгрузить();
	РеквизитыАктуальныхДокументов.Колонки.Добавить("СостояниеЭДО",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументовЭДО"));
	РеквизитыАктуальныхДокументов.Колонки.Добавить("ЭтапПодписанияОтсутствует", Новый ОписаниеТипов("Булево"));
	
	Возврат РеквизитыАктуальныхДокументов;
	
КонецФункции

// Параметры:
//  РеквизитыАктуальныхДокументов - см. РеквизитыАктуальныхДокументовДляПросмотраСтатусов
//  СостоянияДокументовЭДОВФорматеСервиса - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * ИмяСостояния - Строка
//  * Дополнение - Строка
//  * ДатаИзменения - Дата
//  * Комментарий - Строка
// 
Процедура ЗаполнитьСостоянияАктуальныхДокументов(РеквизитыАктуальныхДокументов, СостоянияДокументовЭДОВФорматеСервиса)
	
	МетеданныеСостоянияДокументовЭДО = Метаданные.Перечисления.СостоянияДокументовЭДО;
	
	Для Каждого СостояниеВФорматеСервиса Из СостоянияДокументовЭДОВФорматеСервиса Цикл
		
		РеквизитыДокумента = РеквизитыАктуальныхДокументов.Найти(СостояниеВФорматеСервиса.ИдентификаторДокумента,
			"ИдентификаторДокумента");
		Если РеквизитыДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеПоИмени = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			СостояниеВФорматеСервиса.ИмяСостояния, МетеданныеСостоянияДокументовЭДО); // ПеречислениеСсылка.СостоянияДокументовЭДО
		РеквизитыДокумента.СостояниеЭДО = СостояниеПоИмени;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОписанияЭлектронныхДокументовПоОбъектуУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  НастройкиФормирования - см. НовыеНастройкиФормированияДокументовЭДО
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * ДоговорКонтрагента - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НетНастройки - Булево
//  * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция РезультатыПоискаНастроекПоОбъектамУчета(ОписанияЭлектронныхДокументовПоОбъектуУчета, НастройкиФормирования)
	
	РезультатыПоискаНастроек = НовыеРезультатыПоискаНастроекПоОбъектамУчета();
	
	ТипыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(НастройкиФормирования, "ТипДокумента", Истина);
	ВидыДокументовПоТипам = ИнтерфейсДокументовЭДО.ВидыДокументовПоСтандартнымТипам(ТипыДокументов);
	
	ОбъектыУчета = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияЭлектронныхДокументовПоОбъектуУчета, "ОбъектУчета", Истина);
	ИдентификаторыОбъектовУчета = ОбщегоНазначенияБЭД.ИдентификаторыОбъектовМетаданных(ОбъектыУчета);
	
	ИменаРеквизитовОтбора = "Организация, Контрагент, Договор, ТипДокумента";
	Отбор = Новый Структура(ИменаРеквизитовОтбора);
	
	Для Каждого ОписаниеДокумента Из ОписанияЭлектронныхДокументовПоОбъектуУчета Цикл
		
		НетНастройки = Ложь;
		
		ЗаполнитьЗначенияСвойств(Отбор, ОписаниеДокумента);
		НайденныеНастройки = НастройкиФормирования.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(НайденныеНастройки)
			ИЛИ Не НайденныеНастройки[0].ЕстьНастройка Тогда
			НетНастройки = Истина;
		КонецЕсли;
		
		РезультатПоискаНастройки = РезультатыПоискаНастроек.Добавить();
		РезультатПоискаНастройки.ОбъектУчета = ОписаниеДокумента.ОбъектУчета;
		РезультатПоискаНастройки.ТипДокумента = ОписаниеДокумента.ТипДокумента;
		РезультатПоискаНастройки.ВидДокумента = ВидыДокументовПоТипам[ОписаниеДокумента.ТипДокумента];
		РезультатПоискаНастройки.Организация = ОписаниеДокумента.Организация;
		РезультатПоискаНастройки.Контрагент = ОписаниеДокумента.Контрагент;
		РезультатПоискаНастройки.ДоговорКонтрагента = ОписаниеДокумента.Договор;
		РезультатПоискаНастройки.НетНастройки = НетНастройки;
		РезультатПоискаНастройки.ИдентификаторОбъекта = ИдентификаторыОбъектовУчета[ОписаниеДокумента.ОбъектУчета];
		
	КонецЦикла;
	
	Возврат РезультатыПоискаНастроек;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
// * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// * Организация - ОпределяемыйТип.Организация
// * Контрагент - ОпределяемыйТип.УчастникЭДО
// * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * НетНастройки - Булево
// * ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция НовыеРезультатыПоискаНастроекПоОбъектамУчета()
	ОписаниеТипаОбъектаУчета = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументовЭДО.Тип;
	ОписаниеТипаОрганизация  = Метаданные.ОпределяемыеТипы.Организация.Тип;
	ОписаниеТипаКонтрагент = Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип;
	ОписаниеТипаДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип;
	
	РезультатыПоискаНастроек = Новый ТаблицаЗначений;
	РезультатыПоискаНастроек.Колонки.Добавить("ОбъектУчета", ОписаниеТипаОбъектаУчета);
	РезультатыПоискаНастроек.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	РезультатыПоискаНастроек.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	РезультатыПоискаНастроек.Колонки.Добавить("Контрагент", ОписаниеТипаКонтрагент);
	РезультатыПоискаНастроек.Колонки.Добавить("ДоговорКонтрагента", ОписаниеТипаДоговорКонтрагента);
	РезультатыПоискаНастроек.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	РезультатыПоискаНастроек.Колонки.Добавить("НетНастройки", Новый ОписаниеТипов("Булево"));
	РезультатыПоискаНастроек.Колонки.Добавить("ИдентификаторОбъекта",
		Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Возврат РезультатыПоискаНастроек;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ОписаниеДокументаЭДО - см. НовоеОписаниеДокументаЭДО
//  * ОсновнойФайл - Структура:
//  ** ИмяФайла - Строка
//  ** Данные - Строка
//  * ДополнительныйФайл - Неопределено
//                       - Структура:
//  ** ИмяФайла - Строка
//  ** Данные - Строка
//  * Визуализация - см. РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
Функция НовыеДанныеПредварительногоПросмотра()
	Данные = Новый Структура;
	Данные.Вставить("Ошибка", Ложь);
	Данные.Вставить("КонтекстДиагностики", Новый Структура);
	Данные.Вставить("ОписаниеДокументаЭДО", Новый Структура);
	Данные.Вставить("ОсновнойФайл", Новый Структура);
	Данные.Вставить("ДополнительныйФайл", Неопределено);
	Данные.Вставить("Визуализация", Новый Структура);
	Возврат Данные;
КонецФункции

// Параметры:
//  СвойстваВизуализацииВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСвойстваВизуализацииДокумента
// 
// Возвращаемое значение:
//  См. РегистрСведенийМенеджер.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
Функция ВизуализацияДокументаИзФорматаСервиса(СвойстваВизуализацииВФорматеСервиса)
	СвойстваВизуализации = РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации();
	Если СвойстваВизуализацииВФорматеСервиса.ТипДанных = "ИмяФайла" Тогда
		СвойстваВизуализации.Данные = СвойстваВизуализацииВФорматеСервиса.Данные;
		СвойстваВизуализации.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ИмяФайла;
	Иначе
		ДвоичныеДанные = Base64Значение(СвойстваВизуализацииВФорматеСервиса.Данные);
		СвойстваВизуализации.Данные = ТабличныйДокументИзДвоичныхДанных(ДвоичныеДанные);
		СвойстваВизуализации.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ТабличныйДокумент;
	КонецЕсли;
	СвойстваВизуализации.ВерсияДанных = СвойстваВизуализацииВФорматеСервиса.ВерсияДанных;
	СвойстваВизуализации.ИдентификаторПравила = СвойстваВизуализацииВФорматеСервиса.ИдентификаторПравила;
	Если ЗначениеЗаполнено(СвойстваВизуализацииВФорматеСервиса.ДатаОбновленияПравила) Тогда
		СвойстваВизуализации.ДатаОбновленияПравила = ДатаИзФорматаСервиса(
			СвойстваВизуализацииВФорматеСервиса.ДатаОбновленияПравила);
	КонецЕсли;
	Возврат СвойстваВизуализации;
КонецФункции

#КонецОбласти

#Область Подписи

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПорядковыйНомер - Число
//  * ПодписьВерна - Булево
//  * ДатаПроверки - Дата
//  * ДатаПодписи - Дата
//  * ОтветнаяПодпись - Булево
//  * ПредставлениеСертификата - Строка
//  * ПредставлениеСтатуса - Строка
Функция НовыйНаборОписанийУстановленныхПодписей()
	Набор = Новый ТаблицаЗначений;
	Набор.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Набор.Колонки.Добавить("ПодписьВерна", Новый ОписаниеТипов("Булево"));
	Набор.Колонки.Добавить("ДатаПроверки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Набор.Колонки.Добавить("ДатаПодписи", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Набор.Колонки.Добавить("ОтветнаяПодпись", Новый ОписаниеТипов("Булево"));
	Набор.Колонки.Добавить("ПредставлениеСертификата", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Набор.Колонки.Добавить("ПредставлениеСтатуса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Возврат Набор;
КонецФункции

// Параметры:
//  ОписанияПодписейВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * ПодписьВерна - Булево
//  * ДатаПроверки - Дата
//  * ДатаПодписи - Дата
//  * ОтветнаяПодпись - Булево
//  * ПредставлениеСертификата - Строка
//  * ПредставлениеСтатуса - Строка
//
// Возвращаемое значение:
//  См. НовыйНаборОписанийУстановленныхПодписей
Функция ОписанияУстановленныхПодписейИзФорматаСервиса(ОписанияПодписейВФорматеСервиса)
	
	НаборОписанийПодписей = НовыйНаборОписанийУстановленныхПодписей();
	
	Для Каждого ОписаниеПодписиВФорматеСервиса Из ОписанияПодписейВФорматеСервиса Цикл
		
		ОписаниеПодписи = НаборОписанийПодписей.Добавить();
		ОписаниеПодписи.Идентификатор = ОписаниеПодписиВФорматеСервиса.Идентификатор;
		ОписаниеПодписи.ПодписьВерна = ОписаниеПодписиВФорматеСервиса.ПодписьВерна;
		ОписаниеПодписи.ДатаПроверки = ДатаИзФорматаСервиса(ОписаниеПодписиВФорматеСервиса.ДатаПроверки);
		ОписаниеПодписи.ДатаПодписи = ДатаИзФорматаСервиса(ОписаниеПодписиВФорматеСервиса.ДатаПодписи);
		ОписаниеПодписи.ОтветнаяПодпись = ОписаниеПодписиВФорматеСервиса.ОтветнаяПодпись;
		ОписаниеПодписи.ПредставлениеСертификата = ОписаниеПодписиВФорматеСервиса.ПредставлениеСертификата;
		ОписаниеПодписи.ПредставлениеСтатуса = ОписаниеПодписиВФорматеСервиса.ПредставлениеСтатуса;
		
	КонецЦикла;
	
	Возврат НаборОписанийПодписей;
	
КонецФункции

#КонецОбласти

#Область КонвертацияИсходящихДанных

// Возвращаемое значение:
//  ТаблицаЗначений - Новые ключевые реквизиты организаций:
//  * Организация - ОпределяемыйТип.Организация
//  * ИНН - Строка
//  * КПП - Строка
Функция НовыеКлючевыеРеквизитыОрганизаций()
	КлючевыеРеквизитыОрганизаций = Новый ТаблицаЗначений();
	КлючевыеРеквизитыОрганизаций.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	КлючевыеРеквизитыОрганизаций.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	КлючевыеРеквизитыОрганизаций.Колонки.Добавить("КПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Возврат КлючевыеРеквизитыОрганизаций;
КонецФункции

// Параметры:
//  Организации - Массив из ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовОрганизаций.КлючевыеРеквизитыОрганизаций
Функция КлючевыеРеквизитыОрганизаций(Организации)
	КлючевыеРеквизитыОрганизаций = НовыеКлючевыеРеквизитыОрганизаций();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(КлючевыеРеквизитыОрганизаций, Организации, "Организация");
	ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовОрганизаций(КлючевыеРеквизитыОрганизаций);
	Возврат КлючевыеРеквизитыОрганизаций;
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новые ключевые реквизиты контрагентов:
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * Наименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
Функция НовыеКлючевыеРеквизитыКонтрагентов()
	КлючевыеРеквизитыКонтрагентов = Новый ТаблицаЗначений();
	КлючевыеРеквизитыКонтрагентов.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	КлючевыеРеквизитыКонтрагентов.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	КлючевыеРеквизитыКонтрагентов.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	КлючевыеРеквизитыКонтрагентов.Колонки.Добавить("КПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Возврат КлючевыеРеквизитыКонтрагентов;
КонецФункции

// Параметры:
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентБЭД
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовКонтрагентов.КлючевыеРеквизитыКонтрагентов
Функция КлючевыеРеквизитыКонтрагентов(Контрагенты)
	КлючевыеРеквизитыКонтрагентов = НовыеКлючевыеРеквизитыКонтрагентов();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(КлючевыеРеквизитыКонтрагентов, Контрагенты, "Контрагент");
	ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовКонтрагентов(КлючевыеРеквизитыКонтрагентов);
	Возврат КлючевыеРеквизитыКонтрагентов;
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новые ключевые реквизиты договоров:
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * Наименование - Строка
//  * Номер - Строка
//  * Дата - Дата
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
Функция НовыеКлючевыеРеквизитыДоговоров()
	КлючевыеРеквизитыДоговоров = Новый ТаблицаЗначений();
	КлючевыеРеквизитыДоговоров.Колонки.Добавить("Договор", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
	КлючевыеРеквизитыДоговоров.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КлючевыеРеквизитыДоговоров.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючевыеРеквизитыДоговоров.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КлючевыеРеквизитыДоговоров.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	КлючевыеРеквизитыДоговоров.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	Возврат КлючевыеРеквизитыДоговоров;
КонецФункции

// Параметры:
//  Договора - Массив из ОпределяемыйТип.ДоговорСКонтрагентомЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовДоговоров.КлючевыеРеквизитыДоговоров
Функция КлючевыеРеквизитыДоговоров(Договора)
	КлючевыеРеквизитыДоговоров = НовыеКлючевыеРеквизитыДоговоров();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(КлючевыеРеквизитыДоговоров, Договора, "Договор");
	ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовДоговоров(КлючевыеРеквизитыДоговоров);
	Возврат КлючевыеРеквизитыДоговоров;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Отправитель - См. НовыйКлючУчастникаОблачногоЭДО
//  * Получатель - Неопределено
//               - См. НовыйКлючУчастникаОблачногоЭДО
//  * Договор - Неопределено
//            - См. НовыйКлючДоговораОблачногоЭДО
//  * ВидДокумента - См. НовыйКлючВидаДокументаОблачногоЭДО
Функция НовыйКлючНастройкиВФорматеСервиса()
	Ключ = Новый Структура;
	Ключ.Вставить("Отправитель", Новый Структура);
	Ключ.Вставить("Получатель", Неопределено);
	Ключ.Вставить("Договор", Неопределено);
	Ключ.Вставить("ВидДокумента", Новый Структура);
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * ИНН - Строка
// * КПП - Строка
Функция НовыйКлючУчастникаОблачногоЭДО()
	Ключ = Новый Структура;
	Ключ.Вставить("ИНН", "");
	Ключ.Вставить("КПП", "");
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Наименование - Строка
// * ИНН - Строка
// * КПП - Строка
Функция НовыйКонтрагентВФорматеСервиса()
	Контрагент = Новый Структура;
	Контрагент.Вставить("Наименование", "");
	Контрагент.Вставить("ИНН", "");
	Контрагент.Вставить("КПП", "");
	Возврат Контрагент;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Наименование - Строка
// * Номер - Строка
// * Дата - Дата
// * Сторона1 - См. НовыйКлючУчастникаОблачногоЭДО
// * Сторона2 - См. НовыйКлючУчастникаОблачногоЭДО
Функция НовыйКлючДоговораОблачногоЭДО()
	Ключ = Новый Структура;
	Ключ.Вставить("Наименование", "");
	Ключ.Вставить("Номер", "");
	Ключ.Вставить("Дата", '00010101');
	Ключ.Вставить("Сторона1", Новый Структура);
	Ключ.Вставить("Сторона2", Новый Структура);
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Наименование - Строка
// * ИмяТипаДокумента - Строка
Функция НовыйКлючВидаДокументаОблачногоЭДО()
	Ключ = Новый Структура;
	Ключ.Вставить("Наименование", "");
	Ключ.Вставить("ИмяТипаДокумента", "");
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - См. НовыйКлючУчастникаОблачногоЭДО
//  * Получатель        - См. НовыйКлючУчастникаОблачногоЭДО
//  * Договор           - Неопределено
//                      - См. НовыйКлючДоговораОблачногоЭДО
//  * ВидДокумента      - См. НовыйКлючВидаДокументаОблачногоЭДО
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Формат            - Строка - формат, в который конвертируются учетные данные.
//  * УчетныеДанные     - Структура:
//  ** Данные - См. ДеревоУчетныхДанныхВСтруктуру
//  ** Формат - Строка - формат учетных данных.
Функция НовыеДанныеДляФормированияДокументаВОблачномЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("Отправитель", Новый Структура);
	Данные.Вставить("Получатель", Новый Структура);
	Данные.Вставить("Договор", Неопределено);
	Данные.Вставить("ВидДокумента", Новый Структура);
	Данные.Вставить("ИдентификаторОтправителя", "");
	Данные.Вставить("ИдентификаторПолучателя", "");
	Данные.Вставить("ТребуетсяОтветнаяПодпись", Ложь);
	Данные.Вставить("ТребуетсяИзвещениеОПолучении", Ложь);
	Данные.Вставить("Формат", "");
	Данные.Вставить("УчетныеДанные", Новый Структура);
	Данные.УчетныеДанные.Вставить("Данные", Новый Структура);
	Данные.УчетныеДанные.Вставить("Формат", "");
	Возврат Данные;
КонецФункции

// Параметры:
//  ОбщиеРеквизитыДокументов - ТаблицаЗначений,Массив из Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовыйКлючНастройкиВФорматеСервиса
Функция КлючиНастроекВФорматеСервиса(ОбщиеРеквизитыДокументов)
	
	Результат = Новый Массив; // см. КлючиНастроекВФорматеСервиса
	
	Организации = Новый Массив;
	Контрагенты = Новый Массив;
	Договора = Новый Массив;
	ВидыДокументов = Новый Массив;
	
	Для Каждого РеквизитыДокумента Из ОбщиеРеквизитыДокументов Цикл
		ДобавитьУникальноеЗначение(Организации, РеквизитыДокумента.Организация);
		ДобавитьУникальноеЗначение(Контрагенты, РеквизитыДокумента.Контрагент);
		ДобавитьУникальноеЗначение(Договора, РеквизитыДокумента.Договор);
		ДобавитьУникальноеЗначение(ВидыДокументов, РеквизитыДокумента.ВидДокумента);
	КонецЦикла;
	
	КлючевыеРеквизитыОрганизаций = КлючевыеРеквизитыОрганизаций(Организации);
	КлючевыеРеквизитыКонтрагентов = КлючевыеРеквизитыКонтрагентов(Контрагенты);
	КлючевыеРеквизитыДоговоров = КлючевыеРеквизитыДоговоров(Договора);
	
	РеквизитыВидовДокументов = РеквизитыВидовДокументовДляКонвертацииВФорматСервиса(ВидыДокументов);
	
	Для Каждого РеквизитыДокумента Из ОбщиеРеквизитыДокументов Цикл
		
		КлючНастройкиВФорматеСервиса = НовыйКлючНастройкиВФорматеСервиса();
		
		РеквизитыОрганизации = КлючевыеРеквизитыОрганизаций.Найти(РеквизитыДокумента.Организация, "Организация");
		Если ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
			КлючНастройкиВФорматеСервиса.Отправитель = НовыйКлючУчастникаОблачногоЭДО();
			ЗаполнитьЗначенияСвойств(КлючНастройкиВФорматеСервиса.Отправитель, РеквизитыОрганизации);
		КонецЕсли;
		
		РеквизитыКонтрагента = КлючевыеРеквизитыКонтрагентов.Найти(РеквизитыДокумента.Контрагент, "Контрагент");
		Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
			КлючНастройкиВФорматеСервиса.Получатель = НовыйКлючУчастникаОблачногоЭДО();
			ЗаполнитьЗначенияСвойств(КлючНастройкиВФорматеСервиса.Получатель, РеквизитыКонтрагента);
		КонецЕсли;
		
		РеквизитыДоговора = КлючевыеРеквизитыДоговоров.Найти(РеквизитыДокумента.Договор, "Договор");
		Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
			КлючДоговора = НовыйКлючДоговораОблачногоЭДО();
			ЗаполнитьЗначенияСвойств(КлючДоговора, РеквизитыДоговора);
			
			РеквизитыОрганизации = КлючевыеРеквизитыОрганизаций.Найти(РеквизитыДоговора.Организация, "Организация");
			Если ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
				КлючДоговора.Сторона1 = НовыйКлючУчастникаОблачногоЭДО();
				ЗаполнитьЗначенияСвойств(КлючДоговора.Сторона1, РеквизитыОрганизации);
			КонецЕсли;
			
			РеквизитыКонтрагента = КлючевыеРеквизитыКонтрагентов.Найти(РеквизитыДоговора.Контрагент, "Контрагент");
			Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
				КлючДоговора.Сторона2 = НовыйКлючУчастникаОблачногоЭДО();
				ЗаполнитьЗначенияСвойств(КлючДоговора.Сторона2, РеквизитыКонтрагента);
			КонецЕсли;
			
			КлючНастройкиВФорматеСервиса.Договор = КлючДоговора;
		КонецЕсли;
		
		КлючВидаДокумента = НовыйКлючВидаДокументаОблачногоЭДО();
		РеквизитыВидаДокумента = РеквизитыВидовДокументов[РеквизитыДокумента.ВидДокумента];
		КлючВидаДокумента.Наименование = РеквизитыВидаДокумента.Наименование;
		КлючВидаДокумента.ИмяТипаДокумента = ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыВидаДокумента.ТипДокумента);
		КлючНастройкиВФорматеСервиса.ВидДокумента = КлючВидаДокумента;
		
		Результат.Добавить(КлючНастройкиВФорматеСервиса);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.ВидыДокументовЭДО
//  * Значение - Структура:
//  ** Наименование - Строка
//  ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Функция РеквизитыВидовДокументовДляКонвертацииВФорматСервиса(ВидыДокументов)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыДокументов, "Наименование, ТипДокумента");
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из Строка
//
Функция ИдентификаторыДокументовПоОрганизациям(ЭлектронныеДокументы)
	
	Результат = Новый Соответствие; // см. ИдентификаторыДокументовПоОрганизациям
	
	Если Не ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокумент.Организация КАК Организация
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|	И ЭлектронныйДокумент.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокумент.Организация КАК Организация
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|	И ЭлектронныйДокумент.Ссылка В (&ЭлектронныеДокументы)";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИдентификаторыДокументов = Результат[Выборка.Организация];
		Если ИдентификаторыДокументов = Неопределено Тогда
			ИдентификаторыДокументов = Новый Массив;
			Результат.Вставить(Выборка.Организация, ИдентификаторыДокументов);
		КонецЕсли;
		ИдентификаторДокумента = Выборка.ИдентификаторДокумента; // Строка
		ИдентификаторыДокументов.Добавить(ИдентификаторДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонвертацияВходящихДанных

// Параметры:
//  РеквизитыУчастника - СтрокаТаблицыЗначений,Структура:
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторУчастникаСделкиПоРеквизитам(РеквизитыУчастника)
	Если ЗначениеЗаполнено(РеквизитыУчастника) Тогда
		Возврат РеквизитыУчастника.ИНН + "_" + РеквизитыУчастника.КПП;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Параметры:
//  ОрганизацииВФорматеСервиса - Массив из Структура:
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - см. ИдентификаторУчастникаСделкиПоРеквизитам
//  * Значение - ОпределяемыйТип.Организация
Функция ОрганизацииИзФорматаСервиса(ОрганизацииВФорматеСервиса)
	
	Результат = Новый Соответствие;
	
	КлючевыеРеквизитыОрганизаций = НовыеКлючевыеРеквизитыОрганизаций();
	ПустаяСсылкаОрганизации = ИнтеграцияЭДО.ПустаяСсылкаОрганизации();
	
	Для Каждого ОрганизацияВФорматеСервиса Из ОрганизацииВФорматеСервиса Цикл
		Идентификатор = ИдентификаторУчастникаСделкиПоРеквизитам(ОрганизацияВФорматеСервиса);
		Если Результат[Идентификатор] = Неопределено Тогда
			Результат.Вставить(Идентификатор, ПустаяСсылкаОрганизации);
			ЗаполнитьЗначенияСвойств(КлючевыеРеквизитыОрганизаций.Добавить(), ОрганизацияВФорматеСервиса);
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииОрганизацийПоКлючевымРеквизитам(КлючевыеРеквизитыОрганизаций);
	
	Для Каждого РеквизитыОрганизации Из КлючевыеРеквизитыОрганизаций Цикл
		Идентификатор = ИдентификаторУчастникаСделкиПоРеквизитам(РеквизитыОрганизации);
		Результат.Вставить(Идентификатор, РеквизитыОрганизации.Организация);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  КонтрагентыВФорматеСервиса  - Массив из Структура:
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - см. ИдентификаторУчастникаСделкиПоРеквизитам
//  * Значение - ОпределяемыйТип.КонтрагентБЭД
Функция КонтрагентыИзФорматаСервиса(КонтрагентыВФорматеСервиса)
	
	Результат = Новый Соответствие;
	
	КлючевыеРеквизитыКонтрагентов = НовыеКлючевыеРеквизитыКонтрагентов();
	ПустаяСсылкаКонтрагента = ИнтеграцияЭДО.ПустаяСсылкаКонтрагента();
	
	Для Каждого КонтрагентВФорматеСервиса Из КонтрагентыВФорматеСервиса Цикл
		Идентификатор = ИдентификаторУчастникаСделкиПоРеквизитам(КонтрагентВФорматеСервиса);
		Если Результат[Идентификатор] = Неопределено Тогда
			Результат.Вставить(Идентификатор, ПустаяСсылкаКонтрагента);
			ЗаполнитьЗначенияСвойств(КлючевыеРеквизитыКонтрагентов.Добавить(), КонтрагентВФорматеСервиса);
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКонтрагентовПоКлючевымРеквизитам(КлючевыеРеквизитыКонтрагентов);
	
	Для Каждого РеквизитыКонтрагента Из КлючевыеРеквизитыКонтрагентов Цикл
		Идентификатор = ИдентификаторУчастникаСделкиПоРеквизитам(РеквизитыКонтрагента);
		Результат.Вставить(Идентификатор, РеквизитыКонтрагента.Контрагент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  КлючевыеРеквизитыКонтрагентов - см. КлючевыеРеквизитыКонтрагентов
//  Отбор - Структура:
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - ОпределяемыйТип.УчастникЭДО
Функция КонтрагентПоКлючевымРеквизитам(КлючевыеРеквизитыКонтрагентов, Отбор)
	КлючевыеРеквизитыКонтрагента = КлючевыеРеквизитыКонтрагентов.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(КлючевыеРеквизитыКонтрагента) Тогда
		Возврат КлючевыеРеквизитыКонтрагента[0].Контрагент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Параметры:
//  РеквизитыДоговора - Структура:
//  * Наименование - Строка
//  * Номер - Строка
//  * Дата - Строка - дата формате ISO.
//  * Организация - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Контрагент - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторДоговораПоРеквизитам(РеквизитыДоговора)
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		Возврат СтрШаблон("%1_%2_%3_%4_%5", РеквизитыДоговора.Наименование, РеквизитыДоговора.Номер, РеквизитыДоговора.Дата,
			ИдентификаторУчастникаСделкиПоРеквизитам(РеквизитыДоговора.Организация),
			ИдентификаторУчастникаСделкиПоРеквизитам(РеквизитыДоговора.Контрагент))
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Параметры:
//  ДоговорыВФорматеСервиса - Массив из Структура:
//  * Наименование - Строка
//  * Номер - Строка
//  * Дата - Строка - дата формате ISO.
//  * Организация - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Контрагент - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  ОрганизацииПоИдентификаторам - см. ОрганизацииИзФорматаСервиса
//  КонтрагентыПоИдентификаторам - см. КонтрагентыИзФорматаСервиса
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовДоговоров.КлючевыеРеквизитыДоговоров
Функция ДоговорыИзФорматаСервиса(ДоговорыВФорматеСервиса, ОрганизацииПоИдентификаторам, КонтрагентыПоИдентификаторам)
	
	КлючевыеРеквизитыДоговоров = НовыеКлючевыеРеквизитыДоговоров();
	
	ШаблонИдентификатора = "%1_%2_%3_%4_%5";
	
	ИдентификаторыДоговоров = Новый Соответствие;
	
	Для Каждого ДоговорВФорматеСервиса Из ДоговорыВФорматеСервиса Цикл
		
		Дата = ДатаИзФорматаСервиса(ДоговорВФорматеСервиса.Дата);
		ИдентификаторОрганизации = ИдентификаторУчастникаСделкиПоРеквизитам(ДоговорВФорматеСервиса.Организация);
		Организация = ОрганизацииПоИдентификаторам[ИдентификаторОрганизации];
		ИдентификаторКонтрагента = ИдентификаторУчастникаСделкиПоРеквизитам(ДоговорВФорматеСервиса.Контрагент);
		Контрагент = КонтрагентыПоИдентификаторам[ИдентификаторКонтрагента];
		
		Идентификатор = СтрШаблон(ШаблонИдентификатора,
			ДоговорВФорматеСервиса.Наименование,
			ДоговорВФорматеСервиса.Номер,
			Дата,
			Организация,
			Контрагент);
		
		Если ИдентификаторыДоговоров[Идентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторПоРеквизитамВФорматеСервиса = ИдентификаторДоговораПоРеквизитам(ДоговорВФорматеСервиса);
		ИдентификаторыДоговоров.Вставить(Идентификатор, ИдентификаторПоРеквизитамВФорматеСервиса);
		
		РеквизитыДоговора = КлючевыеРеквизитыДоговоров.Добавить();
		РеквизитыДоговора.Наименование = ДоговорВФорматеСервиса.Наименование;
		РеквизитыДоговора.Номер = ДоговорВФорматеСервиса.Номер;
		РеквизитыДоговора.Дата = ДатаИзФорматаСервиса(ДоговорВФорматеСервиса.Дата);
		РеквизитыДоговора.Организация = Организация;
		РеквизитыДоговора.Контрагент = Контрагент;
		
	КонецЦикла;
	
	КлючевыеРеквизитыДоговоров.Свернуть("Договор, Наименование, Номер, Дата, Организация, Контрагент");
	
	ИнтеграцияОблачногоЭДОПереопределяемый.ПриЗаполненииКлючевыхРеквизитовДоговоров(КлючевыеРеквизитыДоговоров);
	
	Результат = Новый Соответствие;
	Для Каждого РеквизитыДоговора Из КлючевыеРеквизитыДоговоров Цикл
		
		Идентификатор = СтрШаблон(ШаблонИдентификатора,
			РеквизитыДоговора.Наименование,
			РеквизитыДоговора.Номер,
			РеквизитыДоговора.Дата,
			РеквизитыДоговора.Организация,
			РеквизитыДоговора.Контрагент);
		
		ИдентификаторПоРеквизитамВФорматеСервиса = ИдентификаторыДоговоров[Идентификатор]; // Строка
		
		Результат.Вставить(ИдентификаторПоРеквизитамВФорматеСервиса, РеквизитыДоговора.Договор);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Идентификатор - см. ИдентификаторВидаДокументаПоРеквизитам
//  * Наименование - Строка
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Функция НовыеРеквизитыПоискаВидовДокументов()
	КлючевыеРеквизиты = Новый ТаблицаЗначений;
	КлючевыеРеквизиты.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	КлючевыеРеквизиты.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КлючевыеРеквизиты.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	Возврат КлючевыеРеквизиты;
КонецФункции

// Параметры:
//  РеквизитыВидаДокумента - Структура:
//  * Наименование - Строка
//  * ИмяТипаДокумента - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторВидаДокументаПоРеквизитам(РеквизитыВидаДокумента)
	Возврат РеквизитыВидаДокумента.Наименование + РеквизитыВидаДокумента.ИмяТипаДокумента;
КонецФункции

// Параметры:
//  ВидыДокументовВФорматеСервиса - Массив из Структура:
//  * Наименование - Строка
//  * ИмяТипаДокумента - Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - см. ИдентификаторВидаДокументаПоРеквизитам
//  * Значение - СправочникСсылка.ВидыДокументовЭДО
Функция ВидыДокументовИзФорматаСервиса(ВидыДокументовВФорматеСервиса)
	
	Результат = Новый Соответствие;
	
	РеквизитыВидовДокументов = НовыеРеквизитыПоискаВидовДокументов();
	
	МетаданныеТиповДокументов = Метаданные.Перечисления.ТипыДокументовЭДО;
	
	Для Каждого ВидДокументаВФорматеСервиса Из ВидыДокументовВФорматеСервиса Цикл
		Идентификатор = ИдентификаторВидаДокументаПоРеквизитам(ВидДокументаВФорматеСервиса);
		Если РеквизитыВидовДокументов.Найти(Идентификатор, "Идентификатор") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РеквизитыВидаДокумента = РеквизитыВидовДокументов.Добавить();
		РеквизитыВидаДокумента.Идентификатор = Идентификатор;
		РеквизитыВидаДокумента.Наименование = ВидДокументаВФорматеСервиса.Наименование;
		ТипДокумента = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ВидДокументаВФорматеСервиса.ИмяТипаДокумента,
			МетаданныеТиповДокументов); // ПеречислениеСсылка.ТипыДокументовЭДО
		РеквизитыВидаДокумента.ТипДокумента = ТипДокумента;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыВидовДокументов.Идентификатор КАК Идентификатор,
		|	РеквизитыВидовДокументов.Наименование КАК Наименование,
		|	РеквизитыВидовДокументов.ТипДокумента КАК ТипДокумента
		|ПОМЕСТИТЬ РеквизитыВидовДокументов
		|ИЗ
		|	&РеквизитыВидовДокументов КАК РеквизитыВидовДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка,
		|	РеквизитыВидовДокументов.Идентификатор
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыВидовДокументов КАК РеквизитыВидовДокументов
		|		ПО ВидыДокументовЭДО.Наименование = РеквизитыВидовДокументов.Наименование
		|		И ВидыДокументовЭДО.ТипДокумента = РеквизитыВидовДокументов.ТипДокумента";
	
	Запрос.УстановитьПараметр("РеквизитыВидовДокументов", РеквизитыВидовДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Идентификатор, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИменаСостоянийДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостоянияДокументовПоИменам(ИменаСостоянийДокументов)
	
	Результат = Новый Соответствие;
	
	МетаданныеСотоянийДокументовЭДО = Метаданные.Перечисления.СостоянияДокументовЭДО;
	
	Для Каждого ИмяСостояния Из ИменаСостоянийДокументов Цикл
		Состояние = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ИмяСостояния, МетаданныеСотоянийДокументовЭДО);
		Результат.Вставить(ИмяСостояния, Состояние);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор документа.
//  * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ИдентификаторДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписанияДокументовВФорматеСервиса - Массив из Структура:
//  * ЭтоВходящийЭДО         - Булево
//  * Идентификатор          - Строка
//  * Формат                 - Строка
//  * ВидДокумента           - Структура:
//  ** Наименование          - Строка
//  ** ИмяТипаДокумента      - Строка
//  * Организация            - Структура:
//  ** ИНН                   - Строка
//  ** КПП                   - Строка
//  * Контрагент             - Структура:
//  ** ИНН                   - Строка
//  ** КПП                   - Строка
//  * Договор                - Неопределено,Структура:
//  ** Наименование          - Строка
//  ** Номер                 - Строка
//  ** Дата                  - Дата
//  ** Сторона1              - Структура:
//  *** ИНН                  - Строка
//  *** КПП                  - Строка
//  ** Сторона2              - Структура:
//  *** ИНН                  - Строка
//  *** КПП                  - Строка
//  * Дата                   - Строка - дата в формате ISO.
//  * Номер                  - Строка
//  * Сумма                  - Число
//  * ИмяСостояния           - Строка
//  * СостояниеДополнение    - Строка
//  * ДатаИзмененияСостояния - Строка - дата в формате ISO.
//  * КомментарийСостояния   - Строка
//  ДокументыПоИдентификаторам - Неопределено
//                             - см. ДокументыПоИдентификаторамСервиса
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеДокументаЭДО
Функция ОписанияДокументовИзФорматаСервиса(ОписанияДокументовВФорматеСервиса)
	
	ОписанияДокументов = Новый Массив; // см. ОписанияДокументовИзФорматаСервиса
	
	ОрганизацииВФорматеСервиса = Новый Массив;
	КонтрагентыВФорматеСервиса = Новый Массив;
	ДоговорыВФорматеСервиса = Новый Массив;
	ВидыДокументовВФорматеСервиса = Новый Массив;
	СостоянияДокументовВФорматеСервиса = Новый Массив;
	
	Для Каждого ОписаниеДокументаВФорматеСервиса Из ОписанияДокументовВФорматеСервиса Цикл
		ДобавитьЗаполненноеЗначение(ОрганизацииВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Организация);
		ДобавитьЗаполненноеЗначение(КонтрагентыВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Контрагент);
		ДобавитьЗаполненноеЗначение(ДоговорыВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Договор);
		ДобавитьЗаполненноеЗначение(ВидыДокументовВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.ВидДокумента);
		ДобавитьУникальноеЗначение(СостоянияДокументовВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.ИмяСостояния);
	КонецЦикла;
	
	ОрганизацииПоИдентификаторам = ОрганизацииИзФорматаСервиса(ОрганизацииВФорматеСервиса);
	
	КонтрагентыПоИдентификаторам = КонтрагентыИзФорматаСервиса(КонтрагентыВФорматеСервиса);
	
	ДоговорыПоИдентификаторам = ДоговорыИзФорматаСервиса(ДоговорыВФорматеСервиса, ОрганизацииПоИдентификаторам,
		КонтрагентыПоИдентификаторам);
	
	ВидыДокументовПоИденификаторам = ВидыДокументовИзФорматаСервиса(ВидыДокументовВФорматеСервиса);
	
	СостоянияДокументовПоИменам = СостоянияДокументовПоИменам(СостоянияДокументовВФорматеСервиса);
	
	ПустойДоговор = ИнтеграцияЭДО.ПустаяСсылкаДоговора();
	
	Для Каждого ОписаниеДокументаВФорматеСервиса Из ОписанияДокументовВФорматеСервиса Цикл
		
		ИдентификаторОрганизации = ИдентификаторУчастникаСделкиПоРеквизитам(ОписаниеДокументаВФорматеСервиса.Организация);
		ИдентификаторКонтрагента = ИдентификаторУчастникаСделкиПоРеквизитам(ОписаниеДокументаВФорматеСервиса.Контрагент);
		ИдентификаторДоговора = ИдентификаторДоговораПоРеквизитам(ОписаниеДокументаВФорматеСервиса.Договор);
		ИдентификаторВидаДокумента = ИдентификаторВидаДокументаПоРеквизитам(ОписаниеДокументаВФорматеСервиса.ВидДокумента);
		
		Организация = ОрганизацииПоИдентификаторам[ИдентификаторОрганизации];
		Контрагнет = КонтрагентыПоИдентификаторам[ИдентификаторКонтрагента];
		Договор = ДоговорыПоИдентификаторам[ИдентификаторДоговора];
		ВидДокумента = ВидыДокументовПоИденификаторам[ИдентификаторВидаДокумента];
		Состояние = СостоянияДокументовПоИменам[ОписаниеДокументаВФорматеСервиса.ИмяСостояния];
		
		ОписаниеДокументаЭДО = НовоеОписаниеДокументаЭДО();
		ОписаниеДокументаЭДО.ЭтоВходящийЭДО = ОписаниеДокументаВФорматеСервиса.ЭтоВходящийЭДО;
		ОписаниеДокументаЭДО.Идентификатор = ОписаниеДокументаВФорматеСервиса.Идентификатор;
		ОписаниеДокументаЭДО.Формат = ОписаниеДокументаВФорматеСервиса.Формат;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОписаниеДокументаЭДО.Организация = Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагнет) Тогда
			ОписаниеДокументаЭДО.Контрагент = Контрагнет;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Договор) Тогда
			ОписаниеДокументаЭДО.Договор = Договор;
		Иначе
			ОписаниеДокументаЭДО.Договор = ПустойДоговор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ОписаниеДокументаЭДО.ВидДокумента = ВидДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Номер) Тогда
			ОписаниеДокументаЭДО.Номер = ОписаниеДокументаВФорматеСервиса.Номер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Дата) Тогда
			ОписаниеДокументаЭДО.Дата = ДатаИзФорматаСервиса(ОписаниеДокументаВФорматеСервиса.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Сумма) Тогда
			ОписаниеДокументаЭДО.Сумма = ОписаниеДокументаВФорматеСервиса.Сумма;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Состояние) Тогда
			ОписаниеДокументаЭДО.Состояние = Состояние;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.СостояниеДополнение) Тогда
			ОписаниеДокументаЭДО.СостояниеДополнение = ОписаниеДокументаВФорматеСервиса.СостояниеДополнение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаИзмененияСостояния) Тогда
			ОписаниеДокументаЭДО.ДатаИзмененияСостояния = ДатаИзФорматаСервиса(
				ОписаниеДокументаВФорматеСервиса.ДатаИзмененияСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.КомментарийСостояния) Тогда
			ОписаниеДокументаЭДО.КомментарийСостояния = ОписаниеДокументаВФорматеСервиса.КомментарийСостояния;
		КонецЕсли;
		
		ОписанияДокументов.Добавить(ОписаниеДокументаЭДО);
		
	КонецЦикла;
	
	Возврат ОписанияДокументов;
	
КонецФункции

// Параметры:
//  ОписанияСостоянийВФорматеСервиса - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * ИмяСостояния - Строка
//  * СостояниеДополнение - Строка
//  * ДатаИзменения - Строка
//  * Комментарий - Строка
//  ДокументыПоИдентификаторам - Неопределено
//                             - Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеСостоянияДокументаЭДО
Функция ОписанияСостоянийДокументовИзФорматаСервиса(ОписанияСостоянийВФорматеСервиса, ДокументыПоИдентификаторам = Неопределено)
	
	Результат = Новый Массив; // см. ОписанияСостоянийДокументовИзФорматаСервиса
	
	Если ДокументыПоИдентификаторам = Неопределено Тогда
		ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияСостоянийВФорматеСервиса,
			"ИдентификаторДокумента");
		ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	КонецЕсли;
	
	МетаданныеПеречисления = Метаданные.Перечисления.СостоянияДокументовЭДО;
	
	Для Каждого ОписаниеСостоянияВФорматеСервиса Из ОписанияСостоянийВФорматеСервиса Цикл
		ОписаниеСостоянияЭДО = НовоеОписаниеСостоянияДокументаЭДО();
		ОписаниеСостоянияЭДО.ЭлектронныйДокумент = ДокументыПоИдентификаторам[
			ОписаниеСостоянияВФорматеСервиса.ИдентификаторДокумента];
		СостояниеПоИмени = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			ОписаниеСостоянияВФорматеСервиса.ИмяСостояния, МетаданныеПеречисления); // ПеречислениеСсылка.СостоянияДокументовЭДО
		ОписаниеСостоянияЭДО.Состояние = СостояниеПоИмени;
		ОписаниеСостоянияЭДО.СостояниеДополнение = ОписаниеСостоянияВФорматеСервиса.СостояниеДополнение;
		ОписаниеСостоянияЭДО.ДатаИзменения = ДатаИзФорматаСервиса(ОписаниеСостоянияВФорматеСервиса.ДатаИзменения);
		ОписаниеСостоянияЭДО.Комментарий = ОписаниеСостоянияВФорматеСервиса.Комментарий;
		Результат.Добавить(ОписаниеСостоянияЭДО);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостояниеДополнение - Строка
//  * ДатаИзменения - Дата
//  * Комментарий - Строка
Функция НовоеОписаниеСостоянияДокументаЭДО()
	Описание = Новый Структура;
	Описание.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	Описание.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("СостояниеДополнение", "");
	Описание.Вставить("ДатаИзменения", Дата(1, 1, 1));
	Описание.Вставить("Комментарий", "");
	Возврат Описание;
КонецФункции

// Параметры:
//  ОписанияДокументовЭДО - Массив из см. НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьДокументыЭДО(ОписанияДокументовЭДО)
	
	ОбновленныеДокументы = Новый Массив; // см. ОбновитьДокументыЭДО
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовЭДО Цикл
		
		ДокументЭДО = ОбновитьДокументЭДО(ОписаниеДокумента);
		Если ЗначениеЗаполнено(ДокументЭДО) Тогда
			ОбновленныеДокументы.Добавить(ДокументЭДО);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ОбновленныеДокументы;
	
КонецФункции

// Параметры:
//  ИдентификаторДокумента - Строка
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НайтиДокументПоИдентификаторуОблачногоЭДО(ИдентификаторДокумента, ЭтоВходящийЭДО)
	Если ЭтоВходящийЭДО Тогда
		Возврат Документы.ЭлектронныйДокументВходящийЭДО.НайтиПоРеквизиту("ИдентификаторДокумента", ИдентификаторДокумента);
	Иначе
		Возврат Документы.ЭлектронныйДокументИсходящийЭДО.НайтиПоРеквизиту("ИдентификаторДокумента", ИдентификаторДокумента);
	КонецЕсли;
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ОписаниеДокументаЭДО - см. НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьИзмененияДокументаЭДО(ДокументОбъект, ОписаниеДокументаЭДО)
	
	Если ДокументОбъект.ЭтоНовый()
		ИЛИ ДокументОбъект.ИдентификаторДокумента <> ОписаниеДокументаЭДО.Идентификатор
		ИЛИ ДокументОбъект.ВидДокумента <> ОписаниеДокументаЭДО.ВидДокумента
		ИЛИ ДокументОбъект.Организация <> ОписаниеДокументаЭДО.Организация
		ИЛИ ДокументОбъект.Контрагент <> ОписаниеДокументаЭДО.Контрагент
		ИЛИ ДокументОбъект.ДоговорКонтрагента <> ОписаниеДокументаЭДО.Договор
		ИЛИ ДокументОбъект.НомерДокумента <> ОписаниеДокументаЭДО.Номер
		ИЛИ ДокументОбъект.ДатаДокумента <> ОписаниеДокументаЭДО.Дата
		ИЛИ ДокументОбъект.СуммаДокумента <> ОписаниеДокументаЭДО.Сумма
		ИЛИ ДокументОбъект.ДатаДокумента <> ОписаниеДокументаЭДО.Дата Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ОписанияСостоянийДокументовЭДО - Массив из см. НовоеОписаниеСостоянияДокументаЭДО
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийДокументовЭДО)
	
	ОбновленныеДокументыЭДО = Новый Массив; // см. ОбновитьСостоянияДокументовЭДО
	
	Если Не ЗначениеЗаполнено(ОписанияСостоянийДокументовЭДО) Тогда
		Возврат ОбновленныеДокументыЭДО;
	КонецЕсли;
	
	Для Каждого ОписаниеСостоянияДокументаЭДО Из ОписанияСостоянийДокументовЭДО Цикл
		
		Если ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияДокументаЭДО) Тогда
			ОбновленныеДокументыЭДО.Добавить(ОписаниеСостоянияДокументаЭДО.ЭлектронныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновленныеДокументыЭДО;
	
КонецФункции

// Параметры:
//  ОписаниеСостоянияЭДО - см. НовоеОписаниеСостоянияДокументаЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияЭДО)
	
	Результат = Ложь;
	
	Набор = РегистрыСведений.СостоянияДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Отбор.ЭлектронныйДокумент.Установить(ОписаниеСостоянияЭДО.ЭлектронныйДокумент);
	
	Если Не ЗначениеЗаполнено(ОписаниеСостоянияЭДО.ДатаИзменения) Тогда
		ОписаниеСостоянияЭДО.ДатаИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Прочитать();
		
		Если ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор[0];
		Иначе
			Запись = Набор.Добавить();
			Запись.ЭлектронныйДокумент = ОписаниеСостоянияЭДО.ЭлектронныйДокумент;
		КонецЕсли;
		
		Если ОписаниеСостоянияЭДО.ДатаИзменения < Запись.ДатаИзменения Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запись.Состояние = ОписаниеСостоянияЭДО.Состояние;
		Запись.СостояниеДополнение = ОписаниеСостоянияЭДО.СостояниеДополнение;
		Запись.ДатаИзменения = ОписаниеСостоянияЭДО.ДатаИзменения;
		Запись.Комментарий = ОписаниеСостоянияЭДО.Комментарий;
		
		Набор.Записать();
		
		ИнтеграцияЭДО.ОбновитьСостояниеЭлектронногоДокументаОбъектовУчета(ОписаниеСостоянияЭДО.ЭлектронныйДокумент);
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатМетода - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  См. ОбновитьСостоянияДокументовЭДО
Функция ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатМетода, РезультатДействий, Действие)
	
	ОписанияСостоянийЭДО = ОписанияСостоянийДокументовИзФорматаСервиса(РезультатМетода.СостоянияДокументовЭДО);
	
	ОбновленныеДокументыЭДО = ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ДокументЭДО Из ОбновленныеДокументыЭДО Цикл
		Итог.ОбработанныеДокументы.Вставить(ДокументЭДО, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Действие, Обработано);
	
	Возврат ОбновленныеДокументыЭДО;
	
КонецФункции

// Параметры:
//  НаправлениеВФорматеСервиса - Строка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.НаправленияЭДО
Функция НаправлениеИзФорматаСервиса(НаправлениеВФорматеСервиса)
	МетаданныеНаправленияЭДО = Метаданные.Перечисления.НаправленияЭДО;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(НаправлениеВФорматеСервиса, МетаданныеНаправленияЭДО);
КонецФункции

// Параметры:
//  ДатаВФорматеСервиса - Строка - Дата в формате ISO.
// 
// Возвращаемое значение:
//  Дата
Функция ДатаИзФорматаСервиса(ДатаВФорматеСервиса)
	Возврат ПрочитатьДатуJSON(ДатаВФорматеСервиса, ФорматДатыJSON.ISO);
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

#Область КонвертацияДереваДанныхВФорматСервис

// Параметры:
//  ДеревоУчетныхДанных - ДеревоЗначений
// 
// Возвращаемое значение:
//  Структура
Функция ДеревоУчетныхДанныхВСтруктуру(ДеревоУчетныхДанных)
	
	СтруктураУчетныхДанных = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ДеревоУчетныхДанных.Строки) Тогда
		Возврат СтруктураУчетныхДанных;
	КонецЕсли;
	
	ДобавитьСвойстваПоВложеннымСтрокамДерева(СтруктураУчетныхДанных, ДеревоУчетныхДанных);
	
	Возврат СтруктураУчетныхДанных;
	
КонецФункции

// Параметры:
//  Свойства - Структура,Массив из Структура
//  СтрокаДереваРодитель - ДеревоЗначений,СтрокаДереваЗначений
Процедура ДобавитьСвойстваПоВложеннымСтрокамДерева(Свойства, СтрокаДереваРодитель)
	
	НаборСтрокРодителя = СтрокаДереваРодитель.Строки;
	
	Если НаборСтрокРодителя.Количество() Тогда
		
		Для Каждого СтрокаДерева Из НаборСтрокРодителя Цикл
			
			ДобавитьСвойстваПоСтрокеДерева(Свойства, СтрокаДерева);
			
		КонецЦикла;
		
	Иначе
		
		ДобавитьСвойствоВСтруктуруУчетныхДанных(Свойства, СтрокаДереваРодитель);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура
//  СтрокаДерева - СтрокаДереваЗначений:
//  * ПолныйПуть - Строка
//  * Признак - Строка
Процедура ДобавитьСвойстваПоСтрокеДерева(Свойства, СтрокаДерева)
	
	ЭтоНомерСтрокиТаблицы = СтрЗаканчиваетсяНа(СтрокаДерева.ПолныйПуть, "НомерСтроки");
	
	Если ЭтоНомерСтрокиТаблицы
		ИЛИ СтрокаДерева.Признак = "Группа"
		ИЛИ СтрокаДерева.Признак = "Выбор" Тогда
		
		ДобавитьГруппуСвойствПоВложеннымСтрокамДерева(Свойства, СтрокаДерева, ЭтоНомерСтрокиТаблицы);
		
	ИначеЕсли СтрокаДерева.Признак = "Таблица" Тогда
		
		ДобавитьНаборГруппПоВложеннымСтрокамДерева(Свойства, СтрокаДерева);
		
	Иначе
		
		ДобавитьСвойстваПоВложеннымСтрокамДерева(Свойства, СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура,Массив из Структура
//  СтрокаДерева - СтрокаДереваЗначений:
//  * ПолныйПуть - Строка
//  * Признак - Строка
//  ЭтоНомерСтрокиТаблицы - Булево
Процедура ДобавитьГруппуСвойствПоВложеннымСтрокамДерева(Свойства, СтрокаДерева, ЭтоНомерСтрокиТаблицы)
	
	ГруппаСвойств = Новый Структура;
	
	ДобавитьСвойстваПоВложеннымСтрокамДерева(ГруппаСвойств, СтрокаДерева);
	
	Если Не ЗначениеЗаполнено(ГруппаСвойств) Тогда
		Возврат;
	ИначеЕсли ЭтоНомерСтрокиТаблицы Тогда
		НаборСвойств = Свойства; // Массив
		НаборСвойств.Добавить(ГруппаСвойств);
	Иначе
		ГруппаСвойствВладелец = Свойства; // Структура
		ИмяСвойства = ИмяСвойстваПоПолномуПути(СтрокаДерева.ПолныйПуть);
		ГруппаСвойствВладелец.Вставить(ИмяСвойства, ГруппаСвойств);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура
//  СтрокаДерева - СтрокаДереваЗначений:
//  * ПолныйПуть - Строка
//  * Признак - Строка
Процедура ДобавитьНаборГруппПоВложеннымСтрокамДерева(Свойства, СтрокаДерева)
	
	НаборГрупп = Новый Массив;
	
	ДобавитьСвойстваПоВложеннымСтрокамДерева(НаборГрупп, СтрокаДерева);
	
	Если ЗначениеЗаполнено(НаборГрупп) Тогда
		ГруппаСвойств = Свойства; // Структура
		ИмяСвойства = ИмяСвойстваПоПолномуПути(СтрокаДерева.ПолныйПуть);
		ГруппаСвойств.Вставить(ИмяСвойства, НаборГрупп);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура
//  СтрокаДерева - ДеревоЗначений,СтрокаДереваЗначений:
//  * Типы - Строка
//  * Значение - Строка,Число,ПеречислениеСсылка
Процедура ДобавитьСвойствоВСтруктуруУчетныхДанных(Свойства, СтрокаДерева)
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Значение)
		И СтрокаДерева.Значение <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЗначения = СтрокаДерева.Типы;
	
	Если   ТипыЗначения = "Строка"
		ИЛИ ТипыЗначения = "Число"
		ИЛИ ТипыЗначения = "Булево"
		ИЛИ ТипыЗначения = "Дата" Тогда
		ЗначениеСвойства = СтрокаДерева.Значение;
	ИначеЕсли СтрНачинаетсяС(ТипыЗначения, "ПеречислениеСсылка") Тогда
		ЗначениеСвойства = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДерева.Значение);
	Иначе
		ТипЗначения = ТипЗнч(СтрокаДерева.Значение);
		Если   ТипЗначения = Тип("Строка")
			Или ТипЗначения = Тип("Число")
			Или ТипЗначения = Тип("Булево")
			Или ТипЗначения = Тип("Дата") Тогда
			ЗначениеСвойства = СтрокаДерева.Значение;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеСвойства <> Неопределено Тогда
		ГруппаСвойств = Свойства; // Структура
		ИмяСвойства = ИмяСвойстваПоПолномуПути(СтрокаДерева.ПолныйПуть);
		ГруппаСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПолныйПуть - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСвойстваПоПолномуПути(ПолныйПуть)
	Позиция = СтрНайти(ПолныйПуть, ".", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		Позиция = Позиция + 1;
	КонецЕсли;
	Возврат Сред(ПолныйПуть, Позиция);
КонецФункции

#КонецОбласти // КонвертацияДереваДанных

#Область КонвертацияДереваДанныхИзФорматаСервиса

// Параметры:
//  СтруктураДанных - Структура
//  ФорматДерева - Строка
// 
// Возвращаемое значение:
//  ДеревоЗначений
Функция ДеревоУчетныхДанныхИзСтруктуры(СтруктураДанных, ФорматДерева)
	
	ПутьКМакету = "ОбменСКонтрагентами." + ФорматДерева;
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ПутьКМакету);
	
	ЗагрузитьСтруктуруДанныхВСтрокуДерева(ДеревоДанных, СтруктураДанных);
	
	Возврат ДеревоДанных;
	
КонецФункции

// Параметры:
//  СтрокаДерева - ДеревоЗначений,СтрокаДереваЗначений
//  СтруктураДанных - Структура
Процедура ЗагрузитьСтруктуруДанныхВСтрокуДерева(СтрокаДерева, СтруктураДанных)
	
	ВложенныеСтроки = СтрокаДерева.Строки;
	Если Не ЗначениеЗаполнено(ВложенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПуть = "";
	Признак = "";
	Если ВложенныеСтроки[0].Родитель <> Неопределено Тогда
		ТекущийПуть = СтрокаДерева.ПолныйПуть + ".";
		Признак = СтрокаДерева.Признак;
	КонецЕсли;
	
	Если Признак = "Группа" Тогда
		СтрокаДерева.Значение = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		ПолныйПуть = ТекущийПуть + ЭлементСтруктуры.Ключ;
		ТекущаяСтрока = ВложенныеСтроки.Найти(ПолныйПуть, "ПолныйПуть");
		Если ТекущаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Признак = "Выбор" Тогда
			СтрокаДерева.Значение = ЭлементСтруктуры.Ключ;
		КонецЕсли;
		
		Данные = ЭлементСтруктуры.Значение;
		ТипДанных = ТипЗнч(Данные);
		
		Если ТипДанных = Тип("Структура") Тогда
			
			ЗагрузитьСтруктуруДанныхВСтрокуДерева(ТекущаяСтрока, Данные);
			
		ИначеЕсли ТипДанных = Тип("Массив") Тогда
			
			ЗагрузитьНаборДанныхВСтрокуДерева(ТекущаяСтрока, Данные);
			
		Иначе
			
			ЗагрузитьДанныеВСтрокуДерева(ТекущаяСтрока, Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  НаборДанных - Массив из Структура
Процедура ЗагрузитьНаборДанныхВСтрокуДерева(СтрокаДерева, НаборДанных)
	
	Если СтрокаДерева.Признак <> "Таблица" Тогда
		Возврат;
	КонецЕсли;
	
	ВложенныеСтроки = СтрокаДерева.Строки;
	ПерваяСтрока = ВложенныеСтроки[0];
	
	НомерСтроки = 0;
	Для Каждого СтруктураДанных Из НаборДанных Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки = 1 Тогда
			ТекущаяСтрока = ПерваяСтрока;
		Иначе
			ТекущаяСтрока = ВложенныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПерваяСтрока);
			ДеревоЭлектронногоДокументаБЭД.СкопироватьСтрокиДереваДляТаблицыРекурсивно(ТекущаяСтрока, ПерваяСтрока);
		КонецЕсли;
		
		ТекущаяСтрока.Значение = НомерСтроки;
		
		ЗагрузитьСтруктуруДанныхВСтрокуДерева(ТекущаяСтрока, СтруктураДанных);
		
	КонецЦикла;
	
	СтрокаДерева.Значение = НомерСтроки;
	
КонецПроцедуры

// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  Данные - Строка,Число,Булево
Процедура ЗагрузитьДанныеВСтрокуДерева(СтрокаДерева, Данные)
	
	Если ЗначениеЗаполнено(СтрокаДерева.Признак) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Типы = "Дата" Тогда
		СтрокаДерева.Значение = ?(ЗначениеЗаполнено(Данные), ДатаИзФорматаСервиса(Данные), '00010101');
	Иначе
		СтрокаДерева.Значение = Данные;
	КонецЕсли;
	
	СтрокаДерева.ПараметрыОбработкиОбязательны = "Нет";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // КонвертацияДанных

#Область ДоступныеДействияПоЭДО

// Возвращаемое значение:
//  Структура:
//  * ЭтоВходящийЭДО - Булево
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НаОзнакомлении - Булево
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НовыеПараметрыОпределенияДоступныхДействийПоЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ЭтоВходящийЭДО", Ложь);
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("НаОзнакомлении", Ложь);
	Параметры.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Возврат Параметры;
КонецФункции

// Параметры:
//  Параметры - см. НовыеПараметрыОпределенияДоступныхДействийПоЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Значение - Булево
Функция ДоступныеДействияПоЭДО(Параметры) Экспорт
	
	Действия = Новый Соответствие; // см. ДоступныеДействияПоЭДО
	
	СостояниеДокумента = Параметры.СостояниеДокумента;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		ЗаполнитьДействияПоСостояниюНеСформирован(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписание(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправке(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаПриглашения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправка(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяУтверждение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеОтклонения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеОтклонения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаОтклонения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодтверждениеАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеОПолучении(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещенияПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещенияПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяУточнение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИсправлениеОшибкиПередачи(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПовторнаяОтправка(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОтклонениемПриглашения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеОператора(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяИзвещениеОПолучении(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеАннулирования(Действия, Параметры);
	
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИзвещениеПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИсправление(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОтветНаПриглашение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		ЗаполнитьДействияПоСостояниюОбменЗавершен(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		ЗаполнитьДействияПоСостояниюОбменЗавершенСИсправлением(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытПринудительно(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОтклонением(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОшибкойПередачи(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ЗаполнитьДействияПоСостояниюАннулирован(Действия, Параметры);
		
	КонецЕсли;
	
	Если Параметры.НаОзнакомлении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтправитьВАрхив, Истина);
		
	КонецЕсли;
	
	Если НЕ ДействиеАннулироватьДоступно(Параметры) Тогда
		Действия.Удалить(Перечисления.ДействияПоЭДО.Аннулировать);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюНеСформирован(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписание(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьПодписание, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если Параметры.ЭтоВходящийЭДО Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
	КонецЕсли;
	Если ДействиеАннулироватьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	КонецЕсли;
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправке(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаПриглашения(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправка(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяУтверждение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Утвердить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеОтклонения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеОтклонения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаОтклонения(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодтверждениеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПринятьАннулирование, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьАннулирование, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаАннулирования(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеОПолучении(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещения(Действия, Параметры);
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещенияПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещенияПоОтклонению(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяУточнение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИсправлениеОшибкиПередачи(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПовторнаяОтправка(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОтклонениемПриглашения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОшибкойПередачи(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюАннулирован(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеОператора(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяИзвещениеОПолучении(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИзвещениеПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИсправление(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОтветНаПриглашение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОбменЗавершен(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОбменЗавершенСИсправлением(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытПринудительно(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОтклонением(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Параметры - См. ДоступныеДействияПоЭДО.Параметры
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеАннулироватьДоступно(Параметры)
	Возврат Параметры.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
КонецФункции

// Параметры:
//  Параметры - См. ДоступныеДействияПоЭДО.Параметры
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеОтправитьДоступно(Параметры)
	Возврат Не ИнтерфейсДокументовЭДО.ЭтоВнутреннийТипДокумента(Параметры.ТипДокумента)
КонецФункции

// Параметры:
//  Параметры - См. ДоступныеДействияПоЭДО.Параметры
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеЗакрытьДоступно(Параметры)
	Возврат Не ИнтерфейсДокументовЭДО.ЭтоВнутреннийТипДокумента(Параметры.ТипДокумента);
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Функция НовыеОбъектыУчетаДокументов()
	ОписаниеТиповОснований = ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов();
	ОбъектыУчетаДокументов = Новый ТаблицаЗначений;
	ОбъектыУчетаДокументов.Колонки.Добавить("ЭлектронныйДокумент",
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	ОбъектыУчетаДокументов.Колонки.Добавить("ОбъектУчета", ОписаниеТиповОснований);
	Возврат ОбъектыУчетаДокументов;
КонецФункции

// Параметры:
//  СведенияНоменклатурыДокументовВФорматеСервиса - см. СервисОблачногоЭДО.НовыеСведенияНоменклатурыДокументовЭДО
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ВыполнитьКонтрольСопоставленияНоменклатуры(СведенияНоменклатурыДокументовВФорматеСервиса)
	
	ИдентификаторыДокументовНаКонтроле = Новый Массив; // Массив из Строка
	
	Если Не ЗначениеЗаполнено(СведенияНоменклатурыДокументовВФорматеСервиса) Тогда
		Возврат ИдентификаторыДокументовНаКонтроле;
	КонецЕсли;
	
	ИдентификаторыДокументовЭДО = ОбщегоНазначения.ВыгрузитьКолонку(СведенияНоменклатурыДокументовВФорматеСервиса,
		"ИдентификаторДокумента");
	
	СвойстваДокументов = СвойстваДокументовДляКонтроляСопоставленияНоменклатуры(ИдентификаторыДокументовЭДО);
	
	Для Каждого СведенияНоменклатурыДокумента Из СведенияНоменклатурыДокументовВФорматеСервиса Цикл
		
		ИнформацияОТоварах = ИнформацияОТоварахИзФорматаСервиса(СведенияНоменклатурыДокумента.СведенияНоменклатуры);
		
		СвойстваДокумента = СвойстваДокументов.Найти(СведенияНоменклатурыДокумента.ИдентификаторДокумента,
			"ИдентификаторДокумента");
		
		Владелец = СвойстваДокумента.Контрагент;
		
		НоменклатураКонтрагентов = ОтражениеВУчетеЭДО.НаборНоменклатурыКонтрагентовПоИнформацииОТоварах(
			ИнформацияОТоварах, Владелец);
		
		НоменклатураКонтрагентовБезСопоставления = ОтражениеВУчетеЭДО.НоменклатураКонтрагентовБезСопоставления(
			НоменклатураКонтрагентов);
		
		Если Не ЗначениеЗаполнено(НоменклатураКонтрагентовБезСопоставления) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтражениеВУчетеЭДО.ВключитьКонтрольСопоставленияНоменклатуры(СвойстваДокумента.Ссылка,
			НоменклатураКонтрагентовБезСопоставления);
		
		ИдентификаторыДокументовНаКонтроле.Добавить(СведенияНоменклатурыДокумента.ИдентификаторДокумента);
		
	КонецЦикла;
	
	Возврат ИдентификаторыДокументовНаКонтроле;
	
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторДокумента - Строка
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
Функция СвойстваДокументовДляКонтроляСопоставленияНоменклатуры(ИдентификаторыДокументовЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументовЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Параметры:
//  ИнформацияОТоварахВФорматеСервиса - Массив из Структура:
//  * ИД - Строка
//  * Штрихкод - Строка
//  * Наименование - Строка
//  * НаименованиеХарактеристики - Строка
//  * КодТовара - Строка
//  * Артикул - Строка
//  * БазоваяЕдиницаКод - Строка
//  * БазоваяЕдиницаНаименование - Строка
//  * БазоваяЕдиницаНаименованиеПолное - Строка
//  * БазоваяЕдиницаМеждународноеСокращение - Строка
//  * БазоваяЕдиницаНаименованиеКраткое - Строка
//  * СтавкаНДС - Строка
//  * Описание - Строка
//  * ИсторияИдентификаторов - Массив из Структура
//  * ИмяТипаНоменклатурыФНС - Строка
//  * КодПоКТРУ - Строка
//  * КодТНВЭД - Строка
//  * СтранаПроисхожденияКод - Строка
//  * ПрослеживаемыйТовар - Булево
//  * МаркируемыйТовар - Булево
// 
// Возвращаемое значение:
//  См. ОтражениеВУчетеЭДО.НоваяИнформацияОТоварахЭлектронногоДокумента
Функция ИнформацияОТоварахИзФорматаСервиса(ИнформацияОТоварахВФорматеСервиса)
	
	ИнформацияОТоварах = ОтражениеВУчетеЭДО.НоваяИнформацияОТоварахЭлектронногоДокумента();
	
	МетеданныеТипыНоменклатурыФНС = Метаданные.Перечисления.ТипыНоменклатурыФНС;
	
	Для Каждого ИнформацияОТовареВФорматеСервиса Из ИнформацияОТоварахВФорматеСервиса Цикл
		
		ИнформацияОТоваре = ИнформацияОТоварах.Добавить();
		ЗаполнитьЗначенияСвойств(ИнформацияОТоваре, ИнформацияОТовареВФорматеСервиса);
		ИнформацияОТоваре.ТипНоменклатурыФНС = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			ИнформацияОТовареВФорматеСервиса.ИмяТипаНоменклатурыФНС, МетеданныеТипыНоменклатурыФНС);
		
	КонецЦикла;
	
	Возврат ИнформацияОТоварах;
	
КонецФункции

// Параметры:
//  УчетныеДанныеДокументовВФорматеСервиса - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура - данные прикладного решения:
//  ** Данные - Структура - учетные данные для конвертации.
//  ** Формат - Строка - формат учетных данных.
//  СпособыОбработкиДокументов - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО -
//  * Значение - Строка - способ обработки.
// 
// Возвращаемое значение:
//  См. НовыеОбъектыУчетаДокументов
Функция ОтразитьЭлектронныеДокументыВУчете(УчетныеДанныеДокументовВФорматеСервиса, СпособыОбработкиДокументов)
	
	ОбъектыУчетаДокументов = НовыеОбъектыУчетаДокументов();
	
	ИдентификаторыДокументовЭДО = ОбщегоНазначения.ВыгрузитьКолонку(УчетныеДанныеДокументовВФорматеСервиса,
		"ИдентификаторДокумента");
	
	СвойстваДокументов = СвойстваДокументовДляОтраженияВУчете(ИдентификаторыДокументовЭДО);
	
	Для Каждого УчетныеДанныеДокумента Из УчетныеДанныеДокументовВФорматеСервиса Цикл
		
		СвойстваДокумента = СвойстваДокументов.Найти(УчетныеДанныеДокумента.ИдентификаторДокумента,
			"ИдентификаторДокумента");
		
		СпособОбработки = СпособыОбработкиДокументов[СвойстваДокумента.Ссылка];
		
		ДанныеЭлектронногоДокумента = ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
		ДанныеЭлектронногоДокумента.ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		ДанныеЭлектронногоДокумента.Направление = Перечисления.НаправленияЭДО.Входящий;
		ДанныеЭлектронногоДокумента.ТипДокумента = СвойстваДокумента.ТипДокумента;
		ДанныеЭлектронногоДокумента.Формат = СвойстваДокумента.ФорматОсновногоТитула;
		ДанныеЭлектронногоДокумента.Отправитель = СвойстваДокумента.Контрагент;
		ДанныеЭлектронногоДокумента.Получатель = СвойстваДокумента.Организация;
		
		ОбъектыУчета = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
		
		ДеревоУчетныхДанных = ДеревоУчетныхДанныхИзСтруктуры(УчетныеДанныеДокумента.УчетныеДанные.Данные, 
			УчетныеДанныеДокумента.УчетныеДанные.Формат);
		
		ДанныеРазбора = ДанныеРазбораЭлектронногоДокумента(ДанныеЭлектронногоДокумента, ДеревоУчетныхДанных);
		
		ОтражениеВУчетеЭДО.ОтразитьДанныеЭлектронногоДокумента(ДанныеЭлектронногоДокумента, СпособОбработки,
			ОбъектыУчета, ДанныеРазбора);
		
		Для Каждого ОбъектУчета Из ОбъектыУчета Цикл
			ОбъектУчетаДокумента = ОбъектыУчетаДокументов.Добавить();
			ОбъектУчетаДокумента.ОбъектУчета = ОбъектУчета;
			ОбъектУчетаДокумента.ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		КонецЦикла;
		
		ОтражениеВУчетеЭДО.ВыполнитьКонтрольПроведенияУчетныхДокументов(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	
		НаКонтроль = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
		ОтражениеВУчетеЭДО.ВыполнитьКонтрольОтраженияВУчете(НаКонтроль);
		
	КонецЦикла;
	
	Возврат ОбъектыУчетаДокументов;
	
КонецФункции

// Параметры:
//  ДанныеЭлектронногоДокумента - см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  ДеревоУчетныхДанных - ДеревоЗначений
// 
// Возвращаемое значение:
//  Структура:
//  * ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  * НовыйЭД - см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
//  * Содержание - Неопределено
Функция ДанныеРазбораЭлектронногоДокумента(ДанныеЭлектронногоДокумента, ДеревоУчетныхДанных)
	
	ДеревоРазбора = ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора();
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить(); // см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
	
	НовыйЭД.НаправлениеЭД = ДанныеЭлектронногоДокумента.Направление;
	НовыйЭД.ВерсияФормата = ДанныеЭлектронногоДокумента.Формат;
	НовыйЭД.ВидЭД = ДанныеЭлектронногоДокумента.ТипДокумента;
	НовыйЭД.ЗначениеРеквизита = ДеревоУчетныхДанных;
	
	ДанныеДляОтражения = Новый Структура;
	ДанныеДляОтражения.Вставить("ДеревоРазбора", ДеревоРазбора);
	ДанныеДляОтражения.Вставить("НовыйЭД", НовыйЭД);
	ДанныеДляОтражения.Вставить("Содержание", Неопределено);
	
	Возврат ДанныеДляОтражения;
	
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторДокумента - Строка
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ФорматОсновногоТитула - Строка
//
Функция СвойстваДокументовДляОтраженияВУчете(ИдентификаторыДокументовЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументовЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ОписаниеДокументаЭДО - см. НовоеОписаниеДокументаЭДО
Процедура УстановитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, ОписаниеДокументаЭДО)
	
	Если Не ОписаниеДокументаЭДО.ЭтоВходящийЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеДокументаЭДО.ВидДокумента, "ТипДокумента"); // ПеречислениеСсылка.ТипыДокументовЭДО
	
	ДоступноОтражение = ОтражениеВУчетеЭДО.ДоступноОтражениеВУчете(ОписаниеДокументаЭДО.Формат, ТипДокумента,
		ОписаниеДокументаЭДО.Состояние);
	
	Если Не ДоступноОтражение Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
	КлючНастроек.Отправитель = ОписаниеДокументаЭДО.Контрагент;
	КлючНастроек.Получатель = ОписаниеДокументаЭДО.Организация;
	КлючНастроек.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
	
	НастройкиОтраженияВУчете = НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроек);
	
	ОтражениеОтключено = ОтражениеВУчетеЭДО.ОтражениеОтключено(НастройкиОтраженияВУчете.СпособОбработки);
	
	Если ОтражениеОтключено Тогда
		Возврат;
	КонецЕсли;
	
	ОтражениеВУчетеЭДО.УстановитьКонтрольОтраженияВУчете(ЭлектронныйДокумент);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура СоздатьОбъектыУчетаПоДокументамНаКонтролеОтражения(ЭлектронныеДокументы)
	
	ДокументыНаКонтроле = ОтражениеВУчетеЭДО.ДокументыНаКонтроле(ЭлектронныеДокументы);
	
	СпособыОбработкиДокументов = СпособыОбработкиДокументов(ДокументыНаКонтроле);
	
	СоздатьОбъектыУчетаПоДокументамЭДО(СпособыОбработкиДокументов);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Значение - Строка - способ обработки.
Функция СпособыОбработкиДокументов(ЭлектронныеДокументы)
	
	СпособыОбработкиДокументов = Новый Соответствие;
	
	Выборка = ВыборкаСвойствДокументовДляОпределенияНастроекОтражения(ЭлектронныеДокументы);
	Пока Выборка.Следующий() Цикл
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
		КлючНастроек.Отправитель = Выборка.Контрагент;
		КлючНастроек.Получатель = Выборка.Организация;
		КлючНастроек.ВидДокумента = Выборка.ВидДокумента;
		НастройкиОтраженияВУчете = НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроек);
		СпособыОбработкиДокументов.Вставить(Выборка.Ссылка, НастройкиОтраженияВУчете.СпособОбработки);
	КонецЦикла;
	
	Возврат СпособыОбработкиДокументов;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//
Функция ВыборкаСвойствДокументовДляОпределенияНастроекОтражения(ЭлектронныеДокументы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка В (&ЭлектронныеДокументы)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

#КонецОбласти

#Область Приглашения

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияПриглашенийИзСервисаЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам) Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПолучитьПриглашенияИзСервисаЭДО(
			ПараметрыВыполнения.МаркерыАвторизации);
		ИдентификаторМетода = ИдентификаторМетодаПолученияПриглашенийИзСервисаЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияПриглашенийИзСервисаЭДО()
	Возврат "ПолучитьПриглашенияИзСервиса"
КонецФункции

// Параметры:
//  РезультатПолучения - см. СервисОблачногоЭДО.НовыйРезультатПолученияПриглашенийИзСервисаЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПолученияПриглашенийИзСервисаЭДО(РезультатПолучения, РезультатДействий)
	
	Если ЗначениеЗаполнено(РезультатПолучения.Получено) Тогда
		Получено = РезультатДействий.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Загрузить];
		Получено = ?(ЗначениеЗаполнено(Получено), Получено + РезультатПолучения.Получено,
			РезультатПолучения.Получено);
		РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Загрузить, Получено);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыВыполненияОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияИзмененныхПриглашенийЭДО(ОписанияМетодов, ПараметрыВыполнения)
	
	ДатаСинхронизации = ПараметрыВыполнения.ОбъектыОперации.ДатыСинхронизацииПоТипам[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияПриглашенийЭДО];
	
	Если ДатаСинхронизации <> Неопределено Тогда
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаИзмененныеПриглашенияЭДО(ДатаСинхронизации);
		ИдентификаторМетода = ИдентификаторМетодаПолученияИзмененныхПриглашенийЭДО();
		СервисОблачногоЭДО.УстановитьИдентификаторМетода(ОписаниеМетода, ИдентификаторМетода);
		ОписанияМетодов.Добавить(ОписаниеМетода);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияИзмененныхПриглашенийЭДО()
	Возврат "ПолучитьПриглашения"
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  РезультатМетода - см. СервисОблачногоЭДО.НовыйРезультатПолученияИзмененныхПриглашенийЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПолученияИзмененныхПриглашенийЭДО(ИдентификаторУчетнойЗаписи, РезультатМетода, РезультатДействий)
	
	ПриглашенияВФорматеСервиса = РезультатМетода.ДанныеПриглашенийЭДО;
	Если ЗначениеЗаполнено(ПриглашенияВФорматеСервиса) Тогда
		
		Приглашения = ПриглашенияИзФорматаСервиса(ПриглашенияВФорматеСервиса);
		
		ОбновитьПриглашения(Приглашения);
		
	КонецЕсли;
	
	ДатаСинхронизации = ДатаИзФорматаСервиса(РезультатМетода.ДатаОкончанияВыборки);
	Если ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Записать(ИдентификаторУчетнойЗаписи,
			Перечисления.ТипыСинхронизацииОблачногоЭДО.СостоянияПриглашенийЭДО, ДатаСинхронизации);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПриглашенияВФорматеСервиса - Массив из Структура:
//  * Тип - Строка
//  * Ключ - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * Организация - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Контрагент - Структура:
//  ** Наименование - Строка
//  ** ИНН - Строка
//  ** КПП - Строка
//  * EmailОрганизации - Строка
//  * EmailКонтрагента - Строка
//  * ПолучательИНН - Строка
//  * ПолучательКПП - Строка
//  * ОператорЭДО - Строка
//  * ТекстПриглашения - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - Строка - дата в формате ISO.
//  * ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Массив из см. ПриглашенияЭДОСлужебный.НовыеЗначенияСвойствПриглашенияДляОбновления
Функция ПриглашенияИзФорматаСервиса(ПриглашенияВФорматеСервиса)
	
	Приглашения = Новый Массив; // См. ПриглашенияИзФорматаСервиса
	
	ОрганизацииВФорматеСервиса = Новый Массив;
	КонтрагентыВФорматеСервиса = Новый Массив;
	
	Для Каждого ПриглашениеВФорматеСервиса Из ПриглашенияВФорматеСервиса Цикл
		ДобавитьЗаполненноеЗначение(ОрганизацииВФорматеСервиса, ПриглашениеВФорматеСервиса.Организация);
		ДобавитьЗаполненноеЗначение(КонтрагентыВФорматеСервиса, ПриглашениеВФорматеСервиса.Контрагент);
	КонецЦикла;
	
	ОрганизацииПоИдентификаторам = ОрганизацииИзФорматаСервиса(ОрганизацииВФорматеСервиса);
	КонтрагентыПоИдентификаторам = КонтрагентыИзФорматаСервиса(КонтрагентыВФорматеСервиса);
	
	МетаданныеПеречисленияТипыПриглашений = Метаданные.Перечисления.ТипыПриглашений;
	МетаданныеПеречисленияСтатусыПриглашений = Метаданные.Перечисления.СтатусыПриглашений;
	
	Для Каждого ПриглашениеВФорматеСервиса Из ПриглашенияВФорматеСервиса Цикл
		
		Приглашение = ПриглашенияЭДО.НовыеЗначенияСвойствПриглашенияДляОбновления();
		Приглашение.Ключ = ПриглашениеВФорматеСервиса.Ключ;
		Приглашение.Тип = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ПриглашениеВФорматеСервиса.Тип,
			МетаданныеПеречисленияТипыПриглашений);
		Приглашение.ИдентификаторОрганизации = ПриглашениеВФорматеСервиса.ИдентификаторОрганизации;
		Приглашение.ИдентификаторКонтрагента = ПриглашениеВФорматеСервиса.ИдентификаторКонтрагента;
		Приглашение.EmailОрганизации = ПриглашениеВФорматеСервиса.EmailОрганизации;
		Приглашение.EmailКонтрагента = ПриглашениеВФорматеСервиса.EmailКонтрагента;
		Приглашение.ИНН = ПриглашениеВФорматеСервиса.ПолучательИНН;
		Приглашение.КПП = ПриглашениеВФорматеСервиса.ПолучательКПП;
		Приглашение.ИдентификаторОператора = ПриглашениеВФорматеСервиса.ИдентификаторОператора;
		Приглашение.ТекстПриглашения = ПриглашениеВФорматеСервиса.ТекстПриглашения;
		Приглашение.ОписаниеОшибки = ПриглашениеВФорматеСервиса.ОписаниеОшибки;
		Приглашение.Статус = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ПриглашениеВФорматеСервиса.Статус,
			МетаданныеПеречисленияСтатусыПриглашений);
		Приглашение.ДатаИзмененияСтатуса = ДатаИзФорматаСервиса(ПриглашениеВФорматеСервиса.ДатаИзмененияСтатуса);
		
		ИдентификаторОрганизации = ИдентификаторУчастникаСделкиПоРеквизитам(ПриглашениеВФорматеСервиса.Организация);
		Приглашение.Организация = ОрганизацииПоИдентификаторам[ИдентификаторОрганизации];
		ИдентификаторКонтрагента = ИдентификаторУчастникаСделкиПоРеквизитам(ПриглашениеВФорматеСервиса.Контрагент);
		Приглашение.Контрагент = КонтрагентыПоИдентификаторам[ИдентификаторКонтрагента];
		
		Приглашения.Добавить(Приглашение);
		
	КонецЦикла;
	
	Возврат Приглашения;
	
КонецФункции

// Параметры:
//  Приглашения - см. ПриглашенияИзФорматаСервиса
// 
Процедура ОбновитьПриглашения(Приглашения)
	
	Для Каждого Приглашение Из Приглашения Цикл
		
		ПриглашенияЭДО.ОбновитьСвойстваПриглашения(Приглашение);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Контрагенты - Массив из Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * ИдентификаторыКонтрагента - Массив из Строка
//  * ИдентификаторыОрганизации - Массив из Строка
//  * ФормироватьСписокВыбора - Булево
//  * ПриоритетПодключенные - Булево
Функция НовыеПараметрыПолученияСвязиИдентификаторовАбонентовВФорматеСервиса()
	Параметры = Новый Структура;
	Параметры.Вставить("Контрагенты", Новый Массив);
	Параметры.Вставить("ИдентификаторыКонтрагента", Новый Массив);
	Параметры.Вставить("ИдентификаторыОрганизации", Новый Массив);
	Параметры.Вставить("ФормироватьСписокВыбора", Ложь);
	Параметры.Вставить("ПриоритетПодключенные", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПолученияСвязи - см. ИнтерфейсДокументовЭДО.НовыеПараметрыПолученияСвязиИдентификаторов
//  КлючевыеРеквизитыКонтрагентов - Неопределено
//                                - см. КлючевыеРеквизитыКонтрагентов
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПолученияСвязиИдентификаторовАбонентовВФорматеСервиса
Функция ПараметрыПолученияСвязиИдентификаторовВФорматСервиса(ПараметрыПолученияСвязи, КлючевыеРеквизитыКонтрагентов = Неопределено)
	
	Если КлючевыеРеквизитыКонтрагентов = Неопределено Тогда
		Контрагенты = ?(ТипЗнч(ПараметрыПолученияСвязи.Контрагент) = Тип("Массив"), ПараметрыПолученияСвязи.Контрагент,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПолученияСвязи.Контрагент));
		КлючевыеРеквизитыКонтрагентов = КлючевыеРеквизитыКонтрагентов(Контрагенты);
	КонецЕсли;
	
	ПараметрыВФорматеСервиса = НовыеПараметрыПолученияСвязиИдентификаторовАбонентовВФорматеСервиса();
	ПараметрыВФорматеСервиса.ФормироватьСписокВыбора = Истина;
	ПараметрыВФорматеСервиса.ИдентификаторыОрганизации = ПараметрыПолученияСвязи.ИдентификаторыОрганизации;
	ПараметрыВФорматеСервиса.ИдентификаторыКонтрагента = ПараметрыПолученияСвязи.ИдентификаторыКонтрагента;
	
	Для Каждого РеквизитыКонтрагента Из КлючевыеРеквизитыКонтрагентов Цикл
		СтруктураРеквизитов = Новый Структура("Наименование, ИНН, КПП",
			РеквизитыКонтрагента.Наименование, РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП);
		ПараметрыВФорматеСервиса.Контрагенты.Добавить(СтруктураРеквизитов);
	КонецЦикла;
	
	Возврат ПараметрыВФорматеСервиса;
	
КонецФункции

// Параметры:
//  ПараметрыСвязиВФорматеСервиса - см. СервисОблачногоЭДО.НовыйРезультатМетодаНаборПараметровСвязиИдентификаторовАбонентовЭДО
//  КлючевыеРеквизитыКонтрагентов - см. КлючевыеРеквизитыКонтрагентов
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыеПараметрыСвязиИдентификаторов
Функция ПараметрыСвязиИзФорматаСервиса(ПараметрыСвязиВФорматеСервиса, КлючевыеРеквизитыКонтрагентов)
	
	ПараметрыСвязи = ИнтерфейсДокументовЭДО.НовыеПараметрыСвязиИдентификаторов();
	
	МетаданныеВариантыПотребностиСоглашения = Метаданные.Перечисления.ВариантыПотребностиСоглашенияНаРоуминг;
	МетаданныеСтатусыПриглашений = Метаданные.Перечисления.СтатусыПриглашений;
	
	Для Каждого ЭлементСвязиВФорматеСервиса Из ПараметрыСвязиВФорматеСервиса Цикл
		СтрокаПараметров = ПараметрыСвязи.Добавить();
		СтрокаПараметров.ЭтоОблачныйЭДО = Истина;
		СтрокаПараметров.Контрагент = КонтрагентПоКлючевымРеквизитам(КлючевыеРеквизитыКонтрагентов,
			ЭлементСвязиВФорматеСервиса.Контрагент);
		СтрокаПараметров.КонтрагентИНН = ЭлементСвязиВФорматеСервиса.Контрагент.ИНН;
		СтрокаПараметров.КонтрагентКПП = ЭлементСвязиВФорматеСервиса.Контрагент.КПП;
		СтрокаПараметров.ИдентификаторКонтрагента = ЭлементСвязиВФорматеСервиса.ИдентификаторКонтрагента;
		СтрокаПараметров.ИдентификаторКонтрагентаПредставление = ЭлементСвязиВФорматеСервиса.ИдентификаторКонтрагентаПредставление;
		СтрокаПараметров.ИдентификаторКонтрагентаОписание = ЭлементСвязиВФорматеСервиса.ИдентификаторКонтрагентаОписание;
		СтрокаПараметров.ОператорКонтрагента = ЭлементСвязиВФорматеСервиса.ОператорКонтрагента;
		СтрокаПараметров.ОператорКонтрагентаПредставление = ЭлементСвязиВФорматеСервиса.ОператорКонтрагентаПредставление;
		СтрокаПараметров.АбонентВХабе1С = ЭлементСвязиВФорматеСервиса.АбонентВХабе1С;
		СтрокаПараметров.ИдентификаторОрганизации = ЭлементСвязиВФорматеСервиса.ИдентификаторОрганизации;
		СтрокаПараметров.ИдентификаторОрганизацииПредставление = ЭлементСвязиВФорматеСервиса.ИдентификаторОрганизацииПредставление;
		СтрокаПараметров.ОператорОрганизации = ЭлементСвязиВФорматеСервиса.ОператорОрганизации;
		СтрокаПараметров.ИмяФайлаСоглашенияНаРоуминг = ЭлементСвязиВФорматеСервиса.ИмяФайлаСоглашенияНаРоуминг;
		СтрокаПараметров.РекомендацияПоНастройке = ЭлементСвязиВФорматеСервиса.РекомендацияПоНастройке;
		СтрокаПараметров.АбонентАктивен = ЭлементСвязиВФорматеСервиса.АбонентАктивен;
		СтрокаПараметров.СертификатДействителен = ЭлементСвязиВФорматеСервиса.СертификатДействителен;
		СтрокаПараметров.СтатусПодключения = ЭлементСвязиВФорматеСервиса.СтатусПодключения;
		СтрокаПараметров.ОператорыСовпадают = ЭлементСвязиВФорматеСервиса.ОператорыСовпадают;
		СтрокаПараметров.СвязьДоступна = ЭлементСвязиВФорматеСервиса.СвязьДоступна;
		СтрокаПараметров.ОтправкаТолькоНаИдентификаторЭДО = ЭлементСвязиВФорматеСервиса.ОтправкаТолькоНаИдентификаторЭДО;
		СтрокаПараметров.ТребуетсяСоглашение = ЭлементСвязиВФорматеСервиса.ТребуетсяСоглашение;
		СтрокаПараметров.ТребуетсяСоглашениеПриПервомПодключении = ЭлементСвязиВФорматеСервиса.ТребуетсяСоглашениеПриПервомПодключении;
		СтрокаПараметров.ОбязательнаяОтправкаЗаявкиНаРоуминг = ЭлементСвязиВФорматеСервиса.ОбязательнаяОтправкаЗаявкиНаРоуминг;
		СтрокаПараметров.ЗаявкаНаРоумингПринята = ЭлементСвязиВФорматеСервиса.ЗаявкаНаРоумингПринята;
		СтрокаПараметров.ПриглашениеОтправлено = ЭлементСвязиВФорматеСервиса.ПриглашениеОтправлено;
		
		СтрокаПараметров.СтатусПриглашенияПредставление = ЭлементСвязиВФорматеСервиса.СтатусПриглашенияПредставление;
		
		СтрокаПараметров.СписокВыбора = СписокВыбораИдентификаторовКонтрагентаИзФорматаСервиса(
			ЭлементСвязиВФорматеСервиса.СписокВыбора);
		
		СтрокаПараметров.Абоненты = АбонентыПараметровСвязиИдентификаторвИзФорматаСервиса(
			ЭлементСвязиВФорматеСервиса.Абоненты);
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.ВариантПотребностиСоглашения) Тогда
			ВариантПотребностиСоглашения = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ЭлементСвязиВФорматеСервиса.ВариантПотребностиСоглашения, МетаданныеВариантыПотребностиСоглашения); // ПеречислениеСсылка.ВариантыПотребностиСоглашенияНаРоуминг
			СтрокаПараметров.ВариантПотребностиСоглашения = ВариантПотребностиСоглашения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.СтатусПриглашенияНаИдентификатор) Тогда
			СтатусПриглашенияНаИдентификатор = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ЭлементСвязиВФорматеСервиса.СтатусПриглашенияНаИдентификатор, МетаданныеСтатусыПриглашений); // ПеречислениеСсылка.СтатусыПриглашений
			СтрокаПараметров.СтатусПриглашенияНаИдентификатор = СтатусПриглашенияНаИдентификатор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.СтатусШироковещательногоПриглашения) Тогда
			СтатусШироковещательногоПриглашения = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ЭлементСвязиВФорматеСервиса.СтатусШироковещательногоПриглашения, МетаданныеСтатусыПриглашений); // ПеречислениеСсылка.СтатусыПриглашений
			СтрокаПараметров.СтатусШироковещательногоПриглашения = СтатусШироковещательногоПриглашения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСвязиВФорматеСервиса.СтатусЗаявкиНаРоуминг) Тогда
			СтатусЗаявкиНаРоуминг = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ЭлементСвязиВФорматеСервиса.СтатусЗаявкиНаРоуминг, МетаданныеСтатусыПриглашений); // ПеречислениеСсылка.СтатусыПриглашений
			СтрокаПараметров.СтатусЗаявкиНаРоуминг = СтатусЗаявкиНаРоуминг;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыСвязи;
	
КонецФункции

// Параметры:
//  СписокВыбораВФорматеСервисе - Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  * СтатусПодключения - Число
// 
// Возвращаемое значение:
//  - Неопределено
//  - СписокЗначений из Строка
Функция СписокВыбораИдентификаторовКонтрагентаИзФорматаСервиса(СписокВыбораВФорматеСервисе)
	
	Если Не ЗначениеЗаполнено(СписокВыбораВФорматеСервисе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементСпискаВФорматеСервиса Из СписокВыбораВФорматеСервисе Цикл
		СписокВыбора.Добавить(ЭлементСпискаВФорматеСервиса.Идентификатор, ЭлементСпискаВФорматеСервиса.Наименование,,
			СинхронизацияЭДО.КартинкаСтатусаПодключенияАбонента(ЭлементСпискаВФорматеСервиса.СтатусПодключения));
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

// Параметры:
//  АбонентыВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - СписокЗначений из Структура:
//    * Идентификатор - Строка
//    * ИНН - Строка
//    * КПП - Строка
Функция АбонентыПараметровСвязиИдентификаторвИзФорматаСервиса(АбонентыВФорматеСервиса)
	
	Если Не ЗначениеЗаполнено(АбонентыВФорматеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Абоненты = Новый СписокЗначений;
	
	Для Каждого ЭлементСпискаВФорматеСервиса Из АбонентыВФорматеСервиса Цикл
		СвойстваАбонента = Новый Структура;
		СвойстваАбонента.Вставить("Идентификатор", ЭлементСпискаВФорматеСервиса.Идентификатор);
		СвойстваАбонента.Вставить("ИНН", ЭлементСпискаВФорматеСервиса.ИНН);
		СвойстваАбонента.Вставить("КПП", ЭлементСпискаВФорматеСервиса.КПП);
		Абоненты.Добавить(СвойстваАбонента, ЭлементСпискаВФорматеСервиса.Наименование);
	КонецЦикла;
	
	Возврат Абоненты;
	
КонецФункции

// Параметры:
//  ПараметрыСвязиИдентификаторов - см. ПараметрыСвязиИдентификаторов
// 
// Возвращаемое значение:
//  См. ПараметрыСвязиИдентификаторов
Функция ЗаполнитьПочтовыеАдресаКонтрагентовВПараметрахСвязиИдентификаторов(ПараметрыСвязиИдентификаторов)
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов) Тогда
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	Контрагенты = Новый Массив; // Массив из ОпределяемыйТип.УчастникЭДО
	Для Каждого СтрокаПараметров Из ПараметрыСвязиИдентификаторов Цикл
		ДобавитьУникальноеЗначение(Контрагенты, СтрокаПараметров.Контрагент);
	КонецЦикла;
	
	КонтактнаяИнформацияОбъектов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		Контрагенты, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,, ТекущаяДатаСеанса());
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияОбъектов) Тогда
		Возврат ПараметрыСвязиИдентификаторов;
	КонецЕсли;
	
	ОтборКонтрагента = Новый Структура("Объект", Неопределено);
	
	Для Каждого СтрокаПараметров Из ПараметрыСвязиИдентификаторов Цикл
		
		ОтборКонтрагента.Объект = СтрокаПараметров.Контрагент;
		КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов.НайтиСтроки(ОтборКонтрагента);
		Если Не ЗначениеЗаполнено(КонтактнаяИнформацияОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлектроннаяПочта Из КонтактнаяИнформацияОбъекта Цикл
			
			Если ЗначениеЗаполнено(ЭлектроннаяПочта.Представление)
				Или Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
					ЭлектроннаяПочта.Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаПараметров.ЭлектроннаяПочта) Тогда
				СтрокаПараметров.ЭлектроннаяПочта = ЭлектроннаяПочта.Представление;
			КонецЕсли;
			
			СтрокаПараметров.СписокВыбора.Добавить(ЭлектроннаяПочта.Представление);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПараметрыСвязиИдентификаторов;
	
КонецФункции

// Параметры:
//  СписокОператоровЭДОВФорматеСервиса - см. СервисОблачногоЭДО.НовыйРезультатМетодаСписокОператоровЭДО
// 
// Возвращаемое значение:
//  СписокЗначений из Строка
Функция СписокОператоровЭДОИзФорматаСервиса(СписокОператоровЭДОВФорматеСервиса)
	
	СписокОператоровЭДО = Новый СписокЗначений; // См. СписокОператоровЭДОИзФорматаСервиса
	
	Для Каждого ОператорВФорматеСервиса Из СписокОператоровЭДОВФорматеСервиса Цикл
		СписокОператоровЭДО.Добавить(ОператорВФорматеСервиса.Идентификатор, ОператорВФорматеСервиса.Наименование);
	КонецЦикла;
	
	Возврат СписокОператоровЭДО;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторОператора - Строка
//  * ПолучательИНН - Строка
//  * ПолучательКПП - Строка
//  * Организация - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Контрагент - Неопределено
//               - см. НовыйКонтрагентВФорматеСервиса
//  * EmailОрганизации - Строка
//  * EmailКонтрагента - Строка
//  * ТекстПриглашения - Строка
//  * ПисьмоОВыбореОператора - Неопределено,Структура:
//  ** ИмяФайла - Строка
//  ** Данные - Строка - ДвоичныеДанные в формате base64.
Функция НовыеДанныеПриглашенийДляОтправки()
	ДанныеПриглашения = Новый Структура;
	ДанныеПриглашения.Вставить("ИдентификаторДанных", "");
	ДанныеПриглашения.Вставить("ИдентификаторОрганизации", "");
	ДанныеПриглашения.Вставить("ИдентификаторКонтрагента", "");
	ДанныеПриглашения.Вставить("ИдентификаторОператора", "");
	ДанныеПриглашения.Вставить("ПолучательИНН", "");
	ДанныеПриглашения.Вставить("ПолучательКПП", "");
	ДанныеПриглашения.Вставить("Организация", Новый Структура);
	ДанныеПриглашения.Организация.Вставить("ИНН", "");
	ДанныеПриглашения.Организация.Вставить("КПП", "");
	ДанныеПриглашения.Вставить("Контрагент", Неопределено);
	ДанныеПриглашения.Вставить("EmailОрганизации", "");
	ДанныеПриглашения.Вставить("EmailКонтрагента", "");
	ДанныеПриглашения.Вставить("ТекстПриглашения", "");
	ДанныеПриглашения.Вставить("ПисьмоОВыбореОператора", Неопределено);
	Возврат ДанныеПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. НовыеДанныеПриглашенияДляОтклонения
Функция ДанныеПриглашенийДляОтправкиПоОрганизациям(Приглашения)
	
	Результат = Новый Соответствие; // См. ДанныеПриглашенийДляОтправкиПоОрганизациям
	
	Организации = Новый Массив;
	Контрагенты = Новый Массив;
	
	Для Каждого Приглашение Из Приглашения Цикл
		ДобавитьУникальноеЗначение(Организации, Приглашение.Организация);
		ДобавитьУникальноеЗначение(Контрагенты, Приглашение.Контрагент);
	КонецЦикла;
	
	КлючевыеРеквизитыОрганизаций = КлючевыеРеквизитыОрганизаций(Организации);
	
	КлючевыеРеквизитыКонтрагентов = КлючевыеРеквизитыКонтрагентов(Контрагенты);
	
	Для Каждого Приглашение Из Приглашения Цикл
		
		ДанныеПриглашений = Результат[Приглашение.Организация];
		Если ДанныеПриглашений = Неопределено Тогда
			ДанныеПриглашений = Новый Массив; // Массив из см. НовыеДанныеПриглашенийДляОтправки
			Результат.Вставить(Приглашение.Организация, ДанныеПриглашений);
		КонецЕсли;
		
		ДанныеПриглашения = НовыеДанныеПриглашенийДляОтправки();
		ДанныеПриглашения.ИдентификаторДанных = ИдентификаторДанныхПриглашения(Приглашение);
		ДанныеПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		ДанныеПриглашения.EmailОрганизации = Приглашение.EmailОрганизации;
		ДанныеПриглашения.ПолучательИНН = Приглашение.ПолучательИНН;
		ДанныеПриглашения.ПолучательКПП = Приглашение.ПолучательКПП;
		ДанныеПриглашения.ТекстПриглашения = Приглашение.ТекстПриглашения;
		
		ДанныеПриглашения.ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Приглашение, "ИдентификаторКонтрагента", "");
		ДанныеПриглашения.EmailКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Приглашение, "EmailКонтрагента", "");
		ДанныеПриглашения.ИдентификаторОператора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Приглашение, "ОператорЭДО", "");
		
		РеквизитыОрганизации = КлючевыеРеквизитыОрганизаций.Найти(Приглашение.Организация, "Организация");
		Если ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПриглашения.Организация, РеквизитыОрганизации);
		КонецЕсли;
		
		РеквизитыКонтрагента = КлючевыеРеквизитыКонтрагентов.Найти(Приглашение.Контрагент, "Контрагент");
		Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
			ДанныеПриглашения.Контрагент = НовыйКонтрагентВФорматеСервиса();
			ЗаполнитьЗначенияСвойств(ДанныеПриглашения.Контрагент, РеквизитыКонтрагента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Приглашение.АдресПисьмаОВыбореОператора) Тогда
			ФайлПисьма = ПолучитьИзВременногоХранилища(Приглашение.АдресПисьмаОВыбореОператора); // См. РаботаСФайламиБЭД.НовоеОписаниеФайла
			ФайлПисьмаВФорматеСервиса = Новый Структура("ИмяФайла, Данные","","");
			ФайлПисьмаВФорматеСервиса.ИмяФайла = ФайлПисьма.ИмяФайла;
			ФайлПисьмаВФорматеСервиса.Данные = Base64Строка(ФайлПисьма.ДвоичныеДанные);
			ДанныеПриглашения.ПисьмоОВыбореОператора = ФайлПисьмаВФорматеСервиса;
		КонецЕсли;
		
		ДанныеПриглашений.Добавить(ДанныеПриглашения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
Функция НовыеДанныеПриглашенияДляПринятия()
	ДанныеПриглашения = Новый Структура;
	ДанныеПриглашения.Вставить("ИдентификаторДанных", "");
	ДанныеПриглашения.Вставить("ИдентификаторОрганизации", "");
	ДанныеПриглашения.Вставить("ИдентификаторКонтрагента", "");
	Возврат ДанныеПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. НовыеДанныеПриглашенияДляОтклонения
Функция ДанныеПриглашенийДляПринятияПоОрганизациям(Приглашения)
	
	Результат = Новый Соответствие; // См. ДанныеПриглашенийДляПринятияПоОрганизациям
	
	Для Каждого Приглашение Из Приглашения Цикл
		
		ДанныеПриглашений = Результат[Приглашение.Организация];
		Если ДанныеПриглашений = Неопределено Тогда
			ДанныеПриглашений = Новый Массив; // Массив из см. НовыеДанныеПриглашенияДляПринятия
			Результат.Вставить(Приглашение.Организация, ДанныеПриглашений);
		КонецЕсли;
		
		ДанныеПриглашения = НовыеДанныеПриглашенияДляПринятия();
		ДанныеПриглашения.ИдентификаторДанных = ИдентификаторДанныхПриглашения(Приглашение);
		ДанныеПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		ДанныеПриглашения.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
		
		ДанныеПриглашений.Добавить(ДанныеПриглашения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ПричинаОтказа - Строка
Функция НовыеДанныеПриглашенияДляОтклонения()
	ДанныеПриглашения = Новый Структура;
	ДанныеПриглашения.Вставить("ИдентификаторДанных", "");
	ДанныеПриглашения.Вставить("ИдентификаторОрганизации", "");
	ДанныеПриглашения.Вставить("ИдентификаторКонтрагента", "");
	ДанныеПриглашения.Вставить("ПричинаОтказа", "");
	Возврат ДанныеПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. НовыеДанныеПриглашенияДляОтклонения
Функция ДанныеПриглашенийДляОтклоненияПоОрганизациям(Приглашения)
	
	Результат = Новый Соответствие; // См. ДанныеПриглашенийДляОтклоненияПоОрганизациям
	
	Для Каждого Приглашение Из Приглашения Цикл
		
		ДанныеПриглашений = Результат[Приглашение.Организация];
		Если ДанныеПриглашений = Неопределено Тогда
			ДанныеПриглашений = Новый Массив; // Массив из см. НовыеДанныеПриглашенияДляОтклонения
			Результат.Вставить(Приглашение.Организация, ДанныеПриглашений);
		КонецЕсли;
		
		ДанныеПриглашения = НовыеДанныеПриглашенияДляОтклонения();
		ДанныеПриглашения.ИдентификаторДанных = ИдентификаторДанныхПриглашения(Приглашение);
		ДанныеПриглашения.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		ДанныеПриглашения.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
		ДанныеПриглашения.ПричинаОтказа = Приглашение.ПричинаОтказа;
		
		ДанныеПриглашений.Добавить(ДанныеПриглашения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Приглашение - Структура:
//  * Ключ - Строка
//  * ИдентификаторОрганизации - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторДанныхПриглашения(Приглашение)
	Возврат Приглашение.КлючПриглашения + "#" + Приглашение.ИдентификаторОрганизации;
КонецФункции

// Параметры:
//  ИдентификаторДанных - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - см. ПриглашенияЭДОКлиентСервер.НовыйКлючПриглашения
Функция КлючПриглашенияИзИдентификатораДанных(ИдентификаторДанных)
	МассивСтрок = СтрРазделить(ИдентификаторДанных, "#"); // Массив из Строка
	Если Не ЗначениеЗаполнено(МассивСтрок)
		ИЛИ МассивСтрок.Количество() <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	КлючПриглашения = Новый Структура("Ключ, ИдентификаторОрганизации", МассивСтрок[0], МассивСтрок[1]);
	Возврат КлючПриглашения;
КонецФункции

// Параметры:
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//              - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
//  РасшифрованныеМаркеры - см. МаркерыАвторизацииИзРасшифрованныхМаркеров.РасшифрованныеМаркеры
//  
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. НовыйМаркерАвторизацииВФорматеСервиса
Функция МаркерыАвторизацииПоОрганизациямПриглашений(Приглашения, РасшифрованныеМаркеры)
	
	Результат = Новый Соответствие; // См. МаркерыАвторизацииПоОрганизациямПриглашений
	
	МаркерыАвторизации = МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры);
	
	МаркерыПоУчетнымЗаписям = Новый Соответствие;
	Для Каждого МаркерАвторизации Из МаркерыАвторизации Цикл
		МаркерыПоУчетнымЗаписям.Вставить(МаркерАвторизации.ИдентификаторУчетнойЗаписиЭДО, МаркерАвторизации);
	КонецЦикла;
	
	Для Каждого Приглашение Из Приглашения Цикл
		
		МаркерАвторизации = МаркерыПоУчетнымЗаписям[Приглашение.ИдентификаторОрганизации]; // См. НовыйМаркерАвторизацииВФорматеСервиса
		Если МаркерАвторизации = Неопределено Тогда
			Продолжить;
		Иначе
			МаркерыПоУчетнымЗаписям.Удалить(Приглашение.ИдентификаторОрганизации);
		КонецЕсли;
		
		МаркерыАвторизацииПоОрганизации = Результат[Приглашение.Организация];
		Если МаркерыАвторизацииПоОрганизации = Неопределено Тогда
			МаркерыАвторизацииПоОрганизации = Новый Массив; // Массив из см. НовыйМаркерАвторизацииВФорматеСервиса
			Результат.Вставить(Приглашение.Организация, МаркерыАвторизацииПоОрганизации);
		КонецЕсли;
		
		МаркерыАвторизацииПоОрганизации.Добавить(МаркерАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИмяМетода - Строка - Имя метода
//  ДанныеПриглашенийПоОрганизациям - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из Структура
//  МаркерыАвторизацииПоОрганизациям - см. МаркерыАвторизацииПоОрганизациямПриглашений
//  
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - см. СервисОблачногоЭДО.ВыполнитьМетодСервиса
Функция ВыполнитьДействиеСПриглашениямиВСервисе(ИмяМетода, ДанныеПриглашенийПоОрганизациям, МаркерыАвторизацииПоОрганизациям)
	
	Результат = Новый Соответствие;
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПриглашенийПоОрганизациям, "Ключ");
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиСервиса Цикл
		
		Организация = УчетнаяЗапись.Организация;
		
		ДанныеПриглашений = ДанныеПриглашенийПоОрганизациям[Организация];
		
		МаркерыАвторизации = МаркерыАвторизацииПоОрганизациям[Организация];
		
		ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(УчетнаяЗапись.Идентификатор);
		
		РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения,
			ИмяМетода, ДанныеПриглашений, МаркерыАвторизации);
		
		Результат.Вставить(Организация, РезультатВыполнения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатыСервисаПоОрганизациям - см. ВыполнитьДействиеСПриглашениямиВСервисе
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействияСПриглашениями
Функция ОбновитьСтатусыПриглашенийПоРезультатамСервиса(РезультатыСервисаПоОрганизациям)
	
	Результат = НовыйРезультатДействияСПриглашениями();
	Результат.КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	СтатусыПриглашенийВФорматеСервиса = Новый Массив; // См. СтатусыПриглашенийИзФорматаСервиса.СтатусыПриглашенийВФорматеСервиса
	
	Для Каждого РезультатСервисаПоОрганизации Из РезультатыСервисаПоОрганизациям Цикл
		
		РезультатСервиса = РезультатСервисаПоОрганизации.Значение;
		
		Если РезультатСервиса.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусыПриглашенийВФорматеСервисаПоОрганизации = РезультатСервиса.РезультатМетода; // См. СтатусыПриглашенийИзФорматаСервиса.СтатусыПриглашенийВФорматеСервиса
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтатусыПриглашенийВФорматеСервиса,
			СтатусыПриглашенийВФорматеСервисаПоОрганизации);
		
	КонецЦикла;
	
	СтатусыПриглашений = СтатусыПриглашенийИзФорматаСервиса(СтатусыПриглашенийВФорматеСервиса);
	
	ОбновитьСтатусыПриглашений(СтатусыПриглашений);
	
	Обработано = Результат.Обработано;
	Для Каждого СтатусПриглашения Из СтатусыПриглашений Цикл
		Если СтатусПриглашения.Статус <> Перечисления.СтатусыПриглашений.Ошибка Тогда
			Обработано = Обработано + 1;
		КонецЕсли;
	КонецЦикла;
	Результат.Обработано = Обработано;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СтатусыПриглашенийВФорматеСервиса - Массив из Структура:
//  * ИдентификаторДанных - Строка
//  * ИдентификаторОрганизации - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - Строка - дата в формате ISO.
//  * ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Массив из см. ПриглашенияЭДОСлужебный.НовыйСтатусПриглашения
Функция СтатусыПриглашенийИзФорматаСервиса(СтатусыПриглашенийВФорматеСервиса)
	
	СтатусыПриглашений = Новый Массив; // См. СтатусыПриглашенийИзФорматаСервиса
	
	МетаданныеПеречисленияСтатусыПриглашений = Метаданные.Перечисления.СтатусыПриглашений;
	
	Для Каждого СтатусПриглашенияВФорматеСервиса Из СтатусыПриглашенийВФорматеСервиса Цикл
		
		КлючПриглашения = КлючПриглашенияИзИдентификатораДанных(СтатусПриглашенияВФорматеСервиса.ИдентификаторДанных);
		Если КлючПриглашения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтатусПриглашения = ПриглашенияЭДО.НовыйСтатусПриглашения();
		СтатусПриглашения.Ключ = КлючПриглашения.Ключ;
		СтатусПриглашения.ИдентификаторОрганизации = КлючПриглашения.ИдентификаторОрганизации;
		Статус = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(СтатусПриглашенияВФорматеСервиса.Статус,
			МетаданныеПеречисленияСтатусыПриглашений); // ПеречислениеСсылка.СтатусыПриглашений
		СтатусПриглашения.Статус = Статус;
		СтатусПриглашения.ДатаИзмененияСтатуса = ДатаИзФорматаСервиса(
			СтатусПриглашенияВФорматеСервиса.ДатаИзмененияСтатуса);
		СтатусПриглашения.ОписаниеОшибки = СтатусПриглашенияВФорматеСервиса.ОписаниеОшибки;
		СтатусыПриглашений.Добавить(СтатусПриглашения);
		
	КонецЦикла;
	
	Возврат СтатусыПриглашений;
	
КонецФункции

// Параметры:
//  СтатусыПриглашений - Массив из см. ПриглашенияЭДОСлужебный.НовыйСтатусПриглашения
Процедура ОбновитьСтатусыПриглашений(СтатусыПриглашений)
	
	Для Каждого СтатусПриглашения Из СтатусыПриглашений Цикл
		
		ПриглашенияЭДО.ОбновитьСтатусПриглашения(СтатусПриглашения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АвторизацияВСервисеЭДО

// Возвращаемое значение:
//  Структура:
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатАвторизацииВСервисеЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЗашифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ИдентификаторыУчетныхЗаписейЭДО - Массив из Строка
//  ОтпечаткиПоКонтекстам - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  Организация - Неопределено,ОпределяемыйТип.Организация
//  ВыбранныйСертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  См. НовыйРезультатАвторизацииВСервисеЭДО
Функция АвторизоватьсяВСервисеЭДО(ИдентификаторыУчетныхЗаписейЭДО, ОтпечаткиПоКонтекстам, Организация = Неопределено, ВыбранныйСертификат = Неопределено) Экспорт
	
	Результат = НовыйРезультатАвторизацииВСервисеЭДО();
	
	ВидОперации = НСтр("ru = 'Авторизация в сервисе ЭДО'");
	ОтпечаткиПоКонтекстам = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, Неопределено,
		ОтпечаткиПоКонтекстам);
	
	Если ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
		Отпечаток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйСертификат, "Отпечаток"); // Строка
		Отпечатки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отпечаток); // Массив из Строка
		ОтпечаткиПоУчетнымЗаписямЭДО = Новый Соответствие;
		Для Каждого ИдентификаторЭДО Из ИдентификаторыУчетныхЗаписейЭДО Цикл
			ОтпечаткиПоУчетнымЗаписямЭДО.Вставить(ИдентификаторЭДО, Отпечатки);
		КонецЦикла;
	Иначе
		ОтпечаткиПоУчетнымЗаписямЭДО = УчетныеЗаписиЭДО.ОтпечаткиДействующихСертификатовПоУчетнымЗаписям(
			ОтпечаткиПоКонтекстам, ИдентификаторыУчетныхЗаписейЭДО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацииУчетныхЗаписейЭДО = Новый Соответствие;
		Для Каждого ИдентификаторЭДО Из ИдентификаторыУчетныхЗаписейЭДО Цикл
			ОрганизацииУчетныхЗаписейЭДО.Вставить(ИдентификаторЭДО, Организация);
		КонецЦикла;
	Иначе
		ОрганизацииУчетныхЗаписейЭДО = УчетныеЗаписиЭДО.ОрганизацииУчетныхЗаписей(ИдентификаторыУчетныхЗаписейЭДО);
	КонецЕсли;
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ОрганизацииУчетныхЗаписейЭДО, "Значение", Истина);
	
	УчетныеЗаписиСервиса = РегистрыСведений.УчетныеЗаписиОблачногоЭДО.Выгрузить(Организации);
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиСервиса Цикл
		
		Организация = УчетнаяЗапись.Организация;
		
		ИдентификаторыЭДО = Новый Массив; // Массив из Строка
		Отпечатки = Новый Массив; // Массив из Строка
		Для Каждого ОрганизацияУчетнойЗаписиЭДО Из ОрганизацииУчетныхЗаписейЭДО Цикл
			Если ОрганизацияУчетнойЗаписиЭДО.Значение <> Организация Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторыЭДО.Добавить(ОрганизацияУчетнойЗаписиЭДО.Ключ);
			ОтпечаткиУчетнойЗаписиЭДО = ОтпечаткиПоУчетнымЗаписямЭДО[ОрганизацияУчетнойЗаписиЭДО.Ключ];
			Если ЗначениеЗаполнено(ОтпечаткиУчетнойЗаписиЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отпечатки, ОтпечаткиУчетнойЗаписиЭДО);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыВыполнения = СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса(УчетнаяЗапись.Идентификатор);
		ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО(
			Отпечатки, ИдентификаторыЭДО);
		РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
		
		Если РезультатВыполнения.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатВыполнения.РезультатМетода, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УчетныеЗаписиЭДО

// Параметры:
//  РезультатСервиса - см. СервисОблачногоЭДО.НовыйРезультатПолученияИдентификаторовОрганизацииВСервисе1СЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ИдентификаторыОрганизацииИзФорматеСервиса
Функция ИдентификаторыОрганизацииПоРезультатуСервиса(РезультатСервиса, КонтекстДиагностики)
	
	СписокИдентификаторов = ИдентификаторыОрганизацииИзФорматеСервиса(РезультатСервиса.СписокИдентификаторов);
	
	Возврат СписокИдентификаторов;
	
КонецФункции

// Параметры:
//  ИдентификаторыОрганизацииВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  * ЕстьУчетнаяЗапись - Булево
// Возвращаемое значение:
//  СписокЗначений из Строка
Функция ИдентификаторыОрганизацииИзФорматеСервиса(ИдентификаторыОрганизацииВФорматеСервиса)
	
	СписокИдентификаторов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизацииВФорматеСервиса) Тогда
		Возврат СписокИдентификаторов;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаВФорматеСервиса Из ИдентификаторыОрганизацииВФорматеСервиса Цикл
		СписокИдентификаторов.Добавить(ЭлементСпискаВФорматеСервиса.Идентификатор,
			ЭлементСпискаВФорматеСервиса.Наименование);
	КонецЦикла;
	
	Возврат СписокИдентификаторов;
	
КонецФункции

// Параметры:
//  ОператорыДляРегистрацииВЭДОВФорматаСервиса - см. СервисОблачногоЭДО.НовыйРезультатМетодаОператорыДляРегистрацииВЭДО
// 
// Возвращаемое значение:
//  См. УчетныеЗаписиЭДО.НовыйСписокОператоровДляРегистрацииВЭДО
Функция ОператорыДляРегистрацииВЭДОИзФорматаСервиса(ОператорыДляРегистрацииВЭДОВФорматаСервиса)
	
	Операторы = УчетныеЗаписиЭДО.НовыйСписокОператоровДляРегистрацииВЭДО();
	
	Если Не ЗначениеЗаполнено(ОператорыДляРегистрацииВЭДОВФорматаСервиса) Тогда
		Возврат Операторы;
	КонецЕсли;
	
	МетаданныеПеречисленияСпособыОбменаЭД = Метаданные.Перечисления.СпособыОбменаЭД;
	
	Для Каждого ОператорВФорматеСервиса Из ОператорыДляРегистрацииВЭДОВФорматаСервиса Цикл
		Оператор = Операторы.Добавить();
		Оператор.Идентификатор = ОператорВФорматеСервиса.Идентификатор;
		Оператор.Наименование = ОператорВФорматеСервиса.Наименование;
		Оператор.ИНН = ОператорВФорматеСервиса.ИНН;
		Оператор.КПП = ОператорВФорматеСервиса.КПП;
		Оператор.ОГРН = ОператорВФорматеСервиса.ОГРН;
		Оператор.Сертификат = ОператорВФорматеСервиса.ОтпечатокСертификата;
		СпособОбмена = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ОператорВФорматеСервиса.СпособОбмена,
			МетаданныеПеречисленияСпособыОбменаЭД); // ПеречислениеСсылка.СпособыОбменаЭД
		Оператор.СпособОбмена = СпособОбмена;
	КонецЦикла;
	
	Возврат Операторы;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * ОператорЭДО - Строка
//  * ИдентификаторЭДО - Строка
//  * АдресОрганизации - Строка
//  * КодНалоговогоОргана - Строка
//  * ЭлектроннаяПочта - Строка
//  * СертификатыДляРегистрации - Массив из Строка
//  * ОтпечатокСертификатаДляПодписания - Строка
Функция НовыеДанныеЗаявкиНаРегистрациюВЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("ОператорЭДО", "");
	Данные.Вставить("ИдентификаторЭДО", "");
	Данные.Вставить("АдресОрганизации", "");
	Данные.Вставить("КодНалоговогоОргана", "");
	Данные.Вставить("ЭлектроннаяПочта", "");
	Данные.Вставить("СертификатыДляРегистрации", Новый Массив);
	Данные.Вставить("ОтпечатокСертификатаДляПодписания", "");
	Возврат Данные;
КонецФункции

// Параметры:
//  ПараметрыРегистрации - см. ИнтеграцияОблачногоЭДОКлиент.НовыеПараметрыРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  См. НовыеДанныеЗаявкиНаРегистрациюВЭДО
Функция ДанныеЗаявкиНаРегистрациюВЭДО(ПараметрыРегистрации)
	
	ДанныеЗаявки = НовыеДанныеЗаявкиНаРегистрациюВЭДО();
	ДанныеЗаявки.Идентификатор = РаботаСФайламиБЭД.НовыйUUID();
	ДанныеЗаявки.ОператорЭДО = ПараметрыРегистрации.ОператорЭДО;
	ДанныеЗаявки.ИдентификаторЭДО = ПараметрыРегистрации.ИдентификаторОрганизации;
	ДанныеЗаявки.КодНалоговогоОргана = ПараметрыРегистрации.КодНалоговогоОргана;
	ДанныеЗаявки.ЭлектроннаяПочта = ПараметрыРегистрации.ЭлектроннаяПочта;
	ДанныеЗаявки.АдресОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		ПараметрыРегистрации.АдресОрганизации);
	
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(ПараметрыРегистрации.СертификатыДляРегистрации);
	Для Каждого СвойстваСертификата Из СвойстваСертификатов Цикл
		ДанныеСертификата = СвойстваСертификата.Значение.ДанныеСертификата;
		ДанныеСертификатаСтрокой = Base64Строка(ДанныеСертификата);
		ДанныеЗаявки.СертификатыДляРегистрации.Добавить(ДанныеСертификатаСтрокой);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрыРегистрации.СертификатДляПодписания) Тогда
		ДанныеЗаявки.ОтпечатокСертификатаДляПодписания = КриптографияБЭД.ОтпечатокСертификата(
			ПараметрыРегистрации.СертификатДляПодписания);
	КонецЕсли;
	
	Возврат ДанныеЗаявки;
	
КонецФункции

// Параметры:
//  РезультатУстановки - см. СервисОблачногоЭДО.НовыйРезультатМетодаУстановитьДанныеАутентификацииПользователяИнтернетПоддежки
//  ТекстОшибки - строка
// 
// Возвращаемое значение:
//  Булево
Функция ДанныеАутентификацииПользователяИнтернетПоддержкиУстановлены(РезультатУстановки, ТекстОшибки)
	
	Если ЗначениеЗаполнено(РезультатУстановки.Ошибка) Тогда
		ТекстОшибки = РезультатУстановки.Ошибка;
	КонецЕсли;
	
	Возврат РезультатУстановки.Успех;
	
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено - ошибка отсутствует.
//           - Структура:
//  ** СертификатыУжеЗарегистрированы - Булево
//  ** ОтпечаткиСертификатовБезДоверенностей - Неопределено - отсутствуют сертификаты без доверенностей.
//                                - Массив из Строка - набор отпечатков сертификатов, по которым не найдена доверенность.
//  ** ОжиданиеДругойЗаявки - Неопределено - ожидание отсутствует.
//                         - Строка - идентификатор ожидаемой заявки.
//  ** Представление - Строка
//  РезультатПодготовкиДанных - см. ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЗаявкаНаРегистрациюВЭДОСформирована(РезультатФормирования, РезультатПодготовкиДанных)
	
	Если Не ЗначениеЗаполнено(РезультатФормирования.Ошибка) Тогда
		Возврат РезультатФормирования.Успех;
	КонецЕсли;
	
	Ошибка = РезультатФормирования.Ошибка;
	
	РезультатПодготовкиДанных.СертификатыУжеЗарегистрированы = Ошибка.СертификатыУжеЗарегистрированы;
	РезультатПодготовкиДанных.ТекстОшибки = Ошибка.Представление;
	
	Возврат РезультатФормирования.Успех;
	
КонецФункции

// Параметры:
//  РезультатЗаполнения - см. СервисОблачногоЭДО.НовыйРезультатМетодаЗаполнитьПодписантаДанныхНаРегистрациюВЭДО
//  ТекстОшибки - Строка - Текст ошибки
// 
// Возвращаемое значение:
//  Булево
Функция ПодписантДанныхНаРегистрациюВЭДОЗаполнен(РезультатЗаполнения, ТекстОшибки)
	
	Если ЗначениеЗаполнено(РезультатЗаполнения.Ошибка) Тогда
		ТекстОшибки = РезультатЗаполнения.Ошибка;
	КонецЕсли;
	
	Возврат РезультатЗаполнения.Успех;
	
КонецФункции

// Параметры:
//  РезультатФормирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаСформироватьЗаявкуНаРегистрациюВЭДО
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция СертификатыДляРегистрацииБезДоверенностей(РезультатФормирования)
	
	Сертификаты = Новый Массив; // См. СертификатыДляРегистрацииБезДоверенностей
	
	Если Не ЗначениеЗаполнено(РезультатФормирования.Ошибка) Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	ОтпечаткиСертификатовБезДоверенностей = РезультатФормирования.Ошибка.ОтпечаткиСертификатовБезДоверенностей;
	
	Если Не ЗначениеЗаполнено(ОтпечаткиСертификатовБезДоверенностей) Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(ОтпечаткиСертификатовБезДоверенностей);
	
	Сертификаты = ОбщегоНазначения.ВыгрузитьКолонку(СертификатыПоОтпечаткам, "Значение");
	
	Возврат Сертификаты;
	
КонецФункции

// Параметры:
//  ОперацияСервиса - см. СервисОблачногоЭДО.НоваяОперацияСервиса
//  Организация - ОпределяемыйТип.Организация
//  ДанныеЗаявки - см. ДанныеЗаявкиНаРегистрациюВЭДО
//  Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  - Неопределено - операция не выполнялась.
//  - См. СервисОблачногоЭДО.ВыполнитьОперациюСервиса
Функция СформироватьЗаявкуНаРегистрациюВЭДОПослеВыгрузкиДоверенностейПоСертификатам(ОперацияСервиса, Организация, ДанныеЗаявки, Сертификаты)
	
	Успех = Обработки.МашиночитаемыеДоверенностиОблачногоЭДО.ДобавитьОписанияМетодовЗагрузкиДоверенностейПоСертификатам(
		ОперацияСервиса, Организация, Сертификаты);
	Если Не Успех Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСформироватьЗаявкуНаРегистрациюВЭДО(ДанныеЗаявки);
	СервисОблачногоЭДО.ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода);
	
	РезультатОперации = СервисОблачногоЭДО.ВыполнитьОперациюСервиса(ОперацияСервиса);
	
	Возврат РезультатОперации;
	
КонецФункции

// Параметры:
//  РезультатПодготовкиДанных - см. СервисОблачногоЭДО.НовыйРезультатМетодаПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
//  ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеДанныеДляПодписанияНаРегистрациюВЭДО
Функция ДанныеДляПодписанияНаРегистрациюВЭДО(РезультатПодготовкиДанных, ТекстОшибки)
	
	Если ЗначениеЗаполнено(РезультатПодготовкиДанных.Ошибка) Тогда
		ТекстОшибки = РезультатПодготовкиДанных.Ошибка;
		Возврат Неопределено
	КонецЕсли;
	
	ДанныеДляПодписанияВФорматеСервиса = РезультатПодготовкиДанных.ДанныеДляПодписания;
	
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(
		ДанныеДляПодписанияВФорматеСервиса.ОтпечаткиСертификатовДляВыбора);
	
	ДанныеДляПодписания = НовыеДанныеДляПодписанияНаРегистрациюВЭДО();
	ДанныеДляПодписания.СертификатДляПодписания = СертификатыПоОтпечаткам[
		ДанныеДляПодписанияВФорматеСервиса.ОтпечатокСертификатаДляПодписания];
	ДанныеДляПодписания.СертификатыДляВыбора = ОбщегоНазначения.ВыгрузитьКолонку(СертификатыПоОтпечаткам, "Значение");
	ДанныеДляПодписания.ДанныеСоглашения = Base64Значение(ДанныеДляПодписанияВФорматеСервиса.ДанныеСоглашения);
	ДанныеДляПодписания.ДанныеДляРегистрации = Base64Значение(ДанныеДляПодписанияВФорматеСервиса.ДанныеДляРегистрации);
	
	Возврат ДанныеДляПодписания;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * ПодписьСоглашения - Строка
//  * ПодписьДанныхДляРегистрации - Строка
Функция НовыеПодписиЗаявкиНаРегистрациюВЭДО()
	ПодписиЗаявки = Новый Структура;
	ПодписиЗаявки.Вставить("Идентификатор", "");
	ПодписиЗаявки.Вставить("ПодписьСоглашения", "");
	ПодписиЗаявки.Вставить("ПодписьДанныхДляРегистрации", "");
	Возврат ПодписиЗаявки;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторыЭДО - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор заявки.
//  ** Значение - Строка - идентификатор ЭДО.
//  * ЗаявкиВОбрабоке - Соответствие из КлючИЗначение:
//  ** Ключ - ОпределяемыйТип.Организация
//  ** Значение - Массив из Строка
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатОбработкиРегистрационныхПакетовЭДО()
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЭДО", Новый Соответствие);
	Результат.Вставить("ЗаявкиВОбрабоке", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. СервисОблачногоЭДО.ПараметрыВыполненияМетодаСервиса
//  ИдентификаторыЗаявок - Массив из Строка
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторЗаявки - Строка
//  * ВОбработке - Булево
//  * ИдентификаторЭДО - Неопределено,Строка
//  * Ошибка - Неопределено,Строка
Функция СостоянияРегистрацииЗаявокВЭДО(ПараметрыВыполнения, ИдентификаторыЗаявок, КонтекстДиагностики)
	
	Результат = Новый Массив; // см. СостоянияРегистрацииЗаявокВЭДО
	
	ОписаниеМетода = СервисОблачногоЭДО.ОписаниеМетодаСостоянияРегистрацииЗаявокВЭДО(ИдентификаторыЗаявок);
	РезультатВыполнения = СервисОблачногоЭДО.ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Если РезультатВыполнения.ЕстьОшибка Тогда
		ВидОперации = НСтр("ru = 'Проверка статуса регистрации сертификата в сервисе ЭДО.'");
		ТекстСообщения = РезультатВыполнения.ТекстОшибки;
		ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	Результат = РезультатВыполнения.РезультатМетода;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатОбработки - см. НовыйРезультатОбработкиРегистрационныхПакетовЭДО
//  СостоянияРегистрации - см. СостоянияРегистрацииЗаявокВЭДО
//  Организация - ОпределяемыйТип.Организация
Процедура ЗаполнитьРезультатОбработкиПоСостояниямРегистрацииВЭДО(РезультатОбработки, СостоянияРегистрации, Организация)
	
	Если Не ЗначениеЗаполнено(СостоянияРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкиВОбрабоке = РезультатОбработки.ЗаявкиВОбрабоке;
	ИдентификаторыЭДО = РезультатОбработки.ИдентификаторыЭДО;
	КонтекстДиагностики = РезультатОбработки.КонтекстДиагностики;
	
	Для Каждого СостояниеРегистрации Из СостоянияРегистрации Цикл
		
		Если СостояниеРегистрации.ВОбработке Тогда
			ЗаявкиПоОрганизации = ЗаявкиВОбрабоке[Организация];
			Если ЗаявкиПоОрганизации = Неопределено Тогда
				ЗаявкиПоОрганизации = Новый Массив; // Массив из Строка
				ЗаявкиВОбрабоке.Вставить(Организация, ЗаявкиПоОрганизации);
			КонецЕсли;
			ЗаявкиПоОрганизации.Добавить(СостояниеРегистрации.ИдентификаторЗаявки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СостояниеРегистрации.ИдентификаторЭДО) Тогда
			ИдентификаторыЭДО.Вставить(СостояниеРегистрации.ИдентификаторЗаявки, СостояниеРегистрации.ИдентификаторЭДО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СостояниеРегистрации.Ошибка) Тогда
			ВидОперации = НСтр("ru = 'Регистрация сертификата в сервисе ЭДО.'");
			ТекстСообщения = СостояниеРегистрации.Ошибка;
			ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки)
	ВидОперации = НСтр("ru = 'Обновление информации об учетной записи ЭДО'");
	ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки)
	ВидОперации = НСтр("ru = 'Получение настройки уведомлений учетной записи ЭДО'");
	ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
