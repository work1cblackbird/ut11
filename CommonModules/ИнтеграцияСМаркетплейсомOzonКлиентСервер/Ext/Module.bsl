
#Область СлужебныеПроцедурыИФункции

// Формирует массив отбора по типам номенклатуры: Товар.
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ТипыНоменклатуры - список отбора.
//
Функция ОтборПоНоменклатуре() Экспорт

	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));

	Возврат МассивТиповНоменклатуры;

КонецФункции

// Возвращает массив составляющих из строки пути к полю, представлено в виде строки с точками-разделителями.
//
// Параметры:
//   ПутьКПолю - Строка - строка пути к полю с точками-разделителями вида "Номенклатура.ВидНоменклатуры.Наименование".
//
// Возвращаемое значение:
//   Массив Из Строка - составляющие из строки пути к полю.
//
Функция ЧастиПутиКПолю(Знач ПутьКПолю) Экспорт

	СоответствиеПутиДополнительногоСвойства = Новый Соответствие;

	НомерСвойства = 1;
	Пока Истина Цикл
		ПозицияНачала = СтрНайти(ПутьКПолю, ".[");
		Если ПозицияНачала = 0 Тогда
			Прервать;
		КонецЕсли;

		ПозицияКонца = СтрНайти(ПутьКПолю, "].");
		Если ПозицияКонца = 0 Тогда
			ПозицияКонца = 1;

			Пока ПозицияКонца <= СтрДлина(ПутьКПолю) Цикл
				ПозицияПоиска = СтрНайти(ПутьКПолю, "]",, ПозицияКонца);
				Если ПозицияПоиска = 0 Тогда
					Прервать;
				Иначе
					ПозицияКонца = ПозицияПоиска;
				КонецЕсли;
				
				ПозицияКонца = ПозицияКонца + 1;
			КонецЦикла;
		КонецЕсли;

		Если ПозицияКонца = 1 Тогда
			Прервать;
		КонецЕсли;

		Свойство = Сред(ПутьКПолю, ПозицияНачала + 1, ПозицияКонца - ПозицияНачала);
		ИмяСвойства = "Свойство" + НомерСвойства;

		СоответствиеПутиДополнительногоСвойства.Вставить(ИмяСвойства, Свойство);

		ПутьКПолю = СтрЗаменить(ПутьКПолю, Свойство, ИмяСвойства);

		НомерСвойства = НомерСвойства + 1;
	КонецЦикла;

	ЧастиПутиКПолю = СтрРазделить(ПутьКПолю, ".");

	Для Каждого СоответствиеПути Из СоответствиеПутиДополнительногоСвойства Цикл
		ИндексЭлемента = ЧастиПутиКПолю.Найти(СоответствиеПути.Ключ);
		Если ИндексЭлемента <> Неопределено Тогда 
			ЧастиПутиКПолю[ИндексЭлемента] = СоответствиеПути.Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат ЧастиПутиКПолю;

КонецФункции

Функция ПроверитьДублированиеДополнительногоРеквизита(ПутьКПолю, ЗаголовокПоля, ВыбранныеПоляКомпоновщикаНастроек) Экспорт

	Результат = "";

	Если ПустаяСтрока(ПутьКПолю) Тогда
		Возврат Результат;
	КонецЕсли;

	ЕстьДубли = Ложь;

	ЧастиПути = ЧастиПутиКПолю(ПутьКПолю);
	ЧастиПутиЗаголовка = ЧастиПутиКПолю(ЗаголовокПоля);

	МассивЧастейПутиКПолю = Новый Массив;
	МассивЧастейПутиКЗаголовку = Новый Массив;
	Счетчик = 1;
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		Если ЧастиПутиЗаголовка.Количество() >= Счетчик Тогда
			МассивЧастейПутиКЗаголовку.Добавить(ЧастиПутиЗаголовка[Счетчик - 1]);
		КонецЕсли;

		Если Счетчик > 1 Тогда
			ИмяРеквизита = СтрСоединить(МассивЧастейПутиКПолю, ".");
			Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
			КоллекцияПолей = ВыбранныеПоляКомпоновщикаНастроек.НайтиПоле(Поле);

			МассивЧастейПутиКПолю.Добавить(ЧастьПути);
			ИмяРеквизита = СтрСоединить(МассивЧастейПутиКПолю, ".");
			Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизита);

			КоличествоПолей = КоличествоВхожденийПоляВКоллекцию(Поле, КоллекцияПолей);

			Если КоличествоПолей > 1 Тогда
				ЕстьДубли = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			МассивЧастейПутиКПолю.Добавить(ЧастьПути);
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Если ЕстьДубли Тогда
		ПредставлениеПоля = ?(ПустаяСтрока(ЗаголовокПоля), ИмяРеквизита, СтрСоединить(МассивЧастейПутиКЗаголовку, "."));
		ШаблонСообщенияОбОшибке =
				НСтр("ru = 'Для реквизита 1С <%1> обнаружено дублирование наименования среди дополнительных реквизитов / сведений.'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, ПредставлениеПоля);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция КоличествоВхожденийПоляВКоллекцию(Поле, КоллекцияПолей)

	КоличествоПолей = 0;

	Если КоллекцияПолей = Неопределено Или Поле = Неопределено Тогда
		Возврат КоличествоПолей;
	КонецЕсли;

	Для Каждого ВыбранноеПоле Из КоллекцияПолей.Элементы Цикл
		Если Поле = ВыбранноеПоле.Поле Тогда 
			КоличествоПолей = КоличествоПолей + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат КоличествоПолей;

КонецФункции

Функция ОписаниеТипа(ТипЗначения1С, ТипЗначенияМаркетплейса = "") Экспорт

	Если ЗначениеЗаполнено(ТипЗначенияМаркетплейса) И ТипЗначенияМаркетплейса = "integer" Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(15, 0);
		ОписаниеТипа = Новый ОписаниеТипов(ТипЗначения1С,,, КвалификаторЧисла);
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов(ТипЗначения1С);
	КонецЕсли;

	Возврат ОписаниеТипа;

КонецФункции

Функция ПараметрыДействийДляКарточкиТовара() Экспорт

	ПараметрыДействий = Новый Структура;
	ПараметрыДействий.Вставить("Событие", "");
	ПараметрыДействий.Вставить("ПолучитьДанныеТовара", Ложь);
	ПараметрыДействий.Вставить("ОбновитьДанныеТовара", Ложь);
	ПараметрыДействий.Вставить("ОбновитьКатегориюМаркетплейса", Ложь);
	ПараметрыДействий.Вставить("ЗаполнитьДеревоРеквизитов", Ложь);
	ПараметрыДействий.Вставить("ЗаполнитьДеревоАтрибутов", Ложь);
	ПараметрыДействий.Вставить("ПолучитьОбъектыПубликации", Ложь);
	ПараметрыДействий.Вставить("ОбновитьОбъектыПубликации", Ложь);
	ПараметрыДействий.Вставить("ПолучитьОписаниеТовара", Ложь);
	ПараметрыДействий.Вставить("ПроверитьОшибки", Ложь);

	Возврат ПараметрыДействий;

КонецФункции

Функция НавигационнаяСсылкаНаТовар(SKU) Экспорт

	Возврат "https://www.ozon.ru/context/detail/id/" + SKU;

КонецФункции

//  Возвращает наименование регламентного задания
//
// Параметры:
//  Идентификатор - Строка - Идентификатор регламентного задания. Подробнее см.ПрефиксыСервиса()
// 
// Возвращаемое значение:
//  Строка - Наименование рег.задания
//
Функция НаименованиеРегламентногоЗадания(Идентификатор) Экспорт

	Наименования = Новый Структура();
	Наименования.Вставить("OzonBalanceUnload_",
		НСтр("ru = 'Ozon. Выгрузка остатков на маркетплейс'"));
	Наименования.Вставить("OzonBalanceLoad_",
		НСтр("ru = 'Ozon. Загрузка остатков с маркетплейса'"));
	Наименования.Вставить("OzonPriceUnload_",
		НСтр("ru = 'Ozon. Выгрузка цен продажи'"));
	Наименования.Вставить("OzonPriceLoad_",
		НСтр("ru = 'Ozon. Загрузка цен продажи'"));
	Наименования.Вставить("OzonProductCatalogUpdate_",
		НСтр("ru = 'Ozon. Обновление данных товарного каталога'"));
	Наименования.Вставить("OzonProductSalesLoad_",
		НСтр("ru = 'Ozon. Загрузка информации о продажах товаров'"));
	Наименования.Вставить("OzonProductSalesUpdate_",
		НСтр("ru = 'Ozon. Обновление информации о продажах товаров на складах торговой площадки'"));
	Наименования.Вставить("OzonNewOrdersLoad_",
		НСтр("ru = 'Ozon. Загрузка необработанных заказов с торговой площадки'"));
	Наименования.Вставить("OzonOrderStatusLoad_",
		НСтр("ru = 'Ozon. Обновление статусов заказов торговой площадки'"));
	Наименования.Вставить("OzonLabelsLoad_",
		НСтр("ru = 'Ozon. Получение этикеток для заказов торговой площадки'"));

	Наименование = Неопределено;
	Если Наименования.Свойство(Идентификатор, Наименование) Тогда
		Возврат Наименование;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Возвращает список используемых подсистемой префиксов настроек.
//
// Параметры:
//  ТолькоРегламентныеЗадания - Булево - признак возврата префиксов для регламентных заданий, по умолчанию Ложь.
//
// Возвращаемое значение:
//   Структура из КлючИЗначение - список используемых подсистемой префиксов настроек.
//
Функция ПрефиксыСервиса(ТолькоРегламентныеЗадания = Ложь) Экспорт

	Префиксы = Новый Структура;
	Если НЕ ТолькоРегламентныеЗадания Тогда
		Префиксы.Вставить("НастройкиСервиса",                           "OzonSetup_");
	КонецЕсли;
	Префиксы.Вставить("ВыгрузкаОстатков",                               "OzonBalanceUnload_");
	Префиксы.Вставить("ЗагрузкаОстатков",                               "OzonBalanceLoad_");
	Префиксы.Вставить("ВыгрузкаЦен",                                    "OzonPriceUnload_");
	Префиксы.Вставить("ЗагрузкаЦен",                                    "OzonPriceLoad_");
	Префиксы.Вставить("ОбновлениеТоварногоКаталога",                    "OzonProductCatalogUpdate_");
	Префиксы.Вставить("ЗагрузкаИнформацииОПродажахТоваров",             "OzonProductSalesLoad_");
	Префиксы.Вставить("ОбновлениеИнформацииОПродажахТоваров",           "OzonProductSalesUpdate_");
	Префиксы.Вставить("ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки", "OzonNewOrdersLoad_");
	Префиксы.Вставить("ОбновлениеСтатусовЗаказовТорговойПлощадки",      "OzonOrderStatusLoad_");
	Префиксы.Вставить("ПолучениеЭтикетокДляЗаказовТорговойПлощадки",    "OzonLabelsLoad_");

	Возврат Префиксы;

КонецФункции

// Возвращает список обязательных атрибутов сертификата.
//
// Возвращаемое значение:
//  Структура из КлючИЗначение - Список обязательных атрибутов сертификата с пользовательским представлением.
//
Функция ОбязательныеАтрибутыСертификата() Экспорт

	ОбязательныеАтрибутыСертификата = Новый Структура;
	ОбязательныеАтрибутыСертификата.Вставить("ОбъектПубликации", НСтр("ru = 'Сертификат номенклатуры информационной базы'"));
	ОбязательныеАтрибутыСертификата.Вставить("НаименованиеСертификата", НСтр("ru = 'Наименование сертификата'"));
	ОбязательныеАтрибутыСертификата.Вставить("НомерСертификата", НСтр("ru = 'Номер сертификата'"));
	ОбязательныеАтрибутыСертификата.Вставить("НаименованиеТипаСертификата", НСтр("ru = 'Тип сертификата'"));
	ОбязательныеАтрибутыСертификата.Вставить("ДатаНачалаСрокаДействия", НСтр("ru = 'Дата начала срока действия'"));

	Возврат ОбязательныеАтрибутыСертификата;

КонецФункции

// Возвращает список констант для сервиса.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - имена и значения констант.
//
Функция КонстантыСервиса() Экспорт

	Результат = Новый Соответствие;
	
	Результат.Вставить("ИдентификаторАтрибута_ТНВЭД",                     "22232");
	Результат.Вставить("ИдентификаторАтрибута_Наименование",              "4180");
	Результат.Вставить("ИдентификаторАтрибута_Аннотация",                 "4191");
	Результат.Вставить("ИдентификаторАтрибута_Изображение",               "4194");
	Результат.Вставить("ИдентификаторАтрибута_ТипТовара",                 "8229");
	Результат.Вставить("ИдентификаторАтрибута_ОбъединитьНаОднойКарточке", "8292");
	Результат.Вставить("ИдентификаторАтрибута_Артикул",                   "9024");
	
	Возврат Результат;

КонецФункции

// Устанавливает пометки в строке коллекции с учетом структуры подчинения.
//
// Параметры:
//  ОбъектПометки               - ДанныеФормыДерево, ДанныеФормыЭлементДерева, ДеревоЗначений, СтрокаДереваЗначений - 
//                                  данные для установки пометки.
//  Пометка                     - Булево - значение пометки.
//  ПоИерархии                  - Булево - признак.
//  ИмяПоляПометки              - Строка - имя поля для установки пометки.
//  ИмяПоляКоличестваПомеченных - Строка - имя поля для количества помеченных.
//
Процедура УстановитьСнятьПометки(Знач ОбъектПометки, Знач Пометка, ПоИерархии = Истина,
			ИмяПоляПометки = "Пометка", ИмяПоляКоличестваПомеченных = "КоличествоПомеченных") Экспорт

	Если ПоИерархии Тогда
		Если ТипЗнч(ОбъектПометки) = Тип("ДанныеФормыДерево")
				Или ТипЗнч(ОбъектПометки) = Тип("ДанныеФормыЭлементДерева") Тогда
			ИсточникСтрок = ОбъектПометки.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(ОбъектПометки) = Тип("ДеревоЗначений")
					Или ТипЗнч(ОбъектПометки) = Тип("СтрокаДереваЗначений") Тогда
			ИсточникСтрок = ОбъектПометки.Строки;
		Иначе
			Возврат;
		КонецЕсли;

		ОбъектПометки[ИмяПоляПометки] = Пометка;

		Для Каждого ПодчиненнаяСтрокаДерева Из ИсточникСтрок Цикл
			ИзмененаПометка = (ПодчиненнаяСтрокаДерева[ИмяПоляПометки] <> Пометка);
			УстановитьСнятьПометки(ПодчиненнаяСтрокаДерева, Пометка);

			Если ИзмененаПометка И Не ПустаяСтрока(ИмяПоляКоличестваПомеченных) Тогда
				ОбъектПометки[ИмяПоляКоличестваПомеченных] = ОбъектПометки[ИмяПоляКоличестваПомеченных] + 1 * ?(Пометка, 1, -1);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(ОбъектПометки) = Тип("ДанныеФормыДерево")
				Или ТипЗнч(ОбъектПометки) = Тип("ДанныеФормыЭлементДерева") Тогда
			РодительОбъектаПометки = ОбъектПометки.ПолучитьРодителя();
		ИначеЕсли ТипЗнч(ОбъектПометки) = Тип("ДеревоЗначений")
					Или ТипЗнч(ОбъектПометки) = Тип("СтрокаДереваЗначений") Тогда
			РодительОбъектаПометки = ОбъектПометки.Родитель;
		Иначе
			Возврат;
		КонецЕсли;

		Если РодительОбъектаПометки <> Неопределено Тогда
			Если Не ПустаяСтрока(ИмяПоляКоличестваПомеченных) Тогда
				РодительОбъектаПометки[ИмяПоляКоличестваПомеченных] = РодительОбъектаПометки[ИмяПоляКоличестваПомеченных] + 1 * ?(Пометка, 1, -1);

				Если РодительОбъектаПометки[ИмяПоляКоличестваПомеченных] > 0 Тогда
					РодительОбъектаПометки[ИмяПоляПометки] = Истина;
				Иначе
					РодительОбъектаПометки[ИмяПоляПометки] = Ложь;
				КонецЕсли;
			Иначе // Всегда устанавливается переданная пометка.
				РодительОбъектаПометки[ИмяПоляПометки] = Пометка;
			КонецЕсли;

			УстановитьСнятьПометки(РодительОбъектаПометки, Пометка, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Определяет необходимость пересчета весогабаритных показателей при изменении единицы измерения.
//
// Параметры:
//   ИдентификаторАтрибута              - Строка - идентификатор атрибута (единицы измерения).
//   ИдентификаторЗначенияАтрибута      - Строка - идентификатор значения атрибута.
//   НовыйИдентификаторЗначенияАтрибута - Строка - новый идентификатор значения атрибута.
//
// Возвращаемое значение:
//   Булево - требуется ли пересчет.
//
Функция ТребуетсяПересчетВесогабаритныхХарактеристик(ИдентификаторАтрибута, ИдентификаторЗначенияАтрибута, НовыйИдентификаторЗначенияАтрибута) Экспорт
	
	Если ИдентификаторАтрибута = "weight_unit"
			Или ИдентификаторАтрибута = "dimension_unit" Тогда
		Возврат ЗначениеЗаполнено(ИдентификаторЗначенияАтрибута)
					И ЗначениеЗаполнено(НовыйИдентификаторЗначенияАтрибута)
					И ИдентификаторЗначенияАтрибута <> НовыйИдентификаторЗначенияАтрибута; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
