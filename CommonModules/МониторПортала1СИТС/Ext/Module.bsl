///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает уведомления сервиса портала 1С:ИТС.
//
// Параметры:
//  ИдентификаторСервиса - Строка - идентификатор услуги портала 1С:ИТС.
// 
// Возвращаемое значение:
//  Массив из Структура - уведомления опции:
//    *ИдентификаторСервиса - Строка - идентификатор сервиса;
//    *ИдентификаторОпции - Строка - идентификатор опции;
//    *ВидУведомления - Строка - вид уведомления;
//    *СтраницаСервиса - Строка - страница сервиса;
//    *ДатаОкончания - ДатаИВремя - дата окончания действия опции.
//    *ДополнительныеПараметры - ФиксированноеСоответствие, Неопределено - дополнительные параметры опции.
//
Функция УведомленияПользователя(ИдентификаторСервиса) Экспорт
	
	Если ТипЗнч(ИдентификаторСервиса) <> Тип("Строка") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат КэшУведомленийМонитора(ИдентификаторСервиса);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

// Определяет возможность использования Монитора
// в соответствии с текущим режимом работы информационной базы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - возможно использование, Ложь - в противном случае.
//
Функция ДоступноИспользованиеМонитора() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.МониторПортала1СИТС);
	
КонецФункции

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервиса(0),
		НСтр("ru = 'Монитор Портала 1С'"));
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервиса(1),
		НСтр("ru = 'Монитор Портала 1С'"));
	
КонецПроцедуры

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		ОбновитьНастройкиПолученияУведомленийПортала('0001.01.01', "");
		РегистрыСведений.УведомленияМонитораПортала.Обновить(Новый Массив);
	Иначе
		ВключитьПолучениеУведомленийМонитораПортала();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак показа уведомлений портала 1С:ИТС
//
// Параметры:
//  Сервис - Строка - наименование сервиса;
//  ИдентификаторОпции - Строка - идентификатор опции сервиса;
//  Сдвиг - Число - сдвиг для корректировки даты информирования.
// 
// Возвращаемое значение:
//  Булево - признак необходимости показывать уведомление.
//
Функция ПоказыватьУведомлениеПортала(
	Сервис,
	ИдентификаторОпции,
	Сдвиг = 0) Экспорт
	
	ДатаИнформирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		МониторПортала1СИТСКлиентСервер.ИдентификаторНастроекМонитораПортала(),
		МониторПортала1СИТСКлиентСервер.КлючНастройкиДатаИнформированияОбОпциях(
			Новый Структура(
				"Сервис, ИдентификаторОпции",
				Сервис,
				ИдентификаторОпции)),
		'00010101');
	
	Возврат ((ДатаИнформирования + Сдвиг) < ТекущаяДатаСеанса());
	
КонецФункции

// Возвращает идентификатор ключа объекта хранилища общих настроек.
//
// Возвращаемое значение:
//  Строка - идентификатор настроек.
//
Функция ИдентификаторОбщихНастроек() Экспорт
	
	Возврат "ИнтернетПоддержкаПользователей";
	
КонецФункции

// Возвращает идентификатор ключа настройки монитора Портала 1С:ИТС "Всегда показывать при старте".
// 
//
// Возвращаемое значение:
//  Строка - ключ настройки.
//
Функция КлючНастройкиВсегдаПоказыватьПриСтартеПрограммы() Экспорт
	
	Возврат "ВсегдаПоказыватьПриСтартеПрограммы";
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Добавляет необходимые параметры работы клиента при запуске.
// Добавленные параметры доступны в
// СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей.<ИмяПараметра>;
// Используется в том случае, если подсистема реализует сценарий, выполняемый
// при начале работы системы.
// Вызывается из ИнтеграцияПодсистемБИП.ПриДобавленииПараметровРаботыКлиентаПриЗапуске().
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Не ДоступноИспользованиеМонитора() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры = ОбщиеПараметрыМонитора();
	Если Не ОбщиеПараметры.ИспользоватьОтображениеПриНачалеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПодключена =
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ИнтернетПоддержкаПодключена Тогда
		ЗначениеНастройкиПоказыватьПриНачалеРаботы = ЗначениеНастройкиПоказыватьПриНачалеРаботы();
		Если ЗначениеНастройкиПоказыватьПриНачалеРаботы = ЗначениеНастройкиПоказыватьПриСтартеНикогда() Тогда
			// Никогда не показывать при начале работы.
			Возврат;
		КонецЕсли;
	Иначе
		// Если Интернет-поддержка не подключена.
		Если ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки() Тогда
			// Есть право подключения Интернет-поддержки - при начале работы
			// будет предложено подключить Интернет-поддержку.
			ЗначениеНастройкиПоказыватьПриНачалеРаботы = ЗначениеНастройкиПоказыватьПриНачалеРаботы();
			Если ЗначениеНастройкиПоказыватьПриНачалеРаботы = ЗначениеНастройкиПоказыватьПриСтартеНикогда() Тогда
				// Никогда не показывать при начале работы.
				Возврат;
			КонецЕсли;
		Иначе
			// Нет права подключения Интернет-поддержки - не обрабатывать
			// событие начала работы с программой.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыМонитора = Новый Структура;
	ПараметрыМонитора.Вставить("ПоказыватьПриНачалеРаботы",   Истина);
	ПараметрыМонитора.Вставить("ИнтернетПоддержкаПодключена", ИнтернетПоддержкаПодключена);
	ПараметрыМонитора.Вставить("ЗначениеНастройкиПоказыватьПриНачалеРаботы", ЗначениеНастройкиПоказыватьПриНачалеРаботы);
	
	Параметры.Вставить("МониторПортала1СИТС", ПараметрыМонитора);
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервиса(0),
		443,
		НСтр("ru = 'Сервис Монитор Портала 1С:ИТС (зона ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервиса(1),
		443,
		НСтр("ru = 'Сервис Монитор Портала 1С:ИТС (зона eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. процедуру
// ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.2.5.1",
		"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.МониторИнтернетПоддержки",
		"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.МониторПортала1СИТС",
		"ИнтернетПоддержкаПользователей");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.2.5.1",
		"Роль.ИспользованиеМонитораИПП",
		"Роль.ИспользованиеМонитораПортала1СИТС",
		"ИнтернетПоддержкаПользователей");
	
КонецПроцедуры

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Вызывается перед началом обновления данных ИБ.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.7.3.8";
	Обработчик.Процедура           = "МониторПортала1СИТС.ВключитьПолучениеУведомленийМонитораПортала";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Монитор Портала 1С:ИТС. Включение получения информации об опциях сервисов портала 1С:ИТС.'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("9d26820b-62b8-4724-9ccb-cba691d76caf");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПолучениеУведомленийМонитораПортала.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбщиеПараметрыМонитора()
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьОтображениеПриНачалеРаботы", Истина);
	ИнтеграцияПодсистемБИП.ПриОпределенииОбщихПараметровМонитора(
		Результат);
	МониторПортала1СИТСПереопределяемый.ПриОпределенииОбщихПараметровМонитора(
		Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеНастройкиПоказыватьПриНачалеРаботы()
	
	НастройкаПоказПриСтарте = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИдентификаторОбщихНастроек(),
		КлючНастройкиНастройкаПоказПриСтарте());
		
	Если НастройкаПоказПриСтарте <> Неопределено Тогда
		Возврат НастройкаПоказПриСтарте;
	КонецЕсли;
	
	НастройкаЗапуска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИдентификаторОбщихНастроек(),
		КлючНастройкиВсегдаПоказыватьПриСтартеПрограммы());
	
	Если НастройкаЗапуска = Неопределено Тогда
		СохранитьНастройкиПоказПриСтарте(
			ЗначениеНастройкиПоказыватьПриСтартеВсегда());
		Возврат ЗначениеНастройкиПоказыватьПриСтартеВсегда();
	ИначеЕсли НастройкаЗапуска = Истина Тогда
		ПоказыватьПриОбновлении = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИдентификаторОбщихНастроек(),
			КлючНастройкиПоказПриСтартеТолькоПриИзменении());
		Если ПоказыватьПриОбновлении = Истина Тогда
			СохранитьНастройкиПоказПриСтарте(
				ЗначениеНастройкиПоказыватьПриСтартеПриНаличииНовойИнформации());
			Возврат ЗначениеНастройкиПоказыватьПриСтартеПриНаличииНовойИнформации();
		Иначе
			СохранитьНастройкиПоказПриСтарте(
				ЗначениеНастройкиПоказыватьПриСтартеВсегда());
			Возврат ЗначениеНастройкиПоказыватьПриСтартеВсегда();
		КонецЕсли;
	Иначе
		СохранитьНастройкиПоказПриСтарте(
			ЗначениеНастройкиПоказыватьПриСтартеНикогда());
		Возврат ЗначениеНастройкиПоказыватьПриСтартеНикогда();
	КонецЕсли;
	
КонецФункции

Процедура СохранитьНастройкиПоказПриСтарте(НастройкаПоказПриСтарте) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИдентификаторОбщихНастроек(),
		КлючНастройкиНастройкаПоказПриСтарте(),
		НастройкаПоказПриСтарте);
	
КонецПроцедуры

// Возвращает идентификатор ключа настройки монитора Портала 1С:ИТС "Показывать при старте".
//
// Возвращаемое значение:
//  Строка - ключ настройки.
//
Функция КлючНастройкиНастройкаПоказПриСтарте()
	
	Возврат "НастройкаПоказПриСтарте";
	
КонецФункции

// Возвращает идентификатор ключа настройки монитора Портала 1С:ИТС "Показывать при старте только при изменении".
// 
//
// Возвращаемое значение:
//  Строка - ключ настройки.
//
Функция КлючНастройкиПоказПриСтартеТолькоПриИзменении()
	
	Возврат "ПоказПриСтартеТолькоПриИзменении";
	
КонецФункции

Функция ЗначениеНастройкиПоказыватьПриСтартеВсегда()
	Возврат "Всегда";
КонецФункции

Функция ЗначениеНастройкиПоказыватьПриСтартеНикогда()
	Возврат "Никогда";
КонецФункции

Функция ЗначениеНастройкиПоказыватьПриСтартеПриНаличииНовойИнформации()
	Возврат "ПриНаличииНовойИнформации";
КонецФункции

Функция ЗначениеНастройкиПоказыватьПриСтартеПриПредупреждении()
	Возврат "ПриПредупреждении";
КонецФункции

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если ОбщиеПараметрыМонитора().ИспользоватьОтображениеПриНачалеРаботы Тогда
		Форма.ПоказыватьПриНачалеРаботы = ЗначениеНастройкиПоказыватьПриНачалеРаботы();
		Элементы.ПоказыватьПриНачалеРаботы.СписокВыбора.Добавить(
			ЗначениеНастройкиПоказыватьПриСтартеВсегда(),
			НСтр("ru = 'Всегда'"));
		Элементы.ПоказыватьПриНачалеРаботы.СписокВыбора.Добавить(
			ЗначениеНастройкиПоказыватьПриСтартеНикогда(),
			НСтр("ru = 'Никогда'"));
		Элементы.ПоказыватьПриНачалеРаботы.СписокВыбора.Добавить(
			ЗначениеНастройкиПоказыватьПриСтартеПриНаличииНовойИнформации(),
			НСтр("ru = 'При наличии новой информации'"));
		Элементы.ПоказыватьПриНачалеРаботы.СписокВыбора.Добавить(
			ЗначениеНастройкиПоказыватьПриСтартеПриПредупреждении(),
			НСтр("ru = 'При наличии новых предупреждений'"));
	Иначе
		Элементы.ПоказыватьПриНачалеРаботы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтпечатокДанныхМонитора(Логин, ДанныеМонитора)
	
	Если Логин = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСтрока =
		Логин
		+ ", "
		+ ЗначениеЗаполнено(ДанныеМонитора.programName) + ", "
		+ ДанныеМонитора.supportConditionsImplStatus.status + ", "
		+ ДанныеМонитора.serviceContractsStatus.status + ", "
		+ ДанныеМонитора.ДоступноОбновление;
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(ДанныеСтрока);
	Возврат Base64Строка(Хеширование.ХешСумма);
	
КонецФункции

Процедура СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора) Экспорт
	
	Если ДанныеМонитора <> Неопределено
		И ДанныеМонитора.authResult.authenticated Тогда
		Отпечаток = ОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	Иначе
		Отпечаток = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"МониторПортала1СИТС",
		"ОтпечатокДанныхМонитора",
		Лев(Отпечаток, 48));
	
КонецПроцедуры

Функция ДанныеМонитораИзменены(Логин, ДанныеМонитора)
	
	Отпечаток = ОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	
	Если Отпечаток = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныйОтпечаток = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"МониторПортала1СИТС",
		"ОтпечатокДанныхМонитора");
	
	Возврат (СохраненныйОтпечаток <> Отпечаток);
	
КонецФункции

Процедура ПроверитьНаличиеНовойИнформацииВФоне(ПараметрыМетода, АдресРезультата) Экспорт
	
	РезультатОперации = ДанныеМонитора();
	Если ПустаяСтрока(РезультатОперации.ИмяОшибки) Тогда
		
		ДанныеМонитора = РезультатОперации.Данные;
		Если ДанныеМонитора.authResult.authenticated Тогда
			
			Если ДанныеМонитора.programName = Неопределено Тогда
				ПоместитьВоВременноеХранилище("НетИзменений", АдресРезультата);
				ЗаписатьИнформациюВЖурналРегистрации(
					НСтр("ru = 'Интернет-поддержка продукта не оказывается.
						|Не удалось проверить наличие новой информации в сервисе Монитора Портала 1С:ИТС.'"));
				Возврат;
			КонецЕсли;
			
			СообщениеОбОшибкеДанных = ОписаниеОшибкиПолученияДанныхМонитора(ДанныеМонитора);
			Если Не ПустаяСтрока(СообщениеОбОшибкеДанных) Тогда
				
				ЗаписатьОшибкуВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось проверить изменение информации Монитора Портала 1С:ИТС из-за ошибки получения данных:
							|%1'"),
						СообщениеОбОшибкеДанных));
				ПоместитьВоВременноеХранилище("Ошибка", АдресРезультата);
				
			Иначе
				
				Если ДанныеМонитораИзменены(РезультатОперации.Логин, РезультатОперации.Данные) Тогда
					ПоместитьВоВременноеХранилище("ДанныеИзменены", АдресРезультата);
				Иначе
					ПоместитьВоВременноеХранилище("НетИзменений", АдресРезультата);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось проверить изменение информации Монитора Портала 1С:ИТС.
						|Заполнены некорректные данные аутентификации.
						|%1'"),
					РезультатОперации.ИнформацияОбОшибке));
			ПоместитьВоВременноеХранилище("Ошибка", АдресРезультата);
			
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.ИмяОшибки = "НеЗаполненыДанныеАутентификации" Тогда
		
		ПоместитьВоВременноеХранилище("НетИзменений", АдресРезультата);
		
	Иначе
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось проверить изменение информации Монитора Портала 1С:ИТС.
					|%1'"),
				РезультатОперации.ИнформацияОбОшибке));
		ПоместитьВоВременноеХранилище("Ошибка", АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеУведомлений() Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало получения уведомлений Монитора Портала 1С:ИТС'"));
	
	ДатаОбновления = ТекущаяУниверсальнаяДата();
	АктуальныеДанные = (НастройкиПолученияУведомленийПортала().ДатаОбновления + 86400 > ДатаОбновления);
	Если АктуальныеДанные Тогда
		Возврат "НетПредупреждений";
	КонецЕсли;
	
	РезультатОперации = УведомленияИзМонитора();
	
	Если ПустаяСтрока(РезультатОперации.ИмяОшибки) Тогда
		
		Уведомления = РезультатОперации.Данные.Получить("applicationNotifications");
		ОбновитьУведомленияМонитораПортала(
			Уведомления);
		ОбновитьНастройкиПолученияУведомленийПортала(
			ДатаОбновления,
			РезультатОперации.Данные.Получить("dataDigest"));
		
		Если Уведомления.Количество() > 0 Тогда
			Возврат "ЕстьПредупреждения";
		Иначе
			Возврат "НетПредупреждений";
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.ИмяОшибки = "НеЗаполненыДанныеАутентификации" Тогда
		Возврат "НетПредупреждений";
	ИначеЕсли РезультатОперации.ИмяОшибки = "НетИзменений" Тогда
		ОбновитьНастройкиПолученияУведомленийПортала(
			ДатаОбновления);
		Возврат "НетПредупреждений";
	Иначе
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось проверить уведомления Монитора Портала 1С:ИТС.
					|%1'"),
				РезультатОперации.ИнформацияОбОшибке));
		Возврат "Ошибка";
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение уведомление Монитора Портала 1С:ИТС'"));
	
КонецФункции

// Возвращает настройки получения уведомлений портала.
// 
// Возвращаемое значение:
//  Структура - настройки получения уведомлений:
//    *ОтпечатокУведомлений - Строка - хеш уведомлений;
//    *ДатаОбновления - Дата - дата актуализации уведомлений.
//
Функция НастройкиПолученияУведомленийПортала()
	
	Результат = Новый Структура(
		"ОтпечатокУведомлений,ДатаОбновления",
		"",
		'0001.01.01');
	УстановитьПривилегированныйРежим(Истина);
	Настройки = Константы.НастройкиПолученияУведомленийПортала.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(
			Результат,
			Настройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет настройки получения уведомлений портала.
//
// Параметры:
//  ДатаОбновления - Дата - дата актуализации настроек;
//  ОтпечатокУведомлений - Строка, Неопределено - полученный хеш уведомлений,
//                                    Неопределено, когда обновление не требуется.
// 
// Возвращаемое значение:
//   - 
//
Функция ОбновитьНастройкиПолученияУведомленийПортала(
	ДатаОбновления,
	ОтпечатокУведомлений = Неопределено)
	
	ТекущиеНастройки = НастройкиПолученияУведомленийПортала();
	ТекущиеНастройки.ДатаОбновления = ДатаОбновления;
	Если ОтпечатокУведомлений <> Неопределено Тогда
		ТекущиеНастройки.ОтпечатокУведомлений = ОтпечатокУведомлений;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.НастройкиПолученияУведомленийПортала.Установить(
		Новый ХранилищеЗначения(ТекущиеНастройки));
	
КонецФункции

Процедура ОбновитьУведомленияМонитораПортала(
	ДанныеУведомлений)
	
	ДанныеУведомленийСервисов = Новый Массив;
	Для Каждого ДанныеСервиса Из ДанныеУведомлений Цикл
		
		ИдентификаторСервиса        = ДанныеСервиса.Получить("applicationNick");
		СтраницаСервиса             = ДанныеСервиса.Получить("applicationPageUrl");
		
		Для Каждого ДанныеУведомления Из ДанныеСервиса.Получить("notifications") Цикл
			
			ДанныеУведомленияСервиса = Новый Структура;
			ДанныеУведомленияСервиса.Вставить("ИдентификаторСервиса",     ИдентификаторСервиса);
			ДанныеУведомленияСервиса.Вставить("ИдентификаторУведомления", ДанныеУведомления.Получить("id"));
			ДанныеУведомленияСервиса.Вставить("СтраницаСервиса",          СтраницаСервиса);
			ДанныеУведомленияСервиса.Вставить("ВидУведомления",           ДанныеУведомления.Получить("type"));
			
			ДополнительныеПараметры = ДанныеУведомления.Получить("details");
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Соответствие") Тогда
				
				ДополнительныеПараметры = Новый ФиксированноеСоответствие(ДополнительныеПараметры);
				ДанныеУведомленияСервиса.Вставить("ИдентификаторОпции",  ДополнительныеПараметры.Получить("optionTypeNick"));
				ДанныеУведомленияСервиса.Вставить("ДатаОкончания",       ДополнительныеПараметры.Получить("optionValidTill"));
				
			КонецЕсли;
			ДанныеУведомленияСервиса.Вставить("ДополнительныеПараметры", Новый ХранилищеЗначения(ДополнительныеПараметры));
			
			ДанныеУведомленийСервисов.Добавить(ДанныеУведомленияСервиса);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.УведомленияМонитораПортала.Обновить(ДанныеУведомленийСервисов);
	
КонецПроцедуры

// Возвращает уведомления пользователю портала 1С:ИТС.
// Если данные устарели, тогда уведомления не будут показаны.
//
// Параметры:
//  ИдентификаторСервиса - Строка, Неопределено - идентификатор услуги портала 1С:ИТС.
//                         Если Неопределено, тогда для всех сервисов.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение, Массив из Структура - уведомления сервисов.
//                         Если Соответствие, тогда для всех сервисов.
//                         Если Массив, тогда для указанного сервиса.
//    *Ключ - Строка - идентификатор сервиса.
//    *Значение - Массив из Структура - уведомления сервиса:
//      **ИдентификаторСервиса - Строка - Идентификатор сервиса;
//      **ИдентификаторОпции - Строка - Идентификатор опции;
//      **ВидУведомления - Строка - вид уведомления;
//      **СтраницаСервиса - Строка - страница сервиса;
//      **ДатаОкончания - ДатаИВремя - дата окончания действия опции.
//      **ДополнительныеПараметры - ФиксированноеСоответствие, Неопределено - дополнительные параметры уведомления.
//
Функция КэшУведомленийМонитора(ИдентификаторСервиса = Неопределено) Экспорт
	
	ДатаОбновления = ТекущаяУниверсальнаяДата();
	АктуальныеДанные = (НастройкиПолученияУведомленийПортала().ДатаОбновления + 86400 > ДатаОбновления);
	Если Не АктуальныеДанные Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Если ИдентификаторСервиса = Неопределено Тогда
		Результат = РегистрыСведений.УведомленияМонитораПортала.УведомленияПортала1СИТС();
	Иначе
		Результат = РегистрыСведений.УведомленияМонитораПортала.УведомленияСервисаПортала1СИТС(ИдентификаторСервиса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует список предупреждений для отображения в Мониторе портала 1С:ИТС
//
// Параметры:
//  ДанныеСервисов - Соответствие - данные предупреждений сервисов.
// 
// Возвращаемое значение:
//  Массив - тексты предупреждений.
//
Функция ТекстыПредупреждений(ДанныеСервисов) Экспорт
	
	ТекстыПредупреждений = Новый Массив;
	Для Каждого ДанныеСервиса Из ДанныеСервисов Цикл
		
		ИнтеграцияПодсистемБИП.ПриФормированииТекстовПредупреждений(
			ДанныеСервиса,
			ТекстыПредупреждений);
		МониторПортала1СИТСПереопределяемый.ПриФормированииТекстовПредупреждений(
			ДанныеСервиса,
			ТекстыПредупреждений);
		
	КонецЦикла;
	
	Возврат ТекстыПредупреждений;
	
КонецФункции

Функция ОписаниеОшибкиПолученияДанныхМонитора(ДанныеМонитора) Экспорт
	
	Результат = "";
	
	Если ДанныеМонитора.supportConditionsImplStatus <> Неопределено
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> "200"
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> 200 Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '- состояние выполнения условий сопровождения (blockStatus: %1);'"),
				ДанныеМонитора.supportConditionsImplStatus.blockStatus);
	КонецЕсли;
	
	Если ДанныеМонитора.serviceContractsStatus <> Неопределено
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> "200"
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> 200 Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '- подключение сервисов 1С (blockStatus: %1);'"),
				ДанныеМонитора.serviceContractsStatus.blockStatus);
	КонецЕсли;
	
	Если ДанныеМонитора.updateInfo <> Неопределено
		И ДанныеМонитора.updateInfo.blockStatus <> "200"
		И ДанныеМонитора.updateInfo.blockStatus <> 200 Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '- наличие обновления программы (blockStatus: %1);'"),
				ДанныеМонитора.updateInfo.blockStatus);
	КонецЕсли;
	
	Если ДанныеМонитора.patchesInfo <> Неопределено
		И ДанныеМонитора.patchesInfo.blockStatus <> "200"
		И ДанныеМонитора.patchesInfo.blockStatus <> 200 Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '- наличие исправлений (патчей) конфигурации (blockStatus: %1);'"),
				ДанныеМонитора.patchesInfo.blockStatus);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(СообщениеЖурнала) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		СообщениеЖурнала);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Монитор Портала 1С:ИТС'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#Область ВызовОперацийСервиса

// Проверяет доступность сервиса Монитор и возвращает информацию о наличии доступных обновлений.
//
// Возвращаемое значение:
//  Структура:
//   * ИмяОшибки - Строка - идентификатор ошибки. Доступные значения:
//       "НеЗаполненоИмяПрограммы" - не заполнено имя программы см. свойство ИдентификаторИнтернетПоддержки в методе
//         ПриДобавленииПодсистемы().
//       "НеЗаполненыДанныеАутентификации" - информационная база не подключения к ИПП.
//       "ОшибкаСоединения" - не удалось подключиться к сервису.
//       "СервисВременноНедоступен" - сервис временно недоступен.
//       "Ошибка" - прочая ошибка подключения к сервису.
//       "ВнутренняяОшибкаСервиса" - сервис вернул неклассифицированную ошибку.
//   * СообщениеОбОшибке - Строка - краткое описание ошибки.
//   * ИнформацияОбОшибке - Строка - подробное описание ошибки.
//   * КодСостояния - Число - код ответа сервиса.
//   * Данные - Неопределено - ошибка получения информации о наличии доступных обновлений из сервиса.
//            - Структура - ответ сервиса:
//       ** ДоступноОбновление - Булево - Истина, если доступно обновление конфигурации и/или доступна установка
//            исправлений (патчей).
//       ** ИнформироватьОВыходеВерсийДлительнойПоддержки - Булево - если Истина, то программа будет отправлять
//            уведомления о выходе новых сборок текущей версии в период срока поддержки и о выходе новых версий после
//            окончания срока поддержки у текущей версии.
//       ** authResult - Структура - результат проверки данных авторизации:
//            *** blockStatus - Строка, Число - код проверки данных авторизации. 200 - успешно.
//            *** authenticated - Булево - Истина, если данные авторизации верны.
//       ** programName - Строка - представление программы.
//       ** supportConditionsImplStatus - Структура - состояние выполнения условий сопровождения:
//            *** blockStatus - Строка, Число - код проверки состояний выполнения условий сопровождения. 200 - успешно.
//            *** status - Строка - статус состояния выполнения условий сопровождения.
//            *** itsStatus - Неопределено, Строка -
//            *** productRegistrationStatus - Неопределено, Строка -
//            *** supportServiceActivationStatus - Неопределено, Строка -
//       ** serviceContractsStatus - Структура - подключение сервисов 1С:
//            *** blockStatus - Строка, Число - код проверки подключения сервисов 1С. 200- успешно.
//            *** status - Строка - статус подключения сервисов 1С.
//       ** updateInfo - Структура - наличие обновлений программы:
//            *** blockStatus - Строка, Число - код проверки наличия обновлений программы. 200 - успешно.
//            *** updateAvailable - Булево - Истина, если доступно обновление.
//       ** patchesInfo - Структура - наличие исправлений (патчей) конфигурации:
//            *** blockStatus - Строка, Число - код проверки наличия исправлений (патчей) конфигурации. 200 - успешно.
//            *** patchesAvailable - Булево - Истина, если доступны исправления (патчи).
//   * Логин - Неопределено - информационная база не подключения к ИПП.
//           - Строка - логин, подключенный к ИПП.
//   * Домен - Число - см. ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами свойство
//       ДоменРасположенияСерверовИПП.
//
Функция ДанныеМонитора() Экспорт
	
	Результат = НовыйРезультатВызоваОперации();
	
	Если Не ДоступноИспользованиеМонитора() Тогда
		ВызватьИсключение НСтр("ru = 'Использование Монитора недоступно в текущем режиме работы.'");
	КонецЕсли;
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	Результат.Вставить("Логин", Неопределено);
	Результат.Вставить("Домен", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ИмяПрограммы                  = Неопределено;
	ДанныеАутентификации          = Неопределено;
	ПередВызовомОперацииСервиса(ИмяПрограммы, ДанныеАутентификации, Результат);
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Логин = ДанныеАутентификации.Логин;
	
	ВерсияКонфигурации   = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();
	ВерсияПлатформы      = ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие();
	ПараметрыОбновления  = Неопределено;
	ПодсистемаСуществует =
		ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы");
	
	Если ПодсистемаСуществует Тогда
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		ПараметрыОбновления                = МодульПолучениеОбновленийПрограммы.СлужебнаяПараметрыПолученияОбновлений();
		Если ПараметрыОбновления.ПолучатьИсправления Тогда
			ПараметрыОбновления.Вставить("УстановленныеИсправления",
				МодульПолучениеОбновленийПрограммы.ИдентификаторыУстановленныхИсправлений());
		Иначе
			ПараметрыОбновления.Вставить("УстановленныеИсправления", Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДанныеАутентификации", ДанныеАутентификации);
	ПараметрыОперации.Вставить("Домен",                НастройкиСоединения.ДоменРасположенияСерверовИПП);
	ПараметрыОперации.Вставить("ИмяПрограммы",         ИмяПрограммы);
	ПараметрыОперации.Вставить("ВерсияКонфигурации",   ВерсияКонфигурации);
	ПараметрыОперации.Вставить("ВерсияПлатформы",      ВерсияПлатформы);
	ПараметрыОперации.Вставить("ПараметрыОбновления",  ПараметрыОбновления);
	ПараметрыОперации.Вставить("ОтпечатокУведомлений", НастройкиПолученияУведомленийПортала().ОтпечатокУведомлений);
	
	ВызватьОперациюДанныеМонитора(
		ПараметрыОперации,
		Результат);
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	ИначеЕсли Результат.Данные = Неопределено Тогда
		Результат.ИмяОшибки          = "Ошибка";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректный (пустой) ответ сервиса.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
	Иначе
		
		Результат.Данные.Вставить("ДоступноОбновление", Ложь);
		Если Результат.Данные.updateInfo <> Неопределено Тогда
			Результат.Данные.ДоступноОбновление = Результат.Данные.updateInfo.updateAvailable;
		КонецЕсли;
		Если Не Результат.Данные.ДоступноОбновление
			И Результат.Данные.patchesInfo <> Неопределено
			И Не ПолучениеОбновленийПрограммы.АвтоматическаяЗагрузкаИсправленийВключена() Тогда
			
			Результат.Данные.ДоступноОбновление = Результат.Данные.patchesInfo.patchesAvailable;
			
		КонецЕсли;
		
		Результат.Данные.Вставить("ИнформироватьОВыходеВерсийДлительнойПоддержки", Ложь);
		Если ПодсистемаСуществует Тогда
			Результат.Данные.ИнформироватьОВыходеВерсийДлительнойПоддержки =
				ПараметрыОбновления.ИнформироватьОВыходеВерсийДлительнойПоддержки;
		КонецЕсли;
		
		Если Результат.Данные.applicationTariffNotificationsChanged Тогда
			ПроверитьНаличиеУведомлений();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДеталиДанныхМонитора(
		Логин,
		Договоры1СИТС,
		АктивацияСервисовСопровождения,
		ДоговорыНаСервисы) Экспорт
	
	Результат = НовыйРезультатВызоваОперации();
	
	Если Не ДоступноИспользованиеМонитора() Тогда
		ВызватьИсключение НСтр("ru = 'Использование Монитора недоступно в текущем режиме работы.'");
	КонецЕсли;
	
	ИмяПрограммы         = Неопределено;
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(ИмяПрограммы, ДанныеАутентификации, Результат);
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НРег(СокрЛП(Логин)) <> НРег(СокрЛП(ДанныеАутентификации.Логин)) Тогда
		Результат.ИмяОшибки          = "ИзмененыДанныеАутентификации";
		Результат.СообщениеОбОшибке  = 
			НСтр("ru = 'Изменились данные аутентификации пользователя Интернет-поддержки.
				|Обновите содержимое Монитора.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюДеталиДанныхМонитора(
		ДанныеАутентификации,
		ИмяПрограммы,
		Договоры1СИТС,
		АктивацияСервисовСопровождения,
		ДоговорыНаСервисы,
		Результат);
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.Данные = Неопределено Тогда
		Результат.ИмяОшибки          = "Ошибка";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректный (пустой) ответ сервиса.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПередВызовомОперацииСервиса(
	ИмяПрограммы,
	ДанныеАутентификации,
	РезультатОперации)
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	Если ИмяПрограммы = "Unknown" Тогда
		РезультатОперации.ИмяОшибки = "НеЗаполненоИмяПрограммы";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не заполнено имя программы.'");
		РезультатОперации.ИнформацияОбОшибке =
			НСтр("ru = 'Не заполнено имя программы см. свойство ИдентификаторИнтернетПоддержки в методе ПриДобавленииПодсистемы().'");
	КонецЕсли;
	
	Если ДанныеАутентификации = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ДанныеАутентификации = Неопределено Тогда
		РезультатОперации.ИмяОшибки = "НеЗаполненыДанныеАутентификации";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не заполнены данные аутентификации.'");
		РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеАутентификацииПользователяИнтернетПоддержки(
	НомерОбласти = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			НомерОбласти = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Возврат Новый Структура("Тикет, НомерОбласти", "", НомерОбласти);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

Процедура ВызватьОперациюДанныеМонитора(
		ПараметрыОперации,
		Результат)
	
	URLОперации = URLОперацииСервиса("monitor", ПараметрыОперации.Домен) + "/" + ПараметрыОперации.ИмяПрограммы;
	ТелоЗапроса = НовыйТелоЗапросаСодержимоеМонитора(
		ПараметрыОперации);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ПараметрыОперации.Домен, ТелоЗапроса, Результат, ТелоОтвета);
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		Результат.Данные = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если Результат.Данные.authResult.blockStatus = "429" Или Результат.Данные.authResult.blockStatus = 429 Тогда
			Результат.ИмяОшибки         = "Ошибка";
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Превышено количество попыток аутентификации с некорректным логином или паролем.
					|Проверьте правильность логина и пароля и повторите попытку через 30 минут.'");
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - authResult.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.authResult.blockStatus);
		ИначеЕсли (Результат.Данные.authResult.blockStatus <> "200" И Результат.Данные.authResult.blockStatus <> 200) Тогда
			Результат.ИмяОшибки         = "ВнутренняяОшибкаСервиса";
			Результат.СообщениеОбОшибке = НСтр("ru = 'Внутренняя ошибка сервиса.
				|Повторите попытку подключения позднее.'");
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - authResult.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.authResult.blockStatus);
		КонецЕсли;
		
	Исключение
		
		ПриОшибкеОбработкиОтветаСервиса(
			ИнформацияОбОшибке(),
			URLОперации,
			ТелоОтвета,
			Результат);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВызватьОперациюДеталиДанныхМонитора(
		ДанныеАутентификации,
		ИмяПрограммы,
		Договоры1СИТС,
		АктивацияСервисовСопровождения,
		ДоговорыНаСервисы,
		Результат)
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	URLОперации = URLОперацииСервиса("support-info", НастройкиСоединения.ДоменРасположенияСерверовИПП)
		+ "/" + ИмяПрограммы;
	ТелоЗапроса = НовыйТелоЗапросаДеталиМонитора(
		ДанныеАутентификации,
		Договоры1СИТС,
		АктивацияСервисовСопровождения,
		ДоговорыНаСервисы);
	
	ТелоОтвета = "";
	
	ВызватьОперациюСервиса(
		URLОперации,
		НастройкиСоединения.ДоменРасположенияСерверовИПП,
		ТелоЗапроса,
		Результат,
		ТелоОтвета);
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		
		ИменаСвойствСоЗначениямиДата = Новый Массив;
		ИменаСвойствСоЗначениямиДата.Добавить("from");
		ИменаСвойствСоЗначениямиДата.Добавить("to");
		Результат.Данные = ПрочитатьJSON(ЧтениеJSON, , ИменаСвойствСоЗначениямиДата, ФорматДатыJSON.ISO);
		ЧтениеJSON.Закрыть();
		
		// Проверка состояния получения данных в сервисе.
		ОшибкаСервисаПриПолученииДанных = Ложь;
		Если (Договоры1СИТС Или АктивацияСервисовСопровождения)
			И Результат.Данные.supportConditionsImplStatus.blockStatus <> "200"
			И Результат.Данные.supportConditionsImplStatus.blockStatus <> 200 Тогда
			
			ОшибкаСервисаПриПолученииДанных = Истина;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - supportConditionsImplStatus.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.supportConditionsImplStatus.blockStatus);
			
		ИначеЕсли Договоры1СИТС
			И Результат.Данные.itsContracts <> Неопределено
			И Результат.Данные.itsContracts.blockStatus <> "200"
			И Результат.Данные.itsContracts.blockStatus <> 200 Тогда
			
			ОшибкаСервисаПриПолученииДанных = Истина;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - itsContracts.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.itsContracts.blockStatus);
			
		ИначеЕсли АктивацияСервисовСопровождения
			И Результат.Данные.supportServiceActivations <> Неопределено
			И Результат.Данные.supportServiceActivations.blockStatus <> "200"
			И Результат.Данные.supportServiceActivations.blockStatus <> 200 Тогда
			
			ОшибкаСервисаПриПолученииДанных = Истина;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - supportServiceActivations.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.supportServiceActivations.blockStatus);
			
		ИначеЕсли ДоговорыНаСервисы
			И Результат.Данные.serviceContractsStatus.blockStatus <> "200"
			И Результат.Данные.serviceContractsStatus.blockStatus <> 200 Тогда
			
			ОшибкаСервисаПриПолученииДанных = Истина;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - serviceContractsStatus.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.serviceContractsStatus.blockStatus);
			
		ИначеЕсли ДоговорыНаСервисы
			И Результат.Данные.serviceContracts <> Неопределено
			И Результат.Данные.serviceContracts.blockStatus <> "200"
			И Результат.Данные.serviceContracts.blockStatus <> 200 Тогда
			
			ОшибкаСервисаПриПолученииДанных = Истина;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
					|Сервис сообщил об ошибке - serviceContracts.blockStatus: %2'"),
				URLОперации,
				Результат.Данные.serviceContracts.blockStatus);
			
		КонецЕсли;
		
		Если ОшибкаСервисаПриПолученииДанных Тогда
			Результат.ИмяОшибки = "ВнутренняяОшибкаСервиса";
			Результат.СообщениеОбОшибке = НСтр("ru = 'Внутренняя ошибка сервиса.
				|Повторите попытку подключения позднее.'");
		КонецЕсли;
		
	Исключение
		
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
		
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаСодержимоеМонитора(
	ПараметрыОперации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ДанныеЗапроса = Новый Структура;
	
	ДанныеЗапроса.Вставить("applicationTariffNotificationsDataDigest", ПараметрыОперации.ОтпечатокУведомлений);
	ЗаписатьПараметрыСервисов(ДанныеЗапроса);
	
	ЗаписатьДанныеАутентификации(ДанныеЗапроса, ПараметрыОперации.ДанныеАутентификации);
	
	ПроверитьДоступностьОбновления = ПараметрыОперации.ПараметрыОбновления <> Неопределено;
	
	ДанныеЗапроса.Вставить("programVersion"             , ПараметрыОперации.ВерсияКонфигурации);
	ДанныеЗапроса.Вставить("platformVersion"            , ПараметрыОперации.ВерсияПлатформы);
	ДанныеЗапроса.Вставить("getUpdateAvailabilityStatus", ПроверитьДоступностьОбновления);
	
	Если ПроверитьДоступностьОбновления Тогда
		
		ПараметрыОбновления = ПараметрыОперации.ПараметрыОбновления;
		ДанныеЗапроса.Вставить("checkProgramUpdate" , ПараметрыОбновления.ПолучатьОбновленияКонфигурации);
		ДанныеЗапроса.Вставить("checkPlatformUpdate", ПараметрыОбновления.ПолучатьОбновленияПлатформы);
		ДанныеЗапроса.Вставить(
			"checkSupportStatus",
			ПараметрыОбновления.ИнформироватьОВыходеВерсийДлительнойПоддержки);
		
		Если ПараметрыОбновления.ПолучатьИсправления Тогда
			
			ПараметрыИсправлений = Новый Структура;
			ПараметрыИсправлений.Вставить("checkPatchesUpdates", ПараметрыОбновления.ПолучатьИсправления);
			
			УстановленныеИсправления = Новый Массив;
			Для Каждого ИдентификаторИсправления Из ПараметрыОбновления.УстановленныеИсправления Цикл
				УстановленныеИсправления.Добавить(Строка(ИдентификаторИсправления));
			КонецЦикла;
			ПараметрыИсправлений.Вставить("installedPatches", УстановленныеИсправления);
			
			ДополнительныеМодули = Новый Массив;
			
			ДополнительныеПодсистемы = ПолучениеОбновленийПрограммы.НастройкиЗагрузкиИсправлений().Подсистемы;
			Для Каждого ДополнительныйМодуль Из ДополнительныеПодсистемы Цикл
				ДополнительныеМодули.Добавить(
					Новый Структура(
						"programName, programVersion",
						ДополнительныйМодуль.ИдентификаторИнтернетПоддержки,
						ДополнительныйМодуль.Версия))
			КонецЦикла;
			ПараметрыИсправлений.Вставить("additionalModulesInfo", ДополнительныеМодули);
			
			ДанныеЗапроса.Вставить("patchParameters", ПараметрыИсправлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДанныеЗапроса);
	
	ЗаписатьJSON(ЗаписьДанныхСообщения, ДанныеЗапроса, НастройкиСериализации);
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция НовыйТелоЗапросаДеталиМонитора(
	ДанныеАутентификации,
	Договоры1СИТС,
	АктивацияСервисовСопровождения,
	ДоговорыНаСервисы)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ДанныеЗапроса = Новый Структура;
	
	ЗаписатьДанныеАутентификации(ДанныеЗапроса, ДанныеАутентификации);
	
	ДанныеЗапроса.Вставить("getItsContracts",              Договоры1СИТС);
	ДанныеЗапроса.Вставить("getSupportServiceActivations", АктивацияСервисовСопровождения);
	ДанныеЗапроса.Вставить("getServiceContracts",          ДоговорыНаСервисы);
	
	ЗаписатьДополнительныеПараметрыЗапроса(ДанныеЗапроса);
	
	ЗаписатьJSON(ЗаписьДанныхСообщения, ДанныеЗапроса, НастройкиСериализации);
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ЗаписатьДанныеАутентификации(ДанныеЗапроса, ДанныеАутентификации)
	
	ДанныеЗапроса.Вставить("auth", Новый Структура);
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ДанныеЗапроса.auth.Вставить("authToken", ДанныеАутентификации.Тикет);
	Иначе
		ДанныеЗапроса.auth.Вставить("login",     ДанныеАутентификации.Логин);
		ДанныеЗапроса.auth.Вставить("password",  ДанныеАутентификации.Пароль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДополнительныеПараметрыЗапроса(ДанныеЗапроса)
	
	ДанныеЗапроса.Вставить(
		"params",
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса(Ложь));
	
КонецПроцедуры

Функция УведомленияИзМонитора()
	
	Результат = НовыйРезультатВызоваОперации();
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(
		Неопределено,
		ДанныеАутентификации,
		Результат);
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = УведомленияПортала1СИТС(
		ДанныеАутентификации,
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	ИначеЕсли Результат.Данные = Неопределено Тогда
		Результат.ИмяОшибки          = "Ошибка";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректный (пустой) ответ сервиса.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УведомленияПортала1СИТС(
	ДанныеАутентификации,
	Домен)
	
	Результат = НовыйРезультатВызоваОперации();
	URLОперации = URLОперацииСервиса("applications/check-notifications", Домен);
	
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаПроверкиУведомлений(
		ДанныеАутентификации,
		НастройкиПолученияУведомленийПортала().ОтпечатокУведомлений);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыПолученияСодержимого = Новый Структура;
	ПараметрыПолученияСодержимого.Вставить("Метод"                   , "POST");
	ПараметрыПолученияСодержимого.Вставить("ФорматОтвета"            , 1);
	ПараметрыПолученияСодержимого.Вставить("Заголовки"               , Заголовки);
	ПараметрыПолученияСодержимого.Вставить("ДанныеДляОбработки"      , ТелоЗапроса);
	ПараметрыПолученияСодержимого.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыПолученияСодержимого.Вставить("Таймаут"                 , 10);
	
	РезультатЗагрузкиСодержимого = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыПолученияСодержимого);
	
	Результат.КодСостояния = РезультатЗагрузкиСодержимого.КодСостояния;
	
	Если РезультатЗагрузкиСодержимого.КодСостояния = 304 Тогда
		Результат.ИмяОшибки = "НетИзменений";
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатЗагрузкиСодержимого.КодОшибки) Тогда
		ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат);
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтвета = РезультатЗагрузкиСодержимого.Содержимое;
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		Результат.Данные = ПрочитатьJSON(ЧтениеJSON, Истина, "optionValidTill");
		ЧтениеJSON.Закрыть();
		
	Исключение
		
		ПриОшибкеОбработкиОтветаСервиса(
			ИнформацияОбОшибке(),
			URLОперации,
			ТелоОтвета,
			Результат);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтернетПоддержкаПользователейВМоделиСервиса =
		ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
	РезультатПолученияТикета =
		МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			URLОперации,
			ДанныеАутентификации.НомерОбласти);
	
	Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
		ДанныеАутентификации.Тикет = РезультатПолученияТикета.Тикет;
	Иначе
		Результат.ИмяОшибки = "НеЗаполненыДанныеАутентификации";
		Результат.СообщениеОбОшибке  = РезультатПолученияТикета.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось вызвать операцию %1.
					|Не удалось выполнить аутентификацию.
					|%2'"),
				URLОперации,
				РезультатПолученияТикета.ИнформацияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйТелоЗапросаПроверкиУведомлений(
	ДанныеАутентификации,
	Отпечаток)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ДанныеЗапроса = Новый Структура;
	
	ЗаписатьПараметрыСервисов(ДанныеЗапроса);
	ЗаписатьДанныеАутентификации(ДанныеЗапроса, ДанныеАутентификации);
	ДанныеЗапроса.Вставить("dataDigest", Отпечаток);
	
	ЗаписатьJSON(ЗаписьДанныхСообщения, ДанныеЗапроса, НастройкиСериализации);
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ЗаписатьПараметрыСервисов(ДанныеЗапроса)
	
	ПараметрыСервисов = ПараметрыСервисов();
	Если ПараметрыСервисов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("applicationParams", Новый Массив);
	Для Каждого ПараметрыСервиса Из ПараметрыСервисов Цикл
		ДанныеЗапроса.applicationParams.Добавить(Новый Структура(
			"applicationNick, params",
			ПараметрыСервиса.Ключ,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСервиса.Значение)));
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСервисов()
	
	Результат = Новый Соответствие;
	
	ИнтеграцияПодсистемБИП.ПриЗаполненииПараметровСервисов(
		Результат);
	МониторПортала1СИТСПереопределяемый.ПриЗаполненииПараметровСервисов(
		Результат);
	
	Возврат Результат;
КонецФункции

Процедура ВызватьОперациюСервиса(URLОперации, Домен, ТелоЗапроса, Результат, ТелоОтвета)
	
	ПроверитьДоступностьСервиса(Домен, Результат);
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыПолученияСодержимого = Новый Структура;
	ПараметрыПолученияСодержимого.Вставить("Метод"                   , "POST");
	ПараметрыПолученияСодержимого.Вставить("ФорматОтвета"            , 1);
	ПараметрыПолученияСодержимого.Вставить("Заголовки"               , Заголовки);
	ПараметрыПолученияСодержимого.Вставить("ДанныеДляОбработки"      , ТелоЗапроса);
	ПараметрыПолученияСодержимого.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыПолученияСодержимого.Вставить("Таймаут"                 , 60);
	
	РезультатЗагрузкиСодержимого = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыПолученияСодержимого);
	
	Результат.КодСостояния = РезультатЗагрузкиСодержимого.КодСостояния;
	
	Если ПустаяСтрока(РезультатЗагрузкиСодержимого.КодОшибки) Тогда
		
		ТелоОтвета = РезультатЗагрузкиСодержимого.Содержимое;
		
		ДлинаТелаОтвета = СтрДлина(ТелоОтвета);
		Если ДлинаТелаОтвета > 100000 Тогда
			
			Результат.ИмяОшибки         = "ВнутренняяОшибкаСервиса";
			Результат.СообщениеОбОшибке = НСтр("ru = 'Некорректный ответ сервиса.'");
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Превышена допустимая длина тела ответа 100000 символов.
					|Длина тела ответа: %1 символов.'"),
				ДлинаТелаОтвета);
			
		КонецЕсли;
		
	Иначе
		
		ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке, URLОперации, ТелоОтвета, Результат)
	
	Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.
			|Ошибка при обработке ответа сервиса. %2
			|Тело ответа: %3'"),
		URLОперации,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
		Лев(ТелоОтвета, 5120));
	
	Результат.ИмяОшибки         = "ВнутренняяОшибкаСервиса";
	Результат.СообщениеОбОшибке = НСтр("ru = 'Некорректный ответ сервиса.'");
	
КонецПроцедуры

Процедура ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат)
	
	ШапкаИнформацииОбОшибке =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове операции %1 сервиса Монитора Портала 1С:ИТС.'"),
			URLОперации);
	
	Если РезультатЗагрузкиСодержимого.КодОшибки = "ConnectError" Тогда
		
		Результат.ИмяОшибки = "ОшибкаСоединения";
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Ошибка соединения с сервисом.'")
			+ Символы.ПС
			+ РезультатЗагрузкиСодержимого.СообщениеОбОшибке;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 401
		Или РезультатЗагрузкиСодержимого.КодСостояния = 403 Тогда
		
		Результат.ИмяОшибки = "НекорректныеДанныеАутентификации";
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль пользователя Интернет-поддержки.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 429 Тогда
		
		Результат.ИмяОшибки = "Ошибка";
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации с некорректным логином или паролем.
			|Проверьте правильность логина и пароля и повторите попытку через 30 минут.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 304 Тогда
		
		Результат.ИмяОшибки = "НетИзменений";
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'В сервисе нет изменений по запрошенным данным.'");
		КонецЕсли;
		
	Иначе
		
		Результат.ИмяОшибки = "Ошибка";
		Результат.СообщениеОбОшибке = РезультатЗагрузкиСодержимого.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Результат.ИнформацияОбОшибке = ШапкаИнформацииОбОшибке
		+ Символы.ПС + Результат.СообщениеОбОшибке
		+ Символы.ПС + РезультатЗагрузкиСодержимого.ИнформацияОбОшибке;
	
КонецПроцедуры

Функция НовыйРезультатВызоваОперации()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("Данные"            , Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДоступностьСервиса(Домен, РезультатОперации)
	
	URLОперацииPing = URLОперацииСервиса("ping", Домен);
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
	
	Если ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		
		Возврат;
		
	ИначеЕсли РезультатПроверки.ИмяОшибки = "ConnectError" Тогда
		
		РезультатОперации.ИмяОшибки = "ОшибкаСоединения";
		РезультатОперации.СообщениеОбОшибке =
			РезультатПроверки.СообщениеОбОшибке
			+ Символы.ПС
			+ НСтр("ru = 'Проверьте настройки подключения к сети Интернет.'");
		
	ИначеЕсли РезультатПроверки.ИмяОшибки = "ServerError" Тогда
		
		РезультатОперации.ИмяОшибки = "СервисВременноНедоступен";
		РезультатОперации.СообщениеОбОшибке = РезультатПроверки.СообщениеОбОшибке;
		
	Иначе
		
		РезультатОперации.ИмяОшибки = "Ошибка"; // Прочие ошибки.
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось подключиться к сервису.'")
			+ Символы.ПС
			+ РезультатПроверки.СообщениеОбОшибке;
		
	КонецЕсли;
	
	РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не удалось проверить доступность сервиса.'")
		+ Символы.ПС + РезультатПроверки.ИнформацияОбОшибке;
	
КонецПроцедуры

Функция ХостСервиса(Домен)
	
	
	Возврат ?(Домен = 0, "portal-monitor.1c.ru", "portal-monitor.1c.eu");
	
КонецФункции

Функция URLОперацииСервиса(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервиса(Домен)
		+ "/rest/public/"
		+ Операция;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ПолучениеУведомленийМонитораПортала() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеУведомленийМонитораПортала);
	
	ПроверитьНаличиеУведомлений();
	
КонецПроцедуры

Процедура ВключитьПолучениеУведомленийМонитораПортала(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Включение регламентного задания ПолучениеУведомленийМонитораПортала. Начало.'"));
	
	ЗаданияОбновления = ЗаданияПолучениеУведомленийМонитораПортала();
	Если ЗаданияОбновления.Количество() <> 0 Тогда
		Если РазрешеноВключениеПолучениеУведомленийМонитораПортала()
			И Не ЗаданияОбновления[0].Использование Тогда
			
			РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
					Метаданные.РегламентныеЗадания.ПолучениеУведомленийМонитораПортала,
					Истина);
			
		КонецЕсли;
	Иначе
		Если РазрешеноВключениеПолучениеУведомленийМонитораПортала() Тогда
			ДобавитьРегламентноеЗаданиеПолученияУведомленийМонитораПортала(Истина);
		Иначе
			ДобавитьРегламентноеЗаданиеПолученияУведомленийМонитораПортала(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Включение регламентного задания ПолучениеУведомленийМонитораПортала. Успешно завершено.'"));
		
КонецПроцедуры

Функция РазрешеноВключениеПолучениеУведомленийМонитораПортала()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Результат = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
	Иначе
		Результат = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет созданные регламентные задания ПолучениеУведомленийМонитораПортала.
//
// Возвращаемое значение:
//  Массив из РегламентноеЗадание - массив регламентных заданий см. описание метода РегламентноеЗадание
//  в синтакс-помощнике.
//
Функция ЗаданияПолучениеУведомленийМонитораПортала()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеУведомленийМонитораПортала);
	Возврат РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
КонецФункции

Процедура ДобавитьРегламентноеЗаданиеПолученияУведомленийМонитораПортала(Использование = Истина)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеУведомленийМонитораПортала);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		// Чтобы не создавать пиковых нагрузок на сервис,
		// время обновления будет выбрано случайным образом
		// между 01:00 и 06:00.
		Генератор = Новый ГенераторСлучайныхЧисел;
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала       = Дата("00010101010000") + Генератор.СлучайноеЧисло(0, 21600);
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Использование);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ПолучениеУведомленийМонитораПортала);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Получение уведомлений Монитора Портала 1С:ИТС'"));
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Исключение
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание получения уведомлений Монитора Портала 1С:ИТС:
							|%1'"),
						ИнформацияОбОшибке));
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание получения уведомлений Монитора Портала 1С:ИТС.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
