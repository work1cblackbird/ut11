
#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиРазбораКодаМаркировки

Процедура ДополнитьОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля) Экспорт
	
	Если ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКодаМаркировкиАкцизнойМарки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	ОписаниеКодаМаркировкиАкцизнойМаркиСтарыйФормат(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
	ДополнитьРасширенныеОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
КонецПроцедуры

Процедура ДополнитьВспомогательнымиНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы) Экспорт
	
	// Код маркировки произвольной длины/состава оставляем без описания и определение
	// вида продукции выполняем в обработчике ЭтоНеФормализованныйКодМаркировки.
	
	ДополнительныеПараметры(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы);
	
КонецПроцедуры

Функция ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов = "") Экспорт
	Возврат РазборКодаМаркировкиИССлужебный.ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов);
КонецФункции

Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки) Экспорт
	Возврат РазборКодаМаркировкиЕГАИСОбщегоНазначенияКлиентСервер.НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбращениеКРасширеннойВерсииГосИС

Процедура ДополнитьРасширенныеОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("РазборКодаМаркировкиЕГАИССлужебный");
		Модуль.ДополнитьРасширенныеОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеКодаМаркировки

Процедура ОписаниеКодаМаркировкиАкцизнойМарки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	ОписаниеЭлементовКМ = Новый Структура("ШтрихкодАкцизнойМарки");
	ОписаниеЭлементовКМ.ШтрихкодАкцизнойМарки = ОписаниеЭлементаКодаМаркировки("", "ШтрихкодАкцизнойМарки", 150);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("ШтрихкодАкцизнойМарки");
	
	СписокШаблонов = РазборКодаМаркировкиИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиАкцизнойМаркиСтарыйФормат(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	ОписаниеЭлементовКМ = Новый Структура("ШтрихкодАкцизнойМарки");
	ОписаниеЭлементовКМ.ШтрихкодАкцизнойМарки = ОписаниеЭлементаКодаМаркировки("", "ШтрихкодАкцизнойМарки", 68);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("ШтрихкодАкцизнойМарки");
	
	СписокШаблонов = РазборКодаМаркировкиИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("КодАлкогольнойПродукции", "");
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ДополнительныеПараметры(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы)
	
	ДополнительныеПараметры = НастройкиРазбораКодаМаркировки.ДополнительныеПараметры[МодулиВыбраннойПодсистемы.Подсистема];
	
	// Текст модели XDTO для проверки штрихкода на принадлежность к акцизным маркам, для доступа на клиенте
	// Исходник: ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(Штрихкод, ТипШтрихкода)
	
	ПроверкаШтрихкодаАкцизнойМарки = Новый Структура;
	
	Если НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
		
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("ОбщийМодульЕГАИС", ШтрихкодированиеОбщегоНазначенияЕГАИС);
		
	Иначе
		
		URIПространстваИмен = "egaischeque.joint.2";
		
		ОбъектXDTO = ФабрикаXDTO.ЭкспортМоделиXDTO(URIПространстваИмен);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, "Model", "http://v8.1c.ru/8.1/xdto",, НазначениеТипаXML.Явное);
		
		ТекстМоделиXML = ЗаписьXML.Закрыть();
		
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("МодельXML",           ТекстМоделиXML);
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("URIПространстваИмен", URIПространстваИмен);
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("ИмяТипа",             "BK");
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПроверкаШтрихкодаАкцизнойМарки", ПроверкаШтрихкодаАкцизнойМарки);
	
	КлассификаторТиповАкцизныхМарок = КлассификаторТиповАкцизныхМарок();
	
	Если Не НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
		// Классификатор типов акцизных марок, для доступа на клиенте
		СтрокиКлассификатора = Новый Массив;
		Для Каждого СтрокаТаблицы Из КлассификаторТиповАкцизныхМарок Цикл
			СтрокиКлассификатора.Добавить(
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы));
		КонецЦикла;
		КлассификаторТиповАкцизныхМарок = СтрокиКлассификатора;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("КлассификаторТиповАкцизныхМарок", КлассификаторТиповАкцизныхМарок);
	
КонецПроцедуры

// Функция возвращает таблицу значений классификатора типов акцизных марок.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Классификатор типов акцизных марок
Функция КлассификаторТиповАкцизныхМарок() Экспорт
	
	ТаблицаТиповАкцизныхМарок = Новый ТаблицаЗначений;
	
	Макет = ПолучитьОбщийМакет("ТипыАкцизныхМарокЕГАИС");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	ИменаКолонок = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(ИменаКолонок);
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
		
		ТаблицаТиповАкцизныхМарок.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаТиповАкцизныхМарок.Добавить();
		Для Сч = 1 По КоличествоКолонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			
			новСтр[Сч-1] = ЧтениеXML.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТиповАкцизныхМарок.Сортировать(ТаблицаТиповАкцизныхМарок.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаТиповАкцизныхМарок;
	
КонецФункции

#КонецОбласти

#КонецОбласти