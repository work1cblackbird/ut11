#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имена подсистем для использования в см. ЗаписатьВЖурналРегистрации.
// 
// Возвращаемое значение:
// 	Структура:
// * ЭлектронноеВзаимодействие - Строка
// * ОбменСБанками - Строка
// * ОбменСКонтрагентами - Строка
// * ОбменССайтами - Строка
// * РегламентныеЗадания - Строка
// * БизнесСеть - Строка
// * ТорговыеПредложения - Строка
// * ИнтеграцияСЯндексКассой - Строка
// * СопоставлениеНоменклатурыКонтрагентов - Строка
// * Криптография - Строка
// * ИнтернетСоединение - Строка
// * РаботаСФайлами - Строка
// * СервисДоставки - Строка
// * ЭлектронноеАктированиеЕИС - Строка
// * КоммерческиеПредложения - Строка
// * СервисShare - Строка
// * СервисШтампированияФайлов - Строка
// * ИнтеграцияОблачногоЭДО - Строка
Функция ПодсистемыБЭД() Экспорт
	
	Подсистемы = Новый Структура;
	Подсистемы.Вставить("ЭлектронноеВзаимодействие", "ЭлектронноеВзаимодействие");
	Подсистемы.Вставить("ОбменСБанками", "ЭлектронноеВзаимодействие.ОбменСБанками");
	Подсистемы.Вставить("ОбменСКонтрагентами", "ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	Подсистемы.Вставить("ОбменССайтами", "ЭлектронноеВзаимодействие.ОбменССайтами");
	Подсистемы.Вставить("РегламентныеЗадания", "РегламентныеЗадания");
	Подсистемы.Вставить("БизнесСеть", "ЭлектронноеВзаимодействие.БизнесСеть");
	Подсистемы.Вставить("ТорговыеПредложения", "ЭлектронноеВзаимодействие.ТорговыеПредложения");
	Подсистемы.Вставить("ИнтеграцияСЯндексКассой", "ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
	Подсистемы.Вставить("СопоставлениеНоменклатурыКонтрагентов",
		"ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов");
	Подсистемы.Вставить("Криптография", "ЭлектронноеВзаимодействие.БазоваяФункциональность.Криптография");
	Подсистемы.Вставить("ИнтернетСоединение", "ЭлектронноеВзаимодействие.БазоваяФункциональность.ИнтернетСоединение");
	Подсистемы.Вставить("РаботаСФайлами", "ЭлектронноеВзаимодействие.БазоваяФункциональность.РаботаСФайлами");
	Подсистемы.Вставить("СервисДоставки", "ЭлектронноеВзаимодействие.СервисДоставки");
	Подсистемы.Вставить("ЭлектронноеАктированиеЕИС", "ЭлектронноеАктированиеЕИС");	
	Подсистемы.Вставить("КоммерческиеПредложения", "ЭлектронноеВзаимодействие.КоммерческиеПредложения");
	Подсистемы.Вставить("СервисShare", "ЭлектронноеВзаимодействие.СервисShare");
	Подсистемы.Вставить("СервисШтампированияФайлов", "ЭлектронноеВзаимодействие.СервисШтампированияФайлов");
	Подсистемы.Вставить("ИнтеграцияОблачногоЭДО", "ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ИнтеграцияОблачногоЭДО");
	
	Возврат Подсистемы;
	
КонецФункции

//++ Локализация

// Определяет, содержит ли строка только определенные символы.
// 
// Параметры:
// 	ИсходнаяСтрока - Строка - строка для проверки
// 	СимволДляПроверки - Строка - символ для проверки
// 	УчитыватьПробелы - Булево - если Истина и в строке помимо указанного символа содержатся пробелы, будет возвращено
// 	                            значение Ложь.
// Возвращаемое значение:
// 	Булево - Истина, если строка содержит только указанные символы
Функция ТолькоСимволыВСтроке(Знач ИсходнаяСтрока, СимволДляПроверки, УчитыватьПробелы = Ложь) Экспорт

	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, СимволДляПроверки, "");
	
	Возврат УчитыватьПробелы И ИсходнаяСтрока = "" ИЛИ НЕ УчитыватьПробелы И ПустаяСтрока(ИсходнаяСтрока);

КонецФункции

Процедура ДополнитьСписокЗначений(Приемник, Источник) Экспорт
	
	Для Каждого ЭлементСписка Из Источник Цикл
		Приемник.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустые двоичные данные.
// 
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ПустыеДвоичныеДанные() Экспорт
	
	Поток = Новый ПотокВПамяти();
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Формирует текст сообщения, подставляя значения параметров в шаблоны сообщений.
//
// Параметры:
//  ВидПоля        - Строка - может принимать значения: "Поле", "Колонка", "Список";
//  ВидСообщения   - Строка - может принимать значения: "Заполнение", "Корректность";
//  ИмяПоля        - Строка - имя поля;
//  НомерСтроки    - Строка - номер строки;
//  ИмяСписка      - Строка - имя списка;
//  ТекстСообщения - Строка - текст сообщения о некорректности заполнения.
//
// Возвращаемое значение:
//   Строка - текст сообщения.
//
Функция ТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение", ИмяПоля = "", НомерСтроки = "", ИмяСписка = "", ТекстСообщения = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено.'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяПоля, НомерСтроки, ИмяСписка, ТекстСообщения);

КонецФункции

// Формирует служебную структуру, которая может быть использована для указания параметров обработки ошибок для
// реквизитов дерева данных электронного документа.
//
// Параметры:
//  КлючДанных			 - ЛюбаяСсылка - ключ данных для обработки через сообщение пользователю (см. СообщениеПользователю).
//  ПутьКДанным			 - Строка - путь к данным для обработки через сообщение пользователю (см. СообщениеПользователю).
//  НавигационнаяСсылка	 - Строка - навигационная ссылка, по которой нужно перейти при клике на ошибку.
//  ИмяФормы			 - Строка - имя формы, которую нужно открыть при клике на ошибку.
//  ПараметрыФормы		 - Структура - параметры, передаваемые в форму, открываемую при клике на ошибку.
//  ТекстОшибки			 - Строка - используется для переопределения стандартного текста ошибки.
// 
// Возвращаемое значение:
//  Структура:
//    * КлючСообщения - ЛюбаяСсылка - заполняется из параметра "КлючДанных".
//    * ПутьКДаннымСообщения - Строка - заполняется из параметра "ПутьКДанным".
//    * НавигационнаяСсылка - Строка - заполняется из параметра "НавигационнаяСсылка".
//    * ИмяФормы - Строка - заполняется из параметра "ИмяФормы".
//    * ПараметрыФормы - Структура - заполняется из параметра "ПараметрыФормы".
//    * ТекстОшибки - Строка - заполняется из параметра "ТекстОшибки".
//
Функция НовыеПараметрыОшибки(КлючДанных = Неопределено, ПутьКДанным = "", НавигационнаяСсылка = "", ИмяФормы = "",
	ПараметрыФормы = Неопределено, ТекстОшибки = "") Экспорт

	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("КлючСообщения", КлючДанных);
	ДанныеОшибки.Вставить("ПутьКДаннымСообщения", ПутьКДанным);
	ДанныеОшибки.Вставить("НавигационнаяСсылка", НавигационнаяСсылка);
	ДанныеОшибки.Вставить("ИмяФормы", ИмяФормы);
	ДанныеОшибки.Вставить("ПараметрыФормы", ПараметрыФормы);
	ДанныеОшибки.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат ДанныеОшибки;

КонецФункции

Процедура УстановитьСвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач Значение) Экспорт
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Структура.Вставить(ТекущееСвойство, Значение);
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			ТекущееЗначение = Новый Структура;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		УстановитьСвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, Значение);
		Структура.Вставить(ТекущееСвойство, ТекущееЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует ключи и значения элементов структуры в строку.
//
// Параметры:
//	Структура - Структура - структура, ключи и значения которой преобразуются в строку.
//	РазделительКлючЗначение - Строка - разделитель, который вставляется в строку между ключом и значением структуры.
//	РазделительЭлементов - Строка - разделитель, который вставляется в строку между элементами структуры.
//
// Возвращаемое значение:
//	Строка - строка, содержащая ключи и значения элементов структуры разделенные разделителем.
//
Функция СтруктураВСтроку(Структура, РазделительКлючЗначение = "=", РазделительЭлементов = ";") Экспорт
	
	МассивСтрок = Новый Массив;
	
	Для Каждого Элемент Из Структура Цикл
		МассивСтрок.Добавить(Элемент.Ключ + РазделительКлючЗначение + Элемент.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, РазделительЭлементов);
	
КонецФункции

// Возвращает форматированную дату+время без секунд.
// 
// Параметры:
//  ДатаВремя - Дата
// 
// Возвращаемое значение:
//  Строка - Форматированная дата
//  
Функция ДатаВремяБезСекунд(ДатаВремя) Экспорт
	
	ЛокализованныйФорматДаты = НСтр("ru = 'ДФ=''dd.MM.yyyy HH:mm'''"); 
	Возврат Формат(ДатаВремя, ЛокализованныйФорматДаты);
	
КонецФункции

//-- Локализация

// Приводит двоичные данные (некодированные и base64 двоичные данные) к некодированному значению.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
// 
// Возвращаемое значение:
//  ДвоичныеДанные
Функция ДекодированныеДвоичныеДанные(ДвоичныеДанные) Экспорт
	ДекодированныеДанные = ПолучитьДвоичныеДанныеИзBase64ДвоичныхДанных(ДвоичныеДанные);
	Если ЗначениеЗаполнено(ДекодированныеДанные) Тогда
		Возврат ДекодированныеДанные;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
КонецФункции

// Дополняет таблицу значений - приемник данными из таблицы значений - источника.
// 
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений
//  				- ТабличнаяЧасть 
//  				- ДанныеФормыКоллекция
//  ТаблицаПриемник - ТаблицаЗначений
//  				- ТабличнаяЧасть 
//  				- ДанныеФормыКоллекция
//  ИмяКолонки - Строка
Процедура ДополнитьТаблицуУникальнымиСтрокамиПоЗначениямКолонки(ТаблицаИсточник, ТаблицаПриемник, ИмяКолонки) Экспорт
	Если Не ЗначениеЗаполнено(ИмяКолонки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		Отбор = Новый Структура(ИмяКолонки, СтрокаИсточника[ИмяКолонки]);
		Если Не ЗначениеЗаполнено(ТаблицаПриемник.НайтиСтроки(Отбор)) Тогда
			СтрокаПриемника = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  КодВалюты - Строка
// 
// Возвращаемое значение:
//  Неопределено,Строка
Функция ЗнакВалютыПоКоду(КодВалюты) Экспорт
	
	ЗнакиВалютПоКодам = Новый Соответствие;
	ЗнакиВалютПоКодам.Вставить("643", "₽");   // Российский рубль
	ЗнакиВалютПоКодам.Вставить("156", "¥");   // Юань
	ЗнакиВалютПоКодам.Вставить("901", "NT$"); // Новый тайваньский доллар
	ЗнакиВалютПоКодам.Вставить("840", "$");   // Доллар США
	ЗнакиВалютПоКодам.Вставить("978", "€");   // Евро
	
	Возврат ЗнакиВалютПоКодам[КодВалюты];

КонецФункции

#Область РаботаСДеревьямиДанных

// Возвращает массив, состоящий из всех элементов дерева.
// 
// Параметры:
//  ДеревоДанных - ДанныеФормыДерево, ДанныеФормыЭлементДерева.
// 
// Возвращаемое значение:
//  Массив из ДанныеФормыЭлементДерева - элементы дерева.
//
Функция ПолучитьВсеЭлементыДереваРекурсивно(ДеревоДанных) Экспорт
	
	Результат = Новый Массив;
	КоллекцияЭлементовДерева = ДеревоДанных.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		Результат.Добавить(ЭлементДерева);
		МассивЭлементов = ПолучитьВсеЭлементыДереваРекурсивно(ЭлементДерева);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, МассивЭлементов);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаСимволов
 
// Возвращает признак того, что переданное значение является, либо не является, цифрой.
// Параметры:
//  Символ - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если переданный параметр является цифрой
Функция ЭтоЦифра(Знач Символ) Экспорт
	КодСимвола = КодСимвола(Символ);
	Возврат КодСимвола >= 48 И КодСимвола <= 57;
КонецФункции

// Возвращает признак того, что переданное значение является, либо не является, буквой латиницы или кириллицы.
// Параметры:
//  Символ - Строка
// 
// Возвращаемое значение:
//  Строка - Символ в верхнем регистре, если переданное значение является буквой, иначе пустая строка
Функция ЭтоБуква(Знач Символ) Экспорт
	СимволВРег = ВРег(Символ);
	КодСимвола = КодСимвола(СимволВРег);
	Возврат ?(((КодСимвола >= 65 И КодСимвола <= 90) // ЛАТИНИЦА
		ИЛИ (КодСимвола >= 1040 И КодСимвола <= 1071) // КИРИЛЛИЦА
		ИЛИ (КодСимвола = 1025)), // буква Ё 
		СимволВРег, ""); 
КонецФункции

// Возвращает признак того, что переданное значение является, либо не является, нижним подчеркиванием.
// Параметры:
//  Символ - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если переданный параметр является подчеркиванием
Функция ЭтоПодчеркивание(Знач Символ) Экспорт
	КодСимвола = КодСимвола(Символ);
	Возврат (КодСимвола = 95);
КонецФункции

// Возвращает признак того, что переданное значение является, либо не является, нижним подчеркиванием 
// или буквой латиницы или кириллицы.
// Параметры:
//  Символ - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если переданный параметр является буквой или подчеркиванием
Функция ЭтоБукваИлиПодчеркивание(Знач Символ) Экспорт
	Буква = ЭтоБуква(Символ);
	Возврат (НЕ ПустаяСтрока(Буква)) ИЛИ ЭтоПодчеркивание(Символ);
КонецФункции

#КонецОбласти

#Область СтроковыеФункции

// ФИОСтрокой.
// 
// Параметры:
//  ФИОИлиФамилия - Строка - Фамилия
//                - Структура, ОбъектXDTO - объект, владеющий свойствами Фамилия, Имя, Отчество
//  Имя - Строка
//  Отчество - Строка
// 
// Варианты вызова:
//  ФИОСтрокой(ФИО) - передается объект, владеющий свойствами Фамилия, Имя и/или Отчество
//  ФИОСтрокой(Фамилия, Имя) - формирование имени без отчества
//  ФИОСтрокой(Фамилия, Имя, Отчество) - формировании полного имени, если в Отчество пустое значение, то будет
//                                       сформирован второй вариант.
// 
// Возвращаемое значение:
//  Строка - строка вида "[Фамилия] [Имя] [Отчество]" или "[Фамилия] [Имя]" при отсутствии отчества
Функция ФИОСтрокой(ФИОИлиФамилия, Имя = "", Отчество = "") Экспорт
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если ТипЗнч(ФИОИлиФамилия) = Тип("Строка") Тогда
		ФИО.Фамилия = ФИОИлиФамилия;
		ФИО.Имя = Имя;
		ФИО.Отчество = Отчество;
	Иначе
		ЗаполнитьЗначенияСвойств(ФИО, ФИОИлиФамилия);
	КонецЕсли;
	Шаблон = "[Фамилия] [Имя] [Отчество]";
	Если ПустаяСтрока(СокрЛП(ФИО.Отчество)) Тогда
		Шаблон = "[Фамилия] [Имя]";
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ФИО);
КонецФункции

// Функция преобразует строку в дату и время.
//
// Параметры:
//  ДатаВремя - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС" и её вариациях с символами "-", ".", "T" или в формате,
//  					 который обрабатывается функцией см. СтроковыеФункцииКлиентСервер.СтрокаВДату.
//
// Возвращаемое значение:
//  Дата - значение, полученное после преобразования
//
Функция ПолучитьДатуВремяИзСтроки(Знач ДатаВремя) Экспорт
	
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаВремя, ЧастиДаты.ДатаВремя);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДатаВремя = СтрЗаменить(ДатаВремя, "-", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ".", "");
	ДатаВремя = СтрЗаменить(ДатаВремя, ":", "");
	Если СтрДлина(ДатаВремя) - СтрНайти(ДатаВремя, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "0");
	ИначеЕсли СтрНайти(ДатаВремя, "T") > 0 Тогда // время в формате ГГГГММДДTЧЧММСС
		ДатаВремя = СтрЗаменить(ДатаВремя, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремя = СтрЗаменить(ДатаВремя, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(ДатаВремя);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(ДатаВремя, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МножественноеСоответствие

// Множественное соответствие.
// Используется, когда по одному ключу нужно хранить коллекцию значений
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//  * Ключ - Произвольный
//  * Значение - Неопределено, Массив Из Произвольный -
Функция НовоеМножественноеСоответствие() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Получает коллекцию значений из множественного соответствия по ключу.
// Если по ключу ничего не помещалось, то возвращает пустую коллекцию.
// 
// Коллекция возвращается по ссылке, а не по значению.
// 
// Параметры:
//  МножественноеСоответствие - См. ОбщегоНазначенияБЭДКлиентСервер.НовоеМножественноеСоответствие
//  Ключ - Произвольный
// 
// Возвращаемое значение:
//  Массив Из Произвольный
Функция ПолучитьИзМножественногоСоответствия(МножественноеСоответствие, Ключ) Экспорт
	Значение = МножественноеСоответствие.Получить(Ключ);
	Если Значение = Неопределено Тогда
		Коллекция = Новый Массив;
		МножественноеСоответствие.Вставить(Ключ, Коллекция);
	Иначе
		Коллекция = Значение;
	КонецЕсли;
	Возврат Коллекция;
КонецФункции

// Вставляет новое значение в коллекцию множественного соответствия.
// Коллекция не контролирует уникальность значений, но сохраняет порядок вставки элементов.
// 
// Параметры:
//  МножественноеСоответствие - См. ОбщегоНазначенияБЭДКлиентСервер.НовоеМножественноеСоответствие
//  Ключ - Произвольный
//  Значение - Произвольный
Процедура ВставитьВоМножественноеСоответствие(МножественноеСоответствие, Ключ, Значение) Экспорт
	ПолучитьИзМножественногоСоответствия(МножественноеСоответствие, Ключ).Добавить(Значение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти