#Область СлужебныЙПрограммныйИнтерфейс

// См. МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД
Функция ПолучитьСведенияДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	Возврат МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД(
		НомерДоверенности, ИННДоверителя, ТокенДоступа);
	
КонецФункции

// См. МашиночитаемыеДоверенности.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД
Функция ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа = "", ПоказыватьСлужебныеСообщения = Истина) Экспорт
	
	Возврат МашиночитаемыеДоверенности.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
		НомерДоверенности, ТокенДоступа, ПоказыватьСлужебныеСообщения );
	
КонецФункции

// Свойства сервера МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * АдресСервера - Строка
//  * АдресСервераБезАутентификации - Строка
//  * РесурсКорняAPI - Строка
//  * ЛогинОператора - Строка
//  * ПарольОператора - Строка
//  * ИспользоватьРасширенияAPI - Булево
// 
Функция СвойстваСервераМЧД() Экспорт
	
	СтруктураАдреса = Константы.АдресРеестраМЧД.ПрочитатьАдрес();
	СтруктураАдреса.Вставить("АдресСервераБезАутентификации",	СтруктураАдреса.АдресСервера);
	СтруктураАдреса.Вставить("ЛогинОператора", 					"");
	СтруктураАдреса.Вставить("ПарольОператора", 				"");
		
	НачалоПараметровАутентификации = СтрНайти(СтруктураАдреса.АдресСервераБезАутентификации, "://");
	КонецПараметровАутентификации = СтрНайти(СтруктураАдреса.АдресСервераБезАутентификации, "@");
	Если НачалоПараметровАутентификации <> 0 И КонецПараметровАутентификации <> 0 Тогда
		СтруктураАдреса.АдресСервераБезАутентификации =
			Лев(СтруктураАдреса.АдресСервераБезАутентификации, НачалоПараметровАутентификации + 2)
			+ Сред(СтруктураАдреса.АдресСервераБезАутентификации, КонецПараметровАутентификации + 1);
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Используется режим тестирования.
// 
// Возвращаемое значение:
//  Булево
//  
Функция ИспользуетсяРежимТестирования() Экспорт
	
	Возврат Константы.РежимТестированияМЧД.Получить();
	
КонецФункции

// Возвращаемое значение:
//  Булево
//  
Функция ОтключенПодборМЧДПоКПППриПодписанииИПроверке() Экспорт
	ОтключенПодборМЧДПоКПППриПодписанииИПроверке = Константы.ОтключитьПодборМЧДПоКПППриПодписанииИПроверке.Получить();
	
	Возврат ОтключенПодборМЧДПоКПППриПодписанииИПроверке;
	
КонецФункции

// Возвращаемое значение:
//  Булево
//  
Функция СервисАвторизацииСервераМЧДДоступен() Экспорт
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + "/token";
	
	ПараметрыРесурсаНаСервере = "?ticket=checkstatus";
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	ОписаниеСоединения =
		ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 15);
	Результат = ИнтернетСоединениеБЭД.ВызватьHTTPМетод(ОписаниеСоединения, ЗапросHTTP,
		ИнтернетСоединениеБЭД.HTTPМетоды().GET,  НСтр("ru = 'Проверка связи с сервисом авторизации сервера МЧД распределенного реестра.'"));
	
	СервисДоступен = Результат.Успех;
	
	Если Результат.Ответ <> Неопределено И Результат.Ответ.КодСостояния >= 500 Тогда
		СервисДоступен = Ложь;
	КонецЕсли;
	
	Возврат СервисДоступен;
	
КонецФункции

#КонецОбласти
