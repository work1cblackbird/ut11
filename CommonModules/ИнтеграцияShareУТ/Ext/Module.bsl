
#Область ПрограммныйИнтерфейс

// См. ИнтеграцияShareПереопределяемый.КонтактныеЛицаСНомеромТелефона.
Процедура КонтактныеЛицаСНомеромТелефона(Знач Контрагент, КонтактнаяИнформация) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;

	КонтактноеЛицоКонтрагента = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераКонтрагентаПоУмолчанию(Контрагент);
	КонтактноеЛицоИКонтрагент = Новый Массив;
	КонтактноеЛицоИКонтрагент.Добавить(Контрагент);
	КонтактноеЛицоИКонтрагент.Добавить(КонтактноеЛицоКонтрагента);
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);

	ОтборКонтактнойИнформации = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКонтактнойИнформации.ТипыКонтактнойИнформации = ВидыКИ;
	ОтборКонтактнойИнформации.Дата = ТекущаяДатаСеанса();
	
	КонтактнаяИнформацияДляСервиса = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(КонтактноеЛицоИКонтрагент, ОтборКонтактнойИнформации);
	
	Для Каждого НайденныйКонтакт Из КонтактнаяИнформацияДляСервиса Цикл
		Контакт = ИнтеграцияShareКлиентСервер.НовыйКонтактнаяИнформация();
		Контакт.ВладелецКонтакта      = НайденныйКонтакт.Объект;
		Контакт.НомерТелефонаБезКодов = БезКодаСтраныРФ(НайденныйКонтакт.Значение);
		
		КонтактнаяИнформация.Добавить(Контакт);
	КонецЦикла;
	
КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ПриОпределенииСоставаКомандShare.
Процедура ПриОпределенииСоставаКомандShare(СоставКоманд) Экспорт

	СоставКоманд.Исходящие.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	СоставКоманд.Исходящие.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	СоставКоманд.Исходящие.Добавить(Метаданные.Документы.СчетНаОплатуКлиенту.ПолноеИмя());

	СоставКоманд.Входящие.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	СоставКоманд.Входящие.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	СоставКоманд.Входящие.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());

КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ПриОпределенииГиперссылкиНаИнструкциюПоРаботеССервисом.
Процедура ПриОпределенииГиперссылкиНаИнструкциюПоРаботеССервисом(НавигационнаяСсылка) Экспорт
	
КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ПриОпределенииФайловДокументаДляВыбораКПубликации.
Процедура ПриОпределенииФайловДокументаДляВыбораКПубликации(ДанныеФайлов, Знач СсылкаНаДокумент, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ПриОпределенииДанныхПубликуемогоДокумента.
Процедура ПриОпределенииДанныхПубликуемогоДокумента(ДанныеТранспортногоКонтейнера, Знач СсылкаНаДокумент) Экспорт
	
КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ПриОпределенииВизуализацииПубликуемогоДокумента.
Процедура ПриОпределенииВизуализацииПубликуемогоДокумента(ОписаниеПредставленияДокумента,
	Знач ПараметрыПубликуемогоДокументаДляВизуализации, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ЗаполнитьНастройкиФормированияДокумента.
Процедура ЗаполнитьНастройкиФормированияДокумента(СсылкаНаДокумент, НастройкиФормирования) Экспорт
	
	ПоддерживаемыеФорматыЭДО = ОбменСКонтрагентами.ФорматыДокументов();
	ТипыДокументов           = ОбменСКонтрагентами.ТипыДокументов();
	НаправленияДокументов    = ОбменСКонтрагентами.НаправленияДокументов();
	
	ТипИсточника = ТипЗнч(СсылкаНаДокумент);

	Если ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Реквизиты = "Организация, Контрагент, Договор";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, Реквизиты);
		
		НастройкиФормирования.ТипДокумента       = ТипыДокументов.ЗаказТовара;
		НастройкиФормирования.Формат             = ПоддерживаемыеФорматыЭДО.CML208;
		НастройкиФормирования.Направление        = НаправленияДокументов.Исходящий;
		НастройкиФормирования.Организация        = ЗначенияРеквизитов.Организация;
		НастройкиФормирования.Контрагент         = ЗначенияРеквизитов.Контрагент;
		НастройкиФормирования.ДоговорКонтрагента = ЗначенияРеквизитов.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Реквизиты = "Организация, Контрагент, Договор";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, Реквизиты);
		
		НастройкиФормирования.ТипДокумента       = ТипыДокументов.ОтветНаЗаказ;
		НастройкиФормирования.Формат             = ПоддерживаемыеФорматыЭДО.CML208;
		НастройкиФормирования.Направление        = НаправленияДокументов.Исходящий;
		НастройкиФормирования.Организация        = ЗначенияРеквизитов.Организация;
		НастройкиФормирования.Контрагент         = ЗначенияРеквизитов.Контрагент;
		НастройкиФормирования.ДоговорКонтрагента = ЗначенияРеквизитов.Договор;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
		
		Реквизиты = "Организация, Контрагент, Договор";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, Реквизиты);
		
		НастройкиФормирования.ТипДокумента       = ТипыДокументов.СчетНаОплату;
		НастройкиФормирования.Формат             = ПоддерживаемыеФорматыЭДО.CML208;
		НастройкиФормирования.Направление        = НаправленияДокументов.Исходящий;
		НастройкиФормирования.Организация        = ЗначенияРеквизитов.Организация;
		НастройкиФормирования.Контрагент         = ЗначенияРеквизитов.Контрагент;
		НастройкиФормирования.ДоговорКонтрагента = ЗначенияРеквизитов.Договор;

	КонецЕсли;

КонецПроцедуры

// См. ИнтеграцияShareПереопределяемый.ПриОпределенииНастроекЗагрузкиДокумента.
Процедура ПриОпределенииНастроекЗагрузкиДокумента(НастройкиЗагрузки, Знач ОписаниеЭлектронногоДокумента) Экспорт

	Если Не ЗначениеЗаполнено(ОписаниеЭлектронногоДокумента.СведенияОЗагруженномДокументе.ОбъектУчета)
							И ОписаниеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
							
		ПараметрыОтраженияВУчете = НастройкиЗагрузки.ПараметрыОтраженияВУчете;
		ПараметрыОтраженияВУчете.Очистить();
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
			НовыйПараметрОтраженияВУчете = ПараметрыОтраженияВУчете.Добавить();
			
			ПредставлениеДокумента   = СтрШаблон(НСтр("ru = '%1 от %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеЭлектронногоДокумента.ПредставлениеДокументаОтправителя,
				ОписаниеЭлектронногоДокумента.НаименованиеОтправителя);
			
			НовыйПараметрОтраженияВУчете.СпособОтраженияВУчете    = "ЗаявкаНаРасходованиеДенежныхСредств";
			НовыйПараметрОтраженияВУчете.ПредставлениеДокумента   = ПредставлениеДокумента;
			НовыйПараметрОтраженияВУчете.КартинкаРезультатаПоиска = БиблиотекаКартинок.ЗагрузитьShare;
			НовыйПараметрОтраженияВУчете.ПредставлениеВПодменюЗагрузить = СтрШаблон(НСтр("ru = 'Как %1'",
				ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Заявка на расходование денежных средств'"));
			НовыйПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = СтрШаблон(НСтр("ru = 'Загрузить как %1'",
				ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Заявка на расходование денежных средств'"));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
			НовыйПараметрОтраженияВУчете = ПараметрыОтраженияВУчете.Добавить();
			
			ПредставлениеДокумента   = СтрШаблон(НСтр("ru = '%1 от %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеЭлектронногоДокумента.ПредставлениеДокументаОтправителя,
				ОписаниеЭлектронногоДокумента.НаименованиеОтправителя);
			
			НовыйПараметрОтраженияВУчете.СпособОтраженияВУчете    = "ЗаказПоставщику";
			НовыйПараметрОтраженияВУчете.ПредставлениеДокумента   = ПредставлениеДокумента;
			НовыйПараметрОтраженияВУчете.КартинкаРезультатаПоиска = БиблиотекаКартинок.ЗагрузитьShare;
			НовыйПараметрОтраженияВУчете.ПредставлениеВПодменюЗагрузить = СтрШаблон(НСтр("ru = 'Как %1'",
				ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Заказ поставщику'"));
			НовыйПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = СтрШаблон(НСтр("ru = 'Загрузить как %1'",
				ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Заказ поставщику'"));
		КонецЕсли;

		НовыйПараметрОтраженияВУчете = ПараметрыОтраженияВУчете.Добавить();
			
		ПредставлениеДокумента   = СтрШаблон(НСтр("ru = '%1 от %2'",
			ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеЭлектронногоДокумента.ПредставлениеДокументаОтправителя,
			ОписаниеЭлектронногоДокумента.НаименованиеОтправителя);
			
		НовыйПараметрОтраженияВУчете.СпособОтраженияВУчете    = "СписаниеБезналичныхДенежныхСредств";
		НовыйПараметрОтраженияВУчете.ПредставлениеДокумента   = ПредставлениеДокумента;
		НовыйПараметрОтраженияВУчете.КартинкаРезультатаПоиска = БиблиотекаКартинок.ЗагрузитьShare;
		НовыйПараметрОтраженияВУчете.ПредставлениеВПодменюЗагрузить = СтрШаблон(НСтр("ru = 'Как %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Списание безналичных денежных средств'"));
		НовыйПараметрОтраженияВУчете.ПредставлениеРезультатаПоиска = СтрШаблон(НСтр("ru = 'Загрузить как %1'",
			ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'Списание безналичных денежных средств'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция БезКодаСтраныРФ(Знач НомерТелефона)
	
	Если СтрДлина(НомерТелефона) > 0 И СтрНачинаетсяС(НомерТелефона, "7") Тогда
		НомерТелефона = Сред(НомерТелефона, 2);
	КонецЕсли;
	
	Возврат НомерТелефона;
	
КонецФункции

#КонецОбласти

