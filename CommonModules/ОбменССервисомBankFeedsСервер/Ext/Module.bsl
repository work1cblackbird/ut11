
////////////////////////////////////////////////////////////////////////////////
// ОбменССервисомBankFeedsСервер: Серверная часть механизма обмена сервиса и 1С
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет проверку подключения к сервису
// 
// Параметры:
// 	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет
// 
// Возвращаемое значение:
// Булево - Истина, если банковский счет подключен к сервису
//
Функция ПроверитьПодключениеКСервису(БанковскийСчет) Экспорт

	ПараметрыБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							БанковскийСчет, "РучноеИзменениеРеквизитовБанка,Банк,Владелец,ИдентификаторСчетаBankFeeds,ИспользоватьОбменСБанкомBankFeeds"); 
							
	Если Не ПараметрыБанковскогоСчета.ИспользоватьОбменСБанкомBankFeeds
		ИЛИ ПараметрыБанковскогоСчета.ИдентификаторСчетаBankFeeds	= "" Тогда

		Возврат Ложь;
		
	КонецЕсли;	
							
	Если ПараметрыБанковскогоСчета.РучноеИзменениеРеквизитовБанка Тогда
			
		ТекущийБанк = БанковскийСчет;
	Иначе
		
		ТекущийБанк = ПараметрыБанковскогоСчета.Банк;
		
	КонецЕсли;	
	
	ТекущаяНастройка = НастройкаОбмена(ПараметрыБанковскогоСчета.Владелец, ТекущийБанк);
	
	Возврат ЗначениеЗаполнено(ТекущаяНастройка)
	
КонецФункции	

// Определяет текущую дату сеанса
//
// Возвращаемое значение:
//  Дата - дата сеанса
//
Функция ЛокальнаяТекущаяДата() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

#Область СостояниеПлатежногоДокумента

// Заполняет на форме состояние платежного документа
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа
//    
Процедура ПриСозданииПлатежногоДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.СостояниеBankFeeds = СостояниеПлатежногоДокумента(Объект.Ссылка);
	
КонецПроцедуры	

// Если не включена функциональность ИспользоватьОбменСБанками
// то удаляется элемент состояние директ банка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//    
Процедура ПриСозданииФормыДокументаНаСервере(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	//++ Локализация
	Если Элементы.Найти("СостояниеДиректБанк") <> Неопределено Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
			Элементы.СостояниеДиректБанк.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	//-- Локализация	
	
КонецПроцедуры

// После записи списания ДС процедура формирует запись НеОтправлен в регистр СтатусыТранзакцийBankFeeds
//
// Параметры:
//   Объект - ДокументОбъект - Вызывется в документах, у которых нужно записать первоначальный статус транзакции    
//    
Процедура ПослеЗаписиПлатежногоДокумента(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменBankFeeds") Тогда
		Возврат ;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК ПлатежныйДокумент
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО СписаниеБезналичныхДенежныхСредств.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыТранзакцийBankFeeds КАК СтатусыТранзакцийBankFeeds
	|		ПО СписаниеБезналичныхДенежныхСредств.Ссылка = СтатусыТранзакцийBankFeeds.Объект
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка = &Ссылка
	|	И БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И СтатусыТранзакцийBankFeeds.Статус ЕСТЬ NULL";   
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл

		ПлатежныйДокумент = Результат.ПлатежныйДокумент;
		
		НачатьТранзакцию();
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыТранзакцийBankFeeds");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Объект", ПлатежныйДокумент);
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.СтатусыТранзакцийBankFeeds.СоздатьНаборЗаписей();
			Набор.Отбор.ТипИдентификатора.Установить(Перечисления.ТипыИдентификаторовBankFeeds.ПоПлатежномуПоручению);
			Набор.Отбор.Объект.Установить(ПлатежныйДокумент);
			
			Запись = Набор.Добавить();
			
			Запись.Объект = ПлатежныйДокумент;
			Запись.ТипИдентификатора = Перечисления.ТипыИдентификаторовBankFeeds.ПоПлатежномуПоручению;
			
			Запись.Статус = Перечисления.СтатусыПлатежныхДокументовBankFeeds.НеОтправлен;
			Запись.ИдентификаторТранзакции = "";
			
			Набор.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область ПараметрыФормы

// Возвращает почту у организации
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация
//    
// 
// Возвращаемое значение:
//  Строка - почта
//
Функция ПочтаОрганизации(Организация) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			Организация,Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ТекущаяДатаСеанса());
	
КонецФункции	

#КонецОбласти

#Область ПараметрыЗапросов

// Возвращает структуру параметров для запроса, данные собираются по входным параметрам
// Используется для проверки соединения. когда неизвестна организация.
//
// Параметры:
//   ПараметрыЗаполнения - Структура - структура данных
// 
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСервису
//
Функция ПреобразоватьВПараметрыЗапросаДляПроверкиСоединения(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСервису();
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиАвторизации = Справочники.ИнтеграцияBankFeeds.НастройкиАвторизации(
		ПараметрыЗаполнения.НастройкиСервиса);
	УстановитьПривилегированныйРежим(Ложь);

	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, НастройкиАвторизации); 
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыЗаполнения); 
	
	ПараметрыЗапроса.Сервис = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.НастройкиСервиса, "Сервис");
		
	ПараметрыЗапроса.АдресСервиса = АдресСервиса(ПараметрыЗапроса.Сервис);

	СхемаАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыЗапроса.АдресСервиса);
	ПараметрыЗапроса.ИмяХоста = СхемаАдреса.Хост;  
	
    Возврат ПараметрыЗапроса;
	
КонецФункции	

// Возвращает структуру параметров для запроса, данные собираются по входным параметрам
//
// Параметры:
//   ПараметрыЗаполнения - Структура - структура данных
// 
// Возвращаемое значение:
//  см. ПараметрыЗапросаКСервису
//
Функция ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаКСервису();
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиАвторизации = Справочники.ИнтеграцияBankFeeds.НастройкиАвторизации(
		ПараметрыЗаполнения.НастройкиСервиса);
	УстановитьПривилегированныйРежим(Ложь);

	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, НастройкиАвторизации); 
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыЗаполнения); 
	
	ПараметрыЗапроса.Сервис = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.НастройкиСервиса, "Сервис");
		
	ПараметрыЗапроса.АдресСервиса = АдресСервиса(ПараметрыЗапроса.Сервис);

	СхемаАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыЗапроса.АдресСервиса);
	ПараметрыЗапроса.ИмяХоста = СхемаАдреса.Хост;  
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.БанковскийСчет) Тогда
		
		ПараметрыБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыЗапроса.БанковскийСчет, "НомерСчета,ИдентификаторСчетаBankFeeds,ВалютаДенежныхСредств");
			
		ПараметрыЗапроса.НомерБанковскогоСчета = ПараметрыБанковскогоСчета.НомерСчета;
		ПараметрыЗапроса.ИдентификаторСчета = ПараметрыБанковскогоСчета.ИдентификаторСчетаBankFeeds;	
		ПараметрыЗапроса.ВалютаСчета = ПараметрыБанковскогоСчета.ВалютаДенежныхСредств;
		
	КонецЕсли;	

	НастройкиСоединения = НастройкиОрганизацииИБанка(ПараметрыЗаполнения);
	
	Если Не НастройкиСоединения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, НастройкиСоединения);
	КонецЕсли;	

	СоответствиеРеквизитовРегистрации = 
		СловарьBankFeedsСлужебный.СоответствиеРеквизитовРегистрацииНаФормеРеквизитамЗапроса();
		
		Если ТипЗНЧ(ПараметрыЗаполнения) = ТИП("Структура") 
			И ПараметрыЗаполнения.Свойство("РеквизитыРегистрации")
			И ЗначениеЗаполнено(ПараметрыЗаполнения.РеквизитыРегистрации) Тогда	
		
		 РеквизитыРегистрации = ПараметрыЗаполнения.РеквизитыРегистрации;
		
	ИначеЕсли Не НастройкиСоединения = Неопределено Тогда
		
		РеквизитыРегистрации = НастройкиСоединения.РеквизитыРегистрации.Получить();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыРегистрации) Тогда
		Для Каждого ТекущееПоле Из РеквизитыРегистрации Цикл
			     ТекущееСоответствиеТекущегоПоля = СоответствиеРеквизитовРегистрации[ТекущееПоле.Ключ];
				 
				ЗначениеРеквизитаРегистрации = ТекущееПоле.Значение;				 
				 
			Если ТекущееСоответствиеТекущегоПоля <> Неопределено Тогда 
				
				Если ТипЗНЧ(ТекущееПоле.Значение) = Тип("СправочникСсылка.СтраныМира") Тогда
					
					ЗначениеРеквизитаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееПоле.Значение, "КодАльфа2");
					
				ИначеЕсли ТипЗНЧ(ТекущееПоле.Значение) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда	
					
					Если ТекущееПоле.Значение = Перечисления.ПолФизическогоЛица.Женский Тогда
						ЗначениеРеквизитаРегистрации = "female";
					Иначе 
						ЗначениеРеквизитаРегистрации= "male";
					КонецЕсли;	

				ИначеЕсли ТипЗНЧ(ТекущееПоле.Значение) = Тип("Дата") Тогда	
					
					 ЗначениеРеквизитаРегистрации = Формат(ТекущееПоле.Значение, "ДФ=yyyy-MM-dd");
					
				КонецЕсли;	
				
				ПараметрыЗапроса.РеквизитыРегистрацииДляЗапроса.Вставить(
													ТекущееСоответствиеТекущегоПоля, ЗначениеРеквизитаРегистрации);
			КонецЕсли;	

		КонецЦикла;	
	КонецЕсли;	
	
	ПараметрыОрганизации = Справочники.Организации.ПолучитьРеквизитыОрганизации(ПараметрыЗапроса.Организация);
	
	ПараметрыЗапроса.КодСтраныРегистрацииОрганизации = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОрганизации.СтранаРегистрации, "КодАльфа2");
	
	ПараметрыЗапроса.IPАдрес = ЦифровойСлед().IPАдрес;
	
    Возврат ПараметрыЗапроса;
	
КонецФункции	

// Возвращает тело запроса по команде
//
// Параметры:
//   Сервис - ПеречислениеСсылка.СервисыBankFeeds - сервис, по которому нужно найти тело команды
//   Команда - Строка - команда
// 
// Возвращаемое значение:
//  Строка - тело команды 
//
Функция ТелоЗапросаПоКоманде(Сервис, Команда) Экспорт
	
	 СписокТелКоманд = СловарьBankFeedsСлужебный.СписокТелКоманд(Сервис);
	 
	 Возврат СписокТелКоманд[Команда];
	
КонецФункции	

// Возвращает данные из регистра сведений ПодключенияКБанкамBankFeeds 
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация
//   Банк - СправочникСсылка.КлассификаторБанков - банк 
// 
// Возвращаемое значение:
//   Структура  - Структура параметров: 
//		* ДатаПодключения - Дата - дата подключения.
//		* НастройкиСервиса - СправочникСсылка.ИнтеграцияBankFeeds - настройка сервиса.
//
Функция НастройкаОбмена(Организация, Банк) Экспорт

	 ИспользуетсяСервисBankFeeds = Константы.ИспользоватьСервисBankFeeds.Получить(); 

	 НастройкаОбмена = Новый Структура("ДатаПодключения,НастройкиСервиса", 
	 							Дата(1,1,1,0,0,0), Справочники.ИнтеграцияBankFeeds.ПустаяСсылка());
	 
	 Если Не ИспользуетсяСервисBankFeeds Тогда
		 Возврат НастройкаОбмена;
	 КонецЕсли;	 
	
	 Запрос = Новый Запрос; 
	 Запрос.УстановитьПараметр("Организация",Организация);
	 Запрос.УстановитьПараметр("Банк",Банк);  
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ПодключенияКБанкамBankFeeds.Организация КАК Организация,
	 |	ПодключенияКБанкамBankFeeds.Банк КАК Банк,
	 |	ПодключенияКБанкамBankFeeds.ДатаПодключения КАК ДатаПодключения,
	 |	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса
	 |ИЗ
	 |	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	 |ГДЕ
	 |	ПодключенияКБанкамBankFeeds.Организация = &Организация
	 |	И ПодключенияКБанкамBankFeeds.Банк = &Банк"; 
	 
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Если Результат.Следующий() Тогда
		 
		 // По дате определяем что подключение прошло все этапы
		 Если Результат.ДатаПодключения <> Дата(1,1,1,0,0,0) Тогда 
			 
			ЗаполнитьЗначенияСвойств(НастройкаОбмена , Результат); 
			
			Возврат НастройкаОбмена;
		КонецЕсли;	
		 
	 КонецЕсли;
	 
	 Возврат НастройкаОбмена;
	
КонецФункции	

#КонецОбласти

#Область ЗапросыКСервису

// Функция выполняет запрос по проверке подключения к сервису
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  * СтатусОтвета - Строка
//  * ПараметрыЗаполнения - Строка - Структура
//  * МассивОшибок - Массив из Строка
//
Функция ПроверитьПодключение(ПараметрыЗапроса) Экспорт

	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());

	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	ПараметрыЗапроса.HTTPМетод = "GET";
	
	// Проверить подключение
	ОтветПользовательСоздан = ВыполнитьЗапросКСервису(КомандыСервисов.ПолучитьСписокОрганизаций, ПараметрыЗапроса);
	
	Если ОтветПользовательСоздан["data"] <> Неопределено Тогда               
		
		РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
		
	КонецЕсли;	
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

// Функция выполняет набор запросов по обновлению соединения
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ОбновитьСоединение(ПараметрыЗапроса) Экспорт
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СсылкаНаОбновлениеСоединения", ""); 
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	
	// Делаем запрос на обновление соединения
	СтруктураТела = ТелоЗапросаПоКоманде(ПараметрыЗапроса.Сервис, КомандыСервисов.ОбновитьСоединение);
	СтруктураТела.Data.customer_id = ПараметрыЗапроса.ИдентификаторОрганизации; 	
	СтруктураТела.Data.connection_id = ПараметрыЗапроса.ИдентификаторСоединения; 
	СтруктураТела.Data.consent.from_date = Формат(ЛокальнаяТекущаяДата(), "ДФ=yyyy-MM-dd");  
	СтруктураТела.Data.attempt.custom_fields.numberAccount = ПараметрыЗапроса.НомерБанковскогоСчета;
	СтруктураТела.Data.attempt.custom_fields.nameBank = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Банк, "Наименование");
	СтруктураТела.Data.attempt.custom_fields.RecordID = ПараметрыЗапроса.ИдентификаторЗаписи;
	
	ПараметрыЗапроса.ТелоЗапроса = СтруктураТела;
	ПараметрыЗапроса.HTTPМетод = "POST";
	ОтветСсылкаНаАвторизацию = ВыполнитьЗапросКСервису(КомандыСервисов.ОбновитьСоединение, ПараметрыЗапроса);
	Данные = ОтветСсылкаНаАвторизацию["data"];
	СсылкаНаОбновлениеСоединения = Данные["redirect_url"];
	
	Если СсылкаНаОбновлениеСоединения = "" Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис: %1 отправляет пустую ссылку на обновление соединения'"),
				ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
	
		Возврат РезультатВыполненияЗапроса;

	КонецЕсли;	
		
	РезультатВыполненияЗапроса.СсылкаНаОбновлениеСоединения = СсылкаНаОбновлениеСоединения;
	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	РезультатВыполненияЗапроса.ПараметрыЗаполнения = ПараметрыЗапроса;
	
	Возврат РезультатВыполненияЗапроса;
КонецФункции	

// Функция выполняет набор запросов по отзыву согласия
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ОтзывСогласия(ПараметрыЗапроса) Экспорт
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусСогласия", ""); 
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	
	// Делаем запрос на Поиск согласий
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьСписокСогласий);
	ПараметрConnection_id = ПараметрыКоманды.Connection_id;
	ПараметрКоманды1 = СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", ПараметрыЗапроса.ИдентификаторСоединения);
	СтрокаПараметров = "?" + ПараметрКоманды1;
	
	ПараметрыЗапроса.HTTPМетод = "GET";    
	
	ПродолжатьЧтениеСтраниц = Истина;
	СтрокаПараметровСтраницы = "";
	
	Пока ПродолжатьЧтениеСтраниц Цикл 
		
		ОтветСсылкаНаАвторизацию = ВыполнитьЗапросКСервису(КомандыСервисов.ПолучитьСписокСогласий, 
										ПараметрыЗапроса, СтрокаПараметров + СтрокаПараметровСтраницы);
		Данные = ОтветСсылкаНаАвторизацию["data"];
		Мета = ОтветСсылкаНаАвторизацию["meta"];
		
		МассивИдентификаторовСогласий = Новый Массив();
		
		Для Каждого ТекСтрока Из Данные Цикл
			
			Если ТекСтрока["status"] = "active" Тогда
				МассивИдентификаторовСогласий.Добавить(ТекСтрока["id"]);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если Мета["next_id"] = Неопределено Тогда
			ПродолжатьЧтениеСтраниц = Ложь;  
		Иначе	
			СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если МассивИдентификаторовСогласий.Количество() = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сервис: %1 , ошибка, не найдено согласие'"),
		ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
		Возврат РезультатВыполненияЗапроса;
		
	КонецЕсли;	
	
	Для Каждого ТекСтрокаМассивИдентификаторовСогласий Из МассивИдентификаторовСогласий Цикл
		
		ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.АннулироватьСогласие);
		ПараметрConnection_id = ПараметрыКоманды.Connection_id;
		ПараметрКоманды1 = СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", 
																			ПараметрыЗапроса.ИдентификаторСоединения);
		СтрокаПараметров =  "/" + ТекСтрокаМассивИдентификаторовСогласий + "/revoke?" + ПараметрКоманды1;
	
		ПараметрыЗапроса.HTTPМетод = "PUT";
		ОтветСервиса = ВыполнитьЗапросКСервису(КомандыСервисов.АннулироватьСогласие, 
																	ПараметрыЗапроса, СтрокаПараметров);
		Данные = ОтветСервиса["data"];
		
		Если ПараметрыЗапроса.ИдентификаторСогласия = "" Тогда 
			ПараметрыЗапроса.ИдентификаторСогласия = Данные["id"];
		КонецЕсли;	
		
	КонецЦикла;
	
	РезультатВыполненияЗапроса.СтатусСогласия = Данные["status"];
	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	РезультатВыполненияЗапроса.ПараметрыЗаполнения = ПараметрыЗапроса;
	
	Возврат РезультатВыполненияЗапроса;
КонецФункции	

// Функция проверяет статус согласия
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ПроверитьСтатусСоединенияИСогласия(ПараметрыЗапроса) Экспорт
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусСоединения", ""); 
	РезультатВыполненияЗапроса.Вставить("СтатусСогласия", ""); 
	РезультатВыполненияЗапроса.Вставить("СрокДействияСогласия", ""); 
	РезультатВыполненияЗапроса.Вставить("ДатаОкончанияСогласия", ""); 
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	
	//Делаем запрос по согласию
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьСписокСогласий);
	ПараметрConnection_id = ПараметрыКоманды.Connection_id;
	ПараметрКоманды1 = СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", ПараметрыЗапроса.ИдентификаторСоединения);
	СтрокаПараметров = "/" +  ПараметрыЗапроса.ИдентификаторСогласия +"?" + ПараметрКоманды1;
	
	ПараметрыЗапроса.HTTPМетод = "GET";    
	
	ОтветОтСервиса = ВыполнитьЗапросКСервису(КомандыСервисов.ПолучитьСписокСогласий, 
													ПараметрыЗапроса, СтрокаПараметров);
	Данные = ОтветОтСервиса["data"];
	
	РезультатВыполненияЗапроса.СтатусСогласия = Данные["status"];	
	РезультатВыполненияЗапроса.СрокДействияСогласия = Данные["period_days"];
	РезультатВыполненияЗапроса.ДатаОкончанияСогласия = ПолучитьЗначение(Данные, "expires_at", Дата("00010101"));
	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	РезультатВыполненияЗапроса.ПараметрыЗаполнения = ПараметрыЗапроса;
	
	Если РезультатВыполненияЗапроса.СтатусСогласия = "active" Тогда
		//Делаем запрос по подключению
		ПараметрыЗапроса.HTTPМетод = "GET"; 
		ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьИзСервисаСписокСоединений);
		ПараметрКоманды = "/" + ПараметрыЗапроса.ИдентификаторСоединения;
		
		Попытка
			ОтветСписокПровайдеров = ВыполнитьЗапросКСервису(
			КомандыСервисов.ПолучитьИзСервисаСписокСоединений, ПараметрыЗапроса, ПараметрКоманды);
		
			Данные = ОтветСписокПровайдеров["data"];
		
			СтатусСоединения = Данные["status"];
			
		Исключение   

			СтатусСоединения = "unknown";
			
		КонецПопытки;	
	Иначе
		
		СтатусСоединения = "unknown";
		
	КонецЕсли;
	
	РезультатВыполненияЗапроса.СтатусСоединения = СтатусСоединения;
	
	Возврат РезультатВыполненияЗапроса; 
	
КонецФункции	

// Функция выполняет набор запросов по авторизации банковского счета
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ЗарегистрироватьПодключение(ПараметрыЗапроса) Экспорт
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СсылкаНаАвторизацию", ""); 
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	
	// Ищем идентификатор организации, если не заполнен идентификатор
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторОрганизации) Тогда
		
		СтруктураТела = ТелоЗапросаПоКоманде(ПараметрыЗапроса.Сервис, КомандыСервисов.СоздатьПользователя);
		ЗаполнитьЗначенияСвойств(СтруктураТела.Data, ПараметрыЗапроса);
		СтруктураТела.Data.identifier = 
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Организация, "Наименование");
        ЗаполнитьЗначенияСвойств(СтруктураТела.Data.kyc, ПараметрыЗапроса.РеквизитыРегистрацииДляЗапроса);
		ПараметрыЗапроса.ТелоЗапроса = СтруктураТела; 
		ПараметрыЗапроса.HTTPМетод = "POST";
	
		// Создать пользователя
		ОтветПользовательСоздан = ВыполнитьЗапросКСервису(КомандыСервисов.СоздатьПользователя, ПараметрыЗапроса);
	
		Данные = ОтветПользовательСоздан["data"];
		customer_id = Данные["customer_id"];
    	ПараметрыЗапроса.ИдентификаторОрганизации = customer_id;

		Если customer_id = "" Тогда
		
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка в присвоении идентификатора организации %1 в сервисе: %2'"),
					ПараметрыЗапроса.Организация, ПараметрыЗапроса.Сервис);
			РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
			Возврат РезультатВыполненияЗапроса;
		
		КонецЕсли;	
	КонецЕсли;	
	
	// Делаем запрос на создание лида
	СтруктураТела = ТелоЗапросаПоКоманде(ПараметрыЗапроса.Сервис, КомандыСервисов.СоздатьЛидСессию);
	СтруктураТела.Data.customer_id = ПараметрыЗапроса.ИдентификаторОрганизации; 	
	СтруктураТела.Data.provider_code = ПараметрыЗапроса.ИдентификаторПровайдера; 
	СтруктураТела.Data.attempt.custom_fields.numberAccount = ПараметрыЗапроса.НомерБанковскогоСчета;
	СтруктураТела.Data.attempt.custom_fields.nameBank = 
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.Банк, "Наименование");

	ПараметрыЗапроса.ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор()); 
	
	СтруктураТела.Data.attempt.custom_fields.RecordID = ПараметрыЗапроса.ИдентификаторЗаписи;
	ПараметрыЗапроса.ТелоЗапроса = СтруктураТела;
	ПараметрыЗапроса.HTTPМетод = "POST";
	ОтветСсылкаНаАвторизацию = ВыполнитьЗапросКСервису(КомандыСервисов.СоздатьЛидСессию, ПараметрыЗапроса);
	Данные = ОтветСсылкаНаАвторизацию["data"];
	СсылкаНаАвторизацию = Данные["redirect_url"];
	
	Если СсылкаНаАвторизацию = "" Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис: %1 отправляет пустюю ссылку на авторизацию'"),
				ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
	
		Возврат РезультатВыполненияЗапроса;

	КонецЕсли;	
	
	РезультатВыполненияЗапроса.СсылкаНаАвторизацию = СсылкаНаАвторизацию;
	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	РезультатВыполненияЗапроса.ПараметрыЗаполнения = ПараметрыЗапроса;
	
	Возврат РезультатВыполненияЗапроса;
КонецФункции	

// Функция выполняет набор запросов после авторизации у провайдера
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ПолучитьДанныеПодключенияПослеАвторизацииПользователя(ПараметрыЗапроса) Экспорт

	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();

	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   

	ПараметрыЗапроса.HTTPМетод = "GET"; 
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьИзСервисаСписокСоединений);
	ПараметрCustomer_id = ПараметрыКоманды.Customer_id;
	ПараметрКоманды = "?" + СтрЗаменить(ПараметрCustomer_id, "%CUSTOMER_ID%", ПараметрыЗапроса.ИдентификаторОрганизации);
	
	ПродолжатьЧтениеСтраниц = Истина;
	СтрокаПараметровСтраницы = "";
	
	Пока ПродолжатьЧтениеСтраниц Цикл 
		
		ОтветСписокПровайдеров = ВыполнитьЗапросКСервису(
		КомандыСервисов.ПолучитьИзСервисаСписокСоединений, ПараметрыЗапроса, ПараметрКоманды + СтрокаПараметровСтраницы);
		
		Данные = ОтветСписокПровайдеров["data"];
		Мета = ОтветСписокПровайдеров["meta"];
		
		ИдентификаторСоединенияНайден = Ложь;
		// Отбираем соединение по идентификатору записи 
		Для Каждого ТекСтрока Из Данные Цикл
			
				custom_fields = ТекСтрока["last_attempt"]["custom_fields"];
				
				Если custom_fields.Количество() > 0 Тогда
					
					ИдентификаторЗаписиИзПопытки = custom_fields.Получить("RecordID"); 
					
					Если ИдентификаторЗаписиИзПопытки <> Неопределено                         
						И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторЗаписи) 
						И ПараметрыЗапроса.ИдентификаторЗаписи = ИдентификаторЗаписиИзПопытки Тогда  
						
						ПараметрыЗапроса.ИдентификаторСоединения = ТекСтрока["id"];  
						ПараметрыЗапроса.ИдентификаторПровайдера = ТекСтрока["provider_code"];
						ПараметрыЗапроса.НаименованиеПровайдера =  ТекСтрока["provider_name"];
						
						ИдентификаторСоединенияНайден = Истина;
						Прервать;
						
					КонецЕсли; 
				КонецЕсли;		  
			
		КонецЦикла;	                 
		
		Если ИдентификаторСоединенияНайден Тогда
			Прервать;
		ИначеЕсли Мета["next_id"] = Неопределено Тогда
			ПродолжатьЧтениеСтраниц = Ложь;  
		Иначе	
			СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ПараметрыЗапроса.ИдентификаторСоединения = ""
		ИЛИ НЕ ИдентификаторСоединенияНайден Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден идентификатор соединения по банку %1 в сервисе: %2'"),
				ПараметрыЗапроса.Банк, ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
		Возврат РезультатВыполненияЗапроса;
		
	КонецЕсли;	

	//Делаем запрос на Поиск согласий
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьСписокСогласий);
	ПараметрConnection_id = ПараметрыКоманды.Connection_id;
	ПараметрКоманды1 = СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", ПараметрыЗапроса.ИдентификаторСоединения);
	СтрокаПараметров = "?" + ПараметрКоманды1;
	
	ПараметрыЗапроса.HTTPМетод = "GET";    
	
	ПродолжатьЧтениеСтраниц = Истина;
	СтрокаПараметровСтраницы = "";
	
	Пока ПродолжатьЧтениеСтраниц Цикл 
		
		ОтветОтСервиса = ВыполнитьЗапросКСервису(КомандыСервисов.ПолучитьСписокСогласий, 
										ПараметрыЗапроса, СтрокаПараметров + СтрокаПараметровСтраницы);
		Данные = ОтветОтСервиса["data"];
		Мета = ОтветОтСервиса["meta"];
		
		Для Каждого ТекСтрока Из Данные Цикл
			
			Если ТекСтрока["status"] = "active" Тогда
				ПараметрыЗапроса.ИдентификаторСогласия = ТекСтрока["id"];
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если Мета["next_id"] = Неопределено Тогда
			ПродолжатьЧтениеСтраниц = Ложь;  
		Иначе	
			СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ПараметрыЗапроса.ИдентификаторСогласия = "" Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено согласие по банку %1 в сервисе: %2'"),
				ПараметрыЗапроса.Банк, ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
		Возврат РезультатВыполненияЗапроса;
		
	КонецЕсли;	

	ОсновнойФормат = СловарьBankFeedsСлужебный.ОсновнойШаблонФорматаПлатежногоПоручения();
	
	// Запрос на получение форматов банка
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторПровайдера) Тогда
		// Найти банк
		ПараметрыЗапроса.ТелоЗапроса.Очистить();
		ПараметрыЗапроса.HTTPМетод = "GET"; 
		
		ОтветСписокПровайдеров = ВыполнитьЗапросКСервису(
		КомандыСервисов.ПолучитьИзСервисаСписокПровайдеров + "/" + ПараметрыЗапроса.ИдентификаторПровайдера, 
		ПараметрыЗапроса, СтрокаПараметровСтраницы);
		
		Данные = ОтветСписокПровайдеров["data"];
		
		Для Каждого ТекСтрока Из Данные Цикл
			
			Если ТекСтрока.Ключ = "payment_templates" Тогда
				
				ПоддерживаемыеФорматы = ТекСтрока.Значение;
				
				Для Каждого ТекСтрока Из ПоддерживаемыеФорматы Цикл
					
					Если ТекСтрока = Строка(ОсновнойФормат) Тогда
						
						ПараметрыЗапроса.ФорматПлатежаПоIBAN = ОсновнойФормат; 
						ПараметрыЗапроса.ФорматПлатежаПоBBAN = Перечисления.ФорматыПлатежейBankFeeds.ПустаяСсылка();
						
					КонецЕсли;	 
				КонецЦикла;		 
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ПараметрыЗапроса.НомерБанковскогоСчета) Тогда
		
		ПараметрыЗапроса.HTTPМетод = "GET"; 
		ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьИзСервисаСписокСчетов);
		ПараметрConnection_id = ПараметрыКоманды.Connection_id;
		ПараметрКоманды = "?" + СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", 
		ПараметрыЗапроса.ИдентификаторСоединения);       
		
		ПродолжатьЧтениеСтраниц = Истина;
		СтрокаПараметровСтраницы = "";
		СчетНайден = Ложь;
		ВалютаНаименование  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗапроса.ВалютаСчета, "Наименование");
		
		Пока ПродолжатьЧтениеСтраниц Цикл 
			
			ОтветСписокСчетов = ВыполнитьЗапросКСервису(
			КомандыСервисов.ПолучитьИзСервисаСписокСчетов, ПараметрыЗапроса, ПараметрКоманды + СтрокаПараметровСтраницы);
			
			Данные = ОтветСписокСчетов["data"];
			Мета = ОтветСписокСчетов["meta"];
			
			Для Каждого ТекСтрока Из Данные Цикл
				extra = ТекСтрока["extra"];
				
				Если СтрНайти(extra["iban"], ПараметрыЗапроса.НомерБанковскогоСчета) > 0
					И ТекСтрока["currency_code"] = ВалютаНаименование Тогда
					ПараметрыЗапроса.ИдентификаторСчета = ТекСтрока["id"]; 
					СчетНайден = Истина;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если СчетНайден Тогда
				Прервать;	
			ИначеЕсли Мета["next_id"] = Неопределено Тогда
				ПродолжатьЧтениеСтраниц = Ложь;  
			Иначе	
				СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если ПараметрыЗапроса.ИдентификаторСчета = "" Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно подключить банковский счет. Банковский счет с номером счета %1 не найден в банке %2 с помощью поставщика услуг: %3'"),
			ПараметрыЗапроса.НомерБанковскогоСчета, ПараметрыЗапроса.Банк, ПараметрыЗапроса.Сервис);
			РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
			
			Возврат РезультатВыполненияЗапроса;
			
		КонецЕсли;	
	
	КонецЕсли;

	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	РезультатВыполненияЗапроса.ПараметрыЗаполнения = ПараметрыЗапроса;
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции	

// Функция выполняет загрузку транзакций из сервиса
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
//   ДатаНачала - Дата - дата начала загрузки транзакции
//   ДатаОкончания - Дата - дата окончания загрузки транзакции
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ПолучитьТранзакции(ПараметрыЗапроса, ДатаНачала, ДатаОкончания) Экспорт

	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();

	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("ТаблицаТранзакций", Новый ТаблицаЗначений());
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());

	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   

	ПараметрыЗапроса.HTTPМетод = "GET"; 
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьИзСервисаСписокТранзакций);
	ПараметрConnection_id = ПараметрыКоманды.Connection_id;
	ПараметрAccount_id = ПараметрыКоманды.Account_id;
	ПараметрКоманды1 = СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", ПараметрыЗапроса.ИдентификаторСоединения);
	ПараметрКоманды2 = СтрЗаменить(ПараметрAccount_id, "%ACCOUNT_ID%", ПараметрыЗапроса.ИдентификаторСчета);         
	СтрокаПараметров = "?" + ПараметрКоманды1 + "&" + ПараметрКоманды2;
	
	ПродолжатьЧтениеСтраниц = Истина;
	СтрокаПараметровСтраницы = "";

	ТаблицаТранзакций = СоздатьТаблицуТранзакций();
	
	Пока ПродолжатьЧтениеСтраниц Цикл 
		
		ОтветСписокТранзакций = ВыполнитьЗапросКСервису(
			КомандыСервисов.ПолучитьИзСервисаСписокТранзакций, ПараметрыЗапроса, 
																СтрокаПараметров + СтрокаПараметровСтраницы);

		Данные = ОтветСписокТранзакций["data"];
		Мета = ОтветСписокТранзакций["meta"];
		
		// Подумать как сделать быстрее поиск
		Для Каждого ТекСтрока Из Данные Цикл
		
			ДатаСоздания = ПолучитьЗначение(ТекСтрока, "made_on", "ДатаJSON", Дата("00010101"));
		
			Если ДатаНачала <= ДатаСоздания 
				И ДатаСоздания <= ДатаОкончания Тогда
					ДобавитьТранзакцию(ТаблицаТранзакций, ТекСтрока);
			КонецЕсли;	
		
		КонецЦикла;	
		
		Если Мета["next_id"] = Неопределено Тогда
			ПродолжатьЧтениеСтраниц = Ложь;  
		Иначе	
			СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
		КонецЕсли;	
		
	КонецЦикла;	
		
	// Формируем запрос по мерчантам
	Если ТаблицаТранзакций.Количество() > 0 Тогда
		Фильтр = Новый Структура("ЕстьMerchant", Истина);
		МассивИдМерчантов = Новый Массив();
		
		НайденныеСтроки = ТаблицаТранзакций.НайтиСтроки(Фильтр);
		
		Для Каждого ТекущаяСтрокаНайденныеСтроки Из НайденныеСтроки Цикл
			МассивИдМерчантов.Добавить(ТекущаяСтрокаНайденныеСтроки.IDMerchant);
		КонецЦикла;
		
		МассивИдМерчантов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивИдМерчантов);
		
		ОтветНаСписокМерчантов = ВыполнитьЗапросНаСписокМерчантов(МассивИдМерчантов, ПараметрыЗапроса);
		
		Данные = ОтветНаСписокМерчантов["data"];
		Фильтр = Новый Структура("IDMerchant", "");

	//*********************
		Для Каждого ТекСтрока Из Данные Цикл
			
			ТекущийИДМерчанта = ТекСтрока["id"];
			СписокАтрибутов = ТекСтрока["names"];
			НаименованиеМерчанта = "";
			
			Для Каждого ТекущаяСтрокаСписокАтрибутов Из СписокАтрибутов Цикл
				
				Если ТекущаяСтрокаСписокАтрибутов["mode"] = "name" Тогда
					
					НаименованиеМерчанта = ТекущаяСтрокаСписокАтрибутов["value"];		
					Прервать;
				КонецЕсли;	
			
			КонецЦикла;
			
			Фильтр.IDMerchant = ТекущийИДМерчанта;
			НайденныеСтроки = ТаблицаТранзакций.НайтиСтроки(Фильтр);
			
			Для Каждого ТекущаяСтрокаНайденныеСтроки Из НайденныеСтроки Цикл

				ТекущаяСтрокаНайденныеСтроки.NameMerchant = НаименованиеМерчанта;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;
	//*********************
	
	РезультатВыполненияЗапроса.ТаблицаТранзакций = ТаблицаТранзакций;	
	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	
	Если ТаблицаТранзакций.Количество() = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Транзакции не загружены по банку %1 в сервисе: %2'"),
				ПараметрыЗапроса.Банк, ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
	КонецЕсли;	
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции	

// Функция выполняет набор запросов по проверке статуса платежных документов
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ПолучитьСтатусыПлатежныхДокументов(ПараметрыЗапроса) Экспорт
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("ТаблицаПлатежейВСервисе", "");
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	
	ПараметрыЗапроса.HTTPМетод = "GET"; 
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(
													КомандыСервисов.ПолучитьИзСервисаСписокПлатежныхДокументов);
	ПараметрCustomer_id = ПараметрыКоманды.Customer_id;
	ПараметрКоманды = "?" + СтрЗаменить(ПараметрCustomer_id, "%CUSTOMER_ID%", ПараметрыЗапроса.ИдентификаторОрганизации);
	
	ТаблицаПлатежейВСервисе = Новый ТаблицаЗначений();
	ТаблицаПлатежейВСервисе.Колонки.Добавить("id", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("UIDDOcument", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ТаблицаПлатежейВСервисе.Колонки.Добавить("provider_code", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("provider_name", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("customer_id", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("created_at", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("updated_at", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("status", ОбщегоНазначения.ОписаниеТипаСтрока(19));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("template_identifier", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("end_to_end_id", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("reference", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("customer_last_logged_at", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("customer_ip_address", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("customer_device_os", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("creditor_name", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("creditor_street_name", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("creditor_building_number", ОбщегоНазначения.ОписаниеТипаСтрока(5));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("creditor_country_code", ОбщегоНазначения.ОписаниеТипаСтрока(5));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("currency_code", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("amount", 			Новый ОписаниеТипов("Число"));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("description", ОбщегоНазначения.ОписаниеТипаСтрока(700));
	ТаблицаПлатежейВСервисе.Колонки.Добавить("creditor_iban", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	ПродолжатьЧтениеСтраниц = Истина;
	СтрокаПараметровСтраницы = "";
	
	Пока ПродолжатьЧтениеСтраниц Цикл 
		
		ОтветСписокПлатежныхДокументов = ВыполнитьЗапросКСервису(
		КомандыСервисов.ПолучитьИзСервисаСписокПлатежныхДокументов, 
												ПараметрыЗапроса, ПараметрКоманды + СтрокаПараметровСтраницы);
		
		Данные = ОтветСписокПлатежныхДокументов["data"];
		Мета = ОтветСписокПлатежныхДокументов["meta"];
		
		// 
		Для Каждого ТекСтрокаData Из Данные Цикл
			
			НоваяСтрока = ТаблицаПлатежейВСервисе.Добавить();	
			
			Для Каждого ТекСтрокаDataСтрокаПлатежа Из ТекСтрокаData Цикл
				
				Если ТекСтрокаDataСтрокаПлатежа.Ключ = "payment_attributes" Тогда
					
					Для Каждого ТекСтрокаDataСтрокаПлатежаПлатежныеПоля Из ТекСтрокаDataСтрокаПлатежа.Значение Цикл
						
						Если ТаблицаПлатежейВСервисе.Колонки.Найти(ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Ключ) <> Неопределено Тогда  
							Если ТипЗнч(НоваяСтрока[ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Ключ]) = Тип("Число") Тогда
								НоваяСтрока[ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Ключ] = 
																Число(ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Значение);
							Иначе	
								НоваяСтрока[ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Ключ] = 
																	ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Значение;
								
							КонецЕсли;	
						ИначеЕсли ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Ключ = "end_to_end_id"
							И ЗначениеЗаполнено(ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Значение)
							И СтрДлина(ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Значение) = 32 Тогда
							
							УИДСокращенный = ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Значение;
							
							Если ЗначениеЗаполнено(УИДСокращенный) Тогда 
								Идентификатор = СобратьУИДДля1С(УИДСокращенный); 
								НоваяСтрока.Ссылка = 
									Документы.СписаниеБезналичныхДенежныхСредств.ПолучитьСсылку(Идентификатор);
								
							КонецЕсли;	
							
						ИначеЕсли ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Ключ = "custom_fields" Тогда
							
							НоваяСтрока.UIDDOcument = ТекСтрокаDataСтрокаПлатежаПлатежныеПоля.Значение["uid_document"];
							
							Если ЗначениеЗаполнено(НоваяСтрока.UIDDOcument) Тогда
								Идентификатор = Новый УникальныйИдентификатор(НоваяСтрока.UIDDOcument); 
								НоваяСтрока.Ссылка = 
									Документы.СписаниеБезналичныхДенежныхСредств.ПолучитьСсылку(Идентификатор);
								
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;	
					
				Иначе
					
					Если ТаблицаПлатежейВСервисе.Колонки.Найти(ТекСтрокаDataСтрокаПлатежа.Ключ) <> Неопределено Тогда 
						НоваяСтрока[ТекСтрокаDataСтрокаПлатежа.Ключ] = ТекСтрокаDataСтрокаПлатежа.Значение;
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЦикла	
			
		КонецЦикла;	
		
		Если Мета["next_id"] = Неопределено Тогда
			ПродолжатьЧтениеСтраниц = Ложь;  
		Иначе	
			СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
		КонецЕсли;	
		
	КонецЦикла;	
	

	РезультатВыполненияЗапроса.ТаблицаПлатежейВСервисе = ТаблицаПлатежейВСервисе;

	Возврат РезультатВыполненияЗапроса;
	
КонецФункции	

// Функция выполняет набор запросов по отправке платежного поручения в сервис
//
// Параметры:
//   ДанныеПлатежногоДокумента - Структура - данные платежного документа к отправке в сервис
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ОтправитьПлатежныйДокумент(ДанныеПлатежногоДокумента, ПараметрыЗапроса) Экспорт 
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();

	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("СсылкаНаПодтверждениеПлатежа", "");
	РезультатВыполненияЗапроса.Вставить("ДанныеПлатежногоДокумента", ДанныеПлатежногоДокумента);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());

	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   

	СтруктураТела = ТелоЗапросаПоКоманде(ПараметрыЗапроса.Сервис, КомандыСервисов.ОткрытьВСервисеПлатежнуюСессию);  
	ЗаполнитьЗначенияСвойств(СтруктураТела.Data, ПараметрыЗапроса); 
	СтруктураТела.data.customer_id = ПараметрыЗапроса.ИдентификаторОрганизации;
	СтруктураТела.data.payee_description = ДанныеПлатежногоДокумента.КонтрагентНаим; // кому платим
	СтруктураТела.data.provider_code = ПараметрыЗапроса.ИдентификаторПровайдера;

	// Заполняется шаблон   
	Если ДанныеПлатежногоДокумента.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		ШаблонПлатежногоДокумента = СловарьBankFeedsСлужебный.ШаблоныПлатежныхТребований();
	Иначе	
		ШаблонПлатежногоДокумента = СловарьBankFeedsСлужебный.ШаблоныПлатежныхПоручений();
	КонецЕсли;

	ШаблонУказанногоФормата = ШаблонПлатежногоДокумента[Перечисления.ФорматыПлатежейBankFeeds.SEPA];
	
	ПоляПлатежногоПоручения = СтруктураТела.Data.payment_attributes;
	Для Каждого ТекущаяСтрокаШаблоны Из ШаблонУказанногоФормата Цикл
		
		Если ДанныеПлатежногоДокумента.Свойство(ТекущаяСтрокаШаблоны.Ключ)
			И ПоляПлатежногоПоручения.Свойство(ТекущаяСтрокаШаблоны.Значение) Тогда 
			
		 	ПоляПлатежногоПоручения[ТекущаяСтрокаШаблоны.Значение] = 
				Строка(ДанныеПлатежногоДокумента[ТекущаяСтрокаШаблоны.Ключ]);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СтрокаУникальныйИдентификаторДокумента = Строка(ДанныеПлатежногоДокумента.Ссылка.УникальныйИдентификатор());

	ПоляПлатежногоПоручения.end_to_end_id = СтрЗаменить(СтрокаУникальныйИдентификаторДокумента, "-", "");
	 
	ПоляПлатежногоПоручения.customer_ip_address = ПараметрыЗапроса.IPАдрес;
	ПоляПлатежногоПоручения.customer_device_os = СистемнаяИнформация.ВерсияОС + "UIDDOCUMENT:" 
		+ СтрокаУникальныйИдентификаторДокумента;    
	
	ПоляПлатежногоПоручения.currency_code = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеПлатежногоДокумента.Валюта, "Наименование");
	ПоляПлатежногоПоручения.mode = "normal";

	ПоляПлатежногоПоручения.creditor_country_code = ПараметрыЗапроса.КодСтраныРегистрацииОрганизации;
	
	ПоляПлатежногоПоручения.debtor_country_code = Лев(ПоляПлатежногоПоручения.debtor_iban, 2);
	ПоляПлатежногоПоручения.amount = Формат(ДанныеПлатежногоДокумента.Сумма, "ЧДЦ=2; ЧРД=.");
	
	ПоляПлатежногоПоручения.custom_fields.uid_document = СтрокаУникальныйИдентификаторДокумента;
	
	ПараметрыЗапроса.ТелоЗапроса = СтруктураТела;
	ПараметрыЗапроса.HTTPМетод = "POST";
	
	//СоздатьПлатежныйСеанс
	ОтветСоздатьПлатежныйСеанс = ВыполнитьЗапросКСервису(КомандыСервисов.ОткрытьВСервисеПлатежнуюСессию, 
													ПараметрыЗапроса);
	
	Данные = ОтветСоздатьПлатежныйСеанс["data"];

	Для Каждого ТекСтрока Из Данные Цикл
		
		Если ТекСтрока.Ключ = "connect_url" Тогда
			СсылкаНаПодтверждение = ТекСтрока.Значение;
			Прервать;                                         
		КонецЕсли;
		
	КонецЦикла;	  
	
	РезультатВыполненияЗапроса.СсылкаНаПодтверждениеПлатежа = СсылкаНаПодтверждение;
	
	Если СсылкаНаПодтверждение = "" Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Что то пошло не так %1 в сервисе: %2'"),
				ПараметрыЗапроса.Организация, ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
	КонецЕсли;	

	Возврат РезультатВыполненияЗапроса;

КонецФункции	

// Функция выполняет запрос по чтению банковских счетов в сервисе по определенному банку
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ЧтениеБанковскихСчетовОрганизации(ПараметрыЗапроса) Экспорт
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатВыполненияЗапроса = Новый Структура();
	РезультатВыполненияЗапроса.Вставить("ТаблицаСчетов", ""); 
	РезультатВыполненияЗапроса.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен); 
	РезультатВыполненияЗапроса.Вставить("ПараметрыЗаполнения", ПараметрыЗапроса);
	РезультатВыполненияЗапроса.Вставить("МассивОшибок", Новый Массив());
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   
	
	ПараметрыЗапроса.HTTPМетод = "GET"; 
	ПараметрыКоманды = СловарьBankFeedsСлужебный.ПараметрыКоманды(КомандыСервисов.ПолучитьИзСервисаСписокСчетов);
	ПараметрConnection_id = ПараметрыКоманды.Connection_id;
	ПараметрКоманды1 = СтрЗаменить(ПараметрConnection_id, "%CONNECTION_ID%", ПараметрыЗапроса.ИдентификаторСоединения);
	СтрокаПараметров = "?" + ПараметрКоманды1;
	
	ПродолжатьЧтениеСтраниц = Истина;
	СтрокаПараметровСтраницы = "";
	
	Пока ПродолжатьЧтениеСтраниц Цикл 
	
	ОтветСписокТранзакций = ВыполнитьЗапросКСервису(
		КомандыСервисов.ПолучитьИзСервисаСписокСчетов, ПараметрыЗапроса, СтрокаПараметров + СтрокаПараметровСтраницы);

	Данные = ОтветСписокТранзакций["data"];
	Мета = ОтветСписокТранзакций["meta"];
	
	ТаблицаСчетов = СоздатьТаблицуСчетов();
	
	// Подумать как сделать быстрее поиск
	Для Каждого ТекСтрока Из Данные Цикл
		
		ДобавитьБанковскийСчетИзСервиса(ТаблицаСчетов, ТекСтрока);
		
	КонецЦикла;	
	
		Если Мета["next_id"] = Неопределено Тогда
			ПродолжатьЧтениеСтраниц = Ложь;  
		Иначе	
			СтрокаПараметровСтраницы = "&from_id=" + Мета["next_id"];
		КонецЕсли;	
		
	КонецЦикла;	
	
	РезультатВыполненияЗапроса.ТаблицаСчетов = ТаблицаСчетов;	
	РезультатВыполненияЗапроса.СтатусОтвета = СтатусыОтвета.ОтветПолучен;
	
	Если ТаблицаСчетов.Количество() = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Транзакции не загружены по банку %1 в сервисе: %2'"),
				ПараметрыЗапроса.Банк, ПараметрыЗапроса.Сервис);
		РезультатВыполненияЗапроса.МассивОшибок.Добавить(ТекстСообщения);
		
	КонецЕсли;	
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции	

#КонецОбласти

#Область ЗапускФоновыхЗаданий   

// Выполняет запуск фонового задания по чтению банковских счетов в сервисе 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияПрочитатьСчетаПоОрганизации(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение банковских счетов по организации'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ЧтениеБанковскихСчетовПоОрганизации",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет запуск фонового задания по проверке соединения к сервису 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуПодключения(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка подключения к'") + " BankFeeds";
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"Справочники.ИнтеграцияBankFeeds.ПроверкаПодключения",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет запуск фонового задания по авторизации пользователя на сервисе 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаАвторизациюПользователя(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подключение сервиса'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ПолучениеДанныхДляАвторизации",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции 

// Выполняет запуск фонового задания на обновление соединения на сервисе 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаОбновлениеСоединения(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление соединения сервиса'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ОбновлениеСоединения",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции 

// Выполняет запуск фонового задания на проверку статусов соединения и согласия на сервисе 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуСтатусовСоединенияИСогласия(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление соединения сервиса'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ПроверитьСтатусыСоединенияИСогласия",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции  

// Выполняет запуск фонового задания на отзыв согласия на сервисе 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаОтзывСогласия(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отзыв согласия сервиса'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ОтзывСогласия",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции 

// Выполняет запуск фонового задания по загрузке транзакций из сервиса 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗагрузки - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаЗагрузкуТранзакций(УникальныйИдентификатор, ПараметрыЗагрузки) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка транзакций'");
	
	Если ПараметрыЗагрузки.ЗагрузкаВыполняетсяПриСинхронизации Тогда
		БанковскиеСчета = СписокБанковскиеСчетовИПериодыЗагрузкиПриСинхронизации(ПараметрыЗагрузки.БанковскийСчет);
	Иначе	
		БанковскиеСчета = ПолучитьИзВременногоХранилища(ПараметрыЗагрузки.АдресБанковскихСчетов);	
	КонецЕсли;	
		
	ПараметрыЗагрузкиТранзакций = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗагрузки);
	ПараметрыЗагрузкиТранзакций.Вставить("БанковскиеСчета", БанковскиеСчета);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"Обработки.КлиентБанкBankFeeds.ЗагрузкаТранзакций",
							ПараметрыЗагрузкиТранзакций);
	
	Возврат РезультатВыполнения;
	
КонецФункции  

// Выполняет запуск фонового задания по выгрузке платежных поручений в сервис 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыВыгрузки - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаВыгрузкуПлатежныхДокументов(УникальныйИдентификатор, ПараметрыВыгрузки) Экспорт
	
	Если ПараметрыВыгрузки.ВыгрузкаВыполняетсяПриСинхронизации Тогда
		БанковскиеСчета = ЗаполнитьБанковскиеСчетаПриВыгрузке(ПараметрыВыгрузки.БанковскийСчет);   
		ДокументыКВыгрузке = ЗаполнитьДокументыКВыгрузкеПриСинхронизации(БанковскиеСчета);
	Иначе	
		БанковскиеСчета = ПолучитьИзВременногоХранилища(ПараметрыВыгрузки.АдресБанковскиеСчета);
		ДокументыКВыгрузке = ПолучитьИзВременногоХранилища(ПараметрыВыгрузки.АдресДокументыКВыгрузке);
	КонецЕсли;	
	
	ПараметрыВыгрузкиДляЗадания = Новый Структура();
	
	ПараметрыВыгрузкиДляЗадания.Вставить("БанковскиеСчета", БанковскиеСчета);
	ПараметрыВыгрузкиДляЗадания.Вставить("ДокументыКВыгрузке", ДокументыКВыгрузке);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выгрузка платежных документов'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"Обработки.КлиентБанкBankFeeds.ВыгрузкаПлатежныхДокументов",
							ПараметрыВыгрузкиДляЗадания);
	
	Возврат РезультатВыполнения;
	
КонецФункции  

// Выполняет запуск фонового задания по проверке статуса платежного документа в сервисе 
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуСтатусаПлатежныхДокументов(УникальныйИдентификатор) Экспорт
	
	БанковскиеСчета = ЗаполнитьБанковскиеСчетаПриПроверкеСтатусов();
	ДокументыКВыгрузке = ЗаполнитьДокументыКВыгрузкеПриПроверкеСтатусов(БанковскиеСчета);	
	
	ПараметрыВыгрузкиДляЗадания = Новый Структура();
	
	ПараметрыВыгрузкиДляЗадания.Вставить("БанковскиеСчета", БанковскиеСчета);
	ПараметрыВыгрузкиДляЗадания.Вставить("ДокументыКВыгрузке", ДокументыКВыгрузке);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка статусов платежных документов'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"Обработки.КлиентБанкBankFeeds.ПроверкаСтатусовПлатежныхДокументов",
							ПараметрыВыгрузкиДляЗадания);
	
	Возврат РезультатВыполнения;
	
КонецФункции	

// Выполняет запуск фонового задания по подключению банковского счета к сервису
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаПодключениеКСервису(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подключение сервиса'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ПодключениеКСервису",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет запуск фонового задания на проверку обновления к соединению в сервисе
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - Структура - набор параметров для функции
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуОбновленияСоединенияКСервису(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подключение сервиса'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"РегистрыСведений.ПодключенияКБанкамBankFeeds.ПроверкаОбновленияСоединенияКСервису",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область МетодыПоРаботеССоединениемИОбработкойДанных

// Функция из строки делает уид 
//
// Параметры:
//   УИДСокращенный - Строка - уид в виде строки без тире
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - собранный уид
//
Функция СобратьУИДДля1С(УИДСокращенный) Экспорт 
	
	//XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	
	ПервыйБлок = Лев(УИДСокращенный, 8);
	ВторойБлок = Сред(УИДСокращенный, 9,4);
	ТретийБлок = Сред(УИДСокращенный, 13,4);
	ЧетвертыйБлок = Сред(УИДСокращенный, 17,4);
	ПятыйБлок = Прав(УИДСокращенный, 12);
	
	ПолныйУИД = "" + ПервыйБлок + "-" + ВторойБлок + "-" + ТретийБлок + "-" + ЧетвертыйБлок + "-" + ПятыйБлок; 
	
	Возврат Новый УникальныйИдентификатор(ПолныйУИД); 
	
КонецФункции	

#КонецОбласти  

#Область РеквизитыРегистратора

// Функция выполняет чтение реквизитов регистрации 
//
// Параметры:
//   ПараметрыЗаполнения - Структура - набор реквизитов 
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция ПрочитатьРеквизитыРегистрацииНаСервере(ПараметрыЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.РеквизитыРегистрации КАК РеквизитыРегистрации
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|ГДЕ
	|	ПодключенияКБанкамBankFeeds.Организация = &Организация";
	

	Результат = Запрос.Выполнить().Выбрать();
	РеквизитыРегистрации = Неопределено;
	
	Если Результат.Следующий() Тогда
		
		ХранилищеЗначенийРеквизитыПриРегистрации = Результат.РеквизитыРегистрации;	
		
		РеквизитыРегистрации =  ХранилищеЗначенийРеквизитыПриРегистрации.Получить();
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РеквизитыРегистрации) Тогда
		Возврат РеквизитыРегистрации;
	КонецЕсли;	
	
	РеквизитыРегистрации = СловарьBankFeedsСлужебный.РеквизитыРегистрацииНаФорме();

	ЗаполнитьРеквизитыРегистрацииПоУмолчанию(РеквизитыРегистрации, ПараметрыЗаполнения);	
	
	Возврат РеквизитыРегистрации;
	
КонецФункции	

#КонецОбласти  

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру параметров, для подстановки в запрос
//
// 
// Возвращаемое значение:
//  Структура - список наименований, которые будут далее заполняться
//
Функция ПараметрыЗапросаКСервису()

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ИмяХоста", "");
	ПараметрыЗапроса.Вставить("IPАдрес", "");
	ПараметрыЗапроса.Вставить("АдресСервиса", "");
	ПараметрыЗапроса.Вставить("ИдентификаторОрганизации", "");
	ПараметрыЗапроса.Вставить("ИдентификаторПровайдера", "");
	ПараметрыЗапроса.Вставить("НаименованиеПровайдера", "");
	ПараметрыЗапроса.Вставить("ИдентификаторСогласия", "");
	ПараметрыЗапроса.Вставить("ФорматПлатежаПоIBAN", "");
	ПараметрыЗапроса.Вставить("ФорматПлатежаПоBBAN", "");
	ПараметрыЗапроса.Вставить("ИдентификаторСоединения", "");  
	ПараметрыЗапроса.Вставить("ИдентификаторЗаписи", "");  
	ПараметрыЗапроса.Вставить("AppID", "");
	ПараметрыЗапроса.Вставить("Secret", "");
	ПараметрыЗапроса.Вставить("ТестовыйРежим", Ложь);
	ПараметрыЗапроса.Вставить("ЗакрытыйКлюч", "");
	ПараметрыЗапроса.Вставить("Сервис", Перечисления.СервисыBankFeeds.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("НастройкиСервиса", Справочники.ИнтеграцияBankFeeds.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("Банк", Справочники.КлассификаторБанков.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("БанковскийСчет", Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	ПараметрыЗапроса.Вставить("НомерБанковскогоСчета", "");  
	ПараметрыЗапроса.Вставить("ВалютаСчета", "");  
	ПараметрыЗапроса.Вставить("ИдентификаторСчета", "");  
	ПараметрыЗапроса.Вставить("Организация", Справочники.Организации.ПустаяСсылка()); 
	ПараметрыЗапроса.Вставить("ТелоЗапроса", Новый Структура());
	ПараметрыЗапроса.Вставить("email", "");
	ПараметрыЗапроса.Вставить("HTTPМетод", "");
	ПараметрыЗапроса.Вставить("РеквизитыРегистрацииДляЗапроса", Новый Структура());
	ПараметрыЗапроса.Вставить("КодСтраныРегистрацииОрганизации", "");
	
	Возврат ПараметрыЗапроса; 
	
КонецФункции	

// Возвращает данные из регистра сведений ПодключенияКБанкамBankFeeds
//
// Параметры:
//   ПараметрыЗаполнения - Структура - структура данных
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса:
//  	*СсылкаНаОбновлениеСоединения - Строка 
//  	*СтатусОтвета - Строка
//  	*ПараметрыЗаполнения - Структура:
//  		**Организация - СправочникСсылка.Организации - Организация
//  		**Банк - СправочникСсылка.КлассификаторБанков - Банк
//  		**email - Строка - Строка
//  	*МассивОшибок - Массив из Строка 
//
Функция НастройкиОрганизацииИБанка(ПараметрыЗаполнения)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("Банк", ПараметрыЗаполнения.Банк);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ПодключенияКБанкамBankFeeds.ИдентификаторПровайдера КАК ИдентификаторПровайдера,
	|	ПодключенияКБанкамBankFeeds.ФорматПлатежаПоIBAN КАК ФорматПлатежаПоIBAN,
	|	ПодключенияКБанкамBankFeeds.ИдентификаторСоединения КАК ИдентификаторСоединения,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса,
	|	ПодключенияКБанкамBankFeeds.НаименованиеПровайдера КАК НаименованиеПровайдера,
	|	ПодключенияКБанкамBankFeeds.РеквизитыРегистрации КАК РеквизитыРегистрации,
	|	ПодключенияКБанкамBankFeeds.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ПодключенияКБанкамBankFeeds.ИдентификаторСогласия КАК ИдентификаторСогласия
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|ГДЕ
	|	ПодключенияКБанкамBankFeeds.Организация = &Организация
	|	И ПодключенияКБанкамBankFeeds.Банк = &Банк";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Возвращает ответ от сервера 
//
// Параметры:
//   КомандаКСервису - Строка - Строка выбранная по команде: СловарьBankFeedsСлужебный.КомандыСервисов
//   ПараметрыЗапроса - Структура - набор параметров для запроса 
//   ПараметрыКоманды - Строка - Параметры команды
// 
// Возвращаемое значение:
//  Структура - ответ от сервиса
//
Функция ВыполнитьЗапросКСервису(КомандаКСервису, ПараметрыЗапроса, ПараметрыКоманды = "")

	МетодЗапроса = КомандаКСервису + ПараметрыКоманды;

	// Создаем json
	HTTPЗапрос = Новый HTTPЗапрос(МетодЗапроса);
	ЗаполнитьЗаголовки(HTTPЗапрос.Заголовки, ПараметрыЗапроса);
	HTTPМетод = ПараметрыЗапроса.HTTPМетод;
	
	ТелоЗапроса = Неопределено;
	Если ПараметрыЗапроса.ТелоЗапроса.Количество() > 0 Тогда
		ТелоЗапроса = ЗначениеВJSON(ПараметрыЗапроса.ТелоЗапроса);
		ТелоЗапроса = стрЗаменить(ТелоЗапроса, Символы.ВК, "");
		ТелоЗапроса = стрЗаменить(ТелоЗапроса, Символы.ПС, "");
		ТелоЗапроса = стрЗаменить(ТелоЗапроса, " ", "");
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;  
	
	ЗаполнитьЗаголовкиШифрованием(HTTPЗапрос.Заголовки, ПараметрыЗапроса, МетодЗапроса, ТелоЗапроса);
	
	РезультатЗапроса = ВыполнитьЗапрос(HTTPЗапрос, HTTPМетод, ПараметрыЗапроса.ИмяХоста);
	
	Если Не РезультатЗапроса.ЗапросВыполнен Тогда 
		
		ОтветСервера = JSONВЗначение(РезультатЗапроса.ОтветСервера);
		ОписаниеОшибкиДляПользователя = "";
		
		Если ОтветСервера["error"] <> Неопределено Тогда
			Для Каждого СтрокаОшибки Из ОтветСервера["error"] Цикл
				
				Если СтрокаОшибки.Ключ = "message" Тогда
					ОписаниеОшибкиДляПользователя = СтрокаОшибки.Значение;
					Прервать;
				КонецЕсли;
		    КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписаниеОшибкиДляПользователя) Тогда
			ОписаниеОшибкиДляПользователя = ОтветСервера;
		КонецЕсли;	
			
		ТекстОшибкиПодключения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		        НСтр("ru = 'Не удалось выполнить запрос по команде:%1 текст ошибки:%2'"),
				КомандаКСервису, ОписаниеОшибкиДляПользователя);
		
		ВызватьИсключение ТекстОшибки(ТекстОшибкиПодключения);
	КонецЕсли;
	
	ОтветСервера = JSONВЗначение(РезультатЗапроса.ОтветСервера);

	Возврат ОтветСервера;
	
КонецФункции	

// Функция выполняет запрос на сервер по указанному адресу 
//
// Параметры:
//   HTTPЗапрос - Строка - Строка выбранная по команде: СловарьBankFeedsСлужебный.КомандыСервисов
//   HTTPМетод - HTTPзапрос - запрос к сервису
//   ИмяХоста - Строка - адрес сервера
// 
// Возвращаемое значение:
//  Структура - ответ от сервиса
//
Функция ВыполнитьЗапрос(Знач HTTPЗапрос, Знач HTTPМетод, Знач ИмяХоста)
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	Попытка
		Соединение = Новый HTTPСоединение(ИмяХоста, , , , Прокси, 60, ЗащищенноеСоединение);
		HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить соединение с сервером %1 по причине:
			|%2'"), ИмяХоста, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗапросВыполнен", Ложь);
	Результат.Вставить("ОтветСервера", "");
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'"),
			HTTPЗапрос.АдресРесурса,
			HTTPОтвет.КодСостояния) + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку();
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецЕсли;
		
	Если HTTPОтвет.КодСостояния = 401 
		Или HTTPОтвет.КодСостояния = 403 Тогда
		ИнформацияОбОшибке = ОбщегоНазначения.JSONВЗначение(HTTPОтвет.ПолучитьТелоКакСтроку());
		ВызватьИсключение ИнформацияОбОшибке["message"];  
	ИначеЕсли HTTPОтвет.КодСостояния = 406 Тогда
		
		ИнформацияОбОшибке = ОбщегоНазначения.JSONВЗначение(HTTPОтвет.ПолучитьТелоКакСтроку()); 
		Ошибка = ИнформацияОбОшибке["error"];
		ВызватьИсключение Ошибка["message"];  
		
	КонецЕсли;
	
	Результат.ЗапросВыполнен = HTTPОтвет.КодСостояния = 200;  
	Результат.ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет запрос, по поиску информации о поставщике в транзакции
//
// Параметры:
//   ПараметрыЗапроса - Структура - набор данных для запроса
//   МассивИдМерчантов - Массив из Строка - массив идентификаторов.
// 
// Возвращаемое значение:
//  Структура - результат выполнения запроса
//
Функция ВыполнитьЗапросНаСписокМерчантов(МассивИдМерчантов, ПараметрыЗапроса)
	
	КомандыСервисов = СловарьBankFeedsСлужебный.КомандыСервисов(ПараметрыЗапроса.Сервис);   

	ПараметрыЗапроса.HTTPМетод = "POST"; 
	СтруктураТела = ТелоЗапросаПоКоманде(ПараметрыЗапроса.Сервис, КомандыСервисов.ПолучитьРасшифровкуМерчантов);  
	СтруктураТела.Data = МассивИдМерчантов;
	
	ПараметрыЗапроса.ТелоЗапроса = СтруктураТела;

	ОтветСписокРасшифровкиМерчантов = ВыполнитьЗапросКСервису(
		КомандыСервисов.ПолучитьРасшифровкуМерчантов, ПараметрыЗапроса);
		
	Возврат ОтветСписокРасшифровкиМерчантов;
	
КонецФункции	

#Область СинхронизацияСBankFeeds  

Функция СписокБанковскиеСчетовИПериодыЗагрузкиПриСинхронизации(БанковскийСчет)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация КАК Организация,
	|	ПодключенияКБанкамBankFeeds.Банк КАК Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ПОМЕСТИТЬ СписокБанковскихСчетов
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Банк
	|			И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация,
	|	ПодключенияКБанкамBankFeeds.Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Ссылка
	|			И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоступлениеБезналичныхДенежныхСредств.Дата) КАК ДатаДокумента,
	|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ТаблицаДатЗагрузкиДетальная
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредств.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(СписаниеБезналичныхДенежныхСредств.Дата),
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДатЗагрузкиДетальная.БанковскийСчет КАК БанковскийСчет,
	|	МАКСИМУМ(ТаблицаДатЗагрузкиДетальная.ДатаДокумента) КАК ДатаДокумента
	|ПОМЕСТИТЬ ТаблицаЗагрузкиДат
	|ИЗ
	|	ТаблицаДатЗагрузкиДетальная КАК ТаблицаДатЗагрузкиДетальная
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДатЗагрузкиДетальная.БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокБанковскихСчетов.Организация КАК Организация,
	|	СписокБанковскихСчетов.Банк КАК Банк,
	|	СписокБанковскихСчетов.НастройкиСервиса КАК НастройкиСервиса,
	|	СписокБанковскихСчетов.Ссылка КАК Ссылка,
	|	СписокБанковскихСчетов.НомерСчета КАК НомерСчета,
	|	СписокБанковскихСчетов.БанковскийСчет КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ТаблицаЗагрузкиДат.ДатаДокумента = NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ТаблицаЗагрузкиДат.ДатаДокумента
	|	КОНЕЦ КАК ДатаНачалаЗагрузки
	|ИЗ
	|	СписокБанковскихСчетов КАК СписокБанковскихСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗагрузкиДат КАК ТаблицаЗагрузкиДат
	|		ПО СписокБанковскихСчетов.БанковскийСчет = ТаблицаЗагрузкиДат.БанковскийСчет
	|ГДЕ
	|	%ОтборПоБанку%";
	
    Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоБанку%", "СписокБанковскихСчетов.БанковскийСчет = &БанковскийСчет");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоБанку%", "ИСТИНА");
	КонецЕсли;	
		
	ПодключенныеБанковскиеСчета = Запрос.Выполнить().Выгрузить();
	
	Возврат  ПодключенныеБанковскиеСчета;
	
КонецФункции

Функция ЗаполнитьДокументыКВыгрузкеПриСинхронизации(БанковскиеСчета)
	
	Если БанковскиеСчета.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;	
	
	ДатаОкончания = ТекущаяДатаСеанса();
	ДатаНачала = Дата(1,1,1);
	СписокСчетов = Новый СписокЗначений();
	
	Для Каждого ТекущаяСтрокаБанковскиеСчета Из БанковскиеСчета Цикл
		
		ДатаНеОтправленногоПлатежногоПоручения = 
			ТекущаяСтрокаБанковскиеСчета.ДатаНеОтправленногоПлатежногоПоручения;
		
		Если ДатаНеОтправленногоПлатежногоПоручения < ДатаНачала Тогда
			ДатаНачала = ДатаНеОтправленногоПлатежногоПоручения; 
		КонецЕсли;
		
		СписокСчетов.Добавить(ТекущаяСтрокаБанковскиеСчета.Ссылка);
		
	КонецЦикла;	
	
	ТаблицаДокументов = Обработки.КлиентБанкBankFeeds.ТаблицаДокументовКВыгрузке(СписокСчетов,
																	ДатаНачала,
																	ДатаОкончания,
																	Истина);
	
	Возврат ТаблицаДокументов;
КонецФункции 

Функция ЗаполнитьБанковскиеСчетаПриВыгрузке(БанковскийСчет)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация КАК Организация,
	|	ПодключенияКБанкамBankFeeds.Банк КАК Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ПОМЕСТИТЬ ТаблицаБанковскихСчетов
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Банк
	|			И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация,
	|	ПодключенияКБанкамBankFeeds.Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Ссылка
	|			И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(СписаниеБезналичныхДенежныхСредств.Дата) КАК ДатаНеОтправленногоПлатежногоПоручения,
	|	СтатусыТранзакцийBankFeeds.ТипИдентификатора КАК ТипИдентификатора,
	|	СтатусыТранзакцийBankFeeds.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	|	СтатусыТранзакцийBankFeeds.Статус КАК Статус,
	|	СтатусыТранзакцийBankFeeds.ДатаОтправкиВСервис КАК ДатаОтправкиВСервис,
	|	СписаниеБезналичныхДенежныхСредств.Организация КАК Организация,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ПлатежныеДокументы
	|ИЗ
	|	РегистрСведений.СтатусыТранзакцийBankFeeds КАК СтатусыТранзакцийBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО СтатусыТранзакцийBankFeeds.Объект = СписаниеБезналичныхДенежныхСредств.Ссылка
	|ГДЕ
	|	СтатусыТранзакцийBankFeeds.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежныхДокументовBankFeeds.НеОтправлен)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыТранзакцийBankFeeds.ТипИдентификатора,
	|	СтатусыТранзакцийBankFeeds.ИдентификаторТранзакции,
	|	СтатусыТранзакцийBankFeeds.Статус,
	|	СтатусыТранзакцийBankFeeds.ДатаОтправкиВСервис,
	|	СписаниеБезналичныхДенежныхСредств.Организация,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеДокументы.ДатаНеОтправленногоПлатежногоПоручения КАК ДатаНеОтправленногоПлатежногоПоручения,
	|	ПлатежныеДокументы.ТипИдентификатора КАК ТипИдентификатора,
	|	ПлатежныеДокументы.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	|	ПлатежныеДокументы.Статус КАК Статус,
	|	ПлатежныеДокументы.ДатаОтправкиВСервис КАК ДатаОтправкиВСервис,
	|	ПлатежныеДокументы.Организация КАК Организация,
	|	ПлатежныеДокументы.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаБанковскихСчетов.Банк КАК Банк,
	|	ТаблицаБанковскихСчетов.НастройкиСервиса КАК НастройкиСервиса,
	|	ТаблицаБанковскихСчетов.Ссылка КАК Ссылка,
	|	ТаблицаБанковскихСчетов.НомерСчета КАК НомерСчета
	|ИЗ
	|	ПлатежныеДокументы КАК ПлатежныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаБанковскихСчетов КАК ТаблицаБанковскихСчетов
	|		ПО ПлатежныеДокументы.Организация = ТаблицаБанковскихСчетов.Организация
	|			И ПлатежныеДокументы.БанковскийСчет = ТаблицаБанковскихСчетов.БанковскийСчет
	|ГДЕ
	|	%ОтборПоБанку%";
	
    Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоБанку%", "ТаблицаБанковскихСчетов.БанковскийСчет = &БанковскийСчет");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоБанку%", "ИСТИНА");
	КонецЕсли;	
	
	ПодключенныеБанковскиеСчета = Запрос.Выполнить().Выгрузить();
	
	Возврат ПодключенныеБанковскиеСчета;
	
КонецФункции

Функция ЗаполнитьДокументыКВыгрузкеПриПроверкеСтатусов(БанковскиеСчета)
	
	Если БанковскиеСчета.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;	

	Запрос = Новый Запрос();  
	Запрос.УстановитьПараметр("БанковскиеСчета", БанковскиеСчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ БанковскиеСчета
	|ИЗ
	|	&БанковскиеСчета КАК БанковскиеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыТранзакцийBankFeeds.Объект КАК Ссылка,
	|	СтатусыТранзакцийBankFeeds.Статус КАК Статус,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет КАК БанковскийСчет,
	|	СписаниеБезналичныхДенежныхСредств.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	РегистрСведений.СтатусыТранзакцийBankFeeds КАК СтатусыТранзакцийBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО СтатусыТранзакцийBankFeeds.Объект = СписаниеБезналичныхДенежныхСредств.Ссылка
	|ГДЕ
	|	СтатусыТранзакцийBankFeeds.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПлатежныхДокументовBankFeeds.accepted)
	|	И СписаниеБезналичныхДенежныхСредств.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.БанковскийСчет КАК БанковскийСчет,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО БанковскиеСчета.Ссылка = ТаблицаДокументов.БанковскийСчет";
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции	

Функция ЗаполнитьБанковскиеСчетаПриПроверкеСтатусов()

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенияКБанкамBankFeeds.Организация КАК Организация,
	|	ПодключенияКБанкамBankFeeds.Банк КАК Банк,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО ПодключенияКБанкамBankFeeds.Банк = БанковскиеСчетаОрганизаций.Банк
	|			И ПодключенияКБанкамBankFeeds.Организация = БанковскиеСчетаОрганизаций.Владелец
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds <> """"
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления";
	
	ПодключенныеБанковскиеСчета = Запрос.Выполнить().Выгрузить();
	
	Возврат ПодключенныеБанковскиеСчета;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьРеквизитыРегистрацииПоУмолчанию(НаборРеквизитов, ПараметрыЗаполнения)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ПараметрыФизЛица = ПараметрыФизическогоЛица(ФизическоеЛицо);
		
		ЗаполнитьЗначенияСвойств(НаборРеквизитов, ПараметрыФизЛица);
		
	КонецЕсли;	   
	
	ПараметрыОрганизации = Справочники.Организации.ПолучитьРеквизитыОрганизации(ПараметрыЗаполнения.Организация);
	
	НаборРеквизитов.АдресОфисаКомпании = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(
													ПараметрыЗаполнения.Организация, "Юридический", ЛокальнаяТекущаяДата()); 
	
	НаборРеквизитов.РегистрационныйНомерКомпании = ПараметрыОрганизации.ИНН;   
	НаборРеквизитов.КомпанияЗарегистрированаВСтране = ПараметрыОрганизации.СтранаРегистрации;
		
	НаборРеквизитов.ЮридическоеНаименованиеКомпании = ПараметрыОрганизации.НаименованиеПолное;
	
КонецПроцедуры	

Функция ПараметрыФизическогоЛица(ФизическоеЛицо) 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ
//++ Локализация

	
//-- Локализация
	|	ФизическиеЛица.ДатаРождения КАК ДатаРожденияРегистратора,
	|	ФизическиеЛица.Пол КАК ПолРегистратора,
	|	ФизическиеЛица.МестоРождения КАК МестоРожденияРегистратора,
	|	ФизическиеЛица.ФИО КАК ФамилияИмяОтчествоРегистратора,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК АдресПроживанияРегистратора
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
//++ Локализация

	
//-- Локализация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ФизическиеЛица.Ссылка = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица))
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	Возврат Результат;
	
КонецФункции	

Функция СостояниеПлатежногоДокумента(Документ)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат "";
	КонецЕсли;	
	
	ПараметрыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Организация,БанковскийСчет,ПроведеноБанком");	
	БанкБанковскогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыДокумента.БанковскийСчет, "Банк");
	ПараметрыДокумента.Вставить("Банк", БанкБанковскогоСчета);
	
	ПараметрыПодключения = НастройкиОрганизацииИБанка(ПараметрыДокумента);
	
	Если ЗначениеЗаполнено(ПараметрыПодключения) Тогда
		
		 ИдентификаторBankFeeds = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		  				ПараметрыДокумента.БанковскийСчет, "ИдентификаторСчетаBankFeeds");
						
			Если ИдентификаторBankFeeds <> "" Тогда
				
				СтатусДокумента = ПроверитьСтатусДокумента(Документ);
				
				Если СтатусДокумента <> Перечисления.СтатусыПлатежныхДокументовBankFeeds.ПустаяСсылка() Тогда
					
					Если СтатусДокумента = Перечисления.СтатусыПлатежныхДокументовBankFeeds.accepted Тогда
						СостояниеДокумента = НСтр("ru = 'Принято банком'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтатусДокумента = Перечисления.СтатусыПлатежныхДокументовBankFeeds.processing Тогда
						СостояниеДокумента = НСтр("ru = 'Ожидается проверка в банке'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтатусДокумента = Перечисления.СтатусыПлатежныхДокументовBankFeeds.rejected  Тогда
						СостояниеДокумента = НСтр("ru = 'Отказано'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтатусДокумента = Перечисления.СтатусыПлатежныхДокументовBankFeeds.failed Тогда
						СостояниеДокумента = НСтр("ru = 'Отказано'", ОбщегоНазначения.КодОсновногоЯзыка());
					ИначеЕсли СтатусДокумента = Перечисления.СтатусыПлатежныхДокументовBankFeeds.deleted Тогда
						СостояниеДокумента = НСтр("ru = 'Удален'", ОбщегоНазначения.КодОсновногоЯзыка());
					Иначе 
						СостояниеДокумента = Строка(СтатусДокумента);
					КонецЕсли;	
						
					Возврат	СостояниеДокумента;
				КонецЕсли;	
				
				Если ПараметрыДокумента.ПроведеноБанком Тогда
					Возврат "";
				Иначе	
					Возврат НСтр("ru = 'Требуется отправка'", ОбщегоНазначения.КодОсновногоЯзыка());	
				КонецЕсли;	
				
			КонецЕсли;	
			
	КонецЕсли;	
		
	Возврат "";	

КонецФункции

Функция ПроверитьСтатусДокумента(Документ)

	Запрос = Новый Запрос();                                   
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипИдентификатора", Перечисления.ТипыИдентификаторовBankFeeds.ПоПлатежномуПоручению);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыТранзакцийBankFeeds.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыТранзакцийBankFeeds КАК СтатусыТранзакцийBankFeeds
	|ГДЕ
	|	СтатусыТранзакцийBankFeeds.Объект = &Документ
	|	И СтатусыТранзакцийBankFeeds.ТипИдентификатора = &ТипИдентификатора";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Статус;
	КонецЕсли;	
	
	Возврат Перечисления.СтатусыПлатежныхДокументовBankFeeds.ПустаяСсылка();
	
КонецФункции	

Функция СоздатьТаблицуСчетов()

	ТаблицаСчетов = Новый ТаблицаЗначений();
	ТаблицаСчетов.Колонки.Добавить("Счет",               Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("ИдентификаторСчета", Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("ДатаСоздания",       Новый ОписаниеТипов("Дата"));
	ТаблицаСчетов.Колонки.Добавить("Валюта",	         Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("ИмяСчета",	         Новый ОписаниеТипов("Строка"));
	ТаблицаСчетов.Колонки.Добавить("Баланс",	         Новый ОписаниеТипов("Строка"));

	Возврат ТаблицаСчетов; 

КонецФункции	

Функция СоздатьТаблицуТранзакций()
	
	ТаблицаТранзакций = Новый ТаблицаЗначений();
	ТаблицаТранзакций.Колонки.Добавить("ИдентификаторТранзакции", 
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаТранзакций.Колонки.Добавить("НомерПоБанку", 
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100))); 
	ТаблицаТранзакций.Колонки.Добавить("end_to_end_id", 
		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(32))); 
	ТаблицаТранзакций.Колонки.Добавить("mode", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаТранзакций.Колонки.Добавить("status", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаТранзакций.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов("Дата"));
	ТаблицаТранзакций.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТранзакций.Колонки.Добавить("Валюта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаТранзакций.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	ТаблицаТранзакций.Колонки.Добавить("category", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаТранзакций.Колонки.Добавить("НомерСчетаПартнера", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаТранзакций.Колонки.Добавить("extra", Новый ОписаниеТипов("Структура"));
	ТаблицаТранзакций.Колонки.Добавить("НаправлениеПлатежа", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1)));
	ТаблицаТранзакций.Колонки.Добавить("ЕстьMerchant", Новый ОписаниеТипов("Булево"));
	ТаблицаТранзакций.Колонки.Добавить("IDMerchant", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаТранзакций.Колонки.Добавить("NameMerchant", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	
	Возврат ТаблицаТранзакций; 
КонецФункции	

Функция ЗначениеВJSON(Значение)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция JSONВЗначение(Строка, ИменаСвойствСоЗначениямиДата = Неопределено)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСоЗначениямиДата);
КонецФункции

Функция АдресСервиса(Сервис)
	
	АдресаСервисов = СловарьBankFeedsСлужебный.АдресаЗапросаСервиса();
	
	Возврат АдресаСервисов[Сервис];	

КонецФункции	

Процедура ЗаполнитьЗаголовки(Заголовки, ПараметрыЗапроса)

	Заголовки.Вставить("Accept",       "application/json");  
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("App-id",       ПараметрыЗапроса.AppID);
	Заголовки.Вставить("Secret",       ПараметрыЗапроса.Secret);

КонецПроцедуры

Функция ПолучитьUnixTimeИзДаты(ПараметрДата) 
	
	ТекущийЧасовойПояс = ЧасовойПоясСеанса();
	
	Возврат УниверсальноеВремя(ПараметрДата, ТекущийЧасовойПояс) - '19700101';
	
КонецФункции

Процедура ЗаполнитьЗаголовкиШифрованием(Заголовки, ПараметрыЗапроса, МетодЗапроса, ТелоЗапроса)
	
	Если ПараметрыЗапроса.ТестовыйРежим Тогда
		Возврат;
	КонецЕсли;	
	
	СрокВремени = ПолучитьUnixTimeИзДаты(ТекущаяДатаСеанса()) + 60;
	СрокВремени = Формат(СрокВремени, "ЧГ=0");		
	
	ТекстДляШифрования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1|%2|%3|%4", СрокВремени, ПараметрыЗапроса.HTTPМетод, 
						"https://" + ПараметрыЗапроса.ИмяХоста + МетодЗапроса, 
					?(ТелоЗапроса = Неопределено, "", ТелоЗапроса));	
					
	ИмяВременногоФайлаСТекстомНаПодпись = ПолучитьИмяВременногоФайла();	
	
	ФайлTXT = Новый ТекстовыйДокумент;
	ФайлTXT.УстановитьТекст(ТекстДляШифрования);
	ФайлTXT.Записать(ИмяВременногоФайлаСТекстомНаПодпись, "CESU-8");
	
	ИмяПутьФайлаЗакрытойПодписи = ПараметрыЗапроса.ЗакрытыйКлюч;

	ИмяВременногоФайлаСТекстомПодписанныйПодписью256 = ПолучитьИмяВременногоФайла();	

	// запуск команды	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Ложь;
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"openssl dgst -sha256 -sign %1 -out %2 %3", 
		ИмяПутьФайлаЗакрытойПодписи, ИмяВременногоФайлаСТекстомПодписанныйПодписью256, ИмяВременногоФайлаСТекстомНаПодпись);
	РезультатЗапуска = ФайловаяСистема.ЗапуститьПрограмму(ТекстКоманды, ПараметрыЗапускаПрограммы);
	
	КодВозврата = РезультатЗапуска.КодВозврата;
	Если КодВозврата <> 0 Тогда
		
		ТекстОшибкиПодключения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить команду %1 :%2 текст ошибки:%3'"),
				"OpenSSL", ТекстКоманды, РезультатЗапуска.ПотокОшибок);
		
		ВызватьИсключение ТекстОшибки(ТекстОшибкиПодключения);
	КонецЕсли;	
	
	// читаем созданный файл
	ПодписьДвоичная = Новый ДвоичныеДанные(ИмяВременногоФайлаСТекстомПодписанныйПодписью256);
	
	Подпись64 = Base64Строка(ПодписьДвоичная); 
    Подпись64 = стрЗаменить(Подпись64, Символы.ВК, "");
    Подпись64 = стрЗаменить(Подпись64, Символы.ПС, "");

	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайлаСТекстомНаПодпись);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайлаСТекстомПодписанныйПодписью256);
	
	Заголовки.Вставить("Expires-at", СрокВремени);  
	Заголовки.Вставить("Signature",  Подпись64);
					
КонецПроцедуры	

Функция ТекстОшибки(ТекстОшибки)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат ТекстОшибки + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат ТекстОшибки + Символы.ПС + НСтр("ru = 'Обратитесь к администратору.'");
	
КонецФункции

// Возвращает IP и MAC адрес сервера приложения.
//
// Возвращаемое значение:
//   Структура:
//     * IPАдрес - Строка
//     * MACАдрес - Строка
//
Функция ЦифровойСлед()
	
	ЦифровойСлед = Новый Структура("IPАдрес, MACАдрес", "", "");
	
	//@skip-check undefined-function
	ВсеАдаптеры = ПолучитьИнформациюОСетевыхАдаптерах();
	
	Если ВсеАдаптеры.Количество() > 0 Тогда
		ТекущийАдаптер = ВсеАдаптеры[0];
		Для Каждого СетевойАдаптер Из ВсеАдаптеры Цикл
			Если СетевойАдаптер.ЭтоТекущийАдаптер = Истина Тогда
				ТекущийАдаптер = СетевойАдаптер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЦифровойСлед.IPАдрес = ТекущийАдаптер.IPAddress;
		ЦифровойСлед.MACАдрес = ТекущийАдаптер.MACAddress;
		
	КонецЕсли;
	
	Возврат ЦифровойСлед;
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Комментарий)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Перевод текста'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , Перечисления.СервисыПереводаТекста.ЯндексПереводчик, Комментарий);
	
КонецПроцедуры

Процедура ДобавитьТранзакцию(ТаблицаТранзакций, СтрокаИзСервиса)
	
	НоваяСтрока = ТаблицаТранзакций.Добавить();
	НоваяСтрока.ИдентификаторТранзакции = ПолучитьЗначение(СтрокаИзСервиса, "id", "Строка", "");
	НоваяСтрока.mode =                    ПолучитьЗначение(СтрокаИзСервиса, "mode", "Строка", "");
	НоваяСтрока.ДатаСоздания =            ПолучитьЗначение(СтрокаИзСервиса, "made_on", "ДатаJSON", Дата("00010101"));
	НоваяСтрока.Сумма =                   ПолучитьЗначение(СтрокаИзСервиса, "amount", "Число", 0);
	НоваяСтрока.Валюта =                  ПолучитьЗначение(СтрокаИзСервиса, "currency_code", "Строка", 0);
	НоваяСтрока.НазначениеПлатежа =       ПолучитьЗначение(СтрокаИзСервиса, "description", "Строка", 0);
	НоваяСтрока.category =                ПолучитьЗначение(СтрокаИзСервиса, "category", "Строка", 0);

	НоваяСтрока.status = ПолучитьЗначение(СтрокаИзСервиса,"status", 
		"ПеречислениеСсылка.СтатусыПлатежныхДокументовBankFeeds",
		Перечисления.СтатусыПлатежныхДокументовBankFeeds.ПустаяСсылка());
	
	НоваяСтрока.НаправлениеПлатежа = ?(НоваяСтрока.Сумма>0, "2", "1");
	НоваяСтрока.extra = ПолучитьЗначение(СтрокаИзСервиса, "extra", "Соответствие", Новый Структура());
	
	Если НоваяСтрока.extra.Свойство("merchant_id") Тогда
		
		ИДМерчант = НоваяСтрока.extra.merchant_id;
		
		Если ЗначениеЗаполнено(ИДМерчант) Тогда
			
			НоваяСтрока.ЕстьMerchant = Истина;
			НоваяСтрока.IDMerchant = ИДМерчант;
			
		КонецЕсли;	
		
	КонецЕсли;	

	Если НоваяСтрока.extra.Свойство("end_to_end_id") Тогда
		
		НоваяСтрока.end_to_end_id = НоваяСтрока.extra.end_to_end_id;	
		
	КонецЕсли;
	
	Если НоваяСтрока.extra.Свойство("record_number") Тогда
		
		НоваяСтрока.НомерПоБанку = НоваяСтрока.extra.record_number;	
		
	ИначеЕсли НоваяСтрока.extra.Свойство("id") Тогда	
		
		НоваяСтрока.НомерПоБанку = НоваяСтрока.extra.id;	
		
		Если СтрДлина(НоваяСтрока.НомерПоБанку) > 20 Тогда
		    ПолученнаяСтрока = Лев(НоваяСтрока.НомерПоБанку, Найти(НоваяСтрока.extra.id, "-")-1);  
			Если СтрДлина(ПолученнаяСтрока) > 0 Тогда
				НоваяСтрока.НомерПоБанку = ПолученнаяСтрока;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НоваяСтрока.extra.Свойство("posting_date") Тогда
		
		НоваяСтрока.extra.posting_date = ПолучитьЗначение(НоваяСтрока.extra, "posting_date", "ДатаJSON", Дата("00010101"))
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДобавитьБанковскийСчетИзСервиса(ТаблицаСчетов, СтрокаИзСервиса)
	
	ДополнительныеПоля = ПолучитьЗначение(СтрокаИзСервиса, "extra", "Структура", "");
	
	Если Не ДополнительныеПоля.Свойство("iban") Тогда
		Возврат;
	КонецЕсли;	
	
	НоваяСтрока = ТаблицаСчетов.Добавить();
	НоваяСтрока.ИдентификаторСчета = ПолучитьЗначение(СтрокаИзСервиса, "id", "Строка", "");
	НоваяСтрока.ДатаСоздания = ПолучитьЗначение(СтрокаИзСервиса, "created_at", "ДатаJSON", "");
	НоваяСтрока.Валюта = ПолучитьЗначение(СтрокаИзСервиса, "currency_code", "Строка", "");
	НоваяСтрока.Счет = ДополнительныеПоля.iban;
	НоваяСтрока.ИмяСчета = ПолучитьЗначение(СтрокаИзСервиса, "name", "Строка", "");
	НоваяСтрока.Баланс = ПолучитьЗначение(СтрокаИзСервиса, "balance", "Строка", "");
	
КонецПроцедуры	

// Получить значение.
// 
// Параметры:
//  Источник - Произвольный - Источник.
//  ИмяРеквизита - Строка - Имя реквизита.
//  ТипЗначения - Строка - Тип значения.
//  ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию.
// 
// Возвращаемое значение:
//  Произвольный - значение произвольного типа
//
Функция ПолучитьЗначение(Знач Источник, ИмяРеквизита, ТипЗначения = "", ЗначениеПоУмолчанию = Неопределено)
	
	Значение = ЗначениеПоУмолчанию;
	
		ИсходноеЗначение = Источник[ИмяРеквизита];
		
		Если ИсходноеЗначение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Соответствие") Тогда
			
			Значение = Новый Структура();
			
			Для Каждого ТекущаяСтрока Из ИсходноеЗначение Цикл
				Значение.Вставить(ТекущаяСтрока.Ключ, ТекущаяСтрока.Значение);
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Дата") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Строка") И ВРег(ИсходноеЗначение) = "NONE" Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗначения = "" Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗначения = "ДатаJSON" Тогда
			Значение = ПрочитатьДатуJSON(Источник[ИмяРеквизита], ФорматДатыJSON.ISO);
		ИначеЕсли ТипЗначения = "Дата" Тогда
			Значение = СтрокаВДату(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "Число" Тогда
			Значение = СтрокаВЧисло(ИсходноеЗначение, ЗначениеПоУмолчанию);
		ИначеЕсли ТипЗначения = "ПеречислениеСсылка.СтатусыПлатежныхДокументовBankFeeds" Тогда
			Значение = Перечисления.СтатусыПлатежныхДокументовBankFeeds[ИсходноеЗначение];
		Иначе
			ТребуемыйТип	= Новый ОписаниеТипов(ТипЗначения);
			Значение		= ТребуемыйТип.ПривестиЗначение(ИсходноеЗначение);
		КонецЕсли;
		
		Если Значение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция СтрокаВДату(Значение)
	
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СокрЛП(СтрЗаменить(Значение, ":", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "T", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = Неопределено)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти  

