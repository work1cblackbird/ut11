#Область ПрограммныйИнтерфейс

// Возвращает актуальные значения настроек по организации на дату.
// 
// Параметры:
// 	ИмяРегистра - Строка - имя регистра сведений.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ВозвращатьПоУмолчанию - Булево - признак заполнения значений по умолчанию, 
// 		если передана ложь - вернет Неопределено, когда нет ни одной записи в регистре.
// 	ВыдаватьИсключение - Булево - выдать исключение, если параметры не установлены.
// Возвращаемое значение:
// 	Структура, Неопределено - значений ресурсов регистра. Неопределено, если регистра нет или отключен по ФО.
Функция ДействующиеПараметрыНалоговУчетныхПолитикНаДату(ИмяРегистра, Организация, Знач ДатаДействия = Неопределено, ВозвращатьПоУмолчанию = Истина, ВыдаватьИсключение = Ложь) Экспорт
	Если ЗначениеЗаполнено(ДатаДействия) Тогда
		ДатаДействия = НачалоМесяца(ДатаДействия);
	КонецЕсли;
	НастройкиУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(ИмяРегистра,
		Организация,
		ДатаДействия,
		ВозвращатьПоУмолчанию,
		ВыдаватьИсключение);
		
	Возврат НастройкиУчетнойПолитики;
	
КонецФункции
// Возвращает таблицу актуальных значения настроек по списку организаций на дату.
// 
// Параметры:
// 	ИмяРегистра - Строка - имя регистра сведений.
// 	Организации - Массив - массив ссылок на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ВозвращатьПоУмолчанию - Булево - признак заполнения значений по умолчанию, 
// 		если передана ложь - вернет пустую таблицу.
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица актуальных настроек по регистру.
Функция ДействующиеПараметрыНалоговУчетныхПолитикПоОрганизациям(ИмяРегистра, Организации, ДатаДействия = Неопределено, ВозвращатьПоУмолчанию = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаДействия) Тогда
		ДатаДействия = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗначенияПоУмолчанию = РегистрыСведений[ИмяРегистра].ЗначенияПоУмолчанию();
	
	Запрос = Новый Запрос(РегистрыСведений[ИмяРегистра].ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик());
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц, Организации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ДатаДействия);
	Запрос.УстановитьПараметр("Организация", Организации);
	ТаблицаРезультатЗапроса = Запрос.Выполнить().Выгрузить();

	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатЗапроса Цикл
		Если СтрокаТаблицы.Период = Null Тогда
			Если ВозвращатьПоУмолчанию Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗначенияПоУмолчанию);
				СтрокаТаблицы.Период = НачалоМесяца(ДатаДействия);
			Иначе
				МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СписокПараметров = ДоступныеПараметрыНалоговУчетныхПолитик(СтрокаТаблицы.Организация, ДатаДействия);
		Если СписокПараметров.Найти(ИмяРегистра) = Неопределено Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если ВозвращатьПоУмолчанию И ТаблицаРезультатЗапроса.Количество() = 0 Тогда
		СтрокаТаблицы = ТаблицаРезультатЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗначенияПоУмолчанию);
		СтрокаТаблицы.Период = НачалоМесяца(ДатаДействия);
	КонецЕсли;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТаблицаРезультатЗапроса.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	Возврат ТаблицаРезультатЗапроса;
КонецФункции

// Создает временную таблицу с головными организациями.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц запроса.
// 	Организации - Массив - массив ссылок на организации.
Процедура ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц, Организации = Неопределено) Экспорт
	ИмяТаблицы = "ВтГоловныеОрганизации";
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		// Требуемая временная таблица уже создана.
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапросаГоловныеОрганизации());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Организации = Неопределено);
	Запрос.Выполнить();
КонецПроцедуры

// Создает временную таблицу с актуальными значениями настроек по организации на дату.
// 
// Параметры:
// 	ИмяРегистра - Строка - имя регистра сведений.
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц запроса.
// 	ДатаДействия - Дата - период действия настроек.
// 	ИмяТаблицы - Строка - имя создаваемой временной таблицы.
// 	Организации - СправочникСсылка.Организации, Массив - ссылка на организацию, либо массив ссылок. 
Процедура ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(ИмяРегистра, МенеджерВременныхТаблиц, ДатаДействия, ИмяТаблицы, Организации = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ИмяТаблицы = "ВТ"+ ИмяРегистра;
	КонецЕсли;
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		// Требуемая временная таблица уже создана.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаДействия) Тогда
		ДатаДействия = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТекстЗапроса = РегистрыСведений[ИмяРегистра].ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяТаблицы;
	СхемаЗапроса.ПакетЗапросов[0].Индекс.Добавить("Организация");
	НовыйПакет = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	НовыйПакет.ИмяТаблицы = "ВтГоловныеОрганизации";
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц, Организации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ДатаДействия);
	Запрос.Выполнить();
КонецПроцедуры

// Формирует текст запроса временной таблицы ВтГоловныеОрганизации
// 
// Возвращаемое значение:
// 	Строка - текст запроса.
Функция ТекстЗапросаГоловныеОрганизации() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.ГоловнаяОрганизация КАК Организация,
	|	СпрОрганизации.Ссылка КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ
	|	ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	(&ПоВсемОрганизациям = ИСТИНА
	|	И СпрОрганизации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует))
	|	ИЛИ СпрОрганизации.Ссылка В (&Организации)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация;
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает последнюю действующую запись и формирует для нее ключ записи регистра,
// однозначно ее идентифицирующую.
// 
// Параметры:
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию-измерение записи.
// 	Период - Дата - период записи.
// Возвращаемое значение:
// 	Неопределено, РегистрСведенийКлючЗаписи - ключ записи.
Функция КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Знач Период = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Период = ?(Период = Неопределено, НачалоМесяца(ТекущаяДатаСеанса()), Период);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Таблица.Период КАК Период
	|ИЗ
	|	&УчетнаяПолитика КАК Таблица";
	
	НаименованиеСрезПоследних = "РегистрСведений.%ИмяРегистра%.СрезПоследних(&Период, Организация = &Организация)";
	НаименованиеСрезПоследних = СтрЗаменить(НаименованиеСрезПоследних, "%ИмяРегистра%", ИмяРегистра);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&УчетнаяПолитика",
		НаименованиеСрезПоследних);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	ЗначенияКлюча = Новый Структура("Организация,Период", Организация, Период);
	Если Выборка.Следующий() Тогда
		ЗначенияКлюча.Период = Выборка.Период;
	КонецЕсли;
	
	Возврат РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);

КонецФункции

// Создает новый ключ записи регистра
// 
// Параметры:
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию-измерение записи.
// 	Период - Дата - период записи.
// Возвращаемое значение:
// 	Неопределено, РегистрСведенийКлючЗаписи - ключ записи.
Функция НовыйКлючЗаписиУчетнойПолитики(ИмяРегистра, Организация, Период = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Период = ?(Период = Неопределено, НачалоМесяца(ТекущаяДатаСеанса()), Период);
	ЗначенияКлюча = Новый Структура("Организация,Период", Организация, Период);
	Возврат РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

// Формирует менеджер записи периодического регистра по переданным параметрам.
// 
// Параметры:
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
// 	КлючЗаписи - РегистрСведенийКлючЗаписи - ключ записи регистра.
// 	ИмяИзмерения - Строка - имя ведущего измерения.
// 	ЗначенияЗаполнения - ДанныеФормыСтруктура, Структура - значения заполнения новой записи.
// Возвращаемое значение:
// 	РегистрСведенийКлючЗаписи - менеджер записи регистра сведений.
Функция МенеджерЗаписиПериодическогоРегистра(ИмяРегистра, КлючЗаписи, ИмяИзмерения = "Организация", ЗначенияЗаполнения=Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи[ИмяИзмерения] = КлючЗаписи[ИмяИзмерения];
	МенеджерЗаписи.Период        = КлючЗаписи.Период;
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		ЗначенияПоУмолчанию = ЗначенияЗаполнения;
		Если ЗначенияПоУмолчанию=Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначенияПоУмолчанию.Период) Тогда
			ЗначенияПоУмолчанию = РегистрыСведений[ИмяРегистра].ЗначенияПоУмолчанию();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияПоУмолчанию);
		МенеджерЗаписи[ИмяИзмерения] = КлючЗаписи[ИмяИзмерения];
		МенеджерЗаписи.Период        = КлючЗаписи.Период;
	КонецЕсли;
	
	Возврат МенеджерЗаписи;

КонецФункции

// Обновляет данные формы регистра сведений по ключу записи.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма записи регистра сведений:
// 	* Запись - РегистрСведенийМенеджерЗаписи - основной реквизит формы.
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	СоздатьНовую - Булево - создать принудительно новую запись.
// 	КлючЗаписи - РегистрСведенийКлючЗаписи - ключ записи регистра сведений.
// 	ПериодЗначений - Дата - период получения данных.
// 	ДопРеквизиты - Структура - реквизиты регистра недоступные в данных формы.
Процедура ПрочитатьЗаписьРегистра(Форма, ИмяРегистра, Организация, СоздатьНовую, КлючЗаписи = Неопределено, ПериодЗначений = Неопределено, ДопРеквизиты = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(КлючЗаписи) Тогда
		Организация = КлючЗаписи.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат
	КонецЕсли;
	
	Если СоздатьНовую Тогда
		КлючЗаписи = НовыйКлючЗаписиУчетнойПолитики(ИмяРегистра, Организация, ПериодЗначений);
	КонецЕсли;
	
	Если КлючЗаписи = Неопределено Тогда
		КлючЗаписи = КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, ПериодЗначений);
	ИначеЕсли ТипЗнч(КлючЗаписи) = Тип("Структура") Тогда
		КлючЗаписи = НовыйКлючЗаписиУчетнойПолитики(ИмяРегистра, КлючЗаписи.Организация, КлючЗаписи.Период);
	КонецЕсли;
	
	МенеджерЗаписи = МенеджерЗаписиПериодическогоРегистра(ИмяРегистра, КлючЗаписи, , Форма.Запись);
	
	Если ДопРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДопРеквизиты, МенеджерЗаписи);
	КонецЕсли;
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "Запись");
	Форма.ДатаИзменения = МенеджерЗаписи.Период;
	Форма.ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"ОбособленноеПодразделение");
	ОбновитьОписаниеИстории(Форма, ИмяРегистра, Организация, МенеджерЗаписи.Период);
	
	Попытка
		РазблокироватьДанныеДляРедактирования(,  Форма.УникальныйИдентификатор); // Разблокируем другие ключи, заблокированные этой формой
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи, , Форма.УникальныйИдентификатор);
	Исключение
		
		ТекстОшибки = НСтр("ru='Не удалось заблокировать запись регистра по организации %Организация% за период %Период%.
		|%ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", Организация);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Период%", МенеджерЗаписи.Период);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Обновляет данные формы регистра сведений по значениям копирования записи регистра.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения:
// 		* Запись - РегистрСведенийМенеджерЗаписиИмяРегистраСведений.
// 	Отбор - Структура - ЗначениеКопирования записи регистра сведений.
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
Процедура СкопироватьУчетнуюПолитику(Форма, Отбор, ИмяРегистра) Экспорт
	
	Организация =  Отбор.Организация;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Период      = Отбор.Период;
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(Форма.Запись, МенеджерЗаписи);
	
	Форма.Организация = Организация;
	Форма.ДатаИзменения = МенеджерЗаписи.Период;;
	Форма.ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отбор.Организация,"ОбособленноеПодразделение");
	
КонецПроцедуры

// Формирует гиперссылку с описание истории.
// 
// Параметры:
// 	Форма - РасширениеУправляемойФормыДляЗаписиРегистраСведений - форма записи регистра сведений.
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ПериодСравнения - Дата - дата для сравнения.
Процедура ОбновитьОписаниеИстории(Форма, ИмяРегистра, Организация, ПериодСравнения) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.Период КАК Период
	|ИЗ
	|	&ИмяРегистра КАК Таблица
	|ГДЕ
	|	Таблица.Организация = &Организация
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Период ВОЗР
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", "РегистрСведений." + ИмяРегистра);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	МассивПериодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
	
	ДатаСледующейЗаписи = Неопределено;
	Для Каждого ПериодЗаписи Из МассивПериодов Цикл
		Если ПериодЗаписи > ПериодСравнения Тогда
			ДатаСледующейЗаписи = НачалоДня(ПериодЗаписи) - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаСледующейЗаписи) Тогда
		ТекстОписаниеИстории = НСтр("ru='действует по'") + " " + Формат(ДатаСледующейЗаписи, "ДЛФ=DD");
	Иначе
		ТекстОписаниеИстории = НСтр("ru='действует по настоящее время.'");
	КонецЕсли;
	ОписаниеИстории = Новый ФорматированнаяСтрока(ТекстОписаниеИстории);
	
	Если МассивПериодов.Количество() > 0 Тогда
		ГиперссылкаТекст = НСтр("ru='История изменений'") + " (" + МассивПериодов.Количество() + ")";
		ГиперссылкаИстория = Новый ФорматированнаяСтрока(ГиперссылкаТекст, , ЦветаСтиля.ГиперссылкаЦвет, , "ИсторияИзменений");
		ОписаниеИстории = Новый ФорматированнаяСтрока(ОписаниеИстории, " ", ГиперссылкаИстория);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("ОписаниеИстории, ДатаСледующейЗаписи", ОписаниеИстории, ДатаСледующейЗаписи);
	ЗаполнитьЗначенияСвойств(Форма, ЗначенияЗаполнения);
	
КонецПроцедуры

// Вызывается при записи данных формы записи регистра сведений.
// 
// Параметры:
// 	Форма - РасширениеУправляемойФормыДляЗаписиРегистраСведений - форма записи регистра сведений.
// 	Закрытие - Булево - признак закрытия формы после записи.
// 	ДопРеквизиты - Структура - реквизиты регистра недоступные в данных формы.
// Возвращаемое значение:
// 	Булево - признак успешной записи
Функция ЗаписатьИзменениеЗаписейРегистра(Форма, Закрытие = Ложь, ДопРеквизиты = Неопределено) Экспорт
		
	Отказ = НЕ Форма.ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат НЕ Отказ;
	КонецЕсли;
	
	МенеджерЗаписи = Форма.РеквизитФормыВЗначение("Запись");
	МенеджерЗаписи.Период = Форма.ДатаИзменения;
	Если ДопРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДопРеквизиты);
	КонецЕсли;
	МенеджерЗаписи.Записать(НЕ Форма.ЭтоФормаЗаписи);
	Форма.Модифицированность = Ложь;
	
	Если НЕ Закрытие Тогда
		ПрочитатьЗаписьРегистра(Форма, Форма.ИмяРегистра, Форма.Организация, Ложь, Неопределено, МенеджерЗаписи.Период, ДопРеквизиты);
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат Истина 
	
КонецФункции

// Заполняет описание действующих параметров учетных политик на форме.
// 
// Параметры:
// 	Форма - см. Справочник.Организации.Форма.ФормаЭлемента.
// 	Организация - СправочникСсылка.Организации - ссылка на справочник Организации.
// 	ИмяРегистра - Строка - наименование периодического регистра сведений.
// 	ДатаДействия - Дата - период получения данных.
Процедура ЗаполнитьОписаниеДействующихПараметров(Форма, Организация, ИмяРегистра = "", Знач ДатаДействия = "") Экспорт
	Если НЕ ЗначениеЗаполнено(ДатаДействия) Тогда
		ДатаДействия = НачалоМесяца(ТекущаяДатаСеанса());
	Иначе 
		ДатаДействия = НачалоМесяца(ДатаДействия);
	КонецЕсли;
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = Справочники.Организации.СоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик();
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		ИмяЭлемента = СоответствиеЭлементов.Получить(ИмяРегистра).ЭлементОписание;
		ЭлементОписаниеУчетнойПолитики = Элементы[ИмяЭлемента];
		ЭлементОписаниеУчетнойПолитики.Заголовок = РегистрыСведений[ИмяРегистра].ОписаниеДействующихПараметров(Организация,
			ДатаДействия);
		Возврат;
	КонецЕсли;

	МассивПараметров = ДоступныеПараметрыНалоговУчетныхПолитик(Организация, ДатаДействия);
	МассивТекстовЗапроса = Новый Массив;
	
	Для Каждого ИмяРегистра Из МассивПараметров Цикл
		МассивТекстовЗапроса.Добавить(РегистрыСведений[ИмяРегистра].ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик());
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц, Организация);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ДатаДействия);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Для ТекущийИндекс = 0 По МассивПараметров.Количество()-1 Цикл
		Выборка = МассивРезультатов[ТекущийИндекс].Выбрать();
		Если Выборка.Следующий() Тогда
			ИмяРегистра = МассивПараметров[ТекущийИндекс];
			ДанныеРегистра = Выборка;
			Если Выборка.Период = Null Тогда
				ДанныеРегистра = Неопределено;
			КонецЕсли;
			ИмяЭлемента = СоответствиеЭлементов.Получить(ИмяРегистра).ЭлементОписание;
			ЭлементОписаниеУчетнойПолитики = Элементы[ИмяЭлемента]; 
			ЭлементОписаниеУчетнойПолитики.Заголовок = РегистрыСведений[ИмяРегистра].ОписаниеДействующихПараметров(
				Организация,
				ДатаДействия,
				ДанныеРегистра);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Управляет видимостью элементов формы, относящихся с учетным политикам и налогам.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма с элементами учетных политик.
// 	СоответствиеЭлементовФормы - Соответствие - соответствие массива элементов формы и названия регистра учетных политик.
// 	Организация - СправочникСсылка.Организации - ссылка на справочник Организации.
// 	ДатаДействия - Дата - период получения данных.
Процедура УправлениеВидимостьюЭлементовУчетныхПолитик(Форма, СоответствиеЭлементовФормы, Организация, ДатаДействия = Неопределено) Экспорт
	
	СписокПараметров = ДоступныеПараметрыНалоговУчетныхПолитик(Организация, ДатаДействия);
	Для каждого ЭлементСоответствия Из СоответствиеЭлементовФормы Цикл
		ПараметрДоступен = СписокПараметров.Найти(ЭлементСоответствия.Ключ) <> Неопределено;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, 
			ЭлементСоответствия.Значение.МассивЭлементов,
			"Видимость",
			ПараметрДоступен);
	КонецЦикла;
	
КонецПроцедуры

#Область ФункцииДляПолученияОтдельныхРеквизитовУчетнойПолитики

// Возвращает массив организаций, у которых установлен указанный параметр учетной политики.
//
// Параметры:
//	ИмяРегистра  - Строка - наименование периодического регистра сведений.
//	ИмяПараметра 	  - Строка - имя параметра учетной политики, см. результат функции ПараметрыУчетнойПолитики()
//	ЗначениеПараметра - Произвольный - значение указанного параметра учетной политики
//	Организации 	  - Массив, СправочникСсылка.Организации - организации для проверки учетных политик
//	Период 			  - Дата - дата, на которую необходимо проверить учетные политики
//
// Возвращаемое значение:
//	Массив - подмножество параметра Организации, с установленным параметром учетной политики.
//
Функция ОрганизацииСЗаданнымПараметромПолитики(ИмяРегистра, ИмяПараметра, ЗначениеПараметра,
			Организации = Неопределено, Период = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	УчетныеПолитики = ДействующиеПараметрыНалоговУчетныхПолитикПоОрганизациям(ИмяРегистра, Организации, Период);
	
	Для Каждого ПараметрыУчетнойПолитики Из УчетныеПолитики Цикл
		
		Если ПараметрыУчетнойПолитики[ИмяПараметра] = ЗначениеПараметра Тогда
			Результат.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
// Функция - агрегатор сведений о настройках налогового учета на определенную дату
//
// Параметры:
//  Период       - Дата - дата чтения настроек.
//  Организация  - СправочникСсылка.Организации - организация, для которой требуется получить настройки.
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - если нет ни одной записи настроек учета неопределено,
//                                  иначе таблица.
Функция УчетнаяПолитикаНалоговыйУчет(Период, Организация) Экспорт
	Возврат НастройкиНалоговУчетныхПолитикЛокализация.УчетнаяПолитикаНалоговыйУчет(Период, Организация);
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДействующиеПараметрыНалоговУчетныхПолитик(ИмяРегистра, Организация, Знач ДатаДействия = Неопределено, ВозвращатьПоУмолчанию = Истина, ВыдаватьИсключение = Ложь) Экспорт
	Если ДатаДействия = Неопределено Тогда
		ДатаДействия = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	ТаблицаРезультатЗапроса = ДействующиеПараметрыНалоговУчетныхПолитикПоОрганизациям(ИмяРегистра, Организация, ДатаДействия, ВозвращатьПоУмолчанию);
	Если ТаблицаРезультатЗапроса.Количество() = 1 Тогда
		ДействующиеПараметры = Новый Структура;
		Для каждого Колонка Из ТаблицаРезультатЗапроса.Колонки Цикл
			ДействующиеПараметры.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ДействующиеПараметры, ТаблицаРезультатЗапроса[0]);
		Возврат ДействующиеПараметры;
	ИначеЕсли ВыдаватьИсключение Тогда
		НазваниеРегистра = Метаданные.РегистрыСведений[ИмяРегистра].Синоним;
		ШаблонИсключение = НСтр("ru='Не заданы параметры ""%1"" для организации ""%2"" на дату %3.'");
		ВызватьИсключение СтрШаблон(ШаблонИсключение, НазваниеРегистра, Организация, Формат(ДатаДействия, "ДЛФ=DD;"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДоступныеПараметрыНалоговУчетныхПолитик(Организации, ДатаДействия = Неопределено) Экспорт
	
	СписокПараметров = Новый Массив();
	СписокПараметров.Добавить("УчетнаяПолитикаФинансовогоУчета");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС") Тогда
		СписокПараметров.Добавить("НастройкиУчетаНДС");
	КонецЕсли;
	НастройкиНалоговУчетныхПолитикЛокализация.ДополнитьДоступныеПараметрыНалоговУчетныхПолитик(СписокПараметров,
		Организации,
		ДатаДействия);
	Возврат СписокПараметров;
	
КонецФункции

Процедура СобратьСтатистикуНастроекУчетныхПолитик() Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда 
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	Иначе
		Возврат
	КонецЕсли;
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросовПолученияСтатистикиУчетнойПолитики(ТекстыЗапросов);
	
	ТекстЗапросов = СтрСоединить(ТекстыЗапросов, " ОБЪЕДИНИТЬ ВСЕ ");
	Запрос = Новый Запрос(ТекстЗапросов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НастройкаТипаБулево Тогда
			ИмяПоказателя = СтрШаблон("РегистрыСведений.%1.%2", Выборка.ИмяРегистра, Выборка.ИмяПоказателя);
		Иначе
			ЗначениеРесурса = XMLСтрока(Выборка.ЗначениеПоказателя);
			ИмяПоказателя = СтрШаблон("РегистрыСведений.%1.%2.%3", Выборка.ИмяРегистра, Выборка.ИмяПоказателя, ЗначениеРесурса);
		КонецЕсли;
		
		МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации(ИмяПоказателя, Выборка.Количество);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТекстыЗапросаПоказателейСтатистики(ИмяРегистра, ПоказателиСтатистики, ТекстыЗапросов) Экспорт
	
	МассивПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоказателиСтатистики,,,Истина);
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		ШаблонТекстаЗапроса = "
		|
		|ВЫБРАТЬ
		|	""#ИмяРегистра""                         КАК ИмяРегистра,
		|	""#ИмяПоказателя""                       КАК ИмяПоказателя,
		|	&ПолеРегистра                            КАК ЗначениеПоказателя,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(&ПолеРегистра) = ТИП(БУЛЕВО)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                    КАК НастройкаТипаБулево,
		|	СУММА(1)                                 КАК Количество
		|ИЗ
		|	&ДанныеРегистра КАК ДанныеРегистра
		|ГДЕ
		|	(ТИПЗНАЧЕНИЯ(&ПолеРегистра) = ТИП(БУЛЕВО)
		|				И &ПолеРегистра = ИСТИНА
		|			ИЛИ ТИПЗНАЧЕНИЯ(&ПолеРегистра) <> ТИП(БУЛЕВО))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.ПолеРегистра
		|
		|";
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,	"#ИмяРегистра", ИмяРегистра);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,		"#ИмяПоказателя", ИмяПоказателя);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,		"&ДанныеРегистра", СтрШаблон("РегистрСведений.%1.СрезПоследних", ИмяРегистра));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,		"&ПолеРегистра", СтрШаблон("ДанныеРегистра.%1", ИмяПоказателя));
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает параметр "Организация"
// в случае массива:
//   * без пустых значений
//   * только уникальные значения
//   * список значений приводит к массиву
//   * если элемент в массиве один - возвращает ссылку на организацию
//   * если в итоге получился пустой массив, то вернет Неопределено.
// 
// Параметры:
// 	ОрганизацияИсх - Массив из СправочникСсылка.Организации, СправочникСсылка.Организации, Неопределено - исходящая организация
//  
// Возвращаемое значение:
// 	Массив из СправочникСсылка.Организации, СправочникСсылка.Организации, Неопределено - обработанный параметр "Организация"
Функция ОбработанныйПараметрОрганизация(Знач ОрганизацияИсх) Экспорт
	
	ОрганизацияОбр = Неопределено;
	
	Если ТипЗнч(ОрганизацияИсх) = Тип("СписокЗначений") Тогда
		ОрганизацияИсх = ОрганизацияИсх.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ТипЗнч(ОрганизацияИсх) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(ОрганизацияИсх) Тогда
		ОрганизацияОбр = ОрганизацияИсх;
	КонецЕсли;
	
	Если ТипЗнч(ОрганизацияИсх) = Тип("Массив") Тогда
		колво = ОрганизацияИсх.Количество();
		Если колво = 1 Тогда
			ОрганизацияОбр = ОрганизацияИсх.Получить(0); // СправочникСсылка.Организации
		ИначеЕсли колво > 1 Тогда
			// переданную по значению ссылку "Организация" указываем на новый массив
			УникальныеОрганизации = Новый Соответствие;
			ОрганизацияОбр      = Новый Массив;
			Для каждого эл Из ОрганизацияИсх Цикл
				Если ЗначениеЗаполнено(эл) И УникальныеОрганизации.Получить(эл) = Неопределено Тогда
					УникальныеОрганизации.Вставить(эл, Истина);
					ОрганизацияОбр.Добавить(эл);
				КонецЕсли;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(ОрганизацияОбр) Тогда
				ОрганизацияОбр = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОрганизацияОбр;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ТекстыЗапросовПолученияСтатистикиУчетнойПолитики(ТекстыЗапросов)
	
	//Регистр УчетнаяПолитикаФинансовогоУчета
	ПоказателиСтатистики = "МетодОценкиСтоимостиТоваров,
							|УчетГотовойПродукцииПоПлановойСтоимости";
							
													
	ДополнитьТекстыЗапросаПоказателейСтатистики("УчетнаяПолитикаФинансовогоУчета", ПоказателиСтатистики, ТекстыЗапросов);
	
	НастройкиНалоговУчетныхПолитикЛокализация.ТекстыЗапросовПолученияСтатистикиУчетнойПолитики(ТекстыЗапросов)
	
КонецПроцедуры

#КонецОбласти
