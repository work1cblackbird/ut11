
#Область ПрограммныйИнтерфейс

#Область ФункцииПолученияЗначенийПоУмолчанию

// Возвращает банковский счет контрагента, если он один в ИБ
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
// Параметры:
//  Контрагент     - СправочникСсылка.Контрагенты - Контрагент, для которой необходимо получить счет
//  ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
//                   получения банковского счета.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчетаКонтрагентов - банковский счет контрагента по умолчанию.
//
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Знач Контрагент, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Контрагент)) Тогда
		
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Контрагент);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетКонтрагентаПоУмолчанию()

// Возвращает банковский счет организации, если он один в ИБ
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет
// Возвращает банковский счет, только если переданная форма оплаты безналичная или не задана.
//
// Параметры:
//   СтруктураПараметров - Структура - Структура параметров для определения счета:
//     * Организация             - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
//     * ФормаОплаты             - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
//                                                                  получения банковского счета.
//     * БанковскийСчет          - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить.
//     * Валюта                  - СправочникСсылка.Валюты - Валюта счета.
//     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета.
//
// Возвращаемое значение:
//   СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет организации по умолчанию.
//
Функция ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	КонецЕсли;
	
	Организация             = СтруктураПараметров.Организация;
	ФормаОплаты             = СтруктураПараметров.ФормаОплаты;
	БанковскийСчет          = СтруктураПараметров.БанковскийСчет;
	Валюта                  = СтруктураПараметров.Валюта;
	НаправлениеДеятельности = СтруктураПараметров.НаправлениеДеятельности;
	
	Если Не ЗначениеЗаполнено(БанковскийСчет)
		И (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Или Не ЗначениеЗаполнено(ФормаОплаты)) Тогда
		
		Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Организация, Валюта, НаправлениеДеятельности);
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции

// Получает организацию, если она одна в ИБ
// Если переданная в качестве параметра организация уже заполнена - возвращает ее.
// Если организация не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе организацию. Если организация
// в базе не одна - возвращает пустую ссылку на организацию.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - организация по умолчанию.
//
Функция ПолучитьОрганизациюПоУмолчанию(Знач Организация = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	Иначе
		Возврат Организация;
	КонецЕсли;
	
КонецФункции

// Возвращает вариант классификации по умолчанию.
// Если в ИБ есть только один вариант, который не помечен на удаление,
// то будет возвращена ссылка на него, иначе будет возвращена ссылка на первый созданный в справочнике элемент.
//
// Параметры:
//  ТолькоЕслиОдин - Булево - возвращает вариант, только если он один в ИБ.
//
// Возвращаемое значение:
//  СправочникСсылка.ВариантыКлассификацииЗадолженности - ссылка на вариант.
//
Функция ВариантКлассификацииЗадолженностиПоУмолчанию(ТолькоЕслиОдин = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ВариантКлассификацииЗадолженностиПоУмолчанию = Справочники.ВариантыКлассификацииЗадолженности.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ВариантыКлассификацииЗадолженности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыКлассификацииЗадолженности КАК ВариантыКлассификацииЗадолженности
	|ГДЕ
	|	НЕ ВариантыКлассификацииЗадолженности.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТолькоЕслиОдин И Выборка.Количество() = 1 
			Или Не ТолькоЕслиОдин Тогда
			ВариантКлассификацииЗадолженностиПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВариантКлассификацииЗадолженностиПоУмолчанию;
КонецФункции

// Получает подразделение-диспетчер, если оно одно в ИБ
// Если переданный параметр подразделение-диспетчер уже заполнен - возвращает его.
// Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//	возвращает единственное в информационной базе подразделение-диспетчер. 
// Если подразделений-диспетчеров в базе несколько, 
//	возвращает подразделение-диспетчер из настроек пользователя.
// Если подразделение-диспетчер не указано в настройках пользователя,
//	возвращает пустое подразделение.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, которое нужно заполнить.
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - подразделение по умолчанию.
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Подразделение = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Справочники.СтруктураПредприятия.ПолучитьПодразделениеДиспетчерПоУмолчанию(Пользователь);
	Иначе
		Возврат Подразделение;
	КонецЕсли;
	
КонецФункции

// Получает приоритет, используемый для заполнения новых документов.
//
// Параметры:
//  Приоритет - СправочникСсылка.Приоритеты	 - приоритет по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.Приоритеты - приоритет по умолчанию.
//
Функция ПолучитьПриоритетПоУмолчанию(Знач Приоритет = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(Приоритет) Тогда
		Возврат Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию();
	Иначе
		Возврат Приоритет;
	КонецЕсли;
	
КонецФункции

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // ПолучитьСтатьюДвиженияДенежныхСредств()

// Получает подразделение выбранного пользователя.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - Текущий пользователь.
//	Подразделение - СправочникСсылка.СтруктураПредприятия
//
// Возвращаемое значение:
//	ОпределяемыйТип.Подразделение - Подразделение пользователя.
//
Функция ПодразделениеПользователя(Пользователь, Подразделение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции // ПодразделениеПользователя()

// Возвращает структуру по ответственному лицу указанного склада
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Структура - Структура с полями: 
// 		* Ответственный - СправочникСсылка.ФизическиеЛица
// 		* ОтветственныйДолжность - Строка
//
Функция ПолучитьОтветственногоПоСкладу(Склад) Экспорт
	
	Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТекущийОтветственный, ТекущаяДолжностьОтветственного");
	
	Если ЗначениеЗаполнено(Структура.ТекущийОтветственный) ИЛИ ЗначениеЗаполнено(Структура.ТекущаяДолжностьОтветственного) Тогда
		
		Возврат Новый Структура("Ответственный, ОтветственныйДолжность",
			Структура.ТекущийОтветственный,
			Структура.ТекущаяДолжностьОтветственного);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции //ПолучитьОтветственногоПоСкладу()

// Возвращает массив ссылок на группы складов, в иерархию которых входит указанный склад.
//
// Параметры:
//  Склад - СправочникСсылка.Склады - склад, для которого нужно получить массив групп.
//
// Возвращаемое значение:
//  Массив - массив ссылок на группы, в иерархию которых входит склад.
//
Функция ИерархияГрупп(Склад) Экспорт
	Возврат Справочники.Склады.ИерархияГрупп(Склад);
КонецФункции

// Получает сценарий по типу плана если он один в ИБ
// Если переданная в качестве параметра Сценарий уже заполнен - возвращает его.
// Если Сценарий не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе сценарий. Если Сценарий планирования
// в базе не один - возвращает пустую ссылку на сценарий.
//
// Параметры:
//   ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана: план продаж, план закупок и т.д.
//   Сценарий - СправочникСсылка.СценарииТоварногоПланирования - Сценарий, который нужно заполнить.
//
// Возвращаемое значение:
//   СправочникСсылка.СценарииТоварногоПланирования - сценарий планирования по умолчанию.
//
Функция ПолучитьСценарийПоУмолчанию(Знач ТипПлана, Знач Сценарий = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат Планирование.ПолучитьСценарийПоУмолчанию(ТипПлана);
	Иначе
		Возврат Сценарий;
	КонецЕсли;
	
КонецФункции // ПолучитьСценарийПоУмолчанию()

// Устарела. Возвращает валюту регламентированного учета.
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту РУ. Если валюта РУ не заполнена - возвращает пустую ссылку на валюту.
//
// Параметры:
//   Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - валюта по умолчанию.
//
Функция ПолучитьВалютуРегламентированногоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции

// Возвращает валюту регламентированного учета, определенную для организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой надо получить валюту регламентированного учета.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - 
//
Функция ВалютаРегламентированногоУчетаОрганизации(Знач Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВалютаРегламентированногоУчета");
	КонецЕсли;
	
КонецФункции

// Возвращает базовую валюту по умолчанию.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - 
//
Функция БазоваяВалютаПоУмолчанию() Экспорт
	
	Возврат Константы.БазоваяВалютаПоУмолчанию.Получить();

КонецФункции

// Возвращает валюту управленческого учета.
//
// Возвращаемое значение:
//   СправочникСсылка.Валюты - 
//
Функция ВалютаУправленческогоУчета() Экспорт
	
	Возврат Константы.ВалютаУправленческогоУчета.Получить();
	
КонецФункции

// Возвращает вид цены поставщика если он один в ИБ.
//
// Параметры:
// 	Поставщик - СправочникСсылка.Партнеры - партнер, для которого необходимо получить вид цен.
//
// Возвращаемое значение:
// 	СправочникСсылка.ВидыЦенПоставщиков
//
Функция ВидЦеныПоставщикаПоУмолчанию(Поставщик) Экспорт
	
	ВидЦены = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыЦенПоставщиков.Ссылка
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	|ГДЕ
	|	ВидыЦенПоставщиков.Владелец = &Владелец");
	
	Запрос.УстановитьПараметр("Владелец", Поставщик);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Если Выборка.Следующий() Тогда
			ВидЦены = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидЦены
	
КонецФункции


// Возвращает свойства реквизитов номенклатуры с учетом настроек сделанных
// в метаданных и определенных в модулях менеджера номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//
// Возвращаемое значение:
//	см. Справочники.Номенклатура.ВсеРеквизиты.
//
Функция ВсеРеквизитыНоменклатуры(ТипНоменклатуры,
								ОсобенностьУчета,
								ИспользованиеХарактеристик,
								ИспользоватьСрокГодностиСерии) Экспорт
	
	Возврат Справочники.Номенклатура.ВсеРеквизиты(ТипНоменклатуры,
												ОсобенностьУчета,
												ИспользованиеХарактеристик,
												ИспользоватьСрокГодностиСерии);
	
КонецФункции

// Возвращает свойства реквизитов номенклатуры с учетом настроек сделанных
// в метаданных и определенных в модулях менеджера номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//
// Возвращаемое значение:
//	ТаблицаЗначений - колонки таблицы такие же, как свойства в структуре см. Справочники.Номенклатура.ВсеРеквизиты.
//
Функция ВсеРеквизитыНоменклатурыТаблица(ТипНоменклатуры,
										ОсобенностьУчета,
										ИспользованиеХарактеристик,
										ИспользоватьСрокГодностиСерии) Экспорт
	
	ВсеРеквизитыНоменклатурыСтруктура = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры(ТипНоменклатуры,
																						ОсобенностьУчета,
																						ИспользованиеХарактеристик,
																						ИспользоватьСрокГодностиСерии);
	
	Таблица = Справочники.Номенклатура.СтруктураОписанияРеквизитовВТаблицу(ВсеРеквизитыНоменклатурыСтруктура);
	
	Возврат Таблица;
	
КонецФункции

// Возвращает свойства реквизитов номенклатуры с учетом настроек сделанных
// в метаданных и определенных в модулях менеджера номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - см. Справочники.ХарактеристикиНоменклатуры.ВсеРеквизиты.
//
Функция ВсеРеквизитыХарактеристикНоменклатуры(ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	Возврат Справочники.ХарактеристикиНоменклатуры.ВсеРеквизиты(ТипНоменклатуры, ОсобенностьУчета);
	
КонецФункции

// Возвращает свойства реквизитов номенклатуры с учетом настроек сделанных
// в метаданных и определенных в модулях менеджера номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//
// Возвращаемое значение:
//	ТаблицаЗначений - колонки таблицы такие же, как свойства в структуре
//						см. Справочники.ХарактеристикиНоменклатуры.ВсеРеквизиты.
//
Функция ВсеРеквизитыХарактеристикНоменклатурыТаблица(ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ВсеРеквизитыХарактеристикНоменклатурыСтруктура =
		ЗначениеНастроекПовтИсп.ВсеРеквизитыХарактеристикНоменклатуры(ТипНоменклатуры, ОсобенностьУчета);
	
	Возврат Справочники.Номенклатура.СтруктураОписанияРеквизитовВТаблицу(ВсеРеквизитыХарактеристикНоменклатурыСтруктура);
	
КонецФункции

// Кэш для для функции Справочники.ВидыЗапасов.ВидЗапасовПоОтборам
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, от имени которой будет оформляться реализация товаров
//  ТипЗапасов - ПеречислениеСсылка.ТипыЗапасов, Массив из ПеречислениеСсылка.ТипыЗапасов - доступные типы запасов товаров.
//  ВладелецТовара - СправочникСсылка.Организации, СправочникСсылка.Партнеры - владелец товаров.
//  Контрагент - СправочникСсылка.Организации, СправочникСсылка.Партнеры - контрагент, с которым заключается договор на реализацию товаров.
//  Соглашение - СправочникСсылка.СоглашенияСПоставщиками - соглашение, в рамках которого оформляется поступление товаров.
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями, Массив из СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - договор, в рамках которого оформляется реализация товаров.
//  Валюта - СправочникСсылка.Валюты - валюта, по которой осуществляются взаиморасчеты с владельцем товаров.
//  НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения реализации товаров, облагаемой налогом на добавленную стоимость.
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры - группа финансового учета товаров.
//  ГруппаПродукции - СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры - вид продукции.
//  ВидЦены - СправочникСсылка.ВидыЦенПоставщиков - вид цены, по которой зафиксировано поступление товара.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыЗапасов
//
Функция ВидЗапасовПоОтборам(Организация,
	ТипЗапасов,
	ВладелецТовара,
	Контрагент,
	Соглашение,
	Договор,
	Валюта,
	НалогообложениеНДС,
	ГруппаФинансовогоУчета,
	ГруппаПродукции,
	ВидЦены) Экспорт // Количество параметров повышает описанное в стандарте, но тут это осознанное решение для работы кэша
	
	СтруктураАналитики = Справочники.ВидыЗапасов.ПараметрыОтбораВидовЗапасов();

	СтруктураАналитики.Организация = Организация;
	СтруктураАналитики.ТипЗапасов = ТипЗапасов;
	СтруктураАналитики.ВладелецТовара = ВладелецТовара;
	СтруктураАналитики.Контрагент = Контрагент;
	СтруктураАналитики.Соглашение = Соглашение;
	СтруктураАналитики.Договор = Договор;
	СтруктураАналитики.Валюта = Валюта;
	СтруктураАналитики.НалогообложениеНДС = НалогообложениеНДС;
	СтруктураАналитики.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета;
	СтруктураАналитики.ГруппаПродукции = ГруппаПродукции;
	СтруктураАналитики.ВидЦены = ВидЦены;
	
	Возврат Справочники.ВидыЗапасов.ВидЗапасовПоОтборам(СтруктураАналитики);
	
КонецФункции

// Устарела. Следует использовать методы программного интерфейса учета НДС (УчетНДСУП, УчетНДСУПКлиент и т.д.)
//
// Возвращает налогообложение НДС по договору, направлению деятельности, организации и складу на дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которого определяется система налогообложения
//	Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор, выбранный в документе
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, выбранное в документе
//	Дата - Дата - Дата определения системы налогообложения по организации и складу.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыНалогообложенияНДС
//
Функция НалогообложениеНДС(Знач Организация, Знач Склад = Неопределено, Знач Договор = Неопределено, Знач НаправлениеДеятельности = Неопределено, Знач Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Или ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ДоговорыКонтрагентов.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|	И НЕ ДоговорыКонтрагентов.НалогообложениеНДСОпределяетсяВДокументе
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ДоговорыМеждуОрганизациями.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|	И НЕ ДоговорыМеждуОрганизациями.НалогообложениеНДСОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	НаправленияДеятельности.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
		|	И НЕ НаправленияДеятельности.НалогообложениеНДСОпределяетсяВДокументе
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДеятельности);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатЗапросаПустой = РезультатЗапроса.Пустой();
		
	Иначе
		
		РезультатЗапросаПустой = Истина;
		
	КонецЕсли;
	
	Если РезультатЗапросаПустой Тогда
		ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Организация, Дата, Склад);
		НалогообложениеНДС = ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НалогообложениеНДС =  Выборка.НалогообложениеНДС;
	КонецЕсли;
	
	Возврат НалогообложениеНДС;
	
КонецФункции

// Возвращает склад, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад.
//
// Параметры:
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить.
//  УчитыватьГруппыСкладов - Булево
//  ИсключитьГруппыДоступныеВЗаказах - Булево
//
// Возвращаемое значение:
//  СправочникСсылка.Склады - склад по умолчанию.
//
Функция ПолучитьСкладПоУмолчанию(Знач Склад = Неопределено, УчитыватьГруппыСкладов = Ложь, ИсключитьГруппыДоступныеВЗаказах=Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Справочники.Склады.СкладПоУмолчанию(УчитыватьГруппыСкладов, ИсключитьГруппыДоступныеВЗаказах);
	Иначе
		Возврат Склад;
	КонецЕсли;
	
КонецФункции 

// Возвращает склад, если он один в ИБ.
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад.
//
// Параметры:
//   Склад - СправочникСсылка.Склады - Склад, который нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады - розничный склад по умолчанию.
//
Функция ПолучитьРозничныйСкладПоУмолчанию(Знач Склад = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Склад) Тогда
		Склад = Справочники.Склады.РозничныйСкладПоУмолчанию();
	Иначе
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
		Если Не (ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин) Тогда
			Склад = Справочники.Склады.РозничныйСкладПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

// Возвращает кассу организации, если она одна в ИБ.
// Если переданная в качестве параметра касса уже заполнена - возвращает ее.
// Если касса не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе кассу. Если касса
// в базе не одна - возвращает пустую ссылку на кассу.
// Возвращает кассу, только если переданная форма оплаты наличная или Неопределено.
//
// Параметры:
//  СтруктураПараметров - Структура - Структура параметров для определения кассы:
//   * Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
//   * ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость получения кассы.
//   * Касса       - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//   * Валюта      - СправочникСсылка.Валюты - Валюта счета
//   * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности кассы.
//
// Возвращаемое значение:
//   СправочникСсылка.Кассы - касса организации по умолчанию.
//
Функция ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	КонецЕсли;
	
	Организация 			= СтруктураПараметров.Организация;
	ФормаОплаты 			= СтруктураПараметров.ФормаОплаты;
	Касса		 			= СтруктураПараметров.Касса;
	Валюта					= СтруктураПараметров.Валюта;
	НаправлениеДеятельности	= СтруктураПараметров.НаправлениеДеятельности;
	ФизическоеЛицо			= СтруктураПараметров.ФизическоеЛицо;
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Наличная)
		И Не ЗначениеЗаполнено(Касса) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		Возврат Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация, Валюта, НаправлениеДеятельности, ФизическоеЛицо);
	ИначеЕсли ЗначениеЗаполнено(Касса) и ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Касса));
		ОписаниеТиповКассы = Новый ОписаниеТипов(МассивТипов);
		Возврат ОписаниеТиповКассы.ПривестиЗначение();
	Иначе
		Возврат Касса;
	КонецЕсли;
	
КонецФункции

// Возвращает контактное лицо по умолчанию, если оно одно для указанного партнера
//
// Параметры:
//  Партнер - СправочникСсылка.Партнеры - партнер, для которого необходимо получить контактное лицо.
//
// Возвращаемое значение:
//  СправочникСсылка.КонтактныеЛицаПартнеров - контактное лицо партнера по умолчанию.
//
Функция ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Знач Партнер) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер");
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	
КонецФункции

// Функция возвращает массив префиксов весовых штрихкодов
//
// Возвращаемое значение:
//   Массив - префиксы весовых штрихкодов.
//
Функция ПолучитьПрефиксыВесовыхШтрихкодов() Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	ДиапазоныВесовыхШтрихкодов = ДиапазоныВесовыхШтрихкодов();
	Для Каждого СтрокаТЧ Из ДиапазоныВесовыхШтрихкодов Цикл
		ВозвращаемоеЗначение.Добавить(Прав(СтрокаТЧ.Диапазон, 1));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает складскую группу номенклатуры, если она одна в ИБ
// Если переданная в качестве параметра складская группа уже заполнена - возвращает ее.
// Если складская группа не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе складскую группу. Если складская группа
// в базе не одна - возвращает пустую ссылку на складскую группу.
//
// Параметры:
//  СкладскаяГруппаНоменклатуры - СправочникСсылка.СкладскиеГруппыНоменклатуры - складская группа, которую
//                                нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.СкладскиеГруппыНоменклатуры - складская группа номенклатуры по умолчанию.
//
Функция СкладскаяГруппаНоменклатурыПоУмолчанию(Знач СкладскаяГруппаНоменклатуры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СкладскаяГруппаНоменклатуры) Тогда
		Возврат Справочники.СкладскиеГруппыНоменклатуры.СкладскаяГруппаНоменклатурыПоУмолчанию();
	Иначе
		Возврат СкладскаяГруппаНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Получает складскую группу упаковок, если она одна в ИБ
// Если переданная в качестве параметра складская группа уже заполнена - возвращает ее.
// Если складская группа не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе складскую группу. Если складская группа
// в базе не одна - возвращает пустую ссылку на складскую группу.
//
// Параметры:
//  СкладскаяГруппаУпаковок - СправочникСсылка.СкладскиеГруппыУпаковок - складская группа, которую
//                            нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.СкладскиеГруппыУпаковок - складская группа упаковок по умолчанию.
//
Функция СкладскаяГруппаУпаковокПоУмолчанию(Знач СкладскаяГруппаУпаковок = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СкладскаяГруппаУпаковок) Тогда
		Возврат Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
	Иначе
		Возврат СкладскаяГруппаУпаковок;
	КонецЕсли;
	
КонецФункции

// Возвращает формат магазина, если он один в ИБ/
//
// Параметры:
//   ОбъектПланирования - СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады - объект планирования, который
//                                                                                     нужно заполнить.
//
// Возвращаемое значение:
//    СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады - объект планирования по умолчанию.
//
Функция ПолучитьОбъектПланированияПоУмолчанию(Знач ОбъектПланирования = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ОбъектПланирования) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьФорматыМагазинов") Тогда
			Возврат Справочники.ФорматыМагазинов.ПолучитьФорматМагазинаПоУмолчанию();
		Иначе
			Возврат Справочники.Склады.СкладПоУмолчанию();
		КонецЕсли; 
	Иначе
		Возврат ОбъектПланирования;
	КонецЕсли;
	
КонецФункции

// Функция-конструктор параметров выбора вида цен по умолчанию
//
// Возвращаемое значение:
// 	Структура - Структура параметров для выбора вида цен:
//      * ВидЦены                                   - СправочникСсылка.ВидыЦен - Вид цены, который нужно заполнить.
//      * ЦенаВключаетНДС                           - Булево - Признак включения НДС в цену.
//      * ИспользоватьПриПродаже                    - Булево - Выбор вида цены для продажи
//      * ИспользоватьПриПередачеМеждуОрганизациями - Булево - Выбор вида цены для передачи между организациями.
//      * ИспользоватьПриПередачеПродукцииДавальцу  - Булево - Выбор вида цены для передачи продукции давальцу.
//
Функция ПараметрыВыбораВидаЦеныПоУмолчанию() Экспорт
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("ВидЦены", Неопределено);
	ПараметрыВыбора.Вставить("ЦенаВключаетНДС", Неопределено);
	ПараметрыВыбора.Вставить("ИспользоватьПриПродаже", Неопределено);
	ПараметрыВыбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", Неопределено);
	ПараметрыВыбора.Вставить("ИспользоватьПриПередачеПродукцииДавальцу", Неопределено);
	ПараметрыВыбора.Вставить("Статус", Неопределено);
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Возвращает вид цены, если он один в ИБ.
// Если переданный в качестве параметра вид цены уже заполнен - возвращает его.
// Если вид цены не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе вид цены. Если видов цен
// в базе несколько - возвращает пустую ссылку на вид цены.
//
// Параметры:
//   ПараметрыВыбора - Структура - Структура параметров выбора, конструктор ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыЦен - вид цены по умолчанию.
//
Функция ВидЦеныПоУмолчанию(ПараметрыВыбора) Экспорт

	ВидЦены                                   = ПараметрыВыбора.ВидЦены;
	ЦенаВключаетНДС                           = ПараметрыВыбора.ЦенаВключаетНДС;
	ИспользоватьПриПродаже                    = ПараметрыВыбора.ИспользоватьПриПродаже;
	ИспользоватьПриПередачеМеждуОрганизациями = ПараметрыВыбора.ИспользоватьПриПередачеМеждуОрганизациями;
	ИспользоватьПриПередачеПродукцииДавальцу  = ПараметрыВыбора.ИспользоватьПриПередачеПродукцииДавальцу;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		
		ПараметрыОтбора = Новый Структура;
		
		Если ЦенаВключаетНДС <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		КонецЕсли;
		Если ИспользоватьПриПродаже <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ИспользоватьПриПродаже", ИспользоватьПриПродаже);
		КонецЕсли;
		Если ИспользоватьПриПередачеМеждуОрганизациями <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
		КонецЕсли;
		
		Если ИспользоватьПриПередачеПродукцииДавальцу <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ИспользоватьПриПередачеПродукцииДавальцу", ИспользоватьПриПередачеПродукцииДавальцу);
		КонецЕсли;
		
		Возврат Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены, ПараметрыОтбора);
		
	Иначе
		Возврат ВидЦены;
	КонецЕсли;
	
КонецФункции

#Область Штрихкодирование

// Возвращает диапазон весовых штрихкодов по умолчанию.
//
// Возвращаемое значение:
//   Строка - диапазон по умолчанию.
//
Функция ДиапазонВесовыхШтрихкодовПоУмолчанию() Экспорт
	
	Диапазоны = ДиапазоныВесовыхШтрихкодов();
	Для Каждого СтрокаТЧ Из Диапазоны Цикл
		Возврат СтрокаТЧ.Диапазон;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает массив диапазонов весовых штрихкодов.
//
// Возвращаемое значение:
//  Массив - диапазоны штрихкодов.
//
Функция ДиапазоныВесовыхШтрихкодов() Экспорт
	
	ДиапазоныВесовыхШтрихкодов = Новый Массив;
	
	НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодов();
	Для Каждого Настройка Из НастройкиДиапазоновШтрихкодов Цикл
		Если Настройка.Весовой Тогда
			ДиапазоныВесовыхШтрихкодов.Добавить(Настройка);
		КонецЕсли
	КонецЦикла;
	
	Возврат ДиапазоныВесовыхШтрихкодов;
	
КонецФункции

// Возвращает массив диапазонов штучных штрихкодов.
//
// Возвращаемое значение:
//  Массив - диапазоны штрихкодов.
//
Функция ДиапазоныШтучныхШтрихкодов() Экспорт
	
	ДиапазоныШтучныхШтрихкодов = Новый Массив;
	
	НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодов();
	Для Каждого Настройка Из НастройкиДиапазоновШтрихкодов Цикл
		Если Не Настройка.Весовой Тогда
			ДиапазоныШтучныхШтрихкодов.Добавить(Настройка);
		КонецЕсли
	КонецЦикла;
	
	Возврат ДиапазоныШтучныхШтрихкодов;
	
КонецФункции

#КонецОбласти

#Область СкидкиНаценки

// Определяет сколько скидок (наценок) задействована в объектах ИБ.
//
// Возвращаемое значение:
//  Структура - структура, содержащая количество задействованных скидок (наценок) в объектах ИБ.
//
Функция КоличествоИсточниковСкидокНаценок() Экспорт
	
	СтруктураКВозврату = Новый Структура;
	СтруктураКВозврату.Вставить("ВсегоНаСкладах", 0);
	СтруктураКВозврату.Вставить("ВсегоВТиповыхСоглашениях", 0);
	СтруктураКВозврату.Вставить("ВсегоВИндивидуальныхСоглашениях", 0);
	СтруктураКВозврату.Вставить("ВсегоВКартахЛояльности", 0);
	
	ТекстЗапросаПоВидамКартамЛояльности = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВидыКартЛояльности.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности";
	
	ТекстЗапросаПоСкладам = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Склады.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа";
	
	ТекстЗапросаПоИндивидуальнымСоглашениям = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СоглашенияСКлиентами.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.Типовое";
	
	ТекстЗапросаПоТиповымСоглашениям = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СоглашенияСКлиентами.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое";
	
	Запрос = Новый Запрос;
	КоличествоЗапросов = 0;
	СоответствиеДанныхНомерамЗапроса = Новый Соответствие;
	ТекстЗапросаПостфикс = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности")
		И ПравоДоступа("Чтение", Метаданные.Справочники.КартыЛояльности) Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоВидамКартамЛояльности;
		СоответствиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоВКартахЛояльности");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов")
		И ПравоДоступа("Чтение", Метаданные.Справочники.Склады) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(КоличествоЗапросов = 0 , "", ТекстЗапросаПостфикс) + ТекстЗапросаПоСкладам;
		СоответствиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоНаСкладах");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами")
		И ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(КоличествоЗапросов = 0 , "", ТекстЗапросаПостфикс) + ТекстЗапросаПоИндивидуальнымСоглашениям;
		СоответствиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоВИндивидуальныхСоглашениях");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(КоличествоЗапросов = 0 , "", ТекстЗапросаПостфикс) + ТекстЗапросаПоТиповымСоглашениям;
		СоответствиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоВТиповыхСоглашениях");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если КоличествоЗапросов > 0 Тогда
		
		РезультатЗапроса = Запрос.ВыполнитьПакет(); 
		
		Для Инд = 1 По КоличествоЗапросов Цикл 
			
			Выборка = РезультатЗапроса[Инд - 1].Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураКВозврату[СоответствиеДанныхНомерамЗапроса.Получить(Инд-1)] = Выборка.КоличествоОбъектов;
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли;
	
	Возврат СтруктураКВозврату;
	
КонецФункции

#КонецОбласти

#Область ДоступКРеквизитамОбъектовМетаданных

// Возвращает перечень реквизитов справочника, недоступных для изменения текущему пользователю.
//
// Параметры:
//		ИмяСправочника - Строка - имя справочника как оно задано в метаданных
//		ЭтоГруппа - Булево - проверять реквизиты группы или элемента справочника
//		НепроверяемыеРеквизиты - Строка - перечень реквизитов, которые могут быть "законно" изменены программно, при записи элемента
// Возвращаемое значение:
//		Строка - список недоступных реквизитов, разделенных запятыми.
//
Функция НедоступныеДляРедактированияРеквизитыСправочника(ИмяСправочника, ЭтоГруппа = Ложь, НепроверяемыеРеквизиты = "") Экспорт
	
	Реквизиты = "";
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Реквизиты; // все реквизиты доступны для редактирования
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	ИсключаемыеРеквизиты  = Новый Структура(
		"Предопределенный,Ссылка,ЭтоГруппа" + ?(ПустаяСтрока(НепроверяемыеРеквизиты), "", "," + НепроверяемыеРеквизиты));
	
	Для Каждого МетаданныеРеквизита Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		Если НЕ ИсключаемыеРеквизиты.Свойство(МетаданныеРеквизита.Имя)
		 И НЕ ПравоДоступа("Редактирование", МетаданныеСправочника,, МетаданныеРеквизита.Имя) Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ",") + МетаданныеРеквизита.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеСправочника.Реквизиты Цикл
		Если НЕ ЭтоГруппа И МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
		 ИЛИ ЭтоГруппа И МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
			Продолжить; // реквизит не используется
		КонецЕсли;
		Если НЕ ИсключаемыеРеквизиты.Свойство(МетаданныеРеквизита.Имя)
		 И НЕ ПравоДоступа("Редактирование", МетаданныеРеквизита) Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ",") + МетаданныеРеквизита.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает структуру реквизитов справочника.
//
// Параметры:
//		ИмяСправочника - Строка - имя справочника как оно задано в метаданных
// Возвращаемое значение:
//		Структура - стандартные и обычные реквизиты справочника.
//
Функция РеквизитыСправочника(ИмяСправочника) Экспорт
	
	СтруктураРеквизитов   = Новый Структура;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	
	Для Каждого Реквизит Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
