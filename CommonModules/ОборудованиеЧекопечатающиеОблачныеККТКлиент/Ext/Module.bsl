#Область ПрограммныйИнтерфейсСлужебный

// Начать выполнение команды
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ПараметрыОперации - Структура
//  ПараметрыВыполнениеКоманды - см. ПараметрыВыполненияОперацииНаАвтономнойККТ
//  ДополнительныеПараметры - Структура
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства, ПараметрыОперации, ПараметрыВыполнениеКоманды, ДополнительныеПараметры = Неопределено) Экспорт
	
	Команда = ПараметрыВыполнениеКоманды.Команда;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("Команда", ПараметрыВыполнениеКоманды.Команда);
	ДополнительныеПараметры.Вставить("ПечатающееУстройствоДополнительныхДокументов"); 
	ДополнительныеПараметры.Вставить("ПодключенноеПечатающееУстройствоДополнительныхДокументов");
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Если Команда = "CheckFiscalization" ИЛИ Команда = "PrintReceiptCorrection" Тогда
		
		ОбщиеПараметры = ДополнительныеПараметры.ПараметрыОперации;
		Результат = ОборудованиеЧекопечатающиеОблачныеККТВызовСервера.ФискализацияЧека(ОбщиеПараметры.ДокументОснование, ИдентификаторУстройства, ОбщиеПараметры);
		ПробитиеЧека(Результат, ДополнительныеПараметры);
		
	ИначеЕсли Команда = "OpenShift"  Тогда
		
		Результат = ОборудованиеЧекопечатающиеОблачныеККТВызовСервера.СтатусКассы(ИдентификаторУстройства);
		РезультатОперации = Ложь;
		Если ЗначениеЗаполнено(Результат.Результат)Тогда
			Если Результат.Результат.kktStatus = "FISCALIZATION_AVAILABLE" Тогда
				РезультатОперации = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОткрытиеСмены(РезультатОперации, ДополнительныеПараметры);
		
	ИначеЕсли Команда = "CloseShift" Тогда
		
		ЗакрытиеСмены(Истина, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение команды
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения.
//  ИдентификаторКлиента - УникальныйИдентификатор - уникальный идентификатор клиента.
//  ПараметрыОперации - Структура
//  ДополнительныеПараметры - Структура
//
Процедура ПроверитьСтатусЧека(ОповещениеПриЗавершении, ИдентификаторКлиента, ИдентификаторУстройства, ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПечатающееУстройствоДополнительныхДокументов"); 
	ДополнительныеПараметры.Вставить("ПодключенноеПечатающееУстройствоДополнительныхДокументов");
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Результат = ОборудованиеЧекопечатающиеОблачныеККТВызовСервера.СтатусПробитияЧека(ПараметрыОперации.ДокументОснование);
	ПробитиеЧека(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершает выполнение команды
//
// Параметры:
//  Результат - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура
Процедура ПробитиеЧека(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
	ПараметрыОперации.Вставить("ПараметрыОперации", ДополнительныеПараметры.ПараметрыОперации);
	
	РезультатВыполнения = ОборудованиеЧекопечатающиеОблачныеККТВызовСервера.РезультатВыполненияОперации(Результат, ПараметрыОперации);
	
	РаспределеннаяФискализацияВызовСервера.ОбработатьСтатусПостановкиЧекаВОблачныйСервис(
		ДополнительныеПараметры.ПараметрыОперации.ДокументОснование, 
		Результат.ДанныеОперации.СтатусОперации, 
		ДополнительныеПараметры.ПараметрыОперации, 
		Результат.СообщениеОбОшибке);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
	Если Результат.ДанныеОперации.СтатусОперации = "Выполнена" Тогда
		Если ДополнительныеПараметры.ПараметрыОперации.Свойство("УстройствоПечати")
			И ДополнительныеПараметры.ПараметрыОперации.Свойство("ПакетДокументов") 
			И (ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыОперации.УстройствоПечати) 
			ИЛИ ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыОперации.ПакетДокументов)) Тогда
			НачатьПодключениеУстройстваПечатиДополнительныхДокументов(РезультатВыполнения, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытиеСмены(РезультатВыполнения, ДополнительныеПараметры)
	
	РезультатВыполненияОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения, Неопределено, ДополнительныеПараметры.ИдентификаторУстройства);
	
	Если РезультатВыполнения Тогда
		
		ПараметрыПодключения = Новый Структура("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
		ДанныеОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойОперации();
		Если ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПередОткрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации) Тогда
			
			РезультатВыполненияОперации.Вставить("СтатусСмены"   , 2);
			РезультатВыполненияОперации.Вставить("КассоваяСмена" , ДанныеОперации.КассоваяСмена);
			РезультатВыполненияОперации.Результат = Истина;
			
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПослеОткрытияКассовойСмены(ПараметрыПодключения, РезультатВыполненияОперации);
			
		Иначе
			
			РезультатВыполненияОперации.ОписаниеОшибки = ДанныеОперации.ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		
		РезультатВыполненияОперации.Вставить("Результат"              , Ложь);
		РезультатВыполненияОперации.Вставить("ОписаниеОшибки"         , НСтр("ru='Сервис облачных касс недоступен. Невозможно открыть смену.'"));
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполненияОперации);
	
КонецПроцедуры

Процедура ЗакрытиеСмены(РезультатВыполнения, ДополнительныеПараметры)
	
	РезультатВыполненияОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(РезультатВыполнения, Неопределено, ДополнительныеПараметры.ИдентификаторУстройства);
	
	ПараметрыПодключения = Новый Структура("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
	ДанныеОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойОперации();
	Если ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПередЗакрытиемКассовойСмены(ПараметрыПодключения, ДанныеОперации) Тогда
		
		РезультатВыполненияОперации.Вставить("СтатусСмены"   , 1);
		РезультатВыполненияОперации.Вставить("КассоваяСмена" , ДанныеОперации.КассоваяСмена);
		РезультатВыполненияОперации.Результат = Истина;
		
		ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПослеЗакрытияКассовойСмены(ПараметрыПодключения, РезультатВыполненияОперации);
		
	Иначе
		
		РезультатВыполненияОперации.ОписаниеОшибки = ДанныеОперации.ТекстОшибки;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполненияОперации);
	
КонецПроцедуры

Процедура НачатьПодключениеУстройстваПечатиДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнениеКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РезультатВыполнения", РезультатВыполнения);
	ДополнительныеПараметры.Вставить("ПараметрыВыполнениеКоманды", ПараметрыВыполнениеКоманды);
	ДополнительныеПараметры.Вставить("УстройствКПодключению", 0);
	ДополнительныеПараметры.Вставить("ПодключеноУстройств", 0);
	ДополнительныеПараметры.Вставить("МассивУстройствДляПодключения", Новый Массив);
	
	ПечатающееУстройство = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ПараметрыВыполнениеКоманды.ПараметрыОперации.УстройствоПечати);
	Если ПечатающееУстройство = Неопределено Тогда
		ДополнительныеПараметры.МассивУстройствДляПодключения.Добавить(ПараметрыВыполнениеКоманды.ПараметрыОперации.УстройствоПечати);
		ДополнительныеПараметры.УстройствКПодключению = 1;
	Иначе
		ДополнительныеПараметры.ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов = ПечатающееУстройство;
		ДополнительныеПараметры.ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов = ПечатающееУстройство.ИдентификаторУстройства;
	КонецЕсли;
	
	Для Каждого СоответствиеУстройства Из ПараметрыВыполнениеКоманды.ПараметрыОперации.ПакетДокументов Цикл
		Если ДополнительныеПараметры.МассивУстройствДляПодключения.Найти(СоответствиеУстройства.Значение) = Неопределено 
			И МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(СоответствиеУстройства.Значение) = Неопределено Тогда
			
			ДополнительныеПараметры.МассивУстройствДляПодключения.Добавить(СоответствиеУстройства.Значение);
			ДополнительныеПараметры.УстройствКПодключению = ДополнительныеПараметры.УстройствКПодключению + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДополнительныеПараметры.УстройствКПодключению > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОписаниеОповещения, ПараметрыВыполнениеКоманды.ИдентификаторКлиента, ДополнительныеПараметры.МассивУстройствДляПодключения);
	Иначе
		НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыВыполнение.ПодключеноУстройств = ПараметрыВыполнение.ПодключеноУстройств + 1;
		Если ПараметрыВыполнение.ПодключеноУстройств < ПараметрыВыполнение.УстройствКПодключению Тогда
			Возврат;
		КонецЕсли;
		
		Если ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Свойство("КопияРаспечатана") И ПараметрыВыполнение.ПараметрыВыполнениеКоманды.КопияРаспечатана Тогда
			
			Команда = "PrintText";
			СоответствиеПечати = ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ДанныеОперации.ДополнительныеДокументы;
			ДокументПечати = СоответствиеПечати.Получить(0); 

			УстройствоПечати = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ДокументПечати.УстройствоПечати);
			ДанныеОперации = Новый Структура;
			ДанныеОперации.Вставить("ТестовыеЧеки", Новый Массив);
			ДанныеОперации.ТестовыеЧеки = ДокументПечати.ТекстПечати;

			ПараметрыВыполнение.Вставить("РезультатВыполнения", РезультатВыполнения);
			ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ДанныеОперации.ДополнительныеДокументы.Удалить(0);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение", ЭтотОбъект, ПараметрыВыполнение);
			УстройствоПечати.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, УстройствоПечати, Команда, ДанныеОперации);

		Иначе
			
			Команда = "CheckFiscalization";
			ПроцессорДанных = "ОборудованиеЧекопечатающиеУстройства";
			ПараметрыПодключенияСервер = МенеджерОборудованияКлиентСервер.ПараметрыПодключения(ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов);
			ДанныеОперации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеОперации(ПараметрыПодключенияСервер, ПроцессорДанных, Команда, ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПараметрыОперации);
			ПараметрыВыполнениеКоманды = ПараметрыВыполнение.ПараметрыВыполнениеКоманды;
			Если Не ЗначениеЗаполнено(ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов) Тогда
				ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов = РезультатВыполнения.ИдентификаторУстройства;
			КонецЕсли;
			// Результат выполнения исходной операции
			ПараметрыВыполнение.Вставить("РезультатВыполнения", РезультатВыполнения);
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение", ЭтотОбъект, ПараметрыВыполнение);
			ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов.ОбработчикДрайвера.НачатьВыполнениеКоманды(ОписаниеОповещения, ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПодключенноеПечатающееУстройствоДополнительныхДокументов, Команда, ДанныеОперации);
			
		КонецЕсли;
		
	Иначе
		// Отключение оборудования при завершение
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, Неопределено, ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ПечатающееУстройствоДополнительныхДокументов);
		// Завершение с ошибкой
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеКоманды_ПечатьДополнительныхДокументовЗавершение(РезультатВыполнения, ПараметрыВыполнение) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ДополнительныеДокументы = ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ДанныеОперации.ДополнительныеДокументы;
		Если ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Свойство("КопияРаспечатана") И ПараметрыВыполнение.ПараметрыВыполнениеКоманды.КопияРаспечатана И ДополнительныеДокументы.Количество() > 0 Тогда
			НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнение);
		ИначеЕсли НЕ ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Свойство("КопияРаспечатана") И ДополнительныеДокументы.Количество() > 0 Тогда
			ПараметрыВыполнение.ПараметрыВыполнениеКоманды.Вставить("КопияРаспечатана", Истина);
			НачатьВыполнениеКоманды_ПечатьДополнительныхДокументов(РезультатВыполнения, ПараметрыВыполнение);
		Иначе
			// Отключение оборудования.
			МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(Неопределено, Неопределено, ПараметрыВыполнение.МассивУстройствДляПодключения);
			// Завершение команды.
			ВыполнитьОбработкуОповещения(ПараметрыВыполнение.ПараметрыВыполнениеКоманды.ОповещениеПриЗавершении, ПараметрыВыполнение.РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает дату в формате UNIX-даты с добавлением смещения по часовому поясу.
//
// Параметры:
//  НеформатированнаяДата - Строка
//
// Возвращаемое значение:
//  Дата 
Функция ПреобразоватьДату(НеформатированнаяДата) Экспорт
	
	НеформатированнаяДата = СтрЗаменить(НеформатированнаяДата, "-", "");
	НеформатированнаяДата = СтрЗаменить(НеформатированнаяДата, ":", "");
	НеформатированнаяДата = СтрЗаменить(НеформатированнаяДата, "T", "");
	НеформатированнаяДата = Лев(СокрЛП(НеформатированнаяДата), СтрДлина(СокрЛП(НеформатированнаяДата)) - 5); 
	ФорматированнаяДата = Дата(НеформатированнаяДата);
	
	Возврат ФорматированнаяДата;
	
КонецФункции

#КонецОбласти
