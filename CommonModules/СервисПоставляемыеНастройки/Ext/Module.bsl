///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Поставляемые настройки".
// ОбщийМодуль.СервисПоставляемыеНастройки.
//
// Серверные процедуры запроса данных настроек:
//  - обработка новый версий настройек;
//  - загрузка и проверка файлов настроек.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ВызовОперацийСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /settings-updates/find-actual-versions

// Получает список актуальных версий поставляемых, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  Идентификаторы - Массив - содержит список идентификаторов поставляемых настроек,
//   для которых необходимо проверить наличие обновлений;
//  ДанныеАутентификации  - Структура - параметры аутентификации пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки
//    * Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    * СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    * ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    * ДанныеНастроек - ТаблицаЗначений - см. ОписаниеДанныхНастроек.
//
Функция АктуальныеВерсииПоставляемыхНастроек(
		Идентификаторы,
		ДанныеАутентификации) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("Ошибка", Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ДанныеНастроек", ПоставляемыеНастройкиСервер.ОписаниеДанныхНастроек());
	
	Порция = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		Порция.Добавить(Идентификатор);
		Если Порция.Количество() = 300 Тогда
			ВызватьОперациюВерсииПоставляемыхНастроек(
				Порция,
				ДанныеАутентификации,
				РезультатОперации);
			Порция.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если Порция.Количество() <> 0 Тогда
		ВызватьОперациюВерсииПоставляемыхНастроек(
			Порция,
			ДанныеАутентификации,
			РезультатОперации);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Вызывает операцию получения списка версий поставляемых настроек.
//
// Параметры:
//  Идентификаторы - Массив - содержит список идентификаторов поставляемых настроек,
//   для которых необходимо проверить наличие обновлений;
//  ДанныеАутентификации  - Структура - параметры аутентификации пользователя Интернет-поддержки;
//  РезультатОперации - Структура - содержит результат операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки$
//    * Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    * СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    * ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    * ДанныеНастроек - ТаблицаЗначений - см. ОписаниеДанныхНастроек.
//
Функция ВызватьОперациюВерсииПоставляемыхНастроек(
		Идентификаторы,
		ДанныеАутентификации,
		РезультатОперации)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации об актуальных версиях поставляемых настроек: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	URLОперации = URLОперацииСервиса(
		"/find-actual-versions",
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = find_actual_versions(
		Идентификаторы);
	
	Заголовки = НовыйЗаголовкиОперации(
		НастройкиСоединения.ДоменРасположенияСерверовИПП,
		ДанныеАутентификации);
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.Ошибка = Истина;
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить актуальные версии поставляемых настроек.
					|
					|%1
					|
					|Техническая информация об ошибке:
					|При получении информации об актуальных версиях поставляемых настроек сервис вернул ошибку.
					|URL: %2
					|Код ошибки: %3
					|Подробная информация:
					|%4'"),
				Строка(РезультатОперации.СообщениеОбОшибке),
				URLОперации,
				РезультатОтправки.КодОшибки,
				РезультатОтправки.ИнформацияОбОшибке);
		
		ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_find_actual_versions(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеНастроек,
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение актуальных версий поставляемых настроек: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /settings-updates/find-actual-versions.
//
Функция find_actual_versions(Идентификаторы)
	
	// {
	//  "suppliedSettingsIslIds": [
	//    "string"
	//  ]
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("suppliedSettingsIslIds");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого Идентификатор Из Идентификаторы Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /settings-updates/find-actual-versions.
//
Функция ПрочитатьДанные_find_actual_versions(
		ТелоJSON,
		ДанныеНастроек,
		Домен)
	
	// {
	//  "items": [
	//    {
	//      "islId": "string",
	//      "settingName": "string",
	//      "versionNumber": 0,
	//      "versionDescription": "string",
	//      "fileCheckSumMd5": "string",
	//      "fileDownloadUrl": "string"
	//    }
	//  ]
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ Сервиса поставляемых настроек:
			|%1'"),
		ТелоJSON);
	
	ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Для Каждого Элемент Из Результат.items Цикл
		Настройка = ДанныеНастроек.Добавить();
		Настройка.Идентификатор = Элемент.islId;
		Настройка.Версия = Элемент.versionNumber;
		Настройка.КонтрольнаяСумма = Элемент.fileCheckSumMd5;
		Настройка.Размер = Элемент.fileSize;
		Настройка.URL = Элемент.fileDownloadUrl;
	КонецЦикла;
	
	// Проверка формата ответа.
	ХостСервиса = ПоставляемыеНастройкиСервер.ХостСервисаПоставляемыхНастроек(
		Домен);
	Для Каждого Настройка Из ДанныеНастроек Цикл
		Если Не ЗначениеЗаполнено(Настройка.Идентификатор)
			Или Не ЗначениеЗаполнено(Настройка.Версия)
			Или Не ЗначениеЗаполнено(Настройка.URL) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат ответа Сервиса поставляемых настроек.'");
			ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
				СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Настройка.URL);
		Если Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6) <> Прав(НРег(СокрЛП(ХостСервиса)), 6) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный адрес файла обновления поставляемой настройки.'");
			ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файлов /public/box/supplied-settings?grant={token}

// Выполняет загрузку файлов по переданным ранее URL.
//
// Параметры:
//  ДанныеНастроек - ТаблицаЗначений - см. ПоставляемыеНастройкиСервер.ОписаниеДанныхНастроек;
//  ДанныеАутентификации  - Структура - параметры аутентификации пользователя Интернет-поддержки;
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки$
//    * Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    * СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    * ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция ЗагрузитьФайлыПоставляемыхНастроек(
		ДанныеНастроек,
		ДанныеАутентификации) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",          "");
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	Заголовки = НовыйЗаголовкиОперации(
		НастройкиСоединения.ДоменРасположенияСерверовИПП,
		ДанныеАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "GET");
	ПараметрыОтправки.Вставить("Таймаут",                  1280);
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("Заголовки",                Заголовки);
	
	Для Каждого Настройка Из ДанныеНастроек Цикл
		
		ПараметрыОтправки.Таймаут = ИнтернетПоддержкаПользователей.ТаймаутЗагрузкиФайла(
			Настройка.Размер);
		
		ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла настройки: %1'"),
				Настройка.URL),
			Ложь);
		
		ИнтернетПоддержкаПользователей.ПроверитьURL(Настройка.URL);
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			Настройка.URL,
			,
			,
			ПараметрыОтправки);
		
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки = ПоставляемыеНастройкиСервер.КодОшибкиФайлНеЗагружен();
			РезультатОперации.Ошибка = Истина;
			РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла поставляемой настройки %1: 
					|%2'"),
				Настройка.Идентификатор,
				РезультатОтправки.СообщениеОбОшибке);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл поставляемой настройки %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				Настройка.Идентификатор,
				РезультатОперации.СообщениеОбОшибке,
				РезультатОперации.КодОшибки,
				Настройка.URL,
				РезультатОтправки.ИнформацияОбОшибке);
			ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		КонтрольнаяСуммаФайл = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(РезультатОтправки.Содержимое);
		Если Настройка.КонтрольнаяСумма <> КонтрольнаяСуммаФайл Тогда
			РезультатОперации.КодОшибки = ПоставляемыеНастройкиСервер.КодОшибкиФайлНеЗагружен();
			РезультатОперации.Ошибка = Истина;
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла поставляемой настройки %1: 
					|%2'"),
				Настройка.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл поставляемой настройки %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				Настройка.Идентификатор);
			ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке);
			
			Возврат РезультатОперации;
		КонецЕсли;
		
		Настройка.АдресФайла = ПоместитьВоВременноеХранилище(
			РезультатОтправки.Содержимое);
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет по коду состояния тип ошибку сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 422 Тогда
		Возврат "НеизвестнаяНастройкаИлиПрограмма";
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат "НетДоступаКПрограмме";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат ПоставляемыеНастройкиСервер.КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат "ОшибкаПодключения";
	Иначе
		Возврат "НеизвестнаяОшибка";
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. процедуру
//   ПереопределитьКодОшибкиСервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки)
	
	Если КодОшибки = "НеизвестнаяНастройкаИлиПрограмма" Тогда
		Возврат НСтр("ru = 'Настройка или программа по идентификатору не обнаружены.'");
	ИначеЕсли КодОшибки = "НетДоступаКПрограмме" Тогда
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = 'Доступ к обновлению настройки невозможен, так как ваша программа не находится на <a href = ""https://portal.1c.ru/support/"">официальной поддержке</a>.'"));
	ИначеЕсли КодОшибки = ПоставляемыеНастройкиСервер.КодОшибкиНеверныйЛогинИлиПароль() Тогда
		Возврат НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность данных авторизации и повторите
			|попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису поставляемых настроке. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом поставляемых настроек.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ в сеть интернет по причине:
			|- компьютер не подключен к интернету;
			|- неполадки у интернет-провайдера;
			|- подключение к интернету блокирует межсетевой экран, 
			|  антивирусная программа или другое программное обеспечение.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
КонецФункции

// Формирует заголовки вызова операции.
//
// Параметры:
//  Домен - Число - значение домена;
//  ДанныеАутентификации  - Структура - параметры аутентификации пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//   Соответствие - заголовки запроса.
//
Функция НовыйЗаголовкиОперации(
		Домен,
		ДанныеАутентификации)
	
	Если Домен = 0 Тогда
		ПредставлениеДомена = "ru";
	Иначе
		ПредставлениеДомена = "eu";
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить(
		"X-Domain-Zone",
		ПредставлениеДомена);
	Заголовки.Вставить(
		"X-Program-Nick",
		ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы());
	Заголовки.Вставить(
		"Authorization",
		ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль));
	
	Возврат Заголовки;
	
КонецФункции

// Определяет URL для вызова сервиса поставляемых настроек.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция, Домен)
	
	Возврат "https://"
		+ ПоставляемыеНастройкиСервер.ХостСервисаПоставляемыхНастроек(Домен)
		+ "/program-1c/public/isl/authorized/settings-updates"
		+ Операция;
	
КонецФункции

#КонецОбласти

#КонецОбласти
