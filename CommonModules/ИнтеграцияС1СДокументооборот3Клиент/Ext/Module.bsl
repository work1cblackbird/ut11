////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3Клиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДинамическийСписок

// Обработчик события нажатия на кнопку динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   Команда - КомандаФормы - команда формы, имя которой соответствует нажатой кнопке.
//   ТекущаяСтраница - Число - номер текущей страницы.
//   ВсегоСтраниц - Число - максимальное количество страниц.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, куда будет передан номер выбранной страницы.
//
Процедура ВыбратьСтраницуДинамическогоСписка(Форма, Команда, ТекущаяСтраница, ВсегоСтраниц, ОписаниеОповещения) Экспорт
	
	КнопкаСтраницы = Форма.Элементы[Команда.Имя];
	
	Если КнопкаСтраницы.Заголовок = "..." Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
		Параметры.Вставить("ВсегоСтраниц", ВсегоСтраниц);
		Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		Оповещение = Новый ОписаниеОповещения("ВводСтраницыВручнуюЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВводЧисла(
			Оповещение,
			ТекущаяСтраница,
			НСтр("ru= 'Страница'"),
			СтрДлина(Формат(ВсегоСтраниц, "ЧГ=0")),
			0);
	Иначе
		НоваяСтраница = Число(КнопкаСтраницы.Заголовок);
		Если НоваяСтраница <> ТекущаяСтраница Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, НоваяСтраница);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок кнопки упорядочивания в контекстном меню динамического списка.
//
// Параметры:
//   ЭлементСписок - ТаблицаФормы - элемент формы, где находится динамический список.
//   ПолеДляСортировки - Строка - имя реквизита динамического списка, по которому выполняется сортировка.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   ВозможныеПоляДляСортировки - Соответствие из КлючИЗначение:
//     * Ключ - Строка - имя реквизита динамического списка на форме, по которому может выполняться сортировка.
//     * Значение - Строка - имя реквизита XDTO объекта, по которому нужно выполнить сортировку.
//
// Возвращаемое значение:
//   Строка
//
Функция ЗаголовокКомандыУпорядочивания(ЭлементСписок, ПолеДляСортировки, НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки) Экспорт
	
	Если НаправлениеСортировкиПоля Тогда
		Возврат НСтр("ru = 'Упорядочить по полю ""Создана"" по возрастанию'");
	Иначе
		Возврат НСтр("ru = 'Упорядочить по полю ""Создана"" по убыванию'");
	КонецЕсли;
	
КонецФункции

// Меняет поле и направление сортировки, обновляет шапку динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ЭлементСписок - ТаблицаФормы - элемент формы, где находится динамический список.
//   ЭлементКомандаУпорядочить - КнопкаФормы - кнопка упорядочивания в контекстном меню динамического списка.
//   ПолеДляСортировки - Строка - имя реквизита динамического списка, по которому выполняется сортировка.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   ВозможныеПоляДляСортировки - Соответствие из КлючИЗначение:
//     * Ключ - Строка - имя реквизита динамического списка на форме, по которому может выполняться сортировка.
//     * Значение - Строка - имя реквизита XDTO объекта, по которому нужно выполнить сортировку.
//   КлючФормы - Строка - идентификатор формы для сохранения настроек сортировки в хранилище.
//
Процедура КомандаУпорядочить(Форма, ЭлементСписок, ЭлементКомандаУпорядочить,
		ПолеДляСортировки, НаправлениеСортировкиПоля, ВозможныеПоляДляСортировки, КлючФормы) Экспорт
	
	Если ПолеДляСортировки <> "" Тогда
		ПолеЭлемент = Форма.Элементы[ПолеДляСортировки];
#Если ВебКлиент Тогда
		ПолеЭлемент.Заголовок = СтрШаблон("%1 %2", ПолеЭлемент.Подсказка, ДополнениеЗаголовка(ПолеЭлемент));
		ПолеЭлемент.Заголовок = СокрЛП(ПолеЭлемент.Заголовок);
#Иначе
		Если ПолеЭлемент.КартинкаШапки.Вид = ВидКартинки.Пустая Тогда
			ПолеЭлемент.Заголовок = СтрШаблон("%1 %2", ПолеЭлемент.Подсказка, ДополнениеЗаголовка(ПолеЭлемент));
			ПолеЭлемент.Заголовок = СокрЛП(ПолеЭлемент.Заголовок);
		Иначе
			ПолеЭлемент.Заголовок = "";
			ПолеЭлемент.Ширина = 1;
			ПолеЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
	Если ПолеДляСортировки = ЭлементСписок.ТекущийЭлемент.Имя Тогда
		НаправлениеСортировкиПоля = Не НаправлениеСортировкиПоля;
	Иначе
		НаправлениеСортировкиПоля = Ложь;
	КонецЕсли;
	
	ПолеДляСортировки = ЭлементСписок.ТекущийЭлемент.Имя;
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "НаправлениеСортировкиПоля");
	Элемент.Вставить("Значение", НаправлениеСортировкиПоля);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", КлючФормы);
	Элемент.Вставить("Настройка", "ПолеДляСортировки");
	Элемент.Вставить("Значение", ПолеДляСортировки);
	МассивСтруктур.Добавить(Элемент);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	ОбновитьСортировкуВЗаголовкеЯчейки(
		Форма,
		ЭлементСписок,
		ЭлементКомандаУпорядочить,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки);
	
КонецПроцедуры

// Добавляет в шапку динамического списка символ направления сортировки для соответствующего поля.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ЭлементСписок - ТаблицаФормы - элемент формы, где находится динамический список.
//   ЭлементКомандаУпорядочить - КнопкаФормы - кнопка упорядочивания в контекстном меню динамического списка.
//   ПолеДляСортировки - Строка - имя реквизита динамического списка, по которому выполняется сортировка.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   ВозможныеПоляДляСортировки - Соответствие из КлючИЗначение:
//     * Ключ - Строка - имя реквизита динамического списка на форме, по которому может выполняться сортировка.
//     * Значение - Строка - имя реквизита XDTO объекта, по которому нужно выполнить сортировку.
//
Процедура ОбновитьСортировкуВЗаголовкеЯчейки(Форма, ЭлементСписок, ЭлементКомандаУпорядочить,
		ПолеДляСортировки, НаправлениеСортировкиПоля, ВозможныеПоляДляСортировки) Экспорт
	
	Если НаправлениеСортировкиПоля = Ложь Тогда
		ЗаголовокНаправление = СимволВозрастание();
	Иначе
		ЗаголовокНаправление = СимволУбывание();
	КонецЕсли;
	
	ПолеЭлемент = Форма.Элементы[ПолеДляСортировки];
	
#Если ВебКлиент Тогда
	ПолеЭлемент.Заголовок = СтрШаблон("%1 %2 %3",
		ПолеЭлемент.Подсказка,
		ЗаголовокНаправление,
		ДополнениеЗаголовка(ПолеЭлемент));
	ПолеЭлемент.Заголовок = СокрЛП(ПолеЭлемент.Заголовок);
#Иначе
	Если ПолеЭлемент.КартинкаШапки.Вид = ВидКартинки.Пустая Тогда
		ПолеЭлемент.Заголовок = СтрШаблон("%1 %2 %3",
			ПолеЭлемент.Подсказка,
			ЗаголовокНаправление,
			ДополнениеЗаголовка(ПолеЭлемент));
		ПолеЭлемент.Заголовок = СокрЛП(ПолеЭлемент.Заголовок);
	Иначе
		ПолеЭлемент.Заголовок = ЗаголовокНаправление;
		ПолеЭлемент.Ширина = 2;
		ПолеЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
#КонецЕсли
	
	ЭлементКомандаУпорядочить.Заголовок = ЗаголовокКомандыУпорядочивания(
		ЭлементСписок,
		ПолеДляСортировки,
		НаправлениеСортировкиПоля,
		ВозможныеПоляДляСортировки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ФормаВладелец[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора значения реквизита в таблице из списка объектов документооборота.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ТекущиеДанные - ДанныеФормыЭлементКоллекции
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСпискаВТаблице(ТипОбъектаВыбора, Реквизит, ТекущиеДанные, ФормаВладелец,
		Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаВТаблицеЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ТекущиеДанные[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Начинает процесс выбора объекта ДО указанного типа, возвращая результат вызовом оповещения.
//
// Параметры:
//   ОписаниеОповещения - ОписаниеОповещения - вызывается после завершения выбора с передачей структуры,
//      описывающей выбранный объект.
//   ТипОбъектаВыбора - Строка - тип выбираемого объекта (XDTO, например, "DMCorrespondent").
//   Отбор - Структура - накладываемый отбор.
//   ВыбранноеЗначение - Строка - идентификатор ранее выбранного значения.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызван выбор.
//
Процедура ВыбратьЗначениеПоТипуОбъекта(ОписаниеОповещения, ТипОбъектаВыбора, Отбор = Неопределено,
		ВыбранноеЗначение = "", ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("Заголовок", ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(
		ТипОбъектаВыбора, "ЗаголовокФормыВыбора"));
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ВыбранноеЗначение);
	
	Если ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ЭтоДокументДО3(ТипОбъектаВыбора)
			Или ТипОбъектаВыбора = "DMCorrespondent"
			Или ТипОбъектаВыбора = "DMMeeting" Тогда
		ПараметрыФормы.Вставить("ИскатьСразу", Ложь);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборОбъектаПоиском",
			ПараметрыФормы,
			ФормаВладелец,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
			ПараметрыФормы,
			ФормаВладелец,
			Новый УникальныйИдентификатор,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора сотрудника в разрезе подразделений, и помещает выбранного сотрудника в реквизит формы.
//
// Параметры:
//   Реквизит - Строка - имя реквизита формы, в который будет помещен выбранный сотрудник.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора сотрудника.
//   ЗаполнятьПредставление - Булево - признак необходимости заполнения представления сотрудника.
//
Процедура ВыбратьСотрудникаИзДереваПодразделений(Реквизит, ФормаВладелец, ЗаполнятьПредставление = Ложь) Экспорт
	
	ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборСотрудникаСПодразделениями";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Реквизит", Реквизит);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	ПараметрыОповещения.Вставить("ЗаполнятьПредставление", ЗаполнятьПредставление);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьСотрудникаИзДереваПодразделенийЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент,
		ПараметрыОповещения);
	
	ОткрытьФорму(
		ИмяФормы,,
		ФормаВладелец,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет требуемое интерактивное действие, и сообщает о том была ли вызвана интерактивная обработка или нет.
//
// Параметры:
//   РезультатДействия - см. ИнтеграцияС1СДокументооборот3.РезультатВыполненияКомандыПоОбъекту
//   ТипОперации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей
//   ПовторноеДействие - ОписаниеОповещения - метод, который будет вызван по завершении интерактивной обработки.
//
// Возвращаемое значение:
//   Булево
//
Функция ВызванаИнтерактивнаяОбработка(РезультатДействия, ТипОперации, ПовторноеДействие) Экспорт
	
	ВызванаИнтерактивнаяОбработка = Ложь;
	
	ЗаполнитьЗначенияСвойств(
		ПовторноеДействие.ДополнительныеПараметры.ТребуемоеИнтерактивноеДействие,
		РезультатДействия.ТребуемоеИнтерактивноеДействие,,
		"Контекст");
	ПараметрыОповещения = Новый Структура("ТипОперации, ПовторноеДействие", ТипОперации, ПовторноеДействие);
	
	Если РезультатДействия.ТребуемоеИнтерактивноеДействие.ВернутьсяКЗадаче Тогда
		
		// Ничего делать не требуется.
		ВызванаИнтерактивнаяОбработка = Истина;
		
	ИначеЕсли РезультатДействия.ТребуемоеИнтерактивноеДействие.ВыбратьИсполнителяЗадачи Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеВыбораИсполнителя",
			ЭтотОбъект,
			ПараметрыОповещения);
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборФактическогоИсполнителяЗадачи",
			РезультатДействия,,,,,
			ОписаниеОповещения);
		ВызванаИнтерактивнаяОбработка = Истина;
		
	ИначеЕсли РезультатДействия.ТребуемоеИнтерактивноеДействие.ЗадатьПроизвольныйВопрос Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеОтветаНаВопрос",
			ЭтотОбъект,
			ПараметрыОповещения);
		ПоказатьВопрос(
			ОписаниеОповещения,
			РезультатДействия.ТребуемоеИнтерактивноеДействие.Контекст.Текст,
			РезультатДействия.ТребуемоеИнтерактивноеДействие.Контекст.Кнопки,,
			РезультатДействия.ТребуемоеИнтерактивноеДействие.Контекст.КнопкаПоУмолчанию,
			РезультатДействия.ТребуемоеИнтерактивноеДействие.Контекст.Заголовок);
		ВызванаИнтерактивнаяОбработка = Истина;
		
	ИначеЕсли РезультатДействия.ТребуемоеИнтерактивноеДействие.ИзменитьПараметрыПроцесса Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеИзмененияПроцесса",
			ЭтотОбъект,
			ПараметрыОповещения);
		ПараметрыФормы = Новый Структура("РежимДиалога", Истина);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			РезультатДействия.ТребуемоеИнтерактивноеДействие.Контекст.ДействиеТип,
			РезультатДействия.ТребуемоеИнтерактивноеДействие.Контекст.ДействиеID,,
			ПараметрыФормы,
			ОписаниеОповещения);
		ВызванаИнтерактивнаяОбработка = Истина;
		
	КонецЕсли;
	
	Возврат ВызванаИнтерактивнаяОбработка;
	
КонецФункции

// Продолжает выполнение подключаемой команды интеграции после проверки подключения.
//
// Параметры:
//   Команда - КомандаФормы - вызванная команда.
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Источник - ДанныеФормыСтруктура, ТаблицаФормы - данные, уточняющие параметр команды, содержат ссылку на объект ИС.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(Команда, Форма, Источник) Экспорт
	
	Если Команда.Имя = "ИнтеграцияС1СДокументооборотом_Файлы" Тогда
		Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			ОбъектИС = Источник; // ДокументОбъект
			Ссылка = ОбъектИС.Ссылка;
		Иначе
			Если Источник.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Ссылка = Неопределено;
			Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
				Ссылка = Источник.ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФормуПрисоединенныеФайлы(
			Ссылка,
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПараметрыОткрытияСпискаФайлов(Форма));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствие форм БИД объектам документооборота.
//
// Параметры:
//   СоответствиеФорм - Соответствие из КлючИЗначение - неявно возвращаемое значение, соответствие форм.
//
Процедура ЗаполнитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("DMTaskAction", "Задача");
	СоответствиеФорм.Вставить("DMActionApproval", "ДействиеСогласования");
	СоответствиеФорм.Вставить("DMActionPerformance", "ДействиеИсполнения");
	СоответствиеФорм.Вставить("DMActionExamination", "ДействиеОзнакомления");
	СоответствиеФорм.Вставить("DMActionSigning", "ДействиеПодписания");
	СоответствиеФорм.Вставить("DMActionRegistration", "ДействиеРегистрации");
	СоответствиеФорм.Вставить("DMActionConfirmation", "ДействиеУтверждения");
	
КонецПроцедуры

// Меняет относительный срок (дни, часы, минуты), добавляя переданную длительность.
// Если заполнены минуты, то меняются только минуты.
// Если минут нет и заполнены часы, то меняются только часы.
// Если заполнены только дни, то меняются только они.
//
// Параметры:
//   Дни - Число - длительность, дней.
//   Часы - Число - длительность, часов.
//   Минуты - Число - длительность, минут.
//   Длительность - Число - добавляемая длительность. Для уменьшения срока используется "-1", для увеличения "1".
//
Процедура ИзменитьОтносительныйСрок(Дни, Часы, Минуты, Длительность) Экспорт
	
	Если ЗначениеЗаполнено(Минуты) Тогда
		Минуты = Минуты + Длительность;
	ИначеЕсли ЗначениеЗаполнено(Часы) Тогда
		Часы = Часы + Длительность;
	Иначе
		Дни = Дни + Длительность;
	КонецЕсли;
	
	Если Минуты > 59 Тогда
		Минуты = Минуты - 60;
		Часы = Часы + 1;
	КонецЕсли;
	
	Если Часы > 23 Тогда
		Часы = Часы - 23;
		Дни = Дни + 1;
	КонецЕсли;
	
	Если Дни > 999 Тогда
		Дни = 999;
	КонецЕсли;
	
КонецПроцедуры

// Формирует ключ строки дерева формы.
//
// Параметры:
//   ТипДерева - см. ИнтеграцияС1СДокументооборот3Клиент.ТипДерева
//   СтрокаДерева - СтрокаДереваЗначений
//
// Возвращаемое значение:
//   Строка
//
Функция КлючСтрокиДерева(ТипДерева, СтрокаДерева) Экспорт
	
	Если ТипДерева.ЭтоДеревоОбработки Тогда
		Возврат КлючСтрокиДереваОбработки(СтрокаДерева);
		
	ИначеЕсли ТипДерева.ЭтоДеревоПриложений Тогда
		Возврат КлючСтрокиДереваПриложений(СтрокаДерева);
		
	КонецЕсли;
	
КонецФункции

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   ОбъектИС - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС,
//     на основании которого создается объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//   ИспользоватьПриоритетныеПравила - Булево - нужно ли задавать вопрос пользователю, в случае если
//     для объекта ИС настроено несколько различных правил интеграции, или нужно использовать наиболее
//     приоритетное по ключевым реквизитам правило.
//   ЗадаватьВопросОПереносеФайлов - Булево - признак того требуется ли задавать вопрос о переносе файлов из ИС в ДО
//      после добавления новой связи.
//
Процедура НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения = Неопределено,
		ИспользоватьПриоритетныеПравила = Ложь, ЗадаватьВопросОПереносеФайлов = Истина) Экспорт
	
	Если ОбъектИС.Пустая() Тогда
		ТекстОшибки = НСтр("ru = 'Связанный объект интегрированной системы не задан или не записан.'");
		ПоказатьПредупреждение(,ТекстОшибки,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		Возврат
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ЗадаватьВопросОПереносеФайлов", ЗадаватьВопросОПереносеФайлов);
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	ПодходящиеПравилаИнтеграции = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграции(
		СписокОбъектовИС,
		ИспользоватьПриоритетныеПравила,
		Истина);
	Правила = ПодходящиеПравилаИнтеграции[ОбъектИС];
	
	Если Правила.Количество() = 1 Тогда
		
		НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правила[0], Параметры);
		
	ИначеЕсли Правила.Количество() > 1 Тогда
		
		// Несколько правил, требуется выбор пользователя.
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила",
			ИнтеграцияС1СДокументооборот3Клиент,
			Параметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для объекта %1 нет подходящих правил интеграции.'"),
			ОбъектИС);
		ПоказатьПредупреждение(,ТекстОшибки,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   Результат - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//   Параметры - Структура:
//     * ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     * ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     * ЗадаватьВопросОПереносеФайлов - Булево - признак того требуется ли задавать вопрос о переносе файлов из ИС в ДО
//         после добавления новой связи.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Знач Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3") Тогда
		Правило = Результат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Правило = Результат.Ссылка;
		
	КонецЕсли;
	
	ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьОбъектДОПоПравилу(
		Параметры.ОбъектИС,
		Правило);
	
	Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // Сообщение об ошибке.
		
		ПоказатьПредупреждение(,ОбъектДОИлиСообщение,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		
	Иначе // Структура с описанием созданного объекта результата.
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		Если Параметры.ОписаниеОповещения <> Неопределено
				И ТипЗнч(Параметры.ОписаниеОповещения.Модуль) = Тип("ФормаКлиентскогоПриложения") Тогда
			УникальныйИдентификатор = Параметры.ОписаниеОповещения.Модуль.УникальныйИдентификатор;
		КонецЕсли;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_ДобавлениеСвязи(
			ОбъектДОИлиСообщение.ID,
			ОбъектДОИлиСообщение.type,
			Параметры.ОбъектИС,
			Параметры.ЗадаватьВопросОПереносеФайлов,
			УникальныйИдентификатор);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОбъектДОИлиСообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает интегрированную базу ДО и переходит по указанной ссылке.
//
// Параметры:
//   СсылкаНаОбъектДО - Строка - навигационная ссылка по которой требуется перейти в базе ДО.
//     Если параметр не задан, то ссылка будет браться из параметра сеанса ИнтеграцияС1СДокументооборотОбъектДО.
//
Процедура ОткрытьОбъектДО(Знач СсылкаНаОбъектДО = Неопределено) Экспорт
	
	Если СсылкаНаОбъектДО = Неопределено Тогда
		СсылкаНаОбъектДО = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьСсылкуНаОбъектДО();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
		Возврат;
	КонецЕсли;
	
	АдресКоманды = СтрШаблон("%1#%2",
		ИнтеграцияС1СДокументооборот3ВызовСервера.НавигационнаяСсылкаБазыДО(Истина),
		СсылкаНаОбъектДО);
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресКоманды);
	
КонецПроцедуры

// Разворачивает дерево на форме.
//
// Параметры:
//   ТипДерева - см. ИнтеграцияС1СДокументооборот3Клиент.ТипДерева
//   СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - данные дерева на форме.
//   ТаблицаФормы - ТаблицаФормы - элемент формы, куда выводится дерево.
//   ТекущееСостояниеДерева - см. ИнтеграцияС1СДокументооборот3Клиент.ТекущееСостояниеДерева
//
Процедура РазвернутьДерево(ТипДерева, СтрокиДерева, ТаблицаФормы, ТекущееСостояниеДерева = Неопределено) Экспорт
	
	Если ТекущееСостояниеДерева = Неопределено Тогда
		
		Если ТипДерева.ЭтоДеревоОбработки Тогда
			РазвернутьДеревоОбработки(СтрокиДерева, ТаблицаФормы);
			
		ИначеЕсли ТипДерева.ЭтоДеревоПриложений Тогда
			РазвернутьДеревоПриложений(СтрокиДерева, ТаблицаФормы);
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрокаДерева = Неопределено;
		РазвернутьСтрокиДерева(
			ТипДерева,
			СтрокиДерева,
			ТаблицаФормы,
			ТекущееСостояниеДерева.СостояниеРазвернут,
			ТекущееСостояниеДерева.КлючТекущейСтрокиДерева,
			ТекущаяСтрокаДерева);
		
		Если ТекущаяСтрокаДерева <> Неопределено Тогда
			ТаблицаФормы.ТекущаяСтрока = ТекущаяСтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текущее состояние дерева на форме.
//
// Параметры:
//   ТипДерева - см. ИнтеграцияС1СДокументооборот3Клиент.ТипДерева
//   СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - данные дерева на форме.
//   ТаблицаФормы - ТаблицаФормы - элемент формы, куда выводится дерево.
//
// Возвращаемое значение:
//   Структура:
//     * СостояниеРазвернут - Соответствие из КлючИЗначение:
//       ** Ключ - Строка
//       ** Значение - Булево
//     * КлючТекущейСтрокиДерева - Строка
//
Функция ТекущееСостояниеДерева(ТипДерева, СтрокиДерева, ТаблицаФормы) Экспорт
	
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущееСостояниеДерева = Новый Структура("СостояниеРазвернут, КлючТекущейСтрокиДерева");
	
	ТекущееСостояниеДерева.СостояниеРазвернут = Новый Соответствие;
	ЗаполнитьСостояниеСтрокДерева(
		ТипДерева,
		СтрокиДерева,
		ТаблицаФормы,
		ТекущееСостояниеДерева.СостояниеРазвернут);
	
	Если ТаблицаФормы.ТекущиеДанные = Неопределено Тогда
		СтрокаДерева = СтрокиДерева[0];
	Иначе
		СтрокаДерева = ТаблицаФормы.ТекущиеДанные;
	КонецЕсли;
	ТекущееСостояниеДерева.КлючТекущейСтрокиДерева = КлючСтрокиДерева(ТипДерева, СтрокаДерева);
	
	Возврат ТекущееСостояниеДерева;
	
КонецФункции

// Конструктор структуры, описывающей тип дерева.
//
// Возвращаемое значение:
//   Структура:
//     * ЭтоДеревоПриложений - Булево
//     * ЭтоДеревоОбработки - Булево
//
Функция ТипДерева() Экспорт
	
	ТипДерева = Новый Структура;
	ТипДерева.Вставить("ЭтоДеревоПриложений", Ложь);
	ТипДерева.Вставить("ЭтоДеревоОбработки", Ложь);
	
	Возврат ТипДерева;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКоманды

// Обработчик общей команды ИнтеграцияС1СДокументооборотНачатьОбработку
//
// Параметры:
//   МассивСсылок - Произвольный - в параметр передается значение от источника, в котором реализована команда.
//     Может содержать как единичное значение, так и массив значений.
//   ПараметрыВыполнения - ПараметрыВыполненияКоманды - в обработчике команды можно изменить значение свойств
//     параметра.
//
Процедура ОбработкаКомандыНачатьОбработку(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() > 0 Тогда
		ПараметрКоманды = МассивСсылок[0];
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьОбработкуПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

// Задает пользователю вопрос о переносе файлов из ИС в ДО, и инициирует перенос в случае утвердительного ответа.
//
// Параметры:
//   ПараметрыПереносаФайлов - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыПереносаФайловВДО
//   ОповещениеВыполнитьПеренос - ОписаниеОповещения - процедура, которую требуется выполнить в случае
//     утвердительного ответа пользователя.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ЗадатьВопросОПереносеФайловВДО(ПараметрыПереносаФайлов, ОповещениеВыполнитьПеренос = Неопределено,
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru='У %1 ""%2"" есть присоединенные файлы, хранящиеся на стороне %3.
			|
			|Перенести файлы данного %1 из %3 в 1С:Документооборот?'"),
		ПараметрыПереносаФайлов.ПредставлениеТипаВладельца,
		Строка(ПараметрыПереносаФайлов.ВладелецИС),
		ПараметрыПереносаФайлов.СокращенноеНаименованиеКонфигурации);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да);
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	ПараметрыПредупреждения = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыПредупреждения.КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
	ПараметрыПредупреждения.Заголовок = НСтр("ru='Перенос файлов в 1С:Документооборот'");
	ПараметрыПредупреждения.Картинка = БиблиотекаКартинок.Информация32;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриОпределенииНеобходимостиПредлагатьБольшеНеЗадаватьЭтотВопрос(
		ПараметрыПредупреждения.ПредлагатьБольшеНеЗадаватьЭтотВопрос,
		ТекстВопроса,
		ПараметрыПереносаФайлов.ТипСправочникаСФайлами,
		"ЗадаватьВопросОПереносеФайловВДО");
	Если ПараметрыПредупреждения.ПредлагатьБольшеНеЗадаватьЭтотВопрос Тогда
		ПараметрыПредупреждения.ТекстФлажка =
			СтрШаблон(
				НСтр("ru = 'Больше не показывать (перенос можно будет выполнить вручную в форме списка файлов командой ""Добавить - Файлы %1"")'"),
				ПараметрыПереносаФайлов.ПредставлениеТипаВладельца);
	КонецЕсли;
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПараметрыПереносаФайлов", ПараметрыПереносаФайлов);
	ПараметрыОповещения.Вставить("ОповещениеВыполнитьПеренос", ОповещениеВыполнитьПеренос);
	ПараметрыОповещения.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадатьВопросОПереносеФайловВДОПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещения,
		ТекстВопроса,
		Кнопки,
		ПараметрыПредупреждения);
	
КонецПроцедуры

// Продолжение процедуры ЗадатьВопросОПереносеФайловВДО.
//
// Параметры:
//   Результат - Структура:
//     * БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//     * Значение - КодВозвратаДиалога - результат выбора пользователя: значение, связанное с нажатой кнопкой.
//   ПараметрыОповещения - Структура:
//     * ПараметрыПереносаФайлов - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыПереносаФайловВДО
//     * ОповещениеВыполнитьПеренос - ОписаниеОповещения - процедура, которую требуется выполнить в случае
//         утвердительного ответа пользователя.
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ЗадатьВопросОПереносеФайловВДОПродолжение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.БольшеНеЗадаватьЭтотВопрос Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			ПараметрыОповещения.ПараметрыПереносаФайлов.ТипСправочникаСФайлами,
			"ЗадаватьВопросОПереносеФайловВДО",
			Ложь);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		Если ПараметрыОповещения.ОповещениеВыполнитьПеренос = Неопределено Тогда
			ПеренестиФайлыИСвДО(
				ПараметрыОповещения.ПараметрыПереносаФайлов.ПрисоединенныеФайлыВИС,
				ПараметрыОповещения.ПараметрыПереносаФайлов.ВладелецID,
				ПараметрыОповещения.ПараметрыПереносаФайлов.ВладелецТип,
				ПараметрыОповещения.ПараметрыПереносаФайлов.ВладелецИС,,
				ПараметрыОповещения.УникальныйИдентификаторФормы);
		Иначе
			Если ЗначениеЗаполнено(ПараметрыОповещения.ПараметрыПереносаФайлов.ВладелецID) Тогда // Связанный объект уже известен.
				ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОповещениеВыполнитьПеренос, Неопределено);
			Иначе // Связанный объект следует найти или создать.
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
					ПараметрыОповещения.ПараметрыПереносаФайлов.ВладелецИС,
					ПараметрыОповещения.ОповещениеВыполнитьПеренос,,,
					Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет роли файлов.
//
// Параметры:
//   СписокФайлов - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//   ВыбраннаяРольID - Строка - идентификатор новой роли файлов.
//   ВладелецФайлов - Строка - идентификатор владельца файлов.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ЗаменитьРольФайлов(СписокФайлов, ВыбраннаяРольID, ВладелецФайлов,
		УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	Для Каждого Строка Из СписокФайлов Цикл
		Файл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			Строка.Наименование,
			Строка.ID,
			Строка.Тип);
		ДанныеФайлов.Добавить(Файл);
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборот3ВызовСервера.ЗаменитьРольФайлов(ДанныеФайлов, ВыбраннаяРольID);
	
	Для Каждого Строка Из СписокФайлов Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменена роль файла ""%1""'"), Строка.Наименование);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ИнформироватьОбИзмененииФайла(
			"ИзменениеРолиФайла",
			Строка.Наименование,
			Строка.ID,
			ВладелецФайлов,
			ТекстСообщения,,
			УникальныйИдентификаторФормы);
	КонецЦикла;
	
КонецПроцедуры

// Копирует присоединенные файлы объекта, хранящиеся на стороне ИС в связанный объект на стороне ДО.
//
// Параметры:
//   ПрисоединенныеФайлыВИС - СписокЗначений из ЛюбаяСсылка - список присоединенных файлов в ИС.
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип XDTO владельца файла в Документообороте.
//   ВладелецИС - ЛюбаяСсылка - ссылка на объект-владелец файла в ИС.
//   РольФайлаID - Строка - роль файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПеренестиФайлыИСвДО(ПрисоединенныеФайлыВИС, ВладелецID, ВладелецТип, ВладелецИС,
		РольФайлаID = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	СозданныеФайлы = ИнтеграцияС1СДокументооборот3ВызовСервера.ПеренестиФайлыИСвДО(
		ПрисоединенныеФайлыВИС,
		ВладелецID,
		ВладелецТип,
		ВладелецИС,
		РольФайлаID);
	
	Для Каждого Файл Из СозданныеФайлы Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Создан файл ""%1""'"), Файл.Наименование);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ИнформироватьОбИзмененииФайла(
			"СозданиеФайла",
			Файл.Наименование,
			Файл.ID,
			ВладелецID,
			ТекстСообщения,,
			УникальныйИдентификаторФормы);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификатор текущей роли файлов.
//
// Параметры:
//   ДеревоФайлов - ДанныеФормыДерево - дерево файлов.
//   ТекущаяСтрока - Число - идентификатор текущей строки.
//
// Возвращаемое значение:
//   Строка - текущая роль файлов.
//   Неопределено - никакая роль не найдена.
//
Функция ТекущаяРольФайла(ДеревоФайлов, ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ДеревоФайлов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Тип = "DMFileRole" И ЗначениеЗаполнено(ТекущиеДанные.ID) Тогда
				// Указатель стоит на конкретной роли.
				Возврат ТекущиеДанные.ID;
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.РольФайлаID) Тогда
				// Указатель стоит на файле с заданной ролью.
				Возврат ТекущиеДанные.РольФайлаID;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Текущая строка не задана или указатель стоит на пустой роли.
	// Вернем первую обязательную роль.
	Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
		Если Строка.РольОбязательная И Строка.Тип = "DMFileRole" И ЗначениеЗаполнено(Строка.ID) Тогда
			Возврат Строка.ID;
		КонецЕсли;
	КонецЦикла;
	// Вернем первую любую роль.
	Для Каждого Строка Из ДеревоФайлов.ПолучитьЭлементы() Цикл
		Если Строка.Тип = "DMFileRole" И ЗначениеЗаполнено(Строка.ID) Тогда
			Возврат Строка.ID;
		КонецЕсли;
	КонецЦикла;
	
	// Ничего не нашли.
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Возвращает данные по задаче, заполненные из данных формы задачи или формы списка задач.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ID - Строка - идентификатор задачи Документооборота.
//   Тип - Строка - XDTO-тип задачи Документооборота.
//   Заголовок - Строка - заголовок задачи.
//   ПараметрыОперации - Структура:
//     * РезультатВариантаНомер - Строка - имя реквизита формы, содержащего выбранный пользователем вариант
//         выполнения действия задачи.
//     * Флаг - Строка - имя флага, принимает значения перечисления DMObjectFlag (http://www.1c.ru/dm).
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
Функция ДанныеПоЗадаче(Форма, ID, Тип, Заголовок, ПараметрыОперации = Неопределено) Экспорт
	
	РезультатВариантаНомер = "";
	Флаг = "";
	Если ПараметрыОперации <> Неопределено Тогда
		ПараметрыОперации.Свойство("РезультатВариантаНомер", РезультатВариантаНомер);
		ПараметрыОперации.Свойство("Флаг", Флаг);
	КонецЕсли;
	
	ДанныеПоЗадаче = ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче(ID, Тип, Заголовок);
	
	Если ЗначениеЗаполнено(РезультатВариантаНомер) Тогда
		ДанныеПоЗадаче.РезультатДействия.ID = Форма[РезультатВариантаНомер + "ID"];
		ДанныеПоЗадаче.РезультатДействия.Тип = Форма[РезультатВариантаНомер + "Тип"];
		ДанныеПоЗадаче.РезультатДействия.Наименование = Форма[РезультатВариантаНомер];
		ДанныеПоЗадаче.РезультатДействияТекстом = Форма.РезультатДействияТекстом;
		ДанныеПоЗадаче.ВерсияДанныхДействияЗадачи = Форма.ВерсияДанныхДействияЗадачи;
	КонецЕсли;
	
	ДанныеПоЗадаче.Флаг = Флаг;
	
	Возврат ДанныеПоЗадаче;
	
КонецФункции

// Вызывается перед началом интерактивного изменения строки дерева приложений.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   Отказ - Булево - признак отказа от редактирования строки.
//
Процедура ДеревоПриложенийЗадачиПередНачаломИзменения(СтрокаДереваПриложений, Отказ) Экспорт
	
	Отказ = Истина;
	ОткрытьКарточкуПриложенияЗадачи(СтрокаДереваПриложений);
	
КонецПроцедуры

// Открывает карточку приложения.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//
Процедура ОткрытьКарточкуПриложенияЗадачи(СтрокаДереваПриложений) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДереваПриложений.Ссылка) Тогда
		ПоказатьЗначение(, СтрокаДереваПриложений.Ссылка);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваПриложений.НавигационнаяСсылка)
			И (ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ЭтоДокументДО3(СтрокаДереваПриложений.ПриложениеТип)
				Или СтрокаДереваПриложений.ПриложениеТип = "DMCorrespondent"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMMeeting") Тогда
		ОткрытьОбъектДО(СтрокаДереваПриложений.НавигационнаяСсылка);
		
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			СтрокаДереваПриложений.ПриложениеТип,
			СтрокаДереваПриложений.ПриложениеID,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает приложение на просмотр.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ОткрытьПриложениеЗадачиНаПросмотр(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДереваПриложений.Ссылка) Тогда
		ПоказатьЗначение(, СтрокаДереваПриложений.Ссылка);
		
	ИначеЕсли СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			УникальныйИдентификаторФормы);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДереваПриложений.НавигационнаяСсылка)
			И (ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ЭтоДокументДО3(СтрокаДереваПриложений.ПриложениеТип)
				Или СтрокаДереваПриложений.ПриложениеТип = "DMCorrespondent"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMMeeting"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMIncomingElectronicDocument"
				Или СтрокаДереваПриложений.ПриложениеТип = "DMOutgoingElectronicDocument") Тогда
		ОткрытьОбъектДО(СтрокаДереваПриложений.НавигационнаяСсылка);
		
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьОбъект(
			СтрокаДереваПриложений.ПриложениеТип,
			СтрокаДереваПриложений.ПриложениеID,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Команды с этим обработчиком создаются программно согласно предметам активной задачи.
//
// Параметры:
//   Команда - КомандаФормы - команда создания на основании.
//   ОсновнойПредметID - Строка - идентификатор основного объекта задачи.
//   ОсновнойПредметТип - Строка - тип основного объекта задачи.
//
Процедура Подключаемый_СоздатьСвязанныйОбъект(Команда, ОсновнойПредметID, ОсновнойПредметТип) Экспорт
	
	ИмяКоманды = Команда.Имя;
	УИДПравила = Сред(ИмяКоманды, 9);
	УИДПравила = СтрЗаменить(УИДПравила, "_", "-");
	УИДПравила = Новый УникальныйИдентификатор(УИДПравила);
	
	ДанныеЗаполнения =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеЗаполненияИнтегрируемогоОбъекта(
			УИДПравила,
			ОсновнойПредметТип,
			ОсновнойПредметID);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьИнтегрированныйОбъектИзДанныхЗаполнения(
		ДанныеЗаполнения);
	
КонецПроцедуры

// Добавляет к приложению картинку из буфера.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Асинх Процедура ПриложенияЗадачиФайлыВставитьКартинкуИзБуфера(Знач СтрокаДереваПриложений,
		Знач УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.РольПредмета = "filledin"
			И Не ЗначениеЗаполнено(СтрокаДереваПриложений.ПриложениеТип)
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПредставлениеПриложения) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Добавить приложение задачи можно только на стороне 1С:Документооборот.'"));
		Возврат;
		
	Иначе
		
		СостояниеРазрешаетДобавлениеФайла = Истина;
		СостояниеРазрешаетДобавлениеСканКопии = Истина;
		СтрокаДокумента = ИнтеграцияС1СДокументооборот3КлиентСервер.СтрокаДокументаВДеревеПриложений(
			СтрокаДереваПриложений);
		Если СтрокаДокумента <> Неопределено Тогда
			СостояниеРазрешаетДобавлениеФайла = СтрокаДокумента.СостояниеРазрешаетДобавлениеФайла;
			СостояниеРазрешаетДобавлениеСканКопии = СтрокаДокумента.СостояниеРазрешаетДобавлениеСканКопии;
		КонецЕсли;
		
		НеобходимоДобавитьСканКопию =
			Ждать ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НеобходимоДобавитьСканКопиюАсинх(
				СостояниеРазрешаетДобавлениеСканКопии,
				СостояниеРазрешаетДобавлениеФайла);
		
		Если НеобходимоДобавитьСканКопию = КодВозвратаДиалога.Да Тогда
			ЯвляетсяСканКопией = СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлИзБуфера(
				ПараметрыНачалаСозданияФайла(СтрокаДереваПриложений, УникальныйИдентификаторФормы, ЯвляетсяСканКопией));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к приложению файл с диска.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Асинх Процедура ПриложенияЗадачиФайлыДобавить(Знач СтрокаДереваПриложений, Знач УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.РольПредмета = "filledin"
			И Не ЗначениеЗаполнено(СтрокаДереваПриложений.ПриложениеТип)
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПредставлениеПриложения) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Добавить приложение задачи можно только на стороне 1С:Документооборот.'"));
		Возврат;
		
	Иначе
		
		СостояниеРазрешаетДобавлениеФайла = Истина;
		СостояниеРазрешаетДобавлениеСканКопии = Истина;
		СтрокаДокумента = ИнтеграцияС1СДокументооборот3КлиентСервер.СтрокаДокументаВДеревеПриложений(
			СтрокаДереваПриложений);
		Если СтрокаДокумента <> Неопределено Тогда
			СостояниеРазрешаетДобавлениеФайла = СтрокаДокумента.СостояниеРазрешаетДобавлениеФайла;
			СостояниеРазрешаетДобавлениеСканКопии = СтрокаДокумента.СостояниеРазрешаетДобавлениеСканКопии;
		КонецЕсли;
		
		НеобходимоДобавитьСканКопию =
			Ждать ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НеобходимоДобавитьСканКопиюАсинх(
				СостояниеРазрешаетДобавлениеСканКопии,
				СостояниеРазрешаетДобавлениеФайла);
		
		Если НеобходимоДобавитьСканКопию = КодВозвратаДиалога.Да Тогда
			ЯвляетсяСканКопией = СостояниеРазрешаетДобавлениеСканКопии И Не СостояниеРазрешаетДобавлениеФайла;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СоздатьФайлСДиска(
				ПараметрыНачалаСозданияФайла(СтрокаДереваПриложений, УникальныйИдентификаторФормы, ЯвляетсяСканКопией));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заканчивает редактирование файла, помещая его в ДО и снимая захват, если необходимо.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыЗакончитьРедактирование(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗакончитьРедактированиеФайла(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			УникальныйИдентификаторФормы,,
			РольФайлаИПриложение.Приложение.ID);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет файл ДО из файла на диске.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыОбновитьИзФайлаНаДиске(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбновитьИзФайлаНаДиске(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			СтрокаДереваПриложений.ДатаМодификации,
			УникальныйИдентификаторФормы,,
			РольФайлаИПриложение.Приложение.ID);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет редактирование ранее захваченного файла.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыОсвободить(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОтменитьРедактированиеФайла(
			СтрокаДереваПриложений.ПриложениеID,,
			РольФайлаИПриложение.Приложение.ID,
			УникальныйИдентификаторФормы);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл для редактирования.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыРедактировать(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОткрытьФайл(
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.Расширение,
			УникальныйИдентификаторФормы,
			Ложь,,
			РольФайлаИПриложение.Приложение.ID);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет файлы из дерева приложений на диск, в указанный пользователем каталог.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//
Процедура ПриложенияЗадачиФайлыСохранитьКак(СтрокаДереваПриложений, Форма) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеФайлы = Новый Массив;
	
	Если Форма.Элементы.ДеревоПриложений.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ВыбраннаяСтрока Из Форма.Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
			ДанныеСтроки = Форма.Элементы.ДеревоПриложений.ДанныеСтроки(ВыбраннаяСтрока);
			Если ДанныеСтроки.ПриложениеТип = "DMFile" Тогда
				ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
					ДанныеСтроки.Приложение,
					ДанныеСтроки.ПриложениеID,
					"DMFile",
					ДанныеСтроки.Расширение,
					ДанныеСтроки.РольФайлаID);
				ВыделенныеФайлы.Добавить(ДанныеФайла);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
			ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
				СтрокаДереваПриложений.Приложение,
				СтрокаДереваПриложений.ПриложениеID,
				"DMFile",
				СтрокаДереваПриложений.Расширение,
				СтрокаДереваПриложений.РольФайлаID);
			ВыделенныеФайлы.Добавить(ДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыделенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	Для Каждого ВыделенныйФайл Из ВыделенныеФайлы Цикл
		Если Параметры.Свойство("ТекущийФайл") Тогда
			Параметры.ОставшиесяФайлы.Добавить(ВыделенныйФайл);
		Иначе
			Параметры.Вставить("ТекущийФайл", ВыделенныйФайл);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
	Параметры.Вставить("ОписаниеОповещения", Неопределено);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.СохранитьФайлыКакНачало(Параметры);
	
КонецПроцедуры

// Удаляет приложение.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ПриложенияЗадачиФайлыУдалить(СтрокаДереваПриложений, УникальныйИдентификаторФормы) Экспорт
	
	Если СтрокаДереваПриложений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДереваПриложений.РольПредмета = "filledin"
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПриложениеТип)
			И ЗначениеЗаполнено(СтрокаДереваПриложений.ПредставлениеПриложения) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Удалить приложение задачи можно только на стороне 1С:Документооборот.'"));
		Возврат;
		
	ИначеЕсли СтрокаДереваПриложений.ПриложениеТип = "DMFile" Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
		ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			СтрокаДереваПриложений.Приложение,
			СтрокаДереваПриложений.ПриложениеID,
			СтрокаДереваПриложений.ПриложениеТип,
			СтрокаДереваПриложений.Расширение,
			СтрокаДереваПриложений.РольФайлаID);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПометитьНаУдалениеСнятьПометкуФайлов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийФайл),
			СтрокаДереваПриложений.ПометкаУдаления,,
			РольФайлаИПриложение.Приложение.ID,
			УникальныйИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость и доступность команд в дереве приложений.
//
// Параметры:
//   ТекущаяСтрока - Число - номер текущей строки дерева приложений.
//   КлючСтрокиДереваПриложений - Строка - ключ строки для предотвращения зацикливания.
//   ЗадачаID - Строка - идентификатор текущей задачи.
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ЭтоТонкийWindowsКлиент - Булево - требуется для установки доступности команды вставки из буфера обмена.
//
Процедура УстановитьДоступностьКомандПриложенийЗадачи(ТекущаяСтрока, КлючСтрокиДереваПриложений, ЗадачаID,
		Форма, ЭтоТонкийWindowsКлиент) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКлюч = СтрШаблон("%1_%2", ЗадачаID, ТекущаяСтрока);
	Если НовыйКлюч = КлючСтрокиДереваПриложений Тогда
		Возврат;
	КонецЕсли;
	КлючСтрокиДереваПриложений = НовыйКлюч;
	
	ЭтоФайл = Ложь;
	ЭтоЗадача = Ложь;
	ЭтоЗаполняемоеПриложение = Ложь;
	ЭтоДругоеПриложение = Ложь;
	ЭтоРольФайла = Ложь;
	ЭтоФайлПриложения = Ложь;
	
	ДоступноИнтерактивноеИзменениеФайлов = Ложь;
	
	РедактироватьДоступность = Истина;
	ЗакончитьРедактированиеДоступность = Истина;
	ЗаполняемоеПриложениеУказано = Ложь;
	
	СостояниеРазрешаетДобавлениеФайла = Истина;
	СостояниеРазрешаетДобавлениеСканКопии = Истина;
	СостояниеРазрешаетРедактированиеФайла = Истина;
	СостояниеРазрешаетУдалениеФайла = Истина;
	
	ТекущиеДанные = Форма.ДеревоПриложений.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтрокаДокумента = ИнтеграцияС1СДокументооборот3КлиентСервер.СтрокаДокументаВДеревеПриложений(ТекущиеДанные);
		Если СтрокаДокумента <> Неопределено Тогда
			СостояниеРазрешаетДобавлениеФайла = СтрокаДокумента.СостояниеРазрешаетДобавлениеФайла;
			СостояниеРазрешаетДобавлениеСканКопии = СтрокаДокумента.СостояниеРазрешаетДобавлениеСканКопии;
			СостояниеРазрешаетРедактированиеФайла = СтрокаДокумента.СостояниеРазрешаетРедактированиеФайла;
			СостояниеРазрешаетУдалениеФайла = СтрокаДокумента.СостояниеРазрешаетУдалениеФайла;
		КонецЕсли;
		
		Если ТекущиеДанные.ПриложениеТип = "DMFile" Тогда
			
			РедактируетсяДругимПользователем =
				ТекущиеДанные.Редактируется
				И Не ТекущиеДанные.РедактируетсяТекущимПользователем;
			Если Не СостояниеРазрешаетРедактированиеФайла
					Или РедактируетсяДругимПользователем
					Или ТекущиеДанные.ПодписанЭП
					Или ТекущиеДанные.Зашифрован Тогда
				РедактироватьДоступность = Ложь;
			КонецЕсли;
			
			Если Не СостояниеРазрешаетРедактированиеФайла
					Или Не ТекущиеДанные.РедактируетсяТекущимПользователем
					Или ТекущиеДанные.ПодписанЭП
					Или ТекущиеДанные.Зашифрован Тогда
				ЗакончитьРедактированиеДоступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			
		КонецЕсли;
		
		ЭтоФайл = (ТекущиеДанные.ПриложениеТип = "DMFile");
		ЭтоДругоеПриложение = ЗначениеЗаполнено(ТекущиеДанные.ПриложениеТип)
			И (ТекущиеДанные.ПриложениеТип <> "DMFile");
		ЭтоЗадача = (ТекущиеДанные.ТипСтроки = "task");
		ЭтоЗаполняемоеПриложение = (ТекущиеДанные.РольПредмета = "filledin");
		ЭтоРольФайла = (ТекущиеДанные.ТипСтроки = "filerole");
		ЭтоФайлПриложения = (ТекущиеДанные.ТипСтроки = "file");
		
		ЗаполняемоеПриложениеУказано = (ТекущиеДанные.РольПредмета = "filledin")
			И ЗначениеЗаполнено(ТекущиеДанные.ПриложениеТип);
		
		Если ТекущиеДанные.ТипСтроки = "file" Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			Если ДанныеРодителя <> Неопределено И ДанныеРодителя.ТипСтроки = "filerole" Тогда
				ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
			КонецЕсли;
			
			ДоступноИнтерактивноеИзменениеФайлов = ДанныеРодителя <> Неопределено
				И ЗначениеЗаполнено(ДанныеРодителя.ПриложениеТип)
				И ДоступноИнтерактивноеИзменениеФайлов(ДанныеРодителя.ПриложениеТип);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "filerole" Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ДанныеРодителя.Приложение)
				И ДоступноИнтерактивноеИзменениеФайлов(ДанныеРодителя.ПриложениеТип);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = "application" Тогда
			
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
				И ДоступноИнтерактивноеИзменениеФайлов(ТекущиеДанные.ПриложениеТип);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Видимость.
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Видимость =
		ЭтоТонкийWindowsКлиент
		И ((ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов));
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение Или ЭтоЗадача;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Видимость = ЭтоФайл;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюКопироватьВБуферОбмена.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение;
	
	// Доступность.
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Доступность = ЭтоФайл И Не ТекущиеДанные.Зашифрован;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = ЭтоФайл И Не ТекущиеДанные.Зашифрован;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Доступность = ЭтоФайл И Не ТекущиеДанные.Зашифрован;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность =
		РедактироватьДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность =
		ЗакончитьРедактированиеДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Доступность =
		ЗакончитьРедактированиеДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = РедактироватьДоступность;
	
	Если ЭтоЗаполняемоеПриложение Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность = Не ЗаполняемоеПриложениеУказано
			И (СостояниеРазрешаетДобавлениеФайла Или СостояниеРазрешаетДобавлениеСканКопии);
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность =
			ЗаполняемоеПриложениеУказано;
	Иначе
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность = СостояниеРазрешаетДобавлениеФайла
			Или СостояниеРазрешаетДобавлениеСканКопии;
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность = Не ТекущиеДанные.Редактируется
			И СостояниеРазрешаетУдалениеФайла;
	КонецЕсли;
	
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Доступность =
		СостояниеРазрешаетДобавлениеФайла Или СостояниеРазрешаетДобавлениеСканКопии;
	
КонецПроцедуры

#КонецОбласти

#Область Обработка

// Стартует обработку связанного объекта ДО. При передаче в качестве предмета ссылки на объект ИС
// создает связанный объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка
//           - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * ВнешнийОбъект - ЛюбаяСсылка
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//   ИспользоватьПриоритетныеПравила - Булево - нужно ли задавать вопрос пользователю при создании нового объекта ДО
//     по правилам интеграции, в случае если для объекта ИС настроено несколько различных правил интеграции,
//     или нужно использовать наиболее приоритетное по ключевым реквизитам правило.
//
Процедура НачатьОбработку(Предмет = Неопределено, ОписаниеОповещения = Неопределено,
		ИспользоватьПриоритетныеПравила = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"НачатьОбработкуПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборот3Клиент,
		Параметры);
	
	Если ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.НачатьПоискСвязанногоОбъектаДО(
			Предмет,
			ОписаниеОповещенияПродолжение,,
			ИспользоватьПриоритетныеПравила);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Неопределено
//             - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   Параметры - Структура:
//     * ГлавнаяЗадача- Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//     * Предмет - ЛюбаяСсылка,
//               - Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//         ** ВнешнийОбъект - ЛюбаяСсылка
//
Процедура НачатьОбработкуПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры.Предмет = Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ИнтеграцияС1СДокументооборот3ВызовСервера.НачатьОбработку(Параметры.Предмет, ТекстОшибки) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Обработка'"),,
			СтрШаблон(НСтр("ru = 'Обработка ""%1"" успешно запущена'"), Параметры.Предмет.name),
			БиблиотекаКартинок.Информация32,
			СтатусОповещенияПользователя.Важное);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
		
	Иначе
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстОшибки);
		МассивСтрок = Новый Массив;
		Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			Если НомерСтроки > 1 Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
			КонецЕсли;
			ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			ПозицияСсылки = СтрНайти(ТекущаяСтрока, "e1cib/data/");
			Если ПозицияСсылки > 0 Тогда
				ИнтеграцияС1СДокументооборот3ВызовСервера.УстановитьСсылкуНаОбъектДО(
					Сред(ТекущаяСтрока, ПозицияСсылки, СтрДлина(ТекущаяСтрока)));
				МассивСтрок.Добавить(СтроковыеФункцииКлиент.ФорматированнаяСтрока(
					СтрШаблон(
						"<a href = ""e1cib/command/Обработка.ИнтеграцияС1СДокументооборот3.Команда.ОткрытьОбъектДО"">%1</a>",
						НСтр("ru = 'Ссылка на объект в ДО'"))));
			Иначе
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекущаяСтрока));
			КонецЕсли;
		КонецЦикла;
		Инфо = Новый ФорматированнаяСтрока(МассивСтрок);
		
		ПоказатьПредупреждение(,Инфо,,
			НСтр("ru = 'Не удалось начать обработку'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Действия

// Добавляет новый этап действия в таблицу Участники.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ФункцияЭтапа - Строка - функция участников этапа.
//
Процедура ДобавитьЭтапДействия(Форма, ФункцияЭтапа) Экспорт
	
	Элементы = Форма.Элементы;
	Участники = Форма.Участники;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ЭтоДочернийУчастник") И ТекущиеДанные.ЭтоДочернийУчастник Тогда
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если РодительЭлемента <> Неопределено Тогда
			ТекущиеДанные = РодительЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента <> Неопределено Тогда
		ТекущиеДанные = РодительЭлемента;
	КонецЕсли;
	
	СтрокиЭтапов = Участники.ПолучитьЭлементы();
	
	ИндексНовогоЭлемента = СтрокиЭтапов.Индекс(ТекущиеДанные);
	Если ТекущиеДанные.Функция = ФункцияЭтапа Тогда
		ИндексНовогоЭлемента = ИндексНовогоЭлемента + 1;
	КонецЕсли;
	
	СтрокаЭтап = СтрокиЭтапов.Вставить(ИндексНовогоЭлемента);
	СтрокаЭтап.НаименованиеЭтапа = НСтр("ru = 'Новый этап'");
	СтрокаЭтап.ЭтоЭтап = Истина;
	СтрокаЭтап.Порядок = ТекущиеДанные.Порядок;
	СтрокаЭтап.Функция = ФункцияЭтапа;
	СтрокаЭтап.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СтрокаЭтап.РазрешеноДобавлять = Форма.МожноТолькоДобавлятьУчастников Или Форма.МожноДобавлятьУчастников;
	ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(СтрокиЭтапов);
	Форма.ЕстьЭтапы = Истина;
	Элементы.Участники.ТекущаяСтрока = СтрокаЭтап.ПолучитьИдентификатор();
	
	Оповестить("ОбновитьПредставленияВДеревеУчастников",, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Заполняет доступность перемещения этапов и участников в карточке действия согласования или подписания.
//
// Параметры:
//   СтрокиДерева - ДанныеФормыДерево
//                - ДанныеФормыКоллекцияЭлементовДерева - дерево этапов или участников.
//   ЗаполнениеВсегоДерева - Булево - Истина, если заполнять все дерево.
//
Процедура ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(СтрокиДерева, ЗаполнениеВсегоДерева = Ложь) Экспорт
	
	Если ЗаполнениеВсегоДерева И ТипЗнч(СтрокиДерева) = Тип("ДанныеФормыДерево") Тогда
		
		СтрокиЭтапы = СтрокиДерева.ПолучитьЭлементы();
		
		Для Каждого СтрокаЭтап Из СтрокиЭтапы Цикл
			
			Если СтрокаЭтап.Недоступно Тогда
				СтрокаЭтап.МожноПеремещатьВниз = Ложь;
				СтрокаЭтап.МожноПеремещатьВверх = Ложь;
				Продолжить;
			КонецЕсли;
			
			ИндексТекущейСтроки = СтрокиЭтапы.Индекс(СтрокаЭтап);
			Если ИндексТекущейСтроки = 0
					Или ЗначениеЗаполнено(СтрокаЭтап.Состояние)
					Или ЗначениеЗаполнено(СтрокиЭтапы[ИндексТекущейСтроки - 1].Состояние) Тогда
				СтрокаЭтап.МожноПеремещатьВверх = Ложь;
			Иначе
				СтрокаЭтап.МожноПеремещатьВверх = Истина;
			КонецЕсли;
			
			Если ИндексТекущейСтроки = СтрокиЭтапы.Количество() - 1
					Или ЗначениеЗаполнено(СтрокаЭтап.Состояние)
					Или ЗначениеЗаполнено(СтрокиЭтапы[ИндексТекущейСтроки + 1].Состояние)
					Или ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(
						СтрокиЭтапы[ИндексТекущейСтроки + 1].Функция) Тогда
				СтрокаЭтап.МожноПеремещатьВниз = Ложь;
			Иначе
				СтрокаЭтап.МожноПеремещатьВниз = Истина;
			КонецЕсли;
			
			СтрокиУчастники = СтрокаЭтап.ПолучитьЭлементы();
			
			Для Каждого СтрокаУчастник Из СтрокиУчастники Цикл
				
				ИндексТекущейСтроки = СтрокиУчастники.Индекс(СтрокаУчастник);
				
				Если ИндексТекущейСтроки = 0
						Или ЗначениеЗаполнено(СтрокаУчастник.Состояние)
						Или СтрокаЭтап.Порядок = "OneByOne"
							И ЗначениеЗаполнено(СтрокиУчастники[ИндексТекущейСтроки - 1].Состояние) Тогда
					СтрокаУчастник.МожноПеремещатьВверх = Ложь;
				Иначе
					СтрокаУчастник.МожноПеремещатьВверх = Истина;
				КонецЕсли;
				
				Если ИндексТекущейСтроки = СтрокиУчастники.Количество() - 1
						Или ЗначениеЗаполнено(СтрокаУчастник.Состояние)
						Или СтрокаЭтап.Порядок = "OneByOne"
							И ЗначениеЗаполнено(СтрокиУчастники[ИндексТекущейСтроки + 1].Состояние) Тогда
					СтрокаУчастник.МожноПеремещатьВниз = Ложь;
				Иначе
					СтрокаУчастник.МожноПеремещатьВниз = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Если СтрокиДерева.Количество() > 0 Тогда
			Если СтрокиДерева[0].ЭтоЭтап Тогда
				
				Для Индекс = 0 По СтрокиДерева.Количество() - 1 Цикл
					
					Если СтрокиДерева[Индекс].Недоступно Тогда
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Ложь;
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Индекс = 0
							Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
							Или ЗначениеЗаполнено(СтрокиДерева[Индекс - 1].Состояние) Тогда
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Истина;
					КонецЕсли;
					
					Если Индекс = СтрокиДерева.Количество() - 1
							Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
							Или ЗначениеЗаполнено(СтрокиДерева[Индекс + 1].Состояние)
							Или ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(
								СтрокиДерева[Индекс + 1].Функция) Тогда
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Истина;
					КонецЕсли;
				
				КонецЦикла;
				
			Иначе
				
				Этап = СтрокиДерева[0].ПолучитьРодителя();
				
				Для Индекс = 0 По СтрокиДерева.Количество() - 1 Цикл
					
					Если Индекс = 0
							Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
							Или Этап.Порядок = "OneByOne"
								И ЗначениеЗаполнено(СтрокиДерева[Индекс - 1].Состояние) Тогда
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВверх = Истина;
					КонецЕсли;
					
					Если Индекс = СтрокиДерева.Количество() - 1
							Или ЗначениеЗаполнено(СтрокиДерева[Индекс].Состояние)
							Или Этап.Порядок = "OneByOne"
								И ЗначениеЗаполнено(СтрокиДерева[Индекс + 1].Состояние) Тогда
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Ложь;
					Иначе
						СтрокиДерева[Индекс].МожноПеремещатьВниз = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды Защищенный в формах настроек действий и самих действий.
// Устанавливает/снимает отметку защищенности в форме для выделенного участника или этапа.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ИзменитьПризнакУчастникаДействияЗащищенный(Форма) Экспорт
	
	ПредупреждатьПриЗащитеУчастника = ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ПредупреждатьПриЗащитеУчастника();
	ПоказыватьПредупреждение = Ложь;
	ОбщаяЗащищенность = Неопределено;
	
	Для Каждого ИндексСтроки Из Форма.Элементы.Участники.ВыделенныеСтроки Цикл
		ТекущиеДанные = Форма.Участники.НайтиПоИдентификатору(ИндексСтроки);
		
		Если Не ДоступноИзменениеЗащищенностиУчастника(ТекущиеДанные, Форма.МожноИзменятьЗащищенныхУчастников) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные.Защищенный = Не ТекущиеДанные.Защищенный;
		
		Если ОбщаяЗащищенность = Неопределено Тогда
			ОбщаяЗащищенность = ТекущиеДанные.Защищенный;
		КонецЕсли;
		ОбщаяЗащищенность = ОбщаяЗащищенность И ТекущиеДанные.Защищенный;
		
		ПоказыватьПредупреждение = ПоказыватьПредупреждение Или ТекущиеДанные.Защищенный И ПредупреждатьПриЗащитеУчастника;
		
		Форма.Модифицированность = Истина;
	КонецЦикла;
	
	Если ПоказыватьПредупреждение Тогда
		ТекстПредупреждения =
			НСтр("ru = 'Защищенного участника действий нельзя удалить ни автоматически, ни вручную.'");
		ПараметрыПредупреждения = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыПредупреждения.Заголовок = НСтр("ru = 'Защита участника от удаления'");
		ПараметрыПредупреждения.Картинка = БиблиотекаКартинок.Информация32;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриОпределенииНеобходимостиПредлагатьБольшеНеЗадаватьЭтотВопрос(
			ПараметрыПредупреждения.ПредлагатьБольшеНеЗадаватьЭтотВопрос,
			ТекстПредупреждения,
			"НастройкиБольшеНеПоказывать",
			"ПоказыватьПредупреждениеПриУстановкеЗащитыУчастникаДействия");
		Если ПараметрыПредупреждения.ПредлагатьБольшеНеЗадаватьЭтотВопрос Тогда
			ПараметрыПредупреждения.ТекстФлажка = НСтр("ru = 'Больше не показывать'");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПредупрежденияОЗащищенностиУчастникаДействия", ЭтотОбъект);
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
			ОписаниеОповещения,
			ТекстПредупреждения,
			РежимДиалогаВопрос.ОК,
			ПараметрыПредупреждения);
	КонецЕсли;
	
	Форма.Элементы.Защищенный.Пометка = ?(ОбщаяЗащищенность <> Неопределено, ОбщаяЗащищенность, Ложь);
	Форма.УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

// Обработчик нажатия на поле ОписаниеОтложенногоНачалаВыполнения.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОписаниеОтложенногоНачалаВыполненияДействияНажатие(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Форма.ДоступнаНастройкаОтложенногоНачалаВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Отложенное начало выполнения'"));
	ПараметрыФормы.Вставить("Дни", Форма.ОтложенноеНачалоВыполненияДни);
	ПараметрыФормы.Вставить("Часы", Форма.ОтложенноеНачалоВыполненияЧасы);
	ПараметрыФормы.Вставить("ОтложеннаяДата", Форма.ОтложенноеВыполнениеДата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОписаниеОтложенногоНачалаВыполненияДействияНажатиеПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.НастройкаОтложенногоНачалаВыполнения",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ОписаниеОтложенногоНачалаВыполненияДействияНажатие.
//
// Параметры:
//   Результат - Структура:
//     * Дни - Число
//     * Часы - Число
//     * ОтложеннаяДата - Дата
//   ПараметрыОповещения - Структура:
//     * Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ОписаниеОтложенногоНачалаВыполненияДействияНажатиеПродолжение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПараметрыОповещения.Форма;
	
	Форма.ОтложенноеНачалоВыполненияДни = Результат.Дни;
	Форма.ОтложенноеНачалоВыполненияЧасы = Результат.Часы;
	Форма.ОтложенноеВыполнениеДата = Результат.ОтложеннаяДата;
	
	ИнтеграцияС1СДокументооборот3КлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик команды ПереместитьВверх в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ОчиститьЗадержкуДействия(Форма) Экспорт
	
	Если Не Форма.ДоступнаНастройкаОтложенногоНачалаВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ОтложенноеНачалоВыполненияДни = 0;
	Форма.ОтложенноеНачалоВыполненияЧасы = 0;
	Форма.ОтложенноеВыполнениеДата = Дата(1, 1, 1);
	
	ИнтеграцияС1СДокументооборот3КлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Конструктор структуры, описывающей параметры добавления участников действия.
//
// Возвращаемое значение:
//   Структура:
//     * СЭтапами - Булево - у действия есть этапы.
//     * ВозможныДочерниеИсполнители - Булево - действие поддерживает дочерних исполнителей.
//     * ПоПунктам - Булево - действие исполняется по пунктам.
//     * МожноДобавлятьЭтапы - Булево - можно добавлять этапы действия.
//     * МожноТолькоДобавлятьУчастников - Булево - можно только добавлять участников действия.
//     * ФункцияУчастника - Строка - функция участника действия.
//
Функция ПараметрыДобавленияУчастниковДействия() Экспорт
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("СЭтапами", Ложь);
	ПараметрыДобавления.Вставить("ВозможныДочерниеИсполнители", Ложь);
	ПараметрыДобавления.Вставить("ПоПунктам", Ложь);
	ПараметрыДобавления.Вставить("МожноДобавлятьЭтапы", Ложь);
	ПараметрыДобавления.Вставить("МожноТолькоДобавлятьУчастников", Ложь);
	ПараметрыДобавления.Вставить("ФункцияУчастника", "");
	
	Возврат ПараметрыДобавления;
	
КонецФункции

// Обработчик команды ПереместитьВверх в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   МожноМенятьПорядокЭтапов - Булево - действие позволяет изменять порядок этапов.
//   ПоПунктам - Булево - действие исполняется по пунктам.
//
Процедура ПереместитьУчастникаДействияВверх(Форма, МожноМенятьПорядокЭтапов = Истина, ПоПунктам = Ложь) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Если Не МожноМенятьПорядокЭтапов И Не ПоПунктам Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя менять порядок этапов.'"));
			Возврат;
		КонецЕсли;
		
		Этапы = Форма.Участники.ПолучитьЭлементы();
		ИндексТекущейСтроки = Этапы.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		Этапы.Сдвинуть(ИндексТекущейСтроки, -1);
		
		Если МожноМенятьПорядокЭтапов Тогда
			ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(Этапы);
		КонецЕсли;
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
		
		Если МожноМенятьПорядокЭтапов Тогда
			ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(УчастникиЭтапа);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ОбновитьПредставленияВДеревеУчастников",, Форма.УникальныйИдентификатор);
	УчастникиДействияПриАктивизацииСтроки(Форма);
	
КонецПроцедуры

// Обработчик команды ПереместитьВниз в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   МожноМенятьПорядокЭтапов - Булево - действие позволяет изменять порядок этапов.
//   ПоПунктам - Булево - действие исполняется по пунктам.
//
Процедура ПереместитьУчастникаДействияВниз(Форма, МожноМенятьПорядокЭтапов = Истина, ПоПунктам = Ложь) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Если Не МожноМенятьПорядокЭтапов И Не ПоПунктам Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя менять порядок этапов.'"));
			Возврат;
		КонецЕсли;
		
		Этапы = Форма.Участники.ПолучитьЭлементы();
		ИндексТекущейСтроки = Этапы.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки = Этапы.Количество() - 1
				Или ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(
					Этапы[ИндексТекущейСтроки + 1].Функция) Тогда
			Возврат;
		КонецЕсли;
		Этапы.Сдвинуть(ИндексТекущейСтроки, 1);
		
		Если МожноМенятьПорядокЭтапов Тогда
			ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(Этапы);
		КонецЕсли;
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = УчастникиЭтапа.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
		
		Если МожноМенятьПорядокЭтапов Тогда
			ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(УчастникиЭтапа);
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ОбновитьПредставленияВДеревеУчастников",, Форма.УникальныйИдентификатор);
	УчастникиДействияПриАктивизацииСтроки(Форма);
	
КонецПроцедуры

// Обработчик ПриИзменении в поле Порядок в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПорядокВыполненияДействияУчастникамиПриИзменении(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Порядок = "AllAtOnce" Тогда
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьЭлементы();
		Если УчастникиЭтапа.Количество() < 2 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаИсполнителя = УчастникиЭтапа[0];
		ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Форма.Участники, СтрокаИсполнителя);
		Форма.ЗаполнитьПредставлениеСроков();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ОбработкаВыбора в поле Порядок в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значения поля ввода.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПорядокВыполненияДействияУчастникамиОбработкаВыбора(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Порядок = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет значение флажка "Больше не показывать" после предупреждения о защищенности участников.
//
// Параметры:
//   Результат - Структура:
//     * БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//     * Значение - КодВозвратаДиалога - результат выбора пользователя: значение, связанное с нажатой кнопкой.
//   ДополнительныеПараметры - Неопределено
//
Процедура ПослеПредупрежденияОЗащищенностиУчастникаДействия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.БольшеНеЗадаватьЭтотВопрос Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			"НастройкиБольшеНеПоказывать",
			"ПоказыватьПредупреждениеПриУстановкеЗащитыУчастникаДействия",
			Ложь,,,
			Истина);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента ПредставлениеСтроки в таблице участников действия.
//
// Параметры:
//   Элемент - ПолеФормы - элемент ПредставлениеСтроки в таблице участников действия.
//   ДанныеВыбора - СписокЗначений из Структура - наполняемый список:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * presentation - Строка
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПредставлениеУчастникаДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура("Форма, ТекущиеДанные", Форма, ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения(
		"ПредставлениеУчастникаДействияНачалоВыбораЗавершение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот3.Форма.АдреснаяКнига",
		Новый Структура("КонтекстПравилКоммуникаций", КонтекстПравилКоммуникаций(Форма, Элемент.Имя)),
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик события ПредставлениеУчастникаДействияНачалоВыбораЗавершение.
//
// Параметры:
//   Результат - Структура:
//     * Исполнитель - Строка
//     * ИсполнительID - Строка
//     * ИсполнительТип - Строка
//     * ОсновнойОбъектАдресации - Строка
//     * ОсновнойОбъектАдресацииID - Строка
//     * ОсновнойОбъектАдресацииТип - Строка
//     * ДополнительныйОбъектАдресации - Строка
//     * ДополнительныйОбъектАдресацииID - Строка
//     * ДополнительныйОбъектАдресацииТип - Строка
//   ПараметрыОповещения - Структура:
//     * Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//     * ТекущиеДанные - ДанныеФормыЭлементДерева
//
Процедура ПредставлениеУчастникаДействияНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПараметрыОповещения.ТекущиеДанные;
	
	Результат.Свойство("Исполнитель", ТекущиеДанные.Участник);
	Результат.Свойство("ИсполнительID", ТекущиеДанные.УчастникID);
	Результат.Свойство("ИсполнительТип", ТекущиеДанные.УчастникТип);
	
	Результат.Свойство("ОсновнойОбъектАдресации", ТекущиеДанные.ОсновнойОбъектАдресацииУчастник);
	Результат.Свойство("ОсновнойОбъектАдресацииID", ТекущиеДанные.ОсновнойОбъектАдресацииУчастникID);
	Результат.Свойство("ОсновнойОбъектАдресацииТип", ТекущиеДанные.ОсновнойОбъектАдресацииУчастникТип);
	
	Результат.Свойство("ДополнительныйОбъектАдресации", ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник);
	Результат.Свойство("ДополнительныйОбъектАдресацииID", ТекущиеДанные.ДополнительныйОбъектАдресацииУчастникID);
	Результат.Свойство("ДополнительныйОбъектАдресацииТип", ТекущиеДанные.ДополнительныйОбъектАдресацииУчастникТип);
	
	ТекущиеДанные.УчастникПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			ТекущиеДанные.Участник,
			ТекущиеДанные.ОсновнойОбъектАдресацииУчастник,
			ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник);
	Оповестить("ОбновитьПредставленияВДеревеУчастников",, ПараметрыОповещения.Форма.УникальныйИдентификатор);
	ПараметрыОповещения.Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик события АвтоПодбор элемента ПредставлениеСтроки в таблице участников действия.
//
// Параметры:
//   Элемент - ПолеФормы - элемент ПредставлениеСтроки в таблице участников действия.
//   Текст - Строка - строка текста, введенная в поле ввода.
//   ДанныеВыбора - СписокЗначений из Структура - наполняемый список:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * presentation - Строка
//   ПараметрыПолученияДанных - Структура:
//     * ВыборГруппИЭлементов - ИспользованиеГруппИЭлементов
//     * Отбор - Неопределено
//     * ПолнотекстовыйПоиск - Неопределено
//     * РежимПолученияДанныхВыбора - РежимПолученияДанныхВыбораПриВводеПоСтроке
//     * СпособПоискаСтроки - Неопределено
//     * СтрокаПоиска - Строка
//   Ожидание - Число - интервал в секундах после ввода текста, через который произошло событие.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПредставлениеУчастникаДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка, Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЭтап = Ложь;
	ТекущиеДанные.Свойство("ЭтоЭтап", ЭтоЭтап);
	
	Если ЗначениеЗаполнено(Текст) И ЭтоЭтап = Ложь Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
			"DMEmployee",
			ДанныеВыбора,
			Текст,
			СтандартнаяОбработка,
			Новый Структура("КонтекстПравилКоммуникаций", КонтекстПравилКоммуникаций(Форма, Элемент.Имя)));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента ПредставлениеСтроки в таблице участников действия.
//
// Параметры:
//   Элемент - ПолеФормы - элемент ПредставлениеСтроки в таблице участников действия.
//   Текст - Строка - строка текста, введенная в поле ввода.
//   ДанныеВыбора - СписокЗначений из Структура - наполняемый список:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * presentation - Строка
//   ПараметрыПолученияДанных - Структура:
//     * ВыборГруппИЭлементов - ИспользованиеГруппИЭлементов
//     * Отбор - Неопределено
//     * ПолнотекстовыйПоиск - Неопределено
//     * РежимПолученияДанныхВыбора - РежимПолученияДанныхВыбораПриВводеПоСтроке
//     * СпособПоискаСтроки - Неопределено
//     * СтрокаПоиска - Строка
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПредставлениеУчастникаДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка, Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЭтап = Ложь;
	ТекущиеДанные.Свойство("ЭтоЭтап", ЭтоЭтап);
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Если ЭтоЭтап Тогда
			
			ТекущиеДанные.НаименованиеЭтапа = Текст;
			
		Иначе
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеДляАвтоПодбора(
				"DMEmployee",
				ДанныеВыбора,
				Текст,
				СтандартнаяОбработка,
				Новый Структура("КонтекстПравилКоммуникаций", КонтекстПравилКоммуникаций(Форма, Элемент.Имя)));
			
			Если ДанныеВыбора.Количество() = 1 И Не ДанныеВыбора[0].Значение.isNotAvailableAccordingCommunicationRules Тогда
				
				ОчиститьПолеУчастник(ТекущиеДанные);
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
					"Участник",
					ДанныеВыбора[0].Значение,
					СтандартнаяОбработка,
					Форма,
					Истина,
					Элемент);
				ТекущиеДанные.УчастникПредставление =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
						ТекущиеДанные.Участник,
						ТекущиеДанные.ОсновнойОбъектАдресацииУчастник,
						ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник);
				Оповестить("ОбновитьПредставленияВДеревеУчастников",, Форма.УникальныйИдентификатор);
				СтандартнаяОбработка = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента ПредставлениеСтроки в таблице участников действия.
//
// Параметры:
//   Элемент - ПолеФормы - элемент ПредставлениеСтроки в таблице участников действия.
//   ВыбранноеЗначение - Произвольный - выбранное значение, которое будет установлено как значения поля ввода.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПредставлениеУчастникаДействияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПолеУчастник(ТекущиеДанные);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Участник",
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		Форма,
		Истина,
		Элемент);
	ТекущиеДанные.УчастникПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			ТекущиеДанные.Участник,
			ТекущиеДанные.ОсновнойОбъектАдресацииУчастник,
			ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник);
	Оповестить("ОбновитьПредставленияВДеревеУчастников",, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Обработчик события Очистка элемента ПредставлениеСтроки в таблице участников действия.
//
// Параметры:
//   Элемент - ПолеФормы - элемент ПредставлениеСтроки в таблице участников действия.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПредставлениеУчастникаДействияОчистка(Элемент, СтандартнаяОбработка, Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПолеУчастник(ТекущиеДанные);
	ТекущиеДанные.УчастникПредставление =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
			ТекущиеДанные.Участник,
			ТекущиеДанные.ОсновнойОбъектАдресацииУчастник,
			ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник);
	Оповестить("ОбновитьПредставленияВДеревеУчастников",, Форма.УникальныйИдентификатор);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Вызывает код, который выполняется в обработчике события ПриОткрытии формы действия на стороне ДО.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура ПриОткрытииФормыДействия(Форма) Экспорт
	
	Форма.УстановитьДоступностьЭлементовФормы();
	Форма.ЗаполнитьПредставлениеСроков();
	
	Форма.ИнициализацияВыполнена = Истина;
	
КонецПроцедуры

// Проверяет участников, и записывает действие в случае успешной проверки.
//
// Параметры:
//   ДействиеXDTOСтрока - Строка - строковое представление объекта XDTO типа, наследующего DMAction.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ОповещениеОЗавершении - ОписаниеОповещения - вызывает процедуру формы после записи объекта.
//
Процедура ПроверитьУчастниковИЗаписатьДействие(ДействиеXDTOСтрока, Форма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = ИнтеграцияС1СДокументооборот3ВызовСервера.ПроверитьУчастниковАсинхронно(
		ДействиеXDTOСтрока,
		Форма.УникальныйИдентификатор);
	
	ПараметрыДляЗаписи = Новый Структура("ДействиеXDTOСтрока, Форма, ОповещениеОЗавершении",
		ДействиеXDTOСтрока, Форма, ОповещениеОЗавершении);
	ПроверитьУчастниковИЗаписатьДействиеЗавершение = Новый ОписаниеОповещения(
		"ПроверитьУчастниковИЗаписатьДействиеЗавершение",
		ЭтотОбъект,
		ПараметрыДляЗаписи);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьЗапросАсинхронно(
		ЭтотОбъект,
		ДлительнаяОперация,
		ПроверитьУчастниковИЗаписатьДействиеЗавершение,
		Истина,
		НСтр("ru = 'Проверка участников действия.'"),
		Ложь);
	
КонецПроцедуры

// Вызывается после выполнения запроса к ДО на проверку участников действия в фоновом задании.
//
// Параметры:
//   Результат - см. ДлительныеОперации.ОперацияВыполнена
//   ПараметрыДляЗаписи - Структура:
//     * ДействиеXDTOСтрока - Строка - строковое представление объекта XDTO типа, наследующего DMAction.
//     * Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//     * ОповещениеОЗавершении - ОписаниеОповещения - вызывает процедуру формы после записи объекта.
//
Процедура ПроверитьУчастниковИЗаписатьДействиеЗавершение(Результат, ПараметрыДляЗаписи) Экспорт
	
	ОбработатьФорму = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ОперацияВыполнена(Результат, ОбработатьФорму) Тогда
		РезультатПроверки = ИнтеграцияС1СДокументооборот3ВызовСервера.РезультатПроверкиУчастниковДействия(
			Результат.РезультатДлительнойОперации);
		Если РезультатПроверки.Успешно Тогда
			ЗаписатьДействиеАсинхронно(ПараметрыДляЗаписи);
		Иначе
			ОбработатьРезультатПроверкиДействительностиУчастниковДействия(
				РезультатПроверки,
				ПараметрыДляЗаписи);
		КонецЕсли;
	ИначеЕсли ОбработатьФорму Тогда
		ПараметрыДляЗаписи.Форма.ОбработатьФормуСогласноВерсииСервиса();
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает строки дерева участников действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура РазвернутьДеревоУчастниковДействия(Форма) Экспорт
	
	Для Каждого Этап Из Форма.Участники.ПолучитьЭлементы() Цикл
		Форма.Элементы.Участники.Развернуть(Этап.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события ПриИзменении в поле СрокПредставление в форме действия.
// В 1С:Документооборот соответствует ДействияКлиент.СрокПредставлениеПриИзменении.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ЗаполнитьСоисполнителей - Булево - если Истина, то заполняем те же сроки у соисполнителей.
//
Процедура СрокВыполненияДействияУчастникомПриИзменении(Форма, ЗаполнитьСоисполнителей = Ложь) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	ПараметрыИзмененияСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ПараметрыИзмененияСрокаПоПредставлению();
	ПараметрыИзмененияСрока.Исполнитель = ТекущиеДанные.Участник;
	ПараметрыИзмененияСрока.ИсполнительID = ТекущиеДанные.УчастникID;
	ПараметрыИзмененияСрока.ИсполнительТип = ТекущиеДанные.УчастникТип;
	ПараметрыИзмененияСрока.ОсновнойОбъектАдресацииИсполнитель = ТекущиеДанные.ОсновнойОбъектАдресацииУчастник;
	ПараметрыИзмененияСрока.ОсновнойОбъектАдресацииИсполнительID = ТекущиеДанные.ОсновнойОбъектАдресацииУчастникID;
	ПараметрыИзмененияСрока.ОсновнойОбъектАдресацииИсполнительТип = ТекущиеДанные.ОсновнойОбъектАдресацииУчастникТип;
	ПараметрыИзмененияСрока.ДополнительныйОбъектАдресацииИсполнитель =
		ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник;
	ПараметрыИзмененияСрока.ДополнительныйОбъектАдресацииИсполнительID =
		ТекущиеДанные.ДополнительныйОбъектАдресацииУчастникID;
	ПараметрыИзмененияСрока.ДополнительныйОбъектАдресацииИсполнительТип =
		ТекущиеДанные.ДополнительныйОбъектАдресацииУчастникТип;
	
	РезультатЗаполнения = ИнтеграцияС1СДокументооборот3ВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.Срок,
		ТекущиеДанные.СрокДни,
		ТекущиеДанные.СрокЧасы,
		ТекущиеДанные.СрокМинуты,
		ТекущиеДанные.ВариантУстановкиСрока,
		ТекущиеДанные.СрокПредставление,
		ПараметрыИзмененияСрока);
	
	Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоДействиеПодписания(Форма.Тип) Тогда
		ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
		Если ДочерниеЭлементы.Количество() = 1 Тогда
			// Скопируем вниз.
			Форма.СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатЗаполнения Тогда
		Если ЗаполнитьСоисполнителей Тогда
			ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Форма.Участники, ТекущиеДанные);
		КонецЕсли;
		Форма.ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыИзмененияСрока.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Регулирование в поле СрокПредставление в форме действия.
// В 1С:Документооборот соответствует ДействияКлиент.СрокПредставлениеРегулирование.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   Направление - Число - при нажатии вверх параметр равен 1, при нажатии вниз параметр равен -1.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   ЗаполнитьСоисполнителей - Булево - если Истина, то заполняем те же сроки у соисполнителей.
//
Процедура СрокВыполненияДействияУчастникомРегулирование(Форма, Направление, СтандартнаяОбработка,
		ЗаполнитьСоисполнителей = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОтносительныйСрок(
		ТекущиеДанные.СрокДни,
		ТекущиеДанные.СрокЧасы,
		ТекущиеДанные.СрокМинуты,
		Направление);
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ТекущиеДанные.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
	ТекущиеДанные.Срок = Дата(1,1,1);
	
	Если ЗаполнитьСоисполнителей Тогда
		ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Форма.Участники, ТекущиеДанные);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоДействиеПодписания(Форма.Тип) Тогда
		ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
		Если ДочерниеЭлементы.Количество() = 1 Тогда
			// Скопируем вниз.
			Форма.СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Форма.ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

// Рекурсивно устанавливает одинаковый срок всем участникам в пределах каждого этапа. При отключении опции "Разные
// сроки" в некоторых формах действий.
// В 1С:Документооборот соответствует ДействияКлиент.УстановитьОдинаковыйСрокРекурсивно.
//
// Параметры:
//   СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - текущая ветка из дерева "Участники" на формах действий.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура УстановитьОдинаковыйСрокДействияРекурсивно(СтрокиДерева, Форма) Экспорт
	
	Если Форма.Элементы.УчастникиРазныеСроки.Пометка Тогда
		Возврат; // Включена опция "Разные сроки".
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		УстановитьОдинаковыйСрокДействияРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Форма);
		
		Если ЭтоСтрокаОтветственного(СтрокаДерева) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.СрокПредставление) Тогда
			ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Форма.Участники, СтрокаДерева);
			Форма.Модифицированность = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Модифицированность Тогда
		Форма.ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
КонецПроцедуры

// Если хоть в одной ветке дерева есть разные сроки, то кнопка "Разные сроки" делается включенной.
// В 1С:Документооборот соответствует ДействияКлиент.УстановитьПометкуКнопкиРазныеСрокиРекурсивно.
//
// Параметры:
//   СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - текущая ветка из дерева "Участники" на формах действий.
//   КнопкаРазныеСроки - КнопкаФормы - кнопка "Разные сроки" из формы действия.
//
Процедура УстановитьПометкуКнопкиРазныеСрокиДействияРекурсивно(СтрокиДерева, КнопкаРазныеСроки) Экспорт
	
	ПредыдущийСрок = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если КнопкаРазныеСроки.Пометка Тогда
			Возврат; // Уже установлена внутри рекурсии, идти дальше нет смысла.
		КонецЕсли;
		
		ЭтоСтрокаОтветственного = ЭтоСтрокаОтветственного(СтрокаДерева);
		
		Если СтрокаДерева.Свойство("Порядок") И СтрокаДерева.Порядок = "OneByOne" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.Участник)
				И Не ЭтоСтрокаОтветственного
				И ПредыдущийСрок <> Неопределено
				И ПредыдущийСрок <> СтрокаДерева.СрокПредставление Тогда
			КнопкаРазныеСроки.Пометка = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ЭтоСтрокаОтветственного Тогда
			ПредыдущийСрок = СтрокаДерева.СрокПредставление;
		КонецЕсли;
		
		УстановитьПометкуКнопкиРазныеСрокиДействияРекурсивно(СтрокаДерева.ПолучитьЭлементы(), КнопкаРазныеСроки);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик события Выбор таблицы Участники.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ВыбраннаяСтрока - Число - значение выбранной строки.
//   Поле - ПолеФормы - активное поле (колонка).
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   ОткрыватьОсобоеНаименованиеИОписание - Булево - доступно открытие отдельной формы для ввода описания.
//   ТолькоПросмотрОсобогоНаименованияИОписания - Булево - только просмотр особого наименования и описания задачи.
//   ИзменятьНаименованиеЗадачи - Булево - помимо описания требуется таже изменять наименование задачи.
//
Процедура УчастникиДействияВыбор(Форма, ВыбраннаяСтрока, Поле, СтандартнаяОбработка,
		ОткрыватьОсобоеНаименованиеИОписание = Ложь, ТолькоПросмотрОсобогоНаименованияИОписания = Истина,
		ИзменятьНаименованиеЗадачи = Ложь) Экспорт
	
	ТекущиеДанные = Форма.Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрыватьОсобоеНаименованиеИОписание И Поле = Форма.Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.НаименованиеЗадачи);
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		Если Не ИзменятьНаименованиеЗадачи Тогда
			ПараметрыФормы.Вставить("ТолькоОписание", Истина);
		КонецЕсли;
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотрОсобогоНаименованияИОписания);
		
		ПараметрыОповещения = Новый Структура(
			"Форма, ТекущиеДанные, ИзменятьНаименованиеЗадачи",
			Форма,
			ТекущиеДанные,
			ИзменятьНаименованиеЗадачи);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоНаименованияИОписанияИсполнителя",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборот3.Форма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Форма.Элементы.УчастникиЗащищенный Тогда
		ИзменитьПризнакУчастникаДействияЗащищенный(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления таблицы Участники.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   Отказ - Булево - отказ из обработчика события формы.
//   Копирование - Булево - определяет режим копирования.
//   ПараметрыДобавленияУчастников - см. ИнтеграцияС1СДокументооборот3Клиент.ПараметрыДобавленияУчастниковДействия
//
Процедура УчастникиДействияПередНачаломДобавления(Форма, Отказ, Копирование, ПараметрыДобавленияУчастников) Экспорт
	
	Элементы = Форма.Элементы;
	Участники = Форма.Участники;
	СЭтапами = ПараметрыДобавленияУчастников.СЭтапами;
	МожноДобавлятьЭтапы = ПараметрыДобавленияУчастников.МожноДобавлятьЭтапы;
	ВозможныДочерниеИсполнители = ПараметрыДобавленияУчастников.ВозможныДочерниеИсполнители;
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если СЭтапами Тогда
		
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ЭтоДочернийУчастник") И ТекущиеДанные.ЭтоДочернийУчастник Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ТекущиеДанные.ЭтоЭтап Тогда
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ВозможныДочерниеИсполнители И Не ТекущиеДанные.ЭтоЭтап Тогда
				ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
				Если ТекущиеДанные = Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
			Возврат;
		КонецЕсли;
		
		// Запрещено настройками доступность действия.
		Если ТекущиеДанные.Недоступно Тогда
			Если МожноДобавлятьЭтапы Тогда
				Если Не ТекущиеДанные.РазрешеноДобавлять Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Если Не ПараметрыДобавленияУчастников.МожноТолькоДобавлятьУчастников Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СЭтапами Тогда
		СтрокиЭтапа = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		СтрокиЭтапа = Участники.ПолучитьЭлементы();
	КонецЕсли;
	
	СтрокаУчастника = СтрокиЭтапа.Добавить();
	
	Если СтрокаУчастника.Свойство("РазрешеноДобавлять") Тогда
		СтрокаУчастника.РазрешеноДобавлять = ТекущиеДанные.РазрешеноДобавлять;
	КонецЕсли;
	СтрокаУчастника.Функция = ПараметрыДобавленияУчастников.ФункцияУчастника;
	СтрокаУчастника.Идентификатор = Строка(Новый УникальныйИдентификатор);
	СтрокаУчастника.ПредставлениеСтроки = ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеУчастника(
		СтрокаУчастника);
	
	ИндексПредыдущегоЭлемента = СтрокиЭтапа.Количество() - 2;
	
	Если ВозможныДочерниеИсполнители Тогда
		Пока ИндексПредыдущегоЭлемента >= 0 Цикл
			Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(
					СтрокиЭтапа[ИндексПредыдущегоЭлемента].Функция) Тогда
				ИндексПредыдущегоЭлемента = ИндексПредыдущегоЭлемента - 1;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Если ИндексПредыдущегоЭлемента >= 0 Тогда
		
		СтрокаУчастника.ВариантУстановкиСрока = СтрокиЭтапа[ИндексПредыдущегоЭлемента].ВариантУстановкиСрока;
		
		Если СтрокаУчастника.Свойство("ИдентификаторПункта") Тогда
			СтрокаУчастника.ИдентификаторПункта = СтрокиЭтапа[ИндексПредыдущегоЭлемента].ИдентификаторПункта;
		КонецЕсли;
		
		Если СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
			Если СЭтапами И МожноДобавлятьЭтапы Тогда
				Если ТекущиеДанные.Порядок = "AllAtOnce" Тогда
					СтрокаУчастника.Срок = СтрокиЭтапа[ИндексПредыдущегоЭлемента].Срок;
				КонецЕсли;
			Иначе
				СтрокаУчастника.Срок = СтрокиЭтапа[ИндексПредыдущегоЭлемента].Срок;
			КонецЕсли;
		Иначе
			СтрокаУчастника.СрокДни = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокДни;
			СтрокаУчастника.СрокЧасы = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокЧасы;
			СтрокаУчастника.СрокМинуты = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокМинуты;
		КонецЕсли;
		
		Если ВозможныДочерниеИсполнители Тогда
			
			Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(
					СтрокиЭтапа[ИндексПредыдущегоЭлемента].Функция) Тогда
				СтрокаУчастника.Функция = ПараметрыДобавленияУчастников.ФункцияУчастника;
			Иначе
				СтрокаУчастника.Функция = СтрокиЭтапа[ИндексПредыдущегоЭлемента].Функция;
			КонецЕсли;
			
			ИндексТекСтроки = СтрокиЭтапа.Индекс(СтрокаУчастника);
			Если ИндексТекСтроки <> ИндексПредыдущегоЭлемента + 1 Тогда
				СтрокиЭтапа.Сдвинуть(ИндексТекСтроки, - 1);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
		Если ВозможныДочерниеИсполнители Тогда
			СтрокаУчастника.Функция = ТекущиеДанные.Функция;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СЭтапами И МожноДобавлятьЭтапы Тогда
		Если ТекущиеДанные.СрокОбщий Тогда
			ЗаполнитьЗначенияСвойств(СтрокаУчастника, ТекущиеДанные,, "Порядок");
		КонецЕсли;
		ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(СтрокиЭтапа);
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	Форма.УстановитьДоступностьЭлементовФормы();
	Форма.ЗаполнитьПредставлениеСроков();
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения таблицы Участники.
// Проверяет защищенность строки, не дает изменять исполнителя, если он защищен.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   Отказ - Булево - отказ из обработчика события формы.
//   СЭтапами - Булево - у действия есть этапы.
//
Процедура УчастникиДействияПередНачаломИзменения(Форма, Отказ, СЭтапами = Ложь) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	Если СЭтапами Тогда
		Если ТекущиеДанные = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
		Если ТекущиеДанные.ЭтоЭтап Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
			И Форма.Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки"
			И ТекущиеДанные.Защищенный
			И Не Форма.МожноИзменятьЗащищенныхУчастников Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередУдалением таблицы Участники.
// Проверяет защищенность строки, не дает удалить исполнителя, если он защищен или выполнил задачу.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   Отказ - Булево - отказ из обработчика события формы.
//   СЭтапами - Булево - у действия есть этапы.
//   МожноУдалятьЭтапы - Булево - этап можно удалить, если в действии есть больше одного этапа с одинаковой функцией.
//   ПоПунктам - Булево - действие исполняется по пунктам.
//
Процедура УчастникиДействияПередУдалением(Форма, Отказ, СЭтапами = Ложь, МожноУдалятьЭтапы = Ложь, ПоПунктам = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Участники = Форма.Участники;
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Элементы.Участники.ВыделенныеСтроки);
	
	Если СЭтапами Тогда
		
		ВсеЭтапы = Участники.ПолучитьЭлементы();
		
		КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
		
		// Если выделена только одна строка, то выводим сообщение о невозможности
		// ее удаления. Иначе молча удаляем все возможные строки дерева.
		Если КоличествоВыделенныхСтрок = 1 Тогда
			
			СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
			
			ТекстПредупреждения = "";
			
			Если СтрокаДерева.ЭтоЭтап И МожноУдалятьЭтапы Тогда
				СчЭтаповДанногоВида = 0;
				Для Каждого Этап Из ВсеЭтапы Цикл
					Если Этап.Функция = СтрокаДерева.Функция Тогда
						СчЭтаповДанногоВида = СчЭтаповДанногоВида + 1;
					КонецЕсли;
				КонецЦикла;
				
				Если СчЭтаповДанногоВида < 2 Тогда
					Если СтрокаДерева.Функция = "Signer" Тогда
						ТекстПредупреждения = НСтр("ru = 'Удаление единственного этапа подписания невозможно.'");
					ИначеЕсли СтрокаДерева.Функция = "ApprovingPerson" Тогда
						ТекстПредупреждения = НСтр("ru = 'Удаление единственного этапа согласования невозможно.'");
					ИначеЕсли ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДерева.Функция) Тогда
						ТекстПредупреждения = НСтр("ru = 'Удаление этапа обработки результата невозможно.'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДерева.ЭтоЭтап И Не ПоПунктам И Не МожноУдалятьЭтапы Тогда
				ТекстПредупреждения = ТекстПредупрежденияПриУдаленииЭтапа();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не МожноУдалятьЭтапы Или КоличествоВыделенныхСтрок > 1 Тогда
			
			// Вначале исключаем этапы и участников, которых невозможно удалить.
			ИндексСтроки = КоличествоВыделенныхСтрок - 1;
			
			Пока ИндексСтроки >= 0 Цикл
				
				ИндексТекущейСтроки = ИндексСтроки;
				ИндексСтроки = ИндексСтроки - 1;
				
				СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
				
				Если СтрокаДерева.ЭтоЭтап И Не ПоПунктам Тогда
					ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		Если СтрокаУчастника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Защищенный = Ложь;
		Недоступно = Ложь;
		СтрокаУчастника.Свойство("Защищенный", Защищенный);
		СтрокаУчастника.Свойство("Недоступно", Недоступно);
		
		Если Защищенный = Истина И Не Форма.МожноИзменятьЗащищенныхУчастников Тогда
			ТекстПредупреждения = ТекстПредупрежденияПриУдаленииЗащищенных();
		ИначеЕсли Недоступно = Истина И Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ТекстПредупрежденияПриУдаленииНедоступного();
		КонецЕсли;
		
		Если СтрокаУчастника.Состояние = "Completed" Тогда
			ТекстПредупреждения = ТекстПредупрежденияПриУдаленииЗавершившего();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если СЭтапами Тогда
			СтрокаЭтапа = СтрокаУчастника.ПолучитьРодителя();
			Если СтрокаЭтапа = Неопределено И (ПоПунктам Или МожноУдалятьЭтапы) Тогда
				// Удалим этап.
				ВсеЭтапы.Удалить(СтрокаУчастника);
				
				Если МожноУдалятьЭтапы Тогда
					ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(ВсеЭтапы);
				КонецЕсли;
			Иначе
				// Удалим участника.
				ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
				Если ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаЭтапа.Функция) Тогда
					Если Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" Тогда
						ЭлементыУчастников[0].Участник = "";
						ЭлементыУчастников[0].УчастникID = "";
						ЭлементыУчастников[0].УчастникТип = "";
						ЭлементыУчастников[0].ОсновнойОбъектАдресацииУчастник = "";
						ЭлементыУчастников[0].ОсновнойОбъектАдресацииУчастникID = "";
						ЭлементыУчастников[0].ОсновнойОбъектАдресацииУчастникТип = "";
						ЭлементыУчастников[0].ДополнительныйОбъектАдресацииУчастник = "";
						ЭлементыУчастников[0].ДополнительныйОбъектАдресацииУчастникID = "";
						ЭлементыУчастников[0].ДополнительныйОбъектАдресацииУчастникТип = "";
						ЭлементыУчастников[0].УчастникПредставление =
							ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
								ЭлементыУчастников[0].Участник,
								ЭлементыУчастников[0].ОсновнойОбъектАдресацииУчастник,
								ЭлементыУчастников[0].ДополнительныйОбъектАдресацииУчастник);
					КонецЕсли;
				Иначе
					ЭлементыУчастников.Удалить(СтрокаУчастника);
				КонецЕсли;
				
				Если МожноУдалятьЭтапы Тогда
					ЗаполнитьДоступностьПеремещенияЭтаповУчастниковДействия(ЭлементыУчастников);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Участники.ПолучитьЭлементы().Удалить(СтрокаУчастника);
		КонецЕсли;
		
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		Форма.Модифицированность = Истина;
	КонецЦикла;
	
	Если Форма.Модифицированность Тогда
		Оповестить("УдалениеУчастниковДействия",, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик активизации строки в таблице участников действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура УчастникиДействияПриАктивизацииСтроки(Форма) Экспорт
	
	УстановитьПометкуКомандыЗащищенный(Форма);
	УстановитьДоступностьКомандыЗащищенный(Форма);
	УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(Форма);
	УстановитьДоступностьКнопкиРазныеСроки(Форма);
	
КонецПроцедуры

// Проверяет уникальность этапов действия.
//
// Параметры:
//   Участники - ДанныеФормыДерево - дерево с участниками действия.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтапыДействияУникальны(Участники) Экспорт
	
	Этапы = Новый Соответствие;
	Для Каждого ЭлементЭтап Из Участники.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(ЭлементЭтап.НаименованиеЭтапа)
				И Этапы.Получить(ВРег(ЭлементЭтап.НаименованиеЭтапа)) <> Неопределено Тогда
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Повторяется этап ""%1""'"),
					ЭлементЭтап.НаименованиеЭтапа));
			Возврат Ложь;
		КонецЕсли;
		Этапы.Вставить(ВРег(ЭлементЭтап.НаименованиеЭтапа), Истина);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПравилаКоммуникаций

// Возвращает контекст правил коммуникаций.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма-источник события.
//   ИмяПоля - Строка - имя поля, из которого осуществлен вызов.
//
// Возвращаемое значение:
//   Структура:
//     * ref - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * action - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * initiator - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * participantFunction - Строка - функция участника.
//     * pointName - Строка - наименование этапа.
//     * fieldName - Строка - имя поля.
//     * target - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
Функция КонтекстПравилКоммуникаций(Форма, ИмяПоля = "") Экспорт
	
	Контекст = Новый Структура;
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка.ИнтеграцияС1СДокументооборот3.Форма.Действие") Тогда
		
		Контекст.Вставить("ref", ЗначениеЭлементаКонтекстаОбъектногоТипа(Форма, "ОсновнойПредмет"));
		Контекст.Вставить("action", ЗначениеЭлементаКонтекстаОбъектногоТипа(Форма));
		Контекст.Вставить("initiator", ЗначениеЭлементаКонтекстаОбъектногоТипа(Форма, "Автор"));
		
		ЗаполненаФункцияУчастника = Ложь;
		ЗаполненоНаименованиеЭтапа = Ложь;
		УчастникиТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
		Пока УчастникиТекущиеДанные <> Неопределено Цикл
			Если Не ЗаполненаФункцияУчастника Тогда
				ФункцияУчастника = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(УчастникиТекущиеДанные, "Функция");
				Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
					Контекст.Вставить("participantFunction", ФункцияУчастника);
					ЗаполненаФункцияУчастника = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗаполненоНаименованиеЭтапа Тогда
				НаименованиеЭтапа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					УчастникиТекущиеДанные,
					"НаименованиеЭтапа");
				Если ЗначениеЗаполнено(НаименованиеЭтапа) Тогда
					Контекст.Вставить("pointName", НаименованиеЭтапа);
					ЗаполненоНаименованиеЭтапа = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗаполненаФункцияУчастника И ЗаполненоНаименованиеЭтапа Тогда
				Прервать;
			КонецЕсли;
			УчастникиТекущиеДанные = УчастникиТекущиеДанные.ПолучитьРодителя();
		КонецЦикла;
		
		Если ИмяПоля = "ПредставлениеСтроки" Тогда
			Контекст.Вставить("fieldName", "ActionParticipant");
		ИначеЕсли ИмяПоля = "Кому" Тогда
			Контекст.Вставить("fieldName", "NewTaskPerformer");
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы =
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ПеренаправлениеЗадачи" Тогда
		
		Контекст.Вставить("target", ЗначениеЭлементаКонтекстаОбъектногоТипа(Форма, "Задача"));
		
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

// Выводит предупреждение о выборе элемента недоступного по правилам коммуникаций.
//
Процедура ПоказатьНарушениеПравилКоммуникаций() Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Выбранный элемент недоступен по правилам коммуникаций'");
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДействияВспомогательныеМетоды

// Проверяет доступность изменения защищенности участника обработки документа.
// Нельзя изменять защищенность участника, если она установлена в настройке действия.
//
// Параметры:
//   Участник - ДанныеФормыЭлементДерева - строка участника в дереве участников обработки.
//   МожноИзменятьЗащищенных - Булево
//
// Возвращаемое значение:
//   Булево - Доступно изменение защищенности участника
//
Функция ДоступноИзменениеЗащищенностиУчастника(Участник, МожноИзменятьЗащищенных)
	
	Результат = Истина;
	
	Если Участник.ЭтоЭтап Тогда
		Результат = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Участник.Участник) Тогда
		Результат = Ложь;
	ИначеЕсли Участник.Свойство("Недоступно") И Участник.Недоступно Тогда
		Результат = Ложь;
	ИначеЕсли Участник.Свойство("ИзНастройки") И Участник.ИзНастройки И Не МожноИзменятьЗащищенных Тогда
		Результат = Не Участник.ЗащищенныйВНастройке;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьДействиеАсинхронно(ПараметрыДляЗаписи)
	
	Если ПараметрыДляЗаписи.Форма.РежимДиалога Тогда
		ПараметрыДляЗаписи.Форма.Модифицированность = Ложь;
		ПараметрыДляЗаписи.Форма.Закрыть(ПараметрыДляЗаписи.ДействиеXDTOСтрока);
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ЗаписатьОбъектАсинхронно(
		ПараметрыДляЗаписи.Форма.УникальныйИдентификатор,
		ПараметрыДляЗаписи.ДействиеXDTOСтрока,
		ПараметрыДляЗаписи.ОповещениеОЗавершении);
	
КонецПроцедуры

// Заполняет сроки соисполнителей этапа по строке, в которой поменялся срок.
//
// Параметры:
//   Участники - ДанныеФормыДерево - дерево с участниками действия.
//   СтрокаИсполнителя - СтрокаДереваЗначений - строка, в которой поменялся срок.
//
Процедура ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Участники, СтрокаИсполнителя)
	
	УчастникиЭтапа = Участники.ПолучитьЭлементы();
	
	Если ЭтоСтрокаОтветственного(СтрокаИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	// При последовательном выполнении, сроки настраиваются индивидуально.
	ТекущийРодитель = СтрокаИсполнителя.ПолучитьРодителя();
	Если ТекущийРодитель <> Неопределено Тогда
		ЕстьЭтапы = Истина;
		Если ТекущийРодитель.Свойство("Порядок") И ТекущийРодитель.Порядок = "OneByOne" Тогда
			Возврат;
		КонецЕсли;
		
		// Для рассматривающих сроки не копируем.
		Если ЭтоСтрокаРассматривающего(ТекущийРодитель) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ЕстьЭтапы = Ложь;
	КонецЕсли;
	
	ВариантыУстановкиСрока = ИнтеграцияС1СДокументооборот3КлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ВариантУстановкиСрока = СтрокаИсполнителя.ВариантУстановкиСрока;
	
	Если ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
		Срок = СтрокаИсполнителя.Срок;
		СрокДни = 0;
		СрокЧасы = 0;
		СрокМинуты = 0;
	Иначе
		Срок = Дата(1,1,1);
		СрокДни = СтрокаИсполнителя.СрокДни;
		СрокЧасы = СтрокаИсполнителя.СрокЧасы;
		СрокМинуты = СтрокаИсполнителя.СрокМинуты;
	КонецЕсли;
	
	Если ЕстьЭтапы Тогда
		
		Для Каждого ВсеУчастникиЭтапа Из УчастникиЭтапа Цикл
			Если ТекущийРодитель <> ВсеУчастникиЭтапа Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого УчастникЭтапа Из ВсеУчастникиЭтапа.ПолучитьЭлементы() Цикл
				Если ЭтоСтрокаОтветственного(УчастникЭтапа) Тогда
					Продолжить;
				КонецЕсли;
				
				УчастникЭтапа.Срок = Срок;
				УчастникЭтапа.СрокДни = СрокДни;
				УчастникЭтапа.СрокЧасы = СрокЧасы;
				УчастникЭтапа.СрокМинуты = СрокМинуты;
				УчастникЭтапа.ВариантУстановкиСрока = ВариантУстановкиСрока;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			УчастникЭтапа.Срок = Срок;
			УчастникЭтапа.СрокДни = СрокДни;
			УчастникЭтапа.СрокЧасы = СрокЧасы;
			УчастникЭтапа.СрокМинуты = СрокМинуты;
			УчастникЭтапа.ВариантУстановкиСрока = ВариантУстановкиСрока;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает свойство объекта. В случае отсутствия свойства, возвращает пустое значение.
//
// Параметры:
//   Объект - Произвольный - Любой объект с полями/реквизитами/свойствами.
//   ИмяСвойства - Строка - Имя свойства, значение которого необходимо определить.
//   ПустоеЗначение - Произвольный - Пустое значение свойства.
//
// Возвращаемое значение:
//   Произвольный
//
Функция ЗначениеСвойстваОбъекта(Объект, ИмяСвойства, ПустоеЗначение)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяСвойства, ПустоеЗначение);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Объект);
	
	Возврат СтруктураПоиска[ИмяСвойства];
	
КонецФункции

// Обрабатывает результат проверки участников действия.
//
// Параметры:
//   РезультатПроверки - см. ИнтеграцияС1СДокументооборот3ВызовСервера.РезультатПроверкиУчастниковДействия
//   ПараметрыДляЗаписи - Структура:
//     * ДействиеXDTOСтрока - Строка - строковое представление объекта XDTO типа, наследующего DMAction.
//     * Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//     * ОповещениеОЗавершении - ОписаниеОповещения - вызывает процедуру формы после записи объекта.
//
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковДействия(РезультатПроверки, ПараметрыДляЗаписи)
	
	КнопкиВопроса = Новый СписокЗначений(); // СписокЗначений Из Число, КодВозвратаДиалога
	КнопкиВопроса.Добавить(0, НСтр("ru = 'Заменить'"));
	КнопкиВопроса.Добавить(1, НСтр("ru = 'Оставить как есть'"));
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	КнопкаПоУмолчанию = 0;
	
	ОповещениеПослеВопросаОЗамене = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиДействительностиУчастниковДействияПродолжение",
		ЭтотОбъект,
		ПараметрыДляЗаписи);
	
	ПоказатьВопрос(
		ОповещениеПослеВопросаОЗамене,
		РезультатПроверки.ТекстПредупреждения,
		КнопкиВопроса,,
		КнопкаПоУмолчанию);
	
КонецПроцедуры

// Обрабатывает результат проверки участников действия продолжение.
//
// Параметры:
//   РезультатВопроса - Число
//                    - КодВозвратаДиалога - Заменить, Оставить как есть, Отмена.
//   ПараметрыДляЗаписи - Структура:
//     * ДействиеXDTOСтрока - Строка - строковое представление объекта XDTO типа, наследующего DMAction.
//     * Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//     * ОповещениеОЗавершении - ОписаниеОповещения - вызывает процедуру формы после записи объекта.
//
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковДействияПродолжение(РезультатВопроса,
		ПараметрыДляЗаписи) Экспорт
	
	// Выбрана отмена или согласился заменить участников.
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Или РезультатВопроса = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если РезультатВопроса = 1 Тогда
		ЗаписатьДействиеАсинхронно(ПараметрыДляЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст предупреждения о невозможности удалить этап обработки.
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстПредупрежденияПриУдаленииЭтапа()
	
	Возврат НСтр("ru = 'Удаление этапа невозможно.'");
	
КонецФункции

// Возвращает текст предупреждения о невозможности удалить защищенных участников.
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстПредупрежденияПриУдаленииЗащищенных()
	
	Возврат НСтр("ru = 'Удаление защищенных участников невозможно.'");
	
КонецФункции

// Возвращает текст предупреждения о невозможности удалить завершившего задачу участника.
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстПредупрежденияПриУдаленииЗавершившего()
	
	Возврат НСтр("ru = 'Удаление участника завершившего задачу невозможно.'");
	
КонецФункции

// Возвращает текст предупреждения о невозможности удалить недоступных участников.
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстПредупрежденияПриУдаленииНедоступного()
	
	Возврат НСтр("ru = 'Удаление участника невозможно.'");
	
КонецФункции

// Устанавливает доступность команды "Защищенный" в командной панели участников действия.
// Используется при активизации строки в таблице участников.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура УстановитьДоступностьКомандыЗащищенный(Форма)
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Форма.Элементы.Защищенный.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Защищенный.Доступность = ДоступноИзменениеЗащищенностиУчастника(
		ТекущиеДанные,
		Форма.МожноИзменятьЗащищенныхУчастников);
	
КонецПроцедуры

// Определяет доступность кнопки "Разные сроки" - она есть не во всех видах действий, и доступна не при любых условиях.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура УстановитьДоступностьКнопкиРазныеСроки(Форма)
	
	Если Форма.Элементы.Найти("УчастникиРазныеСроки") = Неопределено Тогда
		Возврат; // Нет кнопки "Разные сроки".
	КонецЕсли;
	Форма.Элементы.УчастникиРазныеСроки.Доступность = Ложь;
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокПредставление") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Форма.Элементы.СрокПредставление.ТолькоПросмотр Тогда
		Возврат; // Если срок править нельзя - то и кнопку нажимать нельзя.
	КонецЕсли;
	
	СтрокаДерева = Форма.Элементы.Участники.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Свойство("Порядок") И СтрокаДерева.Порядок = "OneByOne" Тогда
		Возврат;
	КонецЕсли;
	ЭтоНастройкаИсполнения = Ложь;
	ЭтоИсполнение = (Форма.Тип = "DMActionPerformance") Или ЭтоНастройкаИсполнения;
	
	Если ЭтоНастройкаИсполнения И Форма.ПоПунктам Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоИсполнение И ЭтоСтрокаРассматривающего(СтрокаДерева) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель <> Неопределено Тогда
		Если СтрокаРодитель.Свойство("Порядок") И СтрокаРодитель.Порядок = "OneByOne" Тогда
			Возврат;
		КонецЕсли;
		Если ЭтоИсполнение И ЭтоСтрокаРассматривающего(СтрокаРодитель) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.УчастникиРазныеСроки.Доступность = Истина;
	
КонецПроцедуры

// Устанавливает пометку команды "Защищенный" в командной панели участников действия.
// Используется при активизации строки в таблице участников.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура УстановитьПометкуКомандыЗащищенный(Форма)
	
	ОбщаяЗащищенность = Неопределено;
	Для Каждого ВыделеннаяСтрока Из Форма.Элементы.Участники.ВыделенныеСтроки Цикл
		
		СтрокаДерева = Форма.Участники.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ОбщаяЗащищенность = Неопределено Тогда
			ОбщаяЗащищенность = СтрокаДерева.Защищенный;
		КонецЕсли;
		
		ОбщаяЗащищенность = ОбщаяЗащищенность И СтрокаДерева.Защищенный;
		
	КонецЦикла;
	
	Если ОбщаяЗащищенность = Неопределено Тогда
		Форма.Элементы.Защищенный.Пометка = Ложь;
	Иначе
		Форма.Элементы.Защищенный.Пометка = ОбщаяЗащищенность;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команды "Удалить" в командной панели участников действия.
// Проверяет, не защищен ли от удаления выделенный участник, или участники выделенного этапа.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
Процедура УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(Форма)
	
	МожноИзменятьЗащищенных = Форма.МожноИзменятьЗащищенныхУчастников;
	УдалениеЗапрещено = Ложь;
	
	ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОбеспечивающийПодписание = ИнтеграцияС1СДокументооборот3КлиентСервер.ЭтоДействиеПодписания(Форма.Тип)
		И ТекущиеДанные.ЭтоДочернийУчастник
		И ТекущиеДанные.Функция = "EnsuringSigning";
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		УдалениеЗапрещено = ИнтеграцияС1СДокументооборот3КлиентСервер.ЕстьЗащищенныеУчастникиДействия(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Защищенный Тогда
		УдалениеЗапрещено = Истина;
	КонецЕсли;
	
	Если УдалениеЗапрещено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"Удалить",
			"Доступность",
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"КонтекстУдалить",
			"Доступность",
			Ложь);
	ИначеЕсли ЭтоОбеспечивающийПодписание И Не ТекущиеДанные.Недоступно Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"Удалить",
			"Доступность",
			Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"КонтекстУдалить",
			"Доступность",
			Истина);
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоЭтап И Не ЭтоОбеспечивающийПодписание Тогда
		Форма.Элементы.ПредставлениеСтроки.ТолькоПросмотр = Форма.Элементы.ПредставлениеСтроки.ТолькоПросмотр
			Или ТекущиеДанные.Защищенный И Не МожноИзменятьЗащищенных;
	ИначеЕсли ЭтоОбеспечивающийПодписание И Не ТекущиеДанные.Недоступно Тогда
		Форма.Элементы.ПредставлениеСтроки.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет, является ли текущий исполнитель Ответственным.
//
// Параметры:
//   СтрокаИсполнителя - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции - строка в таблице Исполнители.
//
// Возвращаемое значение:
//   Булево - возвращает Истину, если в текущей строке есть поле Ответственный, и оно имеет значение Истина.
//
Функция ЭтоСтрокаОтветственного(СтрокаИсполнителя)
	
	Возврат ЗначениеСвойстваОбъекта(СтрокаИсполнителя, "Ответственный", Ложь);
	
КонецФункции

// Определяет, является ли текущий исполнитель Рассматривающим.
//
// Параметры:
//   СтрокаИсполнителя - СтрокаТаблицыЗначений, ДанныеФормыЭлементКоллекции - строка в таблице Исполнители.
//
// Возвращаемое значение:
//   Булево - возвращает Истину, если в текущей строке есть поле Функция, и оно имеет значение Рассматривающий.
//
Функция ЭтоСтрокаРассматривающего(СтрокаИсполнителя)
	
	Возврат ЗначениеСвойстваОбъекта(СтрокаИсполнителя, "Функция", Неопределено) = "ReviewingPerson";
	
КонецФункции

#КонецОбласти

#Область ПравилаКоммуникаций

// Формирует описание элемента контекста правил коммуникаций объектного типа.
//
// Параметры:
//   Источник - ФормаКлиентскогоПриложения - Источник, из которого нужно получить описание элемента.
//   ИмяРеквизита - Строка - Имя реквизита источника, описание которого нужно получить.
//
// Возвращаемое значение:
//   Неопределено, см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
Функция ЗначениеЭлементаКонтекстаОбъектногоТипа(Источник, ИмяРеквизита = "")
	
	ЗначениеЭлемента = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизита + "ID")
			И ЗначениеЗаполнено(Источник[ИмяРеквизита + "ID"]) Тогда
		
		Наименование = "";
		Если ЗначениеЗаполнено(ИмяРеквизита)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизита)
				И ЗначениеЗаполнено(Источник[ИмяРеквизита]) Тогда
			Наименование = Источник[ИмяРеквизита];
		КонецЕсли;
		
		ЗначениеЭлемента = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			Источник[ИмяРеквизита + "ID"],
			Источник[ИмяРеквизита + "Тип"],
			Наименование);
		
	КонецЕсли;
	
	Возврат ЗначениеЭлемента;
	
КонецФункции

#КонецОбласти

// Обработчик оповещения, вызываемый после ввода номера страницы пользователем.
//
// Параметры:
//   НоваяСтраница - Число - номер страницы, введенный пользователем.
//   Параметры - Структура:
//     * ТекущаяСтраница - Число - номер текущей страницы.
//     * ВсегоСтраниц - Число - максимальное количество страниц.
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, куда будет передан номер выбранной страницы.
//
Процедура ВводСтраницыВручнуюЗавершение(НоваяСтраница, Параметры) Экспорт
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтраница < 1 Тогда
		НоваяСтраница = 1;
	ИначеЕсли НоваяСтраница > Параметры.ВсегоСтраниц Тогда
		НоваяСтраница = Параметры.ВсегоСтраниц;
	КонецЕсли;
	
	Если НоваяСтраница = Параметры.ТекущаяСтраница Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, НоваяСтраница);
	
КонецПроцедуры

Функция ВсеПодчиненныеВыполнены(СтрокаДереваОбработки)
	
	ВсеПодчиненныеВыполнены = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаДереваОбработки.Результат) Тогда
		ВсеПодчиненныеВыполнены = Истина;
		ПроверитьВсеПодчиненныеВыполнены(СтрокаДереваОбработки, ВсеПодчиненныеВыполнены);
	КонецЕсли;
	
	Возврат ВсеПодчиненныеВыполнены;
	
КонецФункции

// Обработка выбора значения в таблице из списка.
//
// Параметры:
//   Результат - Структура:
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//   Параметры - Структура:
//     * ТекущиеДанные - ДанныеФормыЭлементКоллекции
//     * Реквизит - Строка
//     * ФормаВладелец - ФормаКлиентскогоПриложения
//
Процедура ВыбратьЗначениеИзСпискаВТаблицеЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные[Реквизит] = Результат.РеквизитПредставление;
		ТекущиеДанные[Реквизит + "ID"] = Результат.РеквизитID;
		ТекущиеДанные[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("Данные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Результат", Результат);
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ПараметрыОповещения, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора значения из списка.
//
// Параметры:
//   Результат - Структура:
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//   Параметры - Структура:
//     * ТекущиеДанные - ДанныеФормыЭлементКоллекции
//     * Реквизит - Строка
//     * ФормаВладелец - ФормаКлиентскогоПриложения
//
Процедура ВыбратьЗначениеИзСпискаЗавершение(Результат, Параметры) Экспорт
	
	ФормаВладелец = Параметры.ФормаВладелец;
	Реквизит = Параметры.Реквизит;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаЗавершение", Реквизит, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора сотрудника.
//
// Параметры:
//   Результат - Структура:
//     * Реквизит - Строка
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//   Параметры - Структура:
//     * Реквизит - Строка - имя реквизита формы, в который будет помещен выбранный сотрудник.
//     * ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора сотрудника.
//     * ЗаполнятьПредставление - Булево - признак необходимости заполнения представления сотрудника.
//
Процедура ВыбратьСотрудникаИзДереваПодразделенийЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Параметры.ФормаВладелец[Параметры.Реквизит] = Результат.Реквизит;
		Параметры.ФормаВладелец[Параметры.Реквизит + "ID"] = Результат.РеквизитID;
		Параметры.ФормаВладелец[Параметры.Реквизит + "Тип"] = Результат.РеквизитТип;
		Если Параметры.ЗаполнятьПредставление Тогда
			Параметры.ФормаВладелец[Параметры.Реквизит + "Представление"] = Результат.РеквизитПредставление;
		КонецЕсли;
		Параметры.ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнениеЗаголовка(ПолеЭлемент)
	
	НачалоДополнения = СтрНайти(ПолеЭлемент.Заголовок, "(");
	Если НачалоДополнения > 0 Тогда
		ДополнениеЗаголовка = Сред(ПолеЭлемент.Заголовок, НачалоДополнения, СтрДлина(ПолеЭлемент.Заголовок));
	КонецЕсли;
	
	Возврат ДополнениеЗаголовка;
	
КонецФункции

// Определяет, доступно ли интерактивное изменение файлов.
//
// Параметры:
//   ПриложениеТип - Строка
//
// Возвращаемое значение:
//   Булево - доступно интерактивное изменение файлов.
//
Функция ДоступноИнтерактивноеИзменениеФайлов(ПриложениеТип)
	
	ДоступноИнтерактивноеИзменениеФайлов = ИнтеграцияС1СДокументооборот3КлиентПовтИсп.ЭтоДокументДО3(ПриложениеТип)
		Или ПриложениеТип = "DMCorrespondent"
		Или ПриложениеТип = "DMMeeting";
	
	Возврат ДоступноИнтерактивноеИзменениеФайлов;
	
КонецФункции

Функция ЕстьПодзадачи(СтрокаДереваОбработки)
	
	ЕстьПодзадачи = Ложь;
	
	Для Каждого СтрокаДействияТек Из СтрокаДереваОбработки.ПолучитьЭлементы() Цикл
		Если СтрокаДействияТек.ЭтоПодзадача Тогда
			ЕстьПодзадачи = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьПодзадачи;
	
КонецФункции

// Обработчик оповещения, вызываемый после ввода особого описания.
//
// Параметры:
//   Результат - Структура:
//     * Наименование - Строка
//     * Описание - Строка
//   ПараметрыОповещения - Структура:
//     * Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//     * ТекущиеДанные - ДанныеФормыЭлементДерева
//
Процедура ЗавершитьНастройкуОсобогоНаименованияИОписанияИсполнителя(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОповещения.ИзменятьНаименованиеЗадачи Тогда
		ПараметрыОповещения.ТекущиеДанные.НаименованиеЗадачи = Результат.Наименование;
	КонецЕсли;
	
	ПараметрыОповещения.ТекущиеДанные.Описание = Результат.Описание;
	ПараметрыОповещения.ТекущиеДанные.ЕстьОсобоеНаименованиеОписание =
		ЗначениеЗаполнено(ПараметрыОповещения.ТекущиеДанные.Описание)
		Или (ПараметрыОповещения.ИзменятьНаименованиеЗадачи
			И ЗначениеЗаполнено(ПараметрыОповещения.ТекущиеДанные.НаименованиеЗадачи));
	
	ПараметрыОповещения.Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеСтрокДерева(ТипДерева, СтрокиДерева, ТаблицаФормы, СостояниеРазвернут)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокаРазвернута = ТаблицаФормы.Развернут(СтрокаДерева.ПолучитьИдентификатор());
		СостояниеРазвернут[КлючСтрокиДерева(ТипДерева, СтрокаДерева)] = СтрокаРазвернута;
		ЗаполнитьСостояниеСтрокДерева(ТипДерева, СтрокаДерева.ПолучитьЭлементы(), ТаблицаФормы, СостояниеРазвернут);
	КонецЦикла;
	
КонецПроцедуры

// Формирует ключ строки дерева обработки.
//
// Параметры:
//   СтрокаДереваОбработки - Структура:
//     * ДействиеID - Строка
//     * ДействиеЗадачиID - Строка
//     * Идентификатор - УникальныйИдентификатор
//
// Возвращаемое значение:
//   Строка
//
Функция КлючСтрокиДереваОбработки(СтрокаДереваОбработки)
	
	Возврат СтрШаблон("%1_%2_%3_%4_%5_%6",
		СтрокаДереваОбработки.ДействиеID,
		СтрокаДереваОбработки.ДействиеЗадачиID,
		СтрокаДереваОбработки.ВидДействияID,
		?(СтрокаДереваОбработки.ЭтоУчастник, Строка(СтрокаДереваОбработки.Идентификатор), ""),
		СтрокаДереваОбработки.Представление,
		СтрокуДереваОбработкиНужноРазвернуть(СтрокаДереваОбработки));
	
КонецФункции

// Формирует ключ строки дерева приложений.
//
// Параметры:
//   СтрокаДереваПриложений - Структура:
//     * ПредставлениеПриложения - Строка
//     * ПриложениеID - Строка
//     * ПриложениеТип - Строка
//     * ТипСтроки - Строка
//     * РольФайлаID - Строка
//
// Возвращаемое значение:
//   Строка
//
Функция КлючСтрокиДереваПриложений(СтрокаДереваПриложений)
	
	Если СтрокаДереваПриложений <> Неопределено Тогда
		Если СтрокаДереваПриложений.ТипСтроки = "filerole" Тогда
			Возврат СтрШаблон("%1_%2",
				СтрокаДереваПриложений.ТипСтроки,
				СтрокаДереваПриложений.РольФайлаID);
		Иначе
			Возврат СтрШаблон("%1_%2_%3",
				СтрокаДереваПриложений.ПредставлениеПриложения,
				СтрокаДереваПриложений.ПриложениеID,
				СтрокаДереваПриложений.ПриложениеТип);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Продолжение процедуры ОбработкаКомандыНачатьОбработку.
//
// Параметры:
//   Результат - Булево
//   ПараметрКоманды - ЛюбаяСсылка
//
Процедура НачатьОбработкуПроверитьПодключениеЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат = Истина Тогда
		// авторизация успешна
		НачатьОбработку(ПараметрКоманды);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения ОбработатьДанныеВыполненияПослеВыбораИсполнителя.
//
// Параметры:
//   Результат - Структура - выбранный исполнитель.
//   ПараметрыОповещения - Структура:
//     * ТипОперации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей
//     * ПовторноеДействие - ОписаниеОповещения - метод, который будет вызван по завершении интерактивной обработки.
//
Процедура ОбработатьДанныеВыполненияПослеВыбораИсполнителя(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	ТребуемоеИнтерактивноеДействие =
		ПараметрыОповещения.ПовторноеДействие.ДополнительныеПараметры.ТребуемоеИнтерактивноеДействие;
	ТребуемоеИнтерактивноеДействие.ВыбратьИсполнителяЗадачи = Истина;
	ТребуемоеИнтерактивноеДействие.Контекст = Результат;
	
	// Выполнить задачу.
	ВыполнитьОбработкуОповещения(ПараметрыОповещения.ПовторноеДействие, ПараметрыОповещения.ТипОперации);
	
КонецПроцедуры

// Обработчик оповещения ОбработатьДанныеВыполненияПослеИзмененияПроцесса.
//
// Параметры:
//   Результат - Строка - измененное действие. Строковое представление объекта XDTO типа, наследующего DMAction.
//             - КодВозвратаДиалога - если действие было закрыто без записи.
//   ПараметрыОповещения - Структура:
//     * ТипОперации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей
//     * ПовторноеДействие - ОписаниеОповещения - метод, который будет вызван по завершении интерактивной обработки.
//
Процедура ОбработатьДанныеВыполненияПослеИзмененияПроцесса(Результат, ПараметрыОповещения) Экспорт
	
	ТипРезультата = ТипЗнч(Результат);
	
	Если ТипРезультата = Тип("КодВозвратаДиалога") И Результат <> КодВозвратаДиалога.ОК Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	ТребуемоеИнтерактивноеДействие =
		ПараметрыОповещения.ПовторноеДействие.ДополнительныеПараметры.ТребуемоеИнтерактивноеДействие;
	ТребуемоеИнтерактивноеДействие.ИзменитьПараметрыПроцесса = Истина;
	Если ТипРезультата = Тип("Строка") Тогда
		ТребуемоеИнтерактивноеДействие.Контекст = Результат;
	КонецЕсли;
	
	// Выполнить задачу.
	ВыполнитьОбработкуОповещения(ПараметрыОповещения.ПовторноеДействие, ПараметрыОповещения.ТипОперации);
	
КонецПроцедуры

// Обработчик оповещения ОбработатьДанныеВыполненияПослеОтветаНаВопрос.
//
// Параметры:
//   Ответ - Строка - Ответ от пользователя в диалоге вопроса 
//   ПараметрыОповещения - Структура:
//     * ТипОперации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТипОперацииНадЗадачей
//     * ПовторноеДействие - ОписаниеОповещения - метод, который будет вызван по завершении интерактивной обработки.
//
Процедура ОбработатьДанныеВыполненияПослеОтветаНаВопрос(Ответ, ПараметрыОповещения) Экспорт
	
	ТребуемоеИнтерактивноеДействие =
		ПараметрыОповещения.ПовторноеДействие.ДополнительныеПараметры.ТребуемоеИнтерактивноеДействие;
	ТребуемоеИнтерактивноеДействие.ЗадатьПроизвольныйВопрос = Истина;
	ТребуемоеИнтерактивноеДействие.Контекст = Ответ;
	
	// Выполнить задачу.
	ВыполнитьОбработкуОповещения(ПараметрыОповещения.ПовторноеДействие, ПараметрыОповещения.ТипОперации);
	
КонецПроцедуры

Процедура ОчиститьПолеУчастник(ТекущиеДанные)
	
	ТекущиеДанные.Участник = "";
	ТекущиеДанные.УчастникID = "";
	ТекущиеДанные.УчастникТип = "";
	
	ТекущиеДанные.ОсновнойОбъектАдресацииУчастник = "";
	ТекущиеДанные.ОсновнойОбъектАдресацииУчастникID = "";
	ТекущиеДанные.ОсновнойОбъектАдресацииУчастникТип = "";
	
	ТекущиеДанные.ДополнительныйОбъектАдресацииУчастник = "";
	ТекущиеДанные.ДополнительныйОбъектАдресацииУчастникID = "";
	ТекущиеДанные.ДополнительныйОбъектАдресацииУчастникТип = "";
	
КонецПроцедуры

// Конструктор структуры параметров для начала создания файла.
//
// Параметры:
//   СтрокаДереваПриложений - ДанныеФормыЭлементДерева - текущая строка дерева приложений.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ЯвляетсяСканКопией - Булево - файл является скан-копией.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПараметрыНачалаСозданияФайла
//
Функция ПараметрыНачалаСозданияФайла(СтрокаДереваПриложений, УникальныйИдентификаторФормы, ЯвляетсяСканКопией)
	
	РольФайлаИПриложение = РольФайлаИПриложение(СтрокаДереваПриложений);
	ПараметрыНачалаСоздания =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПараметрыНачалаСозданияФайла(
			РольФайлаИПриложение.РольФайлаID);
	ПараметрыНачалаСоздания.ЯвляетсяСканКопией = ЯвляетсяСканКопией;
	ПараметрыНачалаСоздания.ВладелецID = РольФайлаИПриложение.Приложение.ID;
	ПараметрыНачалаСоздания.ВладелецТип = РольФайлаИПриложение.Приложение.Тип;
	ПараметрыНачалаСоздания.УникальныйИдентификаторФормы = УникальныйИдентификаторФормы;
	ПараметрыНачалаСоздания.ВладелецПредставление = РольФайлаИПриложение.Приложение.Представление;
	ПараметрыНачалаСоздания.Владелец = РольФайлаИПриложение.Владелец;
	
	Возврат ПараметрыНачалаСоздания;
	
КонецФункции

// Проверяет выполненность действия, рекурсивно обходя строку действия и подчиненные.
//
// Параметры:
//   СтрокаДействия - ДанныеФормыЭлементДерева - проверяемая строка действия.
//   ВсеПодчиненныеВыполнены - Булево - неявно возвращаемое значение, Истина, если
//     действие и все подчиненные строки выполнены, и Ложь в обратном случае.
//
Процедура ПроверитьВсеПодчиненныеВыполнены(СтрокаДействия, ВсеПодчиненныеВыполнены)
	
	Если Не ЗначениеЗаполнено(СтрокаДействия.Результат) Тогда
		ВсеПодчиненныеВыполнены = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		ПроверитьВсеПодчиненныеВыполнены(СтрокаДействияТек, ВсеПодчиненныеВыполнены);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьДействие(ТаблицаФормы, СтрокаДействия)
	
	// Разворачиваются все строки, в которых не заполнен результат.
	// Если в действии несколько этапов, завершенные этапы не будут развернуты.
	Если ЕстьПодзадачи(СтрокаДействия) Тогда
		ТаблицаФормы.Свернуть(СтрокаДействия.ПолучитьИдентификатор());
	ИначеЕсли ВсеПодчиненныеВыполнены(СтрокаДействия) = Ложь Тогда
		ТаблицаФормы.Развернуть(СтрокаДействия.ПолучитьИдентификатор());
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		РазвернутьДействие(ТаблицаФормы, СтрокаДействияТек);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьДеревоОбработки(СтрокиДерева, ТаблицаФормы)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		РазвернутьДействие(ТаблицаФормы, СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьДеревоПриложений(СтрокиДерева, ТаблицаФормы)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ТаблицаФормы.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		
		Для Каждого СтрокаВложение Из СтрокаДерева.ПолучитьЭлементы() Цикл
			НужноРазворачивать = Истина;
			Если СтрокаВложение.ТипСтроки = "filerole" И Не СтрокаВложение.РольОбязательная Тогда
				НужноРазворачивать = Ложь;
			КонецЕсли;
			
			Если Не НужноРазворачивать Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаФормы.Развернуть(СтрокаВложение.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьСтрокиДерева(ТипДерева, СтрокиДерева, ТаблицаФормы, СостояниеРазвернут, КлючТекущейСтрокиДерева,
		ТекущаяСтрокаДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		КлючСтроки = КлючСтрокиДерева(ТипДерева, СтрокаДерева);
		
		Если СостояниеРазвернут[КлючСтроки] = Истина Или СостояниеРазвернут[КлючСтроки] = Неопределено Тогда
			// Развернем новые строки и строки, развернутые ранее.
			Если ТипДерева.ЭтоДеревоОбработки Тогда
				Если СтрокуДереваОбработкиНужноРазвернуть(СтрокаДерева) Тогда
					ТаблицаФормы.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
				КонецЕсли;
			Иначе
				ТаблицаФормы.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
			КонецЕсли;
		КонецЕсли;
		Если КлючТекущейСтрокиДерева = КлючСтроки Тогда
			ТекущаяСтрокаДерева = СтрокаДерева;
		КонецЕсли;
		
		РазвернутьСтрокиДерева(
			ТипДерева,
			СтрокаДерева.ПолучитьЭлементы(),
			ТаблицаФормы,
			СостояниеРазвернут,
			КлючТекущейСтрокиДерева,
			ТекущаяСтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

Функция РольФайлаИПриложение(ДанныеСтроки)
	
	Владелец = Неопределено;
	Приложение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО("", "");
	РольФайлаID = "";
	
	Если ДанныеСтроки.ТипСтроки = "file" Тогда
		
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		Если ДанныеРодителя <> Неопределено И ДанныеРодителя.ТипСтроки = "filerole" Тогда
			РольФайлаID = ДанныеРодителя.РольФайлаID;
			ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
		КонецЕсли;
		
		Если ДанныеРодителя <> Неопределено Тогда
			Владелец = ДанныеРодителя.Ссылка;
			Приложение.Наименование = ДанныеРодителя.Приложение;
			Приложение.ID = ДанныеРодителя.ПриложениеID;
			Приложение.Тип = ДанныеРодителя.ПриложениеТип;
			Приложение.Представление = ДанныеРодителя.ПредставлениеПриложения;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = "filerole" Тогда
		
		РольФайлаID = ДанныеСтроки.РольФайлаID;
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		
		Если ДанныеРодителя <> Неопределено Тогда
			Владелец = ДанныеРодителя.Ссылка;
			Приложение.Наименование = ДанныеРодителя.Приложение;
			Приложение.ID = ДанныеРодителя.ПриложениеID;
			Приложение.Тип = ДанныеРодителя.ПриложениеТип;
			Приложение.Представление = ДанныеРодителя.ПредставлениеПриложения;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = "application" Тогда
		
		Владелец = ДанныеСтроки.Ссылка;
		Приложение.Наименование = ДанныеСтроки.Приложение;
		Приложение.ID = ДанныеСтроки.ПриложениеID;
		Приложение.Тип = ДанныеСтроки.ПриложениеТип;
		Приложение.Представление = ДанныеСтроки.ПредставлениеПриложения;
		
		ПодчиненныеЭлементыПриложения = ДанныеСтроки.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыПриложения.Количество() > 0 Тогда
			
			ПервыйПодчиненныйЭлемент = ПодчиненныеЭлементыПриложения[0];
			Если ПервыйПодчиненныйЭлемент.ТипСтроки = "filerole" Тогда
				РольФайлаID = ПервыйПодчиненныйЭлемент.РольФайлаID;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РольФайлаИПриложение = Новый Структура("Владелец, Приложение, РольФайлаID", Владелец, Приложение, РольФайлаID);
	
	Возврат РольФайлаИПриложение;
	
КонецФункции

Функция СимволВозрастание()
	
	Возврат "↓";
	
КонецФункции

Функция СимволУбывание()
	
	Возврат "↑";
	
КонецФункции

Функция СортировкаПоПолюВозможна(ВозможныеПоляДляСортировки, ИмяПоля)
	
	Возврат (ВозможныеПоляДляСортировки[ИмяПоля] <> Неопределено);
	
КонецФункции

Функция СтрокуДереваОбработкиНужноРазвернуть(СтрокаДереваОбработки)
	
	Развернуть = Ложь;
	Если ЕстьПодзадачи(СтрокаДереваОбработки) Тогда
		Развернуть = Ложь;
	ИначеЕсли Не ВсеПодчиненныеВыполнены(СтрокаДереваОбработки) Тогда
		Развернуть = Истина;
	КонецЕсли;
	
	Возврат Развернуть;
	
КонецФункции

#КонецОбласти
