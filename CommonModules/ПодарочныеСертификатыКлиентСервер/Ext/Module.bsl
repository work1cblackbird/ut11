
#Область ПрограммныйИнтерфейс

// Вычисляет тип операции по подарочным сертификатам в зависимости от вида документа.
// 
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура, Структура - Текущий документ, имеющий свойство ссылка..
// Возвращаемое значение:
//  Число - 1 - Продажа
// 			2 - Возврат
// 			3 - Оплата
// 			4 - Аннулирование.
//
Функция ТипОперацииПоПодарочнымСертификатам(Объект) Экспорт
	ТипОперацииПоПодарочнымСертификатам = 0;
	ТипСсылкиОбъекта = ТипЗнч(Объект.Ссылка);
	Если ТипСсылкиОбъекта = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		ТипОперацииПоПодарочнымСертификатам = 1;
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатков")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		ТипОперацииПоПодарочнымСертификатам = 1;
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ТипОперацииПоПодарочнымСертификатам = 2;
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ЧекККМ") 
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.АктВыполненныхРабот")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ТипОперацииПоПодарочнымСертификатам = 3;
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.АннулированиеПодарочныхСертификатов") Тогда
		ТипОперацииПоПодарочнымСертификатам = 4;
	КонецЕсли;
	Возврат ТипОперацииПоПодарочнымСертификатам;
КонецФункции

// Вычисляет массив допустимых статусов по подарочным сертификатам в зависимости от вида документа.
// 
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура, Структура - Текущий документ, имеющий свойство ссылка..
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыПодарочныхСертификатов
//
Функция ДопустимыеСтатусыПодарочныхСертификатов(Объект) Экспорт
	ДопустимыеСтатусы = Новый Массив;
	
	ТипСсылкиОбъекта = ТипЗнч(Объект.Ссылка);
	Если ТипСсылкиОбъекта = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован"));
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатков")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковВзаиморасчетов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован"));
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован"));
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.ЧекККМ") 
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.АктВыполненныхРабот")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
		Или ТипСсылкиОбъекта = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован"));
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен"));
	ИначеЕсли ТипСсылкиОбъекта = Тип("ДокументСсылка.АннулированиеПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован"));
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Возвращен"));
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен"));
		ДопустимыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ПолностьюПогашен"));
	КонецЕсли;
	
	Возврат ДопустимыеСтатусы;
КонецФункции

// Данные необходимые для вычисления статуса сертификата нового образца.
//
// Возвращаемое значение:
//	 Структура:
//  	* Остаток - Число -
//  	* Номинал - Число -
//  	* ЧастичнаяОплата - Булево -
//  	* СтатусАктивации - Булево -
//  	* ОформленВозврат - Булево -
//  	* Аннулирован - Булево - 
//
Функция ДанныеДляВычисленияСтатуса() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("Остаток", 0);
	Данные.Вставить("Номинал", 0);
	Данные.Вставить("ЧастичнаяОплата", Ложь);
	Данные.Вставить("СтатусАктивации", Ложь);
	Данные.Вставить("ОформленВозврат", Ложь);
	Данные.Вставить("Аннулирован", Ложь);
	Возврат Данные;
КонецФункции

// По переданным данным вычисляет значение статуса подарочного сертификата 
// в виде которого установлен признак УчетПодарочныхСертификатов2_5.
// 
// Параметры:
//  Данные - см. ДанныеДляВычисленияСтатуса
// 
// Возвращаемое значение:
//	ПеречислениеСсылка.СтатусыПодарочныхСертификатов
Функция ВычислитьСтатусПодарочногоСертификата2_5(Данные) Экспорт
	
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован");
	Если Данные.СтатусАктивации Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован");
		Если Данные.Аннулирован Тогда
			Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Аннулирован");
		ИначеЕсли Данные.ОформленВозврат Тогда
			Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Возвращен");
		ИначеЕсли Данные.Остаток <= 0 Или
				Данные.ЧастичнаяОплата = Ложь И Данные.Остаток < Данные.Номинал Тогда
			Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ПолностьюПогашен");
		ИначеЕсли Данные.Остаток < Данные.Номинал Тогда
			Статус = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

// Функция определяет необходимость специальной обработки входных данных (в случае использования считывателя магнитных карт).
//
// Параметры:
//  КодКарты - Строка, Массив Из Строка - Полученный код подарочного сертификата.
//  ТипКода - ПеречислениеСсылка.ТипыКодовКарт - Тип кода полученного подарочного сертификата.
//
// Возвращаемое значение:
//  Булево - 
//
Функция НеобходимаПредобработкаДанных(КодКарты, ТипКода) Экспорт
	Предобработка = Ложь;
	Если  ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод")
		И ТипЗнч(КодКарты) = Тип("Массив") Тогда
		Предобработка = Истина;
	КонецЕсли;
	Возврат Предобработка;
КонецФункции

// По переданным данным о подарочном сертификате определяет возможность оформления возврата этого поларочного сертификата.
//
// Параметры:
//  ДанныеПодарочногоСертификата - см. ПодарочныеСертификатыВызовСервера.ИнициализироватьОписаниеПодарочногоСертификата 
//  ТекущаяДатаСеанса - Дата - Дата, на которую проверяется дата окончания действия подарочного сертификата.
// Возвращаемое значение:
//  Булево - 
//
Функция ПодарочныйСертификатМожноВернуть(ДанныеПодарочногоСертификата, ТекущаяДатаСеанса) Экспорт
	Результат = Ложь;

	Если Не ДанныеПодарочногоСертификата.УчетПодарочныхСертификатов2_5
			И ДанныеПодарочногоСертификата.СтатусИзИсторииПодарочныхСертификатов = ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован") 
		Или
			(ДанныеПодарочногоСертификата.УчетПодарочныхСертификатов2_5
			И ДанныеПодарочногоСертификата.СтатусАктивации
			И ДанныеПодарочногоСертификата.ДатаОкончанияДействия >= ТекущаяДатаСеанса
			И (ДанныеПодарочногоСертификата.ЧастичнаяОплата И ДанныеПодарочногоСертификата.Остаток > 0
				Или Не ДанныеПодарочногоСертификата.ЧастичнаяОплата И ДанныеПодарочногоСертификата.Остаток = ДанныеПодарочногоСертификата.Номинал)) Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти
