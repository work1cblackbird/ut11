#Область ПрограммныйИнтерфейс

// Вызывается для инициализации элементов и реквизитов формы, в которой используются упаковочные листы с иерархией.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	ЗаголовокНачальногоУровня - Строка - начало навигационной надписи, используемой для перехода между
//		разными уровнями вложенности упаковочных листов,
//	РежимПросмотраПоТоварам - Булево - признак режима отображения табличной части с упаковочными листами,
//		Истина - "По товарам", Ложь - "По товарным местам", по умолчанию Неопределено,
//	УпаковочныйЛистРодитель - ДокументСсылка.УпаковочныйЛист - в каком упаковочном листе сейчас находимся,
//		по умолчанию Неопределено.
//
Процедура ПриЧтенииСозданииФормыСУпаковочнымиЛистами(Форма,
	ТЧТовары, ЗаголовокНачальногоУровня, РежимПросмотраПоТоварам = Неопределено, УпаковочныйЛистРодитель = Неопределено) Экспорт
	
	Форма.ИспользоватьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьМаркируемаяПродукция") Тогда
		Форма.ИспользоватьУпаковочныеЛисты = Форма.ИспользоватьУпаковочныеЛисты И Не Форма.ЕстьМаркируемаяПродукция;
	КонецЕсли;
	
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	ИменаЭлементовФормы = ИменаЭлементовФормы(ИмяТЧТовары);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		"ДекорацияНавигацияОтступ, ДекорацияМест",
		"Видимость",
		Форма.ИспользоватьУпаковочныеЛисты);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовФормы.НомерСтроки,
		"Видимость",
		Не Форма.ИспользоватьУпаковочныеЛисты);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовФормы.ГруппаНоменклатураУпаковочныйЛист,
		"ОтображатьВШапке",
		Форма.ИспользоватьУпаковочныеЛисты);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовФормы.Номенклатура,
		"ОтображатьВШапке",
		Не Форма.ИспользоватьУпаковочныеЛисты);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаСканирование",
		"Видимость",
		Форма.ИспользоватьПодключаемоеОборудование
			И ПараметрыУказанияСерий(Форма).ИспользоватьСерииНоменклатуры);
			
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовФормы.НаУровеньВверх,
		"Доступность",
		Ложь);
	Если УпаковочныйЛистРодитель = Неопределено Тогда
		Форма.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
	Иначе
		Форма.УпаковочныйЛистРодитель = УпаковочныйЛистРодитель;
	КонецЕсли;
	
	ВсегоМест = 0;
	НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", Документы.УпаковочныйЛист.ПустаяСсылка()));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого Стр Из НайденныеСтроки Цикл
			ВсегоМест = ВсегоМест + Стр.КоличествоУпаковок;
		КонецЦикла;
		Если Форма.Объект.ВсегоМест <> ВсегоМест Тогда
			Форма.Объект.ВсегоМест = ВсегоМест;
			Форма.Модифицированность = Ложь
		КонецЕсли;
	КонецЕсли;
	
	РежимПросмотраПриИзменении(Форма, ТЧТовары, ЗаголовокНачальногоУровня, РежимПросмотраПоТоварам);
	
КонецПроцедуры

// Вызывается при изменении номенклатуры или упаковочного листа
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	ИмяПоля - Строка - "ТоварыУпаковочныйЛист" или "ТоварыНоменклатура",
//	КэшированныеЗначения - Структура - закешированные значения реквизитов формы,
//	СтруктураДействийСТекущейСтрокой - Структура - действия для обработки,
//	СтруктураДействийСДобавляемымиСтроками - Структура - для обработки новых строк, подчиненных упаковочному листу,
//		по умолчанию Неопределено,
//	ДополнятьСтрокамиПоУпЛистам - Булево - признак необходимости дополнить ТЧ строками,
//		которые подчинены упаковочному листу (при изменении упаковочного листа).
//
Процедура НоменклатураУпаковочныйЛистПриИзменении(Форма, ТЧТовары, ИмяПоля, КэшированныеЗначения,
	СтруктураДействийСТекущейСтрокой, СтруктураДействийСДобавляемымиСтроками = Неопределено, ДополнятьСтрокамиПоУпЛистам = Истина) Экспорт
	
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	ИменаЭлементовФормы = ИменаЭлементовФормы(ИмяТЧТовары);
	
	ТаблицаФормыТовары = Форма.Элементы[ИмяТЧТовары]; // ТаблицаФормы
	ТекущаяСтрока = ТЧТовары.НайтиПоИдентификатору(ТаблицаФормыТовары.ТекущаяСтрока); // ДокументТабличнаяЧастьСтрока.РасходныйОрдерНаТовары.ОтгружаемыеТовары, ДанныеФормыЭлементКоллекции
	
	Если Не Форма.ИспользоватьУпаковочныеЛисты Тогда
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействийСТекущейСтрокой, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если ИмяПоля = ИменаЭлементовФормы.УпаковочныйЛист
			И КэшированныеЗначения.УпаковочныйЛист = ТекущаяСтрока.УпаковочныйЛист
		Или ИмяПоля = ИменаЭлементовФормы.Номенклатура
			И КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда
		
		Возврат;
		
	КонецЕсли;

	Если ИмяПоля = ИменаЭлементовФормы.УпаковочныйЛист Тогда
		ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		ТекущаяСтрока.УпаковочныйЛист = Документы.УпаковочныйЛист.ПустаяСсылка();
	КонецЕсли;
	
	Если ИмяПоля = ИменаЭлементовФормы.УпаковочныйЛист
		И ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист)
		И ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛист", ТекущаяСтрока.УпаковочныйЛист)).Количество() > 1 Тогда
		
		ТекстОшибки = НСтр("ru='Нельзя выбрать %УпаковочныйЛист%, т.к. он уже включен в состав документа.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", ТекущаяСтрока.УпаковочныйЛист);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ТекущаяСтрока.УпаковочныйЛист = КэшированныеЗначения.УпаковочныйЛист;
		Возврат;
		
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	
	Если ИмяПоля = ИменаЭлементовФормы.УпаковочныйЛист
		И ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
		Если КэшированныеЗначения.УпаковочныйЛист = ТекущаяСтрока.УпаковочныйЛист Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока.ЭтоУпаковочныйЛист  = Истина;
		ТекущаяСтрока.Количество          = 1;
		ТекущаяСтрока.КоличествоУпаковок  = 1;
		ТекущаяСтрока.Номенклатура        = Справочники.Номенклатура.ПустаяСсылка();
		ТекущаяСтрока.СтатусУказанияСерий = 0;
		
		Если ПараметрыУказанияСерий(Форма).ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
			ТекущаяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		КонецЕсли;

		
		Если ДополнятьСтрокамиПоУпЛистам Тогда
			ЕстьОшибки = Ложь;
			
			СтрокиДляОбработки.Добавить(ТекущаяСтрока);
			ДополнитьСтрокамиПоУпаковочнымЛистам(Форма, ТЧТовары, СтрокиДляОбработки, ЕстьОшибки,,Истина);
			СтрокиДляОбработки.Удалить(0);
			
			Если ЕстьОшибки Тогда
				ТекущаяСтрока.УпаковочныйЛист = КэшированныеЗначения.УпаковочныйЛист;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПересчитатьКоличествоМест(Форма, ТЧТовары);
		
	Иначе
		Если КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока.ЭтоУпаковочныйЛист = Ложь;
		ТекущаяСтрока.Количество         = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		ТекущаяСтрока.УпаковочныйЛист = Документы.УпаковочныйЛист.ПустаяСсылка();
		ТекущаяСтрока.ДополнительнаяИнформация = "";
		ТекущаяСтрока.УпаковочныйЛистКод = "";
		ТекущаяСтрока.УпаковочныйЛистДата = Дата(1,1,1);
		ТекущаяСтрока.КоличествоЗаполненныхПодчиненныхПозиций = 0;
		ТекущаяСтрока.ПризнакКартинкиУпаковочногоЛиста = 0;
		Если ИмяПоля = "ТоварыНоменклатура"
			И ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛистРодитель) Тогда
			НайденныеСтроки = Форма.УпаковочныеЛисты.НайтиСтроки(
				Новый Структура("УпаковочныйЛист", ТекущаяСтрока.УпаковочныйЛистРодитель));
			ТекущаяСтрока.УпаковочныйЛистРодительКод = НайденныеСтроки[0].УпаковочныйЛистКод;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КэшированныеЗначения.УпаковочныйЛист <> ТекущаяСтрока.УпаковочныйЛист
		И ЗначениеЗаполнено(КэшированныеЗначения.УпаковочныйЛист) Тогда
		
		Если ПараметрыУказанияСерий(Форма).ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧСерии Тогда
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары, КэшированныеЗначения.УпаковочныйЛист, , , "Удалить");
		Иначе
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары,
				КэшированныеЗначения.УпаковочныйЛист, Форма.Объект[ПараметрыУказанияСерий(Форма).ИмяТЧСерии], , "Удалить");
		КонецЕсли;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, ПараметрыУказанияСерий(Форма), СтрокиДляОбработки);
	
	// Нужно проверить, очистить упаковку, характеристику для текущей строки
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействийСТекущейСтрокой, КэшированныеЗначения);
	//   и перезаполнить другие служебные реквизиты
	Если СтруктураДействийСДобавляемымиСтроками = Неопределено Тогда
		СтруктураДействийСДобавляемымиСтроками = Новый Структура;		
	КонецЕсли;
	ЗаполнитьСлужебныеРеквизиты(Форма, ТЧТовары, СтруктураДействийСДобавляемымиСтроками, СтрокиДляОбработки, Ложь, КэшированныеЗначения);
		
	Если ТекущаяСтрока.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛистРодитель) Тогда
		
		// Редактируемая служебная строка перестает быть служебной
		ТекущаяСтрока.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается для инициализации элементов и реквизитов формы, в которой используются упаковочные листы с иерархией.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	ЗаголовокНачальногоУровня - Строка - начало навигационной надписи, используемой для перехода между
//		разными уровнями вложенности упаковочных листов,
//	РежимПросмотраПоТоварам - Булево - признак режима отображения табличной части с упаковочными листами,
//		Истина - "По товарам", Ложь - "По товарным местам", по умолчанию Неопределено.
//
Процедура РежимПросмотраПриИзменении(Форма, ТЧТовары, ЗаголовокНачальногоУровня, РежимПросмотраПоТоварам = Неопределено) Экспорт
	
	Если Не Форма.ИспользоватьУпаковочныеЛисты Тогда
		Форма.МаксимальныйНомерСтроки = ТЧТовары.Количество();
		Возврат;
	КонецЕсли;
	
	Если РежимПросмотраПоТоварам = Неопределено Тогда
		РежимПросмотраПоТоварам = Форма.Объект.РежимПросмотраПоТоварам;
	КонецЕсли;
	
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	ИменаЭлементовФормы = ИменаЭлементовФормы(ИмяТЧТовары);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		ИменаЭлементовФормы.КартинкаУпаковочногоЛиста + "," + ИменаЭлементовФормы.НаУровеньВверх + ",
		|НадписьНавигация," + ИменаЭлементовФормы.Распаковать + "," + ИменаЭлементовФормы.Упаковать + ",
		|" + ИменаЭлементовФормы.ДопИнфоУпаковочныйЛист,
		"Видимость",
		Не РежимПросмотраПоТоварам);
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		"ОтступНавигация",
		"Видимость",
		РежимПросмотраПоТоварам);
		
	Форма.Элементы[ИменаЭлементовФормы.ГруппаНоменклатураУпаковочныйЛист].ОтображатьВШапке = Не РежимПросмотраПоТоварам;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		"ДекорацияНавигацияОтступ," + ИменаЭлементовФормы.УпаковочныйЛистРодитель,
		"Видимость",
		РежимПросмотраПоТоварам);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		"ДекорацияНавигацияОтступ",
		"РастягиватьПоГоризонтали",
		РежимПросмотраПоТоварам);
	
	Форма.Элементы[ИменаЭлементовФормы.Номенклатура].ОтображатьВШапке = РежимПросмотраПоТоварам;
	
	Если РежимПросмотраПоТоварам Тогда
		Если Форма.Элементы[ИмяТЧТовары].ОтборСтрок <> Неопределено
			И Форма.Элементы[ИмяТЧТовары].ОтборСтрок.Свойство("ТребуетсяОбработка") Тогда
			Форма.Элементы[ИмяТЧТовары].ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоУпаковочныйЛист, ТребуетсяОбработка", Ложь, 1);
		Иначе
			Форма.Элементы[ИмяТЧТовары].ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоУпаковочныйЛист", Ложь);
		КонецЕсли;
		
		Форма.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
		ПеренумероватьСтроки(Форма, ТЧТовары);
		
	Иначе
		
		ТаблицаФормыТовары = Форма.Элементы[ИмяТЧТовары]; // ТаблицаФормы
		ИдентификаторСтроки = ТаблицаФормыТовары.ТекущаяСтрока;
		Если ИдентификаторСтроки <> Неопределено Тогда
			ТекущаяСтрока = ТЧТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ТекущаяСтрока <> Неопределено Тогда
				Форма.УпаковочныйЛистРодитель = ТекущаяСтрока.УпаковочныйЛистРодитель;
			КонецЕсли;
		КонецЕсли;
		
		ПриПереходеНаДругойУровень(Форма, ТЧТовары,
			Форма.УпаковочныйЛистРодитель, ЗаголовокНачальногоУровня); // здесь же и перенумерация
		
	КонецЕсли;
	
КонецПроцедуры

// Вместо строки-упаковочного листа в ТЧ будет отображен состав этого упаковочного листа,
//		вложенные упаковочные листы не разворачиваются.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий:
// 		* Объект - ДанныеФормыСтруктура -:
// 			** Серии - ДанныеФормыКоллекция -
//
Процедура РаспаковатьУпаковочныйЛист(Форма) Экспорт
	
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	
	МинимальныйНомерВТЧ = Форма.Объект[ИмяТЧТовары].Количество();
	ЕстьРаспакованныеСтроки = Ложь;
	Для Каждого Идентификатор Из Форма.Элементы[ИмяТЧТовары].ВыделенныеСтроки Цикл
		
		Стр = Форма.Объект[ИмяТЧТовары].НайтиПоИдентификатору(Идентификатор);
		Если Не Стр.ЭтоУпаковочныйЛист Тогда
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
 			НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(Стр,КэшированныеЗначения,ПараметрыУказанияСерий(Форма)); 			
			
			Стр.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
			Стр.УпаковочныйЛистРодительКод = "";
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Форма.Объект,
																							ПараметрыУказанияСерий(Форма), 
																							Стр.ПолучитьИдентификатор(),
																							КэшированныеЗначения);
			ЕстьРаспакованныеСтроки = Истина;
		Иначе
			
			НайденныеСтроки = Форма.Объект[ИмяТЧТовары].НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель",Стр.УпаковочныйЛист));
			Для Каждого ВложеннаяСтрока Из НайденныеСтроки Цикл
				Если ВложеннаяСтрока.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста Тогда
					Форма.Объект[ИмяТЧТовары].Удалить(ВложеннаяСтрока);
					Прервать;
				КонецЕсли;
				ВложеннаяСтрока.УпаковочныйЛистРодитель = Форма.УпаковочныйЛистРодитель;
				ВложеннаяСтрока.УпаковочныйЛистРодительКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.УпаковочныйЛистРодитель,"Код");
				ИндексВложеннойСтроки = Форма.Объект[ИмяТЧТовары].Индекс(ВложеннаяСтрока);
				Форма.Объект[ИмяТЧТовары].Сдвинуть(ИндексВложеннойСтроки, Форма.Объект[ИмяТЧТовары].Индекс(Стр) - ИндексВложеннойСтроки);
			КонецЦикла;
			МинимальныйНомерВТЧ = Мин(МинимальныйНомерВТЧ, Стр.НомерСтрокиОтображаемый);
			Форма.Объект[ИмяТЧТовары].Удалить(Стр);
			ЕстьРаспакованныеСтроки = Истина;
			
			Если ПараметрыУказанияСерий(Форма).ИмяТЧТовары <> ПараметрыУказанияСерий(Форма).ИмяТЧСерии Тогда
				НайденныеСтроки = Форма.Объект.Серии.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель",Стр.УпаковочныйЛист));
				Для Каждого ВложеннаяСтрока Из НайденныеСтроки Цикл
					ВложеннаяСтрока.УпаковочныйЛистРодитель = Форма.УпаковочныйЛистРодитель;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРаспакованныеСтроки Тогда
		ПеренумероватьСтроки(Форма, Форма.Объект[ИмяТЧТовары], МинимальныйНомерВТЧ);
		ЗаполнитьСлужебныеРеквизиты(Форма, Форма.Объект[ИмяТЧТовары], Новый Структура);
		ПересчитатьКоличествоМест(Форма, Форма.Объект[ИмяТЧТовары]);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, ПараметрыУказанияСерий(Форма));
	
КонецПроцедуры

// Выделенные строки включаются в новый упаковочный лист, в ТЧ отображаются в виде строки-упаковочного листа.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий:
// 		* Объект - ДанныеФормыСтруктура -:
// 			** Серии - ДанныеФормыКоллекция -
//
// Возвращаемое значение:
//   - ДокументСсылка.УпаковочныйЛист - ссылка на созданный упаковочный лист.
//
Функция УпаковатьСервер(Форма) Экспорт
	
	Перем КэшированныеЗначения;
	
	Если Не Форма.ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	
	СтрокиОбъединяемые = Новый Массив;
	
	ДокОбъект = Документы.УпаковочныйЛист.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	ДокОбъект.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
	
	Если ПараметрыУказанияСерий(Форма).ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
		ДокОбъект.Упаковал = Пользователи.ТекущийПользователь();
		ДокОбъект.СкладУпаковки = Форма.Объект.Склад;
		ДокОбъект.Основание = ОснованиеУпаковочногоЛистаПоОрдеру(Форма.Объект);
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ДокОбъект.Заблокировать();
	
	МинимальныйИндекс = Форма.Объект[ИмяТЧТовары].Количество();
	
	ЕстьНеотгружаемые = Ложь;
	Для Каждого Идентификатор Из Форма.Элементы[ИмяТЧТовары].ВыделенныеСтроки Цикл
		Стр = Форма.Объект[ИмяТЧТовары].НайтиПоИдентификатору(Идентификатор); // ДокументТабличнаяЧастьСтрока.РасходныйОрдерНаТовары.ОтгружаемыеТовары, ДанныеФормыЭлементКоллекции
		Если Стр.Свойство("НеОтгружать") И Стр.НеОтгружать Тогда
			ЕстьНеотгружаемые = Истина;
			Продолжить;
		КонецЕсли;
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(Стр, КэшированныеЗначения, ПараметрыУказанияСерий(Форма));
		СтрокиОбъединяемые.Добавить(Стр);
		Если Стр.ЭтоУпаковочныйЛист Тогда
			РекурсивноОбойтиПодчиненныеСтроки(Форма.Объект[ИмяТЧТовары], Стр.УпаковочныйЛист, , СтрокиОбъединяемые);
		КонецЕсли;
		Стр.УпаковочныйЛистРодитель = ДокОбъект.Ссылка;
		Стр.УпаковочныйЛистРодительКод = ДокОбъект.Код;
		
		Если ПараметрыУказанияСерий(Форма).ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
			Стр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		КонецЕсли;
		
		МинимальныйИндекс = Мин(МинимальныйИндекс, Форма.Объект[ИмяТЧТовары].Индекс(Стр));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Форма.Объект, ПараметрыУказанияСерий(Форма), Идентификатор, КэшированныеЗначения);
	КонецЦикла;
	Если ЕстьНеотгружаемые Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неотгружаемые строки не будут добавлены в упаковочный лист.'"));
	КонецЕсли;

	Если СтрокиОбъединяемые.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МинимальныйНомер = Форма.Объект[ИмяТЧТовары][МинимальныйИндекс].НомерСтрокиОтображаемый;
	
	ТаблицаТовары = Форма.Объект[ИмяТЧТовары].Выгрузить(СтрокиОбъединяемые);
	Если ТаблицаТовары.Колонки.Найти("Назначение") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаТовары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", ДокОбъект.Ссылка));
	Для Каждого СтрокаТаблицыТовары Из НайденныеСтроки Цикл
		СтрокаТаблицыТовары.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
	КонецЦикла;
	Если ПараметрыУказанияСерий(Форма).ИмяТЧТовары <> ПараметрыУказанияСерий(Форма).ИмяТЧСерии Тогда
		
		ТаблицаТовары.Свернуть("Номенклатура,Характеристика,Назначение,Упаковка,УпаковочныйЛист,
			|ЭтоУпаковочныйЛист,УпаковочныйЛистРодитель",
			"Количество,КоличествоУпаковок");
		Запрос = Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Товары.Количество,
		|	Товары.КоличествоУпаковок,
		|	Товары.Номенклатура,
		|	Товары.Упаковка,
		|	Товары.УпаковочныйЛист,
		|	Товары.ЭтоУпаковочныйЛист,
		|	Товары.Характеристика,
		|	Товары.Назначение,
		|	ВЫБОР
		|		КОГДА Товары.УпаковочныйЛистРодитель = &Ссылка
		|			ТОГДА ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|		ИНАЧЕ Товары.УпаковочныйЛистРодитель
		|	КОНЕЦ КАК УпаковочныйЛистРодитель
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ТаблицаТовары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Количество,
		|	Серии.КоличествоУпаковок,
		|	Серии.Номенклатура,
		|	Серии.Серия,
		|	Серии.Упаковка,
		|	Серии.Характеристика,
		|	Серии.Назначение,
		|	ВЫБОР
		|		КОГДА Серии.УпаковочныйЛистРодитель = &Ссылка
		|			ТОГДА ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|		ИНАЧЕ Серии.УпаковочныйЛистРодитель
		|	КОНЕЦ КАК УпаковочныйЛистРодитель
		|ПОМЕСТИТЬ Серии
		|ИЗ
		|	&ТаблицаСерии КАК Серии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Ссылка,
		|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент
		|ПОМЕСТИТЬ Упаковки
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В
		|			(ВЫБРАТЬ
		|				Товары.Упаковка
		|			ИЗ
		|				Товары)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Назначение КАК Назначение,
		|	ЕСТЬNULL(Серии.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.УпаковочныйЛист,
		|	Товары.ЭтоУпаковочныйЛист,
		|	Товары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество,
		|	ЕСТЬNULL(Серии.Количество, Товары.Количество) / ЕСТЬNULL(Упаковки.Коэффициент, 1) КАК КоличествоУпаковок
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
		|		ПО Товары.Номенклатура = Серии.Номенклатура
		|			И Товары.Характеристика = Серии.Характеристика
		|			И Товары.УпаковочныйЛистРодитель = Серии.УпаковочныйЛистРодитель
		|			И &УсловиеПоУпаковкам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Упаковки КАК Упаковки
		|		ПО Товары.Упаковка = Упаковки.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры", Неопределено));
		Если ПараметрыУказанияСерий(Форма).ПоляСвязи.Найти("Упаковка") = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУпаковкам", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУпаковкам", "Товары.Упаковка = Серии.Упаковка");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
		
		Если ЕстьНеотгружаемые Тогда
			ТаблицаСерии = Форма.Объект.Серии.Выгрузить(Новый Структура("НеОтгружать", 0));//ТаблицаЗначений
		Иначе
			ТаблицаСерии = Форма.Объект.Серии.Выгрузить();//ТаблицаЗначений
		КонецЕсли;
		Если ТаблицаСерии.Колонки.Найти("Назначение") = Неопределено Тогда
			ТаблицаСерии.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		КонецЕсли;
		Запрос.УстановитьПараметр("ТаблицаСерии", ТаблицаСерии);
		
		Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
		ТаблицаТовары = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ДокОбъект.Товары.Загрузить(ТаблицаТовары);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОбъект, Документы.УпаковочныйЛист.ПараметрыУказанияСерий(ДокОбъект));
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ДокОбъект.Разблокировать();
	
	НоваяСтрока = Форма.Объект[ИмяТЧТовары].Вставить(МинимальныйИндекс); // ДокументТабличнаяЧастьСтрока.РасходныйОрдерНаТовары.ОтгружаемыеТовары, ДанныеФормыЭлементКоллекции
	НоваяСтрока.ЭтоУпаковочныйЛист = Истина;
	НоваяСтрока.УпаковочныйЛист = ДокОбъект.Ссылка;
	НоваяСтрока.УпаковочныйЛистРодитель = Форма.УпаковочныйЛистРодитель;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.КоличествоУпаковок = 1;
	
	Если ПараметрыУказанияСерий(Форма).ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
		НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;	
	КонецЕсли;	
		
	ЗаполнитьСлужебныеРеквизиты(Форма, Форма.Объект[ИмяТЧТовары], Новый Структура, НоваяСтрока, Ложь);
	
	ПеренумероватьСтроки(Форма, Форма.Объект[ИмяТЧТовары], МинимальныйНомер);
	
	ПересчитатьКоличествоМест(Форма, Форма.Объект[ИмяТЧТовары]);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

// Условное оформление для ТЧ с упаковочными листами.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ИмяТЧ - Строка - имя проверяемой табличной части, по умолчанию "Товары".
//
Процедура УстановитьУсловноеОформлениеСУчетомУпаковочныхЛистов(Форма, ИмяТЧ = "Товары") Экспорт
	
	ПутьКРеквизитуЭтоУпаковочныйЛист = "Объект." + ИмяТЧ + ".ЭтоУпаковочныйЛист";
	ИменаЭлементовФормы = ИменаЭлементовФормы(ИмяТЧ);
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.УпаковочныйЛист);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.ДопИнфоУпаковочныйЛист);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.УпаковочныйЛистКод);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.Номенклатура);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.ДопИнфоНоменклатура);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.НоменклатураКод);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.НоменклатураАртикул);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<артикул не используется>'"));
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.Характеристика);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.НоменклатураЕдиницаИзмерения);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'место'"));
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.Упаковка);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементовФормы.КоличествоУпаковок);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКРеквизитуЭтоУпаковочныйЛист);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Проверка заполнения с учетом особенностей ТЧ с упаковочными листами
// Параметры:
//	Объект	- ФормаКлиентскогоПриложения - форма, содержит в том числе:
//				* Ссылка - ДокументСсылка - проверяемый документ
//			- ДокументОбъект - проверяемый документ
//	ПроверяемыеРеквизиты - Массив - имена реквизитов, требующих проверки,
//	МассивНепроверяемыхРеквизитов - Массив - имена реквизитов, которые нужно исключить из платформенной проверки,
//	Отказ - Булево - признак ошибки проверки,
//	ИмяТЧ - Строка - имя проверяемой табличной части, по умолчанию "Товары".
//
Процедура ПроверитьЗаполнениеТЧСУпаковочнымиЛистами(Объект, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ, ИмяТЧ = "Товары") Экспорт
	
	ПоляЗапроса = "";
	ДлинаИмениТЧ = СтрДлина(ИмяТЧ);
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	КонецЕсли;
	
	РеквизитыТЧДляПроверки = Новый Массив;
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если МассивНепроверяемыхРеквизитов.Найти(Реквизит) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(Реквизит, ДлинаИмениТЧ + 1) = ИмяТЧ +"." Тогда
			МассивНепроверяемыхРеквизитов.Добавить(Реквизит);
			Если Реквизит <> ИмяТЧ + ".УпаковочныйЛист"
				И Реквизит <> ИмяТЧ + ".Количество" Тогда
				РеквизитыТЧДляПроверки.Добавить(Сред(Реквизит, ДлинаИмениТЧ + 2, СтрДлина(Реквизит) - ДлинаИмениТЧ - 1));
				ПоляЗапроса = ПоляЗапроса + "
					|" + Реквизит + ",";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.ПоляЗапроса,
	|	Товары.Номенклатура,
	|	Товары.УпаковочныйЛист,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.ЭтоУпаковочныйЛист,
	|	Товары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.УпаковочныйЛист,
	|	ИСТИНА КАК ЕстьДубли
	|ПОМЕСТИТЬ ВТУпаковочныеЛистыСОшибками
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.УпаковочныйЛист
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.УпаковочныйЛистРодитель КАК УпаковочныйЛист,
	|	МАКСИМУМ(ЕСТЬNULL(ВТУпаковочныеЛистыСОшибками.ЕстьДубли, ЛОЖЬ)) КАК ЕстьДубли,
	|	СУММА(ВЫБОР
	|			КОГДА Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И Товары.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЗаполненныхСтрок,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУпаковочныеЛистыСОшибками КАК ВТУпаковочныеЛистыСОшибками
	|		ПО Товары.УпаковочныйЛистРодитель = ВТУпаковочныеЛистыСОшибками.УпаковочныйЛист
	|ГДЕ
	|	Товары.УпаковочныйЛистРодитель <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.УпаковочныйЛистРодитель
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ЕСТЬNULL(ВТУпаковочныеЛистыСОшибками.ЕстьДубли, ЛОЖЬ)) = ИСТИНА
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						ИЛИ Товары.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ПоляЗапроса,
	|	Товары.НомерСтроки
	|	
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.ЭтоУпаковочныйЛист
	|	И Товары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = 0";
	
	ПоляЗапроса = СтрЗаменить(ПоляЗапроса, ИмяТЧ + ".", "Товары.");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Товары.ПоляЗапроса,",ПоляЗапроса);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТЧ].Выгрузить());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[2]; // РезультатЗапроса
	Выборка = Результат.Выбрать();
	
	ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Номенклатура");
		
		Если Выборка.ЕстьДубли Тогда
			ТекстОшибки = НСтр("ru='%УпаковочныйЛист% указан в документе несколько раз. Удалите дублирующиеся строки с упаковочными листами, используя режим просмотра ""По товарным местам"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", Выборка.УпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, Поле, "Объект",Отказ);
		КонецЕсли;
		Если Выборка.КоличествоЗаполненныхСтрок = 0 Тогда
			ТекстОшибки = НСтр("ru='%УпаковочныйЛист%: состав не заполнен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", Выборка.УпаковочныйЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ИмяТЧ, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = МассивРезультатов[3]; // РезультатЗапроса
	Выборка = Результат.Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		
		Для Каждого Реквизит Из РеквизитыТЧДляПроверки Цикл
			Если Не ЗначениеЗаполнено(Выборка[Реквизит]) Тогда
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""%Реквизит%"" в строке %НомерСтроки% списка ""%ИмяТЧ%"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяТЧ%", ПредставлениеТЧ);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Реквизит%", МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[Реквизит].Синоним);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, Реквизит);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Определяет упаковочные листы, у которых закешированный в ордере состав не совпадает с содержимым,
//	сохраненным в упаковочном листе, синхронизирует такие упаковочные листы с ордером.
// Параметры:
//	ОрдерСсылка - ДокументСсылка.РасходныйОрдерНаТовары - ордер для синхронизации,
//	ИспользоватьАдресноеХранение - Булево - признак использования адресного хранения на складе или в помещении.
// 
// Возвращаемое значение:
//   - Массив - ссылки на упаковочные листы, ТЧ которых потребовалось синхронизировать.
//
Функция СинхронизироватьУпаковочныеЛистыСРасходнымОрдером(ОрдерСсылка, ИспользоватьАдресноеХранение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.УпаковочныйЛист КАК УпаковочныйЛист
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ЭтоУпаковочныйЛист
	|	И ТаблицаТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Упаковка,
	|	1 КАК Количество,
	|	1 КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТаблицаТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ТаблицаТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ТаблицаТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ЭтоУпаковочныйЛист
	|	И ТаблицаТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка),
	|	ТаблицаТовары.УпаковочныйЛистРодитель
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.ЭтоУпаковочныйЛист
	|	И ТаблицаТовары.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)
	|";
	
	РеквизитыОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрдерСсылка, "Статус, Склад");
	
	Запрос.УстановитьПараметр("Ссылка",ОрдерСсылка);
	Запрос.УстановитьПараметр("Статус",РеквизитыОрдера.Статус);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УпаковочныеЛисты = МассивРезультатов[0].Выгрузить().ВыгрузитьКолонку("УпаковочныйЛист");
	Результат = МассивРезультатов[1]; // РезультатЗапроса
	Товары = Результат.Выгрузить();
	Товары.Колонки.Добавить("УпаковочныйЛистВерхнегоУровня", Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист"));
	
	ТоварыДляПроверкиИзменений = Товары.СкопироватьКолонки();
	
	Для Каждого УпаковочныйЛист Из УпаковочныеЛисты Цикл
		СтрокиУпаковочногоЛиста = Новый Массив;
		РекурсивноОбойтиПодчиненныеСтроки(Товары, УпаковочныйЛист, , СтрокиУпаковочногоЛиста);
		ТоварыПоУпаковочномуЛисту = Товары.Скопировать(СтрокиУпаковочногоЛиста);
		ТоварыПоУпаковочномуЛисту.ЗаполнитьЗначения(УпаковочныйЛист, "УпаковочныйЛистВерхнегоУровня");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТоварыПоУпаковочномуЛисту, ТоварыДляПроверкиИзменений);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.УпаковочныйЛистВерхнегоУровня КАК Ссылка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.УпаковочныйЛист,
	|	ВЫБОР
	|		КОГДА Товары.УпаковочныйЛистРодитель = Товары.УпаковочныйЛистВерхнегоУровня
	|			ТОГДА ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|		ИНАЧЕ Товары.УпаковочныйЛистРодитель
	|	КОНЕЦ КАК УпаковочныйЛистРодитель
	|ПОМЕСТИТЬ ТоварыДляПроверкиИзменений
	|ИЗ
	|	&ТоварыДляПроверкиИзменений КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка
	|ПОМЕСТИТЬ ПерезаполнитьТЧ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Характеристика КАК Характеристика,
	|		Товары.Серия КАК Серия,
	|		Товары.Упаковка КАК Упаковка,
	|		Товары.Количество КАК Количество,
	|		Товары.УпаковочныйЛист КАК УпаковочныйЛист,
	|		Товары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель
	|	ИЗ
	|		Документ.УпаковочныйЛист.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В(&УпаковочныеЛисты)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Ссылка,
	|		Товары.Номенклатура,
	|		Товары.Характеристика,
	|		Товары.Серия,
	|		Товары.Упаковка,
	|		-Товары.Количество,
	|		Товары.УпаковочныйЛист,
	|		Товары.УпаковочныйЛистРодитель
	|	ИЗ
	|		ТоварыДляПроверкиИзменений КАК Товары) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.УпаковочныйЛистРодитель,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.УпаковочныйЛист
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПерезаполнитьТЧ.Ссылка
	|ИЗ
	|	ПерезаполнитьТЧ КАК ПерезаполнитьТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПерезаполнитьОснование.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УпаковочныйЛист КАК ПерезаполнитьОснование
	|ГДЕ
	|	ПерезаполнитьОснование.Ссылка В(&УпаковочныеЛисты)
	|	И ПерезаполнитьОснование.Основание <> &Основание
	|	И НЕ ПерезаполнитьОснование.Ссылка В
	|				(ВЫБРАТЬ
	|					ПерезаполнитьТЧ.Ссылка
	|				ИЗ
	|					ПерезаполнитьТЧ)"; 
	
	Основание = ОснованиеУпаковочногоЛистаПоОрдеру(ОрдерСсылка);
	
	Запрос.УстановитьПараметр("УпаковочныеЛисты",УпаковочныеЛисты);
	Запрос.УстановитьПараметр("ТоварыДляПроверкиИзменений", ТоварыДляПроверкиИзменений);
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Заблокировать();
		ДокОбъект.Основание = Основание;
		ДокОбъект.Записать();
	КонецЦикла;
	
	УпаковочныеЛисты = Результат[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Результат[2].Пустой() Тогда
		УпаковочныеЛисты = Новый Массив;
	КонецЕсли;
	
	Для Каждого Ссылка Из УпаковочныеЛисты Цикл
		
		ТоварыДляЗагрузки = ТоварыДляПроверкиИзменений.Скопировать(Новый Структура("УпаковочныйЛистВерхнегоУровня",Ссылка));
		Для Каждого Стр Из ТоварыДляЗагрузки Цикл
			Если Стр.УпаковочныйЛистРодитель = Ссылка Тогда
				Стр.УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		ДокОбъект = Ссылка.ПолучитьОбъект();
		ДокОбъект.Заблокировать();
		ДокОбъект.Упаковал = Пользователи.ТекущийПользователь();
		ДокОбъект.СкладУпаковки = РеквизитыОрдера.Склад;
		ДокОбъект.Основание = Основание;
		ДокОбъект.Товары.Загрузить(ТоварыДляЗагрузки);
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокОбъект, Документы.УпаковочныйЛист);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокОбъект, ПараметрыУказанияСерий);
		ДокОбъект.Записать();
		
	КонецЦикла;
	
	Возврат УпаковочныеЛисты;
	
КонецФункции

// Дополняет ТЧТовары строками упаковочного листа, вызывается при изменении номенклатуры или упаковочного листа,
//		проверяет повторное включение упаковочных листов в ТЧТовары.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	СтрокиДляОбработкиОбъединяемые - Массив - обрабатываемые строки ТЧТовары,
//		также в этот массив собираются строки ТЧ, дополненные из упаковочного листа,
//	ЕстьОшибки - Булево - признак наличия ошибок при выполнении процедуры, по умолчанию Ложь,
//	ОшибкиВЖурналРегистрации - Булево - признак того, что ошибки нужно записать в журнал регистрации,
//		по умолчанию ложь,
//	ИсключитьИзПроверкиПервыйУпЛист - Булево - признак того, что первый упаковочный лист из СтрокиДляОбработкиОбъединяемые,
//		нужно исключить из проверки, по умолчанию ложь.
//
Процедура ДополнитьСтрокамиПоУпаковочнымЛистам(Форма,
	ТЧТовары, СтрокиДляОбработкиОбъединяемые, ЕстьОшибки = Ложь, ОшибкиВЖурналРегистрации = Ложь, ИсключитьИзПроверкиПервыйУпЛист = Ложь) Экспорт
	
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	
	Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Ссылка
		|ПОМЕСТИТЬ ВТУпаковочныеЛистыСОшибками
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.УпаковочныйЛист В(&УпаковочныеЛистыДокумента)
		|	И НЕ УпаковочныйЛистТовары.УпаковочныйЛист = &ИсключаемыйУпаковочныйЛист
		|	И УпаковочныйЛистТовары.Ссылка В(&УпаковочныеЛисты)
		|
		|СГРУППИРОВАТЬ ПО
		|	УпаковочныйЛистТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУпаковочныеЛистыСОшибками.Ссылка
		|ИЗ
		|	ВТУпаковочныеЛистыСОшибками КАК ВТУпаковочныеЛистыСОшибками
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УпаковочныйЛистТовары.Ссылка КАК Ссылка,
		|	УпаковочныйЛистТовары.Номенклатура,
		|	УпаковочныйЛистТовары.Характеристика,
		|	УпаковочныйЛистТовары.Серия,
		|	УпаковочныйЛистТовары.Назначение,
		|	ВЫБОР КОГДА УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И УпаковочныйЛистТовары.Упаковка.ТипИзмеряемойВеличины В
		|			(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|			 ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|			 ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь),
		|			 ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ УпаковочныйЛистТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР КОГДА УпаковочныйЛистТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		И УпаковочныйЛистТовары.Упаковка.ТипИзмеряемойВеличины В
		|			(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
		|			 ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
		|			 ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь),
		|			 ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))
		|		ТОГДА УпаковочныйЛистТовары.Количество
		|		ИНАЧЕ УпаковочныйЛистТовары.КоличествоУпаковок
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	УпаковочныйЛистТовары.Количество,
		|	УпаковочныйЛистТовары.УпаковочныйЛист,
		|	УпаковочныйЛистТовары.НоменклатураПартнера,
		|	УпаковочныйЛистТовары.Комментарий,
		|	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист,
		|	ВЫБОР
		|		КОГДА УпаковочныйЛистТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|			ТОГДА УпаковочныйЛистТовары.Ссылка
		|		ИНАЧЕ УпаковочныйЛистТовары.УпаковочныйЛистРодитель
		|	КОНЕЦ КАК УпаковочныйЛистРодитель
		|ПОМЕСТИТЬ ВТУпаковочныеЛисты
		|ИЗ
		|	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
		|ГДЕ
		|	УпаковочныйЛистТовары.Ссылка В(&УпаковочныеЛисты)
		|	И НЕ УпаковочныйЛистТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТУпаковочныеЛистыСОшибками.Ссылка
		|				ИЗ
		|					ВТУпаковочныеЛистыСОшибками)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	УпаковочныйЛистРодитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУпаковочныеЛистыРодители.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВТУпаковочныеЛистыРодители.Код) КАК Код
		|ПОМЕСТИТЬ ВТУпаковочныеЛистыРодители
		|ИЗ
		|	Документ.УпаковочныйЛист КАК ВТУпаковочныеЛистыРодители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУпаковочныеЛисты КАК ВТУпаковочныеЛисты
		|		ПО (ВТУпаковочныеЛисты.УпаковочныйЛистРодитель = ВТУпаковочныеЛистыРодители.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТУпаковочныеЛистыРодители.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУпаковочныеЛисты.Номенклатура,
		|	ВТУпаковочныеЛисты.Характеристика,
		|	ВЫБОР КОГДА &СерииВТЧТовары ТОГДА
		|			ВТУпаковочныеЛисты.Серия
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ КАК Серия,
		|	ВТУпаковочныеЛисты.Назначение,
		|	ВТУпаковочныеЛисты.Характеристика,
		|	ВТУпаковочныеЛисты.Упаковка,
		|	СУММА(ВТУпаковочныеЛисты.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВТУпаковочныеЛисты.Количество) КАК Количество,
		|	ВТУпаковочныеЛисты.УпаковочныйЛист,
		|	ВТУпаковочныеЛисты.ЭтоУпаковочныйЛист,
		|	ВТУпаковочныеЛисты.УпаковочныйЛистРодитель,
		|	ВТУпаковочныеЛистыРодители.Код КАК УпаковочныйЛистРодительКод
		|ИЗ
		|	ВТУпаковочныеЛисты КАК ВТУпаковочныеЛисты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУпаковочныеЛистыРодители КАК ВТУпаковочныеЛистыРодители
		|		ПО ВТУпаковочныеЛисты.УпаковочныйЛистРодитель = ВТУпаковочныеЛистыРодители.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТУпаковочныеЛисты.Упаковка,
		|	ВТУпаковочныеЛисты.УпаковочныйЛист,
		|	ВТУпаковочныеЛисты.ЭтоУпаковочныйЛист,
		|	ВТУпаковочныеЛисты.УпаковочныйЛистРодитель,
		|	ВЫБОР КОГДА &СерииВТЧТовары ТОГДА
		|			ВТУпаковочныеЛисты.Серия
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ,
		|	ВТУпаковочныеЛисты.Назначение,
		|	ВТУпаковочныеЛисты.Характеристика,
		|	ВТУпаковочныеЛисты.Номенклатура,
		|	ВТУпаковочныеЛистыРодители.Код
		|;
		|
		|//[5]//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.Серия,
		|	Серии.Назначение,
		|	ВЫБОР
		|		КОГДА &УпаковкаВПоляхСвязи
		|			ТОГДА Серии.Упаковка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА &УпаковкаВПоляхСвязи
		|			ТОГДА СУММА(Серии.КоличествоУпаковок)
		|		ИНАЧЕ СУММА(Серии.Количество)
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	СУММА(Серии.Количество) КАК Количество,
		|	Серии.УпаковочныйЛистРодитель
		|ИЗ
		|	ВТУпаковочныеЛисты КАК Серии
		|ГДЕ
		|	Серии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.Серия,
		|	Серии.Назначение,
		|	ВЫБОР
		|		КОГДА &УпаковкаВПоляхСвязи
		|			ТОГДА Серии.Упаковка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОНЕЦ,
		|	Серии.УпаковочныйЛистРодитель";
	
	УпаковочныеЛисты = ТЧТовары.Выгрузить(СтрокиДляОбработкиОбъединяемые, "УпаковочныйЛист").ВыгрузитьКолонку("УпаковочныйЛист");
	
	Запрос.УстановитьПараметр("УпаковочныеЛисты", УпаковочныеЛисты);
	СерииВТЧТовары = (ПараметрыУказанияСерий(Форма).ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧСерии);
	Запрос.УстановитьПараметр("СерииВТЧТовары", СерииВТЧТовары);
	
	ТЗУпаковочныеЛисты = ТЧТовары.Выгрузить(Новый Структура("ЭтоУпаковочныйЛист",Истина),"УпаковочныйЛист");
	Запрос.УстановитьПараметр("УпаковочныеЛистыДокумента", ТЗУпаковочныеЛисты.ВыгрузитьКолонку("УпаковочныйЛист"));
	Запрос.УстановитьПараметр("УпаковкаВПоляхСвязи", ПараметрыУказанияСерий(Форма).ПоляСвязи.Найти("Упаковка") <> Неопределено);
	Запрос.УстановитьПараметр("ИсключаемыйУпаковочныйЛист",
		?(ИсключитьИзПроверкиПервыйУпЛист, СтрокиДляОбработкиОбъединяемые[0].УпаковочныйЛист, Документы.УпаковочныйЛист.ПустаяСсылка()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоОшибкам = РезультатЗапроса[1].Выбрать();
	ИмяСобытия  = НСтр("ru = 'Ошибка при дополнении документа строками по упаковочным листам.'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстОшибки = НСтр("ru='Нельзя добавить %УпаковочныйЛист%, т.к. он содержит упаковочные листы, которые уже включены в состав документа.'");
	
	Пока ВыборкаПоОшибкам.Следующий() Цикл
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", ВыборкаПоОшибкам.Ссылка);
		НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛист", ВыборкаПоОшибкам.Ссылка)); // Массив из СтрокаТабличнойЧасти
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если ОшибкиВЖурналРегистрации Тогда
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации.Ошибка,
					ВыборкаПоОшибкам.Ссылка.Метаданные(),
					ВыборкаПоОшибкам.Ссылка,
					ТекстОшибки);
			Иначе
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект." + ИмяТЧТовары,
					НайденныеСтроки[0].НомерСтроки, "УпаковочныйЛист");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле,,ЕстьОшибки);
			КонецЕсли;
			НайденныеСтроки[0].УпаковочныйЛист = Документы.УпаковочныйЛист.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из РезультатЗапроса[4].Выгрузить() Цикл
		НоваяСтрока = ТЧТовары.Добавить(); // ДокументТабличнаяЧастьСтрока.РасходныйОрдерНаТовары.ОтгружаемыеТовары
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		Если ПараметрыУказанияСерий(Форма).ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
			НоваяСтрока.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		КонецЕсли;
		СтрокиДляОбработкиОбъединяемые.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Если Не СерииВТЧТовары Тогда
		Для Каждого Стр Из РезультатЗапроса[5].Выгрузить() Цикл
			ФормаТЧ = Форма.Объект[ПараметрыУказанияСерий(Форма).ИмяТЧСерии]; // ДанныеФормыКоллекция
			НоваяСтрока = ФормаТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивно обходит строки упаковочного листа, используется для получения или удаления всех строк в иерархии
// Параметры:
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист для обхода строк,
//	ТЧСерии - ДанныеФормыКоллекция - табличная часть с сериями товаров, по умолчанию Неопределено,
//	СтрокиОбъединяемые - Массив - состоит из элементов ДанныеФормыЭлементКоллекции, куда собираются строки ТЧ,
//		подчиненные упаковочному листу, по умолчанию Неопределено,
//	Действие - Строка - "Объединить" или "Удалить", по умолчанию "Объединить".
//
Процедура РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары,
	УпаковочныйЛист, ТЧСерии = Неопределено, СтрокиОбъединяемые = Неопределено, Действие = "Объединить") Экспорт
	
	НайденныеСтроки = ТЧТовары.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Действие = "Удалить" Тогда
			ТЧТовары.Удалить(Стр);
			Если Не ТЧСерии = Неопределено Тогда
				НайденныеСтрокиСерий = ТЧСерии.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", УпаковочныйЛист));
				Для Каждого СтрокаСерий Из НайденныеСтрокиСерий Цикл
					ТЧСерии.Удалить(СтрокаСерий);
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтрокиОбъединяемые.Добавить(Стр);
		КонецЕсли;
		Если Стр.ЭтоУпаковочныйЛист Тогда
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары, Стр.УпаковочныйЛист, ТЧСерии, СтрокиОбъединяемые, Действие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет служебные реквизиты.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	СтруктураДействий - Структура - действия, которые нужно произвести,
//	СтрокиЗаполнения - Массив - строки ТЧТовары, в которых нужно заполнить служебные реквизиты,
//		по умолчанию Неопределено,
//	Перенумеровать - Булево - признак того, что после заполнения ТЧ нужно пронумеровать,
//	КэшированныеЗначения - Структура - кэш для заполнения реквизитов.
//
Процедура ЗаполнитьСлужебныеРеквизиты(Форма,
	ТЧТовары, СтруктураДействий, Знач СтрокиЗаполнения = Неопределено, Перенумеровать = Истина, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не Форма.ИспользоватьУпаковочныеЛисты Тогда
		Форма.МаксимальныйНомерСтроки = ТЧТовары.Количество();
		Если СтруктураДействий <> Неопределено Тогда
			НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТЧТовары,СтруктураДействий);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТЧТовары.Количество() > 0
		И ТЧТовары.Количество() <> ТЧТовары[ТЧТовары.Количество() - 1].НомерСтроки Тогда
		Для НомерСтроки = 1 По ТЧТовары.Количество() Цикл
			ТЧТовары[НомерСтроки - 1].НомерСтроки = НомерСтроки;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаТовары = ТЧТовары.Выгрузить(,
		"ЭтоУпаковочныйЛист,УпаковочныйЛист,Номенклатура,
		|УпаковочныйЛистРодитель,НомерСтроки,ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста");
	
	Если СтрокиЗаполнения = Неопределено Тогда
		МассивНомеровСтрокЗаполнения = ТаблицаТовары.ВыгрузитьКолонку("НомерСтроки");
	Иначе
		Если ТипЗнч(СтрокиЗаполнения) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			СтрокаЗаполнения = СтрокиЗаполнения;
			СтрокиЗаполнения = Новый Массив;
			СтрокиЗаполнения.Добавить(СтрокаЗаполнения);
		ИначеЕсли ТипЗнч(СтрокиЗаполнения) = Тип("Число") Тогда
			СтрокаЗаполнения = ТЧТовары.НайтиПоИдентификатору(СтрокиЗаполнения);
			СтрокиЗаполнения = Новый Массив;
			СтрокиЗаполнения.Добавить(СтрокаЗаполнения);
		КонецЕсли;
		МассивНомеровСтрокЗаполнения = ТЧТовары.Выгрузить(СтрокиЗаполнения, "НомерСтроки").ВыгрузитьКолонку("НомерСтроки");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.ЭтоУпаковочныйЛист,
	|	ТаблицаТовары.УпаковочныйЛист,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.УпаковочныйЛистРодитель,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.УпаковочныйЛистРодитель,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок,
	|	СУММА(ВЫБОР
	|			КОГДА ВТТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВТТовары.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЗаполненныхСтрок
	|ПОМЕСТИТЬ ВТКоличествоПодчиненных
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|ГДЕ
	|	ВТТовары.УпаковочныйЛистРодитель <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТовары.УпаковочныйЛистРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковочныеЛисты.Ссылка,
	|	УпаковочныеЛисты.Код,
	|	УпаковочныеЛисты.Дата,
	|	ЕСТЬNULL(ВТКоличествоПодчиненных.КоличествоСтрок, 0) КАК КоличествоСтрок,
	|	ЕСТЬNULL(ВТКоличествоПодчиненных.КоличествоЗаполненныхСтрок, 0) КАК КоличествоЗаполненныхСтрок,
	|	ВТТовары.УпаковочныйЛистРодитель
	|ПОМЕСТИТЬ ВТУпаковочныеЛисты
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО (ВТТовары.УпаковочныйЛист = УпаковочныеЛисты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоПодчиненных КАК ВТКоличествоПодчиненных
	|		ПО (ВТТовары.УпаковочныйЛист = ВТКоличествоПодчиненных.УпаковочныйЛистРодитель)
	|;
	|
	|//[3]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.НомерСтроки,
	|	0 КАК ПризнакКартинкиУпаковочногоЛиста,
	|	УпаковочныеЛистыРодители.Код КАК УпаковочныйЛистРодительКод
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУпаковочныеЛисты КАК УпаковочныеЛистыРодители
	|		ПО ВТТовары.УпаковочныйЛистРодитель = УпаковочныеЛистыРодители.Ссылка
	|ГДЕ
	|	НЕ ВТТовары.ЭтоУпаковочныйЛист
	|	И ВТТовары.НомерСтроки В(&МассивНомеровСтрокЗаполнения)
	|;
	|
	|//[4]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.НомерСтроки,
	|	УпаковочныеЛисты.Код КАК УпаковочныйЛистКод,
	|	УпаковочныеЛисты.Дата КАК УпаковочныйЛистДата,
	|	1 КАК ПризнакКартинкиУпаковочногоЛиста,
	|	УпаковочныеЛисты.КоличествоЗаполненныхСтрок КАК КоличествоЗаполненныхПодчиненныхПозиций,
	|	УпаковочныеЛисты.КоличествоСтрок КАК КоличествоСтрок,
	|	ВЫБОР
	|		КОГДА УпаковочныеЛисты.КоличествоЗаполненныхСтрок = 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТребуетсяОбработка,
	|	ВЫБОР
	|		КОГДА УпаковочныеЛисты.КоличествоЗаполненныхСтрок = 0
	|			ТОГДА &СтрокаНеЗаполненСостав
	|		ИНАЧЕ &СтрокаКоличествоПозиций
	|	КОНЕЦ КАК ДополнительнаяИнформация
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУпаковочныеЛисты КАК УпаковочныеЛисты
	|		ПО ВТТовары.УпаковочныйЛист = УпаковочныеЛисты.Ссылка
	|ГДЕ
	|	ВТТовары.ЭтоУпаковочныйЛист
	|;
	|
	|//[5]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СлужебныеСтроки.Ссылка КАК УпаковочныйЛистРодитель,
	|	СлужебныеСтроки.Код КАК УпаковочныйЛистРодительКод,
	|	1 КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
	|	1 КАК ТребуетсяОбработка,
	|	&СтрокаНеЗаполненСостав КАК ДополнительнаяИнформация
	|ИЗ
	|	ВТУпаковочныеЛисты КАК СлужебныеСтроки
	|ГДЕ
	|	СлужебныеСтроки.КоличествоСтрок = 0
	|;
	|
	|//[6]//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СлужебныеСтрокиКУдалению.НомерСтроки
	|ИЗ
	|	ВТТовары КАК СлужебныеСтрокиКУдалению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУпаковочныеЛисты КАК ВТУпаковочныеЛисты
	|		ПО СлужебныеСтрокиКУдалению.УпаковочныйЛистРодитель = ВТУпаковочныеЛисты.Ссылка
	|ГДЕ
	|	СлужебныеСтрокиКУдалению.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = 1
	|	И ВТУпаковочныеЛисты.КоличествоСтрок > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	СлужебныеСтрокиКУдалению.НомерСтроки УБЫВ";
	
	СтрокаНеЗаполненСостав  = НСтр("ru='<не заполнен состав упаковочного листа>'");
	СтрокаКоличествоПозиций = НСтр("ru='%КоличествоПозиций% в составе'");
	
	ШаблонКоличестваПозиций	= НСтр("ru = ';%1 позиция; ;%1 позиции;%1 позиций;'");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("МассивНомеровСтрокЗаполнения", МассивНомеровСтрокЗаполнения);
	Запрос.УстановитьПараметр("СтрокаНеЗаполненСостав", СтрокаНеЗаполненСостав);
	Запрос.УстановитьПараметр("СтрокаКоличествоПозиций", СтрокаКоличествоПозиций);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр = ТЧТовары[Выборка.НомерСтроки-1];
		ЗаполнитьЗначенияСвойств(Стр, Выборка);
	КонецЦикла;
	
	Выборка = Результат[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр = ТЧТовары[Выборка.НомерСтроки-1];
		ЗаполнитьЗначенияСвойств(Стр, Выборка);
		
		НайденныеСтроки = Форма.УпаковочныеЛисты.НайтиСтроки(Новый Структура("УпаковочныйЛист", Стр.УпаковочныйЛист));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСУпЛистом = Форма.УпаковочныеЛисты.Добавить();
		Иначе
			СтрокаСУпЛистом = НайденныеСтроки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаСУпЛистом, Стр);
		СтрокаСУпЛистом.ИдентификаторСтрокиСУпЛистом = Стр.ПолучитьИдентификатор();
		
		Если Выборка.КоличествоЗаполненныхПодчиненныхПозиций > 0 Тогда
			Стр.ДополнительнаяИнформация = СтрЗаменить(СтрокаКоличествоПозиций,
														"%КоличествоПозиций%",
														СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонКоличестваПозиций,
																												Выборка.КоличествоЗаполненныхПодчиненныхПозиций,
																												Неопределено));
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из Результат[5].Выгрузить() Цикл
		НоваяСтрока = ТЧТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	КонецЦикла;
	
	Выборка = Результат[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧТовары.Удалить(Выборка.НомерСтроки-1);
	КонецЦикла;
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураДействий Цикл
		Если ОбработкаТабличнойЧастиСервер.КлючЗаполненияСлужебныхРеквизитовПоддерживается(КлючИЗначение.Ключ) Тогда
			СтруктураЗаполнения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			СтруктураДействий.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураЗаполнения.Количество() > 0 Тогда 
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТЧТовары,СтруктураЗаполнения);
	КонецЕсли;
	
	Если СтруктураДействий <> Неопределено
		И СтруктураДействий.Количество() > 0 Тогда
		// Проверка, очистка упаковок, характеристик выполнено ранее в НоменклатураУпаковочныйЛистПриИзменении().
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТЧТовары, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	Если Перенумеровать Тогда
		ПеренумероватьСтроки(Форма, ТЧТовары);
	КонецЕсли;
	
КонецПроцедуры

// Нумерует строки в ТЧ, где нумерация по умолчанию не совпадает с отображаемым порядком строк,
//		используется для ТЧ с упаковочными листами
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы,
//	НачинаяСНомера - Число - номер строки (отображаемый), с которого следует начать нумерацию, по умолчанию 1.
//
Процедура ПеренумероватьСтроки(Форма, ТЧТовары, НачинаяСНомера = 1) Экспорт
	
	Если Не Форма.ИспользоватьУпаковочныеЛисты Тогда
		Форма.МаксимальныйНомерСтроки = ТЧТовары.Количество();
		Возврат;
	КонецЕсли;
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	
	ОтборСтрок = Форма.Элементы[ИмяТЧТовары].ОтборСтрок;
	Если ОтборСтрок.Свойство("ЭтоУпаковочныйЛист") Тогда
		СтруктураПоиска = Новый Структура("ЭтоУпаковочныйЛист", Ложь);
	Иначе
		СтруктураПоиска = Новый Структура(
			"УпаковочныйЛистРодитель, ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста",
			Форма.УпаковочныйЛистРодитель, 0);
	КонецЕсли;
	
	НайденныеСтроки = ТЧТовары.НайтиСтроки(СтруктураПоиска);
	НачинаяСНомера = Мин(Макс(НачинаяСНомера, 1), НайденныеСтроки.Количество());
	Если НачинаяСНомера > 0 Тогда
		Для Индекс = НачинаяСНомера - 1 По НайденныеСтроки.Количество() - 1 Цикл
			НайденныеСтроки[Индекс].НомерСтрокиОтображаемый = Индекс + 1;
		КонецЦикла;
		Форма.МаксимальныйНомерСтроки = Индекс;
	Иначе
		Форма.МаксимальныйНомерСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит формы Объект.ВсегоМест.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы.
//
Процедура ПересчитатьКоличествоМест(Форма, ТЧТовары) Экспорт
	
	Форма.Объект.ВсегоМест = КоличествоМестВТЧ(ТЧТовары);
	
КонецПроцедуры

// Рассчитывает товарных количество мест в ТЧ
//
// Параметры:
//  ТЧ	 - ДанныеФормыКоллекция - табличная часть, для которой рассчитывается количество мест.
// 
// Возвращаемое значение:
//   - Число - количество товарных мест в ТЧ.
//
Функция КоличествоМестВТЧ(ТЧ) Экспорт
	
	НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура("УпаковочныйЛистРодитель", Документы.УпаковочныйЛист.ПустаяСсылка()));
	ВсегоМест = 0;
	Для Каждого Стр Из НайденныеСтроки Цикл
		ВсегоМест = ВсегоМест + Стр.КоличествоУпаковок;
	КонецЦикла;
	Возврат ВсегоМест;
	
КонецФункции

// Выполняет действия при переходе по уровням вложенности упаковочных листов.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ТЧТовары - ДанныеФормыКоллекция - табличная часть, в которой отображаются товары и упаковочные листы
//	НавигационнаяСсылка - ДокументСсылка.УпаковочныйЛист, Строка, УникальныйИдентификатор -
//		указатель уровня, на который нужно перейти
//	ЗаголовокНачальногоУровня - Строка - начало навигационной надписи, используемой для перехода между
//		разными уровнями вложенности упаковочных листов,
//	ОтображатьГиперссылки - Булево - признак того, что навигационная панель отображается в виде гиперссылок,
//		по умолчанию Истина.
//
Процедура ПриПереходеНаДругойУровень(Форма,
	ТЧТовары, НавигационнаяСсылка, ЗаголовокНачальногоУровня, ОтображатьГиперссылки = Истина) Экспорт
	
	Если Не Форма.ИспользоватьУпаковочныеЛисты Тогда
		Форма.МаксимальныйНомерСтроки = ТЧТовары.Количество();
		Возврат;
	КонецЕсли;
	
	ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧТовары;
	ИменаЭлементовФормы = ИменаЭлементовФормы(ИмяТЧТовары);
	
	Если НавигационнаяСсылка = "0" Тогда
		УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПустаяСсылка()
	ИначеЕсли ТипЗнч(НавигационнаяСсылка) <> Тип("ДокументСсылка.УпаковочныйЛист") Тогда
		УпаковочныйЛистРодитель = Документы.УпаковочныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(НавигационнаяСсылка));
	Иначе
		УпаковочныйЛистРодитель = НавигационнаяСсылка;
	КонецЕсли;
	
	Форма.УпаковочныйЛистРодитель = УпаковочныйЛистРодитель;
	
	Если Форма.ИмяФормы <> Метаданные.Обработки.ПроверкаКоличестваТоваровВПриходномОрдере.ОсновнаяФорма.ПолноеИмя() Тогда
		КнопкаНаУровеньВверх = Форма.Элементы[ИменаЭлементовФормы.НаУровеньВверх]; // КнопкаФормы
		КнопкаНаУровеньВверх.Доступность = ЗначениеЗаполнено(УпаковочныйЛистРодитель);
	КонецЕсли;
	
	СформироватьНавигационнуюНадпись(Форма, ЗаголовокНачальногоУровня, ОтображатьГиперссылки);
	
	Если Форма.Элементы[ИмяТЧТовары].ОтборСтрок <> Неопределено
		И Форма.Элементы[ИмяТЧТовары].ОтборСтрок.Свойство("ТребуетсяОбработка") Тогда
		Форма.Элементы[ИмяТЧТовары].ОтборСтрок = Новый ФиксированнаяСтруктура(
			"УпаковочныйЛистРодитель, ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста, ТребуетсяОбработка",
			Форма.УпаковочныйЛистРодитель, 0, 1);
	Иначе
		Форма.Элементы[ИмяТЧТовары].ОтборСтрок = Новый ФиксированнаяСтруктура(
			"УпаковочныйЛистРодитель, ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста",
			Форма.УпаковочныйЛистРодитель, 0);
	КонецЕсли;
	
	ПеренумероватьСтроки(Форма, ТЧТовары);
	
КонецПроцедуры

// Формирует надпись для навигации по уровням вложенности упаковочных листов.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма для выполнения действий,
//	ЗаголовокНачальногоУровня - Строка - начало навигационной надписи, используемой для перехода между
//		разными уровнями вложенности упаковочных листов,
//	ОтображатьГиперссылки - Булево - признак того, что навигационная панель отображается в виде гиперссылок,
//		по умолчанию Истина.
//
Процедура СформироватьНавигационнуюНадпись(Форма, ЗаголовокНачальногоУровня, ОтображатьГиперссылки = Истина) Экспорт
	
	Если Не Форма.ИспользоватьУпаковочныеЛисты Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("РежимПросмотра") = Неопределено Тогда
		ОтображатьГиперссылки = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.УпаковочныйЛистРодитель) Тогда
		
		Форма.НадписьНавигация = Новый ФорматированнаяСтрока(ЗаголовокНачальногоУровня, Новый Шрифт(,,Истина));
		
	Иначе
		НайденныеСтроки = Форма.УпаковочныеЛисты.НайтиСтроки(Новый Структура("УпаковочныйЛист", Форма.УпаковочныйЛистРодитель));
		ТекущийУпЛист = НайденныеСтроки[0];
		МассивСтрок = Новый Массив;
		СтрокаСТекущимУпЛистом = Новый ФорматированнаяСтрока(Метаданные.Документы.УпаковочныйЛист.ПредставлениеОбъекта
			+ " " + ТекущийУпЛист.УпаковочныйЛистКод, Новый Шрифт(,,Истина));
		МассивСтрок.Добавить(" \ ");
		МассивСтрок.Добавить(СтрокаСТекущимУпЛистом);
		
		Если ЗначениеЗаполнено(ТекущийУпЛист.УпаковочныйЛистРодитель) Тогда
			
			РекурсивноСобратьМассивСтрокНавигационнойНадписи(Форма.УпаковочныеЛисты,
				ТекущийУпЛист.УпаковочныйЛистРодитель, МассивСтрок, Ложь, ОтображатьГиперссылки);
			
			НадписьНавигация = Новый ФорматированнаяСтрока(МассивСтрок);
			Если СтрДлина(НадписьНавигация) > 80 Тогда
				МассивСтрок = Новый Массив;
				МассивСтрок.Добавить(" \ ");
				МассивСтрок.Добавить(СтрокаСТекущимУпЛистом);
				РекурсивноСобратьМассивСтрокНавигационнойНадписи(Форма.УпаковочныеЛисты,
					Форма.УпаковочныйЛистРодитель, МассивСтрок, Истина, ОтображатьГиперссылки);
			КонецЕсли;
		КонецЕсли;
		Если ОтображатьГиперссылки Тогда
			МассивСтрок.Вставить(0, Новый ФорматированнаяСтрока(ЗаголовокНачальногоУровня,,,,"0"));
		Иначе
			МассивСтрок.Вставить(0, Новый ФорматированнаяСтрока(ЗаголовокНачальногоУровня));
		КонецЕсли;
		Форма.НадписьНавигация = Новый ФорматированнаяСтрока(МассивСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия после удаления строки в ТЧ с упаковочными листами.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма для выполнения действий,
//  ТЧТовары				 - ДанныеФормыКоллекция - табличная часть с упаковочными листами,
//  РежимПросмотраПоТоварам	 - Булево - признак режима отображения табличной части с упаковочными листами,
//		Истина - "По товарам", Ложь - "По товарным местам".
//
Процедура ПослеУдаленияВТЧСУпаковочнымиЛистами(Форма, ТЧТовары, РежимПросмотраПоТоварам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.УпаковочныйЛист,
	|	ТаблицаТовары.УпаковочныйЛистРодитель,
	|	ТаблицаТовары.ЭтоУпаковочныйЛист,
	|	ТаблицаТовары.НомерСтроки
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛист
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|ГДЕ
	|	НЕ ВТТовары.УпаковочныйЛистРодитель В
	|				(ВЫБРАТЬ
	|					ВТТовары.УпаковочныйЛист
	|				ИЗ
	|					ВТТовары)
	|	И ВТТовары.УпаковочныйЛистРодитель <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТовары.УпаковочныйЛистРодитель";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТЧТовары.Выгрузить(,"УпаковочныйЛист, УпаковочныйЛистРодитель,ЭтоУпаковочныйЛист, НомерСтроки"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[1]; // РезультатЗапроса
	Выборка = Результат.Выбрать();
	
	МассивУдаляемыхСтрокУпаковочныхЛистов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если ПараметрыУказанияСерий(Форма).ИмяТЧТовары = ПараметрыУказанияСерий(Форма).ИмяТЧСерии Тогда
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары, Выборка.УпаковочныйЛист, , , "Удалить");
		Иначе
			РекурсивноОбойтиПодчиненныеСтроки(ТЧТовары,
				Выборка.УпаковочныйЛист, Форма.Объект[ПараметрыУказанияСерий(Форма).ИмяТЧСерии], , "Удалить");
		КонецЕсли;
		
		Отбор = Новый Структура("УпаковочныйЛист", Выборка.УпаковочныйЛист);
		СтрокиУпаковочныхЛистов = Форма.УпаковочныеЛисты.НайтиСтроки(Отбор);
		Если СтрокиУпаковочныхЛистов.Количество() > 0 Тогда
			МассивУдаляемыхСтрокУпаковочныхЛистов.Добавить(СтрокиУпаковочныхЛистов[0]);
		КонецЕсли
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрокаУпаковочногоЛиста Из МассивУдаляемыхСтрокУпаковочныхЛистов Цикл
		Форма.УпаковочныеЛисты.Удалить(УдаляемаяСтрокаУпаковочногоЛиста);
	КонецЦикла;
	
	Если РежимПросмотраПоТоварам Тогда
		// В режиме просмотра по товарам после удаления товаров удаляем упаковочные листы, которые стали пустыми.
		ИтеративноУдалитьПустыеУпаковочныеЛисты(ТЧТовары);
	КонецЕсли;
	
	// В режиме по товарным местам для пустых упаковочных листов будут добавлены служебные строки.
	ЗаполнитьСлужебныеРеквизиты(Форма, ТЧТовары, Новый Структура);
	ПересчитатьКоличествоМест(Форма, ТЧТовары);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РекурсивноСобратьМассивСтрокНавигационнойНадписи(УпаковочныеЛисты, УпаковочныйЛист, МассивСтрок, Сжать, ОтображатьГиперссылки)
	
	НайденныеСтроки = УпаковочныеЛисты.НайтиСтроки(Новый Структура("УпаковочныйЛист",УпаковочныйЛист));
	ТекущийУпЛист = НайденныеСтроки[0];
	Если ОтображатьГиперссылки Тогда
		НоваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Уп. лист'") + " " + ?(Сжать,"...", ТекущийУпЛист.УпаковочныйЛистКод),,,,
			Строка(УпаковочныйЛист.УникальныйИдентификатор()));
	Иначе
		НоваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Уп. лист'") + " " + ?(Сжать,"...", ТекущийУпЛист.УпаковочныйЛистКод));
	КонецЕсли;
	МассивСтрок.Вставить(0, НоваяСтрока);
	МассивСтрок.Вставить(0, " \ ");
	
	Если ЗначениеЗаполнено(ТекущийУпЛист.УпаковочныйЛистРодитель) Тогда
		
		РекурсивноСобратьМассивСтрокНавигационнойНадписи(УпаковочныеЛисты,
					ТекущийУпЛист.УпаковочныйЛистРодитель, МассивСтрок, Сжать, ОтображатьГиперссылки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИтеративноУдалитьПустыеУпаковочныеЛисты(ТЧТовары)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.УпаковочныйЛист,
	|	ТаблицаТовары.УпаковочныйЛистРодитель,
	|	ТаблицаТовары.ЭтоУпаковочныйЛист,
	|	ТаблицаТовары.НомерСтроки
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	|	ВТТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|ГДЕ
	|	НЕ ВТТовары.УпаковочныйЛист В
	|				(ВЫБРАТЬ
	|					ВТТовары.УпаковочныйЛистРодитель
	|				ИЗ
	|					ВТТовары)
	|	И ВТТовары.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТовары.УпаковочныйЛист,
	|	ВТТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТЧТовары.Выгрузить(,"УпаковочныйЛист, УпаковочныйЛистРодитель,ЭтоУпаковочныйЛист, НомерСтроки"));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТЧТовары.Удалить(Выборка.НомерСтроки - 1);
	КонецЦикла;
	
	ИтеративноУдалитьПустыеУпаковочныеЛисты(ТЧТовары);
	
КонецПроцедуры

Функция ПараметрыУказанияСерий(Форма)
	
	Если Форма.ПараметрыУказанияСерий.Свойство("ОтгружаемыеТовары") Тогда
		Возврат Форма.ПараметрыУказанияСерий.ОтгружаемыеТовары;
	Иначе
		Возврат Форма.ПараметрыУказанияСерий;
	КонецЕсли;
	
КонецФункции

Функция ОснованиеУпаковочногоЛистаПоОрдеру(Ордер)
	
	Если ТипЗнч(Ордер) = Тип("ДанныеФормыСтруктура") Тогда
		РеквизитыОрдера = Ордер;
	Иначе
		РеквизитыОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ордер, "Получатель, Номер");
	КонецЕсли;
	
	Основание = НСтр("ru = '%Получатель% / Ордер %Номер%'");
	
	Основание = СтрЗаменить(Основание,
		"%Получатель%",
		РеквизитыОрдера.Получатель);
	
	Возврат СтрЗаменить(Основание,
		"%Номер%",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОрдера.Номер));

КонецФункции

// Возвращает коллекцию имен полей таблицы формы.
//
// Параметры:
//	ИмяТЧТовары - Строка - имя таблицы формы.
//
// Возвращаемое значение:
//	Структура - коллекция имен полей таблицы формы, содержащая следующие свойства:
//		* НомерСтроки - Строка - имя реквизита на форме.
//		* ГруппаНоменклатураУпаковочныйЛист - Строка - имя реквизита на форме.
//		* Номенклатура - Строка - имя реквизита на форме.
//		* НоменклатураКод - Строка - имя реквизита на форме.
//		* НоменклатураАртикул - Строка - имя реквизита на форме.
//		* НоменклатураЕдиницаИзмерения - Строка - имя реквизита на форме.
//		* ДопИнфоНоменклатура - Строка - имя реквизита на форме.
//		* Характеристика - Строка - имя реквизита на форме.
//		* Упаковка - Строка - имя реквизита на форме.
//		* КоличествоУпаковок - Строка - имя реквизита на форме.
//		* НаУровеньВверх - Строка - имя реквизита на форме.
//		* УпаковочныйЛист - Строка - имя реквизита на форме.
//		* КартинкаУпаковочногоЛиста - Строка - имя реквизита на форме.
//		* Распаковать - Строка - имя реквизита на форме.
//		* Упаковать - Строка - имя реквизита на форме.
//		* ДопИнфоУпаковочныйЛист - Строка - имя реквизита на форме.
//		* УпаковочныйЛистРодитель - Строка - имя реквизита на форме.
//		* УпаковочныйЛистКод - Строка - имя реквизита на форме.
//
Функция ИменаЭлементовФормы(ИмяТЧТовары)
	
	ИменаЭлементов	= Новый Структура;
	ТекстИсключения	= "";
	
	Если ИмяТЧТовары = "Товары" Тогда
		
		ИменаЭлементов.Вставить("НомерСтроки", "ТоварыНомерСтроки");
		ИменаЭлементов.Вставить("ГруппаНоменклатураУпаковочныйЛист", "ТоварыГруппаНоменклатураУпаковочныйЛист");
		ИменаЭлементов.Вставить("Номенклатура", "ТоварыНоменклатура");
		ИменаЭлементов.Вставить("НоменклатураКод", "ТоварыНоменклатураКод");
		ИменаЭлементов.Вставить("НоменклатураАртикул", "ТоварыНоменклатураАртикул");
		ИменаЭлементов.Вставить("НоменклатураЕдиницаИзмерения", "ТоварыНоменклатураЕдиницаИзмерения");
		ИменаЭлементов.Вставить("ДопИнфоНоменклатура", "ТоварыДопИнфоНоменклатура");
		ИменаЭлементов.Вставить("Характеристика", "ТоварыХарактеристика");
		ИменаЭлементов.Вставить("Упаковка", "ТоварыУпаковка");
		ИменаЭлементов.Вставить("КоличествоУпаковок", "ТоварыКоличествоУпаковок");
		ИменаЭлементов.Вставить("НаУровеньВверх", "ТоварыНаУровеньВверх");
		ИменаЭлементов.Вставить("УпаковочныйЛист", "ТоварыУпаковочныйЛист");
		ИменаЭлементов.Вставить("КартинкаУпаковочногоЛиста", "ТоварыКартинкаУпаковочногоЛиста");
		ИменаЭлементов.Вставить("Распаковать", "ТоварыРаспаковать");
		ИменаЭлементов.Вставить("Упаковать", "ТоварыУпаковать");
		ИменаЭлементов.Вставить("ДопИнфоУпаковочныйЛист", "ТоварыДопИнфоУпаковочныйЛист");
		ИменаЭлементов.Вставить("УпаковочныйЛистРодитель", "ТоварыУпаковочныйЛистРодитель");
		ИменаЭлементов.Вставить("УпаковочныйЛистКод", "ТоварыУпаковочныйЛистКод");
		
	ИначеЕсли ИмяТЧТовары = "ОтгружаемыеТовары" Тогда
		
		ИменаЭлементов.Вставить("НомерСтроки", "ОтгружаемыеТоварыНомерСтроки");
		ИменаЭлементов.Вставить("ГруппаНоменклатураУпаковочныйЛист", "ОтгружаемыеТоварыГруппаНоменклатураУпаковочныйЛист");
		ИменаЭлементов.Вставить("Номенклатура", "ОтгружаемыеТоварыНоменклатура");
		ИменаЭлементов.Вставить("НоменклатураКод", "ОтгружаемыеТоварыНоменклатураКод");
		ИменаЭлементов.Вставить("НоменклатураАртикул", "ОтгружаемыеТоварыНоменклатураАртикул");
		ИменаЭлементов.Вставить("НоменклатураЕдиницаИзмерения", "ОтгружаемыеТоварыНоменклатураЕдиницаИзмерения");
		ИменаЭлементов.Вставить("ДопИнфоНоменклатура", "ОтгружаемыеТоварыДопИнфоНоменклатура");
		ИменаЭлементов.Вставить("Характеристика", "ОтгружаемыеТоварыХарактеристика");
		ИменаЭлементов.Вставить("Упаковка", "ОтгружаемыеТоварыУпаковка");
		ИменаЭлементов.Вставить("КоличествоУпаковок", "ОтгружаемыеТоварыКоличествоУпаковок");
		ИменаЭлементов.Вставить("НаУровеньВверх", "ОтгружаемыеТоварыНаУровеньВверх");
		ИменаЭлементов.Вставить("УпаковочныйЛист", "ОтгружаемыеТоварыУпаковочныйЛист");
		ИменаЭлементов.Вставить("КартинкаУпаковочногоЛиста", "ОтгружаемыеТоварыКартинкаУпаковочногоЛиста");
		ИменаЭлементов.Вставить("Распаковать", "ОтгружаемыеТоварыРаспаковать");
		ИменаЭлементов.Вставить("Упаковать", "ОтгружаемыеТоварыУпаковать");
		ИменаЭлементов.Вставить("ДопИнфоУпаковочныйЛист", "ОтгружаемыеТоварыДопИнфоУпаковочныйЛист");
		ИменаЭлементов.Вставить("УпаковочныйЛистРодитель", "ОтгружаемыеТоварыУпаковочныйЛистРодитель");
		ИменаЭлементов.Вставить("УпаковочныйЛистКод", "ОтгружаемыеТоварыУпаковочныйЛистКод");
		
	ИначеЕсли ПустаяСтрока(ИмяТЧТовары) Тогда
		
		ТекстИсключения = НСтр("ru = 'Не указано имя таблицы.'");
		
	Иначе
		
		ТекстИсключения = СтрШаблон(НСтр("ru = 'На форме отсутствует таблица ""%1"".'"), ИмяТЧТовары);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИсключения) Тогда
		ВызватьИсключение ТекстИсключения;
	Иначе
		Возврат ИменаЭлементов;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
