////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции необходимые для работы форм
// подбора товаров. Модуль содержит вспомогательные функции,
// которые вызываются из клиентского и серверного модулей.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОберткиДляОпределенияТипаФормПодборов

// Проверяет, является ли форма формой подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево - истина, если это любая из форм подбора.
//
Функция ЭтоФормаПодбора(Форма) Экспорт
	
	КодФормы = Форма.КодФормы;
	
	Если КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма"
		Или КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма" 
		Или КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, является ли формой подбора в документы закупки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево - Истина, если это форма подбора в документы закупки.
//
Функция ЭтоФормаПодбораВДокументыЗакупки(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма");
	
КонецФункции

// Проверяет, является ли формой подбора в документы продажи.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево - истина, если это форма подбора в документы продажи.
//
Функция ЭтоФормаПодбораВДокументыПродажи(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма");
	
КонецФункции

// Проверяет, является ли формой выбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	Булево - истина, если это форма выбора характеристики.
//
Функция ЭтоФормаВыбораХарактеристик(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_ХарактеристикиНоменклатуры_ФормаВыбора");
	
КонецФункции

// Проверяет, является ли формой выбора справочника "Номенклатура".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	Булево - истина, если это форма выбора номенклатуры.
//
Функция ЭтоФормаВыбораНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ФормаВыбора");
	
КонецФункции

// Проверяет, является ли формой списка справочника "Номенклатура".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	Булево - Истина, если это форма списка номенклатуры.
//
Функция ЭтоФормаСпискаНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ФормаСписка");
	
КонецФункции

// Проверяет, является ли формой подобных товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма.
//
// Возвращаемое значение:
//	Булево - истина, если это форма подобных товаров номенклатуры.
//
Функция ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ПодобныеТовары");
	
КонецФункции

// Проверяет, является ли формой подбора по товарным категориям.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров по товарным категориям.
//
// Возвращаемое значение:
//	Булево - Истина, если это форма подбора товаров по категориям.
//
Функция ЭтоФормаПодбораТоваровПоКатегориям(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма");
	
КонецФункции

// Проверяет, является ли формой прайс-листа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма обработки.
//
// Возвращаемое значение:
//	Булево - Истина, если это форма прайс-листа.
//
Функция ЭтоФормаПрайсЛиста(Форма) Экспорт
	
	КодФормы = Форма.КодФормы;
	
	Если КодФормы = "Обработка_ПрайсЛист_Форма"
		Или КодФормы = "Обработка_ПрайсЛист_ФормаНастройки" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Проверяет, является ли формой прайс-листа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма обработки.
//
// Возвращаемое значение:
//	Булево - Истина, если это форма прайс-листа.
//
Функция ЭтоФормаПрайсЛистаПоставщиков(Форма) Экспорт
	КодФормы = Форма.КодФормы;
	
	Если КодФормы = "Обработка_ПрайсЛистПоставщика_Форма"
		Или КодФормы = "Обработка_ПрайсЛистПоставщика_ФормаНастройки" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ОпределениеИменСписковНаФормеВЗависимостиОтВариантаПоиска

// Возвращает имя списка характеристик по варианту поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Строка - имя списка характеристик.
//
Функция ИмяСпискаХарактеристикПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискХарактеристики", "СписокСтандартныйПоискХарактеристики");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя списка номенклатуры по варианту поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Строка - имя списка номенклатуры.
//
Функция ИмяСпискаНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискНоменклатура", "СписокСтандартныйПоискНоменклатура");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя списка номенклатуры поставщика по варианту поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров в документы закупки.
//
// Возвращаемое значение:
//	Строка - имя списка номенклатуры поставщика по варианту поиска.
//
Функция ИмяСпискаНоменклатурыПартнераПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискНоменклатураПартнера", "СписокСтандартныйПоискНоменклатураПартнера");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя текущей страницы номенклатуры по варианту поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма выбора, списка, подбора.
//
// Возвращаемое значение:
//	Строка - имя страницы номенклатуры.
//
Функция ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСтраницы = ?(ВариантПоискаТоваров = "Расширенный", "СтраницаРасширенныйПоискНоменклатура", "СтраницаСтандартныйПоискНоменклатура");
	
	Возврат ИмяСтраницы;
	
КонецФункции

// Возвращает имя страницы списка страниц на форме подбора, которую надо сделать текущей
// в зависимости от включенного типа поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
// Возвращаемое значение:
//	Строка - имя страницы.
//
Функция ИмяТекущейСтраницыПоВариантуПоиска(Форма) Экспорт
	
	ИмяСтраницыСписка = "";
	
	Если ЭтоФормаПодбора(Форма) Тогда
		НавигацияПоХарактеристикам = Форма.НавигацияПоХарактеристикам;
	Иначе
		НавигацияПоХарактеристикам = Ложь;
	КонецЕсли;
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	
	ИмяСтраницыСписка = ?(НавигацияПоХарактеристикам, "СтраницаСтандартныйПоискХарактеристики", "СтраницаСтандартныйПоискНоменклатура");
	
	Если ВариантПоискаТоваров = "Расширенный" Тогда
		ИмяСтраницыСписка = ?(НавигацияПоХарактеристикам, "СтраницаРасширенныйПоискХарактеристики", "СтраницаРасширенныйПоискНоменклатура");
	КонецЕсли;
	
	Возврат ИмяСтраницыСписка;
	
КонецФункции

// Возвращает имя страницы списка страниц номенклатуры поставщика на форме подбора, которую надо сделать текущей
// в зависимости от включенного типа поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
// Возвращаемое значение:
//	Строка - имя страницы.
//
Функция ИмяТекущейСтраницыНоменклатурыПартнераПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	
	Возврат ?(ВариантПоискаТоваров = "Стандартный", "СтраницаСтандартныйПоискНоменклатураПартнера", "СтраницаРасширенныйПоискНоменклатураПартнера");
	
КонецФункции

// Возвращает идентификатор действующего варианта поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Строка - идентификатор варианта поиска.
//
Функция ДействующийВариантПоиска(Форма) Экспорт
	
	Если Форма.ВариантПоискаТоваров = "ПоУмолчанию" Тогда
		Если Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров Тогда
			Возврат "Стандартный";
		Иначе
			Возврат "Расширенный";
		КонецЕсли;
	Иначе
		Возврат Форма.ВариантПоискаТоваров;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФункцииДляРаботыМеханизмаПоиска

// Устанавливает отбор по строке поиска у динамического списка.
//
// Параметры:
//	ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - коллекция элементов отбора,
//	ЗначениеОтбора - Массив - массив значений отбора,
//	ИспользованиеОтбора - Булево - флаг использования отбора.
//
Процедура УстановитьОтборСпискаПоСтрокеПоиска(ЭлементыОтбора, ЗначениеОтбора = Неопределено, ИспользованиеОтбора = Истина) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементыОтбора, "ПоискПоПодстроке", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ссылка", ЗначениеОтбора, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ПоискПоПодстроке", ИспользованиеОтбора);
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
Процедура СнятьОтборПоСтрокеПоискаНоменклатуры(Форма) Экспорт
	
	Форма.КодОшибкиПоиска = "";
	Форма.ЕстьФильтрПоПоискуНоменклатуры = Ложь;
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,, Ложь);
	
	Если Не ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка характеристик.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура СнятьОтборПоСтрокеПоискаХарактеристик(Форма) Экспорт
	
	Если Не ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.КодОшибкиПоиска = "";
	Форма.ПоискХарактеристикНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,, Ложь);
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
Процедура СнятьОтборПоСтрокеПоискаНоменклатурыПартнера(Форма) Экспорт
	
	Если Не ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.КодОшибкиПоиска = "";
	Форма.ПоискНоменклатурыПартнераНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатураПартнера).Элементы,, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииУстановкиИСбросаОтборов

// Устанавливает отбор по диапазону цен на список номенклатуры поставщика в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦенПоставщика(Форма) Экспорт
	
	Если Не ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор на список номенклатуры поставщика.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатураПартнера).Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОтПоставщика,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОтПоставщика));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДоПоставщика,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДоПоставщика));
	
КонецПроцедуры

// Устанавливает отбор по условию цены поставщика на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидЦеныПоставщика(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатураПартнера, 
		"ВидЦеныПоставщика", 
		Форма.ВидЦеныПоставщика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатура, 
		"ВидЦеныПоставщика", 
		Форма.ВидЦеныПоставщика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, 
		"ВидЦеныПоставщика", 
		Форма.ВидЦеныПоставщика);

КонецПроцедуры

// Устанавливает отбор по диапазону цен на список номенклатуры и 
// список характеристик в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦен(Форма) Экспорт
	
	ЭтоФормаПодбора = ЭтоФормаПодбора(Форма);
	
	Если Не ЭтоФормаПодбора Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор на список номенклатуры.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДо));
	
	// Отбор на список характеристик.
	СписокВариантов = Новый СписокЗначений();
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры"));
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаНоменклатура,
		"ИспользованиеХарактеристик",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокВариантов,
		"ИспользованиеХарактеристик",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	// Установить фильтр на список характеристик.
	ГруппаОтбораЦенаХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		"ЦенаХарактеристики",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДо));
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтра номенклатуры поставщика в зависимости от значения
// флажка использования фильтра номенклатуры поставщика.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура УстановитьДоступностьЭлементовФильтраНоменклатурыПартнера(Форма) Экспорт
	
	Форма.Элементы.ИерархияНоменклатурыПартнера.Доступность = Форма.ИспользоватьФильтрНоменклатураПартнера;
	
КонецПроцедуры

// Устанавливает отбор по группе номенклатуры в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоИерархииНоменклатуры = Форма.ТекущаяИерархияНоменклатуры;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура,
																			"Родитель",
																			ОтборПоИерархииНоменклатуры,
																			ВидСравненияКомпоновкиДанных.Равно,
																			"Родитель",
																			Истина);
	
КонецПроцедуры

// Отключает установленный отбор по группе номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Родитель",,,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по группе номенклатуры в списке номенклатуры поставщика.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатурыПартнера(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтрНоменклатураПартнера Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоИерархииНоменклатурыПартнера = Форма.ТекущаяИерархияНоменклатурыПартнера;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатураПартнера, "Родитель", 
		ОтборПоИерархииНоменклатурыПартнера, 
		ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры


// Отключает установленный отбор по группе номенклатуры поставщика у списка номенклатуры поставщика
// на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатурыПартнера(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатураПартнера, "Родитель",,,,Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаОтображенияФормыПоВариантуПоиска

// Устанавливает кнопку выбора по умолчанию в форме выбора номенклатуры в зависимости от варианта поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьКнопкуВыбораПоУмолчанию(Форма) Экспорт
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВариантПоиска = "Стандартный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения текущих страниц на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура УстановитьТекущиеСтраницыПоВариантуПоиска(Форма) Экспорт
	
	Если ДействующийВариантПоиска(Форма) = "Стандартный" Тогда
		СнятьОтборПоСтрокеПоискаНоменклатуры(Форма);
		Форма.СтрокаПоискаНоменклатура = "";
	КонецЕсли;
	
	Если ЭтоФормаПодбора(Форма) Тогда
		
		Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
		
		Если ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
			Форма.Элементы.СтраницыСписковНоменклатураПартнера.ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницыНоменклатурыПартнераПоВариантуПоиска(Форма)];
		КонецЕсли;
		
		НазначитьСочетанияКлавишКомандФормыПоВариантуПоиска(Форма);
		
	Иначе
		
		ИмяСтраницы = ИмяТекущейСтраницыПоВариантуПоиска(Форма);
		Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ИмяСтраницы];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает структуру строки номенклатуры. Структура используется
//  для кэширования текущих данных из строки динамического списка номенклатуры.
// 
// Возвращаемое значение:
//  Структура - Структура для хранения сведений об активизированной строке номенклатуры:
//  *Ссылка - СправочникСсылка.Номенклатура
//  *Родитель - СправочникСсылка.Номенклатура
//  *ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//  *ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//  *Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//  *ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//  *Артикул - Строка
//  *Номенклатура - СправочникСсылка.Номенклатура
//  *ЦеноваяГруппа - СправочникСсылка.ЦеновыеГруппы
//  *ЭтоТовар - Булево
//  *ЭтоУслуга - Булево
//  *ПометкаУдаления - Булево
//  *ХарактеристикиИспользуются - Булево
//  *ЭтоГруппа - Булево
//  *ИспользованиеХарактеристик - Булево
//  *Цена - Число
//  *ВНаличииОстаток - Число
//  *ВладелецХарактеристик - СправочникСсылка
//  *ВидЦены- СправочникСсылка.ВидыЦен
//
Функция СтруктураСтрокиНоменклатуры() Экспорт
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Ссылка");
	СтруктураСтроки.Вставить("Родитель");
	СтруктураСтроки.Вставить("ВидНоменклатуры");
	СтруктураСтроки.Вставить("ТипНоменклатуры");
	СтруктураСтроки.Вставить("Упаковка");
	СтруктураСтроки.Вставить("ЕдиницаИзмерения");
	СтруктураСтроки.Вставить("Артикул");
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ЦеноваяГруппа");
	СтруктураСтроки.Вставить("ЭтоТовар",Ложь);
	СтруктураСтроки.Вставить("ЭтоУслуга", Ложь);
	СтруктураСтроки.Вставить("ПометкаУдаления", Ложь);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", Ложь);
	СтруктураСтроки.Вставить("ЭтоГруппа", Ложь);
	СтруктураСтроки.Вставить("ИспользованиеХарактеристик", Ложь);
	СтруктураСтроки.Вставить("Цена", 0);
	СтруктураСтроки.Вставить("ВНаличииОстаток", 0);
	СтруктураСтроки.Вставить("ВладелецХарактеристик");
	СтруктураСтроки.Вставить("ВидЦены");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру строки характеристик. Структура используется
//  для кэширования текущих данных из строки динамического списка характеристик.
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//  * Ссылка - СправочникСсылка.ХарактеристикиНоменклатуры
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//  * Номенклатура - СправочникСсылка.Номенклатура
//  * ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//  * ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//  * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//  * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//  * ЦеноваяГруппа - СправочникСсылка.ЦеновыеГруппы - 
//  * ПометкаУдаления - Булево
//  * ХарактеристикиИспользуются - Булево
//  * Цена - Число
//  * ВНаличииОстаток - Число
//  * ВладелецХарактеристик - СправочникСсылка
//  * ВидЦены - СправочникСсылка.ВидыЦен
//
Функция СтруктураСтрокиХарактеристик() Экспорт
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Ссылка");
	СтруктураСтроки.Вставить("Характеристика");
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ВидНоменклатуры");
	СтруктураСтроки.Вставить("ТипНоменклатуры");
	СтруктураСтроки.Вставить("ЕдиницаИзмерения");
	СтруктураСтроки.Вставить("Упаковка");
	СтруктураСтроки.Вставить("ЦеноваяГруппа");
	СтруктураСтроки.Вставить("ПометкаУдаления", Ложь);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", Истина);
	СтруктураСтроки.Вставить("Цена", 0);
	СтруктураСтроки.Вставить("ВНаличииОстаток", 0);
	СтруктураСтроки.Вставить("ВладелецХарактеристик");
	СтруктураСтроки.Вставить("ВидЦены");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру необходимую для передачи данных о товаре в
// процедуры добавления товара в корзину.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	Структура - структура параметров товара.
//
Функция ПараметрыТовара(Номенклатура = Неопределено) Экспорт
	
	ПараметрыТовара = Новый Структура();
	ПараметрыТовара.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Артикул", "");
	ПараметрыТовара.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ХарактеристикаЦО", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка"));
	ПараметрыТовара.Вставить("СерияЦО", ПредопределенноеЗначение("Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка"));
	ПараметрыТовара.Вставить("УпаковкаЦО", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ХарактеристикиИспользуются", Ложь);
	ПараметрыТовара.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Цена",0);
	ПараметрыТовара.Вставить("Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ДатаОтгрузки",'00010101');
	ПараметрыТовара.Вставить("СрокПоставки",0);
	ПараметрыТовара.Вставить("КоличествоУпаковок",0);
	ПараметрыТовара.Вставить("Количество",0);
	ПараметрыТовара.Вставить("ЭтоТовар",Ложь);
	ПараметрыТовара.Вставить("ЭтоУслуга",Ложь);
	ПараметрыТовара.Вставить("ВидЦеныПоставщика", ПредопределенноеЗначение("Справочник.ВидыЦенПоставщиков.ПустаяСсылка"));
	ПараметрыТовара.Вставить("НоменклатураПартнера",ПредопределенноеЗначение("Справочник.НоменклатураКонтрагентов.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ЦеноваяГруппа",ПредопределенноеЗначение("Справочник.ЦеновыеГруппы.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ПроцентРучнойСкидки",0);
	ПараметрыТовара.Вставить("Продавец", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Помещение", ПредопределенноеЗначение("Справочник.СкладскиеПомещения.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Марка", ПредопределенноеЗначение("Справочник.Марки.ПустаяСсылка"));
	ПараметрыТовара.Вставить("РольАссортимента", ПредопределенноеЗначение("Перечисление.РолиАссортимента.ПустаяСсылка"));
	ПараметрыТовара.Вставить("РейтингПродаж", ПредопределенноеЗначение("Справочник.РейтингиПродажНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("СтадияАссортимента", ПредопределенноеЗначение("Перечисление.СтадииАссортимента.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ТоварнаяКатегория", ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка"));
	ПараметрыТовара.Вставить("НоменклатураНабора", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ХарактеристикаНабора", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ВариантКомплектацииНоменклатуры", ПредопределенноеЗначение("Справочник.ВариантыКомплектацииНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ВариантОбеспечения", ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Обособленно", Ложь);
	ПараметрыТовара.Вставить("Серия", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Доступно", 0);
	ПараметрыТовара.Вставить("ВНаличии", 0);
	ПараметрыТовара.Вставить("Погрешность", 0);
	ПараметрыТовара.Вставить("КоэффициентУпаковки", 1);
	Если Номенклатура <> Неопределено Тогда
		ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	КонецЕсли; 
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Устанавливает текст информационной надписи о количестве и сумме
// товаров подобранных в корзину на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекстИнформационнойНадписи(Форма) Экспорт
	
	Корзина = Форма.Объект.Корзина;
	Валюта = Форма.Валюта;
	
	ФорматнаяСтрока = НСтр("ru = 'НП = Истина; НД = Ложь; ДП = Ложь'");
	
	Сумма = Формат(Корзина.Итог("Сумма"), "ЧДЦ=2; ЧН=");
	Количество = НРег(ЧислоПрописью(Корзина.Количество(), ФорматнаяСтрока, НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму [Сумма] [Валюта] [СкрытьПоказать]'");
	
	СкрытьПоказать = "";
	
	Если Форма.РежимПодбораБезКоличественныхПараметров Или Форма.РежимПодбораБезСуммовыхПараметров Тогда
		ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров [СкрытьПоказать]'");
	КонецЕсли;
	
	СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	
	ВставляемыеЗначения = Новый Структура;
	ВставляемыеЗначения.Вставить("Количество",Количество);
	ВставляемыеЗначения.Вставить("Сумма",Сумма);
	ВставляемыеЗначения.Вставить("Валюта",Валюта);
	ВставляемыеЗначения.Вставить("СкрытьПоказать",СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Форма.ИнформационнаяНадпись = ИнформационнаяНадпись;
	
	Форма.Элементы.ОбластьПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
КонецПроцедуры

// Устанавливает текст надписи о скрытии или отображении остатков.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекстНадписиОтображатьОстатки(Форма) Экспорт
	
	Форма.ОтображатьОстаткиНадпись = ?(Форма.Элементы.ОстаткиТоваров.Видимость, 
		НСтр("ru = 'Подробная информация об остатках (скрыть)'"), 
		НСтр("ru = 'Подробная информация об остатках (показать)'"));
	
КонецПроцедуры

// Устанавливает текст надписи скрытия/отображения остатков номенклатуры поставщика.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекстНадписиОтображатьОстаткиНоменклатурыПартнера(Форма) Экспорт
	
	Форма.ОтображатьОстаткиНадпись = ?(Форма.Элементы.ОстаткиТоваров.Видимость, 
		НСтр("ru = 'Подробная информация об остатках (скрыть)'"), 
		НСтр("ru = 'Подробная информация об остатках (показать)'"));
	
КонецПроцедуры

// Формирует текст информационной надписи о количестве и сумме подобранных товаров.
//
// Параметры:
//	ИнформационнаяНадпись - Строка- реквизит, в который будет помещена информационная надпись,
//	КоличествоТоваров - Число - количество товаров,
//	СуммаТоваров - Число - сумма товаров,
//	Валюта - СправочникСсылка.Валюты - валюта, в которой осуществляется подбор товаров.
//
Процедура СформироватьИнформационнуюНадписьПодобранныхТоваров(ИнформационнаяНадпись, КоличествоТоваров, СуммаТоваров, Валюта) Экспорт
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано товаров [КоличествоТоваров] на сумму [СуммаТоваров] [Валюта]'");
	
	ВставляемыеЗначения = Новый Структура("КоличествоТоваров, СуммаТоваров, Валюта");
	
	ВставляемыеЗначения.КоличествоТоваров = Формат(КоличествоТоваров, "ЧН=0");
	ВставляемыеЗначения.СуммаТоваров      = Формат(СуммаТоваров, "ЧДЦ=2; ЧН=0,00");
	ВставляемыеЗначения.Валюта            = Валюта;
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
КонецПроцедуры

// Процедура удаляет строки из таблицы остатков на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ОчиститьТаблицуОстатков(Форма) Экспорт
	
	ОстаткиТоваров = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиТоваров.Очистить();
	
КонецПроцедуры

// Проверяет, есть ли в корзине товары продаваемые совместно.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения				 - форма подбора,
//  Объект	 - ДанныеФормыСтруктура	 - обработка подбора товаров, документ.
// 
// Возвращаемое значение:
//  Булево - истина, если товары есть.
//
Функция ЕстьТоварыПродаваемыеСовместно(Форма, Объект) Экспорт
	
	Возврат Объект.Корзина.Итог("ИндексСовместноПродаваемыеТовары") > 0;
	
КонецФункции

// Устанавливает видимость команды перехода к списку совместно продаваемых товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Объект - ДанныеФормыСтруктура - обработка подбора или документ.
//
Процедура УстановитьВидимостьКомандыПодбораНоменклатурыПродаваемойСовместно(Форма, Объект) Экспорт
	
	Форма.ЕстьНоменклатураПродаваемаяСовместно = ЕстьТоварыПродаваемыеСовместно(Форма, Объект);
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора товаров.
//
Процедура УстановитьЗаголовокФормыПодбора(Форма) Экспорт
	
	Документ = Форма.Параметры.Документ;
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Форма.Заголовок = Форма.Заголовок + ": " + Документ;
	Иначе
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (новый)'"), Документ.Метаданные().Синоним);
		
		Форма.Заголовок = Форма.Заголовок + ": " + ТекстДокумент;
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//  Заголовок	 - Строка		 - заголовок формы,
//  Документ	 - ДокументСсылка	 - ссылка на документ, из которого открывается подбор.
// 
// Возвращаемое значение:
//  Строка - заголовок формы подбора.
//
Функция СформироватьЗаголовокФормыПодбора(Заголовок, Документ) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат Заголовок;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Заголовок = Заголовок + ": " + Документ;
		
	Иначе
		
		ТекстДокумент = НСтр("ru='%1 (новый)'");
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокумент, Документ.Метаданные().Синоним);
		
		Заголовок = Заголовок + ": " + ТекстДокумент;
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Устанавливает значение параметра динамического списка, или отключает его использование в зависимости от признака.
//
// Параметры:
//	Список - ДинамическийСписок - список,
//	ИмяПараметра - Строка - имя параметра,
//	Значение - Произвольный - значение параметра,
//	Использование - Булево - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если Использование Тогда
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
		Иначе
			ЗначениеПараметра.Значение = Значение;
			ЗначениеПараметра.Использование = Ложь;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	Форма - см. ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если Не ЭтоФормаВыбораХарактеристик Тогда
		
		Форма.Элементы.ИерархияНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Тогда
			Форма.Элементы.ВидыНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		КонецЕсли;
		Форма.Элементы.ВидНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ДеревоОтборов.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.КоманднаяПанельВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
		
		Если Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам")
			Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам")
			Или Форма.ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры.ПоВидам") Тогда
			Форма.Элементы.НадписьВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.ДеревоОтборов.Доступность = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора
		Или ЭтоФормаСпискаНоменклатуры
		Или ЭтоФормаВыбораНоменклатуры Тогда
		Форма.Элементы.НоменклатураИсходногоКачества.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.СписокКачества.Доступность = Форма.ИспользоватьФильтры;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииНастройкиОтображенияФормыПоВариантуПоиска

// Назначает нужные сочетания для клавиш команд формы в зависимости от варианта поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьСочетанияКлавишКомандФормыПоВариантуПоиска(Форма)
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		ОсновнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыРасширенныйПоиск;
		ДополнительнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыСтандартныйПоиск;
	Иначе
		ОсновнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыСтандартныйПоиск;
		ДополнительнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыРасширенныйПоиск;
	КонецЕсли;
	
	ОсновнаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace);
	ДополнительнаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
