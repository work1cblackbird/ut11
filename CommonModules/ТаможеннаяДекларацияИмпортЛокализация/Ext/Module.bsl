
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Показывает сообщение пользователю, в случае если в таблице товаров по импорту имеется номенклатура, 
// с выключенным учетом по номерам ГТД.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - объект, в табличной части которого выполняется проверка.
//	Товары - ДанныеФормыКоллекция - таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	ИмяТабличнойЧасти - Строка - имя табличной части для подсветки в ней ячейки с ошибкой.
//	ИмяНоменклатурыТабличнойЧасти - Строка - имя реквизита табличной части для подсветки ошибки в нем.
//
Процедура ПроверитьКорректностьНастроекТоваровГТД(Объект,
												  Товары,
												  ДатаДокумента,
												  ИмяТабличнойЧасти = "Товары",
												  ИмяНоменклатурыТабличнойЧасти = "Номенклатура") Экспорт
	
	//++ Локализация
	Если УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента) Тогда
		ШаблонТекстаОшибки = НСтр("ru = 'Для оформляемой по импорту номенклатуры ""%1"" требуется установить признак учета по номерам ГТД или РНПТ.'");
	Иначе
		ШаблонТекстаОшибки = НСтр("ru = 'Для оформляемой по импорту номенклатуры ""%1"" требуется установить признак учета по номерам ГТД.'");
	КонецЕсли;
	
	ТоварыДляЗапроса = Товары.Выгрузить(, ИмяНоменклатурыТабличнойЧасти + ", НомерСтроки");
	ТоварыДляЗапроса.Колонки[ИмяНоменклатурыТабличнойЧасти].Имя = "Номенклатура";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|		ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|		ЕСТЬNULL(ТаблицаНоменклатуры.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
	|		ЕСТЬNULL(ТаблицаНоменклатуры.ВестиУчетПоГТД, ЛОЖЬ) КАК ВестиУчетПоГТД
	|	ИЗ
	|		ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
	|			ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
	|				И ТаблицаНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	
	|	) КАК ТаблицаТоваров
	|
	|ГДЕ
	|	НЕ ТаблицаТоваров.ПрослеживаемыйТовар
	|	И НЕ ТаблицаТоваров.ВестиУчетПоГТД
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыДляЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Номенклатура);
		
		ПутьКПолюНоменклатура = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти,
																				Выборка.НомерСтроки,
																				ИмяНоменклатурыТабличнойЧасти);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКПолюНоменклатура);
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
//@skip-warning
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(Объект, Истина);
	//-- Локализация
		
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
//@skip-warning
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	УчетПрослеживаемыхТоваровЛокализация.ПроверитьЗаполнениеКоличестваПоРНПТ(Объект, Отказ, Неопределено);
	УчетПрослеживаемыхТоваровЛокализация.ПроверитьДанныеПрослеживаемостиНомеровГТД(Объект, Объект.Товары, Объект.Дата);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
//@skip-warning
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	//++ Локализация	
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
//@skip-warning
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	//++ Локализация	
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//++ Локализация
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение И Объект.Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни Тогда
		ЗаполнитьНомераГТД(Объект);
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Объект.РучнаяКорректировкаЖурналаСФ = Ложь;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
//@skip-warning
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	//++ Локализация
	Если Не Отказ
		И Не ПроведениеДокументов.СвойстваДокумента(Объект).РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(Объект, Ложь);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.ТаможеннаяДекларацияИмпорт - Исходный документ, который является источником копирования.
//
//@skip-warning
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

// Устанавливает маску ввода номера таможенной декларации.
//
// Параметры:
// 	Маска - Строка - Маска ввода номера таможенной декларации
//
Процедура УстановитьМаскуНомераТаможеннойДекларации(Маска) Экспорт
	
	//++ Локализация
	Маска = "99999999/999999/NN999999";
	//-- Локализация
	
КонецПроцедуры

#Область ПодключаемыеКоманды

//@skip-warning
// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

//@skip-warning
// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// @skip-warning
// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

//@skip-warning
// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(Объект, Проведен)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	СтрокаСчетаФактуры = СчетаФактуры.Добавить();
	СтрокаСчетаФактуры.СчетФактура = Объект.Ссылка;
	СтрокаСчетаФактуры.СуммаОплаты = Объект.Товары.Итог("СуммаНДС");
	СтрокаСчетаФактуры.ОплатаЧерезЕдиныйЛицевойСчет = Объект.ОплатаЧерезЕдиныйЛицевойСчет;
	
	УчетНДСРФ.ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, Объект.Ссылка, Проведен);

КонецПроцедуры

Процедура ЗаполнитьНомераГТД(Объект)
	
	// Создаем новые номера ГТД по временной таблице ГенерацияГТД.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТовары.НомерРаздела			КАК НомерРаздела,
	|	ТаблицаТовары.НомерДляСФ			КАК НомерДляСФ,
	|	ТаблицаТовары.Номенклатура			КАК Номенклатура,
	|	ТаблицаТовары.СтранаПроисхождения	КАК СтранаПроисхождения,
	|	ТаблицаТовары.НомерГТД				КАК НомерГТД
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТовары.НомерРаздела			КАК НомерРаздела,
	|	ТаблицаТовары.НомерДляСФ			КАК НомерДляСФ,
	|	ТаблицаТовары.СтранаПроисхождения	КАК СтранаПроисхождения,
	|	ТаблицаТовары.НомерГТД				КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				И ЕСТЬNULL(ДанныеНоменклатуры.ПрослеживаемыйТовар, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерГТД)
	|	КОНЕЦ								КАК ТипНомераГТД
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ДанныеНоменклатуры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерГТД,
	|	НомерДляСФ,
	|	СтранаПроисхождения,
	|	ТипНомераГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.НомерДляСФ КАК НомерДляСФ
	|ИЗ
	|	Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.НомерДляСФ <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТовары";
	
	ИменаКолонок = "НомерСтроки, НомерРаздела, НомерДляСФ, Номенклатура, СтранаПроисхождения, НомерГТД";
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Объект.Дата);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить(, ИменаКолонок));
	Запрос.УстановитьПараметр("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров",
								ИспользоватьУчетПрослеживаемыхИмпортныхТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.НомераГТД");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Код", "НомерДляСФ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерДляСФ			КАК НомерДляСФ,
	|	ВЫБОР
	|		КОГДА Товары.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ)
	|			ТОГДА Товары.НомерДляСФ
	|		ИНАЧЕ &РегистрационныйНомер
	|	КОНЕЦ						КАК РегистрационныйНомер,
	|	Товары.СтранаПроисхождения	КАК СтранаПроисхождения,
	|	Товары.ТипНомераГТД			КАК ТипНомераГТД
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК УказанныеГТД
	|		ПО УказанныеГТД.Ссылка = Товары.НомерГТД
	|			И УказанныеГТД.ТипНомераГТД = Товары.ТипНомераГТД
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ПодобранныеГТД
	|		ПО ПодобранныеГТД.Код = Товары.НомерДляСФ
	|			И ПодобранныеГТД.СтранаПроисхождения = Товары.СтранаПроисхождения
	|			И ПодобранныеГТД.РегистрационныйНомер = &РегистрационныйНомер
	|			И ПодобранныеГТД.ТипНомераГТД = Товары.ТипНомераГТД
	|			И НЕ ПодобранныеГТД.ПометкаУдаления
	|
	|ГДЕ
	|	УказанныеГТД.Ссылка ЕСТЬ NULL
	|	И ПодобранныеГТД.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", Объект.НомерДекларации);
	Запрос.УстановитьПараметр("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров",
								ИспользоватьУчетПрослеживаемыхИмпортныхТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
		
		ПараметрыДляЗаполнения = Справочники.НомераГТД.ПараметрыДляЗаполненияЭлемента(Выборка.НомерДляСФ,
																						Выборка.СтранаПроисхождения);
		ЗаполнитьЗначенияСвойств(ПараметрыДляЗаполнения, Выборка, , "СтранаПроисхождения");
		
		ПараметрыДляЗаполнения.ЗаполнитьПорядковыйНомерТовараАвтоматически = Истина;
		
		НомерГТД.Заполнить(ПараметрыДляЗаполнения);
		НомерГТД.Записать();
	КонецЦикла;
	
	// Подбираем номера ГТД в товары.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.СтранаПроисхождения				КАК СтранаПроисхождения,
	|	Товары.НомерДляСФ						КАК НомерДляСФ,
	|	ПодобранныеГТД.Ссылка					КАК НомерГТД,
	|	ПодобранныеГТД.ПорядковыйНомерТовара	КАК ПорядковыйНомерТовараИзПодобранногоНомераГТД
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК УказанныеГТД
	|		ПО УказанныеГТД.Ссылка = Товары.НомерГТД
	|			И УказанныеГТД.ТипНомераГТД = Товары.ТипНомераГТД
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ПодобранныеГТД
	|		ПО ПодобранныеГТД.Код = Товары.НомерДляСФ
	|			И ПодобранныеГТД.СтранаПроисхождения = Товары.СтранаПроисхождения
	|			И ПодобранныеГТД.ТипНомераГТД = Товары.ТипНомераГТД
	|			И НЕ ПодобранныеГТД.ПометкаУдаления
	|
	|ГДЕ
	|	УказанныеГТД.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОбработанныеНомераГТД = Новый СписокЗначений;
		
		// слияние упорядоченных массивов, |Выборки| <= |Товары|
		Для Каждого Товар Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(Товар.НомерГТД)
				Или Товар.НомерСтроки < Выборка.НомерСтроки Тогда
			
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.НомерГТД) Тогда
				ВызватьИсключение НСтр("ru='Обнаружены проблемы в подборе номеров ГТД.'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НомерГТД)
				И ОбработанныеНомераГТД.НайтиПоЗначению(Выборка.НомерГТД) = Неопределено Тогда
				
				ПорядковыйНомерТовараИзНомераДляСФ = Справочники.НомераГТД.ПорядковыйНомерТовараИзНомераТаможеннойДекларации(Выборка.НомерДляСФ);
				
				Если Не Выборка.ПорядковыйНомерТовараИзПодобранногоНомераГТД = ПорядковыйНомерТовараИзНомераДляСФ Тогда
					НомерГТД = Выборка.НомерГТД.ПолучитьОбъект();
					
					Если НомерГТД = Неопределено Тогда
						ВызватьИсключение НСтр("ru='Обнаружены проблемы при изменении подобранных номеров ГТД.'");
					КонецЕсли;
					
					ЗаблокироватьДанныеДляРедактирования(Выборка.НомерГТД);
					НомерГТД.ПорядковыйНомерТовара = ПорядковыйНомерТовараИзНомераДляСФ;
					НомерГТД.Записать();
				КонецЕсли;
				
				ОбработанныеНомераГТД.Добавить(Выборка.НомерГТД);
				
			КонецЕсли;
			
			Товар.НомерГТД = Выборка.НомерГТД;
			
			Если Не Выборка.Следующий() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Проведение

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Документы.ТаможеннаяДекларацияИмпорт.УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Период КАК Период,
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки КАК КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки КАК ИндексСтроки,
	|	ЖурналУчетаСчетовФактур.Сторно КАК Сторно,
	|	ЖурналУчетаСчетовФактур.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйПокупателю КАК СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.СчетФактураПолученныйОтПродавца КАК СчетФактураПолученныйОтПродавца,
	|	ЖурналУчетаСчетовФактур.ИсправлениеСобственнойОшибки КАК ИсправлениеСобственнойОшибки,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.Продавец КАК Продавец,
	|	ЖурналУчетаСчетовФактур.КППКонтрагента КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактур.Посредник КАК Посредник,
	|	ЖурналУчетаСчетовФактур.УдалитьСчетФактураВыданныйПокупателю КАК УдалитьСчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.Субкомиссионер КАК Субкомиссионер,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыПродавца КАК НомерСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреКомиссия КАК СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСКомиссия КАК СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеКомиссия КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеКомиссия КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.КодВидаОперацииКомиссия КАК КодВидаОперацииКомиссия,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыПродавца КАК ДатаСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.ИННКонтрагента КАК ИННКонтрагента,
	|	ЖурналУчетаСчетовФактур.ИННПродавца КАК ИННПродавца,
	|	ЖурналУчетаСчетовФактур.КПППродавца КАК КПППродавца,
	|	ЖурналУчетаСчетовФактур.ИННСубкомиссионера КАК ИННСубкомиссионера,
	|	ЖурналУчетаСчетовФактур.КППСубкомиссионера КАК КППСубкомиссионера
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Регистратор = &Ссылка
	|	И &РучнаяКорректировкаЖурналаСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                         КАК Период,
	|	&Организация                    КАК Организация,
	|	ВЫБОР
	|		КОГДА &КонтрагентПоставщика = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА &Контрагент
	|		ИНАЧЕ &КонтрагентПоставщика
	|	КОНЕЦ                           КАК Контрагент,
	|	&Ссылка                         КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	&НомерДекларации                КАК НомерСчетаФактуры,
	|	&ДатаДекларации                 КАК ДатаСчетаФактуры,
	|	20                              КАК КодВидаОперации,
	|	2                               КАК КодВидаСделки,
	|	1                               КАК КодСпособаПолучения,
	|	&Валюта                         КАК Валюта,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаПоСчетуФактуре* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))) КАК СуммаПоСчетуФактуре,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)))           КАК СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	// таможенная стоимость (т.к. нет фактурной) и пошлины
	|	(ВЫБРАТЬ
	|		СУММА(Разделы.ТаможеннаяСтоимость + Разделы.СуммаПошлины) КАК СуммаПоСчетуФактуре,
	|		СУММА(Разделы.СуммаНДС)                                   КАК СуммаНДС
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК Разделы
	|	ГДЕ
	|		Разделы.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// НДС, включенный в стоимость
	|	ВЫБРАТЬ
	|		СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДС),
	|		0
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка
	|		И ТаможеннаяДекларацияИмпортТовары.ЗакупкаПодДеятельность В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Таможенный сбор и штрафы, если они включаются в стоимость импортированных ценностей.
	|	ВЫБРАТЬ
	|		ВЫБОР
	|				КОГДА ТаможеннаяДекларацияИмпорт.СтатьяРасходовСбор.ВариантРаспределенияРасходовРегл В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|					ТОГДА ТаможеннаяДекларацияИмпорт.ТаможенныйСбор
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ТаможеннаяДекларацияИмпорт.СтатьяРасходовШтраф.ВариантРаспределенияРасходовРегл В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|					ТОГДА ТаможеннаяДекларацияИмпорт.ТаможенныйШтраф
	|				ИНАЧЕ 0
	|			КОНЕЦ ,
	|		0
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка = &Ссылка) КАК ДанныеДокумента
	|ГДЕ
	|	НЕ &РучнаяКорректировкаЖурналаСФ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#КонецОбласти

//-- Локализация
