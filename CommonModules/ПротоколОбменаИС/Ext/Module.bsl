
#Область ПрограммныйИнтерфейс

// Получает текст сообщения XML из присоединенного файла, в котором хранится сообщение протокола обмена.
//
// Параметры:
//  Сообщение - ОпределяемыйТип.ПрисоединенныйФайл, Строка - хранимый файл сообщения, из которого извлекается текст сообщения XML.
// 
// Возвращаемое значение:
//  Строка - полученный текст сообщения XML.
//
Функция ТекстСообщенияXMLИзПротокола(Сообщение) Экспорт
	
	Если ТипЗнч(Сообщение) = Тип("Строка") Тогда
		Возврат Сообщение;
	КонецЕсли;
	
	ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Сообщение);
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8, "");
	ТекстСообщенияXML = ТекстовыйДокумент.ПолучитьТекст();
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат ТекстСообщенияXML;
	
КонецФункции

// Добавить запись в протокол обмена.
//
// Параметры:
//   Протокол              - ОбъектМетаданныхСправочник - протокол обмена
//   ТекстСообщенияXML     - Строка                     - Текст сообщения XML.
//   Реквизиты - Структура                              - Значения реквизитов сообщения, с обязательными полями:
//    * Документ       - Произвольный - документ по которому ведется протокол обмена,
//    * ВладелецФайлов - Произвольный - элемент по которому ведется обмен с ГосИС.
//   ПроверятьХешБезСсылки - Булево                     - Признак проверки хеша без ссылки.
//   ЗаписатьПринудительно - Булево                     - Признак записи сообщения без поиска по хешу.
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//    * НовоеСообщение - Булево - Это новое сообщение.
//    * Ссылка - СправочникСсылка - Ссылка на присоединенный файл (СправочникСсылка[Протокол.Имя]).
//    * Документ - ДокументСсылка, СправочникСсылка - ссылка на документ-основание обмена
//    * ДокументОснование - ДокументСсылка, СправочникСсылка, Неопределено - ссылка на ДокументОснование от Документ
//
Функция ДобавитьЗаписьВПротоколОбмена(Протокол, ТекстСообщенияXML, Реквизиты, ПроверятьХешБезСсылки, ЗаписатьПринудительно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗаписатьПринудительно Тогда
		
		ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеДанныхОбъект.Добавить(ТекстСообщенияXML);
		ХешСуммаBase64 = Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
		
		Если ПроверятьХешБезСсылки Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Протокол.Ссылка КАК Ссылка,
			|	Протокол.Документ КАК Документ
			|ИЗ
			|	&Протокол КАК Протокол
			|ГДЕ
			|	Протокол.ХешСумма = &ХешСумма
			|	И Протокол.Документ ССЫЛКА &ИмяТаблицы");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Протокол",   Протокол.ПолноеИмя());
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", Реквизиты.Документ.Метаданные().ПолноеИмя());
			Запрос.УстановитьПараметр("ХешСумма", ХешСуммаBase64);
			
		Иначе
			
			СообщениеОснование = Справочники[Протокол.Имя].ПустаяСсылка();
			Если Реквизиты.Свойство("СообщениеОснование") Тогда
				СообщениеОснование = Реквизиты.СообщениеОснование;
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Протокол.Ссылка КАК Ссылка,
			|	Протокол.Документ КАК Документ
			|ИЗ
			|	&Протокол КАК Протокол
			|ГДЕ
			|	Протокол.Документ = &Документ
			|	И Протокол.СообщениеОснование = &СообщениеОснование
			|	И Протокол.ХешСумма = &ХешСумма");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Протокол",   Протокол.ПолноеИмя());
			Запрос.УстановитьПараметр("Документ",           Реквизиты.Документ);
			Запрос.УстановитьПараметр("ХешСумма",           ХешСуммаBase64);
			Запрос.УстановитьПараметр("СообщениеОснование", СообщениеОснование);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	
	Если Выборка <> Неопределено
		И Выборка.Следующий() Тогда
		
		НовоеСообщение = Ложь;
		
		Ссылка   = Выборка.Ссылка;
		Документ = Выборка.Документ;
		
		Если ЗначениеЗаполнено(Выборка.Документ)
			И Выборка.Документ.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
			//@skip-check wrong-string-literal-content
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "ДокументОснование");
		КонецЕсли;
		
	Иначе
		
		НовоеСообщение = Истина;
		ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ТекстСообщенияXML, КодировкаТекста.UTF8);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов",     Реквизиты.ВладелецФайлов);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   Строка(Новый УникальныйИдентификатор));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла,
			АдресФайлаВоВременномХранилище,,,
			Справочники[Протокол.Имя].ПолучитьСсылку());
		
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.ХешСумма = ХешСуммаBase64;
		
		ЗаполнитьЗначенияСвойств(ПрисоединенныйФайлОбъект, Реквизиты);
		
		ПрисоединенныйФайлОбъект.Записать();
		
		Ссылка   = ПрисоединенныйФайлОбъект.Ссылка;
		Документ = ПрисоединенныйФайлОбъект.Документ;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовоеСообщение",    НовоеСообщение);
	ВозвращаемоеЗначение.Вставить("Ссылка",            Ссылка);
	ВозвращаемоеЗначение.Вставить("Документ",          Документ);
	ВозвращаемоеЗначение.Вставить("ДокументОснование", ДокументОснование);
	
	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Вызывает исключение при открытии формы протокола обмена с незаполненным параметром "Документ"
//  (форма предназначается для просмотра протокола обмена по конкретному объекту).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма протокола обмена:
//   * ДляДокументаОснования - Булево - форма открывается для документа-основания (в режиме дерева)
//   * Документ              - Произвольный - источник данных
//   * Параметры             - Структура - параметры открытия формы:
//    ** ДляДокументаОснования - Булево - форма открывается для документа-основания (в режиме дерева)
//    ** Документ              - Произвольный - источник данных
//  ИмяПоляДокумент - Строка - Имя поля Документ
//  ИмяРеквизита - Строка - Имя реквизита
//
Процедура ОтработатьВходящийДокументПротоколаОбмена(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Параметры.Документ) Тогда
		Форма.Документ = Форма.Параметры.Документ;
		Форма.ДляДокументаОснования = Форма.Параметры.ДляДокументаОснования;
	Иначе
		ВызватьИсключение НСтр("ru = 'Протокол обмена может быть открыт только в контексте документа.'");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает типовое условное оформление протокола обмена
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма протокола обмена
//
Процедура УстановитьУсловноеОформлениеПротоколаОбмена(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ДеревоЗачеркнутый
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЗачеркнутый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
#КонецОбласти

#Область ДеревоСерый

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеСерый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

#Область ДеревоЖирный

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЖирный";

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
#КонецОбласти

#Область ДеревоОтказ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеОшибка";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиОшибкаПередачиГосИС);
	
#КонецОбласти

#Область ДатаНеПередана
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(Форма, "ДеревоФайлов.Дата", Элементы.ДеревоФайловДата.Имя);
	
	// Представление даты "<не передано>"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоФайловДата");
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты ""<не передано>""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоФайлов.Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = '00010101';
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не передано>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

КонецПроцедуры

// Возвращает индекс картинки запроса в коллекции "ПротоколОбменаИС"
//
// Параметры:
//  СтрокаПоследовательности - Произвольный - коллекция с типом запроса (входящий, исходящий)
//  НеВыполнен				 - Булево - серые стрелки (по умолчанию Ложь)
// 
// Возвращаемое значение:
//  Число - индекс соответствующей картинки запроса
//
Функция ИндексКартинкиЗапроса(СтрокаПоследовательности, НеВыполнен = Ложь) Экспорт
	
	ИндексКартинки = 0;
	
	Смещение = 0;
	Если НеВыполнен Тогда
		Смещение = 6;
	КонецЕсли;
	
	Если СтрокаПоследовательности = Неопределено Тогда
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
		ИндексКартинки = 1 + Смещение;
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий Тогда
		ИндексКартинки = 2 + Смещение;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

#Область ПоследовательностьСообщений

// Создает таблицу последовательности операций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС, ПеречислениеСсылка.ВидыОперацийИСМП - Операция.
//   * Индекс - Число - Индекс операции в последовательности.
//   * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * ДальнейшиеДействия - Массив Из ПеречислениеСсылка - Дальнейшие действия при операции.
//
Функция ПустаяТаблицаПоследовательностьОпераций() Экспорт
	
	ПоследовательностьОпераций = Новый ТаблицаЗначений;
	
	ПоследовательностьОпераций.Колонки.Добавить("Операция");
	ПоследовательностьОпераций.Колонки.Добавить("Индекс");
	ПоследовательностьОпераций.Колонки.Добавить("ТипСообщения");
	ПоследовательностьОпераций.Колонки.Добавить("ДальнейшиеДействия");
	ПоследовательностьОпераций.Колонки.Добавить("АбстрактнаяОперация", Новый ОписаниеТипов("Булево"));
	
	Возврат ПоследовательностьОпераций;
	
КонецФункции

// Возвращает предыдущую операцию последовательности операций.
//
// Параметры:
//  ПоследовательностьОпераций - ТаблицаЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//  СтрокаПоследовательности - СтрокаТаблицыЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//  ИсходныйИндекс - Число - Индекс текущей операции.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПредыдущаяОперация(ПоследовательностьОпераций, СтрокаПоследовательности, Знач ИсходныйИндекс = Неопределено) Экспорт
	
	ИндексСтроки = ПоследовательностьОпераций.Индекс(СтрокаПоследовательности);
	
	Если ИндексСтроки = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредыдущаяОперация = ПоследовательностьОпераций.Получить(ИндексСтроки - 1);
	
	Если ИсходныйИндекс = Неопределено Тогда
		ИсходныйИндекс = СтрокаПоследовательности.Индекс;
	КонецЕсли;
	
	// Пропускаем абстрактные операции
	Если ПредыдущаяОперация.АбстрактнаяОперация Тогда
		Возврат ПредыдущаяОперация(ПоследовательностьОпераций, ПредыдущаяОперация, ИсходныйИндекс);
	КонецЕсли;
	
	АнализироватьПредыдущуюОперацию = ПроверитьИндекс(
		Формат(ПредыдущаяОперация.Индекс, "ЧГ=0;ЧН=0"),
		Формат(ИсходныйИндекс, "ЧГ=0;ЧН=0"));
	
	Если АнализироватьПредыдущуюОперацию
		И ПредыдущаяОперация.Индекс <> 0 Тогда
		Возврат ПредыдущаяОперация(ПоследовательностьОпераций, ПредыдущаяОперация, ИсходныйИндекс);
	КонецЕсли;
	
	Возврат ПредыдущаяОперация;
	
КонецФункции

// Добавляет операцию в последовательность операций.
//
// Параметры:
//  ПоследовательностьОпераций - см. ПустаяТаблицаПоследовательностьОпераций.
//  Индекс - Число - Индекс добавляемой операции.
//  ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС, ПеречислениеСсылка.ВидыОперацийИСМП - Операция.
//  РассчитатьДействияДляДокумента - ДокументСсылка - Документ, для которого нужно вычислить дальнейшие действия.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//
Функция ДобавитьОперациюВПоследовательность(ПоследовательностьОпераций,
			Индекс, ТипСообщения, Операция, РассчитатьДействияДляДокумента = Неопределено) Экспорт

	НоваяСтрока = ПоследовательностьОпераций.Добавить();
	НоваяСтрока.Операция           = Операция;
	НоваяСтрока.Индекс             = Индекс;
	НоваяСтрока.ТипСообщения       = ТипСообщения;
	НоваяСтрока.ДальнейшиеДействия = Новый Массив;
	
	Если ЗначениеЗаполнено(РассчитатьДействияДляДокумента) Тогда
		
		ПолноеИмя = РассчитатьДействияДляДокумента.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Если ПоследовательностьОпераций.Количество() = 1 Тогда
			
			НоваяСтрока.ДальнейшиеДействия.Добавить(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
			
		Иначе
			
			ПредыдущаяОперация = ПредыдущаяОперация(ПоследовательностьОпераций, НоваяСтрока);
			
			Если ПредыдущаяОперация = Неопределено Тогда
				
				НоваяСтрока.ДальнейшиеДействия.Добавить(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
				
			Иначе
				
				Если ПредыдущаяОперация.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
					Статусы = МенеджерОбъекта.СтатусПослеПередачиДанных(
						РассчитатьДействияДляДокумента,
						ПредыдущаяОперация.Операция,
						Неопределено);
				Иначе
					Статусы = МенеджерОбъекта.СтатусПослеПолученияДанных(
						РассчитатьДействияДляДокумента,
						ПредыдущаяОперация.Операция);
				КонецЕсли;
				
				Если Статусы.Количество() Тогда
					МенеджерСтатусов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Статусы[0]);
					НоваяСтрока.ДальнейшиеДействия = МенеджерСтатусов.ДальнейшиеДействия(Статусы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Выполняет отмену операции.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Ссылка на документ, операцию которого необходимо отменить.
// 	ДанныеПоследнегоСообщения - Структура - Данные последнего сообщения, например структура, возвращаемая функцией См. Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение.
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	ПоследовательностьОпераций = МенеджерОбъекта.ПоследовательностьОпераций(ДокументСсылка);
	
	СтрокаПоследовательности = ПоследовательностьОпераций.Найти(ДанныеПоследнегоСообщения.Операция, "Операция");
	
	ПредыдущаяОперация = ПредыдущаяОперация(ПоследовательностьОпераций, СтрокаПоследовательности);
	Если ПредыдущаяОперация = Неопределено Тогда
		
		НовыйСтатусПослеОбновления = МенеджерОбъекта.ОбновитьСтатус(
			ДокументСсылка, Неопределено, Неопределено);
		
	Иначе
		
		Если ПредыдущаяОперация.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
			ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
				ДокументСсылка,
				ПредыдущаяОперация.Операция,
				Неопределено);
		Иначе
			ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
				ДокументСсылка,
				ПредыдущаяОперация.Операция,
				Неопределено);
		КонецЕсли;
		
		Если ПараметрыОбновления = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НовыйСтатусПослеОбновления = МенеджерОбъекта.ОбновитьСтатус(
			ДокументСсылка,
			ПараметрыОбновления,
			Неопределено);
		
	КонецЕсли;
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, что проверяемый индекс операции является более общим для исходного индекса операции последовательности.
//
// Параметры:
//  ИндексОперации - Число - Индекс операции.
//  ИсходныйИндекс - Число - Исходный индекс операции.
// 
// Возвращаемое значение:
//  Булево - Исходный индекс операции принадлежит к индексу текущий операции.
//
Функция ПроверитьИндекс(ИндексОперации, ИсходныйИндекс)
	
	Если ИндексОперации <> ИсходныйИндекс Тогда
		Если СтрДлина(ИсходныйИндекс) = СтрДлина(ИндексОперации) Тогда
			Возврат Истина;
		Иначе
			Если СтрДлина(ИсходныйИндекс) > 1 Тогда
				Возврат ПроверитьИндекс(ИндексОперации, Лев(ИсходныйИндекс, СтрДлина(ИсходныйИндекс) - 1));
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти