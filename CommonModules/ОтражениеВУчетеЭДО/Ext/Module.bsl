// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаСобытий

// См. НастройкиЭДО.ПриЗаполненииСписковСОграничениемДоступа
// 
// Параметры:
//  Списки - Соответствие из КлючИЗначение:
//  * Ключ - ОбъектМетаданных
//  * Значение - Булево
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт

	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов, Истина);
	
КонецПроцедуры

// См. НастройкиЭДО.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
// 
// Параметры:
//  Описание - Строка
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Чтение.Организации
	|РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Изменение.Организации
	|";
	
КонецПроцедуры

// См. НастройкиЭДОСобытия.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);

#Область Версия_1_3_6

#Область НастройкиЭДОСлужебный_ЗаполнитьВходящиеДокументыНастроек

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОтражениеВУчетеЭДО.ЗаполнитьВходящиеДокументыНастроек";
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение настроек входящих документов'");

#КонецОбласти

#КонецОбласти
	
КонецПроцедуры

// См. НастройкиЭДО.ПриУдаленииУчетнойЗаписи
// 
// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторУчетнойЗаписи) Экспорт
	
	РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.УдалитьПоУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписи);
	
КонецПроцедуры

// См. ЭлектронныеДокументыЭДОСобытия.ПослеЗагрузкиНовогоЭлектронногоДокумента
// 
// Параметры:
//  ЗагруженныйДокумент - См. ЭлектронныеДокументыЭДО.НовыеСведенияЗагруженногоДокумента
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
Процедура ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики) Экспорт
	
	Если ЗначениеЗаполнено(ЗагруженныйДокумент.ИсправленнаяВерсияДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
	ДанныеДокумента.ЭлектронныйДокумент = ЗагруженныйДокумент.ЭлектронныйДокумент;
	ДанныеДокумента.ВидДокумента = ЗагруженныйДокумент.ВидДокумента;
	ДанныеДокумента.ТипДокумента = ЗагруженныйДокумент.ТипДокумента;		
	ДанныеДокумента.Отправитель = ЗагруженныйДокумент.Контрагент;
	ДанныеДокумента.Получатель = ЗагруженныйДокумент.Организация;
	ДанныеДокумента.ИдентификаторОтправителя = ЗагруженныйДокумент.ИдентификаторОтправителя;
	ДанныеДокумента.ИдентификаторПолучателя = ЗагруженныйДокумент.ИдентификаторПолучателя;
	ДанныеДокумента.ДанныеОсновногоФайла = ЗагруженныйДокумент.ОписаниеДанных;
	ДанныеДокумента.ДанныеДополнительногоФайла = ЗагруженныйДокумент.ОписаниеДополнительныхДанных;
	ДанныеДокумента.ДополнительныеПараметрыКарточки = ЗагруженныйДокумент.ДополнительныеПараметрыКарточки;
	ДанныеДокумента.Формат = ЗагруженныйДокумент.Формат;
	
	ОтразитьДанныеЭлектронногоДокументаСКонтролем(ДанныеДокумента);
	
КонецПроцедуры

// Обработчик события "При записи" учетного документ.
// Для электронных документов, связанных с данным учетным документом,
// выполняется контроль проведения учетных документов.
// 
// Параметры:
//  Источник - ОпределяемыйТип.ОснованияЭлектронныхДокументовДокументОбъектЭДО
//  Отказ - Булево
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиУчетногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
	
	НаборЭлектронныхДокументов = ИнтеграцияЭДО.ЭлектронныеДокументыОбъектовУчета(
		ОбъектыУчета).ВыгрузитьКолонку("ЭлектронныйДокумент");
		
	ВходящиеДокументы = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
		
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			ВходящиеДокументы.Добавить(ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого Документ Из ВходящиеДокументы Цикл	
		ВыполнитьКонтрольПроведенияУчетныхДокументов(Документ);	
	КонецЦикла;
	
	Проверки = Новый Массив; // Массив из Строка
	Проверки.Добавить("ПровестиУчетныйДокумент");
	
	ВыполнитьКонтрольОтраженияВУчете(ВходящиеДокументы, Проверки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" регистра сведений НоменклатураКонтрагентовБЭД.
// Отключает контроль сопоставления по той номенклатуре контрагента, которой установлено соответствие с номенклатурой ИБ.
// Те электронные документы, которые содержали сопоставленные строки, проверяются повторно на наличие еще несопоставленных строк.
// 
// Параметры:
//  Источник - ОпределяемыйТип.ОснованияЭлектронныхДокументовДокументОбъектЭДО
//  Отказ - Булево
//  Замещение - Булево
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиНоменклатурыКонтрагентов(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Владелец КАК Владелец,
	|	НоменклатураКонтрагентов.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатураКонтрагентов
	|ИЗ
	|	&НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контроль.Владелец КАК Владелец,
	|	Контроль.Идентификатор КАК Идентификатор,
	|	втНоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагентов КАК втНоменклатураКонтрагентов
	|		ПО Контроль.Владелец = втНоменклатураКонтрагентов.Владелец
	|			И Контроль.Идентификатор = втНоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	&УсловиеПоВладельцу
	|	И &УсловиеПоИдентификатору";
	Запрос.УстановитьПараметр("НоменклатураКонтрагентов", Источник.Выгрузить());
	
	УсловиеПоВладельцу = "ИСТИНА";
	Если Источник.Отбор.Владелец.Использование Тогда
		УсловиеПоВладельцу = "Контроль.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Источник.Отбор.Владелец.Значение);
	КонецЕсли;
	УсловиеПоИдентификатору = "ИСТИНА";
	Если Источник.Отбор.Идентификатор.Использование Тогда
		УсловиеПоИдентификатору = "Контроль.Идентификатор = &Идентификатор";
		Запрос.УстановитьПараметр("Идентификатор", Источник.Отбор.Идентификатор.Значение);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВладельцу", УсловиеПоВладельцу);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификатору", УсловиеПоИдентификатору);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаОтключение = Новый Массив; // Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
	
	НеУдалятьЗапись = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства,
		"НеУдалятьЗапись", Ложь); // Булево
	
	Пока Выборка.Следующий() Цикл
		
		СопоставлениеВыполнено = ЗначениеЗаполнено(Выборка.Номенклатура) ИЛИ (Выборка.Номенклатура = NULL И НЕ НеУдалятьЗапись);
		Если СопоставлениеВыполнено Тогда
			НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Выборка);
			НаОтключение.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЭлектронныхДокументов = ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентов(НаОтключение);
	
	Проверки = Новый Массив; // см. ВыполнитьКонтрольОтраженияВУчете.НаборПроверок
	Проверки.Добавить("СопоставитьНоменклатуру");
	
	ВыполнитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов, Проверки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОбновления

// Обработчик обновления БЭД 1.3.6.4
// Заполняет в справочнике СоглашенияОбИспользованииЭД табличную часть ВходящиеДокументы
// способами по умолчанию.
//
Процедура ЗаполнитьВходящиеДокументыНастроек() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Ссылка = Выборка.Ссылка; // СправочникСсылка.УдалитьСоглашенияОбИспользованииЭД
			Настройка = Ссылка.ПолучитьОбъект();
			Настройка.ВходящиеДокументы.Очистить();
			ТаблицаПредопределенногоПрофиля = ТаблицаПредопределенногоПрофиля(
				ПрофилиНастроекОтраженияВходящихДокументов().Автоматически);
			ТаблицаПредопределенногоПрофиля.Колонки.ТипДокумента.Имя = "ВходящийДокумент";
			ТаблицаПредопределенногоПрофиля.Колонки.ПрикладнойТипДокумента.Имя = "ПрикладнойВидЭД";
			Настройка.ВходящиеДокументы.Загрузить(ТаблицаПредопределенногоПрофиля);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Настройка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
		ПодробныйТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// См. НастройкиЭДО.СоздатьНастройкиОтраженияВУчете
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  ИдентификаторОрганизации - Строка
//  ИдентификаторКонтрагента - Строка
//  Отказ - Булево - если Истина, настройки создать не удалось
Процедура СоздатьНастройкиОтраженияВУчете(Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента, Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтраженияВУчетеЭДО", "Организация",
		Организация, Метаданные.ОпределяемыеТипы.Организация.Тип);
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтраженияВУчетеЭДО", "Контрагент",
		Контрагент, Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100));
	ТекущаяТаблица = ШаблонНастроекОтраженияВУчете(
		ПрофилиНастроекОтраженияВходящихДокументов().ПервоначальноеЗаполнение);
	ТекущаяТаблица.Колонки.Добавить("Отправитель"              , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ТекущаяТаблица.Колонки.Добавить("Получатель"               , Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТекущаяТаблица.Колонки.Добавить("ИдентификаторОтправителя" , ОписаниеТиповСтрока100);
	ТекущаяТаблица.Колонки.Добавить("ИдентификаторПолучателя"  , ОписаниеТиповСтрока100);
	
	ТекущаяТаблица.ЗаполнитьЗначения(Контрагент               , "Отправитель");
	ТекущаяТаблица.ЗаполнитьЗначения(Организация              , "Получатель");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторКонтрагента , "ИдентификаторОтправителя");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторОрганизации , "ИдентификаторПолучателя");
	
	НоваяТаблица = ТекущиеНастройкиОтраженияВУчете(ТекущаяТаблица);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Отправитель" , Контрагент  );
		ЭлементБлокировки.УстановитьЗначение("Получатель"  , Организация );
		
		Блокировка.Заблокировать();
		
		НастройкиОтправкиЭД = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
		НастройкиОтправкиЭД.Отбор.Отправитель.Установить(Контрагент);
		НастройкиОтправкиЭД.Отбор.Получатель.Установить(Организация);
		НастройкиОтправкиЭД.Загрузить(НоваяТаблица);
		НастройкиОтправкиЭД.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Создание настроек отражения в учете электронных документов'"),
			ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(Информация),
			ОбщегоНазначенияБЭД.КраткоеПредставлениеИнформацииОбОшибке(Информация));
		Отказ = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

// Записать настройку получения документов.
// 
// Параметры:
//  КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
//  СпособОбработки - Строка
//  НеПредлагатьСохранятьНастройки - Булево
//  Отказ - Булево
Процедура ЗаписатьНастройкуПолученияДокументов(КлючНастроек, СпособОбработки, НеПредлагатьСохранятьНастройки, Отказ) Экспорт
	
	Если КлючНастроек = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущаяНастройка = ТекущаяНастройкаОтраженияВУчете(КлючНастроек);
	
	Если ТекущаяНастройка = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Получатель"              , ТекущаяНастройка.Получатель);
		ЭлементБлокировки.УстановитьЗначение("Отправитель"             , ТекущаяНастройка.Отправитель);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОтправителя", ТекущаяНастройка.ИдентификаторОтправителя);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПолучателя" , ТекущаяНастройка.ИдентификаторПолучателя);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента"            , ТекущаяНастройка.ВидДокумента);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяНастройка);
		МенеджерЗаписи.Прочитать();
		
		Если Не МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяНастройка);
		КонецЕсли;
		
		Записать = Ложь;
		Если СпособОбработки <> Неопределено Тогда
			Записать = Истина;
			МенеджерЗаписи.СпособОбработки = СпособОбработки;
		КонецЕсли;
		
		Если НеПредлагатьСохранятьНастройки <> Неопределено Тогда
			Записать = Истина;
			МенеджерЗаписи.НеПредлагатьСохранятьНастройки = НеПредлагатьСохранятьНастройки;
		КонецЕсли;
		
		Если Записать Тогда
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		
		Информация = ИнформацияОбОшибке();
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление настроек отражения в учете'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(Информация),
			НСтр("ru = 'Не удалось обновить настройки отражения в учете'"));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает настройки получения ЭД по ИД участников.
//
// Параметры:
//  ИдентификаторОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИдентификаторПолучателя  - Строка - строка с уникальный идентификатор получателя.
//  Организация - ОпределяемыйТип.Организация - ссылка на справочник организаций.
//  Контрагент  - ОпределяемыйТип.УчастникЭДО - ссылка на справочник контрагенты.
//  СоздаватьНастройки - Булево - создавать настройки автоматически.
//
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//    * Организация - ОпределяемыйТип.Организация
//    * Контрагент - ОпределяемыйТип.УчастникЭДО
Функция ПолучитьНастройкиПолученияПоИдентификаторам(ИдентификаторОтправителя, ИдентификаторПолучателя, Организация, Контрагент, СоздаватьНастройки = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыНастройки = Неопределено; // См. ПолучитьНастройкиПолученияПоИдентификаторам
	
	Запросы = Новый Массив; // Массив из см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
	ОтборПриглашений = СинхронизацияЭДО.НовыйОтборПриглашений();
	ОтборПриглашений.ИдентификаторОрганизации = "&ИдентификаторПолучателя";
	ОтборПриглашений.ИдентификаторКонтрагента = "&ИдентификаторОтправителя";
	ЗапросПриглашений = СинхронизацияЭДО.ЗапросПриглашений("ПриглашенияКОбменуЭлектроннымиДокументами",
		ОтборПриглашений);
	Запросы.Добавить(ЗапросПриглашений);
	
	ОтборУчетныхЗаписей = СинхронизацияЭДО.НовыйОтборУчетныхЗаписей();
	ОтборУчетныхЗаписей.УчетныеЗаписи = "&ИдентификаторПолучателя";
	ЗапросУчетныхЗаписей = СинхронизацияЭДО.ЗапросУчетныхЗаписей("УчетныеЗаписиЭДО", ОтборУчетныхЗаписей);
	Запросы.Добавить(ЗапросУчетныхЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
	|	УчетныеЗаписиЭДО.Организация КАК Организация,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент
	|ИЗ
	|	ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	ИтоговыйЗапрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторОтправителя);
	
	ТаблицаПриглашений = ИтоговыйЗапрос.Выполнить().Выгрузить();
	
	Присоединен = Ложь;
	СтатусПриглашения = Неопределено;
	Если ТаблицаПриглашений.Количество() > 0 Тогда
		СтатусПриглашения = ТаблицаПриглашений[0].Статус; // Неопределено,ПеречислениеСсылка.СтатусыПриглашений
		Если ПриглашенияЭДО.ПриглашениеПринято(СтатусПриглашения) Тогда
			Присоединен = Истина;
		КонецЕсли;
		// Если на входе не были определены организация или контрагент (это может быть, если, например, у контрагента
		// сменился КПП), определим их из приглашения и будем использовать, пока пользователь не создаст нового контрагента
		// или не отредактирует старого.
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ТаблицаПриглашений[0].Организация; // ОпределяемыйТип.Организация
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = ТаблицаПриглашений[0].Контрагент; // ОпределяемыйТип.УчастникЭДО
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Контрагент" , ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПолученияЭлектронныхДокументов.Получатель КАК Организация,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель КАК Контрагент
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &Организация = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ НастройкиПолученияЭлектронныхДокументов.Получатель = &Организация
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ НастройкиПолученияЭлектронныхДокументов.Отправитель = &Контрагент
	|	КОНЕЦ
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПолученияЭлектронныхДокументов.Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Организация
	|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Контрагент
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"";
	
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторОтправителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПараметрыНастройки = Новый Структура;
		ПараметрыНастройки.Вставить("Организация",         Выборка.Организация);
		ПараметрыНастройки.Вставить("Контрагент",          Выборка.Контрагент);
	ИначеЕсли СоздаватьНастройки И Присоединен Тогда
		
		НастройкиОтправкиЭДО.СоздатьНастройкиОтправки(Организация, Контрагент, Неопределено, ИдентификаторПолучателя, ИдентификаторОтправителя);
		СоздатьНастройкиОтраженияВУчете(Организация, Контрагент, "", "");
		
		ПараметрыНастройки = ПолучитьНастройкиПолученияПоИдентификаторам(
			ИдентификаторОтправителя, ИдентификаторПолучателя, Организация, Контрагент, Ложь);
		
		Возврат ПараметрыНастройки;
		
	КонецЕсли;
	
	Возврат ПараметрыНастройки;
	
КонецФункции

// Возвращает способ обработки электронного документа.
//   
// Параметры:
// 	КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
// 	
// Возвращаемое значение:
//  см. НастройкиОтраженияПоУмолчанию
//
Функция НастройкиОтраженияВУчете(КлючНастроек) Экспорт
	
	Настройки = НастройкиОтраженияПоУмолчанию();
	
	Если Не ДокументИспользуется(КлючНастроек.ВидДокумента) Тогда
		Возврат Настройки;
	КонецЕсли;
	
	СохраненныеНастройки = СохраненныеНастройкиОтражения(КлючНастроек);
	
	Если ЗначениеЗаполнено(СохраненныеНастройки.ПоПолномуКлючу)
		Или ЗначениеЗаполнено(СохраненныеНастройки.БезУчетаВидаДокумента) Тогда
			
		Если НастройкиАктуальны(КлючНастроек, СохраненныеНастройки) Тогда
			ЗаполнитьЗначенияСвойств(Настройки, СохраненныеНастройки.ПоПолномуКлючу);
		Иначе
			ДополнитьИСохранитьНастройкиИзПредопределенногоПрофиля(КлючНастроек, Настройки, СохраненныеНастройки.БезУчетаВидаДокумента);
		КонецЕсли;
	Иначе
		ДополнитьНастройкиИзДругихПодсистем(КлючНастроек, Настройки);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Возвращает доступные профили настроек отражения входящих документов.
//
// Возвращаемое значение:
//  Структура:
//  * Автоматически - Строка
//  * Вручную - Строка
//  * НеОтражать - Строка
//  * Поставщик - Строка
//  * Покупатель - Строка
//  * ПервоначальноеЗаполнение - Строка
Функция ПрофилиНастроекОтраженияВходящихДокументов() Экспорт
	
	ПрофилиНастроек = Новый Структура;	
	ПрофилиНастроек.Вставить("Автоматически", "Автоматически");
	ПрофилиНастроек.Вставить("Вручную", "Вручную");
	ПрофилиНастроек.Вставить("НеОтражать", "НеОтражать");
	ПрофилиНастроек.Вставить("Поставщик", "Поставщик");
	ПрофилиНастроек.Вставить("Покупатель", "Покупатель");
	ПрофилиНастроек.Вставить("ПервоначальноеЗаполнение", "ПервоначальноеЗаполнение");
	
	Возврат ПрофилиНастроек;
	
КонецФункции

// Параметры:
//  Профиль - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица предопределенного профиля:
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО -
// * ПрикладнойТипДокумента - см. ИнтеграцияЭДО.ОписаниеТиповПрикладныхЭлектронныхДокументов 
// * СпособОбработки - Строка
Функция ТаблицаПредопределенногоПрофиля(Профиль) Экспорт 
	
	ДоступныеПрофили = ПрофилиНастроекОтраженияВходящихДокументов();
	
	ТаблицаПрофиля = НоваяТаблицаПредопределенногоПрофиля();
	
	ИсключаемыеТипы = Новый Массив; // Массив из ПеречислениеСсылка.ТипыДокументовЭДО
	ИсключаемыеТипы.Добавить(Перечисления.ТипыДокументовЭДО.УПД);
	ИсключаемыеТипы.Добавить(Перечисления.ТипыДокументовЭДО.УКД);
	
	ИспользуемыеТипыДокументов = ИнтеграцияЭДО.ИспользуемыеТипыДокументов();
	
	ТипыДокументов = Новый Массив; // Массив из ПеречислениеСсылка.ТипыДокументовЭДО
	Для Каждого КлючИЗначение Из ИспользуемыеТипыДокументов Цикл
		ТипДокумента = КлючИЗначение.Ключ;
		
		Если ИсключаемыеТипы.Найти(ТипДокумента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлектронныеДокументыЭДО.ЭтоТипДокументаИнтеркампани(ТипДокумента)
			И КлючИЗначение.Значение.ИспользоватьДляВходящих Тогда
			
			ТипыДокументов.Добавить(ТипДокумента);
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		СписокОпераций = СписокОперацийТипаДокумента(ТипДокумента, Истина);
		
		Для Каждого ЭлементСписка Из СписокОпераций Цикл
			Если ЭлементСписка.Пометка Тогда
				СпособОбработки = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Профиль = ДоступныеПрофили.Вручную Тогда
			СпособОбработки = СпособОбработки_Вручную();
		ИначеЕсли Профиль = ДоступныеПрофили.НеОтражать Тогда
			СпособОбработки = СпособОбработки_НеОтражать();
			
		ИначеЕсли Профиль = ДоступныеПрофили.ПервоначальноеЗаполнение И СписокОпераций.Количество() > 3 Тогда
			СпособОбработки = СпособОбработки_Вручную();
		ИначеЕсли Профиль = ДоступныеПрофили.Поставщик Тогда
			Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗаказТовара 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОПродажахКомиссионногоТовара 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтчетОСписанииКомиссионногоТовара Тогда
				
				СпособОбработки = СпособОбработки_Вручную();
			КонецЕсли;
		ИначеЕсли Профиль = ДоступныеПрофили.Покупатель Тогда
			Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав 
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ВозвратТоваровМеждуОрганизациями
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КаталогТоваров
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ОтветНаЗаказ Тогда
				
				СпособОбработки = СпособОбработки_Вручную();
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПрофиля.Добавить();
		НоваяСтрока.ТипДокумента       = ТипДокумента;
		НоваяСтрока.СпособОбработки    = СпособОбработки;
	КонецЦикла;
	
	ПрикладныеТипыДокументов = ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов();
	Если ЗначениеЗаполнено(ПрикладныеТипыДокументов) Тогда
		Для Каждого ПрикладнойТипДокумента Из ПрикладныеТипыДокументов Цикл
			СписокОпераций = СписокОперацийТипаДокумента(ПрикладнойТипДокумента, Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Профиль = ДоступныеПрофили.Вручную Тогда
				СпособОбработки = СпособОбработки_Вручную();
			ИначеЕсли Профиль = ДоступныеПрофили.НеОтражать Тогда
				СпособОбработки = СпособОбработки_НеОтражать();			
			ИначеЕсли Профиль = ДоступныеПрофили.ПервоначальноеЗаполнение И СписокОпераций.Количество() > 3 Тогда
				Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
					СпособОбработки = СпособОбработки_Вручную();
				КонецЕсли;				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
			НоваяСтрока.ПрикладнойТипДокумента = ПрикладнойТипДокумента;
			НоваяСтрока.СпособОбработки = СпособОбработки;
			
		КонецЦикла;
	КонецЕсли;
		
	ОбменСКонтрагентамиПереопределяемый.ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля, Профиль);
	
	Возврат ТаблицаПрофиля;	
	
КонецФункции

// Формирует таблицу способов отражения входящих документов по имени профиля.
//
// Параметры:
//  Профиль - Строка - значения см. ПрофилиНастроекОтраженияВходящихДокументов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица предопределенного профиля:
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа.
//   * СпособОбработки - Строка - текстовый идентификатор способа обработки.
//
Функция ШаблонНастроекОтраженияВУчете(Профиль) Экспорт
	
	ТаблицаПрофиля = ТаблицаПредопределенногоПрофиля(Профиль);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПрофиля", ТаблицаПрофиля);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПрофиля.ТипДокумента КАК ТипДокумента,
		|	ТаблицаПрофиля.ПрикладнойТипДокумента КАК ПрикладнойТипДокумента,
		|	ТаблицаПрофиля.СпособОбработки КАК СпособОбработки
		|ПОМЕСТИТЬ ТаблицаПрофиля
		|ИЗ
		|	&ТаблицаПрофиля КАК ТаблицаПрофиля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
		|	ТаблицаПрофиля.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	ТаблицаПрофиля КАК ТаблицаПрофиля
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ТаблицаПрофиля.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
		|		И ТаблицаПрофиля.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - тип электронного документа
//               - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа
//  ДобавлятьПредопределенныеСпособы - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс	 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийТипаДокумента(ТипДокумента, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	СписокОпераций = Новый СписокЗначений; // см. СписокОперацийТипаДокумента
	
	Если ТипЗнч(ТипДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		
		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений
			Или ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
			МодульПодсистемы.ОпределитьСписокОперацийВходящихЭлектронныхДокументов(ТипДокумента, СписокОпераций);
		КонецЕсли;
		
		Если (ТипДокумента = Перечисления.ТипыДокументовЭДО.КонтрактЕИС
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД
				ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД)
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульПодсистемыЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
			МодульПодсистемыЕИС.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
			МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");	
			Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента) Тогда
				МодульОбменСГИСЭПД.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);
			КонецЕсли;
		КонецЕсли;

		Если ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
			МашиночитаемыеДоверенности.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СписокОпераций);			
		
	Иначе // передан прикладной тип документа
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента(
				ТипДокумента, СписокОпераций);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ЭлементСписка.Представление = Префикс + " " + ЭлементСписка.Представление;
	КонецЦикла;
	
	Если ДобавлятьПредопределенныеСпособы Тогда
		Если СписокОпераций.Количество() = 0 Тогда
			СписокОпераций.Добавить("Автоматически", НСтр("ru = 'Автоматически'"),Истина);
		КонецЕсли;
		
		СписокОпераций.Добавить(СпособОбработки_Вручную(), НСтр("ru = 'Вручную в форме электронного документа'"));
		СписокОпераций.Добавить(СпособОбработки_НеОтражать(), НСтр("ru = 'Не отражать'"));
	
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа
//  ДобавлятьПредопределенныеСпособы - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс	 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  См. СписокОперацийТипаДокумента
//
Функция СписокОперацийВидаДокумента(ВидДокумента, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт
	
	ОписаниеВида = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
	
	ТипДокументаСпискаОпераций = ОписаниеВида.ТипДокумента; // ПеречислениеСсылка.ТипыДокументовЭДО, ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
	
	Если ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		ТипДокументаСпискаОпераций = Перечисления.ТипыДокументовЭДО.СчетФактура;
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		ТипДокументаСпискаОпераций = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
	ИначеЕсли ОписаниеВида.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ТипДокументаСпискаОпераций = ОписаниеВида.ПрикладнойТипДокумента;
	КонецЕсли;
	
	Возврат СписокОперацийТипаДокумента(ТипДокументаСпискаОпераций, ДобавлятьПредопределенныеСпособы, Префикс);
	
КонецФункции

// Формирует список способов отражения в учете исходящего электронного документа определенного вида.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО - вид электронного документа
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа. 
//
Функция СписокОперацийИсходящихВидовДокумента(ВидДокумента) Экспорт
	
	ОписаниеВида = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокумента);
	
	ТипДокументаСпискаОпераций = ОписаниеВида.ТипДокумента;
	
	СписокОпераций = Новый СписокЗначений;
	ОбменСКонтрагентамиПереопределяемый.СписокВидовИсходящихДокументов(ТипДокументаСпискаОпераций, СписокОпераций);
	Возврат СписокОпераций;
	
КонецФункции

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
// 
// Возвращаемое значение:
//  Булево
Функция ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеЭлектронногоДокумента) Экспорт
	
	СпособОбработки = СпособОбработкиДокумента(ДанныеЭлектронногоДокумента);
	
	Возврат ОтражениеОтключено(СпособОбработки);
	
КонецФункции

#КонецОбласти

#Область СпособыОбработки

// Параметры:
//  ДанныеДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
// 
// Возвращаемое значение:
//  - Строка
//  - Структура:
//    * ПервичныйДокумент - Строка
//    * СчетФактура - Строка
Функция СпособОбработкиДокумента(ДанныеДокумента) Экспорт
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
	КлючНастроек.ВидДокумента = ДанныеДокумента.ВидДокумента;
	КлючНастроек.Отправитель = ДанныеДокумента.Отправитель;
	КлючНастроек.Получатель = ДанныеДокумента.Получатель;
	КлючНастроек.ИдентификаторОтправителя = ДанныеДокумента.ИдентификаторОтправителя;
	КлючНастроек.ИдентификаторПолучателя = ДанныеДокумента.ИдентификаторПолучателя;
	
	ДополнительныеВиды = Новый Массив; // Массив из СправочникСсылка.ВидыДокументовЭДО
	
	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
		КлючНастроек.ВидДокумента =  ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.СчетФактура);
		ДополнительныеВиды = ЭлектронныеДокументыЭДО.ДополнительныеВидыДокументовУПД(
			ДанныеДокумента.ДанныеОсновногоФайла);
		
	ИначеЕсли ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда
		КлючНастроек.ВидДокумента =  ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура);
		ДополнительныеВиды.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости));
		
	КонецЕсли;
	
	СпособОбработкиОсновногоВида = НастройкиОтраженияВУчете(КлючНастроек).СпособОбработки; // см. СпособОбработкиДокумента
	
	Если ЗначениеЗаполнено(ДополнительныеВиды) Тогда
		
		Если ЭтоСпособОбработки_НеОтражать(СпособОбработкиОсновногоВида) Тогда
			СпособОбработкиДополнительногоВида = СпособОбработки_НеОтражать();
		Иначе
			Если ДополнительныеВиды.Количество() = 1 Тогда
				
				КлючНастроек.ВидДокумента = ДополнительныеВиды[0];
				
				СпособОбработкиДополнительногоВида = 
					НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроек).СпособОбработки;
			Иначе
				СпособОбработкиДополнительногоВида = СпособОбработки_Вручную();
			КонецЕсли;
		КонецЕсли;
		
		СпособОбработкиСтруктура = Новый Структура("ПервичныйДокумент, СчетФактура", "","");
		СпособОбработкиСтруктура.ПервичныйДокумент = СпособОбработкиДополнительногоВида;
		СпособОбработкиСтруктура.СчетФактура = СпособОбработкиОсновногоВида;
		
		СпособОбработкиОсновногоВида = СпособОбработкиСтруктура;
	КонецЕсли;
	
	Возврат СпособОбработкиОсновногоВида;
	
КонецФункции

// Параметры:
//  СпособОбработкиДокумента - см. СпособОбработкиДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ОтражениеОтключено(СпособОбработкиДокумента) Экспорт
	
	Если ТипЗнч(СпособОбработкиДокумента) = Тип("Структура") Тогда
		Возврат СпособОбработкиДокумента.ПервичныйДокумент = СпособОбработки_НеОтражать()
			И СпособОбработкиДокумента.СчетФактура = СпособОбработки_НеОтражать();
	КонецЕсли;
	
	Возврат СпособОбработкиДокумента = СпособОбработки_НеОтражать();
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция СпособОбработки_НеОтражать() Экспорт
	Возврат "НеОтражать";
КонецФункции

#КонецОбласти

#Область Отражение

// Возвращаемое значение:
//  См. ОтражениеВУчетеЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Функция НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете() Экспорт
	Возврат ОтражениеВУчетеЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
КонецФункции

// Параметры:
//  Формат - Строка
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  СостояниеДокумента - Неопределено,ПеречислениеСсылка.СостоянияДокументовЭДО
//  ЭтоСводныйУПД - Неопределено,Булево
// 
// Возвращаемое значение:
//  Булево
Функция ДоступноОтражениеВУчете(Формат, ТипДокумента, СостояниеДокумента = Неопределено, ЭтоСводныйУПД = Неопределено) Экспорт
	
	ЭтоЭПД = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		ЭтоЭПД = МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента);
	КонецЕсли;
	
	ЭтоЭлектронноеАктированиеЕИС = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульЭлектронноеАктированиеЕИС =
			ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		ЭтоЭлектронноеАктированиеЕИС = МодульЭлектронноеАктированиеЕИС.ЭтоТипДокументаАктирования(ТипДокумента);
	КонецЕсли;
	
	ДоступноОтражение = 
		(СостояниеДокумента = Неопределено ИЛИ ДоступноОтражениеВУчетеПоСостояниюДокумента(СостояниеДокумента))
		И ДоступноОтражениеВУчетеПоТипуДокумента(ТипДокумента)
		И (ДоступноОтражениеВУчетеПоФормату(Формат) ИЛИ ЭтоЭПД ИЛИ ЭтоЭлектронноеАктированиеЕИС)
		И (ЭтоСводныйУПД <> Истина
			ИЛИ ЭтоСводныйУПД = Истина И ДоступноОтражениеВУчетеСводногоУПД());
	
	Возврат ДоступноОтражение;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПараметрыКонтроля - Неопределено
//                    - см. НовыеПараметрыКонтроляОтраженияВУчете
Процедура УстановитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, ПараметрыКонтроля = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.КонтрольОтраженияВУчетеЭДО.Записать(ЭлектронныйДокумент, ПараметрыКонтроля);
	
КонецПроцедуры

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  СпособОбработки - см. СпособОбработкиДокумента
//  ОбъектыУчета - Неопределено
//               - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДанныеРазбора - Неопределено
//                - см. ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра
//  
Процедура ОтразитьДанныеЭлектронногоДокумента(ДанныеЭлектронногоДокумента, СпособОбработки, ОбъектыУчета = Неопределено, ДанныеРазбора = Неопределено) Экспорт
	
	Если ОбъектыУчета = Неопределено Тогда
		ОбъектыУчета = Новый Массив;
	КонецЕсли;

	ЭтоПрикладнойТипЭлектронногоДокумента = 
		ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов().Найти(ДанныеЭлектронногоДокумента.ТипДокумента) <> Неопределено
		Или ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;
	
	ТекущиеОбъектыУчета = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектыУчета);
	
	Если ДанныеРазбора = Неопределено
		И НЕ ЭтоПрикладнойТипЭлектронногоДокумента Тогда
		ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
		ПараметрыПолучения.ОсновнойФайл = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
		ПараметрыПолучения.ДополнительныйФайл = ДанныеЭлектронногоДокумента.ДанныеДополнительногоФайла;
		ДанныеРазбора = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолучения);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если ЭтоПрикладнойТипЭлектронногоДокумента Тогда
			ОтразитьДанныеПрикладногоЭлектронногоДокумента(ДанныеЭлектронногоДокумента, СпособОбработки, ОбъектыУчета);
		Иначе
			ОтразитьДанныеФормализованногоЭлектронногоДокумента(ДанныеЭлектронногоДокумента, ДанныеРазбора,
				СпособОбработки, ОбъектыУчета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент) Тогда
			ОтражениеВУчетеЭДОСобытия.ПриОтраженииВУчетеЭлектронногоДокумента(
				ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, СпособОбработки, ОбъектыУчета);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ДобавленныеОбъектыУчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыУчета, ТекущиеОбъектыУчета);
	УдаленныеОбъектыУчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеОбъектыУчета, ОбъектыУчета);
	
	Если ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент)
		И (ЗначениеЗаполнено(ДобавленныеОбъектыУчета)
			ИЛИ ЗначениеЗаполнено(УдаленныеОбъектыУчета)) Тогда
		
		ОбменСКонтрагентамиПереопределяемый.ПослеИзмененияОтраженияВУчете(
			ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, ДобавленныеОбъектыУчета, УдаленныеОбъектыУчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  СпособОбработки - Строка
Процедура ОтразитьДанныеЭлектронногоДокументаСКонтролем(ДанныеДокумента, СпособОбработки = Неопределено) Экспорт
	
	ЭтоСводныйУПД = ЭтоСводныйУПД(ДанныеДокумента);
	
	ДоступноОтражение = ДоступноОтражениеВУчете(ДанныеДокумента.Формат,
		ДанныеДокумента.ТипДокумента, ДанныеДокумента.СостояниеДокумента, ЭтоСводныйУПД);
	
	Если Не ДоступноОтражение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОбработки) Тогда
		СпособОбработкиДокумента = СпособОбработки;
	Иначе
		СпособОбработкиДокумента = СпособОбработкиДокумента(ДанныеДокумента);
	КонецЕсли;
	
	ОтражениеОтключено = ОтражениеОтключено(СпособОбработкиДокумента);
	
	Если ОтражениеОтключено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = Новый Массив;
	
	Если ДанныеДокумента.ОтключитьКонтрольОтраженияВУчете
		Или ОтключитьКонтрольОтраженияВУчетеДляТипаДокумента(ДанныеДокумента.ТипДокумента) Тогда
		ОтразитьДанныеЭлектронногоДокумента(ДанныеДокумента, СпособОбработкиДокумента, ОбъектыУчета);
		Возврат;
	КонецЕсли;
	
	ВыполнитьКонтрольСопоставленияНоменклатуры(ДанныеДокумента);
	
	ОтборНоменклатурыКонтрагентовНаКонтроле = ОтборНоменклатурыКонтрагентовНаКонтроле(ДанныеДокумента.ЭлектронныйДокумент);
	
	ПараметрыКонтроляОтраженияВУчете = НовыеПараметрыКонтроляОтраженияВУчете();
	ПараметрыКонтроляОтраженияВУчете.СопоставитьНоменклатуру = ЕстьНоменклатураКонтрагентовНаКонтроле(ОтборНоменклатурыКонтрагентовНаКонтроле);
	ПараметрыКонтроляОтраженияВУчете.СоздатьУчетныйДокумент  = Истина;
	ПараметрыКонтроляОтраженияВУчете.ПровестиУчетныйДокумент = Истина;
	
	УстановитьКонтрольОтраженияВУчете(ДанныеДокумента.ЭлектронныйДокумент, ПараметрыКонтроляОтраженияВУчете);
	
	ОтражатьАвтоматически = ОтражатьАвтоматически(СпособОбработкиДокумента);
	
	Если Не ОтражатьАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьДанныеЭлектронногоДокумента(ДанныеДокумента, СпособОбработкиДокумента, ОбъектыУчета);
	
	ВыполнитьКонтрольПроведенияУчетныхДокументов(ДанныеДокумента.ЭлектронныйДокумент);
	
	НаКонтроль = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДокумента.ЭлектронныйДокумент);
	ВыполнитьКонтрольОтраженияВУчете(НаКонтроль);
	
КонецПроцедуры

// Выполняет проверку электронного документа на наличие непроведенных учетных документов.
// Непроведенные документы ставится на контроль.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - электронный документ на проверку.
//
Процедура ВыполнитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтключитьКонтрольПроведенияУчетныхДокументовЭД(ЭлектронныйДокумент);
	
	ОбъектыУчетаЭлектронныхДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент);
	НаборУчетныхДокументов = ОбъектыУчетаЭлектронныхДокументов.ВыгрузитьКолонку("ОбъектУчета"); // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	 
	НаКонтроль = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	ИмяРеквизитаПроведен = "Проведен";
	
	Для Каждого УчетныйДокумент Из НаборУчетныхДокументов Цикл
		
		Если ОбщегоНазначенияБЭД.ЭтоПроводимыйДокумент(УчетныйДокумент) Тогда
			Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетныйДокумент, ИмяРеквизитаПроведен);
			Если Не Проведен Тогда
				НаКонтроль.Добавить(УчетныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			МодульЭлектронноеАктированиеЕИС =
				ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
				МодульЭлектронноеАктированиеЕИС.ВыполнитьКонтрольПроведенияУчетныхДокументов(
					УчетныйДокумент, НаКонтроль);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВключитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент, НаКонтроль);
	
КонецПроцедуры

// Выполняет проверку на соответствие электронных документов требованиям по отражению в учете.
//
// Параметры:
//  НаборЭлектронныхДокументов - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - электронные документы, по которым нужно выполнить проверку.
//  НаборПроверок - Массив из Строка, Неопределено - перечень проверок, которые нужно выполнить:
//    "СопоставитьНоменклатуру" - проверка на завершение сопоставления номенклатуры.
//    "СоздатьУчетныйДокумент"  - проверка на наличие учетного документа.
//    "ПровестиУчетныйДокумент" - проверка на проведенность учетного документа.
//
Процедура ВыполнитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов, НаборПроверок = Неопределено) Экспорт
	
	// Подготовка параметров.
	
	Если Не ЗначениеЗаполнено(НаборЭлектронныхДокументов) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НаборПроверок) Тогда
		НаборПроверок = Новый Массив; // Массив из Строка
		НаборПроверок.Добавить("СопоставитьНоменклатуру");
		НаборПроверок.Добавить("СоздатьУчетныйДокумент");
		НаборПроверок.Добавить("ПровестиУчетныйДокумент");
	КонецЕсли;
	
	// Сбор текста запроса для выполнения контроля.
	
	КонтрольПрохожденияПроверок = НовыйКонтрольПрохожденияПроверок();
	ИндексЗапроса = 0;
	ЧастиЗапроса = Новый Массив; // Массив из Строка
	
	Для Каждого Проверка Из НаборПроверок Цикл
		
		ТекстЗапроса = "";
		
		Если Проверка = "СопоставитьНоменклатуру" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольСопоставления.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ИСТИНА КАК СопоставитьНоменклатуру
			|ИЗ
			|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК КонтрольСопоставления
			|ГДЕ
			|	КонтрольСопоставления.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		ИначеЕсли Проверка = "СоздатьУчетныйДокумент" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольСоздания.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	КонтрольСоздания.ОбъектУчета КАК УчетныйДокумент
			|ИЗ
			|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК КонтрольСоздания
			|ГДЕ
			|	КонтрольСоздания.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		ИначеЕсли Проверка = "ПровестиУчетныйДокумент" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольПроведения.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ИСТИНА КАК ПровестиУчетныйДокумент
			|ИЗ
			|	РегистрСведений.КонтрольПроведенияУчетныхДокументовЭДО КАК КонтрольПроведения
			|ГДЕ
			|	КонтрольПроведения.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		КонтрольПрохожденияПроверок.Вставить(Проверка, ИндексЗапроса);
		
		Если ЗначениеЗаполнено(ЧастиЗапроса) Тогда
			Разделитель =
			"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			ЧастиЗапроса.Добавить(Разделитель);
		КонецЕсли;
		ЧастиЗапроса.Добавить(ТекстЗапроса);
		
		ИндексЗапроса = ИндексЗапроса + 1
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", НаборЭлектронныхДокументов);
	
	// Анализ результата запроса.
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицыПроверок = Новый Массив; // Массив из ТаблицаЗначений
	Для Каждого Результат Из РезультатыЗапроса Цикл
		Таблица = Результат.Выгрузить();
		Таблица.Индексы.Добавить("ЭлектронныйДокумент");
		ТаблицыПроверок.Добавить(Таблица);
	КонецЦикла;
	
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		
		ОтборЭД = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		Изменения = Новый Соответствие; // см. ИзменитьКонтрольОтраженияВУчете.НаборИзменений
		
		Для Каждого Элемент Из КонтрольПрохожденияПроверок Цикл
			
			Проверка = Элемент.Ключ; // Строка
			Таблица = ТаблицыПроверок[Элемент.Значение];
			
			Если Проверка = "СопоставитьНоменклатуру" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				СопоставитьНоменклатуру = ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("СопоставитьНоменклатуру", СопоставитьНоменклатуру);
				
			ИначеЕсли Проверка = "СоздатьУчетныйДокумент" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				СоздатьУчетныйДокумент = Не ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("СоздатьУчетныйДокумент", СоздатьУчетныйДокумент);
				
			ИначеЕсли Проверка = "ПровестиУчетныйДокумент" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				ПровестиУчетныйДокумент = ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("ПровестиУчетныйДокумент", ПровестиУчетныйДокумент)
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИзменитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, Изменения);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * СопоставитьНоменклатуру - Строка
//  * СоздатьУчетныйДокумент - Строка
//  * ПровестиУчетныйДокумент - Строка
Функция СостоянияКонтроляОтраженияВУчете() Экспорт
	
	СостоянияКонтроля = Новый Структура;
	
	СостоянияКонтроля.Вставить("СопоставитьНоменклатуру", "СопоставитьНоменклатуру");
	СостоянияКонтроля.Вставить("СоздатьУчетныйДокумент",  "СоздатьУчетныйДокумент");
	СостоянияКонтроля.Вставить("ПровестиУчетныйДокумент", "ПровестиУчетныйДокумент");
	
	Возврат СостоянияКонтроля;
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Строка
Функция СтатусКонтроляОтраженияВУЧете(ЭлектронныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КонтрольОтраженияВУчетеЭДО.СопоставитьНоменклатуру
		|			ТОГДА ""СопоставитьНоменклатуру""
		|		КОГДА КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент
		|			ТОГДА ""СоздатьУчетныйДокумент""
		|		КОГДА КонтрольОтраженияВУчетеЭДО.ПровестиУчетныйДокумент
		|			ТОГДА ""ПровестиУчетныйДокумент""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|ГДЕ
		|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Статус;
	КонецЦикла;

	Возврат "";
	
КонецФункции

// Параметры:
//  Статус - см. СтатусКонтроляОтраженияВУЧете
// 
// Возвращаемое значение:
//  Булево
Функция СуществуетДокументСоСтатусомОтраженияВУчете(Статус) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронныеДокументы.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|		ПО ЭлектронныеДокументы.Ссылка = КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	НЕ ЭлектронныеДокументы.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА КонтрольОтраженияВУчетеЭДО.СопоставитьНоменклатуру
		|				ТОГДА ""СопоставитьНоменклатуру""
		|			КОГДА КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент
		|				ТОГДА ""СоздатьУчетныйДокумент""
		|			КОГДА КонтрольОтраженияВУчетеЭДО.ПровестиУчетныйДокумент
		|				ТОГДА ""ПровестиУчетныйДокумент""
		|			ИНАЧЕ """"
		|		КОНЕЦ = &Статус";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Перезаполнить документ.
// 
// Параметры:
//  ПараметрыЗаполнения - Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * МассивСсылок - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * СпособОбработки - см. СпособОбработкиДокумента
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура - Перезаполнить документ:
//  * Отказ - Булево -
//  * НетПраваОбработкиЭД - Булево
//  * МассивДокументов - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * СопоставитьНоменклатуру - Булево -
//  * ПараметрыСопоставления - Неопределено -
Функция ПерезаполнитьДокумент(ПараметрыЗаполнения, КонтекстДиагностики) Экспорт
	
	МассивДокументов = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("НетПраваОбработкиЭД", Ложь);
	Результат.Вставить("МассивДокументов", МассивДокументов);
	Результат.Вставить("СопоставитьНоменклатуру", Ложь);
	Результат.Вставить("ПараметрыСопоставления", Неопределено);
	
	Если НЕ ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов() Тогда
		Результат.Отказ = Истина;
		Результат.НетПраваОбработкиЭД = Истина;
		Возврат Результат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = МассивПроведенныхДокументов(ПараметрыЗаполнения.МассивСсылок);
	
	Шаблон = НСтр("ru = 'Перезаполнение документа %1.
		|Операция возможна только для непроведенных документов.'");
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка(Документ));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПараметрыЗаполнения.МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	АктуальныеДокументыЭДО = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(МассивСсылок);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ЭлектронныйДокумент) Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			СтрокаСоответствия = АктуальныеДокументыЭДО.Добавить();
			СтрокаСоответствия.ОбъектУчета = ТекущийДокумент;
			СтрокаСоответствия.ЭлектронныйДокумент = ПараметрыЗаполнения.ЭлектронныйДокумент;
		КонецЦикла;
	КонецЕсли;
	
	Если АктуальныеДокументыЭДО.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка(ТекущийДокумент));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из АктуальныеДокументыЭДО Цикл
		
		ОбъектУчета = ЭлементСоответствия.ОбъектУчета;
		ЭлектронныйДокумент = ЭлементСоответствия.ЭлектронныйДокумент;
		
		Если Не ЗначениеЗаполнено(ОбъектУчета) ИЛИ Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Результат.Отказ = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыПерезаполнения = ДополнительныеПараметрыПерезаполненияДокументаИБ();
		
		ПерезаполнитьОбъектУчетаПоЭлектронномуДокументу(ОбъектУчета, ЭлектронныйДокумент,
			ПараметрыЗаполнения.СпособОбработки, КонтекстДиагностики, ПараметрыПерезаполнения);
		
		Если ПараметрыПерезаполнения.ДокументЗагружен Тогда
			
			Результат.МассивДокументов.Добавить(ОбъектУчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СпособОбработки - см. СпособОбработкиДокумента
//  КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ДополнительныеПараметры - Неопределено
//                          - см. ДополнительныеПараметрыПерезаполненияДокументаИБ
Процедура ПерезаполнитьОбъектУчетаПоЭлектронномуДокументу(ОбъектУчета, ЭлектронныйДокумент, СпособОбработки = "", КонтекстДиагностики = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаполненияДокументаИБ();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		СпособОбработки = ИнтеграцияЭДО.СпособОбработкиЭлектронногоДокументаПоОбъектуУчета(
			ЭлектронныйДокумент, ОбъектУчета);
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
	ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы)[0];
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		СпособОбработки = СпособОбработкиДокумента(ДанныеДокумента);
	КонецЕсли;
	
	ОбъектыУчета = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	Если ДанныеДокумента.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УПД)
		Или ДанныеДокумента.ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.УКД) Тогда
		
		ОбъектыУчета = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныйДокумент).ВыгрузитьКолонку("ОбъектУчета");
		
	Иначе
		ОбъектыУчета.Добавить(ОбъектУчета);
	КонецЕсли;
	
	ОтразитьДанныеЭлектронногоДокумента(ДанныеДокумента, СпособОбработки, ОбъектыУчета);
	
	ДополнительныеПараметры.ДокументЗагружен = Истина;
	ДополнительныеПараметры.ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектУчета)).ПолноеИмя();
	
КонецПроцедуры

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Процедура ВключитьКонтрольОтраженияВУчете(ДанныеЭлектронногоДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеЭлектронногоДокумента.ОтключитьКонтрольОтраженияВУчете
		Или ОтключитьКонтрольОтраженияВУчетеДляТипаДокумента(ДанныеЭлектронногоДокумента.ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСводныйУПД = ЭтоСводныйУПД(ДанныеЭлектронногоДокумента);
	
	ДоступноОтражение = ДоступноОтражениеВУчете(ДанныеЭлектронногоДокумента.Формат,
		ДанныеЭлектронногоДокумента.ТипДокумента, ДанныеЭлектронногоДокумента.СостояниеДокумента, ЭтоСводныйУПД);
	
	Если Не ДоступноОтражение Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбработкиДокумента = СпособОбработкиДокумента(ДанныеЭлектронногоДокумента);
	
	ОтражениеОтключено = ОтражениеОтключено(СпособОбработкиДокумента);
	
	Если ОтражениеОтключено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьКонтрольСопоставленияНоменклатуры(ДанныеЭлектронногоДокумента);
	
	ВыполнитьКонтрольПроведенияУчетныхДокументов(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	
	НаКонтроль = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	
	ВыполнитьКонтрольОтраженияВУчете(НаКонтроль);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ДокументыНаКонтроле(ЭлектронныеДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|ГДЕ
		|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент В (&ЭлектронныеДокументы)";
	
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	
КонецФункции

// Возвращает дополнительные параметры для перезаполнения документа ИБ,
// используется в процедуре см. ПерезаполнитьОбъектУчетаПоЭлектронномуДокументу.
//
// Возвращаемое значение:
//  Структура:
//  * ОбъектМетаданных - Строка - возвращает название объекта метаданных перезаполняемого документа.
//  * ДокументЗагружен - Булево - если Истина, то документ успешно перезаполнен.
//
Функция ДополнительныеПараметрыПерезаполненияДокументаИБ() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектМетаданных", "");
	Параметры.Вставить("ДокументЗагружен", Ложь);
	
	Возврат Параметры;
	
КонецФункции 

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаДанныхКонтроляОтраженияВУчете() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент,
		|	КонтрольОтраженияВУчетеЭДО.СопоставитьНоменклатуру,
		|	КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент,
		|	КонтрольОтраженияВУчетеЭДО.ПровестиУчетныйДокумент
		|ИЗ
		|	РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
		|ГДЕ
		|	КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент В(&ЭлектронныйДокумент)";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

// Функция-конструктор таблицы с информацией о товарах из электронного документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИД - Строка
//  * Штрихкод - Строка
//  * Наименование - Строка
//  * НаименованиеХарактеристики - Строка 
//  * КодТовара - Строка
//  * Артикул - Строка
//  * БазоваяЕдиницаКод - Строка
//  * БазоваяЕдиницаНаименование - Строка
//  * БазоваяЕдиницаНаименованиеПолное - Строка
//  * БазоваяЕдиницаМеждународноеСокращение - Строка
//  * БазоваяЕдиницаНаименованиеКраткое - Строка
//  * СтавкаНДС - Строка
//  * Описание - Строка
//  * Сопоставление - см. НовыеДанныеДляСопоставленияТоваров
//  * ИсторияИдентификаторов - Неопределено
//                           - Массив из Строка
//  * ТипНоменклатурыФНС - Неопределено,ПеречислениеСсылка.ТипыНоменклатурыФНС
//  * КодПоКТРУ - Строка
//  * КодТНВЭД - Строка
//  * СтранаПроисхожденияКод - Строка
//  * ПрослеживаемыйТовар - Булево
//  * МаркируемыйТовар - Булево
Функция НоваяИнформацияОТоварахЭлектронногоДокумента() Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	
	ТаблицаТоваров.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаТоваров.Колонки.Добавить("КодТовара", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеКраткое", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(3000));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	ТаблицаТоваров.Колонки.Добавить("ИсторияИдентификаторов", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатурыФНС");
	ТаблицаТоваров.Колонки.Добавить("КодПоКТРУ", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаТоваров.Колонки.Добавить("КодТНВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияКод", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаТоваров.Колонки.Добавить("ПрослеживаемыйТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("МаркируемыйТовар", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Функция-конструктор параметров отбора номенклатуры на контроле. 
// Отбор возможен по измерениям регистра сведений КонтрольСопоставленияНоменклатурыЭДО.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//                      - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД
//           - Массив из ОпределяемыйТип.ВладелецНоменклатурыБЭД
//  Идентификатор - Строка
//                - Массив из строка
//                  
// Возвращаемое значение:
//  Структура:
//   * ЭлектронныйДокумент - Неопределено
//                         - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, 
//                         - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   * Владелец - Неопределено
//              - ОпределяемыйТип.ВладелецНоменклатурыБЭД
//              - Массив из ОпределяемыйТип.ВладелецНоменклатурыБЭД
//   * Идентификатор - Неопределено
//                   - Строка
//                   - Массив из строка
//
Функция ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныйДокумент = Неопределено, Владелец = Неопределено, Идентификатор = Неопределено) Экспорт
	Результат = Новый Структура; 
	Результат.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Результат.Вставить("Владелец", Владелец);
	Результат.Вставить("Идентификатор", Идентификатор);
	Возврат Результат;
КонецФункции

// Возвращает номенклатуру контрагентов, которая числится на контроле сопоставления электронных документов.
//
// Параметры:
//  Отбор - см. ОтборНоменклатурыКонтрагентовНаКонтроле
//
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента - номенклатура 
//                                                                                контрагента, находящаяся на контроле.
//
Функция НоменклатураКонтрагентовНаКонтроле(Отбор) Экспорт
	
	Если Не ОтборНоменклатурыКонтрагентовНаКонтролеЗаполнен(Отбор) Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контроль.Владелец КАК Владелец,
	|	Контроль.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втОтбор
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = ЗапросНоменклатураКонтрагентовНаКонтроле(ТекстЗапроса, Отбор);
	
	Возврат СопоставлениеНоменклатурыКонтрагентов.ДанныеНоменклатурыКонтрагентаПоЗапросу(Запрос);
	
КонецФункции

// Проверяет наличие номенклатуры контрагентов, которая числится на контроле сопоставления электронных документов.
//
// Параметры:
//  Отбор - см. ОтборНоменклатурыКонтрагентовНаКонтроле
//
// Возвращаемое значение:
//  Булево - Истина, если есть номенклатура на контроле
//
Функция ЕстьНоменклатураКонтрагентовНаКонтроле(Знач Отбор) Экспорт
	
	Если Не ОтборНоменклатурыКонтрагентовНаКонтролеЗаполнен(Отбор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1 
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = ЗапросНоменклатураКонтрагентовНаКонтроле(ТекстЗапроса, Отбор);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Параметры:
//  ИнформацияОТоварах - см. ФорматыЭДО.ИнформацияОТовареИзФайла
//  Владелец - см. СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента
// 
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
Функция НаборНоменклатурыКонтрагентовПоИнформацииОТоварах(ИнформацияОТоварах, Владелец) Экспорт
	
	НаборНоменклатурыКонтрагентов = Новый Массив; // см. НаборНоменклатурыКонтрагентовПоИнформацииОТоварах
	
	Если Не ЗначениеЗаполнено(ИнформацияОТоварах) Тогда
		Возврат НаборНоменклатурыКонтрагентов;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ИнформацияОТоварах Цикл
		
		Сопоставление = СтрокаТовара.Сопоставление;
		Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = Владелец;
		
		СопоставлениеНоменклатурыКонтрагентовКлиентСервер.РазделитьИдентификаторНаЧасти(
			Сопоставление.Идентификатор, НоменклатураКонтрагента);
		
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Возврат НаборНоменклатурыКонтрагентов;
	
КонецФункции

// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
// 
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
Функция НоменклатураКонтрагентовБезСопоставления(НаборНоменклатурыКонтрагентов) Экспорт
	
	// Найдем номенклатуру, которую не нужно сопоставлять с номенклатурой контрагентов.
	КОбработке = Новый Массив; // Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
	НаборИдентификаторовСервиса = Новый Массив; // Массив из Структура
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		// Найдем номенклатуру, которая задана в наших идентификаторах.
		НоменклатураИБ = ИнтеграцияЭДО.НайтиНоменклатуруИБПоИдентификатору(НоменклатураКонтрагента.Идентификатор);
		Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		КОбработке.Добавить(НоменклатураКонтрагента);
		// Заполним набор идентификаторов сервиса.
		Если ЗначениеЗаполнено(НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			ИдентификаторСервиса = Новый Структура("ИдентификаторНоменклатуры,ИдентификаторХарактеристики",
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса, НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса);
			НаборИдентификаторовСервиса.Добавить(ИдентификаторСервиса);
		КонецЕсли;
	КонецЦикла;
	
	// Найдем номенклатуру, связанную с сервисом 1С:Номенклатура.
	ЕстьРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если ЕстьРаботаСНоменклатурой И ЗначениеЗаполнено(НаборИдентификаторовСервиса) Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ДанныеСервиса = МодульРаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторам(НаборИдентификаторовСервиса);
		Если ЗначениеЗаполнено(ДанныеСервиса) Тогда
			ДанныеСервиса.Индексы.Добавить("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
			СоответствиеСвойствНоменклатурыИБ = СопоставлениеНоменклатурыКонтрагентовСлужебный.СвойстваНоменклатурыИнформационнойБазы(ДанныеСервиса.ВыгрузитьКолонку("Номенклатура"));
		КонецЕсли;
	КонецЕсли;
	
	// Найдем сопоставление с номенклатурой контрагентов
	НаСопоставление = Новый Массив; // Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
	НеСопоставлено = Новый Массив; // см. НоменклатураКонтрагентовБезСопоставления
	Для Каждого НоменклатураКонтрагента Из КОбработке Цикл
		// Пропускаем найденное по идентификаторам сервиса.
		Если ЕстьРаботаСНоменклатурой И ЗначениеЗаполнено(НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			ОтборИдентификатораСервиса = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики", 
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса, НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса);
			СтрокиДанныхСервиса = ДанныеСервиса.НайтиСтроки(ОтборИдентификатораСервиса);
			Если ЗначениеЗаполнено(СтрокиДанныхСервиса) Тогда
				НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
					СтрокиДанныхСервиса[0].Номенклатура, СтрокиДанныхСервиса[0].Характеристика);
					
				ОбязательноеЗаполнениеХарактеристики = Ложь;
				ИспользоватьХарактеристики           = Неопределено;
				Свойства = СоответствиеСвойствНоменклатурыИБ.Получить(НоменклатураИБ.Номенклатура);
				Если Свойства <> Неопределено Тогда
					ОбязательноеЗаполнениеХарактеристики = Свойства.ОбязательноеЗаполнениеХарактеристики;
					ИспользоватьХарактеристики           = Свойства.ИспользоватьХарактеристики;
				КонецЕсли;
				
				// Если характеристики не определены и используются, то добавляем к сопоставлению.
				Если НЕ ЗначениеЗаполнено(НоменклатураИБ.Характеристика) Тогда
					Если ИспользоватьХарактеристики = Истина И ОбязательноеЗаполнениеХарактеристики Тогда
						НаСопоставление.Добавить(НоменклатураКонтрагента);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ, ИспользоватьХарактеристики, Ложь);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НаСопоставление.Добавить(НоменклатураКонтрагента);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(НаСопоставление) Тогда
		Возврат НеСопоставлено;
	КонецЕсли;
	ОтборПоНоменклатуреКонтрагента = Новый Структура("НоменклатураКонтрагента", НаСопоставление);
	Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(ОтборПоНоменклатуреКонтрагента);
	
	// Определим не сопоставленную номенклатуру.
	Для Каждого НоменклатураКонтрагента Из НаСопоставление Цикл
		
		ЕстьСопоставление = Ложь;
		Для Каждого Элемент Из Сопоставление Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.НоменклатураИБ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			Если НоменклатураКонтрагента.Владелец = Элемент.НоменклатураКонтрагента.Владелец
				И НоменклатураКонтрагента.Идентификатор = Элемент.НоменклатураКонтрагента.Идентификатор Тогда
					ЕстьСопоставление = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьСопоставление Тогда
			НоваяНоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
			ЗаполнитьЗначенияСвойств(НоваяНоменклатураКонтрагента, НоменклатураКонтрагента);
			НеСопоставлено.Добавить(НоваяНоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеСопоставлено;
	
КонецФункции

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
// 
// Возвращаемое значение:
//  см. НоменклатураКонтрагентовБезСопоставления
Функция НоменклатураЭлектронногоДокументаБезСопоставления(ДанныеЭлектронногоДокумента) Экспорт
	
	ПараметрыПолучения = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
	ПараметрыПолучения.ОсновнойФайл = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
	
	ИнформацияОТоваре = ЭлектронныеДокументыЭДО.ДанныеНоменклатурыДокумента(ПараметрыПолучения);
	
	Владелец = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(
		ДанныеЭлектронногоДокумента.Отправитель);
	
	НаборНоменклатурыКонтрагентов = НаборНоменклатурыКонтрагентовПоИнформацииОТоварах(
		ИнформацияОТоваре, Владелец);
	
	Возврат НоменклатураКонтрагентовБезСопоставления(НаборНоменклатурыКонтрагентов);
	
КонецФункции

// Ставит электронный документ на контроль сопоставления номенклатуры контрагента.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - ЭлектронныйДокумент, который ставится на контроль.
//  НоменклатураБезСопоставления - см. НоменклатураКонтрагентовБезСопоставления
// 
// Возвращаемое значение:
//  Булево
//
Функция ВключитьКонтрольСопоставленияНоменклатуры(Знач ЭлектронныйДокумент, Знач НоменклатураБезСопоставления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого НоменклатураКонтрагента Из НоменклатураБезСопоставления Цикл
			
			РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.Записать(
				ЭлектронныйДокумент, НоменклатураКонтрагента);
			
			СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента);
			
		КонецЦикла;
		
		Результат = Истина;;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВидОперации = НСтр("ru = 'Установка контроля сопоставления номенклатуры'");
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке);
		КраткийТекстОшибки = ОбщегоНазначенияБЭД.КраткоеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, КраткийТекстОшибки,
			"ОбменСКонтрагентами", ЭлектронныйДокумент);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

// Пустой результат получения настроек отражения в учете.
// 
// Возвращаемое значение:
//  Структура:
//   * СпособОбработки              - Строка - Способ обработки.
//   * ПредлагатьСохранятьНастройки - Булево - Предлагать сохранять настройки.
//
Функция НастройкиОтраженияПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("СпособОбработки", "Вручную");
	Результат.Вставить("ПредлагатьСохранятьНастройки", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет настройки отражения в учете.
// 
// Параметры:
// 	Настройки - ТаблицаЗначений:
// 	  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 	  * СпособОбработки - Строка 
// 	  * ПредставлениеСпособаОбработки - Строка
// 	  * НеПредлагатьСохранятьНастройки - Булево 
// 	Получатель - ОпределяемыйТип.Организация
// 	Отправитель - ОпределяемыйТип.КонтрагентБЭД
// 	ИдентификаторПолучателя - Строка
// 	ИдентификаторОтправителя - Строка
// Возвращаемое значение:
// 	Булево - Истина, если настройки удалось сохранить
Функция СохранитьНастройкиОтраженияВУчете(Настройки, Получатель, Отправитель,
	ИдентификаторПолучателя, ИдентификаторОтправителя) Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель"              , Получатель);
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель"             , Отправитель);
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторОтправителя", ИдентификаторОтправителя);
		ЭлементБлокировкиДанных.УстановитьЗначение("ИдентификаторПолучателя" , ИдентификаторПолучателя);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Если ЗначениеЗаполнено(ИдентификаторОтправителя) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки
			|ИЗ
			|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
			|ГДЕ
			|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
			|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
			|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
			|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"";
			
			Запрос.УстановитьПараметр("Отправитель", Отправитель);
			Запрос.УстановитьПараметр("Получатель", Получатель);
			
			Если Запрос.Выполнить().Пустой() Тогда
				
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нельзя создать настройку получения по идентификаторам, без общей настойки по организации
					|Сначала добавьте настройку по организации'"));
				ОтменитьТранзакцию();
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
		Результат = Истина;
		
		Настройки.Колонки.Добавить("Получатель");
		Настройки.ЗаполнитьЗначения(Получатель, "Получатель");
		
		Настройки.Колонки.Добавить("Отправитель");
		Настройки.ЗаполнитьЗначения(Отправитель, "Отправитель");
		
		Настройки.Колонки.Добавить("ИдентификаторПолучателя");
		Настройки.ЗаполнитьЗначения(ИдентификаторПолучателя, "ИдентификаторПолучателя");
		
		Настройки.Колонки.Добавить("ИдентификаторОтправителя");
		Настройки.ЗаполнитьЗначения(ИдентификаторОтправителя, "ИдентификаторОтправителя");
		
		Для каждого СтрокаТаблицы Из Настройки Цикл
			Если СтрокаТаблицы.СпособОбработки = "Вручную" Тогда
				СтрокаТаблицы.НеПредлагатьСохранятьНастройки = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		НаборЗаписей = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Получатель.Установить(Получатель);
		НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
		НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить(ИдентификаторОтправителя);
		НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(ИдентификаторПолучателя);
		НаборЗаписей.Загрузить(Настройки);
		
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Сохранение настроек входящих документов'");
		ПодробныйТекстОшибки = ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке);
		КраткийТекстОшибки = ОбщегоНазначенияБЭД.КраткоеПредставлениеИнформацииОбОшибке(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, КраткийТекстОшибки, "ОбменСКонтрагентами");
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТаблицаНастроек - ТаблицаЗначений:
//  * Отправитель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Отправитель
//  * Получатель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Получатель
//  * ИдентификаторОтправителя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
//  * ИдентификаторПолучателя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
//  * ВидДокумента - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ВидДокумента
//  * СпособОбработки - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.СпособОбработки
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Отправитель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Отправитель
//  * Получатель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Получатель
//  * ИдентификаторОтправителя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
//  * ИдентификаторПолучателя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
//  * ВидДокумента - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ВидДокумента
//  * СпособОбработки - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.СпособОбработки
//
Функция ТекущиеНастройкиОтраженияВУчете(ТаблицаНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаНастроек.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ТаблицаНастроек.СпособОбработки КАК СпособОбработки
		|ПОМЕСТИТЬ ТаблицаНастроек
		|ИЗ
		|	&ТаблицаНастроек КАК ТаблицаНастроек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ЕСТЬNULL(ТаблицаНастроек.ИдентификаторПолучателя, НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя) КАК ИдентификаторПолучателя,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ЕСТЬNULL(НастройкиПолученияЭлектронныхДокументов.СпособОбработки, ТаблицаНастроек.СпособОбработки) КАК СпособОбработки,
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки
		|ИЗ
		|	ТаблицаНастроек КАК ТаблицаНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|		ПО ТаблицаНастроек.Отправитель = НастройкиПолученияЭлектронныхДокументов.Получатель
		|			И ТаблицаНастроек.Получатель = НастройкиПолученияЭлектронныхДокументов.Отправитель
		|			И ТаблицаНастроек.ВидДокумента = НастройкиПолученияЭлектронныхДокументов.ВидДокумента
		|			И ТаблицаНастроек.ИдентификаторОтправителя = НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
		|			И (ТаблицаНастроек.ИдентификаторПолучателя = НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
		|				ИЛИ НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """")";
	Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);	
	РезультатыЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроек = РезультатыЗапроса.Выгрузить(); // см. ТекущиеНастройкиОтраженияВУчете
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		СтрокаТаблицы.ИдентификаторОтправителя = ВРег(СтрокаТаблицы.ИдентификаторОтправителя);
		СтрокаТаблицы.ИдентификаторПолучателя  = ВРег(СтрокаТаблицы.ИдентификаторПолучателя);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

// Параметры:
//  КлючНастроек - Структура:
// * Отправитель - ОпределяемыйТип.КонтрагентБЭД 
// * Получатель - ОпределяемыйТип.Организация
// * ИдентификаторОтправителя - Строка
// * ИдентификаторПолучателя - Строка
// * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО 
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * НеПредлагатьСохранятьНастройки - Булево
//  * Получатель - ОпределяемыйТип.Организация
//  * Отправитель - ОпределяемыйТип.КонтрагентБЭД
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * СпособОбработки - Строка
Функция ТекущаяНастройкаОтраженияВУчете(КлючНастроек)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки,
		|	НастройкиПолученияЭлектронныхДокументов.Получатель КАК Получатель,
		|	НастройкиПолученияЭлектронныхДокументов.Отправитель КАК Отправитель,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки,
		|	НастройкиПолученияЭлектронныхДокументов.Получатель,
		|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки,
		|	НастройкиПолученияЭлектронныхДокументов.Получатель,
		|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента"            , КлючНастроек.ВидДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", КлючНастроек.ИдентификаторОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя" , КлючНастроек.ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("Получатель"              , КлючНастроек.Получатель);
	Запрос.УстановитьПараметр("Отправитель"             , КлючНастроек.Отправитель);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
	
КонецФункции

// Дополняет настройки получения по ключу настроек новым видом документа.
// 
// Параметры:
//  КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
//  Настройки    - см. НастройкиОтраженияПоУмолчанию
//  СохраненныйПрофильНастроек - Структура:
//                                * ИдентификаторОтправителя - Строка
//                                * ИдентификаторПолучателя  - Строка
//
Процедура ДополнитьИСохранитьНастройкиИзПредопределенногоПрофиля(КлючНастроек, Настройки, СохраненныйПрофильНастроек)
	
	ПрофильНастроек = ПрофилиНастроекОтраженияВходящихДокументов().ПервоначальноеЗаполнение;
	ТаблицаПредопределенногоПрофиля = ШаблонНастроекОтраженияВУчете(ПрофильНастроек);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидДокумента", КлючНастроек.ВидДокумента);
	
	ПредопределенныеНастройки = ТаблицаПредопределенногоПрофиля.НайтиСтроки(Отбор);
	
	Если ПредопределенныеНастройки.Количество() > 0 Тогда
		
		МенеджерЗаписи = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПредопределенныеНастройки[0]);
		
		МенеджерЗаписи.Отправитель  = КлючНастроек.Отправитель; 
		МенеджерЗаписи.Получатель   = КлючНастроек.Получатель;
		МенеджерЗаписи.ИдентификаторОтправителя = СохраненныйПрофильНастроек.ИдентификаторОтправителя;
		МенеджерЗаписи.ИдентификаторПолучателя  = СохраненныйПрофильНастроек.ИдентификаторПолучателя;
		МенеджерЗаписи.НеПредлагатьСохранятьНастройки = НеПредлагатьСохранятьНастройки(МенеджерЗаписи.СпособОбработки);
			
		МенеджерЗаписи.Записать();
		
		Настройки.ПредлагатьСохранятьНастройки = Не МенеджерЗаписи.НеПредлагатьСохранятьНастройки;
		Настройки.СпособОбработки = МенеджерЗаписи.СпособОбработки;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
// 	
// Возвращаемое значение:
//  Структура - Описание существующих настроек:
//   * БезУчетаВидаДокумента - Неопределено - Пустое значение настроек.
//                           - Структура    - Описание настройки, без отбора по виду документа:
//                              ** Приоритет                - Число - Чем больше число, тем выше приоритет
//                              ** ИдентификаторОтправителя - Строка
//                              ** ИдентификаторПолучателя  - Строка
//                              
//   * ПоПолномуКлючу - Неопределено - Пустое значение настроек.
//                    - Структура    - Описание настройки по конкретному виду документа:
//                       ** Приоритет                    - Число - Чем больше число, тем выше приоритет
//                       ** ИдентификаторОтправителя     - Строка
//                       ** ИдентификаторПолучателя      - Строка
//                       ** СпособОбработки              - Строка
//                       ** ПредлагатьСохранятьНастройки - Булево - Истина, если предлагать сохранять
//
Функция СохраненныеНастройкиОтражения(КлючНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки,
	|	НЕ НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК ПредлагатьСохранятьНастройки
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
	|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки,
	|	НЕ НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
	|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Отправитель"             , КлючНастроек.Отправитель);
	Запрос.УстановитьПараметр("Получатель"              , КлючНастроек.Получатель);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", КлючНастроек.ИдентификаторОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя" , КлючНастроек.ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("ВидДокумента"        	, КлючНастроек.ВидДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиБезУчетаВидаДокумента = Неопределено;
	НастройкиПоПолномуКлючу = Неопределено;
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		ВыборкаБезУчетаВидаДокумента = МассивРезультатов[0].Выбрать();
		ВыборкаБезУчетаВидаДокумента.Следующий();
		
		НастройкиБезУчетаВидаДокумента = Новый Структура("Приоритет, ИдентификаторОтправителя, ИдентификаторПолучателя");
		ЗаполнитьЗначенияСвойств(НастройкиБезУчетаВидаДокумента, ВыборкаБезУчетаВидаДокумента);
		
	КонецЕсли;
	
	Если Не МассивРезультатов[1].Пустой() Тогда
		
		ВыборкаПоПолномуКлючу = МассивРезультатов[1].Выбрать();
		ВыборкаПоПолномуКлючу.Следующий();
		
		НастройкиПоПолномуКлючу = Новый Структура("Приоритет, ИдентификаторОтправителя, ИдентификаторПолучателя,
			|СпособОбработки, ПредлагатьСохранятьНастройки");
		
		ЗаполнитьЗначенияСвойств(НастройкиПоПолномуКлючу, ВыборкаПоПолномуКлючу);
		
	КонецЕсли;
	
	ТекущиеНастройкиОтражения = Новый Структура;
	ТекущиеНастройкиОтражения.Вставить("БезУчетаВидаДокумента", НастройкиБезУчетаВидаДокумента);
	ТекущиеНастройкиОтражения.Вставить("ПоПолномуКлючу",        НастройкиПоПолномуКлючу);
	
	Возврат ТекущиеНастройкиОтражения;
	
КонецФункции

// Новая таблица предопределенного профиля.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
// * СпособОбработки - Строка
Функция НоваяТаблицаПредопределенногоПрофиля()
	ТаблицаПрофиля = Новый ТаблицаЗначений;
	ТаблицаПрофиля.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ТаблицаПрофиля.Колонки.Добавить("ПрикладнойТипДокумента", ИнтеграцияЭДО.ОписаниеТиповПрикладныхЭлектронныхДокументов());
	ТаблицаПрофиля.Колонки.Добавить("СпособОбработки", Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаПрофиля;
КонецФункции

// Параметры:
//  КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
//  Настройки    - см. НастройкиОтраженияПоУмолчанию
//
Процедура ДополнитьНастройкиИзДругихПодсистем(КлючНастроек, Настройки)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		
		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
		
		Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
			ИЛИ МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
			МодульЭлектронноеАктированиеЕИС.НастройкиОтраженияВУчете(
				КлючНастроек, Настройки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульОбменСГИСЭПД.НастройкиОтраженияВУчете(КлючНастроек, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КлючНастроек - см. НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете
//  СохраненныеНастройки - см. СохраненныеНастройкиОтражения
//  
// Возвращаемое значение:
//  Булево - Истина, если настройки не нуждаются в актуализации
//
Функция НастройкиАктуальны(КлючНастроек, СохраненныеНастройки)
		
	ТребуетсяОбновитьНастройку = Ложь;
	
	Если ЗначениеЗаполнено(СохраненныеНастройки.БезУчетаВидаДокумента) Тогда
		
		Если ЗначениеЗаполнено(СохраненныеНастройки.ПоПолномуКлючу) Тогда
			
			ТребуетсяОбновитьНастройку = СохраненныеНастройки.БезУчетаВидаДокумента.Приоритет
				> СохраненныеНастройки.ПоПолномуКлючу.Приоритет;
		Иначе
			
			ТребуетсяОбновитьНастройку = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ТребуетсяОбновитьНастройку;
	
КонецФункции

// Проверяет использование документа в прикладном решении
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДокументИспользуется(ВидДокумента)

	ВидыЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовВходящиеПрикладные();
	ДокументИспользуется = ВидыЭлектронныхДокументов.Найти(ВидДокумента) <> Неопределено;
	Возврат ДокументИспользуется;

КонецФункции

// Параметры:
//  СпособОбработки - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если не предлагать сохранять настройки
//
Функция НеПредлагатьСохранятьНастройки(СпособОбработки)
	
	Возврат СпособОбработки = СпособОбработки_Вручную();
	
КонецФункции

#КонецОбласти

#Область СпособыОбработки

// Параметры:
//  СпособОбработкиДокумента - см. СпособОбработкиДокумента
// 
// Возвращаемое значение:
//  Булево
Функция ОтражатьАвтоматически(СпособОбработкиДокумента)
	
	АвтоматическоеОтражениеДоступно = Истина;
	
	Если ТипЗнч(СпособОбработкиДокумента) = Тип("Структура") Тогда
		Если ЭтоСпособОбработки_Вручную(СпособОбработкиДокумента.ПервичныйДокумент)
			Или ЭтоСпособОбработки_Вручную(СпособОбработкиДокумента.СчетФактура)
			Или ЭтоСпособОбработки_НеОтражать(СпособОбработкиДокумента.ПервичныйДокумент)
			Или ЭтоСпособОбработки_НеОтражать(СпособОбработкиДокумента.СчетФактура) Тогда
			
			АвтоматическоеОтражениеДоступно = Ложь;
		КонецЕсли;
	Иначе
		Если ЭтоСпособОбработки_Вручную(СпособОбработкиДокумента) 
			Или ЭтоСпособОбработки_НеОтражать(СпособОбработкиДокумента) Тогда
			
			АвтоматическоеОтражениеДоступно = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат АвтоматическоеОтражениеДоступно;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Способ обработки вручную
Функция СпособОбработки_Вручную()
	Возврат "Вручную";
КонецФункции

// Параметры:
//  СпособОбработки - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСпособОбработки_НеОтражать(СпособОбработки) 
	 Возврат ВРег(СпособОбработки) = ВРег(СпособОбработки_НеОтражать());
КонецФункции

// Параметры:
//  СпособОбработки - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСпособОбработки_Вручную(СпособОбработки) 
	 Возврат ВРег(СпособОбработки) = ВРег(СпособОбработки_Вручную());
КонецФункции

#КонецОбласти

#Область Отражение

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  СпособОбработки - см. СпособОбработкиДокумента
//  ОбъектыУчета - Неопределено
//               - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОтразитьДанныеПрикладногоЭлектронногоДокумента(ДанныеЭлектронногоДокумента, СпособОбработки, ОбъектыУчета = Неопределено)
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		СписокОпераций = СписокОперацийВидаДокумента(ДанныеЭлектронногоДокумента.ВидДокумента, Истина);
		Для Каждого ЭлементСписка Из СписокОпераций Цикл
			Если ЭлементСписка.Пометка Тогда
				СпособОбработки = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектыУчета = Неопределено Тогда
		ОбъектыУчета = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	КонецЕсли;
	
	ПараметрыОтражения = Новый Структура;
	ПараметрыОтражения.Вставить("ЭлектронныйДокумент", ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	ПараметрыОтражения.Вставить("ТипДокумента", ДанныеЭлектронногоДокумента.ТипДокумента);
	ПараметрыОтражения.Вставить("СпособОбработки", СпособОбработки);
	ГотовКОтражениюВУчете = ПрикладнойЭлектронныйДокументГотовКОтражениюВУчете(ПараметрыОтражения);
	Если НЕ ГотовКОтражениюВУчете Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФайлаЭлектронногоДокумента = Новый Структура;
	ПараметрыФайлаЭлектронногоДокумента.Вставить("ДанныеФайла", ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла.ДвоичныеДанные);
	ПараметрыФайлаЭлектронногоДокумента.Вставить("СпособОбработки", СпособОбработки);
	ПараметрыФайлаЭлектронногоДокумента.Вставить("Входящий", ДанныеЭлектронногоДокумента.Направление = Перечисления.НаправленияЭДО.Входящий);
	
	ОбменСКонтрагентамиПереопределяемый.ПриСозданииОбъектовУчетаИзФайлаПрикладногоЭлектронногоДокумента(
		ПараметрыФайлаЭлектронногоДокумента, ОбъектыУчета);
	
КонецПроцедуры

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  ДанныеДляОтражения - см. ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра
//  СпособОбработки - см. СпособОбработкиДокумента
//  ДокументыУчета - Неопределено
//                 - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ОтразитьДанныеФормализованногоЭлектронногоДокумента(ДанныеЭлектронногоДокумента, ДанныеДляОтражения, СпособОбработки, ДокументыУчета = Неопределено)
	
	Если НЕ ДанныеДляОтражения.Свойство("НовыйЭД") Тогда
		ИдентификаторДокумента = Неопределено;
		ДанныеДляОтражения.Свойство("ИдентификаторДокумента", ИдентификаторДокумента);
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось прочитать данные электронного документа %1. Неизвестный формат обмена.'"),
			ИдентификаторДокумента);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НовыйЭД = ДанныеДляОтражения.НовыйЭД;
	ДеревоРазбора = ДанныеДляОтражения.ДеревоРазбора;
	ДеревоЭД = НовыйЭД.ЗначениеРеквизита;
	
	ЗаполнитьДокументыУчета = Истина;
	ОписаниеОшибки = "";
	
	ДокументУчета = Неопределено;
	Если ЗначениеЗаполнено(ДокументыУчета) Тогда
		ДокументУчета = ДокументыУчета[0];
	КонецЕсли;
	
	ПараметрыОтражения = Новый Структура;
	ПараметрыОтражения.Вставить("ЭлектронныйДокумент", ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	ПараметрыОтражения.Вставить("Контрагент", ДанныеЭлектронногоДокумента.Отправитель);
	ПараметрыОтражения.Вставить("СпособОбработки", СпособОбработки);
	ПараметрыОтражения.Вставить("ДеревоДокумента", НовыйЭД);
	
	ДополнитьДеревоСсылкамиНаДокументыОснования(ДеревоРазбора, НовыйЭД, ДанныеЭлектронногоДокумента);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ПередОтражениемВУчетеЭлектронногоДокумента(ПараметрыОтражения, Отказ, ОписаниеОшибки);
	Если Отказ Тогда
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнитьДеревоДаннымиКомитента(ДеревоЭД, ДанныеЭлектронногоДокумента);
	
	ДополнитьДеревоДаннымиДоговора(ДеревоЭД, ДанныеЭлектронногоДокумента, НовыйЭД.ВерсияФормата);
	
	ИнтеграцияЭДО.УчестьОбратнуюСовместимостьСтруктурыДереваЭД(ДеревоЭД, НовыйЭД.ВерсияФормата);
	
	ЕстьЭлектронноеАктирование = Ложь;
	Если Не ФорматыЭДО.ЭтоОбработкаФормата(ДеревоЭД) Тогда
		// ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
			ЕстьЭлектронноеАктирование = Истина;
			МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
			Если МодульЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
				МодульЭлектронноеАктированиеЕИС.ДополнитьДеревоДаннымиЭлектронногоАктирования(
					ДеревоЭД, ДанныеЭлектронногоДокумента);
			КонецЕсли;
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС
	КонецЕсли;
	
	МодульОбменСГИСЭПД = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
	КонецЕсли;
	
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЕстьЭлектронноеАктирование
			И МодульЭлектронноеАктированиеЕИС.ЭтоДокументЭлектронногоАктирования(ДанныеЭлектронногоДокумента, НовыйЭД) Тогда
				
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
			МодульПодсистемы.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоЭД, ДанныеЭлектронногоДокумента, ДокументУчета);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);					
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);					
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);				
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);				
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйПередаточныйДокумент_5_02(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКД_2020(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоЭД, ДокументыУчета, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
			СохранитьДанныеОбъектаДляАктаОРасхождениях(ДеревоЭД, ДокументУчета,
				ДанныеЭлектронногоДокумента.ДанныеДополнительногоТитула, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктСверкиВзаиморасчетов(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);	
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьСчетНаОплату101(ДеревоЭД, ДокументУчета, СпособОбработки, ОписаниеОшибки);	
		ИначеЕсли НовыйЭД.ВерсияФормата
		= ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОПриемкеСтроительныхРаботУслуг(ДеревоЭД,
				ДокументУчета, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
			КонструкторЭД = НовыйЭД.ЗначениеРеквизита;
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДоговорнойДокумент101(КонструкторЭД,
				ДокументУчета, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
			ОбъектXDTO = НовыйЭД.ЗначениеРеквизита.ОбъектXDTO;
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДоговорныйДокументXML(ОбъектXDTO,
				ДокументУчета, СпособОбработки, ОписаниеОшибки);
		ИначеЕсли НовыйЭД.ВерсияФормата = ПоддерживаемыеФорматы.ДокументПредприятия Тогда
			ОбъектXDTO = НовыйЭД.ЗначениеРеквизита;
			ПараметрыОбработки = Новый Структура("СпособОбработки", СпособОбработки);
			ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПредприятия(ДокументУчета, ОбъектXDTO, ПараметрыОбработки,
				ОписаниеОшибки, ДанныеЭлектронногоДокумента.ДополнительныеДанные);
		ИначеЕсли НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.КаталогТоваров
			И ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент) Тогда
			
			Если ДокументУчета = Неопределено Тогда 
				СвойстваДокумента = ЭлектронныеДокументыЭДО.СвойстваДокумента(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, "ВидДокумента, Организация, Контрагент, ДоговорКонтрагента");
				ДокументУчета = НастройкиЭДО.СсылкаНаОбъектНастройкиЭДО(СвойстваДокумента.Организация, СвойстваДокумента.Контрагент, СвойстваДокумента.ДоговорКонтрагента);
			КонецЕсли;
			
			ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(
				ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, ДокументУчета, СпособОбработки);
		
		ИначеЕсли ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
				МодульЗапросКоммерческогоПредложенияОтКлиента = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
				МодульЗапросКоммерческогоПредложенияОтКлиента.НайтиСоздатьЗапросКоммерческихПредложений(ДеревоЭД, ДокументУчета);
			Иначе
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьЗапросКоммерческихПредложений(ДеревоЭД,
					ДокументУчета, СпособОбработки, ОписаниеОшибки);
			КонецЕсли;
			
		ИначеЕсли ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
				МодульКоммерческоеПредложениеПоставщика = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
				МодульКоммерческоеПредложениеПоставщика.НайтиСоздатьКоммерческоеПредложение(ДеревоЭД, ДокументУчета);
			Иначе
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьКоммерческоеПредложение(ДеревоЭД,
					ДокументУчета, СпособОбработки, ОписаниеОшибки);
			КонецЕсли;

		ИначеЕсли ДанныеЭлектронногоДокумента.ТипДокумента
											= Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
			
			МашиночитаемыеДоверенности.ОтразитьВУчете(ДанныеЭлектронногоДокумента,
				ДокументыУчета, СпособОбработки, ОписаниеОшибки);
			
		ИначеЕсли (МодульОбменСГИСЭПД <> Неопределено 
			И МодульОбменСГИСЭПД.ЭтоДокументЭПД(ДанныеЭлектронногоДокумента.ТипДокумента)) Тогда
				
			МодульОбменСГИСЭПД.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоЭД, ДанныеЭлектронногоДокумента, ДокументУчета);
			
		Иначе
			ОшибкаЗаписи = Ложь;
			ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
		
			ПараметрыОбработки = ПараметрыОбработкиСохранитьДанныеОбъектаВБД(ДокументУчета, Истина, СпособОбработки);
			ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора, ПараметрыОбработки,
				ДанныеЭлектронногоДокумента.ДополнительныеДанные, ДокументУчета, ОписаниеОшибки);
			
			Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
				ЗаполнитьДокументыУчета = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
			ТекстОшибки,
			ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ДокументУчета) Тогда
		ЗаполнитьДокументыУчета = Ложь;
	КонецЕсли;
		
	Если ЗаполнитьДокументыУчета Тогда
		ДокументыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументУчета);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументыУчета) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось создать документ базы данных.'");
		АктуальныеВидыЭД = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовВходящие();
		ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(НовыйЭД.ВидЭД);
		Если АктуальныеВидыЭД.Найти(ВидДокумента) = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Электронный документ вида ""%1"" в текущей конфигурации не поддерживается'");
			ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Строка(ВидДокумента));
		ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ТекстЖурналаРегистрации = ОписаниеОшибки;
			ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки;
		Иначе
			ТекстЖурналаРегистрации = НСтр("ru = 'Необходимо проверить работу процедуры
				|ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД'");
		КонецЕсли;
		ВидОперации = НСтр("ru = 'Заполнение документа на основе ЭД.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			ВидОперации, ТекстЖурналаРегистрации, ТекстСообщения);
			ОшибкаЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДоступноОтражениеВУчетеПоСостояниюДокумента(СостояниеДокумента)
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован
		ИЛИ СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ДоступноОтражениеВУчетеПоТипуДокумента(ТипДокумента)
	
	ЭтоПрикладнойТипЭлектронногоДокумента = 
		ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов().Найти(ТипДокумента) <> Неопределено
		Или ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной;	
		
	Если ЭтоПрикладнойТипЭлектронногоДокумента Тогда
		Возврат Истина;
	КонецЕсли;	

	Направление = Перечисления.НаправленияЭДО.Входящий;
	ТипДокументаИспользуется = ИнтеграцияЭДО.ТипДокументаИспользуетсяПоНаправлению(ТипДокумента, Направление);
	Возврат ТипДокументаИспользуется;
	
КонецФункции

// Параметры:
//  Формат - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ДоступноОтражениеВУчетеПоФормату(Формат)
	ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
	ЭтоПоддерживаемыйФормат = ФорматыЭДО.ЭтоФорматПространства(ПоддерживаемыеФорматы, Формат);
	Возврат ЭтоПоддерживаемыйФормат;
КонецФункции

// Параметры:
//  ПричинаОтказа - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ДоступноОтражениеВУчетеСводногоУПД(ПричинаОтказа = "")
	Отказ = Ложь;
	ПараметрыПроверки = Новый Структура("ЭтоСводныйУПД", Истина);
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеВозможностиСозданияУчетногоДокумента(
		ПараметрыПроверки, Отказ, ПричинаОтказа);
	Возврат Не Отказ;
КонецФункции

// Параметры:
//  ДанныеДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСводныйУПД(ДанныеДокумента)
	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
		И ЗначениеЗаполнено(ДанныеДокумента.ДанныеОсновногоФайла) Тогда
		Возврат ЭлектронныеДокументыЭДО.ЭтоСводныйУПД(ДанныеДокумента.ДанныеОсновногоФайла.ДвоичныеДанные);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Проверяет готовность прикладного электронного документа к отражению в учете.
// 
// Параметры:
//  ПараметрыОтражения - Структура - данные для подготовки к отражению в учете:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - отражаемый в учете электронный документ.
//   * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО,ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО - прикладной тип электронного документа. 
//   * СпособОбработки - Строка - выбранный способ отражения в учете.
//
// Возвращаемое значение:
//  Булево
Функция ПрикладнойЭлектронныйДокументГотовКОтражениюВУчете(ПараметрыОтражения)
	
	ГотовКОтражению = Истина;
	
	Если НЕ ИспользоватьСопоставлениеНоменклатуры(ПараметрыОтражения.ТипДокумента) Тогда
		Возврат ГотовКОтражению;
	КонецЕсли;
	
	СвойстваЭлектронногоДокумента = Новый Структура("СпособОбработки", ПараметрыОтражения.СпособОбработки);
	Настройки = Новый Структура("ОтражатьТолькоСопоставленные", Истина);
	ОбменСКонтрагентамиПереопределяемый.ПриОтраженииВУчетеПрикладногоЭлектронногоДокументаСНоменклатурой(
		СвойстваЭлектронногоДокумента, Настройки);
	Если Настройки.ОтражатьТолькоСопоставленные Тогда
		ОтборПоДокументу = ОтборНоменклатурыКонтрагентовНаКонтроле(ПараметрыОтражения.ЭлектронныйДокумент);
		ГотовКОтражению = НЕ ЕстьНоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	КонецЕсли;
	
	Возврат ГотовКОтражению;
	
КонецФункции

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//               - ОпределяемыйТип.ПрикладныеТипыЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьСопоставлениеНоменклатуры(ТипДокумента)
	
	Если ТипЗнч(ТипДокумента) = Тип("ПеречислениеСсылка.ТипыДокументовЭДО") Тогда
		Использовать = Истина;
	Иначе
		Использовать = Ложь;
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользованияСопоставленияНоменклатурыКонтрагентов(
			ТипДокумента, Использовать);
	КонецЕсли;
	
	Возврат Использовать;
	
КонецФункции

// Выполняется перед отражением в учете электронного документа,
// содержащего данные для сопоставления номенклатуры.
// Проверяет возможность отражения в учете документа с не сопоставленной номенклатурой,
// а также добавляет информацию о имеющемся сопоставлении.
// 
// Параметры:
//  ПараметрыОтражения - Структура - данные для подготовки к отражению в учете:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - отражаемый в учете электронный документ.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//   * СпособОбработки - Строка - выбранный способ отражения в учете.
//   * ДеревоДокумента - ДеревоЗначений - дерево документа, по данным которого будет выполняться отражение в учете (изменяемый параметр).
//  Отказ - Булево - признак наличия ошибок при подготовке к отражению в учете (выходной параметр).
//  ОписаниеОшибки - Строка - описание ошибки, возникшей при подготовке к отражению в учете (выходной параметр).
//
Процедура ПередОтражениемВУчетеЭлектронногоДокумента(ПараметрыОтражения, Отказ = Ложь, ОписаниеОшибки = "")
	
	Документ = Новый Структура("СпособОбработки", ПараметрыОтражения.СпособОбработки);
	Настройки = Новый Структура("ОтражатьТолькоСопоставленные", Истина);
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(Документ, Настройки);
	Если Настройки.ОтражатьТолькоСопоставленные 
		И ПараметрыОтражения.ЭлектронныйДокумент <> Неопределено Тогда
		ОтборПоДокументу = ОтборНоменклатурыКонтрагентовНаКонтроле(ПараметрыОтражения.ЭлектронныйДокумент);
		НаКонтроле = НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
		Если ЗначениеЗаполнено(НаКонтроле) Тогда
			Отказ = Истина;
			ОписаниеОшибки = НСтр("ru = 'Для отражения в учете необходимо сопоставить номенклатуру.'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЭДО.ЗаполнитьНоменклатуруИБВДеревеДокумента(ПараметрыОтражения.Контрагент,
		ПараметрыОтражения.ДеревоДокумента);
	
КонецПроцедуры

// Параметры:
//  ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  Ошибка - Булево
Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка)
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = Новый ТаблицаЗначений; // см. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов.Таблица
	ПорядокСозданияТиповОбъектов.Колонки.Добавить("ТипОбъекта");
	ПорядокСозданияТиповОбъектов.Колонки.Добавить("Порядок");
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(ПорядокСозданияТиповОбъектов);
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = Неопределено; // Неопределено,ЛюбаяСсылка
				Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураКонтрагентов" Тогда
					СопоставлениеНоменклатурыКонтрагентовСлужебный.СозданиеПерезаполнениеНоменклатурыКонтрагентаИзДерева(
						СтрокаОбъекта, ДеревоРазбора);
				Иначе
					ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, СсылкаНаОбъект);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначения.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = Неопределено; // Неопределено,ЛюбаяСсылка
				Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураКонтрагентов" Тогда
					СопоставлениеНоменклатурыКонтрагентовСлужебный.СозданиеПерезаполнениеНоменклатурыКонтрагентаИзДерева(
						СтрокаОбъекта, ДеревоРазбора);
				Иначе
					ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, СсылкаНаОбъект);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка создания элемента справочника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначения.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  Данные - см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Процедура ДополнитьДеревоСсылкамиНаДокументыОснования(ДеревоРазбора, Данные, ДанныеЭлектронногоДокумента)
	
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Формат = Данные.ВерсияФормата;
	ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.ЭлектронныйДокумент;
	ДокументыОснования = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанныеСчетаФактуры.ТекстоваяИнформация",
			"ПолныйПуть"); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл 
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов,
			ЭлектронныйДокумент);
			
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита,
			"ДокументыОснованияСчетаФактуры", ДокументыОснования);
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти(
			"ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть");  // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита,
			"ДокументыОснованияСчетаФактуры", ДокументыОснования);
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеДокументаОтгрузки", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти(
			"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть"); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов,
			ЭлектронныйДокумент);
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита,
			"ДокументыОснованияДокументаОтгрузки", ДокументыОснования);
	
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		Путь = "СведенияОСчетеФактуре.ИнформационноеПолеФХЖ";
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти(Путь, "ПолныйПуть", Истина);
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти(
			Путь + ".ТекстоваяИнформация", "ПолныйПуть", Истина); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			ТекстоваяИнформацияПуть = Путь + ".ТекстоваяИнформация.НомерСтроки.";
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					ТекстоваяИнформацияПуть + "Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					ТекстоваяИнформацияПуть + "Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита,
			"ДокументыОснованияСчетаФактуры", ДокументыОснования);
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		Путь = "СведенияОПередаче.ИнформационноеПолеФХЖ";
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти(Путь, "ПолныйПуть", Истина);
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти(
			Путь + ".ТекстоваяИнформация", "ПолныйПуть", Истина); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			ТекстоваяИнформацияПуть = Путь + ".ТекстоваяИнформация.НомерСтроки.";
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					ТекстоваяИнформацияПуть + "Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					ТекстоваяИнформацияПуть + "Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов,
			ЭлектронныйДокумент);
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита,
			"ДокументыОснованияДокументаОтгрузки", ДокументыОснования);
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца 
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанныеСчетаФактуры", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти(
			"ДопДанныеСчетаФактуры.ТекстоваяИнформация", "ПолныйПуть"); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанныеСчетаФактуры.ТекстоваяИнформация.НомерСтроки.Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов,
			ЭлектронныйДокумент);
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита,
			"ДокументыОснованияСчетаФактуры", ДокументыОснования);
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		
		МассивИдентификаторов = Новый Массив; // см. ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам.ИдентификаторыОснований
		
		СтрокиДопДанныеСчетаФактуры = Данные.ЗначениеРеквизита.Строки.Найти("ДопДанные", "ПолныйПуть");
		СтрокаТаблицы = СтрокиДопДанныеСчетаФактуры.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть"); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
		Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("Число") И СтрокаТаблицы.Значение > 0 Тогда
			Для Каждого Информация Из СтрокаТаблицы.Строки Цикл
				
				Идентификатор = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанные.Подписанные.НомерСтроки.Идентификатор"); // Строка
				Значение = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Информация,
					"ДопДанные.Подписанные.НомерСтроки.Значение"); // Строка
				
				Если Идентификатор = "ИдентификаторДокументаОснования" Тогда
					МассивИдентификаторов.Добавить(Значение);
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
		
		ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(МассивИдентификаторов, ЭлектронныйДокумент);			
		
		ДеревоЭлектронногоДокументаБЭД.ЗаполнитьЗначениеРеквизитаВДереве(Данные.ЗначениеРеквизита, "ДокументыОснования",
			ДокументыОснования);
		
	Иначе
		ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, Данные, ДанныеЭлектронногоДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  НовыйЭД - см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Процедура ЗаполнитьСсылкиНаДокументыОснованияПоИдентификаторам(ДеревоРазбора, НовыйЭД, ДанныеЭлектронногоДокумента)
	
	ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.ЭлектронныйДокумент;
	
	ЭтоСчетФактура = ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура
		Или ДанныеЭлектронногоДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура;
		
	ИДДокументаОснования = НовыйЭД.Строки.Найти("ИдентификаторДокументаОснования", "Реквизит", Истина); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
	ИДЭДДокументаОснования = НовыйЭД.Строки.Найти("ИДЭДДокументаОснования", "Реквизит", Истина); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
	// Для счета-фактуры в переопределяемой части ожидается несколько иная структура данных по основаниям.
	Если ЭтоСчетФактура Тогда
		ДокументыОснования = НовыйЭД.Строки.Найти("ДокументыОснования", "Реквизит", Истина); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
		Если ДокументыОснования <> Неопределено Тогда
			Для Каждого Строка Из ДокументыОснования.Строки Цикл // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
				ПараметрыДокументаОснования = Строка.ЗначениеРеквизита; // см. НовыеПараметрыОснованияДляЗаполненияДереваДанных
				ДокументОснование = Неопределено;
				Если ПараметрыДокументаОснования.Свойство("ИдентификаторДокументаОснования", ИДЭДДокументаОснования)
					И ЗначениеЗаполнено(ИДЭДДокументаОснования) Тогда

					ИдентификаторыОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДДокументаОснования.ЗначениеРеквизита); 
					ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(
						ИдентификаторыОснований, ЭлектронныйДокумент);
					Если ЗначениеЗаполнено(ДокументыОснования) Тогда
						ДокументОснование = ДокументыОснования[0];
					КонецЕсли;
				КонецЕсли;
				Если ДокументОснование <> Неопределено Тогда
					Строка.СсылкаНаОбъект = ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ИДДокументаОснования <> Неопределено Тогда
				ИдентификаторыОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДДокументаОснования.ЗначениеРеквизита); 
				ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(
					ИдентификаторыОснований, ЭлектронныйДокумент);
				Если ЗначениеЗаполнено(ДокументыОснования) Тогда
					ДокументОснование = ДокументыОснования[0];
				КонецЕсли;
			КонецЕсли;
			Если ДокументОснование <> Неопределено Тогда
				ПараметрыОснования = НовыеПараметрыОснованияДляЗаполненияДереваДанных();
				Для Каждого Элемент Из ПараметрыОснования Цикл
					СтрокаРеквизита = НовыйЭД.Строки.Найти(Элемент.Ключ, "Реквизит", Истина); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
					Если СтрокаРеквизита <> Неопределено Тогда	
						ПараметрыОснования[Элемент.Ключ] = СтрокаРеквизита.ЗначениеРеквизита;
					КонецЕсли;
				КонецЦикла;
				НовСтрока = НовыйЭД.Строки.Добавить(); // СтрокаДереваЗначений: см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
				НовСтрока.Реквизит = "ДокументыОснования";
				ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовСтрока, "ДокументОснования", ПараметрыОснования, ДокументОснование);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОснование = Неопределено;
		Если ИДДокументаОснования <> Неопределено Тогда
			ИдентификаторыОснований = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИДДокументаОснования.ЗначениеРеквизита); 
			ДокументыОснования = ИнтеграцияЭДО.ДокументыОснованияПоИдентификаторам(ИдентификаторыОснований, ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(ДокументыОснования) Тогда
				ДокументОснование = ДокументыОснования[0];
			КонецЕсли;
		КонецЕсли;
		Если ДокументОснование <> Неопределено Тогда
			НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДокументыОснования");
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НайденныйТипВДереве, "ДокументОснования", ДокументОснование, ДокументОснование);
			НайденнаяСтрока = НайденныйТипВДереве.Строки.Найти(ДокументОснование, "СсылкаНаОбъект"); // см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
			НайденнаяСтрока.ИндексСтроки = НайденныйТипВДереве.ИндексСтроки + "_"
				+ Строка(НайденныйТипВДереве.Строки.Индекс(НайденнаяСтрока));
			ДеревоЭлектронногоДокументаБЭД.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Основание", НайденнаяСтрока.ИндексСтроки, ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДокументаОснования - Строка
//  * ИДЭДДокументаОснования - Строка
//  * ВидДокументаОснования - Строка
//  * НомерДокументаОснования - Строка
//  * ДатаДокументаОснования - Дата
Функция НовыеПараметрыОснованияДляЗаполненияДереваДанных()
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторДокументаОснования", "");
	Параметры.Вставить("ИДЭДДокументаОснования", "");
	Параметры.Вставить("ВидДокументаОснования", "");
	Параметры.Вставить("НомерДокументаОснования", "");
	Параметры.Вставить("ДатаДокументаОснования", '00010101');
	Возврат Параметры;
КонецФункции

// Параметры:
//  ДеревоДанных - ДеревоЗначений
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Процедура ДополнитьДеревоДаннымиКомитента(ДеревоДанных, ДанныеЭлектронногоДокумента)
	
	ВидУчастника = "СведенияОКомитенте";
	ТипДокумента = ДанныеЭлектронногоДокумента.ТипДокумента;
	 
	Если ТипДокумента <> Перечисления.ТипыДокументовЭДО.СведенияОРеализацииКомиссионером
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.СведенияОЗакупкеКомиссионером
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОРеализацииКомиссионером
		И ТипДокумента <> Перечисления.ТипыДокументовЭДО.КорректировкаСведенийОЗакупкеКомиссионером
		ИЛИ ЗначениеЗаполнено(ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника)) Тогда
		Возврат;
	КонецЕсли;
	
	Получатель = ДанныеЭлектронногоДокумента.Получатель;
	СведенияОбУчастнике = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Получатель, СведенияОбУчастнике);
	
	ЭтоФизЛицо = ИнтеграцияЭДО.ЭтоФизЛицо(Получатель);
	
	Если ЭтоФизЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.ИНН",
			СведенияОбУчастнике.ИНН);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Фамилия",
			СведенияОбУчастнике.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Имя",
			СведенияОбУчастнике.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ИП.Отчество",
			СведенияОбУчастнике.Отчество);

	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
			СведенияОбУчастнике.ИНН);

		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
			СведенияОбУчастнике.КПП);

	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СсылкаНаВладельца - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  Записывать - Булево
//  СпособОбработкиДокумента - см. СпособОбработкиДокумента
//
// Возвращаемое значение:
//  См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.ПараметрыОбработки
//
Функция ПараметрыОбработкиСохранитьДанныеОбъектаВБД(СсылкаНаВладельца, Записывать, СпособОбработкиДокумента)
	ПараметрыОбработки = НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД();
	ПараметрыОбработки.СсылкаНаВладельца = СсылкаНаВладельца;
	ПараметрыОбработки.Записывать = Записывать;
	Если ТипЗнч(СпособОбработкиДокумента) = Тип("Строка") Тогда
		ПараметрыОбработки.СпособОбработки = СпособОбработкиДокумента;
	КонецЕсли;
	Возврат ПараметрыОбработки;
КонецФункции

// Возвращаемое значение:
//  См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД.ПараметрыОбработки
Функция НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД() 
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("СсылкаНаВладельца", Неопределено);
	ПараметрыОбработки.Вставить("Записывать",        Ложь);
	ПараметрыОбработки.Вставить("СпособОбработки",   "");
	Возврат ПараметрыОбработки;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - электронный документ, по которому изменяются данные.
//  НаборИзменений - Соответствие из КлючИЗначение - перечень изменений: 
//   * Ключ - Строка - требование:
//                     СопоставитьНоменклатуру - проверка на завершение сопоставления номенклатуры.
//                     СоздатьУчетныйДокумент - проверка на наличие учетного документа.
//                     ПровестиУчетныйДокумент - проверка на проведенность учетного документа.
//   * Значение - Булево - признак нахождения документа на контроле по данному требованию. 
//                         Т.е. если Истина, то документ еще НЕ соответствует требованию.
//
Процедура ИзменитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, НаборИзменений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КонтрольОтраженияВУчетеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.КонтрольОтраженияВУчетеЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
		
		Записать = Ложь;
		Для Каждого Запись Из Набор Цикл
			
			Для Каждого Изменение Из НаборИзменений Цикл
				
				ТекущееЗначение = Запись[Изменение.Ключ]; // Булево
				НовоеЗначение = Изменение.Значение;
				Если ТекущееЗначение <> НовоеЗначение Тогда
					Записать = Истина;
					Запись[Изменение.Ключ] = НовоеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Записать Тогда
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - имя проверки.
//  * Значение - Число - индекс запроса.
Функция НовыйКонтрольПрохожденияПроверок()
	Возврат Новый Соответствие;
КонецФункции

// Заполняет данные Договора, если они отсутствуют в дереве
// 
// Параметры:
//  ДеревоДанных   - ДеревоЗначений - Дерево данных электронного документа. 
//     Строится по макету Обработки.ОбменСКонтрагентами
//  ДанныеЭлектронногоДокумента - См. ОтражениеВУчетеЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  Формат - Строка - одно из значений поддерживаемого формата см. ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы 
//
Процедура ДополнитьДеревоДаннымиДоговора(ДеревоДанных, ДанныеЭлектронногоДокумента, Формат)
	
	Если Не ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	ПутиДанныхОснования = ПутиОснованияВДеревеДокумента(Формат);
	
	Если Не ЗначениеЗаполнено(ПутиДанныхОснования.Основание) Тогда
		Возврат;
	КонецЕсли;
	НужноЗаполнить = Истина;
	
	ОснованияОтгрузки = ДеревоДанных.Строки.Найти(ПутиДанныхОснования.Основание, "ПолныйПуть");
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			
			ДоговорНомер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, ПутиДанныхОснования.НомерОснования, Ложь);
			ДоговорДата = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
					СтрокаОснованиеОтгрузки, ПутиДанныхОснования.ДатаОснования, Ложь);
			
			Если ЗначениеЗаполнено(ДоговорНомер) И ЗначениеЗаполнено(ДоговорДата) Тогда
				НужноЗаполнить = Ложь;
			КонецЕсли;
			Прервать;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не НужноЗаполнить Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитНомерДоговора = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"НомерДоговораКонтрагента");
	РеквизитДатаДоговора = ЭлектронноеВзаимодействие.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ДатаДоговораКонтрагента");
	
	Если Не ЗначениеЗаполнено(РеквизитНомерДоговора) Или Не ЗначениеЗаполнено(РеквизитДатаДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	ПутиРеквизитов = Новый Массив; // Массив из Строка
	ПутиРеквизитов.Добавить("ДоговорКонтрагента." + РеквизитНомерДоговора);
	ПутиРеквизитов.Добавить("ДоговорКонтрагента." + РеквизитДатаДоговора);
	
	ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, ПутиРеквизитов);
	
	ДоговорНомерЭД = Неопределено;
	ДоговорДатаЭД  = Неопределено;
	ЗначенияРеквизитовДоговора.Свойство("ДоговорКонтрагента" + РеквизитНомерДоговора, ДоговорНомерЭД);
	ЗначенияРеквизитовДоговора.Свойство("ДоговорКонтрагента" + РеквизитДатаДоговора, ДоговорДатаЭД);
	
	Если Не ЗначениеЗаполнено(ДоговорНомерЭД) Или Не ЗначениеЗаполнено(ДоговорДатаЭД) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОснованияОтгрузки <> Неопределено Тогда
		Для Каждого СтрокаОснованиеОтгрузки Из ОснованияОтгрузки.Строки Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				СтрокаОснованиеОтгрузки, ПутиДанныхОснования.НомерОснования, ДоговорНомерЭД);
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				СтрокаОснованиеОтгрузки, ПутиДанныхОснования.ДатаОснования, ДоговорДатаЭД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает полные пути данных документов-оснований в дереве документа ЭДО по формату.
//  Если форматом не предполагается указание документов-оснований, то возвращает пустые строки.
// 
// Параметры:
//  Формат - Строка - одно из значений поддерживаемого формата см. ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы
// 
// Возвращаемое значение:
//  Структура:
//    * Основание - Строка
//    * НомерОснования - Строка
//    * ДатаОснования - Строка
//    * НаименованиеОснования - Строка
//    * ДополнительныеДанныеОснования - Строка
//
Функция ПутиОснованияВДеревеДокумента(Формат)
	
	ПутиВДереве = Новый Структура;
	ПутиВДереве.Вставить("Основание", "");
	ПутиВДереве.Вставить("НомерОснования", "");
	ПутиВДереве.Вставить("ДатаОснования", "");
	ПутиВДереве.Вставить("НаименованиеОснования", "");
	ПутиВДереве.Вставить("ДополнительныеДанныеОснования", "");
	
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	
	Если Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		
		ПутьОснования = "Основание";
		ЛокальныйПутьНомер = "ДокОснованиеНомер";
		ЛокальныйПутьДата = "ДокОснованиеДата";
		ЛокальныйПутьНаименование = "ДокОснованиеНаименование";
		ЛокальныйПутьДопСведения = "ДокОснованиеДопСведения";
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		
		ПутьОснования = "ОснованиеОтгрузкиТоваров";
		ЛокальныйПутьНомер = "ДокументНомер";
		ЛокальныйПутьДата = "ДокументДата";
		ЛокальныйПутьНаименование = "ДокументНаименование";
		ЛокальныйПутьДопСведения = "ДокументДопСведения";
	
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда	
		
		ПутьОснования = "СведенияОПередаче.Операция.ОснованиеОтгрузкиПередачи.ДокументыОснования";
		ЛокальныйПутьНомер = "НомерДокумента";
		ЛокальныйПутьДата = "ДатаДокумента";
		ЛокальныйПутьНаименование = "НаименованиеДокумента";
		ЛокальныйПутьДопСведения = "ДополнительныеСведения";
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		
		ПутьОснования = "ОснованиеКорректировки";
		ЛокальныйПутьНомер = "ДокументНомер";
		ЛокальныйПутьДата = "ДокументДата";
		ЛокальныйПутьНаименование = "ДокументНаименование";
		ЛокальныйПутьДопСведения = "ДокументДопСведения";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПутьОснования) Тогда
		Возврат ПутиВДереве;
	КонецЕсли;
	
	ПутиВДереве.Основание = ПутьОснования;
	
	ШаблонПолногоПути = СтрШаблон("%1.НомерСтроки.%2", ПутьОснования, "%1");
	
	Если ЗначениеЗаполнено(ЛокальныйПутьНаименование) Тогда
		ПутиВДереве.НаименованиеОснования = СтрШаблон(ШаблонПолногоПути, ЛокальныйПутьНаименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛокальныйПутьНомер) Тогда
		ПутиВДереве.НомерОснования = СтрШаблон(ШаблонПолногоПути, ЛокальныйПутьНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛокальныйПутьДата) Тогда
		ПутиВДереве.ДатаОснования = СтрШаблон(ШаблонПолногоПути, ЛокальныйПутьДата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛокальныйПутьДопСведения) Тогда
		ПутиВДереве.ДополнительныеДанныеОснования = СтрШаблон(ШаблонПолногоПути, ЛокальныйПутьДопСведения);
	КонецЕсли;
	
	Возврат ПутиВДереве;
	
КонецФункции

// Отражает в прикладном решение акт о расхождениях.
// 
// Параметры:
//  ДеревоЭД - ДеревоЗначений - дерево учетных данных.
//  ДокументУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДанныеДополнительногоТитула - см. ОтражениеВУчетеЭДОКлиентСервер.НовыеДанныеДополнительногоТитулаДляОтраженияВУчете
//  СпособОбработки - Строка
//  ОписаниеОшибки - Строка
Процедура СохранитьДанныеОбъектаДляАктаОРасхождениях(ДеревоЭД, ДокументУчета, ДанныеДополнительногоТитула,
	СпособОбработки, ОписаниеОшибки)
	ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоЭД, ДокументУчета, СпособОбработки,
		ОписаниеОшибки);

	Если ЗначениеЗаполнено(ДанныеДополнительногоТитула.ОсновнойФайл.ИмяФайла) Тогда
		ПараметрыПолученияДополнительногоТитула = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияДанныхДокумента();
		ПараметрыПолученияДополнительногоТитула.ОсновнойФайл = ДанныеДополнительногоТитула.ОсновнойФайл;
		ПараметрыПолученияДополнительногоТитула.ДополнительныйФайл = ДанныеДополнительногоТитула.ДополнительныйФайл;
		ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра(ПараметрыПолученияДополнительногоТитула);
		Если Не ЗначениеЗаполнено(ДанныеДокумента) Тогда
			Возврат;
		КонецЕсли;
		ДокументыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументУчета);
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьАктОРасхожденияхПоДополнительнымСведениям(
			ДанныеДокумента, ДокументыУчета);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьКонтрольОтраженияВУчетеДляТипаДокумента(ТипДокумента)
	
	Результат = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ОтключитьКонтроль = МодульПодсистемы.ОтключитьКонтрольОтраженияВУчетеДокументовПодсистемы(ТипДокумента);
		Если ОтключитьКонтроль Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		Если МодульОбменСГИСЭПД.ЭтоДокументЭПД(ТипДокумента) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СопоставитьНоменклатуру - Булево
//  * СоздатьУчетныйДокумент - Булево
//  * ПровестиУчетныйДокумент - Булево
Функция НовыеПараметрыКонтроляОтраженияВУчете()
	Возврат РегистрыСведений.КонтрольОтраженияВУчетеЭДО.НовыеПараметрыКонтроля();
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

// Параметры:
//  Отбор - см. ОтборНоменклатурыКонтрагентовНаКонтроле
// 
// Возвращаемое значение:
//  Булево
Функция ОтборНоменклатурыКонтрагентовНаКонтролеЗаполнен(Отбор)
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ЭлектронныйДокумент") <> Неопределено
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Владелец") <> Неопределено
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Идентификатор") <> Неопределено Тогда
		Заполнен = Истина;
	Иначе
		Заполнен = Ложь;
	КонецЕсли;
	
	Возврат Заполнен;
	
КонецФункции

// Параметры:
//  ТекстЗапроса - Строка
//  Отбор - см. ОтборНоменклатурыКонтрагентовНаКонтроле
// 
// Возвращаемое значение:
//  Запрос
Функция ЗапросНоменклатураКонтрагентовНаКонтроле(ТекстЗапроса, Отбор)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	УсловиеОтбора = "ИСТИНА";
	Если Отбор <> Неопределено Тогда
		Для Каждого Элемент Из Отбор Цикл
			Если Элемент.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			УсловиеОтбора = УсловиеОтбора + " И Контроль." + Элемент.Ключ + " В (&" + Элемент.Ключ + ")";
			ИмяПараметра = Элемент.Ключ; // Строка
			Запрос.УстановитьПараметр(ИмяПараметра, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	Возврат Запрос;
	
КонецФункции

// Прекращает контроль сопоставления номенклатуры контрагентов.
// Возвращает набор электронных документов, за которыми данный контроль был закреплен.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//
Функция ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентов(НаборНоменклатурыКонтрагентов)
	
	Если ТипЗнч(НаборНоменклатурыКонтрагентов) <> Тип("Массив") Тогда
		НаборНоменклатурыКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыКонтрагентов);
	КонецЕсли;
	
	НаборЭлектронныхДокументов = Новый Массив; // Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НачатьТранзакцию();
		Попытка
			Набор = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
			Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
			Набор.Прочитать();
			
			Для Каждого Запись Из Набор Цикл
				Если НаборЭлектронныхДокументов.Найти(Запись.ЭлектронныйДокумент) = Неопределено Тогда
					НаборЭлектронныхДокументов.Добавить(Запись.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Набор) Тогда
				Набор.Очистить();
				Набор.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат НаборЭлектронныхДокументов;
	
КонецФункции

// Параметры:
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
// 
Процедура ВыполнитьКонтрольСопоставленияНоменклатуры(ДанныеЭлектронногоДокумента)
	
	НоменклатураБезСопоставления = НоменклатураЭлектронногоДокументаБезСопоставления(ДанныеЭлектронногоДокумента);
	
	ВключитьКонтрольСопоставленияНоменклатуры(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент, НоменклатураБезСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольПроведения

// Ставит электронный документ на контроль проведения связанных с ним учетных документов.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - электронный документ, который ставится на контроль.
//  НаборУчетныхДокументов - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - учетные документы, проведение которых нужно контролировать.
//
Процедура ВключитьКонтрольПроведенияУчетныхДокументов(Знач ЭлектронныйДокумент, Знач НаборУчетныхДокументов)
	
	Если ТипЗнч(НаборУчетныхДокументов) <> Тип("Массив") Тогда
		НаборУчетныхДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборУчетныхДокументов);
	КонецЕсли;
	
	Для Каждого УчетныйДокумент Из НаборУчетныхДокументов Цикл
		
		Набор = РегистрыСведений.КонтрольПроведенияУчетныхДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.УчетныйДокумент.Установить(УчетныйДокумент);
		
		Запись = Набор.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Запись.УчетныйДокумент = УчетныйДокумент;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Прекращает контроль проведения учетных документов для электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ, который снимается с контроля.
//
Процедура ОтключитьКонтрольПроведенияУчетныхДокументовЭД(Знач ЭлектронныйДокумент)
	
	Набор = РегистрыСведений.КонтрольПроведенияУчетныхДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	
	Набор.Записать();
	
КонецПроцедуры

// Возвращает массив проведенных документов.
//
// Параметры:
//  МассивДокументов - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - массив ссылок на документы, которые проведены.
//
Функция МассивПроведенныхДокументов(МассивДокументов)
	
	МассивПроведенныхДокументов = Новый Массив; // см. МассивПроведенныхДокументов
	МассивПроводимыхДокументов = ОбщегоНазначенияБЭД.МассивПроводимыхДокументов(
		МассивДокументов); // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	
	ИмяРеквизитаПроведен = "Проведен";
	
	Для Каждого Документ Из МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, ИмяРеквизитаПроведен) Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти
