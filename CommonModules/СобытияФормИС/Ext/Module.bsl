#Область ПрограммныйИнтерфейс

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(Форма);
	
	МодификацияФормы(Форма);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЕГАИС");
			Модуль.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормВЕТИС");
			Модуль.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормГИСМ");
			Модуль.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
			Модуль.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЗЕРНО");
			Модуль.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормСАТУРН");
			Модуль.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнениеРеквизитовГосИС(Форма);
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ТребуетсяЗаполнениеРеквизитов = Ложь;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		МодификацияФормы(Форма);
		ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(Форма);
		ТребуетсяЗаполнениеРеквизитов = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСПереопределяемый.ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЕГАИС");
			Модуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормВЕТИС");
			Модуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормГИСМ");
			Модуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
			Модуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЗЕРНО");
			Модуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормСАТУРН");
			Модуль.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		Если ТребуетсяЗаполнениеРеквизитов Тогда
			ЗаполнениеРеквизитовГосИС(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	ЗаполнениеРеквизитовГосИС(Форма);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если ИнтеграцияИС.РасчетСтатусовОформленияВыполняетсяВнеТранзакцииЗаписи() Тогда
			ПодключитьФоновоеЗаданиеРасчетаСтатусовОформления(Форма);
		КонецЕсли;
	
		СобытияФормИСПереопределяемый.ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЕГАИС");
			Модуль.ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормВЕТИС");
			Модуль.ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормГИСМ");
			Модуль.ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
			Модуль.ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЗЕРНО");
			Модуль.ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормСАТУРН");
			Модуль.ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Серверная процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//   Элемент                 - Произвольный     - источник события
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Элемент = "Подключаемый_ОбработатьВводШтрихкода" Тогда 
		
		ДополнительныеПараметры.РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
			Форма, 
			ДополнительныеПараметры.ДанныеШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения,
			ДополнительныеПараметры.ПараметрыСканирования);
		
	ИначеЕсли Элемент = "Подключаемый_ВыполнитьДействие" Тогда 
		
		ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(
			ДополнительныеПараметры.РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ДополнительныеПараметры.РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(
			Форма,
			ДополнительныеПараметры.Действие,
			ПараметрыОбработкиВыбора);
		
	ИначеЕсли Элемент = "ОбработатьДанныеШтрихкода" Тогда
		
		ДанныеШтрихкода       = ДополнительныеПараметры.ДанныеШтрихкода;
		КэшированныеЗначения  = ДополнительныеПараметры.КэшированныеЗначения;
		ПараметрыСканирования = ДополнительныеПараметры.ПараметрыСканирования;
		
		РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
			Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
		ДополнительныеПараметры.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
		
	ИначеЕсли Элемент = "ОбработкаКодаМаркировкиВыполнитьДействиеСервер" Тогда
		
		РезультатВыбора             = ДополнительныеПараметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		Действие                    = ДополнительныеПараметры.Действие;
		
		ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(Форма, Действие, ПараметрыОбработкиВыбора);
		ДополнительныеПараметры.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		
	ИначеЕсли Элемент = "ОбработкаКодаМаркировкиВыполнитьДействиеЗавершениеСервер" Тогда
		
		ДополнительныеПараметры.РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
		ДополнительныеПараметры.РезультатОбработкиШтрихкода.ИзмененныеСтроки = Новый Массив;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЕГАИС");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормВЕТИС");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормГИСМ");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЗЕРНО");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормСАТУРН");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Добавляет группу интеграции на форму-потребитель (форму объекта прикладного документа конфигурации)
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма-потребитель интеграции
//   ПараметрыИнтеграции - См. ПараметрыИнтеграцииДляДокументаОснования
//   СоздаватьГруппу - Булево - создавать группу для встраивания строки интеграции (Ложь - при отсутствии группы элемент
//      не будет добавлен).
//
// Возвращаемое значение:
//   ГруппаФормы, Неопределено - добавленная или найденная группа интеграции
//
//
Функция ДобавитьПолучитьГруппуИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, СоздаватьГруппу = Истина) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементыФормы, ПараметрыИнтеграции.ИмяРодительскойГруппыФормы) Тогда
		Возврат ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы];
	ИначеЕсли Не СоздаватьГруппу Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГруппаИнтеграцииГосИС = ЭлементыФормы.Добавить(
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы,
		Тип("ГруппаФормы"),
		?(ЗначениеЗаполнено(ПараметрыИнтеграции.РазмещениеВ), ЭлементыФормы[ПараметрыИнтеграции.РазмещениеВ], Неопределено));
		
	Если ЗначениеЗаполнено(ПараметрыИнтеграции.РазмещениеПеред) Тогда
		ЭлементыФормы.Переместить(ГруппаИнтеграцииГосИС,
		ГруппаИнтеграцииГосИС.Родитель,
		ЭлементыФормы[ПараметрыИнтеграции.РазмещениеПеред]);
	КонецЕсли;
		
	ГруппаИнтеграцииГосИС.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИнтеграцииГосИС.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаИнтеграцииГосИС.ОтображатьЗаголовок = Ложь;
	ГруппаИнтеграцииГосИС.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Возврат ГруппаИнтеграцииГосИС;
	
КонецФункции

// Добавляет поле интеграции на форму-потребитель (форму объекта прикладного документа конфигурации)
//
// Параметры:
// 	Форма               - ФормаКлиентскогоПриложения - форма-потребитель интеграции
// 	ПараметрыИнтеграции - См. ПараметрыИнтеграцииДляДокументаОснования
// 	ГруппаИнтеграции    - ГруппаФормы      - группа, в которую будет добавлено поле интеграции
//
Процедура ДобавитьПолеИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, ГруппаИнтеграции) Экспорт
	
	Если ГруппаИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	
	ТекстСостояния = ЭлементыФормы.Добавить(
		ПараметрыИнтеграции.ИмяЭлементаФормы,
		Тип("ПолеФормы"),
		ГруппаИнтеграции);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыИнтеграции.Заголовок) Тогда
		ТекстСостояния.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		ТекстСостояния.Заголовок = ПараметрыИнтеграции.Заголовок;
	КонецЕсли;
	
	ТекстСостояния.Вид = ВидПоляФормы.ПолеНадписи;
	ТекстСостояния.АвтоМаксимальнаяШирина = Ложь;
	ТекстСостояния.ПутьКДанным = ПараметрыИнтеграции.ИмяРеквизитаФормы;
	
КонецПроцедуры

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов ГосИС
//   в прикладные формы конфигурации - потребителя библиотеки ГосИС.
//   Содержит настройки встраивания 1 реквизита формы в связке с 1 элементом.
//
// Возвращаемое значение:
//  Структура - значения, используемые для интеграции форматированной строки в прикладной документ:
//   * ГиперссылкаВДокументОснование - Неопределено - признак настройки интеграции гиперссылки в документ-основание
//   * Ключ                       - Строка - ключ настроек интеграции
//   * ИмяЭлементаФормы           - Строка - имя элемента для размещения на форме
//   * ИмяРодительскойГруппыФормы - Строка - имя группы для размещения на форме (для унификации она всегда создается)
//   * РазмещениеВ                - Строка - имя группы/страницы формы где будет размещаться создаваемая группа
//   * РазмещениеПеред            - Строка - имя элемента формы перед которым будет размещаться создаваемая группа
//   * ИмяРеквизитаФормы          - Строка - имя реквизита формы, содержащего форматированную строку (для создания)
//   * Заголовок                  - Строка - заголовок создаваемого реквизита (пустой = не отображать).
//
Функция ПараметрыИнтеграцииДляДокументаОснования() Экспорт
	
	ПараметрыНадписи = Новый Структура();
	ПараметрыНадписи.Вставить("ГиперссылкаВДокументОснование", Неопределено);
	ПараметрыНадписи.Вставить("Ключ",                       "ЗаполнениеТекстаДокументаГосИС");
	ПараметрыНадписи.Вставить("ИмяЭлементаФормы",           "");
	ПараметрыНадписи.Вставить("ИмяРодительскойГруппыФормы", "ГруппаСостояниеГосИС");
	ПараметрыНадписи.Вставить("РазмещениеВ",                "");
	ПараметрыНадписи.Вставить("РазмещениеПеред",            "");
	ПараметрыНадписи.Вставить("ИмяРеквизитаФормы",          "");
	ПараметрыНадписи.Вставить("Заголовок",                  "");
	
	Возврат ПараметрыНадписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления) Экспорт
	
	ТекстНадписиОбщий = РегистрыСведений.СтатусыОформленияКРасчетуИС.ТекстНадписиВОбъекте(Ссылка);
	Если ЗначениеЗаполнено(ТекстНадписиОбщий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры = ПараметрыИнтеграцииГосИС.Получить("ИС.ДокументОснование");
	РеквизитыФормыСтатусовОформления.Вставить(Параметры.ИмяРеквизитаФормы, ТекстНадписиОбщий);
	
	Если ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЕГАИС");
		Модуль.ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормВЕТИС");
		Модуль.ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
		Модуль.ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормЗЕРНО");
		Модуль.ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СобытияФормСАТУРН");
		Модуль.ОбновитьСтатусыОформления(Ссылка, ПараметрыИнтеграцииГосИС, РеквизитыФормыСтатусовОформления);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов ГосИС
// в прикладные формы конфигурации - потребителя библиотеки ГосИС.
// Содержит общие настройки встраивания подсистемы.
// 
// Параметры:
//  ИмяМодуляЗаполнения - Строка - модуль в котором размещаются действия по заполнению реквизитов ГосИС при открытии формы
// 
// Возвращаемое значение:
//  Структура -- значения, используемые для интеграции подсистемы в прикладную форму::
// * МодульЗаполнения - Строка - модуль в котором размещаются действия по заполнению реквизитов ГосИС при открытии формы
// * ИмяРеквизитаФормыОбъект - Строка - имя реквизита формы, содержащего связанный объект.
Функция ОбщиеПараметрыИнтеграции(ИмяМодуляЗаполнения = "") Экспорт
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("МодульЗаполнения",        ИмяМодуляЗаполнения);
	ОбщиеПараметры.Вставить("ИмяРеквизитаФормыОбъект", "Объект");
	Возврат ОбщиеПараметры;
	
КонецФункции

//Добавляет в элементы формы-потребителя группу и элемент для взаимодействия со связанными библиотечными объектами ГосИС
//
//Параметры:
//   Форма     - ФормаКлиентскогоПриложения - форма-потребитель интеграции
//   Настройки - Структура        - настройки расположения и интерфейса элементов интеграции в прикладной форме
//     (См. ПараметрыИнтеграцииДляДокументаОснования).
//   СоздаватьГруппу - Булево - создавать группу для встраивания строки интеграции (Ложь - при отсутствии группы элемент
//      не будет добавлен).
//
Процедура ВстроитьСтрокуИнтеграцииВДокументОснованиеПоПараметрам(Форма, Настройки, СоздаватьГруппу = Истина) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Настройки);
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИнтеграцииГосИС = ДобавитьПолучитьГруппуИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, СоздаватьГруппу);
	
	ДобавитьПолеИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, ГруппаИнтеграцииГосИС);
	
КонецПроцедуры

#Область УсловноеОформление

#Область СопоставлениеНоменклатурыИКлассификатораСервиса

// Условное оформление поля "Номенклатура" для отображения сопоставленных позиций
// 
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Целевая форма
//  ИмяЭлемента    - Строка                     - Оформляемый реквизит формы
//  ИмяТЧ          - Строка                     - Имя табличной части объекта формы
//  Обязательность - Булево                     - Обязательность указания номенклатуры (цвет оформления)
Процедура УстановитьУсловноеОформлениеПоляНоменклатура(
	Форма, Знач ИмяЭлемента = "ТоварыНоменклатура", Знач ИмяТЧ = "Товары", Знач Обязательность = Истина) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеНоменклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеНоменклатура"));
	Если Обязательность Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Иначе
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	КонецЕсли;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Условное оформление поля "Характеристика" для отображения сопоставленных позиций
//   * Применять после переопределяемого условного оформления характеристики, чтобы "перетереть" поведение оформления
//   строки, в которой характеристика не используется
// 
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - Целевая форма
//  ИмяЭлемента    - Строка                     - Оформляемый реквизит формы
//  ИмяТЧ          - Строка                     - Имя табличной части объекта формы
//  Обязательность - Булево                     - Обязательность указания номенклатуры (цвет оформления)
Процедура УстановитьУсловноеОформлениеПоляХарактеристика(
	Форма, ИмяЭлемента = "ТоварыХарактеристика", ИмяТЧ = "Товары", Обязательность = Истина) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеХарактеристика"));
	Если Обязательность Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Иначе
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	КонецЕсли;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформлениеПоляВводаПоТабличному

Процедура ПрименитьУсловноеОформлениеКПолю(Форма, ИмяПоля) Экспорт
	
	ЗначенияОформления = Новый Соответствие;
	Для Каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
		// Найдем условное оформление поля 
		ЭтоПодходящийЭлементУправления = Ложь;
		Для Каждого Поле Из ЭлементОформления.Поля.Элементы Цикл
			Если Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				ЭтоПодходящийЭлементУправления = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтоПодходящийЭлементУправления Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеОтбораВыполнено = ПроверитьУсловиеОтбора(Форма, ЭлементОформления);
		
		Для Каждого Оформление Из ЭлементОформления.Оформление.Элементы Цикл
			Если Оформление.Использование Тогда
				Если ЗначенияОформления.Получить(""+Оформление.Параметр) = Неопределено Тогда
					ЗначенияОформления.Вставить(""+Оформление.Параметр);
				КонецЕсли;
				Если УсловиеОтбораВыполнено Тогда
					ЗначенияОформления.Вставить(""+Оформление.Параметр, Оформление.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	УстановитьУсловноеОформлениеВНетабличноеПоле(Форма.Элементы[ИмяПоля], ЗначенияОформления);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

Процедура ПоляСоставногоТипаИнициализация(Форма, ИменаЭлементов) Экспорт
	
	Кэш = Новый Соответствие; 
	
	Если РеквизитПоИмени(Форма, "ПоляСоставногоТипа",, Кэш) = Неопределено Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоляСоставногоТипа", Новый ОписаниеТипов));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Если ТипЗнч(Форма.ПоляСоставногоТипа) <> Тип("Структура") Тогда
		
		Форма.ПоляСоставногоТипа = Новый Структура;
		Форма.ПоляСоставногоТипа.Вставить("Поля", Новый Структура);
		
		Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
			Массив = ИменаЭлементов;
		Иначе
			Массив = СтрРазделить(ИменаЭлементов, ",");
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		
		Для Каждого ИмяЭлемента Из Массив Цикл
			
			ИмяЭлемента = СокрЛП(ИмяЭлемента);
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитЭлемента = РеквизитПоИмени(Форма, ЭлементФормы.ПутьКДанным,,Кэш);
			Если РеквизитЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Врег(Прав(РеквизитЭлемента.Имя, 7)) <> "СТРОКОЙ" Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитИмя = Лев(РеквизитЭлемента.Имя, СтрДлина(РеквизитЭлемента.Имя) - 7);
			
			Реквизит = РеквизитПоИмени(Форма, РеквизитЭлемента.Путь, РеквизитИмя, Кэш);
			Если Реквизит = Неопределено
				И РеквизитЭлемента.Путь = "" Тогда
				Реквизит = РеквизитПоИмени(Форма, "Объект", РеквизитИмя, Кэш);
			КонецЕсли;
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТипов, Реквизит.ТипЗначения.Типы(), Истина);
			
			ДанныеПоля = Новый Структура;
			ДанныеПоля.Вставить("ПредставлениеРеквизитИмя",  РеквизитЭлемента.Имя);
			ДанныеПоля.Вставить("ПредставлениеРеквизитПуть", РеквизитЭлемента.Путь);
			ДанныеПоля.Вставить("РеквизитИмя",               Реквизит.Имя);
			ДанныеПоля.Вставить("РеквизитПуть",              Реквизит.Путь);
			ДанныеПоля.Вставить("РеквизитТип",               Реквизит.ТипЗначения);
			ДанныеПоля.Вставить("ИмяТаблицыФормы",           ИмяТаблицыФормы(ЭлементФормы));
			Форма.ПоляСоставногоТипа.Поля.Вставить(ИмяЭлемента, ДанныеПоля);
		КонецЦикла;
		
		Форма.ПоляСоставногоТипа.Вставить("ВсеТипы", Новый ОписаниеТипов(МассивТипов));
		
	КонецЕсли;
	
	ПоляСоставногоТипаОбновитьПредставление(Форма);
	
КонецПроцедуры

Процедура ПоляСоставногоТипаОбновитьПредставление(Форма) Экспорт
	
	Если Форма.ПоляСоставногоТипа.Поля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Таблица.Колонки.Добавить("Ссылка", Форма.ПоляСоставногоТипа.ВсеТипы);
	Таблица.Колонки.Добавить("ПредставлениеПуть");
	Таблица.Колонки.Добавить("ПредставлениеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для Каждого КлючИЗначение Из Форма.ПоляСоставногоТипа.Поля Цикл
		ДанныеПоля = КлючИЗначение.Значение;
		ПутьКРеквизиту = ИнтеграцияИСКлиентСервер.ПутьКДаннымИзСтроки(Форма, ДанныеПоля.РеквизитПуть);
		Если ДанныеПоля.ИмяТаблицыФормы <> "" Тогда
			Для Каждого Строка Из ПутьКРеквизиту Цикл
				Если ЗначениеЗаполнено(Строка[ДанныеПоля.РеквизитИмя]) Тогда
					СтрокаТаблицы = Таблица.Добавить();
					СтрокаТаблицы.ИндексСтроки      = Таблица.Индекс(СтрокаТаблицы);
					СтрокаТаблицы.Ссылка            = Строка[ДанныеПоля.РеквизитИмя];
					СтрокаТаблицы.ПредставлениеПуть = Строка;
					СтрокаТаблицы.ПредставлениеИмя  = ДанныеПоля.ПредставлениеРеквизитИмя;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(ПутьКРеквизиту[ДанныеПоля.РеквизитИмя]) Тогда
				ПутьКПредставлению = ИнтеграцияИСКлиентСервер.ПутьКДаннымИзСтроки(Форма, ДанныеПоля.ПредставлениеРеквизитПуть);
				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.ИндексСтроки      = Таблица.Индекс(СтрокаТаблицы);
				СтрокаТаблицы.Ссылка            = ПутьКРеквизиту[ДанныеПоля.РеквизитИмя];
				СтрокаТаблицы.ПредставлениеПуть = ПутьКПредставлению;
				СтрокаТаблицы.ПредставлениеИмя  = ДанныеПоля.ПредставлениеРеквизитИмя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Таблица.Скопировать(, "ИндексСтроки,Ссылка"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ИндексСтроки КАК ИндексСтроки,
	|	Таблица.Ссылка       КАК Ссылка
	|ПОМЕСТИТЬ Таблица
	|ИЗ &Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	Таблица.ИндексСтроки          КАК ИндексСтроки,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление
	|ИЗ Таблица КАК Таблица";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Таблица[Выборка.ИндексСтроки];
		СтрокаТаблицы.ПредставлениеПуть[СтрокаТаблицы.ПредставлениеИмя] = Выборка.Представление;
	КонецЦикла;
	
КонецПроцедуры

Функция СписокАвтоподбораПолеСоставногоТипа(ОписаниеТипов, ТекстДляАвтоПодбора,
	ДобавлятьСлужебныеЭлементы = Истина, МинимальнаяДлинаСтрокиПоиска = 1) Экспорт
	
	СписокАвтоподбора = Новый СписокЗначений;
	
	ОписаниеДоступныхТипов = ДоступныеТипыАвтоподбора(ОписаниеТипов);
	
	Если ОписаниеДоступныхТипов.Типы().Количество() = 0 Тогда
		Возврат СписокАвтоподбора;
	КонецЕсли;
	
	ОписаниеМетаданных = Неопределено;
	
	Если СтрДлина(ТекстДляАвтоПодбора) >= МинимальнаяДлинаСтрокиПоиска Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ТекстДляАвтоПодбора+"%");
		Запрос.Текст = СтрШаблон(
		"%1
		|;
		|%2",
		ТекстЗапросаСпискаАвтоподбораПоляСоставногоТипа(ОписаниеДоступныхТипов, ПустаяСтрока(ТекстДляАвтоПодбора), "ТаблицаАвтоподбора"),
		"ВЫБРАТЬ
		|	ТаблицаАвтоподбора.Ссылка КАК Ссылка,
		|	ТаблицаАвтоподбора.Представление КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаАвтоподбора.Ссылка) КАК ПредставлениеСсылки
		|ИЗ
		|	ТаблицаАвтоподбора КАК ТаблицаАвтоподбора");
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПодстрокаПоиска = НРег(ТекстДляАвтоПодбора);
		ЦветТекстаНеТребуетВнимания = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
		ОписаниеМетаданных = ОписаниеМетаданныхПоОписаниюТипов(ОписаниеДоступныхТипов);
		
		Пока Выборка.Следующий() Цикл
			Данные = Новый Структура;
			Данные.Вставить("Ссылка",        Выборка.Ссылка);
			Данные.Вставить("Представление", Выборка.ПредставлениеСсылки);
			
			ДанныеОписания = ОписаниеМетаданных.Получить(ТипЗнч(Данные.Ссылка));
			Если ДанныеОписания = Неопределено Тогда
				ПредставлениеТипа = "";
			ИначеЕсли Не ПустаяСтрока(ДанныеОписания.ПредставлениеОбъекта) Тогда
				ПредставлениеТипа = ДанныеОписания.ПредставлениеОбъекта;
			Иначе
				ПредставлениеТипа = ДанныеОписания.Представление;
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			Если ЗначениеЗаполнено(Выборка.Представление) Тогда
				ФорматироватьСтрокуДляСпискаВыбора(Выборка.Представление, ПодстрокаПоиска, МассивСтрок);
			Иначе
				МассивСтрок.Добавить(НСтр("ru = '<...>'"));
			КонецЕсли;
			
			Если Не ПустаяСтрока(ПредставлениеТипа) Тогда
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(ПредставлениеТипа,, ЦветТекстаНеТребуетВнимания));
			КонецЕсли;
			
			СписокАвтоподбора.Добавить(Данные, Новый ФорматированнаяСтрока(МассивСтрок));
		КонецЦикла;
	
		Если ДобавлятьСлужебныеЭлементы И СписокАвтоподбора.Количество() = 0 Тогда
			Данные = Новый Структура;
			Данные.Вставить("Действие", "Очистить");
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить("""");
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(ТекстДляАвтоПодбора, Новый Шрифт(,, Истина)));
			МассивСтрок.Добавить(""" нет в списке");
			
			СписокАвтоподбора.Добавить(Данные, Новый ФорматированнаяСтрока(МассивСтрок));
		КонецЕсли;
		
	КонецЕсли;
		
	Если ДобавлятьСлужебныеЭлементы Тогда
		
		Если ОписаниеМетаданных = Неопределено Тогда
			ОписаниеМетаданных = ОписаниеМетаданныхПоОписаниюТипов(ОписаниеДоступныхТипов);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ОписаниеМетаданных Цикл
			Данные = КлючИЗначение.Значение;
			Данные.Вставить("Действие", "ОткрытьФорму");
			Данные.Вставить("ИмяФормы", "ФормаВыбора");
			СписокАвтоподбора.Добавить(Данные,
				Новый ФорматированнаяСтрока(
					СтрШаблон(НСтр("ru = 'Показать ""%1""'"),
					Данные.Представление),,,,
					"Показать"));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокАвтоподбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ГиперссылкиВСвязанныхФормахОбъектов

// Модифицирует прикладные формы: добавляет необходимые реквизиты, элементы, команды ГосИС
//   Требуется выполнить до прочей работы с ГосИС в прикладных формах.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - модифицируемая форма
//
Процедура МодификацияФормы(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	МодулиМодификацииФормыГосИС = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	ПриОпределенииПараметровИнтеграцииФормы(Форма, МодулиМодификацииФормыГосИС);
	
	ПараметрыИнтеграцииГосИС = Новый Соответствие;
	
	Если МодулиМодификацииФормыГосИС.Количество() Тогда
		
		Реквизит = Новый РеквизитФормы("ПараметрыИнтеграцииГосИС", Новый ОписаниеТипов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Для Каждого ИмяМодуля Из МодулиМодификацииФормыГосИС Цикл
			
			МодульМодификации = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			МодульМодификации.МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
			
		КонецЦикла;
		
		МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
		
		Для Каждого ИмяМодуля Из МодулиМодификацииФормыГосИС Цикл
			
			МодульМодификации = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			МодульМодификации.МодификацияЭлементовФормы(Форма);
			
		КонецЦикла;
		
		МодификацияЭлементовФормы(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииПараметровИнтеграцииФормы(Форма, МодулиМодификацииФормыГосИС)
	
	Если Форма.ИмяФормы = "Документ.ОтчетОПроизводствеЕГАИС.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ОтчетОбИмпортеЕГАИС.Форма.ФормаДокумента" Тогда
		МодулиМодификацииФормыГосИС.Добавить("СобытияФормИСМП");
	КонецЕсли;

	СобытияФормИСПереопределяемый.ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиМодификацииФормыГосИС);
	
КонецПроцедуры

Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты)
	
	ОбщиеНастройки = ОбщиеПараметрыИнтеграции();
	ПараметрыИнтеграции.Вставить("ИС", ОбщиеНастройки);
	
	ПараметрыНадписи = ПараметрыИнтеграцииДляДокументаОснования();
	ПараметрыНадписи.Вставить("Ключ",              "ЗаполнениеТекстаДокументаИС");
	ПараметрыНадписи.Вставить("ИмяЭлементаФормы",  "ТекстДокументаИС");
	ПараметрыНадписи.Вставить("ИмяРеквизитаФормы", "ТекстДокументаИС");
	
	ПараметрыИнтеграции.Вставить("ИС.ДокументОснование", ПараметрыНадписи);
	ПараметрыИнтеграции.Вставить("ОбработчикОжиданияРасчетСтатусаОформления", ИнтеграцияИС.РасчетСтатусовОформленияВыполняетсяВнеТранзакцииЗаписи());
	Реквизит = Новый РеквизитФормы(
		ПараметрыНадписи.ИмяРеквизитаФормы,
		Новый ОписаниеТипов("ФорматированнаяСтрока"),,
		ПараметрыНадписи.Заголовок);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
КонецПроцедуры

Процедура МодификацияЭлементовФормы(Форма)
	
	Если Не ИнтеграцияИС.РасчетСтатусовОформленияВыполняетсяВнеТранзакцииЗаписи() Тогда
		Возврат;
	КонецЕсли;
	ВстроитьСтрокуИнтеграцииВДокументОснованиеПоПараметрам(
		Форма, "ИС.ДокументОснование", Ложь);
	
КонецПроцедуры

// Заполнение созданных реквизитов ГосИС 
//   Требуется выполнить при открытии формы после создания реквизитов, после записи объекта (перезаполнение).
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - заполняемая форма.
//
Процедура ЗаполнениеРеквизитовГосИС(Форма)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеРеквизитовФормы(Форма);
	
	Для Каждого КлючИЗначение Из Форма.ПараметрыИнтеграцииГосИС Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Если КлючИЗначение.Значение.Свойство("МодульЗаполнения") Тогда
				ИмяМодуляЗаполнения = КлючИЗначение.Значение.МодульЗаполнения;
				Если ЗначениеЗаполнено(ИмяМодуляЗаполнения) Тогда
					МодульЗаполнения = ОбщегоНазначения.ОбщийМодуль(ИмяМодуляЗаполнения);
					МодульЗаполнения.ЗаполнениеРеквизитовФормы(Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение реквизитов формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ЗаполнениеРеквизитовФормы(Форма)
	
	ИмяРеквизитаФормыОбъект = Форма.ПараметрыИнтеграцииГосИС.Получить("ИС").ИмяРеквизитаФормыОбъект;
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИС.ДокументОснование");
	Если ПараметрыИнтеграции <> Неопределено
			И ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяРеквизитаФормы)
			И Форма.Элементы.Найти(ПараметрыИнтеграции.ИмяЭлементаФормы) <> Неопределено Тогда
		ТекстНадписи = РегистрыСведений.СтатусыОформленияКРасчетуИС.ТекстНадписиВОбъекте(Форма[ИмяРеквизитаФормыОбъект].Ссылка);
		Форма[ПараметрыИнтеграции.ИмяРеквизитаФормы] = ТекстНадписи;
		Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормы].Видимость = ЗначениеЗаполнено(ТекстНадписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьФоновоеЗаданиеРасчетаСтатусовОформления(Форма)
	
	ИмяРеквизитаФормыОбъект = Форма.ПараметрыИнтеграцииГосИС.Получить("ИС").ИмяРеквизитаФормыОбъект;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Ссылка", Форма[ИмяРеквизитаФормыОбъект].Ссылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет статусов оформления документа-основания.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ДлительныеОперации.ВыполнитьВФоне("РасчетСтатусовОформленияИС.РасчетСтатусовОформленияПослеЗаписиДокумента",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

Функция ОписаниеМетаданныхПоОписаниюТипов(ОписаниеТипов) Экспорт
	
	Результат = Новый Соответствие;
	
	Типы = ОписаниеТипов.Типы();
	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено Тогда
			Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
				Данные = Новый Структура;
				Данные.Вставить("Вид",                      "Справочник");
				Данные.Вставить("Имя",                      ОбъектМетаданных.Имя);
				Данные.Вставить("Представление",            ОбъектМетаданных.Представление());
				Данные.Вставить("ПредставлениеОбъекта",     ОбъектМетаданных.ПредставлениеОбъекта);
				Данные.Вставить("ПредставлениеСписка",      ОбъектМетаданных.ПредставлениеСписка);
				Результат.Вставить(Тип, Данные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСпискаАвтоподбораПоляСоставногоТипа(ОписаниеТипов, ПоискТолькоПоНаименованию = Истина, ИмяВременнойТаблицы = "") Экспорт
	
	Если ИмяВременнойТаблицы = "" Тогда
		ТекстПоместить = "";
	Иначе
		ТекстПоместить = СтрШаблон("ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Представление КАК Представление
	|%1
	|ИЗ
	|	(",
	ТекстПоместить);
	
	ТекстПодзапроса =
	"
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	ТаблицаСправочника.Ссылка КАК Ссылка,
	|	ТаблицаСправочника.%2%3 КАК Представление
	|ИЗ
	|	Справочник.%1 КАК ТаблицаСправочника
	|ГДЕ
	|	НЕ ТаблицаСправочника.ПометкаУдаления
	|	%4
	|	И ТаблицаСправочника.%2 ПОДОБНО &СтрокаПоиска";
	
	ТекстДополнения = " + "" ("" + ТаблицаСправочника.Наименование + "")""";
	
	ТекстРазделителя = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ВложенныйЗапросПустой = Истина;
	ИерархияГруппИЭлементов = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	Типы = ОписаниеТипов.Типы();
	Для Каждого Тип Из Типы Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено
			Или Не Метаданные.Справочники.Содержит(ОбъектМетаданных)
			Или ОбъектМетаданных.ДлинаНаименования = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектМетаданных.Иерархический
			И ОбъектМетаданных.ВидИерархии = ИерархияГруппИЭлементов Тогда
			УсловиеОтбора = "И НЕ ТаблицаСправочника.ЭтоГруппа";
		Иначе
			УсловиеОтбора = "";
		КонецЕсли;
		
		МассивИменПолейПоиска = Новый Массив;
		
		Если Не ПоискТолькоПоНаименованию Тогда
			Для Каждого Поле Из ОбъектМетаданных.ВводПоСтроке Цикл
				ИмяПоля = Поле.Имя;
				Если ИмяПоля = "Код" Или ИмяПоля = "Наименование" Тогда
					Продолжить;
				КонецЕсли;
				Если ОбъектМетаданных.Реквизиты[ИмяПоля].Тип.СодержитТип(Тип("Строка")) Тогда
					МассивИменПолейПоиска.Добавить(ИмяПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВложенныйЗапросПустой Тогда
			ВложенныйЗапросПустой = Ложь;
		Иначе
			ТекстЗапроса = ТекстЗапроса + ТекстРазделителя;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстПодзапроса, ОбъектМетаданных.Имя, "Наименование", "", УсловиеОтбора);
		
		Для Каждого ИмяПоля Из МассивИменПолейПоиска Цикл
			ТекстЗапроса = ТекстЗапроса + ТекстРазделителя;
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстПодзапроса, ОбъектМетаданных.Имя, ИмяПоля, ТекстДополнения, УсловиеОтбора);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВложенныйЗапросПустой Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	"""" КАК Представление";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Представление) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ФорматироватьСтрокуДляСпискаВыбора(Строка, ПодстрокаПоиска, МассивСтрок, Знач ЦветНайденногоТекста = Неопределено) Экспорт
	
	Если ПодстрокаПоиска = "" Тогда
		МассивСтрок.Добавить(Строка);
		Возврат Ложь;
	КонецЕсли;		
	
	НачалоПодстроки = СтрНайти(НРег(Строка), ПодстрокаПоиска);
	Если НачалоПодстроки = 0 Тогда
		МассивСтрок.Добавить(Строка);
		Возврат Ложь;
	КонецЕсли;		
	
	ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
	
	Если НачалоПодстроки > 1 Тогда
		МассивСтрок.Добавить(Лев(Строка, НачалоПодстроки - 1));
	КонецЕсли;
	
	Если ЦветНайденногоТекста = Неопределено Тогда
		ЦветНайденногоТекста = ЦветаСтиля.ЦветУспешнойОперацииГосИС;
	КонецЕсли;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			Сред(Строка, НачалоПодстроки, ДлинаПодстроки), Новый Шрифт(,,Истина), ЦветНайденногоТекста));
	
	ОкончаниеПодстроки = НачалоПодстроки + ДлинаПодстроки - 1;
	Если ОкончаниеПодстроки < СтрДлина(Строка) Тогда
		МассивСтрок.Добавить(Сред(Строка, ОкончаниеПодстроки + 1));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДоступныеТипыАвтоподбора(ОписаниеТипов)
	
	ИсключаемыеТипы = Новый Массив;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено
			Или Не Метаданные.Справочники.Содержит(ОбъектМетаданных)
			Или Не ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			ИсключаемыеТипы.Добавить(Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсключаемыеТипы.Количество() = 0 Тогда
		Возврат ОписаниеТипов;
	Иначе
		Возврат Новый ОписаниеТипов(ОписаниеТипов,, ИсключаемыеТипы);
	КонецЕсли;
	
КонецФункции

Функция РеквизитПоИмени(Форма, ПутьКДанным, ИмяРеквизита = "", Кэш)
	
	Если ИмяРеквизита = "" Тогда
		ПозицияРазделителя = СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца);
		Если ПозицияРазделителя = 0 Тогда
			ИмяРеквизита = ПутьКДанным;
			ПутьКРеквизиту = "";
		Иначе
			ИмяРеквизита = Сред(ПутьКДанным, ПозицияРазделителя + 1);
			ПутьКРеквизиту = Лев(ПутьКДанным, ПозицияРазделителя - 1);
		КонецЕсли;
	Иначе
		ПутьКРеквизиту = ПутьКДанным;
	КонецЕсли;
	
	Реквизиты = Кэш[ПутьКРеквизиту];
	Если Реквизиты = Неопределено Тогда
		Если ПутьКРеквизиту = "Объект" Тогда
			Реквизиты = Кэш[""];
			Если Реквизиты = Неопределено Тогда
				Реквизиты = Форма.ПолучитьРеквизиты();
				Кэш.Вставить("", Реквизиты);
			КонецЕсли;
			Реквизит = НайтиРеквизитПоИмени(Реквизиты, ПутьКРеквизиту);
			Если Реквизит = Неопределено Тогда
				ПутьКРеквизиту = "Запись";
				Реквизит = НайтиРеквизитПоИмени(Реквизиты, ПутьКРеквизиту);
				Если Реквизит = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Реквизиты = Форма.ПолучитьРеквизиты(ПутьКРеквизиту);
		Кэш.Вставить(ПутьКРеквизиту, Реквизиты);
	КонецЕсли;
	
	Возврат НайтиРеквизитПоИмени(Реквизиты, ИмяРеквизита);
	
КонецФункции

Функция НайтиРеквизитПоИмени(Реквизиты, ИмяРеквизита)
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Реквизит;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяТаблицыФормы(Элемент)
	
	Тип = ТипЗнч(Элемент.Родитель);
	
	Если Тип = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат Элемент.Родитель.Имя;
	Иначе
		Возврат ИмяТаблицыФормы(Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область УсловноеОформлениеЭлементовШапкиСлужебный

Функция ПроверитьУсловиеОтбора(Форма, ЭлементОформления)
	
	Результат = Истина;
	
	Для Каждого ЭлементОтбора Из ЭлементОформления.Отбор.Элементы Цикл
		ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		Если ТипЗнч(ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ЛевоеЗначение = ПреобразоватьПолеВЗначение(Форма, ""+ЛевоеЗначение);
		КонецЕсли;
		Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ПравоеЗначение = ПреобразоватьПолеВЗначение(Форма, ""+ПравоеЗначение);
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			Результат = Результат И ЛевоеЗначение > ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Результат = Результат И ЛевоеЗначение >= ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			Результат = Результат И ЛевоеЗначение < ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Результат = Результат И ЛевоеЗначение <= ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Результат = Результат И ЛевоеЗначение = ПравоеЗначение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			Результат = Результат И ЛевоеЗначение <> ПравоеЗначение;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
			Результат = Результат И ЗначениеЗаполнено(ЛевоеЗначение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Результат = Результат И Не ЗначениеЗаполнено(ЛевоеЗначение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Результат = Результат И ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение)<>Неопределено;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			Результат = Результат И ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение)=Неопределено;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
			Результат = Результат И СтрНачинаетсяС(ЛевоеЗначение, ПравоеЗначение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
			Результат = Результат И Не СтрНачинаетсяС(ЛевоеЗначение, ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеВНетабличноеПоле(ЭлементФормы, ЗначенияОформления)
	
	Для Каждого КлючИЗначение Из ЗначенияОформления Цикл
		Если КлючИЗначение.Ключ = "ЦветТекста" Тогда
			Если КлючИЗначение.Значение = Неопределено Тогда
				ЭлементФормы[КлючИЗначение.Ключ] = ЦветаСтиля.ЦветТекстаПоля;
			Иначе
				ЭлементФормы[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		ИначеЕсли КлючИЗначение.Ключ = "ЦветФона" Тогда
			Если КлючИЗначение.Значение = Неопределено Тогда
				ЭлементФормы[КлючИЗначение.Ключ] = ЦветаСтиля.ЦветФонаПоля;
			Иначе
				ЭлементФормы[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		ИначеЕсли КлючИЗначение.Ключ = "Шрифт" Тогда
			Если КлючИЗначение.Значение = Неопределено Тогда
				ЭлементФормы[КлючИЗначение.Ключ] = ШрифтыСтиля.ОбычныйШрифтТекста;
			Иначе
				ЭлементФормы[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		ИначеЕсли КлючИЗначение.Ключ = "ТолькоПросмотр" Тогда
			Если КлючИЗначение.Значение = Неопределено Тогда
				ЭлементФормы[КлючИЗначение.Ключ] = Ложь;
			Иначе
				ЭлементФормы[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		ИначеЕсли КлючИЗначение.Ключ = "ОтметкаНезаполненного" Тогда
			ЭлементФормы.АвтоОтметкаНезаполненного = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "Текст" Тогда
			ЭлементФормы.ПодсказкаВвода = КлючИЗначение.Значение;
		ИначеЕсли КлючИЗначение.Ключ = "Видимость"
				Или КлючИЗначение.Ключ = "Доступность" Тогда
			Если КлючИЗначение.Значение = Неопределено Тогда
				ЭлементФормы[КлючИЗначение.Ключ] = Истина;
			Иначе
				ЭлементФормы[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ПреобразоватьПолеВЗначение(Форма,ПолеКомпоновкиДанныеСтрокой)
	
	ЧастиПоляКомпоновки = СтрРазделить(ПолеКомпоновкиДанныеСтрокой, ".");
	Если ЧастиПоляКомпоновки.Количество() = 1 Тогда
		Возврат Форма[ПолеКомпоновкиДанныеСтрокой];
	ИначеЕсли ЧастиПоляКомпоновки.Количество() = 3 Тогда
		Возврат Форма[ЧастиПоляКомпоновки[0]][ЧастиПоляКомпоновки[1]][0][ЧастиПоляКомпоновки[2]];
	Иначе 
		Попытка
			//таблица формы
			Возврат Форма[ЧастиПоляКомпоновки[0]][0][ЧастиПоляКомпоновки[1]];
		Исключение
			//реквизит объекта
			Возврат Форма[ЧастиПоляКомпоновки[0]][ЧастиПоляКомпоновки[1]];
		КонецПопытки;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

