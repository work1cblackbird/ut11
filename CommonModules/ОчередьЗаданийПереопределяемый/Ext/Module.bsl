///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список шаблонов заданий очереди.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//  ШаблоныЗаданий - Массив Из Строка - В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	// ИнтеграцияС1СДокументооборотом
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными.Имя);
	// Конец ИнтеграцияС1СДокументооборотом
	
	//БПО
	ИнтеграцияПодсистемБПО.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	//Конец БПО
	
	//++ НЕ ГОСИС
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ABCКлассификацияНоменклатуры.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ABCКлассификацияПартнеров.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.XYZКлассификацияНоменклатуры.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.XYZКлассификацияПартнеров.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеДанныхОДоступностиТоваровДляВнешнихПользователей.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеНоменклатурыПродаваемойСовместно.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.КорректировкаСтрокЗаказовМерныхТоваров.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.АктуализацияПотребностейПоГраницеОбеспечения.Имя);
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ПроведениеПоРасчетамСПартнерами.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.РасчетКурсовыхРазниц.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.РасчетИсточниковДанныхВариантовАнализа.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.РасчетРекомендацийПоддержанияЗапасов.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.РасчетСебестоимости.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.УдалениеВзаимодействийПоРассылкамИОповещениям.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеКодовТоваровПодключаемогоОборудования.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОчисткаСегментов.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ФормированиеСообщенийПоОповещениямКлиентов.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ФормированиеСообщенийПоРассылкамКлиентам.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.СверткаРезервовТоваровОрганизаций.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ВыполнениеОтложенныхЗаданий.Имя);
	
	
	//++ Локализация
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ВыгрузкаДанныхВСервисПрогнозированияПродаж.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхИзСервисаПрогнозированияПродаж.Имя);
	//-- Локализация
	
	ОчередьЗаданийЛокализация.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие из КлючИЗначение:
//    * Ключ - Строка - псевдоним метода, например "ОчиститьОбластьДанных".
//    * Значение - Строка - Имя метода для вызова, например "РаботаВМоделиСервиса.ОчиститьОбластьДанных".
//        В качестве значения можно указать Неопределено, в этом случае считается что имя 
//        совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	//БПО
	ИнтеграцияПодсистемБПО.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	//Конец БПО
	
	//++ НЕ ГОСИС
		
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ФормированиеСегментов.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.АнализДанныхДляОповещенийКлиентам.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.АвтоматическоеНачислениеИСписаниеБонусныхБаллов.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.РасчетПоказателейПрогнозаРасходаУпаковок.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СозданиеЗаданийНаОтбор.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПересчетТоваров.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СверткаРезервовТоваровОрганизаций.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.АктуализацияПотребностейПоГраницеОбеспечения.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы");
	
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СверткаРезервовТоваровОрганизаций.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыполнениеОтложенныхЗаданий.ИмяМетода);
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.УдалениеДублейКлючейРеестраДокументов.ИмяМетода);
	
	УстановкаЦенСервер.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	БонусныеБаллыСервер.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
	//++ Локализация
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыгрузкаДанныхВСервисПрогнозированияПродаж.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхИзСервисаПрогнозированияПродаж.ИмяМетода);
	//-- Локализация
	
	ОчередьЗаданийЛокализация.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	//-- НЕ ГОСИС
	
	// СерверЛояльности
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов.ИмяМетода);
	// Конец СерверЛояльности

КонецПроцедуры

// Заполняет соответствие методов обработчиков ошибок псевдонимам методов, при возникновении
// ошибок в которых они вызываются.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//  ОбработчикиОшибок - Соответствие из КлючИЗначение:
//    * Ключ - Строка - Псевдоним метода, например ОчиститьОбластьДанных.
//    * Значение - Строка - Имя метода - обработчика ошибок, для вызова при возникновении ошибки. 
//        Обработчик ошибок вызывается в случае завершения выполнения исходного задания
//        с ошибкой. Обработчик ошибок вызывается в той же области данных, что и исходное задание.
//        Метод обработчика ошибок считается разрешенным к вызову механизмами очереди.
//        Параметры обработчика ошибок:
//          ПараметрыЗадания - Структура - параметры задания очереди.
//          Параметры
//          НомерПопытки
//          КоличествоПовторовПриАварийномЗавершении
//          ДатаНачалаПоследнегоЗапуска.
//
Процедура ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок) Экспорт
	
КонецПроцедуры

// Формирует таблицу регламентных заданий с признаком использования в модели сервиса.
// @skip-warning ПустойМетод - переопределяемый метод.
// 
// Параметры:
//  ТаблицаИспользования - ТаблицаЗначений - описание:
//	* РегламентноеЗадание - Строка - имя регламентного задания.
//  * Использование - Булево - признак использования.
//
Процедура ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
	
КонецПроцедуры

#КонецОбласти
