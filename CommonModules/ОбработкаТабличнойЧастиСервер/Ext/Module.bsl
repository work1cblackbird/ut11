#Область ПрограммныйИнтерфейс

// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// Параметры:
//  ТекущаяСтрока	  - Структура - данные обрабатываемой строки, содержит в том числе:
//  	* НомерСтроки - Число
//  СтруктураДействий - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия, возможно передавать следующие поля:
//		* ПроверитьХарактеристикуПоВладельцу - СправочникСсылка.ХарактеристикиНоменклатуры
//		* ПроверитьЗаполнитьУпаковкуПоВладельцу - СправочникСсылка.УпаковкиЕдиницыИзмерения
//		* ПересчитатьКоличествоЕдиниц - Неопределено
//		* ПересчитатьКоличествоЕдиницСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковок - Неопределено
//		* ПересчитатьКоличествоУпаковокСуффикс - Строка - Суффикс
//		* ПересчитатьКоличествоУпаковокСуффиксИзОтклонения - Строка - Суффикс
//		* ПересчитатьВесОбъем - Строка - Суффикс
//		* ЗаполнитьЦенуПродажи - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ
//		* ЗаполнитьПомещение - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Номенклатура - СправочникСсылка.Номенклатура - (Необязательный)
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - (Необязательный)
//		* ЗаполнитьПродавца - Структура:
//			** Продавец - СправочникСсылка.Пользователи
//		* ПересчитатьСумму - Строка
//		* ПересчитатьСуммуСУчетомРучнойСкидки - Структура:
//			** Очищать - Булево
//			** ПересчитыватьСуммуРучнойСкидки - Булево
//			** ИмяКоличества - Строка
//		* ПересчитатьСуммуСУчетомАвтоматическойСкидки - Структура:
//			** Очищать - Булево
//		* ПересчитатьЦенуПоСумме - Строка
//		* ПересчитатьЦенуЗаУпаковку - Число
//		* ПересчитатьСуммуНДС - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ
//		* ЗаполнитьСтавкуНДС - Структура:
//			** НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//			** Дата - Дата
//		* ОбработатьШтрихкоды - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
//		* ЗаполнитьНоменклатуруПоНоменклатуреПартнера - Неопределено
//		* ЗаполнитьНоменклатуруПартнераПоНоменклатуре - Неопределено
//		* ЗаполнитьФлагИзлишекПорча - Неопределено
//		* ЗаполнитьФлагРасхождение - Неопределено
//		* ПересчитатьКоличествоУпаковокОтклонение - Неопределено
//		* ОчиститьСуммуВзаиморасчетов - Неопределено
//		* ПересчитатьКоличествоНеОтгружать - Неопределено
//		* ЗаполнитьПризнакАдресногоХранения - Структура:
//			** Склад - СправочникСсылка.Склады
//			** Помещение - СправочникСсылка.СкладскиеПомещения
//			** Дата - Дата
//		* ЗаполнитьСтатьюАналитикуРасходовНоменклатуры - см. ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры.СтруктураДействий
//  КэшированныеЗначения - Структура - Сохраненные значения параметров, используемых при обработке.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = 
			ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	КонецЕсли;
	
	Если Не СтруктураДействий.Свойство("МетодыКВыполнению") Тогда
		СтруктураДействий.Вставить("МетодыКВыполнению", МетодыКВыполнению(СтруктураДействий));
		СтруктураДействий.Вставить("КоличествоДействий", СтруктураДействий.Количество());
	КонецЕсли;
	
	Если СтруктураДействий.КоличествоДействий <> СтруктураДействий.Количество() Тогда
		СтруктураДействий.МетодыКВыполнению			= МетодыКВыполнению(СтруктураДействий);
		СтруктураДействий.КоличествоДействий		= СтруктураДействий.Количество();
	КонецЕсли;
	
	Если Не СтруктураДействий.Свойство("ПрофильИнформационнойБазы") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
			Если МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности()
				И Не МодульРаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
				
				ПрофильИнформационнойБазы = МодульРаботаВБезопасномРежиме.ПрофильБезопасностиИнформационнойБазы();
				Если ЗначениеЗаполнено(ПрофильИнформационнойБазы) Тогда
					 СтруктураДействий.Вставить("ПрофильИнформационнойБазы", ПрофильИнформационнойБазы);
				КонецЕсли;
			Иначе
				СтруктураДействий.Вставить("ПрофильИнформационнойБазы", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Массив();
	Параметры.Добавить(ТекущаяСтрока);
	Параметры.Добавить(СтруктураДействий);
	Параметры.Добавить(КэшированныеЗначения);
	
	Если СтруктураДействий.Свойство("ПрофильИнформационнойБазы")
		И ЗначениеЗаполнено(СтруктураДействий.ПрофильИнформационнойБазы) Тогда
		УстановитьБезопасныйРежим(СтруктураДействий.ПрофильИнформационнойБазы);
		Если БезопасныйРежим() = Истина Тогда
			УстановитьБезопасныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Метод Из СтруктураДействий.МетодыКВыполнению Цикл
		Выполнить Метод + "(Параметры[0], Параметры[1], Параметры[2])";
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку строк табличной части документа в соответствии с операциями, перечисленными в структуре действий.
//
// Параметры:
//	ТЧ - ДанныеФормыКоллекция - таблица товаров документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ОбработатьТЧ(ТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ДействияЗаполнения = Новый Структура;
	ДействияОбработки = Новый Структура;
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ПоддерживаемыеДействияЗаполненияТЧ().Найти(Действие.Ключ) = Неопределено Тогда
			ДействияОбработки.Вставить(Действие.Ключ,Действие.Значение);
		Иначе
			ДействияЗаполнения.Вставить(Действие.Ключ,Действие.Значение);
		КонецЕсли;
		ДополнитьКэшированныеЗначения(ТЧ, Действие, КэшированныеЗначения);
	КонецЦикла;
	Если ДействияЗаполнения.Количество() > 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТЧ,ДействияЗаполнения);
	КонецЕсли;
	Если ДействияОбработки.Количество() > 0 Тогда
		Для Каждого СтрТабл Из ТЧ Цикл
			ОбработатьСтрокуТЧ(СтрТабл, ДействияОбработки, КэшированныеЗначения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Проверяет, что ключ заполнения служебных реквизитов поддерживается
//
// Параметры:
//  КлючДействия - Строка	 - проверяемый ключ.
// 
// Возвращаемое значение:
//  Булево - Ключ заполнения служебных реквизитов поддерживается
Функция КлючЗаполненияСлужебныхРеквизитовПоддерживается(КлючДействия) Экспорт
	Возврат ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, Истина) <> Неопределено;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполненияСервер

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда

		СтруктураРезультата = Справочники.ВариантыКомплектацииНоменклатуры.ПроверитьПринадлежностьВариантаКомплектации(
								ТекущаяСтрока.ВариантКомплектации, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		Если Не СтруктураРезультата.ПринадлежитНоменклатуреХарактеристике Тогда

			ТекущаяСтрока.ВариантКомплектации = СтруктураРезультата.ОсновнойВариантКомплектации;

		КонецЕсли;

	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда 

		ТекущаяСтрока.ВариантКомплектации = Неопределено;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем Характеристика;
	Перем Упаковка;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу       = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);

	Если ПроверитьХарактеристикуПоВладельцу 
		Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);

		Если ПроверитьХарактеристикуПоВладельцу Тогда
			ТекущаяСтрока.Характеристика             = РезультатПроверки.Характеристика;
			ТекущаяСтрока.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		КонецЕсли;
		
		Если ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
			ТекущаяСтрока.Упаковка = РезультатПроверки.Упаковка;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара")
			И ПроверитьЗаполнитьУпаковкуПоВладельцу
			И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
			
				ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ИдентичнаяУпаковка(ТекущаяСтрока.НоменклатураИсходногоКачества, 
																										  ТекущаяСтрока.Номенклатура, 
																										  Упаковка);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара")
			И ЗначениеЗаполнено(Характеристика)
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
			И ТекущаяСтрока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			ТекущаяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ИдентичнаяХарактеристика(
																						ТекущаяСтрока.НоменклатураИсходногоКачества, 
																						ТекущаяСтрока.Номенклатура, 
																						Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено
		 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 100)/100;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 
	
	Перем СтруктураПараметровДействия;
	Перем ВернутьМногооборотнуюТару;
	Перем ТипНоменклатуры;
	
	Если СтруктураДействий.Свойство("СкорректироватьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ИнициализацияВходящегоДокумента И ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметровДействия.Свойство("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		Дата = СтруктураПараметровДействия.Дата;
		Организация = СтруктураПараметровДействия.Организация;
		
		ИмяПоляНоменклатура = "Номенклатура";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураПараметровДействия, "ИмяПоляНоменклатура")
			И ЗначениеЗаполнено(СтруктураПараметровДействия.ИмяПоляНоменклатура) Тогда
			ИмяПоляНоменклатура = СтруктураПараметровДействия.ИмяПоляНоменклатура;
		КонецЕсли;
		
		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ИмяПоляНоменклатура) Тогда
			Номенклатура = ТекущаяСтрока[ИмяПоляНоменклатура];
		КонецЕсли;
		
		Если ВернутьМногооборотнуюТару Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры") Тогда
				ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
			ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
				ТипыНоменклатуры = КэшированныеЗначения.ТипыНоменклатуры; //Соответствие
				ТипНоменклатуры = ТипыНоменклатуры.Получить(Номенклатура);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
			СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
		Иначе

			ПроверятьАктуальность = Истина;
			
			Если ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС")
				И НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС")
				И СтруктураПараметровДействия.ЗаполнениеНаОснованииКопирование = Ложь Тогда
					ПроверятьАктуальность = Ложь;
			КонецЕсли;
			
			Если ПроверятьАктуальность Тогда
				Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
					ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
				КонецЕсли;
				
				АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
				Если АктуальныеСтавкиНДС.Найти(ТекущаяСтрока.СтавкаНДС) <> Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата);

		КонецЕсли;
		
		Если ТекущаяСтрока.СтавкаНДС <> СтавкаНДС тогда
			
			ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
			
			ОбработанныеСтроки = КэшированныеЗначения.ОбработанныеСтроки; //Массив
			ОбработанныеСтроки.Добавить(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия, УказаннаяСтавкаНДС;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("ХозяйственнаяОперация") Тогда
			ХозяйственнаяОперация = СтруктураПараметровДействия.ХозяйственнаяОперация;
		Иначе
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
		КонецЕсли;
		
		ИмяПоляНоменклатура = "Номенклатура";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураПараметровДействия, "ИмяПоляНоменклатура")
			И ЗначениеЗаполнено(СтруктураПараметровДействия.ИмяПоляНоменклатура) Тогда
			ИмяПоляНоменклатура = СтруктураПараметровДействия.ИмяПоляНоменклатура;
		КонецЕсли;
		
		Если ПродажиСервер.ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Тогда
			ТекущаяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
		Иначе
			НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
			Дата = СтруктураПараметровДействия.Дата;
			Организация = СтруктураПараметровДействия.Организация;
			
			Номенклатура = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ИмяПоляНоменклатура) Тогда
				Номенклатура = ТекущаяСтрока[ИмяПоляНоменклатура];
			КонецЕсли;
			
			Если СтруктураПараметровДействия.Свойство("ПоДатеОтгрузки") 
				И СтруктураПараметровДействия.ПоДатеОтгрузки
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки")
				И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) Тогда
				Дата = ТекущаяСтрока.ДатаОтгрузки;
			КонецЕсли;

			СтруктураПараметровДействия.Свойство("УказаннаяСтавкаНДС", УказаннаяСтавкаНДС);
			ТекущаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата, УказаннаяСтавкаНДС);

			Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(УказаннаяСтавкаНДС) Тогда

				Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
					ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
				КонецЕсли;
				АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
				Если АктуальныеСтавкиНДС.Найти(УказаннаяСтавкаНДС) = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ТекущаяСтрока.СтавкаНДС = УказаннаяСтавкаНДС;

			КонецЕсли;

			Если Не ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(УказаннаяСтавкаНДС) Тогда

				Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
					ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
				КонецЕсли;
				АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
				Если АктуальныеСтавкиНДС.Найти(УказаннаяСтавкаНДС) = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ТекущаяСтрока.СтавкаНДС = УказаннаяСтавкаНДС;

			КонецЕсли;

		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССуффикс", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		Дата = СтруктураПараметровДействия.Дата;
		Организация = СтруктураПараметровДействия.Организация;
		
		ИмяПоляНоменклатура = "Номенклатура";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураПараметровДействия, "ИмяПоляНоменклатура")
			И ЗначениеЗаполнено(СтруктураПараметровДействия.ИмяПоляНоменклатура) Тогда
			ИмяПоляНоменклатура = СтруктураПараметровДействия.ИмяПоляНоменклатура;
		КонецЕсли;
		
		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ИмяПоляНоменклатура) Тогда
			Номенклатура = ТекущаяСтрока[ИмяПоляНоменклатура];
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("ПоДатеОтгрузки") 
			И СтруктураПараметровДействия.ПоДатеОтгрузки
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ДатаОтгрузки")
			И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОтгрузки) Тогда
			Дата = ТекущаяСтрока.ДатаОтгрузки;
		КонецЕсли;   
		
		Суффикс = "";
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс) 
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		СтавкаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СтавкаССуффиксом(Суффикс);
		
		ТекущаяСтрока[СтавкаССуффиксом.СтавкаНДС] = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(Номенклатура, НалогообложениеНДС, Организация, Дата);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Погрешность = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность) Тогда
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		СтавкаНДС = Неопределено;
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																		ТекПроцентНДС,
																		СтруктураПараметровДействия.ЦенаВключаетНДС,
																		НалогообложениеНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
	
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		Суффикс = "";
		
		Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
			И Не ЗначениеЗаполнено(Суффикс) Тогда
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		СтавкаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СтавкаССуффиксом(Суффикс);
		
		Если Не (СтруктураПараметровДействия <> Неопределено
				И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			
			СтавкаНДС = ТекущаяСтрока[СтавкаССуффиксом.СтавкаНДС];
			
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			ТекПроцентНДС = Неопределено;
			
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока[СуммаССуффиксом.Сумма],
			ТекПроцентНДС,
			СтруктураПараметровДействия.ЦенаВключаетНДС,
			НалогообложениеНДС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") 
		Или СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда 

		Если Не КэшированныеЗначения.Свойство("ИспользуетсяЦенообразование25") Тогда
			КэшированныеЗначения.Вставить("ИспользуетсяЦенообразование25",
															ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25());
		КонецЕсли;
		
		Если КэшированныеЗначения.ИспользуетсяЦенообразование25 Тогда
			ЗаполнитьУсловияПродажВСтрокеТЧ2_5(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) Тогда

		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА
			|					&ТекстЗапросаКоэффициентУпаковки1
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ВложенныйЗапрос.Цена/ЕстьNULL(ВложенныйЗапрос.КоэффициентУпаковкиСоглашения,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|								/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА
			|					&ТекстЗапросаКоэффициентУпаковки1
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ЦеныНоменклатурыСрезПоследних.Цена/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|									/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена,
			|	ВложенныйЗапрос.СрокПоставки КАК СрокПоставки
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена,
			|СоглашениеТовары.Упаковка             КАК Упаковка,
			|&ТекстЗапросаКоэффициентУпаковки3 КАК КоэффициентУпаковкиСоглашения,
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
			|		ТОГДА СоглашениеТовары.СрокПоставки
			|	ИНАЧЕ ВЫБОР
			|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
			|				ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
			|			ИНАЧЕ СоглашениеШапка.СрокПоставки
			|		КОНЕЦ
			|КОНЕЦ КАК СрокПоставки
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
		
		Запрос.УстановитьПараметр("Упаковка"        , ТекущаяСтрока.Упаковка);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	ИначеЕсли СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВложенныйЗапрос.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|								/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ЦеныНоменклатурыСрезПоследних.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель)
			|									/ (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);
	Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
	Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
	Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ТекущаяСтрока.Цена = Окр(Выборка.Цена, 2);
		
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			
			Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
				ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
			Иначе
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("СрокПоставки") Тогда
			
			ТекущаяСтрока.СрокПоставки = Выборка.СрокПоставки;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ2_5(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПараметровДействия = СтруктураДействий.ЗаполнитьУсловияПродаж;
	ИначеЕсли СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда 
		СтруктураПараметровДействия = СтруктураДействий.ЗаполнитьУсловияПродажУслуги;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.Соглашение) Тогда
			ЗаполнятьПоСоглашению = Истина;
		Иначе	
			ЗаполнятьПоСоглашению = Ложь;
		КонецЕсли;
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен) КАК ВидЦены,
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(&Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
		|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ КАК ХарактеристикаЦО,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО
		|ПОМЕСТИТЬ ТаблицаТоварыДоп
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
		|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
		|	&ЗначениеВидаЦенПоИсточнику КАК ВидЦены,
		|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаОтбора
		|ИЗ
		|	ТаблицаТоварыДоп КАК ТаблицаОтбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.ВидЦены КАК ВидЦены,
		|			МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
		|		ИЗ
		|			&ТекстЗапросаИсточникаУсловияПродаж КАК ВложенныйЗапрос
		|		СГРУППИРОВАТЬ ПО
		|			ВложенныйЗапрос.ВидЦены) КАК ВременнаяТаблицаВидыЦен
		|		ПО ИСТИНА
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтбора.Номенклатура,
		|	ТаблицаОтбора.ХарактеристикаЦО,
		|	ТаблицаОтбора.СерияЦО,
		|	ТаблицаОтбора.УпаковкаЦО,
		|	&ЗначениеВидаЦенПоИсточнику
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО,
		|	СерияЦО,
		|	УпаковкаЦО,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|			ТОГДА ВЫБОР
		|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
		|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель *
		|						КурсыВалютыЦены.КурсЗнаменатель)
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
		|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
		|	ТаблицаОтбора.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаРезультата
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО, СерияЦО,
		|		УпаковкаЦО, ВидЦены) В
		|		(ВЫБРАТЬ
		|			Т.Номенклатура,
		|			Т.ХарактеристикаЦО,
		|			Т.СерияЦО,
		|			Т.УпаковкаЦО,
		|			Т.ВидЦены
		|		ИЗ
		|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК
		|			КурсыВалютыЦены
		|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта
		|		И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
		|		ПО ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
		|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаОтбора.Номенклатура
		|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаОтбора.ХарактеристикаЦО
		|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаОтбора.СерияЦО
		|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаОтбора.УпаковкаЦО
		|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ТаблицаОтбора.ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаЦО,
		|	СерияЦО,
		|	УпаковкаЦО,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРезультата.ВидЦены КАК ВидЦены,
		|	ТаблицаРезультата.Цена КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаРезультата.Номенклатура КАК Номенклатура,
		|		ТаблицаРезультата.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|		ТаблицаРезультата.СерияЦО КАК СерияЦО,
		|		ТаблицаРезультата.УпаковкаЦО КАК УпаковкаЦО,
		|		МИНИМУМ(ТаблицаРезультата.Приоритет) КАК Приоритет
		|	ИЗ
		|		ТаблицаРезультата КАК ТаблицаРезультата
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаРезультата.Номенклатура,
		|		ТаблицаРезультата.ХарактеристикаЦО,
		|		ТаблицаРезультата.СерияЦО,
		|		ТаблицаРезультата.УпаковкаЦО) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРезультата КАК ТаблицаРезультата
		|		ПО ВложенныйЗапрос.Номенклатура = ТаблицаРезультата.Номенклатура
		|		И ВложенныйЗапрос.ХарактеристикаЦО = ТаблицаРезультата.ХарактеристикаЦО
		|		И ВложенныйЗапрос.СерияЦО = ТаблицаРезультата.СерияЦО
		|		И ВложенныйЗапрос.УпаковкаЦО = ТаблицаРезультата.УпаковкаЦО
		|		И ВложенныйЗапрос.Приоритет = ТаблицаРезультата.Приоритет");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаИсточникаУсловияПродаж",
		ТекстЗапросаИсточникаУсловияПродаж(ЗаполнятьПоСоглашению));
		
		Если ЗаполнятьПоСоглашению Тогда
			Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);

			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ЗначениеВидаЦенПоИсточнику",
			"ВременнаяТаблицаВидыЦен.ВидЦены");
		Иначе	
			Запрос.УстановитьПараметр("Партнер"         , СтруктураПараметровДействия.Партнер);
		
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ЗначениеВидаЦенПоИсточнику",
			"ВЫБОР
			|		КОГДА ВременнаяТаблицаВидыЦен.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			ТОГДА ТаблицаОтбора.ВидЦены
			|		ИНАЧЕ ВременнаяТаблицаВидыЦен.ВидЦены
			|	КОНЕЦ");

		КонецЕсли;
		Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
		Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
		Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
			Если Не ТекущаяСтрока.Свойство("Серия") 
				Или ТипЗнч(ТекущаяСтрока.Серия) <> Тип("Справочникссылка.СерииНоменклатуры") Тогда
				Запрос.УстановитьПараметр("Серия"   , Справочники.СерииНоменклатуры.ПустаяСсылка());
			Иначе	
				Запрос.УстановитьПараметр("Серия"   , ТекущаяСтрока.Серия);
			КонецЕсли;
			Запрос.УстановитьПараметр("Упаковка"    , ТекущаяСтрока.Упаковка);
		Иначе	
			Запрос.УстановитьПараметр("Серия"       , Справочники.СерииНоменклатуры.ПустаяСсылка());
			Запрос.УстановитьПараметр("Упаковка"    , Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		КонецЕсли;
		Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		ВидЦеныДляЗаполнения = Неопределено;
		Если ТекущаяСтрока.Свойство("ВидЦены", ВидЦеныДляЗаполнения) И ВидЦеныДляЗаполнения <> Неопределено Тогда
			Запрос.УстановитьПараметр("ВидЦены"         , ВидЦеныДляЗаполнения);
		Иначе
			Запрос.УстановитьПараметр("ВидЦены"         , Справочники.ВидыЦен.ПустаяСсылка());
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущаяСтрока.Цена = Окр(Выборка.Цена, 2);
			
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
				Иначе
					ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.Цена = 0;
			Если ЗаполнятьПоСоглашению И ТекущаяСтрока.Свойство("ВидЦены") Тогда
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если Не СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
		
	Если ТипЗнч(СтруктураПараметровДействия.ОбъектХраненияУсловийПродаж) = Тип("Справочникссылка.ФорматыМагазинов") Тогда
		ЗаполнятьПоФорматуМагазинов = Истина;
	Иначе	
		ЗаполнятьПоФорматуМагазинов = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ КАК ХарактеристикаЦО,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
	|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК УпаковкаЦО
	|ПОМЕСТИТЬ ТаблицаТоварыДоп
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	ТаблицаТоварыДоп КАК ТаблицаОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|			МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|		ИЗ
	|			&ТекстЗапросаИсточникаУсловияПродаж  КАК ВложенныйЗапрос
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ВидЦены) КАК ВременнаяТаблицаВидыЦен
	|		ПО ИСТИНА
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО,
	|	ВременнаяТаблицаВидыЦен.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
	|	ТаблицаОтбора.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаРезультата
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО,
	|		СерияЦО, УпаковкаЦО, ВидЦены) В
	|		(ВЫБРАТЬ
	|			Т.Номенклатура,
	|			Т.ХарактеристикаЦО,
	|			Т.СерияЦО,
	|			Т.УпаковкаЦО,
	|			Т.ВидЦены
	|		ИЗ
	|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаОтбора.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаОтбора.ХарактеристикаЦО
	|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаОтбора.СерияЦО
	|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаОтбора.УпаковкаЦО
	|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ТаблицаОтбора.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультата.ВидЦены КАК ВидЦены,
	|	ТаблицаРезультата.Цена КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаРезультата.Номенклатура КАК Номенклатура,
	|		ТаблицаРезультата.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|		ТаблицаРезультата.СерияЦО КАК СерияЦО,
	|		ТаблицаРезультата.УпаковкаЦО КАК УпаковкаЦО,
	|		МИНИМУМ(ТаблицаРезультата.Приоритет) КАК Приоритет
	|	ИЗ
	|		ТаблицаРезультата КАК ТаблицаРезультата
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРезультата.Номенклатура,
	|		ТаблицаРезультата.ХарактеристикаЦО,
	|		ТаблицаРезультата.СерияЦО,
	|		ТаблицаРезультата.УпаковкаЦО) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРезультата КАК ТаблицаРезультата
	|		ПО ВложенныйЗапрос.Номенклатура = ТаблицаРезультата.Номенклатура
	|		И ВложенныйЗапрос.ХарактеристикаЦО = ТаблицаРезультата.ХарактеристикаЦО
	|		И ВложенныйЗапрос.СерияЦО = ТаблицаРезультата.СерияЦО
	|		И ВложенныйЗапрос.УпаковкаЦО = ТаблицаРезультата.УпаковкаЦО
	|		И ВложенныйЗапрос.Приоритет = ТаблицаРезультата.Приоритет");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки1",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
	"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки2",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
	"ЦеныНоменклатурыСрезПоследних.Упаковка",
	"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаИсточникаУсловияПродаж",
	ТекстЗапросаИсточникаУсловияРозничныхПродаж(ЗаполнятьПоФорматуМагазинов));

	Запрос.УстановитьПараметр("ОбъектХраненияУсловийПродаж" , СтруктураПараметровДействия.ОбъектХраненияУсловийПродаж);
	Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
	Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
	Если ТипЗнч(ТекущаяСтрока.Серия) <> Тип("Справочникссылка.СерииНоменклатуры") Тогда
		Запрос.УстановитьПараметр("Серия"   , Справочники.СерииНоменклатуры.ПустаяСсылка());
	Иначе	
		Запрос.УстановитьПараметр("Серия"   , ТекущаяСтрока.Серия);
	КонецЕсли;
	Запрос.УстановитьПараметр("Упаковка"    , ТекущаяСтрока.Упаковка);
	Запрос.УстановитьПараметр("Валюта"      , СтруктураПараметровДействия.Валюта);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ТекущаяСтрока.Цена = Выборка.Цена;
		
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			
			Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
				ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
			Иначе
				ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		
	КонецЕсли;


КонецПроцедуры

Функция ТекстЗапросаИсточникаУсловияПродаж(Знач ЗаполнятьПоСоглашению)
	Если ЗаполнятьПоСоглашению Тогда
		ТекстЗапроса = "(ВЫБРАТЬ
		|				СоглашенияСКлиентами.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|			ГДЕ
		|				СоглашенияСКлиентами.Ссылка = &Соглашение
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				СоглашенияСКлиентами.ВидЦен,
		|				2
		|			ИЗ
		|				Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|			ГДЕ
		|				СоглашенияСКлиентами.Ссылка = &Соглашение)";
	Иначе
		ТекстЗапроса = "(ВЫБРАТЬ
		|				Партнеры.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.Партнеры КАК Партнеры
		|			ГДЕ
		|				Партнеры.Ссылка = &Партнер
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				Партнеры.ВидЦен,
		|				2
		|			ИЗ
		|				Справочник.Партнеры КАК Партнеры
		|			ГДЕ
		|				Партнеры.Ссылка = &Партнер)"; 
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаИсточникаУсловияРозничныхПродаж(Знач ЗаполнятьПоФорматуМагазинов)
	Если ЗаполнятьПоФорматуМагазинов Тогда
		ТекстЗапроса = "(ВЫБРАТЬ
		|				ФорматыМагазинов.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.ФорматыМагазинов КАК ФорматыМагазинов
		|			ГДЕ
		|				ФорматыМагазинов.Ссылка = &ОбъектХраненияУсловийПродаж
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				ФорматыМагазинов.РозничныйВидЦены,
		|				2
		|			ИЗ
		|				Справочник.ФорматыМагазинов КАК ФорматыМагазинов
		|			ГДЕ
		|				ФорматыМагазинов.Ссылка = &ОбъектХраненияУсловийПродаж)";
	Иначе
		ТекстЗапроса = "(ВЫБРАТЬ
		|				Склады.ИндивидуальныйВидЦены КАК ВидЦены,
		|				1 КАК Приоритет
		|			ИЗ
		|				Справочник.Склады КАК Склады
		|			ГДЕ
		|				Склады.Ссылка = &ОбъектХраненияУсловийПродаж
		|
		|			ОБЪЕДИНИТЬ ВСЕ
		|
		|			ВЫБРАТЬ
		|				Склады.РозничныйВидЦены,
		|				2
		|			ИЗ
		|				Справочник.Склады КАК Склады
		|			ГДЕ
		|				Склады.Ссылка = &ОбъектХраненияУсловийПродаж)"; 
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		Запрос = Новый Запрос;
		УсловияОтбора = Новый Массив;
		ЧислоПараметров = 0;
		
		Для Каждого Условие Из СтруктураПараметровДействия.ПараметрыОтбора Цикл
			УсловияОтбора.Добавить(Условие.Ключ + " В (&Значение" + ЧислоПараметров + ")");
			Запрос.УстановитьПараметр("Значение" + ЧислоПараметров, Условие.Значение);
			ЧислоПараметров = ЧислоПараметров + 1;
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыЦен.Ссылка КАК Ссылка
			|ИЗ Справочник.ВидыЦен КАК ВидыЦен
			|ГДЕ
			|	ВидыЦен.Ссылка = &Ссылка
			|	И &ЗаменаУсловияОтбора";
		ЗаменаУсловияОтбора = СтрСоединить(УсловияОтбора, " И ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаменаУсловияОтбора", ЗаменаУсловияОтбора);
		Запрос.УстановитьПараметр("Ссылка", СтруктураПараметровДействия.ВидЦены);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ТекущаяСтрока.ВидЦены = Неопределено;
		Иначе
			ТекущаяСтрока.ВидЦены = СтруктураПараметровДействия.ВидЦены;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнитьВидЦеныВСтрокеТЧ()

Процедура ЗаполнитьЦенуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиУпаковка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровДействия, "ИмяКолонкиУпаковка", "Упаковка");
	ИмяПоляВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровДействия, "ИмяКолонкиВидЦены", "ВидЦены");
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	Если ИмяКолонкиУпаковка <> "Упаковка" Тогда
		СтруктураПараметровОтбора.Упаковка = ТекущаяСтрока[ИмяКолонкиУпаковка];
	КонецЕсли;
	Если ИмяПоляВидЦены <> "ВидЦены" Тогда
		СтруктураПараметровОтбора.ВидЦены = ТекущаяСтрока[ИмяПоляВидЦены];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства)
			И ЗначениеСвойства.НеИспользоватьУпаковки)
		Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	ИмяПоляЦена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровДействия, "ИмяПоляЦена", "Цена");
	
	Цена = ЦеныПредприятияЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока[ИмяПоляЦена] = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦены) Тогда
		ТекущаяСтрока[ИмяПоляЦена] = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияЗакупокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("ВидЦеныПоставщика") Тогда
		ВидЦеныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровДействия.Соглашение, "ВидЦеныПоставщика");
		ТекущаяСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	КонецЕсли;
	
	// Получение параметров запроса

	СтруктураПараметровОтбора = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	Если ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
		Цена = ЦеныПартнеровЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
		Если ЗначениеЗаполнено(Цена) Тогда
			ТекущаяСтрока.Цена = Цена;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыОтбораПолучитьЦенуПоОтбору();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦеныПоставщика) Тогда
		ТекущаяСтрока.Цена = ЦеныПартнеровЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Иначе
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	СтруктураДействийЗаполнения = Новый Структура;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьВесУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьОбъемУпаковки", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("КоличествоУпаковокВЕдиницеИзмеренияВеса", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакКод", СтруктураПараметровДействия);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакОписание", СтруктураПараметровДействия);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияТНВЭД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьЕдиницуИзмеренияТНВЭД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия);
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем") Тогда
		СтруктураДействийЗаполнения.Вставить("ПересчитатьВесОбъем", СтруктураДействий.ПересчитатьВесОбъем);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСерверЛокализация.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, СтруктураДействийЗаполнения);
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(ТекущаяСтрока, СтруктураДействийЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		
		НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем Партнер;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Партнер) Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров") Тогда
			Возврат;
		КонецЕсли;
		
		НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ(Партнер, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ТекущаяСтрока 			- см. ОбработатьСтрокуТЧ.ТекущаяСтрока
// 	СтруктураДействий 		- см. ОбработатьСтрокуТЧ.СтруктураДействий
// 	КэшированныеЗначения 	- см. ОбработатьСтрокуТЧ.КэшированныеЗначения
//
Процедура ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера", СтруктураПараметровДействия) Тогда
		
		ВыводитьПредупреждение = Ложь;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров") Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураКонтрагентов.Ссылка) КАК КоличествоНоменклатурыПартнера,
		|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика КАК Характеристика,
		|	НоменклатураКонтрагентов.Упаковка КАК Упаковка
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Владелец = &Партнер
		|	И (НЕ НоменклатураКонтрагентов.ПометкаУдаления)
		|	И НоменклатураКонтрагентов.Номенклатура = &Номенклатура
		|	И НоменклатураКонтрагентов.Характеристика = &Характеристика
		|	И НоменклатураКонтрагентов.Упаковка = &Упаковка
		|	И НоменклатураКонтрагентов.Ссылка <> &НоменклатураПартнера
		|	И ВЫРАЗИТЬ(&НоменклатураПартнера КАК Справочник.НоменклатураКонтрагентов).Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка");
		
		Запрос.УстановитьПараметр("Партнер",                СтруктураПараметровДействия.Партнер);
		Запрос.УстановитьПараметр("НоменклатураПартнера", ТекущаяСтрока.НоменклатураПартнера);
		Запрос.УстановитьПараметр("Номенклатура",           ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",         ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Упаковка",               ТекущаяСтрока.Упаковка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					
					ТекстОшибки = НСтр("ru = 'Номенклатуре ""%Номенклатура%"" с характеристикой ""%Характеристика%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПартнера%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",                   Выборка.Характеристика);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПартнера%", Выборка.КоличествоНоменклатурыПартнера);
					
				Иначе
					
					ТекстОшибки = НСтр("ru = 'Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПартнера%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПартнера%", Выборка.КоличествоНоменклатурыПартнера);
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					ВыводитьПредупреждение);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Заполняет склад по умолчанию
// 
// Параметры:
// 	ТекущаяСтрока - Структура - структура со свойствами строки документа.
// 	СтруктураДействий - Структура
//
Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СкладГруппа = Ложь;
	Если ПараметрыДействия.Свойство("СкладГруппа") Тогда
		СкладГруппа = ПараметрыДействия.СкладГруппа;
	КонецЕсли;
	
	ИмяПоляСклад = "Склад";
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляСклад") Тогда
		ИмяПоляСклад = ПараметрыДействия.ИмяПоляСклад;
	КонецЕсли;
	
	ТипНоменклатуры = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры") Тогда
		ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
	Иначе
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ТипНоменклатуры")
	КонецЕсли;
	
	СкладПоУмолчанию = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И (ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
		И ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("СкладПоУмолчанию") Тогда
		СкладПоУмолчанию = ПараметрыДействия.СкладПоУмолчанию;
	КонецЕсли;
	
	Если СкладГруппа
		И (ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) Тогда
		
		// Проверка на вхождение склада в иерархию группы складов
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяПоляСклад])
			И ПараметрыДействия.Свойство("СкладГруппаСсылка")
			И ЗначениеЗаполнено(ПараметрыДействия.СкладГруппаСсылка)
			И Не Справочники.Склады.СкладВГруппе(ПараметрыДействия.СкладГруппаСсылка, ТекущаяСтрока[ИмяПоляСклад]) Тогда
			ТекущаяСтрока[ИмяПоляСклад] = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока[ИмяПоляСклад] = СкладПоУмолчанию;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОрдерногоСкладаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПризнакОрдерногоСклада", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ИмяПоляСклад = "Склад"; 
	ИмяПоляПризнака = "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляСклад") Тогда
		ИмяПоляСклад = ПараметрыДействия.ИмяПоляСклад;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляПризнака") Тогда
		ИмяПоляПризнака = ПараметрыДействия.ИмяПоляПризнака;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ДатаПроверки") Тогда
		ДатаПроверки = ПараметрыДействия.ДатаПроверки;
	КонецЕсли;

	ИменаРеквизитов	= "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
						|ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач";
	РеквизитыСклада	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока[ИмяПоляСклад], ИменаРеквизитов, Истина);
	
	ТекущаяСтрока[ИмяПоляПризнака] = ЗначениеЗаполнено(РеквизитыСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
								И РеквизитыСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
								И РеквизитыСклада.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <> Неопределено
								И РеквизитыСклада.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <= ДатаПроверки;

	
КонецПроцедуры

Процедура ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия) Тогда
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура")
				Или Не ТекущаяСтрока.Свойство("ДанныеПрограммногоОбъекта") Тогда
				
				ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
					ПараметрыДействия,
					ТекущаяСтрока);
			
		Иначе
			
			ДанныеПрограммногоОбъекта = ТекущаяСтрока.ДанныеПрограммногоОбъекта;
			
		КонецЕсли;
		
		ОбеспечениеВДокументахСервер.ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи(ТекущаяСтрока,
		                                                                                    ДанныеПрограммногоОбъекта,
		                                                                                    ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация", ПараметрыДействия) Тогда
		
		Если ПараметрыДействия = Истина 
				Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
				Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю Тогда
					ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках", ПараметрыДействия) Тогда
		
		ТекущаяСтрока.Поставщик = Неопределено;
		ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов("Неопределено");
		
		Если Не ТекущаяСтрока.ДокументПриобретения = Неопределено Тогда
			
			ТекущаяСтрока.Поставщик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ДокументПриобретения, "Контрагент");
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ТекущаяСтрока.ДокументПриобретения));
			ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов(МассивТипов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаполнитьСодержаниеУслуги(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание", СтруктураПараметровДействия) Тогда
		
		ЗаполнятьДляВсехУслуг = Неопределено;
		СтруктураПараметровДействия.Свойство("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
		
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗаполнятьДляВсехУслуг <> Неопределено Тогда
		
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяСтрока.Номенклатура,
				"ТипНоменклатуры, ВариантОформленияПродажи, НаименованиеПолное");
			
			Если ЗаполнятьДляВсехУслуг
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное"));
				
			ИначеЕсли Не ЗаполнятьДляВсехУслуг
				И (РеквизитыНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот ИЛИ
				   РеквизитыНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав) Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное"));
				
			Иначе
				ТекущаяСтрока.Содержание = "";
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.Содержание = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия) Тогда
		
		ДоходыИРасходыСервер.ЗаполнитьСтатьюИАналитикуРасходовНоменклатуры(
			ТекущаяСтрока, 
			СтруктураПараметровДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия) Тогда
		ДоходыИРасходыСервер.ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия) Тогда
		ДоходыИРасходыСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	
	Возврат; // В УТ обработчик пустой
КонецПроцедуры

Процедура ЗаполнитьПредставлениеНастройкиСчетовУчета(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	
	Возврат; // В УТ обработчик пустой
КонецПроцедуры

Процедура ЗаполнитьПомещение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Помещение) Тогда
		
		Параметры = Новый Структура("Склад, Номенклатура, Характеристика", ПараметрСтруктурыДействий.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		ТекущаяСтрока.Помещение = СкладыСервер.ПомещениеДляНоменклатуры(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПродавца(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Продавец) Тогда
		
		ТекущаяСтрока.Продавец = ПараметрСтруктурыДействий.Продавец;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры", ПараметрСтруктурыДействий) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Аналитика.КлючАналитики КАК КлючАналитики
		|
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|ГДЕ
		|	Аналитика.МестоХранения = &Склад
		|	И Аналитика.Номенклатура = &Номенклатура
		|	И Аналитика.Характеристика = &Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоУчет
		|
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени,
		|		Организация = &Организация
		|		И АналитикаУчетаНоменклатуры В (
		|			ВЫБРАТЬ
		|				Аналитика.КлючАналитики
		|			ИЗ
		|				ВтАналитика КАК Аналитика
		|		)
		|	) КАК ТоварыОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	-ТоварыОрганизаций.Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВтАналитика КАК Аналитика
		|	ПО
		|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ВременнаяТаблица.КоличествоУчет, 0)) КАК КоличествоУчет
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры
		|");
		
		Запрос.УстановитьПараметр("Регистратор",    ПараметрСтруктурыДействий.Регистратор);
		Запрос.УстановитьПараметр("Склад",          ПараметрСтруктурыДействий.Склад);
		Запрос.УстановитьПараметр("Организация",    ПараметрСтруктурыДействий.Организация);
		Запрос.УстановитьПараметр("МоментВремени",  ПараметрСтруктурыДействий.МоментВремени);
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
				Коэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекущаяСтрока.Упаковка, ТекущаяСтрока.Номенклатура);
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			ТекущаяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет / Коэффициент;
			ТекущаяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет / Коэффициент;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокУчет = 0;
			ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПараметрСтруктурыДействий) Тогда
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(),ТекущаяСтрока);
		Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(Товары, ПараметрСтруктурыДействий);
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 1;
		Иначе
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПринимаетсяКНУ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем Параметры;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПринимаетсяКНУ", Параметры) Тогда
		
		Если ПустаяСтрока(Параметры) Тогда
			Параметры = "СтатьяРасходов";
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура(Параметры);
		Статья = Неопределено;
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			Если Статья = Неопределено Тогда
				Статья = ТекущаяСтрока[КлючИЗначение.Ключ];
			КонецЕсли;
			
			Контроль = Ложь;
			Если ЗначениеЗаполнено(Статья) И ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				Контроль = КэшированныеЗначения.ПринимаетсяКНУ[Статья];
				Если Контроль = Неопределено Тогда
					Контроль = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "ПринятиеКНалоговомуУчету") = Истина);
					КэшированныеЗначения.ПринимаетсяКНУ.Вставить(Статья, Контроль);
				КонецЕсли;
			КонецЕсли;
			ТекущаяСтрока.ПринимаетсяКНУ = Контроль;
			Статья = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПроверитьСериюРассчитатьСтатус(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия) Тогда
		
		РезультатРасчета = НоменклатураСервер.ПроверитьСериюРассчитатьСтатусПриИзмененииРеквизитаВТЧ(
								ТекущаяСтрока,
								ПараметрыДействия.Склад,
								ПараметрыДействия.ПараметрыУказанияСерий);
								
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РезультатРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакДляЗаполненияТекстовогоОписания(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("УстановитьПризнакДляЗаполненияТекстовогоОписания") Тогда
		
		ТекущаяСтрока.ДляЗаполненияТекстовогоОписания = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАдресногоХранения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыИспользуетсяАдресноеХранение;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАдресногоХранения", ПараметрыИспользуетсяАдресноеХранение) Тогда
		
		ДатаДокумента = Неопределено;
		
		ПараметрыИспользуетсяАдресноеХранение.Свойство("Дата", ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();				
		КонецЕсли;
		
		ТекущаяСтрока.ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
			ПараметрыИспользуетсяАдресноеХранение.Склад, 
			ПараметрыИспользуетсяАдресноеХранение.Помещение,
			ДатаДокумента);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияПомещений(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыИспользуютсяПомещения;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакИспользованияПомещений", ПараметрыИспользуютсяПомещения) Тогда
		
		ДатаДокумента = Неопределено;
		
		ПараметрыИспользуютсяПомещения.Свойство("Дата", ДатаДокумента);
		
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДатаСеанса();				
		КонецЕсли;
		
		ТекущаяСтрока.ИспользоватьСкладскиеПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(
			ПараметрыИспользуютсяПомещения.Склад, 
			ДатаДокумента);
			
		КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ИмяПоля;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ИмяПоля) Тогда
		ТекущаяСтрока[ИмяПоля] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущаяСтрока[СтруктураДействий.ЗаполнитьПризнакНазначения], "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	Перем Параметры;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", Параметры) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ВЫБОР
	|		КОГДА &ХарактеристикаЗаполнена ТОГДА
	|			ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Номенклатура",            ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          ТекущаяСтрока.Характеристика);
	Запрос.УстановитьПараметр("ХарактеристикаЗаполнена", ЗначениеЗаполнено(ТекущаяСтрока.Характеристика));
	
	КорректныеGTIN = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДобавлятьЛидирующиеНули = Ложь;
	Если Параметры <> Неопределено Тогда
		ДобавлятьЛидирующиеНули = Параметры.ДобавлятьЛидирующиеНули;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.GTIN) Тогда
			
			GTIN = Выборка.GTIN;
			Если ДобавлятьЛидирующиеНули Тогда
				GTIN = ДополнитьGTINЛидирующимиНулями(Выборка.GTIN);
			КонецЕсли;
			
			КорректныеGTIN.Добавить(GTIN);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректныеGTIN.Найти(ТекущаяСтрока.GTIN) <> Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли КорректныеGTIN.Количество() = 1 Тогда
		
		ТекущаяСтрока.GTIN = КорректныеGTIN[0];
		
	ИначеЕсли КорректныеGTIN.Количество() > 1 Тогда
		
		ТекущаяСтрока.GTIN = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с именами служебных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными.
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса.
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки, &ТекстВЫБРАТЬ
	|ПОМЕСТИТЬ втТаблицаНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица;";
	
	ШаблонВЫБРАТЬ = ",
	|	Таблица.%ИмяПоля% КАК %ИмяПоля%";
	ШаблонВЫБРАТЬНоменклатура = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		Если Поле.Ключ = "Упаковка" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка";
		ИначеЕсли Поле.Ключ = "Назначение" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Назначение КАК Справочник.Назначения) КАК Назначение";
		ИначеЕсли СтрНачинаетсяС(Поле.Ключ, "Номенклатура") Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬНоменклатура, "%ИмяПоля%", Поле.Ключ);
		Иначе
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	ШаблонЗапроса = ШаблонЗапроса + "
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки, &ТекстВЫБРАТЬ
	|ИЗ
	|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		ШаблонВЫБРАТЬ = ШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
		Если ШаблонВЫБРАТЬ <> Неопределено Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%ЗначениеЗамены%", Поле.Значение), "%Ключ%", Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
КонецФункции

// Возвращает структуру дополнительной информации получения служебных реквизитов
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов.
//
// Возвращаемое значение:
// 		Структура
//
Функция ОписаниеДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ЗначениеЗаполнено(Действие.Значение) Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
					СтруктураИсточников.Вставить(Поле.Ключ);
					СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
				КонецЕсли;
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки);
	
КонецФункции


Процедура ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	ПараметрыДействия = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизитыПоНазначению", ПараметрыДействия) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
			И ПараметрыДействия.Свойство("ТолькоТипНазначения")
			И ПараметрыДействия.ТолькоТипНазначения = Истина Тогда
			СоставРеквизитов = "ТипНазначения";
		Иначе
			СоставРеквизитов = "ТипНазначения,Заказ,Партнер,Договор,НаправлениеДеятельности";
		КонецЕсли;
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Назначение, СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно") Тогда
		
		ОбеспечениеВДокументахСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно(
			ТекущаяСтрока,
			СтруктураДействий.ПроверитьНеобходимостьОбновленияКолонкиДоступно); // вовзрат результата через параметры действия
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКэшНоменклатура(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ПараметрыДействия = Неопределено;
	Если СтруктураДействий.Свойство("ОбновитьКэшНоменклатура", ПараметрыДействия) Тогда
		
		ОбеспечениеВДокументахСервер.ОбновитьКэшНоменклатура(
			ТекущаяСтрока,
			ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения", ПараметрыДействия) Тогда
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура") Или Не ТекущаяСтрока.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
		Иначе
			
			ДанныеПрограммногоОбъекта = ТекущаяСтрока.ДанныеПрограммногоОбъекта;
			
		КонецЕсли;
		
		ОбеспечениеВДокументахСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(
			ТекущаяСтрока,
			ДанныеПрограммногоОбъекта,
			ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииТипаНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры", ПараметрыДействия) Тогда
		
		Если ПараметрыДействия.Свойство("ЕстьОтменено")
			И ПараметрыДействия.ЕстьОтменено Тогда
			Отменено = ПараметрыДействия.ЕстьОтменено И ТекущаяСтрока.Отменено;
		Иначе
			Отменено = Ложь;
		КонецЕсли;
		
		ЭтоРабота = ПараметрыДействия.ЕстьРаботы
					И (ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
						Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
				
		ТекущаяСтрока.СкладОбязателен = ?(ЗначениеЗаполнено(ТекущаяСтрока.ТипНоменклатуры)
												И Не (ЭтоРабота
													Или Отменено),
											1,
											0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуДоступно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно", ПараметрыДействия) Тогда
		
		Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
				И СтруктураДействий.ПроверитьНеобходимостьОбновленияКолонкиДоступно.ОбновитьКолонкуДоступно Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура")
				Или Не ТекущаяСтрока.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
		Иначе
			
			ДанныеПрограммногоОбъекта = ТекущаяСтрока.ДанныеПрограммногоОбъекта;
			
		КонецЕсли;
		
		ОбеспечениеВДокументахСервер.ЗаполнитьКолонкуДоступно(ТекущаяСтрока,
		                                                      ДанныеПрограммногоОбъекта,
		                                                      ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет служебный реквизит "РасхождениеЗаказ" в строке
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;

	ЗаказыСервер.ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, ПараметрыЗаполнения, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция МетодыКВыполнению(СтруктураДействий)

	Соответствие = Новый СписокЗначений();
		
	ТМЦВЭксплуатацииСервер.ДополнитьМетодыКВыполнению(Соответствие);
	
	Соответствие.Добавить("ПроверитьАссортиментСтроки",									"ОбработкаТабличнойЧастиСервер.ПроверитьАссортиментСтроки");
	Соответствие.Добавить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера",				"ОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре",				"ОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ПроверитьСопоставленнуюНоменклатуруПартнера",				"ОбработкаТабличнойЧастиСервер.ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ");
	
	Соответствие.Добавить("ЗаполнитьПризнакТипНоменклатуры",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакВидНоменклатуры",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакЕдиницаИзмерения",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакТипИзмеряемойВеличины",						"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьВесУпаковки",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьОбъемУпаковки",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьЕдиницуИзмеренияВеса",								"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьЕдиницуИзмеренияОбъема",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("КоличествоУпаковокВЕдиницеИзмеренияВеса",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакАртикул",									"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакКод",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакОписание",									"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакХарактеристикиИспользуются",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакВедетсяУчетПоГТД",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакВедетсяУчетПоРНПТ",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакЭтоУслуга",									"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьЕдиницуИзмеренияТНВЭД",								"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакВариантОформленияПродажи",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакСерииИспользуются",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьВесОбъем",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");
	
	Соответствие.Добавить("ПроверитьХарактеристикуПоВладельцу",							"ОбработкаТабличнойЧастиСервер.ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки");
	Соответствие.Добавить("ПроверитьЗаполнитьУпаковкуПоВладельцу",						"ОбработкаТабличнойЧастиСервер.ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки");
	
	Соответствие.Добавить("ЗаполнитьТипНомераГТД",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьТипНомераГТД");
	Соответствие.Добавить("ПроверитьЗаполнитьСклад",									"ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьСкладВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьПризнакОрдерногоСклада",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакОрдерногоСкладаВСтрокеТЧ");
	Соответствие.Добавить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи",				"ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьОбеспечениеВСтрокеТЧДокументаПродажи");
	Соответствие.Добавить("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация",	"ОбработкаТабличнойЧастиСервер.ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация");
	
	Соответствие.Добавить("ПересчитатьКоличествоНеОтгружать",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьGTINВСтроке",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьGTINВСтроке");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковокПоФакту",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",			"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоЕдиниц",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоЕдиницСуффикс",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоПоРНПТ",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоПоРНПТСуффикс",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковок",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковокСуффикс",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьКоличествоОтклонение",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковокПоВесу",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковокПоОбъему",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему");
	Соответствие.Добавить("ПересчитатьВесОбъем",										"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьВидЦены",											"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ"); 
	Соответствие.Добавить("ПересчитатьЦенуЗаУпаковку",									"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьЦенуЗаУпаковкуСуффикс",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьЦенуЗаказаЗаУпаковку",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ");
	Соответствие.Добавить("ПроверитьЗаполнитьВидЦены",									"ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьВидЦеныВСтрокеТЧ"); 
	Соответствие.Добавить("ЗаполнитьЦенуПродажи",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажиВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьЦенуПродажиПоАссортименту",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьЦенуЗакупки",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуЗакупкиВСтрокеТЧ");
	
	Соответствие.Добавить("ЗаполнитьУсловияПродаж",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродажВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьУсловияПродажУслуги",								"ОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродажВСтрокеТЧ");
	
	Соответствие.Добавить("ЗаполнитьУсловияРозничныхПродаж",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьУсловияЗакупок",									"ОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияЗакупокВСтрокеТЧ");

	Соответствие.Добавить("СкорректироватьСтавкуНДС",									"ОбработкаТабличнойЧастиСервер.СкорректироватьСтавкуНДСВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьСтавкуНДС",											"ОбработкаТабличнойЧастиСервер.ЗаполнитьСтавкуНДСВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьСтавкуНДССуффикс",									"ОбработкаТабличнойЧастиСервер.ЗаполнитьСтавкуНДССуффиксВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьКодТНВЭД",											"ОбработкаТабличнойЧастиСервер.ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьЦенуСНДС",										"ОбработкаТабличнойЧастиСервер.ПересчитатьЦенуСНДС");
	Соответствие.Добавить("ЗаполнитьСтавкуНДСВозвратнойТары",							"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуРучнойСкидки",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуАвтоматическойСкидки",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьПроцентРучнойСкидки",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСумму",											"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСуффикс",									"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуРасхождения",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения");
	Соответствие.Добавить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьЦенуПоСумме",										"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуПродажиПоСуммеСНДС",							"ОбработкаТабличнойЧастиСервер.ПересчитатьСуммуПродажиПоСуммеСНДС");
	Соответствие.Добавить("ПересчитатьЦенуПродажиПоСуммеПродажи",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",				"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСУчетомРучнойСкидки",						"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами",				"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСУчетомПогрешностиОкругления",				"ОбработкаТабличнойЧастиСервер.ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуНДС",										"ОбработкаТабличнойЧастиСервер.ПересчитатьСуммуНДСВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуНДССуффикс",									"ОбработкаТабличнойЧастиСервер.ПересчитатьСуммуНДССуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСНДС",										"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуСНДССуффикс",								"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуБезНДС",										"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуРегл",										"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуПР",											"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуНУ",											"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуВР",											"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьНДСРегл",											"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуПродажи",									"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуПродажиНДС",									"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ");
	Соответствие.Добавить("ОчиститьСуммуВознаграждения",								"ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ");
	Соответствие.Добавить("УстановитьАктивность",										"ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки");
	Соответствие.Добавить("ЗаполнитьТипМестаХраненияПоУмолчанию",						"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипМестаХраненияПоУмолчанию");
	Соответствие.Добавить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу",			"ОбработкаТабличнойЧастиСервер.ПроверитьПолучитьВариантКомплектации");
	
	Соответствие.Добавить("ЗаполнитьФлагРасхождение",									"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча");
	Соответствие.Добавить("ПересчитатьКоличествоУпаковокОтклонение",					"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча");
	Соответствие.Добавить("ЗаполнитьФлагИзлишекПорча",									"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча");
	
	Соответствие.Добавить("ОчиститьСуммуВзаиморасчетов",								"ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ");
	Соответствие.Добавить("ОчиститьСуммуВзаиморасчетовСуффикс",							"ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ОчиститьАвтоматическуюСкидку",								"ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьСодержание",										"ОбработкаТабличнойЧастиСервер.ЗаполнитьСодержаниеУслуги");
	Соответствие.Добавить("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры",				"ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатьюАналитикуРасходовНоменклатуры");
	Соответствие.Добавить("ОчиститьСтатьюАналитикуРасходов",							"ОбработкаТабличнойЧастиСервер.ОчиститьСтатьюАналитикуРасходов");
	Соответствие.Добавить("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки",		"ОбработкаТабличнойЧастиСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки");
	Соответствие.Добавить("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьНастройкуСчетовУчетаПоУмолчанию");
	Соответствие.Добавить("ЗаполнитьПредставлениеНастройкиСчетовУчета",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьПредставлениеНастройкиСчетовУчета");
	Соответствие.Добавить("ЗаполнитьПартнера",											"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера");
	Соответствие.Добавить("ЗаполнитьПомещение",											"ОбработкаТабличнойЧастиСервер.ЗаполнитьПомещение");
	Соответствие.Добавить("ЗаполнитьПродавца",											"ОбработкаТабличнойЧастиСервер.ЗаполнитьПродавца");
	Соответствие.Добавить("ЗаполнитьУчетноеКоличествоНоменклатуры",						"ОбработкаТабличнойЧастиСервер.ЗаполнитьУчетноеКоличествоНоменклатуры");
	Соответствие.Добавить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно",	"ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно");
	Соответствие.Добавить("ЗаполнитьПризнакБезВозвратнойТары",							"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары");
	Соответствие.Добавить("ЗаполнитьПризнакОтмененоБезВозвратнойТары",					"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары");
	Соответствие.Добавить("ЗаполнитьПризнакАктивностьБезВозвратнойТары",				"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары");
	Соответствие.Добавить("ЗаполнитьДубликатыЗависимыхРеквизитов",						"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов");
	Соответствие.Добавить("ПроверитьСериюРассчитатьСтатус",								"ОбработкаТабличнойЧастиСервер.ПроверитьСериюРассчитатьСтатус");
	Соответствие.Добавить("УстановитьПризнакДляЗаполненияТекстовогоОписания",			"ОбработкаТабличнойЧастиСервер.УстановитьПризнакДляЗаполненияТекстовогоОписания");
	Соответствие.Добавить("ЗаполнитьВариантОтраженияКорректировкиРеализации",			"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации");
	Соответствие.Добавить("НоменклатураПриИзмененииПереопределяемый",					"ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый");
	Соответствие.Добавить("ХарактеристикаПриИзмененииПереопределяемый",					"ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый");
	Соответствие.Добавить("ЗаполнитьПризнакПринимаетсяКНУ",								"ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакПринимаетсяКНУ");
	Соответствие.Добавить("ЗаполнитьПризнакАдресногоХранения",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакАдресногоХранения");
	Соответствие.Добавить("ЗаполнитьПризнакИспользованияПомещений",						"ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакИспользованияПомещений");
	Соответствие.Добавить("ПересчитатьРасхожденияПослеОтгрузки",						"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки");
	Соответствие.Добавить("ПересчитатьРасхожденияПослеПриемки",							"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки");
	Соответствие.Добавить("ПересчитатьРасхождения",										"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения");
	Соответствие.Добавить("ПризнакНаличиеКомментарияПриемка",							"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка");
	Соответствие.Добавить("ПризнакНаличиеКомментарияОтгрузка",							"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка");
	Соответствие.Добавить("ПризнакНаличиеКомментарияПриемка",							"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария");
	Соответствие.Добавить("ЗаполнитьПризнакТовМестаТребуетсяОбработка",					"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка");
	Соответствие.Добавить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам",				"ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакДвиженияПоСкладскимРегистрам");	
	Соответствие.Добавить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",			"ОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения");
	Соответствие.Добавить("ПриИзмененииТипаНоменклатуры",								"ОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатуры");
	Соответствие.Добавить("ЗаполнитьСлужебныеРеквизитыПоНазначению",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ");
	Соответствие.Добавить("ПроверитьЗаполнитьНазначение",								"ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьФлагОбособленноПоНазначению",						"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению");
	Соответствие.Добавить("ПриИзмененииНазначения",										"ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ");
	Соответствие.Добавить("ЗаполнитьСтрануПроисхожденияДляНомераГТД",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьСтрануПроисхожденияДляНомераГТД");
	Соответствие.Добавить("ЗаполнитьСтрануПроисхожденияНоменклатуры",					"ОбработкаТабличнойЧастиСервер.ЗаполнитьСтрануПроисхожденияНоменклатуры");
	Соответствие.Добавить("ЗаполнитьСпособОпределенияСебестоимости",					"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости");
	Соответствие.Добавить("ЗаполнитьСпособОпределенияСебестоимостиСтрокой", 			"ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой");
	Соответствие.Добавить("ЗаполнитьНаправлениеДеятельности",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьНаправлениеДеятельности");
	Соответствие.Добавить("ЗаполнитьПодразделениеВСтрокеТЧ",							"ОбработкаТабличнойЧастиСервер.ЗаполнитьПодразделениеВСтрокеТЧ");
	Соответствие.Добавить("ПроверитьНеобходимостьОбновленияКолонкиДоступно",			"ОбработкаТабличнойЧастиСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно");
	Соответствие.Добавить("ЗаполнитьКолонкуДоступно",									"ОбработкаТабличнойЧастиСервер.ЗаполнитьКолонкуДоступно");
	Соответствие.Добавить("ОбновитьКэшНоменклатура",									"ОбработкаТабличнойЧастиСервер.ОбновитьКэшНоменклатура");
	Соответствие.Добавить("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках", "ОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках");
	Соответствие.Добавить("ЗаполнитьПризнакРасхождениеЗаказ",                            "ОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакРасхождениеЗаказ");
	Соответствие.Добавить("ПересчитатьСуммуБезНДСРегл",									"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСРеглВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуБезНДСУпр",									"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСУпрВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуБезНДСРеглСуффикс",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСРеглСуффиксВСтрокеТЧ");
	Соответствие.Добавить("ПересчитатьСуммуБезНДСУпрСуффикс",							"ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСУпрСуффиксВСтрокеТЧ");

	ОбработкаТабличнойЧастиСерверЛокализация.СоответствиеКомандМетодам(Соответствие);
	
	СоответствиеТЗ = Новый ТаблицаЗначений();
	СоответствиеТЗ.Колонки.Добавить("Обработка",	новый ОписаниеТипов("Строка")); 
	СоответствиеТЗ.Колонки.Добавить("Метод",		новый ОписаниеТипов("Строка")); 
	СоответствиеТЗ.Колонки.Добавить("Порядок",		новый ОписаниеТипов("Число")); 
	СоответствиеТЗ.Индексы.Добавить("Обработка");
	СтруктураДействийТЗ = СоответствиеТЗ.Скопировать(); 
	
	Счетчик = 1;
	
	Для каждого Обработка Из Соответствие Цикл
		НоваяСтрока				= СоответствиеТЗ.Добавить();
		НоваяСтрока.Обработка	= Обработка.Значение;
		НоваяСтрока.Метод		= Обработка.Представление;
		НоваяСтрока.Порядок		= Счетчик;
		Счетчик					= Счетчик + 1;
	КонецЦикла;
	
	Для каждого Действие Из СтруктураДействий Цикл
	    НайденныеСтроки = СоответствиеТЗ.НайтиСтроки(Новый Структура("Обработка", Действие.Ключ));
		Для каждого Обработка Из НайденныеСтроки Цикл
			 ЗаполнитьЗначенияСвойств(СтруктураДействийТЗ.Добавить(), Обработка);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураДействийТЗ.Сортировать("Порядок");
	СтруктураДействийТЗ.Свернуть("Метод");
	
	Методы = СтруктураДействийТЗ.ВыгрузитьКолонку("Метод");
	
	Возврат Методы;
	
КонецФункции

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция ДополнитьGTINЛидирующимиНулями(Знач ШтрихкодEAN) Экспорт
	
	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

Процедура ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, Склад, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Цена = АссортиментСервер.ПолучитьЦенуПоАссортименту(СтруктураПараметровОтбора);
	ТекущаяСтрока.Цена = Цена;
	
КонецПроцедуры

// Параметры:
// 	ТекущаяСтрока - см. ОбработатьСтрокуТЧ.ТекущаяСтрока
// 	СтруктураДействий - см. ОбработатьСтрокуТЧ.СтруктураДействий
//
Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(
		СтруктураПараметровДействия.Склад, 
		СтруктураПараметровДействия.Дата);
	
	Если КонтролироватьАссортимент Тогда
		
		Если НЕ ТекущаяСтрока.Свойство("НоменклатураНабора") ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																								СтруктураПараметровДействия.Склад,
																								СтруктураПараметровДействия.Дата);
		Иначе
			СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.НоменклатураНабора,
																								СтруктураПараметровДействия.Склад,
																								СтруктураПараметровДействия.Дата);
		КонецЕсли;
		
		Если НЕ СтруктураСостояния[СтруктураПараметровДействия.ИмяРесурсаАссортимента] Тогда
			
			ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
			Если НЕ ТекущаяСтрока.Свойство("НоменклатураНабора") ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					Ложь);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.НоменклатураНабора);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ИндексНабора"),
					,
					Ложь);
			КонецЕсли;
			
			Если НЕ СтруктураПараметровДействия.РазрешатьДобавление Тогда
				ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем НалогообложениеНДС;

	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД", НалогообложениеНДС) Тогда
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт 
			ИЛИ НалогообложениеНДС = Неопределено Тогда
			ТекущаяСтрока.КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура,"КодТНВЭД");
		Иначе
			ТекущаяСтрока.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОбУпаковке(Номенклатура, Упаковка, КэшированныеЗначения) Экспорт 
	
	ДанныеОбУпаковке = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, , Ложь);
	
	КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Номенклатура, Упаковка);
	
	КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента,	Новый Структура("Коэффициент, НужноОкруглятьКоличество",
																							ДанныеОбУпаковке.Коэффициент,
																							ДанныеОбУпаковке.НужноОкруглятьКоличество));
	КэшированныеЗначения.ОбъемУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Вес);
	КэшированныеЗначения.ВесУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Объем);
	
	Возврат ДанныеОбУпаковке;
	
КонецФункции

Процедура ЗаполнитьСтрануПроисхожденияДляНомераГТД(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД", Параметры) Тогда
		ТекущаяСтрока.СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НомерГТД, "СтранаПроисхождения");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипНомераГТД(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД", Параметры) Тогда
		ТекущаяСтрока.ТипНомераГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НомерГТД, "ТипНомераГТД");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрануПроисхожденияНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияНоменклатуры", Параметры) Тогда
		Если Не ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
			ТекущаяСтрока.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока[Параметры.НомерГТД]) Тогда
			ТекущаяСтрока.СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока[Параметры.НомерГТД],
																							"СтранаПроисхождения");
		Иначе
			ТекущаяСтрока.СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока[Параметры.Номенклатура],
																							"СтранаПроисхождения");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает коэффициенты по РНПТ для указанной Организации и списка товаров.
//
// Параметры:
//	ИсключаемыйДокумент - ДокументСсылка - документ, движения которого исключаются при расчета коэффициента по РНПТ.
//	Организация - СправочникСсылка.Организации - организация, для которой рассчитываются коэффициенты по РНПТ.
//	Товары - ТаблицаЗначений - таблица, содержащая сведения о товарах.
//	КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке данных.
//	Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение, для которого рассчитываются коэффициенты по РНПТ.
//	
// Возвращаемое значение:
//	ТаблицаЗначений - см. УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров
//
Функция ПолучитьКоэффициентРНПТ(ИсключаемыйДокумент, Организация, Товары, КэшированныеЗначения, Соглашение = Неопределено) Экспорт
	
	Коэффициенты =
		УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров(
			ИсключаемыйДокумент,
			Организация,
			Товары,
			Соглашение);
	
	Возврат Коэффициенты;
	
КонецФункции


Процедура ЗаполнитьНаправлениеДеятельности(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;

	Если Не СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;

	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеДеятельности(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ПараметрыДействия);

КонецПроцедуры

Процедура ЗаполнитьПодразделениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТипов = ПродажиСервер.ТипыНоменклатурыСАналитикойПодразделение();
	Если СписокТипов.НайтиПоЗначению(ТекущаяСтрока.ТипНоменклатуры) = Неопределено Тогда
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПараметрыДействия.Подразделение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

Функция ПоддерживаемыеДействияЗаполненияТЧ() Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить("ЗаполнитьПризнакТипНоменклатуры");
	Действия.Добавить("ЗаполнитьПризнакВидНоменклатуры");
	Действия.Добавить("ЗаполнитьПризнакЕдиницаИзмерения");
	Действия.Добавить("ЗаполнитьПризнакТипИзмеряемойВеличины");
	Действия.Добавить("ЗаполнитьВесУпаковки");
	Действия.Добавить("ЗаполнитьОбъемУпаковки");
	Действия.Добавить("ЗаполнитьЕдиницуИзмеренияВеса");
	Действия.Добавить("ЗаполнитьЕдиницуИзмеренияОбъема");
	Действия.Добавить("ЗаполнитьПризнакАртикул");
	Действия.Добавить("ЗаполнитьПризнакКод");
	Действия.Добавить("ЗаполнитьПризнакОписание");
	Действия.Добавить("ЗаполнитьПризнакВариантОформленияПродажи");
	Действия.Добавить("ЗаполнитьПризнакХарактеристикиИспользуются");
	Действия.Добавить("ЗаполнитьПризнакВедетсяУчетПоГТД");
	Действия.Добавить("ЗаполнитьПризнакВедетсяУчетПоРНПТ");
	Действия.Добавить("ЗаполнитьЕдиницуИзмеренияТНВЭД");
	Действия.Добавить("ЗаполнитьПризнакЭтоУслуга");
	Действия.Добавить("ЗаполнитьПризнакСерииИспользуются");
	Действия.Добавить("ПересчитатьВесОбъем");
	Действия.Добавить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиСерверЛокализация.ДополнитьПоддерживаемыеДействияЗаполненияТЧ(Действия);
	
	Возврат Действия;
	
КонецФункции

// Возвращает шаблон поля выборки соответствующий для указанного ключа действия
//
// Параметры:
//  КлючДействия						 - Строка	 - Строка имени ключа действия
//  ТолькоПроверитьПоддерживаемыеКлючи	 - Булево - признак проверки поддержки ключа действия.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Строка шаблон поля запроса.
//
Функция ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, ТолькоПроверитьПоддерживаемыеКлючи = Ложь)
	
	ШаблонЛокализация = "";
	ОбработкаТабличнойЧастиСерверЛокализация.ПриОпределенииШаблонаПоляВыборкиПоКлючуДействия(КлючДействия, ШаблонЛокализация);
	Если ЗначениеЗаполнено(ШаблонЛокализация) Тогда
		Возврат ШаблонЛокализация;
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВидНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЕдиницаИзмерения" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипИзмеряемойВеличины" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьВесУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаВесУпаковки
		|	ИНАЧЕ &ТекстЗапросаВесНоменклатуры
		|	КОНЕЦ КАК ВесУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьОбъемУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаОбъемУпаковки
		|	ИНАЧЕ &ТекстЗапросаОбъемНоменклатуры
		|	КОНЕЦ КАК ОбъемУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияВеса" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ВесЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияВеса";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияОбъема" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ОбъемЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияОбъема";
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьВесОбъем" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ% * &ТекстЗапросаВесУпаковки / 
		|	ВЫБОР
		|		КОГДА втТаблицаНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|			И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(27, 11))
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Вес,
		|	втТаблицаНоменклатуры.%Ключ% * &ТекстЗапросаОбъемУпаковки /
		|	ВЫБОР
		|		КОГДА втТаблицаНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|			И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(27, 11))
		|	ИНАЧЕ 1
		|	КОНЕЦ КАК Объем";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура",
				Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура",
				Ложь));
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьКоличествоУпаковок" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ% / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК %ЗначениеЗамены%";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура"));
		
		Возврат ТекстЗапроса;
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакАртикул" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Артикул КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакКод" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Код КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакОписание" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Описание КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоРНПТ" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ПрослеживаемыйТовар, ЛОЖЬ)
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияТНВЭД" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмеренияТНВЭД КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакСерииИспользуются" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры.ИспользоватьСерии КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка")
		И Не ТолькоПроверитьПоддерживаемыеКлючи Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %ЗначениеЗамены%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Преобразует структуру действий для использования в ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(),
// чтобы рассчитывать нужные поля одним запросом по всей коллекции.
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получению служебных реквизитов.
//
Процедура НормализоватьДействия(СтруктураДействий) Экспорт
	
	Суффикс = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс)
		И ТипЗнч(Суффикс) <> Тип("Структура") Тогда
		КоличествоУпаковок = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс).КоличествоУпаковок;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем",
									Новый Структура(КоличествоУпаковок + ",Номенклатура,Упаковка", "Вес,Объем"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКэшированныеЗначения(ТЧ, Действие, КэшированныеЗначения)

	Если Действие.Ключ = "СкорректироватьСтавкуНДС" Тогда
		СтруктураДействия = Действие.Значение;
		ЗаполнитьТипыНоменклатурКэшированныеЗначения(ТЧ, СтруктураДействия, КэшированныеЗначения);
		ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураДействия, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипыНоменклатурКэшированныеЗначения(ТЧ, СтруктураДействия, КэшированныеЗначения)
	
	Если СтруктураДействия.ВернутьМногооборотнуюТару И ТипЗнч(ТЧ) <> Тип("ДанныеФормыКоллекция") Тогда 
		
		ТипыНоменклатуры = КэшированныеЗначения.ТипыНоменклатуры;
		ТипыНоменклатуры.Очистить();
		
		СписокНоменклатуры = ТЧ.ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК НоменклатураСсылка,
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТипыНоменклатуры.Вставить(Выборка.НоменклатураСсылка, Выборка.ТипНоменклатуры);	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураДействия, КэшированныеЗначения) Экспорт
	
	НалогообложениеНДС = СтруктураДействия.НалогообложениеНДС;
	Дата = СтруктураДействия.Дата;
	Организация = СтруктураДействия.Организация;
	Если СтруктураДействия.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураДействия.ХозяйственнаяОперация;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Если ПродажиСервер.ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Тогда
		
		АктуальныеСтавкиНДС = Новый Массив();
		АктуальныеСтавкиНДС.Добавить(Справочники.СтавкиНДС.БезНДС);
		КэшированныеЗначения.АктуальныеСтавкиНДС = АктуальныеСтавкиНДС;
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДСТипыНалогообложенияНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДСТипыНалогообложенияНДС
		|ГДЕ
		|	СтавкиНДСТипыНалогообложенияНДС.ТипНалогообложенияНДС = &ТипНалогообложенияНДС
		|	И (СтавкиНДСТипыНалогообложенияНДС.Ссылка.Страна = &Страна
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.Страна = &ПустаяСтрана)
		|	И (СтавкиНДСТипыНалогообложенияНДС.Ссылка.НачалоПериода <= &Дата
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|	И (КОНЕЦПЕРИОДА(СтавкиНДСТипыНалогообложенияНДС.Ссылка.КонецПериода, ДЕНЬ) >= &Дата
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	СтавкиНДСТипыНалогообложенияНДС.Ссылка";
		
		Запрос.УстановитьПараметр("ТипНалогообложенияНДС", НалогообложениеНДС);
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("Страна", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
		Запрос.УстановитьПараметр("ПустаяСтрана", Справочники.СтраныМира.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			КэшированныеЗначения.АктуальныеСтавкиНДС = Новый Массив;
		КонецЕсли;
		
		КэшированныеЗначения.АктуальныеСтавкиНДС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтавкаНДС");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
