
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	Движения = Объект.Движения;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт

	//++ Локализация
	//-- Локализация

КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	Если ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная) Тогда
		// М-2 (Доверенность)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "М2";
		КомандаПечати.Представление = НСтр("ru = 'Доверенность (М-2)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ДоверенностьМ2");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// М-2а (Доверенность)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "М2";
		КомандаПечати.Представление = НСтр("ru = 'Доверенность (М-2а)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ДоверенностьМ2а");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	Перем АдресКомплектаПечатныхФорм;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М2", НСтр("ru = 'Доверенность на получение ТМЦ (М-2)'"), СформироватьПечатнуюФорму(ПараметрыПечати["Тип"], МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
			КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		КонецЕсли;
		Если КомплектПечатныхФорм.Количество()>0 Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КомплектДокументов", НСтр("ru = 'Комплект документов'"), СформироватьПечатнуюФорму(КомплектПечатныхФорм[0].Имя, МассивОбъектов, ОбъектыПечати));
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Процедура СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, КомплектПечатныхФорм) Экспорт
	//++ Локализация
	
	//-- Локализация
КонецПроцедуры

Процедура КомплектПечатныхФорм(КомплектПечатныхФорм) Экспорт
	//++ Локализация
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "М2", НСтр("ru = 'Доверенность на получение ТМЦ (М-2)'"), 1);
	
	//-- Локализация
КонецПроцедуры

//++ Локализация

Функция СформироватьПечатнуюФорму(Тип, МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация КАК Организация,
	|	Доверенность.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК РуководительДолжность,
	|	ТаблицаОтветственныеЛица.РуководительОснованиеПраваПодписи КАК РуководительОснованиеПраваПодписи,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерДолжность КАК ГлавныйБухгалтерДолжность,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерОснованиеПраваПодписи КАК ГлавныйБухгалтерОснованиеПраваПодписи,
	|	Доверенность.ФизЛицо КАК ФизЛицо,
	|	Доверенность.ПоДокументу КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.ДатаОкончанияДействия КАК СрокДействия,
	|	Доверенность.Должность КАК Должность,
	|	Доверенность.Ответственный КАК Ответственный,
	|	Доверенность.БанковскийСчет КАК БанковскийСчет,
	|	Доверенность.Контрагент.НаименованиеПолное КАК ПоставщикПредставление,
	|	Доверенность.ДокументОснование КАК ДокументОснование,
	|	Доверенность.ДокументОснование.Номер КАК НомерОснования,
	|	Доверенность.ДокументОснование.Дата КАК ДатаОснования,
	|	Доверенность.ДокументОснование.Организация.Префикс КАК ПрефиксОснования,
	|	Доверенность.Товары.(
	|		НомерСтроки КАК Номер,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.Товары.НоменклатураПартнера) КАК НоменклатураПартнера,
	|		Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ Доверенность.Товары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияПредставление,
	|		КоличествоУпаковок КАК КоличествоУпаковок
	|	),
	|	Доверенность.МатериальныеЦенности.(
	|		НомерСтроки КАК Номер,
	|		МатериальнаяЦенность КАК МатериальнаяЦенность,
	|		Количество КАК Количество,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.МатериальныеЦенности.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|	),
	|	Доверенность.ВидДокументаФизЛица КАК ВидДокумента,
	|	Доверенность.СерияДокументаФизЛица КАК ПаспортСерия,
	|	Доверенность.НомерДокументаФизЛица КАК ПаспортНомер,
	|	Доверенность.КемВыданДокументФизлица КАК ПаспортВыдан,
	|	Доверенность.ДатаВыдачиДокументаФизЛица КАК ПаспортДатаВыдачи,
	|	Доверенность.СуммаДокумента КАК СуммаДокумента,
	|	Представление(Доверенность.Валюта) КАК ВалютаПредставление
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Доверенность.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Доверенность.Товары.НомерСтроки,
	|	Доверенность.МатериальныеЦенности.НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Доверенность.Товары.Упаковка",
			"Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Доверенность.Товары.Упаковка",
			"Доверенность.Товары.Номенклатура"));
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоверенностьВыданная.ПФ_MXL_М2_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	Если Тип = "ДоверенностьМ2" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2";
	ИначеЕсли Тип = "ДоверенностьМ2а" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2а";
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		НомерДокументаНаПечать        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ФамилияИмяОтчествоДоверенного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ФизЛицо, ДанныеПечати.ДатаДокумента);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.ДатаДокумента,
			,
			ДанныеПечати.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны");
			
		КодПоОКУД = "";
		Если Тип = "ДоверенностьМ2" Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Отрез");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			
			СтруктураДанныхОтрез = Новый Структура;
			СтруктураДанныхОтрез.Вставить("НомерДокумента", НомерДокументаНаПечать);
			СтруктураДанныхОтрез.Вставить("ФИОДоверенного", ?(ПустаяСтрока(ДанныеПечати.Должность), "", ДанныеПечати.Должность + " ") + ФамилияИмяОтчествоДоверенного);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхОтрез);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2'", Метаданные.Языки.Русский.КодЯзыка);
			КодПоОКУД = "0315001";
			
		ИначеЕсли Тип = "ДоверенностьМ2а" Тогда
			
			НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2а'", Метаданные.Языки.Русский.КодЯзыка);
			КодПоОКУД = "0315002";
			
		КонецЕсли;
		
		// Заполнить реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СтруктураДанныхШапка = Новый Структура;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		СтруктураДанныхШапка.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхШапка.Вставить("НазваниеФормы", НазваниеФормы);
		СтруктураДанныхШапка.Вставить("ДатаДокумента", Формат(ДанныеПечати.ДатаДокумента,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("СрокДействия", Формат(ДанныеПечати.СрокДействия,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("ФамилияИмяОтчествоДоверенного", ДанныеПечати.ФизЛицо);
		СтруктураДанныхШапка.Вставить("ДолжностьДоверенного", ДанныеПечати.Должность);
		СтруктураДанныхШапка.Вставить("ОрганизацияПредставление", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПотребителя", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПлательщика", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		СтруктураДанныхШапка.Вставить("КодПоОКУД", КодПоОКУД);
		
		СтруктураДанныхШапка.Вставить("РеквизитыСчета", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации,
			"НомерСчета,Банк,БИК,КоррСчет,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапка);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заполнить таблицу
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ВыборкаСтрокТовары = ДанныеПечати.Товары.Выбрать();
		ВыборкаСтрокМатериальныеЦенности = ДанныеПечати.МатериальныеЦенности.Выбрать();
		КоличествоСтрок = 0;
		НомерПоследнейСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.НоменклатураПартнера) Тогда
				
				МатериальнаяЦенность = ВыборкаСтрокТовары.НоменклатураПартнера;
				
			Иначе
				
				МатериальнаяЦенность = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.Номенклатура,
					ВыборкаСтрокТовары.Характеристика);
				
			КонецЕсли;
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", МатериальнаяЦенность);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокТовары.КоличествоУпаковок = 0,
				"",
				Строка(ВыборкаСтрокТовары.КоличествоУпаковок) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокТовары.КоличествоУпаковок) + ")"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокМатериальныеЦенности.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериальныеЦенности);
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = ВыборкаСтрокМатериальныеЦенности.Номер + КоличествоСтрок;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокМатериальныеЦенности.Количество = 0,
				"",
				Строка(ВыборкаСтрокМатериальныеЦенности.Количество) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокМатериальныеЦенности.Количество) + ")"));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		Если НЕ ДанныеПечати.СуммаДокумента = 0 Тогда
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", НСтр("ru = 'Наличные денежные средства'"));
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ДанныеПечати.СуммаДокумента = 0,
				"",
				Строка(ДанныеПечати.СуммаДокумента) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ДанныеПечати.СуммаДокумента) + ")"));
			СтруктураДанныхСтрокаТаблицы.Вставить("ЕдиницаИзмеренияПредставление", ДанныеПечати.ВалютаПредставление);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Заполнить реквизиты подвала
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураДанныхПодвал = Новый Структура;
		
		Если ЗначениеЗаполнено(ДанныеПечати.РуководительОснованиеПраваПодписи) Тогда
			РуководительПредставление = ?(ПустаяСтрока(ДанныеПечати.РуководительДолжность), "", ДанныеПечати.РуководительДолжность + " ") + ДанныеПечати.Руководитель;
		Иначе
			РуководительПредставление = ДанныеПечати.Руководитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПечати.ГлавныйБухгалтерОснованиеПраваПодписи) Тогда
			ГлавныйБухгалтерПредставление = ?(ПустаяСтрока(ДанныеПечати.ГлавныйБухгалтерДолжность), "", ДанныеПечати.ГлавныйБухгалтерДолжность + " ") + ДанныеПечати.ГлавныйБухгалтер;
		Иначе
			ГлавныйБухгалтерПредставление = ДанныеПечати.ГлавныйБухгалтер;
		КонецЕсли;
		
		СтруктураДанныхПодвал.Вставить("ФИОРуководителя", РуководительПредставление);
		СтруктураДанныхПодвал.Вставить("ФИОГлавногоБухгалтера",  ГлавныйБухгалтерПредставление);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
КонецФункции

//-- Локализация

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры
//++ Локализация
//-- Локализация


#КонецОбласти

#Область Печать
	
//++ Локализация
//-- Локализация
#КонецОбласти

#Область Прочее
	
//++ Локализация
//-- Локализация
#КонецОбласти

#КонецОбласти
