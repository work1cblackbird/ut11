#Область ПрограммныйИнтерфейс

#Область ОпределениеТипов

// Функция описание типа договора.
//
// Параметры:
//	ЗначениеКонтрагента - СправочникСсылка.Контрагенты, СправочникСсылка.Организации, Неопределено - 
//		Ссылка для определения типа контрагента, договоры которого необходимо получить.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочник, содержащих договоры.
//
Функция ПолучитьОписаниеТиповДоговора(ЗначениеКонтрагента = Неопределено) Экспорт
	
	ТипыДоговоров = Новый Массив;
	Если Не ЗначениеЗаполнено(ЗначениеКонтрагента) ИЛИ ТипЗнч(ЗначениеКонтрагента) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТипыДоговоров.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		ТипыДоговоров.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначениеКонтрагента) ИЛИ ТипЗнч(ЗначениеКонтрагента) = Тип("СправочникСсылка.Организации") Тогда
		ТипыДоговоров.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(ТипыДоговоров);
	
КонецФункции

// Функция возвращает тип банковского счета организации.
//
// Возвращаемое значение:
//	Тип - Тип справочника с банковскими счетами организации.
//
Функция ТипЗначенияБанковскогоСчетаОрганизации() Экспорт
	
	Возврат Тип("СправочникСсылка.БанковскиеСчетаОрганизаций");

КонецФункции

// Функция ПолучитьОписаниеТиповБанковскогоСчетаОрганизации ОписаниеТипов
// для банковских счетов организаций.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочника с банковскими счетами организаций.
//
Функция ПолучитьОписаниеТиповБанковскогоСчетаОрганизации() Экспорт

	Возврат Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций");	

КонецФункции // ПолучитьОписаниеТиповБанковскогоСчетаОрганизации()

// Функция ПолучитьОписаниеТиповНоменклатурнойГруппы возвращает 
// тип для номенклатурной группы.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типа справочника для вида субконто "Номенклатурные группы".
//
Функция ПолучитьОписаниеТиповНоменклатурнойГруппы() Экспорт

	Возврат Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");

КонецФункции

// Функция ОписаниеТиповПодразделения возвращает 
// описание типов для справочника подразделений.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочника для подразделений.
//
Функция ОписаниеТиповПодразделения() Экспорт

	Возврат Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");

КонецФункции

// Функция возвращает тип для справочника подразделений.
//
// Возвращаемое значение:
//	Тип - Тип справочника подразделений.
//
Функция ТипПодразделения() Экспорт
	
	Возврат Тип("СправочникСсылка.СтруктураПредприятия");

КонецФункции


#КонецОбласти

#Область ОпределениеХарактераОперации

// Функция ДокументЯвляетсяРеализацией возвращает Истина, если переданный по ссылке документ
// является документом реализации (товаров, услуг, ОС, НМА).
//
// Параметры:
//	СсылкаНаДокумент - ДокументСсылка.* - Проверяемый документ.
//
// Возвращаемое значение:
//	Булево - Истина - если документ является реализацией.
//
Функция ДокументЯвляетсяРеализацией(СсылкаНаДокумент) Экспорт

	ТипДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Возврат ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");

КонецФункции // ДокументЯвляетсяРеализацией()

#КонецОбласти

#Область ИменаРеквизитов

// Функция ПолучитьИмяРеквизитаКонтрагентДоговора имя реквизита в справочнике
// ДоговорыКонтрагентов, в котором храниться ссылка на контрагента-владельца.
//
// Возвращаемое значение:
//	Строка - Имя реквизита Контрагент в договоре.
//
Функция ПолучитьИмяРеквизитаКонтрагентДоговора() Экспорт

	Возврат "Контрагент";

КонецФункции

// Возвращает имена реквизитов объекта с типом "Организация" по переданному типу объекта.
//
//	Параметры:
//		ТипПоля - Тип - тип объекта, для которого требуется вернуть имена реквизитов, содержащих ссылки на организацию.
//
//	Возвращаемое значение:
//		Массив  - массив имен реквизитов.
//
Функция ПолучитьИменаРеквизитовОрганизацияДоговора(ТипПоля = Неопределено) Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить("Организация");
	
	Если ТипПоля = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		МассивВозврата.Добавить("ОрганизацияПолучатель");
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Функция ПолучитьИмяРеквизитаВидДоговора имя реквизита в справочнике
// ДоговорыКонтрагентов, по которому определяется вид договора.
//
// Возвращаемое значение:
//	Строка - Имя реквизита, определяющего вид договора.
//
Функция ПолучитьИмяРеквизитаВидДоговора() Экспорт

	Возврат "ХозяйственнаяОперация";

КонецФункции

// Функция ПолучитьИмяРеквизитаНоменклатурнаяГруппаНоменклатуры возвращает 
// имя реквизита НоменклатурнаяГруппа в справочнике Номенклатура.
//
// Возвращаемое значение:
//	Строка - Имя реквизита номенклатуры, определяющего номенклатурную группу.
//
Функция ПолучитьИмяРеквизитаНоменклатурнаяГруппаНоменклатуры() Экспорт

	Возврат "ГруппаФинансовогоУчета";

КонецФункции

// Функция возвращает имя справочника, являющегося субконто "НоменклатурныеГруппы".
//
// Возвращаемое значение:
//	Строка - Имя справочника, используемого в субконто "Номенклатурные группы".
//
Функция ПолучитьИмяСправочникаНоменклатурныеГруппы() Экспорт

	Возврат "ГруппыФинансовогоУчетаНоменклатуры";

КонецФункции

// Функция возвращает строку с именем реквизита в справочнике подразделений,
// определяющего владельца подразделения, либо пустую строку, если справочник 
// подразделений не является подчиненным справочником.
//
// Возвращаемое значение:
//	Строка - Имя реквизита организации в справочнике подразделений.
//
Функция ИмяРеквизитаОрганизацияПодразделения() Экспорт
	
	Возврат "";

КонецФункции

#КонецОбласти

#Область ИмуществоВЭксплуатации

// Функция возвращает расшифровку срока полезного использования в годах и 
// месяцах.
//
// Параметры:
//  СрокПолезногоИспользования - Число - Срок полезного использования (в месяцах),
//                 подлежащий расшифровке.
//
// Возвращаемое значение:
//  Строка       - расшифровка срока полезного использования в годах и 
//                 месяцах.
//
Функция РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования) Экспорт
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если ЗначениеЗаполнено(СрокПолезногоИспользования) Тогда
	
		ЧислоЛет     = Цел(СрокПолезногоИспользования / 12);
		ЧислоМесяцев = (СрокПолезногоИспользования % 12);
		
		Если НЕ (ЧислоЛет = 0) Тогда
			
			// Построим строку с числом лет.
			Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
				СтрокаГод = " " + НСтр("ru = 'лет'");
			ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
				СтрокаГод = " " + НСтр("ru = 'год'");
			ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
				СтрокаГод = " " + НСтр("ru = 'года'");
			Иначе
				СтрокаГод = " " + НСтр("ru = 'лет'");
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + Строка(ЧислоЛет) + СтрокаГод;
			
		КонецЕсли;
		
		Если НЕ (ЧислоМесяцев = 0) Тогда
			
			// Построим строку с числом месяцев.
			Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
				СтрокаМесяц = " " + НСтр("ru = 'месяцев'");
			ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
				СтрокаМесяц = " " + НСтр("ru = 'месяц'");
			ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
				СтрокаМесяц = " " + НСтр("ru = 'месяца'");
			Иначе
				СтрокаМесяц = " " + НСтр("ru = 'месяцев'");
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + ?(НЕ ЗначениеЗаполнено(РасшифровкаСрокаПолезногоИспользования), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
		
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
		
	КонецЕсли;
	
	Возврат РасшифровкаСрокаПолезногоИспользования;
	
КонецФункции // РасшифровкаСрокаПолезногоИспользования()

#КонецОбласти

#Область Прочее

// Добавляет параметры выбора, которые используются в полях ввода.
//
// Параметры:
//  ТипПоляОбъекта	 - Тип - Тип значения в поле для которого заполняются параметры выбора.
//  СписокПараметров - Структура - Содержит значения других полей.
//  МассивПараметров - Массив - Содержит сформированные параметры выбора.
//
Процедура ДополнитьПараметрыВыбора(ТипПоляОбъекта, СписокПараметров, МассивПараметров) Экспорт

	Если ТипПоляОбъекта = Тип("СправочникСсылка.ПартииТМЦВЭксплуатации") Тогда
		ОграничениеВыбора = Ложь;
		Если СписокПараметров.Свойство("Организация") Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", СписокПараметров.Организация));
			ОграничениеВыбора = Истина;
		КонецЕсли;
		Если СписокПараметров.Свойство("Номенклатура") Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Номенклатура", СписокПараметров.Номенклатура));
			ОграничениеВыбора = Истина;
		КонецЕсли;
		Если ОграничениеВыбора Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("ОграничениеВыбора", Истина));
		КонецЕсли; 
	ИначеЕсли ТипПоляОбъекта = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов") Тогда
		Если СписокПараметров.Свойство("Контрагент") Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Контрагент));
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры


// Вызывается из библиотеки при необходимости получить признак использования межотчетного периода.
// См. БухгалтерскийУчетКлиентСервер.ИспользуетсяМежотчетныйПериод().
// 
// Параметры:
//  ИспользуетсяМежотчетныйПериод - Булево
Процедура ПриОпределенииИспользованияМежотчетногоПериода(ИспользуетсяМежотчетныйПериод) Экспорт
	
	ИспользуетсяМежотчетныйПериод = Истина;
	
КонецПроцедуры


// Передает признак использования Показателя Сверки НУ.
// 
// Возвращаемое значение:
//  Булево - Используется показатель сверки НУ
Функция ИспользуетсяПоказательСверкиНУ() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти