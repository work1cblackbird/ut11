
#Область ПрограммныйИнтерфейс

// Функция возвращает дополнительную колонку, выводимую в таблицу товаров печатных форм.
// 
// Параметры:
// 	КодЯзыка - Неопределено, Строка - Код языка, на котором нужно получить строку. Если неопределено, тогда КодОсновногоЯзыка.
// Возвращаемое значение:
// 	Структура:
// 		* ИмяКолонки - Строка - Имя колонки (для использования в коде).
// 		* ПредставлениеКолонки - Строка - Имя колонки (для вывода на экран с учетом языка пользователя).
Функция ДополнительнаяКолонкаПечатныхФормДокументов(КодЯзыка = Неопределено) Экспорт
	Если КодЯзыка = Неопределено Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Результат = Новый Структура("ИмяКолонки, ПредставлениеКолонки", "", "");
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Результат.ИмяКолонки = "Артикул";
		Результат.ПредставлениеКолонки = НСтр("ru = 'Артикул'", КодЯзыка);
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Результат.ИмяКолонки = "Код";
		Результат.ПредставлениеКолонки = НСтр("ru = 'Код'", КодЯзыка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку со сводным описанием организации / контрагента / физ.лица.
//
// Параметры: 
//  СписокСведений - Структура - значения параметров организации, формируется функцией СведенияОЮрФизЛице()
//  Список         - Строка - перечень запрашиваемых параметров организации, разделенных запятыми
//  СПрефиксом     - Булево - признак вывода префикса параметра организации.
//
// Возвращаемое значение:
//  Строка - описание организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		// Формат описания по умолчанию
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;
	
	// Перечень выводимых в описание реквизитов
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Список, ",", Истина);
	
	// Перечень реквизитов, которые идут как дополнение к "основным" реквизитам: НомерСчета и Свидетельство.
	ДополнительныеРеквизиты = Новый Структура("Банк,БИК,КоррСчет,СвидетельствоДатаВыдачи,БИКРКЦ");
	ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты, СписокСведений);
	
	// Пояснения к некоторым видам реквизитов, выводимые в описание
	ПрефиксыРеквизитов = Новый Структура;
	ПрефиксыРеквизитов.Вставить("ИНН",			НСтр("ru='ИНН %1'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПрефиксыРеквизитов.Вставить("КПП",			НСтр("ru='КПП %1'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПрефиксыРеквизитов.Вставить("Свидетельство",НСтр("ru='%1 от %2'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПрефиксыРеквизитов.Вставить("Телефоны",		НСтр("ru='тел.: %1'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПрефиксыРеквизитов.Вставить("НомерСчета",	НСтр("ru='%1 %2 в банке %3 %4 %5 %6 %7'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПрефиксыРеквизитов.Вставить("КодПоОКПО",	НСтр("ru='Код по ОКПО %1'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ПрефиксыРеквизитов.Вставить("КодОКВЭД",		НСтр("ru='Код ОКВЭД %1'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Описание = "";
	ПрефиксРеквизита  = Неопределено;
	ЗначениеРеквизита = Неопределено;
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		
		Если СПрефиксом И ДополнительныеРеквизиты.Свойство(ИмяРеквизита) Тогда
			Продолжить; // будет выведен вместе с "основным" реквизитом
		КонецЕсли;
		
		СписокСведений.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить; // или вообще нет такого реквизита, или он не заполнен
		КонецЕсли;
		
		Если СПрефиксом Тогда
			ПрефиксыРеквизитов.Свойство(ИмяРеквизита, ПрефиксРеквизита);
		КонецЕсли;
		
		Если СПрефиксом И ИмяРеквизита = "НомерСчета" Тогда
			
			ПредставлениеБанка = 
				?(ЗначениеЗаполнено(ДополнительныеРеквизиты.БИКРКЦ), СокрЛП(ДополнительныеРеквизиты.БИКРКЦ) + "//", "")
				+ СокрЛП(ДополнительныеРеквизиты.Банк);
			
			НаименованиеРасчетногоСчета = 
				?(ДенежныеСредстваКлиентСерверЛокализация.ЭтоКазначейскийСчет(ЗначениеРеквизита),
					"казн.счет",
					"р/с");
			
			НаименованиеБИК = 
				?(ДенежныеСредстваКлиентСерверЛокализация.ЭтоБИКТОФК(ДополнительныеРеквизиты.БИК),
					"БИК ТОФК",
					"БИК");
					
			НаименованиеКоррСчета = 
				?(ДенежныеСредстваКлиентСерверЛокализация.ЭтоЕдиныйКазначейскийСчет(ДополнительныеРеквизиты.КоррСчет),
					"ЕКС",
					"к/с");
			
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				НаименованиеРасчетногоСчета,
				СокрЛП(ЗначениеРеквизита),
				ПредставлениеБанка,
				НаименованиеБИК,
				СокрЛП(ДополнительныеРеквизиты.БИК),
				НаименованиеКоррСчета,
				СокрЛП(ДополнительныеРеквизиты.КоррСчет));
			
		ИначеЕсли СПрефиксом И ИмяРеквизита = "Свидетельство"
		 И ЗначениеЗаполнено(ДополнительныеРеквизиты.СвидетельствоДатаВыдачи) Тогда
			
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				СокрЛП(ЗначениеРеквизита),
				СокрЛП(ДополнительныеРеквизиты.СвидетельствоДатаВыдачи));
			
		ИначеЕсли ЗначениеЗаполнено(ПрефиксРеквизита) Тогда
			
			// У всех остальных реквизитов, кроме указанных выше, в префикс входит только один параметр.
			ДополнениеОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПрефиксРеквизита,
				СокрЛП(ЗначениеРеквизита));
			
		Иначе
			
			ДополнениеОписания = СокрЛП(ЗначениеРеквизита);
			
		КонецЕсли;
		
		Описание = Описание	+ ?(ПустаяСтрока(Описание), "", ", ") + ДополнениеОписания;
		
	КонецЦикла;
	
	Возврат СокрЛП(Описание);
	
КонецФункции

// Функция формирует сведения об указанном юридическом или физическом лице.
// К сведениям относятся: наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - Дата - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Булево - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Неопределено, СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Структура - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт
	СписокПолей = "Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм, АдресЭлектроннойПочты, СтранаРегистрации, НалоговыйНомерВСтранеРегистрации,
		|КодПоОКПО, КодОКВЭД, ИНН, КПП, Телефоны, ЭлектроннаяПочта, ЮридическийАдрес, ФактическийАдрес, Банк, БИК, КоррСчет, НомерСчета";
	УправлениеПечатьюЛокализация.ДополнитьСведенияОЮрФизЛицеВСпискеПолей(СписокПолей);
	Сведения = Новый Структура(СписокПолей);
	
	ЗаполнитьСведенияОЮрФизЛице(Сведения, ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы, БанковскийСчет);
	
	Возврат Сведения;
КонецФункции

// Формирует сведения об указанном юридическом или физическом лице.
// К сведениям относятся: наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  Сведения                 - Структура - собранные сведения.
//  ЮрФизЛицо                - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода              - Дата - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Булево - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет           - Неопределено, СправочникСсылка.БанковскиеСчетаКонтрагентов, СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, если счет не основной.
//
Процедура ЗаполнитьСведенияОЮрФизЛице(Сведения, ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ЮрФизЛицо)
		И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
		
		АдресЭлектроннойПочты = "";
		РеквизитыСчета = Новый Структура();
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(ЮрФизЛицо);
			НаименованияНаДату = ОрганизацииПовтИсп.НаименованияНаДату(ЮрФизЛицо, ДатаПериода);
			Если Не ПустаяСтрока(НаименованияНаДату.НаименованиеСокращенное) Тогда
				Реквизиты.Наименование = НаименованияНаДату.НаименованиеСокращенное;
				Реквизиты.Представление = НаименованияНаДату.НаименованиеСокращенное;	
			КонецЕсли;
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЮрФизЛицо, 
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
				ДатаПериода);
			
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Реквизиты = ПартнерыИКонтрагенты.РеквизитыКонтрагента(ЮрФизЛицо, ДатаПериода);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЮрФизЛицо, 
				Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
				ДатаПериода);
		КонецЕсли;

		Сведения.Вставить("Представление", 				 Реквизиты.Представление);
		Сведения.Вставить("СокращенноеНаименование", 	 Реквизиты.Представление);
		Сведения.Вставить("ПолноеНаименование", 		 Реквизиты.Наименование);
		Сведения.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.Наименование);
		Сведения.Вставить("НаименованиеМеждународное",   Реквизиты.НаименованиеМеждународное);
		Сведения.Вставить("ЮрФизЛицо", 					 Реквизиты.ЮрФизЛицо);
		Сведения.Вставить("ФИОФизлица", 				 "");
		Сведения.Вставить("ИНН", 						 Реквизиты.ИНН);
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
			Сведения.Вставить("Свидетельство", 			 Реквизиты.Свидетельство);
			Если Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
				Или Реквизиты.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ФИОФизлица = ФизическиеЛицаУТ.ФамилияИмяОтчество(Реквизиты.ИндивидуальныйПредприниматель, ДатаПериода);
				ФИОФизлицаСтрокой = ?(ПустаяСтрока(ФИОФизлица.Фамилия), "", ФИОФизлица.Фамилия
					+ ?(ПустаяСтрока(ФИОФизлица.Имя), "", " " + ФИОФизлица.Имя
					+ ?(ПустаяСтрока(ФИОФизлица.Отчество), "", " " + ФИОФизлица.Отчество)));
				Сведения.Вставить("ФИОФизлица", ФИОФизлицаСтрокой);
			КонецЕсли;
		Иначе
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
			Сведения.Вставить("Свидетельство", 			 "");
		КонецЕсли;
		
		Сведения.Вставить("Телефоны", 		  ФормированиеПечатныхФорм.ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("ЭлектроннаяПочта", ФормированиеПечатныхФорм.ПолучитьЭлектроннуюПочтуИзКонтактнойИнформации(ЮрФизЛицо));

		Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический", ДатаПериода));
		Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический", ДатаПериода));
		Сведения.Вставить("МеждународныйАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Международный", ДатаПериода));
		
		УправлениеПечатьюЛокализация.ДополнитьСведенияОЮрФизЛице(Сведения,Реквизиты, ЮрФизЛицо, ДатаПериода);
		
		Сведения.Вставить("НомерСчета",            РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк",                  РеквизитыСчета.Банк);
		Сведения.Вставить("КоррСчет",              РеквизитыСчета.КоррСчет);
		Сведения.Вставить("АдресБанка",            РеквизитыСчета.АдресБанка);
		Сведения.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
		
		УправлениеПечатьюЛокализация.ДополнитьСведенияОБанковскомСчете(РеквизитыСчета, Сведения, БанковскийСчет);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция находит актуальное значение адреса в контактной информации.
//
// Параметры:
//  Объект - СправочникСсылка - объект контактной информации
//  ТипАдреса - Строка - тип контактной информации
//	Дата - Дата - Дата, на которую надо получить юридический адрес организации. При незаполненном параметре будет получен 
//                   актуальный адрес. Для других типов адресов этот параметр можно не заполнять.
//
// Возвращаемое значение:
//  Строка - представление найденного адреса.
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "", Дата = Неопределено) Экспорт
	
	Адрес = "";
	ВидКонтактнойИнформации = "Адрес";
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
				ВидКонтактнойИнформации = "ФактАдресОрганизации";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидКонтактнойИнформации = "ФактАдресКонтрагента";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидКонтактнойИнформации = "ФактАдресПартнера";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
				ВидКонтактнойИнформации = "ФактАдресСклада";
			Иначе
				УправлениеПечатьюЛокализация.ПолучитьВидКонтактнойИнформации(
					Объект, ТипАдреса, ВидКонтактнойИнформации);
			КонецЕсли;
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
				ВидКонтактнойИнформации = "ЮрАдресОрганизации";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидКонтактнойИнформации = "ЮрАдресКонтрагента";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидКонтактнойИнформации = "ЮрАдресПартнера";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
				ВидКонтактнойИнформации = "ЮрАдресСклада";
			Иначе
				УправлениеПечатьюЛокализация.ПолучитьВидКонтактнойИнформации(
					Объект, ТипАдреса, ВидКонтактнойИнформации);
			КонецЕсли;
		ИначеЕсли ТипАдреса = "Международный" Тогда
			Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
				ВидКонтактнойИнформации = "МеждународныйАдресОрганизации";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидКонтактнойИнформации = "МеждународныйАдресКонтрагента";
			КонецЕсли;
		Иначе
			Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
				ВидКонтактнойИнформации = "АдресОрганизации";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидКонтактнойИнформации = "АдресКонтрагента";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
				ВидКонтактнойИнформации = "АдресПартнера";
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
				ВидКонтактнойИнформации = "АдресСклада";
			Иначе
				УправлениеПечатьюЛокализация.ПолучитьВидКонтактнойИнформации(
					Объект, ТипАдреса, ВидКонтактнойИнформации);
			КонецЕсли;
		КонецЕсли;
		
		ВидАдреса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации[ВидКонтактнойИнформации], "Ссылка");
		
		Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект, ВидАдреса, Дата);
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Функция находит актуальное значение телефона в контактной информации.
//
// Параметры:
//  Объект - СправочникСсылка - объект контактной информации.
//
// Возвращаемое значение:
//  Строка - представление найденного телефона.
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Имя = "ТелефонОрганизации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Имя = "ТелефонКонтрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Имя = "ТелефонПартнера";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
			Имя = "ТелефонСклада";
		КонецЕсли;
		
		ВидТелефона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыКонтактнойИнформации[Имя], "Ссылка");
		
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект, ВидТелефона, ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция находит актуальное значение электронной почты в контактной информации.
//
// Параметры:
//  Объект - СправочникСсылка - объект контактной информации.
//
// Возвращаемое значение:
//  Строка - представление найденной электронной почты.
//
Функция ПолучитьЭлектроннуюПочтуИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Окончание = "";
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Окончание) Тогда
			ВидКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыКонтактнойИнформации["Email" + Окончание], "Ссылка");
			Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект, ВидКИ, ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// АПК:142-выкл Особенность реализации.
// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - Число - число, которое мы хотим форматировать, 
//  Валюта - СправочникСсылка.Валюты - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - Строка - строка, представляющая нулевое значение числа,
//  ЧРГ    - Строка - символ-разделитель групп целой части числа.
//  КодЯзыка - Строка - Имя языка, страны, для которых будет выполняться форматирование числа
//
// Возвращаемое значение:
//  Строка - отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "", КодЯзыка = Неопределено) Экспорт
	
	ФорматнаяСтрока = "ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ)
					+ ?(НЕ ЗначениеЗаполнено(КодЯзыка),"", ";" + "Л=" + КодЯзыка);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()
// АПК:142-вкл

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение:
//  Строка - Отформатированная строка.
//
Функция СуммаПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
			
		Иначе
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СуммаПлатежногоДокумента()

// Функция формирует представление суммы в рублях и копейках.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//  ВалютаРегламентированногоУчета - СправочникСсылка.Валюты - Валюта регламентированного учета.
//
// Возвращаемое значение:
//  Строка - Отформатированная сумма.
//
Функция СуммаРубКоп(Сумма, Валюта, ВалютаРегламентированногоУчета) Экспорт
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		Рубли = Цел(Сумма);
		Копейки = Окр(100 * (Сумма - Рубли), 0, 1);
		СуммаРубКоп = "" 
			+ Формат(Рубли, "ЧДЦ=0; ЧГ=0")
			+ " руб. " 
			+ Цел(Копейки /10) 
			+ (Копейки - 10 * Цел(Копейки / 10))
			+" коп."
		;
	Иначе
		СуммаРубКоп = СуммаПлатежногоДокумента(Сумма, Ложь);
	КонецЕсли;
	
	Возврат СуммаРубКоп;
	
КонецФункции // СуммаРубКоп()

// Функция возвращает структуру с заголовками Скидка или Наценка для таблицы печатной формы,
// а также с флагами ЕстьСкидки и ТолькоНаценка.
// 
// Параметры:
//  Товары 	- ТаблицаЗначений - Табличная часть документа 
//  ИспользоватьСкидки 	- Булево - Признак использования скидки.
//
// Возвращаемое значение:
//   Структура - Параметры скидки:
//       * Скидка 			- Строка - Текст для скидки(наценки).
//       * СуммаСкидки    	- Строка - Текст для суммы.
//       * ЕстьСкидки   	- Булево - Признак наличия скидки или наценки.
//       * ТолькоНаценка 	- Булево - Признак наличия только наценки.
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	ЕстьНаценки = Ложь;
	ЕстьСкидки  = Ложь;
	
	СтруктураШапки = Новый Структура("Скидка, СуммаСкидки, ЕстьСкидки, ТолькоНаценка");
	
	Если ИспользоватьСкидки Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если СтрокаТоваров.СуммаСкидки>0 Тогда
					ЕстьСкидки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если СтрокаТоваров.СуммаСкидки<0 Тогда
					ЕстьНаценки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Пока Товары.Следующий() Цикл
				Если Товары.СуммаСкидки>0 Тогда
					ЕстьСкидки = Истина;
				ИначеЕсли Товары.СуммаСкидки<0 Тогда
					ЕстьНаценки = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьНаценки И ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка", НСтр("ru = 'Скидка (Наценка)'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураШапки.Вставить("СуммаСкидки", НСтр("ru = 'Сумма'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ Символы.ПС + НСтр("ru = 'без скидки (наценки)'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураШапки.Вставить("ТолькоНаценка", Ложь);
		ИначеЕсли ЕстьНаценки И НЕ ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка", НСтр("ru = 'Наценка'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураШапки.Вставить("СуммаСкидки", НСтр("ru = 'Сумма'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ Символы.ПС + НСтр("ru = 'без наценки'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураШапки.Вставить("ТолькоНаценка", Истина);
		ИначеЕсли ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка", НСтр("ru = 'Скидка'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураШапки.Вставить("СуммаСкидки", НСтр("ru = 'Сумма'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ Символы.ПС + НСтр("ru = 'без скидки'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураШапки.Вставить("ТолькоНаценка", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапки.Вставить("ЕстьСкидки", ЕстьНаценки ИЛИ ЕстьСкидки);

	Возврат СтруктураШапки;

КонецФункции // НужноВыводитьСкидки()

// Функция проверяет, что в строке товара заполнена номенклатура,
// и выдает сообщение, если не заполнена.
// 
// Параметры:
//  СтрокаТовары 	- СтрокаТаблицыЗначений - Строка табличной части документа 
//  НомерСтроки 	- Число - Номер передаваемой строки из ТЧ документа.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ПроверитьЗаполнениеНоменклатуры(СтрокаТовары, НомерСтроки) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		
		ТекстОшибки = НСтр("ru='В строке %НомерСтроки% не заполнено значение номенклатуры - строка при печати пропущена.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеНоменклатуры()

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - СправочникСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//  Строка - строка.
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()

// Создает соответствие ставок и сумм НДС
//
// Возвращаемое значение:
//  Соответствие - соответствие ставок и сумм НДС.
//
Функция СоответствиеСтавокИСуммНДС() Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	
	СтавкиНДС = Справочники.СтавкиНДС.Выбрать();
	
	Пока СтавкиНДС.Следующий() Цикл
		Если НЕ СтавкиНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС") Тогда
			СоответствиеСтавокНДС.Вставить(СтавкиНДС, 0);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеСтавокНДС;
	
КонецФункции // ПолучитьСоответствиеСтавокНДС()

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу.
//
// Возвращаемое значение:
//  Строка - текст НДС.
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч.'") + " " + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Формирует строковое описание периода действия
//
// Параметры:
// 		ДатаНачалаДействия - Дата - Дата начала действия
// 		ДатаОкончанияДействия - Дата - Дата окончания действия.
//
// Возвращаемое значение:
// 		Строка - Строковое описание периода действия.
//
Функция СформироватьТекстПериодДействия(ДатаНачалаДействия, ДатаОкончанияДействия) Экспорт
	
	ПустаяДата = Дата(1,1,1);
	
	Если ДатаНачалаДействия = ПустаяДата И ДатаОкончанияДействия = ПустаяДата Тогда
		
		Возврат НСтр("ru = 'Срок действия не ограничен.'");
		
	ИначеЕсли  ДатаНачалаДействия <> ПустаяДата И ДатаОкончанияДействия = ПустаяДата Тогда
		
		Возврат  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует с %1.'"),
			Формат(ДатаНачалаДействия,"ДЛФ=DD"));
		
	ИначеЕсли ДатаНачалаДействия = ПустаяДата И ДатаОкончанияДействия <> ПустаяДата Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует по %1.'"),
			Формат(ДатаОкончанияДействия,"ДЛФ=DD"));
		
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует с %1 по %2.'"),
			Формат(ДатаНачалаДействия,"ДЛФ=DD"),
			Формат(ДатаОкончанияДействия,"ДЛФ=DD"));
		
	КонецЕсли;
	
КонецФункции // СформироватьТекстПериодДействия()

// Формирует текст НДС
//
// Параметры:
//  НалогообложениеНДС  - Строка - Наименование типа НалогообложенияНДС, для которого необходимо сформировать текст
//  ЦенаВключаетНДС 	- Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//  Строка - сформированный текст.
//
Функция СформироватьТекстНДС(НалогообложениеНДС, ЦенаВключаетНДС)Экспорт
	
	Возврат НалогообложениеНДС + ?(ЦенаВключаетНДС,Нстр("ru='. Цена включает НДС.'"),Нстр("ru='. Цена не включает НДС.'"));
	
КонецФункции // СформироватьТекстНДС()

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	Если НЕ РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОбъектовПечати) = Тип("Массив") Тогда
		СоответствиеТиповДанныхОбъектовПечати = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(ДанныеОбъектовПечати);
	Иначе
		СоответствиеТиповДанныхОбъектовПечати = ДанныеОбъектовПечати;
	КонецЕсли;
	
	СоответствиеТиповДанныхОбъектовПечати = ДополнитьСоответствиеДанныхОбъектовПечати(СоответствиеТиповДанныхОбъектовПечати);
	
	Если Не ЗаполнениеПараметровОтправкиВозможно(СоответствиеТиповДанныхОбъектовПечати) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолучателей(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Выводит логотип в табличный документ. Если в переданной области макета картинки
// логотипа нет, находится отдельная область с логотипом в макете и логотип выводится
// в данную область.
//
// Параметры:
// 		Макет - ТабличныйДокумент - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ИмяОбласти - Строка - Название передаваемой области
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения логотипа.
//
Процедура ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, ИмяОбласти, Организация)Экспорт
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлЛоготип");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, "Логотип") Тогда
		// Картинки логотипа в этой области макета нет.
		
		Если Макет.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			
			// Проверка картинки логотипа в области с логотипом
			ОбластьМакетаЛоготип = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакетаЛоготип.Рисунки, "Логотип") 
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаЛоготип;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки.Логотип);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки.Логотип.Картинка = Картинка;
	
КонецПроцедуры

// Выводит факсимиле в табличный документ, заменяя переданную область картинкой факсимиле.
//
// Параметры:
// 		Макет - ТабличныйДокумент - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения факсимиле
// 		ПараметрыПечати - Структура - Содержит структуру параметров печати.
//
Процедура ВывестиФаксимилеВТабличныйДокумент(Макет, ОбластьМакета, Организация, ПараметрыПечати = Неопределено) Экспорт
	
	ОтображатьФаксимиле = Ложь;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда
		ОтображатьФаксимиле = ПараметрыПечати.ОтображатьФаксимиле;
	КонецЕсли;
	
	Если НЕ ОтображатьФаксимиле Тогда
		Возврат
	КонецЕсли;
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлФаксимильнаяПечать");
	
	Если ОтображатьФаксимиле И НЕ ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru ='Факсимиле для организации не указано. 
			|Укажите файл с факсимиле в карточке организации, раздел ""Настройка печати"".'"));
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, "Факсимиле") Тогда
		// Картинки Факсимиле в этой области макета нет.
		
		Если Макет.Области.Найти("ОбластьФаксимиле") <> Неопределено Тогда
			
			// Проверить картинку факсимиле в области "ОбластьФаксимиле"
			ОбластьМакетаФаксимиле = Макет.ПолучитьОбласть("ОбластьФаксимиле");
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакетаФаксимиле.Рисунки, "Факсимиле")
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаФаксимиле;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки.Факсимиле);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки.Факсимиле.Картинка = Картинка;
	
КонецПроцедуры

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - Число - число, которое необходимо отформатировать.
//
// Возвращаемое значение:
//  Строка - отформатированное должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";
	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";
	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеПараметровОтправкиПечатныхФормПоЭлектроннойПочте

Процедура ЗаполнитьПолучателей(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм) 
	
	МассивДокументовРодителей = Новый Массив;
	
	СформироватьТемуИТекстПисьма(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм, МассивДокументовРодителей);
	СформироватьПараметрыОтправки(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, МассивДокументовРодителей);
	
КонецПроцедуры

Процедура СформироватьТемуИТекстПисьма(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм, МассивДокументовРодителей)
	
	Запрос = Новый Запрос;
		
	Счетчик = 1;
	КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
		
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		ТекстЗапросаПоЭлементуСоответствия = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ОбъектМетаданных.Представление КАК ПредставлениеОбъектаПечати,
		|	ОбъектМетаданных.Ссылка КАК СсылкаНаОбъектПечати,
		|	&СинонимОбъектаМетаданных КАК СинонимОбъектаМетаданных,
		|	&НомерДокумента КАК НомерДокумента,
		|	&ДатаДокумента КАК ДатаДокумента
		|ИЗ
		|	&ОбъектМетаданных КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Ссылка В (&МассивСсылок) 
		|
		|И &ОБЪЕДИНИТЬВСЕ
		|";
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(Счетчик), ЭлементСоответствия.Значение.МассивДанных);
		Запрос.УстановитьПараметр("СинонимОбъектаМетаданных_" + Строка(Счетчик),Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ).Синоним);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&МассивСсылок", "&МассивСсылок_" + Строка(Счетчик));
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&СинонимОбъектаМетаданных", "&СинонимОбъектаМетаданных_" + Строка(Счетчик));
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&ОбъектМетаданных", ЭлементСоответствия.Ключ);
		
		Если Счетчик > 1 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "РАЗРЕШЕННЫЕ", "");
		КонецЕсли;
		
		Если СтрНайти(ЭлементСоответствия.Ключ,"Документ") > 0 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&НомерДокумента", "ОбъектМетаданных.Номер");
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&ДатаДокумента", "ОбъектМетаданных.Дата");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&НомерДокумента", "NULL");
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&ДатаДокумента", "NULL");
		КонецЕсли;
		
		Если Счетчик = КоличествоЭлементовВСоответствии Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "И &ОБЪЕДИНИТЬВСЕ", "");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "И &ОБЪЕДИНИТЬВСЕ", "ОБЪЕДИНИТЬ ВСЕ");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоЭлементуСоответствия;
		
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = НСтр("ru = 'Во вложении печатные формы.'") + Символы.ПС;
	
	Выборка = Результат.Выбрать();
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + "   " + ПечатнаяФорма.СинонимМакета + Символы.ПС;
	КонецЦикла;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + НСтр("ru = 'Для документов:'") + Символы.ПС;
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + "   " + ПредставлениеОбъектаПечати(Выборка, Истина) + Символы.ПС;
		ПолучитьРодительскиеДокументы(МассивДокументовРодителей,Выборка.СсылкаНаОбъектПечати);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолучателяПечатнойФормы(Получатели, ДанныеПолучателя, Пояснение = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеПолучателя.Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВозможныйПолучатель Из Получатели Цикл
		
		Если ВозможныйПолучатель.ВидПочтовогоАдреса = Строка(ДанныеПолучателя.ВидПочтовогоАдреса)
			И СокрЛП(ВозможныйПолучатель.Адрес) = СокрЛП(ДанныеПолучателя.Адрес) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Пояснение) Тогда
		Получатель = Неопределено;
		Для каждого Получатель Из Получатели Цикл
			Если Получатель.ИсточникКонтактнойИнформации = ДанныеПолучателя.ИсточникКонтактнойИнформации Тогда
				Если СтрНайти(Получатель.Адрес, ДанныеПолучателя.Адрес) = 0 Тогда
					Получатель.Адрес = Получатель.Адрес + "; " + ДанныеПолучателя.Адрес;
				КонецЕсли;
				Пояснение = ПредставлениеОбъектаПечати(ДанныеПолучателя);
				Если СтрНайти(Получатель.Пояснение, Пояснение) = 0 Тогда
					Получатель.Пояснение = Получатель.Пояснение + ", " + Пояснение;
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПредставлениеОбъектаПечати = ПредставлениеОбъектаПечати(ДанныеПолучателя);
		Пояснение = ДанныеПолучателя.СинонимРеквизитаПолучателя + " " 
		            + ?(ПустаяСтрока(ПредставлениеОбъектаПечати),"", НСтр("ru = 'из'")) + " " + ПредставлениеОбъектаПечати;
	КонецЕсли;
	
	СтруктураПолучатель = Новый Структура;
	СтруктураПолучатель.Вставить("Адрес", ДанныеПолучателя.Адрес);
	СтруктураПолучатель.Вставить("Представление", ДанныеПолучателя.ПредставлениеПолучателя);
	СтруктураПолучатель.Вставить("ИсточникКонтактнойИнформации", ДанныеПолучателя.ИсточникКонтактнойИнформации);
	СтруктураПолучатель.Вставить("ВидПочтовогоАдреса", Строка(ДанныеПолучателя.ВидПочтовогоАдреса));
	СтруктураПолучатель.Вставить("Пояснение", Пояснение);
	СтруктураПолучатель.Вставить("ОбъектИсточник", ДанныеПолучателя.СсылкаНаОбъектПечати);
	
	Получатели.Добавить(СтруктураПолучатель);
	
КонецПроцедуры

Функция ПредставлениеОбъектаПечати(ДанныеПолучателя,ПреобразовыватьПредставлениеДокумента = Ложь)
	
	ТипСсылки = ТипЗнч(ДанныеПолучателя.СсылкаНаОбъектПечати);
	
	Если ТипСсылки = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат НСтр("ru = 'Договор'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Возврат НСтр("ru = 'Соглашение с клиентом'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		Возврат НСтр("ru = 'Сделка с клиентом'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат "";
	Иначе
		Если ПреобразовыватьПредставлениеДокумента Тогда
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПолучателя.НомерДокумента, Ложь, Истина);
			ДатаДокумента  = ДанныеПолучателя.ДатаДокумента;
			
			ПредставлениеДокумента = НСтр("ru='%Синоним% №%Номер% от %Дата%'");
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Номер%", НомерДокумента);
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Синоним%", ДанныеПолучателя.СинонимОбъектаМетаданных);
			Возврат ПредставлениеДокумента;
			
		Иначе
			Возврат ДанныеПолучателя.ПредставлениеОбъектаПечати;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

// Функция-конструктор - создает структуру данных объекта печати
// 
// Возвращаемое значение:
// 	Структура - состоит из:
// * ОсновнойПолучатель - Строка - 
// * МассивРеквизитовПолучателей - Массив из Строка - 
// * МассивДанных - Массив из ЛюбаяСсылка - 
// 
Функция НоваяСтруктураДанныхОбъектаПечати() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ОсновнойПолучатель", "");
	Результат.Вставить("МассивРеквизитовПолучателей", Новый Массив);
	Результат.Вставить("МассивДанных");
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьСоответствиеДанныхОбъектовПечати(СоответствиеТиповДанныхОбъектовПечати)

	ДополненноеСоответствие = Новый Соответствие;
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		СтруктураДанныхОбъектаПечати = НоваяСтруктураДанныхОбъектаПечати();
		СтруктураДанныхОбъектаПечати.МассивДанных = ЭлементСоответствия.Значение;

		ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ЭлементСоответствия.Ключ , СтруктураДанныхОбъектаПечати);
		
		ДополненноеСоответствие.Вставить(ЭлементСоответствия.Ключ, СтруктураДанныхОбъектаПечати);
	
	КонецЦикла;
	
	Возврат ДополненноеСоответствие;

КонецФункции

// Параметры:
// 	ПолноеИмяОбъектаМетаданных - Строка - 
// 	СтруктураДанныхОбъектаПечати - Структура - состоит из:
// * ОсновнойПолучатель - Строка -
// * МассивРеквизитовПолучателей - Массив из Строка -
// * МассивДанных - Массив из ДокументСсылка -
// 
Процедура ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ПолноеИмяОбъектаМетаданных , СтруктураДанныхОбъектаПечати) Экспорт
	
	Если ПолноеИмяОбъектаМетаданных = "Справочник.Партнеры"
		Или ПолноеИмяОбъектаМетаданных = "Справочник.Претензии"
		Или ПолноеИмяОбъектаМетаданных = "Документ.АктВыполненныхРабот"
		Или ПолноеИмяОбъектаМетаданных = "Документ.АктОРасхожденияхПослеОтгрузки"
		Или ПолноеИмяОбъектаМетаданных = "Документ.АктОРасхожденияхПослеПриемки"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВзаимозачетЗадолженности"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровМеждуОрганизациями" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровОтКлиента" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровПоставщику"
		Или ПолноеИмяОбъектаМетаданных = "Документ.КоммерческоеПредложениеКлиенту"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ЗаказКлиента"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ЗаказПоставщику"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ЗаявкаНаВозвратТоваровОтКлиента"
		Или ПолноеИмяОбъектаМетаданных = "Документ.КорректировкаРеализации"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтгрузкаТоваровСХранения"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВыкупПринятыхНаХранениеТоваров"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПриемкаТоваровНаХранение"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПоступлениеТоваровОтХранителя"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПередачаТоваровХранителю"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПорчаТоваровУХранителя"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПересортицаТоваровУХранителя"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомиссионера"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомиссионераОСписании"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомитенту" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомитентуОСписании"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетПоКомиссииМеждуОрганизациями"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетОСписанииТоваровУХранителя"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПередачаТоваровМеждуОрганизациями"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПеремещениеТоваров"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПриобретениеТоваровУслуг"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПриходныйКассовыйОрдер"
		Или ПолноеИмяОбъектаМетаданных = "Документ.РасходныйКассовыйОрдер"
		Или ПолноеИмяОбъектаМетаданных = "Документ.РеализацияТоваровУслуг"
		Или ПолноеИмяОбъектаМетаданных = "Документ.РеализацияУслугПрочихАктивов"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СверкаВзаиморасчетов2_4"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СверкаВзаиморасчетов2_5_11"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СписаниеБезналичныхДенежныхСредств"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СчетНаОплатуКлиенту"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОприходованиеИзлишковТоваровУХранителя" Тогда
		
		ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати);
		
	КонецЕсли;
	
	УправлениеПечатьюЛокализация.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ПолноеИмяОбъектаМетаданных , СтруктураДанныхОбъектаПечати);
	
КонецПроцедуры

Функция ЗаполнениеПараметровОтправкиВозможно(СоответствиеТиповДанныхОбъектовПечати)
	
	Запрос = Новый Запрос;
	
	Счетчик = 1;
	ЭтоПервыйЭлементЗапроса = Истина;
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСоответствия.Значение.ОсновнойПолучатель) Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст  + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапросаПоЭлементуСоответствия = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	&ИмяРеквизита КАК ОсновнойПолучатель
		|ИЗ
		|	&ОбъектМетаданных КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Ссылка В (&МассивСсылок)
		|";
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(Счетчик), ЭлементСоответствия.Значение.МассивДанных);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&МассивСсылок", "&МассивСсылок_" + Строка(Счетчик));
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&ОбъектМетаданных", ЭлементСоответствия.Ключ);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "&ИмяРеквизита", "ОбъектМетаданных."+ЭлементСоответствия.Значение.ОсновнойПолучатель);
		
		Если ЭтоПервыйЭлементЗапроса Тогда
			ЭтоПервыйЭлементЗапроса = Ложь;
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "РАЗРЕШЕННЫЕ ПЕРВЫЕ 2", "");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоЭлементуСоответствия;
		
	КонецЦикла;
	
	// Если основные получатели не заданы, то и посылать нет смысла
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

Процедура ПолучитьРодительскиеДокументы(МассивДокументовРодителей, ДокументПечати) Экспорт

	Если ДокументПечати.Метаданные().Реквизиты.Найти("КонтактноеЛицо") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДокументов = Новый ДеревоЗначений;
	ДеревоДокументов.Колонки.Добавить("Ссылка");
	ДополнитьДеревоРодительскихДокументов(ДокументПечати, ДеревоДокументов);
	
	ДобавитьРодительскиеДокументыВМассивИзДерева(ДеревоДокументов, МассивДокументовРодителей)

КонецПроцедуры

Процедура ДобавитьРодительскиеДокументыВМассивИзДерева(ДеревоРодитель, МассивДокументовРодителей)

	СтрокиДерева = ДеревоРодитель.Строки;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если МассивДокументовРодителей.Найти(СтрокаДерева.Ссылка) = Неопределено Тогда
			МассивДокументовРодителей.Добавить(СтрокаДерева.Ссылка);
		КонецЕсли;
		ДобавитьРодительскиеДокументыВМассивИзДерева(СтрокаДерева, МассивДокументовРодителей);
	КонецЦикла;

КонецПроцедуры

Функция РеквизитУдовлетворяетУсловиям(Реквизит)

	Возврат Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) ИЛИ 
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) ИЛИ
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СоглашенияСКлиентами")) ИЛИ
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СделкиСКлиентами"));

КонецФункции

Процедура ДополнитьДеревоРодительскихДокументов(ТекущийДокумент, ДеревоРодитель)

	СтрокиДерева = ДеревоРодитель.Строки;
	МетаданныеДокумента        = ТекущийДокумент.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеДокумента.ПолноеИмя();
	
	СписокРеквизитов    = Новый СписокЗначений;
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		Если РеквизитУдовлетворяетУсловиям(Реквизит) Тогда
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				
				Если МетаданныеРеквизита <> Неопределено
					И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	&ИмяРеквизита КАК ЗначениеРеквизита
					|ИЗ
					|	&ПолноеИмяОбъектаМетаданных КАК ОбъектМетаданных
					|ГДЕ
					|	ОбъектМетаданных.Ссылка = &ТекущийДокумент");
					
					Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизита", Реквизит.Имя);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗначениеРеквизита = Выборка.ЗначениеРеквизита;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";

		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл

			Если РеквизитУдовлетворяетУсловиям(Реквизит) Тогда
				
				Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
					Если МетаданныеРеквизита<>Неопределено
						И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
						И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
						
						СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(СтрРеквизитов) Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеТЧ = ТекущийДокумент[ТЧ.Имя].Выгрузить(); // ТаблицаЗначений
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл

			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл

				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];

				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения <> Неопределено Тогда

					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И (Метаданные.Документы.Содержит(МетаданныеЗначения) ИЛИ Метаданные.Справочники.Содержит(МетаданныеЗначения))
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда

							СписокРеквизитов.Добавить(ЗначениеРеквизита);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		
		Если СодержитсяВПодсистеме("Продажи", МетаданныеДокумента) 
			И СодержитсяВПодсистеме("Закупки", ЭлементСписка.Значение.Метаданные()) Тогда
			
			Продолжить;
			
		ИначеЕсли  СодержитсяВПодсистеме("Закупки", МетаданныеДокумента) 
			И СодержитсяВПодсистеме("Продажи", ЭлементСписка.Значение.Метаданные()) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Ссылка = ЭлементСписка.Значение;
		Если НЕ ДобавляемаяСсылкаИмеетсяСредиРодителей(ДеревоРодитель, ЭлементСписка.Значение) Тогда
			ДополнитьДеревоРодительскихДокументов(ЭлементСписка.Значение, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СодержитсяВПодсистеме(ИмяПодсистемы, ОбъектМетаданных)
	
	МетаданныеПодсистемы = Метаданные.Подсистемы[ИмяПодсистемы];
	
	Если МетаданныеПодсистемы.Состав.Содержит(ОбъектМетаданных) Тогда
		
		Возврат Истина;
	
	КонецЕсли;
	
	Для Каждого ПодчиненнаяПодсистема Из МетаданныеПодсистемы.Подсистемы Цикл
		
		Если ПодчиненнаяПодсистема.Состав.Содержит(ОбъектМетаданных) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДобавляемаяСсылкаИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйДокумент)
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДеревоЗначений") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.Ссылка = ИскомыйДокумент Тогда
			Возврат Истина;
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьПараметрыОтправки(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, МассивДокументовРодителей, ТребуетсяТелефоны = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	СчетчикОбъектовМетаданных = 1;
	ПервыйЗапросВОбъединении = Истина;
	КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		МассивРеквизитовПолучателей = ЭлементСоответствия.Значение.МассивРеквизитовПолучателей;
		
		Если МассивРеквизитовПолучателей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеОбъектаПолучателя = Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ);
		Если МетаданныеОбъектаПолучателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикРеквизитовПолучателей = 1;
		КоличествоЭлементовВМассиве = МассивРеквизитовПолучателей.Количество();
		
		Для каждого ИмяРеквизитаПолучателя Из МассивРеквизитовПолучателей Цикл
			
			ТабличнаяЧасть = Неопределено;
			Если ИмяРеквизитаПолучателя = "Ссылка" Тогда
				СинонимРеквизитаПолучателя = МетаданныеОбъектаПолучателя.ПредставлениеОбъекта;
				ОписаниеТиповРеквизита = Новый ОписаниеТипов((СтрЗаменить(ЭлементСоответствия.Ключ, "Справочник", "СправочникСсылка")));
				ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ;
			Иначе
				РеквизитПолучателя = МетаданныеОбъектаПолучателя.Реквизиты.Найти(ИмяРеквизитаПолучателя);
				ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ;
				
				Если РеквизитПолучателя = Неопределено Тогда
					ДанныеРеквизита = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизитаПолучателя,".");
					Если ДанныеРеквизита.Количество() = 2 Тогда
						ИмяТабличнойЧасти = ДанныеРеквизита[0];
						ТабличнаяЧасть    = МетаданныеОбъектаПолучателя.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
						Если ТабличнаяЧасть <> Неопределено Тогда
							ИмяРеквизитаПолучателя = ДанныеРеквизита[1];
							РеквизитПолучателя = ТабличнаяЧасть.Реквизиты.Найти(ИмяРеквизитаПолучателя);
							Если РеквизитПолучателя = Неопределено Тогда
								Продолжить;
							Иначе
								ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ + "." + ИмяТабличнойЧасти;
							КонецЕсли;
						Иначе
							МетаданныеРеквизита = МетаданныеОбъектаПолучателя.Реквизиты.Найти(ДанныеРеквизита[0]);
							Если МетаданныеРеквизита <> Неопределено Тогда
								Для Каждого ТипРеквизита Из МетаданныеРеквизита.Тип.Типы() Цикл
									МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(ТипРеквизита);
									Если МетаданныеТипаРеквизита <> Неопределено Тогда
										РеквизитПолучателя = МетаданныеТипаРеквизита.Реквизиты.Найти(ДанныеРеквизита[1]);
										Если РеквизитПолучателя = Неопределено Тогда
											Продолжить;
										КонецЕсли;
									Иначе
										Продолжить;
									КонецЕсли;
								КонецЦикла;
								Если РеквизитПолучателя = Неопределено Тогда
									Продолжить;
								КонецЕсли;
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СинонимРеквизитаПолучателя = РеквизитПолучателя.Синоним;
				ОписаниеТиповРеквизита     = РеквизитПолучателя.Тип;
				
			КонецЕсли;
			
			ПредставлениеПолучателя = "ПРЕДСТАВЛЕНИЕ(ОбъектПечати."+ИмяРеквизитаПолучателя + ")";
			Если ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
					ИмяТаблицыКонтактнойИнформации = "Справочник.Партнеры.КонтактнаяИнформация";
				ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ИмяТаблицыКонтактнойИнформации = "Справочник.Контрагенты.КонтактнаяИнформация";
					ПредставлениеПолучателя = "ОбъектПечати."+ИмяРеквизитаПолучателя + ".НаименованиеПолное";
				ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
					ИмяТаблицыКонтактнойИнформации = "Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация";
				Иначе
					
					Продолжить;
					
			КонецЕсли;
			
			ТекстЗапросаПоРеквизиту ="
			|
			|%ОБЪЕДИНИТЬВСЕ%
			|" ;
			
			ТекстЗапросаПоРеквизиту = ТекстЗапросаПоРеквизиту + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&ПредставлениеОбъектаПечати               КАК ПредставлениеОбъектаПечати,
			|	ОбъектПечати.Ссылка                       КАК СсылкаНаОбъектПечати,
			|	&СинонимРеквизитаПолучателя               КАК СинонимРеквизитаПолучателя,
			|	&ИмяРеквизитаПолучателя                   КАК ИсточникКонтактнойИнформации,
			|	&ПредставлениеПолучателя                  КАК ПредставлениеПолучателя,
			|	ТаблицаКонтактнойИнформации.Представление КАК Адрес,
			|	ТаблицаКонтактнойИнформации.Вид           КАК ВидПочтовогоАдреса
			|ИЗ
			|	&ОбъектПечати КАК ОбъектПечати
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаКонтактнойИнформации КАК ТаблицаКонтактнойИнформации
			|		ПО &ИмяРеквизитаПолучателя = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	ОбъектПечати.Ссылка В(&МассивСсылок)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&МассивСсылок", "&МассивСсылок_" + Строка(СчетчикОбъектовМетаданных));
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&СинонимРеквизитаПолучателя", "&СинонимРеквизитаПолучателя_" + Строка(СчетчикОбъектовМетаданных) + "_" + Строка(СчетчикРеквизитовПолучателей));
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&ИмяРеквизитаПолучателя", "ОбъектПечати."+ИмяРеквизитаПолучателя);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&ПредставлениеПолучателя", ПредставлениеПолучателя);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&ОбъектПечати", ТаблицаОбъектаПечати);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&ТаблицаКонтактнойИнформации", ИмяТаблицыКонтактнойИнформации);
			
			Запрос.УстановитьПараметр("СинонимРеквизитаПолучателя_" + Строка(СчетчикОбъектовМетаданных) + "_" + Строка(СчетчикРеквизитовПолучателей), СинонимРеквизитаПолучателя);
			
			Если ПервыйЗапросВОбъединении Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОБЪЕДИНИТЬВСЕ%", "");
				ПервыйЗапросВОбъединении = Ложь;
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "РАЗРЕШЕННЫЕ", "");
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			Если ТабличнаяЧасть = Неопределено Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&ПредставлениеОбъектаПечати", "ОбъектПечати.Представление");
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "&ПредставлениеОбъектаПечати", "ОбъектПечати.Ссылка.Представление");
			КонецЕсли;
			
			Если ТребуетсяТелефоны Тогда
				
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "АдресЭлектроннойПочты", "Телефон");
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРеквизиту;
			СчетчикРеквизитовПолучателей = СчетчикРеквизитовПолучателей + 1;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(СчетчикОбъектовМетаданных), ЭлементСоответствия.Значение.МассивДанных);
		СчетчикОбъектовМетаданных = СчетчикОбъектовМетаданных + 1;
		
	КонецЦикла;
	
	Если МассивДокументовРодителей.Количество() > 0 Тогда
		
		СчетчикТипыДокументыРодители = 1;
		СоответствиеТиповДанныхРодительскихДокументов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивДокументовРодителей);
		Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхРодительскихДокументов Цикл
			
			Если Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ).Реквизиты.Найти("КонтактноеЛицо") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапросаПоДокументуРодителю = "
			|
			|%ОБЪЕДИНИТЬВСЕ%
			|";
			ТекстЗапросаПоДокументуРодителю = ТекстЗапросаПоДокументуРодителю + "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументРодитель.Представление КАК ПредставлениеОбъектаПечати,
			|	ДокументРодитель.Ссылка КАК СсылкаНаОбъектПечати,
			|	&КонтактноеЛицо КАК СинонимРеквизитаПолучателя,
			|	ДокументРодитель.КонтактноеЛицо КАК ИсточникКонтактнойИнформации,
			|	ПРЕДСТАВЛЕНИЕ(ДокументРодитель.КонтактноеЛицо) КАК ПредставлениеПолучателя,
			|	ТаблицаКонтактнойИнформации.Представление КАК Адрес,
			|	ТаблицаКонтактнойИнформации.Вид КАК ВидПочтовогоАдреса
			|ИЗ
			|	&ДокументРодитель КАК ДокументРодитель
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ПО ДокументРодитель.КонтактноеЛицо = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	ДокументРодитель.Ссылка В(&МассивСсылок)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
			ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "&ДокументРодитель", ЭлементСоответствия.Ключ);
			ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "&МассивСсылок", "&МассивСсылокДокументыРодители_" + Строка(СчетчикТипыДокументыРодители));
			
			Если ПервыйЗапросВОбъединении Тогда
				ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "%ОБЪЕДИНИТЬВСЕ%", "");
				ПервыйЗапросВОбъединении = Ложь;
			Иначе
				ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "РАЗРЕШЕННЫЕ", "");
				ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			Если ТребуетсяТелефоны Тогда
				ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "АдресЭлектроннойПочты", "Телефон");
			КонецЕсли;

			Запрос.УстановитьПараметр("МассивСсылокДокументыРодители_" + Строка(СчетчикТипыДокументыРодители), ЭлементСоответствия.Значение);
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоДокументуРодителю;
			
			СчетчикТипыДокументыРодители = СчетчикТипыДокументыРодители + 1;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("КонтактноеЛицо", НСтр("ru = 'Контактное лицо'"));
		
	КонецЕсли;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПараметрыОтправки.Получатель = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ДобавитьПолучателяПечатнойФормы(ПараметрыОтправки.Получатель, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПолучателейСообщенийПоШаблонам

Процедура ЗаполнитьПолучателейСообщенияПоШаблону(Получатели, НазначениеШаблона, ПредметСообщения, ДляSMS) Экспорт

	ПараметрыОтправки = Новый Структура("Получатель", Новый Массив);
	МассивПараметров = Новый Массив;
	
	Если ТипЗнч(ПредметСообщения) = Тип("Структура") Тогда
		
		ДобавитьПараметрВМассивДляОпределенияПолучателей(МассивПараметров, ПредметСообщения.Предмет);
		
		Для Каждого ДополнительныйПараметр Из ПредметСообщения.ПроизвольныеПараметры  Цикл
			ДобавитьПараметрВМассивДляОпределенияПолучателей(МассивПараметров, ДополнительныйПараметр);
		КонецЦикла;
		
	Иначе
		
		ДобавитьПараметрВМассивДляОпределенияПолучателей(МассивПараметров, ПредметСообщения);
		
	КонецЕсли;
	
	Если МассивПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеТиповДанныхПараметров = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивПараметров);
	
	МассивДокументовРодителей = Новый Массив;
	ДополненноеСоответствие = Новый Соответствие;
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхПараметров Цикл
		
		СтруктураДанныхПараметра = НоваяСтруктураДанныхОбъектаПечати();
		СтруктураДанныхПараметра.МассивДанных = ЭлементСоответствия.Значение;
		
		ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ЭлементСоответствия.Ключ , СтруктураДанныхПараметра);
		
		ДополненноеСоответствие.Вставить(ЭлементСоответствия.Ключ, СтруктураДанныхПараметра);
		
		Для Каждого Параметр Из ЭлементСоответствия.Значение Цикл
			ПолучитьРодительскиеДокументы(МассивДокументовРодителей,Параметр);
		КонецЦикла;
		
	КонецЦикла;
	
	СформироватьПараметрыОтправки(ДополненноеСоответствие, ПараметрыОтправки, МассивДокументовРодителей, ДляSMS);
	
	Для каждого Получатель Из ПараметрыОтправки.Получатель Цикл
		
		МассивАдресов = СтрРазделить(Получатель.Адрес, ";", Ложь);
		
		Для Каждого Адрес Из МассивАдресов Цикл
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Контакт", Получатель.ИсточникКонтактнойИнформации);
			Если ДляSMS Тогда
				ПараметрыПоиска.Вставить("НомерТелефона", СокрЛП(Адрес));
			Иначе
				ПараметрыПоиска.Вставить("Адрес", СокрЛП(Адрес));
			КонецЕсли;
			
			НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Получатели.Добавить();
			НоваяСтрока.Представление = Получатель.Представление;
			НоваяСтрока.Контакт = Получатель.ИсточникКонтактнойИнформации;
			Если ДляSMS Тогда
				НоваяСтрока.НомерТелефона = Адрес;
			Иначе
				НоваяСтрока.Адрес = Адрес;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрВМассивДляОпределенияПолучателей(МассивПараметров, Параметр) Экспорт

	Если ЗначениеЗаполнено(Параметр) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Параметр))
		И (ОбщегоНазначения.ВидОбъектаПоСсылке(Параметр) = "Справочник" ИЛИ ОбщегоНазначения.ВидОбъектаПоСсылке(Параметр) = "Документ") Тогда
		
		МассивПараметров.Добавить(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
