#Область ПрограммныйИнтерфейс

#Область КэшированиеСтрок

// Инициализирует кэш строк на форме для для указанной таблицы.
// Для использования кэширования строк необходимо добавить на форму реквизит "КэшированныеСтроки" с типом "Произвольный".
//
// Параметры:
//  ТаблицаФормы - ТаблицаФормы - элемент формы, содержащий табличную часть.
//
Процедура ИнициализироватьКэшСтрок(ТаблицаФормы) Экспорт
	
	Форма = ТаблицаФормы.Родитель;
	Пока ТипЗнч(Форма) <> Тип("ФормаКлиентскогоПриложения") Цикл
		Форма = Форма.Родитель;
	КонецЦикла;
	
	КэшСтроки = Новый Структура;
	
	РеквизитыТаблицы = Форма.ПолучитьРеквизиты(ТаблицаФормы.ПутьКДанным);
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		КэшСтроки.Вставить(Реквизит.Имя, Неопределено);
	КонецЦикла;
	
	Если Форма.КэшированныеСтроки = Неопределено Тогда
		Форма.КэшированныеСтроки = Новый Структура;
	КонецЕсли;
	Форма.КэшированныеСтроки.Вставить(ТаблицаФормы.Имя, Новый ФиксированнаяСтруктура(КэшСтроки));
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеВставкаСтрок

// Проверяет наличие сохраненных строк табличной части в буфере обмена.
//
// Возвращаемое значение:
//  Булево - Истина - в буфере есть строки, Ложь - в противном случае.
//
Функция ЕстьСтрокиВБуфереОбмена() Экспорт
	
	Возврат Не ОбщегоНазначения.ПустойБуферОбмена("КопированиеВставкаСтрок");
	
КонецФункции

// Копирует указанные строки табличной части в буфер обмена.
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - 
//  Строки - Массив - идентификаторы строк (свойство ВыделенныеСтроки таблицы формы).
//
Процедура СкопироватьСтрокиВБуферОбмена(ТабличнаяЧасть, Строки) Экспорт
	
	ТаблицаЗначений = ТабличнаяЧасть.Выгрузить(Новый Массив);
	
	УдаляемыеКолонки = Новый Массив;
	УдаляемыеКолонки.Добавить("ИсходныйНомерСтроки");
	УдаляемыеКолонки.Добавить("КодСтроки");
	УдаляемыеКолонки.Добавить("ИдентификаторСтроки");
	УдаляемыеКолонки.Добавить("КлючСвязи");
	
	Для Каждого ИмяКолонки Из УдаляемыеКолонки Цикл
		Колонка = ТаблицаЗначений.Колонки.Найти(ИмяКолонки);
		Если Колонка <> Неопределено Тогда
			ТаблицаЗначений.Колонки.Удалить(Колонка);
		КонецЕсли;
	КонецЦикла;
	
	Индекс = 0;
	ИсходныеСтроки = Новый Массив(Строки.Количество());
	Для Каждого ИдентификаторСтроки Из Строки Цикл
		ИсходныеСтроки[Индекс] = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходныеСтроки[Индекс]);
		НоваяСтрока.НомерСтроки = Индекс;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(ТабличнаяЧасть, ИсходныеСтроки);
	Пока Индекс < ИсходныеСтроки.Количество() Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходныеСтроки[Индекс]);
		НоваяСтрока.НомерСтроки = Индекс;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ОбщегоНазначения.СкопироватьВБуферОбмена(ТаблицаЗначений, "КопированиеВставкаСтрок");
	
КонецПроцедуры

// Копирует указанную таблицу значений в буфер обмена.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица значений, которую необходимо поместить в буфер обмена.
//
Процедура ПоместитьТаблицуЗначенийВБуферОбмена(Таблица) Экспорт
	
	ТаблицаДляБуфера = Таблица.Скопировать();
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаДляБуфера, "НомерСтроки");
	
	ОбщегоНазначения.СкопироватьВБуферОбмена(ТаблицаДляБуфера, "КопированиеВставкаСтрок");
	
КонецПроцедуры

// Получает строки табличной части из буфер обмена.
//
// Параметры:
//  ПараметрыОтбора - Соответствие - задает условия поиска:
//      ключ определяет путь к данным, по которой будет осуществляться поиск, а значение - искомое значение;
//      Если путь к данным не соответствует данным исходной таблицы буфера, метод возвращает Неопределено.
//  Колонки - Строка, Массив - список колонок для возвращаемой таблицы;
//      Колонки, которых нет в исходной таблице буфера игнорируются, если же нет ни одной указанной колонки
//      в исходной таблице, метод возвращает Неопределено.
//
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - строки из буфера, если буфер не пустой и данные в нем соответствуют заданному отбору.
//
Функция СтрокиИзБуфераОбмена(ПараметрыОтбора = Неопределено, Колонки = Неопределено) Экспорт
	
	БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	
	Если БуферОбмена.Источник <> "КопированиеВставкаСтрок" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаЗначений", БуферОбмена.Данные);
		
		ПоляВыборки = Новый Массив;
		УсловияОтбора = Новый Массив;
		ЧислоПараметров = 0;
		
		Для Каждого Условие Из ПараметрыОтбора Цикл
			Если СтрНайти(Строка(Условие.Ключ), ".") > 0 Тогда
				ИмяКолонки = Лев(Условие.Ключ, СтрНайти(Условие.Ключ, ".") - 1);
			Иначе
				ИмяКолонки = Условие.Ключ;
			КонецЕсли;
			
			Если БуферОбмена.Данные.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				ПоляВыборки.Добавить(ИмяКолонки);
				УсловияОтбора.Добавить(Условие.Ключ + " В (&Значение" + ЧислоПараметров + ")");
				Запрос.УстановитьПараметр("Значение" + ЧислоПараметров, Условие.Значение);
				ЧислоПараметров = ЧислоПараметров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НомерСтроки,
			|	&ЗаменаПоляВыборки
			|ПОМЕСТИТЬ ТаблицаЗначений
			|ИЗ &ТаблицаЗначений КАК ТЗ
			|;
			|ВЫБРАТЬ
			|	НомерСтроки
			|ИЗ ТаблицаЗначений КАК ТЗ
			|ГДЕ
			|	&ЗаменаУсловияОтбора";
		ЗаменаПоляВыборки = СтрСоединить(ПоляВыборки, ", ");
		ЗаменаУсловияОтбора = СтрСоединить(УсловияОтбора, " И ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаменаПоляВыборки", ЗаменаПоляВыборки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаменаУсловияОтбора", ЗаменаУсловияОтбора);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		ОтборСтрок = Новый Массив(Выборка.Количество());
		
		Индекс = 0;
		Пока Выборка.Следующий() Цикл
			ОтборСтрок[Индекс] = БуферОбмена.Данные[Выборка.НомерСтроки];
			Индекс = Индекс + 1;
		КонецЦикла;
		
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Колонки) Тогда
		
		Если ТипЗнч(Колонки) = Тип("Строка") Тогда
			СписокКолонок = СтрРазделить(Колонки, ",", Ложь);
		Иначе
			СписокКолонок = Колонки;
		КонецЕсли;
		
		КолонкиКОтбору = Новый Массив;
		Для Каждого Свойство Из СписокКолонок Цикл
			Если БуферОбмена.Данные.Колонки.Найти(СокрЛП(Свойство)) <> Неопределено Тогда
				КолонкиКОтбору.Добавить(Свойство);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(КолонкиКОтбору) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОтборКолонок = СтрСоединить(КолонкиКОтбору, ",");
		
	Иначе
		ОтборКолонок = Неопределено;
	КонецЕсли;
	
	ТЗ = БуферОбмена.Данные.Скопировать(ОтборСтрок, ОтборКолонок);
	
	Возврат ТЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти