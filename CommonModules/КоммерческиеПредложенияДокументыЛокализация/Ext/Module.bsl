////////////////////////////////////////////////////////////////////////////////
// Подсистема "Объекты УТ11, КА2, УП2".
// ОбщийМодуль.КоммерческиеПредложенияДокументыЛокализация.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияДокументов

// См. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаЗаполненияДокумента.
//
Процедура ОбработкаЗаполненияДокумента(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	//++ Локализация
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗапросКоммерческихПредложенийПоставщиков") Тогда	
		
		ЗапросКоммерческихПредложенийПоставщиковОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаполненииСпискаТекущихДелКоммерческихПредложений
//
// Параметры:
//  ТекущиеДела - См. КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаполненииСпискаТекущихДелКоммерческихПредложений.ТекущиеДела
//  ИмяДокумента - См. КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаполненииСпискаТекущихДелКоммерческихПредложений.ИмяДокумента
//
Процедура ПриЗаполненииСпискаТекущихДелКоммерческихПредложений(ТекущиеДела, ИмяДокумента) Экспорт

	//++ Локализация
	Если ИмяДокумента = "ЗапросКоммерческихПредложенийПоставщиков" 
		И ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		
		Доступность =
			ПравоДоступа("Редактирование", Метаданные.Документы.ЗапросКоммерческихПредложенийПоставщиков)
			И ПравоДоступа("Чтение"      , Метаданные.РегистрыСведений.СостоянияЗапросовКоммерческихПредложений)
			И ПолучитьФункциональнуюОпцию("ИспользоватьЗапросыКоммерческихПредложенийПоставщиков");
		
			Если Доступность Тогда
				
				ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
				ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.Форма.ФормаСписка";
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
				|			КОГДА СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.Подготовка)
				|					И ЗапросКоммерческихПредложенийПоставщиков.ДатаНачалаПубликации <= &ДатаАктуальности
				|				ТОГДА ЗапросКоммерческихПредложенийПоставщиков.Ссылка
				|		КОНЕЦ) КАК ПросроченоПодготовка,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
				|			КОГДА СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.Подготовка)
				|				ТОГДА ЗапросКоммерческихПредложенийПоставщиков.Ссылка
				|		КОНЕЦ) КАК ПодготовкаВсего,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
				|			КОГДА СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.АнализПредложений)
				|					ИЛИ СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.СборПредложений)
				|				ТОГДА ЗапросКоммерческихПредложенийПоставщиков.Ссылка
				|		КОНЕЦ) КАК СборИАнализВсего,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
				|			КОГДА СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.АнализПредложений)
				|					И ЗапросКоммерческихПредложенийПоставщиков.ДатаОкончанияРассмотрения <= &ДатаАктуальности
				|				ТОГДА ЗапросКоммерческихПредложенийПоставщиков.Ссылка
				|		КОНЕЦ) КАК ПросроченоАнализ
				|ИЗ
				|	РегистрСведений.СостоянияЗапросовКоммерческихПредложений КАК СостоянияЗапросовКоммерческихПредложений
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросКоммерческихПредложенийПоставщиков КАК ЗапросКоммерческихПредложенийПоставщиков
				|		ПО СостоянияЗапросовКоммерческихПредложений.ЗапросКоммерческихПредложений = ЗапросКоммерческихПредложенийПоставщиков.Ссылка
				|ГДЕ
				|	НЕ ЗапросКоммерческихПредложенийПоставщиков.ПометкаУдаления
				|	И ЗапросКоммерческихПредложенийПоставщиков.Менеджер = &Пользователь
				|	И СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.Завершено)";
				
				Результат = ТекущиеДелаСервер.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
			
				// Заполнение дел.
				// ЗапросыКоммерческихПредложенийПоставщиков
				ДелоРодитель = ТекущиеДела.Добавить();
				ДелоРодитель.Идентификатор  = "ЗапросыКоммерческихПредложенийПоставщиков";
				ДелоРодитель.Представление  = НСтр("ru = 'Запросы коммерческих предложений поставщиков'");
				ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
				
				// ЗапросыКоммерческихПредложенийПоставщиковПодготавливается
				СписокСостояний = Новый СписокЗначений;
				СписокСостояний.Добавить(Перечисления.СостоянияЗапросаКоммерческихПредложений.Подготовка);
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СостояниеОтбор", СписокСостояний);
				ПараметрыОтбора.Вставить("Просрочен",      Ложь);
				ПараметрыОтбора.Вставить("Менеджер",       ОбщиеПараметрыЗапросов.Пользователь);
				
				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = "ЗапросыКоммерческихПредложенийПоставщиковПодготовка";
				Дело.ЕстьДела       = Результат.ПодготовкаВсего > 0;
				Дело.Представление  = НСтр("ru = 'Подготавливается'");
				Дело.Количество     = Результат.ПодготовкаВсего;
				Дело.Важное         = Ложь;
				Дело.Форма          = ИмяФормы;
				Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
				Дело.Владелец       = "ЗапросыКоммерческихПредложенийПоставщиков";
				
				// ЗапросыКоммерческихПредложенийПоставщиковПросроченаПодготовка
				СписокСостояний = Новый СписокЗначений;
				СписокСостояний.Добавить(Перечисления.СостоянияЗапросаКоммерческихПредложений.Подготовка);
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СостояниеОтбор", СписокСостояний);
				ПараметрыОтбора.Вставить("Просрочен",      Истина);
				ПараметрыОтбора.Вставить("Менеджер",       ОбщиеПараметрыЗапросов.Пользователь);
				
				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = "ЗапросыКоммерческихПредложенийПоставщиковПросроченаПодготовка";
				Дело.ЕстьДела       = Результат.ПросроченоПодготовка > 0;
				Дело.Представление  = НСтр("ru = 'Просрочено при подготовке'");
				Дело.Количество     = Результат.ПросроченоПодготовка;
				Дело.Важное         = Истина;
				Дело.Форма          = ИмяФормы;
				Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
				Дело.Владелец       = "ЗапросыКоммерческихПредложенийПоставщиков";
				
				// ЗапросыКоммерческихПредложенийПоставщиковСборИАнализ
				СписокСостояний = Новый СписокЗначений;
				СписокСостояний.Добавить(Перечисления.СостоянияЗапросаКоммерческихПредложений.АнализПредложений);
				СписокСостояний.Добавить(Перечисления.СостоянияЗапросаКоммерческихПредложений.СборПредложений);
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СостояниеОтбор", СписокСостояний);
				ПараметрыОтбора.Вставить("Просрочен",      Ложь);
				ПараметрыОтбора.Вставить("Менеджер",       ОбщиеПараметрыЗапросов.Пользователь);
				
				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = "ЗапросыКоммерческихПредложенийПоставщиковСборИАнализ";
				Дело.ЕстьДела       = Результат.СборИАнализВсего > 0;
				Дело.Представление  = НСтр("ru = 'Идет сбор и анализ'");
				Дело.Количество     = Результат.СборИАнализВсего;
				Дело.Важное         = Ложь;
				Дело.Форма          = ИмяФормы;
				Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
				Дело.Владелец       = "ЗапросыКоммерческихПредложенийПоставщиков";
				
				// ЗапросыКоммерческихПредложенийПоставщиковПросроченоАнализ
				СписокСостояний = Новый СписокЗначений;
				СписокСостояний.Добавить(Перечисления.СостоянияЗапросаКоммерческихПредложений.АнализПредложений);
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СостояниеОтбор", СписокСостояний);
				ПараметрыОтбора.Вставить("Просрочен",      Истина);
				ПараметрыОтбора.Вставить("Менеджер",       ОбщиеПараметрыЗапросов.Пользователь);
				
				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = "ЗапросыКоммерческихПредложенийПоставщиковПросроченоАнализ";
				Дело.ЕстьДела       = Результат.ПросроченоАнализ > 0;
				Дело.Представление  = НСтр("ru = 'Просрочено анализ'");
				Дело.Количество     = Результат.ПросроченоАнализ;
				Дело.Важное         = Истина;
				Дело.Форма          = ИмяФормы;
				Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
				Дело.Владелец       = "ЗапросыКоммерческихПредложенийПоставщиков";
				
				Если Результат.ПодготовкаВсего > 0
					Или Результат.ПросроченоПодготовка > 0
					Или Результат.СборИАнализВсего > 0 
					Или Результат.ПросроченоАнализ > 0 Тогда
					ДелоРодитель.ЕстьДела = Истина;
				КонецЕсли;
				
			КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяДокумента = "ЗапросКоммерческогоПредложенияОтКлиента"
		И ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		Доступность =
			ПравоДоступа("Редактирование", Метаданные.Документы.ЗапросКоммерческогоПредложенияОтКлиента)
			И ПолучитьФункциональнуюОпцию("ИспользоватьЗапросыКоммерческихПредложенийОтКлиента");
			
			ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
		ИмяФормы = "Документ.ЗапросКоммерческогоПредложенияОтКлиента.Форма.ФормаСписка";
		
		Доступность =
			ПравоДоступа("Редактирование", Метаданные.Документы.КоммерческоеПредложениеПоставщика)
			И ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияПоставщиков");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапросКоммерческогоПредложенияОтКлиента.Ссылка) КАК ЗапросыДействуют
		|ИЗ
		|	Документ.ЗапросКоммерческогоПредложенияОтКлиента КАК ЗапросКоммерческогоПредложенияОтКлиента
		|ГДЕ
		|	ЗапросКоммерческогоПредложенияОтКлиента.Менеджер = &Пользователь
		|	И НЕ ЗапросКоммерческогоПредложенияОтКлиента.ПометкаУдаления
		|	И ВЫБОР
		|		КОГДА ЗапросКоммерческогоПредложенияОтКлиента.ДатаОкончанияРассмотрения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ЗапросКоммерческогоПредложенияОтКлиента.ДатаОкончанияРассмотрения >= &ДатаАктуальности
		|		ТОГДА ИСТИНА
		|	КОНЕЦ";
			
		Результат = ТекущиеДелаСервер.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
			
		// Заполнение дел.
		// ЗапросКоммерческогоПредложенияОтКлиента
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ЗапросыКоммерческихПредложенийОтКлиентов";
		ДелоРодитель.Представление  = НСтр("ru = 'Запросы коммерческих предложений от клиентов'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
		
		// ЗапросыКоммерческихПредложенийОтКлиентовДействуют
		ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Актуальность",     НСтр("ru = 'Не истек'"));
			ПараметрыОтбора.Вставить("ДатаАктуальности", ОбщиеПараметрыЗапросов.ПустаяДата);
			ПараметрыОтбора.Вставить("Менеджер",         ОбщиеПараметрыЗапросов.Пользователь);
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = "ЗапросыКоммерческихПредложенийОтКлиентовДействуют";
			Дело.ЕстьДела       = Результат.ЗапросыДействуют > 0;
			Дело.Представление  = НСтр("ru = 'Действует'");
			Дело.Количество     = Результат.ЗапросыДействуют;
			Дело.Важное         = Ложь;
			Дело.Форма          = ИмяФормы;
			Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
			Дело.Владелец       = "ЗапросыКоммерческихПредложенийОтКлиентов";
			
			Если Результат.ЗапросыДействуют > 0 Тогда
				ДелоРодитель.ЕстьДела = Истина;
			КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяДокумента = "КоммерческоеПредложениеПоставщика"
		И ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
		ИмяФормы = "Документ.КоммерческоеПредложениеПоставщика.Форма.ФормаСписка";
		
		Доступность =
			ПравоДоступа("Редактирование", Метаданные.Документы.КоммерческоеПредложениеПоставщика)
			И ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияПоставщиков");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументКоммерческоеПредложениеПоставщика.Ссылка) КАК КоммерческиеПредложенияДействуют
		|ИЗ
		|	Документ.КоммерческоеПредложениеПоставщика КАК ДокументКоммерческоеПредложениеПоставщика
		|ГДЕ
		|	ДокументКоммерческоеПредложениеПоставщика.Менеджер = &Пользователь
		|	И ДокументКоммерческоеПредложениеПоставщика.Проведен
		|	И ВЫБОР
		|		КОГДА ДокументКоммерческоеПредложениеПоставщика.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДокументКоммерческоеПредложениеПоставщика.СрокДействия >= &ДатаАктуальности
		|		ТОГДА ИСТИНА
		|	КОНЕЦ";
		
		Результат = ТекущиеДелаСервер.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
		
		// Заполнение дел.
		// КоммерческиеПредложенияПоставщиков
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "КоммерческиеПредложенияПоставщикам";
		ДелоРодитель.Представление  = НСтр("ru = 'Коммерческие предложения поставщикам'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
		
		// КоммерческиеПредложенияПоставщиковДействует
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Состояние",   Перечисления.СостоянияКоммерческихПредложенийПоставщиков.Действует);
		ПараметрыОтбора.Вставить("Актуальность",     "");
		ПараметрыОтбора.Вставить("ДатаАктуальности", ОбщиеПараметрыЗапросов.ПустаяДата);
		ПараметрыОтбора.Вставить("Менеджер",         ОбщиеПараметрыЗапросов.Пользователь);
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "КоммерческиеПредложенияПоставщикамДействует";
		Дело.ЕстьДела       = Результат.КоммерческиеПредложенияДействуют > 0;
		Дело.Представление  = НСтр("ru = 'Действует'");
		Дело.Количество     = Результат.КоммерческиеПредложенияДействуют;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		Дело.Владелец       = "КоммерческиеПредложенияПоставщикам";
		
		Если Результат.КоммерческиеПредложенияДействуют > 0 Тогда
			ДелоРодитель.ЕстьДела = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

Процедура ЗаполнитьСведенияОбАдресе(ЗначенияПолей, АдресДоставки) Экспорт
	
	//++ Локализация
	Сведения = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолей, Новый Структура("КодыАдреса", Истина));
	
	Если ЗначениеЗаполнено(Сведения) Тогда
		
		Если ЗначениеЗаполнено(Сведения.ИдентификаторДома) Тогда
			ИдентификаторАдреса = Сведения.ИдентификаторДома;
		Иначе
			ИдентификаторАдреса = Сведения.ИдентификаторАдресногоОбъекта;
		КонецЕсли;
		
		АдресДоставки.Код = Строка(ИдентификаторАдреса);
		АдресДоставки.КодСтраны = Сведения.КодСтраны;
		
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// Получает построчную информацию из найденных предложениях по запросу коммерческих предложений.
//
// Параметры:
//  СсылкаНаОбъект         - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - запрос коммерческих предложений.
//  АнализируемыеИсточники - ТаблицаЗначений - таблица анализируемых источников.
//  НайденныеПредложения   - ТаблицаЗначений - Дерево данных:
//   * КоммерческоеПредложениеСсылка - ОпределяемыйТип.КоммерческоеПредложениеПоставщика - ссылка на документ.
//   * ДокументОснование             - ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков - ссылка на документ основание.
//   * ПоставщикПредставление        - Строка - представление контрагента.
//   * ПоставщикСсылка               - ОпределяемыйТип.КонтрагентБЭД - ссылка на справочник контрагенты.
//   * УсловияОплатыТекст            - Строка - описание условий оплаты.
//   * УсловияПоставкиТекст          - Строка - описание условий поставки.
//   * ПрочаяДополнительнаяИнформацияТекст - Строка - описание прочей информации о предложении.
//   * СуммаМинимум                  - Число  - минимальная сумма по всем позициям предложения.
//   * СуммаМаксимум                 - Число  - максимальная сумма по всем позициям предложения.
//   * СрокПоставки                  - Дата, Число - срок поставки в днях с момента оплаты заказа, либо конкретная дата поставки.
//   * Охват                         - Число  - охват позиций запроса.
//   * ИмяИсточника                  - Число  - имя источника получения коммерческого предложения.
//   * Налогообложение               - Булево - облагается ли продажа НДС.
//   * ЦенаВключаетНДС               - Булево - включает ли цена НДС.
//   * КоммерческоеПредложениеНомер  - Число  - номер предложения.
//   * КоммерческоеПредложениеДата   - Дата   - дата предложения.
//   * МожетВыкупатьсяЧастично       - Булево - можно ли выкупать только часть предложений.
//   * Валюта                        - СправочникСсылка.Валюты - валюта предложения.
//   * Товары                        - ТаблицаЗначений         - товары предложения, колонки:
//      ** НоменклатураПоставщика               - Строка - номенклатура.
//      ** ИдентификаторСтрокиЗапроса           - Строка - идентификатор запроса.
//      ** ИдентификаторСтрокиИсточника         - Строка - идентификатор источника.
//      ** ИдентификаторНоменклатурыПоставщика  - Строка - идентификатор номенклатуры поставщика.
//      ** СрокПоставки                         - Число, Дата - количество дней или дата поставки.
//      ** Количество                           - Число  - количество товара.
//      ** Цена                                 - Число  - цена товара.
//      ** ПроцентСкидки                        - Число  - скидка.
//      ** СуммаСНДС                            - Число  - сумму с учетом НДС.
//      ** ДополнительнаяИнформацияОтПоставщика - Строка - дополнительная информация поставщика.
//      ** Комментарий                          - Строка - комментарий.
//      ** ЕдиницаИзмерения                     - Строка - единица измерения номенклатуры.
//      ** СнятСРассмотрения                    - Булево - признак снятия с рассмотрения.
//      ** СтавкаНДС                            - ОпределяемыйТип.СтавкаНДСКоммерческихПредложений.
//
Процедура ПредложенияИсточниковПоЗапросуКоммерческихПредложений(Знач СсылкаНаОбъект, Знач АнализируемыеИсточники, НайденныеПредложения) Экспорт
	
	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(Контрагенты.Ссылка) КАК Ссылка,
		|	Контрагенты.Партнер КАК Партнер
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.Номенклатура КАК Номенклатура,
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.Характеристика КАК Характеристика,
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.НоменклатураВСервисеПредставление КАК НоменклатураВСервисеПредставление,
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.НоменклатураТекстом КАК НоменклатураТекстом,
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса,
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.Ссылка КАК ЗапросКоммерческихПредложений,
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.Количество КАК Количество,
		|	ЗапросКоммерческихПредложенийПоставщиков.Организация КАК Организация
		|ПОМЕСТИТЬ ТоварыИзЗапроса
		|ИЗ
		|	Документ.ЗапросКоммерческихПредложенийПоставщиков.Товары КАК ЗапросКоммерческихПредложенийПоставщиковТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросКоммерческихПредложенийПоставщиков КАК ЗапросКоммерческихПредложенийПоставщиков
		|		ПО ЗапросКоммерческихПредложенийПоставщиковТовары.Ссылка = ЗапросКоммерческихПредложенийПоставщиков.Ссылка
		|ГДЕ
		|	ЗапросКоммерческихПредложенийПоставщиковТовары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыИзЗапроса.ЗапросКоммерческихПредложений КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент ЕСТЬ NULL
		|			ТОГДА Контрагенты.Ссылка.Наименование
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент.Наименование
		|	КОНЕЦ КАК ПоставщикПредставление,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент ЕСТЬ NULL
		|			ТОГДА Контрагенты.Ссылка
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент
		|	КОНЕЦ КАК ПоставщикСсылка,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Ссылка ЕСТЬ NULL
		|			ТОГДА &СоглашенияОбУсловияхПродаж
		|		ИНАЧЕ &ЦеныНоменклатурыПоставщиков
		|	КОНЕЦ КАК ИмяИсточника,
		|	ЕСТЬNULL(СоглашенияСПоставщиками.СрокПоставки, 0) КАК СрокПоставки,
		|	ЕСТЬNULL(СоглашенияСПоставщиками.ЦенаВключаетНДС, ИСТИНА) КАК ЦенаВключаетНДС,
		|	ИСТИНА КАК МожетВыкупатьсяЧастично,
		|	ЦеныНоменклатурыПоставщиков.Валюта КАК Валюта,
		|	ЦеныНоменклатурыПоставщиков.Регистратор КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыПоставщиков.НоменклатураПартнера = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыПоставщиков.Номенклатура
		|		ИНАЧЕ ЦеныНоменклатурыПоставщиков.НоменклатураПартнера
		|	КОНЕЦ КАК НоменклатураПартнера,
		|	ТоварыИзЗапроса.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса,
		|	"""" КАК ИдентификаторНоменклатурыПоставщика,
		|	ТоварыИзЗапроса.Количество КАК Количество,
		|	ЦеныНоменклатурыПоставщиков.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыПоставщиков.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЦеныНоменклатурыПоставщиков.Упаковка
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
		|	ЦеныНоменклатурыПоставщиков.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ГотоваяВыборка
		|ИЗ
		|	ТоварыИзЗапроса КАК ТоварыИзЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
		|			ПО ЦеныНоменклатурыПоставщиков.Партнер = Контрагенты.Партнер
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|			ПО ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = СоглашенияСПоставщиками.ВидЦеныПоставщика
		|		ПО ТоварыИзЗапроса.Номенклатура = ЦеныНоменклатурыПоставщиков.Номенклатура
		|			И ТоварыИзЗапроса.Характеристика = ЦеныНоменклатурыПоставщиков.Характеристика
		|ГДЕ
		|	ТоварыИзЗапроса.НоменклатураВСервисеПредставление = """"
		|	И ТоварыИзЗапроса.НоменклатураТекстом = """"
		|	И НЕ ТоварыИзЗапроса.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыИзЗапроса.ЗапросКоммерческихПредложений,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент ЕСТЬ NULL
		|			ТОГДА Контрагенты.Ссылка.Наименование
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент ЕСТЬ NULL
		|			ТОГДА Контрагенты.Ссылка
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Ссылка ЕСТЬ NULL
		|			ТОГДА &СоглашенияОбУсловияхПродаж
		|		ИНАЧЕ &ЦеныНоменклатурыПоставщиков
		|	КОНЕЦ,
		|	ЕСТЬNULL(СоглашенияСПоставщиками.СрокПоставки, 0),
		|	ЕСТЬNULL(СоглашенияСПоставщиками.ЦенаВключаетНДС, ИСТИНА),
		|	ИСТИНА,
		|	ЦеныНоменклатурыПоставщиков.Валюта,
		|	ЦеныНоменклатурыПоставщиков.Регистратор,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыПоставщиков.НоменклатураПартнера = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыПоставщиков.Номенклатура
		|		ИНАЧЕ ЦеныНоменклатурыПоставщиков.НоменклатураПартнера
		|	КОНЕЦ,
		|	ТоварыИзЗапроса.ИдентификаторСтрокиЗапроса,
		|	"""",
		|	ТоварыИзЗапроса.Количество,
		|	ЦеныНоменклатурыПоставщиков.Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыПоставщиков.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЦеныНоменклатурыПоставщиков.Упаковка
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
		|	ЦеныНоменклатурыПоставщиков.НомерСтроки
		|ИЗ
		|	ТоварыИзЗапроса КАК ТоварыИзЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураВладелецЦены
		|		ПО ТоварыИзЗапроса.НоменклатураВСервисеПредставление = НоменклатураВладелецЦены.Наименование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
		|			ПО ЦеныНоменклатурыПоставщиков.Партнер = Контрагенты.Партнер
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|			ПО ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = СоглашенияСПоставщиками.ВидЦеныПоставщика
		|		ПО (НоменклатураВладелецЦены.Ссылка = ЦеныНоменклатурыПоставщиков.Номенклатура)
		|ГДЕ
		|	ТоварыИзЗапроса.НоменклатураВСервисеПредставление <> """"
		|	И ТоварыИзЗапроса.НоменклатураТекстом = """"
		|	И ТоварыИзЗапроса.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыИзЗапроса.ЗапросКоммерческихПредложений,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент ЕСТЬ NULL
		|			ТОГДА Контрагенты.Ссылка.Наименование
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Контрагент ЕСТЬ NULL
		|			ТОГДА Контрагенты.Ссылка
		|		ИНАЧЕ СоглашенияСПоставщиками.Контрагент
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА СоглашенияСПоставщиками.Ссылка ЕСТЬ NULL
		|			ТОГДА &СоглашенияОбУсловияхПродаж
		|		ИНАЧЕ &ЦеныНоменклатурыПоставщиков
		|	КОНЕЦ,
		|	ЕСТЬNULL(СоглашенияСПоставщиками.СрокПоставки, 0),
		|	ЕСТЬNULL(СоглашенияСПоставщиками.ЦенаВключаетНДС, ИСТИНА),
		|	ИСТИНА,
		|	ЦеныНоменклатурыПоставщиков.Валюта,
		|	ЦеныНоменклатурыПоставщиков.Регистратор,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыПоставщиков.НоменклатураПартнера = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыПоставщиков.Номенклатура
		|		ИНАЧЕ ЦеныНоменклатурыПоставщиков.НоменклатураПартнера
		|	КОНЕЦ,
		|	ТоварыИзЗапроса.ИдентификаторСтрокиЗапроса,
		|	"""",
		|	ТоварыИзЗапроса.Количество,
		|	ЦеныНоменклатурыПоставщиков.Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЦеныНоменклатурыПоставщиков.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЦеныНоменклатурыПоставщиков.Упаковка
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
		|	ЦеныНоменклатурыПоставщиков.НомерСтроки
		|ИЗ
		|	ТоварыИзЗапроса КАК ТоварыИзЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураВладелецЦены
		|		ПО ТоварыИзЗапроса.НоменклатураТекстом = НоменклатураВладелецЦены.Наименование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Контрагенты КАК Контрагенты
		|			ПО ЦеныНоменклатурыПоставщиков.Партнер = Контрагенты.Партнер
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|			ПО ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = СоглашенияСПоставщиками.ВидЦеныПоставщика
		|		ПО (НоменклатураВладелецЦены.Ссылка = ЦеныНоменклатурыПоставщиков.Номенклатура)
		|ГДЕ
		|	ТоварыИзЗапроса.НоменклатураВСервисеПредставление = """"
		|	И ТоварыИзЗапроса.НоменклатураТекстом <> """"
		|	И ТоварыИзЗапроса.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГотоваяВыборка.ДокументОснование КАК ДокументОснование,
		|	ГотоваяВыборка.ПоставщикПредставление КАК ПоставщикПредставление,
		|	ГотоваяВыборка.ПоставщикСсылка КАК ПоставщикСсылка,
		|	ГотоваяВыборка.ИмяИсточника КАК ИмяИсточника,
		|	ГотоваяВыборка.СрокПоставки КАК СрокПоставки,
		|	ГотоваяВыборка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ГотоваяВыборка.МожетВыкупатьсяЧастично КАК МожетВыкупатьсяЧастично,
		|	ГотоваяВыборка.Валюта КАК Валюта,
		|	ГотоваяВыборка.Регистратор КАК Регистратор,
		|	ЛОЖЬ КАК Налогообложение,
		|	1 КАК Охват,
		|	ВЫБОР
		|		КОГДА ГотоваяВыборка.ИмяИсточника = &СоглашенияОбУсловияхПродаж
		|			ТОГДА &СоглашенияОбУсловияхПродажПредставление
		|		КОГДА ГотоваяВыборка.ИмяИсточника = &ЦеныНоменклатурыПоставщиков
		|			ТОГДА &ЦеныНоменклатурыПоставщиковПредставление
		|		ИНАЧЕ ГотоваяВыборка.ИмяИсточника
		|	КОНЕЦ КАК КоммерческоеПредложениеСсылка
		|ИЗ
		|	ГотоваяВыборка КАК ГотоваяВыборка
		|ГДЕ
		|	ГотоваяВыборка.ИмяИсточника В(&АнализируемыеИсточники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГотоваяВыборка.ДокументОснование КАК ДокументОснование,
		|	ГотоваяВыборка.Регистратор КАК Регистратор,
		|	ГотоваяВыборка.НоменклатураПартнера КАК НоменклатураПартнера,
		|	ГотоваяВыборка.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса,
		|	ГотоваяВыборка.ИдентификаторНоменклатурыПоставщика КАК ИдентификаторНоменклатурыПоставщика,
		|	ГотоваяВыборка.Количество КАК Количество,
		|	ГотоваяВыборка.Цена КАК Цена,
		|	ГотоваяВыборка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ГотоваяВыборка.СтавкаНДС КАК СтавкаНДС,
		|	ЛОЖЬ КАК СнятСРассмотрения,
		|	ГотоваяВыборка.СрокПоставки КАК СрокПоставки,
		|	"""" КАК ДополнительнаяИнформацияОтПоставщика,
		|	"""" КАК Комментарий,
		|	""                                                                                                          "" КАК ИдентификаторСтрокиИсточника,
		|	ГотоваяВыборка.НомерСтроки КАК НомерСтроки,
		|	0 КАК ПроцентСкидки,
		|	ГотоваяВыборка.Количество * ГотоваяВыборка.Цена КАК СуммаСНДС
		|ИЗ
		|	ГотоваяВыборка КАК ГотоваяВыборка";
	
	СоглашенияСПоставщиками = Метаданные.Справочники.СоглашенияСПоставщиками;
	ЦеныНоменклатурыПоставщиков = Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков;
	
	Запрос.УстановитьПараметр("ДокументОснование"          , СсылкаНаОбъект);
	Запрос.УстановитьПараметр("АнализируемыеИсточники"     , АнализируемыеИсточники);
	Запрос.УстановитьПараметр("СоглашенияОбУсловияхПродаж" , СоглашенияСПоставщиками.Имя);
	Запрос.УстановитьПараметр("СоглашенияОбУсловияхПродажПредставление" , СоглашенияСПоставщиками.Синоним);
	Запрос.УстановитьПараметр("ЦеныНоменклатурыПоставщиков", ЦеныНоменклатурыПоставщиков.Имя);
	Запрос.УстановитьПараметр("ЦеныНоменклатурыПоставщиковПредставление", ЦеныНоменклатурыПоставщиков.Синоним);

	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТоварыПредложений = РезультатыЗапроса[4].Выгрузить(); // ТаблицаЗначений
	ТоварыПредложений.Индексы.Добавить("ДокументОснование, Регистратор");
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[3].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = НайденныеПредложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
		Отбор = Новый Структура("ДокументОснование, Регистратор",
			ВыборкаДетальныеЗаписи.ДокументОснование, ВыборкаДетальныеЗаписи.Регистратор);
		
		НоваяСтрока.Товары = ТоварыПредложений.Скопировать(Отбор);
		
		Для Каждого Товар Из НоваяСтрока.Товары Цикл
			
			Товар.ИдентификаторСтрокиИсточника = XMLСтрока(Товар.Регистратор) + "#" + Строка(Товар.НомерСтроки);
		КонецЦикла;
	КонецЦикла;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ПриДобавленииКомандОтчетов(ИмяОбъекта, КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	Если ИмяОбъекта = "Документ.КоммерческоеПредложениеПоставщика" Тогда
		
		КоммерческоеПредложениеПоставщикаПриДобавленииКомандОтчетов(КомандыОтчетов, Параметры);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Заполнение частей имени (Фамилия  Имя Отчество) предпринимателя.
// 
// Параметры:
// 	ФамилияИмяОтчество - Строка - наименование клиента.
// 	ДанныеУчастника - Структура - данные для заполнения::
// 	  * Фамилия - Строка.
// 	  * Имя - Строка.
// 	  * Отчество - Строка.
// 	
Процедура  ЗаполнитьЧастиИмениПредпринимателя(Знач ФамилияИмяОтчество, ДанныеУчастника) Экспорт
	
		//++ Локализация
		ПолноеНаименование = ФамилияИмяОтчество;
		ПоисковаяСтрока = НСтр("ru = 'Индивидуальный предприниматель'");
		Если ВРЕГ(Лев(ПолноеНаименование,2))="ИП" Тогда
			ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование) - 2);
		ИначеЕсли ВРег(Лев(ПолноеНаименование, СтрДлина(ПоисковаяСтрока))) = ВРег(ПоисковаяСтрока) Тогда
			ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование) - СтрДлина(ПоисковаяСтрока));
		КонецЕсли;
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолноеНаименование);
		ЗаполнитьЗначенияСвойств(ДанныеУчастника, ФИО);
		//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
//
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(ИмяОбъекта, Описание) Экспорт
	
	//++ Локализация
	Если ИмяОбъекта = "Документ.КоммерческоеПредложениеПоставщика"  Тогда

		Описание = Описание + "
		|Документ.КоммерческоеПредложениеПоставщика.Чтение.Организации
		|Документ.КоммерческоеПредложениеПоставщика.Изменение.Организации
		|Документ.КоммерческоеПредложениеПоставщика.Чтение.ГруппыПартнеров
		|Документ.КоммерческоеПредложениеПоставщика.Изменение.ГруппыПартнеров
		|";
		
	ИначеЕсли ИмяОбъекта = "Справочник.КоммерческоеПредложениеПоставщикаПрисоединенныеФайлы" Тогда
		
		Описание = Описание + "
		|Справочник.КоммерческоеПредложениеПоставщикаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.КоммерческоеПредложениеПоставщикаПрисоединенныеФайлы.Изменение.Организации
		|Справочник.КоммерческоеПредложениеПоставщикаПрисоединенныеФайлы.Чтение.ГруппыПартнеров
		|Справочник.КоммерческоеПредложениеПоставщикаПрисоединенныеФайлы.Изменение.ГруппыПартнеров
		|";
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗапросКоммерческихПредложенийПоставщиков"  Тогда

		Описание = Описание + "
		|Документ.ЗапросКоммерческихПредложенийПоставщиков.Чтение.Организации
		|Документ.ЗапросКоммерческихПредложенийПоставщиков.Изменение.Организации
		|";
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗапросКоммерческогоПредложенияОтКлиента"  Тогда
		
		Описание = Описание + "
		|Документ.ЗапросКоммерческогоПредложенияОтКлиента.Чтение.Организации
		|Документ.ЗапросКоммерческогоПредложенияОтКлиента.Изменение.Организации
		|Документ.ЗапросКоммерческогоПредложенияОтКлиента.Чтение.ГруппыПартнеров
		|Документ.ЗапросКоммерческогоПредложенияОтКлиента.Изменение.ГруппыПартнеров
		|";
		
	ИначеЕсли ИмяОбъекта = "Справочник.ЗапросКоммерческихПредложенийПоставщиковПрисоединенныеФайлы" Тогда
		
		Описание = Описание + "
		|Справочник.ЗапросКоммерческихПредложенийПоставщиковПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗапросКоммерческихПредложенийПоставщиковПрисоединенныеФайлы.Изменение.Организации
		|";
		
	ИначеЕсли ИмяОбъекта = "Справочник.ЗапросКоммерческогоПредложенияОтКлиентаПрисоединенныеФайлы" Тогда
		
		Описание = Описание + "
		|Справочник.ЗапросКоммерческогоПредложенияОтКлиентаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗапросКоммерческогоПредложенияОтКлиентаПрисоединенныеФайлы.Чтение.ГруппыПартнеров
		|";
		
	ИначеЕсли ИмяОбъекта = "Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений" Тогда
		
		Описание = Описание + "
		|Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Чтение.Организации
		|Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Изменение.Организации
		|";
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры
	
// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаполненииОграниченияДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(ИмяОбъекта, Ограничение) Экспорт

	//++ Локализация
	Если ИмяОбъекта = "Документ.КоммерческоеПредложениеПоставщика" Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Поставщик)";
		
	ИначеЕсли ИмяОбъекта = "Справочник.КоммерческоеПредложениеПоставщикаПрисоединенныеФайлы" Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ВладелецФайла)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ВладелецФайла)";
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗапросКоммерческихПредложенийПоставщиков"  Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
		
	ИначеЕсли ИмяОбъекта = "Справочник.ЗапросКоммерческихПредложенийПоставщиковПрисоединенныеФайлы"  Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ВладелецФайла)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ВладелецФайла)";
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗапросКоммерческогоПредложенияОтКлиента"  Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)
		|	И ЗначениеРазрешено(Клиент)";
		
	ИначеЕсли ИмяОбъекта = "Справочник.ЗапросКоммерческогоПредложенияОтКлиентаПрисоединенныеФайлы" Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ВладелецФайла)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ВладелецФайла)";
		
	ИначеЕсли ИмяОбъекта = "Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений" Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ДокументВладелец)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ДокументВладелец)";
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриСозданииНаСервере.
//
// Параметры:
//  Форма - см. КоммерческиеПредложенияДокументыПереопределяемый.ПриСозданииНаСервере.Форма
//  Отказ - см. КоммерческиеПредложенияДокументыПереопределяемый.ПриСозданииНаСервере.Отказ
//  СтандартнаяОбработка - см. КоммерческиеПредложенияДокументыПереопределяемый.ПриСозданииНаСервере.СтандартнаяОбработка
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт 
	
	//++ Локализация
	Если Форма.ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.Форма.ФормаДокумента" Тогда
		
		ЗапросКоммерческихПредложенийПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.КоммерческоеПредложениеПоставщика.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеПоставщикаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	КонецЕсли;
	//-- Локализация
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(Форма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт

	//++ Локализация
	Если Форма.ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.Форма.ФормаДокумента" Тогда
		
		ЗапросКоммерческихПредложенийПоставщиковПослеЗаписиНаСервере(Форма, ТекущийОбъект);
		
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаПроверкиЗаполнения.
//
// Параметры:
//  ДокументОбъект - см. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаПроверкиЗаполнения.ДокументОбъект
//  Отказ - см. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаПроверкиЗаполнения.Отказ
//  ПроверяемыеРеквизиты - см. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаПроверкиЗаполнения.ПроверяемыеРеквизиты
//  МассивНепроверяемыхРеквизитов - см. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаПроверкиЗаполнения.МассивНепроверяемыхРеквизитов
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//++ Локализация
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		
		ЗапросКоммерческихПредложенийОбработкаПроверкиЗаполненияНаСервере(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КоммерческоеПредложениеПоставщика") Тогда
		
		КоммерческоеПредложениеПоставщикаОбработкаПроверкиЗаполненияНаСервере(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаПроведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт

	//++ Локализация	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КоммерческоеПредложениеПоставщика") Тогда
		КоммерческоеПредложениеПоставщикаОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения);
	КонецЕсли;
	//-- Локализация	
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаУдаленияПроведения.
//
Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	//++ Локализация	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КоммерческоеПредложениеПоставщика") Тогда
		КоммерческоеПредложениеПоставщикаОбработкаУдаленияПроведения(ДокументОбъект, Отказ);
	КонецЕсли;
	//-- Локализация	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаписи.
//
Процедура ПриЗаписи(ДокументОбъект, Отказ) Экспорт
	
	//++ Локализация	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КоммерческоеПредложениеПоставщика") Тогда
		
		КоммерческоеПредложениеПоставщикаПриЗаписи(ДокументОбъект, Отказ);
		
	КонецЕсли;
	//-- Локализация	
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПередЗаписью.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КоммерческоеПредложениеПоставщика") Тогда
		
		КоммерческоеПредложениеПоставщикаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриУстановкеУсловногоОформления
//
Процедура ПриУстановкеУсловногоОформления(Форма) Экспорт
	
	//++ Локализация
	Если Форма.ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.Форма.ФормаДокумента" Тогда
		
		ЗапросКоммерческихПредложенийПоставщиковПриУстановкеУсловногоОформления(Форма);

	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область КоммерческоеПредложениеКлиенту

Процедура КоммерческоеПредложениеКлиентуОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		СтруктураДействий = Новый Структура;
		ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДанныеЗаполнения);
		ПараметрыЗаполненияСтавкиНДС.НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
		ПараметрыЗаполненияСтавкиНДС.Дата = ТекущаяДатаСеанса();
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Функция ТипОснованияКоммерческоеПредложениеКлиентуПоУмолчанию() Экспорт

	Результат = Тип("Неопределено");
	//++ Локализация
	Результат = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента");
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КомандыСозданияНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   ИмяОбъекта - Строка - имя объекта добавления команд.
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(ИмяОбъекта, КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Если ИмяОбъекта = Метаданные.Документы.КоммерческоеПредложениеПоставщика.Имя Тогда
		
		Документы.РегистрацияЦенНоменклатурыПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа на основании.
//
// Параметры:
//   ИмяОбъекта - Строка - имя объекта метаданных.
//   КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//   ЭлементыФормы, Неопределено - содержит описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(ИмяОбъекта, КомандыСозданияНаОсновании) Экспорт
	
	//++ Локализация
	Если ИмяОбъекта = Метаданные.Документы.ЗапросКоммерческихПредложенийПоставщиков.Имя Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ЗапросКоммерческихПредложенийПоставщиков) Тогда
			
			КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
			КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗапросКоммерческихПредложенийПоставщиков.ПолноеИмя();
			КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьОбеспечивающийЗаказ";
			КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(
				Метаданные.Документы.ЗапросКоммерческихПредложенийПоставщиков);
			КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗапросыКоммерческихПредложенийПоставщиков";
			ПараметрыСоздания = ОбеспечениеВДокументахСервер.ПараметрыСозданияОбеспечивающегоЗаказа(
				КомандаСоздатьНаОсновании.ДополнительныеПараметры);
			ПараметрыСоздания.ИмяМенеджераДокумента = "КоммерческиеПредложенияДокументыЛокализация";
			ПараметрыСоздания.ПараметрыОписаныВОбщемМодуле = Истина;
			ПараметрыСоздания.ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.ФормаОбъекта";
			
			Возврат КомандаСоздатьНаОсновании;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат Неопределено;
	
КонецФункции

//++ Локализация

// Параметры создания на основании обеспечивающего заказа.
// Возвращаемое значение:
// см. ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа
Функция ПараметрыСозданияНаОснованииОбеспечивающегоЗаказа() Экспорт
	
	ПараметрыТаблицыТовары = ОбеспечениеВДокументахСервер.ПараметрыОтбораТоваровДляСозданияОбеспечивающиегоЗаказа();
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ПараметрыТаблицыТовары.ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ПараметрыТаблицыТовары.ОдинСклад = Истина;
	Возврат ПараметрыТаблицыТовары;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти

//++ Локализация
#Область СлужебныеПроцедурыИФункции

#Область ЗапросыКоммерческихПредложений

Процедура ЗапросКоммерческихПредложенийПоставщиковОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание")
			И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ЗаполнитьЗапросКоммерческихПредложенийПоставщиковНаОснованииЗаказаКлиента(Объект, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗапросКоммерческихПредложенийПоставщиковНаОснованииЗаказаКлиента(Объект, ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Организация КАК Организация
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	Запрос.УстановитьПараметр("ЗаказКлиента", ДанныеЗаполнения.Основание);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Заполнение шапки
	Объект.Организация       = Реквизиты.Организация;
	Объект.ДокументОснование = ДанныеЗаполнения.Основание;
	
	// Заполнение табличной части.
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары); // ТаблицаЗначений -
	УдалитьИзВременногоХранилища(ДанныеЗаполнения.АдресТовары);
	
	ТаблицаТовары.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Для Индекс = 0 По ТаблицаТовары.Количество() - 1 Цикл
		СтрокаЗаказа = ТаблицаТовары[Индекс].НомерСтроки = Индекс + 1;
	КонецЦикла;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ТаблицаТовары, СтруктураДействий);
	
	Объект.Товары.Очистить();
	Для Каждого СтрокаЗаказа Из ТаблицаТовары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказа);
		
		НоваяСтрока.ИдентификаторСтрокиЗапроса = Новый УникальныйИдентификатор;
		НоваяСтрока.ИсточникДобавленияТовара = 0;
		
		Если СтрокаЗаказа.ХарактеристикиИспользуются Тогда
			НоваяСтрока.НаименованиеСтрокой = СтрШаблон("%1 (%2)", НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
		Иначе
			НоваяСтрока.НаименованиеСтрокой = Строка(НоваяСтрока.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапросКоммерческихПредложенийПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура",
		"Элементы.Товары.ТекущиеДанные.Номенклатура");
	
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(НоваяСвязь);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВсегдаВыбиратьЕдиницуИзмерения", Новый ОписаниеТипов("Булево")));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ВсегдаВыбиратьЕдиницуИзмерения = Истина;
	
	НоваяСвязь = Новый СвязьПараметраВыбора("ВсегдаВыбиратьЕдиницуИзмерения", "ВсегдаВыбиратьЕдиницуИзмерения");
	
	СвязиПараметровВыбора.Добавить(НоваяСвязь);
	
	НовыеСвязи = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	Форма.Элементы.ТоварыЕдиницаИзмерения.СвязиПараметровВыбора = НовыеСвязи;
	
	#Область ДобавлениеЭлементовФормы
	
	КоммерческиеПредложенияДокументыУТ.ДобавитьЭлементФормыЕдиницаИзмерения(Форма);
	
	#КонецОбласти

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Форма.Объект.Товары, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗапросКоммерческихПредложенийПоставщиковПослеЗаписиНаСервере(Форма, ТекущийОбъект)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Форма.Объект.Товары, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗапросКоммерческихПредложенийПоставщиковПриУстановкеУсловногоОформления(Форма)
	
	УсловноеОформление = Форма.УсловноеОформление; // УсловноеОформлениеКомпоновкиДанных
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЕдиницаИзмерения");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////

КонецПроцедуры

Процедура ЗапросКоммерческихПредложенийОбработкаПроверкиЗаполненияНаСервере(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов)
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ЕдиницаИзмерения");
	
	Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
			И Не ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда
			
			ТекстСообщения = НСтр("ru = 'В строке %1 не заполнена единица измерения.'");
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, СтрокаТовары.НомерСтроки), ДокументОбъект.Ссылка,
				"Товары[" + (СтрокаТовары.НомерСтроки -1) + "].ЕдиницаИзмерения", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ);

КонецПроцедуры

#КонецОбласти

#Область КоммерческоеПредложениеПоставщика

#Область СтандартныеСобытия

Процедура КоммерческоеПредложениеПоставщикаПриДобавленииКомандОтчетов(КомандыОтчетов, Параметры)
	
КонецПроцедуры

Процедура КоммерческоеПредложениеПоставщикаОбработкаПроверкиЗаполненияНаСервере(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов)
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);	
	
	Если ДокументОбъект.РегистрироватьЦеныПоставщика Тогда
		
		НайденыВидыЦен = Ложь;
		
		Для каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) И ЗначениеЗаполнено(СтрокаТоваров.ВидЦеныПоставщика) Тогда
				НайденыВидыЦен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденыВидыЦен Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для документа установлен признак регистрации цен поставщика, при этом отсутствуют строки с заполненными реквизитами Номенклатура и Вид цены поставщика.'")
					,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеПоставщикаОбработкаУдаленияПроведения(ДокументОбъект, Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ДокументОбъект, Отказ);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеПоставщикаОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ДокументОбъект, Отказ);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеПоставщикаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения)
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ДокументОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеПоставщикаПриЗаписи(ДокументОбъект, Отказ)
	
	ПроведениеДокументов.ПриЗаписиДокумента(ДокументОбъект, Отказ);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеПоставщикаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	// Номенклатура
	НовыеПараметры = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТиповНоменклатуры));
	Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	СвязиПараметровВыбора = Новый Массив;
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец",        "Объект.Поставщик"));
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Валюта",          "Объект.Валюта"));
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.ЦенаВключаетНДС", "Объект.ЦенаВключаетНДС"));
	
	Форма.Элементы.ТоварыВидЦеныПоставщика.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	// Флаг РегистрироватьЦеныПоставщика
	
	Форма.Элементы.РегистрироватьЦеныПоставщика.Подсказка = 
		НСтр("ru = 'На вкладке Товары должен быть заполнен хотя бы один вид цены поставщика'");
		
	Форма.Элементы.РегистрироватьЦеныПоставщика.ОтображениеПодсказки = 	ОтображениеПодсказки.ОтображатьСнизу;
	
	Форма.Элементы.РегистрироватьЦеныПоставщика.РасширеннаяПодсказка.РастягиватьПоГоризонтали = Истина;
	Форма.Элементы.РегистрироватьЦеныПоставщика.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Истина;
	
	//Прочее
	Форма.Элементы.ТоварыСтавкаНДС.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеДокумента

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ЦеныИСкидки");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка или объект на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	ИмяДокумента = Документ.Метаданные().Имя;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект." + ИмяДокумента) Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
		ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса);
		ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ДанныеДокумента.Ссылка                       КАК Ссылка,
	|	ДанныеДокумента.Валюта                       КАК Валюта,
	|	ДанныеДокумента.Поставщик                    КАК Партнер,
	|	ДанныеДокумента.Дата                         КАК Дата,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	Документ.КоммерческоеПредложениеПоставщика КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
			
	Запрос.УстановитьПараметр("РегистрироватьЦеныПоставщика", Реквизиты.РегистрироватьЦеныПоставщика);
	Запрос.УстановитьПараметр("Ссылка",                       Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Период",                       Реквизиты.Дата);
	Запрос.УстановитьПараметр("Валюта",                       Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Партнер",                      Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",Реквизиты.ВалютаРегламентированногоУчета);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ЦеныНоменклатурыПоставщиков";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Неопределено) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта КАК Валюта,
	|	&Период КАК Период,
	|	&Партнер КАК Партнер,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ИНАЧЕ Товары.Упаковка
	|		КОНЕЦ) КАК Упаковка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(ВЫБОР
	|				КОГДА ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|					ТОГДА ТоварыСРазличнымиУпаковкамиЦенами.ЦенаЗаБазовуюЕдиницу
	|				ИНАЧЕ Товары.Цена
	|			КОНЕЦ) КАК ЧИСЛО(31,2)) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСРазличнымиУпаковкамиЦенами КАК ТоварыСРазличнымиУпаковкамиЦенами
	|		ПО Товары.Номенклатура = ТоварыСРазличнымиУпаковкамиЦенами.Номенклатура
	|			И Товары.Характеристика = ТоварыСРазличнымиУпаковкамиЦенами.Характеристика
	|			И Товары.ВидЦеныПоставщика = ТоварыСРазличнымиУпаковкамиЦенами.ВидЦеныПоставщика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|		ПО (КурсыВалюты.Валюта = &Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
	|		ПО (КурсыВалютыЦены.Валюта = Товары.ВидЦеныПоставщика.Валюта)
	|ГДЕ
	|	НЕ Товары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалют";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &ВалютаРегламентированногоУчета) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаТовары";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	Товары.ЕдиницаИзмерения КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Цена * ВЫБОР
	|			КОГДА &Валюта <> ВидыЦенПоставщиков.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыВидыЦеныПоставщика.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалютыВидыЦеныПоставщика.КурсЧислитель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|							ТОГДА КурсыВалюты.КурсЧислитель * КурсыВалютыВидыЦеныПоставщика.КурсЗнаменатель / (КурсыВалютыВидыЦеныПоставщика.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.КоммерческоеПредложениеПоставщика.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	|		ПО (ВидыЦенПоставщиков.Ссылка = Товары.ВидЦеныПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|		ПО (КурсыВалюты.Валюта = &Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалютыВидыЦеныПоставщика
	|		ПО (КурсыВалютыВидыЦеныПоставщика.Валюта = ВидыЦенПоставщиков.Валюта)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И &РегистрироватьЦеныПоставщика";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ТоварыСРазличнымиУпаковкамиЦенами";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	СРЕДНЕЕ(Товары.Цена / ВЫБОР
	|			КОГДА Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА &ТекстЗапросаКоэффициентУпаковки
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЦенаЗаБазовуюЕдиницу,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) КАК КоличествоРазличныхУпаковок
	|ПОМЕСТИТЬ ТоварыСРазличнымиУпаковкамиЦенами
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ВидЦеныПоставщика
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
//-- Локализация
