///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Установить компоненту для интеграции с НСПК
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение вызываемое после установки
//       описание результата см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации .
//
Процедура УстановитьКомпонентуИнтеграцииНСПК(ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОписаниеКомпоненты = ЭлектронныеСертификатыНСПККлиентСервер.ОписаниеКомпоненты();
	ИмяОбъекта = ОписаниеКомпоненты.ИмяОбъекта;
	ПолноеИмяМакета = ОписаниеКомпоненты.ПолноеИмяМакета;
	
	ОповещениеМетода = Новый ОписаниеОповещения("УстановитьКомпонентуИнтеграцииНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	ВнешниеКомпонентыБПОКлиент.УстановитьКомпонентуИзМакета(ОповещениеМетода, ПолноеИмяМакета);
	
КонецПроцедуры

// Завершить установку компоненты для интеграции с НСПК и вызвать оповещение пользователя
//
// Параметры:
//   РезультатПодключения - Структура:
//    * Подключено - Булево - 
//    * ОписаниеОшибки - Строка - 
//    * ПодключаемыйМодуль - ОбъектВнешнейКомпоненты -   
//   ДополнительныеПараметры - Структура - 
//     * ОповещениеПриЗавершении - ОписаниеОповещения -
//
Процедура УстановитьКомпонентуИнтеграцииНСПКЗавершение(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации(РезультатПодключения.Установлено, РезультатПодключения.ОписаниеОшибки);
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает получение версии внешней компоненты НСПК
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - В случае успеха результатом оповещения будет номер версии, в случае ошибки
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//
Процедура НачатьПолучениеВерсииВК(ОповещениеПриЗавершении) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеВерсииВКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, Неопределено);
	
КонецПроцедуры

// Завершить получение версии компоненты для интеграции с НСПК и вызвать оповещение пользователя в случае ошибки
//
// Параметры:
//   РезультатВыполнения - См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура: 
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя     
//
Процедура НачатьПолучениеВерсииВКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеВерсииВКВозврат", ЭтотОбъект, ДополнительныеПараметры); 
		
		ВнешняяКомпонента.НачатьВызовВерсия(ОповещениеМетода);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Завершить получение версии компоненты и вызвать оповещение пользователя в случае успеха
//
// Параметры:
//   ТекстРезультата - Строка - Текст результата выполнения операции
//   ПараметрыВызова - Массив -
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - оповещение пользователя
//     * ВнешняяКомпонента - ОбъектВнешнейКомпоненты - Объект внешней компоненты         
//
Процедура НачатьПолучениеВерсииВКВозврат(ТекстРезультата, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ТекстРезультата);
	
КонецПроцедуры

// Подключает компоненту и начинает тестовое подключение к НСПК
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьТестовоеПодключение(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.ЭлектронныеСертификатыНСПККлиент.ТестовоеПодключение";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьТестовоеПодключениеЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет тестовое подключение к НСПК
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьТестовоеПодключениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы = ПараметрыОперации.ИдентификаторКассы;
		ТестовоеСообщение = НСтр("ru = 'Тест 1С'");
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		// АПК: 1036-выкл  совместимость с драйвером
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовэхо(
			ОповещениеМетода, 
			ИдентификаторЗапроса, // Строка
			ИдентификаторКассы, // Строка
			ТестовоеСообщение); // Строка
		// АПК: 1036-вкл
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает предварительное одобрение использования сертификатов
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПредварительноеОдобрениеИспользования(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.ЭлектронныеСертификатыНСПККлиент.ПредварительноеОдобрениеИспользования";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПредварительноеОдобрениеИспользованияЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет операцию предварительного одобрения использования сертификатов
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПредварительноеОдобрениеИспользованияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
		ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;
		СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет;    
		
		ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПККлиентСервер.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПредварительноеОдобрениеИспользованияЭС());
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПредварительноеОдобрениеИспользования(
			ОповещениеМетода, 
			ИдентификаторЗапроса, // Строка 
			ИдентификаторКассы, // Строка 
			ХешНомерКарты, // Строка 
			СсылкаНаПлатежныйСчет, // Строка
			ТоварныеПозицииJSON); // Строка
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает предварительное одобрение возврата сертификатов
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПредварительноеОдобрениеВозврата(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.ЭлектронныеСертификатыНСПККлиент.ПредварительноеОдобрениеВозврата";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПредварительноеОдобрениеВозвратаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет предварительное одобрение возврата сертификатов
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПредварительноеОдобрениеВозвратаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
		ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;
		СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет;    
		ИдентификаторКорзины  = ПараметрыОперации.ИдентификаторКорзины;
		
		ТоварныеПозицииJSON = ЭлектронныеСертификатыНСПККлиентСервер.ПолучитьJSONТоварныеПозиции(ПараметрыОперации.ТоварныеПозиции);
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПредварительноеОдобрениеВозвратаЭС());
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПредварительноеОдобрениеВозврата(
			ОповещениеМетода,
			ИдентификаторЗапроса, // Строка 
			ИдентификаторКассы, // Строка
			ИдентификаторКорзины, // Строка
			ХешНомерКарты, // Строка 
			СсылкаНаПлатежныйСчет, // Строка 
			ТоварныеПозицииJSON); // Строка
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает выполнение получения состава корзины
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеСоставаКорзины(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.ЭлектронныеСертификатыНСПККлиент.ПолучениеСоставаКорзины";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеСоставаКорзиныЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет получение состава корзины
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеСоставаКорзиныЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;        
		ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеСоставаКорзины());
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПолучениеСоставаКорзиныОригинальнойПокупки(
			ОповещениеМетода, 
			ИдентификаторЗапроса, // Строка 
			ИдентификаторКассы, // Строка 
			ИдентификаторКорзины); // Строка
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
 
// Подключает компоненту и начинает выполнение получения идентификатора корзины
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеИдентификатораКорзины(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеИдентификатораКорзиныЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет выполнение получения идентификатора корзины
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеИдентификатораКорзиныЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
	
		НомерФискальногоНакопителя = ПараметрыОперации.НомерФискальногоНакопителя;
		ФискальныйПризнакЧека      = ПараметрыОперации.ФискальныйПризнакЧека;
		ФискальныйЧекНомер         = ПараметрыОперации.ФискальныйЧекНомер; 
		
		Если НЕ ПустаяСтрока(ПараметрыОперации.QRКодЧекаККТ) Тогда
			ДанныеШтрихкода = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасшифроватьQRКодЧекаККТ(ПараметрыОперации.QRКодЧекаККТ);
			Если ДанныеШтрихкода.Расшифрован Тогда
				НомерФискальногоНакопителя = ДанныеШтрихкода.НомерФискальногоНакопителя;
				ФискальныйПризнакЧека      = ДанныеШтрихкода.ФискальныйПризнак;
				ФискальныйЧекНомер         = ДанныеШтрихкода.НомерФискальногоДокумента;   
			КонецЕсли;   
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеИдентификатораОперации());
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПолучениеИдентификатораКорзиныОперацииПокупки(
			ОповещениеМетода, 
			ИдентификаторЗапроса, // Строка
			ИдентификаторКассы, // Строка 
			НомерФискальногоНакопителя, // Строка 
			ФискальныйЧекНомер, // Строка 
			ФискальныйПризнакЧека); // Строка
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Подключает компоненту и начинает выполнение получение списка сертификатов
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеСпискаСертификатов(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеСпискаСертификатовЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполнение получение списка сертификатов
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеСпискаСертификатовЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
		ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;    
		СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет; 
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеСпискаСертификатов());
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПолучениеСпискаСертификатов(    
			ОповещениеМетода,
			ИдентификаторЗапроса, // Строка
			ИдентификаторКассы, // Строка
			ХешНомерКарты, // Строка
			СсылкаНаПлатежныйСчет); // Строка 
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры                         

// Подключает компоненту и начинает выполнение получение списка идентификаторов корзин покупок ТСП
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСП(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСПЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполнение получение списка идентификаторов корзин покупок ТСП
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСПЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса  = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы    = ПараметрыОперации.ИдентификаторКассы;
		ХешНомерКарты         = ПараметрыОперации.ХешНомерКарты;    
		СсылкаНаПлатежныйСчет = ПараметрыОперации.СсылкаНаПлатежныйСчет;  
		КодТовараТРУ          = ПараметрыОперации.КодТовараТРУ;
			
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПолучениеСпискаСертификатов());
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовЗапросНаПолучениеСпискаИдентификаторовКорзинПокупокТСП(    
			ОповещениеМетода,          
			ИдентификаторЗапроса, // Строка
			ИдентификаторКассы, // Строка   
			КодТовараТРУ, // Строка
			ХешНомерКарты, // Строка
			СсылкаНаПлатежныйСчет); // Строка 
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры                         

// Подключает компоненту и начинает передача данных фискального чека
//
// Параметры: 
//   ОповещениеПриЗавершении - ОписаниеОповещения - событие описания оповещения, описание результата
//                                                  см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПередачуДанныхФискальногоЧека(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.ЭлектронныеСертификатыНСПККлиент.ПередачаДанныхФискальногоЧека";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("НачатьПередачуДанныхФискальногоЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

// Выполняет передачу данных фискального чека
//
// Параметры:
//   РезультатВыполнения - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура НачатьПередачуДанныхФискальногоЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВнешняяКомпонента = РезультатВыполнения.ВнешняяКомпонента;
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		
		ИдентификаторЗапроса = ПараметрыОперации.ИдентификаторЗапроса;
		ИдентификаторКассы   = ПараметрыОперации.ИдентификаторКассы;
		ИдентификаторКорзины = ПараметрыОперации.ИдентификаторКорзины;
		
		НомерФискальногоНакопителя = Строка(ПараметрыОперации.НомерФискальногоНакопителя);
		ФискальныйТипРасчета = Число(ОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодРасчетаДенежнымиСредствами(ПараметрыОперации.ФискальныйТипРасчета));
		ФискальныйПризнакЧека = Строка(ПараметрыОперации.ФискальныйПризнакЧека);
		ФискальныйЧекНомер = Формат(Число(ПараметрыОперации.ФискальныйЧекНомер), "ЧГ=0");     
		ФискальныйЧекСумма = Формат(ПараметрыОперации.ФискальныйЧекСумма, "ЧГ=0;ЧДЦ=2;ЧРД=.");
		ФискальныйМестоРасчетов = Строка(ПараметрыОперации.ФискальныйМестоРасчетов); 
		// АПК: 1367-выкл особенность локального законодательства
		ФискальныйЧекДатаВремя = Формат(ПараметрыОперации.ФискальныйЧекДатаВремя, "ДФ=""ггггММддЧЧмм""");
		// АПК: 1367
		ОснованиеФискальнойОперации = ПараметрыОперации.ОснованиеФискальнойОперации;
		
		ДополнительныеПараметры.Вставить("ВнешняяКомпонента", ВнешняяКомпонента);
		ДополнительныеПараметры.Вставить("ТипПлатежнойОперации", ЭлектронныеСертификатыНСПККлиентСервер.ТипПлатежнойОперацииПередачаДанныхФискальногоЧека());
		ДополнительныеПараметры.Вставить("ОснованиеФискальнойОперации", ОснованиеФискальнойОперации);
		ОповещениеМетода = Новый ОписаниеОповещения("ВызовМетодаЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
		
		ТекстРезультата = ВнешняяКомпонента.НачатьВызовПередачаДанныхФискальногоЧека(
			ОповещениеМетода,
			ИдентификаторЗапроса, // Строка
			ИдентификаторКассы, // Строка
			ИдентификаторКорзины, // Строка 
			НомерФискальногоНакопителя, // Строка
			ФискальныйЧекНомер, // Строка
			ФискальныйПризнакЧека, // Строка
			ФискальныйЧекСумма,  // Строка
			ФискальныйЧекДатаВремя, // Строка
			ФискальныйТипРасчета, // Число
			ФискальныйМестоРасчетов); // Строка
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
       
// Начинает подключение компоненты интеграции НСПК
//
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение, которое будет вызвано после подключения, описание результата 
//                             см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура ПодключитьКомпонентуИнтеграцииНСПК(ОповещениеПриЗавершении, ПараметрыОперации) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.ЭлектронныеСертификатыНСПККлиент.ПодключитьКомпонентуИнтеграцииНСПК";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыОперации);
	
	ОповещениеМетода = Новый ОписаниеОповещения("ПодключитьКомпонентуИнтеграцииНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);  
	
	ОписаниеКомпоненты = ЭлектронныеСертификатыНСПККлиентСервер.ОписаниеКомпоненты();
	ИмяОбъекта = ОписаниеКомпоненты.ИмяОбъекта;
	ПолноеИмяМакета = ОписаниеКомпоненты.ПолноеИмяМакета;
	
	ПараметрыПодключения = ВнешниеКомпонентыБПОКлиент.ПараметрыПодключения();
	ПараметрыПодключения.Изолированно = МенеджерОборудованияКлиентПовтИсп.ИзолированноеПодключенияВнешнихКомпонентНаКлиенте(); 
	ВнешниеКомпонентыБПОКлиент.ПодключитьКомпонентуИзМакета(ОповещениеМетода, ИмяОбъекта, ПолноеИмяМакета);
	
КонецПроцедуры

// Завершает подключение компоненты НСПК и вызывает оповещение пользователя
//
// Параметры:
//  РезультатПодключения - Структура:
//   * Подключено - Булево - 
//   * ОписаниеОшибки - Строка - 
//   * ПодключаемыйМодуль - ОбъектВнешнейКомпоненты -
//  ДополнительныеПараметры - Структура:
//   * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя при завершении.
//   * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
Процедура ПодключитьКомпонентуИнтеграцииНСПКЗавершение(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения.Подключено Тогда 
		РезультатВыполнения = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации(Истина);
		РезультатВыполнения.Вставить("ВнешняяКомпонента", РезультатПодключения.ПодключаемыйМодуль);
		
		ПодготовитьКомпонентуИнтеграцииНСПК(РезультатВыполнения.ВнешняяКомпонента, ДополнительныеПараметры.ПараметрыОперации);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ОписаниеОшибки =  НСтр("ru = 'Компонента FECNSPK не подключена.'");
		РезультатВыполнения = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперации(Ложь, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершает операции с компонентой НСПК и выполняет вызов оповещения пользователя
//
// Параметры:
//   ТекстРезультата - Строка - Текст результата выполнения операции.
//   ПараметрыВызова - Массив -
//   ДополнительныеПараметры - Структура:
//     * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение пользователя.
//     * ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//     * ВнешняяКомпонента - ОбъектВнешнейКомпоненты - Объект внешней компоненты
//
Процедура ВызовМетодаЗавершение(ТекстРезультата, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Параметры = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыВыполненияОперацииНаСервере();
	Параметры.ТекстРезультата   = ТекстРезультата;
	Параметры.СписокОшибок      = ДополнительныеПараметры.ВнешняяКомпонента.СписокОшибок;
	Параметры.ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
	
	ДополнительныеПараметры.Свойство("ОснованиеФискальнойОперации", Параметры.ОснованиеФискальнойОперации);
	ДополнительныеПараметры.Свойство("ТипПлатежнойОперации",        Параметры.ТипПлатежнойОперации);
	
	РезультатВыполнения = Неопределено;
	ЭлектронныеСертификатыНСПКВызовСервера.ОбработатьДанныеОперации(Параметры, РезультатВыполнения);

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет подготовку внешней компоненты.
//
// Параметры:
//   ВнешняяКомпонента - ОбъектВнешнейКомпоненты - Созданный объект внешней компоненты.
//   ПараметрыОперации - см. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
//
// Возвращаемое значение: 
//   ОбъектВнешнейКомпоненты,
//   Неопределено - если компоненту не удалось загрузить.
//
Функция ПодготовитьКомпонентуИнтеграцииНСПК(ВнешняяКомпонента, ПараметрыОперации = Неопределено) 
	
	Если ПараметрыОперации <> Неопределено Тогда
		
		Если ПараметрыОперации.Свойство("АдресСервера") Тогда
			АдресСервера = ПараметрыОперации.АдресСервера;
			Если Прав(АдресСервера, 1)="/" Или Прав(АдресСервера, 1)="\" Тогда
				АдресСервера = Лев(АдресСервера, СтрДлина(АдресСервера)-1);
			КонецЕсли;
			ВнешняяКомпонента.АдресСервера = СокрЛП(АдресСервера);
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючДоступа") Тогда
			ВнешняяКомпонента.КлючДоступа = СокрЛП(ПараметрыОперации.КлючДоступа);
		КонецЕсли;
	
		Если ПараметрыОперации.Свойство("КлючКассы") Тогда
			ВнешняяКомпонента.КлючКассы = СокрЛП(ПараметрыОперации.КлючКассы);
		КонецЕсли;
		
		Если ПараметрыОперации.Свойство("ПроверятьКорневыеСертификаты") Тогда
			ВнешняяКомпонента.ПроверятьКорневыеСертификаты = ПараметрыОперации.ПроверятьКорневыеСертификаты;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВнешняяКомпонента;
	
КонецФункции  

#КонецОбласти