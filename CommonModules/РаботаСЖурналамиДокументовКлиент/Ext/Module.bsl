////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы пользователя
// с журналами документов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Отображение группы пользовательских отборов и настроек.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура ДокументыОтображениеГруппыПользовательскихОтборовИНастроек(Форма, ИмяСписка) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	ОтобразитьГруппуПользовательскихОтборовИНастроек(Форма, Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления],
		НастройкиСписка);
	
КонецПроцедуры

// Устанавливает значение настройки списка документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
//  ИмяСвойства - Строка - Имя свойства
//  Значение - Произвольный
Процедура УстановитьЗначениеНастройкиСпискаДокументов(Форма, ИмяСписка, ИмяСвойства, Значение) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	
	Если НастройкиСписка.Свойство(ИмяСвойства) Тогда
		НастройкиСписка[ИмяСвойства] = Значение;
	КонецЕсли; 

КонецПроцедуры

// Получение значения настройки списка документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
// 
// Возвращаемое значение:
//  Произвольный - Значение настройки списка документов
Функция ЗначениеНастройкиАвтообновленияСпискаДокументов(Форма, ИмяСписка) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	РеквизитФормыРежимАвтообновления = НастройкиСписка["ИмяРеквизитаРежимАвтообновления"];

	Возврат Форма[РеквизитФормыРежимАвтообновления];

КонецФункции

// Проверяет, что время последнего обновления списка превышает допутимое.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
// 
// Возвращаемое значение:
//  Булево - Время обновления списка превышает допутимое
Функция ВремяОбновленияСпискаПревышаетДопутимое(Форма, ИмяСписка) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	
	Если (НастройкиСписка.ДлительностьОбновления >= НастройкиСписка.ПредельноеВремяОбновленияСпискаДокументов)
		И Не НастройкиСписка.ДанныеУстарели Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

// Получить параметры ключа по документу.
// 
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка - Ссылка на документ
//  Дата - Дата - Дата документа
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
// 
// Возвращаемое значение:
//  Структура - Получить параметры ключа по документу:
// * Ссылка - ДокументСсылка - Ссылка на документ
// * Дата - Дата - Дата документа
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации 
Функция ПолучитьПараметрыКлючаПоДокументу(СсылкаНаДокумент, Дата, ХозяйственнаяОперация) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ссылка", СсылкаНаДокумент);
	СтруктураВозврата.Вставить("Дата", Дата);
	СтруктураВозврата.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Устанавливает параметры обновления списка документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
//  ДанныеУстарели - Булево - Признак того, что данные устарели
//  ДлительностьОбновления - Неопределено, Дата - Длительность последнего обновления в секундах
Процедура УстановитьПараметрыОбновленияСпискаДокументов(Форма, ИмяСписка, ДанныеУстарели,
	ДлительностьОбновления = Неопределено) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	
	Если Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] Тогда
		НастройкиСписка.ДанныеУстарели = Ложь;
	Иначе
		НастройкиСписка.ДанныеУстарели = ДанныеУстарели;
	КонецЕсли;

	Если Не ДлительностьОбновления = Неопределено Тогда
		НастройкиСписка.ДлительностьОбновления = ДлительностьОбновления;
	КонецЕсли;

КонецПроцедуры

// Обновление данных списка документов с замером времени.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
//  Параметр - Произвольный
Процедура ОбновитьДанныеСпискаДокументовСЗамеромВремени(Форма, ИмяСписка, Параметр = Неопределено) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	ИмяЭлементаСписка = НастройкиСписка.ИмяЭлементаСписка;
	КлючиСписка = НастройкиСписка.КлючиСписка;
	
	ТекущаяСтрока = Форма.Элементы[ИмяЭлементаСписка].ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено И ТипЗнч(ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
		И НастройкиСписка.ЕстьОсновнаяТаблица = Ложь Тогда

		ДанныеСтроки = Форма.Элементы[ИмяЭлементаСписка].ДанныеСтроки(ТекущаяСтрока);
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить(КлючиСписка.Получить("Дата"), ТекущаяСтрока[КлючиСписка.Получить("Дата")]);
		СтруктураКлюча.Вставить(КлючиСписка.Получить("ТипСсылки"), ТекущаяСтрока[КлючиСписка.Получить("ТипСсылки")]);
		СтруктураКлюча.Вставить(КлючиСписка.Получить("ХозяйственнаяОперация"), ТекущаяСтрока[КлючиСписка.Получить(
			"ХозяйственнаяОперация")]);
		СтруктураКлюча.Вставить(КлючиСписка.Получить("ИдентификаторЗаписи"), ТекущаяСтрока[КлючиСписка.Получить(
			"ИдентификаторЗаписи")]);

	КонецЕсли;
	
	ВремяНачалаЗамера = ОбщегоНазначенияКлиент.ДатаСеанса();
	Форма.Элементы[НастройкиСписка.ИмяЭлементаСписка].Обновить();
	ДлительностьОбновления = ОбщегоНазначенияКлиент.ДатаСеанса() - ВремяНачалаЗамера;
	УстановитьПараметрыОбновленияСпискаДокументов(Форма, ИмяСписка, Ложь, ДлительностьОбновления);
	
	Если ТекущаяСтрока <> Неопределено И ТипЗнч(ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
		И НастройкиСписка.ЕстьОсновнаяТаблица = Ложь И Не ДанныеСтроки = Неопределено Тогда

		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("КлючиДокументаОповещение") И ДанныеСтроки.Ссылка
			= Параметр.КлючиДокументаОповещение.Ссылка Тогда
			СтруктураКлюча.Вставить(КлючиСписка.Получить("Дата"), Параметр.КлючиДокументаОповещение.Дата);
			СтруктураКлюча.Вставить(КлючиСписка.Получить("ХозяйственнаяОперация"),
				Параметр.КлючиДокументаОповещение.ХозяйственнаяОперация);
		Иначе
			РаботаСЖурналамиДокументовВызовСервера.НайтиДанныеТекущейСтрокиСписка(ДанныеСтроки.Ссылка, СтруктураКлюча, КлючиСписка);
		КонецЕсли;

		ТекущаяСтрокаНовая = Новый КлючСтрокиДинамическогоСписка(СтруктураКлюча);
		Форма.Элементы[ИмяЭлементаСписка].ТекущаяСтрока = ТекущаяСтрокаНовая;

	КонецЕсли;
	
КонецПроцедуры

// Обновление списка документов при возникновении события обработки оповещения на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
//  Параметр - Произвольный
Процедура ОбновитьСписокДокументовСобытиеОбработкаОповещения(Форма, ИмяСписка, Параметр = Неопределено) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	
	Если Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] Тогда
		ОбновитьДанныеСпискаДокументовСЗамеромВремени(Форма, ИмяСписка, Параметр);
	Иначе
		
		КлючиСписка = НастройкиСписка.КлючиСписка;
		ИмяЭлементаСписка = НастройкиСписка.ИмяЭлементаСписка;
		ТекущаяСтрока = Форма.Элементы[ИмяЭлементаСписка].ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено И ТипЗнч(ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
			И НастройкиСписка.ЕстьОсновнаяТаблица = Ложь Тогда

			ДанныеСтроки = Форма.Элементы[ИмяЭлементаСписка].ДанныеСтроки(ТекущаяСтрока);
			СтруктураКлюча = Новый Структура;
			СтруктураКлюча.Вставить(КлючиСписка.Получить("Дата"), ТекущаяСтрока[КлючиСписка.Получить("Дата")]);
			СтруктураКлюча.Вставить(КлючиСписка.Получить("ТипСсылки"), ТекущаяСтрока[КлючиСписка.Получить("ТипСсылки")]);
			СтруктураКлюча.Вставить(КлючиСписка.Получить("ХозяйственнаяОперация"), ТекущаяСтрока[КлючиСписка.Получить(
			"ХозяйственнаяОперация")]);
			СтруктураКлюча.Вставить(КлючиСписка.Получить("ИдентификаторЗаписи"), ТекущаяСтрока[КлючиСписка.Получить(
			"ИдентификаторЗаписи")]);

		КонецЕсли;
	
		УстановитьПараметрыОбновленияСпискаДокументов(Форма, ИмяСписка, Истина);
		
		Если ТекущаяСтрока <> Неопределено И ТипЗнч(ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
			И НастройкиСписка.ЕстьОсновнаяТаблица = Ложь И Не ДанныеСтроки = Неопределено Тогда

			Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("КлючиДокументаОповещение") И ДанныеСтроки.Ссылка
				= Параметр.КлючиДокументаОповещение.Ссылка Тогда
				СтруктураКлюча.Вставить(КлючиСписка.Получить("Дата"), Параметр.КлючиДокументаОповещение.Дата);
				СтруктураКлюча.Вставить(КлючиСписка.Получить("ХозяйственнаяОперация"),
					Параметр.КлючиДокументаОповещение.ХозяйственнаяОперация);
			Иначе
				РаботаСЖурналамиДокументовВызовСервера.НайтиДанныеТекущейСтрокиСписка(ДанныеСтроки.Ссылка, СтруктураКлюча,
					КлючиСписка);
			КонецЕсли;

			ТекущаяСтрокаНовая = Новый КлючСтрокиДинамическогоСписка(СтруктураКлюча);
			Форма.Элементы[ИмяЭлементаСписка].ТекущаяСтрока = ТекущаяСтрокаНовая;

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Получает имя списка документов по имени элемента формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяЭлемента - Строка - имя элемента на форме
// 
// Возвращаемое значение:
//  Структура - Данные о наименовании списка и действии:
// * ИмяСписка - Строка - 
// * Действие - Строка - 
Функция ИмяСпискаДокументовПоИмениЭлементаФормы(Форма, ИмяЭлемента) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	СтруктураВозврата = Новый Структура("ИмяСписка, Действие", "", "");
	
	Для каждого СписокДокументов Из Форма[ИмяНастройки] Цикл
		
		ДанныеПоЭлементу = СписокДокументов.Значение["ЭлементыГруппыНастроек"].Получить(ИмяЭлемента);
		Если ДанныеПоЭлементу <> Неопределено Тогда
			СтруктураВозврата.ИмяСписка = СписокДокументов.Ключ;
			СтруктураВозврата.Действие = ДанныеПоЭлементу;
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Исправление пользовательских отборов в списке документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура ИсправитьПользовательскиеОтборыВСпискеДокументов(Форма, ИмяСписка) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	ПроблемныеЭлементыОтбора = Новый Массив; //СтруктураПользовательскихНастроек
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроблемныеЭлементыОтбора,
		НастройкиСписка.СтруктураПользовательскихНастроек["ОтборОбычные"], Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроблемныеЭлементыОтбора,
		НастройкиСписка.СтруктураПользовательскихНастроек["ОтборКритичные"], Истина);

	ПользовательскиеНастройкиДинамическогоСпискаОтключитьИспользованиеЭлементовОтбора(Форма[ИмяСписка],
		ПроблемныеЭлементыОтбора);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, НастройкиСписка.ЭлементОтборыСписка,
		"Видимость", Ложь);

	ОтобразитьГруппуПользовательскихОтборовИНастроек(Форма, Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления],
		НастройкиСписка, Истина);

КонецПроцедуры

// Исправление настройки сортировки в списке документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура ИсправитьНастройкиСортировкиВСпискеДокументов(Форма, ИмяСписка) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	ПроблемныеЭлементыПорядок = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроблемныеЭлементыПорядок,
		НастройкиСписка.СтруктураПользовательскихНастроек["ПорядокОбычные"], Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроблемныеЭлементыПорядок,
		НастройкиСписка.СтруктураПользовательскихНастроек["ПорядокКритичные"], Истина);

	ПользовательскиеНастройкиДинамическогоСпискаОтключитьИспользованиеЭлементовПорядка(Форма[ИмяСписка],
		ПроблемныеЭлементыПорядок);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, НастройкиСписка.ЭлементПорядокСписка,
		"Видимость", Ложь);

	ОтобразитьГруппуПользовательскихОтборовИНастроек(Форма, Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления],
		НастройкиСписка, Истина);

КонецПроцедуры

// Исправление настройки условного оформления в списке документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура ИсправитьНастройкиУсловногоОформленияВСпискеДокументов(Форма, ИмяСписка) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	ПроблемныеЭлементыУсловногоОформления = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроблемныеЭлементыУсловногоОформления,
		НастройкиСписка.СтруктураПользовательскихНастроек["УсловноеОформлениеОбычные"], Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроблемныеЭлементыУсловногоОформления,
		НастройкиСписка.СтруктураПользовательскихНастроек["УсловноеОформлениеКритичные"], Истина);

	ПользовательскиеНастройкиДинамическогоСпискаОтключитьИспользованиеЭлементовОформления(Форма[ИмяСписка],
		ПроблемныеЭлементыУсловногоОформления);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		НастройкиСписка.ЭлементУсловноеОформлениеСписка, "Видимость", Ложь);

	ОтобразитьГруппуПользовательскихОтборовИНастроек(Форма, Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления],
		НастройкиСписка, Истина);

КонецПроцедуры

// Сохранение настройки производительного режима обновления списка.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура СохранитьНастройкуПроизводительныйРежимОбновленияСписка(Форма, ИмяСписка) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	ВключенПроизводительныйРежимОбновления = Форма[НастройкиСписка.ИмяРеквизитаПроизводительныйРежимОбновления];
	
	РаботаСЖурналамиДокументовВызовСервера.СохранитьНастройкуПроизводительныйРежимОбновленияСписка(ВключенПроизводительныйРежимОбновления);

КонецПроцедуры

// Установливает списку документов признак потери актуальности отображаемых данных.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(Форма, ИмяСписка) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	
	Если Не Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] Тогда
		
		УстановитьПараметрыОбновленияСпискаДокументов(Форма, ИмяСписка, Истина);
		ПоказатьГруппуНастроекОбновленияСписка("НеактуальныеДанные", Форма, НастройкиСписка);
		
	КонецЕсли;

КонецПроцедуры

// Отображение группы пользовательских отборов и настроек на форме по-умолчанию.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(Форма, ИмяСписка) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	Если Не Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] Тогда
		
		ВидимостьГруппыОтсутствиеПроблем = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы,
			НастройкиСписка.ГруппаОтсутствиеПроблем, "Видимость");
			
		Если ВидимостьГруппыОтсутствиеПроблем Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьГруппуНастроекОбновленияСписка("ОтсутствиеПроблем", Форма, НастройкиСписка);
		
	КонецЕсли;

КонецПроцедуры

// Параметры обновления списка документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
// 
// Возвращаемое значение:
//  Структура - Параметры обновления списка документов:
// * Форма - ФормаКлиентскогоПриложения - 
// * ИмяСписка - Строка -
// * ОбновитьСписок - см. РаботаСЖурналамиДокументовКлиент.ЗначениеНастройкиАвтообновленияСпискаДокументов 
Функция ПараметрыОбновленияСпискаДокументов(Форма, ИмяСписка) Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("Форма", Форма);
	ПараметрыОбновления.Вставить("ИмяСписка", ИмяСписка);
	
	ОбновитьСписок = РаботаСЖурналамиДокументовКлиент.ЗначениеНастройкиАвтообновленияСпискаДокументов(Форма, ИмяСписка);

	ПараметрыОбновления.Вставить("ОбновитьСписок", ОбновитьСписок);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Чтение настроек динамического списка и отображение элементов, которые могут приводить к снижению скорости работы
// с ним, в группе пользовательских отборов и настроек на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ПараметрыСписка - см. РаботаСЖурналамиДокументов.СтруктураПользовательскихНастроекСписка
//
Процедура ПрочитатьОтобразитьНастройкиДинамическогоСписка(Форма, ПараметрыСписка)
	
	Настройки = ПараметрыСписка.СтруктураПользовательскихНастроек;

	//Отборы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.ЭлементОтборыСписка,
		"Видимость", Настройки.ЕстьПроблемыВНастройкахОтбораКритичные
		Или Настройки.ЕстьПроблемыВНастройкахОтбораОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.ЭлементОтборКритичные,
		"Видимость", Настройки.ЕстьПроблемыВНастройкахОтбораКритичные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.ЭлементОтборОбычные,
		"Видимость", Настройки.ЕстьПроблемыВНастройкахОтбораОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементОтборыИсправить, "Видимость", Настройки.ЕстьПроблемыВНастройкахОтбораОбычные
		Или Настройки.ЕстьПроблемыВНастройкахОтбораКритичные);

	Если Настройки.ЕстьПроблемыВНастройкахОтбораКритичные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементОтборКритичные, "Заголовок", СтрСоединить(Настройки.ОтборКритичныеПредставление,
			Символы.ПС));
	КонецЕсли;

	Если Настройки.ЕстьПроблемыВНастройкахОтбораОбычные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементОтборОбычные, "Заголовок", СтрСоединить(Настройки.ОтборОбычныеПредставление,
			Символы.ПС));
	КонецЕсли;
		
	// Выбранные поля
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.ЭлементВыбранныеПоля,
		"Видимость", Настройки.ЕстьПроблемыВВыбранныхПоляхКритичные Или Настройки.ЕстьПроблемыВВыбранныхПоляхОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементВыбранныеПоляКритичные, "Видимость", Настройки.ЕстьПроблемыВВыбранныхПоляхКритичные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементВыбранныеПоляОбычные, "Видимость", Настройки.ЕстьПроблемыВВыбранныхПоляхОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементВыбранныеПоляИсправить, "Видимость", Настройки.ЕстьПроблемыВВыбранныхПоляхКритичные
		Или Настройки.ЕстьПроблемыВВыбранныхПоляхОбычные);

	Если Настройки.ЕстьПроблемыВВыбранныхПоляхКритичные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементВыбранныеПоляКритичные, "Заголовок", СтрСоединить(
				Настройки.ВыбранныеПоляКритичныеПредставление, Символы.ПС));
	КонецЕсли;

	Если Настройки.ЕстьПроблемыВВыбранныхПоляхОбычные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементВыбранныеПоляОбычные, "Заголовок", СтрСоединить(
				Настройки.ВыбранныеПоляОбычныеПредставление, Символы.ПС));
	КонецЕсли;
		
	//Порядок
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.ЭлементПорядокСписка,
		"Видимость", Настройки.ЕстьПроблемыВНастройкахПорядкаКритичные
		Или Настройки.ЕстьПроблемыВНастройкахПорядкаОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементПорядокКритичные, "Видимость", Настройки.ЕстьПроблемыВНастройкахПорядкаКритичные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.ЭлементПорядокОбычные,
		"Видимость", Настройки.ЕстьПроблемыВНастройкахПорядкаОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементПорядокИсправить, "Видимость", Настройки.ЕстьПроблемыВНастройкахПорядкаКритичные
		Или Настройки.ЕстьПроблемыВНастройкахПорядкаОбычные);

	Если Настройки.ЕстьПроблемыВНастройкахПорядкаКритичные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементПорядокКритичные, "Заголовок", СтрСоединить(
				Настройки.ПорядокКритичныеПредставление, Символы.ПС));
	КонецЕсли;

	Если Настройки.ЕстьПроблемыВНастройкахПорядкаОбычные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементПорядокОбычные, "Заголовок", СтрСоединить(Настройки.ПорядокОбычныеПредставление,
			Символы.ПС));
	КонецЕсли;
		
	// Условное оформление
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементУсловноеОформлениеСписка, "Видимость", Настройки.ЕстьПроблемыВНастройкахОформленияКритичные
		Или Настройки.ЕстьПроблемыВНастройкахОформленияОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементУсловноеОформлениеКритичные, "Видимость",
		Настройки.ЕстьПроблемыВНастройкахОформленияКритичные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементУсловноеОформлениеОбычные, "Видимость",
		Настройки.ЕстьПроблемыВНастройкахОформленияОбычные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		ПараметрыСписка.ЭлементУсловноеОформлениеИсправить, "Видимость", Настройки.ЕстьПроблемыВНастройкахОформленияКритичные
		Или Настройки.ЕстьПроблемыВНастройкахОформленияОбычные);

	Если Настройки.ЕстьПроблемыВНастройкахОформленияКритичные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементУсловноеОформлениеКритичные, "Заголовок", СтрСоединить(
				Настройки.УсловноеОформлениеКритичныеПредставление, Символы.ПС));
	КонецЕсли;

	Если Настройки.ЕстьПроблемыВНастройкахОформленияОбычные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементУсловноеОформлениеОбычные, "Заголовок", СтрСоединить(
				Настройки.УсловноеОформлениеОбычныеПредставление, Символы.ПС));
	КонецЕсли;

КонецПроцедуры

// Проверяет пользовательские настройки отбора динамического списка и отключает использование по переданному списку полей.
// 
// Параметры:
//  ДинамическийСписок - ДинамическийСписок -
//  СписокПолей - Массив из Строка - Список полей
//
Процедура ПользовательскиеНастройкиДинамическогоСпискаОтключитьИспользованиеЭлементовОтбора(ДинамическийСписок, СписокПолей)
	
	ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для каждого ЭлементПользовательскихНастроек Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтключитьИспользованиеЭлементовПользовательскогоОтбораРекурсивно(ЭлементПользовательскихНастроек, СписокПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает использование элементов пользовательского отбора рекурсивно по переданному списку полей
// 
// Параметры:
//  ОтборСписка - ОтборКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - Отбор списка
//  СписокПолей - Массив из Строка - Список полей
Процедура ОтключитьИспользованиеЭлементовПользовательскогоОтбораРекурсивно(ОтборСписка, СписокПолей)
	
	Для Каждого ЭлементОтбора Из ОтборСписка.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ОтключитьИспользованиеЭлементовПользовательскогоОтбораРекурсивно(ЭлементОтбора, СписокПолей);
			Продолжить;
			
		КонецЕсли;
		
		Если ЭлементОтбора.Использование Тогда
			ПолеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если Не СписокПолей.Найти(ПолеОтбора) = Неопределено Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отображение группы пользовательских отборов и настроек на форме с выводом предупреждений по тем элементам,
// которые могут приводить к снижению скорости работы с динамическим списком.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  АвтообновлениеСписка - Булево - Режим автообновления динамического списка
//  ПараметрыСписка - см. РаботаСЖурналамиДокументов.СтруктураПользовательскихНастроекСписка
//  РежимИсправления - Булево - Режим исправления пользовательских настроек в форме
//
Процедура ОтобразитьГруппуПользовательскихОтборовИНастроек(Форма, АвтообновлениеСписка, ПараметрыСписка, РежимИсправления = Ложь)

	Если РежимИсправления Тогда

		ВидимостьЭлементВыбранныеПоля = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементВыбранныеПоля, "Видимость");
		ВидимостьЭлементОтборыСписка = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементОтборыСписка, "Видимость");
		ВидимостьЭлементПорядокСписка = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ЭлементПорядокСписка, "Видимость");
		ВидимостьЭлементУсловноеОформлениеСписка = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
			Форма.Элементы, ПараметрыСписка.ЭлементУсловноеОформлениеСписка, "Видимость");

		Если Не ВидимостьЭлементВыбранныеПоля И Не ВидимостьЭлементОтборыСписка И Не ВидимостьЭлементПорядокСписка
			И Не ВидимостьЭлементУсловноеОформлениеСписка Тогда

			ПоказатьГруппуНастроекОбновленияСписка("ОтсутствиеПроблем", Форма, ПараметрыСписка);

		КонецЕсли;

		Возврат;

	КонецЕсли;

	Если Не АвтообновлениеСписка И ПараметрыСписка.ДанныеУстарели Тогда

		ПоказатьГруппуНастроекОбновленияСписка("НеактуальныеДанные", Форма, ПараметрыСписка);

	ИначеЕсли Не АвтообновлениеСписка Тогда

		Если ПараметрыСписка.ДлительностьОбновления >= ПараметрыСписка.ПредельноеВремяОбновленияСпискаДокументов
			И ПараметрыСписка["СтруктураПользовательскихНастроек"].ЕстьПроблемыВНастройках Тогда

			ПоказатьГруппуНастроекОбновленияСписка("ОписаниеПроблем", Форма, ПараметрыСписка);
			ПрочитатьОтобразитьНастройкиДинамическогоСписка(Форма, ПараметрыСписка);

		Иначе

			ПоказатьГруппуНастроекОбновленияСписка("ОтсутствиеПроблем", Форма, ПараметрыСписка);

		КонецЕсли;

	Иначе

		Если ПараметрыСписка.ДлительностьОбновления >= ПараметрыСписка.ПредельноеВремяОбновленияСпискаДокументов
			И ПараметрыСписка["СтруктураПользовательскихНастроек"].ЕстьПроблемыВНастройках Тогда

			ПоказатьГруппуНастроекОбновленияСписка("ОписаниеПроблем", Форма, ПараметрыСписка);
			ПрочитатьОтобразитьНастройкиДинамическогоСписка(Форма, ПараметрыСписка);

		Иначе

			ПоказатьГруппуНастроекОбновленияСписка("ОтсутствиеПроблем", Форма, ПараметрыСписка);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет пользовательские настройки условного оформления динамического списка и отключает использование по 
// переданному списку полей.
// 
// Параметры:
//  ДинамическийСписок - ДинамическийСписок -
//  СписокПолей - Массив из Строка - Список полей
//
Процедура ПользовательскиеНастройкиДинамическогоСпискаОтключитьИспользованиеЭлементовОформления(ДинамическийСписок,
	СписокПолей) Экспорт

	ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлементПользовательскихНастроек Из ПользовательскиеНастройки.Элементы Цикл

		Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
			ЭлементыУсловногоОформления = ЭлементПользовательскихНастроек.Элементы;
			Для каждого ЭлементУсловногоОформления Из ЭлементыУсловногоОформления Цикл
				ОтключитьИспользованиеЭлементовПользовательскогоОтбораРекурсивно(ЭлементУсловногоОформления.Отбор, СписокПолей);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Проверяет пользовательские настройки порядка динамического списка и отключает использование по переданному списку полей.
// 
// Параметры:
//  ДинамическийСписок - ДинамическийСписок -
//  СписокПолей - Массив из Строка - Список полей
//
Процедура ПользовательскиеНастройкиДинамическогоСпискаОтключитьИспользованиеЭлементовПорядка(ДинамическийСписок, СписокПолей)
	
	ПользовательскиеНастройки = ДинамическийСписок.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлементПользовательскихНастроек Из ПользовательскиеНастройки.Элементы Цикл

		Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ПорядокКомпоновкиДанных") Тогда

			Для Каждого ЭлементПорядка Из ЭлементПользовательскихНастроек.Элементы Цикл
				Если ЭлементПорядка.Использование Тогда
					ПолеПорядка = Строка(ЭлементПорядка.Поле);
					Если Не СписокПолей.Найти(ПолеПорядка) = Неопределено Тогда
						ЭлементПорядка.Использование = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Включение видимости основной группы настройки обновления списка.
// 
// Параметры:
//  ИмяГруппы - Строка -
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ПараметрыСписка - см. РаботаСЖурналамиДокументов.СтруктураПользовательскихНастроекСписка
Процедура ПоказатьГруппуНастроекОбновленияСписка(ИмяГруппы, Форма, ПараметрыСписка)

	Если ИмяГруппы = "ОписаниеПроблем" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаОписаниеПроблем, "Видимость", Истина);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаОтсутствиеПроблем, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаНеактуальныеДанные, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.КнопкаОбновить,
			"Видимость", Ложь);
			
	КонецЕсли;
	
	Если ИмяГруппы = "ОтсутствиеПроблем" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаОписаниеПроблем, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаОтсутствиеПроблем, "Видимость", Истина);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаНеактуальныеДанные, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.КнопкаОбновить,
			"Видимость", Ложь);
			
	КонецЕсли;
	
	Если ИмяГруппы = "НеактуальныеДанные" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаОписаниеПроблем, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаОтсутствиеПроблем, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			ПараметрыСписка.ГруппаНеактуальныеДанные, "Видимость", Истина);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ПараметрыСписка.КнопкаОбновить,
			"Видимость", Истина);
			
	КонецЕсли;

КонецПроцедуры
	
Функция ИмяНастройкиФормыСписковДокументов()
	
	Возврат "СписокДокументовКэшНастроек";
	
КонецФункции

#КонецОбласти