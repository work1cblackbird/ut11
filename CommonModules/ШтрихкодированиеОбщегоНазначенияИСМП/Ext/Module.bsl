
#Область ПрограммныйИнтерфейс

// Инициализирует структуру, которая описывает результат обработки штрихкодов. Состоит из базовых свойств 
// (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода), дополненных специфичными свойствами
// (См. ДополнитьСвойстваРезультатаОбработкиШтрихкода).
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования  - (См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования)
// Возвращаемое значение:
//  (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода = Неопределено, ПараметрыСканирования = Неопределено) Экспорт
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Дополняет свойства структуры результат обработки штрихкода специфичными свойствами, характерными для продукции ИС МП.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМПРозница",  Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАктуализацияCDNПлощадок", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОтсутствуютCDNПлощадки",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",             Новый Структура);
	
КонецПроцедуры

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  См. ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	
	// У логистической упаковки SSCC считанной в РМК может не быть вида продукции
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		Если РезультатДобавления.ВидыПродукции.Найти(ДанныеШтрихкода.ВидПродукции) = Неопределено Тогда
			РезультатДобавления.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

Процедура ПроверитьПолныйКодМаркировкиПоДаннымРазбора(ДанныеРазбора, СтрокаДанных, ПараметрыСканирования) Экспорт
	
	ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
	Если (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
				ДанныеРазбора.ВидУпаковки, ДанныеРазбора))
		И ДанныеРазбора.Свойство("Детализация")
		И ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
		И ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост Тогда
		
		ПолныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПолныйКодМаркировкиПоДаннымРазбораСРасширеннойДетализацией(
			ДанныеРазбора,
			Истина,
			ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаДанных.ШтрихкодBase64));
		
		Если ПолныйКодМаркировки <> Неопределено Тогда
			
			ПолныйКодМаркировкиBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ПолныйКодМаркировки);
			Если ПолныйКодМаркировкиBase64 <> СтрокаДанных.ШтрихкодBase64 Тогда
				СтрокаДанных.ШтрихкодBase64 = ПолныйКодМаркировкиBase64;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования = Неопределено, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ОбязательныеКолонки = Новый Структура;
	ОбязательныеКолонки.Вставить("Владелец",                        Неопределено);
	ОбязательныеКолонки.Вставить("ПредставлениеСтатуса",            Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("Производитель",                   Неопределено);
	ОбязательныеКолонки.Вставить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ОбязательныеКолонки.Вставить("ЕстьВПулеКодовМаркировки",        Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ПолныйКодМаркировки",             Новый ОписаниеТипов("Строка"));
	
	ОбязательныеКолонки.Вставить("ТребуетсяУточнениеЧастичногоВыбытия", Новый ОписаниеТипов("Булево"));
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		
		ПараметрыДерева = ШтрихкодированиеОбщегоНазначенияМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам);
		ШтрихкодированиеОбщегоНазначенияМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, ОбязательныеКолонки);
		
		ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки);
		
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДанныеКодовМаркировки, ОбязательныеКолонки);
	
КонецПроцедуры

// Первый этап проверок. Выполняется сразу после считывания штрихкода. 
// 
// Параметры:
//  ДанныеКодовМаркировки - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение- В случае удачного прохождения проверок - возвращает пустое соответствие,
//           В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт
	
	РезультатыПроверок = ПроверитьНаНеобходимостьОбновленияКлючаСессии(ДанныеКодовМаркировки, ПараметрыСканирования);
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Выполняет проверку на необходимость выполнения авторизации пользователя.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//		Ключ - Строка - Код маркировки
//		Значение - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ПроверитьНаНеобходимостьОбновленияКлючаСессии(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
		
		ТребуетсяАвторизацияИСМП = ТребуетсяАвторизацияПользователя(ПараметрыСканирования);
		Если Не ТребуетсяАвторизацияИСМП Тогда
			Возврат РезультатыПроверок;
		КонецЕсли;
		
	Иначе
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		// Например, в заказе на Эмиссию можно сканировать EAN и сканирование КМ не требуется
		Если Не ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки
			И СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			Или (СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 // Проверка на упаковку с 1 видом продукции.
				И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки[0])) Тогда
			
			ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных);
			ДанныеШтрихкода.Удалить("СтрокаДерева");
			
			РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
			ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования);
			
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатыПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатОбработкиШтрихкода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Проверяет необходимость авторизации пользователя на сервере ИС МП.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется авторизация.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования) Экспорт
	
	ТребуетсяАвторизация = Ложь;
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования) Тогда
		
		Если ИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессииСУчетомВидаТокена(ПараметрыСканирования) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

// Заполняет результат обработки, который информирует о необходимости выполнения авторизации ИС МП.
// 
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  РозничныйТокен - Булево - признак необходимости розничного токена продажи
Процедура ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработкиШтрихкода, ПараметрыСканирования, РозничныйТокен  = Ложь) Экспорт

	Если РозничныйТокен Тогда
		РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМПРозница = Истина;
	Иначе
		РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет результат обработки, который информирует о необходимости актуализации списка CDN-площадок
// 
// Параметры:
//  РезультатОбработкиШтрихкода - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
Процедура ДополнитьРезультатОбработкиПризнакомНеобходимостиОбновленияCDNПлощадок(РезультатОбработкиШтрихкода, ДанныеПоШтрихкодам) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатОбработкиШтрихкода, "ТребуетсяАктуализацияCDNПлощадок") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ТребуетсяАктуализацияCDNПлощадок = ДанныеПоШтрихкодам.ТребуетсяОбновлениеCDNПлощадок;
	
КонецПроцедуры

// Заполняет результат обработки, который информирует об отсутствии CDN-площадок
// 
// Параметры:
//  РезультатОбработкиШтрихкода - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
Процедура ДополнитьРезультатОбработкиПризнакомОтсутствияCDNПлощадок(РезультатОбработкиШтрихкода, ДанныеПоШтрихкодам) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатОбработкиШтрихкода, "ОтсутствуютCDNПлощадки") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ОтсутствуютCDNПлощадки = ДанныеПоШтрихкодам.ОтсутствуютCDNПлощадки;
	
КонецПроцедуры

// Добавляет реквизиты проверки средствами ККТ при встраивании проверки непосредственно в форму РМК не используя отдельную форму ожидания ККТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма РМК
//  ДобавляемыеРеквизиты - Массив из РеквизитФормы - Реквизиты, которые будут добавлены на форму.
Процедура ДобавитьРеквизитыПроверкиСредствамиККТ(Форма, ДобавляемыеРеквизиты) Экспорт

КонецПроцедуры

#Область РаботаСОшибками

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт

	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);

КонецПроцедуры

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПравилаПроверкиНаОшибки - Структура - доступные правила проверки на ошибки:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Доступные статусы
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)

	РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);

	ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
		И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда

		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл

			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда

		ПредставленияСтатусов = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ПредставлениеСтатусов;
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаДанных.Статус)
				И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние)
				И СтрокаДанных.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДанных.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Статус: %1 (%2)'"),
					ПредставленияСтатусов.Получить(СтрокаДанных.Статус),
					ПредставленияСтатусов.Получить(СтрокаДанных.ОсобоеСостояние));
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставленияСтатусов.Получить(СтрокаДанных.Статус));
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			СтрокаДанных.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);

			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				
				ЗапретитьОтключениеКонтроляСтатусов = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
					СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП,
					ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
				
				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.Статус                              = СтрокаДанных.Статус;
				ВидДополнения.ВидОперацииИСМП                     = ПараметрыСканирования.ВидОперацииИСМП;
				ВидДополнения.СпособВводаВОборот                  = СтрокаДанных.СпособВводаВОборот;
				ВидДополнения.ЗапретитьОтключениеКонтроляСтатусов = ЗапретитьОтключениеКонтроляСтатусов;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);

			КонецЕсли;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			Если Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				ИННВладельцаПредставление = НСтр("ru = 'Отсутствует'");
			Иначе
				ИННВладельцаПредставление = СтрокаДанных.ИННВладельца;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Владелец: %1 (%2)'"),
					СтрокаДанных.Владелец,
					ИННВладельцаПредставление);
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1'"),
					ИННВладельцаПредставление);
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			СтрокаДанных.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);

			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				
				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.Владелец                            = Истина;
				ВидДополнения.ВидОперацииИСМП                     = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);

			КонецЕсли;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда

		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл

			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
			Если СпособВводаВОборот = Неопределено Тогда
				СпособВводаВОборот = НСтр("ru='Неопределен'");
			КонецЕсли;

			Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
				ПредставлениеСпособаВводаВОборот = СтрСоединить(
					ПараметрыСканирования.ДопустимыйСпособВводаВОборот,
					НСтр("ru = ','") + " ");
			Иначе
				ПредставлениеСпособаВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: %1
				           |Ожидаемый способ ввода в оборот: %2'"),
				СпособВводаВоборот, ПредставлениеСпособаВводаВОборот);

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.ЕстьОшибка Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.СтрокиСОшибками Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			СрокГодности = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Срок годности кода маркировки не соответствует ни одному ВСД.
				           |Срок годности: %1'"), СрокГодности);

			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");

				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.Статус          = СтрокаДанных.Статус;
				ВидДополнения.ВидОперацииИСМП = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);

			КонецЕсли;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольСрокаГодности.СтрокиСОшибками.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Истек срок годности продукции. Товар годен до: %1'"),
				СтрокаДанных.ГоденДо);
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			СтрокаДанных.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКоличестваМерногоТовара")
		И ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара.Количество() > 1 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиТребуетсяУточнениеКоличества();

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольЭтоВесоваяПродукция")
		И ПравилаПроверкиНаОшибки.КонтрольЭтоВесоваяПродукция.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольЭтоВесоваяПродукция Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиТолькоВесоваяПродукция(СтрокаДанных);

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольЭтоВесоваяПродукция.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставКодовОСУ")
		И ПравилаПроверкиНаОшибки.КонтролироватьСоставКодовОСУ.Количество() > 0 Тогда

		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтролироватьСоставКодовОСУ Цикл

			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтролироватьСоставКодовОСУ.Очистить();

	КонецЕсли;

	ОписаниеОшибокКонтроляЧастичногоВыбытия(ПравилаПроверкиНаОшибки, ПараметрыСканирования, Истина);

	ШтрихкодированиеОбщегоНазначенияИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);

КонецПроцедуры

Процедура ОписаниеОшибокКонтроляЧастичногоВыбытия(ПравилаПроверкиНаОшибки, ПараметрыСканирования, ОбработкаСтрокиТаблицы = Ложь) Экспорт

	Если ПравилаПроверкиНаОшибки.Свойство("ПолноеВыбытиеНевозможноРанееВыбывалЧастично")
		И ПравилаПроверкиНаОшибки.ПолноеВыбытиеНевозможноРанееВыбывалЧастично.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.ПолноеВыбытиеНевозможноРанееВыбывалЧастично Цикл

			Если ОбработкаСтрокиТаблицы Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если СтрокаДанных.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДанных.ЕстьОшибки  = Истина;
			КонецЕсли;

			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				ОписаниеПроблемы = НСтр("ru = 'Сигары (сигариллы, ...) ранее продавались поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
				ОписаниеПроблемы = НСтр("ru = 'Духи (туалетная вода) ранее продавались на разлив.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				ОписаниеПроблемы = НСтр("ru = 'Пиво ранее продавалось на разлив.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
				ОписаниеПроблемы = НСтр("ru = 'Никотиносодержаня продукция ранее продавалась поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
				ОписаниеПроблемы = НСтр("ru = 'Единицы продукции ранее продавались поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия Тогда
				ОписаниеПроблемы = НСтр("ru = 'Медицинские изделия ранее продавались поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации Тогда
				ОписаниеПроблемы = НСтр("ru = 'Технические средства реабилитации ранее продавались поштучно.'");
			Иначе
				ОписаниеПроблемы = НСтр("ru = 'Код маркировки ранее участвовал в частичном выбытии.'");
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ОписаниеПроблемы;

			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");

				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.ЧастичноеВыбытиеНастроитьКарточкуНоменклатуры = Истина;
				ВидДополнения.ЧастичноеВыбытиеНоменклатура                  = СтрокаДанных.Номенклатура;
				ВидДополнения.ВидОперацииИСМП                               = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);

			КонецЕсли;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.ПолноеВыбытиеНевозможноРанееВыбывалЧастично.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КодМаркировкиВыбывалЧастичноОперацияНевозможна")
		И ПравилаПроверкиНаОшибки.КодМаркировкиВыбывалЧастичноОперацияНевозможна.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КодМаркировкиВыбывалЧастичноОперацияНевозможна Цикл

			Если ОбработкаСтрокиТаблицы Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если СтрокаДанных.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДанных.ЕстьОшибки  = Истина;
			КонецЕсли;

			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Сигары (сигариллы, ...) ранее продавались поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Духи (туалетная вода) ранее продавались на разлив.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Пиво ранее продавалось на разлив.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Никотиносодержащая продукция ранее продавалась поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Биологически активная добавка ранее продавалась поштучно.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия Тогда
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Медицинские изделия ранее продавались поштучно.'");
			Иначе
				ОписаниеПроблемы = НСтр("ru = 'Операция не поддерживается. Код маркировки ранее участвовал в частичном выбытии.'");
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ОписаниеПроблемы;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КодМаркировкиВыбывалЧастичноОперацияНевозможна.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("ОшибкаНастройкиПараметровЧастичногоВыбытия")
		И ПравилаПроверкиНаОшибки.ОшибкаНастройкиПараметровЧастичногоВыбытия.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.ОшибкаНастройкиПараметровЧастичногоВыбытия Цикл

			Если ОбработкаСтрокиТаблицы Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если СтрокаДанных.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДанных.ЕстьОшибки  = Истина;
			КонецЕсли;

			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				ОписаниеПроблемы = НСтр("ru = 'Не указана номенклатура для поштучной продажи сигар (сигарилл, ...).'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
				ОписаниеПроблемы = НСтр("ru = 'Не указана номенклатура для продажи духов (туалетной вода) на разлив.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				ОписаниеПроблемы = НСтр("ru = 'Не указана номенклатура для продажи пива на разлив.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
				ОписаниеПроблемы = НСтр("ru = 'Не указана номенклатура для поштучной продажи единиц из пачки.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
				ОписаниеПроблемы = НСтр("ru = 'Не указана номенклатура для поштучной продажи биологически активных добавок.'");
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия Тогда
				ОписаниеПроблемы = НСтр("ru = 'Не указана номенклатура для поштучной продажи медицинских изделий.'");
			Иначе
				ОписаниеПроблемы = НСтр("ru = 'Не полностью настроены параметры частичного выбытия.'");
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ОписаниеПроблемы;

			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");

				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.ЧастичноеВыбытиеНастроитьКарточкуНоменклатуры = Истина;
				ВидДополнения.ЧастичноеВыбытиеНоменклатура                  = СтрокаДанных.Номенклатура;
				ВидДополнения.ВидОперацииИСМП                               = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);

			КонецЕсли;

		КонецЦикла;

		ПравилаПроверкиНаОшибки.ОшибкаНастройкиПараметровЧастичногоВыбытия.Очистить();

	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольУжеДобавленоВДокумент")
		И ПравилаПроверкиНаОшибки.КонтрольУжеДобавленоВДокумент.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольУжеДобавленоВДокумент Цикл

			Если ОбработкаСтрокиТаблицы Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если СтрокаДанных.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДанных.ЕстьОшибки  = Истина;
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиУжеДобавленаВДокумент();

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольУжеДобавленоВДокумент.Очистить();

	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьНастройкуЧастичногоВыбытия")
		И ПравилаПроверкиНаОшибки.КонтролироватьНастройкуЧастичногоВыбытия.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтролироватьНастройкуЧастичногоВыбытия Цикл
		
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроена поштучная продажа сигар (сигарилл, ...) из пачки.'"));
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроена поштучная продажа единиц из пачки.'"));
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроена продажа духов (туалетной воды) на разлив.'"));
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроена продажа на разлив.'"));
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроена поштучная продажа единиц из пачки.'"));
			ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроена поштучная продажа медицинских изделий из упаковки.'"));
			Иначе
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не настроено частичное выбытие.'"));
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			
			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				
				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.ЧастичноеВыбытиеНастроитьКарточкуНоменклатуры = Истина;
				ВидДополнения.ЧастичноеВыбытиеНоменклатура                  = СтрокаДанных.Номенклатура;
				ВидДополнения.ВидОперацииИСМП                               = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтролироватьНастройкуЧастичногоВыбытия.Очистить();
	
	КонецЕсли;

КонецПроцедуры

Функция СтрокаСодержитОшибкиЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования, ПравилаПроверкиНаОшибки, КэшМаркируемойПродукции) Экспорт

	ВидПродукцииПоддерживаетЧастичноеВыбытие = ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
		СтрокаДанных.ВидПродукции);

	Если Не ВидПродукцииПоддерживаетЧастичноеВыбытие
		Или Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
		Или ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		Возврат Ложь;
	КонецЕсли;

	ЕстьОшибки = Ложь;

	ВидОперацииПоддерживаетЧастичноеВыбытие = ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
		СтрокаДанных.ВидПродукции,
		ПараметрыСканирования.ВидОперацииИСМП);

	Если ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
		И ВидОперацииПоддерживаетЧастичноеВыбытие Тогда

		Если ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеВыведено)
			И Не ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеВариантУчета) Тогда
			// Полное выбытие по ранее выбывавшему частично

			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.ПолноеВыбытиеНевозможноРанееВыбывалЧастично.Добавить(СтрокаДанных);

		ИначеЕсли СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
			И Не ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеНоменклатура)
			И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			// Не полностью настроен учет частичного выбытия

			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.ОшибкаНастройкиПараметровЧастичногоВыбытия.Добавить(СтрокаДанных);

		КонецЕсли;

	ИначеЕсли Не ВидОперацииПоддерживаетЧастичноеВыбытие
		И ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеВыведено) Тогда
		// Операция не поддерживает ранее частично выбытые КМ

		ЕстьОшибки = Истина;
		ПравилаПроверкиНаОшибки.КодМаркировкиВыбывалЧастичноОперацияНевозможна.Добавить(СтрокаДанных);

	КонецЕсли;

	Если Не ЕстьОшибки
		И Не ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования,, Истина) Тогда
		
		Если ПараметрыСканирования.КэшМаркируемойПродукции = Неопределено Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
			Возврат ЕстьОшибки;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);

		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

		Если ОбработанныеКодыМаркировки.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			ПравилаПроверкиНаОшибки.КонтрольУжеДобавленоВДокумент.Добавить(СтрокаДанных);
			ЕстьОшибки = Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат ЕстьОшибки;

КонецФункции

Функция ЭтоПродажаВыбывшегоЧастично(СтрокаДанных, ПараметрыСканирования, ДопустимыеСтатусы) Экспорт

	КодМаркировкиВыбывалЧастично   = Ложь;
	ПоддерживаетсяЧастичноеВыбытие = ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
		СтрокаДанных.ВидПродукции,
		ПараметрыСканирования.ВидОперацииИСМП);

	Если ПоддерживаетсяЧастичноеВыбытие
		И ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеВыведено) Тогда

		Если СтрокаДанных.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа
			Или СтрокаДанных.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота
			Или СтрокаДанных.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Продан Тогда

			КодМаркировкиВыбывалЧастично = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат КодМаркировкиВыбывалЧастично;

КонецФункции

#КонецОбласти

// Возвращает соответствие статусов их представлениям.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - статусы и их представления:
//		* Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП, ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - значение перечисления
//		* Значение - Строка - представление значения перечисления
Функция ПредставленияСтатусов() Экспорт

	ПредставленияСтатусов = Новый Соответствие();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировки.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировки.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиИСМП КАК СтатусыКодовМаркировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыКодовМаркировки.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировки.Ссылка)
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиМОТП КАК СтатусыКодовМаркировки");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;

	Возврат ПредставленияСтатусов;

КонецФункции

#Область РазрешительныйРежим

Процедура ЗаполнитьДанныеИдентификатораРозничнойПродажиПоОбязательнымТоварнымГруппам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		И (Не ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования)
		Или Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКМ              = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками
			Или ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаДанных.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаДанных.ЭтоКодВводаОстатков
			И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДанных.КоличествоПотребительскихУпаковок = 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисутствуетПродукцияИСМП = ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки, Истина);
		
		Если Не ПрисутствуетПродукцияИСМП Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверкаПиваВРозницуСЧастичнымВыбытием = ЭтоПроверкаПиваВРозницуСЧастичнымВыбытием(ПараметрыСканирования, СтрокаДанных);
		
		ПолучатьДанныеГИСМТ = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
			СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ)
			Или ПроверкаПиваВРозницуСЧастичнымВыбытием;
		
		Если Не ПолучатьДанныеГИСМТ Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ПолныйКодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКМ.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Если ДанныеКМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ИнтерфейсИСМПОбщегоНазначения.СокращеннаяИнформацияПоКМПриРозничнойПродаже(ДанныеКМ,
		ПараметрыСканирования.Организация,
		ПараметрыСканирования.НомерФискальногоНакопителя,
		Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Или Результат.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки                            = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки                           = Результат.ТекстОшибки;
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессииРозница = Результат.ТребуетсяОбновлениеКлючаСессии;
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.АварийныйРежим Тогда
		
		Для Каждого СтрокаДанныхПоШтрихкодам Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			СтрокаДанныхПоШтрихкодам.РазрешительныйРежимКодОтвета       = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.АварийныйРежимКодОтветаСервисаГИСМТ();
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам.ТребуетсяОбновлениеCDNПлощадок = Результат.ТребуетсяОбновлениеCDNПлощадок;
	ДанныеПоШтрихкодам.ОтсутствуютCDNПлощадки         = Результат.ОтсутствуютCDNПлощадки;
	
	Для Каждого СтрокаДанныхПоШтрихкодам Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		МассивСтрокДляУдаления  = Новый Массив;
		ПараметрыКодаМаркировки = Результат.СтатусыКодовМаркировкиГИСМТ.Получить(СтрокаДанныхПоШтрихкодам);
		
		Если Результат.ОтсутствуютCDNПлощадки Тогда
			
			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			
				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.ЗагрузитьCDNПлощадки = Истина;
				ВидДополнения.ВидОперацииИСМП      = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанныхПоШтрихкодам, ВидДополнения);
				
			КонецЕсли;
			
			СтрокаДанныхПоШтрихкодам.ТекстОшибки = НСтр("ru = 'CDN-площадки отсутствуют.'");
			
		КонецЕсли;
		
		НаличиеСерыхКодов = Ложь;
		
		Если ПараметрыКодаМаркировки <> Неопределено Тогда
			
			Если ПроверкаПиваВРозницуСЧастичнымВыбытием Тогда
				
				СвойстваДляЗаполнения = Новый Структура();
				СвойстваДляЗаполнения.Вставить("ЧастичноеВыбытиеВыведено");
				СвойстваДляЗаполнения.Вставить("ЧастичноеВыбытиеОстаток");
				СвойстваДляЗаполнения.Вставить("ЧастичноеВыбытиеНеКорректно");
				СвойстваДляЗаполнения.Вставить("ЕмкостьПотребительскойУпаковки");
				
				ЗаполнитьЗначенияСвойств(СвойстваДляЗаполнения, ПараметрыКодаМаркировки);
				
			Иначе
				
				СвойстваДляЗаполнения = ПараметрыКодаМаркировки;
				
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из СвойстваДляЗаполнения Цикл
				
				Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДанныхПоШтрихкодам[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				
			КонецЦикла;
			
			НаличиеСерыхКодов = ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции)
				И ПараметрыКодаМаркировки.Свойство("ВСеройЗоне")
				И ПараметрыКодаМаркировки.ВСеройЗоне;
			
			Если НаличиеСерыхКодов Тогда
				
				СтрокаДанныхПоШтрихкодам.КоличествоПотребительскихУпаковок = СтрокаДанныхПоШтрихкодам.ПлановоеКоличествоПотребительскихУпаковок;
				СтрокаДанныхПоШтрихкодам.Количество                        = СтрокаДанныхПоШтрихкодам.ПлановоеКоличествоПотребительскихУпаковок;
				СтрокаДанныхПоШтрихкодам.СодержитСерыеКоды                 = НаличиеСерыхКодов;
				
			КонецЕсли;
			
		ИначеЕсли Результат.КодыМаркировкиБезДанныхГИСМТ.Получить(СтрокаДанныхПоШтрихкодам) <> Неопределено Тогда
			
			// продажа разрешена без ответа разрешительного режима
			СтрокаДанныхПоШтрихкодам.РазрешительныйРежимДатаЗапросаГИСМТ = Формат(ОбщегоНазначенияИС.ДатаВСтрокуUNIX(ТекущаяДатаСеанса()), "ЧРГ=; ЧГ=0;");
			
		КонецЕсли;
		
		// Коды упаковки были дозагружены из ГИС МТ
		СтрокаДанныхПоШтрихкодам.Идентифицирован = Истина;

		Если СтрокаДанныхПоШтрихкодам.СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДанныхПоШтрихкодам.СтрокаДерева, СтрокаДанныхПоШтрихкодам);
		
		Если Не СтрокаДанныхПоШтрихкодам.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПодчиненнойУпаковки Из СтрокаДанныхПоШтрихкодам.СтрокаДерева.Строки Цикл
			
			СтруктураЗаполнения = Новый Структура();
			СтруктураЗаполнения.Вставить("GTIN",                             Неопределено);
			СтруктураЗаполнения.Вставить("Статус",                           Неопределено);
			СтруктураЗаполнения.Вставить("ИННВладельца",                     Неопределено);
			СтруктураЗаполнения.Вставить("ИННПроизводителя",                 Неопределено);
			СтруктураЗаполнения.Вставить("МРЦ",                              Неопределено);
			
			СтруктураЗаполнения.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", Неопределено);
			СтруктураЗаполнения.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ",          Неопределено);
			СтруктураЗаполнения.Вставить("РазрешительныйРежимАдресСервера",              Неопределено);
			СтруктураЗаполнения.Вставить("РазрешительныйРежимТелоЗапросаJSON",           Неопределено);
			СтруктураЗаполнения.Вставить("РазрешительныйРежимТелоОтветаJSON",            Неопределено);
			СтруктураЗаполнения.Вставить("РазрешительныйРежимКодОтвета",                 Неопределено);
			
			Если ПараметрыКодаМаркировки <> Неопределено Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ПараметрыКодаМаркировки);
				
				Для Каждого КлючИЗначение Из СтруктураЗаполнения Цикл
				
					Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПроверки = Новый Структура(КлючИЗначение.Ключ, Null);
					ЗаполнитьЗначенияСвойств(СтруктураПроверки, СтрокаПодчиненнойУпаковки);
					
					Если СтруктураПроверки[КлючИЗначение.Ключ] = Null Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаПодчиненнойУпаковки[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Штрихкод", СтрокаПодчиненнойУпаковки.Штрихкод);
			ДанныеВложеннойУпаковки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтруктураВложеннойУпаковки Из ДанныеВложеннойУпаковки Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураВложеннойУпаковки, СтрокаПодчиненнойУпаковки);
			
				Если НаличиеСерыхКодов И СтрокаДанныхПоШтрихкодам.СодержитСерыеКоды Тогда
					
					МассивСтрокДляУдаления.Добавить(СтруктураВложеннойУпаковки);
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
		Если НаличиеСерыхКодов И СтрокаДанныхПоШтрихкодам.СодержитСерыеКоды Тогда
			
			СтрокаДанныхПоШтрихкодам.СтрокаДерева.Строки.Очистить();
			
			Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Логирование запросов разрешительного режима с учетом проверки наличия нужной версии БПО
// Если есть нужная версия БПО, то логируется в РС ОперацииПроверкиКМ, иначе - в Журнал регистрации
// 
// Параметры:
//  ДанныеДляЛогирования - Массив из см. ПараметрыЗаписиОперацииПроверкиКМ
//
Процедура ЛогироватьРезультатыОперацийПроверкиКМ(ДанныеДляЛогирования) Экспорт
	
	Если ОбщегоНазначенияИСМП.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом() Тогда
	
		Для Каждого ДанныеПоКМ Из ДанныеДляЛогирования Цикл
			
			//@skip-check wrong-string-literal-content
			МодульМенеджерОборудованияМаркировка = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияМаркировка");
			//@skip-check unknown-method-property
			МодульМенеджерОборудованияМаркировка.ДобавитьЗаписьВЖурналОперацийПроверкиКМ(ДанныеПоКМ);
			
		КонецЦикла;
		
	Иначе
		
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Разрешительный режим.Операция проверки КМ'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонИнформацииПоКМ = 
			НСтр("ru = 'Код ответа: %1
				|Адрес сервера: %2
				|Текст запроса: %3
				|Текст ответа: %4
				|Идентификатор запроса: %5
				|Время запроса: %6'");
		
		Для Каждого ДанныеПоКМ Из ДанныеДляЛогирования Цикл
			
			ТекстИнформацииПоКМ = СтрШаблон(ШаблонИнформацииПоКМ, ДанныеПоКМ.КодОтветаРазрешения, ДанныеПоКМ.АдресСервераЗапросаРазрешения, ДанныеПоКМ.ТекстЗапросаРазрешения, ДанныеПоКМ.РезультатЗапросаРазрешения,
				ДанныеПоКМ.ИдентификаторЗапросаРазрешения, ДанныеПоКМ.ВремяЗапросаРазрешения);
			
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация,, ДанныеПоКМ.НормализованныйШтрихкод, ТекстИнформацииПоКМ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру для формирования записи в журнале логирования операций проверки кода маркировки
//
// Возвращаемое значение:
//   Структура:
//     * Наименование - Строка - наименование товара
//     * КонтрольнаяМарка - Строка - контрольная марка в виде Base64
//     * ЗапросРазрешенияПродажиКМ - Булево - Номенклатура подлежит обязательному контролю
//     * АдресСервераЗапросаРазрешения - Строка - адрес сервера где выполняется запрос разрешения
//     * ТекстЗапросаРазрешения - Строка - текст запроса для получения разрешения
//     * КодОтветаРазрешения - Строка - код ответа который получен от удаленного сервера, если код не задан, а значение флага 
//                           ЗапросРазрешенияПродажиКМ установлено в Истина, тогда код будет содержать текст Таймаут
//     * РезультатЗапросаРазрешения - Строка - JSON - строка, ответ от удаленного сервера ГИС МТ
//     * ИдентификаторЗапросаРазрешения - Строка - идентификатор запроса полученного разрешения
//     * ВремяЗапросаРазрешения - Строка, Дата, Неопределено - таймштамп полученный с удаленого сервера
//     * НормализованныйШтрихкод - Строка - нормализованный ШК
//
Функция ПараметрыЗаписиОперацииПроверкиКМ() Экспорт
	
	Если ОбщегоНазначенияИСМП.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом() Тогда
		
		//@skip-check wrong-string-literal-content
		МодульМенеджерОборудованияМаркировка = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияМаркировка");
		//@skip-check unknown-method-property
		Результат = МодульМенеджерОборудованияМаркировка.ПараметрыЗаписиОперацииПроверкиКМ();
		
		Результат.Вставить("НормализованныйШтрихкод",        "");
		
	Иначе
		
		Результат = Новый Структура();
		Результат.Вставить("Наименование",                   "");
		Результат.Вставить("КонтрольнаяМарка",               "");
		Результат.Вставить("ЗапросРазрешенияПродажиКМ",      Истина);
		Результат.Вставить("АдресСервераЗапросаРазрешения",  "");
		Результат.Вставить("ТекстЗапросаРазрешения",         "");
		Результат.Вставить("КодОтветаРазрешения",            "");
		Результат.Вставить("РезультатЗапросаРазрешения",     "");
		Результат.Вставить("ИдентификаторЗапросаРазрешения", "");
		Результат.Вставить("ВремяЗапросаРазрешения",         Неопределено);
		Результат.Вставить("НормализованныйШтрихкод",        "");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоДелатьЗапрос = Ложь;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не НеобходимоДелатьЗапрос И 
			ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			
			Если ПараметрыСканирования.РасширеннаяВерсияГосИС
				И Не ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
				И СтрокаДанных.СтрокаДерева = Неопределено Тогда
				
				НеобходимоДелатьЗапрос = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КонтролироватьВладельцев = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
			СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП);
		
		КонтролироватьСтатусы    = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
			СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
		
		Если Не КонтролироватьВладельцев И Не КонтролироватьСтатусы Тогда
			НеобходимоДелатьЗапрос = Ложь;
		Иначе
			НеобходимоДелатьЗапрос = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции = Не НеобходимоДелатьЗапрос;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Модуль.ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки);
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
		Модуль.ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру, описывающую результат обработки кода маркировки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой 
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - см. ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено, КэшОбщихМодулей = Неопределено) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ТекстОшибки) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ЭтоКодВводаОстатков
		И ШтрихкодированиеОбщегоНазначенияИС.ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(ДанныеШтрихкода, ПараметрыСканирования) Тогда
		
		Возврат ШтрихкодированиеОбщегоНазначенияИС.РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
		И ПараметрыСканирования.ВидОперацииИСМП <> Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ
		И ПараметрыСканирования.ВидОперацииИСМП <> Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда

		ТребуетсяИндивидуализацияRFID = ПараметрыСканирования.ИндивидуализироватьКИЗ
			И (ДанныеШтрихкода.ДанныеRFID = Неопределено
				Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ТребуетсяИндивидуализацияRFID(ДанныеШтрихкода.ДанныеRFID, ДанныеШтрихкода.GTIN).НужноЗаписатьМетку);

		Если (Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			Или Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод)
			Или ТребуетсяИндивидуализацияRFID) Тогда

			// Причины уточнения:
			// - Не заполнена номенклатура
			// - Требуется индивидуализация КИЗ (определяется параметром сканирования и заполненностью
			//   данных регистра ДанныхRFID.
			// - Не заполнен номер КИЗ (Штрихкод)
			РезультатОбработки.ТребуетсяУточнениеДанных = Истина;

		КонецЕсли;

	КонецЕсли;

	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС()
		И ДанныеШтрихкода.ТребуетсяВыборВСД Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ИдентификаторПроисхожденияВЕТИС) Тогда
			ДанныеШтрихкода.ТребуетсяВыборВСД = Ложь;
		Иначе
			РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРезультатОбработкиШтрихкодаЧастичноеВыбытие(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
	
	ЗаполнитьРезультатОбработкиШтрихкодаПроверкаСредствамиККТ(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
	
	Если Не ПараметрыСканирования.РежимБРМК Тогда
		
		МодульИнтеграцияИСМПКлиентСервер = ОбщегоНазначенияИС.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер", КэшОбщихМодулей);
		ПропуститьПроверкуСрокаГодности =
			МодульИнтеграцияИСМПКлиентСервер.ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения(ДанныеШтрихкода.ВидПродукции)
			И (ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции <> Неопределено
			 И ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.СохраненВыборПустогоСрокаГодности
			 Или ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП);
		
		Если Не ПропуститьПроверкуСрокаГодности
			И ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
			И ПараметрыСканирования.ЗаполнятьСрокГодности
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.ГоденДо)
			И (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
					И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка)) Тогда
			
			РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не РезультатОбработки.ТребуетсяУточнениеДанных
		И Не (РезультатОбработки.ТребуетсяПроверкаСредствамиККТ
			И Не РезультатОбработки.ПроверкаСредствамиККТЗавершена)
		И Форма <> Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначенияИС.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный", КэшОбщихМодулей);
		МодульШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#Область ПроверкаСредствамиККТ

Процедура ЗаполнитьРезультатОбработкиШтрихкодаПроверкаСредствамиККТ(ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования) Экспорт
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	ЭтоШтрихкодНоменклатуры = Ложь;
	
	Если ДанныеШтрихкода <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ЭтоШтрихкодНоменклатуры") Тогда
		ЭтоШтрихкодНоменклатуры = ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено
		И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина)
		И Не ЭтоШтрихкодНоменклатуры
		И ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
		И (НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПриСканировании Или ПараметрыСканирования.РежимБРМК)
		И Не ДанныеШтрихкода.ТребуетсяУточнениеЧастичногоВыбытия
		И ДанныеШтрихкода.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыСканирования.ККТФФД12ИСМП)
			И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда

			ШтрихкодированиеИСМПКлиентСерверПереопределяемый.УстановитьККТФФД12ПоДаннымОписанияТовара(
				ДанныеШтрихкода, ПараметрыСканирования);

		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыСканирования.ККТФФД12ИСМП) Тогда
			
			Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
				МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				МодульШтрихкодированиеИСМП.ЗаполнитьВложенныеШтрихкодыДляПроверкиККТ(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
				Если Не (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И РезультатОбработки.ВложенныеШтрихкодыДляПроверкиККТ.Количество() = 0) Тогда
					РезультатОбработки.ТребуетсяПроверкаСредствамиККТ = Истина;
				КонецЕсли;
			Иначе
				РезультатОбработки.ТребуетсяПроверкаСредствамиККТ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьРезультатОбработкиШтрихкодаЧастичноеВыбытие(ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.РежимБРМК
		И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ДанныеШтрихкода.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП)
		И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		И ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
		И (ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура
			Или (ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
				И ЗначениеЗаполнено(ДанныеШтрихкода.ЧастичноеВыбытиеНоменклатура))) Тогда
		
		Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И ДанныеШтрихкода.ЧастичноеВыбытиеОстаток = Неопределено Тогда
			
			РезультатОбработки.ТребуетсяВскрытиеПотребительскойУпаковки = Истина;
			РезультатОбработки.ТребуетсяУточнениеДанных                 = Истина;
			
		Иначе
			
			ДанныеШтрихкода.ТребуетсяУточнениеЧастичногоВыбытия = Истина;
			РезультатОбработки.ТребуетсяУточнениеДанных         = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПроверкаПиваВРозницуСЧастичнымВыбытием(ПараметрыСканирования, СтрокаДанных)
	
	ЧастичноеВыбытиеПива = Ложь;
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");
		ЧастичноеВыбытиеПива = Модуль.ЭтоПроверкаПиваВРозницуСЧастичнымВыбытием(ПараметрыСканирования, СтрокаДанных);
		
	КонецЕсли;
	
	Возврат ЧастичноеВыбытиеПива;
	
КонецФункции

Процедура РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		Модуль.РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);

	КонецЕсли;

КонецПроцедуры

Процедура РасширенныеПроверкиПоСтрокеДанныхИСМП(СтрокаДанных, ПараметрыСканирования, ПравилаПроверкиНаОшибки, ЕстьОшибки)

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		Модуль.РасширенныеПроверкиПоСтрокеДанныхИСМП(СтрокаДанных, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеИдентификатораВЕТИССтроки(СтрокаДанных)

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ТребуетсяВыборВСД")
		И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(СтрокаДанных.ВидПродукции) Тогда
		СтрокаДанных.ТребуетсяВыборВСД = Не ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС)
			И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличестваМерногоТовараСтроки(СтрокаДанных, Контроль)

	Если СтрокаДанных.ТребуетВзвешивания И СтрокаДанных.Количество = 0 Тогда

		Контроль.Добавить(СтрокаДанных);

	КонецЕсли;

КонецПроцедуры

// Проверяет обработанные штрихкоды на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПравилаПроверкиНаОшибки - Структура - Описание:
// * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
// * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Доступные статусы
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)

	ВладелецМожетБытьПустым = Ложь;

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
		ВладелецМожетБытьПустым = Модуль.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);

	КонецЕсли;

	КэшМаркируемойПродукции           = Неопределено;
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;

	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл

		Если Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			Если ТребуетсяВыборСерии(СтрокаДанных, ПараметрыСканирования) Тогда
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКоличестваМерногоТовара") Тогда
			ПроверитьЗаполнениеКоличестваМерногоТовараСтроки(СтрокаДанных, ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара);
		КонецЕсли;

		Если СтрокаДанных.ЭтоШтрихкодНоменклатуры
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаДанных.СтрокаДерева = Неопределено И Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольИдентификатораВЕТИС") Тогда
			ПроверитьЗаполнениеИдентификатораВЕТИССтроки(СтрокаДанных);
		КонецЕсли;
		
		РасширенныеПроверкиПоСтрокеДанныхИСМП(СтрокаДанных, ПараметрыСканирования, ПравилаПроверкиНаОшибки, ЕстьОшибки);
		
		Если ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
			КонтролироватьВладельцевКодовМаркировкиИСМП = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировкиИСМП = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;
		
		ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = (ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимДатаЗапросаГИСМТ)
			И Не ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимИдентификаторЗапросаГИСМТ));

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировкиИСМП Тогда

			Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Или ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
			ИначеЕсли Не ИННСоответствуетОперации(СтрокаДанных.ИННВладельца, ДанныеПоШтрихкодам, ПараметрыСканирования)
				И СтрокаДанных.Статус <> Неопределено
				И СтрокаДанных.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда

				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДанных);

			КонецЕсли;

		КонецЕсли;

		Если ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И ЗначениеЗаполнено(СтрокаДанных.Статус) Тогда

			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковок;
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов <> Неопределено Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов;
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов <> Неопределено Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов;
			Иначе
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			КонецЕсли;

			ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыИСМП.Найти(СтрокаДанных.Статус) = Неопределено;
			Если Не ОтсутствуетДопустимыйСтатус
				И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние)
				И СтрокаДанных.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И ДопустимыеСтатусыИСМП.Найти(СтрокаДанных.ОсобоеСостояние) = Неопределено Тогда
				ОтсутствуетДопустимыйСтатус = Истина;
			КонецЕсли;

			Если СтрокаДанных.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен
				И СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				// табачная продукция в статусе Нанесен, владелец не указан, но указан производитель
				Если ИННСоответствуетОперации(СтрокаДанных.ИННПроизводителя, ДанныеПоШтрихкодам, ПараметрыСканирования, Ложь) Тогда
					ОтсутствуетДопустимыйСтатус = Ложь;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимДатаЗапросаГИСМТ) И СтрДлина(СтрокаДанных.СоставКодаМаркировки.СерийныйНомер) = 8
				И ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных.ВидПродукции)
				И СтрНачинаетсяС(СтрокаДанных.СоставКодаМаркировки.СерийныйНомер, "2")
				И СтрДлина(СтрокаДанных.СоставКодаМаркировки.СерийныйНомер) = 8 Тогда
				// молочная продукция из Беларуси, серийный номер из 8 символов и начинается с цифры 2
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;
			
			Если ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;

			Если ОтсутствуетДопустимыйСтатус Тогда

				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДанных);

			КонецЕсли;

		КонецЕсли;

		Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
			И СтрокаСодержитОшибкиЧастичногоВыбытия(
				СтрокаДанных,
				ПараметрыСканирования,
				ПравилаПроверкиНаОшибки,
				КэшМаркируемойПродукции) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьНастройкуЧастичногоВыбытия")
			И Не ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеВариантУчета)
			И ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.КонтролироватьНастройкуЧастичногоВыбытия.Добавить(СтрокаДанных);
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности") Тогда
			
			ДатаКонтроляСрокаГодности = ПараметрыСканирования.ДатаДокумента;
			
			Если ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа Тогда
				ДатаКонтроляСрокаГодности = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(СтрокаДанных.ВидПродукции)
				И ЗначениеЗаполнено(СтрокаДанных.ГоденДо)
				И СтрокаДанных.ГоденДо < ДатаКонтроляСрокаГодности Тогда

				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Добавить(СтрокаДанных);

			КонецЕсли;

		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			ВыполнятьКонтроль = (ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов
				И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
				Или Не ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов;
			
			Если ВыполнятьКонтроль
				И СтрокаДанных.ДанныеРазбора <> Неопределено
				И СтрокаДанных.ДанныеРазбора.Свойство("ЭтоКодМаркировкиВскрытойПотребительскойУпаковки") Тогда
				ВыполнятьКонтроль = Ложь;
			КонецЕсли;
			
			ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
			Если ВыполнятьКонтроль
				И ДанныеРазбора <> Неопределено
				И СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
						ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда

				СоставКодаМаркировки   = ДанныеРазбора.СоставКодаМаркировки;
				КодВключаетКриптоХвост = Ложь;

				Если СоставКодаМаркировки <> Неопределено Тогда
					Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
						КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
					КонецЕсли;
				КонецЕсли;

				Если ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП
					Или КодВключаетКриптоХвост
					Или ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
						СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда

					Если Не КодВключаетКриптоХвост
						И Не СтрокаДанных.ЕстьВПулеКодовМаркировки Тогда

						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДанных, ТекстОшибки",
								СтрокаДанных,
								НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
								|Отсканируйте полный код маркировки.'")));

					ИначеЕсли Не КодВключаетКриптоХвост
						И ПроверятьСтруктуруКодовМаркировки Тогда

						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДанных, ТекстОшибки",
								СтрокаДанных,
								НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
								|Отсканируйте полный код маркировки или в настройках сканирования отключите опцию ""Проверять структуру кодов маркировки"".'")));

					ИначеЕсли ПроверятьСтруктуруКодовМаркировки
						И КодВключаетКриптоХвост
						И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
						И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда

						ЕстьОшибки = Истина;
						ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
							Новый Структура(
								"СтрокаДанных, ТекстОшибки",
								СтрокаДанных, НСтр("ru = 'В структуре кода маркировки отсутствуют разделители GS'")));

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставКодовОСУ") Тогда

			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаДанных.ДополнительныеПараметры <> Неопределено
				И СтрокаДанных.ДополнительныеПараметры.Свойство("ВидУпаковкиПоGTIN")
				И СтрокаДанных.ДополнительныеПараметры.ВидУпаковкиПоGTIN <> Перечисления.ВидыУпаковокИС.Потребительская
				И СтрокаДанных.ДополнительныеПараметры.ВидУпаковкиПоGTIN <> Перечисления.ВидыУпаковокИС.Набор Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтролироватьСоставКодовОСУ.Добавить(
					Новый Структура(
						"СтрокаДанных, ТекстОшибки",
						СтрокаДанных,
							СтрШаблон(
								НСтр("ru = 'Код ОСУ не может содержать GTIN c видом упаковки: %1'"),
								СтрокаДанных.ДополнительныеПараметры.ВидУпаковкиПоGTIN)));

			КонецЕсли;

		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольЭтоВесоваяПродукция")
			И Не СтрокаДанных.ТребуетВзвешивания Тогда

			ПравилаПроверкиНаОшибки.КонтрольЭтоВесоваяПродукция.Добавить(СтрокаДанных);
			ЕстьОшибки = Истина;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - Массив - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам)

	ПравилаПроверкиНаОшибки = Новый Структура;
	ПравилаПроверкиНаОшибки.Вставить("ПроверенныеШтрихкоды", Новый Соответствие);

	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;

	Если Не ПараметрыСканирования.Свойство("ДопустимыеСтатусыИСМП") Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	НеобходимыПроверкиРозничнойПродажи = Ложь;
	
	Для Каждого ДопустимыйВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		
		Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(ДопустимыйВидПродукции,
			ПараметрыСканирования.ВидОперацииИСМП,
			ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
			
			НеобходимыПроверкиРозничнойПродажи = Истина;
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыИСМП.Количество() > 0
		И (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
			ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи)
		И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусы",         ПараметрыСканирования.ДопустимыеСтатусыИСМП);
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыУпаковок", ПараметрыСканирования.ДопустимыеСтатусыУпаковокИСМП);
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыНаборов",  ПараметрыСканирования.ДопустимыеСтатусыНаборовИСМП);
		ПравилоКонтроляСтатусов.Вставить("ПредставлениеСтатусов",     ПредставленияСтатусов());
		ПравилоКонтроляСтатусов.Вставить("СтрокиСОшибками",           Новый Массив);

		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);

	КонецЕсли;

	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.КонтрольПустыхУпаковок
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхУпаковок", Новый Массив);
	КонецЕсли;

	ДопустимыеСпособыВвода = Новый Массив;

	Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
		ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
		ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
	КонецЕсли;

	Если ДопустимыеСпособыВвода.Количество() > 0 Тогда
		Если (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
				ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи)
			И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот", Новый Массив);
		Иначе
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборотОффлайн", Новый Массив);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП", Новый Массив);
	КонецЕсли;

	Если (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
			ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи)
		И ЗначениеЗаполнено(ПараметрыСканирования.Владелец)
		И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ЭтоМаркировкаОстатков <> Неопределено
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольКодовВводаОстатков", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.КонтрольПустыхУпаковок
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхУпаковок", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ЗаполнятьСрокГодности
		И (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
			ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи) Тогда
		ПравилоКонтроляСрокаГодности = Новый Структура;
		ПравилоКонтроляСрокаГодности.Вставить("ЕстьОшибка",      Ложь);
		ПравилоКонтроляСрокаГодности.Вставить("СтрокиСОшибками", Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСрокаГодности", ПравилоКонтроляСрокаГодности);
	КонецЕсли;

	Если ПараметрыСканирования.Свойство("КонтролироватьОкончаниеСрокаГодности")
		И ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольОкончанияСрокаГодности", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП
		Или ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП
		Или НеобходимыПроверкиРозничнойПродажи Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПолногоКодаМаркировки", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольИдентификатораВЕТИС");
	КонецЕсли;

	Если ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольКоличестваМерногоТовара", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ТолькоВесоваяПродукция Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольЭтоВесоваяПродукция", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.КонтролироватьСоставАгрегатов Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставЛогистическихУпаковок",             Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставГрупповыхУпаковок",                 Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ПоддерживаетсяОбъемноСортовойУчет Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставКодовОСУ", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьНастройкуЧастичногоВыбытия", Новый Массив);
	КонецЕсли;

	Если ПараметрыСканирования.ЭтоМаркировкаТоваровИСМП
		И ПараметрыСканирования.Свойство("ИспользуетсяСоответствиеШтрихкодовСтрокДерева")
		И Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева Тогда
		ПараметрыСканирования.КонтрольПустыхУпаковок = Истина;
	КонецЕсли;
	
	ПравилаПроверкиНаОшибки.Вставить("ПолноеВыбытиеНевозможноРанееВыбывалЧастично",    Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КодМаркировкиВыбывалЧастичноОперацияНевозможна", Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("ОшибкаНастройкиПараметровЧастичногоВыбытия",     Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КонтрольУжеДобавленоВДокумент",                  Новый Массив);

	Возврат ПравилаПроверкиНаОшибки;

КонецФункции

// Определяет необходимость указания серии для данных штрихкода маркируемой продукции.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется указать серию.
Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		Или ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидУпаковкиПодходит = Ложь;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
		ВидУпаковкиПодходит = Истина;
		
	Иначе
		
		Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			ВидУпаковкиПодходит = Модуль.РасширеннаяПроверкаТребуетсяВыборСерииПоВидуУпаковки(ПараметрыСканирования, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидУпаковкиПодходит Тогда
		Возврат ОбщегоНазначенияИС.ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	Возврат (ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора
		И Не ПараметрыСканирования.РежимБРМК
		И ПараметрыСканирования.ВидОперацииИСМП <> Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки);
КонецФункции

// Заполняет полный код маркировки по данным состава кода маркировки.
// Необходимо для корректного заполнения полного кода при его отсутствии в пуле
//
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнениеПолногоКодаМаркировкиПоДаннымСоставаКодаМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ЕстьВПулеКодовМаркировки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ПолныйКодМаркировки)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодBase64)
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаДанных.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
			
			СтрокаДанных.ПолныйКодМаркировки = СтрокаДанных.ШтрихкодBase64;
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.ПолныйКодМаркировки = СтрокаДанных.ПолныйКодМаркировки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОперацияПоддерживаетВладельцевКодовМаркировкиИнтеркампани(ПараметрыСканирования) Экспорт
	Возврат (Не ПараметрыСканирования.РежимБРМК
		И ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС()
		И (ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
			Или ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа));
КонецФункции

Функция ИННСоответствуетОперации(ПроверяемыйИНН, ДанныеПоШтрихкодам, ПараметрыСканирования, ТребуетсяИнтеркампани = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.Владелец) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.СведенияОбОрганизациях = Неопределено Тогда
		ДанныеПоШтрихкодам.СведенияОбОрганизациях = Новый Соответствие;
	Иначе
		СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[ПараметрыСканирования.Владелец];
	КонецЕсли;
	
	Если СведенияОбОрганизации = Неопределено Тогда
		СведенияОбОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(ПараметрыСканирования.Владелец);
		ДанныеПоШтрихкодам.СведенияОбОрганизациях.Вставить(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
	КонецЕсли;
	
	ОжидаемыйИНН = СведенияОбОрганизации.ИНН;
	
	Если СокрЛП(ПроверяемыйИНН) = СокрЛП(ОжидаемыйИНН) Тогда
		
		Возврат Истина;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПроверяемыйИНН) Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТребуетсяИнтеркампани
		И ОперацияПоддерживаетВладельцевКодовМаркировкиИнтеркампани(ПараметрыСканирования)
		И ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда // Требуется проверка владельца интеркампани
		
		ОрганизацииИнтеркампани = ДанныеПоШтрихкодам.СведенияОбОрганизациях["ОрганизацииИнтеркампани"];
		
		Если ОрганизацииИнтеркампани = Неопределено Тогда
			ОрганизацииИнтеркампани = Новый Соответствие();
			ДанныеПоШтрихкодам.СведенияОбОрганизациях["ОрганизацииИнтеркампани"] = ОрганизацииИнтеркампани;
			МодульИнтеграцияИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИС");
			РеквизитыОрганизаций = МодульИнтеграцияИС.ОрганизацииИнтеркампани();
			Для Каждого СтрокаТаблицы Из РеквизитыОрганизаций Цикл
				ОрганизацииИнтеркампани.Вставить(СтрокаТаблицы.ИНН, СтрокаТаблицы.Представление);
			КонецЦикла;
		КонецЕсли;
		
		Возврат (ОрганизацииИнтеркампани[ПроверяемыйИНН] <> Неопределено);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти