
#Область ПрограммныйИнтерфейс

// Возвращает таблицу видов приложений конфигурации.
// 
// Параметры:
//  ВключаяБазовый - Булево - Истина, если нужно включать базовый вид приложения в таблицу. 
//                            По умолчанию = Истина.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаВидовПриложений
//
Функция ВидыПриложенийКонфигурации(ВключаяБазовый = Истина) Экспорт
	
	ВидыПриложений = НоваяТаблицаВидовПриложений();
	
	Если ВключаяБазовый Тогда
		БазовыйВидПриложения = БазовыйВидПриложения();
		НовыйВидПриложения = ВидыПриложений.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовыйВидПриложения, БазовыйВидПриложения);
		НовыйВидПриложения.ДополнительныеСвойства = Новый Структура(БазовыйВидПриложения.ДополнительныеСвойства);
	КонецЕсли;
	
	ВидыПриложенийПереопределяемый.ПриОпределенииВидовПриложенийКонфигурации(ВидыПриложений);
	
	Возврат ВидыПриложений;
	
КонецФункции

// Возвращает таблицу обработчиков переходов видов приложений конфигурации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаОбработчиковПерехода
//
Функция ОбработчикиПереходов() Экспорт
	
	ОбработчикиПерехода = НоваяТаблицаОбработчиковПерехода();
	ВидыПриложенийПереопределяемый.ПриДобавленииОбработчиковПереходаВидовПриложений(ОбработчикиПерехода);
	
	Возврат ОбработчикиПерехода;
	
КонецФункции

// Возвращает таблицу обработчиков перехода с вида приложения
// 
// Параметры:
//  ИсходноеИмяВидаПриложения - Строка - имя предыдущего вида приложения
//  ИмяВидаПриложения - Строка, Неопределено - имя нового вида приложения. Неопределено - если новый вид приложения любой. 
//                                             По умолчанию, Неопределено
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаОбработчиковПерехода
//
Функция ОбработчикиПереходаВидаПриложения(ИсходноеИмяВидаПриложения, ИмяВидаПриложения = Неопределено) Экспорт
	
	Результат = НоваяТаблицаОбработчиковПерехода();
	
	Отбор = Новый Структура("ИсходноеИмяВидаПриложения", ИсходноеИмяВидаПриложения);
	Если ИмяВидаПриложения <> Неопределено Тогда
		Отбор.Вставить("ИмяВидаПриложения", ИмяВидаПриложения);
	КонецЕсли;
	
	НайденныеСтроки = ОбработчикиПереходов().НайтиСтроки(Отбор); 
	Для Каждого СтрокаПерехода Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаПерехода);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя вида приложения конфигурации, автономного рабочего места (АРМ) или области данных, если включено разделение
// 
// Возвращаемое значение:
//  Строка - имя текущего вида приложения
// 
// Примечание:
//  Имя вида приложения для АРМ может отличаться от итогового, если обращение к функции было до завершения загрузки данных в АРМ
//
Функция ИмяТекущегоВидаПриложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВидПриложенияОбластиДанных = РегистрыСведений.ВидыПриложенийОбластейДанных.СоздатьМенеджерЗаписи();
		ВидПриложенияОбластиДанных.Прочитать();
		
		Возврат ВидПриложенияОбластиДанных.ИмяВидаПриложения;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВАвтономномРежиме") Тогда
		Константы.ИмяВидаПриложенияАвтономногоРабочегоМеста.Получить();
	КонецЕсли;
	
	Возврат БазовыйВидПриложения().Имя;
	
КонецФункции

// Возвращает представление вида приложения конфигурации, автономного рабочего места (АРМ) или области данных, если включено разделение
//
// Возвращаемое значение:
//  Строка - представление вида приложения
//
// Примечание:
//  Представление вида приложения для АРМ может отличаться от итогового, если обращение к функции было до завершения загрузки данных в АРМ
//
Функция ПредставлениеТекущегоВидаПриложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено() 
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВидПриложенияОбластиДанных = РегистрыСведений.ВидыПриложенийОбластейДанных.СоздатьМенеджерЗаписи();
		ВидПриложенияОбластиДанных.Прочитать();
		
		Возврат ВидПриложенияОбластиДанных.ПредставлениеВидаПриложения;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВАвтономномРежиме") Тогда
		Константы.ПредставлениеВидаПриложенияАвтономногоРабочегоМеста.Получить();
	КонецЕсли;
	
	Возврат БазовыйВидПриложения().Представление;
	
КонецФункции

// Возвращает свойства вида приложения по имени.
// 
// Параметры:
//  Имя - Строка - имя вида приложения, свойства которого нужно получить.
//  ВызыватьИсключение - Булево - если Ложь, то в случае отсутствия свойств вида приложения по имени
//                                исключение не будет вызвано. По умолчанию = Истина.
// 
// Возвращаемое значение:
//  Неопределено, ФиксированнаяСтруктура - Свойства вида приложения.
//                                         Если свойства не найдены и ВызыватьИсключение = Ложь, возвращается Неопределено.
//                                         Состав свойств см. в ВидыПриложенийСервер.НовыйВидПриложения.
//
Функция СвойстваВидаПриложенияПоИмени(Имя, ВызыватьИсключение = Истина) Экспорт
	
	ВидыПриложений = ВидыПриложенийКонфигурации();
	НайденныеСтроки = ВидыПриложений.НайтиСтроки(Новый Структура("Имя", Имя));
	
	ТекстСообщения = "";
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не найден вид приложения по имени ""%1""'"), Имя);
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Найдено несколько видов приложений по имени ""%1""'"), Имя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Виды приложений. Поиск вида приложения'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденныеСтроки[0]));
	
КонецФункции

// Возвращает свойства вида приложения по услугам.
// Поиск происходит по полному соответствию услуг в переданном параметре и описании вида приложения
// 
// Параметры:
//  Услуги - ТаблицаЗначений - описание см.НоваяТаблицаУслуг
//  ВызыватьИсключение - Булево - если Ложь, то в случае отсутствия свойств вида приложения по услугам 
//                                исключение не будет вызвано. По умолчанию, Истина.
// 
// Возвращаемое значение:
//  Неопределено, ФиксированнаяСтруктура - Свойства вида приложения.
//                                         Если свойства не найдены и ВызыватьИсключение = Ложь, возвращается Неопределено.
//                                         Состав свойств см. в ВидыПриложенийСервер.НовыйВидПриложения.
//
Функция СвойстваВидаПриложенияПоУслугам(Услуги, ВызыватьИсключение = Истина) Экспорт
	
	НайденныеСтроки = Новый Массив;
	
	ВидыПриложений = ВидыПриложенийКонфигурации();
	Для Каждого ВидПриложения Из ВидыПриложений Цикл
		УслугиВидаПриложения = ВидПриложения.Услуги;
		
		Если УслугиВидаПриложения.Количество() <> Услуги.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеУслугиНайдены = Истина;
		Для Каждого Услуга Из Услуги Цикл
			Если Не УслугаНайденаВВидеПриложения(ВидПриложения, Услуга) Тогда
				ВсеУслугиНайдены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеУслугиНайдены Тогда
			НайденныеСтроки.Добавить(ВидПриложения);
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = "";
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не найден вид приложения по списку услуг: %1'"),
			ПредставлениеСпискаУслуг(Услуги, Символы.ПС + "- "));
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Найдено несколько видов приложений по списку услуг:%1'"),
			ПредставлениеСпискаУслуг(Услуги, Символы.ПС + "- "));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Виды приложений. Поиск вида приложения'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденныеСтроки[0]));
	
КонецФункции

// Возвращает вид приложения, соответствующий конфигурации.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - см. НовыйВидПриложения
//
Функция БазовыйВидПриложения() Экспорт
	
	ВидПриложения = НовыйВидПриложения();
	ВидПриложения.Имя = Метаданные.Имя;
	ВидПриложения.Представление = Метаданные.Представление();
	ВидПриложения.Базовый = Истина;
	ВидПриложения.Процедура = "ВидыПриложенийСлужебный.УстановкаБазовогоВидаПриложения";
	
	ВидыПриложенийПереопределяемый.ПриОпределенииДопСвойствБазовогоВидаПриложения(ВидПриложения.ДополнительныеСвойства);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ВидПриложения);
	
КонецФункции

// Возвращает вид приложения, который будет установлен по умолчанию, 
// если, например, не удалось определить вид приложения по имени или услугам.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - см. НовыйВидПриложения
//
Функция ВидПриложенияПоУмолчанию() Экспорт
	
	ВидПриложения = Неопределено;
	
	ВидыПриложенийПереопределяемый.ПриОпределенииВидаПриложенияПоУмолчанию(ВидПриложения);
	Если ВидПриложения = Неопределено Тогда
		ВидПриложения = БазовыйВидПриложения();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ВидПриложения);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя пользовательского вида приложения области данных
// 
// Возвращаемое значение:
//  Строка - имя текущего пользовательского вида текущего приложения
// 
Функция ИмяТекущегоПользовательскогоВидаПриложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВидПриложенияОбластиДанных = РегистрыСведений.ВидыПриложенийОбластейДанных.СоздатьМенеджерЗаписи();
		ВидПриложенияОбластиДанных.Прочитать();
		
		Возврат ВидПриложенияОбластиДанных.ИмяВидаПриложенияПользовательское;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Определяет массив имен расширений видов приложений, которые будут исключены из выгрузки
//
// Параметры:
//  ИменаРасширений - Массив из Строка
//
Процедура ИменаРасширенийВидовПриложений(ИменаРасширений) Экспорт
	ВидыПриложенийПереопределяемый.ПриОпределенииИменРасширенийВидовПриложений(ИменаРасширений);
КонецПроцедуры

// Возвращает шаблон описания вида приложения.
// 
// Возвращаемое значение:
//  Структура:
// * Имя - Строка - имя вида приложения.
// * Представление - Строка - представление вида приложения.
// * Процедура - Строка - полное имя процедуры-обработчика с параметром РезультатОбработки (см. ВидыПриложенийСервер.НовыйРезультатОбработки).
//                        Обработчик выполняется при заполнении вида приложения области данных.
//                        Обязательно должна быть экспортной.
// * Услуги - Массив из см. ВидыПриложенийСервер.НоваяУслуга - массив услуг, по которому может быть определен вид приложения.
//                                                             Набор услуг для каждого вида приложения должен быть уникальным.
//                                                             Для Базового вида приложения массив услуг пустой.
// * ДополнительныеСвойства - Структура - дополнительные свойства для вида приложения.
//                                        Может быть не заполнено.
// * Базовый - Булево - для внутреннего использования.
//                      Истина, если вид приложения соответствует конфигурации.
//                      Базовый вид приложения может быть всего один. По умолчанию, Ложь.
//
Функция НовыйВидПриложения() Экспорт
	
	НовыйВидПриложения = Новый Структура();
	НовыйВидПриложения.Вставить("Имя", "");
	НовыйВидПриложения.Вставить("Представление", "");
	НовыйВидПриложения.Вставить("Базовый", Ложь);
	НовыйВидПриложения.Вставить("Процедура", "");
	НовыйВидПриложения.Вставить("Услуги", Новый Массив);
	НовыйВидПриложения.Вставить("ДополнительныеСвойства", Новый Структура);
	
	Возврат НовыйВидПриложения;
	
КонецФункции

// Возвращает описание таблицы видов приложений конфигурации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список видов приложений:
//   * Имя - Строка - имя вида приложения.
//   * Представление - Строка - представление вида приложения.
//   * Процедура - Строка - полное имя процедуры-обработчика с параметром РезультатОбработки (см. ВидыПриложенийСервер.НовыйРезультатОбработки).
//                          Обработчик выполняется при заполнении вида приложения области данных.
//                          Обязательно должна быть экспортной.
//   * Услуги - Массив из см. ВидыПриложенийСервер.НоваяУслуга - массив услуг, по которому может быть определен вид приложения.
//                                                               Набор услуг для каждого вида приложения должен быть уникальным.
//                                                               Для Базового вида приложения массив услуг пустой.
//   * ДополнительныеСвойства - Структура - дополнительные свойства для вида приложения.
//                                          Может быть не заполнено.
//   * Базовый - Булево - для внутреннего использования.
//                        Истина, если вид приложения соответствует конфигурации.
//                        Базовый вид приложения может быть всего один. По умолчанию, Ложь.
//
Функция НоваяТаблицаВидовПриложений() Экспорт
	
	ВидыПриложения = Новый ТаблицаЗначений;
	ВидыПриложения.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ВидыПриложения.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ВидыПриложения.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
	ВидыПриложения.Колонки.Добавить("Базовый", Новый ОписаниеТипов("Булево"));
	ВидыПриложения.Колонки.Добавить("Услуги", Новый ОписаниеТипов("Массив"));
	ВидыПриложения.Колонки.Добавить("ДополнительныеСвойства", Новый ОписаниеТипов("Структура"));
	
	Возврат ВидыПриложения;
	
КонецФункции

// Возвращает шаблон описания услуги вида приложения
// 
// Возвращаемое значение:
//  Структура - Новая услуга:
// * ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
// * ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//
Функция НоваяУслуга() Экспорт
	
	НоваяУслуга = Новый Структура();
	НоваяУслуга.Вставить("ИдентификаторУслуги", "");
	НоваяУслуга.Вставить("ИдентификаторПоставщика", "");
	
	Возврат НоваяУслуга;
	
КонецФункции

// Возвращает описание таблицы услуг для видов приложений
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список услуг вида приложения:
//   * ИдентификаторУслуги - Строка - уникальный строковый идентификатор (код) услуги в сервисе.
//   * ИдентификаторПоставщика - Строка - уникальный строковый идентификатор (код) поставщика услуг в сервисе.
//
Функция НоваяТаблицаУслуг() Экспорт
	
	УслугиВидовПриложений = Новый ТаблицаЗначений;
	УслугиВидовПриложений.Колонки.Добавить("ИдентификаторПоставщика", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	УслугиВидовПриложений.Колонки.Добавить("ИдентификаторУслуги", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	Возврат УслугиВидовПриложений;
	
КонецФункции

// Возвращает описание таблицы обработчиков перехода одного вида приложения к другому
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * ИсходноеИмяВидаПриложения - Строка - имя вида приложения, с которого выполняется переход.
//    * ИмяВидаПриложения           - Строка - имя вида приложения, на который выполняется переход.
//    * Процедура                   - Строка - полное имя процедуры-обработчика перехода.
//                                             Обязательно должна быть экспортной.
//
Функция НоваяТаблицаОбработчиковПерехода() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("ИсходноеИмяВидаПриложения", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	Обработчики.Колонки.Добавить("ИмяВидаПриложения", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает шаблон описания результата обработки
// 
// Возвращаемое значение:
//  Структура:
//   * Ошибка - Булево - признак ошибки обработки. По умолчанию, Ложь.
//   * Сообщение - Строка - сообщение об ошибке обработки.
//
Функция НовыйРезультатОбработки() Экспорт
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Ошибка", Ложь);
	РезультатОбработки.Вставить("Сообщение", "");
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает шаблон параметров уведомления об обновлении вида приложения.
// 
// Возвращаемое значение:
//  Структура:
// * Показывать - Булево - Истина, если необходимо показывать уведомление активным пользователям. По умолчанию, Ложь.
// * Заголовок - Строка - текст оповещения.
// * Сообщение - Строка - пояснение оповещения.
// * ДействиеПриНажатии - Неопределено, Строка, ОписаниеОповещения - навигационная ссылка строкой или описание процедуры при нажатии.
//                        По умолчанию, Неопределено 
//
Функция НовыйПараметрыУведомленияОЗавершенииПерехода() Экспорт
	
	ПараметрыУведомления = Новый Структура;
	ПараметрыУведомления.Вставить("Показывать", Ложь);
	ПараметрыУведомления.Вставить("Заголовок", НСтр("ru = 'Выполнен переход на новый вид приложения'"));
	ПараметрыУведомления.Вставить("Сообщение", НСтр("ru = 'Для применения изменений требуется перезапустить программу.'"));
	ПараметрыУведомления.Вставить("ДействиеПриНажатии", Неопределено);
	
	Возврат ПараметрыУведомления;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет наличие услуги в описании вида приложения
// 
// Параметры:
//  ВидПриложения - см. НовыйВидПриложения
//  ПараметрыУслуги - СтрокаТаблицыЗначений из см. ВидыПриложенийСервер.НоваяТаблицаУслуг
// 
// Возвращаемое значение:
//  Булево - Истина, если услуга найдена в данных вида приложения, Ложь - иначе.
//
Функция УслугаНайденаВВидеПриложения(ВидПриложения, ПараметрыУслуги)
	
	Для Каждого Услуга Из ВидПриложения.Услуги Цикл
		Если Услуга.ИдентификаторПоставщика = ПараметрыУслуги.ИдентификаторПоставщика
			И Услуга.ИдентификаторУслуги = ПараметрыУслуги.ИдентификаторУслуги Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПредставлениеСпискаУслуг(Услуги, Разделитель)
	
	Результат = "";
	Для Каждого Услуга Из Услуги Цикл
		Результат = Результат + Разделитель + СтрШаблон(
			НСтр("ru = 'идентификатор поставщика: %1, идентификатор услуги: %2'"),
			Услуга.ИдентификаторПоставщика,
			Услуга.ИдентификаторУслуги);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти