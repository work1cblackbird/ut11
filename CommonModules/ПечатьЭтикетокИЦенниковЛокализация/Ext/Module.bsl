////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в обработке ПечатьЭтикетокИЦенников
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные) Экспорт
	//++ Локализация
	Если Режим = "АкцизныеМарки" Тогда
		Если ИсходныеДанные <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", "&Таблица");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		Иначе
			
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		НЕОПРЕДЕЛЕНО КАК Ссылка,
			|		"""" КАК КодАкцизнойМарки,
			|		"""" КАК СерияМарки,
			|		"""" КАК НомерМарки,
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		0 КАК Порядок)";
			
			ПечатьЭтикетокИЦенниковЛокализация.ПодготовитьТекстВременнойТаблицыПечатиАкцизныхМарок(ТекстВременнойТаблицы);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходныеДанныеПереопределяемый", ТекстВременнойТаблицы);
			
		КонецЕсли;
	
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ПечатьЭтикетокИЦенниковЛокализация.ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "ТаблицаКодовМаркировкиИСМП" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "ШтрихкодыУпаковок" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ПечатьЭтикетокИЦенниковЛокализация.ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Модифицирует значение штрихкода для компоненты печати штрихкода
// 
// Параметры:
// 	ЗначениеШтрихкодаДляКомпоненты - Строка -Значения штрихкода, которое будет модифицировано
// 	ТипКода - Число - Тип штрихкода
Процедура ПриОпределенииЗначенияШтрихкодаДляКомпоненты(ЗначениеШтрихкодаДляКомпоненты, ТипКода, ТипВходныхДанных = Неопределено) Экспорт
	//++ Локализация
	ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(
		ЗначениеШтрихкодаДляКомпоненты, ТипКода, ТипВходныхДанных);
	//-- Локализация
КонецПроцедуры

Процедура ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати) Экспорт
	//++ Локализация
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаАкцизныеМарки") Тогда
		
		СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КодАкцизнойМарки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("СерияМарки");
		СтруктураНастроек.ОбязательныеПоля.Добавить("НомерМарки");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиАкцизныеМарки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭТИКЕТКААКЦИЗНЫЕМАРКИ";
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаАкцизныеМарки",
			НСтр("ru = 'Этикетки акцизных марок'"),
			ТабличныйДокумент);
			
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиОбувь(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		Если ТипЗнч(ТабличныйДокумент) = Тип("Массив") Тогда
			
			ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП");
			Если ПечатнаяФорма <> Неопределено Тогда
				КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
			КонецЕсли;
			
			КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
			ПрефиксИмениМакета = СтрШаблон("%1_%2", НСтр("ru = 'ЭтикеткаИСМП'"), Новый УникальныйИдентификатор);
			НомерМакета = 0;
			Для Каждого СтруктураДокумента Из ТабличныйДокумент Цикл
				
				НомерМакета = НомерМакета + 1;
				ИмяМакета = СтрШаблон("%1_%2", ПрефиксИмениМакета, НомерМакета);
				ПечатнаяФорма = РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
					КомплектПечатныхФорм, ИмяМакета, "", 1);
				РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ПечатнаяФорма);
				
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
					КоллекцияПечатныхФорм,
					ИмяМакета,
					СтруктураДокумента.Заголовок,
					СтруктураДокумента.ТабличныйДокумент);
				
			КонецЦикла;
			
			КомплектПечатныхФорм = Неопределено;
			
		Иначе
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭТИКЕТКАКОДМАРКИРОВКИИСМП";
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ЭтикеткаКодМаркировкиИСМП",
				НСтр("ru = 'Этикетка (обувь, одежда, табак...)'"),
				ТабличныйДокумент);
		КонецЕсли;
			
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаШтрихкодыУпаковки") Тогда
		
		СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭТИКЕТКАШТРИХКОДЫУПАКОВКИ";
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаШтрихкодыУпаковки",
			НСтр("ru = 'Этикетки штрихкодов упаковок'"),
			ТабличныйДокумент);
			
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Функция ПолучитьПараметрыДляПечатиОбразца(Форма, Назначение, ТипКода, Контекст) Экспорт
	//++ Локализация
	Если Назначение = ПредопределенноеЗначение(
		"Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок") Тогда
		Возврат ПолучитьПараметрыДляПечатиОбразцаЭтикеткиАкцизныеМарки(
			Контекст.ДляЧего, ТипКода, Форма.УникальныйИдентификатор);
	ИначеЕсли Назначение = ПредопределенноеЗначение(
		"Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок") Тогда
		Возврат ПолучитьПараметрыДляПечатиОбразцаЭтикеткиШтрихкодовУпаковок(
			Контекст.ДляЧего, ТипКода, Форма.УникальныйИдентификатор);
	ИначеЕсли Назначение = ПредопределенноеЗначение(
		"Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаКодМаркировкиИСМП") Тогда
		Возврат ПолучитьПараметрыДляПечатиОбразцаЭтикеткиИСМП(
			Контекст.ДляЧего, ТипКода, Форма.УникальныйИдентификатор);
	Иначе 
		Возврат Новый Структура;
	КонецЕсли;
	//-- Локализация
КонецФункции

//++ Локализация

#Область АкцизныеМаркиЕГАИС

// Получить параметры для печати образца этикетки акцизных марок.
//
// Параметры:
//  ДляЧего - ДокументСсылка - Назначение,
//  ТипКода - Число - Тип кода,
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор.
// 
// Возвращаемое значение:
//  Структура - Параметры печати.
//
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиАкцизныеМарки(ДляЧего, ТипКода, УникальныйИдентификатор)

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("АдресВХранилище", Неопределено);
	ПараметрыПечати.Вставить("ШаблонЭтикетки", Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	ПараметрыПечати.Вставить("КоличествоЭкземпляров", 1);
	
	ШаблоныЭтикетокИЦенниковЛокализация.ПриПолученииПараметровДляПечатиОбразцаЭтикеткиАкцизныеМарки(
		ДляЧего, ТипКода, УникальныйИдентификатор, ПараметрыПечати);
	
	Возврат ПараметрыПечати;

КонецФункции

Функция ДанныеДляПечатиАкцизныхМарок(ОбъектыПечати) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЭтикеткиДляПечати", Ложь);
	Результат.Вставить("ЕстьШаблонЭтикетки",    Ложь);
	Результат.Вставить("ШаблонЭтикетки",        Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	
	ЗаполнитьДанныеДляПечатиАкцизныхМарок(ОбъектыПечати, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьТекстВременнойТаблицыПечатиАкцизныхМарок(ТекстВременнойТаблицы) Экспорт

	ТекстВременнойТаблицы =
	"	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Документ.ЗапросАкцизныхМарокЕГАИС.ПустаяСсылка) КАК Ссылка,
	|		"""" КАК КодАкцизнойМарки,
	|		"""" КАК СерияМарки,
	|		"""" КАК НомерМарки,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|		0 КАК Порядок)";
	
КонецПроцедуры

Процедура ПодготовитьТекстВременнойТаблицыПечатиЭтикетокОбувь(ТекстВременнойТаблицы) Экспорт

	ТекстВременнойТаблицы =
	"	(ВЫБРАТЬ
	|		0 КАК Количество,
	|		"""" КАК НомерВГруппе,
	|		0 КАК СодержимоеКоличество,
	|		"""" КАК Штрихкод,
	|		"""" КАК КодМаркировки,
	|		"""" КАК GTIN,
	|		"""" КАК СрокГодности,
	|		"""" КАК ПредставлениеНоменклатуры,
	|		0 КАК ЦифраРасширения,
	|		0 КАК ПрефиксКомпанииGS1,
	|		0 КАК СерийныйНомерSSCC,
	|		0 КАК КонтрольноеЧисло,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка) КАК ШаблонЭтикетки,
	|		0 КАК Порядок)";
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПечатиАкцизныхМарок(ОбъектыПечати, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектыПечати",ОбъектыПечати);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросАкцизныхМарокЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ЗапросАкцизныхМарокЕГАИСТовары.Характеристика КАК Характеристика,
	|	ЗапросАкцизныхМарокЕГАИСТовары.ТипМарки КАК ТипМарки,
	|	ЗапросАкцизныхМарокЕГАИСТовары.СерияМарки КАК СерияМарки,
	|	ЗапросАкцизныхМарокЕГАИСТовары.НомерМарки КАК НомерМарки,
	|	ЗапросАкцизныхМарокЕГАИСТовары.КодАкцизнойМарки КАК КодАкцизнойМарки,
	|	ЗапросАкцизныхМарокЕГАИСТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗапросАкцизныхМарокЕГАИС.Товары КАК ЗапросАкцизныхМарокЕГАИСТовары
	|ГДЕ
	|	ЗапросАкцизныхМарокЕГАИСТовары.Ссылка В(&ОбъектыПечати)
	|	И ЗапросАкцизныхМарокЕГАИСТовары.КодАкцизнойМарки <> """"";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ЕстьЭтикеткиДляПечати = ТаблицаТоваров.Количество() > 0;
	
	ШаблонЭтикетки = Справочники.ШаблоныЭтикетокИЦенников.ШаблонПоУмолчанию(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок);
	
	Результат.ЕстьЭтикеткиДляПечати = ЕстьЭтикеткиДляПечати;
	Результат.ЕстьШаблонЭтикетки    = ЗначениеЗаполнено(ШаблонЭтикетки);
	Результат.ШаблонЭтикетки        = ШаблонЭтикетки;
	
	Если ЕстьЭтикеткиДляПечати Тогда
		Результат.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ТаблицаТоваров));
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЭтикеткиАкцизныеМарки(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаАкцизныеМарки";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или Не ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ШаблонЭтикетки.Шаблон.Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек, "АкцизныеМарки");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(ИмяПараметраКодАкцизнойМарки())];
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				ИмяПоляВШаблоне = Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ);
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(ИмяПоляВШаблоне);
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				Иначе
					Если ИмяПоляВШаблоне = "СерияМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 4,3);
					ИначеЕсли ИмяПоляВШаблоне = "НомерМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 5,8);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ТипВходныхДанных = 0;
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода, ТипВходныхДанных);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
					ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
					Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
						Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
					Иначе
						ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
КонецПроцедуры



#КонецОбласти

#Область ШтрихкодыУпаковок

// Получить параметры для печати образца этикетки штрихкодов упаковок.
//
// Параметры:
//  ДляЧего - СправочникСсылка - Назначение,
//  ТипКода - Число - Тип кода,
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор.
// 
// Возвращаемое значение:
//  Структура - Параметры печати.
//
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиШтрихкодовУпаковок(ДляЧего, ТипКода, УникальныйИдентификатор)

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ШаблонЭтикетки", Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	ПараметрыПечати.Вставить("КоличествоЭкземпляров", 1);
	
	ШаблоныЭтикетокИЦенниковЛокализация.ПриПолученииПараметровДляПечатиОбразцаЭтикеткиШтрихкодыУпаковок(
		ДляЧего, ТипКода, УникальныйИдентификатор, ПараметрыПечати);
	
	Возврат ПараметрыПечати;

КонецФункции

Функция ДанныеДляПечатиШтрихкодовУпаковок(ОбъектыПечати) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьЭтикеткиДляПечати", Ложь);
	Результат.Вставить("ЕстьШаблонЭтикетки",    Ложь);
	Результат.Вставить("ШаблонЭтикетки",        Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	
	ПечатьЭтикетокИЦенниковЛокализация.ЗаполнитьДанныеДляПечатиШтрихкодовУпаковок(ОбъектыПечати, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеДляПечатиШтрихкодовУпаковок(ОбъектыПечати, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписанныеШтрихкоды   = Новый Массив;
	НеЗаписанныеШтрихкоды = Новый Массив;
	
	ИндексМассива = 0;
	Для каждого ОбъектПечати Из ОбъектыПечати Цикл
	
		Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
			ЗаписанныеШтрихкоды.Добавить(ОбъектПечати);
		Иначе
			НеЗаписанныеШтрихкоды.Добавить(ОбъектПечати);
			ОбъектыПечати.Установить(ИндексМассива, Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		КонецЕсли;
		
		ИндексМассива = ИндексМассива + 1;
		
	КонецЦикла;
	
	ТаблицаШтрихкодов = НоваяТаблицаШтрихкодовУпаковок();
	
	ТипыШтрихкодов = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки КАК ДатаМаркировки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В(&ЗаписанныеШтрихкоды)
	|	И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода <> """"
	|");
	Запрос.УстановитьПараметр("ЗаписанныеШтрихкоды", ЗаписанныеШтрихкоды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипыШтрихкодов.Вставить(Выборка.ТипШтрихкода, Истина);
		
		Строка = ТаблицаШтрихкодов.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Выборка);
		ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, Выборка.Штрихкод);
		
	КонецЦикла;
	
	Для каждого НеЗаписанныйШтрихкод Из НеЗаписанныеШтрихкоды Цикл
		
		Строка = ТаблицаШтрихкодов.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, НеЗаписанныйШтрихкод);
		ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, НеЗаписанныйШтрихкод.Штрихкод);
		
	КонецЦикла;
	
	ЕстьЭтикеткиДляПечати = ТаблицаШтрихкодов.Количество() > 0;
	
	Если ТипыШтрихкодов.Количество() > 1 Тогда
		ШаблонЭтикетки = Неопределено;
	Иначе
		
		Для Каждого КлючИЗначение Из ТипыШтрихкодов Цикл
			ТипШтрихкода = КлючИЗначение.Ключ;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ШаблоныЭтикетокИЦенников.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныЭтикетокИЦенников КАК ШаблоныЭтикетокИЦенников
		|ГДЕ
		|	ШаблоныЭтикетокИЦенников.ТипШтрихкода = &ТипШтрихкода
		|	И ШаблоныЭтикетокИЦенников.Назначение В (
		|		ЗНАЧЕНИЕ(Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок),
		|		ЗНАЧЕНИЕ(Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок)
		|	)
		|	И НЕ ШаблоныЭтикетокИЦенников.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			ШаблонЭтикетки = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ЕстьЭтикеткиДляПечати = ЕстьЭтикеткиДляПечати;
	Результат.ЕстьШаблонЭтикетки    = ЗначениеЗаполнено(ШаблонЭтикетки);
	Результат.ШаблонЭтикетки        = ШаблонЭтикетки;
	
	Если ЕстьЭтикеткиДляПечати Тогда
		Результат.Вставить("ОбъектыПечати", ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаШтрихкодов));
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаШтрихкодыУпаковок";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	Если ДанныеПечати.Свойство("ОбъектыПечати") Тогда 
		СтруктураНастроек.ИсходныеДанные = НоваяТаблицаШтрихкодовУпаковок();
		Для Каждого ОбъектПечати Из ДанныеПечати.ОбъектыПечати Цикл
			СтрокаТаблицы = СтруктураНастроек.ИсходныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОбъектПечати);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или Не ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ШаблонЭтикетки.Шаблон.Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек, "ШтрихкодыУпаковок");
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Штрихкод")];
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				ИмяПоляВШаблоне = Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ);
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(ИмяПоляВШаблоне);
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				Иначе
					Если ИмяПоляВШаблоне = "СерияМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 4,3);
					ИначеЕсли ИмяПоляВШаблоне = "НомерМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 5,8);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Штрихкод")];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ТипВходныхДанных = 0;
					ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода, ТипВходныхДанных);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
					ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
					Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
						Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
					Иначе
						ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Счетчик = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(Строка, Штрихкод) ЭКспорт
	
	ЗначениеШтрихкода = Штрихкод;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "ШтрихкодВBase64")
		И Строка.ШтрихкодВBase64 Тогда
		ЗначениеШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Штрихкод);
		Если ЗначениеШтрихкода = Неопределено Тогда
			ЗначениеШтрихкода = Штрихкод;
		КонецЕсли;
	КонецЕсли;
	ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкода);
	
	Если ПараметрыШтрихкода.Результат <> Неопределено Тогда
		
		СвойстваШтрихкода = ПараметрыШтрихкода.Результат;
		
		Если ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			
			Строка.ПрефиксКомпанииGS1 = Формат(СвойстваШтрихкода.ПрефиксКомпанииGS1, "ЧГ=0");
			Строка.ЦифраРасширения    = Формат(СвойстваШтрихкода.ЦифраРасширения, "ЧГ=0");
			Строка.СерийныйНомерSSCC  = Формат(СвойстваШтрихкода.СерийныйНомерSSCC, "ЧГ=0");
			Строка.КонтрольноеЧисло   = Формат(СвойстваШтрихкода.КонтрольноеЧисло, "ЧГ=0");
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			
			Если СвойстваШтрихкода.НомерФорматаCode128 = 1 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ДатаМаркировки           = СвойстваШтрихкода.ДатаМаркировки;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 2 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.ТипЛогистическойЕдиницы  = СвойстваШтрихкода.ТипЛогистическойЕдиницы;
				Строка.НомерПлощадкиМаркировки  = СвойстваШтрихкода.НомерПлощадкиМаркировки;
				Строка.ГодГенерацииШтрихкода    = Формат(СвойстваШтрихкода.ГодГенерацииШтрихкода, "ДФ=yyyy");
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			ИначеЕсли СвойстваШтрихкода.НомерФорматаCode128 = 3 Тогда
				Строка.ИдентификаторОрганизации = СвойстваШтрихкода.ИдентификаторОрганизации;
				Строка.НомерПоПорядку           = Формат(СвойстваШтрихкода.НомерПоПорядку, "ЧГ=0");
			КонецЕсли;
			
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			
			Для каждого СтрокаПараметровПримененияGS1 Из ПараметрыШтрихкода.Результат Цикл
				ИмяКолонкиПечати = "ИдентификаторПрименения_" + СтрокаПараметровПримененияGS1.КлючИдентификатора;
				Строка[ИмяКолонкиПечати] = СтрокаПараметровПримененияGS1.Значение;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ТаблицаДанныхШтрихкодов) Экспорт
	
	// Добавляем колонки в таблицу.
	ПоддерживаемыеТипыШтрихкодов = Новый Массив;
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.Code128);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
	// PDF417 и DataMatrix имеют одинаковые параметры. Поэтому добавляем только один тип.
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.PDF417);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
	// GS1_DataBarExpandedStacked и GS1_128, GS1_DataMatrix имеют одинаковые параметры. Поэтому добавляем только один тип.
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	
	Для каждого ПоддерживаемыйТипШтрихкода Из ПоддерживаемыеТипыШтрихкодов Цикл
		
		ИдентификаторыИТипыКолонокПечати = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ПоддерживаемыйТипШтрихкода);
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыИТипыКолонокПечати Цикл
			ИдентификаторКолонки = ИдентификаторИТипКолонки.Ключ;
			Если ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128
				ИЛИ ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				ИмяКолонки = ИдентификаторКолонки;
			Иначе
				ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
			КонецЕсли;
			Если ТаблицаДанныхШтрихкодов.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТипКолонки = ИдентификаторИТипКолонки.Значение;
				ТаблицаДанныхШтрихкодов.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ЕстьПолеШтрихкодВBase64 = Неопределено;
	
	// Заполняем колонки прочитанными значениями.
	Для каждого СтрокаТаблицы Из ТаблицаДанныхШтрихкодов Цикл
		
		Если ЕстьПолеШтрихкодВBase64 = Неопределено Тогда
			ЕстьПолеШтрихкодВBase64 = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ШтрихкодВBase64");
		КонецЕсли;
		Если ЕстьПолеШтрихкодВBase64 И СтрокаТаблицы.ШтрихкодВBase64 Тогда
			ЗначениеШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаТаблицы.Штрихкод);
			Если ЗначениеШтрихкода = Неопределено Тогда
				ЗначениеШтрихкода = СтрокаТаблицы.Штрихкод;
			КонецЕсли;
		Иначе
			ЗначениеШтрихкода = СтрокаТаблицы.Штрихкод;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(ЗначениеШтрихкода);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(ЗначениеШтрихкода);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкода);
			Если ПараметрыШтрихкода.Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
				
				ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(ЗначениеШтрихкода);
				Если ПараметрыШтрихкода.Результат = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
				
			ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
				
				ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(ЗначениеШтрихкода);
				Если ПараметрыШтрихкода.Результат = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
				
			Иначе
				
				Для Каждого СвойстваПараметраШтрихкода Из ПараметрыШтрихкода.Результат Цикл
					ИмяКолонки = "ИдентификаторПрименения_" + СвойстваПараметраШтрихкода.КлючИдентификатора;
					СтрокаТаблицы[ИмяКолонки] = СвойстваПараметраШтрихкода.Значение;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЭтикеткиИСМП

Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиИСМП(ДляЧего, ТипКода, УникальныйИдентификатор)

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПроверятьДоступность", Ложь);
	ПараметрыПечати.Вставить("ШаблонЭтикетки", Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	
	ШаблоныЭтикетокИЦенниковЛокализация.ПриПолученииПараметровДляПечатиОбразцаЭтикеткиИСМП(
		ДляЧего, ТипКода, УникальныйИдентификатор, ПараметрыПечати);
		
	Возврат ПараметрыПечати;

КонецФункции

// Процедура дополняет исходную таблицу данных для печати колонками, необходимыми для заполнения данными 
// штрихкода SSCС, GS1.
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица исходных данных
Процедура ДополнитьТаблицуШтрихкодамиУпаковок(ТаблицаДанных) Экспорт

	ТаблицаШтрихкодов = НоваяТаблицаШтрихкодовУпаковок();
	Для Каждого КолонкаТаблицаШтрихкодов Из ТаблицаШтрихкодов.Колонки Цикл
		Если ТаблицаДанных.Колонки.Найти(КолонкаТаблицаШтрихкодов.Имя) = Неопределено Тогда
			ТаблицаДанных.Колонки.Добавить(КолонкаТаблицаШтрихкодов.Имя, КолонкаТаблицаШтрихкодов.ТипЗначения, , )
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) 
			И ЗначениеЗаполнено(СтрокаТаблицы.ТипШтрихкода)
			И (СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC")
				Или СтрокаТаблицы.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128")) Тогда
			ЗаполнитьСвойстваСтрокиШтрихкодовУпаковокПоШтрихкоду(СтрокаТаблицы, СтрокаТаблицы.Штрихкод);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура печати этикеток обуви
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица с исходными данными для печати (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Параметры печати
Процедура ПечатьЭтикетокОбувь(ТаблицаДанных, ТабличныйДокумент, СтруктураНастроек) Экспорт

	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаИСМП";
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.Количество > 0 Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураНастроек.Свойство("СтруктураМакетаШаблона")
		И ЗначениеЗаполнено(СтруктураНастроек.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		Иначе
			СтруктураШаблона = СтруктураНастроек.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	#Область ПодготовкаСтруктурыДанныхШаблона
	СтруктураНастроек.ИсходныеДанные = ТаблицаДанных;
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(
		СтруктураНастроек, "ЭтикеткаКодМаркировкиИСМП");

	#КонецОбласти
	
	#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

	ПараметрыТабличногоДокументЗаполнены = Ложь;
	
	ПредыдущейНомерВГруппе = Неопределено;
	ПредыдущаяСтрокаПечати = Новый Структура("Номенклатура, Характеристика");
	
	Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
		
		КоличествоЭтикеток = СтрокаТовары.Количество;
		Если КоличествоЭтикеток > 0 Тогда
			
			ТекущийНомерВГруппе = СтрокаТовары.НомерВГруппе;
			
			Если Не ПараметрыТабличногоДокументЗаполнены Тогда
				// Применение настроек табличного документа.
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки,, "ОбластьПечати, АвтоМасштаб");
				ПараметрыТабличногоДокументЗаполнены = Истина;
			КонецЕсли;
				
			СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары.ШаблонЭтикетки);
	
			Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
			Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
					НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
					Если НаименованиеКолонки <> Неопределено Тогда
						Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			#Область ПечатьИзображенияШтрихкода
			Для каждого Рисунок Из Область.Рисунки Цикл
				
				Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
					
					ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
					Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
						
						ТипВходныхДанных = 0;
						ЗначениеШтрихкодаДляКомпоненты = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода, ТипВходныхДанных);
						
						Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
							УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
						Иначе
							УровеньЧеткости = 1;
						КонецЕсли;
						
						ПараметрыШтрихкода = Новый Структура;
						ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
						ПараметрыШтрихкода.Вставить("Штрихкод",         ЗначениеШтрихкодаДляКомпоненты);
						ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
						ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
						ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
						ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
						
						Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
							ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
							ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("УголПоворота") Тогда
							ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
							ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("Масштабировать") Тогда
							ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
							ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
						КонецЕсли;
						Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
							ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
						КонецЕсли;
						
						РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
						Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
							Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
						Иначе
							ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрНайти(Рисунок.Имя, "ЗнакВалюты") = 1 Тогда
					ЗначениеКодаВалюты = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраКодВалюты())];
					Попытка
						Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты" + ЗначениеКодаВалюты), Истина);
					Исключение
						Рисунок.Картинка = Новый Картинка;
					КонецПопытки;
				КонецЕсли;
				
			КонецЦикла;
			#КонецОбласти
			
			ИспользоватьХарактеристики = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Характеристика");
			
			#Область КоличествоЭкземпляров
			Для Индекс = 1 По КоличествоЭтикеток Цикл // Цикл по количеству экземпляров
				
				Если СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
					
					ТабличныйДокумент.Вывести(Область);
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
				Иначе
					
					ВывестиГоризонтальныйРазделитель = Ложь;
					Если ПредыдущейНомерВГруппе = Неопределено Тогда
						ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
					КонецЕсли;
					
					Присоединять = Истина;
					Если ТекущийНомерВГруппе = 0 Тогда
						// Группа не поменялась, возможно другая номенклатура с такой же группой
						Если ЗначениеЗаполнено(ПредыдущаяСтрокаПечати.Номенклатура)
							И (ИспользоватьХарактеристики И ПредыдущаяСтрокаПечати.Характеристика <> СтрокаТовары.Характеристика)
							Или ПредыдущаяСтрокаПечати.Номенклатура <> СтрокаТовары.Номенклатура Тогда
							ВывестиГоризонтальныйРазделитель = Истина;
						КонецЕсли;
					ИначеЕсли ТекущийНомерВГруппе<>ПредыдущейНомерВГруппе Тогда
						ВывестиГоризонтальныйРазделитель = Истина;
						ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
					КонецЕсли;
					
					Если ВывестиГоризонтальныйРазделитель Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						Присоединять = Ложь;
					КонецЕсли;
					
					МассивОбластейПрисоединения = Новый Массив();
					МассивОбластейПрисоединения.Добавить(Область);
					
					Если Присоединять И ТабличныйДокумент.ПроверитьПрисоединение(МассивОбластейПрисоединения) Тогда
						
						ТабличныйДокумент.Присоединить(Область);
						
					Иначе
						
						Если Не ТабличныйДокумент.ПроверитьВывод(Область) И Присоединять Тогда
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(Область);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // Цикл по количеству экземпляров
			
			#КонецОбласти
			
			ЗаполнитьЗначенияСвойств(ПредыдущаяСтрокаПечати, СтрокаТовары);
			
		КонецЕсли;
	
	КонецЦикла; // Цикл по строкам таблицы товаров
	
	#КонецОбласти
	
КонецПроцедуры

// Процедура печати этикеток обуви
// 
// Параметры:
// 	ТаблицаДанных - ТаблицаЗначений - Таблица с исходными данными для печати (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	ТабличныйДокумент - ТабличныйДокумент - результат печати
// 	СтруктураНастроек - Структура - Параметры печати
Процедура ПечатьЭтикетокИСМП(ТаблицаДанных, ТабличныйДокумент, СтруктураНастроек) Экспорт

	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаИСМП";
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов    = Новый Соответствие();
	ХэшиРазмеровШаблонов    = Неопределено;
	РазмерыШаблоновРазличны = Ложь;
	
	Для Каждого СтрокаТЧ Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.Количество > 0 Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураНастроек.Свойство("СтруктураМакетаШаблона")
		И ЗначениеЗаполнено(СтруктураНастроек.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			
			СтруктураШаблона = ШаблонЭтикетокИЦенников.Шаблон.Получить();
			Хэширование      = Новый ХешированиеДанных(ХешФункция.SHA256);
			ДанныеДляХэша    = Новый Массив();
			ОбластьПечати    = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
			
			ДанныеДляХэша.Добавить(ОбластьПечати.ШиринаТаблицы);
			ДанныеДляХэша.Добавить(ОбластьПечати.ВысотаТаблицы);
			
			Для НомерКолонки = 1 По ОбластьПечати.ШиринаТаблицы Цикл
				Колонка = ОбластьПечати.Область(, НомерКолонки,, НомерКолонки);
				ДанныеДляХэша.Добавить(Колонка.ШиринаКолонки);
			КонецЦикла;
			
			Для НомерСтроки = 1 По ОбластьПечати.ВысотаТаблицы Цикл
				Строка = ОбластьПечати.Область(НомерСтроки,, НомерСтроки,);
				ДанныеДляХэша.Добавить(Строка.ВысотаСтроки);
				ДанныеДляХэша.Добавить(Строка.АвтоВысотаСтроки);
			КонецЦикла;
			
			Хэширование.Добавить(СтрСоединить(ДанныеДляХэша));
			
			Если ХэшиРазмеровШаблонов = Неопределено Тогда
				ХэшиРазмеровШаблонов = Base64Строка(Хэширование.ХешСумма);
			ИначеЕсли ХэшиРазмеровШаблонов <> Base64Строка(Хэширование.ХешСумма) Тогда
				РазмерыШаблоновРазличны = Истина;
			КонецЕсли;
			
		Иначе
			СтруктураШаблона = СтруктураНастроек.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	#Область ПодготовкаСтруктурыДанныхШаблона
	СтруктураНастроек.ИсходныеДанные = ТаблицаДанных;
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(
		СтруктураНастроек, "ЭтикеткаКодМаркировкиИСМП");
	
	#КонецОбласти
	
	#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПоследняяВыведеннаяШирина            = 0;
	ВыведеноОбластейВШирину              = 0;
	НомерПредыдущейВерхнейГраницы        = 0;
	ПредыдущийШаблонПечати               = Неопределено;
	ПараметрыТабличногоДокументЗаполнены = Ложь;
	КоличествоЭтикетокВШиринуПоШаблону   = Новый Соответствие();
	
	ПредыдущейНомерВГруппе = Неопределено;
	ПредыдущаяСтрокаПечати = Новый Структура("Номенклатура, Характеристика, GTIN");
	
	Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
		
		КоличествоЭтикеток = СтрокаТовары.Количество;
		Если КоличествоЭтикеток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийНомерВГруппе = СтрокаТовары.НомерВГруппе;
		
		СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары.ШаблонЭтикетки);
		Область          = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
		
		Если Не ПараметрыТабличногоДокументЗаполнены Тогда
			// Применение настроек табличного документа.
			ЗаполнитьЗначенияСвойств(
				ТабличныйДокумент,
				СтруктураШаблона.МакетЭтикетки,,
				"ОбластьПечати, АвтоМасштаб");
				
			ПараметрыТабличногоДокументЗаполнены = Истина;
		КонецЕсли;
		
		// Расчет для разных шаблонов
		Если РазмерыШаблоновРазличны И ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			
			ДанныеПоКоличеству = КоличествоЭтикетокВШиринуПоШаблону[СтрокаТовары.ШаблонЭтикетки];
			
			Если ДанныеПоКоличеству = Неопределено Тогда
				
				КоличествоПоШирине = 1;
				
				Если Не СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
					
					ТабличныйДокументПроверкаВывода = Новый ТабличныйДокумент();
					ЗаполнитьЗначенияСвойств(
						ТабличныйДокументПроверкаВывода,
						СтруктураШаблона.МакетЭтикетки,,
						"ОбластьПечати, АвтоМасштаб");
					
					ТабличныйДокументПроверкаВывода.Вывести(Область);
					
					Пока ТабличныйДокументПроверкаВывода.ПроверитьПрисоединение(Область) Цикл
						КоличествоПоШирине = КоличествоПоШирине + 1;
						ТабличныйДокументПроверкаВывода.Присоединить(Область);
						Если КоличествоПоШирине > 100 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				КоличествоЭтикетокВШиринуПоШаблону.Вставить(СтрокаТовары.ШаблонЭтикетки, КоличествоПоШирине);
				
			КонецЕсли;
			
		КонецЕсли;
			
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицыДанных = ТаблицаДанных.Найти(СтрокаТовары.КодМаркировки, "КодМаркировки");
		Если СтрокаТаблицыДанных = Неопределено Тогда
			ШтрихкодВBase64 = Ложь;
		Иначе
			ШтрихкодВBase64 = СтрокаТаблицыДанных.ШтрихкодВBase64;
		КонецЕсли;
		
		#Область ПечатьИзображенияШтрихкода
		Для каждого Рисунок Из Область.Рисунки Цикл
			
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",  Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
					ПараметрыШтрихкода.Вставить("Высота",  Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
					ПараметрыШтрихкода.Вставить("ТипКода", СтруктураШаблона.ТипКода);
					
					Если ШтрихкодВBase64 Тогда
						ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 1);
						ПараметрыШтрихкода.Вставить("Штрихкод",         ЗначениеШтрихкода);
					Иначе
						ТипВходныхДанных = 0;
						КодGS1ДляКомпонентыПечати = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода, ТипВходныхДанных);
						ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
						ПараметрыШтрихкода.Вставить("Штрихкод",         КодGS1ДляКомпонентыПечати);
					КонецЕсли;
					
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
					Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
						Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
					Иначе
						ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрНайти(Рисунок.Имя, "ЗнакВалюты") = 1 Тогда
				ЗначениеКодаВалюты = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраКодВалюты())];
				Попытка
					Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты" + ЗначениеКодаВалюты), Истина);
				Исключение
					Рисунок.Картинка = Новый Картинка;
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		#КонецОбласти
		
		ИспользоватьХарактеристики = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Характеристика");
		
		#Область КоличествоЭкземпляров
		Для Индекс = 1 По КоличествоЭтикеток Цикл // Цикл по количеству экземпляров
			
			Если СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
				
				Если РазмерыШаблоновРазличны Тогда
					
					ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
					ВременныйТабличныйДокумент.Вывести(Область);
					
					ОбластьИсточник = ВременныйТабличныйДокумент.Область(
						1,
						1,
						ВременныйТабличныйДокумент.ВысотаТаблицы,
						ВременныйТабличныйДокумент.ШиринаТаблицы);
					
					Если ТабличныйДокумент.ВысотаТаблицы = 1 Тогда
						НомерПервойСтрокиНовойОбласти    = 1;
						НомерПоследнейСтрокиНовойОбласти = ВременныйТабличныйДокумент.ВысотаТаблицы;
					Иначе
						НомерПервойСтрокиНовойОбласти    = ТабличныйДокумент.ВысотаТаблицы + 1;
						НомерПоследнейСтрокиНовойОбласти = НомерПервойСтрокиНовойОбласти   + Область.ВысотаТаблицы - 1;
					КонецЕсли;
					
					ТабличныйДокумент.Область(
						НомерПервойСтрокиНовойОбласти,
						,
						НомерПоследнейСтрокиНовойОбласти,
						).СоздатьФорматСтрок();
					
					Для Счетчик = 1 По ВременныйТабличныйДокумент.ШиринаТаблицы Цикл
						ТабличныйДокумент.Область(НомерПервойСтрокиНовойОбласти, Счетчик).ШиринаКолонки = Область.Область(1, Счетчик).ШиринаКолонки;
					КонецЦикла;
					Для Счетчик = 1 По ВременныйТабличныйДокумент.ВысотаТаблицы Цикл
						НомерТекущейСтроки              = НомерПервойСтрокиНовойОбласти + Счетчик - 1;
						СтрокаИсточник                  = Область.Область(Счетчик, ,Счетчик);
						СтрокаПриемник                  = ТабличныйДокумент.Область(НомерТекущейСтроки,, НомерТекущейСтроки);
						СтрокаПриемник.ВысотаСтроки     = СтрокаИсточник.ВысотаСтроки;
						СтрокаПриемник.АвтоВысотаСтроки = СтрокаИсточник.АвтоВысотаСтроки;
					КонецЦикла;
					
					ТабличныйДокумент.ВставитьОбласть(
						ОбластьИсточник,
						ТабличныйДокумент.Область(
							НомерПервойСтрокиНовойОбласти,
							1,
							НомерПоследнейСтрокиНовойОбласти,
							ВременныйТабличныйДокумент.ШиринаТаблицы),
							ТипСмещенияТабличногоДокумента.БезСмещения);
					
				Иначе
					
					ТабличныйДокумент.Вывести(Область);
					
				КонецЕсли;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			Иначе
				
				ВывестиГоризонтальныйРазделитель = Ложь;
				Если ПредыдущейНомерВГруппе = Неопределено Тогда
					ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
				КонецЕсли;
				
				Присоединять = ТабличныйДокумент.ВысотаТаблицы > 0;
				Если ТекущийНомерВГруппе = "" Тогда
					// Группа не поменялась, возможно другая номенклатура с такой же группой
					Если ЗначениеЗаполнено(ПредыдущаяСтрокаПечати.Номенклатура)
						И (ИспользоватьХарактеристики И ПредыдущаяСтрокаПечати.Характеристика <> СтрокаТовары.Характеристика)
						Или ПредыдущаяСтрокаПечати.Номенклатура <> СтрокаТовары.Номенклатура 
						Или (Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
							И ПредыдущаяСтрокаПечати.GTIN <> СтрокаТовары.GTIN) Тогда
						ВывестиГоризонтальныйРазделитель = Истина;
					КонецЕсли;
				ИначеЕсли ТекущийНомерВГруппе<>ПредыдущейНомерВГруппе Тогда
					ВывестиГоризонтальныйРазделитель = Истина;
					ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
				КонецЕсли;
				
				Если ВывестиГоризонтальныйРазделитель Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					Присоединять = Ложь;
				КонецЕсли;
				
				МассивОбластейПрисоединения = Новый Массив();
				
				Если РазмерыШаблоновРазличны Тогда
					
					ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
					ВременныйТабличныйДокумент.Вывести(Область);
					
					МассивОбластейПрисоединения.Добавить(Область);
					
					Если ЗначениеЗаполнено(ПредыдущийШаблонПечати) И ПредыдущийШаблонПечати <> СтрокаТовары.ШаблонЭтикетки Тогда
						Присоединять = Ложь;
					КонецЕсли;
					
					УмещаетсяЭтикетокВШирину = КоличествоЭтикетокВШиринуПоШаблону.Получить(СтрокаТовары.ШаблонЭтикетки);
					
					Если Присоединять И ВыведеноОбластейВШирину < УмещаетсяЭтикетокВШирину Тогда
						
						ОбластьИсточник = ВременныйТабличныйДокумент.Область(1, 1, Область.ВысотаТаблицы, Область.ШиринаТаблицы);
						
						ОбластьПриемник = ТабличныйДокумент.Область(
							НомерПредыдущейВерхнейГраницы + 1,
							ПоследняяВыведеннаяШирина + 1,
							НомерПредыдущейВерхнейГраницы + Область.ВысотаТаблицы,
							ПоследняяВыведеннаяШирина + Область.ШиринаТаблицы);
							
						ТабличныйДокумент.ВставитьОбласть(
							ОбластьИсточник,
							ОбластьПриемник);
							
						ОбластьПриемник.СоздатьФорматСтрок();
						
						Для Счетчик = 1 По ВременныйТабличныйДокумент.ШиринаТаблицы Цикл
							ТабличныйДокумент.Область(НомерПервойСтрокиНовойОбласти, Счетчик + ПоследняяВыведеннаяШирина).ШиринаКолонки = Область.Область(1, Счетчик).ШиринаКолонки;
						КонецЦикла;
						
						ПоследняяВыведеннаяШирина = ПоследняяВыведеннаяШирина + ВременныйТабличныйДокумент.ШиринаТаблицы;
						ВыведеноОбластейВШирину   = ВыведеноОбластейВШирину   + 1;
						
					Иначе
						
						Если Не ТабличныйДокумент.ПроверитьВывод(ВременныйТабличныйДокумент) И Присоединять Тогда
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						НомерПредыдущейВерхнейГраницы    = ТабличныйДокумент.ВысотаТаблицы;
						НомерПервойСтрокиНовойОбласти    = ТабличныйДокумент.ВысотаТаблицы + 1;
						НомерПоследнейСтрокиНовойОбласти = ТабличныйДокумент.ВысотаТаблицы + ВременныйТабличныйДокумент.ВысотаТаблицы;
						
						ТабличныйДокумент.Вывести(ВременныйТабличныйДокумент);
						
						ТабличныйДокумент.Область(
							НомерПервойСтрокиНовойОбласти,
							,
							НомерПоследнейСтрокиНовойОбласти,
							).СоздатьФорматСтрок();
						
						Для Счетчик = 1 По Область.ШиринаТаблицы Цикл
							ТабличныйДокумент.Область(НомерПервойСтрокиНовойОбласти, Счетчик,, Счетчик).ШиринаКолонки = Область.Область(1, Счетчик).ШиринаКолонки;
						КонецЦикла;
						
						ПоследняяВыведеннаяШирина = Область.ШиринаТаблицы;
						ВыведеноОбластейВШирину   = 1;
						
					КонецЕсли;
					
					ПредыдущийШаблонПечати = СтрокаТовары.ШаблонЭтикетки;
					
				Иначе
					
					МассивОбластейПрисоединения.Добавить(Область);
					
					Если Присоединять И ТабличныйДокумент.ПроверитьПрисоединение(МассивОбластейПрисоединения) Тогда
						
						ТабличныйДокумент.Присоединить(Область);
						
					Иначе
						
						Если Не ТабличныйДокумент.ПроверитьВывод(Область) И Присоединять Тогда
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(Область);
						
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
		#КонецОбласти
		
		ЗаполнитьЗначенияСвойств(ПредыдущаяСтрокаПечати, СтрокаТовары,, "GTIN");
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ПредыдущаяСтрокаПечати.GTIN = СтрокаТовары.GTIN;
		КонецЕсли;
		
	КонецЦикла; // Цикл по строкам таблицы товаров
	
	#КонецОбласти
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЭтикеткиОбувь(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент, СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

Процедура ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса) Экспорт
	
	//++ Локализация
	Если Режим = "ШтрихкодыУпаковок" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		НачалоБлокаПолейВыбора = СтрНайти(ТекстЗапроса, "{ВЫБРАТЬ");
		Если НачалоБлокаПолейВыбора > 0 Тогда
			КонецБлокаПолейВыбора = СтрНайти(ТекстЗапроса, "}", ,НачалоБлокаПолейВыбора);
			ТекстРазрешенныхПолейИсходный = Сред(ТекстЗапроса, НачалоБлокаПолейВыбора, КонецБлокаПолейВыбора - НачалоБлокаПолейВыбора + 1);
			
			ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		КонецЕсли;
		
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодов.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ТекстРазрешенныхПолейИсходный =
		"{ВЫБРАТЬ
		|	Штрихкод,
		|	КодМаркировки,
		|	НомерВГруппе,
		|	СодержимоеКоличество,
		|	GTIN,
		|	ПредставлениеНоменклатуры,
		|	СрокГодности,
		|	Номенклатура.*,
		|	СтавкаНДС,
		|	Характеристика.*,
		|	ШаблонЭтикетки.*,
		|	Количество,
		|	ЦифраРасширения,
		|	ПрефиксКомпанииGS1,
		|	СерийныйНомерSSCC,
		|	КонтрольноеЧисло}";
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
				
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура МодификацияЗначенияШтрикодаКомпоненты(ЗначениеШтрихкода, ТипКода, ТипВходныхДанных = Неопределено) Экспорт
	
	//++ Локализация
	ЗначениеШтрихкода = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, ТипКода, ТипВходныхДанных);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаШтрихкодовУпаковок() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	МетаданныеТаблицы = Метаданные.Обработки.ПечатьЭтикетокИЦенников.ТабличныеЧасти.ШтрихкодыУпаковок;
	
	Для каждого СвойстваРеквизита Из МетаданныеТаблицы.Реквизиты Цикл
		
		Таблица.Колонки.Добавить(СвойстваРеквизита.Имя, СвойстваРеквизита.Тип);
		
	КонецЦикла;
	
	ЗначенияТиповШтрихкодов = Метаданные.Перечисления.ТипыШтрихкодов.ЗначенияПеречисления;
	Для каждого МетаданныеЗначенияПеречисления Из ЗначенияТиповШтрихкодов Цикл
		ТипШК = Перечисления.ТипыШтрихкодов[МетаданныеЗначенияПеречисления.Имя];
		КолонкиТипаШК = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ТипШК);
		Для каждого КлючИЗначение Из КолонкиТипаШК Цикл
			Если ТипШК = Перечисления.ТипыШтрихкодов.GS1_128
				Или ТипШК = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
				Или ТипШК = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
				ИмяКолонки = "ИдентификаторПрименения_" + КлючИЗначение.Ключ;
			Иначе
				ИмяКолонки = КлючИЗначение.Ключ;
			КонецЕсли;
			
			Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Таблица.Колонки.Добавить(ИмяКолонки, КлючИЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ИмяПараметраКодАкцизнойМарки() Экспорт
	
	Возврат "КодАкцизнойМарки";
	
КонецФункции

#КонецОбласти

//-- Локализация
