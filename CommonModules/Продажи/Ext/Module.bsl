
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - см. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РаспоряженияНаОтгрузку);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		//++ Локализация
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС);
		//-- Локализация		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ТипДокумента = ТипЗнч(Документ);
		
		ИсправительныйДокумент = ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ);
		
		Если Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента")
				Или ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента")

				)
			Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И (ТипДокумента = Тип("ДокументОбъект.АктВыполненныхРабот")
				Или ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")
				Или ТипДокумента = Тип("ДокументОбъект.ОтчетКомитентуОЗакупках")
				Или ТипДокумента = Тип("ДокументОбъект.ОтгрузкаТоваровСХранения")
				Или ТипДокумента = Тип("ДокументОбъект.ПередачаТоваровХранителю")
				)
			Или ИсправительныйДокумент Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РаспоряженияНаОтгрузку);
		КонецЕсли;
		
		Если (Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
				Или ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента")
				Или ТипДокумента = Тип("ДокументОбъект.ПоступлениеТоваровОтХранителя")
				И (Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Или Не Свойства.ЭтоНовый))
			Или ИсправительныйДокумент Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		КонецЕсли;
	КонецЕсли;
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПрочаяВыручка);
	КонецЕсли;
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	
	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РаспоряженияНаОтгрузку;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;

	//++ Локализация
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	//-- Локализация
		
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийВыручкаИСебестоимостьПродаж", 
		РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам продаж.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РаспоряженияНаОтгрузку");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЗаявкиНаВозвратТоваровОтКлиентов");
	//++ Локализация
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПрослеживаемыеТоварыОтгруженныеВЕАЭС");
	//-- Локализация
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область РаспоряженияНаОтгрузку
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспоряженияНаОтгрузкуИзменение") Тогда
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Распоряжение                   КАК Заказ,
				|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
				|	ТаблицаОстатков.Серия                          КАК Серия,
				|	ТаблицаОстатков.Склад                          КАК Склад,
				|	ТаблицаОстатков.КОформлениюОборот              КАК КОформлению,
				|	ТаблицаОстатков.КПередачеОборот                КАК КПередаче
				|ИЗ
				|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(,,,
				|			(Распоряжение, Номенклатура, Характеристика, Серия, Склад) В
				|				(ВЫБРАТЬ
				|					Таблица.Распоряжение,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика,
				|					Таблица.Серия,
				|					Таблица.Склад
				|				ИЗ
				|					ДвиженияРаспоряженияНаОтгрузкуИзменение КАК Таблица)
				|	) КАК ТаблицаОстатков
				|ГДЕ
				|	ТаблицаОстатков.КОформлениюОборот < 0
				|	ИЛИ ТаблицаОстатков.КПередачеОборот < 0
				|";
			
		Иначе
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	РаспоряженияОстатки.Распоряжение                   КАК Заказ,
				|	РаспоряженияОстатки.Номенклатура                   КАК Номенклатура,
				|	РаспоряженияОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
				|	РаспоряженияОстатки.Характеристика                 КАК Характеристика,
				|	РаспоряженияОстатки.Серия                          КАК Серия,
				|	РаспоряженияОстатки.Склад                          КАК Склад,
				|	РаспоряженияОстатки.КОформлениюОстаток             КАК КОформлению,
				|	РаспоряженияОстатки.КПередачеОстаток               КАК КПередаче
				|ИЗ
				|	ВТРаспоряженияНаОтгрузкуОстатки КАК РаспоряженияОстатки
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		ВТДопустимыеОтклоненияРаспоряженияНаОтгрузку КАК ДопустимыеОтклонения
				|		ПО
				|			РаспоряженияОстатки.Распоряжение     = ДопустимыеОтклонения.Распоряжение
				|			И РаспоряженияОстатки.Номенклатура   = ДопустимыеОтклонения.Номенклатура
				|			И РаспоряженияОстатки.Характеристика = ДопустимыеОтклонения.Характеристика
				|			И РаспоряженияОстатки.Склад          = ДопустимыеОтклонения.Склад
				|			И РаспоряженияОстатки.Серия          = ДопустимыеОтклонения.Серия
				|ГДЕ
				|	РаспоряженияОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0
				|	ИЛИ РаспоряженияОстатки.КПередачеОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонениеКПередаче,0) < 0
				|";
			
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРаспоряженияНаОтгрузку");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗаявкиНаВозвратТоваровОтКлиентов
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение") Тогда
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаОстатков.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
				|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
				|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
				|ИЗ
				|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
				|			(ЗаявкаНаВозвратТоваровОтКлиента, Номенклатура, Характеристика) В
				|				(ВЫБРАТЬ
				|					Таблица.ЗаявкаНаВозвратТоваровОтКлиента,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика
				|				ИЗ
				|					ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение КАК Таблица)
				|	) КАК ТаблицаОстатков
				|ГДЕ
				|	ТаблицаОстатков.КОформлениюОстаток < 0";
			
		Иначе
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ЗаказыОстатки.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
				|	ЗаказыОстатки.Номенклатура                    КАК Номенклатура,
				|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
				|	ЗаказыОстатки.Характеристика                  КАК Характеристика,
				|	ЗаказыОстатки.КОформлениюОстаток              КАК Количество
				|ИЗ
				|	ВТЗаявкиНаВозвратТоваровОтКлиентовОстатки КАК ЗаказыОстатки
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		ВТДопустимыеОтклоненияЗаявкиНаВозвратТоваровОтКлиентов КАК ДопустимыеОтклонения
				|		ПО
				|			ЗаказыОстатки.ЗаявкаНаВозвратТоваровОтКлиента = ДопустимыеОтклонения.ЗаявкаНаВозвратТоваровОтКлиента
				|			И ЗаказыОстатки.Номенклатура                  = ДопустимыеОтклонения.Номенклатура
				|			И ЗаказыОстатки.Характеристика                = ДопустимыеОтклонения.Характеристика
				|ГДЕ
				|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
			
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЗаявкиНаВозвратТоваровОтКлиентов");
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно")
		Или ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ,"ДвиженияТоварыОрганизацийИзменениеСводно") Тогда
			
			ИмяТаблицыСводно = ?(ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно"),
				"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно",
				"ДвиженияТоварыОрганизацийИзменениеСводно");
			
			ТекстыЗапроса.Добавить(СтрЗаменить(
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Договор                         КАК Договор,
				|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
				|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
				|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
				|ПОМЕСТИТЬ ВТ_ОстатокКОформлениюПоЗаявкам
				|ИЗ
				|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
				|			(Договор, Номенклатура, Характеристика) В
				|				(ВЫБРАТЬ
				|					Таблица.Договор,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика
				|				ИЗ
				|					&ИмяТаблицыСводно КАК Таблица)
				|	) КАК ТаблицаОстатков",
				"&ИмяТаблицыСводно", ИмяТаблицыСводно));
			
			ТекстыЗапроса.Добавить(СтрЗаменить(
				"ВЫБРАТЬ
				|	Аналитики.КлючАналитики КАК Ссылка
				|ПОМЕСТИТЬ ВТ_ОтборАналитикУчетаНоменклатуры
				|ИЗ
				|	&ИмяТаблицыСводно КАК ОстаткиПоЗаявкам
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
				|	ПО ОстаткиПоЗаявкам.Номенклатура  = Аналитики.Номенклатура
				|		И ОстаткиПоЗаявкам.Характеристика = Аналитики.Характеристика
				|		И ОстаткиПоЗаявкам.Договор        = Аналитики.МестоХранения",
				"&ИмяТаблицыСводно", ИмяТаблицыСводно));
			
			ТекстыЗапроса.Добавить(
				"ВЫБРАТЬ
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Договор        КАК Договор,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
				|	ТаблицаОстатков.КоличествоОстаток                         КАК Количество
				|ПОМЕСТИТЬ ВТ_ОстатокПоТоварамОрганизаций
				|ИЗ
				|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
				|			(АналитикаУчетаНоменклатуры) В
				|				(ВЫБРАТЬ
				|					ОтборАналитик.Ссылка
				|				ИЗ
				|					ВТ_ОтборАналитикУчетаНоменклатуры КАК ОтборАналитик)
				|	) КАК ТаблицаОстатков");
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Договор                       КАК Договор,
				|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                КАК Характеристика,
				|	СУММА(ТаблицаОстатков.Количество)             КАК Количество
				|ИЗ
				|	(
				|	ВЫБРАТЬ
				|		ТоварыОрганизаций.Договор                       КАК Договор,
				|		ТоварыОрганизаций.Номенклатура                  КАК Номенклатура,
				|		ТоварыОрганизаций.Характеристика                КАК Характеристика,
				|		ТоварыОрганизаций.Количество                    КАК Количество
				|	ИЗ
				|		ВТ_ОстатокПоТоварамОрганизаций КАК ТоварыОрганизаций
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|
				|	ВЫБРАТЬ
				|		ЗаявкиНаВозврат.Договор                       КАК Договор,
				|		ЗаявкиНаВозврат.Номенклатура                  КАК Номенклатура,
				|		ЗаявкиНаВозврат.Характеристика                КАК Характеристика,
				|		-ЗаявкиНаВозврат.Количество                   КАК Количество
				|	ИЗ
				|		ВТ_ОстатокКОформлениюПоЗаявкам КАК ЗаявкиНаВозврат
				|	) КАК ТаблицаОстатков
				|
				|СГРУППИРОВАТЬ ПО
				|	Договор,
				|	Номенклатура,
				|	Характеристика
				|
				|ИМЕЮЩИЕ
				|	СУММА(ТаблицаОстатков.Количество) < 0";
			
			ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиВозвратТоваровОтХранителей");
			
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область РаспоряженияНаОтгрузку
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспоряженияНаОтгрузкуИзменение") Тогда
		
		ШаблонСообщенияСоСкладом = НСтр("ru = 'Номенклатура %1, склад %2
			|Оформлено больше, чем указано в распоряжении %3, на %4 %5'");
			
		ШаблонСообщенияБезСклада = НСтр("ru = 'Номенклатура %1
			|Оформлено больше, чем указано в распоряжении %3, на %4 %5'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРаспоряженияНаОтгрузку Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			Если ЗначениеЗаполнено(СтрокаОшибки.КОформлению) Тогда
				Количество = -СтрокаОшибки.КОформлению;
			Иначе
				Количество = -СтрокаОшибки.КПередаче;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.Склад) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСоСкладом, ПредставлениеНоменклатуры, СтрокаОшибки.Склад,
					СтрокаОшибки.Заказ, Количество, СтрокаОшибки.ЕдиницаИзмерения);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияБезСклада, ПредставлениеНоменклатуры,,
					СтрокаОшибки.Заказ, Количество, СтрокаОшибки.ЕдиницаИзмерения);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗаявкиНаВозвратТоваровОтКлиентов
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1
			|Возвращено больше, чем указано в заявке на возврат, на %2 %3'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЗаявкиНаВозвратТоваровОтКлиентов Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры,
				-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменениеСводно")
		Или ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ,"ДвиженияТоварыОрганизацийИзменениеСводно") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1
			|Возвращено больше, чем указано по всем оформленным заявкам на возврат и поступлениям товаров от хранителя по договору %2, на %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиВозвратТоваровОтХранителей Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры,
				СтрокаОшибки.Договор, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ОценкаРентабельностиПродаж

Процедура ДополнитьТекстыЗапросовОтчетРентабельностьПродажДаннымиДокументов(ТекстДополненияДанныеДокумента, ТекстДополненияСводныйРасчет) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам")
		И ПравоДоступа("Чтение", Метаданные.Документы.КоммерческоеПредложениеКлиенту) Тогда
		
		ТекстДополненияДанныеДокумента = "
			|ОБЪЕДИНИТЬ ВСЕ" + "
			|
			|ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка,
			|	ТаблицаДокументов.Дата,
			|	ТаблицаДокументов.Валюта,
			|	КоммерческоеПредложениеКлиентуТовары.НомерСтроки,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура,
			|	КоммерческоеПредложениеКлиентуТовары.Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
			|	КоммерческоеПредложениеКлиентуТовары.ЕдиницаИзмерения,
			|	КоммерческоеПредложениеКлиентуТовары.ВидЦены,
			|	КоммерческоеПредложениеКлиентуТовары.Цена,
			|	КоммерческоеПредложениеКлиентуТовары.Сумма,
			|	КоммерческоеПредложениеКлиентуТовары.Количество,
			|	КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СтавкаНДС,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаНДС
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту КАК ТаблицаДокументов
			|		ПО ТаблицаДокументов.Ссылка = &Документ
			|		И КоммерческоеПредложениеКлиентуТовары.Ссылка = ТаблицаДокументов.Ссылка
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.КоммерческоеПредложениеКлиенту)";
			
		ТекстДополненияСводныйРасчет = "
			|ОБЪЕДИНИТЬ ВСЕ" + "
			|
			|ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка,
			|	ТаблицаДокументов.Дата,
			|	ТаблицаДокументов.Валюта,
			|	КоммерческоеПредложениеКлиентуТовары.НомерСтроки,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура,
			|	КоммерческоеПредложениеКлиентуТовары.Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка),
			|	КоммерческоеПредложениеКлиентуТовары.ЕдиницаИзмерения,
			|	КоммерческоеПредложениеКлиентуТовары.ВидЦены,
			|	КоммерческоеПредложениеКлиентуТовары.Цена,
			|	КоммерческоеПредложениеКлиентуТовары.Сумма,
			|	КоммерческоеПредложениеКлиентуТовары.Количество,
			|	КоммерческоеПредложениеКлиентуТовары.ПроцентАвтоматическойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СтавкаНДС,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаНДС
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту КАК ТаблицаДокументов
			|		ПО ТаблицаДокументов.Ссылка = &Документ
			|		И КоммерческоеПредложениеКлиентуТовары.Ссылка = ТаблицаДокументов.Ссылка
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(&Документ) = ТИП(Документ.КоммерческоеПредложениеКлиенту)";
		
	КонецЕсли;
	
КонецПроцедуры

// Настройка параметров отбора по контекту вызова.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения.
// 	КомпоновщикНастроекФормы - КомпоновщикНастроекКомпоновкиДанных.
//
Процедура ПриНастройкеПараметровОтбораПоКонтекстуВызова(Форма, КомпоновщикНастроекФормы) Экспорт
	
	ЗначениеПараметраКоманды = Неопределено;
	Если Форма.Параметры.Свойство("ПараметрКоманды",ЗначениеПараметраКоманды) 
		И ТипЗнч(ЗначениеПараметраКоманды) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеПараметраКоманды,"ХозяйственнаяОперация") = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		
		КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы.Настройки, "ИзменениеОбъемаРучныхСкидок");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказКлиента

Процедура ПриОбработкеЗаполненияЗаказаКлиента(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ЗаполнитьЗаказаКлиентаНаОснованииКоммерческогоПредложенияКлиенту(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область ПомощникПродаж

Процедура ПриИнициализацииПомощникаПродаж(Объект) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам") Тогда
		Объект.СоздаватьКоммерческоеПредложение = Истина;
		Объект.ПечататьКоммерческоеПредложение = Истина;
	КонецЕсли;
	
	Объект.СтатусКоммерческогоПредложения = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
	
КонецПроцедуры

// Инициализация вариантов оформления документов продажи.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма.
//
Процедура ПриИнициализацииВариантовОформленияДокументовПродажи(Форма) Экспорт
	
	ИспользоватьКоммерческиеПредложенияКлиентам = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	
	Если ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		Форма.Элементы.ВариантОформленияДокументов.СписокВыбора.Вставить(0, Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеВариантаОформленияДокументовПродажиПоУмолчанию(Форма) Экспорт
	
	ИспользоватьКоммерческиеПредложенияКлиентам = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	
	Если Форма.Объект.СоздаватьКоммерческоеПредложение
		И ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		
		Форма.Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииДокументовПомощникПродаж(Форма, МассивНайденныхДокументов, Отказ) Экспорт
	
	Если НЕ Отказ
		И Форма.Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
			
			СоздатьДокументКоммерческоеПредложениеКлиентуПомощникПродаж(Форма, МассивНайденныхДокументов, Отказ);
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОпределенииТипаДокументаСоздаваемогоДокументаПомощникПродаж(Форма, ПустаяСсылкаДокумента) Экспорт
	
	Если Форма.Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		ПустаяСсылкаДокумента = Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДоступностьДополнительныхРеквизитов(Форма) Экспорт
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка());
	
	Если НаборСвойств.Количество() > 0 Тогда
		ДополнительныеРеквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств[0].Набор, "ДополнительныеРеквизиты"); // РезультатЗапроса
		Если ДополнительныеРеквизиты <> Неопределено
				И Не ДополнительныеРеквизиты.Пустой() > 0 Тогда
			Форма.ЕстьДопРеквизитыКомПредложения = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииИмениТаблицыЗагрузкиДополнительныхРеквизитов(ВыбранноеЗначение, ИмяТаблицы) Экспорт
	
	Если ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.КоммерческоеПредложениеКлиенту" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыКоммерческогоПредложения";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПомощникПродаж

Функция ЗаблокироватьДокумент(ДокументСсылка) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументСсылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиСозданныйДокументПоТипу(Форма, ТипДокумента, МассивНайденныхДокументов) Экспорт
	
	Для Каждого ТекСтрока Из Форма.Объект.Документы Цикл
		Если ТипЗнч(ТекСтрока.Документ) = ТипДокумента
			И МассивНайденныхДокументов.Найти(ТекСтрока.Документ) = Неопределено Тогда
			
			Возврат ТекСтрока;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
// 	Форма                     - ФормаКлиентскогоПриложения.
// 	МенеджерДокумента         - ДокументМенеджер.
// 	ТипДокумента              - Тип.
// 	МассивНайденныхДокументов - Массив Из ДокументСсылка.
// 	СозданНовыйДокумент       - Булево.
// 	СтрокаТаблицы             - СтрокаТаблицыЗначений.
// Возвращаемое значение:
// 	ДокументОбъект.
//
Функция НайтиСоздатьДокумент(Форма, МенеджерДокумента, ТипДокумента, МассивНайденныхДокументов, СозданНовыйДокумент, СтрокаТаблицы = Неопределено) Экспорт
	
	Если Форма.ДокументыСформированы Тогда
		СтрокаТаблицы = НайтиСозданныйДокументПоТипу(Форма, ТипДокумента, МассивНайденныхДокументов);
		
		Если СтрокаТаблицы <> Неопределено
			И ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
			
			ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
			Если НЕ ДокументОбъект = Неопределено И ДокументОбъект.ПометкаУдаления Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			МассивНайденныхДокументов.Добавить(СтрокаТаблицы.Документ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		СозданНовыйДокумент = Истина;
		
		ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуСформированныхДокументов(Форма, ДокументСсылка, Порядок, Состояние = 0, Печать = Ложь) Экспорт
	
	ТаблицаДокументов = Форма.Объект.Документы; // ТабличнаяЧасть 
	
	НоваяСтрока = ТаблицаДокументов.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументСсылка);
	
	НоваяСтрока.Документ  = ДокументСсылка;
	НоваяСтрока.Состояние = Состояние;
	НоваяСтрока.Порядок   = Порядок;
	НоваяСтрока.Печать    = Печать;
	
КонецПроцедуры

Процедура ОбновитьСтрокуВТаблицуСформированныхДокументов(СтрокаТаблицы, ДокументСсылка, Порядок, Состояние = 0) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДокументСсылка);
	
	СтрокаТаблицы.Состояние = Состояние;
	СтрокаТаблицы.Порядок   = Порядок;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаказКлиента

// Параметры:
// 	ДокументОбъект - ДокументОбъект.ЗаказКлиента.
// 	Основание - ДокументСсылка.КоммерческоеПредложениеКлиенту.
//
Процедура ЗаполнитьЗаказаКлиентаНаОснованииКоммерческогоПредложенияКлиенту(ДокументОбъект, Знач Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК ДокументОснование,
	|	КоммерческоеПредложениеКлиенту.Клиент КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.Контрагент КАК Контрагент,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК СуммаДокумента,
	|	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.Налогообложение КАК НалогообложениеНДС,
	|	КоммерческоеПредложениеКлиенту.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	КоммерческоеПредложениеКлиенту.Статус КАК СтатусДокумента,
	|	КоммерческоеПредложениеКлиенту.КартаЛояльности КАК КартаЛояльности,
	|	НЕ КоммерческоеПредложениеКлиенту.Проведен       КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческоеПредложениеКлиентуТовары.НомерСтроки                          КАК НомерСтроки,
	|	КоммерческоеПредложениеКлиентуТовары.КлючСвязи                             КАК КлючСвязи,
	|	КоммерческоеПредложениеКлиентуТовары.Номенклатура                          КАК Номенклатура,
	|	КоммерческоеПредложениеКлиентуТовары.Номенклатура.НаименованиеПолное       КАК НаименованиеНоменклатурыПолное,
	|	КоммерческоеПредложениеКлиентуТовары.Характеристика                        КАК Характеристика,
	|	КоммерческоеПредложениеКлиентуТовары.Характеристика.НаименованиеПолное     КАК НаименованиеХарактеристикиПолное,
	|	КоммерческоеПредложениеКлиентуТовары.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	|	КоммерческоеПредложениеКлиентуТовары.ЕдиницаИзмерения                      КАК Упаковка,
	|	КоммерческоеПредложениеКлиентуТовары.Количество                            КАК КоличествоУпаковок,
	|	КоммерческоеПредложениеКлиентуТовары.Количество * ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиентуТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ                                                     КАК Количество,
	|	КоммерческоеПредложениеКлиентуТовары.ВидЦены              КАК ВидЦены,
	|	КоммерческоеПредложениеКлиентуТовары.Цена                 КАК Цена,
	|	КоммерческоеПредложениеКлиентуТовары.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
	|	КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки    КАК СуммаРучнойСкидки,
	|	КоммерческоеПредложениеКлиентуТовары.СтавкаНДС            КАК СтавкаНДС,
	|	КоммерческоеПредложениеКлиентуТовары.СуммаНДС             КАК СуммаНДС,
	|	КоммерческоеПредложениеКлиентуТовары.СуммаСНДС            КАК СуммаСНДС,
	|	КоммерческоеПредложениеКлиентуТовары.Сумма                КАК Сумма,
	|	КоммерческоеПредложениеКлиентуТовары.НоменклатураНабора   КАК НоменклатураНабора,
	|	КоммерческоеПредложениеКлиентуТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиентуТовары.Ссылка.ВариантУказанияСрокаПоставки = 1
	|			ТОГДА КоммерческоеПредложениеКлиентуТовары.СрокПоставки
	|		ИНАЧЕ РАЗНОСТЬДАТ(ВЫРАЗИТЬ(КоммерческоеПредложениеКлиентуТовары.СрокПоставки КАК ДАТА), &ТекущаяДата, ДЕНЬ)
	|	КОНЕЦ                                                     КАК СрокПоставки
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	|ГДЕ
	|	КоммерческоеПредложениеКлиентуТовары.Ссылка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческоеПредложениеКлиентуСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	КоммерческоеПредложениеКлиентуСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	КоммерческоеПредложениеКлиентуСкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.СкидкиНаценки КАК КоммерческоеПредложениеКлиентуСкидкиНаценки
	|ГДЕ
	|	КоммерческоеПредложениеКлиентуСкидкиНаценки.Ссылка = &Основание";

	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КоммерческоеПредложениеКлиентуТовары.ЕдиницаИзмерения",
			"КоммерческоеПредложениеКлиентуТовары.Номенклатура"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ДокументОснование,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаШапка);
	ДокументОбъект.НалогообложениеНДС = 
		КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(ВыборкаШапка.НалогообложениеНДС);
	ДокументОбъект.ХозяйственнаяОперация = 
		КоммерческиеПредложенияДокументыКлиентСерверУТ.ХозяйственнаяОперацияДокументаКоммерческоеПредложениеКлиенту(ВыборкаШапка.ХозяйственнаяОперация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ЗаполнитьСоглашениеЗаказаКлиентаПоСтатистике(ДокументОбъект);
		Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			
			ПараметрыОтбора = Новый Структура;
			МассивОпераций = Новый Массив;
			МассивОпераций.Добавить(ДокументОбъект.ХозяйственнаяОперация);
			ПараметрыОтбора.Вставить("ХозяйственныеОперации",             МассивОпераций);
			ПараметрыОтбора.Вставить("ИспользоватьПервоеУдовлетворяющее", Истина);
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(ДокументОбъект.Партнер, ПараметрыОтбора);
			
			Если ТипЗнч(УсловияПродажПоУмолчанию) = Тип("Структура")
				И УсловияПродажПоУмолчанию.Свойство("Соглашение") Тогда
				ДокументОбъект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ДокументОбъект.Соглашение, Истина);
			ДокументОбъект.ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаТовары = РезультатЗапроса[1].Выгрузить();
	ТаблицаТовары.Сортировать("НомерСтроки Возр");
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			НоваяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ТекСтрока.НаименованиеНоменклатурыПолное, 
				ТекСтрока.НаименованиеХарактеристикиПолное);
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект, ДокументОбъект.ХозяйственнаяОперация, ДокументОбъект.Валюта);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ДокументОбъект.Договор, ДокументОбъект.БанковскийСчет, ДокументОбъект.БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		ДокументОбъект.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ГруппаФинансовогоУчета");
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
	
	ДокументОбъект.СкидкиНаценки.Загрузить(РезультатЗапроса[2].Выгрузить());
	СкидкиНаценкиСервер.Рассчитать(ДокументОбъект, СтруктураПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьСоглашениеЗаказаКлиентаПоСтатистике(Объект)
	
	ОписаниеРеквизитов = Новый Структура;
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Валюта, ЦенаВключаетНДС";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Соглашение", Параметры);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(Объект, Неопределено, ОписаниеРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ПомощникПродаж

// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//  МассивНайденныхДокументов - Массив Из ДокументОбъект.
//
Функция СоздатьДокументКоммерческоеПредложениеКлиентуПомощникПродаж(Форма, МассивНайденныхДокументов, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = Продажи.НайтиСоздатьДокумент(Форма,
		                                          Документы.КоммерческоеПредложениеКлиенту,
		                                          Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту"),
		                                          МассивНайденныхДокументов,
		                                          СозданНовыйДокумент,
		                                          СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Форма.Объект, , "Дата");
	ДокументОбъект.Клиент                              = Форма.Объект.Партнер;
	ДокументОбъект.ВариантУказанияСрокаПоставки        = Перечисления.ВариантыСроковПоставкиКоммерческихПредложений.НеУказывается;
	ДокументОбъект.ПрочаяДополнительнаяИнформацияТекст = Форма.Объект.ДополнительнаяИнформация;
	ДокументОбъект.Налогообложение                     = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеКоммерческихПредложенийПоНалогообложениюНДС(Форма.Объект.НалогообложениеНДС);
	ДокументОбъект.Статус                              = Форма.Объект.СтатусКоммерческогоПредложения;
	ДокументОбъект.УсловияДоставкиТекст                = Форма.Объект.ДополнительнаяИнформацияПоДоставке;
	ДокументОбъект.ХозяйственнаяОперация               = КоммерческиеПредложенияДокументыКлиентСерверУТ.ХозяйственнаяОперацияДокументаКоммерческоеПредложениеКлиенту(Форма.Объект.ХозяйственнаяОперация);
	ДокументОбъект.МожетВыкупатьсяЧастично             = Не Форма.Объект.НеМожетВыкупатьсяЧастично;
	ДокументОбъект.Статус                              = Форма.Объект.СтатусКоммерческогоПредложения;
	
	Если Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Тогда
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию;
	Иначе
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ВидыОперацийКоммерческихПредложений.ЗакупкаУПоставщика;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		НоваяСтрока.Количество      = СтрокаТовары.КоличествоУпаковок;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТовары.Упаковка;
		
	КонецЦикла;
	ДокументОбъект.Товары.Загрузить(Форма.Объект.Товары.Выгрузить());
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Форма.Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Форма.Объект.ДополнительныеРеквизитыКоммерческогоПредложения.Выгрузить());
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			Продажи.ДобавитьСтрокуВТаблицуСформированныхДокументов(
				Форма,
				ДокументОбъект.Ссылка,
				1,
				,
				Ложь);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			Продажи.ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.Ссылка,
				1);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

