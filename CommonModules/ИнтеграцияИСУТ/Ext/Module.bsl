// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

// Возвращяет список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
// 
// Параметры:
// 	Товары - ДанныеФормыКоллекция - ТЧ формы документа.
// Возвращаемое значение:
// 	Массив Из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции табличной части.
Функция ВидыПродукцииВТоварах(Товары) Экспорт
	
	Результат = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)
	|	И Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|	И НЕ Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ОсобенностьУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Выборка.ОсобенностьУчета);
		
		Если ВидПродукции <> Неопределено Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
					Результат.Добавить(ВидПродукции);
				КонецЕсли;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
					И ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
				// Работает ГИСМ, переход в ИСМП не выполнен
			Иначе
				Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции().Найти(ВидПродукции)<>Неопределено Тогда
					Результат.Добавить(ВидПродукции);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
//Параметры:
//   Источники - ДокументСсылка, Массив Из ДокументСсылка - объекты для проверки (ссылка или ссылки одного типа).
//   Отказ  - Булево - Отказ из вызывающего метода.
//   НаДату - Дата - дата для определения обязательности маркировки.
//          - Неопределено - на текущую дату сеанса.
//   СообщатьОбОшибках - Булево - Сообщать об ошибках.
Процедура ПроверитьЗаполнениеАкцизныхМарокПоСсылкам(Источники, Отказ, НаДату = Неопределено, СообщатьОбОшибках = Истина) Экспорт
	
	Если ТипЗнч(Источники) <> Тип("Массив") Тогда
		ИсточникиМассив = Новый Массив;
		ИсточникиМассив.Добавить(Источники);
	Иначе
		ИсточникиМассив = ОбщегоНазначения.СкопироватьРекурсивно(Источники);
	КонецЕсли;
	
	Если ИсточникиМассив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникиПоОписанию = Новый ТаблицаЗначений();
	ИсточникиПоОписанию.Колонки.Добавить("ИменаРеквизитов",         ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ИсточникиПоОписанию.Колонки.Добавить("ИмяТаблицыАкцизныеМарки", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ИсточникиПоОписанию.Колонки.Добавить("ЕстьТабличнаяЧастьСерий", Новый ОписаниеТипов("Булево"));
	ИсточникиПоОписанию.Колонки.Добавить("Источники",               Новый ОписаниеТипов("Массив"));
	
	Для Каждого Источник Из ИсточникиМассив Цикл
		
		МетаданныеИсточника            = Источник.Метаданные();
		Менеджер                       = Документы[МетаданныеИсточника.Имя];
		ИмененаПараметровУказанияСерий = Менеджер.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
		ЕстьТабличнаяЧастьСерий        = (МетаданныеИсточника.ТабличныеЧасти.Найти("Серии") <> Неопределено);
		
		ИмяТаблицыАкцизныеМарки  = "АкцизныеМарки";
		ПолеТаблицыАкцизныеМарки = "АкцизнаяМарка";
		Если НЕ ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта(
			ПолеТаблицыАкцизныеМарки, МетаданныеИсточника, ИмяТаблицыАкцизныеМарки) Тогда
			ИмяТаблицыАкцизныеМарки  = "ШтрихкодыУпаковок";
			ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
		КонецЕсли;
		
		Реквизиты = СтрРазделить(ИмененаПараметровУказанияСерий, ",", Ложь);
		Реквизиты.Добавить("Ссылка");
		Реквизиты.Добавить("Товары");
		Реквизиты.Добавить(ИмяТаблицыАкцизныеМарки);
		Если ЕстьТабличнаяЧастьСерий Тогда
			Реквизиты.Добавить("Серии");
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(
			"ИменаРеквизитов,ИмяТаблицыАкцизныеМарки,ЕстьТабличнаяЧастьСерий",
			СтрСоединить(Реквизиты, ","),
			ИмяТаблицыАкцизныеМарки,
			ЕстьТабличнаяЧастьСерий);
		
		ПоискСтрок = ИсточникиПоОписанию.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() = 0 Тогда
			СтрокаИсточникаПоОписанию = ИсточникиПоОписанию.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсточникаПоОписанию, СтруктураПоиска);
		Иначе
			СтрокаИсточникаПоОписанию = ПоискСтрок[0];
		КонецЕсли;
		
		СтрокаИсточникаПоОписанию.Источники.Добавить(Источник);
		
	КонецЦикла;
	
	Для Каждого СтрокаИсточникаПоОписанию Из ИсточникиПоОписанию Цикл
		
		ИсточникСоответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СтрокаИсточникаПоОписанию.Источники, СтрокаИсточникаПоОписанию.ИменаРеквизитов);
		Для Каждого СтрокаИсточник Из ИсточникСоответствие Цикл
			
			ДанныеИсточника = СтрокаИсточник.Значение;
			
			ДанныеИсточника.Товары = ДанныеИсточника.Товары.Выгрузить();
			ДанныеИсточника[СтрокаИсточникаПоОписанию.ИмяТаблицыАкцизныеМарки] = ДанныеИсточника[СтрокаИсточникаПоОписанию.ИмяТаблицыАкцизныеМарки].Выгрузить();
			
			Если СтрокаИсточникаПоОписанию.ЕстьТабличнаяЧастьСерий Тогда
				ДанныеИсточника.Серии = ДанныеИсточника.Серии.Выгрузить();
			Иначе
				ДанныеИсточника.Вставить("Серии", Неопределено);
			КонецЕсли;
			
			//@skip-check query-in-loop
			ПроверитьЗаполнениеАкцизныхМарок(ДанныеИсточника, Отказ, НаДату,, СообщатьОбОшибках);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
//Параметры:
//   Объект - ДокументОбъект - форма документа для проверки.
//   Отказ  - Булево - Отказ из вызывающего метода.
//   НаДату - Дата - дата для определения обязательности маркировки.
//          - Неопределено - на текущую дату сеанса.
//   РеквизитыОбъекта  - Неопределено - в этом случае используются значения по-умолчанию
//					   - Структура:
//     *ИмяТаблицыТовары - Строка - (необязательный) имя табличной части объекта с товарным составом
//     *ИмяПоляТовары - Строка - (необязательный) имя поля номенклатуры в табличной части
//	   *ИмяПараметраУказанияСерий - Строка - необязательный ключ
//   СообщатьОбОшибках - Булево - Сообщать об ошибках.
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ, НаДату = Неопределено, РеквизитыОбъекта = Неопределено, СообщатьОбОшибках = Истина) Экспорт
	
	Ошибки = Неопределено;
	
	ИмяТаблицыАкцизныеМарки = "АкцизныеМарки";
	ПолеТаблицыАкцизныеМарки = "АкцизнаяМарка";
	
	ИмяТаблицыТовары = "Товары";
	ИмяПоляТовары = "Номенклатура";
	ИмяПараметраУказанияСерий = "";
	
	Если ТипЗнч(РеквизитыОбъекта) = ТИп("Структура") Тогда
		Если РеквизитыОбъекта.Свойство("ИмяТаблицыТовары") Тогда
			ИмяТаблицыТовары = РеквизитыОбъекта.ИмяТаблицыТовары;
		КонецЕсли; 
		Если РеквизитыОбъекта.Свойство("ИмяПоляТовары") Тогда
			ИмяПоляТовары = РеквизитыОбъекта.ИмяПоляТовары;
		КонецЕсли; 
		Если РеквизитыОбъекта.Свойство("ИмяПараметраУказанияСерий") Тогда
			ИмяПараметраУказанияСерий = РеквизитыОбъекта.ИмяПараметраУказанияСерий;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта(ПолеТаблицыАкцизныеМарки, Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		ИмяТаблицыАкцизныеМарки = "ШтрихкодыУпаковок";
		ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
	КонецЕсли;
	
	ОсобенностьУчета = Новый Массив;
	Если НаДату = Неопределено Тогда
		Для Каждого ВидПродукции Из ОбщегоНазначенияИСМП.ВидыПродукцииОбязательнойМаркировки() Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	Иначе
		Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(НаДату, Ложь) Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОсобенностьУчета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросМаркируемыхТоваров = Новый Запрос;
	Если ТипЗнч(Объект[ИмяТаблицыТовары]) = Тип("ТаблицаЗначений") Тогда
		ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", Объект[ИмяТаблицыТовары].ВыгрузитьКолонку(ИмяПоляТовары));
	Иначе 
		ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", Объект[ИмяТаблицыТовары].Выгрузить().ВыгрузитьКолонку(ИмяПоляТовары));
	КонецЕсли;
	ЗапросМаркируемыхТоваров.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	ЗапросМаркируемыхТоваров.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)
	|	И Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)";
	ПроверяемыеТовары = ЗапросМаркируемыхТоваров.Выполнить().Выгрузить();
	ПроверяемыеТовары.Индексы.Добавить("Ссылка");
	
	ДанныеЧастичногоВыбытияПоШтрихкодам = Новый Соответствие;
	
	Если ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("ЧастичноеВыбытиеКоличество", Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицыАкцизныеМарки] Цикл 
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЧастичноеВыбытиеКоличество) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = ДанныеЧастичногоВыбытияПоШтрихкодам.Получить(СтрокаТаблицы[ПолеТаблицыАкцизныеМарки]);
			Если НовыйЭлемент = Неопределено Тогда
				НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТаблицы);
				НовыйЭлемент.ШтрихкодУпаковки = СтрокаТаблицы[ПолеТаблицыАкцизныеМарки];
			Иначе 
				НовыйЭлемент.ЧастичноеВыбытиеКоличество = НовыйЭлемент.ЧастичноеВыбытиеКоличество + СтрокаТаблицы.ЧастичноеВыбытиеКоличество;
			КонецЕсли;
			ДанныеЧастичногоВыбытияПоШтрихкодам.Вставить(НовыйЭлемент.ШтрихкодУпаковки, НовыйЭлемент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(ТипЗнч(Объект.Ссылка));
	ТипПоСсылкеОбъекта = Новый ОписаниеТипов(Массив);
	
	ТаблицаУпаковок = Неопределено;
	Если ТипЗнч(Объект[ИмяТаблицыАкцизныеМарки]) = Тип("ТаблицаЗначений") Тогда
		ТаблицаУпаковок = Объект[ИмяТаблицыАкцизныеМарки].Скопировать(); // ТаблицаЗначений
	Иначе
		ТаблицаУпаковок = Объект[ИмяТаблицыАкцизныеМарки].Выгрузить();// ТаблицаЗначений
	КонецЕсли;
	ТаблицаУпаковок.Колонки[ПолеТаблицыАкцизныеМарки].Имя = "Штрихкод";
	
	Если ТаблицаУпаковок.Колонки.Найти("Ссылка") = Неопределено Тогда
		ТаблицаУпаковок.Колонки.Добавить("Ссылка", ТипПоСсылкеОбъекта);
		ТаблицаУпаковок.ЗаполнитьЗначения(Объект.Ссылка, "Ссылка");
	КонецЕсли;
	
	ТаблицаТоваров = Неопределено;
	Если ТипЗнч(Объект[ИмяТаблицыТовары]) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = Объект[ИмяТаблицыТовары].Скопировать(); // ТаблицаЗначений
	Иначе
		ТаблицаТоваров = Объект[ИмяТаблицыТовары].Выгрузить(); // ТаблицаЗначений
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("Ссылка") = Неопределено Тогда
		ТаблицаТоваров.Колонки.Добавить("Ссылка", ТипПоСсылкеОбъекта);
		ТаблицаТоваров.ЗаполнитьЗначения(Объект.Ссылка, "Ссылка");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(Объект.Ссылка);
		ЗаполнитьЗначенияСвойств(ДанныеШапки, Объект);
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки);
	Иначе
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Объект.Ссылка);
	КонецЕсли;
	
	МаркированныеТовары = ЭлектронноеВзаимодействиеИСМП.СодержимоеИКодыОСУ(
		ТаблицаУпаковок, ТаблицаТоваров, ПараметрыСканирования);
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика");
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Если ДанныеЧастичногоВыбытияПоШтрихкодам.Количество() Тогда
		
		Для Каждого СтрокаТаблицы Из МаркированныеТовары Цикл
			
			ДанныеЧастичногоВыбытия = ДанныеЧастичногоВыбытияПоШтрихкодам[СтрокаТаблицы.Штрихкод];
			Если ДанныеЧастичногоВыбытия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Количество = ДанныеЧастичногоВыбытия.ЧастичноеВыбытиеКоличество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыУказанияСерий = Документы[Объект.Ссылка.Метаданные().Имя].ПараметрыУказанияСерий(Объект);
	Если НЕ ПустаяСтрока(ИмяПараметраУказанияСерий) И ПараметрыУказанияСерий.Свойство(ИмяПараметраУказанияСерий) Тогда
		ПараметрыУказанияСерий = ПараметрыУказанияСерий[ИмяПараметраУказанияСерий];
	КонецЕсли; 
	
	Для Каждого СтрокаТовары Из Объект[ИмяТаблицыТовары] Цикл
		
		ПроверяемСтроку = ПроверяемыеТовары.Найти(СтрокаТовары[ИмяПоляТовары],"Ссылка");
		Если ПроверяемСтроку = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьСерииВТаблицеТовары =
			Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий)
			И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий);
		ПроверитьСерииВТаблицеСерии =
			НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий);
		
		ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(ПроверитьСерииВТаблицеТовары);
		
		ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
		
		КоличествоМарок = 0;
		СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолям);
		Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл
			КоличествоМарок = КоличествоМарок + СтрокаМарка.Количество;
			Если ЗначениеЗаполнено(СтрокаМарка.ТекстОшибкиИС) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					СтрШаблон("Объект.%1[%%1].Номенклатура", ИмяТаблицыТовары),
					СтрокаМарка.ТекстОшибкиИС,
					"",
					СтрокаТовары.НомерСтроки-1);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоЕдиницТоваров = 0;
		Если ПроверитьСерииВТаблицеСерии Тогда
			СтрокиТоваров = Объект.Серии.НайтиСтроки(ОтборПоПолям);
		Иначе
			СтрокиТоваров = Объект[ИмяТаблицыТовары].НайтиСтроки(ОтборПоПолям);
		КонецЕсли;
		Для Каждого СтрокаТовар Из СтрокиТоваров Цикл 
			КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
		КонецЦикла;
		
		Если ПроверитьСерииВТаблицеТовары
			И КоличествоМарок <> КоличествоЕдиницТоваров Тогда
			
			СписатьКодовАвтоОСУ = КоличествоЕдиницТоваров - КоличествоМарок;
			
			ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Ложь);
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
			
			СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолям);
			Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл
				Если СтрокаМарка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СписатьКодовАвтоОСУ = 0 Тогда
					Прервать;
				КонецЕсли;
				КоличествоСписать = СписатьКодовАвтоОСУ;
				Если КоличествоСписать > СтрокаМарка.Количество Тогда
					КоличествоСписать = СтрокаМарка.Количество;
				КонецЕсли;
				КоличествоМарок = КоличествоМарок + КоличествоСписать;
				СтрокаМарка.Количество = СтрокаМарка.Количество - КоличествоСписать;
				СписатьКодовАвтоОСУ = СписатьКодовАвтоОСУ - КоличествоСписать;
				Если ЗначениеЗаполнено(СтрокаМарка.ТекстОшибкиИС) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						СтрШаблон("Объект.%1[%%1].Номенклатура",ИмяТаблицыТовары),
						СтрокаМарка.ТекстОшибкиИС,
						"",
						СтрокаТовары.НомерСтроки-1);
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
		Если КоличествоМарок <> КоличествоЕдиницТоваров Тогда
			
			Если ПроверитьСерииВТаблицеТовары Или ПроверитьСерииВТаблицеСерии Тогда
				ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика,, СтрокаТовары.Серия);
			Иначе
				ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика);
			КонецЕсли;
			
			Шаблон = НСтр("ru = 'Товара ""%1"" по документу - %2 %4, по кодам маркировки - %3 %4.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				ПредставлениеНоменклатуры,
				КоличествоЕдиницТоваров,
				КоличествоМарок,
				ПроверяемСтроку.ЕдиницаИзмерения);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				СтрШаблон("Объект.%1[%%1].Номенклатура",ИмяТаблицыТовары),
				ТекстОшибки,
				"",
				СтрокаТовары.НомерСтроки-1);

		КонецЕсли;
		
		Если ПроверитьСерииВТаблицеСерии
			И КоличествоМарок <> КоличествоЕдиницТоваров Тогда
			ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина);
			Для Каждого СтрокаТовар Из СтрокиТоваров Цикл
				ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовар);
				СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолям);
				КоличествоМарок = 0;
				Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл
					КоличествоМарок = КоличествоМарок + СтрокаМарка.Количество;
				КонецЦикла;
				КоличествоЕдиницТоваров = 0;
				Для Каждого СтрокаПоСерии Из СтрокиТоваров Цикл
					Если СтрокаПоСерии.Серия = СтрокаТовар.Серия Тогда
						КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоМарок <> КоличествоЕдиницТоваров Тогда
					ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовар.Номенклатура, СтрокаТовар.Характеристика,, СтрокаТовар.Серия);
					Шаблон = НСтр("ru = 'Для маркировки ""%1"" по серии должно быть указано единиц - %2, а указано - %3.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						ПредставлениеНоменклатуры,
						КоличествоЕдиницТоваров,
						КоличествоМарок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Объект.Товары[%1].Номенклатура",
						ТекстОшибки,
						"",
						СтрокаТовары.НомерСтроки-1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщатьОбОшибках Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	ИначеЕсли Ошибки <> Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность ввода на основании по реквизитам документа (из запроса)
// 
// Параметры:
//  РеквизитыДокумента - ВыборкаИзРезультатаЗапроса - Реквизиты документа
Процедура ПроверитьВозможностьВводаНаОсновании(РеквизитыДокумента) Экспорт
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиВозможностиВводаНаОсновании();
	ЗаполнитьЗначенияСвойств(ПараметрыПроверки,РеквизитыДокумента);
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСПараметрами(
		РеквизитыДокумента.ДокументОснование, ПараметрыПроверки);
	
КонецПроцедуры

// Штрихкоды упаковок.
// 
// Параметры:
//  Источник - ДокументОбъект - Источник
// 
// Возвращаемое значение:
//  см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ
Функция ШтрихкодыУпаковок(Источник) Экспорт
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	Для Каждого СтрокаТЧ Из Источник.АкцизныеМарки Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ.АкцизнаяМарка;
		НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ.ШтрихкодУпаковки;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
		|	ИсходныеДанные.Справка2                     КАК Справка2,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Типизируем колонки таблицы МаркированныеТовары для передачи в запрос
// и добавляем колонку НомерСтроки.
// 
// Параметры:
//  ТаблицаМаркированныхТоваров - ТаблицаЗначений - Таблица маркированных товаров
Процедура ТипизироватьКолонкиМаркированныхТоваров(ТаблицаМаркированныхТоваров) Экспорт
	
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("НоменклатураСсылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ХарактеристикаСсылка", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("СерияСсылка", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМаркированныхТоваров.Колонки.Добавить("ШтрихкодСтрока", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаШтрихкодыУпаковок Из ТаблицаМаркированныхТоваров Цикл
		СтрокаШтрихкодыУпаковок.НомерСтроки          = ТаблицаМаркированныхТоваров.Индекс(СтрокаШтрихкодыУпаковок);
		СтрокаШтрихкодыУпаковок.НоменклатураСсылка   = СтрокаШтрихкодыУпаковок.Номенклатура;
		СтрокаШтрихкодыУпаковок.ХарактеристикаСсылка = СтрокаШтрихкодыУпаковок.Характеристика;
		СтрокаШтрихкодыУпаковок.СерияСсылка          = СтрокаШтрихкодыУпаковок.Серия;
		СтрокаШтрихкодыУпаковок.ШтрихкодСтрока       = СтрокаШтрихкодыУпаковок.Штрихкод;
	КонецЦикла;
	
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Номенклатура");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Характеристика");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Серия");
	ТаблицаМаркированныхТоваров.Колонки.Удалить("Штрихкод");
	
КонецПроцедуры

// Возвращает массив используемых подсистем
// 
// Параметры:
//  ДобавитьОписание - Булево - Добавить дополнительное описание
// 
// Возвращаемое значение:
//  Массив из Строка - Массив из представлений подсистем "ЕГАИС", "ГИСМ" и т.д.
Функция СписокИспользуемыхПодсистем(ДобавитьОписание = Ложь) Экспорт
	
	МассивИспользуемыхПодсистем = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		МассивИспользуемыхПодсистем.Добавить("ГИСМ" + ?(ДобавитьОписание,НСтр("ru = ' (изделия из меха)'"),""));
	КонецЕсли;
	
	Если ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС() Тогда
		МассивИспользуемыхПодсистем.Добавить(ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПодсистемы() 
												+ ?(ДобавитьОписание,НСтр("ru = ' (Меркурий)'"),""));
	КонецЕсли;
	
	ВидыПродукцииЕГАИС = ИнтеграцияЕГАИСВызовСервера.УчитываемыеВидыМаркируемойПродукции();
	Если ВидыПродукцииЕГАИС.Количество() Тогда
		МассивИспользуемыхПодсистем.Добавить(ИнтеграцияЕГАИСКлиентСервер.ПредставлениеПодсистемы());
	КонецЕсли;
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	Если ВидыПродукцииИСМП.Количество() Тогда
		МассивИспользуемыхПодсистем.Добавить(
			ИнтеграцияИСМПКлиентСервер.ПредставлениеПодсистемы()
			+ ?(ДобавитьОписание, " " + НСтр("ru = '(обувь, одежда, табак)'") + " ...", ""));
	КонецЕсли;
	
	Возврат МассивИспользуемыхПодсистем;

КонецФункции

// Возвращает массив особенностей учета номенклатуры, не относящихся ни к одной из подсистем
//
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
Функция ОсобенностиУчетаНоменклатурыБезПодсистем() Экспорт
	
	МассивИсключений = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключений, ИнтеграцияИСМПУТ.ОсобенностиУчетаНоменклатуры());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключений, ИнтеграцияГИСМУТ.ОсобенностиУчетаНоменклатуры());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключений, ИнтеграцияЕГАИСУТ.ОсобенностиУчетаНоменклатуры());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключений, ИнтеграцияВЕТИСУТ.ОсобенностиУчетаНоменклатуры());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключений, ИнтеграцияЗЕРНОУТ.ОсобенностиУчетаНоменклатуры());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключений, ИнтеграцияСАТУРНУТ.ОсобенностиУчетаНоменклатуры());
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсобенностиУчетаНоменклатуры.Ссылка КАК ОсобенностиУчетаНоменклатуры
	|ИЗ
	|	Перечисление.ОсобенностиУчетаНоменклатуры КАК ОсобенностиУчетаНоменклатуры
	|ГДЕ
	|	НЕ ОсобенностиУчетаНоменклатуры.Ссылка В (&ИсключаяОсобенностиУчетаНоменклатуры)";
	Запрос.УстановитьПараметр("ИсключаяОсобенностиУчетаНоменклатуры", МассивИсключений);
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсобенностиУчетаНоменклатуры");
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка());
	
	Возврат Массив;
	
КонецФункции

// Возвращает признак того, используется ли хотя бы одна из подсистем ГосИС
//
// Возвращаемое значение:
//   Булево
Функция ИспользуютсяПодсистемыГОСИС() Экспорт
	
	Возврат ОбщегоНазначенияИСПовтИсп.ВедетсяУчетМаркируемойПродукции(Истина) 
		Или ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС()
		Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	
КонецФункции

// Возвращает признак того, что в форме интегрированы формы проверки и подбора
// (с целью дальнейшего ввода на основании).
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
//  Булево - Есть проверка и подбор в форме
Функция ЕстьПроверкаИПодборВФорме(Форма) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если ОформлениеПередачиТоваровМеждуОрганизациямиСервер.ЭтоФормаСГиперссылкойПередачиМеждуОрганизациями(ИмяФормы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяФормы = "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"


	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ШтрихкодированиеИВидПродукции

Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса,
	ПутьКПолюНоменклатура = "Номенклатура",
	ЗаменяемыйПараметр = "&ОпределениеВидаПродукции") Экспорт
	
	ЕГАИСВключен = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ВидыПродукцииИСМП = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	УсловияМаркируемойПродукции = Новый Массив;
	Если ЕГАИСВключен Тогда
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			И НЕ %1.АлкогольнаяПродукцияВоВскрытойТаре
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)");
	КонецЕсли;
	Для Каждого ВидПродукцииИСМП Из ВидыПродукцииИСМП Цикл
		Если ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.Табак Тогда 
			УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)");
		ИначеЕсли ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.Обувь Тогда 
			УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)");
		ИначеЕсли ВидПродукцииИСМП = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Иначе
			УсловияМаркируемойПродукции.Добавить(СтрЗаменить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИмяОсобенности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИмяОсобенности)", "ИмяОсобенности", XMLСтрока(ВидПродукцииИСМП)));
		КонецЕсли;
	КонецЦикла;
	
	САТУРНВключен = ПолучитьФункциональнуюОпцию("ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН");
	Если САТУРНВключен Тогда
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН)");
	КонецЕсли;
	
	ВЕТИСВключен = ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС");
	Если ВЕТИСВключен Тогда
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияВЕТИС)");
	КонецЕсли;
	
	ЗЕРНОВключен = ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО");
	Если ЗЕРНОВключен Тогда
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Зерно)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Зерно)");
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна)");
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЗерноВЕТИС)");
		УсловияМаркируемойПродукции.Добавить("
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС)");
	КонецЕсли;
	
	Если УсловияМаркируемойПродукции.Количество() = 0 Тогда
		ОпределениеВидаПродукции = "ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)";
	Иначе
		УсловияМаркируемойПродукции.Вставить(0, "ВЫБОР");
		УсловияМаркируемойПродукции.Добавить("
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ");
		ОпределениеВидаПродукции = СтрСоединить(УсловияМаркируемойПродукции);
		ОпределениеВидаПродукции = СтрШаблон(ОпределениеВидаПродукции, ПутьКПолюНоменклатура);
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ОпределениеВидаПродукции);
	
КонецПроцедуры

Процедура ОпределитьШаблоныКодовМаркировкиСУЗТекстаЗапроса(ТекстЗапроса,
	ПутьКПолюНоменклатура = "Номенклатура",
	ЗаменяемыйПараметр = "&ОпределениеШаблонаКодаМаркировкиСУЗ") Экспорт
	
	ОпределениеШаблонаСУЗ = СтрШаблон("ВЫБОР
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Антисептики)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДы)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Морепродукты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Бакалея)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МоторныеМасла)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)

	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка)
	|	КОНЕЦ", ПутьКПолюНоменклатура);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ОпределениеШаблонаСУЗ);
	
КонецПроцедуры

Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	ЗначенияОсобенностейУчета = Новый Массив();
	
	ЕГАИСВключен = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха
				И ИнтеграцияИСМП.ВидыПродукцииТестовогоПериода().Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОсобенностьУчета <> Неопределено Тогда
			ЗначенияОсобенностейУчета.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕГАИСВключен И ЗначенияОсобенностейУчета.Количество() = 0 Тогда
		ПризнакМаркируемаяПродукция = "ЛОЖЬ";
	ИначеЕсли ЕГАИСВключен И ЗначенияОсобенностейУчета.Количество() = 0 Тогда
		ОпределениеШаблон = "
		|	(ЕСТЬNULL(%1.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
		|	И НЕ %1.АлкогольнаяПродукцияВоВскрытойТаре)";
		ПризнакМаркируемаяПродукция = СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура);
	ИначеЕсли Не ЕГАИСВключен Тогда
		ОпределениеШаблон = "
		|	ЕСТЬNULL(%1.ОсобенностьУчета, ЛОЖЬ) В (%2)";
		ПризнакМаркируемаяПродукция = СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	Иначе 
		ОпределениеШаблон = "
		|	(ЕСТЬNULL(%1.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
		|	И НЕ %1.АлкогольнаяПродукцияВоВскрытойТаре)
		|	ИЛИ ЕСТЬNULL(%1.ОсобенностьУчета, ЛОЖЬ) В (%2)";
		ПризнакМаркируемаяПродукция = СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	КонецЕсли;
	
	Возврат ПризнакМаркируемаяПродукция;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN, ПараметрыПоиска) Экспорт
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	ШтрихкодыEAN                          = Новый Массив;
	ДополнительныеПредставленияШтрихкодов = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Представления = Новый Массив;
		ШтрихкодыEAN.Добавить(СтрокаДанных.ШтрихкодEAN);
		
		ШтрихкодДляПроверки = Новый Структура("Штрихкод, Количество", СтрокаДанных.ШтрихкодEAN, 1);
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ШтрихкодДляПроверки, ПрефиксыВесовыхШтрихкодов);
		
		// Это весовой штриход
		Если ШтрихкодДляПроверки.Штрихкод <> СтрокаДанных.ШтрихкодEAN Тогда
			Представления.Добавить(ШтрихкодДляПроверки.Штрихкод);
			ШтрихкодыEAN.Добавить(ШтрихкодДляПроверки.Штрихкод);
			СтрокаДанных.Количество = ШтрихкодДляПроверки.Количество;
			СтрокаДанных.Весовой = Истина;
		КонецЕсли;
		
		ДополнительныеПредставленияШтрихкодов.Вставить(СтрокаДанных.ШтрихкодEAN, Представления);
		
	КонецЦикла;
	
	КэшированныеЗначения = Новый Структура("Штрихкоды", Новый Соответствие);
	РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, ШтрихкодыEAN);
	
	СписокНоменклатуры = Новый Массив;
	
	Для Каждого КлючЗначение Из КэшированныеЗначения.Штрихкоды Цикл
		
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокНоменклатуры.Добавить(КлючЗначение.Значение.Номенклатура);
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка                       КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(спрНоменклатура.Ссылка)        КАК ПредставлениеНоменклатуры,
	|	&ОпределениеВидаПродукции                    КАК ВидПродукции,
	|	&ОпределениеПризнакаМаркируемаяПродукция     КАК МаркируемаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|	спрНоменклатура.Ссылка В(&СписокНоменклатуры)";
	
	ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "спрНоменклатура.Ссылка");
	
	ОпределениеМаркируемаяПродукция = ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("спрНоменклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	СведенияОНоменклатуре = Запрос.Выполнить().Выгрузить();
	СведенияОНоменклатуре.Индексы.Добавить("Номенклатура");
	
	ДанныеПоШтрихкодамРезультат = ДанныеПоШтрихкодамEAN.СкопироватьКолонки();
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		ШтрихкодыПоиска = ДополнительныеПредставленияШтрихкодов.Получить(СтрокаДанных.ШтрихкодEAN);
		Для Каждого ШтрихкодПоиска Из ШтрихкодыПоиска Цикл
			ДанныеПоШтрихкоду = КэшированныеЗначения.Штрихкоды.Получить(ШтрихкодПоиска);
			Если ДанныеПоШтрихкоду <> Неопределено И ЗначениеЗаполнено(ДанныеПоШтрихкоду.Номенклатура) Тогда
				
				НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоШтрихкоду);
				
				Сведения = СведенияОНоменклатуре.Найти(ДанныеПоШтрихкоду.Номенклатура);
				Если Сведения <> Неопределено Тогда
					НоваяСтрока.ВидПродукции         = Сведения.ВидПродукции;
					НоваяСтрока.МаркируемаяПродукция = Сведения.МаркируемаяПродукция;
				КонецЕсли;
				Если СтрокаДанных.Весовой Тогда
					НоваяСтрока.Количество  = СтрокаДанных.Количество;
				Иначе
					НоваяСтрока.Количество = ДанныеПоШтрихкоду.Коэффициент;
				КонецЕсли;
				НоваяСтрока.ШтрихкодEAN = СтрокаДанных.ШтрихкодEAN;
				
			КонецЕсли;
		КонецЦикла;
		ДанныеПоШтрихкоду = КэшированныеЗначения.Штрихкоды.Получить(ВРег(СтрокаДанных.ШтрихкодEAN));
		Если ДанныеПоШтрихкоду = Неопределено Или Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоШтрихкоду);
		
		Сведения = СведенияОНоменклатуре.Найти(ДанныеПоШтрихкоду.Номенклатура);
		Если Сведения <> Неопределено Тогда
			НоваяСтрока.ВидПродукции         = Сведения.ВидПродукции;
			НоваяСтрока.МаркируемаяПродукция = Сведения.МаркируемаяПродукция;
		КонецЕсли;
		Если СтрокаДанных.Весовой Тогда
			НоваяСтрока.Количество  = СтрокаДанных.Количество;
		Иначе
			НоваяСтрока.Количество = ДанныеПоШтрихкоду.Коэффициент;
		КонецЕсли;
		НоваяСтрока.ШтрихкодEAN = СтрокаДанных.ШтрихкодEAN;
	
	КонецЦикла;
	
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из ДанныеПоШтрихкодамРезультат.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	ДанныеПоШтрихкодамРезультат.Свернуть(СтрСоединить(ИменаКолонок, ","));
	
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамРезультат;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ИмяКолонкиЗаполнения = "Штрихкод") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = Товары.Номенклатура
	|		И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод УБЫВ
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика");
	
	Запрос.УстановитьПараметр("Таблица", ДанныеПоШтрихкодам);
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			ВнешнийШтрихкод = "";
			ВнутреннийШтрихкод = "";
			Прочее = "";
			
			ВыборкаПоШтрихкодам = ВыборкаПоХарактеристикам.Выбрать();
			Пока ВыборкаПоШтрихкодам.Следующий() Цикл
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(ВыборкаПоШтрихкодам.Штрихкод) Тогда
					Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(ВыборкаПоШтрихкодам.Штрихкод) Тогда
						ВнутреннийШтрихкод = ВыборкаПоШтрихкодам.Штрихкод;
					Иначе
						ВнешнийШтрихкод = ВыборкаПоШтрихкодам.Штрихкод;
						Прервать;
					КонецЕсли;
				Иначе
					Прочее = ВыборкаПоШтрихкодам.Штрихкод;
				КонецЕсли;
			КонецЦикла;
			
			ШтрихкодКЗаполнению = "";
			Если ЗначениеЗаполнено(ВнешнийШтрихкод) Тогда
				ШтрихкодКЗаполнению = ВнешнийШтрихкод;
			ИначеЕсли ЗначениеЗаполнено(ВнутреннийШтрихкод) Тогда
				ШтрихкодКЗаполнению = ВнутреннийШтрихкод;
			ИначеЕсли ЗначениеЗаполнено(Прочее) Тогда
				ШтрихкодКЗаполнению = Прочее;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШтрихкодКЗаполнению) Тогда
				
				ПараметрыОтбора = Новый Структура(
					"Номенклатура, Характеристика",
					ВыборкаПоНоменклатуре.Номенклатура, ВыборкаПоХарактеристикам.Характеристика);
				
				СтрокиКЗаполнениюШтрихкода = ДанныеПоШтрихкодам.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаТЧ Из СтрокиКЗаполнениюШтрихкода Цикл
					СтрокаТЧ[ИмяКолонкиЗаполнения] = ШтрихкодКЗаполнению;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых
// (на любом уровне вложенности, в т.ч. частично) находится продукция требуемого вида.
//
// Параметры:
//   ШтрихкодыДляПроверки - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкоды упаковок для проверки.
//   ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
//
// Возвращаемое значение:
//   Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - подходящие под виды продукции штрихкоды упаковок.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции) Экспорт
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	ОсобенностиУчета = Новый Массив;
	Если ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ОсобенностиУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидыПродукции));
	Иначе
		Для Каждого ВидПродукции Из ВидыПродукции Цикл
			ОсобенностиУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностиУчета", ОсобенностиУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ЕСТЬNULL(ШтрихкодыУпаковок.Номенклатура.ОсобенностьУчета В (&ОсобенностиУчета), Ложь) КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		//@skip-check query-in-loop
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции) Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка"), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт

	Если ТипЗнч(Форма) <> Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	Если (ПараметрыСканирования.Свойство("ДокументЕГАИС")) Тогда
		ИнтеграцияЕГАИСУТ.СформироватьДанныеДокументаОснования(ПараметрыСканирования.ДокументОснование, 
			ПараметрыСканирования.ДокументЕГАИС, ТаблицаДанных);
	Иначе
		ИнтеграцияИСМПУТ.СформироватьТаблицуМаркируемойПродукцииДокумента(
			ПараметрыСканирования.ДокументОснование, ТаблицаДанных, ПараметрыСканирования.ДопустимыеВидыПродукции, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Получает GTIN для таблицы переданных товаров
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица товаров с колонками:
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
//  ИспользоватьХарактеристику - Булево - Ложь, если необходимо получить GTIN только по номенклатуре.
// Возвращаемое значение:
//   Соответствие из КлючИЗначение - данные возможных GTIN:
//    * Ключ     - Строка    - GTIN всех товаров входящей таблицы
//    * Значение - Структура - пара (номенклатура,характеристика) к которой относится GTIN
//
Функция GTINМаркированныхТоваров(Товары, ИспользоватьХарактеристику = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод       КАК Штрихкод,
	|	Штрихкоды.Упаковка       КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
	|	Штрихкоды.Номенклатура   КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Номенклатура
	|		И ВЫБОР
	|			КОГДА &ИспользоватьХарактеристику ТОГДА
	|				Товары.Характеристика = Штрихкоды.Характеристика
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Штрихкоды.Упаковка",
		"Штрихкоды.Номенклатура"));
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристику", ИспользоватьХарактеристику);
	Если Товары.Колонки.Найти("Характеристика") = Неопределено Тогда
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	Запрос.УстановитьПараметр("Товары",                     Товары);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.Штрихкод) Тогда
			ДанныеШтрихкода = Новый Структура;
			ДанныеШтрихкода.Вставить("Номенклатура",   Выборка.Номенклатура);
			ДанныеШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
			ДанныеШтрихкода.Вставить("Упаковка",       Выборка.Упаковка);
			ДанныеШтрихкода.Вставить("Коэффициент",    Выборка.Коэффициент);
			
			Результат.Вставить(Выборка.Штрихкод, ДанныеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВводНаОсновании

#Область ПодстановкаСерийПоСкладскимДвижениям

#Область ТоварыСерииОрдераЗаказы

// Используем ДвижениеСерийТоваров (по основанию) если СерииРеализацияТоваровУслуг пустая
// Используем ДвижениеСерийТоваров (по заказу) если СерииРеализацияТоваровУслуг пустая
// и ДвижениеСерийТоваров (по основанию) пустая
// и количество по ордерам по заказу по количеству совпадают с реализациями по заказу.

Функция ТекстЗапросаРеализацияТоваровУслуг() Экспорт
	
	ТекстЗапроса =
	"
	|///////////////////////////////////////////////////////////// ТЧ Товары
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка            КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.Склад             КАК Склад,
	|	ТаблицаТовары.Назначение        КАК Назначение,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыРеализацияТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Документ)
	|	И ТаблицаТовары.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Назначение
	|;
	|
	|///////////////////////////////////////////////////////////// ТЧ Серии
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка            КАК Ссылка,
	|	ТаблицаСерии.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаСерии.Номенклатура      КАК Номенклатура,
	|	ТаблицаСерии.Характеристика    КАК Характеристика,
	|	ТаблицаСерии.Серия             КАК Серия,
	|	ТаблицаСерии.Склад             КАК Склад,
	|	ТаблицаСерии.Назначение        КАК Назначение,
	|	СУММА(ТаблицаСерии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииРеализацияТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка В (&Документ)
	|	И ТаблицаСерии.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Склад,
	|	ТаблицаСерии.Назначение
	|;
	|
	|///////////////////////////////////////////////////////////// Строки без серий
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ТоварыРеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	ТоварыРеализацияТоваровУслуг.Характеристика КАК Характеристика,
	|	СУММА(ТоварыРеализацияТоваровУслуг.Количество) КАК Количество
	|ПОМЕСТИТЬ РеализацияТоваровУслугБезСерий
	|ИЗ
	|	ТоварыРеализацияТоваровУслуг КАК ТоварыРеализацияТоваровУслуг
	|	ЛЕВОЕ СОЕДИНЕНИЕ СерииРеализацияТоваровУслуг КАК СерииРеализацияТоваровУслуг
	|	ПО СерииРеализацияТоваровУслуг.Ссылка = ТоварыРеализацияТоваровУслуг.Ссылка
	|	И СерииРеализацияТоваровУслуг.Номенклатура = ТоварыРеализацияТоваровУслуг.Номенклатура
	|	И СерииРеализацияТоваровУслуг.Характеристика = ТоварыРеализацияТоваровУслуг.Характеристика
	|ГДЕ
	|	СерииРеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
	|	И ТоварыРеализацияТоваровУслуг.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыРеализацияТоваровУслуг.Ссылка,
	|	ТоварыРеализацияТоваровУслуг.Номенклатура,
	|	ТоварыРеализацияТоваровУслуг.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////// Ордера по документу (строки без серий)
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугБезСерий.Ссылка КАК РеализацияТоваровУслуг
	|ПОМЕСТИТЬ РасходныеОрдераРеализацияТоваровУслуг
	|ИЗ
	|	РеализацияТоваровУслугБезСерий КАК РеализацияТоваровУслугБезСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|		ПО РеализацияТоваровУслугБезСерий.Ссылка = ТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|///////////////////////////////////////////////////////////// Прочие документы по ордерам
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныеОрдераРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ТоварыПоРаспоряжениям.Распоряжение КАК Документ.РеализацияТоваровУслуг) КАК ПрочийДокумент
	|ПОМЕСТИТЬ ОформленныеРанееРеализацияТоваровУслуг
	|ИЗ
	|	РасходныеОрдераРеализацияТоваровУслуг КАК РасходныеОрдераРеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|		ПО РасходныеОрдераРеализацияТоваровУслуг.Ссылка = ТоварыПоРаспоряжениям.Ссылка
	|ГДЕ
	|	НЕ (ТоварыПоРаспоряжениям.Распоряжение В (ВЫБРАТЬ РеализацияТоваровУслуг ИЗ РасходныеОрдераРеализацияТоваровУслуг))
	|;
	|
	|///////////////////////////////////////////////////////////// Обороты по ордерам (строки без серий)
	|ВЫБРАТЬ
	|	РасходныеОрдера.РеализацияТоваровУслуг КАК Ссылка,
	|	РасходныеОрдера.РеализацияТоваровУслуг.Организация КАК ОрганизацияПолучатель,
	|	ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|	ДвиженияСерийТоваров.Серия КАК Серия,
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияРеализацияТоваровУслугВсе
	|ИЗ
	|	РегистрНакопления.ДвиженияСерийТоваров.Обороты(,,, Документ В
	|		(ВЫБРАТЬ
	|			Ссылка
	|		Из
	|			РасходныеОрдераРеализацияТоваровУслуг)) КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходныеОрдераРеализацияТоваровУслуг КАК РасходныеОрдера
	|		ПО РасходныеОрдера.Ссылка = ДвиженияСерийТоваров.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацияТоваровУслугБезСерий КАК РеализацияТоваровУслугБезСерий
	|		ПО ДвиженияСерийТоваров.Номенклатура = РеализацияТоваровУслугБезСерий.Номенклатура
	|		И ДвиженияСерийТоваров.Характеристика = РеализацияТоваровУслугБезСерий.Характеристика
	|		И РасходныеОрдера.РеализацияТоваровУслуг = РеализацияТоваровУслугБезСерий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныеОрдера.РеализацияТоваровУслуг,
	|	ДвиженияСерийТоваров.Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика,
	|	ДвиженияСерийТоваров.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) > 0
	|;
	|
	|///////////////////////////////////////////////////////////// Обороты по ордерам (оформленное ранее)
	|ВЫБРАТЬ
	|	ОформленныеРанееРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияРеализацияТоваровУслугОформленыРанее
	|ИЗ
	|	ОформленныеРанееРеализацияТоваровУслуг КАК ОформленныеРанееРеализацияТоваровУслуг
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО ТаблицаТовары.Ссылка = ОформленныеРанееРеализацияТоваровУслуг.ПрочийДокумент
	|СГРУППИРОВАТЬ ПО
	|	ОформленныеРанееРеализацияТоваровУслуг.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////// Строки без серий, ордеров, с распоряжениями
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугБезСерий.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугБезСерий.Ссылка.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслугБезСерий.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугБезСерий.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугБезСерий.Количество КАК Количество
	|ПОМЕСТИТЬ РеализацияТоваровУслугБезСерийИОрдеров
	|ИЗ
	|	РеализацияТоваровУслугБезСерий КАК РеализацияТоваровУслугБезСерий
	|	ЛЕВОЕ СОЕДИНЕНИЕ СкладскиеДвиженияРеализацияТоваровУслугВсе КАК СкладскиеДвиженияРеализацияТоваровУслуг
	|	ПО СкладскиеДвиженияРеализацияТоваровУслуг.Ссылка = РеализацияТоваровУслугБезСерий.Ссылка
	|ГДЕ
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
	|	И РеализацияТоваровУслугБезСерий.Ссылка.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////// Строки без серий, ордеров, ограничение по заказам
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугБезСерийИОрдеров.ЗаказКлиента КАК Ссылка,
	|	РеализацияТоваровУслугБезСерийИОрдеров.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугБезСерийИОрдеров.Характеристика КАК Характеристика,
	|	СУММА(РеализацияТоваровУслугБезСерийИОрдеров.Количество) КАК Количество
	|ПОМЕСТИТЬ РеализацияТоваровУслугЗаказКлиентаБезСерийИОрдеров
	|ИЗ
	|	РеализацияТоваровУслугБезСерийИОрдеров КАК РеализацияТоваровУслугБезСерийИОрдеров
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугБезСерийИОрдеров.ЗаказКлиента,
	|	РеализацияТоваровУслугБезСерийИОрдеров.Номенклатура,
	|	РеализацияТоваровУслугБезСерийИОрдеров.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////// Ордера по распоряжениям
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугБезСерийИОрдеров.ЗаказКлиента КАК ЗаказКлиента
	|ПОМЕСТИТЬ РасходныеОрдераЗаказКлиентаРеализацияТоваровУслуг
	|ИЗ
	|	РеализацияТоваровУслугБезСерийИОрдеров КАК РеализацияТоваровУслугБезСерийИОрдеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|		ПО РеализацияТоваровУслугБезСерийИОрдеров.ЗаказКлиента = ТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|///////////////////////////////////////////////////////////// Прочие документы по этим же распоряжениям
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугСсылка.Ссылка КАК ПрочийДокумент
	|ПОМЕСТИТЬ ОформленныеРанееЗаказКлиентаРеализацияТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугСсылка
	|ГДЕ
	|	РеализацияТоваровУслугСсылка.ЗаказКлиента В (ВЫБРАТЬ ЗаказКлиента ИЗ РасходныеОрдераЗаказКлиентаРеализацияТоваровУслуг)
	|	И НЕ (РеализацияТоваровУслугСсылка.Ссылка В (ВЫБРАТЬ Ссылка ИЗ ТоварыРеализацияТоваровУслуг))
	|	И РеализацияТоваровУслугСсылка.Проведен
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныеОрдера.ЗаказКлиента КАК Ссылка,
	|	ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|	ДвиженияСерийТоваров.Серия КАК Серия,
	|	РасходныеОрдера.ЗаказКлиента.Организация Как ОрганизацияПолучатель,
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслугВсе
	|ИЗ
	|	РегистрНакопления.ДвиженияСерийТоваров.Обороты(,,, Документ В
	|		(ВЫБРАТЬ
	|			Ссылка
	|		Из
	|			РасходныеОрдераЗаказКлиентаРеализацияТоваровУслуг)) КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходныеОрдераЗаказКлиентаРеализацияТоваровУслуг КАК РасходныеОрдера
	|		ПО РасходныеОрдера.Ссылка = ДвиженияСерийТоваров.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацияТоваровУслугБезСерийИОрдеров КАК ОстатокПоЗаказамРеализацияТоваровУслуг
	|		ПО ДвиженияСерийТоваров.Номенклатура = ОстатокПоЗаказамРеализацияТоваровУслуг.Номенклатура
	|		И ДвиженияСерийТоваров.Характеристика = ОстатокПоЗаказамРеализацияТоваровУслуг.Характеристика
	|		И РасходныеОрдера.ЗаказКлиента = ОстатокПоЗаказамРеализацияТоваровУслуг.ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныеОрдера.ЗаказКлиента,
	|	РасходныеОрдера.ЗаказКлиента.Организация,
	|	ДвиженияСерийТоваров.Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика,
	|	ДвиженияСерийТоваров.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) > 0
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ОформленоРанееЗаказКлиентаРеализацияТоваровУслуг
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В (ВЫБРАТЬ ПрочийДокумент ИЗ ОформленныеРанееЗаказКлиентаРеализацияТоваровУслуг)
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Ссылка                                     КАК Ссылка,
	|	Серии.ОрганизацияПолучатель                      КАК ОрганизацияПолучатель,
	|	Серии.Номенклатура                               КАК Номенклатура,
	|	Серии.Характеристика                             КАК Характеристика,
	|	Серии.Серия                                      КАК Серия,
	|	Серии.Количество - ЕСТЬNULL(Товары.Количество,0) КАК Количество
	|ПОМЕСТИТЬ СерииИзТЧСерииРеализацияТоваровУслуг
	|ИЗ
	|	СерииРеализацияТоваровУслуг КАК Серии
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТоварыРеализацияТоваровУслуг КАК Товары
	|	ПО Товары.Ссылка = Серии.Ссылка
	|	И Товары.Номенклатура = Серии.Номенклатура
	|	И Товары.Характеристика = Серии.Характеристика
	|	И Товары.Серия = Серии.Серия
	|	И Товары.Склад = Серии.Склад
	|	И Товары.Назначение = Серии.Назначение
	|ГДЕ
	|	Серии.Количество > ЕСТЬNULL(Товары.Количество,0)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеДвижения.Ссылка                КАК Ссылка,
	|	СкладскиеДвижения.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СкладскиеДвижения.Номенклатура          КАК Номенклатура,
	|	СкладскиеДвижения.Характеристика        КАК Характеристика,
	|	СкладскиеДвижения.Серия                 КАК Серия,
	|	ВЫБОР
	|		КОГДА ОграничениеКоличества.Количество + ЕСТЬNULL(ОформленыРанее.Количество, 0) < СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) + СкладскиеДвижения.Количество
	|			ТОГДА ОграничениеКоличества.Количество - СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) + ЕСТЬNULL(ОформленыРанее.Количество, 0)
	|		КОГДА ЕСТЬNULL(ОформленыРанее.Количество, 0) > СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0))
	|			ТОГДА СкладскиеДвижения.Количество + СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) - ЕСТЬNULL(ОформленыРанее.Количество, 0)
	|		ИНАЧЕ СкладскиеДвижения.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг
	|ИЗ
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслугВсе КАК СкладскиеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслугВсе КАК НакопленныйИтог
	|		ПО СкладскиеДвижения.Ссылка = НакопленныйИтог.Ссылка
	|		И СкладскиеДвижения.ОрганизацияПолучатель = НакопленныйИтог.ОрганизацияПолучатель
	|		И СкладскиеДвижения.Номенклатура = НакопленныйИтог.Номенклатура
	|		И СкладскиеДвижения.Характеристика = НакопленныйИтог.Характеристика
	|		И СкладскиеДвижения.Серия > НакопленныйИтог.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацияТоваровУслугЗаказКлиентаБезСерийИОрдеров КАК ОграничениеКоличества
	|		ПО СкладскиеДвижения.Ссылка = ОграничениеКоличества.Ссылка
	|		И СкладскиеДвижения.Номенклатура = ОграничениеКоличества.Номенклатура
	|		И СкладскиеДвижения.Характеристика = ОграничениеКоличества.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОформленоРанееЗаказКлиентаРеализацияТоваровУслуг КАК ОформленыРанее
	|		ПО СкладскиеДвижения.Ссылка = ОформленыРанее.Ссылка
	|		И СкладскиеДвижения.Номенклатура = ОграничениеКоличества.Номенклатура
	|		И СкладскиеДвижения.Характеристика = ОграничениеКоличества.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	СкладскиеДвижения.Ссылка,
	|	СкладскиеДвижения.ОрганизацияПолучатель,
	|	СкладскиеДвижения.Номенклатура,
	|	СкладскиеДвижения.Характеристика,
	|	СкладскиеДвижения.Серия,
	|	СкладскиеДвижения.Количество,
	|	ОграничениеКоличества.Количество,
	|	ОформленыРанее.Количество
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(ОформленыРанее.Количество, 0) < СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) + СкладскиеДвижения.Количество
	|	И ОграничениеКоличества.Количество + ЕСТЬNULL(ОформленыРанее.Количество, 0) > СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0))
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеДвижения.Ссылка                КАК Ссылка,
	|	СкладскиеДвижения.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СкладскиеДвижения.Номенклатура          КАК Номенклатура,
	|	СкладскиеДвижения.Характеристика        КАК Характеристика,
	|	СкладскиеДвижения.Серия                 КАК Серия,
	|	ВЫБОР
	|		КОГДА ОграничениеКоличества.Количество + ЕСТЬNULL(ОформленыРанее.Количество, 0) < СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) + СкладскиеДвижения.Количество
	|			ТОГДА ОграничениеКоличества.Количество - СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) + ЕСТЬNULL(ОформленыРанее.Количество, 0)
	|		КОГДА ЕСТЬNULL(ОформленыРанее.Количество, 0) > СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0))
	|			ТОГДА СкладскиеДвижения.Количество + СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) - ЕСТЬNULL(ОформленыРанее.Количество, 0)
	|		ИНАЧЕ СкладскиеДвижения.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияРеализацияТоваровУслуг
	|ИЗ
	|	СкладскиеДвиженияРеализацияТоваровУслугВсе КАК СкладскиеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладскиеДвиженияРеализацияТоваровУслугВсе КАК НакопленныйИтог
	|		ПО СкладскиеДвижения.Ссылка = НакопленныйИтог.Ссылка
	|		И СкладскиеДвижения.ОрганизацияПолучатель = НакопленныйИтог.ОрганизацияПолучатель
	|		И СкладскиеДвижения.Номенклатура = НакопленныйИтог.Номенклатура
	|		И СкладскиеДвижения.Характеристика = НакопленныйИтог.Характеристика
	|		И СкладскиеДвижения.Серия > НакопленныйИтог.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеализацияТоваровУслугБезСерий КАК ОграничениеКоличества
	|		ПО СкладскиеДвижения.Ссылка = ОграничениеКоличества.Ссылка
	|		И СкладскиеДвижения.Номенклатура = ОграничениеКоличества.Номенклатура
	|		И СкладскиеДвижения.Характеристика = ОграничениеКоличества.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладскиеДвиженияРеализацияТоваровУслугОформленыРанее КАК ОформленыРанее
	|		ПО СкладскиеДвижения.Ссылка = ОформленыРанее.Ссылка
	|		И СкладскиеДвижения.Номенклатура = ОграничениеКоличества.Номенклатура
	|		И СкладскиеДвижения.Характеристика = ОграничениеКоличества.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	СкладскиеДвижения.Ссылка,
	|	СкладскиеДвижения.ОрганизацияПолучатель,
	|	СкладскиеДвижения.Номенклатура,
	|	СкладскиеДвижения.Характеристика,
	|	СкладскиеДвижения.Серия,
	|	СкладскиеДвижения.Количество,
	|	ОграничениеКоличества.Количество,
	|	ОформленыРанее.Количество
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(ОформленыРанее.Количество, 0) < СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0)) + СкладскиеДвижения.Количество
	|	И ОграничениеКоличества.Количество + ЕСТЬNULL(ОформленыРанее.Количество, 0) > СУММА(ЕСТЬNULL(НакопленныйИтог.Количество,0))
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия,
	|	Товары.Количество            КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоварыРеализацияТоваровУслуг
	|ИЗ
	|	ТоварыРеализацияТоваровУслуг КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура          КАК Номенклатура,
	|	СерииИзТЧСерии.Характеристика        КАК Характеристика,
	|	СерииИзТЧСерии.Серия                 КАК Серия,
	|	СерииИзТЧСерии.Количество            КАК Количество
	|ИЗ
	|	СерииИзТЧСерииРеализацияТоваровУслуг КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура,
	|	СерииИзТЧСерии.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СерииИзТЧСерии.Количество
	|ИЗ
	|	СерииИзТЧСерииРеализацияТоваровУслуг КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияРеализацияТоваровУслуг.ОрганизацияПолучатель,
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Номенклатура,
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Характеристика,
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Серия,
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Количество
	|ИЗ
	|	СкладскиеДвиженияРеализацияТоваровУслуг КАК СкладскиеДвиженияРеализацияТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияРеализацияТоваровУслуг.ОрганизацияПолучатель,
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Номенклатура,
	|	СкладскиеДвиженияРеализацияТоваровУслуг.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СкладскиеДвиженияРеализацияТоваровУслуг.Количество
	|ИЗ
	|	СкладскиеДвиженияРеализацияТоваровУслуг КАК СкладскиеДвиженияРеализацияТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.ОрганизацияПолучатель,
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Номенклатура,
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Характеристика,
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Серия,
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Количество
	|ИЗ
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг КАК СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.ОрганизацияПолучатель,
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Номенклатура,
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг.Количество
	|ИЗ
	|	СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг КАК СкладскиеДвиженияЗаказКлиентаРеализацияТоваровУслуг
	|
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВнутреннееПотребление() Экспорт
	
	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", "ВнутреннееПотребление");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Склад", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерии.Склад", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказНаВнутреннееПотребление");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПередачаТоваровХранителю() Экспорт
	
	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", "ПередачаТоваровХранителю");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПеремещениеТоваров() Экспорт
	
	ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", "ПеремещениеТоваров");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Склад", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерии.Склад", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Назначение", "НазначениеОтправителя");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента", "ЗаказНаПеремещение");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСборкаТоваров() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка            КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.Назначение        КАК Назначение,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСборкаТоваров
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Документ)
	|	И ТаблицаТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|	И ТаблицаТовары.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка            КАК Ссылка,
	|	ТаблицаТовары.Организация       КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.Назначение        КАК Назначение,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.СборкаТоваров КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Документ)
	|	И ТаблицаТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|	И ТаблицаТовары.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Назначение
	|
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка            КАК Ссылка,
	|	ТаблицаСерии.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаСерии.Номенклатура      КАК Номенклатура,
	|	ТаблицаСерии.Характеристика    КАК Характеристика,
	|	ТаблицаСерии.Серия             КАК Серия,
	|	ТаблицаСерии.Назначение        КАК Назначение,
	|	СУММА(ТаблицаСерии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииСборкаТоваров
	|ИЗ
	|	Документ.СборкаТоваров.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка В (&Документ)
	|	И ТаблицаСерии.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|	И ВЫБОР
	|		КОГДА ТаблицаСерии.Номенклатура = ТаблицаСерии.Ссылка.Номенклатура
	|					И ТаблицаСерии.Характеристика = ТаблицаСерии.Ссылка.Характеристика
	|		ТОГДА ТаблицаСерии.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|		ИНАЧЕ ТаблицаСерии.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|	КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Назначение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыСборкаТоваров.Ссылка КАК Ссылка,
	|	ТоварыСборкаТоваров.Номенклатура КАК Номенклатура,
	|	ТоварыСборкаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СборкаТоваровБезСерий
	|ИЗ
	|	ТоварыСборкаТоваров КАК ТоварыСборкаТоваров
	|	ЛЕВОЕ СОЕДИНЕНИЕ СерииСборкаТоваров КАК СерииСборкаТоваров
	|	ПО СерииСборкаТоваров.Ссылка = ТоварыСборкаТоваров.Ссылка
	|	И СерииСборкаТоваров.Номенклатура = ТоварыСборкаТоваров.Номенклатура
	|	И СерииСборкаТоваров.Характеристика = ТоварыСборкаТоваров.Характеристика
	|ГДЕ
	|	СерииСборкаТоваров.Ссылка ЕСТЬ NULL
	|	И ТоварыСборкаТоваров.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	СборкаТоваровБезСерий.Ссылка КАК СборкаТоваров
	|ПОМЕСТИТЬ РасходныеОрдераСборкаТоваров
	|ИЗ
	|	СборкаТоваровБезСерий КАК СборкаТоваровБезСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|		ПО СборкаТоваровБезСерий.Ссылка = ТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныеОрдера.СборкаТоваров КАК Ссылка,
	|	РасходныеОрдера.СборкаТоваров.Организация КАК ОрганизацияПолучатель,
	|	ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|	ДвиженияСерийТоваров.Серия КАК Серия,
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияСборкаТоваров
	|ИЗ
	|	РегистрНакопления.ДвиженияСерийТоваров.Обороты(,,, Документ В
	|		(ВЫБРАТЬ
	|			Ссылка
	|		Из
	|			РасходныеОрдераСборкаТоваров)) КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходныеОрдераСборкаТоваров КАК РасходныеОрдера
	|		ПО РасходныеОрдера.Ссылка = ДвиженияСерийТоваров.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СборкаТоваровБезСерий КАК СборкаТоваровБезСерий
	|		ПО ДвиженияСерийТоваров.Номенклатура = СборкаТоваровБезСерий.Номенклатура
	|		И ДвиженияСерийТоваров.Характеристика = СборкаТоваровБезСерий.Характеристика
	|		И РасходныеОрдера.СборкаТоваров = СборкаТоваровБезСерий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныеОрдера.СборкаТоваров,
	|	ДвиженияСерийТоваров.Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика,
	|	ДвиженияСерийТоваров.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) > 0
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СборкаТоваровБезСерий.Ссылка КАК Ссылка,
	|	СборкаТоваровБезСерий.Ссылка.ЗаказНаСборку КАК ЗаказНаСборку,
	|	СборкаТоваровБезСерий.Номенклатура КАК Номенклатура,
	|	СборкаТоваровБезСерий.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СборкаТоваровБезСерийИОрдеров
	|ИЗ
	|	СборкаТоваровБезСерий КАК СборкаТоваровБезСерий
	|	ЛЕВОЕ СОЕДИНЕНИЕ СкладскиеДвиженияСборкаТоваров КАК СкладскиеДвиженияСборкаТоваров
	|	ПО СкладскиеДвиженияСборкаТоваров.Ссылка = СборкаТоваровБезСерий.Ссылка
	|ГДЕ
	|	СкладскиеДвиженияСборкаТоваров.Ссылка ЕСТЬ NULL
	|	И СборкаТоваровБезСерий.Ссылка.ЗаказНаСборку <> ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаТоваровБезСерийИОрдеров.ЗаказНаСборку КАК ЗаказНаСборку,
	|	СборкаТоваровБезСерийИОрдеров.Номенклатура КАК Номенклатура,
	|	СборкаТоваровБезСерийИОрдеров.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТоварыСборкаТоваров.ОрганизацияПолучатель) КАК ОрганизацияПолучатель,
	|	СУММА(ТоварыСборкаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстатокПоЗаказамСборкаТоваров
	|ИЗ
	|	СборкаТоваровБезСерийИОрдеров КАК СборкаТоваровБезСерийИОрдеров
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСборкаТоваров КАК ТоварыСборкаТоваров
	|	ПО ТоварыСборкаТоваров.Ссылка = СборкаТоваровБезСерийИОрдеров.Ссылка
	|	И ТоварыСборкаТоваров.Номенклатура = СборкаТоваровБезСерийИОрдеров.Номенклатура
	|	И ТоварыСборкаТоваров.Характеристика = СборкаТоваровБезСерийИОрдеров.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	СборкаТоваровБезСерийИОрдеров.ЗаказНаСборку,
	|	СборкаТоваровБезСерийИОрдеров.Номенклатура,
	|	СборкаТоваровБезСерийИОрдеров.Характеристика
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	СборкаТоваровБезСерийИОрдеров.ЗаказНаСборку КАК ЗаказНаСборку
	|ПОМЕСТИТЬ РасходныеОрдераЗаказНаСборкуСборкаТоваров
	|ИЗ
	|	СборкаТоваровБезСерийИОрдеров КАК СборкаТоваровБезСерийИОрдеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|		ПО СборкаТоваровБезСерийИОрдеров.ЗаказНаСборку = ТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныеОрдера.ЗаказНаСборку                       КАК Ссылка,
	|	ДвиженияСерийТоваров.Номенклатура                   КАК Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика                 КАК Характеристика,
	|	ДвиженияСерийТоваров.Серия                          КАК Серия,
	|	ОстатокПоЗаказамСборкаТоваров.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот)        КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияЗаказНаСборкуСборкаТоваровПредварительно
	|ИЗ
	|	РегистрНакопления.ДвиженияСерийТоваров.Обороты(,,, Документ В
	|		(ВЫБРАТЬ
	|			Ссылка
	|		Из
	|			РасходныеОрдераЗаказНаСборкуСборкаТоваров)) КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходныеОрдераЗаказНаСборкуСборкаТоваров КАК РасходныеОрдера
	|		ПО РасходныеОрдера.Ссылка = ДвиженияСерийТоваров.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстатокПоЗаказамСборкаТоваров КАК ОстатокПоЗаказамСборкаТоваров
	|		ПО ДвиженияСерийТоваров.Номенклатура = ОстатокПоЗаказамСборкаТоваров.Номенклатура
	|		И ДвиженияСерийТоваров.Характеристика = ОстатокПоЗаказамСборкаТоваров.Характеристика
	|		И РасходныеОрдера.ЗаказНаСборку = ОстатокПоЗаказамСборкаТоваров.ЗаказНаСборку
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныеОрдера.ЗаказНаСборку,
	|	ОстатокПоЗаказамСборкаТоваров.ОрганизацияПолучатель,
	|	ДвиженияСерийТоваров.Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика,
	|	ДвиженияСерийТоваров.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) > 0
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстатокПоЗаказам.ЗаказНаСборку КАК ЗаказНаСборку,
	|	ОстатокПоЗаказам.Номенклатура КАК Номенклатура,
	|	ОстатокПоЗаказам.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОрдераПоЗаказамСборкаТоваровОднозначноеИспользованиеСерий
	|	ИЗ ОстатокПоЗаказамСборкаТоваров КАК ОстатокПоЗаказам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладскиеДвиженияЗаказНаСборкуСборкаТоваровПредварительно КАК СкладскиеДвижения
	|	ПО ОстатокПоЗаказам.ЗаказНаСборку = СкладскиеДвижения.Ссылка
	|	И ОстатокПоЗаказам.Номенклатура = СкладскиеДвижения.Номенклатура
	|	И ОстатокПоЗаказам.Характеристика = СкладскиеДвижения.Характеристика
	|СГРУППИРОВАТЬ ПО
	|	ОстатокПоЗаказам.ЗаказНаСборку,
	|	ОстатокПоЗаказам.Номенклатура,
	|	ОстатокПоЗаказам.Характеристика,
	|	ОстатокПоЗаказам.Количество
	|ИМЕЮЩИЕ
	|	ОстатокПоЗаказам.Количество = СУММА(СкладскиеДвижения.Количество)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеДвижения.Номенклатура          КАК Номенклатура,
	|	СкладскиеДвижения.Характеристика        КАК Характеристика,
	|	СкладскиеДвижения.Серия                 КАК Серия,
	|	СкладскиеДвижения.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СкладскиеДвижения.Количество            КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияЗаказНаСборкуСборкаТоваров
	|ИЗ
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваровПредварительно КАК СкладскиеДвижения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрдераПоЗаказамСборкаТоваровОднозначноеИспользованиеСерий КАК Фильтр
	|		ПО СкладскиеДвижения.Ссылка = Фильтр.ЗаказНаСборку
	|		И СкладскиеДвижения.Номенклатура = Фильтр.Номенклатура
	|		И СкладскиеДвижения.Характеристика = Фильтр.Характеристика
	|
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Ссылка                                     КАК Ссылка,
	|	Серии.ОрганизацияПолучатель                      КАК ОрганизацияПолучатель,
	|	Серии.Номенклатура                               КАК Номенклатура,
	|	Серии.Характеристика                             КАК Характеристика,
	|	Серии.Серия                                      КАК Серия,
	|	Серии.Количество - ЕСТЬNULL(Товары.Количество,0) КАК Количество
	|ПОМЕСТИТЬ СерииИзТЧСерииСборкаТоваров
	|ИЗ
	|	СерииСборкаТоваров КАК Серии
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСборкаТоваров КАК Товары
	|	ПО Товары.Ссылка = Серии.Ссылка
	|	И Товары.Номенклатура = Серии.Номенклатура
	|	И Товары.Характеристика = Серии.Характеристика
	|	И Товары.Серия = Серии.Серия
	|	И Товары.Назначение = Серии.Назначение
	|ГДЕ
	|	Серии.Количество > ЕСТЬNULL(Товары.Количество,0)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия,
	|	Товары.Количество            КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоварыСборкаТоваров
	|ИЗ
	|	ТоварыСборкаТоваров КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура          КАК Номенклатура,
	|	СерииИзТЧСерии.Характеристика        КАК Характеристика,
	|	СерииИзТЧСерии.Серия                 КАК Серия,
	|	СерииИзТЧСерии.Количество            КАК Количество
	|ИЗ
	|	СерииИзТЧСерииСборкаТоваров КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура,
	|	СерииИзТЧСерии.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СерииИзТЧСерии.Количество
	|ИЗ
	|	СерииИзТЧСерииСборкаТоваров КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияСборкаТоваров.ОрганизацияПолучатель,
	|	СкладскиеДвиженияСборкаТоваров.Номенклатура,
	|	СкладскиеДвиженияСборкаТоваров.Характеристика,
	|	СкладскиеДвиженияСборкаТоваров.Серия,
	|	СкладскиеДвиженияСборкаТоваров.Количество
	|ИЗ
	|	СкладскиеДвиженияСборкаТоваров КАК СкладскиеДвиженияСборкаТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияСборкаТоваров.ОрганизацияПолучатель,
	|	СкладскиеДвиженияСборкаТоваров.Номенклатура,
	|	СкладскиеДвиженияСборкаТоваров.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СкладскиеДвиженияСборкаТоваров.Количество
	|ИЗ
	|	СкладскиеДвиженияСборкаТоваров КАК СкладскиеДвиженияСборкаТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.ОрганизацияПолучатель,
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Номенклатура,
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Характеристика,
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Серия,
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Количество
	|ИЗ
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров КАК СкладскиеДвиженияЗаказНаСборкуСборкаТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.ОрганизацияПолучатель,
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Номенклатура,
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СкладскиеДвиженияЗаказНаСборкуСборкаТоваров.Количество
	|ИЗ
	|	СкладскиеДвиженияЗаказНаСборкуСборкаТоваров КАК СкладскиеДвиженияЗаказНаСборкуСборкаТоваров
	|
	|";

	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область ТоварыСерииОрдера

Функция ТекстЗапросаВозвратТоваровПоставщику() Экспорт
	
	// Используем ДвижениеСерийТоваров (по основанию) если СерииВозвратТоваровПоставщику пустая
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка            КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.Назначение        КАК Назначение,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыВозвратТоваровПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Документ)
	|	И ТаблицаТовары.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Назначение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка            КАК Ссылка,
	|	ТаблицаСерии.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаСерии.Номенклатура      КАК Номенклатура,
	|	ТаблицаСерии.Характеристика    КАК Характеристика,
	|	ТаблицаСерии.Серия             КАК Серия,
	|	ТаблицаСерии.Назначение        КАК Назначение,
	|	СУММА(ТаблицаСерии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииВозвратТоваровПоставщику
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка В (&Документ)
	|	И ТаблицаСерии.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Назначение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыВозвратТоваровПоставщику.Ссылка КАК Ссылка,
	|	ТоварыВозвратТоваровПоставщику.Номенклатура КАК Номенклатура,
	|	ТоварыВозвратТоваровПоставщику.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВозвратыПоставщикуБезСерий
	|ИЗ
	|	ТоварыВозвратТоваровПоставщику КАК ТоварыВозвратТоваровПоставщику
	|	ЛЕВОЕ СОЕДИНЕНИЕ СерииВозвратТоваровПоставщику КАК СерииВозвратТоваровПоставщику
	|	ПО СерииВозвратТоваровПоставщику.Ссылка = ТоварыВозвратТоваровПоставщику.Ссылка
	|	И СерииВозвратТоваровПоставщику.Номенклатура = ТоварыВозвратТоваровПоставщику.Номенклатура
	|	И СерииВозвратТоваровПоставщику.Характеристика = ТоварыВозвратТоваровПоставщику.Характеристика
	|ГДЕ
	|	СерииВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL
	|	И ТоварыВозвратТоваровПоставщику.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	ВозвратыБезСерий.Ссылка КАК ВозвратТоваровПоставщику
	|ПОМЕСТИТЬ РасходныеОрдераВозвратТоваровПоставщику
	|ИЗ
	|	ВозвратыПоставщикуБезСерий КАК ВозвратыБезСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|		ПО ВозвратыБезСерий.Ссылка = ТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныеОрдера.ВозвратТоваровПоставщику КАК Ссылка,
	|	РасходныеОрдера.ВозвратТоваровПоставщику.Организация КАК ОрганизацияПолучатель,
	|	ДвиженияСерийТоваров.Номенклатура КАК Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика КАК Характеристика,
	|	ДвиженияСерийТоваров.Серия КАК Серия,
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ СкладскиеДвиженияВозвратТоваровПоставщику
	|ИЗ
	|	РегистрНакопления.ДвиженияСерийТоваров.Обороты(,,, Документ В
	|		(ВЫБРАТЬ
	|			Ссылка
	|		Из
	|			РасходныеОрдераВозвратТоваровПоставщику)) КАК ДвиженияСерийТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходныеОрдераВозвратТоваровПоставщику КАК РасходныеОрдера
	|		ПО РасходныеОрдера.Ссылка = ДвиженияСерийТоваров.Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВозвратыПоставщикуБезСерий КАК ВозвратыПоставщикуБезСерий
	|		ПО ДвиженияСерийТоваров.Номенклатура = ВозвратыПоставщикуБезСерий.Номенклатура
	|		И ДвиженияСерийТоваров.Характеристика = ВозвратыПоставщикуБезСерий.Характеристика
	|		И РасходныеОрдера.ВозвратТоваровПоставщику = ВозвратыПоставщикуБезСерий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныеОрдера.ВозвратТоваровПоставщику,
	|	ДвиженияСерийТоваров.Номенклатура,
	|	ДвиженияСерийТоваров.Характеристика,
	|	ДвиженияСерийТоваров.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ДвиженияСерийТоваров.КоличествоОборот) > 0
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Ссылка                                     КАК Ссылка,
	|	Серии.ОрганизацияПолучатель                      КАК ОрганизацияПолучатель,
	|	Серии.Номенклатура                               КАК Номенклатура,
	|	Серии.Характеристика                             КАК Характеристика,
	|	Серии.Серия                                      КАК Серия,
	|	Серии.Количество - ЕСТЬNULL(Товары.Количество,0) КАК Количество
	|ПОМЕСТИТЬ СерииИзТЧСерииВозвратТоваровПоставщику
	|ИЗ
	|	СерииВозвратТоваровПоставщику КАК Серии
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВозвратТоваровПоставщику КАК Товары
	|	ПО Товары.Ссылка = Серии.Ссылка
	|	И Товары.Номенклатура = Серии.Номенклатура
	|	И Товары.Характеристика = Серии.Характеристика
	|	И Товары.Серия = Серии.Серия
	|	И Товары.Назначение = Серии.Назначение
	|ГДЕ
	|	Серии.Количество > ЕСТЬNULL(Товары.Количество,0)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия,
	|	Товары.Количество            КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоварыВозвратТоваровПоставщику
	|ИЗ
	|	ТоварыВозвратТоваровПоставщику КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура          КАК Номенклатура,
	|	СерииИзТЧСерии.Характеристика        КАК Характеристика,
	|	СерииИзТЧСерии.Серия                 КАК Серия,
	|	СерииИзТЧСерии.Количество            КАК Количество
	|ИЗ
	|	СерииИзТЧСерииВозвратТоваровПоставщику КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура,
	|	СерииИзТЧСерии.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СерииИзТЧСерии.Количество
	|ИЗ
	|	СерииИзТЧСерииВозвратТоваровПоставщику КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияВозвратТоваровПоставщику.ОрганизацияПолучатель,
	|	СкладскиеДвиженияВозвратТоваровПоставщику.Номенклатура,
	|	СкладскиеДвиженияВозвратТоваровПоставщику.Характеристика,
	|	СкладскиеДвиженияВозвратТоваровПоставщику.Серия,
	|	СкладскиеДвиженияВозвратТоваровПоставщику.Количество
	|ИЗ
	|	СкладскиеДвиженияВозвратТоваровПоставщику КАК СкладскиеДвиженияВозвратТоваровПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладскиеДвиженияВозвратТоваровПоставщику.ОрганизацияПолучатель,
	|	СкладскиеДвиженияВозвратТоваровПоставщику.Номенклатура,
	|	СкладскиеДвиженияВозвратТоваровПоставщику.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СкладскиеДвиженияВозвратТоваровПоставщику.Количество
	|ИЗ
	|	СкладскиеДвиженияВозвратТоваровПоставщику КАК СкладскиеДвиженияВозвратТоваровПоставщику
	|
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


#Область ТоварыСерии

Функция ТекстЗапросаОтчетОРозничныхПродажах() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка            КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.Помещение         КАК Помещение,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыОтчетОРозничныхПродажах
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = ТаблицаТовары.Номенклатура
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&Документ)
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|	И (СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчетаПартионнаяПродукция)
	|	ИЛИ (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|		И НЕ СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Помещение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка            КАК Ссылка,
	|	ТаблицаСерии.Ссылка.Организация КАК ОрганизацияПолучатель,
	|	ТаблицаСерии.Номенклатура      КАК Номенклатура,
	|	ТаблицаСерии.Характеристика    КАК Характеристика,
	|	ТаблицаСерии.Серия             КАК Серия,
	|	ТаблицаСерии.Помещение         КАК Помещение,
	|	СУММА(ТаблицаСерии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииОтчетОРозничныхПродажах
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Серии КАК ТаблицаСерии
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = ТаблицаСерии.Номенклатура
	|ГДЕ
	|	ТаблицаСерии.Ссылка В (&Документ)
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|	И (СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчетаПартионнаяПродукция)
	|	ИЛИ (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|		И НЕ СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Помещение
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Ссылка                                     КАК Ссылка,
	|	Серии.ОрганизацияПолучатель                      КАК ОрганизацияПолучатель,
	|	Серии.Номенклатура                               КАК Номенклатура,
	|	Серии.Характеристика                             КАК Характеристика,
	|	Серии.Серия                                      КАК Серия,
	|	Серии.Количество - ЕСТЬNULL(Товары.Количество,0) КАК Количество
	|ПОМЕСТИТЬ СерииИзТЧСерииОтчетОРозничныхПродажах
	|ИЗ
	|	СерииОтчетОРозничныхПродажах КАК Серии
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОтчетОРозничныхПродажах КАК Товары
	|	ПО Товары.Ссылка = Серии.Ссылка
	|	И Товары.Номенклатура = Серии.Номенклатура
	|	И Товары.Характеристика = Серии.Характеристика
	|	И Товары.Серия = Серии.Серия
	|	И Товары.Помещение = Серии.Помещение
	|ГДЕ
	|	Серии.Количество > ЕСТЬNULL(Товары.Количество,0)
	|;
	|
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия,
	|	Товары.Количество            КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоварыОтчетОРозничныхПродажах
	|ИЗ
	|	ТоварыОтчетОРозничныхПродажах КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура          КАК Номенклатура,
	|	СерииИзТЧСерии.Характеристика        КАК Характеристика,
	|	СерииИзТЧСерии.Серия                 КАК Серия,
	|	СерииИзТЧСерии.Количество            КАК Количество
	|ИЗ
	|	СерииИзТЧСерииОтчетОРозничныхПродажах КАК СерииИзТЧСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииИзТЧСерии.ОрганизацияПолучатель,
	|	СерииИзТЧСерии.Номенклатура,
	|	СерииИзТЧСерии.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	-СерииИзТЧСерии.Количество
	|ИЗ
	|	СерииИзТЧСерииОтчетОРозничныхПродажах КАК СерииИзТЧСерии
	|
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Товары

Функция ТекстЗапросаКорректировкаРеализации(УчетОтрицательныхРасхождений = Ложь) Экспорт
	
	Если УчетОтрицательныхРасхождений Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка.Организация КАК ОрганизацияПолучатель,
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаТоварыКорректировкаРеализации
		|ИЗ
		|	Документ.КорректировкаРеализации.Расхождения КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&Документ)
		|	И ТаблицаТовары.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ТаблицаТовары.Количество <> 0
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка.Организация КАК ОрганизацияПолучатель,
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаТоварыКорректировкаРеализации
		|ИЗ
		|	Документ.КорректировкаРеализации.Расхождения КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&Документ)
		|	И ТаблицаТовары.Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ТаблицаТовары.Количество > 0
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|
		|";
		
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область ПодборТоваровИзОрдеров

// Заполнить штрихкоды упаковок (расход).
// 
// Параметры:
//  РаспоряженияДляОрдеров - Массив Из ДокументСсылка - Распоряжения для ордеров
//  Товары - ТаблицаЗначений - Товары
//  ШтрихкодыУпаковок - ТаблицаЗначений - Штрихкоды упаковок
Процедура ЗаполнитьШтрихКодыУпаковок(РаспоряженияДляОрдеров, Товары, ШтрихкодыУпаковок) Экспорт

//++ Локализация

	ТаблицаШтрихкодыУпаковок = ШтрихкодыПоРаспоряжению(РаспоряженияДляОрдеров);
	
	Если ТаблицаШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсеШтрихкоды = Новый Соответствие;
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		ВсеШтрихкоды.Вставить(Строка.ШтрихкодУпаковки, Истина);
	КонецЦикла;
	
	//Добавляются все штрихкоды упаковок выбранной строки товаров. Даже при неполном подборе.
	//Так как заранее неизвестно что именно было передано в конкретный объект по ордерам.
	Для Каждого Строка Из Товары Цикл
		
		Если Строка.КоличествоВОрдере = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура",   Строка.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", Строка.Характеристика);
		ПараметрыПоиска.Вставить("Серия",          Строка.Серия);
		
		НайденныеОтгруженныеМарки = ТаблицаШтрихкодыУпаковок.НайтиСтроки(ПараметрыПоиска);
		
		Для каждого Марка Из НайденныеОтгруженныеМарки Цикл
			
			Если ВсеШтрихкоды.Получить(Марка.Штрихкод) = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеШтрихкоды.Вставить(Марка.Штрихкод, Истина);
			СтрокаТабМарки = ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабМарки, Строка);
			СтрокаТабМарки.ШтрихкодУпаковки = Марка.Штрихкод;
			СтрокаТабМарки.ИзОрдера = Истина;
			
		КонецЦикла;
	
	КонецЦикла;

//-- Локализация

КонецПроцедуры

Функция ШтрихкодыПоРаспоряжению(Распоряжения)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Ордер
	|ПОМЕСТИТЬ
	|	Ордера
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка.Проведен
	|	И Таблица.Распоряжение В (&Распоряжения)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Истина КАК Ссылка,
	|	Штрихкоды.ШтрихкодУпаковки КАК Штрихкод
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ШтрихкодыУпаковок КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка В (ВЫБРАТЬ Ордера.Ордер ИЗ Ордера КАК Ордера)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	СоставШтрихкодов = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(ШтрихкодыУпаковок);
	Возврат СоставШтрихкодов;
	
КонецФункции

Процедура ПеренестиШтрихкодыУпаковок(Форма, ШтрихкодыУпаковок, ИмяТЧ = "ШтрихкодыУпаковок") Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	Штрихкоды = Новый Соответствие;
	Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТЧ] Цикл
		Штрихкоды.Вставить(СтрокаТЧ.ШтрихкодУпаковки, Истина);
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок Цикл
		Если Штрихкоды.Получить(СтрокаТЧ.ШтрихкодУпаковки) = Истина Тогда
			Продолжить;
		КонецЕсли;
		Штрихкоды.Вставить(СтрокаТЧ.ШтрихкодУпаковки, Истина);
		Форма.Объект[ИмяТЧ].Добавить().ШтрихкодУпаковки = СтрокаТЧ.ШтрихкодУпаковки;
	КонецЦикла;
	
	ПараметрыИнтеграцииМассив = Неопределено;
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграцииМассив = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграцииМассив<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграцииМассив = Неопределено Тогда
		ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Алкогольная);
		Если ПараметрыИнтеграции<>Неопределено Тогда
			ПараметрыИнтеграцииМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыИнтеграции);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыИнтеграцииМассив = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрыИнтеграцииФормыПроверки Из ПараметрыИнтеграцииМассив Цикл
		
		Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
			Возврат;
		КонецЕсли;
	
		Если ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок <> ИмяТЧ Тогда
			Продолжить;
		КонецЕсли;
	
		Настройки = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
		Настройки.Сценарий         = ПараметрыИнтеграцииФормыПроверки.Сценарий;
		Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
		Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
		Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
		Настройки.Товары           = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
		Настройки.Серии            = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиСерии;
		Настройки.ЧастичноеВыбытие = ПараметрыИнтеграцииФормыПроверки.ДоступноЧастичноеВыбытие;
		Настройки.ИспользоватьОСУ  = ПараметрыИнтеграцииФормыПроверки.ДоступныОбъемноСортовыеКоды;
		
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Возвращает данные перевозки из прикладного документа и связанных с ним объектов для использования в обработке
//   заполнения документов ГосИС.
//
// Параметры:
//   Основание             - ДокументСсылка - прикладной документ по которому заполняется исходящий документ ГосИС
//   ТранспортнаяНакладная - ДокументСсылка.ТранспортнаяНакладная, Неопределено - найденная оформленная транспортная накладная
//
// Возвращаемое значение:
//   Структура - реквизиты для заполнения исходящих документов ГосИС
//
Функция ДанныеПеревозки(Основание, ТранспортнаяНакладная) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТранспортноеСредство");
	Результат.Вставить("КурьерЭкспедитор");
	
	Результат.Вставить("АвтомобильГосударственныйНомер");
	Результат.Вставить("АвтомобильМарка");
	Результат.Вставить("АвтомобильТип");
	Результат.Вставить("АдресДоставки");
	Результат.Вставить("АдресПогрузки");
	Результат.Вставить("АдресДоставкиЗначенияПолей");
	Результат.Вставить("АдресПогрузкиЗначенияПолей");
	Результат.Вставить("ВидПеревозки");
	Результат.Вставить("Водитель");
	Результат.Вставить("ГосударственныйНомерПрицепа");
	Результат.Вставить("ЗаказчикПеревозки");
	Результат.Вставить("Перевозчик");
	Результат.Вставить("Прицеп");
	Результат.Вставить("ЗаданиеНаПеревозку");
	Результат.Вставить("Маршрут", Новый Массив);
	
	Если ЗначениеЗаполнено(ТранспортнаяНакладная) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ТранспортнаяНакладная);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортнаяНакладная.ЗаданиеНаПеревозку                      КАК ЗаданиеНаПеревозку,
		|	ТранспортнаяНакладная.ЗаданиеНаПеревозку.ТранспортноеСредство КАК ТранспортноеСредство,
		|	ТранспортнаяНакладная.ЗаданиеНаПеревозку.КурьерЭкспедитор     КАК КурьерЭкспедитор,
		|	ТранспортнаяНакладная.АвтомобильГосударственныйНомер          КАК АвтомобильГосударственныйНомер,
		|	ТранспортнаяНакладная.АвтомобильМарка                         КАК АвтомобильМарка,
		|	ТранспортнаяНакладная.АвтомобильТип                           КАК АвтомобильТип,
		|	ТранспортнаяНакладная.АдресДоставки                           КАК АдресДоставки,
		|	ТранспортнаяНакладная.АдресДоставкиЗначенияПолей              КАК АдресДоставкиЗначенияПолей,
		|	ТранспортнаяНакладная.АдресПогрузки                           КАК АдресПогрузки,
		|	ТранспортнаяНакладная.АдресПогрузкиЗначенияПолей              КАК АдресПогрузкиЗначенияПолей,
		|	ТранспортнаяНакладная.ВидПеревозки                            КАК ВидПеревозки,
		|	ТранспортнаяНакладная.Водитель                                КАК Водитель,
		|	ТранспортнаяНакладная.ГосударственныйНомерПрицепа             КАК ГосударственныйНомерПрицепа,
		|	ТранспортнаяНакладная.ЗаказчикПеревозки                       КАК ЗаказчикПеревозки,
		|	ТранспортнаяНакладная.Перевозчик                              КАК Перевозчик,
		|	ТранспортнаяНакладная.Прицеп                                  КАК Прицеп
		|ИЗ
		|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
		|ГДЕ
		|	ТранспортнаяНакладная.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Распоряжение", Основание);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВозможныеРаспоряжения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Распоряжение
		|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Распоряжение
		|	И РеализацияТоваровУслугТовары.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|	И РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаданиеНаПеревозку.Ссылка                         КАК ЗаданиеНаПеревозку,
		|	ЗаданиеНаПеревозку.ТранспортноеСредство           КАК ТранспортноеСредство,
		|	ЗаданиеНаПеревозку.КурьерЭкспедитор               КАК КурьерЭкспедитор,
		|	ЗаданиеНаПеревозку.АвтомобильГосударственныйНомер КАК АвтомобильГосударственныйНомер,
		|	ЗаданиеНаПеревозку.АвтомобильМарка                КАК АвтомобильМарка,
		|	ЗаданиеНаПеревозку.АвтомобильТип                  КАК АвтомобильТип,
		|	ЗаданиеНаПеревозку.ВидПеревозки                   КАК ВидПеревозки,
		|	ЗаданиеНаПеревозку.Водитель                       КАК Водитель,
		|	ЗаданиеНаПеревозку.ГосударственныйНомерПрицепа    КАК ГосударственныйНомерПрицепа,
		|	ЗаданиеНаПеревозку.Перевозчик                     КАК Перевозчик,
		|	ЗаданиеНаПеревозку.Прицеп                         КАК Прицеп,
		|	ЗаданиеНаПеревозку.Дата                           КАК ДатаОтгрузки,
		|	ЗаданиеНаПеревозкуМаршрут.Адрес                   КАК АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.АдресЗначенияПолей      КАК АдресДоставкиЗначенияПолей
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|		ПО ЗаданиеНаПеревозкуРаспоряжения.Ссылка = ЗаданиеНаПеревозку.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО ЗаданиеНаПеревозкуМаршрут.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
		|		И ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи
		|ГДЕ
		|	ЗаданиеНаПеревозку.Проведен
		|	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение В
		|		(ВЫБРАТЬ
		|			Распоряжение
		|		Из
		|			ВозможныеРаспоряжения)
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтгрузки Убыв";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ЗаданиеНаПеревозку) Тогда
		
		Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", Результат.ЗаданиеНаПеревозку);
		Запрос.УстановитьПараметр("Распоряжение", Основание);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Маршрут.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ МаршрутДо
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Маршрут КАК Маршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК Распоряжения
		|		ПО Распоряжения.Ссылка = &ЗаданиеНаПеревозку
		|		И Распоряжения.Распоряжение = &Распоряжение
		|		И Распоряжения.КлючСвязи = Маршрут.КлючСвязи
		|ГДЕ
		|	Маршрут.Ссылка = &ЗаданиеНаПеревозку
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Маршрут.НомерСтроки        КАК НомерСтроки,
		|	Распоряжения.Распоряжение  КАК Распоряжение,
		|	Маршрут.Адрес              КАК ПредставлениеАдреса,
		|	Маршрут.АдресЗначенияПолей КАК АдресЗначенияПолей
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Маршрут КАК Маршрут
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК Распоряжения
		|		ПО Распоряжения.Ссылка = &ЗаданиеНаПеревозку
		|		И Распоряжения.КлючСвязи = Маршрут.КлючСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаршрутДо КАК МаршрутДо
		|		ПО Маршрут.НомерСтроки < МаршрутДо.НомерСтроки
		|ГДЕ
		|	Маршрут.Ссылка = &ЗаданиеНаПеревозку
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";
		ВыборкаМаршрут = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Результат.Маршрут = Новый Массив;
		Пока ВыборкаМаршрут.Следующий() Цикл
			ПунктМаршрута = Новый Структура;
			ПунктМаршрута.Вставить("ПредставлениеАдреса");
			ПунктМаршрута.Вставить("АдресЗначенияПолей");
			ПунктМаршрута.Вставить("Распоряжения", Новый Массив);
			ВыборкаРаспоряжения = ВыборкаМаршрут.Выбрать();
			Пока ВыборкаРаспоряжения.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ПунктМаршрута, ВыборкаРаспоряжения);
				ПунктМаршрута.Распоряжения.Добавить(ВыборкаРаспоряжения.Распоряжение);
			КонецЦикла;
			Результат.Маршрут.Добавить(ПунктМаршрута);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

//Для расходных документов проверяет статус указания серий в строках товаров соответствующий FEFO (5,6,25). Считается
//   что такой статус в одной из строк позволяет выполнить автозаполнение (справок №2 или записей складского журнала)
//   в документе ГосИС также по FEFO (истечению сроков годности).
//
//Параметры:
//   Основание - ДокументСсылка - проверяемый документ-основание
//
//Возвращаемое значение:
//   Булево - серии в документе-основании указываются по FEFO
//
Функция СерииУказываютсяПоFEFO(Основание) Экспорт
	
	Результат = Ложь;
	
	ИмяТабличнойЧасти = Неопределено;
	ИмяПоляСтатусУказанияСерий = "СтатусУказанияСерий";
	ТипОснование = ТипЗнч(Основание);
	Если ТипОснование = Тип("ДокументСсылка.ВнутреннееПотребление")
		Или ТипОснование = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		Или ТипОснование = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипОснование = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ОрдерНаОтражениеПересортицыТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипОснование = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ПересортицаТоваров")
		Или ТипОснование = Тип("ДокументСсылка.ПорчаТоваров")
		Или ТипОснование = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипОснование = Тип("ДокументСсылка.СписаниеНедостачТоваров")

		Тогда
		ИмяТабличнойЧасти = ".Товары";
	ИначеЕсли ТипОснование = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		Тогда ИмяТабличнойЧасти = ".ТоварыПоРаспоряжениям";

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ Ссылка ИЗ Документ.%1%2 КАК Д ГДЕ Д.Ссылка = &Основание И (Д.%3 = 5 ИЛИ Д.%3 = 6 ИЛИ Д.%3 = 25)",
			Основание.Метаданные().Имя,
			ИмяТабличнойЧасти,
			ИмяПоляСтатусУказанияСерий);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Результат Тогда
		// Здесь 2 доступных поля Статус указания серий
		Если ТипОснование = Тип("ДокументСсылка.ПеремещениеТоваров")
			Тогда
			
			Запрос.Текст = СтрШаблон(
				"ВЫБРАТЬ Ссылка ИЗ Документ.%1%2 КАК Д ГДЕ Д.Ссылка = &Основание И (Д.%3 = 5 ИЛИ Д.%3 = 6 ИЛИ Д.%3 = 25)",
				Основание.Метаданные().Имя,
				ИмяТабличнойЧасти,
				"СтатусУказанияСерийОтправитель");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Истина;
			КонецЕсли;
		// Доступна серия в шапке
		ИначеЕсли ТипОснование = Тип("ДокументСсылка.СборкаТоваров") Тогда
			Запрос.Текст = СтрШаблон(
				"ВЫБРАТЬ Ссылка ИЗ Документ.СборкаТоваров КАК Д ГДЕ Д.Ссылка = &Основание И (Д.%1 = 5 ИЛИ Д.%1 = 6 ИЛИ Д.%1 = 25)",
				"СтатусУказанияСерий");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыКопированияДополнительныхДанныхНоменклатуры(Объект,
	ПараметрыСоздания,
	ПараметрыКопированияДополнительныхДанных,
	СоответствияСкопированныхОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК ПродукцияВЕТИС
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыСоздания.ИсточникКопирования);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС",
			НСтр("ru = 'Копировать связь с классификатором алкогольной продукции ЕГАИС'"),
			Истина);
	КонецЕсли;
		
	Если Не РезультатЗапроса[1].Пустой() Тогда 
		ПараметрыКопированияДополнительныхДанных.Добавить("КопироватьСвязьСКлассификаторомПродукцииВЕТИС",
			НСтр("ru = 'Копировать связь с классификатором продукции ВЕТИС'"),
			Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. НоменклатураЛокализация.ЗаполнитьПоПараметрамСоздания
//
Процедура ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания) Экспорт
	
	#Область ЕГАИС
	Если (ПараметрыСоздания.Свойство("ВидАлкогольнойПродукцииЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ВидАлкогольнойПродукцииЕГАИС)) Тогда
		
		Объект.ВидАлкогольнойПродукции = ПараметрыСоздания.ВидАлкогольнойПродукцииЕГАИС;
		
		Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
			|	ВидыНоменклатуры.ВидАлкогольнойПродукции = &ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукцииСовпадает
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	ВидыНоменклатуры.ОсобенностьУчета В (&ОсобенностьУчета)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидАлкогольнойПродукцииСовпадает УБЫВ";
			Запрос.УстановитьПараметр("ВидАлкогольнойПродукции", Объект.ВидАлкогольнойПродукции);
			ВестиУчетПива = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Пиво);
			ВестиУчетПиваВПотребительскихУпаковках = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках);
			ОсобенностьУчета = Новый Массив;
			Если ПараметрыСоздания.МаркируемаяПродукцияЕГАИС = Ложь
				И (ВестиУчетПива Или ВестиУчетПиваВПотребительскихУпаковках) Тогда
				Если ВестиУчетПива Тогда
					Запрос.УстановитьПараметр("ОсобенностьУчета", Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
				КонецЕсли;
				Если ВестиУчетПиваВПотребительскихУпаковках Тогда
					Запрос.УстановитьПараметр("ОсобенностьУчета", Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках);
				КонецЕсли;
			Иначе
				ОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
			КонецЕсли;
			Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
			
			ВидыНоменклатуры = Запрос.Выполнить().Выгрузить();
			
			Если ВидыНоменклатуры.Количество() > 0 Тогда
				
				Если ВидыНоменклатуры.Количество() = 1 Тогда
					// Один вид для алкогольной продукции - не важно, какой там указан вид алкогольной продукции по умолчанию: подставляем.
					Объект.ВидНоменклатуры = ВидыНоменклатуры[0].ВидНоменклатуры;
				ИначеЕсли ВидыНоменклатуры[0].ВидАлкогольнойПродукцииСовпадает
					И Не ВидыНоменклатуры[1].ВидАлкогольнойПродукцииСовпадает Тогда
					// Более одного вида для алкогольной продукции:
					// - Если в первом вид совпадает, а во втором нет - значит есть только один вид,
					//    в котором вид алкогольной продукции совпадает. Подставляем этот вид номенклатуры.
					// - Если в первом не совпадает, значит нет ни одного, с которым совпадает. Нечего подставлять. 
					// - Если совпадает и в первом, и во втором - значит есть более одного, с которым совпадет. Нечего подставлять.
					Объект.ВидНоменклатуры = ВидыНоменклатуры[0].ВидНоменклатуры;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование)
		И ПараметрыСоздания.Свойство("НаименованиеНоменклатурыЕГАИС")
		И Не ПустаяСтрока(ПараметрыСоздания.НаименованиеНоменклатурыЕГАИС) Тогда
		
		Объект.Наименование = ПараметрыСоздания.НаименованиеНоменклатурыЕГАИС;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.Наименование = ПараметрыСоздания.НаименованиеНоменклатурыЕГАИС;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеПолное)
		И ПараметрыСоздания.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС")
		И Не ПустаяСтрока(ПараметрыСоздания.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
		
		Объект.НаименованиеПолное = ПараметрыСоздания.ПолноеНаименованиеНоменклатурыЕГАИС;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.НаименованиеПолное = ПараметрыСоздания.ПолноеНаименованиеНоменклатурыЕГАИС;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОбъемДАЛ) 
		И ПараметрыСоздания.Свойство("ОбъемЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ОбъемЕГАИС) Тогда
		
		Объект.ОбъемДАЛ = ПараметрыСоздания.ОбъемЕГАИС / 10;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Крепость) 
		И ПараметрыСоздания.Свойство("КрепостьЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.КрепостьЕГАИС) Тогда
		
		Объект.Крепость = ПараметрыСоздания.КрепостьЕГАИС;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПроизводительИмпортерКонтрагент)
		И (ПараметрыСоздания.Свойство("ИмпортерЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ИмпортерЕГАИС)
		Или ПараметрыСоздания.Свойство("ИмпортерЕГАИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ПроизводительЕГАИС))Тогда
		
		Если ПараметрыСоздания.Свойство("ИмпортерЕГАИС")
			И ЗначениеЗаполнено(ПараметрыСоздания.ИмпортерЕГАИС) Тогда
			Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
			Объект.ПроизводительИмпортерКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыСоздания.ИмпортерЕГАИС, "Контрагент");
		Иначе
			Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
			Объект.ПроизводительИмпортерКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПараметрыСоздания.ПроизводительЕГАИС, "Контрагент");
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВЕТИС
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И (ПараметрыСоздания.Свойство("НаименованиеВЕТИС")
		Или ПараметрыСоздания.Свойство("АртикулВЕТИС")
		Или ПараметрыСоздания.Свойство("ЕдиницаИзмеренияВЕТИС")) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыНоменклатуры.Ссылка      КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
		|	ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий()
			И Выборка.Количество() = 1 Тогда
			
			Объект.ВидНоменклатуры = Выборка.ВидНоменклатуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование)
		И ПараметрыСоздания.Свойство("НаименованиеВЕТИС")
		И Не ПустаяСтрока(ПараметрыСоздания.НаименованиеВЕТИС) Тогда
		
		Объект.Наименование = ПараметрыСоздания.НаименованиеВЕТИС;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.Наименование = ПараметрыСоздания.НаименованиеВЕТИС;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Артикул)
		И ПараметрыСоздания.Свойство("АртикулВЕТИС")
		И Не ПустаяСтрока(ПараметрыСоздания.АртикулВЕТИС) Тогда
		
		Объект.Артикул = ПараметрыСоздания.АртикулВЕТИС;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) 
		И ПараметрыСоздания.Свойство("ЕдиницаИзмеренияВЕТИС")
		И ЗначениеЗаполнено(ПараметрыСоздания.ЕдиницаИзмеренияВЕТИС) Тогда
		
		Объект.ЕдиницаИзмерения = ПараметрыСоздания.ЕдиницаИзмеренияВЕТИС;
		
		ТипЕдиницы = "";
		ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
		
		Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область САТУРН
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И ПараметрыСоздания.Свойство("НаименованиеНоменклатурыСАТУРН") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыНоменклатуры.Ссылка      КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий()
			И Выборка.Количество() = 1 Тогда
			
			Объект.ВидНоменклатуры = Выборка.ВидНоменклатуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование)
		И ПараметрыСоздания.Свойство("НаименованиеНоменклатурыСАТУРН")
		И Не ПустаяСтрока(ПараметрыСоздания.НаименованиеНоменклатурыСАТУРН) Тогда
		
		Объект.Наименование = ПараметрыСоздания.НаименованиеНоменклатурыСАТУРН;
		ПараметрыСозданияСтруктура = Новый Структура(ПараметрыСоздания);
		ПараметрыСозданияСтруктура.Наименование = ПараметрыСоздания.НаименованиеНоменклатурыСАТУРН;
		ПараметрыСоздания = Новый ФиксированнаяСтруктура(ПараметрыСозданияСтруктура);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС");
	Если ПараметрКопирования <> Неопределено
		И ПараметрКопирования.Пометка Тогда
		
		ИнтеграцияЕГАИСУТ.КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС(
			Объект,
			ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
	КонецЕсли;
		
	ПараметрКопирования = ПараметрыКопированияДополнительныхДанных.НайтиПоЗначению("КопироватьСвязьСКлассификаторомПродукцииВЕТИС");
	Если ПараметрКопирования <> Неопределено
		И ПараметрКопирования.Пометка Тогда
		
		ИнтеграцияВЕТИСУТ.КопироватьСвязьСКлассификаторомПродукцииВЕТИС(
			Объект,
			ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъемМаркируемойПродукцииВЛитрах(Таблица) Экспорт
	
	ТаблицаДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаДляЗапроса.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДляЗапроса.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	Для Каждого Строка Из Таблица Цикл
		НоваяСтрока = ТаблицаДляЗапроса.Добавить();
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.ИндексСтроки = Таблица.Индекс(Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаДляЗапроса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	Таблица.ИндексСтроки
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	Таблица.ИндексСтроки,
	|	ЕСТЬNULL(ТаблицаНоменклатура.ОбъемДАЛ * 10, 0) КАК ОбъемВЛитрах
	|ИЗ
	|	Таблица КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатура
	|		ПО Таблица.Номенклатура = ТаблицаНоменклатура.Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Таблица[Выборка.ИндексСтроки].ОбъемВЛитрах = Выборка.ОбъемВЛитрах;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

Процедура ДополнитьПараметрыУказанияСерийФормыУточнениеСоставаУпаковкиИС(Параметры, Объект) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Параметры) = Тип("ФиксированнаяСтруктура") Тогда
		Параметры = Новый Структура(Параметры);
	КонецЕсли;
	Если Параметры.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция" Тогда
		Параметры.ИмяТЧТовары = "Товары";
		Параметры.ИменаПолейДополнительные.Удалить(
			Параметры.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
	КонецЕсли;
	Параметры.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные";
	Параметры.ИмяТЧСерии  = Параметры.ИмяТЧТовары;
	Параметры.ИменаПолейДляОпределенияРаспоряжения = Новый Массив;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	НовыйРеквизит = Новый РеквизитФормы("Отправитель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Получатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладОтправитель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НазначениеОтправителя", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НазначениеПолучателя", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов, "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСоСтрокамиОрдеровНаОтгрузку"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("НоменклатураОприходование", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ХарактеристикаОприходование", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийНаСкладах", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПереданныхТоваров", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ДополнитьПараметрыУказанияСерийФормыУточнениеДанныхИС(Параметры, Объект) Экспорт
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ОбщегоНазначения.СкопироватьРекурсивно(Параметры, Ложь);
	
	ИмяТЧ = "Товары";
	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("Получатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если Параметры.Свойство("ВыходныеИзделия") Тогда
		Параметры = Параметры.ВыходныеИзделия;
		ИмяТЧ = "ВыходныеИзделия";
		Объект.Получатель = Объект.Склад;
	КонецЕсли;
	Если Параметры.Свойство("Товары") Тогда
		Параметры = Параметры.Товары;
	КонецЕсли;
	Если Параметры.Свойство("ТЧ") Тогда
		Параметры = Параметры.ТЧ;
	КонецЕсли;
	
	Если Параметры.ИмяТЧТовары = "ПодобраннаяМаркируемаяПродукция" Тогда
		Параметры.ИмяТЧТовары = ИмяТЧ;
		Параметры.ИмяТЧСерии = ИмяТЧ;
		Параметры.ИменаПолейДополнительные.Удалить(
			Параметры.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
	КонецЕсли;
	Параметры.ТоварВШапке = Ложь;
	Параметры.ИмяТЧСерии  = Параметры.ИмяТЧТовары;
	Параметры.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
	Если ЗначениеЗаполнено(Параметры.ИмяПоляСклад) Тогда
		Параметры.ИмяПоляСклад = "Склад";
	КонецЕсли;
	Параметры.ИменаПолейДляОпределенияРаспоряжения = Новый Массив;
	
	Если Параметры.Свойство("СкладскиеОперации")
		И ТипЗнч(Параметры.СкладскиеОперации) = Тип("Массив") Тогда
		Параметры.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтражениеИзлишков);
		Параметры.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтражениеНедостач);
	КонецЕсли;
	
	ИнтеграцияИСУТКлиентСервер.ПараметрыУказанияСерийЗаменитьИмяТЧ(Параметры);
	
КонецПроцедуры

#КонецОбласти

Функция ЕстьРеквизит(ТекущаяСтрока, Имя, ПроверятьОбъект) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, Имя)
		Или (ПроверятьОбъект И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока.Объект, Имя));
	
КонецФункции

Процедура ЗаполнитьРеквизит(Приемник, Источник, Имя, ПроверятьОбъект) Экспорт
	
	Реквизиты = Новый Структура(Имя);
	ЗаполнитьЗначенияСвойств(Реквизиты, Источник);
	Если ПроверятьОбъект Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Источник.Объект);
	КонецЕсли;
	Приемник.Вставить(Имя, Реквизиты[Имя]);
	
КонецПроцедуры

// Данные государственного контракта.
// 
// Параметры:
//  ГосударственныйКонтракт - СправочникСсылка.ГосударственныеКонтракты,
//                            Массив из СправочникСсылка.ГосударственныеКонтракты.
// 
// Возвращаемое значение:
//  Соответствие из СправочникСсылка.ГосударственныеКонтракты:
//  * Ключ - СправочникСсылка.ГосударственныеКонтракты - ссылка на вссылка на гос.контракт.
//  * Значение - Структура:
//  ** НомерГосКонтракта - Строка.
//  ** ДатаГосКонтракта  - Дата.
//  ** НомерЗакупкиЕИС   - Строка.
Функция ДанныеГосударственногоКонтракта(ГосударственныйКонтракт) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ГосударственныеКонтракты.Ссылка                      КАК Ссылка,
	|	ГосударственныеКонтракты.ДатаЗаключения              КАК ДатаГосКонтракта,
	|	ГосударственныеКонтракты.НомерИГК                    КАК НомерГосКонтракта,
	|	ГосударственныеКонтракты.ИдентификационныйКодЗакупки КАК НомерЗакупкиЕИС
	|ИЗ
	|	Справочник.ГосударственныеКонтракты КАК ГосударственныеКонтракты
	|ГДЕ
	|	ГосударственныеКонтракты.Ссылка В (&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ГосударственныйКонтракт);
	ТаблицаРеквизитов  = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ЭлементКоллекции Из ТаблицаРеквизитов Цикл
		
		СтруктураРеквизитов = Новый Структура();
		СтруктураРеквизитов.Вставить("ДатаГосКонтракта");
		СтруктураРеквизитов.Вставить("НомерГосКонтракта");
		СтруктураРеквизитов.Вставить("НомерЗакупкиЕИС");
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ЭлементКоллекции);
		
		Результат.Вставить(ЭлементКоллекции.Ссылка, СтруктураРеквизитов);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтеграцияОтдельныхФормИГосИС

Функция ПроверитьМодификацияФормыВыполнена(Форма)
	
	Если Форма.ПараметрыИнтеграцииГосИС.Получить("Инициализация")<> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	Возврат Ложь;
	
КонецФункции

#Область ПроверкаЗаполненияДокументов

// Локализация: встраивание команды проверки и подбора алкогольной продукции в форму проверки заполнения документов
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - общая форма "ПроверкаЗаполненияДокументов"
//
Процедура МодифицироватьИнициализироватьФормуПроверкиЗаполненияДокументов(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СохраненВыборПоМаркируемойПродукции", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ОрганизацияЕГАИС", Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, Новый Соответствие, ДобавляемыеРеквизиты);
	
	Таблица = Новый РеквизитФормы("АкцизныеМарки", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("ИдентификаторСтроки", Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип,"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("КодАкцизнойМарки", Метаданные.ОпределяемыеТипы.КодАкцизнойМарки.Тип, "АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("АкцизнаяМарка", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Количество",Новый ОписаниеТипов("Число"),"АкцизныеМарки");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("МаркируемаяПродукция", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("АлкогольнаяПродукция", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ИндексАкцизнойМарки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("КоличествоАкцизныхМарок", Новый ОписаниеТипов("Число"),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("НоменклатураЕГАИС", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"),"Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Товары");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	РеквизитыТаблицыТовары = Форма.ПолучитьРеквизиты("Товары");
	МассивИменРеквизитовТаблицыТовары = Новый Массив;
	Для Каждого РеквизитТаблицы Из РеквизитыТаблицыТовары Цикл
		МассивИменРеквизитовТаблицыТовары.Добавить(РеквизитТаблицы.Имя);
	КонецЦикла;
	СтрокаРеквизитовТаблицыТовары = СтрСоединить(МассивИменРеквизитовТаблицыТовары, ",");
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", СтрокаРеквизитовТаблицыТовары);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Проверить акцизные марки'");
		
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ГруппаКоманднаяПанель);
	Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.Картинка              = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	Кнопка.Отображение           = ОтображениеКнопки.Картинка;
	
#КонецОбласти
	
#Область Элементы
	
	ПутьКРеквизиту = "Товары.НоменклатураЕГАИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыНоменклатураЕГАИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.Номенклатура);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Заголовок = НСтр("ru = 'Алкогольная продукция'");
	
	ПутьКРеквизиту = "Товары.ИндексАкцизнойМарки";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыИндексАкцизнойМарки",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.ТоварыИндексНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	
#КонецОбласти
	
#Область Инициализация

	Форма.ИспользоватьАкцизныеМарки            = Форма.Параметры.ИспользоватьАкцизныеМарки;
	Форма.ОрганизацияЕГАИС                     = Форма.Параметры.ОрганизацияЕГАИС;
	
	Если Форма.ИспользоватьАкцизныеМарки Тогда
		ИнтеграцияЕГАИСУТ.АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(Форма, "КоличествоФакт");
	КонецЕсли;
	
	Настройки = ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека();
	Настройки.Объект = "";
	Настройки.Серии = "";
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки, Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, Настройки);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);

#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ТоварыИндексАкцизнойМарки.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость       = Форма.ИспользоватьАкцизныеМарки;
	
#КонецОбласти
	
КонецПроцедуры

Функция РезультатСканированияАкцизныхМарокВФормеПроверкиЗаполненияДокументов(Форма) Экспорт
	
	// Создаем пустую таблицу Товаров
	ТаблицаТовары = Форма.ТоварыОтвязаноОтНабора.Выгрузить(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())).СкопироватьКолонки();
	
	Для Каждого СтрокаТЧ Из Форма.ТоварыОтвязаноОтНабора Цикл
		НоваяСтрока = Форма.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,,"КоличествоУпаковок,НоменклатураНабора, ХарактеристикаНабора, ИндексНабора");
		НоваяСтрока.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоУпаковок;
		НоваяСтрока.КоличествоУпаковокФактИтог = СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Форма.Товары Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
	КонецЦикла;
	
	Форма.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаТовары, Форма.АдресВоВременномХранилище);
	
	ПараметрыЗакрытия = новый Структура;
	ПараметрыЗакрытия.Вставить("Товары",        Форма.АдресВоВременномХранилище);
	ПараметрыЗакрытия.Вставить("АкцизныеМарки", ПоместитьВоВременноеХранилище(Форма.АкцизныеМарки.Выгрузить()));
	
	Возврат ПараметрыЗакрытия;
	
КонецФункции

#КонецОбласти

#Область СправочникНастройкиРМК

Процедура МодифицироватьИнициализироватьФормуНастройкиРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("ИдентификаторФСРАР", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИдентификаторФСРАР", Новый ОписаниеТипов("Строка"), "Объект.КассыККМ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ПараметрыПодключенияЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(31)));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ПараметрыПодключенияЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(31)), "Объект.КассыККМ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СтатусПодключенияКЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15)));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СтатусПодключенияКЕГАИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15)), "Объект.КассыККМ");
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ЧтениеНастройкиОбменаЕГАИС", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыПроверитьПодключение = "НастроитьПараметрыПодключенияЕГАИС";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыПроверитьПодключение);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Настроить параметры подключения к ЕГАИС'");
		
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыПроверитьПодключение, Тип("КнопкаФормы"), ЭлементыФормы.КассыККМ.КоманднаяПанель);
	Кнопка.ИмяКоманды            = ИмяКомандыПроверитьПодключение;
	
#КонецОбласти
	
#Область Элементы
	
	ТекстСостояния = ЭлементыФормы.Добавить(
		"ДекорацияПараметрыПодключенияЕГАИС",
		Тип("ДекорацияФормы"),
		ЭлементыФормы.ГруппаОднаКассаККМ);
	ТекстСостояния.Вид = ВидДекорацииФормы.Надпись;
	
	ПутьКРеквизиту = "Объект.КассыККМ.ПараметрыПодключенияЕГАИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"КассыККМПараметрыПодключенияЕГАИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.КассыККМ);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Заголовок = НСтр("ru = 'Параметры подключения к ЕГАИС'");
	
#КонецОбласти
	
#Область Инициализация
	
	Форма.ЧтениеНастройкиОбменаЕГАИС         = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС);
	РедактированиеНастройкиОбменаЕГАИС = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС);
	ЗаполнитьПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма);
	
#КонецОбласти
	
#Область Интерфейс
	
	Если Форма.ИспользоватьНесколькоКассККМ Тогда
		ЭлементыФормы.ДекорацияПараметрыПодключенияЕГАИС.Видимость = Ложь;
		ЭлементыФормы.НастроитьПараметрыПодключенияЕГАИС.Видимость = РедактированиеНастройкиОбменаЕГАИС;
	Иначе
		ЭлементыФормы.НастроитьПараметрыПодключенияЕГАИС.Видимость = Ложь;
		ЭлементыФормы.КассыККМПараметрыПодключенияЕГАИС.Видимость  = Ложь;
		ЭлементыФормы.ДекорацияПараметрыПодключенияЕГАИС.Видимость = РедактированиеНастройкиОбменаЕГАИС;
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма) Экспорт
	
	Если Форма.ИспользоватьНесколькоКассККМ Тогда
		КассыККМ = Форма.Объект.КассыККМ.Выгрузить(,"КассаККМ").ВыгрузитьКолонку("КассаККМ");
	Иначе
		КассыККМ = Новый Массив;
		КассыККМ.Добавить(Форма.КассаККМ);
	КонецЕсли;
	
	ТаблицаПараметров = ТаблицаПараметровКассЕГАИС(Форма.Объект.РабочееМесто, КассыККМ);
	
	Если Форма.ИспользоватьНесколькоКассККМ Тогда
		Для Каждого ТекСтрока Из Форма.Объект.КассыККМ Цикл
			ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, ТекСтрока);
		КонецЦикла;
	Иначе
		ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, Форма);
		УстановитьЗаголовокПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПодключенияЕГАИСВСтрокеВФормеСправочникаНастроекРМК(Форма, ИдентификаторСтроки = Неопределено) Экспорт
	
	Если (ИдентификаторСтроки = Неопределено) Тогда
		ТекСтрока = Форма;
	Иначе
		ТекСтрока = Форма.Объект.КассыККМ.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	КассыККМ = ТекСтрока.КассаККМ;
	ТаблицаПараметров = ТаблицаПараметровКассЕГАИС(Форма.Объект.РабочееМесто, КассыККМ);
	
	ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, ТекСтрока);
	
	Если ИдентификаторСтроки = Неопределено Или Не Форма.ИспользоватьНесколькоКассККМ Тогда
		УстановитьЗаголовокПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПараметровКассЕГАИС(РабочееМесто, КассыККМ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	ПараметрыПодключенияЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	ПараметрыПодключенияЕГАИС.АдресУТМ КАК АдресУТМ,
	|	ПараметрыПодключенияЕГАИС.ПортУТМ КАК ПортУТМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО КлассификаторОрганизацийЕГАИС.Контрагент = КассыККМ.Владелец
	|		И КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = КассыККМ.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК ПараметрыПодключенияЕГАИС
	|		ПО ПараметрыПодключенияЕГАИС.РабочееМесто = &РабочееМесто
	|		И ПараметрыПодключенияЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КассыККМ.Ссылка В (&КассыККМ)
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)";
	
	Запрос.УстановитьПараметр("КассыККМ", КассыККМ);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьВСтрокеПараметрыПодключенияЕГАИС(ТаблицаПараметров, ФормаСтрока)
	
	СтрокаПараметров = ТаблицаПараметров.Найти(ФормаСтрока.КассаККМ, "КассаККМ");
	Если СтрокаПараметров = Неопределено Тогда
		ФормаСтрока.ПараметрыПодключенияЕГАИС = НСтр("ru = '<не указываются>'");
		ФормаСтрока.СтатусПодключенияКЕгаис = "НеУказываются";
		ФормаСтрока.ИдентификаторФСРАР = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.АдресУТМ) Тогда
		ФормаСтрока.ПараметрыПодключенияЕГАИС = "" + СтрокаПараметров.АдресУТМ + ":" + Формат(СтрокаПараметров.ПортУТМ, "ЧГ=0");
		ФормаСтрока.СтатусПодключенияКЕгаис = "Указываются";
		ФормаСтрока.ИдентификаторФСРАР = СтрокаПараметров.ИдентификаторФСРАР;
	Иначе
		ФормаСтрока.ПараметрыПодключенияЕГАИС = НСтр("ru = '<не настроены>'");
		ФормаСтрока.СтатусПодключенияКЕгаис = "Настроить";
		ФормаСтрока.ИдентификаторФСРАР = СтрокаПараметров.ИдентификаторФСРАР;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокПараметрыПодключенияЕГАИСВФормеСправочникаНастроекРМК(Форма)
	
	СтрокаЗаголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Параметры подключения к ЕГАИС'"));
	Ссылка = "ПараметрыПодключенияКЕГАИС";
	Если Форма.СтатусПодключенияКЕГАИС = "Настроить" Тогда
		СтрокаСсылка = Новый ФорматированнаяСтрока(НСтр("ru = '<настроить>'"),,,,Ссылка);
	ИначеЕсли Форма.СтатусПодключенияКЕГАИС = "НеУказываются" Тогда
		СтрокаСсылка = Новый ФорматированнаяСтрока(Форма.ПараметрыПодключенияЕГАИС);
	Иначе
		СтрокаСсылка = Новый ФорматированнаяСтрока(Форма.ПараметрыПодключенияЕГАИС,,,,Ссылка);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаЗаголовок);
	МассивСтрок.Добавить(": ");
	МассивСтрок.Добавить(СтрокаСсылка);
	
	Форма.Элементы.ДекорацияПараметрыПодключенияЕГАИС.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ДокументЧекФормаДокумента

// Добавляет на форму чека (чека возврата) реквизиты ГосИС (упрощенный вариант: флаг использования акцизных марок и видимость колонки "Номенклатура ЕГАИС")
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ФормаДокумента чека
//
Процедура МодифицироватьИнициализироватьФормуЧека(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Интерфейс
	
	ИспользоватьАкцизныеМарки = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
		Форма.Объект.Организация, Форма.Объект.Склад, Форма.Объект.Дата);
	ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = ИспользоватьАкцизныеМарки;
	
#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ФормыРМК

// Добавляет на форму РМК (чека ККМ, чека на возврат) реквизиты ГосИС
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - ФормаДокументаРМК
//
Процедура МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		ИнициализироватьФормуРМК(Форма,
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользуетсяРегистрацияРозничныхПродажВЕГАИС"),
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП"));
		Возврат;
	КонецЕсли;
	
	ЕстьЕГАИС = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ЕстьИСМП  = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СохраненВыборПоМаркируемойПродукции", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьЕГАИС Или ЕстьИСМП Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииГосИС, "Объект.Товары", ДобавляемыеРеквизиты);
		
		Если ЕстьИСМП Тогда
			Для Каждого ВидПродукцииИС Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
				ПараметрыИнтеграцииГосИС.Вставить(
					ВидПродукцииИС,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
						ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукцииИС)));
			КонецЦикла;
		КонецЕсли;
		
		Если ИнтеграцияИСВызовСервера.ВидыПродукцииИспользующиеВскрытыеПотребительскихУпаковок(,, Ложь).Количество() Тогда
			Реквизит = Новый РеквизитФормы("ЕстьВскрытыеПотребительскиеУпаковкиИС", Новый ОписаниеТипов("Булево"), "Объект.Товары");
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
		
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Реквизит = Новый РеквизитФормы("ИспользуетсяРегистрацияРозничныхПродажВЕГАИС", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Объект.Товары");
		ДобавляемыеРеквизиты.Добавить(Колонка);
		
	КонецЕсли;
	
	Если ЕстьИСМП Тогда
		Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Акцизные
	                                   | марки'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ГруппаНижняяКоманднаяПанельКонтекстныеКоманды4);
	Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.ЦветФона  = Новый Цвет(224, 224, 224);
	Кнопка.Ширина = 12;
	Кнопка.Высота = 3;
	Кнопка.ВысотаЗаголовка = 2;
	Кнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2, Истина, Ложь, Истина);
	
#КонецОбласти
	
#Область Элементы
	
	ПутьКРеквизиту = "Объект.Товары.СтатусПроверкиГосИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыСтатусПроверкиГосИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.ТоварыИндексНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	
	Если ЕстьЕГАИС Тогда
		
		ПутьКРеквизиту = "Объект.Товары.НоменклатураЕГАИС";
		КолонкаИнтерфейса = Форма.Элементы.Вставить(
			"ТоварыНоменклатураЕГАИС",
			Тип("ПолеФормы"),
			ЭлементыФормы.Товары,
			ЭлементыФормы.ТоварыГруппаНабор);
		КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
		КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеВвода;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область Инициализация

	ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП);
	
#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ТоварыСтатусПроверкиГосИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость    = Форма.ИспользоватьАкцизныеМарки;
	
	Если ЕстьЕГАИС Тогда
		
		Если Форма.ИспользоватьАкцизныеМарки Тогда
			
			ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = Истина;
			
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы.ТоварыНоменклатураЕГАИС.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НоменклатураЕГАИС");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция"));
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры

Процедура ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП)
	
	Если ЕстьИСМП Тогда
		Форма.КонтролироватьСтатусыКодовМаркировкиВРознице = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Форма.Объект.ОрганизацияЕГАИС = ИнтеграцияЕГАИСУТ.ОрганизацияЕГАИСПоОрганизацииИСкладу(Форма.Объект.Организация, Форма.Объект.Склад);
		КонецЕсли;
		
		Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
			Форма.Объект.Организация, Форма.Объект.Склад, ТекущаяДатаСеанса());
		
		Если Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			Форма.ИспользоватьАкцизныеМарки = Истина;
		КонецЕсли;
		
		ИнтеграцияЕГАИСУТ.ЗаполнитьАлкогольнуюПродукцию(Форма.Объект.Товары, Форма.Объект.Серии);
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(Форма, "НоменклатураПризнаки", СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Форма.Объект.Товары, СтруктураДействий);
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека(), Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

// Заполняет коды маркировки вскрытых потребительских упаковок
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма чека ККТ на продажу
//  СтрокиТоваров - Массив из ДанныеФормыКоллекция - Строки Товаров для заполнения кодов маркировки
//  ПрименятьКешШтрихкодов - Булево - Применять кеш штрихкодов. Используется в серверном вызове при завершении редактирования строки
Процедура ЗаполнитьКодыМаркировкиВскрытыхПотребительскихУпаковокИС(Форма, СтрокиТоваров, ПрименятьКешШтрихкодов = Ложь) Экспорт
	
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	ПараметрыСканирования  = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	Объект                 = Форма.Объект;
	СтрокиНесколькихСерий  = Новый Соответствие();
	ИсходныеСтрокиТоваров  = Новый Соответствие();
	
	ТекстПоляСвязиСерий = "";
	
	Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязиСерий = ТекстПоляСвязиСерий + "," + ПолеСвязи;
	КонецЦикла;
	
	СтруктураПоискаСерий = Новый Структура("Номенклатура,Характеристика" + ТекстПоляСвязиСерий);
	
	ТаблицаПоиска = Документы.ЧекККМ.СоздатьДокумент().Товары.Выгрузить();
	
	Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТовары);
			СтрокиСерий             = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(СтруктураПоискаСерий);
			КоличествоПоСериям      = СтрокиСерий.Итог("Количество");
			КоличествоПоТоварам     = СтрокаТовары.Количество;
			МаксимальныйИндексСерий = СтрокиСерий.Количество() - 1;
			
			Если МаксимальныйИндексСерий >= 0 Тогда
				
				Для ИндексСтроки = 0 По МаксимальныйИндексСерий Цикл
					
					СтрокаСерии = СтрокиСерий[МаксимальныйИндексСерий - ИндексСтроки];
					НоваяСтрока = ТаблицаПоиска.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					ИсходныеСтрокиТоваров.Вставить(НоваяСтрока, СтрокаТовары);
					НоваяСтрока.Серия = СтрокаСерии.Серия;
					НоваяСтрока.Количество = СтрокаСерии.Количество + (КоличествоПоТоварам - КоличествоПоСериям);
					
				КонецЦикла;
			
			Иначе
				
				НоваяСтрока = ТаблицаПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				ИсходныеСтрокиТоваров.Вставить(НоваяСтрока, СтрокаТовары);
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = ТаблицаПоиска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			ИсходныеСтрокиТоваров.Вставить(НоваяСтрока, СтрокаТовары);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = ШтрихкодированиеИС.ДобавитьИзменитьКодМаркировкиВскрытойПотребительскойУпаковки(
		ПараметрыСканирования,
		ТаблицаПоиска,
		Объект.АкцизныеМарки);
	
	Если Результат.ЕстьИзменения Тогда
		
		Для Каждого ШтрихкодУпаковки Из Результат.УдалитьКодыМакрировки Цикл
			СтруктураПоиска = Новый Структура("АкцизнаяМарка", ШтрихкодУпаковки);
			ПоискСтрок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			Если ПоискСтрок.Количество() Тогда
				Для Каждого СтрокаТаблицы Из ПоискСтрок Цикл
					Объект.АкцизныеМарки.Удалить(Объект.АкцизныеМарки.Индекс(СтрокаТаблицы));
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		СерииИзменены = Ложь;
		
		ОбработанныеКоды = Новый Соответствие();
	
		Для Каждого КлючИЗначение Из Результат.КодыМаркировки Цикл
			
			ДанныеУпаковки = КлючИЗначение.Значение;
			
			Для Каждого СтрокаДанныхУпаковки Из ДанныеУпаковки Цикл
				
				ШтрихкодУпаковки = СтрокаДанныхУпаковки.ШтрихкодУпаковки;
				СтруктураПоиска  = Новый Структура("АкцизнаяМарка", ШтрихкодУпаковки);
				ПоискСтрок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
				
				Если ПоискСтрок.Количество() Тогда
					
					СтрокаДанных = ПоискСтрок[0];
					Если ОбработанныеКоды[ШтрихкодУпаковки] = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДанныхУпаковки);
					Иначе
						СтрокаДанных.ЧастичноеВыбытиеКоличество = СтрокаДанных.ЧастичноеВыбытиеКоличество + СтрокаДанныхУпаковки.ЧастичноеВыбытиеКоличество
					КонецЕсли;
					
				Иначе
					
					СтрокаДанных = Объект.АкцизныеМарки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДанныхУпаковки);
					СтрокаДанных.АкцизнаяМарка = ШтрихкодУпаковки;
					
				КонецЕсли;
				
				Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий)
					И СтрокиНесколькихСерий[СтрокаТовары] = Неопределено Тогда
					СтруктураПоискаСерий.Вставить("Серия");
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, КлючИЗначение.Ключ);
					СтрокиСерий = Объект.Серии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерий.Количество() Тогда
						СтрокиСерий[0].Количество = КлючИЗначение.Ключ.Количество;
						СтрокиНесколькихСерий.Вставить(СтрокаТовары, СтрокиСерий[0]);
						СерииИзменены = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ОбработанныеКоды[ШтрихкодУпаковки] = Истина;
			
			КонецЦикла;
			
		КонецЦикла;
		
		Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
			И Результат.УстановленныеСерии.Количество() Тогда
			
			ТаблицаСерий = Объект.Серии.Выгрузить();
			ЕстьИзмененияВТаблицеСерий = Ложь;
			
			Для Каждого КлючИЗначение Из Результат.УстановленныеСерии Цикл
				
				СтрокаТовары = ИсходныеСтрокиТоваров[КлючИЗначение.Ключ];
				Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
					НоваяСтрока = ТаблицаСерий.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					НоваяСтрока.Серия = КлючИЗначение.Значение;
					ЕстьИзмененияВТаблицеСерий = Истина;
					СерииИзменены              = Истина;
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаТовары.Серия)
					И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
					СтрокаТовары.Серия = КлючИЗначение.Значение;
					СерииИзменены      = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИзмененияВТаблицеСерий Тогда
				Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(ТаблицаСерий);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СерииИзменены Тогда
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
			СобытияФорм.ПриИзмененииЭлемента(Форма, "Серии");
		КонецЕсли;
		
		НастройкиИсточникаКешаЧека = ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека();
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека);
		
		Если ПрименятьКешШтрихкодов Тогда
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовПроизводства

Процедура ДобавитьКомандуЗаполненияПоОтчетамПроизводственнойЛинии(Форма) Экспорт
	
	Если Форма.ПараметрыИнтеграцииГосИС.Получить("Инициализация")<> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыЗаполнитьПоДокументамМаркировки = "ЗаполнитьПоДокументамМаркировки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыЗаполнитьПоДокументамМаркировки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Заполнить по документам маркировки'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	ИмяПодменюЗаполнить = "ТоварыЗаполнить";

	
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыЗаполнитьПоДокументамМаркировки, Тип("КнопкаФормы"), ЭлементыФормы[ИмяПодменюЗаполнить]);
	Кнопка.ИмяКоманды            = ИмяКомандыЗаполнитьПоДокументамМаркировки;
	Кнопка.ТолькоВоВсехДействиях = Истина;
	
#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Номенклатура

Процедура ПроверкаЗаполненияПоВидамУпаковок(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Объект          = Форма.Объект;
	ЭтоНоменклатура = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура");
	
	Если ЭтоНоменклатура
		И (Объект.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво
			Или Объект.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках)
		И Форма.ИспользуетсяЧастичноеВыбытиеИС Тогда
			
		ТипИзмеряемойВеличины = Неопределено;
		Если Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипИзмеряемойВеличины)
			Или ТипИзмеряемойВеличины <> "Объем" Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'При продаже пива на разлив необходимо использовать единицу хранения ""л (дм3)""'"),,
				"Объект.ЕдиницаИзмерения",,
				Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ЭтоНоменклатура
		И ИнтеграцияИСУТКлиентСервер.ИспользуетсяОбщийНаборУпаковок(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИспользуетсяЧастичноеВыбытиеИС Тогда
		
		Если ЗначениеЗаполнено(Форма.УпаковкаЧастичногоВыбытияИС) Тогда
			
			КоэффициентыПоВидамУпаковок = КоэффициентыПоВидамУпаковок(Форма);
			
			Если Не ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС)
				И Форма.ЭтоМернаяЕдиницаИС Тогда
				ПроверяемыеРеквизиты.Добавить("ПотребительскаяУпаковкаИС");
			ИначеЕсли Форма.ПотребительскаяУпаковкаИС = Форма.УпаковкаЧастичногоВыбытияИС Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Упаковка частичного выбытия не может совпадать с потребительской'"),,,
					"УпаковкаЧастичногоВыбытияИС",
					Отказ);
			ИначеЕсли КоэффициентыПоВидамУпаковок.КоэффициентУпаковкиЧастичногоВыбытия >= КоэффициентыПоВидамУпаковок.КоэффициентПотребительскойУпаковки Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Упаковка частичного выбытия должна иметь меньшее количество товара чем потребительская'"),,,
					"УпаковкаЧастичногоВыбытияИС",
					Отказ);
			КонецЕсли;
			
		ИначеЕсли ЭтоНоменклатура Тогда
			
			ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Объект.ОсобенностьУчета);
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Поле ""%1"" не заполнено.'"),
					ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции)),,
				"УпаковкаЧастичногоВыбытияИС",,
				Отказ);
		Иначе
			
			ПроверяемыеРеквизиты.Добавить("УпаковкаЧастичногоВыбытияИС");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КоэффициентыПоВидамУпаковок(Форма)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("КоэффициентПотребительскойУпаковки",   1);
	ВозвращаемоеЗначение.Вставить("КоэффициентУпаковкиЧастичногоВыбытия", 1);
	
	СсылкаНаЭлемент = Форма.Объект.Ссылка;
	
	Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		МассивУпаковок = Новый Массив();
		МассивУпаковок.Добавить(Новый Структура("Упаковка,Номенклатура", Форма.ПотребительскаяУпаковкаИС,   СсылкаНаЭлемент));
		МассивУпаковок.Добавить(Новый Структура("Упаковка,Номенклатура", Форма.УпаковкаЧастичногоВыбытияИС, СсылкаНаЭлемент));

		КоэффициентыУпаковок = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентыУпаковок(МассивУпаковок)[СсылкаНаЭлемент];

		Если ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС)
			И Форма.ПотребительскаяУпаковкаИС <> Форма.Объект.ЕдиницаИзмерения Тогда
			ВозвращаемоеЗначение.КоэффициентПотребительскойУпаковки = КоэффициентыУпаковок.Получить(Форма.ПотребительскаяУпаковкаИС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.УпаковкаЧастичногоВыбытияИС)
			И Форма.УпаковкаЧастичногоВыбытияИС <> Форма.Объект.ЕдиницаИзмерения Тогда
			ВозвращаемоеЗначение.КоэффициентУпаковкиЧастичногоВыбытия = КоэффициентыУпаковок.Получить(Форма.УпаковкаЧастичногоВыбытияИС);
		КонецЕсли;
		
	Иначе
		
		МассивУпаковок = Новый Массив();
		МассивУпаковок.Добавить(Форма.ПотребительскаяУпаковкаИС);
		МассивУпаковок.Добавить(Форма.УпаковкаЧастичногоВыбытияИС);

		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивУпаковок, "КоличествоУпаковок, Числитель, Знаменатель");
		Если ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС)
			И Форма.ПотребительскаяУпаковкаИС <> Форма.Объект.ЕдиницаИзмерения Тогда
			РеквизитыПотребительскойУпаковки = ЗначенияРеквизитов.Получить(Форма.ПотребительскаяУпаковкаИС);
			Если ЗначениеЗаполнено(РеквизитыПотребительскойУпаковки.Знаменатель) Тогда
				ВозвращаемоеЗначение.КоэффициентПотребительскойУпаковки = РеквизитыПотребительскойУпаковки.Числитель / РеквизитыПотребительскойУпаковки.Знаменатель;
			КонецЕсли;
			Если ЗначениеЗаполнено(РеквизитыПотребительскойУпаковки.КоличествоУпаковок) Тогда
				ВозвращаемоеЗначение.КоэффициентПотребительскойУпаковки = ВозвращаемоеЗначение.КоэффициентПотребительскойУпаковки * РеквизитыПотребительскойУпаковки.КоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.УпаковкаЧастичногоВыбытияИС)
			И Форма.УпаковкаЧастичногоВыбытияИС <> Форма.Объект.ЕдиницаИзмерения Тогда
			РеквизитыЧастичногоВыбытия = ЗначенияРеквизитов.Получить(Форма.УпаковкаЧастичногоВыбытияИС);
			Если ЗначениеЗаполнено(Форма.УпаковкаЧастичногоВыбытияИС) Тогда
				Если ЗначениеЗаполнено(РеквизитыЧастичногоВыбытия.Знаменатель) Тогда
					ВозвращаемоеЗначение.КоэффициентУпаковкиЧастичногоВыбытия = РеквизитыЧастичногоВыбытия.Числитель / РеквизитыЧастичногоВыбытия.Знаменатель;
				КонецЕсли;				
				Если ЗначениеЗаполнено(РеквизитыЧастичногоВыбытия.КоличествоУпаковок) Тогда
					ВозвращаемоеЗначение.КоэффициентУпаковкиЧастичногоВыбытия = ВозвращаемоеЗначение.КоэффициентУпаковкиЧастичногоВыбытия * РеквизитыЧастичногоВыбытия.КоличествоУпаковок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьЗначениеПолейПоВидамУпаковок(Форма) Экспорт
	
	Объект                               = Форма.Объект;
	ДанныеНастройкиВидаУпаковки          = ДанныеНастройкиВидаУпаковки(Форма);
	Форма.ПотребительскаяУпаковкаИС      = ДанныеНастройкиВидаУпаковки.ПотребительскаяУпаковка;
	Форма.УпаковкаЧастичногоВыбытияИС    = ДанныеНастройкиВидаУпаковки.УпаковкаЧастичногоВыбытия;
	Форма.ИспользуетсяЧастичноеВыбытиеИС = ДанныеНастройкиВидаУпаковки.ЧастичноеВыбытиеИспользуется;
	
	Если Не ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС)
		И Не ДанныеНастройкиВидаУпаковки.МернаяЕдиница Тогда
		Форма.ПотребительскаяУпаковкаИС = Объект.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыеДанныеНастройкиВидаУпаковки()
	
	ДанныеНастройкиВидаУпаковки = Новый Структура();
	ДанныеНастройкиВидаУпаковки.Вставить("ЕдиницаХранения",              Неопределено);
	ДанныеНастройкиВидаУпаковки.Вставить("МернаяЕдиница",                Ложь);
	ДанныеНастройкиВидаУпаковки.Вставить("ПотребительскаяУпаковка",      Неопределено);
	ДанныеНастройкиВидаУпаковки.Вставить("УпаковкаЧастичногоВыбытия",    Неопределено);
	ДанныеНастройкиВидаУпаковки.Вставить("ОсобенностьУчета",             Неопределено);
	ДанныеНастройкиВидаУпаковки.Вставить("ЧастичноеВыбытиеИспользуется", Ложь);
	
	Возврат ДанныеНастройкиВидаУпаковки;
	
КонецФункции

Функция ДанныеНастройкиВидаУпаковки(Форма)
	
	Объект                      = Форма.Объект;
	ДанныеНастройкиВидаУпаковки = НовыеДанныеНастройкиВидаУпаковки();
	ИсточникДанных              = ИнтеграцияИСУТКлиентСервер.ИсточникДанныхПоВидамУпаковок(Форма);
	ЭтоНоменклатура             = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура");
	
	ДанныеНастройкиВидаУпаковки.ЕдиницаХранения              = Объект.ЕдиницаИзмерения;
	ДанныеНастройкиВидаУпаковки.МернаяЕдиница                = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	Если ЗначениеЗаполнено(ИсточникДанных) Тогда
		ДанныеОписания = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ИсточникДанных)[ИсточникДанных];
		ДанныеНастройкиВидаУпаковки.ПотребительскаяУпаковка      = ДанныеОписания.ПотребительскаяУпаковка;
		ДанныеНастройкиВидаУпаковки.УпаковкаЧастичногоВыбытия    = ДанныеОписания.УпаковкаЧастичногоВыбытия;
		ДанныеНастройкиВидаУпаковки.ЧастичноеВыбытиеИспользуется = ЗначениеЗаполнено(ДанныеОписания.ВариантЧастичногоВыбытия);
	КонецЕсли;
	
	Если ЭтоНоменклатура Тогда
		ДанныеНастройкиВидаУпаковки.ОсобенностьУчета = Объект.ОсобенностьУчета;
	КонецЕсли;
	
	Возврат ДанныеНастройкиВидаУпаковки;
	
КонецФункции

Процедура ЗаписатьДанныеПоВидамУпаковок(Форма, ТекущийОбъект, ПараметрыЗаписи, Отказ) Экспорт
	
	Блокировка       = Новый БлокировкаДанных();
	ИсточникОписания = ИнтеграцияИСУТКлиентСервер.ИсточникДанныхПоВидамУпаковок(ТекущийОбъект);
	ДанныеНастройки  = ДанныеНастройкиВидаУпаковки(Форма);
	
	Если ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.Номенклатура")
		И ТипЗнч(ИсточникОписания) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеНастройки.ПотребительскаяУпаковка)
		И Не ЗначениеЗаполнено(ДанныеНастройки.УпаковкаЧастичногоВыбытия) Тогда
		Если (Не ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС)
			И Не ЗначениеЗаполнено(Форма.УпаковкаЧастичногоВыбытияИС))
			Или (Форма.ПотребительскаяУпаковкаИС = ТекущийОбъект.ЕдиницаИзмерения
				И Не Форма.ИспользуетсяЧастичноеВыбытиеИС) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОписаниеНоменклатурыИС");
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", ИсточникОписания);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ДанныеОписания = ОбщегоНазначенияИС.ИнициализироватьДанныеОписанияНоменклатуры();
		ДанныеОписания.Номенклатура                        = ИсточникОписания;
		ДанныеОписания.ПотребительскаяУпаковка             = Форма.ПотребительскаяУпаковкаИС;
		ДанныеОписания.УпаковкаЧастичногоВыбытия           = Форма.УпаковкаЧастичногоВыбытияИС;
		ДанныеОписания.ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.ЗаданУпаковками;
		
		КоэффициентыПоВидамУпаковок = КоэффициентыПоВидамУпаковок(Форма);
		Если ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС) Тогда
			ДанныеОписания.КоличествоВПотребительскойУпаковке = КоэффициентыПоВидамУпаковок.КоэффициентПотребительскойУпаковки;
		Иначе
			ДанныеОписания.КоличествоВПотребительскойУпаковке = 0;
		КонецЕсли;
		
		Если Форма.ИспользуетсяЧастичноеВыбытиеИС Тогда
			ДанныеОписания.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура;
			Если КоэффициентыПоВидамУпаковок.КоэффициентУпаковкиЧастичногоВыбытия <> 0 Тогда
				ДанныеОписания.ЕмкостьПотребительскойУпаковки = ДанныеОписания.КоличествоВПотребительскойУпаковке / КоэффициентыПоВидамУпаковок.КоэффициентУпаковкиЧастичногоВыбытия;
			Иначе
				ВызватьИсключение НСтр("ru = 'Коэффициент упаковки частичного выбытия не должен = 0.'")
			КонецЕсли;
		Иначе
			ДанныеОписания.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка();
		КонецЕсли;
		
		РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеОписания);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка при записи данных по видам упаковок ИС МП:
			           |%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Отказ = Истина;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьЭлементыНастройкиВидаУпаковокПриСоздании(Форма) Экспорт
	
	ЭтоНоменклатура = ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура");
	
	Если ЭтоНоменклатура Тогда
		ГруппаОбщая = Форма.Элементы.Вставить(
			"СворачиваемаяГруппаГруппаВидыУпаковокИС",
			Тип("ГруппаФормы"),
			Форма.Элементы.ГруппаПраво,
			Форма.Элементы.СворачиваемаяГруппаФинансовыйУчет);
	Иначе
		ГруппаОбщая = Форма.Элементы.Вставить(
			"ГруппаВидыУпаковокИС",
			Тип("ГруппаФормы"),,
			Форма.Элементы.ГруппаЕдиницаДляОтчетов);
	КонецЕсли;
	ГруппаОбщая.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОбщая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОбщая.Заголовок   = НСтр("ru = 'Маркируемая продукция'");
	ГруппаОбщая.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	Если ЭтоНоменклатура Тогда
		ГруппаОбщая.Поведение             = ПоведениеОбычнойГруппы.Свертываемая;
		ГруппаОбщая.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		Если Не Форма.Объект.Ссылка.Пустая() Тогда
			ГруппаОбщая.Скрыть();
		КонецЕсли;
	КонецЕсли;
	
	ГруппаГИС = Форма.Элементы.Добавить("ГруппаВидыУпаковокЭлементыИС", Тип("ГруппаФормы"), ГруппаОбщая);
	ГруппаГИС.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаГИС.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаГИС.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаГИС.ОтображатьЗаголовок = Ложь;
	ГруппаГИС.Заголовок           = НСтр("ru = 'Маркируемая продукция'");
	
	Если ЭтоНоменклатура Тогда
		НовыйЭлемент = Форма.Элементы.Добавить("ТипНоменклатурыИС", Тип("ДекорацияФормы"), ГруппаГИС);
		НовыйЭлемент.АвтомаксимальнаяШирина = Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Массив();
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"ПотребительскаяУпаковкаИС",
			Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),,
			НСтр("ru = 'Потребительская упаковка'"),
			Истина));
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"ИспользуетсяЧастичноеВыбытиеИС",
			Новый ОписаниеТипов("Булево"),,
			НСтр("ru = 'Частичное выбытие'"),
			Истина));
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"УпаковкаЧастичногоВыбытияИС",
			Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),,
			НСтр("ru = 'Частичное выбытие'"),
			Истина));
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"ЭтоМернаяЕдиницаИС",
			Новый ОписаниеТипов("Булево")));
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	СвязиПараметровВыбора                          = Новый Массив();
	ПараметрыВыбора                                = Новый Массив();
	СвязиПараметровВыбораУпаковкиЧастичногоВыбытия = Новый Массив();
	
	НоваяСвязьПараметров = Новый СвязьПараметраВыбора("Номенклатура", "Объект.Ссылка");
	СвязиПараметровВыбораУпаковкиЧастичногоВыбытия.Добавить(НоваяСвязьПараметров);
	
	НовыйПараметр = Новый ПараметрВыбора("ТипИзмеряемойВеличины", Перечисления.ТипыИзмеряемыхВеличин.Упаковка);
	ПараметрыВыбора.Добавить(НовыйПараметр);
	
	НоваяСвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Ссылка");
	СвязиПараметровВыбора.Добавить(НоваяСвязьПараметров);
	
	НовыйЭлемент = Форма.Элементы.Добавить("ПотребительскаяУпаковкаИС", Тип("ПолеФормы"), ГруппаГИС);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	НовыйЭлемент.Ширина      = 9;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлемента");
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	НовыйЭлемент.ПараметрыВыбора          = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВыбора, Истина);
	НовыйЭлемент.СвязиПараметровВыбора    = ОбщегоНазначения.СкопироватьРекурсивно(СвязиПараметровВыбора, Истина);
	НовыйЭлемент.КнопкаОткрытия           = Ложь;
	НовыйЭлемент.КнопкаВыпадающегоСписка  = Ложь;
	НовыйЭлемент.КнопкаВыбора             = Истина;
	НовыйЭлемент.ОтображениеКнопкиВыбора  = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	
	ГруппаУпаковкаЧастичногоВыбытия = Форма.Элементы.Добавить(
		"ГруппаУпаковкаЧастичногоВыбытияИС",
		Тип("ГруппаФормы"),
		ГруппаГИС);
	ГруппаУпаковкаЧастичногоВыбытия.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаУпаковкаЧастичногоВыбытия.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаУпаковкаЧастичногоВыбытия.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаУпаковкаЧастичногоВыбытия.ОтображатьЗаголовок = Ложь;
	ГруппаУпаковкаЧастичногоВыбытия.Заголовок   = НСтр("ru = 'Частичное выбытие'");
	
	Если ЭтоНоменклатура Тогда
		ВидПодукции    = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ОсобенностьУчета);
		ТекстПодсказки = Новый ФорматированнаяСтрока(
			СтрШаблон(
				"%1: %2",
				ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПодукции),
				НСтр("ru = 'не используется, для настройки необходимо использовать упаковки.'")),,
			ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
		
		НовыйЭлемент = Форма.Элементы.Добавить("НадписьЧастичноеВыбытиеИС", Тип("ДекорацияФормы"), ГруппаГИС);
		НовыйЭлемент.АвтомаксимальнаяШирина = Ложь;
		НовыйЭлемент.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
	НовыйЭлемент = Форма.Элементы.Добавить(
		"ИспользуетсяЧастичноеВыбытиеИС",
		Тип("ПолеФормы"),
		ГруппаУпаковкаЧастичногоВыбытия);
	НовыйЭлемент.Вид                = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным        = НовыйЭлемент.Имя;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлемента");
	
	НовыйЭлемент = Форма.Элементы.Добавить(
		"УпаковкаЧастичногоВыбытияИС",
		Тип("ПолеФормы"),
		ГруппаУпаковкаЧастичногоВыбытия);
	НовыйЭлемент.Вид                = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным        = НовыйЭлемент.Имя;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Ширина             = 9;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлемента");
	НовыйЭлемент.РастягиватьПоГоризонтали  = Ложь;
	НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
	НовыйЭлемент.СвязиПараметровВыбора     = ОбщегоНазначения.СкопироватьРекурсивно(СвязиПараметровВыбораУпаковкиЧастичногоВыбытия, Истина);
	НовыйЭлемент.КнопкаОткрытия            = Ложь;
	НовыйЭлемент.КнопкаВыпадающегоСписка   = Ложь;
	НовыйЭлемент.КнопкаВыбора              = Истина;
	НовыйЭлемент.ОтображениеКнопкиВыбора   = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	
	Если ЭтоНоменклатура Тогда
		
		ИмяКоманды = "КомандаЗаполнитьУпаковкуЧастичногоВыбытияИС";
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Заголовок = НСтр("ru = 'Заполнить по данными ГИС МТ'");
		Команда.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		Команда.Подсказка = НСтр("ru = 'Выполняет получение емкости упаковки ГИС МТ и подбор подходящей упаковки номенклатуры.'");
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ИмяКоманды,
			Тип("КнопкаФормы"),
			ГруппаУпаковкаЧастичногоВыбытия);
		
		НовыйЭлемент.Отображение = ОтображениеКнопки.Картинка;
		НовыйЭлемент.Картинка    = БиблиотекаКартинок.ЗаполнитьФорму;
		НовыйЭлемент.ИмяКоманды  = ИмяКоманды;
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			"ВидыУпаковокПоGTINИСМП",
			Тип("ДекорацияФормы"),
			ГруппаГИС);
		НовыйЭлемент.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Виды упаковок по GTIN'"),,,, "ГиперссылкаОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеТипаНоменклатуры(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Товарная группа'")));
	МассивТекстов.Добавить(": ");
	Если ЗначениеЗаполнено(Объект.ОсобенностьУчета) Тогда
		МассивТекстов.Добавить(Строка(Объект.ОсобенностьУчета));
	Иначе
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<не указана>'"),,
																ЦветаСтиля.ЦветОсобогоТекста));
	КонецЕсли;
	
	Элементы.ТипНоменклатурыИС.Заголовок = Новый ФорматированнаяСтрока(МассивТекстов);
	
КонецПроцедуры

Процедура ИспользованиеЭлементов(ВидимостьЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов) Экспорт
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		
		ВидПродукции             = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Объект.ОсобенностьУчета);
		ДоступноЧастичноеВыбытие = ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции);
		ИспользутсяУпаковки      = (ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") И Объект.ИспользоватьУпаковки);
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Если ЗначениеЗаполнено(Объект.ВидАлкогольнойПродукции) Тогда
				ЭтоМаркируемаяАлкогольнаяПродукция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидАлкогольнойПродукции, "Маркируемый");
			Иначе
				ЭтоМаркируемаяАлкогольнаяПродукция = Ложь;
			КонецЕсли;
			ЭтоПродукцияИСМП = Ложь;
			ДоступноЧастичноеВыбытие = ДоступноЧастичноеВыбытие И ЭтоМаркируемаяАлкогольнаяПродукция;
		Иначе
			ЭтоМаркируемаяАлкогольнаяПродукция = Ложь;
			ЭтоПродукцияИСМП = ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина);
		КонецЕсли;
		
		ВидимостьЭлементов.Вставить("ТипНоменклатурыИС",              ЭтоПродукцияИСМП Или ЭтоМаркируемаяАлкогольнаяПродукция);
		ВидимостьЭлементов.Вставить("ПотребительскаяУпаковкаИС",      ЭтоПродукцияИСМП Или ЭтоМаркируемаяАлкогольнаяПродукция);
		ВидимостьЭлементов.Вставить("ВидыУпаковокПоGTINИСМП",         ЭтоПродукцияИСМП);
		ВидимостьЭлементов.Вставить("ИспользуетсяЧастичноеВыбытиеИС", ДоступноЧастичноеВыбытие И ИспользутсяУпаковки);
		ВидимостьЭлементов.Вставить("УпаковкаЧастичногоВыбытияИС",    ДоступноЧастичноеВыбытие И ИспользутсяУпаковки);
		ВидимостьЭлементов.Вставить("НадписьЧастичноеВыбытиеИС",      ДоступноЧастичноеВыбытие И Не ИспользутсяУпаковки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов) Экспорт
	
	ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Объект.ОсобенностьУчета);
	Если ВидимостьЭлементов["ИспользуетсяЧастичноеВыбытиеИС"] Тогда
		ЗаголовкиЭлементов.Вставить(
			"ИспользуетсяЧастичноеВыбытиеИС",
			ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, Знач СтрокаДерева, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат <> Неопределено Тогда
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Найденные = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
	
	Если Найденные.Количество() > 0 Тогда
		СтрокиРезультат = Найденные;
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, СтрокаДерева.Родитель, СтрокиРезультат);
	
КонецФункции

#КонецОбласти

#КонецОбласти
