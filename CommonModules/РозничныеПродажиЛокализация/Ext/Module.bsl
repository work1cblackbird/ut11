
#Область ПрограммныйИнтерфейс

#Область ФискальныеОперации

//++ Локализация

Функция ПолучитьТоварыИШтрихкодыДляИСМП(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки               КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
	|	ШтрихкодыУпаковок.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
	|	ШтрихкодыУпаковок.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	ШтрихкодыУпаковок.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
	|	&ИдентификаторЗапросаГИСМТ                       КАК РазрешительныйРежимИдентификаторЗапросаГИСМТ,
	|	&ДатаПолученияЗапросаГИСМТ                       КАК РазрешительныйРежимДатаЗапросаГИСМТ
	|ИЗ
	|	ТаблицаАкцизныеМарки КАК ШтрихкодыУпаковок";
	
	МассивУпаковок                  = Новый Массив();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторЗапросаГИСМТ", "ШтрихкодыУпаковок.РазрешительныйРежимИдентификаторЗапросаГИСМТ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаПолученияЗапросаГИСМТ", "ШтрихкодыУпаковок.РазрешительныйРежимДатаЗапросаГИСМТ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторЗапросаГИСМТ", "");
	Запрос.УстановитьПараметр("ДатаПолученияЗапросаГИСМТ", Дата(1, 1, 1));
	
	ВыборкаИзРезультатаПоШтрихкодам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИзРезультатаПоШтрихкодам.Следующий() Цикл
		
		НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ВыборкаИзРезультатаПоШтрихкодам);
		
		МассивУпаковок.Добавить(НовыйЭлемент);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Серии.НомерСтроки КАК НомерСтроки,
	|	Серии.СерияТаблицыСерий КАК СерияТаблицыСерий,
	|	Серии.КоличествоУпаковок КАК Количество,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика
	|ИЗ
	|	Серии КАК Серии";
	
	ТаблицаСерий = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия КАК СерияТаблицыТоваров,
	|	Товары.СтатусУказанияСерий,
	|	Товары.ОсобенностьУчета,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.СуммаСкидки КАК СуммаСкидки,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.ОсобенностьУчета В (
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Бакалея),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МоторныеМасла),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации),
	|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия))";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	ПоляИзмерения = Новый Массив;
	ПоляИзмерения.Добавить("Номенклатура");
	ПоляИзмерения.Добавить("Характеристика");
	
	ПоляДетализации = Новый Массив;
	ПоляДетализации.Добавить("СерияТаблицыСерий");
	
	ПоляСумм = Новый Массив;
	ПоляСумм.Добавить("СуммаСкидки");
	ПоляСумм.Добавить("СуммаНДС");
	ПоляСумм.Добавить("СуммаСНДС");
	ПоляСумм.Добавить("Количество");
	
	ТаблицаРезультатРаспределения = РаспределитьДанныеПоТаблицам(ТаблицаТовары, ТаблицаСерий, ПоляИзмерения, ПоляДетализации, ПоляСумм, "Количество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРезультатРаспределения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРезультатРаспределения.Номенклатура КАК Номенклатура,
	|	ТаблицаРезультатРаспределения.Характеристика КАК Характеристика,
	|	ТаблицаРезультатРаспределения.СерияТаблицыТоваров КАК СерияТаблицыТоваров,
	|	ТаблицаРезультатРаспределения.СерияТаблицыСерий КАК СерияТаблицыСерий,
	|	ТаблицаРезультатРаспределения.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаРезультатРаспределения.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТаблицаРезультатРаспределения.Упаковка КАК Упаковка,
	|	ТаблицаРезультатРаспределения.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаРезультатРаспределения.Количество КАК Количество,
	|	ТаблицаРезультатРаспределения.Цена КАК Цена,
	|	ТаблицаРезультатРаспределения.СуммаСкидки КАК СуммаСкидки,
	|	ТаблицаРезультатРаспределения.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРезультатРаспределения.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРезультатРаспределения.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ТаблицаРезультатРаспределения
	|ИЗ
	|	&ТаблицаРезультатРаспределения КАК ТаблицаРезультатРаспределения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРезультатРаспределения.НомерСтроки,
	|	ТаблицаРезультатРаспределения.Номенклатура,
	|	ТаблицаРезультатРаспределения.Характеристика,
	|	ТаблицаРезультатРаспределения.СерияТаблицыТоваров,
	|	ТаблицаРезультатРаспределения.СерияТаблицыСерий,
	|	ТаблицаРезультатРаспределения.СтатусУказанияСерий,
	|	ТаблицаРезультатРаспределения.ОсобенностьУчета,
	|	ТаблицаРезультатРаспределения.Упаковка,
	|	ТаблицаРезультатРаспределения.КоличествоУпаковок,
	|	ТаблицаРезультатРаспределения.Цена,
	|	ТаблицаРезультатРаспределения.СуммаСкидки,
	|	ТаблицаРезультатРаспределения.СтавкаНДС,
	|	ТаблицаРезультатРаспределения.СтавкаНДС.Ставка КАК СтавкаНДСЧислом,
	|	ТаблицаРезультатРаспределения.СуммаНДС,
	|	ТаблицаРезультатРаспределения.СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаРезультатРаспределения.СерияТаблицыСерий = НЕОПРЕДЕЛЕНО
	|			ТОГДА ТаблицаРезультатРаспределения.СерияТаблицыТоваров
	|		ИНАЧЕ ТаблицаРезультатРаспределения.СерияТаблицыСерий
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ТаблицаРезультатРаспределения.СерияТаблицыСерий = НЕОПРЕДЕЛЕНО
	|					ТОГДА ТаблицаРезультатРаспределения.СерияТаблицыТоваров
	|				ИНАЧЕ ТаблицаРезультатРаспределения.СерияТаблицыСерий
	|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ УчитыватьСерии,
	|	ТаблицаРезультатРаспределения.Количество КАК Количество,
	|	ТаблицаРезультатРаспределения.НомерСтроки КАК ИндексИсходнойСтроки
	|ИЗ
	|	ТаблицаРезультатРаспределения КАК ТаблицаРезультатРаспределения";
	Запрос.УстановитьПараметр("ТаблицаРезультатРаспределения", ТаблицаРезультатРаспределения);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Возврат Новый Структура("Товары, Штрихкоды", Товары, МассивУпаковок);
	
КонецФункции

// Получить данные для передачи МОТП сведений о розничной продаже
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные о продажах
//
Функция ДанныеДляИСМП(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт
	
	ДанныеДокумента = ПолучитьТоварыИШтрихкодыДляИСМП(ДокументСсылка, МенеджерВременныхТаблиц);
	
	Товары = ДанныеДокумента.Товары;
	Штрихкоды = ДанныеДокумента.Штрихкоды;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМВозврат")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМКоррекции") Тогда
		
		ДокументСтруктурой = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад,Статус,Дата");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ДокументСтруктурой = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад,ХозяйственнаяОперация,Статус,Дата");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ДокументСтруктурой = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад,Дата,ДокументОснование");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ДокументСтруктурой = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад,Дата,ХозяйственнаяОперация");
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректно встроен механизм распределения серий по товаром для расчета данных ИСМП: %1'"), 
				ОписаниеОшибки());
	КонецЕсли;
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	ПараметрыУказанияСерий = МенеджерОбъекта.ПараметрыУказанияСерий(ДокументСтруктурой);
	
	ТоварыРазобранные =
		РаспределитьШтрихкодыПоТаблицеТоваров(
			ДокументСсылка,
			Штрихкоды,
			ПараметрыУказанияСерий,
			Товары);
	
	Возврат ТоварыРазобранные;
	
КонецФункции

// Распределить штрихкоды по таблице товаров.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  МассивУпаковок - Массив ИЗ см. ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам - Массив
//  штрихкодов упаковок для распределения.
//  ПараметрыУказанияСерий - Структура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий - Параметры указания серий
//  Товары - ТаблицаЗначений - Товары
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Распределить штрихкоды по таблице товаров
Функция РаспределитьШтрихкодыПоТаблицеТоваров(ДокументСсылка, МассивУпаковок, ПараметрыУказанияСерий, Товары) Экспорт
	
	ДанныеРаспределения = ДанныеРаспределенияШтрихкодовУпаковокПоТоварам(
		ДокументСсылка, МассивУпаковок, ПараметрыУказанияСерий, Товары);
	
	Если ДанныеРаспределения.ЕстьОшибки Тогда
		ВызватьИсключение СтрСоединить(ДанныеРаспределения.Ошибки, Символы.ПС);
	КонецЕсли;
	
	ТекстОшибки = "";
	Для Каждого РаспределеннаяСтрока Из ДанныеРаспределения.РаспределенныеСтроки Цикл
		Для Каждого СтрокаЗначения Из РаспределеннаяСтрока.Значение Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗначения, "ТекстОшибки")
				И СтрокаЗначения.ТекстОшибки <> Неопределено И СтрокаЗначения.ТекстОшибки <> "" Тогда
				ТекстОшибки = ТекстОшибки + СтрокаЗначения.ТекстОшибки + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ТекстОшибки <> Неопределено И ТекстОшибки <> "" Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ТоварыРазобранные = НоваяТаблицаРаспределенныхТоваровПоШтрихкодам(Товары.СкопироватьКолонки());
	ОписанияНоменклатурыСЧастичнымВыбытием = Новый Соответствие;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		КоэффциентУпаковкиДокумента = СтрокаТовары.КоличествоУпаковок / СтрокаТовары.Количество;
		
		РаспределениеПоСтроке = ДанныеРаспределения.РаспределенныеСтроки.Получить(СтрокаТовары);
		
		Если РаспределениеПоСтроке = Неопределено
			ИЛИ (НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется()
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "ОсобенностьУчета")
				И СтрокаТовары.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха) Тогда
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		пКоличествоУпаковок = СтрокаТовары.КоличествоУпаковок;
		пСуммаСкидки        = СтрокаТовары.СуммаСкидки;
		пСуммаНДС           = СтрокаТовары.СуммаНДС;
		пСуммаСНДС          = СтрокаТовары.СуммаСНДС;
		
		ОтклонениеСуммыНДС = 0;
		
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			
			Если СтрокаТовары.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРаспределения, "ТекстОшибки") Тогда
				СтрокаТоварыРазобранные.ТекстОшибки = СтрокаРаспределения.ТекстОшибки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоварыРазобранные.ТекстОшибки) Тогда
				СтрокаТовары.Количество = СтрокаТовары.Количество - СтрокаРаспределения.Количество;
				Продолжить;
			КонецЕсли;
			
			СтрокаТоварыРазобранные.Количество = 1;
			СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаТоварыРазобранные.Количество
			                                             * КоэффциентУпаковкиДокумента;
			
			ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения = Ложь;
			КоэффициентПересчетаУпаковки = КоэффциентУпаковкиДокумента;
				
			Если ЗначениеЗаполнено(СтрокаРаспределения.Штрихкод) Тогда
				
				Если СтрокаРаспределения.ЧастичноеВыбытие Тогда
					
					ОписаниеНоменклатуры = ОписаниеНоменклатуры(
						СтрокаТовары.Номенклатура,
						ОписанияНоменклатурыСЧастичнымВыбытием);
					
					СтрокаТоварыРазобранные.Упаковка = ОписаниеНоменклатуры.УпаковкаЧастичногоВыбытия;
					
					КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
							СтрокаТоварыРазобранные.Упаковка,
							СтрокаТоварыРазобранные.Номенклатура);
					КоэффициентПересчетаУпаковки = 1 / КоэффициентУпаковки;
							
					СтрокаТоварыРазобранные.Количество = Мин(СтрокаРаспределения.Количество, СтрокаТовары.Количество);
					СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаТоварыРазобранные.Количество
					                                             * КоэффициентПересчетаУпаковки;
					
					СтрокаТоварыРазобранные.ДополнениеКНаименованиюТовара = СтруктураНаименованияТовара(
						СтрокаТовары,
						СтрокаРаспределения);
					
				ИначеЕсли СтрокаРаспределения.Количество <> 1 Тогда
					
					СтрокаТоварыРазобранные.Количество         = СтрокаРаспределения.Количество;
					СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаРаспределения.Количество
					                                             * КоэффициентПересчетаУпаковки;
					
					СтрокаТоварыРазобранные.ДополнениеКНаименованиюТовара = СтруктураНаименованияТовара(
						СтрокаТовары,
						СтрокаРаспределения);
					
				ИначеЕсли СтрокаРаспределения.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
					
					СтрокаТоварыРазобранные.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					СтрокаТоварыРазобранные.Количество = СтрокаРаспределения.Количество;
					
					ВДокументеПродажаУпаковки = ЗначениеЗаполнено(СтрокаТовары.Упаковка);
					Если ВДокументеПродажаУпаковки Тогда
						ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения = Истина;
					Иначе
						СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаРаспределения.Количество;
						КоэффициентПересчетаУпаковки = 1;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТовары.Количество = СтрокаТоварыРазобранные.Количество Тогда
				СуммаСкидки = СтрокаТовары.СуммаСкидки;
				СуммаНДС    = СтрокаТовары.СуммаНДС;
				СуммаСНДС   = СтрокаТовары.СуммаСНДС;              
			Иначе
				СуммаСкидки = Окр(пСуммаСкидки / пКоличествоУпаковок * СтрокаТоварыРазобранные.КоличествоУпаковок, 2);
				СуммаНДС    = Окр(пСуммаНДС    / пКоличествоУпаковок * СтрокаТоварыРазобранные.КоличествоУпаковок, 2);
				СуммаСНДС   = Окр(пСуммаСНДС   / пКоличествоУпаковок * СтрокаТоварыРазобранные.КоличествоУпаковок, 2);
			КонецЕсли;
			
			Если СтрокаТовары.Упаковка = СтрокаТоварыРазобранные.Упаковка Тогда
				Цена = СтрокаТовары.Цена;
			Иначе
				Цена = Окр((СуммаСНДС - СуммаСкидки) / СтрокаТоварыРазобранные.КоличествоУпаковок, 2);
			КонецЕсли;
			
			СтрокаТоварыРазобранные.КоэффициентПересчетаУпаковки = КоэффициентПересчетаУпаковки;
			
			СтрокаТоварыРазобранные.СуммаСкидки = СуммаСкидки;
			СтрокаТоварыРазобранные.СуммаНДС    = СуммаНДС;
			СтрокаТоварыРазобранные.СуммаСНДС   = СуммаСНДС;
			СтрокаТоварыРазобранные.Цена        = Цена;
			СтрокаТоварыРазобранные.Штрихкод    = СтрокаРаспределения.Штрихкод;
			СтрокаТоварыРазобранные.РезультатРаспределения = СтрокаРаспределения;
			
			СтавкаНДСБезНДС = Справочники.СтавкиНДС.БезНДС;
			СтавкаНДС0 = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0);
			Если НЕ (СтрокаТоварыРазобранные.СтавкаНДС = СтавкаНДСБезНДС
				ИЛИ СтрокаТоварыРазобранные.СтавкаНДС = СтавкаНДС0
				ИЛИ СтрокаТоварыРазобранные.СуммаНДС = СтрокаТовары.СуммаНДС) Тогда
				
				ОтклонениеСуммыНДСПоСтроке = ОтклонениеСуммыНДС(СтрокаТоварыРазобранные);
				Если ОтклонениеСуммыНДС + ОтклонениеСуммыНДСПоСтроке > 0.01 Тогда
					СтрокаТоварыРазобранные.СуммаНДС = СтрокаТоварыРазобранные.СуммаНДС - 0.01;
					ОтклонениеСуммыНДС = ОтклонениеСуммыНДС + ОтклонениеСуммыНДСПоСтроке - 0.01;
				ИначеЕсли ОтклонениеСуммыНДС + ОтклонениеСуммыНДСПоСтроке < -0.01 Тогда
					СтрокаТоварыРазобранные.СуммаНДС = СтрокаТоварыРазобранные.СуммаНДС + 0.01;
					ОтклонениеСуммыНДС = ОтклонениеСуммыНДС + ОтклонениеСуммыНДСПоСтроке + 0.01;
				Иначе
					ОтклонениеСуммыНДС = ОтклонениеСуммыНДС + ОтклонениеСуммыНДСПоСтроке;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТовары.Количество         = СтрокаТовары.Количество - СтрокаТоварыРазобранные.Количество;
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок
			                                  - СтрокаТоварыРазобранные.Количество * КоэффциентУпаковкиДокумента;
			СтрокаТовары.СуммаСкидки        = СтрокаТовары.СуммаСкидки - СтрокаТоварыРазобранные.СуммаСкидки;
			СтрокаТовары.СуммаНДС           = СтрокаТовары.СуммаНДС - СтрокаТоварыРазобранные.СуммаНДС;
			СтрокаТовары.СуммаСНДС          = СтрокаТовары.СуммаСНДС - СтрокаТоварыРазобранные.СуммаСНДС;
			
			СтрокаТоварыРазобранные.ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения
			                        = ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения;
			Если ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения Тогда
				СтрокаТоварыРазобранные.КоэффициентПересчетаУпаковки = 1;
				СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаТоварыРазобранные.Количество;
				СтрокаТоварыРазобранные.Цена = Окр((СуммаСНДС - СуммаСкидки), 2);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаТовары.Количество > 0 Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			ОтклонениеСуммыНДСПоСтроке = ОтклонениеСуммыНДС(СтрокаТоварыРазобранные);
			Если ОтклонениеСуммыНДС > 0.01 Тогда
				Если ОтклонениеСуммыНДСПоСтроке > 0 Тогда
					СтрокаТоварыРазобранные.СуммаНДС = СтрокаТоварыРазобранные.СуммаНДС - 0.01;
				КонецЕсли;
			ИначеЕсли ОтклонениеСуммыНДС < -0.01 Тогда
				Если ОтклонениеСуммыНДСПоСтроке < 0 Тогда
					СтрокаТоварыРазобранные.СуммаНДС = СтрокаТоварыРазобранные.СуммаНДС + 0.01;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТоварыРазобранные;

КонецФункции

// Данные распределения штрихкодов упаковок по товарам.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ для получения данных распределения
//  МассивУпаковок - Массив ИЗ см. ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам - Массив
//  штрихкодов упаковок для распределения.
//  ПараметрыУказанияСерий - Структура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий - Параметры указания серий
//  Товары - ТаблицаЗначений - Товары для распределения по штрихкодам упаковок
// 
// Возвращаемое значение:
//  см. ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам
Функция ДанныеРаспределенияШтрихкодовУпаковокПоТоварам(
	ДокументСсылка,
	МассивУпаковок,
	ПараметрыУказанияСерий,
	Товары) Экспорт
	
	ДопустимыТоварыБезМарок = РозничныеПродажиЛокализация.ДопустимыТоварыБезМарокВДокументе(ДокументСсылка);
	
	ПараметрыРаспределения = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	ПараметрыРаспределения.ДокументСсылка          = ДокументСсылка;
	ПараметрыРаспределения.ПараметрыУказанияСерий  = ПараметрыУказанияСерий;
	ПараметрыРаспределения.ДопустимыТоварыБезМарок = ДопустимыТоварыБезМарок;
	
	ДанныеРаспределения = ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(
		ПараметрыРаспределения,
		Товары,
		МассивУпаковок);
	
	Возврат ДанныеРаспределения;

КонецФункции

// Функция получает данные для формирования печатной формы КМ-6.
//
// Возвращаемое значение:
// 	Структура:
//		* РезультатЗапроса - РезультатЗапроса - Содержит информацию для заполнения печатной формы
//		* ЗаголовокДокумента - Строка - Отображаемый заголовок табличного документа
Функция ПолучитьДанныеДляПечатнойФормыКМ6(ПараметрыПечати, МассивОбъектов) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// МассивОбъектов содержит документы одного вида.	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТЧТовары.Сумма), 0) КАК СуммаПродаж,
	|	ЕСТЬNULL(СУММА(ТЧТовары.СуммаНДС), 0) КАК СуммаПродажНДС,
	|	0 КАК СуммаПродажОтчет,
	|	0 КАК СуммаПродажОтчетНДС,
	|	0 КАК СуммаВозвратов,
	|	0 КАК СуммаВозвратовНДС,
	|	0 КАК СуммаПродажПодарочныхСертификатов,
	|	0 КАК СуммаВозвратовПодарочныхСертификатов,	
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ПОМЕСТИТЬ ПродажиИВозвраты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТЧТовары
	|		ПО (ТЧТовары.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧТовары.Ссылка.Проведен)
	|			И (ТЧТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТЧТовары.Сумма), 0) КАК СуммаПродаж,
	|	ЕСТЬNULL(СУММА(ТЧТовары.СуммаНДС), 0) КАК СуммаПродажНДС,
	|	0 КАК СуммаПродажОтчет,
	|	0 КАК СуммаПродажОтчетНДС,
	|	0 КАК СуммаВозвратов,
	|	0 КАК СуммаВозвратовНДС,
	|	0 КАК СуммаПродажПодарочныхСертификатов,
	|	0 КАК СуммаВозвратовПодарочныхСертификатов,
	|	ОтчетОРозничныхВозвратах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах 
	|	ПО ОтчетОРозничныхПродажах.КассоваяСмена = ОтчетОРозничныхВозвратах.КассоваяСмена
	|		И ОтчетОРозничныхПродажах.НалогообложениеНДС = ОтчетОРозничныхВозвратах.НалогообложениеНДС	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТЧТовары
	|		ПО (ТЧТовары.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧТовары.Ссылка.Проведен)
	|			И (ТЧТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхВозвратах.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧТоварыОтчет.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ТЧТоварыОтчет.СуммаНДС), 0),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТЧТоварыОтчет
	|		ПО (ТЧТоварыОтчет.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧТоварыОтчет.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ТЧТоварыОтчет.СуммаНДС), 0),
	|	0,
	|	0,
	|	0,
	|	0,
	|	ОтчетОРозничныхВозвратах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах 
	|	ПО ОтчетОРозничныхПродажах.КассоваяСмена = ОтчетОРозничныхВозвратах.КассоваяСмена
	|		И ОтчетОРозничныхПродажах.НалогообложениеНДС = ОтчетОРозничныхВозвратах.НалогообложениеНДС
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТЧТоварыОтчет
	|	ПО (ТЧТоварыОтчет.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхВозвратах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧТовары.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ТЧТовары.СуммаНДС), 0),
	|	0,
	|	0,
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Товары КАК ТЧТовары
	|		ПО (ТЧТовары.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧТовары.Ссылка.Проведен)
	|			И (ТЧТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧТовары.Сумма), 0),
	|	ЕСТЬNULL(СУММА(ТЧТовары.СуммаНДС), 0),
	|	0,
	|	0,
	|	ОтчетОРозничныхВозвратах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах 
	|	ПО ОтчетОРозничныхПродажах.КассоваяСмена = ОтчетОРозничныхВозвратах.КассоваяСмена
	|		И ОтчетОРозничныхПродажах.НалогообложениеНДС = ОтчетОРозничныхВозвратах.НалогообложениеНДС	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Товары КАК ТЧТовары
	|	ПО (ТЧТовары.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|		И (ТЧТовары.Ссылка.Проведен)
	|		И (ТЧТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхВозвратах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧПодарочныеСертификаты.Сумма), 0),
	|	0,	
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК ТЧПодарочныеСертификаты
	|		ПО (ТЧПодарочныеСертификаты.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Проведен)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧПодарочныеСертификаты.Сумма), 0),
	|	0,
	|	ОтчетОРозничныхВозвратах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах 
	|	ПО ОтчетОРозничныхПродажах.КассоваяСмена = ОтчетОРозничныхВозвратах.КассоваяСмена
	|		И ОтчетОРозничныхПродажах.НалогообложениеНДС = ОтчетОРозничныхВозвратах.НалогообложениеНДС		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияПодарочныхСертификатов.ПодарочныеСертификаты КАК ТЧПодарочныеСертификаты
	|		ПО (ТЧПодарочныеСертификаты.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Проведен)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхВозвратах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧПодарочныеСертификаты.Сумма), 0),
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК ТЧПодарочныеСертификаты
	|		ПО (ТЧПодарочныеСертификаты.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Проведен)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ТЧПодарочныеСертификаты.Сумма), 0),
	|	ОтчетОРозничныхВозвратах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах	
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах 
	|	ПО ОтчетОРозничныхПродажах.КассоваяСмена = ОтчетОРозничныхВозвратах.КассоваяСмена
	|		И ОтчетОРозничныхПродажах.НалогообложениеНДС = ОтчетОРозничныхВозвратах.НалогообложениеНДС	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов.ПодарочныеСертификаты КАК ТЧПодарочныеСертификаты
	|		ПО (ТЧПодарочныеСертификаты.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Проведен)
	|			И (ТЧПодарочныеСертификаты.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхВозвратах.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиИВозвраты.Ссылка КАК Ссылка,
	|	ПродажиИВозвраты.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СУММА(ПродажиИВозвраты.СуммаПродаж) КАК СуммаПродаж,
	|	СУММА(ПродажиИВозвраты.СуммаПродажНДС) КАК СуммаПродажНДС,
	|	СУММА(ПродажиИВозвраты.СуммаПродажОтчет) КАК СуммаПродажОтчет,
	|	СУММА(ПродажиИВозвраты.СуммаПродажОтчетНДС) КАК СуммаПродажОтчетНДС,
	|	СУММА(ПродажиИВозвраты.СуммаВозвратов) КАК СуммаВозвратов,
	|	СУММА(ПродажиИВозвраты.СуммаВозвратовНДС) КАК СуммаВозвратовНДС,
	|	СУММА(ПродажиИВозвраты.СуммаПродажПодарочныхСертификатов) КАК СуммаПродажПодарочныхСертификатов,
	|	СУММА(ПродажиИВозвраты.СуммаВозвратовПодарочныхСертификатов) КАК СуммаВозвратовПодарочныхСертификатов
	|ПОМЕСТИТЬ ПродажиВозвратыСгруппировано
	|ИЗ
	|	ПродажиИВозвраты КАК ПродажиИВозвраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиИВозвраты.Ссылка,
	|	ПродажиИВозвраты.ОтчетОРозничныхПродажах	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах КАК Ссылка,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.Валюта КАК Валюта,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассаККМ.ТипКассы КАК ТипКассы,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассаККМ.Представление КАК ККМПредставление,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассаККМ.СерийныйНомер КАК СерийныйНомер,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассаККМ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассоваяСмена.НачалоКассовойСмены КАК НачалоСмены,
	|	ПродажиВозвратыСгруппировано.ОтчетОРозничныхПродажах.КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеСмены,
	|	ПродажиВозвратыСгруппировано.СуммаПродаж КАК СуммаПродаж,
	|	ПродажиВозвратыСгруппировано.СуммаПродажНДС КАК СуммаПродажНДС,
	|	ПродажиВозвратыСгруппировано.СуммаПродажОтчет КАК СуммаПродажОтчет,
	|	ПродажиВозвратыСгруппировано.СуммаПродажОтчетНДС КАК СуммаПродажОтчетНДС,
	|	ПродажиВозвратыСгруппировано.СуммаВозвратов КАК СуммаВозвратов,
	|	ПродажиВозвратыСгруппировано.СуммаВозвратовНДС КАК СуммаВозвратовНДС,
	|	ПродажиВозвратыСгруппировано.СуммаПродажПодарочныхСертификатов КАК СуммаПродажПодарочныхСертификатов,
	|	ПродажиВозвратыСгруппировано.СуммаВозвратовПодарочныхСертификатов КАК СуммаВозвратовПодарочныхСертификатов
	|ИЗ
	|	ПродажиВозвратыСгруппировано КАК ПродажиВозвратыСгруппировано
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ПродажиВозвратыСгруппировано.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	СтруктураДанныхДляПечати    = Новый Структура("РезультатЗапроса", РезультатЗапроса);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции	
	
// Функция получает данные для формирования печатной формы КМ-3.
//
// Возвращаемое значение:
// 	Структура:
//		* РезультатЗапроса - РезультатЗапроса - Содержит информацию для заполнения печатной формы
//		* ЗаголовокДокумента - Строка - Отображаемый заголовок табличного документа
Функция ПолучитьДанныеДляПечатнойФормыКМ3(ПараметрыПечати, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// МассивОбъектов содержит документы одного вида.	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК ДатаДокумента,
	|	Док.КассаККМ КАК КассаККМ,
	|	Док.КассаККМ.ТипКассы КАК ТипКассы,
	|	Док.КассаККМ.Представление КАК Покупатель,
	|	Док.Ответственный.ФизическоеЛицо КАК КассирККМ,
	|	Док.Валюта КАК Валюта,
	|	Док.Организация КАК Организация,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Док.Организация.Представление КАК Поставщик,
	|	Док.КассаККМ.СерийныйНомер КАК СерийныйНомерККМ,
	|	Док.КассаККМ.РегистрационныйНомер КАК РегистрационныйНомерККМ,
	|	Док.КассаККМ.Наименование КАК ПредставлениеККМ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Док.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК ДатаДокумента,
	|	Док.КассаККМ КАК КассаККМ,
	|	Док.КассаККМ.ТипКассы КАК ТипКассы,
	|	Док.КассаККМ.Представление КАК Покупатель,
	|	Док.Ответственный.ФизическоеЛицо КАК КассирККМ,
	|	Док.Валюта КАК Валюта,
	|	Док.Организация КАК Организация,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Док.Организация.Представление КАК Поставщик,
	|	Док.КассаККМ.СерийныйНомер КАК СерийныйНомерККМ,
	|	Док.КассаККМ.РегистрационныйНомер КАК РегистрационныйНомерККМ,
	|	Док.КассаККМ.Наименование КАК ПредставлениеККМ
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Док.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокОтчетОРозничныхПродажах.Ссылка КАК Документ,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧека,
	|	ДокЧек.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокЧек
	|		ПО ДокОтчетОРозничныхПродажах.КассоваяСмена = ДокЧек.КассоваяСмена
	|			И (ДокЧек.Проведен)
	|			И (ДокЧек.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = ДокЧек.ЧекККМ
	|ГДЕ
	|	ДокОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОтчетОРозничныхПродажах.Ссылка КАК Документ,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧека,
	|	ДокЧек.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов КАК ДокЧек
	|		ПО ДокОтчетОРозничныхПродажах.КассоваяСмена = ДокЧек.КассоваяСмена
	|			И (ДокЧек.Проведен)
	|			И (ДокЧек.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = ДокЧек.РеализацияПодарочныхСертификатов
	|ГДЕ
	|	ДокОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОтчетОРозничныхВозвратах.Ссылка КАК Документ,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧека,
	|	ДокЧек.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ДокОтчетОРозничныхВозвратах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокЧек
	|		ПО ДокОтчетОРозничныхВозвратах.КассоваяСмена = ДокЧек.КассоваяСмена
	|			И (ДокЧек.Проведен)
	|			И (ДокЧек.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = ДокЧек.ЧекККМ
	|ГДЕ
	|	ДокОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОтчетОРозничныхВозвратах.Ссылка КАК Документ,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧека,
	|	ДокЧек.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ДокОтчетОРозничныхВозвратах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов КАК ДокЧек
	|		ПО ДокОтчетОРозничныхВозвратах.КассоваяСмена = ДокЧек.КассоваяСмена
	|			И (ДокЧек.Проведен)
	|			И (ДокЧек.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = ДокЧек.РеализацияПодарочныхСертификатов
	|ГДЕ
	|	ДокОтчетОРозничныхВозвратах.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|ИТОГИ ПО
	|	Документ";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати    = Новый Структура("РезультатЗапроса", РезультатЗапроса);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

// Определяет по документу закупки, применяет ли организация Патент
// 
// Параметры:
//  ДокументЗакупки - ДокументСсылка - Документ закупки
// 
// Возвращаемое значение:
//  Булево - Документ закупки по Патенту
Функция ДокументЗакупкиПоПатенту(ДокументЗакупки) Экспорт
	
	ДокументЗакупкиПоПатенту = Ложь;
	
	Если ТипЗнч(ДокументЗакупки) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(ДокументЗакупки) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ ТипЗнч(ДокументЗакупки) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		
		ЗакупкаПодДеятельность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗакупки, "ЗакупкаПодДеятельность");
		Если ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
			ДокументЗакупкиПоПатенту = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументЗакупкиПоПатенту;
	
КонецФункции

// Возвращает заводской номер ФН
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование - Идентификатор устройства
// 
// Возвращаемое значение:
//  Строка - номер ФН
Функция ЗаводскойНомерФискальногоНакопителя(ИдентификаторУстройства) Экспорт
	
	ЗаводскойНомерФН = "";

	Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
		МодульОборудованиеЧекопечатающиеУстройства = ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройства");
		ПараметрыРегистрации = МодульОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
		Если ПараметрыРегистрации.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыРегистрации.ЗаводскойНомерФН) Тогда
			ЗаводскойНомерФН = ПараметрыРегистрации.ЗаводскойНомерФН;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаводскойНомерФН;
	
КонецФункции

//-- Локализация

// Проверяет, допустимы ли в документе товары
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ для проверки
// 
// Возвращаемое значение:
//  Булево - Допустимы товары без марок в документе
Функция ДопустимыТоварыБезМарокВДокументе(ДокументСсылка) Экспорт
	
	ДопустимыТоварыБезМарокДляДокумента = Ложь;
	
	//++ Локализация
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		ДопустимыТоварыБезМарокДляДокумента = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ДопустимыТоварыБезМарокДляДокумента;
	
КонецФункции

// Текст запроса для получения документов по распоряжению (заказу клиента)
// 
// Возвращаемое значение:
//  Строка - Текст запроса документы по распоряжению
Функция ТекстЗапросаДокументыПоРаспоряжению() Экспорт
	
	//@skip-check bsl-ql-hub
	ТекстЗапроса = "ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ВТОбъектыРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &ОбъектРасчетов
	|	И НЕ ОбъектыРасчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДокументыПоРаспоряжению
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.ЗаказКлиента = &Распоряжение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.Ссылка.Дата
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ПриходныйКассовыйОрдер.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
	|			И (ПриходныйКассовыйОрдер.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнойКарте.Ссылка,
	|	ОперацияПоПлатежнойКарте.Ссылка.Дата
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКарте
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОперацияПоПлатежнойКарте.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
	|			И (ОперацияПоПлатежнойКарте.Ссылка.Проведен)
	//++ Локализация
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОперацияПоЯндексКассе.Ссылка,
	|	ОперацияПоЯндексКассе.Ссылка.Дата
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОперацияПоЯндексКассе.ОбъектРасчетов = ОбъектыРасчетов.ОбъектРасчетов
	|			И (ОперацияПоЯндексКассе.Ссылка.Проведен)
	//-- Локализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоРаспоряжению.Ссылка КАК Ссылка,
	|	ДокументыПоРаспоряжению.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ДокументыПоРаспоряжению.Дата, ДЕНЬ) КАК ДатаДень
	|ИЗ
	|	ВТДокументыПоРаспоряжению КАК ДокументыПоРаспоряжению
	//++ Локализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|		ПО ДокументыПоРаспоряжению.Ссылка = ОчередьЧековККТ.ДокументОснование
	|ГДЕ
	|	ОчередьЧековККТ.ДокументОснование ЕСТЬ NULL
	//-- Локализация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыПоРаспоряжению.Дата УБЫВ
	|ИТОГИ ПО
	|	ДатаДень";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает систему налогообложения организации на дату
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
// 	Дата - Дата - Дата, на которую определяется система налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения для параметров фискальных чеков
Функция СистемаНалогообложенияФискальнойОперации(Организация, Дата = Неопределено) Экспорт
	
	Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации")
		ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Т.СистемаНалогообложения КАК СистемаНалогообложения,
	|	&ПараметрДляПодстановки КАК ОбъектНалогообложенияУСН
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ТекущаяДата, Организация = &Организация) КАК Т
	|";
//++ Локализация
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрДляПодстановки", "ЕСТЬNULL(Т2.ОбъектНалогообложенияУСН, НЕОПРЕДЕЛЕНО)");
	ТекстЗапроса = ТекстЗапроса + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&ТекущаяДата, Организация = &Организация) КАК Т2
	|		ПО Т.Организация = Т2.Организация
	|";
//-- Локализация

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПараметрДляПодстановки", Неопределено);
	
	Если Дата = Неопределено Тогда
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("ТекущаяДата", Дата);
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Организация,
		"ГоловнаяОрганизация, ОбособленноеПодразделение");
		
	Если РеквизитыОрганизации.ОбособленноеПодразделение = Истина Тогда
		Запрос.УстановитьПараметр("Организация", РеквизитыОрганизации.ГоловнаяОрганизация);
	Иначе
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	ДанныеСистемыНалогообложения = Запрос.Выполнить().Выбрать();
	ДанныеСистемыНалогообложения.Следующий();
	
	СистемаНалогообложения = Неопределено;
	
	Если ДанныеСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		
		СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;

//++ Локализация		
	ИначеЕсли ДанныеСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Если ДанныеСистемыНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
			
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
			
		ИначеЕсли ДанныеСистемыНалогообложения.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
			
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
			
		КонецЕсли;
//-- Локализация
		
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Определяет, является ли номенклатура алкогольной продукцией, имеющая уникальный идентификатор (маркируовку)
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Проверяемая номенклатура
// 
// Возвращаемое значение:
//  Булево - Истина, если номенклатура является алкогольной продукцией, имеющая уникальный идентификатор (маркируовку)
Функция АлкогольнаяПродукцияЕГАИСМаркируемая(Номенклатура) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ВидАлкогольнойПродукции КАК ВидПродукции,
	|	Номенклатура.ВидАлкогольнойПродукции.Маркируемый КАК ВидПродукцииМаркируемый
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Номенклатура.ВидАлкогольнойПродукции.Маркируемый = ИСТИНА";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	//-- Локализация
	
	//@skip-check bsl-legacy-check-method-for-statements-after-return
	Возврат Ложь;

КонецФункции

// Возвращает возможность печатать отдельный слип чек эквайринговой операции.
// Если Истина, то предполагается, что слип-чек эквайрингового терминала выводится отдельно и
// фискальный чек не содержит данные эквайринговой операции.
// 
// Возвращаемое значение:
// 	Булево
Функция ПечататьОтдельныйСлипЧекЭквайринговойОперации() Экспорт

	Результат = Ложь;
	
	//++ Локализация
	
	Результат = ПолучитьФункциональнуюОпцию("ПечататьОтдельныйСлипЧекЭквайринговойОперации");
	
	//-- Локализация
	
	Возврат Результат;

КонецФункции

// Возвращает возможность печатать отдельный слип чек ЕГАИС.
// Если Истина, то предполагается, что слип-чек ЕГАИС выводится отдельно.
// 
// Возвращаемое значение:
// 	Булево
Функция ПечататьОтдельныйСлипЧекЕГАИС() Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	
	Результат = ПолучитьФункциональнуюОпцию("ПечататьОтдельныйСлипЧекЕГАИС");
	
	//-- Локализация
	
	Возврат Результат;
КонецФункции

// Проверяет, разрешена ли в документе продажа подарочного сертификата в зависимости
// от хозяйственной операции документа.
// 
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, по которой проверяется
//  	разрешена ли продажа подарочного сертификата в документе.
// 
// Возвращаемое значение:
//  Булево - Разрешена продажа подарочного сертификата в документе
Функция РазрешенаПродажаПодарочногоСертификатаВДокументе(ХозяйственнаяОперация) Экспорт
	
	РазрешенаПродажаПодарочногоСертификатаВДокументе = Ложь;
	
	//++ Локализация
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты")
		И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту) Тогда
		
		РазрешенаПродажаПодарочногоСертификатаВДокументе = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат РазрешенаПродажаПодарочногоСертификатаВДокументе;
	
КонецФункции

// Записывает объект формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма клиентского приложения:
//  * Объект - ДокументОбъект - Основной реквизит формы документа
//  ПараметрыФискализации - Структура -
//  ПараметрыЗаписи - Структура -
//  УспешноЗаписанДокумент - Булево - признак успешной записи документа
Процедура ЗаписатьФискальнуюОперацию(Форма, ПараметрыФискализации, ПараметрыЗаписи, УспешноЗаписанДокумент) Экспорт
	
	//++ Локализация
	Если Не УспешноЗаписанДокумент Тогда
		Возврат;
	КонецЕсли;
		
	Объект = Форма.Объект;
	Если (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ")) Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
		ОбщегоНазначенияИС.СписатьОстатокПоВскрытымПотребительскимУпаковкам(Объект, ПараметрыСканирования);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация
#Область ОплатаЭСФСС

// Установить функциональную опцию оплаты ЭС ФСС в реквизите формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура УстановитьФункциональнуюОпциюОплатаЭСФСС(Форма) Экспорт
	
	Форма.ИспользоватьОплатуЭСФСС = ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС");
	
КонецПроцедуры

// Настроить видимость элементов оплаты ЭС ФСС на форме панели администрирования УТ "Продажи"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ПанельАдминистрированияУТПродажиНастроитьВидимостьЭлементовОплатыЭСФСС(Форма) Экспорт
	
	Форма.Элементы.ГруппаПараметрыПодключенияНСПК.Видимость =
		ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС");
	
КонецПроцедуры

// Заполнить основные параметры подключения к НСПК
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ПанельАдминистрированияУТПродажиЗаполнитьПараметрыПодключенияНСПК(Форма) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыПодключенияНСПК = ЭлектронныеСертификатыНСПКУТ.ОбщиеПараметрыПодключенияНСПК();
	Форма.АдресСервисаНСПК = ОбщиеПараметрыПодключенияНСПК.АдресСервисаНСПК;
	Форма.КлючДоступаНСПК = ОбщиеПараметрыПодключенияНСПК.КлючДоступаНСПК;
	
	ВерсияКомпонентыНСПК = ЭлектронныеСертификатыНСПК.ВерсияВК();
	Форма.Элементы.ГруппаПараметрыПодключенияНСПК.Заголовок = СтрШаблон(
		НСтр("ru = 'Настройки подключения к сервису НСПК (v. %1)'"), ВерсияКомпонентыНСПК);
	
КонецПроцедуры

// Настроить видимость элементов оплаты ЭС ФСС на форме элемента справочника "Кассы ККМ"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура КассаККМНастроитьВидимостьЭлементовОплатыЭСФСС(Форма) Экспорт
	
	Форма.Элементы.ЛокализацияПараметрыНСПК.Видимость = ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС")
		И Форма.Объект.ТипКассы <> Перечисления.ТипыКассККМ.ККМOffline;
	Форма.Элементы.КлючОрганизацииНСПК.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецПроцедуры

// Заполнить параметры подключения к НСПК для "Кассы ККМ"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура КассаККМЗаполнитьПараметрыПодключенияНСПК(Форма) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС")
		И ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И Форма.Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияНСПК = ЭлектронныеСертификатыНСПКУТ.ПараметрыПодключенияОрганизацииНСПК(Форма.Объект.Владелец);
	Форма.КлючОрганизацииНСПК = ПараметрыПодключенияНСПК.КлючОрганизацииНСПК;
	
	ПараметрыПодключенияНСПК = ЭлектронныеСертификатыНСПКУТ.ПараметрыПодключенияКассыНСПК(Форма.Объект.Ссылка);
	Форма.ИдентификаторНСПК = ПараметрыПодключенияНСПК.ИдентификаторНСПК;
	Форма.КлючКассыНСПК = ПараметрыПодключенияНСПК.КлючКассыНСПК;
	
КонецПроцедуры

// Записать параметры подключения к НСПК для "Кассы ККМ" 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ТекущийОбъект - СправочникОбъект.КассыККМ - Касса ККМ
Процедура КассаККМЗаписатьПараметрыПодключенияНСПК(Форма, ТекущийОбъект) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС")
		И Форма.Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор) Тогда
		
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	Организация = Форма.Объект.Владелец;
	Ссылка = ТекущийОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(Форма.КлючОрганизацииНСПК) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Организация, Форма.КлючОрганизацииНСПК, "КлючОрганизацииНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Организация, "КлючОрганизацииНСПК");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторНСПК) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, Форма.ИдентификаторНСПК, "ИдентификаторНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Ссылка, "ИдентификаторНСПК");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.КлючКассыНСПК) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, Форма.КлючКассыНСПК, "КлючКассыНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Ссылка, "КлючКассыНСПК");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Настроить видимость элементов оплаты ЭС ФСС на форме элемента справочника "Организации"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма клиентского приложения:
//  *Объект - СправочникОбъект - Основной реквизит формы справочника
Процедура ОрганизацияНастроитьВидимостьЭлементовОплатыЭСФСС(Форма) Экспорт
	
	Форма.Элементы.ЛокализацияПараметрыНСПК.Видимость = 
		ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС")
		И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И Форма.Объект.Ссылка <> Справочники.Организации.УправленческаяОрганизация;
	
КонецПроцедуры

// Заполнить параметры подключения к НСПК для "Организации"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма клиентского приложения:
//  *Объект - СправочникОбъект - Основной реквизит формы справочника
Процедура ОрганизацияЗаполнитьПараметрыПодключенияНСПК(Форма) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС")
		И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И Форма.Объект.Ссылка <> Справочники.Организации.УправленческаяОрганизация) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключенияНСПК = ЭлектронныеСертификатыНСПКУТ.ПараметрыПодключенияОрганизацииНСПК(Форма.Объект.Ссылка);
	Форма.КлючОрганизацииНСПК = ПараметрыПодключенияНСПК.КлючОрганизацииНСПК;
	
КонецПроцедуры

// Записать параметры подключения к НСПК для "Организации" 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ТекущийОбъект - СправочникОбъект.Организации - Организация
Процедура ОрганизацияЗаписатьПараметрыПодключенияНСПК(Форма, ТекущийОбъект) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС")
		И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")) Тогда
		
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = ТекущийОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(Форма.КлючОрганизацииНСПК)
		И ТекущийОбъект.Ссылка <> Справочники.Организации.УправленческаяОрганизация Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Ссылка, Форма.КлючОрганизацииНСПК, "КлючОрганизацииНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Ссылка, "КлючОрганизацииНСПК");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Настроить видимость элементов оплаты ЭС ФСС на форме элемента справочника "ЭквайринговыеТерминалы"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ЭквайринговыйТерминалНастроитьВидимостьЭлементовОплатыЭСФСС(Форма) Экспорт
	
	Форма.Элементы.ЛокализацияГруппаЭлементыОплатыЭСФСС.Видимость = 
		ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС");
	
КонецПроцедуры

// Возвращает сумму оплаты электронными сертификатам ФСС по документу
// 
// Параметры:
//  ОплатыПлатежнойКартой - ТаблицаЗначений - Оплаты платежной картой:
//  * ВидОплаты - ПеречислениеСсылка.ТипыПлатежнойСистемыККТ -
//  * Сумма - Число - 
// 
// Возвращаемое значение:
//  Число - сумма оплаты электронными сертификатами ФСС по документу
Функция СуммаОплатыЭСФССПоДокументу(ОплатыПлатежнойКартой) Экспорт
	
	СуммаОплатыЭСФСС = 0;
	
	Для Каждого СтрокаТЗ Из ОплатыПлатежнойКартой Цикл
		
		Если СтрокаТЗ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК Тогда
			СуммаОплатыЭСФСС = СуммаОплатыЭСФСС + СтрокаТЗ.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаОплатыЭСФСС;
	
КонецФункции

// Возвращает сумму оплаты СБП по документу
// 
// Параметры:
//  ОплатыПлатежнойКартой - ТаблицаЗначений - Оплаты платежной картой:
//  * ВидОплаты - ПеречислениеСсылка.ТипыПлатежнойСистемыККТ -
//  * Сумма - Число - 
//  * СтатусОплатыСБП - ПеречислениеСсылка.ТипыСтатусовОплатыСБП - 
//  ТолькоОплатаВыполнена - Булево - Истина - Выполнена
// 
// Возвращаемое значение:
//  Число - сумма оплаты СБП по документу
Функция СуммаОплатыСБППоДокументу(ОплатыПлатежнойКартой, ТолькоОплатаВыполнена = Ложь) Экспорт
	
	СуммаОплатыСБП = 0;
	
	Для Каждого СтрокаТЗ Из ОплатыПлатежнойКартой Цикл
		
		Если СтрокаТЗ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей Тогда
			
			Если ТолькоОплатаВыполнена И СтрокаТЗ.СтатусОплатыСБП = Перечисления.ТипыСтатусовОплатыСБП.Выполнена
				ИЛИ Не ТолькоОплатаВыполнена Тогда
				
				СуммаОплатыСБП = СуммаОплатыСБП + СтрокаТЗ.Сумма;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаОплатыСБП;
	
КонецФункции

#КонецОбласти

#Область ОплатаСБП

// Установить признак возможности использования оплаты СБП на формах РМК.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа, для которой определяется возможность использования оплаты СБП
Процедура УстановитьВозможностьИспользованиеОплатыСБПНаФормахРМК(Форма) Экспорт
	
	Форма.ИспользоватьОплатуСБП = ДляОрганизацииНастроеноПодключениеСБП(Форма.Объект.Организация);
	
КонецПроцедуры

// Проверяет наличие настроек интеграции с СБП для организации.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Булево - 
//
Функция ДляОрганизацииНастроеноПодключениеСБП(Организация) Экспорт

	Результат = Ложь;
	Если Справочники.НастройкиРМК.СписокДоговоровИПодключенийСБП(Организация).Количество() Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Получить из платежной системы идентификатор оплаты в платежной системе.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - Параметры процедуры
//  АдресРезультата - Строка - Адрес результата
Процедура ИдентификаторОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = ПереводыСБПc2b.ДинамическаяСсылка(
		ПараметрыПроцедуры.ДокументОплаты,
		ПараметрыПроцедуры.НастройкаПодключения,
		ПараметрыПроцедуры);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументОплаты", ПараметрыПроцедуры.ДокументОплаты);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Получить статус оплаты в платежной системе.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - Параметры процедуры
//  АдресРезультата - Строка - Адрес результата
Процедура СтатусОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = ПереводыСБПc2b.СтатусОплаты(
		ПараметрыПроцедуры.ДокументОплаты,
		Неопределено);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("СуммаОперации", СуммаОперации(ПараметрыПроцедуры.ДокументОплаты));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Выполнить возврат оплаты в платежной системе
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - Параметры процедуры
//  АдресРезультата - Строка - Адрес результата
Процедура ВыполнитьВозвратОплаты(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументВозврата);
	
	ОбъектОплаты = ?(ЗначениеЗаполнено(ПараметрыПроцедуры.ИдентификаторОплаты),
			ПараметрыПроцедуры.ИдентификаторОплаты,
			ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = ПереводыСБПc2b.ВозвратОплаты(
		ПараметрыПроцедуры.ДокументВозврата,
		ОбъектОплаты,
		ПараметрыПроцедуры.НастройкаПодключения,
		ПараметрыПроцедуры.БанкКлиента,
		ПараметрыПроцедуры);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументВозврата", ПараметрыПроцедуры.ДокументВозврата);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Получить статус возврата оплаты в платежной системе.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - Параметры процедуры
//  АдресРезультата - Строка - Адрес результата
Процедура СтатусВозвратаОплатыВПлатежнойСистеме(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументВозврата);
	
	РезультатОперации = ПереводыСБПc2b.СтатусВозврата(
		ПараметрыПроцедуры.ДокументВозврата,
		Неопределено);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("СуммаОперации", СуммаОперации(ПараметрыПроцедуры.ДокументВозврата));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Подтверждает возврат оплаты и возвращает результат подтверждения
// 
// Параметры:
//  ДокументВозврата - ДокументСсылка - Документ возврата
// 
// Возвращаемое значение:
//  см. ПереводыСБПc2b.ПодтвердитьВозврат
Функция ПодтвердитьВозвратОплаты(ДокументВозврата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ДокументВозврата);
	
	Возврат ПереводыСБПc2b.ПодтвердитьВозврат(
		ДокументВозврата,
		Неопределено);
	
КонецФункции

// Активирует кассовую ссылку для приема оплаты
// 
// Параметры:
//  ПараметрыПроцедуры - Структура:
//  	*ДокументОплаты - см. ПереводыСБПc2b.АктивироватьКассовуюСсылку.ДокументОперации 
//  	*ДанныеСсылки - см. ПереводыСБПc2b.АктивироватьКассовуюСсылку.ДанныеСсылки 
//  	*ТорговаяТочка - см. ПереводыСБПc2b.АктивироватьКассовуюСсылку.НастройкаПодключения 
//  АдресРезультата - Строка - Адрес результата
Процедура АктивироватьКассовуюСсылку(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = ПереводыСБПc2b.АктивироватьКассовуюСсылку(
		ПараметрыПроцедуры.ДокументОплаты,
		ПараметрыПроцедуры.ДанныеСсылки,
		ПараметрыПроцедуры.ТорговаяТочка,
		ПараметрыПроцедуры);
		
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументОплаты", ПараметрыПроцедуры.ДокументОплаты);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Деактивирует кассовую ссылку, оплата по ней становится невозможной
// 
// Параметры:
//  ПараметрыПроцедуры - Структура:
//  	*ДанныеСсылки - см. ПереводыСБПc2b.ДеактивироватьКассовуюСсылку.ДанныеСсылки 
//  	*ТорговаяТочка - см. ПереводыСБПc2b.ДеактивироватьКассовуюСсылку.НастройкаПодключения 
//  АдресРезультата - Строка - Адрес результата
Процедура ДеактивироватьКассовуюСсылку(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ПередВыполнениемОперацииВПлатежнойСистеме(ПараметрыПроцедуры.ДокументОплаты);
	
	РезультатОперации = ПереводыСБПc2b.ДеактивироватьКассовуюСсылку(
		ПараметрыПроцедуры.ДанныеСсылки,
		ПараметрыПроцедуры.ТорговаяТочка);
		
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		РезультатОперации.Вставить("ДокументОплаты", ПараметрыПроцедуры.ДокументОплаты);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Определяет настройку подключения к платежной системе по договору подключения.
// 
// Параметры:
//  ДоговорПодключения - СправочникСсылка.ДоговорыЭквайринга - Договор подключения к платежной системе
// 
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - Настройка подключения к платежной системе
Функция НастройкаПодключения(ДоговорПодключения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор,
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Интеграция
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииСПлатежнымиСистемамиУТ КАК НастройкиИнтеграцииСПлатежнымиСистемамиУТ
	|ГДЕ
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор = &ДоговорПодключения";
	Запрос.УстановитьПараметр("ДоговорПодключения", ДоговорПодключения);

	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Интеграция;
	КонецЕсли;
	
КонецФункции

// Определяет договор подключения к платежной системе по настройке подключения.
// 
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - Настройка подключения к платежной системе
//  ТолькоДействующийДоговор - Булево - Подбирать только действующий договор.
// 
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыЭквайринга - договор подключения к платежной системе
//
Функция ДоговорПодключения(НастройкаПодключения, ТолькоДействующийДоговор = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор,
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Интеграция
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииСПлатежнымиСистемамиУТ КАК НастройкиИнтеграцииСПлатежнымиСистемамиУТ
	|ГДЕ
	|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Интеграция = &НастройкаПодключения
	|	И (&ВсеДоговора 
	|		ИЛИ НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует))";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	Запрос.УстановитьПараметр("ВсеДоговора", Не ТолькоДействующийДоговор);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);

	Если Выборка.Следующий() Тогда
		Результат =  Выборка.Договор;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает гиперссылку настройки подключения к платежной системе по договору подключения.
// 
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ДоговорыЭквайринга - Договор подключения к платежной системе
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Гиперссылка настройки подключения к платежной системе
Функция СформироватьНадписьНастройкаПодключенияПлатежнойСистемы(ОбъектСсылка) Экспорт

	СтрокаНастройкаПодключенияПлатежнойСистемы =
		"<a href = НастроитьПодключениеКПлатежнойСистеме>+ " + НСтр("ru='Настроить подключение к платежной системе'") + "</a>";

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиИнтеграции.Интеграция КАК Интеграция,
		               |	НастройкиИнтеграции.ПлатежнаяСистема КАК ПлатежнаяСистема
		               |ИЗ
		               |	РегистрСведений.НастройкиИнтеграцииСПлатежнымиСистемамиУТ КАК НастройкиИнтеграции
		               |ГДЕ
		               |	НастройкиИнтеграции.Договор = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтрокаНастройкаПодключенияПлатежнойСистемы =
				"<a href = " + ПолучитьНавигационнуюСсылку(Выборка.Интеграция) + ">" + Строка(Выборка.Интеграция) + "</a>";
			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(СтрокаНастройкаПодключенияПлатежнойСистемы);
КонецФункции

// Определяет сумму, по который была выполнена последняя операции в платежной системе.
// Метод следует использовать для отложенного получения статуса выполнения операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ оплаты или возврата,
//      по которому были выполнены операции в платежных системах.
//
// Возвращаемое значение:
//  Число - Сумма последней операции с платежной системой
Функция СуммаОперации(ДокументОперации) Экспорт
	
	СуммаОплаты = 0;
	
	ДанныеОперацииПоДокументу = ПереводыСБПc2b.ОперацииПоДокументу(ДокументОперации);
	Если Не ДанныеОперацииПоДокументу.ДанныеОпераций.Количество() Тогда
		СуммаОплаты = ДанныеОперацииПоДокументу.Сумма;
	КонецЕсли;
	
	Возврат СуммаОплаты;
	
КонецФункции

// На основании контактной информации контрагента формирует список получателей сообщения СБП.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - 
//  ВариантОтправки - Строка -
//  Получатели - Массив Из Строка -
//
Процедура ПриФормированииСпискаПолучателейСообщенияСБП(ДокументОперации, ВариантОтправки, Получатели) Экспорт
	
	Если ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.ЗаказКлиента")
		И ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		И ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		И ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ТипЗнч(ДокументОперации) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = "Контрагент";
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОперации, ИмяРеквизита);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыКонтактнойИнформацииДляОтбора= Новый Массив;
	ПараметрыОтбора = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		ВидыКонтактнойИнформацииДляОтбора.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	ИначеЕсли ВариантОтправки = "Телефон" Тогда
		ВидыКонтактнойИнформацииДляОтбора.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	КонецЕсли;
	
	ПараметрыОтбора.ВидыКонтактнойИнформации = ВидыКонтактнойИнформацииДляОтбора;
	ПараметрыОтбора.Дата = ТекущаяДатаСеанса();
	
	КонтактнаяИнформацияКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Контрагент, ПараметрыОтбора);
	
	Для Каждого ЗаписьКонтактнойИнформации Из КонтактнаяИнформацияКонтрагента Цикл
		Если ЗначениеЗаполнено(ЗаписьКонтактнойИнформации.Представление) Тогда
			Получатели.Добавить(ЗаписьКонтактнойИнформации.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Управляет возможностью использования шаблонов сообщений СБП
//
// Параметры:
//  Используется - Булево -
//
Процедура ПриПроверкеИспользованияШаблоновСообщенийСБП(Используется) Экспорт
	
	Используется = Истина;
	
КонецПроцедуры

// Заполнение массива шаблонов сообщений по типам документов.
// 
// Параметры:
//  Шаблоны - Массив Из Структура - Шаблоны
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(Шаблоны) Экспорт
	
	ДобавитьШаблонЗаказКлиента(Шаблоны);
	ДобавитьШаблонСчетНаОплатуКлиенту(Шаблоны);
	ДобавитьШаблонАктВыполненныхРабот(Шаблоны);
	ДобавитьШаблонРеализацияТоваровУслуг(Шаблоны);
	ДобавитьШаблонРеализацияУслугПрочихАктивов(Шаблоны);
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

// Получает платежную ссылку по переданному документу, преобразует ее в изображение QR кода СБП
// и устанавливает значение параметра QRКодКартинка. В случае успеха возвращает Истину.
// 
// Параметры:
//  ДанныеПечати - Структура:
//    *Организация - СправочникСсылка.Организации
//    *Ссылка - ДокументСсылка
//  QRКодКартинка - Картинка
//  Размер - Число
//  
// Возвращаемое значение:
//  Булево - 
//
Функция ВывестиQRКод(ДанныеПечати, QRКодКартинка, Размер) Экспорт
	
	Результат = Ложь;
	
//++ Локализация
	
	Если ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
		
		ПлатежнаяСсылка = РегистрыСведений.ИдентификаторыОперацийСБПc2b.ПлатежнаяСсылкаОперации(ДанныеПечати.Ссылка);
		Если Не ПлатежнаяСсылка = Неопределено Тогда
			
			ДанныеQRКода = СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(ПлатежнаяСсылка, Размер, 0);
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				QRКодКартинка = Новый Картинка(ДанныеQRКода);
				Результат = Истина;
			Иначе
				Шаблон = Нстр("ru = 'Не удалось сформировать QR-код СБП для документа %1.
					|Технические подробности см. в журнале регистрации.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеПечати.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
//-- Локализация

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

// Проверяет, есть ли колонка в таблице
// 
// Параметры:
//  Таблица - ТаблицаЗначений - Таблица, в которой проверяется наличие колонки
//  ИмяКолонки - Строка - Имя искомой колонки
// 
// Возвращаемое значение:
//  Булево - Есть колонка в таблице
Функция ЕстьКолонкаВТаблице(Таблица, ИмяКолонки)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Таблица, ИмяКолонки);
	
КонецФункции

// Новая таблица распределенных товаров по штрихкодам.
// 
// Параметры:
//  ТаблицаСОбщимиКолонками - ТаблицаЗначений - Таблица с общими колонками
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица для распределения товаров по штрихкодам, если нужно (маркированный товар)
Функция НоваяТаблицаРаспределенныхТоваровПоШтрихкодам(ТаблицаСОбщимиКолонками)
	
	Если Не ЕстьКолонкаВТаблице(ТаблицаСОбщимиКолонками, "Штрихкод") Тогда
		ТаблицаСОбщимиКолонками.Колонки.Добавить("Штрихкод");
	КонецЕсли;
	Если Не ЕстьКолонкаВТаблице(ТаблицаСОбщимиКолонками, "ТекстОшибки") Тогда
		ТаблицаСОбщимиКолонками.Колонки.Добавить("ТекстОшибки");
	КонецЕсли;
	Если Не ЕстьКолонкаВТаблице(ТаблицаСОбщимиКолонками, "КоэффициентПересчетаУпаковки") Тогда
		ТаблицаСОбщимиКолонками.Колонки.Добавить("КоэффициентПересчетаУпаковки");
	КонецЕсли;
	Если Не ЕстьКолонкаВТаблице(ТаблицаСОбщимиКолонками, "РезультатРаспределения") Тогда
		ТаблицаСОбщимиКолонками.Колонки.Добавить("РезультатРаспределения");
	КонецЕсли;
	Если Не ЕстьКолонкаВТаблице(ТаблицаСОбщимиКолонками, "ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения") Тогда
		ТаблицаСОбщимиКолонками.Колонки.Добавить("ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения");
	КонецЕсли;
	Если Не ЕстьКолонкаВТаблице(ТаблицаСОбщимиКолонками, "ДополнениеКНаименованиюТовара") Тогда
		ТаблицаСОбщимиКолонками.Колонки.Добавить("ДополнениеКНаименованиюТовара");
	КонецЕсли;
	
	Возврат ТаблицаСОбщимиКолонками;
	
КонецФункции

Функция ОписаниеНоменклатуры(Номенклатура, ОписанияНоменклатурыСЧастичнымВыбытием)
	
	ОписаниеНоменклатуры = ОписанияНоменклатурыСЧастичнымВыбытием.Получить(Номенклатура);
	Если ОписаниеНоменклатуры = Неопределено Тогда
		СоответствиеОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура);
		ОписаниеНоменклатуры = СоответствиеОписаниеНоменклатуры[Номенклатура];
		
		ОписанияНоменклатурыСЧастичнымВыбытием.Вставить(Номенклатура, ОписаниеНоменклатуры);
	КонецЕсли;
	
	Возврат ОписаниеНоменклатуры;
	
КонецФункции

// TODO: Упаковка должна быть упаковкой частичного выбытия!!!
// Структура наименования товара для маркированного товара
// 
// Параметры:
//  СтрокаТовары - СтрокаТаблицыЗначений - Строка таблицы товаров документа реализации:
//  *Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка документа реализации
//  *Цена - Число - Цена единицы товара из документа реализации
//  СтрокаРаспределения - СтрокаТаблицыЗначений - Строка таблицы распределения товаров по штрихкода упаковки:
//  *Количество - Число - Количество товара в базовой единице измерения
//  *ЧастичноеВыбытиеКоличество - Число - Количество товара в единице измерения частичного выбытия
// 
// Возвращаемое значение:
//  Структура - Структура наименования товара:
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка документа реализации
// * Количество - Число - Количество товара в базовой единице измерения
// * КоличествоУпаковок - Число - Количество товара в единице измерения частичного выбытия
// * Цена - Число - Цена единицы товара из документа реализации
Функция СтруктураНаименованияТовара(СтрокаТовары, СтрокаРаспределения)
	
	СтруктураНаименованияТовара = Новый Структура;
	СтруктураНаименованияТовара.Вставить("Упаковка",           СтрокаТовары.Упаковка);
	СтруктураНаименованияТовара.Вставить("Количество",         СтрокаРаспределения.Количество);
	СтруктураНаименованияТовара.Вставить("КоличествоУпаковок", СтрокаРаспределения.ЧастичноеВыбытиеКоличество);
	СтруктураНаименованияТовара.Вставить("Цена",               СтрокаТовары.Цена);
	
	Возврат СтруктураНаименованияТовара;
	
КонецФункции

Функция ОтклонениеСуммыНДС(СтрокаТоварыРазобранные)
	
	СуммаСНДС = СтрокаТоварыРазобранные.СуммаСНДС;
	СтавкаНДСЧислом = СтрокаТоварыРазобранные.СтавкаНДСЧислом;
	
	СуммаНДСЭталон = СуммаСНДС / (100 + СтавкаНДСЧислом) * СтавкаНДСЧислом;
	ОтклонениеВСуммеНДС = СтрокаТоварыРазобранные.СуммаНДС - СуммаНДСЭталон;
	
	Возврат ОтклонениеВСуммеНДС;
	
КонецФункции

Функция СтруктураТаблицаРезультатРаспределения(ТаблицаОсновная, ТаблицаДополнительная, ПоляДетализации)
	
	ТаблицаРезультатРаспределения = ТаблицаОсновная.СкопироватьКолонки();
	
	Для Каждого СтрокаДетализации Из ПоляДетализации Цикл
		
		КолонкаДетализации = ТаблицаДополнительная.Колонки.Найти(СтрокаДетализации);
		
		Если КолонкаДетализации <> Неопределено Тогда
			ТаблицаРезультатРаспределения.Колонки.Добавить(КолонкаДетализации.Имя, КолонкаДетализации.ТипЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатРаспределения;
	
КонецФункции

Функция РаспределитьДанныеПоТаблицам(ТаблицаОсновная, ТаблицаДополнительная, ПоляИзмерения, ПоляДетализации, ПоляСумм, ПолеРасчетаБазы)
	
	ТаблицаРезультатРаспределения = СтруктураТаблицаРезультатРаспределения(ТаблицаОсновная, ТаблицаДополнительная, ПоляДетализации);
	
	// 
	Для Каждого СтрокаТаблицыОсновная Из ТаблицаОсновная Цикл
		
		СтруктураОтбора = Новый Структура;
		Для Каждого ПолеИзмерения Из ПоляИзмерения Цикл
			СтруктураОтбора.Вставить(ПолеИзмерения, СтрокаТаблицыОсновная[ПолеИзмерения]);
		КонецЦикла;
		
		МассивСтрокДляДобавленияВТаблицуРаспределения = ТаблицаДополнительная.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокДляДобавленияВТаблицуРаспределения.Количество() = 0 Тогда
			СтрокаТаблицыРезультатРаспределения = ТаблицаРезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатРаспределения, СтрокаТаблицыОсновная);
			
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаДляДобавленияВТаблицуРаспределения из МассивСтрокДляДобавленияВТаблицуРаспределения Цикл
			
			Если СтрокаТаблицыОсновная[ПолеРасчетаБазы] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДляДобавленияВТаблицуРаспределения[ПолеРасчетаБазы] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицыРезультатРаспределения = ТаблицаРезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатРаспределения, СтрокаТаблицыОсновная);
			
			Для Каждого ПолеДетализации Из ПоляДетализации Цикл
				СтрокаТаблицыРезультатРаспределения[ПолеДетализации] = СтрокаДляДобавленияВТаблицуРаспределения[ПолеДетализации];
			КонецЦикла;
			
			Если СтрокаДляДобавленияВТаблицуРаспределения[ПолеРасчетаБазы] < СтрокаТаблицыОсновная[ПолеРасчетаБазы] Тогда
				
				СтрокаТаблицыРезультатРаспределения[ПолеРасчетаБазы] = СтрокаДляДобавленияВТаблицуРаспределения[ПолеРасчетаБазы];
				
				Для Каждого ПолеСуммы Из ПоляСумм Цикл
					Если ПолеСуммы = ПолеРасчетаБазы Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыРезультатРаспределения[ПолеСуммы] = СтрокаТаблицыОсновная[ПолеСуммы] / СтрокаТаблицыОсновная[ПолеРасчетаБазы] * СтрокаТаблицыРезультатРаспределения[ПолеРасчетаБазы];
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаТаблицыОсновная[ПолеРасчетаБазы] = СтрокаТаблицыОсновная[ПолеРасчетаБазы] - СтрокаТаблицыРезультатРаспределения[ПолеРасчетаБазы];
			Для Каждого ПолеСуммы Из ПоляСумм Цикл
				Если ПолеСуммы = ПолеРасчетаБазы Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыОсновная[ПолеСуммы] = СтрокаТаблицыОсновная[ПолеСуммы] - СтрокаТаблицыРезультатРаспределения[ПолеСуммы];
			КонецЦикла;
			
			СтрокаДляДобавленияВТаблицуРаспределения[ПолеРасчетаБазы] = СтрокаДляДобавленияВТаблицуРаспределения[ПолеРасчетаБазы] - СтрокаТаблицыРезультатРаспределения[ПолеРасчетаБазы];
		
		КонецЦикла;
		
		Если СтрокаТаблицыОсновная[ПолеРасчетаБазы] > 0 Тогда
			СтрокаТаблицыРезультатРаспределения = ТаблицаРезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатРаспределения, СтрокаТаблицыОсновная);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатРаспределения;
	
КонецФункции

Процедура ПередВыполнениемОперацииВПлатежнойСистеме(ДокументОперации)
	
	Если Не ЗначениеЗаполнено(ДокументОперации)
		Или Не Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип.СодержитТип(ТипЗнч(ДокументОперации)) Тогда
		
		ВызватьИсключение НСтр("ru = 'Операция в платежной системе для документа не поддерживается.'");
	КонецЕсли;
	
КонецПроцедуры

// Добавить шаблоны email и sms для документа "Заказ клиента"
// 
// Параметры:
//  Шаблоны - Массив Из Структура - Шаблоны
Процедура ДобавитьШаблонЗаказКлиента(Шаблоны)
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", "Реквизиты для оплаты через СБП (Заказ клиента) (почта)");
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата{ДЛФ='dd.MM.yyyy'}] на сумму [ЗаказКлиента.СуммаДокумента] руб.");
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p></p>
		|<p><strong>Покупатель:</strong> %2<br>
		|<strong>Счет:</strong> %3 от %4 <br>
		|<strong>К оплате:</strong> %5</p>
		|<p></p>
		|<p>%6</p>
		|<p></p>
		|<p>%7</p>
		|<p>%8</p>
		|</body>
		|</html>",
		"Благодарим за заказ и просим оплатить.",
		"[ЗаказКлиента.ПартнерНаименование]",
		"[ЗаказКлиента.Номер]",
		"[ЗаказКлиента.Дата{ДЛФ='dd.MM.yyyy'}]",
		"[ЗаказКлиента.СуммаДокумента] руб.",
		"Для оплаты отсканируйте QR-код в Вашем мобильном банковском приложении
		| или перейдите по ссылке для  выбора приложения банка.",
		"[ЗаказКлиента.ПредставлениеСсылкиСБПQRКод]",
		"[ЗаказКлиента.ПредставлениеСсылкиСБП]");
	
	ТекстШаблона = СтрЗаменить(ТекстШаблона, Символы.ПС, "");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);

	// Демо: Реквизиты для оплаты, смс
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Реквизиты для оплаты через СБП (Заказ клиента) (смс)'"));
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [ЗаказКлиента.Номер] от [ЗаказКлиента.Дата{ДЛФ='dd.MM.yyyy'}] на сумму [ЗаказКлиента.СуммаДокумента] руб.");
	ТекстШаблона = 
		"Благодарим за заказ и просим оплатить.
		|
		|Сумма заказа: [ЗаказКлиента.СуммаДокумента] руб.
		|
		|Заказ можно оплатить, перейдя по ссылке [ЗаказКлиента.ПредставлениеСсылкиСБП]";
	
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
КонецПроцедуры

// Добавить шаблоны email и sms для документа "Счет на оплату клиенту"
// 
// Параметры:
//  Шаблоны - Массив Из Структура - Шаблоны
Процедура ДобавитьШаблонСчетНаОплатуКлиенту(Шаблоны)
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.СчетНаОплатуКлиенту");
	Шаблон.Вставить("Наименование", "Реквизиты для оплаты через СБП (Счет на оплату) (почта)");
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [СчетНаОплатуКлиенту.Номер] от [СчетНаОплатуКлиенту.Дата{ДЛФ='dd.MM.yyyy'}] на сумму [СчетНаОплатуКлиенту.СуммаДокумента] руб.");
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p></p>
		|<p><strong>Покупатель:</strong> %2<br>
		|<strong>Счет:</strong> %3 от %4 <br>
		|<strong>К оплате:</strong> %5</p>
		|<p></p>
		|<p>%6</p>
		|<p></p>
		|<p>%7</p>
		|<p>%8</p>
		|</body>
		|</html>",
		"Благодарим за заказ и просим оплатить.",
		"[СчетНаОплатуКлиенту.ПартнерНаименование]",
		"[СчетНаОплатуКлиенту.Номер]",
		"[СчетНаОплатуКлиенту.Дата{ДЛФ='dd.MM.yyyy'}]",
		"[СчетНаОплатуКлиенту.СуммаДокумента] руб.",
		"Для оплаты отсканируйте QR-код в Вашем мобильном банковском приложении
		| или перейдите по ссылке для  выбора приложения банка.",
		"[СчетНаОплатуКлиенту.ПредставлениеСсылкиСБПQRКод]",
		"[СчетНаОплатуКлиенту.ПредставлениеСсылкиСБП]");
		
	ТекстШаблона = СтрЗаменить(ТекстШаблона, Символы.ПС, "");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);

	// Демо: Реквизиты для оплаты, смс
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.СчетНаОплатуКлиенту");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Реквизиты для оплаты через СБП (Счет на оплату) (смс)'"));
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [СчетНаОплатуКлиенту.Номер] от [СчетНаОплатуКлиенту.Дата{ДЛФ='dd.MM.yyyy'}] на сумму [СчетНаОплатуКлиенту.СуммаДокумента] руб.");
	ТекстШаблона = 
		"Благодарим за заказ и просим оплатить.
		|
		|Сумма заказа: [СчетНаОплатуКлиенту.СуммаДокумента] руб.
		|
		|Заказ можно оплатить, перейдя по ссылке [СчетНаОплатуКлиенту.ПредставлениеСсылкиСБП]";
		
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
КонецПроцедуры

// Добавить шаблоны email и sms для документа "Акт выполненных работ"
// 
// Параметры:
//  Шаблоны - Массив Из Структура - Шаблоны
Процедура ДобавитьШаблонАктВыполненныхРабот(Шаблоны)
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.АктВыполненныхРабот");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Реквизиты для оплаты через СБП (Акт выполненных работ) (почта)'"));
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [АктВыполненныхРабот.Номер] от [АктВыполненныхРабот.Дата{ДЛФ='dd.MM.yyyy'}] на сумму [АктВыполненныхРабот.СуммаДокумента] руб.");
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p></p>
		|<p><strong>Покупатель:</strong> %2<br>
		|<strong>Счет:</strong> %3 от %4 <br>
		|<strong>К оплате:</strong> %5</p>
		|<p></p>
		|<p>%6</p>
		|<p></p>
		|<p>%7</p>
		|<p>%8</p>
		|</body>
		|</html>",
		"Благодарим за заказ и просим оплатить.",
		"[АктВыполненныхРабот.ПартнерНаименование]",
		"[АктВыполненныхРабот.Номер]",
		"[АктВыполненныхРабот.Дата{ДЛФ='dd.MM.yyyy'}]",
		"[АктВыполненныхРабот.СуммаДокумента] руб.",
		"Для оплаты отсканируйте QR-код в Вашем мобильном банковском приложении
		| или перейдите по ссылке для  выбора приложения банка.",
		"[АктВыполненныхРабот.ПредставлениеСсылкиСБПQRКод]",
		"[АктВыполненныхРабот.ПредставлениеСсылкиСБП]");
		
	ТекстШаблона = СтрЗаменить(ТекстШаблона, Символы.ПС, "");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);

	// Демо: Реквизиты для оплаты, смс
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.АктВыполненныхРабот");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Реквизиты для оплаты через СБП (Акт выполненных работ) (смс)'"));
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [АктВыполненныхРабот.Номер] от [АктВыполненныхРабот.Дата{ДЛФ='dd.MM.yyyy'}] на сумму [АктВыполненныхРабот.СуммаДокумента] руб.");
	ТекстШаблона = 
		"Благодарим за заказ и просим оплатить.
		|
		|Сумма заказа: [АктВыполненныхРабот.СуммаДокумента] руб.
		|
		|Заказ можно оплатить, перейдя по ссылке [АктВыполненныхРабот.ПредставлениеСсылкиСБП]";
		
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
КонецПроцедуры

// Добавить шаблоны email и sms для документа "Реализация товаров и услуг"
// 
// Параметры:
//  Шаблоны - Массив Из Структура - Шаблоны
Процедура ДобавитьШаблонРеализацияТоваровУслуг(Шаблоны)
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.РеализацияТоваровУслуг");
	Шаблон.Вставить("Наименование", "Реквизиты для оплаты через СБП (Реализация товаров и услуг) (почта)");
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [РеализацияТоваровУслуг.Номер] от [РеализацияТоваровУслуг.Дата{ДЛФ=dd.MM.yyyy}] на сумму [РеализацияТоваровУслуг.СуммаДокумента] руб.");
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p></p>
		|<p><strong>Покупатель:</strong> %2<br>
		|<strong>Счет:</strong> %3 от %4 <br>
		|<strong>К оплате:</strong> %5</p>
		|<p></p>
		|<p>%6</p>
		|<p>%7</p>
		|<p>%8</p>
		|</body>
		|</html>",
		"Благодарим за заказ и просим оплатить.",
		"[РеализацияТоваровУслуг.ПартнерНаименование]",
		"[РеализацияТоваровУслуг.Номер]",
		"[РеализацияТоваровУслуг.Дата{ДЛФ='dd.MM.yyyy'}]",
		"[РеализацияТоваровУслуг.СуммаДокумента] руб.",
		"Для оплаты отсканируйте QR-код в Вашем мобильном банковском приложении или перейдите по ссылке для выбора приложения банка.",
		"[РеализацияТоваровУслуг.ПредставлениеСсылкиСБПQRКод]",
		"[РеализацияТоваровУслуг.ПредставлениеСсылкиСБП]");
		
	ТекстШаблона = СтрЗаменить(ТекстШаблона, Символы.ПС, "");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);

	// Демо: Реквизиты для оплаты, смс
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.РеализацияТоваровУслуг");
	Шаблон.Вставить("Наименование", "Реквизиты для оплаты через СБП (Реализация товаров и услуг) (смс)");
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [РеализацияТоваровУслуг.Номер] от [РеализацияТоваровУслуг.Дата{ДЛФ=dd.MM.yyyy}] на сумму [РеализацияТоваровУслуг.СуммаДокумента] руб.");
	ТекстШаблона = 
		"Благодарим за заказ и просим оплатить.
		|
		|Реквизиты для оплаты: [РеализацияТоваровУслуг.СуммаДокумента] руб.
		|
		|Заказ можно оплатить, перейдя по ссылке [РеализацияТоваровУслуг.ПредставлениеСсылкиСБП]";
		
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
КонецПроцедуры

// Добавить шаблоны email и sms для документа "Реализация услуг и прочих активов"
// 
// Параметры:
//  Шаблоны - Массив Из Структура - Шаблоны
Процедура ДобавитьШаблонРеализацияУслугПрочихАктивов(Шаблоны)
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "Письмо");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.РеализацияУслугПрочихАктивов");
	Шаблон.Вставить("Наименование", "Реквизиты для оплаты через СБП (Реализация услуг и прочих активов) (почта)");
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [РеализацияУслугПрочихАктивов.Номер] от [РеализацияУслугПрочихАктивов.Дата{ДЛФ=dd.MM.yyyy}] на сумму [РеализацияУслугПрочихАктивов.СуммаДокумента] руб.");
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p></p>
		|<p><strong>Покупатель:</strong> %2<br>
		|<strong>Счет:</strong> %3 от %4 <br>
		|<strong>К оплате:</strong> %5</p>
		|<p></p>
		|<p>%6</p>
		|<p></p>
		|<p>%7</p>
		|<p>%8</p>
		|</body>
		|</html>",
		"Благодарим за заказ и просим оплатить.",
		"[РеализацияУслугПрочихАктивов.ПартнерНаименование]",
		"[РеализацияУслугПрочихАктивов.Номер]",
		"[РеализацияУслугПрочихАктивов.Дата{ДЛФ='dd.MM.yyyy'}]",
		"[РеализацияУслугПрочихАктивов.СуммаДокумента] руб.",
		"Для оплаты отсканируйте QR-код в Вашем мобильном банковском приложении
		| или перейдите по ссылке для  выбора приложения банка.",
		"[РеализацияУслугПрочихАктивов.ПредставлениеСсылкиСБПQRКод]",
		"[РеализацияУслугПрочихАктивов.ПредставлениеСсылкиСБП]");
		
	ТекстШаблона = СтрЗаменить(ТекстШаблона, Символы.ПС, "");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);

	// Демо: Реквизиты для оплаты, смс
	Шаблон = Новый Структура();
	Шаблон.Вставить("ТипШаблона", "SMS");
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.РеализацияУслугПрочихАктивов");
	Шаблон.Вставить("Наименование", "Реквизиты для оплаты через СБП (Реализация услуг и прочих активов) (смс)");
	Шаблон.Вставить("Тема", "Реквизиты для оплаты: [РеализацияУслугПрочихАктивов.Номер] от [РеализацияУслугПрочихАктивов.Дата{ДЛФ=dd.MM.yyyy}] на сумму [РеализацияУслугПрочихАктивов.СуммаДокумента] руб.");
	ТекстШаблона = 
		"Благодарим за заказ и просим оплатить.
		|
		|Сумма заказа: [РеализацияУслугПрочихАктивов.СуммаДокумента] руб.
		|
		|Заказ можно оплатить, перейдя по ссылке [РеализацияУслугПрочихАктивов.ПредставлениеСсылкиСБП]";
		
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблоны.Добавить(Шаблон);
	
КонецПроцедуры

//-- Локализация

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	//++ Локализация

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РозничныеПродажиЛокализация.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.16.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("62f964a1-d628-d3a4-aa26-1cf4249e9533");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РозничныеПродажиЛокализация.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	ШаблонКомментария = НСтр("ru = 'Заполняет справочник ""%1"" предопределенными шаблонами для разных типов документов.'");
	Обработчик.Комментарий = СтрШаблон(ШаблонКомментария, Метаданные.Справочники.ШаблоныСообщений.Синоним);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиИнтеграцииСПлатежнымиСистемамиУТ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ДоговорыЭквайринга.ПолноеИмя());	
	Читаемые.Добавить(Метаданные.Справочники.ШаблоныСообщений.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ШаблоныСообщений.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ШаблоныСообщений.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Интеграция КАК Ссылка
		|ИЗ
		|	РегистрСведений.НастройкиИнтеграцииСПлатежнымиСистемамиУТ КАК НастройкиИнтеграцииСПлатежнымиСистемамиУТ
		|ГДЕ
		|	НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор.ПометкаУдаления = ЛОЖЬ
		|	И НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Договор.СпособПроведенияПлатежа = ЗНАЧЕНИЕ(Перечисление.СпособыПроведенияПлатежей.СистемаБыстрыхПлатежей)
		|	И НЕ НастройкиИнтеграцииСПлатежнымиСистемамиУТ.Интеграция = ЗНАЧЕНИЕ(Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка)";
	
	НастройкиИнтеграции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	РезультатПроверки = ПереводыСБПc2bСлужебный.ВсеШаблоныСозданы();
	Если НастройкиИнтеграции.Количество() И Не РезультатПроверки.ВсеШаблоны Тогда
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, НастройкиИнтеграции, );
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ОбновляемыеДанные.Количество() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		// Для обновления регистрируется только один элемент справочника.
		ОбновляемыеДанныеСсылка = ОбновляемыеДанные[0].Ссылка;
		
		ПереводыСБПc2bСлужебный.СоздатьПредопределенныеШаблоныСообщений(Истина, Истина);
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбновляемыеДанныеСсылка);
		
	Исключение
		
		ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ОбновляемыеДанныеСсылка);
		
	КонецПопытки;
		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти