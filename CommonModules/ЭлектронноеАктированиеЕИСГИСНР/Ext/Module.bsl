
#Область СлужебныйПрограммныйИнтерфейс

#Область ЗапускОтправкиДанных

// Отправляет данные события обмена с ЕИС (входящая квитанция)
// 
// Параметры:
//  Организация           - СправочникСсылка.Организации
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  ДатаСобытия           - Дата
//  СодержимоеПакета      - Строка
//  ОшибкаОтправки        - Булево
//  ОписаниеОшибки        - Строка
// 
// Возвращаемое значение:
//  см. НовыйРезультатОбмена
//
Функция ОтправитьЛогПоДокументуОПриемке(
	Организация,
	ТранспортныйКонтейнер,
	ДатаСобытия,
	СодержимоеПакета,
	ОшибкаОтправки,
	ОписаниеОшибки = "") Экспорт

	Результат = НовыйРезультатОбмена();
	
	НастройкиОбмена = НастройкиОбменаГИСНР(Организация);
	Если Не НастройкиОбмена.ОбменСГИСНРВключен Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда 
		ДобавитьИнформациюОбОшибке(Результат,
			НСтр("ru = 'Не заполнен транспортный контейнер по которому производится логирование.'"));
	КонецЕсли;
	
	Если Не Результат.Ошибка Тогда 
		ДатаСобытияУниверсальная = УниверсальноеВремя(ДатаСобытия, ЧасовойПоясСеанса());
		СтруктураДанных = Новый Структура; 
		СтруктураДанных.Вставить("ТранспортныйКонтейнер", ТранспортныйКонтейнер);
		СтруктураДанных.Вставить("ДатаСобытияУниверсальная", ДатаСобытияУниверсальная);
		СтруктураДанных.Вставить("ДатаСобытия", ДатаСобытия);
		СтруктураДанных.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор));
		СтруктураДанных.Вставить("УспешностьОтправки", Не ОшибкаОтправки);
		СтруктураДанных.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		Кодировка = "windows-1251";
		
		// Добавление в структуру следующих ключей и значений по данным транспортного контейнера:
		// ИдентификаторПакета, ПредставлениеОрганизации, ПредставлениеКонтрагента, ИННКППОрганизации, ИННКППКонтрагента
		ДополнитьСтруктуруДаннымиТранспортногоКонтейнера(СтруктураДанных, Результат);
		
		// Добавление в структуру следующих ключей и значений из счет-фактуры:
		//	ВидДокумента, НомерДокумента, ДатаДокумента, НомерИсправленияДокумента, ДатаИсправленияДокумента,
		//	НаименованиеДокументаПоКоторомуИдетКорректировка, НомерДокументаПоКоторомуИдетКорректировка
		//	ДатаДокументаПоКоторомуИдетКорректировка, НаименованиеДокумента.
		ДополнитьСтруктуруДаннымиДокументаСЧФ(СтруктураДанных, СодержимоеПакета, Кодировка, Результат);
		
		// Добавление в структуру ключ и значение из приложения: РеестровыйНомерКонтракта.
		ДополнитьСтруктуруДаннымиПриложения(СтруктураДанных, СодержимоеПакета, Кодировка, Результат);
		
		Если СтруктураДанных.ВидДокумента = НаименованиеКорректировочногоДокументаГИСНР() 
			Или СтруктураДанных.ВидДокумента =  НаименованиеКорректировочнойСЧФГИСНР() Тогда
			ТипСообщения = "100105020";
		Иначе
			ТипСообщения = "100105010";
		КонецЕсли;
		
		ВерсияТипаСообщения = ВерсияТипаСообщения(ТипСообщения);
		
	    СодержимоеЗапроса = СтрокаЗапросаПоВерсииТипаСообщения(ВерсияТипаСообщения, СтруктураДанных, Результат);
	    СтрокаЗапроса = СтрокаЗапросаJson(СодержимоеЗапроса);
	    
	    Если Результат.Ошибка Тогда
	    	ЗаполнитьТекстОписанияОшибок(Результат);
	    	СтатусОшибкаЗаполнения = Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаЗаполнения;
	    	ВидСобытия = Перечисления.ВидыСобытийГИСНР.ОтправкаДокумента;
	    	ЗаписатьВРегистрРезультатОбмена(СтруктураДанных,
	    		Организация,
	    		СтатусОшибкаЗаполнения,
				ВидСобытия,
	    		"",
	    		Результат.ОписаниеОшибки);
	    КонецЕсли;
	КонецЕсли;
	
	Если Не Результат.Ошибка Тогда 
		СтруктурАдреса = СтруктураАдресаСервераГИСНР();
		Соединение = ПолучитьСоединениеССерверомГИСНР(СтруктурАдреса, Результат);
		 
		ОтправитьЗапросНаСерверГИСНР(Соединение, 
			СтруктурАдреса.ПутьНаСервере,
			СтрокаЗапроса,
			НастройкиОбмена.Токен,
			Результат);
		
		Если Результат.Ошибка Тогда
			ЗаполнитьТекстОписанияОшибок(Результат);
			СтатусОтправкиОшибка = Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки;
			ВидСобытия = Перечисления.ВидыСобытийГИСНР.ОтправкаДокумента;
			ЗаписатьВРегистрРезультатОбмена(СтруктураДанных,
				Организация,
				СтатусОтправкиОшибка,
				ВидСобытия,
				СтрокаЗапроса,
				Результат.ОписаниеОшибки);
			ВключитьРегламентноеЗадание();
		КонецЕсли;		
	КонецЕсли;	
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации();
	Если Результат.Ошибка Тогда
		ТекстШаблонаОшибки = НСтр("ru = 'Регистрация отправки %1 не выполнена.'");
		ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки, ТранспортныйКонтейнер);
		Результат.МассивОшибок.Вставить(0, ТекстОшибки);
		ЗаполнитьТекстОписанияОшибок(Результат);
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, ,
			ТранспортныйКонтейнер, 
			Результат.ОписаниеОшибки);
	Иначе    
		ТекстШаблона = НСтр("ru = 'Регистрация отправки %1 выполнена успешно.'");
		ТекстИнформации = СтрШаблон(ТекстШаблона, ТранспортныйКонтейнер);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Информация, ,
			ТранспортныйКонтейнер, 
			ТекстИнформации);
			
		СтатусОтправкиУспешно = Перечисления.СтатусыОтправкиДанныхВГИСНР.Отправлено;
		ВидСобытия = Перечисления.ВидыСобытийГИСНР.ОтправкаДокумента;
		ЗаписатьВРегистрРезультатОбмена(СтруктураДанных, Организация, СтатусОтправкиУспешно, ВидСобытия);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отправляет данные события обмена с ЕИС (исходящая квитанция)
// 
// Параметры:
//  Организация           - СправочникСсылка.Организации
//  ДатаСобытия           - Дата
//  ИдентификаторТранспортногоПакета - Строка
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
//  ОшибкаОтправки        - Булево
//  ОписаниеОшибки        - Строка
// 
// Возвращаемое значение:
//  см. НовыйРезультатОбмена
//
Функция ОтправитьЛогОДоставкеДокументаВЕИС(
	Организация,
	ДатаСобытия,
	ИдентификаторТранспортногоПакета,
	ТранспортныйКонтейнер,
	ОшибкаОтправки,
	ОписаниеОшибки = "") Экспорт

	Результат = НовыйРезультатОбмена();
	
	НастройкиОбмена = НастройкиОбменаГИСНР(Организация);
	Если Не НастройкиОбмена.ОбменСГИСНРВключен Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТранспортныйКонтейнер) Тогда 
		ДобавитьИнформациюОбОшибке(Результат,
			НСтр("ru = 'Не заполнен транспортный контейнер по которому производится логирование.'"));
	КонецЕсли;

	ТипСообщения = "100105030";
	ВерсияТипаСообщения = ВерсияТипаСообщения(ТипСообщения);
	
	ДатаСобытияУниверсальная = УниверсальноеВремя(ДатаСобытия, ЧасовойПоясСеанса());
	
	СтруктураДанных = Новый Структура; 
	СтруктураДанных.Вставить("ТранспортныйКонтейнер", ТранспортныйКонтейнер);
	СтруктураДанных.Вставить("ИдентификаторПакета", ИдентификаторТранспортногоПакета);
	СтруктураДанных.Вставить("ДатаСобытияУниверсальная", ДатаСобытияУниверсальная);
	СтруктураДанных.Вставить("ДатаСобытия", ДатаСобытия);
	СтруктураДанных.Вставить("УспешностьОтправки", Не ОшибкаОтправки);
	СтруктураДанных.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураДанных.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор));
	
	СодержимоеЗапроса = СтрокаЗапросаПоВерсииТипаСообщения(ВерсияТипаСообщения, СтруктураДанных, Результат);
	СтрокаЗапроса = СтрокаЗапросаJson(СодержимоеЗапроса);
	
	Если Не Результат.Ошибка Тогда
  		СтруктурАдреса = СтруктураАдресаСервераГИСНР();
		Соединение = ПолучитьСоединениеССерверомГИСНР(СтруктурАдреса, Результат);
		 
		ОтправитьЗапросНаСерверГИСНР(Соединение, 
			СтруктурАдреса.ПутьНаСервере,
			СтрокаЗапроса,
			НастройкиОбмена.Токен,
			Результат);
		
		Если Результат.Ошибка Тогда
			ЗаполнитьТекстОписанияОшибок(Результат);
			СтатусОтправкиОшибка = Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки;
			ВидСобытияОтправки = Перечисления.ВидыСобытийГИСНР.ОтветнаяКвитанцияЕИС;
			ЗаписатьВРегистрРезультатОбмена(СтруктураДанных,
				Организация,
				СтатусОтправкиОшибка,
				ВидСобытияОтправки,
				СтрокаЗапроса,
				Результат.ОписаниеОшибки);
			ВключитьРегламентноеЗадание();
		КонецЕсли;	
	КонецЕсли;	
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации();
	Если Результат.Ошибка Тогда
		ТекстШаблона = НСтр("ru = 'Регистрация обработки по контейнеру %1 не выполнена.'");
		ТекстОшибки = СтрШаблон(ТекстШаблона, ТранспортныйКонтейнер);
		Результат.МассивОшибок.Вставить(0, ТекстОшибки);
		ЗаполнитьТекстОписанияОшибок(Результат);
			
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			Результат.ОписаниеОшибки);
			
	Иначе
		ТекстШаблона = НСтр("ru = 'Регистрация обработки по контейнеру %1 выполнена успешно.'");
		ТекстИнформации = СтрШаблон(ТекстШаблона, ТранспортныйКонтейнер);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, 
			УровеньЖурналаРегистрации.Информация, , , 
			ТекстИнформации);
			
		СтатусОтправкиУспешно = Перечисления.СтатусыОтправкиДанныхВГИСНР.Отправлено;
		ВидСобытияОтправки = Перечисления.ВидыСобытийГИСНР.ОтветнаяКвитанцияЕИС;
		ЗаписатьВРегистрРезультатОбмена(СтруктураДанных, Организация, СтатусОтправкиУспешно, ВидСобытияОтправки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отправляет данные для регистрации в ГИС НР по данным регистра.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Электронный документ по которому отправлялось
//  					  сообщение
// 
// Возвращаемое значение:
//  Массив из Структура - см. НовыйРезультатОбмена
//
Функция ОтправитьЛогПоДаннымРегистра(ЭлектронныйДокумент) Экспорт
	
	МассивРезультатовОбмена = Новый Массив;

	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбмена = НовыйРезультатОбмена();
	СтруктурАдреса = СтруктураАдресаСервераГИСНР();
	Соединение = ПолучитьСоединениеССерверомГИСНР(СтруктурАдреса, РезультатОбмена);
	Если РезультатОбмена.Ошибка Тогда
		Результат = НовыйРезультатОбменаПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(Результат, РезультатОбмена);
		МассивРезультатовОбмена.Добавить(Результат);
		Возврат МассивРезультатовОбмена;
	КонецЕсли;
	
	ПутьНаСервере = СтруктурАдреса.ПутьНаСервере;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыОбменаДаннымиСГИСНР.Организация КАК Организация,
	|	РезультатыОбменаДаннымиСГИСНР.СтатусОтправкиДанных КАК СтатусОтправкиДанных,
	|	РезультатыОбменаДаннымиСГИСНР.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	РезультатыОбменаДаннымиСГИСНР.ИдентификаторПакета КАК ИдентификаторПакета,
	|	РезультатыОбменаДаннымиСГИСНР.ТекстЗапроса КАК ТекстЗапроса,
	|	РезультатыОбменаДаннымиСГИСНР.ДатаСобытия КАК ДатаСобытия,
	|	РезультатыОбменаДаннымиСГИСНР.ЧасовойПояс КАК ЧасовойПояс,
	|	РезультатыОбменаДаннымиСГИСНР.ВидСобытия КАК ВидСобытия,
	|	РезультатыОбменаДаннымиСГИСНР.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ ВсеЗаписи
	|ИЗ
	|	РегистрСведений.РезультатыОбменаДаннымиСГИСНР.СрезПоследних(, ЭлектронныйДокумент В (&ЭлектронныйДокумент)) КАК РезультатыОбменаДаннымиСГИСНР;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеЗаписи.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВсеЗаписи.ИдентификаторПакета КАК ИдентификаторПакета,
	|	ВсеЗаписи.ТекстЗапроса КАК ТекстЗапроса,
	|	ВсеЗаписи.ДатаСобытия КАК ДатаСобытия,
	|	ВсеЗаписи.ЧасовойПояс КАК ЧасовойПояс,
	|	ВсеЗаписи.ВидСобытия КАК ВидСобытия,
	|	ВсеЗаписи.ОбъектУчета КАК ОбъектУчета,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации
	|ИЗ
	|	ВсеЗаписи КАК ВсеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|		ПО ВсеЗаписи.Организация = НастройкиОбменаЕИС.Организация
	|ГДЕ
	|	ВсеЗаписи.СтатусОтправкиДанных = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки)");
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах = РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах();
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		Результат = НовыйРезультатОбменаПоЭлектронномуДокументу();
		Результат.ДатаСобытия = Выборка.ДатаСобытия;
		Результат.ВидСобытия = Выборка.ВидСобытия;
		Результат.Документ = Выборка.ОбъектУчета;
		
		УниверсальнаяДатаСобытия = УниверсальноеВремя(Выборка.ДатаСобытия, Выборка.ЧасовойПояс);
		РазницаДат = ТекущаяУниверсальнаяДата() - УниверсальнаяДатаСобытия;
				
		Если РазницаДат > РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах Тогда
			РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ДобавитьСтатусПросрочено(ИдентификаторСообщения);
			Результат.Статус = Перечисления.СтатусыОтправкиДанныхВГИСНР.Просрочено;
			МассивРезультатовОбмена.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		ОтправитьЗапросНаСерверГИСНР(Соединение, ПутьНаСервере, Выборка.ТекстЗапроса, Выборка.ТокенАвторизации, Результат);

		ИмяСобытия = ИмяСобытияЖурналаРегистрации();
		Если Результат.Ошибка Тогда
			ТекстОшибокОтправки = СтрСоединить(Результат.МассивОшибок, Символы.ПС);
			РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ДобавитьСтатусОшибкаОтправки(ИдентификаторСообщения,
				ТекстОшибокОтправки);

			ТекстШаблона = НСтр(
					"ru = 'Повторная отправка данных мониторинга по контейнеру с идентификатором %1 не выполнена.'");
			ТекстОшибки = СтрШаблон(ТекстШаблона, Выборка.ИдентификаторПакета);
			Результат.МассивОшибок.Вставить(0, ТекстОшибки);
			Результат.Статус = Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки;

			ПолныйТекстОшибок = СтрСоединить(Результат.МассивОшибок, Символы.ПС);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
				ПолныйТекстОшибок);
		Иначе
			Результат.Статус = Перечисления.СтатусыОтправкиДанныхВГИСНР.Отправлено;
			ТекстШаблона = НСтр(
				"ru = 'Повторная отправка данных мониторинга по контейнеру с идентификатором %1 выполнена успешно.'");
			ТекстИнформации = СтрШаблон(ТекстШаблона, Выборка.ИдентификаторПакета);

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
				ТекстИнформации);

			РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ДобавитьСтатусОтправлено(ИдентификаторСообщения);
		КонецЕсли;
	
		МассивРезультатовОбмена.Добавить(Результат);
	КонецЦикла;
			
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивРезультатовОбмена;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.РезультатыОбменаДаннымиСГИСНР, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|РегистрСведений.РезультатыОбменаДаннымиСГИСНР.Чтение.Организации
	|РегистрСведений.РезультатыОбменаДаннымиСГИСНР.Изменение.Организации
	|";
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИС.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменГИСНР;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// См. ЭлектронноеАктированиеЕИС.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ОбменГИСНР.ИмяМетода);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	СерверОбмена = СтруктураАдресаСервераГИСНР();
	АдресСервера = СтрЗаменить(СерверОбмена.ИмяСервера, "https://", "");
	Описание = НСтр("ru = 'Сервис регистрации событий в единой информационной системы в сфере закупок'");
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		АдресСервера,
		443,
		Описание);
	НовыеРазрешения.Добавить(Разрешение);

	Разрешения = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения);
	ЗапросыРазрешений.Добавить(Разрешения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формируется настройки плагина ГИС НР по сводке документов
// 
// Параметры:
//  ДокументыЭДО - Массив из ДокументСсылка
//
// Возвращаемое значение:
//  Число - описывает признак для запуска плагина
//          0 - нет обмена с ЕИС
//          1 - включен обмен с ЕИС
//          2 - включено логинование при обмене с ЕИС
//          3 - включать плагин ГИС НР при обмене с ЕИС
//
Функция НастройкиЗапускаПлагинаДляГИСНР(ДокументыЭДО) Экспорт
	
	Результат = 0;
	
	ВсеДокументы = НастройкиОбменаДокументовДляГИСНР(ДокументыЭДО);
	Для Каждого СтрокаМассива Из ВсеДокументы Цикл
		Результат = Макс(Результат, СтрокаМассива.Значение.Статус);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формируется настройки обмена ЕИС для каждого документа в отдельности
// 
// Параметры:
//  ДокументыЭДО - Массив из ДокументСсылка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ       - ДокументСсылка
//    * Значение   - Структура:
//       ** ВидеоЗаписьВключена - Булево
//       ** ОбменСГИСНРВключен  - Булево
//       ** Статус              - Число
//       ** Токен               - Строка
//       ** ОбменВключен        - Булево
//       ** Организация         - СправочникСсылка.Организации
//
Функция НастройкиОбменаДокументовДляГИСНР(ДокументыЭДО) Экспорт
	
	Результат = Новый Соответствие;

	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС()
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаЕИС)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДанныеДокументовЭлектронногоАктированияЕИС) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыЭДО) = Тип("Массив") Тогда
		ИсточникДанныхСсылка = ДокументыЭДО;
	ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ДокументыЭДО) Тогда
		ИсточникДанныхСсылка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыЭДО);
	Иначе
		ИсточникДанныхСсылка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыЭДО.Ссылка);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(НастройкиОбменаЕИС.ТокенАвторизации, """") КАК Токен,
	|	ЕСТЬNULL(НастройкиОбменаЕИС.ВидеозаписьГИСНРВключена, ЛОЖЬ)
	|		И ЕСТЬNULL(НастройкиОбменаЕИС.ОбменСГИСНРВключен, ЛОЖЬ)
	|		И ЕСТЬNULL(НастройкиОбменаЕИС.ОбменВключен, ЛОЖЬ) КАК ВидеозаписьВключена,
	|	ЕСТЬNULL(НастройкиОбменаЕИС.ОбменСГИСНРВключен, ЛОЖЬ)
	|		И ЕСТЬNULL(НастройкиОбменаЕИС.ОбменВключен, ЛОЖЬ) КАК ОбменСГИСНРВключен,
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Документ КАК Документ,
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Организация КАК Организация,
	|	ЕСТЬNULL(НастройкиОбменаЕИС.ОбменВключен, ЛОЖЬ) КАК ОбменВключен,
	|	ЕСТЬNULL(НастройкиОбменаЕИС.ДлительностьВидеозаписи, 60) КАК ДлительностьВидеозаписи
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовЭлектронногоАктированияЕИС КАК ДанныеДокументовЭлектронногоАктированияЕИС
	|		ПО НастройкиОбменаЕИС.Организация = ДанныеДокументовЭлектронногоАктированияЕИС.Организация
	|ГДЕ
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Документ В(&ДокументыЭДО)");
	
	Запрос.УстановитьПараметр("ДокументыЭДО", ИсточникДанныхСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = Новый Структура("ВидеоЗаписьВключена, Токен", Ложь, "", "");
		НоваяЗапись.Вставить("ОбменВключен", Ложь);
		НоваяЗапись.Вставить("Организация", Неопределено);
		НоваяЗапись.Вставить("ОбменСГИСНРВключен", Ложь);
		НоваяЗапись.Вставить("ДлительностьВидеозаписи", 0);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);

		ТекущийСтатус = 0;
		Если Выборка.ВидеоЗаписьВключена Тогда
			ТекущийСтатус = 3;
		ИначеЕсли Выборка.ОбменСГИСНРВключен Тогда
			ТекущийСтатус = 2;
		ИначеЕсли Выборка.ОбменВключен Тогда
			ТекущийСтатус = 1;
		КонецЕсли;
		
		НоваяЗапись.Вставить("Статус", ТекущийСтатус);
		
		Результат.Вставить(Выборка.Документ, НоваяЗапись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Меняет настройки обмена с ЕИС в части регистрации событий в ГИС НР
//
// Параметры:
//  Организация         - СправочникСсылка.Организации
//  ФиксироватьСобытия  - Булево
//  ВключатьВидеозапись - Булево
//
Процедура ИзменитьНастройкиОбменаДляГИСНР(Организация, ФиксироватьСобытия, ВключатьВидеозапись) Экспорт
	
	НоваяНастройка = РегистрыСведений.НастройкиОбменаЕИС.СоздатьМенеджерЗаписи();
	НоваяНастройка.Организация = Организация;
	НоваяНастройка.Прочитать();
	
	НоваяНастройка.Организация = Организация;
	НоваяНастройка.ВидеозаписьГИСНРВключена = ВключатьВидеозапись;
	НоваяНастройка.ОбменСГИСНРВключен = ФиксироватьСобытия;
	НоваяНастройка.Организация = Организация;
	
	НоваяНастройка.Записать();

КонецПроцедуры

Функция СтруктураАдресаСервераГИСНР() Экспорт

	СерверГИСНР = АдресСервераГИСНР();
	СтруктурАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СерверГИСНР);
	
	Возврат СтруктурАдреса; 
		
КонецФункции

// Отключает регламентное задание для переотправки событий информационного обмена с ЕИС
//
Процедура ОтключитьРегламентноеЗадание() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Ключ", ИдентификаторРегламентногоЗадания());
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет необходимость запуска регламентного задания для переотправки событий информационного обмена с ЕИС
//
Процедура ЗапуститьРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменГИСНР);
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыОбменаДаннымиСГИСНР.Организация КАК Организация,
	|	РезультатыОбменаДаннымиСГИСНР.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	РезультатыОбменаДаннымиСГИСНР.ИдентификаторПакета КАК ИдентификаторПакета,
	|	РезультатыОбменаДаннымиСГИСНР.ТекстЗапроса КАК ТекстЗапроса,
	|	РезультатыОбменаДаннымиСГИСНР.ДатаСобытия КАК ДатаСобытия,
	|	РезультатыОбменаДаннымиСГИСНР.ЧасовойПояс КАК ЧасовойПояс
	|ПОМЕСТИТЬ ВсеЗаписи
	|ИЗ
	|	РегистрСведений.РезультатыОбменаДаннымиСГИСНР.СрезПоследних(,
	|		СтатусОтправкиДанных = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки)) КАК РезультатыОбменаДаннымиСГИСНР;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеЗаписи.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ВсеЗаписи.ИдентификаторПакета КАК ИдентификаторПакета,
	|	ВсеЗаписи.ТекстЗапроса КАК ТекстЗапроса,
	|	ВсеЗаписи.ДатаСобытия КАК ДатаСобытия,
	|	ВсеЗаписи.ЧасовойПояс КАК ЧасовойПояс,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации
	|ИЗ
	|	ВсеЗаписи КАК ВсеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|		ПО ВсеЗаписи.Организация = НастройкиОбменаЕИС.Организация");

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОтключитьРегламентноеЗадание();
		Возврат;
	КонецЕсли;
	
	Соединение = Неопределено;
	РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах = РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах();
		
	НужноОтключитьРегламентноеЗадание = Истина;	
	Пока Выборка.Следующий() Цикл
		
		Результат = НовыйРезультатОбмена();
		
		ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
		УниверсальнаяДатаСобытия = УниверсальноеВремя(Выборка.ДатаСобытия, Выборка.ЧасовойПояс);
		РазницаДат = ТекущаяУниверсальнаяДата() - УниверсальнаяДатаСобытия;
				
		Если РазницаДат > РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах Тогда
			РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ДобавитьСтатусПросрочено(ИдентификаторСообщения);
		Иначе
			Если Соединение = Неопределено Тогда
				СтруктурАдреса = СтруктураАдресаСервераГИСНР();
				Соединение = ПолучитьСоединениеССерверомГИСНР(СтруктурАдреса, Результат);
				ПутьНаСервере = СтруктурАдреса.ПутьНаСервере;
				Если Результат.Ошибка Тогда
					Возврат;
				КонецЕсли;	 
			КонецЕсли;
			
			ОтправитьЗапросНаСерверГИСНР(Соединение, 
				ПутьНаСервере,
				Выборка.ТекстЗапроса,
				Выборка.ТокенАвторизации,
				Результат);
			
			ИмяСобытия = ИмяСобытияЖурналаРегистрации();
			Если Результат.Ошибка Тогда
				НужноОтключитьРегламентноеЗадание = Ложь;
				
				ТекстОшибокОтправки = СтрСоединить(Результат.МассивОшибок, Символы.ПС);
				РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ДобавитьСтатусОшибкаОтправки(ИдентификаторСообщения,
					ТекстОшибокОтправки);				
				
				ТекстШаблона = НСтр("ru = 'Повторная отправка данных мониторинга по контейнеру с идентификатором %1 не выполнена.'");
				ТекстОшибки = СтрШаблон(ТекстШаблона, Выборка.ИдентификаторПакета);
				Результат.МассивОшибок.Вставить(0, ТекстОшибки);
				
				ПолныйТекстОшибок = СтрСоединить(Результат.МассивОшибок, Символы.ПС);
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, 
					УровеньЖурналаРегистрации.Ошибка, , , 
					ПолныйТекстОшибок);
			Иначе
				ТекстШаблона = НСтр("ru = 'Повторная отправка данных мониторинга по контейнеру с идентификатором %1 выполнена успешно.'");
				ТекстИнформации = СтрШаблон(ТекстШаблона, Выборка.ИдентификаторПакета);
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, 
					УровеньЖурналаРегистрации.Информация, , , 
					ТекстИнформации);
				
				РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ДобавитьСтатусОтправлено(ИдентификаторСообщения);
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;

	Если НужноОтключитьРегламентноеЗадание Тогда
		ОтключитьРегламентноеЗадание();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

// Создает и возвращает группу формы со статусом ошибки ГИС НР.
// Если элемент создан в конфигурации потребителе, то необходимо соблюсти условия описанные в документации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  СсылкаОбъектаУчета - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  ДекорацияФормы - созданный элемент формы
//
Функция СоздатьЭлементФормыСтатусаОшибкиГИСНР(Форма, СсылкаОбъектаУчета) Экспорт
	
	ГруппаДекорации = Неопределено;
	ДекорацииФормыСтатусаОШибкиГИСНР = Неопределено;
	
	#Если НЕ ВнешнееСоединение Тогда
		
	ЭлементыФормы = Форма.Элементы;
	ИмяДекорации = ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОШибкиГИСНР();
	ИмяДекорацииВидеозаписи
		= ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР();
	
	ЭлектронноеАктированиеЕИСГИСНРПереопределяемый.ПолучитьЭлементФормыДляСтатусаОшибкиГИСНР(Форма, ГруппаДекорации);
	
	ДекорацииФормыСтатусаОШибкиГИСНР = ЭлементыФормы.Найти(ИмяДекорации);
	ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР = ЭлементыФормы.Найти(ИмяДекорацииВидеозаписи);

	Если ГруппаДекорации = Неопределено Тогда
		Возврат ГруппаДекорации;
	КонецЕсли;
	
	Если ДекорацииФормыСтатусаОШибкиГИСНР = Неопределено Тогда
		ТипДекорации = Тип("ДекорацияФормы");
		ДекорацииФормыСтатусаОШибкиГИСНР = ЭлементыФормы.Вставить(
				ИмяДекорации,
				ТипДекорации,
				ГруппаДекорации);
		ДекорацииФормыСтатусаОШибкиГИСНР.Вид = ВидДекорацииФормы.Надпись;
		ДекорацииФормыСтатусаОШибкиГИСНР.Гиперссылка = Истина;
		ДекорацииФормыСтатусаОШибкиГИСНР.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	
	ДекорацииФормыСтатусаОШибкиГИСНР.Заголовок = НСтр("ru = 'Ошибка отправки события ГИС НР'");
	ДекорацииФормыСтатусаОШибкиГИСНР.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ДекорацииФормыСтатусаОШибкиГИСНР.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьКоманду");
	ДекорацииФормыСтатусаОШибкиГИСНР.Видимость = ВидимостьЭлементаФормыСтатусаОШибкиГИСНР(СсылкаОбъектаУчета);
	
	Если ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР = Неопределено Тогда
		ТипДекорации = Тип("ДекорацияФормы");
		ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР = ЭлементыФормы.Вставить(
				ИмяДекорацииВидеозаписи,
				ТипДекорации,
				ГруппаДекорации);
		ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.Вид = ВидДекорацииФормы.Надпись;
		ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.Гиперссылка = Истина;
		ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;

	ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.Заголовок = НСтр("ru = 'Ошибка запуска видеозаписи ГИС НР'");
	ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьКоманду");
	ДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР.Видимость = Ложь;
	
	ГруппаДекорации.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;

	#КонецЕсли
	
	Возврат ДекорацииФормыСтатусаОШибкиГИСНР;

КонецФункции

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(Контекст, Источники, ПодключенныеОбъекты, Команды) Экспорт
	
	ТипыОбъектов = Новый Массив;
	ЭлектронноеАктированиеЕИСГИСНРПереопределяемый.
		ЗаполнитьТипыОбъектовВызоваКомандыОткрытияФормыОшибки(ТипыОбъектов);
		
	Если ТипыОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	#Если НЕ ВнешнееСоединение Тогда

	ИмяДекорации = ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОШибкиГИСНР();
	ИмяДекорацииВидеозаписи
		= ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР();
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "ГруппаКомандЭлектронноеАктированиеЕИСГИСНР";
	Команда.Идентификатор = ИмяДекорации;
	Команда.ИмяВФорме = ИмяДекорации;
	Команда.Представление = НСтр("ru = 'Ошибки мониторинга ГИС НР'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 5;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.Обработчик = "ЭлектронноеАктированиеЕИСГИСНРКлиент.ОткрытьФормуОшибок";
	Команда.МножественныйВыбор = Ложь;
	
	Команда = Команды.Добавить();
	Команда.Вид = "ГруппаКомандЭлектронноеАктированиеЕИСГИСНР";
	Команда.Идентификатор = ИмяДекорацииВидеозаписи;
	Команда.ИмяВФорме = ИмяДекорацииВидеозаписи;
	Команда.Представление = НСтр("ru = 'Ошибки видеозаписи ГИС НР'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 6;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.Обработчик = "ЭлектронноеАктированиеЕИСГИСНРКлиент.ОткрытьФормуОшибок";
	Команда.МножественныйВыбор = Ложь;

	#КонецЕсли
	
КонецПроцедуры

// Проверяет состояние видимости  отправки события в ГИС НР.
//
// Параметры:
//  ОбъектУчета - ДокументСсылка - документ, который используется в информационном обмена с ЕИС
//
// Возвращаемое значение:
//  Булево - Истина - если в процессе запроса к серверу возникла ошибка
//
Функция ВидимостьЭлементаФормыСтатусаОшибкиГИСНР(ОбъектУчета) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ОбъектыУчетаДокументовЭДО)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РезультатыОбменаДаннымиСГИСНР) Тогда
		Возврат Ложь;
	КонецЕсли;

	МассивОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	ТаблицаЭлектронныхДокументов = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(МассивОбъектовУчета);
	
	Если ТаблицаЭлектронныхДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ЭлектронныйДокумент = ТаблицаЭлектронныхДокументов[0].ЭлектронныйДокумент;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыОбменаДаннымиСГИСНР.СтатусОтправкиДанных
	|ИЗ
	|	РегистрСведений.РезультатыОбменаДаннымиСГИСНР.СрезПоследних(, ЭлектронныйДокумент = &ЭлектронныйДокумент) КАК
	|		РезультатыОбменаДаннымиСГИСНР
	|ГДЕ
	|	РезультатыОбменаДаннымиСГИСНР.СтатусОтправкиДанных В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки),
	|		РезультатыОбменаДаннымиСГИСНР.СтатусОтправкиДанных = ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиДанныхВГИСНР.ОшибкаЗаполнения))");
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Формирует единую формулировку проблем для всех форм
//
// Параметры:
//  ПлагинПроблемы - Число
//  ИзНастроек - Булево - вызов из формы настроек
//  НачальноеПодключение - Булево
//
// Возвращаемое значение:
//  Строка - содержимое для форматированной строки
//
Функция ОписаниеПроблемПлагина(ПлагинПроблемы, ИзНастроек = Ложь, НачальноеПодключение = Ложь) Экспорт
	
	ПараметрыЦвета = Новый Массив;
	ПараметрыЦвета.Добавить(251);
	ПараметрыЦвета.Добавить(212);
	ПараметрыЦвета.Добавить(212);
	ТипЦвет = Тип("Цвет");
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("Картинка", Новый Картинка);
	Результат.Вставить("Фон", Новый(ТипЦвет, ПараметрыЦвета));
	
	ТекстНастроек = "";
	ЦветШрифта = "";
	
	Если ОбщегоНазначения.ЭтоMacOSКлиент() ИЛИ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ЦветШрифта = "style=""color:ЦветТекстаНеважнаяНадписьЭлАктированиеЕИС""";
		Результат.Вставить("Картинка", Новый Картинка);
		ТекстНастроек = НСтр("ru = '<span {1}>Плагин предназначен для работы в ОС Windows и ОС Linux</span>'");
	ИначеЕсли ПлагинПроблемы = 1 И НачальноеПодключение Тогда
		Результат.Вставить("Фон", WebЦвета.Лимонный);
		ТекстНастроек = НСтр("ru = '<span {1}>Необходимо </span><a href=""Скачать"">скачать</a><span {1}> и установить последнюю версию плагина видеозаписи</span>'");
	ИначеЕсли ПлагинПроблемы = 0 Тогда
		ЦветШрифта = "style=""color:ЦветТекстаНеважнаяНадписьЭлАктированиеЕИС""";
		Результат.Вставить("Картинка", Новый Картинка);
		Результат.Вставить("Фон", Новый(ТипЦвет));
		ТекстНастроек = НСтр("ru = '<span {1}>Скачать последнюю версию плагина видеозаписи можно на</span> <a href=""Скачать"">странице</a><span {1}>, файл с названием Плагин ГИС НР</span>'");
	ИначеЕсли ПлагинПроблемы = 5 Тогда
		ТекстНастроек = НСтр("ru = '<span {1}>Обнаружена новая версия плагина.</span> <a href=""Обновить"">Обновить</a>'");
	ИначеЕсли ПлагинПроблемы = 1 ИЛИ НЕ ИзНастроек Тогда
		ТекстНастроек = НСтр("ru = '<span {1}>Не удалось подключиться к плагину видеозаписи.'")
		+ ?(ИзНастроек, Символы.ПС, " ") + НСтр("ru = 'Убедитесь, что </span>'")
		+ НСтр("ru = '<a href=""Скачать"">плагин</a> <span {1}>установлен и настройки указаны верно.</span>'");
	ИначеЕсли ПлагинПроблемы = 2 Тогда
		ТекстНастроек = НСтр("ru = '<span {1}>Обнаружены проблемы в работе плагина видеозаписи. Проверьте настройки.</span>'");
	ИначеЕсли ПлагинПроблемы = 3 Тогда
		ТекстНастроек = НСтр("ru = '<span {1}>Необходимо</span>'")
		+ " " + НСтр("ru = '<a href=""Сертификат"">выбрать</a> <span {1}>сертификат электронной подписи для работы плагина</span>'");
	ИначеЕсли ПлагинПроблемы = 4 Тогда
		ТекстНастроек =
		НСтр("ru = '<span {1}>Обнаружены проблемы с сертификатом электронной подписи или криптопровайдером.</span>'")
		+ ?(ИзНастроек, Символы.ПС, " ")
		+ НСтр("ru = '<span {1}>Можете повторно</span> <a href=""Сертификат"">выбрать</a>'")
		+ НСтр("ru = '<span {1}> сертификат электронной.</span>'");
	ИначеЕсли ПлагинПроблемы = 7 Тогда
		ТекстНастроек = НСтр("ru = '<span {1}>Проблема инициализации плагина видеозаписи. Проверьте настройки.</span>'");
	КонецЕсли;
	
	#Если НЕ ВнешнееСоединение Тогда
		Результат.Текст =  СтроковыеФункции.ФорматированнаяСтрока(СтрЗаменить(ТекстНастроек, "{1}", ЦветШрифта));
	#Иначе
		Результат.Текст = СтрЗаменить(ТекстНастроек, "{1}", ЦветШрифта);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Формирует подсказку для указанного элемента с общим описанием ГИС НР
// 
// Параметры:
//  ЭлементФормы - ПолеФормы
//
Процедура ДобавитьПодсказкуДляГИСНР(ЭлементФормы) Экспорт
	
	#Если НЕ ВнешнееСоединение Тогда
		ТекстПодсказки = НСтр("ru = 'В ГИС НР в автоматическом режиме будут регистрироваться факты
				|отправки исходящих документов и их обработки на сервере ЕИС в сфере закупок.
				|Данная информация в дальнейшем может помочь при решении спорных ситуаций. 
				|<a href=""Подробнее"">Подробнее...</a>'");
	
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказки);
		ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьКартинкуБиблиотеки(ИменаКартинок) Экспорт
	
	СписокКартинок = СтрРазделить(ИменаКартинок, ",");
	
	Для Каждого СтрокаМассива Из СписокКартинок Цикл
		Попытка
			Результат = БиблиотекаКартинок[СтрокаМассива];
			Прервать;
		Исключение
			Результат = Новый Картинка;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует строковое представление ограничение по отправке событий
// 
// Возвращаемое значение:
//  Строка - строковое представление
//
Функция ПредставлениеОграниченияВремениОтправки() Экспорт
	
	Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';в течение %1 часа;;в течение %1 часов;в течение %1 часов;в течение %1 часа';"),
		РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах() / (60 * 60));

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиПодсистемы

// Возвращает разрешенное время между событием и отправкой в секундах
// 
// Возвращаемое значение:
//  Число - Разрешенное время между событием и отправкой в секундах
//
Функция РазрешенноеВремяМеждуСобытиемИОтправкойВСекундах()

	Возврат 24 * 60 * 60;
	
КонецФункции

Функция НастройкиОбменаГИСНР(Организация)
	
	СтруктураНастроек = Новый Структура("ОбменСГИСНРВключен, Токен", Ложь, "");
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаЕИС) Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИС.ОбменСГИСНРВключен КАК ОбменСГИСНРВключен,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК Токен
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИС КАК НастройкиОбменаЕИС
	|ГДЕ
	|	НастройкиОбменаЕИС.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Выборка);
		Возврат СтруктураНастроек;
	Иначе
		Возврат СтруктураНастроек;
	КонецЕсли;
	
КонецФункции

// Служебный ответ для запросов на сервер
// 
// Возвращаемое значение:
//  Структура:
//    * Ошибка - Булево - наличие ошибки
//    * МассивОшибок - Массив из Строка - описание ошибки
//    * ОписаниеОшибки - Строка - описание ошибки 
//
Функция НовыйРезультатОбмена()
	
	Результат = Новый Структура; 
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("МассивОшибок", Новый Массив);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Возврат Результат;
	
КонецФункции

// Служебный ответ для запросов на сервер
// 
// Возвращаемое значение:
//  Структура:
//    * Документ - Произвольный - документ
//    			 - Неопределено
//    * ВидСобытия - ПеречислениеСсылка.ВидыСобытийГИСНР
//    * ДатаСобытия - Дата
//    * Статус - ПеречислениеСсылка.СтатусыОтправкиДанныхВГИСНР
//    * Ошибка - Булево - наличие ошибки
//    * МассивОшибок - Массив из Строка - описание ошибки
//
Функция НовыйРезультатОбменаПоЭлектронномуДокументу()
	
	Результат = Новый Структура;
	Результат.Вставить("Документ", Неопределено);
	Результат.Вставить("ВидСобытия", Перечисления.ВидыСобытийГИСНР.ПустаяСсылка());
	Результат.Вставить("ДатаСобытия", '00010101');
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("Статус", Перечисления.СтатусыОтправкиДанныхВГИСНР.ПустаяСсылка());
	Результат.Вставить("МассивОшибок", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НаименованиеКорректировочногоДокументаГИСНР()
	
	Возврат НСтр("ru = 'Корректировочный документ'");
	
КонецФункции

Функция НаименованиеКорректировочнойСЧФГИСНР()
	
	Возврат НСтр("ru = 'Корректировочный счет-фактура'");
	
КонецФункции

Функция НаименованиеСчетФактурыГИСНР()
	
	Возврат НСтр("ru = 'Счет-фактура'");
	
КонецФункции

Функция НаименованиеДокументаОПриемкеГИСНР()
	
	Возврат НСтр("ru = 'Документ о приемке'");
	
КонецФункции

Функция ИмяУченойСистемыОтправки()

	Возврат "1С";
	
КонецФункции

Функция ВерсияТипаСообщения(ТипСообщения)
	
	// Версия типа сообщения зависит от "Типа сообщения" и "Схемы".
	// Схема начинает действовать с определенного момента времени.
	МосковскоеВремя =  МестноеВремя(ТекущаяУниверсальнаяДата(), "GMT+3");
	
	Если ТипСообщения = "100105010" Тогда 
		Если МосковскоеВремя > Дата(2023, 11, 1) Тогда
			Возврат "b100105010_v1_0_1";
		КонецЕсли;
	ИначеЕсли ТипСообщения = "100105020" Тогда 
		Если МосковскоеВремя > Дата(2023, 11, 1) Тогда
			Возврат "b100105020_v1_0_1";
		КонецЕсли;
	ИначеЕсли ТипСообщения = "100105030" Тогда
		Если МосковскоеВремя > Дата(2023, 11, 1) Тогда
			Возврат "b100105030_v1_0_1";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Логирование в ГИС НР'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция КодировкаТекстаСервисаГИСНР()

	Возврат "UTF-8";
	
КонецФункции

Функция АдресСервераГИСНР()
	
	Возврат "https://nr.roskazna.ru/vbs/xml"; // рабочий
	
КонецФункции

Функция ИдентификаторРегламентногоЗадания()
	
	Возврат "ОбменГИСНР";
	
КонецФункции

#КонецОбласти

#Область ЧтениеИОбработкаДанных

Процедура ДополнитьСтруктуруДаннымиДокументаСЧФ(СтруктураДанных, СодержимоеПакета, Кодировка, Результат)

	ОбъектXDTO = ОбъектXDTOИзСТрокиXML(СодержимоеПакета);

	ЗначениеОбъекта = ПолучитьЗначениеПоСвойствуXDTO(ОбъектXDTO, "Body.ФайлПакет.Документ.Контент");
	
	Если ЗначениеОбъекта = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В содержимом файла объекта %1, не найден контент с документом.'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, СтруктураДанных.ТранспортныйКонтейнер);
		ДобавитьИнформациюОбОшибке(Результат, ТекстОшибки);
		Возврат;	 
	КонецЕсли; 
	
	Содержимое64 = ЗначениеОбъекта.Значение;
	МассивДанных = Новый Массив; 
	
	МассивДанных.Добавить("Документ.СвСчФакт.НомерСчФ");
	МассивДанных.Добавить("Документ.СвСчФакт.ДатаСчФ");
	МассивДанных.Добавить("Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ");
	МассивДанных.Добавить("Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ");
	
	МассивДанных.Добавить("Документ.СвКСчФ.НомерКСчФ");
	МассивДанных.Добавить("Документ.СвКСчФ.ДатаКСчФ");
	МассивДанных.Добавить("Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ");
	МассивДанных.Добавить("Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ"); 
	
	МассивДанных.Добавить("Документ.СвКСчФ.Счф.НомерСчФ");
	МассивДанных.Добавить("Документ.СвКСчФ.Счф.ДатаСчФ");
	МассивДанных.Добавить("Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ");
	МассивДанных.Добавить("Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ");
	
	МассивДанных.Добавить("Документ.Функция");
	
	СтруктураЗначений = ЗначенияЭлементовИзДвоичныхДанныхФайлаXML(Содержимое64, МассивДанных, Кодировка);
	
	НаименованиеКорректировочнойСЧФГИСНР = НаименованиеКорректировочнойСЧФГИСНР();
	НаименованиеКорректировочногоДокументаГИСНР = НаименованиеКорректировочногоДокументаГИСНР();
	НаименованиеСчетФактурыГИСНР = НаименованиеСчетФактурыГИСНР();
	НаименованиеДокументаОПриемкеГИСНР = НаименованиеДокументаОПриемкеГИСНР();
	
	СоответствиеТиповДокументов = Новый Соответствие;
	СоответствиеТиповДокументов.Вставить("КСЧФ", НаименованиеКорректировочнойСЧФГИСНР);
	СоответствиеТиповДокументов.Вставить("КСЧФДИС", НаименованиеКорректировочногоДокументаГИСНР);
	СоответствиеТиповДокументов.Вставить("ДИС", НаименованиеКорректировочногоДокументаГИСНР);
	СоответствиеТиповДокументов.Вставить("СЧФ", НаименованиеСчетФактурыГИСНР);
	СоответствиеТиповДокументов.Вставить("СЧФДОП", НаименованиеДокументаОПриемкеГИСНР);
	СоответствиеТиповДокументов.Вставить("ДОП", НаименованиеДокументаОПриемкеГИСНР);
	
	СтруктураДанных.Вставить("ВидДокумента", СоответствиеТиповДокументов[СтруктураЗначений.ДокументФункция]);
	
	Если СтруктураДанных.ВидДокумента = НаименованиеКорректировочногоДокументаГИСНР
		Или СтруктураДанных.ВидДокумента =  НаименованиеКорректировочнойСЧФГИСНР Тогда 
		СтруктураДанных.Вставить("НомерДокумента", СтруктураЗначений.ДокументСвКСчФНомерКСчФ);
		ДатаДокумента
			= ПреобразоватьДатуИзДокументаЭДОВФорматГИСНР(СтруктураЗначений.ДокументСвКСчФДатаКСчФ, Результат);
		СтруктураДанных.Вставить("ДатаДокумента", ДатаДокумента);
		СтруктураДанных.Вставить("НомерИсправленияДокумента", СтруктураЗначений.ДокументСвКСчФИспрКСчФНомИспрКСчФ);
		ДатаИсправленияДокумента
		 = ПреобразоватьДатуИзДокументаЭДОВФорматГИСНР(СтруктураЗначений.ДокументСвКСчФИспрКСчФДатаИспрКСчФ, Результат);
		СтруктураДанных.Вставить("ДатаИсправленияДокумента", ДатаИсправленияДокумента);
		
		ШаблонНаименования = НСтр("ru = '%1 от %2'");
		НаименованиеДокументаПоКоторомуИдетКорректировка =  СтрШаблон(ШаблонНаименования,
			СтруктураЗначений.ДокументСвКСчФСчфНомерСчФ,
			СтруктураЗначений.ДокументСвКСчФСчфДатаСчФ);
			
		НаименованиеДокумента = СтрШаблон(ШаблонНаименования,
			СтруктураДанных.НомерДокумента,
			СтруктураДанных.ДатаДокумента);
			
		СтруктураДанных.Вставить("НаименованиеДокументаПоКоторомуИдетКорректировка",
			НаименованиеДокументаПоКоторомуИдетКорректировка);
		СтруктураДанных.Вставить("НомерДокументаПоКоторомуИдетКорректировка",
			СтруктураЗначений.ДокументСвКСчФСчфНомерСчФ);
		СтруктураДанных.Вставить("ДатаДокументаПоКоторомуИдетКорректировка",
			СтруктураЗначений.ДокументСвКСчФСчфДатаСчФ);
		СтруктураДанных.Вставить("НаименованиеДокумента", НаименованиеДокумента);
	Иначе
		СтруктураДанных.Вставить("НомерДокумента", СтруктураЗначений.ДокументСвСчФактНомерСчФ);
		ДатаДокумента
			= ПреобразоватьДатуИзДокументаЭДОВФорматГИСНР(СтруктураЗначений.ДокументСвСчФактДатаСчФ, Результат);
		СтруктураДанных.Вставить("ДатаДокумента", ДатаДокумента);
		СтруктураДанных.Вставить("НомерИсправленияДокумента", СтруктураЗначений.ДокументСвСчФактИспрСчФНомИспрСчФ);
		ДатаИсправленияДокумента = ПреобразоватьДатуИзДокументаЭДОВФорматГИСНР(
			СтруктураЗначений.ДокументСвСчФактИспрСчФДатаИспрСчФ,
			Результат);
		СтруктураДанных.Вставить("ДатаИсправленияДокумента", ДатаИсправленияДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДаннымиПриложения(СтруктураДанных, СодержимоеПакета, Кодировка, Результат)
	
	ОбъектXDTO = ОбъектXDTOИзСТрокиXML(СодержимоеПакета);
	
	ЗначениеОбъекта = ПолучитьЗначениеПоСвойствуXDTO(ОбъектXDTO, "Body.ФайлПакет.Прилож.Контент");
	
	Если ЗначениеОбъекта = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В содержимом файла объекта %1, не найден контент с приложением.'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, СтруктураДанных.ТранспортныйКонтейнер);
		ДобавитьИнформациюОбОшибке(Результат, ТекстОшибки);
		Возврат;	 
	КонецЕсли;
	
	Содержимое64 = ЗначениеОбъекта.Значение;
	МассивДанных = Новый Массив;
	МассивДанных.Добавить("СведКонт.РеестрНомКонт");
	СтруктураЗначений = ЗначенияЭлементовИзДвоичныхДанныхФайлаXML(Содержимое64, МассивДанных, Кодировка);
	
	СтруктураДанных.Вставить("РеестровыйНомерКонтракта", СтруктураЗначений.СведКонтРеестрНомКонт);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДаннымиТранспортногоКонтейнера(СтруктураДанных, Результат) 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТранспортныйКонтейнерЭДО.ИдентификаторПакета 		КАК ИдентификаторПакета,
	|	ТранспортныйКонтейнерЭДО.Организация 				КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ТранспортныйКонтейнерЭДО.Организация) КАК ПредставлениеОрганизации,
	|	ТранспортныйКонтейнерЭДО.Контрагент 				КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ТранспортныйКонтейнерЭДО.Контрагент) 	КАК ПредставлениеКонтрагента
	|ИЗ
	|	Документ.ТранспортныйКонтейнерЭДО КАК ТранспортныйКонтейнерЭДО
	|ГДЕ
	|	ТранспортныйКонтейнерЭДО.Ссылка = &ТранспортныйКонтейнер");
	
	Запрос.УстановитьПараметр("ТранспортныйКонтейнер", СтруктураДанных.ТранспортныйКонтейнер);
		
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	Если Не ВыборкаДанных.Следующий() Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен транспортный контейнер.'");
		ДобавитьИнформациюОбОшибке(Результат, ТекстОшибки);
		Возврат;
	КонецЕсли;		 
	
	СведенияОбОрганизации = ИнтеграцияЭДО.ДанныеЮрФизЛица(ВыборкаДанных.Организация);
	СведенияОбКонтрагенте = ИнтеграцияЭДО.ДанныеЮрФизЛица(ВыборкаДанных.Контрагент);
	
	ПроверитьОшибкиПоИННКППП(СведенияОбОрганизации, ВыборкаДанных.ПредставлениеОрганизации, Результат);
	ПроверитьОшибкиПоИННКППП(СведенияОбКонтрагенте, ВыборкаДанных.ПредставлениеКонтрагента, Результат);
	
	ИННКППОрганизации = СтрШаблон("%1%2", СокрЛП(СведенияОбОрганизации.ИНН), СокрЛП(СведенияОбОрганизации.КПП));
	ИННКППКонтрагента = СтрШаблон("%1%2", СокрЛП(СведенияОбКонтрагенте.ИНН), СокрЛП(СведенияОбКонтрагенте.КПП));
	
	ИдентификаторПакетаСРазделителями = ИдентификаторСРазделителями(ВыборкаДанных.ИдентификаторПакета, "-");
	СтруктураДанных.Вставить("ИдентификаторПакета", ИдентификаторПакетаСРазделителями);
	
	ПредставлениеОрганизации = ПолучитьНаименованиеЮрФизЛица(СведенияОбОрганизации);
	ПредставлениеКонтрагента = ПолучитьНаименованиеЮрФизЛица(СведенияОбКонтрагенте);
		
	СтруктураДанных.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураДанных.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	СтруктураДанных.Вставить("ИННКППОрганизации", ИННКППОрганизации);
	СтруктураДанных.Вставить("ИННКППКонтрагента", ИННКППКонтрагента);
	
КонецПроцедуры

Функция ПолучитьНаименованиеЮрФизЛица(СведенияОбЮрФизЛице)

	Если ЗначениеЗаполнено(СведенияОбЮрФизЛице.ОфициальноеНаименование) Тогда
		Представление = СведенияОбЮрФизЛице.ОфициальноеНаименование;
	ИначеЕсли ЗначениеЗаполнено(СведенияОбЮрФизЛице.ПолноеНаименование) Тогда  
		Представление = СведенияОбЮрФизЛице.ПолноеНаименование;
	Иначе 
		Представление = СведенияОбЮрФизЛице.Наименование;
	КонецЕсли;
		
	Возврат Представление;  
	
КонецФункции

Процедура ПроверитьОшибкиПоИННКППП(СведенияОбЮрФизЛице, ОбъектПроверки, Результат)
	
	ЭтоЮрЛицо = СтрДлина(СведенияОбЮрФизЛице.ИНН) = 10;
	
	Если ПустаяСтрока(СведенияОбЮрФизЛице.ИНН) Тогда
		ШаблонТекстаОшибки = НСтр("ru = 'Не заполнен ИНН у %1.'");
		ДобавитьИнформациюОбОшибке(Результат, СтрШаблон(ШаблонТекстаОшибки, ОбъектПроверки));
	ИначеЕсли СтрДлина(СведенияОбЮрФизЛице.ИНН) <> 12
	 		И СтрДлина(СведенияОбЮрФизЛице.ИНН) <> 10 Тогда
		ШаблонТекстаОшибки = НСтр("ru = 'Не верная длина ИНН у %1.'");
		ДобавитьИнформациюОбОшибке(Результат, СтрШаблон(ШаблонТекстаОшибки, ОбъектПроверки));
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Если ПустаяСтрока(СведенияОбЮрФизЛице.КПП) Тогда
			ШаблонТекстаОшибки = НСтр("ru = 'Не заполнен КПП у %1.'");
			ДобавитьИнформациюОбОшибке(Результат, СтрШаблон(ШаблонТекстаОшибки, ОбъектПроверки));	
		ИначеЕсли СтрДлина(СведенияОбЮрФизЛице.КПП) <> 9 Тогда 
			ШаблонТекстаОшибки = НСтр("ru = 'Не верная длина КПП у %1.'");	 
			ДобавитьИнформациюОбОшибке(Результат, СтрШаблон(ШаблонТекстаОшибки, ОбъектПроверки));
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификатор с разделителями, итоговый размер 36 символов, формат 8-4-4-4-12
// 
// Параметры:
//  Идентификатор - Строка - Идентификатор без разделителей
//  Разделитель - Строка
// 
// Возвращаемое значение:
//  Строка - Идентификатор с разделителями
Функция ИдентификаторСРазделителями(Идентификатор, Разделитель)
	
	Массив = Новый Массив;
	Массив.Добавить(Сред(Идентификатор, 1, 8));
	Массив.Добавить(Сред(Идентификатор, 9, 4));
	Массив.Добавить(Сред(Идентификатор, 13, 4));
	Массив.Добавить(Сред(Идентификатор, 17, 4));
	Массив.Добавить(Сред(Идентификатор, 21));
	
	ИдентификаторСРазделителями = СтрСоединить(Массив, Разделитель);
	
	Возврат ИдентификаторСРазделителями;
	
КонецФункции

// Возвращает электронные документы контейнера (ДокументСсылка.ЭлектронныйДокументВходящийЭДО 
// и ДокументСсылка.ЭлектронныйДокументИсходящийЭДО).
// 
// Параметры:
//  ТранспортныйКонтейнер - ДокументСсылка.ТранспортныйКонтейнерЭДО
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Функция ЭлектронныеДокументыКонтейнера(ТранспортныйКонтейнер)
	
	// Получается массив значений измерений "Объект" из регистра "ОбъектыТранспортныхКонтейнеровЭДО",
	// тип у "Объекта" - "ДокументСсылка.СообщениеЭДО" 
	МассивСообщений = СинхронизацияЭДО.ОбъектыТранспортногоКонтейнера(ТранспортныйКонтейнер);
	// Получается массив структур со значениями типов:
	// ДокументСсылка.ЭлектронныйДокументВходящийЭДО и ДокументСсылка.ЭлектронныйДокументИсходящийЭДО 
	МассивСтруктурЭлектронныеДокументы = ЭлектронныеДокументыЭДО.ДокументыСообщений(МассивСообщений);
	
	МассивЭлектронныхДокументов = Новый Массив;	
	Для Каждого СтруктураЭлектронныеДокументы Из МассивСтруктурЭлектронныеДокументы Цикл
		МассивЭлектронныхДокументов.Добавить(СтруктураЭлектронныеДокументы.Значение);
	КонецЦикла;
	
	Возврат МассивЭлектронныхДокументов;
			
КонецФункции

#КонецОбласти

#Область ЧтениеXML

// Возвращает структуру значений по переданным путям к элементам, ключами структуры будут пути 
// к элементам без разделителей
//
// Параметры:
//	ДвоичныеДанныеИлиBase64Строка - ДвоичныеДанные, Строка	- Двоичные данные 
//									или строка в которой содержатся данные в base64.
//	Поля						  - Строка - Путь к элементу с разделителями ".", может быть несколько путей
//									разделенных запятыми,
//								    например, "Документ.СвСчФакт.НомерСчФ, Документ.СвСчФакт.ДатаСчФ".
//								  - Массив из Строка - Массив путей к элементу
//	Кодировка					  - Строка, КодировкаТекста - способ кодировки текста
// 
// Возвращаемое значение:
//   - Структура - Структура с ключами проименованными как пути к элементам без разделителей ("."),
//   Если элемент не был найден, в значение будет передано Неопределено
//
// Пример:
//  ЗначенияЭлементовИзДвоичныхДанныхФайлаXML(ДвоичныеДанныеИлиBase64Строка,
//  	"Body.ФайлПакет.Документ.Контент,
//  	"Body.ФайлПакет.Приложение.Контент", "windows-1251") 
//	Вернет структуру с ключами "BodyФайлПакетДокументКонтент" и "BodyФайлПакетПриложениеКонтент" 
//
Функция ЗначенияЭлементовИзДвоичныхДанныхФайлаXML(ДвоичныеДанныеИлиBase64Строка, Поля, Кодировка)
	                          
	Если ТипЗнч(ДвоичныеДанныеИлиBase64Строка) = Тип("Строка") Тогда
		ДвоичныеДанные = ПолучитьДвоичныеДанныеИзBase64Строки(ДвоичныеДанныеИлиBase64Строка); 
		СодержимоеЗапроса = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные, Кодировка);	
	Иначе
		СодержимоеЗапроса = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеИлиBase64Строка, Кодировка);	
	КонецЕсли;
	
	ОбъектXDTO = ОбъектXDTOИзСТрокиXML(СодержимоеЗапроса);
	
	Если ТипЗнч(Поля) = Тип("Строка") Тогда 
		КоллекцияПолей = СтрРазделить(Поля, ",", Ложь);	
	Иначе
		КоллекцияПолей = Поля;
	КонецЕсли;

	Результат = Новый Структура;
	
	Для Каждого ЭлементКолекцииПоля Из КоллекцияПолей Цикл
		ПолеДляПоиска = СтрЗаменить(ЭлементКолекцииПоля, " ", "");
		
		ЗначениеОбъекта = ПолучитьЗначениеПоСвойствуXDTO(ОбъектXDTO, ПолеДляПоиска);
		МассивПолей = СтрРазделить(ПолеДляПоиска, ".");	
		Ключ = СтрСоединить(МассивПолей);
		
		Если ЗначениеОбъекта = Неопределено Тогда
			Результат.Вставить(Ключ, Неопределено);
		Иначе
			Результат.Вставить(Ключ, ЗначениеОбъекта.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

Функция ОбъектXDTOИзСТрокиXML(СодержимоеЗапроса)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СодержимоеЗапроса);
	Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

Функция ПолучитьЗначениеПоСвойствуXDTO(Знач ОбъектXDTO, Знач Поле)
	
	МассивСвойств = СтрРазделить(Поле, ".");
	
	Для Каждого НаименованиеСвойства Из МассивСвойств Цикл
		Если ОбъектXDTO.Свойства().Получить(НаименованиеСвойства) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОбъектXDTO = ОбъектXDTO.ПолучитьXDTO(НаименованиеСвойства);
	КонецЦикла;
	
	Возврат ОбъектXDTO; 
	
КонецФункции

Функция ПреобразоватьДатуИзДокументаЭДОВФорматГИСНР(ДатаИзДокументаЭДО, Результат)
	
	Если ДатаИзДокументаЭДО = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивЧастейДаты = СтрРазделить(ДатаИзДокументаЭДО, ".");
	СтрГод = "";
	СтрМесяц = "";
	СтрДень = "";
	Если МассивЧастейДаты.Количество() = 3 Тогда
		СтрГод = МассивЧастейДаты[2];
		СтрМесяц = МассивЧастейДаты[1];
		СтрДень = МассивЧастейДаты[0];
	КонецЕсли;
	
	Если МассивЧастейДаты.Количество() <> 3
		Или СтрДлина(СтрГод) <> 4
		Или СтрДлина(СтрМесяц) <> 2
		Или СтрДлина(СтрДень) <> 2 Тогда
			
		ТекстОшибки = НСтр("ru = 'Ошибка формата даты во вложенном документе (СЧФ, СЧФДОП, Приложение и т.п.)'");
		ДобавитьИнформациюОбОшибке(Результат, ТекстОшибки);	
		Возврат "";	
	КонецЕсли;
	
	ПреобразованнаяДата = СтрШаблон("%1-%2-%3", МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
	Возврат ПреобразованнаяДата;
	
КонецФункции

#КонецОбласти

#Область ФормированиеXML

Функция СтрокаЗапросаПоВерсииТипаСообщения(ВерсияТипаСообщения, СтруктураДанных, Результат)
	
	ЗаписьXML = НоваяЗаписьXMLДляГИСНР();
	ЗаписьXML.ЗаписатьНачалоЭлемента(ВерсияТипаСообщения);
	ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://nr");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	
	Если ВерсияТипаСообщения = "b100105010_v1_0_1" Тогда
		
		ДобавитьДанныеЛогированияОТранспортномПакетеВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат);
		ДобавитьДанныеЛогированияДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат);
		
	ИначеЕсли ВерсияТипаСообщения = "b100105020_v1_0_1" Тогда
		
		ДобавитьДанныеЛогированияОТранспортномПакетеВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат);
		ДобавитьДанныеЛогированияОткорректированногоДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат);
		ДобавитьДанныеЛогированияДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат);
		
	ИначеЕсли ВерсияТипаСообщения = "b100105030_v1_0_1" Тогда
		
		ДобавитьДанныеЛогированияДоставкиДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат);
		
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		Возврат Неопределено;
	Иначе
		ЗаписьXML.ЗаписатьБезОбработки("</" + ВерсияТипаСообщения + ">");
		Возврат ЗаписьXML.Закрыть();
	КонецЕсли;
	
КонецФункции

Функция НоваяЗаписьXMLДляГИСНР()
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку(КодировкаТекстаСервисаГИСНР());
	Запись.ЗаписатьОбъявлениеXML();
	Запись.Отступ = Ложь;
	
	Возврат Запись;
	
КонецФункции

Процедура ДобавитьДанныеЛогированияОТранспортномПакетеВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат)
	
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"messageId",
		СтруктураДанных.ИдентификаторСообщения,
		Результат);
	
	ПредставлениеУниверсальнойДаты = ФорматУниверсальнойДатыГИСНР(СтруктураДанных.ДатаСобытияУниверсальная);
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML, 
		"occurDate",
		ПредставлениеУниверсальнойДаты,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"transportId",
		СтруктураДанных.ИдентификаторПакета,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"namebuhsis",
		ИмяУченойСистемыОтправки(),
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"docType",
		СтруктураДанных.ВидДокумента,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"nameCompanySupplier",
		СтруктураДанных.ПредставлениеОрганизации,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"supplierId",
		СтруктураДанных.ИННКППОрганизации,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"nameCompany",
		СтруктураДанных.ПредставлениеКонтрагента,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"orgId",
		СтруктураДанных.ИННКППКонтрагента,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"rnk",
		СтруктураДанных.РеестровыйНомерКонтракта,
		Результат);
		
КонецПроцедуры

Процедура ДобавитьДанныеЛогированияДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат)
	
	ОбязательноеПоле = Истина;
	
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"docNumber",
		СтруктураДанных.НомерДокумента,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML, 
		"docDate",
		СтруктураДанных.ДатаДокумента,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"numberCorrect",
		СтруктураДанных.НомерИсправленияДокумента,
		Результат,
		Не ОбязательноеПоле);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML, 
		"correctDate",
		СтруктураДанных.ДатаИсправленияДокумента,
		Результат,
		Не ОбязательноеПоле);
		
КонецПроцедуры

Процедура ДобавитьДанныеЛогированияОткорректированногоДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат)
	
	ОбязательноеПоле = Истина;

	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"mainNameDoc",
		СтруктураДанных.НаименованиеДокументаПоКоторомуИдетКорректировка,
		Результат,
		Не ОбязательноеПоле); 
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"mainDocNumber",
		СтруктураДанных.НомерДокументаПоКоторомуИдетКорректировка,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"mainDocDate",
		СтруктураДанных.ДатаДокументаПоКоторомуИдетКорректировка,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"nameDoc",
		СтруктураДанных.НаименованиеДокумента,
		Результат,
		Не ОбязательноеПоле);
		
КонецПроцедуры

Процедура ДобавитьДанныеЛогированияДоставкиДокументаВерсия_1_0_1(ЗаписьXML, СтруктураДанных, Результат)
	
	ОбязательноеПоле = Истина;
	
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"messageId",
		СтруктураДанных.ИдентификаторСообщения,
		Результат);
	
	ПредставлениеУниверсальнойДаты = ФорматУниверсальнойДатыГИСНР(СтруктураДанных.ДатаСобытияУниверсальная);
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML, 
		"occurDate",
		ПредставлениеУниверсальнойДаты,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"transportId",
		СтруктураДанных.ИдентификаторПакета,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"result",
		СтруктураДанных.УспешностьОтправки,
		Результат);
		
	ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
		"resultError",
		СтруктураДанных.ОписаниеОшибки,
		Результат,
		Не ОбязательноеПоле);
		
КонецПроцедуры

Процедура ДобавитьЗначениеВСтруктуруЗапросаЛогирования(ЗаписьXML,
	Поле,
	Значение,
	Результат,
	ЭтоОбязательноеПоле = Истина)
	
	Если ЭтоОбязательноеПоле И Не ЗначениеЗаполнено(Значение) Тогда 
		ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле %1.'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Поле); 
		ДобавитьИнформациюОбОшибке(Результат, ТекстОшибки);
	КонецЕсли; 
	
	// 1. Если были ошибки как при записи текущего элемента, так и при записи
	// любого предыдущего, запись в объект "ЗаписьXML" более не производится,
	// выполняется анализ заполнения оставшихся тегов
	// 2. Для пустых значений теги не создаются 
	Если Результат.Ошибка Или Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда 
		ПреобразованноеЗначение = Формат(Значение, "ДФ=yyyy-MM-dd");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 	
		ПреобразованноеЗначение = XMLСтрока(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда 	
		ПреобразованноеЗначение = Формат(Значение, "БЛ=0; БИ=1;");
	Иначе  
		ПреобразованноеЗначение = Значение;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(Поле);
	ЗаписьXML.ЗаписатьТекст(ПреобразованноеЗначение);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ФорматУниверсальнойДатыГИСНР(УниверсальнаяДата)
	
	Возврат Формат(УниверсальнаяДата, "DF=yyyy-MM-ddTHH:mm:ssZ;");
	
КонецФункции

#КонецОбласти

#Область ОтправкаЗапросовВГИСНР

Функция ПолучитьСоединениеССерверомГИСНР(СтруктурАдреса, Результат, Таймаут = 60)

	Схема = ?(ЗначениеЗаполнено(СтруктурАдреса.Схема), СтруктурАдреса.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	ЗащищенноеСоединение
		= ?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктурАдреса.Хост,
			СтруктурАдреса.Порт,
			СтруктурАдреса.Логин,
			СтруктурАдреса.Пароль, 
			Прокси,
			Таймаут,
			ЗащищенноеСоединение);
	Исключение
		ДобавитьИнформациюОбОшибке(
			Результат,  		
			НСтр("ru = 'Не удалось создать соединение с сервером ГИС НР.'"),
			Истина,
			Истина,
			ИмяСобытияЖурналаРегистрации());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Процедура ОтправитьЗапросНаСерверГИСНР(Соединение, ПутьНаСервере, СтрокаЗапроса, Токен, Результат)

	Если Соединение = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	HTTPЗапрос = Новый HTTPЗапрос(ПутьНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("usertoken", Токен);
	
 	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса, КодировкаТекстаСервисаГИСНР());
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Исключение
		ДобавитьИнформациюОбОшибке(Результат,
			НСтр("ru = 'Не удалось выполнить запрос к серверу ГИС НР.'"),
			Истина,
			Истина,
			ИмяСобытияЖурналаРегистрации());
		Возврат;
	КонецПопытки;
	
	РезультатВыполненияЗапроса = РезультатЗапросаПоКодуСостояния(Ответ.КодСостояния);
	Если Не РезультатВыполненияЗапроса.ЗапросВыполнен Тогда 
		ДобавитьИнформациюОбОшибке(Результат,
			РезультатВыполненияЗапроса.ОписаниеОшибки,
			Ложь,
			Истина,
			ИмяСобытияЖурналаРегистрации());
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатЗапросаПоКодуСостояния(КодСостояния)

	Результат = Новый Структура("ЗапросВыполнен, ОписаниеОшибки", Истина, "");	
	
	Если КодСостояния = 200 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru='Ошибка выполнения запроса. Сервер вернул код состояния %1.'");
		
	Результат.ЗапросВыполнен = Ложь;
	Результат.ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, КодСостояния);
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаЗапросаJson(СтрокаЗапроса)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("xmlString");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаЗапроса);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	 
КонецФункции

#КонецОбласти

#Область РегламентноеЗадание

// Включает регламентное задание для переотправки событий информационного обмена с ЕИС
//
Процедура ВключитьРегламентноеЗадание()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодПовтораВТечениеДня = 1800;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		ПараметрыЗадания = Задания[0];
		Если ПараметрыЗадания.Использование Тогда
			Если ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня <> ПериодПовтораВТечениеДня Тогда
				ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
				НовыеПараметры = Новый Структура;
				НовыеПараметры.Вставить("Расписание", ПараметрыЗадания.Расписание);
				НовыеПараметры.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
				НовыеПараметры.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
				РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыЗадания.УникальныйИдентификатор, НовыеПараметры);
			КонецЕсли;
			Возврат;
		Иначе
			ОтключитьРегламентноеЗадание();
		КонецЕсли;
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня;
	Расписание.ПериодПовтораДней 		= 1;

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменГИСНР);
	ПараметрыЗадания.Вставить("Ключ", ИдентификаторРегламентногоЗадания());
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("Наименование", НСтр("ru='Обмен с ГИС НР'"));
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИнформацииОбОбмене

Процедура ДобавитьИнформациюОбОшибке(
	Результат, 
	Знач ТекстОшибки, 
	ДобавитьОписаниеОшибки = Ложь,
	СделатьЗаписьВЖурнал = Ложь,
	ИмяСобытияЖурнала = "")
	
	Если ДобавитьОписаниеОшибки Тогда
		МассивОшибок = Новый Массив;
		МассивОшибок.Добавить(ТекстОшибки);
		ИнформацияОбОшибке = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		МассивОшибок.Добавить(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);	
	КонецЕсли;
	
	Если СделатьЗаписьВЖурнал Тогда 
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстОшибки);
	КонецЕсли;

	Результат.Ошибка = Истина;
	Результат.МассивОшибок.Добавить(ТекстОшибки);
	
КонецПроцедуры

Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьВРегистрРезультатОбмена(СтруктураДанных,
	Организация,
	СтатусОтправкиДанных,
	ВидСобытия,
	ТекстЗапроса = "",
	ТекстОшибки = "")
	
	СтруктураРегистра = РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ПолучитьИзмеренияИРесурсы();
	
	ДатаОтправкиУниверсальная = ТекущаяУниверсальнаяДата();
		
	// Заполняются все измерения и ресурсы регистра кроме следующих:
	//	Организация, ДатаОтправки, СтатусОтправкиДанных, ТекстЗапроса, ЧасовойПояс	
	ЗаполнитьЗначенияСвойств(СтруктураРегистра, СтруктураДанных);
		
	СтруктураРегистра.Организация = Организация;
	СтруктураРегистра.Период = ДатаОтправкиУниверсальная;
	СтруктураРегистра.СтатусОтправкиДанных = СтатусОтправкиДанных;
	ЧасовойПояс = ЧасовойПоясВФорматеУниверсальнойДаты(
		СтруктураДанных.ДатаСобытия,
		СтруктураДанных.ДатаСобытияУниверсальная);
	СтруктураРегистра.ЧасовойПояс = ЧасовойПояс;
	СтруктураРегистра.ТекстЗапроса = ТекстЗапроса;
	СтруктураРегистра.ТекстОшибки = ТекстОшибки;
	СтруктураРегистра.ВидСобытия = ВидСобытия;
	
	МассивЭлектронныхДокументов = ЭлектронныеДокументыКонтейнера(СтруктураДанных.ТранспортныйКонтейнер);
	
	РегистрыСведений.РезультатыОбменаДаннымиСГИСНР.ЗаписатьДанные(СтруктураРегистра, МассивЭлектронныхДокументов);
			
КонецПроцедуры

Процедура ЗаполнитьТекстОписанияОшибок(Результат)
	
	Результат.ОписаниеОшибки = СтрСоединить(Результат.МассивОшибок, Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Вычисление часового пояса для указанной даты, которая соответствует дате сеанса на сервере
//
// Параметры:
//  ДатаСеанса - Дата
//  УниверсальнаяДата - Дата
//
// Возвращаемое значение:
//  Строка - содержимое часового пояса
//
Функция ЧасовойПоясВФорматеУниверсальнойДаты(ДатаСеанса, УниверсальнаяДата)
	
	Разница = ДатаСеанса - УниверсальнаяДата;
	Часы = Окр(Разница / 3600);
	
	Если Часы > 0 Тогда
		ШаблонЧасовогоПояса = "GMT+%1";
		ЧасовойПояс = СтрШаблон(ШаблонЧасовогоПояса, Часы);
	ИначеЕсли Часы < 0 Тогда 
		ШаблонЧасовогоПояса = "GMT-%1";
		ЧасовойПояс = СтрШаблон(ШаблонЧасовогоПояса, -Часы);
	Иначе
		ЧасовойПояс = "GMT+0"; 
	КонецЕсли;
	
	Возврат ЧасовойПояс;
	
КонецФункции

#КонецОбласти

#КонецОбласти