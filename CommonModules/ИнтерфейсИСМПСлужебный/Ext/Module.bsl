#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру данных кода маркировки.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * GTIN - Строка - GTIN продукции.
//   * ПредставлениеНоменклатуры - Строка - Наименование продукции.
//   * ВложенныеУпаковки - Соответствие Из КлючИЗначение - Вложенные упаковки по данным ИС МП:
//		** Ключ - (См. ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода)
//		** Значение - (См. ИнициализироватьПараметрыКодаМаркировки).
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
Функция ИнициализироватьПараметрыКодаМаркировки(ЭлементДанных = Неопределено, ВидПродукции = Неопределено, ВыполнятьРазбор = Истина, Настройки = Неопределено) Экспорт
	
	ПараметрыКодаМаркировки = Новый Структура;
	ПараметрыКодаМаркировки.Вставить("РезультатРазбора");
	
	ПараметрыКодаМаркировки.Вставить("Статус");
	ПараметрыКодаМаркировки.Вставить("ОсобоеСостояние");
	
	ПараметрыКодаМаркировки.Вставить("ИННВладельца");
	ПараметрыКодаМаркировки.Вставить("НаименованиеВладельца");
	ПараметрыКодаМаркировки.Вставить("НаименованиеПроизводителя");
	ПараметрыКодаМаркировки.Вставить("ИННПроизводителя");
	ПараметрыКодаМаркировки.Вставить("GTIN");
	ПараметрыКодаМаркировки.Вставить("ПредставлениеНоменклатуры");
	
	ПараметрыКодаМаркировки.Вставить("ИдентификаторДокумента");
	
	ПараметрыКодаМаркировки.Вставить("ДатаЭмиссии",      '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаПроизводства", '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаВводаВОборот", '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаСписания",     '00010101');
	ПараметрыКодаМаркировки.Вставить("ГоденДо",          '00010101');
	
	ПараметрыКодаМаркировки.Вставить("РодительскаяУпаковка");
	ПараметрыКодаМаркировки.Вставить("ВложенныеУпаковки");
	ПараметрыКодаМаркировки.Вставить("ВидУпаковки");
	ПараметрыКодаМаркировки.Вставить("ВидПродукции", ВидПродукции);
	ПараметрыКодаМаркировки.Вставить("СпособВводаВОборот");
	
	ПараметрыКодаМаркировки.Вставить("ЕмкостьПотребительскойУпаковки");
	ПараметрыКодаМаркировки.Вставить("ЧастичноеВыбытиеВыведено");
	ПараметрыКодаМаркировки.Вставить("ЧастичноеВыбытиеОстатокГИСМТ");
	ПараметрыКодаМаркировки.Вставить("ЧастичноеВыбытиеНеКорректно");
	
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимАдресСервера");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимТелоЗапросаJSON");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимТелоОтветаJSON");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимКодОтвета");
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат ПараметрыКодаМаркировки;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) = Тип("Соответствие") Тогда
		ИсточникДанных = ЭлементДанных;
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("КлючИЗначение") Тогда	
		ИсточникДанных = ЭлементДанных.Значение;
	КонецЕсли;
	
	Если ВыполнятьРазбор Тогда
		ПараметрыКодаМаркировки.РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(
			ИсточникДанных["cis"], ВидПродукции, Настройки);
		
		ШтрихкодированиеОбщегоНазначенияМОТП.РассчитатьХэшСуммуНормализации(
			ПараметрыКодаМаркировки.РезультатРазбора,
			ПараметрыКодаМаркировки.РезультатРазбора.ДанныеРазбора);
	КонецЕсли;
	
	ПараметрыКодаМаркировки.Статус          = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ИсточникДанных["status"]);
	ПараметрыКодаМаркировки.ОсобоеСостояние = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ИсточникДанных["statusEx"]);
	
	ПараметрыКодаМаркировки.ИННВладельца              = ИсточникДанных["ownerInn"];
	ПараметрыКодаМаркировки.GTIN                      = ИсточникДанных["gtin"];
	ПараметрыКодаМаркировки.ПредставлениеНоменклатуры = ИсточникДанных["productName"];
	
	ПараметрыКодаМаркировки.ИдентификаторДокумента = ИсточникДанных["lastDocId"];
	
	Если ИсточникДанных["emissionDate"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.ДатаЭмиссии = ОбщегоНазначенияИС.ДатаИзСтроки(ИсточникДанных["emissionDate"]);
	КонецЕсли;
	
	Если ИсточникДанных["emissionType"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.СпособВводаВОборот = СпособВыпускаВОборот(ИсточникДанных["emissionType"]);
	КонецЕсли;
	
	Если ИсточникДанных["producedDate"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.ДатаПроизводства = ОбщегоНазначенияИС.ДатаИзСтроки(ИсточникДанных["producedDate"],, Ложь);
	КонецЕсли;
	
	Если ИсточникДанных["introducedDate"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.ДатаВводаВОборот = ОбщегоНазначенияИС.ДатаИзСтроки(ИсточникДанных["introducedDate"]);
	КонецЕсли;
	
	Если ИсточникДанных["expireDate"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.ГоденДо = ОбщегоНазначенияИС.ДатаИзСтроки(ИсточникДанных["expireDate"],, Ложь);
	КонецЕсли;
	
	Если ИсточникДанных["parent"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.РодительскаяУпаковка = ИсточникДанных["parent"];
	КонецЕсли;
	
	Если ИсточникДанных["productGroup"] <> Неопределено И ЗначениеЗаполнено( ИсточникДанных["productGroup"]) Тогда
		ПараметрыКодаМаркировки.ВидПродукции = ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппа(ИсточникДанных["productGroup"], ВидПродукции);
	КонецЕсли;
	
	ВидПродукцииДляРазбораКода = ВидПродукции;
	Если ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции) Тогда
		ВидПродукцииДляРазбораКода = ПараметрыКодаМаркировки.ВидПродукции;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииДляРазбораКода) Тогда
		ВызватьИсключение НСтр("ru = 'Вид продукции определить не удалось'");
	КонецЕсли;
	
	Значение    = ИсточникДанных["packType"];
	ЗначениеДоп = ИсточникДанных["generalPackageType"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ВидУпаковки = ИнтерфейсИСМПОбщегоНазначения.ВидУпаковки(Значение, ВидПродукцииДляРазбораКода, ЗначениеДоп);
	КонецЕсли;
	
	ДанныеЧастичногВыбытия = ИсточникДанных["partialSaleInfo"];
	Если ДанныеЧастичногВыбытия <> Неопределено Тогда
		ПараметрыКодаМаркировки.ЕмкостьПотребительскойУпаковки = ДанныеЧастичногВыбытия["innerUnitCount"];
		ПараметрыКодаМаркировки.ЧастичноеВыбытиеВыведено       = ДанныеЧастичногВыбытия["soldUnitCount"];
		ПараметрыКодаМаркировки.ЧастичноеВыбытиеОстатокГИСМТ   = ДанныеЧастичногВыбытия["rest"];
		КорректностьОстатка                                    = ДанныеЧастичногВыбытия["correctRest"];
		Если КорректностьОстатка <> Неопределено Тогда
			ПараметрыКодаМаркировки.ЧастичноеВыбытиеНеКорректно = Не (КорректностьОстатка);
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникДанных["countChildren"] <> Неопределено
		И ИсточникДанных["childrenMap"] <> Неопределено
		И ИсточникДанных["countChildren"] > 0 Тогда
		
		ПараметрыКодаМаркировки.ВложенныеУпаковки = Новый Соответствие;
		Для Каждого СвойстваВложеннойУпаковки Из ИсточникДанных["childrenMap"] Цикл
			
			ПараметрыКодаМаркировкиВложенный = ИнициализироватьПараметрыКодаМаркировки(
				СвойстваВложеннойУпаковки,
				ПараметрыКодаМаркировки.ВидПродукции,, Настройки);
			
			ПараметрыКодаМаркировки.ВложенныеУпаковки.Вставить(
				ПараметрыКодаМаркировкиВложенный.РезультатРазбора,
				ПараметрыКодаМаркировкиВложенный);
			
			Если ПараметрыКодаМаркировкиВложенный.РезультатРазбора <> Неопределено
				И Не ЗначениеЗаполнено(ПараметрыКодаМаркировкиВложенный.РезультатРазбора.ВидУпаковки) Тогда
				ПараметрыКодаМаркировкиВложенный.РезультатРазбора.ВидУпаковки = ПараметрыКодаМаркировкиВложенный.ВидУпаковки;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникДанных["children"] <> Неопределено Тогда
		
		ПараметрыКодаМаркировки.ВложенныеУпаковки = Новый Соответствие;
		Для Каждого СвойстваВложеннойУпаковки Из ИсточникДанных["children"] Цикл
			
			ПараметрыКодаМаркировкиВложенный = ИнициализироватьПараметрыКодаМаркировки(
				СвойстваВложеннойУпаковки,
				ПараметрыКодаМаркировки.ВидПродукции,, Настройки);
			
			ПараметрыКодаМаркировки.ВложенныеУпаковки.Вставить(
				ПараметрыКодаМаркировкиВложенный.РезультатРазбора,
				ПараметрыКодаМаркировкиВложенный);
			
			Если ПараметрыКодаМаркировкиВложенный.РезультатРазбора <> Неопределено
				И Не ЗначениеЗаполнено(ПараметрыКодаМаркировкиВложенный.РезультатРазбора.ВидУпаковки) Тогда
				ПараметрыКодаМаркировкиВложенный.РезультатРазбора.ВидУпаковки = ПараметрыКодаМаркировкиВложенный.ВидУпаковки;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыКодаМаркировки.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		ПараметрыКодаМаркировки.ВложенныеУпаковки = Новый Соответствие;
	КонецЕсли;
	
	Если ИсточникДанных["ownerName"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.НаименованиеВладельца = ИсточникДанных["ownerName"];
	КонецЕсли;
	Если ИсточникДанных["producerName"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.НаименованиеПроизводителя = ИсточникДанных["producerName"];
	КонецЕсли;
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

// Возвращает структуру данных кода маркировки.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * НаименованиеВладельца - Строка - Наименование владельца.
//   * НаименованиеПроизводителя - Строка - Наименование производителя.
//   * ИННПроизводителя - Строка - ИНН производителя кода маркировки.
//   * ДатаЭмиссии - Дата - Дата эмиссии.
//   * GTIN - Строка - GTIN продукции.
//   * ПредставлениеНоменклатуры - Строка - Наименование продукции.
Функция ИнициализироватьПараметрыСредстваИдентификации(ЭлементДанных, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСредстваИдентификации = Новый Структура;
	ПараметрыСредстваИдентификации.Вставить("РезультатРазбора");
	
	ПараметрыСредстваИдентификации.Вставить("Статус");
	ПараметрыСредстваИдентификации.Вставить("ОсобоеСостояние");
	
	ПараметрыСредстваИдентификации.Вставить("ИННВладельца");
	ПараметрыСредстваИдентификации.Вставить("НаименованиеВладельца");
	ПараметрыСредстваИдентификации.Вставить("НаименованиеПроизводителя");
	ПараметрыСредстваИдентификации.Вставить("ИННПроизводителя");
	ПараметрыСредстваИдентификации.Вставить("GTIN");
	ПараметрыСредстваИдентификации.Вставить("ПредставлениеНоменклатуры");
	ПараметрыСредстваИдентификации.Вставить("ИдентификаторДокумента");
	ПараметрыСредстваИдентификации.Вставить("РодительскаяУпаковка");
	
	ПараметрыСредстваИдентификации.Вставить("СпособВводаВОборот");
	ПараметрыСредстваИдентификации.Вставить("ИдентификаторДокумента");
	ПараметрыСредстваИдентификации.Вставить("КодТНВЭД");
	
	ПараметрыСредстваИдентификации.Вставить("ДатаЭмиссии",      '00010101');
	ПараметрыСредстваИдентификации.Вставить("ДатаПроизводства", '00010101');
	ПараметрыСредстваИдентификации.Вставить("ДатаВводаВОборот", '00010101');
	ПараметрыСредстваИдентификации.Вставить("ДатаСписания",     '00010101');
	ПараметрыСредстваИдентификации.Вставить("ГоденДо",          '00010101');
	
	ПараметрыСредстваИдентификации.Вставить("ПричинаСписания");
	ПараметрыСредстваИдентификации.Вставить("ПредыдущийКодМаркировки");
	ПараметрыСредстваИдентификации.Вставить("КодУпаковки");
	
	ПараметрыСредстваИдентификации.Вставить("ВложенныеУпаковки");
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат ПараметрыСредстваИдентификации;
	КонецЕсли;
	
	ПараметрыСредстваИдентификации.РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(ЭлементДанных["cis"], ВидПродукции);
	
	ПараметрыСредстваИдентификации.Статус             = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ЭлементДанных["status"]);
	ПараметрыСредстваИдентификации.СпособВводаВОборот = СпособВыпускаВОборот(ЭлементДанных["emissionType"]);
	
	Если ЭлементДанных["withdrawReason"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ПричинаСписания = ПричинаСписанияКодаМаркировкиДляПеремаркировки(ЭлементДанных["withdrawReason"]);
	КонецЕсли;
	Если ЭлементДанных["statusEx"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ОсобоеСостояние = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ЭлементДанных["statusEx"]);
	КонецЕсли;
	Если ЭлементДанных["prevCis"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ПредыдущийКодМаркировки = ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(ЭлементДанных["prevCis"], ВидПродукции);
	КонецЕсли;
	Если ЭлементДанных["parent"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.КодУпаковки = ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(ЭлементДанных["parent"], ВидПродукции);
	КонецЕсли;
	
	Если ЭлементДанных["emissionDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаЭмиссии      = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["emissionDate"]);
	КонецЕсли;
	Если ЭлементДанных["producedDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаПроизводства = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["producedDate"],, Ложь);
	КонецЕсли;
	Если ЭлементДанных["introducedDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаВводаВОборот = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["introducedDate"]);
	КонецЕсли;
	Если ЭлементДанных["receiptDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ДатаСписания    = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["receiptDate"]);
	КонецЕсли;
	Если ЭлементДанных["expireDate"] <> Неопределено Тогда
		ПараметрыСредстваИдентификации.ГоденДо = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["expireDate"],, Ложь);
	КонецЕсли;
	
	ПараметрыСредстваИдентификации.ИННВладельца              = ЭлементДанных["ownerInn"];
	ПараметрыСредстваИдентификации.ИдентификаторДокумента    = ЭлементДанных["lastDocId"];
	ПараметрыСредстваИдентификации.КодТНВЭД                  = ЭлементДанных["tnVedEaes"];
	ПараметрыСредстваИдентификации.GTIN                      = ЭлементДанных["gtin"];
	ПараметрыСредстваИдентификации.ПредставлениеНоменклатуры = ЭлементДанных["productName"];
	
	Если ЭлементДанных["countChildren"] <> Неопределено
		И ЭлементДанных["children"] <> Неопределено
		И ЭлементДанных["countChildren"] > 0 Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("GTIN",                      NULL);
		ДанныеСтроки.Вставить("ПредставлениеНоменклатуры", NULL);
		
		ПараметрыСредстваИдентификации.ВложенныеУпаковки = Новый Соответствие;
		Для Каждого СвойстваВложеннойУпаковки Из ЭлементДанных["children"] Цикл
			
			ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировки(СвойстваВложеннойУпаковки, ВидПродукции);
			
			ПроверитьДанныеСтроки(ДанныеСтроки, ПараметрыКодаМаркировки, "GTIN");
			ПроверитьДанныеСтроки(ДанныеСтроки, ПараметрыКодаМаркировки, "ПредставлениеНоменклатуры");
			
			ПараметрыСредстваИдентификации.ВложенныеУпаковки.Вставить(
				ПараметрыКодаМаркировки.РезультатРазбора, ПараметрыКодаМаркировки);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.GTIN) Тогда
			ПараметрыСредстваИдентификации.GTIN = ДанныеСтроки.GTIN;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтроки.ПредставлениеНоменклатуры) Тогда
			ПараметрыСредстваИдентификации.ПредставлениеНоменклатуры = ДанныеСтроки.ПредставлениеНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыСредстваИдентификации;
	
КонецФункции

// Перекодирует способ выпуска товаров в для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Результат перекодирования.
Функция СпособВыпускаВОборот(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "LOCAL" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Производство;
	ИначеЕсли ЗначениеПоиска = "FOREIGN" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Импорт;
	ИначеЕсли ЗначениеПоиска = "REMAINS" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	ИначеЕсли ЗначениеПоиска = "CROSSBORDER" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля;
	ИначеЕсли ЗначениеПоиска = "REMARK" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Перемаркировка;
	ИначеЕсли ЗначениеПоиска = "COMMISSION" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Комиссия;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Производство Тогда
		Результат = "LOCAL";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Импорт Тогда
		Результат = "FOREIGN";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		Результат = "REMAINS";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля Тогда
		Результат = "CROSSBORDER";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Перемаркировка Тогда
		Результат = "REMARK";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Комиссия Тогда
		Результат = "COMMISSION";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ выпуска в оборот: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру данных кода маркировки.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки.
//   * ИННВладельца - Строка - ИНН владельца кода маркировки.
//   * НаименованиеВладельца - Строка - Наименование владельца.
//   * НаименованиеПроизводителя - Строка - Наименование производителя.
//   * ИННПроизводителя - Строка - ИНН производителя кода маркировки.
//   * ДатаЭмиссии - Дата - Дата эмиссии.
//   * ИдентификаторДокумента - Строка - Идентификатор документа.
//   * КодТНВЭД - Строка - Код ТНВЭД продукции.
//   * ДанныеПродукции - (См. ИнтерфейсИСМПОбщегоНазначения.ИнициализироватьДанныеПродукции).
Функция ИнициализироватьПараметрыМаркированногоТовара(ЭлементДанных = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыМаркированногоТовара = Новый Структура;
	ПараметрыМаркированногоТовара.Вставить("РезультатРазбора");
	
	ПараметрыМаркированногоТовара.Вставить("Статус");
	ПараметрыМаркированногоТовара.Вставить("ОсобоеСостояние");
	
	ПараметрыМаркированногоТовара.Вставить("ДанныеПродукции");
	ПараметрыМаркированногоТовара.Вставить("СпособВводаВОборот");
	ПараметрыМаркированногоТовара.Вставить("ПредыдущийКодМаркировки");
	ПараметрыМаркированногоТовара.Вставить("КодУпаковки");
	
	ПараметрыМаркированногоТовара.Вставить("ДатаЭмиссии",      '00010101');
	ПараметрыМаркированногоТовара.Вставить("ДатаПроизводства", '00010101');
	ПараметрыМаркированногоТовара.Вставить("ДатаВводаВОборот", '00010101');
	ПараметрыМаркированногоТовара.Вставить("ДатаСписания",     '00010101');
	ПараметрыМаркированногоТовара.Вставить("ГоденДо",          '00010101');
	
	ПараметрыМаркированногоТовара.Вставить("НаименованиеВладельца");
	ПараметрыМаркированногоТовара.Вставить("ИННВладельца");
	ПараметрыМаркированногоТовара.Вставить("НаименованиеПроизводителя");
	ПараметрыМаркированногоТовара.Вставить("ИННПроизводителя");
	ПараметрыМаркированногоТовара.Вставить("ПредставлениеНоменклатуры");
	ПараметрыМаркированногоТовара.Вставить("ИдентификаторДокумента");
	ПараметрыМаркированногоТовара.Вставить("РодительскаяУпаковка");
	
	ПараметрыМаркированногоТовара.Вставить("ИдентификаторДокумента");
	ПараметрыМаркированногоТовара.Вставить("КодТНВЭД");
	
	Если ЭлементДанных <> Неопределено Тогда
		
		ПараметрыМаркированногоТовара.Вставить("ДанныеПродукции", ИнтерфейсИСМПОбщегоНазначения.ИнициализироватьДанныеПродукции(ЭлементДанных));
		
		Если ЭлементДанных["status"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.Вставить("Статус", ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ЭлементДанных["status"]));
		КонецЕсли;
		
		Если ЭлементДанных["statusEx"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.Вставить("ОсобоеСостояние", ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ЭлементДанных["statusEx"]));
		КонецЕсли;
		
		Если ЭлементДанных["emissionType"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.Вставить("СпособВводаВОборот", СпособВыпускаВОборот(ЭлементДанных["emissionType"]));
		КонецЕсли;
		
		Если ЭлементДанных["prevCis"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.Вставить("ПредыдущийКодМаркировки", ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(ЭлементДанных["prevCis"], ВидПродукции));
		КонецЕсли;
		
		Если ЭлементДанных["uitu"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.Вставить("КодУпаковки", ИнтерфейсИСМП.РазобратьИНормализоватьКодМаркировки(ЭлементДанных["uitu"], ВидПродукции));
		КонецЕсли;
		
		Если ЭлементДанных["emissionDate"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.ДатаЭмиссии      = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["emissionDate"]);
		КонецЕсли;
		
		Если ЭлементДанных["producedDate"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.ДатаПроизводства = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["producedDate"],, Ложь);
		КонецЕсли;
		
		Если ЭлементДанных["introducedDate"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.ДатаВводаВОборот = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["introducedDate"]);
		КонецЕсли;
		
		Если ЭлементДанных["expireDate"] <> Неопределено Тогда
			ПараметрыМаркированногоТовара.ГоденДо = ОбщегоНазначенияИС.ДатаИзСтроки(ЭлементДанных["expireDate"],, Ложь);
		КонецЕсли;
		
		ПараметрыМаркированногоТовара.НаименованиеВладельца     = ЭлементДанных["ownerName"];
		ПараметрыМаркированногоТовара.ИННВладельца              = ЭлементДанных["ownerInn"];
		ПараметрыМаркированногоТовара.НаименованиеПроизводителя = ЭлементДанных["producerName"];
		ПараметрыМаркированногоТовара.ИННПроизводителя          = ЭлементДанных["producerInn"];
		ПараметрыМаркированногоТовара.ИдентификаторДокумента    = ЭлементДанных["lastDocId"];
		ПараметрыМаркированногоТовара.КодТНВЭД                  = ЭлементДанных["tnvd"];
		
	КонецЕсли;
	
	ПараметрыМаркированногоТовара.РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(ЭлементДанных["cis"], ВидПродукции);
	
	Если ЭлементДанных["countChildren"] <> Неопределено
		И ЭлементДанных["children"] <> Неопределено
		И ЭлементДанных["countChildren"] > 0 Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("GTIN", NULL);
		
		ПараметрыМаркированногоТовара.Вставить("ВложенныеУпаковки", Новый Соответствие);
		Для Каждого СвойстваВложеннойУпаковки Из ЭлементДанных["children"] Цикл
			
			ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировки(СвойстваВложеннойУпаковки, ВидПродукции);
			
			ПроверитьДанныеСтроки(ДанныеСтроки, ПараметрыКодаМаркировки, "GTIN");
			
			КодМаркировки = СвойстваВложеннойУпаковки["cis"];
			СтрокаКодаМаркировки = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(КодМаркировки, ВидПродукции);
			ПараметрыМаркированногоТовара.ВложенныеУпаковки.Вставить(СтрокаКодаМаркировки, ПараметрыКодаМаркировки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыМаркированногоТовара;
	
КонецФункции

// Инициализировать структуру данных участника.
//
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП.
// Возвращаемое значение:
//  Структура - Описание:
//   * АдресЭлектроннойПочты - Строка - Адрес электронной почты
//   * Адрес  - Строка - Адрес
//   * ОГРН  - Строка - ОГРН
//   * КПП  - Строка - КПП
//   * ИНН  - Строка - ИНН
//   * ОКПО  - Строка - ОКПО
//   * НаименованиеПолное  - Строка - Полное наименование
//   * Наименование  - Строка - Наименование
//   * Идентификатор - Строка - Идентификатор
Функция ИнициализироватьДанныеКонтрагента(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Наименование");
		ДанныеПродукции.Вставить("НаименованиеПолное");
		ДанныеПродукции.Вставить("ОКПО");
		ДанныеПродукции.Вставить("ИНН");
		ДанныеПродукции.Вставить("КПП");
		ДанныеПродукции.Вставить("ОГРН");
		ДанныеПродукции.Вставить("Адрес");
		ДанныеПродукции.Вставить("АдресЭлектроннойПочты");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеКонтрагента();
		
		ДанныеОбработки.Свойство("id",           ДанныеПродукции.Идентификатор);
		ДанныеОбработки.Свойство("name",         ДанныеПродукции.Наименование);
		ДанныеОбработки.Свойство("fullName",     ДанныеПродукции.НаименованиеПолное);
		ДанныеОбработки.Свойство("okpo",         ДанныеПродукции.ОКПО);
		ДанныеОбработки.Свойство("inn",          ДанныеПродукции.ИНН);
		ДанныеОбработки.Свойство("kpp",          ДанныеПродукции.КПП);
		ДанныеОбработки.Свойство("ogrn",         ДанныеПродукции.ОГРН);
		ДанныеОбработки.Свойство("legalAddress", ДанныеПродукции.Адрес);
		ДанныеОбработки.Свойство("email",        ДанныеПродукции.АдресЭлектроннойПочты);
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных шапки документа ИС МП.
// 
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП.
// Возвращаемое значение:
//  Структура - Описание:
//   * PDF - Строка - Ссылка на PDF.
//   * СтатусЗагрузкиОписание - Строка - Описание статуса загрузки документа.
//   * СтатусЗагрузки - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * ДатаЗагрузки - Дата - Дата загрузки документа в ИС МП.
//   * СуммаНДС - Число - Сумма НДС.
//   * Сумма - Число - Сумма документа.
//   * ПолучательНаименование - Строка - Наименование получателя.
//   * ОтправительНаименование - Строка - Наименование отправителя.
//   * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * Тип - ПеречислениеСсылка.ВидыОперацийИСМП - Тип документа.
//   * Входящий - Булево - Признак входящего документа
//   * Дата - Дата - Дата документа
//   * Идентификатор - Строка - Идентификатор документа.
Функция ИнициализироватьДанныеШапкиДокумента(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Дата");
		ДанныеПродукции.Вставить("Входящий");
		ДанныеПродукции.Вставить("Тип");
		ДанныеПродукции.Вставить("Статус");
		ДанныеПродукции.Вставить("ОтправительНаименование");
		ДанныеПродукции.Вставить("ПолучательНаименование");
		ДанныеПродукции.Вставить("Сумма");
		ДанныеПродукции.Вставить("СуммаНДС");
		
		ДанныеПродукции.Вставить("ДатаЗагрузки");
		ДанныеПродукции.Вставить("СтатусЗагрузки");
		ДанныеПродукции.Вставить("СтатусЗагрузкиОписание");
		ДанныеПродукции.Вставить("PDF");
		
		ДанныеПродукции.Вставить("Тело");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеШапкиДокумента();
		
		ДанныеОбработки.Свойство("number",             ДанныеПродукции.Идентификатор);
		ДанныеОбработки.Свойство("input",              ДанныеПродукции.Входящий);
		ДанныеОбработки.Свойство("status",             ДанныеПродукции.Статус);
		ДанныеОбработки.Свойство("senderName",         ДанныеПродукции.ОтправительНаименование);
		ДанныеОбработки.Свойство("receiverName",       ДанныеПродукции.ПолучательНаименование);
		ДанныеОбработки.Свойство("total",              ДанныеПродукции.Сумма);
		ДанныеОбработки.Свойство("vat",                ДанныеПродукции.СуммаНДС);
		ДанныеОбработки.Свойство("downloadStatus",     ДанныеПродукции.СтатусЗагрузки);
		ДанныеОбработки.Свойство("downloadStatusDesc", ДанныеПродукции.СтатусЗагрузкиОписание);
		ДанныеОбработки.Свойство("pdfFile",            ДанныеПродукции.PDF);
		ДанныеОбработки.Свойство("type",               ДанныеПродукции.Тип);
		ДанныеОбработки.Свойство("body",               ДанныеПродукции.Тело);
		
		Если ДанныеОбработки.Свойство("status") Тогда
			ДанныеПродукции.Статус = СтатусДокумента(ДанныеОбработки.status);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("downloadStatus") Тогда
			ДанныеПродукции.СтатусЗагрузки = СтатусДокумента(ДанныеОбработки.downloadStatus);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("docDate") Тогда
			ДанныеПродукции.Дата = ОбщегоНазначенияИС.ДатаИзСтроки(ДанныеОбработки.docDate);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("receivedAt") Тогда
			ДанныеПродукции.ДатаЗагрузки = ОбщегоНазначенияИС.ДатаИзСтроки(ДанныеОбработки.receivedAt);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных шапки чека ГИС МТ.
// 
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП.
// Возвращаемое значение:
//  Структура - Описание:
//   * Идентификатор - Строка - Идентификатор чека в ГИС МТ.
//   * ДатаЗагрузки - Дата - Дата загрузки документа в ИС МП.
//   * Тип - Строка - Тип чека.
//   * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * ОтправительНаименование - Строка - Наименование отправителя.
Функция ИнициализироватьДанныеШапкиЧека(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("ДатаЗагрузки");
		ДанныеПродукции.Вставить("Тип");
		ДанныеПродукции.Вставить("Статус");
		ДанныеПродукции.Вставить("ОтправительНаименование");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеШапкиЧека();
		
		ДанныеОбработки.Свойство("did",                ДанныеПродукции.Идентификатор);
		ДанныеОбработки.Свойство("status",             ДанныеПродукции.Статус);
		ДанныеОбработки.Свойство("senderName",         ДанныеПродукции.ОтправительНаименование);
		ДанныеОбработки.Свойство("type",               ДанныеПродукции.Тип);
		
		Если ДанныеОбработки.Свойство("status") Тогда
			ДанныеПродукции.Статус = СтатусДокумента(ДанныеОбработки.status);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("receivedAt") Тогда
			ДанныеПродукции.ДатаЗагрузки = ОбщегоНазначенияИС.ДатаИзСтроки(ДанныеОбработки.receivedAt);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных шапки документа ИС МП
//
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП
// Возвращаемое значение:
//  Структура - Описание:
//   * Идентификатор - Строка - Идентификатор документа
//   * ИННВладельца - Строка - ИНН владельца
//   * НаименованиеВладельца - Строка - Наименование отправителя
//   * КоличествоGTIN - Число - Количество GTIN
//   * КоличествоКодовМаркировки - Число - Количество кодов маркировки
//   * Дата - Дата - Дата документа
//   * Статус - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП - Статус документа
Функция ИнициализироватьДанныеШапкиЗаказаНаЭмиссиюКодовМаркировки(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Идентификатор");
		Данные.Вставить("ИННВладельца");
		Данные.Вставить("НаименованиеВладельца");
		Данные.Вставить("КоличествоGTIN");
		Данные.Вставить("КоличествоКодовМаркировки");
		Данные.Вставить("Дата");
		Данные.Вставить("Статус");
		
	Иначе
		
		Данные = ИнициализироватьДанныеШапкиЗаказаНаЭмиссиюКодовМаркировки();
		
		ДанныеОбработки.Свойство("order_id",            Данные.Идентификатор);
		ДанныеОбработки.Свойство("participant_inn",     Данные.ИННВладельца);
		ДанныеОбработки.Свойство("participant_name",    Данные.НаименованиеВладельца);
		ДанныеОбработки.Свойство("gtin_total_quantity", Данные.КоличествоGTIN);
		ДанныеОбработки.Свойство("code_total_quantity", Данные.КоличествоКодовМаркировки);
		
		Если ДанныеОбработки.Свойство("order_status") Тогда
			Данные.Статус = СтатусЗаказаНаЭмиссиюКодовМаркировки(ДанныеОбработки.order_status);
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("order_creation_date") Тогда
			Данные.Дата = ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ДанныеОбработки.order_creation_date);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Инициализировать структуру данных шапки документа приески ИС МП
//
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП
// Возвращаемое значение:
//  Структура - Описание:
//   * PDF - Строка - Ссылка на PDF.
//   * СтатусЗагрузкиОписание - Строка - Описание статуса загрузки документа.
//   * СтатусЗагрузки - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * ДатаЗагрузки - Дата - Дата загрузки документа в ИС МП.
//   * СуммаНДС - Число - Сумма НДС.
//   * Сумма - Число - Сумма документа.
//   * ПолучательНаименование - Строка - Наименование получателя.
//   * ОтправительНаименование - Строка - Наименование отправителя.
//   * Статус - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа.
//   * Тип - ПеречислениеСсылка.ВидыОперацийИСМП - Тип документа.
//   * Входящий - Булево - Признак входящего документа
//   * Дата - Дата - Дата документа
//   * Идентификатор - Строка - Идентификатор документа.
Функция ИнициализироватьДанныеШапкиПриемкиТоваров(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Дата");
		ДанныеПродукции.Вставить("Входящий");
		ДанныеПродукции.Вставить("Тип");
		ДанныеПродукции.Вставить("Статус");
		ДанныеПродукции.Вставить("ОтправительНаименование");
		ДанныеПродукции.Вставить("ПолучательНаименование");
		
		ДанныеПродукции.Вставить("ДатаЗагрузки");
		ДанныеПродукции.Вставить("СтатусЗагрузки");
		ДанныеПродукции.Вставить("СтатусЗагрузкиОписание");
		ДанныеПродукции.Вставить("PDF");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеШапкиДокумента();
		
		ДанныеОбработки.Свойство("number",             ДанныеПродукции.Идентификатор);
		ДанныеПродукции.Дата = ОбщегоНазначенияИС.ДатаИзСтроки(ДанныеОбработки.docDate);
		ДанныеПродукции.ДатаЗагрузки = ОбщегоНазначенияИС.ДатаИзСтроки(ДанныеОбработки.receivedAt);
		ДанныеОбработки.Свойство("type",               ДанныеПродукции.Тип);
		ДанныеПродукции.Статус = СтатусДокумента(ДанныеОбработки.status);
		ДанныеОбработки.Свойство("senderName",         ДанныеПродукции.ОтправительНаименование);
		ДанныеОбработки.Свойство("receiverName",       ДанныеПродукции.ПолучательНаименование);
		Если ДанныеОбработки.Свойство("downloadStatus") Тогда
			ДанныеПродукции.СтатусЗагрузки = СтатусДокумента(ДанныеОбработки.downloadStatus);
		КонецЕсли;
		ДанныеОбработки.Свойство("input",              ДанныеПродукции.Входящий);
		ДанныеОбработки.Свойство("pdfFile",            ДанныеПродукции.PDF);
				
		ДанныеОбработки.Свойство("downloadStatusDesc", ДанныеПродукции.СтатусЗагрузкиОписание);
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Инициализировать структуру данных шапки документа приески ИС МП
//
// Параметры:
//  ДанныеОбработки - Структура - Данные из сервиса ИС МП
// Возвращаемое значение:
//  Структура - Описание:
//   * ЗначениеШтрихкода - Строка - Код маркировки продукции.
//   * Количество - Число - Количество единиц.
//   * СуммаНДС - Число - Сумма НДС.
//   * Цена - Число - Цена за единицу.
Функция ИнициализироватьДанныеПродукцииПриемкиТоваров(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("ЗначениеШтрихкода");
		ДанныеПродукции.Вставить("Количество");
		ДанныеПродукции.Вставить("Цена");
		ДанныеПродукции.Вставить("СуммаНДС");
//		ДанныеПродукции.Вставить("ОписаниеПродукции");
		
	Иначе
	
		ДанныеПродукции = ИнициализироватьДанныеШапкиДокумента();
		Если ДанныеОбработки.Свойство("uit_code") Тогда
			ДанныеОбработки.Свойство("uit_code",             ДанныеПродукции.ЗначениеШтрихкода);
		ИначеЕсли ДанныеОбработки.Свойство("uitu_code") Тогда
			ДанныеОбработки.Свойство("uitu_code",             ДанныеПродукции.ЗначениеШтрихкода);
		КонецЕсли;
		ДанныеОбработки.Свойство("product_cost",               ДанныеПродукции.Цена);
		ДанныеОбработки.Свойство("product_tax",         ДанныеПродукции.СуммаНДС);
		Если ДанныеОбработки.Свойство("count_children") Тогда
			ДанныеПродукции.Количество = ДанныеОбработки.count_children;
		Иначе
			ДанныеПродукции.Количество = 1;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

Функция ИнициализироватьДанныеКодовТНВЭД(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеКодов = Новый Структура;
		ДанныеКодов.Вставить("КодТНВЭД");
		ДанныеКодов.Вставить("НаименованиеПолное");
		
	Иначе
	
		ДанныеКодов = ИнициализироватьДанныеКодовТНВЭД();
		ДанныеОбработки.Свойство("tnved",       ДанныеКодов.КодТНВЭД);
		ДанныеОбработки.Свойство("description", ДанныеКодов.НаименованиеПолное);
	
	КонецЕсли;
	
	Возврат ДанныеКодов;
	
КонецФункции
// Инициализирует структуру интервала
//
// Возвращаемое значение:
//  Структура - Описание:
//   * КонецПериода - Дата - Дата окончания периода
//   * НачалоПериода - Дата - Дата начала периода
Функция ИнициализироватьИнтервал() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НачалоПериода");
	ПараметрыОтбора.Вставить("КонецПериода");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Инициализирует параметры отбора документов
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ФорматДокумента - ПеречислениеСсылка - Формат документа
// * СтатусДокумента - ПеречислениеСсылка.СтатусыДокументовИСМП - Статус документа
// * ТипДокумента - ПеречислениеСсылка.ВидыОперацийИСМП - Тип документа
// * ТипЗапроса - ПеречислениеСсылка.ТипыЗапросовИС - Тип запроса
// * Интервал - См. ИнициализироватьИнтервал
// * ИНН - Строка - ИНН
// * Идентификатор - Строка - Идентификатор
Функция ИнициализироватьПараметрыОтбораДокументов() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор");
	ПараметрыОтбора.Вставить("ИНН");
	ПараметрыОтбора.Вставить("Интервал");
	ПараметрыОтбора.Вставить("ТипЗапроса");
	ПараметрыОтбора.Вставить("ТипДокумента");
	ПараметрыОтбора.Вставить("СтатусДокумента");
	ПараметрыОтбора.Вставить("ФорматДокумента");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Инициализирует параметры отбора средств идентификации
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Интервал - Неопределено -
//            - (См. ИнициализироватьИнтервал)
// * Статус - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки
// * GTIN - Строка - ИНН
// * СерийныйНомер - Строка - Серийный номер
// * ИННПроизводителя - Строка - ИНН
// * КодМаркировки - Строка - Код маркировки
Функция ИнициализироватьПараметрыОтбораСредствИдентификации() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КодМаркировки");
	ПараметрыОтбора.Вставить("ИННПроизводителя");
	ПараметрыОтбора.Вставить("СерийныйНомер");
	ПараметрыОтбора.Вставить("GTIN");
	ПараметрыОтбора.Вставить("Статус");
	ПараметрыОтбора.Вставить("Интервал");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Инициализирует параметры навигации по страницам
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ЗначениеПоляСортировкиПоследнее - Строка - Значение поля сортировки (последнее)
// * ЗначениеПоляСортировкиПервое - Строка - Значение поля сортировки (первое)
// * КодМаркировкиПоследний - Строка - Код маркировки (последний)
// * КодМаркировкиПервый - Строка - Код маркировки (первый)
Функция ИнициализироватьПараметрыНавигации() Экспорт
	
	ПараметрыНавигации = Новый Структура;
	ПараметрыНавигации.Вставить("КодМаркировкиПервый");
	ПараметрыНавигации.Вставить("КодМаркировкиПоследний");
	ПараметрыНавигации.Вставить("ЗначениеПоляСортировкиПервое");
	ПараметрыНавигации.Вставить("ЗначениеПоляСортировкиПоследнее");
	
	ПараметрыНавигации.Вставить("Направление");
	
	ПараметрыНавигации.Вставить("КоличествоЗаписейВсего");
	ПараметрыНавигации.Вставить("КоличествоЗаписейОбработано");
	
	ПараметрыНавигации.Вставить("НомерСтраницы", 1);
	
	Возврат ПараметрыНавигации;
	
КонецФункции

// Инициализирует параметры навигации по страницам списка документов
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ЗначениеПоляСортировкиПоследнее - Строка - Значение поля сортировки (последнее)
// * ЗначениеПоляСортировкиПервое - Строка - Значение поля сортировки (первое)
// * НомерДокументаПоследний - Строка - Код маркировки (последний)
// * НомерДокументаПервый - Строка - Код маркировки (первый)
Функция ИнициализироватьПараметрыНавигацииПоДокументам() Экспорт
	
	ПараметрыНавигации = Новый Структура;
	ПараметрыНавигации.Вставить("НомерДокументаПервый");
	ПараметрыНавигации.Вставить("НомерДокументаПоследний");
	ПараметрыНавигации.Вставить("ЗначениеПоляСортировкиПервое");
	ПараметрыНавигации.Вставить("ЗначениеПоляСортировкиПоследнее");
	
	ПараметрыНавигации.Вставить("Направление", "Далее");
	
	ПараметрыНавигации.Вставить("КоличествоЗаписейВсего");
	ПараметрыНавигации.Вставить("КоличествоЗаписейОбработано");
	
	
	Возврат ПараметрыНавигации;
	
КонецФункции

// Преобразовывает текстовое представление статуса документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыДокументовИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДокументовИСМП, Строка - статус документа.
Функция СтатусДокумента(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "CHECKED_OK" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Проверен;
		ИначеЕсли ЗначениеПоиска = "CHECKED_NOT_OK" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ЕстьОшибки;
		ИначеЕсли ЗначениеПоиска = "IN_PROGRESS" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Обрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSING_ERROR" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Ошибка;
		ИначеЕсли ЗначениеПоиска = "UNDEFINED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Неопределен;
		ИначеЕсли ЗначениеПоиска = "WAIT_ACCEPTANCE" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления;
		ИначеЕсли ЗначениеПоиска = "WAIT_PARTICIPANT_REGISTRATION" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ;
		ИначеЕсли ЗначениеПоиска = "CANCELLED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Отменен;
		ИначеЕсли ЗначениеПоиска = "ACCEPTED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Принят;
		ИначеЕсли ЗначениеПоиска = "WAIT_FOR_CONTINUATION" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента;
		ИначеЕсли ЗначениеПоиска = "PARSE_ERROR" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Ошибка;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
			Возврат "CHECKED_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
			Возврат "CHECKED_NOT_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
			Возврат "IN_PROGRESS";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
			Возврат "PROCESSING_ERROR";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Неопределен Тогда
			Возврат "UNDEFINED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
			Возврат "WAIT_ACCEPTANCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			Возврат "WAIT_PARTICIPANT_REGISTRATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
			Возврат "CANCELLED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Принят Тогда
			Возврат "ACCEPTED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента Тогда
			Возврат "WAIT_FOR_CONTINUATION";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус документа: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса заказа на эмиссию кодов маркировки в значение перечисления и наоборот.
//  NEW:                           Первичный статус-маркер о новом запросе на создание нового заказа
//  NOT_ACCEPTED:                  Контрольная проверка формата заказа не пройдена. Заказ не принят. Конечный статус.
//  ACCEPTED:                      Контрольная проверка формата заказа успешно завершена. Заказ принят.
//  DRAFT:                         Черновик (@Deprecated)
//  READY_TO_VALIDATE:             Внутренний промежуточный статус-маркер, заказ готов к проверке
//  VALIDATING:                    Проверка заказа выполняется
//  VALIDATION_FAILED:             Контрольно-логическая проверка заказа не пройдена.
//                                 Конечный статус до обновления параметров заказа.
//  VALIDATED:                     Контрольно-логическая проверка заказа успешно завершена.
//                                 Заказ готов к рассмотрению оператором.
//  PENDING_REVIEW:                На рассмотрении оператором
//  REJECTED:                      Отказано оператором при проверки данных участника в ЕГРЮЛ/ЕГРИП/РАФП. Конечный статус.
//  APPROVED:                      Согласовано оператором
//  PAYMENT:                       Ожидается оплата - с UI
//  ANNULLED:                      Аннулирован - по истечению срока оплаты. Конечный статус.
//  READY_TO_PROCESS:              Внутренний промежуточный статус-маркер, заказ готов к обработке 
//  PROCESSING:                    Обработка заказа выполняется 
//  PROCESSING_FAILED:             Обработка заказа завершилась с ошибкой. Конечный статус.
//  PROCESSED:                     Обработка заказа успешно завершена
//  READY_FOR_EXTERNAL_PROCESSING: Принят и готов к обработке внешней системой (СУЗ).
//                                 Заказ в этом статусе будет передаваться внешней системе в обработку
//  EXTERNAL_PROCESSING:           Принят к обработке внешней системой (СУЗ). Обработка внешней системой - в процессе.
//                                 Заказ в этом статусе не будет повторно передаваться в обработку внешней системе.
//  PRODUCTION:                    Принят и передан в производство - оплата выполнена - с UI
//  MK_EMITTED:                    КМ Эмитирован - при POOL_STATUS.EXHAUSTED
//  MK_PARTLY_EMITTED:             КМ частично эмитирован
//  IO_EMITTED:                    СИ эмитировано - при подтверждении в ЦЭМ на UI
//  IO_SHIPPED:                    СИ отгружено заказчику - при подтверждении в ЦЭМ на UI
//  COMPLETED:                     Исполнен - при подтверждении принятия заказа участником оборота на UI. Конечный статус.
//  ERROR:                         Произошла ошибка на производстве. Конечный статус до исправления ошибки.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - статус документа.
Функция СтатусЗаказаНаЭмиссиюКодовМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "NEW" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПроверкеФормата;
		ИначеЕсли ЗначениеПоиска = "NOT_ACCEPTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаПроверкаФорматаНеПройдена;
		ИначеЕсли ЗначениеПоиска = "ACCEPTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМППроверкаФорматаПройдена;
		ИначеЕсли ЗначениеПоиска = "DRAFT" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик;
		ИначеЕсли ЗначениеПоиска = "READY_TO_VALIDATE" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПККонтрольноЛогическойПроверке;
		ИначеЕсли ЗначениеПоиска = "VALIDATING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПВыполняетсяКонтрольноЛогическаяПроверка;
		ИначеЕсли ЗначениеПоиска = "VALIDATION_FAILED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаКонтрольноЛогическаяПроверкаНеПройдена;
		ИначеЕсли ЗначениеПоиска = "VALIDATED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКРассмотрениюОператором;
		ИначеЕсли ЗначениеПоиска = "PENDING_REVIEW" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПНаРассмотренииОператором;
		ИначеЕсли ЗначениеПоиска = "REJECTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОтклоненОператором;
		ИначеЕсли ЗначениеПоиска = "APPROVED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПСогласованОператором;
		ИначеЕсли ЗначениеПоиска = "PAYMENT" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.КОплате;
		ИначеЕсли ЗначениеПоиска = "ANNULLED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Аннулирован;
		ИначеЕсли ЗначениеПоиска = "READY_TO_PROCESS" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКОбработке;
		ИначеЕсли ЗначениеПоиска = "PROCESSING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSING_FAILED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ОшибкаОбработки;
		ИначеЕсли ЗначениеПоиска = "PROCESSED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбработан;
		ИначеЕсли ЗначениеПоиска = "READY_FOR_EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПередачеВСУЗ;
		ИначеЕсли ЗначениеПоиска = "EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
		ИначеЕсли ЗначениеПоиска = "PRODUCTION" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству;
		ИначеЕсли ЗначениеПоиска = "MK_EMITTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы;
		ИначеЕсли ЗначениеПоиска = "MK_PARTLY_EMITTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично;
		ИначеЕсли ЗначениеПоиска = "IO_EMITTED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы;
		ИначеЕсли ЗначениеПоиска = "IO_SHIPPED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиОтгружены;
		ИначеЕсли ЗначениеПоиска = "COMPLETED" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗЗакрыт;
		ИначеЕсли ЗначениеПоиска = "ERROR" Тогда
			Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус заказа на эмиссию кодов маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса строки заказа на эмиссию кодов маркировки в значение перечисления и наоборот.
//  DRAFT:                         // Черновик
//  READY_TO_PROCESS:              // начальный статус - готов к обработке
//  PROCESSING:                    // обработка началась
//  PROCESSED:                     // обработка закончилась
//  READY_FOR_EXTERNAL_PROCESSING: // Принят и готов к обработке внешней системой (СУЗ)
//  EXTERNAL_PROCESSING:           // Подзаказ принят внешней системой в обработку.
//  PRODUCTION:                    // КМ заказаны и готовы к использованию (или уже используются)
//  EMITTED:                       // Все КМ из пула заказа запрошены на использование в печать
//  VERIFIED:                      // Распечатанный КМ проверен верификатором
//  COMPLETED:                     // Исполнен - при подтверждении принятия заказа участником оборота на UI
//  ERROR:                         // Произошла ошибка.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП, Строка - статус документа.
Функция СтатусСтрокиЗаказаНаЭмиссиюКодовМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "DRAFT" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик;
		ИначеЕсли ЗначениеПоиска = "READY_TO_PROCESS" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКОбработке;
		ИначеЕсли ЗначениеПоиска = "PROCESSING" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПОбработан;
		ИначеЕсли ЗначениеПоиска = "READY_FOR_EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПКПередачеВСУЗ;
		ИначеЕсли ЗначениеПоиска = "EXTERNAL_PROCESSING" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
		ИначеЕсли ЗначениеПоиска = "PRODUCTION" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКПроизводству;
		ИначеЕсли ЗначениеПоиска = "EMITTED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыЭмитированы;
		ИначеЕсли ЗначениеПоиска = "VERIFIED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыВерифицированы;
		ИначеЕсли ЗначениеПоиска = "COMPLETED" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.Выполнен;
		ИначеЕсли ЗначениеПоиска = "ERROR" Тогда
			Возврат Перечисления.СтатусыСтрокЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус строки заказа на эмиссию кодов маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Перекодирует способ выпуска товаров в для обмена с СУЗ ИС МП в числовое значение.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗ - Результат перекодирования в числовое значение.
Функция СпособВыпускаВОборотЧисло(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = 1 Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Производство;
	ИначеЕсли ЗначениеПоиска = 2 Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗ.Импорт;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Производство Тогда
		Результат = 1;
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗ.Импорт Тогда
		Результат = 2;
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ выпуска в оборот: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид документа сертификации для обмена с ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - Результат перекодирования.
Функция ВидДокументаСертификации(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "CONFORMITY_DECLARATION" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия;
	ИначеЕсли ЗначениеПоиска = "CONFORMITY_CERTIFICATE" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия;
	ИначеЕсли ЗначениеПоиска = "CONFORMITY_CERTIFICATE_OR_DECLARATION" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатИлиДекларацияСоответствия;
	ИначеЕсли ЗначениеПоиска = "STATE_REGISTRATION_CERTIFICATE" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СвидетельствоОГосударственнойРегистрации;

	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия Тогда
		Результат = "CONFORMITY_DECLARATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия Тогда
		Результат = "CONFORMITY_CERTIFICATE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатИлиДекларацияСоответствия Тогда
		Результат = "CONFORMITY_CERTIFICATE_OR_DECLARATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СвидетельствоОГосударственнойРегистрации Тогда
		Результат = "STATE_REGISTRATION_CERTIFICATE";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид документа сертификации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид документа сертификации для обмена с ИС МП в числовое значение.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - значение для перекодировки.
//
// Возвращаемое значение:
//  Число - Результат перекодирования.
Функция ВидДокументаСертификацииЧисло(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия Тогда
		Результат = 2;
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия Тогда
		Результат = 1;
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИС.СвидетельствоОГосударственнойРегистрации Тогда
		Результат = 4;
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид документа сертификации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует принятое решение для обмена с ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ПринятыеРешенияИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПринятыеРешенияИСМП - Результат перекодирования.
Функция ПринятоеРешение(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровРазрешен Тогда
		Результат = 10;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПриУсловииИсполненияОбязательств Тогда
		Результат = 11;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПоСтатье121 Тогда
		Результат = 12;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПоСтатье122 Тогда
		Результат = 13;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.ВыпускТоваровПоСтатье123 Тогда
		Результат = 14;
	ИначеЕсли ЗначениеПоиска = Перечисления.ПринятыеРешенияИСМП.УсловныйВыпускТоваров Тогда
		Результат = 20;
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестное решение: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует причину перемаркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП - Результат перекодирования.
Функция ПричинаПеремаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "KM_SPOILED" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено;
		ИначеЕсли ЗначениеПоиска = "DESCRIPTION_ERRORS" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара;
		ИначеЕсли ЗначениеПоиска = "RETAIL_RETURN" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя;
		ИначеЕсли ЗначениеПоиска = "REMOTE_SALE_RETURN" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи;
		ИначеЕсли ЗначениеПоиска = "LEGAL_RETURN" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица;
		ИначеЕсли ЗначениеПоиска = "INTERNAL_RETURN" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.РеализацияТоваровПриобретенныхНеДляПродажи;
		ИначеЕсли ЗначениеПоиска = "EEC_EXPORT_RETURN" Тогда
			Возврат Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено Тогда
			Возврат "KM_SPOILED";
		ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара Тогда
			Возврат "DESCRIPTION_ERRORS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя Тогда
			Возврат "RETAIL_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратВСлучаеДистанционнойПродажи Тогда
			Возврат "REMOTE_SALE_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица Тогда
			Возврат "LEGAL_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.РеализацияТоваровПриобретенныхНеДляПродажи Тогда
			Возврат "INTERNAL_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ВозвратИзЕАЭС Тогда
			Возврат "EEC_EXPORT_RETURN";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестная причина перемаркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Перекодирует вид маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП - Результат перекодирования.
Функция ПричинаСписанияКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "KM_SPOILED" Тогда
		Результат = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен;
	ИначеЕсли ЗначениеПоиска = "KM_LOST" Тогда
		Результат = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Утерян;
	ИначеЕсли ЗначениеПоиска = "KM_DESTROYED" Тогда
		Результат =  Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Уничтожен;
	ИначеЕсли ЗначениеПоиска = "BEFORE_MARKING" Тогда
		Результат =  Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ВыбытиеДоОбязательностиМаркировки;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен Тогда
		Результат = "KM_SPOILED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Утерян Тогда
		Результат = "KM_LOST";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Уничтожен Тогда
		Результат = "KM_DESTROYED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ВыбытиеДоОбязательностиМаркировки Тогда
		Результат = "BEFORE_MARKING";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная причина списания: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует причину перемаркировки для обмена с ИС МП.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП - Результат перекодирования.
Функция ПричинаСписанияКодаМаркировкиДляПеремаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено Тогда
		Результат = "KM_SPOILED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара Тогда
		Результат = "KM_DESTROYED";
	ИначеЕсли ЗначениеПоиска = "DAMAGED_OR_LOST" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено;
	ИначеЕсли ЗначениеПоиска = "ERROR_DETECTED" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара;
	
	ИначеЕсли ЗначениеПоиска = "CANCELLATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания;
	ИначеЕсли ЗначениеПоиска = "RETAIL" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа;
	ИначеЕсли ЗначениеПоиска = "EEC_EXPORT" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС;
	ИначеЕсли ЗначениеПоиска = "BEYOND_EEC_EXPORT" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС;
	ИначеЕсли ЗначениеПоиска = "RETURN" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу;
	ИначеЕсли ЗначениеПоиска = "DAMAGE_LOSS" Или ЗначениеПоиска = "KM_SPOILED" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
	ИначеЕсли ЗначениеПоиска = "DESTRUCTION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении;
	ИначеЕсли ЗначениеПоиска = "CONFISCATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация;
	ИначеЕсли ЗначениеПоиска = "LIQUIDATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия;
	ИначеЕсли ЗначениеПоиска = "ENTERPRISE_USE" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия;
	ИначеЕсли ЗначениеПоиска = "KM_SPOILED" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
	ИначеЕсли ЗначениеПоиска = "KM_LOST" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
	ИначеЕсли ЗначениеПоиска = "KM_DESTROYED" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении;
	
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная причина списания: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует причину вывода из оборота для обмена с ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПричиныПеремаркировкиТоваровИСМП,
//  ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Результат перекодирования.
Функция ПричинаВыводаИзОборотаКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "KM_SPOILED" Или ЗначениеПоиска = "KM_LOST" Или ЗначениеПоиска = "KM_SPOILED_OR_LOST" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтрачено;
	ИначеЕсли ЗначениеПоиска = "KM_DESTROYED" Или ЗначениеПоиска = "DESCRIPTION_ERRORS" Тогда
		Результат = Перечисления.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара;
	
	ИначеЕсли ЗначениеПоиска = "CANCELLATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания;
	ИначеЕсли ЗначениеПоиска = "RETAIL" Или ЗначениеПоиска = "RETAIL_RETURN" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа;
	ИначеЕсли ЗначениеПоиска = "REMOTE_SALE" Или ЗначениеПоиска = "REMOTE_SALE_RETURN" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриДистанционнойПродаже;
	ИначеЕсли ЗначениеПоиска = "EEC_EXPORT" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС;
	ИначеЕсли ЗначениеПоиска = "BEYOND_EEC_EXPORT" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС;
	ИначеЕсли ЗначениеПоиска = "RETURN" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу;
	ИначеЕсли ЗначениеПоиска = "DAMAGE_LOSS" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
	ИначеЕсли ЗначениеПоиска = "DESTRUCTION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении;
	ИначеЕсли ЗначениеПоиска = "CONFISCATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация;
	ИначеЕсли ЗначениеПоиска = "LIQUIDATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия;
	ИначеЕсли ЗначениеПоиска = "ENTERPRISE_USE" Или ЗначениеПоиска = "NO_RETAIL_USE" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия;
	ИначеЕсли ЗначениеПоиска = "DONATION" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаБезвозмезднаяПередача;
	ИначеЕсли ЗначениеПоиска = "STATE_ENTERPRISE" Тогда
		Результат = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриобретенГосударственнымПредприятием;
	
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестная причина вывода из оборота: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид первичного документа ИС МП.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ВидыПервичныхДокументовИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыПервичныхДокументовИСМП - Результат перекодирования.
Функция ВидПервичногоДокумента(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.КассовыйЧек Тогда
		Результат = "RECEIPT";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.ТоварныйЧек Тогда
		Результат = "SALES_RECEIPT";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная Тогда
		Результат = "CONSIGNMENT_NOTE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.ТаможеннаяДекларация Тогда
		Результат = "CUSTOMS_DECLARATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.УПД Тогда
		Результат = "UTD";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.Прочее Тогда
		Результат = "OTHER";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.АктУничтожения Тогда
		Результат = "DESTRUCTION_ACT";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПервичныхДокументовИСМП.ПустаяСсылка() Тогда
		Результат = "";
	
	ИначеЕсли ЗначениеПоиска = "RECEIPT" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.КассовыйЧек;
	ИначеЕсли ЗначениеПоиска = "SALES_RECEIPT" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.ТоварныйЧек;
	ИначеЕсли ЗначениеПоиска = "CONSIGNMENT_NOTE" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная;
	ИначеЕсли ЗначениеПоиска = "CUSTOMS_DECLARATION" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.ТаможеннаяДекларация;
	ИначеЕсли ЗначениеПоиска = "UTD" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.УПД;
	ИначеЕсли ЗначениеПоиска = "OTHER" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.Прочее;
	ИначеЕсли ЗначениеПоиска = "DESTRUCTION_ACT" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.АктУничтожения;
	ИначеЕсли ЗначениеПоиска = "" Тогда
		Результат = Перечисления.ВидыПервичныхДокументовИСМП.ПустаяСсылка();
	
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный вид первичного документа: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует вид возврата в оборотои ИС МП.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ВидыОперацийИСМП - значение для перекодировки.
//
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыОперацийИСМП - Результат перекодирования.
Функция ВидВозвратаВОборот(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "RETAIL_RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации;
	ИначеЕсли ЗначениеПоиска = "REMOTE_SALE_RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи;
	ИначеЕсли ЗначениеПоиска = "OWN_USE_RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляСобственныхНужд;
	ИначеЕсли ЗначениеПоиска = "NOT_FOR_SALE_RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи;
	ИначеЕсли ЗначениеПоиска = "PRODUCTION_USE_RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляПроизводственныхЦелей;
	ИначеЕсли ЗначениеПоиска = "VENDING_RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриПродажеЧерезВендинговыйАппарат;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи Тогда
		Возврат "REMOTE_SALE_RETURN";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации Тогда
		Возврат "RETAIL_RETURN";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляСобственныхНужд Тогда
		Возврат "OWN_USE_RETURN";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи Тогда
		Возврат "NOT_FOR_SALE_RETURN";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляПроизводственныхЦелей Тогда
		Возврат "PRODUCTION_USE_RETURN";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриПродажеЧерезВендинговыйАппарат Тогда
		Возврат "VENDING_RETURN";
	
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный вид возврата в оборот: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь) Экспорт
	
	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];
	
	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;
	
	ДанныеСтроки[ИмяПоля] = Значение;
	
КонецПроцедуры

Процедура ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, КешКодовМаркировки) Экспорт
	
	СтрокаДереваИзКеша = КешКодовМаркировки[КодМаркировки];
	Если СтрокаДереваИзКеша <> Неопределено Тогда
		Если СтрокаДереваИзКеша.Родитель = Неопределено Тогда
			// Код маркировки уже был добавлен в корень дерева упаковок.
			// Требуется удаление упаковки-дубля из дерева упаковок.
			СтрокаДереваИзКеша.Владелец().Строки.Удалить(СтрокаДереваИзКеша);
			КешКодовМаркировки.Удалить(КодМаркировки);
		Иначе
			ВызватьИсключение
				СтрШаблон(
					НСтр("ru = 'В процессе построения дерева упаковок произошла внутренняя ошибка при обработке кода маркировки %1'"),
					КодМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Преобразовывает текстовое представление типа документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска      - ПеречислениеСсылка.ВидыОперацийИСМП, Строка - значение для перекодировки.
//	ВидПродукции        - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
//	ОбъемноСортовойУчет - Булево - Признак объемно-сортового учета.
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийИСМП, Строка - Тип документа.
Функция ВидОперации(Знач ЗначениеПоиска, ВидПродукции = Неопределено, ОбъемноСортовойУчет = Ложь) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "LP_INTRODUCE_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ;
		ИначеЕсли ЗначениеПоиска = "LP_GOODS_IMPORT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС;
		ИначеЕсли ЗначениеПоиска = "LP_FTS_INTRODUCE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
		ИначеЕсли ЗначениеПоиска = "FURS_FTS_INTRODUCE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех;
		ИначеЕсли ЗначениеПоиска = "LK_CONTRACT_COMMISSIONING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору;
		ИначеЕсли ЗначениеПоиска = "LK_INDI_COMMISSIONING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц;
		ИначеЕсли ЗначениеПоиска = "LP_INTRODUCE_OST" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков;
		ИначеЕсли ЗначениеПоиска = "CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля;
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_GOODS_CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "EAS_CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "EAS_GTIN_CROSSBORDER_ACCEPTANCE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_RECEIPT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_CANCEL_SHIPMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_CANCEL_SHIPMENT_CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_ACCEPT_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LK_REMARK" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.Перемаркировка;
		ИначеЕсли ЗначениеПоиска = "LK_KM_CANCELLATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки;
		ИначеЕсли ЗначениеПоиска = "LK_APPLIED_KM_CANCELLATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки;
		ИначеЕсли ЗначениеПоиска = "AGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		ИначеЕсли ЗначениеПоиска = "SETS_AGGREGATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора;
		ИначеЕсли ЗначениеПоиска = "DISAGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияУдаление;
		ИначеЕсли ЗначениеПоиска = "REAGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		ИначеЕсли ЗначениеПоиска = "OST_DESCRIPTION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки;
		ИначеЕсли ЗначениеПоиска = "LP_RETURN" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи;
		ИначеЕсли ЗначениеПоиска = "ATK_AGGREGATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АТКСоздание;
		ИначеЕсли ЗначениеПоиска = "ATK_TRANSFORMATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АТКИзменение;
		ИначеЕсли ЗначениеПоиска = "ATK_DISAGGREGATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АТКУдаление;
		ИначеЕсли ЗначениеПоиска = "LK_GTIN_RECEIPT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборота;
		ИначеЕсли ЗначениеПоиска = "LK_GTIN_RECEIPT_CANCEL" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование;
		ИначеЕсли ЗначениеПоиска = "LK_INDIVIDUALIZATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ;
		ИначеЕсли ЗначениеПоиска = "CIRCULATION_INFORMATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот;
		ИначеЕсли ЗначениеПоиска = "CIRCULATION_INFORMATION_2" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот;
		ИначеЕсли ЗначениеПоиска = "REPORT_REWEIGHING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании;
		ИначеЕсли ЗначениеПоиска = "CIS_INFORMATION_CHANGE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ;
		ИначеЕсли ЗначениеПоиска = "CONNECT_TAP" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки;
		ИначеЕсли ЗначениеПоиска = "WRITE_OFF" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда
			Возврат "LP_INTRODUCE_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			Возврат "LP_GOODS_IMPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
			Возврат "LP_FTS_INTRODUCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех Тогда
			Возврат "FURS_FTS_INTRODUCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			Возврат "LK_CONTRACT_COMMISSIONING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
			Возврат "LK_INDI_COMMISSIONING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			Возврат "LP_INTRODUCE_OST";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
			Возврат "CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
			Возврат "LK_INDIVIDUALIZATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент Тогда
			Возврат "LP_SHIP_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием Тогда
			Возврат "LP_SHIP_RECEIPT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
			Возврат "EAS_CROSSBORDER_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
			Возврат "EAS_GTIN_CROSSBORDER_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаТрансграничнаяТорговля Тогда
			Возврат "LP_SHIP_GOODS_CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование Тогда
			Возврат "LP_CANCEL_SHIPMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаТрансграничнаяТорговляАннулирование Тогда
			Возврат "LP_CANCEL_SHIPMENT_CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен // ОСУ
			И ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ Тогда
			Возврат "EAS_GTIN_CROSSBORDER_ACCEPTANCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаАгент
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ Тогда
			Возврат "LP_ACCEPT_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.Перемаркировка Тогда
			Возврат "LK_REMARK";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
			Возврат "LK_KM_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки Тогда
			Возврат "LK_APPLIED_KM_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание Тогда
			Возврат "AGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора Тогда
			Возврат "SETS_AGGREGATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			Возврат "DISAGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение Тогда
			Возврат "REAGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
			Возврат "OST_DESCRIPTION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			Возврат "LP_INTRODUCE_OST";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ Тогда
			Если ОбъемноСортовойУчет Тогда
				Возврат "LK_GTIN_RECEIPT";
			Иначе
				Возврат "LK_RECEIPT";
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование Тогда
			Возврат "LK_GTIN_RECEIPT_CANCEL";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляСобственныхНужд
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляПроизводственныхЦелей
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриПродажеЧерезВендинговыйАппарат Тогда
			Возврат "LP_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
			Возврат "ATK_AGGREGATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АТКИзменение Тогда
			Возврат "ATK_TRANSFORMATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
			Возврат "ATK_DISAGGREGATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот Тогда
			Возврат "CIRCULATION_INFORMATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот Тогда
			Возврат "CIRCULATION_INFORMATION_2";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
			Возврат "REPORT_REWEIGHING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес Тогда
			Возврат "CIS_INFORMATION_CHANGE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки Тогда
			Возврат "CONNECT_TAP";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки Тогда
			Возврат  "WRITE_OFF";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид операции: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Перекодирует вид вывода из оборота ИС МП.
//
// Параметры:
//  ЗначениеПоиска      - ПеречислениеСсылка.ВидыОперацийИСМП - Значение для перекодировки.
//  ВидПродукции        - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыОперацийИСМП - Результат перекодирования.
Функция ПричинаВыводаИзОборота(Знач ЗначениеПоиска, ВидПродукции = Неопределено) Экспорт

	Если ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа Тогда
		Возврат "RETAIL";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС Тогда
		Возврат "EAS_TRADE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС Тогда
		Возврат "BEYOND_EEC_EXPORT";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу Тогда
		Возврат "RETURN";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара Тогда
		Возврат "LOSS";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара Тогда
		Возврат "DESTRUCTION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара Тогда
		Возврат "CONFISCATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия Тогда
		Возврат "LIQUIDATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия Тогда
		Возврат "OWN_USE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
		Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа Тогда
		Возврат "DISTANCE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам Тогда
		Возврат "BY_SAMPLES";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак Тогда
		Возврат "0. Брак";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности Тогда
		Возврат "EXPIRATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы Тогда
		Возврат "2. Лабораторные образцы";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка Тогда
		Возврат "RECALL";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации Тогда
		Возврат "4. Рекламации";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта Тогда
		Возврат "5. Тестирование продукта";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое
		Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины Тогда
		Возврат "OTHER";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну Тогда
		Возврат "STATE_SECRET";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей Тогда
		Возврат "PRODUCTION_USE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара Тогда
		Возврат "UTILIZATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту Тогда
		Возврат "STATE_CONTRACT";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка Тогда
		Возврат "PACKING";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат Тогда
		Возврат "VENDING";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача Тогда
		Возврат "DONATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику Тогда
		Возврат "TRANSFER_UNREGISTERED";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения Тогда
		Возврат "MEDICAL_USE";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ Тогда
		Возврат "BALANCE_CORRECTION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения Тогда
		Возврат "VETERINARY_USE";
	
	ИначеЕсли ЗначениеПоиска = "RETAIL" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа;
	ИначеЕсли ЗначениеПоиска = "EEC_EXPORT" Или ЗначениеПоиска = "EAS_TRADE" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС;
	ИначеЕсли ЗначениеПоиска = "BEYOND_EEC_EXPORT" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС;
	ИначеЕсли ЗначениеПоиска = "RETURN" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу;
	ИначеЕсли ЗначениеПоиска = "DAMAGE_LOSS" Или ЗначениеПоиска = "LOSS" Или ЗначениеПоиска = "9. Недостача" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара;
	ИначеЕсли ЗначениеПоиска = "DESTRUCTION" Или ЗначениеПоиска = "16. Уничтожение" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара;
	ИначеЕсли ЗначениеПоиска = "CONFISCATION" Или ЗначениеПоиска = "17. Конфискация" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара;
	ИначеЕсли ЗначениеПоиска = "LIQUIDATION"  Или ЗначениеПоиска = "18. Ликвидация предприятия" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия;
	ИначеЕсли ЗначениеПоиска = "ENTERPRISE_USE" Или ЗначениеПоиска = "OWN_USE" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия;
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
		И (ЗначениеПоиска = "BY_SAMPLES" Или ЗначениеПоиска = "REMOTE_SALE" Или ЗначениеПоиска = "DISTANCE"
		Или ЗначениеПоиска = "6. Демонстрационные образцы") Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам;
	ИначеЕсли ЗначениеПоиска = "REMOTE_SALE" Или ЗначениеПоиска = "DISTANCE" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа;
	ИначеЕсли ЗначениеПоиска = "0. Брак" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак;
	ИначеЕсли ЗначениеПоиска = "1. Истек срок годности" Или ЗначениеПоиска = "EXPIRATION" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности;
	ИначеЕсли ЗначениеПоиска = "2. Лабораторные образцы" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы;
	ИначеЕсли ЗначениеПоиска = "3. Отзыв с рынка" Или ЗначениеПоиска = "RECALL" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка;
	ИначеЕсли ЗначениеПоиска = "4. Рекламации" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации;
	ИначеЕсли ЗначениеПоиска = "5. Тестирование продукта" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта;
	ИначеЕсли ЗначениеПоиска = "7. Другие причины" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины;
	ИначеЕсли ЗначениеПоиска = "OTHER" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое;
	ИначеЕсли ЗначениеПоиска = "STATE_SECRET" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну;
	ИначеЕсли ЗначениеПоиска = "PRODUCTION_USE" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей;
	ИначеЕсли ЗначениеПоиска = "UTILIZATION" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара;
	ИначеЕсли ЗначениеПоиска = "STATE_CONTRACT" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту;
	ИначеЕсли ЗначениеПоиска = "PACKING" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка;
	ИначеЕсли ЗначениеПоиска = "VENDING" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат;
	ИначеЕсли ЗначениеПоиска = "DONATION" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача;
	ИначеЕсли ЗначениеПоиска = "TRANSFER_UNREGISTERED" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику;
	ИначеЕсли ЗначениеПоиска = "MEDICAL_USE" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения;
	ИначеЕсли ЗначениеПоиска = "BALANCE_CORRECTION" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ;
	ИначеЕсли ЗначениеПоиска = "VETERINARY_USE" Тогда
		Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид вывода из оборота: %1'"),
			ЗначениеПоиска);

КонецФункции

// Перекодирует причину списания ИС МП.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ПричиныСписанияКодовМаркировкиИСМП, Строка - Значение для перекодировки.
//  ВидПродукции   - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ВидыОперацийИСМП - Результат перекодирования.
Функция ПричинаВыводаИзОборотаПоПричинеСписания(Знач ЗначениеПоиска, ВидПродукции = Неопределено) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен Тогда
		Возврат "0. Брак";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Прочее Тогда
		Возврат "7. Другие причины";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ДемонстрационныеОбразцы Тогда
		Возврат "6. Демонстрационные образцы";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ИстечениеСрока Тогда
		Возврат "1. Истёк срок годности";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.КонфискацияТоваров Тогда
		Возврат "17. Конфискация";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ЛабораторныеОбразцы Тогда
		Возврат "2. Лабораторные образцы";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ЛиквидацияПредприятия Тогда
		Возврат "18. Ликвидация предприятия";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ОтзывСРынка Тогда
		Возврат "3. Отзыв с рынка";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Рекламации Тогда
		Возврат "4. Рекламации";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ТестированиеПродукта Тогда
		Возврат "5. Тестирование продукта";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Уничтожен Тогда
		Возврат "16. Уничтожение";
	ИначеЕсли ЗначениеПоиска = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Утерян Тогда
		Возврат "9. Недостача";


	ИначеЕсли ЗначениеПоиска = "0. Брак" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен;
	ИначеЕсли ЗначениеПоиска = "7. Другие причины" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Прочее;
	ИначеЕсли ЗначениеПоиска = "6. Демонстрационные образцы" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ДемонстрационныеОбразцы;
	ИначеЕсли ЗначениеПоиска = "1. Истёк срок годности" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ИстечениеСрока;
	ИначеЕсли ЗначениеПоиска = "17. Конфискация" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.КонфискацияТоваров;
	ИначеЕсли ЗначениеПоиска = "2. Лабораторные образцы" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ЛабораторныеОбразцы;
	ИначеЕсли ЗначениеПоиска = "18. Ликвидация предприятия" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ЛиквидацияПредприятия;
	ИначеЕсли ЗначениеПоиска = "3. Отзыв с рынка" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ОтзывСРынка;
	ИначеЕсли ЗначениеПоиска = "4. Рекламации" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Рекламации;
	ИначеЕсли ЗначениеПоиска = "5. Тестирование продукта" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.ТестированиеПродукта;
	ИначеЕсли ЗначениеПоиска = "16. Уничтожение" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Уничтожен;
	ИначеЕсли ЗначениеПоиска = "9. Недостача" Тогда
		Возврат Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Утерян;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестная причина списания: %1'"),
			ЗначениеПоиска);
			
КонецФункции

Процедура ЗаполнитьСтатусБезВыполненияЗапроса(ИсходнаяСтрока, СтатусыКодовМаркировки) Экспорт

	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ИсходнаяСтрока.ВидПродукции) Тогда
		ПараметрыКодаМаркировки = ИнтерфейсИСМПОбщегоНазначения.ПараметрыКодаМаркировкиМОТП();
		ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
	Иначе
		ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировки();
		ПараметрыКодаМаркировки.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
	КонецЕсли;

	СтатусыКодовМаркировки[ИсходнаяСтрока] = ПараметрыКодаМаркировки;

КонецПроцедуры

#КонецОбласти
