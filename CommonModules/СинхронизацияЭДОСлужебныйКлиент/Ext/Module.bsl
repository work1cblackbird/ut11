
#Область СлужебныеПроцедурыИФункции

#Область ОбработкаНеисправностей

Процедура ПоказатьДействияПриНаличииНеполученныхДокументовИПриглашений(КонтекстДиагностики, Команды) Экспорт
	
	Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	УчетныеЗаписи = Новый Массив;
	СоответствиеОшибокДанным = Новый Соответствие;
	Для каждого Ошибка Из Ошибки Цикл
		УчетныеЗаписи.Добавить(Ошибка.УчетнаяЗапись);
		СоответствиеОшибокДанным.Вставить(Ошибка.УчетнаяЗапись, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ошибка));
	КонецЦикла;
	ПараметрыИсправленияОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыИсправленияОшибок();
	
	Для каждого Команда Из Команды Цикл
		ПараметрыИсправленияОшибок.Команды.Добавить(Команда);
	КонецЦикла;
	
	ПараметрыИсправленияОшибок.МножественныйВыбор = Истина;
	
	ДополнительныеПараметрыОбработчиков = Новый Структура;
	ДополнительныеПараметрыОбработчиков.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	ДополнительныеПараметрыОбработчиков.Вставить("СоответствиеОшибокДанным", СоответствиеОшибокДанным);
	ПараметрыИсправленияОшибок.ДополнительныеПараметрыОбработчиков = ДополнительныеПараметрыОбработчиков;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", УчетныеЗаписи);
	Параметры.Вставить("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	
	ПараметрыПредставленияДанных = Новый Структура;
	ПараметрыПредставленияДанных.Вставить("ОбработчикПолученияПредставлений",
		"СинхронизацияЭДО.ПредставленияУчетныхЗаписейДляУстраненияОшибок");
	
	ОбработкаНеисправностейБЭДКлиент.ИсправитьОшибки(УчетныеЗаписи, ПараметрыИсправленияОшибок,
		ПараметрыПредставленияДанных);
	
КонецПроцедуры

#КонецОбласти

// Возвращает ссылку на раздел инструкции http://1c-edo.ru/handbook/
// "Особенности настройки обмена ЭД из решений, работающих в клиент-серверном режиме".
// 
// Возвращаемое значение:
// 	Строка
Функция СсылкаНаИнструкциюПоНастройкеЭлектронногоДокументооборота() Экспорт
	
	Возврат "http://1c-edo.ru/handbook/28/2522/";
	
КонецФункции

Функция НовыйРезультатАвторизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КлючиСинхронизации", СинхронизацияЭДОКлиентСервер.НовыеКлючиСинхронизации());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Результат.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	Результат.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСОперациямиЭДО

#Область Выполнение

Функция НовыйПроцессВыполненияОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения) Экспорт
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО"                 , ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения"         , ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("ОбработкаПрогрессаВыполнения", ОбработкаПрогрессаВыполнения);
	ПроцессВыполнения.Вставить("РезультатПроверки");
	ПроцессВыполнения.Вставить("ЗапросПродолжения");
	ПроцессВыполнения.Вставить("РезультатВыполнения");
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ВыполнитьОперациюЭДО(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	// Определение выполняемой операции.
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если Не ЗначениеЗаполнено(ОперацияЭДО) Тогда
		ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	// Проверка параметров операции.
	РезультатПроверки = ПроцессВыполнения.РезультатПроверки;
	Если РезультатПроверки = Неопределено Тогда
		РезультатПроверки = РезультатПроверкиОперацииЭДО(ОперацияЭДО);
		ПроцессВыполнения.РезультатПроверки = РезультатПроверки;
	КонецЕсли;
	
	// Запрос подтверждения выполнения.
	ЗапросПродолжения = ПроцессВыполнения.ЗапросПродолжения;
	Если ЗапросПродолжения = Неопределено Тогда
		ПроцессВыполнения.ТекущийЭтап = "ЗапросПродолжения";
		ЭтотМетод = Новый ОписаниеОповещения("ВыполнитьОперациюЭДО", ЭтотОбъект, ПроцессВыполнения);
		ПоказатьЗапросПродолженияОперацииЭДО(ОперацияЭДО, РезультатПроверки, ЭтотМетод);
		Возврат;
	ИначеЕсли ТипЗнч(ЗапросПродолжения) = Тип("Структура") Тогда
		Если ЗапросПродолжения.Действие = "Повторить" Тогда
			СинхронизацияЭДОКлиент.НачатьВыполнениеОперацииЭДО(ЗапросПродолжения.ОперацияЭДО, ПроцессВыполнения.ОбработкаЗавершения);
			Возврат;
		ИначеЕсли ЗапросПродолжения.Действие = "Прервать" Тогда
			ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
			Возврат;
		КонецЕсли;
	Иначе
		ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	// Запуск выполнения операции.
	РезультатВыполнения = ПроцессВыполнения.РезультатВыполнения;
	Если РезультатВыполнения = Неопределено Тогда
		ПроцессВыполнения.ТекущийЭтап = "РезультатВыполнения";
		ЭтотМетод = Новый ОписаниеОповещения("ВыполнитьОперациюЭДО", ЭтотОбъект, ПроцессВыполнения);
		ЗапуститьВыполнениеОперацииЭДО(ОперацияЭДО, ЭтотМетод, ПроцессВыполнения.ОбработкаПрогрессаВыполнения);
		Возврат;
	КонецЕсли;
	
	ЗавершитьВыполнениеОперацииЭДО(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеОперацииЭДО(Знач ПроцессВыполнения)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОперацияЭДО", ПроцессВыполнения.ОперацияЭДО);
	
	РезультатВыполнения = ПроцессВыполнения.РезультатВыполнения;
	Если РезультатВыполнения <> Неопределено Тогда
		Результат.Выполнено = РезультатВыполнения.Выполнено;
		Результат.ОперацияЭДО = РезультатВыполнения.ОперацияЭДО;
	КонецЕсли;
	
	ОперацияПодключенияЭДО = СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
	Если ЗначениеЗаполнено(Результат.ОперацияЭДО) И Результат.ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		Результат.ОперацияЭДО.СлужебныеПараметры.ПаролиСертификатов = ОперацияПодключенияЭДО.СлужебныеПараметры.ПаролиСертификатов;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

Процедура ЗапуститьВыполнениеОперацииЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	ОперацияПодключенияЭДО = СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = СинхронизацияЭДОКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		НачатьПодключениеЭДО(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
		
	ИначеЕсли ОперацияЭДО.Действие = ОперацияОбновленияСертификата.Действие Тогда
		
		НачатьОбновлениеСертификата(ОперацияЭДО, ОбработкаПродолжения);
		
	Иначе
		
		Результат = Новый Структура("Выполнено,ОперацияЭДО", Ложь, ОперацияЭДО);
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проверка

Функция РезультатПроверкиОперацииЭДО(Знач ОперацияЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	ОперацияПодключенияЭДО = СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = СинхронизацияЭДОКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		Результат = РезультатПроверкиОперацииПодключенияЭДО(ОперацияЭДО);
		
	ИначеЕсли ОперацияЭДО.Действие = ОперацияОбновленияСертификата.Действие Тогда
		
		Результат = РезультатПроверкиОперацииОбновленияСертификата(ОперацияЭДО);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверкиОперацииПодключенияЭДО(Знач ОперацияЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	Параметры = ОперацияЭДО.Параметры;
	
	ВключеноРазделениеДанных = Неопределено;
	ОперацияЭДО.СлужебныеПараметры.Свойство("ВключеноРазделениеДанных", ВключеноРазделениеДанных);
		
	Если ВключеноРазделениеДанных <> Истина Тогда
		Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнена организация.'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Параметры.АдресОрганизации) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен адрес организации.'"));
		КонецЕсли;
		Если Параметры.СпособОбменаЭД <> ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
			И Не ЗначениеЗаполнено(Параметры.КодНалоговогоОргана) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен код налогового органа.'"));
		КонецЕсли;
		Если Параметры.УведомлятьОСобытиях И Не ЗначениеЗаполнено(Параметры.ЭлектроннаяПочтаДляУведомлений) Тогда
			Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнена электронная почта для уведомлений.'"));
		КонецЕсли;
	КонецЕсли;

	Если Не Параметры.ПринятыУсловияИспользования Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не приняты условия использования.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Сертификат) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен сертификат криптографии.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.ОператорЭДО) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен оператор ЭДО.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.СпособОбменаЭД) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен способ обмена.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПроверкиОперацииОбновленияСертификата(Знач ОперацияЭДО)
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	
	Параметры = ОперацияЭДО.Параметры;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнена организация.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.Сертификат) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен обновляемый сертификат криптографии.'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.НовыйСертификат) Тогда
		Результат.Ошибки.Добавить(НСтр("ru = 'Не заполнен новый сертификат криптографии.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПоказатьЗапросПродолженияОперацииЭДО(Знач ОперацияЭДО, Знач РезультатПроверки, Знач ОбработкаПродолжения)
	
	// Если ошибок при проверке не было, то продолжаем безусловно.
	Если Не ЗначениеЗаполнено(РезультатПроверки.Ошибки) Тогда
		Результат = Новый Структура("Действие, ОперацияЭДО", "Продолжить", Неопределено);
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
		Возврат;
	КонецЕсли;
	
	ОперацияПодключенияЭДО = СинхронизацияЭДОКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = СинхронизацияЭДОКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если ОперацияЭДО.Действие = ОперацияПодключенияЭДО.Действие Тогда
		
		Если ОперацияЭДО.СлужебныеПараметры.Свойство("ПоказатьЗапросПродолжения")
			И НЕ ОперацияЭДО.СлужебныеПараметры.ПоказатьЗапросПродолжения Тогда
			
			Для Каждого ЭлементКоллекции Из РезультатПроверки.Ошибки Цикл
				Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(
					НСтр("ru='Проверка заполнения данных при регистрации ЭДО.'"),
					ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(),
					ЭлементКоллекции, ЭлементКоллекции);
				ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(ОперацияЭДО.СлужебныеПараметры.КонтекстДиагностики,
					Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			КонецЦикла;
			
			Результат = Новый Структура("Действие, ОперацияЭДО", "Прервать", Неопределено);
			ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);

		Иначе
			ПоказатьЗапросПродолженияПодключенияЭДО(ОперацияЭДО, РезультатПроверки, ОбработкаПродолжения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ОперацияЭДО.Действие = ОперацияОбновленияСертификата.Действие Тогда
		
		ПоказатьЗапросПродолженияОбновленияСертификата(ОперацияЭДО, РезультатПроверки, ОбработкаПродолжения);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьЗапросПродолженияОбновленияСертификата(Знач ОперацияЭДО, Знач РезультатПроверки, Знач ОбработкаПродолжения)
	
	Текст = НСтр("ru = 'Выполнение операции невозможно по причине:'") + Символы.ПС
		+ СтрСоединить(РезультатПроверки.Ошибки, Символы.ПС);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбработатьЗапросПродолженияОбновленияСертификата", ЭтотОбъект, ОбработкаПродолжения);
	
	ПоказатьПредупреждение(ОбработкаЗавершения, Текст);
	
КонецПроцедуры

Процедура ОбработатьЗапросПродолженияОбновленияСертификата(ОбработкаПродолжения) Экспорт
	
	Результат = Новый Структура("Действие,ОперацияЭДО", "Прервать", Неопределено);
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

Процедура ПоказатьЗапросПродолженияПодключенияЭДО(Знач ОперацияЭДО, Знач РезультатПроверки, Знач ОбработкаПродолжения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОперацияЭДО", ОперацияЭДО);
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработкаВопросаОбУточненииНастроекПодключенияЭДО", ЭтотОбъект, Контекст);
	
	Текст = НСтр("ru = 'Выполнение операции невозможно по причине:'") + Символы.ПС
		+ СтрСоединить(РезультатПроверки.Ошибки, Символы.ПС);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Уточнить настройки'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопрос(ОбработкаОтвета, Текст, Кнопки,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ОбработкаВопросаОбУточненииНастроекПодключенияЭДО(Знач Ответ, Знач Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Результат = Новый Структура("Действие,ОперацияЭДО", "Прервать", Неопределено);
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, Результат);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыУточненияНастроекПодключенияЭДО", ЭтотОбъект, Контекст.ОбработкаПродолжения);
	
	СинхронизацияЭДОКлиент.ОткрытьФормуНастройкиОперацииЭДО(Контекст.ОперацияЭДО, ОбработкаЗакрытия);
	
КонецПроцедуры

Процедура ЗакрытиеФормыУточненияНастроекПодключенияЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения) Экспорт
	
	Результат = Новый Структура("Действие,ОперацияЭДО", "Прервать", Неопределено);
	
	Если ЗначениеЗаполнено(ОперацияЭДО) Тогда
		Результат = Новый Структура("Действие,ОперацияЭДО", "Повторить", ОперацияЭДО);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеЭДО

Процедура НачатьПодключениеЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	СпособОбменаЭД = ОперацияЭДО.Параметры.СпособОбменаЭД;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		НачатьПодключениеЭДО_1СЭДО(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
		
	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		НачатьПодключениеЭДО_Такском(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
		
	Иначе
		
		Результат = Новый Структура("Выполнено,ОперацияЭДО", Ложь, ОперацияЭДО);
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьУчетнуюЗапись(ОперацияЭДО)
	
	ОписаниеУчетнойЗаписи = УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи();
	ОписаниеУчетнойЗаписи.Организация                 = ОперацияЭДО.Параметры.Организация;
	ОписаниеУчетнойЗаписи.АдресОрганизации            = ОперацияЭДО.Параметры.АдресОрганизации;
	ОписаниеУчетнойЗаписи.КодНалоговогоОргана         = ОперацияЭДО.Параметры.КодНалоговогоОргана;
	ОписаниеУчетнойЗаписи.СпособОбмена                = ОперацияЭДО.Параметры.СпособОбменаЭД;
	ОписаниеУчетнойЗаписи.Оператор                    = ОперацияЭДО.Параметры.ОператорЭДО;
	ОписаниеУчетнойЗаписи.Идентификатор               = ОперацияЭДО.Результат.ИдентификаторЭДО;
	ОписаниеУчетнойЗаписи.Наименование                = ОперацияЭДО.Параметры.НаименованиеУчетнойЗаписи;
	ОписаниеУчетнойЗаписи.Назначение                  = ОперацияЭДО.Параметры.НазначениеУчетнойЗаписи;
	ОписаниеУчетнойЗаписи.ПодробноеОписание           = ОперацияЭДО.Параметры.ОписаниеУчетнойЗаписи;
	ОписаниеУчетнойЗаписи.Сертификат                  = ОперацияЭДО.Параметры.Сертификат;
	ОписаниеУчетнойЗаписи.ПринятыУсловияИспользования = ОперацияЭДО.Параметры.ПринятыУсловияИспользования;
	
	ПараметрыУведомлений = ОписаниеУчетнойЗаписи.ПараметрыУведомлений;
	ПараметрыУведомлений.АдресУведомлений                              = ОперацияЭДО.Параметры.ЭлектроннаяПочтаДляУведомлений;
	ПараметрыУведомлений.УведомлятьОНовыхПриглашениях                  = ОперацияЭДО.Параметры.УведомлятьОНовыхПриглашениях;
	ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения              = ОперацияЭДО.Параметры.УведомлятьОбОтветахНаПриглашения;
	ПараметрыУведомлений.УведомлятьОНовыхДокументах                    = ОперацияЭДО.Параметры.УведомлятьОНовыхДокументах;
	ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах           = ОперацияЭДО.Параметры.УведомлятьОНеОбработанныхДокументах;
	ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата = ОперацияЭДО.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата;
	
	Возврат СинхронизацияЭДОВызовСервера.СоздатьУчетнуюЗапись(ОписаниеУчетнойЗаписи);
	
КонецФункции

// Обновление данных абонента в сервисе настроек.

Процедура НачатьОбновлениеДанныхАбонентаВСервисеЭДО(Знач Параметры, Знач ОбработкаПродолжения)
	
	ДлительнаяОперация = СервисНастроекЭДОВызовСервера.НачатьОтправкуДанныхАбонентаВСервисНастроек(
		Параметры.ИдентификаторЭДО, Новый УникальныйИдентификатор);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОбновлениеДанныхАбонентаВСервисеЭДО",
		ЭтотОбъект, ОбработкаПродолжения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗакончитьОбновлениеДанныхАбонентаВСервисеЭДО(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("Выполнено", Ложь);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Статус = "Выполнено" Тогда
			РезультатОбновления.Выполнено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатОбновления);
	
КонецПроцедуры

#Область ПодключениеЭДО_Интерактивно

Процедура НачатьИнтерактивноеПодключениеЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьИнтерактивноеПодключениеЭДО", ЭтотОбъект, ОбработкаПродолжения);
	
	ПараметрыСоздания = УчетныеЗаписиЭДОКлиент.НовыеПараметрыСозданияУчетнойЗаписи();
	ПараметрыСоздания.Организация = ОперацияЭДО.Параметры.Организация;
	ПараметрыСоздания.ОперацияЭДО = ОперацияЭДО;
	ПараметрыСоздания.РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ПараметрыСоздания.ОповещениеОЗавершении = ОбработкаЗавершения;
	УчетныеЗаписиЭДОКлиент.СоздатьУчетнуюЗапись(ПараметрыСоздания);
	
КонецПроцедуры

Процедура ЗакончитьИнтерактивноеПодключениеЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения) Экспорт
	
	ОперацияВыполнена = (ОперацияЭДО = Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеЭДО_1СЭДО

Процедура НачатьПодключениеЭДО_1СЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = НовыйПроцессВыполненияПодключениеЭДО_1СЭДО(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
	
	ВыполнитьПодключениеЭДО_1СЭДО(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

// Новый процесс выполнения подключение ЭДО 1 СЭДО.
// 
// Параметры:
//  ОперацияЭДО - См. ИнтеграцияБРОЭДОСлужебный.ОперацияЭДОИзСтроки
//  ОбработкаЗавершения - ОписаниеОповещения - Обработка завершения
//  ОбработкаПрогрессаВыполнения - ОписаниеОповещения -Обработка прогресса выполнения
// 
// Возвращаемое значение:
//  Структура - Новый процесс выполнения подключение ЭДО 1 СЭДО:
// * ТекущийЭтап - Строка
// * ОперацияЭДО - См. ИнтеграцияБРОЭДОСлужебный.ОперацияЭДОИзСтроки
// * ОбработкаЗавершения - ОписаниеОповещения - 
// * ОбработкаПрогрессаВыполнения - Неопределено,ОписаниеОповещения -
// * ОтправкаЗаявки - Структура:
//  **НомерЗаявки - Строка -
//  **Выполнено - Булево -
// * ОжиданиеПодключения - Произвольный - результат 
// * ПроверкаСвязи - Произвольный
// * СозданиеУчетнойЗаписи - Произвольный
// * ОбновлениеПараметровУведомлений - Произвольный
// * ОбновлениеДанныхАбонента - Произвольный
// * Ошибка - Произвольный
Функция НовыйПроцессВыполненияПодключениеЭДО_1СЭДО(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО", ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("ОбработкаПрогрессаВыполнения", ОбработкаПрогрессаВыполнения);
	ПроцессВыполнения.Вставить("ОтправкаЗаявки");
	ПроцессВыполнения.Вставить("ОжиданиеПодключения");
	ПроцессВыполнения.Вставить("ПроверкаСвязи");
	ПроцессВыполнения.Вставить("СозданиеУчетнойЗаписи");
	ПроцессВыполнения.Вставить("ОбновлениеПараметровУведомлений");
	ПроцессВыполнения.Вставить("ОбновлениеДанныхАбонента");
	ПроцессВыполнения.Вставить("Ошибка");
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения, Знач Показать = Истина)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если ЗначениеЗаполнено(ОперацияЭДО)
		И ОперацияЭДО.Свойство("СлужебныеПараметры")
		И ОперацияЭДО.СлужебныеПараметры.Свойство("ОткрыватьФормуДлительнойОперации")
		И НЕ ОперацияЭДО.СлужебныеПараметры.ОткрыватьФормуДлительнойОперации Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Подключение ЭДО'");
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите.'");
	Если ПроцессВыполнения.ОтправкаЗаявки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отправка заявки.'");
	ИначеЕсли ПроцессВыполнения.ОжиданиеПодключения = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ожидание обработки заявки.'");
	ИначеЕсли ПроцессВыполнения.ПроверкаСвязи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Проверка связи с оператором ЭДО.'");
	ИначеЕсли ПроцессВыполнения.СозданиеУчетнойЗаписи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Создание учетной записи ЭДО.'");
	ИначеЕсли ПроцессВыполнения.ОбновлениеПараметровУведомлений = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Обновление настроек уведомления.'");
	ИначеЕсли ПроцессВыполнения.ОбновлениеДанныхАбонента = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Обновление данных об абоненте.'");
	КонецЕсли;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	ПараметрыОжидания.Заголовок = Заголовок;
	
	Если ОперацияВыполнена Тогда
		ТекстСообщения = НСтр("ru = 'Подключение ЭДО завершено.'");
		ПараметрыОжидания.ОперацияЗавершена = Истина;
	КонецЕсли;
	
	ПараметрыОжидания.ТекстСообщения = ТекстСообщения;
	
	КонтекстОжидания = Неопределено;
	ПроцессВыполнения.Свойство("КонтекстОжидания", КонтекстОжидания);
	
	Если КонтекстОжидания = Неопределено Тогда
		Если Показать Тогда
			КонтекстОжидания = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
			ПроцессВыполнения.Вставить("КонтекстОжидания", КонтекстОжидания);
			ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжидания);
		КонецЕсли;
	Иначе
		Если Показать Тогда
			ОжиданиеОперацийБЭДКлиент.ОбновитьПрогресс(ПараметрыОжидания, КонтекстОжидания);
		Иначе
			ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(КонтекстОжидания);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выполнить подключение ЭДО 1С ЭДО.
// 
// Параметры:
//  РезультатТекущегоЭтапа - Структура -см. НовыйРезультатДлительнойОперации
//               - Неопределено - если задание было отменено
//  ПроцессВыполнения - см. НовыйПроцессВыполненияПодключениеЭДО_1СЭДО
Процедура ВыполнитьПодключениеЭДО_1СЭДО(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда

		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
		
		Если РезультатТекущегоЭтапа <> Неопределено
			И НЕ РезультатТекущегоЭтапа.Выполнено
			И РезультатТекущегоЭтапа.Свойство("КонтекстДиагностики")
			И ПроцессВыполнения.ОперацияЭДО.Свойство("СлужебныеПараметры")
			И ПроцессВыполнения.ОперацияЭДО.СлужебныеПараметры.Свойство("КонтекстДиагностики") Тогда
			ПроцессВыполнения.ОперацияЭДО.СлужебныеПараметры.КонтекстДиагностики = РезультатТекущегоЭтапа.КонтекстДиагностики;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения);
	Если Не ЗначениеЗаполнено(ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки) Тогда
		ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки = 
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("АктивныйНомерЗаявкиНаПодключение", "НомерЗаявки");
		Если Не ЗначениеЗаполнено(ПроцессВыполнения.ОтправкаЗаявки) 
			И ЗначениеЗаполнено(ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки) Тогда
			ПроцессВыполнения.ОтправкаЗаявки = Новый Структура;
			ПроцессВыполнения.Вставить("НомерЗаявки", ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки);
			ПроцессВыполнения.Вставить("Выполнено", Истина);
		КонецЕсли;
	КонецЕсли;
	Выполнено = ЗначениеЗаполнено(ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки) 
			Или ВыполнитьПодключениеЭДО_1СЭДО_ОтправкаЗаявкиНаПодключение(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	Отменено = ПроверитьПрогрессВыполненияПодключения(ПроцессВыполнения.ОбработкаПрогрессаВыполнения);
	Если Отменено Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	ПрогрессПодключенияВыполнен = ЗначениеЗаполнено(ПроцессВыполнения.ОжиданиеПодключения) И ПроцессВыполнения.ОжиданиеПодключения.Выполнено;
	
	Если ПрогрессПодключенияВыполнен Тогда
		ПроцессВыполнения.ОперацияЭДО.Результат.ИдентификаторЭДО = ПроцессВыполнения.ОжиданиеПодключения.ИдентификаторЭДО;
	КонецЕсли;
	
	Выполнено = ПрогрессПодключенияВыполнен 
			Или ВыполнитьПодключениеЭДО_1СЭДО_ОжиданиеОбработкиЗаявкиНаПодключение(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_СозданиеУчетнойЗаписи(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения);
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеПараметровУведомлений(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеДанныхАбонента(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьПодключениеЭДО_1СЭДО(Знач ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	Если Не ЗначениеЗаполнено(ОперацияЭДО.Результат.ИдентификаторЭДО) Тогда
		Если ЗначениеЗаполнено(ПроцессВыполнения.Ошибка) Тогда
			ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения, Ложь);
			
			ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
			Если НЕ (ЗначениеЗаполнено(ОперацияЭДО)
				И ОперацияЭДО.Свойство("СлужебныеПараметры")
				И ОперацияЭДО.СлужебныеПараметры.Свойство("ОткрыватьФормуДлительнойОперации")
				И НЕ ОперацияЭДО.СлужебныеПараметры.ОткрыватьФормуДлительнойОперации) Тогда
				
				НачатьИнтерактивноеПодключениеЭДО(ОперацияЭДО, ПроцессВыполнения.ОбработкаЗавершения);
				ТекстСообщения = НСтр("ru = 'При необходимости исправьте ошибки и нажмите кнопку ""Подключить""'") + Символы.ПС
					+ ПроцессВыполнения.Ошибка;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
				
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_1СЭДО(ПроцессВыполнения, ОперацияВыполнена);
	
	Если ОперацияВыполнена Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("АктивныйНомерЗаявкиНаПодключение", "НомерЗаявки", "");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

// Выполнить подключение ЭДО 1 СЭДО отправка заявки на подключение.
// 
// Параметры:
//  ПроцессВыполнения - см. НовыйПроцессВыполненияПодключениеЭДО_1СЭДО
// 
// Возвращаемое значение:
//  Булево - Выполнить подключение ЭДО 1 СЭДО отправка заявки на подключение
Функция ВыполнитьПодключениеЭДО_1СЭДО_ОтправкаЗаявкиНаПодключение(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОтправкаЗаявки = ПроцессВыполнения.ОтправкаЗаявки;
	НомерЗаявки = ОперацияЭДО.Результат.НомерЗаявки;
	Если ОтправкаЗаявки = Неопределено И Не ЗначениеЗаполнено(НомерЗаявки) Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОтправкаЗаявки";
		
		ОбработкаПродолжения = Новый ОписаниеОповещения("ЗакончитьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО", ЭтотОбъект,
			ПроцессВыполнения);
		
		Параметры = ОперацияЭДО.Параметры;
		
		ПараметрыРегистрации = СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО();
		ПараметрыРегистрации.Организация                    = Параметры.Организация;
		ПараметрыРегистрации.ОператорЭДО                    = Параметры.ОператорЭДО;
		ПараметрыРегистрации.АдресОрганизации               = Параметры.АдресОрганизации;
		ПараметрыРегистрации.АдресОрганизацииЗначение       = Параметры.АдресОрганизацииЗначение;
		ПараметрыРегистрации.ЭлектроннаяПочта               = Параметры.ЭлектроннаяПочтаДляУведомлений;
		ПараметрыРегистрации.КодНалоговогоОргана            = Параметры.КодНалоговогоОргана;
		ПараметрыРегистрации.СертификатыПодписейОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Сертификат);
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		УчетныеЗаписиЭДОКлиент.ЗарегистрироватьСертификатВСервисе1СЭДО(Неопределено,
			ОбработкаПродолжения, ПараметрыРегистрации, КонтекстДиагностики);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОтправкаЗаявки) = Тип("Структура") Тогда
		Если ОтправкаЗаявки.Выполнено Тогда
			НомерЗаявки = ОтправкаЗаявки.НомерЗаявки;
			ПроцессВыполнения.ОперацияЭДО.Результат.НомерЗаявки = НомерЗаявки;
			
			Если ПроцессВыполнения.ОбработкаПрогрессаВыполнения <> Неопределено Тогда
				ПараметрыОбработкиПрогрессаВыполнения = ПроцессВыполнения.ОбработкаПрогрессаВыполнения.ДополнительныеПараметры;
				Если ТипЗнч(ПараметрыОбработкиПрогрессаВыполнения) = Тип("Структура") Тогда
					Если ПараметрыОбработкиПрогрессаВыполнения.Свойство("ИдентификаторЗаявки") Тогда
						ПараметрыОбработкиПрогрессаВыполнения.ИдентификаторЗаявки = НомерЗаявки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("АктивныйНомерЗаявкиНаПодключение", "НомерЗаявки", НомерЗаявки);
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерЗаявки) Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОжиданиеОбработкиЗаявкиНаПодключение(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОжиданиеПодключения = ПроцессВыполнения.ОжиданиеПодключения;
	ИдентификаторЭДО    = ОперацияЭДО.Результат.ИдентификаторЭДО;
	Если ОжиданиеПодключения = Неопределено И Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		
		НомерЗаявки = ОперацияЭДО.Результат.НомерЗаявки;
		
		ПроцессВыполнения.ТекущийЭтап = "ОжиданиеПодключения";
		ОбработкаПрогрессаВыполнения  = ПроцессВыполнения.ОбработкаПрогрессаВыполнения;
		
		Если ОбработкаПрогрессаВыполнения <> Неопределено Тогда
			ОбработкаПрогрессаВыполнения.ДополнительныеПараметры.ИдентификаторЗаявки = НомерЗаявки;
		КонецЕсли;
		
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		
		НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(НомерЗаявки, ОбработкаПродолжения, , ОбработкаПрогрессаВыполнения);
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(ОжиданиеПодключения) = Тип("Структура") Тогда
		
		Если ОжиданиеПодключения.Выполнено Тогда
			ИдентификаторЭДО = ОжиданиеПодключения.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.ИдентификаторЭДО = ИдентификаторЭДО;
		ИначеЕсли ЗначениеЗаполнено(ОжиданиеПодключения.Ошибка) Тогда
			ПроцессВыполнения.Ошибка = ОжиданиеПодключения.Ошибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_СозданиеУчетнойЗаписи(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	СозданиеУчетнойЗаписи = ПроцессВыполнения.СозданиеУчетнойЗаписи;
	УчетнаяЗапись         = ОперацияЭДО.Результат.УчетнаяЗапись;
	
	Если СозданиеУчетнойЗаписи = Неопределено И Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
	
		Если СоздатьУчетнуюЗапись(ОперацияЭДО) Тогда
			ПроцессВыполнения.СозданиеУчетнойЗаписи = "Создана";
			УчетнаяЗапись = ОперацияЭДО.Результат.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.УчетнаяЗапись = УчетнаяЗапись;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеПараметровУведомлений(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОбновлениеПараметровУведомлений = ПроцессВыполнения.ОбновлениеПараметровУведомлений;
	ОбновленыПараметрыУведомлений = ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений;
	Если ОбновлениеПараметровУведомлений = Неопределено И Не ОбновленыПараметрыУведомлений Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОбновлениеПараметровУведомлений";
		
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		ПослеОбновленияПараметровУведомлений = Новый ОписаниеОповещения("ЗакончитьОбновлениеПараметровУведомленийВСервисеЭДО", ЭтотОбъект, ОбработкаПродолжения);
		
		ПараметрыУведомлений = СервисЭДОКлиентСервер.НовыеПараметрыУведомлений();
		ПараметрыУведомлений.УведомлятьОСобытиях = ОперацияЭДО.Параметры.УведомлятьОСобытиях;
		ПараметрыУведомлений.УведомлятьОНовыхПриглашениях = ОперацияЭДО.Параметры.УведомлятьОНовыхПриглашениях;
		ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения = ОперацияЭДО.Параметры.УведомлятьОбОтветахНаПриглашения;
		ПараметрыУведомлений.УведомлятьОНовыхДокументах = ОперацияЭДО.Параметры.УведомлятьОНовыхДокументах;
		ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах =  ОперацияЭДО.Параметры.УведомлятьОНеОбработанныхДокументах;
		ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата = ОперацияЭДО.Параметры.УведомлятьОбОкончанииСрокаДействияСертификата;
		ПараметрыУведомлений.АдресУведомлений = ОперацияЭДО.Параметры.ЭлектроннаяПочтаДляУведомлений;
			
		КлючСинхронизации = СинхронизацияЭДОКлиентСервер.НовыйКлючСинхронизации();
		КлючСинхронизации.ИдентификаторУчетнойЗаписи = ОперацияЭДО.Результат.ИдентификаторЭДО;
		КлючСинхронизации.СпособОбмена = ОперацияЭДО.Параметры.СпособОбменаЭД;
		КлючСинхронизации.ВыбранныйСертификат = ОперацияЭДО.Параметры.Сертификат;
		
		СервисЭДОКлиент.ОбновитьПараметрыУведомлений(ПараметрыУведомлений, КлючСинхронизации,
			КонтекстДиагностики, ПослеОбновленияПараметровУведомлений, Неопределено,
			ПроцессВыполнения.ОперацияЭДО.СлужебныеПараметры.ПаролиСертификатов);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбновлениеПараметровУведомлений) = Тип("Структура") Тогда
		Если ОбновлениеПараметровУведомлений.Выполнено Тогда
			ОбновленыПараметрыУведомлений = Истина;
			ПроцессВыполнения.ОперацияЭДО.Результат.ОбновленыПараметрыУведомлений = ОбновленыПараметрыУведомлений;
		КонецЕсли;
	КонецЕсли;
	Если Не ОбновленыПараметрыУведомлений Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_1СЭДО_ОбновлениеДанныхАбонента(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОбновлениеДанныхАбонента = ПроцессВыполнения.ОбновлениеДанныхАбонента;
	ОбновленыДанныеАбонента = ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	Если ОбновлениеДанныхАбонента = Неопределено И Не ОбновленыДанныеАбонента Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОбновлениеДанныхАбонента";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
		ДанныеАбонента = Новый Структура;
		ДанныеАбонента.Вставить("ИдентификаторЭДО", ОперацияЭДО.Результат.ИдентификаторЭДО);
		НачатьОбновлениеДанныхАбонентаВСервисеЭДО(ДанныеАбонента, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбновлениеДанныхАбонента) = Тип("Структура") Тогда
		Если ОбновлениеДанныхАбонента.Выполнено Тогда
			ОбновленыДанныеАбонента = Истина;
			ПроцессВыполнения.ОперацияЭДО.Результат.ОбновленыДанныеАбонента = ОбновленыДанныеАбонента;
		КонецЕсли;
	КонецЕсли;
	Если Не ОбновленыДанныеАбонента Тогда
		ЗавершитьПодключениеЭДО_1СЭДО(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьПрогрессВыполненияПодключения(Знач ОбработкаПрогрессаВыполнения, Знач ОбработатьПрогрессВыполнения = Истина)
	
	Если ОбработкаПрогрессаВыполнения <> Неопределено Тогда
		
		Если ОбработатьПрогрессВыполнения Тогда
			ВыполнитьОбработкуОповещения(ОбработкаПрогрессаВыполнения);
		КонецЕсли;
		
		ОтмененаРегистрацияЭДО = Ложь;
		ОбработкаПрогрессаВыполнения.ДополнительныеПараметры.Свойство("ОтмененаРегистрацияЭДО", ОтмененаРегистрацияЭДО);
		Если ОтмененаРегистрацияЭДО = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Отправка заявки.

Процедура ЗакончитьОтправкуЗаявкиНаПодключениеЭДО_1СЭДО(Знач Результат, Знач ПроцессВыполнения) Экспорт
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_1СЭДО", ЭтотОбъект, ПроцессВыполнения);
	
	РезультатОтправкиЗаявки = Новый Структура;
	РезультатОтправкиЗаявки.Вставить("Выполнено"  , Ложь);
	РезультатОтправкиЗаявки.Вставить("НомерЗаявки", "");
	
	Если Результат.Свойство("ПаролиСертификатов") Тогда
		ПроцессВыполнения.ОперацияЭДО.СлужебныеПараметры.ПаролиСертификатов = Результат.ПаролиСертификатов;
	КонецЕсли;
	Если Результат.Свойство("КонтекстДиагностики") Тогда
		РезультатОтправкиЗаявки.Вставить("КонтекстДиагностики" , Результат.КонтекстДиагностики);
	КонецЕсли;
			
	Если Результат.Успех Тогда
			
		РезультатОтправкиЗаявки.Выполнено   = Истина;
		РезультатОтправкиЗаявки.НомерЗаявки = Результат.УникальныйИдентификаторЗаявки1СЭДО;
			
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатОтправкиЗаявки);
	
КонецПроцедуры

// Начать ожидание обработки заявки на подключение ЭДО 1 СЭДО отложено.
// 
// Параметры:
//  Результат - Неопределено
//  ПараметрыОжидания - Структура - см. НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО
Процедура НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО_Отложено(Результат, ПараметрыОжидания) Экспорт
	НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(ПараметрыОжидания.НомерЗаявки, ПараметрыОжидания.ОбработкаПродолжения,
			ПараметрыОжидания.ПараметрыОжидания, ПараметрыОжидания.ОповещениеОПрогрессеВыполнения);
КонецПроцедуры

// Начать ожидание обработки заявки на подключение ЭДО.
// 
// Параметры:
//  НомерЗаявки - Строка - Номер заявки
//  ОбработкаПродолжения - ОписаниеОповещения - Обработка продолжения
//  ПараметрыОжидания - Неопределено, Структура - см. ДлительныеОперацииКлиент.ПараметрыОжидания
//  ОповещениеОПрогрессеВыполнения - Неопределено, ОписаниеОповещения - Оповещение о прогрессе выполнения
Процедура НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(Знач НомерЗаявки, Знач ОбработкаПродолжения,
		Знач ПараметрыОжидания = Неопределено, Знач ОповещениеОПрогрессеВыполнения = Неопределено)
	
	Операция = СервисЭДОВызовСервера.НачатьПолучениеСостоянияРегистрацииВСервисе1СЭДО(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерЗаявки), Новый УникальныйИдентификатор);
	
	Если ПараметрыОжидания = Неопределено Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("НомерЗаявки"                   , НомерЗаявки);
	Контекст.Вставить("ОбработкаПродолжения"          , ОбработкаПродолжения);
	Контекст.Вставить("ПараметрыОжидания"             , ПараметрыОжидания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Операция, ОбработкаЗавершения, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  РезультатОперации - см. ДлительныеОперации.НовыйРезультатВыполненияОперации
//	Контекст - Структура:
//   * НомерЗаявки            - Строка - Номер заявки на подключение к ЭДО
//   * ОбработкаПродолжения   - ОписаниеОповещения  
//   * ПараметрыОжидания      - см. ДлительныеОперацииКлиент.ПараметрыОжидания
//
Процедура ЗакончитьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(Знач РезультатОперации, Знач Контекст) Экспорт
	
	РезультатОжидания = Новый Структура;
	РезультатОжидания.Вставить("Выполнено"        , Ложь);
	РезультатОжидания.Вставить("ИдентификаторЭДО" , "");
	РезультатОжидания.Вставить("Ошибка"           , "");
	РезультатОжидания.Вставить("КонтекстДиагностики" , Неопределено);
	
	Результат        = Неопределено;
	ИдентификаторЭДО = Неопределено;
	
	ОписаниеОшибки = "";
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		Если РезультатОперации.Статус = "Выполнено" Тогда
			РезультатПроцедуры = ПолучитьИзВременногоХранилища(РезультатОперации.АдресРезультата);// см. СервисЭДО.ПолучитьСостояниеРегистрацииВСервисе1СЭДО
			СостояниеЗаявки = РезультатПроцедуры.СостояниеРегистрации[Контекст.НомерЗаявки];
			ИдентификаторЭДО   = СостояниеЗаявки.ИдентификаторОрганизации;
			Результат          = СостояниеЗаявки.Результат;
			ОписаниеОшибки = СостояниеЗаявки.ОписаниеОшибки;
		ИначеЕсли РезультатОперации.Статус = "Ошибка" Тогда
			РезультатОжидания.Ошибка = Результат.КраткоеПредставлениеОшибки;
			ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаПрогрессаВыполнения = Контекст.ОбработкаПродолжения.ДополнительныеПараметры.ОбработкаПрогрессаВыполнения;
	Отменено = ПроверитьПрогрессВыполненияПодключения(ОбработкаПрогрессаВыполнения, Ложь);
	Если Отменено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		РезультатОжидания.Выполнено        = Результат;
		РезультатОжидания.ИдентификаторЭДО = ИдентификаторЭДО;
		РезультатОжидания.Ошибка           = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
	ИначеЕсли Результат = Ложь Тогда
		РезультатОжидания.Ошибка              = ОписаниеОшибки;
		РезультатОжидания.КонтекстДиагностики = РезультатПроцедуры.КонтекстДиагностики;
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОжидания);
	Иначе
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("НомерЗаявки", Контекст.НомерЗаявки);
		ПараметрыВыполнения.Вставить("ОбработкаПродолжения", Контекст.ОбработкаПродолжения);
		ПараметрыВыполнения.Вставить("ПараметрыОжидания", Контекст.ПараметрыОжидания);
		ПараметрыВыполнения.Вставить("ОповещениеОПрогрессеВыполнения", Неопределено);
		ОтложенноеОповещение = Новый ОписаниеОповещения("НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО_Отложено", 
				СинхронизацияЭДОСлужебныйКлиент, ПараметрыВыполнения);
		ОбщегоНазначенияБЭДКлиент.ОбработатьОповещениеЧерезИнтервал(1, ОтложенноеОповещение);
	КонецЕсли;
	
КонецПроцедуры   

// Продолжение процедуры ЗакончитьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО.
// Параметры:
//  Результат  - Произвольный
//	Контекст - Структура:
//   * НомерЗаявки            - Строка - Номер заявки на подключение к ЭДО
//   * ОбработкаПродолжения   - ОписаниеОповещения  
//   * ПараметрыОжидания      - см. ДлительныеОперацииКлиент.ПараметрыОжидания
//
Процедура ЗакончитьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДОПродолжение(Результат, Контекст) Экспорт
	
	НачатьОжиданиеОбработкиЗаявкиНаПодключениеЭДО_1СЭДО(Контекст.НомерЗаявки, Контекст.ОбработкаПродолжения, Контекст.ПараметрыОжидания);

КонецПроцедуры

// Обновление настроек уведомлений.

Процедура ЗакончитьОбновлениеПараметровУведомленийВСервисеЭДО(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("Выполнено", Ложь);
	
	Если Результат.Успех Тогда
		РезультатОбновления.Выполнено = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеЭДО_Такском

Процедура НачатьПодключениеЭДО_Такском(Знач ОперацияЭДО, Знач ОбработкаПродолжения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = НовыйПроцессВыполненияПодключениеЭДО_Такском(ОперацияЭДО, ОбработкаПродолжения, ОбработкаПрогрессаВыполнения);
	
	ВыполнитьПодключениеЭДО_Такском(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

Функция НовыйПроцессВыполненияПодключениеЭДО_Такском(Знач ОперацияЭДО, Знач ОбработкаЗавершения, Знач ОбработкаПрогрессаВыполнения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО", ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("ОбработкаПрогрессаВыполнения", ОбработкаПрогрессаВыполнения);
	ПроцессВыполнения.Вставить("ПолучениеИдентификатора");
	ПроцессВыполнения.Вставить("СозданиеУчетнойЗаписи");
	ПроцессВыполнения.Вставить("ОбновлениеДанныхАбонента");
	ПроцессВыполнения.Вставить("ПроверкаСвязи");
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ОтобразитьПроцессВыполненияПодключенияЭДО_Такском(ПроцессВыполнения, Знач Показать = Истина)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если ЗначениеЗаполнено(ОперацияЭДО)
		И ОперацияЭДО.Свойство("СлужебныеПараметры")
		И ОперацияЭДО.СлужебныеПараметры.Свойство("ОткрыватьФормуДлительнойОперации")
		И НЕ ОперацияЭДО.СлужебныеПараметры.ОткрыватьФормуДлительнойОперации Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Подключение ЭДО'");
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите.'");
	Если ПроцессВыполнения.ПолучениеИдентификатора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Получение идентификатора от оператора.'");
	ИначеЕсли ПроцессВыполнения.СозданиеУчетнойЗаписи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Создание учетной записи ЭДО.'");
	ИначеЕсли ПроцессВыполнения.ОбновлениеДанныхАбонента = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Обновление данных об абоненте.'");
	КонецЕсли;
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	ПараметрыОжидания.Заголовок = Заголовок;
	
	Если ОперацияВыполнена Тогда
		ТекстСообщения = НСтр("ru = 'Подключение ЭДО завершено.'");
		ПараметрыОжидания.ОперацияЗавершена = Истина;
	КонецЕсли;
	
	ПараметрыОжидания.ТекстСообщения = ТекстСообщения;
	
	КонтекстОжидания = Неопределено;
	ПроцессВыполнения.Свойство("КонтекстОжидания", КонтекстОжидания);
	
	Если КонтекстОжидания = Неопределено Тогда
		Если Показать Тогда
			КонтекстОжидания = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
			ПроцессВыполнения.Вставить("КонтекстОжидания", КонтекстОжидания);
			ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжидания);
		КонецЕсли;
	Иначе
		Если Показать Тогда
			ОжиданиеОперацийБЭДКлиент.ОбновитьПрогресс(ПараметрыОжидания, КонтекстОжидания);
		Иначе
			ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(КонтекстОжидания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПодключениеЭДО_Такском(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияПодключенияЭДО_Такском(ПроцессВыполнения);
	
	// Определение выполняемой операции.
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если Не ЗначениеЗаполнено(ОперацияЭДО) Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОперацияЭДО.СлужебныеПараметры, "ВключеноРазделениеДанных", Ложь) Тогда
		
		Выполнено = ВыполнитьПодключениеЭДО_Такском_ПолучениеНовогоИдентификатора(ПроцессВыполнения);
		Если Не Выполнено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Отменено = ПроверитьПрогрессВыполненияПодключения(ПроцессВыполнения.ОбработкаПрогрессаВыполнения);
	Если Отменено Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат;
	КонецЕсли;

	Выполнено = ВыполнитьПодключениеЭДО_Такском_СозданиеУчетнойЗаписи(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Выполнено = ВыполнитьПодключениеЭДО_Такском_ОбновлениеДанныхАбонента(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьПодключениеЭДО_Такском(Знач ПроцессВыполнения)
	
	Если ПроцессВыполнения.Свойство("ФормаПроцесса") Тогда
		Если ПроцессВыполнения.ФормаПроцесса.Открыта() Тогда
			ПроцессВыполнения.ФормаПроцесса.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОперацияВыполнена = ЗначениеЗаполнено(ОперацияЭДО.Результат.УчетнаяЗапись)
		И ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

Функция ВыполнитьПодключениеЭДО_Такском_ПолучениеНовогоИдентификатора(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ПолучениеИдентификатора = ПроцессВыполнения.ПолучениеИдентификатора;
	ИдентификаторЭДО        = ОперацияЭДО.Результат.ИдентификаторЭДО;
	Если ПолучениеИдентификатора = Неопределено И Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ПроцессВыполнения.ТекущийЭтап = "ПолучениеИдентификатора";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_Такском", ЭтотОбъект, ПроцессВыполнения);
		ПараметрыПолучения = Новый Структура;
		ПараметрыПолучения.Вставить("Организация"         , ОперацияЭДО.Параметры.Организация);
		ПараметрыПолучения.Вставить("Сертификат"          , ОперацияЭДО.Параметры.Сертификат);
		ПараметрыПолучения.Вставить("КодНалоговогоОргана" , ОперацияЭДО.Параметры.КодНалоговогоОргана);
		ПараметрыПолучения.Вставить("АдресОрганизации"    , ОперацияЭДО.Параметры.АдресОрганизации);
		ПараметрыПолучения.Вставить("АдресОрганизацииЗначение", ОперацияЭДО.Параметры.АдресОрганизацииЗначение);
		НачатьПолучениеНовогоИдентификатораТакском(ПараметрыПолучения, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ПолучениеИдентификатора) = Тип("Структура") Тогда
		Если ПолучениеИдентификатора.Выполнено Тогда
			ИдентификаторЭДО = ПолучениеИдентификатора.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.ИдентификаторЭДО = ИдентификаторЭДО;
			
			Если ПроцессВыполнения.ОбработкаПрогрессаВыполнения <> Неопределено Тогда
				ПараметрыОбработкиПрогрессаВыполнения = ПроцессВыполнения.ОбработкаПрогрессаВыполнения.ДополнительныеПараметры;
				Если ТипЗнч(ПараметрыОбработкиПрогрессаВыполнения) = Тип("Структура") Тогда
					Если ПараметрыОбработкиПрогрессаВыполнения.Свойство("ИдентификаторЭДО") Тогда
						ПараметрыОбработкиПрогрессаВыполнения.ИдентификаторЭДО = ИдентификаторЭДО;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_Такском_СозданиеУчетнойЗаписи(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	СозданиеУчетнойЗаписи = ПроцессВыполнения.СозданиеУчетнойЗаписи;
	УчетнаяЗапись = ОперацияЭДО.Результат.УчетнаяЗапись;
	Если СозданиеУчетнойЗаписи = Неопределено И Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Если СоздатьУчетнуюЗапись(ОперацияЭДО) Тогда
			ПроцессВыполнения.СозданиеУчетнойЗаписи = "Создана";
			УчетнаяЗапись = ОперацияЭДО.Результат.ИдентификаторЭДО;
			ПроцессВыполнения.ОперацияЭДО.Результат.УчетнаяЗапись = УчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПодключениеЭДО_Такском_ОбновлениеДанныхАбонента(ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ОбновлениеДанныхАбонента = ПроцессВыполнения.ОбновлениеДанныхАбонента;
	ОбновленыДанныеАбонента = ОперацияЭДО.Результат.ОбновленыДанныеАбонента;
	Если ОбновлениеДанныхАбонента = Неопределено И Не ОбновленыДанныеАбонента Тогда
		ПроцессВыполнения.ТекущийЭтап = "ОбновлениеДанныхАбонента";
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьПодключениеЭДО_Такском", ЭтотОбъект, ПроцессВыполнения);
		ДанныеАбонента = Новый Структура;
		ДанныеАбонента.Вставить("ИдентификаторЭДО", ОперацияЭДО.Результат.ИдентификаторЭДО);
		НачатьОбновлениеДанныхАбонентаВСервисеЭДО(ДанныеАбонента, ОбработкаПродолжения);
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ОбновлениеДанныхАбонента) = Тип("Структура") Тогда
		Если ОбновлениеДанныхАбонента.Выполнено Тогда
			ОбновленыДанныеАбонента = Истина;
			ПроцессВыполнения.ОперацияЭДО.Результат.ОбновленыДанныеАбонента = ОбновленыДанныеАбонента;
		КонецЕсли;
	КонецЕсли;
	Если Не ОбновленыДанныеАбонента Тогда
		ЗавершитьПодключениеЭДО_Такском(ПроцессВыполнения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура НачатьПолучениеНовогоИдентификатораТакском(Знач Параметры, Знач ОбработкаПродолжения)
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьПолучениеНовогоИдентификатораТакском", ЭтотОбъект, ОбработкаПродолжения);
	
	ОбработчикСтатусаЗаявки = Новый ОписаниеОповещения("ОбработатьСтатусЗаявкиПриПолученииНовогоИдентификатораТакском",
		ЭтотОбъект, ОбработкаПродолжения.ДополнительныеПараметры.ОперацияЭДО);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресОрганизации"        , Параметры.АдресОрганизации);
	ДополнительныеПараметры.Вставить("АдресОрганизацииЗначение", Параметры.АдресОрганизацииЗначение);
	ДополнительныеПараметры.Вставить("Сертификат"              , Параметры.Сертификат);
	ДополнительныеПараметры.Вставить("КодНалоговогоОргана"     , Параметры.КодНалоговогоОргана);
	ДополнительныеПараметры.Вставить("Организация"     , Параметры.Организация);
	
	УчетныеЗаписиЭДОКлиент.НачатьПолучениеНовогоИдентификатораТакском(ОбработкаЗавершения,
		ОбработчикСтатусаЗаявки, Параметры.Сертификат, Параметры.Организация, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗакончитьПолучениеНовогоИдентификатораТакском(Знач Результат, Знач ОбработкаПродолжения) Экспорт
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("Выполнено", Ложь);
	РезультатПолучения.Вставить("ИдентификаторЭДО");
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РезультатПолучения.Выполнено = Истина;
		РезультатПолучения.ИдентификаторЭДО = Результат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, РезультатПолучения);
	
КонецПроцедуры

Процедура ОбработатьСтатусЗаявкиПриПолученииНовогоИдентификатораТакском(Результат, ДополнительныеПараметры) Экспорт

	ОтветДействие = Новый Структура;
	Действие      = "СтандартнаяОбработка";
	СтатусЗаявки  = Неопределено;
	Результат.Свойство("СтатусЗаявки", СтатусЗаявки);
	
	Если СтатусЗаявки = "Отсутствует" Тогда
		
		Действие = "НоваяЗаявка";
		
	ИначеЕсли СтатусЗаявки = "ОжиданиеОбработки"
		ИЛИ СтатусЗаявки = Неопределено Тогда
		
		Действие = "ПроверитьСтатусЗаявки";
		
	ИначеЕсли СтатусЗаявки = "Обработана" Тогда
		
		ДополнительныеПараметры.Результат.ИдентификаторЭДО = Результат.ДанныеЗаявки.ИдентификаторАбонента;
		ДополнительныеПараметры.Результат.НомерЗаявки      = Результат.НомерЗаявки;
		
		Действие = "Завершить";
		
	ИначеЕсли СтатусЗаявки = "Отклонена" Тогда
		
		ОписаниеОшибки = Результат.ОписаниеОшибки;
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			ВидОперации = НСтр("ru = 'Обработка статуса заявки при получении идентификатора от оператора 1С-Такском.'");
			
			Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
				ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ОписаниеОшибки, ОписаниеОшибки);
			
			ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(ДополнительныеПараметры.СлужебныеПараметры.КонтекстДиагностики,
				Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
			
		КонецЕсли;
		
		Действие = "Завершить";
		
	КонецЕсли;
	
	ОтветДействие.Вставить("Действие", Действие);

	Если Действие <> "ПроверитьСтатусЗаявки" Тогда
		ВыполнитьОбработкуОповещения(Результат.ОбработчикРезультата, ОтветДействие);
	Иначе
		СлужебныеПараметры = ДополнительныеПараметры.СлужебныеПараметры;
		Если СлужебныеПараметры.Свойство("ПроцедураПроверкиЗаявленияТакском") Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ОбработчикПродолженияПроверкиЗаявкиТакском", Результат.ОбработчикРезультата);
			Параметры.Вставить("ДействиеОбработкиЗаявкиТакском"            , ОтветДействие);
			ВыполнитьОбработкуОповещения(СлужебныеПараметры.ПроцедураПроверкиЗаявленияТакском, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеСертификата

Процедура НачатьОбновлениеСертификата(Знач ОперацияЭДО, Знач ОбработкаПродолжения)
	
	ПроцессВыполнения = НовыйПроцессВыполненияОбновленияСертификата(ОперацияЭДО, ОбработкаПродолжения);
	
	ВыполнитьОбновлениеСертификата(Неопределено, ПроцессВыполнения);
	
КонецПроцедуры

Функция НовыйПроцессВыполненияОбновленияСертификата(Знач ОперацияЭДО, Знач ОбработкаЗавершения)
	
	ПроцессВыполнения = Новый Структура;
	ПроцессВыполнения.Вставить("ТекущийЭтап");
	ПроцессВыполнения.Вставить("ОперацияЭДО", ОперацияЭДО);
	ПроцессВыполнения.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	ПроцессВыполнения.Вставить("УчетныеЗаписи");
	ПроцессВыполнения.Вставить("ОтправленныеЗаявки", Новый Массив);
	ПроцессВыполнения.Вставить("ОтправкаЗаявки");
	ПроцессВыполнения.Вставить("ОдобренныеЗаявки", Новый Массив);
	
	Возврат ПроцессВыполнения;
	
КонецФункции

Процедура ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения, Знач Показать = Истина)
	
	Заголовок = НСтр("ru = 'Обновление сертификатов ЭДО'");
	
	ВсегоЗаявок = ?(ПроцессВыполнения.УчетныеЗаписи = Неопределено, 0 , ПроцессВыполнения.УчетныеЗаписи.Количество());
	ОтправленоЗаявок = ПроцессВыполнения.ОтправленныеЗаявки.Количество();
	ОдобреноЗаявок = ПроцессВыполнения.ОдобренныеЗаявки.Количество();
	
	ТекстСообщения = НСтр("ru = 'Пожалуйста, подождите.'");
	Если ПроцессВыполнения.УчетныеЗаписи = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Поиск учетных записей ЭДО для добавления сертификата.'");
	ИначеЕсли ВсегоЗаявок <> ОтправленоЗаявок Тогда
		ШаблонСообщения = НСтр("ru = 'Отправка сертификата оператору ЭДО (%1 из %2).'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОтправленоЗаявок + 1, ВсегоЗаявок);
	Иначе
		ТекстСообщения = НСтр("ru = 'Добавление сертификата в учетные записи ЭДО.'");
	КонецЕсли;
	
	ОперацияВыполнена = (ВсегоЗаявок = ОдобреноЗаявок) И (ПроцессВыполнения.УчетныеЗаписи <> Неопределено);
	
	ПараметрыОжидания = ОжиданиеОперацийБЭДКлиент.НовыеПараметры();
	ПараметрыОжидания.Заголовок = Заголовок;
	
	Если ОперацияВыполнена Тогда
		ТекстСообщения = НСтр("ru = 'Обновление сертификата завершено.'");
		ПараметрыОжидания.ОперацияЗавершена = Истина;
	КонецЕсли;
	
	ПараметрыОжидания.ТекстСообщения = ТекстСообщения;
	
	КонтекстОжидания = Неопределено;
	ПроцессВыполнения.Свойство("КонтекстОжидания", КонтекстОжидания);
	
	Если КонтекстОжидания = Неопределено Тогда
		Если Показать Тогда
			КонтекстОжидания = ОжиданиеОперацийБЭДКлиент.НовыйКонтекст(ПараметрыОжидания);
			ПроцессВыполнения.Вставить("КонтекстОжидания", КонтекстОжидания);
			ОжиданиеОперацийБЭДКлиент.ОткрытьФормуОжидания(Неопределено, КонтекстОжидания);
		КонецЕсли;
	Иначе
		Если Показать Тогда
			ОжиданиеОперацийБЭДКлиент.ОбновитьПрогресс(ПараметрыОжидания, КонтекстОжидания);
		Иначе
			ОжиданиеОперацийБЭДКлиент.ЗакрытьФормуОжидания(КонтекстОжидания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеСертификата(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт
	
	ИмяЭтогоМетода = "ВыполнитьОбновлениеСертификата";
	
	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	// Определение выполняемой операции.
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	Если Не ЗначениеЗаполнено(ОперацияЭДО) Тогда
		ЗавершитьОбновлениеСертификата(ПроцессВыполнения);
		Возврат;
	КонецЕсли;
	
	// Определение учетных записей для обновления.
	УчетныеЗаписи = ПроцессВыполнения.УчетныеЗаписи;
	Если УчетныеЗаписи = Неопределено Тогда
		УчетныеЗаписи = СинхронизацияЭДОВызовСервера.УчетныеЗаписиЭДОДляОбновленияСертификата(
			ОперацияЭДО.Параметры.Организация, ОперацияЭДО.Параметры.Сертификат, ОперацияЭДО.Параметры.НовыйСертификат);
		ПроцессВыполнения.УчетныеЗаписи = УчетныеЗаписи;
	КонецЕсли;
	
	// Отправка заявок на добавление сертификата.
	//  Проверяем текущую заявку.
	ОтправкаЗаявки = ПроцессВыполнения.ОтправкаЗаявки;
	Если ТипЗнч(ОтправкаЗаявки) = Тип("Структура") Тогда
		ПроцессВыполнения.ОтправленныеЗаявки.Добавить(ОтправкаЗаявки.ИдентификаторЭДО);
		Если ОтправкаЗаявки.Одобрено Тогда
			ПроцессВыполнения.ОдобренныеЗаявки.Добавить(ОтправкаЗаявки.ИдентификаторЭДО);
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	//  Отправляем оставшиеся заявки.
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		Если ПроцессВыполнения.ОтправленныеЗаявки.Найти(УчетнаяЗапись.ИдентификаторЭДО) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроцессВыполнения.ТекущийЭтап = "ОтправкаЗаявки";
		ЭтотМетод = Новый ОписаниеОповещения(ИмяЭтогоМетода, ЭтотОбъект, ПроцессВыполнения);
		НачатьОтправкуЗаявкиНаДобавлениеСертификата(УчетнаяЗапись, ОперацияЭДО.Параметры.НовыйСертификат, ЭтотМетод);
		Возврат;
	КонецЦикла;
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	// Добавляем новый сертификат по одобренным заявкам.
	СинхронизацияЭДОВызовСервера.ДобавитьСертификатВУчетныеЗаписиЭДО(
		ПроцессВыполнения.ОдобренныеЗаявки, ОперацияЭДО.Параметры.НовыйСертификат);
	
	ЗавершитьОбновлениеСертификата(ПроцессВыполнения);
	
КонецПроцедуры

Процедура ЗавершитьОбновлениеСертификата(Знач ПроцессВыполнения)
	
	ОперацияЭДО = ПроцессВыполнения.ОперацияЭДО;
	
	ВсегоЗаявок = ?(ПроцессВыполнения.УчетныеЗаписи = Неопределено, 0, ПроцессВыполнения.УчетныеЗаписи.Количество());
	ОдобреноЗаявок = ПроцессВыполнения.ОдобренныеЗаявки.Количество();
	
	ОперацияВыполнена = (ВсегоЗаявок = ОдобреноЗаявок) И (ПроцессВыполнения.УчетныеЗаписи <> Неопределено);
	
	ОтобразитьПроцессВыполненияОбновленияСертификата(ПроцессВыполнения);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ОперацияВыполнена);
	Результат.Вставить("ОперацияЭДО", ОперацияЭДО);
	
	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, Результат);
	
КонецПроцедуры


Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата(Знач УчетнаяЗапись, Знач НовыйСертификат, Знач ОбработкаПродолжения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭДО", УчетнаяЗапись.ИдентификаторЭДО);
	Контекст.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьОтправкуЗаявкиНаДобавлениеСертификата", ЭтотОбъект, Контекст);
	
	Если УчетнаяЗапись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		Если ИнтеграцияБИПБЭДКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
			Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(
				НовыйСертификат, УчетнаяЗапись.ИдентификаторЭДО, УчетнаяЗапись.Организация, ОбработкаЗавершения);
			Возврат;
		Иначе
			// В случае, если в конфигурацию не встроена интернет-поддержка или работа производится в режиме сервиса,
			// сертификат в сервисе 1С-Такском необходимо регистрировать через тех. поддержку.
			ШаблонСообщения = НСтр("ru = 'Учетная запись ""%1"" (%2):'") + Символы.ПС
				+ НСтр("ru = 'Сертификат добавлен в учетную запись, но для регистрации его в сервисе ЭДО необходимо обратиться в техническую поддержку 1С-ЭДО.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, УчетнаяЗапись.НаименованиеУчетнойЗаписи, УчетнаяЗапись.ИдентификаторЭДО);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ЗакончитьОтправкуЗаявкиНаДобавлениеСертификата(Истина, Контекст);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли УчетнаяЗапись.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		// Для 1С-ЭДО еще нужно подписать, отправить и ожидать обработки.
		
		ПараметрыРегистрации = СервисЭДОКлиент.НовыеПараметрыРегистрацииВСервисе1СЭДО();
			ПараметрыРегистрации.Организация = УчетнаяЗапись.Организация;
			ПараметрыРегистрации.ОператорЭДО = УчетнаяЗапись.ОператорЭДО;
			ПараметрыРегистрации.АдресОрганизации = УчетнаяЗапись.АдресОрганизации;
			ПараметрыРегистрации.АдресОрганизацииЗначение = УчетнаяЗапись.АдресОрганизацииЗначение;
			ПараметрыРегистрации.ЭлектроннаяПочта = УчетнаяЗапись.ЭлектроннаяПочтаДляУведомлений;
			ПараметрыРегистрации.КодНалоговогоОргана = УчетнаяЗапись.КодНалоговогоОргана;
			ПараметрыРегистрации.СертификатыПодписейОрганизации = УчетнаяЗапись.ВсеСертификаты;
			ПараметрыРегистрации.ИдентификаторОрганизации = УчетнаяЗапись.ИдентификаторЭДО;
			
			КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
			УчетныеЗаписиЭДОКлиент.ЗарегистрироватьСертификатВСервисе1СЭДО(Неопределено, ОбработкаЗавершения,
				ПараметрыРегистрации, КонтекстДиагностики);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Отправка(Знач Результат, Знач КонтекстОтправки)
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат") Тогда
		Результат = Результат.Результат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("УникальныйИдентификаторЗаявки1СЭДО", КонтекстОтправки.УникальныйИдентификаторЗаявки1СЭДО);
		
		Операция = СервисЭДОВызовСервера.НачатьПолучениеСостоянияРегистрацииВСервисе1СЭДО(
			ПараметрыОперации, Новый УникальныйИдентификатор);
		
		Если Операция.Статус = "Выполнено" Тогда
			Операция.Статус = "Выполняется";
		КонецЕсли;
		
		ПараметрыОжидания = Неопределено;
		Если Не КонтекстОтправки.Свойство("ПараметрыОжидания", ПараметрыОжидания) Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			КонтекстОтправки.Вставить("ПараметрыОжидания", ПараметрыОжидания);
		КонецЕсли;
		
		ОбработкаЗавершения = Новый ОписаниеОповещения("НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_ОжиданиеОбработки", ЭтотОбъект, КонтекстОтправки);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Операция, ОбработкаЗавершения, ПараметрыОжидания);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(КонтекстОтправки.ОбработкаПродолжения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_ОжиданиеОбработки(Знач Результат, Знач КонтекстОтправки) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Статус = "Выполнено" Тогда
		
		ИдентификаторОрганизации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			
			// Одобрено.
			ВыполнитьОбработкуОповещения(КонтекстОтправки.ОбработкаПродолжения, Истина);
			
		Иначе
			
			// Продолжаем ждать.
			Если КонтекстОтправки.ПараметрыОжидания.Интервал = 0 Тогда
				КонтекстОтправки.ПараметрыОжидания.Интервал = 1;
			Иначе
				КонтекстОтправки.ПараметрыОжидания.Интервал = Мин(КонтекстОтправки.ПараметрыОжидания.Интервал * 1.4, 15);
			КонецЕсли;
			НачатьОтправкуЗаявкиНаДобавлениеСертификата_1СЭДО_Отправка(Истина, КонтекстОтправки);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		// Ошибка или отклонение заявки.
		ВыполнитьОбработкуОповещения(КонтекстОтправки.ОбработкаПродолжения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьОтправкуЗаявкиНаДобавлениеСертификата(Знач РезультатОперации, Знач Контекст) Экспорт
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура") Тогда
		Результат = РезультатОперации.Успех;
	Иначе
		Результат = РезультатОперации;
	КонецЕсли;
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Одобрено", Ложь);
	РезультатОтправки.Вставить("ИдентификаторЭДО", Контекст.ИдентификаторЭДО);
	
	Если Результат Тогда
		РезультатОтправки.Одобрено = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаПродолжения, РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти