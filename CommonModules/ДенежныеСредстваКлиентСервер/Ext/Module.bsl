
#Область СлужебныйПрограммныйИнтерфейс

#Область КлиентБанк

// Возвращает данные файла выписки
//
// Параметры:
//    СтрокиВыписки - Массив - Массив строк файла выписки
//    ЧитатьДокументы - Булево - Признак чтения всей выписки, включая документы.
//
// Возвращаемое значение:
//    Структура - Данные выписки
//
Функция РазобратьФайлВыписки1CClientBankExchange(СтрокиВыписки, ЧитатьДокументы = Истина) Экспорт
	

	Если ТипЗнч(СтрокиВыписки) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
	ЗаголовокВыписки        = Неопределено;
	СписокСчетовВыписки     = Новый Массив;
	РасчетныеСчетаВыписки   = Новый Массив;
	ДокументыВыписки        = Новый Массив;
	ОшибкиРазбора           = Новый Массив;
	СоответствиеЗаголовков  = СвязьТеговВыпискиСКлючами();
	
	Попытка
	
	КоличествоСтрок = СтрокиВыписки.Количество();
	ТекущаяСтрока = 1;
	Пока ТекущаяСтрока < КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки);
		
		Значение = "";
		Тег = "";
		РазобратьТеговуюСтроку(Стр, Тег, Значение);
		
		Если Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда //@NON-NLS-1
			
			Если Не ЧитатьДокументы Тогда
				Прервать;
			КонецЕсли;
			
			ТегиСтрокиДокумента = ТегиСтрокиДокумента();
			ТегиСтрокиДокумента.Операция = Значение;
			
			ЗагрузитьСекциюДокумента(ТегиСтрокиДокумента, ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки, СоответствиеЗаголовков);
			
			ДокументыВыписки.Добавить(ТегиСтрокиДокумента);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда //@NON-NLS-1
			
			СтруктураРССчет = ЗагрузитьСекциюРасчСчета(ТекущаяСтрока, КоличествоСтрок, СтрокиВыписки, СоответствиеЗаголовков);
			Если СтруктураРССчет <> Неопределено Тогда
				РасчетныеСчетаВыписки.Добавить(СтруктураРССчет);
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда //@NON-NLS-1
			
			Значение = "";
			Тег      = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			Если Тег = "РАСЧСЧЕТ" Тогда //@NON-NLS-1
				Если СписокСчетовВыписки.Найти(Значение) = Неопределено Тогда
					СписокСчетовВыписки.Добавить(Значение);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда //@NON-NLS-1
			Прервать;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда //@NON-NLS-1
			Продолжить;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, ТекущаяСтрока, ЗаголовокВыписки, СоответствиеЗаголовков);
			
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСчетовВыписки.Количество() = 0 Тогда
		
		Для Каждого СтрокаПоСчету Из РасчетныеСчетаВыписки Цикл
			
			Если СписокСчетовВыписки.Найти(СтрокаПоСчету.РасчСчет) = Неопределено Тогда
				СписокСчетовВыписки.Добавить(СтрокаПоСчету.РасчСчет);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Заголовок        = ЗаголовокВыписки;
	Результат.СписокСчетов     = СписокСчетовВыписки;
	Результат.РасчетныеСчета   = РасчетныеСчетаВыписки;
	Результат.ОшибкиРазбора    = ОшибкиРазбора;
	Результат.ДокументыВыписки = ДокументыВыписки;
	
	Исключение
		
		ОшибкиРазбора.Добавить(НСтр("ru = 'Структура файла не соответствует поддерживаемому формату.'"));
		
		Результат.Заголовок        = ЗаголовокВыписки;
		Результат.СписокСчетов     = СписокСчетовВыписки;
		Результат.РасчетныеСчета   = РасчетныеСчетаВыписки;
		Результат.ОшибкиРазбора    = ОшибкиРазбора;
		Результат.ДокументыВыписки = ДокументыВыписки;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Преобразует строку в значение типа Дата. При неудаче возвращает пустую дату.
//
// Параметры:
//    Источник - Строка - Преобразуемое значение.
//
// Возвращаемое значение:
//    Дата - Полученная дата
//
Функция ПолучитьДатуИзСтроки(Знач Источник) Экспорт
	
	Приемник = '00010101';
	
	Если ПустаяСтрока(Источник) Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Источник);
		
	Исключение
	
		Буфер = Источник;
		
		ПозицияТочки = СтрНайти(Буфер, ".");
		
		Если ПозицияТочки = 0 Тогда
			Возврат Приемник;
		КонецЕсли;
		
		ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
		Буфер = Сред(Буфер, ПозицияТочки + 1);
		
		ПозицияТочки = СтрНайти(Буфер, ".");
		
		Если ПозицияТочки = 0 Тогда
			Возврат Приемник;
		КонецЕсли;
		
		МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
		ГодДаты = Сред(Буфер, ПозицияТочки + 1);
		
		Попытка
			
			Если СтрДлина(ГодДаты) = 2 Тогда
			
				Если Число(ГодДаты) < 50 Тогда
					ГодДаты = "20" + ГодДаты;
				Иначе
					ГодДаты = "19" + ГодДаты;
				КонецЕсли;
			
			КонецЕсли;
			
		Исключение
			Возврат Приемник;
		КонецПопытки;
		
		Попытка
			
			Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
			
		Исключение
			
			Возврат Приемник;
			
		КонецПопытки;
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

// Преобразует строку в значение числового типа. При неудаче возвращает Неопределено.
//
// Параметры:
//    Буфер - Строка, Число - Преобразуемое значение.
//
// Возвращаемое значение:
//    Число - Полученное число
//
Функция ПреобразоватьВЧисло(Знач Буфер) Экспорт
	
	Если ТипЗнч(Буфер) = Тип("Число") Тогда
		Возврат Буфер;
	КонецЕсли;
	
	Буфер = СокрЛП(СтрЗаменить(Буфер, " ", ""));
	Если Не ПустаяСтрока(Буфер)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Результат = Число(Буфер);
		Если Результат < 0 Тогда
			Результат = - Результат;
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает пустую структуру для заполнения при чтении выписки из файла
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Номер - Строка - 
// * Дата - Строка -  
// * Сумма - Строка - 
// * ВидПлатежа - Строка -
// * ВидОплаты - Строка -
// * Операция - Строка -
// * КвитанцияДата - Строка -
// * КвитанцияВремя - Строка -
// * КвитанцияСодержание - Строка -
// * ДатаСписано - Строка -
// * ДатаПоступило - Строка -
// * ПлательщикСчет - Строка -
// * Плательщик - Строка -
// * ПлательщикИНН - Строка -
// * Плательщик1 - Строка -
// * ПлательщикНаименованиеМеждународное - Строка - 
// * ПлательщикСтрана - Строка -
// * ПлательщикРасчСчет - Строка -
// * ПлательщикБанк1 - Строка -
// * ПлательщикБанк2 - Строка -
// * ПлательщикБИК - Строка -
// * ПлательщикКорсчет - Строка -
// * ПлательщикБанк3 - Строка -
// * ПлательщикБанк4 - Строка -
// * ПлательщикБанк5 - Строка -
// * ПлательщикСВИФТ - Строка -
// * Плательщик2 - Строка -
// * Плательщик3 - Строка -
// * Плательщик4 - Строка -
// * ПолучательСчет - Строка -
// * Получатель - Строка -
// * ПолучательИНН - Строка -
// * Получатель1 - Строка -
// * ПолучательНаименованиеМеждународное - Строка - 
// * ПолучательСтрана - Строка -
// * ПолучательРасчСчет - Строка -
// * ПолучательБанк1 - Строка -
// * ПолучательБанк2 - Строка -
// * ПолучательБИК - Строка -
// * ПолучательКорсчет - Строка -
// * ПолучательБанк3 - Строка -
// * ПолучательБанк4 - Строка -
// * ПолучательБанк5 - Строка -
// * ПолучательСВИФТ - Строка -
// * Получатель2 - Строка -
// * Получатель3 - Строка -
// * Получатель4 - Строка -
// * СтатусСоставителя - Строка -
// * ПлательщикКПП - Строка -
// * ПолучательКПП - Строка -
// * ПоказательКБК - Строка -
// * ОКАТО - Строка -
// * ОКТМО - Строка -
// * ПоказательОснования - Строка - 
// * ПоказательПериода - Строка -
// * ПоказательНомера - Строка -
// * ПоказательДаты - Строка -
// * ПоказательТипа - Строка -
// * Код - Строка -
// * КодНазПлатежа - Строка -
// * НазначениеПлатежа - Строка -
// * НазначениеПлатежа1 - Строка -
// * НазначениеПлатежа2 - Строка -
// * НазначениеПлатежа3 - Строка -
// * НазначениеПлатежа4 - Строка -
// * НазначениеПлатежа5 - Строка -
// * НазначениеПлатежа6 - Строка -
// * СрокПлатежа - Строка -
// * Очередность - Строка -
// * УсловиеОплаты1 - Строка -
// * УсловиеОплаты2 - Строка -
// * УсловиеОплаты3 - Строка -
// * СрокАкцепта - Строка -
// * ВидАккредитива - Строка -
// * ПлатежПоПредст - Строка -
// * ДополнУсловия - Строка -
// * НомерСчетаПоставщика - Строка -
// * ДатаОтсылкиДок - Строка -
// * ДанныеВыписки - Строка -
Функция ТегиСтрокиДокумента() Экспорт
	
	Возврат Новый Структура(
		"Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты, Операция,
		|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
		|ДатаСписано, ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикИНН, Плательщик1, ПлательщикНаименованиеМеждународное, ПлательщикСтрана,
		|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
		|ПлательщикБанк3, ПлательщикБанк4, ПлательщикБанк5, ПлательщикСВИФТ,
		|Плательщик2, Плательщик3, Плательщик4,
		|ПолучательСчет, Получатель, ПолучательИНН, Получатель1, ПолучательНаименованиеМеждународное, ПолучательСтрана,
		|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
		|ПолучательБанк3, ПолучательБанк4, ПолучательБанк5, ПолучательСВИФТ,
		|Получатель2, Получатель3, Получатель4,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
		|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
		|Код,
		|КодНазПлатежа,
		|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,
		|СрокПлатежа, Очередность,
		|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
		|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок,
		|ДанныеВыписки
		//++ Локализация
		|, АналитическийКодРаздела, ПлательщикЛицевойСчет, ПолучательЛицевойСчет

		//-- Локализация
		|");
	
КонецФункции

// Шаблон структуры, который используется при чтении данных выписки из файла
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ДатаНачала - Дата - дата начала периода выписки банка
// * ДатаКонца - Дата - дата окончания периода выписки банка
// * РасчСчет - Строка - номер счета, по которому сформирована выписка
// * НачальныйОстаток - Число - остаток денежных средств на счете на начало периода выписки
// * ВсегоПоступило - Число - сумма поступивших денежных средств за период
// * ВсегоСписано - Число - сумма средств, списанных со счета за период
// * КонечныйОстаток - Число - остаток денежных средств на конец периода.
Функция ДанныеРасчетногоСчета() Экспорт
	
	Возврат Новый Структура("
		|ДатаНачала,
		|ДатаКонца,
		|РасчСчет,
		|НачальныйОстаток,
		|ВсегоПоступило,
		|ВсегоСписано,
		|КонечныйОстаток,
		|РазделЛицевогоСчета,
		|НомерЛицевогоСчета");
	
КонецФункции

// Возвращает признак наличия/отсутствия проверяемого номера счета в файле выписки.
// 
// Параметры:
//  Счет - ДанныеФормыЭлементКоллекции - счет для проверки.
//  ДанныеВыписки - Неопределено, Структура - Данные, полученные из файла выписки; могут быть получены из РазобратьФайлВыписки1CClientBankExchange.
// 
// Возвращаемое значение:
//  Булево - признак наличия/отсутствия счета в файле выписки
//
Функция ЕстьСчетВФайлеВыписки(Счет, ДанныеВыписки) Экспорт

	Результат = Ложь;
	
	Если ТипЗнч(ДанныеВыписки) = Тип("Структура") Тогда
		
		СписокСчетовВыписки = Новый Массив;
		СписокСчетовВыписки = ДанныеВыписки.СписокСчетов;
		
		Если ТипЗнч(СписокСчетовВыписки) = Тип("Массив") Тогда
			Результат = СписокСчетовВыписки.Найти(Счет.НомерСчета) <> Неопределено;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область УправлениеИнтерфейснымиЭлементамиФормы

// Производит настройку свойств элементов формы
// 
// Параметры:
//     Форма - ФормаКлиентскогоПриложения - Форма
//     ИзмененныйРеквизит - Строка - Реквизит, значение которого изменилось
//     ДополнительныеРеквизиты - Структура - Содержит имена и значения дополнительных реквизитов, принадлежащих форме
//
Процедура НастроитьЭлементыФормы(Форма, ИзмененныйРеквизит = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	СвойстваЭлементовФормы = СвойстваЭлементовФормы(Форма.Объект, Форма.НастройкиПолей, Форма.ЗависимостиПолей, ИзмененныйРеквизит, ДополнительныеРеквизиты);
	
	Для каждого СвойстваЭлемента Из СвойстваЭлементовФормы Цикл
		
		Если Не ЗначениеЗаполнено(СвойстваЭлемента.ИмяЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = ИмяЭлементаФормы(СвойстваЭлемента.ИмяЭлемента);
		
		Если СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" Тогда
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = СвойстваЭлемента.Значение;
			Форма.Элементы[ИмяЭлемента].АвтоОтметкаНезаполненного = Не СвойстваЭлемента.Значение;
		ИначеЕсли СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОчистки" Тогда
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = СвойстваЭлемента.Значение;
		ИначеЕсли СвойстваЭлемента.Свойство = "ВидимостьЭлемента" Тогда
			Форма.Элементы[ИмяЭлемента].Видимость = СвойстваЭлемента.Значение;
		Иначе
			Форма.Элементы[ИмяЭлемента][СвойстваЭлемента.Свойство] = СвойстваЭлемента.Значение;
		КонецЕсли;
		Если СвойстваЭлемента.Свойство = "АвтоОтметкаНезаполненного" И СвойстваЭлемента.Значение = Ложь
			Или СвойстваЭлемента.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И СвойстваЭлемента.Значение = Истина Тогда
			Форма.Элементы[ИмяЭлемента].ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет свойства элементов формы по переданным настройкам
// 
// Параметры:
//     Объект - ДанныеФормыСтруктура - Объект формы
//     НастройкиПолей - см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы
//     ЗависимостиПолей - см. ДенежныеСредстваСервер.ИнициализироватьЗависимостиПолейФормы
//     ИзмененныйРеквизит - Строка - Имя измененного реквизита формы
//     ДополнительныеРеквизиты - Структура, Неопределено - структура дополнительных реквизитов
//
// Возвращаемое значение:
//  Массив из ПолеФормы - массив значений свойств для элементов формы
//
Функция СвойстваЭлементовФормы(Объект, НастройкиПолей, ЗависимостиПолей = Неопределено, ИзмененныйРеквизит = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	СвойстваЭлементовФормы = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ИзмененныйРеквизит) Или Не ЗначениеЗаполнено(ЗависимостиПолей) Тогда
		
		Для каждого ЭлементНастройки Из НастройкиПолей Цикл
			
			ЗначениеУсловия = Неопределено;
			
			Для каждого Поле Из ЭлементНастройки.Поля Цикл
				
				Если ЗначениеУсловия = Неопределено Тогда
					УсловияЭлементаНастройки = ЭлементНастройки["Условие"]; // ОтборКомпоновкиДанных
					ЗначениеУсловия = ЗначениеУсловия(УсловияЭлементаНастройки.Элементы, Объект,, ДополнительныеРеквизиты);
				КонецЕсли;
				
				Для каждого Свойство Из ЭлементНастройки.Свойства Цикл
					
					Если Свойство.Значение = Неопределено
						Или ТипЗнч(Свойство.Значение) = Тип("Булево") Тогда
						
						Если Свойство.Значение = Неопределено Тогда
							ЗначениеСвойства = ЗначениеУсловия;
						ИначеЕсли Свойство.Значение Тогда
							ЗначениеСвойства = ЗначениеУсловия;
						Иначе
							ЗначениеСвойства = Не ЗначениеУсловия;
						КонецЕсли;
						
						ДобавитьСвойствоПоляФормы(Поле, Свойство.Ключ, ЗначениеСвойства, СвойстваЭлементовФормы);
					Иначе
						Если Не ЗначениеЗаполнено(ЗначениеУсловия) Или ЗначениеУсловия Тогда
							ДобавитьСвойствоПоляФормы(Поле, Свойство.Ключ, Свойство.Значение, СвойстваЭлементовФормы);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		ЗависимыеПоля = Неопределено;
		
		ИзмененныеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмененныйРеквизит,,, Истина);
		
		Для каждого ЗначениеРеквизита Из ИзмененныеРеквизиты Цикл
			
			НайденныеСтроки = ЗависимостиПолей.НайтиСтроки(Новый Структура("ИмяРеквизита", ЗначениеРеквизита));
			Если НайденныеСтроки.Количество() Тогда
				ЗависимыеПоля = НайденныеСтроки[0].ЗависимыеПоля;
			КонецЕсли;
			
			Если ЗависимыеПоля <> Неопределено Тогда
				
				Для каждого ЭлементНастройки Из НастройкиПолей Цикл
					
					ЗначениеУсловия = Неопределено;
					
					Для каждого Поле Из ЭлементНастройки.Поля Цикл
						
						Если ЗависимыеПоля.Найти(Поле) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЗначениеУсловия = Неопределено Тогда
							УсловияЭлементаНастройки = ЭлементНастройки["Условие"]; // ОтборКомпоновкиДанных
							ЗначениеУсловия = ЗначениеУсловия(УсловияЭлементаНастройки.Элементы, Объект,, ДополнительныеРеквизиты);
						КонецЕсли;
						
						Для каждого Свойство Из ЭлементНастройки.Свойства Цикл
							
							Если Свойство.Значение = Неопределено
								Или ТипЗнч(Свойство.Значение) = Тип("Булево") Тогда
								
								Если Свойство.Значение = Неопределено Тогда
									ЗначениеСвойства = ЗначениеУсловия;
								ИначеЕсли Свойство.Значение Тогда
									ЗначениеСвойства = ЗначениеУсловия;
								Иначе
									ЗначениеСвойства = Не ЗначениеУсловия;
								КонецЕсли;
								
								ДобавитьСвойствоПоляФормы(Поле, Свойство.Ключ, ЗначениеСвойства, СвойстваЭлементовФормы);
							Иначе
								Если Не ЗначениеЗаполнено(ЗначениеУсловия) Или ЗначениеУсловия Тогда
									ДобавитьСвойствоПоляФормы(Поле, Свойство.Ключ, Свойство.Значение, СвойстваЭлементовФормы);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СвойстваЭлементовФормы;
	
КонецФункции

// Заполняет название группы, содержащее основные реквизиты банка
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма банковского счета организации или контрагента.
Процедура ЗаполнитьОсновныеРеквизитыБанка(Форма) Экспорт

	НеразрывныйПробел = Символ(160);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Банк) И Не Форма.Объект.РучноеИзменениеРеквизитовБанка Тогда
		Форма.ЗаголовокСтраницаБанк = НСтр("ru = 'Ввести реквизиты банка вручную...'");
		Возврат
	КонецЕсли;
	
	ВыводимыеРеквизиты = Новый Массив;
	ЕстьДанные = Ложь;
	
	Если Форма.Объект.РучноеИзменениеРеквизитовБанка Тогда
		Если Форма.НациональныеРеквизитыБанковскихСчетов Тогда
			Если Не ПустаяСтрока(Форма.НаименованиеБанка) Тогда
				НаименованиеБанка = Форма.НаименованиеБанка;
				ЕстьДанные = Истина;
			ИначеЕсли Форма.МеждународныеРеквизитыБанковскихСчетов
				И ЗначениеЗаполнено(Форма.НаименованиеБанкаМеждународное) Тогда
				НаименованиеБанка = Форма.НаименованиеБанкаМеждународное;
			Иначе
				НаименованиеБанка = НСтр("ru = '<не указано>'");
			КонецЕсли;
		Иначе
			Если Не ПустаяСтрока(Форма.НаименованиеБанкаМеждународное) Тогда
				НаименованиеБанка = Форма.НаименованиеБанкаМеждународное;
				ЕстьДанные = Истина;
			Иначе
				НаименованиеБанка = НСтр("ru = '<не указано>'");
			КонецЕсли;
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(СтрЗаменить(НаименованиеБанка, "", НеразрывныйПробел));
	КонецЕсли;
	
	Если Форма.НациональныеРеквизитыБанковскихСчетов Тогда
		Если Не ПустаяСтрока(Форма.БИКБанка) Тогда
			БИКБанка = СокрЛП(Форма.БИКБанка);
			ЕстьДанные = Истина;
		Иначе
			БИКБанка = НСтр("ru = '<не указан>'");
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(Форма.Элементы.БИКБанка.Заголовок + ":" + НеразрывныйПробел + БИКБанка);
	КонецЕсли;
	
	Если Форма.МеждународныеРеквизитыБанковскихСчетов Тогда
		Если Не ПустаяСтрока(Форма.СВИФТБанка) Тогда
			СВИФТБанка = СокрЛП(Форма.СВИФТБанка);
			ЕстьДанные = Истина;
		Иначе
			СВИФТБанка = НСтр("ru = '<не указан>'");
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(СтрЗаменить(Форма.Элементы.СВИФТБанка.Заголовок, " ", НеразрывныйПробел) + ":"
			+ НеразрывныйПробел + СВИФТБанка);
			
		Если ЗначениеЗаполнено(Форма.СтранаБанка) Тогда
			
			ЕстьДанные = Истина;
			ВыводимыеРеквизиты.Добавить(Строка(Форма.СтранаБанка));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИспользуетсяБанкДляРасчетов Тогда
		Значение = ?(Форма.Элементы.КоррСчетБанка.Видимость, Форма.КоррСчетБанка, Форма.Объект.СчетВБанкеДляРасчетов);
		Если НЕ ПустаяСтрока(Значение) Тогда
			Значение = СокрЛП(Значение);
			ЕстьДанные = Истина;
		Иначе
			Значение = НСтр("ru = '<не указан>'");
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(СтрЗаменить(Форма.Элементы.КоррСчетБанка.Заголовок, " ", НеразрывныйПробел) + ":"
			+ НеразрывныйПробел + Значение);
	КонецЕсли;
	
	Если Форма.Объект.РучноеИзменениеРеквизитовБанка И НЕ ЕстьДанные Тогда
		Форма.ЗаголовокСтраницаБанк = НСтр("ru = 'Ввести реквизиты банка вручную...'");
	Иначе
		Форма.ЗаголовокСтраницаБанк = СтрСоединить(ВыводимыеРеквизиты, "; ");
		Форма.Элементы.Банк.ПодсказкаВвода = НСтр("ru = '<реквизиты банка введены вручную>'");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет название группы, содержащее основные реквизиты банка для расчетов
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма банковского счета организации или контрагента.
Процедура ЗаполнитьОсновныеРеквизитыБанкаДляРасчетов(Форма) Экспорт

	НеразрывныйПробел = Символ(160);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.БанкДляРасчетов)
		И Не Форма.Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
		Форма.ЗаголовокСтраницаБанкДляРасчетов = НСтр("ru = 'Ввести реквизиты банка вручную...'");
		Возврат
	КонецЕсли;
	
	ВыводимыеРеквизиты = Новый Массив;
	ЕстьДанные = Ложь;
	
	Если Форма.Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
		Если Форма.НациональныеРеквизитыБанковскихСчетов Тогда
			Если НЕ ПустаяСтрока(Форма.НаименованиеБанкаДляРасчетов) Тогда
				НаименованиеБанкаДляРасчетов = СокрЛП(Форма.НаименованиеБанкаДляРасчетов);
				ЕстьДанные = Истина;
			ИначеЕсли Форма.МеждународныеРеквизитыБанковскихСчетов
				И ЗначениеЗаполнено(Форма.НаименованиеБанкаДляРасчетовМеждународное) Тогда
				НаименованиеБанкаДляРасчетов = Форма.НаименованиеБанкаДляРасчетовМеждународное;
			Иначе
				НаименованиеБанкаДляРасчетов = НСтр("ru = '<не указано>'");
			КонецЕсли;
		Иначе
			Если Не ПустаяСтрока(Форма.НаименованиеБанкаДляРасчетовМеждународное) Тогда
				НаименованиеБанкаДляРасчетов = СокрЛП(Форма.НаименованиеБанкаДляРасчетовМеждународное);
				ЕстьДанные = Истина;
			Иначе
				НаименованиеБанкаДляРасчетов = НСтр("ru = '<не указано>'");
			КонецЕсли;
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(СтрЗаменить(НаименованиеБанкаДляРасчетов, "", НеразрывныйПробел));
	КонецЕсли;
	
	Если Форма.НациональныеРеквизитыБанковскихСчетов Тогда
		Если Не ПустаяСтрока(Форма.БИКБанкаДляРасчетов) Тогда
			БИКБанкаДляРасчетов = СокрЛП(Форма.БИКБанкаДляРасчетов);
			ЕстьДанные = Истина;
		Иначе
			БИКБанкаДляРасчетов = НСтр("ru = '<не указан>'");
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(
			Форма.Элементы.БИКБанкаДляРасчетов.Заголовок + ":" + НеразрывныйПробел + БИКБанкаДляРасчетов);
	КонецЕсли;
	
	Если Форма.МеждународныеРеквизитыБанковскихСчетов Тогда
		Если Не ПустаяСтрока(Форма.СВИФТБанкаДляРасчетов) Тогда
			СВИФТБанкаДляРасчетов = СокрЛП(Форма.СВИФТБанкаДляРасчетов);
			ЕстьДанные = Истина;
		Иначе
			СВИФТБанкаДляРасчетов = НСтр("ru = '<не указан>'");
		КонецЕсли;
		ВыводимыеРеквизиты.Добавить(СтрЗаменить(Форма.Элементы.СВИФТБанкаДляРасчетов.Заголовок, " ", НеразрывныйПробел)
			+ ":" + НеразрывныйПробел + СВИФТБанкаДляРасчетов);
	КонецЕсли;
	
	Если Форма.Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов И НЕ ЕстьДанные Тогда
		Форма.ЗаголовокСтраницаБанкДляРасчетов = НСтр("ru = 'Ввести реквизиты банка вручную...'");
	Иначе
		Форма.ЗаголовокСтраницаБанкДляРасчетов = СтрСоединить(ВыводимыеРеквизиты, "; ");
		Форма.Элементы.БанкДляРасчетов.ПодсказкаВвода = НСтр("ru = '<реквизиты банка введены вручную>'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак нулевой ставки НДС.
// 
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - выбранная ставка НДС.
// 
// Возвращаемое значение:
//  Булево - признак нулевой ставки НДС
Функция ЭтоНулеваяСтавкаНДС(СтавкаНДС) Экспорт
	
	СтавкиБезНДС = УчетНДСУПСлужебныйКлиентСерверПовтИсп.СписокНезначащихСтавок();
	СтавкиБезНДС.Добавить(ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	
	Возврат СтавкиБезНДС.НайтиПоЗначению(СтавкаНДС) <> Неопределено;

КонецФункции

#КонецОбласти

#Область ПлатежныйКалендарь

Процедура ПересчитатьПодчиненныеСтрокиДерева(СтрокаДерева, ДнейПланирования) Экспорт
	
	Если СтрокаДерева.ВидСтроки = 0 Тогда // Остаток в валюте ДС, либо в валюте платежа
		
		НачальныйОстаток = СтрокаДерева.Остаток;
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = НачальныйОстаток + СтрокаДерева["День" + Инд + "ВВалюте"];
			НачальныйОстаток = СтрокаДерева["День" + Инд];
		КонецЦикла;
		
		СтрокаДерева.День0 = СтрокаДерева.Просрочено;
		
	ИначеЕсли СтрокаДерева.ВидСтроки = 2 Тогда // Остаток в одной валюте
		
		СтрокаДерева.Остаток = СтрокаДерева.ОстатокВОднойВалюте;
		НачальныйОстаток = СтрокаДерева.ОстатокВОднойВалюте;
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = НачальныйОстаток + СтрокаДерева["День" + Инд + "ВОднойВалюте"];
			НачальныйОстаток = СтрокаДерева["День" + Инд];
		КонецЦикла;
		
		СтрокаДерева.День0 = СтрокаДерева.ПросроченоВОднойВалюте;
		
	ИначеЕсли СтрокаДерева.ВидСтроки = 1 Тогда // Оборот в валюте ДС, либо в валюте платежа
		
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = СтрокаДерева["День" + Инд + "ВВалюте"];
		КонецЦикла;
		
		СтрокаДерева.День0 = СтрокаДерева.Просрочено;
		
	ИначеЕсли СтрокаДерева.ВидСтроки = 3 Тогда // Оборот в одной валюте
		
		Для Инд = 0 По ДнейПланирования Цикл
			СтрокаДерева["День" + Инд] = СтрокаДерева["День" + Инд + "ВОднойВалюте"];
		КонецЦикла;
		
		СтрокаДерева.День0 = СтрокаДерева.ПросроченоВОднойВалюте;
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Строки = СтрокаДерева.ПолучитьЭлементы();
	Иначе
		Строки = СтрокаДерева.Строки;
	КонецЕсли;
		
	Для каждого СтрокаДерева Из Строки Цикл
		ПересчитатьПодчиненныеСтрокиДерева(СтрокаДерева, ДнейПланирования);
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаПлатежа(ПланироватьСДаты, День) Экспорт
	
	Возврат ПланироватьСДаты + 86400 * (День - 1);
	
КонецФункции

Функция ДеньПлатежа(ПланироватьСДаты, ДатаПлатежа) Экспорт
	
	Если ПланироватьСДаты > ДатаПлатежа Тогда
		Возврат 0;
	Иначе
		Возврат (ДатаПлатежа - ПланироватьСДаты)/86400 + 1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Эквайринг

Функция РассчитатьСуммуКомиссии(Сумма, Ставка, ВСумме = Ложь) Экспорт
	
	Если ВСумме Тогда
		Если Ставка <> 100 Тогда
			Возврат Сумма * Ставка / (100 - Ставка);
		Иначе
			Возврат Сумма;
		КонецЕсли;
	Иначе
		Возврат Сумма / 100 * Ставка;
	КонецЕсли;
	
КонецФункции

Функция РассчитатьСтавкуКомиссии(Сумма, Комиссия, ВСумме = Ложь) Экспорт
	
	Если ВСумме Тогда
		Если Сумма<>0 Или Комиссия<>0 Тогда
			Возврат Комиссия / (Сумма + Комиссия) * 100;
		Иначе
			Возврат 0;
		КонецЕсли;
	Иначе
		Если Сумма<>0 Тогда
			Возврат Комиссия / Сумма * 100;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Взаиморасчеты

Процедура РассчитатьСуммуВзаиморасчетовВСтрокеРасшифровки(СтрокаТЧ, ВалютаДокумента, ВалютаРеглУчета) Экспорт
	
	Если ВалютаДокумента = ВалютаРеглУчета Тогда
		Если СтрокаТЧ.КурсЧислительВзаиморасчетов <> 0 Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма / СтрокаТЧ.КурсЧислительВзаиморасчетов * СтрокаТЧ.КурсЗнаменательВзаиморасчетов;
		Иначе
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЕсли;
	Иначе
		Если СтрокаТЧ.КурсЗнаменательВзаиморасчетов <> 0 Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма * СтрокаТЧ.КурсЧислительВзаиморасчетов / СтрокаТЧ.КурсЗнаменательВзаиморасчетов;
		Иначе
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуВСтрокеРасшифровки(СтрокаТЧ, ВалютаДокумента, ВалютаРеглУчета) Экспорт
	
	Если ВалютаДокумента = ВалютаРеглУчета Тогда
		Если СтрокаТЧ.КурсЗнаменательВзаиморасчетов <> 0 Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВзаиморасчетов * СтрокаТЧ.КурсЧислительВзаиморасчетов / СтрокаТЧ.КурсЗнаменательВзаиморасчетов;
		Иначе
			СтрокаТЧ.Сумма = 0;
		КонецЕсли;
	Иначе
		Если СтрокаТЧ.КурсЧислительВзаиморасчетов <> 0 Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.СуммаВзаиморасчетов / СтрокаТЧ.КурсЧислительВзаиморасчетов * СтрокаТЧ.КурсЗнаменательВзаиморасчетов;
		Иначе
			СтрокаТЧ.Сумма = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКурсЧислительВзаиморасчетовВСтрокеРасшифровки(СтрокаТЧ, ВалютаДокумента, ВалютаРеглУчета) Экспорт
	
	Если СтрокаТЧ.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		СтрокаТЧ.КурсЧислительВзаиморасчетов = 1;
		
	ИначеЕсли ВалютаДокумента = ВалютаРеглУчета Тогда
		
		Если СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаТЧ.КурсЧислительВзаиморасчетов = СтрокаТЧ.Сумма / СтрокаТЧ.СуммаВзаиморасчетов * СтрокаТЧ.КурсЗнаменательВзаиморасчетов;
		Иначе
			СтрокаТЧ.КурсЧислительВзаиморасчетов = 1;
		КонецЕсли;
	Иначе
		Если СтрокаТЧ.Сумма <> 0 Тогда
			СтрокаТЧ.КурсЧислительВзаиморасчетов = СтрокаТЧ.СуммаВзаиморасчетов / СтрокаТЧ.Сумма * СтрокаТЧ.КурсЗнаменательВзаиморасчетов;
		Иначе
			СтрокаТЧ.КурсЧислительВзаиморасчетов = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьКурсЗнаменательТекстом(СтрокаТЧ, ВалютаДокумента, ВалютаРеглУчета) Экспорт
	
	ШаблонКратности = НСтр("ru = '%1 за %2 %3'");
	Если ВалютаДокумента = ВалютаРеглУчета Тогда
		СтрокаТЧ.КурсЗнаменательВзаиморасчетовНадпись = СтрШаблон(ШаблонКратности,
			ВалютаДокумента, СтрокаТЧ.КурсЗнаменательВзаиморасчетов, СтрокаТЧ.ВалютаВзаиморасчетов);
	Иначе
		СтрокаТЧ.КурсЗнаменательВзаиморасчетовНадпись = СтрШаблон(ШаблонКратности,
			СтрокаТЧ.ВалютаВзаиморасчетов, СтрокаТЧ.КурсЗнаменательВзаиморасчетов, ВалютаДокумента);
	КонецЕсли;
	
	ШаблонКурса = "%1 %2 = %3 %4";
	Если СтрокаТЧ.КурсЧислительВзаиморасчетов <> 0 Тогда
		Если ВалютаДокумента = ВалютаРеглУчета Тогда
			
			СтрокаТЧ.КурсЧислительВзаиморасчетовТекст = СтрШаблон(ШаблонКурса,
				СтрокаТЧ.КурсЗнаменательВзаиморасчетов,
				СтрокаТЧ.ВалютаВзаиморасчетов,
				Строка(Формат(СтрокаТЧ.КурсЧислительВзаиморасчетов, "ЧДЦ=4")),
				ВалютаДокумента);
		Иначе
			СтрокаТЧ.КурсЧислительВзаиморасчетовТекст = СтрШаблон(ШаблонКурса,
				СтрокаТЧ.КурсЗнаменательВзаиморасчетов,
				ВалютаДокумента,
				Строка(Формат(СтрокаТЧ.КурсЧислительВзаиморасчетов, "ЧДЦ=4")),
				СтрокаТЧ.ВалютаВзаиморасчетов);
		КонецЕсли;
	Иначе
		СтрокаТЧ.КурсЧислительВзаиморасчетовТекст = "0";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеждународныеБанковскиеСчета

Функция НомерСчетаСоответствуетБанку(НомерСчета, SWIFT) Экспорт
	
	КодСтраныВСчете = КодСтраныIBAN(НомерСчета);
	КодСтраныВБанке = КодСтраныSWIFT(SWIFT);
	Возврат КодСтраныВСчете = КодСтраныВБанке
	
КонецФункции

// Проверяет длину номер счета IBAN
// 
// Параметры:
// 	НомерСчета - Строка - номер счета в формате IBAN
// Возвращаемое значение:
// 	Булево - если Истина, то длина номера соответствует справочным данным.
Функция ПравильнаяДлинаIBAN(НомерСчета) Экспорт
	
	НомерСчета = СокрЛП(НомерСчета);
	
	Если НЕ ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыСчетовIBAN = ПараметрыСчетовIBAN();
	КодСтраны = КодСтраныIBAN(НомерСчета);
	ДлинаСчета = ПараметрыСчетовIBAN.Получить(КодСтраны);
	Возврат ДлинаСчета = СтрДлина(НомерСчета)
	
КонецФункции

// Функция проверяет контрольную сумму в счете IBAN.
// Алгоритм проверки описан в ECBS EBS204 v.3.1. (August 2002), стр 12.
//
// Параметры:
//  IBAN - Строка - номер счета в формате IBAN, который необходимо проверить.
// 
// Возвращаемое значение:
//  Булево - Признак корректности IBAN
//
Функция ВерныйКонтрольныйКлючIBAN(IBAN) Экспорт
	
	// Предварительный этап. Удаляем лишние пробелы в IBAN т.к. он может быть указан в бумажном формате.
	ПроверяемыйIBAN  = СтрЗаменить(IBAN, " ", "");
	
	// 1. Передвигаем первые 4 символа в правую часть IBAN.
	ПроверяемыйIBAN = Сред(ПроверяемыйIBAN, 5) + Лев(ПроверяемыйIBAN, 4);
	
	// 2. Преобразуем буквы в числа согласно таблице конвертации.
	// 
	// A = 10  G = 16  M = 22  S = 28  Y = 34
	// B = 11  H = 17  N = 23  T = 29  Z = 35
	// C = 12  I = 18  O = 24  U = 30
	// D = 13  J = 19  P = 25  V = 31
	// E = 14  K = 20  Q = 26  W = 32
	// F = 15  L = 21  R = 27  X = 33
	
	БуквыДляКонвертации = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	Для ИндексБуквы = 1 По СтрДлина(БуквыДляКонвертации) Цикл
		
		КонвертируемаяБуква = Сред(БуквыДляКонвертации, ИндексБуквы, 1);
		КонвертируемаяЦифра = ИндексБуквы + 9;
		
		ПроверяемыйIBAN = СтрЗаменить(ПроверяемыйIBAN, КонвертируемаяБуква, КонвертируемаяЦифра);
		
	КонецЦикла;
	
	ОстатокПроверяемыйIBAN = ПроверяемыйIBAN;
	ДлинаПроверяемогоОтрезка = 9;
	ТипЧисло = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(ДлинаПроверяемогоОтрезка,0));
	КонтрольнаяЦифра = 0;
	КонтрольнаяЦифраСтрока = "";
	// IBAN требует число длиной до 34 знаков, а веб-клиент поддерживает число длиной до 10 знаков,
	// поэтому разбиваем строку на числа в 9 знаков.
	Пока Не ПустаяСтрока(ОстатокПроверяемыйIBAN) Цикл
		
		ЧислоСимволов = Мин(ДлинаПроверяемогоОтрезка - СтрДлина(КонтрольнаяЦифраСтрока),
			СтрДлина(ОстатокПроверяемыйIBAN));
		
		ПроверяемыйIBANСтрока = Строка(КонтрольнаяЦифраСтрока) + Сред(ОстатокПроверяемыйIBAN, 1, ЧислоСимволов);
		
		ПроверяемыйIBANЧисло = ТипЧисло.ПривестиЗначение(ПроверяемыйIBANСтрока);
		
		// 3. Применяем Mod 97-10 (ISO 7064).
		// Если остаток равен 1 тогда
		// это признак того, что счет корректный.
		КонтрольнаяЦифра = ПроверяемыйIBANЧисло % 97;
		
		КонтрольнаяЦифраСтрока = Строка(КонтрольнаяЦифра);
		ОстатокПроверяемыйIBAN = Сред(ОстатокПроверяемыйIBAN, ЧислоСимволов +1);
		
	КонецЦикла;
	
	Возврат КонтрольнаяЦифра = 1;
	
КонецФункции

// Получает код страны из номера счета IBAN
// 
// Параметры:
// 	НомерСчетаIBAN - Строка - номер счета в формате IBAN
// Возвращаемое значение:
// 	Строка - Код страны
Функция КодСтраныIBAN(НомерСчетаIBAN) Экспорт
	
	Возврат Лев(НомерСчетаIBAN, 2);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборВыписки

Процедура ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТекущаяСтрока, ЗаголовокВыписки, СоответствиеЗаголовков)
	
	Если ТипЗнч(ЗаголовокВыписки) = Тип("Неопределено") Тогда
		ЗаголовокВыписки = Новый Структура(
			ВРЕГ("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца"));
	КонецЕсли;
	
	Значение = ""; Тег = "";
	
	Если РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение) Тогда
		
		Если СоответствиеЗаголовков.Получить(Тег) <> Неопределено Тогда
		
			Если ЗаголовокВыписки.Свойство(СоответствиеЗаголовков[Тег]) Тогда
				ЗаголовокВыписки[СоответствиеЗаголовков[Тег]] = Значение;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокВыписки.ДатаНачала = ПолучитьДатуИзСтроки(ЗаголовокВыписки.ДатаНачала);
	ЗаголовокВыписки.ДатаКонца = ПолучитьДатуИзСтроки(ЗаголовокВыписки.ДатаКонца);
	
КонецПроцедуры

Функция ЗагрузитьСекциюРасчСчета(ТекущаяСтрока, КоличествоСтрок, МассивСтрок, СоответствиеЗаголовков)
	
	ТегиРасчетногоСчета = ДанныеРасчетногоСчета();
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
	
	Значение = ""; Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если СоответствиеЗаголовков.Получить(Тег) <> Неопределено Тогда
			
			Если ТегиРасчетногоСчета.Свойство(СоответствиеЗаголовков[Тег]) Тогда
				ТегиРасчетногоСчета[СоответствиеЗаголовков[Тег]] = Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
		
		Значение = ""; Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда //@NON-NLS-1
		Возврат ТегиРасчетногоСчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьСекциюДокумента(СтрокаДокумента, ТекущаяСтрока, КоличествоСтрок, МассивСтрок, СоответствиеЗаголовков)
	
	СекцияДокумента = "СЕКЦИЯДОКУМЕНТ=" + СтрокаДокумента.Операция + Символы.ПС; //@NON-NLS-1
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл //@NON-NLS-1
		Тег      = "";
		Значение = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			СекцияДокумента = СекцияДокумента + СтрокаРазбора + Символы.ПС;
			
			Если СоответствиеЗаголовков.Получить(Тег) <> Неопределено Тогда
			
				Если СтрокаДокумента.Свойство(СоответствиеЗаголовков[Тег]) Тогда
					
					Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(СтрокаДокумента[СоответствиеЗаголовков[Тег]]) Тогда
						СтрокаДокумента[СоответствиеЗаголовков[Тег]] = Значение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок);
		
	КонецЦикла;
	
	СтрокаДокумента.ДанныеВыписки = СекцияДокумента + "КОНЕЦДОКУМЕНТА"; //@NON-NLS-1
	
КонецПроцедуры

Функция ПолучитьСтрокуИмпорта(ТекущаяСтрока, КоличествоСтрок, МассивСтрок)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер) ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если ТекущаяСтрока > КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		Буфер = МассивСтрок[ТекущаяСтрока - 1];
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Функция СвязьТеговВыпискиСКлючами()
	
	Связь = Новый Соответствие;
	Связь.Вставить(ВРег("ВерсияФормата"),		"ВерсияФормата"); //@NON-NLS-1
	Связь.Вставить(ВРег("Кодировка"),			"Кодировка"); //@NON-NLS-1
	Связь.Вставить(ВРег("Отправитель"),			"Отправитель"); //@NON-NLS-1
	Связь.Вставить(ВРег("Получатель"),			"Получатель"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДатаСоздания"),		"ДатаСоздания"); //@NON-NLS-1
	Связь.Вставить(ВРег("ВремяСоздания"),		"ВремяСоздания"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДатаНачала"),			"ДатаНачала"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДатаКонца"),			"ДатаКонца"); //@NON-NLS-1
	Связь.Вставить(ВРег("РасчСчет"),			"РасчСчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("НачальныйОстаток"),	"НачальныйОстаток"); //@NON-NLS-1
	Связь.Вставить(ВРег("ВсегоПоступило"),		"ВсегоПоступило"); //@NON-NLS-1
	Связь.Вставить(ВРег("ВсегоСписано"),		"ВсегоСписано"); //@NON-NLS-1
	Связь.Вставить(ВРег("КонечныйОстаток"),		"КонечныйОстаток"); //@NON-NLS-1
	Связь.Вставить(ВРег("Номер"),				"Номер"); //@NON-NLS-1
	Связь.Вставить(ВРег("Дата"),				"Дата"); //@NON-NLS-1
	Связь.Вставить(ВРег("Сумма"),				"Сумма"); //@NON-NLS-1
	Связь.Вставить(ВРег("ВидПлатежа"),			"ВидПлатежа"); //@NON-NLS-1
	Связь.Вставить(ВРег("ВидОплаты"),			"ВидОплаты"); //@NON-NLS-1
	Связь.Вставить(ВРег("Операция"),			"Операция"); //@NON-NLS-1
	Связь.Вставить(ВРег("КвитанцияДата"),		"КвитанцияДата"); //@NON-NLS-1
	Связь.Вставить(ВРег("КвитанцияВремя"),		"КвитанцияВремя"); //@NON-NLS-1
	Связь.Вставить(ВРег("КвитанцияСодержание"),	"КвитанцияСодержание"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДатаСписано"),			"ДатаСписано"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДатаПоступило"),		"ДатаПоступило"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикСчет"),		"ПлательщикСчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("Плательщик"),			"Плательщик"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикИНН"),		"ПлательщикИНН"); //@NON-NLS-1
	Связь.Вставить(ВРег("Плательщик1"),			"Плательщик1"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикНаименованиеМеждународное"),	"ПлательщикНаименованиеМеждународное"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикСтрана"),	"ПлательщикСтрана"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикРасчСчет"),	"ПлательщикРасчСчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикБанк1"),		"ПлательщикБанк1"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикБанк2"),		"ПлательщикБанк2"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикБИК"),		"ПлательщикБИК"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикКорсчет"),	"ПлательщикКорсчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикБанк3"),		"ПлательщикБанк3"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикБанк4"),		"ПлательщикБанк4"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикБанк5"),		"ПлательщикБанк5"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикСВИФТ"),		"ПлательщикСВИФТ"); //@NON-NLS-1
	Связь.Вставить(ВРег("Плательщик2"),			"Плательщик2"); //@NON-NLS-1
	Связь.Вставить(ВРег("Плательщик3"),			"Плательщик3"); //@NON-NLS-1
	Связь.Вставить(ВРег("Плательщик4"),			"Плательщик4"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательСчет"),		"ПолучательСчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("Получатель"),			"Получатель"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательИНН"),		"ПолучательИНН"); //@NON-NLS-1
	Связь.Вставить(ВРег("Получатель1"),			"Получатель1"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательНаименованиеМеждународное"),	"ПолучательНаименованиеМеждународное"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательСтрана"),	"ПолучательСтрана"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательРасчСчет"),	"ПолучательРасчСчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательБанк1"),		"ПолучательБанк1"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательБанк2"),		"ПолучательБанк2"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательБИК"),		"ПолучательБИК"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательКорсчет"),	"ПолучательКорсчет"); //@NON-NLS-1
	Связь.Вставить(ВРег("Получатель2"),			"Получатель2"); //@NON-NLS-1
	Связь.Вставить(ВРег("Получатель3"),			"Получатель3"); //@NON-NLS-1
	Связь.Вставить(ВРег("Получатель4"),			"Получатель4"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательБанк3"),		"ПолучательБанк3"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательБанк4"),		"ПолучательБанк4"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательБанк5"),		"ПолучательБанк5"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательСВИФТ"),		"ПолучательСВИФТ"); //@NON-NLS-1
	Связь.Вставить(ВРег("СтатусСоставителя"),	"СтатусСоставителя"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлательщикКПП"),		"ПлательщикКПП"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПолучательКПП"),		"ПолучательКПП"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПоказательКБК"),		"ПоказательКБК"); //@NON-NLS-1
	Связь.Вставить(ВРег("ОКАТО"),				"ОКАТО"); //@NON-NLS-1
	Связь.Вставить(ВРег("ОКТМО"),				"ОКТМО"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПоказательОснования"),	"ПоказательОснования"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПоказательПериода"),	"ПоказательПериода"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПоказательНомера"),	"ПоказательНомера"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПоказательДаты"),		"ПоказательДаты"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПоказательТипа"),		"ПоказательТипа"); //@NON-NLS-1
	Связь.Вставить(ВРег("Код"),					"Код"); //@NON-NLS-1
	Связь.Вставить(ВРег("КодНазПлатежа"),		"КодНазПлатежа"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа"),	"НазначениеПлатежа"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа1"),	"НазначениеПлатежа1"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа2"),	"НазначениеПлатежа2"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа3"),	"НазначениеПлатежа3"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа4"),	"НазначениеПлатежа4"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа5"),	"НазначениеПлатежа5"); //@NON-NLS-1
	Связь.Вставить(ВРег("НазначениеПлатежа6"),	"НазначениеПлатежа6"); //@NON-NLS-1
	Связь.Вставить(ВРег("СрокПлатежа"),			"СрокПлатежа"); //@NON-NLS-1
	Связь.Вставить(ВРег("Очередность"),			"Очередность"); //@NON-NLS-1
	Связь.Вставить(ВРег("УсловиеОплаты1"),		"УсловиеОплаты1"); //@NON-NLS-1
	Связь.Вставить(ВРег("УсловиеОплаты2"),		"УсловиеОплаты2"); //@NON-NLS-1
	Связь.Вставить(ВРег("УсловиеОплаты3"),		"УсловиеОплаты3"); //@NON-NLS-1
	Связь.Вставить(ВРег("СрокАкцепта"),			"СрокАкцепта"); //@NON-NLS-1
	Связь.Вставить(ВРег("ВидАккредитива"),		"ВидАккредитива"); //@NON-NLS-1
	Связь.Вставить(ВРег("ПлатежПоПредст"),		"ПлатежПоПредст"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДополнУсловия"),		"ДополнУсловия"); //@NON-NLS-1
	Связь.Вставить(ВРег("НомерСчетаПоставщика"),"НомерСчетаПоставщика"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДатаОтсылкиДок"),		"ДатаОтсылкиДок"); //@NON-NLS-1
	Связь.Вставить(ВРег("ДанныеВыписки"),		"ДанныеВыписки"); //@NON-NLS-1
	
	Возврат Связь;
	
КонецФункции

#КонецОбласти

#Область УправлениеИнтерфейснымиЭлементамиФормы

Процедура ДобавитьСвойствоПоляФормы(ИмяЭлемента, Свойство, Значение, СвойстваПолейФормы)
	
	НовоеСвойство = Новый Структура;
	НовоеСвойство.Вставить("ИмяЭлемента", ИмяЭлемента);
	НовоеСвойство.Вставить("Свойство", Свойство);
	НовоеСвойство.Вставить("Значение", Значение);
	
	СвойстваПолейФормы.Добавить(НовоеСвойство);
	
КонецПроцедуры

Функция ЗначениеУсловия(ЭлементыУсловия, Объект, ТипГруппы = Неопределено, ДополнительныеРеквизиты = Неопределено)
	
	Если ТипГруппы = Неопределено Тогда
		ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	КонецЕсли;
	
	Значение = Неопределено;
	
	Для каждого ЭлементУсловия Из ЭлементыУсловия Цикл
		Если ТипЗнч(ЭлементУсловия) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Истина;
				КонецЕсли;
				Значение = Значение И ЗначениеУсловия(ЭлементУсловия.Элементы, Объект, ЭлементУсловия.ТипГруппы, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Ложь;
				КонецЕсли;
				Значение = Значение Или ЗначениеУсловия(ЭлементУсловия.Элементы, Объект, ЭлементУсловия.ТипГруппы, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				
				Значение = Не ЗначениеУсловия(ЭлементУсловия.Элементы, Объект, ЭлементУсловия.ТипГруппы, ДополнительныеРеквизиты);
				
			КонецЕсли;
		Иначе
			Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Истина;
				КонецЕсли;
				Значение = Значение И ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				
				Если Значение = Неопределено Тогда
					Значение = Ложь;
				КонецЕсли;
				Значение = Значение Или ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты);
				
			ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				
				Значение = Не ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеВыраженияУсловия(ЭлементУсловия, Объект, ДополнительныеРеквизиты)
	
	Значение = Ложь;
	
	ЛевоеЗначение = Неопределено;
	ПравоеЗначение = Неопределено;
	
	ИмяРеквизита = Строка(ЭлементУсловия.ЛевоеЗначение);
	Если ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") Тогда
		ПозицияТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозицияТочки <> 0 Тогда
			ДополнительныеРеквизиты.Свойство(Сред(ИмяРеквизита, ПозицияТочки + 1), ЛевоеЗначение);
		Иначе
			ЛевоеЗначение = Объект[ИмяРеквизита];
		КонецЕсли;
	Иначе
		ЛевоеЗначение = Объект[ИмяРеквизита];
	КонецЕсли;
	
	Если ТипЗнч(ЭлементУсловия.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
		ИмяРеквизита = Строка(ЭлементУсловия.ПравоеЗначение);
		Если ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") Тогда
			ПозицияТочки = СтрНайти(ИмяРеквизита, ".");
			Если ПозицияТочки <> 0 Тогда
				ДополнительныеРеквизиты.Свойство(Сред(ИмяРеквизита, ПозицияТочки + 1), ПравоеЗначение);
			Иначе
				ПравоеЗначение = Объект[ИмяРеквизита];
			КонецЕсли;
		Иначе
			ПравоеЗначение = Объект[ИмяРеквизита];
		КонецЕсли;
	Иначе
		ПравоеЗначение = ЭлементУсловия.ПравоеЗначение;
	КонецЕсли;
	
	Если ЛевоеЗначение <> Неопределено Тогда
		Если ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Значение = (ЛевоеЗначение = ПравоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			Значение = (ЛевоеЗначение <> ПравоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
			Значение = ЗначениеЗаполнено(ЛевоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Значение = НЕ ЗначениеЗаполнено(ЛевоеЗначение);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке И ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
			Значение = (Не ПравоеЗначение.Найти(ЛевоеЗначение) = Неопределено);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке И ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Значение = (Не ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение) = Неопределено);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке И ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
			Значение = (ПравоеЗначение.Найти(ЛевоеЗначение) = Неопределено);
		ИначеЕсли ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке И ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Значение = (ПравоеЗначение.НайтиПоЗначению(ЛевоеЗначение) = Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ИмяЭлементаФормы(ИмяРеквизита)
	
	Если ИмяРеквизита = "РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		Возврат "РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.Подразделение" Тогда
		Возврат "РасшифровкаПлатежаПодразделение"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.НаправлениеДеятельности" Тогда
		Возврат "РасшифровкаПлатежаНаправлениеДеятельности"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств" Тогда
		Возврат "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.СуммаВзаиморасчетов" Тогда
		Возврат "РасшифровкаПлатежаСуммаВзаиморасчетов"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ВалютаВзаиморасчетов" Тогда
		Возврат "РасшифровкаПлатежаВалютаВзаиморасчетов"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.КурсВзаиморасчетов" Тогда
		Возврат "РасшифровкаПлатежаКурсВзаиморасчетов"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.КурсВзаиморасчетовТекст" Тогда
		Возврат "РасшифровкаПлатежаКурсВзаиморасчетовТекст"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.СуммаНДС" Тогда
		Возврат "РасшифровкаПлатежаСуммаНДС"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.СтавкаНДС" Тогда
		Возврат "РасшифровкаПлатежаСтавкаНДС"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ОбъектРасчетов" Тогда
		Возврат "РасшифровкаПлатежаОбъектРасчетов"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.Партнер" Тогда
		Возврат "РасшифровкаПлатежаПартнер"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ДоговорКредитаДепозита" Тогда
		Возврат "РасшифровкаПлатежаДоговорКредитаДепозита"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ТипСуммыКредитаДепозита" Тогда
		Возврат "РасшифровкаПлатежаТипСуммыКредитаДепозита"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ДоговорЗаймаСотруднику" Тогда
		Возврат "РасшифровкаПлатежаДоговорЗаймаСотруднику"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ДоговорАренды" Тогда
		Возврат "РасшифровкаПлатежаДоговорАренды"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.ТипПлатежаПоАренде" Тогда
		Возврат "РасшифровкаПлатежаТипПлатежаПоАренде"
	ИначеЕсли ИмяРеквизита = "РасшифровкаПлатежа.Организация" Тогда
		Возврат "РасшифровкаПлатежаОрганизация"
	Иначе
		Возврат СтрЗаменить(ИмяРеквизита, ".", "");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область МеждународныеБанковскиеСчета

// Получает код страны из SWIFT согласно ISO 9362.
//
// Параметры:
//  СВИФТБИК - Строка - код SWIFT BIC.
// 
// Возвращаемое значение:
//  Строка -  Код страны SWIFT.
//
Функция КодСтраныSWIFT(СВИФТБИК)
	
	Возврат Сред(СВИФТБИК,5,2);
	
КонецФункции

// Возвращает префиксы и длины IBAN
// 
// Возвращаемое значение:
//  Соответствие - содержит поля:
//    * Ключ - Строка - префикс номера
//    * Значение - Число - длина номера.
// 
Функция ПараметрыСчетовIBAN()
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить("AD", 24);
	СоответствиеВозврата.Вставить("AE", 23);
	СоответствиеВозврата.Вставить("AL", 28);
	СоответствиеВозврата.Вставить("AT", 20);
	СоответствиеВозврата.Вставить("AZ", 28);
	СоответствиеВозврата.Вставить("BA", 20);
	СоответствиеВозврата.Вставить("BE", 16);
	СоответствиеВозврата.Вставить("BG", 22);
	СоответствиеВозврата.Вставить("BH", 22);
	СоответствиеВозврата.Вставить("BI", 27);
	СоответствиеВозврата.Вставить("BR", 29);
	СоответствиеВозврата.Вставить("BY", 28);
	СоответствиеВозврата.Вставить("CH", 21);
	СоответствиеВозврата.Вставить("CR", 22);
	СоответствиеВозврата.Вставить("CY", 28);
	СоответствиеВозврата.Вставить("CZ", 24);
	СоответствиеВозврата.Вставить("DE", 22);
	СоответствиеВозврата.Вставить("DJ", 27);
	СоответствиеВозврата.Вставить("DK", 18);
	СоответствиеВозврата.Вставить("DO", 28);
	СоответствиеВозврата.Вставить("EE", 20);
	СоответствиеВозврата.Вставить("EG", 29);
	СоответствиеВозврата.Вставить("ES", 24);
	СоответствиеВозврата.Вставить("FI", 18);
	СоответствиеВозврата.Вставить("FK", 18);
	СоответствиеВозврата.Вставить("FO", 18);
	СоответствиеВозврата.Вставить("FR", 27);
	СоответствиеВозврата.Вставить("GB", 22);
	СоответствиеВозврата.Вставить("GE", 22);
	СоответствиеВозврата.Вставить("GI", 23);
	СоответствиеВозврата.Вставить("GL", 18);
	СоответствиеВозврата.Вставить("GR", 27);
	СоответствиеВозврата.Вставить("GT", 28);
	СоответствиеВозврата.Вставить("HR", 21);
	СоответствиеВозврата.Вставить("HU", 28);
	СоответствиеВозврата.Вставить("IE", 22);
	СоответствиеВозврата.Вставить("IL", 23);
	СоответствиеВозврата.Вставить("IQ", 23);
	СоответствиеВозврата.Вставить("IS", 26);
	СоответствиеВозврата.Вставить("IT", 27);
	СоответствиеВозврата.Вставить("JO", 30);
	СоответствиеВозврата.Вставить("KW", 30);
	СоответствиеВозврата.Вставить("KZ", 20);
	СоответствиеВозврата.Вставить("LB", 28);
	СоответствиеВозврата.Вставить("LC", 32);
	СоответствиеВозврата.Вставить("LI", 21);
	СоответствиеВозврата.Вставить("LT", 20);
	СоответствиеВозврата.Вставить("LU", 20);
	СоответствиеВозврата.Вставить("LV", 21);
	СоответствиеВозврата.Вставить("LY", 25);
	СоответствиеВозврата.Вставить("MC", 27);
	СоответствиеВозврата.Вставить("MD", 24);
	СоответствиеВозврата.Вставить("ME", 22);
	СоответствиеВозврата.Вставить("MK", 19);
	СоответствиеВозврата.Вставить("MN", 20);
	СоответствиеВозврата.Вставить("MR", 27);
	СоответствиеВозврата.Вставить("MT", 31);
	СоответствиеВозврата.Вставить("MU", 30);
	СоответствиеВозврата.Вставить("NI", 28);
	СоответствиеВозврата.Вставить("NL", 18);
	СоответствиеВозврата.Вставить("NO", 15);
	СоответствиеВозврата.Вставить("OM", 23);
	СоответствиеВозврата.Вставить("PK", 24);
	СоответствиеВозврата.Вставить("PL", 28);
	СоответствиеВозврата.Вставить("PS", 29);
	СоответствиеВозврата.Вставить("PT", 25);
	СоответствиеВозврата.Вставить("QA", 29);
	СоответствиеВозврата.Вставить("RO", 24);
	СоответствиеВозврата.Вставить("RS", 22);
	СоответствиеВозврата.Вставить("RU", 33);
	СоответствиеВозврата.Вставить("SA", 24);
	СоответствиеВозврата.Вставить("SC", 31);
	СоответствиеВозврата.Вставить("SD", 18);
	СоответствиеВозврата.Вставить("SE", 24);
	СоответствиеВозврата.Вставить("SI", 19);
	СоответствиеВозврата.Вставить("SK", 24);
	СоответствиеВозврата.Вставить("SM", 27);
	СоответствиеВозврата.Вставить("SO", 23);
	СоответствиеВозврата.Вставить("ST", 25);
	СоответствиеВозврата.Вставить("SV", 28);
	СоответствиеВозврата.Вставить("TL", 23);
	СоответствиеВозврата.Вставить("TN", 24);
	СоответствиеВозврата.Вставить("TR", 26);
	СоответствиеВозврата.Вставить("UA", 29);
	СоответствиеВозврата.Вставить("VA", 22);
	СоответствиеВозврата.Вставить("VG", 24);
	СоответствиеВозврата.Вставить("XK", 20);
	Возврат СоответствиеВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти
