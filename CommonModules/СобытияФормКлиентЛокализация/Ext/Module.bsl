////////////////////////////////////////////////////////////////////////////////
// Содержит события форм, вызываемые на клиенте
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма	- ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда	- КомандаФормы - команда формы
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	//++ Локализация

	
	Если Форма.ИмяФормы <> "Документ.ОтчетОбИмпортеЕГАИС.Форма.ФормаДокумента"
		И Форма.ИмяФормы <> "Документ.ОтчетОПроизводствеЕГАИС.Форма.ФормаДокумента" Тогда
		СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Команда.Имя = "КомандаЗаполнитьУпаковкуЧастичногоВыбытияИС" Тогда
		ИнтеграцияИСУТКлиент.ЗаполнениеУпаковкиЧастичногоВыбытияПоДаннымиГИСМТ(Форма);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ИмяСобытия				- Строка - идентификатор сообщения принимающей формой (см. метод Оповестить)
//  Параметр				- Произвольный - параметр сообщения (см. метод Оповестить)
//  Источник				- Произвольный - источник события (см. метод Оповестить)
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	ОформлениеПередачиТоваровМеждуОрганизациямиКлиент.ОбработкаОповещения(Форма, ИмяСобытия, Параметр);
	Если ИмяСобытия = "ЗаполнитьПараметрыНовойУпаковкиЧастичногоВыбытия"
		И Форма.ВладелецФормы = Источник Тогда
		ИнтеграцияИСУТКлиент.ЗаполнитьПараметрыНовойУпаковкиЧастичногоВыбытия(Форма, Параметр);
	КонецЕсли;
	Если ИмяСобытия = "Запись_НаборУпаковок"
		И Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		ИсточникОписания = ИнтеграцияИСУТКлиентСервер.ИсточникДанныхПоВидамУпаковок(Форма.Объект);
		Если ТипЗнч(ИсточникОписания) = Тип("СправочникСсылка.НаборыУпаковок")
			И ИсточникОписания = Форма.Объект.НаборУпаковок Тогда
			ЗаполнитьЗначенияСвойств(Форма, Источник, "ПотребительскаяУпаковкаИС,ИспользуетсяЧастичноеВыбытиеИС,УпаковкаЧастичногоВыбытияИС");
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//	НавигационнаяСсылкаФорматированнойСтроки - Строка - строка навигационной ссылки
//	СтандартнаяОбработка - Булево - признак стандартной обработки события
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОформлениеПередачиТоваровМеждуОрганизациямиКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма			- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ПараметрыЗаписи	- Структура        - параметры записи, см. справочную информацию по событиям управляемой формы
//
Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ПослеЗаписи(Форма, ПараметрыЗаписи);
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		ПользовательРазрешилРедактирование = ИнтеграцияИСУТКлиент.ПользовательРазрешилРедактированиеРеквизита(Форма);
		ИнтеграцияИСУТКлиентСервер.НастройкаЭлементовВидаУпаковки(Форма, ПользовательРазрешилРедактирование);
	КонецЕсли;
	Если Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		Оповестить("Запись_НаборУпаковок", ПараметрыЗаписи, Форма);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ	- Булево - признак отказа от открытия формы.
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	//++ Локализация
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		
		ПользовательРазрешилРедактирование = ИнтеграцияИСУТКлиент.ПользовательРазрешилРедактированиеРеквизита(Форма);
		ИнтеграцияИСУТКлиентСервер.НастройкаЭлементовВидаУпаковки(Форма, ПользовательРазрешилРедактирование);
		
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		
		РедактированиеРеквизитовРазрешено = Истина;
		
		Если Элемент.Имя = "ИспользованиеУпаковокИндивидуальныйНабор"
			Или Элемент.Имя = "ИспользованиеУпаковокОбщийНабор" Тогда
			ИнтеграцияИСУТКлиентСервер.УправлениеРеквизитамиУпаковокПриПереключенииИспользованияНабораУпаковок(Форма, РедактированиеРеквизитовРазрешено);
		КонецЕсли;
		
		Если Элемент.Имя = "ПотребительскаяУпаковкаИС"
			Или Элемент.Имя = "УпаковкаЧастичногоВыбытияИС"
			Или Элемент.Имя = "ИспользуетсяЧастичноеВыбытиеИС"
			Или Элемент.Имя = "ИспользоватьУпаковки" Тогда
			
			ТребуетсяСерверныйВызов = (Элемент.Имя = "ЕдиницаИзмерения"
				И Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента");
			ИнтеграцияИСУТКлиентСервер.НастройкаЭлементовВидаУпаковки(Форма, РедактированиеРеквизитовРазрешено, ТребуетсяСерверныйВызов);
		КонецЕсли;
		
		Если Элемент.Имя = "ИспользоватьУпаковки"  Тогда
			ИнтеграцияИСУТКлиентСервер.УправлениеПризнакомИспользованияЧастичногоВыбытия(Форма);
		КонецЕсли;
		
		Если Элемент.Имя = "ПотребительскаяУпаковкаИС"
			Или Элемент.Имя = "УпаковкаЧастичногоВыбытияИС"
			Или Элемент.Имя = "ИспользуетсяЧастичноеВыбытиеИС" Тогда
			ИнтеграцияИСУТКлиентСервер.ОбработкаИзмененияПолейУпаковок(Форма, Элемент.Имя);
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииСтроки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ПриАктивизацииСтроки(Форма, Элемент, ДополнительныеПараметры);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура НачалоВыбораЭлемента(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		
		Если Элемент.Имя = "КодТНВЭД" Тогда
			
			Объект = Форма.Объект;
			ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ОсобенностьУчета);
			Если ВидПродукции <> Неопределено Тогда
				
				ВидыПродукцииИСМП = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
				ВидыПродукцииЗЕРНО = ИнтеграцияЗЕРНОКлиентСервер.РасширенныеВидыПродукции(
					ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции());
				
				Если ВидыПродукцииИСМП.Найти(ВидПродукции) <> Неопределено Тогда
					СтандартнаяОбработка = Ложь;
					
					ПараметрыФормы = Новый Структура;
					
					ПараметрыФормы.Вставить("ТекущаяСтрока",                           Объект.КодТНВЭД);
					ПараметрыФормы.Вставить("ВидПродукции",                            ВидПродукции);
					ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
					ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Истина);
					
					ОткрытьФорму("РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				ИначеЕсли ВидыПродукцииЗЕРНО.Найти(ВидПродукции) <> Неопределено Тогда
					
					СтандартнаяОбработка = Ложь;
					
					ПараметрыФормы = Новый Структура;
					
					ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.КодТНВЭД);
					ВидыПродукции = ИнтеграцияЗЕРНОКлиентСервер.ВидыПродукции(ВидПродукции);
					Если ВидыПродукции.Количество() Тогда
						ПараметрыФормы.Вставить("ВидПродукции", ВидыПродукции[0]);
					Иначе
						ПараметрыФормы.Вставить("ВидПродукции", ВидПродукции);
					КонецЕсли;
					ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
					ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Истина);
					ПараметрыФормы.Вставить("ОКПД2",                                   Объект.КодОКПД2);
					
					ОткрытьФорму(
						"РегистрСведений.ВидыСельскохозяйственныхКультурЗЕРНО.Форма.ФормаПодбораТНВЭД",
						ПараметрыФормы,
						Элемент,,,,,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Имя = "КодОКПД2" Тогда
			
			Объект = Форма.Объект;
			ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ОсобенностьУчета);
			Если ВидПродукции <> Неопределено Тогда
				
				ВидыПродукцииЗЕРНО = ИнтеграцияЗЕРНОКлиентСервер.РасширенныеВидыПродукции(
					ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции());
				
				Если ВидыПродукцииЗЕРНО.Найти(ВидПродукции) <> Неопределено Тогда
					СтандартнаяОбработка = Ложь;
					
					ПараметрыФормы = Новый Структура;
					
					ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.КодОКПД2);
					ВидыПродукции = ИнтеграцияЗЕРНОКлиентСервер.ВидыПродукции(ВидПродукции);
					Если ВидыПродукции.Количество() Тогда
						ПараметрыФормы.Вставить("ВидПродукции", ВидыПродукции[0]);
					Иначе
						ПараметрыФормы.Вставить("ВидПродукции", ВидПродукции);
					КонецЕсли;
					ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
					ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Истина);
					
					ОткрытьФорму(
						"Справочник.КлассификаторНСИЗЕРНО.Форма.ФормаСпискаОКПД2",
						ПараметрыФормы,
						Элемент,,,,,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

Процедура Подключаемый_ПроверитьВыполнениеЗаданияИС() Экспорт
	//++ Локализация
	СоответствиеТребованиямГИСМТКлиент.ПроверитьВыполнениеЗадания(ЭтотОбъект);
	//-- Локализация
	Возврат;
КонецПроцедуры

#КонецОбласти
