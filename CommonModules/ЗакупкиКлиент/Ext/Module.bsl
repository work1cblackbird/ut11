////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиКлиент", содержит процедуры и функции для 
// обработки действий пользователя в процессе работы с документами закупки.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииРаботыСВыборомЗначений

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	Элемент                   - ПолеФормы - обрабатываемый элемент формы
//	СтандартнаяОбработка      - Булево - 
//	Партнер                   - СправочникСсылка.Партнеры - ссылка на партнера, для которого выберите соглашение
//	Документ                  - ДокументСсылка - ссылка на ранее выбранное соглашение для  начального позиционирования в списке
//	ДатаДокумента             - Дата - дата документа, в котором выбирается соглашение
//	ДоступноДляЗакупки        - Булево - Если Истина, отбираются только соглашения с установленным флагом ДоступноДляЗакупки
//	БезКомиссионныхСоглашений - Булево - Если Истина, отбираются только соглашения с хоз. операций "Закупка у поставщика"
//	СтруктураДополнительногоОтбора - Структура, Неопределено - 
//
Процедура НачалоВыбораСоглашенияСПоставщиком(Элемент,
	                                         СтандартнаяОбработка,
	                                         Партнер,
	                                         Документ,
	                                         ДатаДокумента='00010101',
	                                         СтруктураДополнительногоОтбора = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Документ", Документ);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ДатаДокумента", ДатаДокумента);
	
	Если Не ЗначениеЗаполнено(СтруктураДополнительногоОтбора) Тогда
		СтруктураДополнительногоОтбора = Новый Структура;
	КонецЕсли;
	Для Каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		СтруктураДополнительногоОтбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя,"Отбор.",""), ПараметрВыбора.Значение);
	КонецЦикла;
	ДополнительныеПараметры.Вставить("СтруктураДополнительногоОтбора", СтруктураДополнительногоОтбора);
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Отбор", Новый Структура("Поставщик", Истина));
		
		ОткрытьФорму(
			"Справочник.Партнеры.ФормаВыбора",
			СтруктураОтбора ,,,,,
			Новый ОписаниеОповещения("НачалоВыбораСоглашенияСПоставщикомВыборПартнераЗавершение", ЗакупкиКлиент, ДополнительныеПараметры));
		
	Иначе
		НачалоВыбораСоглашенияСПоставщикомВыборПартнераЗавершение(Партнер, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по соглашению с поставщиком.
//
// Параметры:
//  Партнер                 - СправочникСсылка.Партнеры -  партнер, для которого отбираются соглашения.
//  ДополнительныеПараметры - Структура - дополнительные параметры для отбора соглашений.
//
Процедура НачалоВыбораСоглашенияСПоставщикомВыборПартнераЗавершение(Партнер, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.СтруктураДополнительногоОтбора) Тогда
		СтруктураОтбора = ДополнительныеПараметры.СтруктураДополнительногоОтбора;
		СтруктураОтбора.Вставить("Партнер", Партнер);
	Иначе
		СтруктураОтбора = Новый Структура("Партнер", Партнер);
	КонецЕсли;
	
	ОткрытьФорму (
		"Справочник.СоглашенияСПоставщиками.ФормаВыбора",
		Новый Структура("ДатаДокумента,ТекущаяСтрока,Отбор",
			ДополнительныеПараметры.ДатаДокумента,
			ДополнительныеПараметры.Документ,
			СтруктураОтбора),
		ДополнительныеПараметры.Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВозможностиВыполненияДействий

// Проверяет является ли оповещение в форме событием изменения документов оплаты
//
// Параметры:
//  ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//  Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_АвансовыйОтчет"
		Или ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

// Показывает оповещение пользователя об окончании заполнения условий закупок по умолчанию.
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия закупок заполнены'"),
		,
		НСтр("ru='Условия закупок по умолчанию заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения условий закупок
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийЗакупок() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия закупок заполнены'"),
		,НСтр("ru='Условия закупок по соглашению с поставщиком заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом.
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//	ТекстОшибки - Строка - Описание ошибки при расчете цен.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина, ТекстОшибки = "") Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по соглашению с поставщиком заполнены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ТекстСообщения = НСтр("ru='Ни в одной строке цены по соглашению с поставщиком не заполнены.'");
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения дат поступления всех строк тч.
//
// Параметры:
//	ДатаПоступления - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ЗаполнениеВыделенныхСтрок - Булево - влияет на текст сообщения.
//
Процедура ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата поступления заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата поступления %ДатаПоступления%'"), "%ДатаПоступления%", Формат(ДатаПоступления, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата поступления заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата поступления %ДатаПоступления%'"), "%ДатаПоступления%", Формат(ДатаПоступления, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании перезаполнения товаров по фактической приемке.
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической приемке.
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоПриемке(ЕстьИзменения, КоличествоПерезаполнено) Экспорт
	
	Если ЕстьИзменения Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Количество перезаполнено'"),
			,
			НСтр("ru='В строках перезаполнено количество.'"),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Ни по одной строке не начата приемка.'"),
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиКомандПользователя

// Формирует список выбора номеров ГТД с отбором по номенклатуре, характеристике
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары
//	СписокВыбора  - СписокЗначений - список выбора номеров ГТД.
//
Процедура ЗаполнитьСписокВыбораНомеровГТД(ТекущаяСтрока, СписокВыбора) Экспорт
	
	Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		СписокВыбора.Очистить();
	Иначе
		СписокЗначений = ЗакупкиВызовСервера.ЗаполнитьСписокВыбораНомеровГТД(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			ТекущаяСтрока.СтранаПроисхождения);
		
		СписокВыбора.Очистить();
		Для каждого ТекСтр Из СписокЗначений Цикл
			НовСтрока = СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтр);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по приемке.
//
// Параметры:
// 	ОписаниеОповещения - ОписаниеОповещения - 
// 	ЕстьПринятыеТовары - Булево - признак наличия принятых товаров.
//
// Возвращаемое значение:
// 	Булево - Ложь, если пользователь отказался от заполнения.
//
Функция ВопросОПерезаполненииПринятымиТоварами(ОписаниеОповещения, ЕстьПринятыеТовары) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьПринятыеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары приняты. Учитывать при заполнении товары, которые принимаются?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru = 'Не учитывать'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют принятые товары. Учитывать при заполнении товары, которые принимаются?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru = 'Не перезаполнять'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросОПерезаполненииПринятымиТоварамиЗавершение", ЗакупкиКлиент, ДополнительныеПараметры),
		ТекстВопроса,
		СписокКнопок);
	
КонецФункции

// Обработчик завершения ответа на вопрос перезаполнения принятыми товарами.
//
// Параметры:
//  ОтветНаВопрос           - Строка - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВопросОПерезаполненииПринятымиТоварамиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЗаполнятьПринимающимисяТоварами", (ОтветНаВопрос = "Учитывать"));
	ВозвращаемоеЗначение.Вставить("Результат", (ОтветНаВопрос <> "НеПерезаполнять"));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ВозвращаемоеЗначение);
	
КонецПроцедуры

// Открывает отчет ДинамикаИзмененияЦенНоменклатурыПоставщика с отбором из формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма документа, из которого открывается отчет.
//
Процедура ОткрытьОтчетПоДинамикеЦенПоставщика(Форма) Экспорт
	
	СписокНоменклатуры  = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	Для Каждого ИдентификаторСтрокиДереваЦен Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		СтрокаТЧ = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтрокиДереваЦен);
		СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
		Если СтрокаТЧ.ХарактеристикиИспользуются Тогда
			Если СтрокаТЧ.ПолучитьРодителя() = Неопределено Тогда
				Для Каждого СтрокаХарактеристика Из СтрокаТЧ.ПолучитьЭлементы() Цикл
					Если СписокХарактеристик.НайтиПоЗначению(СтрокаХарактеристика.Характеристика) = Неопределено Тогда
						СписокХарактеристик.Добавить(СтрокаХарактеристика.Характеристика);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СписокХарактеристик.НайтиПоЗначению(СтрокаТЧ.Характеристика) = Неопределено Тогда
					СписокХарактеристик.Добавить(СтрокаТЧ.Характеристика);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СписокХарактеристик.НайтиПоЗначению(
					ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")) = Неопределено Тогда
				СписокХарактеристик.Добавить(ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокВидовЦен = Новый СписокЗначений;
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма) Цикл
		СписокВидовЦен.Добавить(СтрокаВидЦены.Ссылка, СтрокаВидЦены.Наименование);
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", СписокНоменклатуры);
	Отбор.Вставить("Характеристика", СписокХарактеристик);
	Отбор.Вставить("ВидЦеныПоставщика", СписокВидовЦен);
	Отбор.Вставить("Партнер", Форма.Объект.Партнер);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДинамикаИзмененияЦенПоНоменклатуреДиаграмма");
	ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаИзмененияЦенПоНоменклатуреДиаграмма");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ДинамикаИзмененияЦенНоменклатурыПоставщика.Форма",
	        ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНоменклатуройПоставщикаВДокументахЗакупки

// Открывает форму заполнения номенклатуры по номенклатуре поставщика.
//
// Параметры:
// 	ОписаниеОповещения     - ОписаниеОповещения - описание оповещения.
// 	АдресТоваровВХранилище - Строка - адрес товаров в хранилище.
// 	Форма                  - ФормаКлиентскогоПриложения - владелец открываемой формы.
// 	ОтборТипНоменклатуры - Неопределено, Массив - Отбор тип номенклатуры
Процедура ОткрытьФормуЗаполненияНоменклатурыПоставщика(ОписаниеОповещения, АдресТоваровВХранилище, Форма, ОтборТипНоменклатуры = Неопределено) Экспорт
	
	Если АдресТоваровВХранилище = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Отсутствуют строки, в которых указана номенклатура поставщика, но не указана номенклатура'"));
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
	Если ЗначениеЗаполнено(ОтборТипНоменклатуры) Тогда
		ПараметрыФормы.Вставить("ОтборТипНоменклатуры",ОтборТипНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ЗаполнениеНоменклатурыПоНоменклатуреПоставщика",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНомерамиГТД

// Конструктор коллекции параметров создания элемента справчоника 'НомераГТД' по умолчанию.
//
// Возвращаемое значение:
//	Структура - коллекция, которая содержит следующие свойства:
//		* Код - Строка - номер ГТД.
//		* ДанныеТовара - Структура - информация о товаре, содержащая следующие данные:
//			** Номенклатура - СправочникСсылка.Номенклатура - информация о номенклатуре.
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - информация о характеристике номенклатуры.
//			** Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - информация об упаковке товара.
//			** КоличествоКомплектов - Число - количество товара.
//			** СуммаПоРНПТ - Число - стоимость товара.
//		* СтранаПроисхождения - СправочникСсылка.СтраныМира - информация о стране происхождения товара.
//		* Дата - Дата- дата документа.
//		* ВалютаДокумента - СправочникСсылка.Валюты - валюта документа.
//		* СозданиеЭлементаЛюбогоТипа - Булево - признак того, что создаваемый элемент справочника не зависит от настроек
//												использования учета прослеживаемости и признака прослеживаемости номенклатуры.
//		* ПоказатьСтоимостьПоДокументу - Булево - признак использования в документе суммовых показателей.
//		* ИспользоватьУчетПрослеживаемыхИмпортныхТоваров - Булево - признак использования учета прослеживаемых импортных
//																	товаров.
//
Функция ПараметрыСозданияНомераГТДПоУмолчанию() Экспорт
	
	ДанныеТовара = Новый Структура;
	ДанныеТовара.Вставить("Номенклатура",			ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ДанныеТовара.Вставить("Характеристика",			ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ДанныеТовара.Вставить("Упаковка",				ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	ДанныеТовара.Вставить("КоличествоКомплектов",	0);
	ДанныеТовара.Вставить("СуммаПоРНПТ",			0);
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Код",					"");
	ПараметрыСоздания.Вставить("ДанныеТовара",			ДанныеТовара);
	ПараметрыСоздания.Вставить("СтранаПроисхождения",	ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("Дата",					Дата(1, 1, 1));
	ПараметрыСоздания.Вставить("ВалютаДокумента",		ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("СозданиеЭлементаЛюбогоТипа",	Ложь);
	ПараметрыСоздания.Вставить("ПоказатьСтоимостьПоДокументу",	Ложь);
	ПараметрыСоздания.Вставить("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров", Ложь);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Возвращает параметры по умолчанию, используемые для инициализации параметров заполнения элемента справочника 'НомераГТД'.
//
// Возвращаемое значение:
//	Структура - коллекция, которая содержит следующие свойства:
//		* Дата - Дата- дата документа.
//		* ВалютаДокумента - СправочникСсылка.Валюты - валюта документа.
//		* ИмяПоляКоличество - Строка - имя поля содержащего информацию о количестве упаковок товара в коллекции параметра
//										ТекущаяСтрока (см. ПараметрыСозданияНомераГТД).
//		* ИмяПоляСумма - Строка - имя поля содержащего информацию о сумме товара в коллекции параметра
//									ТекущаяСтрока (см. ПараметрыСозданияНомераГТД).
//		* ИмяПоляСуммаНДС - Строка - имя поля содержащего информацию о сумме НДС товара в коллекции параметра
//										ТекущаяСтрока (см. ПараметрыСозданияНомераГТД).
//		* ИмяПоляСуммаСНДС - Строка - имя поля содержащего информацию о сумме с НДС товара в коллекции параметра
//										ТекущаяСтрока (см. ПараметрыСозданияНомераГТД).
//		* ОснованиеСтоимостиПоступления - Булево - признак того, что документ является основанием для определения
//													стоимости поступления товаров.
//		* ИспользоватьУчетПрослеживаемыхИмпортныхТоваров - Булево - признак использования учета прослеживаемых импортных
//																	товаров.
//
Функция ДополнительныеПараметрыСозданияНомераГТД() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата			",		Дата(1, 1, 1));
	ДополнительныеПараметры.Вставить("ВалютаДокумента",		ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ДополнительныеПараметры.Вставить("ИмяПоляКоличество",	"КоличествоУпаковок");
	ДополнительныеПараметры.Вставить("ИмяПоляСумма",		"Сумма");
	ДополнительныеПараметры.Вставить("ИмяПоляСуммаНДС",		"СуммаНДС");
	ДополнительныеПараметры.Вставить("ИмяПоляСуммаСНДС",	"СуммаСНДС");
	ДополнительныеПараметры.Вставить("ОснованиеСтоимостиПоступления", Истина);
	ДополнительныеПараметры.Вставить("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров", Ложь);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Возвращает, используемые при создании, параметры заполнения элемента справочника 'НомераГТД'.
//
// Параметры:
//	ТекущаяСтрока - Структура, ДанныеФормыЭлементКоллекции - коллекция, содержащая информацию о товаре:
//					* Номенклатура - СправочникСсылка.Номенклатура - информация о номенклатуре.
//					* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - информация о характеристике номенклатуры.
//					* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - информация об упаковке товара.
//					* СтранаПроисхождения - СправочникСсылка.СтраныМира - информация о стране происхождения товара.
//	ТекстРедактирования - Строка - текст редактирования поля формы Номера ГТД.
//	ДополнительныеПараметры - см. ДополнительныеПараметрыСозданияНомераГТД.
//
// Возвращаемое значение:
//	см. ПараметрыСозданияНомераГТДПоУмолчанию.
//
Функция ПараметрыСозданияНомераГТД(ТекущаяСтрока, ТекстРедактирования, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыСозданияНомераГТД();
	КонецЕсли;
	
	ПараметрыСоздания	= ПараметрыСозданияНомераГТДПоУмолчанию();
	ДанныеТовара		= ПараметрыСоздания.ДанныеТовара;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСоздания, ДополнительныеПараметры);
	
	ПараметрыСоздания.Код = ТекстРедактирования;

	Если ТекущаяСтрока <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеТовара, ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(ПараметрыСоздания, ТекущаяСтрока);
		
		Если ТекущаяСтрока.Свойство(ДополнительныеПараметры.ИмяПоляКоличество) Тогда
			ДанныеТовара.КоличествоКомплектов = ТекущаяСтрока[ДополнительныеПараметры.ИмяПоляКоличество];
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОснованиеСтоимостиПоступления Тогда
			ПараметрыСоздания.ПоказатьСтоимостьПоДокументу = Истина;
			
			Если ТекущаяСтрока.Свойство(ДополнительныеПараметры.ИмяПоляСуммаНДС)
				И ТекущаяСтрока.Свойство(ДополнительныеПараметры.ИмяПоляСуммаСНДС) Тогда
				
				ДанныеТовара.СуммаПоРНПТ = ТекущаяСтрока[ДополнительныеПараметры.ИмяПоляСуммаСНДС]
											- ТекущаяСтрока[ДополнительныеПараметры.ИмяПоляСуммаНДС];
				
			ИначеЕсли ТекущаяСтрока.Свойство(ДополнительныеПараметры.ИмяПоляСумма) Тогда
				ДанныеТовара.СуммаПоРНПТ = ТекущаяСтрока[ДополнительныеПараметры.ИмяПоляСумма];
			Иначе
				ПараметрыСоздания.ПоказатьСтоимостьПоДокументу = Ложь;
			КонецЕсли;
		Иначе
			ПараметрыСоздания.ПоказатьСтоимостьПоДокументу = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Открывает форму создания элемента справочника 'НомераГТД'.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда создания Номера ГТД.
//	ПараметрыСоздания - см. ПараметрыСозданияНомераГТД
//
Процедура ОткрытьФормуСозданияНомераГТД(Форма, ПараметрыСоздания) Экспорт
	
	ПараметрыФормы = Новый Структура("ПараметрыСоздания", ПараметрыСоздания);
	
	Если ПараметрыСоздания.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		ИмяФормы = "Обработка.ПодборНомеровГТДВДокументы.Форма.Форма";
	Иначе
		ИмяФормы = "Справочник.НомераГТД.Форма.ФормаЭлемента";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Выполняет проверку того, что форма, выполнившая оповещение выбора значения, является формой элемента
// справочника 'НомераГТД'.
//
// Параметры:
//	ИсточникВыбора - Произвольный - параметр события ОбработкаВыбора формы, в которой осуществлен выбор значения.
//
// Возвращаемое значение:
//	Булево - возвращает значение Истина, если выполнен выбор элемента справочника 'НомераГТД'.
//
Функция ЭтоУказаниеНомераГТД(ИсточникВыбора) Экспорт
	
	Возврат ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаЭлемента";
	
КонецФункции

// Возвращает параметры обработки выбора значения формы элемента справочника 'НомераГТД'.
//
// Возвращаемое значение:
//	Структура - коллекция, которая содержит следующие свойства:
//		* ИмяТЧ - Строка - имя табличной части, в которой указывается значение номера ГТД.
//		* ИмяПоляНомерГТД - Строка - имя поля номера ГТД, в котором указывается значение.
//		* ИмяПоляСтранаПроисхождения - Строка - имя поля страны происхождения, в котором указывается страна
//												происхождения импортного товара в соответствии с ГТД.
//
Функция ПараметрыУказанияНомераГТД() Экспорт
	
	ПараметрыУказанияНомераГТД  = Новый Структура;
	ПараметрыУказанияНомераГТД.Вставить("ИмяТЧ", "Товары");
	ПараметрыУказанияНомераГТД.Вставить("ИмяПоляНомерГТД", "НомерГТД");
	ПараметрыУказанияНомераГТД.Вставить("ИмяПоляСтранаПроисхождения", "СтранаПроисхождения");
	
	Возврат ПараметрыУказанияНомераГТД;
	
КонецФункции

// Выполняет указание значений номера ГТД и служебных реквизитов в табличной части формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, в которой инициировано указание номера ГТД, которая содержит следующие свойства:
//		* Элементы - ВсеЭлементыФормы - элементы формы.
//	НомерГТД - СправочникСсылка.НомераГТД, Неопределено - значение выбора.
//	ПараметрыУказанияНомераГТД - см. ПараметрыУказанияНомераГТД
//	ТекущиеДанные - Структура, ДанныеФормыЭлементКоллекции - данные строки, в которой указывается номер ГТД,
//																если значение не передано, тогда используются текущие
//																данные таблицы с именем ПараметрыУказанияНомераГТД.ИмяТЧ.
//	ДействияОбработки - Структура - параметры действий, которые необходимо выполнить для обработки строк табличной части,
//									в которых осуществляется заполнение номеров ГТД.
//
Процедура ОбработатьУказаниеНомераГТД(Форма,
										НомерГТД,
										ПараметрыУказанияНомераГТД = Неопределено,
										ТекущиеДанные = Неопределено,
										ДействияОбработки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерГТД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияНомераГТД = Неопределено Тогда
		ПараметрыУказанияНомераГТД = ПараметрыУказанияНомераГТД();
	КонецЕсли;
	
	ИмяТЧ = ПараметрыУказанияНомераГТД.ИмяТЧ;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Форма.Элементы[ИмяТЧ].ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НомерГТД = НомерГТД;
	
	Если ДействияОбработки = Неопределено Тогда
		ДействияОбработки = Новый Структура;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("СтранаПроисхождения") Тогда
		ПараметрыЗаполненияСтраныПроисхождения = Новый Структура("НомерГТД", НомерГТД);
		
		ДействияОбработки.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД", ПараметрыЗаполненияСтраныПроисхождения);
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ТипНомераГТД") Тогда
		ПараметрыЗаполненияТипаНомераГТД = Новый Структура("НомерГТД", НомерГТД);
		
		ДействияОбработки.Вставить("ЗаполнитьТипНомераГТД", ПараметрыЗаполненияТипаНомераГТД);
	КонецЕсли;
	
	Если ДействияОбработки.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, ДействияОбработки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку того, что форма, выполнившая оповещение, является формой подбора номера номера ГТД.
//
// Параметры:
//	ИсточникВыбора - Произвольный - параметр события ОбработкаВыбора формы, в которой осуществлен выбор значения.
//
// Возвращаемое значение:
//	Булево - возвращает значение Истина, если выполнен выбор элемента справочника 'НомераГТД'.
//
Функция ЭтоПодборНомераГТД(ИсточникВыбора) Экспорт
	
	Возврат ИсточникВыбора.ИмяФормы = "Обработка.ПодборНомеровГТДВДокументы.Форма.Форма";
	
КонецФункции

// Показывает оповещение пользователю о заполнении номеров ГТД в строках табличной части документа.
//
// Параметры:
//	ЗаполненыНомераГТД - Булево - признак того, что выполнено заполнение табличной части.
//	НомерГТД - СправочникСсылка.НомераГТД - значение заполнения.
//
Процедура ОповеститьОЗаполненииНомеровГТДВТабличнойЧасти(ЗаполненыНомераГТД, НомерГТД = Неопределено) Экспорт
	
	Если ЗаполненыНомераГТД <> Неопределено
		И ЗаполненыНомераГТД Тогда
		
		ТекстОповещения = НСтр("ru = 'Номера ГТД заполнены'");
		
		ТекстПояснения = НСтр("ru='В строках документа заполнены номера ГТД'");
		
		Если ЗначениеЗаполнено(НомерГТД) Тогда
			ТекстПояснения = НСтр("ru='В строках документа заполнен номер ГТД %1'");
			ТекстПояснения = СтрШаблон(ТекстПояснения, Строка(НомерГТД));
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения, БиблиотекаКартинок.Информация32);
		
	Иначе
		ТекстОповещения	= НСтр("ru = 'Номера ГТД не заполнены'");
		ТекстПояснения	= НСтр("ru='Ни в одной строке номер ГТД не заполнен'");
		
		ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыИФункцииРаботыСКомплектующимиНомеровГТД

// Служебный обработчик авто подбора Номера ГТД.
//
// Параметры:
//	Текст - Строка - текст строки поиска.
//	ДанныеВыбора - СписокЗначений Из Структура - список выбора данных элемента справочника.
//	СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения подбора данных объекта.
//										Если в теле процедуры-обработчика установить данному параметру
//										значение Ложь, стандартная обработка события производиться не будет.
//	ТекущаяСсылка - СправочникСсылка.НомераГТД - ссылка на текущий элемент карточки справочника Номера ГТД.
//
Процедура НомераГТДКодКомплектующейАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ТекущаяСсылка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеОтбора = Новый Структура;
	ДанныеОтбора.Вставить("ТекущаяСсылка",	ТекущаяСсылка);
	ДанныеОтбора.Вставить("ТипНомераГТД",	ПредопределенноеЗначение("Перечисление.ТипыНомеровГТД.НомерРНПТ"));
	ДанныеОтбора.Вставить("ПолучатьДополнительныеДанные", Истина);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("СтрокаПоиска",	Текст);
	ПараметрыПоиска.Вставить("Отбор",			ДанныеОтбора);
	
	ЗакупкиВызовСервера.НомераГТДОбработкаПолученияДанныхВыбора(ДанныеВыбора, ПараметрыПоиска, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПриСозданииДоговораИзДокумента

// Открывает форму создания нового договора с данными по партнеру.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма документа.
//	Элемент - ЭлементыФормы - поле формы, содержащее информацию о договоре.
//	ПутьКДоговору - Строка - путь к реквизиту с данными по договору.
//	Партнер - СправочникСсылка.Партнеры - данные по партнеру для создания договора.
//	СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения подбора данных объекта.
//	ИмяСобытияОповещения - Строка - имя события оповещения для формы документа при изменении договора.
//
Процедура ОткрытьФормуСозданияДоговора(Форма, Элемент, ПутьКДоговору, Партнер, СтандартнаяОбработка, ИмяСобытияОповещения = "ПриИзмененииДоговора") Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыДоговора = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыВыбора = Новый Структура();
	
	Для Каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		Если СтрНайти(ПараметрВыбора.Имя,"Отбор.") <> 0 Тогда
			ПараметрыВыбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрВыбора Из Элемент.СвязиПараметровВыбора Цикл
		Если СтрНайти(ПараметрВыбора.Имя,"Отбор.") <> 0 Тогда
			ЗначениеПараметра = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПараметрВыбора.ПутьКДанным);
			ИмяКлюча = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
			Если Не ПараметрыВыбора.Свойство(ИмяКлюча) Тогда
				ПараметрыВыбора.Вставить(ИмяКлюча, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Отбор",ПараметрыВыбора);
	
	ПараметрыСоздания = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыВыбора);
	ПараметрыСоздания.Вставить("Партнер", Партнер);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",ПараметрыСоздания);
	ПараметрыФормы.Вставить("ТекстЗаполнения", Элемент.ТекстРедактирования);
	ПараметрыФормы.Вставить("ПроверкаПриСозданииДоговора", Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Объект", Форма);
	ДополнительныеПараметры.Вставить("Отбор", ПараметрыВыбора);
	ДополнительныеПараметры.Вставить("Партнер", Партнер);
	ДополнительныеПараметры.Вставить("ПутьКДоговору", ПутьКДоговору);
	ДополнительныеПараметры.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
	
	ОповещениеОСозданииДоговора = Новый ОписаниеОповещения("ПослеСозданияДоговораЗавершение", ЗакупкиКлиент, ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяФормыДоговора, ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,,ОповещениеОСозданииДоговора);
	
КонецПроцедуры

// Обработка оповещения после создания договора из формы документа.
//
//Параметры:
// Результат - Структура:
//  *Договор - СправочникСсылка.ДоговорыКонтрагентов - созданный договор.
// ДополнительныеПараметры - Структура:
//  *Объект - ФормаКлиентскогоПриложения - форма документа.
//  *Партнер - СправочникСсылка.Партнеры - партнер из документа.
//  *ПутьКДоговору - Строка - путь к реквизиту с данными по договору.
//  *ИмяСобытияОповещения - Строка - имя события формы при изменении договора.
//  *Договор - СправочникСсылка.ДоговорыКонтрагентов - выбранный договор.
//
Процедура ПослеСозданияДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Договор") И ЗначениеЗаполнено(ДополнительныеПараметры.Договор)
		И ДополнительныеПараметры.Свойство("Партнер") Тогда
		СообщениеОбОшибке = "";
		ВыбранныйДоговор = ДополнительныеПараметры.Договор;
		Если ЗакупкиВызовСервера.ПроверитьДанныеПоОтборуИПартнеру(ВыбранныйДоговор, ДополнительныеПараметры.Отбор, ДополнительныеПараметры.Партнер, СообщениеОбОшибке) Тогда
			ДанныеДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(ДополнительныеПараметры.Объект,
				ДополнительныеПараметры.ПутьКДоговору);
			ДанныеДокумента.Данные[ДанныеДокумента.Имя] = ВыбранныйДоговор;
			Оповестить(ДополнительныеПараметры.ИмяСобытияОповещения, ДанныеДокумента.Имя, ДополнительныеПараметры.Объект);
		Иначе
			ПоказатьПредупреждение(,СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать см. НоменклатураПартнеровКлиент.ПоказатьНоменклатуруПартнера
// Открывает форму списка номенклатуры поставщика с отбором по владельцу, номенклатуре, характеристике, упаковке.
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры - владелец номенклатуры поставщика
//	Ссылка        - ДокументСсылка - ссылка на документ из формы которого вызывается процедура
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары.
//
Процедура ПоказатьНоменклатуруПоставщика(Партнер, Ссылка, ТекущаяСтрока) Экспорт

	НоменклатураПартнеровКлиент.ПоказатьНоменклатуруПартнера(Партнер, Ссылка, ТекущаяСтрока, "");

КонецПроцедуры

// Устарела. Вызывает проверку на наличие в информационной базе ранее сопоставленной номенклатуры поставщика.
// Если ранее сопоставленная номенклатура найдена - предупреждает об этом пользователя.
//
// Параметры:
//   Объект - ДанныеФормыКоллекция - документ, для которого необходимо осуществлять проверку.
//   ОписаниеОповещения - ОписаниеОповещения - определяет процедуру, которая будет вызвана после завершения проверки.
//   НеВыполнятьПроверкуДляПользователя - Булево - флаг, определяющий нужно ли осуществлять проверку.
//
Процедура ПроверитьСопоставленнуюНоменклатуруПоставщика(Объект, ОписаниеОповещения, НеВыполнятьПроверкуДляПользователя) Экспорт

	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);

КонецПроцедуры

// Устарела. Следует использовать см. НоменклатураПартнеровКлиент.ПриВыбореНоменклатурыПартнера.
// При попытке выбора номенклатуры поставщика в строке таблицы пользователь получает сообщение о незаполненности партнера.
//
// Параметры:
//	Объект                - ДанныеФормыСтруктура - документ, для выдачи сообщения об ошибках
//	Поле                  - ПолеФормы - поле, в котором пользователь осуществляет выбор
//	ИмяПроверяемогоПоля   - Строка - имя поля, для которого необходимо выдать ошибку.
//	ПредставлениеПартнера - Строка - представление поля, для которого необходимо выдать ошибку.
Процедура ПриВыбореНоменклатурыПоставщика(Объект, Поле, ИмяПроверяемогоПоля, ПредставлениеПартнера) Экспорт
	
	НоменклатураПартнеровКлиент.ПриВыбореНоменклатурыПартнера(Объект, Поле, ИмяПроверяемогоПоля, ПредставлениеПартнера);
		
КонецПроцедуры

// Устарела. Следует использовать см. НоменклатураПартнеровКлиент.ЗаполнитьСписокВыбораНоменклатурыПартнера.
// Формирует список выбора номенклатуры поставщика с отбором по номенклатуре, характеристике, упаковке.
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры - владелец номенклатуры поставщика
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары
//	СписокВыбора  - СписокЗначений - список выбора номенклатуры поставщика.
//
Процедура ЗаполнитьСписокВыбораНоменклатурыПоставщика(Партнер, ТекущаяСтрока, СписокВыбора) Экспорт
	
	НоменклатураПартнеровКлиент.ЗаполнитьСписокВыбораНоменклатурыПартнера(Партнер, ТекущаяСтрока, СписокВыбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗавершенияАсинхронныхОбработчиков

// Обработчик завершения выбора вида цен поставщика.
//
// Параметры:
//  ВидЦеныПоставщика       - СправочникСсылка.ВидыЦенПоставщиков - выбранный вид цен поставщика.
//  ДополнительныеПараметры - Структура - дополнительные параметры:
//		* ОписаниеОповещения - ОписаниеОповещения -
Процедура ВыбратьВидЦеныПоставщикаЗавершение(ВидЦеныПоставщика, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ВидЦеныПоставщика);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
