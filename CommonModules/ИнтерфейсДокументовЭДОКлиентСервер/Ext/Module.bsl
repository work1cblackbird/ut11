#Область СлужебныйПрограммныйИнтерфейс

#Область СозданиеДокументаПоФайлу

// Возвращает пустые параметры создания документа по файлу.
// 
// Возвращаемое значение:
//  См. ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу
Функция НовыеПараметрыСозданияДокументаПоФайлу() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("Контрагент", Неопределено);
	Параметры.Вставить("Договор", Неопределено);
	Параметры.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыДокументовЭДО.ПустаяСсылка"));
	Параметры.Вставить("НомерДокумента", "");
	Параметры.Вставить("ДатаДокумента", Дата(1,1,1));
	Параметры.Вставить("СуммаДокумента", 0);
	Параметры.Вставить("ОбъектыУчета", Новый Массив);
	Параметры.Вставить("Подписанты", Новый Массив);
	Параметры.Вставить("МаршрутПодписания", ПредопределенноеЗначение("Справочник.МаршрутыПодписания.ПустаяСсылка"));
	Параметры.Вставить("СоздатьНомерАвтоматически", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПредупрежденийКомпонентов

// Возвращает структуру данных предупреждения компонента.
// 
// Возвращаемое значение:
// 	Структура - параметры просмотра документооборота:
// 	* Вид - Строка - вид предупреждения.
// 	* ТекстОшибки - Строка - текст сообщения.
// 	* Блокирующее - Булево - признак невозможности дальнейших действий без устранения проблемы.
// 	* ДополнительныеДанные - Структура - дополнительные данные для обработки сообщения.
Функция НовыеДанныеПредупрежденияКомпонента() Экспорт
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Вид", "");
	ПараметрыСообщения.Вставить("ТекстОшибки", "");
	ПараметрыСообщения.Вставить("Блокирующее", Ложь);
	ПараметрыСообщения.Вставить("ДополнительныеДанные", Новый Структура);	

	Возврат ПараметрыСообщения;

КонецФункции

// Возвращает структуру данных для открытия формы проблем при обработке документов.
// 
// Возвращаемое значение:
//  Структура - параметры просмотра документооборота:
//  * СписокДокументовКОтправке - Массив из ДокументСсылка - ссылки на обрабатываемые документы.
//  * АдресСведенийОбОшибках - Строка - адрес сведений об ошибках во временном хранилище.
//  * РежимПодписатьОтправить - Булево - режим "Подписать и отправить".
//  * ФормаВладелец - ФормаКлиентскогоПриложения
//
Функция НовыеПараметрыПроблемПриОбработкеДокументов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокДокументовКОтправке", Новый Массив);
	Параметры.Вставить("АдресСведенийОбОшибках", "");
	Параметры.Вставить("РежимПодписатьОтправить", Ложь);
	Параметры.Вставить("ИсправляемыйДокумент", Неопределено);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	Параметры.Вставить("Предупреждения", Неопределено);
	
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ОшибкиПриОбработкеДокументов

Функция ВидОшибкиНетПравДляНастройкиЭДО() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НетПравДляНастройкиЭДО";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось сформировать электронный документ'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Нет прав для настройки электронного документооборота'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Обратитесь к администратору'");

	Возврат ВидОшибки;
	
КонецФункции

Процедура ЗаполнитьСостояниеЭДО_ФормаДокумента(Параметры) Экспорт
	
	Форма = Параметры.Форма;
	ОбъектУчета = Параметры.ДокументСсылка;
	КонтроллерСостояниеЭДО = Параметры.КонтроллерСостояниеЭДО;
	ГруппаСостояниеЭДО = Параметры.ГруппаСостояниеЭДО;
	
	Если КонтроллерСостояниеЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектУчета);
	Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
		Если СтрокаОписания.Направление <> ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакВидимости = ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяЭДОИВнутреннийЭДО();
		Если ГруппаСостояниеЭДО = Неопределено Тогда
			КонтроллерСостояниеЭДО.Видимость = ПризнакВидимости;
		Иначе
			ГруппаСостояниеЭДО.Видимость = ПризнакВидимости;
		КонецЕсли;
		
		Если Не ПризнакВидимости Тогда
			Возврат;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(ОбъектУчета);
	
	Если ГруппаСостояниеЭДО = Неопределено Тогда
		КонтроллерСостояниеЭДО.Видимость = ДанныеСостоянияЭДО.ИспользуетсяОбменЭлектроннымиДокументами;
	Иначе
		ГруппаСостояниеЭДО.Видимость = ДанныеСостоянияЭДО.ИспользуетсяОбменЭлектроннымиДокументами;
	КонецЕсли;
	
	Если Не ДанныеСостоянияЭДО.ИспользуетсяОбменЭлектроннымиДокументами Тогда
		Возврат;
	КонецЕсли;
	
	СкрыватьСостояниеНеНачатогоЭДО = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами") 
		И Форма.ПараметрыОбменаСКонтрагентами <> Неопределено Тогда
		Форма.ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", ДанныеСостоянияЭДО);
		Форма.ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", ДанныеСостоянияЭДО);
		СкрыватьСостояниеНеНачатогоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Форма.ПараметрыОбменаСКонтрагентами, "СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСостоянияЭДО.ПредставлениеСостояния)
		ИЛИ СкрыватьСостояниеНеНачатогоЭДО И ДанныеСостоянияЭДО.ЭтоСостояниеНеНачатогоЭДО Тогда
		Если ГруппаСостояниеЭДО = Неопределено Тогда
			КонтроллерСостояниеЭДО.Видимость = Ложь;
		Иначе
			ГруппаСостояниеЭДО.Видимость = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КонтроллерСостояниеЭДО) = Тип("ПолеФормы")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами") 
		И Форма.ПараметрыОбменаСКонтрагентами <> Неопределено		 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ПараметрыОбменаСКонтрагентами, "ПутьКДаннымКонтроллераСостояния") Тогда
		Форма[Форма.ПараметрыОбменаСКонтрагентами.ПутьКДаннымКонтроллераСостояния] = ДанныеСостоянияЭДО.ПредставлениеСостояния;
	ИначеЕсли ТипЗнч(КонтроллерСостояниеЭДО) = Тип("ДекорацияФормы") Тогда
		КонтроллерСостояниеЭДО.Заголовок = ДанныеСостоянияЭДО.ПредставлениеСостояния;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСостояниеЭДО_ФормаСправочника(Параметры) Экспорт
	
	Форма = Параметры.Форма;
	ОбъектУчета = Параметры.СправочникСсылка;
	КонтроллерСостояниеЭДО = Параметры.КонтроллерСостояниеЭДО;
	ГруппаСостояниеЭДО = Параметры.ГруппаСостояниеЭДО;
	
	Если КонтроллерСостояниеЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектУчета);
	Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
		Если СтрокаОписания.Направление <> ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакВидимости = ИнтерфейсДокументовЭДОВызовСервера.ИспользуетсяЭДОИВнутреннийЭДО();
		Если ГруппаСостояниеЭДО = Неопределено Тогда
			КонтроллерСостояниеЭДО.Видимость = ПризнакВидимости;
		Иначе
			ГруппаСостояниеЭДО.Видимость = ПризнакВидимости;
		КонецЕсли;
		
		Если Не ПризнакВидимости Тогда
			Возврат;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(ОбъектУчета);
	
	Если ГруппаСостояниеЭДО = Неопределено Тогда
		КонтроллерСостояниеЭДО.Видимость = ДанныеСостоянияЭДО.ИспользуетсяОбменЭлектроннымиДокументами;
	Иначе
		ГруппаСостояниеЭДО.Видимость = ДанныеСостоянияЭДО.ИспользуетсяОбменЭлектроннымиДокументами;
	КонецЕсли;
	
	Если Не ДанныеСостоянияЭДО.ИспользуетсяОбменЭлектроннымиДокументами Тогда
		Возврат;
	КонецЕсли;
	
	СкрыватьСостояниеНеНачатогоЭДО = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами") 
		И Форма.ПараметрыОбменаСКонтрагентами <> Неопределено Тогда
		Форма.ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОИзначальные", ДанныеСостоянияЭДО);
		Форма.ПараметрыОбменаСКонтрагентами.Вставить("ДанныеСостоянияЭДОТекущие", ДанныеСостоянияЭДО);
		СкрыватьСостояниеНеНачатогоЭДО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Форма.ПараметрыОбменаСКонтрагентами, "СкрыватьСостояниеНеНачатогоЭДО", Ложь);
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСостоянияЭДО.ПредставлениеСостояния)
		ИЛИ СкрыватьСостояниеНеНачатогоЭДО И ДанныеСостоянияЭДО.ЭтоСостояниеНеНачатогоЭДО Тогда
		Если ГруппаСостояниеЭДО = Неопределено Тогда
			КонтроллерСостояниеЭДО.Видимость = Ложь;
		Иначе
			ГруппаСостояниеЭДО.Видимость = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КонтроллерСостояниеЭДО) = Тип("ПолеФормы")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами") 
		И Форма.ПараметрыОбменаСКонтрагентами <> Неопределено		 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ПараметрыОбменаСКонтрагентами, "ПутьКДаннымКонтроллераСостояния") Тогда
		Форма[Форма.ПараметрыОбменаСКонтрагентами.ПутьКДаннымКонтроллераСостояния] = ДанныеСостоянияЭДО.ПредставлениеСостояния;
	ИначеЕсли ТипЗнч(КонтроллерСостояниеЭДО) = Тип("ДекорацияФормы") Тогда
		КонтроллерСостояниеЭДО.Заголовок = ДанныеСостоянияЭДО.ПредставлениеСостояния;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДействияПоЭДО

// Возвращает пустую коллекцию итогов выполнения действий по ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//   * ОбработаноПоДействиям - Соответствие из КлючИЗначение:
//     ** Ключ     - ПеречислениеСсылка.ДействияПоЭДО
//     ** Значение - Число
//   * ОбработанныеДокументы - Соответствие из КлючИЗначение:
//     ** Ключ     - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                   ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//     ** Значение - Булево
//   * ОбработанныеУчетныеЗаписи - Соответствие из КлючИЗначение:
//     ** Ключ     - Строка
//     ** Значение - см. ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи
//   * РезультатыОтправкиПолучения - см. НовыеРезультатыОтправкиПолучения
//   * ПолученоКонтейнеров - Число
//
Функция НовыйИтогВыполненияДействийПоЭДО() Экспорт
	Итог = Новый Структура;
	Итог.Вставить("ОбработаноПоДействиям", Новый Соответствие);
	Итог.Вставить("ОбработанныеДокументы", Новый Соответствие);
	Итог.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	Итог.Вставить("РезультатыОтправкиПолучения", НовыеРезультатыОтправкиПолучения());
	Итог.Вставить("ПолученоКонтейнеров", 0);
	Возврат Итог;
КонецФункции

// Параметры:
//  Приемник - см. НовыйИтогВыполненияДействийПоЭДО
//  Источник - см. НовыйИтогВыполненияДействийПоЭДО
Процедура ДополнитьИтогВыполненияДействийПоЭДО(Приемник, Источник) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Приемник.ОбработанныеДокументы,
		Источник.ОбработанныеДокументы, Истина);
	
	ОбработаноПоДействиямПриемника = Приемник.ОбработаноПоДействиям;
	
	Для Каждого ОбработаноПоДействиюИсточника Из Источник.ОбработаноПоДействиям Цикл
		Обработано = ОбработаноПоДействиюИсточника.Значение;
		Действие = ОбработаноПоДействиюИсточника.Ключ;
		
		ОбработаноПриемник = ОбработаноПоДействиямПриемника[Действие];
		Если ЗначениеЗаполнено(ОбработаноПриемник) Тогда
			Обработано = Обработано + ОбработаноПриемник;
		КонецЕсли;
		
		ОбработаноПоДействиямПриемника.Вставить(Действие, Обработано);
	КонецЦикла;
	
	ДополнитьРезультатыОтправкиПолучения(Приемник.РезультатыОтправкиПолучения, Источник.РезультатыОтправкиПолучения);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Приемник.ОбработанныеУчетныеЗаписи, Источник.ОбработанныеУчетныеЗаписи, Истина);
	
	Приемник.ПолученоКонтейнеров = Приемник.ПолученоКонтейнеров + Источник.ПолученоКонтейнеров;
	
КонецПроцедуры

// Возвращает пустой набор действий по ЭДО.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
//
Функция НовыйНаборДействийПоЭДО() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращает пустую коллекцию типов объектов для обработки по действиям ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//  * ОписанияДокументовПоФайлам - Массив из см. НовоеОписаниеДокументаДляФормированияПоФайлам
//  * ОбъектыУчета               - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ЭлектронныеДокументы       - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,
//                                           ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Сообщения                  - Массив из ДокументСсылка.СообщениеЭДО
//  * ПакетыДокументов           - Массив из УникальныйИдентификатор
//  * ИдентификаторыОрганизаций  - Массив из Строка
//  * ТранспортныеКонтейнеры     - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО
//
Функция НовыеОбъектыДействийПоЭДО() Экспорт
	ОбъектыДействий = Новый Структура;
	ОбъектыДействий.Вставить("ОписанияДокументовПоФайлам", Новый Массив);
	ОбъектыДействий.Вставить("ОбъектыУчета", Новый Массив);
	ОбъектыДействий.Вставить("ЭлектронныеДокументы", Новый Массив);
	ОбъектыДействий.Вставить("Сообщения", Новый Массив);
	ОбъектыДействий.Вставить("ПакетыДокументов", Новый Массив);
	ОбъектыДействий.Вставить("ИдентификаторыОрганизаций", Новый Массив);
	ОбъектыДействий.Вставить("ТранспортныеКонтейнеры", Новый Массив);
	Возврат ОбъектыДействий;
КонецФункции

// Возвращает пустые параметры для выполнения действий по ЭДО.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * НаборДействий - См. НовыйНаборДействийПоЭДО
//  * ОбъектыДействий - См. НовыеОбъектыДействийПоЭДО
//  * ДополнительныеПараметрыДействий - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - См. НовыеДополнительныеПараметрыДействия
//  * КлючиНастроекОбъектов - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - См. НастройкиВнутреннегоЭДО.КлючОбъектаНастроекВнутреннегоЭДО
//  * НастройкиОбъектов - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - См. НастройкиЭДО.НастройкиОтправки
//  * МаршрутыПодписанияОбъектов - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - СправочникСсылка.МаршрутыПодписания
//  * ДополнительныеДанныеОбъектов - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - Структура
//  * ПодписантыОбъектов - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - Массив из ОпределяемыйТип.Пользователь
//  * ОтпечаткиСертификатов - Неопределено - если получение отпечатков не выполнялось.
//                          - См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  * ВыбранныеСертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ИдентификаторыПечатныхФормОбъектов - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - Строка
//  * РасшифрованныеМаркеры - Неопределено - при отсутствии маркеров.
//                          - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * ДополнительныеФайлы - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  * ДанныеРучногоФормированияТитула - Неопределено - заполняется в формах ручного формирования титулов
//                                    - См. ДанныеРучногоФормированияТитула
//  * ОбработатьТолькоИзвещения - Булево
//
Функция НовыеПараметрыВыполненияДействийПоЭДО() Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("НаборДействий", НовыйНаборДействийПоЭДО());
	ПараметрыВыполнения.Вставить("ОбъектыДействий", НовыеОбъектыДействийПоЭДО());
	ПараметрыВыполнения.Вставить("ДополнительныеПараметрыДействий", Новый Соответствие);
	ПараметрыВыполнения.Вставить("КлючиНастроекОбъектов", Новый Соответствие);
	ПараметрыВыполнения.Вставить("НастройкиОбъектов", Новый Соответствие);
	ПараметрыВыполнения.Вставить("МаршрутыПодписанияОбъектов", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ПодписантыОбъектов", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ДополнительныеДанныеОбъектов", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ОтпечаткиСертификатов", Неопределено);
	ПараметрыВыполнения.Вставить("ВыбранныеСертификаты", Новый Массив);
	ПараметрыВыполнения.Вставить("ИдентификаторыПечатныхФормОбъектов", Новый Соответствие);
	ПараметрыВыполнения.Вставить("РасшифрованныеМаркеры", Неопределено);
	ПараметрыВыполнения.Вставить("ДополнительныеФайлы", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ДанныеРучногоФормированияТитула", Неопределено);
	ПараметрыВыполнения.Вставить("ОбработатьТолькоИзвещения", Ложь);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Добавляет действие в набор.
// 
// Параметры:
//  НаборДействий - См. НовыйНаборДействийПоЭДО
//  Действие      - ПеречислениеСсылка.ДействияПоЭДО
//
Процедура ДобавитьДействие(НаборДействий, Действие) Экспорт
	НаборДействий.Вставить(Действие, Истина);
КонецПроцедуры

// Возвращает пустую коллекцию дополнительных параметров действия по ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//  * Комментарий - Строка
//  * Ответственный - Неопределено,ОпределяемыйТип.Пользователь
//
Функция НовыеДополнительныеПараметрыДействия() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Комментарий", "");
	Параметры.Вставить("Ответственный", Неопределено);
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  Структура - Новое описание документа для формирования по файлам:
//  * Идентификатор - Строка
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * Договор - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - Неопределено,СправочникСсылка.ВидыДокументовЭДО
//  * Дата - Дата
//  * Номер - Строка
//  * Сумма - Число
//  * ФайлыТитулов - Массив Из См. НовыеФайлыЭлементаРегламентаДляФормированияДокумента
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * СопроводительнаяЗаписка - Строка
Функция НовоеОписаниеДокументаДляФормированияПоФайлам() Экспорт
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор", "");
	Описание.Вставить("Организация", Неопределено);
	Описание.Вставить("Контрагент", Неопределено);
	Описание.Вставить("Договор", Неопределено);
	Описание.Вставить("ВидДокумента", Неопределено);
	Описание.Вставить("Дата", Дата(1, 1, 1));
	Описание.Вставить("Номер", "");
	Описание.Вставить("Сумма", 0);
	Описание.Вставить("ФайлыТитулов", Новый Массив);
	Описание.Вставить("ОбъектыУчета", Новый Массив);
	Описание.Вставить("СопроводительнаяЗаписка", "");
	Возврат Описание;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Основной - Неопределено
//             - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  * Дополнительный - Неопределено - если дополнительный файл отсутствует.
//                   - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция НовыеФайлыТитулаДокументаДляФормирования() Экспорт
	
	ФайлыТипаРегламента = Новый Структура;
	ФайлыТипаРегламента.Вставить("Основной", Неопределено);
	ФайлыТипаРегламента.Вставить("Дополнительный", Неопределено);
	Возврат ФайлыТипаРегламента;
	
КонецФункции

// Параметры:
//  НаборДействий - см. НовыйНаборДействийПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТребуютсяОтпечаткиСертификатовДляНабораДействий(НаборДействий) Экспорт
	
	ТребуютсяОтпечатки =
			ЕстьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"))
			ИЛИ ЕстьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отправить"))
			ИЛИ ЕстьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Загрузить"));
	
	Возврат ТребуютсяОтпечатки;
	
КонецФункции

// Возвращает признак наличия действия в наборе.
// 
// Параметры:
//  НаборДействий - См. НовыйНаборДействийПоЭДО
//  Действие      - ПеречислениеСсылка.ДействияПоЭДО
// Возвращаемое значение:
//  Булево - признак наличия действия в наборе.
//
Функция ЕстьДействие(НаборДействий, Действие) Экспорт
	Возврат НаборДействий[Действие] = Истина;
КонецФункции

// Возвращает результат отправки и получения электронных документов.
// 
// Возвращаемое значение:
// 	Структура:
// * Успешные   - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - содержит ссылки на успешно
//                                               отправленные/полученные электронные документы документы или
//                                               транспортные контейнеры.
//              - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - описание см. выше.
//              - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО - описание см. выше.
//  * Неудачные - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО - одержит ссылки на
//                                                неудачно отправленные/полученные документы или
//                                                транспортные контейнеры.
//              - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - описание см. выше.
//              - Массив из ДокументСсылка.ТранспортныйКонтейнерЭДО - описание см. выше.
Функция НовыеРезультатыОтправкиПолучения() Экспорт
	
	Возврат Новый Структура("Успешные, Неудачные", Новый Массив, Новый Массив);
	
КонецФункции

// Параметры:
//  Приемник - см. НовыеРезультатыОтправкиПолучения
//  Источник - см. НовыеРезультатыОтправкиПолучения
Процедура ДополнитьРезультатыОтправкиПолучения(Приемник, Источник) Экспорт
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Приемник.Успешные, Источник.Успешные);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Приемник.Неудачные, Источник.Неудачные);
КонецПроцедуры

// Параметры:
//  ОбъектыДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ОтсутствуютОбъектыДействий(ОбъектыДействий) Экспорт
	Для Каждого Элемент Из ОбъектыДействий Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПредставлениеДокумента

// Возвращает представление электронного документа по его свойствам.
// 
// Параметры:
//  СвойстваДокумента - Структура:
//  * ВидДокумента   - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента  - Дата
//  ЭтоНовый - Булево
// Возвращаемое значение:
//  Строка - представление электронного документа.
//
Функция ПредставлениеДокументаПоСвойствам(СвойстваДокумента, ЭтоНовый = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(СвойстваДокумента.НомерДокумента) И ЗначениеЗаполнено(СвойстваДокумента.ДатаДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"), СвойстваДокумента.ВидДокумента,
			СвойстваДокумента.НомерДокумента, Формат(СвойстваДокумента.ДатаДокумента, "ДЛФ=D;"));
	ИначеЕсли ЗначениеЗаполнено(СвойстваДокумента.НомерДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 № %2'"), СвойстваДокумента.ВидДокумента,
			СвойстваДокумента.НомерДокумента);
	ИначеЕсли ЗначениеЗаполнено(СвойстваДокумента.ДатаДокумента) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 от %2'"), СвойстваДокумента.ВидДокумента,
			Формат(СвойстваДокумента.ДатаДокумента, "ДЛФ=D;"));
	Иначе
		Представление = Строка(СвойстваДокумента.ВидДокумента);
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (Создание)'"), Представление);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

Функция НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемыРегламенты) Экспорт
	
	Результат = Неопределено;
	
	Если ЭлементСхемыРегламенты.ТипЭлементаРегламента =
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
		
		Для Каждого ЭлементСхемы Из ЭлементСхемыРегламенты.ПолучитьЭлементы() Цикл
			Если ЭлементСхемы.ТипЭлементаРегламента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя") Тогда
				Результат = ЭлементСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представления для вариантов формирования дополнительных сведений акта о расхождениях.
// 
// Возвращаемое значение:
//  ФиксированноеСоответствие из КлючИЗначение:
//   * Ключ - Строка - вариант формирования
//   * Значение - Строка - представление варианта
//
Функция ПредставленияВариантовФормированияДополнительныхСведенийАктаОРасхождениях() Экспорт
	
	Варианты = Новый Соответствие();
		
	Варианты.Вставить("1", НСтр("ru = 'К документу дополнительные сведения не формируются'"));
	Варианты.Вставить("2", НСтр("ru = 'К документу формируются дополнительные сведения об оприходовании ценностей покупателем (в том числе на склад), подписанные ответственным лицом покупателя (уполномоченным покупателем лицом)'"));
	Варианты.Вставить("3", НСтр("ru = 'К документу формируются дополнительные сведения о его утверждении, подписанные ответственным лицом покупателя (уполномоченным покупателем лицом)'"));
	Варианты.Вставить("4", НСтр("ru = 'К документу формируются иные дополнительные сведения, подписанные ответственным лицом покупателя (уполномоченным покупателем лицом)'"));
	Варианты.Вставить("5", НСтр("ru = 'К документу формируются дополнительные сведения о согласии (несогласии) с результатами приемки, подписанные ответственным лицом со стороны продавца (уполномоченным продавцом лицом)'"));
	Варианты.Вставить("6", НСтр("ru = 'К документу формируются иные дополнительные сведения, подписанные ответственным лицом со стороны продавца (уполномоченным продавцом лицом)'"));
	Варианты.Вставить("7", НСтр("ru = 'К документу формируются дополнительные сведения о согласии (несогласии) с результатами приемки, подписанные ответственным лицом со стороны перевозчика (уполномоченным перевозчиком лицом)'"));
	Варианты.Вставить("8", НСтр("ru = 'К документу формируются иные дополнительные сведения, подписанные ответственным лицом со стороны перевозчика (уполномоченным перевозчиком лицом)'"));
	
	Возврат Новый ФиксированноеСоответствие(Варианты);
	
КонецФункции

#Область ЕИС

// Возвращает приложение для ЕИС.
// 
// Параметры:
// 	ЭлементСхемыРегламенты - ДанныеФормыЭлементДерева - Элемент для которого нужно найти информацию отправителя.
// 	ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - тип регламента элемента схемы.
//
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева, Неопределено - Элемент информации отправителя.
//
Функция НайтиЭлементСхемыПриложениеДляЕИС(ЭлементСхемыРегламенты, ТипЭлементаРегламента) Экспорт
	
	Результат = Неопределено;
	
	Если ЭлементСхемыРегламенты.ТипЭлементаРегламента =
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
		
		Для Каждого ЭлементСхемы Из ЭлементСхемыРегламенты.ПолучитьЭлементы() Цикл
			Если ЭлементСхемы.ТипЭлементаРегламента = ТипЭлементаРегламента Тогда
				Результат = ЭлементСхемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ОбновитьФормуПечатиДокументовБСП(Форма) Экспорт
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;
	
	ПараметрыЭД = Неопределено;
	ОписаниеОбъектаУчета = ИнтеграцияЭДОВызовСервера.ОписаниеОбъектаУчета(ОбъектыУчета[0]);
	Для каждого СтрокаОписания Из ОписаниеОбъектаУчета Цикл
		Если СтрокаОписания.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.Внутренний") Тогда
			ПараметрыЭД = СтрокаОписания;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД) Тогда 
		Возврат;
	КонецЕсли;
		
	Команда = ИнтерфейсДокументовЭДОВызовСервера.КомандаПечатиОбъекта(ОбъектыУчета[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Форма.Элементы.ГруппаДополнительнаяИнформация.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВидВнутреннегоДокумента = ИнтерфейсДокументовЭДОВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(ОбъектыУчета[0], Команда);

	Настройки = ИнтерфейсДокументовЭДОВызовСервера.СуществуюНастройкиВнутреннегоЭДО(ПараметрыЭД.Организация, ВидВнутреннегоДокумента); 
		
	ЭДОНачат = ИнтерфейсДокументовЭДОВызовСервера.ЕстьАктуальныеЭлектронныеДокументы(ОбъектыУчета, ВидВнутреннегоДокумента);
	ТекстСостоянияЭД = ИнтеграцияЭДОВызовСервера.ПредставлениеСостоянияВнутреннегоДокументаОбъектаУчета(ОбъектыУчета, ВидВнутреннегоДокумента);
	
	Форма.Элементы.ГруппаДополнительнаяИнформация.Видимость = Ложь;

	Если Настройки <> Неопределено И Настройки.Формировать Или ЭДОНачат Тогда 
		
		Форма.Элементы.ОтправитьНаПодписьКнопкаФормы.КнопкаПоУмолчанию = Истина;
		
		Если ЗначениеЗаполнено(ТекстСостоянияЭД) И ЭДОНачат Тогда
			
			Форма.Элементы.ПредставлениеПрогрессаПодписанияДекорация.Заголовок = Новый ФорматированнаяСтрока(ТекстСостоянияЭД,,,, "ВнутреннийЭДОПрогрессПодписания");
			
			Форма.Элементы.ЭмблемаСервиса1СЭДОПодписаниеКартинка.Видимость = Истина;
			Форма.Элементы.ПредставлениеПрогрессаПодписанияДекорация.Видимость = Истина;
			Форма.Элементы.ОтправитьНаПодписьКнопкаФормы.Видимость = Ложь;
			
		Иначе

			Форма.Элементы.ОтправитьНаПодписьКнопкаФормы.Видимость = ЗначениеЗаполнено(Форма.ОбъектыПечати);
			
		КонецЕсли;
		
		Форма.Элементы.КнопкаПечатьКоманднаяПанель.ЦветФона = Новый Цвет;
		Форма.Элементы.КнопкаПечатьКоманднаяПанель.Отображение = ОтображениеКнопки.Картинка;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЭД) И ПараметрыЭД.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭДО.Внутренний") 
		И Настройки = Неопределено Тогда 
		
		ТекстПриглашения = НСтр("ru = 'Хотите сэкономить на бумаге? Оформите документ в электронном виде.'");
		
		Форма.Элементы.ДополнительнаяИнформация.Заголовок = Новый ФорматированнаяСтрока(ТекстПриглашения,,,, "Реклама1СЭДОВнутренний"); 
		Форма.Элементы.ГруппаДополнительнаяИнформация.Видимость = ЗначениеЗаполнено(Форма.ОбъектыПечати);
		Форма.Элементы.КнопкаПечатьКоманднаяПанель.КнопкаПоУмолчанию = Истина;
		Форма.Элементы.КартинкаИнформации.Видимость = Истина;
		Форма.Элементы.КартинкаИнформации.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;

	КонецЕсли;
	
КонецПроцедуры

Процедура РазблокироватьЗаблокированныеЭлементыФормы(Форма, СписокЭлементов) Экспорт

	Для Каждого ЗаблокированныйЭлементыФормы Из СписокЭлементов Цикл

		Форма.Элементы[ЗаблокированныйЭлементыФормы.Значение].Доступность = Истина;

	КонецЦикла;

	СписокЭлементов.Очистить();

КонецПроцедуры

Функция ДанныеТабличногоДокумента(Знач ТабличныйДокумент, Знач ТипФайла) Экспорт
	
	#Если ВебКлиент Тогда
		// Внимание! В веб-клиенте использование данного варианта недоступно.
		Возврат ИнтерфейсДокументовЭДОВызовСервера.ДанныеТабличногоДокумента(ТабличныйДокумент, ТипФайла);
	#КонецЕсли
	
	Поток = Новый ПотокВПамяти();
	ТабличныйДокумент.Записать(Поток, ТипФайла);
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ВидДокумента - Неопределено
//                 - СправочникСсылка.ВидыДокументовЭДО - уточнение вида документа, когда по объекту учета доступно несколько вариантов.
//  * ДанныеКаталога - Строка - адрес временного хранилища данных каталога.
//  * НовыйДокумент - Булево - при Истина поиск текущего электронного документа не производится.
//  * ЗначенияДополнительныхПолей - Неопределено,Произвольный
//  * ФайлДоговора - Неопределено,
//                 - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция НовыеПараметрыОткрытияЭлектронногоДокумента() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВидДокумента", Неопределено);
	Параметры.Вставить("ДанныеКаталога", "");
	Параметры.Вставить("НовыйДокумент", Ложь);
	Параметры.Вставить("ЗначенияДополнительныхПолей", Неопределено);
	Параметры.Вставить("ФайлДоговора", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

#Область ФормированиеНеформализованныхЭДОИзПечатныхФорм

// Конструктор данных печатной формы для формирования неформализованного ЭДО
// 
// Возвращаемое значение:
//  Структура - Новые данные печатной формы для неформализованного ЭДО:
//    * ТабличныйДокумент - ТабличныйДокумент
//    * ДвоичныеДанныеФайла - Неопределено, ДвоичныеДанные - 
//    * НаименованиеФайла - Строка
//    * Расширение - Строка
//    * Уникальность - Строка
Функция НовыеДанныеПечатнойФормыДляНеформализованногоЭДО() Экспорт
	
	ДанныеПечатнойФормы = Новый Структура;
	ДанныеПечатнойФормы.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент());
	ДанныеПечатнойФормы.Вставить("ДвоичныеДанныеФайла", Неопределено);
	ДанныеПечатнойФормы.Вставить("НаименованиеФайла", "");
	ДанныеПечатнойФормы.Вставить("Расширение", "");
	ДанныеПечатнойФормы.Вставить("Уникальность", "");
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

// Новый контекст отправки печатных форм по ЭДО.
// 
// Возвращаемое значение:
//  Структура - Новый контекст отправки печатных форм по ЭДО:
// * ДокументОснование - Неопределено, ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО -
// * ДанныеПечатныхФорм - Массив Из см. НовыеДанныеПечатнойФормыДляНеформализованногоЭДО
Функция НовыйКонтекстОтправкиПечатныхФормПоЭДО() Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДокументОснование", Неопределено);
	Контекст.Вставить("ДанныеПечатныхФорм", Новый Массив);
	
	Возврат Контекст;
	
КонецФункции

#КонецОбласти

#Область РучноеФормированиеТитула

// Формирует структуру данных ручного формирования титула.
// По данным ручного формирования может заполняться описание данных электронного документа.
// 
// Параметры:
//  Форма - См. Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула
// 
// Возвращаемое значение:
//  См. ДанныеРучногоФормированияОтветногоТитулаУПД_УКД
Функция ДанныеРучногоФормированияТитула(Форма) Экспорт
	Формы = ФормыРучногоФормированияТитула();
	Если Форма.ИмяФормы = Формы.ОбщаяФормаДляУПД Тогда
		Возврат ДанныеРучногоФормированияОтветногоТитулаУПД_УКД(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ДоговорныйДокумент

// Параметры:
//  Формат - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоФорматДоговорногоДокументаПДФ_А3(Формат) Экспорт
	Возврат Формат = "ON_DOGDOC_1_999_01_01_01_01";
КонецФункции

// Параметры:
//  Формат - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоФорматДоговорногоДокументаXML(Формат) Экспорт
	Возврат Формат = "ON_SODSD_1_999_02_01_01_01";
КонецФункции

#КонецОбласти

// Ключ объекта настроек интерфейса ЭДО, используется для сохранения настроек интерфейса в хранилище общих настроек.
// 
// Возвращаемое значение:
//  Строка 
Функция КлючОбъектаНастроекИнтерфейсаЭДО() Экспорт
	Возврат "ИнтерфейсЭДО";
КонецФункции

// Возвращает путь к форме текущих дел по ЭДО в зависимости от варианта интерфейса.
// 
// Параметры:
//  Легкий - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ФормаТекущихДелЭДОПоВариантуИнтерфейса(Легкий = Ложь) Экспорт
	Возврат ?(Легкий, "Обработка.ИнтерфейсДокументовЭДО.Форма.НовыйИнтерфейсЭДО",
					  "Обработка.ИнтерфейсДокументовЭДО.Форма.ТекущиеДелаПоЭДО");
КонецФункции

// Форма выбора варианта интерфейса.
// 
// Возвращаемое значение:
//  Строка
Функция ФормаВыбораВариантаИнтерфейса() Экспорт
	Возврат "Обработка.ИнтерфейсДокументовЭДО.Форма.ВыборВариантаИнтерфейсаЭДО";
КонецФункции

// Параметры:
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСообщенияОНезаполненностиРеквизитовДокумента(ИмяРеквизита) Экспорт

	ШаблонСообщенияОНезаполненности = НСтр("ru = 'Поле ""%1"" не заполнено. Документ не записан.
		|Заполните его и повторите запись.'");
	Возврат СтрШаблон(ШаблонСообщенияОНезаполненности, ИмяРеквизита);

КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстСообщенияОНеобходимостиСнятьПометкуУдаленияДляОткрытияФайла() Экспорт
	Возврат НСтр("ru = 'Для открытия файла, необходимо снять пометку удаления с документа'");
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстСообщенияОбОтсутствииВозможностиЗагрузитьФайлXML() Экспорт
	Возврат НСтр("ru = 'Файл содержит ошибки. Выберите другой файл'");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаПредупрежденийКомпонентов

// Возвращает пустые настройки формирования электронного документа по объекту учета.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Направление - ПеречислениеСсылка.НаправленияЭДО - направление электронного документа.
// * НастройкиОтправки - Неопределено
//                     - См. НастройкиЭДО.НастройкиОтправки
// * НастройкиВнутреннегоЭДО - Неопределено
//                           - См. ИнтерфейсДокументовЭДО.НастройкиВнутреннегоЭДО
// * ЭтоОблачныйЭДО - Булево
Функция НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета() Экспорт
	НастройкиФормирования = Новый Структура;
	НастройкиФормирования.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияЭДО.ПустаяСсылка")); 
	НастройкиФормирования.Вставить("НастройкиОтправки", Неопределено);
	НастройкиФормирования.Вставить("НастройкиВнутреннегоЭДО", Неопределено);
	НастройкиФормирования.Вставить("ЭтоОблачныйЭДО", Ложь);
	Возврат НастройкиФормирования;
КонецФункции

#КонецОбласти

#Область ПредставлениеДокумента

// Заполняет имена полей для формирования представления электронного документа
// 
// Параметры:
//  Поля - Массив из Строка
//  СтандартнаяОбработка - Булево
//
Процедура ОбработкаПолученияПолейПредставленияДокумента(Поля, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("ВидДокумента");
	Поля.Добавить("НомерДокумента");
	Поля.Добавить("ДатаДокумента");
КонецПроцедуры

// Заполняет представление электронного документа.
// 
// Параметры:
//  Данные - Структура
//  Представление - Строка
//  СтандартнаяОбработка - Булево
//
Процедура ОбработкаПолученияПредставленияДокумента(Данные, Представление, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Представление = ПредставлениеДокументаПоСвойствам(Данные);
КонецПроцедуры

#КонецОбласти

#Область РучноеФормированиеТитула

// Структура полных имен форм, используемых для ручного формирования титулов
// 
// Возвращаемое значение:
//  Структура:
// * ОбщаяФормаДляУПД - Строка
Функция ФормыРучногоФормированияТитула()
	Формы = Новый Структура;
	Формы.Вставить("ОбщаяФормаДляУПД", "Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула");
	Возврат Формы;
КонецФункции

// Параметры:
//  Форма - См. Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула
// 
// Возвращаемое значение:
//  См. ДанныеРучногоФормированияОтветногоТитулаУПД_2019
//  См. ДанныеРучногоФормированияОтветногоТитулаУПД_5_02
//  См. ДанныеРучногоФормированияОтветногоТитулаУКД_2020
Функция ДанныеРучногоФормированияОтветногоТитулаУПД_УКД(Форма)
	Если Форма.ЭтоУПД Тогда
		Возврат ДанныеРучногоФормированияОтветногоТитулаУПД_2019(Форма);
	ИначеЕсли Форма.ЭтоУПД_5_02 Тогда
		Возврат ДанныеРучногоФормированияОтветногоТитулаУПД_5_02(Форма);
	ИначеЕсли Форма.ЭтоДополнительныеСведения Тогда
		Возврат ДанныеРучногоФормированияДополнительныхСведений(Форма);
	Иначе
		Возврат ДанныеРучногоФормированияОтветногоТитулаУКД_2020(Форма);
	КонецЕсли;
КонецФункции

// Служебный метод. Для получения данных см. ДанныеРучногоФормированияТитула
// 
// Параметры:
//  Форма - См. Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула
// 
// Возвращаемое значение:
//  Структура:
// * СоставительДокументаНаименование - Строка
// * СоставительДокументаДоверенность - Строка
// * СведенияОПринятииТоваров - Структура:
// ** КодИтога - Строка
// ** ДатаПолученияТоваров - Дата
// ** СодержаниеОперации - Строка
// * ДокументОРасхождениях - Структура:
// ** Вид - Строка
// ** Наименование - Строка
// ** Дата - Дата
// ** Номер - Строка
// * ЗакупкаДляГосударственныхНужд - Структура:
// ** КодЗакупки - Строка
// ** НомерЛицевогоСчетаПокупателя - Строка
// ** НаименованиеФинансовогоОрганаПокупателя - Строка
// ** НомерРеестровойЗаписиПокупателя - Строка
// ** НомерБюджетногоОбязательстваПокупателя - Строка
// ** КазначействоПокупателяКод - Строка
// ** КазначействоПокупателяНаименование - Строка
// ** ОКТМОМестаПоставки - Строка
// ** НомерДенежногоОбязательства - Строка
// ** ПредельнаяДатаОплаты - Дата
// ** ОКТМОПокупателя - Строка
// ** НомерРеестровойЗаписиПокупателя - Строка
// ** НомерБюджетногоОбязательстваПокупателя - Строка
// ** КазначействоПокупателяКод - Строка
// ** КазначействоПокупателяНаименование - Строка
// * ДенежныеОбязательства - Массив Из Структура:
// ** ВидСредств - Строка
// ** КодБюджетнойКлассификации - Строка
// ** КодОбъектаФАИП - Строка
// ** КодЦели - Строка
// ** НомерСтрокиИнформацииПродавца - Число
// ** СуммаАванса - Число
Функция ДанныеРучногоФормированияОтветногоТитулаУПД_2019(Форма)
	Данные = Новый Структура;
	Данные.Вставить("СоставительДокументаНаименование", Форма.СоставительДокументаНаименование);
	Если Форма.СоставительДокумента <> Форма.Покупатель Тогда
		Данные.Вставить("СоставительДокументаДоверенность", Форма.СоставительДокументаДоверенность);
	КонецЕсли;

	СведенияОПринятииТоваров = Новый Структура;
	СведенияОПринятииТоваров.Вставить("КодИтога", Форма.КодИтога);
	СведенияОПринятииТоваров.Вставить("ДатаПолученияТоваров", Форма.ДатаПолученияТоваров);
	СведенияОПринятииТоваров.Вставить("СодержаниеОперации", Форма.СодержаниеОперации);
	Данные.Вставить("СведенияОПринятииТоваров", СведенияОПринятииТоваров);

	Если Форма.ЕстьДокументОРасхождениях Тогда
		ДокументОРасхождениях = Новый Структура;
		ДокументОРасхождениях.Вставить("Вид", Форма.ДокументОРасхожденияхВид);
		ДокументОРасхождениях.Вставить("Наименование", Форма.ДокументОРасхожденияхНаименование);
		ДокументОРасхождениях.Вставить("Дата", Форма.ДокументОРасхожденияхДата);
		ДокументОРасхождениях.Вставить("Номер", Форма.ДокументОРасхожденияхНомер);
		Данные.Вставить("ДокументОРасхождениях", ДокументОРасхождениях);
	КонецЕсли;

	Если Форма.ЗакупкаДляГосударственныхНужд Тогда
		ЗакупкаДляГосударственныхНуждСтруктура = Новый Структура;
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("КодЗакупки", Форма.КодЗакупки);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НомерЛицевогоСчетаПокупателя",
			Форма.НомерЛицевогоСчетаПокупателя);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НаименованиеФинансовогоОрганаПокупателя",
			Форма.НаименованиеФинансовогоОрганаПокупателя);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НомерРеестровойЗаписиПокупателя",
			Форма.НомерРеестровойЗаписиПокупателя);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НомерБюджетногоОбязательстваПокупателя",
			Форма.НомерБюджетногоОбязательстваПокупателя);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("КазначействоПокупателяКод", Форма.КазначействоПокупателяКод);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("КазначействоПокупателяНаименование",
			Форма.КазначействоПокупателяНаименование);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("ОКТМОМестаПоставки", Форма.ОКТМОМестаПоставки);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НомерДенежногоОбязательства",
			Форма.НомерДенежногоОбязательства);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("ПредельнаяДатаОплаты", Форма.ПредельнаяДатаОплаты);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("ОКТМОПокупателя", Форма.ОКТМОПокупателя);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НомерРеестровойЗаписиПокупателя",
			Форма.НомерРеестровойЗаписиПокупателя);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("НомерБюджетногоОбязательстваПокупателя", Форма.КодЗакупки);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("КазначействоПокупателяКод", Форма.КазначействоПокупателяКод);
		ЗакупкаДляГосударственныхНуждСтруктура.Вставить("КазначействоПокупателяНаименование",
			Форма.КазначействоПокупателяНаименование);
		Данные.Вставить("ЗакупкаДляГосударственныхНужд", ЗакупкаДляГосударственныхНуждСтруктура);

		ДенежныеОбязательства = Новый Массив; // Массив Из Структура
		СтруктураСтроки = Новый ФиксированнаяСтруктура("ВидСредств, КодБюджетнойКлассификации, КодОбъектаФАИП, КодЦели,
			|НомерСтрокиИнформацииПродавца, СуммаАванса");
		Для Каждого СтрокаТаблицы Из Форма.ДенежныеОбязательства Цикл
			ДанныеСтроки = Новый Структура(СтруктураСтроки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			ДенежныеОбязательства.Добавить(ДанныеСтроки);
		КонецЦикла;
		Данные.Вставить("ДенежныеОбязательства", ДенежныеОбязательства);
	КонецЕсли;
	Возврат Данные;
КонецФункции

// Служебный метод. Для получения данных см. ДанныеРучногоФормированияТитула
// 
// Параметры:
//  Форма - См. Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула
// 
// Возвращаемое значение:
//  Структура:
// * СоставительДокументаНаименование - Строка
// * СодержаниеФХЖ - Структура:
// 	** СведенияОПринятииТоваров - Структура:
// 		*** КодИтога - Строка
// 		*** ДатаПолученияТоваров - Дата
// 		*** СодержаниеОперации - Строка 
// 		*** ДокументОРасхождениях - Структура:
// 			**** НаименованиеДокумента - Строка
// 			**** ДатаДокумента - Дата
// 			**** НомерДокумента - Строка
// * ЗакупкаДляГосударственныхНужд - Структура:
// ** КодЗакупки - Строка
// ** НомерЛицевогоСчетаПокупателя - Строка
// ** НаименованиеФинансовогоОрганаПокупателя - Строка
// ** НомерРеестровойЗаписиПокупателя - Строка
// ** НомерБюджетногоОбязательстваПокупателя - Строка
// ** КазначействоПокупателяКод - Строка
// ** КазначействоПокупателяНаименование - Строка
// ** ОКТМОМестаПоставки - Строка
// ** НомерДенежногоОбязательства - Строка
// ** ПредельнаяДатаОплаты - Дата
// ** ОКТМОПокупателя - Строка
// ** НомерРеестровойЗаписиПокупателя - Строка
// ** НомерБюджетногоОбязательстваПокупателя - Строка
// ** КазначействоПокупателяКод - Строка
// ** КазначействоПокупателяНаименование - Строка
// ** ДенежныеОбязательства - Массив Из Структура:
// 	*** ВидСредств - Строка
// 	*** КодБюджетнойКлассификации - Строка
// 	*** КодОбъектаФАИП - Строка
// 	*** КодЦели - Строка
// 	*** НомерСтрокиИнформацииПродавца - Число
// 	*** СуммаАванса - Число
// 
Функция ДанныеРучногоФормированияОтветногоТитулаУПД_5_02(Форма)
	
	Данные = Новый Структура;
	
	Данные.Вставить("СоставительДокументаНаименование", Форма.СоставительДокументаНаименование);
	Если Форма.СоставительДокумента <> Форма.Покупатель Тогда
		Данные.Вставить("СоставительДокументаДоверенность", Форма.СоставительДокументаДоверенность);
	КонецЕсли;
	
	СведенияОПринятииТоваров = Новый Структура;
	СведенияОПринятииТоваров.Вставить("КодИтога", Форма.КодИтога);
	СведенияОПринятииТоваров.Вставить("ДатаПолученияТоваров", Форма.ДатаПолученияТоваров);
	СведенияОПринятииТоваров.Вставить("СодержаниеОперации", Форма.СодержаниеОперации);

	Если Форма.ЕстьДокументОРасхождениях Тогда
		ДокументОРасхождениях = Новый Структура("НаименованиеДокумента, НомерДокумента, ДатаДокумента");
		ДокументОРасхождениях.НаименованиеДокумента = Форма.ДокументОРасхожденияхНаименование;
		ДокументОРасхождениях.ДатаДокумента = Форма.ДокументОРасхожденияхДата;
		ДокументОРасхождениях.НомерДокумента = Форма.ДокументОРасхожденияхНомер;
		СведенияОПринятииТоваров.Вставить("ДокументОРасхождениях", ДокументОРасхождениях);
	КонецЕсли;
	
	Данные.Вставить("СодержаниеФХЖ", Новый Структура("СведенияОПринятииТоваров", СведенияОПринятииТоваров));
	
	Если Форма.ЗакупкаДляГосударственныхНужд Тогда
		ЗакупкаДляГосударственныхНужд = Новый Структура;
		
		ЗакупкаДляГосударственныхНужд.Вставить("КодЗакупки",
			Форма.КодЗакупки);
		ЗакупкаДляГосударственныхНужд.Вставить("НомерЛицевогоСчетаПокупателя",
			Форма.НомерЛицевогоСчетаПокупателя);
		ЗакупкаДляГосударственныхНужд.Вставить("НаименованиеФинансовогоОрганаПокупателя",
			Форма.НаименованиеФинансовогоОрганаПокупателя);
		ЗакупкаДляГосударственныхНужд.Вставить("НомерРеестровойЗаписиПокупателя",
			Форма.НомерРеестровойЗаписиПокупателя);
		ЗакупкаДляГосударственныхНужд.Вставить("НомерБюджетногоОбязательстваПокупателя",
			Форма.НомерБюджетногоОбязательстваПокупателя);
		ЗакупкаДляГосударственныхНужд.Вставить("КазначействоПокупателяКод",
			Форма.КазначействоПокупателяКод);
		ЗакупкаДляГосударственныхНужд.Вставить("КазначействоПокупателяНаименование",
			Форма.КазначействоПокупателяНаименование);
		ЗакупкаДляГосударственныхНужд.Вставить("ОКТМОМестаПоставки",
			Форма.ОКТМОМестаПоставки);
		ЗакупкаДляГосударственныхНужд.Вставить("НомерДенежногоОбязательства",
			Форма.НомерДенежногоОбязательства);
		ЗакупкаДляГосударственныхНужд.Вставить("ПредельнаяДатаОплаты",
			Форма.ПредельнаяДатаОплаты);
		ЗакупкаДляГосударственныхНужд.Вставить("ОКТМОПокупателя",
			Форма.ОКТМОПокупателя);
		
		ДенежныеОбязательства = Новый Массив; // Массив Из Структура
		СтруктураСтроки = Новый ФиксированнаяСтруктура("ВидСредств, КодБюджетнойКлассификации, КодОбъектаФАИП, КодЦели,
			|НомерСтрокиИнформацииПродавца, СуммаАванса");
		Для Каждого СтрокаТаблицы Из Форма.ДенежныеОбязательства Цикл
			ДанныеСтроки = Новый Структура(СтруктураСтроки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			ДенежныеОбязательства.Добавить(ДанныеСтроки);
		КонецЦикла;
		
		ЗакупкаДляГосударственныхНужд.Вставить("ДенежныеОбязательства", ДенежныеОбязательства);
		Данные.Вставить("ЗакупкаДляГосударственныхНужд", ЗакупкаДляГосударственныхНужд);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ОснованиеСоставителяНаименование)
		И ЗначениеЗаполнено(Форма.ОснованиеСоставителяНомер)
		И ЗначениеЗаполнено(Форма.ОснованиеСоставителяДата) Тогда
		
		ОснованиеСостовителяФайла = Новый Структура("НаименованиеДокумента, НомерДокумента, ДатаДокумента");
		ОснованиеСостовителяФайла.НаименованиеДокумента = Форма.ОснованиеСоставителяНаименование;
		ОснованиеСостовителяФайла.НомерДокумента = Форма.ОснованиеСоставителяНомер;
		ОснованиеСостовителяФайла.ДатаДокумента = Форма.ОснованиеСоставителяДата;
		
		Данные.Вставить("ОснованиеСостовителяФайла", ОснованиеСостовителяФайла);
	КонецЕсли;	
		
	Возврат Данные;
	
КонецФункции

// Служебный метод. Для получения данных см. ДанныеРучногоФормированияТитула
// 
// Параметры:
//  Форма - См. Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула
// 
// Возвращаемое значение:
//  Структура:
// * СоставительДокументаНаименование - Строка
// * СоставительДокументаДоверенность - Строка
// * ДатаСогласования - Дата
// * СодержаниеОперации - Строка
Функция ДанныеРучногоФормированияОтветногоТитулаУКД_2020(Форма)
	Данные = Новый Структура;
	Данные.Вставить("СоставительДокументаНаименование", Форма.СоставительДокументаНаименование);
	Если Форма.СоставительДокумента <> Форма.Покупатель Тогда
		Данные.Вставить("СоставительДокументаДоверенность", Форма.СоставительДокументаДоверенность);
	КонецЕсли;
	Данные.Вставить("ДатаСогласования", Форма.ДатаСогласования);
	Данные.Вставить("СодержаниеОперации", Форма.СодержаниеОперации_УКД);
	Возврат Данные;
КонецФункции

// Служебный метод. Для получения данных см. ДанныеРучногоФормированияТитула
// 
// Параметры:
//  Форма - См. Обработка.ИнтерфейсДокументовЭДО.Форма.РучноеФормированиеОтветногоТитула
// 
// Возвращаемое значение:
//  Структура:
// * СодержаниеДополнительныхСведений - Строка
// * СоставительДокументаНаименование - Строка
// * СоставительДокументаДоверенность - Строка
//
Функция ДанныеРучногоФормированияДополнительныхСведений(Форма)
	Данные = Новый Структура;
	Данные.Вставить("СодержаниеДополнительныхСведений", Форма.СодержаниеДополнительныхСведений);
	Данные.Вставить("СоставительДокументаНаименование", Форма.СоставительДокументаНаименование);
	Данные.Вставить("ФормированиеДополнительныхСведений", Форма.ФормированиеДополнительныхСведений);
	Если Форма.СоставительДокумента <> Форма.Покупатель Тогда
		Данные.Вставить("СоставительДокументаДоверенность", Форма.СоставительДокументаДоверенность);
	КонецЕсли;
	Возврат Данные;
КонецФункции

#КонецОбласти

#КонецОбласти