#Область ПрограммныйИнтерфейс

#Область Локализация

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в САТУРН.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНавигационнаяСсылкаСАТУРН(НавигационнаяСсылкаФорматированнойСтроки) Тогда
	
		Объект = Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН").ИмяРеквизитаФормыОбъект];
		ИнтеграцияСАТУРНКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
			Форма,
			Объект,
			Неопределено,
			НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоОповещениеСАТУРН(ИмяСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	МестоВызова = Новый Структура;
	МестоВызова.Вставить("Форма",  Форма);
	МестоВызова.Вставить("Объект", Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН").ИмяРеквизитаФормыОбъект]);
	
	Событие = Новый Структура;
	Событие.Вставить("Имя",        ИмяСобытия);
	Событие.Вставить("Параметр",   Параметр);
	Событие.Вставить("Источник",   Источник);
	Событие.Вставить("Обработано", Ложь);
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие);
	
	Если Событие.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Новый Структура;
	Подсистема.Вставить("Имя",ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы());
	Подсистема.Вставить("МодульВызовСервера",ИнтеграцияСАТУРНВызовСервера);
	
	СобытияФормИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие, Подсистема);
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПослеЗаписи(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Вызывается при наступлении события "Выбор" в табличной части.
// Открывает форму выбранного элемента, если имя реквизита входит в массив имен.
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма объекта,
// ТаблицаФормы - ТаблицаФормы - таблица в которой произошло событие,
// ВыбранноеПоле - ПолеФормы
Процедура ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(Форма, ТаблицаФормы, ВыбранноеПоле) Экспорт
	
	МассивИмен = МассивИменРеквизитовФормыОткрытия();
	
	ИмяТабличнойЧасти = ТаблицаФормы.Имя;
	
	Для Каждого ИмяЭлемента Из МассивИмен Цикл
		
		Если Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Элементы[ИмяТабличнойЧасти + ИмяЭлемента] = ВыбранноеПоле
			И ЗначениеЗаполнено(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]) Тогда
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]);
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОКПД2

// Вызывается при изменении на форме ОКПД2
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта
//  Элемент - ПолеФормы - элемент формы, содержащий ОКПД2
Процедура ПриИзмененииОКПД2(Форма, Элемент) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииОКПД2(Форма, Элемент);
	
КонецПроцедуры

// Вызывается при начале выбора на форме ОКПД2
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта
//  Элемент - ПолеФормы - элемент формы, содержащий ОКПД2
//  ДанныеВыбора - СписокЗначений - Данные выбора
//  ТекущееЗначение - Строка - текущее значение ОКПД2
//  СтандартнаяОбработка - Булево - флаг стандартной обработки
Процедура ПриНачалеВыбораОКПД2(Форма, Элемент, ДанныеВыбора, ТекущееЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеВыбораОКПД2(Форма, Элемент, ДанныеВыбора, ТекущееЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при обработке выбора на форме ОКПД2
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта
//  Элемент - ПолеФормы - элемент формы, содержащий ОКПД2
//  ВыбранноеЗначение - Произвольный - Выбранное значение
//  СтандартнаяОбработка - Булево - флаг стандартной обработки
Процедура ПриОбработкеВыбораОКПД2(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриОбработкеВыбораОКПД2(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при вводе текста и автоподборе на форме ОКПД2
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта
//  Элемент - ПолеФормы - элемент формы, содержащий ОКПД2
//  Текст - Строка - текст автоподбора
//  ДанныеВыбора - СписокЗначений - Данные выбора
//  ПараметрыПолученияДанных - Структура - Параметры получения данных
//  Ожидание - Булево - флаг ожидания
//  СтандартнаяОбработка - Булево - флаг стандартной обработки
Процедура ПриАвтоподбореОКПД2(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		СобытияФормСАТУРНКлиентПереопределяемый.ПриАвтоподбореОКПД2(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияПриВыбореПартииИзФормыВыбора

Процедура ВыполнитьДействиеРазбитьСтроку(ТабличнаяЧасть, ИсходнаяСтрока, ВыделяемоеКоличествоУпаковок) Экспорт
	
	НоваяСтрока = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Индекс(ИсходнаяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
	Если ИсходнаяСтрока.КоличествоУпаковок <> 0 Тогда
		НоваяСтрока.КоличествоУпаковок = ВыделяемоеКоличествоУпаковок;
		НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * ИсходнаяСтрока.Количество / ИсходнаяСтрока.КоличествоУпаковок;
		ИсходнаяСтрока.КоличествоУпаковок = ИсходнаяСтрока.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
		ИсходнаяСтрока.Количество         = ИсходнаяСтрока.Количество         - НоваяСтрока.Количество;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходнаяСтрока, "КоличествоСАТУРН") Тогда
			НоваяСтрока.КоличествоСАТУРН = НоваяСтрока.КоличествоУпаковок;
			ИсходнаяСтрока.КоличествоСАТУРН = ИсходнаяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		ЗаполнитьКоличествоПринятоВозвращеноПриПодбореПартии(ИсходнаяСтрока);
		ЗаполнитьКоличествоПринятоВозвращеноПриПодбореПартии(НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборПартииСНедостаткомКоличества(ТабличнаяЧасть, ВыбранноеЗначение, ТекущиеДанные, ДействиеВыбораПартии) Экспорт
	
	Знак = ?(ТекущиеДанные.Количество > 0, 1, -1);
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Остаток по партии (%1) меньше, чем указано в строке табличной части (%2)'"),
		ВыбранноеЗначение.КоличествоСАТУРН, Знак*ТекущиеДанные.Количество);
	ВариантыЗаполнения = Новый СписокЗначений;
	ВариантыЗаполнения.Добавить("РазбитьСтроку", НСтр("ru = 'Разбить строку'"));
	ВариантыЗаполнения.Добавить("ИзменитьСтроку", НСтр("ru = 'Изменить количество'"));
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Пропустить);
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ДействиеВыбораПартии", ДействиеВыбораПартии);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВыборПартииСНедостаткомКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		ВариантыЗаполнения,,
		"РазбитьСтроку");
		
КонецПроцедуры

Процедура ОбработатьВыборПартииСНедостаткомКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть         = ДополнительныеПараметры.ТабличнаяЧасть;
	ВыбранноеЗначение      = ДополнительныеПараметры.ВыбранноеЗначение;
	ТекущиеДанные          = ДополнительныеПараметры.ТекущиеДанные;
	ОбработчикВыбораПартии = ДополнительныеПараметры.ДействиеВыбораПартии;
	Знак = ?(ТекущиеДанные.Количество > 0, 1, -1);
	
	Если Результат = КодВозвратаДиалога.Пропустить Тогда
		ВыполнитьОбработкуОповещения(ОбработчикВыбораПартии, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	Коэффициент = ТекущиеДанные.КоличествоУпаковок / ТекущиеДанные.Количество;
	
	Если Результат = "РазбитьСтроку" Тогда
		ВыполнитьДействиеРазбитьСтроку(
			ТабличнаяЧасть, ТекущиеДанные, (ТекущиеДанные.Количество - Знак*ВыбранноеЗначение.КоличествоСАТУРН)*Коэффициент);
		ВыполнитьОбработкуОповещения(ОбработчикВыбораПартии, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	Если Результат = "ИзменитьСтроку" Тогда
		ТекущиеДанные.Количество = Знак * ВыбранноеЗначение.КоличествоСАТУРН;
		ТекущиеДанные.КоличествоУпаковок = Знак * ВыбранноеЗначение.КоличествоСАТУРН * Коэффициент;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "КоличествоСАТУРН") Тогда
			ТекущиеДанные.КоличествоСАТУРН = ТекущиеДанные.КоличествоУпаковок;
		КонецЕсли;
		ЗаполнитьКоличествоПринятоВозвращеноПриПодбореПартии(ТекущиеДанные);
		ВыполнитьОбработкуОповещения(ОбработчикВыбораПартии, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборПартии(ВыбранноеЗначение, ТекущиеДанные) Экспорт
	
	ТекущиеДанные.Партия = ВыбранноеЗначение.Партия;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПАТ) Тогда
		ТекущиеДанные.ПАТ = ВыбранноеЗначение.ПАТ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ТипИзмеряемойВеличины)
		И ВыбранноеЗначение.ТипИзмеряемойВеличины <> ТекущиеДанные.ТипИзмеряемойВеличиныСАТУРН Тогда
		ТекущиеДанные.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
		ТекущиеДанные.КоличествоВУпаковкеСАТУРН = ВыбранноеЗначение.КоличествоВУпаковкеСАТУРН;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает нажатие на гиперссылку объектов САТУР
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылкиСАТУРН(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьМестаХраненияОрганизации") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НавигационнаяСсылкаМассив = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "_");
		ПрефиксРеквизита = ?(НавигационнаяСсылкаМассив.ВГраница() > 0, НавигационнаяСсылкаМассив[1], "");
		
		ОрганизацияСАТУРН = Форма.Объект[ПрефиксРеквизита + "ОрганизацияСАТУРН"];
		МестоХранения     = Форма.Объект[ПрефиксРеквизита + "МестоХранения"];
		
		ПараметрыФормыОрганизации = Новый Структура(
			"Ключ, ДополнительныеПараметры", 
			ОрганизацияСАТУРН, 
			Новый Структура);
			
		ПараметрыФормыОрганизации.ДополнительныеПараметры.Вставить(
			"ИмяЭлементаПозиционирования", 
			"СтраницаМестаХранения");
		ПараметрыФормыОрганизации.ДополнительныеПараметры.Вставить(
			"ЗначениеЭлементаПозиционирования", 
			МестоХранения);
			
		ОткрытьФорму(
			"Справочник.КлассификаторОрганизацийСАТУРН.ФормаОбъекта",
			ПараметрыФормыОрганизации,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСобытияИзмененаНастройкаАвтоматическогоОбмена() Экспорт
	Возврат "Запись_НастройкиРегламентныхЗаданийСАТУРН";
КонецФункции

Функция МассивИменРеквизитовФормыОткрытия()
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("Характеристика");
	Массив.Добавить("Серия");
	Массив.Добавить("Партия");
	Массив.Добавить("ИмпортируемаяПартия");
	Массив.Добавить("ВыделеннаяПартия");
	Массив.Добавить("ПартияВозврат");
	Массив.Добавить("ПАТ");
	
	Возврат Массив;
	
КонецФункции

Функция ЭтоНавигационнаяСсылкаСАТУРН(НавигационнаяСсылка)
	
	Возврат СтрНайти(НавигационнаяСсылка, "ИнтеграцияИС_КомандаНавигационнойСсылки#САТУРН#") > 0;
	
КонецФункции

Функция ЭтоОповещениеСАТУРН(ИмяСобытия)
	
	Возврат СтрНайти(ИмяСобытия, "ИнтеграцияИС_СобытиеОповещения#САТУРН#") > 0;
	
КонецФункции

Процедура ЗаполнитьКоличествоПринятоВозвращеноПриПодбореПартии(ТекущиеДанные)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "КоличествоУпаковокПринято") Тогда
		
		ТекущиеДанные.КоличествоУпаковокПринято = ТекущиеДанные.КоличествоУпаковок;
		ТекущиеДанные.КоличествоПринятоСАТУРН   = ТекущиеДанные.КоличествоУпаковок;
		ТекущиеДанные.КоличествоПринято         = ТекущиеДанные.Количество;
		ТекущиеДанные.КоличествоУпаковокВозвращено = 0;
		ТекущиеДанные.КоличествоВозвращеноСАТУРН   = 0;
		ТекущиеДанные.КоличествоВозвращено = 0;
		ТекущиеДанные.ПричинаРасхождения = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
