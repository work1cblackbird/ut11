
#Область СлужебныеПроцедурыИФункции

Функция ДанныеКонтактнойИнформацииПоПредставлению(Знач Представление, Знач ОжидаемыйТипВид) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Значение", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ОжидаемыйТипВид));
	Данные.Вставить("ПараметрыВида", УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ОжидаемыйТипВид));
	
	Возврат Данные;
	
КонецФункции

// Параметры:
//  АдресДанныхСертификата - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - См.ЭлектроннаяПодпись.СвойстваСертификата 
Функция СвойстваСертификата(АдресДанныхСертификата) Экспорт

	Если Не ЭтоАдресВременногоХранилища(АдресДанныхСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	Если ТипЗнч(ДанныеСертификата) <> Тип("ДвоичныеДанные") Или Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
	СтруктураСертификата = ЭлектроннаяПодпись.СвойстваСертификата(Сертификат);
	Возврат СтруктураСертификата;

КонецФункции

// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы 
//  ПорядковыйНомерПодписи - Число
//  ИдентификаторФормы - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Структура:
//  * АдресДанныхСертификата - Строка
//  * СвойстваСертификата - Неопределено
//                        - См. ЭлектроннаяПодпись.СвойстваСертификата
Функция СвойстваСертификатаПодписиПодписанногоОбъекта(ПодписанныйОбъект, ПорядковыйНомерПодписи,
	ИдентификаторФормы) Экспорт

	Результат = Новый Структура("АдресДанныхСертификата, СвойстваСертификата", "", Неопределено);

	ПодписиОбъекта = ЭлектроннаяПодпись.УстановленныеПодписи(ПодписанныйОбъект, ПорядковыйНомерПодписи);
	Если ПодписиОбъекта.Количество() Тогда
		ДанныеСертификата = ПодписиОбъекта[0].Сертификат.Получить();
		Результат.АдресДанныхСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата, ИдентификаторФормы);
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
		Результат.СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(Сертификат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЕстьДоступКХранилищуФайлов(ТекстПредупреждения) Экспорт
	
	ИмяСправочникаХранилищаФайлов = "Файлы";
	
	Если Метаданные.Справочники.Найти(ИмяСправочникаХранилищаФайлов) <> Неопределено Тогда
		
		ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
		МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);	
		ДобавлениеИзменениеПапокИФайлов = ПравоДоступа("Чтение", МетаданныеСправочникаСФайлами);
		
		Если НЕ ДобавлениеИзменениеПапокИФайлов Тогда
			ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для работы с хранилищем файлов'");
			Возврат Ложь;
		КонецЕсли;
		
		Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() 
			И Не УправлениеДоступом.ЧтениеРазрешено(Справочники.ПапкиФайлов.Шаблоны) Тогда
			ТекстПредупреждения = НСтр("ru = 'Недостаточно прав доступа к папкам файлов. Необходимо настроить права доступа.'");
			Возврат Ложь;	
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти