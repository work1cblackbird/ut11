#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеИнформацииПоДействующемуДокументуСогласияОПредоставленииИнформации

Функция ОбновитьИнформацииПоДействующемуДокументуСогласияОПредоставленииИнформации(ПараметрыВыполнения) Экспорт
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Получение информации по действующему документу ""Согласие о предоставлении информации""'");
	ИмяМетода = "СогласиеОПредоставленииИнформацииГИСМТ.ОбновитьИнформациюПоДействующемуДокументуСогласияОПредоставленииИнформацииИзФоновогоЗадания";
	
	Если ПараметрыВыполнения.Свойство("ВыполнитьВФоне") И ПараметрыВыполнения.ВыполнитьВФоне Тогда
		
		Результат = ВыполнитьМетодВФоне(ПараметрыВыполнения, НаименованиеФоновогоЗадания, ИмяМетода);
		
	ИначеЕсли ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Или ОбщегоНазначения.РежимОтладки() Тогда
		
		Результат = ОбновитьИнформациюПоДействующемуДокументуСогласияОПредоставленииИнформации(ПараметрыВыполнения);
		
	Иначе
		
		Результат = ВыполнитьМетодВФоне(ПараметрыВыполнения, НаименованиеФоновогоЗадания, ИмяМетода);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьИнформациюПоДействующемуДокументуСогласияОПредоставленииИнформацииИзФоновогоЗадания(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыВыполнения = ПараметрыФоновогоЗадания.ПараметрыВыполнения;
	ПараметрыСеансаИС   = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииИСМП <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = ПараметрыСеансаИС.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбновитьИнформациюПоДействующемуДокументуСогласияОПредоставленииИнформации(ПараметрыВыполнения);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Функция ОбновитьИнформациюПоДействующемуДокументуСогласияОПредоставленииИнформации(ПараметрыВыполнения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("Организация",                    Неопределено);
	Результат.Вставить("АдресВоВременномХранилище",      Неопределено);
	Результат.Вставить("ДлительнаяОперация",             Неопределено);
	Результат.Вставить("Ожидать",                        Неопределено);
	Результат.Вставить("Результат",                      Неопределено);
	
	РезультатПоДействующемуСогласию = ОбновитьТекущееСостояниеСогласияОПредоставленииИнформацииГИСМТ(ПараметрыВыполнения.Организация,, Истина);
	
	Результат.Организация                    = ПараметрыВыполнения.Организация;
	Результат.Результат                      = РезультатПоДействующемуСогласию;
	Результат.ТребуетсяОбновлениеКлючаСессии = РезультатПоДействующемуСогласию.ТребуетсяОбновлениеКлючаСессии;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ЗапроситьСтатусРегистрацииСпискаУчастников(Организация, СписокИНН) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПоИНН",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если СписокИНН.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод ЗапроситьСтатусРегистрацииУчастника список ИНН пуст.'");
	КонецЕсли;
	
	КоличествоЭлементовВЗапросе = 1000;
	
	Пакеты = Новый Массив;
	Пакет  = Неопределено;
	
	Для Каждого ИНН Из СписокИНН Цикл
		
		Если Пакет = Неопределено Или Пакет.Количество() >= КоличествоЭлементовВЗапросе Тогда
			Пакет = Новый Массив;
			Пакеты.Добавить(Пакет);
		КонецЕсли;
		
		Пакет.Добавить(ИНН);
		
	КонецЦикла;
	
	ДанныеПоИНН = Неопределено;
	
	Для Каждого Пакет Из Пакеты Цикл
		
		Результат = ЗапроситьСтатусРегистрацииУчастников(Организация, Пакет);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат ВозвращаемоеЗначение;
		ИначеЕсли Результат.ОшибкаСервиса Или ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.ОшибкаСервиса            = Результат.ОшибкаСервиса;
			ВозвращаемоеЗначение.ТекстОшибки              = Результат.ТекстОшибки;
			ВозвращаемоеЗначение.РезультатОтправкиЗапроса = Результат.РезультатОтправкиЗапроса;
			Возврат ВозвращаемоеЗначение;
		ИначеЕсли Результат.ДанныеПоИНН = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: данные по ИНН отсутствуют.'");
		КонецЕсли;
		
		Если ДанныеПоИНН = Неопределено Тогда
			
			ДанныеПоИНН = Результат.ДанныеПоИНН;
			
		Иначе
			
			Для Каждого Строка Из Результат.ДанныеПоИНН Цикл
				ДанныеПоИНН.Вставить(Строка.Ключ, Строка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.ДанныеПоИНН = ДанныеПоИНН;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодписатьДокументСогласияИлиДокументАнулированияОПредоставленииИнформации(Организация, Операция, Подпись, ПараметрыЗапросаИсходящегоСообщения) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание Тогда
		ТипДокумента = "AGREEMENT";
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
		ТипДокумента = "AGREEMENT_CANCELLATION";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Вид операции %1 указан не верно'"), Операция);
	КонецЕсли;
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("documentId",   ПараметрыЗапросаИсходящегоСообщения.ИдентификаторСогласия);
	ТелоЗапроса.Вставить("signature",    ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
	ТелоЗапроса.Вставить("documentType", ТипДокумента);
	
	URLЗапроса = "api/v3/true-api/agreement-registry/publish";
	РезультатЗапроса = ОбщегоНазначенияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапроса,
		КлючСессии,
		"POST",
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	СтатусДокумента = Неопределено;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки     = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ДанныеОбработки.documentId;
				
				СтатусДокумента = ДанныеОбработки.status;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			ВозвращаемоеЗначение.ТекстОшибки     = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Если СтатусДокумента <> Неопределено Тогда
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультатПодписанияСогласия(Организация, Операция, ИдентификаторСоглашения) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии());
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДокументов",               Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("Статус",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапросаСписокДокументов = СписокДокументовСогласия(Организация);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатЗапросаСписокДокументов.РезультатОтправкиЗапроса;
	
	Если РезультатЗапросаСписокДокументов.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСписокДокументов.ТекстОшибки;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли РезультатЗапросаСписокДокументов.ДанныеДокументов = Неопределено Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСписокДокументов.ТекстОшибки;
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеДокументов = РезультатЗапросаСписокДокументов.ДанныеДокументов;
	
	СтатусыСогласия = СтатусыСогласия();
	
	ДанныеДокумента = Неопределено;
	Если Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
		
		Для Каждого СтрокаДанных Из РезультатЗапросаСписокДокументов.ДанныеДокументов Цикл
			Если СтрокаДанных.Свойство("cancellation")
				И СтрокаДанных.cancellation.id = ИдентификаторСоглашения Тогда
				ДанныеДокумента = СтрокаДанных;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеДокумента = Неопределено Тогда
			Статус          = Перечисления.СтатусыДокументовИСМП.Ошибка;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли ДанныеДокумента.cancellation.statusCode = СтатусыСогласия.Подписано Тогда
			Статус          = Перечисления.СтатусыДокументовИСМП.Принят;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		Иначе
			Статус          = Перечисления.СтатусыДокументовИСМП.Ошибка;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаДанных Из РезультатЗапросаСписокДокументов.ДанныеДокументов Цикл
			Если СтрокаДанных.agreementRevisionId = ИдентификаторСоглашения Тогда
				ДанныеДокумента = СтрокаДанных;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеДокумента = Неопределено Тогда
			Статус          = Перечисления.СтатусыДокументовИСМП.Ошибка;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ИначеЕсли ДанныеДокумента.status = СтатусыСогласия.Подписано Тогда
			Статус          = Перечисления.СтатусыДокументовИСМП.Принят;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		Иначе
			Статус          = Перечисления.СтатусыДокументовИСМП.Ошибка;
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.Статус          = Статус;
	ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодготовитьСообщенияПоАбстрактнойОперацииСогласиеОПредоставлениеИнформации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("СообщенияJSON",                  Новый Массив);
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
		ОсновнойЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Найти(ЭлементОчереди.СообщениеОснование, "Сообщение");
	Иначе
		ОсновнойЭлементОчереди = ЭлементОчереди;
	КонецЕсли;
	
	Организация = ОсновнойЭлементОчереди.Организация;
	ХешСумма    = ОсновнойЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ХешСумма;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СогласиеОПредоставленииИнформацииГИСМТ.Организация          КАК Организация,
		|	СогласиеОПредоставленииИнформацииГИСМТ.РазрешеноВсем        КАК РазрешеноВсем,
		|	СогласиеОПредоставленииИнформацииГИСМТ.ДействителенДо       КАК ДействителенДо,
		|	СогласиеОПредоставленииИнформацииГИСМТ.ДатаПодписания       КАК ДатаПодписания,
		|	СогласиеОПредоставленииИнформацииГИСМТ.ДоверенныеИНН        КАК ДоверенныеИНН,
		|	СогласиеОПредоставленииИнформацииГИСМТ.РегистрационныйНомер КАК РегистрационныйНомер,
		|	СогласиеОПредоставленииИнформацииГИСМТ.Идентификатор        КАК Идентификатор,
		|	СогласиеОПредоставленииИнформацииГИСМТ.ХешСумма             КАК ХешСумма,
		|	СогласиеОПредоставленииИнформацииГИСМТ.ИсторияИзменений     КАК ИсторияИзменений,
		|	СогласиеОПредоставленииИнформацииГИСМТ.Статус               КАК Статус
		|ИЗ
		|	РегистрСведений.СогласиеОПредоставленииИнформацииГИСМТ КАК СогласиеОПредоставленииИнформацииГИСМТ
		|ГДЕ
		|	СогласиеОПредоставленииИнформацииГИСМТ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.Ошибка;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'По организации %1 данных для создания документа согласия не найдено'"), Организация);
		
		ПротоколОбменаXML = Неопределено;
		ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
		Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
		КонецЕсли;
		ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ИсторияИзменений = ВыборкаДетальныеЗаписи.ИсторияИзменений.Получить();
	Если ИсторияИзменений = Неопределено Или Не ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма) Тогда
		
		Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.Ошибка;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'По организации %1 внесение изменений в документ согласия не предполагается'"), Организация);
		
		ПротоколОбменаXML = Неопределено;
		ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
		Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
		КонецЕсли;
		ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатЗапросаСписокДокументов = СписокДокументовСогласия(Организация);
	
	Если РезультатЗапросаСписокДокументов.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатЗапросаСписокДокументов.ДанныеДокументов = Неопределено Тогда
		
		Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.Ошибка;
		ТекстОшибки = РезультатЗапросаСписокДокументов.ТекстОшибки;
		
		ПротоколОбменаXML = Неопределено;
		ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
		Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
		КонецЕсли;
		ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатЗапросаПоДействующемуСогласию = ИнформацияПоДействующемуСогласию(
		Организация, РезультатЗапросаСписокДокументов);
	
	Если РезультатЗапросаПоДействующемуСогласию.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента = Неопределено Тогда
		
		Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.Ошибка;
		ТекстОшибки = РезультатЗапросаПоДействующемуСогласию.ТекстОшибки;
		
		ПротоколОбменаXML = Неопределено;
		ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
		Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
		КонецЕсли;
		ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ТребуетсяПроверитьСписокИНН = Не ИсторияИзменений.КИзменению.РазрешеноВсем;
	
	Если РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ИдентификаторСогласия <> Неопределено Тогда
		
		ДанныеДокументаИзСервиса = Новый Структура;
		ДанныеДокументаИзСервиса.Вставить("РазрешеноВсем",  РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДляВсехКонтрагентов);
		ДанныеДокументаИзСервиса.Вставить("ДействителенДо", РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДатаОкончанияСрока);
		ДанныеДокументаИзСервиса.Вставить("ДоверенныеИНН",  РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДоверенныеИНН);
		
		ХешСуммуДокументаВСервисе = ХешСуммуДокумента(ДанныеДокументаИзСервиса);
		
		Если ХешСуммуДокументаВСервисе = ХешСумма Тогда
			
			ОбновитьТекущееСостояниеСогласияОПредоставленииИнформацииГИСМТ(Организация, РезультатЗапросаПоДействующемуСогласию);
			
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СогласиеПодписано;
			
			ПротоколОбменаXML = Неопределено;
			ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
			Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
				ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
			КонецЕсли;
			ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML);
			
			Возврат Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма) И ХешСуммуДокументаВСервисе <> ИсторияИзменений.Текущий.ХешСумма Тогда
			
			ОбновитьТекущееСостояниеСогласияОПредоставленииИнформацииГИСМТ(Организация, РезультатЗапросаПоДействующемуСогласию);
			
			Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.СогласиеПодписано;
			ТекстОшибки = НСтр("ru = 'Документ согласия измерен вне информационной базы'");
			
			ПротоколОбменаXML = Неопределено;
			ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
			Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
				ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
			КонецЕсли;
			ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
			
			Возврат Результат;
			
		КонецЕсли;
		
		Если ТребуетсяПроверитьСписокИНН Тогда
			
			ТребуетсяПроверитьСписокИНН = Ложь;
			
			РезультатСтатусыУОТ = ЗапроситьСтатусРегистрацииСпискаУчастников(Организация, ИсторияИзменений.КИзменению.ДоверенныеИНН);
			
			Если РезультатСтатусыУОТ.ТребуетсяОбновлениеКлючаСессии Тогда
				Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
				Возврат Результат;
			ИначеЕсли РезультатСтатусыУОТ.ОшибкаСервиса Или ЗначениеЗаполнено(РезультатСтатусыУОТ.ТекстОшибки) Тогда
				
				Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПроверкаРегистрацииКонтрагентовОшибка;
				ТекстОшибки = НСтр("ru = 'Ошибка проверки регистрации контрагента.'");
				Если ЗначениеЗаполнено(РезультатСтатусыУОТ.ТекстОшибки) Тогда
					ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатСтатусыУОТ.ТекстОшибки;
				КонецЕсли;
				
				ПротоколОбменаXML = Неопределено;
				ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
				Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
					ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
				КонецЕсли;
				ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
				
				Возврат Результат;
				
			ИначеЕсли РезультатСтатусыУОТ.ДанныеПоИНН = Неопределено Тогда
				
				Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПроверкаРегистрацииКонтрагентовОшибка;
				ТекстОшибки = НСтр("ru = 'Ошибка проверки регистрации контрагента: данные по ИНН отсутствуют.'");
				
				ПротоколОбменаXML = Неопределено;
				ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
				Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
					ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
				КонецЕсли;
				ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
				
				Возврат Результат;
				
			КонецЕсли;
			
			СписокИННКорректен = Истина;
			СтрокиСообщений    = Новый Массив;
			СтрокиСообщений.Добавить(НСтр("ru = 'Ошибка проверки регистрации контрагентов:'"));
			
			Для Каждого ИНН Из ИсторияИзменений.КИзменению.ДоверенныеИНН Цикл
				
				СостояниеИНН = РезультатСтатусыУОТ.ДанныеПоИНН[ИНН];
				Если СостояниеИНН = Неопределено Тогда
					
					СписокИННКорректен = Ложь;
					
					СтрокиСообщений.Добавить(
							СтрШаблон(
								НСтр("ru = 'ИНН %1, контрагент незарегистрирован'"),
								ИНН));
					
				ИначеЕсли СостояниеИНН.Зарегистрирован Тогда
					
					СтатусРегистрацииУчастника = ВРег(СостояниеИНН.Статус);
					
					Если    СтатусРегистрацииУчастника = "REGISTERED"
						Или СтатусРегистрацииУчастника = "ЗАРЕГИСТРИРОВАН"
						Или СтатусРегистрацииУчастника = "RESTORED"
						Или СтатусРегистрацииУчастника = "ВОССТАНОВЛЕН" Тогда
					Иначе
						
						СписокИННКорректен = Ложь;
						
						СтрокиСообщений.Добавить(
							СтрШаблон(
								НСтр("ru = 'ИНН %1, статус регистрации контрагента не корректный: %2'"),
								ИНН,
								СостояниеИНН.Статус));
						
					КонецЕсли;
					
				Иначе
					
					СписокИННКорректен = Ложь;
					
					Если ЗначениеЗаполнено(СостояниеИНН.ТекстОшибки) Тогда
						ТекстОшибки = СостояниеИНН.ТекстОшибки;
					ИначеЕсли ЗначениеЗаполнено(СостояниеИНН.Статус) Тогда
						ТекстОшибки = СостояниеИНН.Статус;
					Иначе
						ТекстОшибки = НСтр("ru = 'состояние регистрации определить не удалось'");
					КонецЕсли;
					
					СтрокиСообщений.Добавить(
							СтрШаблон(
								НСтр("ru = 'ИНН %1, %2'"),
								ИНН,
								ТекстОшибки));
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не СписокИННКорректен Тогда
				
				Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПроверкаРегистрацииКонтрагентовОшибка;
				ТекстОшибки = СтрСоединить(СтрокиСообщений, Символы.ПС + Символы.НПП);
				
				ПротоколОбменаXML = Неопределено;
				ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
				Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
					ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
				КонецЕсли;
				ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
				
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИдентификаторАннулированияСогласия = РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ИдентификаторАннулированияСогласия;
		
		Если ИдентификаторАннулированияСогласия = Неопределено Тогда
			
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеАннулированияСогласияКПередаче;
			
			ПротоколОбменаXML = Неопределено;
			ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
			Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
				ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
			КонецЕсли;
			ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML);
			
			РезультатЗапросаАннулированияСогласия = АннулированиеСогласия(Организация);
			
			Если РезультатЗапросаАннулированияСогласия.ТребуетсяОбновлениеКлючаСессии Тогда
				Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
				Возврат Результат;
			КонецЕсли;
			
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеАннулированияСогласияОбрабатывается;
			
			Если РезультатЗапросаАннулированияСогласия.ДанныеДокумента = Неопределено Тогда
				
				Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеАннулированияСогласияОшибкаПередачи;
				ТекстОшибки = РезультатЗапросаАннулированияСогласия.ТекстОшибки;
				
				ПротоколОбменаXML = Неопределено;
				ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
				Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
					ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
				КонецЕсли;
				ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
				
				Возврат Результат;
				
			КонецЕсли;
			
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.АннулированиеСогласияСоздано;
			
			ПротоколОбменаXML = Неопределено;
			ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
			Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
				ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
			КонецЕсли;
			ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML);
			
			ИдентификаторАннулированияСогласия = РезультатЗапросаАннулированияСогласия.ДанныеДокумента.ИдентификаторАннулированияСогласия;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИдентификаторАннулированияСогласия <> Неопределено Тогда
		
		ТипДокумента = "AGREEMENT_CANCELLATION";
		
		РезультатЗапросаПоПолучениюТелаДокументаСогласия = ПолучитьТелоДокументаСогласия(Организация, ИдентификаторАннулированияСогласия, ТипДокумента);
		Если РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТребуетсяОбновлениеКлючаСессии Тогда
			Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат Результат;
		КонецЕсли;
		
		Если РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТелоДокументаJSON = Неопределено Тогда
			
			Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПодписаниеАннулированияСогласияОшибкаПередачи;
			ТекстОшибки = РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТекстОшибки;
			
			ПротоколОбменаXML = Неопределено;
			ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
			Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
				ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
			КонецЕсли;
			ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
			
			Возврат Результат;
			
		КонецЕсли;
		
		// Подписать анулирование
		
		Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования;
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СообщениеJSON.ЗагружатьДо   = ОсновнойЭлементОчереди.Сообщение;
		СообщениеJSON.Организация   = Организация;
		
		СообщениеJSON.Описание = НСтр("ru = 'Подписание документа аннулирования согласия о предоставлении информации'");
		
		СообщениеJSON.ТекстСообщенияJSON  = РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТелоДокументаJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = Неопределено;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.СообщениеОснование  = ОсновнойЭлементОчереди.Сообщение;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура("ИдентификаторСогласия", ИдентификаторАннулированияСогласия);
		
		СообщениеJSON.Операция     = Операция;
		СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		
		Результат.СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатЗапросаОтклоненияЧерновикаСогласия = ОтклонениеЧерновикаСогласия(Организация);
	
	Если РезультатЗапросаОтклоненияЧерновикаСогласия.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ТребуетсяПроверитьСписокИНН Тогда
		
		ТребуетсяПроверитьСписокИНН = Ложь;
	КонецЕсли;
	
	Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеСогласияКПередаче;
	
	ПротоколОбменаXML = Неопределено;
	ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
	Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
		ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
	КонецЕсли;
	ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML);
	
	РезультатЗапросаПоФормированиюСогласия = ФормированиеСогласияНаПредоставлениеСведенийОКИДругимУОТ(
		Организация,
		ИсторияИзменений.КИзменению.ДействителенДо,
		ИсторияИзменений.КИзменению.РазрешеноВсем,
		ИсторияИзменений.КИзменению.ДоверенныеИНН);
	
	Если РезультатЗапросаПоФормированиюСогласия.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатЗапросаПоФормированиюСогласия.ИдентификаторЧерновикаСогласия = Неопределено Тогда
		
		Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеСогласияОшибкаПередачи;
		ТекстОшибки = РезультатЗапросаПоФормированиюСогласия.ТекстОшибки;
		
		ПротоколОбменаXML = Неопределено;
		ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
		Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
		КонецЕсли;
		ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеСогласияОбрабатывается;
	
	ПротоколОбменаXML = Неопределено;
	ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
	Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
		ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
	КонецЕсли;
	ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML);
	
	ИдентификаторЧерновикаСогласия = РезультатЗапросаПоФормированиюСогласия.ИдентификаторЧерновикаСогласия;
	ТипДокумента = "AGREEMENT";
	
	РезультатЗапросаПоПолучениюТелаДокументаСогласия = ПолучитьТелоДокументаСогласия(Организация, ИдентификаторЧерновикаСогласия, ТипДокумента);
	Если РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТелоДокументаJSON = Неопределено Тогда
		
		Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПодписаниеСогласияОшибкаПередачи;
		ТекстОшибки = РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТекстОшибки;
		
		ПротоколОбменаXML = Неопределено;
		ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
		Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
			ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
		КонецЕсли;
		ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML, ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Подписать согласие
	Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	СообщениеJSON.ЗагружатьДо   = ОсновнойЭлементОчереди.Сообщение;
	СообщениеJSON.Организация   = Организация;
	
	СообщениеJSON.Описание = НСтр("ru = 'Подписание документа согласия о предоставлении информации'");
	
	СообщениеJSON.ТекстСообщенияJSON  = РезультатЗапросаПоПолучениюТелаДокументаСогласия.ТелоДокументаJSON;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.СообщениеОснование  = ОсновнойЭлементОчереди.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = Новый Структура("ИдентификаторСогласия", ИдентификаторЧерновикаСогласия);
	
	СообщениеJSON.Операция     = Операция;
	СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	Результат.СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат Результат;
	
КонецФункции

Функция ХешСуммуДокумента(ДанныеДокумента) Экспорт
	
	РазрешеноВсем = Булево(ДанныеДокумента.РазрешеноВсем);
	
	СтрокиДляХеширования = Новый Массив;
	СтрокиДляХеширования.Добавить(XMLСтрока(РазрешеноВсем));
	СтрокиДляХеширования.Добавить(XMLСтрока(ДанныеДокумента.ДействителенДо));
	
	Если ДанныеДокумента.ДоверенныеИНН.Количество() > 0 Тогда
		
		СписокИНН = Новый СписокЗначений;
		СписокИНН.ЗагрузитьЗначения(ДанныеДокумента.ДоверенныеИНН);
		СписокИНН.СортироватьПоЗначению();
		Для Каждого Строка Из СписокИНН Цикл
			СтрокиДляХеширования.Добавить(Строка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДляХеширования = СтрСоединить(СтрокиДляХеширования, ",");
	
	Возврат ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаДляХеширования);
	
КонецФункции

Функция ОбновитьСтатусПослеПодписанияСогласия(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена) Экспорт
	
	СтатусОбработки = ДанныеОбработки.СтатусОбработки;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПодписаниеСогласияОшибкаПередачи;
		Иначе
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СогласиеПодписано;
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка Тогда
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.ПодписаниеАннулированияСогласияОшибкаПередачи;
		Иначе
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.АннулированиеСогласияПодписано;
		КонецЕсли;
		
	КонецЕсли;
	
	ПротоколОбменаXML = Неопределено;
	ПротоколОбмена    = ИнтеграцияИСМПСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена;
	Если ПротоколОбмена <> Неопределено И ПротоколОбмена.Количество() > 0 Тогда
		ПротоколОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПротоколОбмена);
	КонецЕсли;
	
	ОбновитьТекущееСостояниеСогласияОПредоставленииИнформацииГИСМТ(ЭлементОчереди.Организация);
	
	ОбновитьСтатусИПротокол(ЭлементОчереди.Организация, Статус, ПротоколОбменаXML);
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапроситьСтатусРегистрацииУчастников(Организация, СписокИНН)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПоИНН",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если СписокИНН.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод ЗапроситьСтатусРегистрацииУчастника не передан ИНН'");
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СтрокиИНН = Новый Массив;
	Для Каждого ИНН Из СписокИНН Цикл
		СтрокиИНН.Добавить(СтрШаблон("inns=%1", ИНН));
	КонецЦикла;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/participants?%1",
		СтрСоединить(СтрокиИНН, "&"));
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПоИНН = Новый Соответствие;
				
				Для Каждого Строка Из СписокИНН Цикл
					ДанныеПоИНН.Вставить(Строка, Неопределено);
				КонецЦикла;
				
				Для Каждого Строка Из ДанныеОбработки Цикл
					
					СостояниеИНН = Новый Структура;
					СостояниеИНН.Вставить("ТекстОшибки",     "");
					СостояниеИНН.Вставить("КодОшибки",       "");
					СостояниеИНН.Вставить("Статус",          "");
					СостояниеИНН.Вставить("Зарегистрирован", Ложь);
					
					Если Строка.Свойство("error_code") Тогда
						
						СостояниеИНН.ТекстОшибки = Строка.error_message;
						СостояниеИНН.КодОшибки   = Строка.error_code;
						
					Иначе
						
						СостояниеИНН.Статус          = Строка.status;
						СостояниеИНН.Зарегистрирован = Строка.is_registered;
						
					КонецЕсли;
					
					ДанныеПоИНН[Строка.inn] = СостояниеИНН;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПоИНН = ДанныеПоИНН
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИнформацияПоДействующемуСогласию(Организация, РезультатЗапросаСписокДокументов = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	
	Если РезультатЗапросаСписокДокументов = Неопределено Тогда
		РезультатЗапросаСписокДокументов = СписокДокументовСогласия(Организация);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ОшибкаСервиса = РезультатЗапросаСписокДокументов.ОшибкаСервиса;
	Если РезультатЗапросаСписокДокументов.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСписокДокументов.ТекстОшибки;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли РезультатЗапросаСписокДокументов.ДанныеДокументов = Неопределено Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСписокДокументов.ТекстОшибки;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	СтатусыСогласия = СтатусыСогласия();
	
	// Поиск подписанного документа
	ДанныеДокумента = Неопределено;
	Для Каждого СтрокаДанных Из РезультатЗапросаСписокДокументов.ДанныеДокументов Цикл
		Если ВРег(СтрокаДанных.status) = СтатусыСогласия.Подписано Тогда
			ДанныеДокумента = СтрокаДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПодписанногоДокумента = Новый Структура;
	ДанныеПодписанногоДокумента.Вставить("РегистрационныйНомер",               Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ДатаСоздания",                       Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ДатаПодписания",                     Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ИдентификаторСогласия",              Неопределено);
	ДанныеПодписанногоДокумента.Вставить("СтатусСогласия",                     Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ДатаОкончанияСрока",                 Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ДляВсехКонтрагентов",                Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ДоверенныеИНН",                      Неопределено);
	ДанныеПодписанногоДокумента.Вставить("ИдентификаторАннулированияСогласия", Неопределено);
	
	Если ДанныеДокумента <> Неопределено Тогда
		
		ИдентификаторСогласия = ДанныеДокумента.agreementRevisionId;
		
		РезультатЗапросаДанныеДокумента = ДокументСогласиеПоИдентификатору(Организация, ИдентификаторСогласия);
		
		ВозвращаемоеЗначение.ОшибкаСервиса = РезультатЗапросаДанныеДокумента.ОшибкаСервиса;
		Если РезультатЗапросаДанныеДокумента.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаДанныеДокумента.ТекстОшибки;
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатЗапросаДанныеДокумента.ДанныеДокумента = Неопределено Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаДанныеДокумента.ТекстОшибки;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
		РегистрационныйНомер = Неопределено;
		Если ДанныеДокумента.Свойство("documentRegNumber") И ЗначениеЗаполнено(ДанныеДокумента.documentRegNumber) Тогда
			РегистрационныйНомер = ДанныеДокумента.documentRegNumber;
		КонецЕсли;
		
		ДатаСоздания = Неопределено;
		Если ДанныеДокумента.Свойство("createDate") И ЗначениеЗаполнено(ДанныеДокумента.createDate) Тогда
			ДатаСоздания = НачалоДня(ПрочитатьДатуJSON(ДанныеДокумента.createDate, ФорматДатыJSON.ISO));
		КонецЕсли;
		
		ДатаПодписания = Неопределено;
		Если ДанныеДокумента.Свойство("publicationDate") И ЗначениеЗаполнено(ДанныеДокумента.publicationDate) Тогда
			ДатаПодписания = НачалоДня(ПрочитатьДатуJSON(ДанныеДокумента.publicationDate, ФорматДатыJSON.ISO));
		КонецЕсли;
		
		ДанныеПодписанногоДокумента.РегистрационныйНомер  = РегистрационныйНомер;
		ДанныеПодписанногоДокумента.ДатаСоздания          = ДатаСоздания;
		ДанныеПодписанногоДокумента.ДатаПодписания        = ДатаПодписания;
		ДанныеПодписанногоДокумента.ИдентификаторСогласия = ИдентификаторСогласия;
		ДанныеПодписанногоДокумента.СтатусСогласия        = ВРег(СтрокаДанных.status);
		ДанныеПодписанногоДокумента.ДатаОкончанияСрока    = РезультатЗапросаДанныеДокумента.ДанныеДокумента.ДатаОкончанияСрока;
		ДанныеПодписанногоДокумента.ДляВсехКонтрагентов   = РезультатЗапросаДанныеДокумента.ДанныеДокумента.ДляВсехКонтрагентов;
		ДанныеПодписанногоДокумента.ДоверенныеИНН         = РезультатЗапросаДанныеДокумента.ДанныеДокумента.ДоверенныеИНН;
		
		Если ДанныеДокумента.Свойство("cancellation") Тогда
			ДанныеПодписанногоДокумента.ИдентификаторАннулированияСогласия = ДанныеДокумента.cancellation.id;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеДокумента = ДанныеПодписанногоДокумента;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ЧтениеИзСервиса

Функция СписокДокументовСогласия(Организация)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДокументов",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v3/true-api/agreement-registry/agreement/list?offset=0";
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеДокументов = ДанныеОбработки.results;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДокументСогласиеПоИдентификатору(Организация, ИдентификаторСогласия)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон("api/v3/true-api/agreement-registry/agreement/%1/trusted-inns", ИдентификаторСогласия);
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДатаОкончанияСрока  = '00010101';
				ДляВсехКонтрагентов = Ложь;
				ДоверенныеИНН       = Новый Массив;
				
				ДатаОкончанияСрока = НачалоДня(ПрочитатьДатуJSON(ДанныеОбработки.expirationDate, ФорматДатыJSON.ISO));
				
				Если ДанныеОбработки.Свойство("everyonePermitted") И ДанныеОбработки.everyonePermitted = Истина Тогда
					ДляВсехКонтрагентов = Истина;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоверенныеИНН, ДанныеОбработки.trustedInns);
				
				ДанныеДокумента = Новый Структура;
				ДанныеДокумента.Вставить("ДатаОкончанияСрока",  ДатаОкончанияСрока);
				ДанныеДокумента.Вставить("ДляВсехКонтрагентов", ДляВсехКонтрагентов);
				ДанныеДокумента.Вставить("ДоверенныеИНН",       ДоверенныеИНН);
				
				ВозвращаемоеЗначение.ДанныеДокумента = ДанныеДокумента;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТелоДокументаСогласия(Организация, ИдентификаторСогласия, ТипДокумента)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТелоДокументаJSON",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон("api/v3/true-api/agreement-registry/%1/print-form?documentType=%2", ИдентификаторСогласия, ТипДокумента);
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ТелоДокументаJSON = РезультатОтправкиЗапроса.ТекстВходящегоСообщения;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ИзменениеВСервисе

Функция АннулированиеСогласия(Организация)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v3/true-api/agreement-registry/cancellation";
	РезультатЗапроса = ОбщегоНазначенияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		Неопределено,
		КлючСессии,
		"POST",
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("ИдентификаторАннулированияСогласия", Неопределено);
		
		Если РезультатОтправкиЗапроса.КодСостояния = 201 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеДокумента = ДанныеДокумента;
				
				ВозвращаемоеЗначение.ДанныеДокумента.ИдентификаторАннулированияСогласия = ДанныеОбработки.id;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			// У пользователя отсутствует документ согласия в статусе "Подписан"
			// У пользователя уже существует документ отмены согласия в статусе "Сформирован"
			
			ВозвращаемоеЗначение.ДанныеДокумента = ДанныеДокумента;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтклонениеЧерновикаСогласия(Организация)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеДокумента",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v3/facade/agreement-registry/agreement/decline";
	РезультатЗапроса = ОбщегоНазначенияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		Неопределено,
		КлючСессии,
		"POST",
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	ДанныеДокумента = Неопределено;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеДокумента = Новый Структура("Отклонен", Истина);
			
		Иначе
			
			// Может быть уже отклонен
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеДокумента = ДанныеДокумента;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ФормированиеСогласияНаПредоставлениеСведенийОКИДругимУОТ(Организация, ДатаОкончанияСрока, ДляВсехКонтрагентов, ДоверенныеИНН) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЧерновикаСогласия", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДатаОкончанияСрокаДействияПодписи = Формат(ДатаОкончанияСрока, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "Z";
	
	ТелоЗапроса = Новый Структура;
	
	Если ДляВсехКонтрагентов Тогда
		ТелоЗапроса.Вставить("expirationDate",    ДатаОкончанияСрокаДействияПодписи);
		ТелоЗапроса.Вставить("everyonePermitted", ДляВсехКонтрагентов);
	Иначе
		ТелоЗапроса.Вставить("expirationDate", ДатаОкончанияСрокаДействияПодписи);
		ТелоЗапроса.Вставить("trustedInns",    ДоверенныеИНН);
	КонецЕсли;
	
	URLЗапроса = "api/v3/true-api/agreement-registry/agreement";
	РезультатЗапроса = ОбщегоНазначенияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапроса,
		КлючСессии,
		"POST",
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 201 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ИдентификаторЧерновикаСогласия = ДанныеОбработки.id;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			// [{"message":"У УОТа уже есть актуальная ревизия согласия","object":["AR772938458000014"]}]
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Процедура ОбновитьСтатусИПротокол(Организация, Статус, ПротоколОбменаXML = Неопределено, ОписаниеОшибки = Неопределено)
	
	Запись = РегистрыСведений.СогласиеОПредоставленииИнформацииГИСМТ.СоздатьМенеджерЗаписи();
	Запись.Организация = Организация;
	
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	Запись.Статус = Статус;
	
	ПротоколОбмена = Неопределено;
	Если ЗначениеЗаполнено(ПротоколОбменаXML) Или ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПротоколОбмена = Новый Структура;
		ПротоколОбмена.Вставить("ПротоколОбменаXML", ПротоколОбменаXML);
		ПротоколОбмена.Вставить("ОписаниеОшибки",    ОписаниеОшибки);
	КонецЕсли;
	Запись.ПротоколОбмена = Новый ХранилищеЗначения(ПротоколОбмена);
	
	Запись.Записать();
	
КонецПроцедуры

Функция СтатусыСогласия()
	
	СтатусыСогласия = Новый Структура;
	СтатусыСогласия.Вставить("Подписано",      "SIGNED");      // подписан (присваивается по факту подписания пользователем);
	СтатусыСогласия.Вставить("ТребуетПодписи", "ESTABLISHED"); // сформирован (присваивается при записи документа в БД после успешного прохождения всех проверок);
	СтатусыСогласия.Вставить("Отклонено",      "REJECTED");    // отклонён (присваивается, если пользователь отказывается от подписания документа);
	СтатусыСогласия.Вставить("Аннулировано",   "CANCELLED");   // аннулирован (присваивается в случае аннулирования документа)
	СтатусыСогласия.Вставить("Устарело",       "OUTDATED");    // устарел (присваивается в случае, если документ был подписан ранее, но вместо него был подписан новый документ);
	
	Возврат СтатусыСогласия;
	
КонецФункции

Функция ВыполнитьМетодВФоне(ПараметрыВыполнения, НаименованиеФоновогоЗадания, ИмяМетода)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("Организация",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("Результат",                      Неопределено);
	
	Если ПараметрыВыполнения.Свойство("ВыполнитьВФоне") И ПараметрыВыполнения.ВыполнитьВФоне Тогда
		
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.УникальныйИдентификатор);
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",   ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ПараметрыМатода = Новый Массив;
		ПараметрыМатода.Добавить(ПараметрыФоновогоЗадания);
		ПараметрыМатода.Добавить(АдресРезультата);
		
		ФоновоеЗадание = Новый Структура;
		ФоновоеЗадание.Вставить("Статус",              "Выполняется");
		ФоновоеЗадание.Вставить("ИдентификаторЗадания", Неопределено);
		ФоновоеЗадание.Вставить("АдресРезультата",      АдресРезультата);
		ФоновоеЗадание.Вставить("КраткоеПредставлениеОшибки",   "");
		ФоновоеЗадание.Вставить("ПодробноеПредставлениеОшибки", "");
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ФоновоеЗадание;
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		Попытка
			Задание = ФоновыеЗадания.Выполнить(
				ИмяМетода,
				ПараметрыМатода,
				Строка(ПараметрыВыполнения.УникальныйИдентификатор),
				НаименованиеФоновогоЗадания);
		Исключение
			ФоновоеЗадание.Статус = "Ошибка";
			Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
				ФоновоеЗадание.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
				ФоновоеЗадание.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Иначе
				ФоновоеЗадание.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ФоновоеЗадание.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			Возврат ВозвращаемоеЗначение;
		КонецПопытки;
		УстановитьОтключениеБезопасногоРежима(Ложь);
		
		Если Задание <> Неопределено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
			ФоновоеЗадание.Статус = "Ошибка";
			ФоновоеЗадание.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			ФоновоеЗадание.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		ФоновоеЗадание.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		
	ИначеЕсли ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Или ОбщегоНазначения.РежимОтладки() Тогда
		
		ВызватьИсключение НСтр("ru = 'Выбранный режим не поддерживается'");
		
	Иначе
		
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыВыполнения.УникальныйИдентификатор);
		ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",   ИнтеграцияИСМПСлужебный.ПараметрыСеансаИС());
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			ИмяМетода,
			ПараметрыФоновогоЗадания, ПараметрыВыполненияВФоне);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Функция ОбновитьТекущееСостояниеСогласияОПредоставленииИнформацииГИСМТ(Организация, РезультатЗапросаПоДействующемуСогласию = Неопределено, ЗаполнятьСтатус = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ОшибкаСервиса",                  Ложь);
	Результат.Вставить("ДанныеДокумента",                Неопределено);
	Результат.Вставить("ДанныеОбновлены",                Ложь);
	Результат.Вставить("ДокументВНаличии",               Ложь);
	
	Если РезультатЗапросаПоДействующемуСогласию = Неопределено Тогда
		РезультатЗапросаПоДействующемуСогласию = ИнформацияПоДействующемуСогласию(Организация);
	КонецЕсли;
	
	Если РезультатЗапросаПоДействующемуСогласию.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ТекстОшибки     = РезультатЗапросаПоДействующемуСогласию.ТекстОшибки;
	Результат.ОшибкаСервиса   = РезультатЗапросаПоДействующемуСогласию.ОшибкаСервиса;
	Результат.ДанныеДокумента = РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента;
	
	ХешСуммуДокументаВСервисе = Неопределено;
	Если РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента = Неопределено Тогда
		
		Возврат Результат;
		
	ИначеЕсли РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ИдентификаторСогласия <> Неопределено Тогда
		
		ДанныеДокументаИзСервиса = Новый Структура;
		ДанныеДокументаИзСервиса.Вставить("РазрешеноВсем",  РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДляВсехКонтрагентов);
		ДанныеДокументаИзСервиса.Вставить("ДействителенДо", РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДатаОкончанияСрока);
		ДанныеДокументаИзСервиса.Вставить("ДоверенныеИНН",  РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДоверенныеИНН);
		
		ХешСуммуДокументаВСервисе = ХешСуммуДокумента(ДанныеДокументаИзСервиса);
		
		Результат.ДокументВНаличии = Истина;
		
	КонецЕсли;
	
	Записать = Ложь;
	
	Запись = РегистрыСведений.СогласиеОПредоставленииИнформацииГИСМТ.СоздатьМенеджерЗаписи();
	Запись.Организация = Организация;
	
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИсторияИзменений = ИсторияИзмененийИзХранилища(Запись.ИсторияИзменений);
	
	ТекущиеДанныеДокумента    = ИнициализацияДанныхДокументаСогласия();
	ДанныеДокументаКИзменению = ИсторияИзменений.КИзменению;
	ДанныеДокументаАрхив      = ИнициализацияДанныхДокументаСогласия();
	
	Если ЗначениеЗаполнено(ХешСуммуДокументаВСервисе) Тогда
		
		Если ИсторияИзменений.Текущий.ХешСумма <> ХешСуммуДокументаВСервисе Тогда
			
			ТекущиеДанныеДокумента.РазрешеноВсем        = ДанныеДокументаИзСервиса.РазрешеноВсем;
			ТекущиеДанныеДокумента.ДействителенДо       = ДанныеДокументаИзСервиса.ДействителенДо;
			ТекущиеДанныеДокумента.ДоверенныеИНН        = ДанныеДокументаИзСервиса.ДоверенныеИНН;
			ТекущиеДанныеДокумента.ХешСумма             = ХешСуммуДокументаВСервисе;
			
			ДанныеДокументаАрхив = ИсторияИзменений.Текущий;
			
			Записать = Истина;
			
		Иначе
			
			ТекущиеДанныеДокумента = ИсторияИзменений.Текущий;
			
		КонецЕсли;
		
		Если ИсторияИзменений.Текущий.Идентификатор <> РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ИдентификаторСогласия Тогда
			
			ТекущиеДанныеДокумента.ДатаПодписания       = РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ДатаПодписания;
			ТекущиеДанныеДокумента.РегистрационныйНомер = РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.РегистрационныйНомер;
			ТекущиеДанныеДокумента.Идентификатор        = РезультатЗапросаПоДействующемуСогласию.ДанныеДокумента.ИдентификаторСогласия;
			
			Записать = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма)
			И ИсторияИзменений.КИзменению.ХешСумма = ХешСуммуДокументаВСервисе Тогда
			
			ДанныеДокументаКИзменению = ИнициализацияДанныхДокументаСогласия();
			
			Записать = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма) Тогда
			
			ДанныеДокументаАрхив = ИсторияИзменений.Текущий;
			
			Записать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИсторияИзменений.Текущий    = ТекущиеДанныеДокумента;
	ИсторияИзменений.КИзменению = ДанныеДокументаКИзменению;
	ИсторияИзменений.Архив      = ДанныеДокументаАрхив;
	
	Результат.ДанныеОбновлены = Записать;
	
	Если Записать И ЗаполнятьСтатус Тогда
		
		Статус            = Неопределено;
		ПротоколОбменаXML = Неопределено;
		ТекстОшибки       = Неопределено;
		
		Если Результат.ДокументВНаличии Тогда
			Статус                      = Перечисления.СтатусыОбработкиСогласияГИСМТ.СогласиеПодписано;
			ИсторияИзменений.КИзменению = ИнициализацияДанныхДокументаСогласия();
		ИначеЕсли Результат.ОшибкаСервиса Тогда
			Статус      = Перечисления.СтатусыОбработкиСогласияГИСМТ.Ошибка;
			ТекстОшибки = Результат.ТекстОшибки;
		Иначе
			Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.Черновик;
		КонецЕсли;
		
		Запись.Статус = Статус;
		
		ПротоколОбмена = Неопределено;
		Если ЗначениеЗаполнено(ПротоколОбменаXML) Или ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПротоколОбмена = Новый Структура;
			ПротоколОбмена.Вставить("ПротоколОбменаXML", ПротоколОбменаXML);
			ПротоколОбмена.Вставить("ОписаниеОшибки",    ТекстОшибки);
		КонецЕсли;
		Запись.ПротоколОбмена = Новый ХранилищеЗначения(ПротоколОбмена);
		
	КонецЕсли;
	
	Если Записать Тогда
		Запись.ИсторияИзменений = Новый ХранилищеЗначения(ИсторияИзменений);
		Запись.Записать();
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция ИсторияИзмененийИзХранилища(ХранилищеИсторииИзменений) Экспорт
	
	ИсторияИзменений = ХранилищеИсторииИзменений.Получить();
	
	Если ИсторияИзменений = Неопределено Тогда
		
		ИсторияИзменений = Новый Структура;
		ИсторияИзменений.Вставить("КИзменению", ИнициализацияДанныхДокументаСогласия());
		ИсторияИзменений.Вставить("Текущий",    ИнициализацияДанныхДокументаСогласия());
		ИсторияИзменений.Вставить("Архив",      ИнициализацияДанныхДокументаСогласия());
		
	КонецЕсли;
	
	Возврат ИсторияИзменений;
	
КонецФункции

Функция ИнициализацияДанныхДокументаСогласия()
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("РазрешеноВсем",   Ложь);
	ДанныеДокумента.Вставить("ДействителенДо", '00010101');
	ДанныеДокумента.Вставить("ДоверенныеИНН",   Новый Массив);
	ДанныеДокумента.Вставить("ХешСумма",        "");
	
	ДанныеДокумента.Вставить("ДатаПодписания");
	ДанныеДокумента.Вставить("РегистрационныйНомер");
	ДанныеДокумента.Вставить("Идентификатор");
	
	Возврат ДанныеДокумента;
	
КонецФункции