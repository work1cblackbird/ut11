#Область СлужебныеПроцедурыИФункции

#Область ВидНоменклатуры

Процедура СвязьОсобенностейУчетаИФО(СвязьОсобенностейУчетаИФО) Экспорт
	
	//++ Локализация
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция, "ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво, "ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках, "ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов, "ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы, "ИспользоватьУчетДрагоценныхМатериалов");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС, "ВестиУчетПодконтрольныхТоваровВЕТИС");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Зерно, "ВестиУчетЗернаИПродуктовПереработкиЗЕРНО");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна, "ВестиУчетЗернаИПродуктовПереработкиЗЕРНО");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС, "ВестиУчетЗернаИПродуктовПереработкиЗЕРНО,ВестиУчетПодконтрольныхТоваровВЕТИС");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС, "ВестиУчетЗернаИПродуктовПереработкиЗЕРНО,ВестиУчетПодконтрольныхТоваровВЕТИС");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН, "ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН");
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидПродукции КАК ВидПродукции
		|ИЗ
		|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
		|ГДЕ
		|	ВестиУчетПродукции";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Выборка.ВидПродукции);
			Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
				СвязьОсобенностейУчетаИФО.Вставить(ОсобенностьУчета, "ВестиУчетМаркируемойПродукцииИСМП");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		Если СвязьОсобенностейУчетаИФО[Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха] <> Неопределено Тогда
			СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха, "ВестиУчетМаркируемойПродукцииИСМП");
			СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ,                     "ВестиУчетМаркируемойПродукцииИСМП");
		КонецЕсли;
	Иначе
		СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха, "ВестиУчетМаркировкиПродукцииВГИСМ");
		СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ,                     "ВестиУчетМаркировкиПродукцииВГИСМ");
	КонецЕсли;
	//-- Локализация
	Возврат;

КонецПроцедуры

Процедура ПодсказкаПоОсобенностиУчетаНоменклатуры(ТекстПодсказки, ОсобенностьУчета) Экспорт
	
	//++ Локализация
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Формируются декларации по алкогольной продукции и осуществляется обмен с ЕГАИС информацией по обороту.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС Тогда
		ТекстПодсказки = НСтр("ru='Осуществляется обмен с %Парам1% информацией по обороту продукции животного происхождения.'");
		ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%Парам1%", "ВетИС");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы Тогда
		ТекстПодсказки = НСтр("ru = 'Статистическая отчетность по содержанию драгоценных материалов.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
		Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту товаров из натурального меха.'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'Продукция маркируется специальными контрольными идентификационными знаками (%Парам1%) и осуществляется обмен с ГИСМ (информационной системой маркировки товаров) информацией по обороту.'");
			ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%Парам1%", "КиЗ");
		КонецЕсли;
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда
		Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			ТекстПодсказки = НСтр("ru = 'Не используется. Контрольные идентификационные знаки (КИЗ), которыми маркируется продукция, учитываемая в ГИСМ (информационной системе маркировки товаров).'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'Контрольные идентификационные знаки (КИЗ), которыми маркируется продукция, учитываемая в ГИСМ (информационной системе маркировки товаров).'");
		КонецЕсли;
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МОТП информацией по обороту табачной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту обувной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту товаров легкой промышленности и одежды.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП по обороту молока и молочной продукции, не подконтрольной ВетИС.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ВетИС информацией по обороту молока и молочной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Шины Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту шин и автопокрышек.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту фотоаппаратов и ламп-вспышек.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту велосипедов и велосипедных рам.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту кресел-колясок.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Духи Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту духов и туалетной воды.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту альтернативного табака.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту упакованной воды.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту антисептиков.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БАДы Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту биологически активных добавок.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту никотиносодержащей продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ЕГАИС информацией по обороту пива в кегах.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.СоковаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту соковой продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту безалкогольного пива.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ВетИС информацией по обороту морепродуктов.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту кормов для животных, не подконтрольных ВетИС.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ВетИС информацией по обороту кормов для животных.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ВетИС информацией по обороту мяса.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту ветеринаринарных препаратов.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту игр и игрушек для детей.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту радиоэлектронной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту титановой металлопродукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту консервированной продукции, не подконтрольной ВетИС.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ВетИС информацией по обороту консервированной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.РастительныеМасла Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту растительных масел.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту оптоволокна и оптоволоконной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту парфюмерных и косметических средств и бытовой химии.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту печатной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту отопительных приборов.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту строительных материалов.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту пиротехнических изделий и средств пожарной безопастности.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ЕГАИС информацией по обороту алкогольной продукции до 9%.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту телефонов и ноутбуков.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту кабельной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Бакалея Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту бакалейной продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МоторныеМасла Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту моторных масел.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту безалкогольных напитков.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ЕГАИС информацией по обороту пива в потребительских упаковках.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту технических средств реабилитации.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту медицинских изделий.'");
	
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Зерно Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ФГИС ""Зерно"" информацией по обороту зерна.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ФГИС ""Зерно"" информацией по обороту продуктов переработки зерна.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ФГИС ""Зерно"" и ВетИС информацией по обороту зерна. Пример: фуражное зерно.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ФГИС ""Зерно"" и ВетИС информацией по обороту продуктов переработки зерна. Пример: кормовые отруби.'");
	
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ФГИС ""Сатурн"" информацией по обороту пестицидов и агрохимикатов.'");
	
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	РеквизитыНастройкиУказанияСерий - Массив из Строка
//
Процедура РеквизитыНастройкиУказанияСерий(РеквизитыНастройкиУказанияСерий) Экспорт
	
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьНомерКИЗГИСМСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьПроизводителяЕГАИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьСправку2ЕГАИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьПроизводителяВЕТИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьИдентификаторПартииВЕТИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьМРЦМОТПСерии");
	
	Возврат;
	
КонецПроцедуры

Процедура ОписаниеИспользованияРеквизитовСерии(ОписанияИспользованияРеквизитовСерии, НастройкиИспользованияСерий = Неопределено, ПараметрыУказанияСерий = Неопределено, ЗначенияПолейСвязи = Неопределено) Экспорт
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ПроизводительЕГАИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьПроизводителяЕГАИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "АлкогольнаяПродукция,Пиво,АлкогольнаяПродукцияДо9Процентов,ПивоВПотребительскихУпаковках";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%ПроизводительЕГАИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "Справка2ЕГАИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьСправку2ЕГАИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "АлкогольнаяПродукция,Пиво,АлкогольнаяПродукцияДо9Процентов,ПивоВПотребительскихУпаковках";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%Справка2ЕГАИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ПроизводительВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьПроизводителяВЕТИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = ОсобенностиУчетаВЕТИС();
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru='%ПроизводительВЕТИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ЗаписьСкладскогоЖурналаВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = ОсобенностиУчетаВЕТИС();
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru='%ЗаписьСкладскогоЖурналаВЕТИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ИдентификаторПартииВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьИдентификаторПартииВЕТИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = ОсобенностиУчетаВЕТИС();
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru='%ИдентификаторПартииВЕТИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "МаксимальнаяРозничнаяЦенаМОТП";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьМРЦМОТПСерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "ТабачнаяПродукция";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = 'МРЦ %МаксимальнаяРозничнаяЦенаМОТП%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.ПроверятьЗаполнение = Ложь;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "НомерКиЗГИСМ";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьНомерКИЗГИСМСерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "КиЗГИСМ";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%Парам1% %НомерКиЗГИСМ%'");
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = СтрЗаменить(ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования, "%Парам1%", "КиЗ");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.ПроверятьУникальностьЗначения = Истина;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	ИспользованиеКиЗ = ОписаниеИспользованиеРеквизитаСерии.Использование;
	ОписаниеИспользованиеРеквизитаСерии.Использование = Ложь;
	
	//++ Локализация
	Если Не ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		
		ОписаниеИспользованиеРеквизитаСерии.Использование = ИспользованиеКиЗ;
		Если ЗначениеЗаполнено(ПараметрыУказанияСерий)
			И НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
			
			Для Каждого Описание Из ОписанияИспользованияРеквизитовСерии Цикл
				Если Описание.ИмяРеквизита = "Номер" Тогда
					
					Описание.МожноРедактировать       = Ложь;
					Если ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий) Тогда
						
						Если Не ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Тогда
							Описание.ТекстУсловногоОформления = НСтр("ru = '<генерируются по данным RFID-метки>'");
						Иначе
							Описание.ТекстУсловногоОформления = НСтр("ru = '<заполняется по данным %Парам1%>'");
							Описание.ТекстУсловногоОформления = СтрЗаменить(Описание.ТекстУсловногоОформления, "%Парам1%", "КиЗ");
						КонецЕсли;
						
						Если ИнтеграцияГИСМУТ.ЭтоМаркировкаОстатковГИСМ(ПараметрыУказанияСерий) Тогда
							Описание.ПроверятьЗаполнение = Ложь;
						Иначе
							Описание.ПроверятьЗаполнение = Истина;
						КонецЕсли;
						
					Иначе
						Если ИнтеграцияГИСМУТ.ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара(НастройкиИспользованияСерий,ПараметрыУказанияСерий) Тогда
							Описание.ПроверятьЗаполнение = Истина;
						Иначе
							Описание.ПроверятьЗаполнение = Ложь;
						КонецЕсли;
						
						Описание.ТекстУсловногоОформления = "";
					КонецЕсли;
				ИначеЕсли Описание.ИмяРеквизита = "RFIDEPC" Тогда	
					Если НастройкиИспользованияСерий.ОсобенностьУчета  = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
						Описание.МожноРедактировать = ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий)
														И Не ИнтеграцияГИСМУТ.ЭтоМаркировкаОстатковГИСМ(ПараметрыУказанияСерий)
														И Не ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий,
														ПараметрыУказанияСерий,
														ЗначенияПолейСвязи);
					ИначеЕсли НастройкиИспользованияСерий.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда 
						Описание.МожноРедактировать  = Ложь;
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Дополняет значения реквизитов строго заполняемые по особенностям учета, для локальных особенностей учета
// 
// Параметры:
//   ЗначенияЗаполнения - Соответствие - предопределенные фиксированные настройки НСИ для номенклатуры с особенностями учета
//
Процедура ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета(ЗначенияЗаполнения) Экспорт
	
	//++ Локализация
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("ПродукцияМаркируемаяДляГИСМ", Ложь);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция,                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС,         ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС,            ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС, ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция,                    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды,                           ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи,                                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски,                        ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность,                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты,                         ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины,                                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода,                      ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак,                  ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики,                          ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.БАДы,                                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция,          ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.СоковаяПродукция,                     ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво,                   ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция,                     ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС,      ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС,             ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС,  ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС,              ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты,                ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей,                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция,            ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция,            ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС,    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС, ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.РастительныеМасла,                    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция,  ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия, ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция,                    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы,                  ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы,                ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности, ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки,                    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция,                   ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Бакалея,                              ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МоторныеМасла,                        ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки,                ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации,      ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия,                   ЗначенияРеквизитов);
	
	Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха, ЗначенияРеквизитов);
		ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ,                     ЗначенияРеквизитов);
	Иначе
		ЗначенияРеквизитов = Новый Структура;
		ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара);
		ЗначенияРеквизитов.Вставить("ИспользоватьНомерКИЗГИСМСерии", Истина);
		ЗначенияРеквизитов.Вставить("ИспользоватьНомерСерии", Истина);
		ЗначенияРеквизитов.Вставить("АвтоматическиГенерироватьСерии", Истина);
		ЗначенияРеквизитов.Вставить("ИспользоватьСерии", Истина);
		ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха, ЗначенияРеквизитов);
		
		ЗначенияРеквизитов = Новый Структура;
		ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара);
		ЗначенияРеквизитов.Вставить("ИспользоватьНомерКИЗГИСМСерии", Истина);
		ЗначенияРеквизитов.Вставить("ИспользоватьНомерСерии", Ложь);
		ЗначенияРеквизитов.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
		ЗначенияРеквизитов.Вставить("ИспользоватьСерии", Истина);
		ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ, ЗначенияРеквизитов);
	
	КонецЕсли;
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("АлкогольнаяПродукция", Истина);
	ЗначенияРеквизитов.Вставить("ПродукцияМаркируемаяДляГИСМ", Ложь);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво,                             ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках,    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов, ЗначенияРеквизитов);
	
	ЗначенияЗаполнения.Получить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха).Вставить("ПродукцияМаркируемаяДляГИСМ", Истина);
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("ПродукцияМаркируемаяДляГИСМ", Ложь);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета, ЗначенияРеквизитов);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура ПредусмотренаАвтоматическаяГенерацияСерий(ПредусмотренаАвтоматическаяГенерацияСерий, НастройкиИспользованияСерий) Экспорт
	
	//++ Локализация
	Если ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(НастройкиИспользованияСерий.ОсобенностьУчета)<>Неопределено
		Или НастройкиИспользованияСерий.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС Тогда
		ПредусмотренаАвтоматическаяГенерацияСерий = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Заполняет элемент справочника ВидыНоменклатуры значениями по умолчанию.
// 
// Параметры:
// 	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - справочник объект
Процедура ЗаполнитьРеквизитыВидаНоменклатурыПоУмолчанию(ВидНоменклатуры) Экспорт
	
	//++ Локализация
	Если Не ЗначениеЗаполнено(ВидНоменклатуры.ЕдиницаИзмерения)
		И ВидНоменклатуры.АлкогольнаяПродукция Тогда
		
		ВидНоменклатуры.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
		
	КонецЕсли;
	
	Если Не ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		
		Если Не ЗначениеЗаполнено(ВидНоменклатуры.ЕдиницаИзмерения)
			И (ВидНоменклатуры.ПродукцияМаркируемаяДляГИСМ
				Или ВидНоменклатуры.КиЗГИСМ) Тогда
			ВидНоменклатуры.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
		КонецЕсли;
		
		Если ВидНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
			ВидНоменклатуры.ИспользоватьRFIDМеткиСерии = Истина;
		КонецЕсли;
		
		Если ВидНоменклатуры.КиЗГИСМ Тогда
			ВидНоменклатуры.ИспользоватьRFIDМеткиСерии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		ВидНоменклатуры.ИспользоватьМРЦМОТПСерии = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Проверяет особенность учета вида номенклатуры на соответствие КиЗГИСМ.
//
// Параметры:
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета вида номенклатуры.
//
// Возвращаемое значение:
//	Булево - Истина - вид номенклатуры имеет особенность учета КиЗГИСМ.
//
Функция ТоварКиЗГИСМ(ОсобенностьУчета) Экспорт
	
	ТоварКиЗГИСМ = Ложь;
	//++ Локализация
	ТоварКиЗГИСМ = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ;
	//-- Локализация
	
	Возврат ТоварКиЗГИСМ;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияВидНоменклатуры(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Если (Объект.ПродукцияМаркируемаяДляГИСМ
		Или Объект.КиЗГИСМ)
		И Не Объект.ИспользоватьСерии
		И Не ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ТекстСообщения = НСтр("ru = 'Для маркируемой в ГИСМ продукции и для контрольных знаков ГИСМ должен быть обязательно включен учет серий.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

Процедура РеквизитыНеРедактируемыеВГрупповойОбработкеНоменклатура(НеРедактируемыеРеквизиты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Параметры:
// 	БлокируемыеРеквизиты - Массив из Строка - имена блокируемых реквизитов
// 
Процедура ПолучитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты) Экспорт
	
	БлокируемыеРеквизиты.Добавить("ВестиУчетПоГТД");
	БлокируемыеРеквизиты.Добавить("ПрослеживаемыйТовар");
	БлокируемыеРеквизиты.Добавить("ОблагаетсяНДСУПокупателя");
	БлокируемыеРеквизиты.Добавить("ПодакцизныйТовар");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(БлокируемыеРеквизиты, РеквизитыГИСМ());
	
	БлокируемыеРеквизиты.Добавить("АлкогольнаяПродукцияВоВскрытойТаре");
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	СтрогоБерутсяИзВида - Массив из Строка
// 	ЗаполняютсяТолькоПриСозданииНоменклатуры - Массив из Строка
// 	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию - Массив из Строка
// 	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены - Массив из Строка
// 	ЗначенияПоУмолчанию - Структура
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(СтрогоБерутсяИзВида,
		ЗаполняютсяТолькоПриСозданииНоменклатуры,
		ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию,
		ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены,
		ЗначенияПоУмолчанию) Экспорт
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ВестиУчетПоГТД");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ПодакцизныйТовар");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ИмпортнаяАлкогольнаяПродукция");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ОблагаетсяНДСУПокупателя");
	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("ВидАлкогольнойПродукции");
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("Крепость");
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("КодРаздел7ДекларацииНДС");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию,
												РеквизитыОбщероссийскихКлассификаторов());
	
	Возврат;
	
КонецПроцедуры

Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "СодержитДрагоценныеМатериалы") Тогда
		
		Номенклатура.ДрагоценныеМатериалы.Очистить();
		
	КонецЕсли;
	
	//++ Локализация
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Номенклатура.КодОКП = Справочники.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка();
		
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Номенклатура.ВестиУчетПоГТД = Номенклатура.ПрослеживаемыйТовар;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво
		Или Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках
		Или Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов
	Тогда
		Номенклатура.АлкогольнаяПродукция = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Заполняет значения реквизитов учета импорта и прослеживаемости по данным номенклатуры.
//
// Параметры:
//	Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - обрабатываемый элемент номенклатуры.
//	РеквизитыПрослеживаемости - см. НоменклатураКлиентСервер.РеквизитыПрослеживаемостиПоУмолчанию.
//
Процедура ЗаполнитьРеквизитыИмпортаИПрослеживаемости(Номенклатура, РеквизитыПрослеживаемости) Экспорт
	
	НоменклатураКлиентСерверЛокализация.ЗаполнитьРеквизитыИмпортаИПрослеживаемости(Номенклатура,
																					РеквизитыПрослеживаемости);
	
КонецПроцедуры

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела) Экспорт
	
	Если ИмяРаздела = "ВидАлкогольнойПродукции" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ПроизводительИмпортерКонтрагент" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКВЭД" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКВЭД2" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКП" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКПД2" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодПоКВПД" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодВидаНоменклатурнойКлассификации" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодТРУ" Тогда
		Возврат НСтр("ru = '<не указан>'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Параметры:
// 	ТабличныйДокументПраво - ТабличныйДокумент
// 	Объект - СправочникОбъект.Номенклатура
// 	НастройкиВидимостиИЗаголовков - см. Справочники.Номенклатура.НастройкиВидимостиИЗаголовков
// 	ДляПечати - Булево
//
Процедура ВывестиГлавы(ТабличныйДокументПраво, Объект, НастройкиВидимостиИЗаголовков, ДляПечати) Экспорт
	
	//++ Локализация
	
	Перем Заголовок;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = Справочники.Номенклатура.ПолучитьМакет("ПФ_MXL_КарточкаНоменклатурыЛокализация");
	
	#Область РегламентированныйУчет
	
	Если ГлаваВидна("РегламентированныйУчет", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РегламентированныйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если Справочники.Номенклатура.РазделВиден("ВестиУчетПоГТД", СтруктураВидимости) Тогда
			СтруктураЗаголовков.Свойство("ВестиУчетПоГТД", Заголовок);
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ВестиУчетПоГТД);
			
			Область = Макет.ПолучитьОбласть("ВестиУчетПоГТДСтрока");
			Область.Параметры.ВестиУчетПоГТДРеквизит = Строка(Заголовок) + ":";
			Область.Область("ВестиУчетПоГТДФлаг").Картинка = Картинка;
			
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ВестиУчетПоГТД";
			КонецЕсли;
			
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ПрослеживаемыйТовар", СтруктураВидимости) Тогда
			
			СтруктураЗаголовков.Свойство("ПрослеживаемыйТовар", Заголовок);
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ПрослеживаемыйТовар);
			
			Область = Макет.ПолучитьОбласть("ПрослеживаемыйТоварСтрока");
			Область.Параметры.ПрослеживаемыйТоварРеквизит = Заголовок + ":";
			Область.Область("ПрослеживаемыйТоварФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ПрослеживаемыйТовар";
			КонецЕсли;
			
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ПодакцизныйТовар", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПодакцизныйТоварСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ПодакцизныйТовар);
			Область.Область("ПодакцизныйТоварФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ПодакцизныйТовар";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ОблагаетсяНДСУПокупателя", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ОблагаетсяНДСУПокупателяСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ОблагаетсяНДСУПокупателя);
			Область.Область("ОблагаетсяНДСУПокупателяФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ОблагаетсяНДСУПокупателя";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодРаздел7ДекларацииНДС", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодРаздел7ДекларацииНДС";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодРаздел7ДекларацииНДССтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодРаздел7ДекларацииНДСРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита = Объект.КодРаздел7ДекларацииНДС;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимости) Тогда
			
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиДрагоценныеМатериалыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиДрагоценныеМатериалы", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиДрагоценныеМатериалы = Строка(Заголовок);
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиДрагоценныеМатериалы";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СведенияОбАлкогольнойПродукции
	
	Если ГлаваВидна("СведенияОбАлкогольнойПродукции", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("СведенияОбАлкогольнойПродукцииЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если Справочники.Номенклатура.РазделВиден("ВидАлкогольнойПродукции", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "ВидАлкогольнойПродукции";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "ВидАлкогольнойПродукцииСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "ВидАлкогольнойПродукцииРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.ВидАлкогольнойПродукции;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ИмпортнаяАлкогольнаяПродукция", СтруктураВидимости) Тогда
			Если Объект.ИмпортнаяАлкогольнаяПродукция Тогда
				СтрокаЗаполнения = НСтр("ru = 'Импорт'");	
			Иначе
				СтрокаЗаполнения = НСтр("ru = 'Россия'");
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "ИмпортнаяАлкогольнаяПродукция";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "ИмпортнаяАлкогольнаяПродукцияСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "ИмпортнаяАлкогольнаяПродукцияРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("АлкогольнаяПродукцияВоВскрытойТаре", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("АлкогольнаяПродукцияВоВскрытойТареСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.АлкогольнаяПродукцияВоВскрытойТаре);
			Область.Область("АлкогольнаяПродукцияВоВскрытойТареФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "АлкогольнаяПродукцияВоВскрытойТаре";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ОбъемДАЛ", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%Объем% дал'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Объем%", Объект.ОбъемДАЛ);
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "ОбъемДАЛ";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "ОбъемДАЛСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "ОбъемДАЛРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("Крепость", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%Крепость% % об.'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Крепость%", Объект.Крепость);
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "Крепость";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КрепостьСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КрепостьРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);	
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КиЗГИСМ
	
	Если ГлаваВидна("КиЗГИСМ", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("КиЗГИСМЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМВид", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМВид";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМВидСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМВидРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КиЗГИСМВид;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМСпособВыпускаВОборот", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМСпособВыпускаВОборот";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМСпособВыпускаВОборотСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМСпособВыпускаВОборотРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КиЗГИСМСпособВыпускаВОборот;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМРазмер", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМРазмер";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМРазмерСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМРазмерРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КиЗГИСМРазмер;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);		
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМGTIN", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%КиЗГИСМGTIN%'");
			
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%КиЗГИСМGTIN%", Объект.КиЗГИСМGTIN);
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%КиЗГИСМGTIN%", НСтр("ru = '<не указан>'"));
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМGTIN";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМGTINСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМGTINРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ОбщероссийскиеКлассификаторы
	
	Если ГлаваВидна("ОбщероссийскиеКлассификаторы", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбщероссийскиеКлассификаторыЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Шаблон = НСтр("ru = '%Код% (%Наименование%)'");
		
		Если Справочники.Номенклатура.РазделВиден("КодОКВЭД", СтруктураВидимости) Тогда
			СтрокаОКВЭД = "";
			Если ЗначениеЗаполнено(Объект.КодОКВЭД) Тогда 
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД, "Наименование");
				СтрокаОКВЭД = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКВЭД);
				СтрокаОКВЭД = СтрЗаменить(СтрокаОКВЭД, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКВЭД";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКВЭДСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКВЭДРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКВЭД;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодОКВЭД2", СтруктураВидимости) Тогда
			СтрокаОКВЭД2 = "";
			Если ЗначениеЗаполнено(Объект.КодОКВЭД2) Тогда 
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД2, "Наименование");
				СтрокаОКВЭД2 = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКВЭД2);
				СтрокаОКВЭД2 = СтрЗаменить(СтрокаОКВЭД2, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКВЭД2";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКВЭД2Строка";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКВЭД2Реквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКВЭД2;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодОКП", СтруктураВидимости) Тогда
			СтрокаОКП = "";
			Если ЗначениеЗаполнено(Объект.КодОКП) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКП, "Наименование");
				СтрокаОКП = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКП);
				СтрокаОКП = СтрЗаменить(СтрокаОКП, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКП";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКПСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКПРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКП;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
			
		Если Справочники.Номенклатура.РазделВиден("КодОКПД2", СтруктураВидимости) Тогда
			СтрокаОКПД2 = "";
			Если ЗначениеЗаполнено(Объект.КодОКПД2) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКПД2, "Наименование");
				СтрокаОКПД2 = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКПД2);
				СтрокаОКПД2 = СтрЗаменить(СтрокаОКПД2, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКПД2";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКПД2Строка";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКПД2Реквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКПД2;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодПоКВПД", СтруктураВидимости) Тогда
			СтрокаКодПоКВПД = "";
			Если ЗначениеЗаполнено(Объект.КодПоКВПД) Тогда
				СтрокаКодПоКВПД = Объект.КодПоКВПД;
			КонецЕсли;
			
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодПоКВПД";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодПоКВПДСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодПоКВПДРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаКодПоКВПД;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодВидаНоменклатурнойКлассификации", СтруктураВидимости) Тогда
			СтрокаКВНК = "";
			Если ЗначениеЗаполнено(Объект.КодВидаНоменклатурнойКлассификации) Тогда
				Наименование = Объект.НаименованиеВидаНоменклатурнойКлассификации;
				СтрокаКВНК = СтрЗаменить(Шаблон, "%Код%", Объект.КодВидаНоменклатурнойКлассификации);
				СтрокаКВНК = СтрЗаменить(СтрокаКВНК, "%Наименование%", Наименование);
			КонецЕсли;
			
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодВидаНоменклатурнойКлассификации";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодВидаНоменклатурнойКлассификацииСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодВидаНоменклатурнойКлассификацииРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаКВНК;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодТРУ", СтруктураВидимости) Тогда
			СтрокаКодТРУ = "";
			Если ЗначениеЗаполнено(Объект.КодТРУ) Тогда
				СтрокаКодТРУ = Объект.КодТРУ;
			КонецЕсли;
			
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодТРУ";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодТРУСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодТРУРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаКодТРУ;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	РеквизитыОтключенныеПоФО - Массив из Строка
// 
Процедура РеквизитыОтключенныеПоФО(РеквизитыОтключенныеПоФО) Экспорт
	
	ИспользоватьИмпортныеТовары            = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");
	ИспользоватьИмпортныеЗакупки           = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	ИспользоватьПродажиНаЭкспорт           = ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспорт");
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Дата(1, 1, 1));
	ИспользоватьКлассификаторыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры");
	ИспользоватьСтарыеКлассификаторы       = ПолучитьФункциональнуюОпцию("ИспользованиеСтарыхКлассификаторовОКПиОКВЭД");
	ИспользоватьУчетДрагоценныхМатериалов = Ложь;
	//++ Локализация
	ИспользоватьУчетДрагоценныхМатериалов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	//-- Локализация
	
	ВестиСведенияДляДекларацийПоАлкогольнойПродукции = Ложь;
	ВестиУчетМаркировкиПродукцииВГИСМ      = Ложь;
	//++ Локализация
	ВестиСведенияДляДекларацийПоАлкогольнойПродукции = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ВестиУчетМаркировкиПродукцииВГИСМ      = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	//-- Локализация
	
	НастройкиУчетаНДС = УчетНДСУП.НастройкиУчета();
	ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС = НастройкиУчетаНДС.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС;
	ОперацииСТоварамиОблагаемымиНДСУПокупателя  = НастройкиУчетаНДС.ПродажаТоваровОблагаемыхНДСУПокупателя 
		Или НастройкиУчетаНДС.ПокупкаТоваровОблагаемыхНДСУПокупателя;
	
	Если Не ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС Тогда
		РеквизитыОтключенныеПоФО.Добавить("КодРаздел7ДекларацииНДС");
	КонецЕсли;
	
	Если Не ОперацииСТоварамиОблагаемымиНДСУПокупателя Тогда
		РеквизитыОтключенныеПоФО.Добавить("ОблагаетсяНДСУПокупателя");
	КонецЕсли;
	
	Если Не ВестиСведенияДляДекларацийПоАлкогольнойПродукции Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РеквизитыОтключенныеПоФО, РеквизитыАлкогольнойПродукции());
	КонецЕсли;
	
	Если Не (ИспользоватьИмпортныеЗакупки
		Или ИспользоватьПродажиНаЭкспорт
		Или ВестиУчетМаркировкиПродукцииВГИСМ
		Или ИспользоватьУчетПрослеживаемыхИмпортныхТоваров) Тогда
		
		РеквизитыОтключенныеПоФО.Добавить("КодТНВЭД");
		
	КонецЕсли;
	
	Если Не ИспользоватьИмпортныеТовары Тогда
		РеквизитыОтключенныеПоФО.Добавить("ВестиУчетПоГТД");
	КонецЕсли;
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		РеквизитыОтключенныеПоФО.Добавить("ПрослеживаемыйТовар");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификаторыНоменклатуры Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РеквизитыОтключенныеПоФО, РеквизитыОбщероссийскихКлассификаторов());
		
		РеквизитыОтключенныеПоФО.Добавить("КодВидаНоменклатурнойКлассификации");
		РеквизитыОтключенныеПоФО.Добавить("КодТРУ");
	ИначеЕсли Не ИспользоватьСтарыеКлассификаторы Тогда
		РеквизитыОтключенныеПоФО.Добавить("КодОКВЭД");
		РеквизитыОтключенныеПоФО.Добавить("КодОКП");
	КонецЕсли;
	
	Если Не ИспользоватьУчетДрагоценныхМатериалов Тогда
		РеквизитыОтключенныеПоФО.Добавить("ДрагоценныеМатериалы");
	КонецЕсли;
	
	Если Не ВестиУчетМаркировкиПродукцииВГИСМ Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РеквизитыОтключенныеПоФО, РеквизитыГИСМ());
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ОбязательноОтображаемыеПриСозданииРеквизиты - Массив из Строка
// 	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
// 	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//
Процедура ОбязательноОтображаемыеПриСозданииРеквизиты(ОбязательноОтображаемыеПриСозданииРеквизиты, ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ВестиУчетПоГТД");
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ПрослеживаемыйТовар");
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ПодакцизныйТовар");
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбязательноОтображаемыеПриСозданииРеквизиты, РеквизитыАлкогольнойПродукции());
	КонецЕсли;
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС Тогда
		ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("Артикул");
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура РеквизитыСПереопределеннойОбязательностьюЗаполнения(РеквизитыСПереопределеннойОбязательностьюЗаполнения, ТипНоменклатуры, ОсобенностьУчета, Объект) Экспорт
	
	ОбязательноЗаполнениеКИЗ = Ложь;
	ОбязательноЗаполнениеМех = Ложь;
	//++ Локализация
	Если Не ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ОбязательноЗаполнениеКИЗ = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
		ОбязательноЗаполнениеМех = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха);
	КонецЕсли;
	//-- Локализация
	РеквизитыГИСМ = РеквизитыГИСМ();
	Для Каждого Реквизит Из РеквизитыГИСМ Цикл
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(Реквизит, ОбязательноЗаполнениеКИЗ);
	КонецЦикла;
	Если Объект = Неопределено Тогда
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("КодТНВЭД", ОбязательноЗаполнениеМех);
	Иначе
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("КодТНВЭД", Объект.ПрослеживаемыйТовар Или ОбязательноЗаполнениеМех);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	НеотображаемыеВТаблицеНастроекРеквизиты - Массив из Строка
// 
Процедура НеотображаемыеВТаблицеНастроекРеквизиты(НеотображаемыеВТаблицеНастроекРеквизиты) Экспорт
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОблагаетсяНДПИПоПроцентнойСтавке");
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	НеиспользуемыеДляКонтроляУникальностиРеквизиты - Массив из Строка
// 
Процедура НеиспользуемыеДляКонтроляУникальностиРеквизиты(НеиспользуемыеДляКонтроляУникальностиРеквизиты) Экспорт
	
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ДрагоценныеМатериалы");
	
	Возврат;
	
КонецПроцедуры

Процедура НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы(НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура РекомендуемыеДляКонтроляУникальностиРеквизиты(РекомендуемыеДляКонтроляУникальностиРеквизиты, ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РекомендуемыеДляКонтроляУникальностиРеквизиты, РеквизитыГИСМ());
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ТаблицаРеквизитов - см. Справочники.Номенклатура.ЗависимостьРеквизитовОтТипаНоменклатуры
// 	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
// 	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
// 	ЭтоРеквизитыХарактеристик - Булево
// 
Процедура ЗависимостьРеквизитовОтТипаНоменклатуры(ТаблицаРеквизитов,
												ТипНоменклатуры,
												ОсобенностьУчета,
												ИспользованиеХарактеристик,
												ЭтоРеквизитыХарактеристик) Экспорт
	
	Если ТипЗнч(ИспользованиеХарактеристик) = Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") Тогда
		ИспользоватьХарактеристики = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Иначе
		ИспользоватьХарактеристики = ИспользованиеХарактеристик;
	КонецЕсли;
	
	ЭтоТовар				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоРабота				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	АлкогольнаяПродукция  = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках);
	
	КиЗГИСМ               = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Реквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	Иначе
		Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КиЗГИСМGTIN;
	НоваяСтрока.Использование = ЭтоТовар
								И КиЗГИСМ
								И (Не ИспользоватьХарактеристики
									Или ЭтоРеквизитыХарактеристик);
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыГИСМ = РеквизитыГИСМ();
	Для Каждого Реквизит из РеквизитыГИСМ Цикл
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит      = Реквизиты[Реквизит];
		НоваяСтрока.Использование = ЭтоТовар
									И КиЗГИСМ;
	КонецЦикла;	
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВестиУчетПоГТД;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПрослеживаемыйТовар;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара
								Или ЭтоРабота;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПодакцизныйТовар;
	НоваяСтрока.Использование = ЭтоТовар;
	
	РеквизитыАлкогольнойПродукции = РеквизитыАлкогольнойПродукции();
	Для Каждого Реквизит Из РеквизитыАлкогольнойПродукции Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит      = Реквизиты[Реквизит];
		НоваяСтрока.Использование = ЭтоТовар И АлкогольнаяПродукция;
	КонецЦикла;
	
	#Область ОбщероссийскиеКлассификаторы
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодОКВЭД;
	НоваяСтрока.Использование = Не КиЗГИСМ;
		
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодОКВЭД2;
	НоваяСтрока.Использование = Не КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодОКП;
	НоваяСтрока.Использование = Не (ЭтоРабота
									Или ЭтоУслуга
									Или КиЗГИСМ);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодОКПД2;
	НоваяСтрока.Использование = Не КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодПоКВПД;
	НоваяСтрока.Использование = ЭтоТовар Или ЭтоУслуга Или ЭтоРабота;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодВидаНоменклатурнойКлассификации;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодТРУ;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НаименованиеВидаНоменклатурнойКлассификации;
	НоваяСтрока.Использование = ЭтоТовар;
	#КонецОбласти
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодРаздел7ДекларацииНДС;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоРабота
								Или ЭтоУслуга;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОблагаетсяНДСУПокупателя;
	НоваяСтрока.Использование = ЭтоТовар;
	
	Возврат;
	
КонецПроцедуры

Процедура ИспользованиеЭлементов(ВидимостьЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов) Экспорт
	
	#Область ФункциональныеОпции
		ОплатаЭлектроннымиСертификатамиФСС = Ложь;
	//++ Локализация
		ОплатаЭлектроннымиСертификатамиФСС = ПолучитьФункциональнуюОпцию("ОплатаЭлектроннымиСертификатамиФСС");
	//-- Локализация
	#КонецОбласти
	
	#Область РегламентированныйУчет
	ДрагоценныеМатериалы = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ДрагоценныеМатериалы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "СодержитДрагоценныеМатериалы");
	КонецЕсли;

	ВидимостьЭлементов.Вставить("ДрагоценныеМатериалы", ДрагоценныеМатериалы
														И (РежимПроверкиИспользованияРеквизитов
															Или Не РежимВидимостиПоказатьТолькоВажные
															И ПравоДоступа("Просмотр",
															Метаданные.Справочники.Номенклатура.ТабличныеЧасти.ДрагоценныеМатериалы)));
		
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиДрагоценныеМатериалы", ВидимостьЭлементов.ДрагоценныеМатериалы);
	КонецЕсли;
	
	ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС");
	
	ВидимостьКодаРаздела7ДекларацииНДС = ВидимостьЭлементов.КодРаздел7ДекларацииНДС
		И ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС
		И Не Объект.ОблагаетсяНДСУПокупателя
		И (Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС)
		И (Не РежимВидимостиПоказатьТолькоВажные
			Или РежимПроверкиИспользованияРеквизитов);
		
	ВидимостьЭлементов.Вставить("КодРаздел7ДекларацииНДС", ВидимостьКодаРаздела7ДекларацииНДС);
	
	#КонецОбласти
	
	#Область СведенияПоАлкогольнойПродукции
	
	ВидимостьЭлементов.ОбъемДАЛ = ВидимостьЭлементов.ОбъемДАЛ
									И Не Объект.АлкогольнаяПродукцияВоВскрытойТаре
									И (Не РежимВидимостиПоказатьТолькоВажные
										Или РежимПроверкиИспользованияРеквизитов);
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьЭлементов.Вставить("ДекорацияДекалитры",         ВидимостьЭлементов.ОбъемДАЛ);
		ВидимостьЭлементов.Вставить("РассчитатьОбъемВДекалитрах", ВидимостьЭлементов.ОбъемДАЛ);
		ВидимостьЭлементов.Вставить("ДекорацияПроцентыКрепости",  ВидимостьЭлементов.ВидАлкогольнойПродукции);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщероссийскиеКлассификаторы
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьЭлементов.Вставить("НаименованиеОКВЭД",	ВидимостьЭлементов.КодОКВЭД);
		ВидимостьЭлементов.Вставить("НаименованиеОКВЭД2",	ВидимостьЭлементов.КодОКВЭД2);
		ВидимостьЭлементов.Вставить("НаименованиеОКП",		ВидимостьЭлементов.КодОКП);
		ВидимостьЭлементов.Вставить("НаименованиеОКПД2",	ВидимостьЭлементов.КодОКПД2);
		ВидимостьЭлементов.Вставить("НаименованиеВидаНоменклатурнойКлассификации",
									ВидимостьЭлементов.КодВидаНоменклатурнойКлассификации);
		ВидимостьЭлементов.Вставить("КодТРУ",				ОплатаЭлектроннымиСертификатамиФСС);
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	ИнтеграцияИСУТ.ИспользованиеЭлементов(ВидимостьЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов);
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов) Экспорт
	
	ЗаголовкиЭлементов.Вставить("ВестиУчетПоГТД", ЗаголовокВестиУчетПоГТД());
	
	Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		ЗаголовкиЭлементов.Вставить("ПрослеживаемыйТовар", НСтр("ru='Прослеживаемая работа'"));
	Иначе
		ЗаголовкиЭлементов.Вставить("ПрослеживаемыйТовар", НСтр("ru='Прослеживаемый товар'"));
	КонецЕсли;
	
	//++ Локализация
	ИнтеграцияИСУТ.ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Возвращает заголовок реквизита ВестиУчетПоГТД.
//
// Возвращаемое значение:
//	Строка - заголовок реквизита ВестиУчетПоГТД.
//
Функция ЗаголовокВестиУчетПоГТД() Экспорт
	
	Заголовок = НСтр("ru = 'Импортный товар (учет по ГТД)'");
	
	//++ Локализация
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Дата(1, 1, 1));
	
	Заголовок = ?(ИспользоватьУчетПрослеживаемыхИмпортныхТоваров,
					НСтр("ru = 'Импортный товар (учет по ГТД или РНПТ)'"),
					Заголовок);
	//-- Локализация
	
	Возврат Заголовок;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияНоменклатура(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	Если Объект.КиЗГИСМ Тогда
		ИнтеграцияГИСМУТ.ОбработкаПроверкиЗаполненияGTIN(Объект, Отказ);
	КонецЕсли;
	
	
	//-- Локализация

	Возврат;
	
КонецПроцедуры

Процедура ПараметрыКопированияДополнительныхДанных(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	ВариантПереносаНастроекПоХарактеристикам =
	 НоменклатураСервер.ВариантПереносаНастроекПоХарактеристикам(Объект,
	 		ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
			
	Если ВариантПереносаНастроекПоХарактеристикам = "НеПереносить" Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	ИнтеграцияИСУТ.ДополнитьПараметрыКопированияДополнительныхДанныхНоменклатуры(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания) Экспорт
	
	//++ Локализация
	ИнтеграцияИСУТ.ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания);
	//-- Локализация
	
	Возврат;

КонецПроцедуры

Процедура СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	//++ Локализация
	ИнтеграцияИСУТ.СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик - Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 
Процедура ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик(ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик) Экспорт
	
	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	
	Возврат;
	
КонецПроцедуры

// см. Справочники.Номенклатура.ОпределитьПараметрыЗагрузкиДанныхИзФайла
Процедура ОпределитьПараметрыЗагрузкиДанныхИзФайла(Параметры) Экспорт
	
	//++ Локализация
	Параметры.ТипДанныхКолонки.Вставить("ВидАлкогольнойПродукции",  Новый ОписаниеТипов("СправочникСсылка.ВидыАлкогольнойПродукции"));
	Параметры.ТипДанныхКолонки.Вставить("КодОКВЭД",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторВидовЭкономическойДеятельности"));
	Параметры.ТипДанныхКолонки.Вставить("КодОКП",  Новый ОписаниеТипов("СправочникСсылка.ОбщероссийскийКлассификаторПродукции"));   
	Параметры.ТипДанныхКолонки.Вставить("КиЗГИСМВид",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКиЗГИСМ"));
	Параметры.ТипДанныхКолонки.Вставить("КиЗГИСМСпособВыпускаВОборот",  Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВыпускаВОборотГИСМ"));
	Параметры.ТипДанныхКолонки.Вставить("КиЗГИСМРазмер",  Новый ОписаниеТипов("ПеречислениеСсылка.РазмерыКиЗГИСМ"));
	Параметры.ТипДанныхКолонки.Вставить("КодОКВЭД2",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторОКВЭД2"));
	Параметры.ТипДанныхКолонки.Вставить("КодОКПД2",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторОКПД2"));
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Возвращает текст поля, если не требуется вводить ГТД.
//
// Параметры:
//	ВариантПодсказки - Строка - строковый идентификатор варианта текста поля 'Номер ГТД'.
//
// Возвращаемое значение:
//	Строка - текст поля.
//
Функция ТекстПоляПоГТД(ВариантПодсказки = "") Экспорт
	
	ТекстПоля = НСтр("ru = '<ГТД не используются>'");
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Дата(1, 1, 1));
	
	Если ВариантПодсказки = "НеУказывается" Тогда
		ТекстПоля = НСтр("ru = '<ГТД не указываются>'");
		
	//++ Локализация
		Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
			ТекстПоля = НСтр("ru = '<ГТД / РНПТ не указываются>'");
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ВариантПодсказки) Тогда
		Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
			ТекстПоля = НСтр("ru = '<ГТД / РНПТ не используются>'");
		КонецЕсли;
	//-- Локализация
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

#КонецОбласти

#Область ХарактеристикиНоменклатуры

Процедура ОбработкаПроверкиЗаполненияХарактеристикиНоменклатуры(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ОсобенностьУчета") = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда
		ИнтеграцияГИСМУТ.ОбработкаПроверкиЗаполненияGTIN(Объект, Отказ);
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Процедура ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов, ПараметрыПроверки) Экспорт
	
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат;
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
		
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		
		Если ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда
			
			МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
			ТекстЗапроса =	МодульМенеджера.ТекстЗапросаПроверкиЗаполненияСерий(ПараметрыУказанияСерий);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_НомерЗапроса", "");

		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	ТаблицаСерий.Характеристика КАК Характеристика,
			|	ТаблицаСерий.Серия КАК Серия,
			|	""Серия"" КАК ИмяПоляСерия,
			|	&ИмяПоляУпаковка КАК Упаковка,
			|	&ИмяПоляКоличество КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
			|ИЗ
			|	&ТаблицаСерий КАК ТаблицаСерий
			|ГДЕ
			|	ТаблицаСерий.СтатусУказанияСерий > 0
			|	И НЕ ТаблицаСерий.СтатусУказанияСерий В (&СтатусыСерийСериюМожноУказать)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляУпаковка",
				?(ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено, "ТаблицаСерий.Упаковка","ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ТаблицаСерийДляЗапроса.Серия КАК Серия,
		|	ТаблицаСерийДляЗапроса.ИмяПоляСерия КАК ИмяПоляСерия,
		|	ВЫРАЗИТЬ(ТаблицаСерийДляЗапроса.Серия КАК Справочник.СерииНоменклатуры).НомерКиЗГИСМ КАК НомерКиЗГИСМ
		|ПОМЕСТИТЬ ТоварыСОшибкамиВКоличествеПоКиЗ
		|ИЗ
		|	ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
		|ГДЕ
		|	&ВестиУчетМаркировкиПродукцииВГИСМ	
		|	И ВЫРАЗИТЬ(ТаблицаСерийДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьНомерКИЗГИСМСерии
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСерийДляЗапроса.Серия,
		|	ТаблицаСерийДляЗапроса.ИмяПоляСерия
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаСерийДляЗапроса.КоличествоУпаковок) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСерийДляЗапроса.Номенклатура) КАК НоменклатураПредставление,
		|	ТоварыСОшибкамиВКоличествеПоКиЗ.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
		|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL КАК ОшибкаКоличестваКиЗ,
		|	ТаблицаСерийДляЗапроса.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОшибкамиВКоличествеПоКиЗ КАК ТоварыСОшибкамиВКоличествеПоКиЗ
		|		ПО ТаблицаСерийДляЗапроса.Серия = ТоварыСОшибкамиВКоличествеПоКиЗ.Серия
		|			И ТаблицаСерийДляЗапроса.ИмяПоляСерия = ТоварыСОшибкамиВКоличествеПоКиЗ.ИмяПоляСерия
		|ГДЕ
		|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаСерийДляЗапроса.НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВестиУчетМаркировкиПродукцииВГИСМ", ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ"));
		Запрос.УстановитьПараметр("СтатусыСерийСериюМожноУказать", НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
		
		Если ТипЗнч(ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары]) = Тип("ТаблицаЗначений") Тогда
			ТаблицаСерий = ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Скопировать(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок);
		Иначе
			ТаблицаСерий = ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаСерий", ТаблицаСерий);
		
		Если ПараметрыПроверки.ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ОшибкаКоличестваКиЗ Тогда
					ТекстСообщения = НСтр("ru = 'Номер %Парам1% ГИСМ %НомерКиЗГИСМ% указан для товара ""%НоменклатураПредставление%"" и для других товаров. Нельзя использовать один номер %Парам1% для разных товаров.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Выборка.НоменклатураПредставление);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗГИСМ%", Выборка.НомерКиЗГИСМ);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Номенклатура");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	&ВестиУчетМаркировкиПродукцииВГИСМ
	|		И ТаблицаТоваров.СтатусУказанияСерий = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.Серия КАК Серия,
	|	ТаблицаСерий.Номенклатура КАК Номенклатура,
	|	&ИмяПоляКоличествоСерии КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.Серия КАК Серия,
	|	МАКСИМУМ(ТаблицаСерий.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаСерий.Серия КАК Справочник.СерииНоменклатуры).НомерКиЗГИСМ КАК НомерКиЗГИСМ
	|ПОМЕСТИТЬ ТоварыСОшибкамиВКоличествеПоКиЗ
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|ГДЕ 
	|	&ВестиУчетМаркировкиПродукцииВГИСМ
	|	И ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьНомерКИЗГИСМСерии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСерий.Количество) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСОшибкамиВКоличествеПоКиЗ.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL КАК ОшибкаКоличестваКиЗ
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОшибкамиВКоличествеПоКиЗ КАК ТоварыСОшибкамиВКоличествеПоКиЗ
	|		ПО ТаблицаТоваров.Номенклатура = ТоварыСОшибкамиВКоличествеПоКиЗ.Номенклатура
	|ГДЕ
	|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСерии", "ТаблицаСерий." + ПараметрыУказанияСерий.ИмяПоляКоличество);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ПараметрыУказанияСерий.Свойство("ОтборПроверяемыхСтрок") Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВестиУчетМаркировкиПродукцииВГИСМ", ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ"));
	
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
	
	Если ПараметрыПроверки.ВыдаватьСообщения Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОшибкаКоличестваКиЗ Тогда
				ТекстСообщения = НСтр("ru = 'Номер %Парам1% ГИСМ %НомерКиЗГИСМ% указан для товара ""%НоменклатураПредставление%"" и для других товаров. Нельзя использовать один номер %Парам1% для разных товаров.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Выборка.Номенклатура);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗГИСМ%", Выборка.НомерКиЗГИСМ);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Номенклатура");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОткрытияФормыУказанияСерий(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Экспорт
	
	//++ Локализация
	Если ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий) Тогда
		
		Если НастройкиИспользованияСерий.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
			ТекстИсключения = НСтр("ru = 'Номенклатура вида %ВидНоменклатуры% не является продукцией, которую нужно маркировать для ГИСМ.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ВидНоменклатуры%", НастройкиИспользованияСерий.ВидНоменклатуры);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Тогда
			
			GTINИзКиЗ = ИнтеграцияГИСМУТ.GTINКиЗ(ЗначенияПолейСвязи.НоменклатураКиЗ, ЗначенияПолейСвязи.ХарактеристикаКиЗ);
			
			Если GTINИзКиЗ <> ЗначенияПолейСвязи.GTIN Тогда
				
				ТекстСообщения = НСтр("ru = 'Выбранный %Парам1% предназначен для маркировки товаров с GTIN %GTINИзКиЗ%, его нельзя использовать для маркировки товара с GTIN %GTIN%.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINИзКиЗ%", GTINИзКиЗ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTIN%", ЗначенияПолейСвязи.GTIN);
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПредставлениеТовараВФормеУказанияСерий(ТоварПредставление, ЗначенияПолейСвязи) Экспорт
	
	Если ЗначенияПолейСвязи.Свойство("GTIN")
		И ЗначениеЗаполнено(ЗначенияПолейСвязи.GTIN) Тогда
		
		ШаблонПредставления	= НСтр("ru = '%ТоварПредставление% GTIN: %GTIN%'");
		ТоварПредставление	= СтрЗаменить(ШаблонПредставления, "%ТоварПредставление%", ТоварПредставление);
		ТоварПредставление	= СтрЗаменить(ТоварПредставление, "%GTIN%", ЗначенияПолейСвязи.GTIN)
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Проверить заполнение реквизитов серий.
// 
// Параметры:
// 	Объект - ОбработкаОбъектИмяОбработки - должна содержать:
// 		* Серии - ТабличнаяЧасть
//  МассивНепроверяемыхРеквизитов - Массив - непроверяемых реквизитов
//  ПараметрыПроверки - Структура - параметров проверки
//  Отказ - Булево
Процедура ПроверитьЗаполнениеРеквизитовСерий(Объект, МассивНепроверяемыхРеквизитов, ПараметрыПроверки, Отказ) Экспорт
	
	НастройкиИспользованияСерий        = ПараметрыПроверки.НастройкиИспользованияСерий;
	ПараметрыУказанияСерий             = ПараметрыПроверки.ПараметрыУказанияСерий;
	ЗначенияПолейСвязи                 = ПараметрыПроверки.ЗначенияПолейСвязи;
	
	//++ Локализация
	ЭтоМаркировкаТоваровГИСМ  = ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
	ЭтоМаркировкаОстатковГИСМ = ИнтеграцияГИСМУТ.ЭтоМаркировкаОстатковГИСМ(ПараметрыУказанияСерий);
	ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара = ИнтеграцияГИСМУТ.ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара(НастройкиИспользованияСерий,
			                                                                                                    ПараметрыУказанияСерий);
	ЭтоМаркировкаПерсонифицированнымиКиЗ = ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий,
																					ПараметрыУказанияСерий,
																					ЗначенияПолейСвязи);
	//																				
	Если ЭтоМаркировкаТоваровГИСМ
		Или ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара Тогда
		
		Для каждого СтрТабл Из Объект.Серии Цикл
			
			Если ЭтоМаркировкаТоваровГИСМ
				И Не ЭтоМаркировкаОстатковГИСМ Тогда
				
				Если Не СтрТабл.ЗаполненRFIDTID Тогда
					Если Не ЭтоМаркировкаПерсонифицированнымиКиЗ Тогда
						
						ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не считана RFID-метка. При маркировке неперсонифицированными %Парам1% необходимо обязательно считывать метку и записывать EPC.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "СтатусРаботыRFID");
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
						
					ИначеЕсли Не ЗначениеЗаполнено(СтрТабл.Номер) Тогда
						
						ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не заполнен номер серии. Маркировка осуществляется персонифицированными %Парам1%, поэтому номер серии записан в RFID-метку %Парам1%. Необходимо считать метку RFID-считывателем.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "Номер");
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара Тогда
				
				Если Не СтрТабл.ЗаполненRFIDTID Тогда
					
					ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не считана RFID-метка. Оформляется ввоз из стран ЕАЭС маркируемых товаров, поэтому считывать RFID-метки обязательно.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "СтатусРаботыRFID");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрТабл.Номер)Тогда
					
					ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не заполнен номер серии. Оформляется ввоз из стран ЕАЭС маркируемых товаров, поэтому номер серии записан в RFID-метку %Парам1%. Необходимо считать метку RFID-считывателем.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "Номер");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
				КонецЕсли;
				
			КонецЕсли
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	
	Если НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии
		И НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Серии.Серия КАК Серия,
		|	Серии.НомерСтроки КАК НомерСтроки,
		|	Серии.Номер КАК Номер,
		|	Серии.RFIDTID КАК RFIDTID,
		|	Серии.НомерКиЗГИСМ КАК НомерКиЗГИСМ
		|ПОМЕСТИТЬ Серии
		|ИЗ
		|	&Серии КАК Серии
		|ГДЕ
		|	Серии.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Серии.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Серии КАК Серии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|		ПО (СерииНоменклатуры.ВидНоменклатуры.ИспользоватьRFIDМеткиСерии)
		|			И (Серии.RFIDTID <> """")
		|			И Серии.RFIDTID = СерииНоменклатуры.RFIDTID
		|			И (ВЫБОР
		|				КОГДА СерииНоменклатуры.ВидНоменклатуры.ИспользоватьНомерКИЗГИСМСерии
		|					ТОГДА Серии.НомерКИЗГИСМ <> СерииНоменклатуры.НомерКиЗГИСМ
		|				КОГДА СерииНоменклатуры.ВидНоменклатуры.ИспользоватьНомерСерии
		|					ТОГДА Серии.Номер <> СерииНоменклатуры.Номер
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры",НастройкиИспользованияСерий.ВладелецСерий);
		Запрос.УстановитьПараметр("Серии",Объект.Серии.Выгрузить());
		
		ВыборкаПоОшибкамМеток = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоОшибкамМеток.Следующий() Цикл
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указана информация о серии с привязкой к RFID-метке, по которой уже зарегистрирована другая серия. Попробуйте считать информацию о метке еще раз.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаПоОшибкамМеток.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", ВыборкаПоОшибкамМеток.НомерСтроки, "СтатусРаботыRFID");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	ОбрабатываемаяСтрока = Неопределено;
	
	//++ Локализация
	Если Параметры.НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		
		ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоRFIDTID(ТекущаяМетка.TID);
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
			ОбрабатываемаяСтрока = ИнтеграцияГИСМУТ.ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Процедура РеквизитыСерииИзСтроки(РеквизитыСерии, Знач ВведеннаяСтрока, НастройкиИспользованияСерий) Экспорт
	
	ГоденДо = Неопределено;
	Номер   = Неопределено;
	НомерКиЗГИСМ = Неопределено;
	
	ВведеннаяСтрока = СтрЗаменить(ВведеннаяСтрока, " "+" "," ");
	
	Если НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии Тогда
		СтрокаГоденДо			= "";
		ФорматСтрокиГодности	= "";
		
		Для Каждого ОписаниеРеквизита Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			Если ОписаниеРеквизита.ИмяРеквизита = "ГоденДо" Тогда
				ФорматСтрокиГодности = ОписаниеРеквизита.Формат;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов") Тогда
			ДлинаСтрокиГоденДо = СтрДлина(ФорматСтрокиГодности) - 5; // 5 = СтрДлина("ДФ=''")
		Иначе	
			ДлинаСтрокиГоденДо = СтрДлина(ФорматСтрокиГодности) - 3; // 3 = СтрДлина("ДФ=")
		КонецЕсли;
		
		Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
			ПозицияДо = СтрНайти(ВведеннаяСтрока, НСтр("ru = 'до'"));
			СтрокаГоденДо = СокрЛП(Сред(ВведеннаяСтрока, ПозицияДо+3, ДлинаСтрокиГоденДо));
		Иначе
			СтрокаГоденДо = Прав(СокрЛП(ВведеннаяСтрока), ДлинаСтрокиГоденДо);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии Тогда
		
		Если СтрДлина(СтрокаГоденДо) <> ДлинаСтрокиГоденДо Тогда
			ГоденДо = '00010101';
		КонецЕсли;
		
		Если ГоденДо = Неопределено Тогда
			МассивЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаГоденДо,".");
			
			Если (НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев")
					И МассивЧастей.Количество() < 2)
				Или (НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии <> ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев")
					И МассивЧастей.Количество() < 3) Тогда
				
				ГоденДо = '00010101';
				
			КонецЕсли;
		КонецЕсли;
		
		Если ГоденДо = Неопределено Тогда
			Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии <> ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев") Тогда
				День  = МассивЧастей[0];
				Месяц = МассивЧастей[1];
			Иначе
				День  = "01";
				Месяц = МассивЧастей[0];
				Год   = МассивЧастей[1];
			КонецЕсли;
			
			Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов") Тогда
				ГодЧас =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивЧастей[2]," ");
				Если ГодЧас.Количество() = 2 Тогда
					Год = ГодЧас[0];
					Час = ГодЧас[1];
				ИначеЕсли ГодЧас.Количество() = 1 Тогда
					Год = ГодЧас[0];
					Час = "00";
				Иначе
					Год = "00";
					Час = "00";
				КонецЕсли;	
			Иначе
				Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней") Тогда
					Год = МассивЧастей[2];
				КонецЕсли;
				Час = "00";
			КонецЕсли;
			
			Если СтрНайти(Час, ":") > 0 Тогда
				Час = Лев(Час, СтрНайти(Час, ":") - 1);
			КонецЕсли;
			
			ДатаСтрокой = "20" + Год + Месяц + День + Час + "0000";
			
			ТипДата = Новый ОписаниеТипов("Дата");
			ГоденДо = ТипДата.ПривестиЗначение(ДатаСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			Номер = СтрЗаменить(ВведеннаяСтрока," " + НСтр("ru = 'до'") + " " + СтрокаГоденДо, "");
		Иначе
			Номер = ВведеннаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		Если НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
			ПозицияКиЗ = СтрНайти(ВРег(Номер),НСтр("ru = 'КИЗ'"));
			НомерКиЗГИСМ = ВРег(СокрЛП(Сред(Номер, ПозицияКиЗ + 4)));
			Номер = СокрЛП(Лев(Номер,ПозицияКиЗ-2));
		Иначе
			Если ЗначениеЗаполнено(ГоденДо) Тогда
				НомерКиЗГИСМ = СтрЗаменить(ВведеннаяСтрока," " + НСтр("ru = 'до'") + " " + СтрокаГоденДо, "");
			Иначе
				НомерКиЗГИСМ = ВведеннаяСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Номер <> Неопределено Тогда
		РеквизитыСерии.Номер = Номер;
	КонецЕсли;
	
	Если ГоденДо <> Неопределено Тогда
		РеквизитыСерии.ГоденДо = ГоденДо;
	КонецЕсли;
	
	Если НомерКиЗГИСМ  <> Неопределено Тогда
		РеквизитыСерии.НомерКиЗГИСМ = НомерКиЗГИСМ;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ШтрихкодыПоТипам - см. ШтрихкодированиеНоменклатурыСервер.СтруктураПоТипамШтрихкодов
// 	ШтрихКод - см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода
// 	
// Возвращаемое значение:
// 	Булево - это типизированный штрих-код
// 
Функция ОтнестиШтрихкодКТипу(ШтрихкодыПоТипам, ШтрихКод) Экспорт
	
	ЭтоТипизированныйШтрихКод = Ложь;
	
	//++ Локализация
	Если Не ШтрихкодыПоТипам.Свойство("АкцизныеМарки") Тогда
		ШтрихкодыПоТипам.Вставить("АкцизныеМарки", Новый Массив);
	КонецЕсли;
	Если Не ШтрихкодыПоТипам.Свойство("КиЗ") Тогда
		ШтрихкодыПоТипам.Вставить("КиЗ", Новый Массив);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
		И ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(ШтрихКод.Штрихкод) Тогда
		
		ШтрихкодыПоТипам.АкцизныеМарки.Добавить(ШтрихКод);
		ЭтоТипизированныйШтрихКод = Истина;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(ШтрихКод.Штрихкод) Тогда
		
		ШтрихкодыПоТипам.КиЗ.Добавить(ШтрихКод);
		ЭтоТипизированныйШтрихКод = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ЭтоТипизированныйШтрихКод; 
	
КонецФункции

#КонецОбласти

#Область ПолитикиУчетаСерий

Процедура ПередЗаписьюПолитикиУчетаСерий(Объект) Экспорт
	
	Если Объект.УказыватьПриМаркировкеПродукцииДляГИСМ Тогда
		Объект.ДляСклада = Истина;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Возвращает массив областей поиска товаров.
//
// Параметры:
// 	ОбластиПоиска - Массив - Массив метаданных областей поиска товаров.
// 	Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана функция поиска.
// 	ПараметрыПоиска - Структура
//
Процедура ОписанияОбластейПоиска(ОбластиПоиска, Форма, ПараметрыПоиска) Экспорт
	
	//++ Локализация
	
	Если ПараметрыПоиска.ИмяСпискаПоиска = "Номенклатура" Тогда
				
		Если ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры") Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользованиеСтарыхКлассификаторовОКПиОКВЭД") Тогда
				
				ОписаниеОбластиПоиска                             = ПодборТоваровСервер.ОписаниеОбластиПоиска();
				ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции;
				ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
				"ВЫБРАТЬ ПЕРВЫЕ 999
				|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК Значение,
				|	""ОбщероссийскийКлассификаторПродукции"" КАК Метаданные
				|ИЗ
				|	Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
				|ГДЕ
				|	ОбщероссийскийКлассификаторПродукции.Код = &УсловиеСравнения";
				ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
				|		ПО Номенклатура.КодОКП = ОбщероссийскийКлассификаторПродукции.Ссылка
				|ГДЕ
				|	ОбщероссийскийКлассификаторПродукции.Ссылка В(&ОбщероссийскийКлассификаторПродукции)";
				ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
			
			КонецЕсли;
			
			ОписаниеОбластиПоиска                             = ПодборТоваровСервер.ОписаниеОбластиПоиска();
			ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.КлассификаторОКПД2;
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
			"ВЫБРАТЬ ПЕРВЫЕ 999
			|	КлассификаторОКПД2.Ссылка КАК Значение,
			|	""КлассификаторОКПД2"" КАК Метаданные
			|ИЗ
			|	Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
			|ГДЕ
			|	КлассификаторОКПД2.Код = &УсловиеСравнения";
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
			|		ПО Номенклатура.КодОКПД2 = КлассификаторОКПД2.Ссылка
			|ГДЕ
			|	КлассификаторОКПД2.Ссылка В(&КлассификаторОКПД2)";
			ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура НастроитьФормуИОбновитьКарточку(Форма) Экспорт
	
	//++ Локализация
	ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ОсобенностьУчета);
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина)
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		ИнтеграцияИСУТ.ЗаполнитьЗначениеПолейПоВидамУпаковок(Форма);
		ИнтеграцияИСУТКлиентСервер.НастройкаЭлементовВидаУпаковки(Форма, Истина);
		ИнтеграцияИСУТ.ЗаполнитьПредставлениеТипаНоменклатуры(Форма);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

//++ Локализация

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости)
	
	Если ИмяГлавы = "РегламентированныйУчет" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("ПодакцизныйТовар", СтруктураВидимости)
					Или Справочники.Номенклатура.РазделВиден("ВестиУчетПоГТД", СтруктураВидимости)
					Или Справочники.Номенклатура.РазделВиден("ПрослеживаемыйТовар", СтруктураВидимости)
					Или Справочники.Номенклатура.РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "СведенияОбАлкогольнойПродукции" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("ВидАлкогольнойПродукции", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "КиЗГИСМ" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("КиЗГИСМВид", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ОбщероссийскиеКлассификаторы" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("КодОКВЭД", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодОКВЭД2", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодОКП", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодОКПД2", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодПоКВПД", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодВидаНоменклатурнойКлассификации", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодТРУ", СтруктураВидимости);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//-- Локализация

Функция ОсобенностиУчетаВЕТИС()
	Особенности = Новый Массив;
	Особенности.Добавить("ПодконтрольнаяПродукцияВЕТИС");
	//++ Локализация
	Для Каждого ВидПродукции Из ИнтеграцияИСКлиентСервер.ВидыПродукцииПодконтрольныеВЕТИС() Цикл
		Особенность = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ЗначениеЗаполнено(Особенность) Тогда
			Особенности.Добавить(XMLСтрока(Особенность));
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
	Возврат СтрСоединить(Особенности, ",");
КонецФункции

Функция РеквизитыАлкогольнойПродукции()
	
	РеквизитыАлкогольнойПродукции = Новый Массив;
	
	РеквизитыАлкогольнойПродукции.Добавить("ВидАлкогольнойПродукции");
	РеквизитыАлкогольнойПродукции.Добавить("ИмпортнаяАлкогольнаяПродукция");
	РеквизитыАлкогольнойПродукции.Добавить("ОбъемДАЛ");
	РеквизитыАлкогольнойПродукции.Добавить("Крепость");
	РеквизитыАлкогольнойПродукции.Добавить("АлкогольнаяПродукцияВоВскрытойТаре");
	
	Возврат РеквизитыАлкогольнойПродукции;
	
КонецФункции

Функция РеквизитыГИСМ(ИсключитьНепроверяемыеРеквизиты = Ложь)
	
	РеквизитыГИСМ = Новый Массив;
	
	РеквизитыГИСМ.Добавить("КиЗГИСМВид");
	РеквизитыГИСМ.Добавить("КиЗГИСМСпособВыпускаВОборот");
	РеквизитыГИСМ.Добавить("КиЗГИСМРазмер");
	
	Если Не ИсключитьНепроверяемыеРеквизиты Тогда
		РеквизитыГИСМ.Добавить("КиЗГИСМGTIN");
	КонецЕсли;
	
	Возврат РеквизитыГИСМ;
	
КонецФункции

Функция РеквизитыОбщероссийскихКлассификаторов()
	
	РеквизитыОбщероссийскихКлассификаторов = Новый Массив;
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКВЭД");
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКВЭД2");
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКП");
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКПД2");
	
	Возврат РеквизитыОбщероссийскихКлассификаторов;
	
КонецФункции

Процедура ЗаполнитьТекстМаркируемаяПродукция(ПолеЗапроса, ПутьКПолюНоменклатура) Экспорт
	
	//++ Локализация
	ПолеЗапроса = ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по признаку маркируемой продукции.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоПризнакуМаркируемойПродукцииПоПараметрам(Форма) Экспорт

	//++ Локализация
	ОтборПоМаркируемойПродукции = Неопределено;
	Форма.Параметры.Отбор.Свойство("МаркируемаяПродукция", ОтборПоМаркируемойПродукции);
	Форма.Параметры.Отбор.Удалить("ВидНоменклатуры");
	
	Если Не ЗначениеЗаполнено(ОтборПоМаркируемойПродукции) Или Не ТипЗнч(ОтборПоМаркируемойПродукции) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина; 

	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;

	Если ОтборПоМаркируемойПродукции Тогда
		ПодборТоваровСервер.ДобавитьЭлементОтбора(
						ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.ВидыНоменклатуры), 
						"ОсобенностьУчета", ОсобенностьУчета, ВидСравненияКомпоновкиДанных.ВСписке, 
						"ОтборОсобенностьУчета");

		ПодборТоваровСервер.ДобавитьЭлементОтбора(
						ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
						"ОсобенностьУчета", ОсобенностьУчета, ВидСравненияКомпоновкиДанных.ВСписке, 
						"ОтборОсобенностьУчета");
	Иначе
		ПодборТоваровСервер.ДобавитьЭлементОтбора(
						ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.ВидыНоменклатуры), 
						"ОсобенностьУчета", ОсобенностьУчета, ВидСравненияКомпоновкиДанных.НеВСписке, 
						"ОтборОсобенностьУчета");

		ПодборТоваровСервер.ДобавитьЭлементОтбора(
						ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
						"ОсобенностьУчета", ОсобенностьУчета, ВидСравненияКомпоновкиДанных.НеВСписке, 
						"ОтборОсобенностьУчета");
	КонецЕсли;
	
	//-- Локализация
	Возврат;

КонецПроцедуры

// Это маркируемая продукция.
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - проверяемый товар
// 
// Возвращаемое значение:
//  Булево - Истина - это маркируемая продукция
Функция ЭтоМаркируемаяПродукция(Номенклатура) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	ВидПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ОсобенностьУчета");
	
	Если ЗначениеЗаполнено(ВидПродукции) 
		И Не ВидПродукции = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета Тогда
			
		Результат = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(
											ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		
	КонецЕсли;
	
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Особенность учета по маркируемой продукции.
// 
// Возвращаемое значение:
//  Массив из см. ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции - Особенность учета по маркируемой продукции
Функция ОсобенностьУчетаПоМаркируемойПродукции() Экспорт

	ОсобенностьУчета   = Новый Массив;
	//++ Локализация
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	//-- Локализация

	Возврат ОсобенностьУчета
	
КонецФункции

#Область СертификатыНоменклатуры

// Устанавливает условное оформление поля 'СтатусРосаккредитации' в таблице списка сертификатов номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//		* УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление компановки данных элементов формы.
//
Процедура УстановитьУсловноеОформлениеСпискаСертификатовНоменклатуры(Форма) Экспорт
	
	//++ Локализация
	Элементы			= Форма.Элементы;
	УсловноеОформление	= Форма.УсловноеОформление;
	
	//
	ЗначениеОтбора = Новый СписокЗначений;
	ЗначениеОтбора.ЗагрузитьЗначения(НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации());
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатыНоменклатурыСтатусРосаккредитации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СертификатыНоменклатуры.СтатусРосаккредитации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстСправочнойНадписи);
	
	//
	ЗначениеОтбора = Новый СписокЗначений;
	ЗначениеОтбора.ЗагрузитьЗначения(НоменклатураКлиентСерверЛокализация.НедействительныеСтатусыРосаккредитации());
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатыНоменклатурыСтатусРосаккредитации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СертификатыНоменклатуры.СтатусРосаккредитации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	//-- Локализация
	
КонецПроцедуры

// Возвращает сведения сертификата по данным реестра сервиса ФСА.
//
// Параметры:
//	Номер - Строка - номер сертификата номенклатуры.
//	ДатаНачалаСрокаДействия - Дата - дата начала срока действия сертификата номенклатуры.
//	ДатаОкончанияСрокаДействия - Дата - дата окончания срока действия сертификата номенклатуры.
//	ТипСертификата - Строка - тип сертификата номенклатуры.
//	СервисДоступен - Булево - признак доступности сервиса аккредитации.
//
// Возвращаемое значение:
//	Структура - сведения сертификата по данным реестра сервиса ФСА, включающие свойства:
//		* ТекстОшибки - Строка - текст ошибки.
//
Функция ЗапроситьИнформациюУРосаккредитации(Номер, ДатаНачалаСрокаДействия, ДатаОкончанияСрокаДействия, ТипСертификата, СервисДоступен) Экспорт
	
	Ответ = Новый Структура("ТекстОшибки", "");
	//++ Локализация
	Если СервисДоступен Тогда
		ПараметрыЗапроса = РаботаСНоменклатуройСлужебный.НовыеПараметрыДокументаАккредитации();
		ПараметрыЗапроса.Номер = СокрЛП(Номер);
		ПараметрыЗапроса.ВидДокумента = ?(ТипСертификата = НСтр("ru = 'Сертификат соответствия'"),
											"Сертификат",
											"Декларация");
		ПараметрыЗапроса.ДатаРегистрации = ДатаНачалаСрокаДействия;
		ПараметрыЗапроса.ДатаОкончанияДействия = ДатаОкончанияСрокаДействия;
		
		ДанныеКлючиСтруктуры = "Номер, ДатаРегистрации, Статус, ДатаПоследнегоИзменения, ДатаОкончанияДействия, 
		|НаименованиеЗаявителя, ИНН, ОГРН, НаименованиеИзготовителя, НаименованиеПродукции, 
		|Гиперссылка, ТНВЭД, ОКПД2, ТехническиеРегламенты, Штрихкоды";
		
		ОтветСервиса = Новый Структура();
		ОтветСервиса.Вставить("Статус", "");
		ОтветСервиса.Вставить("Данные", Новый Структура(ДанныеКлючиСтруктуры));
		
		УстановитьПривилегированныйРежим(Истина);
		РаботаСНоменклатуройСлужебный.ПолучитьДанныеДокументаАккредитации(ОтветСервиса, ПараметрыЗапроса);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ОтветСервиса.Статус = "Выполнено" Тогда
			Ответ = ОтветСервиса.Данные;
			Ответ.Вставить("ТекстОшибки", "");
		Иначе
			Ответ.Вставить("ТекстОшибки", ОтветСервиса.Статус);
		КонецЕсли;
	Иначе
		Ответ.Вставить("ТекстОшибки", НСтр("ru = 'Сервис недоступен'"));
	КонецЕсли;
	//-- Локализация

	Возврат Ответ;
	
КонецФункции

// Вызывается из соответствующего обработчика справочника сертификатов номенклатуры.
//
// Параметры:
//	Объект - СправочникОбъект.СертификатыНоменклатуры - обрабатываемый объект.
//	ОбъектКопирования - СправочникОбъект.СертификатыНоменклатуры - исходный справочник, который является источником копирования.
//
Процедура ПриКопировании_СертификатыНоменклатуры(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Объект.ПубликуетсяВСервисах					= Ложь;
	Объект.СтатусРосаккредитации				= Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка();
	Объект.ДатаОбновленияСтатусаРосаккредитации	= Дата(1,1,1);
	Объект.СсылкаНаСертификатРосаккредитации	= "";
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса набора данных СКД отчета 'ТоварыСИстекающимиСертификатами'.
//
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных отчета 'ТоварыСИстекающимиСертификатами'.
//
Процедура УстановитьТекстЗапросаОтчетаТоварыСИстекающимиСертификатами(СхемаКомпоновкиДанных) Экспорт
	
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Склад			КАК Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура		КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика	КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Серия			КАК Серия,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК СвободныйОстаток
	|ПОМЕСТИТЬ ОстаткиТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|			Номенклатура.ВестиУчетСертификатовНоменклатуры) КАК ТоварыНаСкладахОстатки
	|
	|ГДЕ
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиДействияСертификатов.ВидНоменклатуры		КАК ВидНоменклатуры,
	|	ОбластиДействияСертификатов.Номенклатура		КАК Номенклатура,
	|	ОбластиДействияСертификатов.Характеристика		КАК Характеристика,
	|	ОбластиДействияСертификатов.Серия				КАК Серия,
	|	ДанныеСертификатов.ТипСертификата				КАК ТипСертификата
	|ПОМЕСТИТЬ ТипыСертификатовПоОбластямДействия
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК ДанныеСертификатов
	|		ПО ОбластиДействияСертификатов.СертификатНоменклатуры = ДанныеСертификатов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипыСертификатовПоОбластямДействия.ВидНоменклатуры	КАК ВидНоменклатуры,
	|	ТипыСертификатовПоОбластямДействия.Номенклатура		КАК Номенклатура,
	|	ТипыСертификатовПоОбластямДействия.Характеристика	КАК Характеристика,
	|	ТипыСертификатовПоОбластямДействия.Серия			КАК Серия,
	|	ДанныеСертификатов.Ссылка							КАК СертификатНоменклатуры,
	|	ВЫРАЗИТЬ(ТипыСертификатовПоОбластямДействия.ТипСертификата КАК СТРОКА(50)) КАК ТипСертификата,
	|	ВЫБОР
	|		КОГДА ДанныеСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеСертификатов.Бессрочный
	|						ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|					ИНАЧЕ ДанныеСертификатов.ДатаОкончанияСрокаДействия
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ												КАК ОкончаниеСрокаДействия,
	|	ДанныеСертификатов.СтатусРосаккредитации			КАК СтатусРосаккредитации,
	|	ВЫБОР
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.Действует)
	|			ТОГДА 0
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.Продлен)
	|			ТОГДА 1
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.Возобновлен)
	|			ТОГДА 2
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.СведенияИзменены)
	|			ТОГДА 3
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.Выдан)
	|			ТОГДА 4
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.Новый)
	|			ТОГДА 5
	|		КОГДА ДанныеСертификатов.СтатусРосаккредитации В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка))
	|			ТОГДА 7
	|		ИНАЧЕ 6
	|	КОНЕЦ												КАК ПриоритетСтатусаРосаккредитации
	|ПОМЕСТИТЬ ОбластиДействияСертификатовПоТипам
	|ИЗ
	|	ТипыСертификатовПоОбластямДействия КАК ТипыСертификатовПоОбластямДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатов
	|		ПО ТипыСертификатовПоОбластямДействия.ВидНоменклатуры = ОбластиДействияСертификатов.ВидНоменклатуры
	|			И (ТипыСертификатовПоОбластямДействия.Номенклатура = ОбластиДействияСертификатов.Номенклатура
	|					И ТипыСертификатовПоОбластямДействия.Характеристика = ОбластиДействияСертификатов.Характеристика
	|					И ТипыСертификатовПоОбластямДействия.Серия = ОбластиДействияСертификатов.Серия
	|				ИЛИ ТипыСертификатовПоОбластямДействия.Номенклатура = ОбластиДействияСертификатов.Номенклатура
	|					И ТипыСертификатовПоОбластямДействия.Характеристика = ОбластиДействияСертификатов.Характеристика
	|					И ОбластиДействияСертификатов.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				ИЛИ ТипыСертификатовПоОбластямДействия.Номенклатура = ОбластиДействияСертификатов.Номенклатура
	|					И ОбластиДействияСертификатов.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И ОбластиДействияСертификатов.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				ИЛИ ОбластиДействияСертификатов.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ОбластиДействияСертификатов.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И ОбластиДействияСертификатов.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|			И ТипыСертификатовПоОбластямДействия.ТипСертификата = ОбластиДействияСертификатов.СертификатНоменклатуры.ТипСертификата
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК ДанныеСертификатов
	|		ПО ОбластиДействияСертификатов.СертификатНоменклатуры = ДанныеСертификатов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбластиДействияСертификатов.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ОбластиДействияСертификатов.Номенклатура КАК Номенклатура,
	|	ОбластиДействияСертификатов.Характеристика КАК Характеристика,
	|	ОбластиДействияСертификатов.Серия КАК Серия,
	|	ОбластиДействияСертификатов.ТипСертификата КАК ТипСертификата,
	|	МАКСИМУМ(ОбластиДействияСертификатов.ОкончаниеСрокаДействия) КАК ОкончаниеСрокаДействия,
	|	МИНИМУМ(ОбластиДействияСертификатов.ПриоритетСтатусаРосаккредитации) КАК ПриоритетСтатусаРосаккредитации
	|ПОМЕСТИТЬ ОбластиДействияСертификатовПоТипамСгруппированная
	|ИЗ
	|	ОбластиДействияСертификатовПоТипам КАК ОбластиДействияСертификатов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбластиДействияСертификатов.ВидНоменклатуры,
	|	ОбластиДействияСертификатов.Номенклатура,
	|	ОбластиДействияСертификатов.Характеристика,
	|	ОбластиДействияСертификатов.Серия,
	|	ОбластиДействияСертификатов.ТипСертификата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбластиДействияСертификатовСгруппированная.ВидНоменклатуры			КАК ВидНоменклатуры,
	|	ОбластиДействияСертификатовСгруппированная.Номенклатура				КАК Номенклатура,
	|	ОбластиДействияСертификатовСгруппированная.Характеристика			КАК Характеристика,
	|	ОбластиДействияСертификатовСгруппированная.Серия					КАК Серия,
	|	ОбластиДействияСертификатовСгруппированная.ТипСертификата			КАК ТипСертификата,
	|	ОбластиДействияСертификатовСгруппированная.ОкончаниеСрокаДействия	КАК ОкончаниеСрокаДействия,
	|	МАКСИМУМ(ОбластиДействияСертификатов.СтатусРосаккредитации)			КАК СтатусРосаккредитации,
	|	ОбластиДействияСертификатовСгруппированная.ПриоритетСтатусаРосаккредитации КАК ПриоритетСтатусаРосаккредитации
	|ПОМЕСТИТЬ ИтоговаяТаблица
	|ИЗ
	|	ОбластиДействияСертификатовПоТипамСгруппированная КАК ОбластиДействияСертификатовСгруппированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбластиДействияСертификатовПоТипам КАК ОбластиДействияСертификатов
	|		ПО ОбластиДействияСертификатовСгруппированная.ВидНоменклатуры = ОбластиДействияСертификатов.ВидНоменклатуры
	|			И ОбластиДействияСертификатовСгруппированная.Номенклатура = ОбластиДействияСертификатов.Номенклатура
	|			И ОбластиДействияСертификатовСгруппированная.Характеристика = ОбластиДействияСертификатов.Характеристика
	|			И ОбластиДействияСертификатовСгруппированная.Серия = ОбластиДействияСертификатов.Серия
	|			И ОбластиДействияСертификатовСгруппированная.ТипСертификата = ОбластиДействияСертификатов.ТипСертификата
	|			И ОбластиДействияСертификатовСгруппированная.ПриоритетСтатусаРосаккредитации = ОбластиДействияСертификатов.ПриоритетСтатусаРосаккредитации
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбластиДействияСертификатовСгруппированная.ВидНоменклатуры,
	|	ОбластиДействияСертификатовСгруппированная.Номенклатура,
	|	ОбластиДействияСертификатовСгруппированная.Характеристика,
	|	ОбластиДействияСертификатовСгруппированная.Серия,
	|	ОбластиДействияСертификатовСгруппированная.ТипСертификата,
	|	ОбластиДействияСертификатовСгруппированная.ОкончаниеСрокаДействия,
	|	ОбластиДействияСертификатовСгруппированная.ПриоритетСтатусаРосаккредитации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Склад									КАК Склад,
	|	ИтоговаяТаблица.ВидНоменклатуры							КАК ВидНоменклатуры,
	|	ИтоговаяТаблица.Номенклатура							КАК Номенклатура,
	|	ЕСТЬNULL(ОстаткиТоваров.Характеристика, ИтоговаяТаблица.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ОстаткиТоваров.Серия, ИтоговаяТаблица.Серия)	КАК Серия,
	|	ИтоговаяТаблица.ТипСертификата							КАК ТипСертификата,
	|	ИтоговаяТаблица.ОкончаниеСрокаДействия					КАК ОкончаниеСрокаДействия,
	|	ИтоговаяТаблица.ОкончаниеСрокаДействия					КАК Состояние,
	|	ИтоговаяТаблица.СтатусРосаккредитации					КАК СтатусРосаккредитации,
	|	ИтоговаяТаблица.ПриоритетСтатусаРосаккредитации			КАК ПриоритетСтатусаРосаккредитации
	|ИЗ
	|	ИтоговаяТаблица КАК ИтоговаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваровНаСкладах КАК ОстаткиТоваров
	|		ПО ИтоговаяТаблица.Номенклатура = ОстаткиТоваров.Номенклатура
	|			И (ИтоговаяТаблица.Характеристика = ОстаткиТоваров.Характеристика
	|				ИЛИ ИтоговаяТаблица.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ИтоговаяТаблица.Серия = ОстаткиТоваров.Серия
	|				ИЛИ ИтоговаяТаблица.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|{ГДЕ
	|	(ИтоговаяТаблица.ОкончаниеСрокаДействия >= &ДатаСкрыватьСертификаты),
	|	(ИтоговаяТаблица.ОкончаниеСрокаДействия < &НедействительныеНаДату)}";
	
	СхемаКомпоновкиДанных.НаборыДанных.СертификатыНоменклатуры.Запрос = ТекстЗапроса;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика формы элемента справочника сертификатов номенклатуры.
//
// Параметры:
//	Форма - см. Справочник.СертификатыНоменклатуры.Форма.ФормаЭлемента
Процедура ПриСозданииНаСервере_СертификатыНоменклатуры_ФормаЭлемента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЛокализацияРФ = ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	
	Элементы.ГруппаРосаккредитацияШапка.Видимость = ЛокализацияРФ;
	Элементы.ГруппаРосаккредитацияИТСНеПодключен.Видимость = ЛокализацияРФ;
	Элементы.НадписьЗаполнитьИзРосаккредитации.Видимость = ЛокализацияРФ;
	Элементы.ЗаполнитьПоДаннымРосаккредитации.Видимость = ЛокализацияРФ;
	
	//++ Локализация
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.СертификатыНоменклатуры) Тогда
		Элементы.ЗаполнитьПоДаннымРосаккредитации.Доступность = Ложь;
		Элементы.НадписьЗаполнитьИзРосаккредитации.Доступность = Ложь;
	КонецЕсли;
	
	Форма.ИТСПодключен = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика формы списка справочника сертификатов номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка сертификатов номенклатуры.
//
Процедура ПриСозданииНаСервере_СертификатыНоменклатуры_ФормаСписка(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	УстановитьВидимостьЭлементовФормыСпискаСертификатовНоменклатуры(Элементы);
	//++ Локализация
	ЗаполнитьСписокВыбораСтатусРосаккредитацииОтбор(Элементы.СтатусРосаккредитацииОтбор);
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовФормыСпискаСертификатовНоменклатуры(Элементы)
	
	ЛокализацияРФ = ПолучитьФункциональнуюОпцию("ЛокализацияРФ");
	
	Если ЛокализацияРФ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтатусРосаккредитацииОтбор.Видимость = Ложь;
	Элементы.ОбновитьСтатусыРосаккредитации.Видимость = Ложь;
	Элементы.СертификатыНоменклатурыСтатусРосаккредитации.Видимость = Ложь;
	
КонецПроцедуры

// Параметры:
//	ПараметрыЗаполнения - см. НоменклатураКлиентСервер.ПараметрыУстановкиСтатусаСертификатовНоменклатурыПоУмолчанию.
//
Процедура ДополнитьПараметрыУстановкиСтатусаСертификатовНоменклатуры(ПараметрыЗаполнения) Экспорт
	
	//++ Локализация
	ПараметрыЗаполнения.Вставить("ДействительныеСтатусыРосаккредитации",
								НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации());
	ПараметрыЗаполнения.Вставить("ВариантПроверкиСтатусовСертификатовНоменклатурыРосаккредитации",
								Константы.ВариантПроверкиСтатусовСертификатовНоменклатурыРосаккредитации.Получить());
	//-- Локализация
	
КонецПроцедуры

// Параметры:
//	СертификатОбъект - СправочникОбъект.СертификатыНоменклатуры - объект элемента справочника сертификатов номенклатуры.
//	ПараметрыЗаполнения - см. НоменклатураКлиентСервер.ПараметрыУстановкиСтатусаСертификатовНоменклатурыПоУмолчанию.
//	ОбработатьОбъект - Булево - признак необходимости изменения объекта.
//
Процедура УстановитьСтатусСертификатовНоменклатуры(СертификатОбъект, ПараметрыЗаполнения, ОбработатьОбъект) Экспорт
	
	//++ Локализация
	ДействительныеСтатусыРосаккредитации = ПараметрыЗаполнения.ДействительныеСтатусыРосаккредитации;
	ВариантПроверкиСтатусовСертификатовНоменклатурыРосаккредитации = ПараметрыЗаполнения.ВариантПроверкиСтатусовСертификатовНоменклатурыРосаккредитации;
	
	Если ОбработатьОбъект
		И СертификатОбъект.Статус <> ПараметрыЗаполнения.Статус Тогда
		
		СтатусДействует = ПараметрыЗаполнения.Статус = Перечисления.СтатусыСертификатовНоменклатуры.Действующий;
		СтатусРосаккредитацииДействует = ДействительныеСтатусыРосаккредитации.Найти(СертификатОбъект.СтатусРосаккредитации) <> Неопределено;
		
		Если СтатусДействует <> СтатусРосаккредитацииДействует
			И СертификатОбъект.СтатусРосаккредитации <> Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка()
			И ВариантПроверкиСтатусовСертификатовНоменклатурыРосаккредитации
				= Перечисления.ВариантыПроверкиСтатусовСертификатовНоменклатурыРосаккредитации.ПроверятьИОбновлятьСтатусДействия Тогда
			
			ОбработатьОбъект = Ложь;
			
			ТекстСообщения = НСтр("ru='Статус сертификата ""%1"" не соответствует статусу по данным Росаккредитации.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
									Строка(СертификатОбъект.Ссылка));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СертификатОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Параметры:
//	ПараметрыПроверки - Структура - параметры проверки.
//
Процедура ДополнитьПараметрыПроверкиСоответствияСтатусовСертификатаНоменклатуры(ПараметрыПроверки) Экспорт
	
	//++ Локализация
	ПараметрыПроверки.Вставить("ДанныеСообщенияПоСертификату", ДанныеСообщенияПоСертификату());
	ПараметрыПроверки.Вставить("ДействительныеСтатусыРосаккредитации",
								НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации());
	//-- Локализация
	
КонецПроцедуры

// Параметры:
//	ДанныеСертификата - ВыборкаИзРезультатаЗапроса - данные сертификата номенклатуры.
//	ТекстПримечания - Строка - информационный текст состояния соответствия статусов сертификата номенклатуры.
//	ПараметрыПроверки - Структура - признак необходимости изменения объекта.
//
Процедура ПроверитьСоответствиеСтатусовСертификатаНоменклатуры(ДанныеСертификата, ТекстПримечания, ПараметрыПроверки) Экспорт
	
	//++ Локализация
	ДанныеСообщенияПоСертификату = ПараметрыПроверки.ДанныеСообщенияПоСертификату;
	ДействительныеСтатусыРосаккредитации = ПараметрыПроверки.ДействительныеСтатусыРосаккредитации;
	
	Если ЗначениеЗаполнено(ДанныеСертификата.СтатусРосаккредитации) Тогда
		
		Если ДействительныеСтатусыРосаккредитации.Найти(ДанныеСертификата.СтатусРосаккредитации) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСообщенияПоСертификату, ДанныеСертификата);
			
			ТекстПримечания = СообщитьПользователюИнформациюПоСертификату(
								"НесоответствиеСтатусаРосаккредитации",
								ДанныеСообщенияПоСертификату);
		КонецЕсли;
		
	Иначе
		Если ДанныеСертификата.ТипСертификата = НСтр("ru = 'Сертификат соответствия'")
			Или ДанныеСертификата.ТипСертификата = НСтр("ru = 'Декларация о соответствии'") Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеСообщенияПоСертификату, ДанныеСертификата);
			
			ТекстПримечания = СообщитьПользователюИнформациюПоСертификату(
								"НеЗаполненСтатусРосаккредитации",
								ДанныеСообщенияПоСертификату);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

Процедура ЗаполнитьСписокВыбораСтатусРосаккредитацииОтбор(ЭлементОтбора)
	
	СписокВыбора = ЭлементОтбора.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("ВсеДействующие", НСтр("ru = 'Все действующие'"));
	СписокВыбора.Добавить("ВсеНеДействующие", НСтр("ru = 'Все недействующие'"));
	
	Для Каждого ЗначениеСтатуса Из Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации Цикл
		СписокВыбора.Добавить(ЗначениеСтатуса);
	КонецЦикла;
	
КонецПроцедуры

// Выполняется обновление статусов Росаккредитации сертификатов номенклатуры.
// Вызывается при запуске регламентного задания 'ОбновлениеСтатусовСертификатовНоменклатурыРосаккредитации'.
//
Процедура ОбновитьСтатусыСертификатовНоменклатурыРосаккредитации() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеСтатусовСертификатовНоменклатурыРосаккредитации);
	
	РезультатОбновленияСтатусовРосаккредитации();
	
КонецПроцедуры

// Выполняется обновление статусов Росаккредитации сертификатов номенклатуры.
// Вызывается при интерактивном выполнении команды пользователем.
//
// Возвращаемое значение:
//	Булево - результат выполнения обновления статусов.
//				ИСТИНА - признак успешного обновления.
//
Функция ОбновитьСтатусыРосаккредитации() Экспорт
	
	РезультатОбновления = РезультатОбновленияСтатусовРосаккредитации(Истина);
	
	Возврат РезультатОбновления.СтатусыОбновлены;
	
КонецФункции

// Возвращает информацию о процессе обновления статусов Росаккредитации сертификатов номенклатуры.
//
// Параметры:
//	ВсегдаОбновлятьСтатусы - Булево - признак необходимости выполнения обновления вне зависимости от настройки
//										варианта проверки и обновления статусов Росаккредитации сертификатов
//										номенклатуры.
//
// Возвращаемое значение:
//	Структура - коллекция результата выполнения обновления, которые содержит следующие свойства:
//		* СтатусыОбновлены - Булево - признак выполнения обновления.
//		* КоличествоОбработанныхДанных - Число - количество обработанных записей справочника Сертификаты номенклатуры.
//
Функция РезультатОбновленияСтатусовРосаккредитации(ВсегдаОбновлятьСтатусы = Ложь)
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("СтатусыОбновлены", Ложь);
	РезультатОбновления.Вставить("КоличествоОбработанныхДанных", 0);
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат РезультатОбновления;
	КонецЕсли;
	
	ВариантыПроверкиСтатусов	= Перечисления.ВариантыПроверкиСтатусовСертификатовНоменклатурыРосаккредитации;
	НастройкаПроверкиСтатусов	= Константы.ВариантПроверкиСтатусовСертификатовНоменклатурыРосаккредитации.Получить();
	
	Если Не (ВсегдаОбновлятьСтатусы
		Или НастройкаПроверкиСтатусов <> ВариантыПроверкиСтатусов.НеПроверять) Тогда
		
		Возврат РезультатОбновления;
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборкиДанных.ИмяВременнойТаблицы = "ЗаблокированныеДанные";
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Неопределено,
		"Справочник.СертификатыНоменклатуры",
		МенеджерВременныхТаблиц,
		ПараметрыВыборкиДанных);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСертификатов.Ссылка								КАК Ссылка,
	|	ДанныеСертификатов.Номер								КАК Номер,
	|	ДанныеСертификатов.ТипСертификата						КАК ТипСертификата,
	|	ДанныеСертификатов.ДатаНачалаСрокаДействия				КАК ДатаНачалаСрокаДействия,
	|	ДанныеСертификатов.ДатаОкончанияСрокаДействия			КАК ДатаОкончанияСрокаДействия,
	|	ДанныеСертификатов.СтатусРосаккредитации				КАК СтатусРосаккредитации,
	|	ДанныеСертификатов.ДатаОбновленияСтатусаРосаккредитации	КАК ДатаОбновленияСтатусаРосаккредитации,
	|	ДанныеСертификатов.СсылкаНаСертификатРосаккредитации	КАК СсылкаНаСертификатРосаккредитации
	|ИЗ
	|	Справочник.СертификатыНоменклатуры КАК ДанныеСертификатов
	|ГДЕ
	|	ДанныеСертификатов.ТипСертификата В(&ТипыСертификатов)
	|	И НЕ ДанныеСертификатов.Ссылка В
	|		(ВЫБРАТЬ
	|			ЗаблокированныеДанные.Ссылка КАК Ссылка
	|		ИЗ
	|			ЗаблокированныеДанные КАК ЗаблокированныеДанные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСертификатов.ДатаОбновленияСтатусаРосаккредитации";
	
	ТипыСертификатов = Новый Массив;
	ТипыСертификатов.Добавить(НСтр("ru = 'Сертификат соответствия'"));
	ТипыСертификатов.Добавить(НСтр("ru = 'Декларация о соответствии'"));
	
	Запрос.УстановитьПараметр("ТипыСертификатов", ТипыСертификатов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		РезультатОбновления.СтатусыОбновлены = Истина;
		
		Возврат РезультатОбновления;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КоличествоОшибок = 0;
	ОбновлятьСтатусДействия = НастройкаПроверкиСтатусов = ВариантыПроверкиСтатусов.ПроверятьИОбновлятьСтатусДействия;
	ДействительныеСтатусыРосаккредитации = НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации();
	СервисДоступен = РаботаСНоменклатурой.СервисАккредитацииДоступен();
	
	Пока Выборка.Следующий() Цикл
		
		Ответ = ЗапроситьИнформациюУРосаккредитации(Выборка.Номер,
													Выборка.ДатаНачалаСрокаДействия,
													Выборка.ДатаОкончанияСрокаДействия,
													Выборка.ТипСертификата,
													СервисДоступен);
		
		Если ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			КоличествоОшибок = ВнестиИзмененияПоРосаккредитацииВСертификатНоменклатуры(Выборка.Ссылка,
				ОбновлятьСтатусДействия,
				ДействительныеСтатусыРосаккредитации,
				Ответ.Статус,
				Ответ.Гиперссылка,
				КоличествоОшибок);
		ИначеЕсли Ответ.ТекстОшибки = "НеНайдено" Тогда
			КоличествоОшибок = ВнестиИзмененияПоРосаккредитацииВСертификатНоменклатуры(Выборка.Ссылка,
				ОбновлятьСтатусДействия,
				ДействительныеСтатусыРосаккредитации,
				"",
				"",
				КоличествоОшибок);
		ИначеЕсли Ответ.ТекстОшибки = "ПринятоВОбработку" Тогда
			// Корректно - сервис мог не успеть ответить.
		Иначе
			ИмяСобытия = НСтр("ru = 'Обновление статусов Росаккредитации сертификатов номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию о статусе Росаккредитации по сертификату ""%1"", по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
										Выборка.Ссылка,
										Ответ.ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.СертификатыНоменклатуры,,
				ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбновления.КоличествоОбработанныхДанных = Выборка.Количество();
	РезультатОбновления.СтатусыОбновлены = КоличествоОшибок <> РезультатОбновления.КоличествоОбработанныхДанных;
	
	Возврат РезультатОбновления;
	
КонецФункции

Функция ВнестиИзмененияПоРосаккредитацииВСертификатНоменклатуры(Сертификат, 
	ОбновлятьСтатусДействия, ДействительныеСтатусыРосаккредитации, Статус = "", Гиперссылка = "", КоличествоОшибок = 0)
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.СертификатыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Сертификат);
		
		Блокировка.Заблокировать();
		
		СправочникОбъект = Сертификат.ПолучитьОбъект(); // СправочникОбъект.СертификатыНоменклатуры -
		СправочникОбъект.СтатусРосаккредитации = СтатусРосаккредитацииИзСтроки(Статус);
		СправочникОбъект.СсылкаНаСертификатРосаккредитации = Гиперссылка;
		СправочникОбъект.ДатаОбновленияСтатусаРосаккредитации = ТекущаяДатаСеанса();
		
		Если ОбновлятьСтатусДействия Тогда
			СтатусДействует = СправочникОбъект.Статус = Перечисления.СтатусыСертификатовНоменклатуры.Действующий;
			СтатусРосаккредитацииДействует = ДействительныеСтатусыРосаккредитации.Найти(СправочникОбъект.СтатусРосаккредитации) <> Неопределено;
			
			Если СтатусДействует <> СтатусРосаккредитацииДействует Тогда
				СправочникОбъект.Статус = ?(СтатусРосаккредитацииДействует,
											Перечисления.СтатусыСертификатовНоменклатуры.Действующий,
											Перечисления.СтатусыСертификатовНоменклатуры.Недействующий);
			КонецЕсли;
		КонецЕсли;
		
		СправочникОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		КоличествоОшибок = КоличествоОшибок + 1;
		
		ИмяСобытия = НСтр("ru = 'Обновление статусов Росаккредитации сертификатов номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать информацию о статусе Росаккредитации по сертификату ""%1"", по причине: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
									Сертификат,
									ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.СертификатыНоменклатуры,,
			ТекстСообщения);
	КонецПопытки;
	
	Возврат КоличествоОшибок;
	
КонецФункции

// Возвращает значение статуса Росаакредитации по данным строкового описания.
//
// Параметры:
//	СтатусСтрокой - Строка - строковое представление статуса Росаккредитации.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СтатусыСертификатовНоменклатурыРосаккредитации - статус Росаккредитации.
//
Функция СтатусРосаккредитацииИзСтроки(СтатусСтрокой) Экспорт
	
	СтатусСтрокой = НРег(СтатусСтрокой);
	
	Если СтатусСтрокой = НРег("Действует") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Действует;
	ИначеЕсли СтатусСтрокой = НРег("Исключен из реестра") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ИсключенИзРеестра;
	ИначеЕсли СтатусСтрокой = НРег("ИсключенИзРеестра") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ИсключенИзРеестра;
	ИначеЕсли СтатусСтрокой = НРег("Аннулирован") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Аннулирован;
	ИначеЕсли СтатусСтрокой = НРег("Аннулирована") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Аннулирован;
	ИначеЕсли СтатусСтрокой = НРег("Сведения изменены, требуется отправка") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.СведенияИзменены;
	ИначеЕсли СтатусСтрокой = НРег("СведенияИзмененыТребуетсяОтправка") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.СведенияИзменены;
	ИначеЕсли СтатусСтрокой = НРег("Выдан") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Выдан;
	ИначеЕсли СтатусСтрокой = НРег("Выдана") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Выдан;
	ИначеЕсли СтатусСтрокой = НРег("Недействителен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Недействителен;
	ИначеЕсли СтатусСтрокой = НРег("Недействительна") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Недействителен;
	ИначеЕсли СтатусСтрокой = НРег("Испорчен (утрачен)") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ИспорченИлиУтрачен;
	ИначеЕсли СтатусСтрокой = НРег("ИспорченУтрачен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ИспорченИлиУтрачен;
	ИначеЕсли СтатусСтрокой = НРег("Использован") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Использован;
	ИначеЕсли СтатусСтрокой = НРег("Новый") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Новый;
	ИначеЕсли СтатусСтрокой = НРег("Новая") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Новый;
	ИначеЕсли СтатусСтрокой = НРег("Отменен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Отменен;
	ИначеЕсли СтатусСтрокой = НРег("Отменена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Отменен;
	ИначеЕсли СтатусСтрокой = НРег("Частично приостановлен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ЧастичноПриостановлен;
	ИначеЕсли СтатусСтрокой = НРег("ЧастичноПриостановлен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ЧастичноПриостановлен;
	ИначеЕсли СтатусСтрокой = НРег("Приостановлен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Приостановлен;
	ИначеЕсли СтатусСтрокой = НРег("Приостановлена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Приостановлен;
	ИначеЕсли СтатусСтрокой = НРег("Прекращен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Прекращен;
	ИначеЕсли СтатусСтрокой = НРег("Прекращена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Прекращен;
	ИначеЕсли СтатусСтрокой = НРег("Архивный") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Архивный;
	ИначеЕсли СтатусСтрокой = НРег("Архивная") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Архивный;
	ИначеЕсли СтатусСтрокой = НРег("Черновик") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Черновик;
	ИначеЕсли СтатусСтрокой = НРег("Удален") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Удален;
	ИначеЕсли СтатусСтрокой = НРег("Удалена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Удален;
	ИначеЕсли СтатусСтрокой = НРег("Направлено уведомление заявителю о прекращении декларации") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.НаправленоУведомлениеЗаявителюОПрекращении;
	ИначеЕсли СтатусСтрокой = НРег("НаправленоУведомлениеЗаявителюОПрекращении") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.НаправленоУведомлениеЗаявителюОПрекращении;
	ИначеЕсли СтатусСтрокой = НРег("Выдано предписание") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ВыданоПредписание;
	ИначеЕсли СтатусСтрокой = НРег("ВыданоПредписание") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ВыданоПредписание;
	ИначеЕсли СтатусСтрокой = НРег("Продлен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Продлен;
	ИначеЕсли СтатусСтрокой = НРег("Продлена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Продлен;
	ИначеЕсли СтатусСтрокой = НРег("Отправлен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Отправлен;
	ИначеЕсли СтатусСтрокой = НРег("Отправлена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Отправлен;
	ИначеЕсли СтатусСтрокой = НРег("Возобновлен") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Возобновлен;
	ИначеЕсли СтатусСтрокой = НРег("Возобновлена") Тогда
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.Возобновлен;
	Иначе
		Возврат Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ДанныеСообщенияПоСертификату()
	
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("СертификатНоменклатуры", Справочники.СертификатыНоменклатуры.ПустаяСсылка());
	ДанныеСообщения.Вставить("СтатусРосаккредитации", Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка());
	ДанныеСообщения.Вставить("ДатаОбновленияСтатусаРосаккредитации", Дата(1, 1, 1));
	
	Возврат ДанныеСообщения;
	
КонецФункции

Функция СообщитьПользователюИнформациюПоСертификату(КонтекстСообщения, ДанныеСообщения)
	
	ТекстПримечания = "";
	
	Если КонтекстСообщения = "НесоответствиеСтатусаРосаккредитации" Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат %1 %2 по данным Росаккредитации по состоянию на %3'"),
					Строка(ДанныеСообщения.СертификатНоменклатуры),
					НРег(ДанныеСообщения.СтатусРосаккредитации),
					Формат(ДанныеСообщения.ДатаОбновленияСтатусаРосаккредитации, "ДЛФ=D"));
		ТекстПримечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 по данным Росаккредитации по состоянию на %2'"),
							ДанныеСообщения.СтатусРосаккредитации,
							Формат(ДанныеСообщения.ДатаОбновленияСтатусаРосаккредитации, "ДЛФ=D"));
		
		ОбщегоНазначения.СообщитьПользователю(Текст, ДанныеСообщения.СертификатНоменклатуры);
	ИначеЕсли КонтекстСообщения = "НеЗаполненСтатусРосаккредитации" Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для сертификата %1 не заполнен статус по данным Росаккредитации. Требуется обновить статус Росаккредитации.'"),
					Строка(ДанныеСообщения.СертификатНоменклатуры));
		ТекстПримечания = НСтр("ru = 'Не заполнен статус по данным Росаккредитации. Требуется обновить статус Росаккредитации.'");
		
		ОбщегоНазначения.СообщитьПользователю(Текст, ДанныеСообщения.СертификатНоменклатуры);
	КонецЕсли;
	
	Возврат ТекстПримечания;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти
