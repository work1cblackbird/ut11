#Область ПрограммныйИнтерфейс

// Заполняет реквизит "Цена" в товарной табличной части.
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа. Содержит в том числе:
// 			* НомерСтроки			- Число - Номер строки
// 			* Номенклатура			- СправочникСсылка.Номенклатура - Номенклатура
// 			* Характеристика		- СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры
// 			* Количество			- Число - Количество
// 			* КоличествоУпаковок	- Число - Количество упаковок
// 	ВыделенныеСтроки - Массив, Неопределено - Массив выделенных строк, 
// 												если Неопределено, то будут заполнены ВСЕ строки.
// 	ПараметрыЗаполнения - см. НовыйПараметрыЗаполненияЗаполнитьЦены 
// 	СтруктураДействий - см. ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ.СтруктураДействий
// 		
// Возвращаемое значение:
//   Булево - Истина, если цены успешно заполнены.
//
Функция ЗаполнитьЦены(ТабличнаяЧасть,
	ВыделенныеСтроки = Неопределено, 
	ПараметрыЗаполнения = Неопределено,
	СтруктураДействий = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ПараметрыЗаполнения.Дата);
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Параметры заполнения не указаны'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	ИмяКолонкиУпаковка = "Упаковка";
	Если ПараметрыЗаполнения.Свойство("ИмяКолонкиУпаковка") Тогда
		ИмяКолонкиУпаковка = ПараметрыЗаполнения.ИмяКолонкиУпаковка;
	КонецЕсли;
	
	// Получение структуры параметров по умолчанию
	Параметры = НовыйПараметрыЗаполненияЗаполнитьЦены();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не ЗначениеЗаполнено(Параметры.Соглашение) И Не ЗначениеЗаполнено(Параметры.ВидЦены) И Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
		Возврат ЦеныЗаполнены;
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.Валюта) Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	ДополнительныеКолонки  = "";
	ЕстьКоличествоУпаковок = Ложь;
	ЕстьСерия              = Ложь;
	ЕстьКодСтроки          = Ложь;
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		ЕстьКоличествоУпаковок = ТабличнаяЧасть.Колонки.Найти("КоличествоУпаковок") <> Неопределено;
	Иначе
		ЕстьКоличествоУпаковок = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки.Найти("КоличествоУпаковок") <> Неопределено;
	КонецЕсли;
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		ЕстьКодСтроки = ТабличнаяЧасть.Колонки.Найти("КодСтроки") <> Неопределено
		                И ТабличнаяЧасть.Колонки.Найти("ЗаказКлиента") <> Неопределено;
		ЕстьСерия = ТабличнаяЧасть.Колонки.Найти("Серия") <> Неопределено;
	Иначе
		ТЧДляПроверки = ТабличнаяЧасть.Выгрузить(Новый Массив); // ТаблицаЗначений
		ЕстьКодСтроки = ТЧДляПроверки.Колонки.Найти("КодСтроки") <> Неопределено
		                И ТЧДляПроверки.Колонки.Найти("ЗаказКлиента") <> Неопределено;
		ЕстьСерия = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки.Найти("Серия") <> Неопределено;
	КонецЕсли;
	Если ЕстьКоличествоУпаковок Тогда
		ДополнительныеКолонки = ?(Параметры.РассчитыватьНаборы, "," + "Количество, КоличествоУпаковок, НоменклатураНабора, ХарактеристикаНабора", "");
	Иначе
		ДополнительныеКолонки = ?(Параметры.РассчитыватьНаборы, "," + "Количество, НоменклатураНабора, ХарактеристикаНабора", "");
	КонецЕсли;
	
	Если ЕстьСерия Тогда
		ДополнительныеКолонки = ""+ ДополнительныеКолонки + ", Серия";
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика, " + ИмяКолонкиУпаковка + ДополнительныеКолонки,
		Параметры.КолонкиПоЗначению,
		Параметры.ДругиеИменаКолонок);
		
	МаксимальныйИндексСтроки = 0;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.НомерСтроки > МаксимальныйИндексСтроки Тогда
			МаксимальныйИндексСтроки = СтрокаТЧ.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	КоэффициентыПропорциональностиРасчетаЦенНаборов = Неопределено;
	ДанныеПоКоличествуНаборов = Неопределено;
	Если Параметры.РассчитыватьНаборы Тогда
		
		Если НЕ ЕстьКоличествоУпаковок Тогда
			Таблица.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
			Для Каждого СтрокаТЧ Из Таблица Цикл
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
			КонецЦикла;
		КонецЕсли;
		
		КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(Таблица, Параметры);
		ДанныеПоКоличествуНаборов = КоличествоНаборов(Таблица);
		
		Наборы = КоэффициентыПропорциональностиРасчетаЦенНаборов.Скопировать();
		Наборы.Свернуть("НоменклатураНабора, ХарактеристикаНабора");
		Индекс = МаксимальныйИндексСтроки;
		Для Каждого Строка Из Наборы Цикл
			
			Индекс = Индекс + 1;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.НомерСтроки         = Индекс;
			НоваяСтрока.Номенклатура        = Строка.НоменклатураНабора;
			НоваяСтрока.Характеристика      = Строка.ХарактеристикаНабора;
			НоваяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЦикла;
		
		Таблица.Колонки.Удалить("Количество");
		Таблица.Колонки.Удалить("КоличествоУпаковок");
		
	КонецЕсли;
	
	Если ИспользуетсяЦенообразование25 И Не ЕстьСерия Тогда
		Таблица.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Валюта", Параметры.Валюта);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	
	ИменаКолонок = ИменаКолонокВременнойТаблицыТоваров();
	ИменаКолонок.ИмяКолонкиНомерСтроки = 	"НомерСтроки";
	ИменаКолонок.ИмяКолонкиСерия = 			"Серия";
	ИменаКолонок.ИмяКолонкиУпаковка = 		ИмяКолонкиУпаковка;
	
	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваров2_5("", "втТаблицаТовары", ИменаКолонок);
	Иначе
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваров("", "втТаблицаТовары", ИменаКолонок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ВидЦены) Тогда
		
		Запрос.УстановитьПараметр("ВидЦены", Параметры.ВидЦены);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		
		Если ИспользуетсяЦенообразование25 Тогда
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен2_5("втТаблицаЦены", "втТаблицаТовары", Истина);
		Иначе
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦены", "втТаблицаТовары", Истина);
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	втТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	втТаблицаЦены.ВидЦены КАК ПолеВидЦеныНаЗамену,
		|	втТаблицаЦены.Цена КАК ПолеЦенаНаЗамену
		|ИЗ
		|	втТаблицаТовары КАК втТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦены КАК втТаблицаЦены
		|		ПО (втТаблицаЦены.НомерСтроки = втТаблицаТовары.НомерСтроки)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолеЦенаНаЗамену", Параметры.ПолеЦена);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолеВидЦеныНаЗамену", Параметры.ПолеВидЦены);
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Соглашение) Тогда
		
		Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
		Запрос.УстановитьПараметр("НалогообложениеНДС", Параметры.НалогообложениеНДС);
		Запрос.УстановитьПараметр("ВозвращатьМногооборотнуюТару", Параметры.ВозвращатьМногооборотнуюТару);
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());

		Если ИспользуетсяЦенообразование25 Тогда
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению2_5("втТаблицаТовары");
		Иначе
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению("втТаблицаЦеныПоСоглашению", "втТаблицаТовары");
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦеныПоВидуЦен", "втТаблицаЦеныПоСоглашению", Ложь);
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	втТаблицаЦеныПоСоглашению.НомерСтроки КАК НомерСтроки,
			|	втТаблицаЦеныПоСоглашению.ВидЦены КАК ВидЦены,
			|	втТаблицаЦеныПоСоглашению.СтавкаНДС КАК СтавкаНДС,
			|	втТаблицаЦеныПоСоглашению.СрокПоставки КАК СрокПоставки,
			|	ВЫБОР
			|		КОГДА втТаблицаЦеныПоСоглашению.Цена = 0
			|			ТОГДА втТаблицаЦеныПоВидуЦен.Цена
			|		ИНАЧЕ втТаблицаЦеныПоСоглашению.Цена
			|	КОНЕЦ КАК Цена
			|ИЗ
			|	втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
			|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦеныПоВидуЦен КАК втТаблицаЦеныПоВидуЦен
			|		ПО (втТаблицаЦеныПоВидуЦен.НомерСтроки = втТаблицаЦеныПоСоглашению.НомерСтроки)";
		КонецЕсли;
		
		УчетНДСУП.УстановитьПараметрыЗапросаСтавкиНДС(Запрос.Параметры, Параметры.Организация, Параметры.Дата);
		
	ИначеЕсли Параметры.Свойство("Партнер") И ЗначениеЗаполнено(Параметры.Партнер) Тогда
		
		Запрос.УстановитьПараметр("Партнер",		Параметры.Партнер);
		Запрос.УстановитьПараметр("Организация", 	?(Параметры.Свойство("Организация"), Параметры.Организация, Справочники.Организации.ПустаяСсылка()));
		Запрос.УстановитьПараметр("НалогообложениеНДС", ?(Параметры.Свойство("НалогообложениеНДС"), Параметры.НалогообложениеНДС, Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()));
		Запрос.УстановитьПараметр("ВозвращатьМногооборотнуюТару", ?(Параметры.Свойство("ВозвращатьМногооборотнуюТару"), Параметры.ВозвращатьМногооборотнуюТару, Ложь));
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());

		Если ИспользуетсяЦенообразование25 Тогда
			Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦенПоПартнеру2_5("втТаблицаТовары");
		КонецЕсли;
		
		УчетНДСУП.УстановитьПараметрыЗапросаСтавкиНДС(Запрос.Параметры, Параметры.Организация, Параметры.Дата);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Расчет цен комплектующих набора
		Если Выборка.НомерСтроки > МаксимальныйИндексСтроки Тогда
			
			НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			Отбор = Новый Структура;
			Отбор.Вставить("НоменклатураНабора", НайденныеСтроки[0].Номенклатура);
			Отбор.Вставить("ХарактеристикаНабора", НайденныеСтроки[0].Характеристика);
			
			НайденныеСтроки = КоэффициентыПропорциональностиРасчетаЦенНаборов.НайтиСтроки(Отбор); // Массив из СтрокаТабличнойЧасти
			
			КоличествоНаборов = 1;
			ДанныеПоКоличествуНаборовНайденныеСтроки = ДанныеПоКоличествуНаборов.НайтиСтроки(Отбор);
			Если ДанныеПоКоличествуНаборовНайденныеСтроки.Количество() > 0 Тогда
				КоличествоНаборов = ДанныеПоКоличествуНаборовНайденныеСтроки[0].КоличествоМинимум;
			КонецЕсли;
			
			ОбщаяСтоимость = 0;
			СуммаКРаспределению = Выборка.Цена * КоличествоНаборов;
			
			СлужебнаяТЧ = Новый ТаблицаЗначений;
			СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
			СлужебнаяТЧ.Колонки.Добавить("Количество");
			СлужебнаяТЧ.Колонки.Добавить("Стоимость");
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				
				СтрокаТЧ = ТабличнаяЧасть[ТекущаяСтрока.НомерСтроки - 1];

				Если ЕстьКодСтроки И СтрокаТЧ.КодСтроки <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Стоимость = ТекущаяСтрока.Цена;
				Количество = ?(ЕстьКоличествоУпаковок, СтрокаТЧ.КоличествоУпаковок, СтрокаТЧ.Количество);
				
				НоваяСтрока = СлужебнаяТЧ.Добавить();
				НоваяСтрока.СтрокаТЧ   = СтрокаТЧ;
				НоваяСтрока.Стоимость  = Стоимость;
				НоваяСтрока.Количество = Количество;
				
				ОбщаяСтоимость = ОбщаяСтоимость + ТекущаяСтрока.Цена;
				
			КонецЦикла;
			СлужебнаяТЧ.Сортировать("Количество УБЫВ");
			
			НомерСтроки = 0;
			КоличествоСтрок = СлужебнаяТЧ.Количество();
			Для Каждого ТекущаяСтрока Из СлужебнаяТЧ Цикл
				
				СтрокаТЧ = ТекущаяСтрока.СтрокаТЧ;
				Стоимость = ТекущаяСтрока.Стоимость;
				Количество = ТекущаяСтрока.Количество;
				
				НомерСтроки = НомерСтроки + 1;
				
				ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
				
				Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
					СтрокаТЧ.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
				Иначе
					СтрокаТЧ.Цена = 0;
				КонецЕсли;
				
				ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
				СуммаКРаспределению = СуммаКРаспределению - СтрокаТЧ.Цена * Количество;
				
				Погрешность = 0;
				Если НомерСтроки = КоличествоСтрок Тогда
					Погрешность = СуммаКРаспределению;
				КонецЕсли;
				
				Если СтруктураДействий <> Неопределено Тогда
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
				КонецЕсли;
				
				Если СтруктураДействий <> Неопределено Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
			Если ТипЗнч(ТабличнаяЧасть) <> Тип("ТаблицаЗначений") Тогда
				СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
			Иначе
				НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаТЧ = НайденныеСтроки[0];
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
			Если СтруктураДействий <> Неопределено Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Устанавливаем условное оформление для вида цены.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Содержит данную форму 
//  ИмяПоляВводаВидаЦены - Строка - Наименование элемента формы, содержащего вид цены,
//                                  если оно отличается от "ТоварыВидЦены".
//  ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВидЦены",
//                             если он отличается от "Объект.Товары.ВидЦены".
//
Процедура УстановитьУсловноеОформлениеВидовЦен(Форма,
											   ИмяПоляВводаВидаЦены = "ТоварыВидЦены",
											   ПутьКПолюОтбора = "Объект.Товары.ВидЦены") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляВводаВидаЦены]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<произвольная>'"));	
	
КонецПроцедуры

// Устанавливаем условное оформление для поля сумма с НДС 
//		в зависимости от флага "ЦенаВключаетНДС".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Содержит данную форму 
//	ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС".
//
Процедура УстановитьУсловноеОформлениеЦенаВключаетНДС(
	Форма,
	ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляВводаСуммыСНДС]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Возвращает цену по переданному отбору.
//
// Параметры:
//		ПараметрыОтбора - см. НовыйПараметрыОтбораПолучитьЦенуПоОтбору 
//
// Возвращаемое значение:
// 		Число - Цена
//
Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Если Параметр.Ключ = "Характеристика" И ТипЗнч(Параметр.Значение) <> Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			Запрос.УстановитьПараметр(Параметр.Ключ, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		ИначеЕсли Параметр.Ключ = "Серия" И ТипЗнч(Параметр.Значение) <> Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			Запрос.УстановитьПараметр(Параметр.Ключ, Справочники.СерииНоменклатуры.ПустаяСсылка());
		Иначе		
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ПараметрыОтбора.Дата) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен) КАК ВидЦены,
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(&Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
		|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ КАК ХарактеристикаЦО,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ ТаблицаТовары.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО
		|ПОМЕСТИТЬ ТаблицаОтбора
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|			ТОГДА ВЫБОР
		|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
		|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
		|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО,
		|		СерияЦО, УпаковкаЦО, ВидЦены) В
		|		(ВЫБРАТЬ
		|			Т.Номенклатура,
		|			Т.ХарактеристикаЦО,
		|			Т.СерияЦО,
		|			Т.УпаковкаЦО,
		|			Т.ВидЦены
		|		ИЗ
		|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
		|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
		|		ПО ИСТИНА
		|";
	Иначе		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	* ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
		|					ТОГДА 
		|						(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
		|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
		|				ВидЦены = ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен)
		|				И Номенклатура = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)
		|				И Характеристика = ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры)
		|) КАК ЦеныНоменклатурыСрезПоследних
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
		|ПО 
		|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
		|	ПО ИСТИНА
		|";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Запрос.Текст = ТекстЗапроса;	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Окр(Выборка.Цена, 2);
	КонецЕсли;
	
КонецФункции

// Получить текст запроса получения цен для вставки в прочие запросы.
// 
// Параметры:
//  ИмяВременнойТаблицыТоваров - Строка - Имя временной таблицы товаров вышестоящего запроса (таблица товаров на входе)
//  ИмяВременнойТаблицыЦен - Строка - Имя временной таблицы цен на выходе
//  ИменаКолонок - см. ИменаКолонокВременнойТаблицыТоваров
//  ДатаЗапроса - Неопределено, Дата - Дата запроса, для получении информации какой вариант ценообразования применить
// 
// Возвращаемое значение:
//  Строка - Получить текст запроса получения цен для вставки
Функция ПолучитьТекстЗапросаПолученияЦенДляВставки(ИмяВременнойТаблицыТоваров, 
													ИмяВременнойТаблицыЦен = Неопределено, 
													ИменаКолонок = Неопределено, 
													ДатаЗапроса = Неопределено) Экспорт

	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДатаЗапроса);
	
	Если ИменаКолонок = Неопределено Тогда
		ИменаКолонок = ИменаКолонокВременнойТаблицыТоваров();
	КонецЕсли;
	
	ВидЦеныКакПараметр = ПустаяСтрока(ИменаКолонок.ИмяКолонкиВидЦены);

	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаВременнойТаблицыТоваров2_5(ИмяВременнойТаблицыТоваров, "втТаблицаТоварыДляСвязи", ИменаКолонок);
		ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаВременнойТаблицыЦен2_5(ИмяВременнойТаблицыЦен, "втТаблицаТоварыДляСвязи", ВидЦеныКакПараметр);
	Иначе
		ТекстЗапроса = ПолучитьТекстЗапросаВременнойТаблицыТоваров(ИмяВременнойТаблицыТоваров, "втТаблицаТоварыДляСвязи", ИменаКолонок);
		ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаВременнойТаблицыЦен(ИмяВременнойТаблицыЦен, "втТаблицаТоварыДляСвязи", ВидЦеныКакПараметр);
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПакетнаяОбработкаТабличныхЧастей

// Добавляет запрос в пакет запросов для получения данных, необходимых для получения цены передачи продукции давальцу.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
Процедура ДополнитьТекстЗапросаЗаполнитьЦенуПередачиПродукцииДавальцу(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия, ЗначениеСвойства;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьЦенуПередачиПродукцииДавальцу",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда

		ВидЦеныПередачи = Неопределено;
		ВидЦеныПередачи = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦеныПередачи,
							Новый Структура("ИспользоватьПриПередачеПродукцииДавальцу", Истина));
	
		Если ЗначениеЗаполнено(ВидЦеныПередачи) Тогда
			
			ИменаКолонок = ИменаКолонокВременнойТаблицыТоваров();
			ИменаКолонок.ИмяКолонкиНомерСтроки = "ИдентификаторСтрокиВТ";
			Если Не (ПараметрыДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
				 Или ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Упаковка", КэшированныеЗначения) Тогда
				ИменаКолонок.ИмяКолонкиУпаковка = "Упаковка";
			КонецЕсли;
			Если ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Серия", КэшированныеЗначения) Тогда
				ИменаКолонок.ИмяКолонкиСерия = "Серия";
			КонецЕсли;

			ТекстЗапроса = ПолучитьТекстЗапросаПолученияЦенДляВставки("ВтИсточникДанных",
																		,ИменаКолонок,
																		ПараметрыДействия.Дата);

			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, 		"ЗаполнитьЦенуПередачиПродукцииДавальцу");
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", 	ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", 		ПараметрыДействия.Валюта);
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ВидЦены", 		ВидЦеныПередачи);
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для получения цены выпуска.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
Процедура ДополнитьТекстЗапросаПроверитьЗаполнитьЦенуВыпуска(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия, ЗначениеСвойства;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПроверитьЗаполнитьЦенуВыпуска",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
	
		Если Не ПараметрыДействия.Свойство("ВидЦены", ЗначениеСвойства) ИЛИ Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Возврат;
		КонецЕсли;
	
		ИменаКолонок = ИменаКолонокВременнойТаблицыТоваров();
		ИменаКолонок.ИмяКолонкиНомерСтроки 	= "ИдентификаторСтрокиВТ";
		Если Не (ПараметрыДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
			 Или ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Упаковка", КэшированныеЗначения) Тогда
			ИменаКолонок.ИмяКолонкиУпаковка = "Упаковка";
		КонецЕсли;
		Если ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Серия", КэшированныеЗначения) Тогда
			ИменаКолонок.ИмяКолонкиСерия = "Серия";
		КонецЕсли;

		ТекстЗапроса = ПолучитьТекстЗапросаПолученияЦенДляВставки("ВтИсточникДанных",
																	,ИменаКолонок,
																	ПараметрыДействия.Дата);

		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, 		"ПроверитьЗаполнитьЦенуВыпуска");
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", 	ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", 		ПараметрыДействия.Валюта);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ВидЦены", 		ПараметрыДействия.ВидЦены);

	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для получения цены продажи.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаЗаполнитьЦенуПродажи(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия, ЗначениеСвойства;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьЦенуПродажи",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		ИменаКолонок = ИменаКолонокВременнойТаблицыТоваров();
		ИменаКолонок.ИмяКолонкиНомерСтроки = "ИдентификаторСтрокиВТ";
		
		Если Не (ПараметрыДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства)
			И ЗначениеСвойства.НеИспользоватьУпаковки)
			Или ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Упаковка", КэшированныеЗначения) Тогда
			ИменаКолонок.ИмяКолонкиУпаковка = "Упаковка";
		КонецЕсли;
		
		Если ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Серия", КэшированныеЗначения) Тогда
			ИменаКолонок.ИмяКолонкиСерия = "Серия";
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("ВидЦены") Тогда
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ВидЦены", ПараметрыДействия.ВидЦены);
		Иначе
			ИменаКолонок.ИмяКолонкиВидЦены = "ВидЦены";
		КонецЕсли;
		
		СписокЗапросов = ТекстыЗапросовЗаполненияЦенПакетнаяОбработка("ВтИсточникДанных",, ИменаКолонок, ПараметрыДействия.Дата);
		Для Каждого Запрос Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(Запрос.Значение, Запрос.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", ПараметрыДействия.Валюта);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ПараметрыДействия.Дата);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Конструктор параметров метода ЗаполнитьЦены.
// 
// Возвращаемое значение:
// 	Структура - Структура параметров заполнения:
// 		Обязательные поля.
// 			* Дата - Дата - Дата документа
// 			* Валюта - СправочникСсылка.Валюты - Валюта документа
// 			* Соглашение - СправочникСсылка.СоглашенияСКлиентами - 
// 							если ключ отсутствует, значит должен быть заполнен параметр "ВидЦены".
// 			* ВидЦены - СправочникСсылка.ВидыЦен - 
// 							если параметр отсутствует, значит должен быть заполнен параметр "Соглашение".
// 		Необязательные поля.
// 			* ПоляЗаполнения - Строка - Строка с перечислением заполняемых полей в таблице; 
// 					значение по умолчанию: "Цена"; дополнительные поля - "ВидЦены, СрокПоставки, СтавкаНДС".
// 			* КолонкиПоЗначению - см. ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений.КолонкиПоЗначению
// 			* ДругиеИменаКолонок - см. ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений.НовыеИменаКолонок
// 			* РассчитыватьНаборы - Булево
// 			* Организация - СправочникСсылка.Организации
// 			* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
// 			* ВозвращатьМногооборотнуюТару - Булево
//
Функция НовыйПараметрыЗаполненияЗаполнитьЦены() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Дата",Дата(1,1,1));
	СтруктураПараметров.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	СтруктураПараметров.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	СтруктураПараметров.Вставить("Соглашение",ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));
	СтруктураПараметров.Вставить("Партнер",ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	
	СтруктураПараметров.Вставить("ПоляЗаполнения", "Цена");
	СтруктураПараметров.Вставить("КолонкиПоЗначению", Новый Структура);
	СтруктураПараметров.Вставить("ДругиеИменаКолонок", Новый Структура);
	СтруктураПараметров.Вставить("РассчитыватьНаборы", Ложь);
	
	СтруктураПараметров.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураПараметров.Вставить("НалогообложениеНДС", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка"));
	СтруктураПараметров.Вставить("ВозвращатьМногооборотнуюТару", Ложь);
	СтруктураПараметров.Вставить("ПолеЦена", "Цена");
	СтруктураПараметров.Вставить("ПолеВидЦены", "ВидЦены");
	
	Возврат СтруктураПараметров; 
	
КонецФункции

// Функция-конструктор структуры отбора для получения цены, используется для получения атомарного значения цены.
// Используется как параметр метода ПолучитьЦенуПоОтбору().  
// 
// Возвращаемое значение:
//	Структура - Структура параметров заполнения поля отбора:
//		* Дата - Дата - дата, на которую необходимо получение цены.
//		* Валюта - СправочникСсылка.Валюты -
//		* Номенклатура - СправочникСсылка.Номенклатура -
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//		* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения -
//		* Серия - СправочникСсылка.СерииНоменклатуры -
//		* ВидЦены - СправочникСсылка.ВидыЦен - .
//
Функция НовыйПараметрыОтбораПолучитьЦенуПоОтбору() Экспорт
	
	СтруктураПараметровОтбора = Новый Структура;
	СтруктураПараметровОтбора.Вставить("Дата",Дата(1,1,1));
	СтруктураПараметровОтбора.Вставить("Валюта",Справочники.Валюты.ПустаяСсылка());
	СтруктураПараметровОтбора.Вставить("Номенклатура",Справочники.Номенклатура.ПустаяСсылка());
	СтруктураПараметровОтбора.Вставить("Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураПараметровОтбора.Вставить("Упаковка",Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураПараметровОтбора.Вставить("Серия",Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураПараметровОтбора.Вставить("ВидЦены",Справочники.ВидыЦен.ПустаяСсылка());
	
	Возврат СтруктураПараметровОтбора; 
	
КонецФункции

// Имена колонок временной таблицы товаров.
// 
// Возвращаемое значение:
//  Структура - Имена колонок временной таблицы товаров:
// * ИмяКолонкиНомерСтроки - Строка - По умолчанию "НомерСтроки"
// * ИмяКолонкиСерия - Строка - По умолчанию "Серия"
// * ИмяКолонкиУпаковка - Строка - По умолчанию "Упаковка"
// * ИмяКолонкиВидЦены - Строка - Если колонки в таблице нет, то используется параметр "ВидЦены"
// * ИмяКолонкиВалюта - Строка - Если колонки в таблице нет, то используется параметр "Валюта"
Функция ИменаКолонокВременнойТаблицыТоваров() Экспорт
	
	ИменаКолонок = Новый Структура;
	ИменаКолонок.Вставить("ИмяКолонкиНомерСтроки",	"");
	ИменаКолонок.Вставить("ИмяКолонкиСерия",		"");
	ИменаКолонок.Вставить("ИмяКолонкиУпаковка",		"");
	ИменаКолонок.Вставить("ИмяКолонкиВидЦены",		"");
	ИменаКолонок.Вставить("ИмяКолонкиВалюта",		"");
	
	Возврат ИменаКолонок; 
	
КонецФункции	

// Конструктор параметров проверки вида цен договора для заполнения.
//
// Возвращаемое значение:
//	Структура - Структура параметров проверки вида цен договора:  
// 	* ИмяТабличнойЧасти           - Строка - Имя табличной части документа
// 	* ПредставлениеТабличнойЧасти - Строка - Представление названия табличной части
// 	* ВидЦеныДоговора             - СправочникСсылка.ВидыЦен - Выбранный вид цен договора
// 	* ПолеВидаЦен                 - Строка - Название поля вида цен договора
// 	* ЦенаВключаетНДС             - Булево - признак включения НДС в цену для выбранного вида цен.
//
Функция НовыйПараметрыПроверкиВидаЦенДоговора() Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("ПредставлениеТабличнойЧасти", НСтр("ru = 'Товары'"));
	СтруктураПараметров.Вставить("ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", Неопределено);
	СтруктураПараметров.Вставить("ПолеВидаЦен", "ВидЦены");
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоНаборов(Таблица)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура         КАК Номенклатура,
	|	Таблица.Характеристика       КАК Характеристика,
	|	Таблица.Упаковка             КАК Упаковка,
	|	Таблица.КоличествоУпаковок   КАК КоличествоУпаковок
	|ПОМЕСТИТЬ _СоставНабора
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура         КАК Номенклатура,
	|	Таблица.Характеристика       КАК Характеристика,
	|	Таблица.Упаковка             КАК Упаковка,
	|	Таблица.КоличествоУпаковок   КАК КоличествоУпаковок
	|ПОМЕСТИТЬ СоставНабора
	|ИЗ
	|	_СоставНабора КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|                                                                ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец       КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка       КАК Упаковка,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок) КАК КоличествоУпаковокПоУмолчанию,
	|	СУММА(0) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ СоставНабора КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	0,
	|	Таблица.КоличествоУпаковок
	|ИЗ
	|	СоставНабора КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	СУММА(Таблица.КоличествоУпаковокПоУмолчанию) КАК КоличествоУпаковокПоУмолчанию,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоУпаковокПоУмолчанию <> 0
	|				ТОГДА Результат.КоличествоУпаковок / Результат.КоличествоУпаковокПоУмолчанию
	|			ИНАЧЕ NULL
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК КоличествоМинимум
	|ИЗ
	|	Результат КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|");
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	ВозвращаемоеЗначение = Запрос.Выполнить().Выгрузить();
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка, Неопределено - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ВидЦенКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦен(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ВидЦеныКакПараметр = Истина)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	| &ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				(Номенклатура, Характеристика, ВидЦены) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаТовары.Номенклатура,
	|						ВременнаяТаблицаТовары.Характеристика,
	|						ВременнаяТаблицаТовары.ВидЦены
	|					ИЗ
	|						&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|	ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|	ПО КурсыВалюты.Валюта = ВременнаяТаблицаТовары.Валюта 
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", ?(ЗначениеЗаполнено(ИмяТаблицы),"ПОМЕСТИТЬ " + ИмяТаблицы, ""));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса временной таблицы товаров
//
// Параметры:
//    ИмяТаблицыТоваров - Строка - Имя таблицы товаров. Если не заполнено, значит в запрос будет передан как параметр
//    ИмяТаблицы - Строка - Строка имени для временной таблицы.
//    ИменаКолонок - см. ИменаКолонокВременнойТаблицыТоваров
//  
// Возвращаемое значение:
//    Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваров(ИмяТаблицыТоваров, ИмяТаблицы, ИменаКолонок)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ИмяНомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	&ИмяУпаковка КАК Упаковка,
	|	&ВидЦены КАК ВидЦены,
	|	&Валюта КАК Валюта
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";

	Если Не ПустаяСтрока(ИмяТаблицыТоваров) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицыТоваров);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиНомерСтроки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "0");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "Таблица." + ИменаКолонок.ИмяКолонкиНомерСтроки);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиУпаковка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "Таблица." + ИменаКолонок.ИмяКолонкиУпаковка);
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИменаКолонок.ИмяКолонкиВидЦены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидЦены", "Таблица." + ИменаКолонок.ИмяКолонкиВидЦены);
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИменаКолонок.ИмяКолонкиВалюта) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", "Таблица." + ИменаКолонок.ИмяКолонкиВалюта);
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Валюта КАК Валюта,
	|	&СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(СоглашениеТовары.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Валюта <> СоглашениеШапка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
	|						ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ВременнаяТаблицаТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И (СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО КурсыСрезПоследнихВалютаДокумента.Валюта = ВременнаяТаблицаТовары.Валюта 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыСрезПоследнихВалютаСоглашения
	|		ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = СоглашениеШапка.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, (Страна = &СтранаРегистрации
	|					ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|					И Номенклатура В (ВЫБРАТЬ Т.Номенклатура ИЗ &ИмяВременнойТаблицыТоваров КАК Т)) КАК СтавкиНДСНоменклатуры
	|	ПО ВременнаяТаблицаТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|	ПО (ИСТИНА)
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&СтавкаНДС",
		УчетНДСУП.ТекстЗапросаСтавкаНДС(
			"&НалогообложениеНДС",
			"ВременнаяТаблицаТовары.Номенклатура",
			"&ВозвращатьМногооборотнуюТару"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СоглашениеТовары.Упаковка",
			"СоглашениеТовары.Номенклатура"));
		
	Возврат ТекстЗапроса
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению2_5(ИмяВременнойТаблицыТоваров)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОтбора.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
	|	ТаблицаОтбора.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ИмяВременнойТаблицыТоваров КАК ТаблицаОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|			МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|		ИЗ
	|			(ВЫБРАТЬ
	|				СоглашенияСКлиентами.ИндивидуальныйВидЦены КАК ВидЦены,
	|				1 КАК Приоритет
	|			ИЗ
	|				Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|			ГДЕ
	|				СоглашенияСКлиентами.Ссылка = &Соглашение
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				СоглашенияСКлиентами.ВидЦен,
	|				2
	|			ИЗ
	|				Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|			ГДЕ
	|				СоглашенияСКлиентами.Ссылка = &Соглашение) КАК ВложенныйЗапрос
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ВидЦены) КАК ВременнаяТаблицаВидыЦен
	|		ПО ИСТИНА
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.НомерСтроки,
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО,
	|	ТаблицаОтбора.Упаковка,
	|	ВременнаяТаблицаВидыЦен.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТовары.Приоритет КАК Приоритет,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&СтавкаНДС КАК СтавкаНДС	
	|ПОМЕСТИТЬ втТаблицаЦеныПоСоглашению
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО,
	|		СерияЦО, УпаковкаЦО, ВидЦены) В
	|		(ВЫБРАТЬ
	|			Т.Номенклатура,
	|			Т.ХарактеристикаЦО,
	|			Т.СерияЦО,
	|			Т.УпаковкаЦО,
	|			Т.ВидЦены
	|		ИЗ
	|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ВременнаяТаблицаТовары
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
	|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ВременнаяТаблицаТовары.СерияЦО
	|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ВременнаяТаблицаТовары.УпаковкаЦО
	|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, (Страна = &СтранаРегистрации
	|				ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|				И Номенклатура В (ВЫБРАТЬ Т.Номенклатура ИЗ ТаблицаОтбора КАК Т)) КАК СтавкиНДСНоменклатуры
	|		ПО ВременнаяТаблицаТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЦеныПоСоглашению.Номерстроки КАК НомерСтроки,
	|	втТаблицаЦеныПоСоглашению.ВидЦены КАК ВидЦены,
	|	втТаблицаЦеныПоСоглашению.СтавкаНДС КАК СтавкаНДС,
	|	втТаблицаЦеныПоСоглашению.Цена КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		втТаблицаЦеныПоСоглашению.Номенклатура КАК Номенклатура,
	|		втТаблицаЦеныПоСоглашению.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|		втТаблицаЦеныПоСоглашению.СерияЦО КАК СерияЦО,
	|		втТаблицаЦеныПоСоглашению.УпаковкаЦО КАК УпаковкаЦО,
	|		МИНИМУМ(втТаблицаЦеныПоСоглашению.Приоритет) КАК Приоритет
	|	ИЗ
	|		втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
	|	СГРУППИРОВАТЬ ПО
	|		втТаблицаЦеныПоСоглашению.Номенклатура,
	|		втТаблицаЦеныПоСоглашению.ХарактеристикаЦО,
	|		втТаблицаЦеныПоСоглашению.СерияЦО,
	|		втТаблицаЦеныПоСоглашению.УпаковкаЦО) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
	|		ПО ВложенныйЗапрос.Номенклатура = втТаблицаЦеныПоСоглашению.Номенклатура
	|		И ВложенныйЗапрос.ХарактеристикаЦО = втТаблицаЦеныПоСоглашению.ХарактеристикаЦО
	|		И ВложенныйЗапрос.СерияЦО = втТаблицаЦеныПоСоглашению.СерияЦО
	|		И ВложенныйЗапрос.УпаковкаЦО = втТаблицаЦеныПоСоглашению.УпаковкаЦО
	|		И ВложенныйЗапрос.Приоритет = втТаблицаЦеныПоСоглашению.Приоритет
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&СтавкаНДС",
		УчетНДСУП.ТекстЗапросаСтавкаНДС(
			"&НалогообложениеНДС",
			"ВременнаяТаблицаТовары.Номенклатура",
			"&ВозвращатьМногооборотнуюТару"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Возврат ТекстЗапроса
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦенПоПартнеру2_5(ИмяВременнойТаблицыТоваров)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОтбора.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
	|	ТаблицаОтбора.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ИмяВременнойТаблицыТоваров КАК ТаблицаОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|			МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|		ИЗ
	|			(
	|			ВЫБРАТЬ
	|				Партнеры.ИндивидуальныйВидЦены КАК ВидЦены,
	|				1 КАК Приоритет
	|			ИЗ
	|				Справочник.Партнеры КАК Партнеры
	|			ГДЕ
	|				Партнеры.Ссылка = &Партнер
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				Партнеры.ВидЦен,
	|				2
	|			ИЗ
	|				Справочник.Партнеры КАК Партнеры
	|			ГДЕ
	|				Партнеры.Ссылка = &Партнер) КАК ВложенныйЗапрос
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ВидЦены) КАК ВременнаяТаблицаВидыЦен
	|		ПО ИСТИНА
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.НомерСтроки,
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО,
	|	ТаблицаОтбора.Упаковка,
	|	ВременнаяТаблицаВидыЦен.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТовары.Приоритет КАК Приоритет,
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втТаблицаЦеныПоСоглашению
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО,
	|		СерияЦО, УпаковкаЦО, ВидЦены) В
	|		(ВЫБРАТЬ
	|			Т.Номенклатура,
	|			Т.ХарактеристикаЦО,
	|			Т.СерияЦО,
	|			Т.УпаковкаЦО,
	|			Т.ВидЦены
	|		ИЗ
	|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ВременнаяТаблицаТовары
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
	|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ВременнаяТаблицаТовары.СерияЦО
	|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ВременнаяТаблицаТовары.УпаковкаЦО
	|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЦеныПоСоглашению.Номерстроки КАК НомерСтроки,
	|	втТаблицаЦеныПоСоглашению.ВидЦены КАК ВидЦены,
	|	втТаблицаЦеныПоСоглашению.Цена КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		втТаблицаЦеныПоСоглашению.Номенклатура КАК Номенклатура,
	|		втТаблицаЦеныПоСоглашению.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|		втТаблицаЦеныПоСоглашению.СерияЦО КАК СерияЦО,
	|		втТаблицаЦеныПоСоглашению.УпаковкаЦО КАК УпаковкаЦО,
	|		МИНИМУМ(втТаблицаЦеныПоСоглашению.Приоритет) КАК Приоритет
	|	ИЗ
	|		втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
	|	СГРУППИРОВАТЬ ПО
	|		втТаблицаЦеныПоСоглашению.Номенклатура,
	|		втТаблицаЦеныПоСоглашению.ХарактеристикаЦО,
	|		втТаблицаЦеныПоСоглашению.СерияЦО,
	|		втТаблицаЦеныПоСоглашению.УпаковкаЦО) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
	|		ПО ВложенныйЗапрос.Номенклатура = втТаблицаЦеныПоСоглашению.Номенклатура
	|		И ВложенныйЗапрос.ХарактеристикаЦО = втТаблицаЦеныПоСоглашению.ХарактеристикаЦО
	|		И ВложенныйЗапрос.СерияЦО = втТаблицаЦеныПоСоглашению.СерияЦО
	|		И ВложенныйЗапрос.УпаковкаЦО = втТаблицаЦеныПоСоглашению.УпаковкаЦО
	|		И ВложенныйЗапрос.Приоритет = втТаблицаЦеныПоСоглашению.Приоритет
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Возврат ТекстЗапроса
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка, Неопределено - Строка имени для временной таблицы цен (для передачи далее)
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ВидЦенКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦен2_5(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ВидЦеныКакПараметр = Истина)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	| &ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|			(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО, ВидЦены) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.ХарактеристикаЦО,
	|					ВременнаяТаблицаТовары.СерияЦО,
	|					ВременнаяТаблицаТовары.УпаковкаЦО,
	|					ВременнаяТаблицаТовары.ВидЦены
	|				ИЗ
	|					&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И ВременнаяТаблицаТовары.ХарактеристикаЦО = ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
	|		И ВременнаяТаблицаТовары.СерияЦО = ЦеныНоменклатурыСрезПоследних.СерияЦО
	|		И ВременнаяТаблицаТовары.УпаковкаЦО = ЦеныНоменклатурыСрезПоследних.УпаковкаЦО
	|		И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|	ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|	ПО КурсыВалюты.Валюта = ВременнаяТаблицаТовары.Валюта
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", ?(ЗначениеЗаполнено(ИмяТаблицы),"ПОМЕСТИТЬ " + ИмяТаблицы, ""));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса временной таблицы товаров
// 
// Параметры:
//  ИмяТаблицыТоваров - Строка - Имя таблицы товаров. Если не заполнено, значит в запрос будет передан как параметр
//  ИмяТаблицы - Строка - Строка имени для временной таблицы.
//  ИменаКолонок - см. ИменаКолонокВременнойТаблицыТоваров
// 
// Возвращаемое значение:
//  Строка --- Текст запроса временной таблицы.
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваров2_5(ИмяТаблицыТоваров, ИмяТаблицы, ИменаКолонок)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ИмяНомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	&ИмяСерия КАК Серия,
	|	&ИмяУпаковка КАК Упаковка,
	|	&ВидЦены КАК ВидЦены,
	|	&Валюта КАК Валюта
	|ПОМЕСТИТЬ втТаблицаТоварыПодг
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				Или ТаблицаТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ КАК ХарактеристикаЦО,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
	|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК УпаковкаЦО,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ТаблицаТовары.Валюта КАК Валюта
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	втТаблицаТоварыПодг КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры
	|;
	|";
	
	Если Не ПустаяСтрока(ИмяТаблицыТоваров) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицыТоваров);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиНомерСтроки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "0");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "Таблица." + ИменаКолонок.ИмяКолонкиНомерСтроки);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиСерия) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСерия", "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСерия", "Таблица." + ИменаКолонок.ИмяКолонкиСерия);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиУпаковка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "Таблица." + ИменаКолонок.ИмяКолонкиУпаковка);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИменаКолонок.ИмяКолонкиВидЦены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидЦены", "Таблица." + ИменаКолонок.ИмяКолонкиВидЦены);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИменаКолонок.ИмяКолонкиВалюта) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", "Таблица." + ИменаКолонок.ИмяКолонкиВалюта);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПакетнаяОбработкаТабличныхЧастейСлужебная

// Возвращает тексты запросов временной таблицы цен товаров по номерам строк
//
// Параметры:
// 	ИмяТаблицы - Строка, Неопределено - Строка имени для временной таблицы
// 	ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 	ВидЦеныКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка - Тексты запросов временной таблицы.
//
Функция ТекстыЗапросовВременнойТаблицыЦенПакетнаяОбработка(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ВидЦеныКакПараметр = Истина)
	
	Результат = Новый СписокЗначений();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	| &ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				(Номенклатура, Характеристика, ВидЦены) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаТовары.Номенклатура,
	|						ВременнаяТаблицаТовары.Характеристика,
	|						ВременнаяТаблицаТовары.ВидЦены
	|					ИЗ
	|						&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|	ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|	ПО КурсыВалюты.Валюта = ВременнаяТаблицаТовары.Валюта";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", ?(ЗначениеЗаполнено(ИмяТаблицы),"ПОМЕСТИТЬ " + ИмяТаблицы, ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Результат.Добавить(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяТаблицы), ИмяТаблицы, "ЗаполнитьЦенуПродажи"));
		
	Возврат Результат;
	
КонецФункции

// Возвращает тексты запросов временной таблицы товаров
//
// Параметры:
// 	ИмяТаблицыТоваров - Строка - Имя таблицы товаров. Если не заполнено, значит в запрос будет передан как параметр
// 	ИмяТаблицы - Строка - Строка имени для временной таблицы.
// 	ИменаКолонок - см. ИменаКолонокВременнойТаблицыТоваров
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка - Тексты запросов временной таблицы.
//
Функция ТекстыЗапросовВременнойТаблицыТоваровПакетнаяОбработка(ИмяТаблицыТоваров, ИмяТаблицы, ИменаКолонок)
	
	Результат = Новый СписокЗначений();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ИмяНомерСтроки КАК ИдентификаторСтрокиВТ,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	&ИмяУпаковка КАК Упаковка,
	|	&ВидЦены КАК ВидЦены,
	|	&Валюта КАК Валюта
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
	Если Не ПустаяСтрока(ИмяТаблицыТоваров) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицыТоваров);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиНомерСтроки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "0");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "Таблица." + ИменаКолонок.ИмяКолонкиНомерСтроки);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиУпаковка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "Таблица." + ИменаКолонок.ИмяКолонкиУпаковка);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИменаКолонок.ИмяКолонкиВидЦены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидЦены", "Таблица." + ИменаКолонок.ИмяКолонкиВидЦены);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИменаКолонок.ИмяКолонкиВалюта) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", "Таблица." + ИменаКолонок.ИмяКолонкиВалюта);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);
	
	Результат.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

// Возвращает тексты запросов временной таблицы цен товаров по номерам строк
//
// Параметры:
// 	ИмяТаблицы - Строка, Неопределено - Строка имени для временной таблицы цен (для передачи далее)
// 	ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 	ВидЦеныКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка - Тексты запросов временной таблицы.
//
Функция ТекстыЗапросовВременнойТаблицыЦен2_5ПакетнаяОбработка(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ВидЦеныКакПараметр = Истина)
	
	Результат = Новый СписокЗначений();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
	|	* ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|			(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО, ВидЦены) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.ХарактеристикаЦО,
	|					ВременнаяТаблицаТовары.СерияЦО,
	|					ВременнаяТаблицаТовары.УпаковкаЦО,
	|					ВременнаяТаблицаТовары.ВидЦены
	|				ИЗ
	|					&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И ВременнаяТаблицаТовары.ХарактеристикаЦО = ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
	|		И ВременнаяТаблицаТовары.СерияЦО = ЦеныНоменклатурыСрезПоследних.СерияЦО
	|		И ВременнаяТаблицаТовары.УпаковкаЦО = ЦеныНоменклатурыСрезПоследних.УпаковкаЦО
	|		И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|	ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|	ПО КурсыВалюты.Валюта = ВременнаяТаблицаТовары.Валюта
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", ?(ЗначениеЗаполнено(ИмяТаблицы), "ПОМЕСТИТЬ " + ИмяТаблицы, ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВременнаяТаблицаТовары.Упаковка",
			"ВременнаяТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Результат.Добавить(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяТаблицы), ИмяТаблицы, "ЗаполнитьЦенуПродажи"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает тексты запросов временной таблицы товаров
//
// Параметры:
// 	ИмяТаблицыТоваров - Строка - Имя таблицы товаров. Если не заполнено, значит в запрос будет передан как параметр
// 	ИмяТаблицы - Строка - Строка имени для временной таблицы.
// 	ИменаКолонок - см. ИменаКолонокВременнойТаблицыТоваров
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка - Тексты запросов временной таблицы.
//
Функция ТекстыЗапросовВременнойТаблицыТоваров2_5ПакетнаяОбработка(ИмяТаблицыТоваров, ИмяТаблицы, ИменаКолонок)
	
	Результат = Новый СписокЗначений();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ИмяНомерСтроки КАК ИдентификаторСтрокиВТ,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	&ИмяСерия КАК Серия,
	|	&ИмяУпаковка КАК Упаковка,
	|	&ВидЦены КАК ВидЦены,
	|	&Валюта КАК Валюта
	|ПОМЕСТИТЬ втТаблицаТоварыПодг
	|ИЗ
	|	&Таблица КАК Таблица";
	
	Если Не ПустаяСтрока(ИмяТаблицыТоваров) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицыТоваров);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиНомерСтроки) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "0");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяНомерСтроки", "Таблица." + ИменаКолонок.ИмяКолонкиНомерСтроки);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиСерия) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСерия", "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСерия", "Таблица." + ИменаКолонок.ИмяКолонкиСерия);
	КонецЕсли;
	
	Если ПустаяСтрока(ИменаКолонок.ИмяКолонкиУпаковка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяУпаковка", "Таблица." + ИменаКолонок.ИмяКолонкиУпаковка);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИменаКолонок.ИмяКолонкиВидЦены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидЦены", "Таблица." + ИменаКолонок.ИмяКолонкиВидЦены);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИменаКолонок.ИмяКолонкиВалюта) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", "Таблица." + ИменаКолонок.ИмяКолонкиВалюта);
	КонецЕсли;
	
	Результат.Добавить(ТекстЗапроса, "втТаблицаТоварыПодг");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				Или ТаблицаТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ КАК ХарактеристикаЦО,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
	|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК УпаковкаЦО,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ТаблицаТовары.Валюта КАК Валюта
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	втТаблицаТоварыПодг КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяТаблицы);
	
	Результат.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

// Получить тексты запросов получения цен для вставки в прочие запросы.
//
// Параметры:
// 	ИмяВременнойТаблицыТоваров - Строка - Имя временной таблицы товаров вышестоящего запроса (таблица товаров на входе).
// 	ИмяВременнойТаблицыЦен - Строка - Имя временной таблицы цен на выходе.
// 	ИменаКолонок - см. ИменаКолонокВременнойТаблицыТоваров.
// 	ДатаЗапроса - Неопределено, Дата - Дата запроса, для получении информации какой вариант ценообразования применить.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка - тексты запросов получения цен для вставки.
// 
Функция ТекстыЗапросовЗаполненияЦенПакетнаяОбработка(ИмяВременнойТаблицыТоваров,
	ИмяВременнойТаблицыЦен = Неопределено,
	ИменаКолонок = Неопределено,
	ДатаЗапроса = Неопределено) Экспорт
	
	Если ИменаКолонок = Неопределено Тогда
		ИменаКолонок = ИменаКолонокВременнойТаблицыТоваров();
	КонецЕсли;
	
	Результат = Новый СписокЗначений();
	
	ВидЦеныКакПараметр = ПустаяСтрока(ИменаКолонок.ИмяКолонкиВидЦены);
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДатаЗапроса);
	Если ИспользуетсяЦенообразование25 Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСписок(Результат,
			ТекстыЗапросовВременнойТаблицыТоваров2_5ПакетнаяОбработка(ИмяВременнойТаблицыТоваров,
				"втТаблицаТоварыДляСвязи",
				ИменаКолонок));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСписок(Результат,
			ТекстыЗапросовВременнойТаблицыЦен2_5ПакетнаяОбработка(ИмяВременнойТаблицыЦен,
				"втТаблицаТоварыДляСвязи",
				ВидЦеныКакПараметр));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСписок(Результат,
			ТекстыЗапросовВременнойТаблицыТоваровПакетнаяОбработка(ИмяВременнойТаблицыТоваров,
				"втТаблицаТоварыДляСвязи",
				ИменаКолонок));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСписок(Результат,
			ТекстыЗапросовВременнойТаблицыЦенПакетнаяОбработка(ИмяВременнойТаблицыЦен,
				"втТаблицаТоварыДляСвязи",
				ВидЦеныКакПараметр));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти