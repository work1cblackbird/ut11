#Область ПрограммныйИнтерфейс

Функция ОбщиеПараметрыОбменаНаКлиенте(Источник = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкиОбменаЕГАИС",    Неопределено);
	Результат.Вставить("Изменения",               Неопределено);
	Результат.Вставить("ОповещениеПриЗавершении", Неопределено);
	Результат.Вставить("ИдентификаторВладельца",  Неопределено);
	Результат.Вставить("ВОсновнойФорме",          Истина);
	
	Если Источник <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, Источник);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ЕГАИС.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//  ИдентификаторВладельца - УникальныйИдентификатор, Истина - Уникальный идентификатор формы для сообщений обмена, Неопределено, Истина (обмен в основной форме)
//     В результат передается массив структур Изменения, см. функцию ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения().
//
Процедура ВыполнитьОбмен(ОрганизацииЕГАИС = Неопределено, ОповещениеПриЗавершении = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ВыполнитьОбмен(ОрганизацииЕГАИС,, ИдентификаторВладельца);
	
	ДополнительныеПараметры = ОбщиеПараметрыОбменаНаКлиенте();
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПослеЗавершенииОбмена(Неопределено, Неопределено, ОповещениеПриЗавершении, ИдентификаторВладельца);
	ДополнительныеПараметры.НастройкиОбменаЕГАИС    = ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС;
	Если ИдентификаторВладельца = Истина Тогда
		ДополнительныеПараметры.ИдентификаторВладельца = Неопределено;
		ДополнительныеПараметры.ВОсновнойФорме         = Истина;
	Иначе
		ДополнительныеПараметры.ИдентификаторВладельца = ИдентификаторВладельца;
		ДополнительныеПараметры.ВОсновнойФорме         = ДанныеДляВыполненияОбменаНаКлиенте.Свойство("ВОсновнойФорме");
	КонецЕсли;
	
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		Новый ОписаниеОповещения(
			"ПослеОбработкиОчередиПередачиДанных",
			ОбменДаннымиЕГАИССлужебныйКлиент,
			ДополнительныеПараметры),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Формирует сообщение и сразу же передает его в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение в ЕГАИС.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выполняемая операция обмена.
//  ДополнительныеПараметры - Структура со свойствами:
//   * НомерЧека - Число - Номер чека ККМ.
//   * НомерСмены - Число - Номер смены.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//     В результат передается массив структур Изменения, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//
Процедура ПередатьНемедленно(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры, ОповещениеПриЗавершении, ИдентификаторВладельца = Неопределено) Экспорт
	
	ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьКПередаче(
		ДокументСсылка,
		ДальнейшееДействие,
		ДополнительныеПараметры,
		Истина,
		ИдентификаторВладельца);
	
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		ОповещениеПриЗавершении,
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаВФормахДокументов

// Формирует сообщение для передачи в УТМ, согласно указанной операции.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение в ЕГАИС.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выполняемая операция обмена.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
//
Процедура ПодготовитьКПередаче(ДокументСсылка, ДальнейшееДействие, ИдентификаторВладельца = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьКПередаче(ДокументСсылка, ДальнейшееДействие,,, ИдентификаторВладельца);
	
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		ОповещениеПослеЗавершенииОбмена(
			ДокументСсылка,
			ДальнейшееДействие,,
			ИдентификаторВладельца),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
Процедура ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = ОбменДаннымиЕГАИСВызовСервера.ОтменитьПоследнююОперацию(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПослеЗавершенииОбмена(
				ДокументСсылка,
				ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию")),
			Изменения);
	Иначе
		
		ОбменДаннымиЕГАИСВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = ОбменДаннымиЕГАИСВызовСервера.ОтменитьПередачу(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПослеЗавершенииОбмена(
				ДокументСсылка,
				ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных")),
			Изменения);
	Иначе
		
		ОбменДаннымиЕГАИСВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОповещениеПослеЗавершенииОбмена(Контекст, ДальнейшееДействие, ОповещениеПриЗавершении = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контекст",                Контекст);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие",      ДальнейшееДействие);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ИдентификаторВладельца",  ИдентификаторВладельца);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеЗавершенияОбмена",
		ОбменДаннымиЕГАИССлужебныйКлиент,
		ДополнительныеПараметры);
	
	Возврат ОписаниеОповещения;
	
КонецФункции

// Открывает форму протокола обмена с ЕГАИС по документу.
//
// Параметры:
//  Документ - ДокументСсылка - документ, для которого открывается протокол обмена.
//  Владелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//  ДляДокументаОснования - Булево - Для документа основания.
//
Процедура ОткрытьПротоколОбмена(Документ, Владелец = Неопределено, ДляДокументаОснования = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",              Документ);
	ПараметрыФормы.Вставить("ДляДокументаОснования", ДляДокументаОснования);
	
	ОткрытьФорму(
		"Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымиДокументами

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	ДокументОснование = Форма.Объект.Ссылка;
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДокументОснование", ДокументОснование);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("Форма", Форма);
	
	Если Форма.Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Контекст);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ %1 был изменен. Записать?'"), ДокументОснование);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Контекст);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ %1 не записан. Записать?'"), ДокументОснование);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьКомандуГиперссылки(
			ДокументОснование,
			НавигационнаяСсылкаФорматированнойСтроки,
			Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ЕГАИС.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - выбранный пользователем ответ,
//  Контекст - Структура - контекст формы документа:
//   * Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Форма.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если Не Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.Форма.Объект.Ссылка) Тогда
		
		ВыполнитьКомандуГиперссылки(
			Контекст.Форма.Объект.Ссылка,
			Контекст.НавигационнаяСсылкаФорматированнойСтроки,
			Контекст.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку команды по открытию или созданию документов ЕГАИС по документу-основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ, на основании которого необходимо создать документ ЕГАИС или открыть существующий.
//  Команда - Строка - Выполняемая команда. Например: "СоздатьАктПостановкиНаБалансЕГАИС".
//  ФормаВладелец - ФормаКлиентскогоПриложения, Неопределено - Форма-владелец.
//
Процедура ВыполнитьКомандуГиперссылки(ДокументОснование, Команда, ФормаВладелец) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОснование",                        ДокументОснование);
	ДополнительныеПараметры.Вставить("НавигационнаяСсылкаФорматированнойСтроки", Команда);
	ДополнительныеПараметры.Вставить("Форма",                                    ФормаВладелец);
	
	ПриЗавершенииСопоставленияКлассификаторов = Новый ОписаниеОповещения(
		"ПриЗавершенииСопоставленияКлассификаторов",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Если ОбщегоНазначенияЕГАИСКлиент.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		МодульИнтеграцияЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияЕГАИСКлиент");
		МодульИнтеграцияЕГАИСКлиент.ПроверитьСопоставлениеКлассификаторов(
			ДокументОснование,
			ФормаВладелец,
			ПриЗавершенииСопоставленияКлассификаторов);
	
	Иначе
		
		ВыполнитьОбработкуОповещения(ПриЗавершенииСопоставленияКлассификаторов, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму нового документа после завершения сопоставления классификаторов.
//
// Параметры:
//  Результат - Булево - Результат сопоставления,
//  ДополнительныеПараметры - Структура - Контекст формы документа:
//   * Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//   * ДокументОснование - ДокументСсылка - ссылка на документ, в котором произошло нажатие на гиперссылку,
//   * НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки.
//
Процедура ПриЗавершенииСопоставленияКлассификаторов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Форма                                    = ДополнительныеПараметры.Форма;
	ДокументОснование                        = ДополнительныеПараметры.ДокументОснование;
	НавигационнаяСсылкаФорматированнойСтроки = ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки;
	
	СтрДлинаОткрыть = СтрДлина("Открыть");
	СтрДлинаСоздать = СтрДлина("Создать");
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбменаЕГАИС" Тогда
		
		ОткрытьПротоколОбмена(ДокументОснование, Форма, Истина);
		
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, СтрДлинаОткрыть) = "Открыть" Тогда
		
		Если ОбщегоНазначенияЕГАИСКлиент.ЭтоРасширеннаяВерсияГосИС() Тогда
			
			МодульИнтеграцияЕГАИСВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияЕГАИСВызовСервера");
			Результат = МодульИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(ДокументОснование);
			
			МассивДокументов = Результат[Прав(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина(НавигационнаяСсылкаФорматированнойСтроки) - СтрДлинаОткрыть)];
			Если МассивДокументов.Количество() = 1 Тогда
				ПоказатьЗначение(, МассивДокументов[0].Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "Создать") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ДокументОснование);
		ИмяДокумента = СтрШаблон("Документ.%1.Форма.ФормаДокумента",Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлинаСоздать + 1));
		ОткрытьФорму(ИмяДокумента, ПараметрыФормы, Форма);
		
	Иначе
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменНаКлиентеПоРасписанию

// Установить дату последнего запуска обмена на клиенте по расписанию.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//
Процедура ОбновитьДатуПоследнегоЗапускаОбменаНаКлиентеПоРасписанию(ОрганизацияЕГАИС) Экспорт
	
	ИменаПараметров    = ОбщегоНазначенияЕГАИСКлиентСервер.ИменаПараметровПериодическогоПолученияДанных();
	ПараметрПриложения = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения]; // - см. ОбщегоНазначенияЕГАИСКлиентСервер.ИменаПараметровПериодическогоПолученияДанных
	
	ПараметрПриложения.ДатаПоследнейОбработкиОтветов[ОрганизацияЕГАИС] = ОбщегоНазначенияКлиент.ДатаСеанса();
	
КонецПроцедуры

Процедура УстановитьПризнакНеобходимостиОбновленияНастроекОбменаПоРасписанию() Экспорт
	
	ИменаПараметров    = ОбщегоНазначенияЕГАИСКлиентСервер.ИменаПараметровПериодическогоПолученияДанных();
	ПараметрПриложения = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения]; // см. ОбщегоНазначенияЕГАИСКлиентСервер.ПараметрПриложенияОбменНаКлиентеПоРасписанию 
	ПараметрПриложения.ОбновитьПараметрыНастроек = Истина;
	
КонецПроцедуры

// Проверяет возможность и при необходимости выполняет обработку ответов из ЕГАИС.
// Параметры:
//  ДанныеДляВыполненияОбменаНаКлиенте - см. ОбменДаннымиЕГАИСВызовСервера.ВыполнитьОбмен
Процедура ВыполнитьОбменНаКлиентеПоРасписанию(ДанныеДляВыполненияОбменаНаКлиенте) Экспорт
	
	ДанныеДляВыполненияОбменаНаКлиенте.Вставить("ВОсновнойФорме", Истина);
	
	ДополнительныеПараметры = ОбщиеПараметрыОбменаНаКлиенте();
	ДополнительныеПараметры.ОповещениеПриЗавершении = ОповещениеПослеЗавершенииОбмена(Неопределено, Неопределено, Неопределено);
	ДополнительныеПараметры.НастройкиОбменаЕГАИС    = ДанныеДляВыполненияОбменаНаКлиенте.НастройкиОбменаЕГАИС;
	ДополнительныеПараметры.ВОсновнойФорме          = Истина;
	
	ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		Новый ОписаниеОповещения(
			"ПослеОбработкиОчередиПередачиДанных",
			ОбменДаннымиЕГАИССлужебныйКлиент,
			ДополнительныеПараметры),
		ДанныеДляВыполненияОбменаНаКлиенте);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти