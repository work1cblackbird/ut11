#Область ПрограммныйИнтерфейс

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	//++ Локализация
	
	
	//-- Локализация
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт

	//++ Локализация
	СписокОбъектов.Добавить(Документы.ВводОстатковНДСПредъявленного);
	СписокОбъектов.Добавить(Документы.ЛистКассовойКниги);
	СписокОбъектов.Добавить(Документы.ОперацияПоЯндексКассе);
	СписокОбъектов.Добавить(Документы.ЛистКассовойКниги);
	СписокОбъектов.Добавить(Документы.СправкаОПодтверждающихДокументах);
	СписокОбъектов.Добавить(Документы.ТранспортнаяНакладная);
	СписокОбъектов.Добавить(Справочники.ШтрихкодыУпаковокТоваров);
	СписокОбъектов.Добавить(Справочники.Патенты);
	
	
	
	// ИнтеграцияЕГАИС
	СписокОбъектов.Добавить(Документы.АктПостановкиНаБалансЕГАИС);
	СписокОбъектов.Добавить(Документы.АктСписанияЕГАИС);
	СписокОбъектов.Добавить(Документы.ВозвратИзРегистра2ЕГАИС);
	СписокОбъектов.Добавить(Документы.ЗапросАкцизныхМарокЕГАИС);
	СписокОбъектов.Добавить(Документы.ТранспортнаяНакладнаяЕГАИС);
	СписокОбъектов.Добавить(Документы.ОстаткиЕГАИС);
	СписокОбъектов.Добавить(Документы.ОтчетЕГАИС);
	СписокОбъектов.Добавить(Документы.ПередачаВРегистр2ЕГАИС);
	СписокОбъектов.Добавить(Документы.ЧекЕГАИС);
	СписокОбъектов.Добавить(Документы.ЧекЕГАИСВозврат);
	СписокОбъектов.Добавить(Документы.ТТНИсходящаяЕГАИС);
	СписокОбъектов.Добавить(Документы.ТТНВходящаяЕГАИС);
	СписокОбъектов.Добавить(Обработки.ПечатьРазделаБСправкиТТН);
	СписокОбъектов.Добавить(Документы.ОтчетОбИмпортеЕГАИС);
	СписокОбъектов.Добавить(Документы.УведомлениеОПланируемомИмпортеЕГАИС);
	СписокОбъектов.Добавить(Документы.ОтчетОПроизводствеЕГАИС);
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияВЕТИС
	СписокОбъектов.Добавить(Справочники.ВетеринарноСопроводительныйДокументВЕТИС);
	СписокОбъектов.Добавить(Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ИнвентаризацияПродукцииВЕТИС);
	СписокОбъектов.Добавить(Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ЗапросСкладскогоЖурналаВЕТИС);
	СписокОбъектов.Добавить(Документы.ПроизводственнаяОперацияВЕТИС);
	// Конец ИнтеграцияВЕТИС
	
	// ИнтеграцияГИСМ
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровГИСМ);
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровГИСМ);
	// Конец ИнтеграцияГИСМ
	
	//Начало ИнтеграцияИСМП
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.ОтгрузкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.ПриемкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.ВыводИзОборотаИСМП);
	СписокОбъектов.Добавить(Документы.ВозвратВОборотИСМП);
	СписокОбъектов.Добавить(Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.СписаниеКодовМаркировкиИСМП);
	СписокОбъектов.Добавить(Документы.УточнениеСведенийОКодахМаркировкиИСМП);
	СписокОбъектов.Добавить(Документы.ОтчетИСМП);
	//Конец ИнтеграцияИСМП
	
	//Начало ИнтеграцияЗЕРНО
	СписокОбъектов.Добавить(Справочники.АктыОтбораПробЗЕРНО);
	СписокОбъектов.Добавить(Справочники.ДоговорыХраненияПартийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.РеестрМестФормированияПартийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.РеестрПартийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.РезультатыИсследованийЗЕРНО);
	СписокОбъектов.Добавить(Справочники.СДИЗЗЕРНО);
	СписокОбъектов.Добавить(Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО);
	СписокОбъектов.Добавить(Документы.ЗапросОстатковПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ОформлениеСДИЗЗЕРНО);
	СписокОбъектов.Добавить(Документы.ПогашениеСДИЗЗЕРНО);
	СписокОбъектов.Добавить(Документы.СписаниеПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ФормированиеПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ФормированиеПартийИзДругихПартийЗЕРНО);
	СписокОбъектов.Добавить(Документы.ФормированиеПартийПриПроизводствеЗЕРНО);
	//Конец ИнтеграцияЗЕРНО
	
	//Начало ИнтеграцияСАТУРН
	СписокОбъектов.Добавить(Документы.АктИнвентаризацииСАТУРН);
	СписокОбъектов.Добавить(Документы.АктПримененияСАТУРН);
	СписокОбъектов.Добавить(Документы.ЗапросОстатковПартийСАТУРН);
	СписокОбъектов.Добавить(Документы.ИмпортПродукцииСАТУРН);
	СписокОбъектов.Добавить(Документы.НакладнаяСАТУРН);
	СписокОбъектов.Добавить(Документы.ПланПримененияСАТУРН);
	СписокОбъектов.Добавить(Документы.ПроизводственнаяОперацияСАТУРН);
	//Конец ИнтеграцияСАТУРН
	
	// ЭлектронноеВзаимодействие
	ЭлектронноеВзаимодействие.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЭлектронноеВзаимодействие
	
	// ++ЭлектронноеВзаимодействие.КоммерческиеПредложенияДокументы
	СписокОбъектов.Добавить(Документы.ЗапросКоммерческихПредложенийПоставщиков);
	СписокОбъектов.Добавить(Документы.ЗапросКоммерческогоПредложенияОтКлиента);
	СписокОбъектов.Добавить(Документы.КоммерческоеПредложениеПоставщика);
	// --ЭлектронноеВзаимодействие.КоммерческиеПредложенияДокументы
	
	
	
	//-- Локализация
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Если ИмяФормы = "Документ.ЗапросАкцизныхМарокЕГАИС.Форма.ФормаДокумента"
		ИЛИ ИмяФормы = "Документ.ЗапросАкцизныхМарокЕГАИС.Форма.ФормаСписка"
		ИЛИ ИмяФормы = "Документ.ЗапросАкцизныхМарокЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
			СтандартнаяОбработка = Ложь;
			
			КоллекцияКомандПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
			
			КомандаПечати = КоллекцияКомандПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиентЛокализация.ПечатьАкцизныхМарок";
			КомандаПечати.Идентификатор = "АкцизныеМарки";
			КомандаПечати.Представление = НСтр("ru = 'Печать акцизных марок'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КоллекцияКомандПечати, КомандыПечати);
		КонецЕсли;
	ИначеЕсли ИмяФормы = "Справочник.ШтрихкодыУпаковокТоваров.Форма.ФормаЭлемента"
		ИЛИ ИмяФормы = "Справочник.ШтрихкодыУпаковокТоваров.Форма.ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если НЕ ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
			Возврат;
		КонецЕсли;
		
		КоллекцияКомандПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
		
		КомандаПечати               = КоллекцияКомандПечати.Добавить();
		КомандаПечати.Обработчик    = "УправлениеПечатьюУТКлиентЛокализация.ПечатьШтрихкодовУпаковок";
		КомандаПечати.Идентификатор = "ШтрихкодыУпаковок";
		КомандаПечати.Представление = НСтр("ru = 'Печать: Штрихкод упаковки'");
		
		// Этикетка ИСМП
		КомандаПечати               = КоллекцияКомандПечати.Добавить();
		КомандаПечати.Идентификатор = "ЭтикеткаКодМаркировкиИСМП";
		КомандаПечати.Представление = НСтр("ru = 'Печать: Этикетка (обувь, одежда, табак...)'");
		КомандаПечати.Обработчик    = "ПечатьЭтикетокИСМПКлиент.ПечатьШтрихкодыУпаковокИСМП";
		КомандаПечати.ФункциональныеОпции = "ВестиУчетМаркируемойПродукцииИСМП";
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КоллекцияКомандПечати, КомандыПечати);
	
	ИначеЕсли СтрНачинаетсяС(ИмяФормы, "Документ.ЗаказПоставщику.Форма.") Тогда
		
		КоллекцияКомандПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
		
		КомандаПечати = КоллекцияКомандПечати.Добавить();
		КомандаПечати.Идентификатор  = "ЗаказПоставщику_ПечатьКодовМаркировки";
		КомандаПечати.Представление  = НСтр("ru = 'Коды маркировки'");
		КомандаПечати.Обработчик     = "СобытияФормИСМПКлиент.КомандаОткрытьФормуПечатиКодовМаркировки";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КоллекцияКомандПечати, КомандыПечати);
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

// Дополнительные настройки списка команд печати в журналах документов.
//
// см. УправлениеПечатьюПереопределяемый.ПриПолученииНастроекСпискаКомандПечати
//
Процедура ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Позволяет выполнить постобработку печатных форм при их формировании.
// Например, можно вставить в колонтитул дату формирования печатной формы.
// Вызывается после завершения процедуры Печать менеджера печати объекта, имеет те же параметры.
//
// см. УправлениеПечатьюПереопределяемый.ПриПечати
//
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	//++ Локализация
	
	// ЭлектронноеВзаимодействие
	ЭлектронноеВзаимодействие.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	// Конец ЭлектронноеВзаимодействие
	
	
	//-- Локализация
	
КонецПроцедуры

// Позволяет изменить внешний вид и поведение формы, например, разместить на ней дополнительные элементы:
// информационные надписи, кнопки, гиперссылки, различные настройки и т.п.
//
// см. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере
//
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ Локализация


	// ЭлектронноеВзаимодействие
	ЭлектронноеВзаимодействие.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие
	//-- Локализация
	
КонецПроцедуры

// Дополняет сведения о юр/физлице
//
// Параметры:
//  СписокПолей - Строка - список полей структуры ФормированиеПечатныхФорм.СведенияОЮрФизЛице
//
Процедура ДополнитьСведенияОЮрФизЛицеВСпискеПолей(СписокПолей) Экспорт
	//++ Локализация
	СписокПолей = СписокПолей + ",ОГРН, БИКРКЦ";
	//-- Локализация
КонецПроцедуры

// Формирует сведения об указанном юридическом или физическом лице.
// К сведениям относятся: наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  Сведения - Структура - собранные сведения.
//  Реквизиты - Структура - реквизиты ЮрФизЛице.
//  ЮрФизЛицо  - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - Дата - дата, на которую выбираются сведения о ЮрФизЛице.
//
Процедура ДополнитьСведенияОЮрФизЛице(Сведения, Реквизиты, ЮрФизЛицо, ДатаПериода) Экспорт
	//++ Локализация
	Если ЗначениеЗаполнено(ЮрФизЛицо)
		И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
	
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Сведения.Вставить("КодОКВЭД", Реквизиты.КодОКВЭД);
			Сведения.Вставить("СтранаРегистрации", Реквизиты.СтранаРегистрации);
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Сведения.Вставить("КодОКВЭД", "");
			Сведения.Вставить("НалоговыйНомерВСтранеРегистрации", Реквизиты.НалоговыйНомер);
			Сведения.Вставить("СтранаРегистрации", Реквизиты.СтранаРегистрации);
		КонецЕсли;
		Сведения.Вставить("КодПоОКПО", 					 Реквизиты.КодПоОКПО);
		
		РеквизитЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ЮрФизЛицо");
		
		Если РеквизитЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			ИЛИ РеквизитЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
				Сведения.Вставить("КПП", ОрганизацииЛокализацияПовтИсп.КППНаДату(ЮрФизЛицо, ДатаПериода));
			Иначе
				Сведения.Вставить("КПП", Реквизиты.КПП);
			КонецЕсли
		Иначе
			Сведения.Вставить("КПП", "");
		КонецЕсли;
		
		Если РеквизитЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
			Или РеквизитЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
			ОГРН = "";
			
			Если Реквизиты.Свойство("ОГРН") Тогда
				ОГРН = Реквизиты.ОГРН;
			ИначеЕсли Реквизиты.Свойство("РегистрационныйНомер") Тогда
				ОГРН = Реквизиты.РегистрационныйНомер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОГРН) Тогда
				Сведения.Вставить("ОГРН", ОГРН);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
				Сведения.Вставить("СвидетельствоСерияНомер", Реквизиты.СвидетельствоСерияНомер);
				Сведения.Вставить("СвидетельствоДатаВыдачи", Реквизиты.СвидетельствоДатаВыдачи);
			Иначе
				Сведения.Вставить("СвидетельствоСерияНомер", "");
				Сведения.Вставить("СвидетельствоДатаВыдачи", Дата(1, 1, 1));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Дополняет сведения о банковском счете
//
// Параметры:
//  РеквизитыСчета - Структура - реквизиты счета
//  Сведения - Структура - собранные сведения.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - ссылка на счет.
//
Процедура ДополнитьСведенияОБанковскомСчете(РеквизитыСчета, Сведения, БанковскийСчет) Экспорт
	//++ Локализация
	Сведения.Вставить("БИК", РеквизитыСчета.БИК);
	Сведения.Вставить("БИКРКЦ", РеквизитыСчета.БИКРКЦ);
	//-- Локализация
КонецПроцедуры
 
// Получает название вида контактной информации. 
//
// Параметры:
//  Объект - СправочникСсылка -  объект контактной информации.
//  ТипАдреса - Строка - тип запрашиваемого адреса. Может содержать значения: "", "Фактический", "Регистрации", "Юридический"
//  ВидКонтактнойИнформации - Строка - наименование вида контактной информации (возвращаемое значение).
//
Процедура ПолучитьВидКонтактнойИнформации(Объект, ТипАдреса, ВидКонтактнойИнформации = "Адрес") Экспорт
	//++ Локализация
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Если ТипАдреса = "Фактический" Тогда
			ВидКонтактнойИнформации = "ФактАдресОбособленногоПодразделения";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			ВидКонтактнойИнформации = "ЮрАдресОбособленногоПодразделения";
		Иначе
			ВидКонтактнойИнформации = "АдресОбособленногоПодразделения";
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Формирует форматную строку согласно "Унифицированному формату электронных банковских сообщений" для ее отображения в
// виде QR-кода.
// 
// Параметры:
// 	ТекстСтроки - Строка - Параметр, в котором возвращается строка для формирования QR-кода.
// 	ДанныеДокумента  - Структура - Содержит значения полей документа.
// 
Процедура СформироватьСтрокуВФорматеЭлектронныхБанковскихСообщений(ТекстСтроки, ДанныеДокумента) Экспорт
	//++ Локализация
	ТекстСтроки = УправлениеПечатьюРФ.ФорматнаяСтрокаУФЭБС(ДанныеДокумента);
	//-- Локализация
КонецПроцедуры

// Позволяет задать дополнительные настройки команд печати.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных   - ОбъектМетаданных - к которому подключены источники команд
//   КомандыПечати 		- см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ПриПолученииКомандПечати(ПолноеИмяОбъектаМетаданных, КомандыПечати) Экспорт
	
	//++ Локализация
	
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ПолноеИмяОбъектаМетаданных , СтруктураДанныхОбъектаПечати) Экспорт
	//++ Локализация
	Если ПолноеИмяОбъектаМетаданных = "Документ.СчетФактураВыданный"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СчетФактураВыданныйАванс"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СчетФактураНалоговыйАгент"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СчетФактураНаНеподтвержденнуюРеализацию0"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СчетФактураКомиссионеру"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ТранспортнаяНакладная" Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти