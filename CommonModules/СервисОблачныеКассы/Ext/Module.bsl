///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОблачныеКассы".
// ОбщийМодуль.СервисОблачныеКассы.
//
// Серверные процедуры обмена данными с Облачными кассами:
//  - запрос списка доступных касс;
//  - запрос состояния кассы;
//  - запрос на пробитие чека;
//  - запрос статуса пробития чека;
//  - запрос токена доступа.
//  - обработка ответов с преобразованием данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения               = Новый Массив();
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервиса(),
		443,
		НСтр("ru = 'Сервис интеграции с Облачными кассами'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

#Область БазоваяФункциональностьБИП

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие из КлючИЗначение:
//    * Ключ - Строка - хост сервиса.
//    * Значение - Строка - название сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервиса(),
		НСтр("ru = 'Облачные кассы'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоступныеОблачныеКассы

// Выполняет обращение к сервису доступных Облачных касс.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ОблачныеКассы - Массив из см. НовыйДоступнаяОблачнаяКасса
//
Функция ДоступныеОблачныеКассы() Экспорт
	
	ДоступныеОблачныеКассы = Новый Массив();	// Массив из см. НовыйДоступнаяОблачнаяКасса
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("ОблачныеКассы", ДоступныеОблачныеКассы);
	
	URLЗапроса       = URLОперацииСервиса("/public/providers");
	ПараметрыЗапроса = НовыйПараметрыЗапроса();
	
	РезультатЗапроса = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLЗапроса,
		,
		,
		ПараметрыЗапроса);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получена информация о доступных Облачных кассах:
				|%1'",
				КодОсновногоЯзыка),
			РезультатЗапроса.Содержимое));
	
	Если ПустаяСтрока(РезультатЗапроса.КодОшибки)
		И РезультатЗапроса.КодСостояния = 200 Тогда
		
		// Ожидаемый формат ответа:
		// [
		//   {
		//     "id": "",
		//     "integrationEnabled": true,
		//     "name": "Облачная касса",
		//     "authorizationType": "Basic",
		//     "personalPageUrl": "https://online-kassa.ru"
		//   }
		// ]
		
		ДанныеОтвета = JSONВЗначение(РезультатЗапроса.Содержимое);	// Массив из Структура
		Для Каждого СтрокаЗапроса Из ДанныеОтвета Цикл
			
			ДоступнаяОблачнаяКасса = НовыйДоступнаяОблачнаяКасса();
			ЗаполнитьЗначенияСвойств(ДоступнаяОблачнаяКасса, СтрокаЗапроса);
			
			ДоступныеОблачныеКассы.Добавить(ДоступнаяОблачнаяКасса);
			
		КонецЦикла;
		
	Иначе
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить список доступных Облачных касс.
				|%1
				|
				|Техническая информация об ошибке:
				|URL: %2 %3 (%4)
				|Код ошибки: %5
				|X-Correlation-ID: %6
				|Подробная информация:
				|%7'",
				КодОсновногоЯзыка),
			РезультатЗапроса.СообщениеОбОшибке,
			ПараметрыЗапроса.Метод,
			URLЗапроса,
			РезультатЗапроса.КодСостояния,
			РезультатЗапроса.КодОшибки,
			ПараметрыЗапроса.Заголовки["X-Correlation-ID"],
			РезультатЗапроса.ИнформацияОбОшибке);
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		
		ДанныеОшибки = ДанныеОшибкиСервиса(РезультатЗапроса.Содержимое);
		
		Результат.КодОшибки          = ПереопределитьКодОшибкиСервиса(РезультатЗапроса.КодСостояния);
		Результат.СообщениеОбОшибке  = ПереопределитьСообщениеПользователю(Результат.КодОшибки, ДанныеОшибки.type);
		Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Описание нового объекта информации о доступной Облачной кассе в сервисе.
//
// Возвращаемое значение:
//  Структура:
//    * id - Строка - идентификатор Облачной кассы.
//    * integrationEnabled - Булево - признак доступности использования Облачной кассы.
//    * name - Строка - наименование Облачной кассы.
//    * authorizationType - Строка - тип аутентификации в сервисах Облачной кассы.
//        Список типов:
//          "Basic" - способ аутентификации по логину и паролю.
//          "Bearer" - способ аутентификации по токену.
//          "SalesRegisterGroup" - особый тип аутентификации работающий по приниципу Resource Owner Password Credentials
//            Grant.
//    * personalPageUrl - Строка - адрес страницы о сервисе.
//
Функция НовыйДоступнаяОблачнаяКасса()
	
	Результат = Новый Структура();
	Результат.Вставить("id"                , "");
	Результат.Вставить("integrationEnabled", Ложь);
	Результат.Вставить("name"              , "");
	Результат.Вставить("authorizationType" , "");
	Результат.Вставить("personalPageUrl"   , "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СостояниеКассы

// Выполняет запрос к сервису проверки состояния Облачной кассы.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//  ОбновитьТокен - Булево - признак принудительного обновления токена с целью проверки параметров аутентификации.
//    Значение по умолчанию: Ложь.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * Результат - Неопределено - ошибка получения состояния Облачной кассы.
//                - Структура - тело ответа на запрос состояния Облачной кассы.
//
Функция СостояниеКассы(ПараметрыПодключения, ОбновитьТокен = Ложь) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление состояния Облачной кассы %1.
				|ОбновитьТокен: %2'",
				КодОсновногоЯзыка),
			ПараметрыПодключения.Идентификатор,
			Строка(ОбновитьТокен)));
	
	ОтветСервиса        = Неопределено;	// Неопределено, Структура
	СписокСвойствОшибки = "КодОшибки,СообщениеОбОшибке,ИнформацияОбОшибке";
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("Результат", ОтветСервиса);
	
	АутентификацияКассы = ПараметрыАутентификацииОблачнойКассы(ПараметрыПодключения, ОбновитьТокен);
	Если Не ПустаяСтрока(АутентификацияКассы.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, АутентификацияКассы, СписокСвойствОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось обновить состояние Облачной кассы %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о состоянии Облачной кассы %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
		
	ПараметрыОперации = НовыйПараметрыОперацииСервисаGET("/kkts");
	
	РезультатЗапроса = ВыполнитьОперациюСервиса(
		ПараметрыПодключения,
		ПараметрыОперации,
		АутентификацияКассы,
		ТекстОшибки,
		ТекстЛога,
		Ложь,
		Не ОбновитьТокен);
	
	Если ПустаяСтрока(РезультатЗапроса.КодОшибки) Тогда
		Результат.Результат = РезультатЗапроса.ДанныеОтвета;
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПробитиеЧека

// Выполняет отправку запроса на пробитие чека в Облачной кассе.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - ссылка на документ инициирующий пробитие чека.
//  ПараметрыПодключения - см. ПараметрыПодключения
//  ДанныеЗапроса - см. ДанныеЗапросаНаПробитиеЧека
//
// Возвращаемое значение:
//  Структура - Пробить чек:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеОперации - Неопределено - ошибка отправки запроса на пробитие чека.
//                     - см. НовыйДанныеОперации
//    * Результат - Неопределено - ошибка отправки запроса на пробитие чека.
//                - Структура - данные ответа Облачный кассы.
//
Функция ПробитьЧек(ДокументОперации, ПараметрыПодключения, ДанныеЗапроса) Экспорт
	
	ДанныеОперации      = Неопределено; // Неопределено, см. НовыйДанныеОперации
	ОтветСервиса        = Неопределено; // Неопределено, Структура
	СписокСвойствОшибки = "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке";
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("ДанныеОперации", ДанныеОперации);
	Результат.Вставить("Результат"     , ОтветСервиса);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрос на пробитие чека в Облачной кассе %1.
				|Документ операции: %2
				|Данные чека:
				|%3'",
				КодОсновногоЯзыка),
			ПараметрыПодключения.Идентификатор,
			Строка(ДокументОперации),
			ЗначениеВJSON(ДанныеЗапроса)));
	
	АутентификацияКассы = ПараметрыАутентификацииОблачнойКассы(ПараметрыПодключения);
	Если Не ПустаяСтрока(АутентификацияКассы.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, АутентификацияКассы, СписокСвойствОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось пробить чек в Облачной кассе %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о пробитии чека в Облачной кассе %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
		
	ПараметрыОперации = НовыйПараметрыОперацииСервисаPOST("/kkts/receipts", ДанныеЗапроса);
	
	// Вызов операции выполняется в 6 итераций. Повторные вызовы операции требуются для случаев, когда результат
	// выполнения пробития чека не определен. Обычно операция пробития чека не занимает много времени, но в ряде случаев
	// время обработки может быть увеличено.
	// Между вызовами добавляется пауза, чтобы не нагружать сервис.
	//
	// Паузы между вызовами:
	// - между 2-м и 3-м вызовом делается пауза 3 секунды;
	// - между 3-м и 4-м вызовом делается пауза 5 секунд;
	// - между 4-м и 5-м вызовом делается пауза 10 секунд;
	// - между 5-м и 6-м вызовом делается пауза 15 секунд;
	
	НомерПопытки = 1;
	Пока НомерПопытки <= 6 Цикл
		
		РезультатЗапроса = ВыполнитьОперациюСервиса(
			ПараметрыПодключения,
			ПараметрыОперации,
			АутентификацияКассы,
			ТекстОшибки,
			ТекстЛога);
		
		Если РезультатЗапроса.КодСостояния < 500
			И РезультатЗапроса.КодСостояния <> 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если НомерПопытки = 2 Тогда
			ИнтернетПоддержкаПользователей.Пауза(3);
		ИначеЕсли НомерПопытки = 3 Тогда
			ИнтернетПоддержкаПользователей.Пауза(5);
		ИначеЕсли НомерПопытки = 4 Тогда
			ИнтернетПоддержкаПользователей.Пауза(10);
		ИначеЕсли НомерПопытки = 5 Тогда
			ИнтернетПоддержкаПользователей.Пауза(15);
		КонецЕсли;
		
		НомерПопытки = НомерПопытки + 1;
		
	КонецЦикла;
	
	Если ПустаяСтрока(РезультатЗапроса.КодОшибки) Тогда
		ОбработатьОтветВыполненияОперации(Результат, РезультатЗапроса.ДанныеОтвета);
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса, СписокСвойствОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует новый объект содержащий служебные операции пробития чека которые возврщает сервер Облачной кассы.
//
// Возвращаемое значение:
//  Структура:
//    * ИдентификаторОперации - Строка - идентификатор операции в информационной базе.
//    * СтатусОперации - Строка - результат выполнения операции Облачной кассы.
//      Список статусов:
//        см. ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена - успешное завершение операции.
//        см. ОблачныеКассыКлиентСервер.СтатусОперацииОтменена - операция отмена.
//        см. ОблачныеКассыКлиентСервер.СтатусОперацииВыполняется - операция выполняется. Для обновления статуса следует
//          вызвать метод см. ОблачныеКассы.СтатусПробитияЧека.
//    * ИдентификаторЧека - Строка - идентификатор операции в системе Облачной кассы.
//    * ОписаниеСтатусаОперации - Строка - описание статуса выполнения операции, полученное из Облачной кассы.
//
Функция НовыйДанныеОперации() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторОперации"  , "");
	Результат.Вставить("СтатусОперации"         , "");
	Результат.Вставить("ИдентификаторЧека"      , "");
	Результат.Вставить("ОписаниеСтатусаОперации", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусПробитияЧека

// Выполняет запрос информации о статусе операции в сервисе Облачной кассе.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//  ИдентификаторЧека - Строка - идентификатор чека в сервиса Облачная касса.
//  НастройкиВызова - Неопределено - настройки длительного ожидания терминального статуса не настроены.
//                  - см. НовыйИтеративныйВызовОперации
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеОперации - Неопределено - поле "КодОшибки" заполнено.
//                     - см. НовыйДанныеОперации
//    * Результат - Неопределено - поле "КодОшибки" заполнено.
//                - Структура - тело ответа на запрос статуса чека Облачной кассы.
//
Функция СтатусПробитияЧека(ПараметрыПодключения, ИдентификаторЧека, НастройкиВызова = Неопределено) Экспорт
	
	ДанныеОперации      = Неопределено;	// Неопределено, см. НовыйДанныеОперации
	ОтветСервиса        = Неопределено;	// Неопределено, Структура
	СписокСвойствОшибки = "КодОшибки,СообщениеОбОшибке,ИнформацияОбОшибке";
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("ДанныеОперации", ДанныеОперации);
	Результат.Вставить("Результат"     , ОтветСервиса);
	
	АутентификацияКассы = ПараметрыАутентификацииОблачнойКассы(ПараметрыПодключения);
	Если Не ПустаяСтрока(АутентификацияКассы.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, АутентификацияКассы, СписокСвойствОшибки);
		Возврат Результат;
	КонецЕсли;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось получить статус чека Облачной кассы %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получена информация о статусе чека Облачной кассы %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
		
	ПараметрыОперации = НовыйПараметрыОперацииСервисаGET("/kkts/receipts/{receiptId}");
	ПараметрыОперации.uriVariables.Вставить("receiptId", ИдентификаторЧека);
	
	// Если настройка вызова сервиса не настроена, то выполним один запрос
	Если НастройкиВызова = Неопределено Тогда
		НастройкиВызова = НовыйИтеративныйВызовОперации(0);
	КонецЕсли;
	
	Пока ВозможенВызовОперации(НастройкиВызова) Цикл
		
		РезультатЗапроса = ВыполнитьОперациюСервиса(
			ПараметрыПодключения,
			ПараметрыОперации,
			АутентификацияКассы,
			ТекстОшибки,
			ТекстЛога);
		
		Если ПустаяСтрока(РезультатЗапроса.КодОшибки) Тогда
			ОбработатьОтветВыполненияОперации(Результат, РезультатЗапроса.ДанныеОтвета);
			Если ОблачныеКассыСлужебный.ТерминальныйСтатус(Результат.ДанныеОперации.СтатусОперации) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса, СписокСвойствОшибки);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL запроса, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров аутентификации пользователя Интернет-поддержки:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//        Список ошибок:
//          "" - операция выполнена успешно.
//          "ОшибкаАутентификацииИнтернетПоддержки" - ошибка получения данных аутентификации в сервисах
//            Интернет-поддержки.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * Аутентификация - Строка - строка аутентификации для использования в заголовке запроса.
//
Функция ПараметрыАутентификацииИПП(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("Аутентификация", "");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации(
				РезультатПолученияТикета.Тикет);
		Иначе
			
			Результат.КодОшибки          = КодОшибкиОшибкаАутентификации();
			Результат.СообщениеОбОшибке  = РезультатПолученияТикета.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1.
					|Не удалось получить тикет аутентификации Интернет-поддержки.
					|%2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				URLОперации,
				РезультатПолученияТикета.ИнформацияОбОшибке);
			
			ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке, Истина);
			
		КонецЕсли;
	Иначе
		
		ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ПараметрыАутентификации = Неопределено Тогда
			
			Результат.КодОшибки          = КодОшибкиОшибкаАутентификации();
			Результат.СообщениеОбОшибке  = НСтр(
				"ru = 'Для работы с сервисом необходимо подключить Интернет-поддержку пользователей.'");
			Результат.ИнформацияОбОшибке = НСтр(
				"ru = 'Не заполнены данные аутентификации Интернет-поддержки пользователей.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
			
		Иначе
			Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
				ПараметрыАутентификации.Логин,
				ПараметрыАутентификации.Пароль);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные аутентификации в Облачной кассе.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//  ОбновитьТокен - Булево - Истина, если необходимо обновить токен с типом аутентификации SALES_REGISTER_GROUP
//    Значение по умолчанию: Ложь.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * Аутентификация - Строка - строка аутентификации для использования в заголовке запроса.
//
Функция ПараметрыАутентификацииОблачнойКассы(ПараметрыПодключения, ОбновитьТокен = Ложь)
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("Аутентификация", "");
	
	ПараметрыАутентификации = ПараметрыПодключения.ПараметрыАутентификации;
	Если ПараметрыАутентификации.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup() Тогда
		
		// Данные токена должны быть удалены из ИБ в принудительном порядке, для получения обновленной информации.
		Если ОбновитьТокен
			И ПараметрыАутентификации.Токен <> "" Тогда
			
			ПараметрыАутентификации.Токен              = "";
			ПараметрыАутентификации.ТокенТип           = "";
			ПараметрыАутентификации.ТокенДатаИстечения = 0;
			
			ОблачныеКассыСлужебный.СохранитьПараметрыАутентификации(
				ПараметрыПодключения.НастройкаПодключения,
				ПараметрыАутентификации);
			
		КонецЕсли;
		
		ДатаТокена = ПараметрыАутентификации.ТокенДатаИстечения;
		Если ДатаТокена = 0
			Или ПараметрыАутентификации.Токен = ""
			Или ТекущаяУниверсальнаяДатаВМиллисекундах() > ДатаТокена Тогда
			
			ДанныеТокена = ТокенДоступа(ПараметрыПодключения);
			Если ПустаяСтрока(ДанныеТокена.КодОшибки) Тогда
				ПараметрыАутентификации.Токен              = ДанныеТокена.Токен;
				ПараметрыАутентификации.ТокенТип           = ДанныеТокена.ТипТокена;
				ПараметрыАутентификации.ТокенДатаИстечения = ТекущаяУниверсальнаяДатаВМиллисекундах()
					+ ДанныеТокена.ИстечениеСрока * 60000;
			Иначе
				ЗаполнитьЗначенияСвойств(Результат, ДанныеТокена, "КодОшибки,СообщениеОбОшибке,ИнформацияОбОшибке");
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДатаТокена <> ПараметрыАутентификации.ТокенДатаИстечения
			И ЗначениеЗаполнено(ПараметрыПодключения.НастройкаПодключения) Тогда
			
			ОблачныеКассыСлужебный.СохранитьПараметрыАутентификации(
				ПараметрыПодключения.НастройкаПодключения,
				ПараметрыАутентификации);
			
		КонецЕсли;
		
		Результат.Аутентификация = ПараметрыАутентификации.ТокенТип
			+ " "
			+ ПараметрыАутентификации.Токен;
		
	ИначеЕсли ПараметрыАутентификации.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBearer() Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации(
			ПараметрыАутентификации.Токен);
	ИначеЕсли ПараметрыАутентификации.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииBasic() Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
			ПараметрыАутентификации.Логин,
			ПараметрыАутентификации.Пароль);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный тип аутентификации: %1.'"),
			Строка(ПараметрыАутентификации.ТипАутентификации));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запрос к сервису получения токена аутентификации в серсисах Облачной кассы.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * Токен - Строка - токен аутентификации.
//    * ТипТокена - Строка - тип аутентификации.
//    * ИстечениеСрока - Число - количество минут жизни токена аутентификации.
//
Функция ТокенДоступа(ПараметрыПодключения)
	
	СписокСвойствОшибки = "КодОшибки,СообщениеОбОшибке,ИнформацияОбОшибке";
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("Токен"         , "");
	Результат.Вставить("ТипТокена"     , "");
	Результат.Вставить("ИстечениеСрока", 0);
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось обновить токен аутентификации Облачной кассы %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
	ТекстЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка обновления токена доступа Облачной кассы %1.'", КодОсновногоЯзыка),
		ПараметрыПодключения.Идентификатор);
	
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("shopId"     , ПараметрыПодключения.ПараметрыАутентификации.ИдентификаторМагазина);
	ДанныеЗапроса.Вставить("shopSecret" , ПараметрыПодключения.ПараметрыАутентификации.СекретныйКлючМагазина);
	ДанныеЗапроса.Вставить("kktsGroupId", ПараметрыПодключения.ПараметрыАутентификации.ИдентификаторГруппыКасс);
	
	ПараметрыОперации = НовыйПараметрыОперацииСервисаPOST("/auth/tokens", ДанныеЗапроса);
	
	РезультатЗапроса = ВыполнитьОперациюСервиса(
		ПараметрыПодключения,
		ПараметрыОперации,
		Неопределено,
		ТекстОшибки,
		ТекстЛога,
		Истина,
		Ложь);
	
	Если ПустаяСтрока(РезультатЗапроса.КодОшибки) Тогда
		
		// Ожидаемый формат ответа:
		// {
		//   "accessToken": "9179d710-56a4-49ea-b042-435e3257eaf6",
		//   "tokenType": "Bearer"
		//   "expiresIn": 1440
		// }
		
		ОтветСервиса = Новый Структура();
		ОтветСервиса.Вставить("accessToken", "");
		ОтветСервиса.Вставить("tokenType"  , "");
		ОтветСервиса.Вставить("expiresIn"  , 0);
		
		ЗаполнитьЗначенияСвойств(ОтветСервиса, РезультатЗапроса.ДанныеОтвета);
		
		Результат.Токен          = ОтветСервиса.accessToken;
		Результат.ТипТокена      = ОтветСервиса.tokenType;
		Результат.ИстечениеСрока = ОтветСервиса.expiresIn;
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Получен новый токен доступа Sales Register Group.'", КодОсновногоЯзыка));
		
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса, СписокСвойствОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИтеративныйВызов

// Создает описание настроек длительного вызова.
// Настройки вызова сервиса проверяются методом см. ВозможенВызовОперации.
//
// Параметры:
//  Длительность - Число - количество секунд отведенных на выполнение операции.
//
// Возвращаемое значение:
//  Структура - результат итеративного вызова:
//    * Длительность - Число - количество секунд отведенных на выполнение операции.
//    * НачалоОперации  - Дата - период отчета длительности вызова.
//    * Ожидание - Число - частота выполнения операций в секундах.
//    * МаксимальноеКоличествоЗапросов - Число - ограничение на максимально возможное количество запросов.
//    * НакопленноеЗначениеВремени - Дата - общее накопленное время за длительную операцию.
//    * КоличествоИтераций - Число - текущее количество выполненных запросов.
//
Функция НовыйИтеративныйВызовОперации(Длительность) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Длительность"                  , Длительность);
	Результат.Вставить("НачалоОперации"                , ТекущаяДатаСеанса());
	Результат.Вставить("Ожидание"                      , 3);
	Результат.Вставить("МаксимальноеКоличествоЗапросов", 300);
	Результат.Вставить("НакопленноеЗначениеВремени"    , Результат.НачалоОперации);
	Результат.Вставить("КоличествоИтераций"            , 0);
	
	// Если длительность операции не заполнена, то будет выполнен один вызов операции.
	Если Результат.Длительность = 0 Тогда
		Результат.МаксимальноеКоличествоЗапросов = 1;
	
	// Для небольшого значения длительности будет выполнено второй вызова с одим ожидаением.
	ИначеЕсли Результат.Длительность < 3 Тогда
		Результат.МаксимальноеКоличествоЗапросов = 2;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет доступность вызова операции в рамках длительного вызова.
//
// Параметры:
//  НастройкиВызова - см. НовыйИтеративныйВызовОперации
//
// Возвращаемое значение:
//  Булево - если Истина, то правила настроки вызова разрешают выполнить очередной вызов.
//
Функция ВозможенВызовОперации(НастройкиВызова)
	
	Ожидание    = НастройкиВызова.Ожидание;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Прервать вызовы в случае превышения максимального количества запросов.
	Если НастройкиВызова.МаксимальноеКоличествоЗапросов <= НастройкиВызова.КоличествоИтераций Тогда
		Возврат Ложь;
	
	// Прервать вызовы в случае превышения длительности.
	ИначеЕсли НастройкиВызова.КоличествоИтераций > 0
		И НастройкиВызова.Длительность >= 3
		И (НастройкиВызова.НачалоОперации + НастройкиВызова.Длительность) < ТекущаяДата Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Первая итерации выполняется без ожидания
	Если НастройкиВызова.КоличествоИтераций = 0 Тогда
		Ожидание = 0;
	
	// Для второй итерации время ожидания необходимо увеличить т.к. маловероятно, что при первом вызове будет получен
	// терминальный статус операции.
	ИначеЕсли НастройкиВызова.КоличествоИтераций = 1 Тогда
		Ожидание = Ожидание + 1;
	КонецЕсли;
	
	Если Ожидание > 0 Тогда
		
		// Ожидание истечения времени задержки между вызовами.
		// Если запросы выполнять без ограничения, возрастет нагрузка на сервис, при этом пользователи не почувствуют
		// существенного изменения времени выполнения операции.
		ИнтернетПоддержкаПользователей.Пауза(Ожидание);
		
	КонецЕсли;
	
	НастройкиВызова.НакопленноеЗначениеВремени = ТекущаяДата;
	НастройкиВызова.КоличествоИтераций         = НастройкиВызова.КоличествоИтераций + 1;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОтвета

// Выполняет обработку полученного ответа из сервиса Облачной кассы.
// Результат обработки заполняется в Приемник в свойства "ДанныеОперации" и "Результат".
//
// Параметры:
//  Приемник - см. ЗапросСтатусаЧека
//  ОтветСервиса - Структура - данные ответа из сервиса.
//
Процедура ОбработатьОтветВыполненияОперации(Приемник, ОтветСервиса)
	
	// Чтение первого уровня данных ответа. Ожидаемый формат ответа:
	// {
	//    "operationResponse": {
	//      "operationStatus": "SUCCESS",
	//      "operationId": "57494e17-d016-487b-aaa2-188d107bdef2",
	//      "receiptId": "57494e17-d016-487b-aaa2-188d107bdef2",
	//      "operationStatusDescription": "Операция выполнена"
	//    },
	//    "receiptResponse": {}
	// }
	
	ДанныеОтвета = Новый Структура("operationResponse,receiptResponse");
	ЗаполнитьЗначенияСвойств(ДанныеОтвета, ОтветСервиса);
	
	// Обработка служебных данных
	СлужебныеДанныеОтвета = Новый Структура();
	СлужебныеДанныеОтвета.Вставить("operationId"               , "");
	СлужебныеДанныеОтвета.Вставить("operationStatus"           , "");
	СлужебныеДанныеОтвета.Вставить("receiptId"                 , "");
	СлужебныеДанныеОтвета.Вставить("operationStatusDescription", "");
	
	ЗаполнитьЗначенияСвойств(СлужебныеДанныеОтвета, ДанныеОтвета.operationResponse);
	
	ДанныеОперации = НовыйДанныеОперации();
	ДанныеОперации.ИдентификаторОперации   = СлужебныеДанныеОтвета.operationId;
	ДанныеОперации.СтатусОперации          = ПреобразоватьСтатусОперацииСервиса(СлужебныеДанныеОтвета.operationStatus);
	ДанныеОперации.ОписаниеСтатусаОперации = СлужебныеДанныеОтвета.operationStatusDescription;
	ДанныеОперации.ИдентификаторЧека       = СлужебныеДанныеОтвета.receiptId;
	
	Приемник.ДанныеОперации = ДанныеОперации;
	
	// Результат фискализации возврщается как есть
	Приемник.Результат = ДанныеОтвета.receiptResponse;
	
КонецПроцедуры

// Выполняет конвертацию статус операции сервиса в статус операции подсистемы.
//
// Параметры:
//  Статус - Строка - статус операции сервиса. Если переданный статус отсутствует в списке статусов описанные ниже, то
//    будет вызвано исключение.
//    Список статусов:
//      см. СтатусОперацииВПроцессе - операция выполняется.
//      см. СтатусОперацииВыполнена - операция завершена успешно.
//      см. СтатусОперацииОтменена - операция отмена.
//
// Возвращаемое значение:
//  Строка - статус операции подсистемы.
//    Список статусов:
//      см. ОблачныеКассыКлиентСервер.СтатусОперацииВыполняется - операция выполняется.
//      см. ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена - операция завершена успешно.
//      см. ОблачныеКассыКлиентСервер.СтатусОперацииОтменена - операция отмена.
//
Функция ПреобразоватьСтатусОперацииСервиса(Статус)
	
	Если Статус = СтатусОперацииВПроцессе() Тогда
		Возврат ОблачныеКассыКлиентСервер.СтатусОперацииВыполняется();
	ИначеЕсли Статус = СтатусОперацииВыполнена() Тогда
		Возврат ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли Статус = СтатусОперацииОтменена() Тогда
		Возврат ОблачныеКассыКлиентСервер.СтатусОперацииОтменена();
	Иначе
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Передан не валидный статус операции %1.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Статус);
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		ВызватьИсключение ИнформацияОбОшибке;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Определяет хост для вызова сервиса Облачные кассы.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервиса()
	
	
	Возврат "cloud-sales-register-integration.1c.ru";
	
КонецФункции

// Определяет URL для вызова сервиса Облачных касс.
//
// Параметры:
//  Операция - Строка - путь к ресурсу.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция)
	
	Возврат "https://"
		+ ХостСервиса()
		+ "/public/program-1c"
		+ Операция;
	
КонецФункции

// Формирует описание параметров выполнения операции к сервису Облачной кассы методом GET.
//
// Параметры:
//  Адрес - Строка - относительный адрес операции в сервисах Облачной кассы.
//
// Возвращаемое значение:
//  Структура:
//    * method - Строка - http метод "GET".
//    * path - Строка - относительный адрес операции в сервисах Облачной кассы. Заполняется по входному параметру Адрес.
//    * requestHeaders - Соответствие из КлючИЗначение - список заголовков запроса:
//        ** Ключ - Строка
//        ** Значение - Строка
//    * uriVariables - Соответствие из КлючИЗначение - список параметров URI:
//        ** Ключ - Строка - имя параметра в поле "path".
//        ** Значение - Строка - значение подмены.
//    * queryParams - Соответствие из КлючИЗначение - список параметров запроса:
//        ** Ключ - Строка
//        ** Значение - Массив из Строка, Строка
//
Функция НовыйПараметрыОперацииСервисаGET(Адрес)
	
	Заголовки        = Новый Соответствие();
	ПараметрыURI     = Новый Соответствие();
	ПараметрыЗапроса = Новый Соответствие();
	
	Результат = Новый Структура();
	Результат.Вставить("method"        , "GET");
	Результат.Вставить("path"          , Адрес);
	Результат.Вставить("requestHeaders", Заголовки);
	Результат.Вставить("uriVariables"  , ПараметрыURI);
	Результат.Вставить("queryParams"   , ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Формирует описание параметров выполнения операции к сервису Облачной кассы методом POST.
//
// Параметры:
//  Адрес - Строка - относительный адрес операции в сервисах Облачной кассы.
//  ДанныеЗапроса - Структура - данные запроса в формате Структура.
//
// Возвращаемое значение:
//  Структура:
//    * method - Строка - http метод "POST".
//    * path - Строка - относительный адрес операции в сервисах Облачной кассы. Заполняется по входному параметру Адрес.
//    * requestHeaders - Соответствие из КлючИЗначение - список заголовков запроса:
//        ** Ключ - Строка
//        ** Значение - Строка
//    * uriVariables - Соответствие из КлючИЗначение - список параметров URI:
//        ** Ключ - Строка - имя параметра в поле "path".
//        ** Значение - Строка - значение подмены.
//    * queryParams - Соответствие из КлючИЗначение - список параметров запроса:
//        ** Ключ - Строка
//        ** Значение - Массив из Строка, Строка
//    * requestBodyJsonObject - Неопределено - данные запроса отсутствуют.
//                            - Структура - данные запроса в формате Структура.
//
Функция НовыйПараметрыОперацииСервисаPOST(Адрес, ДанныеЗапроса)
	
	Результат = НовыйПараметрыОперацииСервисаGET(Адрес);
	Результат.method = "POST";
	
	Результат.Вставить("requestBodyJsonObject", ДанныеЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Описание нового объекта параметров запроса.
//
// Параметры:
//  Метод - Строка - http метод "GET" или "POST".
//    Значение по умолчанию: GET.
//
// Возвращаемое значение:
//  Структура:
//    * Метод - Строка - http метод "GET" или "POST".
//    * Заголовки - Соответствие из КлючИЗначение - заголовки запроса.
//        Для каждого нового объекта добавляется ключ X-Correlation-ID с уникальным идентификатором запроса,
//        X-Program-Nick, X-Configuration-Name, X-Configuration-Version, X-IB-Id, X-IB-User-Name.
//        Для каждого нового объекта с методом POST добавляется ключ Content-Type со значением application/json:
//        ** Ключ - Строка
//        ** Значение - Строка
//    * ФорматОтвета - Число - определяет формат возврата содержимого ответа операции:
//        0 - имя файла ответа;
//        1 - как строка (формат ответа по умолчанию);
//        2 - как двоичные данные.
//    * Таймаут - Число - количество секунд ожидания завершения запроса.
//    * ФорматДанныхДляОбработки - Число - формат отправки данных:
//        0 - имя файла;
//        1 - как строка (формат ответа по умолчанию);
//        2 - как двоичные данные.
//    * ДанныеДляОбработки - Неопределено - данные для обработки не инициализированы.
//                         - Строка - данные для отправки методов передаваемые методом POST.
//
Функция НовыйПараметрыЗапроса(Метод = "GET")
	
	ИдентификаторЗапроса = Строка(
		Новый УникальныйИдентификатор());
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Correlation-ID", ИдентификаторЗапроса);
	Заголовки.Вставить(
		"X-Program-Nick",
		ИнтернетПоддержкаПользователей.ИмяПрограммы());
	Заголовки.Вставить(
		"X-Configuration-Name",
		КодироватьСтроку(
			ИнтернетПоддержкаПользователей.ИмяКонфигурации(),
			СпособКодированияСтроки.КодировкаURL));
	Заголовки.Вставить(
		"X-Configuration-Version",
		ИнтернетПоддержкаПользователей.ВерсияКонфигурации());
	Заголовки.Вставить(
		"X-IB-Id",
		СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	Заголовки.Вставить(
		"X-IB-User-Name",
		КодироватьСтроку(
			ИмяПользователя(),
			СпособКодированияСтроки.КодировкаURL));
	
	Если Метод = "POST" Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;

	ДанныеДляОбработки = Неопределено;	// Неопределено, Строка
	
	Результат = Новый Структура();
	Результат.Вставить("Метод"                   , Метод);
	Результат.Вставить("Заголовки"               , Заголовки);
	Результат.Вставить("ФорматОтвета"            , 1);
	Результат.Вставить("Таймаут"                 , 30);
	Результат.Вставить("ФорматДанныхДляОбработки", 1);
	Результат.Вставить("ДанныеДляОбработки"      , ДанныеДляОбработки);
	
	Возврат Результат;
	
КонецФункции

// Выполняет вызов операции сервиса Облачной кассы.
//
// Параметры:
//  ПараметрыПодключения - см. ОблачныеКассыКлиентСервер.НовыйПараметрыПодключения
//  ДанныеДляОбработки - см. НовыйПараметрыОперацииСервисаОблачнойКассы
//  АутентификацияКассы - Неопределено - операция сервиса Облачной кассы не требует аутентификации.
//                      - см. ПараметрыАутентификацииОблачнойКассы
//  ТекстОшибки - Строка - текст пояснения ошибки, который будет выведен в шапке текста ошибки в выходном поле
//    ИнформацияОбОшибке. Полученный полный текст ошибки будет записан в журнал регистрации как Ошибка.
//  ТекстЛога - Неопределено - логирование полученного ответа в журнал регистрации не требуется. Значение по умолчанию.
//            - Строка - текст пояснения лога, который будет вставлен в шапку текста лога и записан в журнал
//    регистрации.
//  ЛогироватьТолькоОшибки - Булево - если Истина, то логирование полученного ответа будет только если сервис вернул
//    ошибку, в противном случае будут логироваться в журнал регистраций все полученные ответы.
//    Значение по умолчанию: Ложь.
//  ОбновитьТокенПриНеобходимости - Булево - если Истина и параметр АутентификацияКассы заполнен и в ответе на запрос к
//    сервису Облачной кассы был возвращен код ошибки аутентификации и способ аутентификации в Облачной кассе
//    предполагает получение временного токена доступа, то будет выполнено обновление токена доступа и повторная попытка
//    выполнить первоначальный запрос.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * КодСостояния - Число - код состояния http.
//    * ДанныеОтвета - Неопределено - ошибка выполнения операции.
//                   - Структура - данные ответа.
//
Функция ВыполнитьОперациюСервиса(
	ПараметрыПодключения,
	ДанныеДляОбработки,
	АутентификацияКассы,
	ТекстОшибки,
	ТекстЛога = Неопределено,
	ЛогироватьТолькоОшибки = Ложь,
	ОбновитьТокенПриНеобходимости = Истина)
	
	ДанныеОтвета      = Неопределено;	// Неопределено, Структура
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("ДанныеОтвета", ДанныеОтвета);
	
	URLЗапроса = URLОперацииСервиса("/private/providers/"
		+ ПараметрыПодключения.Идентификатор
		+ "/calls/execute-rest-operation-call");
	
	АутентификацииИПП = ПараметрыАутентификацииИПП(URLЗапроса);
	Если Не ПустаяСтрока(АутентификацииИПП.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(Результат, АутентификацииИПП);
		Возврат Результат;
	КонецЕсли;
	
	Если АутентификацияКассы <> Неопределено Тогда
		ДанныеДляОбработки.requestHeaders.Вставить("Authorization", АутентификацияКассы.Аутентификация);
	КонецЕсли;
	
	ПараметрыЗапроса = НовыйПараметрыЗапроса("POST");
	ПараметрыЗапроса.Заголовки.Вставить("Authorization", АутентификацииИПП.Аутентификация);
	
	// Дублирование идентификатора запроса в сервис Облачной кассы
	ДанныеДляОбработки.requestHeaders.Вставить("X-Correlation-ID", ПараметрыЗапроса.Заголовки["X-Correlation-ID"]);
	
	ПараметрыЗапроса.ДанныеДляОбработки = ЗначениеВJSON(ДанныеДляОбработки);
	
	РезультатПортала = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(URLЗапроса, , , ПараметрыЗапроса);
	Если ПустаяСтрока(РезультатПортала.КодОшибки) Тогда
		
		РезультатЗапроса = ОбработатьОтветСервиса(РезультатПортала.Содержимое);
		Если АутентификацияКассы <> Неопределено
			И РезультатЗапроса.КодСостояния = 401
			И ОбновитьТокенПриНеобходимости
			И ПараметрыПодключения.ПараметрыАутентификации.ТипАутентификации = ОблачныеКассыКлиентСервер.ТипАутентификацииSalesRegisterGroup() Тогда
			
			АутентификацияКассы = ПараметрыАутентификацииОблачнойКассы(ПараметрыПодключения, Истина);
			Если ПустаяСтрока(АутентификацияКассы.КодОшибки) Тогда
				Возврат ВыполнитьОперациюСервиса(
					ПараметрыПодключения,
					ДанныеДляОбработки,
					АутентификацияКассы,
					ТекстОшибки,
					ТекстЛога,
					ЛогироватьТолькоОшибки,
					Ложь);
			Иначе
				ЗаполнитьЗначенияСвойств(Результат, АутентификацияКассы);
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.ДанныеОтвета = РезультатЗапроса.Содержимое;
		Если Не ПустаяСтрока(РезультатЗапроса.КодОшибки) Тогда
			РезультатЗапроса.ИнформацияОбОшибке = ЗначениеВJSON(РезультатЗапроса.Содержимое);
		КонецЕсли;
		
	Иначе
		
		РезультатЗапроса = РезультатПортала;
		Попытка
			Результат.ДанныеОтвета = JSONВЗначение(РезультатЗапроса.Содержимое);
		Исключение
			Результат.КодОшибки          = КодОшибкиОшибкаСервиса();
			Результат.СообщениеОбОшибке  = НСтр("ru = 'Ошибка работы с сервисом Облачной кассы.'");
			Результат.ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Результат.КодСостояния = РезультатЗапроса.КодСостояния;
	
	// Логирование результата запроса
	Если Не ПустаяСтрока(ТекстЛога)
		И (Не ЛогироватьТолькоОшибки
			Или Не ПустаяСтрока(РезультатЗапроса.КодОшибки)) Тогда
		
		ШаблонЛогирования = НСтр("ru = '%1
			|%2 %3 (%4)
			|%5'",
			КодОсновногоЯзыка);
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЛогирования,
				ТекстЛога,
				ДанныеДляОбработки.method,
				ДанныеДляОбработки.path,
				РезультатЗапроса.КодСостояния,
				РезультатПортала.Содержимое));
		
	КонецЕсли;
	
	// Обработка ошибки
	Если Не ПустаяСтрока(РезультатЗапроса.КодОшибки) Тогда
		
		ДанныеОшибки = ДанныеОшибкиСервиса(РезультатЗапроса.Содержимое);
		
		Если РезультатЗапроса.КодОшибки <> КодОшибкиОшибкаСервиса() Тогда
			Результат.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатЗапроса.КодСостояния);
			Результат.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(Результат.КодОшибки, ДанныеОшибки.type);
		КонецЕсли;
		
		ШаблонОшибки = НСтр("ru = '%1
			|%2
			|
			|Техническая информация об ошибке:
			|URL: %3 %4 (%5 %6)
			|Код ошибки: %7
			|X-Correlation-ID: %8
			|Подробная информация:
			|%9'",
			КодОсновногоЯзыка);
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ТекстОшибки,
			Результат.СообщениеОбОшибке,
			ДанныеДляОбработки.method,
			ДанныеДляОбработки.path,
			РезультатЗапроса.КодСостояния,
			ДанныеОшибки.type,
			Результат.КодОшибки,
			ПараметрыЗапроса.Заголовки["X-Correlation-ID"],
			РезультатЗапроса.ИнформацияОбОшибке);
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке, Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обработку ответа и возвращает данные полученные из сервиса Облачной кассы.
//
// Параметры:
//  ОтветСервиса - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Структура:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом.
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * КодСостояния - Число - код состояния ответа из сервиса Облачной кассы.
//    * Содержимое - Неопределено - ошибка чтения ответа сервиса.
//                 - Структура - данные ответа из сервиса Облачной кассы.
//
Функция ОбработатьОтветСервиса(ОтветСервиса)
	
	Содержимое = Неопределено;	// Неопределено, Структура
	
	Результат = ОблачныеКассыСлужебный.НовыйРезультатОперации();
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("Содержимое"  , Содержимое);
	
	// Ожидаемый формат ответа:
	// {
	//   "responseStatus": 0,
	//   "responseBodyJsonObject": {}
	// }
	
	ДанныеОтвета = Новый Структура();
	ДанныеОтвета.Вставить("responseStatus"        , 0);
	ДанныеОтвета.Вставить("responseBodyJsonObject", Неопределено);
	
	Попытка
		
		ЗаполнитьЗначенияСвойств(
			ДанныеОтвета,
			JSONВЗначение(ОтветСервиса));

	Исключение
		
		Результат.КодОшибки          = КодОшибкиОшибкаСервиса();
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Ошибка работы с сервисом Облачной кассы.'");
		Результат.ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат.КодСостояния = ДанныеОтвета.responseStatus;
	Результат.Содержимое   = ДанныеОтвета.responseBodyJsonObject;
	
	Если ДанныеОтвета.responseStatus <> 200 Тогда
		Результат.КодОшибки = ДанныеОтвета.responseStatus;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Производит чтение ошибки сервиса из тела ответа.
// Если ответ сервиса не соответствуют формату ошибки, то в результате будет возвращена пустая структура.
//
// Параметры:
//  ОтветСервиса - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Структура:
//    * type - Строка - идентификатор типа ошибки.
//    * title - Строка - краткое описание типа ошибки.
//    * detail - Строка - подробное описание возникшей проблемы.
//    * status - Число - код состояния HTTP. Не является обязательным полем.
//    * instance - Строка - URL операции при выполнении которой возникла ошибка. Не является обязательным полем.
//
Функция ДанныеОшибкиСервиса(ОтветСервиса)
	
	// Ожидаемый формат ответ:
	// {
	//   "type": "string",
	//   "title": "string",
	//   "detail": "string",
	//   "status": number,
	//   "instance": "string"
	// }
	
	Результат = Новый Структура();
	Результат.Вставить("type"    , "");
	Результат.Вставить("title"   , "");
	Результат.Вставить("detail"  , "");
	Результат.Вставить("status"  , 0);
	Результат.Вставить("instance", "");
	
	Если ТипЗнч(ОтветСервиса) = Тип("Строка")
		И Не ПустаяСтрока(ОтветСервиса) Тогда
		
		Попытка
			ЗаполнитьЗначенияСвойств(
				Результат,
				JSONВЗначение(ОтветСервиса));
		Исключение
			Возврат Результат;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ОтветСервиса) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет по коду состояния ответа сервиса тип ошибки для потребителей.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//    Список кодов ошибок:
//      "" - нет ошибки.
//      см. КодОшибкиНеверныйФорматЗапроса - ошибка в запросе.
//      см. КодОшибкиОшибкаАутентификации - ошибка аутентификации в сервисах Интернет-поддержки или Облачной кассы.
//      см. КодОшибкиТребуетсяОплата - для выполнения запроса требуется оплата.
//      см. КодОшибкиОтсутствуетДоступКСервису - недостаточно прав для выполнения запроса.
//      см. КодОшибкиПревышеноКоличествоПопыток - клиент попытался отправить слишком много запросов за короткое время.
//      см. КодОшибкиСервисВременноНедоступен - сервер временно не имеет возможности обрабатывать запросы.
//      см. КодОшибкиОшибкаСервиса - внутренняя ошибка сервиса.
//      см. КодОшибкиОшибкаПодключения - ошибка работы сети Интернет.
//      см. КодОшибкиНеизвестнаяОшибка - прочая ошибка выполнения заполса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 404
		Или КодСостояния = 422 Тогда
		
		Возврат КодОшибкиНеверныйФорматЗапроса();
		
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиОшибкаАутентификации();
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат КодОшибкиТребуетсяОплата();
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат КодОшибкиОтсутствуетДоступКСервису();
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат КодОшибкиПревышеноКоличествоПопыток();
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат КодОшибкиСервисВременноНедоступен();
	ИначеЕсли КодСостояния >= 500 Тогда
		Возврат КодОшибкиОшибкаСервиса();
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки и данным ответа сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - код ошибки полученным методом см. ПереопределитьКодОшибкиСервиса.
//  КодОшибкиСервиса - Строка - код ошибки из данных запроса.
//    Значение по умолчанию: "".
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки, КодОшибкиСервиса = "")
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		
		Если КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
			Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
		ИначеЕсли КодОшибкиСервиса = "BAD_REQUEST" Тогда
			Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Облачной кассы.'");
		ИначеЕсли КодОшибкиСервиса = "NO_CONTACT_INFO" Тогда
			Возврат НСтр("ru = 'В данных чека не заполнена контактная информация.'");
		ИначеЕсли КодОшибкиСервиса = "NOT_FOUND" Тогда
			Возврат НСтр("ru = 'Данные о пробитии чека не найдены. Повторите операцию позже или обратитесь к администратору.'");
		ИначеЕсли КодОшибкиСервиса = "INTEGRATION_IS_NOT_SUPPORTED_1C" Тогда
			Возврат НСтр("ru = 'Интеграция с Облачной кассой не поддерживается. Обратитесь к администратору.'");
		ИначеЕсли КодОшибкиСервиса = "PROVIDER_DISABLED" Тогда
			Возврат НСтр("ru = 'Интеграция с Облачной кассой отключена.'");
		Иначе
			Возврат НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли КодОшибки = КодОшибкиОшибкаАутентификации() Тогда
		
		Если КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
			Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
		ИначеЕсли КодОшибкиСервиса = "BAD_CREDENTIALS" Тогда
			Возврат НСтр("ru = 'Ошибка аутентификации в сервисе Облачной кассы.'");
		Иначе
			Возврат НСтр("ru = 'Ошибка аутентификации. Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли КодОшибки = КодОшибкиОтсутствуетДоступКСервису() Тогда
		
		Если КодОшибкиСервиса = "USER_AUTHORISATION_EXCEPTION_1С" Тогда
			Возврат НСтр("ru = 'Отсутствует доступ к сервису на Портале 1С:ИТС.'");
		ИначеЕсли КодОшибкиСервиса = "AUTHORIZATION_EXCEPTION" Тогда
			Возврат НСтр("ru = 'Отсутствует доступ к сервису Облачной кассы.'");
		Иначе
			Возврат НСтр("ru = 'Отсутствует доступ к сервису. Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли КодОшибки = КодОшибкиТребуетсяОплата() Тогда
		
		Если КодОшибкиСервиса = "NO_TARIFF_FOUND" Тогда
			Возврат НСтр("ru = 'Не найден подходящий тариф, требуется оплата.'");
		Иначе
			Возврат НСтр("ru = 'Требуется оплата сервиса. Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли КодОшибки = КодОшибкиПревышеноКоличествоПопыток() Тогда
		
		Если КодОшибкиСервиса = "TOO_MANY_REQUESTS_1C" Тогда
			Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису 1С с не верными данными авторизации.'")
				+ " "
				+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
		ИначеЕсли КодОшибкиСервиса = "TOO_MANY_REQUESTS" Тогда
			Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису Облачной кассы с не верными данными авторизации.'")
				+ " "
				+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
		Иначе
			Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису. Обратитесь к администратору.'");
		КонецЕсли;
		
	ИначеЕсли КодОшибки = КодОшибкиСервисВременноНедоступен() Тогда
		
		Если КодОшибкиСервиса = "SERVICE_UNAVAILABLE_PAYMENT" Тогда
			Возврат НСтр("ru = 'Не удалось подключиться к сервису Облачной кассы.
				|Сервис временно недоступен. Повторите попытку подключения позже.'");
		Иначе
			Возврат НСтр("ru = 'Не удалось подключиться к сервису Портала 1С:ИТС.
				|Сервис временно недоступен. Повторите попытку подключения позже.'");
		КонецЕсли;
			
	ИначеЕсли КодОшибки = КодОшибкиОшибкаСервиса() Тогда
		
		Если КодОшибкиСервиса = "UNKNOWN_EXCEPTION" Тогда
			Возврат НСтр("ru = 'Сервис Облачной кассы вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
		ИначеЕсли КодОшибкиСервиса = "UNKNOWN_EXCEPTION_1С" Тогда
			Возврат НСтр("ru = 'Сервис вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
		ИначеЕсли КодОшибкиСервиса = "BACKEND_CONNECTION_ERROR" Тогда
			Возврат НСтр("ru = 'Сервис Облачной кассы не ответил в установленное время. Повторите операцию или обратитесь в техническую поддержку Облачной кассы.'");
		Иначе
			Возврат НСтр("ru = 'Ошибка работы с сервисом Облачной кассы.'");
		КонецЕсли;
		
	ИначеЕсли КодОшибки = КодОшибкиОшибкаПодключения() Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Облачной кассы.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису Облачной кассы.'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СериализацияJSON

// Преобразует значение в строку JSON при помощи метода глобального контекста ЗаписатьJSON.
// Допускаются не все типы значений, подробности см. в синтакс-помощнике.
// Даты преобразуются в формат ISO (YYYY-MM-DDThh:mm:ssZ).
//
// Параметры:
//  Значение - Произвольный
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(
		Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Преобразует строку в формате JSON в значение при помощи метода глобального контекста ПрочитатьJSON.
// См. ограничения в синтакс-помощнике.
//
// Параметры:
//  Строка - Строка - значение в формате JSON.
//
// Возвращаемое значение:
//  Произвольный
//
Функция JSONВЗначение(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Строка);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "ОшибкаАутентификации".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиОшибкаАутентификации()
	
	Возврат "ОшибкаАутентификации";
	
КонецФункции

// Возвращает код ошибки "ТребуетсяОплата".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиТребуетсяОплата()
	
	Возврат "ТребуетсяОплата";
	
КонецФункции

// Возвращает код ошибки "ОтсутствуетДоступКСервису".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиОтсутствуетДоступКСервису()
	
	Возврат "ОтсутствуетДоступКСервису";
	
КонецФункции

// Возвращает код ошибки "ПревышеноКоличествоПопыток".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиПревышеноКоличествоПопыток()
	
	Возврат "ПревышеноКоличествоПопыток";
	
КонецФункции

// Возвращает код ошибки "СервисВременноНедоступен".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиСервисВременноНедоступен()
	
	Возврат "СервисВременноНедоступен";
	
КонецФункции

// Возвращает код ошибки "ОшибкаСервиса".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиОшибкаСервиса()
	
	Возврат "ОшибкаСервиса";
	
КонецФункции

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиОшибкаПодключения()
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

#КонецОбласти

#Область СтатусОперации

// Возвращает статус операции сервиса в процессе.
//
// Возвращаемое значение:
//  Строка
//
Функция СтатусОперацииВПроцессе()
	
	Возврат "IN_PROGRESS";
	
КонецФункции

// Возвращает статус операции сервиса выполнена.
//
// Возвращаемое значение:
//  Строка
//
Функция СтатусОперацииВыполнена()
	
	Возврат "SUCCESS";
	
КонецФункции

// Возвращает статус операции сервиса отменена.
//
// Возвращаемое значение:
//  Строка
//
Функция СтатусОперацииОтменена()
	
	Возврат "REJECTED";
	
КонецФункции

#КонецОбласти

#КонецОбласти
