#Область ПрограммныйИнтерфейс

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ДокументыИСМП.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("ИСМППрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиУчета

Функция ВидыПродукцииТестовогоПериода() Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

Функция ИспользуемыеВидыМаркируемойПродукцииИСМП() Экспорт
	
	ВидыМаркируемойПродукции = Новый Массив;
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Для Каждого ВидПродукции Из ВидыПродукцииИСМП Цикл
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
			ВидыМаркируемойПродукции.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыМаркируемойПродукции;
	
КонецФункции

#КонецОбласти

#Область РегламентноеЗадание

// Обработчик регламентного задания очистки пула кодов маркировки
// 
Процедура ОчисткаПулаКодовМаркировкиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМП);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ОчисткаПулаКодовМаркировки();
	
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС МП
//
Процедура ВыполнитьОбменРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМП);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтеграцияИСМПВызовСервера.ВыполнитьОбмен();
	
КонецПроцедуры

// Выполнить регламентное задание по удалению неиспользованных кодов маркировки
//
Процедура УдалениеНеиспользованныхКодовМаркировкиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМП);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.УдалениеНеиспользованныхКодовМаркировки();
	
КонецПроцедуры

// см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМП;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМП;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеНеиспользованныхКодовМаркировкиИСМП;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.РасчетСтатусовОформленияИС;
	Настройка.РаботаетСВнешнимиРесурсами = Ложь;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаСтатусовДокументовВГИСМТ;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаСведенийОбОтклоненияхИСМП;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП;
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМП.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.УдалениеНеиспользованныхКодовМаркировкиИСМП.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.РасчетСтатусовОформленияИС.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ПроверкаСтатусовДокументовВГИСМТ.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ЗагрузкаСведенийОбОтклоненияхИСМП.Имя);
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМП.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.УдалениеНеиспользованныхКодовМаркировкиИСМП.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.РасчетСтатусовОформленияИС.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаСтатусовДокументовВГИСМТ.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаСведенийОбОтклоненияхИСМП.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

//Переопределяемая область данных прикладных документов отчетов о расхождениях при оформлении
//
//Возвращаемое значение:
//   Строка - типовая часть запроса, которую требуется переопределять
//
Функция ШаблонПолученияВидаПродукцииИзНоменклатуры() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	&ПустаяНоменклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ НоменклатураПереопределяемый
	|;
	|
	|";
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// см. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекРаботыСФайлами(Настройки) Экспорт
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ДокументыИСМП.Тип.Типы() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Настройки.НеОчищатьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСинхронизироватьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСоздаватьФайлыПоШаблону.Добавить(МетаданныеТипа);
	КонецЦикла;
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ИменаПараметров  = ИнтеграцияИСМПКлиентСервер.ИменаПараметровРаботыКлиента();
	
	Параметры.Вставить(
		ИменаПараметров.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом, 
		ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом());
	
КонецПроцедуры

// Возвращает признак, поддерживает ли БПО логирование проверок КМ и проверку КМ единым методом
// 
// Возвращаемое значение:
//  Булево - Истина, если версия БПО выше 3.2.2.24
Функция ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом() Экспорт
	
	Возврат ИнтеграцияИСМППовтИсп.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом();
	
КонецФункции

#КонецОбласти

#Область ОформлениеПолейКоличества

Процедура УстановитьУсловноеОформлениеПолейКоличества(Форма, ГрупповыеУпаковкиОтдельно = Ложь) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Количество вложенных потребительских упаковок
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПотребительскихУпаковок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроизвольнаяЕдиницаУчета");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если ГрупповыеУпаковкиОтдельно Тогда
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Количество");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 0;
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.Количество"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	// Количество (штучная продукция)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ПроизвольнаяЕдиницаУчета");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0;");
	
	// Количество кодов для взвешиваемой продукции
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПотребительскихУпаковок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ТребуетВзвешивания");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

Процедура НастроитьВидимостьКолонкиКоличестваКодовМаркировки(Форма) Экспорт
	
	ВидПродукцииИС = Форма.Объект.ВидПродукции;
	Форма.Элементы.ТоварыКоличествоПотребительскихУпаковок.Видимость = ИнтеграцияИС.ЕдиницаУчетаМожетНеСовпадатьСИндивидуальнойПотребительскойУпаковкойПоВидуПродукции(ВидПродукцииИС);
	
КонецПроцедуры

#КонецОбласти

#Область ТипыРасхожденийКодовМаркировки

// Возвращает значение Брак определяемого типа ТипРасхожденияИСМП.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ТипРасхожденияИСМП.
Функция ТипРасхожденияИСМПБрак() Экспорт
	
	ТипРасхождения = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТипаРасхожденияИСМПБрак(ТипРасхождения);
	Возврат ТипРасхождения;

КонецФункции

// Возвращает значение Излишек определяемого типа ТипРасхожденияИСМП.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ТипРасхожденияИСМП.
Функция ТипРасхожденияИСМПИзлишек() Экспорт
	
	ТипРасхождения = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТипаРасхожденияИСМПИзлишек(ТипРасхождения);
	Возврат ТипРасхождения;
	
КонецФункции

// Возвращает значение Недостача определяемого типа ТипРасхожденияИСМП.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ТипРасхожденияИСМП.
Функция ТипРасхожденияИСМПНедостача() Экспорт
	
	ТипРасхождения = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТипаРасхожденияИСМПНедостача(ТипРасхождения);
	Возврат ТипРасхождения;
	
КонецФункции

#КонецОбласти

Процедура ПриЗаписиДокумента(ДокументОбъект, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ОчиститьРезультатПроверкиСредствамиККТПоОтсутствующимКодам(
		ДокументОбъект.Ссылка);
	
КонецПроцедуры

Процедура ПередЗаписьюДокумента(ДокументОбъект, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.ОчиститьДанныеРазрешительногоРежимаПриИзмененииОрганизации(ДокументОбъект);
	
КонецПроцедуры

Функция ЗапрещеноИспользованиеОбъектаВИСМП(Объект) Экспорт
	
	Если Не ОбщегоНазначенияИСМП.ИспользуетсяМаркируемаяПродукция()
		И Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП.Состав.Содержит(Объект.Метаданные()) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для работы с объектом необходимо включить ведение учета маркируемой продукции ИС МП'"));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Длительная операция обновления настроек при включении товарных групп разрешительного режима
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьОбновлениеНастроекДляРазрешительногоРежимаДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",  Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	РезультатОбновления = ОбновлениеИнформационнойБазыИСМП.ВключитьПроверкуРозничнымМетодомДляОпределенныхТоварныхГрупп();
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(РезультатОбновления);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки  = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки = РезультатОбновления.ТекстОшибки;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

#Область ПодключениеКегаКОборудованияРозлива

// Данные вскрытия потребительской упаковки.
// 
// Возвращаемое значение:
//  Структура - данные подключения к оборудованию розлива:
// * КодМаркировки           - СправочникСсылка.ШтрихкодыУпаковокТоваров - код маркировки кега
// * Организация             - ОпределяемыйТип.Организация - организация, которая подключает кег
// * Подразделение           - ОпределяемыйТип.Подразделение - подразделение организации, которая подключает кег
// * Склад                   - ОпределяемыйТип.Склад - точка подключения
// * ДатаПодключения         - Дата - дата подключения
// * СрокРеализации          - Дата - срок реализации
// * АдресПодключения        - Строка, Неопределено - данные адреса подключения
//                             (обязательно для индивидуального предпринимателя)
// * АдресПодключенияСтрокой - Строка, Неопределено - представление адреса подключения
//                             (обязательно для индивидуального предпринимателя)
// * КодФИАС                 - ОпределяемыйТип.УникальныйИдентификаторИС, Неопределено - код ФИАС адреса подключения
//                             (обязательно для индивидуального предпринимателя)
// * Ответственный           - ОпределяемыйТип.ПользователиИС, Неопределено - пользователь, создавший запись.
//                             Для фонового обмена может быть пользователь регламентного задания
Функция ДанныеВскрытияПотребительскойУпаковки() Экспорт
	
	ДанныеВскрытия = Новый Структура();
	
	ДанныеВскрытия.Вставить("КодМаркировки",           Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	ДанныеВскрытия.Вставить("Организация",             ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"));
	ДанныеВскрытия.Вставить("Подразделение",           ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Подразделение"));
	ДанныеВскрытия.Вставить("Склад",                   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад"));
	ДанныеВскрытия.Вставить("ДатаПодключения",         Дата(1, 1, 1));
	ДанныеВскрытия.Вставить("СрокРеализации",          Дата(1, 1, 1));
	ДанныеВскрытия.Вставить("АдресПодключения",        Неопределено);
	ДанныеВскрытия.Вставить("АдресПодключенияСтрокой", Неопределено);
	ДанныеВскрытия.Вставить("КодФИАС",                 Неопределено);
	ДанныеВскрытия.Вставить("Ответственный",           Неопределено);
	
	Возврат ДанныеВскрытия;
	
КонецФункции

// Подключает кег к оборудованию розлива и готовит документ для передачи в ГИС МТ
// 
// Параметры:
//  ДанныеВсркрытия - см. ДанныеВскрытияПотребительскойУпаковки
// 
// Возвращаемое значение:
//  Структура - результат подключения кега к оборудованию розлива:
// * Документ - ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП - документ подключения кега
// * ТекстОшибки - Строка, Неопределено                                - текст ошибки подключения при наличии
Функция ПодключитьКегКОборудованиюРозлива(ДанныеВскрытия) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Документ",    Документы.ПодключениеКегаКОборудованиюРозливаИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", Неопределено);
	
	ДанныеВскрытияУпаковки = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеВскрытияУпаковки, ДанныеВскрытия);
	ДанныеВскрытияУпаковки.Статус = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.ПодключеноВоВнешнейСистеме;
	
	ДанныеВскрытия = ОбщегоНазначенияИС.ВскрытьПотребительскуюУпаковку(
		ДанныеВскрытияУпаковки);
	
	ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, ДанныеВскрытия);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает документ подключения кега к оборудованию розлива.
// 
// Параметры:
//  КодМаркировки - СправочникСсылка.ШтрихкодыУпаковокТоваров - код маркировки кега
//  Организация - Неопределено, ОпределяемыйТип.Организация - организация, которая подключала кег к оборудованию розлива
// 
// Возвращаемое значение:
//  Неопределено, ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП - документ подключения кега к оборудованию розлива.
Функция ДокументПодключенияКегаКОборудованиюРозлива(КодМаркировки, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодключениеКегаКОборудованиюРозливаИСМП.Ссылка
		|ИЗ
		|	Документ.ПодключениеКегаКОборудованиюРозливаИСМП КАК ПодключениеКегаКОборудованиюРозливаИСМП
		|ГДЕ
		|	ПодключениеКегаКОборудованиюРозливаИСМП.КодМаркировки = &КодМаркировки
		|	И ПодключениеКегаКОборудованиюРозливаИСМП.Проведен
		|	И ВЫБОР
		|		КОГДА &Организация = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
		|		ИНАЧЕ ПодключениеКегаКОборудованиюРозливаИСМП.Организация = &Организация
		|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("КодМаркировки", КодМаркировки);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВозвращаемоеЗначение = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиУчета

Функция АктыОРасхожденияПослеПоступленияИспользуются(Документ) Экспорт

	Используются = Ложь;

	ИнтеграцияИСМППереопределяемый.ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используются);

	Возврат Используются;

КонецФункции

Функция РазрешенаПовторнаяПечатьКодовМаркировки() Экспорт
	
	ИмяРолиПолныеПрава   = "ПолныеПрава";
	ВозвращаемоеЗначение = Ложь;
	
	Если РольДоступна("ПовторнаяПечатьКодовМаркировкиИСМП") Тогда
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли Метаданные.Роли.Найти(ИмяРолиПолныеПрава) <> Неопределено Тогда
		ВозвращаемоеЗначение = РольДоступна(ИмяРолиПолныеПрава);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьОжиданиеПриОтправкеДанныхВСервис(ПараметрыОтправкиHTTPЗапросов) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ВремяОжиданияСледующегоЗапроса = ОбщегоНазначенияИСМП.ВремяОжиданияСледующегоЗапросаСУЗ(ПараметрыОтправкиHTTPЗапросов);
		Если ВремяОжиданияСледующегоЗапроса > 0 Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжиданияСледующегоЗапроса, ПараметрыОтправкиHTTPЗапросов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИПроверкаЗаполнения

//Получает виды продукции, имеющиеся в таблице номенклатуры
//
//Параметры:
//   Товары - ТаблицаЗначений - входящая таблица товаров с колонками:
//    * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура,
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика.
//   ПараметрыЗаполненияПоКодамОстатков - Структура, Неопределено - параметры проверки остаточный GTIN
//Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции по переданной номенклатуре
//
Функция ВидыПродукцииПоТаблицеНоменклатуры(Товары, ПараметрыЗаполненияПоКодамОстатков = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.GTIN           КАК GTIN
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции();
	
	Если ПараметрыЗаполненияПоКодамОстатков = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|;
		|/////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоВидуПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
		|";
		
	Иначе
		
		Запрос.УстановитьПараметр("Организация", ПараметрыЗаполненияПоКодамОстатков.Организация);
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеШтрихкодовУпаковок.GTIN КАК GTIN,
		|	ЕстьNull(КэшОписанияОстатковИСМП.ВидПродукции, Неопределено) КАК ВидПродукции
		|ПОМЕСТИТЬ ДанныеОстаточныхGTIN
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатковИСМП
		|		ПО ДанныеШтрихкодовУпаковок.GTIN = КэшОписанияОстатковИСМП.GTIN
		|		И КэшОписанияОстатковИСМП.Организация = &Организация
		|ГДЕ
		|	ДанныеШтрихкодовУпаковок.Номенклатура В (&ПустыеЗначенияНоменклатуры)
		|;
		|
		|/////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоВидуПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
		|ГДЕ 
		|	НЕ ДанныеПоВидуПродукции.Номенклатура В (&ПустыеЗначенияНоменклатуры)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДанныеОстаточныхGTIN.ВидПродукции
		|ИЗ
		|	ДанныеОстаточныхGTIN КАК ДанныеОстаточныхGTIN
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	
КонецФункции

// Проверка заполнения количества потребительских упаковок.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - Проверямый объект документа.
//  Отказ          - Булево         - Признак ошибки заполнения документа.
Процедура ПроверкаЗаполненияКоличестваПотребительскихУпаковок(ДокументОбъект, Отказ) Экспорт
	
	ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			ДокументОбъект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура")));
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Коды маркировки"" в строке %1 таблицы ""Товары""'");
	Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.КоличествоПотребительскихУпаковок)
			Или Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		ТекущееОписание = ОписаниеНоменклатуры[СтрокаТовары.Номенклатура];
		Если ТекущееОписание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущееОписание.ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.МернаяПродукцияТребуетУказанияЗначения Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТовары.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ДокументОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Товары", СтрокаТовары.НомерСтроки, "КоличествоПотребительскихУпаковок"),,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

//Предназачена для реализации механизма генерации серий номенклатуры по переданным данным
//
//Параметры:
// ДанныеДляГенерации - Структура - (См. ПодключаемыеКомандыИСУТКлиентСервер.СтруктураДанныхДляГенерацииСерии).
// ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для определения особенностей генерации серий.
//
Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт

	ИнтеграцияИСМППереопределяемый.СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции);

КонецПроцедуры

#КонецОбласти

#Область Статусы

Функция ВерсииСообщенияСовпадают(Выборка, ПредыдущаяВыборка)
	
	Результат = Ложь;
	
	Если ПредыдущаяВыборка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Выборка.Версия = ПредыдущаяВыборка.Версия И Выборка.Операция = ПредыдущаяВыборка.Операция Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииСообщенияСовпадают(Выборка, ПредыдущаяВыборка)
	
	Результат = Ложь;
	
	Если ПредыдущаяВыборка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Выборка.Операция = ПредыдущаяВыборка.Операция
		Или СоответствиеЗависимыхОпераций().Получить(Выборка.Операция) = ПредыдущаяВыборка.Операция Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеЗависимыхОпераций()
	
	Результат = Новый Соответствие();
	Результат.Вставить(Перечисления.ВидыОперацийИСМП.КвитанцияДокумента, Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	Результат.Вставить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ, Перечисления.ВидыОперацийИСМП.КвитанцияДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЗаписыватьСтатус = Истина, СообщениеПрерывания = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Ссылка                       КАК Сообщение,
	|	ИСМППрисоединенныеФайлы.Операция                     КАК Операция,
	|	ИСМППрисоединенныеФайлы.ТипСообщения                 КАК ТипСообщения,
	|	ИСМППрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаСоздания,
	|	ЛОЖЬ                                                 КАК КПередаче,
	|	ВЫБОР КОГДА ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	ИСМППрисоединенныеФайлы.СтатусОбработки КАК СтатусОбработки,
	|	НЕОПРЕДЕЛЕНО                            КАК ПротоколОбмена,
	|	ИСМППрисоединенныеФайлы.Версия          КАК Версия
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.Документ = &ДокументСсылка
	|	И НЕ ИСМППрисоединенныеФайлы.Операция В (&СлужебныеОперацииПротокола)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийИСМП.Сообщение                  КАК Сообщение,
	|	ОчередьСообщенийИСМП.Операция                   КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) КАК ТипСообщения,
	|	ОчередьСообщенийИСМП.ДатаСоздания               КАК ДатаСоздания,
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки = """" ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки <> """" ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	НЕОПРЕДЕЛЕНО                        КАК СтатусОбработки,
	|	ОчередьСообщенийИСМП.ПротоколОбмена КАК ПротоколОбмена,
	|	1
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|ГДЕ
	|	ОчередьСообщенийИСМП.Документ = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания ВОЗР
	|";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	СлужебныеОперацииПротокола = Новый Массив;
	СлужебныеОперацииПротокола.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
	
	Запрос.УстановитьПараметр("СлужебныеОперацииПротокола", СлужебныеОперацииПротокола);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументовИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	АбстрактныеОперации = Новый Массив;
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПакетСтатусовОбработкиОперации = Новый Соответствие;
		ПредыдущаяВыборка = Новый Структура;
		ПредыдущаяВыборка.Вставить("Версия",   Неопределено);
		ПредыдущаяВыборка.Вставить("Операция", Неопределено);
		
		ЕстьОшибки = Ложь;
		ЕстьУспешно = Ложь;
		
		ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			Если СообщениеПрерывания <> Неопределено
				И Выборка.Сообщение = СообщениеПрерывания Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыОбновления = Неопределено;
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
						ДокументСсылка,
						Выборка.Операция);
						
					ПакетСтатусовОбработкиОперации = Новый Соответствие;
					
				ИначеЕсли Выборка.Передан Тогда
					
					Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
						// дополнительные операции по обработке документа выполняются при обработке сообщениия по абстрактной операции
						Продолжить;
					КонецЕсли;

					СтатусОбработки = Выборка.СтатусОбработки;
					Операция        = Выборка.Операция;
					Если Не ЗначениеЗаполнено(СтатусОбработки) Тогда
						Если Выборка.ПротоколОбмена <> Неопределено Тогда
							ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
						КонецЕсли;
						Если ПротоколОбмена = Неопределено Тогда
							Если АбстрактныеОперации.Найти(Выборка.Операция)<> Неопределено Тогда
								СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
								ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Истина;
							Иначе
								Продолжить;
							КонецЕсли;
						ИначеЕсли ПротоколОбмена.Количество() > 0 Тогда
							ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
							СтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
							Операция        = ПоследняяЗаписьПротоколаОбмена.Операция;
						КонецЕсли;
					КонецЕсли;
					
					Если Не (ОперацииСообщенияСовпадают(Выборка, ПредыдущаяВыборка) Или ПредыдущаяВыборка.Операция = Неопределено) Тогда
						ЕстьУспешно = Ложь;
						ЕстьОшибки = Ложь;
					КонецЕсли;
					
					Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
						ЕстьУспешно = Истина;
					ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
						Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
						Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично
						Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
					
					Если ВерсииСообщенияСовпадают(Выборка, ПредыдущаяВыборка) Тогда
						ПакетСтатусовОбработкиОперации.Вставить(СтатусОбработки);
					Иначе
						ПакетСтатусовОбработкиОперации = Новый Соответствие;
						ПакетСтатусовОбработкиОперации.Вставить(СтатусОбработки);
					КонецЕсли;
					
					Если Операция <> Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
						И ПротоколОбмена <> Неопределено Тогда
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
							ДокументСсылка,
							Операция,
							СтатусОбработки);
						
						ПакетСтатусовОбработкиОперации = Новый Соответствие;
						
					Иначе
						
						ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
						ПараметрыОбновленияСтатуса.Статус            = Неопределено;
						ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
						ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
						ПараметрыОбновленияСтатуса.ПротоколОбмена    = Выборка.ПротоколОбмена;
						ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
						
						Если ПакетСтатусовОбработкиОперации <> Неопределено Тогда
							ПараметрыОбновленияСтатуса.Вставить("ПакетСтатусовОбработкиОперации", ПакетСтатусовОбработкиОперации);
						КонецЕсли;
						
						Если ЕстьОшибки И ЕстьУспешно
							Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично Тогда
							ПараметрыОбновленияСтатуса.Вставить("ОбработанЧастично", Истина);
						КонецЕсли;
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
							ДокументСсылка,
							Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
							ПараметрыОбновленияСтатуса);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ПротоколОбмена <> Неопределено Тогда
					ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
				КонецЕсли;
				Если ПротоколОбмена = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.Статус            = Неопределено;
				ПараметрыОбновленияСтатуса.СтатусОбработки   = Выборка.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
				ПараметрыОбновленияСтатуса.ПротоколОбмена    = ПротоколОбмена;
				ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
					ДокументСсылка,
					Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
					ПараметрыОбновленияСтатуса);
				
				ПакетСтатусовОбработкиОперации = Новый Соответствие;
				
			КонецЕсли;
			
			Если СообщениеПрерывания = Неопределено Тогда
				
				Если ПараметрыОбновления <> Неопределено Тогда
					РегистрыСведений.СтатусыДокументовИСМП.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				КонецЕсли;
				
			Иначе
				
				Если (Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована
					Или Выборка.СтатусОбработки = Неопределено) Тогда
					
					Если ПараметрыОбновления <> Неопределено Тогда
						РегистрыСведений.СтатусыДокументовИСМП.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПредыдущаяВыборка, Выборка);
			
			Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
				// дополнительные операции по обработке документа выполняются при обработке сообщениия по абстрактной операции
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаписыватьСтатус Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Выполняет начальную запись в регистр "Статусы документов ИС МП"
//
Процедура ЗаписатьСтатусДокументаПоУмолчанию(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый)
		Или Источник.ДополнительныеСвойства.Свойство("ТребуетсяПерезаписьСтатусаПоУмолчанию");
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыДокументовИСМП.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

// Получить статусы ИСМП, цвет текста которых "требует внимания"
// 
// Возвращаемое значение:
//  Массив - Статусы ИС МП, для которых требуется устанавливать цвет "требует внимания"
//
Функция СтатусыЦветТекстаТребуетВнимания() Экспорт
	
	СтатусыЦветТекстаТребуетВнимания = Новый Массив;
	
	Для Каждого Статус Из Документы.МаркировкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ВыводИзОборотаИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ВозвратВОборотИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПеремаркировкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.СписаниеКодовМаркировкиИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ОтгрузкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПриемкаТоваровИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.УточнениеСведенийОКодахМаркировкиИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ОтчетИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	
	Возврат СтатусыЦветТекстаТребуетВнимания;
	
КонецФункции

// Получить представление статуса ИС МП.
//
// Параметры:
//  Статус                     - ПеречислениеСсылка - Статус документа ИС МП.
//  ВходящиеДальнейшееДействие - Массив, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - входящие дальнейшие действия.
//  ДопустимыеДействия         - Массив, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Список разрешенных дальнейших действий.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ИС МП.
//
Функция ПредставлениеСтатуса(Статус, ВходящиеДальнейшееДействие, ДопустимыеДействия) Экспорт
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП") Тогда
		МассивДопустимыеДействия = Новый Массив;
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(Статус) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВнимания = СтатусыЦветТекстаТребуетВнимания();
		
		Если СтатусыЦветТекстаТребуетВнимания.Найти(Статус) <> Неопределено Тогда
			СтатусПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Строка(Статус),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусПредставление = Новый ФорматированнаяСтрока(Строка(Статус));
		КонецЕсли;
		
	Иначе
		СтатусПредставление = Статус;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП")
		И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки     = "";
		ЯвляетсяГиперссылкой = Истина;
		Представление        = НРег(Строка(ДальнейшееДействие));
		Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
			ТекстГиперссылки = "ЗапроситьКодыМаркировки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
			ТекстГиперссылки = "ЗапроситьGTINНаОстатки";
			Представление    = НСтр("ru = 'запросите GTIN на остатки'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями Тогда
			ТекстГиперссылки = "ПередатьДанныеСИсправлениями";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда
			ТекстГиперссылки = "ПередатьОтчет";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями Тогда
			ТекстГиперссылки = "ПередатьОтчетСИсправлениями";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗаблокируйтеКодыМаркировки Тогда
			ТекстГиперссылки = "ЗаблокироватьКодыМаркировки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПеремаркировку Тогда
			ТекстГиперссылки = "ВыполнитеПеремаркировку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
			ТекстГиперссылки = "ВыполнитьАгрегацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями Тогда
			ТекстГиперссылки = "ВыполнитьАгрегациюСИсправлениями"
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию Тогда
			ТекстГиперссылки = "ОтменитьОперацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных Тогда
			ТекстГиперссылки = "ОтменитьПередачуДанных";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку Тогда
			ТекстГиперссылки = "АннулироватьОтгрузку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление Тогда
			ТекстГиперссылки = "ПодтвердитеПоступление";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОткажитесьОтНакладной Тогда
			ТекстГиперссылки = "ОтказатьсяОтНакладной";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПроверку Тогда
			ТекстГиперссылки = "ВыполнитьПроверку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК Тогда
			ТекстГиперссылки = "ВыполнитьФормированиеАТК";
			Представление    = НСтр("ru = 'выполните формирование АТК'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СоздайтеШтрихкодыУпаковок Тогда
			ТекстГиперссылки = "СоздатьШтрихкодыУпаковок";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ Тогда
			ТекстГиперссылки = "ВыполнитьИндивидуализациюКИЗ";
			Представление    = НСтр("ru = 'выполните индивидуализацию КИЗ'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями Тогда
			ТекстГиперссылки = "ПодтвердитеПоступлениеСИсправлениями";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗакройтеЗаказНаЭмиссию Тогда
			ТекстГиперссылки = "ЗакройтеЗаказНаЭмиссию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПолучениеКодовМаркировки Тогда
			ТекстГиперссылки = "ВыполнитеПолучениеКодовМаркировки";
			Представление    = НСтр("ru = 'выполните дозагрузку кодов'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеВыводИзОборота Тогда
			ТекстГиперссылки = "АннулироватьВыводИзОборота";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию Тогда
			ТекстГиперссылки = "ЗапроситьКвитанцию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет Тогда
			ТекстГиперссылки = "ЗапроситьОтчет";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеОбработкуОтклонений Тогда
			ТекстГиперссылки = "ПодтвердитеОбработкуОтклонений";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			Если НЕ ЯвляетсяГиперссылкой Тогда
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)));
			Иначе
				
				ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
				
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					Представление,
					Новый Шрифт(,,,,Истина),
					ЦветСтиля,
					,
					ТекстГиперссылки);
			КонецЕсли;
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

#КонецОбласти

#Область СтатусыОформления

Функция ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеОформленныхДокументов(МетаданныеДокумента, ДокументОснование, ДокументыПоОснованию, СтатусыОформления) Экспорт
	
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокумента);
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	
	Если НЕ ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов             = ДокументыПоОснованию[МетаданныеДокумента.Имя];
	ШаблонПредставленияДокумента = ШаблонПредставленияДокументаДляПоляИнтеграции(МетаданныеДокумента, ДокументОснование);
	
	АрхивныйСтатус = Ложь;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя) Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокумента.Имя].Статус;
		АрхивныйСтатус   = СтатусыОформления[МетаданныеДокумента.Имя].Архивный;
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ПустаяСсылка();
	КонецЕсли;
	
	ИмяКоманды   = Неопределено;
	ТекстНадписи = Неопределено;
	
	Если МетаданныеДокумента = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ Тогда
		
		СостояниеЗаказа = РегистрыСведений.ПулКодовМаркировкиСУЗ.РассчитатьТаблицуСостоянияПоЗаказу(ДокументОснование);
		СостояниеЗаказа.Колонки.Добавить("СлужебноеПоле");
		СостояниеЗаказа.Свернуть(
			"СлужебноеПоле",
			"КоличествоВЗаказе,
			|КоличествоЗаказано,
			|КоличествоПечатать,
			|КоличествоРаспечатано,
			|КоличествоРезервировать,
			|КоличествоЗаказать");
		Если СостояниеЗаказа.Количество() > 0 Тогда
			СостояниеЗаказаИтоги = СостояниеЗаказа[0];
		Иначе
			СостояниеЗаказаИтоги = Неопределено;
		КонецЕсли;
		
		Если АрхивныйСтатус Тогда
			ТекстНадписи = НСтр("ru = 'Оформление заказов на эмиссию кодов маркировки завершено'");
			Если МассивДокументов.Количество() Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			КонецЕсли;
		ИначеЕсли (МассивДокументов.Количество()
			Или СостояниеЗаказаИтоги <> Неопределено
				И СостояниеЗаказаИтоги.КоличествоЗаказано > 0)
			И СостояниеЗаказаИтоги <> Неопределено
			И ( СостояниеЗаказаИтоги.КоличествоПечатать > 0
			Или СостояниеЗаказаИтоги.КоличествоРезервировать > 0
			Или СостояниеЗаказаИтоги.КоличествоЗаказать > 0
			Или СостояниеЗаказаИтоги.КоличествоЗаказано > 0) Тогда
			
			ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыПулКодовМаркировки;
			
			ЭлементыТекста = Новый Массив;
			
			Если СостояниеЗаказаИтоги.КоличествоПечатать > 0
				Или СостояниеЗаказаИтоги.КоличествоРезервировать > 0
				Или СостояниеЗаказаИтоги.КоличествоЗаказать > 0 Тогда
				ЭлементыТекстаТребуется = Новый Массив;
				Если СостояниеЗаказаИтоги.КоличествоЗаказать > 0 Тогда
					ЭлементыТекстаТребуется.Добавить(СтрШаблон(НСтр("ru = 'заказать: %1'"), СостояниеЗаказаИтоги.КоличествоЗаказать));
				КонецЕсли;
				Если СостояниеЗаказаИтоги.КоличествоРезервировать > 0 Тогда
					ЭлементыТекстаТребуется.Добавить(СтрШаблон(НСтр("ru = 'зарезервировать: %1'"), СостояниеЗаказаИтоги.КоличествоРезервировать));
				КонецЕсли;
				Если СостояниеЗаказаИтоги.КоличествоПечатать > 0 Тогда
					ЭлементыТекстаТребуется.Добавить(СтрШаблон(НСтр("ru = 'распечатать: %1'"), СостояниеЗаказаИтоги.КоличествоПечатать));
				КонецЕсли;
				ЭлементыТекста.Добавить(СтрШаблон(НСтр("ru = 'Требуется %1 кодов маркировки'"), СтрСоединить(ЭлементыТекстаТребуется, ", ")));
			КонецЕсли;
			
			Если СостояниеЗаказаИтоги.КоличествоЗаказано > 0 Тогда
				ЭлементыТекста.Добавить(
					НСтр("ru = 'Ожидается получение кодов маркировки'"));
			КонецЕсли;
			
			ТекстНадписи = СтрСоединить(ЭлементыТекста, ", ");
			
		ИначеЕсли (МассивДокументов.Количество()
			Или СостояниеЗаказаИтоги <> Неопределено
				И СостояниеЗаказаИтоги.КоличествоЗаказано > 0)
			И СостояниеЗаказаИтоги <> Неопределено
			И СостояниеЗаказаИтоги.КоличествоРаспечатано > 0 Тогда
			ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыПулКодовМаркировки;
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Распечатано кодов маркировки: %1'"), СостояниеЗаказаИтоги.КоличествоРаспечатано)
		ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли МассивДокументов.Количество() > 0 Тогда
		
		НуженРазделительВТексте = Ложь;
		Если МассивДокументов.Количество() = 1 Тогда
			
			Если АрхивныйСтатус Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Иначе
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрыть;
			КонецЕсли;
			
			Статус = МассивДокументов[0].Статус;
			
			Если АрхивныйСтатус Тогда
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеДокумента,
					НСтр("ru = 'в архиве'"));
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеДокумента,
					Статус);
				НуженРазделительВТексте = ЗначениеЗаполнено(Статус);
			КонецЕсли;
			
		Иначе
			
			ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Если АрхивныйСтатус Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.СтатусОформленияАрхивный;
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеНесколькихДокументов,
					СокрЛП(МассивДокументов.Количество()));
				НуженРазделительВТексте = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено
			И Не АрхивныйСтатус Тогда
			ТекстНадписи = ТекстНадписи + ?(НуженРазделительВТексте, ", ", "") + СокрЛП(СтатусОформления);
		КонецЕсли;
		
	Иначе
		
		Если Не АрхивныйСтатус И СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстНадписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
		,
		ИмяКоманды);
	
	Описание = Новый Структура;
	Описание.Вставить("ТекстНадписи",        ФорматированныйТекстНадписи);
	Описание.Вставить("СтатусОформления",    СтатусОформления);
	Описание.Вставить("МассивДокументов",    МассивДокументов);
	Описание.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонПредставленияДокументаДляПоляИнтеграции(МетаданныеДокумента, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "ИСМП";
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокумента.Синоним;
	ФормыИмениДокумента.Склоненная = ПолучитьСклоненияСтроки(НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2), "Л=ru_RU", "ПД=Винительный")[0];
	ФормыИмениДокумента.РодИмени   = "Ж";
	
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	Шаблон.Вставить("ИмяКомандыПулКодовМаркировки",      ИнтеграцияИСМПКлиентСервер.ИмяКомандыПулКодовМаркировки(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			НСтр("ru = 'в архиве'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'оформлена'"), НСтр("ru = 'оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'создана'"), НСтр("ru = 'создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'получена'"), НСтр("ru = 'получено'")))));
	
	Возврат Шаблон;
	
КонецФункции

// Возвращает допустимые типы документа-основания для указанного документа ИСМП.
//
// Параметры:
//	МетаданныеДокумента - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыИСМППоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	ОписаниеТипов - ОпределяемыйТип.Основание<МетаданныеДокументаИСМП.Имя>.Тип
//		тип реквизита ДокументОснование указанного документа ИСМП.
//
Функция ДокументыОснованияПоМетаданным(МетаданныеДокумента) Экспорт
	
	ТипыОснования = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокумента).Тип;
	Возврат ТипыОснования;
	
КонецФункции

#КонецОбласти

#Область СверкаКодовМаркировки

Функция ИспользуетсяФормаПросмотраРасхожденийПоКодамМаркировки(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСверкиКодовМаркировкиИСМП.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСВнешнимиСервисами

//Возвращает структуру параметров обмена.
//
//Возвращаемое значение:
//  Структура - параметры обмена
//
Функция ПараметрыОбмена(Организации = Неопределено, УникальныйИдентификатор = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("НастройкиОбменаСУЗ", НастройкиОбменаСУЗ(Организации, ЭтоРегламентноеЗадание));
	ПараметрыОбмена.Вставить("Организации",        Организации);
	
	ПараметрыОбмена.Вставить("КОбновлениюКлючейСессии",  Неопределено);
	ПараметрыОбмена.Вставить("СообщенияКПодписанию",     Неопределено);
	ПараметрыОбмена.Вставить("КОпределениюВидаУпаковки", Неопределено);
	ПараметрыОбмена.Вставить("СообщенияПослеПодписания", Неопределено);
	
	ПараметрыОбмена.Вставить("ОжидатьНаСервере", Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте", Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",   Неопределено);
	
	ПараметрыОбмена.Вставить("Изменения", Новый Массив);
	
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьСообщений",            ИнициализиоватьОчередьСообщений());
	ПараметрыОбмена.Вставить("ЗависимостиСообщений",        ИнициализироватьЗависимостиСообщений());
	
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресКОпределениюВидаУпаковки", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресКОпределениюВидаУпаковки", Неопределено);
	КонецЕсли;
	
	ТаблицаСтопЛист = Новый ТаблицаЗначений;
	ТаблицаСтопЛист.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	ПараметрыОбмена.Вставить("СтопЛист",                     ТаблицаСтопЛист);
	ПараметрыОбмена.Вставить("КонтрольКоличестваЗаказовСУЗ", Новый Соответствие());
	
	Возврат ПараметрыОбмена;
	
КонецФункции

#КонецОбласти

#Область СУЗ

// Возвращает доступные для текущего рабочего места настройки обмена с СУЗ на клиенте и на сервере
//
// Параметры:
//  Организации - Массив, ОпределяемыйТип.Организация - Организации для обмена.
//  ДатыПоследнегоЗапуска - Соответствие - Даты последнего запуска обменов на клиенте по расписанию.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОбменНаСервере - Соответствие - Настройки обмена на сервере, см. функцию ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ()
//   * ОбменНаКлиенте - Соответствие - Настройки обмена на клиенте, см. функцию ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ()
//   * БезНастроек - Массив Из ОпределяемыйТип.Организация - Организации для которых нет настроек обмена.
Функция НастройкиОбменаСУЗ(Организации = Неопределено, ДатыПоследнегоЗапуска = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ОбменНаКлиенте", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("БезНастроек",    Новый Массив);
	
	ОбменНаКлиентеПоРасписанию = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизаций.Ссылка КАК Организация,
	|	
	|	ВЫБОР КОГДА НастройкиОбменаСУЗ.Организация ЕСТЬ NULL
	|		И ОбщиеНастройкиОбменаСУЗ.Организация ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьНастройкиОбменаСУЗ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК СтанцияУправленияЗаказами,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами.Идентификатор
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами.Идентификатор
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Идентификатор,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.СтанцияУправленияЗаказами.ФорматОбмена
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.СтанцияУправленияЗаказами.ФорматОбмена
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ФорматОбмена,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Адрес ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Адрес
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Адрес ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Адрес
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Сервер,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИспользоватьЗащищенноеСоединение
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК ИспользоватьЗащищенноеСоединение,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Порт ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Порт
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Порт ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Порт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порт,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Таймаут ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Таймаут
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Таймаут ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Таймаут
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Таймаут,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.Токен ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.Токен
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.Токен ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.Токен
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Токен,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИдентификаторСоединения ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИдентификаторСоединения
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИдентификаторСоединения ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИдентификаторСоединения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИдентификаторСоединения,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ПроизводственныйОбъект ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ПроизводственныйОбъект
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ПроизводственныйОбъект ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ПроизводственныйОбъект
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ КАК ПроизводственныйОбъект,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ПроизводственныйОбъектАдрес ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ПроизводственныйОбъектАдрес
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ПроизводственныйОбъектАдрес ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ПроизводственныйОбъектАдрес
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПроизводственныйОбъектАдрес,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.КодФИАС ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.КодФИАС
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.КодФИАС ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.КодФИАС
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодФИАС,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ИмяПользователя ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ИмяПользователя
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ИмяПользователя ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ИмяПользователя
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИмяПользователя,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаСервере
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаСервере,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаКлиентеПоРасписанию,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ОбменНаКлиентеРасписание
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеРасписание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбменНаКлиентеРасписание,
	|
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию
	|		КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаСУЗ.ПолучатьКодовЗаИтерацию
	|		ИНАЧЕ 1000
	|	КОНЕЦ КАК ПолучатьКодовЗаИтерацию
	|ИЗ
	|	&ПолноеИмяСправочникаОрганизации КАК КлассификаторОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ
	|		ПО КлассификаторОрганизаций.Ссылка = НастройкиОбменаСУЗ.Организация
	|		И НастройкиОбменаСУЗ.РабочееМесто = &РабочееМесто
	|		И НЕ НастройкиОбменаСУЗ.ОбменНаСервере
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСУЗ КАК ОбщиеНастройкиОбменаСУЗ
	|		ПО КлассификаторОрганизаций.Ссылка = ОбщиеНастройкиОбменаСУЗ.Организация
	|		И ОбщиеНастройкиОбменаСУЗ.ОбменНаСервере
	|");
	
	ПустаяСсылкаНаОрганизацию = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"); // ОпределяемыйТип.Организация
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "&ПолноеИмяСправочникаОрганизации",
		ПустаяСсылкаНаОрганизацию.Метаданные().ПолноеИмя());
	
	Если Организации <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"И КлассификаторОрганизаций.Ссылка В(&Организации)";
	КонецЕсли;
	
	Если ОбменНаКлиентеПоРасписанию Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"И ВЫБОР
		|	КОГДА НЕ НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		НастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
		|	КОГДА НЕ ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		ОбщиеНастройкиОбменаСУЗ.ОбменНаКлиентеПоРасписанию
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС +
	"УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСоединения УБЫВ";
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("Организации",  Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбменНаКлиентеПоРасписаниюТребуется = Ложь;
		Если ОбменНаКлиентеПоРасписанию Тогда
			Если Выборка.ОбменНаКлиентеПоРасписанию Тогда
				Расписание = Выборка.ОбменНаКлиентеРасписание.Получить();
				Если Расписание <> Неопределено Тогда
					ДатаПоследнегоЗапуска = ДатыПоследнегоЗапуска.Получить(Выборка.ОрганизацияЕГАИС);
					Если ДатаПоследнегоЗапуска = Неопределено
						Или Расписание.ТребуетсяВыполнение(ТекущаяДатаСеанса(), ДатаПоследнегоЗапуска) Тогда
						ОбменНаКлиентеПоРасписаниюТребуется = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбменНаКлиентеПоРасписанию
			И Не ОбменНаКлиентеПоРасписаниюТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЕстьНастройкиОбменаСУЗ Тогда
			
			НастройкаОбменаСУЗ = ИнтерфейсСУЗСлужебный.НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер                           = Выборка.Сервер;
			НастройкаОбменаСУЗ.Порт                             = Выборка.Порт;
			НастройкаОбменаСУЗ.Таймаут                          = Выборка.Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = Выборка.ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = Выборка.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор                    = Выборка.Идентификатор;
			НастройкаОбменаСУЗ.Токен                            = Выборка.Токен;
			НастройкаОбменаСУЗ.ФорматОбмена                     = Выборка.ФорматОбмена;
			НастройкаОбменаСУЗ.ИмяПользователя                  = Выборка.ИмяПользователя;
			НастройкаОбменаСУЗ.ИдентификаторСоединения          = Выборка.ИдентификаторСоединения;
			НастройкаОбменаСУЗ.Организация                      = Выборка.Организация;
			НастройкаОбменаСУЗ.ПроизводственныйОбъект           = Выборка.ПроизводственныйОбъект;
			НастройкаОбменаСУЗ.ПроизводственныйОбъектАдрес      = Выборка.ПроизводственныйОбъектАдрес;
			НастройкаОбменаСУЗ.КодФИАС                          = Выборка.КодФИАС;
			
			Если ЗначениеЗаполнено(Выборка.ПолучатьКодовЗаИтерацию) Тогда
				НастройкаОбменаСУЗ.ПолучатьКодовЗаИтерацию = Выборка.ПолучатьКодовЗаИтерацию;
			КонецЕсли;
			
			Если Выборка.ОбменНаСервере Тогда
				НастройкиПоОрганизации = ВозвращаемоеЗначение.ОбменНаСервере.Получить(Выборка.Организация);
				Если НастройкиПоОрганизации = Неопределено Тогда
					НастройкиПоОрганизации = Новый Массив();
					ВозвращаемоеЗначение.ОбменНаСервере.Вставить(Выборка.Организация, НастройкиПоОрганизации);
				КонецЕсли;
				НастройкиПоОрганизации.Добавить(НастройкаОбменаСУЗ);
			Иначе
				ВозвращаемоеЗначение.ОбменНаКлиенте.Вставить(Выборка.Организация, НастройкаОбменаСУЗ);
			КонецЕсли;
			
		Иначе
			
			Если Организации <> Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Выборка.Организация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Организации <> Неопределено Тогда
		
		Если ТипЗнч(Организации) = Тип("Массив") Тогда
			ОрганизацииДляПроверки = Организации;
		Иначе
			ОрганизацииДляПроверки = Новый Массив;
			ОрганизацииДляПроверки.Добавить(Организации);
		КонецЕсли;
		
		Для Каждого Организация Из ОрганизацииДляПроверки Цикл
			Если ВозвращаемоеЗначение.ОбменНаКлиенте.Получить(Организация) = Неопределено
				И (ВозвращаемоеЗначение.ОбменНаСервере.Получить(Организация) = Неопределено
					Или ВозвращаемоеЗначение.ОбменНаСервере.Получить(Организация).Количество() = 0)
				И ВозвращаемоеЗначение.БезНастроек.Найти(Организация) = Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Организация);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ФормаУточненияДанныхКодаМаркировки

Процедура НастроитьШаблоныФормыУточненияДанных(Форма, ВидПродукции) Экспорт
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(ВидПродукции);
	
	Для Каждого ЭлементСпискаЗначений Из ДоступныеШаблоны Цикл
		Форма.Элементы.ШаблонКодаМаркировки.СписокВыбора.Добавить(
			ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
	КонецЦикла;
	
	Если ДоступныеШаблоны.Количество() = 1 Тогда
		Форма.ШаблонКодаМаркировки = ДоступныеШаблоны.Получить(0).Значение;
	ИначеЕсли ДоступныеШаблоны.Количество() > 1 Тогда
		Форма.Элементы.ШаблонКодаМаркировки.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДальнейшиеДействия

Функция НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействиеИСМП, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействиеИСМП", ДальнейшееДействиеИСМП) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ИСМП в форме документа.
// 
// Возвращаемое значение:
//  Массив - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru = 'Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru = 'Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru = 'Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействиеИСМП1";
	
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ВсеТребующиеДействияСписок = Новый СписокЗначений;
		ВсеТребующиеДействияСписок.ЗагрузитьЗначения(ВсеТребующиеДействия);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ВсеТребующиеОжиданияСписок = Новый СписокЗначений;
		ВсеТребующиеОжиданияСписок.ЗагрузитьЗначения(ВсеТребующиеОжидания);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеОжиданияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый СписокЗначений();
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область GTIN

// Получает массив GTIN для выбора.
// 
// Параметры:
// 	ТекущиеДанные          - ДанныеФормыЭлементКоллекции - Текущая строка таблицы.
// 	Объект                 - Неопределено, ДанныеФормыСтруктура        - Форма-источник события.
// 	ВключатьGTINНаОстатки  - Булево - Определяет необходимость включения в состав остаточных GTIN.
// 	ДопустимыеВидыУпаковок - Неопределено, Массив из см. ПеречислениеСсылка.ВидыУпаковокИС - Допустимые виды упаковок.
// Возвращаемое значение:
// 	Массив из Строка - Значения GTIN.
Функция МассивЗначенийGTINДляВыбора(ТекущиеДанные, Объект, ВключатьGTINНаОстатки = Ложь, ДопустимыеВидыУпаковок = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",                Объект);
	ДополнительныеПараметры.Вставить("ВключатьGTINНаОстатки", ВключатьGTINНаОстатки);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "ХарактеристикиИспользуются") Тогда
		ИспользоватьХарактеристики = ТекущиеДанные.ХарактеристикиИспользуются;
	Иначе
		ИспользоватьХарактеристики = Истина;
	КонецЕсли;
	
	Если ДопустимыеВидыУпаковок = Неопределено Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные, "Шаблон") Тогда
			ВидУпаковки = ИнтеграцияИСМПСлужебныйКлиентСервер.ВидУпаковкиПоШаблонуКодаМаркировки(ТекущиеДанные.Шаблон);
		Иначе
			ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		КонецЕсли;
	Иначе
		ВидУпаковки = Неопределено;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ТекущиеДанные);
	
	ДанныеДляУточнения = ДанныеДляУточненияКоэффициентовУпаковок(МассивДанных, ИспользоватьХарактеристики, ДополнительныеПараметры);
	
	Для Каждого СтрокаДанных Из ДанныеДляУточнения Цикл
		
		Если ДопустимыеВидыУпаковок <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			И ДопустимыеВидыУпаковок.Найти(СтрокаДанных.ВидУпаковки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидУпаковки <> Неопределено Тогда
			Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) И Не ЗначениеЗаполнено(СтрокаДанных.Упаковка) Тогда
					Результат.Добавить(СтрокаДанных.GTIN);
				КонецЕсли;
			ИначеЕсли СтрокаДанных.ВидУпаковки = ВидУпаковки
				И СтрокаДанных.КоличествоПотребительскихУпаковок <> 1 Тогда
				Результат.Добавить(СтрокаДанных.GTIN);
			КонецЕсли;
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) И Не ЗначениеЗаполнено(СтрокаДанных.Упаковка) Тогда
			Результат.Добавить(СтрокаДанных.GTIN);
		ИначеЕсли СтрокаДанных.КоличествоПотребительскихУпаковок <> 1 Тогда
			Результат.Добавить(СтрокаДанных.GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УпаковкиНоменклатурыИНаборы

// Возвращает сведения об иерархии упаковок номенклатуры
//
// Параметры:
//  Номенклатура - Массив из ОпределяемыйТип.Номенклатура.
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнтеграцияИСМППереопределяемый.ПриОпределенииИерархииУпаковокНоменклатуры - упаковки номенклатуры
Функция ИерархияУпаковокНоменклатуры(Номенклатура) Экспорт
	
	УпаковкиНоменклатуры = Новый ТаблицаЗначений;
	УпаковкиНоменклатуры.Колонки.Добавить("Номенклатура",       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	УпаковкиНоменклатуры.Колонки.Добавить("Упаковка",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	УпаковкиНоменклатуры.Колонки.Добавить("РодительУпаковки",   Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	УпаковкиНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	УпаковкиНоменклатуры.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	УпаковкиНоменклатуры.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	УпаковкиНоменклатуры.Колонки.Добавить("Коэффициент",        ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат УпаковкиНоменклатуры;
	КонецЕсли;
	
	ИнтеграцияИСМППереопределяемый.ПриОпределенииИерархииУпаковокНоменклатуры(Номенклатура, УпаковкиНоменклатуры);
	
	Возврат УпаковкиНоменклатуры;
	
КонецФункции

// Заполняет коэффициенты групповых упаковок и наборов для переданных значений GTIN.
// 
// Параметры:
// 	Данные - Соответствие из КлючИЗначение:
//		*Ключ     - Строка - значение GTIN,
//		*Значение - Структура:
//			*Номенклатура                      - ОпределяемыйТип.Номенклатура,
//			*Характеристика                    - ОпределяемыйТип.ХарактеристикаНоменклатуры,
//			*КоличествоПотребительскихУпаковок - Число - количество потребительских упаковок в групповой упаковке.
// 	Групповые - Булево - заполнять коэффициенты групповых упаковок.
// 	Наборы    - Булево - заполнять коэффициенты наборов.
Процедура ЗаполнитьКоличествоПотребительскихУпаковокПоGTIN(Данные, Групповые = Истина, Наборы = Истина) Экспорт
	
	МассивДанных = Новый Массив;
	Для Каждого КлючИЗначение Из Данные Цикл
		МассивДанных.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ДанныеДляУточнения = ДанныеДляУточненияКоэффициентовУпаковок(МассивДанных);
	
	Для Каждого СтрокаДанных Из ДанныеДляУточнения Цикл
		
		Если Групповые И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или Наборы И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			ДанныеПоGTIN = Данные[СтрокаДанных.GTIN];
			Если ДанныеПоGTIN <> Неопределено Тогда
				ДанныеПоGTIN.КоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные для уточнения коэффициентов упаковок.
// 
// Параметры:
// 	ВходящиеДанные        - ТаблицаЗначений, Массив из Структура, ДанныеФормыЭлементКоллекции - массив структур:
//   * Номенклатура       - ОпределяемыйТип.Номенклатура - номенклатура,
//   * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика.
// 	ИспользоватьХарактеристики - Булево - Признак использования характеристик для поиска GTIN.
// 	ДополнительныеПараметры - Структура:
// 	 * Объект                - ДанныеФормыСтруктура - Форма-источник события.
// 	 * ВключатьGTINНаОстатки - Булево - Определяет необходимость включения в состав остаточных GTIN.
// Возвращаемое значение:
//  ТаблицаЗначений - ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаОписанияGTIN.
Функция ДанныеДляУточненияКоэффициентовУпаковок(ВходящиеДанные, ИспользоватьХарактеристики = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДанныеДляУточнения = ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаОписанияGTIN();
	
	ТаблицаНоменклатуры = ДанныеДляУточнения.СкопироватьКолонки("Номенклатура, Характеристика");
	
	Для Каждого Строка Из ВходящиеДанные Цикл
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ТаблицаНоменклатуры.Свернуть("Номенклатура, Характеристика");
	
	СоответствиеGTIN = Новый Соответствие;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ВключатьGTINНаОстатки")
		И ДополнительныеПараметры.ВключатьGTINНаОстатки
		И ВходящиеДанные.Количество() = 1 Тогда
		
		ПроверяемыеGTIN = ШтрихкодированиеИСМП.МассивGTINНаОстаткиДляВыбора(ВходящиеДанные[0], ДополнительныеПараметры.Объект);
		ПустаяУпаковка  = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка");
		
		Для Каждого GTIN Из ПроверяемыеGTIN Цикл
			ДанныеШтрихкода = Новый Структура;
			ДанныеШтрихкода.Вставить("Номенклатура",   ВходящиеДанные[0].Номенклатура);
			ДанныеШтрихкода.Вставить("Характеристика", ВходящиеДанные[0].Характеристика);
			ДанныеШтрихкода.Вставить("Упаковка",       ПустаяУпаковка);
			ДанныеШтрихкода.Вставить("Коэффициент",    1);
			
			СоответствиеGTIN.Вставить(GTIN, ДанныеШтрихкода);
		КонецЦикла;
		
	Иначе
		
		ПроверяемыеGTIN = Новый Массив;
		
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(
			ТаблицаНоменклатуры, ПроверяемыеGTIN, СоответствиеGTIN, Истина, ИспользоватьХарактеристики);
		
	КонецЕсли;
	
	ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	ОписаниеGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(ПроверяемыеGTIN);
	
	ЭтоНастройкаКарточкиНоменклатуры = Ложь;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ЭтоНастройкаКарточкиНоменклатуры")
		И ДополнительныеПараметры.ЭтоНастройкаКарточкиНоменклатуры Тогда
		ЭтоНастройкаКарточкиНоменклатуры = Истина;
	КонецЕсли;
	
	Для Каждого GTIN Из ПроверяемыеGTIN Цикл
		
		ДанныеПоGTIN               = СоответствиеGTIN[GTIN];
		ДанныеОписанияGTIN         = ОписаниеGTIN[GTIN];
		ДанныеОписанияНоменклатуры = ОписаниеНоменклатуры[ДанныеПоGTIN.Номенклатура];
		
		ПотребительскаяУпаковка            = ДанныеОписанияНоменклатуры.ПотребительскаяУпаковка;
		КоличествоВПотребительскойУпаковке = ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке;
		
		Если Не ЭтоНастройкаКарточкиНоменклатуры
			И ИнтеграцияИС.УпаковкиИспользуются()
			И КоличествоВПотребительскойУпаковке > 0
			И Не ЧислаКратны(ДанныеПоGTIN.Коэффициент, КоличествоВПотребительскойУпаковке) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = ДанныеДляУточнения.Добавить();
		СтрокаДанных.GTIN           = GTIN;
		СтрокаДанных.Номенклатура   = ДанныеПоGTIN.Номенклатура;
		СтрокаДанных.Характеристика = ДанныеПоGTIN.Характеристика;
		СтрокаДанных.Упаковка       = ДанныеПоGTIN.Упаковка;
		СтрокаДанных.Коэффициент    = ДанныеПоGTIN.Коэффициент;
		СтрокаДанных.КоличествоВПотребительскойУпаковке = КоличествоВПотребительскойУпаковке;
		
		Если ЗначениеЗаполнено(ПотребительскаяУпаковка)
			И ПотребительскаяУпаковка = СтрокаДанных.Упаковка Тогда
			СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			СтрокаДанных.КоличествоПотребительскихУпаковок = 1;
		ИначеЕсли ДанныеОписанияGTIN <> Неопределено Тогда
			СтрокаДанных.ВидУпаковки = ДанныеОписанияGTIN.ВидУпаковки;
			СтрокаДанных.КоличествоПотребительскихУпаковок = ДанныеОписанияGTIN.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Упаковка)
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаДанных.КоличествоВПотребительскойУпаковке > 0 Тогда
			СтрокаДанных.КоличествоПотребительскихУпаковок = Окр(СтрокаДанных.Коэффициент / СтрокаДанных.КоличествоВПотребительскойУпаковке, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляУточнения.Сортировать("Номенклатура, Характеристика, КоличествоПотребительскихУпаковок, GTIN");
	
	Возврат ДанныеДляУточнения;
	
КонецФункции

// Возвращает данные о комплектующих набора
//
// Параметры:
//  Наборы - ТаблицаЗначений, ДанныеФормыКоллекция, Массив -
//                   см. ИнтеграцияИСМППереопределяемый.ПриОпределенииКомплектующихНаборов.
//                   Для идентификации набора, который является аналогом групповой упаковки,
//                   т.е. состоит из той же номенклатуры, что и сам набор, но различается по GTIN,
//                   необходимо в данные набора включить поле GTIN. Структура всех строк должна быть идентична.
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнтеграцияИСМППереопределяемый.ПриОпределенииКомплектующихНаборов - комплектующие наборов
Функция КомплектующиеНаборов(Знач Наборы) Экспорт
	
	КомплектующиеНаборов = Новый ТаблицаЗначений;
	КомплектующиеНаборов.Колонки.Добавить("НомерСтрокиНабора",            ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КомплектующиеНаборов.Колонки.Добавить("НоменклатураНабора",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	КомплектующиеНаборов.Колонки.Добавить("ХарактеристикаНабора",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КомплектующиеНаборов.Колонки.Добавить("УпаковкаНабора",               Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	КомплектующиеНаборов.Колонки.Добавить("НомерСтрокиКомплектации",      ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КомплектующиеНаборов.Колонки.Добавить("Номенклатура",                 Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	КомплектующиеНаборов.Колонки.Добавить("Характеристика",               Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КомплектующиеНаборов.Колонки.Добавить("Упаковка",                     Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	КомплектующиеНаборов.Колонки.Добавить("КоличествоУпаковок",           ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	КомплектующиеНаборов.Колонки.Добавить("Количество",                   ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	
	Если Наборы.Количество() = 0 Тогда
		Возврат КомплектующиеНаборов;
	КонецЕсли;
	
	КомплектующиеНаборовПоGTIN = КомплектующиеНаборов.СкопироватьКолонки();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Наборы[0], "GTIN") Тогда
		
		ДанныеПоGTIN = Новый Соответствие;
		Для Каждого Строка Из Наборы Цикл
			
			Если Не ЗначениеЗаполнено(Строка.GTIN) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Номенклатура",                      Строка.Номенклатура);
			СтруктураДанных.Вставить("Характеристика",                    Строка.Характеристика);
			СтруктураДанных.Вставить("КоличествоПотребительскихУпаковок", 1);
			
			ДанныеПоGTIN.Вставить(Строка.GTIN, СтруктураДанных);
			
		КонецЦикла;
		
		Если ДанныеПоGTIN.Количество() > 0 Тогда
			ЗаполнитьКоличествоПотребительскихУпаковокПоGTIN(ДанныеПоGTIN, Ложь, Истина);
		КонецЕсли;
		
		КоличествоСтрок = Наборы.Количество();
		Для Счетчик = 1 По КоличествоСтрок Цикл
			
			Индекс = КоличествоСтрок - Счетчик;
			Строка = Наборы[Индекс];
			Если Не ЗначениеЗаполнено(Строка.GTIN) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанных = ДанныеПоGTIN[Строка.GTIN];
			Если СтруктураДанных.КоличествоПотребительскихУпаковок <= 1
				Или СтруктураДанных.Номенклатура <> Строка.Номенклатура
				Или СтруктураДанных.Характеристика <> Строка.Характеристика Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = КомплектующиеНаборовПоGTIN.Добавить();
			СтрокаТаблицы.НомерСтрокиНабора            = Строка.НомерСтроки;
			СтрокаТаблицы.НоменклатураНабора           = Строка.Номенклатура;
			СтрокаТаблицы.ХарактеристикаНабора         = Строка.Характеристика;
			СтрокаТаблицы.УпаковкаНабора               = Строка.Упаковка;
			СтрокаТаблицы.НомерСтрокиКомплектации      = 1;
			СтрокаТаблицы.Номенклатура                 = Строка.Номенклатура;
			СтрокаТаблицы.Характеристика               = Строка.Характеристика;
			СтрокаТаблицы.Упаковка                     = Строка.Упаковка;
			СтрокаТаблицы.КоличествоУпаковок           = Строка.КоличествоУпаковок
				* СтруктураДанных.КоличествоПотребительскихУпаковок;
			СтрокаТаблицы.Количество                   = Строка.Количество
				* СтруктураДанных.КоличествоПотребительскихУпаковок;
			
			Наборы.Удалить(Индекс);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Наборы.Количество() > 0 Тогда
		ИнтеграцияИСМППереопределяемый.ПриОпределенииКомплектующихНаборов(Наборы, КомплектующиеНаборов);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из КомплектующиеНаборовПоGTIN Цикл
		НоваяСтрока = КомплектующиеНаборов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	КомплектующиеНаборов.Сортировать("НомерСтрокиНабора Убыв, НомерСтрокиКомплектации");
	
	Возврат КомплектующиеНаборов;
	
КонецФункции

#КонецОбласти

// Проверяет что регистрация оборота маркируемой продукции переданного вида производится в тестовом режиме на текущую дату.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
//  Булево - Истина, если в системе установлен признак ведения учета по переданному виду маркируемой продукции и текущая дата менее даты обязательной регистрации.
//
Функция ЭтоТестовыйПериод(ВидМаркируемойПродукции) Экспорт
	
	Возврат ИнтеграцияИСМПКлиентСерверПовтИсп.ТестоваяРегистрацияОборотаМаркируемойПродукции(
		ВидМаркируемойПродукции, НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

// Получает контрагентов по массиву ИНН.
//
//Параметры:
//   КоллекцияИНН - Массив - список ИНН контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                          - ИНН контрагента.
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - элемент справочника.
Функция КонтрагентыПоСпискуИНН(КоллекцияИНН) Экспорт
	
	СоответствиеИННКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, СоответствиеИННКонтрагентам);
	
	Возврат СоответствиеИННКонтрагентам;
	
КонецФункции

// Получает контрагентов по массиву налоговых номеров, для юр.лиц за пределами РФ.
//
//Параметры:
//   КоллекцияНалоговыхНомеров - Массив - список налоговых номеров контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                          - налоговый номер контрагента.
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - элемент справочника.
Функция КонтрагентыПоСпискуНалоговыхНомеров(КоллекцияНалоговыхНомеров) Экспорт
	
	СоответствиеНалоговыхНомеровКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, СоответствиеНалоговыхНомеровКонтрагентам);
	
	Возврат СоответствиеНалоговыхНомеровКонтрагентам;
	
КонецФункции

// Получает контрагентов по массиву ИНН.
//
//Параметры:
//   КоллекцияИНН - Массив - список ИНН контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                                     - ИНН контрагента.
//    * Значение - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - элемент справочника.
Функция ОрганизацииПоСпискуИНН(КоллекцияИНН) Экспорт
	
	СоответствиеИННОрганизациям = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, СоответствиеИННОрганизациям);
	
	Возврат СоответствиеИННОрганизациям;
	
КонецФункции

//Определяет контрагента по ИНН.
//
// Параметры:
//   ИНН - Строка - ИНН контрагента.
//
//Возвращаемое значение:
//   ОпределяемыйТип.КонтрагентГосИС - Контрагент, найденный по ИНН.
//
Функция КонтрагентПоИНН(ИНН) Экспорт
	
	МассивИНН = Новый Массив;
	МассивИНН.Добавить(ИНН);
	КонтрагентыПоИНН = КонтрагентыПоСпискуИНН(МассивИНН);
	
	Возврат КонтрагентыПоИНН.Получить(ИНН);
	
КонецФункции

//Определяет контрагента по налоговому номеру для юр. лиц, за пределами РФ.
//
// Параметры:
//   НалоговыйНомер - Строка - Налоговы йНомер контрагента.
//
//Возвращаемое значение:
//   ОпределяемыйТип.КонтрагентГосИС - Контрагент, найденный по НалоговыйНомер.
//
Функция КонтрагентПоНалоговомуНомеру(НалоговыйНомер) Экспорт
	
	МассивНалоговыхНомеров = Новый Массив;
	МассивНалоговыхНомеров.Добавить(НалоговыйНомер);
	
	КонтрагентыПоНалоговомуНомеру = КонтрагентыПоСпискуНалоговыхНомеров(МассивНалоговыхНомеров);
	
	Возврат КонтрагентыПоНалоговомуНомеру.Получить(НалоговыйНомер);
	
КонецФункции

Функция ПолучитьДанныеСопоставленногоКлассификатораТНВЭД(КодТНВЭД, Наименование) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеПолное");
	Результат.Вставить("ЭлементСправочника");
	ИнтеграцияИСМППереопределяемый.ПриОпределенииСопоставленногоКлассификатораТНВЭД(КодТНВЭД, Результат, Наименование);
	Возврат Результат;
	
КонецФункции

Функция ИНННалоговыйНомерКонтрагентов(Контрагенты) Экспорт
	
	СоответствиеИННКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриОпределенииИНННалоговыхНомеровКонтрагентов(СоответствиеИННКонтрагентам, Контрагенты);
	Возврат СоответствиеИННКонтрагентам;
	
КонецФункции

Функция ОбъемМаркируемойПродукцииВЛитрах(Номенклатура) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Номенклатура) = Тип("Массив") Тогда
		Массив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Номенклатура)
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Номенклатура);
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Таблица.Колонки.Добавить("ОбъемВЛитрах", ОбщегоНазначения.ОписаниеТипаЧисло(6, 3));
	
	Для Каждого Значение Из Массив Цикл
		Строка = Таблица.Добавить();
		Строка.Номенклатура = Значение;
	КонецЦикла;
	
	ИнтеграцияИСМППереопределяемый.ОбъемМаркируемойПродукцииВЛитрах(Таблица);
	
	Для Каждого Строка Из Таблица Цикл
		Результат.Вставить(Строка.Номенклатура, Строка.ОбъемВЛитрах);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область Сертификация

Процедура СоздатьКэшСертификацииЛицензии(Форма) Экспорт
	
	СписокНоменклатуры = Новый Массив;
	ИспользоватьПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(Форма);
	ДоступноУказаниеНомераСкважины  = ИнтеграцияИСМПКлиентСервер.ДоступноУказаниеНомераСкважиныВДанныхСертификации(Форма.Объект.Операция);
	ДоступноУказаниеДанныхИмпорта   = ИнтеграцияИСМПКлиентСервер.ДоступноЗаполнениеДанныхИмпорта(Форма.Объект.Операция);
	ИспользоватьНомерСкважины = Ложь;
	Если ДоступноУказаниеНомераСкважины Тогда
		ИспользоватьНомерСкважины = ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(Форма);
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		
		ДанныеЗаполнения = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
		ДанныеЗаполнения.ВидСертификации           = СтрокаТовары.ВидДокументаСертификации;
		ДанныеЗаполнения.ДатаСертификации          = СтрокаТовары.ДатаДокументаСертификации;
		ДанныеЗаполнения.НомерСертификации         = СтрокаТовары.НомерДокументаСертификации;
		ДанныеЗаполнения.ИспользоватьНомерСкважины = ИспользоватьНомерСкважины;
		Если ДоступноУказаниеНомераСкважины Тогда
			ДанныеЗаполнения.НомерСкважины = СтрокаТовары.НомерСкважины;
		КонецЕсли;
		
		ИнтеграцияИСМПКлиентСервер.ОбновитьКэшСертификации(Форма, ДанныеЗаполнения, СтрокаТовары.Номенклатура);
		СтрокаТовары.Сертификация = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполнения);
		
		Если ИспользоватьПаспортСоответствия Тогда
			ДанныеЗаполнения = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
			ДанныеЗаполнения.НомерСертификации = СтрокаТовары.НомерПаспортаСоответствия;
			ДанныеЗаполнения.ДатаСертификации  = СтрокаТовары.ДатаПаспортаСоответствия;
			ДанныеЗаполнения.КемВыдан          = СтрокаТовары.КемВыданПаспортСоответствия;
			СтрокаТовары.ПаспортСоответствия   = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполнения);
			ИнтеграцияИСМПКлиентСервер.ОбновитьКэшСертификации(Форма, ДанныеЗаполнения, СтрокаТовары.Номенклатура);
		КонецЕсли;
		
		Если ИспользоватьНомерСкважины Тогда
			
			ДанныеЗаполнения = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияЛицензииНаНедра();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТовары);
			ИнтеграцияИСМПКлиентСервер.ОбновитьКэшЛицензииНаПользованиеНедрами(Форма, ДанныеЗаполнения, СтрокаТовары.Номенклатура);
			СтрокаТовары.ЛицензияНаПользованиеНедрами = ИнтеграцияИСМПКлиентСервер.ПредставлениеЛицензииНаНедра(ДанныеЗаполнения);
			
		КонецЕсли;
		
		Если ДоступноУказаниеДанныхИмпорта Тогда
			
			ДанныеЗаполнения = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСведенийОбИмпорте();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТовары);
			ИнтеграцияИСМПКлиентСервер.ОбновитьКэшДанныхИмпорта(Форма, ДанныеЗаполнения, СтрокаТовары.Номенклатура);
			СтрокаТовары.ДанныеИмпорта = ИнтеграцияИСМПКлиентСервер.ПредставлениеДанныхИмпорта(ДанныеЗаполнения);
			
		КонецЕсли;
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры);
	
КонецПроцедуры

Процедура ЗаполнитьДоступныеВидыДокументовСертификации(Элемент, ВидПродукции) Экспорт
	
	Элемент.СписокВыбора.Очистить();
	
	Если ВидПродукции <> Перечисления.ВидыПродукцииИС.БАДы
		И ВидПродукции <> Перечисления.ВидыПродукцииИС.Пиво
		И ВидПродукции <> Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС Тогда
			Если КормаДляЖивотныхПодконтрольныеВЕТИСДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС Тогда
			Если КормаДляЖивотныхБезВЕТИСДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС Тогда
			Если МясоПодконтрольноеВЕТИСДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты Тогда
			Если ВетеринарныеПрепаратыДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей Тогда
			Если ИгрыИИгрушкиДляДетейДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция Тогда
			Если РадиоэлектроннаяПродукцияДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция Тогда
			Если ТитановаяМеталлопродукцияДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС Тогда
			Если КонсервированнаяПродукцияПодконтрольнаяВЕТИСДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
			Если КонсервированнаяПродукцияБезВЕТИСДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РастительныеМасла Тогда
			Если РастительныеМаслаДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция Тогда
			Если ОптоволокноИОптоволоконнаяПродукцияДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
			Если ПарфюмерныеИКосметическиеСредстваИБытоваяХимияДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатнаяПродукция Тогда
			Если ПечатнаяПродукцияДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СтроительныеМатериалы Тогда
			Если СтроительныеМатериалыДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОтопительныеПриборы Тогда
			Если ОтопительныеПриборыДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Бакалея Тогда
			Если БакалеяДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов Тогда
			Если АлкогольнаяПродукцияДо9ПроцентовДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки Тогда
			Если ТелефоныИНоутбукиДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
			Если ПиротехническиеИзделияИСредстваПожарнойБезопасностиДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КабельнаяПродукция Тогда
			Если КабельнаяПродукцияДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МоторныеМасла Тогда
			Если МоторныеМаслаДоступенСертификатСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
			КонецЕсли;
		Иначе
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СертификатСоответствия);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПродукции <> Перечисления.ВидыПродукцииИС.БАДы Тогда
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС Тогда
			Если КормаДляЖивотныхПодконтрольныеВЕТИСДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС Тогда
			Если КормаДляЖивотныхБезВЕТИСДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС Тогда
			Если МясоПодконтрольноеВЕТИСДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты Тогда
			Если ВетеринарныеПрепаратыДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей Тогда
			Если ИгрыИИгрушкиДляДетейДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция Тогда
			Если РадиоэлектроннаяПродукцияДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция Тогда
			Если ТитановаяМеталлопродукцияДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС Тогда
			Если КонсервированнаяПродукцияПодконтрольнаяВЕТИСДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
			Если КонсервированнаяПродукцияБезВЕТИСДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РастительныеМасла Тогда
			Если РастительныеМаслаДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция Тогда
			Если ОптоволокноИОптоволоконнаяПродукцияДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
			Если ПарфюмерныеИКосметическиеСредстваИБытоваяХимияДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатнаяПродукция Тогда
			Если ПечатнаяПродукцияДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СтроительныеМатериалы Тогда
			Если СтроительныеМатериалыДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОтопительныеПриборы Тогда
			Если ОтопительныеПриборыДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Бакалея Тогда
			Если БакалеяДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов Тогда
			Если АлкогольнаяПродукцияДо9ПроцентовДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки Тогда
			Если ТелефоныИНоутбукиДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
			Если ПиротехническиеИзделияИСредстваПожарнойБезопасностиДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КабельнаяПродукция Тогда
			Если КабельнаяПродукцияДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МоторныеМасла Тогда
			Если МоторныеМаслаДоступнаДекларацияСоответствия() Тогда
				Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
			КонецЕсли;
		Иначе
			Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия);
		КонецЕсли;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетСвидетельствоОГосударственнойРегистрации(ВидПродукции) Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыДокументовОбязательнойСертификацииИС.СвидетельствоОГосударственнойРегистрации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

Процедура СообщитьОДубляхНоменклатуры(СообщениеJSON, ПараметрыОтбора) Экспорт
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
				ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					ПараметрыОтбора.Номенклатура,
					ПараметрыОтбора.Характеристика,,
					ПараметрыОтбора.Серия)));
КонецПроцедуры

Процедура СообщитьОДубляхGTIN(СообщениеJSON, ПараметрыОтбора) Экспорт
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'В табличной части ""Товары"" дублируется GTIN %1.'"),
			ПараметрыОтбора.GTIN));
КонецПроцедуры

Процедура СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, ПараметрыОтбора) Экспорт
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
			ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				ПараметрыОтбора.Номенклатура,
				ПараметрыОтбора.Характеристика,,
				ПараметрыОтбора.Серия)));
КонецПроцедуры

Процедура СообщитьОбОтсутствующемGTIN(СообщениеJSON, ПараметрыОтбора) Экспорт
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'В табличной части ""Товары"" не найден GTIN %1.'"),
			ПараметрыОтбора.GTIN));
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализиоватьОчередьСообщений()

	ОчередьСообщений = Новый ТаблицаЗначений;
	ОчередьСообщений.Колонки.Добавить("ДатаСоздания");
	ОчередьСообщений.Колонки.Добавить("Сообщение");
	ОчередьСообщений.Колонки.Добавить("СообщениеОснование");
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	ОчередьСообщений.Колонки.Добавить("ВидПродукции");
	ОчередьСообщений.Колонки.Добавить("Операция");
	ОчередьСообщений.Колонки.Добавить("Назначение");
	ОчередьСообщений.Колонки.Добавить("СтанцияУправленияЗаказами");
	ОчередьСообщений.Колонки.Добавить("ПроизводственныйОбъект");
	
	// Источник
	ОчередьСообщений.Колонки.Добавить("Организация");
	ОчередьСообщений.Колонки.Добавить("Документ");
	ОчередьСообщений.Колонки.Добавить("ДокументОснование");
	
	// Описание, протокол и очередь
	ОчередьСообщений.Колонки.Добавить("РеквизитыИсходящегоСообщения");
	ОчередьСообщений.Колонки.Добавить("ПротоколОбмена");
	ОчередьСообщений.Колонки.Добавить("ДатаМодификацииУниверсальная", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ИдентификаторЗаявки");
	ОчередьСообщений.Колонки.Добавить("ИдентификаторПоследнегоБлокаКодов");
	
	// Временная техническая информация
	ОчередьСообщений.Колонки.Добавить("КоличествоИтераций",    Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ДатаСледующейИтерации", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатус");
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатусОбработки");
	ОчередьСообщений.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	// Индексы
	ОчередьСообщений.Индексы.Добавить("Сообщение");
	ОчередьСообщений.Индексы.Добавить("СтанцияУправленияЗаказами, ИдентификаторЗаявки");
	
	Возврат ОчередьСообщений;
	
КонецФункции

Функция ИнициализироватьЗависимостиСообщений() Экспорт
	
	ЗависимостиСообщений = Новый ТаблицаЗначений;
	ЗависимостиСообщений.Колонки.Добавить("Сообщение1");
	ЗависимостиСообщений.Колонки.Добавить("Сообщение2");
	ЗависимостиСообщений.Колонки.Добавить("Загрузка");
	ЗависимостиСообщений.Колонки.Добавить("Передача");
	
	// Индексы
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение2");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Передача");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Загрузка");
	
	Возврат ЗависимостиСообщений;

КонецФункции

// Возвращает новые параметры описания номенклатуры.
//
// Возвращаемое значение:
//  Структура - Инициализировать данные описания:
// * Номенклатура                        - ОпределяемыйТип.Номенклатура                                - Номенклатура.
// * ЕмкостьПотребительскойУпаковки      - Число                                                       - Емкость потребительской упаковки для часчтиного выбытия.
// * КоличествоВПотребительскойУпаковке  - Число                                                       - Количество учетных единиц товара в потребительской упаковке.
// * ВариантЧастичногоВыбытия            - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС       - Вариант частичного выбытия.
// * ВариантИспользованияЕдиницыХранения - ПеречислениеСсылка.ВариантыИспользованияЕдиницыХраненияИС - Вариант использования единицы измерения.
Функция ИнициализироватьДанныеОписанияНоменклатуры() Экспорт
	
	ДанныеНоменклатуры = ОбщегоНазначенияИС.ИнициализироватьДанныеОписанияНоменклатуры();
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Функция ДанныеНоменклатуры(Номенклатура) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЕдиницаИзмерения");
	ВозвращаемоеЗначение.Вставить("ХарактеристикиИспользуются", Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетВзвешивания",         Ложь);
	ВозвращаемоеЗначение.Вставить("ПроизвольнаяЕдиницаУчета",   Ложь);
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений();
	ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаНоменклатуры.Колонки.Добавить("ТребуетВзвешивания",         Новый ОписаниеТипов("Булево"));
	ТаблицаНоменклатуры.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",   Новый ОписаниеТипов("Булево"));
	
	СтрокаДляНастроекНоменклатуры = ТаблицаНоменклатуры.Добавить();
	СтрокаДляНастроекНоменклатуры.Номенклатура = Номенклатура;
	СтрокаДляНастроекНоменклатуры.НомерСтроки  = 1;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, ТаблицаНоменклатуры);
	
	ВозвращаемоеЗначение.ЕдиницаИзмерения           = СтрокаДляНастроекНоменклатуры.ЕдиницаИзмерения;
	ВозвращаемоеЗначение.ХарактеристикиИспользуются = СтрокаДляНастроекНоменклатуры.ХарактеристикиИспользуются;
	ВозвращаемоеЗначение.ТребуетВзвешивания         = СтрокаДляНастроекНоменклатуры.ТребуетВзвешивания;
	ВозвращаемоеЗначение.ПроизвольнаяЕдиницаУчета   = СтрокаДляНастроекНоменклатуры.ПроизвольнаяЕдиницаУчета;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СостояниеОбмена(Организации) Экспорт
	
	ИдентификаторыПроблемГИСМТ = СоответствиеТребованиямГИСМТ.ВозможныеПроблемыОбмена().Идентификаторы;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ОчередьСообщенийИСМП.Сообщение), 0) КАК КоличествоСообщений
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|ГДЕ
	|	&БезОтбора ИЛИ ОчередьСообщенийИСМП.Организация В(&Организация)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийИСМП.Сообщение), 0) > 0
	|",
	"ЕстьСообщенияОжидающиеОтправки");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|
	|ГДЕ
	|	РезультатыОбработкиДокументовИСМП.Статус В(&СтатусыОбработкиСОшибкой)
	|	И РезультатыОбработкиДокументовИСМП.ТипДокумента В(&ТипыЭлектронныхДокументов)
	|	И РезультатыОбработкиДокументовИСМП.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусОтправкиГИСМТ.ДоставленВГИСМТ)
	|	И (РезультатыОбработкиДокументовИСМП.Организация В (&Организация)
	|			ИЛИ &БезОтбора)
	|	И НЕ РезультатыОбработкиДокументовИСМП.ПроверкаОтключена
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) > 0
	|",
	ИдентификаторыПроблемГИСМТ.ОтправленныеДокументыСОшибками);
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|ГДЕ
	|	РезультатыОбработкиДокументовИСМП.Статус В(&СтатусыОбработкиСОшибкой)
	|	И РезультатыОбработкиДокументовИСМП.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовГИСМТ.ЧекККТ)
	|	И РезультатыОбработкиДокументовИСМП.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусОтправкиГИСМТ.ДоставленВГИСМТ)
	|	И (РезультатыОбработкиДокументовИСМП.Организация В (&Организация)
	|		ИЛИ &БезОтбора)
	|	И НЕ РезультатыОбработкиДокументовИСМП.ПроверкаОтключена
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) > 0
	|", 
	ИдентификаторыПроблемГИСМТ.ПробитыеЧекиККТСОшибками);
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|ГДЕ
	|	РезультатыОбработкиДокументовИСМП.Статус В (&СтатусыОбработкиСОшибкой)
	|	И РезультатыОбработкиДокументовИСМП.ТипДокумента В (&ТипыЭлектронныхДокументов)
	|	И РезультатыОбработкиДокументовИСМП.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусОтправкиГИСМТ.ОжидаетсяПроверкаУПДвГИСМТ)
	|	И (РезультатыОбработкиДокументовИСМП.Организация В (&Организация)
	|		ИЛИ &БезОтбора)
	|	И НЕ РезультатыОбработкиДокументовИСМП.ПроверкаОтключена
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) > 0
	|",
	ИдентификаторыПроблемГИСМТ.ОтправленныеДокументыОтсутствующиеВЛКГИСМТ);
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|ГДЕ
	|	РезультатыОбработкиДокументовИСМП.Статус В(&СтатусыОбработкиСОшибкой)
	|	И РезультатыОбработкиДокументовИСМП.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовГИСМТ.ЧекККТ)
	|	И РезультатыОбработкиДокументовИСМП.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусОтправкиГИСМТ.ОтправленВОФД)
	|	И (РезультатыОбработкиДокументовИСМП.Организация В (&Организация)
	|			ИЛИ &БезОтбора)
	|	И РезультатыОбработкиДокументовИСМП.ДатаДобавления < &ДатаДобавления
	|	И НЕ РезультатыОбработкиДокументовИСМП.ПроверкаОтключена
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) > 0
	|",
	ИдентификаторыПроблемГИСМТ.ПробитыеЧекиККТОтсутствующиеВЛКГИСМТ);
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.РезультатыОбработкиДокументовИСМП КАК РезультатыОбработкиДокументовИСМП
	|ГДЕ
	|	РезультатыОбработкиДокументовИСМП.Статус В (&СтатусыОбработкиСОшибкой)
	|	И РезультатыОбработкиДокументовИСМП.ТипДокумента В (&ТипыЭлектронныхДокументов)
	|	И РезультатыОбработкиДокументовИСМП.СтатусОтправки = ЗНАЧЕНИЕ(Перечисление.СтатусОтправкиГИСМТ.НеОтправлен)
	|	И (РезультатыОбработкиДокументовИСМП.Организация В (&Организация)
	|		ИЛИ &БезОтбора)
	|	И НЕ РезультатыОбработкиДокументовИСМП.ПроверкаОтключена
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РезультатыОбработкиДокументовИСМП.Документ) > 0",
	ИдентификаторыПроблемГИСМТ.НеОтправленныеДокументыСОшибкми);
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	1 КАК ОтправкаПолучениеДанныхИСМП
	|ПОМЕСТИТЬ ВТ_ОтправкаПолучениеДанныхИСМП
	|ГДЕ
	|	&ОтправкаПолучениеДанныхИСМП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтправкаПолучениеДанныхИСМП.ОтправкаПолучениеДанныхИСМП
	|ИЗ
	|	ВТ_ОтправкаПолучениеДанныхИСМП КАК ВТ_ОтправкаПолучениеДанныхИСМП",
	"НастроитьАвтоматическийОбмен");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	1 КАК ПроверкаСтатусовДокументовВГИСМТ
	|ПОМЕСТИТЬ ВТ_ПроверкаСтатусовДокументовВГИСМТ
	|ГДЕ
	|	&ПроверкаСтатусовДокументовВГИСМТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроверкаСтатусовДокументовВГИСМТ.ПроверкаСтатусовДокументовВГИСМТ
	|ИЗ
	|	ВТ_ПроверкаСтатусовДокументовВГИСМТ КАК ВТ_ПроверкаСтатусовДокументовВГИСМТ",
	"НастроитьАвтоматическуюПроверкуСтатусовДокументовВГИСМТ");
	
	// Настройте загрузку сведений об отклонениях
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	1 КАК ЗагрузкаСведенийОбОтклоненияхИСМП
	|ПОМЕСТИТЬ ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП
	|ГДЕ
	|	&ЗагрузкаСведенийОбОтклоненияхИСМП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП.ЗагрузкаСведенийОбОтклоненияхИСМП
	|ИЗ
	|	ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП КАК ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП",
	"НастроитьЗагрузкуСведенийОбОтклонениях");
	
	// Ответственные за подсписание сообщений не настроены
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОрганизаций.Организация
	|ПОМЕСТИТЬ ТаблицаОрганизаций
	|ИЗ
	|	&ТаблицаОрганизаций КАК ТаблицаОрганизаций");
	
	// Ответственные за подписание сообщений не настроены
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОрганизаций.Организация
	|ПОМЕСТИТЬ ОтветственныеЗаПодписаниеСообщенийНеНастроены
	|ИЗ
	|	ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП КАК
	|			ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП
	|		ПО ТаблицаОрганизаций.Организация = ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.Организация
	|		ИЛИ ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.Организация = &ПустаяОрганизация
	|ГДЕ
	|	ОтветственныеЗаАктуализациюТокеновАвторизацииИСМП.Организация ЕСТЬ NULL");
		
	// Регламентные задания включены
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ПроверкаСтатусовДокументовВГИСМТ.ПроверкаСтатусовДокументовВГИСМТ КАК РегЗадание
	|ПОМЕСТИТЬ ВключенныеЗадания
	|ИЗ
	|	ВТ_ПроверкаСтатусовДокументовВГИСМТ КАК ВТ_ПроверкаСтатусовДокументовВГИСМТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОтправкаПолучениеДанныхИСМП.ОтправкаПолучениеДанныхИСМП
	|ИЗ
	|	ВТ_ОтправкаПолучениеДанныхИСМП КАК ВТ_ОтправкаПолучениеДанныхИСМП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП.ЗагрузкаСведенийОбОтклоненияхИСМП
	|ИЗ
	|	ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП КАК ВТ_ЗагрузкаСведенийОбОтклоненияхИСМП
	|");
	
	// Настройте сертификат на сервере (не для фреша), если включено любое задание обмена и не настроены ответственные за подписание
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ СертификатыОрганизаций
	|ИЗ
	|	&СертификатыОрганизаций КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтветственныеЗаПодписаниеСообщенийНеНастроены.Организация
	|ИЗ
	|	ОтветственныеЗаПодписаниеСообщенийНеНастроены КАК ОтветственныеЗаПодписаниеСообщенийНеНастроены
	|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыОрганизаций КАК СертификатыОрганизаций
	|		ПО ОтветственныеЗаПодписаниеСообщенийНеНастроены.Организация = СертификатыОрганизаций.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВключенныеЗадания КАК ВключенныеЗадания
	|		ПО ИСТИНА
	|ГДЕ
	|	НЕ &РазделениеВключено
	|	И СертификатыОрганизаций.Организация ЕСТЬ NULL",
	"НастройкаСертификатаНаСервере");
	
	// Настройте ответственных за подписание сообщений, если включено любое задание обмена и сертификаты не настроены
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтветственныеЗаПодписаниеСообщенийНеНастроены.Организация
	|ИЗ
	|	ОтветственныеЗаПодписаниеСообщенийНеНастроены КАК ОтветственныеЗаПодписаниеСообщенийНеНастроены
	|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыОрганизаций КАК СертификатыОрганизаций
	|		ПО ОтветственныеЗаПодписаниеСообщенийНеНастроены.Организация = СертификатыОрганизаций.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВключенныеЗадания КАК ВключенныеЗадания
	|		ПО ИСТИНА
	|ГДЕ
	|	СертификатыОрганизаций.Организация ЕСТЬ NULL",
	"НастройкаОтветственныхЗаПодписаниеСообщений");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовИСМП.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетИСМП КАК ДокументИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ДокументИСМП.Ссылка
	|ГДЕ
	|	СтатусыДокументовИСМП.ДальнейшееДействие1 = &ДействиеОбработайтеОтклонения
	|	И НЕ ДокументИСМП.ПометкаУдаления
	|	И (&БезОтбора ИЛИ ДокументИСМП.Организация В (&Организация))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СтатусыДокументовИСМП.Документ) > 0",
	"СведенияОбОтклоненияхОжидающиеДействия");
	
	ОтправкаПолучениеДанныхИСМП       = ОбменВключен("ОтправкаПолучениеДанныхИСМП");
	ПроверкаСтатусовДокументовВГИСМТ  = ОбменВключен("ПроверкаСтатусовДокументовВГИСМТ");
	ЗагрузкаСведенийОбОтклоненияхИСМП = ОбменВключен("ЗагрузкаСведенийОбОтклоненияхИСМП");
	
	СтатусыОшибокВГИСМТ = Новый Массив;
	СтатусыОшибокВГИСМТ.Добавить(Перечисления.СтатусыДокументовИСМП.ЕстьОшибки);
	СтатусыОшибокВГИСМТ.Добавить(Перечисления.СтатусыДокументовИСМП.Ошибка);
	
	СтатусыОбработкиСОшибкой = Новый Массив;
	СтатусыОбработкиСОшибкой.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкой);
	СтатусыОбработкиСОшибкой.Добавить(Перечисления.СтатусыОбработкиДокументовИСМП.ЗавершеноСОшибкойТаймаута);
	
	ТипыЭлектронныхДокументов = Новый Массив;
	ТипыЭлектронныхДокументов.Добавить(Перечисления.ТипыДокументовГИСМТ.УПД);
	ТипыЭлектронныхДокументов.Добавить(Перечисления.ТипыДокументовГИСМТ.УПДИсправительный);
	ТипыЭлектронныхДокументов.Добавить(Перечисления.ТипыДокументовГИСМТ.УКД);
	ТипыЭлектронныхДокументов.Добавить(Перечисления.ТипыДокументовГИСМТ.УКДИсправительный);
	
	ЛимитВремениОбработкиДокумента = СоответствиеТребованиямГИСМТ.ЛимитВремениОбработкиДокумента();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                      Организации);
	Запрос.УстановитьПараметр("БезОтбора",                        Организации.Количество() = 0);
	Запрос.УстановитьПараметр("СтатусыОшибокВГИСМТ",              СтатусыОшибокВГИСМТ);
	Запрос.УстановитьПараметр("СтатусыОбработкиСОшибкой",         СтатусыОбработкиСОшибкой);
	Запрос.УстановитьПараметр("ТипыЭлектронныхДокументов",        ТипыЭлектронныхДокументов);
	Запрос.УстановитьПараметр("ДатаДобавления",                   ТекущаяДатаСеанса() - ЛимитВремениОбработкиДокумента);
	Запрос.УстановитьПараметр("ОтправкаПолучениеДанныхИСМП",      ОтправкаПолучениеДанныхИСМП);
	Запрос.УстановитьПараметр("ПроверкаСтатусовДокументовВГИСМТ", ПроверкаСтатусовДокументовВГИСМТ);
	Запрос.УстановитьПараметр("ПустаяОрганизация",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"));
	Запрос.УстановитьПараметр("СертификатыОрганизаций",           ИнтеграцияИС.СертификатыОрганизаций());
	Запрос.УстановитьПараметр("ТаблицаОрганизаций",               ТаблицаОрганизаций(Организации));
	Запрос.УстановитьПараметр("РазделениеВключено",               ОбщегоНазначения.РазделениеВключено());
	Запрос.УстановитьПараметр("ЗагрузкаСведенийОбОтклоненияхИСМП", ЗагрузкаСведенийОбОтклоненияхИСМП);
	Запрос.УстановитьПараметр("ДействиеОбработайтеОтклонения",     Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеОбработкуОтклонений);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат РезультатыЗапроса;
	
КонецФункции

Функция ТаблицаОрганизаций(Знач Организации)
	
	Если Организации.Количество() = 0 Тогда
		Организации = ОбщегоНазначенияИС.ДоступныеОрганизации();
	КонецЕсли;
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация",   Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	Для Каждого ЭлементОрганизация Из Организации Цикл
		Строка = ТаблицаОрганизаций.Добавить();
		Строка.Организация     = ЭлементОрганизация.Значение;
	КонецЦикла;
	
	Возврат ТаблицаОрганизаций;
	
КонецФункции

Функция ОбменВключен(Метаданные)
	
	ЗаданиеВключено = Истина;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные",    Метаданные);
		Отбор.Вставить("Использование", Истина);
		
		УстановитьПривилегированныйРежим(Истина);
		ЗаданиеВключено = РегламентныеЗаданияСервер.НайтиЗадания(Отбор).Количество() > 0;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат ЗаданиеВключено;
	
КонецФункции

// Идентификаторы ФИАС по данным адреса.
// 
// Параметры:
//  ДанныеАдреса - Строка -
// 
// Возвращаемое значение:
//  Структура - Идентификатор ФИАСПо данным адреса:
// * Идентификатор - Строка - Детальный идентификатор.
// * ИдентификаторДома - Строка -
// * ИдентификаторАдресногоОбъекта - Строка -
// * ИдентификаторКвартиры - Строка -
// * Представление - Строка -
Функция ИдентификаторФИАСПоДаннымАдреса(ДанныеАдреса) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Идентификатор");
	ВозвращаемоеЗначение.Вставить("ИдентификаторДома");
	ВозвращаемоеЗначение.Вставить("ИдентификаторАдресногоОбъекта");
	ВозвращаемоеЗначение.Вставить("ИдентификаторКвартиры");
	ВозвращаемоеЗначение.Вставить("Представление");
	
	ДанныеКИ                      = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеАдреса);
	СведенияОбАдресе              = РаботаСАдресами.СведенияОбАдресе(ДанныеКИ, Новый Структура("КодыАдреса", Истина));
	
	ВозвращаемоеЗначение.ИдентификаторДома             = Строка(СведенияОбАдресе.ИдентификаторДома);
	ВозвращаемоеЗначение.ИдентификаторАдресногоОбъекта = Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта);
	ВозвращаемоеЗначение.Представление                 = СведенияОбАдресе.Представление;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторДома) Тогда
		ВозвращаемоеЗначение.Идентификатор = ВозвращаемоеЗначение.ИдентификаторДома;
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторАдресногоОбъекта) Тогда
		ВозвращаемоеЗначение.Идентификатор = ВозвращаемоеЗначение.ИдентификаторАдресногоОбъекта;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЧислаКратны(Знач Число1, Знач Число2)
	
	Если Цел(Число1) <> Число1
		И Цел(Число2) <> Число2 Тогда
		
		ЧислоСтрокой = Формат(Число1, "ЧРД=,");
		ПоложениеРазделителя = СтрНайти(ЧислоСтрокой, ",");
		Если ПоложениеРазделителя = 0 Тогда
			ДлинаДробнойЧасти1 = 0;
		Иначе
			ДлинаДробнойЧасти1 = СтрДлина(ЧислоСтрокой) - ПоложениеРазделителя;
		КонецЕсли;
		
		ЧислоСтрокой = Формат(Число2, "ЧРД=,");
		ПоложениеРазделителя = СтрНайти(ЧислоСтрокой, ",");
		Если ПоложениеРазделителя = 0 Тогда
			ДлинаДробнойЧасти2 = 0;
		Иначе
			ДлинаДробнойЧасти2 = СтрДлина(ЧислоСтрокой) - ПоложениеРазделителя;
		КонецЕсли;
		
		ДлинаДробнойЧасти = Мин(ДлинаДробнойЧасти1, ДлинаДробнойЧасти2);
		
		Если ДлинаДробнойЧасти1 <> ДлинаДробнойЧасти Тогда
			Число1 = Окр(Число1, ДлинаДробнойЧасти);
		КонецЕсли;
		
		Если ДлинаДробнойЧасти2 <> ДлинаДробнойЧасти Тогда
			Число2 = Окр(Число2, ДлинаДробнойЧасти);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Число2 <> 0 И Число1 % Число2 = 0;
	
КонецФункции

#Область НовыеТоварныеГруппыВнедрение

#Область ДоступенСертификатСоответствия

Функция КормаДляЖивотныхПодконтрольныеВЕТИСДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция МясоПодконтрольноеВЕТИСДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ВетеринарныеПрепаратыДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ИгрыИИгрушкиДляДетейДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция РадиоэлектроннаяПродукцияДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ТитановаяМеталлопродукцияДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция РастительныеМаслаДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ПечатнаяПродукцияДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция СтроительныеМатериалыДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ОтопительныеПриборыДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция БакалеяДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ТелефоныИНоутбукиДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция КабельнаяПродукцияДоступенСертификатСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция МоторныеМаслаДоступенСертификатСоответствия()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ДоступнаДекларацияСоответствия

Функция КормаДляЖивотныхПодконтрольныеВЕТИСДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция МясоПодконтрольноеВЕТИСДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ВетеринарныеПрепаратыДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ИгрыИИгрушкиДляДетейДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция РадиоэлектроннаяПродукцияДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ТитановаяМеталлопродукцияДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция РастительныеМаслаДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция ПечатнаяПродукцияДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

Функция СтроительныеМатериалыДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ОтопительныеПриборыДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция БакалеяДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ТелефоныИНоутбукиДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция КабельнаяПродукцияДоступнаДекларацияСоответствия()
	
	Возврат Ложь;
	
КонецФункции

Функция МоторныеМаслаДоступнаДекларацияСоответствия()
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
