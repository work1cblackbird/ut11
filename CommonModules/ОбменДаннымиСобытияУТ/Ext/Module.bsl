
#Область ПрограммныйИнтерфейс

#Область ОбменЧерезУниверсальныйФормат

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - СправочникОбъект
//           - ДокументОбъект
//           - ПланВидовХарактеристикОбъект- источник события, кроме типа ДокументОбъект
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник        - ДокументОбъект - источник события.
//  Отказ           - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи     - РежимЗаписиДокумента - см. в синтаксис-помощнике РежимЗаписиДокумента.
//  РежимПроведения - РежимПроведенияДокумента - см. в синтаксис-помощнике РежимПроведенияДокумента.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник - СправочникОбъект
//           - ДокументОбъект
//           - ПланВидовХарактеристикОбъект - источник события
//  Отказ    - Булево - флаг отказа от выполнения обработчика.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  Источник       - РегистрСведенийНаборЗаписей - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, Замещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПравилРегистрации

// Параметры обработчиков правил регистрации "ПриОбработке" и "ПриОбработкеДополнительный"
//

// Инициализировать параметры обработки ПРО.
// 
// Возвращаемое значение:
//  Структура:
// * РазделыУчетаСтрокой - Строка - Список через запятую, разделов учета, по которым необходимо произвести фильтрацию
// * ТекстЗапроса - Строка - Текст запроса к ИБ для вычисления массива узлов получателей
// * ПараметрыЗапроса - Структура - Структура с заполненными параметрами запроса к ИБ, для вычисления узлов получателей:
//      **Запрос - Строка
// * ИспользоватьКэш - Булево - Флаг использования кэша
// * Отказ - Булево - флаг отказа от выполнения обработчика
// * Объект - КонстантаМенеджерЗначения
//          - СправочникОбъект
//          - ДокументОбъект
//          - БизнесПроцессОбъект
//          - ЗадачаОбъект
//          - ПланСчетовОбъект
//          - ПланОбменаОбъект
//          - ПланВидовХарактеристикОбъект
//          - ПланВидовРасчетаОбъект
//          - РегистрСведенийНаборЗаписей
//          - РегистрНакопленияНаборЗаписей
//          - РегистрБухгалтерииНаборЗаписей
//          - РегистрРасчетаНаборЗаписей
//          - ПоследовательностьНаборЗаписей
//          - ПерерасчетНаборЗаписей 
//          - Неопределено- Объект, для которого выполняются правила регистрации
// * Выгрузка - Булево - - Флаг, определяющий происходит запись объекта или выгрузка
Функция ИнициализироватьПараметрыОбработкиПРО() Экспорт
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("РазделыУчетаСтрокой", 			 "");
	ПараметрыОбработки.Вставить("ТекстЗапроса",       			 "");
	ПараметрыОбработки.Вставить("ПараметрыЗапроса",   			 Новый Структура());
	ПараметрыОбработки.Вставить("ИспользоватьКэш",     			 Ложь);
	ПараметрыОбработки.Вставить("Отказ",               			 Ложь);
	ПараметрыОбработки.Вставить("Объект",              			 Неопределено);
	ПараметрыОбработки.Вставить("Выгрузка",           			 Ложь);
	ПараметрыОбработки.Вставить("ИспользоватьОтборПоДокументам", Ложь);
	Возврат ПараметрыОбработки;
	
КонецФункции

// Процедура-обработчик события "ПриОбработке".
// Вызывается из правил регистрации плана обмена СинхронизацияДанныхЧерезУниверсальныйФормат.

// При обработке ПРО.
// 
// Параметры:
//  ПараметрыОбработкиПРО - см. ИнициализироватьПараметрыОбработкиПРО
// 
// Возвращаемое значение:
// 	см. ИнициализироватьПараметрыОбработкиПРО
//
Функция ПриОбработкеПРО(ПараметрыОбработкиПРО) Экспорт
	
	// Адаптируем текст запроса с учета разделов учета.
	ПодзапросРазделыУчета = "";
	МассивРазделовУчета   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОбработкиПРО.РазделыУчетаСтрокой,,Истина);
	
	ПараметрыОбработкиПРО.ИспользоватьКэш = Ложь;
	ТекстЗапроса                          = ПараметрыОбработкиПРО.ТекстЗапроса;
	
	Если НЕ МассивРазделовУчета.Количество() = 0 Тогда
		
		НомерРаздела = 1;
		Для Каждого РазделУчета Из МассивРазделовУчета Цикл
			
			ПараметрыОбработкиПРО.ПараметрыЗапроса.Вставить("РазделУчета"+НомерРаздела, СокрЛП(РазделУчета));
			ПодзапросРазделыУчета = ПодзапросРазделыУчета + ?(ПодзапросРазделыУчета = "", "", Символы.ПС + "ИЛИ ")
			+ "ПланОбменаРазделыУчета.РазделУчета = &СвойствоОбъекта_РазделУчета" + НомерРаздела;
			НомерРаздела = НомерРаздела + 1;
			
		КонецЦикла;
		
		Если МассивРазделовУчета.Количество() > 1 Тогда
			ПодзапросРазделыУчета = "(" + ПодзапросРазделыУчета + ")";
		КонецЕсли;
		
		ТекстЛевогоСоединения = "КАК ПланОбменаОсновнаяТаблица
		|ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.РазделыУчета КАК ПланОбменаРазделыУчета
		|ПО ПланОбменаОсновнаяТаблица.Ссылка = ПланОбменаРазделыУчета.Ссылка
		|	И " + ПодзапросРазделыУчета + "
		|	И ПланОбменаРазделыУчета.Выгружать";
		
		ТекстУсловияРазделовУчета = "	И ЕстьNULL(ПланОбменаРазделыУчета.Выгружать, ЛОЖЬ)
		|[ОбязательныеУсловия]";
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПланОбменаОсновнаяТаблица", ТекстЛевогоСоединения);
		
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПараметрыОбработкиПРО.Объект));
	Если НЕ ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
	     Возврат ПараметрыОбработкиПРО;
	КонецЕсли;
	МетаПланОбмена = Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат;
	ИспользоватьОтборПоРазделамУчетаИДокументам = МетаПланОбмена.Реквизиты.Найти("ИспользоватьОтборПоРазделамУчетаИДокументам");
			
	ОбъектРегистрации = ПараметрыОбработкиПРО.Объект;
	ПараметрыОбработкиПРО.ПараметрыЗапроса.Вставить("ИмяОбъектаМетаданных", ОбъектРегистрации.Метаданные().Имя);
	ТекстЛевогоСоединения = "КАК ПланОбменаОсновнаяТаблица  
	    |ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ВидыДокументов КАК СинхронизацияДанныхЧерезУниверсальныйФорматВидыДокументов
		|	ПО СинхронизацияДанныхЧерезУниверсальныйФорматВидыДокументов.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка
		|"; 
		
	ТекстУсловияОтбораПоДокументам = "И ВЫБОР
		|		КОГДА ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоРазделамУчетаИДокументам
		|			ТОГДА СинхронизацияДанныхЧерезУниверсальныйФорматВидыДокументов.ИмяОбъектаМетаданных = &СвойствоОбъекта_ИмяОбъектаМетаданных
		|		КОГДА Не ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоРазделамУчетаИДокументам  Тогда
	    |	      Истина
		|	КОНЕЦ
		|[ОбязательныеУсловия]";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПланОбменаОсновнаяТаблица", ТекстЛевогоСоединения); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОбязательныеУсловия]", ТекстУсловияОтбораПоДокументам);
    Если НЕ МассивРазделовУчета.Количество() = 0 Тогда
	     ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОбязательныеУсловия]", ТекстУсловияРазделовУчета);
	КонецЕсли;
		
	ПараметрыОбработкиПРО.ТекстЗапроса = ТекстЗапроса;
	
	Возврат ПараметрыОбработкиПРО;
	
КонецФункции

Процедура ДокументАвансовыйОтчетПередОбработкойПРО(Объект, Отказ) Экспорт
	
	Если Объект.ОплатаПоставщикам.Количество() = 0 
		И Объект.ПрочиеРасходы.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Метод выполняет регистрацию документа ВзаимозачетЗадолженности после выполения обработчиков ПРО.
//
// Параметры:
//  Объект - ДокументОбъект.ВзаимозачетЗадолженности - регистрируемый объект.
//  Выгрузка - Булево - Флаг, указывающий на то, что осуществляется выгрузка объекта.
//  Получатели - Массив из ПланОбменаСсылка - Массив ссылок на узлы планов обмена, на которых необходимо зарегистрировать объекта
//  ИмяПланаОбмена - Строка - Имя плана обмена, для которого выполняется ПРО.
//
Процедура ДокументВзаимозачетЗадолженностиПослеОбработкиПРО(Объект, Выгрузка, Получатели, ИмяПланаОбмена) Экспорт
	
	Если Выгрузка Или Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ 
		|СвязанныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.СчетФактураВыданныйАванс)
		|	ИЛИ ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.СчетФактураПолученныйАванс)");
		
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора",Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СчетФактура = Результат.Ссылка.ПолучитьОбъект();
		ОбменДаннымиСобытия.ВыполнитьПравилаРегистрацииДляОбъекта(СчетФактура, ИмяПланаОбмена, Неопределено);
	КонецЦикла;
	
КонецПроцедуры
//++ Локализация

// Метод выполняет регистрацию документа СчетФактураВыданный после выполения обработчиков ПРО.
//
// Параметры:
//  Объект - ДокументОбъект.СчетФактураВыданный - регистрируемый объект.
//  Выгрузка - Булево - Флаг, указывающий на то, что осуществляется выгрузка объекта.
//  Получатели - Массив из ПланОбменаСсылка - Массив ссылок на узлы планов обмена, на которых необходимо зарегистрировать объекта
//  ИмяПланаОбмена - Строка - Имя плана обмена, для которого выполняется ПРО.
//
Процедура ДокументСчетФактураВыданныйПередОбработкойПРО(Объект, Отказ, ИмяПланаОбмена) Экспорт
	
	ИсключаемыеТипыДокументовОснований = Новый Массив;
	ИсключаемыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
	ИсключаемыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ЗаписьКнигиПродаж"));  
	ИсключаемыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданный.ДокументОснование КАК ДокументОснование
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка = &Объект
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОснование = ВыборкаДетальныеЗаписи.ДокументОснование;
		
		НалогообложениеНДС = Неопределено; 
		ОснованиеДокументаОснования = Неопределено;
		Если Не ДокументОснование = Неопределено Тогда  
			Реквизиты = "";  
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "ДокументОснование") Тогда
				Реквизиты = "ДокументОснование";				
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОснование, "НалогообложениеНДС") Тогда
				Реквизиты =  Реквизиты + ?(ПустаяСтрока(Реквизиты),"",",") + "НалогообложениеНДС";
			КонецЕсли;	 
			Если Не ПустаяСтрока(Реквизиты) Тогда
				СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, Реквизиты); 
			КонецЕсли;
			Если СтруктураРеквизитов <> Неопределено И СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
				ОснованиеДокументаОснования = СтруктураРеквизитов.ДокументОснование;
			КонецЕсли;
			Если СтруктураРеквизитов <> Неопределено И СтруктураРеквизитов.Свойство("НалогообложениеНДС") Тогда
				НалогообложениеНДС = СтруктураРеквизитов.НалогообложениеНДС;
			КонецЕсли;
		КонецЕсли;
		Если НалогообложениеНДС <> Неопределено 
			И НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ТипДокументаОснования = ТипЗнч(Объект.ДокументОснование);
		Если ИсключаемыеТипыДокументовОснований.Найти(ТипДокументаОснования) <> Неопределено Тогда
			Отказ = Истина;   
			Возврат;
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация");
			Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
				Отказ = Истина; 
				Возврат;
			КонецЕсли;
			ТипДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ТипДоговора");
			Если НЕ ТипДоговора = Неопределено И ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ПередачаВАренду") Тогда
				Отказ = Истина; 
				Возврат;
			КонецЕсли;
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			Если ОснованиеДокументаОснования <> Неопределено Тогда
				Если ТипЗнч(ОснованиеДокументаОснования) = Тип("ДокументСсылка.АктВыполненныхРабот") 
					ИЛИ ТипЗнч(ОснованиеДокументаОснования) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
					Отказ = Истина; 
					Возврат;
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ДокументОснование.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате  Тогда
				Отказ = Истина;  
				Возврат;
			КонецЕсли;
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионера") 
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитенту")
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			ОбменДаннымиСобытияУТ.ДокументОтчетКомиссионераКомитентуПриОбработкеПРО(Объект.ДокументОснование, Отказ);
		ИначеЕсли  ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
			ОбменДаннымиСобытияУТ.ДокументАвансовыйОтчетПередОбработкойПРО(Объект.ДокументОснование, Отказ); 
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда 
			Если ДокументОснование.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
//-- Локализация
Процедура ДокументСчетФактураПолученныйПередОбработкойПРО(Объект, Отказ) Экспорт
	ДопустимыеТипыДокументовОснований = Новый Массив;
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.КорректировкаПриобретения"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"));
	ДопустимыеТипыДокументовОснований.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));

	ДокументОснованиеКорректен = Ложь;
	Для Каждого Строка Из Объект.ДокументыОснования Цикл
		
		ДокументОснование = Строка.ДокументОснование;
		
		Если Не ЗначениеЗаполнено(ДокументОснование)
			Или Не ДокументОснование.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеТипыДокументовОснований.Найти(ТипЗнч(ДокументОснование)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту")
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "СуммаДокумента") <= 0 Тогда
				Продолжить;
			КонецЕсли;
			ЕстьТовары = Ложь;
			ТоварыДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Товары");
			ТоварыДокументаОснования = ТоварыДокументаОснования.Выгрузить();
			Для Каждого СтрокаТовары Из ТоварыДокументаОснования Цикл
				
				ТипНоменклатуры = Неопределено;
				Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
					ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "ТипНоменклатуры");
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
					ЕстьТовары = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьТовары Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
				Продолжить;
		КонецЕсли;
		ДокументОснованиеКорректен = Истина;
		Прервать;
		
	КонецЦикла;
	Если НЕ ДокументОснованиеКорректен Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДокументОтчетКомиссионераКомитентуПриОбработкеПРО(Объект, Отказ) Экспорт
	ЕстьТовары = Ложь;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ТипНоменклатуры = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "ТипНоменклатуры");
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ЕстьТовары = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Если НЕ ЕстьТовары Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура ДокументВзаимозачетЗадолженностиПередОбработкойПРО(Объект, Отказ) Экспорт 
	ВстречныйЗачетЗадолженностиОрганизаций = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.БартерМеждуОрганизациями);
	
	ВзаимозачетМногиеКоМногим = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуДвумяОрганизациями  
	ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуОрганизациями
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуДвумяОрганизациями
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаПоставщикуМеждуДвумяОрганизациями
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаПоставщикуМеждуДвумяОрганизациями);
	Если ВзаимозачетМногиеКоМногим ИЛИ ВстречныйЗачетЗадолженностиОрганизаций Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#КонецОбласти