
#Область ПрограммныйИнтерфейс

// Устанавливает подчиненному контрагенту его головного контрагенту
//
// Параметры:
//  Контрагент          - СправочникСсылка.Контрагенты - контрагент, которому задается головной
//  ГоловнойКонтрагент  - СправочникСсылка.Контрагенты - устанавливаемое значение головного контрагента
//  ОписаниеОшибки      - Строка - параметр, в который записываются возникшие ошибки.
//
Процедура ИзменитьГоловногоКонтрагента(Контрагент, ГоловнойКонтрагент, ОписаниеОшибки) Экспорт
	//++ Локализация
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ИНН");
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
		
		РезультатПоиска = ПартнерыИКонтрагентыЛокализация.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП, Контрагент);
		Если Не РезультатПоиска.ДоступноСоздание Тогда
			
			ДанныеНайденногоКонтрагента = РезультатПоиска.НайденныеСовпадения[0];
			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось изменить головного контрагента для %1.
				|Данные ИНН и КПП уже указаны для контрагента с кодом %2, ответственный - %3.
				|Попробуйте указать правильный КПП, и лишь затем выбрать головного контрагента.'"),
				Контрагент,
				ДанныеНайденногоКонтрагента.Код,
				ДанныеНайденногоКонтрагента.ОсновнойМенеджер);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	
	Попытка
		КонтрагентОбъект.Заблокировать();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить головного контрагента для %1.
				|Возможно, контрагент в настоящий момент редактируется.'"),
			Контрагент);
		Возврат;
	КонецПопытки;
	
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	//++ Локализация
	КонтрагентОбъект.ИНН = ИНН;
	//-- Локализация
	КонтрагентОбъект.Записать();
	
	КонтрагентОбъект.Разблокировать();
	
КонецПроцедуры

// Определяет возможных головных контрагентов по ИНН.
// 
// Параметры:
//  ИНН        - Строка - ИНН, по которому необходимо получить список контрагентов.
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на контрагента, исключаемого из поиска.
//
// Возвращаемое значение:
//  Число - количество контрагентов
//
Функция КоличествоВозможныхГоловныхКонтрагентов(ИНН, Контрагент = Неопределено) Экспорт
	Результат = 0;
	//++ Локализация
	Результат = ПартнерыИКонтрагентыЛокализация.ВозможныеГоловныеКонтрагенты(ИНН, Контрагент).Количество();
	//-- Локализация
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает значение реквизита элемента справочник партнеры
// 
// Возвращаемое значение:
//   см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//
Функция ЗначениеРеквизитаПартнеры(Ссылка, ИмяРеквизита) Экспорт
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат
КонецФункции

//++ Локализация

// Получает данные контрагента по ИНН в зависимости от типа контрагента.
//
// Параметры:
//  ЭтоЮридическоеЛицо  - Булево - Истина, если юридическое лицо, Ложь если индивидуальный предприниматель.
//  ИНН                 - Строка - ИНН, по которому будут получатся данные.
//
// Возвращаемое значение:
//   Структура   - полученные данные. Описание структур см. в 
//                  РаботаСКонтрагентами.НовыеРеквизитыЮридическогоЛица() и 
//                  РаботаСКонтрагентами.НовыеРеквизитыПредпринимателя().
//
Функция ДанныеКонтрагентаПоИНН(ЭтоЮридическоеЛицо, ИНН, ИдентификаторЗадания) Экспорт
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
		Если Задание <> Неопределено
			И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Задание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		РеквизитыЮридическогоЛица = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
		РезультатПреобразования = ПартнерыИКонтрагентыЛокализация.РезультатПреобразованияСведенийОЮрЛице(РеквизитыЮридическогоЛица);
		Возврат РезультатПреобразования;

	Иначе
		
		РезультатФормирования = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		РезультатПреобразования = ПартнерыИКонтрагентыЛокализация.РезультатПреобразованияСведенийОФизЛице(РезультатФормирования);

		Возврат РезультатПреобразования;
	КонецЕсли;
	
КонецФункции

// Запускает фоновое задание по получению данных контрагента с сервиса, согласно указанному ИНН.
//
// Параметры:
//  ИНН  - Строка - ИНН контрагента, согласно которому будет выполнен поиск данных
//  ЮрФизЛицо  - Перечисления.ЮрФизЛицо - в зависимости от значения поиск будет выполнен либо в ЕГРЮЛ ЛИБО ЕГРИП.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор запускаемого регламентного задания.
//
// Возвращаемое значение:
//   РезультатЗапуска   - структура, содержит следующие параметры:
//        ЗаданиеЗапущено      - Булево - Истина, если задание удалось выполнить сразу.
//        РеквизитыКонтрагента - Структура - данные контрагента, если они были получены сразу.
//        ИдентификаторЗадания - Строка - идентификатор запущенного фонового задания.
//        АдресХранилища       - Строка - адрес хранилища, в которое будет помещен результат выполнения.
Функция ФоновоеЗаданиеДанныеПартнераПоИННЗапустить(ИНН, ЮрФизЛицо, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт
	
	РезультатЗапуска = Новый Структура("ЗаданиеЗапущено, РеквизитыКонтрагента", Ложь, Неопределено);
	РезультатЗапуска.Вставить("ИдентификаторЗадания","");
	РезультатЗапуска.Вставить("АдресХранилища","");
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
		Если Задание <> Неопределено
			И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Задание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОбОшибке = Неопределено;
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ИНН", ИНН);
	ПараметрыФормирования.Вставить("ЭтоЮридическоеЛицо", ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо));
	
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ПартнерыИКонтрагентыЛокализация.ДанныеКонтрагентаПоИННФоновоеЗадание",
			ПараметрыФормирования,
			НСтр("ru = 'Работа с контрагентами: получение реквизитов по ИНН.'"));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат РезультатЗапуска;
	КонецПопытки;
	
	РезультатЗапуска.ИдентификаторЗадания  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	РезультатЗапуска.АдресХранилища        = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		РезультатЗапуска.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
	Иначе
		РезультатЗапуска.ЗаданиеЗапущено      = Истина;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

// Проверяет, выполнено ли ранее запущенное фоновое задание по получению данных контрагента по ИНН.
//
// Параметры:
//  ЗаданиеИдентификатор  - Строка - идентификатор фонового задания.
//  АдресХранилища        - Строка - адрес хранилища, в которое будет помещен результат выполнения.
//
// Возвращаемое значение:
//   РезультатВыполнения   - структура, содержит следующие параметры:
//        ЗаданиеВыполнено      - Булево - Истина, если задание выполнено.
//        РеквизитыКонтрагента  - Структура - полученные данные контрагента.
//
Функция ФоновоеЗаданиеВыполнено(ЗаданиеИдентификатор, АдресХранилища) Экспорт
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, РеквизитыКонтрагента", Ложь, Неопределено);
	
	Попытка
		РезультатВыполнения.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ЗаданиеИдентификатор);
	Исключение
		РезультатВыполнения.ЗаданиеВыполнено = Ложь;
	КонецПопытки;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Проверка использования ИНН/КПП
// 
// Параметры:
// 	ИНН - Строка - 
// 	КППГоловногоКонтрагента - Строка -
// Возвращаемое значение:
// 	Булево - Истина есть уже используется
// 	
Функция ИННКППГоловногоКонтрагентаИспользуютсяВИнформационнойБазе(ИНН, КППГоловногоКонтрагента) Экспорт
	Возврат ПартнерыИКонтрагентыЛокализация.ИННКППГоловногоКонтрагентаИспользуютсяВИнформационнойБазе(ИНН, КППГоловногоКонтрагента);
КонецФункции

// Формирует список значений возможных головных контрагентов
// 
// Параметры:
// 	ИНН - Строка - строка с ИНН
// Возвращаемое значение:
// 	СписокЗначений - список головных контрагентов
//
Функция СписокВозможныхГоловныхКонтрагентов(ИНН) Экспорт
	Возврат ПартнерыИКонтрагентыЛокализация.СписокВозможныхГоловныхКонтрагентов(ИНН);
КонецФункции

//-- Локализация
#КонецОбласти