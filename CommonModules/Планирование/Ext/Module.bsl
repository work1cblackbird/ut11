////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции планирования
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыЗакупок);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыОплатПоставщикам);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыОстатков);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыПродаж);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыОплатКлиентов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыПродажПоКатегориям);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыСборкиРазборки);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыПотребленияКомплектующих);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.НормативыРаспределенияПлановПродажПоКатегориям);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПланыВнутреннихПотреблений);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КорректировкиПлановыхПотребностей);
		
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам планирования запасов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыЗакупок");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыОплатПоставщикам");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыОстатков");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыПродаж");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыОплатКлиентов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыПродажПоКатегориям");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыСборкиРазборки");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПланыВнутреннихПотреблений");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КорректировкиПлановыхПотребностей");
	
	#Область ПланыПотребленияКомплектующих
	
	ИмяТаблицы = "Таблица" + "ПланыСборкиРазборкиДляРазузлования";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		ТаблицаКомплектующих = ТаблицыДляДвижений[ИмяТаблицы].СкопироватьКолонки(); // ТаблицаЗначений -
		
		Для каждого ЭлементКомплект Из ТаблицыДляДвижений[ИмяТаблицы] Цикл
			
			Количество = Макс(ЭлементКомплект.Количество, ЭлементКомплект.КЗаказу);
			ДанныеВариантаКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(
				ЭлементКомплект.ВариантКомплектации,, Количество);
			
			Для каждого ЭлементКомплектующее Из ДанныеВариантаКомплектации Цикл
				
				НоваяСтрока = ТаблицаКомплектующих.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКомплектующее,"Номенклатура,Характеристика");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКомплект, "Период, Статус, Сценарий, ВидПлана, ХозяйственнаяОперация,ВариантКомплектации,ПланСборкиРазборки,Склад,Назначение,ДатаВыпуска");
				
				Если ЭлементКомплект.Количество>0 Тогда
					НоваяСтрока.Количество = ЭлементКомплектующее.Количество;
				КонецЕсли;
				Если ЭлементКомплект.КЗаказу>0 Тогда
					НоваяСтрока.КЗаказу = ЭлементКомплектующее.Количество;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
		
		Движения.ПланыПотребленияКомплектующих.Записывать = Истина;
		Движения.ПланыПотребленияКомплектующих.Загрузить(ТаблицаКомплектующих);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НормативыРаспределенияПлановПродажПоКатегориям");
	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияОбъекта

// Функция возвращает Сценарий планирования по умолчанию для типа плана
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//
// Возвращаемое значение:
//   СправочникСсылка.СценарииТоварногоПланирования - ссылка на сценарий планирования по умолчанию.
//
Функция ПолучитьСценарийПоУмолчанию(Знач ТипПлана) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ВидыПланов.Владелец КАК Сценарий
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.Владелец.ПометкаУдаления
	|	И НЕ ВидыПланов.ПометкаУдаления
	|	И &ТипПлана = ВидыПланов.ТипПлана";
	
	Запрос.УстановитьПараметр("ТипПлана", ТипПлана);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 И ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Сценарий;
		
	Иначе
		
		Возврат Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции 

// Функция возвращает вид плана по умолчанию для сценария
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования - Сценарий, по которому получается вид плана по умолчанию.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыПланов - ссылка на вид плана по умолчанию.
//
Функция ПолучитьВидПланаПоУмолчанию(Знач ТипПлана, Знач Сценарий) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ВидыПланов.Ссылка КАК ВидПлана
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	ВидыПланов.ТипПлана = &ТипПлана
	|	И ВидыПланов.Владелец = &Сценарий
	|	И НЕ ВидыПланов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ТипПлана", ТипПлана);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 И ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.ВидПлана;
		
	Иначе
		
		Возврат Справочники.ВидыПланов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции 

// Функция получает схему преобразования данных для заполнения в документ
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ЗаполнятьПоФормуле - Булево
//  ЗаполнятьНазначениеВТЧ - Булево
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - схема преобразования данных для заполнения в документ.
//
Функция ПолучитьСхемуПреобразованияДанных(Знач ТипПлана, Знач ЗаполнятьПоФормуле = Ложь, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 
	
	СКД_Преобразование = Неопределено;
	
	ИсключатьХарактеристики = Ложь;
	ИсключатьСклады = Ложь;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
		СКД_Преобразование = Документы.ПланЗакупок.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли; 
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланОстатков Тогда
		СКД_Преобразование = Документы.ПланОстатков.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
		СКД_Преобразование = Документы.ПланПродаж.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		СКД_Преобразование = Документы.ПланПродажПоКатегориям.ПолучитьМакет("СКД_Преобразование");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
		СКД_Преобразование = Документы.ПланСборкиРазборки.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли; 
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланВнутреннихПотреблений Тогда
		СКД_Преобразование = Документы.ПланВнутреннихПотреблений.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	
	ИсключатьНазначение = Не ЗаполнятьНазначениеВТЧ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	Если ЗаполнятьПоФормуле Тогда
		ИсключатьСклады = Истина;
	КонецЕсли; 
	
	Если ИсключатьХарактеристики ИЛИ ИсключатьСклады ИЛИ ИсключатьНазначение Тогда
		
		ПолеХарактеристика = Новый ПолеКомпоновкиДанных("Характеристика");
		ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
		ПолеНазначение = Новый ПолеКомпоновкиДанных("Назначение");
		
		Отборы = СКД_Преобразование.ВариантыНастроек[0].Настройки.Отбор.Элементы;
		Индекс = Отборы.Количество() - 1;
		Пока  Индекс >= 0 Цикл
			Отбор = Отборы[Индекс];
			Индекс = Индекс - 1;
			
			Если ИсключатьХарактеристики И Отбор.ЛевоеЗначение = ПолеХарактеристика Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Характеристика"); // ПолеНабораДанныхСхемыКомпоновкиДанных -
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли; 
			
			Если ИсключатьСклады И Отбор.ЛевоеЗначение = ПолеСклад Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Склад"); // ПолеНабораДанныхСхемыКомпоновкиДанных -
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если ИсключатьНазначение И Отбор.ЛевоеЗначение = ПолеНазначение Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Назначение"); // ПолеНабораДанныхСхемыКомпоновкиДанных -
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
		Пока  Индекс >= 0 Цикл
			Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
			Индекс = Индекс - 1;
			
			Если ИсключатьХарактеристики 
				И (Связь.ВыражениеИсточник = "Характеристика" 
				ИЛИ Связь.ВыражениеПриемник = "Характеристика") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли; 
			
			Если ИсключатьСклады 
				И (Связь.ВыражениеИсточник = "Склад" 
				ИЛИ Связь.ВыражениеПриемник = "Склад") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли; 
			
			Если ИсключатьНазначение 
				И (Связь.ВыражениеИсточник = "Назначение" 
				ИЛИ Связь.ВыражениеПриемник = "Назначение") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
	ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Индекс = ПоляГруппировки.Количество() - 1;
	
	Если ЗаполнятьПоФормуле Тогда
	
		ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
		
		Пока  Индекс >= 0 Цикл
			ПолеГруппировки = ПоляГруппировки[Индекс];
		
			Если ПолеГруппировки.Поле = ПолеПериод Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	Иначе
		
		ПолеНомерСтроки = Новый ПолеКомпоновкиДанных("НомерСтроки");
		ПолеПериодСостава = Новый ПолеКомпоновкиДанных("ПериодСостава");
		
		Пока  Индекс >= 0 Цикл
			ПолеГруппировки = ПоляГруппировки[Индекс];
		
			Если ПолеГруппировки.Поле = ПолеНомерСтроки Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Если ПолеГруппировки.Поле = ПолеПериодСостава Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ТаблицаСостава = СКД_Преобразование.НаборыДанных.Найти("ТаблицаСостава");
		Если ТаблицаСостава <> Неопределено Тогда
			
			Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
			
			Пока  Индекс >= 0 Цикл
				
				Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
				Если Связь.НаборДанныхИсточник = "ТаблицаСостава" Тогда
					СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
				КонецЕсли; 
				
				Индекс = Индекс - 1;
				
			КонецЦикла; 
			СКД_Преобразование.НаборыДанных.Удалить(ТаблицаСостава);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СКД_Преобразование;
	
КонецФункции

// Функция получает пользовательские настройки по умолчанию из вида плана
//
// Параметры:
//  ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ВидПлана - СправочникСсылка.ВидыПланов, СправочникОбъект.ВидыПланов - Вид плана из которого получаются настройки.
//
// Возвращаемое значение:
//   Структура - настройки заполнения документа.
//
Функция ПолучитьНастройкиПоУмолчанию(Знач ТипПлана, Знач ВидПлана) Экспорт 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ВидПлана) = Тип("СправочникОбъект.ВидыПланов") Тогда
		Если ТипПлана = ВидПлана.ТипПлана Тогда
			СтруктураНастроек = ВидПлана.СтруктураНастроек.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "СтруктураНастроек, ТипПлана");
		Если ТипПлана = Реквизиты.ТипПлана Тогда
			СтруктураНастроекХранилище = Реквизиты.СтруктураНастроек;
			СтруктураНастроек = СтруктураНастроекХранилище.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек.Вставить("ПользовательскиеНастройки", Неопределено);
	Иначе
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

// Функция получает правило по умолчанию для вида плана, помещает его во временное хранилище и возвращает адрес.
//
// Параметры:
//  ТипПлана                - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ВидПлана                - СправочникСсылка.ВидыПланов, СправочникОбъект.ВидыПланов - Вид плана из которого
//                                                                                       получается правило заполнения
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор, в который возвращается адрес правила.
//
// Возвращаемое значение:
//   Строка - адрес временного хранилища значений.
//
Функция ПолучитьАдресПравилаЗаполненияПоУмолчанию(Знач ТипПлана, Знач ВидПлана, Знач УникальныйИдентификатор) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Если ЭтоАдресВременногоХранилища(УникальныйИдентификатор) Тогда
			Возврат УникальныйИдентификатор;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли; 
	
	Если ТипЗнч(ВидПлана) = Тип("СправочникОбъект.ВидыПланов") Тогда
		ПравилоЗаполнения = ВидПлана.ПравилоЗаполнения.Выгрузить();
		Если ТипПлана <> ВидПлана.ТипПлана Тогда
			ПравилоЗаполнения.Очистить();
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВидыПланов.ТипПлана КАК ТипПлана
		|ИЗ
		|	Справочник.ВидыПланов КАК ВидыПланов
		|ГДЕ
		|	ВидыПланов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|*
		|ИЗ
		|	Справочник.ВидыПланов.ПравилоЗаполнения КАК ПравилоЗаполнения
		|ГДЕ
		|	ПравилоЗаполнения.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПравилоЗаполнения.НомерСтроки");
		
		Запрос.УстановитьПараметр("Ссылка", ВидПлана);
		
		Результат = Запрос.ВыполнитьПакет();
		
		РезультатТипПлана = Результат[0].Выгрузить();
		ПравилоЗаполнения = Результат[1].Выгрузить();
		Если РезультатТипПлана.Количество() > 0 И РезультатТипПлана[0].ТипПлана <> ТипПлана Тогда
			ПравилоЗаполнения.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(ПравилоЗаполнения, УникальныйИдентификатор);
	
	Возврат АдресПравилаЗаполнения;

КонецФункции 

// Функция получает пользовательские настройки по умолчанию из вида плана и возвращает адрес временного хранилища.
//
// Параметры:
//  ТипПлана                - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ВидПлана                - СправочникСсылка.ВидыПланов, СправочникОбъект.ВидыПланов - Вид плана из которого
//                                                                                       получаются настройки
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор, в который возвращается адрес настроек.
//
// Возвращаемое значение:
//   Строка - адрес временного хранилища значений.
//
Функция ПолучитьАдресПользовательскихНастроекПоУмолчанию(Знач ТипПлана, Знач ВидПлана, Знач УникальныйИдентификатор) Экспорт 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Если ЭтоАдресВременногоХранилища(УникальныйИдентификатор) Тогда
			Возврат УникальныйИдентификатор;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВидПлана) = Тип("СправочникОбъект.ВидыПланов") Тогда
		Если ТипПлана = ВидПлана.ТипПлана Тогда
			СтруктураНастроек = ВидПлана.СтруктураНастроек.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "СтруктураНастроек, ТипПлана");
		Если ТипПлана = Реквизиты.ТипПлана Тогда
			СтруктураНастроекХранилище = Реквизиты.СтруктураНастроек;
			СтруктураНастроек = СтруктураНастроекХранилище.Получить();
		Иначе
			СтруктураНастроек = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") И СтруктураНастроек.Свойство("ПользовательскиеНастройки") Тогда
		АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(СтруктураНастроек.ПользовательскиеНастройки, УникальныйИдентификатор);
	Иначе
		АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат АдресПользовательскихНастроек;

КонецФункции

#КонецОбласти

#Область ПроцедурыКроссТаблиц

// Процедура создает реквизит формы "Таблица значений" с колонками, необходимыми для обработки периодов.
//
// Параметры:
//  Форма  				- ФормаКлиентскогоПриложения - форма в которой необходимо создать таблицу периодов
//  ИмяТаблицыПериодов  - Строка - Имя, с которым будет создан реквизит формы таблица.
//
Процедура СоздатьТаблицуПериодов(Форма, Знач ИмяТаблицыПериодов) Экспорт 
	
	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТиповЧ = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0); 
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповДата = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	
	// Создание реквизитов  таблицы
	ДобавляемыеРеквизиты = Новый Массив();
	РеквизитСуществует = Ложь;
	Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
		
		Если Реквизит.Имя = ИмяТаблицыПериодов Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ РеквизитСуществует Тогда
		Реквизит = Новый РеквизитФормы(ИмяТаблицыПериодов, ОписаниеТиповТЗ);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("НомерКолонки", ОписаниеТиповЧ, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ИмяКолонки", ОписаниеТиповСтрока, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Активная", ОписаниеТиповБулево, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ДатаНачала", ОписаниеТиповДата, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ДатаОкончания", ОписаниеТиповДата, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Заголовок", ОписаниеТиповСтрока, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Замещен", ОписаниеТиповБулево, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ЗамещенКЗаказу", ОписаниеТиповБулево, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	КонецЕсли;;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

// Функция возвращает периоды планов остатка
//
// Параметры:
//  Параметры - Структура - параметры расчета периодов плана.
//
// Возвращаемое значение:
//  Структура - содержит:
//   ДатаНачалаНакопленияОстатка - Дата - дата начала накопления плановых остатков
//   ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода - Массив - массив периодов планов остатков, больше начало периода.
//
Функция ПолучитьПериодыПлановОстатков(Параметры) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланОстатков.НачалоПериода КАК Период
	|ПОМЕСТИТЬ ВсеПланыОстатков
	|ИЗ
	|	Документ.ПланОстатков КАК ПланОстатков
	|ГДЕ
	|	ПланОстатков.Ссылка <> &Ссылка
	|	И ПланОстатков.НачалоПериода <= &КонецПериода
	|	И ПланОстатков.Сценарий = &Сценарий
	|	И ПланОстатков.Статус В(&СтатусыСценария)
	|	И НЕ ПланОстатков.ПометкаУдаления
	|	И ПланОстатков.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВсеПланыОстатков.Период) КАК Период
	|ИЗ
	|	ВсеПланыОстатков КАК ВсеПланыОстатков
	|ГДЕ
	|	ВсеПланыОстатков.Период <= &НачалоПериода
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВсеПланыОстатков.Период) > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодПланыЗакупок.Период КАК Период
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланЗакупок.НачалоПериода КАК Период
	|	ИЗ
	|		Документ.ПланЗакупок КАК ПланЗакупок
	|	ГДЕ
	|		ПланЗакупок.НачалоПериода <= &КонецПериода
	|		И ПланЗакупок.Ссылка <> &Ссылка
	|		И ПланЗакупок.Сценарий = &Сценарий
	|		И ПланЗакупок.Статус В(&СтатусыСценария)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период) КАК ПериодПланыЗакупок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодПланыПродаж.Период
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланПродаж.НачалоПериода КАК Период
	|	ИЗ
	|		Документ.ПланПродаж КАК ПланПродаж
	|	ГДЕ
	|		ПланПродаж.НачалоПериода <= &КонецПериода
	|		И ПланПродаж.Ссылка <> &Ссылка
	|		И ПланПродаж.Сценарий = &Сценарий
	|		И ПланПродаж.Статус В(&СтатусыСценария)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период) КАК ПериодПланыПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодПланыВнутреннихПотреблений.Период
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланВнутреннихПотреблений.НачалоПериода КАК Период
	|	ИЗ
	|		Документ.ПланВнутреннихПотреблений КАК ПланВнутреннихПотреблений
	|	ГДЕ
	|		ПланВнутреннихПотреблений.НачалоПериода <= &КонецПериода
	|		И ПланВнутреннихПотреблений.Ссылка <> &Ссылка
	|		И ПланВнутреннихПотреблений.Сценарий = &Сценарий
	|		И ПланВнутреннихПотреблений.Статус В(&СтатусыСценария)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период) КАК ПериодПланыВнутреннихПотреблений
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодПланыСборкиРазборки.Период
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланСборкиРазборки.НачалоПериода КАК Период
	|	ИЗ
	|		Документ.ПланСборкиРазборки КАК ПланСборкиРазборки
	|	ГДЕ
	|		ПланСборкиРазборки.НачалоПериода <= &КонецПериода
	|		И ПланСборкиРазборки.Ссылка <> &Ссылка
	|		И ПланСборкиРазборки.Сценарий = &Сценарий
	|		И ПланСборкиРазборки.Статус В(&СтатусыСценария)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Период) КАК ПериодПланыСборкиРазборки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодПланыПотребленияКомплектующихОбороты.Период
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПланыПотребленияКомплектующихОбороты.Период КАК Период
	|	ИЗ
	|		РегистрНакопления.ПланыПотребленияКомплектующих.Обороты(
	|				,
	|				&КонецПериода,
	|				Запись,
	|				Сценарий = &Сценарий
	|					И Статус В (&СтатусыСценария)
	|					И ПланСборкиРазборки <> &Ссылка) КАК ПланыПотребленияКомплектующихОбороты
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ПланыПотребленияКомплектующихОбороты.Период) КАК ПериодПланыПотребленияКомплектующихОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПланыОстатков.Период КАК Период
	|ИЗ
	|	ВсеПланыОстатков КАК ВсеПланыОстатков
	|ГДЕ
	|	ВсеПланыОстатков.Период > &НачалоПериода";
	
	Запрос.УстановитьПараметр("Сценарий", Параметры.Сценарий);
	Запрос.УстановитьПараметр("Периодичность", Параметры.Периодичность);
	Запрос.УстановитьПараметр("СтатусыСценария", Параметры.СтатусыСценария);
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();  
	ВыборкаПериодАктуальногоПланаОстатка = РезультатЗапроса[1].Выбрать();
	
	ДатаНачалаНакопленияОстатка = Параметры.НачалоПериода;
	
	Если ВыборкаПериодАктуальногоПланаОстатка.Следующий() Тогда
		ДатаНачалаНакопленияОстатка = ВыборкаПериодАктуальногоПланаОстатка.Период;
	Иначе
		ВыборкаПериодыДругихПланов = РезультатЗапроса[2].Выбрать();
		Если ВыборкаПериодыДругихПланов.Следующий() Тогда
			ДатаНачалаНакопленияОстатка = Мин(ВыборкаПериодыДругихПланов.Период, ДатаНачалаНакопленияОстатка);
		КонецЕсли;
	КонецЕсли;
	
	ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода = Новый Массив;
	ВыборкаПериодыПлановОстатков = РезультатЗапроса[3].Выбрать();
	Если ВыборкаПериодыПлановОстатков.Следующий() Тогда
		ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода.Добавить(ВыборкаПериодыПлановОстатков.Период);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачалаНакопленияОстатка", ДатаНачалаНакопленияОстатка);
	Результат.Вставить("ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода", ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат
КонецФункции

// Процедура подготавливает таблицу периодов для заполнения по формулам
//
// Параметры:
//  Параметры - Структура - параметры заполнения.
//
Процедура ПодготовитьТаблицуПериодовПередЗаполнением(Параметры) Экспорт 
	
	ПараметрыСценария = ПараметрыСценария(Параметры.Сценарий);
	ИспользоватьВПланированииОстатков = ПараметрыСценария.ИспользоватьВПланированииОстатков;
	
	// Если используются схемы "ПланируемыеНачальныеОстатки" или
	// тогда НачалоПериода устанавливается на последний актуальный план остатков, а смещение периода не используется.
	Если ИспользоватьВПланированииОстатков И Параметры.СмещениеПериода = 0
		И СтрНайти(Параметры.Формула, "ПланируемыеНачальныеОстатки") > 0 Тогда
		
		Если Параметры.Свойство("Сценарий") 
			И Не Параметры.Свойство("СтатусыСценария") Тогда
			СписокСтатусов = Новый СписокЗначений;
			СписокСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
			СписокСтатусов.Добавить(Перечисления.СтатусыПланов.Утвержден);
			
			Параметры.Вставить("СтатусыСценария",СписокСтатусов);
		КонецЕсли;
		
		ПараметрыРасчетаНачалаНакопленияОстатка = Новый Структура();
		ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Сценарий", Параметры.Сценарий);
		ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Периодичность", Параметры.Периодичность);
		ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("СтатусыСценария", Параметры.СтатусыСценария);
		ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Ссылка", Параметры.Ссылка);
		ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("НачалоПериода", Параметры.НачалоПериодаСмещения);
		ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("КонецПериода", Параметры.КонецПериодаСмещения);
		
		Результат = ПолучитьПериодыПлановОстатков(ПараметрыРасчетаНачалаНакопленияОстатка);
		Параметры.НачалоПериодаСмещения = Результат.ДатаНачалаНакопленияОстатка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу периодов, последовательно датам с заданной периодичностью, для получения полей и их заголовков.
//
// Параметры:
//  ТаблицаПериоды - см. ТаблицаПериоды
//  Периодичность  - ПеречислениеСсылка.Периодичность - Периодичность с которой нужно заполнить таблицу
//  ДатаНачала     - Дата - Дата начала периода
//  ДатаОкончания  - Дата - Дата окончания периода
//  ОтображатьНомерПериода  - Булево - Флаг отображения заголовка по номеру периода в пределах года
//  ЗамещенныеПериоды - ТаблицаЗначений - где:
//   *ЗамещенныйПериод - Дата
//   *ЗамещенКЗаказу - Булево
//   *Замещен - Булево
//  ДатаНачалаАктивныхПериодов - Дата.
//
Процедура ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Знач Периодичность, Знач ДатаНачала, Знач ДатаОкончания, Знач ОтображатьНомерПериода = Ложь, ЗамещенныеПериоды = Неопределено, ДатаНачалаАктивныхПериодов = Неопределено) Экспорт 
	
	Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
		СтрокаПериода.Активная = Ложь;
		СтрокаПериода.НомерКолонки = -1;
	КонецЦикла; 
	
	Если НЕ ЗначениеЗаполнено(Периодичность)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаНачала) 
		И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавлениеДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(ДатаНачала, Периодичность);
	ДобавлениеДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, Периодичность);
	Если ДатаНачалаАктивныхПериодов = Неопределено Тогда
		ДатаНачалаАктивныхПериодов = Дата('00010101');
	КонецЕсли;
	
	ТекущийПериод = 1;
	
	Пока ДобавлениеДатаНачала < КонецДня(ДатаОкончания) Цикл
		
		НайденныеСтроки = ТаблицаПериоды.НайтиСтроки(Новый Структура("ДатаНачала, ДатаОкончания", ДобавлениеДатаНачала, ДобавлениеДатаОкончания));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаПериоды.Добавить();
			НоваяСтрока.ИмяКолонки = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		НоваяСтрока.Активная =ДобавлениеДатаНачала>=ДатаНачалаАктивныхПериодов;
		Если НоваяСтрока.Активная Тогда
			НоваяСтрока.НомерКолонки = ТекущийПериод;
			ТекущийПериод = ТекущийПериод + 1;
		Иначе
			НоваяСтрока.НомерКолонки = 0;
		КонецЕсли;
		НоваяСтрока.ДатаНачала = ДобавлениеДатаНачала;
		НоваяСтрока.ДатаОкончания = ДобавлениеДатаОкончания;
		
		НоваяСтрока.Замещен = Ложь;
		НоваяСтрока.ЗамещенКЗаказу = Ложь;
		
		Если ЗамещенныеПериоды <> Неопределено Тогда
			ЗамещенныеПериодыСтроки = ЗамещенныеПериоды.НайтиСтроки(Новый Структура("ЗамещенныйПериод", ДобавлениеДатаНачала)); 
			Если ЗамещенныеПериодыСтроки.Количество()>0 Тогда
				НоваяСтрока.Замещен = Истина;
				Если ЗамещенныеПериодыСтроки[0].Свойство("ЗамещенКЗаказу") Тогда
					НоваяСтрока.ЗамещенКЗаказу = ЗамещенныеПериодыСтроки[0].ЗамещенКЗаказу;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Заголовок = ПланированиеКлиентСервер.СформироватьЗаголовокПериода(Периодичность, ДобавлениеДатаНачала, ДобавлениеДатаОкончания, ОтображатьНомерПериода, НоваяСтрока.Замещен);
		
		ДобавлениеДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(ДобавлениеДатаОкончания+1 , Периодичность);
		ДобавлениеДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДобавлениеДатаОкончания+1, Периодичность);
		
	КонецЦикла;
	
	УдаляемыеСтроки = ТаблицаПериоды.НайтиСтроки(Новый Структура("НомерКолонки",-1));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПериоды.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ТаблицаПериоды.Сортировать("ДатаНачала");
	
КонецПроцедуры

// Процедура обновляет структуру данных кросс-таблицы плана
//
// Параметры:
//  Форма  				- ФормаКлиентскогоПриложения - форма в которой необходимо создать таблицу периодов
//  Параметры  			- Структура - параметры формирования кросс-таблицы:
//  * ИмяРеквизитаКроссТаблицы - Строка - 
//  * ЭлементФормыКроссТаблицы - Строка - 
//  * ТаблицаПериодов - см. ТаблицаПериоды
//  * ВыводитьПредыдущийПериод - Булево - 
//  * Периодичность - ПеречислениеСсылка.Периодичность - 
//  * Поля - Массив из см. СтруктураПоля -
//
Процедура ОбновитьСтруктуруВыводаКроссТаблицы(Форма, Параметры) Экспорт
	
	ИмяРеквизитаКроссТаблицы = Параметры.ИмяРеквизитаКроссТаблицы;
	ЭлементФормыКроссТаблицы = Параметры.ЭлементФормыКроссТаблицы;
	ТаблицаПериодов = Параметры.ТаблицаПериодов;
	Поля = Параметры.Поля;
	
	Если Параметры.Свойство("ВыводитьПредыдущийПериод") Тогда
		ВыводитьПредыдущийПериод = Параметры.ВыводитьПредыдущийПериод;
	Иначе
		ВыводитьПредыдущийПериод = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СоздаватьГруппуПериода") Тогда
		СоздаватьГруппуПериода = Параметры.СоздаватьГруппуПериода;
	Иначе
		СоздаватьГруппуПериода = Ложь;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	РеквизитыТаблицыПлана = Форма.ПолучитьРеквизиты(ИмяРеквизитаКроссТаблицы);
	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из РеквизитыТаблицыПлана Цикл
		Если СтрНайти(Реквизит.Имя, "_") <> 0 Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаКроссТаблицы+"." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеРеквизитовТаблицыПлана = Новый Соответствие;
	Для Каждого Реквизит Из РеквизитыТаблицыПлана Цикл
		СоответствиеРеквизитовТаблицыПлана.Вставить(Реквизит.Имя, Истина);
	КонецЦикла;
	
	СоответствиеРеквизитовВерхнегоУровня = Новый Соответствие;
	Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
		СоответствиеРеквизитовВерхнегоУровня.Вставить(Реквизит.Имя, Истина);
	КонецЦикла;
	
	Для каждого СтруктураПоля Из Поля Цикл
		
		Если СтруктураПоля.Свойство("СоздаватьРеквизит") Тогда
			СоздаватьРеквизит = СтруктураПоля.СоздаватьРеквизит;
		Иначе
			СоздаватьРеквизит = Истина;
		КонецЕсли;
		
		ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
		Если СтруктураПоля.Свойство("УдалятьРеквизитыТаблицы") Тогда
			УдалятьРеквизитыТаблицы = СтруктураПоля.УдалятьРеквизитыТаблицы;
		Иначе
			УдалятьРеквизитыТаблицы = Ложь;
		КонецЕсли;
		
		// Реквизиты не подлежащие удалению
		Если СоздаватьРеквизит Тогда
			
			Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
				
				ИндексУдаляемогоЭлемента = УдаляемыеРеквизиты.Найти(ИмяРеквизитаКроссТаблицы+"." + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки);
				Если ИндексУдаляемогоЭлемента <> Неопределено Тогда
					УдаляемыеРеквизиты.Удалить(ИндексУдаляемогоЭлемента);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ СоздаватьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураПоля.Свойство("ТипЭлемента") Тогда
			ТипЭлемента = СтруктураПоля.ТипЭлемента;
		Иначе
			ТипЭлемента = "Число";
		КонецЕсли;
		Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
			СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
		Иначе
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("РасширенныйФорматЧислаДаты") Тогда
			РасширенныйФорматЧислаДаты = СтруктураПоля.РасширенныйФорматЧислаДаты;
		Иначе
			РасширенныйФорматЧислаДаты = Ложь;
		КонецЕсли;
				
		Если СоздаватьИтоговыеРеквизиты И ТипЭлемента <> "Число" И ТипЗнч(ТипЭлемента) <> Тип("ОписаниеТипов") Тогда
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТипЭлемента) = Тип("ОписаниеТипов") Тогда
			ОписаниеТипов = ТипЭлемента;
		ИначеЕсли ТипЭлемента = "Булево" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ИначеЕсли ТипЭлемента = "Дата" Тогда
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
			Иначе
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
			КонецЕсли;
		Иначе
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 5);
			Иначе
				ОписаниеТипов = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3); 
			КонецЕсли; 
			
		КонецЕсли;
		
		// Создание реквизитов таблицы
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		
			ИмяРеквизита = ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
			Если СоответствиеРеквизитовТаблицыПлана[ИмяРеквизита] = Истина Тогда
				Реквизит.Заголовок = СтрокаПериода.Заголовок;
				
				Продолжить;
			КонецЕсли; 
			
			Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов, ИмяРеквизитаКроссТаблицы,
				СтрокаПериода.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		КонецЦикла;
		
		// Создаем итоговые реквизиты 
		Если СоздаватьИтоговыеРеквизиты Тогда
			Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
				Если НЕ СтрокаПериода.Активная Тогда
					Продолжить;
				КонецЕсли; 
				
				ИмяРеквизита = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки,".","_");
				Если СоответствиеРеквизитовВерхнегоУровня[ИмяРеквизита] = Истина Тогда
					Продолжить;
				КонецЕсли; 
				
				ПрефиксРеквизита = НСтр("ru = 'Итого'");
				
				Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,
					, ПрефиксРеквизита + " " + СтрокаПериода.Заголовок);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Если Не ЗначениеЗаполнено(ЭлементФормыКроссТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление элементов формы
	УдаляемыеЭлементы = Новый Массив();
	КроссТаблица = Форма.Элементы[ЭлементФормыКроссТаблицы]; // ТаблицаФормы - 
	Для Каждого ТекЭлемент Из КроссТаблица.ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "ГруппаРеквизитов") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		ЭлементНайден = Ложь;
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			Если  СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки) Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементНайден Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтрНайти(ТекЭлемент.Имя, ПрефиксРеквизитаКолонки) > 0  Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	ВладелецПоля = Форма.Элементы[ЭлементФормыКроссТаблицы];
	
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементДляПодвала = Неопределено;
		
		Если СоздаватьГруппуПериода Тогда
			НайденныеСтроки = ТаблицаПериодов.НайтиСтроки(Новый Структура("Активная", Истина));
			Если НайденныеСтроки.Количество() > 1 Тогда
				ЭлементФормы = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки, Тип("ГруппаФормы"), 
					Форма.Элементы[ЭлементФормыКроссТаблицы]);
				ЭлементФормы.Группировка      = ГруппировкаКолонок.Горизонтальная;
				ЭлементФормы.ОтображатьВШапке = Истина;
				ЭлементФормы.Заголовок        = СтрокаПериода.Заголовок;
				
				ВладелецПоля = ЭлементФормы;
			Иначе
				ВладелецПоля = Форма.Элементы[ЭлементФормыКроссТаблицы];
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтруктураПоля.Свойство("СоздаватьЭлемент") Тогда
				СоздаватьЭлемент = СтруктураПоля.СоздаватьЭлемент;
			Иначе
				СоздаватьЭлемент = Истина;
			КонецЕсли;
			Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
				СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
			Иначе
				СоздаватьИтоговыеРеквизиты = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе") Тогда
				ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = СтруктураПоля.ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе;
			Иначе
				ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПоказыватьИтоговыеРеквизитыВГруппе") Тогда
				ПоказыватьИтоговыеРеквизитыВГруппе = СтруктураПоля.ПоказыватьИтоговыеРеквизитыВГруппе;
			Иначе
				ПоказыватьИтоговыеРеквизитыВГруппе = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ШиринаЭлемента") Тогда
				ШиринаЭлемента = СтруктураПоля.ШиринаЭлемента;
			Иначе
				ШиринаЭлемента = 6;
			КонецЕсли;
			Если СтруктураПоля.Свойство("СтруктураДействий") Тогда
				СтруктураДействий = СтруктураПоля.СтруктураДействий;
			Иначе
				СтруктураДействий = Новый Структура();
			КонецЕсли;
			Если СтруктураПоля.Свойство("ТипЭлементаФормы") Тогда
				ТипЭлементаФормы = СтруктураПоля.ТипЭлементаФормы;
			Иначе
				ТипЭлементаФормы = Тип("ПолеФормы");
			КонецЕсли;
			Если СтруктураПоля.Свойство("ВидПоля") Тогда
				ВидПоля = СтруктураПоля.ВидПоля;
			Иначе
				ВидПоля = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПрефиксГруппы") Тогда
				РодительЭлемента = Форма.Элементы[ЭлементФормыКроссТаблицы + СтруктураПоля.ПрефиксГруппы + СтрокаПериода.ИмяКолонки];
			Иначе
				РодительЭлемента = ВладелецПоля;
			КонецЕсли;
			
			Если СоздаватьЭлемент Тогда
				// Перепривязываем данные
				// Создание элементов формы
				Элемент = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, 
					ТипЭлементаФормы, РодительЭлемента);
				Элемент.Вид = ВидПоля;
				Если ТипЭлементаФормы = Тип("ПолеФормы") ИЛИ ТипЭлементаФормы = Тип("ТаблицаФормы") Тогда
					Элемент.ПутьКДанным = ИмяРеквизитаКроссТаблицы+"."+ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
				КонецЕсли;
				
				Если Элемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
					Элемент.Ширина = ШиринаЭлемента;
				КонецЕсли; 
				Если СтруктураПоля.Свойство("Заголовок") Тогда
					Если ЗначениеЗаполнено(СтруктураПоля.Заголовок) Тогда
						Элемент.Заголовок = СтруктураПоля.Заголовок;
					Иначе
						Элемент.Заголовок = СтрокаПериода.Заголовок;
					КонецЕсли;
				ИначеЕсли СтруктураПоля.ПрефиксРеквизитаКолонки = "Количество_" Тогда
					Элемент.Заголовок = СтрокаПериода.Заголовок;
				Иначе
					Элемент.Заголовок = СтрЗаменить(СтруктураПоля.ПрефиксРеквизитаКолонки, "_", " ") + СтрокаПериода.Заголовок;
				КонецЕсли;
				Если СтруктураПоля.Свойство("СвойстваЭлемента") И ТипЗнч(СтруктураПоля.СвойстваЭлемента) = Тип("Структура") Тогда
					ЗаполнитьЗначенияСвойств(Элемент, СтруктураПоля.СвойстваЭлемента);
				КонецЕсли; 
				Для каждого Действие Из СтруктураДействий Цикл
					Элемент.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла;
				
				ЭлементДляПодвала = Элемент;
			КонецЕсли;
			
			Если СоздаватьИтоговыеРеквизиты 
				И (СоздаватьЭлемент 
					ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе 
					ИЛИ ПоказыватьИтоговыеРеквизитыВГруппе) Тогда
				Если (СоздаватьЭлемент ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе) И ЭлементДляПодвала <> Неопределено Тогда
					ЭлементДляПодвала.ПутьКДаннымПодвала = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
				КонецЕсли;
				
				Если ПоказыватьИтоговыеРеквизитыВГруппе 
					// И СоздаватьГруппуПериода 
					И ВладелецПоля <> Неопределено 
					И ТипЗнч(ВладелецПоля) = Тип("ГруппаФормы") 
					И ВладелецПоля.ОтображатьВШапке Тогда
					Если НЕ ПустаяСтрока(ВладелецПоля.Заголовок) Тогда
						ВладелецПоля.Заголовок = ВладелецПоля.Заголовок + ": ";
					КонецЕсли; 
					ВладелецПоля.ПутьКДаннымШапки = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
					ВладелецПоля.ФорматШапки = "ЧДЦ=2; ЧН=0,00";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает реквизит в который сохраняется структура со значениями сохраняемых реквизитов.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой необходимо создать реквизит
//  ИмяРеквизитаПроверки   - Строка - Имя реквизита проверки, произвольное имя, не занятое другими реквизитами формы
//  ИменаРеквизитовОбъекта - Строка - Имена реквизитов объекта, значения которых сохраняются в реквизит проверки.
//
Процедура СоздатьРеквизитыПроверкиИзменений(Форма, Знач ИмяРеквизитаПроверки, Знач ИменаРеквизитовОбъекта) Экспорт 

	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	ОписаниеТиповНеопределено = Новый ОписаниеТипов();
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	РеквизитСуществует = Ложь;
	Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
		Если Реквизит.Имя = ИмяРеквизитаПроверки Тогда
			РеквизитСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РеквизитСуществует Тогда
		Реквизит = Новый РеквизитФормы(ИмяРеквизитаПроверки, ОписаниеТиповНеопределено);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Если ТипЗнч(Форма[ИмяРеквизитаПроверки]) <> Тип("Структура") Тогда
	
		Форма[ИмяРеквизитаПроверки] = Новый Структура(ИменаРеквизитовОбъекта);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет заполнение кросс-таблицы в форме
//
// Параметры:
//  Таблица              - ТаблицаЗначений - кросс-таблица, в которой необходимо проверить реквизиты
//  СтруктураДействий    - Структура - Параметры, настройки и действия для проверки заполнения
//  Отказ                - Булево - Истина, если есть ошибки заполнения
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты объекта
//  КроссТаблица         - Булево - Признак кросс-таблицы.
//
Процедура ОбработкаПроверкиЗаполненияВФорме(Таблица, СтруктураДействий, Отказ, ПроверяемыеРеквизиты, Знач КроссТаблица = Истина) Экспорт 
	
	Если НЕ КроссТаблица Тогда
		Возврат;
	КонецЕсли; 
	
	ПредставлениеТаблицы 	= СтруктураДействий.ПредставлениеТаблицы;
	ПутьКТаблице 			= СтруктураДействий.ПутьКТаблице;
	
	Если Таблица.Количество() = 0 Тогда
	
		ТекстСообщения = НСтр("ru = 'Не заполнен список ""%ПредставлениеТаблицы%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТаблицы%",ПредставлениеТаблицы);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ПутьКТаблице,
			,
			Отказ);
		Возврат;
	
	КонецЕсли;
	
	ЗаполнятьНоменклатуру        = Ложь;
	ЗаполнятьТоварнуюКатегорию   = Ложь;
	ЗаполнятьПартнераВТЧ         = Ложь;
	ЗаполнятьСоглашениеВТЧ       = Ложь;
	ЗаполнятьСкладВТЧ            = Ложь;
	ЗаполнятьХарактеристикуВТЧ   = Ложь;
	ЗаполнятьВариантКомплектации = Ложь;
	
	ТекстОшибкиНоменклатура 	= НСтр("ru = 'Не заполнена колонка ""Номенклатура""'");
	ТекстОшибкиТоварнаяКатегория= НСтр("ru = 'Не заполнена колонка ""Товарная категория""'");
	ТекстОшибкиПартнер 			= НСтр("ru = 'Не заполнена колонка ""%Партнер%""'");
	ТекстОшибкиСоглашение 		= НСтр("ru = 'Не заполнена колонка ""Соглашение""'");
	ТекстОшибкиСклад 			= НСтр("ru = 'Не заполнена колонка ""Склад""'");
	ТекстОшибкиХарактеристика	= НСтр("ru = 'Не заполнена колонка ""Характеристика""'");
	ТекстОшибкиКомплектация     = НСтр("ru = 'Не заполнена колонка ""Комплектация""'");
	
	ШаблонАдресаОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%Товары%""'");
	
	Если НЕ ПустаяСтрока(ПредставлениеТаблицы) Тогда
		ШаблонАдресаОшибки = СтрЗаменить(ШаблонАдресаОшибки, "%Товары%",ПредставлениеТаблицы);
	Иначе
		ШаблонАдресаОшибки = СтрЗаменить(ШаблонАдресаОшибки, "%Товары%",НСтр("ru = 'Товары'"));
	КонецЕсли;
		
	ИмяКолонки = "";
	Если СтруктураДействий.Свойство("ЗаполнятьПартнераВТЧ", ИмяКолонки) Тогда
		Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
			ТекстОшибкиПартнер = СтрЗаменить(ТекстОшибкиПартнер, "%Партнер%",ИмяКолонки);
		Иначе
			ТекстОшибкиПартнер = СтрЗаменить(ТекстОшибкиПартнер, "%Партнер%",НСтр("ru = 'Партнер'"));
		КонецЕсли; 
		ЗаполнятьПартнераВТЧ = Истина;
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ЗаполнятьНоменклатуру") Тогда 
		ЗаполнятьНоменклатуру = Истина;
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнятьТоварнуюКатегорию") Тогда 
		ЗаполнятьТоварнуюКатегорию = Истина;
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнятьСоглашениеВТЧ") Тогда 
		ЗаполнятьСоглашениеВТЧ = Истина;
	КонецЕсли; 
	Если СтруктураДействий.Свойство("ЗаполнятьСкладВТЧ") Тогда 
		ЗаполнятьСкладВТЧ = Истина;
	КонецЕсли; 
	Если СтруктураДействий.Свойство("ЗаполнятьХарактеристикуВТЧ") Тогда 
		ЗаполнятьХарактеристикуВТЧ = Истина;
	КонецЕсли; 
	Если СтруктураДействий.Свойство("ЗаполнятьВариантКомплектации") Тогда 
		ЗаполнятьВариантКомплектации = Истина;
	КонецЕсли; 
	
	ПараметрыПроверкиКоличества = Неопределено;
	Если СтруктураДействий.Свойство("ПроверкаКоличестваПоПериодам", ПараметрыПроверкиКоличества) Тогда
		Если ПараметрыПроверкиКоличества.Периоды.Количество() = 1 Тогда
			ПараметрыПроверкиКоличества.Вставить("ИмяПоля", ПараметрыПроверкиКоличества.ПрефиксПоля + ПараметрыПроверкиКоличества.Периоды[0].ИмяКолонки);
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		АдресОшибки = СтрЗаменить(ШаблонАдресаОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
		
		Если ЗаполнятьНоменклатуру И НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиНоменклатура + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
		КонецЕсли;
		Если ЗаполнятьТоварнуюКатегорию И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварнаяКатегория) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиТоварнаяКатегория + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "ТоварнаяКатегория"),
				,
				Отказ);
			
		КонецЕсли;
		Если ЗаполнятьПартнераВТЧ И НЕ ЗначениеЗаполнено(СтрокаТЧ.Партнер) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиПартнер + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Партнер"),
				,
				Отказ);
			
		КонецЕсли;
		Если ЗаполнятьСоглашениеВТЧ И НЕ ЗначениеЗаполнено(СтрокаТЧ.Соглашение) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиСоглашение + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Соглашение"),
				,
				Отказ);
			
		КонецЕсли;
		Если ЗаполнятьСкладВТЧ 
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) 
			И (НЕ СтрокаТЧ.Свойство("ТипНоменклатуры") 
				ИЛИ СтрокаТЧ.Свойство("ТипНоменклатуры") 
				И (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
					ИЛИ СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиСклад + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "Склад"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗаполнятьВариантКомплектации И НЕ ЗначениеЗаполнено(СтрокаТЧ.ВариантКомплектации) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиКомплектация + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, "ВариантКомплектации"),
				,
				Отказ);
			
		КонецЕсли;
			
		
		Если СтруктураДействий.Свойство("ПроверкаКоличестваПоПериодам") Тогда 
			
			ЕстьЗаполненныеСтроки = Ложь;
			Для каждого Период Из ПараметрыПроверкиКоличества.Периоды Цикл
				ЕстьЗаполненныеСтроки = ЗначениеЗаполнено(СтрокаТЧ[ПараметрыПроверкиКоличества.ПрефиксПоля + Период.ИмяКолонки]);
				Если ЕстьЗаполненныеСтроки Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НЕ ЕстьЗаполненныеСтроки Тогда
				
				ТекстОшибкиКоличества = НСтр("ru = 'Не заполнено количество'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибкиКоличества + АдресОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, СтрокаТЧ.НомерСтроки, ПараметрыПроверкиКоличества.ИмяПоля),
					,
					Отказ);
			
			КонецЕсли; 
		
		КонецЕсли; 
	КонецЦикла;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если ЗаполнятьХарактеристикуВТЧ И ИспользоватьХарактеристики Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ Ошибки
		|ИЗ
		|	&Таблица КАК Товары
		|ГДЕ
		|	Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ошибки.НомерСтроки,
		|	Ошибки.Номенклатура
		|ИЗ
		|	Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Таблица",  Таблица.Выгрузить(, "НомерСтроки, Номенклатура, Характеристика"));
				
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			АдресОшибки = СтрЗаменить(ШаблонАдресаОшибки,"%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиХарактеристика + АдресОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, Выборка.НомерСтроки, "Характеристика"),
				,
				Отказ);
		КонецЦикла;
		
	КонецЕсли; 

	ОбработкаПроверкиДублированияСтрок(Таблица, ПутьКТаблице, СтруктураДействий.ПоляГруппировки, Отказ);
	
КонецПроцедуры

// Процедура проверяет наличие в таблице дубли строк по полям группировки
//
// Параметры:
//  Таблица              - ДанныеФормыКоллекция, ТабличнаяЧасть - кросс-таблица или основная таблица, в которой необходимо проверить реквизиты:
//  ПутьКТаблице         - Строка - Путь к проверяемой таблице
//  ПоляГруппировки      - Строка - поля группировки в таблице
//  Отказ                - Булево - Истина, если есть ошибки заполнения
Процедура ОбработкаПроверкиДублированияСтрок(Таблица, ПутьКТаблице, ПоляГруппировки, Отказ) Экспорт
	
	ТаблицаПроверкиДублирующихСтрок = Таблица.Выгрузить(,ПоляГруппировки);
	ТаблицаПроверкиДублирующихСтрок.Колонки.Добавить("КоличествоДублирующихСтрок", Новый ОписаниеТипов("Число"));
	ТаблицаПроверкиДублирующихСтрок.ЗаполнитьЗначения(1,"КоличествоДублирующихСтрок");
	ТаблицаПроверкиДублирующихСтрок.Свернуть(ПоляГруппировки, "КоличествоДублирующихСтрок");
	Для Каждого СтрокаДублей Из ТаблицаПроверкиДублирующихСтрок Цикл
		Если СтрокаДублей.КоличествоДублирующихСтрок > 1 Тогда
			ТекстОшибкиКоличества = НСтр("ru = 'Найдены дублирующиеся по ключевым полям строки:'");
			                            
			Отбор = Новый Структура(ПоляГруппировки);
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаДублей);
						
			Для Каждого Строка Из Таблица.НайтиСтроки(Отбор) Цикл
				ТекстОшибкиКоличества = ТекстОшибкиКоличества + " " + НСтр("ru = 'строка'") + " " + Строка.НомерСтроки + ";";
			КонецЦикла;
			
			ИмяКолонки = Лев(ПоляГруппировки,СтрНайти(ПоляГруппировки,",")-1);
				 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибкиКоличества,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПутьКТаблице, Строка.НомерСтроки, ИмяКолонки),
				,
				Отказ);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Процедура проверяет заполнение документа по сценарию и виду плана
//
// Параметры:
//  Объект               - ДокументОбъект - документ, в котором необходимо проверить реквизиты по сценарию и виду плана
//  Отказ                - Булево - Истина, если есть ошибки заполнения
//  ПроверяемыеРеквизиты - Массив - проверяемые реквизиты объекта.
//
Процедура ОбработкаПроверкиЗаполненияПоСценариюВидуПлана(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт 

	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РеквизитыСценария = "Периодичность, Валюта, ПланЗакупокПланироватьПоСумме,
		|ПланПродажПланироватьПоСумме, ИспользоватьДляПланированияМатериалов";
	ПараметрыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, РеквизитыСценария);
	
	Если Объект.Периодичность <> ПараметрыСценария.Периодичность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Периодичность документа не соответствует периодичности сценария.'"), Объект, "Сценарий",,Отказ);
	КонецЕсли; 
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПланЗакупок") Тогда
		
		Если Объект.ПланироватьПоСумме <> ПараметрыСценария.ПланЗакупокПланироватьПоСумме Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Настройка планирования по количеству и сумме в документе не соответствует настройке сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
			
		Если ПараметрыСценария.ПланЗакупокПланироватьПоСумме И Объект.Валюта <> ПараметрыСценария.Валюта Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Валюта в документе не соответствует валюте сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланПродаж") Тогда
		
		Если Объект.ПланироватьПоСумме <> ПараметрыСценария.ПланПродажПланироватьПоСумме Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Настройки планирования по количеству и сумме в документе не соответствует настройкам сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
			
		Если ПараметрыСценария.ПланПродажПланироватьПоСумме И Объект.Валюта <> ПараметрыСценария.Валюта Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Валюта в документе не соответствует валюте сценария.'"), Объект, "Сценарий",,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ВидПлана) Тогда
		РеквизитыВидаПлана = "ЗаполнятьПодразделение,ЗаполнятьПартнера, ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашение,
			|ЗаполнятьСоглашениеВТЧ, ЗаполнятьСклад,ЗаполнятьСкладВТЧ, ЗаполнятьПланОплат, ЗаполнятьМенеджера,
			|ЗаполнятьФорматМагазина, ЗаполнятьПоДефициту";
		НастройкиЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПлана, РеквизитыВидаПлана);
			
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПланЗакупок") Тогда
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнера Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнераВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашениеВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Соглашение");
			КонецЕсли;
			
			Если НастройкиЗаполнения.ЗаполнятьСкладВТЧ И НЕ Объект.КроссТаблица Тогда
				ПараметрыПроверки = Новый Структура("ИмяТЧ, ПредставлениеТЧ", "Товары", НСтр("ru = 'Товары'"));
				ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки);
			КонецЕсли;
			Если Объект.ПланироватьПоСумме И Объект.ЗаполнятьПланОплат <> НастройкиЗаполнения.ЗаполнятьПланОплат Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Настройки заполнения плана оплат в документе не соответствует настройкам вида плана.'"), 
					Объект, 
					"ВидПлана",
					,
					Отказ);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланОстатков") Тогда
			
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НастройкиЗаполнения.ЗаполнятьСкладВТЧ И НЕ Объект.КроссТаблица Тогда
				ПараметрыПроверки = Новый Структура("ИмяТЧ, ПредставлениеТЧ", "Товары", НСтр("ru = 'Товары'"));
				ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланПродаж") Тогда
			
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнера Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьМенеджера Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Менеджер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьФорматМагазина Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьПартнераВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Партнер");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСоглашениеВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Соглашение");
			КонецЕсли;
			Если НастройкиЗаполнения.ЗаполнятьСкладВТЧ И НЕ Объект.КроссТаблица Тогда
				ПараметрыПроверки = Новый Структура("ИмяТЧ, ПредставлениеТЧ", "Товары", НСтр("ru = 'Товары'"));
				ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки);
			КонецЕсли;
			Если Объект.ПланироватьПоСумме И Объект.ЗаполнятьПланОплат <> НастройкиЗаполнения.ЗаполнятьПланОплат Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Настройки заполнения плана оплат в документе не соответствует настройкам вида плана.'"), 
					Объект, 
					"ВидПлана",
					,
					Отказ);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланПродажПоКатегориям") Тогда
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьФорматМагазина Тогда
				МассивНепроверяемыхРеквизитов.Добавить("ФорматМагазина");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланСборкиРазборки") Тогда
			
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСкладВТЧ ИЛИ Объект.КроссТаблица Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПланВнутреннихПотреблений") Тогда
			
			Если НЕ НастройкиЗаполнения.ЗаполнятьПодразделение Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнятьСклад Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склад");
			КонецЕсли;
			Если НастройкиЗаполнения.ЗаполнятьСкладВТЧ И НЕ Объект.КроссТаблица Тогда
				ПараметрыПроверки = Новый Структура("ИмяТЧ, ПредставлениеТЧ", "Товары", НСтр("ru='Товары'"));
				ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки);
			КонецЕсли;
			
			
			
		КонецЕсли; 
		
		Если НастройкиЗаполнения.ЗаполнятьПоДефициту Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПланЗакупок.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПланЗакупок КАК ПланЗакупок
			|ГДЕ
			|	ПланЗакупок.Ссылка <> &Ссылка
			|	И ПланЗакупок.ВидПлана = &ВидПлана
			|	И ПланЗакупок.НачалоПериода = &НачалоПериода
			|	И ПланЗакупок.ОкончаниеПериода = &ОкончаниеПериода
			|	И ПланЗакупок.Проведен";
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Запрос.УстановитьПараметр("ВидПлана", Объект.ВидПлана);
			Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
			Запрос.УстановитьПараметр("ОкончаниеПериода", Объект.ОкончаниеПериода);
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПланСборкиРазборки") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланЗакупок", "ПланСборкиРазборки");
			КонецЕсли;
			
			Если Запрос.Выполнить().Выгрузить().Количество()>0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'В рамках вида плана, заполняемого по дефицитам, может быть создан только один план в периоде.'"),
				Объект,
				,
				, 
				Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Количество"
// 
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, группировать ли с полем картинки комментария
//  ЕстьЗаголовок				 - Булево		 - Флаг определяет, есть ли заголовок у поля
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыКоличество(ПараметрыВывода, СоздаватьЭлемент = Истина, 
	ЕстьПрефиксГруппыКомментария = Ложь, ЕстьЗаголовок = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Количество_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Число");
	Если ЕстьЗаголовок Тогда
		СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	КонецЕсли;
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Цена"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, группировать ли с полем картинки комментария
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыЦена(ПараметрыВывода, СоздаватьЭлемент = Истина, ЕстьПрефиксГруппыКомментария = Ложь, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Цена_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Цена'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Сумма"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыСумма(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Сумма_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Комментарий"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыКомментарий(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Комментарий_");
	СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Комментарий'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("КнопкаВыбора", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("МногострочныйРежим", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Высота", 1);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Отменено"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыОтменено(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Отменено_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Булево");
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеФлажка);
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Отменено'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Замещено"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыЗамещен(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Замещен_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Булево");
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеФлажка);
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Замещен'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "ЗамещенКЗаказу"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыЗамещенКЗаказу(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "ЗамещенКЗаказу_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Булево");
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеФлажка);
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Замещен к заказу'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "группа комментария с картинкой".
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыГруппаКомментарияСКартинкой(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("СоздаватьРеквизит", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
	СтруктураПоля.Вставить("ТипЭлементаФормы", Тип("ГруппаФормы"));
	СтруктураПоля.Вставить("ВидПоля", ВидГруппыФормы.ГруппаКолонок);
	СтруктураПоля.Вставить("ШиринаЭлемента", 8);
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("Группировка", ГруппировкаКолонок.ВЯчейке);
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "КартинкаКомментарий_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеКартинки);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1, 0));
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 1);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("КартинкаЗначений", БиблиотекаКартинок.КоллекцияКомментарий);
	СтруктураПоля.СвойстваЭлемента.Вставить("ПропускатьПриВводе", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВПодвале", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("РастягиватьПоГоризонтали", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("РастягиватьПоВертикали", Ложь);
	СтруктураПоля.СвойстваЭлемента.Вставить("Рамка", Новый Рамка(ТипРамкиЭлементаУправления.БезРамки));
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "расшифровка".
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события.
Процедура ДобавитьПолеКроссТаблицыРасшифровка(ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Расшифровка_");
	СтруктураПоля.Вставить("СоздаватьРеквизит", Истина);
	СтруктураПоля.Вставить("СоздаватьЭлемент", Ложь);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Истина);
	СтруктураПоля.Вставить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	СтруктураПоля.Вставить("ВидПоля", ВидПоляФормы.ПолеНадписи);
	СтруктураПоля.Вставить("ШиринаЭлемента", 1);
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);
	
КонецПроцедуры

// Заполнить таблицу из кросс-таблицы с переносом значений из колонок кросс-таблицы в реквизиты таблицы.
//
// Параметры:
//  ЭтотОбъектТаблица    - ТабличнаяЧасть, ДанныеФормыКоллекция - 
//  ОбъектТаблица        - ТабличнаяЧасть, ДанныеФормыКоллекция - Табличная часть объекта
//  КроссТаблица         - ТабличнаяЧасть - Кросс-таблица в форме
//  Параметры            - Структура - Дополнительные настройки, передаваемые в процедуру:
//                                     * ТаблицаПериоды см. ТаблицаПериоды
//                                     * СтруктураРеквизитовПериода - Структура -
//                                     * СтруктураРеквизитов - Структура -
//  СтруктураДействий    - Структура - Структура действий, выполняемых со строками ТЧ
//  КэшированныеЗначения - Структура - Кэшированные значения.
//  ПолуфабрикатыПоДатам - ТабличнаяЧасть - табличная часть полуфабрикатов
//
Процедура ЗаполнитьТаблицуИзКроссТаблицы(ЭтотОбъектТаблица, ОбъектТаблица, КроссТаблица, Параметры, СтруктураДействий = Неопределено, 
	КэшированныеЗначения = Неопределено, ПолуфабрикатыПоДатам = Неопределено) Экспорт
	
	ТаблицаПериоды             = Параметры.ТаблицаПериоды;
	СтруктураРеквизитовПериода = Параметры.СтруктураРеквизитовПериода;
	СтруктураРеквизитов        = Параметры.СтруктураРеквизитов;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	МассивСтрокЭтотОбъектТаблица = Новый Массив;
	МассивСтрокОбъектТаблица     = Новый Массив;
	
	НоваяСтрокаСтруктураЭтотОбъектТаблица = Новый Структура();
	Для каждого Колонка Из ЭтотОбъектТаблица.Выгрузить().Колонки Цикл
		НоваяСтрокаСтруктураЭтотОбъектТаблица.Вставить(Колонка.Имя);
	КонецЦикла;
	НоваяСтрокаСтруктураОбъектТаблица = Новый Структура();
	Для каждого Колонка Из ОбъектТаблица.Выгрузить().Колонки Цикл
		НоваяСтрокаСтруктураОбъектТаблица.Вставить(Колонка.Имя);
	КонецЦикла;
		
	Для каждого СтрокаКроссТаблицы Из КроссТаблица Цикл
		
		Если ПолуфабрикатыПоДатам <> Неопределено 
			И СтрокаКроссТаблицы.Полуфабрикат Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаПериод Из ТаблицаПериоды Цикл
			
			Если Не СтрокаПериод.Активная
				Или СтрокаПериод.НомерКолонки = 0 Тогда
				Продолжить 
			КонецЕсли;
			
			НоваяСтрокаОбъектТаблица = ОбщегоНазначения.СкопироватьРекурсивно(НоваяСтрокаСтруктураОбъектТаблица);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектТаблица,СтрокаКроссТаблицы);
			
			Если ОбъектТаблица <> ЭтотОбъектТаблица Тогда
				НоваяСтрокаЭтотОбъектТаблица = ОбщегоНазначения.СкопироватьРекурсивно(НоваяСтрокаСтруктураЭтотОбъектТаблица);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтотОбъектТаблица,СтрокаКроссТаблицы);
			КонецЕсли;
			
			Для каждого Элемент Из СтруктураРеквизитовПериода Цикл
				
				НоваяСтрокаОбъектТаблица[Элемент.Значение] = СтрокаПериод[Элемент.Ключ];
				Если ОбъектТаблица <> ЭтотОбъектТаблица Тогда
					НоваяСтрокаЭтотОбъектТаблица[Элемент.Значение] = СтрокаПериод[Элемент.Ключ];
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент Из СтруктураРеквизитов Цикл
				Если НоваяСтрокаСтруктураОбъектТаблица.Свойство(Элемент.Значение) Тогда
					НоваяСтрокаОбъектТаблица[Элемент.Значение] = СтрокаКроссТаблицы[Элемент.Ключ + СтрокаПериод.ИмяКолонки];
				КонецЕсли;
				Если ОбъектТаблица <> ЭтотОбъектТаблица
					И НоваяСтрокаСтруктураЭтотОбъектТаблица.Свойство(Элемент.Значение) Тогда
					НоваяСтрокаЭтотОбъектТаблица[Элемент.Значение] = СтрокаКроссТаблицы[Элемент.Ключ + СтрокаПериод.ИмяКолонки];
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтруктураРеквизитов.Свойство("Формула_")
				И СтруктураРеквизитов.Свойство("Количество_") И НоваяСтрокаОбъектТаблица[СтруктураРеквизитов["Количество_"]] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрокОбъектТаблица.Добавить(НоваяСтрокаОбъектТаблица);
			Если ОбъектТаблица <> ЭтотОбъектТаблица Тогда
				МассивСтрокЭтотОбъектТаблица.Добавить(НоваяСтрокаЭтотОбъектТаблица);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПолуфабрикатыПоДатам <> Неопределено Тогда
		
		Для каждого СтрокаКроссТаблицы Из ПолуфабрикатыПоДатам Цикл
			
			Для каждого СтрокаПериод Из ТаблицаПериоды Цикл
				
				Если Не СтрокаПериод.Активная
					Или СтрокаПериод.НомерКолонки = 0 Тогда
					Продолжить 
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСтруктураЭтотОбъектТаблица,СтрокаКроссТаблицы);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСтруктураОбъектТаблица,СтрокаКроссТаблицы);
				
				Для каждого Элемент Из СтруктураРеквизитовПериода Цикл
						НоваяСтрокаСтруктураЭтотОбъектТаблица[Элемент.Значение] = СтрокаПериод[Элемент.Ключ];
						НоваяСтрокаСтруктураОбъектТаблица[Элемент.Значение] = СтрокаПериод[Элемент.Ключ];
					
				КонецЦикла;
				
				Для каждого Элемент Из СтруктураРеквизитов Цикл
					Если НоваяСтрокаСтруктураЭтотОбъектТаблица.Свойство(Элемент.Значение) Тогда
						НоваяСтрокаСтруктураЭтотОбъектТаблица[Элемент.Значение] = СтрокаКроссТаблицы[Элемент.Ключ + СтрокаПериод.ИмяКолонки];
					КонецЕсли;
					Если НоваяСтрокаСтруктураОбъектТаблица.Свойство(Элемент.Значение) Тогда
						НоваяСтрокаСтруктураОбъектТаблица[Элемент.Значение] = СтрокаКроссТаблицы[Элемент.Ключ + СтрокаПериод.ИмяКолонки];
					КонецЕсли;
				КонецЦикла;
				
				Если НоваяСтрокаСтруктураОбъектТаблица.КоличествоУпаковок <> 0 Тогда
					НоваяСтрокаОбъектТаблица = ОбщегоНазначения.СкопироватьРекурсивно(НоваяСтрокаСтруктураОбъектТаблица);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектТаблица, НоваяСтрокаСтруктураОбъектТаблица);
					Если ОбъектТаблица <> ЭтотОбъектТаблица Тогда
						НоваяСтрокаЭтотОбъектТаблица = ОбщегоНазначения.СкопироватьРекурсивно(НоваяСтрокаСтруктураЭтотОбъектТаблица);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтотОбъектТаблица, НоваяСтрокаСтруктураЭтотОбъектТаблица);
						МассивСтрокЭтотОбъектТаблица.Добавить(НоваяСтрокаЭтотОбъектТаблица);
					КонецЕсли;
					МассивСтрокОбъектТаблица.Добавить(НоваяСтрокаОбъектТаблица);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(МассивСтрокЭтотОбъектТаблица, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(МассивСтрокОбъектТаблица, СтруктураДействий, КэшированныеЗначения);
	
	ЭтотОбъектТаблица.Очистить();
	Для каждого Строка Из МассивСтрокЭтотОбъектТаблица Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъектТаблица.Добавить(), Строка);
	КонецЦикла;
	ОбъектТаблица.Очистить();
	Для каждого Строка Из МассивСтрокОбъектТаблица Цикл
		ЗаполнитьЗначенияСвойств(ОбъектТаблица.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область ПроцедурыСобытийОбъекта

// Процедура, вызываемая из одноименного обработчика события формы объекта плана.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры:
//	 * Объект - ДокументОбъект.ПланЗакупок - 
// 	          - ДокументОбъект.ПланОстатков -
// 	          - ДокументОбъект.ПланПродаж -
// 	          - ДокументОбъект.ПланПродажПоКатегориям -
// 	          - ДокументОбъект.ПланПроизводства -
// 	          - ДокументОбъект.ПланСборкиРазборки -
//  см. справочную информацию по событиям управляемой формы.
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Правила заполнения не были получены при чтении на сервере.
	Если НЕ ЭтоАдресВременногоХранилища(Форма.АдресПравилаЗаполнения) Тогда
		
		Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			Форма.АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(
				Форма.Параметры.ЗначениеКопирования.ПравилоЗаполнения.Выгрузить(),
				Форма.УникальныйИдентификатор);
		Иначе
			ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
			Форма.АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(
				ДокументОбъект.ПравилоЗаполнения.Выгрузить(),
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Пользовательские настройки не были получены при чтении на сервере.
	Если НЕ ЭтоАдресВременногоХранилища(Форма.АдресПользовательскихНастроек) Тогда
		
		Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			ХранилищеПользовательскихНастроек = Форма.Параметры.ЗначениеКопирования.ПользовательскиеНастройки;// ХранилищеЗначения
			
			Форма.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
				ХранилищеПользовательскихНастроек.Получить(),
				Форма.УникальныйИдентификатор);
		Иначе
			Если ДокументОбъект = Неопределено Тогда
			
				ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
			
			КонецЕсли;
			
			ХранилищеПользовательскихНастроек = ДокументОбъект.ПользовательскиеНастройки;// ХранилищеЗначения
			
			Форма.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
				ХранилищеПользовательскихНастроек.Получить(),
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланЗакупок") Тогда
		Форма.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланОстатков") Тогда
		Форма.ТипПлана = Перечисления.ТипыПланов.ПланОстатков;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланПродаж") Тогда
		Форма.ТипПлана = Перечисления.ТипыПланов.ПланПродаж;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланВнутреннихПотреблений") Тогда
		Форма.ТипПлана = Перечисления.ТипыПланов.ПланВнутреннихПотреблений;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланПродажПоКатегориям") Тогда
		Форма.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланСборкиРазборки") Тогда
		Форма.ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы объекта плана.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры,
//                                               см. справочную информацию по событиям управляемой формы.
//  ТекущийОбъект - ДокументОбъект - 
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт 
	
	// Получение правила заполнения и пользовательских настроек из объекта
	Форма.АдресПравилаЗаполнения = ПоместитьВоВременноеХранилище(
		ТекущийОбъект.ПравилоЗаполнения.Выгрузить(),
		Форма.УникальныйИдентификатор);
	Форма.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
		ТекущийОбъект.ПользовательскиеНастройки.Получить(),
		Форма.УникальныйИдентификатор);
	
	ПриЧтенииСозданииНаСервере(Форма);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//                                                 см. справочную информацию по событиям управляемой формы.
//  Отказ           - Булево - 
//  ТекущийОбъект   - ДокументОбъект - 
//  ПараметрыЗаписи - Структура - 
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Форма.АдресПравилаЗаполнения) Тогда
		ТекущийОбъект.ПравилоЗаполнения.Загрузить(ПолучитьИзВременногоХранилища(Форма.АдресПравилаЗаполнения));
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(Форма.АдресПользовательскихНастроек) Тогда
		ТекущийОбъект.ПользовательскиеНастройки = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресПользовательскихНастроек));
	КонецЕсли;
	
	Если ТипЗнч(Форма.СтруктураНастроек) = Тип("Структура") Тогда
		ТекущийОбъект.СтруктураНастроек = Новый ХранилищеЗначения(Форма.СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИсточниковПланирования

// Функция обрабатывает все источники правила заполнения и возвращает итоговый результат.
//
// Параметры:
//  ТипПлана                  - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ОбъектПравилоЗаполнения   - ТаблицаЗначений - ТЧ объекта, содержащее правило заполнения:
//                                  * Источник - СправочникСсылка.ИсточникиДанныхПланирования - 
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - настройки пользователя для документа плана
//  ДополнительныеПараметры   - Структура - Дополнительные параметры, используемые при получении данных из источников.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица итоговых данных преобразованных по правилам из различных источников.
//
Функция ВыбратьДанныеПоПравилам(Знач ТипПлана, Знач ОбъектПравилоЗаполнения, ПользовательскиеНастройки, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Перем Результат;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ОбъектПравилоЗаполнения) <> Тип("ТаблицаЗначений") Тогда
		ПравилоЗаполнения = ОбъектПравилоЗаполнения.Выгрузить();
	Иначе
		ПравилоЗаполнения = ОбъектПравилоЗаполнения; 
	КонецЕсли;
	
	ПравилоЗаполнения.Колонки.Добавить("ДанныеВыбраны", Новый ОписаниеТипов("Булево"));
	ПравилоЗаполнения.Колонки.Добавить("НаборДанных");
	ПравилоЗаполнения.Колонки.Добавить("КомпоновщикНастроекКомпоновкиДанных");
	
	НоваяСтрокаПравилоЗаполнения = ПравилоЗаполнения.Добавить();
	НоваяСтрокаПравилоЗаполнения.ДанныеВыбраны = Ложь;
	НоваяСтрокаПравилоЗаполнения.НаборДанных = Неопределено;
	НоваяСтрокаПравилоЗаполнения.НомерСтроки = 0;
	НоваяСтрокаПравилоЗаполнения.НомерСтрокиРодитель = 99999;
	НоваяСтрокаПравилоЗаполнения.ВариантПреобразования = Перечисления.ВариантыПреобразования.Сложение;
	НоваяСтрокаПравилоЗаполнения.Источник = Справочники.ИсточникиДанныхПланирования.ПустаяСсылка();
	НоваяСтрокаПравилоЗаполнения.ТипЭлемента = 1;
	НоваяСтрокаПравилоЗаполнения.Использование = Истина;
	НоваяСтрокаПравилоЗаполнения.Исключать = Ложь;
	НоваяСтрокаПравилоЗаполнения.ПользовательскиеНастройки = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Период = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Дата = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Присоединять = Ложь;
	
	ПравилоЗаполнения.Сортировать("ТипЭлемента, НомерСтрокиРодитель, НомерСтроки");
	
	// Установка признака использования.
	ВсеПравилаОбработаны = Ложь;
	
	Пока НЕ ВсеПравилаОбработаны Цикл
		
		ВсеПравилаОбработаны = Истина;
		
		Для каждого ЭлементПравилоЗаполнения Из ПравилоЗаполнения Цикл
			
			Если ЭлементПравилоЗаполнения.ТипЭлемента = 1 Тогда
				
				// Отключение использования подчиненных, размещенных в отключенном родителе.
				НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование", ЭлементПравилоЗаполнения.НомерСтроки, Истина));
				
				Если НЕ ЭлементПравилоЗаполнения.Использование Тогда
					
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						НайденнаяСтрока.Использование = Ложь;
						ВсеПравилаОбработаны = Ложь;
						
					КонецЦикла;
					
				Иначе
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						ЭлементПравилоЗаполнения.Использование = Ложь;
						ВсеПравилаОбработаны = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнятьНазначениеВТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.ПараметрыДанных.ВидПлана, "ЗаполнятьНазначениеВТЧ");
	
	// Обработка правил преобразования
	ВсеПравилаОбработаны = Ложь;
	
	Пока НЕ ВсеПравилаОбработаны Цикл
		
		ВсеПравилаОбработаны = Истина;
		
		Для каждого ЭлементПравилоЗаполнения Из ПравилоЗаполнения Цикл
			
			Если НЕ ЭлементПравилоЗаполнения.ДанныеВыбраны И ЭлементПравилоЗаполнения.Использование Тогда
				
				ВсеПравилаОбработаны = Ложь;
				
				Если ЭлементПравилоЗаполнения.ТипЭлемента = 0 Тогда
					
					ПараметрыИсточникаДанных = Новый Структура;
					ПараметрыИсточникаДанных.Вставить("ИсточникДанныхПланирования", 	ЭлементПравилоЗаполнения.Источник);
					ПараметрыИсточникаДанных.Вставить("Исключать", 						ЭлементПравилоЗаполнения.Исключать);
					ПараметрыИсточникаДанных.Вставить("ИзменитьРезультатНа", 			ЭлементПравилоЗаполнения.ИзменитьРезультатНа);
					
					ХранилищеПериода = ЭлементПравилоЗаполнения.Период;// ХранилищеЗначения
					ХранилищеДаты = ЭлементПравилоЗаполнения.Дата;// ХранилищеЗначения
					ДополнительныеПараметрыИсточника = Новый Структура("Период, Дата", ХранилищеПериода.Получить(), ХранилищеДаты.Получить());
					Если ДополнительныеПараметры <> Неопределено Тогда
						Если  ДополнительныеПараметры.Свойство("ПараметрыДанных") Тогда
							ДополнительныеПараметрыИсточника.Вставить("ПараметрыДанных", ДополнительныеПараметры.ПараметрыДанных);
						КонецЕсли;
						Если ДополнительныеПараметры.Свойство("Отбор") Тогда
							ДополнительныеПараметрыИсточника.Вставить("Отбор", ДополнительныеПараметры.Отбор);
						КонецЕсли;
						Если ДополнительныеПараметры.Свойство("Первые25") Тогда
							ДополнительныеПараметрыИсточника.Вставить("Первые25", ДополнительныеПараметры.Первые25);
						КонецЕсли;
					КонецЕсли;
					
					ХранилищеПользовательскихНастроек = ЭлементПравилоЗаполнения.ПользовательскиеНастройки;// ХранилищеЗначения
					
					КомпоновщикНастроекКомпоновкиДанных = Неопределено;
					ЭлементПравилоЗаполнения.НаборДанных = Справочники.ИсточникиДанныхПланирования.ВыбратьДанные(
						ПараметрыИсточникаДанных, 
						ХранилищеПользовательскихНастроек.Получить(), 
						ДополнительныеПараметрыИсточника, 
						КомпоновщикНастроекКомпоновкиДанных);
					ЭлементПравилоЗаполнения.ДанныеВыбраны = Истина;
					ЭлементПравилоЗаполнения.КомпоновщикНастроекКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных;
					
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("НомерСтрокиРодитель", ЭлементПравилоЗаполнения.НомерСтроки);
					Отбор.Вставить("Использование",       Истина);
					Отбор.Вставить("ДанныеВыбраны",       Ложь);
					Отбор.Вставить("Присоединять",        Ложь);
					НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование, ДанныеВыбраны", 
							ЭлементПравилоЗаполнения.НомерСтроки, Истина, Истина));
						
						ПравилоПреобразования = Новый Структура;
						ПравилоПреобразования.Вставить("ВариантПреобразования", ЭлементПравилоЗаполнения.ВариантПреобразования); 
						ПравилоПреобразования.Вставить("Исключать",             ЭлементПравилоЗаполнения.Исключать);
						ПравилоПреобразования.Вставить("Присоединять",          ЭлементПравилоЗаполнения.Присоединять);
						ПравилоПреобразования.Вставить("ВерхнийУровень",        ЭлементПравилоЗаполнения.НомерСтрокиРодитель = 99999);
						
						Если ЭлементПравилоЗаполнения.НомерСтрокиРодитель = 99999 Тогда
							
							ЭлементПравилоЗаполнения.НаборДанных = ПреобразоватьДанные(ТипПлана, НайденныеСтроки, ПравилоПреобразования, 
								ПользовательскиеНастройки, ДополнительныеПараметры, ЗаполнятьНазначениеВТЧ);
							Результат = ЭлементПравилоЗаполнения.НаборДанных;
							
						Иначе
							
							ЭлементПравилоЗаполнения.НаборДанных = ПреобразоватьДанные(ТипПлана, НайденныеСтроки, ПравилоПреобразования,,,ЗаполнятьНазначениеВТЧ);
							ЭлементПравилоЗаполнения.КомпоновщикНастроекКомпоновкиДанных = НайденныеСтроки[0].КомпоновщикНастроекКомпоновкиДанных;
							
						КонецЕсли;
						
						ЭлементПравилоЗаполнения.ДанныеВыбраны = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция получает значения реквизитов сценария
//
// Параметры:
//  Сценарий  - СправочникСсылка.СценарииТоварногоПланирования - Ссылка на сценарий планирования
//  Параметры - Структура - переменная, в которую возвращаются значения реквизитов сценария.
//
// Возвращаемое значение:
//   Структура   - Значения параметров сценария.
//
Функция ПолучитьПараметрыСценария(Сценарий, Параметры = Неопределено) Экспорт 

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "Валюта, Периодичность");
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Параметры.Вставить("Сценарий", Сценарий);
	Для каждого Реквизит Из Реквизиты Цикл
		Параметры.Вставить(Реквизит.Ключ, Реквизит.Значение);
	КонецЦикла;
	
	Возврат Параметры;

КонецФункции

// Функция возвращает в виде структуры все параметры документа плана
//
// Параметры:
//  Объект                - ДокументОбъект - Документ плана
//  Параметры - Структура - переменная, в которую возвращаются значения реквизитов сценария.
//
// Возвращаемое значение:
//   Структура   - Значения параметров сценария.
//
Функция ПолучитьПараметрыПлана(Объект, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура();
		Параметры.Вставить("Ссылка");
		Параметры.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		Параметры.Вставить("ФорматМагазина", Справочники.ФорматыМагазинов.ПустаяСсылка());
		Параметры.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
		Параметры.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Параметры.Вставить("Соглашение");
		Параметры.Вставить("Статус");
		Параметры.Вставить("Периодичность");
		Параметры.Вставить("НачалоПериода");
		Параметры.Вставить("ОкончаниеПериода");
		Параметры.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
		Параметры.Вставить("Менеджер", Справочники.Пользователи.ПустаяСсылка());
		Параметры.Вставить("ВидПлана", Справочники.ВидыПланов.ПустаяСсылка());
		Параметры.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Параметры, Объект);
	ПолучитьПараметрыСценария(Объект.Сценарий, Параметры);
	
	Возврат Параметры;

КонецФункции

// Функция помещает схему преобразования данных в хранилище значения и возвращает адрес.
//
// Параметры:
//  ТипПлана                  - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор, в который возвращается адрес схемы.
//  ЗаполнятьНазначениеВТЧ - Булево
//
// Возвращаемое значение:
//   Строка - адрес временного хранилища значений.
//
Функция ПолучитьАдресСхемыПреобразованияДанных(Знач ТипПлана, Знач УникальныйИдентификатор, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 

	АдресСхемыПреобразованияДанных = "";
	СхемаКомпоновкиДанныхПреобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана,,ЗаполнятьНазначениеВТЧ);
	
	АдресСхемыПреобразованияДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхПреобразование, УникальныйИдентификатор);
	
	Возврат АдресСхемыПреобразованияДанных;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнтерфейсаЗаполненияПоФормулам

// Формирует структуру дополнительных реквизитов
//
// Параметры:
//  Параметры	 - Структура - Значения дополнительных реквизитов.
// 
// Возвращаемое значение:
//  Структура - Структура дополнительных реквизитов.
//
Функция ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры) Экспорт
	
	ЭлементФормыТаблицы 		= Параметры.ЭлементФормыТаблицы;
	Сценарий					= Параметры.СценарийРеквизиты;
	ВидПлана					= Параметры.ВидПланаРеквизиты;
	СоздаватьЭлементыФормы		= Параметры.СоздаватьЭлементыФормы;
	ПутьКРеквизиту				= Параметры.ПутьКРеквизиту;
	ЭтоПланПродажПоКатегориям	= ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ЭтоПланОстатков 			= ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланОстатков;
	ЗаполнятьНазначениеВТЧ		= ВидПлана.ЗаполнятьНазначениеВТЧ;
	
	ИспользоватьПланыПродаж 	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж")
								  И Сценарий.ИспользоватьВПланированииПродаж;
	ИспользоватьПланыЗакупок 	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок")
								  И Сценарий.ИспользоватьВПланированииЗакупок;
	ИспользоватьПланыСборки 				= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки")
											  И Сценарий.ИспользоватьВПланированииСборкиРазборки;
	ИспользоватьПланыВнутреннихПотреблений 	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеВнутреннихПотреблений")
											  И Сценарий.ИспользоватьВПланированииВнутреннихПотреблений;
	
	ИспользоватьПланыРасхода = ИспользоватьПланыПродаж
							Или ИспользоватьПланыСборки
	
							Или ИспользоватьПланыВнутреннихПотреблений;
	
	ИспользоватьПланыПрихода = ИспользоватьПланыЗакупок 
							Или ИспользоватьПланыСборки;
	
	СоздаватьРеквизитСОтбором = ВидПлана.ЗаполнятьПартнера 
		ИЛИ ВидПлана.ЗаполнятьФорматМагазина 
		ИЛИ ВидПлана.ЗаполнятьСклад 
		ИЛИ ВидПлана.ЗаполнятьПодразделение
		ИЛИ (Сценарий.ПланированиеПоНазначениям И НЕ ВидПлана.ЗаполнятьНазначениеВТЧ);
	
	Если СоздаватьЭлементыФормы Тогда
		ГруппаФормыДопПараметрыФормула	 = Параметры.ГруппаФормыДопПараметрыФормула;
		ГруппаФормыДопПараметрыОтклонение= Параметры.ГруппаФормыДопПараметрыОтклонение;
		ГруппаФормыДопПараметры			 = Параметры.ГруппаФормыДопПараметры; // см. СтруктураГруппаФормыДопПараметры
	КонецЕсли;
	
	ДопПараметры 		= Новый Структура();
	
#Область ПланыРасхода
	// Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыРасхода");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru = 'Весь планируемый расход'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru = 'Весь планируемый расход'"));
	ДопПараметр.Вставить("ВходитВОперанд",		"ОсновныеОперанды");
	
	ДопПараметры.Вставить("ПланыРасхода",ДопПараметр);
#КонецОбласти
	
#Область ПланыРасходаСОтбором
	// Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыРасходаСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru = 'Весь планируемый расход*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	СоздаватьРеквизитСОтбором И ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	СоздаватьРеквизитСОтбором И ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru = 'Весь планируемый расход*'"));
	ДопПараметр.Вставить("ВходитВОперанд",		"ОсновныеОперандыСОтбором");
	
	ДопПараметры.Вставить("ПланыРасходаСОтбором",ДопПараметр);
#КонецОбласти
	
#Область ПланыПрихода
	// Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПрихода");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru = 'Весь планируемый приход'"));
	ДопПараметр.Вставить("СоздаватьРеквизит",	ИспользоватьПланыПрихода);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланыПрихода);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru = 'Весь планируемый приход'"));
	ДопПараметр.Вставить("ВходитВОперанд",		"ОсновныеОперанды");
	
	ДопПараметры.Вставить("ПланыПрихода",ДопПараметр);
#КонецОбласти
	
#Область ПланыПриходаСОтбором
	// Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПриходаСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru = 'Весь планируемый приход*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	СоздаватьРеквизитСОтбором И ИспользоватьПланыПрихода);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	СоздаватьРеквизитСОтбором И ИспользоватьПланыПрихода);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru = 'Весь планируемый приход*'"));
	ДопПараметр.Вставить("ВходитВОперанд",		"ОсновныеОперандыСОтбором");
	
	ДопПараметры.Вставить("ПланыПриходаСОтбором",ДопПараметр);
#КонецОбласти

#Область КорректировкиПлановыхПотребностей
	// Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"КорректировкиПлановыхПотребностей");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru = 'Корректировки плановых потребностей'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru = 'Корректировки плановых потребностей'"));
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыПланы");
	
	ДопПараметры.Вставить("КорректировкиПлановыхПотребностей", ДопПараметр);
#КонецОбласти
	
#Область КорректировкиПлановыхПотребностейСОтбором
	// Свойства реквизита формы
	ДопПараметр 		= Новый Структура();
	ДопПараметр.Вставить("Имя", 				"КорректировкиПлановыхПотребностейСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru = 'Корректировки плановых потребностей*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	СоздаватьРеквизитСОтбором И ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Свойства операнда
	ДопПараметр.Вставить("СоздаватьОперанд", 	СоздаватьРеквизитСОтбором И ИспользоватьПланыРасхода);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru = 'Корректировки плановых потребностей*'"));
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыПланыСОтбором");
	
	ДопПараметры.Вставить("КорректировкиПлановыхПотребностейСОтбором", ДопПараметр);
#КонецОбласти

	Документы.ПланПродажПоКатегориям.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	Документы.ПланПродаж.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	Документы.ПланВнутреннихПотреблений.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		Документы.ПланСборкиРазборки.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	КонецЕсли;
	Документы.ПланЗакупок.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	Документы.ПланОстатков.ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры);
	
#Область Формула
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"Формула");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Строка"));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru = 'Формула'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru = 'Формула'"));
	
	ДопПараметры.Вставить("Формула", ДопПараметр);
#КонецОбласти
	
#Область ФормулаВычисление
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"ФормулаВычисление");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Строка"));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru = 'Формула'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	Если СоздаватьЭлементыФормы Тогда
		// Свойства элемента формы
		ДопПараметр.Вставить("ИмяЭлемента", 			ЭлементФормыТаблицы + ДопПараметр.Имя);
		ДопПараметр.Вставить("ТипЭлемента", 			Тип("ПолеФормы"));
		ДопПараметр.Вставить("Родитель", 				ГруппаФормыДопПараметры.Имя);
		ДопПараметр.Вставить("Вид", 					"ПолеНадписи");
		ДопПараметр.Вставить("ПутьКДанным", 			?(ПустаяСтрока(ПутьКРеквизиту), "", ПутьКРеквизиту + ".") + ДопПараметр.Имя);
		ДопПараметр.Вставить("СоздаватьЭлемент", 		Истина);
		
		//Действие
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("Нажатие", 		"Подключаемый_УстановитьПроизвольнуюФормулу");
		ДопПараметр.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли;
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru = 'Вычисление'"));
	
	ДопПараметры.Вставить("ФормулаВычисление", ДопПараметр);
#КонецОбласти

#Область ФормулаПредставление
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"ФормулаПредставление");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Строка"));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru = 'Формула'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	Если СоздаватьЭлементыФормы Тогда
		// Свойства элемента формы
		ДопПараметр.Вставить("ИмяЭлемента", 		ЭлементФормыТаблицы + ДопПараметр.Имя);
		ДопПараметр.Вставить("ТипЭлемента", 		Тип("ПолеФормы"));
		ДопПараметр.Вставить("Родитель", 			ГруппаФормыДопПараметрыФормула.Имя);
		ДопПараметр.Вставить("Вид", 				"ПолеВвода");
		ДопПараметр.Вставить("ПутьКДанным", 		?(ПустаяСтрока(ПутьКРеквизиту), "", ПутьКРеквизиту + ".") + ДопПараметр.Имя);
		ДопПараметр.Вставить("КартинкаШапки", 		БиблиотекаКартинок.Изменить);
		ДопПараметр.Вставить("РедактированиеТекста",Ложь);
		ДопПараметр.Вставить("ТолькоПросмотр", 		Ложь);
		ДопПараметр.Вставить("СоздаватьЭлемент", 	ГруппаФормыДопПараметрыФормула.Вид = ВидГруппыФормы.ГруппаКолонок);
		ДопПараметр.Вставить("Ширина", 				10);
		ДопПараметр.Вставить("КнопкаОткрытия", 		Истина);
		ДопПараметр.Вставить("КнопкаВыбора", 		Ложь);
		
		//Действие
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("Открытие", 		"Подключаемый_УстановитьПроизвольнуюФормулу");
		ДопПараметр.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли;
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru = 'Формула'"));
	
	ДопПараметры.Вставить("ФормулаПредставление", ДопПараметр);
#КонецОбласти
	
#Область Отклонение	
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"Отклонение");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru = 'Отклонение от формулы'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", Истина);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	Если СоздаватьЭлементыФормы Тогда
		// Свойства элемента формы
		ДопПараметр.Вставить("ИмяЭлемента", 		ЭлементФормыТаблицы + ДопПараметр.Имя);
		ДопПараметр.Вставить("ТипЭлемента", 		Тип("ПолеФормы"));
		ДопПараметр.Вставить("Родитель", 			ГруппаФормыДопПараметрыОтклонение.Имя);
		ДопПараметр.Вставить("Вид", 				"ПолеВвода");
		ДопПараметр.Вставить("ПутьКДанным", 		?(ПустаяСтрока(ПутьКРеквизиту), "", ПутьКРеквизиту + ".") + ДопПараметр.Имя);
		ДопПараметр.Вставить("КартинкаШапки", 		Новый Картинка());
		ДопПараметр.Вставить("РедактированиеТекста",Ложь);
		ДопПараметр.Вставить("ТолькоПросмотр", 		ГруппаФормыДопПараметрыОтклонение.Вид = ВидГруппыФормы.ОбычнаяГруппа);
		ДопПараметр.Вставить("СоздаватьЭлемент",	Истина);
		ДопПараметр.Вставить("Ширина", 				10);
		ДопПараметр.Вставить("КнопкаОткрытия", 		Ложь);
		ДопПараметр.Вставить("КнопкаВыбора", 		Ложь);
	КонецЕсли;
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", Ложь);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru = 'Отклонение от формулы'"));
	
	ДопПараметры.Вставить("Отклонение", ДопПараметр);
#КонецОбласти
	
	Возврат ДопПараметры;
	
КонецФункции

// Создает дополнительные реквизиты формы
//
// Параметры:
// Форма             - ФормаКлиентскогоПриложения - Форма документа
// Параметры         - Структура - Значения дополнительных реквизитов.
//
Процедура ОбновитьСтруктуруВыводаТаблицы(Форма, Параметры) Экспорт

	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты 	 = Новый Массив();
	
	Для каждого СтруктураПоля Из Параметры.Поля Цикл
		
		СтруктураПоля = СтруктураПоля.Значение; // см. СтруктураПоля
		
		РеквизитыТаблицыПлана = Форма.ПолучитьРеквизиты(СтруктураПоля.Путь);
		
		// Удаление реквизитов
		Для каждого Реквизит Из РеквизитыТаблицыПлана Цикл
			Если Реквизит.Имя = СтруктураПоля.Имя Тогда
				УдаляемыеРеквизиты.Добавить(?(ПустаяСтрока(СтруктураПоля.Путь), "" ,СтруктураПоля.Путь + ".") + СтруктураПоля.Имя);
			КонецЕсли;
		КонецЦикла;
		
		// Добавление реквизитов
		Если СтруктураПоля.СоздаватьРеквизит Тогда
			Реквизит = Новый РеквизитФормы(СтруктураПоля.Имя, СтруктураПоля.Тип, СтруктураПоля.Путь, СтруктураПоля.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		// Удаление элементов
		Если СтруктураПоля.Свойство("ИмяЭлемента") Тогда
			УдаляемыйЭлемент = Форма.Элементы.Найти(СтруктураПоля.ИмяЭлемента);
		Иначе
			УдаляемыйЭлемент = Неопределено;
		КонецЕсли;
		
		Если УдаляемыйЭлемент <> Неопределено Тогда
			Форма.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Создание элементов
	Для каждого СтруктураПоля Из Параметры.Поля Цикл
		
		СтруктураПоля = СтруктураПоля.Значение; // см. СтруктураПоля
		Если СтруктураПоля.Свойство("СоздаватьЭлемент") И СтруктураПоля.СоздаватьЭлемент Тогда
			
			Родитель = Форма.Элементы[СтруктураПоля.Родитель];
			ЭлементФормы = Форма.Элементы.Добавить(СтруктураПоля.ИмяЭлемента, СтруктураПоля.ТипЭлемента, Родитель); // ПолеФормы, РасширениеПоляФормыДляПоляНадписи - 
			Если СтруктураПоля.Вид = "ПолеНадписи" Тогда
				ЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи;
				ЭлементФормы.Гиперссылка = Истина;
				ЗаполнитьЗначенияСвойств(ЭлементФормы, СтруктураПоля, "Заголовок,ПутьКДанным");
			Иначе
				ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
				ЗаполнитьЗначенияСвойств(ЭлементФормы, СтруктураПоля, "Заголовок,ПутьКДанным,КартинкаШапки,Ширина,КнопкаОткрытия,КнопкаВыбора,РедактированиеТекста,ТолькоПросмотр");
			КонецЕсли;
			
			Если СтруктураПоля.Свойство("СтруктураДействий") Тогда
				Для каждого Действие Из СтруктураПоля.СтруктураДействий Цикл
					ЭлементФормы.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * ТипЭлемента - Тип - 
// * ВходитВОперанд - Булево - 
// * ЗаголовокОперанда - Строка -
// * СоздаватьОперанд - Булево -
// * УдалятьРеквизитыТаблицы - Булево -
// * СоздаватьРеквизит - Булево -
// * Заголовок - Строка -
// * Путь - Строка -
// * Вид - Строка -
// * Тип - ОписаниеТипов - 
// * Имя - Строка -
Функция СтруктураПоля() Экспорт
	
	СтруктураПоля = Новый Структура();
	СтруктураПоля.Вставить("Имя");
	СтруктураПоля.Вставить("Тип");
	СтруктураПоля.Вставить("Вид");
	СтруктураПоля.Вставить("Путь");
	СтруктураПоля.Вставить("Заголовок");
	СтруктураПоля.Вставить("СоздаватьРеквизит");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы");
	СтруктураПоля.Вставить("СоздаватьОперанд");
	СтруктураПоля.Вставить("ЗаголовокОперанда");
	СтруктураПоля.Вставить("ВходитВОперанд");
	СтруктураПоля.Вставить("ТипЭлемента");
	
	Возврат СтруктураПоля
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * Заголовок - Строка -
// * КолонкаЗначения - Строка -
Функция СтруктураДопПоля() Экспорт
	
	СтруктураДопПоля = Новый Структура();
	СтруктураДопПоля.Вставить("Заголовок");
	СтруктураДопПоля.Вставить("КолонкаЗначения");
	
	Возврат СтруктураДопПоля
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * Вид - ВидГруппыФормы - 
// * Имя - Строка -
Функция СтруктураГруппаФормыДопПараметры(Имя, Вид)
	
	СтруктураПоля = Новый Структура();
	СтруктураПоля.Вставить("Имя", Имя);
	СтруктураПоля.Вставить("Вид", Вид);
	
	Возврат СтруктураПоля
	
КонецФункции

// Инициализация дерева операторов
//
// Параметры:
// Дерево             - ДеревоЗначений - Дерево значений.
//
Процедура ИнициализироватьДереваОператоров(Дерево) Экспорт
	
	ПредставлениеГруппы = НСтр("ru = 'Операторы'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Операторы", ПредставлениеГруппы);
	
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "+", " + ", "+");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "-", " - ", "-");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "*", " * ", "*");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "/", " / ", "/");
	
	ПредставлениеГруппы = НСтр("ru = 'Логические операторы и константы'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "ЛогическиеОператорыИКонстанты", ПредставлениеГруппы);
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<",  " < ",  "<");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ">",  " > ",  ">");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<=", " <= ", "<=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ">=", " >= ", ">=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "=",  " = ",  "=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<>", " <> ", "<>");
	
	Идентификатор = "И";
	КонструкцияДляВставки = " " + "И" + " ";
	Представление = НСтр("ru = 'И'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "ИЛИ";
	КонструкцияДляВставки = " " + "ИЛИ" + " ";
	Представление = НСтр("ru = 'ИЛИ'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "НЕ";
	КонструкцияДляВставки = " " + "НЕ" + " ";
	Представление = НСтр("ru = 'НЕ'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "ИСТИНА";
	КонструкцияДляВставки = " " + "ИСТИНА" + " ";
	Представление = НСтр("ru = 'ИСТИНА'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	Идентификатор = "ЛОЖЬ";
	КонструкцияДляВставки = " " + "ЛОЖЬ" + " ";
	Представление = НСтр("ru = 'ЛОЖЬ'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
	ПредставлениеГруппы = НСтр("ru = 'Функции'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Функции", ПредставлениеГруппы);
	
	Идентификатор = "Макс";
	ПредставлениеПараметра1 = НСтр("ru = '<Значение 1>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Значение 2>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Макс(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Максимум'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 2);
	
	Идентификатор = "Мин";
	ПредставлениеПараметра1 = НСтр("ru = '<Значение 1>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Значение 2>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Мин(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Минимум'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 2);
	
	Идентификатор = "Окр";
	ПредставлениеПараметра1 = НСтр("ru = '<Округляемое значение>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Количество знаков после запятой>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"Окр(%1, %2)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2);
	Представление = НСтр("ru = 'Округление'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 2);
	
	Идентификатор = "Цел";
	КонструкцияДляВставки = "Цел()";
	Представление = НСтр("ru = 'Целая часть'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "?";
	ПредставлениеПараметра1 = НСтр("ru = '<Логическое выражение>'");
	ПредставлениеПараметра2 = НСтр("ru = '<Значение если результат условия истина>'");
	ПредставлениеПараметра3 = НСтр("ru = '<Значение если результат условия ложь>'");
	КонструкцияДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"?(%1, %2, %3)",
		ПредставлениеПараметра1,
		ПредставлениеПараметра2,
		ПредставлениеПараметра3);
	Представление = НСтр("ru = 'Условие'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 3);
	
	Идентификатор = "ЗначениеКолонки";
	КонструкцияДляВставки = "ЗначениеКолонки()";
	Представление = НСтр("ru = 'Значение колонки'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление,, 1);
	
	Идентификатор = "НомерТекущейКолонки";
	КонструкцияДляВставки = "НомерТекущейКолонки()";
	Представление = НСтр("ru = 'Номер текущей колонки'");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, Идентификатор, КонструкцияДляВставки, Представление);
	
КонецПроцедуры

Функция ПараметрыСценария(Сценарий) Экспорт
	
	ПараметрыСценария = "ИспользоватьВПланированииПродаж, ИспользоватьВПланированииПроизводства, ИспользоватьВПланированииЗакупок, 
		|ИспользоватьВПланированииОстатков, ИспользоватьВПланированииСборкиРазборки, ИспользоватьДляПланированияМатериалов, 
		|ИспользоватьВПланированииПродажПоКатегориям, ИспользоватьВПланированииВнутреннихПотреблений, 
		|ИспользоватьРасчетПоСкоростиПродаж, ПланированиеПоНазначениям, Периодичность";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииПродаж,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланЗакупок)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииЗакупок,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииСборкиРазборки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланВнутреннихПотреблений)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииВнутреннихПотреблений,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииПроизводства,
	|	СценарииТоварногоПланирования.ИспользоватьДляПланированияМатериалов КАК ИспользоватьДляПланированияМатериалов,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродажПоКатегориям)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииПродажПоКатегориям,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьВПланированииОстатков,
	|	СценарииТоварногоПланирования.ИспользоватьРасчетПоСкоростиПродаж КАК ИспользоватьРасчетПоСкоростиПродаж,
	|	СценарииТоварногоПланирования.ПланированиеПоНазначениям КАК ПланированиеПоНазначениям,
	|	СценарииТоварногоПланирования.Периодичность КАК Периодичность
	|ИЗ
	|	Справочник.СценарииТоварногоПланирования КАК СценарииТоварногоПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|		ПО ВидыПланов.Владелец = СценарииТоварногоПланирования.Ссылка
	|ГДЕ
	|	СценарииТоварногоПланирования.Ссылка = &Сценарий
	|
	|СГРУППИРОВАТЬ ПО
	|	СценарииТоварногоПланирования.ИспользоватьДляПланированияМатериалов,
	|	СценарииТоварногоПланирования.ИспользоватьРасчетПоСкоростиПродаж,
	|	СценарииТоварногоПланирования.Периодичность,
	|	СценарииТоварногоПланирования.ПланированиеПоНазначениям";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Выборка = Запрос.Выполнить().Выбрать();
	ВЫборка.Следующий();
	СценарийРеквизиты = Новый Структура(ПараметрыСценария);
	Для Каждого ПараметрСценария Из СценарийРеквизиты Цикл
		СценарийРеквизиты.Вставить(ПараметрСценария.Ключ, Выборка[ПараметрСценария.Ключ]);
	КонецЦикла;
	Возврат СценарийРеквизиты;
	
КонецФункции

// Инициализация дополнительных параметров
//
// Параметры:
// ДополнительныеПараметрыТовары             - Структура - Структура доп. параметров
// ДополнительныеПараметрыТоварыПоПериодам   - Структура - Структура доп. параметров по периодам
// Параметры             - Структура - Структура параметров:
//  * Форма - ФормаКлиентскогоПриложения - 
//  * Периоды - ТаблицаЗначений - 
//    * Период - СтандартныйПериод - 
Процедура ИнициализироватьДопПараметры(ДополнительныеПараметрыТовары, ДополнительныеПараметрыТоварыПоПериодам, Параметры) Экспорт

	ДополнительныеПараметрыПоПериодам 	= Параметры.Форма.Элементы.ТоварыПоПериодамДополнительныеПараметры;
	ДополнительныеПараметрыФормула 		= Параметры.Форма.Элементы.ТоварыДополнительныеПараметрыФормула;
	ДополнительныеПараметрыОтклонение 	= Параметры.Форма.Элементы.ТоварыДополнительныеПараметрыОтклонение;
	ДополнительныеПараметры 			= Параметры.Форма.Элементы.ТоварыДополнительныеПараметры;
	
	СценарийРеквизиты = ПараметрыСценария(Параметры.Форма.Объект.Сценарий);
	
	ВидПланаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Форма.Объект.ВидПлана, 
		"ТипПлана, ЗаполнятьПартнера, ЗаполнятьСоглашение, ЗаполнятьСклад, ЗаполнятьПодразделение, ЗаполнятьМенеджера,
		|ЗаполнятьФорматМагазина, ЗаполнятьНазначениеВТЧ");
	
	ПараметрыПолей = Новый Структура();
	ПараметрыПолей.Вставить("ПутьКРеквизиту", 					Параметры.ПутьКРеквизиту);
	ПараметрыПолей.Вставить("ЭлементФормыТаблицы", 				Параметры.ЭлементФормыТаблицы);
	ПараметрыПолей.Вставить("СценарийРеквизиты", 				СценарийРеквизиты);
	ПараметрыПолей.Вставить("ВидПланаРеквизиты", 				ВидПланаРеквизиты);
	ПараметрыПолей.Вставить("СоздаватьЭлементыФормы", 			Истина);
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыФормула", 	СтруктураГруппаФормыДопПараметры(ДополнительныеПараметрыФормула.Имя, ДополнительныеПараметрыФормула.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыОтклонение",СтруктураГруппаФормыДопПараметры(ДополнительныеПараметрыОтклонение.Имя, ДополнительныеПараметрыОтклонение.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметры", 			СтруктураГруппаФормыДопПараметры(ДополнительныеПараметры.Имя, ДополнительныеПараметры.Вид));
	Если Параметры.Свойство("ХозяйственнаяОперация") Тогда
		ПараметрыПолей.Вставить("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	КонецЕсли;
	Если Параметры.Свойство("ТипПроизводственногоПроцесса") Тогда
		ПараметрыПолей.Вставить("ТипПроизводственногоПроцесса", Параметры.ТипПроизводственногоПроцесса);
	КонецЕсли;
	
	ДополнительныеПараметрыТовары = Планирование.ДополнительныеПараметрыДляРасчетаПоФормуле(ПараметрыПолей);

	
	ПараметрыПолей = Новый Структура();
	ПараметрыПолей.Вставить("ПутьКРеквизиту", 					"");
	ПараметрыПолей.Вставить("ЭлементФормыТаблицы", 				Параметры.ЭлементФормыТаблицыПоПериодам);
	ПараметрыПолей.Вставить("СценарийРеквизиты", 				СценарийРеквизиты);
	ПараметрыПолей.Вставить("ВидПланаРеквизиты", 				ВидПланаРеквизиты);
	ПараметрыПолей.Вставить("СоздаватьЭлементыФормы", 			Истина);
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыФормула", 	СтруктураГруппаФормыДопПараметры(ДополнительныеПараметрыПоПериодам.Имя, ДополнительныеПараметрыПоПериодам.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметрыОтклонение",СтруктураГруппаФормыДопПараметры(ДополнительныеПараметрыПоПериодам.Имя, ДополнительныеПараметрыПоПериодам.Вид));
	ПараметрыПолей.Вставить("ГруппаФормыДопПараметры", 			СтруктураГруппаФормыДопПараметры(ДополнительныеПараметрыПоПериодам.Имя, ДополнительныеПараметрыПоПериодам.Вид));
	Если Параметры.Свойство("ХозяйственнаяОперация") Тогда
		ПараметрыПолей.Вставить("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	КонецЕсли;
	Если Параметры.Свойство("ТипПроизводственногоПроцесса") Тогда
		ПараметрыПолей.Вставить("ТипПроизводственногоПроцесса", Параметры.ТипПроизводственногоПроцесса);
	КонецЕсли;
	
	ДополнительныеПараметрыТоварыПоПериодам = Планирование.ДополнительныеПараметрыДляРасчетаПоФормуле(ПараметрыПолей);
	
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыЗаполненияПоФормулам

// Возвращает таблицу данных рассчитанных по формуле
//
// Параметры:
//  Параметры  - Структура - Настройки расчета:
//  * ТипПлана - ПеречислениеСсылка.ТипыПланов - 
//  * ВидПлана - СправочникСсылка.ВидыПланов - 
//  * Периоды - См. ТаблицаПериоды
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица с данными рассчитанными по формуле.
//
Функция ЗаполнитьПоФормуле(Параметры) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИменНаборов = Параметры.МассивИменНаборов;
	
	ТипПлана = Параметры.ТипПлана;
	ВидПлана = Параметры.ВидПлана;
	ЗаполнятьНазначениеВТЧ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьНазначениеВТЧ");
	
	НаборыДанныхОбъекты = Неопределено;
	Если НЕ Параметры.Свойство("НаборыДанныхОбъекты", НаборыДанныхОбъекты) ИЛИ ТипЗнч(НаборыДанныхОбъекты) <> Тип("Структура") Тогда
		НаборыДанныхОбъекты = Новый Структура;
	КонецЕсли; 
	Если Параметры.Свойство("ИмяКолонкиРезультата") Тогда
		ИмяКолонкиРезультата = Параметры.ИмяКолонкиРезультата;
	Иначе
		ИмяКолонкиРезультата = "Количество";
	КонецЕсли;
	
	МакетыОперандов = МакетыОперандовПлана();
	
	СКД_Преобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана, Истина, ЗаполнятьНазначениеВТЧ);
	
	ИменаОперандов = "";
	
	// Заполнение операндов
	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	
	Для каждого ИмяОперанда Из МассивИменНаборов Цикл
	
		СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
		
		Если СКД_Операнда = Неопределено 
			ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
			ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ИмяОперанда = "ПланыПроизводстваПотребностьВПолуфабрикатах"
			Или ИмяОперанда = "ПланыПроизводстваПотребностьВПолуфабрикатахСОтбором" 
			Или ИмяОперанда = "ПланыПроизводстваМатериалы" 
			Или ИмяОперанда = "ПланыПроизводстваМатериалыСОтбором" Тогда
			СКД_Операнда.НаборыДанных[0].Запрос = Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь) +
				РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
					СКД_Операнда.НаборыДанных[0].Запрос,
					"ПланыПотребленияМатериаловОборотыПодстановкаОсновногоСпособаОбеспечения",
					"ПланыПотребленияМатериаловОбороты.Номенклатура,ПланыПотребленияМатериаловОбороты.Характеристика,ПланыПотребленияМатериаловОбороты.Склад");
			
		ИначеЕсли ИмяОперанда = "ДоляДнейНаличияТовараНаОстатках" Тогда
			
			ДоляДнейНаличияТовараНаОстаткахТекстЗапросаПереопределение(
				СКД_Операнда.НаборыДанных[ИмяОперанда], Параметры);
			
		КонецЕсли;
		
		ТекстЗапроса = СКД_Операнда.НаборыДанных[0].Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПериодСтрока", ПолучитьПериодичностьТекстом(Параметры.Периодичность));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПериодДень", ПолучитьПериодичностьРегистраТекстом(Параметры.Периодичность));
		СКД_Операнда.НаборыДанных[0].Запрос = ТекстЗапроса;
		
		ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхОбъединение, СКД_Операнда, ИменаОперандов);
		
	КонецЦикла;
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	Если Параметры.Свойство("Сценарий")
		И Не Параметры.Свойство("СтатусыСценария") Тогда
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		СписокСтатусов.Добавить(Перечисления.СтатусыПланов.Утвержден);
		
		Параметры.Вставить("СтатусыСценария", СписокСтатусов);
	
	КонецЕсли; 
		
	Параметры.Вставить("НачалоПериодаНоль", Дата("00010101"));
	
	Если Параметры.Свойство("ЗаполнятьСостав") Тогда
	
		ЗаполняемаяТЧ.Очистить();
		// Заполняем состав
		
		МассивИменНаборовЗаполнения = Параметры.МассивИменНаборовЗаполнения;
		
		СКД_Заполнения = ПолучитьСхемуПреобразованияДанных(ТипПлана, Ложь, ЗаполнятьНазначениеВТЧ);
		НаборДанныхОбъединение = СКД_Заполнения.НаборыДанных.Объединение;
		
		
		Для каждого ИмяОперанда Из МассивИменНаборовЗаполнения Цикл
			
			СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
			
			Если СКД_Операнда = Неопределено 
				ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
				ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
				ИЛИ (Параметры.ВариантЗаполненияСостава = "Формула"
				И МассивИменНаборов.Найти(ИмяОперанда) = Неопределено) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ИмяОперанда = "ЦеныНоменклатуры" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследних.Упаковка",
					"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "ЦеныНоменклатурыПоставщиков" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "МинимальнаяЦенаПоставщика" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос = ТекстЗапроса;
			КонецЕсли;
			
			ТекстЗапроса = СКД_Операнда.НаборыДанных[0].Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПериодСтрока", ПолучитьПериодичностьТекстом(Параметры.Периодичность));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПериодДень", ПолучитьПериодичностьРегистраТекстом(Параметры.Периодичность));
			СКД_Операнда.НаборыДанных[0].Запрос = ТекстЗапроса;
			
			ДобавитьНаборОперандаВСхемуПреобразования(СКД_Заполнения, НаборДанныхОбъединение, СКД_Операнда);
			
		КонецЦикла;
		
		СКД_Заполнения.ВычисляемыеПоля.Очистить(); // удаляем, т.к. не известно, есть ли поля выражения в источниках
		УдалитьНаборыНеИспользуемыеДляФормул(СКД_Заполнения);
		ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Заполнения, ВидПлана);
		
		ЗаполняемаяТЧ = ТаблицаРезультата();
		
		ВыполнитьСхемуПреобразования(СКД_Заполнения, Параметры, ЗаполняемаяТЧ);
		
	КонецЕсли;
	
	// Дополняем таблицу состава всеми периодами
	Если ЗаполняемаяТЧ.Колонки.Найти("ПериодСостава") = Неопределено
		И ЗаполняемаяТЧ.Колонки.Найти("Период") = Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("ПериодСостава", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ЗаполняемаяТЧ.ЗаполнитьЗначения(Параметры.НачалоПериодаСмещения, "ПериодСостава");
		
		// Копируем строки в каждый период плана
		Если Параметры.Периоды.Количество() > 1 Тогда
			
			ОдинПериод = ЗаполняемаяТЧ.Скопировать();
			
			Для каждого СтрокаТЧ Из ОдинПериод Цикл
				Для каждого Период Из Параметры.Периоды Цикл
					Если Период.ДатаНачала = Параметры.НачалоПериодаСмещения Тогда
						Продолжить;
					КонецЕсли; 
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.ПериодСостава = Период.ДатаНачала;
				КонецЦикла; 
			КонецЦикла; 
		
		КонецЕсли;
		
	Иначе
		
		Если ЗаполняемаяТЧ.Колонки.Найти("Период") <> Неопределено И ЗаполняемаяТЧ.Колонки.Найти("ПериодСостава") = Неопределено Тогда
			ЗаполняемаяТЧ.Колонки["Период"].Имя = "ПериодСостава";
		КонецЕсли;
		
		Если Параметры.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
			КолонкиПоиска = "ТоварнаяКатегория, ПериодСостава";
		Иначе
			КолонкиПоиска = "Номенклатура, ПериодСостава";
		КонецЕсли;
		ХарактеристикиИспользуются = ЗаполняемаяТЧ.Колонки.Найти("Характеристика") <> Неопределено;
		Если ХарактеристикиИспользуются Тогда
			КолонкиПоиска = КолонкиПоиска + ", Характеристика";
		КонецЕсли;
		СтруктураПоиска = Новый Структура(КолонкиПоиска);
		ЗаполняемаяТЧ.Индексы.Добавить(КолонкиПоиска);
		ЗаполняемаяТЧКопия = ЗаполняемаяТЧ.Скопировать();
		
		Для каждого СтрокаТЧ Из ЗаполняемаяТЧКопия Цикл
			Для каждого Период Из Параметры.Периоды Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
				СтруктураПоиска.ПериодСостава = Период.ДатаНачала;
				
				Если ЗаполняемаяТЧКопия.НайтиСтроки(СтруктураПоиска).Количество()>0
					Или ЗаполняемаяТЧ.НайтиСтроки(СтруктураПоиска).Количество()>0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ЗаполняемаяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				
			КонецЦикла; 
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаполняемаяТЧ.Колонки.Найти("LineNumber") <> Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.LineNumber.Имя = "НомерСтроки";
	КонецЕсли;
	Если ЗаполняемаяТЧ.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(5,0));
		
		НомерСтроки = 0;
		Для каждого СтрокаТЧ Из ЗаполняемаяТЧ Цикл
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаТЧ.НомерСтроки = НомерСтроки;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ДополнитьСвязиДляЦенообразования25 = Ложь;
	
	НаборДанныхПрисоединение = СКД_Преобразование.НаборыДанных.Найти("Присоединение");
	Если Параметры.Свойство("ОбновлятьПоказатели") 
		И Параметры.Свойство("МассивИменНаборовПрисоединения")
		И НаборДанныхПрисоединение <> Неопределено Тогда
		
		МассивИменНаборовПрисоединения = Параметры.МассивИменНаборовПрисоединения;
		
		Для каждого ИмяОперанда Из МассивИменНаборовПрисоединения Цикл
			
			СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
			
			Если СКД_Операнда = Неопределено 
				ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
				ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ИмяОперанда = "ЦеныНоменклатуры" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыСрезПоследних.Упаковка",
					"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатуры.Запрос = ТекстЗапроса;
					Если СтрНайти(ТекстЗапроса, Метаданные.РегистрыСведений.ЦеныНоменклатуры25.Имя) <> 0 Тогда
						ДополнитьСвязиДляЦенообразования25 = Истина;
					КонецЕсли;
			ИначеЕсли ИмяОперанда = "ЦеныНоменклатурыПоставщиков" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.ЦеныНоменклатурыПоставщиков.Запрос = ТекстЗапроса;
			ИначеЕсли ИмяОперанда = "МинимальнаяЦенаПоставщика" Тогда
				ТекстЗапроса = СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
					"&ТекстЗапросаКоэффициентУпаковки",
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
					СКД_Операнда.НаборыДанных.МинимальнаяЦенаПоставщика.Запрос = ТекстЗапроса;
			КонецЕсли;
				
			ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхПрисоединение, СКД_Операнда, ИменаОперандов);
			
		КонецЦикла; 
	КонецЕсли;
	
	Если ДополнитьСвязиДляЦенообразования25 И МассивИменНаборовПрисоединения.Количество() = 1 Тогда
		ДополнитьНастройкиДляЦенообразования25(СКД_Преобразование, ЗаполняемаяТЧ);
	КонецЕсли;
	
	УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование);
	ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Преобразование, ВидПлана);
	
	Для каждого Поле Из СКД_Преобразование.НаборыДанных.ТаблицаСостава.Поля Цикл
	
		Если ЗаполняемаяТЧ.Колонки.Найти(Поле.Поле) = Неопределено Тогда
			ЗаполняемаяТЧ.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
		КонецЕсли; 
	
	КонецЦикла; 
	НаборыДанныхОбъекты.Вставить("ТаблицаСостава", ЗаполняемаяТЧ);
	
	ТаблицаРезультата = ТаблицаРезультата();
	
	ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, ТаблицаРезультата, НаборыДанныхОбъекты);
	
	// Обрабатываем расчет специальных полей
	Если ТаблицаРезультата.Колонки.Найти("Номенклатура") <> Неопределено
		И (ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориям") <> Неопределено
		ИЛИ ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено) Тогда
		
		ИменаПолейПоказателей = Новый Массив;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориям") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориям");
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориямСОтбором");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.ПериодСостава.Имя = "Период";
		
		Документы.НормативРаспределенияПлановПродажПоКатегориям.ПересчитатьПоказателиПоНормативамРаспределения(ТаблицаРезультата, ИменаПолейПоказателей);
		
		Если ТаблицаРезультата.Колонки.Найти("НомерСтроки") <> Неопределено Тогда 
			ТаблицаРезультата.Сортировать("НомерСтроки");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.Период.Имя = "ПериодСостава";
		
	ИначеЕсли ТаблицаРезультата.Колонки.Найти("Номенклатура") <> Неопределено
		И (ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено
		ИЛИ ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором") <> Неопределено) Тогда
		
		ИменаПолейПоказателей = Новый Массив;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориямПоСкоростиПродаж");
		КонецЕсли;
		Если ТаблицаРезультата.Колонки.Найти("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором") <> Неопределено Тогда 
			ИменаПолейПоказателей.Добавить("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.ПериодСостава.Имя = "Период";
		
		Документы.НормативРаспределенияПлановПродажПоКатегориям.ПересчитатьПоказателиПоНормативамРаспределения(ТаблицаРезультата, ИменаПолейПоказателей, Ложь);
		
		Если ТаблицаРезультата.Колонки.Найти("НомерСтроки") <> Неопределено Тогда 
			ТаблицаРезультата.Сортировать("НомерСтроки");
		КонецЕсли;
		
		ТаблицаРезультата.Колонки.Период.Имя = "ПериодСостава";
		
	КонецЕсли;
	
	Если ТаблицаРезультата.Колонки.Найти("ПланыПродаж") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыВнутреннихПотреблений") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыРазборкиКомплекты") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыСборкиКомплектующие") <> Неопределено Тогда
		
		ТаблицаРезультата.Колонки.Добавить("ПланыРасхода", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
		ИменаОперандов = ИменаОперандов + ", ПланыРасхода";
		
	КонецЕсли;
	
	Если ТаблицаРезультата.Колонки.Найти("ПланыПродажСОтбором") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыВнутреннихПотребленийСОтбором") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыРазборкиКомплектыСОтбором") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыСборкиКомплектующиеСОтбором") <> Неопределено Тогда
		
		ТаблицаРезультата.Колонки.Добавить("ПланыРасходаСОтбором", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
		ИменаОперандов = ИменаОперандов + ", ПланыРасходаСОтбором";
		
	КонецЕсли;
	
	Если ТаблицаРезультата.Колонки.Найти("ПланыЗакупок") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыСборкиКомплекты") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыРазборкиКомплектующие") <> Неопределено Тогда
		
		ТаблицаРезультата.Колонки.Добавить("ПланыПрихода", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
		ИменаОперандов = ИменаОперандов + ", ПланыПрихода";
		
	КонецЕсли;
	
	Если ТаблицаРезультата.Колонки.Найти("ПланыЗакупокСОтбором") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыСборкиКомплектыСОтбором") <> Неопределено
		Или ТаблицаРезультата.Колонки.Найти("ПланыРазборкиКомплектующиеСОтбором") <> Неопределено Тогда
		
		ТаблицаРезультата.Колонки.Добавить("ПланыПриходаСОтбором", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
		ИменаОперандов = ИменаОперандов + ", ПланыПриходаСОтбором";
		
	КонецЕсли;
	
	// Рассчитываем количество по формуле
	Если ТаблицаРезультата.Колонки.Найти("Формула") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить("Формула", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ТаблицаРезультата.Колонки.Найти("ФормулаПредставление") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить("ФормулаПредставление", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ТаблицаРезультата.Колонки.Найти("ФормулаВычисление") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить("ФормулаВычисление", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Если ТаблицаРезультата.Колонки.Найти(ИмяКолонкиРезультата) = Неопределено Тогда
		ТаблицаРезультата.Колонки.Добавить(ИмяКолонкиРезультата, ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗаполнятьСостав") И НЕ Параметры.Свойство("ЗаполнятьОперанды") И Параметры.Свойство("ОбновлятьПоказатели") Тогда
		
		// Обновление цен
		Для каждого СтрокаТЧ Из ЗаполняемаяТЧ Цикл
			
			НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
			ТекущиеДанные = Новый Структура(ИменаОперандов);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0];
				
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, НайденнаяСтрока);
				
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущиеДанные);
			
		КонецЦикла;
		
		Возврат ЗаполняемаяТЧ;
	
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаРезультата Цикл
			
			ТекущиеДанные = Новый Структура(ИменаОперандов);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаТЧ);
			
			РассчитатьПланыПриходаПланыРасхода(ТекущиеДанные, "");
			РассчитатьПланыПриходаПланыРасхода(ТекущиеДанные, "СОтбором");
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ТекущиеДанные);
			
			РезультатВычисления = ВычислитьПоФормуле(Параметры.Формула, ТекущиеДанные, 
				Неопределено, Неопределено,Параметры.ФормулаПредставление);
			
			СтрокаТЧ[ИмяКолонкиРезультата] = РезультатВычисления.Результат;
			СтрокаТЧ.Формула               = Параметры.Формула;
			СтрокаТЧ.ФормулаПредставление  = РезультатВычисления.Представление;
			СтрокаТЧ.ФормулаВычисление     = РезультатВычисления.Вычисление;
			
		КонецЦикла;
		
		Возврат ТаблицаРезультата;
	
	КонецЕсли; 
	
КонецФункции

Процедура ДополнитьНастройкиДляЦенообразования25(СКД_Преобразование, ЗаполняемаяТЧ)

	ПоХарактеристике = Ложь;
	ПоУпаковке = Ложь;

	Если ЗаполняемаяТЧ.Колонки.Найти("ХарактеристикаЦО") = Неопределено 
		И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатурыДляЦенообразования") Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ПоХарактеристике = Истина;
	КонецЕсли; 

	Если ЗаполняемаяТЧ.Колонки.Найти("УпаковкаЦО") = Неопределено И 
		ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатурыДляЦенообразования") Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("УпаковкаЦО", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ПоУпаковке = Истина;
	КонецЕсли; 
	
	Если ПоХарактеристике Или ПоУпаковке Тогда
		ТаблицаДляОтбора = ЗаполняемаяТЧ.Скопировать(, "Номенклатура");
		ТаблицаДляОтбора.Свернуть("Номенклатура");
		СписокДляОтбора = ТаблицаДляОтбора.ВыгрузитьКолонку("Номенклатура");
			
		ТаблицаНастроекЦенообразования = обработки.ПодборТоваровПоОтбору.ПолучитьТаблицуНастроекЦенообразования(СписокДляОтбора);
		Для Каждого Настройка Из ТаблицаНастроекЦенообразования Цикл
			НайденныеСтроки = ЗаполняемаяТЧ.НайтиСтроки(Новый Структура("Номенклатура", Настройка.Номенклатура));
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ПоХарактеристике И Настройка.ПоХарактеристике Тогда
					НайденнаяСтрока.ХарактеристикаЦО = НайденнаяСтрока.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования;
				КонецЕсли;
				Если ПоУпаковке И Настройка.ПоУпаковке Тогда
					НайденнаяСтрока.УпаковкаЦО = НайденнаяСтрока.Упаковка;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// добавить связи наборов. удалить связь по харакетристике (если она есть)
	Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
		Индекс = Индекс - 1;
		
		Если ПоХарактеристике 
			И (Связь.ВыражениеИсточник = "Характеристика" 
			ИЛИ Связь.ВыражениеПриемник = "Характеристика") Тогда
		
			СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
		
		КонецЕсли; 
		
	КонецЦикла; 

	Если ПоХарактеристике Тогда
	
		Обработки.ПодборТоваровПоОтбору.ДобавитьПолеНабораДанныхСКД(
												СКД_Преобразование.НаборыДанных.ТаблицаСостава, 
												"ХарактеристикаЦО", 
												"СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования");
		Обработки.ПодборТоваровПоОтбору.ДобавитьСвязьНаборовДанныхСКД(
												СКД_Преобразование,
												СКД_Преобразование.НаборыДанных.ТаблицаСостава, 
												СКД_Преобразование.НаборыДанных.Присоединение, 
												"ХарактеристикаЦО");
	КонецЕсли; 

	Если ПоУпаковке Тогда
		
		Обработки.ПодборТоваровПоОтбору.ДобавитьПолеНабораДанныхСКД(
												СКД_Преобразование.НаборыДанных.ТаблицаСостава, 
												"УпаковкаЦО", 
												"СправочникСсылка.УпаковкиЕдиницыИзмерения");
		Обработки.ПодборТоваровПоОтбору.ДобавитьСвязьНаборовДанныхСКД(
												СКД_Преобразование,
												СКД_Преобразование.НаборыДанных.ТаблицаСостава, 
												СКД_Преобразование.НаборыДанных.Присоединение, 
												"УпаковкаЦО");
	КонецЕсли;
КонецПроцедуры
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
//    * Период - Дата -
//    * ПериодСостава - Дата -
//    * LineNumber - Число
//
Функция ТаблицаРезультата()
	
	ТаблицаРезультата = Новый ТаблицаЗначений;

	Возврат ТаблицаРезультата
	
КонецФункции

Процедура РассчитатьПланыПриходаПланыРасхода(ТекущиеДанные, Разделитель)
	
	Если ТекущиеДанные.Свойство("ПланыРасхода"+Разделитель) Тогда
		ПланыРасхода = ?(ТекущиеДанные.Свойство("ПланыПродаж"+Разделитель),
		ТекущиеДанные["ПланыПродаж"+Разделитель],0)
		+ ?(ТекущиеДанные.Свойство("ПланыВнутреннихПотреблений"+Разделитель),
		ТекущиеДанные["ПланыВнутреннихПотреблений"+Разделитель],0)
		+ ?(ТекущиеДанные.Свойство("ПланыРазборкиКомплекты"+Разделитель),
		ТекущиеДанные["ПланыРазборкиКомплекты"+Разделитель],0)
		+ ?(ТекущиеДанные.Свойство("ПланыСборкиКомплектующие"+Разделитель),
		ТекущиеДанные["ПланыСборкиКомплектующие"+Разделитель],0)
		+ ?(ТекущиеДанные.Свойство("КорректировкиПлановыхПотребностей"+Разделитель),
		ТекущиеДанные["КорректировкиПлановыхПотребностей"+Разделитель],0);
		
		ТекущиеДанные["ПланыРасхода"+Разделитель] = ПланыРасхода;
	КонецЕсли;

	Если ТекущиеДанные.Свойство("ПланыПрихода"+Разделитель) Тогда
		ПланыПрихода = ?(ТекущиеДанные.Свойство("ПланыЗакупок"+Разделитель),
		ТекущиеДанные["ПланыЗакупок"+Разделитель],0)
		+ ?(ТекущиеДанные.Свойство("ПланыСборкиКомплекты"+Разделитель),
		ТекущиеДанные["ПланыСборкиКомплекты"+Разделитель],0)
		+ ?(ТекущиеДанные.Свойство("ПланыРазборкиКомплектующие"+Разделитель),
		ТекущиеДанные["ПланыРазборкиКомплектующие"+Разделитель],0);
		
		ТекущиеДанные["ПланыПрихода"+Разделитель] = ПланыПрихода;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает макеты операндов для данного плана
//
// Возвращаемое значение:
//   Соответствие   - Макеты для операндов.
//
Функция МакетыОперандовПлана() Экспорт 

	Макеты = Новый Соответствие;
	
	Документы.ПланПродажПоКатегориям.МакетыОперандовПлана(Макеты);
	Документы.ПланПродаж.МакетыОперандовПлана(Макеты);
	Документы.ПланЗакупок.МакетыОперандовПлана(Макеты);
	Документы.ПланОстатков.МакетыОперандовПлана(Макеты);
	Документы.ПланСборкиРазборки.МакетыОперандовПлана(Макеты);
	Документы.ПланВнутреннихПотреблений.МакетыОперандовПлана(Макеты);
	Макеты.Вставить("КорректировкиПлановыхПотребностей", Документы.КорректировкаПлановыхПотребностей.ПолучитьМакет("СКД_КорректировкиПлановыхПотребностей"));
	Макеты.Вставить("КорректировкиПлановыхПотребностейСОтбором", Документы.КорректировкаПлановыхПотребностей.ПолучитьМакет("СКД_КорректировкиПлановыхПотребностейСОтбором"));

	Возврат Макеты;

КонецФункции

// Выбирает данные расшифровки
//
// Параметры:
//  МассивИменНаборов	 - Массив	 - Массив наборов данных (источников заполнения показателей)
//  Параметры			 - Структура - Параметры запроса.
// 
// Возвращаемое значение:
//  Массив - Данные расшифровки (Документ, Дата документа, Номер документа).
//
Функция ПолучитьРасшифровку(МассивИменНаборов, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Документ");
	МассивПолей.Добавить("ДатаДокумента");
	МассивПолей.Добавить("НомерДокумента");
	Для каждого Элемент Из МассивИменНаборов Цикл
		МассивПолей.Добавить(Элемент);
	КонецЦикла; 
	
	МассивДанныхРасшифровки = Новый Массив();
	
	Расшифровка = Новый ТаблицаЗначений();
	
	ТипПлана = ПланированиеКлиентСервер.ПолучитьТипПланаПоСсылке(Параметры.Ссылка);
	
	МакетыОперандов = МакетыОперандовПлана();
	
	СКД_Преобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана);
	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	
	ИменаОперандов = "";
	
	Для каждого ИмяОперанда Из МассивИменНаборов Цикл
		
		СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
		
		Если СКД_Операнда = Неопределено 
			ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
			ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхОбъединение, СКД_Операнда, ИменаОперандов);
		
	КонецЦикла; 
	
	УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование);
	
	// Добавляем поля для расшифровки
	НастроитьСхемуДляРасшифровки(СКД_Преобразование, НаборДанныхОбъединение, МассивПолей);
	
	ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, Расшифровка);
	
	Если Расшифровка.Количество() > 0
		И Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("Номенклатура")
		И (МассивИменНаборов.Найти("ПланыПродажПоКатегориям") <> Неопределено
		ИЛИ МассивИменНаборов.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено
		ИЛИ МассивИменНаборов.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено
		ИЛИ МассивИменНаборов.Найти("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором") <> Неопределено)Тогда
		
		Номенклатура = Параметры.Отбор.Номенклатура;
		Если Параметры.Отбор.Свойство("Характеристика") Тогда
			Характеристика = Параметры.Отбор.Характеристика;
		Иначе
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
		
		НормативыПоНоменклатуре = Истина;
		
		Если МассивИменНаборов.Найти("ПланыПродажПоКатегориям") <> Неопределено Тогда
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориям";
		ИначеЕсли МассивИменНаборов.Найти("ПланыПродажПоКатегориямСОтбором") <> Неопределено Тогда
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориямСОтбором";
		ИначеЕсли МассивИменНаборов.Найти("ПланыПродажПоКатегориямПоСкоростиПродаж") <> Неопределено Тогда
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориямПоСкоростиПродаж";
			НормативыПоНоменклатуре = Ложь;
		Иначе
			ИмяКолонкиНорматива = "ПланыПродажПоКатегориямПоСкоростиПродажСОтбором";
			НормативыПоНоменклатуре = Ложь;
		КонецЕсли; 
		
		Нормативы = Документы.НормативРаспределенияПлановПродажПоКатегориям.ПолучитьНормативыРаспределения(
			Параметры.НачалоПериодаСмещения,
			Номенклатура, 
			Характеристика,
			НормативыПоНоменклатуре);
		
		Если Нормативы <> Неопределено И Нормативы.Количество() > 0 Тогда
			// Замена типов колонки
			Типы = Расшифровка.Колонки.Документ.ТипЗначения.Типы(); // Массив из Тип
			Типы.Добавить(Тип("ДокументСсылка.НормативРаспределенияПлановПродажПоКатегориям"));
			Расшифровка.Колонки.Документ.Имя = "ДокументСтарый";
			Расшифровка.Колонки.Добавить("Документ", Новый ОписаниеТипов(Типы));
			Для каждого СтрокаРасшифровки Из Расшифровка Цикл
				СтрокаРасшифровки.Документ = СтрокаРасшифровки.ДокументСтарый;
			КонецЦикла; 
			Расшифровка.Колонки.Удалить(Расшифровка.Колонки.ДокументСтарый);
			
			Для каждого Норматив Из Нормативы Цикл
				
				НоваяСтрока = Расшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Норматив);
				
				НоваяСтрока[ИмяКолонкиНорматива] = Норматив.ДоляРаспределения
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Для каждого СтрокаРасшифровки Из Расшифровка Цикл
		СтруктураДанныхРасшифровки = Новый Структура();
		Для каждого Колонка Из Расшифровка.Колонки Цикл
			СтруктураДанныхРасшифровки.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураДанныхРасшифровки, СтрокаРасшифровки);
		МассивДанныхРасшифровки.Добавить(СтруктураДанныхРасшифровки);
	КонецЦикла; 
	
	Возврат МассивДанныхРасшифровки;
	
КонецФункции

// Процедура рассчитывает значения планируемого начального/конечного остатка/дефицита в строке.
//
// Параметры:
//  СтрокаТоваров		 - Структура - структура строки
//  Период				 - Строка - Описание текущего периода в таблице Периоды
//  ПредыдущийПериод	 - Строка - Описание предыдущего периода в таблице Периоды
//  НовыйПланОстатков    - Булево - признак того, что в заданном периоде есть план остатков
//  Разделитель - Строка - "_" или "СОтбором_" разделяет имя операнда и и идентификатор периода
//  ОсновнойОперандПлана - Строка - основной операнд плана
//  ЗнакКорректировки    - Число - Знак корректировки.
//
Процедура ВычислитьРассчитываемыеОперанды(СтрокаТоваров, Период, ПредыдущийПериод, НовыйПланОстатков, Разделитель, ОсновнойОперандПлана, ЗнакКорректировки) Экспорт
	
	Если Не СтрокаТоваров.Свойство("ПланируемыеНачальныеОстатки"+Разделитель+Период.ИмяКолонки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НовыйПланОстатков
		И ПредыдущийПериод <> Неопределено Тогда
		НакопленныйПланируемыйКонечныйДефицит = СтрокаТоваров["НакопленныйПланируемыйКонечныйДефицит"+Разделитель+ПредыдущийПериод.ИмяКолонки];
	Иначе
		НакопленныйПланируемыйКонечныйДефицит = -СтрокаТоваров["ПланируемыеНачальныеОстатки"+Разделитель+Период.ИмяКолонки];
	КонецЕсли;
	
	СтрокаТоваров["ПланируемыеНачальныеОстатки"+Разделитель+Период.ИмяКолонки] = Макс(0,-НакопленныйПланируемыйКонечныйДефицит);
	
	НакопленныйПланируемыйКонечныйДефицит = НакопленныйПланируемыйКонечныйДефицит
											+?(СтрокаТоваров.Свойство("ПланыРасхода"+Разделитель+Период.ИмяКолонки),
											СтрокаТоваров["ПланыРасхода"+Разделитель+Период.ИмяКолонки],
											0)
											- ?(СтрокаТоваров.Свойство("ПланыПрихода"+Разделитель+Период.ИмяКолонки),
											СтрокаТоваров["ПланыПрихода"+Разделитель+Период.ИмяКолонки],
											0)
											- ?(ОсновнойОперандПлана="" Или Не Период.Активная, 0, ЗнакКорректировки*СтрокаТоваров[ОсновнойОперандПлана+"_"+Период.ИмяКолонки]);
	
	СтрокаТоваров["НакопленныйПланируемыйКонечныйДефицит"+Разделитель+Период.ИмяКолонки] = НакопленныйПланируемыйКонечныйДефицит;
	
	Если СтрокаТоваров.Свойство("ПланируемыйКонечныйДефицит"+Разделитель+Период.ИмяКолонки) Тогда
		СтрокаТоваров["ПланируемыйКонечныйДефицит"+Разделитель+Период.ИмяКолонки] = Макс(0, НакопленныйПланируемыйКонечныйДефицит);
	КонецЕсли;
	
	Если СтрокаТоваров.Свойство("ПланируемыеКонечныеОстатки"+Разделитель+Период.ИмяКолонки) Тогда
		СтрокаТоваров["ПланируемыеКонечныеОстатки"+Разделитель+Период.ИмяКолонки] = Макс(0, -НакопленныйПланируемыйКонечныйДефицит);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает +1,-1 или 0 - знак корректировки планируемого дефицита который сделает текущий план.
//
// Параметры:
// Форма             - РасширениеУправляемойФормыДляДокумента - Форма документа плана:
// * Объект - ДокументОбъект - 
//
// Возвращаемое значение:
//  Число - +1,0-1
Функция ПолучитьЗнакКорректировки(Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланОстатков") Тогда
		Знак = 0;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланПродаж")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланПродажПоКатегориям")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланВнутреннихПотреблений")
		Или (ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланСборкиРазборки")
		И Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров) Тогда
		// Весь планируемый расход увеличивают дефицит
		Знак = 1;
	Иначе
		// Весь планируемый приход дефицит уменьшают
		Знак = -1;
	КонецЕсли;
	
	Возврат Знак
	
КонецФункции

// Возвращает основной операнд плана
//
// Параметры:
// Форма             - РасширениеУправляемойФормыДляДокумента - Форма документа плана:
// * Объект - ДокументОбъект - 
// СОтбором - Булево
//
// Возвращаемое значение:
//  Строка - имя операнда плана
Функция ОсновнойОперандПлана(Форма, СОтбором = Ложь) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланОстатков") Тогда
		Возврат ?(СОтбором,"ПланыОстатковСОтбором","ПланыОстатков");
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланЗакупок") Тогда
		Возврат ?(СОтбором,"ПланыЗакупокСОтбором","ПланыЗакупок");
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланПродаж") Тогда
		Возврат ?(СОтбором,"ПланыПродажСОтбором","ПланыПродаж");
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланПродажПоКатегориям") Тогда
		Возврат ?(СОтбором,"ПланыПродажПоКатегориямСОтбором","ПланыПродажПоКатегориям");
	ИначеЕсли (ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланСборкиРазборки")
		И Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров) Тогда
		Возврат ?(СОтбором,"ПланыРазборкиКомплектыСОтбором","ПланыРазборкиКомплекты");
	ИначеЕсли (ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланСборкиРазборки")
		И Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров) Тогда
		Возврат ?(СОтбором,"ПланыСборкиКомплектыСОтбором","ПланыСборкиКомплекты");
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПланВнутреннихПотреблений") Тогда
		Возврат ?(СОтбором,"ПланыВнутреннихПотребленийСОтбором","ПланыВнутреннихПотреблений");
	КонецЕсли;
	
КонецФункции

// Формирует дерево операндов и помещает их во временное хранилище
//
// Параметры:
// Форма             - ФормаКлиентскогоПриложения - Форма документа плана.
// Смещение - Число
//
// Возвращаемое значение:
//  Строка - адрес хранилища с деревом операндов.
Функция ПоместитьДополнительныеПоляВХранилище(Форма, Смещение) Экспорт
	
	ТаблицаОперандов = Форма.ДополнительныеПоля.Выгрузить();// см. ТаблицаОперандов
	ДеревоОперандов = РаботаСФормулами.ПолучитьПустоеДеревоОперандов();
	
	ИмяГруппыПредставление = Новый Массив;
	ИмяГруппыПредставление.Добавить(Новый Структура("Идентификатор, Представление", "ОсновныеОперанды", НСтр("ru = 'Основные операнды'")));
	ИмяГруппыПредставление.Добавить(Новый Структура("Идентификатор, Представление", "ОсновныеОперандыСОтбором",  НСтр("ru = 'Основные операнды*'")));
	ИмяГруппыПредставление.Добавить(Новый Структура("Идентификатор, Представление", "ДополнительныеОперандыПланы",  НСтр("ru = 'Дополнительные операнды (планы)'")));
	ИмяГруппыПредставление.Добавить(Новый Структура("Идентификатор, Представление", "ДополнительныеОперандыПланыСОтбором",  НСтр("ru = 'Дополнительные операнды (планы)*'")));
	ИмяГруппыПредставление.Добавить(Новый Структура("Идентификатор, Представление", "ДополнительныеОперандыФакты",  НСтр("ru = 'Дополнительные операнды (факты)'")));
	ИмяГруппыПредставление.Добавить(Новый Структура("Идентификатор, Представление", "ВспомогательныеОперанды",  НСтр("ru = 'Вспомогательные операнды'")));
	
	ТипыЭлементовДерева = РаботаСФормулами.ТипыЭлементовДереваОперандов();
	
	ОперандГруппа = Неопределено;
	Для Каждого ГруппаОперандов Из ИмяГруппыПредставление Цикл // см. ГруппаОперандов
		
		Для Каждого Операнд Из ТаблицаОперандов.НайтиСтроки(Новый Структура("ВходитВОперанд", ГруппаОперандов.Идентификатор)) Цикл
			Если ОперандГруппа = Неопределено Тогда
				ОперандГруппа = РаботаСФормулами.НоваяСтрокаДереваОперанда(ДеревоОперандов);
				ОперандГруппа.Идентификатор = ГруппаОперандов.Идентификатор;
				ОперандГруппа.Представление = ГруппаОперандов.Представление;
				ОперандГруппа.ТипЭлементаДерева = ТипыЭлементовДерева.ГруппаСтрокВерхнегоУровня;
				
				ОперандГруппа.РазрешаетсяВыборОперанда = Ложь;
				ОперандГруппа.ВключаетсяВИдентификатор = Ложь;
			КонецЕсли;
			
			ОперандСтрока = РаботаСФормулами.НоваяСтрокаДереваОперанда(ОперандГруппа);
			ОперандСтрока.Идентификатор = Операнд.Идентификатор;
			ОперандСтрока.Представление = Операнд.Представление;
			ОперандСтрока.РазрешаетсяВыборОперанда = Истина;
			ОперандСтрока.ВключаетсяВИдентификатор = Истина;
			ОперандСтрока.ТипЗначения = Новый ОписаниеТипов("Число");
			
			ОперандСтрока.Значение = Операнд.Значение;
			ОперандСтрока.СодержитЗначение = ЗначениеЗаполнено(ОперандСтрока.Значение);
			
		КонецЦикла;
		
		ОперандГруппа = Неопределено;
		
	КонецЦикла;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДеревоОперандов, Форма.УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

// Группа операндов.
// 
// Возвращаемое значение:
//  Структура - Группа операндов:
// * Идентификатор - Строка - 
// * Представление - Строка - 
Функция ГруппаОперандов() Экспорт
	ГруппаОперандов = Новый Структура;
	ГруппаОперандов.Вставить("Идентификатор");
	ГруппаОперандов.Вставить("Представление");
	Возврат ГруппаОперандов;
КонецФункции

// Таблица операндов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица ДополнительныеПоля формы плана:
//   *ВходитВОперанд - Строка
//   *Значение - Число
//   *Идентификатор - Строка
//   *ПометкаУдаления - Булево
//   *Представление - Строка
//   *Ссылка - Строка
Функция ТаблицаОперандов() Экспорт
	ТаблицаОперандов = Новый ТаблицаЗначений();
	ТаблицаОперандов.Колонки.Вставить("ВходитВОперанд");
	ТаблицаОперандов.Колонки.Вставить("Значение");
	ТаблицаОперандов.Колонки.Вставить("Идентификатор");
	ТаблицаОперандов.Колонки.Вставить("ПометкаУдаления");
	ТаблицаОперандов.Колонки.Вставить("Представление");
	ТаблицаОперандов.Колонки.Вставить("Ссылка");
	Возврат ТаблицаОперандов;
КонецФункции

// Вычисление по формуле
//
// Параметры:
//  ИсходнаяФормула	 - Строка					 - Значение исходной формулы
//  ТекущиеДанные	 - ДанныеФормыЭлементКоллекции	 - Значение текущих данных табличной части
//  Периоды			 - ДанныеФормыКоллекция			 - Значения периодов
//  Период			 - ДанныеФормыЭлементКоллекции	 - Значение текущего периода из таблицы периодов
//  Представление	 - Строка						 - Значение пользовательского представления формулы.
//  СерверныйВызов	 - Булево
// 
// Возвращаемое значение:
//  Структура - Возвращает структуру с новыми параметрами представления формулы.
//
Функция ВычислитьПоФормуле(Знач ИсходнаяФормула, Знач ТекущиеДанные, Знач Периоды, Знач Период, Знач Представление = Неопределено, СерверныйВызов = Ложь) Экспорт
	
	РасчетнаяФормула = ИсходнаяФормула;
	ВыводитьПромежуточныеВычисления = Ложь;
	Постфикс = Неопределено;
	
	Параметры = Новый Структура();
	Параметры.Вставить("Период", Период);
	Параметры.Вставить("Периоды", Периоды);
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	Если Период <> Неопределено Тогда
		Постфикс = Период.ИмяКолонки;
	КонецЕсли;
	
	МассивОперандов = ПланированиеКлиентСервер.ОперандыТекстовойФормулы(РасчетнаяФормула);
	
	Для каждого Операнд Из МассивОперандов Цикл
		
		Если Постфикс <> Неопределено Тогда
			ИмяОперанда = Операнд + "_" + Постфикс;
		Иначе
			ИмяОперанда = Операнд;
		КонецЕсли;
		
		Если Не ТекущиеДанные.Свойство(ИмяОперанда) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОперанда = ТекущиеДанные[ИмяОперанда];
		Если НЕ ВыводитьПромежуточныеВычисления Тогда
			ВыводитьПромежуточныеВычисления = НЕ ПустаяСтрока(СтрЗаменить(РасчетнаяФормула, "["+Операнд+"]", ""));
		КонецЕсли; 
		РасчетнаяФормула = СтрЗаменить(РасчетнаяФормула, "["+Операнд+"]", Формат(ЗначениеОперанда, "ЧРД=.; ЧН=0; ЧГ=0"));
		
	КонецЦикла;
	
	РасчетнаяФормула = ПланированиеКлиентСервер.ДобавитьПараметрыКФункциям(РасчетнаяФормула, "Параметры");
	
	Попытка
		РезультатВычисления = Формат(ОбщегоНазначения.ВычислитьВБезопасномРежиме(РасчетнаяФормула, Параметры),"ЧЦ=15; ЧДЦ=3; ЧН=0");
	Исключение
		РезультатВычисления = 0;
	КонецПопытки;
	
	РасчетнаяФормула = ПланированиеКлиентСервер.УдалитьПараметрыВФункциях(РасчетнаяФормула, "Параметры");
	
	Если ЗначениеЗаполнено(ИсходнаяФормула) И ИсходнаяФормула <> ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы() Тогда
		Вычисление = ИсходнаяФормула + ?(ВыводитьПромежуточныеВычисления, " = " + РасчетнаяФормула, "") + " = " + РезультатВычисления;
	Иначе
		Вычисление = ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы();
	КонецЕсли;
	
	Если ИсходнаяФормула <> ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы() Тогда
		Представление = ?(ЗначениеЗаполнено(Представление),Представление,ИсходнаяФормула);
	Иначе
		Представление = "";
	КонецЕсли;
	
	Возврат Новый Структура("Вычисление,Результат,Представление", Вычисление,РезультатВычисления,Представление);
	
КонецФункции

#КонецОбласти

#Область Прочие

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * НомерКолонки - Число -
// * ИмяКолонки - Строка -
// * Активная - Булево -
// * ДатаНачала - Дата - 
// * ДатаОкончания - Дата - 
// * Заголовок - Строка -
// * Замещен - Булево -
// * ЗамещенКЗаказу - Булево -
Функция ТаблицаПериоды() Экспорт
	
	ТаблицаПериоды = Новый ТаблицаЗначений();
	ТаблицаПериоды.Колонки.Добавить("НомерКолонки",ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаПериоды.Колонки.Добавить("ИмяКолонки",Новый ОписаниеТипов("Строка"));
	ТаблицаПериоды.Колонки.Добавить("Активная",Новый ОписаниеТипов("Булево"));
	ТаблицаПериоды.Колонки.Добавить("ДатаНачала",ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаПериоды.Колонки.Добавить("ДатаОкончания",ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаПериоды.Колонки.Добавить("Заголовок",Новый ОписаниеТипов("Строка"));
	ТаблицаПериоды.Колонки.Добавить("Замещен",Новый ОписаниеТипов("Булево"));
	ТаблицаПериоды.Колонки.Добавить("ЗамещенКЗаказу",Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПериоды
	
КонецФункции

// Скопирована из ОбщегоНазначенияКлиентСервер, отличается тем, что в последнем периоде тоже округляет данные.
// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  Коэффициенты - Массив - коэффициенты распределения;
//  Точность - Число - точность округления при распределении. Необязателен.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьСуммуПропорциональноКоэффициентам(Знач РаспределяемаяСумма, Коэффициенты, Знач Точность = 2) Экспорт
	
	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Результат[Индекс] = Окр(РаспределяемаяСумма * Коэффициенты[Индекс] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом.
	Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
		Результат[ИндексМаксимальногоКоэффициента] = Окр(Результат[ИндексМаксимальногоКоэффициента] + РаспределяемаяСумма - РаспределеннаяСумма, Точность, 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу данных рассчитанных для замещения
//
// Параметры:
//  Параметры  - Структура - Настройки расчета.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица с данными рассчитанными по формуле.
//
Функция ЗаполнитьДляЗамещения(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяМенеджера = СтрЗаменить(Параметры.КлючОбщихНастроек, "Документ.", "");
	
	Запрос = Новый Запрос;
	Запрос = Документы[ИмяМенеджера].ЗапросЗамещения(Параметры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Получает валюту сценария планирования.
//
// Параметры:
//	СценарийПланирования - СправочникСсылка.СценарииТоварногоПланирования - сценарий планирования
// Возвращаемое значение:
//  СправочникСсылка.Валюты - валюта сценария планирования.
Функция ВалютаСценария(СценарийПланирования) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СценарийПланирования, "Валюта");
КонецФункции

// Подсистема БюджетированиеИПланирование в УТ имеет имя Планирование.
// Функция возвращает подсистему в зависимости от текущего решения.
// 
// Возвращаемое значение:
//  ОбъектМетаданныхПодсистема - подсистема планирование.
//
Функция ПодсистемаПланирование() Экспорт
	
		
		Результат = Метаданные.Подсистемы.Найти("Планирование");
		
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область ПроцедурыЗамещенияПланов

// Процедура запускает фоновое проведение замещенных планов
//
Процедура ЗапускВыполненияФоновогоПроведенияПлана() Экспорт
	
	Ключ = "ЗамещениеПланов";
		
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Замещение/отмена замещения планов'");
	
	ИмяЭкспортнойПроцедуры = "Планирование.ВыполнитьФоновоеПроведенияПлана";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Новый Структура("КоличествоОшибок", 0));
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура выполняет фоновое проведение замещенных планов
//
// Параметры:
//  ПараметрыЗадания  - Структура - структура хранит количество ошибок, если ошибок будет больше определенного лимита,
//                                  то задание завершится.
//
Процедура ВыполнитьФоновоеПроведенияПлана(ПараметрыЗадания) Экспорт
	
	Если ПараметрыЗадания.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ТекстСообщения = НСтр("ru = 'Фоновое замещение/отмена замещения планов остановлена. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое замещение/отмена замещения плана'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗамещениеПланов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещениеПланов.ЗамещенныйПлан
		|ИЗ
		|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
		|ГДЕ
		|	(ЗамещениеПланов.КЗамещению
		|			ИЛИ ЗамещениеПланов.КОтменеЗамещения)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить блокировку регистра ""Замещение планов"" фоновым заданием. Количество попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое замещение плана'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
				
		ВыполнитьФоновоеПроведенияПлана(ПараметрыЗадания);
		Возврат;
	КонецПопытки;
	
	ЗамещениеВыполнено = Истина;
	
	Пока Выборка.Следующий() Цикл
		ПараметрыЗадания.Вставить("ЗамещенныйПлан", Выборка.ЗамещенныйПлан);
		ВыполнитьПроведенияПлана(ПараметрыЗадания);
		ЗамещениеВыполнено = Ложь;
	КонецЦикла;
	
	Если Не ЗамещениеВыполнено Тогда
		ВыполнитьФоновоеПроведенияПлана(ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьПроведенияПлана(ПараметрыЗадания)
	
	ЗамещенныйПлан = ПараметрыЗадания.ЗамещенныйПлан;
	
	Попытка
		ЗамещенныйПланОбъект = ЗамещенныйПлан.ПолучитьОбъект();
		ЗамещенныйПланОбъект.Заблокировать();
		
		Если ЗамещенныйПланОбъект.Проведен Тогда
			ЗамещенныйПланОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			ЗамещенныйПланОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Возврат Истина;
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить замещение/отмену замещения плана %ЗамещенныйПлан% фоновым заданием по причине: %Причина%. Количество попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗамещенныйПлан%", ЗамещенныйПлан);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое замещение плана'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				ЗамещенныйПлан.Метаданные(),
				ЗамещенныйПлан,
				ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


// Описание
// 
// Параметры:
// 	Параметры - Структура - состав:
// 	 * Ссылка - ДокументСсылка.ПланЗакупок - 
// 	          - ДокументСсылка.ПланОстатков -
// 	          - ДокументСсылка.ПланПродаж -
// 	          - ДокументСсылка.ПланПродажПоКатегориям -
// 	          - ДокументСсылка.ПланПроизводства -
// 	          - ДокументСсылка.ПланСборкиРазборки -
// 	ИмяДокумента - Строка - 
// 	ИмяРеквизитаНачалоПериода - Строка - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
Функция ПолучитьЗамещенныеПериоды(Параметры, ИмяДокумента , ИмяРеквизитаНачалоПериода = "НачалоПериода") Экспорт
	
	ПериодыПлана = Новый ТаблицаЗначений();
	ПериодыПлана.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ДобавлениеДатаНачала = Параметры[ИмяРеквизитаНачалоПериода];
	Пока ДобавлениеДатаНачала < КонецДня(Параметры.ОкончаниеПериода) Цикл
		НоваяСтрока = ПериодыПлана.Добавить();
		НоваяСтрока.Период = ДобавлениеДатаНачала;
		
		ДатуОкончанияПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, Параметры.Периодичность);
		ДобавлениеДатаНачала = ДатуОкончанияПериода+1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыПлана.Период КАК Период
	|ПОМЕСТИТЬ ПериодыПлана
	|ИЗ
	|	&ПериодыПлана КАК ПериодыПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланЗамещающий.Ссылка КАК Ссылка,
	|	ПланЗамещающий.ВидПлана КАК ВидПлана,
	|	ВЫБОР
	|		КОГДА &НачалоПериода > ПланЗамещающий.НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ПланЗамещающий.НачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &ОкончаниеПериода < ПланЗамещающий.ОкончаниеПериода
	|			ТОГДА &ОкончаниеПериода
	|		ИНАЧЕ ПланЗамещающий.ОкончаниеПериода
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	ПланЗамещающий.Статус КАК Статус,
	|	ПланЗамещающий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|		И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден) КАК ЗамещенКЗаказу,
	|	ПланЗамещающий.Статус.Порядок >= &СтатусИндекс
	|	ИЛИ (ПланЗамещающий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.НаУтверждении)
	|		И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)) КАК Замещен
	|ПОМЕСТИТЬ ЗамещаемыеПланы
	|ИЗ
	|	Документ.ПланПродаж КАК ПланЗамещающий
	|ГДЕ
	|	ПланЗамещающий.ОкончаниеПериода >= &НачалоПериода
	|	И ПланЗамещающий.НачалоПериода <= &ОкончаниеПериода
	|	И ПланЗамещающий.Ссылка <> &Ссылка
	|	И ПланЗамещающий.Проведен
	|	И ПланЗамещающий.ВидПлана = &ВидПлана
	|	И (ПланЗамещающий.Статус.Порядок >= &СтатусИндекс
	|			ИЛИ ПланЗамещающий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.НаУтверждении)
	|				И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден))
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И ПланЗамещающий.Дата > &Дата
	|	И &ТекстЗапросаОтборПодразделение
	|	И &ТекстЗапросаОтборПартнер
	|	И &ТекстЗапросаОтборСоглашение
	|	И &ТекстЗапросаОтборСклад
	|	И &ТекстЗапросаОтборФорматМагазина
	|	И &ТекстЗапросаОтборМенеджер
	|	И &ТекстЗапросаОтборХозяйственнаяОперация
	|	И &ТекстЗапросаОтборНазначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыПлана.Период КАК ЗамещенныйПериод,
	|	МАКСИМУМ(ЗамещаемыеПланы.Замещен) КАК Замещен,
	|	МАКСИМУМ(ЗамещаемыеПланы.ЗамещенКЗаказу) КАК ЗамещенКЗаказу
	|ИЗ
	|	ЗамещаемыеПланы КАК ЗамещаемыеПланы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыПлана КАК ПериодыПлана
	|		ПО ЗамещаемыеПланы.НачалоПериода <= ПериодыПлана.Период
	|			И ЗамещаемыеПланы.ОкончаниеПериода >= ПериодыПлана.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПлана.Период";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		".ПланПродаж",
		"."+ИмяДокумента);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"НачалоПериода",
		""+ИмяРеквизитаНачалоПериода);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборПодразделение",
		?(Параметры.Свойство("Подразделение"),"ПланЗамещающий.Подразделение = &Подразделение","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборПартнер",
		?(Параметры.Свойство("Партнер"),"ПланЗамещающий.Партнер = &Партнер","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборСоглашение",
		?(Параметры.Свойство("Соглашение"),"ПланЗамещающий.Соглашение = &Соглашение","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборСклад",
		?(Параметры.Свойство("Склад"),"ПланЗамещающий.Склад = &Склад","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборФорматМагазина",
		?(Параметры.Свойство("ФорматМагазина"),"ПланЗамещающий.ФорматМагазина = &ФорматМагазина","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборМенеджер",
		?(Параметры.Свойство("Менеджер"),"ПланЗамещающий.Менеджер = &Менеджер","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборНазначение",
		?(Параметры.Свойство("Назначение"),"ПланЗамещающий.Назначение = &Назначение","Истина"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборХозяйственнаяОперация",
		?(Параметры.Свойство("ХозяйственнаяОперация"),"ПланЗамещающий.ХозяйственнаяОперация = &ХозяйственнаяОперация","Истина"));
		
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	Запрос.УстановитьПараметр("ВидПлана", Параметры.ВидПлана);
	Запрос.УстановитьПараметр("СтатусИндекс", Перечисления.СтатусыПланов.Индекс(Параметры.Статус));
	Запрос.УстановитьПараметр("Статус", Параметры.Статус);
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	Запрос.УстановитьПараметр(ИмяРеквизитаНачалоПериода, Параметры[ИмяРеквизитаНачалоПериода]);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Параметры.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Периодичность", Параметры.Периодичность);
	Запрос.УстановитьПараметр("ПериодыПлана", ПериодыПлана);
	
	Если Параметры.Свойство("Подразделение") Тогда
		Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	КонецЕсли;
	Если Параметры.Свойство("Партнер") Тогда
		Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
	КонецЕсли;
	Если Параметры.Свойство("Соглашение") Тогда
		Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
	КонецЕсли;
	Если Параметры.Свойство("Склад") Тогда
		Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	КонецЕсли;
	Если Параметры.Свойство("ФорматМагазина") Тогда
		Запрос.УстановитьПараметр("ФорматМагазина", Параметры.ФорматМагазина);
	КонецЕсли;
	Если Параметры.Свойство("Менеджер") Тогда
		Запрос.УстановитьПараметр("Менеджер", Параметры.Менеджер);
	КонецЕсли;
	Если Параметры.Свойство("Назначение") Тогда
		Запрос.УстановитьПараметр("Назначение", Параметры.Назначение);
	КонецЕсли;
	Если Параметры.Свойство("ХозяйственнаяОперация") Тогда
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура обновляет гиперссылку переходу к замещенным и замещающим планам
//	
// Параметры:
//	Форма - РасширениеУправляемойФормыДляДокумента - Форма документа плана:
// * Объект - ДокументОбъект - 
//
Процедура ОбновитьГиперссылкуЗамещение(Форма) Экспорт
	
	Объект = Форма.Объект;
	Запрос = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ЗапросЗамещенныеИЗамещающиеПланы(Объект);
	
	ЗапросПакет = Запрос.ВыполнитьПакет();
	ТЗЗамещающиеПланы = ЗапросПакет[0].Выгрузить();
	ТЗЗамещенныеПланы = ЗапросПакет[1].Выгрузить();
	
	МассивСтроки = Новый Массив;
	Если ТЗЗамещенныеПланы.Количество() > 0 Тогда
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Замещенные ('") + ТЗЗамещенныеПланы.Количество() + ")",,ЦветаСтиля.ЦветТекстаУспех,,"Замещенные"));
	КонецЕсли;
	Если ТЗЗамещающиеПланы.Количество() > 0 Тогда
		Если МассивСтроки.Количество()>0 Тогда
			МассивСтроки.Добавить(", ");
		КонецЕсли;
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Замещающие ('") + ТЗЗамещающиеПланы.Количество() + ")",,ЦветаСтиля.ЦветТекстаПроблема,,"Замещающие"));
	КонецЕсли;
	Если МассивСтроки.Количество()= 0 Тогда
		МассивСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Без замещения'"),,ЦветаСтиля.ГиперссылкаЦвет));
	КонецЕсли;
	Форма.ЗамещениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(МассивСтроки);
	
КонецПроцедуры

// Возвращает признак требуется ли для плана сделать замещение/отмену замещения.
//
// Параметры:
//	Ссылка - ДокументСсылка.ПланПродаж, ДокументСсылка.ПланПродажПоКатегориям, ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланЗакупок, ДокументСсылка.ПланОстатков, ДокументСсылка.ПланСборкиРазборки - ссылка на проверяемый план.
//
// Возвращаемое значение:
//	Булево - возвращает Истина, если для плана требуется выполнить замещение/отмену замещения.
//
Функция КонтрольЗамещенияПлана(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗамещениеПланов.ЗамещающийПлан
	|ИЗ
	|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
	|ГДЕ
	|	ЗамещениеПланов.ЗамещенныйПлан = &Ссылка
	|	И (ЗамещениеПланов.КЗамещению
	|			ИЛИ ЗамещениеПланов.КОтменеЗамещения)
	|	И НЕ(ЗамещениеПланов.КЗамещению
	|				И ЗамещениеПланов.КОтменеЗамещения)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает признак требуется ли выполнить замещение/отмену замещения планов.
//
Процедура КонтрольЗамещенияПланов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗамещениеПланов.ЗамещенныйПлан КАК ЗамещенныйПлан
	|ИЗ
	|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
	|ГДЕ
	|	(ЗамещениеПланов.КЗамещению
	|			ИЛИ ЗамещениеПланов.КОтменеЗамещения)
	|	И НЕ(ЗамещениеПланов.КЗамещению
	|				И ЗамещениеПланов.КОтменеЗамещения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Планирование.ЗапускВыполненияФоновогоПроведенияПлана();
	КонецЕсли;
		
КонецПроцедуры

// Возвращает признак есть ли записи в регистре "Замещение планов" по плану.
//
// Параметры:
//	Ссылка - ДокументСсылка.ПланПродаж, ДокументСсылка.ПланПродажПоКатегориям, ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланЗакупок, ДокументСсылка.ПланОстатков, ДокументСсылка.ПланСборкиРазборки - ссылка на проверяемый план.
//
// Возвращаемое значение:
//	Булево - возвращает Истина, если для плана есть записи.
//
Функция ЕстьЗамещениеПлана(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗамещениеПланов.ЗамещенныйПлан КАК ЗамещенныйПлан
	|ИЗ
	|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
	|ГДЕ
	|	ЗамещениеПланов.ЗамещенныйПлан = &Ссылка
	|			ИЛИ ЗамещениеПланов.ЗамещающийПлан = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();
		
КонецФункции

// Для переданных ссылок производится отмена проведения в порядке их даты.
//
// Параметры:
//  МассивСсылок - 	Массив, ДокументСсылка.ПланПродаж, ДокументСсылка.ПланПродажПоКатегориям, ДокументСсылка.ПланПроизводства, ДокументСсылка.ПланЗакупок, ДокументСсылка.ПланОстатков, ДокументСсылка.ПланСборкиРазборки - массив ссылок на планы
//  ИмяДокумента - Строка - имя документа плана.
// 
Процедура ОтменитьПроведениеПланов(МассивСсылок, ИмяДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланПродаж.Ссылка,
	|	ПланПродаж.ВидПлана КАК ВидПлана,
	|	ПРЕДСТАВЛЕНИЕ(ПланПродаж.Ссылка) КАК Представление,
	|	ПланПродаж.Дата КАК Дата
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПлана,
	|	Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		".ПланПродаж",
		"."+ИмяДокумента);
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонОшибки = НСтр("ru = 'Не удалось выполнить отмену проведения документа %Документ%. %ОписаниеОшибки%'");
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", Выборка.Представление);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормыНастройкиПравилаЗаполнения

// Функция проверяет корректность настроек в правиле заполнения
//
// Параметры:
//  ПравилоЗаполнения               - ТаблицаЗначений - Таблица с источниками и настройками правила:
//                                    * Источник - СправочникСсылка.ИсточникиДанныхПланирования - 
//  АдресСхемыПреобразованияДанных  - Строка - Адрес временного хранилища данных со схемой преобразования данных
//  ВидПлана                        - СправочникСсылка.ВидыПланов - Ссылка на вид плана, для определения полей схемы
//  ИмяРеквизитаПравила             - Строка - Имя реквизита для которого устанавливать сообщение ошибки
//  ОтборПоРесурсам - Структура - где:
//   *Количество - Булево
//   *Цена - Булево
//   *Сумма - Булево
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьПравилоЗаполнения(Знач ПравилоЗаполнения, Знач АдресСхемыПреобразованияДанных, Знач ВидПлана = Неопределено, Знач ИмяРеквизитаПравила = "", ОтборПоРесурсам) Экспорт 
	
	ПравилоКорректно = Истина;
	
	ПоляСхемы = ПолучитьПоляСхемыПреобразованияДанных(АдресСхемыПреобразованияДанных, ВидПлана);
	
	НаличиеОбязательныхПолей = Истина;
	НаличиеОбязательногоПоляПериод = Истина;
	СоответствиеПолямДокумента = Истина;
	
	// Проверка источников строк (объединения)
	СоответствиеПолямИсточников = Истина;
	ПоляЭталонногоИсточника = Новый Структура;
	ЕстьПоляЭталонногоИсточника = Ложь;
	ЕстьПолеКоличества = Истина;
		
	НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, ТипЭлемента", Ложь, 0));
	
	ОбязательныеПоля = Новый Массив;
	Для Каждого Поле Из ПоляСхемы Цикл
		Если Поле = "Номенклатура"
			Или Поле = "ТоварнаяКатегория" Тогда
			ОбязательныеПоля.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьПравилаЗаполнения = Ложь;
	НомераСтрокОбязательныеПоля = Новый Массив;
	НомераСтрокПоляДокумента = Новый Массив;
	НомераСтрокОбязательноеПолеПериод = Новый Массив;
	НомераСтрокБезПоляКоличество = Новый Массив;
	Для каждого ЭлементПравила Из НайденныеСтроки Цикл
		
		Если НЕ ЭлементПравила.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементПравила.Источник, 
			"ИмяШаблонаСКД, СхемаКомпоновкиДанных");
		
		Если Реквизиты.СхемаКомпоновкиДанных = Неопределено Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru = 'Источник заполнения не заполнен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
			СхемаКомпоновкиДанных = Справочники.ИсточникиДанныхПланирования.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
			КонецЕсли; 
		Иначе
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли;
		
		ХранилищеПользовательскихНастроек = ЭлементПравила.ПользовательскиеНастройки;// ХранилищеЗначения
		ПользовательскиеНастройки = ХранилищеПользовательскихНастроек.Получить();
		
		// Загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		УстановитьПривилегированныйРежим(Истина);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		УстановитьПривилегированныйРежим(Ложь);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
		КонецЕсли;
		
		ИзменитьНаСезонныйКоэффициент = Ложь;
		Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ИзменитьНаСезонныйКоэффициент");
		Если Параметр <> Неопределено Тогда
			ИзменитьНаСезонныйКоэффициент = Параметр.Значение;
		КонецЕсли;
		
		КомпоновщикПоляГруппировки = ПланированиеКлиентСервер.ПолучитьПоляГруппировок(КомпоновщикНастроек);
		
		КомпоновщикПоляВыбора = ПланированиеКлиентСервер.ПолучитьПоляВыбора(КомпоновщикНастроек);
		
		Если КомпоновщикПоляГруппировки.Количество() = 0 И КомпоновщикПоляВыбора.Количество() = 0 Тогда
			СоответствиеПолямДокумента = Ложь;
			НомераСтрокПоляДокумента.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		ПоляИсточника = Новый Массив;
		Для каждого Группировка Из КомпоновщикПоляГруппировки Цикл
			Если НЕ Группировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(Группировка.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
				НомераСтрокПоляДокумента.Добавить(ЭлементПравила.НомерСтроки);
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(Группировка.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(Группировка.Поле));
			КонецЕсли; 
		КонецЦикла;
		
		ЕстьПолеКоличества = Ложь;
		ПолеКоличества = Новый ПолеКомпоновкиДанных("Количество");
		Для каждого ВыбранноеПоле Из КомпоновщикПоляВыбора Цикл
			Если НЕ ВыбранноеПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
				НомераСтрокПоляДокумента.Добавить(ЭлементПравила.НомерСтроки);
			КонецЕсли;
			Если ВыбранноеПоле.Поле = ПолеКоличества Тогда
				ЕстьПолеКоличества = Истина;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(ВыбранноеПоле.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПолеКоличества Тогда
			НомераСтрокБезПоляКоличество.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		Если ЕстьПоляЭталонногоИсточника И ПоляИсточника.Количество() <> ПоляЭталонногоИсточника.Количество() Тогда
			СоответствиеПолямИсточников = Ложь;
		КонецЕсли; 
		
		ЕстьОбязательныеПоля = Ложь;
		ЕстьОбязательноеПолеПериод = Ложь;
		Для Каждого ПолеИсточника Из ПоляИсточника Цикл
			Если ОбязательныеПоля.Найти(ПолеИсточника) <> Неопределено Тогда
				ЕстьОбязательныеПоля = Истина;
			КонецЕсли;
			Если ИзменитьНаСезонныйКоэффициент И ПолеИсточника = "Период" Тогда
				ЕстьОбязательноеПолеПериод = Истина;
			КонецЕсли;
			Если ЕстьОбязательныеПоля И (ЕстьОбязательноеПолеПериод ИЛИ НЕ ИзменитьНаСезонныйКоэффициент) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОбязательныеПоля Тогда
			НаличиеОбязательныхПолей = Ложь;
			НомераСтрокОбязательныеПоля.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		Если ИзменитьНаСезонныйКоэффициент И НЕ ЕстьОбязательноеПолеПериод Тогда
			НаличиеОбязательногоПоляПериод = Ложь;
			НомераСтрокОбязательноеПолеПериод.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		ЕстьПоляЭталонногоИсточника = Истина;
		
		ЕстьПравилаЗаполнения = Истина;
		
		Если НЕ СоответствиеПолямДокумента И НЕ СоответствиеПолямИсточников И НЕ НаличиеОбязательныхПолей Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Не ЕстьПравилаЗаполнения Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнены источники заполнения количества.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если НЕ СоответствиеПолямДокумента ИЛИ НЕ СоответствиеПолямИсточников ИЛИ НЕ НаличиеОбязательныхПолей ИЛИ НЕ НаличиеОбязательногоПоляПериод ИЛИ НЕ ЕстьПолеКоличества Тогда
		ПравилоКорректно = Ложь;
	КонецЕсли;
		
	ТекстОшибки = НСтр("ru = 'Список полей источников заполнения количества различается. Отредактируйте группировки и выбранные поля.'");
	Если НЕ СоответствиеПолямИсточников Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли; 
	
	ТекстОшибки = НСтр("ru = 'Состав полей, возвращаемых источниками заполнения количества, не совпадает с данными документа. Отредактируйте ""Группировки"" и ""Выбранные поля"", исключив ненужные поля %1.'");
	Если НЕ СоответствиеПолямДокумента Тогда
		
		НомераСтрокПоляДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НомераСтрокПоляДокумента);
		Если НомераСтрокПоляДокумента.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокПоляДокумента, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокПоляДокумента, ", "));
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
		
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'В списке полей источника отсутствует обязательное поле ""%1"". Отредактируйте группировки и выбранные поля %2.'");
	
	Если НЕ НаличиеОбязательныхПолей Тогда
		Если НомераСтрокОбязательныеПоля.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбязательныеПоля[0], НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокОбязательныеПоля, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбязательныеПоля[0], НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокОбязательныеПоля, ", "));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'В составе полей, возвращаемых источниками заполнения количества, отсутствует поле ""Количество"" %1. Отредактируйте ""Выбранные поля"" или используйте другой источник'");
	Если НЕ ЕстьПолеКоличества Тогда
		
		Если НомераСтрокБезПоляКоличество.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокБезПоляКоличество, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокБезПоляКоличество, ", "));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'При использовании сезонных коэффициентов необходимо в списке полей источника указать поле ""Период"". Отредактируйте группировки и выбранные поля %1.'");
	
	Если НЕ НаличиеОбязательногоПоляПериод Тогда
		Если НомераСтрокОбязательноеПолеПериод.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокОбязательноеПолеПериод, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокОбязательноеПолеПериод, ", "));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	// Проверка источников колонок (присоединения)
	СоответствиеПолямИсточников = Истина;
	СоответствиеПолямДокумента = Истина;
	ПоляЭталонногоИсточника = Новый Структура;
	ЕстьПоляЭталонногоИсточника = Ложь;
	ЕстьПолеЦены = Истина;
	НаличиеОбязательногоПоляПериод = Истина;
	
	НомераСтрокОбязательныеПоля = Новый Массив;
	НомераСтрокПоляДокумента = Новый Массив;
	НомераСтрокБезПолеЦены = Новый Массив;
	НомераСтрокОбязательноеПолеПериод = Новый Массив;
	
	НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, ТипЭлемента", Истина, 0));
	Для каждого ЭлементПравила Из НайденныеСтроки Цикл
		
		Если НЕ ЭлементПравила.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементПравила.Источник, 
			"ИмяШаблонаСКД, СхемаКомпоновкиДанных");
		
		Если Реквизиты.СхемаКомпоновкиДанных = Неопределено Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru = 'Источник заполнения не заполнен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
			СхемаКомпоновкиДанных = Справочники.ИсточникиДанныхПланирования.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
			КонецЕсли; 
		Иначе
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли;
		ХранилищеПользовательскихНастроек = ЭлементПравила.ПользовательскиеНастройки;// ХранилищеЗначения
		ПользовательскиеНастройки = ХранилищеПользовательскихНастроек.Получить();
		
		// Загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
		КонецЕсли;
		
		ИзменитьНаСезонныйКоэффициент = Ложь;
		Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ИзменитьНаСезонныйКоэффициент");
		Если Параметр <> Неопределено Тогда
			ИзменитьНаСезонныйКоэффициент = Параметр.Значение;
		КонецЕсли;
		
		КомпоновщикПоляГруппировки = ПланированиеКлиентСервер.ПолучитьПоляГруппировок(КомпоновщикНастроек);
		
		КомпоновщикПоляВыбора = ПланированиеКлиентСервер.ПолучитьПоляВыбора(КомпоновщикНастроек);
		
		Если КомпоновщикПоляГруппировки.Количество() = 0 И КомпоновщикПоляВыбора.Количество() = 0 Тогда
			СоответствиеПолямДокумента = Ложь;
			НомераСтрокПоляДокумента.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		ЕстьОбязательныеПолеПериод = Ложь;
		ПоляИсточника = Новый Массив;
		Для каждого Группировка Из КомпоновщикПоляГруппировки Цикл
			Если НЕ Группировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ИзменитьНаСезонныйКоэффициент И Строка(Группировка.Поле) = "Период" Тогда
				ЕстьОбязательныеПолеПериод = Истина;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(Группировка.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
				НомераСтрокПоляДокумента.Добавить(ЭлементПравила.НомерСтроки);
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(Группировка.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(Группировка.Поле));
			КонецЕсли; 
		КонецЦикла;
		
		ЕстьПолеЦены = Ложь;
		ПолеЦены = Новый ПолеКомпоновкиДанных("Цена");
		Для каждого ВыбранноеПоле Из КомпоновщикПоляВыбора Цикл
			Если НЕ ВыбранноеПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
				НомераСтрокПоляДокумента.Добавить(ЭлементПравила.НомерСтроки);
			КонецЕсли;
			Если ВыбранноеПоле.Поле = ПолеЦены Тогда
				ЕстьПолеЦены = Истина;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(ВыбранноеПоле.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПолеЦены Тогда
			НомераСтрокБезПолеЦены.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		Если ИзменитьНаСезонныйКоэффициент И НЕ ЕстьОбязательныеПолеПериод Тогда
			НаличиеОбязательногоПоляПериод = Ложь;
			НомераСтрокОбязательноеПолеПериод.Добавить(ЭлементПравила.НомерСтроки);
		КонецЕсли;
		
		Если ЕстьПоляЭталонногоИсточника И ПоляИсточника.Количество() <> ПоляЭталонногоИсточника.Количество() Тогда
			СоответствиеПолямИсточников = Ложь;
		КонецЕсли; 
		
		ЕстьПоляЭталонногоИсточника = Истина;
		
		Если НЕ СоответствиеПолямДокумента И НЕ СоответствиеПолямИсточников Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ СоответствиеПолямДокумента ИЛИ НЕ СоответствиеПолямИсточников ИЛИ НЕ ЕстьПолеЦены ИЛИ НЕ НаличиеОбязательногоПоляПериод Тогда
		ПравилоКорректно = Ложь;
	КонецЕсли;
		
	ТекстОшибки = НСтр("ru = 'Состав полей, возвращаемых источниками заполнения цены, различается. Отредактируйте ""Группировки"" и ""Выбранные поля"", чтобы каждый источник возвращал одинаковый состав полей.'");
	Если НЕ СоответствиеПолямИсточников Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Состав полей, возвращаемых источниками заполнения цены, не совпадает с данными документа. Отредактируйте ""Группировки"" и ""Выбранные поля"", исключив ненужные поля %1.'");
	Если НЕ СоответствиеПолямДокумента Тогда
		
		НомераСтрокПоляДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НомераСтрокПоляДокумента);
		Если НомераСтрокПоляДокумента.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокПоляДокумента, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокПоляДокумента, ", "));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
		
	КонецЕсли; 
	
	ТекстОшибки = НСтр("ru = 'В составе полей, возвращаемых источниками заполнения цены, отсутствует поле ""Цена"" %1. Отредактируйте ""Выбранные поля"" или используйте другой источник'");
	Если НЕ ЕстьПолеЦены Тогда
		
		Если НомераСтрокБезПолеЦены.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокБезПолеЦены, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокБезПолеЦены, ", "));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'При использовании сезонных коэффициентов необходимо в списке полей источника указать поле ""Период"". Отредактируйте группировки и выбранные поля %1.'");
	
	Если НЕ НаличиеОбязательногоПоляПериод Тогда
		Если НомераСтрокОбязательноеПолеПериод.Количество() > 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строках:'") + " " + СтрСоединить(НомераСтрокОбязательноеПолеПериод, ", "));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='в строке'") + " " + СтрСоединить(НомераСтрокОбязательноеПолеПериод, ", "));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	КоличествоИсточниковЗаполненияКоличестваПервогоУровня = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, НомерСтрокиРодитель", Ложь, 0)).Количество();
	КоличествоИсточниковЗаполненияЦеныПервогоУровня = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, НомерСтрокиРодитель", Истина, 0)).Количество();
	
	Если КоличествоИсточниковЗаполненияКоличестваПервогоУровня > 1 
		И ОтборПоРесурсам.Количество Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Установлен отбор на поле ресурса ""Количество"", для корректного применения отбора источники должны быть сгруппированы на первом уровне.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если КоличествоИсточниковЗаполненияЦеныПервогоУровня > 1 
		И ОтборПоРесурсам.Цена Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Установлен отбор на поле ресурса ""Цена"", для корректного применения отбора источники должны быть сгруппированы на первом уровне.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если (КоличествоИсточниковЗаполненияЦеныПервогоУровня > 1
		Или КоличествоИсточниковЗаполненияКоличестваПервогоУровня > 1)
		И ОтборПоРесурсам.Сумма Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Установлен отбор на поле ресурса ""Сумма"", для корректного применения отбора источники должны быть сгруппированы на первом уровне.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Возврат ПравилоКорректно;

КонецФункции 

// Кэширует текущие значения настроек планирования и формирует информационные надписи.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой выполняются действия.
//
Процедура СохранитьНовыйПериод(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	// Сохранение значений из полей периода
	Форма.СценарийДоИзменения           = Объект.Сценарий;
	Форма.ВидПланаДоИзменения           = Объект.ВидПлана;
	Форма.ПериодичностьДоИзменения      = Объект.Периодичность;
	Форма.НачалоПериодаДоИзменения      = Объект.НачалоПериода;
	Форма.ОкончаниеПериодаДоИзменения   = Объект.ОкончаниеПериода;
	Форма.ПланироватьПоСуммеДоИзменения = Объект.ПланироватьПоСумме;
	
	Форма.НадписьПериодичностьВалюта = "";
	
	Если Не Объект.Периодичность.Пустая() Тогда
		Форма.НадписьПериодичностьВалюта = Форма.НадписьПериодичностьВалюта +НСтр("ru = 'Периодичность'") + ": " + Строка(Объект.Периодичность);
	КонецЕсли;
	Если Объект.ПланироватьПоСумме Тогда
		Форма.НадписьПериодичностьВалюта = Форма.НадписьПериодичностьВалюта + ", " + НСтр("ru = 'Валюта'") + ": " + Строка(Объект.Валюта);
	КонецЕсли; 
	
КонецПроцедуры

// Функция получает массив полей схемы преобразования данных в документ плана
//
// Параметры:
//  АдресСхемыПреобразованияДанных  - Строка - Адрес временного хранилища, в котором сохранена схема 
//                 преобразования данных в документ
//  ВидПлана  - СправочникСсылка.ВидыПланов - Ссылка на вид плана по которому заполняется документ.
//
// Возвращаемое значение:
//   Массив   - Список полей, которые можно использовать для заполнения документа.
//
Функция ПолучитьПоляСхемыПреобразованияДанных(Знач АдресСхемыПреобразованияДанных, Знач ВидПлана = Неопределено) Экспорт 

	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыПреобразованияДанных); // СхемаКомпоновкиДанных - 
	
	ОтключитьНеиспользуемыеПоляСхемыПреобразования(СхемаКомпоновки, ВидПлана);
	
	ПоляСхемы = Новый Массив;
	Если СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Количество() > 0 Тогда
		ПоляГруппировки = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Иначе
		ПоляГруппировки = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ДоступныеПоляГруппировок.Элементы;
	КонецЕсли; 
	
	Для каждого Группировка Из ПоляГруппировки Цикл
		
		Если Группировка.Использование И ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
			ПоляСхемы.Добавить(Строка(Группировка.Поле));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы Цикл
		
		Если ВыбранноеПоле.Использование И ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
			ПоляСхемы.Добавить(Строка(ВыбранноеПоле.Поле));
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПоляСхемы;
	
КонецФункции 

// Процедура отключает неиспользуемые поля по виду плана
//
// Параметры:
//  СКДПреобразования  - СхемаКомпоновкиДанных - Схема в которой необходимо отключить поля
//  ВидПлана  - СправочникСсылка.ВидыПланов - Вид плана по которому заполняется документ.
//
Процедура ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Преобразование, Знач ВидПлана) 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеПоля = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Характеристика"));
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "Владелец, ТипПлана, ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашение, ЗаполнятьСоглашениеВТЧ, ЗаполнятьСкладВТЧ, ЗаполнятьНазначениеВТЧ");
	Если ЗначенияРеквизитов.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям
		И ЗначениеЗаполнено(ЗначенияРеквизитов.Владелец) Тогда
		ИспользоватьРасчетПоСкоростиПродаж = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.Владелец, "ИспользоватьРасчетПоСкоростиПродаж");
		Если НЕ ИспользоватьРасчетПоСкоростиПродаж = Истина Тогда
			УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("РейтингПродаж"));
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначенияРеквизитов.ЗаполнятьПартнераВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Партнер"));
	КонецЕсли; 
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСоглашениеВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Соглашение"));
	КонецЕсли;
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСоглашениеВТЧ И НЕ ЗначенияРеквизитов.ЗаполнятьСоглашение Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("ВидЦеныПоставщика"));
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьНазначениеВТЧ 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Назначение"));
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСкладВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Склад"));
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Склад.Календарь"));
	КонецЕсли;
	
	Если УдаляемыеПоля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура.Количество() > 0 Тогда
		ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Иначе
		ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.ДоступныеПоляГруппировок.Элементы;
	КонецЕсли; 
	
	Для каждого Группировка Из ПоляГруппировки Цикл
		
		Если УдаляемыеПоля.Найти(Группировка.Поле) <> Неопределено Тогда
			Группировка.Использование = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СКД_Преобразование.ВариантыНастроек[0].Настройки.Выбор.Элементы Цикл
		
		Если УдаляемыеПоля.Найти(ВыбранноеПоле.Поле) <> Неопределено Тогда
			ВыбранноеПоле.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборТаблицаСостава = СКД_Преобразование.НаборыДанных.Найти("ТаблицаСостава");
	Если НаборТаблицаСостава <> Неопределено Тогда
	
		Для каждого Поле Из УдаляемыеПоля Цикл
		
			НайденноеПоле = НаборТаблицаСостава.Поля.Найти(Строка(Поле));
			Если НайденноеПоле <> Неопределено Тогда
			
				НаборТаблицаСостава.Поля.Удалить(НайденноеПоле);
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
	Пока  Индекс >= 0 Цикл
		Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
		Индекс = Индекс - 1;
		
		Если УдаляемыеПоля.Найти(Новый ПолеКомпоновкиДанных(Связь.ВыражениеИсточник))  <> Неопределено
			ИЛИ УдаляемыеПоля.Найти(Новый ПолеКомпоновкиДанных(Связь.ВыражениеПриемник))  <> Неопределено Тогда
			
			СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#Область Отчет_СбалансированностьПланов

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура СбалансированностьПлановПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт

	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", ЭтаФорма.КлючТекущегоВарианта);
	
	// Изменение настроек по функциональным опциям
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыЗакупки");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПродаж");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
		Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПроизводства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыСборки");
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыКомплектующих");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеВнутреннихПотреблений") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыВнутреннихПотреблений");
	КонецЕсли;
	
	НовыеНастройкиКД = КомпоновщикНастроек.Настройки;
	
КонецПроцедуры

// Вызывается в обработчике "ПриЗагрузкеПользовательскихНастроекНаСервере"
//   формы отчета до выполнения кода формы.
//
// Параметры:
// 	ЭтаФорма - ФормаКлиентскогоПриложения - 
// 	НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - 
Процедура СбалансированностьПлановПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных - 
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		КонтекстныеНастройки = ПолучитьПользовательскиеНастройкиСОтборомПоДокументам(Параметры.ПараметрКоманды);
		
		Если КонтекстныеНастройки.Свойство("Номенклатура") Тогда
			
			МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, "Номенклатура");
			Если МассивЭлементов.Количество() = 0 Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					КомпоновщикНастроек,
					"Номенклатура",
					КонтекстныеНастройки.Номенклатура,
					ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
					Истина, 
					Новый Структура("ВПользовательскиеНастройки", Истина));
			Иначе
				
				ЭлементОтбора = МассивЭлементов[0];
				ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
				ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
				Если ЭлементПользовательскихНастроек = Неопределено Тогда
					КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
						КомпоновщикНастроек,
						"Номенклатура",
						КонтекстныеНастройки.Номенклатура,
						ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, 
						Истина, 
						Новый Структура("ВПользовательскиеНастройки", Истина));
				Иначе
					ЭлементПользовательскихНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					ЭлементПользовательскихНастроек.ПравоеЗначение = Новый СписокЗначений;
					ЭлементПользовательскихНастроек.ПравоеЗначение.ЗагрузитьЗначения(КонтекстныеНастройки.Номенклатура);
					ЭлементПользовательскихНастроек.Использование = Истина;
				КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		Если КонтекстныеНастройки.Свойство("Период") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,"Период",КонтекстныеНастройки.Период);
		КонецЕсли; 
		Если КонтекстныеНастройки.Свойство("Сценарий") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,"Сценарий",КонтекстныеНастройки.Сценарий);
		КонецЕсли;
		Если КонтекстныеНастройки.Свойство("СценарииСравнения") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,
				"СценарииСравнения",КонтекстныеНастройки.СценарииСравнения);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
	
		ПараметрГруппироватьПоСкладам = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ГруппироватьПоСкладам");
		Если ПараметрГруппироватьПоСкладам <> Неопределено Тогда
			ПараметрГруппироватьПоСкладам.Значение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение настроек по функциональным опциям
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеЗакупок") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыЗакупки");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПродаж");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
		Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыПроизводства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеСборкиРазборки") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыСборки");
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыКомплектующих");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеВнутреннихПотреблений") Тогда
		УдалитьОтборПоПредставлению(КомпоновщикНастроек, КомпоновщикНастроек, "ТипПлана", "ПланыВнутреннихПотреблений");
	КонецЕсли;
	
	НовыеПользовательскиеНастройкиКД = КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
// 	Отказ - Булево -
Процедура СбалансированностьПлановОбработкаПроверкиЗаполнения(КомпоновщикНастроек, Отказ) Экспорт 

	ПланыОстатков   = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыОстатков");
	Статус          = ПолучитьОтбор(КомпоновщикНастроек, "Статус", "");
	СтатусыСценария = Новый Массив;
	
	ПланыОстатковИспользование = (ПланыОстатков <> Неопределено И ПланыОстатков.Использование);
	
	Для каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПланыОстатков <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыОстатков.ИдентификаторПользовательскойНастройки Тогда
			ПланыОстатковИспользование = ЭлементНастройки.Использование;
		КонецЕсли;
		Если Статус <> Неопределено И ЭлементНастройки.ИдентификаторПользовательскойНастройки = Статус.ИдентификаторПользовательскойНастройки Тогда
			Если ЭлементНастройки.Использование Тогда
				Для Каждого Элемент Из ЭлементНастройки.ПравоеЗначение Цикл
					СтатусыСценария.Добавить(Элемент.Значение);
				КонецЦикла;
			Иначе
				СтатусыСценария.Добавить(Перечисления.СтатусыПланов.Утвержден);
				СтатусыСценария.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
				СтатусыСценария.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Сценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий");

	СценарииСравнения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ПользовательскиеНастройки, "СценарииСравнения");
	
	Если СценарииСравнения <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СравнениеСценариев", Истина);
		ЗначениеСценариевСравнения = СценарииСравнения.Значение;
	Иначе
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СравнениеСценариев", Ложь);
	КонецЕсли;

	Если Сценарий <> Неопределено И ЗначениеЗаполнено(Сценарий.Значение) Тогда
		ПараметрыСценария = ПараметрыСценария(Сценарий.Значение);
		Для каждого КлючИЗначение Из ПараметрыСценария Цикл
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, КлючИЗначение.Ключ,КлючИЗначение.Значение);
		КонецЦикла;
		
		ИспользоватьПланыОстатков = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеОстатков");
		
		ИспользоватьРасчетПлановОстатков = ИспользоватьПланыОстатков
			И ПараметрыСценария.ИспользоватьВПланированииОстатков
			И ПланыОстатковИспользование
			И (КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВариантНаименование = НСтр("ru = 'Сбалансированность планов за период'")
			ИЛИ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВариантНаименование = НСтр("ru = 'Сравнение сценариев за период'"));
		
		Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Период");
		ПериодЗначение = Период.Значение; // СтандартныйПериод -
		
		Если ИспользоватьРасчетПлановОстатков Тогда
			ПараметрыРасчетаНачалаНакопленияОстатка = Новый Структура();
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Сценарий", Сценарий.Значение);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Периодичность", ПараметрыСценария.Периодичность);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("СтатусыСценария", СтатусыСценария);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Ссылка", Неопределено); 
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("НачалоПериода", ПериодЗначение.ДатаНачала);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("КонецПериода", ПериодЗначение.ДатаОкончания);
			
			Результат = ПолучитьПериодыПлановОстатков(ПараметрыРасчетаНачалаНакопленияОстатка);
			ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода = Результат.ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода;
			
		КонецЕсли;
		
		ИспользоватьРасчетПлановОстатковСценариев = Ложь;
		Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВариантНаименование = НСтр("ru = 'Сравнение сценариев за период'")
		   И ИспользоватьПланыОстатков И СценарииСравнения <> Неопределено И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
			
			МассивПериодовПлановОстатковСценариевЗаПериодБольшеНачалоПериода = Новый Массив;
			МассивСценариев                                                  = Новый Массив;
			
			Если ТипЗнч(ЗначениеСценариевСравнения) <> Тип("СписокЗначений") Тогда
				МассивСценариев.Добавить(ЗначениеСценариевСравнения);
			Иначе
				Для Каждого ДополнительныйСценарий Из ЗначениеСценариевСравнения Цикл
					МассивСценариев.Добавить(ДополнительныйСценарий.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ДопСценарий Из МассивСценариев Цикл
				
				ПараметрыСценариев = ПараметрыСценария(ДопСценарий);
				Если ПараметрыСценариев.ИспользоватьВПланированииОстатков И ПланыОстатковИспользование Тогда
					
					ИспользоватьРасчетПлановОстатковСценариев = Истина;
					
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения = Новый Структура();
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("Сценарий", ДопСценарий);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("Периодичность", ПараметрыСценария.Периодичность);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("СтатусыСценария", СтатусыСценария);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("Ссылка", Неопределено);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("НачалоПериода", ПериодЗначение.ДатаНачала);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("КонецПериода", ПериодЗначение.ДатаОкончания);
					
					РезультатСценариев = ПолучитьПериодыПлановОстатков(ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения);
					
					Для Каждого ПериодПланаОстатков Из РезультатСценариев.ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода Цикл
						МассивПериодовПлановОстатковСценариевЗаПериодБольшеНачалоПериода.Добавить(ПериодПланаОстатков);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИспользоватьРасчетПлановОстатковСценариев Тогда
				
				Если ИспользоватьРасчетПлановОстатков Тогда
					
					ОбъединениеМассивовПериодовПлановОстатков = ОбъединитьМассивы(
						ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода,
						МассивПериодовПлановОстатковСценариевЗаПериодБольшеНачалоПериода);
					
					ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода = ОбъединениеМассивовПериодовПлановОстатков;
				Иначе
					ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода = МассивПериодовПлановОстатковСценариевЗаПериодБольшеНачалоПериода;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода <> Неопределено Тогда
			Если ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода.Количество() > 0 Тогда
				СтрокаПериодыПланаОстатков = "";
				Для Каждого ПериодПланаОстатков Из ПериодыПлановОстаткаЗаПериодБольшеНачалоПериода Цикл
					Если СтрокаПериодыПланаОстатков <> "" Тогда
						СтрокаПериодыПланаОстатков = СтрокаПериодыПланаОстатков + ";";
					КонецЕсли;
					СтрокаПериодыПланаОстатков = СтрокаПериодыПланаОстатков + " " + Формат(ПериодПланаОстатков, "ДЛФ=D");
				КонецЦикла;
				
				ТекстСообщения = НСтр("ru = 'В пределах периода отчета найдены планы остатков в следующих периодах: ""%СтрокаПериодыПланаОстатков%"". Сбалансированность можно отобразить, если планы остатков не разрывают период отчета.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаПериодыПланаОстатков%", СтрокаПериодыПланаОстатков);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено обязательное поле ""Сценарий"".'"), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике "ПриКомпоновкеРезультата" при формировании отчета
// 
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - 
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
// 	ДокументРезультат - ТабличныйДокумент - 
// 	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - 
// 	СтандартнаяОбработка - Булево
Процедура СбалансированностьПлановПриКомпоновкеРезультата(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	ПланыЗакупок               = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыЗакупок");
	ПланыОстатков              = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыОстатков");
	ПланыПродаж                = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыПродаж");
	ПланыПроизводства          = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыПроизводства");
	ПланыСборкиКомплекты       = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыСборкиКомплекты");
	ПланыРазборкиКомплекты     = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыРазборкиКомплекты");
	ПланыСборкиКомплектующие   = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыСборкиКомплектующие");
	ПланыРазборкиКомплектующие = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыРазборкиКомплектующие");
	ПланыМатериалов            = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыМатериалов");
	ПланыВнутреннихПотреблений = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "ПланыВнутреннихПотреблений");
	КорректировкиПотребностей  = ПолучитьОтбор(КомпоновщикНастроек, "ТипПлана", "КорректировкиПотребностей");
	Статус                     = ПолучитьОтбор(КомпоновщикНастроек, "Статус", "");
	СтатусыСценария            = Новый Массив;

	ИспользованиеПланов = Новый Структура();
	ИспользованиеПланов.Вставить("ПланыЗакупок");
	ИспользованиеПланов.Вставить("ПланыОстатков");
	ИспользованиеПланов.Вставить("ПланыПродаж");
	ИспользованиеПланов.Вставить("ПланыПроизводства");
	ИспользованиеПланов.Вставить("ПланыСборкиКомплекты");
	ИспользованиеПланов.Вставить("ПланыРазборкиКомплекты");
	ИспользованиеПланов.Вставить("ПланыСборкиКомплектующие");
	ИспользованиеПланов.Вставить("ПланыРазборкиКомплектующие");
	ИспользованиеПланов.Вставить("ПланыМатериалов");
	ИспользованиеПланов.Вставить("ПланыВнутреннихПотреблений");
	ИспользованиеПланов.Вставить("КорректировкиПотребностей");

	ВыбранныеПоля                                  = Неопределено;
	ИспользованиеПланов.ПланыЗакупок               = Ложь ИЛИ (ПланыЗакупок <> Неопределено
															   И ПланыЗакупок.Использование);
	ИспользованиеПланов.ПланыОстатков              = Ложь ИЛИ (ПланыОстатков <> Неопределено
															   И ПланыОстатков.Использование);
	ИспользованиеПланов.ПланыПродаж                = Ложь ИЛИ (ПланыПродаж <> Неопределено
															   И ПланыПродаж.Использование);
	ИспользованиеПланов.ПланыПроизводства          = Ложь ИЛИ (ПланыПроизводства <> Неопределено
															   И ПланыПроизводства.Использование);
	ИспользованиеПланов.ПланыСборкиКомплекты       = Ложь ИЛИ (ПланыСборкиКомплекты <> Неопределено
															   И ПланыСборкиКомплекты.Использование);
	ИспользованиеПланов.ПланыРазборкиКомплекты     = Ложь ИЛИ (ПланыРазборкиКомплекты <> Неопределено
															   И ПланыРазборкиКомплекты.Использование);
	ИспользованиеПланов.ПланыСборкиКомплектующие   = Ложь ИЛИ (ПланыСборкиКомплектующие <> Неопределено
															   И ПланыСборкиКомплектующие.Использование);
	ИспользованиеПланов.ПланыРазборкиКомплектующие = Ложь ИЛИ (ПланыРазборкиКомплектующие <> Неопределено
															   И ПланыРазборкиКомплектующие.Использование);
	ИспользованиеПланов.ПланыМатериалов            = Ложь ИЛИ (ПланыМатериалов <> Неопределено
															   И ПланыМатериалов.Использование);
	ИспользованиеПланов.ПланыВнутреннихПотреблений = Ложь ИЛИ (ПланыВнутреннихПотреблений <> Неопределено
															   И ПланыВнутреннихПотреблений.Использование);
	ИспользованиеПланов.КорректировкиПотребностей  = Ложь ИЛИ (КорректировкиПотребностей <> Неопределено 
															   И КорректировкиПотребностей.Использование);

	ИдентификаторНастройкиВыбранныхПолей = КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки;
	Для каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ИдентификаторНастройкиВыбранныхПолей Тогда
			ВыбранныеПоля = ЭлементНастройки;
		КонецЕсли;
		Если ПланыЗакупок <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыЗакупок.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыЗакупок = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыОстатков <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыОстатков.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыОстатков = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыПродаж <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыПродаж.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыПродаж = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыПроизводства <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыПроизводства.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыПроизводства = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыСборкиКомплекты <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыСборкиКомплекты.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыСборкиКомплекты = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыРазборкиКомплекты <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыРазборкиКомплекты.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыРазборкиКомплекты = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыСборкиКомплектующие <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыСборкиКомплектующие.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыСборкиКомплектующие = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыРазборкиКомплектующие <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыРазборкиКомплектующие.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыРазборкиКомплектующие = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыМатериалов <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыМатериалов.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыМатериалов = ЭлементНастройки.Использование;
		КонецЕсли;
		Если ПланыВнутреннихПотреблений <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = ПланыВнутреннихПотреблений.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.ПланыВнутреннихПотреблений = ЭлементНастройки.Использование;
		КонецЕсли;
		Если КорректировкиПотребностей <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = КорректировкиПотребностей.ИдентификаторПользовательскойНастройки Тогда
			ИспользованиеПланов.КорректировкиПотребностей = ЭлементНастройки.Использование;
		КонецЕсли;
		Если Статус <> Неопределено
		   И ЭлементНастройки.ИдентификаторПользовательскойНастройки = Статус.ИдентификаторПользовательскойНастройки Тогда
			Если ЭлементНастройки.Использование Тогда
				Для Каждого Элемент Из ЭлементНастройки.ПравоеЗначение Цикл
					СтатусыСценария.Добавить(Элемент.Значение);
				КонецЦикла;
			Иначе
				СтатусыСценария.Добавить(Перечисления.СтатусыПланов.Утвержден);
				СтатусыСценария.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
				СтатусыСценария.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	Если ВыбранныеПоля = Неопределено Тогда
		ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
	КонецЕсли;

	КоличествоОтборовПоПланам = Новый Структура();
	КоличествоОтборовПоПланам.Вставить("ПланыПотребностей", 0);
	КоличествоОтборовПоПланам.Вставить("ПланыОбеспечения", 0);
	
	Для Каждого КлючИЗначение Из ИспользованиеПланов Цикл
		
		// Отбор по плану остатков исключается, так как ресурс выводится вне группы выбранных полей планов
		Если КлючИЗначение.Значение И КлючИЗначение.Ключ <> "ПланыОстатков" Тогда
			
			Если КлючИЗначение.Ключ = "ПланыПроизводства"
			 Или КлючИЗначение.Ключ = "ПланыСборкиКомплекты"
			 Или КлючИЗначение.Ключ = "ПланыРазборкиКомплектующие"
			 Или КлючИЗначение.Ключ = "ПланыЗакупок" Тогда
				
				КоличествоОтборовПоПланам.ПланыОбеспечения = КоличествоОтборовПоПланам.ПланыОбеспечения + 1;
			Иначе
				КоличествоОтборовПоПланам.ПланыПотребностей = КоличествоОтборовПоПланам.ПланыПотребностей + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	ВариантПоПериодам = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоПериодам");
	Если ВариантПоПериодам <> Неопределено И НЕ ВариантПоПериодам.Значение Тогда
		
		ТолькоПревышениеОтклонения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ТолькоПревышениеОтклонения");
		ТолькоМеньшеОтклонения     = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ТолькоМеньшеОтклонения");
		
		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 Тогда
			
			Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
				
				Если ЭлементСтруктуры.Имя = "ВерхняяГруппировка" И ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
					Если ЭлементСтруктуры.Структура.Количество() > 0 Тогда
						
						ВыбранныеПоляВверхнейГруппировки = ЭлементСтруктуры.Выбор;
						ОтборПоИтогам = ЭлементСтруктуры.Структура[0].Отбор;
						ОбщиеИтогиПоОтборам = ЭлементСтруктуры.Структура[0].ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов");
						
						МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборПоИтогам, ,"ТолькоПревышениеОтклонения");
						Если МассивЭлементов.Количество() > 0 И ТолькоПревышениеОтклонения <> Неопределено Тогда
							МассивЭлементов[0].Использование = ТолькоПревышениеОтклонения.Использование;
						КонецЕсли;
						
						МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборПоИтогам, ,"ТолькоМеньшеОтклонения");
						Если МассивЭлементов.Количество() > 0 И ТолькоМеньшеОтклонения <> Неопределено Тогда
							МассивЭлементов[0].Использование = ТолькоМеньшеОтклонения.Использование;
						КонецЕсли;
						
						Если ТолькоПревышениеОтклонения <> Неопределено И ТолькоПревышениеОтклонения.Использование
						 ИЛИ ТолькоМеньшеОтклонения <> Неопределено И ТолькоМеньшеОтклонения.Использование Тогда
							
							Если ОбщиеИтогиПоОтборам <> Неопределено Тогда
								ОбщиеИтогиПоОтборам.Использование = Истина;
								ОбщиеИтогиПоОтборам.Значение = РасположениеИтоговКомпоновкиДанных.Начало;
							КонецЕсли;
							
							Для Каждого ВыбранноеПоле Из ВыбранныеПоляВверхнейГруппировки.Элементы Цикл
								Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
									ВыбранноеПоле.Использование = Ложь;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							
							Если ОбщиеИтогиПоОтборам <> Неопределено Тогда
								ОбщиеИтогиПоОтборам.Использование = Ложь;
							КонецЕсли;
							
							Для Каждого ВыбранноеПоле Из ВыбранныеПоляВверхнейГруппировки.Элементы Цикл
								Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
									ВыбранноеПоле.Использование = Истина;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	Сценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий");

	СценарииСравнения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ПользовательскиеНастройки, "СценарииСравнения");
	
	Если СценарииСравнения <> Неопределено Тогда
		
		СравнениеСценариев = Истина;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СравнениеСценариев", СравнениеСценариев);
		ЗначениеСценариевСравнения = СценарииСравнения.Значение;
		
	Иначе
		
		СравнениеСценариев = Ложь;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СравнениеСценариев", СравнениеСценариев);
		
	КонецЕсли;

	Если Сценарий <> Неопределено И ЗначениеЗаполнено(Сценарий.Значение) Тогда
		ПараметрыСценария = ПараметрыСценария(Сценарий.Значение);
		Для каждого КлючИЗначение Из ПараметрыСценария Цикл
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, КлючИЗначение.Ключ,КлючИЗначение.Значение);
		КонецЦикла;
		
		ИспользоватьПланыОстатков = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеОстатков");
		
		ИспользоватьРасчетПлановОстатков = ИспользоватьПланыОстатков
								И ПараметрыСценария.ИспользоватьВПланированииОстатков
								И ИспользованиеПланов.ПланыОстатков;
		
		Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Период"); // ПараметрСхемыКомпоновкиДанных - 
		ПериодЗначение = Период.Значение; // СтандартныйПериод - 
		Если ИспользоватьРасчетПлановОстатков Тогда
			ПараметрыРасчетаНачалаНакопленияОстатка = Новый Структура();
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Сценарий", Сценарий.Значение);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Периодичность", ПараметрыСценария.Периодичность);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("СтатусыСценария", СтатусыСценария);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("Ссылка", Неопределено);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("НачалоПериода", ПериодЗначение.ДатаНачала);
			ПараметрыРасчетаНачалаНакопленияОстатка.Вставить("КонецПериода", ПериодЗначение.ДатаОкончания);
			
			Результат = ПолучитьПериодыПлановОстатков(ПараметрыРасчетаНачалаНакопленияОстатка);
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНачалаНакопленияОстатка",
															Результат.ДатаНачалаНакопленияОстатка);
		Иначе
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНачалаНакопленияОстатка",
															ПериодЗначение.ДатаНачала);
		КонецЕсли;
		
		ИспользоватьРасчетПлановОстатковСценариев = Ложь;
		Если ИспользоватьПланыОстатков И СценарииСравнения <> Неопределено И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
			
			МассивДатНачальныхНакопленийОстатковСценариев = Новый Массив;
			МассивСценариев                               = Новый Массив;
			
			Если ТипЗнч(ЗначениеСценариевСравнения) <> Тип("СписокЗначений") Тогда
				МассивСценариев.Добавить(ЗначениеСценариевСравнения);
			Иначе
				Для Каждого ДополнительныйСценарий Из ЗначениеСценариевСравнения Цикл
					МассивСценариев.Добавить(ДополнительныйСценарий.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ДопСценарий Из МассивСценариев Цикл
				
				ПараметрыСценариев = ПараметрыСценария(ДопСценарий);
				Если ПараметрыСценариев.ИспользоватьВПланированииОстатков И ИспользованиеПланов.ПланыОстатков Тогда
					
					ИспользоватьРасчетПлановОстатковСценариев = Истина;
					
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения = Новый Структура();
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("Сценарий", ДопСценарий);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("Периодичность", ПараметрыСценария.Периодичность);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("СтатусыСценария", СтатусыСценария);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("Ссылка", Неопределено);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("НачалоПериода", ПериодЗначение.ДатаНачала);
					ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения.Вставить("КонецПериода", ПериодЗначение.ДатаОкончания);
					
					РезультатСценариев = ПолучитьПериодыПлановОстатков(ПараметрыРасчетаНачалаНакопленияОстатковСценариевСравнения);
					
					МассивДатНачальныхНакопленийОстатковСценариев.Добавить(РезультатСценариев.ДатаНачалаНакопленияОстатка);
					
				КонецЕсли;
			КонецЦикла;
			
			Если ИспользоватьРасчетПлановОстатковСценариев Тогда
				
				МинимальнаяДатаНачалаНакопленияОстаткаСценариев = ПериодЗначение.ДатаНачала;
				
				Для Каждого ДатаНачальныхОстатков Из МассивДатНачальныхНакопленийОстатковСценариев Цикл
					Если ДатаНачальныхОстатков < МинимальнаяДатаНачалаНакопленияОстаткаСценариев Тогда
						МинимальнаяДатаНачалаНакопленияОстаткаСценариев = ДатаНачальныхОстатков;
					КонецЕсли;
				КонецЦикла;
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, 
					"ДатаНачалаНакопленияОстаткаСценариев", МинимальнаяДатаНачалаНакопленияОстаткаСценариев);
				
			Иначе
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
					"ДатаНачалаНакопленияОстаткаСценариев", ПериодЗначение.ДатаНачала);
				
			КонецЕсли;
		КонецЕсли;
		
		НастроитьДополнениеПериода(КомпоновщикНастроек.Настройки, ПараметрыСценария.Периодичность,
			ПериодЗначение.ДатаНачала, ПериодЗначение.ДатаОкончания);

		Если ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных[0]) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,
				"МЕСЯЦ", ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыСценария.Периодичность));
			
		ИначеЕсли ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			
			НаборДанныхОбъединение = СхемаКомпоновкиДанных.НаборыДанных[0];
			
			Для Каждого НаборДанных Из НаборДанныхОбъединение.Элементы Цикл // НаборДанныхЗапросСхемыКомпоновкиДанных -
				
				НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "МЕСЯЦ", ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыСценария.Периодичность));
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ИспользоватьРасчетПлановОстатков = Ложь;
	КонецЕсли;
	
	ИспользованиеПланов.ПланыОстатков = ИспользоватьРасчетПлановОстатков;
	
	НастройкаДетализироватьПоПланам = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ДетализироватьПоПланам");
		
	Если НастройкаДетализироватьПоПланам <> Неопределено Тогда
		ДетализироватьПоПланам = НастройкаДетализироватьПоПланам.Значение;
	Иначе
		ДетализироватьПоПланам = Ложь;
	КонецЕсли;

	УстановитьВыбранныеПоляПоОтборам(ВыбранныеПоля, 
		ИспользованиеПланов,
		КоличествоОтборовПоПланам, 
		ДетализироватьПоПланам,
		СравнениеСценариев);

	Для Каждого ЭлементВыбор Из ВыбранныеПоля.Элементы Цикл
		Если ТипЗнч(ЭлементВыбор) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ЭлементВыбор.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СценарииСравнения <> Неопределено
	И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
		
		НастройкаОтобразитьТолькоОтклоненияСценариев = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
			КомпоновщикНастроек.ПользовательскиеНастройки, "ОтобразитьТолькоОтклоненияСценариев");
		
		ИспользованиеПланов.ПланыОстатков = ИспользоватьРасчетПлановОстатковСценариев;
		
		Если НастройкаОтобразитьТолькоОтклоненияСценариев <> Неопределено Тогда
			ОтобразитьТолькоОтклоненияСценариев = НастройкаОтобразитьТолькоОтклоненияСценариев.Значение;
		Иначе
			ОтобразитьТолькоОтклоненияСценариев = Ложь;
		КонецЕсли;
		
		Для каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(ЭлементСтруктуры);
			Для каждого Группировка Из Группировки Цикл
				Если Группировка.Значение.Имя = "ДополнительныеСценарии"
				 ИЛИ Группировка.Значение.Имя = "ОтклоненияСценариев" Тогда
					
					ВыбранныеПоляГруппировки = Группировка.Значение.Выбор;
					
					УстановитьВыбранныеПоляГруппировокСравненияСценариев(Группировка.Значение,
						ВыбранныеПоляГруппировки,
						ИспользованиеПланов,
						КоличествоОтборовПоПланам,
						ДетализироватьПоПланам,
						ОтобразитьТолькоОтклоненияСценариев,
						ЗначениеСценариевСравнения)
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура НастроитьДополнениеПериода(НастройкиОтчета, Периодичность, НачальныйПериод, КонечныйПериод)
	
	СтрокаПериодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[СтрокаПериодичность];
	
	НачальныйПериод = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(
		НачальныйПериод, Периодичность);
	КонечныйПериод = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(
		КонечныйПериод, Периодичность);
	
	ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(ЭлементСтруктуры); // ГруппировкаКомпоновкиДанных -
		Для каждого Группировка Из Группировки Цикл
			ПоляГруппировки = Группировка.Значение.ПоляГруппировки; // ПоляГруппировкиКомпоновкиДанных - 
			ЭлементыГруппировки = ПоляГруппировки.Элементы;
			Если ЭлементыГруппировки.Количество() = 1 И ЭлементыГруппировки[0].Поле = ПолеПериод Тогда
				ГруппировкаПериод = ЭлементыГруппировки[0];
				ГруппировкаПериод.ТипДополнения = ТипДополнения;
				ГруппировкаПериод.НачалоПериода = НачальныйПериод;
				ГруппировкаПериод.КонецПериода  = КонечныйПериод;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПользовательскиеНастройкиСОтборомПоДокументам(ОтборПоДокументам)
	
	КонтекстныеНастройки = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ВложенныйЗапрос.НачалоПериода) КАК НачалоПериода,
	|	МАКСИМУМ(ВложенныйЗапрос.ОкончаниеПериода) КАК ОкончаниеПериода,
	|	МАКСИМУМ(ВложенныйЗапрос.Сценарий) КАК Сценарий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода КАК НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода КАК ОкончаниеПериода,
	|		ДокументПлана.Сценарий КАК Сценарий
	|	ИЗ
	|		Документ.ПланЗакупок КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода,
	|		ДокументПлана.Сценарий
	|	ИЗ
	|		Документ.ПланОстатков КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода,
	|		ДокументПлана.Сценарий
	|	ИЗ
	|		Документ.ПланПродаж КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода,
	|		ДокументПлана.Сценарий
	|	ИЗ
	|		Документ.ПланВнутреннихПотреблений КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументПлана.НачалоПериода,
	|		ДокументПлана.ОкончаниеПериода,
	|		ДокументПлана.Сценарий
	|	ИЗ
	|		Документ.ПланСборкиРазборки КАК ДокументПлана
	|	ГДЕ
	|		ДокументПлана.Ссылка В(&МассивСсылок)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ПланЗакупок.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура
	|	ИЗ
	|		Документ.ПланОстатков.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура
	|	ИЗ
	|		Документ.ПланПродаж.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура
	|	ИЗ
	|		Документ.ПланВнутреннихПотреблений.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументПланаТовары.Номенклатура
	|	ИЗ
	|		Документ.ПланСборкиРазборки.Товары КАК ДокументПланаТовары
	|	ГДЕ
	|		ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВариантыКомплектацииТовары.Номенклатура
	|	ИЗ
	|		Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииТовары 
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланСборкиРазборки.Товары КАК ДокументПланаТовары
	|			ПО ДокументПланаТовары.Ссылка В(&МассивСсылок)
	|			И ДокументПланаТовары.ВариантКомплектации = ВариантыКомплектацииТовары.Ссылка) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("МассивСсылок", ОтборПоДокументам);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[0].Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КонтекстныеНастройки.Вставить("Сценарий",ВыборкаДетальныеЗаписи.Сценарий);
		Период = Новый СтандартныйПериод;
		Период.ДатаНачала = ВыборкаДетальныеЗаписи.НачалоПериода;
		Период.ДатаОкончания = ВыборкаДетальныеЗаписи.ОкончаниеПериода;
		КонтекстныеНастройки.Вставить("Период", Период);
	КонецЕсли;

	ТаблицаНоменклатуры = РезультатыЗапроса[1].Выгрузить();
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
	
		МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
		КонтекстныеНастройки.Вставить("Номенклатура",МассивНоменклатуры);
	
	КонецЕсли; 
	
	Возврат КонтекстныеНастройки;

КонецФункции

// Параметры:
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных -
// 	ЭлементСтруктуры - КоллекцияЭлементовОтбораКомпоновкиДанных - Описание
// 	ИмяПоля - ПолеКомпоновкиДанных, Строка - Описание
// 	Представление - Строка - Описание
// Возвращаемое значение:
// 	Булево - Описание
Функция УдалитьОтборПоПредставлению(КомпоновщикНастроек, ЭлементСтруктуры, ИмяПоля, Представление = "")
	
	Если ТипЗнч(ИмяПоля) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Иначе
		Поле = ИмяПоля;
	КонецЕсли; 
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отборы = ЭлементСтруктуры.Настройки.Отбор.Элементы;
	Иначе
		Отборы = ЭлементСтруктуры;
	КонецЕсли;
	Результат = Ложь;
	Для каждого Элемент Из Отборы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = УдалитьОтборПоПредставлению(КомпоновщикНастроек, Элемент.Элементы, Поле, Представление);
			Если Результат Тогда
				Прервать;
			КонецЕсли; 
		Иначе
			Если Элемент.ЛевоеЗначение = Поле 
				И (НЕ ЗначениеЗаполнено(Представление) 
					ИЛИ ЗначениеЗаполнено(Представление) 
					И Элемент.Представление = Представление) Тогда
					
				ИдентификаторПользовательскойНастройки = Элемент.ИдентификаторПользовательскойНастройки;
				Отборы.Удалить(Элемент);
				Результат = Истина;
				ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
				Если ЭлементПользовательскихНастроек <> Неопределено Тогда
					КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьВыбранныеПоляПоОтборам(ВыбранныеПоля, 
		ИспользованиеПланов,
		КоличествоОтборовПоПланам, 
		ДетализироватьПоПланам,
		СравнениеСценариев)
	
	ПолеПланЗакупок               = Новый ПолеКомпоновкиДанных("ПланЗакупок");
	ПолеПланОстатков              = Новый ПолеКомпоновкиДанных("ПланОстатков");
	ПолеПланПродаж                = Новый ПолеКомпоновкиДанных("ПланПродаж");
	ПолеПланПроизводства          = Новый ПолеКомпоновкиДанных("ПланПроизводства");
	ПолеПланСборкиКомплекты       = Новый ПолеКомпоновкиДанных("ПланСборкиКомплекты");
	ПолеПланРазборкиКомплекты     = Новый ПолеКомпоновкиДанных("ПланРазборкиКомплекты");
	ПолеПланСборкиКомплектующие   = Новый ПолеКомпоновкиДанных("ПланСборкиКомплектующие");
	ПолеПланРазборкиКомплектующие = Новый ПолеКомпоновкиДанных("ПланРазборкиКомплектующие");
	ПолеПланМатериалов            = Новый ПолеКомпоновкиДанных("ПланМатериалов");
	ПолеПланВнутреннихПотреблений = Новый ПолеКомпоновкиДанных("ПланВнутреннихПотреблений");
	ПолеКорректировкиПотребностей = Новый ПолеКомпоновкиДанных("КорректировкаПотребностей");
	ПолеПланПотребностей          = Новый ПолеКомпоновкиДанных("ПланыПотребностей");
	ПолеПланОбеспечения           = Новый ПолеКомпоновкиДанных("ПланыОбеспечения");
	
	// Разница в количестве и индексе пользовательских полей в зависимости от варианта отчета
	Если СравнениеСценариев Тогда
		ПолеКонечныйОстаток             = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле1");
		ПолеНарастающийНачальныйОстаток = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле7");
	Иначе
		ПолеОтклонение                  = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле1");
		ПолеОтклонениеПроцент           = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле2");
		ПолеКонечныйОстаток             = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле3");
	КонецЕсли;
	
	Для каждого ПолеВыбора Из ВыбранныеПоля.Элементы Цикл
		
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			
			Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 И КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
				ПолеВыбора.Заголовок = "";
			КонецЕсли;
			
			УстановитьВыбранныеПоляПоОтборам(ПолеВыбора, 
				ИспользованиеПланов,
				КоличествоОтборовПоПланам, 
				ДетализироватьПоПланам,
				СравнениеСценариев);
			
		КонецЕсли;
		
		Если ПолеВыбора.Поле = ПолеПланЗакупок Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыЗакупок;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланОстатков Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеНарастающийНачальныйОстаток Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеКонечныйОстаток Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеОтклонение Тогда
			ПолеВыбора.Использование = Не ИспользованиеПланов.ПланыОстатков;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеОтклонениеПроцент Тогда
			ПолеВыбора.Использование = Не ИспользованиеПланов.ПланыОстатков;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланПродаж Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыПродаж;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланПроизводства Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыПроизводства;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланСборкиКомплекты Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплекты;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланРазборкиКомплекты Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплекты;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующие Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплектующие;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующие Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплектующие;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланМатериалов Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыМатериалов;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланВнутреннихПотреблений Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.ПланыВнутреннихПотреблений;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеКорректировкиПотребностей Тогда
			ПолеВыбора.Использование = ИспользованиеПланов.КорректировкиПотребностей;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланПотребностей И Не ЗначениеЗаполнено(ПолеВыбора.Заголовок) Тогда
			ПолеВыбора.Использование = Не ДетализироватьПоПланам;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланОбеспечения И Не ЗначениеЗаполнено(ПолеВыбора.Заголовок) Тогда
			ПолеВыбора.Использование = Не ДетализироватьПоПланам;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланПотребностей И ЗначениеЗаполнено(ПолеВыбора.Заголовок) Тогда
			Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 Тогда
				ПолеВыбора.Использование = Ложь;
			Иначе
				ПолеВыбора.Использование = ДетализироватьПоПланам;
			КонецЕсли;
		КонецЕсли;
		Если ПолеВыбора.Поле = ПолеПланОбеспечения И ЗначениеЗаполнено(ПолеВыбора.Заголовок) Тогда
			Если КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
				ПолеВыбора.Использование = Ложь;
			Иначе
				ПолеВыбора.Использование = ДетализироватьПоПланам;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВыбранныеПоляГруппировокСравненияСценариев(Группировка,
		ВыбранныеПоляГруппировки,
		ИспользованиеПланов,
		КоличествоОтборовПоПланам,
		ДетализироватьПоПланам,
		ОтобразитьТолькоОтклоненияСценариев,
		ЗначениеСценариевСравнения)
	
	// Выбранные поля дополнительного(ых) сценария(ев)
	ПолеПланЗакупокСценариев                 = Новый ПолеКомпоновкиДанных("ПланЗакупокСценариев");
	ПолеПланОстатковСценариев                = Новый ПолеКомпоновкиДанных("ПланОстатковСценариев");
	ПолеПланПродажСценариев                  = Новый ПолеКомпоновкиДанных("ПланПродажСценариев");
	ПолеПланПроизводстваСценариев            = Новый ПолеКомпоновкиДанных("ПланПроизводстваСценариев");
	ПолеПланСборкиКомплектыСценариев         = Новый ПолеКомпоновкиДанных("ПланСборкиКомплектыСценариев");
	ПолеПланРазборкиКомплектыСценариев       = Новый ПолеКомпоновкиДанных("ПланРазборкиКомплектыСценариев");
	ПолеПланСборкиКомплектующиеСценариев     = Новый ПолеКомпоновкиДанных("ПланСборкиКомплектующиеСценариев");
	ПолеПланРазборкиКомплектующиеСценариев   = Новый ПолеКомпоновкиДанных("ПланРазборкиКомплектующиеСценариев");
	ПолеПланМатериаловСценариев              = Новый ПолеКомпоновкиДанных("ПланМатериаловСценариев");
	ПолеПланВнутреннихПотребленийСценариев   = Новый ПолеКомпоновкиДанных("ПланВнутреннихПотребленийСценариев");
	ПолеКорректировкаПотребностейСценариев   = Новый ПолеКомпоновкиДанных("КорректировкаПотребностейСценариев");
	ПолеПланПотребностейСценариев            = Новый ПолеКомпоновкиДанных("ПланыПотребностейСценариев");
	ПолеПланОбеспеченияСценариев             = Новый ПолеКомпоновкиДанных("ПланыОбеспеченияСценариев");
	ПолеНарастающийНачальныйОстатокСценариев = Новый ПолеКомпоновкиДанных("НарастающийНачальныйОстатокСценариев");
	ПолеКонечныйОстатокСценариев             = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле2");
	
	// Выбранные поля отклонений основного сценария относительно дополнительного(ых) сценария(ев)
	ПолеПланЗакупокОтклонение                = Новый ПолеКомпоновкиДанных("ПланЗакупокОтклонение");
	ПолеПланПродажОтклонение                 = Новый ПолеКомпоновкиДанных("ПланПродажОтклонение");
	ПолеПланПроизводстваОтклонение           = Новый ПолеКомпоновкиДанных("ПланПроизводстваОтклонение");
	ПолеПланСборкиКомплектыОтклонение        = Новый ПолеКомпоновкиДанных("ПланСборкиКомплектыОтклонение");
	ПолеПланРазборкиКомплектыОтклонение      = Новый ПолеКомпоновкиДанных("ПланРазборкиКомплектыОтклонение");
	ПолеПланСборкиКомплектующиеОтклонение    = Новый ПолеКомпоновкиДанных("ПланСборкиКомплектующиеОтклонение");
	ПолеПланРазборкиКомплектующиеОтклонение  = Новый ПолеКомпоновкиДанных("ПланРазборкиКомплектующиеОтклонение");
	ПолеПланМатериаловОтклонение             = Новый ПолеКомпоновкиДанных("ПланМатериаловОтклонение");
	ПолеПланВнутреннихПотребленийОтклонение  = Новый ПолеКомпоновкиДанных("ПланВнутреннихПотребленийОтклонение");
	ПолеКорректировкаПотребностейОтклонение  = Новый ПолеКомпоновкиДанных("КорректировкаПотребностейОтклонение");
	ПолеОтклоненияПлановПотребности          = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле3");
	ПолеОтклоненияПлановОбеспечения          = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле4");
	ПолеОтклоненияНачальногоОстатка          = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле5");
	ПолеОтклоненияКонечногоОстатка           = Новый ПолеКомпоновкиДанных("ПользовательскиеПоля.Поле6");
	
	// Поля группировки дополнительного(ых) сценария(ев)
	ПолеЗаголовкаОтклонений = Новый ПолеКомпоновкиДанных("ЗаголовокОтклонений");
	
	Если Группировка.Имя = "ДополнительныеСценарии" И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
		
		Для каждого ПолеВыбора Из ВыбранныеПоляГруппировки.Элементы Цикл
			
			Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				
				Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 И КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
					ПолеВыбора.Заголовок = "";
				КонецЕсли;
				
				УстановитьВыбранныеПоляГруппировокСравненияСценариев(Группировка,
					ПолеВыбора,
					ИспользованиеПланов,
					КоличествоОтборовПоПланам,
					ДетализироватьПоПланам,
					ОтобразитьТолькоОтклоненияСценариев,
					ЗначениеСценариевСравнения);
				
			КонецЕсли;
			
			Если Не ОтобразитьТолькоОтклоненияСценариев И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
				
				ПоляГруппировки = Группировка.ПоляГруппировки; // ПоляГруппировкиКомпоновкиДанных - 
				Для Каждого Элемент Из ПоляГруппировки.Элементы Цикл
					
					Если Элемент.Поле = ПолеЗаголовкаОтклонений Тогда
						Элемент.Использование = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДетализироватьПоПланам Тогда
					
					Если ПолеВыбора.Поле = ПолеПланЗакупокСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыЗакупок;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыПродаж;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыПроизводства;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплекты;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплекты;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплектующие;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплектующие;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыМатериалов;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыВнутреннихПотреблений;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейСценариев Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.КорректировкиПотребностей;
					КонецЕсли;
					
				Иначе
					
					Если ПолеВыбора.Поле = ПолеПланЗакупокСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
				КонецЕсли;
				
				Если ПолеВыбора.Поле = ПолеЗаголовкаОтклонений Тогда
					ПолеВыбора.Использование = Ложь;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланОстатковСценариев Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеНарастающийНачальныйОстатокСценариев Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеКонечныйОстатокСценариев Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланПотребностейСценариев И ПолеВыбора.Заголовок = "Итого" Тогда
					Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 Тогда
						ПолеВыбора.Использование = Ложь;
					Иначе
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланОбеспеченияСценариев И ПолеВыбора.Заголовок = "Итого" Тогда
					Если КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
						ПолеВыбора.Использование = Ложь;
					Иначе
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланПотребностейСценариев И ПолеВыбора.Заголовок <> "Итого" Тогда
					ПолеВыбора.Использование = Не ДетализироватьПоПланам;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланОбеспеченияСценариев И ПолеВыбора.Заголовок <> "Итого" Тогда
					ПолеВыбора.Использование = Не ДетализироватьПоПланам;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтобразитьТолькоОтклоненияСценариев И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
				
				ПоляГруппировки = Группировка.ПоляГруппировки; // ПоляГруппировкиКомпоновкиДанных - 
				Для Каждого Элемент Из ПоляГруппировки.Элементы Цикл
					
					Если Элемент.Поле = ПолеЗаголовкаОтклонений Тогда
						Элемент.Использование = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДетализироватьПоПланам Тогда
					
					Если ПолеВыбора.Поле = ПолеПланЗакупокОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыЗакупок;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланЗакупокСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыПродаж;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыПроизводства;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплекты;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплекты;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплектующие;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплектующие;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыМатериалов;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыВнутреннихПотреблений;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.КорректировкиПотребностей;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейСценариев Тогда
						ПолеВыбора.Использование = Не ДетализироватьПоПланам;
					КонецЕсли;
					
				Иначе
					
					Если ПолеВыбора.Поле = ПолеПланЗакупокСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейСценариев Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПолеВыбора.Поле = ПолеЗаголовкаОтклонений Тогда
					ПолеВыбора.Использование = Истина;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияНачальногоОстатка Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияКонечногоОстатка Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановПотребности И ПолеВыбора.Заголовок = "Итого" Тогда
					
					Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 Тогда
						ПолеВыбора.Использование = Ложь;
					Иначе
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановОбеспечения И ПолеВыбора.Заголовок = "Итого" Тогда
					Если КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
						ПолеВыбора.Использование = Ложь;
					Иначе
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановПотребности И ПолеВыбора.Заголовок <> "Итого" Тогда
					ПолеВыбора.Использование = Не ДетализироватьПоПланам;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановОбеспечения И ПолеВыбора.Заголовок <> "Итого" Тогда
					ПолеВыбора.Использование = Не ДетализироватьПоПланам;
				КонецЕсли;
				
				Если ПолеВыбора.Поле = ПолеПланОстатковСценариев Тогда
					ПолеВыбора.Использование = Ложь;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеНарастающийНачальныйОстатокСценариев Тогда
					ПолеВыбора.Использование = Ложь;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеКонечныйОстатокСценариев Тогда
					ПолеВыбора.Использование = Ложь;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланПотребностейСценариев Тогда
					ПолеВыбора.Использование = Ложь;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеПланОбеспеченияСценариев Тогда
					ПолеВыбора.Использование = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Группировка.Имя = "ОтклоненияСценариев" И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
		
		Если Не ОтобразитьТолькоОтклоненияСценариев И ЗначениеЗаполнено(ЗначениеСценариевСравнения) Тогда
			
			Группировка.Использование = Истина;
			
			Для каждого ПолеВыбора Из ВыбранныеПоляГруппировки.Элементы Цикл
				
				Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
					
					Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 И КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
						ПолеВыбора.Заголовок = "";
					КонецЕсли;
					
					УстановитьВыбранныеПоляГруппировокСравненияСценариев(Группировка,
						ПолеВыбора,
						ИспользованиеПланов,
						КоличествоОтборовПоПланам,
						ДетализироватьПоПланам,
						ОтобразитьТолькоОтклоненияСценариев,
						ЗначениеСценариевСравнения);
					
				КонецЕсли;
				
				Если ДетализироватьПоПланам Тогда
					
					Если ПолеВыбора.Поле = ПолеПланЗакупокОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыЗакупок;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыПродаж;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыПроизводства;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплекты;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплекты;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыСборкиКомплектующие;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыРазборкиКомплектующие;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыМатериалов;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.ПланыВнутреннихПотреблений;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейОтклонение Тогда
						ПолеВыбора.Использование = ИспользованиеПланов.КорректировкиПотребностей;
					КонецЕсли;
					
				Иначе
					
					Если ПолеВыбора.Поле = ПолеПланЗакупокОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПродажОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланПроизводстваОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектыОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектыОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланСборкиКомплектующиеОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланРазборкиКомплектующиеОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланМатериаловОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеПланВнутреннихПотребленийОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					Если ПолеВыбора.Поле = ПолеКорректировкаПотребностейОтклонение Тогда
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПолеВыбора.Поле = ПолеОтклоненияНачальногоОстатка Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияКонечногоОстатка Тогда
					ПолеВыбора.Использование = ИспользованиеПланов.ПланыОстатков;
				КонецЕсли;
				
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановПотребности И ПолеВыбора.Заголовок = "Итого" Тогда
					Если КоличествоОтборовПоПланам.ПланыПотребностей <= 1 Тогда
						ПолеВыбора.Использование = Ложь;
					Иначе
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановОбеспечения И ПолеВыбора.Заголовок = "Итого" Тогда
					Если КоличествоОтборовПоПланам.ПланыОбеспечения <= 1 Тогда
						ПолеВыбора.Использование = Ложь;
					Иначе
						ПолеВыбора.Использование = ДетализироватьПоПланам;
					КонецЕсли;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановПотребности И ПолеВыбора.Заголовок <> "Итого" Тогда
					ПолеВыбора.Использование = Не ДетализироватьПоПланам;
				КонецЕсли;
				Если ПолеВыбора.Поле = ПолеОтклоненияПлановОбеспечения И ПолеВыбора.Заголовок <> "Итого" Тогда
					ПолеВыбора.Использование = Не ДетализироватьПоПланам;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Группировка.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОтбор(ЭлементСтруктуры, ИмяПоля, Представление = "")
	
	Если ТипЗнч(ИмяПоля) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Иначе
		Поле = ИмяПоля;
	КонецЕсли; 
	
	Отбор = Неопределено;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отборы = ЭлементСтруктуры.Настройки.Отбор.Элементы;
	Иначе
		Отборы = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из Отборы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Отбор = ПолучитьОтбор(Элемент.Элементы, Поле, Представление);
			Если Отбор <> Неопределено Тогда
				Прервать;
			КонецЕсли; 
		Иначе
			Если Элемент.ЛевоеЗначение = Поле 
				И (НЕ ЗначениеЗаполнено(Представление) 
					ИЛИ ЗначениеЗаполнено(Представление) 
					И Элемент.Представление = Представление) Тогда
				Отбор = Элемент;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отбор;
	
КонецФункции

// Параметры:
// 	Объект - ДокументОбъект.ПланЗакупок - 
// 	       - ДокументОбъект.ПланОстатков -
// 	       - ДокументОбъект.ПланПродаж -
// 	       - ДокументОбъект.ПланПродажПоКатегориям -
// 	       - ДокументОбъект.ПланПроизводства -
// 	       - ДокументОбъект.ПланСборкиРазборки -
// 	Отказ - Булево -
// 	РежимЗаписи - РежимЗаписиДокумента -
// 	ТипПлана - ПеречислениеСсылка.ТипыПланов - 
Процедура ПроверитьСтатусУтвержден(Объект, Отказ, РежимЗаписи, ТипПлана) Экспорт 
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок И Пользователи.РолиДоступны("УтверждениеПлановЗакупок") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланОстатков И Пользователи.РолиДоступны("УтверждениеПлановОстатков") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланПродаж И Пользователи.РолиДоступны("УтверждениеПлановПродаж") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям И Пользователи.РолиДоступны("УтверждениеПлановПродажПоКатегориям") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланВнутреннихПотреблений И Пользователи.РолиДоступны("УтверждениеПлановВнутреннихПотреблений") Тогда
		Возврат;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки И Пользователи.РолиДоступны("УтверждениеПлановСборкиРазборки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежим() 
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
		
		Если Объект.Статус = Перечисления.СтатусыПланов.Утвержден 
			ИЛИ ЗначениеЗаполнено(Объект.Ссылка) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Статус") = Перечисления.СтатусыПланов.Утвержден Тогда
			
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для проведения документа в статусе ""Утвержден"".'")
			Иначе
				ТекстСообщения = НСтр("ru = 'Недостаточно прав для отмены проведения документа в статусе ""Утвержден"".'")
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				,
				,
				Отказ);
		
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСтатусыЗаполнения(Сценарий) Экспорт
	
	СтатусыЗаполнения = Новый Массив;
	СтатусыЗаполнения.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	СтатусыЗаполнения.Добавить(Перечисления.СтатусыПланов.Утвержден);
	
	Возврат СтатусыЗаполнения
	
КонецФункции

// Параметры:
// 	ДанныеФормы - ДокументОбъект.ПланЗакупок - 
// 	            - ДокументОбъект.ПланОстатков -
// 	            - ДокументОбъект.ПланПродаж -
// 	            - ДокументОбъект.ПланПродажПоКатегориям -
// 	            - ДокументОбъект.ПланПроизводства -
// 	            - ДокументОбъект.ПланСборкиРазборки -
// 	ИмяТипаДокумента - Строка -
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ПроверитьСуществованиеУжеСозданныхПланов(ДанныеФормы, ИмяТипаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеФормы.Ссылка) Или Не ЗначениеЗаполнено(ДанныеФормы.Сценарий) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДанныеФормы.Ссылка);
	Запрос.УстановитьПараметр("Сценарий", ДанныеФормы.Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода",   ДанныеФормы.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДанныеФормы.ОкончаниеПериода);
	
	Если ИмяТипаДокумента = "ПланЗакупок" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("Партнер",    ДанныеФормы.Партнер);
		Запрос.УстановитьПараметр("Соглашение", ДанныеФормы.Соглашение);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланЗакупок КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Партнер = &Партнер
		|	И План.Соглашение = &Соглашение
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= 2
		|	И План.Ссылка <> &Ссылка
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ";
		
	ИначеЕсли ИмяТипаДокумента = "ПланОстатков" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланОстатков КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= 2
		|	И План.Ссылка <> &Ссылка
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ";
		
	ИначеЕсли ИмяТипаДокумента = "ПланПродаж" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("Партнер",    ДанныеФормы.Партнер);
		Запрос.УстановитьПараметр("Соглашение", ДанныеФормы.Соглашение);
		Запрос.УстановитьПараметр("Подразделение", ДанныеФормы.Подразделение);
		Запрос.УстановитьПараметр("Менеджер",   ДанныеФормы.Менеджер);
		Запрос.УстановитьПараметр("ФорматМагазина", ДанныеФормы.ФорматМагазина);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланПродаж КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Партнер = &Партнер
		|	И План.Соглашение = &Соглашение
		|	И План.Подразделение = &Подразделение
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= 2
		|	И План.Ссылка <> &Ссылка
		|	И План.ФорматМагазина = &ФорматМагазина
		|	И План.Менеджер = &Менеджер
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	ИначеЕсли ИмяТипаДокумента = "ПланПродажПоКатегориям" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("ФорматМагазина", ДанныеФормы.ФорматМагазина);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланПродажПоКатегориям КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= 2
		|	И План.Ссылка <> &Ссылка
		|	И План.ФорматМагазина = &ФорматМагазина
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	ИначеЕсли ИмяТипаДокумента = "ПланВнутреннихПотреблений" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		Запрос.УстановитьПараметр("Подразделение",ДанныеФормы.Подразделение);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланВнутреннихПотреблений КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Подразделение = &Подразделение
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= 2
		|	И План.Ссылка <> &Ссылка
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	ИначеЕсли ИмяТипаДокумента = "ПланСборкиРазборки" Тогда
		
		Запрос.УстановитьПараметр("Склад",      ДанныеФормы.Склад);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	План.Ссылка,
		|	План.Статус
		|ИЗ
		|	Документ.ПланСборкиРазборки КАК План
		|ГДЕ
		|	План.Проведен
		|	И План.Сценарий = &Сценарий
		|	И План.Склад = &Склад
		|	И План.Замещающий
		|	И План.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
		|	И План.Статус.Порядок >= 2
		|	И План.Ссылка <> &Ссылка
		|	И (План.НачалоПериода >= &НачалоПериода
		|				И План.НачалоПериода <= &ОкончаниеПериода
		|			ИЛИ План.ОкончаниеПериода <= &ОкончаниеПериода
		|				И План.ОкончаниеПериода >= &НачалоПериода)
		|
		|УПОРЯДОЧИТЬ ПО
		|	План.Дата УБЫВ"
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В базе уже создан документ за текущий период: %1 в статусе %2, который необходимо утвердить.'"), 
																					ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Статус);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаДетальныеЗаписи.Ссылка, "ВидПлана");
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Объединяет массивы, возвращая результат объединения
// Возвращаемое значение:
//  Массив - объединенный массив значений.
Функция ОбъединитьМассивы(Массив1, Массив2) Экспорт
	
	ОбъединенныйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ОбъединенныйМассив;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область Отчеты_ИсполнениеПланов

// Описание
// 
// Параметры:
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
// 	Отказ - Булево -
Процедура ИсполнениеПлановОбработкаПроверкиЗаполнения(КомпоновщикНастроек, Отказ) Экспорт 
	
	Сценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий");
	Если Сценарий = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Сценарий.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено обязательное поле ""Сценарий"".'"), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике "ПриКомпоновкеРезультата" при формировании отчета
//
Процедура ИсполнениеПлановПриКомпоновкеРезультата(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	ДопустимыеОтклоненияКоличество = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДопустимыеОтклоненияПроцент");
	ДопустимыеОтклоненияСумма = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДопустимыеОтклоненияСуммаПроцент");
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки; // ПользовательскиеНастройкиКомпоновкиДанных - 
	
	Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		Отбор = КомпоновщикНастроек.Настройки.Структура[0].Настройки.Отбор;
		
	Иначе
		
		Отбор = КомпоновщикНастроек.Настройки.Отбор;
		
	КонецЕсли;
	
	ЭлементПользовательскихНастроек = ПользовательскиеНастройки.Элементы.Найти(Отбор.ИдентификаторПользовательскойНастройки);
	
	МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Отбор, ,"Только допустимые отклонения количества");
	Если ДопустимыеОтклоненияКоличество <> Неопределено И МассивЭлементов.Количество() > 0 Тогда
		
		МассивЭлементов[0].Использование = ДопустимыеОтклоненияКоличество.Использование;
		
		МассивПользовательскихЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			ЭлементПользовательскихНастроек, ,"Только допустимые отклонения количества");
		
		Если МассивПользовательскихЭлементов.Количество() > 0 Тогда
			МассивПользовательскихЭлементов[0].Использование = ДопустимыеОтклоненияКоличество.Использование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопустимыеОтклоненияСумма <> Неопределено Тогда
		
		ПараметрПланированияПоСумме = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПланироватьПоСумме");
		
		Если НЕ ПараметрПланированияПоСумме.Значение Тогда
			
			ДопустимыеОтклоненияСумма.Использование = Ложь;
			
		КонецЕсли;
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			Отбор, ,"Только допустимые отклонения суммы");
		
		Если МассивЭлементов.Количество() > 0 Тогда
			
			МассивЭлементов[0].Использование = ДопустимыеОтклоненияСумма.Использование;
			
			МассивПользовательскихЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				ЭлементПользовательскихНастроек, ,"Только допустимые отклонения суммы");
			
			Если МассивПользовательскихЭлементов.Количество() > 0 Тогда
				МассивПользовательскихЭлементов[0].Использование = ДопустимыеОтклоненияСумма.Использование;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			Отбор, ,"Только допустимые отклонения оплат");
		
		Если МассивЭлементов.Количество() > 0 Тогда
			
			МассивЭлементов[0].Использование = ДопустимыеОтклоненияСумма.Использование;
			
			МассивПользовательскихЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
				ЭлементПользовательскихНастроек, ,"Только допустимые отклонения оплат");
			
			Если МассивПользовательскихЭлементов.Количество() > 0 Тогда
				МассивПользовательскихЭлементов[0].Использование = ДопустимыеОтклоненияСумма.Использование;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет настройки компоновки данных при формировании расшифровки отчета
//
Процедура ПереопределитьНастройкиРасшифровкиОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДанныеРасшифровки) Экспорт
	
	
	ПолеПодразделение      = Новый ПолеКомпоновкиДанных("Подразделение");
	ПолеСклад              = Новый ПолеКомпоновкиДанных("Склад");
	ПолеПартнер            = Новый ПолеКомпоновкиДанных("Партнер");
	ПолеМенеджер           = Новый ПолеКомпоновкиДанных("Менеджер");
	ПолеДинамическийПериод = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
	
	НастройкиРасшифровки = ДанныеРасшифровки.Настройки; // НастройкиКомпоновкиДанных -
	
	Если ТипЗнч(НастройкиРасшифровки.Структура[0]) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		КоллекцияЭлементовСтруктуры = ДанныеРасшифровки.Настройки.Структура[0].Настройки.Структура;
		ОтборыОтчета = ДанныеРасшифровки.Настройки.Структура[0].Настройки.Отбор; // ОтборКомпоновкиДанных
		
		ВариантОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
			НастройкиРасшифровки.Структура[0].Настройки, "ВариантОтчета");
		Если ВариантОтчета <> Неопределено Тогда
			ИдентификаторВариантаОтчета = ВариантОтчета.Значение;
		Иначе
			ИдентификаторВариантаОтчета = НастройкиРасшифровки.Структура[0].ИдентификаторОбъекта;
		КонецЕсли;
		
	Иначе
		
		КоллекцияЭлементовСтруктуры = ДанныеРасшифровки.Настройки.Структура;
		ОтборыОтчета = ДанныеРасшифровки.Настройки.Отбор; // ОтборКомпоновкиДанных - 
		
		ВариантОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиРасшифровки, "ВариантОтчета");
		Если ВариантОтчета <> Неопределено Тогда 
			ИдентификаторВариантаОтчета = ВариантОтчета.Значение;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// КоллекцияЭлементовОтбораКомпоновкиДанных -
	Для Каждого ЭлементОтбор Из ОтборыОтчета.Элементы Цикл
		
		Если ИдентификаторВариантаОтчета = "ПоПодразделениям" Тогда
			Если ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбор.ЛевоеЗначение = ПолеПодразделение Тогда
					ЭлементОтбораДетализация = ЭлементОтбор; // ЭлементОтбораКомпоновкиДанных - 
					ПолеДетализации = ПолеПодразделение;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИдентификаторВариантаОтчета = "ПоСкладам" Тогда // По местам хранения
			Если ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбор.ЛевоеЗначение = ПолеСклад Тогда
					ЭлементОтбораДетализация = ЭлементОтбор; // ЭлементОтбораКомпоновкиДанных - 
					ПолеДетализации = ПолеСклад;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИдентификаторВариантаОтчета = "ПоКлиентам" // По партнерам
		ИЛИ ИдентификаторВариантаОтчета = "ПоПоставщикам"
		ИЛИ ИдентификаторВариантаОтчета = "ПоОплатам" Тогда
			Если ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбор.ЛевоеЗначение = ПолеПартнер Тогда
					ЭлементОтбораДетализация = ЭлементОтбор; // ЭлементОтбораКомпоновкиДанных - 
					ПолеДетализации = ПолеПартнер;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИдентификаторВариантаОтчета = "ПоМенеджерам" Тогда
			Если ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбор.ЛевоеЗначение = ПолеМенеджер Тогда
					ЭлементОтбораДетализация = ЭлементОтбор; // ЭлементОтбораКомпоновкиДанных - 
					ПолеДетализации = ПолеМенеджер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбор.ЛевоеЗначение = ПолеДинамическийПериод Тогда
				ЭлементОтбораДинамическийПериод = ЭлементОтбор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторВариантаОтчета = "ПоОплатам" Тогда
		
		Если ЭлементОтбораДинамическийПериод <> Неопределено И ЭлементОтбораДинамическийПериод.Использование Тогда
			
			ПараметрыВывода = ДанныеРасшифровки.Настройки.Структура[0].Настройки.ПараметрыВывода; //  ЗначенияПараметровВыводаКомпоновкиДанных - 
			ВыбранныеПоля   = ДанныеРасшифровки.Настройки.Структура[0].Настройки.Выбор; // ВыбранныеПоляКомпоновкиДанных - 
			
			Параметр = Новый ПараметрКомпоновкиДанных("РасположениеРесурсов");
			ПараметрРасположениеРесурсов = ПараметрыВывода.Элементы.Найти(Параметр);
			ПараметрРасположениеРесурсов.Значение = РасположениеРесурсовКомпоновкиДанных.Горизонтально;
			
			Параметр = Новый ПараметрКомпоновкиДанных("ВертикальноеРасположениеОбщихИтогов");
			ПараметрВертикальногоРасположенияИтогов = ПараметрыВывода.Элементы.Найти(Параметр);
			ПараметрВертикальногоРасположенияИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Начало;
			
			ПолеОтгрузкаПлан           = Новый ПолеКомпоновкиДанных("Планы.Отгрузка");
			ПолеОтгрузкаФакт           = Новый ПолеКомпоновкиДанных("Факт.Отгрузка");
			ПолеОтгрузкаИсполнение     = Новый ПолеКомпоновкиДанных("ИсполнениеПлана.Отгрузка");
			ПолеОплатаПлан             = Новый ПолеКомпоновкиДанных("Планы.Оплата");
			ПолеОплатаФакт             = Новый ПолеКомпоновкиДанных("Факт.Оплата");
			ПолеОплатаИсполнение       = Новый ПолеКомпоновкиДанных("ИсполнениеПлана.Оплата");
			
			ПолеОтгрузкаПланИтог       = Новый ПолеКомпоновкиДанных("Планы.ОтгрузкаИтог");
			ПолеОтгрузкаФактИтог       = Новый ПолеКомпоновкиДанных("Факт.ОтгрузкаИтог");
			ПолеОтгрузкаИсполнениеИтог = Новый ПолеКомпоновкиДанных("ИсполнениеПлана.ОтгрузкаИтог");
			ПолеОплатаПланИтог         = Новый ПолеКомпоновкиДанных("Планы.ОплатаИтог");
			ПолеОплатаФактИтог         = Новый ПолеКомпоновкиДанных("Факт.ОплатаИтог");
			ПолеОплатаИсполнениеИтог   = Новый ПолеКомпоновкиДанных("ИсполнениеПлана.ОплатаИтог");
			
			Для Каждого ГруппаПолейВыбора Из ВыбранныеПоля.Элементы Цикл
				
				Если ТипЗнч(ГруппаПолейВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
					
					Для Каждого ПолеВыбора Из ГруппаПолейВыбора.Элементы Цикл
						
						Если ТипЗнч(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
							Если ПолеВыбора.Поле = ПолеОтгрузкаПлан Тогда
								ПолеВыбора.Использование = Истина;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОтгрузкаФакт Тогда
								ПолеВыбора.Использование = Истина;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОтгрузкаИсполнение Тогда
								ПолеВыбора.Использование = Истина;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОплатаПлан Тогда
								ПолеВыбора.Использование = Истина;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОплатаФакт Тогда
								ПолеВыбора.Использование = Истина;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОплатаИсполнение Тогда
								ПолеВыбора.Использование = Истина;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОтгрузкаПланИтог Тогда
								ПолеВыбора.Использование = Ложь;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОтгрузкаФактИтог Тогда
								ПолеВыбора.Использование = Ложь;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОтгрузкаИсполнениеИтог Тогда
								ПолеВыбора.Использование = Ложь;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОплатаПланИтог Тогда
								ПолеВыбора.Использование = Ложь;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОплатаФактИтог Тогда
								ПолеВыбора.Использование = Ложь;
							КонецЕсли;
							Если ПолеВыбора.Поле = ПолеОплатаИсполнениеИтог Тогда
								ПолеВыбора.Использование = Ложь;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ЭлементОтбораКомпоновкиДанных -
	Если ЭлементОтбораДетализация <> Неопределено
	И ЭлементОтбораДетализация.Использование Тогда
		
		// Удаление стандартной группировки для замены на подчиненную по детализации
		Если ТипЗнч(КоллекцияЭлементовСтруктуры[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			КоллекцияЭлементовСтруктуры[0].Строки.Очистить();
			ГруппировкаДетализации = КоллекцияЭлементовСтруктуры[0].Строки.Добавить(); // ГруппировкаКомпоновкиДанных - 
			
		Иначе
			
			КоллекцияЭлементовСтруктуры.Очистить();
			ГруппировкаДетализации = КоллекцияЭлементовСтруктуры.Добавить(
				Тип("ГруппировкаКомпоновкиДанных")); // ГруппировкаКомпоновкиДанных - 
			
		КонецЕсли;
		
		ПравоеЗначениеОтбора = ЭлементОтбораДетализация.ПравоеЗначение; // СправочникСсылка - 
		Если ПравоеЗначениеОтбора <> Неопределено Тогда
			
			Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
					
					Если ПравоеЗначениеОтбора.Количество() = 1
					И ПравоеЗначениеОтбора[0].Значение["Наименование"] = "" Тогда
						
						ОтборыОтчета.Элементы.Удалить(ЭлементОтбораДетализация);
					Иначе
						
						// Переопределение отбора на уровень группировки детализации
						ЗаменаОтбораПоДетализации = ГруппировкаДетализации.Отбор.Элементы.Добавить(
							Тип("ЭлементОтбораКомпоновкиДанных"));
						ЗаменаОтбораПоДетализации.Использование = Истина;
						ЗаменаОтбораПоДетализации.ВидСравнения = ЭлементОтбораДетализация.ВидСравнения;
						ЗаменаОтбораПоДетализации.ЛевоеЗначение = ПолеДетализации;
						ЗаменаОтбораПоДетализации.ПравоеЗначение = ЭлементОтбораДетализация.ПравоеЗначение;
						
						ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("ВыводитьОтбор");
						ПараметрГруппировкиВыводитьОтбор = ГруппировкаДетализации.ПараметрыВывода.Элементы.Найти(ПараметрГруппировки);
						ПараметрГруппировкиВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
						ПараметрГруппировкиВыводитьОтбор.Использование = Истина;
						
						ОтборыОтчета.Элементы.Удалить(ЭлементОтбораДетализация);
					КонецЕсли;
					
				Иначе
					ОтборыОтчета.Элементы.Удалить(ЭлементОтбораДетализация);
				КонецЕсли;
				
			Иначе
				
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравоеЗначениеОтбора, "Наименование") <> "" Тогда
					
					// Переопределение отбора на уровень группировки детализации
					ЗаменаОтбораПоДетализации = ГруппировкаДетализации.Отбор.Элементы.Добавить(
						Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаменаОтбораПоДетализации.Использование = Истина;
					ЗаменаОтбораПоДетализации.ВидСравнения = ЭлементОтбораДетализация.ВидСравнения;
					ЗаменаОтбораПоДетализации.ЛевоеЗначение = ПолеДетализации;
					ЗаменаОтбораПоДетализации.ПравоеЗначение = ЭлементОтбораДетализация.ПравоеЗначение;
					
					ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("ВыводитьОтбор");
					ПараметрГруппировкиВыводитьОтбор = ГруппировкаДетализации.ПараметрыВывода.Элементы.Найти(ПараметрГруппировки);
					ПараметрГруппировкиВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
					ПараметрГруппировкиВыводитьОтбор.Использование = Истина;
					
					ОтборыОтчета.Элементы.Удалить(ЭлементОтбораДетализация);
					
				Иначе
					ОтборыОтчета.Элементы.Удалить(ЭлементОтбораДетализация);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ГруппировкаДетализации.Использование = Истина;
		ГруппировкаДетализации.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ПолеГруппировкиДетализации = ГруппировкаДетализации.ПоляГруппировки.Элементы.Добавить(
			Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиДетализации.Использование = Истина;
		ПолеГруппировкиДетализации.Поле = ПолеДетализации;
		
		Если ТипЗнч(ГруппировкаДетализации) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			ГруппировкаРегистратор = ГруппировкаДетализации.Структура.Добавить();
		Иначе
			ГруппировкаРегистратор = ГруппировкаДетализации.Структура.Добавить(
				Тип("ГруппировкаКомпоновкиДанных"));
		КонецЕсли;
		ГруппировкаРегистратор.Имя = "Расшифровка";
		ГруппировкаРегистратор.Использование = Истина;
		ГруппировкаРегистратор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ПолеГруппировкиРегистратор = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(
			Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиРегистратор.Использование = Истина;
		ПолеГруппировкиРегистратор.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаказовПоПланам

// Выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  РаспределяемаяСумма - Число - сумма, которую надо распределить;
//  МассивКоэффициентов - Массив - коэффициенты распределения;
//  КратностьТовара - Число - кратность распределенного количество.
//
// Возвращаемое значение:
//  Массив - массив размерностью равный массиву коэффициентов, содержит
//           суммы в соответствии с весом коэффициента (из массива коэффициентов).
//           В случае если распределить не удалось (сумма = 0, кол-во коэффициентов = 0,
//           или суммарный вес коэффициентов = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьКоличествоПропорциональноКоэффициентамИКратностиСтроки(Знач РаспределяемаяСумма, КоэффициентУпаковки, Коэффициенты, КратностьТовара)
	
	Если Коэффициенты.Количество() = 0 Или Не ЗначениеЗаполнено(РаспределяемаяСумма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМаксимальногоКоэффициента = 0;
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = 0;
	
	Для Индекс = 0 По Коэффициенты.Количество() - 1 Цикл
		Коэффициент = Коэффициенты[Индекс];
		
		АбсолютноеЗначениеКоэффициента = ?(Коэффициент > 0, Коэффициент, -Коэффициент);
		Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
			МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
			ИндексМаксимальногоКоэффициента = Индекс;
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив(Коэффициенты.Количество());
	
	Для Индекс = 0 По Коэффициенты.Количество() - 2 Цикл
		Если РаспределеннаяСумма>= РаспределяемаяСумма Тогда
			Прервать;
		КонецЕсли;
		Результат[Индекс] = Окр((РаспределяемаяСумма-РаспределеннаяСумма) * Коэффициенты[Индекс] / СуммаКоэффициентов, 3, 1);
		КоличествоКратныхУпаковок = Результат[Индекс] * КоэффициентУпаковки / КратностьТовара;
		Если КоличествоКратныхУпаковок - Цел(КоличествоКратныхУпаковок) > 0 Тогда
			Результат[Индекс] = (Цел(КоличествоКратныхУпаковок) + 1) * КратностьТовара / КоэффициентУпаковки;
		КонецЕсли;
		РаспределеннаяСумма = РаспределеннаяСумма + Результат[Индекс];
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
	КонецЦикла;
	
	// Последний коэффициент рассчитывается с учетом ранее вычисленных.
	ИндексПоследнегоКоэффициента = Коэффициенты.Количество() -1;
	Результат[ИндексПоследнегоКоэффициента] = РаспределяемаяСумма - РаспределеннаяСумма;
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиИлиРаспределитьНаСервере(ПараметрыРаспределения, Знач ВыделенныеСтроки, ФормированиеЗаказов) Экспорт
	
	Если ПараметрыРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаспределения.Вставить("НомерДняНедели", ПланированиеКлиентСервер.НомерДняНедели(ПараметрыРаспределения.ДеньНедели));
	Периодичность = ПараметрыРаспределения.Периодичность;
	
	Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваСборки" Тогда
		ИмяКолонкиПериода = "ДатаВыпуска";
		ИмяКолонкиДатаЗаказа = "";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваРазборки" Тогда
		ИмяКолонкиПериода = "ДатаЗаказа";
		ИмяКолонкиДатаЗаказа = "";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
		ИмяКолонкиПериода = "ДатаПоступления";
		ИмяКолонкиДатаЗаказа = "";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
		ИмяКолонкиПериода = "НачалоПериодаСборки";
		ИмяКолонкиДатаЗаказа = "ДатаЗаказа";
	ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПередачиМатериаловВПроизводство" Тогда
		ИмяКолонкиПериода = "НачалоПериодаПотребности";
		ИмяКолонкиДатаЗаказа = "ДатаЗаказа";
	КонецЕсли;
	
	КэшированныеНастройки = Новый Соответствие;
	
	Если ПараметрыРаспределения.Операция = "Распределение" Тогда
		ДолиРаспределения = Новый ТаблицаЗначений;
		ДолиРаспределения.Колонки.Добавить("Период", Новый ОписаниеТипов("Число"));
		ДолиРаспределения.Колонки.Добавить("Доля", Новый ОписаниеТипов("Число"));
		ДолиРаспределения.Индексы.Добавить("Период");
		
		ТекущийПериод = 1;
		Для каждого Доля Из ПараметрыРаспределения.Доли Цикл
		
			НоваяСтрока = ДолиРаспределения.Добавить();
			НоваяСтрока.Период = ТекущийПериод;
			НоваяСтрока.Доля = Доля;
			
			ТекущийПериод = ТекущийПериод + 1;
		КонецЦикла;
		
		СуммаДолей = ДолиРаспределения.Итог("Доля");
		
		Коэффициенты = ДолиРаспределения.ВыгрузитьКолонку("Доля");
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТЧ = ФормированиеЗаказов.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ПараметрыРаспределения.ОтметитьКЗаказу Тогда
			СтрокаТЧ.ОтметитьКЗаказу = Истина;
		КонецЕсли; 
		
		Если ПараметрыРаспределения.Операция = "Перенос" Тогда
		
			Если ПараметрыРаспределения.ВариантПереноса = "НаЧисло" Тогда
			
				Если Периодичность = Перечисления.Периодичность.МЕСЯЦ И ПараметрыРаспределения.НомерДня = 31 Тогда
				
					СтрокаТЧ[ИмяКолонкиПериода] =  КонецМЕСЯЦа(СтрокаТЧ[ИмяКолонкиПериода]);
				
				Иначе
					ОкончаниеПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
					ДатаПереноса = НачалоДня(ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТЧ[ИмяКолонкиПериода], 
						Периодичность))-1 + ПараметрыРаспределения.НомерДня * 86400;
					Если ОкончаниеПериода <= ДатаПереноса Тогда
					
						СтрокаТЧ[ИмяКолонкиПериода] =  ОкончаниеПериода;
					
					Иначе
					
						СтрокаТЧ[ИмяКолонкиПериода] =  ДатаПереноса;
					
					КонецЕсли;
				КонецЕсли;
			
			ИначеЕсли ПараметрыРаспределения.ВариантПереноса = "НаПервыйДеньНедели" Тогда
				
				НачалоПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
				ТекущийДеньНедели = ДеньНедели(НачалоПериода);
				
				Если ТекущийДеньНедели <= ПараметрыРаспределения.НомерДняНедели Тогда
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоНедели(НачалоПериода) + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
				Иначе
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоДня(КонецНедели(НачалоПериода)) + ПараметрыРаспределения.НомерДняНедели * 86400;
				КонецЕсли;
				
			ИначеЕсли ПараметрыРаспределения.ВариантПереноса = "НаПоследнийДеньНедели" Тогда
				
				ОкончаниеПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
				ТекущийДеньНедели = ДеньНедели(ОкончаниеПериода);
				
				Если ТекущийДеньНедели >= ПараметрыРаспределения.НомерДняНедели Тогда
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоНедели(ОкончаниеПериода) + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
				Иначе
					СтрокаТЧ[ИмяКолонкиПериода] =  НачалоДня(ОкончаниеПериода) - (7 - ПараметрыРаспределения.НомерДняНедели + ТекущийДеньНедели) * 86400;
				КонецЕсли;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ИмяКолонкиДатаЗаказа) Тогда
				СтрокаТЧ[ИмяКолонкиДатаЗаказа] = СтрокаТЧ[ИмяКолонкиПериода] - СтрокаТЧ.ДнейДоЗаказа*86400;
			КонецЕсли;
			
		ИначеЕсли ПараметрыРаспределения.Операция = "Распределение" Тогда
			
			Если СтрокаТЧ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НачалоПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
			Настройки = КэшированныеНастройки.Получить(НачалоПериода);
			Если Настройки = Неопределено Тогда
				
				ОкончаниеПериода = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(СтрокаТЧ[ИмяКолонкиПериода], Периодичность);
				КоличествоДнейВПериоде = Цел((ОкончаниеПериода + 1 - НачалоПериода)/86400);
				
				Если КоличествоДнейВПериоде >= ПараметрыРаспределения.КоличествоПериодов Тогда
					КоличествоПериодов = ПараметрыРаспределения.КоличествоПериодов;
				Иначе
					КоличествоПериодов = КоличествоДнейВПериоде;
				КонецЕсли;
				
				Если ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
					ТекущийДеньНедели = ДеньНедели(НачалоПериода);
					Если ТекущийДеньНедели <= ПараметрыРаспределения.НомерДняНедели Тогда
						ПервыйПериод = НачалоПериода  + (ПараметрыРаспределения.НомерДняНедели - ТекущийДеньНедели) * 86400;
					Иначе
						ПервыйПериод = КонецНедели(НачалоПериода) + 1 + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
					КонецЕсли;
				Иначе
					ПервыйПериод = НачалоПериода;
				КонецЕсли;
				
				Если ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
					
					ТекущийДеньНедели = ДеньНедели(ОкончаниеПериода);
					Если ТекущийДеньНедели >= ПараметрыРаспределения.НомерДняНедели Тогда
						ПоследнийПериод = НачалоНедели(ОкончаниеПериода) + (ПараметрыРаспределения.НомерДняНедели -1) * 86400;
					Иначе
						ПоследнийПериод = НачалоНедели(ОкончаниеПериода)- (8 - ПараметрыРаспределения.НомерДняНедели) * 86400;
					КонецЕсли;
					
					КоличествоПериодов = Цел((ПоследнийПериод - ПервыйПериод) / 604800) + 1;
					
				КонецЕсли;
				
				СуммаДолей = 0;
				Коэффициенты = Новый Массив;
				Для каждого СтрокаДоли Из ДолиРаспределения Цикл
					
					Если СтрокаДоли.Период > КоличествоПериодов Тогда
						Продолжить;
					КонецЕсли; 
					
					Коэффициенты.Добавить(СтрокаДоли.Доля);
					СуммаДолей = СуммаДолей + СтрокаДоли.Доля;
					
				КонецЦикла;
				
				СтруктураНастроек = Новый Структура();
				СтруктураНастроек.Вставить("КоличествоПериодов", КоличествоПериодов);
				СтруктураНастроек.Вставить("Коэффициенты", Коэффициенты);
				СтруктураНастроек.Вставить("ПервыйПериод", ПервыйПериод);
				СтруктураНастроек.Вставить("КоличествоДнейВПериоде", КоличествоДнейВПериоде);
				СтруктураНастроек.Вставить("СуммаДолей", СуммаДолей);
				
				КэшированныеНастройки.Вставить(НачалоПериода, СтруктураНастроек);
				
			Иначе
				
				КоличествоПериодов     = Настройки.КоличествоПериодов;
				Коэффициенты           = Настройки.Коэффициенты;
				ПервыйПериод           = Настройки.ПервыйПериод;
				КоличествоДнейВПериоде = Настройки.КоличествоДнейВПериоде;
				СуммаДолей             = Настройки.СуммаДолей;
			
			КонецЕсли; 
			
			Если КоличествоПериодов = 1 ИЛИ СуммаДолей = 0 Тогда
				СтрокаТЧ[ИмяКолонкиПериода] = ПервыйПериод;
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваСборки"
				ИЛИ ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваРазборки" Тогда
				КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(СтрокаТЧ.Упаковка, СтрокаТч.Номенклатура);
				КоличествоУпаковок = РаспределитьКоличествоПропорциональноКоэффициентамИКратностиСтроки(
					СтрокаТЧ.КоличествоУпаковок,
					КоэффициентУпаковки,
					Коэффициенты,
					СтрокаТЧ.КоличествоПродукцииВСпецификации);
			ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
				КоэффициентУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(СтрокаТЧ.Упаковка, СтрокаТч.Номенклатура);
				КоличествоУпаковок = РаспределитьКоличествоПропорциональноКоэффициентамИКратностиСтроки(
					СтрокаТЧ.КоличествоУпаковок,
					КоэффициентУпаковки,
					Коэффициенты,
					СтрокаТЧ.КоличествоКомплектовВВариантеКомплектации);
				ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПередачиМатериаловВПроизводство"
					Или ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
				КоличествоУпаковок = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
					СтрокаТЧ.КоличествоУпаковок, 
					Коэффициенты,
					3 + ПараметрыРаспределения.ТочностьОкругления);
			КонецЕсли;
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваСборки"
				И Не ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
				СтрокаТЧ[ИмяКолонкиПериода] = ОкончаниеПериода;
				ПоследнийПериод = КоличествоУпаковок.Количество()-1;
				КоличествоУпаковок.Вставить(0, КоличествоУпаковок[ПоследнийПериод]);
				КоличествоУпаковок.Удалить(ПоследнийПериод + 1);
			Иначе
				СтрокаТЧ[ИмяКолонкиПериода] = ПервыйПериод;
			КонецЕсли;
			
			СтрокаТЧПериод = СтрокаТЧ.Период; // СтандартныйПериод -
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваСборки" Тогда
				СтрокаТЧПериод.ДатаНачала = НачалоПериода;
				СтрокаТЧПериод.ДатаОкончания = СтрокаТЧ[ИмяКолонкиПериода];
			ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваРазборки" Тогда
				СтрокаТЧПериод.ДатаНачала = НачалоПериода;
				СтрокаТЧПериод.ДатаОкончания = ОкончаниеПериода;
			Иначе
				СтрокаТЧПериод.ДатаНачала = СтрокаТЧ[ИмяКолонкиПериода];
				СтрокаТЧПериод.ДатаОкончания = ОкончаниеПериода;
			КонецЕсли;
			
			СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковок[0];
			
			// Расчет даты заказа и начала сборки 
			Если ЗначениеЗаполнено(ИмяКолонкиДатаЗаказа) Тогда
				СтрокаТЧ[ИмяКолонкиДатаЗаказа] = СтрокаТЧ[ИмяКолонкиПериода] - СтрокаТЧ.ДнейДоЗаказа*86400;
			КонецЕсли;
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
				СтрокаТЧ.ДатаНачалаСборки = СтрокаТЧ.НачалоПериодаСборки - СтрокаТЧ.ДлительностьСборкиРазборки*86400;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
			Если ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
				СтрокаТЧ.ОбщийВес = СтрокаТЧ.Количество * СтрокаТЧ.Вес;
			КонецЕсли;
	
			Для НомерПериода = 2 По КоличествоПериодов Цикл
				
				Если КоличествоУпаковок[НомерПериода-1] = Неопределено
					Или КоличествоУпаковок[НомерПериода-1] <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ФормированиеЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.Период = Новый СтандартныйПериод;
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок[НомерПериода-1];
				
				Если ПараметрыРаспределения.ВариантРаспределенияДат = "ПоПолугодиям" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ДобавитьМЕСЯЦ(НачалоПериода, 6 * (НомерПериода-1));
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоКварталам" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ДобавитьМЕСЯЦ(НачалоПериода, 3 * (НомерПериода-1));
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоМЕСЯЦам" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ДобавитьМЕСЯЦ(НачалоПериода, НомерПериода-1);
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоНеделям" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = ПервыйПериод + 604800 * (НомерПериода-1);
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоДекадам" Тогда
					НачалоТекущегоМЕСЯЦа = ДобавитьМЕСЯЦ(НачалоПериода, Цел((НомерПериода-1)/3));
					НоваяСтрока[ИмяКолонкиПериода] = НачалоТекущегоМЕСЯЦа + 864000 * ((НомерПериода-1)%3);
				ИначеЕсли ПараметрыРаспределения.ВариантРаспределенияДат = "ПоПериодам" Тогда
					НоваяСтрока[ИмяКолонкиПериода] = НачалоПериода + 86400 * Цел(КоличествоДнейВПериоде / КоличествоПериодов * (НомерПериода-1));
				КонецЕсли;
				
				НоваяСтрока[ИмяКолонкиПериода] = Мин(НоваяСтрока[ИмяКолонкиПериода], ОкончаниеПериода);
				НоваяСтрокаПериод = НоваяСтрока.Период; // СтандартныйПериод -
				Если ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваСборки" Тогда
					НоваяСтрокаПериод.ДатаНачала = НачалоПериода;
					НоваяСтрокаПериод.ДатаОкончания = НоваяСтрока[ИмяКолонкиПериода];
				ИначеЕсли ПараметрыРаспределения.ТипПланирования = "ПланированиеПроизводстваРазборки" Тогда
					НоваяСтрокаПериод.ДатаНачала = НачалоПериода;
					НоваяСтрокаПериод.ДатаОкончания = ОкончаниеПериода;
				Иначе
					НоваяСтрокаПериод.ДатаНачала = НоваяСтрока[ИмяКолонкиПериода];
					НоваяСтрокаПериод.ДатаОкончания = ОкончаниеПериода;
				КонецЕсли;
				
				// Расчет даты заказа и начала сборки 
				Если ЗначениеЗаполнено(ИмяКолонкиДатаЗаказа) Тогда
					НоваяСтрока[ИмяКолонкиДатаЗаказа] = НоваяСтрока[ИмяКолонкиПериода] - НоваяСтрока.ДнейДоЗаказа*86400;
				КонецЕсли;
				Если ПараметрыРаспределения.ТипПланирования = "ПланированиеСборкиРазборки" Тогда
					НоваяСтрока.ДатаНачалаСборки = НоваяСтрока.НачалоПериодаСборки - НоваяСтрока.ДлительностьСборкиРазборки*86400;
				КонецЕсли;
			
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				Если ПараметрыРаспределения.ТипПланирования = "ПланированиеЗакупок" Тогда
					НоваяСтрока.ОбщийВес = НоваяСтрока.Количество * НоваяСтрока.Вес;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыКроссТаблиц

// Процедура проверяет заполнение склада в документе
//
// Параметры:
//  Объект            - ДокументОбъект - документ, в котором необходимо проверить заполнение склада
//  Отказ             - Булево - Истина, если есть ошибки заполнения
//  ПараметрыПроверки - Структура - Параметры проверки: ИмяТЧ и ПредставлениеТЧ.
//
Процедура ПроверитьЗаполнениеСклада(Объект, Отказ, ПараметрыПроверки)

	ИмяТЧ           = ПараметрыПроверки.ИмяТЧ;
	ПредставлениеТЧ = ПараметрыПроверки.ПредставлениеТЧ;
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""%2""'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки,
	|	ТЧ.Номенклатура,
	|	ТЧ.Склад
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|ГДЕ
	|	ТЧ.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧ.НомерСтроки
	|ИЗ
	|	ТЧ КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТЧ.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Номенклатура, Склад"));
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, 
			ВыборкаДетальныеЗаписи.НомерСтроки, 
			ПредставлениеТЧ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ВыборкаДетальныеЗаписи.НомерСтроки, "Склад"),
			,
			Отказ);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСобытийОбъекта

Процедура ПриЧтенииСозданииНаСервере(Форма)
	
	Форма.ОтображатьНомерПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Сценарий, "ОтображатьНомерПериода");
	
	СоздатьТаблицуПериодов(Форма, "Периоды");
	
	СоздатьРеквизитыПроверкиИзменений(
		Форма, 
		"РеквизитыДоИзменения", 
		"Сценарий, Валюта, ВидПлана, Периодичность, НачалоПериода, ОкончаниеПериода");
	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИсточниковПланирования

// Функция преобразовывает данные по правилу и возвращает результат по источнику или группе источников.
//
// Параметры:
//  ТипПлана                         - ПеречислениеСсылка.ТипыПланов - Тип плана, например ПланЗакупок, ПланПродаж и т.д.
//  ПравилаЗаполненияНайденныеСтроки - Массив из СтрокаТаблицыЗначений - Состав:
//                                      * КомпоновщикНастроекКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных -
//                                      * НомерСтроки - Число - 
//  ПараметрыПреобразования          - Структура - параметры преобразования
//  ПользовательскиеНастройки        - ПользовательскиеНастройкиКомпоновкиДанных - настройки пользователя для документа плана
//  ДополнительныеПараметры          - Структура - Дополнительные параметры, используемые при получении данных из источников.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица итоговых данных преобразованных по правилам из источника или группы источников.
//
Функция ПреобразоватьДанные(Знач ТипПлана, ПравилаЗаполненияНайденныеСтроки, ПараметрыПреобразования, 
	ПользовательскиеНастройки = Неопределено, ДополнительныеПараметры = Неопределено, ЗаполнятьНазначениеВТЧ = Истина)
	
	СхемаКомпоновкиДанных = ПолучитьСхемуПреобразованияДанных(ТипПлана,,ЗаполнятьНазначениеВТЧ);
	
	// Добавление предопределенных параметров и установка значений.
	НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "Коэффициент";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Число");
	НовыйПараметр.Значение = 1;
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	// Добавление параметров из дополнительных параметров и установка значений.
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПараметрыДанных") Тогда
		
		Для каждого Параметр Из ДополнительныеПараметры.ПараметрыДанных Цикл
			
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Ключ);
			
			Если НовыйПараметр = Неопределено Тогда
				
				НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
				НовыйПараметр.Имя = Параметр.Ключ;
				НовыйПараметр.ОграничениеИспользования = Ложь;

			КонецЕсли;
			
			НовыйПараметр.Значение = Параметр.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборДанныхОбъединение = СхемаКомпоновкиДанных.НаборыДанных.Объединение; // НаборДанныхОбъединениеСхемыКомпоновкиДанных - 
	НаборДанныхПрисоединение = СхемаКомпоновкиДанных.НаборыДанных.Найти("Присоединение");
	СвязиНаборов = Новый Структура;
	
	Если ПараметрыПреобразования.Присоединять = Истина Тогда
		СтрокаКоэффициент = "";
	Иначе
		СтрокаКоэффициент = " * &Коэффициент";
	КонецЕсли; 
	Для каждого ПолеИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		
		Если ПолеИтога.ПутьКДанным <> "Количество" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Сложение Тогда
			
			ПолеИтога.Выражение = "Сумма("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Максимум Тогда
			
			ПолеИтога.Выражение = "Максимум("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Среднее Тогда
			
			ПолеИтога.Выражение = "Среднее("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Минимум Тогда
			
			ПолеИтога.Выражение = "Минимум("+ПолеИтога.ПутьКДанным+")" + СтрокаКоэффициент;
			
		КонецЕсли;
	КонецЦикла; 
	
	НаборыДанных = Новый Структура;
	ПоляПрисоединения = Новый Массив; // Поля набора присоединения, которые необходимо удалить из набора объединения
	
	КоличествоНаборовДанныхПрисоединение = 0;
	Для каждого НайденнаяСтрока Из ПравилаЗаполненияНайденныеСтроки Цикл
		// Определяем наборы присоединения только для верхнего уровня дерева правил
		Если НайденнаяСтрока.Присоединять = Истина И НайденнаяСтрока.НомерСтрокиРодитель = 0 Тогда
			КоличествоНаборовДанныхПрисоединение = КоличествоНаборовДанныхПрисоединение + 1;
			
			// Переопределяем поля, которые нужно взять из набора
			Если НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы;
			Иначе
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы;
			КонецЕсли;
			Для каждого ЭлементНастройки Из НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки.Элементы Цикл 
				Если ТипЗнч(ЭлементНастройки) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
					ДоступныеПоляВыбора = ЭлементНастройки.Элементы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для каждого Поле Из ДоступныеПоляВыбора Цикл
				Если ТипЗнч(Поле) = Тип("ВыбранноеПолеКомпоновкиДанных") И НЕ Поле.Использование Тогда
					Продолжить;
				КонецЕсли; 
				Если ПоляПрисоединения.Найти(Строка(Поле.Поле)) = Неопределено Тогда
					ПоляПрисоединения.Добавить(Строка(Поле.Поле));
				КонецЕсли;
			КонецЦикла;
		Иначе
			НайденнаяСтрока.Присоединять = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоНаборовДанныхПрисоединение = 0 И НаборДанныхПрисоединение <> Неопределено Тогда
		
		// Добавляем поля из набора присоединения, чтобы была возможность выбирать все одним набором.
		Для каждого Поле Из НаборДанныхПрисоединение.Элементы.НаборДанных.Поля Цикл
			Если НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(Поле.ПутьКДанным) = Неопределено Тогда
				ПолеНабораДанных = НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЕсли; 
		КонецЦикла;
		
		НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
		СхемаКомпоновкиДанных.НаборыДанных.Удалить(НаборДанныхПрисоединение);
		
	Иначе
		// Удаляем поля из набора объединения - чтобы взять их из присоединения
		Для каждого Поле Из ПоляПрисоединения Цикл
			
			Если СтрНайти(Поле, "Количество") Тогда
				Продолжить;
			КонецЕсли;
			
			НайденноеПоле = НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(Поле);
			Если НайденноеПоле <> Неопределено Тогда
				НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Удалить(НайденноеПоле);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 
		
	// Добавление наборов данных для каждого исходного набора данных.
	Для каждого НайденнаяСтрока Из ПравилаЗаполненияНайденныеСтроки Цикл
		
		НаборДанныхКлюч = "НаборДанных" + Формат(НайденнаяСтрока.НомерСтроки, "ЧГ=0");
		НаборыДанных.Вставить(НаборДанныхКлюч, НайденнаяСтрока.НаборДанных);
		
		// Добавление набора данных.
		Если НайденнаяСтрока.Присоединять = Истина И НаборДанныхПрисоединение <> Неопределено Тогда
			НаборДанныхОбъект = НаборДанныхПрисоединение.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхОбъект.Имя = НаборДанныхКлюч;
			НаборДанныхОбъект.ИмяОбъекта = НаборДанныхКлюч;
			НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных";
			
			// Добавление группировки
			Если НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
				КоллекцияПолейГруппировки = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы;
			Иначе
				КоллекцияПолейГруппировки = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура[0].ПоляГруппировки.Элементы;
			КонецЕсли;
			
			Для каждого ПолеГруппировки Из КоллекцияПолейГруппировки Цикл
			
				Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") И НЕ ПолеГруппировки.Использование
					ИЛИ НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(ПолеГруппировки.Поле) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СвязиНаборов.Вставить(Строка(ПолеГруппировки.Поле), Строка(ПолеГруппировки.Поле));
				
			КонецЦикла;
			
			Если НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы;
			Иначе
				ДоступныеПоляВыбора = НайденнаяСтрока.КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура[0].Выбор.ДоступныеПоляВыбора.Элементы;
			КонецЕсли;
			Для каждого Поле Из ДоступныеПоляВыбора Цикл
				Если Поле.Папка Тогда
					Продолжить;
				КонецЕсли; 
				ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабораДанных.ТипЗначения = Поле.ТипЗначения;
				ПолеНабораДанных.Поле = Строка(Поле.Поле);
				ПолеНабораДанных.Заголовок = Строка(Поле.Поле);
				ПолеНабораДанных.ПутьКДанным = Строка(Поле.Поле);
				
				Если НаборДанныхПрисоединение.Поля.Найти(Поле.Поле) = Неопределено Тогда
					ПолеНабораДанных = НаборДанныхПрисоединение.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
					ПолеНабораДанных.ТипЗначения = Поле.ТипЗначения;
					ПолеНабораДанных.Поле = Строка(Поле.Поле);
					ПолеНабораДанных.Заголовок = Строка(Поле.Поле);
					ПолеНабораДанных.ПутьКДанным = Строка(Поле.Поле);
				КонецЕсли;
			КонецЦикла;
			 
		Иначе
			НаборДанныхОбъект = НаборДанныхОбъединение.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхОбъект.Имя = НаборДанныхКлюч;
			НаборДанныхОбъект.ИмяОбъекта = НаборДанныхКлюч;
			НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных";
			
			Для каждого Поле Из НаборДанныхОбъединение.Элементы.НаборДанных.Поля Цикл
				ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЦикла;
		КонецЕсли;
				
	КонецЦикла;
	
	Если КоличествоНаборовДанныхПрисоединение > 0 И НаборДанныхПрисоединение <> Неопределено Тогда
		Для каждого ЭлементСвязи Из СвязиНаборов Цикл
			Если НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Найти(ЭлементСвязи.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСвязьДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
			НоваяСвязьДанных.НаборДанныхИсточник = "Объединение";
			НоваяСвязьДанных.НаборДанныхПриемник = "Присоединение";
			НоваяСвязьДанных.ВыражениеИсточник = ЭлементСвязи.Значение;
			НоваяСвязьДанных.ВыражениеПриемник = ЭлементСвязи.Ключ;
						
		КонецЦикла;
				
		НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
	КонецЕсли;
	
	НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
	
	// Загрузка настроек
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Загрузка настроек из дополнительных параметров
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
	// Включение использования параметров данных
	Для каждого ПараметрДанных Из КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы Цикл
		
		ПараметрДанных.Использование = Истина;
		
	КонецЦикла;
	
	// Отключение вывода общих итогов
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Добавление ресурса
	Если КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Количество() = 0 Тогда
		Для каждого Элемент Из КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			
			Если Элемент.Ресурс И НЕ Элемент.Папка Тогда
				НайденЭлемент = Ложь;
				Для каждого ЭлементВыбора Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы Цикл
					Если ЭлементВыбора.Поле = Элемент.Поле Тогда
						НайденЭлемент = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если НайденЭлемент Тогда
					Продолжить;
				КонецЕсли; 
				ВыбранноеПоле = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Поле = Элемент.Поле;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 
	
	// Добавление группировки
	Если КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Количество() = 0 Тогда
		ГруппировкаКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		// Добавление полей группировки
		Для каждого Элемент Из КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
			
			Если НЕ Элемент.Ресурс Тогда
								
				ВыбранноеПоле = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Поле = Элемент.Поле;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Таблица значений, в которую будет получен результат
	Результат = Новый ТаблицаЗначений;
	СКДНаборыДанныхОбъединение = СхемаКомпоновкиДанных.НаборыДанных.Объединение; // НаборДанныхОбъединениеМакетаКомпоновкиДанных
	Если СКДНаборыДанныхОбъединение.Элементы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанных);
		
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(Результат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	
	Исключать = ПараметрыПреобразования.Исключать И Результат.Колонки.Найти("Количество") <> Неопределено;
	КоличествоПравил = ПравилаЗаполненияНайденныеСтроки.Количество();
	
	ИмяФункции = "";
	Если ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Максимум Тогда
		
		ИмяФункции = НСтр("ru = 'Макс(%1)'");
		
	ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Среднее Тогда
		
		ИмяФункции = НСтр("ru = 'Сред(%1)'");
		
	ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Минимум Тогда
		
		ИмяФункции = НСтр("ru = 'Мин(%1)'");
		
	КонецЕсли;
	
	Коэффициент = 1;
	Если ПараметрыПреобразования.ВерхнийУровень И ДополнительныеПараметры.Свойство("ПараметрыДанных")
		И ДополнительныеПараметры.ПараметрыДанных.Свойство("Коэффициент")Тогда
		Коэффициент = ДополнительныеПараметры.ПараметрыДанных.Коэффициент;
	КонецЕсли;
	
	Для каждого СтрокаРезультата Из Результат Цикл
		
		Если Исключать Тогда
			СтрокаРезультата.Количество = - СтрокаРезультата.Количество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФункции) Тогда
			СтрокаРезультата.Расшифровка = ?(Исключать, "-","") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяФункции, СтрЗаменить(СтрокаРезультата.Расшифровка,"|", "; "));
			
			СтрокаРезультата.ЧисловоеПредставление = ?(Исключать, "-","") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяФункции,
				СтрЗаменить(СтрокаРезультата.ЧисловоеПредставление, "|", "; "));
		Иначе
			СтрокаРезультата.Расшифровка = СтрЗаменить(СтрокаРезультата.Расшифровка, "|", " + ");
			СтрокаРезультата.ЧисловоеПредставление = СтрЗаменить(СтрокаРезультата.ЧисловоеПредставление, "|", " + ");
			
			Если НЕ ПараметрыПреобразования.ВерхнийУровень ИЛИ НЕ Коэффициент = 1 ИЛИ Исключать Тогда
				СтрокаРезультата.Расшифровка           = ?(Исключать, "-","") + "(" + СтрокаРезультата.Расшифровка + ")";
				СтрокаРезультата.ЧисловоеПредставление = ?(Исключать, "-","") + "(" + СтрокаРезультата.ЧисловоеПредставление + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Коэффициент <> 1 Тогда
			СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " * Коэфф";
			СтрокаРезультата.ЧисловоеПредставление = СтрокаРезультата.ЧисловоеПредставление + " * " + Строка(Коэффициент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗаполненияПоФормулам

// Добавляет первый набор данных из СКД операнда в схему преобразования и все настройки операнда.
//
// Параметры:
//  СКД_Преобразование  - СхемаКомпоновкиДанных - схема преобразования документа, в которую добавляется набор операнда
//  КоллекцияНаборов  - НаборыДанныхМакетаКомпоновкиДанных - Коллекция объединения наборов данных в схеме преобразования
//  СКД_Операнда  - СхемаКомпоновкиДанных - схема операнда с настройками, из которой будут добавлены наборы 
//                 в схему преобразования
//  ИменаОперандов  - Строка - Имена операндов, разделенные запятыми, используемые для заполнения ТЧ.
//
Процедура ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, КоллекцияНаборов, СКД_Операнда, ИменаОперандов = "")
	
	НастройкиПреобразования = СКД_Преобразование.ВариантыНастроек[0].Настройки; // НастройкиКомпоновкиДанных - 
	
	НаборДанныхОбъект = КоллекцияНаборов.Элементы.Добавить(ТипЗнч(СКД_Операнда.НаборыДанных[0]));
	НаборДанныхОбъект.Имя = СКД_Операнда.НаборыДанных[0].Имя;
	НаборДанныхОбъект.ИсточникДанных = СКД_Преобразование.ИсточникиДанных[0].Имя;
	
	Если ТипЗнч(СКД_Операнда.НаборыДанных[0]) <> Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
		НаборДанныхОбъект.Запрос = СКД_Операнда.НаборыДанных[0].Запрос;
		НаборДанныхОбъект.АвтоЗаполнениеДоступныхПолей = СКД_Операнда.НаборыДанных[0].АвтоЗаполнениеДоступныхПолей;
	Иначе
		НаборДанныхОбъект.ИмяОбъекта  = СКД_Операнда.НаборыДанных[0].ИмяОбъекта ;
	КонецЕсли; 
	
	// Поля набора
	Для каждого Поле Из СКД_Операнда.НаборыДанных[0].Поля Цикл
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(ТипЗнч(Поле));
		ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		
		ПолеНабораДанных = КоллекцияНаборов.Поля.Найти(Поле.Поле);
		Если ПолеНабораДанных = Неопределено Тогда
			ПолеНабораДанных = КоллекцияНаборов.Поля.Добавить(ТипЗнч(Поле));
			ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		КонецЕсли; 
	КонецЦикла;
	
	// Ресурсы
	Для каждого Поле Из СКД_Операнда.ПоляИтога Цикл
		
		НовоеПоле = СКД_Преобразование.ПоляИтога.Найти(Поле.ПутьКДанным);
		
		Если НовоеПоле = Неопределено Тогда
			НовоеПоле = СКД_Преобразование.ПоляИтога.Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(НовоеПоле, Поле, "Выражение, ПутьКДанным");
		
		ПолеВыбора = НастройкиПреобразования.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(НовоеПоле.ПутьКДанным);
		ПолеВыбора.Заголовок = НовоеПоле.ПутьКДанным;
		ПолеВыбора.Использование = Истина;
		
		ИменаОперандов = ИменаОперандов + ?(ПустаяСтрока(ИменаОперандов), "", ", ") + НовоеПоле.ПутьКДанным;
	КонецЦикла; 
	
	Для каждого Параметр Из СКД_Операнда.Параметры Цикл
		
		НайденныйПараметр = СКД_Преобразование.Параметры.Найти(Параметр.Имя);
		Если НайденныйПараметр = Неопределено Тогда
			
			НовыйПараметр = СКД_Преобразование.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, 
			Параметр, 
			"ВключатьВДоступныеПоля, Использование, Выражение, ДоступенСписокЗначений, Заголовок, ЗапрещатьНезаполненныеЗначения,
			|Значение, Имя, ОграничениеИспользования, ПараметрФункциональныхОпций, ТипЗначения");
			
		КонецЕсли; 
	КонецЦикла; 
	

КонецПроцедуры

// Выполняет СКД преобразования, дополненную наборами операндов и др. настройками, выводит результат в таблицу.
//
// Параметры:
//  СКД_Преобразование   - СхемаКомпоновкиДанных - схема преобразования документа с добавленными наборами операндов
//  Параметры  - Структура - параметры необходимые для выполнения схемы
//  ТаблицаРезультата  - ТаблицаЗначений - таблица, в которую будет выведен результат выполнения схемы
//  НаборыДанныхОбъекты  - Структура - Структура с внешними наборами-объектами для схемы компоновки.
//
Процедура ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, ТаблицаРезультата, НаборыДанныхОбъекты = Неопределено)
	
	// Загрузка СКД
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД_Преобразование));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД_Преобразование.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	// Добавляем параметры
	Для каждого Параметр Из СКД_Преобразование.Параметры Цикл
		
		Если Параметры.Свойство(Параметр.Имя) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Параметр.Имя, Параметры[Параметр.Имя]);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Установка отборов
	Если Параметры.Свойство("Отбор") Тогда
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Поле = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле) <> Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, Поле, ЭлементОтбора.Значение,,, Новый Структура("ВПользовательскиеНастройки", Истина));
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если Параметры.Свойство("Ссылка") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Ссылка", Параметры.Ссылка);
	КонецЕсли; 
	
	// Установка отбора по сегментам номенклатуры
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	// Установка отбора по сегментам партнеров
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек); 
	
	// Отключение вывода общих итогов
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД_Преобразование, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанныхОбъекты, , Истина);
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

// Удаляет неиспользуемые наборы для заполнения по формулам
//
// Параметры:
//  СКД_Преобразование   - СхемаКомпоновкиДанных - схема преобразования документа.
//
Процедура УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование)

	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение; // НаборДанныхОбъединениеСхемыКомпоновкиДанных - 
	НаборДанныхПрисоединение = СКД_Преобразование.НаборыДанных.Найти("Присоединение");
	Если НаборДанныхПрисоединение <> Неопределено Тогда
		
		// Проверяем добавлены ли наборы присоединения
		Если НаборДанныхПрисоединение.Элементы.Количество() = 1 Тогда
			
			// Добавляем поля из набора присоединения, чтобы была возможность выбирать все одним набором.
			Для каждого Поле Из НаборДанныхПрисоединение.Элементы.НаборДанных.Поля Цикл
				НаборДанных = НаборДанныхОбъединение.Элементы.НаборДанных; // НаборДанныхЗапросСхемыКомпоновкиДанных - 
				ПолеНабораДанных = НаборДанных.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЦикла;
			
			Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
			
			Пока  Индекс >= 0 Цикл
				
				Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
				Если Связь.НаборДанныхИсточник = "Присоединение" ИЛИ Связь.НаборДанныхПриемник  = "Присоединение" Тогда
					СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
				КонецЕсли; 
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
			НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
			СКД_Преобразование.НаборыДанных.Удалить(НаборДанныхПрисоединение);
			
		Иначе
			НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НаборДанныхОбъединение.Элементы.Количество() = 1 Тогда
		
		Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
		
		Пока  Индекс >= 0 Цикл
			
			Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
			Если Связь.НаборДанныхИсточник = "Объединение" ИЛИ Связь.НаборДанныхПриемник = "Объединение" Тогда
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			КонецЕсли; 
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
		НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
		СКД_Преобразование.НаборыДанных.Удалить(НаборДанныхОбъединение);
		
	Иначе
		НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
	КонецЕсли;
	
	// Удаляем поля итогов которые не найдены в наборах данных
	Индекс = СКД_Преобразование.ПоляИтога.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ПолеНайдено = Ложь;
		ПолеИтога = СКД_Преобразование.ПоляИтога[Индекс];
		Для каждого Набор Из СКД_Преобразование.НаборыДанных Цикл
			
			Если Набор.Поля.Найти(ПолеИтога.ПутьКДанным) <> Неопределено Тогда
				ПолеНайдено = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла; 
		
		Если НЕ ПолеНайдено Тогда
			СКД_Преобразование.ПоляИтога.Удалить(ПолеИтога);
		КонецЕсли; 
		
		Индекс = Индекс - 1;
		
	КонецЦикла; 
	
	
КонецПроцедуры

// Настраивает СКД преобразования для вывода расшифровки значения одного операнда
//
// Параметры:
//  СКД_Преобразование   - СхемаКомпоновкиДанных - схема преобразования документа
//  КоллекцияНаборов  - НаборыДанныхМакетаКомпоновкиДанных - коллекция наборов, из которой необходимо удалить поля
//  МассивПолей  - Массив - Поля, которые должны остаться в схеме.
//
Процедура НастроитьСхемуДляРасшифровки(СКД_Преобразование, КоллекцияНаборов, МассивПолей)

	// Удаляем лишние поля
	УдалитьПоля(КоллекцияНаборов.Поля, МассивПолей);
	Для каждого Набор Из КоллекцияНаборов.Элементы Цикл
		УдалитьПоля(Набор.Поля, МассивПолей);
	КонецЦикла;
	
	Настройки = СКД_Преобразование.НастройкиПоУмолчанию;
	
	// Удаляем лишние связи
	СКД_Преобразование.СвязиНаборовДанных.Очистить();
	СКД_Преобразование.ПоляИтога.Очистить();
	Настройки.Структура.Очистить();
	
	ГруппировкаРегистратор = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	Для каждого Поле Из МассивПолей Цикл
	
		ПолеРегистратор = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРегистратор.Использование = Истина;
		ПолеРегистратор.Поле = Новый ПолеКомпоновкиДанных(Поле);
	
	КонецЦикла; 
	
	ВыбранныеПоляДляРегистратора = ГруппировкаРегистратор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляРегистратора.Использование = Истина;

КонецПроцедуры 

// Удаление полей компоновки
//
// Параметры:
// Поля             - ПоляНабораДанныхСхемыКомпоновкиДанных - Коллекция полей, из которых удаляем лишние
// МассивПолей        - Массив - Массив полей, которые нужно оставить.
//
Процедура УдалитьПоля(Поля, МассивПолей)
	
	МассивУдаляемыхПолей = Новый Массив();
	
	Для каждого Поле Из Поля Цикл
		Если МассивПолей.Найти(Поле.Поле) = Неопределено Тогда
			МассивУдаляемыхПолей.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Поле Из МассивУдаляемыхПолей Цикл
		Поля.Удалить(Поле);
	КонецЦикла; 

КонецПроцедуры

// Функция создает таблицу значений для заполнения периодами плана
//
// Возвращаемое значение:
//   см. ТаблицаПериоды
//
Функция ШаблонТаблицыПериодов() Экспорт
	
	ОписаниеТиповЧ = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0); 
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповДата = ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерКолонки",  ОписаниеТиповЧ);
	ТаблицаПериодов.Колонки.Добавить("ИмяКолонки",    ОписаниеТиповСтрока);
	ТаблицаПериодов.Колонки.Добавить("Активная",      ОписаниеТиповБулево);
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",    ОписаниеТиповДата);
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания", ОписаниеТиповДата);
	ТаблицаПериодов.Колонки.Добавить("Заголовок",     ОписаниеТиповСтрока);
	ТаблицаПериодов.Колонки.Добавить("Замещен",       ОписаниеТиповБулево);
	ТаблицаПериодов.Колонки.Добавить("ЗамещенКЗаказу",ОписаниеТиповБулево);
	
	Возврат ТаблицаПериодов;

КонецФункции 


// Доля дней наличия товара на остатках текст запроса переопределение.
// 
// Параметры:
//  НаборДанныхЗапросСКД - НаборДанныхЗапросСхемыКомпоновкиДанных -
//  Параметры            - Структура - состав ключей:
//   * СмещениеПериода - Число -
//   * Периодичность   - ПеречислениеСсылка.Периодичность -
//   * Периоды         - ТаблицаЗначений - Таблица периодов:
//      ** ДатаНачала    - Дата -
//      ** ДатаОкончания - Дата -
//   * НеПереопределено  - Булево - признак переопределения текста запроса
// 
Процедура ДоляДнейНаличияТовараНаОстаткахТекстЗапросаПереопределение(НаборДанныхЗапросСКД, Параметры)
	
	Смещение        = Параметры.СмещениеПериода;
	Периодичность   = Параметры.Периодичность;
	ТаблицаПериодов = Параметры.Периоды;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить("&НеПереопределено");
	
	Для каждого СтрокаТаблицы Из ТаблицаПериодов Цикл
		
		НачалоПериода = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(
							ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
								СтрокаТаблицы.ДатаНачала, Периодичность, Смещение) + 1,
							Периодичность);
		
		КонецПериода = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(
							ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
								СтрокаТаблицы.ДатаОкончания, Периодичность, Смещение) + 1,
							Периодичность);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&НачалоПериодаСмещения КАК НачалоПериодаСмещения,
		|	&НачалоПериода         КАК НачалоПериода,
		|	&КонецПериода          КАК КонецПериода";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаСмещения", ДатаВЗапрос(СтрокаТаблицы.ДатаНачала));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериода",		   ДатаВЗапрос(НачалоПериода));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода",		   ДатаВЗапрос(КонецПериода));
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	НаборДанныхЗапросСКД.Запрос = СтрЗаменить(
									НаборДанныхЗапросСКД.Запрос,
									"&НеПереопределено",
									СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Параметры.НеПереопределено = Ложь;
	
КонецПроцедуры

Функция ДатаВЗапрос(Дата)
	
	Возврат СтрШаблон(
				"ДАТАВРЕМЯ(%1, %2, %3, %4, %5, %6)",
				Формат(Год(Дата), "ЧГ=;"), Месяц(Дата), День(Дата), Час(Дата), Минута(Дата), Секунда(Дата));
	
КонецФункции

#КонецОбласти


#Область УправлениеПроцессомПланирования

// Процедура запускает фоновую проверку расчета дефицитов по этапам
//
// Параметры:
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования - сценарий для которого производится расчет.
//  ВидПлана - СправочникСсылка.ВидыПланов - вид плана для которого производится расчет.
//
Процедура ЗапускВыполненияФоновойПроверкиРасчетаДефицитаПоЭтапам(Сценарий, ВидПлана) Экспорт
	
	Ключ = "ПроверкаРасчетДефицитовПлановПоЭтапам" + ВидПлана.УникальныйИдентификатор();
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Проверка расчета дефицитов планов по этапам для вида плана'") + Строка(ВидПлана);
	
	ИмяЭкспортнойПроцедуры = "Планирование.ВыполнитьФоновуюПроверкуРасчетаДефицитовПоЭтапам";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	СтруктураПараметров = Новый Структура("КоличествоОшибок, ВидПлана, Сценарий");
	СтруктураПараметров.КоличествоОшибок = 0;
	СтруктураПараметров.Сценарий = Сценарий;
	СтруктураПараметров.ВидПлана = ВидПлана;
	ПараметрыЭкспортнойПроцедуры.Добавить(СтруктураПараметров);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура выполняет фоновую проверку расчета дефицитов по этапам и запускает фоновое задание по расчету дефицитов
//
// Параметры:
//  ПараметрыЗадания  - Структура - структура хранит количество ошибок, если ошибок будет больше определенного лимита,
//                                  то задание завершится.
//
Процедура ВыполнитьФоновуюПроверкуРасчетаДефицитовПоЭтапам(ПараметрыЗадания) Экспорт
	
	Если ПараметрыЗадания.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ТекстСообщения = НСтр("ru = 'Фоновая проверка расчета дефицитов планов по этапам остановлена. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновая проверка расчета дефицитов по этапам'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверкаЗавершенияРасчетаПлановПроизводстваИЗамещенияПланов(ПараметрыЗадания.Сценарий);
	
	ТребуетсяПересчитатьДефициты = Ложь;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Сценарий", ПараметрыЗадания.Сценарий);
		ЭлементБлокировки.УстановитьЗначение("ВидПлана", ПараметрыЗадания.ВидПлана);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетДефицитовПлановПоЭтапам");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Сценарий", ПараметрыЗадания.Сценарий);
		ЭлементБлокировки.УстановитьЗначение("ВидПлана", ПараметрыЗадания.ВидПлана);
		Блокировка.Заблокировать();
		
		ТребуетсяПересчитатьДефициты = ТребуетсяПересчитатьДефициты(ПараметрыЗадания.Сценарий, ПараметрыЗадания.ВидПлана);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить блокировку регистра ""Очередь расчета дефицитов по этапам"" фоновым заданием. Количество попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновая проверка расчета дефицитов по этапам'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
				
		ВыполнитьФоновуюПроверкуРасчетаДефицитовПоЭтапам(ПараметрыЗадания);
		Возврат;
	КонецПопытки;
	
	Если ТребуетсяПересчитатьДефициты Тогда
		ЗапускВыполненияФоновогоРасчетаДефицитаПоЭтапам(ПараметрыЗадания.Сценарий);
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет расхождения в движениях планов и регистре "РасчетДефицитовПоЭтапам",
// результат записывается в регистр "ОчередьРасчетаДефицитовПоЭтапам"
//
// Параметры:
//  Сценарий  - СправочникСсылка.СценарииТоварногоПланирования - сценарий для которого производится расчет.
//  ВидПлана  - СправочникСсылка.ВидыПланов - вид плана для которого производится расчет.
// Возвращаемое значение:
//  Булево
Функция ТребуетсяПересчитатьДефициты(Сценарий, ВидПлана) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыПродажОбороты.Номенклатура КАК Номенклатура,
	|	ПланыПродажОбороты.Характеристика КАК Характеристика,
	|	ПланыПродажОбороты.Назначение КАК Назначение,
	|	ПланыПродажОбороты.Сценарий КАК Сценарий,
	|	ПланыПродажОбороты.ВидПлана КАК ВидПлана,
	|	ПланыПродажОбороты.Период КАК ПериодПланирования,
	|	0 КАК НачальныйОстаток,
	|	0 КАК Приход,
	|	0 КАК КОбеспечению,
	|	ПланыПродажОбороты.КоличествоОборот КАК Расход,
	|	0 КАК КорректировкаРасхода,
	|	0 КАК ЗаданИнтервалПотребности,
	|	0 КАК ИнтервалПотребностиОт,
	|	0 КАК ИнтервалПотребностиДо,
	|	ЛОЖЬ КАК Пересчитать
	|ПОМЕСТИТЬ Планы
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(
	|			,
	|			,
	|			МЕСЯЦ,
	|			&ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
	|				И Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И Статус В (&СтатусыСценария)) КАК ПланыПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыВнутреннихПотребленийОбороты.Номенклатура,
	|	ПланыВнутреннихПотребленийОбороты.Характеристика,
	|	ПланыВнутреннихПотребленийОбороты.Назначение,
	|	ПланыВнутреннихПотребленийОбороты.Сценарий,
	|	ПланыВнутреннихПотребленийОбороты.ВидПлана,
	|	ПланыВнутреннихПотребленийОбороты.Период,
	|	0,
	|	0,
	|	0,
	|	ПланыВнутреннихПотребленийОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПланыВнутреннихПотреблений.Обороты(
	|			,
	|			,
	|			МЕСЯЦ,
	|			&ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланВнутреннихПотреблений)
	|				И Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И Статус В (&СтатусыСценария)) КАК ПланыВнутреннихПотребленийОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыЗакупокОбороты.Номенклатура,
	|	ПланыЗакупокОбороты.Характеристика,
	|	ПланыЗакупокОбороты.Назначение,
	|	ПланыЗакупокОбороты.Сценарий,
	|	ПланыЗакупокОбороты.ВидПлана,
	|	ПланыЗакупокОбороты.Период,
	|	0,
	|	ПланыЗакупокОбороты.КоличествоОборот,
	|	ПланыЗакупокОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	ПланыЗакупокОбороты.ЗаданИнтервалПотребностиОборот,
	|	ПланыЗакупокОбороты.ИнтервалПотребностиОтОборот,
	|	ПланыЗакупокОбороты.ИнтервалПотребностиДоОборот,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(
	|			,
	|			,
	|			МЕСЯЦ,
	|			&ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланЗакупок)
	|				И Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И Статус В (&СтатусыСценария)) КАК ПланыЗакупокОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыОстатковОбороты.Номенклатура,
	|	ПланыОстатковОбороты.Характеристика,
	|	ПланыОстатковОбороты.Назначение,
	|	ПланыОстатковОбороты.Сценарий,
	|	ПланыОстатковОбороты.ВидПлана,
	|	ПланыОстатковОбороты.Период,
	|	ПланыОстатковОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПланыОстатков.Обороты(
	|			,
	|			,
	|			МЕСЯЦ,
	|			&ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|				И Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И Статус В (&СтатусыСценария)) КАК ПланыОстатковОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыСборкиРазборкиОбороты.Номенклатура,
	|	ПланыСборкиРазборкиОбороты.Характеристика,
	|	ПланыСборкиРазборкиОбороты.Назначение,
	|	ПланыСборкиРазборкиОбороты.Сценарий,
	|	ПланыСборкиРазборкиОбороты.ВидПлана,
	|	ПланыСборкиРазборкиОбороты.Период,
	|	0,
	|	ВЫБОР
	|		КОГДА ПланыСборкиРазборкиОбороты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|			ТОГДА ПланыСборкиРазборкиОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПланыСборкиРазборкиОбороты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|			ТОГДА ПланыСборкиРазборкиОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПланыСборкиРазборкиОбороты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|			ТОГДА ПланыСборкиРазборкиОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ПланыСборкиРазборкиОбороты.ЗаданИнтервалПотребностиОборот,
	|	ПланыСборкиРазборкиОбороты.ИнтервалПотребностиОтОборот,
	|	ПланыСборкиРазборкиОбороты.ИнтервалПотребностиДоОборот,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПланыСборкиРазборки.Обороты(
	|			,
	|			,
	|			МЕСЯЦ,
	|			&ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|				И Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И Статус В (&СтатусыСценария)) КАК ПланыСборкиРазборкиОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыПотребленияКомплектующихОбороты.Номенклатура,
	|	ПланыПотребленияКомплектующихОбороты.Характеристика,
	|	ПланыПотребленияКомплектующихОбороты.Назначение,
	|	ПланыПотребленияКомплектующихОбороты.Сценарий,
	|	ПланыПотребленияКомплектующихОбороты.ВидПлана,
	|	ПланыПотребленияКомплектующихОбороты.Период,
	|	0,
	|	ВЫБОР
	|		КОГДА ПланыПотребленияКомплектующихОбороты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|			ТОГДА ПланыПотребленияКомплектующихОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПланыПотребленияКомплектующихОбороты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|			ТОГДА ПланыПотребленияКомплектующихОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПланыПотребленияКомплектующихОбороты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|			ТОГДА ПланыПотребленияКомплектующихОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияКомплектующих.Обороты(
	|			,
	|			,
	|			МЕСЯЦ,
	|			&ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|				И Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И Статус В (&СтатусыСценария)) КАК ПланыПотребленияКомплектующихОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкиПлановыхПотребностейОбороты.Номенклатура,
	|	КорректировкиПлановыхПотребностейОбороты.Характеристика,
	|	КорректировкиПлановыхПотребностейОбороты.Назначение,
	|	КорректировкиПлановыхПотребностейОбороты.Сценарий,
	|	КорректировкиПлановыхПотребностейОбороты.ВидПлана,
	|	КорректировкиПлановыхПотребностейОбороты.Период,
	|	0,
	|	0,
	|	0,
	|	0,
	|	КорректировкиПлановыхПотребностейОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.КорректировкиПлановыхПотребностей.Обороты(, , МЕСЯЦ, Сценарий = &Сценарий И ВидПлана = &ВидПлана) КАК КорректировкиПлановыхПотребностейОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение,
	|	РасчетДефицитовПлановПоЭтапам.Сценарий,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования,
	|	ВЫБОР
	|		КОГДА &ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|			ТОГДА -РасчетДефицитовПлановПоЭтапам.НачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-РасчетДефицитовПлановПоЭтапам.Приход,
	|	-РасчетДефицитовПлановПоЭтапам.КОбеспечению,
	|	-РасчетДефицитовПлановПоЭтапам.Расход,
	|	-РасчетДефицитовПлановПоЭтапам.КорректировкаРасхода,
	|	-ВЫБОР
	|		КОГДА РасчетДефицитовПлановПоЭтапам.ЗаданИнтервалПотребности
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-РасчетДефицитовПлановПоЭтапам.ИнтервалПотребностиОт,
	|	-РасчетДефицитовПлановПоЭтапам.ИнтервалПотребностиДо,
	|	РасчетДефицитовПлановПоЭтапам.Пересчитать
	|ИЗ
	|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|ГДЕ
	|	РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий
	|	И РасчетДефицитовПлановПоЭтапам.ВидПлана = &ВидПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Планы.Номенклатура КАК Номенклатура,
	|	Планы.Характеристика КАК Характеристика,
	|	Планы.Назначение КАК Назначение,
	|	СУММА(Планы.Расход) КАК Расход,
	|	Планы.Сценарий КАК Сценарий,
	|	Планы.ВидПлана КАК ВидПлана,
	|	СУММА(Планы.Приход) КАК Приход,
	|	СУММА(Планы.КОбеспечению) КАК КОбеспечению,
	|	СУММА(Планы.НачальныйОстаток) КАК НачальныйОстаток,
	|	Планы.ПериодПланирования КАК ПериодПланирования,
	|	СУММА(Планы.КорректировкаРасхода) КАК КорректировкаРасхода,
	|	СУММА(Планы.ЗаданИнтервалПотребности) КАК ЗаданИнтервалПотребности,
	|	СУММА(Планы.ИнтервалПотребностиОт) КАК ИнтервалПотребностиОт,
	|	СУММА(Планы.ИнтервалПотребностиДо) КАК ИнтервалПотребностиДо,
	|	МАКСИМУМ(Планы.Пересчитать) КАК Пересчитать
	|ПОМЕСТИТЬ ПланыИРасчетОбороты
	|ИЗ
	|	Планы КАК Планы
	|
	|СГРУППИРОВАТЬ ПО
	|	Планы.Номенклатура,
	|	Планы.Характеристика,
	|	Планы.Назначение,
	|	Планы.Сценарий,
	|	Планы.ВидПлана,
	|	Планы.ПериодПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыИРасчетОбороты.Сценарий КАК Сценарий,
	|	ПланыИРасчетОбороты.ВидПлана КАК ВидПлана,
	|	ПланыИРасчетОбороты.ПериодПланирования КАК ПериодПланирования,
	|	ПланыИРасчетОбороты.Номенклатура КАК Номенклатура,
	|	ПланыИРасчетОбороты.Характеристика КАК Характеристика,
	|	ПланыИРасчетОбороты.Назначение КАК Назначение
	|ИЗ
	|	ПланыИРасчетОбороты КАК ПланыИРасчетОбороты
	|ГДЕ
	|	(ПланыИРасчетОбороты.Расход <> 0
	|			ИЛИ ПланыИРасчетОбороты.Приход <> 0
	|			ИЛИ ПланыИРасчетОбороты.КОбеспечению <> 0
	|			ИЛИ ПланыИРасчетОбороты.НачальныйОстаток <> 0
	|			ИЛИ ПланыИРасчетОбороты.КорректировкаРасхода <> 0
	|			ИЛИ ПланыИРасчетОбороты.ЗаданИнтервалПотребности <> 0
	|			ИЛИ ПланыИРасчетОбороты.ИнтервалПотребностиОт <> 0
	|			ИЛИ ПланыИРасчетОбороты.ИнтервалПотребностиДо <> 0)";
	
	СтатусыСценария = Новый Массив;
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.Утвержден);
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	
	ТипПлана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ТипПлана");
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий,"Периодичность");
	
	Запрос.УстановитьПараметр("СтатусыСценария", СтатусыСценария);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("ТипПлана", ТипПлана);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕСЯЦ", ПолучитьПериодичностьТекстом(Периодичность));

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ОчередьРасчетаДефицитовПоЭтапам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Отбор.ВидПлана.Установить(ВидПлана);
	
	НаборЗаписей.Загрузить(Результат);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат.Количество()>0;
	
КонецФункции

// Процедура запускает фоновый расчет дефицитов по этапам
// Параметры:
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования - сценарий для которого производится расчет.
//
Процедура ЗапускВыполненияФоновогоРасчетаДефицитаПоЭтапам(Сценарий) Экспорт
	
	Ключ = "РасчетДефицитовПлановПоЭтапам" + Сценарий.УникальныйИдентификатор();
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Расчет дефицитов планов по этапам'");
	
	ИмяЭкспортнойПроцедуры = "Планирование.ВыполнитьФоновыйРасчетДефицитовПоЭтапам";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	СтруктураПараметров = Новый Структура("КоличествоОшибок,Сценарий");
	СтруктураПараметров.КоличествоОшибок = 0;
	СтруктураПараметров.Сценарий = Сценарий;
	ПараметрыЭкспортнойПроцедуры.Добавить(СтруктураПараметров);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Процедура выполняет фоновый расчет дефицитов по этапам
//
// Параметры:
//  ПараметрыЗадания  - Структура - структура хранит количество ошибок, если ошибок будет больше определенного лимита,
//                                  то задание завершится.
//
Процедура ВыполнитьФоновыйРасчетДефицитовПоЭтапам(ПараметрыЗадания) Экспорт
	
	Если ПараметрыЗадания.Свойство("КоличествоОшибок") Тогда
		
		МаксимальноеКоличествоОшибок = 3;
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибок Тогда
			
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			
			ТекстСообщения = НСтр("ru = 'Фоновый расчет дефицитов планов по этапам остановлен. Количество неудачных попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновый расчет дефицитов планов по этапам'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверкаЗавершенияРасчетаПлановПроизводстваИЗамещенияПланов(ПараметрыЗадания.Сценарий);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам");
		ЭлементБлокировки.УстановитьЗначение("Сценарий", ПараметрыЗадания.Сценарий);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования КАК ПериодПланирования
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
		|ГДЕ
		|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий = &Сценарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования";
		Запрос.УстановитьПараметр("Сценарий", ПараметрыЗадания.Сценарий);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьДанныеДляПересчета = Ложь;
		
		Пока Выборка.Следующий() Цикл
			ЕстьДанныеДляПересчета = Истина;
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетДефицитовПлановПоЭтапам");
			ЭлементБлокировки.УстановитьЗначение("Сценарий", ПараметрыЗадания.Сценарий);
			ЭлементБлокировки.УстановитьЗначение("ПериодПланирования", Выборка.ПериодПланирования);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ПараметрыЗадания.Вставить("Период", Выборка.ПериодПланирования);
			РезультатыРасчета = ВыполнитьРасчетДефицитовПоЭтапам(ПараметрыЗадания.Сценарий, Выборка.ПериодПланирования);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить блокировку регистра ""Очередь расчета дефицитов по планам"" фоновым заданием. Количество попыток: %КоличествоОшибок%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОшибок%", ПараметрыЗадания.КоличествоОшибок);
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновый расчет дефицитов планов по этапам'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
				
		ВыполнитьФоновыйРасчетДефицитовПоЭтапам(ПараметрыЗадания);
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РезультатыРасчета)
		И РезультатыРасчета.УстановитьКорректировкиПотребнестейКПроверке Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьКорректировокПотребностейКПересчету.Сценарий КАК Сценарий,
		|	ОчередьКорректировокПотребностейКПересчету.ПериодПотребности КАК ПериодПотребности,
		|	ОчередьКорректировокПотребностейКПересчету.КорректировкаПлановыхПотребностей КАК КорректировкаПлановыхПотребностей
		|ИЗ
		|	РегистрСведений.ОчередьКорректировокПотребностейКПересчету КАК ОчередьКорректировокПотребностейКПересчету
		|ГДЕ
		|	ОчередьКорректировокПотребностейКПересчету.Сценарий = &Сценарий
		|	И ОчередьКорректировокПотребностейКПересчету.КорректировкаПлановыхПотребностей.Проведен";
		
		Запрос.УстановитьПараметр("Сценарий", ПараметрыЗадания.Сценарий);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ЗначениеЗаполнено(Выборка.КорректировкаПлановыхПотребностей) Тогда
					
					КорректировкаПлановыхПотребностейОбъект = Выборка.КорректировкаПлановыхПотребностей.ПолучитьОбъект(); // ДокументОбъект.КорректировкаПлановыхПотребностей -
					
				Иначе
					
					ОтменитьТранзакцию();
					Продолжить;
					
				КонецЕсли;
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьКорректировокПотребностейКПересчету");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("КорректировкаПлановыхПотребностей", Выборка.КорректировкаПлановыхПотребностей);
				Блокировка.Заблокировать();
				
				КорректировкаПлановыхПотребностейОбъект.Статус = Перечисления.СтатусыПлановыхКорректировок.КПроверке;
				КорректировкаПлановыхПотребностейОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				НаборЗаписей = РегистрыСведений.ОчередьКорректировокПотребностейКПересчету.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.КорректировкаПлановыхПотребностей.Установить(Выборка.КорректировкаПлановыхПотребностей);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
				
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить формирование планов по дефициту по причине %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование планов по дефициту'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
			
			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьДанныеДляПересчета Тогда
		ВыполнитьФоновыйРасчетДефицитовПоЭтапам(ПараметрыЗадания);
	Иначе
		РасчитатьИЗаполнитьПланыПоДефицитуАвтоматически(ПараметрыЗадания.Сценарий);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьРасчетДефицитовПоЭтапам(Сценарий, Период) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ПланированиеЗапасов.РасчетДефицитовПоЭтапам");
	
	НачалоПериода = Период;
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий,"Периодичность");
	КонецПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, 1);
	
	СтруктураРасчета = Новый Структура("УстановитьКорректировкиПотребнестейКПроверке");
	СтруктураРасчета.Вставить("УстановитьКорректировкиПотребнестейКПроверке", Ложь);
	
	//Расчет периода последней записи об остатках
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланыОстатков.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ПланыОстатков.Обороты(&НачалоПериода, &КонецПериода, МЕСЯЦ, Сценарий = &Сценарий И Статус В(&СтатусыСценария)) КАК ПланыОстатков
	|ГДЕ
	|	ПланыОстатков.Период = &НачалоПериода";
	
	СтатусыСценария = Новый Массив;
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.Утвержден);
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	
	Запрос.УстановитьПараметр("СтатусыСценария", СтатусыСценария);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕСЯЦ", ПолучитьПериодичностьТекстом(Периодичность));
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьПланируемыеОстатки =  Выборка.Следующий();
	
	Запрос = Новый Запрос();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК ВидПлана,
	|	ВидыПланов.ПорядокПланирования КАК ПорядокПланирования,
	|	ЕСТЬNULL(ВидыПланов.Родитель.ПорядокПланирования, ВидыПланов.ПорядокПланирования) КАК ПорядокПланированияЭтапа,
	|	ВЫБОР
	|		КОГДА ВидыПланов.Родитель.ПорядокПланирования ЕСТЬ NULL
	|			ТОГДА ВидыПланов.Ссылка
	|		ИНАЧЕ ВидыПланов.Родитель
	|	КОНЕЦ КАК ЭтапПланирования,
	|	ВидыПланов.ЭтоГруппа КАК ЭтоГруппа,
	|	ЕСТЬNULL(ВидыПланов.ЗаполнятьПоДефициту, ЛОЖЬ) КАК ЗаполнятьПоДефициту,
	|	ЕСТЬNULL(ВидыПланов.ВариантЗаполненияСостава, """") КАК ВариантЗаполненияСостава,
	|	ВидыПланов.ПланированиеПотребностей КАК ПланированиеПотребностей,
	|	ВидыПланов.ПланированиеОстатков КАК ПланированиеОстатков
	|ПОМЕСТИТЬ СтруктураПланов
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	ВидыПланов.Владелец = &Сценарий
	|	И НЕ ВидыПланов.ПометкаУдаления
	|	И НЕ(ВидыПланов.ТипПлана <> ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланОстатков)
	|				И ВидыПланов.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|				И НЕ ВидыПланов.ЭтоГруппа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка),
	|	999,
	|	999,
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка),
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	"""",
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий КАК Сценарий,
	|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования КАК ПериодПланирования,
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка) КАК ВидПлана,
	|	ОчередьРасчетаДефицитовПоЭтапам.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаДефицитовПоЭтапам.Характеристика КАК Характеристика,
	|	ОчередьРасчетаДефицитовПоЭтапам.Назначение КАК Назначение
	|ПОМЕСТИТЬ ОчередьРасчетаДефицитовПоЭтапам
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|ГДЕ
	|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОчередьРасчетаДефицитовПоЭтапам.Сценарий = &Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.Владелец КАК Номенклатура,
	|	ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	""Комплекты"" КАК ТипТовара
	|ПОМЕСТИТЬ ВТКомплектыИСпецификации
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО СпрНоменклатура.Ссылка = ВариантыКомплектацииНоменклатуры.Владелец
	|ГДЕ
	|	НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураПланов.ВидПлана КАК ВидПлана,
	|	СтруктураПланов.ВариантЗаполненияСостава КАК ВариантЗаполненияСостава,
	|	ОчередьРасчетаДефицитовПоЭтапам.Номенклатура КАК Номенклатура, 
	|	ОчередьРасчетаДефицитовПоЭтапам.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ОчередьРасчетаДефицитовПоЭтапам.Характеристика КАК Характеристика 
	|ПОМЕСТИТЬ ТаблицаНоменклатурыПоВидамПланов
	|ИЗ
	|	СтруктураПланов КАК СтруктураПланов,
	|	ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|ГДЕ
	|	НЕ СтруктураПланов.ЭтоГруппа
	|	И СтруктураПланов.ЗаполнятьПоДефициту
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыПоВидамПланов.ВидПлана КАК ВидПлана,
	|	ТаблицаНоменклатурыПоВидамПланов.ВариантЗаполненияСостава КАК ВариантЗаполненияСостава,
	|	ТаблицаНоменклатурыПоВидамПланов.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурыПоВидамПланов.Характеристика КАК Характеристика,
	|	КомплектыИСпецификации.ВидНоменклатуры КАК ВидНоменклатуры,
	|	КомплектыИСпецификации.ТипТовара КАК ТипТовара
	|ИЗ
	|	ТаблицаНоменклатурыПоВидамПланов КАК ТаблицаНоменклатурыПоВидамПланов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКомплектыИСпецификации КАК КомплектыИСпецификации
	|	ПО ВЫБОР
	|		КОГДА КомплектыИСпецификации.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаНоменклатурыПоВидамПланов.ВидНоменклатуры = КомплектыИСпецификации.ВидНоменклатуры
	|		ИНАЧЕ ТаблицаНоменклатурыПоВидамПланов.Номенклатура = КомплектыИСпецификации.Номенклатура
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА КомплектыИСпецификации.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ТаблицаНоменклатурыПоВидамПланов.Характеристика = КомплектыИСпецификации.Характеристика
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК Ссылка,
	|	ВидыПланов.СтруктураНастроек КАК СтруктураНастроек
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	ВидыПланов.Владелец = &Сценарий
	|	И ВидыПланов.ВариантЗаполненияСостава ПОДОБНО ""Отбор""";
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	
	ЗапросПакет = Запрос.ВыполнитьПакет();
	ТаблицаНоменклатурыПоВидамПланов = ЗапросПакет[ЗапросПакет.ВГраница() - 1].Выгрузить();
	НаборыДанныхОбъекты = Новый Структура;
	НаборыДанныхОбъекты.Вставить("ТаблицаНоменклатурыПоВидамПланов", ТаблицаНоменклатурыПоВидамПланов);
	СКД_ФильтрНоменклатурыПлановПоДефицитам = Справочники.ВидыПланов.ПолучитьМакет("ФильтрНоменклатурыПлановПоДефицитам"); 
	КоллекцияНаборов = СКД_ФильтрНоменклатурыПлановПоДефицитам.НаборыДанных.НаборДанныхОбъединениеПроизводьныеОтборы; // НаборДанныхОбъединениеМакетаКомпоновкиДанных -
	
	ВыборкаВидыПлановСОтбором = ЗапросПакет[ЗапросПакет.ВГраница()].Выбрать();
	Счетчик = 0;
	Пока ВыборкаВидыПлановСОтбором.Следующий() Цикл
		
		Счетчик = Счетчик + 1;
		
		ХранилищеСтруктурыНастроек = ВыборкаВидыПлановСОтбором.СтруктураНастроек;// ХранилищеЗначения
		СтруктураНастроек = ХранилищеСтруктурыНастроек.Получить();
		
		ОтборНоменклатурыДляВидаПланов = Новый ТаблицаЗначений;
		
		// Схема компоновки.
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("Макет");
		
		// Подготовка компоновщика макета компоновки данных.
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
		Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		
		// Отбор и сортировка компоновщика настроек.
		Если СтруктураНастроек.ОтборНоменклатурыНастройки <> Неопределено Тогда
			
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(
				Компоновщик.Настройки.Отбор,
				СтруктураНастроек.ОтборНоменклатурыНастройки.Отбор);
			
		КонецЕсли;
		
		ОбязательныеПоля = Новый Массив;
		ОбязательныеПоля.Добавить("Номенклатура");
		ОбязательныеПоля.Добавить("Характеристика");
		ОбязательныеПоля.Добавить("ВидПлана");
		ОбязательныеПоля.Добавить("ПроизвольныйОтбор");
		
		// Выбранные поля компоновщика настроек.
		Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
			ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
			КонецЕсли;
		КонецЦикла;
		
		// ПодменаЗапроса.
		ТекстЗапросаИсходныеДанныеОчереди = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчередьРасчетаДефицитовПоЭтапам.Номенклатура КАК Номенклатура,
		|	ОчередьРасчетаДефицитовПоЭтапам.Характеристика КАК Характеристика,
		|	&ВидПлана КАК ВидПлана
		|ПОМЕСТИТЬ ИсходныеДанные
		|ИЗ
		|	РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
		|ГДЕ
		|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОчередьРасчетаДефицитовПоЭтапам.Сценарий = &Сценарий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика";
		
		ИсходныйЗапрос = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
		
		ПозицияВТИсходныеДанные = СтрНайти(ИсходныйЗапрос, "ПОМЕСТИТЬ ИсходныеДанные");
		НачалоВТИсходныеДанные = СтрНайти(ИсходныйЗапрос, "/", НаправлениеПоиска.СКонца, ПозицияВТИсходныеДанные)+1;
		КонецВТИсходныеДанные = СтрНайти(ИсходныйЗапрос, ";", НаправлениеПоиска.СНачала, ПозицияВТИсходныеДанные)-1;
		НовыйЗапрос = Лев(ИсходныйЗапрос, НачалоВТИсходныеДанные) + ТекстЗапросаИсходныеДанныеОчереди + Прав(ИсходныйЗапрос, СтрДлина(ИсходныйЗапрос) - КонецВТИсходныеДанные);
		
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = НовыйЗапрос;
		
		// Компоновка макета компоновки данных.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
			СхемаКомпоновкиДанных,
			Компоновщик.ПолучитьНастройки(),,,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
		ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
		ЭлементыПорядка = Компоновщик.ПолучитьНастройки().Порядок.Элементы;
		
		ТекстПорядка = "";
		Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
			Если ЭлементПорядка.Использование И ЗначениеЗаполнено(ЭлементПорядка.Поле) Тогда
				СтрокаПорядка = Строка(ЭлементПорядка.Поле) +
				?(ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр," ВОЗР", " УБЫВ") + ", ";
				ТекстПорядка = ТекстПорядка + СтрокаПорядка;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстПорядка) Тогда
			ТекстПорядка = Лев(ТекстПорядка, СтрДлина(ТекстПорядка)-2);
		Иначе
			ТекстПорядка = "ИсходныеДанныеПоследнийЗапрос.Номенклатура.Наименование ВОЗР"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО " + ТекстПорядка;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)", "&ВидПлана");
		
		ЗапросОтбораНоменклатуры = Новый Запрос(ТекстЗапроса);
		
		// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
		Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			ЗапросОтбораНоменклатуры.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
		
		ЗапросОтбораНоменклатуры.Параметры.Вставить("Сценарий", Сценарий);
		ЗапросОтбораНоменклатуры.Параметры.Вставить("ВидПлана", ВыборкаВидыПлановСОтбором.Ссылка);
		ЗапросОтбораНоменклатуры.Параметры.Вставить("НачалоПериода", НачалоПериода);
		ЗапросОтбораНоменклатуры.Параметры.Вставить("КонецПериода", КонецПериода);
		
		ОтборНоменклатурыДляВидаПланов = ЗапросОтбораНоменклатуры.Выполнить().Выгрузить();
		
		// Добавление набора данных в скд
		НаборДанныхОбъект = КоллекцияНаборов.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); // НаборДанныхОбъектСхемыКомпоновкиДанных - 
		НаборДанныхОбъект.Имя = "НаборДанных"+Счетчик;
		НаборДанныхОбъект.ИсточникДанных = СКД_ФильтрНоменклатурыПлановПоДефицитам.ИсточникиДанных[0].Имя;
		НаборДанныхОбъект.ИмяОбъекта  = "НаборДанных"+Счетчик;
		Для каждого Поле Из КоллекцияНаборов.Элементы[0].Поля Цикл
			ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(ТипЗнч(Поле));
			ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		КонецЦикла;
		
		НаборыДанныхОбъекты.Вставить("НаборДанных"+Счетчик, ОтборНоменклатурыДляВидаПланов);
		
	КонецЦикла;
	
	Если КоллекцияНаборов.Элементы.Количество() > 1 Тогда
		КоллекцияНаборов.Элементы.Удалить(КоллекцияНаборов.Элементы[0]);
	Иначе
		НаборыДанныхОбъекты.Вставить("НаборДанных0", Новый ТаблицаЗначений);
	КонецЕсли;
	
	// Загрузка СКД
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД_ФильтрНоменклатурыПлановПоДефицитам));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД_ФильтрНоменклатурыПлановПоДефицитам.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД_ФильтрНоменклатурыПлановПоДефицитам, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанныхОбъекты);
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ОтборНоменклатурыПоВидамПланов = Новый ТаблицаЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ОтборНоменклатурыПоВидамПланов);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОтборНоменклатурыПоВидамПланов.ВидПлана КАК Справочник.ВидыПланов) КАК ВидПлана,
	|	ОтборНоменклатурыПоВидамПланов.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ОтборНоменклатурыПоВидамПланов.Номенклатура КАК Номенклатура,
	|	ОтборНоменклатурыПоВидамПланов.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборНоменклатурыПоВидамПланов
	|ИЗ
	|	&ОтборНоменклатурыПоВидамПланов КАК ОтборНоменклатурыПоВидамПланов
	|ГДЕ
	|	(ОтборНоменклатурыПоВидамПланов.ЕстьОтбор
	|			ИЛИ ОтборНоменклатурыПоВидамПланов.ПроизвольныйОтбор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтборНоменклатурыПоВидамПланов.ВидПлана.Родитель КАК ВидПлана,
	|	ОтборНоменклатурыПоВидамПланов.Номенклатура КАК Номенклатура,
	|	ОтборНоменклатурыПоВидамПланов.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ОтборНоменклатурыПоВидамПлановИЭтапам
	|ИЗ
	|	ОтборНоменклатурыПоВидамПланов КАК ОтборНоменклатурыПоВидамПланов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатурыПоВидамПланов.ВидПлана,
	|	ОтборНоменклатурыПоВидамПланов.Номенклатура,
	|	ОтборНоменклатурыПоВидамПланов.Характеристика
	|ИЗ
	|	ОтборНоменклатурыПоВидамПланов КАК ОтборНоменклатурыПоВидамПланов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура КАК Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика КАК Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение КАК Назначение,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК ПериодПланирования,
	|	РасчетДефицитовПлановПоЭтапам.Дефицит КАК Дефицит
	|ПОМЕСТИТЬ РасчетДефицитовПлановПоЭтапам
	|ИЗ
	|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|		ПО (РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий)
	|			И (РасчетДефицитовПлановПоЭтапам.ВидПлана = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка))
	|			И РасчетДефицитовПлановПоЭтапам.Номенклатура = ОчередьРасчетаДефицитовПоЭтапам.Номенклатура
	|			И РасчетДефицитовПлановПоЭтапам.Характеристика = ОчередьРасчетаДефицитовПоЭтапам.Характеристика
	|			И РасчетДефицитовПлановПоЭтапам.Назначение = ОчередьРасчетаДефицитовПоЭтапам.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура КАК Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика КАК Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение КАК Назначение,
	|	МАКСИМУМ(РасчетДефицитовПлановПоЭтапам.ПериодПланирования) КАК ПериодПланирования
	|ПОМЕСТИТЬ ПоследнийРасчетДефицитовПоЭтапам
	|ИЗ
	|	РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|ГДЕ
	|	НЕ &ЕстьПланируемыеОстатки
	|	И РасчетДефицитовПлановПоЭтапам.ПериодПланирования < &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследнийРасчетДефицитовПоЭтапам.Номенклатура КАК Номенклатура,
	|	ПоследнийРасчетДефицитовПоЭтапам.Характеристика КАК Характеристика,
	|	ПоследнийРасчетДефицитовПоЭтапам.Назначение КАК Назначение,
	|	ВЫБОР
	|		КОГДА РасчетДефицитовПлановПоЭтапам.Дефицит > 0
	|			ТОГДА 0
	|		ИНАЧЕ -РасчетДефицитовПлановПоЭтапам.Дефицит
	|	КОНЕЦ КАК НачальныйОстаток
	|ПОМЕСТИТЬ НачальныеОстаткиПоРегиструРасчетов
	|ИЗ
	|	ПоследнийРасчетДефицитовПоЭтапам КАК ПоследнийРасчетДефицитовПоЭтапам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|		ПО ПоследнийРасчетДефицитовПоЭтапам.ПериодПланирования = РасчетДефицитовПлановПоЭтапам.ПериодПланирования
	|			И ПоследнийРасчетДефицитовПоЭтапам.Номенклатура = РасчетДефицитовПлановПоЭтапам.Номенклатура
	|			И ПоследнийРасчетДефицитовПоЭтапам.Характеристика = РасчетДефицитовПлановПоЭтапам.Характеристика
	|			И ПоследнийРасчетДефицитовПоЭтапам.Назначение = РасчетДефицитовПлановПоЭтапам.Назначение
	|ГДЕ
	|	НЕ &ЕстьПланируемыеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОстатковОбороты.Период КАК Период,
	|	ПланыОстатковОбороты.Сценарий КАК Сценарий,
	|	ПланыОстатковОбороты.ВидПлана КАК ВидПлана,
	|	ПланыОстатковОбороты.Номенклатура КАК Номенклатура,
	|	ПланыОстатковОбороты.Характеристика КАК Характеристика,
	|	ПланыОстатковОбороты.Назначение КАК Назначение,
	|	ПланыОстатковОбороты.КоличествоОборот КАК НачальныйОстаток
	|ПОМЕСТИТЬ ПланыОстатков
	|ИЗ
	|	РегистрНакопления.ПланыОстатков.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И Статус В (&СтатусыСценария)
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК ПланыОстатковОбороты
	|ГДЕ
	|	&ЕстьПланируемыеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий КАК Сценарий,
	|	ЕСТЬNULL(ПланыОстатков.ВидПлана, ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)) КАК ВидПлана,
	|	ЕСТЬNULL(ПланыОстатков.ВидПлана, ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)) КАК ЭтапПланирования,
	|	ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования КАК Период,
	|	ОчередьРасчетаДефицитовПоЭтапам.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаДефицитовПоЭтапам.Характеристика КАК Характеристика,
	|	ОчередьРасчетаДефицитовПоЭтапам.Назначение КАК Назначение,
	|	0 КАК ПорядокПланирования,
	|	0 КАК ПорядокПланированияЭтапа,
	|	ВЫБОР
	|		КОГДА &ЕстьПланируемыеОстатки
	|			ТОГДА ЕСТЬNULL(ПланыОстатков.НачальныйОстаток, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НачальныеОстаткиПоРегиструРасчетов.НачальныйОстаток ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ НачальныеОстаткиПоРегиструРасчетов.НачальныйОстаток
	|			КОНЕЦ
	|	КОНЕЦ КАК НачальныйОстаток
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачальныеОстаткиПоРегиструРасчетов КАК НачальныеОстаткиПоРегиструРасчетов
	|		ПО (НачальныеОстаткиПоРегиструРасчетов.Номенклатура = ОчередьРасчетаДефицитовПоЭтапам.Номенклатура)
	|			И (НачальныеОстаткиПоРегиструРасчетов.Характеристика = ОчередьРасчетаДефицитовПоЭтапам.Характеристика)
	|			И (НачальныеОстаткиПоРегиструРасчетов.Назначение = ОчередьРасчетаДефицитовПоЭтапам.Назначение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланыОстатков КАК ПланыОстатков
	|		ПО (ПланыОстатков.Сценарий = ОчередьРасчетаДефицитовПоЭтапам.Сценарий)
	|			И (ПланыОстатков.Номенклатура = ОчередьРасчетаДефицитовПоЭтапам.Номенклатура)
	|			И (ПланыОстатков.Характеристика = ОчередьРасчетаДефицитовПоЭтапам.Характеристика)
	|			И (ПланыОстатков.Назначение = ОчередьРасчетаДефицитовПоЭтапам.Назначение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПродажОбороты.Период КАК Период,
	|	ПланыПродажОбороты.Сценарий КАК Сценарий,
	|	ПланыПродажОбороты.Номенклатура КАК Номенклатура,
	|	ПланыПродажОбороты.Характеристика КАК Характеристика,
	|	ПланыПродажОбороты.Назначение КАК Назначение,
	|	ПланыПродажОбороты.ВидПлана КАК ВидПлана,
	|	ПланыПродажОбороты.КоличествоОборот КАК Расход,
	|	0 КАК КорректировкаРасхода,
	|	0 КАК Приход,
	|	0 КАК НачальныйОстаток,
	|	0 КАК ЗаданИнтервалПотребности,
	|	0 КАК ИнтервалПотребностиОт,
	|	0 КАК ИнтервалПотребностиДо,
	|	0 КАК КОбеспечению
	|ПОМЕСТИТЬ ОборотыПоВидамПлановБезГруппировки
	|ИЗ
	|	РегистрНакопления.ПланыПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И Статус В (&СтатусыСценария)
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК ПланыПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыВнутреннихПотребленийОбороты.Период,
	|	ПланыВнутреннихПотребленийОбороты.Сценарий,
	|	ПланыВнутреннихПотребленийОбороты.Номенклатура,
	|	ПланыВнутреннихПотребленийОбороты.Характеристика,
	|	ПланыВнутреннихПотребленийОбороты.Назначение,
	|	ПланыВнутреннихПотребленийОбороты.ВидПлана,
	|	ПланыВнутреннихПотребленийОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ПланыВнутреннихПотреблений.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И Статус В (&СтатусыСценария)
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК ПланыВнутреннихПотребленийОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыЗакупокОбороты.Период,
	|	ПланыЗакупокОбороты.Сценарий,
	|	ПланыЗакупокОбороты.Номенклатура,
	|	ПланыЗакупокОбороты.Характеристика,
	|	ПланыЗакупокОбороты.Назначение,
	|	ПланыЗакупокОбороты.ВидПлана,
	|	0,
	|	0,
	|	ПланыЗакупокОбороты.КоличествоОборот,
	|	0,
	|	ПланыЗакупокОбороты.ЗаданИнтервалПотребностиОборот,
	|	ПланыЗакупокОбороты.ИнтервалПотребностиОтОборот,
	|	ПланыЗакупокОбороты.ИнтервалПотребностиДоОборот,
	|	ПланыЗакупокОбороты.КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И Статус В (&СтатусыСценария)
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК ПланыЗакупокОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыСборкиРазборкиОбороты.Период,
	|	ПланыСборкиРазборкиОбороты.Сценарий,
	|	ПланыСборкиРазборкиОбороты.Номенклатура,
	|	ПланыСборкиРазборкиОбороты.Характеристика,
	|	ПланыСборкиРазборкиОбороты.Назначение,
	|	ПланыСборкиРазборкиОбороты.ВидПлана,
	|	0,
	|	0,
	|	ПланыСборкиРазборкиОбороты.КоличествоОборот,
	|	0,
	|	ПланыСборкиРазборкиОбороты.ЗаданИнтервалПотребностиОборот,
	|	ПланыСборкиРазборкиОбороты.ИнтервалПотребностиОтОборот,
	|	ПланыСборкиРазборкиОбороты.ИнтервалПотребностиДоОборот,
	|	ПланыСборкиРазборкиОбороты.КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ПланыСборкиРазборки.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И Статус В (&СтатусыСценария)
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК ПланыСборкиРазборкиОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыПотребленияКомплектующихОбороты.Период,
	|	ПланыПотребленияКомплектующихОбороты.Сценарий,
	|	ПланыПотребленияКомплектующихОбороты.Номенклатура,
	|	ПланыПотребленияКомплектующихОбороты.Характеристика,
	|	ПланыПотребленияКомплектующихОбороты.Назначение,
	|	ПланыПотребленияКомплектующихОбороты.ВидПлана,
	|	ПланыПотребленияКомплектующихОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияКомплектующих.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И Статус В (&СтатусыСценария)
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК ПланыПотребленияКомплектующихОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальныеОстатки.Период,
	|	НачальныеОстатки.Сценарий,
	|	НачальныеОстатки.Номенклатура,
	|	НачальныеОстатки.Характеристика,
	|	НачальныеОстатки.Назначение,
	|	НачальныеОстатки.ВидПлана,
	|	0,
	|	0,
	|	0,
	|	НачальныеОстатки.НачальныйОстаток,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	НачальныеОстатки КАК НачальныеОстатки
	|ГДЕ
	|	НачальныеОстатки.НачальныйОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкиПлановыхПотребностейОбороты.Период,
	|	КорректировкиПлановыхПотребностейОбороты.Сценарий,
	|	КорректировкиПлановыхПотребностейОбороты.Номенклатура,
	|	КорректировкиПлановыхПотребностейОбороты.Характеристика,
	|	КорректировкиПлановыхПотребностейОбороты.Назначение,
	|	КорректировкиПлановыхПотребностейОбороты.ВидПлана,
	|	0,
	|	КорректировкиПлановыхПотребностейОбороты.КоличествоОборот,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.КорректировкиПлановыхПотребностей.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			МЕСЯЦ,
	|			Сценарий = &Сценарий
	|				И (Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура КАК Номенклатура,
	|						Т.Характеристика КАК Характеристика,
	|						Т.Назначение КАК Назначение
	|					ИЗ
	|						ОчередьРасчетаДефицитовПоЭтапам КАК Т)) КАК КорректировкиПлановыхПотребностейОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоВидамПланов.Период КАК Период,
	|	ОборотыПоВидамПланов.Сценарий КАК Сценарий,
	|	ОборотыПоВидамПланов.Номенклатура КАК Номенклатура,
	|	ОборотыПоВидамПланов.Характеристика КАК Характеристика,
	|	ОборотыПоВидамПланов.Назначение КАК Назначение,
	|	ОборотыПоВидамПланов.ВидПлана КАК ВидПлана,
	|	СУММА(ОборотыПоВидамПланов.Расход) КАК Расход,
	|	СУММА(ОборотыПоВидамПланов.КорректировкаРасхода) КАК КорректировкаРасхода,
	|	СУММА(ОборотыПоВидамПланов.Приход) КАК Приход,
	|	СУММА(ОборотыПоВидамПланов.НачальныйОстаток) КАК НачальныйОстаток,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ВидПлана.Родитель, ОборотыПоВидамПланов.ВидПлана) КАК ЭтапПланирования,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ВидПлана.Родитель.ПорядокПланирования, 0) КАК ПорядокПланированияЭтапа,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ВидПлана.ПорядокПланирования, 0) КАК ПорядокПланирования,
	|	МАКСИМУМ(ОборотыПоВидамПланов.ЗаданИнтервалПотребности) КАК ЗаданИнтервалПотребности,
	|	МАКСИМУМ(ОборотыПоВидамПланов.ИнтервалПотребностиОт) КАК ИнтервалПотребностиОт,
	|	МАКСИМУМ(ОборотыПоВидамПланов.ИнтервалПотребностиДо) КАК ИнтервалПотребностиДо,
	|	СУММА(ОборотыПоВидамПланов.КОбеспечению) КАК КОбеспечению
	|ПОМЕСТИТЬ ОборотыПоВидамПланов
	|ИЗ
	|	ОборотыПоВидамПлановБезГруппировки КАК ОборотыПоВидамПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоВидамПланов.Период,
	|	ОборотыПоВидамПланов.ВидПлана,
	|	ОборотыПоВидамПланов.Сценарий,
	|	ОборотыПоВидамПланов.Назначение,
	|	ОборотыПоВидамПланов.Номенклатура,
	|	ОборотыПоВидамПланов.Характеристика,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ВидПлана.Родитель, ОборотыПоВидамПланов.ВидПлана),
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ВидПлана.Родитель.ПорядокПланирования, 0),
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ВидПлана.ПорядокПланирования, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПланов.ВидПлана КАК ВидПлана,
	|	СтруктураПланов.ЭтапПланирования КАК ЭтапПланирования,
	|	ОборотыПоВидамПланов.Сценарий КАК Сценарий,
	|	ОборотыПоВидамПланов.Период КАК Период,
	|	ОборотыПоВидамПланов.Номенклатура КАК Номенклатура,
	|	ОборотыПоВидамПланов.Характеристика КАК Характеристика,
	|	ОборотыПоВидамПланов.Назначение КАК Назначение,
	|	СтруктураПланов.ЗаполнятьПоДефициту КАК ЗаполнятьПоДефициту,
	|	СУММА(ВЫБОР
	|			КОГДА СтруктураПланов.ПорядокПланированияЭтапа = 999
	|				ТОГДА ОборотыПоВидамПланов.Расход
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.Расход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Расход,
	|	СУММА(ВЫБОР
	|			КОГДА СтруктураПланов.ПорядокПланированияЭтапа = 999
	|				ТОГДА ОборотыПоВидамПланов.КорректировкаРасхода
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.КорректировкаРасхода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КорректировкаРасхода,
	|	СУММА(ВЫБОР
	|			КОГДА СтруктураПланов.ПорядокПланированияЭтапа = 999
	|				ТОГДА ОборотыПоВидамПланов.Приход
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.Приход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА СтруктураПланов.ПорядокПланированияЭтапа = 999
	|				ТОГДА ОборотыПоВидамПланов.КОбеспечению
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.КОбеспечению
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КОбеспечению,
	|	СУММА(ВЫБОР
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа < СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА -(ОборотыПоВидамПланов.НачальныйОстаток + ОборотыПоВидамПланов.Приход - ОборотыПоВидамПланов.Расход - ОборотыПоВидамПланов.КорректировкаРасхода)
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА -(ОборотыПоВидамПланов.НачальныйОстаток + ОборотыПоВидамПланов.Приход - ОборотыПоВидамПланов.КорректировкаРасхода)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Дефицит,
	|	СУММА(ВЫБОР
	|			КОГДА СтруктураПланов.ПорядокПланированияЭтапа = 999
	|				ТОГДА ОборотыПоВидамПланов.НачальныйОстаток
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа < СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.НачальныйОстаток + ОборотыПоВидамПланов.Приход - ОборотыПоВидамПланов.Расход - ОборотыПоВидамПланов.КорректировкаРасхода
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.НачальныйОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальныйОстаток,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.ИнтервалПотребностиОт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИнтервалПотребностиОт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.ИнтервалПотребностиДо
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИнтервалПотребностиДо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОборотыПоВидамПланов.ПорядокПланированияЭтапа = СтруктураПланов.ПорядокПланированияЭтапа
	|				ТОГДА ОборотыПоВидамПланов.ЗаданИнтервалПотребности
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗаданИнтервалПотребности
	|ПОМЕСТИТЬ РасчетыПоЭтапам
	|ИЗ
	|	СтруктураПланов КАК СтруктураПланов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыПоВидамПланов КАК ОборотыПоВидамПланов
	|		ПО (ОборотыПоВидамПланов.ПорядокПланированияЭтапа <= СтруктураПланов.ПорядокПланированияЭтапа)
	|ГДЕ
	|	СтруктураПланов.ЭтоГруппа
	|	И НЕ ОборотыПоВидамПланов.Сценарий ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПланов.ВидПлана,
	|	СтруктураПланов.ЭтапПланирования,
	|	СтруктураПланов.ЗаполнятьПоДефициту,
	|	ОборотыПоВидамПланов.Сценарий,
	|	ОборотыПоВидамПланов.Период,
	|	ОборотыПоВидамПланов.Номенклатура,
	|	ОборотыПоВидамПланов.Характеристика,
	|	ОборотыПоВидамПланов.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПланов.ВидПлана КАК ВидПлана,
	|	РасчетыПоЭтапам.ЭтапПланирования КАК ЭтапПланирования,
	|	СтруктураПланов.ЗаполнятьПоДефициту КАК ЗаполнятьПоДефициту,
	|	СтруктураПланов.ЭтоГруппа КАК ЭтоГруппа,
	|	РасчетыПоЭтапам.Сценарий КАК Сценарий,
	|	РасчетыПоЭтапам.Период КАК Период,
	|	РасчетыПоЭтапам.Номенклатура КАК Номенклатура,
	|	РасчетыПоЭтапам.Характеристика КАК Характеристика,
	|	РасчетыПоЭтапам.Назначение КАК Назначение,
	|	РасчетыПоЭтапам.Расход КАК Расход,
	|	РасчетыПоЭтапам.КорректировкаРасхода КАК КорректировкаРасхода,
	|	РасчетыПоЭтапам.Приход КАК Приход,
	|	РасчетыПоЭтапам.КОбеспечению КАК КОбеспечению,
	|	РасчетыПоЭтапам.Дефицит КАК Дефицит,
	|	РасчетыПоЭтапам.НачальныйОстаток КАК НачальныйОстаток,
	|	РасчетыПоЭтапам.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	РасчетыПоЭтапам.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо,
	|	РасчетыПоЭтапам.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности
	|ПОМЕСТИТЬ РасчетПоЭтапамИВидамПланам
	|ИЗ
	|	РасчетыПоЭтапам КАК РасчетыПоЭтапам
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураПланов КАК СтруктураПланов
	|		ПО РасчетыПоЭтапам.ЭтапПланирования = СтруктураПланов.ЭтапПланирования
	|ГДЕ
	|	НЕ(РасчетыПоЭтапам.Приход = 0
	|				И РасчетыПоЭтапам.Расход = 0
	|				И РасчетыПоЭтапам.Дефицит = 0
	|				И РасчетыПоЭтапам.НачальныйОстаток = 0
	|				И РасчетыПоЭтапам.ЗаданИнтервалПотребности = 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетыПоЭтапам.Номенклатура,
	|	РасчетыПоЭтапам.Характеристика,
	|	РасчетыПоЭтапам.Назначение,
	|	РасчетыПоЭтапам.ЭтапПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетДефицитовПлановПоЭтапам.Сценарий КАК Сценарий,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана КАК ВидПлана,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК ПериодПланирования,
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура КАК Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика КАК Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение КАК Назначение,
	|	РасчетДефицитовПлановПоЭтапам.НачальныйОстаток КАК НачальныйОстаток,
	|	РасчетДефицитовПлановПоЭтапам.Дефицит КАК Дефицит,
	|	РасчетДефицитовПлановПоЭтапам.КИзменению КАК КИзменению,
	|	РасчетДефицитовПлановПоЭтапам.Пересчитать КАК Пересчитать,
	|	РасчетДефицитовПлановПоЭтапам.Приход КАК Приход,
	|	РасчетДефицитовПлановПоЭтапам.КОбеспечению КАК КОбеспечению,
	|	РасчетДефицитовПлановПоЭтапам.Расход КАК Расход,
	|	РасчетДефицитовПлановПоЭтапам.КорректировкаРасхода КАК КорректировкаРасхода,
	|	РасчетДефицитовПлановПоЭтапам.ИнтервалПотребностиОт КАК ИнтервалПотребностиОт,
	|	РасчетДефицитовПлановПоЭтапам.ИнтервалПотребностиДо КАК ИнтервалПотребностиДо,
	|	РасчетДефицитовПлановПоЭтапам.ЗаданИнтервалПотребности КАК ЗаданИнтервалПотребности
	|ПОМЕСТИТЬ ПредыдущийРасчетДефицитовПлановПоЭтапам
	|ИЗ
	|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|ГДЕ
	|	РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий
	|	И РасчетДефицитовПлановПоЭтапам.ПериодПланирования = &НачалоПериода
	|	И РасчетДефицитовПлановПоЭтапам.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетПоЭтапамИВидамПланам.ВидПлана КАК ВидПлана,
	|	РасчетПоЭтапамИВидамПланам.Сценарий КАК Сценарий,
	|	РасчетПоЭтапамИВидамПланам.Период КАК ПериодПланирования,
	|	РасчетПоЭтапамИВидамПланам.Номенклатура КАК Номенклатура,
	|	РасчетПоЭтапамИВидамПланам.Характеристика КАК Характеристика,
	|	РасчетПоЭтапамИВидамПланам.Назначение КАК Назначение,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.Расход, 0) КАК Расход,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.КорректировкаРасхода, 0) КАК КорректировкаРасхода,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) КАК Приход,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0) КАК КОбеспечению,
	|	ВЫБОР
	|		КОГДА РасчетПоЭтапамИВидамПланам.ЗаполнятьПоДефициту
	|			ТОГДА ВЫБОР
	|					КОГДА ОборотыПоВидамПланов.ЗаданИнтервалПотребности > 0
	|							И (ОборотыПоВидамПланов.ИнтервалПотребностиОт <= ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) + ЕСТЬNULL(ОборотыПоВидамПланов.КорректировкаРасхода, 0)
	|								ИЛИ ОборотыПоВидамПланов.ИнтервалПотребностиОт = 0)
	|							И (ОборотыПоВидамПланов.ИнтервалПотребностиДо >= ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0)  + ЕСТЬNULL(ОборотыПоВидамПланов.КорректировкаРасхода, 0)
	|								ИЛИ ОборотыПоВидамПланов.ИнтервалПотребностиДо = 0)
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ОтборНоменклатурыПоВидамПланов.ВидПлана ЕСТЬ NULL
	|									ИЛИ РасчетПоЭтапамИВидамПланам.Дефицит + ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) - ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0) < -ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|								ТОГДА -ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|							ИНАЧЕ РасчетПоЭтапамИВидамПланам.Дефицит + ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) - ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КИзменению,
	|	РасчетПоЭтапамИВидамПланам.НачальныйОстаток КАК НачальныйОстаток,
	|	ВЫБОР
	|		КОГДА РасчетПоЭтапамИВидамПланам.ЗаполнятьПоДефициту
	|			ТОГДА ВЫБОР
	|					КОГДА ОборотыПоВидамПланов.ЗаданИнтервалПотребности > 0 
	|							И (ОборотыПоВидамПланов.ИнтервалПотребностиОт <= ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) + ЕСТЬNULL(ОборотыПоВидамПланов.КорректировкаРасхода, 0)
	|								ИЛИ ОборотыПоВидамПланов.ИнтервалПотребностиОт = 0)
	|							И (ОборотыПоВидамПланов.ИнтервалПотребностиДо >= ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) + ЕСТЬNULL(ОборотыПоВидамПланов.КорректировкаРасхода, 0)
	|								ИЛИ ОборотыПоВидамПланов.ИнтервалПотребностиДо = 0)
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ОтборНоменклатурыПоВидамПланов.ВидПлана ЕСТЬ NULL
	|									ИЛИ РасчетПоЭтапамИВидамПланам.Дефицит + ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) - ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0) < -ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|								ТОГДА -ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|							ИНАЧЕ РасчетПоЭтапамИВидамПланам.Дефицит + ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) - ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0 КАК Пересчитать,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ИнтервалПотребностиОт, 0) КАК ИнтервалПотребностиОт,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ИнтервалПотребностиДо, 0) КАК ИнтервалПотребностиДо,
	|	ЕСТЬNULL(ОборотыПоВидамПланов.ЗаданИнтервалПотребности, 0) КАК ЗаданИнтервалПотребности,
	|	РасчетПоЭтапамИВидамПланам.ЭтапПланирования КАК ЭтапПланирования,
	|	РасчетПоЭтапамИВидамПланам.Дефицит КАК Дефицит
	|ПОМЕСТИТЬ РасчетКИЗменениюПоВидамПланов
	|ИЗ
	|	РасчетПоЭтапамИВидамПланам КАК РасчетПоЭтапамИВидамПланам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыПоВидамПланов КАК ОборотыПоВидамПланов
	|		ПО (РасчетПоЭтапамИВидамПланам.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка))
	|			И РасчетПоЭтапамИВидамПланам.ВидПлана = ОборотыПоВидамПланов.ВидПлана
	|			И РасчетПоЭтапамИВидамПланам.Номенклатура = ОборотыПоВидамПланов.Номенклатура
	|			И РасчетПоЭтапамИВидамПланам.Характеристика = ОборотыПоВидамПланов.Характеристика
	|			И РасчетПоЭтапамИВидамПланам.Назначение = ОборотыПоВидамПланов.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборНоменклатурыПоВидамПланов КАК ОтборНоменклатурыПоВидамПланов
	|		ПО РасчетПоЭтапамИВидамПланам.ВидПлана = ОтборНоменклатурыПоВидамПланов.ВидПлана
	|			И ВЫБОР
	|				КОГДА ОтборНоменклатурыПоВидамПланов.ВидПлана.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПроизводства)
	|					И ОтборНоменклатурыПоВидамПланов.Номенклатура ЕСТЬ NULL И НЕ ОтборНоменклатурыПоВидамПланов.ВидНоменклатуры ЕСТЬ NULL
	|					ТОГДА РасчетПоЭтапамИВидамПланам.Номенклатура.ВидНоменклатуры = ОтборНоменклатурыПоВидамПланов.ВидНоменклатуры
	|				ИНАЧЕ РасчетПоЭтапамИВидамПланам.Номенклатура = ОтборНоменклатурыПоВидамПланов.Номенклатура
	|			КОНЕЦ
	|			И ВЫБОР
	|				КОГДА НЕ ОтборНоменклатурыПоВидамПланов.Номенклатура ЕСТЬ NULL
	|					ТОГДА РасчетПоЭтапамИВидамПланам.Характеристика = ОтборНоменклатурыПоВидамПланов.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|ГДЕ
	|	НЕ РасчетПоЭтапамИВидамПланам.ЭтоГруппа
	|	И НЕ(ЕСТЬNULL(ОборотыПоВидамПланов.Расход, 0) = 0
	|				И ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) = 0
	|				И ВЫБОР
	|					КОГДА РасчетПоЭтапамИВидамПланам.ЗаполнятьПоДефициту
	|						ТОГДА ВЫБОР
	|								КОГДА ОтборНоменклатурыПоВидамПланов.ВидПлана ЕСТЬ NULL
	|										ИЛИ РасчетПоЭтапамИВидамПланам.Дефицит + ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) - ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0) < -ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|									ТОГДА -ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|								ИНАЧЕ РасчетПоЭтапамИВидамПланам.Дефицит + ЕСТЬNULL(ОборотыПоВидамПланов.Приход, 0) - ЕСТЬNULL(ОборотыПоВидамПланов.КОбеспечению, 0)
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ = 0
	|				И ЕСТЬNULL(ОборотыПоВидамПланов.НачальныйОстаток, 0) = 0
	|				И ЕСТЬNULL(ОборотыПоВидамПланов.КорректировкаРасхода, 0) = 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетПоЭтапамИВидамПланам.Номенклатура,
	|	РасчетПоЭтапамИВидамПланам.Характеристика,
	|	РасчетПоЭтапамИВидамПланам.Назначение,
	|	РасчетПоЭтапамИВидамПланам.ВидПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетПоЭтапамИВидамПланам.ВидПлана КАК ВидПлана,
	|	РасчетПоЭтапамИВидамПланам.Сценарий КАК Сценарий,
	|	РасчетПоЭтапамИВидамПланам.Номенклатура КАК Номенклатура,
	|	РасчетПоЭтапамИВидамПланам.Характеристика КАК Характеристика,
	|	РасчетПоЭтапамИВидамПланам.Назначение КАК Назначение,
	|	РасчетПоЭтапамИВидамПланам.Расход КАК Расход,
	|	РасчетПоЭтапамИВидамПланам.КорректировкаРасхода КАК КорректировкаРасхода,
	|	РасчетПоЭтапамИВидамПланам.Приход КАК Приход,
	|	РасчетПоЭтапамИВидамПланам.КОбеспечению КАК КОбеспечению,
	|	РасчетПоЭтапамИВидамПланам.Дефицит КАК Дефицит,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетКИЗменениюПоВидамПланов.КИзменению, 0)) КАК КИзменению,
	|	РасчетПоЭтапамИВидамПланам.НачальныйОстаток КАК НачальныйОстаток,
	|	РасчетПоЭтапамИВидамПланам.Период КАК ПериодПланирования,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетКИЗменениюПоВидамПланов.Пересчитать, ЛОЖЬ)) КАК Пересчитать,
	|	МАКСИМУМ(РасчетКИЗменениюПоВидамПланов.ИнтервалПотребностиОт) КАК ИнтервалПотребностиОт,
	|	МАКСИМУМ(РасчетКИЗменениюПоВидамПланов.ИнтервалПотребностиДо) КАК ИнтервалПотребностиДо,
	|	МАКСИМУМ(РасчетКИЗменениюПоВидамПланов.ЗаданИнтервалПотребности) КАК ЗаданИнтервалПотребности
	|ИЗ
	|	РасчетПоЭтапамИВидамПланам КАК РасчетПоЭтапамИВидамПланам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетКИЗменениюПоВидамПланов КАК РасчетКИЗменениюПоВидамПланов
	|		ПО (РасчетКИЗменениюПоВидамПланов.ЭтапПланирования = РасчетПоЭтапамИВидамПланам.ВидПлана)
	|			И (РасчетКИЗменениюПоВидамПланов.Номенклатура = РасчетПоЭтапамИВидамПланам.Номенклатура)
	|			И (РасчетКИЗменениюПоВидамПланов.Характеристика = РасчетПоЭтапамИВидамПланам.Характеристика)
	|			И (РасчетКИЗменениюПоВидамПланов.Назначение = РасчетПоЭтапамИВидамПланам.Назначение)
	|ГДЕ
	|	РасчетПоЭтапамИВидамПланам.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетПоЭтапамИВидамПланам.ВидПлана,
	|	РасчетПоЭтапамИВидамПланам.ЭтапПланирования,
	|	РасчетПоЭтапамИВидамПланам.Сценарий,
	|	РасчетПоЭтапамИВидамПланам.Период,
	|	РасчетПоЭтапамИВидамПланам.Номенклатура,
	|	РасчетПоЭтапамИВидамПланам.Характеристика,
	|	РасчетПоЭтапамИВидамПланам.Назначение,
	|	РасчетПоЭтапамИВидамПланам.Расход,
	|	РасчетПоЭтапамИВидамПланам.КорректировкаРасхода,
	|	РасчетПоЭтапамИВидамПланам.Приход,
	|	РасчетПоЭтапамИВидамПланам.КОбеспечению,
	|	РасчетПоЭтапамИВидамПланам.Дефицит,
	|	РасчетПоЭтапамИВидамПланам.НачальныйОстаток
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетКИЗменениюПоВидамПланов.ВидПлана,
	|	РасчетКИЗменениюПоВидамПланов.Сценарий,
	|	РасчетКИЗменениюПоВидамПланов.Номенклатура,
	|	РасчетКИЗменениюПоВидамПланов.Характеристика,
	|	РасчетКИЗменениюПоВидамПланов.Назначение,
	|	РасчетКИЗменениюПоВидамПланов.Расход,
	|	РасчетКИЗменениюПоВидамПланов.КорректировкаРасхода,
	|	РасчетКИЗменениюПоВидамПланов.Приход,
	|	РасчетКИЗменениюПоВидамПланов.КОбеспечению,
	|	РасчетКИЗменениюПоВидамПланов.Дефицит,
	|	РасчетКИЗменениюПоВидамПланов.КИзменению,
	|	РасчетКИЗменениюПоВидамПланов.НачальныйОстаток,
	|	РасчетКИЗменениюПоВидамПланов.ПериодПланирования,
	|	РасчетКИЗменениюПоВидамПланов.Пересчитать,
	|	РасчетКИЗменениюПоВидамПланов.ИнтервалПотребностиОт,
	|	РасчетКИЗменениюПоВидамПланов.ИнтервалПотребностиДо,
	|	РасчетКИЗменениюПоВидамПланов.ЗаданИнтервалПотребности
	|ИЗ
	|	РасчетКИЗменениюПоВидамПланов КАК РасчетКИЗменениюПоВидамПланов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана,
	|	РасчетДефицитовПлановПоЭтапам.Сценарий,
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение,
	|	РасчетДефицитовПлановПоЭтапам.Расход,
	|	РасчетДефицитовПлановПоЭтапам.КорректировкаРасхода,
	|	РасчетДефицитовПлановПоЭтапам.Приход,
	|	РасчетДефицитовПлановПоЭтапам.КОбеспечению,
	|	РасчетДефицитовПлановПоЭтапам.Дефицит,
	|	РасчетДефицитовПлановПоЭтапам.КИзменению,
	|	РасчетДефицитовПлановПоЭтапам.НачальныйОстаток,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования,
	|	РасчетДефицитовПлановПоЭтапам.Пересчитать,
	|	РасчетДефицитовПлановПоЭтапам.ИнтервалПотребностиОт,
	|	РасчетДефицитовПлановПоЭтапам.ИнтервалПотребностиДо,
	|	РасчетДефицитовПлановПоЭтапам.ЗаданИнтервалПотребности
	|ИЗ
	|	ПредыдущийРасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|		ПО РасчетДефицитовПлановПоЭтапам.Номенклатура = ОчередьРасчетаДефицитовПоЭтапам.Номенклатура
	|			И РасчетДефицитовПлановПоЭтапам.Характеристика = ОчередьРасчетаДефицитовПоЭтапам.Характеристика
	|			И РасчетДефицитовПлановПоЭтапам.Назначение = ОчередьРасчетаДефицитовПоЭтапам.Назначение
	|ГДЕ
	|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПланов.ВидПлана КАК ВидПлана,
	|	СтруктураПланов.ПорядокПланирования КАК ПорядокПланирования,
	|	СтруктураПланов.ПорядокПланированияЭтапа КАК ПорядокПланированияЭтапа,
	|	СтруктураПланов.ЭтапПланирования КАК ЭтапПланирования,
	|	СтруктураПланов.ЭтоГруппа КАК ЭтоГруппа,
	|	СтруктураПланов.ЗаполнятьПоДефициту КАК ЗаполнятьПоДефициту,
	|	СтруктураПланов.ПланированиеПотребностей КАК ПланированиеПотребностей,
	|	СтруктураПланов.ПланированиеОстатков КАК ПланированиеОстатков
	|ИЗ
	|	СтруктураПланов КАК СтруктураПланов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПланированияЭтапа,
	|	НЕ СтруктураПланов.ЭтоГруппа,
	|	ПорядокПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоЭтапам.Номенклатура КАК Номенклатура,
	|	РасчетыПоЭтапам.Характеристика КАК Характеристика,
	|	РасчетыПоЭтапам.Назначение КАК Назначение,
	|	РасчетыПоЭтапам.ВидПлана = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|		И ПредыдущийРасчетДефицитовПлановПоЭтапам.ВидПлана = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|		И НЕ(ПредыдущийРасчетДефицитовПлановПоЭтапам.Дефицит >= 0
	|				И РасчетыПоЭтапам.Дефицит >= 0)
	|		И ПредыдущийРасчетДефицитовПлановПоЭтапам.Дефицит <> РасчетыПоЭтапам.Дефицит КАК ТоварыДляПересчетаВСледующихПериодах,
	|	РасчетыПоЭтапам.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|		И ПредыдущийРасчетДефицитовПлановПоЭтапам.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|		И ПредыдущийРасчетДефицитовПлановПоЭтапам.НачальныйОстаток <> РасчетыПоЭтапам.НачальныйОстаток
	|		И РасчетыПоЭтапам.КорректировкаРасхода < 0 КАК КорректировкаПотребностейКПроверке,
	|	РасчетыПоЭтапам.ВидПлана КАК ВидПлана
	|ПОМЕСТИТЬ ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей
	|ИЗ
	|	РасчетыПоЭтапам КАК РасчетыПоЭтапам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущийРасчетДефицитовПлановПоЭтапам КАК ПредыдущийРасчетДефицитовПлановПоЭтапам
	|		ПО (ПредыдущийРасчетДефицитовПлановПоЭтапам.Номенклатура = РасчетыПоЭтапам.Номенклатура)
	|			И (ПредыдущийРасчетДефицитовПлановПоЭтапам.Характеристика = РасчетыПоЭтапам.Характеристика)
	|			И (ПредыдущийРасчетДефицитовПлановПоЭтапам.Назначение = РасчетыПоЭтапам.Назначение)
	|			И (ПредыдущийРасчетДефицитовПлановПоЭтапам.ВидПлана = РасчетыПоЭтапам.ВидПлана)
	|ГДЕ
	|	(РасчетыПоЭтапам.ВидПлана = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|				И ПредыдущийРасчетДефицитовПлановПоЭтапам.ВидПлана = ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|				И НЕ(ПредыдущийРасчетДефицитовПлановПоЭтапам.Дефицит >= 0
	|						И РасчетыПоЭтапам.Дефицит >= 0)
	|				И ПредыдущийРасчетДефицитовПлановПоЭтапам.Дефицит <> РасчетыПоЭтапам.Дефицит
	|			ИЛИ РасчетыПоЭтапам.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|				И ПредыдущийРасчетДефицитовПлановПоЭтапам.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|				И ПредыдущийРасчетДефицитовПлановПоЭтапам.НачальныйОстаток <> РасчетыПоЭтапам.НачальныйОстаток
	|				И РасчетыПоЭтапам.КорректировкаРасхода < 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Сценарий КАК Сценарий,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК ПериодПланирования,
	|	РасчетДефицитовПлановПоЭтапам.Номенклатура КАК Номенклатура,
	|	РасчетДефицитовПлановПоЭтапам.Характеристика КАК Характеристика,
	|	РасчетДефицитовПлановПоЭтапам.Назначение КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка) КАК ВидПлана
	|ИЗ
	|	РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей КАК ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей
	|		ПО РасчетДефицитовПлановПоЭтапам.Номенклатура = ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.Номенклатура
	|			И РасчетДефицитовПлановПоЭтапам.Характеристика = ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.Характеристика
	|			И РасчетДефицитовПлановПоЭтапам.Назначение = ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.Назначение
	|			И (ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.ТоварыДляПересчетаВСледующихПериодах)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам КАК ОчередьРасчетаДефицитовПоЭтапам
	|		ПО (&Сценарий = ОчередьРасчетаДефицитовПоЭтапам.Сценарий)
	|			И (ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка) = ОчередьРасчетаДефицитовПоЭтапам.ВидПлана)
	|			И РасчетДефицитовПлановПоЭтапам.ПериодПланирования = ОчередьРасчетаДефицитовПоЭтапам.ПериодПланирования
	|			И РасчетДефицитовПлановПоЭтапам.Номенклатура = ОчередьРасчетаДефицитовПоЭтапам.Номенклатура
	|			И РасчетДефицитовПлановПоЭтапам.Характеристика = ОчередьРасчетаДефицитовПоЭтапам.Характеристика
	|			И РасчетДефицитовПлановПоЭтапам.Назначение = ОчередьРасчетаДефицитовПоЭтапам.Назначение
	|ГДЕ
	|	ОчередьРасчетаДефицитовПоЭтапам.Сценарий ЕСТЬ NULL
	|	И РасчетДефицитовПлановПоЭтапам.ПериодПланирования > &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиПлановыхПотребностей.КорректировкаПлановыхПотребностей КАК КорректировкаПлановыхПотребностей,
	|	КорректировкиПлановыхПотребностей.Сценарий КАК Сценарий,
	|	КорректировкиПлановыхПотребностей.Период КАК ПериодПотребности
	|ИЗ
	|	ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей КАК ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КорректировкиПлановыхПотребностей.Обороты(, , Регистратор, ) КАК КорректировкиПлановыхПотребностей
	|		ПО ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.Номенклатура = КорректировкиПлановыхПотребностей.Номенклатура
	|			И ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.Характеристика = КорректировкиПлановыхПотребностей.Характеристика
	|			И ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.Назначение = КорректировкиПлановыхПотребностей.Назначение
	|			И ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.ВидПлана = КорректировкиПлановыхПотребностей.ВидПланаЭтап
	|			И (&НачалоПериода = КорректировкиПлановыхПотребностей.Период)
	|ГДЕ
	|	ТоварыДляПересчетаВСледующихПериодахИККорректировкеПотребностей.КорректировкаПотребностейКПроверке";
	
	СтатусыСценария = Новый Массив;
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.Утвержден);
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	
	Запрос.УстановитьПараметр("СтатусыСценария", СтатусыСценария);
	Запрос.УстановитьПараметр("ОтборНоменклатурыПоВидамПланов",ОтборНоменклатурыПоВидамПланов);
	Запрос.УстановитьПараметр("ЕстьПланируемыеОстатки",ЕстьПланируемыеОстатки);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕСЯЦ", ПолучитьПериодичностьТекстом(Периодичность));
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ОтборНоменклатурыПоВидамПланов.Характеристика",
			"ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Перезапишем расчет дефицитов за период
	ТаблицаРасчета = РезультатЗапроса[13].Выгрузить(); // ТаблицаЗначений
	ТаблицаРасчета.Индексы.Добавить("ВидПлана");
	
	//Обход структуры планов и перезапись расчета дефицитов
	ВыборкаПоВидамПланов = РезультатЗапроса[14].Выбрать();
	
	Пока ВыборкаПоВидамПланов.Следующий() Цикл
		ТаблицаРасчетаПоВидуПлана = ТаблицаРасчета.Скопировать(Новый Структура("ВидПлана",ВыборкаПоВидамПланов.ВидПлана));
		НаборЗаписей = РегистрыСведений.РасчетДефицитовПлановПоЭтапам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.ВидПлана.Установить(ВыборкаПоВидамПланов.ВидПлана);
		НаборЗаписей.Отбор.ПериодПланирования.Установить(НачалоПериода);
		НаборЗаписей.Загрузить(ТаблицаРасчетаПоВидуПлана);
		
		// Общая запись для пересчета
		Если ВыборкаПоВидамПланов.ЗаполнятьПоДефициту 
			ИЛИ (ВыборкаПоВидамПланов.ЭтоГруппа
			И Не ВыборкаПоВидамПланов.ПланированиеОстатков
			И Не ВыборкаПоВидамПланов.ПланированиеПотребностей) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сценарий = Сценарий;
			НоваяЗапись.ВидПлана = ВыборкаПоВидамПланов.ВидПлана;
			НоваяЗапись.ПериодПланирования = НачалоПериода;
			НоваяЗапись.Пересчитать = ТаблицаРасчетаПоВидуПлана.НайтиСтроки(Новый Структура("Пересчитать", Истина)).Количество()>0;
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// Добавим товары для пересчета в следующих периодах
	ТаблицаПересчета = РезультатЗапроса[16].Выгрузить();
	Если ТаблицаПересчета.Количество()>0 Тогда
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаДефицитовПоЭтапам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Загрузить(ТаблицаПересчета);
		НаборЗаписей.Записать(ЛОЖЬ);
	КонецЕсли;
	
	//Очистим очередь расчета за период
	НаборЗаписей = РегистрыСведений.ОчередьРасчетаДефицитовПоЭтапам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Отбор.ПериодПланирования.Установить(НачалоПериода);
	НаборЗаписей.Записать();
	
	// Запишем в очередь для изменения статуса корректировок потребностей
	Таблица = РезультатЗапроса[17].Выгрузить();
	Если Таблица.Количество()>0 Тогда
		НаборЗаписей = РегистрыСведений.ОчередьКорректировокПотребностейКПересчету.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.ПериодПотребности.Установить(НачалоПериода);
		НаборЗаписей.Загрузить(Таблица);
		НаборЗаписей.Записать();
		СтруктураРасчета.УстановитьКорректировкиПотребнестейКПроверке = Истина;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, (ТаблицаРасчета.Количество()+ТаблицаПересчета.Количество()+Таблица.Количество())/100);
	
	Возврат СтруктураРасчета
	
КонецФункции

Процедура ПроверкаЗавершенияРасчетаПлановПроизводстваИЗамещенияПланов(Сценарий)
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗамещениеПланов.ВидПлана КАК ВидПлана
	|ИЗ
	|	РегистрСведений.ЗамещениеПланов КАК ЗамещениеПланов
	|ГДЕ
	|	ЗамещениеПланов.ВидПлана.Владелец = &Сценарий
	|	И (ЗамещениеПланов.КЗамещению ИЛИ ЗамещениеПланов.КОтменеЗамещения)";
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Если Запрос.Выполнить().Выбрать().Следующий() Тогда
		Ключ = "ЗамещениеПланов";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() > 0 Тогда
			Попытка
				АктивныеЗадания[0].ОжидатьЗавершения();
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура формирования и заполнения плана по дефицитам
//
// Параметры:
//  Сценарий  - СправочникСсылка.СценарииТоварногоПланирования - сценарий для которого производится расчет.
//  ВидПлана  - СправочникСсылка.ВидыПланов - вид плана для которого производится расчет.
//  НачалоПериода  - Дата - начало периода действия плана.
//  ОкончаниеПериода  - Дата - окончание периода действия плана.
//  ПланОбъект  - ДокументОбъект.ПланЗакупок, ДокументОбъект.ПланСборкиРазборки, ДокументОбъект.ПланПроизводства - план по которому производится перерасчет по дефициту.
//
Процедура ЗаполнитьПланыПоДефициту(Сценарий, ВидПлана, НачалоПериода, ОкончаниеПериода, ПланОбъект = Неопределено) Экспорт
	
	ЗаполнитьПоДефицитамИзПлана = Ложь;
	Если ПланОбъект <> Неопределено Тогда
		ЗаполнитьПоДефицитамИзПлана = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Реквизиты = "ТипПлана, КоличествоПериодов, ЗаполнятьПодразделение, ЗаполнятьПартнера, ВидЦены,
		|ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашение, ЗаполнятьСоглашениеВТЧ, ЗаполнятьСклад, ЗаполнятьСкладВТЧ, ЗаполнятьНазначениеВТЧ,
		|ЗапретитьРедактированиеПравила, ЗаполнятьПоФормуле, ЗаполнятьПоДефициту, ЗаполнятьАвтоматически, Замещающий, ЗаполнятьПланОплат,"+ 
		"Родитель";
		
		ПараметрыВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, Реквизиты);
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетДефицитовПлановПоЭтапам");
		ЭлементБлокировки.УстановитьЗначение("Сценарий", Сценарий);
		ЭлементБлокировки.УстановитьЗначение("ВидПлана", ВидПлана);
		ЭлементБлокировки.УстановитьЗначение("ПериодПланирования", НачалоПериода);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		
		Блокировка.Заблокировать();
		
		Если ПланОбъект = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПланЗакупок.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПланЗакупок КАК ПланЗакупок
			|ГДЕ
			|	ПланЗакупок.НачалоПериода <= &ОкончаниеПериода
			|	И ПланЗакупок.ОкончаниеПериода >= &НачалоПериода
			|	И ПланЗакупок.ВидПлана = &ВидПлана
			|	И ПланЗакупок.Проведен
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПланСборкиРазборки.Ссылка
			|ИЗ
			|	Документ.ПланСборкиРазборки КАК ПланСборкиРазборки
			|ГДЕ
			|	ПланСборкиРазборки.НачалоПериода <= &ОкончаниеПериода
			|	И ПланСборкиРазборки.ОкончаниеПериода >= &НачалоПериода
			|	И ПланСборкиРазборки.ВидПлана = &ВидПлана
			|	И ПланСборкиРазборки.Проведен";
			
			ТаблицаПериоды = Неопределено;
			Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
			Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
			Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПланОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ПланОбъект.Заблокировать();
			КонецЕсли;
		КонецЕсли;
		
		Если ПланОбъект = Неопределено Тогда
			
			ТипПлана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ТипПлана");
			
			Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
				ПланОбъект = Документы.ПланЗакупок.СоздатьДокумент();
			ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
				ПланОбъект = Документы.ПланСборкиРазборки.СоздатьДокумент();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПланОбъект, ПараметрыВидаПлана);
			
		КонецЕсли;
		
		Если ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
			ТаблицаТовары = ПланОбъект.Товары;
			ИмяКолонкиПериода = "ДатаПоступления";
			ИмяТабличнойЧасти = "Товары";
		ИначеЕсли ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
			ТаблицаТовары = ПланОбъект.Товары;
			ИмяКолонкиПериода = "ДатаСборкиРазборки";
			ИмяТабличнойЧасти = "Товары";
		КонецЕсли;
		
		ТекстЗапроса = СформироватьТекстЗапросаЗаполненияПоДефициту(ПараметрыВидаПлана, ПланОбъект, ЗаполнитьПоДефицитамИзПлана);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("Ссылка", ПланОбъект.Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		ЗапросПакет = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Если в таблице изменений нет записей, то пересчитывать не нужно
		Если ЗапросПакет[0].Выгрузить()[0].Количество = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ИзмененныеТовары = ЗапросПакет[2].Выгрузить();
		ОтмененныеКорректировки = ЗапросПакет[3].Выгрузить();
		
		Если ОтмененныеКорректировки.Количество()>0 Тогда
			НаборЗаписей = РегистрыСведений.ОтменаКорректировокПлановОбеспечения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.План.Установить(ПланОбъект.Ссылка);
			НаборЗаписей.Загрузить(ОтмененныеКорректировки);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Не ЗаполнитьПоДефицитамИзПлана Тогда
			Если Не ЗначениеЗаполнено(ПланОбъект.Ссылка) Тогда
				ДанныеЗаполнения = Новый Структура();
				ДанныеЗаполнения.Вставить("Сценарий", Сценарий);
				ДанныеЗаполнения.Вставить("ВидПлана", ВидПлана);
				ДанныеЗаполнения.Вставить("НачалоПериода", НачалоПериода);
				ДанныеЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
				ДанныеЗаполнения.Вставить("Статус", Перечисления.СтатусыПланов.НаУтверждении);
				ПланОбъект.Заполнить(ДанныеЗаполнения);
				ПланОбъект.КроссТаблица = Ложь;
			КонецЕсли;
			ПланОбъект.Статус = Перечисления.СтатусыПланов.НаУтверждении;
		КонецЕсли;
		
		ПланОбъект[ИмяТабличнойЧасти].Загрузить(ИзмененныеТовары);
		Если ЗаполнитьПоДефицитамИзПлана Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Заполнить цены
		Если ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок
			И ПланОбъект.ПланироватьПоСумме
			И ЗначениеЗаполнено(ПараметрыВидаПлана.ВидЦены) Тогда
			ПараметрыЗадания = Новый Структура();
			ПланОбъект.ПодготовитьПараметрыЗаполнениЦен(ПараметрыЗадания);
			ТаблицаПериоды = ТаблицаПериоды();
			Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
			Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Периодичность, НачалоПериода, ОкончаниеПериода);
			
			ПараметрыЗадания.Вставить("Периоды", ТаблицаПериоды);
			Результат = Планирование.ЗаполнитьПоФормуле(ПараметрыЗадания);
			ПланОбъект.Товары.Загрузить(Результат);
		КонецЕсли;
		
		// Пересчитать количество упаковок и сумму
		СтруктураДействий = Новый Структура;
		
		Если ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
			ТаблицаТовары = ПланОбъект[ИмяТабличнойЧасти].Выгрузить();
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаТовары, СтруктураДействий, Неопределено);
			ПланОбъект[ИмяТабличнойЧасти].Загрузить(ТаблицаТовары);
		КонецЕсли;
		
		Если ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
			ПланОбъект.ОпределитьВариантКомплектации();
		КонецЕсли;
		
		
		// Пересчитать сумму документа
		Если ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок
			И ПланОбъект.ПланироватьПоСумме Тогда
			ПланОбъект.СуммаДокумента = 0;
			
			Для каждого СтрокаТЧ Из ПланОбъект.Товары Цикл
				
				ПланОбъект.СуммаДокумента = ПланОбъект.СуммаДокумента + СтрокаТЧ.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПланОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
			Если ПланОбъект.Проведен  Тогда
				ПланОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		Иначе
			ПланОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить формирование планов по дефициту по причине %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование планов по дефициту'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьТекстЗапросаЗаполненияПоДефициту(ПараметрыВидаПлана, ПланОбъект, ЗаполнитьПоДефицитамИзПлана)
	
	Если ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
		ТаблицаТовары = ПланОбъект.Товары;
		ИмяКолонкиПериода = "ДатаПоступления";
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ПараметрыВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
		ТаблицаТовары = ПланОбъект.Товары;
		ИмяКолонкиПериода = "ДатаСборкиРазборки";
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	Если ТипЗнч(ПланОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		ТаблицаТовары = ТаблицаТовары.Выгрузить();
	КонецЕсли;
	
	ТекстЗапросаПоляВыборкиТаблицыРасчета = "&Ссылка КАК Ссылка,"  + Символы.ПС;
	ТекстЗапросаПоляВыборкиТаблицыПлана = "ПланТаблица.Ссылка КАК Ссылка," + Символы.ПС;
	ТекстЗапросаПоляВыборкиТаблицыИзменений = "ПланТаблица.Ссылка КАК План," + Символы.ПС;
	
	Для каждого Колонка Из ТаблицаТовары.ВыгрузитьКолонки().Колонки Цикл
		
		Если Колонка.Имя = "Номенклатура"
			Или Колонка.Имя = "Характеристика"
			Или Колонка.Имя = "Назначение" Тогда
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "РасчетДефицитовПлановПоЭтапам." + Колонка.Имя + " КАК " + Колонка.Имя + "," + Символы.ПС;
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана+ "ЕСТЬNULL(ТаблицаПересчитать." + Колонка.Имя + ",ПланТаблица." + Колонка.Имя + ") КАК " + Колонка.Имя + "," + Символы.ПС;
		ИначеЕсли Колонка.Имя = ИмяКолонкиПериода Тогда
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК " + Колонка.Имя + "," + Символы.ПС;
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана+ "ЕСТЬNULL(ТаблицаПересчитать." + Колонка.Имя + ",ПланТаблица." + Колонка.Имя + ") КАК " + Колонка.Имя + "," + Символы.ПС;
		ИначеЕсли Колонка.Имя = "Количество"
			Или Колонка.Имя = "КоличествоУпаковок" Тогда
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "РасчетДефицитовПлановПоЭтапам.КОбеспечению + РасчетДефицитовПлановПоЭтапам.КИзменению КАК " + Колонка.Имя + "," + Символы.ПС;
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана + "ЕСТЬNULL(ТаблицаПересчитать." + Колонка.Имя + ",ПланТаблица." + Колонка.Имя + ") КАК " + Колонка.Имя + "," + Символы.ПС;
		ИначеЕсли Колонка.Имя = "Комментарий" Тогда
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК " + Колонка.Имя + "," + Символы.ПС;
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана + "ВЫРАЗИТЬ(" + "ЕСТЬNULL(ТаблицаПересчитать." + Колонка.Имя + ",ПланТаблица." + Колонка.Имя + ") КАК СТРОКА(1024))" + " КАК " + Колонка.Имя + "," + Символы.ПС;
		ИначеЕсли Колонка.Имя = "ДополнительныеПараметры" Тогда
			Продолжить;
		ИначеЕсли Колонка.Имя = "ИнтервалПотребностиОт"
			Или Колонка.Имя = "ИнтервалПотребностиДо" Тогда
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "РасчетДефицитовПлановПоЭтапам." + Колонка.Имя + " КАК " + Колонка.Имя + "," + Символы.ПС;
			
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана + "ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаПересчитать.ЗаданИнтервалПотребности, ПланТаблица.ЗаданИнтервалПотребности)
			|				И ЕСТЬNULL(ТаблицаПересчитать.ИнтервалПотребностиОт, ПланТаблица.ИнтервалПотребностиОт) <= ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество)
			|				И ЕСТЬNULL(ТаблицаПересчитать.ИнтервалПотребностиДо, ПланТаблица.ИнтервалПотребностиДо) >= ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество)
			|			ТОГДА ЕСТЬNULL(ТаблицаПересчитать." + Колонка.Имя + ", ПланТаблица." + Колонка.Имя + ")
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК " + Колонка.Имя + "," + Символы.ПС;
			
		ИначеЕсли Колонка.Имя = "ЗаданИнтервалПотребности" Тогда
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "РасчетДефицитовПлановПоЭтапам." + Колонка.Имя + " КАК " + Колонка.Имя + "," + Символы.ПС;
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана + "ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаПересчитать.ЗаданИнтервалПотребности, ПланТаблица.ЗаданИнтервалПотребности)
			|				И ЕСТЬNULL(ТаблицаПересчитать.ИнтервалПотребностиОт, ПланТаблица.ИнтервалПотребностиОт) <= ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество)
			|				И ЕСТЬNULL(ТаблицаПересчитать.ИнтервалПотребностиДо, ПланТаблица.ИнтервалПотребностиДо) >= ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество)
			|			ТОГДА ЕСТЬNULL(ТаблицаПересчитать." + Колонка.Имя + ", ПланТаблица." + Колонка.Имя + ")
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК " + Колонка.Имя + "," + Символы.ПС;
		Иначе
			ТекстЗапросаПоляВыборкиТаблицыРасчета = ТекстЗапросаПоляВыборкиТаблицыРасчета + "NULL КАК " + Колонка.Имя + "," + Символы.ПС;
			ТекстЗапросаПоляВыборкиТаблицыПлана = ТекстЗапросаПоляВыборкиТаблицыПлана + "ПланТаблица." + Колонка.Имя + " КАК " + Колонка.Имя + "," + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаУсловияПересчета = "";
	Если Не ЗаполнитьПоДефицитамИзПлана Тогда
		ТекстЗапросаУсловияПересчета = "И РасчетДефицитовПлановПоЭтапам.Пересчитать";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|&ТекстЗапросаЛевПоляВыборкиТаблицыРасчета
	|ПОМЕСТИТЬ ТаблицаПересчитать
	|ИЗ
	|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|ГДЕ
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана = &ВидПлана
	|	И РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий
	|	И РасчетДефицитовПлановПоЭтапам.ПериодПланирования = &НачалоПериода
	|	И &ТекстЗапросаУсловияПересчета
	|	И РасчетДефицитовПлановПоЭтапам.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ПланТаблица
	|ИЗ
	|	&ТекстЗапросаТаблицаПлана КАК ПланТаблица
	|ГДЕ
	|	ПланТаблица.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|&ТекстЗапросаЛевПоляВыборкиТаблицыПлана
	|ИЗ
	|	ПланТаблица КАК ПланТаблица
	|	ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПересчитать КАК ТаблицаПересчитать
	|		ПО ПланТаблица.Номенклатура = ТаблицаПересчитать.Номенклатура
	|		И ПланТаблица.Характеристика = ТаблицаПересчитать.Характеристика
	|		И ПланТаблица.Назначение = ТаблицаПересчитать.Назначение
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|ПланТаблица.Ссылка КАК План,
	|ЕСТЬNULL(ПланТаблица.Номенклатура,ТаблицаПересчитать.Номенклатура) КАК Номенклатура,
	|ЕСТЬNULL(ПланТаблица.Характеристика,ТаблицаПересчитать.Характеристика) КАК Характеристика,
	|ЕСТЬNULL(ПланТаблица.Количество,ТаблицаПересчитать.Количество) КАК Обеспечить,
	|&ТекстЗапросаПериодПланирования КАК ПериодПланирования,
	|ВЫРАЗИТЬ(ЕСТЬNULL(ПланТаблица.Комментарий,ТаблицаПересчитать.Комментарий) КАК СТРОКА(1024)) КАК Комментарий,
	|ЕСТЬNULL(ПланТаблица.Назначение,ТаблицаПересчитать.Назначение) КАК Назначение,
	|ЕСТЬNULL(ПланТаблица.ИнтервалПотребностиОт, ТаблицаПересчитать.ИнтервалПотребностиОт) КАК ИнтервалПотребностиОт,
	|ЕСТЬNULL(ТаблицаПересчитать.ИнтервалПотребностиДо, ТаблицаПересчитать.ИнтервалПотребностиДо) КАК ИнтервалПотребностиДо
	|ИЗ
	|ПланТаблица КАК ПланТаблица
	|ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПересчитать КАК ТаблицаПересчитать
	|	ПО ПланТаблица.Номенклатура = ТаблицаПересчитать.Номенклатура
	|	И ПланТаблица.Характеристика = ТаблицаПересчитать.Характеристика
	|	И ПланТаблица.Назначение = ТаблицаПересчитать.Назначение
	|ГДЕ
	|	ЕСТЬNULL(ПланТаблица.ЗаданИнтервалПотребности, ТаблицаПересчитать.ЗаданИнтервалПотребности)
	|	И НЕ (ЕСТЬNULL(ПланТаблица.ИнтервалПотребностиОт, ТаблицаПересчитать.ИнтервалПотребностиОт) <= ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество)
	|		И ЕСТЬNULL(ПланТаблица.ИнтервалПотребностиДо, ТаблицаПересчитать.ИнтервалПотребностиДо) >= ЕСТЬNULL(ТаблицаПересчитать.Количество, ПланТаблица.Количество))";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаЛевПоляВыборкиТаблицыРасчета", 
		Лев(ТекстЗапросаПоляВыборкиТаблицыРасчета, СтрДлина(ТекстЗапросаПоляВыборкиТаблицыРасчета)-2));
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаЛевПоляВыборкиТаблицыПлана", 
		Лев(ТекстЗапросаПоляВыборкиТаблицыПлана, СтрДлина(ТекстЗапросаПоляВыборкиТаблицыПлана)-2));
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"И &ТекстЗапросаУсловияПересчета", 
		ТекстЗапросаУсловияПересчета);
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаТаблицаПлана", 
		"Документ."+ПланОбъект.Метаданные().Имя+"." + ИмяТабличнойЧасти + "");
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаПериодПланирования", 
		"ЕСТЬNULL(ПланТаблица."+ИмяКолонкиПериода+",ТаблицаПересчитать."+ИмяКолонкиПериода+")");
	
	Возврат ТекстЗапроса
	
КонецФункции

// Процедура выполняет заполнение плана по дефициту если включено автозаполнение
//
// Параметры:
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования - сценарий для которого рассчитывается необходимость заполнения плана
//
Процедура РасчитатьИЗаполнитьПланыПоДефицитуАвтоматически(Сценарий) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетДефицитовПлановПоЭтапам.Сценарий КАК Сценарий,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана КАК ВидПлана,
	|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК ПериодПланирования,
	|	РасчетДефицитовПлановПоЭтапам.Пересчитать КАК Пересчитать,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана.ЗаполнятьАвтоматически КАК ЗаполнятьАвтоматически,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана.ТипПлана КАК ТипПлана,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана.ПорядокПланирования КАК ПорядокПланирования,
	|	РасчетДефицитовПлановПоЭтапам.ВидПлана.Родитель.ПорядокПланирования КАК ПорядокПланированияЭтапа
	|ПОМЕСТИТЬ ВидыПлановПоПериодамДляПересчета
	|ИЗ
	|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
	|ГДЕ
	|	РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий
	|	И РасчетДефицитовПлановПоЭтапам.Пересчитать
	|	И НЕ РасчетДефицитовПлановПоЭтапам.ВидПлана.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ПланЗакупок.Ссылка, ЗНАЧЕНИЕ(Документ.ПланЗакупок.ПустаяСсылка)) КАК Ссылка,
	|	ВидыПлановПоПериодамДляПересчета.ВидПлана КАК ВидПлана,
	|	ВидыПлановПоПериодамДляПересчета.ПериодПланирования КАК ПериодПланирования,
	|	ЕСТЬNULL(ПланЗакупок.ЗаполнятьАвтоматически, ВидыПлановПоПериодамДляПересчета.ЗаполнятьАвтоматически) КАК ЗаполнятьАвтоматически,
	|	ВидыПлановПоПериодамДляПересчета.ПорядокПланирования КАК ПорядокПланирования,
	|	ВидыПлановПоПериодамДляПересчета.ПорядокПланированияЭтапа КАК ПорядокПланированияЭтапа
	|ИЗ
	|	ВидыПлановПоПериодамДляПересчета КАК ВидыПлановПоПериодамДляПересчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланЗакупок КАК ПланЗакупок
	|		ПО ВидыПлановПоПериодамДляПересчета.ВидПлана = ПланЗакупок.ВидПлана
	|			И ВидыПлановПоПериодамДляПересчета.ПериодПланирования = ПланЗакупок.НачалоПериода
	|			И ПланЗакупок.Проведен
	|ГДЕ
	|	ВидыПлановПоПериодамДляПересчета.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланЗакупок)
	|	И ЕСТЬNULL(ПланЗакупок.ЗаполнятьАвтоматически, ВидыПлановПоПериодамДляПересчета.ЗаполнятьАвтоматически)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ПланСборкиРазборки.Ссылка, ЗНАЧЕНИЕ(Документ.ПланСборкиРазборки.ПустаяСсылка)),
	|	ВидыПлановПоПериодамДляПересчета.ВидПлана,
	|	ВидыПлановПоПериодамДляПересчета.ПериодПланирования,
	|	ЕСТЬNULL(ПланСборкиРазборки.ЗаполнятьАвтоматически, ВидыПлановПоПериодамДляПересчета.ЗаполнятьАвтоматически),
	|	ВидыПлановПоПериодамДляПересчета.ПорядокПланирования,
	|	ВидыПлановПоПериодамДляПересчета.ПорядокПланированияЭтапа
	|ИЗ
	|	ВидыПлановПоПериодамДляПересчета КАК ВидыПлановПоПериодамДляПересчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланСборкиРазборки КАК ПланСборкиРазборки
	|		ПО ВидыПлановПоПериодамДляПересчета.ВидПлана = ПланСборкиРазборки.ВидПлана
	|			И ВидыПлановПоПериодамДляПересчета.ПериодПланирования = ПланСборкиРазборки.НачалоПериода
	|			И ПланСборкиРазборки.Проведен
	|ГДЕ
	|	ВидыПлановПоПериодамДляПересчета.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланСборкиРазборки)
	|	И ЕСТЬNULL(ПланСборкиРазборки.ЗаполнятьАвтоматически, ВидыПлановПоПериодамДляПересчета.ЗаполнятьАвтоматически)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПланированияЭтапа,ПорядокПланирования,ПериодПланирования";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	СтатусыСценария = Новый Массив;
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.Утвержден);
	СтатусыСценария.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	Если Выборка.Следующий() Тогда
		
		ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(Выборка.ПериодПланирования, Периодичность, 1);
		ЗаполнитьПланыПоДефициту(Сценарий, Выборка.ВидПлана, Выборка.ПериодПланирования, ОкончаниеПериода);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет очередь пересчета и запускает фоновые пересчет планов по дефициту 
//
// Параметры:
//  Сценарий - СправочникСсылка.СценарииТоварногоПланирования - сценарий для которого выполняется полный пересчет
//
Процедура ЗапускВыполненияФоновогоПересчетаДефицитаПоЭтапам(Сценарий) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаДефицитовПоЭтапам");
		ЭлементБлокировки.УстановитьЗначение("Сценарий", Сценарий);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетДефицитовПлановПоЭтапам");
		ЭлементБлокировки.УстановитьЗначение("Сценарий", Сценарий);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетДефицитовПлановПоЭтапам.Сценарий КАК Сценарий,
		|	РасчетДефицитовПлановПоЭтапам.ПериодПланирования КАК ПериодПланирования,
		|	РасчетДефицитовПлановПоЭтапам.Номенклатура КАК Номенклатура,
		|	РасчетДефицитовПлановПоЭтапам.Характеристика КАК Характеристика,
		|	РасчетДефицитовПлановПоЭтапам.Назначение КАК Назначение
		|ИЗ
		|	РегистрСведений.РасчетДефицитовПлановПоЭтапам КАК РасчетДефицитовПлановПоЭтапам
		|ГДЕ
		|	РасчетДефицитовПлановПоЭтапам.Сценарий = &Сценарий";
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		ТоварыДляПересчета = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаДефицитовПоЭтапам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		
		НаборЗаписей.Загрузить(ТоварыДляПересчета);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить блокировку регистров ""Очередь расчета дефицитов по планам"" и ""Расчет дефицитов по этапам""'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск полного пересчета по дефицитам'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
				
		Возврат;
	КонецПопытки;
	
	ЗапускВыполненияФоновогоРасчетаДефицитаПоЭтапам(Сценарий);
	
КонецПроцедуры

Процедура СформироватьКорректировкуПлановыхПотребностей(АдресВХранилище, ПараметрыКорректировки) Экспорт
	
	ТаблицаЗамен = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	КорректировкаПлановыхПотребностейОбъект = Документы.КорректировкаПлановыхПотребностей.СоздатьДокумент();

	Для Каждого СтрокаЗамены Из ТаблицаЗамен Цикл
		
		Если СтрокаЗамены.ЭтоАналог Тогда
			НоваяСтрока = КорректировкаПлановыхПотребностейОбъект.УвеличениеПотребностей.Добавить();
		Иначе
			НоваяСтрока = КорректировкаПлановыхПотребностейОбъект.УменьшениеПотребностей.Добавить();
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗамены);
		НоваяСтрока.Назначение = ПараметрыКорректировки.НазначениеКорректировки;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(КорректировкаПлановыхПотребностейОбъект, ПараметрыКорректировки);
	КорректировкаПлановыхПотребностейОбъект.РежимВВодаКорректировкиМногострочный = ТаблицаЗамен.Количество()>2;
	КорректировкаПлановыхПотребностейОбъект.Дата = ТекущаяДатаСеанса();
	КорректировкаПлановыхПотребностейОбъект.Статус = Перечисления.СтатусыПлановыхКорректировок.Утверждена;
	КорректировкаПлановыхПотребностейОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - см. ПланированиеКлиент.ДополнительныеПараметрыЗагрузкиИзФайла
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);// ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);// ТаблицаЗначений
	Товары.Колонки.Удалить("ДополнительныеПараметры");
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанныеТовары());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеШтрихкодов());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеНоменклатуры());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеХарактеристик());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеУпаковок());
	
	Если ДополнительныеПараметры.ИспользуютсяНазначения Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеНазначений());
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользуютсяСклады Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСкладов());
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользуютсяПартнеры Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеПартнеров());
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользуютсяСоглашения Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеСоглашений());
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользуютсяВидыЦен Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеВидыЦен());
	КонецЕсли;
	Если ДополнительныеПараметры.ТипПлана = "ПланСборкиРазборки" Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеВариантовКомплектации());
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеТоваров());
	
	Если ДополнительныеПараметры.КроссТаблица Тогда
		Если ДополнительныеПараметры.ТипПлана = "ПланЗакупок" Тогда
			ИмяПериодаПлана = "ДатаПоступления";
		ИначеЕсли ДополнительныеПараметры.ТипПлана = "ПланВнутреннихПотреблений"
			ИЛИ ДополнительныеПараметры.ТипПлана = "ПланПродаж" Тогда
			ИмяПериодаПлана = "ДатаОтгрузки";
		ИначеЕсли ДополнительныеПараметры.ТипПлана = "ПланСборкиРазборки" Тогда
			ИмяПериодаПлана = "ДатаСборкиРазборки";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры);// Запрос
	Результат = Запрос.Выполнить().Выгрузить();
	
	Идентификатор = 1;
	Для Каждого Строка Из Результат Цикл
		
		Если ДополнительныеПараметры.КроссТаблица Тогда
			
			СтрокаЗагружаемыхДанных = ЗагружаемыеДанные.Найти(Строка.Идентификатор, "Идентификатор");
			
			Для Каждого Период Из ДополнительныеПараметры.Периоды Цикл
				
				// Параллельное дозаполнение загружаемых данных для корректной работы механизма БСП
				СтрокаЗагружаемыхДанных.Идентификатор = Идентификатор;
				ЗаполнитьЗначенияСвойств(ЗагружаемыеДанные.Добавить(), СтрокаЗагружаемыхДанных);
				
				НоваяСтрока = Товары.Добавить();
				Строка.Идентификатор = Идентификатор;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Идентификатор = Идентификатор;
				НоваяСтрока.КоличествоУпаковок = Строка["КоличествоУпаковок_" + Период.ИмяКолонки];
				НоваяСтрока[ИмяПериодаПлана] = Период.ДатаНачала;
				
				
				Если ДополнительныеПараметры.ПланироватьПоСумме Тогда
					
					НоваяСтрока.Цена = Строка["Цена_" + Период.ИмяКолонки];
					НоваяСтрока.Сумма = Строка["Сумма_" + Период.ИмяКолонки];
					
					Если НоваяСтрока.Сумма = 0 И НоваяСтрока.КоличествоУпаковок = 0 Тогда
						НоваяСтрока.Сумма = НоваяСтрока.Цена;
					ИначеЕсли НоваяСтрока.Сумма = 0 И НоваяСтрока.КоличествоУпаковок <> 0 Тогда
						НоваяСтрока.Сумма = НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена;
					КонецЕсли;
				КонецЕсли;
				
				СоздатьЗаписиОНеоднозначности(СписокНеоднозначностей, Строка, ДополнительныеПараметры);
				
				Идентификатор = Идентификатор + 1;
				
			КонецЦикла;
			
		Иначе
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если ДополнительныеПараметры.ПланироватьПоСумме Тогда
				Если НоваяСтрока.Сумма = 0 И НоваяСтрока.КоличествоУпаковок = 0 Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Цена;
				ИначеЕсли НоваяСтрока.Сумма = 0 И НоваяСтрока.КоличествоУпаковок <> 0 Тогда
					НоваяСтрока.Сумма = НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена;
				КонецЕсли;
			КонецЕсли;
			
			СоздатьЗаписиОНеоднозначности(СписокНеоднозначностей, Строка, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СоздатьЗаписиОНеоднозначности(СписокНеоднозначностей, Строка, ДополнительныеПараметры)
	
		Если Строка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Номенклатура";
		КонецЕсли;
		
		Если Строка.КоличествоХарактеристик > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Характеристика";
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИспользуютсяНазначения И Строка.КоличествоНазначений > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Назначение";
		КонецЕсли;
		
		Если Строка.КоличествоУпаковки > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Упаковка";
		КонецЕсли;
		
		
		Если ДополнительныеПараметры.ИспользуютсяСклады И Строка.КоличествоСкладов > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Склад";
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИспользуютсяПартнеры И Строка.КоличествоПартнеров > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Партнер";
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИспользуютсяСоглашения И Строка.КоличествоСоглашений > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "Соглашение";
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИспользуютсяВидыЦен И Строка.КоличествоВидовЦен > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "ВидЦеныПоставщика";
		КонецЕсли;
		
		Если ДополнительныеПараметры.ТипПлана = "ПланСборкиРазборки" И Строка.КоличествоВариантовКомплектации > 1 Тогда
			ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка       = "ВариантКомплектации";
		КонецЕсли;
КонецПроцедуры
// Заполнить список неоднозначностей.
// 
// Параметры:
//  СписокНеоднозначностей - Массив из СтрокаТаблицыЗначений
//  ИмяКолонки - Строка
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений
//  ДополнительныеПараметры - см. ПланированиеКлиент.ДополнительныеПараметрыЗагрузкиИзФайла
Процедура ЗаполнитьСписокНеоднозначностей(СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Номенклатура   КАК Номенклатура,
		|	Штрихкоды.Характеристика КАК Характеристика,
		|	Штрихкоды.Упаковка       КАК Упаковка
		|ПОМЕСТИТЬ ВтДанныеШтрихкодов
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
		|
		|ГДЕ
		|	НЕ &Штрихкод = """"
		|	И Штрихкоды.Штрихкод = &Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &Артикул = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Артикул = &Артикул
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &КодНоменклатуры = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Код = &КодНоменклатуры
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СпрНоменклатура.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.Номенклатура КАК СпрНоменклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|		ПО ИСТИНА
		|
		|	ГДЕ
		|		НЕ &Номенклатура = """"
		|		И ДанныеШтрихкодов.Номенклатура ЕСТЬ NULL
		|		И СпрНоменклатура.Наименование = &Номенклатура
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДанныеШтрихкодов.Номенклатура КАК Ссылка
		|	ИЗ
		|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
		|	) КАК СпрНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	СпрНоменклатура.Ссылка
		|";
		
		Запрос.УстановитьПараметр("Штрихкод",        ЗагружаемыеЗначенияСтрока.Штрихкод);
		Запрос.УстановитьПараметр("Артикул",         ЗагружаемыеЗначенияСтрока.Артикул);
		Запрос.УстановитьПараметр("КодНоменклатуры", ЗагружаемыеЗначенияСтрока.КодНоменклатуры);
		Запрос.УстановитьПараметр("Номенклатура",    ЗагружаемыеЗначенияСтрока.Номенклатура);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Характеристика" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|
		|ГДЕ
		|	НЕ &Характеристика = """"
		|	И Характеристики.Наименование = &Характеристика
		|";
		
		Запрос.УстановитьПараметр("Характеристика", ЗагружаемыеЗначенияСтрока.Характеристика);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Назначение" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Назначения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|
		|ГДЕ
		|	НЕ &Назначение = """"
		|	И Назначения.Наименование = &Назначение
		|";
		
		Запрос.УстановитьПараметр("Назначение", ЗагружаемыеЗначенияСтрока.Назначение);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Упаковка" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Упаковки.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|
		|	ГДЕ
		|		НЕ &КодУпаковки = """"
		|		И Упаковки.Код = &КодУпаковки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Упаковки.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|
		|	ГДЕ
		|		НЕ &Упаковка = """"
		|		И Упаковки.Наименование = &Упаковка
		|	) КАК Упаковки
		|
		|СГРУППИРОВАТЬ ПО
		|	Упаковки.Ссылка
		|";
		
		Запрос.УстановитьПараметр("КодУпаковки", ЗагружаемыеЗначенияСтрока.КодУпаковки);
		Запрос.УстановитьПараметр("Упаковка",    ЗагружаемыеЗначенияСтрока.Упаковка);
		
	КонецЕсли;
	
	
	Если ИмяКолонки = "Склад" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|
		|ГДЕ
		|	НЕ &Склад = """"
		|	И Склады.Наименование = &Склад
		|";
		
		Запрос.УстановитьПараметр("Склад", ЗагружаемыеЗначенияСтрока.Склад);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Партнер" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|
		|ГДЕ
		|	НЕ &Партнер = """"
		|	И Партнеры.Наименование = &Партнер
		|";
		
		Запрос.УстановитьПараметр("Партнер", ЗагружаемыеЗначенияСтрока.Партнер);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Соглашение" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Соглашения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК Соглашения
		|
		|ГДЕ
		|	НЕ &Соглашение = """"
		|	И Соглашения.Наименование = &Соглашение
		|";
		
		Запрос.УстановитьПараметр("Соглашение", ЗагружаемыеЗначенияСтрока.Соглашение);
		
	КонецЕсли;
	
	Если ИмяКолонки = "ВидЦены" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦенПоставщиков КАК ВидыЦен
		|
		|ГДЕ
		|	НЕ &ВидЦены = """"
		|	И ВидыЦен.Наименование = &ВидЦены
		|";
		
		Запрос.УстановитьПараметр("ВидЦены", ЗагружаемыеЗначенияСтрока.ВидЦены);
		
	КонецЕсли;
	
	Если ИмяКолонки = "ВариантКомплектации" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыКомплектации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектации
		|
		|ГДЕ
		|	НЕ &ВариантКомплектации = """"
		|	И ВариантыКомплектации.Наименование = &ВариантКомплектации
		|";
		
		Запрос.УстановитьПараметр("ВариантКомплектации", ЗагружаемыеЗначенияСтрока.ВариантКомплектации);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ТекстыЗапросовЗагрузкиДанныхИзФайла

// Параметры:
//  ТекстыЗапроса - Массив из Строка - Тексты запроса
//  ЗагружаемыеДанные - ТаблицаЗначений - Загружаемые данные
//  ДополнительныеПараметры - Структура - Дополнительные параметры:
// * ТипПлана - Строка -
// * ИспользуютсяНазначения - Булево -
// * ИспользуютсяПартнеры - Булево -
// * ИспользуютсяВидыЦен - Булево -
// * ИспользуютсяСклады - Булево -
// * ИспользуютсяСоглашения - Булево -
// * Поставщик - СправочникСсылка.Партнеры, Неопределено -
// * ИспользуютсяСпецификации - Булево -
// * ИспользуютсяДатыВыпуска - Булево -
// * ИспользуютсяДатыВыпускаПродукцииПолуфабриката - Булево -
// * ИспользуетсяРасчетПоСкоростиПродаж - Булево -
// * ДоступныеТипыНоменклатуры - Массив из ПеречислениеСсылка.ТипыНоменклатуры -
// 
// Возвращаемое значение:
//  Запрос
Функция СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры)
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	КроссТаблица = ДополнительныеПараметры.КроссТаблица;
	
	ПоляКоличество = "";
	ПоляЦена = "";
	ПоляСумма = "";
	Если КроссТаблица Тогда
		
		Для Каждого Период Из ДополнительныеПараметры.Периоды Цикл
			ПоляКоличество = ПоляКоличество + "
			|ЗагружаемыеДанные.КоличествоУпаковок_" + Период.ИмяКолонки + " КАК КоличествоУпаковок_" +  Период.ИмяКолонки + ",";
			
			ПоляЦена = ПоляЦена + "
			|ЗагружаемыеДанные.Цена_" + Период.ИмяКолонки + " КАК Цена_" +  Период.ИмяКолонки + ",";
			
			ПоляСумма = ПоляСумма + "
			|ЗагружаемыеДанные.Сумма_" + Период.ИмяКолонки + " КАК Сумма_" +  Период.ИмяКолонки + ",";
		КонецЦикла;
		
	Иначе
		ПоляКоличество = "ЗагружаемыеДанные.КоличествоУпаковок КАК КоличествоУпаковок,";
		ПоляЦена = "ЗагружаемыеДанные.Цена КАК Цена,";
		ПоляСумма = "ЗагружаемыеДанные.Сумма КАК Сумма,";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеКоличествоУпаковок,", ПоляКоличество);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеЦенаСумма,", 
		?(ДополнительныеПараметры.ПланироватьПоСумме, ПоляЦена + ПоляСумма, ""));
			
	// Используются назначения
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеНазначение,",
		?(ДополнительныеПараметры.ИспользуютсяНазначения, "ЗагружаемыеДанные.Назначение КАК Назначение,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение,", ?(ДополнительныеПараметры.ИспользуютсяНазначения, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0) = 1
		|			ТОГДА ДанныеНазначений.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Назначение,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоНазначений,", 
		?(ДополнительныеПараметры.ИспользуютсяНазначения, "ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0) КАК КоличествоНазначений,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяНазначения, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНазначений КАК ДанныеНазначений
		|	ПО ДанныеНазначений.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	
	// Используются партнеры
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеПартнер,",
		?(ДополнительныеПараметры.ИспользуютсяПартнеры, "ЗагружаемыеДанные.Партнер КАК Партнер,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер,", ?(ДополнительныеПараметры.ИспользуютсяПартнеры, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеПартнеров.КоличествоПартнеров, 0) = 1
		|			ТОГДА ДанныеПартнеров.Партнер
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|	КОНЕЦ КАК Партнер,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоПартнеров,", 
		?(ДополнительныеПараметры.ИспользуютсяПартнеры, "ЕСТЬNULL(ДанныеПартнеров.КоличествоПартнеров, 0) КАК КоличествоПартнеров,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяПартнеры, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПартнеров КАК ДанныеПартнеров
		|	ПО ДанныеПартнеров.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	// Используются склады
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеСклад,",
		?(ДополнительныеПараметры.ИспользуютсяСклады, "ЗагружаемыеДанные.Склад КАК Склад,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Склад,", ?(ДополнительныеПараметры.ИспользуютсяСклады, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеСкладов.КоличествоСкладов, 0) = 1
		|			ТОГДА ДанныеСкладов.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоСкладов,", 
		?(ДополнительныеПараметры.ИспользуютсяСклады, "ЕСТЬNULL(ДанныеСкладов.КоличествоСкладов, 0) КАК КоличествоСкладов,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяСклады, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСкладов КАК ДанныеСкладов
		|	ПО ДанныеСкладов.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	// Используются соглашения
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеСоглашение,",
		?(ДополнительныеПараметры.ИспользуютсяСоглашения, "ЗагружаемыеДанные.Соглашение КАК Соглашение,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Соглашение,", ?(ДополнительныеПараметры.ИспользуютсяСоглашения, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеСоглашений.КоличествоСоглашений, 0) = 1
		|			ТОГДА ДанныеСоглашений.Соглашение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|	КОНЕЦ КАК Соглашение,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоСоглашений,", 
		?(ДополнительныеПараметры.ИспользуютсяСоглашения, "ЕСТЬNULL(ДанныеСоглашений.КоличествоСоглашений, 0) КАК КоличествоСоглашений,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяСоглашения, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСоглашений КАК ДанныеСоглашений
		|	ПО ДанныеСоглашений.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	// Используются виды цен
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеВидЦены,",
		?(ДополнительныеПараметры.ИспользуютсяВидыЦен, "ЗагружаемыеДанные.ВидЦены КАК ВидЦены,", ""));
	
	ВидыЦенИПартнерыВТЧ = ДополнительныеПараметры.ИспользуютсяВидыЦен И ДополнительныеПараметры.ИспользуютсяПартнеры;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ &Поставщик КАК Поставщики",
		?(ВидыЦенИПартнерыВТЧ, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеПартнеров КАК Поставщики", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПО &УсловияСоединения",
		?(ВидыЦенИПартнерыВТЧ, "ПО Поставщики.Партнер = ВидыЦен.Владелец", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидЦены,", ?(ДополнительныеПараметры.ИспользуютсяВидыЦен, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеВидыЦен.КоличествоВидовЦен, 0) = 1
		|			ТОГДА ДанныеВидыЦен.ВидЦены
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
		|	КОНЕЦ КАК ВидЦеныПоставщика,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоВидовЦен,", 
		?(ДополнительныеПараметры.ИспользуютсяВидыЦен, "ЕСТЬNULL(ДанныеВидыЦен.КоличествоВидовЦен, 0) КАК КоличествоВидовЦен,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяВидыЦен, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеВидыЦен КАК ДанныеВидыЦен
		|	ПО ДанныеВидыЦен.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	// Используется план сборки (разборки)
	ЭтоСборкаРазборка = ДополнительныеПараметры.ТипПлана = "ПланСборкиРазборки";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеВариантКомплектации,",
		?(ЭтоСборкаРазборка, "ЗагружаемыеДанные.ВариантКомплектации КАК ВариантКомплектации,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВариантКомплектации,", ?(ЭтоСборкаРазборка, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеВариантовКомплектации.КоличествоВариантовКомплектации, 0) = 1
		|			ТОГДА ДанныеВариантовКомплектации.ВариантКомплектации
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВариантыКомплектацииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК ВариантКомплектации,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоВариантовКомплектации,", 
		?(ЭтоСборкаРазборка, "ЕСТЬNULL(ДанныеВариантовКомплектации.КоличествоВариантовКомплектации, 0) КАК КоличествоВариантовКомплектации,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ЭтоСборкаРазборка, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеВариантовКомплектации КАК ДанныеВариантовКомплектации
		|	ПО ДанныеВариантовКомплектации.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеСрокИсполненияЗаказа,", 
		?(НЕ КроссТаблица И ДополнительныеПараметры.ТипПлана = "ПланЗакупок", "ЗагружаемыеДанные.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,", ""));
	
	Если КроссТаблица Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеДаты,", "");
	ИначеЕсли ДополнительныеПараметры.ТипПлана = "ПланЗакупок" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеДаты,", 
		"ЗагружаемыеДанные.ДатаПоступления КАК ДатаПоступления,
		|ЗагружаемыеДанные.ДатаЗаказа КАК ДатаЗаказа,");
	ИначеЕсли ДополнительныеПараметры.ТипПлана = "ПланВнутреннихПотреблений"
		ИЛИ ДополнительныеПараметры.ТипПлана = "ПланПродаж" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеДаты,", 
		"ЗагружаемыеДанные.ДатаОтгрузки КАК ДатаОтгрузки,");
	ИначеЕсли ДополнительныеПараметры.ТипПлана = "ПланСборкиРазборки" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеДаты,", 
		"ЗагружаемыеДанные.ДатаСборкиРазборки КАК ДатаСборкиРазборки,");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеДаты,", "");
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные",         ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ДоступныеТипыНоменклатуры", ДополнительныеПараметры.ДоступныеТипыНоменклатуры);
	
	Если ДополнительныеПараметры.ИспользуютсяВидыЦен Тогда
		Запрос.УстановитьПараметр("Партнер", ДополнительныеПараметры.Партнер);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаВтЗагружаемыеДанныеТовары()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор       КАК Идентификатор,
	|	ЗагружаемыеДанные.Штрихкод            КАК Штрихкод,
	|	ЗагружаемыеДанные.Артикул             КАК Артикул,
	|	ЗагружаемыеДанные.КодНоменклатуры     КАК КодНоменклатуры,
	|	ЗагружаемыеДанные.Номенклатура        КАК Номенклатура,
	|	ЗагружаемыеДанные.Характеристика      КАК Характеристика,
	|	&ЗагружаемыеДанныеНазначение,
	|	ЗагружаемыеДанные.КодУпаковки         КАК КодУпаковки,
	|	ЗагружаемыеДанные.Упаковка            КАК Упаковка,
	|	&ЗагружаемыеДанныеКоличествоУпаковок,
	|	&ЗагружаемыеДанныеПартнер,
	|	&ЗагружаемыеДанныеСклад,
	|	&ЗагружаемыеДанныеСоглашение,
	|	&ЗагружаемыеДанныеВидЦены,
	|	&ЗагружаемыеДанныеЦенаСумма,
	|	&ЗагружаемыеДанныеВариантКомплектации,
	|	&ЗагружаемыеДанныеДаты,
	|	&ЗагружаемыеДанныеСрокИсполненияЗаказа,
	|	ЗагружаемыеДанные.Комментарий         КАК Комментарий
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные штрихкодов
Функция ТекстЗапросаВтДанныеШтрихкодов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	Штрихкоды.Номенклатура          КАК Номенклатура,
	|	Штрихкоды.Характеристика        КАК Характеристика,
	|	Штрихкоды.Упаковка              КАК Упаковка
	|ПОМЕСТИТЬ ВтДанныеШтрихкодов
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|	ПО Штрихкоды.Штрихкод = ЗагружаемыеДанные.Штрихкод
	|
	|ГДЕ
	|	НЕ ЗагружаемыеДанные.Штрихкод = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные номенклатуры
Функция ТекстЗапросаВтДанныеНоменклатуры()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Идентификатор                      КАК Идентификатор,
	|	МАКСИМУМ(СпрНоменклатура.Номенклатура)             КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНоменклатура.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВтДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		СпрНоменклатура.Ссылка          КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Артикул = ЗагружаемыеДанные.Артикул
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Артикул = """"
	|		И СпрНоменклатура.ТипНоменклатуры В (&ДоступныеТипыНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		СпрНоменклатура.Ссылка          КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Код = ЗагружаемыеДанные.КодНоменклатуры
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодНоменклатуры = """"
	|		И СпрНоменклатура.ТипНоменклатуры В (&ДоступныеТипыНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		СпрНоменклатура.Ссылка          КАК Номенклатура
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Наименование = ЗагружаемыеДанные.Номенклатура
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Номенклатура = """"
	|		И СпрНоменклатура.ТипНоменклатуры В (&ДоступныеТипыНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
	|		ДанныеШтрихкодов.Номенклатура  КАК Номенклатура
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК СпрНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные характеристик
Функция ТекстЗапросаВтДанныеХарактеристик()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Характеристики.Идентификатор                        КАК Идентификатор,
	|	МАКСИМУМ(Характеристики.Характеристика)             КАК Характеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Характеристики.Характеристика) КАК КоличествоХарактеристик
	|ПОМЕСТИТЬ ВтДанныеХарактеристик
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Характеристики.Ссылка           КАК Характеристика
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ДанныеНоменклатуры.Номенклатура
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО Характеристики.Владелец = ВЫБОР
	|			КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ТОГДА СпрНоменклатура.ВидНоменклатуры
	|			КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА СпрНоменклатура.Ссылка
	|			КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ТОГДА СпрНоменклатура.ВладелецХарактеристик
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ
	|		И Характеристики.Наименование = ЗагружаемыеДанные.Характеристика
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Характеристика = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Характеристики.Ссылка           КАК Характеристика
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ДанныеНоменклатуры.Номенклатура
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|		ПО Характеристики.Владелец = ВЫБОР
	|			КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ТОГДА СпрНоменклатура.ВидНоменклатуры
	|			КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА СпрНоменклатура.Ссылка
	|			КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ТОГДА СпрНоменклатура.ВладелецХарактеристик
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ
	|		И Характеристики.Наименование = ЗагружаемыеДанные.Характеристика
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Характеристика = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
	|		ДанныеШтрихкодов.Характеристика КАК Характеристика
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК Характеристики
	|
	|СГРУППИРОВАТЬ ПО
	|	Характеристики.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные назначений
Функция ТекстЗапросаВтДанныеНазначений() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Назначения.Идентификатор                    КАК Идентификатор,
	|	МАКСИМУМ(Назначения.Назначение)             КАК Назначение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Назначения.Назначение) КАК КоличествоНазначений
	|ПОМЕСТИТЬ ВтДанныеНазначений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Назначения.Ссылка               КАК Назначение
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Назначения.Наименование = ЗагружаемыеДанные.Назначение
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.Назначение = """"
	|	) КАК Назначения
	|
	|СГРУППИРОВАТЬ ПО
	|	Назначения.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные упаковок
Функция ТекстЗапросаВтДанныеУпаковок()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Упаковки.Идентификатор                  КАК Идентификатор,
	|	МАКСИМУМ(Упаковки.Упаковка)             КАК Упаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковки.Упаковка) КАК КоличествоУпаковки
	|ПОМЕСТИТЬ ВтДанныеУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Наименование = ЗагружаемыеДанные.Упаковка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Упаковка = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Наименование = ЗагружаемыеДанные.Упаковка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.Упаковка = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Код = ЗагружаемыеДанные.КодУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Упаковки.Ссылка                 КАК Упаковка
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Код = ЗагружаемыеДанные.КодУпаковки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ПО ДанныеШтрихкодов.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ГДЕ
	|		ДанныеШтрихкодов.Идентификатор ЕСТЬ NULL
	|		И НЕ ЗагружаемыеДанные.КодУпаковки = """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеШтрихкодов.Идентификатор КАК Идентификатор,
	|		ДанныеШтрихкодов.Упаковка      КАК Упаковка
	|	ИЗ
	|		ВтДанныеШтрихкодов КАК ДанныеШтрихкодов
	|	) КАК Упаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции


// Возвращаемое значение:
//  Строка - Текст запроса вт данные складов
Функция ТекстЗапросаВтДанныеСкладов() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Склады.Идентификатор               КАК Идентификатор,
	|	МАКСИМУМ(Склады.Склад)             КАК Склад,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склады.Склад) КАК КоличествоСкладов
	|ПОМЕСТИТЬ ВтДанныеСкладов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Склады.Ссылка                   КАК Склад
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Склады.Наименование = ЗагружаемыеДанные.Склад
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.Склад = """"
	|	) КАК Склады
	|
	|СГРУППИРОВАТЬ ПО
	|	Склады.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаВтДанныеПартнеров()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Партнеры.Идентификатор                 КАК Идентификатор,
	|	МАКСИМУМ(Партнеры.Партнер)             КАК Партнер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Партнеры.Партнер) КАК КоличествоПартнеров
	|ПОМЕСТИТЬ ВтДанныеПартнеров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Партнеры.Ссылка                 КАК Партнер
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Партнеры.Наименование = ЗагружаемыеДанные.Партнер
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.Партнер = """"
	|	) КАК Партнеры
	|
	|СГРУППИРОВАТЬ ПО
	|	Партнеры.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные соглашений
Функция ТекстЗапросаВтДанныеСоглашений()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Соглашения.Идентификатор                    КАК Идентификатор,
	|	МАКСИМУМ(Соглашения.Соглашение)             КАК Соглашение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Соглашения.Соглашение) КАК КоличествоСоглашений
	|ПОМЕСТИТЬ ВтДанныеСоглашений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		Соглашения.Ссылка               КАК Соглашение
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО Соглашения.Наименование = ЗагружаемыеДанные.Соглашение
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.Соглашение = """"
	|	) КАК Соглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Соглашения.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные виды цен
Функция ТекстЗапросаВтДанныеВидыЦен()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыЦен.Идентификатор                 КАК Идентификатор,
	|	МАКСИМУМ(ВидыЦен.ВидЦены)             КАК ВидЦены,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыЦен.ВидЦены) КАК КоличествоВидовЦен
	|ПОМЕСТИТЬ ВтДанныеВидыЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		ВидыЦен.Ссылка               КАК ВидЦены
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦенПоставщиков КАК ВидыЦен
	|		ПО ВидыЦен.Наименование = ЗагружаемыеДанные.ВидЦены
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &Поставщик КАК Поставщики
	|		ПО &УсловияСоединения
	|		
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.ВидЦены = """"
	|		И (&Партнер = Неопределено ИЛИ ВидыЦен.Владелец = &Партнер)
	|	) КАК ВидыЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЦен.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса вт данные вариантов комплектации
Функция ТекстЗапросаВтДанныеВариантовКомплектации()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВариантыКомплектации.Идентификатор                             КАК Идентификатор,
	|	МАКСИМУМ(ВариантыКомплектации.ВариантКомплектации)             КАК ВариантКомплектации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВариантыКомплектации.ВариантКомплектации) КАК КоличествоВариантовКомплектации
	|ПОМЕСТИТЬ ВтДанныеВариантовКомплектации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		ВариантыКомплектации.Ссылка     КАК ВариантКомплектации
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектации
	|		ПО ВариантыКомплектации.Наименование = ЗагружаемыеДанные.ВариантКомплектации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ЗагружаемыеДанные.Идентификатор = ДанныеНоменклатуры.Идентификатор
	|		И ВариантыКомплектации.Владелец = ДанныеНоменклатуры.Номенклатура
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.ВариантКомплектации = """"
	|	) КАК ВариантыКомплектации
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыКомплектации.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращаемое значение:
//  Строка - Текст запроса загружаемые данные товаров
Функция ТекстЗапросаЗагружаемыеДанныеТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор                          КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеНоменклатуры.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА ДанныеНоменклатуры.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеХарактеристик.КоличествоХарактеристик, 0) = 1
	|			ТОГДА ДанныеХарактеристик.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Характеристика,
	|	&Назначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0) = 1
	|			ТОГДА ДанныеУпаковок.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ                                                    КАК Упаковка,
	|	&Склад,
	|	&Партнер,
	|	&Соглашение,
	|	&ВидЦены,
	|	&ВариантКомплектации,
	|	ЕСТЬNULL(ДанныеНоменклатуры.КоличествоНоменклатуры, 0)   КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(ДанныеХарактеристик.КоличествоХарактеристик, 0) КАК КоличествоХарактеристик,
	|	&КоличествоНазначений,
	|	&КоличествоСкладов,
	|	&КоличествоПартнеров,
	|	&КоличествоСоглашений,
	|	&КоличествоВидовЦен,
	|	&КоличествоВариантовКомплектации,
	|	ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0)           КАК КоличествоУпаковки,
	|	&ЗагружаемыеДанныеКоличествоУпаковок,
	|	&ЗагружаемыеДанныеЦенаСумма,
	|	&ЗагружаемыеДанныеДаты,
	|	&ЗагружаемыеДанныеСрокИсполненияЗаказа,
	|	ЗагружаемыеДанные.Комментарий                            КАК Комментарий
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|	ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеХарактеристик КАК ДанныеХарактеристик
	|	ПО ДанныеХарактеристик.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУпаковок КАК ДанныеУпаковок
	|	ПО ДанныеУпаковок.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

Функция ПолучитьПериодичностьТекстом(Периодичность)
	
	ПериодичностьТекст = "";
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ПериодичностьТекст = "ГОД";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ПериодичностьТекст = "ДЕКАДА";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ПериодичностьТекст = "ДЕНЬ";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ПериодичностьТекст = "КВАРТАЛ";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ПериодичностьТекст = "МЕСЯЦ";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ПериодичностьТекст = "НЕДЕЛЯ";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ПериодичностьТекст = "ПОЛУГОДИЕ";//@Query-part
	КонецЕсли;
	
	Возврат ПериодичностьТекст;
	
КонецФункции

Функция ПолучитьПериодичностьРегистраТекстом(Периодичность)
	
	ПериодичностьТекст = "";
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ПериодичностьТекст = "ПериодГод";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ПериодичностьТекст = "ПериодДекада";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ПериодичностьТекст = "ПериодДень";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ПериодичностьТекст = "ПериодКвартал";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ПериодичностьТекст = "ПериодМесяц";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ПериодичностьТекст = "ПериодНеделя";//@Query-part
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ПериодичностьТекст = "ПериодПолугодие";//@Query-part
	КонецЕсли;
	
	Возврат ПериодичностьТекст;
	
КонецФункции

#КонецОбласти

#КонецОбласти
