#Область ПрограммныйИнтерфейс

// Возвращает описания разделов и хозяйственных операций ввода остатков.
// 
// Параметры:
// 	УчитыватьФО - Булево - Учет функциональных опций при построении таблицы.
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица значений содержащая описание хозяйственных операций ввода остатков:
// * РазделУчета - Строка  - Текстовое представление раздела учета 
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Значение хозяйственной операции ввода остатков
// * ПояснениеРазделаУчета - Строка - Текстовое представление описания хозяйственной операции ввода остатков 
// * ПорядокВДереве        - Число - Иерархия хозяйственной операции в дереве ввода остатков 
// * ДоступностьВвода      - Булево - Разрешает или запрещает ввод документа ввода остатков
// * ДокументВводаОстатков - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор документа ввода остатков
// * ШаблонЗаголовкаДокумента - Строка - Шаблон по которому строится представление документа.
// 
Функция ОписаниеРазделовВводаОстатков(УчитыватьФО = Истина) Экспорт
	
	ОписаниеРазделовВводаОстатков = ИнициализироватьОписаниеРазделовВводаОстатков();
	
#Область ДенежныеСредства
	ОписаниеРаздела = ОписаниеРазделаВводаОстатковДенежныхСредств();
	ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
#КонецОбласти
	
#Область КредитыИДепозиты
	Если УчитыватьФО И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		ОписаниеРаздела = ОписаниеРазделаВводаОстатковКредитовИДепозитов();
		ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
	КонецЕсли;
#КонецОбласти	
	
#Область Эквайринг
	Если УчитыватьФО И ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		ОписаниеРаздела = ОписаниеРазделаВводаОстатковПоЭквайрингу();
		ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
	КонецЕсли;
#КонецОбласти	
	
#Область ПодотчетныеЛица
	ОписаниеРаздела = ОписаниеРазделаВводаОстатковРасчетовСПодотчетниками();
	ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
#КонецОбласти
	
#Область ВзаиморасчетыСПартнерами
	ОписаниеРаздела = ОписаниеРазделаВводаОстатковОстаткиВзаиморасчетовСПартнерами(УчитыватьФО);
	ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
#КонецОбласти	

#Область Товары
	ОписаниеРаздела = ОписаниеРазделаВводаОстатковТоваров();
	ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
#КонецОбласти
	
#Область Прочее
	Если УчитыватьФО И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		ОписаниеРаздела = ОписаниеРазделаВводаОстатковПрочиеРасходы();
		ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
	КонецЕсли;
#КонецОбласти	
	
#Область ОстаткиПрошлыхПериодов
	ОписаниеРаздела = ОписаниеРазделаВводаОстатковРезультатовЗаПрошлыйПериод();
	ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
#КонецОбласти

	
#Область ТМЦВЭксплуатации
	Если УчитыватьФО И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление")
		И Не ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ОписаниеРаздела = ОписаниеРазделаВводаОстатковТМЦВЭксплуатации();
		ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ОписаниеРаздела);
	КонецЕсли;
#КонецОбласти
	
	ВводОстатковЛокализация.ЗаполнитьТаблицуСоответствияРазделаХозяйственнойОперации(ОписаниеРазделовВводаОстатков, УчитыватьФО);
	
	Возврат ОписаниеРазделовВводаОстатков;
	
КонецФункции

// Возвращает массив доступных хозяйственных операций.
// 
// Параметры:
// 	ПараметрыОтбора - Структура - параметры отбора доступных хозяйственных операций, см. ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций.
// Возвращаемое значение:
// 	Массив - Доступные хозяйственных операций.
//
Функция ДоступныеХозяйственныеОперации(ПараметрыОтбора) Экспорт
	
	ЗначенияОтбора = Новый Структура();
	ЗначенияОтбора.Вставить("ДоступностьВвода", Истина);
	
	Если ПараметрыОтбора.Свойство("ДокументВводаОстатков") 
		И ЗначениеЗаполнено(ПараметрыОтбора.ДокументВводаОстатков) Тогда
		ЗначенияОтбора.Вставить("ДокументВводаОстатков", ПараметрыОтбора.ДокументВводаОстатков);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("РазделУчета") 
		И ЗначениеЗаполнено(ПараметрыОтбора.РазделУчета) Тогда
		ЗначенияОтбора.Вставить("РазделУчета", ПараметрыОтбора.РазделУчета);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ДоступностьВвода")
		И ЗначениеЗаполнено(ПараметрыОтбора.ДоступностьВвода) Тогда
		ЗначенияОтбора.Вставить("ДоступностьВвода", ПараметрыОтбора.ДоступностьВвода);
	КонецЕсли;
	
	ХозяйственныеОперацииВводаОстатков = ОписаниеРазделовВводаОстатков();
	ДоступныеХозяйственныеОперации = ХозяйственныеОперацииВводаОстатков.Скопировать(ЗначенияОтбора).ВыгрузитьКолонку("ХозяйственнаяОперация");
	
	Возврат ДоступныеХозяйственныеОперации;
	
КонецФункции

// Возвращает идентификатор документа ввода остатков.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция ввода начальных остатков.
// Возвращаемое значение:
// 	СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор документа ввода остатков.
//
Функция ОпределитьДокументПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	ТипДокументаВводаНачальныхОстатков = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	
	СоответствиеДокументаХозяйственнойОперации = ОписаниеРазделовВводаОстатков();
	НайденноеСоответствие                                               = СоответствиеДокументаХозяйственнойОперации.Найти(ХозяйственнаяОперация, "ХозяйственнаяОперация");
	
	Если НайденноеСоответствие <> Неопределено Тогда
		ТипДокументаВводаНачальныхОстатков = НайденноеСоответствие.ДокументВводаОстатков;
	КонецЕсли;
	
	Возврат ТипДокументаВводаНачальныхОстатков;
	
КонецФункции

// Возвращает синоним документа определенного по хозяйственной операции.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для которой определяется документ и синоним документа
// Возвращаемое значение:
// 	Строка - Синоним документа.
//
Функция ИмяДокументаПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	ИмяДокумента = "";	
	ТипДокумента = ОпределитьДокументПоХозяйственнойОперации(ХозяйственнаяОперация);
	
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		ИмяДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипДокумента, "ПолноеИмя");
	КонецЕсли;
	
	Возврат ИмяДокумента;
	
КонецФункции

// Добавляет описание раздела ввода остатков данными заполнения.
// 
// Параметры:
// 	ОписаниеРазделовВводаОстатков - ТаблицаЗначений - Таблица значений инициализированная в процедуре ИнициализироватьОписаниеРазделовВводаОстатков 
// 	ДанныеЗаполнения              - Структура - Структура данных заполнения, инициализированная в процедуре ИнициализироватьОписаниеРазделаУчета
//
Процедура ДобавитьОписаниеРазделаВводаОстатков(ОписаниеРазделовВводаОстатков, ДанныеЗаполнения) Экспорт
	
	Для Каждого ОписаниеХозяйственнойОперации Из ДанныеЗаполнения.ХозяйственныеОперации Цикл
		
		НоваяСтрока = ОписаниеРазделовВводаОстатков.Добавить();
		НоваяСтрока.РазделУчета                         = ДанныеЗаполнения.РазделУчета;
		НоваяСтрока.ХозяйственнаяОперация               = ОписаниеХозяйственнойОперации.ХозяйственнаяОперация;
		НоваяСтрока.ДокументВводаОстатков               = ОписаниеХозяйственнойОперации.ДокументВводаОстатков;
		НоваяСтрока.ШаблонЗаголовкаДокумента            = ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента;
		НоваяСтрока.ПояснениеРазделаУчета               = ДанныеЗаполнения.ПояснениеРазделаУчета;
		НоваяСтрока.ПорядокВДереве                      = ДанныеЗаполнения.ПорядокВДереве;
		НоваяСтрока.ПорядокВДеревеХозОперации           = ОписаниеХозяйственнойОперации.ПорядокВДереве;
		НоваяСтрока.ДоступностьВвода                    = ДанныеЗаполнения.ДоступностьВвода;
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру описания раздела учета ввода остатков.
// 
// Возвращаемое значение:
// 	Структура - Структура содержащая описание раздела учета ввода остатков:
//       *  ДоступностьВвода - Булево - Определят возможность ввод документа ввода остатков
//       * ПорядокВДереве - Число - Иерархия хозяйственной операции в дереве журнала ввода остатков
//       * ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция ввода остатков 
//       * ПояснениеРазделаУчета - Строка - Пояснение раздела учета ввода остатков.
//
Функция ИнициализироватьОписаниеРазделаУчета() Экспорт
	
	ОписаниеРаздела = Новый Структура();
	ОписаниеРаздела.Вставить("РазделУчета",           "");
	ОписаниеРаздела.Вставить("ПояснениеРазделаУчета", "");
	ОписаниеРаздела.Вставить("ХозяйственныеОперации", ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков());
	ОписаниеРаздела.Вставить("ПорядокВДереве",        0);
	ОписаниеРаздела.Вставить("ДоступностьВвода",      Истина);
	
	Возврат ОписаниеРаздела;
	
КонецФункции

// Значения реквизитов для заполнения документа ввода остатков.
// 
// Возвращаемое значение:
// 	Структура - Структура содержащая имена реквизитов документа ввода остатков и значения их заполнения:
//       * Комментарий                                - Строка - Комментарий, который будет установлен создаваемого документа
//       * ДатаДокумента                             - Дата - Дата, которая будет установлена создаваемому документу
//       * ОтражатьВУУ                                - Булево - Признак отражения в управленческом учете
//       * ОтражатьВБУиНУ - Булево        - Признак отражения в регламентированном и налоговом учете
//       * ОтражатьВОперативномУчете - Булево - Признак отражения в оперативном учете
//       * Организация                                 - СправочникСсылка.Организации - Организация, для которой вводится остатки
//       * ХозяйственнаяОперация            - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция ввода остатков.
//
Функция ИнициализироватьЗначенияЗаполненияДокументаВводОстатков() Экспорт
	
	ОтражатьВУУ = Ложь;
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация",     Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ОтражатьВОперативномУчете", Ложь);
	ЗначенияЗаполнения.Вставить("ОтражатьВБУиНУ",            ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	ЗначенияЗаполнения.Вставить("ОтражатьВУУ",               ОтражатьВУУ);
	ЗначенияЗаполнения.Вставить("Дата",                      Дата(1, 1, 1, 0, 0, 0));
	ЗначенияЗаполнения.Вставить("Комментарий",               "");
	ЗначенияЗаполнения.Вставить("Ответственный",             Справочники.Пользователи.ПустаяСсылка());
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

// Инициализирует структуру описания хозяйственной операции ввода остатков.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
//       * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция ввода остатков
//       * ШаблонЗаголовкаДокумента - Строка - Шаблон заголовка документа ввода остатков
//       * ДокументВводаОстатков - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор документа ввода остатков.
//       * ПорядокВДереве - Число - Порядок для сортировки
Функция ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков() Экспорт
	
	ОписаниеХозяйственнойОперацииВводаОстатков = Новый ТаблицаЗначений();
	ОписаниеХозяйственнойОперацииВводаОстатков.Колонки.Добавить("ХозяйственнаяОперация",               Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"), НСтр("ru = 'Хозяйственная операция'"));
	ОписаниеХозяйственнойОперацииВводаОстатков.Колонки.Добавить("ШаблонЗаголовкаДокумента",            ОбщегоНазначения.ОписаниеТипаСтрока(250), НСтр("ru = 'Шаблон заголовка документа'"));
	ОписаниеХозяйственнойОперацииВводаОстатков.Колонки.Добавить("ДокументВводаОстатков",               Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ОписаниеХозяйственнойОперацииВводаОстатков.Колонки.Добавить("ПорядокВДереве",                      ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	
	Возврат ОписаниеХозяйственнойОперацииВводаОстатков;
	
КонецФункции

// Параметры для отбора доступных хозяйственных операций.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//        * РазделУчета - Строка - Раздел учета ввода начальных остатков
//        * ДокументВводаОстатков - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор документа ввода остатков.
//        * ДоступностьВвода - Строка - Доступность ввода
//
Функция ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций() Экспорт
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ДокументВводаОстатков", Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
	ПараметрыОтбора.Вставить("РазделУчета",           "");
	ПараметрыОтбора.Вставить("ДоступностьВвода",      "");
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Процедура по данным оперативного учета формирует документы ввода остатков отражаемые в регламентированном учете.
// 
// Параметры:
// 	Параметры - Структура - Структура, содержащая параметры создания новых документов
// 	АдресХранилища - Строка - Адрес временного хранилища, в который помещается массив созданных документов.
//
Процедура СформироватьДокументыВводаОстатковПоДаннымОперативногоУчета(Параметры, АдресХранилища) Экспорт
	
	ДатаВвода                       = Неопределено;
	ОтражатьВБУиНУ                  = Ложь;
	ОтражатьВУУ                     = Ложь;
	СозданныеДокументыВводаОстатков = Новый Массив;
	
	Если Параметры.Свойство("ДатаВвода") Тогда
		ДатаВвода = Параметры.ДатаВвода;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВвода) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтражатьВБУиНУ") Тогда
		ОтражатьВБУиНУ = Параметры.ОтражатьВБУиНУ;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтражатьВУУ") Тогда
		ОтражатьВУУ = Параметры.ОтражатьВУУ;
	КонецЕсли;
	
	Если Не ОтражатьВБУиНУ И Не ОтражатьВУУ Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполненияОстатков = Новый Структура;
	ПараметрыЗаполненияОстатков.Вставить("ОтражатьВБУиНУ", ОтражатьВБУиНУ);
	ПараметрыЗаполненияОстатков.Вставить("ОтражатьВУУ", ОтражатьВУУ);
	
	Если Параметры.Свойство("МассивХозяйственныхОпераций") Тогда
		ДоступныеХозяйственныеОперации = Параметры.МассивХозяйственныхОпераций;
	Иначе
		ПараметрыОтбораХозяйственныхОпераций = ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций();
		ДоступныеХозяйственныеОперации       = ДоступныеХозяйственныеОперации(ПараметрыОтбораХозяйственныхОпераций);
	КонецЕсли;
	
	Организации = Новый Массив;
	
	Если Не Параметры.Свойство("Организации", Организации) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|	И (&Организации = НЕОПРЕДЕЛЕНО
			|			ИЛИ Организации.Ссылка В (&Организации))
			|	И (Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
			|			ИЛИ &УчитыватьУпрОрганизацию)
			|	И Организации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует)
			|");
		
		Запрос.УстановитьПараметр("Организации",                            Организации);
		Запрос.УстановитьПараметр("УчитыватьУпрОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
		
		Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		
	КонецЕсли;

	НомерПоПорядку = 0;
	ВсегоОбъектов  = ДоступныеХозяйственныеОперации.Количество();
	
	Для Каждого ХозяйственнаяОперация Из ДоступныеХозяйственныеОперации Цикл
		
		НомерПоПорядку    = НомерПоПорядку + 1;
		ПроцентВыполнения = Окр(100 * НомерПоПорядку / ВсегоОбъектов);
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
		
		ДокументВводаОстатков                      = ОпределитьДокументПоХозяйственнойОперации(ХозяйственнаяОперация);
		ДокументОтражаетсяВРегламентированномУчете = ДокументОтражаетсяВРегламентированномУчете(ДокументВводаОстатков);
		ДокументПоддерживаетЗаполнениеПоДаннымОУ   = ДокументПоддерживаетЗаполнениеПоДаннымОУ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВводаОстатков, "Имя"));
		
		Если Не ДокументОтражаетсяВРегламентированномУчете ИЛИ Не ДокументПоддерживаетЗаполнениеПоДаннымОУ Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерДокумента              = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ДокументВводаОстатков).ПолноеИмя());
		ОстаткиПоХозяйственнойОперации = МенеджерДокумента.ОстаткиПоТипуОперации(ДатаВвода, ХозяйственнаяОперация, Организации,, ПараметрыЗаполненияОстатков);
		ПоляСравнения                  = МенеджерДокумента.КлючевыеПоляРеглУчетаПоТипуОперации(ХозяйственнаяОперация);
		
		Если ОстаткиПоХозяйственнойОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументВводаНачальныхОстатков = Неопределено; // ДокументОбъект
		
		Для Каждого СтрокаТаблицы Из ОстаткиПоХозяйственнойОперации Цикл
			
			Если КлючевыеПоляОтличаются(ДокументВводаНачальныхОстатков, СтрокаТаблицы, ПоляСравнения) Тогда
				
				Если Не ДокументВводаНачальныхОстатков = Неопределено Тогда
					ДокументВводаНачальныхОстатков.Записать(РежимЗаписиДокумента.Запись);
					СозданныеДокументыВводаОстатков.Добавить(ДокументВводаНачальныхОстатков.Ссылка);
				КонецЕсли;
				
				ДокументВводаНачальныхОстатков = МенеджерДокумента.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокументВводаНачальныхОстатков, СтрокаТаблицы);
				
				ДанныеЗаполнения = ИнициализироватьЗначенияЗаполненияДокументаВводОстатков();
				ДанныеЗаполнения.Дата           = ДатаВвода;
				ДанныеЗаполнения.Ответственный  = Пользователи.ТекущийПользователь();
				ДанныеЗаполнения.ОтражатьВБУиНУ = ОтражатьВБУиНУ;
				ДанныеЗаполнения.ОтражатьВУУ    = ОтражатьВУУ;
				ДанныеЗаполнения.Комментарий    = НСтр("ru = '#Ввод остатков по данным оперативного учета.'");
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументВводаНачальныхОстатков, "ХозяйственнаяОперация") Тогда
					ЗаполнитьЗначенияСвойств(ДокументВводаНачальныхОстатков, ДанныеЗаполнения, , "ХозяйственнаяОперация, Организация");
				Иначе
					ЗаполнитьЗначенияСвойств(ДокументВводаНачальныхОстатков, ДанныеЗаполнения, , "Организация");
				КонецЕсли;
				
				ТабличнаяЧастьДокумента   = СтрокаТаблицы.ЗаполняемаяТабличнаяЧасть;
				ЗаполняемаяТабличнаяЧасть = ДокументВводаНачальныхОстатков[ТабличнаяЧастьДокумента]; //ТабличнаяЧасть
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ЗаполняемаяТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			
		КонецЦикла;
		
		Если Не ДокументВводаНачальныхОстатков = Неопределено Тогда
			ДокументВводаНачальныхОстатков.Записать(РежимЗаписиДокумента.Запись);
			СозданныеДокументыВводаОстатков.Добавить(ДокументВводаНачальныхОстатков.Ссылка);
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументыВводаОстатков, АдресХранилища);
	
КонецПроцедуры

// Возвращает доступные типы документов ввода остатков
// 
// Возвращаемое значение:
// 	Массив - Доступные типы документов ввода остатков
//
Функция ДоступныеТипыВводаОстатков() Экспорт
	Возврат ВводОстатковСерверПовтИсп.ДоступныеТипыВводаОстатков();
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет данные нового документа ввод остатков на основании данных старого документа ввод остатков
// 
// Параметры:
// 	Приемник - ДокументОбъект - Новый документ ввода остатков 
// 	Источник - ДокументОбъект.ВводОстатков - Старый документ ввода остатков
//
Процедура ЗаполнитьЗначенияПоСтаромуВводуОстатков(Приемник, Источник) Экспорт
	
	ИсключаемыеСвойства = "Номер, Дата, Проведен, ПометкаУдаления";
	ЗаполнитьЗначенияСвойств(Приемник, Источник, , ИсключаемыеСвойства);
	
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.ВводОстатков.ТабличныеЧасти Цикл
		
		Если Не Приемник.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧасть.Имя) = Неопределено Тогда 
			Приемник[ТабличнаяЧасть.Имя].Загрузить(Источник[ТабличнаяЧасть.Имя].Выгрузить()); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры необходимые для копирования старого документа ввода остатков в новый
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция, на основании которой получается имя нового документа ввода остатков товаров
// 	
// Возвращаемое значение:
// 	Структура - Описание:
//       * НовыйДокументВводаОстатковСтрокой - Строка - полное имя идентификатора объекта метаданных
//       * ХозяйственныеОперацииВводаОстатковТоваров - Массив - хозяйственные операции остатков товаров
//       * ХозяйственныеОперацииДоступныеДляВвода - Массив - хозяйственные операции разрешенные для ввода остатков
//
Функция ПолучитьПараметрыКопированияДокумента(ХозяйственнаяОперация) Экспорт
	
	ПараметрыКопирования = ИнициализироватьПараметрыКопирования();
	
	НовыйДокументВводаОстатковСтрокой = ИмяДокументаПоХозяйственнойОперации(ХозяйственнаяОперация);
	
	ПараметрыОтбора                  = ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций();
	ПараметрыОтбора.ДоступностьВвода = Истина;
	ДоступныеХозяйственныеОперации   = ДоступныеХозяйственныеОперации(ПараметрыОтбора);
	
	ПараметрыОтбора                       = ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций();
	ПараметрыОтбора.ДокументВводаОстатков = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Документы.ВводОстатковТоваров);
	ХозОперацииВводаОстатковТоваров       = ДоступныеХозяйственныеОперации(ПараметрыОтбора);
	
	ПараметрыКопирования.ХозяйственныеОперацииДоступныеДляВвода    = ДоступныеХозяйственныеОперации;
	ПараметрыКопирования.ХозяйственныеОперацииВводаОстатковТоваров = ХозОперацииВводаОстатковТоваров;
	ПараметрыКопирования.НовыйДокументВводаОстатковСтрокой         = НовыйДокументВводаОстатковСтрокой;
	
	Возврат ПараметрыКопирования;
КонецФункции

// Возвращает наименование формы ввода остатков о продажах за прошлые периоды
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция, форму которой необходимо получить
// Возвращаемое значение:
// 	Строка - Имя формы ввода остатков о продажах за прошлые периоды
Функция ПолучениеФормыВводаОстатковОПродажахЗаПрошлыеПериоды(ХозяйственнаяОперация) Экспорт
	
	СоответствиеТиповОперацийФормам = Новый Соответствие;
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды"),
		"ФормаФинансовыйРезультат");
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды"),
		"ФормаОптовыеПродажи");
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды"),
		"ФормаРозничныеПродажи");
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПодарочныхСертификатов"),
		"ФормаПодарочныеСертификаты");
	
	Возврат СоответствиеТиповОперацийФормам[ХозяйственнаяОперация];
	
КонецФункции

// Возвращает доступные типы документов ввода остатков
// 
// Возвращаемое значение:
// 	Массив - Доступные типы ввода остатков
//
Функция ПодготовитьДоступныеТипыДокументов() Экспорт
	
	ДоступныеТипы = Новый Массив();
	РазделыВводаОстатков = ОписаниеРазделовВводаОстатков();
	РазделыВводаОстатков.Свернуть("ДокументВводаОстатков");
	
	Для Каждого СтрокаРазделаВводаОстатков Из РазделыВводаОстатков Цикл
		ВводаОстатковПустаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаРазделаВводаОстатков.ДокументВводаОстатков, "ЗначениеПустойСсылки");
		ДоступныеТипы.Добавить(ТипЗнч(ВводаОстатковПустаяСсылка));
	КонецЦикла;
	
	Возврат ДоступныеТипы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьПараметрыКопирования()
	
	ПараметрыКопирования = Новый Структура();
	ПараметрыКопирования.Вставить("ХозяйственныеОперацииДоступныеДляВвода",    Новый Массив());
	ПараметрыКопирования.Вставить("ХозяйственныеОперацииВводаОстатковТоваров", Новый Массив());
	ПараметрыКопирования.Вставить("НовыйДокументВводаОстатковСтрокой",         "");
	
	Возврат ПараметрыКопирования;
	
КонецФункции

Функция ИнициализироватьОписаниеРазделовВводаОстатков()
	
	ОписаниеРазделовВводаОстатков = Новый ТаблицаЗначений();
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("РазделУчета",               ОбщегоНазначения.ОписаниеТипаСтрока(30), НСтр("ru = 'Раздел учета'"));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ХозяйственнаяОперация",     Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"), НСтр("ru = 'Хозяйственная операция'"));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ПояснениеРазделаУчета",     ОбщегоНазначения.ОписаниеТипаСтрока(250), НСтр("ru = 'Пояснение раздела учета'"));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ПорядокВДереве",            ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ПорядокВДеревеХозОперации", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ДоступностьВвода",          Новый ОписаниеТипов("Булево"));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ДокументВводаОстатков",     Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ОписаниеРазделовВводаОстатков.Колонки.Добавить("ШаблонЗаголовкаДокумента",  ОбщегоНазначения.ОписаниеТипаСтрока(250), НСтр("ru = 'Шаблон заголовка документа'"));
	
	Возврат ОписаниеРазделовВводаОстатков;
	
КонецФункции

Функция КлючевыеПоляОтличаются(ДокументВводаНачальныхОстатков, ВыборкаОстатков, МассивПолейСравнения)
	
	Если ДокументВводаНачальныхОстатков = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПолеСравнения Из МассивПолейСравнения Цикл
		Если Не ДокументВводаНачальныхОстатков[ПолеСравнения] = ВыборкаОстатков[ПолеСравнения] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДокументОтражаетсяВРегламентированномУчете(ДокументВводаНачальныхОстатков)
	
	ОтражаетсяВРегламентированномУчете = Истина; 
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ДокументВводаНачальныхОстатков).ПолноеИмя());
	УчетныеМеханизмы  = ПроведениеДокументов.УчетныеМеханизмыДокумента(МенеджерДокумента);
	ИндексЗначения    = УчетныеМеханизмы.Найти("РегламентированныйУчет");
	
	Если ИндексЗначения = Неопределено Тогда
		ОтражаетсяВРегламентированномУчете = Ложь;
	КонецЕсли;
	
	Возврат ОтражаетсяВРегламентированномУчете;
	
КонецФункции

Функция ДокументПоддерживаетЗаполнениеПоДаннымОУ(ИмяДокументаВводаНачальныхОстатков)
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить("ВводОстатков");
	МассивДокументов.Добавить("ВводОстатковВзаиморасчетов");
	МассивДокументов.Добавить("ВводОстатковВзаиморасчетовПоАренде");
	МассивДокументов.Добавить("ВводОстатковВнеоборотныхАктивов2_4");
	МассивДокументов.Добавить("ВводОстатковУзловКомпонентовАмортизации");
	МассивДокументов.Добавить("ВводОстатковДенежныхСредств");
	МассивДокументов.Добавить("ВводОстатковПоФинансовымИнструментам");
	МассивДокументов.Добавить("ВводОстатковПрочиеРасходы");
	МассивДокументов.Добавить("ВводОстатковСПодотчетниками");
	МассивДокументов.Добавить("ВводОстатковТоваров");
	
	Возврат МассивДокументов.Найти(ИмяДокументаВводаНачальныхОстатков) <> Неопределено;
	
КонецФункции

#Область ОписаниеРазделовВводаОстатков

Функция ОписаниеРазделаВводаОстатковДенежныхСредств()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Денежные средства'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки наличных и безналичных денежных средств организаций'");
	ОписаниеРаздела.ПорядокВДереве        = 1;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств()
	
	ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков                        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковДенежныхСредств);
	ИспользуетсяНесколькоКасс                                 = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ИспользуетсяНесколькоСчетов                               = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	
	Если ИспользуетсяНесколькоСчетов Тогда
		ШаблонЗаголовка = НСтр("ru = 'Ввод начальных остатков на банковских счетах %1'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Ввод начальных остатков на банковском счете %1'");
	КонецЕсли;
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков    = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента = ШаблонЗаголовка;
	ОписаниеХозяйственнойОперации.ПорядокВДереве           = 4;
	
	Если ИспользуетсяНесколькоКасс Тогда
		ШаблонЗаголовка = НСтр("ru = 'Ввод начальных остатков в кассах %1'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Ввод начальных остатков в кассе %1'");
	КонецЕсли;
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = ШаблонЗаголовка;
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 3;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = ШаблонЗаголовка;
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
		
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = ШаблонЗаголовка;
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 2;
		
	КонецЕсли;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковДенежныхСредств;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковКредитовИДепозитов()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Кредиты и депозиты'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки действующих кредитов и депозитов организаций'");
	ОписаниеРаздела.ПорядокВДереве        = 2;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковКредитовИДепозитов();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковКредитовИДепозитов()
	
	ОписаниеХозяйственныхОперацийВводаОстатковКредитовИДепозитов = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков                           = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковПоФинансовымИнструментам);
	ШаблонЗаголовка = НСтр("ru = 'Ввод начальных остатков расчетов по кредитам, депозитам и выданным займам %1'");
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковКредитовИДепозитов.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПоДоговорамКредитовИДепозитов;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = ШаблонЗаголовка;
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковКредитовИДепозитов;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковПоЭквайрингу()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Эквайринг'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки по операциям эквайринга организаций'");
	ОписаниеРаздела.ПорядокВДереве        = 3;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковПоЭквайрингу();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковПоЭквайрингу()
	
	ОписаниеХозяйственныхОперацийВводаОстатковПоЭквайрингу = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков                     = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу);
	ШаблонЗаголовка = НСтр("ru = 'Ввод остатков денежных средств к поступлению от эквайера %1'");
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковПоЭквайрингу.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = ШаблонЗаголовка;
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
		
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковПоЭквайрингу;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковРасчетовСПодотчетниками()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Подотчетные лица'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки по взаиморасчетов с подотчетными лицами'");
	ОписаниеРаздела.ПорядокВДереве        = 4;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковРасчетовСПодотчетниками();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковРасчетовСПодотчетниками()
	
	ОписаниеХозяйственныхОперацийВводаОстатковРасчетовСПодотчетниками = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков                                = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковСПодотчетниками);
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковРасчетовСПодотчетниками.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПодотчетников;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков задолженности подотчетных лиц %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
		
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковРасчетовСПодотчетниками.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПерерасходовПодотчетныхСредств;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков перерасходов подотчетных средств %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 2;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковРасчетовСПодотчетниками;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковОстаткиВзаиморасчетовСПартнерами(УчитыватьФО)
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Расчеты с партнерами'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки взаиморасчетов между организациями и партнерами компании (клиентами и поставщиками)'");
	ОписаниеРаздела.ПорядокВДереве        = 5;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами(УчитыватьФО);
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами(УчитыватьФО)
	
	ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков                                  = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковВзаиморасчетов);
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков задолженности клиентов %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 3;
		
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков авансов, полученных от клиентов %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков задолженности перед поставщиками %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 4;
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков авансов, выданных поставщикам %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 2;	
	
	Если УчитыватьФО Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРетроБонусыКлиентов") Тогда
			
			ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами.Добавить();
			ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПремийКлиентам;
			ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
			ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков задолженности по премиям клиентам %1'");
			ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 5;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковВзаиморасчетовСПартнерами;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковТоваров()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Товары'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки товаров организаций'");
	ОписаниеРаздела.ПорядокВДереве        = 6;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковТоваров()
	
	ОписаниеХозяйственныхОперацийВводаОстатковТоваров = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	
	ИмяДокументаВводаНачальныхОстатков = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковТоваров);
	
	//++ Локализация
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(ТекущаяДатаСеанса()) Тогда
		ИмяДокументаВводаНачальныхОстатков = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатков);
	КонецЕсли;
	//-- Локализация
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков собственных товаров %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 11;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков полученных на комиссию товаров %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 12;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах")
		И ПолучитьФункциональнуюОпцию("ИспользуетсяКомиссионнаяПродажа20") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		Постфикс = КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии20();
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ввод остатков товаров, переданных на комиссию %1 %2'"),
			Постфикс, "%1");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 13;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию2_5;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКомиссионнаяПродажа20")
			Или ПолучитьФункциональнуюОпцию("ТолькоКомиссионныеПродажи25") Тогда
			Постфикс = "";
		Иначе
			Постфикс = КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25();
		КонецЕсли;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ввод остатков товаров, переданных на комиссию %1 %2'"),
			Постфикс, "%1");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 14;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранениеВПроцессеЗакупки") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПринятыхНаОтветственноеХранение;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков принятых на хранение товаров %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 15;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаОтветственноеХранение;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков переданных на хранение товаров %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 16;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПереданнойКлиентам;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков переданной клиентам возвратной тары %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
	
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков принятой от поставщиков возвратной тары %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 2;
			
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаИспользованиеАдресногоХраненияОстатков;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Переход на использование адресного хранения остатков %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 8;
	КонецЕсли;
	
	Если (ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке")
		И ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении")
		И ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач")) Тогда
		
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаИспользованиеСкладскихПомещений;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Переход на использование складских помещений %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 9;
	КонецЕсли;
	
	
	
	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство")
		И Не ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТоваров.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация    = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков    = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента = НСтр("ru = 'Ввод начальных остатков переданных в производство материалов %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве           = 3;
	КонецЕсли;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковТоваров;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковПрочиеРасходы()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Прочее'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки по прочим операциям'");
	ОписаниеРаздела.ПорядокВДереве        = 8;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковПрочихРасходов();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковПрочихРасходов()
	
	ОписаниеХозяйственныхОперацийВводаОстатковПрочихРасходов = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковПрочихРасходов.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПрочихАктивовПассивов;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковПрочихАктивовПассивов);
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков прочих активов и пассивов %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковПрочихРасходов.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПрочихРасходов;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковПрочиеРасходы);
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков прочих расходов %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 2;
	КонецЕсли;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковПрочихРасходов;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковРезультатовЗаПрошлыйПериод()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета           = НСтр("ru='Результаты прошлых периодов'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся результаты (обороты) прошлых периодов'");
	ОписаниеРаздела.ПорядокВДереве        = 11;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод()
	
	ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков                                   = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды);
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Оптовые продажи за прошлые периоды %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 1;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Розничные продажи за прошлые периоды %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 3;
	КонецЕсли;
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков     = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента  = НСтр("ru = 'Финансовый результат за прошлые периоды %1'");
	ОписаниеХозяйственнойОперации.ПорядокВДереве            = 4;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод.Добавить();
		ОписаниеХозяйственнойОперации.ХозяйственнаяОперация               = Перечисления.ХозяйственныеОперации.ВводОстатковПодарочныхСертификатов;
		ОписаниеХозяйственнойОперации.ДокументВводаОстатков               = ИмяДокументаВводаНачальныхОстатков;
		ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента            = НСтр("ru = 'Ввод начальных остатков подарочных сертификатов %1'");
		ОписаниеХозяйственнойОперации.ПорядокВДереве                      = 2;
	КонецЕсли;
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковРезультатовЗаПрошлыйПериод;
	
КонецФункции

Функция ОписаниеРазделаВводаОстатковТМЦВЭксплуатации()
	
	ОписаниеРаздела = ИнициализироватьОписаниеРазделаУчета();
	
	ОписаниеРаздела.РазделУчета = НСтр("ru='ТМЦ в эксплуатации'");
	ОписаниеРаздела.ПояснениеРазделаУчета = НСтр("ru='Вводятся остатки ТМЦ в эксплуатации'");
	ОписаниеРаздела.ПорядокВДереве = 9;
	ОписаниеРаздела.ХозяйственныеОперации = ОписаниеХозяйственныхОперацийВводаОстатковТМЦВЭксплуатации();
	
	Возврат ОписаниеРаздела;
	
КонецФункции

Функция ОписаниеХозяйственныхОперацийВводаОстатковТМЦВЭксплуатации()
	
	ОписаниеХозяйственныхОперацийВводаОстатковТМЦВЭксплуатации = ИнициализироватьОписаниеХозяйственнойОперацииВводаОстатков();
	ИмяДокументаВводаНачальныхОстатков = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковТМЦВЭксплуатации);
	
	ОписаниеХозяйственнойОперации = ОписаниеХозяйственныхОперацийВводаОстатковТМЦВЭксплуатации.Добавить();
	ОписаниеХозяйственнойОперации.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТМЦВЭксплуатации;
	ОписаниеХозяйственнойОперации.ДокументВводаОстатков = ИмяДокументаВводаНачальныхОстатков;
	ОписаниеХозяйственнойОперации.ШаблонЗаголовкаДокумента = НСтр("ru = 'Ввод начальных остатков ТМЦ в эксплуатации %1'");
	
	Возврат ОписаниеХозяйственныхОперацийВводаОстатковТМЦВЭксплуатации;
	
КонецФункции


#КонецОбласти

#КонецОбласти
