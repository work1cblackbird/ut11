
////////////////////////////////////////////////////////////////////////////////
// Модуль "РасхожденияКлиент" содержит клиентские процедуры и функции для 
// работы документов отражения расхождений после отгрузки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ФормыСпискаИВыбора

Функция ПараметрыОтбораСпискаДокументовАктаОРасхожденияхПослеОтгрузки() Экспорт
	
	Массив = Новый Массив();
	Массив.Добавить("Валюта");
	Массив.Добавить("Организация");
	Массив.Добавить("Партнер");
	Массив.Добавить("Контрагент");
	
	Возврат Массив;
	
КонецФункции

Функция ПараметрыОтбораСпискаДокументовАктаОРасхожденияхПослеПеремещения() Экспорт
	
	Массив = Новый Массив();
	Массив.Добавить("Организация");
	Массив.Добавить("ОрганизацияПолучатель");
	Массив.Добавить("СкладОтправитель");
	Массив.Добавить("СкладПолучатель");
	
	Возврат Массив;
	
КонецФункции

// Параметры:
// 	Форма							 - ФормаКлиентскогоПриложения - Форма клиентского приложения, содержит в том числе:
// 		* Список - ДинамическийСписок - Динамический список на форме
// 	Элемент							 - ТаблицаФормы - Таблица формы
// 	Отказ							 - Булево - Признак отказа от добавления объекта
// 	Копирование						 - Булево - Определяет режим копирования
// 	ЭтоАктРасхожденийПослеОтгрузки	 - Булево - Определяет тип документа.
// 
Процедура АктОРасхожденияхСписокПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, ЭтоАктРасхожденийПослеОтгрузки) Экспорт

	Отказ = Истина;
	
	Если ЭтоАктРасхожденийПослеОтгрузки Тогда
		ТипАктПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг");
		Если ПользователиКлиент.ЭтоСеансВнешнегоПользователя() Тогда
			ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаДокументаСамообслуживание";
		Иначе
			ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаДокумента";
		КонецЕсли;
	Иначе
		ТипАктПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг");
		ИмяОткрываемойФормы = "Документ.АктОРасхожденияхПослеПриемки.Форма.ФормаДокумента";
	КонецЕсли;
	
	ПараметрыОтбора = ПараметрыОтбораСпискаДокументовАктаОРасхожденияхПослеОтгрузки();
	ПараметрыФормы = АктОРасхожденияхСписокПодготовитьПараметрыЗаполнения(Элемент.ТекущаяСтрока, 
		Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, ПараметрыОтбора, Копирование);
		
	Если Не Копирование Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ТипОснованияАктаОРасхождении",
			?(ЗначениеЗаполнено(Форма.ТипОснованияАктаОРасхождении),
				Форма.ТипОснованияАктаОРасхождении,
				ТипАктПоУмолчанию));
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, Форма.Элементы.Список, Форма);
	
КонецПроцедуры

// Возвращает данные для заполнения формы нового документа АктОРасхождениях
//
// Параметры:
//  ТекущаяСтрока				 - ДокументСсылка.АктОРасхожденияхПослеОтгрузки, ДокументСсылка.АктОРасхожденияхПослеПеремещения - 
//  ПользовательскиеНастройки	 - КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных - Настройки формы списка документов
//  ПараметрыОтбора				 - Массив - Массив строк с именами ключевых полей шапки документа
//  Копирование					 - Булево - Определяет режим копирования
// 
// Возвращаемое значение:
//   Структура - 
//
Функция АктОРасхожденияхСписокПодготовитьПараметрыЗаполнения(ТекущаяСтрока, ПользовательскиеНастройки, ПараметрыОтбора, Копирование) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование И ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущаяСтрока);
	Иначе
		
		ОтборПользовательскихНастроек = Неопределено;
		
		Для Каждого ЭлементНастроек Из ПользовательскиеНастройки Цикл
			Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
				ОтборПользовательскихНастроек = ЭлементНастроек;
			КонецЕсли;
		КонецЦикла;
		
		ЗначенияЗаполнения = Новый Структура;
		
		Если ОтборПользовательскихНастроек <> Неопределено Тогда
			
			Для Каждого ЭлементОтбора Из ОтборПользовательскихНастроек.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
					И ЭлементОтбора.Использование = Истина
					И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					И ПараметрыОтбора.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
					
						ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ШапкаАктовОРасхождениях

Процедура ДокументыОснованиеПредставлениеНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если Форма.ДокументыОснования.Количество() = 1 Тогда
		ПоказатьЗначение(, Форма.ДокументыОснования[0].Реализация);
	ИначеЕсли Форма.ДокументыОснования.Количество() > 1 Тогда
		
		СписокДокументов = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из Форма.ДокументыОснования Цикл
			СписокДокументов.Добавить(СтрокаТаблицы.Реализация); 
		КонецЦикла;
		
		Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Реализации товаров и услуг (%КоличествоДокументов%)'");
		ИначеЕсли Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента") Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Возвраты товаров от клиента (%КоличествоДокументов%)'");
		ИначеЕсли Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг") Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Приобретения товаров и услуг (%КоличествоДокументов%)'");
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Передачи товаров хранителю (%КоличествоДокументов%)'");
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Поступления товаров от хранителя (%КоличествоДокументов%)'");
		ИначеЕсли Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение") Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Приемки товаров на хранение (%КоличествоДокументов%)'");
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Возвраты поставщику (%КоличествоДокументов%)'");
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияВозвратОтКомиссионера(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Поступления товаров от комиссионера (%КоличествоДокументов%)'");
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			ЗаголовокФормыПросмотра = НСтр("ru='Передачи товаров комиссионеру (%КоличествоДокументов%)'");
		Иначе
			ЗаголовокФормыПросмотра = НСтр("ru='Отгрузки товаров с хранения (%КоличествоДокументов%)'");
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура("СписокДокументов, Заголовок", СписокДокументов, ЗаголовокФормыПросмотра);
		
		ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыОткрытия, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма
Процедура ИзменитьДокументыОснования(Форма) Экспорт
	
	ПараметрыФормы = СамообслуживаниеКлиент.СтруктураПараметровФормыВыбораОснований();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Форма.Объект);
	Если Не Форма.ИспользоватьДоговорыСКлиентами 
		И (РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента")) Тогда
		
		ПараметрыФормы.УказаниеДоговораНеТребуется = Истина;
		
	ИначеЕсли Не Форма.ИспользоватьДоговорыСПоставщиками
		И (РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияОтгрузкаТоваровСХранения(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение")
			Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг")) Тогда
		
		ПараметрыФормы.УказаниеДоговораНеТребуется = Истина;
		
	ИначеЕсли Форма.ИспользоватьСоглашенияСКлиентами 
		И (РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента")) Тогда
		
		ПараметрыФормы.УказаниеДоговораНеТребуется = Не Форма.Элементы.Договор.Видимость;
		
	ИначеЕсли Форма.ИспользоватьСоглашенияСПоставщиками
		И (РасхожденияКлиентСервер.ТипОснованияВозвратПоставщику(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияОтгрузкаТоваровСХранения(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение")
			Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг")) Тогда
		
		ПараметрыФормы.УказаниеДоговораНеТребуется = Не Форма.Элементы.Договор.Видимость;
		
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПередачаНаКомиссию(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
		
		ПараметрыФормы.УказаниеДоговораНеТребуется = Ложь;
		
		
	Иначе
		ПараметрыФормы.УказаниеДоговораНеТребуется = Не ЗначениеЗаполнено(Форма.Объект.Договор);
	КонецЕсли;
	
	СписокДокументовОснований = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из Форма.ДокументыОснования Цикл
		СписокДокументовОснований.Добавить(СтрокаТаблицы.Реализация);
	КонецЦикла;
	
	ПараметрыФормы.ТабличнаяЧастьНеПустая = Форма.Объект.Товары.Количество() > 0;
	ПараметрыФормы.ДокументыОснования = СписокДокументовОснований;
	ПараметрыФормы.ТипОснованияАктаОРасхождении = Форма.Объект.ТипОснованияАктаОРасхождении;
	ОткрытьФорму("Обработка.РаботаСАктамиРасхождений.Форма.ФормаПодбораДокументовОснований",
	             ПараметрыФормы,
	             Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьТовары

// Устанавливает переданный вариант действия выделенным строкам ТЧ Товары
//
// Параметры:
// 	Форма                                   - ФормаКлиентскогоПриложения - Изменяемая форма
// 	РезультатВыбораПользователя             - Структура - 
//
// Возвращаемое значение:
// 	Структура - состоит из:
// 	* КоличествоИзмененныхСтрокСоответствие - Соответствие -
// 	* НуженСерверныйВызов                   - Булево -
Функция УстановитьВариантДействияВыделеннымСтрокам(Форма, РезультатВыбораПользователя) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НуженСерверныйВызов", Ложь);
	КоличествоИзмененныхСтрокСоответствие = Новый Соответствие;
	КоличествоИзмененныхСтрокСоответствие.Вставить(РезультатВыбораПользователя.ДействиеНедостачи, 0);
	КоличествоИзмененныхСтрокСоответствие.Вставить(РезультатВыбораПользователя.ДействиеИзлишки, 0);
	
	Если Не ЗначениеЗаполнено(РезультатВыбораПользователя.ДействиеНедостачи)
		И Не ЗначениеЗаполнено(РезультатВыбораПользователя.ДействиеИзлишки) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(ТекущаяСтрока.СтатусУказанияСерий, Форма.ПараметрыУказанияСерий) Тогда
			
			СтруктураВозврата.НуженСерверныйВызов = Истина;
			СтруктураВозврата.Вставить("КоличествоИзмененныхСтрокСоответствие", КоличествоИзмененныхСтрокСоответствие);
			
			Возврат СтруктураВозврата;
			
		Иначе
			
			Если ЗначениеЗаполнено(РезультатВыбораПользователя.ДействиеНедостачи)
				И ТекущаяСтрока.КоличествоУпаковокРасхождения < 0 Тогда
				ВариантДействия = РезультатВыбораПользователя.ДействиеНедостачи;
			Иначе
				ВариантДействия = РезультатВыбораПользователя.ДействиеИзлишки;
			КонецЕсли;
			
			Если РасхожденияКлиентСервер.ИзменитьДействиеВСтроке(ТекущаяСтрока, РезультатВыбораПользователя) Тогда
				КоличествоИзмененныхСтрокСоответствие[ВариантДействия] = КоличествоИзмененныхСтрокСоответствие[ВариантДействия] + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;

КонецФункции

Процедура ОповеститьОбУстановкеДействия(КоличествоИзмененныхСтрокСоответствие) Экспорт
	
	ТекстОповещения =  НСтр("ru = 'Изменение варианта действия в строках'");
	Шаблон = НСтр("ru = 'Установлено ""%действие%"" в %КоличествоСтрок%.'");
	ТекстПояснения = "";
	Для Каждого КлючИЗначение Из КоличествоИзмененныхСтрокСоответствие Цикл
		Если КлючИЗначение.Значение > 0 Тогда
			ТекстПояснения = ТекстПояснения + СтрЗаменить(Шаблон, "%действие%", Строка(КлючИЗначение.Ключ));
			ТекстПояснения = СтрЗаменить(ТекстПояснения, "%КоличествоСтрок%",
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КлючИЗначение.Значение,"строке,строках,строках"));
			ТекстПояснения = ТекстПояснения + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(ТекстПояснения) Тогда
		ТекстПояснения = Лев(ТекстПояснения, СтрДлина(ТекстПояснения) - 1);
		ПоказатьОповещениеПользователя(ТекстОповещения,,ТекстПояснения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыДокументОснованияПриИзменении(ТекущаяСтрока, ДокументыОснования) Экспорт

	ЗаказПустаяСсылка = ПредопределенноеЗначение("Документ.ЗаказНаПеремещение.ПустаяСсылка");

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) Тогда
		ТекущаяСтрока.Заказ = ЗаказПустаяСсылка;
		Возврат;
	КонецЕсли;

	НайденныеСтроки = ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекущаяСтрока.ДокументОснование));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущаяСтрока.Заказ = ЗаказПустаяСсылка;
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];

	Если ЗначениеЗаполнено(ТекущаяСтрока.Заказ) Тогда
		Если НайденнаяСтрока.ЗаказыОснования.НайтиПоЗначению(ТекущаяСтрока.Заказ) = Неопределено Тогда
			ТекущаяСтрока.Заказ = ЗаказПустаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	РасхожденияКлиентСервер.УстановитьПризнакОснованиеПоЗаказам(ТекущаяСтрока, НайденнаяСтрока);
	РасхожденияКлиентСервер.ЗаполнитьЗаказВСтроке(ТекущаяСтрока, ДокументыОснования);

КонецПроцедуры

Процедура ТоварыПередУдалением(ТекущаяСтрока, Отказ, ЭтоАктРасхожденияхПослеОтгрузки) Экспорт
	
	ИменаРеквизитов = РасхожденияКлиентСервер.ИменаРеквизитовВЗависимостиОтТипаАкта(ЭтоАктРасхожденияхПослеОтгрузки);
	
	Если ТекущаяСтрока[ИменаРеквизитов.ЗаполненоПоОснованию] Тогда
		ТекстПредупреждения =  НСтр("ru = 'Запрещено удалять строки, заполненные по документу-основанию'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выводит форму редактирования для строкового реквизита табличной части
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Изменяемая форма
//  ИмяПоляКомментарий     - Строка                     - Наименование реквизита хранящего строку которая будет отредактирована
//  ИмяПоляЕстьКомментарий - Строка                     - Наименование булевого реквизита хранящего признак того что поле заполнено.
//  ИмяПоляРедактирования  - Строка                     - Наименование поля редактирования.
//
Процедура КомментарийНачалоВыбора(Форма, ИмяПоляКомментарий, ИмяПоляЕстьКомментарий, ИмяПоляРедактирования) Экспорт

	ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментарий", ИмяПоляКомментарий);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаЕстьКомментарий", ИмяПоляЕстьКомментарий);
	ДополнительныеПараметры.Вставить("Форма", Форма);

	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеКомментарияЗавершение", РасхожденияКлиент, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОписаниеОповещенияЗавершение, Форма.Элементы[ИмяПоляРедактирования].ТекстРедактирования);

КонецПроцедуры

Процедура РедактированиеКомментарияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если РезультатРедактирования <> ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаКомментарий] Тогда
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаКомментарий]     = РезультатРедактирования;
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаЕстьКомментарий] = Не ПустаяСтрока(РезультатРедактирования);
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ТекущиеДанные       - ДанныеФормыЭлементКоллекции - содержит в том числе:
// 		* Действие - ПеречислениеСсылка.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки - 
// 	Объект              - ДанныеФормыСтруктура, ДокументОбъект - 
// 	Форма               - ФормаКлиентскогоПриложения - 
// 	ТипАкта             - Строка -
// 	ПоказыватьПояснение - Булево - 
// 
Процедура ТоварыДействиеНачалоВыбора(ТекущиеДанные, Объект, Форма, ТипАкта, ПоказыватьПояснение = Ложь) Экспорт
	
	Если НЕ ТекущиеДанные.ЕстьРасхождения Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипАкта",                       ТипАкта);
		ПараметрыФормы.Вставить("ВыбранноеДействие",             ТекущиеДанные.Действие);
		ПараметрыФормы.Вставить("ГрупповоеИзменение",            Ложь);
		ПараметрыФормы.Вставить("КоличествоУпаковокРасхождения", ТекущиеДанные.КоличествоУпаковокРасхождения);
		ПараметрыФормы.Вставить("СпособОтраженияРасхождений",    Объект.СпособОтраженияРасхождений);
		ПараметрыФормы.Вставить("СтрокаПоЗаказу",                ЗначениеЗаполнено(ТекущиеДанные.КодСтроки));
		ПараметрыФормы.Вставить("ПоказыватьПояснение",           ПоказыватьПояснение);
		ПараметрыФормы.Вставить("ТипНоменклатуры",               ТекущиеДанные.ТипНоменклатуры);
		Если Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
			ПараметрыФормы.Вставить("ТипОснованияАктаОРасхождении",  Объект.ТипОснованияАктаОРасхождении);
		КонецЕсли;
		Если Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения")
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала") Тогда
			ПараметрыФормы.Вставить("ОтгрузкаПринципалу", Истина);
		КонецЕсли;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
			ИмяФормы = "Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.Форма.ФормаВыбора";
		Иначе
			ИмяФормы = "Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.Форма.ФормаВыбора";
			ПараметрыФормы.Вставить("ПоВинеСтороннейКомпании", ТекущиеДанные.ПоВинеСтороннейКомпании);
			ПараметрыФормы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		КонецЕсли;
		
		ОткрытьФорму(
			ИмяФормы,
			ПараметрыФормы,,,,, 
			Новый ОписаниеОповещения("ВыборДействияЗавершение", Форма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Объект              - ДанныеФормыСтруктура, ДокументОбъект - должны содержать в том числе:
// 		* Товары - ДанныеФормыКоллекция:
// 			** КоличествоУпаковокРасхождения - Число
// 			** Действие - ПеречислениеСсылка.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки 
// 						- ПеречислениеСсылка.ВариантыДействийПоРасхождениямВАктеПослеПриемки
// 	Форма               - ФормаКлиентскогоПриложения
// 	ТипАкта             - Строка
// 	ПоказыватьПояснение - Булево
//
Процедура ИзменитьДействиеВыделенныхСтрок(Объект, Форма, ТипАкта, ПоказыватьПояснение = Ложь) Экспорт
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипАкта", ТипАкта);
	ПараметрыФормы.Вставить("ГрупповоеИзменение", Истина);
	ПараметрыФормы.Вставить("СпособОтраженияРасхождений", Объект.СпособОтраженияРасхождений);
	ПараметрыФормы.Вставить("ПоказыватьПояснение", ПоказыватьПояснение);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
		И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала") Тогда
		ПараметрыФормы.Вставить("ОтгрузкаПринципалу", Истина);
	КонецЕсли;
	
	МассивДействийПоНедостачам = Новый Массив;
	МассивДействийПоИзлишкам   = Новый Массив;

	ПоВинеСтороннейКомпании = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеОтгрузки.Товары
		
		ЭтоИзлишки   = Ложь;
		ЭтоНедостачи = Ложь;
		
		Если ДанныеСтроки.КоличествоУпаковокРасхождения < 0 Тогда
			ЭтоНедостачи = Истина;
		ИначеЕсли ДанныеСтроки.КоличествоУпаковокРасхождения > 0 Тогда
			ЭтоИзлишки = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИзлишки И МассивДействийПоИзлишкам.Найти(ДанныеСтроки.Действие) = Неопределено Тогда
			МассивДействийПоИзлишкам.Добавить(ДанныеСтроки.Действие);
		ИначеЕсли ЭтоНедостачи И МассивДействийПоНедостачам.Найти(ДанныеСтроки.Действие) = Неопределено Тогда
			МассивДействийПоНедостачам.Добавить(ДанныеСтроки.Действие);
		КонецЕсли;
		ДанныеСтроки.Свойство("ПоВинеСтороннейКомпании", ПоВинеСтороннейКомпании);
		
	КонецЦикла;
	
	Если МассивДействийПоИзлишкам.Количество() = 0
		И МассивДействийПоНедостачам.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенных строках нет расхождений. Указание способа отработки расхождений не требуется.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Если МассивДействийПоИзлишкам.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("ДействиеИзлишки", МассивДействийПоИзлишкам[0]);
	Иначе
		ПараметрыФормы.Вставить("ДействиеИзлишки", Неопределено);
	КонецЕсли;
	
	Если МассивДействийПоНедостачам.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("ДействиеНедостачи", МассивДействийПоНедостачам[0]);
	Иначе
		ПараметрыФормы.Вставить("ДействиеНедостачи", Неопределено);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
		ИмяФормы = "Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.Форма.ФормаВыбора";
	Иначе
		ИмяФормы = "Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.Форма.ФормаВыбора";
		ПараметрыФормы.Вставить("ПоВинеСтороннейКомпании", ПоВинеСтороннейКомпании);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЕстьИзлишки",   МассивДействийПоИзлишкам.Количество() > 0);
	ПараметрыФормы.Вставить("ЕстьНедостачи", МассивДействийПоНедостачам.Количество() > 0);
	
	ОткрытьФорму(
		ИмяФормы,
		ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("ИзменитьДействиеВыделенныхСтрокЗавершение", Форма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьПодбор(Форма, ЭтоАктОРасхожденияхПослеОтгрузки) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(Форма.Объект.ТипОснованияАктаОРасхождении)
		Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента") Тогда
		
		ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
		Иначе
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'акт о расхождения после'") 
			                                                   + " " 
			                                                   + ?(ЭтоАктОРасхожденияхПослеОтгрузки,
			                                                       НСтр("ru = 'отгрузки'"),
			                                                       НСтр("ru = 'приемки'")));
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Соглашение",              Форма.Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация",             Форма.Объект.Организация);
	ПараметрыФормы.Вставить("НалогообложениеНДС",      Форма.Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",         Форма.Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Валюта",                  Форма.Объект.Валюта);
	ПараметрыФормы.Вставить("Дата",                    Форма.Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер",                 Форма.Объект.Партнер);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",    Истина);
	
	Если РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении)
		Или РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(Форма.Объект.ТипОснованияАктаОРасхождении)
		Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента") Тогда
		
		Если ЭтоАктОРасхожденияхПослеОтгрузки Тогда
			ПараметрыФормы.Вставить("СегментНоменклатуры", Форма.СегментНоменклатуры);
		КонецЕсли;
		
		Если РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или РасхожденияКлиентСервер.ТипОснованияПоступлениеТоваровОтХранителя(Форма.Объект.ТипОснованияАктаОРасхождении)
			Или ЭтоАктОРасхожденияхПослеОтгрузки Тогда
			
			ОтборПоТипуНоменклатуры = Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
			
			ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
			
		КонецЕсли;
		
		
		ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
		ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
		
		ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
		
	Иначе
		
		
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
		
		ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор дополнительных параметров обработки завершения
// Возвращаемое значение:
// 	Структура - дополнительные параметры:
// * Форма - ФормаКлиентскогоПриложения, ДокументОбъект - 
// 
Функция ДополнительныеПараметрыОбработкиЗавершения() 
	
	Результат = Новый Структура;
	Результат.Вставить("Форма");
	Возврат Результат;
	
КонецФункции

Процедура ОформитьДокументыНажатие(Форма) Экспорт
	
	Если Форма.Модифицированность Тогда
		
		Если Форма.Объект.Проведен Тогда
			СтрокаДействие = НСтр("ru = 'перепроведение'");
		Иначе
			СтрокаДействие = НСтр("ru = 'запись'");
		КонецЕсли;
		
		ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
		ДополнительныеПараметры.Форма = Форма;
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОформитьДокументыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Акт о расхождениях был изменен. Выполнить %1 документа?'"), СтрокаДействие);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьОформляемыеДокументы(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	РезультатВопроса - КодВозвратаДиалога - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиЗавершения
//
Процедура ОформитьДокументыНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.Записать();
	
	Если Не Форма.Модифицированность Тогда
		ОткрытьОформляемыеДокументы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
// 
Процедура ОткрытьОформляемыеДокументы(Форма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АктОРасхождениях", Форма.Объект.Ссылка);
	ОткрытьФорму("Обработка.РаботаСАктамиРасхождений.Форма.ОформляемыеДокументы", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма
// 	КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке
// 
Процедура ТоварыКоличествоУпаковокПриИзменении(Форма, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Форма.Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокПоДокументу Тогда
		
		ТекущаяСтрока.Сумма            = ТекущаяСтрока.СуммаПоДокументу;
		ТекущаяСтрока.СуммаРасхождения = 0;
		
	КонецЕсли;
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
//  Элемент - ПолеФормы -
//  Отказ - Булево -
//  Копирование - Булево -
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке 
// 
Процедура ТоварыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, КэшированныеЗначения) Экспорт
	
	ИменаРеквизитов = РасхожденияКлиентСервер.ИменаРеквизитовВЗависимостиОтТипаАкта(ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки"));
	
	ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Копирование И ТекущиеДанные[ИменаРеквизитов.ЗаполненоПоОснованию] Тогда
		Отказ = Истина;
		
		НоваяСтрока = Форма.Объект.Товары.Добавить();
		СтрокаИсключаемыхСвойств = ИменаРеквизитов.ЗаполненоПоОснованию 
		                           + ", КоличествоПоДокументу, КоличествоУпаковокПоДокументу, СуммаПоДокументу, СуммаНДСПоДокументу, СуммаСНДСПоДокументу, КодСтроки";
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , СтрокаИсключаемыхСвойств);
		Форма.Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		РасхожденияКлиент.ТоварыКоличествоУпаковокПриИзменении(Форма, КэшированныеЗначения);
		РасхожденияКлиентСервер.УправлениеДоступностью(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
// Элемент - ПолеФормы - 
// КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке 
// 
Процедура ТоварыСтавкаНДСПриИзменении(Форма, Элемент, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
//  Элемент - ПолеФормы - 
// КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке 
// 
Процедура ТоварыСуммаПриИзменении(Форма, Элемент, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если Не РасхожденияКлиентСервер.УчетНДСНеВедется(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
//  Элемент - ПолеФормы -
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке 
// 
Процедура ТоварыСуммаНДСПриИзменении(Форма, Элемент, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
// КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке 
// 
Процедура ТоварыУпаковкаПриИзменении(Форма, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг")
		Или Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриемкаТоваровНаХранение") Тогда
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Форма.Объект.Партнер);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ПересчитатьЦенуЗаУпаковку = Истина;
	Если ТекущаяСтрока.Количество > 0 И ПересчитатьЦенуЗаУпаковку Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Форма.Объект.Соглашение) Тогда
		Если Форма.Объект.ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг") Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Форма.Объект));
		ИначеЕсли РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении)
				Или РасхожденияКлиентСервер.ТипОснованияПередачаТоваровХранителю(Форма.Объект.ТипОснованияАктаОРасхождении)
			Тогда
			
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Форма.Объект));
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьЦенуЗаУпаковку Тогда
		
		Если Не РасхожденияКлиентСервер.УчетНДСНеВедется(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРасхождения");
		
	КонецЕсли;
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
КонецПроцедуры

// Товары цена при изменении.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
//   * Объект - ДокументОбъект - 
//  Элемент - ПолеФормы -
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке
Процедура ТоварыЦенаПриИзменении(Форма, Элемент, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если Не РасхожденияКлиентСервер.УчетНДСНеВедется(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма, содержит в том числе:
// 		* Объект - ДокументОбъект - 
// 
Процедура ТолькоРасхожденияВыполнить(Форма) Экспорт
	
	Форма.ТолькоРасхождения = Не Форма.ТолькоРасхождения;
	Форма.Элементы.ТоварыТолькоРасхождения.Пометка = Форма.ТолькоРасхождения;
	
	Если Форма.ТолькоРасхождения Тогда
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеДляЗаполненныхНаОснованииСтрок() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Для строк, заполненных по основанию, возможно редактирование колонок ""Фактическое количество"", ""Номер паспорта"",
		|а при наличии расхождений колонки ""Сумма (факт)"", ""НДС (факт)"" и ""Как отработать расхождения"".'");
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

Процедура ТоварыПослеУдаления(Форма) Экспорт
	
	РасхожденияКлиентСервер.РассчитатьИтоговыеПоказателиФормы(Форма);
	РасхожденияКлиентСервер.УправлениеДоступностью(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Обработать серии при разбитии строки товары в актах о расхождениях.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Изменяемая форма:
//  	* Объект - ДанныеФормыСтруктура:
//  		** Ссылка - ДокументСсылка
//  		** Серии - ДанныеФормыКоллекция:
//  			*** Количество - Число - количество
//  			*** КоличествоПоДокументу - Число - количество по документу
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Разбиваемая строка.
//  НоваяСтрока - ДанныеФормыЭлементКоллекции - Новая строка, полученная в результате разбиения.
Процедура ОбработатьСерииПриРазбитииСтрокиТовары(Форма, ТекущаяСтрока, НоваяСтрока) Экспорт
	
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	Если Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(ТекущаяСтрока.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
		Возврат;
	КонецЕсли;

	ИсходноеДействие = ТекущаяСтрока.Действие;
	КоличествоКРазбиению = НоваяСтрока.КоличествоУпаковок;
	ИменаРеквизитов = РасхожденияКлиентСервер.ИменаРеквизитовВЗависимостиОтТипаАкта(ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки"));
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.АктОРасхожденияхПослеПеремещения"
		Или ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		ПустоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	Иначе
		ПустоеДействие = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ПустаяСсылка");
	КонецЕсли;
	
	// определим поля связи и структуру поиска
	ТекстПоляСвязи = "";
	Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + ПолеСвязи;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика" + ТекстПоляСвязи); 
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);

	// если в новой строке ключевые поля не изменились, серии переподчинаять не нужно
	Если ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(НоваяСтрока, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		Возврат;
	КонецЕсли;

	// выделим строки с излишком, определим количество излишка
	НайденныеСтрокиСерий = Форма.Объект.Серии.НайтиСтроки(СтруктураПоиска);
	СтрокиСИзлишками = Новый Массив;
	ВсегоИзлишек = 0;
	Для Каждого Строка Из НайденныеСтрокиСерий Цикл
		Дельта = Строка.Количество - Строка.КоличествоПоДокументу;
		Если Дельта > 0 Тогда
			СтрокиСИзлишками.Добавить(Строка);
			ВсегоИзлишек = ВсегоИзлишек + Дельта;
		КонецЕсли;
	КонецЦикла;
	
	// разбиваем строки серий
	Для Каждого Строка Из СтрокиСИзлишками Цикл
		Если КоличествоКРазбиению = 0 Тогда
			Прервать;
		КонецЕсли;
		Дельта = Строка.Количество - Строка.КоличествоПоДокументу;
		НоваяСтрокаСерии = Форма.Объект.Серии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, Строка);
		НоваяСтрокаСерии[ИменаРеквизитов.ЗаполненоПоОснованию] = Ложь;
		НоваяСтрокаСерии.КоличествоПоДокументу = 0;
		НоваяСтрокаСерии.Количество = Мин(Дельта, КоличествоКРазбиению);
		НоваяСтрокаСерии.Действие = ИсходноеДействие;
		Строка.Количество = Строка.Количество - НоваяСтрокаСерии.Количество;
		КоличествоКРазбиению = КоличествоКРазбиению - НоваяСтрокаСерии.Количество;
	КонецЦикла;
	
	// удаляем строки серий с нулевым количеством
	СтрокиУдалить = Новый Массив;
	Для Каждого Строка Из НайденныеСтрокиСерий Цикл
		// если в исходной строке (и связанных строках серий) факт совпадает с количеством по документу, действие не нужно
		Если ВсегоИзлишек = НоваяСтрока.КоличествоУпаковок Тогда
			Строка.Действие = ПустоеДействие;
		КонецЕсли;
		Если Строка.Количество = 0
			И Строка.КоличествоПоДокументу = 0 Тогда
			СтрокиУдалить.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиУдалить Цикл
		Форма.Объект.Серии.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выполняет действие при нажатии гиперссылки в отчете "Оформляемые документы" по документу расхождений.
//
// Параметры:
//  Форма               - ФормаКлиентскогоПриложения - форма, из которой происходит вызов 
//  ОписаниеКоманды     - Строка - описание выполняемого действия, "Изменить" или "Оформить"
//  АктОРасхождениях    - ДокументСсылка.АктОРасхожденияхПослеОтгрузки - отрабатываемый акт о расхождениях.
//  ОснованиеАкта       - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ВозвратТоваровПоставщику - основание 
//                        акта о расхождениях, по которому выполняются действия.
//  ОформляемыйДокумент - ДокументСсылка, Структура - либо пустая ссылка оформляемого типа, либо структура из такой же ссылки и хоз. операции.
//
Процедура ОбработкаКомандыОтчетаОформлениеДокументов(Форма, ОписаниеКоманды, АктОРасхождениях, ОснованиеАкта, ОформляемыйДокумент) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если Не РасхожденияВызовСервера.СтатусАктаКВыполнениюОтработано(АктОРасхождениях) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для %ВидДействия% документов акт должен быть в статусе ""Отрабатывается"" или ""Отработано""'");
		ВидДействия = ?(ОписаниеКоманды = "Изменить", НСтр("ru = 'изменения'"), НСтр("ru = 'оформления'"));
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ВидДействия%", ВидДействия);
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ОписаниеКоманды = "Изменить" Тогда
		
		РасхожденияВызовСервера.ИзменитьДокументОснованиеАктаОРасхождениях(АктОРасхождениях, ОснованиеАкта);
		
	ИначеЕсли ОписаниеКоманды = "Оформить" Тогда
		
		Если ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ОткрытьФорму("Документ.ВозвратТоваровОтКлиента.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент") 
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			И ОформляемыйДокумент.Свойство("Склад")
			И ЗначениеЗаполнено(ОформляемыйДокумент.Склад) Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ПараметрыФормы.Вставить("Склад", ОформляемыйДокумент.Склад);
			ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения")
			И ОформляемыйДокумент.Свойство("Склад")
			И ЗначениеЗаполнено(ОформляемыйДокумент.Склад) Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			ПараметрыФормы.Вставить("Склад",            ОформляемыйДокумент.Склад);
			
			Параметры = Новый Структура("Основание", ПараметрыФормы);
			
			ОткрытьФорму("Документ.ОтгрузкаТоваровСХранения.Форма.ФормаДокумента", Параметры, Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения") Тогда
			
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			
			Параметры = Новый Структура("Основание", ПараметрыФормы);
			
			ОткрытьФорму("Документ.ОтгрузкаТоваровСХранения.Форма.ФормаДокумента", Параметры, Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			
			Параметры = Новый Структура("Основание", ПараметрыФормы);
			
			ОткрытьФорму("Документ.ПоступлениеТоваровОтХранителя.Форма.ФормаДокумента", Параметры, Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ОткрытьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ОткрытьФорму("Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта); 
			
			ОткрытьФорму("Документ.КорректировкаПриобретения.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы));
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("Реализация")
			И ТипЗнч(ОформляемыйДокумент.Реализация) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("Реализация", ОснованиеАкта);
			ПараметрыФормы.Вставить("Операция",   ОформляемыйДокумент.ХозяйственнаяОперация);
			
			ОткрытьФорму("Документ.КорректировкаРеализации.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы));
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			ПараметрыФормы.Вставить("Склад",            ОформляемыйДокумент.Склад);
			
			ОткрытьФорму("Документ.ОприходованиеИзлишковТоваров.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ПеремещениеТоваров")
			И ТипЗнч(ОформляемыйДокумент.ПеремещениеТоваров) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях",   АктОРасхождениях);
			ПараметрыФормы.Вставить("ПеремещениеТоваров", ОснованиеАкта);
			ПараметрыФормы.Вставить("ЭтоПереперемещение", ?(ОформляемыйДокумент.Свойство("ЭтоПереперемещение"), ОформляемыйДокумент.ЭтоПереперемещение, Ложь));
			ПараметрыФормы.Вставить("Исправление", ?(ОформляемыйДокумент.Свойство("Исправление"), ОформляемыйДокумент.Исправление, Ложь));
			ПараметрыФормы.Вставить("ИсправляемыйДокумент", ?(ОформляемыйДокумент.Свойство("ИсправляемыйДокумент"), ОформляемыйДокумент.ИсправляемыйДокумент, Неопределено));
			
			ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
		
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ИсправляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ИсправляемыйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях",   АктОРасхождениях);
			ПараметрыФормы.Вставить("Приобретение", ОснованиеАкта);
			ПараметрыФормы.Вставить("Исправление", ?(ОформляемыйДокумент.Свойство("Исправление"), ОформляемыйДокумент.Исправление, Ложь));
			ПараметрыФормы.Вставить("ИсправляемыйДокумент", ?(ОформляемыйДокумент.Свойство("ИсправляемыйДокумент"), ОформляемыйДокумент.ИсправляемыйДокумент, Неопределено));
			
			ОткрытьФорму("Документ.ПоступлениеТоваровНаСклад.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			ПараметрыФормы.Вставить("Склад",            ОформляемыйДокумент.Склад);

			ОткрытьФорму("Документ.ПоступлениеТоваровНаСклад.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			
			Параметры = Новый Структура("Основание", ПараметрыФормы);
			
			ОткрытьФорму("Документ.ПриемкаТоваровНаХранение.Форма.ФормаДокумента", Параметры, Форма);
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			
			Параметры = Новый Структура("Основание", ПараметрыФормы);
			
			ОткрытьФорму("Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента", Параметры, Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях",      АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",         ОснованиеАкта);
			ПараметрыФормы.Вставить("ХозяйственнаяОперация", ОформляемыйДокумент.ХозяйственнаяОперация);
			
			Параметры = Новый Структура("Основание", ПараметрыФормы);
			
			ОткрытьФорму("Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента", Параметры, Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			ОткрытьФорму("Документ.КорректировкаЗадолженности.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
			
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",    ОснованиеАкта);
			ПараметрыФормы.Вставить("Склад",            ОформляемыйДокумент.Склад);
			
			ОткрытьФорму("Документ.СписаниеНедостачТоваров.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.СписаниеРасхожденийПоступлениеПриобретение") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта",	ОснованиеАкта);
			ПараметрыФормы.Вставить("Заказ",			ОформляемыйДокумент.Заказ);
			ПараметрыФормы.Вставить("Склад",            ОформляемыйДокумент.Склад);
			ОткрытьФорму("Документ.СписаниеРасхожденийПоступлениеПриобретение.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
		
		ИначеЕсли ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
			
			ПараметрыФормы.Вставить("АктОРасхождениях", АктОРасхождениях);
			ПараметрыФормы.Вставить("ОснованиеАкта", ОснованиеАкта);
			ОткрытьФорму("Документ.КорректировкаЗадолженности.Форма.ФормаДокумента", Новый Структура("Основание", ПараметрыФормы), Форма);
		КонецЕсли; 
	ИначеЕсли ОписаниеКоманды = "Создать" Тогда
		Если ТипЗнч(ОформляемыйДокумент) = Тип("Структура")
			И ОформляемыйДокумент.Свойство("ОформляемыйДокумент")
			И ТипЗнч(ОформляемыйДокумент.ОформляемыйДокумент) = Тип("СправочникСсылка.Претензии") Тогда
			
			ПараметрыФормы.Вставить("Основание", ОснованиеАкта);
			ПараметрыФормы.Вставить("СуммаНедопоставки", ОформляемыйДокумент.СуммаНедопоставки);

			ОткрытьФорму("Справочник.Претензии.Форма.ФормаЭлемента", Новый Структура("Основание", ПараметрыФормы), Форма);
		КонецЕсли;
	КонецЕсли;
	
	РасхожденияКлиентЛокализация.ОбработкаКомандыОтчетаОформлениеДокументов(Форма, 
		ОписаниеКоманды,
		АктОРасхождениях,
		ОснованиеАкта,
		ОформляемыйДокумент);
КонецПроцедуры

Функция СтруктураПараметровФормыПодбораДокументовОснованийПеремещений() Экспорт

	Структура = Новый Структура("Организация, ОрганизацияПолучатель, СкладОтправитель, СкладПолучатель,
		|ХозяйственнаяОперация, ТабличнаяЧастьНеПустая, ДокументыОснования");

	Возврат Структура;

КонецФункции

Функция ТекстЗаголовкаЗагрузкиИзВнешнихФайлов() Экспорт
	
	Возврат НСтр("ru = 'Загрузка фактического количества товаров из внешнего файла'");
	
КонецФункции

Функция ТекстДопПоясненияПриЗагрузкеИзВнешнихФайлов() Экспорт
	
	Возврат НСтр("ru = 'Для сопоставления с данными документа будут использованы колонки ""Номенклатура"", ""Характеристика"", ""Упаковка"" и ""Цена"".'");
	
КонецФункции

#КонецОбласти

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Изменяемая форма
// 
Процедура УстановитьДоступностьСоглашенийСПоставщиком(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Партнер) И Форма.ИспользоватьСоглашенияСПоставщиками Тогда
		КоличествоСоглашенийСПоставщиком  = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(Форма.Объект.Партнер);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Соглашение", "Видимость", КоличествоСоглашенийСПоставщиком > 0);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Соглашение", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
