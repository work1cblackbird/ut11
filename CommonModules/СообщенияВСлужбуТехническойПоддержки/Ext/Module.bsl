///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сообщения в службу технической поддержки".
// ОбщийМодуль.СообщенияВСлужбуТехническойПоддержки.
//
// Серверные процедуры и функции отправки сообщений в 
// службу технической поддержки:
//  - подготовка вложений сообщений;
//  - отправка сообщений на Портал 1С:ИТС;
//  - формирование URL для перехода на страницу отправки.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует сообщение для отправки сообщения в службу технической
// поддержки. В параметрах передаются данные заполнения, вложения
// и параметры выгрузки журнала регистрации.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения, 
//                    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения;
//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
//              текстовые вложения (*.txt, *.json, *.xml). Поля структуры элемента вложения:
//   * Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//   * ВидДанных - Строка - определяет преобразование переданных данных.
//                Возможна передача одного из значений:
//                  - ИмяФайла - Строка - полное имя файла вложения;
//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                  - Текст - Строка - текст вложения;
//   * Данные - Строка - данные для формирования вложения;
//  ОтборЖурналаРегистрации - Структура, Неопределено - настройки выгрузки журнала регистрации:
//    * ДатаНачала    - Дата - начало периода журнала;
//    * ДатаОкончания - Дата - конец периода журнала;
//    * События       - Массив - список событий;
//    * Метаданные    - Массив, Неопределено - массив метаданных для отбора;
//    * Уровень       - Строка - уровень важности событий журнала регистрации. Возможные значения:
//       - "Ошибка" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Ошибка;
//       - "Предупреждение" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Предупреждение;
//       - "Информация" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Информация;
//       - "Примечание" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Примечание.
//
// Возвращаемое значение:
//  Структура - результат отправки сообщения:
//   * КодОшибки - Строка - идентификатор ошибки при отправки:
//                          - <Пустая строка> - отправка выполнена успешно;
//                          - "НеверныйФорматЗапроса" - переданы некорректные параметры
//                             сообщения в техническую поддержку;
//                          - "НеизвестнаяОшибка" - при отправке сообщения возникли ошибки;
//                          - "НеизвестнаяОшибкаСервиса" - при отправке сообщения возникли проблемы с сервисом;
//                          - "ОтсутствуетОбязательныйПараметрЗапроса" - отсутствует обязательный параметр
//                             сообщения в техническую поддержку;
//                          - "ОшибкаФайловойСистемы" - ошибка файловой системы;
//                          - "ПревышенМаксимальныйРазмерВложения" - превышен максимальный размер вложения;
//                          - "ПревышенМаксимальныйРазмерЖурналаРегистрации" - превышен максимальный размер
//                             журнала регистрации;
//                          - "ПустойПараметрЗапроса" - не заполнен обязательный параметр
//                             сообщения в техническую поддержку;
//   * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//   * ИспользуетсяИнформационныйЦентр - Булево - признак использования Информационного центра.
//   * СообщениеВИнформационныйЦентр - Структура, Неопределено - параметры передачи обращения в Информационный центр.
//                                                    Когда не используется Информационный центр, тогда Неопределено:
//    ** Тема - Строка - тема обращения
//    ** Текст - Строка - текст обращения
//    ** ИспользоватьСтандартныйШаблон - Булево - если Истина, то текст обращения будет заполнен по шаблону 
//                                              из метода ИнформационныйЦентрСервер.ШаблонТекстаВТехПоддержку;
//    ** Вложения - Массив из Структура - массив сложения из структур с полями:
//     *** ИмяФайла - Строка - имя файла-вложения с расширением, например "file.txt";
//     *** АдресВоВременномХранилище - Строка - адрес файла-вложения во временном хранилище;
//    ** ОбработчикЗавершения - ОписаниеОповещения, Неопределено - описание оповещения о закрытии формы нового обращения;
//    ** ДополнительныеДанные - Структура - произвольная структура данных, которую можноп ередать в службу поддержки.
//                                        Эта структура должна быть сериализуемой в JSON;
//   * URLСтраницы - Строка - URL страницы отправки сообщения.
//
Функция ПодготовитьСообщение(
		ДанныеСообщения,
		Вложения = Неопределено,
		ОтборЖурналаРегистрации = Неопределено) Экспорт
	
	Результат = НовыйРезультатПодготовкиСообщения();
	
	РезультатПроверки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.РезультатПроверкиПараметровОтправки(
		ДанныеСообщения,
		Вложения,
		ОтборЖурналаРегистрации);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИспользуетсяИнформационныйЦентр = ИспользуетсяИнформационныйЦентр();
	
	Если Не Результат.ИспользуетсяИнформационныйЦентр Тогда
		
		РезультатОтправки = ОтправитьСообщение(
			ДанныеСообщения,
			Вложения,
			ОтборЖурналаРегистрации);
		ЗаполнитьЗначенияСвойств(Результат, РезультатОтправки);
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеВложений = Новый Массив;
	РезультатПодготовкиВложений = ПодготовитьВложенияДляИнформационногоЦентра(
		Вложения,
		ДанныеВложений);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПодготовкиВложений);
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Дополнить вложения журналом регистрации при необходимости.
	РезультатПодготовкиЖурналаРегистрации = ПодготовитьТекстЖурналаРегистрацииДляИнформационногоЦентра(
		ОтборЖурналаРегистрации,
		ДанныеВложений);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПодготовкиЖурналаРегистрации);
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ИдентификаторСервисаПоддержки", ДанныеСообщения.Получатель);
	
	СообщениеВИнформационныйЦентр = НовыйСообщениеВИнформационныйЦентр();
	СообщениеВИнформационныйЦентр.Тема                          = ДанныеСообщения.Тема;
	СообщениеВИнформационныйЦентр.Текст                         = ДанныеСообщения.Сообщение;
	СообщениеВИнформационныйЦентр.Вложения                      = ДанныеВложений;
	СообщениеВИнформационныйЦентр.ДополнительныеДанные          = ДополнительныеДанные;
	СообщениеВИнформационныйЦентр.ИспользоватьСтандартныйШаблон = ДанныеСообщения.ИспользоватьСтандартныйШаблон;
	Результат.Вставить("СообщениеВИнформационныйЦентр", СообщениеВИнформационныйЦентр);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисовТехническойПоддержки(0),
		443,
		НСтр("ru = 'Служба технической поддержки (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисовТехническойПоддержки(1),
		443,
		НСтр("ru = 'Служба технической поддержки (eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисовТехническойПоддержки(0),
		НСтр("ru = 'Служба технической поддержки'"));
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисовТехническойПоддержки(1),
		НСтр("ru = 'Служба технической поддержки'"));
	
КонецПроцедуры

// Формирует текстовое описание технической информации.
// 
// Возвращаемое значение:
//  Строка - содержание файла технической информации.
//
Функция ТекстТехническойИнформации() Экспорт
	
	Результат = Новый Массив;
	
	ДанныеТехническойИнформации    = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ОписаниеТехническойИнформации();
	НастройкиТехническойИнформации = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НастройкиТехническойИнформации();
	НастройкиТехническойИнформации.ОтправкаИдентификатораКонфигурации = Истина;
	
	ЗаполнитьДанныеТехническойИнформации(
		ДанныеТехническойИнформации,
		НастройкиТехническойИнформации);
	
	ШаблонТекста = НСтр("ru = 'Техническая информация о программе:
		|Название программы: %1
		|Имя программы: %2 <%3>;
		|Версия программы: %4;
		|Поставщик: %5;
		|Версия Платформы 1С:Предприятие: %6 <%7>'");
	
	Результат.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			ДанныеТехническойИнформации.ОписаниеПрограммы.ОписаниеКонфигурации,
			ДанныеТехническойИнформации.ОписаниеПрограммы.ИдентификаторИнтернетПоддержки,
			ДанныеТехническойИнформации.ОписаниеПрограммы.ИмяКонфигурации,
			ДанныеТехническойИнформации.ОписаниеПрограммы.Версия,
			ДанныеТехническойИнформации.ОписаниеПрограммы.Поставщик,
			ДанныеТехническойИнформации.СистемнаяИнформацияСервера.ВерсияПриложения,
			ДанныеТехническойИнформации.СистемнаяИнформацияСервера.ТипПлатформы));
	
	Результат.Добавить(
		НСтр("ru = 'Версии библиотек:'"));
	Результат.Добавить(
		ТекстОписаниеВерсийПодсистем(
			ДанныеТехническойИнформации.ДанныеПодсистем));
	
	ШаблонТекста = НСтр("ru = 'Вид приложения: %1;
		|Режим: %2;
		|Полные права: %3;
		|Права администратора: %4;
		|Логин для подключения Интернет-поддержки: %5;
		|Пароль для подключения Интернет-поддержки: %6;
		|Настройки соединения с серверами Интернет-поддержки:
		|	Доменная зона: %7
		|Настройки прокси-сервера: %8'");
	
	Результат.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			ДанныеТехническойИнформации.ТекущаяСессия.ИспользуемыйКлиент,
			ДанныеТехническойИнформации.ТекущаяСессия.РежимРаботы,
			ДанныеТехническойИнформации.ТекущаяСессия.ЕстьПолныеПрава,
			ДанныеТехническойИнформации.ТекущаяСессия.ЕстьПравоАдминистрирования,
			?(ПустаяСтрока(ДанныеТехническойИнформации.НастройкиИнтернетПоддержки.Логин),
				НСтр("ru = 'не заполнен'"),
				ДанныеТехническойИнформации.НастройкиИнтернетПоддержки.Логин),
			?(ДанныеТехническойИнформации.НастройкиИнтернетПоддержки.ПарольЗаполнен,
				НСтр("ru = 'заполнен'"),
				НСтр("ru = 'не заполнен'")),
			ДанныеТехническойИнформации.ИнтернетНастройки.ДоменнаяЗона,
			ДанныеТехническойИнформации.ИнтернетНастройки.НастройкиПрокси));
	
	Результат.Добавить(
		НСтр("ru = 'Установленные расширения:'"));
	Результат.Добавить(
		ТекстОписаниеУстановленныхРасширений(
			ДанныеТехническойИнформации.ДанныеРасширений));
	
	ИдентификаторЦентрМониторинга = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
		ИдентификаторЦентрМониторинга = МодульЦентрМониторинга.ИдентификаторИнформационнойБазы();
	КонецЕсли;
	
	Результат.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идентификатор ИБ: %1'"),
			?(ЗначениеЗаполнено(ИдентификаторЦентрМониторинга),
				ИдентификаторЦентрМониторинга,
				НСтр("ru = '<Нет>'"))));
	
	// Настройки клиента лицензирования:
	Если ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		ИДКонфигурации = ДанныеТехническойИнформации.НастройкиИнтернетПоддержки.ИДКонфигурации;
		Если Не ПустаяСтрока(ИДКонфигурации) Тогда
			Результат.Добавить(
				НСтр("ru = 'Имя клиента лицензирования:'") + " "
				+ ДанныеТехническойИнформации.НастройкиИнтернетПоддержки.ИмяКлиентаЛицензирования);
			Результат.Добавить(
				НСтр("ru = 'Идентификатор конфигурации:'"));
			Результат.Добавить(ИДКонфигурации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеСообщений

Функция НовыйРезультатПодготовкиСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",                       "");
	Результат.Вставить("СообщениеОбОшибке",               "");
	Результат.Вставить("ИспользуетсяИнформационныйЦентр", Ложь);
	Результат.Вставить("СообщениеВИнформационныйЦентр",   Неопределено);
	Результат.Вставить("URLСтраницы",                     "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСообщениеВИнформационныйЦентр()
	
	Результат = Новый Структура;
	Результат.Вставить("Тема",                          "");
	Результат.Вставить("Текст",                         "");
	Результат.Вставить("Вложения",                      Новый Массив);
	Результат.Вставить("ДополнительныеДанные",          Новый Структура);
	Результат.Вставить("ИспользоватьСтандартныйШаблон", Истина);
	Результат.Вставить("ОбработчикЗавершения",          Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Отправляет сообщение в службу технической
// поддержки. В параметрах передаются данные заполнения, вложения
// и параметры выгрузки журнала регистрации.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения,
//                    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения;
//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
//              текстовые вложения (*.txt, *.json, *.xml). Поля структуры элемента вложения:
//   * Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//   * ВидДанных - Строка - определяет преобразование переданных данных.
//                Возможна передача одного из значений:
//                  - ИмяФайла - Строка - полное имя файла вложения;
//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                  - Текст - Строка - текст вложения;
//   * Данные - Строка - данные для формирования вложения;
//  ОтборЖурналаРегистрации - Структура, Неопределено - настройки выгрузки журнала регистрации:
//    *ДатаНачала    - Дата - начало периода журнала;
//    *ДатаОкончания - Дата - конец периода журнала;
//    *События       - Массив - список событий;
//    *Метаданные    - Массив, Неопределено - массив метаданных для отбора;
//    *Уровень       - Строка - уровень важности событий журнала регистрации. Возможные значения:
//       - "Ошибка" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Ошибка;
//       - "Предупреждение" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Предупреждение;
//       - "Информация" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Информация;
//       - "Примечание" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Примечание.
//
// Возвращаемое значение:
//  Структура - результат отправки сообщения:
//   * КодОшибки - Строка - идентификатор ошибки при отправки:
//                          - <Пустая строка> - отправка выполнена успешно;
//                          - "НеверныйФорматЗапроса" - переданы некорректные параметры
//                             сообщения в техническую поддержку;
//                          - "НеизвестнаяОшибка" - при отправке сообщения возникли ошибки;
//                          - "НеизвестнаяОшибкаСервиса" - при отправке сообщения возникли проблемы с сервисом;
//                          - "ОтсутствуетОбязательныйПараметрЗапроса" - отсутствует обязательный параметр
//                             сообщения в техническую поддержку;
//                          - "ОшибкаФайловойСистемы" - ошибка файловой системы;
//                          - "ПревышенМаксимальныйРазмерВложения" - превышен максимальный размер вложения;
//                          - "ПревышенМаксимальныйРазмерЖурналаРегистрации" - превышен максимальный размер
//                             журнала регистрации;
//                          - "ПустойПараметрЗапроса" - не заполнен обязательный параметр
//                             сообщения в техническую поддержку;
//   * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//   * URLСтраницы - Строка - URL страницы отправки сообщения.
//
Функция ОтправитьСообщение(
		ДанныеСообщения,
		Вложения = Неопределено,
		ОтборЖурналаРегистрации = Неопределено,
		Результат = Неопределено)
	
	Результат = НовыйРезультатОтправкиСообщения();
	
	РезультатПроверки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.РезультатПроверкиПараметровОтправки(
		ДанныеСообщения,
		Вложения,
		ОтборЖурналаРегистрации);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеСообщения.ИспользоватьСтандартныйШаблон Тогда
		ДанныеСообщения.Сообщение = ШаблонТекстаСообщения(ДанныеСообщения.Сообщение);
	КонецЕсли;
	
	ДанныеВложений = Новый Массив;
	
	// Подготовить переданные вложения.
	РезультатПодготовкиВложений = ПодготовитьВложения(
		Вложения,
		ДанныеВложений);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПодготовкиВложений);
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Дополнить вложения журналом регистрации при необходимости.
	РезультатПодготовкиЖурналаРегистрации = ПодготовитьТекстЖурналаРегистрации(
		ОтборЖурналаРегистрации,
		ДанныеВложений);
	ЗаполнитьЗначенияСвойств(Результат, РезультатПодготовкиЖурналаРегистрации);
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Добавить техническую информацию.
	ПодготовитьТехническуюИнформацию(
		ДанныеСообщения,
		ДанныеВложений);
	
	// Отправить данные на Портал 1С:ИТС
	Результат = ОперацияОтправкиДанных(
		ДанныеСообщения,
		ДанныеВложений);
	
	ОчиститьТехническуюИнформацию(ДанныеСообщения);
	
	// Подготовить URL для перехода на страницу отправки
	// сообщения.
	Если ПустаяСтрока(Результат.КодОшибки) Тогда
		ЗаполнитьПараметрыСтраницы(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатОтправкиСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("URL",               "");
	
	Возврат Результат;
	
КонецФункции

// Получает события журнала регистрации по отбору, выполняет проверку получения и передает результат
// в виде текста.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий;
//   * Метаданные    - Массив, Неопределено - массив метаданных для отбора;
//   *Уровень       - УровеньЖурналаРегистрации - уровень важности событий журнала регистрации;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения;
//   *Размер - Число - размер файла вложения в байтах.
//
// Возвращаемое значение:
//  Структура - результат подготовки:
//    *КодОшибки - Строка - идентификатор ошибки при отправки:
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПодготовитьТекстЖурналаРегистрации(ПараметрыОтбора, ДанныеВложений)
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НовыйРезультатОперации();
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ВыгрузитьЖурналРегистрации(
			ИмяВременногоФайла,
			ОтборЖурналаРегистрации(
				ПараметрыОтбора));
			
		УстановитьПривилегированныйРежим(Ложь);
		
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		Если Не ВременныйФайл.Существует() Тогда
			Результат.КодОшибки = КодОшибкиОшибкаФайловойСистемы();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Файл выгрузки журнала регистрации не обнаружен. Обратитесь к администратору.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ВременныйФайл.Размер() > МаксимальныйРазмерФайла() Тогда
			Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмерЖурналаРегистрации();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Превышен максимально допустимый размер файла журнала регистрации. Измените параметры выгрузки данных.'");
			Возврат Результат;
		КонецЕсли;
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("Представление", НСтр("ru = 'Журнал регистрации.xml'"));
		ПараметрыВложения.Вставить("Текст",         ЧтениеТекста.Прочитать());
		ПараметрыВложения.Вставить("Размер",        ВременныйФайл.Размер());
		ПараметрыВложения.Вставить("Расширение",    ".xml");
		ДанныеВложений.Добавить(ПараметрыВложения);
		
		ЧтениеТекста.Закрыть();
		
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось выгрузить события журнала регистрации в файл по причине:
					|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось выгрузить события журнала регистрации. Обратитесь к администратору.'");
		
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции

Функция ОтборЖурналаРегистрации(ПараметрыОтбора)
	
	Отбор = Новый Структура("ДатаНачала, ДатаОкончания, Событие, Метаданные, Уровень");
	
	ЗаполнитьЗначенияСвойств(
		Отбор,
		ПараметрыОтбора,
		"ДатаНачала, ДатаОкончания, Метаданные");
	
	Отбор.Событие = ПараметрыОтбора.События;
	
	Если Не ЗначениеЗаполнено(Отбор.ДатаНачала) Тогда
		Отбор.ДатаНачала = ТекущаяДатаСеанса() - 60;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отбор.ДатаОкончания) Тогда
		Отбор.ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.Уровень) Тогда
		Отбор.Уровень = УровеньЖурналаРегистрации[ПараметрыОтбора.Уровень];
	Иначе
		Отбор.Удалить("Уровень");
	КонецЕсли;
	
	Если (ТипЗнч(Отбор.Метаданные) <> Тип("Массив"))
		Или (ТипЗнч(Отбор.Метаданные) = Тип("Массив")
			И Отбор.Метаданные.Количество() = 0) Тогда
		Отбор.Удалить("Метаданные");
	КонецЕсли;
	
	Если (ТипЗнч(Отбор.Событие) <> Тип("Массив"))
		Или (ТипЗнч(Отбор.Событие) = Тип("Массив")
			И Отбор.Событие.Количество() = 0) Тогда
		Отбор.Удалить("Событие");
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

// Получает текст для формирования вложений из переданных данных.
//
// Параметры:
//  Вложения - Массив Из Структура, Неопределено - файлы вложений.  Важно: допускаются только
//             текстовые вложения (*.txt). Поля структуры элемента вложения:
//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//   *ВидДанных - Строка - определяет преобразование переданных данных.
//                         Возможна передача одного из значений:
//                           - ИмяФайла - Строка - полное имя файла вложения;
//                           - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                           - Текст - Строка - текст вложения;
//   *Данные - Строка - данные для формирования вложения;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения;
//   *Размер - Число - размер файла вложения в байтах.
//
// Возвращаемое значение:
//  Структура - результат подготовки:
//    *КодОшибки - Строка - идентификатор ошибки при отправки:
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПодготовитьВложения(Вложения, ДанныеВложений)
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НовыйРезультатОперации();
	
	Если Вложения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
		
	Для Каждого Вложение Из Вложения Цикл
		
		Если Вложение.ВидДанных = "Адрес" Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(Вложение.Данные);
			Если ДанныеФайла.Размер() > МаксимальныйРазмерФайла() Тогда
				Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмерВложения();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышен максимально допустимый размер файла %1.'"),
					Вложение.Представление);
				Возврат Результат;
			КонецЕсли;
			
			ТекстВложения = ПолучитьСтрокуИзДвоичныхДанных(ДанныеФайла);
			Размер = ДанныеФайла.Размер();
			
		ИначеЕсли Вложение.ВидДанных = "ИмяФайла" Тогда
			
			ФайлНаДиске = Новый Файл(Вложение.Данные);
			Если Не ФайлНаДиске.Существует() Тогда
				Результат.КодОшибки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.КодОшибкиНеверныйФорматЗапроса();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 не найден .'"),
					Вложение.Представление);
				Возврат Результат;
			ИначеЕсли ФайлНаДиске.Размер() > МаксимальныйРазмерФайла() Тогда
				Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмерВложения();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышен максимально допустимый размер файла %1.'"),
					Вложение.Представление);
				Возврат Результат;
			КонецЕсли;
			
			ЧтениеТекста = Новый ЧтениеТекста(Вложение.Данные);
			ТекстВложения = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			Размер = ФайлНаДиске.Размер();
			
		Иначе
			ТекстВложения = Вложение.Данные;
			Размер = ПолучитьДвоичныеДанныеИзСтроки(Вложение.Данные, "UTF-8").Размер();
		КонецЕсли;
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("Представление", Вложение.Представление);
		ПараметрыВложения.Вставить("Текст",         ТекстВложения);
		ПараметрыВложения.Вставить("Размер",        Размер);
		ПараметрыВложения.Вставить(
			"Расширение",
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.Представление));
		ДанныеВложений.Добавить(ПараметрыВложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует текст обращения в службу технической поддержки.
//
// Параметры:
//  Сообщение - Строка - сообщение пользователя
//
// Возвращаемое значение:
//  Строка - текст сообщения подготовленный по шаблону.
//
Функция ШаблонТекстаСообщения(Сообщение)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Здравствуйте!
			|
			|%1
			|
			|<Укажите ФИО>.'"),
		Сообщение);
	
КонецФункции

// Формирует текст описания технических параметров программы.
//
// Параметры:
//  ДанныеТехническойИнформации - Структура - данные технической информации.
//    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ОписаниеТехническойИнформации;
// 
// Возвращаемое значение:
//  Строка - данные для формирования вложения "Техническая информация.txt".
//
Функция ТекстВложенияТехническаяИнформация(ДанныеТехническойИнформации)
	
	ШаблонТекста = НСтр("ru = 'Техническая информация о программе:
		|Идентификатор конфигурации:
		|%1'");
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекста,
		ДанныеТехническойИнформации.НастройкиИнтернетПоддержки.ИДКонфигурации);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОписаниеВерсийПодсистем(ДанныеПодсистем)
	
	ОписаниеВерсийПодсистем = Новый Массив;
	
	Для Каждого ДанныеВерсииПодсистемы Из ДанныеПодсистем Цикл
		ОписаниеВерсийПодсистем.Добавить(
			Символы.Таб
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2; %3; Это конфигурация: %4'"),
				ДанныеВерсииПодсистемы.Имя,
				ДанныеВерсииПодсистемы.Версия,
				ДанныеВерсииПодсистемы.ИдентификаторИнтернетПоддержки,
				ДанныеВерсииПодсистемы.ЭтоКонфигурация));
	КонецЦикла;
	
	Возврат СтрСоединить(ОписаниеВерсийПодсистем, Символы.ПС);
	
КонецФункции

Функция ТекстОписаниеУстановленныхРасширений(ДанныеРасширений)
	
	ОписаниеРасширений = Новый Массив;
	
	НазначенияРасширенияКонфигурации = Метаданные.СвойстваОбъектов.НазначениеРасширенияКонфигурации;
	Для Каждого ДанныеРасширения Из ДанныеРасширений Цикл
		Назначение = ДанныеРасширения.Назначение;
		Если Назначение = НазначенияРасширенияКонфигурации.Адаптация Тогда
			ЗначениеНазначение = "Адаптация";
		ИначеЕсли Назначение = НазначенияРасширенияКонфигурации.Дополнение Тогда
			ЗначениеНазначение = "Дополнение";
		ИначеЕсли Назначение = НазначенияРасширенияКонфигурации.Исправление Тогда
			ЗначениеНазначение = "Исправление";
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный вариант назначения расширения'");
		КонецЕсли;
		ЭтоПатч = ДанныеРасширения.Назначение = НазначенияРасширенияКонфигурации.Исправление
			И СтрНачинаетсяС(ДанныеРасширения.Имя, "EF");
		
		ОписаниеРасширений.Добавить(
			Символы.Таб
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2); Акт.: %3; Распр. ИБ: %4; БР: %5; Это патч: %6'"),
				ДанныеРасширения.Имя,
				ЗначениеНазначение,
				ДанныеРасширения.Активно,
				ДанныеРасширения.ИспользуетсяВРаспределеннойИнформационнойБазе,
				ДанныеРасширения.БезопасныйРежим,
				ЭтоПатч));
	КонецЦикла;
	
	Если ОписаниеРасширений.Количество() = 0 Тогда
		ОписаниеРасширений.Добавить(НСтр("ru = '<Нет>'"));
	КонецЕсли;
	
	Возврат СтрСоединить(ОписаниеРасширений, Символы.ПС);
	
КонецФункции

// Заполняет техническую информацию. Добавляет файл технической информации во вложение.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения,
//                    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения;
//   *Размер - Число - размер файла вложения в байтах.
//   *Расширение - Строка - расширение файла.
//
Процедура ПодготовитьТехническуюИнформацию(ДанныеСообщения, ДанныеВложений)
	
	ДанныеТехническойИнформации    = ДанныеСообщения.ДанныеТехническойИнформации;
	НастройкиТехническойИнформации = ДанныеСообщения.НастройкиТехническойИнформации;
	ЗаполнитьДанныеТехническойИнформации(
		ДанныеТехническойИнформации,
		НастройкиТехническойИнформации);
	Если НастройкиТехническойИнформации.ОтправкаИдентификатораКонфигурации Тогда
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("Представление", НСтр("ru = 'Техническая информация.txt'"));
		ПараметрыВложения.Вставить("Текст",         ТекстВложенияТехническаяИнформация(ДанныеТехническойИнформации));
		ПараметрыВложения.Вставить("Размер",        СтрДлина(ПараметрыВложения.Текст));
		ПараметрыВложения.Вставить(
			"Расширение",
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПараметрыВложения.Представление));
		ДанныеВложений.Добавить(ПараметрыВложения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеТехническойИнформации(
	ДанныеТехническойИнформации,
	НастройкиТехническойИнформации)
	
	// Обращение в тех поддержку может формировать не только администратор ИБ.
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеТехническойИнформации.ОписаниеПрограммы          = ОписаниеПрограммы();
	ДанныеТехническойИнформации.ТекущаяСессия              = ОписаниеТекущейСессии();
	ДанныеТехническойИнформации.ДанныеРасширений           = РасширенияКонфигурации.Получить();
	ДанныеТехническойИнформации.ДанныеПодсистем            = ОбщегоНазначения.ОписанияПодсистем();
	ДанныеТехническойИнформации.НастройкиИнтернетПоддержки = НастройкиИнтернетПоддержки(НастройкиТехническойИнформации);
	ДанныеТехническойИнформации.ИнтернетНастройки          = ИнтернетНастройки();
	СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ЗаполнитьСистемнуюИнформацию(
		ДанныеТехническойИнформации.СистемнаяИнформацияСервера);
	ЗаполнитьЗначенияСвойств(
		ДанныеТехническойИнформации.СистемнаяИнформацияКлиента,
		ОбщегоНазначения.СистемнаяИнформацияКлиента());
	
КонецПроцедуры

// Определяет описание программы.
//
// Возвращаемое значение:
//  Структура - описание программы.
//
Функция ОписаниеПрограммы()
	
	ИмяПрограммы = Строка(ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы());
	Если ИмяПрограммы = "Unknown" Тогда
		ИмяПрограммы = НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеКонфигурации", Метаданные.Синоним);
	Результат.Вставить("Версия", ИнтернетПоддержкаПользователей.ВерсияКонфигурации());
	Результат.Вставить("Поставщик", Метаданные.Поставщик);
	Результат.Вставить("ИдентификаторИнтернетПоддержки", ИмяПрограммы);
	Результат.Вставить("ИмяКонфигурации", ИнтернетПоддержкаПользователей.ИмяКонфигурации());
	
	Возврат Результат;
	
КонецФункции

// Определяет описание текущей сессии пользователя.
//
// Возвращаемое значение:
//  Структура - информация о сессии.
//
Функция ОписаниеТекущейСессии()
	
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяПользователя", ИмяПользователя());
	Результат.Вставить("ИспользуемыйКлиент", ОбщегоНазначения.ИспользуемыйКлиент());
	Результат.Вставить(
		"РежимРаботы",
		?(ЭтоФайловаяИБ, "FILE", "SRVR"));
	Результат.Вставить(
		"ЕстьПравоАдминистрирования",
		Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь));
	Результат.Вставить(
		"ЕстьПолныеПрава",
		Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь));
	
	
	Возврат Результат;
	
КонецФункции

// Определяет описание настроек Интернет-поддержки.
//
// Параметры:
//  НастройкиТехническойИнформации - Структура -  настройки подготовки технической информации.
//    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ОписаниеТехническойИнформации;
// 
// Возвращаемое значение:
//  Структура - информация о настройках Интернет-поддержки.
//
Функция НастройкиИнтернетПоддержки(НастройкиТехническойИнформации)
	
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Результат = Новый Структура(
		"Логин, ПарольЗаполнен",
		"",
		Ложь);
	
	Если ДанныеАутентификации <> Неопределено Тогда
		Результат.Вставить("Логин", ДанныеАутентификации.Логин);
		Результат.Вставить(
			"ПарольЗаполнен",
			Не ПустаяСтрока(ДанныеАутентификации.Пароль));
	КонецЕсли;
	
	ИдентификаторЦентрМониторинга = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
		ИдентификаторЦентрМониторинга = МодульЦентрМониторинга.ИдентификаторИнформационнойБазы();
	КонецЕсли;
	Результат.Вставить("ИдентификаторЦентрМониторинга", ИдентификаторЦентрМониторинга);
	
	ИмяКлиентаЛицензирования = "";
	ИДКонфигурации = "";
	Если НастройкиТехническойИнформации.ОтправкаИдентификатораКонфигурации
		И ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		
		ИДКонфигурации = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ИДКонфигурации();
		Если Не ПустаяСтрока(ИДКонфигурации) Тогда
			ИмяКлиентаЛицензирования = КлиентЛицензирования.ИмяКлиентаЛицензирования();
		КонецЕсли;
		
	КонецЕсли;
	Результат.Вставить("ИмяКлиентаЛицензирования", ИмяКлиентаЛицензирования);
	Результат.Вставить("ИДКонфигурации", ИДКонфигурации);
	
	Возврат Результат;
	
КонецФункции

// Определяет описание настроек Интернет-соединений.
//
// Возвращаемое значение:
//  Структура - информация о текущих настройках Интернет-соединения.
//
Функция ИнтернетНастройки()
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	
	Результат = Новый Структура;
	Результат.Вставить(
		"ДоменнаяЗона",
		?(НастройкиСоединения.ДоменРасположенияСерверовИПП = 1, "1c.eu", "1c.ru"));
	
	НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкиПрокси = Неопределено Тогда
		ЗначениеНастройкиПрокси = "DONT_USE";
	Иначе
		Если НастройкиПрокси.Получить("ИспользоватьПрокси") Тогда
			ЗначениеНастройкиПрокси = ?(НастройкиПрокси.Получить("ИспользоватьСистемныеНастройки"),
				"AUTO",
				"USE");
		Иначе
			ЗначениеНастройкиПрокси = "DONT_USE";
		КонецЕсли;
	КонецЕсли;
	Результат.Вставить("НастройкиПрокси", ЗначениеНастройкиПрокси);
	
	Возврат Результат;
	
КонецФункции

// Очищает собранную техническую информацию.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения,
//                    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения.
//
Процедура ОчиститьТехническуюИнформацию(ДанныеСообщения)
	
	ДанныеСообщения.Вставить(
		"ДанныеТехническойИнформации",
		СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ОписаниеТехническойИнформации());
	
КонецПроцедуры

#Область ИнформационныйЦентр

Функция ИспользуетсяИнформационныйЦентр()
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульИнформационныйЦентрСервер = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСервер");
	Если Не МодульИнформационныйЦентрСервер.НастроенаИнтеграцияСИнформационнымЦентром() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Подготавливает к отправке в Информационный центр вложений.
//
// Параметры:
//  Вложения - Массив Из Структура, Неопределено - файлы вложений.  Важно: допускаются только
//             текстовые вложения (*.txt). Поля структуры элемента вложения:
//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//   *ВидДанных - Строка - определяет преобразование переданных данных.
//                         Возможна передача одного из значений:
//                           - ИмяФайла - Строка - полное имя файла вложения;
//                           - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                           - Текст - Строка - текст вложения;
//   *Данные - Строка - данные для формирования вложения;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *ИмяФайла - Строка - имя файла - вложения с расширением;
//   *АдресВоВременномХранилище - Строка - адрес файла - вложения во временном хранилище;
// Возвращаемое значение:
//  Структура - результат подготовки:
//    *КодОшибки - Строка - идентификатор ошибки при отправки:
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПодготовитьВложенияДляИнформационногоЦентра(Вложения, ДанныеВложений)
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НовыйРезультатОперации();
	Если Вложения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
		
	Для Каждого Вложение Из Вложения Цикл
		
		Если Вложение.ВидДанных = "Адрес" Тогда
			
			АдресФайла = Вложение.Данные;
			
		ИначеЕсли Вложение.ВидДанных = "ИмяФайла" Тогда
			
			ФайлНаДиске = Новый Файл(Вложение.Данные);
			Если Не ФайлНаДиске.Существует() Тогда
				Результат.КодОшибки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.КодОшибкиНеверныйФорматЗапроса();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 не найден .'"),
					Вложение.Представление);
				Возврат Результат;
			КонецЕсли;
			
			ДанныеФайла = Новый ДвоичныеДанные(Вложение.Данные);
			// Удаляет из временного хранилища Информационный центр
			АдресФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
			
		Иначе
			ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки(Вложение.Данные, "UTF-8");
			// Удаляет из временного хранилища Информационный центр
			АдресФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		КонецЕсли;
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла",                  Вложение.Представление);
		ПараметрыВложения.Вставить("АдресВоВременномХранилище", АдресФайла);
		
		ДанныеВложений.Добавить(ПараметрыВложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает события журнала регистрации по отбору, выполняет проверку получения и передает данные
// во вложения.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий;
//   * Метаданные    - Массив, Неопределено - массив метаданных для отбора;
//   *Уровень       - УровеньЖурналаРегистрации - уровень важности событий журнала регистрации;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *ИмяФайла - Строка - имя файла - вложения с расширением;
//   *АдресВоВременномХранилище - Строка - адрес файла - вложения во временном хранилище;
// Возвращаемое значение:
//  Структура - результат подготовки:
//    *КодОшибки - Строка - идентификатор ошибки при отправки:
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПодготовитьТекстЖурналаРегистрацииДляИнформационногоЦентра(ПараметрыОтбора, ДанныеВложений)
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НовыйРезультатОперации();
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ВыгрузитьЖурналРегистрации(
			ИмяВременногоФайла,
			ОтборЖурналаРегистрации(ПараметрыОтбора));
			
		УстановитьПривилегированныйРежим(Ложь);
		
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		Если Не ВременныйФайл.Существует() Тогда
			Результат.КодОшибки = КодОшибкиОшибкаФайловойСистемы();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Файл выгрузки журнала регистрации не обнаружен. Обратитесь к администратору.'");
			Возврат Результат;
		КонецЕсли;
		
		ДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла",                  НСтр("ru = 'Журнал регистрации.xml'"));
		ПараметрыВложения.Вставить("АдресВоВременномХранилище", АдресФайла);
		
		ДанныеВложений.Добавить(ПараметрыВложения);
		
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось выгрузить события журнала регистрации в файл по причине:
					|%1'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось выгрузить события журнала регистрации. Обратитесь к администратору.'");
		
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВызовОперацийСервиса

// Выполняет вызов операции отправки сообщения
// в службу технической поддержки.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения,
//                    См. СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения.
//
// Возвращаемое значение:
//  Структура - результат вызова операции:
//   *КодОшибки - Строка - идентификатор ошибки;
//   *СообщениеОбОшибке - Строка - сообщение об ошибке для пользователя;
//   *URL - Строка - url для перехода на Портал 1С:ИТС.
//
Функция ОперацияОтправкиДанных(
		ДанныеСообщения,
		ДанныеВложений)
	
	// Может вызываться перед началом работы системы, поэтому необходимо
	// зачитать настройки соединения с серверами.
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	Результат = НовыйРезультатОтправкиСообщения();
	
	ДанныеJSON = ПараметрыV2RequestJSON(
		ДанныеСообщения,
		ДанныеВложений);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеJSON);
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 300);
	
	URLОперацииОтправитьДанные = URLОперацииОтправитьДанные(НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперацииОтправитьДанные,
		,
		,
		ДопПараметрыЗапроса);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|%1'"),
				РезультатОтправки.ИнформацияОбОшибке));
		
		Если РезультатОтправки.КодСостояния = 400 Тогда
			Результат.КодОшибки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.КодОшибкиНеверныйФорматЗапроса();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
		ИначеЕсли РезультатОтправки.КодСостояния = 429 Тогда
			Результат.КодОшибки = КодОшибкиПовторОтправкиЗапроса();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Превышено количество попыток ввода отправки обращений. Повторите попытку позже.'");
		ИначеЕсли РезультатОтправки.КодСостояния = 500
			Или РезультатОтправки.КодСостояния = 503 Тогда
			Результат.КодОшибки = КодОшибкиНеизвестнаяОшибкаСервиса();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Не удалось подключиться к сервису. Сервис временно недоступен. Повторите попытку подключения позже.'");
		Иначе
			Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		РезультатВызова = РезультатV2RequestИзJSON(РезультатОтправки.Содержимое);
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Ошибка при обработке ответа сервиса.
					|Некорректный ответ сервиса отправки сообщений.
					|%1
					|Тело ответа: %2'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатОтправки.Содержимое));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если ТипЗнч(РезультатВызова) <> Тип("Структура")
		Или Не РезультатВызова.Свойство("URL") Тогда // АПК:1416 Данные из внешних источников.
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в службу технической поддержки.
				|Сервис сообщил об ошибке.
				|Ответ сервиса: %1'"),
			РезультатОтправки.Содержимое));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в службу технической поддержки.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Отправка вложений
	Для Каждого ФайлВыгрузки Из РезультатВызова.files Цикл
		
		URLОтправкиФайла = ФайлВыгрузки.uploadURL;
		ДанныеВложения = ДанныеВложений[ФайлВыгрузки.number];
		ДанныеJSON = ПараметрыПередачиФайловJSON(
			ДанныеВложения);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		
		ДопПараметрыЗапроса = Новый Структура;
		ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
		ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
		ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
		ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеJSON);
		ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
		ДопПараметрыЗапроса.Вставить("Таймаут"                 , 300);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОтправкиФайла,
			,
			,
			ДопПараметрыЗапроса);
		
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
						|%1'"),
					РезультатОтправки.ИнформацияОбОшибке));
			
			Если РезультатОтправки.КодСостояния = 400 Тогда
				Результат.КодОшибки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.КодОшибкиНеверныйФорматЗапроса();
				Результат.СообщениеОбОшибке =
					НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
			ИначеЕсли РезультатОтправки.КодСостояния = 413 Тогда
				Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмерВложения();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышен максимально допустимый размер файла %1.'"),
					РезультатОтправки.ИнформацияОбОшибке);
			ИначеЕсли РезультатОтправки.КодСостояния = 500
				Или РезультатОтправки.КодСостояния = 503 Тогда
				Результат.КодОшибки = КодОшибкиНеизвестнаяОшибкаСервиса();
				Результат.СообщениеОбОшибке =
					НСтр("ru = 'Не удалось подключиться к сервису. Сервис временно недоступен. Повторите попытку подключения позже.'");
			Иначе
				Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
				Результат.СообщениеОбОшибке =
					НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.URL = РезультатВызова.URL;
	
	Возврат Результат;

КонецФункции

// Формирует URL для перехода на страницу отправки сообщения.
//
// Параметры:
//  ПараметрыСообщения - Структура - данные сообщения
//   *КодОшибки - Строка - идентификатор ошибки;
//   *СообщениеОбОшибке - Строка - сообщение об ошибке для пользователя;
//   *ТокенДанных - Строка - идентификатор обращения для перехода на Портал 1С:ИТС.
//
Процедура ЗаполнитьПараметрыСтраницы(ПараметрыСообщения)
	
	// Может вызываться перед началом работы системы, поэтому необходимо
	// зачитать настройки соединения с серверами.
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	НастройкиИнтернетПоддержки = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиИнтернетПоддержкиПользователей();
	
	ПараметрыСообщения.Вставить("URLСтраницы", "");
	ПараметрыСообщения.URLСтраницы = ПараметрыСообщения.URL;
	
	Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь)
			И Не НастройкиИнтернетПоддержки.ОтключитьАвторизацию Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета =
			ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ПараметрыСообщения.URLСтраницы);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
			ПараметрыСообщения.URLСтраницы = ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
				"/ticket/auth?token=" + РезультатПолученияТикета.Тикет,
				НастройкиСоединения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет хост для вызова отправки сообщений
// в службу технической поддержки.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисовТехническойПоддержки(Домен)
	
	
	Если Домен = 0 Тогда
		Хост = "its.1c.ru";
	Иначе
		Хост = "its.1c.eu";
	КонецЕсли;
	
	ИнтеграцияПодсистемБИП.ПриОпределенииХостаСервисовТехническойПоддержки(
		Хост);
	СообщенияВСлужбуТехническойПоддержкиПереопределяемый.ПриОпределенииХостаСервисовТехническойПоддержки(
		Хост);
	
	Возврат Хост;
	
КонецФункции

// Определяет URL для вызова отправки сообщений
// в службу технической поддержки.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииОтправитьДанные(Домен)
	
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/sd/v2/request";
	
КонецФункции

// Формирует параметры запроса для операции
// /v2/request.
//
Функция ПараметрыV2RequestJSON(
		ДанныеСообщения,
		ДанныеВложений)
	
	ДанныеЗапроса = Новый Структура;
	
	// Данные обращения
	ДанныеОбращения = Новый Структура;
	ДанныеОбращения.Вставить("theme", ДанныеСообщения.Тема);
	ДанныеОбращения.Вставить("text", ДанныеСообщения.Сообщение);
	ДанныеОбращения.Вставить("techSupportNick", ДанныеСообщения.Получатель);
	ДанныеЗапроса.Вставить("requestInfo", ДанныеОбращения);
	
	// Настройки готового ответа
	НастройкиПоискаГотовогоОтвета = Новый Структура;
	НастройкиПоискаГотовогоОтвета.Вставить("text", ДанныеСообщения.НастройкиПоискаГотовогоОтвета.Текст);
	НастройкиПоискаГотовогоОтвета.Вставить("programNick", ДанныеСообщения.НастройкиПоискаГотовогоОтвета.ИдентификаторПрограммы);
	ДанныеЗапроса.Вставить("searchParams", НастройкиПоискаГотовогоОтвета);
	
	// Техническая информация
	ТехническаяИнформация = Новый Структура;
	ДанныеТехническойИнформации = ДанныеСообщения.ДанныеТехническойИнформации;
	
	// 1.Описание программы
	ОписаниеПрограммы = Новый Структура;
	ОписаниеПрограммы.Вставить("description", ДанныеТехническойИнформации.ОписаниеПрограммы.ОписаниеКонфигурации);
	ОписаниеПрограммы.Вставить("version", ДанныеТехническойИнформации.ОписаниеПрограммы.Версия);
	ОписаниеПрограммы.Вставить("vendor", ДанныеТехническойИнформации.ОписаниеПрограммы.Поставщик);
	ОписаниеПрограммы.Вставить("name", ДанныеТехническойИнформации.ОписаниеПрограммы.ИмяКонфигурации);
	ОписаниеПрограммы.Вставить(
		"InternetSupportID",
		ДанныеТехническойИнформации.ОписаниеПрограммы.ИдентификаторИнтернетПоддержки);
	ТехническаяИнформация.Вставить("programInfo", ОписаниеПрограммы);
	
	// 2.Системная информация клиента
	СистемнаяИнформацияКлиента = Новый Структура;
	СистемнаяИнформацияКлиента.Вставить(
		"platformType",
		ДанныеТехническойИнформации.СистемнаяИнформацияКлиента.ТипПлатформы);
	СистемнаяИнформацияКлиента.Вставить(
		"platformVersion",
		ДанныеТехническойИнформации.СистемнаяИнформацияКлиента.ВерсияПриложения);
	СистемнаяИнформацияКлиента.Вставить("osVersion", ДанныеТехническойИнформации.СистемнаяИнформацияКлиента.ВерсияОС);
	ТехническаяИнформация.Вставить("clientInfo", СистемнаяИнформацияКлиента);
	
	// 3.Системная информация сервера
	СистемнаяИнформацияСервера = Новый Структура;
	СистемнаяИнформацияСервера.Вставить(
		"platformType",
		ДанныеТехническойИнформации.СистемнаяИнформацияСервера.ТипПлатформы);
	СистемнаяИнформацияСервера.Вставить(
		"platformVersion",
		ДанныеТехническойИнформации.СистемнаяИнформацияСервера.ВерсияПриложения);
	СистемнаяИнформацияСервера.Вставить("osVersion", ДанныеТехническойИнформации.СистемнаяИнформацияСервера.ВерсияОС);
	ТехническаяИнформация.Вставить("serverInfo", СистемнаяИнформацияСервера);
	
	// 4.Данные сессии пользователя
	ДанныеСессии = Новый Структура;
	ДанныеСессии.Вставить("userName", ДанныеТехническойИнформации.ТекущаяСессия.ИмяПользователя);
	ДанныеСессии.Вставить("clientApplicationType", ДанныеТехническойИнформации.ТекущаяСессия.ИспользуемыйКлиент);
	ДанныеСессии.Вставить("mode", ДанныеТехническойИнформации.ТекущаяСессия.РежимРаботы);
	ДанныеСессии.Вставить("isFullAccess", ДанныеТехническойИнформации.ТекущаяСессия.ЕстьПолныеПрава);
	ДанныеСессии.Вставить("isAdministrator", ДанныеТехническойИнформации.ТекущаяСессия.ЕстьПравоАдминистрирования);
	ТехническаяИнформация.Вставить("sessionInfo", ДанныеСессии);
	
	// 5.Данные расширений/патчей
	ОписаниеРасширений = Новый Массив;
	ДанныеРасширений = ДанныеТехническойИнформации.ДанныеРасширений;
	НазначенияРасширенияКонфигурации = Метаданные.СвойстваОбъектов.НазначениеРасширенияКонфигурации;
	Для Каждого ДанныеРасширения Из ДанныеРасширений Цикл
		
		ОписаниеРасширения = Новый Структура;
		ОписаниеРасширения.Вставить("name", ДанныеРасширения.Имя);
		ОписаниеРасширения.Вставить("uuid", Строка(ДанныеРасширения.УникальныйИдентификатор));
		ОписаниеРасширения.Вставить("active", ДанныеРасширения.Активно);
		ОписаниеРасширения.Вставить("safeMode", ДанныеРасширения.БезопасныйРежим);
		ОписаниеРасширения.Вставить(
			"usedInDistributedInfoBase",
			ДанныеРасширения.ИспользуетсяВРаспределеннойИнформационнойБазе);
		ОписаниеРасширения.Вставить(
			"unsafeActionProtection",
			ДанныеРасширения.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях);
		Назначение = ДанныеРасширения.Назначение;
		Если Назначение = НазначенияРасширенияКонфигурации.Адаптация Тогда
			ЗначениеНазначение = "Адаптация";
		ИначеЕсли Назначение = НазначенияРасширенияКонфигурации.Дополнение Тогда
			ЗначениеНазначение = "Дополнение";
		ИначеЕсли Назначение = НазначенияРасширенияКонфигурации.Исправление Тогда
			ЗначениеНазначение = "Исправление";
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный вариант назначения расширения'");
		КонецЕсли;
		ОписаниеРасширения.Вставить("purpose", ЗначениеНазначение);
		ЭтоПатч = ДанныеРасширения.Назначение = НазначенияРасширенияКонфигурации.Исправление
			И СтрНачинаетсяС(ДанныеРасширения.Имя, "EF");
		ОписаниеРасширения.Вставить("isPatch", ЭтоПатч);
		ОписаниеРасширений.Добавить(ОписаниеРасширения);
		
	КонецЦикла;
	
	ТехническаяИнформация.Вставить("extensionsInfo", ОписаниеРасширений);
	
	// 6.Описание подсистем
	ОписаниеПодсистем = Новый Массив;
	ДанныеПодсистем = ДанныеТехническойИнформации.ДанныеПодсистем;
	Для Каждого ДанныеПодсистемы Из ДанныеПодсистем Цикл
		
		ОписаниеПодсистемы = Новый Структура;
		ОписаниеПодсистемы.Вставить("name", ДанныеПодсистемы.Имя);
		ОписаниеПодсистемы.Вставить("version", ДанныеПодсистемы.Версия);
		ОписаниеПодсистемы.Вставить("InternetSupportID", ДанныеПодсистемы.ИдентификаторИнтернетПоддержки);
		ОписаниеПодсистемы.Вставить("isConfigration", ДанныеПодсистемы.ЭтоКонфигурация);
		ОписаниеПодсистем.Добавить(ОписаниеПодсистемы);
		
	КонецЦикла;
	
	ТехническаяИнформация.Вставить("subsystemsInfo", ОписаниеПодсистем);
	
	// 7. Настройки Интернет-поддержки
	НастройкиИнтернетПоддержки = ДанныеТехническойИнформации.НастройкиИнтернетПоддержки;
	ОписаниеИнтернетПоддержки = Новый Структура;
	ОписаниеИнтернетПоддержки.Вставить("login", НастройкиИнтернетПоддержки.Логин);
	ОписаниеИнтернетПоддержки.Вставить("passwordIsFilled", НастройкиИнтернетПоддержки.ПарольЗаполнен);
	ОписаниеИнтернетПоддержки.Вставить("monitoringCenterID", НастройкиИнтернетПоддержки.ИдентификаторЦентрМониторинга);
	ОписаниеИнтернетПоддержки.Вставить("licensingClientName", НастройкиИнтернетПоддержки.ИмяКлиентаЛицензирования);
	Если ЗначениеЗаполнено(ДанныеСообщения.ИНН) Тогда
		ОписаниеИнтернетПоддержки.Вставить("inn", ДанныеСообщения.ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСообщения.РегистрационныйНомер) Тогда
		ОписаниеИнтернетПоддержки.Вставить("registrationNumber", ДанныеСообщения.РегистрационныйНомер);
	КонецЕсли;
	ТехническаяИнформация.Вставить("supportInfo", ОписаниеИнтернетПоддержки);
	
	// 8. Настройки Интернет-соединения
	ИнтернетНастройки = ДанныеТехническойИнформации.ИнтернетНастройки;
	ОписаниеИнтернетСоединения = Новый Структура;
	ОписаниеИнтернетСоединения.Вставить("domainZone", ИнтернетНастройки.ДоменнаяЗона);
	ОписаниеИнтернетСоединения.Вставить("proxy", ИнтернетНастройки.НастройкиПрокси);
	ТехническаяИнформация.Вставить("InternetSettings", ОписаниеИнтернетСоединения);
	
	ДанныеЗапроса.Вставить("technicalInfo", ТехническаяИнформация);
	
	// Описание вложений
	ОписаниеФайлов = Новый Массив;
	
	Для Счетчик = 0 По ДанныеВложений.ВГраница() Цикл
		
		ДанныеВложения = ДанныеВложений[Счетчик];
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("number", Счетчик);
		ОписаниеФайла.Вставить("name", ДанныеВложения.Представление);
		ОписаниеФайла.Вставить("size", ДанныеВложения.Размер);
		ОписаниеФайла.Вставить("extension", ДанныеВложения.Расширение);
		ОписаниеФайлов.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	ДанныеЗапроса.Вставить("files", ОписаниеФайлов);
	
	Возврат ДанныеВJSON(ДанныеЗапроса);

КонецФункции

// Чтение ответа операции /v2/request.
//
Функция РезультатV2RequestИзJSON(ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	ЧтениеОтвета.Закрыть();
	
	Возврат Результат;

КонецФункции

// Формирует параметры запроса для операции передачи файлов.
//
Функция ПараметрыПередачиФайловJSON(ДанныеВложения)
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("name", ДанныеВложения.Представление);
	ДанныеЗапроса.Вставить("value", ДанныеВложения.Текст);
	
	Возврат ДанныеВJSON(ДанныеЗапроса);
	
КонецФункции

// Возвращает представление данных в виде строки JSON.
//
// Параметры:
//  Данные - Структура - данные к сериализации в JSON.
// 
// Возвращаемое значение:
//  Строка - сериализованные данные.
//
Функция ДанныеВJSON(Данные)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьДанныхСообщения, Данные);
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет максимальный размер файла вложения.
//
// Возвращаемое значение:
//  Число - максимальный размер файла в байтах.
//
Функция МаксимальныйРазмерФайла()
	
	Возврат 10485760; // 10 МБ.
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "ПревышенМаксимальныйРазмерВложения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПревышенМаксимальныйРазмерВложения()
	
	Возврат "ПревышенМаксимальныйРазмерВложения";
	
КонецФункции

// Возвращает код ошибки "ПревышенМаксимальныйЖурналаРегистрации".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПревышенМаксимальныйРазмерЖурналаРегистрации()
	
	Возврат "ПревышенМаксимальныйРазмерЖурналаРегистрации";
	
КонецФункции

// Возвращает код ошибки "ПовторОтправкиЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПовторОтправкиЗапроса()
	
	Возврат "ПовторОтправкиЗапроса";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибкаСервиса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибкаСервиса()
	
	Возврат "НеизвестнаяОшибкаСервиса";
	
КонецФункции

// Возвращает код ошибки "ОшибкаФайловойСистемы".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаФайловойСистемы()
	
	Возврат "ОшибкаФайловойСистемы";
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Сообщения в службу технической поддержки'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
