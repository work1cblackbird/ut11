
////////////////////////////////////////////////////////////////////////////////
// Модуль "ЭтапыОплатыКлиент" содержит процедуры и функции для 
// работы пользователя с таблицей этапов оплаты,
// оповещения пользователя о заполнении этапов оплаты.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииЗаполненияЭтаповОплаты

// Стандартный обработчик события "ПриИзменении" поля "ЭтапыГрафикаОплатыПроцентПлатежа".
//
// Параметры:
// ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ЭтапыГрафикаОплаты     - ДанныеФормыКоллекция - таблица этапов оплаты
// СуммаОплатыПоДокументу - Число - сумма оплаты документа.
//
Процедура ЭтапыГрафикаОплатыПроцентПлатежаПриИзменении(ТекущиеДанные, ЭтапыГрафикаОплаты, Знач СуммаОплатыПоДокументу) Экспорт
	
	Если ТекущиеДанные.ПроцентПлатежа > 0 И ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа") = 100 Тогда
		
		СуммаПлатежа = 0;
		Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
			Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				СуммаПлатежа = СуммаПлатежа + ТекСтрока.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.СуммаПлатежа = СуммаОплатыПоДокументу - СуммаПлатежа;
	Иначе
		
		ТекущиеДанные.СуммаПлатежа = СуммаОплатыПоДокументу * ТекущиеДанные.ПроцентПлатежа / 100;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("СуммаВзаиморасчетов") Тогда
		ТекущиеДанные.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ЭтапыГрафикаОплатыСуммаПлатежа".
//
// Параметры:
// ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ЭтапыГрафикаОплаты     - ДанныеФормыКоллекция - таблица этапов оплаты
// СуммаОплатыПоДокументу - Число - сумма оплаты документа.
//
Процедура ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(ТекущиеДанные, ЭтапыГрафикаОплаты, Знач СуммаОплатыПоДокументу) Экспорт
	
	Если СуммаОплатыПоДокументу <> 0 Тогда
		
		Если ТекущиеДанные.СуммаПлатежа <> 0 И
			ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") = СуммаОплатыПоДокументу Тогда
			
			ПроцентПлатежа = 0;
			Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
				Если ТекСтрока <> ТекущиеДанные Тогда
					ПроцентПлатежа = ПроцентПлатежа + ТекСтрока.ПроцентПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТекущиеДанные.ПроцентПлатежа = 100 - ПроцентПлатежа;
			
		Иначе
			ТекущиеДанные.ПроцентПлатежа = ТекущиеДанные.СуммаПлатежа * 100 / СуммаОплатыПоДокументу;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("СуммаВзаиморасчетов") Тогда
		ТекущиеДанные.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ЭтапыГрафикаОплатыПроцентЗалогаЗаТару".
//
// Параметры:
// ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ЭтапыГрафикаОплаты     - ДанныеФормыКоллекция - таблица этапов оплаты
// СуммаЗалогаПоДокументу - Число - сумма залога за тару по документу.
//
Процедура ЭтапыГрафикаОплатыПроцентЗалогаЗаТаруПриИзменении(ТекущиеДанные, ЭтапыГрафикаОплаты, Знач СуммаЗалогаПоДокументу) Экспорт
	
	Если ТекущиеДанные.ПроцентЗалогаЗаТару > 0 И ЭтапыГрафикаОплаты.Итог("ПроцентЗалогаЗаТару") = 100 Тогда
		
		СуммаЗалогаЗаТару = 0;
		Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
			Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				СуммаЗалогаЗаТару = СуммаЗалогаЗаТару + ТекСтрока.СуммаЗалогаЗаТару;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.СуммаЗалогаЗаТару = СуммаЗалогаПоДокументу - СуммаЗалогаЗаТару;
	Иначе
		
		ТекущиеДанные.СуммаЗалогаЗаТару = СуммаЗалогаПоДокументу * ТекущиеДанные.ПроцентЗалогаЗаТару / 100;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("СуммаВзаиморасчетов") Тогда
		ТекущиеДанные.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ЭтапыГрафикаОплатыСуммаЗалогаЗаТару".
//
// Параметры:
// ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ЭтапыГрафикаОплаты     - ДанныеФормыКоллекция - таблица этапов оплаты
// СуммаЗалогаПоДокументу - Число - сумма залога за тару по документу.
//
Процедура ЭтапыГрафикаОплатыСуммаЗалогаЗаТаруПриИзменении(ТекущиеДанные, ЭтапыГрафикаОплаты, Знач СуммаЗалогаПоДокументу) Экспорт
	
	Если СуммаЗалогаПоДокументу <> 0 Тогда
		
		Если ТекущиеДанные.СуммаЗалогаЗаТару <> 0 И
			ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару") = СуммаЗалогаПоДокументу Тогда
			
			ПроцентЗалогаЗаТару = 0;
			Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
				Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
					ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТару + ТекСтрока.ПроцентЗалогаЗаТару;
				КонецЕсли;
			КонецЦикла;
			
			ТекущиеДанные.ПроцентЗалогаЗаТару = 100 - ПроцентЗалогаЗаТару;
			
		Иначе
			ТекущиеДанные.ПроцентЗалогаЗаТару = ТекущиеДанные.СуммаЗалогаЗаТару * 100 / СуммаЗалогаПоДокументу;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("СуммаВзаиморасчетов") Тогда
		ТекущиеДанные.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПередНачаломДобавления" табличной части "ЭтапыГрафикаОплаты".
//
// Параметры:
// Форма                 - ФормаКлиентскогоПриложения - Форма документа/справочника.
// ПараметрыЭтапов       - см. ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты
// Отказ                 - Булево - флаг отказа от добавления новой строки.
// Копирование           - Булево - строка скопирована.
// Оповещение            - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после добавления строки.
//
Процедура ЭтапыГрафикаОплатыПередНачаломДобавления(Форма, ПараметрыЭтапов, Отказ, Копирование, Оповещение) Экспорт
	
	Если Форма.НесколькоДатОтгрузки Тогда
		
		Отказ = Истина;
		Если НЕ Копирование Тогда
			ПараметрыЭтапов.Вставить("Операция","Добавление");
		Иначе
			ТекущиеДанные = Форма.Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			Иначе
				ПараметрыЭтапов.Вставить("Операция",        "Копирование");
				ПараметрыЭтапов.Вставить("ВариантОплаты",   ТекущиеДанные.ВариантОплаты);
				ПараметрыЭтапов.Вставить("ВариантОтсчета",  ТекущиеДанные.ВариантОтсчета);
				ПараметрыЭтапов.Вставить("Сдвиг",           ТекущиеДанные.Сдвиг);
				ПараметрыЭтапов.Вставить("ДатаПлатежа",     ТекущиеДанные.ДатаПлатежа);
				
				ПроцентЗалогаЗаТару = 0;
				ПроцентПлатежа      = 0;
				СуммаЗалогаЗаТару   = 0;
				СуммаПлатежа        = 0;
				
				Для Каждого Стр Из ПараметрыЭтапов.ЭтапыГрафикаОплаты Цикл
					Если Стр.Сдвиг = ТекущиеДанные.Сдвиг
						И Стр.ВариантОплаты = ТекущиеДанные.ВариантОплаты
						И Стр.ВариантОтсчета = ТекущиеДанные.ВариантОтсчета Тогда
						
						ПроцентПлатежа = ПроцентПлатежа + Стр.ПроцентПлатежа;
						СуммаПлатежа = СуммаПлатежа + Стр.СуммаПлатежа;
						
						Если ПараметрыЭтапов.ЕстьТара Тогда
							СуммаЗалогаЗаТару = СуммаЗалогаЗаТару + Стр.СуммаЗалогаЗаТару;
							ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТару + Стр.ПроцентЗалогаЗаТару;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыЭтапов.Вставить("ПроцентЗалогаЗаТару", ПроцентЗалогаЗаТару);
				ПараметрыЭтапов.Вставить("ПроцентПлатежа",      ПроцентПлатежа);
				ПараметрыЭтапов.Вставить("СуммаЗалогаЗаТару",   СуммаЗалогаЗаТару);
				ПараметрыЭтапов.Вставить("СуммаПлатежа",        СуммаПлатежа);
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеПараметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыЭтапов);
		ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОповещениеТекущее = Новый ОписаниеОповещения("ЭтапыГрафикаОплатыПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ЭтапОплаты", ПараметрыЭтапов, Форма,,,,ОповещениеТекущее,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Служебный обработчик оповещения "ПередНачаломДобавления".
Процедура ЭтапыГрафикаОплатыПередНачаломДобавленияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Форма = Параметры.Форма;
		
		Если ЗначениеЗаполнено(Результат.ДатаПлатежа) Тогда
			НовСтр = Параметры.ЭтапыГрафикаОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Результат);
		Иначе
			
			ИмяКолонки = ?(Параметры.ДатыОтгрузок.Количество() > 0 
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.ДатыОтгрузок[0],"СуммаПлатежа"),
							"СуммаПлатежа",
							"Сумма");
			
			СуммаПлатежаКРаспределению = Результат.СуммаПлатежа;
			ПроцентПлатежаКРаспределению = Результат.ПроцентПлатежа;
			СуммаЗалогаКРаспределению = Результат.СуммаЗалогаЗаТару;
			ПроцентЗалогаКРаспределению = Результат.ПроцентЗалогаЗаТару;
			
			сч = 1;
			Для Каждого Стр Из Параметры.ДатыОтгрузок Цикл
				
				Если Стр[ИмяКолонки] = 0 И (НЕ Параметры.ЕстьТара ИЛИ Стр.СуммаЗалогаЗаТару = 0) Тогда
					сч = сч + 1;
					Продолжить;
				КонецЕсли;
				
				НовСтр = Параметры.ЭтапыГрафикаОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Результат);
				НовСтр.ДатаОтгрузки = Стр.ДатаОтгрузки;
				
				Если сч <> Параметры.ДатыОтгрузок.Количество() Тогда
					НовСтр.СуммаПлатежа = Стр[ИмяКолонки]/Параметры.СуммаОплатыПоДокументу * Результат.СуммаПлатежа;
					НовСтр.ПроцентПлатежа = Стр[ИмяКолонки]/Параметры.СуммаОплатыПоДокументу * Результат.ПроцентПлатежа;
					СуммаПлатежаКРаспределению = СуммаПлатежаКРаспределению - НовСтр.СуммаПлатежа;
					ПроцентПлатежаКРаспределению = ПроцентПлатежаКРаспределению - НовСтр.ПроцентПлатежа;
					
					Если Параметры.ЕстьТара Тогда
						НовСтр.СуммаЗалогаЗаТару = Стр.СуммаЗалогаЗаТару/Параметры.СуммаЗалогаПоДокументу * Результат.СуммаЗалогаЗаТару;
						НовСтр.ПроцентЗалогаЗаТару = Стр.СуммаЗалогаЗаТару/Параметры.СуммаЗалогаПоДокументу * Результат.ПроцентЗалогаЗаТару;
						СуммаЗалогаКРаспределению = СуммаЗалогаКРаспределению - Результат.СуммаЗалогаЗаТару;
						ПроцентЗалогаКРаспределению = ПроцентЗалогаКРаспределению - Результат.ПроцентЗалогаЗаТару;
					КонецЕсли;
				Иначе
					НовСтр.СуммаПлатежа = СуммаПлатежаКРаспределению;
					НовСтр.ПроцентПлатежа = ПроцентПлатежаКРаспределению;
					
					Если Параметры.ЕстьТара Тогда
						НовСтр.СуммаЗалогаЗаТару = СуммаЗалогаКРаспределению;
						НовСтр.ПроцентЗалогаЗаТару = ПроцентЗалогаКРаспределению;
					КонецЕсли;
				КонецЕсли;
				
				ЭтапыГрафикаОплатыСдвигВариантОтсчетаПриИзменении(
					НовСтр,
					Параметры.ДатаЗаказа,
					Параметры.ДатаСогласования,
					НовСтр.ДатаОтгрузки,
					Параметры.СрокПереходаПраваСобственности,
					Параметры.ДатаПереходаПраваСобственности,
					Параметры.Календарь);
				
				сч = сч + 1;
			КонецЦикла;
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
		Форма.ЕстьРучныеИзмененияГрафикаОплат = Истина;
		
		Если Параметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеЗавершения, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПередУдалением" табличной части "ЭтапыГрафикаОплаты".
//
// Параметры:
// Форма                 - ФормаКлиентскогоПриложения - Форма документа/справочника.
// Отказ                 - Булево - флаг отказа от добавления новой строки.
// ЭтапыГрафикаОплаты    - ТаблицаЗначений, ДанныеФормыКоллекция - таблица этапов оплаты.
//
Процедура ЭтапыГрафикаОплатыПередУдалением(Форма, Отказ, ЭтапыГрафикаОплаты) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;
	
	Если Форма.НесколькоДатОтгрузки 
		И (ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки")
			ИЛИ ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
			ИЛИ ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")) Тогда
		
		Отказ = Истина;
		Сдвиг = ТекущиеДанные.Сдвиг;
		ВариантОплаты = ТекущиеДанные.ВариантОплаты;
		ВариантОтсчета = ТекущиеДанные.ВариантОтсчета;
		
		сч = 0;
		Пока сч < ЭтапыГрафикаОплаты.Количество() Цикл
			Строка = ЭтапыГрафикаОплаты[сч];
			Если Строка.Сдвиг = Сдвиг
				И Строка.ВариантОплаты = ВариантОплаты
				И Строка.ВариантОтсчета = ВариантОтсчета Тогда
				ЭтапыГрафикаОплаты.Удалить(сч);
			Иначе
				сч = сч + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПередНачаломИзменения" табличной части "ЭтапыГрафикаОплаты".
//
// Параметры:
// Форма                 - ФормаКлиентскогоПриложения - Форма документа/справочника.
// ПараметрыЭтапов       - см. ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты
// Отказ                 - Булево - флаг отказа от добавления новой строки.
// Оповещение            - ОписаниеОповещения - Описание оповещения формы, которое необходимо выполнить после изменения строки.
//
Процедура ЭтапыГрафикаОплатыПередНачаломИзменения(Форма, ПараметрыЭтапов, Отказ, Оповещение) Экспорт
	
	Если Форма.НесколькоДатОтгрузки Тогда
		Отказ = Истина;
		ТекущиеДанные = Форма.Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		Иначе
			ПараметрыЭтапов.Вставить("Операция",        "Изменение");
			ПараметрыЭтапов.Вставить("ВариантОплаты",   ТекущиеДанные.ВариантОплаты);
			ПараметрыЭтапов.Вставить("ВариантОтсчета",  ТекущиеДанные.ВариантОтсчета);
			ПараметрыЭтапов.Вставить("Сдвиг",           ТекущиеДанные.Сдвиг);
			ПараметрыЭтапов.Вставить("ДатаПлатежа",     ТекущиеДанные.ДатаПлатежа);
			
			ПараметрыЭтапов.Вставить("ВариантОплатыПередИзменением",   ТекущиеДанные.ВариантОплаты);
			ПараметрыЭтапов.Вставить("ВариантОтсчетаПередИзменением",  ТекущиеДанные.ВариантОтсчета);
			ПараметрыЭтапов.Вставить("СдвигПередИзменением",           ТекущиеДанные.Сдвиг);
			
			ПроцентЗалогаЗаТару = 0;
			ПроцентПлатежа      = 0;
			СуммаЗалогаЗаТару   = 0;
			СуммаПлатежа        = 0;
			
			Для Каждого Стр Из ПараметрыЭтапов.ЭтапыГрафикаОплаты Цикл
				Если Стр.Сдвиг = ТекущиеДанные.Сдвиг
					И Стр.ВариантОплаты = ТекущиеДанные.ВариантОплаты
					И Стр.ВариантОтсчета = ТекущиеДанные.ВариантОтсчета Тогда
					ПроцентПлатежа = ПроцентПлатежа + Стр.ПроцентПлатежа;
					СуммаПлатежа = СуммаПлатежа + Стр.СуммаПлатежа;
					Если ПараметрыЭтапов.ЕстьТара Тогда
						СуммаЗалогаЗаТару = СуммаЗалогаЗаТару + Стр.СуммаЗалогаЗаТару;
						ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТару + Стр.ПроцентЗалогаЗаТару;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыЭтапов.Вставить("ПроцентЗалогаЗаТару", ПроцентЗалогаЗаТару);
			ПараметрыЭтапов.Вставить("ПроцентПлатежа",      ПроцентПлатежа);
			ПараметрыЭтапов.Вставить("СуммаЗалогаЗаТару",   СуммаЗалогаЗаТару);
			ПараметрыЭтапов.Вставить("СуммаПлатежа",        СуммаПлатежа);
		КонецЕсли;
		
		ДополнительныеПараметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыЭтапов);
		ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОповещениеТекущее = Новый ОписаниеОповещения("ЭтапыГрафикаОплатыПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ЭтапОплаты",ПараметрыЭтапов, Форма,,,,ОповещениеТекущее,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Служебный обработчик оповещения "ПередНачаломИзменения".
Процедура ЭтапыГрафикаОплатыПередНачаломИзмененияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Форма = Параметры.Форма;
		ТекущиеДанные = Форма.Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(Результат.ДатаПлатежа) Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
			// Если был вариант отсчета от даты отгрузки, то необходимо удалить строки этого этапа от других дат отгрузки
			Если Результат.ВариантОтсчетаПередИзменением <> ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа")
				И Результат.ВариантОтсчетаПередИзменением <> ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования") Тогда
				сч = 0;
				Пока сч < Параметры.ЭтапыГрафикаОплаты.Количество() Цикл
					Строка = Параметры.ЭтапыГрафикаОплаты[сч];
					Если Строка.Сдвиг = Результат.СдвигПередИзменением
						И Строка.ВариантОплаты = Результат.ВариантОплатыПередИзменением
						И Строка.ВариантОтсчета = Результат.ВариантОтсчетаПередИзменением Тогда
						Параметры.ЭтапыГрафикаОплаты.Удалить(сч);
					Иначе
						сч = сч + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			
			СуммаПлатежаКРаспределению = Результат.СуммаПлатежа;
			ПроцентПлатежаКРаспределению = Результат.ПроцентПлатежа;
			СуммаЗалогаКРаспределению = Результат.СуммаЗалогаЗаТару;
			ПроцентЗалогаКРаспределению = Результат.ПроцентЗалогаЗаТару;
			
			сч = 0;
			Пока сч < Параметры.ЭтапыГрафикаОплаты.Количество() Цикл
				Строка = Параметры.ЭтапыГрафикаОплаты[сч];
				Если Строка.Сдвиг = Результат.СдвигПередИзменением
					И Строка.ВариантОплаты = Результат.ВариантОплатыПередИзменением
					И Строка.ВариантОтсчета = Результат.ВариантОтсчетаПередИзменением Тогда
					Параметры.ЭтапыГрафикаОплаты.Удалить(сч);
				Иначе
					сч = сч + 1;
				КонецЕсли;
			КонецЦикла;
			
			ИмяКолонки = ?(Параметры.ДатыОтгрузок.Количество() > 0 
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.ДатыОтгрузок[0],"СуммаПлатежа"),
							"СуммаПлатежа",
							"Сумма");
			
			сч = 1;
			Для Каждого Стр Из Параметры.ДатыОтгрузок Цикл
				
				Если Стр[ИмяКолонки] = 0 И (НЕ Параметры.ЕстьТара ИЛИ Стр.СуммаЗалогаЗаТару = 0) Тогда
					сч = сч + 1;
					Продолжить;
				КонецЕсли;
				
				НовСтр = Параметры.ЭтапыГрафикаОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Результат);
				НовСтр.ДатаОтгрузки = Стр.ДатаОтгрузки;
				
				Если сч <> Параметры.ДатыОтгрузок.Количество() Тогда
					НовСтр.СуммаПлатежа = Стр[ИмяКолонки]/Параметры.СуммаОплатыПоДокументу * Результат.СуммаПлатежа;
					НовСтр.ПроцентПлатежа = Стр[ИмяКолонки]/Параметры.СуммаОплатыПоДокументу * Результат.ПроцентПлатежа;
					СуммаПлатежаКРаспределению = СуммаПлатежаКРаспределению - НовСтр.СуммаПлатежа;
					ПроцентПлатежаКРаспределению = ПроцентПлатежаКРаспределению - НовСтр.ПроцентПлатежа;
					
					Если Параметры.ЕстьТара Тогда
						НовСтр.СуммаЗалогаЗаТару = Стр.СуммаЗалогаЗаТару/Параметры.СуммаЗалогаПоДокументу * Результат.СуммаЗалогаЗаТару;
						НовСтр.ПроцентЗалогаЗаТару = Стр.СуммаЗалогаЗаТару/Параметры.СуммаЗалогаПоДокументу * Результат.ПроцентЗалогаЗаТару;
						СуммаЗалогаКРаспределению = СуммаЗалогаКРаспределению - Результат.СуммаЗалогаЗаТару;
						ПроцентЗалогаКРаспределению = ПроцентЗалогаКРаспределению - Результат.ПроцентЗалогаЗаТару;
					КонецЕсли;
					
				Иначе
					НовСтр.СуммаПлатежа = СуммаПлатежаКРаспределению;
					НовСтр.ПроцентПлатежа = ПроцентПлатежаКРаспределению;
					Если Параметры.ЕстьТара Тогда
						НовСтр.СуммаЗалогаЗаТару = СуммаЗалогаКРаспределению;
						НовСтр.ПроцентЗалогаЗаТару = ПроцентЗалогаКРаспределению;
					КонецЕсли;
				КонецЕсли;
				
				ЭтапыГрафикаОплатыСдвигВариантОтсчетаПриИзменении(
					НовСтр,
					Параметры.ДатаЗаказа,
					Параметры.ДатаСогласования,
					НовСтр.ДатаОтгрузки,
					Параметры.СрокПереходаПраваСобственности,
					Параметры.ДатаПереходаПраваСобственности,
					Параметры.Календарь);
				
				сч = сч + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если Результат.Модифицированность Тогда
			Форма.ЕстьРучныеИзмененияГрафикаОплат = Истина;
		КонецЕсли;
		Форма.Модифицированность = Истина;
		
		Если Параметры.ОповещениеПослеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеЗавершения, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "Сдвиг" и "ВариантОтсчета".
//
// Параметры:
// ТекущиеДанные                    - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ДатаЗаказа                       - Дата - Дата заказа, если есть.
// ДатаСогласования                - Дата - Дата согласования заказа, если есть.
// ДатаОтгрузки                     - Дата - Дата отгрузки, если есть.
// СрокПереходаПраваСобственности   - Число - Срок перехода права собственности из соглашения.
// ДатаПереходаПраваСобственности   - Дата - Дата перехода права собственности из документа, если есть.
// Календарь                        - СправочникСсылка.ПроизводственныеКалендари - Календарь, по которому считаются рабочие дни.
//
Процедура ЭтапыГрафикаОплатыСдвигВариантОтсчетаПриИзменении(ТекущиеДанные,
		ДатаЗаказа,
		ДатаСогласования,
		ДатаОтгрузки,
		СрокПереходаПраваСобственности,
		ДатаПереходаПраваСобственности,
		Календарь = Неопределено) Экспорт
	
	СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
	СтруктураПараметров.ВариантОтсчета                 = ТекущиеДанные.ВариантОтсчета;
	СтруктураПараметров.Сдвиг                          = ТекущиеДанные.Сдвиг;
	СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
	СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
	СтруктураПараметров.ДатаОтгрузки                   = ДатаОтгрузки;
	СтруктураПараметров.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
	СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
	СтруктураПараметров.Календарь                      = Календарь;
	
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		ТекущиеДанные.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
	Иначе
		ТекущиеДанные.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
	КонецЕсли;
	
	Если (ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения")
			Или ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки")
			ИЛИ ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПустаяСсылка")) 
		И (ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
			Или ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")) Тогда
		ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг");
	ИначеЕсли (ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения")
			Или ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления")
			ИЛИ ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПустаяСсылка")) 
		И (ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
			Или ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")) Тогда
		ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг");
	ИначеЕсли ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки") 
				И (ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг")
					ИЛИ ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПустаяСсылка")) Тогда
		ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки");
	ИначеЕсли ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки") 
				И (ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг")
					ИЛИ ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПустаяСсылка")) Тогда
		ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления");
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ВариантКонтроля".
//
// Параметры:
// ТекущиеДанные                    - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ДатаЗаказа                       - Дата - Дата заказа, если есть.
// ДатаСогласования                 - Дата - Дата согласования заказа, если есть.
// ДатаОтгрузки                     - Дата - Дата отгрузки, если есть.
// СрокПереходаПраваСобственности   - Число - Срок перехода права собственности из соглашения.
// ДатаПереходаПраваСобственности   - Дата - Дата перехода права собственности из документа, если есть.
// Календарь                        - СправочникСсылка.ПроизводственныеКалендари - Календарь, по которому считаются рабочие дни.
//
Процедура ЭтапыГрафикаОплатыДатаПлатежаПриИзменении(ТекущиеДанные,
		ДатаЗаказа,
		ЗНАЧ ДатаСогласования,
		ДатаОтгрузки,
		СрокПереходаПраваСобственности,
		ДатаПереходаПраваСобственности,
		Календарь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаСогласования) Тогда
		ДатаСогласования = ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВариантОтсчета) Тогда
		Сдвиг = 0;
	Иначе
		
		СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
		СтруктураПараметров.ВариантОтсчета                 = ТекущиеДанные.ВариантОтсчета;
		СтруктураПараметров.ДатаПлатежа                    = ТекущиеДанные.ДатаПлатежа;
		СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
		СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
		СтруктураПараметров.ДатаОтгрузки                   = ДатаОтгрузки;
		СтруктураПараметров.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
		СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
		СтруктураПараметров.Календарь                      = Календарь;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			Сдвиг = ЭтапыОплатыВызовСервера.СдвигПоКалендарю(СтруктураПараметров);
		Иначе
			Сдвиг = ЭтапыОплатыКлиентСервер.СдвигБезКалендаря(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные.Сдвиг = Сдвиг;
	
	Если Сдвиг < 0 Тогда
		ТекущиеДанные.Сдвиг = 0;
		ЭтапыГрафикаОплатыСдвигВариантОтсчетаПриИзменении(ТекущиеДанные, 
			ДатаЗаказа,
			ДатаСогласования,
			ДатаОтгрузки,
			СрокПереходаПраваСобственности,
			ДатаПереходаПраваСобственности,
			Календарь);
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ВариантКонтроля".
//
// Параметры:
// ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ДатаЗаказа                       - Дата - Дата заказа, если есть.
// ДатаСогласования                - Дата - Дата согласования заказа, если есть.
// ДатаОтгрузки                     - Дата - Дата отгрузки, если есть.
// СрокПереходаПраваСобственности   - Число - Срок перехода права собственности из соглашения.
// ДатаПереходаПраваСобственности   - Дата - Дата перехода права собственности из документа, если есть.
// Календарь                        - СправочникСсылка.ПроизводственныеКалендари - Календарь, по которому считаются рабочие дни.
//
Процедура ЭтапыГрафикаОплатыВариантКонтроляПриИзменении(ТекущиеДанные,
		ДатаЗаказа,
		ДатаСогласования,
		ДатаОтгрузки,
		СрокПереходаПраваСобственности,
		ДатаПереходаПраваСобственности,
		Календарь = Неопределено) Экспорт
	
	ИзменилсяВариантОтсчета = Ложь;
	Если (ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения")
			Или ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления")
			Или ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения")
			Или ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки")) 
		И (ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
			Или ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")) Тогда
		ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки");
		ИзменилсяВариантОтсчета = Истина;
	ИначеЕсли ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки") 
				И (ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг")
					Или ТекущиеДанные.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг")) Тогда
		ТекущиеДанные.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки");
		ИзменилсяВариантОтсчета = Истина;
	КонецЕсли;
	
	Если ИзменилсяВариантОтсчета Тогда
		ТекущиеДанные.Сдвиг = 0;
		СтруктураПараметров = ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа();
		СтруктураПараметров.ВариантОтсчета                 = ТекущиеДанные.ВариантОтсчета;
		СтруктураПараметров.Сдвиг                          = ТекущиеДанные.Сдвиг;
		СтруктураПараметров.ДатаЗаказа                     = ДатаЗаказа;
		СтруктураПараметров.ДатаСогласования               = ДатаСогласования;
		СтруктураПараметров.ДатаОтгрузки                   = ДатаОтгрузки;
		СтруктураПараметров.ДатаПереходаПраваСобственности = ДатаПереходаПраваСобственности;
		СтруктураПараметров.СрокПереходаПраваСобственности = СрокПереходаПраваСобственности;
		СтруктураПараметров.Календарь                      = Календарь;
		
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			ТекущиеДанные.ДатаПлатежа = ЭтапыОплатыВызовСервера.ДатаПлатежаПоКалендарю(СтруктураПараметров);
		Иначе
			ТекущиеДанные.ДатаПлатежа = ЭтапыОплатыКлиентСервер.ДатаПлатежаБезКалендаря(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

// Показывает оповещение пользователя об окончании заполнения этапов графика оплаты.
//
Процедура ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Этапы оплаты заполнены'"),
		,
		НСтр("ru='Этапы графика оплаты заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя о невозможности заполнения этапов графика оплаты.
//
Процедура ОповеститьОНевозможностиЗаполненияЭтаповГрафикаОплаты() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Этапы оплаты очищены'"),
		,
		НСтр("ru='Сумма неотмененных строк заказа нулевая. Таблица этапов оплаты очищена'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

#КонецОбласти

Процедура ПредложитьЗаполнитьГрафикОплатПоУмолчанию(Форма, ОписаниеОповещения, Отказ) Экспорт 
	
	ЕстьДатыОтДатыОтгрузки = Ложь;
	Для Каждого СтрокаЭтапа Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		Если СтрокаЭтапа.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки")
			ИЛИ СтрокаЭтапа.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
			ИЛИ СтрокаЭтапа.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности") Тогда 
			ЕстьДатыОтДатыОтгрузки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если ЕстьДатыОтДатыОтгрузки Тогда
		
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров;
		
		Для Каждого СтруктураПараметров Из МассивПараметров Цикл
			Если СтруктураПараметров.ИзменилосьНесколькоДатОтгрузки Тогда
				
				Если СтруктураПараметров.ЕстьРучныеИзмененияГрафикаОплат Тогда
					Отказ = Истина;
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("Форма", Форма);
					ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
					ПоказатьВопрос(
						ОписаниеОповещения,
						НСтр("ru = 'Были изменены плановые даты отгрузки, перезаполнить график оплат по умолчанию?'"),
						РежимДиалогаВопрос.ДаНет);
				Иначе
					Отказ = Истина;
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
