
#Область СлужебныйПрограммныйИнтерфейс

#Область Номенклатура

// Процедура открывает форму выбора номенклатуры.
// 
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
//
Процедура ОткрытьФормуВыбораНоменклатуры(ФормаВладелец, Знач Реквизиты) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Услуга", Ложь);
	ПараметрыФормы.Вставить("СписокНоменклатуры", Реквизиты.СписокНоменклатуры);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

// Процедура открывает форму выбора ТНВЭД
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец
//  СписокТНВЭД - СписокЗначений - устанавливает отбор по списку ТНВЭД
//
Процедура ОткрытьФормуВыбораТНВЭД(ФормаВладелец, СписокТНВЭД) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокТНВЭД", СписокТНВЭД);
	
	ОткрытьФорму("Справочник.КлассификаторТНВЭД.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры 

// Обрабатывает оповещения от системы
//
// Параметры
//  ИмяСобытия - Строка - Имя события может быть использовано для идентификации сообщений принимающими их формами.
//  Параметр   - Произвольный - Параметр сообщения. Могут быть переданы любые необходимые данные.
//  Источник   - Произвольный - Источник события. Например, в качестве источника может быть указана другая форма.
//  Список     - ДинамическийСписок - ссылка на динамический список на форме.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Список) Экспорт
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, что указанное событие - это событие об изменении набора свойств.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма документа, в которой была вызвана обработка оповещения.
//  ИмяСобытия - Строка       - имя обрабатываемого события.
//  Параметр   - Произвольный - параметры, переданные в событии.                                                                                             реквизит.
//  Источник   - Произвольный - Источник события.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда это оповещение нужно обработать в форме.
//
Функция ОбрабатыватьОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	Если Не Источник = Неопределено Тогда
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Если ИмяСобытия = "Запись_УведомлениеОВвозеПрослеживаемыхТоваров" Тогда
				Результат = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ИмяСобытия = "Запись_УведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Вызывается в обработчике ОбработкаВыбора() формы документа-основания Уведомления о ввозе прослеживаемых товаров.
// Возвращает признак того, что закрыта форма Уведомления о ввозе прослеживаемых товаров. 
// При этом требуется обновить представление Уведомления на форме документа.
//
// Параметры:
// 	ИсточникВыбора - Произвольный - Форма, пославшая оповещение о выборе.
//
// Возвращаемое значение:
// 	Булево - Признак того, что событие закрытия формы документа.
//
Функция ЗаконченоРедактированиеУведомленияОВвозеПрослеживаемыхТоваров(ИсточникВыбора) Экспорт
	
	Результат = Ложь;
	//++ Локализация
	Если ИсточникВыбора.ИмяФормы = "Документ.УведомлениеОВвозеПрослеживаемыхТоваров.Форма.ФормаДокумента" Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Выполняет обработку навигационной ссылки форматированной строки, полученной с помощью функции УчетПрослеживаемыхТоваровЛокализация.УведомленияОВвозеПрослеживаемыхТоваровПоДокументуПоступления(). 
// Открывает форму нового или существующего уведомления о ввозе прослеживаемых товаров. Если на основании документа зарегистрировано несколько уведомлений о ввозе, то открывает список документов.
// Открывает форму для оформления уведомлений, если для документа требуется оформление более одного уведомления о ввозе.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа
// 	НавигационнаяСсылка - Строка - Навигационная ссылка форматированной строки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ПараметрыРегистрации - См. Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииУведомленийОВвозеПрослеживаемыхТоваров
//
Процедура ОбработкаНавигационнойСсылкиУведомленияОВвозеПрослеживаемыхТоваров(Форма, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации) Экспорт
	
//++ Локализация
	Если НавигационнаяСсылка = "ОткрытьСписокУведомленийОВвозеПрослеживаемыхТоваров" Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ИмяФормыУведомлений = "ЖурналДокументов.ПрослеживаемостьУведомления.ФормаСписка";
		ПараметрыФормы = Новый Структура;	
		ПараметрыФормы.Вставить("ТипУведомления", Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
		ПараметрыФормы.Вставить("Организация", ПараметрыРегистрации.Организация);		
		ПараметрыФормы.Вставить("Основание", ПараметрыРегистрации.Ссылка);
			
		ОткрытьФорму(
			ИмяФормыУведомлений,
			ПараметрыФормы,
			,,,,,
			РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормированиеУведомленийОВвозеПеремещении" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Основание", ПараметрыРегистрации.Ссылка);
		ПараметрыФормы.Вставить("Организация", ПараметрыРегистрации.Организация);
		ПараметрыФормы.Вставить("ТипУведомления", Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
		ОткрытьФорму("ОбщаяФорма.ФормированиеУведомленийОВвозеПеремещении", ПараметрыФормы, );
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьУведомлениеОВвозеПрослеживаемыхТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Ключ = ПрослеживаемостьВызовСервераПереопределяемый.УведомлениеОВвозеПрослеживаемыхТоваровПоОснованию(ПараметрыРегистрации.Ссылка, Ложь);
		Если ЗначениеЗаполнено(Ключ) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Ключ);
			ОткрытьФорму("Документ.УведомлениеОВвозеПрослеживаемыхТоваров.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйУведомлениеОВвозеПрослеживаемыхТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Ключ = ПрослеживаемостьВызовСервераПереопределяемый.РаспоряжениеКОформлениюУведомленияОВвозеПрослеживаемыхТоваровПоОснованию(ПараметрыРегистрации.Ссылка);
		Если ЗначениеЗаполнено(Ключ) Тогда
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Организация", 		Ключ.Организация);
			ДанныеЗаполнения.Вставить("КодТНВЭД", 			Ключ.КодТНВЭД);
			ДанныеЗаполнения.Вставить("ПервичныйДокумент", 	Ключ.ДокументПоступления);
			ДанныеЗаполнения.Вставить("ЕдиницаИзмерения", 	Ключ.ЕдиницаИзмерения);			
			ДанныеЗаполнения.Вставить("Контрагент", 		ПараметрыРегистрации.Контрагент);
			ДанныеЗаполнения.Вставить("Склад",				ПараметрыРегистрации.Склад);	
	
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Основание",  			  ДанныеЗаполнения);
			ДополнительныеПараметры.Вставить("ОткрыватьСуществующую", Ложь);
			ДополнительныеПараметры.Вставить("Форма",                 Форма);
			
			Оповещение = Новый ОписаниеОповещения("ВвестиНовыйУведомлениеОВвозеПрослеживаемыхТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбщегоНазначенияУТКлиент.ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(Форма, Оповещение);
		КонецЕсли;
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

// Выполняет обработку навигационной ссылки форматированной строки, полученной с помощью функции УчетПрослеживаемыхТоваровЛокализация.УведомленияОПеремещенииПрослеживаемыхТоваровПоДокументуРеализации(). 
// Открывает форму нового или существующего уведомления о перемещени прослеживаемых товаров. Если на основании документа создано несколько проведенных уведомлений то открывает форму списка журнала Прослеживаемость уведомления. 
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа
// 	НавигационнаяСсылка - Строка - Навигационная ссылка форматированной строки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	ПараметрыРегистрации - См. Документы.РеализацияТоваровУслуг.ПараметрыРегистрацииУведомленийОПеремещенииПрослеживаемыхТоваров
//
Процедура ОбработкаНавигационнойСсылкиУведомленияОПеремещенииПрослеживаемыхТоваров(Форма, НавигационнаяСсылка, СтандартнаяОбработка, ПараметрыРегистрации) Экспорт
	
//++ Локализация
	Если НавигационнаяСсылка = "ОткрытьФормированиеУведомленийОВвозеПеремещении" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Основание", ПараметрыРегистрации.Ссылка);
		ПараметрыФормы.Вставить("Организация", ПараметрыРегистрации.Организация);
		ПараметрыФормы.Вставить("ТипУведомления", Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"));
		ОткрытьФорму("ОбщаяФорма.ФормированиеУведомленийОВвозеПеремещении", ПараметрыФормы, );
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьУведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Ключ = ПрослеживаемостьВызовСервераПереопределяемый.УведомлениеОПеремещенииПрослеживаемыхТоваровПоОснованию(ПараметрыРегистрации.Ссылка, Ложь);
		Если ЗначениеЗаполнено(Ключ) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Ключ);
			ОткрытьФорму("Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйУведомлениеОПеремещенииПрослеживаемыхТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Ключ = ПрослеживаемостьВызовСервераПереопределяемый.РаспоряжениеКОформлениюУведомленияОПеремещенииПрослеживаемыхТоваровПоОснованию(ПараметрыРегистрации.Ссылка);
		Если ЗначениеЗаполнено(Ключ) Тогда
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Организация", 				Ключ.Организация);
			ДанныеЗаполнения.Вставить("КодТНВЭД", 					Ключ.КодТНВЭД);
			ДанныеЗаполнения.Вставить("Основание", 					Ключ.СопроводительныйДокумент);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Основание",  			  ДанныеЗаполнения);
			ДополнительныеПараметры.Вставить("ОткрыватьСуществующую", Ложь);
			ДополнительныеПараметры.Вставить("Форма",                 Форма);
			
			Оповещение = Новый ОписаниеОповещения("ВвестиНовыйУведомлениеОПеремещенииПрослеживаемыхТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбщегоНазначенияУТКлиент.ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(Форма, Оповещение);
		КонецЕсли;
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

Функция ФормаВыбораНоменклатуры() Экспорт
	
	Возврат "Справочник.Номенклатура.Форма.ФормаВыбора";
	
КонецФункции

Функция ФормаВыбораСопроводительногоДокументаВУведомленииОПеремещении() Экспорт
	
	МассивФорм = Новый Массив;
	МассивФорм.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаВыбора");
	МассивФорм.Добавить("Документ.РеализацияУслугПрочихАктивов.Форма.ФормаВыбора");
	
	Возврат МассивФорм;
	
КонецФункции

Функция ФормаВыбораТНВЭД() Экспорт
	
	Возврат "Справочник.КлассификаторТНВЭД.Форма.ФормаВыбора";
	
КонецФункции

// Проверяет соответствие реквизитов шапки с реквизитами табличной части
//
// Параметры: 
// ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец
// Отказ - булево - признак отказа
// ПараметрыЗаписи - РежимЗаписиДокумента - режимы записи документа
//
Процедура ПроверитьСоответствиеРеквизитовВШапкеИТабличнойЧасти(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	НомерКорректировки = Объект.НомерКорректировки;
	
	ТекущийКодТНВЭД = ?(НомерКорректировки = 0, Объект.КодТНВЭД, Объект.КодТНВЭДПослеИзменения);
	ТекущаяЕдиницаИзмерения = ?(НомерКорректировки = 0, Объект.ЕдиницаИзмерения, Объект.ЕдиницаИзмеренияПослеИзменения);
	
	Для каждого ТекущаяСтрокаТовары Из Объект.Товары Цикл
		
		Если НомерКорректировки > 0 
			И ТекущаяСтрокаТовары.КоличествоПослеИзменения = 0
			И ТекущаяСтрокаТовары.КоличествоПрослеживаемостиПослеИзменения = 0
			И ТекущаяСтрокаТовары.СуммаПослеИзменения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыНоменклатуры = ПрослеживаемостьФормыВызовСервера.ПараметрыНоменклатуры(ТекущаяСтрокаТовары.Номенклатура);
		
		Если ПараметрыНоменклатуры.КодТНВЭД <> ТекущийКодТНВЭД Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Номенклатура'"),,,
				НСтр("ru = 'В номенклатуре %1 ТН ВЭД %2 не совпадает со значением ТН ВЭД %3 в шапке документа'"));
				
			ТекстСообщения = СтрШаблон(
				ТекстСообщения, 
				ТекущаяСтрокаТовары.Номенклатура,
				ПараметрыНоменклатуры.КодТНВЭД,
				ТекущийКодТНВЭД);
				
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Товары", ТекущаяСтрокаТовары.НомерСтроки, "Номенклатура");
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
			
		ИначеЕсли ПараметрыНоменклатуры.ЕдиницаИзмерения <> ТекущаяЕдиницаИзмерения Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Номенклатура'"),,,
				НСтр("ru = 'В номенклатуре %1 единица измерения %2 не совпадает со значением единицы измерения %3 в шапке документа'"));
				
			ТекстСообщения = СтрШаблон(
				ТекстСообщения,
				ТекущаяСтрокаТовары.Номенклатура,
				ПараметрыНоменклатуры.ЕдиницаИзмерения,
				ТекущаяЕдиницаИзмерения);
			
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Товары", ТекущаяСтрокаТовары.НомерСтроки, "Номенклатура");
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКДанным,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВвестиНовыйУведомлениеОВвозеПрослеживаемыхТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
//++ Локализация
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДополнительныеПараметры.Основание);
	
	ОткрытьФорму("Документ.УведомлениеОВвозеПрослеживаемыхТоваров.ФормаОбъекта", ПараметрыФормы, ДополнительныеПараметры.Форма);
//-- Локализация
	
КонецПроцедуры

Процедура ВвестиНовыйУведомлениеОПеремещенииПрослеживаемыхТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
//++ Локализация
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДополнительныеПараметры.Основание);
	
	ОткрытьФорму("Документ.УведомлениеОПеремещенииПрослеживаемыхТоваров.ФормаОбъекта", ПараметрыФормы, ДополнительныеПараметры.Форма);
//-- Локализация
	
КонецПроцедуры

#КонецОбласти
