////////////////////////////////////////////////////////////////////////////////
// В модуле собраны процедуры и функции, которые вызываются из форм обработки
// "РабочееМестоРаботникаСклада". Для различных разрешений экрана созданы
// отдельные формы. Все вызовы передаются из форм в этот общий модуль.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает значения реквизитов формы, необходимые для учета особенностей
// отображения форм на устройствах с различными расширениями экрана.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьНастройкиДляРазрешенияЭкрана(Форма) Экспорт
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
		Форма.ДлинаТекстаЗаголовкаФормы = 25;
		Форма.ДлинаТекстаЗаголовкаФормыДляСравнения = 21;
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение320х320 Тогда
		Форма.ДлинаТекстаЗаголовкаФормы = 34;
		Форма.ДлинаТекстаЗаголовкаФормыДляСравнения = 29;
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		Форма.ДлинаТекстаЗаголовкаФормы = 54;
		Форма.ДлинаТекстаЗаголовкаФормыДляСравнения = 44;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив пользователей - исполнителей складских заданий.
// В массив пользователей включается пустая ссылка.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания.
//
// Возвращаемое значение:
//	ФиксированныйМассив из СправочникСсылка.Пользователи - все исполнители складских заданий.
//
Функция ВсеИсполнителиСкладскихЗаданий(Пользователь) Экспорт
	
	ИсполнителиЗаданий = Новый Массив;
	ИсполнителиЗаданий.Добавить(Пользователь);
	ИсполнителиЗаданий.Добавить(Справочники.Пользователи.ПустаяСсылка());
	
	Возврат Новый ФиксированныйМассив(ИсполнителиЗаданий);
	
КонецФункции

// Возвращает массив пользователей - исполнителей складских заданий.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - текущий исполнитель.
//
// Возвращаемое значение:
//	ФиксированныйМассив из СправочникСсылка.Пользователи - исполнители складских заданий.
//
Функция ИсполнителиСкладскихЗаданий(Пользователь) Экспорт
	
	ИсполнителиЗаданий = Новый Массив;
	ИсполнителиЗаданий.Добавить(Пользователь);
	
	Возврат Новый ФиксированныйМассив(ИсполнителиЗаданий);
	
КонецФункции

// Процедура обновляет заголовки элементов основного меню выбора типа операции.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОбновитьОсновноеМеню(Форма) Экспорт
	
	Если Форма.РежимВебСервиса Тогда
		
		ВерсияСервиса = РабочееМестоРаботникаСкладаXDTO.ВерсияСервисаИзФормы(Форма);
		Прокси = РабочееМестоРаботникаСкладаXDTO.ПроксиВебСервиса(
			Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервиса);
		
		// Приемка
		КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданий(Форма, Прокси, "Приемка");
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПриемка", НСтр("ru = 'Приемка'"), КоличествоЗаданий);
		
		// Размещение
		КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданий(Форма, Прокси, "Размещение");
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюРазмещение", НСтр("ru = 'Размещение'"), КоличествоЗаданий);
		
		// Отбор
		КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданий(Форма, Прокси, "Отбор");
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюОтбор", НСтр("ru = 'Отбор'"), КоличествоЗаданий);
		
		// Проверка отбора
		КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданий(Форма, Прокси, "ПроверкаОтбора");
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПроверкаОтбора", НСтр("ru = 'Проверка отбора'"),
			КоличествоЗаданий);
		
		// Пересчет
		КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданий(Форма, Прокси, "Пересчет");
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПересчет", НСтр("ru = 'Пересчет'"), КоличествоЗаданий);
		
		// Перемещение
		КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданий(Форма, Прокси, "Перемещение");
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПеремещение", НСтр("ru = 'Перемещение'"),
			КоличествоЗаданий);
		
	Иначе
		
		ВсеИсполнители = ВсеИсполнителиСкладскихЗаданий(Форма.Пользователь);
		
		// Приемка
		КоличествоЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(
			Форма.Склад, Форма.Помещение, "Приемка", ВсеИсполнители);
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПриемка", НСтр("ru = 'Приемка'"), КоличествоЗаданий);
		
		// Размещение
		КоличествоЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(
			Форма.Склад, Форма.Помещение, "Размещение", ВсеИсполнители);
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюРазмещение", НСтр("ru = 'Размещение'"),
			КоличествоЗаданий);
		
		// Отбор
		КоличествоЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(
			Форма.Склад, Форма.Помещение, "Отбор", ВсеИсполнители);
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюОтбор", НСтр("ru = 'Отбор'"), КоличествоЗаданий);
		
		// Проверка отбора
		КоличествоЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(
			Форма.Склад, Форма.Помещение, "ПроверкаОтбора", ВсеИсполнители);
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПроверкаОтбора", НСтр("ru = 'Проверка отбора'"),
			КоличествоЗаданий);
		
		// Пересчет
		КоличествоЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(
			Форма.Склад, Форма.Помещение, "Пересчет", ВсеИсполнители);
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПересчет", НСтр("ru = 'Пересчет'"), КоличествоЗаданий);
		
		// Перемещение
		КоличествоЗаданий= РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(
			Форма.Склад, Форма.Помещение, "Перемещение", ВсеИсполнители);
		УстановитьСвойстваЭлементаОсновногоМеню(Форма, "ОсновноеМенюПеремещение", НСтр("ru = 'Перемещение'"),
			КоличествоЗаданий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает все доступные (или доступные только текущему исполнителю)
// складские задания в списке заданий.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОтобразитьВсеТолькоСвоиСкладскиеЗадания(Форма) Экспорт
	
	Задания = Форма.Задания;
	Форма.ОтображатьВсеЗадания = Не (Форма.ОтображатьВсеЗадания);
	
	Если Форма.ОтображатьВсеЗадания Тогда
		Форма.Элементы.Задания.ОтборСтрок = Неопределено;
		КоличествоДокументов = Задания.Количество();
	Иначе
		Отбор = Новый Структура("Исполнитель", Форма.Пользователь);
		КоличествоДокументов = Задания.НайтиСтроки(Отбор).Количество();
		
		Форма.Элементы.Задания.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;
	
	УстановитьЗаголовокСпискаЗаданий(Форма, КоличествоДокументов);
	
КонецПроцедуры

// Переключает панель страницы формы на страницу выбора задания. Устанавливает параметры динамического
// списка заданий.
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 	* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 		** Задания - ТаблицаФормы - таблица, содержащая информацию о складских заданиях.
// 		** ЗаданияПоказатьВсе - КнопкаФормы - кнопка, выполняющая фильтр отображения всех складских задания.
// ТипЗадания - Строка - тип складского задания.
//
Процедура ПерейтиКВыборуЗадания(Форма, ТипЗадания) Экспорт
	
	Задания = Форма.Задания;
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	
	// Установить параметры текущего режима.
	ПараметрыРежима.Режим = "ВыборЗадания";
	ПараметрыРежима.ТипЗадания = ТипЗадания;
	
	// Установить текст заголовка формы - вид заданий и их количество.
	ВсеИсполнители = ВсеИсполнителиСкладскихЗаданий(Форма.Пользователь);
	
	// Установить параметры списка заданий.
	Задания.Очистить();
	
	Если РежимВебСервиса Тогда
		ТаблицаЗаданий = РабочееМестоРаботникаСкладаXDTO.ТаблицаЗаданий(Форма, ТипЗадания);
	Иначе
		ТаблицаЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТаблицаЗаданий(Форма.Склад, Форма.Помещение,
			ТипЗадания, ВсеИсполнители);
	КонецЕсли;
	
	Если Форма.ОтображатьВсеЗадания Тогда
		КоличествоДокументов = ТаблицаЗаданий.Количество();
		
		Форма.Элементы.Задания.ОтборСтрок = Неопределено;
	Иначе
		Отбор = Новый Структура("Исполнитель", Форма.Пользователь);
		КоличествоДокументов = ТаблицаЗаданий.НайтиСтроки(Отбор).Количество();
		
		Форма.Элементы.Задания.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;
	
	// Установить текст заголовка формы - вид заданий и их количество.
	УстановитьЗаголовокСпискаЗаданий(Форма, КоличествоДокументов);
	
	Задания.Загрузить(ТаблицаЗаданий);
	
	// Установить параметры колонок списка заданий.
	Элементы.Задания.Обновить();
	
	// Сбросить видимость вспомогательных колонок
	Элементы.ЗаданияВес.Видимость = Ложь;
	Элементы.ЗаданияПорядокДоставки.Видимость = Ложь;
	Элементы.ЗаданияЕдиницаИзмерения.Видимость = Ложь;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		Элементы.ЗаданияВес.Видимость = Истина;
		Элементы.ЗаданияЕдиницаИзмерения.Видимость = Истина;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора"
		И Форма.ИспользуетсяУправлениеДоставкой Тогда
		
		Элементы.ЗаданияПорядокДоставки.Видимость = Истина;
		
	КонецЕсли;
	
	// У приемки всегда должен быть указан ответственный, не может быть пустого исполнителя.
	Элементы.ЗаданияПоказатьВсе.Доступность = Не (ТипЗадания = "Приемка");
	
	ПерейтиНаСтраницу(Форма, "СтраницаВыборЗадания");
	
КонецПроцедуры

// Вызывается при вводе количества на странице предназначенной для ручного указания количества отсканированных товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВводКоличества(Форма) Экспорт
	
	СброситьПризнакиСканированияВсехПараметров(Форма);
	УстановитьПризнакСканированияПараметра(Форма, "Количество", Истина);
	ПерейтиКСледующемуПараметруСканирования(Форма);
	ПриСканированииЗначения(Форма, Форма.ВводКоличестваКоличество);
	
КонецПроцедуры

// Выполняется при сканировании штрихкода задания при активной форме списка заданий.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Штрихкод - Строка - штрихкод документа - складского задания.
//
Процедура ПриСканированииШтрихкодаЗадания(Форма, Штрихкод) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	РежимВебСервиса = Форма.РежимВебСервиса;
	РежимВыбораОперации = (Форма.ПараметрыРежима.Режим = "ВыборОперации");
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	Если РежимВебСервиса Тогда
		ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ПараметрыЗаданияПоШтрихкоду(Форма, Штрихкод, ТипЗадания);
	Иначе
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗаданияПоШтрихкоду(Штрихкод, Форма.Склад,
			Форма.Помещение, Форма.Пользователь, ТипЗадания, РежимВыбораОперации);
	КонецЕсли;
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		
		Если РежимВыбораОперации Тогда
			ТипЗадания = "";
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ТипЗадания);
		
		ПоказатьДиалогСообщение(Форма, ПараметрыЗадания.ТекстСообщения, Кнопки);
		
		Возврат;
		
	КонецЕсли;
	
	ВзятьЗаданиеВРаботу(Форма, ПараметрыЗадания.Задание, ПараметрыЗадания);
	
КонецПроцедуры

// Выполняется при сканировании значения штрихкода товара, серии,
// или при вводе значения с помощью режима ручного ввода.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ЗначениеСканирования - Строка, Число - значение сканирования.
//	ДопЗначениеСканирования - Неопределено - доп. параметр, используется в том случае, если значение
//		сканирования было введено вручную.
//	ЭтоСканирование - Булево - Истина, если значение сканирования получено через ТСД.
//
Процедура ПриСканированииЗначения(Форма, Знач ЗначениеСканирования, ДопЗначениеСканирования = Неопределено,
	ЭтоСканирование = Ложь) Экспорт
	
	Перем Ячейка, Товар, Серия;
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	Если (ТипЗадания = "Пересчет"
			Или (ТипЗадания = "Размещение"
				И ЭтоНаборТоваров)
			Или ТипЗадания = "Приемка"
			Или ТипЗадания = "ПроверкаОтбора")
		И ПараметрСканирования = "Серия"
		И (ЭтоШтрихкодТовара(ЗначениеСканирования, Товар)
			Или (ТипЗадания = "Приемка"
				И Не ЭтоШтрихКодСерии(Форма, ЗначениеСканирования, ДопЗначениеСканирования)
				И ЭтоШтрихкодУпаковочногоЛиста(ЗначениеСканирования, ДопЗначениеСканирования, Товар))) Тогда
		
		Если Не ТоварСовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
			Форма.ПараметрыРежима.ПараметрСканирования = "Номенклатура";
			ПараметрСканирования = "Номенклатура";
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	Если ПараметрСканирования = "Ячейка" Тогда
		ПриСканированииЯчейки(Форма, ЗначениеСканирования, Ячейка, ЕстьОшибки, ЭтоСканирование);
		ПослеСканированияЯчейки(Форма, Ячейка, ЕстьОшибки);
	ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
		ПриСканированииТовара(Форма, ЗначениеСканирования, Товар, ЕстьОшибки);
		ПослеСканированияТовара(Форма, Товар, ЕстьОшибки);
		
		Если Форма.ПараметрыРежима.Режим = "ВводКоличества" Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		ПриСканированииСерии(Форма, ЗначениеСканирования, ДопЗначениеСканирования, Серия, ЕстьОшибки);
		ПослеСканированияСерии(Форма, Серия, ЕстьОшибки);
		
		Если Форма.ПараметрыРежима.Режим = "ВводКоличества" Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрСканирования = "Количество" Тогда
		ЗначениеСканирования = ПриВводеКоличества(Форма, ЗначениеСканирования, ЕстьОшибки);
		Если Форма.ПараметрыРежима.Режим = "ВводКоличестваПоНазначению" Тогда
			ПослеВводаКоличества(Форма, Макс(0, Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано - ЗначениеСканирования), ЕстьОшибки);
			Форма.ТекущаяСтрокаСканирования.Назначение = Форма.ТекущаяСтрокаСканирования.НовоеНазначение;
		КонецЕсли;
		ПослеВводаКоличества(Форма, ЗначениеСканирования, ЕстьОшибки);
	КонецЕсли;
	
	// Очистить значения элементов на странице выбора значения.
	Форма.ШтрихкодПараметраСканирования = "";
	Форма.СрокГодностиСерии = "";
	
	Форма.ВводКоличестваВес = 0;
	Форма.ВводКоличестваОбъем = 0;
	Форма.ВводКоличестваКоличество = 0;
	
	Форма.СообщениеОбОшибке = "";
	
	Если ЕстьОшибки Тогда
		ОбработатьОшибкуПриСканированияЗначения(Форма, ЗначениеСканирования, Товар);
	Иначе
		ПослеСканированияЗначения(Форма);
		ВывестиСостояниеВыполненияЗадания(Форма);
		УстановитьПараметрыЭлементовСканирования(Форма);
		УстановитьГорячиеКлавишиНаТекущейСтранице(Форма);
		ОбработатьПредупреждениеПриСканированииЗначения(Форма);
	КонецЕсли;
	
	Форма.ПараметрыРежима.Режим = "Сканирование";
	
КонецПроцедуры

// Выполняется при завершении сканирования товаров текущего задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПриЗавершенииСканированияТекущегоЗадания(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	Если ТипЗадания = "Отбор" 
		Или ТипЗадания = "Размещение" 
		Или ТипЗадания = "Пересчет" Тогда
		
		ЗавершитьВыполнениеЗадания(Форма);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			
			Если ЕстьОтсканированныеТовары Тогда
				
				Если Не ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
					ДобавитьТаруПоОтсканированномуТовару(Форма);
				КонецЕсли;
				
				ОбработатьОтсканированныеТоварыОтбораПеремещения(Форма);
				
				ПараметрыТоваров = ПараметрыТоваровЗадания(Форма);
				ЗаполнитьЗначенияСвойств(ПараметрыРежима, ПараметрыТоваров);
				
				Форма.ТекущаяСтрокаСканирования = Неопределено;
				Форма.СообщениеОбОшибке = "";
				
				ЗаполнитьДанныеДляСканированияЗадания(Форма);
				
				Если Не ПараметрыРежима.ТоварыРаспределены Тогда
					
					Форма.ПараметрыРежима.ТоварыРаспределены = Истина;
					
					ТекстПредупреждения = НСтр("ru = 'Отобранное количество товаров невозможно разместить в соответствии со складским заданием.
					|Выполнение задания на перемещение будет завершено.
					|Отобранные товары следует отнести 
					|в зону приемки.'");
					
					КнопкаПерейтиКВыборуЗоныПриемки = НоваяКнопкаДиалога("ПерейтиКВыборуЗоныПриемки",
						НСтр("ru = 'ОК'"),
						Истина);
					ПоказатьДиалогСообщение(Форма, ТекстПредупреждения, КнопкаПерейтиКВыборуЗоныПриемки);
					
					Возврат;
					
				КонецЕсли;
				
				ЗаполнитьОстаткиТоваровВЯчейке(Форма);
				
				Форма.ОтсканированныеТовары.Очистить();
				Форма.ОтсканированнаяТара.ПолучитьЭлементы().Очистить();
				
				УстановитьНачальноеСостояниеВыполненияЗадания(Форма);
				СформироватьОчередьПараметровСканирования(Форма);
				
				ПерейтиКСканированию(Форма);
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru = 'Отбор товаров не выполнен.
				|Не отобрано ни одного товара.
				|Выполнение задания на перемещение будет прервано.'");
				
				КнопкаПродолженияСканирования = НоваяКнопкаДиалога("ВернутьсяКВыполнениюЗадания",
					НСтр("ru = 'Продолжить отбор товаров'"), Истина);
				КнопкаПрерватьВыполнение = НоваяКнопкаДиалога("ПрерватьВыполнениеЗадания",
					НСтр("ru = 'Прервать выполнение задания'"));
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КнопкаПродолженияСканирования);
				Кнопки.Добавить(КнопкаПрерватьВыполнение);
				
				ПоказатьДиалогСообщение(Форма, ТекстПредупреждения, Кнопки);
				
			КонецЕсли;
			
		Иначе
			ПараметрыРежима.РазмещениеОтсканировано = Истина;
			ЗавершитьВыполнениеЗадания(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при выполнении команды перехода к следующему товару из формы диалога рабочего места.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКСледующемуТоваруСканирования(Форма) Экспорт
	
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
		
	Если Не (ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение")
		Или ЭтоПорядокОбработкиТоварЯчейка Тогда
		
		Если ЭтоПоследняяСтрокаСканирования(Форма) Тогда
			ПерейтиКСледующейСтрокеСканирования(Форма);
		Иначе
			ПерейтиКСледующейСтрокеСканирования(Форма);
			УстановитьПараметрыЭлементовСканирования(Форма);
			ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
			ВывестиСостояниеВыполненияЗадания(Форма);
		КонецЕсли;
		
	Иначе
		
		Параметр_1 = "";
		Параметр_2 = "";
		
		ТекстСообщения = НСтр("ru = 'Не все товары были %1 ""%2"" по текущему заданию. %3'");
		Если ТипЗадания = "Отбор" Тогда
			Параметр_1 = НСтр("ru = 'отобраны из ячейки'");
			Параметр_2 = НСтр("ru = 'Отобрать неотобранные товары из других ячеек?'");
		Иначе
			Параметр_1 = НСтр("ru = 'размещены в ячейку'");
			Параметр_2 = НСтр("ru = 'Разместить неразмещенные товары в других ячейках?'");
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Параметр_1,
			?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка),
			Параметр_2);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(НоваяКнопкаДиалога("ПодобратьТоварыИзДругихЯчеек", НСтр("ru = 'Да'")));
		Кнопки.Добавить(НоваяКнопкаДиалога("ОтменитьПодборТоваровИзДругихЯчеек",
			НСтр("ru = 'Нет'")));
		
		ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает выполнение складского задания. При сканировании товаров - отсканированные товары
// переносятся в табличные части документов, при наборе - создаются новые складские задания.
// Устанавливаются нужные статусы у документов, выполняется проведение документов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* ОтсканированныеТовары - ДанныеФормыЭлементКоллекции - таблица отсканированных товаров.
//
Процедура ЗавершитьВыполнениеСкладскогоЗадания(Форма) Экспорт
	
	ОбработкаОбъект = Форма.Объект;
	Задание = Форма.ПараметрыРежима.Задание;
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	Форма.Задание = ПараметрыРежима.Задание;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	
	ЕстьНеОтсканированныеТовары = ЕстьНеОтсканированныеТовары(Форма);
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	// Если задание еще даже не началось выполняться, то выполняется не завершение, 
	// а отмена - задание переводится в исходный статус.
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если Не ЕстьОтсканированныеТовары Тогда
			ОтменитьВыполнениеЗадания(Форма);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТЗОтсканированныеТовары = Форма.ОтсканированныеТовары.Выгрузить();
	
	Если ТипЗадания = "Перемещение" Тогда
		
		Если РежимВебСервиса Тогда
			ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ЗавершитьВыполнениеСкладскогоЗадания(Форма, Задание);
		Иначе
			ПарметрыЗавершения = 
				РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры();
			ПарметрыЗавершения.Задание = Задание;
			ПарметрыЗавершения.ТЗОтсканированныеТовары = ТЗОтсканированныеТовары;
			ПарметрыЗавершения.ТоварыДляСканирования = Форма.ТоварыДляСканирования;
			ПарметрыЗавершения.ЗонаПриемки = ПараметрыРежима.ЗонаПриемки;
			ПарметрыЗавершения.ЗонаОтгрузки = ПараметрыРежима.ЗонаОтгрузки;
			ПарметрыЗавершения.ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
			ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания(
				ПарметрыЗавершения);
			КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет" Тогда
		
		// Если отсканировали ячейку, но не отсканировали номенклатуру, значит ячейка - пустая.
		// Запишем пустую ячейку или найдем неотсканированную номенклатуру в этой ячейке и
		// запишем ее с нулевым остатком.
		ТЗТоварыДляСканирования = Форма.РеквизитФормыВЗначение("ТоварыДляСканирования");
		
		Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкЯчейка)
			И Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			
			МассивТоваровДляСканированияПоТекущейЯчейке = ТЗТоварыДляСканирования.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаМассива Из МассивТоваровДляСканированияПоТекущейЯчейке Цикл
				НоваяСтрока = ТЗОтсканированныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива, , "КоличествоУпаковокОтсканировано");
				НоваяСтрока = Форма.ОтсканированныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива, , "КоличествоУпаковокОтсканировано");
			КонецЦикла;
			
		// Если отсканировали номенклатуру, тогда в текущей ячейке найдем номенклатуру, которую планировалось 
		// отсканировать, но не отсканировали, и запишем ее с нулевым остатком.
		ИначеЕсли ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкЯчейка)
			И ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			
			МассивТоваровДляСканированияПоТекущейЯчейке = ТЗТоварыДляСканирования.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаМассиваТоваровДляСканирования Из МассивТоваровДляСканированияПоТекущейЯчейке Цикл
				
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаМассиваТоваровДляСканирования);
				
				МассивСтрок = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
				
				Если МассивСтрок.Количество() = 0 Тогда
					НоваяСтрока = ТЗОтсканированныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассиваТоваровДляСканирования, , "КоличествоУпаковокОтсканировано");
					НоваяСтрока = Форма.ОтсканированныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассиваТоваровДляСканирования, , "КоличествоУпаковокОтсканировано");
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если РежимВебСервиса Тогда
			ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ЗавершитьВыполнениеСкладскогоЗадания(Форма, Задание);
		Иначе
			ПарметрыЗавершения = 
				РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры();
				ПарметрыЗавершения.Задание = Задание;
			ПарметрыЗавершения.ТЗОтсканированныеТовары = ТЗОтсканированныеТовары;
			ПарметрыЗавершения.ТоварыДляСканирования = Форма.ТоварыДляСканирования;
			ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания(
				ПарметрыЗавершения);
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести сообщение о завершении выполнения задания.
	Кнопки = Новый СписокЗначений;
	ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ПараметрыРежима.ТипЗадания);
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		ЗаголовокСообщения = НСтр("ru = 'Задание не выполнено'");
		ТекстСообщения = НСтр("ru = 'При завершении задания произошла ошибка. Не удалось провести задание. 
			|Обратитесь к администратору.'");
	Иначе
		
		ЗаголовокСообщения = НСтр("ru = 'Задание выполнено'");
		
		Если ТипЗадания = "Отбор" Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнение задания завершено. Отобранные товары следует отнести в зону отгрузки ""%1"".'"),
				?(РежимВебСервиса, ПараметрыРежима.НаименованиеЗоныОтгрузки, ПараметрыРежима.ЗонаОтгрузки));
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Если ЕстьНеОтсканированныеТовары Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение задания завершено. Неразмещенные товары следует отнести в зону приемки ""%1""'"),
					?(РежимВебСервиса, ПараметрыРежима.НаименованиеЗоныПриемки, ПараметрыРежима.ЗонаПриемки));
					
			Иначе
				ТекстСообщения = НСтр("ru = 'Выполнение задания завершено.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			КоличествоОтобрано = 0;
			КоличествоРазмещено = 0;
			
			Для Каждого СтрокаТоваров Из ОбработкаОбъект.ТоварыОтбор Цикл
				КоличествоОтобрано = КоличествоОтобрано + СтрокаТоваров.КоличествоУпаковокОтобрано *
					СтрокаТоваров.Коэффициент;
			КонецЦикла;
			
			Для Каждого СтрокаТоваров Из Форма.ТоварыДляСканирования Цикл
				КоличествоРазмещено = КоличествоРазмещено + СтрокаТоваров.КоличествоУпаковокОтсканировано *
					СтрокаТоваров.Коэффициент;
			КонецЦикла;
			
			Если (КоличествоРазмещено <> КоличествоОтобрано) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение задания завершено. 
						|Отобранные, но не размещенные товары 
						|следует отнести в зону приемки: ""%1""'"), 
					?(РежимВебСервиса, ПараметрыРежима.НаименованиеЗоныПриемки, ПараметрыРежима.ЗонаПриемки));
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Выполнение задания завершено.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Пересчет"
			Или ТипЗадания = "ПроверкаОтбора" Тогда
			
			ТекстСообщения = НСтр("ru = 'Выполнение задания завершено.'");
			
		КонецЕсли;
		
		ОчиститьТоварыСканирования(Форма);
		
	КонецЕсли;
	
	Форма.Задание = Задание;
	ПараметрыРежима.Задание = Задание;
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки, ЗаголовокСообщения);
	
КонецПроцедуры

// Выполняет завершение выполнения складского задания. В зависимости от типа
// задания и степени его выполнения вызываются дополнительные процедуры обработки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗавершитьВыполнениеЗадания(Форма) Экспорт
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	Если ЭтоНаборТоваров Тогда
		Если ТипЗадания = "Размещение" Тогда
			ЗавершитьВыполнениеЗаданияНовоеРазмещение(Форма);
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			ЗавершитьВыполнениеЗаданияПриемка(Форма);
		КонецЕсли;
	Иначе
		Если ТипЗадания = "Перемещение" Тогда
			ЗавершитьВыполнениеЗаданияПеремещение(Форма);
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			ЗавершитьВыполнениеЗаданияПроверкаОтбора(Форма);
		Иначе
			ЗавершитьВыполнениеСкладскогоЗадания(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того что эта ячейка является последней в задании.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина, признак того, что текущая складская ячейка, является последней в складском задании.
//
Функция ЭтоПоследняяЯчейка(Форма) Экспорт
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоПоследняя = (ТекущаяСтрокаСканирования.КоличествоЯчеек = ТекущаяСтрокаСканирования.НомерЯчейки);
	
	Возврат ЭтоПоследняя;
	
КонецФункции

// Отменяет выполнение текущего складского задания, переводит в первоначальный статус.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОтменитьВыполнениеЗадания(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ПараметрыРежима.Задание) Тогда
		ПерейтиКВыборуСкладскойОперации(Форма);
		Возврат;
	КонецЕсли;
	
	РежимВебСервиса = Форма.РежимВебСервиса;
	ПараметрыРежима = Форма.ПараметрыРежима;
	Задание = ПараметрыРежима.Задание;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ИсходныйИсполнитель = ПараметрыРежима.ИсходныйИсполнитель;
	
	Если РежимВебСервиса Тогда
		ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ОтменитьВыполнениеЗадания(Форма, Задание);
	Иначе
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОтменитьВыполнениеЗадания(Задание,
			ИсходныйИсполнитель, ТипЗадания);
	КонецЕсли;
	
	Если ЭтоНаборТоваров
		И ТипЗадания = "Размещение" Тогда
		
		Форма.ТекущаяСтрокаСканирования = Неопределено;
		ОчиститьТоварыСканирования(Форма);
		ИнициализироватьПараметрыРежима(Форма);
		
	КонецЕсли;
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		КнопкаПерейтиВОсновноеМеню = НоваяКнопкаДиалога("ПерейтиКВыборуСкладскойОперации",
			НСтр("ru = 'Перейти к выбору операции'"));
		
		ПоказатьДиалогСообщение(Форма, ПараметрыЗадания.ТекстСообщения, КнопкаПерейтиВОсновноеМеню);
	Иначе
		Если ЭтоНаборТоваров Тогда
			Если ТипЗадания = "Размещение" Тогда
				ПерейтиКВыборуСкладскойОперации(Форма);
			ИначеЕсли ТипЗадания = "Приемка" Тогда
				ПерейтиКВыборуЗадания(Форма, ТипЗадания);
			КонецЕсли;
		Иначе
			ОчиститьТоварыСканирования(Форма);
			ПерейтиКВыборуЗадания(Форма, ТипЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при постановке задания на приемку в работу.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** СканированиеТовар - КнопкаФормы - кнопка, выполняющая открытие информации о товаре.
// 			** СканированиеСерия - КнопкаФормы - кнопка, выполняющая открытие информации о серии товара.
// 			** НадписьВзять - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьУпаковка - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьКоличествоУпаковок - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** СканированиеВвестиКоличество - КнопкаФормы - кнопка, выполняющая открытие формы с полем ввода количества
// 															отсканированного товара.
//
Процедура ПерейтиКПриемкеТоваров(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	ПараметрыРежима.СозданноеЗадание = Неопределено;
	ПараметрыРежима.ТипЗадания = "Приемка";
	ПараметрыРежима.НаборТоваров = Истина;
	
	Форма.СообщениеОбОшибке = "";
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	Форма.ТоварыДляСканирования.Очистить();
	Форма.ОтсканированныеТовары.Очистить();
	Форма.ОтсканированнаяТара.ПолучитьЭлементы().Очистить();
	Форма.ЯчейкиДляСканирования.Очистить();
	
	СформироватьОчередьПараметровСканирования(Форма);
	ПерейтиКСледующемуПараметруСканирования(Форма);
	
	// Установить заголовки элементов.
	Если Форма.ИспользоватьУпаковочныеЛисты Тогда
		Элементы.СканированиеТовар.Заголовок = НСтр("ru = '<Товар / Упаковочный лист>'");
	КонецЕсли;
	
	Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия>'");
	
	Элементы.НадписьВзять.Заголовок = "";
	Элементы.НадписьУпаковка.Заголовок = "";
	Элементы.НадписьКоличествоУпаковок.Заголовок = "";
	Элементы.СканированиеВвестиКоличество.Заголовок = 0;
	
	ВывестиСостояниеВыполненияЗадания(Форма);
	ПерейтиКСканированию(Форма);
	
КонецПроцедуры

// Вызывается при создании нового складского задания на размещение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** СканированиеТовар - КнопкаФормы - кнопка, выполняющая открытие информации о товаре.
// 			** СканированиеСерия - КнопкаФормы - кнопка, выполняющая открытие информации о серии товара.
// 			** НадписьВзять - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьУпаковка - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьКоличествоУпаковок - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** СканированиеВвестиКоличество - КнопкаФормы - кнопка, выполняющая открытие формы с полем ввода количества
// 															отсканированного товара.
//
Процедура СоздатьНовоеСкладскоеЗадание(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.ПараметрыРежима.СозданноеЗадание  = Неопределено;
	Форма.СообщениеОбОшибке = "";
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	Форма.ПараметрыРежима.ТипЗадания = "Размещение";
	Форма.ПараметрыРежима.НаборТоваров = Истина;
	
	Если Не ЗначениеЗаполнено(Форма.РежимСканированияСерий) Тогда
		Форма.РежимСканированияСерий = "ТоварВсеСерии";
	КонецЕсли;
	
	УстановитьПараметрыЭлементовСхемыСканирования(Форма);
	
	ОчиститьТоварыСканирования(Форма);
	СформироватьОчередьПараметровСканирования(Форма);
	
	СброситьПризнакиСканированияВсехПараметров(Форма);
	УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
	ПерейтиКСледующемуПараметруСканирования(Форма);
	УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
	
	// Установить заголовки элементов.
	Элементы.СканированиеТовар.Заголовок = НСтр("ru = '<Товар>'");
	Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия>'");
	
	Элементы.НадписьВзять.Заголовок = "";
	Элементы.НадписьУпаковка.Заголовок = "";
	Элементы.НадписьКоличествоУпаковок.Заголовок = "";
	Элементы.СканированиеВвестиКоличество.Заголовок = 0;
	
	УстановитьВидимостьЭлементовСканирования(Форма);
	ВывестиСостояниеВыполненияЗадания(Форма);
	ПерейтиКСканированию(Форма);
	
КонецПроцедуры

// Выполняет действия, необходимые для постановки задания в работу.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада:
// 		* Объект - ДанныеФормыСтруктура -:
// 			** Серии - ДанныеФормыКоллекция -
// 			** Товары - ДанныеФормыКоллекция -
// 			** ТоварыОтбор - ДанныеФормыКоллекция -
// 			** ТоварыРазмещение - ДанныеФормыКоллекция -
// 			** ОтгружаемыеТовары - ДанныеФормыКоллекция -
// 		* ТоварыПодобраны - Булево -.
//	Задание - ДокументСсылка.ПриходныйОрдерНаТовары, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание, которое принимается в работу.
//	ПараметрыЗадания - Структура - параметры складского задания. Состав структуры описан в функции 'ПараметрыЗадания()'
//		общего модуля РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.
//
Процедура ВзятьЗаданиеВРаботу(Форма, Задание, ПараметрыЗадания = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Форма.ТоварыПодобраны = Ложь;
	Пользователь = Объект.Пользователь;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	Если ПараметрыЗадания = Неопределено Тогда
		
		Если Форма.РежимВебСервиса Тогда
			ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ПараметрыЗаданияПриПринятииВРаботу(Форма, Задание);
		Иначе
			ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗаданияПриПринятииВРаботу(Задание,
				Пользователь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		
		Кнопки = Новый СписокЗначений;
		ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ПараметрыЗадания.ТипЗадания);
		
		ПоказатьДиалогСообщение(Форма, ПараметрыЗадания.ТекстСообщения, Кнопки);
		
		Возврат;
		
	КонецЕсли;
	
	// Установить параметры режима.
	ПараметрыРежима.Задание = Задание;
	ПараметрыРежима.НаборТоваров = Ложь;
	ПараметрыРежима.ОтборОтсканирован = Ложь;
	ПараметрыРежима.ПараметрСканирования = "";
	ПараметрыРежима.РазмещениеОтсканировано = Ложь;
	
	// Очистить табличные части объекта формы.
	Объект.Товары.Очистить();
	Объект.ТоварыОтбор.Очистить();
	Объект.ТоварыРазмещение.Очистить();
	Объект.ОтгружаемыеТовары.Очистить();
	Объект.Серии.Очистить();
	
	ЗоныПриемкиОтгрузки = "";
	ИсключаемыеРеквизиты = "Товары, ТоварыОтбор, ТоварыРазмещение, ОтгружаемыеТовары";
	
	Если Форма.РежимВебСервиса Тогда
		Если ПараметрыРежима.ТипЗадания = "Отбор" Тогда
			ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузки + "ЗонаПриемки, НаименованиеЗоныПриемки";
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Размещение" Тогда
			ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузки + "ЗонаОтгрузки, НаименованиеЗоныОтгрузки";
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
			ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузки + "ЗонаПриемки, ЗонаОтгрузки, НаименованиеЗоныПриемки,
				|НаименованиеЗоныОтгрузки";
		КонецЕсли;
	Иначе
		Если ПараметрыРежима.ТипЗадания = "Отбор" Тогда
			ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузки + "ЗонаПриемки";
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Размещение" Тогда
			ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузки + "ЗонаОтгрузки";
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
			ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузки + "ЗонаПриемки, ЗонаОтгрузки";
			ПараметрыРежима.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Форма.Объект.Склад, Форма.Объект.Помещение);
			ПараметрыРежима.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Форма.Объект.Склад, Форма.Объект.Помещение);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыРежима, ПараметрыЗадания, , ЗоныПриемкиОтгрузки);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗадания, , ИсключаемыеРеквизиты);
	
	// Заполнить табличные части объекта.
	Если ПараметрыРежима.ТипЗадания = "Отбор" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыОтбор, Объект.ТоварыОтбор);
	ИначеЕсли ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.Товары, Объект.Товары);
	ИначеЕсли ПараметрыРежима.ТипЗадания = "Размещение" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыРазмещение, Объект.ТоварыРазмещение);
	ИначеЕсли ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыОтбор, Объект.ТоварыОтбор);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыРазмещение, Объект.ТоварыРазмещение);
	ИначеЕсли ПараметрыРежима.ТипЗадания = "ПроверкаОтбора" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ОтгружаемыеТовары, Объект.ОтгружаемыеТовары);
	КонецЕсли;
	
	// Получить параметры товаров задания.
	ПараметрыТоваров = ПараметрыТоваровЗадания(Форма);
	ЗаполнитьЗначенияСвойств(ПараметрыРежима, ПараметрыТоваров);
	
	// Установить значения реквизитов, нужных для выполнения сканирования.
	Форма.СообщениеОбОшибке = "";
	Форма.ТекущаяСтрокаСканирования = Неопределено;
	
	ЗаполнитьДанныеДляСканированияЗадания(Форма);
	ЗаполнитьОстаткиТоваровВЯчейке(Форма);
	ЗаполнитьТоварыДляПересчета(Форма);
	
	Форма.ОтсканированныеТовары.Очистить();
	Форма.ОтсканированнаяТара.ПолучитьЭлементы().Очистить();
	
	УстановитьНачальноеСостояниеВыполненияЗадания(Форма);
	УстановитьВидимостьЭлементовСканирования(Форма);
	УстановитьСхемуСканированияПоУмолчанию(Форма);
	УстановитьПараметрыЭлементовПорядкаОбработкиСкладскогоЗадания(Форма);
	
	Если ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
		
		ТекстСообщения = НСтр("ru = 'Отсканируйте все товары в ячейке, 
		|затем нажмите кнопку ""Далее"" для перехода к следующей ячейке.'");
		
		Кнопки = Новый СписокЗначений;
		
		КнопкаПерейтиКСканированию = НоваяКнопкаДиалога(
			"ПерейтиКСканированию", 
			НСтр("ru = 'Перейти 
			|к сканированию'"));
		
		Кнопки.Добавить(КнопкаПерейтиКСканированию);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
	ИначеЕсли ПараметрыРежима.ТипЗадания = "Приемка" Тогда
		
		Кнопки = Новый СписокЗначений;
		
		Если Форма.ИспользоватьУпаковочныеЛисты Тогда
			ТекстСообщения = НСтр("ru = 'Отсканируйте штрихкоды товаров или упаковочных листов, 
				|затем нажмите кнопку ""Далее"" для завершения приемки.'");
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсканируйте все товары, 
				|затем нажмите кнопку ""Далее"" для завершения приемки.'");
		КонецЕсли;
		
		КнопкаПерейтиКПриемкеТоваров = НоваяКнопкаДиалога(
				"ПерейтиКПриемкеТоваров",
				НСтр("ru = 'Перейти к сканированию'"));
				
		Кнопки.Добавить(КнопкаПерейтиКПриемкеТоваров);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
	ИначеЕсли ПараметрыРежима.ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстСообщения = 
			НСтр("ru = 'Отсканируйте все товары, 
			|затем нажмите кнопку ""Далее"" для завершения проверки.'");
		
		Кнопки = Новый СписокЗначений;
		
		КнопкаПерейтиКПриемке = НоваяКнопкаДиалога(
			"ПерейтиКСканированию",
			НСтр("ru = 'Перейти к сканированию'"));
		
		Кнопки.Добавить(КнопкаПерейтиКПриемке);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
	Иначе
		
		ПерейтиКСканированию(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе к сканированию товаров. Переключается на 
// страницу сканирования, вызывает процедуры установки заголовка элементов
// сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКСканированию(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если Не ЭтоНаборТоваров
		И Не ПараметрыРежима.ЗакрытиеФормы Тогда
		СформироватьОчередьПараметровСканирования(Форма);
		Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		
		Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость = Ложь;
		Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
			Элементы.РазделительКнопокСканирование.Видимость = Истина;
		КонецЕсли;
		
		Если ТипЗадания = "Размещение" Тогда
			УстановитьПараметрыЭлементовСканирования(Форма);
			ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
			ВывестиСостояниеВыполненияЗадания(Форма);
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				СформироватьОчередьПараметровСканирования(Форма);
				Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
			УстановитьПараметрыЭлементовСканирования(Форма);
			ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
			ВывестиСостояниеВыполненияЗадания(Форма);
		Иначе
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
			УстановитьПараметрыЭлементовСканирования(Форма);
			ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
			ВывестиСостояниеВыполненияЗадания(Форма);
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				ПерейтиКСледующейЯчейке(Форма);
			КонецЕсли;
			
			Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость = Истина;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				
				Если ОтборОтсканирован Тогда
					Если ЭтоПорядокОбработкиТоварЯчейка Тогда
						ПерейтиВРежимОжиданияСканированияТовара(Форма);
						ПерейтиКСледующемуПараметруСканирования(Форма);
					Иначе
						ПерейтиКСледующейСтрокеСканирования(Форма);
					КонецЕсли;
				Иначе
					ПерейтиКСледующейСтрокеСканирования(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость = Истина;
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				ПерейтиКСледующейСтрокеСканирования(Форма);
			КонецЕсли;
			
			Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость = Ложь;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ПерейтиВРежимОжиданияСканированияТовара(Форма);
					ПерейтиКСледующемуПараметруСканирования(Форма);
				Иначе
					ПерейтиКСледующейСтрокеСканирования(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость = Истина;
			
		Иначе
			
			Если ПараметрыРежима.ЗакрытиеФормы Тогда
				ПараметрыРежима.ЗакрытиеФормы = Ложь;
			Иначе
				ПерейтиКСледующейСтрокеСканирования(Форма);
			КонецЕсли;
			
			Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Если Элементы.СканированиеОтметитьЯчейкуКПересчету.Видимость Тогда
			Элементы.РазделительКнопокСканирование.Видимость = Ложь;
		Иначе
			Элементы.РазделительКнопокСканирование.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыЭлементовСканирования(Форма);
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	ВывестиСостояниеВыполненияЗадания(Форма);
	
КонецПроцедуры

// Переводит поток выполнения задания к следующей ячейке.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКСледующейЯчейкеСканирования(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТекущаяСтрокаСканирования.НомерЯчейки = Форма.ЯчейкиДляСканирования.Количество() Тогда
		
		Если ТипЗадания = "Отбор" Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1""
					|последняя в задании на отбор.
					|Завершить выполнение отбора товаров?'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1""
					|последняя в задании на отбор,
					|и в ней не отсканировано ни одного товара.
					|Завершить выполнение отбора товаров?'");
			КонецЕсли;
			ПредставлениеКнопкиДиалогаПерейтиКСканированию = НСтр("ru = 'Продолжить отбор товаров'");
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1"" 
					|последняя в задании на размещение.
					|Завершить выполнение размещения товаров?'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1"" 
					|последняя в задании на размещение,
					|и в ней не отсканировано ни одного товара.
					|Завершить выполнение размещения товаров?'");
			КонецЕсли;
			ПредставлениеКнопкиДиалогаПерейтиКСканированию = НСтр("ru = 'Продолжить размещение товаров'");
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1"" 
					|последняя в задании на перемещение.
					|Завершить выполнение перемещения товаров?'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1"" 
					|последняя в задании на перемещение,
					|и в ней не отсканировано ни одного товара.
					|Завершить выполнение перемещения товаров?'");
			КонецЕсли;
			ПредставлениеКнопкиДиалогаПерейтиКСканированию = НСтр("ru = 'Продолжить перемещение товаров'");
		ИначеЕсли ТипЗадания = "Пересчет" Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1"" 
					|последняя в задании на пересчет.
					|Завершить выполнение пересчета товаров?'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Ячейка ""%1"" 
					|последняя в задании на пересчет,
					|и в ней не отсканировано ни одного товара.
					|Завершить выполнение пересчета товаров?'");
			КонецЕсли;
			ПредставлениеКнопкиДиалогаПерейтиКСканированию = НСтр("ru = 'Продолжить пересчет товаров'");
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить выполнение задания'")));
		Кнопки.Добавить(НоваяКнопкаДиалога("ПерейтиКСканированию", ПредставлениеКнопкиДиалогаПерейтиКСканированию));
		
		Если ТипЗадания = "Перемещение" Тогда
			Если ПараметрыРежима.ОтборОтсканирован Тогда
				ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
			Иначе
				ПриЗавершенииСканированияТекущегоЗадания(Форма);
			КонецЕсли;
		Иначе
			ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
		КонецЕсли;
		
	Иначе
		
		ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
		
		Если Не (ТипЗадания = "Отбор" 
				Или ТипЗадания = "Размещение")
			Или ЭтоПорядокОбработкиТоварЯчейка
			Или Форма.ТоварыПодобраны Тогда
			
			ПерейтиКСледующейЯчейке(Форма);
			Форма.ТоварыПодобраны = Ложь;
			
		Иначе
			
			Параметр_1 = "";
			Параметр_2 = "";
			
			ТекстСообщения = НСтр("ru = 'Не все товары были %1 ""%2"" по текущему заданию. %3'");
			Если ТипЗадания = "Отбор" Тогда
				Параметр_1 = НСтр("ru = 'отобраны из ячейки'");
				Параметр_2 = НСтр("ru = 'Отобрать неотобранные товары из других ячеек?'");
			Иначе
				Параметр_1 = НСтр("ru = 'размещены в ячейку'");
				Параметр_2 = НСтр("ru = 'Разместить неразмещенные товары в других ячейках?'");
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Параметр_1,
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка),
				Параметр_2);
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(НоваяКнопкаДиалога("ПодобратьТоварыИзДругихЯчеекПриПереходеКСледующейЯчейке", НСтр("ru = 'Да'")));
			Кнопки.Добавить(НоваяКнопкаДиалога("ОтменитьПодборТоваровИзДругихЯчеекПриПереходеКСледующейЯчейке",
				НСтр("ru = 'Нет'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит информацию по текущему товару строки сканирования.
// Вызывается при нажатии на кнопку товара на странице "Сканирование".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВывестиИнформациюПоТекущемуТовару(Форма) Экспорт
	
	Если Не Форма.ПараметрыРежима.Режим = "Сканирование" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = Новый Структура("Номенклатура, НаименованиеНоменклатуры, АртикулНоменклатуры,, ОписаниеНоменклатуры,
		|Характеристика, Упаковка, ВесУпаковки, ОбъемУпаковки");
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, Форма.ТекущаяСтрокаСканирования);
	
	ПараметрыНоменклатуры = НайтиТоварПоПараметрам(ПараметрыТовара);
	ВывестиИнформациюОТоваре(Форма, ПараметрыНоменклатуры);
	
	УстановитьЗаголовокФормы(Форма, НСтр("ru = 'Товар'"));
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

// Выводит информацию по отсканированному штрихкоду.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** АдресЯчейки - ПолеФормы - поле ввода адреса складской ячейки.
//	Штрихкод - Строка - отсканированный штрихкод.
//
Процедура ВывестиИнформациюПоШтрихкоду(Форма, Штрихкод) Экспорт
	
	Объект = Форма.Объект;
	РежимВебСервиса = Форма.РежимВебСервиса;
	
	Форма.ТаблицаИнформации.Очистить();
	
	Если Не Форма.ПометитьЯчейкуКПересчету Тогда
		
		// Найти товар по штрихкоду.
		ВЗаданииМогутИспользоватьсяУпаковочныеЛисты = ВЗаданииМогутИспользоватьсяУпаковочныеЛисты(Форма.ПараметрыРежима.ТипЗадания);
		НайденныйТовар = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиТоварИлиУпаковочныйЛист(Штрихкод,
			ВЗаданииМогутИспользоватьсяУпаковочныеЛисты);
		
		Если ЗначениеЗаполнено(НайденныйТовар.Номенклатура) Тогда
			ПараметрыНоменклатуры = НайтиТоварПоПараметрам(НайденныйТовар);
			
			ВывестиИнформациюПоШтрихкодуТовара(Форма, ПараметрыНоменклатуры);
			Возврат;
		КонецЕсли;
		
		Если РежимВебСервиса Тогда
			// Если это не товар, то м.б. это ячейка.
			ПараметрыЯчейки = РабочееМестоРаботникаСкладаXDTO.ТоварыЯчейкиПоШтрихкоду(Форма, Штрихкод);
		Иначе
			// Если это не товар, то м.б. это ячейка.
			ПараметрыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиЯчейкуПоШтрихкоду(Объект.Склад,
				Объект.Помещение, Штрихкод, Истина);
		КонецЕсли;
		
		Если ПараметрыЯчейки.КодВозврата = 1 Тогда
			ВывестиИнформациюПоШтрихкодуЯчейки(Форма, ПараметрыЯчейки.Ячейка);
			Возврат;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию по штрихкоду: 
			|""%1"".'"), 
			Штрихкод);
		
	Иначе
		
		Форма.Элементы.АдресЯчейки.Доступность = Ложь;
		
		ПараметрыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиЯчейкуПоШтрихкоду(Объект.Склад,
			Объект.Помещение, Штрихкод, Истина);
		
		Если ПараметрыЯчейки.КодВозврата = 1 Тогда
			РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОтметитьЯчейкуКПересчету(ПараметрыЯчейки.Ячейка);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ячейка ""%1"" помечена к пересчету.'"), ПараметрыЯчейки.Ячейка);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отметить к пересчету ячейку по штрихкоду: ""%1"".'"), Штрихкод);
		КонецЕсли;
		
		Форма.ШтрихкодПараметраСканирования = "";
		
	КонецЕсли;
	
	КнопкаПерейтиНаПредыдущуюСтраницу = НоваяКнопкаДиалога("ПерейтиНаПредыдущуюСтраницу", НСтр("ru = 'ОК'"), Истина);
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, КнопкаПерейтиНаПредыдущуюСтраницу);
	
КонецПроцедуры

// Функция возвращает структуру кнопки диалога, которая отображается в диалоге пользователя.
//
// Параметры:
//	ИмяКоманды - Строка - имя команды, которая будет выполнена при нажатии на кнопку.
//	Представление - Строка - представление кнопки.
//	Выделить - Булево - если <Истина> то надпись на кнопке будет выполнена полужирным шрифтом.
//
// Возвращаемое значение:
//	Структура - Параметры кнопки диалога:
//	*ИмяКоманды - Строка
//	*Представление - Строка
//	*Выделить - Булево
//
Функция НоваяКнопкаДиалога(ИмяКоманды, Представление, Выделить = Ложь) Экспорт
	
	КнопкаДиалога = Новый Структура;
	
	КнопкаДиалога.Вставить("ИмяКоманды", ИмяКоманды);
	КнопкаДиалога.Вставить("Представление", Представление);
	КнопкаДиалога.Вставить("Выделить", Выделить);
	
	Возврат КнопкаДиалога;
	
КонецФункции

// Вызывается из форм при обработке возникновения ошибки подключения оборудования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ОписаниеОшибки - Строка - описание ошибки.
//
Процедура ПриОшибкеПодключенияОборудования(Форма, ОписаниеОшибки) Экспорт
	
	// Добавить запись об ошибке в журнал регистрации.
	КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При подключении оборудования произошла ошибка: 
		|""%1"".'"),
		ОписаниеОшибки);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'При подключении оборудования произошла ошибка.'",
			ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, 
		, 
		, 
		КомментарийЖурнала, 
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	Форма.ПараметрыРежима.МожноЗакрытьФорму = Истина;
	
	// Вывести сообщение об ошибке.
	ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка. 
		|Обратитесь к администратору.'");
	
	КнопкаЗакрыть = НоваяКнопкаДиалога("ЗакрытьФормуМобильногоРабочегоМеста", НСтр("ru = 'Закрыть программу'"), Истина);
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, КнопкаЗакрыть);
	
КонецПроцедуры

// Вызывается при переходе к ручному вводу значения сканирования - штрихкоду или
// номеру и сроку годности серии.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** НадписьПодсказкаПоСрокуГодности - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьПодсказкаПоШтрихкоду - ПолеФормы - информационная надпись пользовательского интерфейса.
//
Процедура СканированиеВвестиЗначение(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	// Установить начальное значение видимости элементов.
	Элементы.НадписьПодсказкаПоШтрихкоду.Видимость = Истина;
	Элементы.ШтрихкодПараметраСканирования.Видимость = Истина;
	Элементы.НадписьПодсказкаПоСрокуГодности.Видимость = Ложь;
	Элементы.СрокГодностиСерии.Видимость = Ложь;
	
	// Установить текст подсказки.
	Если ЭтоНаборТоваров Тогда
		
		Если ПараметрСканирования = "Ячейка" Тогда
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите наименование зоны приемки (отгрузки).'");
		ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите штрихкод товара.'");
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии.'");
		КонецЕсли;
		
	Иначе
		
		Если ПараметрСканирования = "Ячейка" Тогда
			
			ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Введите адрес ячейки 
					|""%1""'"), 
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
			
		ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
			
			Если ТипЗадания = "Пересчет" Тогда
				ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите штрихкод товара'");
			Иначе
				
				Если (ТипЗадания = "Размещение" 
						И ЭтоПорядокОбработкиТоварЯчейка)
					Или (ТипЗадания = "Перемещение"
						И ЭтоПорядокОбработкиТоварЯчейка
						И ОтборОтсканирован) Тогда
					
					ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите штрихкод товара'");
					
				Иначе
					
					ПредставлениеТовара = ?(РежимВебСервиса,
						ПредставлениеТовара(
							ТекущаяСтрокаСканирования.НаименованиеНоменклатуры,
							ТекущаяСтрокаСканирования.НаименованиеХарактеристики,
							ТекущаяСтрокаСканирования.НаименованиеУпаковки),
						ПредставлениеТовара(
							ТекущаяСтрокаСканирования.Номенклатура,
							ТекущаяСтрокаСканирования.Характеристика,
							ТекущаяСтрокаСканирования.Упаковка));
					
					ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Введите штрихкод товара 
							|""%1""'"), 
						ПредставлениеТовара);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии'");
			
			Если СерияЗаполнена(ТипЗадания, ТекущаяСтрокаСканирования) Тогда
				
				Если ТипЗадания = "Перемещение"
					И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
					
					ТекущаяСтрокаСканирования.НаименованиеСерии = УстановитьПредставлениеСерии(ТекущаяСтрокаСканирования);
					
					ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Введите номер серии 
							|""%1""'"), 
						ТекущаяСтрокаСканирования.НаименованиеСерии);
					
				Иначе
					
					ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Введите номер серии 
							|""%1""'"), 
						?(РежимВебСервиса, ТекущаяСтрокаСканирования.НаименованиеСерии, ТекущаяСтрокаСканирования.Серия));
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоНаборТоваров
				Или ТипЗадания = "Пересчет"
				Или ТипЗадания = "Приемка"
				Или ТипЗадания = "ПроверкаОтбора" Тогда
				
				ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии'");
				
			ИначеЕсли ТипЗадания = "Размещение" Тогда
				
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии'");
				КонецЕсли;
				
			ИначеЕсли ТипЗадания = "Перемещение" Тогда
				
				Если ОтборОтсканирован 
					И ЭтоПорядокОбработкиТоварЯчейка Тогда
					
					ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии'");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить параметры ввода серии.
	Если ПараметрСканирования = "Серия" Тогда
		
		// В зависимости от настройки использования серий видимость полей ввода будет различаться.
		Элементы.НадписьПодсказкаПоШтрихкоду.Видимость = ТекущаяСтрокаСканирования.ИспользоватьНомерСерии;
		Элементы.ШтрихкодПараметраСканирования.Видимость = ТекущаяСтрокаСканирования.ИспользоватьНомерСерии;
		Элементы.НадписьПодсказкаПоСрокуГодности.Видимость = ТекущаяСтрокаСканирования.ИспользоватьСрокГодностиСерии;
		Элементы.СрокГодностиСерии.Видимость = ТекущаяСтрокаСканирования.ИспользоватьСрокГодностиСерии;
		
		Если Элементы.СрокГодностиСерии.Видимость Тогда
			
			ПодсказкаПоСрокуГодности = НСтр("ru = 'Введите срок годности серии'");
			
			Если СерияЗаполнена(ТипЗадания, ТекущаяСтрокаСканирования) Тогда
				
				Если ТипЗадания = "Перемещение"
					И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
					
					ТекущаяСтрокаСканирования.НаименованиеСерии = УстановитьПредставлениеСерии(ТекущаяСтрокаСканирования);
					
					ПодсказкаПоСрокуГодности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Введите срок годности серии 
							|""%1""'"), 
						ТекущаяСтрокаСканирования.НаименованиеСерии);
					
				Иначе
					
					ПодсказкаПоСрокуГодности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Введите срок годности серии 
								|""%1""'"), 
						?(РежимВебСервиса, ТекущаяСтрокаСканирования.НаименованиеСерии, ТекущаяСтрокаСканирования.Серия));
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтоНаборТоваров 
				Или ТипЗадания = "Пересчет"
				Или ТипЗадания = "Приемка"
				Или ТипЗадания = "ПроверкаОтбора" Тогда
				
				ПодсказкаПоСрокуГодности = НСтр("ru = 'Введите срок годности серии'");
				
			ИначеЕсли ТипЗадания = "Размещение" Тогда
				
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ПодсказкаПоСрокуГодности = НСтр("ru = 'Введите срок годности серии'");
				КонецЕсли;
				
			ИначеЕсли ТипЗадания = "Перемещение" Тогда
				
				Если ОтборОтсканирован 
					И ЭтоПорядокОбработкиТоварЯчейка Тогда
					
					ПодсказкаПоСрокуГодности = НСтр("ru = 'Введите срок годности серии'");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.НадписьПодсказкаПоСрокуГодности.Заголовок = ПодсказкаПоСрокуГодности;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НадписьПодсказкаПоШтрихкоду.Заголовок = ПодсказкаПоШтрихкоду;
	
	Форма.ТекущийЭлемент = Элементы.ШтрихкодПараметраСканирования;
	ПерейтиНаСтраницу(Форма, "СтраницаВыборЗначения");
	
КонецПроцедуры

// Процедура устанавливает текст заголовка формы и центрирует его.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ТекстЗаголовка - Строка - текст заголовка формы.
//
Процедура УстановитьЗаголовокФормы(Форма, ТекстЗаголовка) Экспорт
	
	Форма.Заголовок = ТекстЗаголовка;
	ЦентрироватьТекстЗаголовкаФормы(Форма);
	
КонецПроцедуры

// Устанавливает текст заголовка списка складских заданий.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	КоличествоДокументов - Число - количество документов.
//
Процедура УстановитьЗаголовокСпискаЗаданий(Форма, КоличествоДокументов) Экспорт
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	ТекстЗаголовкаФормы = "";
	
	Если ТипЗадания = "Отбор" Тогда
		
		ТекстЗаголовкаФормы = ?(Форма.ОтображатьВсеЗадания, 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаОтбор", Форма), 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаОтбор", Форма));
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗаголовкаФормы = ?(Форма.ОтображатьВсеЗадания, 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаРазмещения", Форма), 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаРазмещения", Форма));
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ТекстЗаголовкаФормы = ?(Форма.ОтображатьВсеЗадания, 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПеремещение", Форма), 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПеремещение", Форма));
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТекстЗаголовкаФормы = ?(Форма.ОтображатьВсеЗадания, 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПересчет", Форма), 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПересчет", Форма));
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТекстЗаголовкаФормы = ?(Форма.ОтображатьВсеЗадания, 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПриемку", Форма), 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПриемку", Форма));
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗаголовкаФормы = ?(Форма.ОтображатьВсеЗадания, 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПроверку", Форма), 
			ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПроверку", Форма));
		
	КонецЕсли;
	
	ТекстЗаголовкаФормы = ТекстЗаголовкаФормы + " (" + КоличествоДокументов + ")";
	
	УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	
КонецПроцедуры

// Устанавливает заголовки надписей и команды управления порядком 
// сканирования серий товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПараметрыЭлементовСхемыСканирования(Форма) Экспорт
	
	РежимСканированияСерий = Форма.РежимСканированияСерий;
	
	Если РежимСканированияСерий = "" Тогда
		РежимСканированияСерий = "ТоварСерияТовар"
	КонецЕсли; 
	
	Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисРежимСканированияСерийТСТ", "Нажата");
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисРежимСканированияСерийТВТ", "НеНажата");
	ИначеЕсли РежимСканированияСерий = "ТоварВсеСерии" Тогда
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисРежимСканированияСерийТВТ", "Нажата");
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисРежимСканированияСерийТСТ", "НеНажата");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при нажатии кнопки "ТоварВсеСерии" на форме рабочего места.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СервисРежимСканированияСерийТВТ(Форма) Экспорт
	
	Если Форма.РежимСканированияСерий = "ТоварВсеСерии" Тогда
		Возврат;
	КонецЕсли;
	
	ПриУстановкеСхемыСканированияТоваров(Форма);
	
КонецПроцедуры

// Вызывается при нажатии кнопки "ТоварСерияТовараТовар" на форме рабочего места.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СервисРежимСканированияСерийТСТ(Форма) Экспорт
	
	Если Форма.РежимСканированияСерий = "ТоварСерияТовар" Тогда
		Возврат;
	КонецЕсли;
	
	ПриУстановкеСхемыСканированияТоваров(Форма);
	
КонецПроцедуры

// Вызывается при изменении схемы сканирования товаров со страницы сервиса.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПриУстановкеСхемыСканированияТоваров(Форма) Экспорт
	
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	РежимСканированияСерий = Форма.РежимСканированияСерий;
	
	Если РежимСканированияСерий = "ТоварВсеСерии" Тогда
		Если ПараметрСканирования = "Серия" Тогда
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
			УстановитьПараметрыЭлементовСканирования(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Форма.РежимСканированияСерий = ?(РежимСканированияСерий = "ТоварСерияТовар", "ТоварВсеСерии", "ТоварСерияТовар");
	УстановитьПараметрыЭлементовСхемыСканирования(Форма);
	
КонецПроцедуры

// Вызывается при установке порядка обработки Ячейка-Товар.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПриУстановкеПорядкаОбработкиЯчейкаТовар(Форма) Экспорт
	
	ПорядокОбработки = Форма.ПараметрыРежима.ПорядокОбработки;
	
	Если ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ЯчейкаТовар Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПараметрыРежима.ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ЯчейкаТовар;
	
	УстановитьДоступностьИзмененияСхемыСканирования(Форма);
	УстановитьПараметрыЭлементовПорядкаОбработкиСкладскогоЗадания(Форма);
	УстановитьГорячиеКлавишиНаТекущейСтранице(Форма);
	СформироватьОчередьПараметровСканирования(Форма);
	ПерейтиКБлижайшейНеОтсканированнойСтрокеТоваров(Форма);
	СброситьПризнакиСканированияВсехПараметров(Форма);
	УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
	ПерейтиКСледующемуПараметруСканирования(Форма);
	УстановитьВидимостьКоличестваВДокументе(Форма);
	
КонецПроцедуры

// Вызывается при установке порядка обработки Товар-Ячейка.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПриУстановкеПорядкаОбработкиТоварЯчейка(Форма) Экспорт
	
	ПорядокОбработки = Форма.ПараметрыРежима.ПорядокОбработки;
	Если ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПараметрыРежима.ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка;
	
	СервисРежимСканированияСерийТСТ(Форма);
	
	УстановитьДоступностьИзмененияСхемыСканирования(Форма);
	УстановитьПараметрыЭлементовПорядкаОбработкиСкладскогоЗадания(Форма);
	УстановитьГорячиеКлавишиНаТекущейСтранице(Форма);
	СформироватьОчередьПараметровСканирования(Форма);
	
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	ПерейтиКСледующемуПараметруСканирования(Форма);
	УстановитьВидимостьКоличестваВДокументе(Форма);
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Сервис" на странице "Сканирование".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СканированиеСервис(Форма) Экспорт
	
	УстановитьДоступностьИзмененияСхемыСканирования(Форма);
	УстановитьВидимостьДоступностьИзмененияПорядкаОбхода(Форма);
	
	ПерейтиНаСтраницу(Форма,"СтраницаСервис");
	
КонецПроцедуры

// Вызывается при нажатии кнопок возврата в режим сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СервисПродолжитьСканирование(Форма) Экспорт
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	
КонецПроцедуры

// Вызывается при нажатии кнопок возврата к выполнению задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВернутьсяКВыполнениюЗадания(Форма) Экспорт
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	
КонецПроцедуры

// Обработчик ожидания для команды "Ок" на странице ввода значения штрихкода.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВыборЗначенияОКОбработчикОжидания(Форма) Экспорт
	
	Если Не Форма.ВводШтрихкодаОтменен Тогда
		
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
		
		Форма.ПараметрыРежима.Режим = "ВводЗначения";
		ПриСканированииЗначения(Форма, Форма.ШтрихкодПараметраСканирования, Форма.СрокГодностиСерии);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает состояние выполнения складского задания. В зависимости от 
// типа выполняемого задания отображается либо прогресс-бар, либо строка - количество
// отсканированных товаров и ячеек.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВывестиСостояниеВыполненияЗадания(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ТекстИнформацииОСостоянии = "";
	СостояниеВыполненияЗадания = 0;
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница <> Элементы.СтраницаСканирование Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокТары = КоличествоСтрокОтсканированнойТары(Форма);
	
	Если ЭтоНаборТоваров Тогда
		
		Отбор = Новый Структура("КоличествоУпаковокОтсканировано", 0);
		МассивСтрок = ОтсканированныеТовары.НайтиСтроки(Отбор);
		
		КоличествоОтсканированныхСтрок = ОтсканированныеТовары.Количество() - МассивСтрок.Количество() + КоличествоСтрокТары;
		
		Если КоличествоОтсканированныхСтрок = 0 Тогда
			ТекстИнформацииОСостоянии = "";
		ИначеЕсли Форма.ИспользоватьУпаковочныеЛисты
			И ТипЗадания = "Приемка" Тогда
			
			ТекстИнформацииОСостоянии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
				?(КоличествоОтсканированныхСтрок > 1, НСтр("ru = 'Добавлено'"), НСтр("ru = 'Добавлена'")),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоОтсканированныхСтрок, "позиция, позиции, позиций"));
			
		Иначе
			ТекстИнформацииОСостоянии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
				?(КоличествоОтсканированныхСтрок > 1, НСтр("ru = 'Добавлено'"), НСтр("ru = 'Добавлен'")), 
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоОтсканированныхСтрок, "товар, товара, товаров"));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		КоличествоОтсканированныхЯчеек = 0;
		Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкЯчейка) Тогда
			КоличествоОтсканированныхЯчеек = 1;
		КонецЕсли;
		
		СостояниеВыполненияЗадания = ЯчейкиДляСканирования.Итог("Отсканирована") + КоличествоОтсканированныхЯчеек;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		СостояниеВыполненияЗадания = ОтсканированныеТовары.Итог("КоличествоУпаковокОтсканировано") 
			- ОтсканированныеТовары.Итог("КоличествоУпаковокНеОтгружать");
	Иначе
		СостояниеВыполненияЗадания = ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано");
	КонецЕсли;
	
	// Установить нужную страницу отображения состояния.
	Если ЭтоНаборТоваров Тогда
		Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Элементы.СтраницаСостояниеСтрокой;
	Иначе
		Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Элементы.СтраницаСостояние;
	КонецЕсли;
	
	Форма.ТекстИнформацииОСостоянии = ТекстИнформацииОСостоянии;
	Форма.СостояниеВыполненияЗадания = СостояниеВыполненияЗадания;
	
КонецПроцедуры

// Вызывается при выборе строки списка доступных складских зон - приемки или отгрузки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** ЗоныПриемкиОтгрузки - ТаблицаФормы - таблица содержащая информация о зонах приемки и отгрузках складского помещения.
//
Процедура ПриВыбореЗоныПриемкиОтгрузки(Форма) Экспорт
	
	НомерТекущейСтроки = Форма.Элементы.ЗоныПриемкиОтгрузки.ТекущаяСтрока;
	Ячейка = Форма.ЗоныПриемкиОтгрузки.НайтиПоИдентификатору(НомерТекущейСтроки);
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ВыборЗоныПриемкиОтгрузки = ПараметрыРежима.ВыборЗоныПриемкиОтгрузки;
	
	Если Ячейка = Неопределено Тогда
		ВернутьсяКВыполнениюЗадания(Форма);
		Возврат;
	КонецЕсли;
	
	Если ВыборЗоныПриемкиОтгрузки = "ЗонаПриемки" Тогда
		ПараметрыРежима.ЗонаПриемки = Ячейка.Ячейка;
		ПараметрыРежима.НаименованиеЗоныПриемки = Ячейка.КодЯчейки;
	ИначеЕсли ВыборЗоныПриемкиОтгрузки = "ЗонаОтгрузки" Тогда
		ПараметрыРежима.ЗонаОтгрузки = Ячейка.Ячейка;
		ПараметрыРежима.НаименованиеЗоныОтгрузки = Ячейка.КодЯчейки;
	КонецЕсли;
	
	ЗавершитьВыполнениеСкладскогоЗадания(Форма);
	
КонецПроцедуры

// Вызывается при выборе назначения
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** Назначения - ТаблицаФормы - таблица содержащая информацию о предназначениях товаров обособленного хранения.
//
Процедура ПриВыбореНазначения(Форма) Экспорт
	
	ИДТекущейСтроки = Форма.Элементы.Назначения.ТекущаяСтрока;
	Если ИДТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Форма.ТекущаяСтрокаСканирования.НовоеНазначение = Форма.Объект.Назначения.НайтиПоИдентификатору(ИДТекущейСтроки).Назначение;
	Если Форма.ТекущаяСтрокаСканирования.НовоеНазначение = Форма.ТекущаяСтрокаСканирования.Назначение Тогда
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	ИначеЕсли СерииУказываютсяСправочно(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий)
		И СерияИдентифицируетЭкземплярТовара(Форма.ТекущаяСтрокаСканирования) Тогда
		
		Форма.ВводКоличестваКоличество = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		Форма.ПараметрыРежима.Режим    = "ВводКоличестваПоНазначению";
		
		ВводКоличества(Форма);
		
	Иначе
		Форма.ВводКоличестваКоличество = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		
		Если Не ЭтоТара(Форма.ТекущаяСтрокаСканирования)
			И Форма.ТекущаяСтрокаСканирования.ВесУпаковки <> 0 Тогда
			
			Форма.ВводКоличестваВес = Форма.ВводКоличестваКоличество * Форма.ТекущаяСтрокаСканирования.ВесУпаковки
				/ Форма.ТекущаяСтрокаСканирования.КоэффициентЕдиницыИзмеренияВеса;
			
		КонецЕсли;
		
		Если Не ЭтоТара(Форма.ТекущаяСтрокаСканирования)
			И Форма.ТекущаяСтрокаСканирования.ОбъемУпаковки <> 0 Тогда
			
			Форма.ВводКоличестваОбъем = Форма.ВводКоличестваКоличество * Форма.ТекущаяСтрокаСканирования.ОбъемУпаковки
				/ Форма.ТекущаяСтрокаСканирования.КоэффициентЕдиницыИзмеренияОбъема;
			
		КонецЕсли;
		
		Форма.ПараметрыРежима.Режим = "ВводКоличестваПоНазначению";
		ПерейтиНаСтраницу(Форма,"СтраницаВводКоличества");
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Количество" на странице "Сканирование".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СканированиеВвестиКоличество(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоЗаданиеНаРазмещение = (ПараметрыРежима.ТипЗадания = "Размещение");
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(ПараметрыРежима.ПорядокОбработки);
	
	Если Не (ТекущаяСтрокаСканирования = Неопределено) Тогда
		
		Если ЭтоЗаданиеНаРазмещение 
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Форма.ВводКоличестваКоличество = ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
			
		Иначе
			Форма.ВводКоличестваКоличество = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		КонецЕсли;
		
		Если Не ЭтоТара(ТекущаяСтрокаСканирования)
			И ТекущаяСтрокаСканирования.ВесУпаковки <> 0 Тогда
			
			Форма.ВводКоличестваВес = Форма.ВводКоличестваКоличество * ТекущаяСтрокаСканирования.ВесУпаковки
				/ ТекущаяСтрокаСканирования.КоэффициентЕдиницыИзмеренияВеса;
			
		КонецЕсли;
		
		Если Не ЭтоТара(ТекущаяСтрокаСканирования)
			И ТекущаяСтрокаСканирования.ОбъемУпаковки <> 0 Тогда
			
			Форма.ВводКоличестваОбъем = Форма.ВводКоличестваКоличество * ТекущаяСтрокаСканирования.ОбъемУпаковки
				/ ТекущаяСтрокаСканирования.КоэффициентЕдиницыИзмеренияОбъема;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ПараметрыРежима.ПараметрСканирования = "Серия" Тогда
		Форма.ТекущийПараметрСканированияСерия = Истина;
	КонецЕсли;
	
	ПараметрыРежима.Режим = "ВводКоличества";
	
	ПерейтиНаСтраницу(Форма, "СтраницаВводКоличества");
	
КонецПроцедуры

// Обработчик ожидания при вводе количества, вызывается при переходе на страницу ввода количества.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада.
//
Процедура ВводКоличестваОКОбработчикОжидания(Форма) Экспорт
	
	Если Не Форма.ВводКоличестваОтменен Тогда
		ВводКоличества(Форма);
	КонецЕсли;
	Если Не (Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаСканирование)
		И (Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаВводКоличества) Тогда // Могли уже завершить задание и перейти на другую страницу
		ПерейтиНаСтраницу(Форма, "СтраницаСканирование");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Отмена" на странице ввода количества.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВводКоличестваОтмена(Форма) Экспорт
	
	Форма.ВводКоличестваОтменен = Истина;
	
	Форма.ВводКоличестваВес = 0;
	Форма.ВводКоличестваОбъем = 0;
	Форма.ВводКоличестваКоличество = 0;
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Не отгружать" на странице "Сканирование".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СканированиеНеОтгружать(Форма) Экспорт
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если Не (ТекущаяСтрокаСканирования = Неопределено) Тогда
		
		Форма.ВводКоличестваКоличество = ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать;
		
		Если Не ЭтоТара(ТекущаяСтрокаСканирования)
			И ТекущаяСтрокаСканирования.ВесУпаковки <> 0 Тогда
			
			Форма.ВводКоличестваВес = Форма.ВводКоличестваКоличество * ТекущаяСтрокаСканирования.ВесУпаковки
				/ ТекущаяСтрокаСканирования.КоэффициентЕдиницыИзмеренияВеса;
			
		КонецЕсли;
		
		Если Не ЭтоТара(ТекущаяСтрокаСканирования)
			И ТекущаяСтрокаСканирования.ОбъемУпаковки <> 0 Тогда
			
			Форма.ВводКоличестваОбъем = Форма.ВводКоличестваКоличество * ТекущаяСтрокаСканирования.ОбъемУпаковки
				/ ТекущаяСтрокаСканирования.КоэффициентЕдиницыИзмеренияОбъема;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ПараметрыРежима.ПараметрСканирования = "Серия" Тогда
		Форма.ТекущийПараметрСканированияСерия = Истина;
	КонецЕсли;
	
	Форма.ПараметрыРежима.Режим = "ВводКоличестваНеОтгружать";
	
	ПерейтиНаСтраницу(Форма,"СтраницаВводКоличества");
	
КонецПроцедуры

// Возвращает ссылку на строку таблицы истории переходов по страницам формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	ДанныеФормыЭлементКоллекции - строка таблицы истории переходов.
//
Функция ПредыдущаяСтраница(Форма) Экспорт
	
	Если Форма.ПереходыПоСтраницам.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Форма.ПереходыПоСтраницам.Количество() = 1 Тогда
		ПредыдущаяСтраница = Форма.ПереходыПоСтраницам[0];
	Иначе
		Если Форма.ПометитьЯчейкуКПересчету 
			И Форма.ПараметрыРежима.Режим = "ВыборДействия" Тогда
			
			ПредыдущаяСтраница = Форма.ПереходыПоСтраницам[Форма.ПереходыПоСтраницам.Количество() - 3];
			
		Иначе
			ПредыдущаяСтраница = Форма.ПереходыПоСтраницам[Форма.ПереходыПоСтраницам.Количество() - 2];
		КонецЕсли;
	КонецЕсли;
	
	Форма.ПометитьЯчейкуКПересчету = Ложь;
	
	Возврат ПредыдущаяСтраница;
	
КонецФункции

// Выполняет переход на предыдущую страницу. Предыдущая страница берется из истории переходов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиНаПредыдущуюСтраницу(Форма) Экспорт
	
	ПредыдущаяСтраница = ПредыдущаяСтраница(Форма);
	УстановитьЗаголовокФормы(Форма,ПредыдущаяСтраница.ЗаголовокСтраницы);
	
	Если ПредыдущаяСтраница.ИмяСтраницы = "СтраницаСканирование" Тогда
		ВывестиСостояниеВыполненияЗадания(Форма);
	КонецЕсли;
	
	ПерейтиНаСтраницу(Форма, ПредыдущаяСтраница.ИмяСтраницы);
	
КонецПроцедуры

// Вызывается при выборе складского задания из списка, или при нажатии кнопки "Выбрать".
// смотреть в Обработка.РабочееМестоРаботникаСклада.Формы.ФормаРабочегоМеста*.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** Задания - ТаблицаФормы - таблица содержащая информацию о складских заданиях.
// 		* Задания - ДанныеФормыКоллекция - таблица содержащая информацию о складских заданиях, которая содержит:
// 			** Ссылка - ДокументСсылка.ПриходныйОрдерНаТовары, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание, которое принимается в работу.
//
Процедура ПриВыбореЗадания(Форма) Экспорт
	
	НомерТекущейСтроки = Форма.Элементы.Задания.ТекущаяСтрока;
	Если НомерТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗадания = Форма.Задания.НайтиПоИдентификатору(НомерТекущейСтроки);
	Задание = СтрокаЗадания.Ссылка;
	
	ВзятьЗаданиеВРаботу(Форма, Задание);
	
КонецПроцедуры

// Выводит диалоговое сообщение со списком кнопок. Текст сообщения и состав команд
// формируются динамически в зависимости от типа текущего складского задания и 
// его состояния.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СканированиеДействия(Форма) Экспорт
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	Кнопки = Новый СписокЗначений;
	
	КнопкаЗавершить  = НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить выполнение задания'"));
	КнопкаОтменить = НоваяКнопкаДиалога("ОтменитьВыполнениеЗадания", НСтр("ru = 'Отменить выполнение задания'"));
	
	Если ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Размещение" Тогда
			
			ТекстВопроса = НСтр("ru = 'Отменить 
			|добавление товаров 
			|в задание на размещение?'");
			
			КнопкаВернутьсяКВыполнению = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				НСтр("ru = 'Вернуться 
				|к выполнению задания'"), 
				Истина);
			
			Кнопки.Добавить(КнопкаВернутьсяКВыполнению);
			Кнопки.Добавить(КнопкаОтменить);
			
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			
			ТекстВопроса = НСтр("ru = 'Отменить приемку товаров?'");
			
			КнопкаВернутьсяКВыполнению = НоваяКнопкаДиалога(
				"ВернутьсяКВыполнениюЗадания", 
				НСтр("ru = 'Вернуться 
				|к выполнению задания'"), 
				Истина);
			
			Кнопки.Добавить(КнопкаВернутьсяКВыполнению);
			Кнопки.Добавить(КнопкаОтменить);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				НСтр("ru = 'Продолжить 
				|пересчет товаров'"), Истина);
			
			КнопкаЗавершить = НоваяКнопкаДиалога(
				"ЗавершитьВыполнениеЗадания", 
				НСтр("ru = 'Завершить 
				|пересчет товаров'"));
			
			КнопкаОтменить = НоваяКнопкаДиалога(
				"ОтменитьВыполнениеЗадания", 
				НСтр("ru = 'Отменить 
				|пересчет товаров'"));
			
			Кнопки.Добавить(КнопкаПродолжить);
			
			Если ЕстьОтсканированныеТовары(Форма) Тогда
				ТекстВопроса = НСтр("ru = 'Завершить
				|пересчет товаров?'");
				Кнопки.Добавить(КнопкаЗавершить);
			Иначе
				ТекстВопроса = НСтр("ru = 'Отменить
				|пересчет товаров?'");
				Кнопки.Добавить(КнопкаОтменить);
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Отбор" Тогда
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				НСтр("ru = 'Продолжить 
				|отбор товаров'"));
			
			КнопкаЗавершить = НоваяКнопкаДиалога(
				"ЗавершитьВыполнениеЗадания", 
				НСтр("ru = 'Завершить 
				|отбор товаров'"));
				
			КнопкаОтменить = НоваяКнопкаДиалога(
				"ОтменитьВыполнениеЗадания", 
				НСтр("ru = 'Отменить 
				|отбор товаров'"));
			
			Кнопки.Добавить(КнопкаПродолжить);
			
			Если ЕстьОтсканированныеТовары(Форма) Тогда
				ТекстВопроса = НСтр("ru = 'Завершить 
				|отбор товаров?'");
				Кнопки.Добавить(КнопкаЗавершить);
			Иначе
				ТекстВопроса = НСтр("ru = 'Отменить 
				|отбор товаров?'");
				Кнопки.Добавить(КнопкаОтменить);
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				НСтр("ru = 'Продолжить 
				|размещение товаров'"));
			
			КнопкаЗавершить = НоваяКнопкаДиалога(
				"ЗавершитьВыполнениеЗадания", 
				НСтр("ru = 'Завершить 
				|размещение товаров'"));
				
			КнопкаОтменить = НоваяКнопкаДиалога(
				"ОтменитьВыполнениеЗадания", 
				НСтр("ru = 'Отменить 
				|размещение товаров'"));
			
			Кнопки.Добавить(КнопкаПродолжить);
			
			Если ЕстьОтсканированныеТовары(Форма) Тогда
				ТекстВопроса = НСтр("ru = 'Завершить 
				|размещение товаров?'");
				Кнопки.Добавить(КнопкаЗавершить);
			Иначе
				ТекстВопроса = НСтр("ru = 'Отменить 
				|размещение товаров?'");
				Кнопки.Добавить(КнопкаОтменить);
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				НСтр("ru = 'Продолжить 
				|перемещение товаров'"), Истина);
			
			КнопкаЗавершить = НоваяКнопкаДиалога(
				"ЗавершитьВыполнениеЗадания", 
				НСтр("ru = 'Завершить 
				|перемещение товаров'"));
			
			КнопкаОтменить = НоваяКнопкаДиалога(
				"ОтменитьВыполнениеЗадания", 
				НСтр("ru = 'Отменить 
				|перемещение товаров'"));
			
			Если Форма.ПараметрыРежима.ОтборОтсканирован Тогда
				ТекстВопроса = НСтр("ru = 'Завершить 
					|перемещение товаров?'");
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаЗавершить);
			Иначе
				Если ЕстьОтсканированныеТовары(Форма) Тогда
					ТекстВопроса = НСтр("ru = 'Завершить 
					|перемещение товаров?'");
					Кнопки.Добавить(КнопкаПродолжить);
					Кнопки.Добавить(КнопкаЗавершить);
				Иначе
					ТекстВопроса = НСтр("ru = 'Отменить 
					|перемещение товаров?'");
					Кнопки.Добавить(КнопкаПродолжить);
					Кнопки.Добавить(КнопкаОтменить);
				КонецЕсли; 
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				НСтр("ru = 'Продолжить 
				|проверку отбора товаров'"), Истина);
			
			КнопкаЗавершить = НоваяКнопкаДиалога(
				"ЗавершитьВыполнениеЗадания", 
				НСтр("ru = 'Завершить 
				|проверку отбора товаров'"));
			
			КнопкаОтменить = НоваяКнопкаДиалога(
				"ОтменитьВыполнениеЗадания", 
				НСтр("ru = 'Отменить 
				|проверку отбора товаров'"));
			
			Кнопки.Добавить(КнопкаПродолжить);
			
			Если ЕстьОтсканированныеТовары(Форма) Тогда
				ТекстВопроса = НСтр("ru = 'Завершить
				|проверку отбора товаров?'");
				Кнопки.Добавить(КнопкаЗавершить);
			Иначе
				ТекстВопроса = НСтр("ru = 'Отменить
				|проверку отбора товаров?'");
				Кнопки.Добавить(КнопкаОтменить);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Отмена" на странице выбора значения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВыборЗначенияОтмена(Форма) Экспорт
	
	Если Форма.ПометитьЯчейкуКПересчету Тогда
		
		Форма.ВводШтрихкодаОтменен = Истина;
		Форма.ШтрихкодПараметраСканирования = "";
		
		ПерейтиНаПредыдущуюСтраницу(Форма);
		
	Иначе
		
		Форма.ВводШтрихкодаОтменен = Истина;
		Форма.ШтрихкодПараметраСканирования = "";
		Форма.СрокГодностиСерии = "";
		
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
		
	КонецЕсли;
	
КонецПроцедуры

// Переключается на страницу формы, переключает фокус на элемент именно на текущей странице.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** Задания - ТаблицаФормы - таблица содержащая информацию о складских заданиях.
// 			** ГруппаПолеВводаВес - ГруппаФормы - группа содержащая информацию о весовых показателях товара.
// 			** НадписьЕдиницаИзмеренияВес - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** ГруппаПолеВводаОбъем - ГруппаФормы - группа содержащая информацию о весовых показателях товара.
// 			** НадписьЕдиницаИзмеренияОбъем - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьПодсказкаВводКоличества - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** НадписьПодсказкаЗапросИнформации - ПолеФормы - информационная надпись пользовательского интерфейса.
// 			** АдресЯчейки - ПолеФормы - поле ввода адреса складской ячейки.
// 			** ЗоныПриемкиОтгрузки - ТаблицаФормы - таблица содержащая информация о зонах приемки и отгрузках складского помещения.
//	ИмяСтраницы - Строка - имя страницы.
//
Процедура ПерейтиНаСтраницу(Форма, ИмяСтраницы) Экспорт
	
	Элементы = Форма.Элементы;
	ТекущийЭлемент = Форма.ТекущийЭлемент;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ТекущаяСтраница = Элементы[ИмяСтраницы];
	
	Если ТекущаяСтраница = Элементы.СтраницаВыборОперации Тогда
		
		ПараметрыРежима.Режим = "ВыборОперации";
		
		ОчиститьИсториюПереходовПоСтраницам(Форма);
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбОперацию", Форма);
		УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		ТекущийЭлемент = Элементы.ОсновноеМенюОтбор;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборЗадания Тогда
		
		ПараметрыРежима.Режим = "ВыборЗадания";
		Элементы.Задания.Доступность = Истина;
		ТекущийЭлемент = Элементы.Задания;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСканирование Тогда
		
		ПараметрыРежима.Режим = "Сканирование";
		УстановитьПараметрыЭлементовСканирования(Форма);
		ТекущийЭлемент = ?(ТипЗадания = "Приемка"
								Или ТипЗадания = "ПроверкаОтбора",
							Элементы.СканированиеТовар,
							Элементы.СканированиеЯчейка);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводКоличества Тогда
		
		Форма.ВводКоличестваОтменен = Ложь;
		
		ТекстЗаголовка = НСтр("ru = 'Введите кол-во'");
		ТекстПодсказки = НСтр("ru = 'Введите количество отсканированных товаров.'");
		
		Если ПараметрыРежима.Режим = "ВводКоличестваПоНазначению" Тогда
			
			ТекстПодсказки = НСтр("ru = 'Введите количество уже отсканированного товара по выбранному назначению.'");
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если ПараметрыРежима.Режим = "ВводКоличестваНеОтгружать" Тогда
				ТекстПодсказки = НСтр("ru = 'Введите количество товара которое не надо отгружать.'");
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
		
		Если ТипЗадания = "Отбор"
			Или ТипЗадания = "Размещение"
			Или ТипЗадания = "Перемещение"
			Или ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				Элементы.ВводКоличестваКоличество.ФорматРедактирования = "ЧЦ=15; ЧДЦ=0";
				
			Иначе
				Элементы.ВводКоличестваКоличество.ФорматРедактирования = "";
			КонецЕсли;
			
		Иначе
			Элементы.ВводКоличестваКоличество.ФорматРедактирования = "";
		КонецЕсли;
		
		Если Не ЭтоТара(ТекущаяСтрокаСканирования)
			И (ТекущаяСтрокаСканирования.ВесУпаковки <> 0) Тогда
			
			ЕдиницаИзмеренияВеса = ?(РежимВебСервиса,
									ТекущаяСтрокаСканирования.НаименованиеЕдиницыИзмеренияВеса,
									ТекущаяСтрокаСканирования.ЕдиницаИзмеренияВеса);
			
			ЗаголовокВес = НСтр("ru = 'Вес, %ЕдиницаИзмерения%'");
			ЗаголовокВес = СтрЗаменить(ЗаголовокВес, "%ЕдиницаИзмерения%", ЕдиницаИзмеренияВеса);
			
			Элементы.ГруппаПолеВводаВес.Доступность = Истина;
			Элементы.НадписьЕдиницаИзмеренияВес.Заголовок = ЗаголовокВес;
			
		Иначе
			Элементы.ГруппаПолеВводаВес.Доступность = Ложь;
			Элементы.НадписьЕдиницаИзмеренияВес.Заголовок = НСтр("ru = 'Вес'");
		КонецЕсли;
		
		Если Не ЭтоТара(ТекущаяСтрокаСканирования)
			И (ТекущаяСтрокаСканирования.ОбъемУпаковки <> 0) Тогда
			
			ЕдиницаИзмеренияОбъема = ?(РежимВебСервиса,
										ТекущаяСтрокаСканирования.НаименованиеЕдиницыИзмеренияОбъема,
										ТекущаяСтрокаСканирования.ЕдиницаИзмеренияОбъема);
			
			ЗаголовокОбъем = НСтр("ru = 'Объем, %ЕдиницаИзмерения%'");
			ЗаголовокОбъем = СтрЗаменить(ЗаголовокОбъем, "%ЕдиницаИзмерения%", ЕдиницаИзмеренияОбъема);
			
			Элементы.ГруппаПолеВводаОбъем.Доступность = Истина;
			Элементы.НадписьЕдиницаИзмеренияОбъем.Заголовок = ЗаголовокОбъем;
			
		Иначе
			Элементы.ГруппаПолеВводаОбъем.Доступность = Ложь;
			Элементы.НадписьЕдиницаИзмеренияОбъем.Заголовок = НСтр("ru = 'Объем'");
		КонецЕсли;
		
		Элементы.НадписьПодсказкаВводКоличества.Заголовок = ТекстПодсказки;
		ТекущийЭлемент = Элементы.ВводКоличестваКоличество;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗапросИнформации Тогда
		
		Форма.ВводШтрихкодаОтменен = Ложь;
		Форма.ШтрихкодПараметраСканирования = "";
		ПараметрыРежима.Режим = "ЗапросИнформации";
		
		Если Не Форма.ПометитьЯчейкуКПересчету Тогда
			
			ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокПолучИнформации", Форма);
			ТекстПодсказки = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКТовараЯчейки", Форма);
			
			УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
			Элементы.НадписьПодсказкаЗапросИнформации.Заголовок = ТекстПодсказки;
			Элементы.СтраницыТаблицаИнформацииПометкаЯчейки.ТекущаяСтраница = Элементы.СтраницаТаблицаИнформации;
			
			Элементы.ИнформацияЗакрыть.Видимость = Истина;
			ТекущийЭлемент = Элементы.ИнформацияЗакрыть;
			
		Иначе
			
			ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокПометкиЯчейкиКПересчету", Форма);
			ТекстПодсказки = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКЯчейкиКПересчету", Форма);
			
			УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
			
			Элементы.НадписьПодсказкаЗапросИнформации.Заголовок = ТекстПодсказки;
			Элементы.СтраницыТаблицаИнформацииПометкаЯчейки.ТекущаяСтраница = Элементы.СтраницаПометкаЯчейки;
			Элементы.АдресЯчейки.Доступность = Истина;
			Элементы.ИнформацияЗакрыть.Видимость = Ложь;
			
			ТекущийЭлемент = Элементы.АдресЯчейки;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСообщение Тогда
		
		ПараметрыРежима.Режим = "ВыборДействия";
		Элементы.Задания.Доступность = Ложь;
		Элементы.ЗоныПриемкиОтгрузки.Доступность = Ложь;
		ТекущийЭлемент = Элементы.НадписьТекстСообщения;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборЗначения Тогда
		
		Форма.ВводШтрихкодаОтменен = Ложь;
		ПараметрыРежима.Режим = "ВводЗначения";
		
		ТекстЗаголовка = НСтр("ru = 'Ввод штрихкода'");
		УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		
		СрокГодностиСерии = "";
		ШтрихкодПараметраСканирования = "";
		
		ТекущийЭлемент = Элементы.ШтрихкодПараметраСканирования;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборЗоныПриемкиОтгрузки Тогда
		
		ПараметрыРежима.Режим = "ВыборЗоныПриемкиРазмещения";
		Элементы.ЗоныПриемкиОтгрузки.Доступность = Истина;
		ТекущийЭлемент = Элементы.ЗоныПриемкиОтгрузки;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСервис Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Сервис'");
		УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		ТекущийЭлемент = Элементы.СервисРежимСканированияСерийТСТ;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборНазначения Тогда
		
		ТекущийЭлемент = Элементы.Назначения;
		
	КонецЕсли;
	
	ПриПереходеНаСтраницу(Форма, ИмяСтраницы);
	
	Элементы.СтраницыФормы.ТекущаяСтраница = ТекущаяСтраница;
	УстановитьГорячиеКлавишиНаТекущейСтранице(Форма);
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Далее" на странице сканирования товаров.
// В зависимости от типа задания, текущего состояния выполнения задания, формируется
// структура диалога - текст сообщения о состав кнопок. Затем отображается диалоговое 
// сообщение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СканированиеДалее(Форма) Экспорт
	
	Перем ПредставлениеТипаЗадания, ТипВыполнения, ТипДействия;
	
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	НомерЯчейки = ТекущаяСтрокаСканирования.НомерЯчейки;
	КоличествоЯчеек = ТекущаяСтрокаСканирования.КоличествоЯчеек;
	
	ЭтоПоследняяЯчейка = ЭтоПоследняяЯчейка(Форма);
	ЭтоПоследнийТоварВЯчейке = ЭтоПоследнийТоварВЯчейке(Форма);
	ЭтоПоследняяСтрокаСканирования = ЭтоПоследняяСтрокаСканирования(Форма);
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	ЕстьОтсканированныеТоварыВТекущейЯчейке = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура);
	ЕстьОтсканированнаяЯчейка = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкЯчейка);
	
	ПредставлениеТовара = ?(РежимВебСервиса,
		ПредставлениеТовара(ТекущаяСтрокаСканирования.НаименованиеНоменклатуры,
			ТекущаяСтрокаСканирования.НаименованиеХарактеристики),
		ПредставлениеТовара(ТекущаяСтрокаСканирования.Номенклатура,
			ТекущаяСтрокаСканирования.Характеристика));
	
	ПолучитьЗначенияЭлементовСообщенияПользователю(ТипЗадания, ОтборОтсканирован, ПредставлениеТипаЗадания,
		ТипВыполнения, ТипДействия);
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	// В зависимости от типа операции сформировать текст вопроса и список кнопок диалога.
	Кнопки = Новый СписокЗначений;
	
	Если ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Размещение" Тогда
			
			Если ЕстьОтсканированныеТовары Тогда
				
				ТекстВопроса = НСтр("ru = 'Завершить 
					|добавление товаров и перейти к размещению по ячейкам?'");
				
				КнопкаЗавершить = НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания", 
					НСтр("ru = 'Перейти 
						|к размещению товаров'"));
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Отменить 
				|добавление товаров в задание на размещение?'");
				
				КнопкаЗавершить = НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания", 
					НСтр("ru = 'Отменить выполнение задания'"));
				
			КонецЕсли;
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиКСканированию", 
				НСтр("ru = 'Продолжить 
					|добавление товаров'"));
			
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			
			Если ЕстьОтсканированныеТовары Тогда
				
				ТекстВопроса = НСтр("ru = 'Завершить 
					|приемку товаров?'");
				
				КнопкаЗавершить = НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания",
					НСтр("ru = 'Завершить 
						|приемку товаров'"));
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Отменить 
				|выполнение приемки товаров?'");
				
				КнопкаЗавершить = НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания",
					НСтр("ru = 'Отменить 
						|приемку товаров'"));
				
			КонецЕсли;
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу",
				НСтр("ru = 'Продолжить 
					|приемку товаров'"));
			
		КонецЕсли;
		
		КнопкаПродолжить.Выделить = Истина;
		
		Кнопки.Добавить(КнопкаПродолжить);
		Кнопки.Добавить(КнопкаЗавершить);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		КнопкаПродолжить = НоваяКнопкаДиалога(
			"ПерейтиНаПредыдущуюСтраницу", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Продолжить 
					|пересчет товаров в ячейке %1'"),
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка)));
		
		КнопкаПерейтиКСледЯчейке = НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования", 
			НСтр("ru = 'Перейти к следующей ячейке'"));
		
		КнопкаЗавершить = НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания", 
			НСтр("ru = 'Завершить 
				|выполнение задания'"));
		
		Если ЭтоПоследняяЯчейка Тогда
			
			Если ЕстьОтсканированнаяЯчейка 
				И ЕстьОтсканированныеТоварыВТекущейЯчейке Тогда
				
				ТекстСообщения = НСтр("ru = 'Ячейка %1 
					|последняя в задании на пересчет.
					|
					|Завершить выполнение 
					|пересчета товаров?'");
				
			ИначеЕсли ЕстьОтсканированнаяЯчейка 
				И НЕ ЕстьОтсканированныеТоварыВТекущейЯчейке Тогда
				
				ТекстСообщения = НСтр("ru = 'Ячейка %1 
					|последняя в задании на пересчет,
					|и в ней не было отсканировано ни одного товара.
					|
					|Завершить выполнение 
					|пересчета товаров?'");
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Ячейка %1 не была отсканирована.
					|
					|Завершить выполнение 
					|пересчета товаров?'");
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
			
			КнопкаЗавершить.Выделить = Истина;
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		Иначе
			
			Если ЕстьОтсканированнаяЯчейка 
				И ЕстьОтсканированныеТоварыВТекущейЯчейке Тогда
				
				ТекстВопроса = НСтр("ru = 'Выполнение задания по пересчету товаров 
					|в ячейке не закончено.'");
				
			ИначеЕсли ЕстьОтсканированнаяЯчейка 
				И НЕ ЕстьОтсканированныеТоварыВТекущейЯчейке Тогда
				
				ТекстВопроса = НСтр("ru = 'В ячейке не было отсканировано ни одного товара.
					|После перехода к пересчету товаров в следующей ячейке возврат к текущей будет невозможен.
					|
					|Перейти к пересчету товаров в следующей ячейке?'");
				
			ИначеЕсли НЕ ЕстьОтсканированнаяЯчейка Тогда 
				
				ТекстВопроса = НСтр("ru = 'Ячейка %1 не была отсканирована.
					|После перехода к пересчету товаров в следующей ячейке возврат к текущей будет невозможен.
					|
					|Перейти к пересчету товаров в следующей ячейке?'");
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстВопроса, 
					?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
				
			КонецЕсли;
			
			КнопкаПерейтиКСледЯчейке.Выделить = Истина;
			
			Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		КнопкаПродолжить = НоваяКнопкаДиалога(
			"ПерейтиНаПредыдущуюСтраницу", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Продолжить 
					|отбор товаров из ячейки %1'"), 
			?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка)));
		
		КнопкаПерейтиКСледЯчейке = НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования",
			НСтр("ru = 'Перейти 
				|к следующей ячейке'"));
		
		КнопкаПерейтиКСледТовару = НоваяКнопкаДиалога(
			"ПерейтиКСледующемуТоваруСканирования",
			НСтр("ru = 'Перейти 
				|к следующему товару'"));
		
		КнопкаЗавершить = НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания",
			НСтр("ru = 'Завершить 
				|выполнение задания'"));
		
		КнопкаДобрать = НоваяКнопкаДиалога(
			"ДобратьТовары",
			НСтр("ru = 'Продолжить
				|отбор товаров в других ячейках'"));
		
		Если Не (КоличествоЯчеек = НомерЯчейки) Тогда
			
			ТекстВопроса = НСтр("ru = 'Задание по отбору не закончено.'");
			
			Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
			
			Если ЕстьОтсканированнаяЯчейка Тогда
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
			КонецЕсли;
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		ИначеЕсли Не ЭтоПоследнийТоварВЯчейке Тогда
			
			ТекстВопроса = НСтр("ru = 'Задание по отбору не закончено.'");
			
			Если Не Форма.ТоварыПодобраны Тогда
				Кнопки.Добавить(КнопкаДобрать);
			КонецЕсли;
			
			Если ЕстьОтсканированнаяЯчейка Тогда
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
			КонецЕсли;
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		ИначеЕсли (КоличествоЯчеек = НомерЯчейки)
			И ЭтоПоследнийТоварВЯчейке Тогда
			
			Если Не ЕстьОтсканированныеТоварыВТекущейЯчейке Или ЭтоПоследняяСтрокаСканирования Тогда
				
				ПараметрыЗамены = Новый Структура;
				
				ПараметрыЗамены.Вставить("Товар", ПредставлениеТовара);
				ПараметрыЗамены.Вставить("Ячейка",
					?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
				ПараметрыЗамены.Вставить("ТипЗадания", ПредставлениеТипаЗадания);
				ПараметрыЗамены.Вставить("ТипВыполнения", ТипВыполнения);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
					НСтр("ru = 'Товар ""[Товар]"" 
						|в ячейке ""[Ячейка]"" 
						|последний в задании на [ТипЗадания].
						|
						|Завершить выполнение 
						|[ТипВыполнения] товаров?'"), 
					ПараметрыЗамены);
				
			Иначе
				ТекстВопроса = НСтр("ru = 'Задание по отбору не закончено.'");
			КонецЕсли;
			
			Если Не Форма.ТоварыПодобраны Тогда
				Кнопки.Добавить(КнопкаДобрать);
			КонецЕсли;
			
			Если Не ЭтоПоследняяСтрокаСканирования Тогда
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
			КонецЕсли;
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		КнопкаПродолжить = НоваяКнопкаДиалога(
			"ПерейтиНаПредыдущуюСтраницу", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Продолжить 
					|размещение товаров в ячейку %1'"), 
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка)));
		
		КнопкаПерейтиКСледЯчейке = НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования",
			НСтр("ru = 'Перейти 
				|к следующей ячейке'"));
		
		КнопкаПерейтиКСледТовару = НоваяКнопкаДиалога(
			"ПерейтиКСледующемуТоваруСканирования",
			НСтр("ru = 'Перейти 
				|к следующему товару'"));
		
		КнопкаЗавершить = НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания",
			НСтр("ru = 'Завершить 
				|размещение товаров'"));
		
		КнопкаДобрать = НоваяКнопкаДиалога(
			"ДобратьТовары",
			НСтр("ru = 'Продолжить
				|размещение товаров в других ячейках'"));
		
		Если ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			ТекстВопроса = НСтр("ru = 'Завершить размещение товаров?'");
			
			КнопкаПродолжить = НоваяКнопкаДиалога(
				"ПерейтиНаПредыдущуюСтраницу", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Продолжить 
						|размещение товаров'"),
					?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка)));
				
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		Иначе
			Если Не (КоличествоЯчеек = НомерЯчейки) Тогда
				
				ТекстВопроса = НСтр("ru = 'Задание по размещению товаров 
					|не закончено.'");
				
				Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
				
				Если ЕстьОтсканированнаяЯчейка Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаЗавершить);
				
			ИначеЕсли Не ЭтоПоследнийТоварВЯчейке Тогда
				
				ТекстВопроса = НСтр("ru = 'Задание по размещению не закончено.'");
				
				Если Не Форма.ТоварыПодобраны Тогда
					Кнопки.Добавить(КнопкаДобрать);
				КонецЕсли;
				
				Если ЕстьОтсканированнаяЯчейка Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаЗавершить);
				
			ИначеЕсли (КоличествоЯчеек = НомерЯчейки)
				И ЭтоПоследнийТоварВЯчейке Тогда
				
				Если Не ЕстьОтсканированныеТоварыВТекущейЯчейке
					Или ЭтоПоследняяСтрокаСканирования Тогда
					
					ПараметрыЗамены = Новый Структура;
					
					ПараметрыЗамены.Вставить("Товар", ПредставлениеТовара);
					ПараметрыЗамены.Вставить("Ячейка",
						?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
					ПараметрыЗамены.Вставить("ТипЗадания", ПредставлениеТипаЗадания);
					ПараметрыЗамены.Вставить("ТипВыполнения", ТипВыполнения);
					
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						НСтр("ru = 'Товар ""[Товар]"" 
							|в ячейке ""[Ячейка]"" 
							|последний в задании на [ТипЗадания].
							|
							|Завершить выполнение 
							|[ТипВыполнения] товаров?'"), 
						ПараметрыЗамены);
					
				Иначе
					ТекстВопроса = НСтр("ru = 'Задание по размещению не закончено.'");
				КонецЕсли;
				
				Если Не Форма.ТоварыПодобраны Тогда
					Кнопки.Добавить(КнопкаДобрать);
				КонецЕсли;
				
				Если Не ЭтоПоследняяСтрокаСканирования Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
					
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаЗавершить);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		КнопкаПродолжить = НоваяКнопкаДиалога(
			"ПерейтиНаПредыдущуюСтраницу",
			НСтр("ru = 'Продолжить 
				|сканирование товаров'"));
		
		КнопкаПерейтиКСледЯчейке = НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования",
			НСтр("ru = 'Перейти 
				|к следующей ячейке'"));
		
		КнопкаПерейтиКСледТовару = НоваяКнопкаДиалога(
			"ПерейтиКСледующемуТоваруСканирования",
			НСтр("ru = 'Перейти 
				|к следующему товару'"));
		
		КнопкаЗавершить = НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания",
			НСтр("ru = 'Завершить 
				|выполнение задания'"));
		
		КнопкаПерейтиКРазмещению = НоваяКнопкаДиалога(
			"ПерейтиКРазмещениюТоваров",
			НСтр("ru = 'Перейти 
				|к размещению товаров'"));
		
		Если ОтборОтсканирован Тогда
			
			Если Не ЭтоПоследняяЯчейка Тогда
				
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ТекстВопроса = НСтр("ru = 'Завершить перемещение товаров?'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Задание по размещению не закончено.'");
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаПродолжить);
				
				Если Не ЭтоПорядокОбработкиТоварЯчейка Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
				КонецЕсли;
				
				Если ЕстьОтсканированнаяЯчейка
					И Не ЭтоПорядокОбработкиТоварЯчейка Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаЗавершить);
				
			ИначеЕсли Не ЭтоПоследнийТоварВЯчейке Тогда
				
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ТекстВопроса = НСтр("ru = 'Завершить перемещение товаров?'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Задание по размещению не закончено.'");
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаПродолжить);
				
				Если ЕстьОтсканированнаяЯчейка
					И Не ЭтоПорядокОбработкиТоварЯчейка Тогда
					
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
					
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаЗавершить);
				
			ИначеЕсли ЭтоПоследняяЯчейка
				И ЭтоПоследнийТоварВЯчейке Тогда
				
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ТекстВопроса = НСтр("ru = 'Завершить 
						|перемещение товаров?'");
				Иначе
					Если Не ЕстьОтсканированныеТоварыВТекущейЯчейке Или ЭтоПоследняяСтрокаСканирования Тогда
						
						ПараметрыЗамены = Новый Структура;
						
						ПараметрыЗамены.Вставить("Товар", ПредставлениеТовара);
						ПараметрыЗамены.Вставить("Ячейка",
							?(РежимВебСервиса, Форма.ТекущаяСтрокаСканирования.КодЯчейки, Форма.ТекущаяСтрокаСканирования.Ячейка));
						ПараметрыЗамены.Вставить("ТипЗадания", ПредставлениеТипаЗадания);
						ПараметрыЗамены.Вставить("ТипВыполнения", ТипВыполнения);
						
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
							НСтр("ru = 'Товар ""[Товар]"" в ячейке ""[Ячейка]"" последний в задании на [ТипЗадания]. 
								|Завершить выполнение задания?'"),
							ПараметрыЗамены);
						
					Иначе
						ТекстВопроса = НСтр("ru = 'Выполнение задания по размещению товаров 
							|не закончено.'");
					КонецЕсли;
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаПродолжить);
				
				Если Не ЭтоПорядокОбработкиТоварЯчейка Тогда
					Если Не ЕстьОтсканированныеТоварыВТекущейЯчейке Тогда
						// Не требуется предлагать выполнение обработки следующего товара по складскому заданию.
					ИначеЕсли Не ЭтоПоследняяСтрокаСканирования Тогда
						Кнопки.Добавить(КнопкаПерейтиКСледТовару);
					КонецЕсли;
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаЗавершить);
				
			КонецЕсли;
			
		Иначе
			
			Если Не ЭтоПоследняяЯчейка Тогда
				
				ТекстВопроса = НСтр("ru = 'Задание по отбору товаров не закончено.'");
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
				
				Если ЕстьОтсканированнаяЯчейка Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
				
				Если ЕстьОтсканированныеТовары Тогда
					Кнопки.Добавить(КнопкаПерейтиКРазмещению);
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаЗавершить);
				
			ИначеЕсли Не ЭтоПоследнийТоварВЯчейке Тогда
				
				ТекстВопроса = НСтр("ru = 'Задания по отбору не закончено.'");
				
				Кнопки.Добавить(КнопкаПродолжить);
				
				Если ЕстьОтсканированнаяЯчейка Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
				
				Если ЕстьОтсканированныеТовары Тогда
					Кнопки.Добавить(КнопкаПерейтиКРазмещению);
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаЗавершить);
				
			ИначеЕсли ЭтоПоследняяЯчейка
				И ЭтоПоследнийТоварВЯчейке Тогда
				
				Если Не ЕстьОтсканированныеТоварыВТекущейЯчейке
					Или ЭтоПоследняяСтрокаСканирования Тогда
					
					ПараметрыЗамены = Новый Структура;
					
					ПараметрыЗамены.Вставить("Товар", ПредставлениеТовара);
					ПараметрыЗамены.Вставить("Ячейка",
						?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
					ПараметрыЗамены.Вставить("ТипЗадания", ПредставлениеТипаЗадания);
					ПараметрыЗамены.Вставить("ЗавершитьОтбор",
						?(ЕстьОтсканированныеТовары,
							НСтр("ru = 'Завершить отбор и перейти 
								|к размещению товаров?'"),
							НСтр("ru = 'Завершить отбор?'")));
					
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						НСтр("ru = 'Товар ""[Товар]"" 
							|в ячейке ""[Ячейка]"" 
							|последний в задании на [ТипЗадания]. 
							|
							|[ЗавершитьОтбор]'"), 
						ПараметрыЗамены);
					
				Иначе
					ТекстВопроса = НСтр("ru = 'Задание по отбору не закончено.'");
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаПродолжить);
				
				Если Не ЕстьОтсканированныеТоварыВТекущейЯчейке Тогда
					// Не требуется предлагать выполнение обработки следующего товара по складскому заданию.
				ИначеЕсли Не ЭтоПоследняяСтрокаСканирования Тогда
					Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				КонецЕсли;
				
				Если ЕстьОтсканированныеТовары Тогда
					Кнопки.Добавить(КнопкаПерейтиКРазмещению);
				КонецЕсли;
				
				Кнопки.Добавить(КнопкаЗавершить);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		КнопкаПродолжить = НоваяКнопкаДиалога(
			"ПерейтиНаПредыдущуюСтраницу",
			НСтр("ru = 'Продолжить 
				|проверку отбора товаров'"));
		
		КнопкаПерейтиКСледТовару = НоваяКнопкаДиалога(
			"ПерейтиКСледующемуТоваруСканирования",
			НСтр("ru = 'Перейти 
				|к следующему товару'"));
		
		КнопкаЗавершить = НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания",
			НСтр("ru = 'Завершить 
				|проверку отбора товаров'"));
		
		ТекстВопроса = НСтр("ru = 'Завершить 
			|проверку отбора товаров?'");
		
		Кнопки.Добавить(КнопкаПродолжить);
		
		Если Не ЭтоПоследняяСтрокаСканирования
			Или Не ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			
			ТекстВопроса = НСтр("ru = 'Перейти 
				|к следующему товару?'");
			Кнопки.Добавить(КнопкаПерейтиКСледТовару);
			
		КонецЕсли;
		
		Кнопки.Добавить(КнопкаЗавершить);
		
	КонецЕсли;
	
	ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
	
КонецПроцедуры

// Вызывается при нажатии кнопки получения информации.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКПолучениюИнформации(Форма) Экспорт
	
	Форма.ТаблицаИнформации.Очистить();
	Форма.ПометитьЯчейкуКПересчету = Ложь;
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

// Вызывается при нажатии кнопки отметки ячейки к пересчету.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКОтметкеЯчейкиКПересчету(Форма) Экспорт
	
	Форма.ТаблицаИнформации.Очистить();
	Форма.ПометитьЯчейкуКПересчету = Истина;
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

// Вызывается из обработчика ожидания в форме рабочего места работника склада.
// Используется для периодического обновления списка доступных складских заданий.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** Задания - ТаблицаФормы - таблица содержащая информацию о складских заданиях.
//
Процедура ОбновитьСписокЗаданийОбработчикОжидания(Форма) Экспорт
	
	Если Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаВыборОперации Тогда
		ОбновитьОсновноеМеню(Форма);
	ИначеЕсли Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаВыборЗадания Тогда
		Форма.Элементы.Задания.Обновить();
	КонецЕсли;
	
КонецПроцедуры

// Используется при попытках закрыть форму рабочего места работника склада,
// с помощью кнопки закрытия или клавиши Esc.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура НеЗакрыватьФормуМобильногоРабочегоМеста(Форма) Экспорт
	
	Форма.ПараметрыРежима.МожноЗакрытьФорму = Ложь;
	ПерейтиКВыборуСкладскойОперации(Форма);
	
КонецПроцедуры

// Вызывается при нажатии кнопки закрытия на странице получения информации.
// Возвращает рабочее место на предыдущую страницу.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ИнформацияЗакрыть(Форма) Экспорт
	
	ПерейтиНаПредыдущуюСтраницу(Форма);
	
КонецПроцедуры

// Вызывается из обработчика события ПередЗакрытием форм рабочего места.
//  Необходимо предотвратить ситуацию, когда складское задание взято в работу
//  и не завершено. Следует либо отменить его, либо все-же выполнить.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
// 	Отказ - Булево - Истина, если не требуется выполнить закрытие формы рабочего места.
// 	СтандартнаяОбработка - Булево - Истина, если выполняется стандартная, системная обработка закрытия формы.
//
Процедура ПередЗакрытием(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	МожноЗакрытьФорму = Форма.ПараметрыРежима.МожноЗакрытьФорму;
	ТекущаяСтраница = Форма.Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Если Не МожноЗакрытьФорму Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Если ТекущаяСтраница = Элементы.СтраницаВыборЗначения Тогда
			
			ВыборЗначенияОтмена(Форма);
			Возврат;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводКоличества Тогда
			
			ВводКоличестваОтмена(Форма);
			Возврат;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСканирование Тогда
			
			ТекстСообщения                = НСтр("ru = 'Сейчас нельзя закрыть программу - сначала нужно завершить текущее задание.'");
			ПараметрыРежима.ЗакрытиеФормы = Истина;
			
			Кнопки = Новый СписокЗначений;
			
			Кнопки.Добавить(НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить задание'")));
			Кнопки.Добавить(НоваяКнопкаДиалога("ПерейтиКСканированию", НСтр("ru = 'Вернуться к выполнению задания'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
			Возврат;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗапросИнформации Тогда
			
			Если Форма.ПометитьЯчейкуКПересчету Тогда
				ВыборЗначенияОтмена(Форма);
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборОперации Тогда
			ОсновноеМенюЗакрыть(Форма);
			Возврат;
		ИначеЕсли ТекущаяСтраница <> Элементы.СтраницаВыборОперации Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		// Проверить режим и состояние режима из которого пытаются закрыть формы.
		Если ТоварыДляСканирования.Количество() > 0 Тогда
			
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Сейчас нельзя закрыть программу - сначала нужно завершить текущее задание.'");
			
			Кнопки = Новый СписокЗначений;
			
			Кнопки.Добавить(НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить задание'")));
			Кнопки.Добавить(НоваяКнопкаДиалога("ПерейтиКСканированию", НСтр("ru = 'Вернуться к выполнению задания'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Закрыть программу?'");
			
			Кнопки = Новый СписокЗначений;
			
			Кнопки.Добавить(НоваяКнопкаДиалога("ЗакрытьФормуМобильногоРабочегоМеста", НСтр("ru = 'Закрыть'")));
			Кнопки.Добавить(НоваяКнопкаДиалога("НеЗакрыватьФормуМобильногоРабочегоМеста", НСтр("ru = 'Не закрывать'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
			НоменклатураСервер.СохранитьНастройкуРежимСканированияСерий(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при нажатии кнопки закрытия на основной странице обработки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОсновноеМенюЗакрыть(Форма) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Закрыть программу?'");
	
	КнопкаЗакрыть = НоваяКнопкаДиалога("ЗакрытьФормуМобильногоРабочегоМеста", НСтр("ru = 'Закрыть'"), Истина);
	КнопкаНеЗакрывать = НоваяКнопкаДиалога("НеЗакрыватьФормуМобильногоРабочегоМеста", НСтр("ru = 'Не закрывать'"));
	
	Кнопки = Новый СписокЗначений;
	
	Кнопки.Добавить(КнопкаЗакрыть);
	Кнопки.Добавить(КнопкаНеЗакрывать);
	
	ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
	
КонецПроцедуры

// Переключается на страницу вывода сообщения, выводит текст сообщения и отображает список команд
// доступных вариантов ответа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** НадписьТекстСообщения - ПолеФормы - информационная надпись пользовательского интерфейса.
//	ТекстСообщения - Строка - текст вопроса или сообщения.
//	Кнопки - СписокЗначений, Структура - список кнопок или одна кнопка.
//	ЗаголовокСообщения - Строка - текст который будет установлен в заголовок формы.
//	ОтображатьТаблицуИнформации - Булево - если указано значение, то отображается таблица.
//
Процедура ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки, ЗаголовокСообщения = "", ОтображатьТаблицуИнформации = Ложь) Экспорт
	
	ПолучитьСообщенияПользователю(Истина);
	
	Элементы = Форма.Элементы;
	
	Элементы.НадписьТекстСообщения.Заголовок = ТекстСообщения;
	Элементы.ТаблицаИнформацияСообщения.Видимость = ОтображатьТаблицуИнформации;
	
	// Удалить существующие кнопки действий.
	ГраницаИндекса = Элементы.ГруппаКомандыДействий.ПодчиненныеЭлементы.Количество() - 1;
	
	Для ТекИндекс = 0 По ГраницаИндекса Цикл
		
		ОбрИндекс = ГраницаИндекса - ТекИндекс;
		Элемент = Элементы.ГруппаКомандыДействий.ПодчиненныеЭлементы[ОбрИндекс];
		
		Элементы.Удалить(Элемент);
		
	КонецЦикла;
	
	// Добавить кнопки действий.
	Если ТипЗнч(Кнопки) = Тип("СписокЗначений") Тогда
		
		// Предварительно надо пройти по списку кнопок и проверить,
		// должна быть хотя бы одна "выделенная" кнопка. И таких кнопок не должно быть более одной.
		// Если нет ни одной "выделенной" кнопки, то нужно хотя бы одну выделить.
		// Выделенная кнопка должна быть первой сверху.
		
		КоличествоВыделенных = 0;
		
		Для каждого ЭлементСписка Из Кнопки Цикл
			
			Кнопка = ЭлементСписка.Значение;
			
			Если Кнопка.Выделить Тогда
				КоличествоВыделенных = КоличествоВыделенных + 1;
				Если КоличествоВыделенных = 1 Тогда
					Продолжить;
				Иначе
					Кнопка.Выделить = Ложь; // сбросить признак выделения у "излишне" выделенной кнопки
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// ... если нет ни одной выделенной кнопки, то выделить хотя бы одну.
		Если КоличествоВыделенных = 0 И (Кнопки.Количество() > 1) Тогда
			Кнопки[0].Значение.Выделить = Истина;
		КонецЕсли;
		
		// ... проверить, что выделенная кнопка сверху.
		ВыделеннаяКнопка = Неопределено;
		
		Для каждого ЭлементСписка Из Кнопки Цикл
			Если ЭлементСписка.Значение.Выделить Тогда
				ВыделеннаяКнопка = ЭлементСписка;
			КонецЕсли;
		КонецЦикла;
		
		Если Не (ВыделеннаяКнопка = Неопределено) Тогда
			Кнопки.Удалить(ВыделеннаяКнопка);
			Кнопки.Вставить(0, ВыделеннаяКнопка.Значение);
		КонецЕсли;
		
		// Вывести кнопки в диалог сообщения.
		Для каждого ЭлементСписка Из Кнопки Цикл
			ДобавитьКнопкуДиалогаСообщения(Форма, ЭлементСписка.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Кнопки) = Тип("Структура") Тогда
		
		ДобавитьКнопкуДиалогаСообщения(Форма, Кнопки);
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Форма, ЗаголовокСообщения);
	ПерейтиНаСтраницу(Форма, "СтраницаСообщение");
	
КонецПроцедуры

// Процедура для установки заголовков элементов сканирования. Вызывается
// при переходе на другую строку, товар или ячейку сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада
//
Процедура УстановитьЗаголовкиЭлементовСканирования(Форма) Экспорт
	
	УстановитьЗаголовокЯчейки(Форма);
	УстановитьЗаголовокТовара(Форма);
	УстановитьЗаголовокНазначения(Форма);
	УстановитьЗаголовокСерии(Форма);
	УстановитьЗаголовокКоличества(Форма);
	УстановитьЗаголовокКоличестваВДокументе(Форма);
	УстановитьЗаголовокКоличестваНеОтгружать(Форма);
	
КонецПроцедуры

// Процедура устанавливает текст заголовка формы в зависимости от того, 
// какой элемент сканирования активен.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьЗаголовокФормыЭлементовСканирования(Форма) Экспорт
	
	Режим = Форма.ПараметрыРежима.Режим;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	Если Режим = "ВыборДействия" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрСканирования = "Ячейка" Тогда
		Если ЭтоНаборТоваров Тогда
			ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтсканируйтеШКЗоныПриемки", Форма);
		Иначе
			ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтсканируйтеШКЯчейки", Форма);
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Приемка"
		И (ПараметрСканирования = "Номенклатура" 
			Или ПараметрСканирования = "Количество")
		И Форма.ИспользоватьУпаковочныеЛисты Тогда
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтсканируйтеШКТоварногоМеста", Форма);
		
	ИначеЕсли ПараметрСканирования = "Номенклатура" 
			Или ПараметрСканирования = "Количество" Тогда
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтсканируйтеШКТовара", Форма);
		
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтсканируйтеШКСерии", Форма);
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
	
КонецПроцедуры

// Вызывает процедуры установки свойств параметров-элементов сканирования:
// товара, серии, ячейки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПараметрыЭлементовСканирования(Форма) Экспорт
	
	УстановитьЗаголовокФормыЭлементовСканирования(Форма);
	УстановитьЗаголовкиЭлементовСканирования(Форма);
	УстановитьПодсветкуЭлементовСканирования(Форма);
	УстановитьДоступностьЭлементовСканирования(Форма);
	УстановитьЦветаЭлементовСканирования(Форма);
	
КонецПроцедуры

// Вызывает отдельные процедуры для установки доступности элементов на странице сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьДоступностьЭлементовСканирования(Форма) Экспорт
	
	УстановитьДоступностьВводаКоличества(Форма);
	УстановитьДоступностьСерии(Форма);
	УстановитьДоступностьНазначения(Форма);
	
КонецПроцедуры

// Вызывается из обработчиков событий ПриСозданииНаСервере форм рабочего места.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** СканированиеСерия - КнопкаФормы - кнопка, выполняющая открытие информации о серии товара.
// 	Отказ - Булево - Истина, если не требуется выполнить закрытие формы рабочего места.
// 	СтандартнаяОбработка - Булево - Истина, если выполняется стандартная, системная обработка закрытия формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	УстановитьУсловноеОформление(Форма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма);
	
	Форма.ИнтерфейсВерсии82 = ВариантИнтерфейсаКлиентскогоПриложенияВерсии8_2(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Параметры = Форма.Параметры;
	
	УстановитьНастройкиДляРазрешенияЭкрана(Форма);
	
	// Получить значения переданных параметров.
	Форма.Объект.Склад = Параметры.Склад;
	Форма.Объект.Помещение = Параметры.Помещение;
	Форма.Объект.Пользователь = Пользователи.ТекущийПользователь();
	
	Если Параметры.Свойство("РежимВебСервиса") Тогда
		
		Форма.Пароль = Параметры.Пароль;
		Форма.ИмяПользователя = Параметры.ИмяПользователя;
		Форма.РежимВебСервиса = Параметры.РежимВебСервиса;
		Форма.Объект.Пользователь = Параметры.Пользователь;
		Форма.МестоположениеWSDL = Параметры.МестоположениеWSDL;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПорядокОбработкиСкладскогоЗадания") Тогда
		Форма.Объект.ПорядокОбработкиСкладскогоЗадания = Параметры.ПорядокОбработкиСкладскогоЗадания;
	Иначе
		Форма.Объект.ПорядокОбработкиСкладскогоЗадания = Перечисления.ПорядокОбработкиСкладскогоЗадания.ЯчейкаТовар;
	КонецЕсли;
	
	Форма.Склад = Форма.Объект.Склад;
	Форма.Помещение = Форма.Объект.Помещение;
	Форма.Пользователь = Форма.Объект.Пользователь;
	Форма.ПорядокОбработкиСкладскогоЗадания = Форма.Объект.ПорядокОбработкиСкладскогоЗадания;
	
	// Получить значения ФО и констант.
	Форма.ИспользоватьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");
	Форма.ИспользоватьМногооборотнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	Форма.ИспользуетсяУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Форма.ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Параметры.Склад, Параметры.Помещение, ,
		Ложь);
	
	Форма.Объект.ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию(
		"ИспользоватьОбособленноеОбеспечениеЗаказов");
	Форма.ИспользоватьСерииНоменклатуры = ?(Форма.РежимВебСервиса, Истина,
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Параметры.Склад)));
	
	Форма.ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	Форма.ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	Форма.ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
	Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	// Загрузить данные надписей и заголовков из макета "ТекстыНадписейЗаголовков".
	ЗагрузитьТекстыНадписейЗаголовковФормы(Форма);
	
	// Установить доступность элементов формы.
	Форма.Элементы.СканированиеСерия.Доступность = Форма.ИспользоватьСерииНоменклатуры;
	
	// Установить настройки схемы сканирования.
	УстановитьПараметрыЭлементовСхемыСканирования(Форма);
	УстановитьПараметрыЭлементовПорядкаОбработкиСкладскогоЗадания(Форма);
	ИнициализироватьПараметрыРежима(Форма);
	
	// Установить настройки отображения списка заданий.
	Форма.ОтображатьВсеЗадания = Истина;
	
	ЗаполнитьЗоныПриемкиОтгрузки(Форма);
	
	// Установить текст заголовка формы.
	ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбОперацию", Форма);
	
	УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	ПерейтиКВыборуСкладскойОперации(Форма);
	
	ПриПереходеНаСтраницу(Форма, "СтраницаВыборОперации");
	УстановитьГорячиеКлавишиНаТекущейСтранице(Форма);
	НоменклатураСервер.ЗагрузитьНастройкуРежимСканированияСерий(Форма);
	
КонецПроцедуры

// Переключает рабочее место в основное меню - в режим выбора складской операции.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКВыборуСкладскойОперации(Форма) Экспорт
	
	Форма.ПараметрыРежима.ТипЗадания = "";
	ОбновитьОсновноеМеню(Форма);
	ПерейтиНаСтраницу(Форма, "СтраницаВыборОперации");
	
КонецПроцедуры

// Переключает рабочее место в список выбора назначения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКВыборуНазначения(Форма) Экспорт
	
	ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбораНазначения", Форма);
	
	// Установить заголовки элементов.
	УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	
	Если Форма.ПараметрыРежима.ТипЗадания = "Пересчет"
		Или Форма.ПараметрыРежима.ТипЗадания = "ПроверкаОтбора" Тогда
		
		Форма.Элементы.НазначенияОстаток.Видимость = Ложь;
		
	Иначе
		Форма.Элементы.НазначенияОстаток.Видимость = Истина;
	КонецЕсли;
	
	Форма.Объект.Назначения.Загрузить(Назначения(Форма));
	Форма.Объект.Назначения.Вставить(0); // Строка без назначения
	
	ПерейтиНаСтраницу(Форма, "СтраницаВыборНазначения");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет текст надписи элемента в таблицу текстов надписей элементов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* ТекстыНадписейЗаголовков - ДанныеФормыКоллекция - таблица содержащая заголовки элементов формы.
//	ИдНадписи - Строка - идентификатор надписи.
//
Процедура ДобавитьТекстНадписиЭлемента(Форма, ИдНадписи)

	РазрешениеЭкрана = Форма.РазрешениеЭкрана;
	Разрешение240х320 = Перечисления.РазрешенияЭкрана.Разрешение240х320;
	Разрешение320х320 = Перечисления.РазрешенияЭкрана.Разрешение320х320;
	
	Если ИдНадписи = "ЗаголовокВсеЗаданияНаОтбор" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на отбор'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Все з-ния на отбор'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаОтбор" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на отбор'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Мои з-ния на отбор'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаРазмещения" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на размещение'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Все размещения'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаРазмещения" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на размещение'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Мои з-ния на размещ.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПеремещение" Тогда
		Если (РазрешениеЭкрана = Разрешение240х320)
			Или (РазрешениеЭкрана = Разрешение320х320) Тогда
			ТекстНадписи = НСтр("ru = 'Все перемещения'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Все задания на перемещение'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПеремещение" Тогда
		Если (РазрешениеЭкрана = Разрешение240х320)
			Или (РазрешениеЭкрана = Разрешение320х320) Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-щение'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Мои задания на перемещение'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПересчет" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на пересчет'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-счет'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПересчет" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на пересчет'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-счет'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПриемку" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на приемку'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-мку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПриемку" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на приемку'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-мку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПроверку" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на проверку'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-рку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПроверку" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на проверку'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-рку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеТаЯчейка" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отсканирована не та ячейка.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: отск. не та ячейка.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеТотТовар" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отсканирован не тот товар.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: отск. не тот товар.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеНайденТовар" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: неизвестный штрихкод.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: неизвестный ШК.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПредупреждениеНеизвестныйШтрихкод" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Неизвестный штрихкод.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Неизвестный ШК.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаУпЛистСодержитОтсканированныеРанееУпЛисты" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: нельзя добавить этот уп. лист.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка добавления уп. листа.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеПривязанаУпаковка" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: у штрихкода не указана упаковка.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: у ШК не указана упак.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеТаСерия" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отсканирована не та серия.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: отск. не та серия.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаСерияНеУникальна" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: серия товара не уникальна.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: серия не уникальна.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеверноеКоличество" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: неверное количество.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: неверное кол-во.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаКоличествоБольшеТребуемого" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: количество больше требуемого.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: кол-во больше треб.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПредупреждениеТоварОтсутствуетВЗадании" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Товара нет в задании, отложите товар.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Товара нет в зад., отл. товар.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПредупреждениеТоварОтобранСверхордера" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отобран лишний, отложите товар.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отобран лишний, отложите товар.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбОперацию" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Выберите операцию'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Выб. операцию'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтсканируйтеШКЗоныПриемки" Тогда
		Если (РазрешениеЭкрана = Разрешение240х320)
			Или (РазрешениеЭкрана = Разрешение320х320)Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК зоны приемки'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК зоны приемки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтсканируйтеШКЯчейки" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК ячейки'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отск. ШК ячейки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтсканируйтеШКТовара" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК товара'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отск. ШК товара'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтсканируйтеШКТоварногоМеста" Тогда
		Если (РазрешениеЭкрана = Разрешение240х320)
			Или (РазрешениеЭкрана = Разрешение320х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК тов. места'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК тов. места'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтсканируйтеШКСерии" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК серии'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отск. ШК серии'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокПолучИнформации" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Получение информации'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Получ. информации'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКТовараЯчейки" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте штрихкод товара или ячейки.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отск. ШК товара или ячейки.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбЗонуОтгрузки" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Выберите зону отгрузки'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Выб.зону отгрузки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбЗонуПриемки" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Выберите зону приемки'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Выб.зону приемки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПредупреждениеУпаковочныйЛистУжеОтсканирован" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Упаковочный лист уже отсканирован'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Уп. лист уже отсканирован'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбораНазначения" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Выберите назн-е товара'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Выберите назн-е'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокПометкиЯчейкиКПересчету" Тогда
		Если (РазрешениеЭкрана = Разрешение240х320)
			Или (РазрешениеЭкрана = Разрешение320х320) Тогда
			ТекстНадписи = НСтр("ru = 'Пометка яч. к пересчету'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Пометка ячейки к пересчету'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКЯчейкиКПересчету" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте штрихкод или введите адрес ячейки.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Отск. ШК или введите адрес ячейки.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаМеньшееКоличество" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: количество не должно быть меньше %1.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Ошибка: кол-во не д.б. мен. %1.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЯчейкиНеПодобраны" Тогда
		Если НЕ (РазрешениеЭкрана = Разрешение240х320) Тогда
			ТекстНадписи = НСтр("ru = 'Альтернативные ячейки не подобраны.'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Альтернативные ячейки не подобраны.'");
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = Форма.ТекстыНадписейЗаголовков.Добавить();
	НоваяСтрока.ИдНадписи = ИдНадписи;
	НоваяСтрока.ТекстНадписи = ТекстНадписи;
	
КонецПроцедуры

// Загружает тексты надписей для элементов форм в спец. таблицу значений.
// В дальнейшем, в зависимости от того форма для какого разрешения открыта
// выводится нужный текст заголовка.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗагрузитьТекстыНадписейЗаголовковФормы(Форма)
	
	Форма.ТекстыНадписейЗаголовков.Очистить();
	
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаОтбор");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаОтбор");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаРазмещения");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаРазмещения");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПеремещение");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПеремещение");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПересчет");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПересчет");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПриемку");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПриемку");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПроверку");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПроверку");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеТаЯчейка");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеТотТовар");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеНайденТовар");
	ДобавитьТекстНадписиЭлемента(Форма, "ПредупреждениеНеизвестныйШтрихкод");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаУпЛистСодержитОтсканированныеРанееУпЛисты");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеПривязанаУпаковка");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеТаСерия");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаСерияНеУникальна");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеверноеКоличество");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаКоличествоБольшеТребуемого");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбОперацию");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтсканируйтеШКЗоныПриемки");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтсканируйтеШКЯчейки");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтсканируйтеШКТовара");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтсканируйтеШКСерии");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокПолучИнформации");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКТовараЯчейки");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбЗонуОтгрузки");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбЗонуПриемки");
	ДобавитьТекстНадписиЭлемента(Форма, "ПредупреждениеТоварОтсутствуетВЗадании");
	ДобавитьТекстНадписиЭлемента(Форма, "ПредупреждениеТоварОтобранСверхордера");
	ДобавитьТекстНадписиЭлемента(Форма, "ПредупреждениеУпаковочныйЛистУжеОтсканирован");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтсканируйтеШКТоварногоМеста");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбораНазначения");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокПометкиЯчейкиКПересчету");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКЯчейкиКПересчету");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаМеньшееКоличество");
	ДобавитьТекстНадписиЭлемента(Форма, "ЯчейкиНеПодобраны");
	
КонецПроцедуры

// Возвращает текст надписи для элемента формы.
// 
// Параметры:
//	ИдНадписи - Строка - идентификатор надписи,
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Строка - Текст надписи.
//
Функция ТекстНадписиЗаголовкаЭлементаФормы(ИдНадписи, Форма)
	
	Отбор = Новый Структура("ИдНадписи", ИдНадписи);
	МассивСтрок = Форма.ТекстыНадписейЗаголовков.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МассивСтрок[0].ТекстНадписи;
	
КонецФункции

// Функция возвращает ссылку на вид складской операции в зависимости от строкового описания
// вида операции (вида документов).
//
// Параметры:
//	ВидОперации - Строка - вид операции.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ВидыОперацийОтбораРазмещенияТоваров - вид складской операции.
//
Функция ВидОперацииОтбораРазмещения(ВидОперации) Экспорт
	
	Если ВидОперации = "Отбор" Тогда
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	ИначеЕсли ВидОперации = "Размещение" Тогда
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ИначеЕсли ВидОперации = "Перемещение" Тогда
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает заголовок элемента основного меню выбора операции на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы -  ВсеЭлементыФормы - элементы формы рабочего места работника склада.
//	ИмяЭлемента - Строка - имя элемента.
//	ЗаголовокЭлемента - Строка - заголовок элемента.
//	КоличествоЗаданий - Число - количество документов-заданий.
//
Процедура УстановитьСвойстваЭлементаОсновногоМеню(Форма, ИмяЭлемента, ЗаголовокЭлемента, КоличествоЗаданий)
	
	Элемент = Форма.Элементы[ИмяЭлемента]; // ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы
	
	ЕстьЗадания = (КоличествоЗаданий > 0);
	КоличествоДокументов = ?(КоличествоЗаданий > 0, "(" + КоличествоЗаданий + ")", "");
	
	// Установить заголовок.
	
	// Текст заголовка элемента основного меню состоит из нескольких частей:
	// КодГорячейКлавиши.ИмяЭлемента[ (КоличествоЗаданий)], например:
	// "0.Отбор (3)".
	//
	// В данной процедуре устанавливаются только значения частей: <ИмяЭлемента> и <КоличествоЗаданий>.
	
	// ... проверить, есть ли горячая клавиша у команды элемента.
	СочетаниеКлавиш = Форма.Команды[ИмяЭлемента].СочетаниеКлавиш;
	
	ПредставлениеКлавиши = ПредставлениеСочетанияКлавиш(СочетаниеКлавиш);
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ЗначениеЗаполнено(ПредставлениеКлавиши), НСтр("ru='%1.%2 %3'"), НСтр("ru='%2 %3'")), 
		ПредставлениеКлавиши, ЗаголовокЭлемента, КоличествоДокументов);
	
	Элемент.Заголовок = ТекстЗаголовка;
	Элемент.Доступность = ЕстьЗадания;
	
КонецПроцедуры

// Возвращает строковое представление горячей клавиши.
//
// Параметры:
//	СочетаниеКлавиш - Клавиша - клавиша.
//
// Возвращаемое значение:
//	Строка - представление горячей клавиши.
//
Функция ПредставлениеСочетанияКлавиш(СочетаниеКлавиш)
	
	Если СочетаниеКлавиш = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрЗаменить(Строка(СочетаниеКлавиш.Клавиша), "_", "");
	
КонецФункции

// Проверяет, что отсканированная ячейка совпадает с ячейкой строки сканирования.
//
// Параметры:
//	СтрокаСканирования - Структура, СтрокаТаблицыЗначений - строка сканирования.
//
// Возвращаемое значение:
//	Булево - Истина, отсканированная складская ячейка соответствует значению адреса складской ячейки, которую 
//			нужно отсканировать.
//
Функция ОтсканированнаяЯчейкаСовпадаетСЯчейкойСтрокиСканирования(СтрокаСканирования)
	
	Возврат (СтрокаСканирования.Ячейка = СтрокаСканирования.СкЯчейка);
	
КонецФункции

// Проверяет, что ячейка совпадает с ячейкой строки сканирования.
//
// Параметры:
//	СтрокаСканирования - Структура, СтрокаТаблицыЗначений - строка сканирования.
//
// Возвращаемое значение:
//	Булево - Истина, складская ячейка соответствует значению адреса складской ячейки, которую нужно отсканировать.
//
Функция ЯчейкаСовпадаетСЯчейкойСтрокиСканирования(СтрокаСканирования, Ячейка)
	
	Возврат (СтрокаСканирования.Ячейка = Ячейка)
	
КонецФункции

// Проверяет, что серия совпадает с серией строки сканирования.
//
// Параметры:
//	СтрокаСканирования - Структура, СтрокаТаблицыЗначений - строка сканирования.
//
// Возвращаемое значение:
//	Булево - Истина, отсканированная серия товара соответствует значению серии товара, которую нужно отсканировать.
//
Функция СерияСовпадаетССериейСтрокиСканирования(СтрокаСканирования, Серия)
	
	Возврат (СтрокаСканирования.Серия = Серия);
	
КонецФункции

// Проверяет, что товар совпадает с товаром строки сканирования.
//
// Параметры:
//	СтрокаСканирования - Структура, СтрокаТаблицыЗначений - строка сканирования.
//
// Возвращаемое значение:
//	Булево - Истина, отсканированный товар соответствует значению товара, который нужно отсканировать.
//
Функция ТоварСовпадаетСТоваромСтрокиСканирования(СтрокаСканирования, Товар)
	
	Возврат (СтрокаСканирования.Номенклатура = Товар.Номенклатура)
		И (СтрокаСканирования.Характеристика = Товар.Характеристика)
		И (СтрокаСканирования.Упаковка = Товар.Упаковка)
		И (СтрокаСканирования.УпаковочныйЛист = Товар.УпаковочныйЛист);
	
КонецФункции

// Проверяет, что отсканированный товар совпадает с товаром строки сканирования.
//
// Параметры:
//	СтрокаСканирования - Структура, СтрокаТаблицыЗначений - строка сканирования.
//
// Возвращаемое значение:
//	Булево - Истина, товар соответствует значению товара, который нужно отсканировать.
//
Функция ОтсканированныйТоварСовпадаетСТоваромСтрокиСканирования(СтрокаСканирования)
	
	Возврат (СтрокаСканирования.Номенклатура = СтрокаСканирования.СкНоменклатура) 
		И (СтрокаСканирования.Характеристика = СтрокаСканирования.СкХарактеристика)
		И (СтрокаСканирования.Упаковка = СтрокаСканирования.СкУпаковка)
		И (СтрокаСканирования.Серия = СтрокаСканирования.СкСерия)
		И (СтрокаСканирования.УпаковочныйЛист = СтрокаСканирования.СкУпаковочныйЛист);
	
КонецФункции

// Заполняет значения полей структуры строки сканирования значениями полей
// найденного товара.
//
// Параметры:
//	СтрокаСканирования - Структура, СтрокаТаблицыЗначений - строка сканирования.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
Процедура ЗаполнитьЗначенияСвойствОтсканированногоТовара(СтрокаСканирования, Товар)
	
	СтрокаСканирования.СкНоменклатура   = Товар.Номенклатура;
	СтрокаСканирования.СкХарактеристика = Товар.Характеристика;
	СтрокаСканирования.СкУпаковка       = Товар.Упаковка;
	
	СтрокаСканирования.Штрихкод              = Товар.Штрихкод;
	СтрокаСканирования.КоличествоПоШтрихкоду = Товар.КоличествоПоШтрихкоду;
	
КонецПроцедуры

// Проверяет, является ли введенный вручную срок годности серии корректным.
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры,
//	СрокГодностиСтрокой - Строка - срок годности серии строкой,
//	СрокГодности - Неопределено - переменная в которую записывается дата срока годности полученная, из строки.
//
// Возвращаемое значение:
//	Булево - Истина - срок годности корректный, Ложь - нет.
//
Функция СрокГодностиСерииКорректный(ПараметрыУказанияСерии, Знач СрокГодностиСтрокой, СрокГодности = Неопределено)
	
	ДатаСтрокой = "";
	СрокГодностиСтрокой = СокрЛП(СрокГодностиСтрокой);
	
	Если ПараметрыУказанияСерии.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев Тогда
		// MM.yy
		ДатаСтрокой = "20" + Прав(СрокГодностиСтрокой, 2) + Лев(СрокГодностиСтрокой, 2) + "01000000";
	ИначеЕсли ПараметрыУказанияСерии.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
		// dd.MM.yy
		ДатаСтрокой = "20" + Прав(СрокГодностиСтрокой, 2) + Сред(СрокГодностиСтрокой, 4, 2)
			+ Лев(СрокГодностиСтрокой, 2) + "000000";
	ИначеЕсли ПараметрыУказанияСерии.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		// dd.MM.yy-HH
		ДатаСтрокой = "20" + Сред(СрокГодностиСтрокой, 7, 2) + Сред(СрокГодностиСтрокой, 4, 2) + Лев(СрокГодностиСтрокой, 2)
			+ Прав(СрокГодностиСтрокой, 2) + "0000";
	КонецЕсли;
	
	Попытка
		СрокГодности = Дата(ДатаСтрокой);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает свойства поля ввода срока годности серии номенклатуры на странице "СтраницаВыборЗначения".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 			** СрокГодностиСерии - ПолеВвода - поле ввода срока годности серии.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
Процедура УстановитьСвойстваСрокаГодностиСерии(Форма, Товар)
	
	Если Не ЗначениеЗаполнено(Товар.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.СрокГодностиСерии.Маска = "";
	
	Если Не Товар.ИспользоватьСрокГодностиСерии Тогда
		Возврат;
	КонецЕсли;
	
	Если Товар.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев Тогда
		Маска = "99.99";
	ИначеЕсли Товар.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
		Маска = "99.99.99";
	ИначеЕсли Товар.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		Маска = "99.99.99-99";
	КонецЕсли;
	
	Форма.Элементы.СрокГодностиСерии.Маска = Маска;
	
КонецПроцедуры

// Проверяет, существует ли отсканированный товар в списке товаров задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
// Возвращаемое значение:
//	Булево - Истина - товар есть в задании, Ложь - нет.
//
Функция ТоварЕстьВЗадании(Форма, Товар)
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка");
	ЗаполнитьЗначенияСвойств(Отбор, Товар);
	
	МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(Отбор);
	
	Возврат (МассивСтрок.Количество() > 0);
	
КонецФункции

// Проверяет, доступен ли товар для сканирования.
// В процессе сканирования товаров задания при порядке обработки "Товар-Ячейка"
// может возникнуть ситуация, когда строка задания с указанным товаром,
// уже отсканирована, в этом случае, должно быть возбуждено исключение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
// Возвращаемое значение:
//	Булево - Истина - серия доступна для сканирования, Ложь - нет.
//
Функция ТоварДоступенДляСканирования(Форма, Товар)
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(Отбор, Товар);
	
	МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТоварДоступен = Ложь;
	
	Для каждого СтрокаТбл Из МассивСтрок Цикл
		Если СтрокаТбл.КоличествоУпаковокОтсканировано <> СтрокаТбл.КоличествоУпаковок Тогда
			ТоварДоступен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТоварДоступен;
	
КонецФункции

// Проверяет, существует ли отсканированная серия в списке товаров задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада..
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//	Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//
// Возвращаемое значение:
//	Булево - Истина - серия товара есть в задании, Ложь - нет.
//
Функция СерияТовараЕстьВЗадании(Форма, Товар, Серия)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если (ТипЗадания = "Отбор"
			Или ТипЗадания = "Размещение")
		И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, НомерСерии, ГоденДо");
		ЗаполнитьЗначенияСвойств(Отбор, Товар);
		
		Отбор.НомерСерии = ТекущаяСтрокаСканирования.НомерСерии;
		Отбор.ГоденДо = ТекущаяСтрокаСканирования.ГоденДо;
	Иначе
		Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Серия");
		ЗаполнитьЗначенияСвойств(Отбор, Товар);
		
		Отбор.Серия = Серия;
	КонецЕсли;
	
	МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Очищает значения полей в которых хранится информация об отсканированном товаре.
//
// Параметры:
//	СтрокаСканирования - Структура - строка сканирования.
//
Процедура ОчиститьПоляОтсканированногоТовара(СтрокаСканирования)
	
	СтрокаСканирования.СкНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаСканирования.СкХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	СтрокаСканирования.СкУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	СтрокаСканирования.СкСерия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
КонецПроцедуры

// Сбрасывает признак активной строки у всех строк таблицы товаров для сканирования.
//
// Параметры:
//	ТоварыДляСканирования - ДанныеФормыКоллекция - таблица товаров для сканирования.
//
Процедура СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования)
	
	Для каждого СтрокаТаблицы Из ТоварыДляСканирования Цикл
		СтрокаТаблицы.АктивнаяСтрока = 0;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак активности у строки сканирования товаров.
//
// Параметры:
//	СтрокаСканирования - Структура - строка сканирования товаров.
//
Процедура УстановитьАктивностьСтрокиСканирования(СтрокаСканирования)
	
	СтрокаСканирования.АктивнаяСтрока = 1;
	
КонецПроцедуры

// Находит в таблице товаров для сканирования строку с товаром (товар+серия) и устанавливает ее текущей строкой сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
Процедура ПерейтиКСтрокеТовараССерией(Форма, Товар)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если (ТипЗадания = "Отбор"
			Или ТипЗадания = "Перемещение")
		И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
		
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, ГоденДо");
		
	Иначе
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
	КонецЕсли;
	
	Если Отбор.Ячейка = Неопределено Тогда
		Отбор.Ячейка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, Товар);
	
	МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденаСтрокаТовара = Ложь;
	
	Для каждого СтрокаТбл Из МассивСтрок Цикл
		Если СтрокаТбл.КоличествоУпаковок > СтрокаТбл.КоличествоУпаковокОтсканировано Тогда
			НайденаСтрокаТовара = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденаСтрокаТовара
		Или Форма.ПараметрыРежима.ТипЗадания = "ПроверкаОтбора" Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаТбл);
		ОчиститьПоляОтсканированногоТовара(ТекущаяСтрокаСканирования);
		СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
		УстановитьАктивностьСтрокиСканирования(СтрокаТбл);
		
		ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		ТекущаяСтрокаСканирования.СкНоменклатура = ТекущаяСтрокаСканирования.Номенклатура;
		ТекущаяСтрокаСканирования.СкХарактеристика = ТекущаяСтрокаСканирования.Характеристика;
		ТекущаяСтрокаСканирования.СкСерия = ТекущаяСтрокаСканирования.Серия;
		ТекущаяСтрокаСканирования.СкНомерСерии = ТекущаяСтрокаСканирования.НомерСерии;
		ТекущаяСтрокаСканирования.СкГоденДо = ТекущаяСтрокаСканирования.ГоденДо;
		ТекущаяСтрокаСканирования.СкУпаковка = ТекущаяСтрокаСканирования.Упаковка;
		
		Форма.ТекущаяСтрокаСканирования = ТекущаяСтрокаСканирования;
	КонецЕсли;
	
КонецПроцедуры

// Находит в таблице товаров для сканирования строку с товаром и устанавливает ее текущей строкой сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
Процедура ПерейтиКСтрокеТовара(Форма, Товар)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(Отбор, Товар);
	
	МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденаСтрокаТовара = Ложь;
	
	Для каждого СтрокаТбл Из МассивСтрок Цикл
		Если СтрокаТбл.КоличествоУпаковок > СтрокаТбл.КоличествоУпаковокОтсканировано Тогда
			НайденаСтрокаТовара = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденаСтрокаТовара Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаТбл);
		ОчиститьПоляОтсканированногоТовара(ТекущаяСтрокаСканирования);
		СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
		УстановитьАктивностьСтрокиСканирования(СтрокаТбл);
		
		ТекущаяСтрокаСканирования.СкНоменклатура             = ТекущаяСтрокаСканирования.Номенклатура;
		ТекущаяСтрокаСканирования.СкХарактеристика           = ТекущаяСтрокаСканирования.Характеристика;
		ТекущаяСтрокаСканирования.СкУпаковка                 = ТекущаяСтрокаСканирования.Упаковка;
		
		ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		
		ТекущаяСтрокаСканирования.Штрихкод              = Товар.Штрихкод;
		ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду = Товар.КоличествоПоШтрихкоду;
		
		Форма.ТекущаяСтрокаСканирования = ТекущаяСтрокаСканирования;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в таблицу товаров, которые необходимо отсканировать, информацию о справочных сериях.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения:
// 		* ТоварыДляСканирования - ДанныеФормыКоллекция - таблица товаров, которые необходимо отсканировать.
//	Товар - см. Товар
//	Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//
// Возвращаемое значение:
//	Булево - Истина, если выполнено указание справочной серии товара в таблице товаров, которые необходимо отсканировать.
//
Функция ПроверитьДобавитьВТоварыДляСканированияСправочнуюСерию(Форма, Товар, Серия)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	ОтборТовар = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(ОтборТовар, Товар);
	
	ОтборСерия = Новый Структура("Номенклатура, Характеристика, Упаковка, Серия");
	ЗаполнитьЗначенияСвойств(ОтборСерия, Товар);
	ОтборСерия.Серия = Серия;
	
	МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(ОтборТовар);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиПоСерии = Форма.ТоварыДляСканирования.НайтиСтроки(ОтборСерия);
	Если СтрокиПоСерии.Количество() > 0 Тогда
		Форма.ПараметрыРежима.ИдСообщения = "ОшибкаСерияНеУникальна";
		Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
		
		Возврат Истина;
	КонецЕсли;
	
	НайденаСтрокаТовара = Ложь;
	
	Для Каждого СтрокаТбл Из МассивСтрок Цикл
		Если СтрокаТбл.КоличествоУпаковок > СтрокаТбл.КоличествоУпаковокОтсканировано Тогда
			НайденаСтрокаТовара = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденаСтрокаТовара Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТбл.КоличествоУпаковокОтсканировано = 0 Тогда
		// Это первое сканирование по данному товару со справочной серией
		СтрокаСоСправочнойСерией = СтрокаТбл;
	Иначе
		ОстатокКоличествоУпаковок = СтрокаТбл.КоличествоУпаковок - СтрокаТбл.КоличествоУпаковокОтсканировано;
		ОстатокКоличествоУпаковокНеОтгружать = СтрокаТбл.КоличествоУпаковокНеОтгружать
			- Мин(СтрокаТбл.КоличествоУпаковокНеОтгружать, СтрокаТбл.КоличествоУпаковокОтсканировано);
		СтрокаТбл.КоличествоУпаковок = СтрокаТбл.КоличествоУпаковок - ОстатокКоличествоУпаковок;
		СтрокаТбл.КоличествоУпаковокВДокументе = СтрокаТбл.КоличествоУпаковокВДокументе - ОстатокКоличествоУпаковок;
		СтрокаТбл.КоличествоУпаковокНеОтгружать = СтрокаТбл.КоличествоУпаковокНеОтгружать -
			ОстатокКоличествоУпаковокНеОтгружать;
	
		МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(ОтборСерия);
		Если МассивСтрок.Количество() > 0 Тогда
			
			// Если строку со справочной серией уже добавили, нужно перекинуть в эту строку остаток для сканирования.
			СтрокаСоСправочнойСерией = МассивСтрок[0];
			СтрокаСоСправочнойСерией.КоличествоУпаковок = СтрокаСоСправочнойСерией.КоличествоУпаковок +
				ОстатокКоличествоУпаковок;
			СтрокаСоСправочнойСерией.КоличествоУпаковокВДокументе = СтрокаСоСправочнойСерией.КоличествоУпаковокВДокументе +
				ОстатокКоличествоУпаковок;
			СтрокаСоСправочнойСерией.КоличествоУпаковокНеОтгружать = СтрокаСоСправочнойСерией.КоличествоУпаковокНеОтгружать +
				ОстатокКоличествоУпаковокНеОтгружать;
			
		Иначе
			
			ИндексСтрокиТабл = Форма.ТоварыДляСканирования.Индекс(СтрокаТбл);
			
			СтрокаСоСправочнойСерией = ТоварыДляСканирования.Вставить(ИндексСтрокиТабл + 1);
			ЗаполнитьЗначенияСвойств(СтрокаСоСправочнойСерией, СтрокаТбл);
			СтрокаСоСправочнойСерией.КоличествоУпаковок = ОстатокКоличествоУпаковок;
			СтрокаСоСправочнойСерией.КоличествоУпаковокВДокументе = ОстатокКоличествоУпаковок;
			СтрокаСоСправочнойСерией.КоличествоУпаковокНеОтгружать = ОстатокКоличествоУпаковокНеОтгружать;
			
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСоСправочнойСерией.Серия = Серия;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что переданный порядок обработки является порядком обработки "Товар-Ячейка".
//
// Параметры:
//	ПорядокОбработки - ПеречислениеСсылка.ПорядокОбработкиСкладскогоЗадания - порядок обработки.
//
// Возвращаемое значение:
//	Булево - Истина - является порядком обработки "Товар-Ячейка", Ложь - нет.
//
Функция ЭтоПорядокОбработкиТоварЯчейка(ПорядокОбработки)
	
	Возврат (ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка);
	
КонецФункции

// Находит в таблице товаров для сканирования строку с товаром и устанавливает ее текущей строкой сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//	ЕстьОшибки - Неопределено - переменная которая содержит флаг ошибки.
//
Процедура ПослеСканированияТовара(Форма, Товар, ЕстьОшибки)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПорядокОбработки = Форма.ПараметрыРежима.ПорядокОбработки;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	ЭтоНеизвестныйШтрихкод = ЭтоНеизвестныйШтрихкод(Товар);
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(ПорядокОбработки);
	
	ЗаполнитьВесТовараПоШтрихкоду(Товар);
	УстановитьСвойстваСрокаГодностиСерии(Форма, Товар);
	
	Если ЭтоНаборТоваров
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		СтатусУказанияСерии = СтатусУказанияСерии(Товар.Номенклатура, Форма.Склад, Форма.Помещение,
			Форма.ПараметрыРежима.Задание, Форма.ПараметрыРежима.ТипЗадания);
		
		СерииУказываются = СерииУказываются(СтатусУказанияСерии);
		
	Иначе
		Если ТипЗадания = "Отбор"
			Или ТипЗадания = "Перемещение" Тогда
			
			СерииУказываются = ЗначениеЗаполнено(Товар.НомерСерии)
				Или ЗначениеЗаполнено(Товар.ГоденДо)
				Или (Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий > 0);
				
		Иначе
			СерииУказываются = ЗначениеЗаполнено(Товар.Серия)
				Или Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий > 0;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
	
	Если Не СерииУказываются Тогда
		ПодобратьНазначение(Форма, Товар);
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		
		Если Не ЭтоНеизвестныйШтрихкод
			И ТоварСовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
			
			Форма.ТекущаяСтрокаСканирования.Штрихкод              = Товар.Штрихкод;
			Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду = Товар.КоличествоПоШтрихкоду;
			
		Иначе
			
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, Товар);
			ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
			
			Форма.ТекущаяСтрокаСканирования.СкЯчейка = ПараметрыРежима.ЗонаПриемки;
			Форма.ТекущаяСтрокаСканирования.СкКодЯчейки = ПараметрыРежима.НаименованиеЗоныПриемки;
			
			Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерии;
			
		КонецЕсли;
		
		Если Не СерииУказываются Тогда
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
				ДобавитьВОтсканированныеТовары(Форма);
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					ДобавитьВОтсканированныеТовары(Форма);
				Иначе
					СканированиеВвестиКоличество(Форма);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗадания = "Приемка"
			Или ТипЗадания = "Размещение" Тогда
			
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗадания = "Отбор" Тогда
			
			ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
			
			Если Не СерииУказываются Тогда
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
					
					УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
					УстановитьОтсканированноеКоличествоТовара(Форма);
					
				Иначе
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
						Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
							УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
							УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						КонецЕсли;
					Иначе
						СканированиеВвестиКоличество(Форма);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				
				ПерейтиКСтрокеТовара(Форма, Товар);
				
				Если Не СерииУказываются Тогда
					
					ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
							И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
						
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
						УстановитьОтсканированноеКоличествоТовара(Форма);
						
					Иначе
						
						Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
							Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
								УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
								УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
							КонецЕсли;
						Иначе
							СканированиеВвестиКоличество(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Если Не СерииУказываются Тогда
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
							И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
						
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
						УстановитьОтсканированноеКоличествоТовара(Форма);
						
					Иначе
						
						Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
							Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
								УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
								УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
							КонецЕсли;
						Иначе
							СканированиеВвестиКоличество(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ПерейтиКСледующемуПараметруСканирования(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			Если ОтборОтсканирован
				И ЭтоПорядокОбработкиТоварЯчейка Тогда
				
				ПерейтиКСтрокеТовара(Форма, Товар);
				
				Если Не СерииУказываются Тогда
					
					ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
							И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
						
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
						УстановитьОтсканированноеКоличествоТовара(Форма);
						
					Иначе
						
						Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
							Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
								УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
								УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
							КонецЕсли;
						Иначе
							СканированиеВвестиКоличество(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Если Не СерииУказываются Тогда
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
							И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
						
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
						УстановитьОтсканированноеКоличествоТовара(Форма);
						
					Иначе
						
						Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
							Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
								УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
								УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
							КонецЕсли;
						Иначе
							СканированиеВвестиКоличество(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ПерейтиКСледующемуПараметруСканирования(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			ТоварЕстьВЗадании = ТоварЕстьВЗадании(Форма, Товар);
			
			Если ТоварЕстьВЗадании Тогда
				ПерейтиКСтрокеТоваровПоТовару(Форма, Товар);
			Иначе
				
				КоличествоПозицийТоваров = Форма.ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке + 1;
				Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
				ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерии;
				Форма.ТекущаяСтрокаСканирования.НомерТовараВЯчейке = КоличествоПозицийТоваров;
				Форма.ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке = КоличествоПозицийТоваров;
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма, 0);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
			
			Если Не СерииУказываются Тогда
				
				// Установить признак необходимости вывода предупреждения о товаре отсутствующем в задании.
				Если Не ТоварЕстьВЗадании Тогда
					Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
					Форма.ПараметрыРежима.ИдСообщения = "ПредупреждениеТоварОтсутствуетВЗадании";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
					
					УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
					ДобавитьВОтсканированныеТовары(Форма);
					
				Иначе
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						ДобавитьВОтсканированныеТовары(Форма);
					Иначе
						СканированиеВвестиКоличество(Форма);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
			
			Если Не СерииУказываются Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			КонецЕсли;
			
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		ИначеЕсли ТипЗадания = "Пересчет" Тогда
			
			Если Не ТоварСовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
				
				ТекущаяЯчейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
				КоличествоЯчеек = Форма.ТекущаяСтрокаСканирования.КоличествоЯчеек;
				НомерЯчейки = Форма.ТекущаяСтрокаСканирования.НомерЯчейки;
				
				Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
				
				Форма.ТекущаяСтрокаСканирования.Ячейка = ТекущаяЯчейка;
				Форма.ТекущаяСтрокаСканирования.СкЯчейка = ТекущаяЯчейка;
				Форма.ТекущаяСтрокаСканирования.КоличествоЯчеек = КоличествоЯчеек;
				Форма.ТекущаяСтрокаСканирования.НомерЯчейки = НомерЯчейки;
				
				ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, Товар);
				ЗаполнитьЗначенияСвойствОтсканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерии;
				УстановитьОтсканированноеКоличествоУпаковок(Форма, 0);
				
			КонецЕсли;
			
			Если Не СерииУказываются Тогда
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
						И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
					
					УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
					ДобавитьВОтсканированныеТовары(Форма);
					
				Иначе
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
						УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						ДобавитьВОтсканированныеТовары(Форма);
					Иначе
						СканированиеВвестиКоличество(Форма);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
			
			Если Не СерииУказываются Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			КонецЕсли;
			
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подбирает назначение обособленного хранения для товара таблицы товаров, которые необходимо отсанировать.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 		* ТоварыДляСканирования - ДанныеФормыКоллекция - таблица товаров, которые необходимо отсканировать.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
Процедура ПодобратьНазначение(Форма, Товар)
	
	Объект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	Ячейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
	
	Если Не Объект.ИспользоватьОбособленноеОбеспечениеЗаказов
		Или ЭтоУпаковочныйЛист(Форма.ТекущаяСтрокаСканирования)
		Или ЭтоНеизвестныйШтрихкод(Форма.ТекущаяСтрокаСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРежима.ТипЗадания = "Отбор"
		Или (Не ЭтоНаборТоваров
			И ПараметрыРежима.ТипЗадания = "Размещение")
		Или ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(Отбор, Товар);
	
	ТоварыДокумента = Форма.ТоварыДляСканирования.Выгрузить(, "Номенклатура, Характеристика, Назначение, Упаковка,
		|КоличествоУпаковок, Коэффициент");
	
	ТоварыДокумента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	Для Каждого СтрокаТоваров Из ТоварыДокумента Цикл
		Если СтрокаТоваров.Коэффициент <> 0 Тогда
			СтрокаТоваров.Количество = СтрокаТоваров.КоличествоУпаковок * СтрокаТоваров.Коэффициент;
		Иначе
			СтрокаТоваров.Количество = СтрокаТоваров.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
	Товар.Назначение = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПодобратьНазначение(Объект.Склад,
		Объект.Распоряжение, Ячейка, Товар, ТоварыДокумента, ПараметрыРежима);
	
	Форма.ТекущаяСтрокаСканирования.Назначение = Товар.Назначение;
	
	УстановитьЗаголовокНазначения(Форма);
	
КонецПроцедуры

// Выполняет переход к строке с указанным товаром.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
Процедура ПерейтиКСтрокеТоваровПоТовару(Форма, Товар)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Товар);
	
	МассивСтрок = ТоварыДляСканирования.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() =0 Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = ТоварыДляСканирования.Индекс(МассивСтрок[0]);
	КонецЕсли;
	
	СтрокаСканирования = ТоварыДляСканирования[ИндексСтроки];
	
	ЯчейкаНеИзменилась = (ТекущаяСтрокаСканирования.СкЯчейка = СтрокаСканирования.Ячейка);
	
	НоменклатураНеИзменилась = (ТекущаяСтрокаСканирования.СкНоменклатура = СтрокаСканирования.Номенклатура) 
		И (ТекущаяСтрокаСканирования.СкХарактеристика = СтрокаСканирования.Характеристика)
		И (ТекущаяСтрокаСканирования.СкУпаковка = СтрокаСканирования.Упаковка);
	
	ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
	УстановитьАктивностьСтрокиСканирования(СтрокаСканирования);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаСканирования);
	
	ТекущаяСтрокаСканирования.СкЯчейка = ?(ЯчейкаНеИзменилась, ТекущаяСтрокаСканирования.Ячейка, Справочники.СкладскиеЯчейки.ПустаяСсылка());
	ТекущаяСтрокаСканирования.СкНоменклатура = ?(НоменклатураНеИзменилась, ТекущаяСтрокаСканирования.Номенклатура, Справочники.Номенклатура.ПустаяСсылка());
	ТекущаяСтрокаСканирования.СкХарактеристика = ?(НоменклатураНеИзменилась, ТекущаяСтрокаСканирования.Характеристика, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ТекущаяСтрокаСканирования.СкУпаковка = ?(НоменклатураНеИзменилась, ТекущаяСтрокаСканирования.Упаковка, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	СброситьПризнакиСканированияВсехПараметров(Форма);
	УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Не ЯчейкаНеИзменилась);
	УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Не НоменклатураНеИзменилась);
	
	Форма.ТекущаяСтрокаСканирования = ТекущаяСтрокаСканирования;
	
КонецПроцедуры

// Возвращает статус указания серии для случая набора товаров.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//	Склад - СправочникСсылка.Склады - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение.
//	Задание - ДокументСсылка.ПриходныйОрдерНаТовары, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание, которое принимается в работу.
//	ТипЗадания - Строка - тип складского задания.
//
// Возвращаемое значение:
//	Число - статус указания серии товара.
//
Функция СтатусУказанияСерии(Номенклатура, Склад, Помещение, Задание, ТипЗадания)
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристикиНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипУпаковкиНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипСерия = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	ТипУпаковочныйЛист = Новый ОписаниеТипов("ДокументСсылка.УпаковочныйЛист");
	ТипРТиУ = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
	ТипНазначение = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("НомерСтроки", ТипЧисло);
	Товары.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	Товары.Колонки.Добавить("Характеристика", ТипХарактеристикиНоменклатуры);
	Товары.Колонки.Добавить("Упаковка", ТипУпаковкиНоменклатуры);
	Товары.Колонки.Добавить("СтатусУказанияСерий", ТипЧисло);
	Товары.Колонки.Добавить("Количество", ТипЧисло);
	Товары.Колонки.Добавить("КоличествоУпаковок", ТипЧисло);
	Товары.Колонки.Добавить("НеОтгружать", ТипЧисло);
	Товары.Колонки.Добавить("ДокументОтгрузки", ТипРТиУ);
	Товары.Колонки.Добавить("УпаковочныйЛистРодитель", ТипУпаковочныйЛист);
	Товары.Колонки.Добавить("УпаковочныйЛист", ТипУпаковочныйЛист);
	Товары.Колонки.Добавить("Назначение", ТипНазначение);
	Товары.Колонки.Добавить("Серия", ТипСерия);
	
	НоваяСтрока = Товары.Добавить();
	НоваяСтрока.НомерСтроки = 1;
	НоваяСтрока.Номенклатура = Номенклатура;
	
	Если ТипЗадания = "Приемка" Тогда
		
		Объект = Новый Структура();
		Объект.Вставить("Склад", Склад);
		Объект.Вставить("Помещение", Помещение);
		Объект.Вставить("Товары", Товары);
		Объект.Вставить("Статус", Перечисления.СтатусыПриходныхОрдеров.Принят);
		Объект.Вставить("СкладскаяОперация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "СкладскаяОперация"));
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		СтатусУказанияСерии = Товары[0].СтатусУказанияСерий;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Объект = Новый Структура();
		Объект.Вставить("Склад", Склад);
		Объект.Вставить("Помещение", Помещение);
		Объект.Вставить("ТоварыРазмещение", Товары);
		Объект.Вставить("ВидОперации", Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтборРазмещениеТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Размещение);
		
		СтатусУказанияСерии = Товары[0].СтатусУказанияСерий;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Объект = Новый Структура();
		Объект.Вставить("Склад", Склад);
		Объект.Вставить("Помещение", Помещение);
		Объект.Вставить("Товары", Товары);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПересчетТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		СтатусУказанияСерии = Товары[0].СтатусУказанияСерий;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		СтруктураРеквизитовЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание,
			"СкладскаяОперация, ДатаОтгрузки");
		
		Объект = Новый Структура();
		Объект.Вставить("Склад", Склад);
		Объект.Вставить("Помещение", Помещение);
		Объект.Вставить("ОтгружаемыеТовары", Товары);
		Объект.Вставить("Статус", Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
		Объект.Вставить("СкладскаяОперация", СтруктураРеквизитовЗадания.СкладскаяОперация);
		Объект.Вставить("ДатаОтгрузки", СтруктураРеквизитовЗадания.ДатаОтгрузки);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПроверкаКоличестваТоваровВДокументе);
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ОтгружаемыеТовары";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ОтгружаемыеТовары";
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		СтатусУказанияСерии = Товары[0].СтатусУказанияСерий;
		
	КонецЕсли;
	
	Возврат СтатусУказанияСерии;
	
КонецФункции

// Вызывается при сканировании или ручном вводе штрихкода товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ШтрихкодТовара - Строка - штрихкод товара.
//	Товар - Неопределено - переменная в которую записывается структура товара,
//	ЕстьОшибки - Неопределено - переменная в которую записывается флаг ошибки.
//
Процедура ПриСканированииТовара(Форма, ШтрихкодТовара, Товар, ЕстьОшибки)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ПорядокОбработки = ПараметрыРежима.ПорядокОбработки;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	
	ШтрихкодНайден = Ложь;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	ШтрихкодыВТЧ = ШтрихкодыВТЧ(Форма);
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(ПорядокОбработки);
	ВЗаданииМогутИспользоватьсяУпаковочныеЛисты = ВЗаданииМогутИспользоватьсяУпаковочныеЛисты(ТипЗадания);
	
	Если ТипЗадания = "Отбор"
		Или (ТипЗадания = "Размещение"
			И Не ЭтоНаборТоваров)
		Или ТипЗадания = "Перемещение" Тогда
		
		Товар = Товар();
		
		Для Каждого СтрокаТовара Из ТоварыДляСканирования Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовара.ШтрихкодНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			
			ШтрихкодТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(ШтрихкодТовара);
			
			Если (СтрДлина(ШтрихкодТовара) > 1)
				И СтрНайти(СтрокаТовара.ШтрихкодНоменклатуры, ШтрихкодТовара) > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(Товар, СтрокаТовара);
				
				ШтрихкодНайден = Истина;
				Товар.Штрихкод = ШтрихкодТовара;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ШтрихкодНайден Тогда
			ЕстьОшибки = Истина;
			Товар.ТипОшибки = "НеНайденТовар";
		КонецЕсли;
		
	Иначе
		
		Товар = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиТоварИлиУпаковочныйЛист(ШтрихкодТовара,
			ВЗаданииМогутИспользоватьсяУпаковочныеЛисты);
		
		Если Товар.КодВозврата = 0 Тогда
			Если ШтрихкодыВТЧ
				И Товар.ТипОшибки = "НеНайденТовар" Тогда
				
				Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
				Форма.ПараметрыРежима.ИдСообщения = "ПредупреждениеНеизвестныйШтрихкод";
				
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Товар.ЭтоУпаковочныйЛист Тогда
			ЕстьОшибки = Не ПроверитьУпаковочныйЛист(Форма, Товар);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки
		Или ЭтоНаборТоваров Тогда
		Возврат;
	КонецЕсли;
	
	СерииУказываются = ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Серия);
	
	Если ТипЗадания = "Отбор" Тогда
		
		Если Не ТоварСовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если Не ТоварЕстьВЗадании(Форма, Товар) Тогда
			ЕстьОшибки = Истина;
		Иначе
			
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				
				Если Не СерииУказываются Тогда
					Если Не ТоварДоступенДляСканирования(Форма, Товар) Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если Не ТоварСовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если ОтборОтсканирован
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если Не ТоварЕстьВЗадании(Форма, Товар) Тогда
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не СерииУказываются Тогда
				Если Не ТоварДоступенДляСканирования(Форма, Товар) Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если Не ТоварСовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после сканирования, или ручного ввода штрихкода ячейки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - складская ячейка.
//	ЕстьОшибки - Булево - переменная для флага ошибки.
//
Процедура ПослеСканированияЯчейки(Форма, Ячейка, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если ЭтоНаборТоваров Тогда // Отсканировали ячейку зоны приемки.
		Форма.ТекущаяСтрокаСканирования.СкЯчейка = Ячейка;
		ПараметрыРежима.ЗонаПриемки = Ячейка;
	Иначе
		Форма.ТекущаяСтрокаСканирования.СкЯчейка = Ячейка;
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Тогда
		УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
		ПерейтиКСледующемуПараметруСканирования(Форма);
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		Если Не ЭтоНаборТоваров
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если Не ПараметрыРежима.Режим = "ВводКоличества" Тогда
				ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 
					ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
				
				УстановитьОтсканированноеКоличествоТовара(Форма);
				ПерейтиВРежимОжиданияСканированияТовара(Форма);
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		Иначе
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		Если ЭтоПорядокОбработкиТоварЯчейка 
			И ОтборОтсканирован Тогда
			
			Если Не ПараметрыРежима.Режим = "ВводКоличества" Тогда
				ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 
					ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 
					ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
				
				УстановитьОтсканированноеКоличествоТовара(Форма);
				ПерейтиВРежимОжиданияСканированияТовара(Форма);
			КонецЕсли;
			
		Иначе
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		СброситьПризнакиСканированияВсехПараметров(Форма);
		УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
		ПерейтиКСледующемуПараметруСканирования(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при сканировании, или ручном вводе штрихкода ячейки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ШтрихкодЯчейки - Строка - штрихкод ячейки.
//	Ячейка - Неопределено - переменная в которую записывается информация о найденной ячейке.
//	ЕстьОшибки - Булево - переменная для флага ошибки.
//	ЭтоСканирование - Булево
//
Процедура ПриСканированииЯчейки(Форма, ШтрихкодЯчейки, Ячейка, ЕстьОшибки, ЭтоСканирование)
	
	Объект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	ШтрихкодЯчейки = СокрЛП(ШтрихкодЯчейки);
	
	Если ТипЗадания = "Отбор"
		Или (ТипЗадания = "Размещение"
			И Не ЭтоНаборТоваров)
		Или ТипЗадания = "Перемещение"
		Или ТипЗадания = "Пересчет" Тогда
		
		Отбор = Новый Структура("ШтрихкодЯчейки", ШтрихкодЯчейки);
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			Для Каждого СтрокаТоваров Из ТоварыДляСканирования Цикл
				Если ВРег(СтрокаТоваров.КодЯчейки) = ВРег(ШтрихкодЯчейки) Тогда
					Ячейка = СтрокаТоваров.Ячейка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Ячейка) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		Иначе
			Ячейка = МассивСтрок[0].Ячейка
		КонецЕсли;
		
	Иначе
		
		ПараметрыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиЯчейкуПоШтрихкоду(Объект.Склад,
			Объект.Помещение, ШтрихкодЯчейки, ЭтоСканирование);
		
		Если ПараметрыЯчейки.КодВозврата = 0 Тогда
			ЕстьОшибки = Истина;
		Иначе
			Ячейка = ПараметрыЯчейки.Ячейка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	МассивТиповЯчеек = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТиповЯчеек, СкладыКлиентСервер.ТипыЯчеекПриемка());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТиповЯчеек, СкладыКлиентСервер.ТипыЯчеекОтгрузка());
	
	Если ЭтоНаборТоваров Тогда
		
		Если МассивТиповЯчеек.Найти(ПараметрыЯчейки.ТипЯчейки) = Неопределено Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Не ЯчейкаСовпадаетСЯчейкойСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Ячейка) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после сканирования (или ручного ввода штрихкод серии).
// В зависимости от типа задания выполняется обработка введенной серии.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Серия - см. СерияНоменклатуры
//	ЕстьОшибки - Булево - флаг ошибки.
//
Процедура ПослеСканированияСерии(Форма, Серия, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	РежимСканированияСерий = Форма.РежимСканированияСерий;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	СтатусУказанияСерий = ТекущаяСтрокаСканирования.СтатусУказанияСерий;
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	СерииУказываютсяСправочно = СерииУказываютсяСправочно(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	Товар = Товар();
	ЗаполнитьЗначенияСвойств(Товар, ТекущаяСтрокаСканирования);
	ЗаполнитьЗначенияСвойств(Товар, Серия);
	
	ПодобратьНазначение(Форма, Товар);
	ЗаполнитьВесТовараПоШтрихкоду(Товар);
	
	Если ЭтоНаборТоваров
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если ТипЗадания = "Пересчет" Тогда
			
			ТекущаяСтрокаСканирования.Серия = Серия.Серия;
			ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
				ДобавитьВОтсканированныеТовары(Форма);
				
			Иначе
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					ДобавитьВОтсканированныеТовары(Форма);
				Иначе
					СканированиеВвестиКоличество(Форма);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			
			Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			Иначе
				УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
			КонецЕсли;
			
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если Не (ТоварСовпадаетСТоваромСтрокиСканирования(ТекущаяСтрокаСканирования, Товар)
					И (ТекущаяСтрокаСканирования.Назначение = Товар.Назначение))
				Или Не СерияСовпадаетССериейСтрокиСканирования(ТекущаяСтрокаСканирования, Серия.Серия) Тогда
				
				Если СерииУказываютсяСправочно
					И СерияИдентифицируетЭкземплярТовара(Товар) Тогда
					
					Если (ТоварСовпадаетСТоваромСтрокиСканирования(ТекущаяСтрокаСканирования, Товар)
							Или ТоварЕстьВЗадании(Форма, Товар))
						И ПроверитьДобавитьВТоварыДляСканированияСправочнуюСерию(Форма, Товар, Серия.Серия) Тогда
						
						ПерейтиКСтрокеТовараССерией(Форма, Товар);
						
					ИначеЕсли Не СправочнаяСерияУникальна(Форма, Серия) Тогда
						
						ПерейтиКСтрокеТовараССерией(Форма, Товар);
						
					Иначе
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаСканирования());
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, Товар);
						
						ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерий;
						
						Если СправочнаяСерияУникальна(Форма, Серия) Тогда
							УстановитьОтсканированноеКоличествоУпаковок(Форма, 0);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если СерияТовараЕстьВЗадании(Форма, Товар, Серия.Серия) Тогда
						ПерейтиКСтрокеТовараССерией(Форма, Товар);
					Иначе
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаСканирования());
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, Товар);
						ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерий;
						
						УстановитьОтсканированноеКоличествоУпаковок(Форма, 0);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СерииУказываютсяСправочно
				И СерияИдентифицируетЭкземплярТовара(Товар) Тогда
				
				СправочнаяСерияУникальна(Форма, Серия);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойствОтсканированногоТовара(ТекущаяСтрокаСканирования, Товар);
			ТекущаяСтрокаСканирования.Серия = Серия.Серия;
			ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
					
				Если ПараметрыРежима.ИдСообщения <> "ОшибкаСерияНеУникальна" Тогда
					УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
					ДобавитьВОтсканированныеТовары(Форма);
				КонецЕсли;
				
			Иначе
				
				Если ПараметрыРежима.ИдСообщения <> "ОшибкаСерияНеУникальна" Тогда
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
						УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						ДобавитьВОтсканированныеТовары(Форма);
					Иначе
						СканированиеВвестиКоличество(Форма);
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			
			Если Форма.ПараметрыРежима.ПараметрСканирования = "Номенклатура" Тогда
				Возврат;
			КонецЕсли;
			
			Если СерииУказываютсяСправочно
				И СерияИдентифицируетЭкземплярТовара(ТекущаяСтрокаСканирования) Тогда
				
				СправочнаяСерияУникальна(Форма, Серия);
				
			КонецЕсли;
			
			Если ПараметрыРежима.ИдСообщения = "ОшибкаСерияНеУникальна" Тогда
				Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка, Серия");
				
				ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования, , "Серия");
				ЗаполнитьЗначенияСвойств(Отбор, Серия);
				
				МассивСтрок = форма.ОтсканированныеТовары.НайтиСтроки(Отбор);
				
				Если МассивСтрок.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, МассивСтрок[0], "КоличествоУпаковокОтсканировано");
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтрокаСканирования.Серия = Серия.Серия;
			ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				Если ПараметрыРежима.ИдСообщения <> "ОшибкаСерияНеУникальна" Тогда
					УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
					ДобавитьВОтсканированныеТовары(Форма);
				КонецЕсли;
				
			Иначе
				
				Если ПараметрыРежима.ИдСообщения <> "ОшибкаСерияНеУникальна" Тогда
					
					Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
						УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						ДобавитьВОтсканированныеТовары(Форма);
					Иначе
						СканированиеВвестиКоличество(Форма);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			ТекущаяСтрокаСканирования.Серия = Серия.Серия;
			ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
				ДобавитьВОтсканированныеТовары(Форма);
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					ДобавитьВОтсканированныеТовары(Форма);
				Иначе
					СканированиеВвестиКоличество(Форма);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", ЗначениеЗаполнено(ПараметрыРежима.ЗонаПриемкиПоУмолчанию));
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			
			Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, Серия);
		ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
		
		Если ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Товар = Товар();
			ЗаполнитьЗначенияСвойств(Товар, ТекущаяСтрокаСканирования);
			ПерейтиКСтрокеТовараССерией(Форма, Товар);
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
				УстановитьОтсканированноеКоличествоТовара(Форма);
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
						УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					КонецЕсли;
				Иначе
					СканированиеВвестиКоличество(Форма);;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
				УстановитьОтсканированноеКоличествоТовара(Форма);
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					КонецЕсли;
				Иначе
					СканированиеВвестиКоличество(Форма);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, Серия);
		ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
		ТекущаяСтрокаСканирования.СкНомерСерии = Серия.НомерСерии;
		ТекущаяСтрокаСканирования.СкГоденДо = Серия.ГоденДо;
		
		Если ОтборОтсканирован
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Товар = Товар();
			ЗаполнитьЗначенияСвойств(Товар, ТекущаяСтрокаСканирования);
			ПерейтиКСтрокеТовараССерией(Форма, Товар);
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма, 1);
				УстановитьОтсканированноеКоличествоТовара(Форма);
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
						УстановитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					КонецЕсли;
				Иначе
					СканированиеВвестиКоличество(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
				
				УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
				УстановитьОтсканированноеКоличествоТовара(Форма);
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
					Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
						УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
						УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					КонецЕсли;
				Иначе
					СканированиеВвестиКоличество(Форма);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, Серия);
		ТекущаяСтрокаСканирования.СкСерия = Серия.Серия;
		ТекущаяСтрокаСканирования.СкНомерСерии = Серия.НомерСерии;
		ТекущаяСтрокаСканирования.СкГоденДо = Серия.ГоденДо;
		
		Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
			Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				И МерныеЕдиницыИзмерения.Найти(Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) = Неопределено) Тогда
			
			УвеличитьОтсканированноеКоличествоУпаковок(Форма, 1);
			УстановитьОтсканированноеКоличествоТовара(Форма);
			
		Иначе
			
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду) Тогда
				Если КоличествоПоШтрихкодуКорректно(Форма) Тогда
					УвеличитьОтсканированноеКоличествоУпаковок(Форма, Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
					УстановитьОтсканированноеКоличествоТовара(Форма, , Форма.ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду);
				КонецЕсли;
			Иначе
				СканированиеВвестиКоличество(Форма);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимСканированияСерий = "ТоварСерияТовар" Тогда
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру для хранения сведений о серии.
//
// Возвращаемое значение:
// 	Структура - описание серии номенклатуры, которое содержит следующие поля:
//	* ГоденДо - Дата - срок годности серии.
//	* НомерСерии - Строка - номер серии.
//	* Серия - СправочникСсылка.СерииНоменклатуры - ссылка на серию номенклатуры в информационной базе.
//
Функция СерияНоменклатуры()
	
	СтруктураСерии = Новый Структура;
	СтруктураСерии.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураСерии.Вставить("НомерСерии", "");
	СтруктураСерии.Вставить("ГоденДо", Дата("00010101"));
	
	Возврат СтруктураСерии;
	
КонецФункции

// Вызывается при сканировании, или ручном вводе штрихкода серии.
// Проверяется корректность идентификатора серии (номер, срок годности или номер+срок годности).
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ШтрихкодСерии - Строка - штрихкод серии.
//	СрокГодностиСерии - Дата - срок годности серии,.дставляется ссылка на найденную серию.
//	Серия - см. СерияНоменклатуры
//	ЕстьОшибки - Неопределено - флаг ошибки.
//
Процедура ПриСканированииСерии(Форма, ШтрихкодСерии, СрокГодностиСерии, Серия, ЕстьОшибки)
	
	Перем СрокГодности;
	Серия = СерияНоменклатуры();
	
	Режим = Форма.ПараметрыРежима.Режим;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	
	ШтрихкодыВТЧ = ШтрихкодыВТЧ(Форма);
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ПараметрыУказанияСерии = Новый Структура("ИспользоватьНомерСерии, ИспользоватьСрокГодностиСерии,
		|ТочностьУказанияСрокаГодностиСерии");
	ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерии, ТекущаяСтрокаСканирования);
	
	Если ЭтоНаборТоваров
		Или ТипЗадания = "Приемка"
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		ЭтоСканирование = Режим = "ВводЗначения";
		
		ПараметрыСерии = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиСерию(ШтрихкодСерии, СрокГодностиСерии,
			ТекущаяСтрокаСканирования.ВидНоменклатуры, ПараметрыУказанияСерии, ЭтоСканирование);
		
		Если ПараметрыСерии.КодВозврата = 0 Тогда
			
			Если ШтрихкодыВТЧ
				И Не ПараметрыУказанияСерии.ИспользоватьСрокГодностиСерии
				И ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
				Или (Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Упаковка)
					И Не ЭтоТара(Форма.ТекущаяСтрокаСканирования)
					И Не (Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес
						Или Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем
						Или Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина
						Или Форма.ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь)) Тогда
				
				Форма.ПараметрыРежима.ПараметрСканирования = "Номенклатура";
				ПриСканированииЗначения(Форма, ШтрихкодСерии);
				
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Серия, ПараметрыСерии);
		
	Иначе
		
		Если Режим = "ВводЗначения" Тогда
			
			НомерСерии = СокрЛП(ШтрихкодСерии);
			
			Если ЗначениеЗаполнено(СрокГодностиСерии) Тогда
				
				Если Не СрокГодностиСерииКорректный(ПараметрыУказанияСерии, СрокГодностиСерии, СрокГодности) Тогда
					ЕстьОшибки = Истина;
					Возврат;
				КонецЕсли;
				
			Иначе
				СрокГодности = Дата("00010101");
			КонецЕсли;
			
		Иначе
			
			ИнформацияОСерии = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ИнформацияОСерииИзШтрихкода(ШтрихкодСерии,
				ПараметрыУказанияСерии.ИспользоватьНомерСерии, ПараметрыУказанияСерии.ИспользоватьСрокГодностиСерии);
			
			Если ИнформацияОСерии.ЕстьОшибка Тогда
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			
			НомерСерии = ИнформацияОСерии.Номер;
			СрокГодности = ИнформацияОСерии.ГоденДо;
			
		КонецЕсли;
		
		Серия.НомерСерии = НомерСерии;
		Серия.ГоденДо = СрокГодности;
		
		Если ТипЗадания = "Отбор" Тогда
			
			Если Не (Форма.ТекущаяСтрокаСканирования.НомерСерии = НомерСерии
					И Форма.ТекущаяСтрокаСканирования.ГоденДо = СрокГодности)
				И Не СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			
			Серия.Серия = Форма.ТекущаяСтрокаСканирования.Серия;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Если Не (Форма.ТекущаяСтрокаСканирования.НомерСерии = НомерСерии
					И Форма.ТекущаяСтрокаСканирования.ГоденДо = СрокГодности) Тогда
				ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			
			Серия.Серия = Форма.ТекущаяСтрокаСканирования.Серия;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			Если Не ОтборОтсканирован Тогда
				Если Не (Форма.ТекущаяСтрокаСканирования.НомерСерии = НомерСерии
						И Форма.ТекущаяСтрокаСканирования.ГоденДо = СрокГодности)
					И Не СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
					ЕстьОшибки = Истина;
					Возврат;
				КонецЕсли;
			Иначе
				Если Не (Форма.ТекущаяСтрокаСканирования.НомерСерии = НомерСерии
						И Форма.ТекущаяСтрокаСканирования.ГоденДо = СрокГодности) Тогда
					ЕстьОшибки = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Серия.Серия = Форма.ТекущаяСтрокаСканирования.Серия;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, что серии указываются по факту отбора (управление остатками).
//
// Параметры:
//	СтатусУказанияСерий - Число - статус указания серий.
//
// Возвращаемое значение:
//	Булево - флаг указания серии по факту отбора.
//
Функция СерииУказываютсяПоФактуОтбора(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(3);
	МассивСтатусов.Добавить(4);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

// Возвращает признак того, что серии указываются справочно (при отгрузке по факту отбора).
//
// Параметры:
//	СтатусУказанияСерий - Число - статус указания серий.
//
// Возвращаемое значение:
//	Булево - флаг указания серии справочно.
//
Функция СерииУказываютсяСправочно(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(1);
	МассивСтатусов.Добавить(2);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

// Возвращает признак того, что серии указываются.
//
// Параметры:
//	СтатусУказанияСерий - Число - статус указания серий.
//
// Возвращаемое значение:
//	Булево - флаг необходимости указания серии.
//
Функция СерииУказываются(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(0);
	МассивСтатусов.Добавить(11);
	МассивСтатусов.Добавить(12);
	МассивСтатусов.Добавить(15);
	
	Возврат (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

// Устанавливает флаг ошибки, когда при проверке отбора отсканировано товара больше чем необходимо.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПризнакТоварОтобранСверхордера(Форма)
	
	КэшированныеЗначения = Форма.ПараметрыРежима.КэшированныеЗначения;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ТоварОтобранСверхордера = Ложь;
	
	Если КэшированныеЗначения = Неопределено Тогда
		Если ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать > 0 Тогда
			ТоварОтобранСверхордера = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать > КэшированныеЗначения.КоличествоУпаковокНеОтгружать Тогда
		ТоварОтобранСверхордера = Истина;
	КонецЕсли;
	
	Если ТоварОтобранСверхордера
		И Не Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании Тогда
		Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
		Форма.ПараметрыРежима.ИдСообщения = "ПредупреждениеТоварОтобранСверхордера";
	КонецЕсли;
	
КонецПроцедуры

// Увеличивает отсканированное количество упаковок в зависимости от типа задания и 
// текущего режима.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Количество - Число - значение на которое нужно увеличить отсканированное количество.
//
Процедура УвеличитьОтсканированноеКоличествоУпаковок(Форма, Количество)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если (Не ЭтоНаборТоваров
			И ТипЗадания = "Размещение"
			И ЭтоПорядокОбработкиТоварЯчейка)
		Или (ТипЗадания = "Перемещение"
			И ОтборОтсканирован
			И ЭтоПорядокОбработкиТоварЯчейка) Тогда
		
		ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить = ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить + Количество;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано =
			ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + Количество;
		ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = СкорректированноеКоличествоУпаковокНеОтгружать(
			ТекущаяСтрокаСканирования, ДопустимоеОтклонениеОтбираемыхТоваров);
		
		УстановитьПризнакТоварОтобранСверхордера(Форма);
	Иначе
		ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + Количество;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отсканированное количество упаковок в зависимости от типа задания и 
// текущего режима.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Количество - Число - значение в которое нужно установить отсканированное количество.
//
Процедура УстановитьОтсканированноеКоличествоУпаковок(Форма, Количество)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если ТипЗадания = "Размещение"
		И ЭтоПорядокОбработкиТоварЯчейка Тогда
		
		ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить = Количество;
		
	ИначеЕсли ТипЗадания = "Перемещение"
		И ЭтоПорядокОбработкиТоварЯчейка
		И ОтборОтсканирован Тогда
		
		ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить = Количество;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество;
		ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = СкорректированноеКоличествоУпаковокНеОтгружать(
			ТекущаяСтрокаСканирования, ДопустимоеОтклонениеОтбираемыхТоваров);
		
		УстановитьПризнакТоварОтобранСверхордера(Форма);
	Иначе
		ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после ввода количества товаров. Задача процедуры - обработать
// указанное количество, если проверка значение прошло проверку корректности.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Количество - Число - отсканированное количество.
//	ЕстьОшибки - Булево - флаг ошибки.
//
Процедура ПослеВводаКоличества(Форма, Количество, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Форма.ТекущийПараметрСканированияСерия = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	Режим = Форма.ПараметрыРежима.Режим;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	СерииУказываются = СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	Если ЭтоНаборТоваров
		Или ТипЗадания = "Пересчет" Тогда
		
		ЭтоВводПоНазначению = Ложь;
		
		Если ТекущаяСтрокаСканирования.НовоеНазначение = ТекущаяСтрокаСканирования.Назначение Тогда
			
			Если Режим = "ВводКоличестваПоНазначению" Тогда
				ЭтоВводПоНазначению = Истина;
			КонецЕсли;
			
			Режим = "ВводКоличества";
			
		КонецЕсли;
		
		ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество;
		ДобавитьВОтсканированныеТовары(Форма, ЭтоВводПоНазначению);
		
		СброситьПризнакиСканированияВсехПараметров(Форма);
		
		Если Форма.РежимСканированияСерий = "ТоварСерияТовар"
			Или ЭтоВводПоНазначению Тогда
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
		Иначе
			Если СерииУказываются
				И Форма.ТекущийПараметрСканированияСерия Тогда
				
				Форма.ТекущийПараметрСканированияСерия = Ложь;
				УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
				
			Иначе
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			КонецЕсли;
		КонецЕсли;
		
		ПерейтиКСледующемуПараметруСканирования(Форма);
		
	Иначе
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			ЭтоВводПоНазначению = Ложь;
			
			Если Режим = "ВводКоличестваНеОтгружать" Тогда
				ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = Количество;
				ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = СкорректированноеКоличествоУпаковокНеОтгружать(
					ТекущаяСтрокаСканирования, ДопустимоеОтклонениеОтбираемыхТоваров);
				
				ПараметрыРежима.Режим = "ВводКоличества";
			Иначе
				
				Если ТекущаяСтрокаСканирования.НовоеНазначение = ТекущаяСтрокаСканирования.Назначение Тогда
					
					Товар = СтрокаСканирования();
					ЗаполнитьЗначенияСвойств(Товар, ТекущаяСтрокаСканирования, , "АктивнаяСтрока, КоличествоВДокументе,
						|КоличествоНеОтгружать, КоличествоУпаковок, КоличествоУпаковокВДокументе, КоличествоУпаковокНеОтгружать");
					
					Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка, Серия");
					ЗаполнитьЗначенияСвойств(Отбор, Товар);
					
					МассивСтрок = Форма.ТоварыДляСканирования.НайтиСтроки(Отбор);
					Если МассивСтрок.Количество() > 0 Тогда
						ТоварЕстьВЗадании = Истина;
					Иначе
						ТоварЕстьВЗадании = Ложь;
					КонецЕсли;
					
					Если ТоварЕстьВЗадании Тогда
						ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, МассивСтрок[0]);
						СброситьОтметкуАктивнойСтрокиТоваровСканирования(Форма.ТоварыДляСканирования);
						УстановитьАктивностьСтрокиСканирования(МассивСтрок[0]);
					Иначе
						КоличествоПозицийТоваров = Форма.ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке + 1;
						ТекущаяСтрокаСканирования = СтрокаСканирования();
						ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, Товар);
						
						Форма.ТекущаяСтрокаСканирования.НомерТовараВЯчейке = КоличествоПозицийТоваров;
						Форма.ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке = КоличествоПозицийТоваров;
						
						ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
						ПараметрыРежима.ИдСообщения = "ПредупреждениеТоварОтсутствуетВЗадании";
					КонецЕсли;
					
					Если Режим = "ВводКоличестваПоНазначению" Тогда
						ЭтоВводПоНазначению = Истина;
					КонецЕсли;
					
					Режим = "ВводКоличества";
					
				КонецЕсли;
				
				КоличествоУпаковокОтсканировано = Количество;
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма, Количество);
				ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = СкорректированноеКоличествоУпаковокНеОтгружать(
					Форма.ТекущаяСтрокаСканирования, ДопустимоеОтклонениеОтбираемыхТоваров);
				
			КонецЕсли;
			
			ДобавитьВОтсканированныеТовары(Форма, ЭтоВводПоНазначению);
			
		Иначе
			
			КоличествоУпаковокОтсканировано = 0;
			
			Если ТипЗадания = "Размещение" Тогда
				КоличествоУпаковокОтсканировано = Количество;
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить = Количество;
					УстановитьКоличествоОстатковВОстаткиТоваровВЯчейке(Форма);
					СброситьПризнакиСканированияВсехПараметров(Форма);
					УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
					Возврат;
				Иначе
					Если Форма.РежимСканированияСерий = "ТоварСерияТовар" Тогда
						УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
					Иначе
						Если СерииУказываются
							И Форма.ТекущийПараметрСканированияСерия Тогда
							
							Форма.ТекущийПараметрСканированияСерия = Ложь;
							УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
							
						Иначе
							УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
						КонецЕсли;
					КонецЕсли;
					
					ПерейтиКСледующемуПараметруСканирования(Форма);
					УстановитьОтсканированноеКоличествоУпаковок(Форма, Количество);
					УстановитьОтсканированноеКоличествоТовара(Форма);
				КонецЕсли;
			ИначеЕсли ТипЗадания = "Перемещение" Тогда
				Если ОтборОтсканирован
					И ЭтоПорядокОбработкиТоварЯчейка Тогда
					
					ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить = Количество;
					УстановитьКоличествоОстатковВОстаткиТоваровВЯчейке(Форма);
					СброситьПризнакиСканированияВсехПараметров(Форма);
					УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
					ПерейтиКСледующемуПараметруСканирования(Форма);
					
					Возврат;
					
				Иначе
					Если ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество Тогда
						
						УстановитьЦветаЭлементовСканирования(Форма);
						СброситьПризнакиСканированияВсехПараметров(Форма);
						
						Если СерииУказываются
							И Форма.ТекущийПараметрСканированияСерия Тогда
							
							Форма.ТекущийПараметрСканированияСерия = Ложь;
							УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
							
						Иначе
							УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
						КонецЕсли;
						
						ПерейтиКСледующемуПараметруСканирования(Форма);
						
						Возврат;
						
					КонецЕсли;
					
					КоличествоУпаковокОтсканировано = Количество;
					СброситьПризнакиСканированияВсехПараметров(Форма);
					
					Если Форма.РежимСканированияСерий = "ТоварСерияТовар" Тогда
						УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
					Иначе
						Если СерииУказываются
							И Форма.ТекущийПараметрСканированияСерия Тогда
							
							Форма.ТекущийПараметрСканированияСерия = Ложь;
							УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
							
						Иначе
							УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
						КонецЕсли;
					КонецЕсли;
					
					ПерейтиКСледующемуПараметруСканирования(Форма);
					
				КонецЕсли;
			Иначе
				Если ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество Тогда
					
					УстановитьЦветаЭлементовСканирования(Форма);
					СброситьПризнакиСканированияВсехПараметров(Форма);
					
					Если СерииУказываются
						И Форма.ТекущийПараметрСканированияСерия Тогда
						
						Форма.ТекущийПараметрСканированияСерия = Ложь;
						УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
						
					Иначе
						УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
					КонецЕсли;
					
					ПерейтиКСледующемуПараметруСканирования(Форма);
					
					Возврат;
					
				КонецЕсли;
				
				КоличествоУпаковокОтсканировано = Количество;
				СброситьПризнакиСканированияВсехПараметров(Форма);
				
				Если Форма.РежимСканированияСерий = "ТоварСерияТовар" Тогда
					УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
				Иначе
					Если СерииУказываются
						И Форма.ТекущийПараметрСканированияСерия Тогда
						
						Форма.ТекущийПараметрСканированияСерия = Ложь;
						УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
						
					Иначе
						УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
					КонецЕсли;
				КонецЕсли;
				
				ПерейтиКСледующемуПараметруСканирования(Форма);
				
			КонецЕсли;
			
			УвеличенноеКоличество = КоличествоУпаковокОтсканировано - ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
			УстановитьОтсканированноеКоличествоУпаковок(Форма, КоличествоУпаковокОтсканировано);
			УстановитьОтсканированноеКоличествоТовара(Форма, , УвеличенноеКоличество);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при вводе количества товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Количество - Число - отсканированное количество.
//	ЕстьОшибки - Неопределено - переменная в которую записывается флаг ошибки.
//
Функция ПриВводеКоличества(Форма, Количество, ЕстьОшибки)
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован= Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если ЭтоНаборТоваров Тогда
		Возврат Количество;
	КонецЕсли;
	
	ЭтоМерныйТовар = МерныеЕдиницыИзмерения.Найти(ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) <> Неопределено;
	ПредельноеКоличествоОтбираемогоТовара = ТекущаяСтрокаСканирования.КоличествоУпаковок +
		ТекущаяСтрокаСканирования.КоличествоУпаковок * ДопустимоеОтклонениеОтбираемыхТоваров / 100;
	
	Если ТипЗадания = "Размещение" Тогда
		Если Не ЭтоНаборТоваров
			И Количество > ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе Тогда
			
			ЕстьОшибки = Истина;
			
		ИначеЕсли (ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили + Количество) > ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе Тогда
			
			Количество = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе -
				ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили;
			
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		Если ОтборОтсканирован
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить > ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		Иначе
			Если Количество > ТекущаяСтрокаСканирования.КоличествоУпаковок Тогда
				ЕстьОшибки = Истина;
			Иначе
				Если СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий)
					И Количество < ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано Тогда
					
					Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
					ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
					
					МассивСтрок = Форма.ОтсканированныеТовары.НайтиСтроки(Отбор);
					
					НомерСерии = МассивСтрок[0].НомерСерии;
					ГоденДо = МассивСтрок[0].ГоденДо;
					КоличествоРазличныхСерий = 1;
					
					Для Каждого Строка Из МассивСтрок Цикл
						Если ТекущаяСтрокаСканирования.ИспользоватьНомерСерии
							И ТекущаяСтрокаСканирования.ИспользоватьСрокГодностиСерии Тогда
							
							Если Строка.НомерСерии <> НомерСерии
								И Строка.ГоденДо <> ГоденДо Тогда
								
								КоличествоРазличныхСерий = 2;
								Прервать;
								
							КонецЕсли;
							
						Иначе
							Если Строка.НомерСерии <> НомерСерии
								Или Строка.ГоденДо <> ГоденДо Тогда
								
								КоличествоРазличныхСерий = 2;
								Прервать;
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если КоличествоРазличныхСерий > 1 Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		Если (ЭтоМерныйТовар
				И Количество > ПредельноеКоличествоОтбираемогоТовара)
			Или (Не ЭтоМерныйТовар
				И Количество > ТекущаяСтрокаСканирования.КоличествоУпаковок) Тогда
			
			ЕстьОшибки = Истина;
			
		Иначе
			Если СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий)
				И Количество < ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано Тогда
				
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
				ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
				
				МассивСтрок = Форма.ОтсканированныеТовары.НайтиСтроки(Отбор);
				
				НомерСерии = МассивСтрок[0].НомерСерии;
				ГоденДо = МассивСтрок[0].ГоденДо;
				КоличествоРазличныхСерий = 1;
				
				Для Каждого Строка Из МассивСтрок Цикл
					Если ТекущаяСтрокаСканирования.ИспользоватьНомерСерии
						И ТекущаяСтрокаСканирования.ИспользоватьСрокГодностиСерии Тогда
						
						Если Строка.НомерСерии <> НомерСерии
							И Строка.ГоденДо <> ГоденДо Тогда
							
							КоличествоРазличныхСерий = 2;
							Прервать;
							
						КонецЕсли;
						
					Иначе
						Если Строка.НомерСерии <> НомерСерии
							Или Строка.ГоденДо <> ГоденДо Тогда
							
							КоличествоРазличныхСерий = 2;
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если КоличествоРазличныхСерий > 1 Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Обрабатывает ситуацию вывода предупреждения при сканировании значения.
// Предупреждение выводится, но флаг ошибки при этом не взводится.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОбработатьПредупреждениеПриСканированииЗначения(Форма)
	
	Если Не Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = ТекстНадписиЗаголовкаЭлементаФормы(Форма.ПараметрыРежима.ИдСообщения, Форма);
	
	ВывестиПредупреждениеПриСканированииЗначения(Форма, ТекстПредупреждения);
	
КонецПроцедуры

// Обрабатывает ситуацию возникновения ошибки при сканировании значения,
// например - отсканирован неверный штрихкод.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ЗначениеСканирования - Произвольный - отсканированное значение.
//	Товар - Структура - структура с информацией о товаре.
//
Процедура ОбработатьОшибкуПриСканированияЗначения(Форма, ЗначениеСканирования, Товар)
	
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	СерииУказываются = СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	Если ПараметрСканирования = "Ячейка" Тогда
		ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеТаЯчейка", Форма);
	ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
		ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеТотТовар", Форма);
		Если Товар.ТипОшибки = "НеНайденТовар" Тогда
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеНайденТовар", Форма);
		ИначеЕсли Товар.ТипОшибки = "УпаковкаНеПривязанаКШтрихкоду" Тогда
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеПривязанаУпаковка", Форма);
		ИначеЕсли Товар.ТипОшибки = "УпЛистСодержитОтсканированныеРанееУпЛисты" Тогда
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаУпЛистСодержитОтсканированныеРанееУпЛисты", Форма);
		КонецЕсли;
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеТаСерия", Форма);
	ИначеЕсли ПараметрСканирования = "Количество" Тогда
		Если ЗначениеСканирования < Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано Тогда
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаМеньшееКоличество", Форма);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано);
		Иначе
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаКоличествоБольшеТребуемого", Форма);
		КонецЕсли;
		
		СброситьПризнакиСканированияВсехПараметров(Форма);
		Если ЭтоНаборТоваров 
			Или ТипЗадания = "Пересчет" Тогда
			
			УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
			Если Не СерииУказываются Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			КонецЕсли;
			
		Иначе
			Если Не ТипЗадания = "ПроверкаОтбора" Тогда
				
				Если ТипЗадания = "Размещение" Тогда
					
					Если ЭтоПорядокОбработкиТоварЯчейка Тогда
						УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
					Иначе
						УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
						
						Если Не СерииУказываются Тогда
							УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТипЗадания = "Перемещение" Тогда
					
					Если ОтборОтсканирован
						И ЭтоПорядокОбработкиТоварЯчейка Тогда
						
						УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
						
					Иначе
						УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
						Если Не СерииУказываются Тогда
							УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
					Если Не СерииУказываются Тогда
						УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ПерейтиКСледующемуПараметруСканирования(Форма);
		
	КонецЕсли;
	
	Форма.СрокГодностиСерии = "";
	Форма.ШтрихкодПараметраСканирования = "";
	
	Форма.ВводКоличестваВес = 0;
	Форма.ВводКоличестваОбъем = 0;
	Форма.ВводКоличестваКоличество = 0;
	
	ВывестиСообщениеОбОшибкеПриСканированииЗначения(Форма, ТекстОшибки);
	
КонецПроцедуры

// Переключает верхний блок страниц на страницу с текстом сообщения об ошибке.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ТекстОшибки - Строка - текст ошибки.
//
Процедура ВывестиСообщениеОбОшибкеПриСканированииЗначения(Форма, ТекстОшибки)
	
	Форма.СообщениеОбОшибке = ТекстОшибки;
	Форма.Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Форма.Элементы.СтраницаТекстОшибки;
	
КонецПроцедуры

// Переключает верхний блок страниц на страницу с текстом предупреждения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ТекстПредупреждения - Строка - текст предупреждения.
//
Процедура ВывестиПредупреждениеПриСканированииЗначения(Форма, ТекстПредупреждения)
	
	Форма.СообщениеОбОшибке = ТекстПредупреждения;
	Форма.Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Форма.Элементы.СтраницаТекстОшибки;
	
	// Сбросить флаг вывода предупрежения.
	Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Ложь;
	Форма.ПараметрыРежима.ИдСообщения = "";
	
КонецПроцедуры

// Процедура вызывается после сканирования значения, выполняет дополнительные проверки
// и действия связанные с событием сканирования значения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПослеСканированияЗначения(Форма)
	
	Элементы = Форма.Элементы;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	СерииУказываются = СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	СброситьПризнакиСканированияВсехПараметров(Форма);
	
	УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Не ОтсканированнаяЯчейкаСовпадаетСЯчейкойСтрокиСканирования(ТекущаяСтрокаСканирования));
	УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", ОтсканированныйТоварСовпадаетСТоваромСтрокиСканирования(ТекущаяСтрокаСканирования));
	УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
	
	Если ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Размещение" Тогда
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Ложь);
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Ложь);
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются);
		ИначеЕсли ТипЗадания = "Пересчет" Тогда
			ПерейтиКСледующемуПараметруСканирования(Форма);
		КонецЕсли;
		
		Если Не (Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСканирование) Тогда
			ПерейтиНаСтраницу(Форма, "СтраницаСканирование");
			Форма.ТекущийЭлемент = ?(ТипЗадания = "Приемка", Элементы.СканированиеТовар, Элементы.СканированиеЯчейка);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Тогда
		
		Если ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			ПриЗавершенииСканированияТекущегоЗадания(Форма);
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрокаЗаданияОтсканирована(Форма) Тогда
			Если ЭтоПоследняяСтрокаСканирования(Форма) Тогда
				ПриЗавершенииСканированияТекущегоЗадания(Форма);
				Возврат;
			Иначе
				ПерейтиКСледующейСтрокеСканирования(Форма);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			ПриЗавершенииСканированияТекущегоЗадания(Форма);
			Возврат;
		КонецЕсли;
		
		Если ЭтоПорядокОбработкиТоварЯчейка Тогда
			Если ТекущаяСтрокаЗаданияОтсканирована(Форма) Тогда
				ПерейтиВРежимОжиданияСканированияТовара(Форма);
			КонецЕсли;
			ПерейтиКСледующемуПараметруСканирования(Форма);
		Иначе
			УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			Если ТекущаяСтрокаЗаданияОтсканирована(Форма) Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
				ПерейтиКСледующейСтрокеСканирования(Форма);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			ПриЗавершенииСканированияТекущегоЗадания(Форма);
			Возврат;
		КонецЕсли;
		
		Если ОтборОтсканирован
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если ТекущаяСтрокаЗаданияОтсканирована(Форма) Тогда
				ПерейтиВРежимОжиданияСканированияТовара(Форма);
			КонецЕсли;
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		Иначе
			Если ТекущаяСтрокаЗаданияОтсканирована(Форма) Тогда
				ПерейтиКСледующейСтрокеСканирования(Форма);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Если Не (Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСканирование) Тогда
			ПерейтиНаСтраницу(Форма, "СтраницаСканирование");
			Форма.ТекущийЭлемент = Элементы.СканированиеЯчейка;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если Форма.ПараметрыРежима.ПараметрСканирования = "Количество" Тогда
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			
			Если Форма.РежимСканированияСерий = "ТоварСерияТовар" Тогда
				УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
			Иначе
				Если СерииУказываются
					И Форма.ТекущийПараметрСканированияСерия Тогда
					
					Форма.ТекущийПараметрСканированияСерия = Ложь;
					УстановитьПризнакСканированияПараметра(Форма, "Серия", Истина);
					
				Иначе
					УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
				КонецЕсли;
			КонецЕсли;
			
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		КонецЕсли;
		
		Если Форма.ПараметрыРежима.КэшированныеЗначения = Неопределено Тогда
			Форма.ПараметрыРежима.КэшированныеЗначения = СтрокаСканирования();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма.ПараметрыРежима.КэшированныеЗначения, Форма.ТекущаяСтрокаСканирования);
		
	Иначе
		
		Если СтрокаЗаданияОтсканирована(ТекущаяСтрокаСканирования, ПараметрыРежима) Тогда
			
			УстановитьОтсканированноеКоличествоТовара(Форма);
			
			Если ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
				ПриЗавершенииСканированияТекущегоЗадания(Форма);
			Иначе
				ПерейтиКСледующейСтрокеСканирования(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение флага "Сканировать" равным "Ложь" для всех параметров сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СброситьПризнакиСканированияВсехПараметров(Форма)
	
	УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Ложь);
	УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Ложь);
	УстановитьПризнакСканированияПараметра(Форма, "Серия", Ложь);
	УстановитьПризнакСканированияПараметра(Форма, "Количество", Ложь);
	
КонецПроцедуры

// Устанавливает значение флага "Сканировать" для параметра сканирования в таблице
// параметров сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяПараметра - Строка - имя параметра сканирования.
//	Сканировать  - Булево - отметка сканирования.
//
Процедура УстановитьПризнакСканированияПараметра(Форма, ИмяПараметра, Сканировать)
	
	Отбор = Новый Структура("ИмяПараметра", ИмяПараметра);
	МассивСтрок = Форма.ПараметрыСканирования.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок[0].Сканировать = Сканировать;
	
КонецПроцедуры

// Добавляет параметр в очередь параметров сканирования формы мобильного рабочего места
// работника склада.
//
// Параметры:
//	ОчередьСканирования - ТаблицаЗначений - очередь параметров сканирования,
//	ИмяПараметра - Строка - имя параметра сканирования,
//	Сканировать - Булево - признак необходимости сканирования параметра,
//	ПорядокСканирования - Число - порядок сканирования параметра (мин. = 1).
//
Процедура ДобавитьПараметрВОчередьСканирования(ОчередьСканирования, ИмяПараметра, Сканировать = Истина, ПорядокСканирования = 0)
	
	Если ПорядокСканирования = 0 Тогда
		СтрокаТбл = ОчередьСканирования.Добавить();
	Иначе
		СтрокаТбл = ОчередьСканирования.Вставить(ПорядокСканирования - 1);
	КонецЕсли;
	
	СтрокаТбл.ИмяПараметра = ИмяПараметра;
	СтрокаТбл.Сканировать = Сканировать;
	
КонецПроцедуры

// Устанавливает порядок параметра сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяПараметра - Строка - имя параметра сканирования.
//	Порядок - Число - порядковый номер параметра сканирования.
//
Процедура УстановитьПорядокПараметраСканирования(Форма, ИмяПараметра, Порядок)
	
	Отбор = Новый Структура("ИмяПараметра", ИмяПараметра);
	
	МассивСтрок = Форма.ПараметрыСканирования.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = Форма.ПараметрыСканирования.Индекс(МассивСтрок[0]);
	
	Если Индекс = (Порядок - 1) Тогда
		Возврат;
	КонецЕсли;
	
	Смещение = Порядок - 1 - (Индекс);
	
	Форма.ПараметрыСканирования.Сдвинуть(Индекс, Смещение);
	
КонецПроцедуры

// Возвращает порядок обхода параметров сканирования и элементов сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Строка - порядок обхода на основании параметров задания, параметров режима.
//
Функция ПорядокОбхода(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПорядокОбработки = Форма.ПараметрыРежима.ПорядокОбработки;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	ЭтоРазмещение = (ТипЗадания = "Размещение");
	ЭтоПеремещение = (ТипЗадания = "Перемещение");
	
	ПорядокОбходаЭлементов = "ЯчейкаТовар";
	
	Если (ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка)
		И ((ЭтоРазмещение 
			И Не ЭтоНаборТоваров) 
		Или (ЭтоПеремещение 
			И ОтборОтсканирован)) Тогда
		
		ПорядокОбходаЭлементов = "ТоварЯчейка";
		
	КонецЕсли;
	
	Возврат ПорядокОбходаЭлементов;
	
КонецФункции

// Устанавливает порядок параметров сканирования.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПорядокПараметровСканирования(Форма)
	
	ПорядокОбхода = ПорядокОбхода(Форма);
	
	Если ПорядокОбхода = "ТоварЯчейка" Тогда
		
		УстановитьПорядокПараметраСканирования(Форма, "Номенклатура", 1);
		УстановитьПорядокПараметраСканирования(Форма, "Серия", 2);
		УстановитьПорядокПараметраСканирования(Форма, "Количество", 3);
		УстановитьПорядокПараметраСканирования(Форма, "Ячейка", 4);
		
	ИначеЕсли ПорядокОбхода = "ЯчейкаТовар" Тогда
		
		УстановитьПорядокПараметраСканирования(Форма, "Ячейка", 1);
		УстановитьПорядокПараметраСканирования(Форма, "Номенклатура", 2);
		УстановитьПорядокПараметраСканирования(Форма, "Серия", 3);
		УстановитьПорядокПараметраСканирования(Форма, "Количество", 4);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает порядок элементов сканирования на форме в соответствии
// с порядком параметров сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПорядокЭлементовСканирования(Форма)
	
	Элементы = Форма.Элементы;
	
	ПорядокОбхода = ПорядокОбхода(Форма);
	
	Если ПорядокОбхода = "ТоварЯчейка" Тогда
		
		Элементы.Переместить(Элементы.СканированиеЯчейка, Элементы.ГруппаПараметрыСканирования);
		Элементы.Переместить(Элементы.ГруппаВзятьОтложено, Элементы.ГруппаКоличество);
		
	ИначеЕсли ПорядокОбхода = "ЯчейкаТовар" Тогда
		
		Элементы.Переместить(Элементы.СканированиеТовар, Элементы.ГруппаПараметрыСканирования);
		Элементы.Переместить(Элементы.СканированиеНазначение, Элементы.ГруппаПараметрыСканирования);
		Элементы.Переместить(Элементы.СканированиеСерия, Элементы.ГруппаПараметрыСканирования);
		Элементы.Переместить(Элементы.ГруппаВзяли, Элементы.ГруппаКоличество);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состав параметров сканирования в зависимости от типа выполняемого задания 
// - набор товаров или сканирование существующего документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура СформироватьОчередьПараметровСканирования(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	ЯчейкиИспользуются = Не (ЭтоНаборТоваров Или (ТипЗадания = "ПроверкаОтбора" Или ТипЗадания = "Приемка"));
	СерииНоменклатурыИспользуются = Форма.ИспользоватьСерииНоменклатуры;
	ПараметрыСканирования = Форма.ПараметрыСканирования;
	ПараметрыСканирования.Очистить();
	
	Форма.ПараметрыРежима.ПараметрСканирования = "";
	
	ДобавитьПараметрВОчередьСканирования(ПараметрыСканирования, "Ячейка", ЯчейкиИспользуются);
	ДобавитьПараметрВОчередьСканирования(ПараметрыСканирования, "Номенклатура");
	ДобавитьПараметрВОчередьСканирования(ПараметрыСканирования, "Серия", СерииНоменклатурыИспользуются);
	ДобавитьПараметрВОчередьСканирования(ПараметрыСканирования, "Количество", Ложь);
	
	УстановитьПорядокПараметровСканирования(Форма);
	УстановитьПорядокЭлементовСканирования(Форма);
	
КонецПроцедуры

// Проверяет факт сканирования всех упаковок в строке сканирования.
//
// Параметры:
//	СтрокаЗадания - ДанныеФормыЭлементКоллекции - строка сканирования.
//	ПараметрыРежима - Структура
//	ДопустимоеОтклонениеОтбираемыхТоваров - Число
//
// Возвращаемое значение:
//	Булево - Истина - строка отсканирована.
//
Функция СтрокаЗаданияОтсканирована(СтрокаЗадания, ПараметрыРежима, ДопустимоеОтклонениеОтбираемыхТоваров = 0)
	
	Отсканирована = Ложь;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если МерныеЕдиницыИзмерения.Найти(СтрокаЗадания.ТипИзмеряемойВеличины) <> Неопределено Тогда
			ПредельноеКоличествоОтбираемогоТовара = СтрокаЗадания.КоличествоУпаковок +
				СтрокаЗадания.КоличествоУпаковок * ДопустимоеОтклонениеОтбираемыхТоваров / 100;
			
			Отсканирована = (СтрокаЗадания.КоличествоУпаковок <= СтрокаЗадания.КоличествоУпаковокОтсканировано
					И ПредельноеКоличествоОтбираемогоТовара >= СтрокаЗадания.КоличествоУпаковокОтсканировано)
				Или (СтрокаЗадания.КоличествоУпаковок = СтрокаЗадания.КоличествоУпаковокНеОтгружать);
		Иначе
			Отсканирована = (СтрокаЗадания.КоличествоУпаковок = СтрокаЗадания.КоличествоУпаковокОтсканировано)
				Или (СтрокаЗадания.КоличествоУпаковок = СтрокаЗадания.КоличествоУпаковокНеОтгружать);
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Отбор"
		И МерныеЕдиницыИзмерения.Найти(СтрокаЗадания.ТипИзмеряемойВеличины) <> Неопределено Тогда
		
		ПредельноеКоличествоОтбираемогоТовара = СтрокаЗадания.КоличествоУпаковок +
			СтрокаЗадания.КоличествоУпаковок * ДопустимоеОтклонениеОтбираемыхТоваров / 100;
		
		Отсканирована = СтрокаЗадания.КоличествоУпаковок <= СтрокаЗадания.КоличествоУпаковокОтсканировано
			И ПредельноеКоличествоОтбираемогоТовара >= СтрокаЗадания.КоличествоУпаковокОтсканировано
		
	Иначе
		Отсканирована = (СтрокаЗадания.КоличествоУпаковок = СтрокаЗадания.КоличествоУпаковокОтсканировано);
	КонецЕсли;
	
	Возврат Отсканирована;
	
КонецФункции

// Проверяет факт полной обработки (сканирования) текущей строки складского задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина - текущая строка складского задания полностью отработана.
//
Функция ТекущаяСтрокаЗаданияОтсканирована(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100;
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	
	Если Не ОтсканированныйТоварСовпадаетСТоваромСтрокиСканирования(ТекущаяСтрокаСканирования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОтсканированнаяЯчейкаСовпадаетСЯчейкойСтрокиСканирования(ТекущаяСтрокаСканирования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		И МерныеЕдиницыИзмерения.Найти(ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) <> Неопределено Тогда
		
		ПредельноеКоличествоОтбираемогоТовара = ТекущаяСтрокаСканирования.КоличествоУпаковок +
			ТекущаяСтрокаСканирования.КоличествоУпаковок * ДопустимоеОтклонениеОтбираемыхТоваров;
		
		Если Не (ТекущаяСтрокаСканирования.КоличествоУпаковок <= ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано
			И ПредельноеКоличествоОтбираемогоТовара >= ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		Если Не (ТекущаяСтрокаСканирования.КоличествоУпаковок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет факт полного сканирования всех строк строк товаров складского задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Флаг сканирования всех строк задания.
//
Функция ВсеСтрокиЗаданияОтсканированы(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100;
	
	Если (ТипЗадания = "Отбор"
			Или ТипЗадания = "ПроверкаОтбора")
		И ДопустимоеОтклонениеОтбираемыхТоваров > 0 Тогда
		
		МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
		ПредельноеКоличествоОтбираемогоТовара = 0;
		
		Для Каждого СтрокаТовара Из ТоварыДляСканирования Цикл
			Если МерныеЕдиницыИзмерения.Найти(СтрокаТовара.ТипИзмеряемойВеличины) = Неопределено Тогда
				ПредельноеКоличествоОтбираемогоТовара = ПредельноеКоличествоОтбираемогоТовара + СтрокаТовара.КоличествоУпаковок;
			Иначе
				ПредельноеКоличествоОтбираемогоТовара = ПредельноеКоличествоОтбираемогоТовара +
					СтрокаТовара.КоличествоУпаковок + СтрокаТовара.КоличествоУпаковок * ДопустимоеОтклонениеОтбираемыхТоваров;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТоварыДляСканирования.Итог("КоличествоУпаковок") <= ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано")
			И ПредельноеКоличествоОтбираемогоТовара >= ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано")
		
	Иначе
		Возврат ТоварыДляСканирования.Итог("КоличествоУпаковок") = ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано");
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли данная номенклатура товаром.
//
// Параметры:
//	СтруктураДанных - ДанныеФормыЭлементКоллекции, Структура - любая структура данных для проверки.
//
// Возвращаемое значение:
//	Булево - Истина - номенклатура является товаром, Ложь - нет.
//
Функция ЭтоТовар(СтруктураДанных)
	
	Возврат (СтруктураДанных.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	
КонецФункции

// Проверяет, является ли данная номенклатура тарой.
//
// Параметры:
//	СтруктураДанных - ДанныеФормыЭлементКоллекции, Структура - любая структура данных для проверки.
//
// Возвращаемое значение:
//	Булево - Истина - номенклатура является тарой, Ложь - нет.
//
Функция ЭтоТара(СтруктураДанных)
	
	Возврат (СтруктураДанных.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
КонецФункции

Функция ЭтоУпаковочныйЛист(СтруктураДанных)
	
	Возврат ЗначениеЗаполнено(СтруктураДанных.УпаковочныйЛист);
	
КонецФункции

Функция ЭтоНеизвестныйШтрихкод(СтруктураДанных)
	
	Возврат Не ЗначениеЗаполнено(СтруктураДанных.УпаковочныйЛист)
		И Не ЗначениеЗаполнено(СтруктураДанных.Номенклатура)
		И ЗначениеЗаполнено(СтруктураДанных.Штрихкод);
	
КонецФункции

Функция ШтрихкодыВТЧ(Форма)
	
	Возврат Форма.ИспользоватьУпаковочныеЛисты
		И Форма.ПараметрыРежима.ТипЗадания = "Приемка";
	
КонецФункции

// Дополняет структуру товара сведениями - описание, наименование, артикул.
// Используется при формировании текста заголовка элементов сканирования.
//
// Параметры:
//	ПараметрыТовара - см. РабочееМестоРаботникаСкладаСервер.Товар
//
// Возвращаемое значение:
//	Структура - см. Товар
//
Функция НайтиТоварПоПараметрам(ПараметрыТовара)
	
	Товар = Товар();
	
	Товар.КодВозврата = 1;
	Товар.Артикул = ПараметрыТовара.АртикулНоменклатуры;
	Товар.Описание = ПараметрыТовара.ОписаниеНоменклатуры;
	Товар.Наименование = ПараметрыТовара.НаименованиеНоменклатуры;
	
	ЗаполнитьЗначенияСвойств(Товар, ПараметрыТовара);
	
	Возврат Товар;
	
КонецФункции

// Возвращает структуру для хранения сведений о товаре.
// 
// Возвращаемое значение:
//	Структура - описание номенклатуры, содержит следующие поля:
//	* УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист, в состав которого входит товар.
//	* ЭтоУпаковочныйЛист - Булево - Истина, если товар используется в качестве упаковочного листа.
//	* ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин - тип измеряемой веоичины товара.
//	* ЕдиницаИзмеренияОбъема - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения объема товара.
//	* ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения веса товара.
//	* ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения товара.
//	* ОбъемУпаковки - Число - значение объема упаковки товара.
//	* ВесУпаковки - Число - значение веса упаковки товара.
//	* КоэффициентЕдиницыИзмеренияОбъема - Число - коэффициент объема упаковки товара.
//	* КоэффициентЕдиницыИзмеренияВеса - Число - коэффициент веса упаковки товара.
//	* Коэффициент - Число - коэффициент упаковки товара.
//	* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
//	* Назначение - СправочникСсылка.Назначения - сведения об обособлении товара.
//	* ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности - точность срока использования серии товара.
//	* ИспользоватьСрокГодностиСерии - Булево - Истина, если используется информация о срока годности серии товара.
//	* ИспользоватьНомерСерии - Булево - Истина, если используется учет серий в разрезе номеров.
//	* ГоденДо - Дата - дата истечения срока годности серии товара.
//	* НомерСерии - Строка - номер серии.
//	* Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//	* ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип товара.
//	* ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид товара.
//	* КоличествоПоШтрихкоду - Число - количество товара, которое содержится в сведениях его штрихкода.
//	* Штрихкод - Строка - штрихкод товара.
//	* Описание - Строка - сведения о товаре.
//	* Артикул - Строка - артикул товара.
//	* Наименование - Строка - имя товара.
//	* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	* ТекстСообщения - Строка - сообщение пользователю об ошибках, выявленных при сканировании штрихкода товара.
//	* ТипОшибки - Строка - тип ошибки санирования штрихкода товара.
//	* КодВозврата - Число - результат сканирования штрихкода товара.
//
Функция Товар() Экспорт
	
	Товар = Новый Структура;
	
	Товар.Вставить("КодВозврата", 1);
	Товар.Вставить("ТипОшибки", "");
	Товар.Вставить("ТекстСообщения", "");
	
	Товар.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Товар.Вставить("Наименование", "");
	Товар.Вставить("Артикул", "");
	Товар.Вставить("Описание", "");
	Товар.Вставить("Штрихкод", ""); // Для сохранения штрихкодов при приемке
	Товар.Вставить("КоличествоПоШтрихкоду", 0);
	
	Товар.Вставить("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	Товар.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	
	Товар.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Товар.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	Товар.Вставить("НомерСерии", "");
	Товар.Вставить("ГоденДо", Дата("00010101"));
	
	Товар.Вставить("ИспользоватьНомерСерии", Ложь);
	Товар.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	Товар.Вставить("ТочностьУказанияСрокаГодностиСерии", Перечисления.ТочностиУказанияСрокаГодности.ПустаяСсылка());
	
	Товар.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
	
	Товар.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	Товар.Вставить("Коэффициент", 0);
	Товар.Вставить("КоэффициентЕдиницыИзмеренияВеса", 0);
	Товар.Вставить("КоэффициентЕдиницыИзмеренияОбъема", 0);
	
	Товар.Вставить("ВесУпаковки", 0);
	Товар.Вставить("ОбъемУпаковки", 0);
	
	Товар.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Товар.Вставить("ЕдиницаИзмеренияВеса", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Товар.Вставить("ЕдиницаИзмеренияОбъема", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Товар.Вставить("ТипИзмеряемойВеличины", Перечисления.ТипыИзмеряемыхВеличин.ПустаяСсылка());
	
	Товар.Вставить("ЭтоУпаковочныйЛист", Ложь);
	Товар.Вставить("УпаковочныйЛист", Документы.УпаковочныйЛист.ПустаяСсылка());
	
	Возврат Товар;
	
КонецФункции

// Возвращает описание строки сканирования складского задания.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * КоличествоТоваровВЯчейке - Число - количество товаров в ячейке.
// * НомерТовараВЯчейке - Число - порядковый номер товара в ячейке.
// * КоличествоЯчеек - Число - количество ячеек.
// * НомерЯчейки - Число - порядковый номер ячейки.
// * ЕстьНеОтгружаемые - Булево - Истина, если есть неотгружаемые товары, обнаруженные в процессе выполнения складского
// 									задания.
// * ЕстьНедобор - Булево - Истина, если обнаружен недобор товаров, при отборе товаров из складской ячейки.
// * НомерСтрокиИсходный - Число - порядковый номер строки товаров в соответствии со складским заданием.
// * НомерСтроки - Число - порядковый номер строки товаров.
// * АктивнаяСтрока - Число - обрабатываемая строка складского задания.
// * КоличествоВДокументе - Число - количество товаров в соответствии со складским заданием.
// * НеОтгружать - Число - количество неотгружаемых товаров.
// * КоличествоНеОтгружать - Число - количество неотгружаемых товаров.
// * КоличествоУпаковокПоложили - Число - количество товаров, размещенных в складской ячейке.
// * КоличествоУпаковокПоложить - Число - количество товаров, которое нужно разместить в соответствии со складским заданием.
// * КоличествоУпаковокВДокументе - Число - количество упаковок товара в документе.
// * КоличествоУпаковокНеОтгружать - Число - количетсво упаковок неотгружаемых товаров.
// * КоличествоУпаковокОтсканировано - Число - количество отсканированных упаковок товара.
// * КоличествоУпаковок - Число - количество упаковок товара.
// * СкУпаковочныйЛистРодитель - ДокументСсылка.УпаковочныйЛист - сканируемый родительский упаковочный лист.
// * СкЭтоУпаковочныйЛист - Булево - Истина, сканируемая строка товаров является упаковочным листом.
// * СкУпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - сканируемый упаковочный лист.
// * СкУпаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - сканируемая упаковка товара.
// * СкГоденДо - Дата - сканируемый срок годности серии товара.
// * СкНомерСерии - Строка - сканируемый номер серии товара.
// * СкСерия - СправочникСсылка.СерииНоменклатуры - сканируемая серия товара.
// * СкХарактеристика - СправочникСсылка.ХарактеристикиНоменклатуры - сканируемая характеристика товара.
// * СкНоменклатура - СправочникСсылка.Номенклатура - сканируемая номенклатура.
// * СкКодЯчейки - Строка - сканируемый код ячейки.
// * СкЯчейка - СправочникСсылка.СкладскиеЯчейки - сканируемая ячейка.
// * КоличествоПоШтрихкоду - Число -количество товара в соответствии со штрихкодом.
// * Штрихкод - Строка - штрихкод тоавара.
// * УпаковочныйЛистРодитель - ДокументСсылка.УпаковочныйЛист - родительский упаковочный лист.
// * ЭтоУпаковочныйЛист - Булево - Истина, строка товаров является упаковочным листом.
// * УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист.
// * ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности - точность указания окончания
// 																								срока годности серии товара.
// * ИспользоватьСрокГодностиСерии - Булево - Истина, если используется учет серий товаров по сроку годности.
// * ИспользоватьНомерСерии - Булево - Истина, если используется серийный учет товаров.
// * СтатусУказанияСерий - Число - статус указания серии.
// * ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин - тип измеряемой величины товара.
// * НаименованиеЕдиницыИзмеренияОбъема - Строка - имя единицы измерения объема товара.
// * ЕдиницаИзмеренияОбъема - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения объема товара.
// * НаименованиеЕдиницыИзмеренияВеса - Строка - имя единицы измерения веса товара.
// * ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения веса товара.
// * НаименованиеЕдиницыИзмерения - Строка - имя единицы измерения товара.
// * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения товара.
// * ОбъемУпаковки - Число - объем упаковки товара.
// * ВесУпаковки - Число - вес упаковки товара.
// * КоэффициентЕдиницыИзмеренияОбъема - Число - коэффициент единицы измерения объема упаковки.
// * КоэффициентЕдиницыИзмеренияВеса - Число - коэффициент единицы измерения веса упаковки.
// * Коэффициент - Число - коэффициент упаковки товара.
// * НаименованиеУпаковки - Строка - имя упаковки.
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
// * НовоеНазначение - СправочникСсылка.Назначения - новое назначение обособления хранения товара.
// * НаименованиеНазначения - Строка - имя назначения обособленного хранения товара.
// * Назначение - СправочникСсылка.Назначения - назначение обособления хранения товара.
// * НомерСерии - Строка - номер серии товара.
// * ГоденДо - Дата - срок годности серии товара.
// * НаименованиеСерии - Строка - имя серии товара.
// * Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
// * НаименованиеХарактеристики - Строка - имя характеристики товара.
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
// * ШтрихкодНоменклатуры - Строка - штрихкод товара.
// * ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип товара.
// * ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид товара.
// * ОписаниеНоменклатуры - Строка - описание товара.
// * АртикулНоменклатуры - Строка - артикул товара.
// * НаименованиеНоменклатуры - Строка - имя товара.
// * Номенклатура - СправочникСсылка.Номенклатура - товар.
// * ШтрихкодЯчейки - Строка - штрихкод складской ячейки.
// * КодЯчейки - Строка - код складской ячейки.
// * Ячейка - СправочникСсылка.СкладскиеЯчейки - складская ячейка.
//
Функция СтрокаСканирования()
	
	СтруктураСтроки = Новый Структура;
	
	СтруктураСтроки.Вставить("Ячейка", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	СтруктураСтроки.Вставить("КодЯчейки", "");
	СтруктураСтроки.Вставить("ШтрихкодЯчейки", "");
	
	СтруктураСтроки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеНоменклатуры", "");
	СтруктураСтроки.Вставить("АртикулНоменклатуры", "");
	СтруктураСтроки.Вставить("ОписаниеНоменклатуры", "");
	
	СтруктураСтроки.Вставить("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("ШтрихкодНоменклатуры", "");
	
	СтруктураСтроки.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеХарактеристики", "");
	
	СтруктураСтроки.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеСерии", "");
	СтруктураСтроки.Вставить("ГоденДо", Дата("00010101"));
	СтруктураСтроки.Вставить("НомерСерии", "");
	
	СтруктураСтроки.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеНазначения", "");
	СтруктураСтроки.Вставить("НовоеНазначение", Справочники.Назначения.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеУпаковки", "");
	
	СтруктураСтроки.Вставить("Коэффициент", 0);
	СтруктураСтроки.Вставить("КоэффициентЕдиницыИзмеренияВеса", 0);
	СтруктураСтроки.Вставить("КоэффициентЕдиницыИзмеренияОбъема", 0);
	
	СтруктураСтроки.Вставить("ВесУпаковки", 0);
	СтруктураСтроки.Вставить("ОбъемУпаковки", 0);
	
	СтруктураСтроки.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеЕдиницыИзмерения", "");
	
	СтруктураСтроки.Вставить("ЕдиницаИзмеренияВеса", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеЕдиницыИзмеренияВеса", "");
	
	СтруктураСтроки.Вставить("ЕдиницаИзмеренияОбъема", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураСтроки.Вставить("НаименованиеЕдиницыИзмеренияОбъема", "");
	
	СтруктураСтроки.Вставить("ТипИзмеряемойВеличины", Перечисления.ТипыИзмеряемыхВеличин.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("СтатусУказанияСерий", 0);
	СтруктураСтроки.Вставить("ИспользоватьНомерСерии", Ложь);
	СтруктураСтроки.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	
	СтруктураСтроки.Вставить("ТочностьУказанияСрокаГодностиСерии", 
		Перечисления.ТочностиУказанияСрокаГодности.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("УпаковочныйЛист", Документы.УпаковочныйЛист.ПустаяСсылка());
	СтруктураСтроки.Вставить("ЭтоУпаковочныйЛист", Ложь);
	СтруктураСтроки.Вставить("УпаковочныйЛистРодитель", Документы.УпаковочныйЛист.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("Штрихкод", "");
	СтруктураСтроки.Вставить("КоличествоПоШтрихкоду", 0);
	
	СтруктураСтроки.Вставить("СкЯчейка", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкКодЯчейки", "");
	СтруктураСтроки.Вставить("СкНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("СкСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкНомерСерии", "");
	СтруктураСтроки.Вставить("СкГоденДо", Дата("00010101"));
	
	СтруктураСтроки.Вставить("СкУпаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкУпаковочныйЛист", Документы.УпаковочныйЛист.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкЭтоУпаковочныйЛист", Ложь);
	СтруктураСтроки.Вставить("СкУпаковочныйЛистРодитель", Документы.УпаковочныйЛист.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("КоличествоУпаковок", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокОтсканировано", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокНеОтгружать", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокВДокументе", 0);
	
	СтруктураСтроки.Вставить("КоличествоУпаковокПоложить", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокПоложили", 0);
	
	СтруктураСтроки.Вставить("КоличествоНеОтгружать", 0);
	СтруктураСтроки.Вставить("НеОтгружать", 0);
	СтруктураСтроки.Вставить("КоличествоВДокументе", 0);
	
	СтруктураСтроки.Вставить("АктивнаяСтрока", 0);
	
	СтруктураСтроки.Вставить("НомерСтроки", 0);
	СтруктураСтроки.Вставить("НомерСтрокиИсходный", 0);
	
	СтруктураСтроки.Вставить("ЕстьНедобор", Ложь);
	СтруктураСтроки.Вставить("ЕстьНеОтгружаемые", Ложь);
	
	СтруктураСтроки.Вставить("НомерЯчейки", 0);
	СтруктураСтроки.Вставить("КоличествоЯчеек", 0);
	
	СтруктураСтроки.Вставить("НомерТовараВЯчейке", 0);
	СтруктураСтроки.Вставить("КоличествоТоваровВЯчейке", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру параметров режима. Структура содержит необходимые вспомогательные
// значения для функционирования рабочего места работника склада.
//
// Возвращаемое значение:
//	Структура - параметры режима.
//
Функция ПараметрыРежима()
	
	ПараметрыРежима = Новый Структура;
	
	ПараметрыРежима.Вставить("Режим", "");
	ПараметрыРежима.Вставить("ЗакрытиеФормы", Ложь);
	
	ПараметрыРежима.Вставить("НаборТоваров", Ложь);
	ПараметрыРежима.Вставить("Задание", Неопределено);
	
	ПараметрыРежима.Вставить("НаименованиеСклада", "");
	ПараметрыРежима.Вставить("НаименованиеПомещения", "");
	
	ПараметрыРежима.Вставить("ЗонаПриемки", Неопределено);
	ПараметрыРежима.Вставить("НаименованиеЗоныПриемки", "");
	ПараметрыРежима.Вставить("ЗонаПриемкиПоУмолчанию", Неопределено);
	
	ПараметрыРежима.Вставить("ЗонаОтгрузки", Неопределено);
	ПараметрыРежима.Вставить("НаименованиеЗоныОтгрузки", "");
	
	ПараметрыРежима.Вставить("ВыборЗоныПриемкиОтгрузки", "");
	
	ПараметрыРежима.Вставить("ТипЗадания", Неопределено);
	ПараметрыРежима.Вставить("ОтборОтсканирован", Ложь);
	ПараметрыРежима.Вставить("РазмещениеОтсканировано", Ложь);
	ПараметрыРежима.Вставить("ТоварыРаспределены", Истина);
	ПараметрыРежима.Вставить("ПараметрСканирования", "");
	ПараметрыРежима.Вставить("МожноЗакрытьФорму", Ложь);
	
	ПараметрыРежима.Вставить("КоличествоСтрокОтбора", 0);
	ПараметрыРежима.Вставить("КоличествоСтрокРазмещения", 0);
	ПараметрыРежима.Вставить("КоличествоСтрокПересчета", 0);
	
	ПараметрыРежима.Вставить("КоличествоЯчеекОтбора", 0);
	ПараметрыРежима.Вставить("КоличествоЯчеекРазмещения", 0);
	ПараметрыРежима.Вставить("КоличествоЯчеекПересчета", 0);
	
	ПараметрыРежима.Вставить("КоличествоУпаковокОтбора", 0);
	ПараметрыРежима.Вставить("КоличествоУпаковокРазмещения", 0);
	ПараметрыРежима.Вставить("КоличествоУпаковокПересчета", 0);
	
	ПараметрыРежима.Вставить("СозданноеЗадание", Неопределено);
	
	ПараметрыРежима.Вставить("ПорядокОбработки", Неопределено);
	ПараметрыРежима.Вставить("ИсходныйИсполнитель", "");
	
	// Предназначены для вывода предупреждения при сканировании без установки флага ошибки.
	// Требуется в случае, например проверки отбора, когда сканируется товар которого
	// нет в проверяемом расходном ордере.
	ПараметрыРежима.Вставить("ВывестиПредупреждениеПриСканировании", Ложь);
	ПараметрыРежима.Вставить("ИдСообщения", "");
	ПараметрыРежима.Вставить("КэшированныеЗначения");
	
	Возврат ПараметрыРежима;
	
КонецФункции

// Добавляет сведения об отсканированном товаре в таблицу отсканированных товаров.
// Вызывается после сканирования значения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ЭтоВводПоНазначению - Булево
//
Процедура ДобавитьВОтсканированныеТовары(Форма, ЭтоВводПоНазначению = Ложь)
	
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ЭтоУпаковочныйЛист = ЭтоУпаковочныйЛист(ТекущаяСтрокаСканирования);
	ЭтоНеизвестныйШтрихкод = ЭтоНеизвестныйШтрихкод(ТекущаяСтрокаСканирования);
	
	Если ЭтоУпаковочныйЛист Тогда 
		Отбор = Новый Структура("УпаковочныйЛист");
	ИначеЕсли ЭтоНеизвестныйШтрихкод Тогда
		Отбор = Новый Структура("Штрихкод");
	Иначе
		
		Если (ТипЗадания = "Отбор"
				Или ТипЗадания = "Перемещение")
			И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
			
			Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, ГоденДо");
			
		Иначе
			Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
	
	МассивСтрок = ОтсканированныеТовары.НайтиСтроки(Отбор);
	
	Если Не МассивСтрок.Количество() > 0 Тогда
		
		НоваяСтрока = ОтсканированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСканирования);
		
		Если Не ЭтоУпаковочныйЛист
			И ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Упаковка) Тогда
			
			ЗаполнитьПараметрыОтсканированногоТовара(Форма, НоваяСтрока, Истина);
			
		КонецЕсли;
		
		Если НоваяСтрока.Коэффициент <> 0 Тогда
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковокОтсканировано * НоваяСтрока.Коэффициент;
		Иначе
			НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковокОтсканировано;
		КонецЕсли;
		
	Иначе
		Если ЭтоУпаковочныйЛист Тогда
			Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
			Форма.ПараметрыРежима.ИдСообщения = "ПредупреждениеУпаковочныйЛистУжеОтсканирован";
			ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 1;
		Иначе
			СтрокаТбл = МассивСтрок[0];
			
			Если Не ((ПараметрыРежима.Режим = "ВводКоличества")
				Или (ПараметрыРежима.Режим = "ВводКоличестваПоНазначению")) Тогда
				
				ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = СтрокаТбл.КоличествоУпаковокОтсканировано + 1;
				
			КонецЕсли;
			
			Если ЭтоВводПоНазначению
				И (ТекущаяСтрокаСканирования.НовоеНазначение = ТекущаяСтрокаСканирования.Назначение) Тогда
				
				СтрокаТбл.КоличествоУпаковокОтсканировано = СтрокаТбл.КоличествоУпаковокОтсканировано
					+ ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
				СтрокаТбл.КоличествоУпаковокНеОтгружать = СкорректированноеКоличествоУпаковокНеОтгружать(СтрокаТбл,
					ДопустимоеОтклонениеОтбираемыхТоваров);
				
			Иначе
				СтрокаТбл.КоличествоУпаковокОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
				СтрокаТбл.КоличествоУпаковокНеОтгружать = СкорректированноеКоличествоУпаковокНеОтгружать(ТекущаяСтрокаСканирования,
					ДопустимоеОтклонениеОтбираемыхТоваров);
			КонецЕсли;
			
			ЗаполнитьПараметрыОтсканированногоТовара(Форма, СтрокаТбл);
			
			Если (ТипЗадания = "ПроверкаОтбора")
				И СерииУказываютсяСправочно(СтрокаТбл.СтатусУказанияСерий) Тогда
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаТбл, , "КоличествоУпаковок,
					|КоличествоУпаковокВДокументе");
				
			Иначе
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаТбл);
			КонецЕсли;
			
			Если СтрокаТбл.Коэффициент <> 0 Тогда
				СтрокаТбл.Количество = СтрокаТбл.КоличествоУпаковокОтсканировано * СтрокаТбл.Коэффициент;
			Иначе
				СтрокаТбл.Количество = СтрокаТбл.КоличествоУпаковокОтсканировано;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыОтсканированныхТоваров(Форма);
	УстановитьОтсканированноеКоличествоТовара(Форма, Ложь);
	ДобавитьТаруПоОтсканированномуТовару(Форма);
	УстановитьКоличествоПоУчетуВТоварыДляПересчета(Форма);
	
КонецПроцедуры

// Добавляет сведения об отсканированной таре в таблицу отсканированной тары.
// Вызывается после сканирования значения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ДобавитьТаруВОтсканированнуюТару(Форма)
	
	Если Не Форма.ИспользоватьМногооборотнуюТару Тогда
		Возврат;
	КонецЕсли;
	
	// Получить таблицу тары отсканированного товара.
	ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(Форма.ТекущаяСтрокаСканирования.Номенклатура,
		Форма.ТекущаяСтрокаСканирования.Упаковка);
	
	Если ТаблицаТары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТовара = "ЯчейкаТовара, НоменклатураТовара, ХарактеристикаТовара, СерияТовара, УпаковкаТовара";
	КолонкиТары = "Номенклатура, Характеристика";
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("ЯчейкаТовара", Форма.ТекущаяСтрокаСканирования.СкЯчейка);
	Отбор.Вставить("НоменклатураТовара", Форма.ТекущаяСтрокаСканирования.СкНоменклатура);
	Отбор.Вставить("ХарактеристикаТовара", Форма.ТекущаяСтрокаСканирования.СкХарактеристика);
	Отбор.Вставить("СерияТовара", Форма.ТекущаяСтрокаСканирования.СкСерия);
	Отбор.Вставить("УпаковкаТовара", Форма.ТекущаяСтрокаСканирования.СкУпаковка);
	Отбор.Вставить("Назначение", Форма.ТекущаяСтрокаСканирования.Назначение);
	
	ДЗОтсканированнаяТара = Форма.РеквизитФормыВЗначение("ОтсканированнаяТара");
	
	// Найти строку товара в дереве.
	МассивСтрок = ДЗОтсканированнаяТара.Строки.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТовара = ДЗОтсканированнаяТара.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
	Иначе
		СтрокаТовара = МассивСтрок[0];
	КонецЕсли;
	
	// Добавить строки из таблицы тары в строки дерева отсканированной тары.
	ОтборПоТаре = Новый Структура("Номенклатура, Характеристика");
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	Для каждого СтрокаТбл Из ТаблицаТары Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПоТаре, СтрокаТбл);
		
		МассивСтрокТары = СтрокаТовара.Строки.НайтиСтроки(ОтборПоТаре);
		
		Если МассивСтрокТары.Количество() = 0 Тогда
			СтрокаТары = СтрокаТовара.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТары, СтрокаТовара, КолонкиТовара);
			ЗаполнитьЗначенияСвойств(СтрокаТары, СтрокаТбл, КолонкиТары);
			
			СтрокаТары.Коэффициент = 1;
			СтрокаТары.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано *
				СтрокаТбл.Количество;
			СтрокаТары.КоличествоУпаковокНеОтгружать =
				СкорректированноеКоличествоУпаковокНеОтгружать(Форма.ТекущаяСтрокаСканирования,
					ДопустимоеОтклонениеОтбираемыхТоваров) * СтрокаТбл.Количество;
		Иначе
			СтрокаТары = МассивСтрокТары[0];
			СтрокаТары.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано *
				СтрокаТбл.Количество;
			СтрокаТары.КоличествоУпаковокНеОтгружать = 
				СкорректированноеКоличествоУпаковокНеОтгружать(Форма.ТекущаяСтрокаСканирования,
					ДопустимоеОтклонениеОтбираемыхТоваров) * СтрокаТбл.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДЗОтсканированнаяТара, "ОтсканированнаяТара");
	
КонецПроцедуры

// Добавляет сведения о таре по отсканированному товару в таблицу отсканированных товаров.
// Вызывается после сканирования значения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ДобавитьУстановитьТаруВТоварыДляСканирования(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	
	// Получить таблицу тары отсканированного товара.
	ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(Форма.ТекущаяСтрокаСканирования.Номенклатура,
		Форма.ТекущаяСтрокаСканирования.Упаковка);
	
	ТЗТоварыДляСканирования = Форма.РеквизитФормыВЗначение("ТоварыДляСканирования");
	ТЗОстаткиТоваровВЯчейке = Форма.Объект.ОстаткиТоваровВЯчейке.Выгрузить();
	
	Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика");
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	Для Каждого СтрокаТаблицыТары Из ТаблицаТары Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицыТары);
		
		Отбор.Ячейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
		
		МассивСтрок = ТЗТоварыДляСканирования.НайтиСтроки(Отбор);
		МассивСтрокТарыОстаткиТоваров = ТЗОстаткиТоваровВЯчейке.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			// Такой тары нет в очереди на сканирование в этой ячейке, надо добавить
			// тару в таблицу для досканирования. После завершения сканирования данного товара,
			// надо предложить работнику досканировать тару. Те строки, которые не будут досканированы,
			// останутся в задании как неисполненные. Задание будет в статусе "Выполнено с ошибками".
			// Новую строку тары надо вставить после текущей строки,
			// чтобы можно было досканировать тару данного товара сразу после того как отсканирован товар.
			
			Если ПараметрыРежима.ТипЗадания = "ПроверкаОтбора" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТоваровДляСканирования = ТЗТоварыДляСканирования.Найти(1, "АктивнаяСтрока");
			
			Если СтрокаТоваровДляСканирования <> Неопределено Тогда
				
				НоваяСтрокаТары = ТЗТоварыДляСканирования.Вставить(ТЗТоварыДляСканирования.Индекс(СтрокаТоваровДляСканирования) + 1);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТары, СтрокаТаблицыТары);
				
				НоваяСтрокаТары.Ячейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
				НоваяСтрокаТары.Коэффициент = 1;
				
				НоваяСтрокаТары.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано
					* СтрокаТаблицыТары.Количество;
				
				Если (ПараметрыРежима.ТипЗадания = "Пересчет"
					Или ПараметрыРежима.ТипЗадания = "Приемка") Тогда
					
				ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
					Если (ТипЗадания = "Отбор"
							Или ТипЗадания = "Перемещение")
						И СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
						
						ОтборТоваров = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии,
							|ГоденДо");
						
					Иначе
						ОтборТоваров = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборТоваров, Форма.ТекущаяСтрокаСканирования);
					
					МассивСтрокОстаткиТоваров = ТЗОстаткиТоваровВЯчейке.НайтиСтроки(ОтборТоваров);
					
					Если МассивСтрокОстаткиТоваров.Количество() = 0 Тогда
						ИндексСтрокиТовара = 0;
					Иначе
						ИндексСтрокиТовара = ТЗОстаткиТоваровВЯчейке.Индекс(МассивСтрокОстаткиТоваров[0]);
					КонецЕсли;
					
					Если МассивСтрокТарыОстаткиТоваров.Количество() = 0 Тогда
						НоваяСтрокаОстатков = ТЗОстаткиТоваровВЯчейке.Вставить(ИндексСтрокиТовара + 1);
						
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОстатков, СтрокаТаблицыТары);
						
						УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(НоваяСтрокаОстатков);
						НоваяСтрокаОстатков.ПредставлениеСерии = УстановитьПредставлениеСерии(Форма.ТекущаяСтрокаСканирования);
						
						НоваяСтрокаОстатков.Ячейка = ОтборТоваров.Ячейка;
						НоваяСтрокаОстатков.КоличествоОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано
							* СтрокаТаблицыТары.Количество;
					Иначе
						МассивСтрокТарыОстаткиТоваров[0].КоличествоОтсканировано = МассивСтрокТарыОстаткиТоваров[0].Количество
							+ Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано * СтрокаТаблицыТары.Количество;
							
						ИндексСтрокиТары = ТЗОстаткиТоваровВЯчейке.Индекс(МассивСтрокТарыОстаткиТоваров[0]);
						КоличествоСтрокСмещения = ИндексСтрокиТары - ИндексСтрокиТовара - 1;
						ТЗОстаткиТоваровВЯчейке.Сдвинуть(МассивСтрокТарыОстаткиТоваров[0], -КоличествоСтрокСмещения);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// В таблице тары могут находиться строки с уже отсканированной тарой,
			// надо распределить отсканированнное количество товара на строки с 
			// неотсканированной тарой.
			
			Если ПараметрыРежима.ТипЗадания = "ПроверкаОтбора"
				И СерииУказываютсяСправочно(МассивСтрок[0].СтатусУказанияСерий) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Индекс = 0;
			КоличествоДляРаспределения = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано * СтрокаТаблицыТары.Количество;
			
			Пока КоличествоДляРаспределения > 0 И Не (Индекс > МассивСтрок.ВГраница()) Цикл
				
				СтрокаТары = МассивСтрок[Индекс];
				
				Если СтрокаТары.КоличествоУпаковокОтсканировано < СтрокаТары.КоличествоУпаковокВДокументе Тогда
					
					СтрокаТары.Коэффициент = 1;
					СтрокаТары.КоличествоУпаковокОтсканировано = СтрокаТары.КоличествоУпаковокОтсканировано + 
							Мин(СтрокаТары.КоличествоУпаковокВДокументе, КоличествоДляРаспределения);
					
					Если Не СтрокаТары.НеОтгружать = 1 Тогда
						СтрокаТары.КоличествоУпаковокНеОтгружать =
							СкорректированноеКоличествоУпаковокНеОтгружать(Форма.ТекущаяСтрокаСканирования, ДопустимоеОтклонениеОтбираемыхТоваров) *
								СтрокаТаблицыТары.Количество;
					КонецЕсли;
					
					КоличествоДляРаспределения = КоличествоДляРаспределения - СтрокаТары.КоличествоУпаковокОтсканировано;
					
					Если (ПараметрыРежима.ТипЗадания = "Пересчет" 
						Или ПараметрыРежима.ТипЗадания = "ПроверкаОтбора"
						Или ПараметрыРежима.ТипЗадания = "Приемка") Тогда
						// Для складских заданий "Пересчет", "Приемка" и "Проверка отбора" не предусмотрен вывод информации о товарах,
						// обрабатываемых в соответствии с заданием, при работе обработки с разрешением "480х640".
					ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
						
						Если (ТипЗадания = "Отбор"
								Или ТипЗадания = "Перемещение")
							И СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
							
							ОтборТоваров = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии,
								|ГоденДо");
							
						Иначе
							ОтборТоваров = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтборТоваров, Форма.ТекущаяСтрокаСканирования);
						
						МассивСтрокОстаткиТоваров = ТЗОстаткиТоваровВЯчейке.НайтиСтроки(ОтборТоваров);
						
						Если МассивСтрокОстаткиТоваров.Количество() = 0 Тогда
							ИндексСтрокиТовара = 0;
						Иначе
							ИндексСтрокиТовара = ТЗОстаткиТоваровВЯчейке.Индекс(МассивСтрокОстаткиТоваров[0]);
						КонецЕсли;
						
						Если МассивСтрокТарыОстаткиТоваров.Количество() = 0 Тогда
							НоваяСтрокаОстатков = ТЗОстаткиТоваровВЯчейке.Вставить(ИндексСтрокиТовара + 1);
							
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОстатков, СтрокаТаблицыТары);
							
							УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(НоваяСтрокаОстатков);
							НоваяСтрокаОстатков.ПредставлениеСерии = УстановитьПредставлениеСерии(Форма.ТекущаяСтрокаСканирования);
							
							НоваяСтрокаОстатков.Ячейка = ОтборТоваров.Ячейка;
							НоваяСтрокаОстатков.КоличествоОтсканировано = СтрокаТары.КоличествоУпаковокОтсканировано;
						Иначе
							МассивСтрокТарыОстаткиТоваров[0].КоличествоОтсканировано = 
								МассивСтрокТарыОстаткиТоваров[0].Количество + СтрокаТары.КоличествоУпаковокОтсканировано;
								
							ИндексСтрокиТары = ТЗОстаткиТоваровВЯчейке.Индекс(МассивСтрокТарыОстаткиТоваров[0]);
							КоличествоСтрокСмещения = ИндексСтрокиТары - ИндексСтрокиТовара - 1;
							ТЗОстаткиТоваровВЯчейке.Сдвинуть(МассивСтрокТарыОстаткиТоваров[0], -КоличествоСтрокСмещения);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			// Отсканировано большее количество тары чем товара, надо добавить строку тары с нераспределенным количеством.
			Если КоличествоДляРаспределения > 0 Тогда
				
				СтрокаТоваровДляСканирования = ТЗТоварыДляСканирования.Найти(1, "АктивнаяСтрока");
				
				Если СтрокаТоваровДляСканирования <> Неопределено Тогда
					
					НоваяСтрокаТары = ТЗТоварыДляСканирования.Вставить(ТЗТоварыДляСканирования.Индекс(СтрокаТоваровДляСканирования) + 1);
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТары, СтрокаТаблицыТары);
					
					НоваяСтрокаТары.Ячейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
					НоваяСтрокаТары.Коэффициент = 1;
					
					НоваяСтрокаТары.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано *
						СтрокаТаблицыТары.Количество;
					НоваяСтрокаТары.КоличествоУпаковокНеОтгружать = СтрокаТаблицыТары.Количество *
						СкорректированноеКоличествоУпаковокНеОтгружать(НоваяСтрокаТары, ДопустимоеОтклонениеОтбираемыхТоваров);
					
					Если (ПараметрыРежима.ТипЗадания = "Пересчет" 
						Или ПараметрыРежима.ТипЗадания = "ПроверкаОтбора"
						Или ПараметрыРежима.ТипЗадания = "Приемка") Тогда
						
					ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
						Если (ТипЗадания = "Отбор"
								Или ТипЗадания = "Перемещение")
							И СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
							
							ОтборТоваров = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии,
								|ГоденДо");
							
						Иначе
							ОтборТоваров = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтборТоваров, Форма.ТекущаяСтрокаСканирования);
						
						МассивСтрокОстаткиТоваров = ТЗОстаткиТоваровВЯчейке.НайтиСтроки(ОтборТоваров);
						
						Если МассивСтрокОстаткиТоваров.Количество() = 0 Тогда
							ИндексСтрокиТовара = 0;
						Иначе
							ИндексСтрокиТовара = ТЗОстаткиТоваровВЯчейке.Индекс(МассивСтрокОстаткиТоваров[0]);
						КонецЕсли;
						
						Если МассивСтрокТарыОстаткиТоваров.Количество() = 0 Тогда
							НоваяСтрокаОстатков = ТЗОстаткиТоваровВЯчейке.Вставить(ИндексСтрокиТовара + 1);
							ЗаполнитьЗначенияСвойств(НоваяСтрокаОстатков, СтрокаТаблицыТары);
							
							УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(НоваяСтрокаОстатков);
							НоваяСтрокаОстатков.ПредставлениеСерии = УстановитьПредставлениеСерии(Форма.ТекущаяСтрокаСканирования);
							
							НоваяСтрокаОстатков.Ячейка = ОтборТоваров.Ячейка;
							НоваяСтрокаОстатков.КоличествоОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано *
								СтрокаТаблицыТары.Количество;
						Иначе
							МассивСтрокТарыОстаткиТоваров[0].КоличествоОтсканировано = МассивСтрокТарыОстаткиТоваров[0].Количество +
								Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано * СтрокаТаблицыТары.Количество;
								
							ИндексСтрокиТары = ТЗОстаткиТоваровВЯчейке.Индекс(МассивСтрокТарыОстаткиТоваров[0]);
							КоличествоСтрокСмещения = ИндексСтрокиТары - ИндексСтрокиТовара - 1;
							ТЗОстаткиТоваровВЯчейке.Сдвинуть(МассивСтрокТарыОстаткиТоваров[0], -КоличествоСтрокСмещения);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ТЗТоварыДляСканирования, "ТоварыДляСканирования");
	ЗначениеВДанныеФормы(ТЗОстаткиТоваровВЯчейке, Форма.Объект.ОстаткиТоваровВЯчейке);
	
	// Поскольку изменилось количество строк в таблице товаров для сканирования,
	// требуется пересчитать служебную информацию - количество товаров в ячейке.
	ЗаполнитьСлужебнуюИнформациюТоваровДляСканирования(Форма);
	
КонецПроцедуры

// В зависимости от типа задания добавляет отсканированную тару в таблицу тары или в таблицу товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ДобавитьТаруПоОтсканированномуТовару(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	ЭтоТовар = ЭтоТовар(Форма.ТекущаяСтрокаСканирования);
	ЭтоПересчет = (ТипЗадания = "Пересчет");
	
	Если Не Форма.ИспользоватьМногооборотнуюТару Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоТовар Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		ДобавитьТаруВОтсканированнуюТару(Форма);
	Иначе
		ДобавитьУстановитьТаруВТоварыДляСканирования(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе к параметру сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 	* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
// 		** СканированиеВвестиКоличество - КнопкаФормы - кнопка, выполняющая открытие формы ввода количества товаров.
//
Процедура ПриПереходеКПараметруСканирования(Форма)
	
	Элементы = Форма.Элементы;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если ТипЗадания = "Размещение" Тогда
		
		Элементы.СканированиеВвестиКоличество.Доступность = Истина;
		
		Если Не ЭтоНаборТоваров
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если Не (ПараметрСканирования = "Ячейка"
				Или ПараметрСканирования = "Количество") Тогда
				
				Элементы.СканированиеВвестиКоличество.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущим следующий параметр сканирования из очереди сканирования параметров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКСледующемуПараметруСканирования(Форма)
	
	ПараметрСканирования  = Форма.ПараметрыРежима.ПараметрСканирования;
	ПараметрыСканирования = Форма.ПараметрыСканирования;
	
	ВГраница = (ПараметрыСканирования.Количество() - 1);
	
	НачалоСканирования = Ложь;
	Если Не ЗначениеЗаполнено(ПараметрСканирования) Тогда
		НачалоСканирования = Истина;
		ИндексПараметраСканирования = 0;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяПараметра", ПараметрСканирования);
	
	МассивСтрок = ПараметрыСканирования.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		ИндексПараметраСканирования = 0;
	Иначе
		ИндексПараметраСканирования = ПараметрыСканирования.Индекс(МассивСтрок[0]);
	КонецЕсли;
	
	Если ИндексПараметраСканирования = ВГраница Тогда
		ИндексПараметраСканирования = 0;
	Иначе
		Если Не НачалоСканирования Тогда
			ИндексПараметраСканирования = ИндексПараметраСканирования + 1;
		КонецЕсли;
	КонецЕсли;
	
	Пока Не ПараметрыСканирования[ИндексПараметраСканирования].Сканировать
		И Не (ИндексПараметраСканирования > ВГраница) Цикл
		
		ИндексПараметраСканирования = ИндексПараметраСканирования + 1;
		
		Если ИндексПараметраСканирования > ВГраница Тогда
			ИндексПараметраСканирования = 0;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ПараметрыРежима.ПараметрСканирования = ПараметрыСканирования[ИндексПараметраСканирования].ИмяПараметра;
	
	ПриПереходеКПараметруСканирования(Форма);
	
КонецПроцедуры

// Устанавливает отсканированное количество упаковок в таблице отсканированных товаров.
// Вызывается каждый раз при изменении количества отсканированных товаров - сканирование штрихкода,
// или ввод количества вручную.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
// 	* ОтсканированныеТовары - ДанныеФормыКоллекция - таблица со сведениями об отсканированных товарах.
//	ДобавлятьВОтсканированныеТовары - Булево - признак необходимости добавления данных в ТЗ <ОтсканированныеТовары>.
//  ДобавляемоеКоличество - Число - количество товаров которое будет использовано при добавлении строки в ТЗ <ОтсканированныеТовары>.
//  ЭтоВыборНазначения - Булево
//
Процедура УстановитьОтсканированноеКоличествоТовара(Форма, ДобавлятьВОтсканированныеТовары = Истина,
	ДобавляемоеКоличество = 1, ЭтоВыборНазначения = Ложь)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ЭтоРазмещение = (ТипЗадания = "Размещение");
	ЭтоПриемка = (ТипЗадания = "Приемка");
	ЭтоПересчет = (ТипЗадания = "Пересчет");
	
	Если ЭтоНаборТоваров
		И (ЭтоРазмещение 
			Или ЭтоПриемка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоПересчет Тогда
		Возврат;
	КонецЕсли;
	
	Если СерияТовараЕстьВЗадании(Форма, Форма.ТекущаяСтрокаСканирования, Форма.ТекущаяСтрокаСканирования.Серия)
		Или СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий)
		И ТоварЕстьВЗадании(Форма, Форма.ТекущаяСтрокаСканирования) Тогда
		
		Если ТипЗадания = "ПроверкаОтбора"
			И Не ТоварЕстьВЗадании(Форма, Форма.ТекущаяСтрокаСканирования) Тогда
			// Не требуется установка обработанного количества для товаров из списка заданий "Проверка отбора".
		Иначе
			Отбор = Новый Структура("АктивнаяСтрока", 1);
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], ТекущаяСтрокаСканирования, 
				"КоличествоУпаковокОтсканировано, КоличествоУпаковокНеОтгружать");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКоличествоОстатковВОстаткиТоваровВЯчейке(Форма, ДобавляемоеКоличество);
	
	Если ДобавлятьВОтсканированныеТовары Тогда
		
		Если СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий) 
			И (ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНомерСерии)
				Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкГоденДо)) Тогда
			
			СтрокаТбл = ОтсканированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТбл, ТекущаяСтрокаСканирования);
			
			СтрокаТбл.Серия = ТекущаяСтрокаСканирования.СкСерия;
			Если ДобавляемоеКоличество = 1 Тогда
				СтрокаТбл.КоличествоУпаковокОтсканировано = 1;
			Иначе
				СтрокаТбл.КоличествоУпаковокОтсканировано = ДобавляемоеКоличество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает в переданные переменные строки - описания действий складских заданий
// в нужном падеже. Используется при формировании текстов вопросов, предупреждений.
//
// Параметры:
//	ТипЗадания - Строка - тип задания,
//	ТипДействия - Неопределено - переменная в которую записывается тип действия,
//	ТипВыполнения - Неопределено - переменная в которую записывается тип выполнения.
//
Процедура ПолучитьТипВыполненияДействия(ТипЗадания, ТипДействия, ТипВыполнения)
	
	Если ТипЗадания = "Отбор" Тогда
		
		ТипВыполнения = НСтр("ru = 'отбора'");
		ТипДействия = НСтр("ru = 'отбор'");
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТипВыполнения = НСтр("ru = 'размещения'");
		ТипДействия = НСтр("ru = 'размещение'");
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ТипВыполнения = НСтр("ru = 'перемещения'");
		ТипДействия = НСтр("ru = 'перемещение'");
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТипВыполнения = НСтр("ru = 'пересчета'");
		ТипДействия = НСтр("ru = 'пересчет'");
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТипВыполнения = НСтр("ru = 'проверки отбора'");
		ТипДействия = НСтр("ru = 'проверку отбора'");
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТипВыполнения = НСтр("ru = 'приемки'");
		ТипДействия = НСтр("ru = 'приемку'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли текущая строка сканирования последней строкой в очереди сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина, если сканируемая строка товара является последней в складском задании.
//
Функция ЭтоПоследняяСтрокаСканирования(Форма)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("АктивнаяСтрока", 1);
	
	МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВГраница = ТоварыДляСканирования.Количество() - 1;
	
	Возврат (ТоварыДляСканирования.Индекс(МассивСтрок[0]) = ВГраница);
	
КонецФункции

// Переключает процесс сканирования на следующую ячейку. Используется, например при пересчете товаров,
// когда сканирование товаров в какой-либо ячейке выполнено и нужно перейти к следующей.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ДобратьТовары - Булево
//
Процедура ПерейтиКСледующейЯчейке(Форма, ДобратьТовары = Ложь)
	
	Элементы = Форма.Элементы;
	РежимВебСервиса = Форма.РежимВебсервиса;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	
	Если Форма.ТекущаяСтрокаСканирования = Неопределено Тогда
		
		Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
		
		Если ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
			СледЯчейка = ТоварыДляСканирования[0];
			ПараметрыРежима.ПараметрСканирования = "Ячейка";
			
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледЯчейка, "Ячейка, КодЯчейки, КоличествоЯчеек, НомерЯчейки");
		КонецЕсли;
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			
			Отбор = Новый Структура("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			
			МассивСтрок = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 0 Тогда
				СледЯчейка = ЯчейкиДляСканирования[0];
			Иначе
				ТекЯчейка = МассивСтрок[0];
				ТекЯчейка.Отсканирована = 1;
				СледЯчейка = ЯчейкиДляСканирования[ЯчейкиДляСканирования.Индекс(ТекЯчейка) + 1];
			КонецЕсли;
			
			ТЗОтсканированныеТовары = Форма.РеквизитФормыВЗначение("ОтсканированныеТовары");
			
			// Если отсканировали ячейку, но не отсканировали номенклатуру, значит ячейка - пустая.
			// Запишем пустую ячейку или найдем неотсканированную номенклатуру в этой ячейке и
			// запишем ее с нулевым остатком.
			Если ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкЯчейка)
				И Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
				
				ТЗТоварыДляСканирования = Форма.РеквизитФормыВЗначение("ТоварыДляСканирования");
				
				МассивТоваровДляСканированияПоТекущейЯчейке = ТЗТоварыДляСканирования.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаМассива Из МассивТоваровДляСканированияПоТекущейЯчейке Цикл
					НоваяСтрока = ТЗОтсканированныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива, , "КоличествоУпаковокОтсканировано");
				КонецЦикла;
				
				// Если отсканировали хоть какую-нибудь номенклатуру, тогда в текущей ячейке найдем номенклатуру,
				// которую планировалось отсканировать, но не отсканировали, и запишем ее с нулевым остатком.
			ИначеЕсли ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкЯчейка)
				И ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
				
				ТЗТоварыДляСканирования = Форма.РеквизитФормыВЗначение("ТоварыДляСканирования");
				
				МассивТоваровДляСканированияПоТекущейЯчейке = ТЗТоварыДляСканирования.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаМассиваТоваровДляСканирования Из МассивТоваровДляСканированияПоТекущейЯчейке Цикл
					
					Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаМассиваТоваровДляСканирования);
					
					МассивСтрок = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
					
					Если МассивСтрок.Количество() = 0 Тогда
						НоваяСтрока = ТЗОтсканированныеТовары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассиваТоваровДляСканирования, , "КоличествоУпаковокОтсканировано");
					Иначе
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Форма.ЗначениеВРеквизитФормы(ТЗОтсканированныеТовары, "ОтсканированныеТовары");
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледЯчейка, "Ячейка, КоличествоЯчеек, НомерЯчейки");
			
			Если РежимВебСервиса Тогда
				Отбор = Новый Структура("Ячейка", СледЯчейка.Ячейка);
				МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
				
				Форма.ТекущаяСтрокаСканирования.КодЯчейки = МассивСтрок[0].КодЯчейки;
			КонецЕсли;
			
			ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, Форма.ТекущаяСтрокаСканирования);
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Отбор = Новый Структура("АктивнаяСтрока", 1);
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				Если МассивСтрок[0].КоличествоУпаковок <> 0 Тогда
					ДобавитьТаруПоОтсканированномуТовару(Форма);
				КонецЕсли;
			Иначе
				ДобавитьТаруПоОтсканированномуТовару(Форма);
			КонецЕсли;
			
			Если ДобратьТовары Тогда
				ДополнитьНеОтобраннымиТоварамиТаблицуДляСканированияТоваров(Форма, Истина);
			КонецЕсли;
			
			Отбор = Новый Структура("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			МассивСтрок = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
			
			ТекЯчейка = МассивСтрок[0];
			ТекЯчейка.Отсканирована = 1;
			
			Отбор = Новый Структура("Ячейка", ЯчейкиДляСканирования[ЯчейкиДляСканирования.Индекс(ТекЯчейка) + 1].Ячейка);
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			СледСтрокаСканирования = МассивСтрок[0];
			
			СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
			УстановитьАктивностьСтрокиСканирования(СледСтрокаСканирования);
			
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледСтрокаСканирования);
			
			ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, Форма.ТекущаяСтрокаСканирования);
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			ДобавитьТаруПоОтсканированномуТовару(Форма);
			
			Отбор = Новый Структура("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			МассивСтрок = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
			
			ТекЯчейка = МассивСтрок[0];
			ТекЯчейка.Отсканирована = 1;
			
			Отбор = Новый Структура("Ячейка", ЯчейкиДляСканирования[ЯчейкиДляСканирования.Индекс(ТекЯчейка) + 1].Ячейка);
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			СледСтрокаСканирования = МассивСтрок[0];
			
			СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
			УстановитьАктивностьСтрокиСканирования(СледСтрокаСканирования);
			
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледСтрокаСканирования);
			
			ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, Форма.ТекущаяСтрокаСканирования);
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		Иначе
			
			Отбор = Новый Структура("АктивнаяСтрока", 1);
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				Если МассивСтрок[0].КоличествоУпаковок <> 0 Тогда
					ДобавитьТаруПоОтсканированномуТовару(Форма);
				КонецЕсли;
			Иначе
				ДобавитьТаруПоОтсканированномуТовару(Форма);
			КонецЕсли;
			
			Если ДобратьТовары Тогда
				ДополнитьНеОтобраннымиТоварамиТаблицуДляСканированияТоваров(Форма, Истина);
			КонецЕсли;
			
			Отбор = Новый Структура("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			МассивСтрок = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
			
			ТекЯчейка = МассивСтрок[0];
			ТекЯчейка.Отсканирована = 1;
			
			Отбор = Новый Структура("Ячейка", ЯчейкиДляСканирования[ЯчейкиДляСканирования.Индекс(ТекЯчейка) + 1].Ячейка);
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			СледСтрокаСканирования = МассивСтрок[0];
			
			СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
			УстановитьАктивностьСтрокиСканирования(СледСтрокаСканирования);
			
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледСтрокаСканирования);
			
			ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, Форма.ТекущаяСтрокаСканирования);
			
			СброситьПризнакиСканированияВсехПараметров(Форма);
			УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Истина);
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница <> Элементы.СтраницаСканирование Тогда
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	КонецЕсли;
	
КонецПроцедуры

// Позиционирует очередь сканирования на ближайшую неотсканированную строку
// в таблице товаров для сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиКБлижайшейНеОтсканированнойСтрокеТоваров(Форма)
	
	СтрокаНайдена = Ложь;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Для каждого СтрокаТбл Из ТоварыДляСканирования Цикл
		Если СтрокаТбл.КоличествоУпаковокОтсканировано <> СтрокаТбл.КоличествоУпаковокВДокументе Тогда
			СтрокаНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокаНайдена Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СтрокаТбл);
	ОчиститьПоляОтсканированногоТовара(ТекущаяСтрокаСканирования);
	СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
	УстановитьАктивностьСтрокиСканирования(СтрокаТбл);
	
	ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
	
	УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий));
	
	Форма.ТекущаяСтрокаСканирования = ТекущаяСтрокаСканирования;
	
КонецПроцедуры

// Считывает данные следующей строки списка для сканирования и загружает их в структуру
// текущей строки сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ДобратьТовары - Булево
//
Процедура ПерейтиКСледующейСтрокеСканированияЗадания(Форма, ДобратьТовары = Ложь)
	
	Штрихкод = "";
	КоличествоПоШтрихкоду = 0;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		
		Индекс = 0;
		
		СледСтрокаСканирования = ТоварыДляСканирования[Индекс];
		
		// Найти следующую не отсканированную строку в очереди сканирования.
		Пока (СтрокаЗаданияОтсканирована(СледСтрокаСканирования, Форма.ПараметрыРежима, ДопустимоеОтклонениеОтбираемыхТоваров))
			И (Индекс < ТоварыДляСканирования.Количество() - 1) Цикл
			
			Индекс = Индекс + 1;
			СледСтрокаСканирования = ТоварыДляСканирования[Индекс];
			
		КонецЦикла;
		
		ЯчейкаНеИзменилась = Ложь;
		НоменклатураНеИзменилась = Ложь;
		
	Иначе
		
		Штрихкод = ТекущаяСтрокаСканирования.Штрихкод;
		КоличествоПоШтрихкоду = ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду;
		
		Если Не ТипЗадания = "ПроверкаОтбора" Тогда
			ДобавитьТаруПоОтсканированномуТовару(Форма);
		КонецЕсли;
		
		Если ДобратьТовары Тогда
			ДополнитьНеОтобраннымиТоварамиТаблицуДляСканированияТоваров(Форма, Ложь);
		КонецЕсли;
		
		// После добавления тары, все строки задания могут оказаться выполненными.
		Если ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			ПриЗавершенииСканированияТекущегоЗадания(Форма);
			Возврат;
		КонецЕсли;
		
		Отбор = Новый Структура("АктивнаяСтрока", 1);
		
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Индекс = 0;
		Иначе
			Индекс = ТоварыДляСканирования.Индекс(МассивСтрок[0]) + 1;
		КонецЕсли;
		
		СледСтрокаСканирования = ТоварыДляСканирования[Индекс];
		
		// Найти следующую не отсканированную строку в очереди сканирования.
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
			ОтборТовара = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
			ЗаполнитьЗначенияСвойств(ОтборТовара, ТекущаяСтрокаСканирования);
			
			МассивСтрокСкНоменклатуры = ТоварыДляСканирования.НайтиСтроки(ОтборТовара);
			Если МассивСтрокСкНоменклатуры.Количество() > 0 Тогда
				ИндексСтроки = МассивСтрокСкНоменклатуры.Количество() - 1;
				СтрокаСкНоменклатуры = МассивСтрокСкНоменклатуры[ИндексСтроки];
				
				Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
					Индекс = ТоварыДляСканирования.Индекс(СтрокаСкНоменклатуры);
					Если Индекс < (ТоварыДляСканирования.Количество() - 1) Тогда
						СледСтрокаСканирования = ТоварыДляСканирования[Индекс + 1];
					Иначе
						СледСтрокаСканирования = ТоварыДляСканирования[Индекс];
					КонецЕсли;
				Иначе
					Индекс = ТоварыДляСканирования.Индекс(СтрокаСкНоменклатуры);
					Если Индекс < (ТоварыДляСканирования.Количество() - 1) Тогда
						СледСтрокаСканирования = ТоварыДляСканирования[Индекс + 1];
					Иначе
						СледСтрокаСканирования = ТоварыДляСканирования[Индекс];
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Пока (СтрокаЗаданияОтсканирована(СледСтрокаСканирования, Форма.ПараметрыРежима, ДопустимоеОтклонениеОтбираемыхТоваров))
			И (Индекс < ТоварыДляСканирования.Количество() - 1) Цикл
			
			Индекс = Индекс + 1;
			СледСтрокаСканирования = ТоварыДляСканирования[Индекс];
			
		КонецЦикла;
		
		Если (Индекс = (ТоварыДляСканирования.Количество() - 1))
			И (СледСтрокаСканирования.КоличествоУпаковок = СледСтрокаСканирования.КоличествоУпаковокОтсканировано) Тогда
			
			ПриЗавершенииСканированияТекущегоЗадания(Форма);
			Возврат;
			
		КонецЕсли;
		
		// Определить признаки - изменилась ли ячейка, номенклатура, серия по сравнению с предыдущей строкой.
		ЯчейкаНеИзменилась = (ТекущаяСтрокаСканирования.СкЯчейка = СледСтрокаСканирования.Ячейка);
		
		НоменклатураНеИзменилась = (ТекущаяСтрокаСканирования.СкНоменклатура = СледСтрокаСканирования.Номенклатура)
			И (ТекущаяСтрокаСканирования.СкХарактеристика = СледСтрокаСканирования.Характеристика)
			И (ТекущаяСтрокаСканирования.СкУпаковка = СледСтрокаСканирования.Упаковка);
		
	КонецЕсли;
	
	Если (ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке = ТекущаяСтрокаСканирования.НомерТовараВЯчейке)
		И Не ЭтоПоследняяЯчейка(Форма) Тогда
		
		Отбор = Новый Структура("Ячейка", ТекущаяСтрокаСканирования.Ячейка);
		МассивСтрок = Форма.ЯчейкиДляСканирования.НайтиСтроки(Отбор);
		
		ТекущаяЯчейка = МассивСтрок[0];
		ТекущаяЯчейка.Отсканирована = 1;
		
	КонецЕсли;
	
	СброситьОтметкуАктивнойСтрокиТоваровСканирования(ТоварыДляСканирования);
	УстановитьАктивностьСтрокиСканирования(СледСтрокаСканирования);
	
	ТекущаяСтрокаСканирования = СтрокаСканирования();
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СледСтрокаСканирования);
	
	ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, ТекущаяСтрокаСканирования);
	
	// Установить отсканированные поля, если они не изменились по сравнению с предыдущей строкой.
	ТекущаяСтрокаСканирования.СкЯчейка = ?(ЯчейкаНеИзменилась, ТекущаяСтрокаСканирования.Ячейка,
		Справочники.СкладскиеЯчейки.ПустаяСсылка());
	
	ТекущаяСтрокаСканирования.СкНоменклатура = ?(НоменклатураНеИзменилась, ТекущаяСтрокаСканирования.Номенклатура,
		Справочники.Номенклатура.ПустаяСсылка());
	
	ТекущаяСтрокаСканирования.СкХарактеристика = ?(НоменклатураНеИзменилась, ТекущаяСтрокаСканирования.Характеристика,
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	ТекущаяСтрокаСканирования.СкУпаковка = ?(НоменклатураНеИзменилась, ТекущаяСтрокаСканирования.Упаковка,
		Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	ТекущаяСтрокаСканирования.Штрихкод = ?(НоменклатураНеИзменилась, Штрихкод, "");
	ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду = ?(НоменклатураНеИзменилась, КоличествоПоШтрихкоду, 0);
	
	Форма.ТекущаяСтрокаСканирования = ТекущаяСтрокаСканирования;
	
	// Настроить параметры сканирования.
	СброситьПризнакиСканированияВсехПараметров(Форма);
	Форма.ПараметрыРежима.ПараметрСканирования = "";
	
	УстановитьПризнакСканированияПараметра(Форма, "Ячейка", Не ЯчейкаНеИзменилась);
	УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", ?(ЯчейкаНеИзменилась, Не НоменклатураНеИзменилась, Истина));
	УстановитьПризнакСканированияПараметра(Форма, "Серия", СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий));
	
	ПерейтиКСледующемуПараметруСканирования(Форма);
	
	Если Не (Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаСканирование) Тогда
		ПерейтиНаСтраницу(Форма, "СтраницаСканирование");
		Форма.ТекущийЭлемент = ?(ТипЗадания = "Приемка"
									Или ТипЗадания = "ПроверкаОтбора",
								Форма.Элементы.СканированиеТовар,
								Форма.Элементы.СканированиеЯчейка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает общие сведения о количестве строк и ячеек в табличных частях складского задания.
// Значения параметров товара используются при формировании заголовков надписей на элементах сканирования и расчете
// прогресса исполнения задания.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
// 	Структура - описание параметров товара складского задания, которое содержит следующие поля:
//	* КоличествоУпаковокПересчета - Число - количество упаковок товара к пересчету в складской ячейке.
//	* КоличествоУпаковокРазмещения - Число - количество упаковок товара к размещению в складскую ячеку.
//	* КоличествоУпаковокОтбора - Число - количество упаковок товара к отбору из складской ячейке.
//	* КоличествоЯчеекПересчета - Число - количество складских ячеек, в которых требуется выполнить пересчет товаров.
//	* КоличествоЯчеекРазмещения - Число - количество складских ячеек, в которые требуется разместить товары.
//	* КоличествоЯчеекОтбора - Число - количество складских ячеек, из которых требуется отобрать товары.
//	* КоличествоСтрокПересчета - Число - количество строк пересчитываемых товаров в соответствии с первоначальным
//											складским заданием.
//	* КоличествоСтрокРазмещения - Число - количество строк размещаемых товаров в соответствии с первоначальным
//											складским заданием.
//	* КоличествоСтрокОтбора - Число - количество строк отбираемых товаров в соответствии с первоначальным
//										складским заданием.
//
Функция ПараметрыТоваровЗадания(Форма)
	
	ОбработкаОбъект = Форма.Объект;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	// Сформировать структуру параметров товаров.
	ПараметрыТоваров = Новый Структура;
	
	ПараметрыТоваров.Вставить("КоличествоСтрокОтбора", 0);
	ПараметрыТоваров.Вставить("КоличествоСтрокРазмещения", 0);
	ПараметрыТоваров.Вставить("КоличествоСтрокПересчета", 0);
	
	ПараметрыТоваров.Вставить("КоличествоЯчеекОтбора", 0);
	ПараметрыТоваров.Вставить("КоличествоЯчеекРазмещения", 0);
	ПараметрыТоваров.Вставить("КоличествоЯчеекПересчета", 0);
	
	ПараметрыТоваров.Вставить("КоличествоУпаковокОтбора", 0);
	ПараметрыТоваров.Вставить("КоличествоУпаковокРазмещения", 0);
	ПараметрыТоваров.Вставить("КоличествоУпаковокПересчета", 0);
	
	// При выполнении приемки товаров по ордеру поведение формы аналогично
	// режиму набора товаров, поэтому данные о параметрах товаров не требуются.
	Если ТипЗадания = "Приемка" Тогда
		Возврат ПараметрыТоваров;
	КонецЕсли;
	
	ПараметрыТоваров.КоличествоСтрокОтбора = ОбработкаОбъект.ТоварыОтбор.Количество();
	ПараметрыТоваров.КоличествоСтрокРазмещения = ОбработкаОбъект.ТоварыРазмещение.Количество();
	ПараметрыТоваров.КоличествоСтрокПересчета = ОбработкаОбъект.Товары.Количество();
	
	ПараметрыТоваров.КоличествоУпаковокОтбора = ОбработкаОбъект.ТоварыОтбор.Итог("КоличествоУпаковок");
	ПараметрыТоваров.КоличествоУпаковокРазмещения = ОбработкаОбъект.ТоварыРазмещение.Итог("КоличествоУпаковок");
	ПараметрыТоваров.КоличествоУпаковокПересчета  = ОбработкаОбъект.Товары.Итог("КоличествоУпаковок");
	
	Возврат ПараметрыТоваров;
	
КонецФункции

// Вызывается при завершении выполнения набора товаров для создания нового задания на размещение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗавершитьВыполнениеЗаданияНовоеРазмещение(Форма)
	
	Объект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ДЗОтсканированнаяТара = Форма.РеквизитФормыВЗначение("ОтсканированнаяТара");
	
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	Если Не ЕстьОтсканированныеТовары Тогда
		ОтменитьВыполнениеЗадания(Форма);
		Возврат;
	КонецЕсли;
	
	Если РежимВебСервиса Тогда
		ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ЗавершитьВыполнениеЗаданияНовоеРазмещение(Форма);
	Иначе
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеЗаданияНовоеРазмещение(
			Объект.Склад, Объект.Помещение, ПараметрыРежима.ЗонаПриемки, Объект.Исполнитель, ОтсканированныеТовары,
			ДЗОтсканированнаяТара);
	КонецЕсли;
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		
		КнопкаПерейтиВОснМеню = НоваяКнопкаДиалога(
			"ПерейтиКВыборуСкладскойОперации", 
			НСтр("ru = 'Перейти к выбору операции'"));
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КнопкаПерейтиВОснМеню);
		
		ПоказатьДиалогСообщение(Форма, ПараметрыЗадания.ТекстСообщения, Кнопки);
		
	Иначе
		ПараметрыРежима.СозданноеЗадание = ПараметрыЗадания.Задание;
		ВзятьЗаданиеВРаботу(Форма, ПараметрыРежима.СозданноеЗадание);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево тары подчиненными упаковками, в том случае, если упаковки товары являются вложенными.
//
// Параметры:
//	УпаковкиСтроки - КоллекцияСтрокДереваЗначений - строки узла,
//	УпаковкаУзел - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка для которой выводятся подчиненные упаковки,
//	ТаблицаУпаковок - ТаблицаЗначений - таблица упаковок,
//	ТараДокумента - ТаблицаЗначений - таблица многооборотной тары документа,
//	ВсяТараПодобрана - Булево - признак подбора всей тары, с учетом вложенных упаковок.
//
Процедура ВывестиПодчиненныеУпаковки(УпаковкиСтроки, УпаковкаУзел, ТаблицаУпаковок, ТараДокумента, ВсяТараПодобрана)
	
	ПодчиненныеУпаковки = ТаблицаУпаковок.НайтиСтроки(Новый Структура("Родитель", УпаковкаУзел));
	КоличествоНоменклатуры = УпаковкиСтроки.Родитель.КоличествоНоменклатуры;
	КоличествоНоменклатурыКРаспределению = КоличествоНоменклатуры;
	
	Для Каждого ТекСтрока Из ПодчиненныеУпаковки Цикл
		
		НоваяСтрокаУпаковка = УпаковкиСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка, ТекСтрока);
		
		ОстатокУпаковок = Цел(КоличествоНоменклатуры % ТекСтрока.КоличествоУпаковок);
		
		НоваяСтрокаУпаковка.КоличествоНоменклатуры = НоваяСтрокаУпаковка.КоличествоНоменклатуры +
			?(ОстатокУпаковок > 0 И ОстатокУпаковок >= ТекСтрока.МинимальноеКоличествоУпаковокМногооборотнойТары, 1, 0);
		
		КоличествоТары = Цел(КоличествоНоменклатурыКРаспределению / ТекСтрока.КоличествоУпаковок);
		ОстатокТары = Цел(КоличествоНоменклатуры % ТекСтрока.КоличествоУпаковок);
		
		Если КоличествоТары > 0 Тогда
			
			НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары = КоличествоТары;
			НоваяСтрокаУпаковка.ПодобранноеКоличествоТары = НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары;
			КоличествоНоменклатурыКРаспределению = ОстатокТары;
			
		КонецЕсли;
		
		Если ТекСтрока = ПодчиненныеУпаковки[ПодчиненныеУпаковки.Количество()-1] 
			И КоличествоНоменклатурыКРаспределению > 0 Тогда
			
			НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары =
				?(ЗначениеЗаполнено(НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары), НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары, 0)
				+ ?(КоличествоНоменклатурыКРаспределению >= ТекСтрока.МинимальноеКоличествоУпаковокМногооборотнойТары, 1, 0);
			НоваяСтрокаУпаковка.ПодобранноеКоличествоТары = НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары;
			
		КонецЕсли;
		
		ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, НоваяСтрокаУпаковка, ВсяТараПодобрана);
		
		ВывестиПодчиненныеУпаковки(
			НоваяСтрокаУпаковка.Строки,
			ТекСтрока.Упаковка,
			ТаблицаУпаковок,
			ТараДокумента,
			ВсяТараПодобрана);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет колонки количества тары в таблице ТараДокумента значениями по данным о таре в документе.
//
// Параметры:
//	ТараДокумента - ТаблицаЗначений - итоговая таблица тары,
//	СтрокаДерева - СтрокаДереваЗначений - строка дерева тары,
//	ВсяТараПодобрана - Булево - признак факта заполнения всей тары.
//
Процедура ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, СтрокаДерева, ВсяТараПодобрана)
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.НоменклатураМногооборотнаяТара, "ИспользованиеХарактеристик");
	
	Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
		И Не ЗначениеЗаполнено(СтрокаДерева.ХарактеристикаМногооборотнаяТара) Тогда
		
		ТараДокументаСтроки = ТараДокумента.НайтиСтроки(
			Новый Структура(
				"Номенклатура, Склад, Дата",
				СтрокаДерева.НоменклатураМногооборотнаяТара,
				СтрокаДерева.Склад,
				СтрокаДерева.Дата));
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура", СтрокаДерева.НоменклатураМногооборотнаяТара);
		Отбор.Вставить("Характеристика", СтрокаДерева.ХарактеристикаМногооборотнаяТара);
		Отбор.Вставить("Склад", СтрокаДерева.Склад);
		Отбор.Вставить("Дата", СтрокаДерева.Дата);
		
		ТараДокументаСтроки = ТараДокумента.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	Если ТараДокументаСтроки.Количество() > 0 
		И ТараДокументаСтроки[0].КоличествоТары > 0 Тогда
		
		СтрокаДерева.КоличествоТарыВДокументе = Мин(СтрокаДерева.РекомендуемоеКоличествоТары, ТараДокументаСтроки[0].КоличествоТары);
		ТараДокументаСтроки[0].КоличествоТары = ТараДокументаСтроки[0].КоличествоТары - СтрокаДерева.КоличествоТарыВДокументе;
		ТараДокументаСтроки[0].СтрокаДерева = СтрокаДерева;
		
	КонецЕсли;
	
	Если СтрокаДерева.КоличествоТарыВДокументе <> СтрокаДерева.ПодобранноеКоличествоТары Тогда
		
		СтрокаДерева.Выбрана = Истина;
		ВсяТараПодобрана = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет подобранную тару в итоговую таблицу тары.
//
// Параметры:
//	СтрокиДерева - КоллекцияСтрокДереваЗначений - строки дерева тары,
//	ТаблицаТары - ТаблицаЗначений - итоговая таблица тары.
//
Процедура ДобавитьПодобраннуюТаруВТаблицу(СтрокиДерева, ТаблицаТары)
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		
		Если ТекСтрока.Выбрана Тогда
			
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураМногооборотнаяТара) Тогда
				
				НоваяСтрока = ТаблицаТары.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.НоменклатураМногооборотнаяТара;
				НоваяСтрока.Характеристика = ТекСтрока.ХарактеристикаМногооборотнаяТара;
				НоваяСтрока.Количество = ТекСтрока.ПодобранноеКоличествоТары;
				НоваяСтрока.Склад = ТекСтрока.Склад;
				НоваяСтрока.Дата = ТекСтрока.Дата;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьПодобраннуюТаруВТаблицу(ТекСтрока.Строки, ТаблицаТары);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу "ОтсканированныеТовары" многооборотной тарой.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Объект - ДокументОбъект.ПриходныйОрдерНаТовары - приходный ордер.
//
Процедура ДополнитьМногооборотнойТарой(Форма, Объект)
	
	Если Не Форма.ИспользоватьМногооборотнуюТару Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьСклад = Ложь;
	ИспользоватьДату = Ложь;
	
	// Получить таблицу товаров документа.
	ТоварыДокумента = Объект.Товары.Выгрузить();
	
	ТоварыДокумента = Новый ТаблицаЗначений();
	ТоварыДокумента.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыДокумента.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТоварыДокумента.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТоварыДокумента.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТоварыДокумента.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		НоваяСтрока = ТоварыДокумента.Добавить();
		НоваяСтрока.Номенклатура = ТекСтрока["Номенклатура"];
		НоваяСтрока.Характеристика = ТекСтрока["Характеристика"];
		НоваяСтрока.Количество = ТекСтрока["Количество"];
		
		Если ИспользоватьСклад Тогда
			НоваяСтрока.Склад = ТекСтрока["Склад"];
		КонецЕсли;
		
		Если ИспользоватьДату Тогда
			НоваяСтрока.Дата = ТекСтрока["Дата"];
		КонецЕсли;
		
	КонецЦикла;
	
	ТоварыДокумента.Свернуть("Дата, Номенклатура, Характеристика, Склад", "Количество");
	
	// Создать структуру дерева тары.
	Тара = Новый ДеревоЗначений();
	Тара.Колонки.Добавить("Номенклатура");
	Тара.Колонки.Добавить("Характеристика");
	Тара.Колонки.Добавить("РекомендуемоеКоличествоТары");
	Тара.Колонки.Добавить("ЕдиницаИзмерения");
	Тара.Колонки.Добавить("ПодобранноеКоличествоТары");
	Тара.Колонки.Добавить("КоличествоНоменклатуры");
	Тара.Колонки.Добавить("Упаковка");
	Тара.Колонки.Добавить("Выбрана", Новый ОписаниеТипов("Булево"));
	Тара.Колонки.Добавить("НоменклатураМногооборотнаяТара");
	Тара.Колонки.Добавить("ХарактеристикаМногооборотнаяТара");
	Тара.Колонки.Добавить("МинимальноеКоличествоУпаковокМногооборотнойТары");
	Тара.Колонки.Добавить("КоличествоТарыВДокументе");
	Тара.Колонки.Добавить("ДоступноеКоличествоТары");
	Тара.Колонки.Добавить("Склад");
	Тара.Колонки.Добавить("Дата");
	
	// Заполнить дерево многооборотной тары.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура       КАК Номенклатура,
	|	ТоварыДокумента.Характеристика     КАК Характеристика,
	|	ТоварыДокумента.Количество         КАК Количество,
	|	ТоварыДокумента.Склад              КАК Склад,
	|	ТоварыДокумента.Дата               КАК Дата
	|ПОМЕСТИТЬ
	|	ВтТоварыДокумента
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Количество > 0
	|;
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                  КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                КАК Характеристика,
	|	ВтТоварыДокумента.Склад                                         КАК Склад,
	|	ВтТоварыДокумента.Дата                                          КАК Дата,
	|	0                                                               КАК КоличествоНоменклатуры,
	|	ВтТоварыДокумента.Номенклатура.НоменклатураМногооборотнаяТара   КАК НоменклатураМногооборотнаяТара,
	|	ВтТоварыДокумента.Номенклатура.ХарактеристикаМногооборотнаяТара КАК ХарактеристикаМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)          КАК Упаковка,
	|	0                                                               КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|
	|ПОМЕСТИТЬ
	|	ВтТара
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ВтТоварыДокумента.Номенклатура.ПоставляетсяВМногооборотнойТаре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                  КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                КАК Характеристика,
	|	ВтТоварыДокумента.Склад                                         КАК Склад,
	|	ВтТоварыДокумента.Дата                                          КАК Дата,
	|	ВтТоварыДокумента.Количество                                    КАК КоличествоНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)                  КАК НоменклатураМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)    КАК ХарактеристикаМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)          КАК Упаковка,
	|	0                                                               КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                           КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                         КАК Характеристика,
	|	ВтТоварыДокумента.Склад                                                  КАК Склад,
	|	ВтТоварыДокумента.Дата                                                   КАК Дата,
	|	ВЫРАЗИТЬ(ВтТоварыДокумента.Количество / &ТекстЗапросаКоэффициентУпаковки1 КАК ЧИСЛО(15,0)) КАК КоличествоНоменклатуры,
	|	УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара                      КАК НоменклатураМногооборотнаяТара,
	|	УпаковкиНоменклатуры.ХарактеристикаМногооборотнаяТара                    КАК ХарактеристикаМногооборотнаяТара,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	УпаковкиНоменклатуры.МинимальноеКоличествоУпаковокМногооборотнойТары     КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ПО
	|	ВтТоварыДокумента.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|	ИЛИ (ВтТоварыДокумента.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|		И ВтТоварыДокумента.Номенклатура = УпаковкиНоменклатуры.Владелец)
	|	И УпаковкиНоменклатуры.ПоставляетсяВМногооборотнойТаре
	|	И НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|ВЫБРАТЬ
	|	втТара.Номенклатура                                                        КАК Номенклатура,
	|	втТара.Характеристика                                                      КАК Характеристика,
	|	втТара.Склад                                                               КАК Склад,
	|	втТара.Дата                                                                КАК Дата,
	|	втТара.Упаковка                                                            КАК Упаковка,
	|	ВЫБОР
	|		КОГДА
	|			втТара.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Составная)
	|		ТОГДА
	|			втТара.Упаковка.КоличествоУпаковок
	|		ИНАЧЕ
	|			&ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	втТара.Упаковка.Родитель                                                   КАК Родитель,
	|	втТара.Номенклатура.ЕдиницаИзмерения                                       КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(втТара.МинимальноеКоличествоУпаковокМногооборотнойТары)           КАК МинимальноеКоличествоУпаковокМногооборотнойТары,
	|	МАКСИМУМ(втТара.НоменклатураМногооборотнаяТара)                            КАК НоменклатураМногооборотнаяТара,
	|	МАКСИМУМ(втТара.ХарактеристикаМногооборотнаяТара)                          КАК ХарактеристикаМногооборотнаяТара,
	|	МАКСИМУМ(втТара.КоличествоНоменклатуры)                                    КАК КоличествоНоменклатуры
	|ИЗ
	|	втТара КАК втТара
	|СГРУППИРОВАТЬ ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Склад,
	|	втТара.Дата,
	|	втТара.Упаковка
	|УПОРЯДОЧИТЬ ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Склад,
	|	втТара.Дата,
	|	втТара.Упаковка
	|ИТОГИ
	|	МАКСИМУМ(НоменклатураМногооборотнаяТара),
	|	МАКСИМУМ(ХарактеристикаМногооборотнаяТара)
	|ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Склад,
	|	втТара.Дата
	|;
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура      КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика    КАК Характеристика,
	|	ВтТоварыДокумента.Склад             КАК Склад,
	|	ВтТоварыДокумента.Дата              КАК Дата,
	|	СУММА(ВтТоварыДокумента.Количество) КАК НачальноеКоличествоТары,
	|	СУММА(ВтТоварыДокумента.Количество) КАК КоличествоТары,
	|	НЕОПРЕДЕЛЕНО                        КАК СтрокаДерева
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыДокумента.Номенклатура,
	|	ВтТоварыДокумента.Характеристика,
	|	ВтТоварыДокумента.Склад,
	|	ВтТоварыДокумента.Дата
	|УПОРЯДОЧИТЬ ПО
	|	ВтТоварыДокумента.Номенклатура.Наименование,
	|	ВтТоварыДокумента.Характеристика.Наименование,
	|	ВтТоварыДокумента.Склад.Наименование,
	|	ВтТоварыДокумента.Дата
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"втТара.Упаковка",
		"втТара.Номенклатура"));
		
	Запрос.УстановитьПараметр("ТоварыДокумента", ТоварыДокумента);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[2].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУпаковок = Новый ТаблицаЗначений();
	ТаблицаУпаковок.Колонки.Добавить("Номенклатура");
	ТаблицаУпаковок.Колонки.Добавить("Характеристика");
	ТаблицаУпаковок.Колонки.Добавить("Упаковка");
	ТаблицаУпаковок.Колонки.Добавить("Родитель");
	ТаблицаУпаковок.Колонки.Добавить("КоличествоНоменклатуры");
	ТаблицаУпаковок.Колонки.Добавить("КоличествоУпаковок");
	ТаблицаУпаковок.Колонки.Добавить("НоменклатураМногооборотнаяТара");
	ТаблицаУпаковок.Колонки.Добавить("ХарактеристикаМногооборотнаяТара");
	ТаблицаУпаковок.Колонки.Добавить("МинимальноеКоличествоУпаковокМногооборотнойТары");
	
	ВсяТараПодобрана = Истина;
	
	ВыборкаНоменклатура = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТараДокумента = РезультатЗапроса[3].Выгрузить();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			ВыборкаСклады = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСклады.Следующий() Цикл
				
				ВыборкаДаты = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДаты.Следующий() Цикл
					
					ВыборкаУпаковки = ВыборкаДаты.Выбрать();
					
					ТаблицаУпаковок.Очистить();
					
					Пока ВыборкаУпаковки.Следующий() Цикл
						
						Если ЗначениеЗаполнено(ВыборкаУпаковки.Упаковка) Тогда
							
							НоваяСтрокаУпаковка = ТаблицаУпаковок.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка, ВыборкаУпаковки);
							
						Иначе
							
							НоваяСтрока = Тара.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУпаковки);
							
							Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураМногооборотнаяТара) Тогда
								
								НоваяСтрока.РекомендуемоеКоличествоТары = Цел(НоваяСтрока.КоличествоНоменклатуры);
								НоваяСтрока.ПодобранноеКоличествоТары = НоваяСтрока.РекомендуемоеКоличествоТары;
								
								ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, НоваяСтрока, ВсяТараПодобрана);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ВывестиПодчиненныеУпаковки(НоваяСтрока.Строки, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(),
						ТаблицаУпаковок, ТараДокумента, ВсяТараПодобрана);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТараДокумента Цикл
		
		Если ТекСтрока.НачальноеКоличествоТары = ТекСтрока.КоличествоТары Тогда
			
			НоваяСтрока = Тара.Строки.Добавить();
			НоваяСтрока.НоменклатураМногооборотнаяТара = ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаМногооборотнаяТара = ТекСтрока.Характеристика;
			НоваяСтрока.КоличествоТарыВДокументе = ТекСтрока.КоличествоТары;
			НоваяСтрока.Склад = ТекСтрока.Склад;
			НоваяСтрока.Дата = ТекСтрока.Дата;
			НоваяСтрока.Выбрана = Истина;
			ВсяТараПодобрана = Ложь;
			
		ИначеЕсли ТекСтрока.КоличествоТары > 0 И ТекСтрока.СтрокаДерева <> Неопределено Тогда
			
			ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе = ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе + ТекСтрока.КоличествоТары;
			
			Если ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе <> ТекСтрока.СтрокаДерева.ПодобранноеКоличествоТары Тогда
				ТекСтрока.СтрокаДерева.Выбрана = Истина;
				ВсяТараПодобрана = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Поместить тару в хранилище.
	ТаблицаТары = Новый ТаблицаЗначений();
	ТаблицаТары.Колонки.Добавить("Номенклатура");
	ТаблицаТары.Колонки.Добавить("Характеристика");
	ТаблицаТары.Колонки.Добавить("Количество");
	ТаблицаТары.Колонки.Добавить("Склад");
	ТаблицаТары.Колонки.Добавить("Дата");
	
	ДобавитьПодобраннуюТаруВТаблицу(Тара.Строки, ТаблицаТары);
	
	ТаблицаТары.Свернуть("Номенклатура,Характеристика,Склад,Дата", "Количество");
	
	АдресТарыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаТары, Форма.УникальныйИдентификатор);
	
	// Заполнить многооборотную тару из хранилища.
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
	
	ПараметрыУказанияСерийВДокументе = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерийВДокументе);
	
КонецПроцедуры

// Вызывается при завершении выполнения набора товаров при выполнении приемки товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗавершитьВыполнениеЗаданияПриемка(Форма)
	
	Задание = Форма.ПараметрыРежима.Задание;
	
	ЕстьОшибки = Ложь;
	ТребуетсяОбработка = Ложь;
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	// Если нет отсканированных товаров, то отменить выполнение задания.
	Если Не ЕстьОтсканированныеТовары Тогда
		ОтменитьВыполнениеЗадания(Форма);
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	ДокументОбъект.Товары.Очистить();
	
	Для каждого СтрокаТбл Из Форма.ОтсканированныеТовары Цикл
		
		// ... ТЧ Товары
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТбл);
		
		Если СтрокаТбл.Коэффициент <> 0 Тогда
			СтрокаТовары.Количество = СтрокаТбл.КоличествоУпаковокОтсканировано * СтрокаТбл.Коэффициент;
		Иначе
			СтрокаТовары.Количество = СтрокаТбл.КоличествоУпаковокОтсканировано;
		КонецЕсли;
		
		СтрокаТовары.КоличествоУпаковок = СтрокаТбл.КоличествоУпаковокОтсканировано;
	КонецЦикла;
	
	ДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка;
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПриходныйОрдерНаТовары);
	
	Если Форма.ИспользоватьУпаковочныеЛисты Тогда
		УпаковочныеЛисты = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("ЭтоУпаковочныйЛист",Истина));
		Форма.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
		УпаковочныеЛистыСервер.ДополнитьСтрокамиПоУпаковочнымЛистам(Форма, ДокументОбъект.Товары, УпаковочныеЛисты, ТребуетсяОбработка, Истина);
	КонецЕсли;
	
	ОтборУдаляемыхСтрок = Новый Структура("КоличествоУпаковок", 0);
	МассивУдаляемыхСтрок = ДокументОбъект.Товары.НайтиСтроки(ОтборУдаляемыхСтрок);
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ДокументОбъект.Товары.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ДополнитьМногооборотнойТарой(Форма, ДокументОбъект);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
	Если ДокументОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНеПринятыхТоваров Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыОрдера.ДокументОтгрузки  КАК ДокументОтгрузки,
		|	ТоварыОрдера.Номенклатура      КАК Номенклатура,
		|	ТоварыОрдера.Характеристика    КАК Характеристика,
		|	ТоварыОрдера.Назначение        КАК Назначение,
		|	СУММА(ТоварыОрдера.Количество) КАК Количество
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТоварыОрдера
		|ГДЕ
		|	ТоварыОрдера.Ссылка = &Ссылка
		|	И НЕ ТоварыОрдера.ЭтоУпаковочныйЛист
		|	И ТоварыОрдера.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		|	И ТоварыОрдера.Количество <> 0
		|	И ТоварыОрдера.ДокументОтгрузки <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрдера.ДокументОтгрузки,
		|	ТоварыОрдера.Номенклатура,
		|	ТоварыОрдера.Характеристика,
		|	ТоварыОрдера.Назначение";
		
		Запрос.УстановитьПараметр("Ссылка", Задание);
		
		ТоварыДокументовОтгрузки = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаПоОтгрузке Из ТоварыДокументовОтгрузки Цикл
			
			КоличествоРаспределения = СтрокаПоОтгрузке.Количество;
			
			ОтборТоваров = ?(Не ЗначениеЗаполнено(СтрокаПоОтгрузке.Серия),
							Новый Структура("Номенклатура, Характеристика, Назначение"),
							Новый Структура("Номенклатура, Характеристика, Назначение, Серия"));
			ЗаполнитьЗначенияСвойств(ОтборТоваров, СтрокаПоОтгрузке);
			
			СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(ОтборТоваров);
			
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				
				Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОтгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДокумента.Количество <= КоличествоРаспределения Тогда
					СтрокаДокумента.ДокументОтгрузки = СтрокаПоОтгрузке.ДокументОтгрузки;
					
					КоличествоРаспределения = КоличествоРаспределения - СтрокаДокумента.Количество;
				Иначе
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
					
					Количество = СтрокаДокумента.Количество - КоличествоРаспределения;
					
					СтрокаДокумента.ДокументОтгрузки = СтрокаПоОтгрузке.ДокументОтгрузки;
					СтрокаДокумента.Количество       = КоличествоРаспределения;
					
					НоваяСтрока.Количество = Количество
				КонецЕсли;
				
				Если КоличествоРаспределения <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыОрдера.ДокументОтгрузки                           КАК ДокументОтгрузки,
		|	ТоварыОрдера.УпаковочныйЛист                            КАК УпаковочныйЛист,
		|	ТоварыОрдера.УпаковочныйЛистРодитель                    КАК УпаковочныйЛистРодитель,
		|	ТоварыОрдера.ЭтоУпаковочныйЛист                         КАК ЭтоУпаковочныйЛист,
		|	ТоварыОрдера.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	ТоварыОрдера.Штрихкод                                   КАК Штрихкод,
		|	ВЫРАЗИТЬ(ТоварыОрдера.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТоварыОрдера.Характеристика                             КАК Характеристика,
		|	ТоварыОрдера.Назначение                                 КАК Назначение,
		|	ВЫРАЗИТЬ(ТоварыОрдера.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	ТоварыОрдера.Серия                                      КАК Серия,
		|	ТоварыОрдера.СтатусУказанияСерий                        КАК СтатусУказанияСерий,
		|	ТоварыОрдера.Количество                                 КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК ТоварыОрдера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.ДокументОтгрузки                           КАК ДокументОтгрузки,
		|	Товары.УпаковочныйЛист                            КАК УпаковочныйЛист,
		|	Товары.УпаковочныйЛистРодитель                    КАК УпаковочныйЛистРодитель,
		|	Товары.ЭтоУпаковочныйЛист                         КАК ЭтоУпаковочныйЛист,
		|	Товары.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста КАК ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста,
		|	Товары.Штрихкод                                   КАК Штрихкод,
		|	Товары.Номенклатура                               КАК Номенклатура,
		|	Товары.Характеристика                             КАК Характеристика,
		|	Товары.Назначение                                 КАК Назначение,
		|	Товары.Упаковка                                   КАК Упаковка,
		|	Товары.Серия                                      КАК Серия,
		|	Товары.СтатусУказанияСерий                        КАК СтатусУказанияСерий,
		|	Товары.Количество                                 КАК Количество,
		|	ВЫБОР
		|		КОГДА Товары.Количество = 0
		|				ИЛИ &ТекстЗапросаКоэффициентУпаковки = 0
		|			ТОГДА Товары.Количество
		|		ИНАЧЕ
		|			Товары.Количество / &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ                                             КАК КоличествоУпаковок
		|ИЗ
		|	Товары КАК Товары";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&ТекстЗапросаКоэффициентУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"Товары.Упаковка", "Товары.Номенклатура"));
		
		Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
		
		ДокументОбъект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.УпаковочныйЛист,
	|	Товары.Номенклатура,
	|	Товары.СтатусУказанияСерий,
	|	Товары.УпаковочныйЛистРодитель
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	(Товары.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|				И Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ Товары.СтатусУказанияСерий В (1, 3, 5, 7, 9, 11, 13, 15, 21, 23, 25, 27)
	|			ИЛИ Товары.УпаковочныйЛист <> ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|				И НЕ Товары.УпаковочныйЛист В
	|						(ВЫБРАТЬ
	|							Товары.УпаковочныйЛистРодитель
	|						ИЗ
	|							Товары))";
	
	Запрос.УстановитьПараметр("Товары",
		ДокументОбъект.Товары.Выгрузить(, "УпаковочныйЛист, УпаковочныйЛистРодитель, Номенклатура, СтатусУказанияСерий"));
	
	Если Запрос.Выполнить().Пустой()
		И Не ТребуетсяОбработка Тогда
		
		ТребуетсяОбработка = Не ДокументОбъект.ПроверитьЗаполнение();
		
		Если Не ТребуетсяОбработка Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПриходныйОрдерНаТовары);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЕсли;
	
	// Записать и провести документ.
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		
		ЕстьОшибки = Истина;
		
		// Добавить запись об ошибке в журнал регистрации.
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При завершении задания на приемку произошла ошибка (см.журнал регистрации). Описание ошибки: ""%1""'"), 
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при завершении задания на приемку.'",
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, 
			Задание.Метаданные(), 
			Задание, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(Форма.Задание, Форма.УникальныйИдентификатор);
	
	// Вывести сообщение пользователю.
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = НСтр("ru = 'При завершении задания на приемку произошла ошибка (см.журнал регистрации).'");
	ИначеЕсли ТребуетсяОбработка Тогда
		ТекстСообщения = НСтр("ru = 'Отсканированные товары сохранены. Требуется дополнительная обработка ордера.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Приемка товаров успешно завершена.'");
	КонецЕсли;
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, НоваяКнопкаДиалога("ОсновноеМенюПриемка", НСтр("ru = 'Перейти к выбору задания на приемку'")));
	
КонецПроцедуры

// Вызывается при завершении выполнения задания на перемещение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗавершитьВыполнениеЗаданияПеремещение(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ОбработкаОбъект = Форма.Объект;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Если Не ОтборОтсканирован Тогда
		
		Если Не ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			ДобавитьТаруПоОтсканированномуТовару(Форма);
		КонецЕсли;
		
		// Выполняется завершение задания когда частично отсканированы отобранные
		// товары, товары для размещения не отсканированы вообще.
		Если Не ЗначениеЗаполнено(ПараметрыРежима.ЗонаПриемки) Тогда
			ПерейтиКВыборуЗоныПриемкиОтгрузки(Форма, "ЗонаПриемки");
		Иначе
			ЗавершитьВыполнениеСкладскогоЗадания(Форма);
		КонецЕсли;
		
	Иначе
		
		Если Не ВсеСтрокиЗаданияОтсканированы(Форма) Тогда
			ДобавитьТаруПоОтсканированномуТовару(Форма);
		КонецЕсли;
		
		// Проверить, если отобранные товары размещены не полностью,
		// то оставшиеся следует отнести в зону отгрузки. Если зона
		// отгрузки не определена, то перейти к выбору зоны отгрузки.
		ОтобранноеКоличество = 0;
		РазмещенноеКоличество = 0;
		
		Для Каждого СтрокаТоваров Из ОбработкаОбъект.ТоварыОтбор Цикл
			ОтобранноеКоличество = ОтобранноеКоличество + СтрокаТоваров.КоличествоУпаковокОтобрано *
				СтрокаТоваров.Коэффициент;
		КонецЦикла;
		
		Для Каждого СтрокаТоваров Из ТоварыДляСканирования Цикл
			РазмещенноеКоличество = РазмещенноеКоличество + СтрокаТоваров.КоличествоУпаковокОтсканировано *
				СтрокаТоваров.Коэффициент;
		КонецЦикла;
		
		Если Не (ОтобранноеКоличество = РазмещенноеКоличество) Тогда
			Если Не ЗначениеЗаполнено(ПараметрыРежима.ЗонаПриемки) Тогда
				ПерейтиКВыборуЗоныПриемкиОтгрузки(Форма, "ЗонаПриемки");
			Иначе
				ЗавершитьВыполнениеСкладскогоЗадания(Форма);
			КонецЕсли;
		Иначе
			ЗавершитьВыполнениеСкладскогоЗадания(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при завершении задания проверки отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗавершитьВыполнениеЗаданияПроверкаОтбора(Форма)
	
	ЕстьНеотгружаемые = Ложь;
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	Если Не ЕстьОтсканированныеТовары Тогда
		ОтменитьВыполнениеЗадания(Форма);
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	Задание = Форма.ПараметрыРежима.Задание;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	Объект = Форма.Объект;
	
	Если РежимВебСервиса Тогда
		ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ЗавершитьВыполнениеСкладскогоЗадания(Форма, Задание);
	Иначе
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеЗаданияПроверкаОтбора(
			Объект.Склад, Объект.Помещение, Задание, ОтсканированныеТовары, ТоварыДляСканирования,
			Форма.ИспользуетсяАдресноеХранение);
	КонецЕсли;
	
	ОчиститьТоварыСканирования(Форма);
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		
		// Если в таблице излишков есть записи, то необходимо вывести сообщение
		// о том какие товары необходимо оставить в зоне отгрузки.
		Если ПараметрыЗадания.Свойство("НеотгружаемыеТовары") Тогда
			ЕстьНеотгружаемые = Истина;
			ВывестиИнформациюНеотгружаемыхТоварах(Форма, ПараметрыЗадания.НеотгружаемыеТовары);
			
			ЗаголовокСообщения = НСтр("ru = 'Внимание!'");
			ТекстСообщения = "";
		Иначе
			ЗаголовокСообщения = НСтр("ru = 'Задание не выполнено'");
			ТекстСообщения = ПараметрыЗадания.ТекстСообщения;
		КонецЕсли;
		
	Иначе
		ЗаголовокСообщения = НСтр("ru = 'Задание выполнено'");
		ТекстСообщения = ПараметрыЗадания.ТекстСообщения;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ПараметрыРежима.ТипЗадания);
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки, ЗаголовокСообщения, ЕстьНеотгружаемые);
	
КонецПроцедуры

// Вызывается при выполнении задания проверки отбора. Отображает таблицу
// с информацией об излишках товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ТаблицаНеотгружаемых - ТаблицаЗначений,ТабличнаяЧасть - таблица излишков.
//
Процедура ВывестиИнформациюНеотгружаемыхТоварах(Форма, ТаблицаНеотгружаемых)
	
	ТабДок = Форма.ТаблицаИнформации;
	
	ТабДок.Очистить();
	
	ИмяМакета = ИмяМакетаИнформацииОбИзлишкахТоваров(Форма);
	Макет = Обработки.РабочееМестоРаботникаСклада.ПолучитьМакет(ИмяМакета);
	
	ОбластьОписание = Макет.ПолучитьОбласть("Описание");
	ОбластьЗаголовокТаблицыОстатков = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ТабДок.Вывести(ОбластьОписание);
	ТабДок.Вывести(ОбластьЗаголовокТаблицыОстатков);
	
	Для Каждого СтрокаТбл Из ТаблицаНеотгружаемых Цикл
		
		ТекстТовар = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2%3%4'"),
			СтрокаТбл.Номенклатура,
			?(ЗначениеЗаполнено(СтрокаТбл.Характеристика), ", " + СтрокаТбл.Характеристика, ""),
			?(ЗначениеЗаполнено(СтрокаТбл.Назначение), " , (назначение: " + СтрокаТбл.Назначение + ")", ""),
			?(ЗначениеЗаполнено(СтрокаТбл.Серия), " , (серия: " + СтрокаТбл.Серия + ")", ""));
		
		ТекстКоличество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), 
			СтрокаТбл.КоличествоУпаковок, 
			СтрокаТбл.Упаковка);
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ТекстТовар;
		ОбластьСтрокаТаблицы.Параметры.Количество = ТекстКоличество;
		
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, есть ли неотсканированные товары в складском задании.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина, есть неотсканированные товары складского задания.
//
Функция ЕстьНеОтсканированныеТовары(Форма)
	
	Если Форма.ПараметрыРежима.НаборТоваров Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьНеОтсканированные = Не (Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано") = Форма.ТоварыДляСканирования.Итог("КоличествоУпаковок"));
	
	Возврат ЕстьНеОтсканированные;
	
КонецФункции

// Проверяет, есть ли отсканированные товары в складском задании.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина, есть отсканированные товары складского задания.
//
Функция ЕстьОтсканированныеТовары(Форма)
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	ЕстьОтсканированные = Ложь;
	
	Если ЭтоНаборТоваров Тогда
		ЕстьОтсканированные = (Форма.ОтсканированныеТовары.Количество() > 0);
	Иначе
		Если ТипЗадания = "Пересчет" Тогда
			ЕстьОтсканированные = (Форма.ОтсканированныеТовары.Количество() > 0);
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			ЕстьОтсканированные = (Форма.ОтсканированныеТовары.Итог("КоличествоУпаковокОтсканировано") > 0);
		Иначе
			ЕстьОтсканированные = (Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано") > 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОтсканированные;
	
КонецФункции

// Переключает рабочее место в режим выбора зоны приемки/отгрузки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** ЗоныПриемкиОтгрузкиЯчейка - ТаблицаФормы - таблица, содержащая информацию о складских ячейках,
//															выступающих в роли зоны приемки или отгрузки.
//	ТипЗоны - Строка - типы зоны - приемки или отгрузки.
//
Процедура ПерейтиКВыборуЗоныПриемкиОтгрузки(Форма, ТипЗоны) Экспорт
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	// Установить тип зоны.
	ПараметрыРежима.ВыборЗоныПриемкиОтгрузки = ТипЗоны;
	
	// Установить текст заголовка колонки ячейки выбора зоны приемки/отгрузки.
	Если ТипЗоны = "ЗонаПриемки" Тогда
		
		ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбЗонуПриемки", Форма);
		ТекстЗаголовкаКолонкиЯчейки = НСтр("ru = 'Зона приемки'");
		
		Отбор = Новый Структура("ТипЯчейки", СкладыКлиентСервер.ТипыЯчеекПриемка());
		Элементы.ЗоныПриемкиОтгрузки.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
	ИначеЕсли ТипЗоны = "ЗонаОтгрузки" Тогда
		
		ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбЗонуОтгрузки", Форма);
		ТекстЗаголовкаКолонкиЯчейки = НСтр("ru = 'Зона отгрузки'");
		
		Отбор = Новый Структура("ТипЯчейки", СкладыКлиентСервер.ТипыЯчеекОтгрузка());
		Элементы.ЗоныПриемкиОтгрузки.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
	КонецЕсли;
	
	// Установить заголовки элементов.
	УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	Элементы.ЗоныПриемкиОтгрузкиЯчейка.Заголовок = ТекстЗаголовкаКолонкиЯчейки;
	
	ПерейтиНаСтраницу(Форма, "СтраницаВыборЗоныПриемкиОтгрузки");
	
КонецПроцедуры

// Очищает таблицы товаров которые используются при выполнении задания.
// Вызывается при постановке задания в работу или при переходе к размещению задания на перемещение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОчиститьТоварыСканирования(Форма)
	
	Форма.ПараметрыРежима.Задание = Неопределено;
	
	Форма.ТоварыДляСканирования.Очистить();
	Форма.ОтсканированныеТовары.Очистить();
	Форма.ОтсканированнаяТара.ПолучитьЭлементы().Очистить();
	Форма.ЯчейкиДляСканирования.Очистить();
	Форма.Объект.ОстаткиТоваровВЯчейке.Очистить();
	
КонецПроцедуры

// Удаляет из таблицы ТоварыДляСканирования строки товаров которые не были отобраны.
// Используется при выполнении заданий на перемещение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* ТоварыДляСканирования - ТабличнаяЧасть - таблица, содержащая информация о сканируемых товарах складского задания.
//
Процедура ОтменитьНеОтобранныеТовары(Форма)
	
	Объект = Форма.Объект;
	ТоварыРаспределены = Истина;
	МассивОтбираемойТары = Новый Массив;
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	ТЗТоварыОтбор = Объект.ТоварыОтбор.Выгрузить();
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	ТЗТоварыДляСканирования = ТоварыДляСканирования.Выгрузить();
	
	ТЗТоварыОтбор.Свернуть("Номенклатура, Характеристика, Назначение, Серия, НомерСерии, ГоденДо, Упаковка,
		|ТипНоменклатуры, Коэффициент, ТипИзмеряемойВеличины", "КоличествоОтобрано, КоличествоУпаковокОтобрано");
	ТЗНеобработанныеТовары = ТЗТоварыОтбор.СкопироватьКолонки();
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка, Серия");
	ОтборБезСерии = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка");
	ОтборПоЯчейке = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	
	Для каждого СтрокаТЗТоварыОтбор Из ТЗТоварыОтбор Цикл
		
		Если СтрокаТЗТоварыОтбор.КоличествоУпаковокОтобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоТара(СтрокаТЗТоварыОтбор) Тогда
			МассивОтбираемойТары.Добавить(СтрокаТЗТоварыОтбор);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗТоварыОтбор);
		ЗаполнитьЗначенияСвойств(ОтборБезСерии, СтрокаТЗТоварыОтбор);
		
		МассивСтрок = ТЗТоварыДляСканирования.НайтиСтроки(ОтборБезСерии);
		КоличествоУпаковокОтобрано = СтрокаТЗТоварыОтбор.КоличествоУпаковокОтобрано;
		
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = ТЗНеобработанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗТоварыОтбор);
			
			Продолжить;
		КонецЕсли;
		
		Если СерииУказываютсяПоФактуОтбора(МассивСтрок[0].СтатусУказанияСерий) Тогда
			
			Для Каждого СтрокаТоваровДляСканирования Из МассивСтрок Цикл
				
				Если КоличествоУпаковокОтобрано = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Проверяем все ли товары размещены.
				Если СтрокаТоваровДляСканирования.КоличествоУпаковок = СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано Тогда
					Продолжить;
				КонецЕсли;
				
				ТоварыБезСерий = ТоварыДляСканирования.НайтиСтроки(ОтборБезСерии);
				
				Для Каждого ТоварБезСерии Из ТоварыБезСерий Цикл
					Если ТоварБезСерии.КоличествоУпаковок = ТоварБезСерии.КоличествоУпаковокОтсканировано Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТЧ = ТоварБезСерии;
					
					Прервать;
				КонецЦикла;
				
				Если Не (ЗначениеЗаполнено(СтрокаТоваровДляСканирования.ГоденДо)
					Или ЗначениеЗаполнено(СтрокаТоваровДляСканирования.НомерСерии)) Тогда
					
					КоличествоВЯчейку		= 0;
					КоличествоНеРазмещено	= СтрокаТоваровДляСканирования.КоличествоУпаковок
												- СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано;
					
					// Распределяем размещаемое количество товаров.
					Если КоличествоУпаковокОтобрано >= КоличествоНеРазмещено Тогда
						КоличествоВЯчейку			= СтрокаТоваровДляСканирования.КоличествоУпаковок
														- СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано;
						КоличествоУпаковокОтобрано	= КоличествоУпаковокОтобрано - КоличествоНеРазмещено;
						
						СтрокаТЧ.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
						СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
					Иначе
						КоличествоВЯчейку			= КоличествоУпаковокОтобрано;
						КоличествоУпаковокОтобрано	= 0;
						
						СтрокаТЧ.КоличествоУпаковокОтсканировано = КоличествоВЯчейку + СтрокаТЧ.КоличествоУпаковокОтсканировано;
						СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = КоличествоВЯчейку
																						+ СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборПоЯчейке, СтрокаТЗТоварыОтбор);
					ОтборПоЯчейке.Ячейка = СтрокаТоваровДляСканирования.Ячейка;
					
					СтрокиССерией = ТЗТоварыДляСканирования.НайтиСтроки(ОтборПоЯчейке);
					
					// Проверяем наличие товаров с серией
					Если СтрокиССерией.Количество() = 0 Тогда
						
						ИндексНовойСтроки = ТЗТоварыДляСканирования.Индекс(СтрокаТоваровДляСканирования);
						ИндексНовойСтрокиТЧ = ТоварыДляСканирования.Индекс(СтрокаТЧ);
						
						НоваяСтрока = ТЗТоварыДляСканирования.Вставить(ИндексНовойСтроки + 1);
						НоваяСтрокаТЧ = ТоварыДляСканирования.Вставить(ИндексНовойСтрокиТЧ + 1);
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваровДляСканирования);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
						
						НоваяСтрока.Серия = СтрокаТЗТоварыОтбор.Серия;
						НоваяСтрокаТЧ.Серия = СтрокаТЗТоварыОтбор.Серия;
						
						НоваяСтрока.ГоденДо = СтрокаТЗТоварыОтбор.ГоденДо;
						НоваяСтрокаТЧ.ГоденДо = СтрокаТЗТоварыОтбор.ГоденДо;
						
						НоваяСтрока.НомерСерии = СтрокаТЗТоварыОтбор.НомерСерии;
						НоваяСтрокаТЧ.НомерСерии = СтрокаТЗТоварыОтбор.НомерСерии;
						
						НоваяСтрока.КоличествоУпаковок = КоличествоВЯчейку;
						НоваяСтрокаТЧ.КоличествоУпаковок = КоличествоВЯчейку;
						
						НоваяСтрока.КоличествоУпаковокОтсканировано = КоличествоВЯчейку;
						НоваяСтрокаТЧ.КоличествоУпаковокОтсканировано = КоличествоВЯчейку;
						
					Иначе
						
						НоваяСтрока = СтрокиССерией[0];
						НоваяСтрокаТЧ = ТоварыДляСканирования.НайтиСтроки(ОтборПоЯчейке)[0];
						
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + КоличествоВЯчейку;
						НоваяСтрокаТЧ.КоличествоУпаковок = НоваяСтрокаТЧ.КоличествоУпаковок + КоличествоВЯчейку;
						
						НоваяСтрока.КоличествоУпаковокОтсканировано = НоваяСтрока.КоличествоУпаковокОтсканировано + КоличествоВЯчейку;
						НоваяСтрокаТЧ.КоличествоУпаковокОтсканировано = НоваяСтрокаТЧ.КоличествоУпаковокОтсканировано + КоличествоВЯчейку;
						
					КонецЕсли;
					
					СтрокаТЧ.АктивнаяСтрока = 1;
					НоваяСтрока.АктивнаяСтрока = 1;
					
					ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СтрокаТоваровДляСканирования);
					ДобавитьУстановитьТаруВТоварыДляСканирования(Форма);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			МассивСтрокССерией = ТЗТоварыДляСканирования.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаТоваровДляСканирования Из МассивСтрокССерией Цикл
				
				Если КоличествоУпаковокОтобрано = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаТоваровДляСканирования.КоличествоУпаковок = СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОтборПоЯчейке, СтрокаТоваровДляСканирования);
				СтрокаТЧ = ТоварыДляСканирования.НайтиСтроки(ОтборПоЯчейке)[0];
				
				КоличествоНеРазмещено = СтрокаТоваровДляСканирования.КоличествоУпаковок
											- СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано;
				
				Если КоличествоУпаковокОтобрано >= КоличествоНеРазмещено Тогда
					КоличествоУпаковокОтобрано = КоличествоУпаковокОтобрано - КоличествоНеРазмещено;
					
					СтрокаТЧ.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
					СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
				Иначе
					СтрокаТЧ.КоличествоУпаковокОтсканировано = КоличествоУпаковокОтобрано + СтрокаТЧ.КоличествоУпаковокОтсканировано;
					СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = КоличествоУпаковокОтобрано
																					+ СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано;
					
					КоличествоУпаковокОтобрано = 0;
				КонецЕсли;
				
				СтрокаТЧ.АктивнаяСтрока = 1;
				СтрокаТоваровДляСканирования.АктивнаяСтрока = 1;
				
				ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СтрокаТоваровДляСканирования);
				ДобавитьУстановитьТаруВТоварыДляСканирования(Форма);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоУпаковокОтобрано > 0 Тогда
			НоваяСтрока = ТЗНеобработанныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗТоварыОтбор);
			
			НоваяСтрока.КоличествоУпаковокОтобрано = КоличествоУпаковокОтобрано;
			НоваяСтрока.КоличествоОтобрано = НоваяСтрока.Коэффициент * КоличествоУпаковокОтобрано;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивНераспределенныхТоваров = Новый Массив;
	ТипЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТЗТоварыДляСканирования = ТоварыДляСканирования.Выгрузить();
	
	ТЗТоварыДляСканирования.Сортировать("Коэффициент Возр");
	ТЗТоварыДляСканирования.Колонки.Добавить("КоличествоОтсканировано", ТипЧисло);
	
	Если ТЗНеобработанныеТовары.Количество() > 0 Тогда
		
		Отбор           = Новый Структура("Номенклатура, Характеристика, Назначение, Серия");
		ОтборБезСерии   = Новый Структура("Номенклатура, Характеристика, Назначение");
		ОтборПоУпаковке = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка");
		ОтборВТЧ        = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
		
		Для Каждого НеобработанныйТовар Из ТЗНеобработанныеТовары Цикл
			
			Если Не ТоварыРаспределены Тогда
				Прервать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, НеобработанныйТовар);
			ЗаполнитьЗначенияСвойств(ОтборБезСерии, НеобработанныйТовар);
			
			КоличествоОтобрано = НеобработанныйТовар.КоличествоОтобрано;
			КоличествоУпаковокОтобрано = НеобработанныйТовар.КоличествоУпаковокОтобрано;
			
			МассивТоваров = ТЗТоварыДляСканирования.НайтиСтроки(ОтборБезСерии);
			
			Если СерииУказываютсяПоФактуОтбора(МассивТоваров[0].СтатусУказанияСерий) Тогда
				
				Для Каждого СтрокаТоваровДляСканирования Из МассивТоваров Цикл
					
					Если КоличествоОтобрано = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если НеобработанныйТовар.Коэффициент > СтрокаТоваровДляСканирования.Коэффициент Тогда
						Если НеобработанныйТовар.Коэффициент % СтрокаТоваровДляСканирования.Коэффициент > 0 Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Если СтрокаТоваровДляСканирования.Коэффициент % НеобработанныйТовар.Коэффициент > 0 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Количество = СтрокаТоваровДляСканирования.КоличествоУпаковок * СтрокаТоваровДляСканирования.Коэффициент;
					КоличествоОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано *
						СтрокаТоваровДляСканирования.Коэффициент;
					
					// Проверяем все ли товары размещены.
					Если Количество = КоличествоОтсканировано Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборПоУпаковке, СтрокаТоваровДляСканирования);
					ТоварыПоУпаковкам = ТоварыДляСканирования.НайтиСтроки(ОтборПоУпаковке);
					
					Для Каждого ТоварСУпаковкой Из ТоварыПоУпаковкам Цикл
						Если ТоварСУпаковкой.КоличествоУпаковок = ТоварСУпаковкой.КоличествоУпаковокОтсканировано Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаТЧ = ТоварСУпаковкой;
						
						Прервать;
					КонецЦикла;
					
					Если Не (ЗначениеЗаполнено(СтрокаТоваровДляСканирования.ГоденДо)
						Или ЗначениеЗаполнено(СтрокаТоваровДляСканирования.НомерСерии)) Тогда
						
						КоличествоВЯчейку			= 0;
						КоличествоУпаковокВЯчейку	= 0;
						КоличествоНеРазмещено		= Количество - КоличествоОтсканировано;
						
						// Распределяем размещаемое количество товаров.
						Если КоличествоОтобрано >= КоличествоНеРазмещено Тогда
							КоличествоВЯчейку			= Количество - СтрокаТоваровДляСканирования.КоличествоОтсканировано;
							КоличествоУпаковокВЯчейку	= КоличествоВЯчейку / СтрокаТоваровДляСканирования.Коэффициент;
							КоличествоОтобрано			= КоличествоОтобрано - КоличествоНеРазмещено;
							
							СтрокаТоваровДляСканирования.КоличествоОтсканировано = СтрокаТоваровДляСканирования.КоличествоОтсканировано
																					+ КоличествоВЯчейку;
							
							СтрокаТЧ.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
							СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
						Иначе
							РазмещаемоеКоличество		= КоличествоОтобрано + КоличествоОтсканировано;
							КоличествоВЯчейку			= КоличествоОтобрано;
							КоличествоУпаковокВЯчейку	= КоличествоВЯчейку / СтрокаТоваровДляСканирования.Коэффициент;
							КоличествоОтобрано			= 0;
							
							СтрокаТоваровДляСканирования.КоличествоОтсканировано = РазмещаемоеКоличество;
							
							Если Не ЗначениеЗаполнено(СтрокаТоваровДляСканирования.Упаковка)
								И МерныеЕдиницыИзмерения.Найти(СтрокаТоваровДляСканирования.ТипИзмеряемойВеличины) <> Неопределено Тогда
								
								СтрокаТЧ.КоличествоУпаковокОтсканировано = РазмещаемоеКоличество;
								СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = РазмещаемоеКоличество;
								
							Иначе
								РазмещаемоеКоличествоУпаковок	= Цел(РазмещаемоеКоличество / СтрокаТоваровДляСканирования.Коэффициент);
								КоличествоУпаковокВЯчейку		= Цел(КоличествоВЯчейку / СтрокаТоваровДляСканирования.Коэффициент);
								
								СтрокаТЧ.КоличествоУпаковокОтсканировано = РазмещаемоеКоличествоУпаковок;
								СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = РазмещаемоеКоличествоУпаковок;
							КонецЕсли;
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтборПоЯчейке, НеобработанныйТовар);
						ОтборПоЯчейке.Ячейка = СтрокаТоваровДляСканирования.Ячейка;
						ОтборПоЯчейке.Упаковка = СтрокаТоваровДляСканирования.Упаковка;
						
						СтрокиССерией = ТЗТоварыДляСканирования.НайтиСтроки(ОтборПоЯчейке);
						
						// Проверяем наличие товаров с серией
						Если СтрокиССерией.Количество() = 0 Тогда
							
							ИндексНовойСтроки = ТЗТоварыДляСканирования.Индекс(СтрокаТоваровДляСканирования);
							ИндексНовойСтрокиТЧ = ТоварыДляСканирования.Индекс(СтрокаТЧ);
							
							НоваяСтрока = ТЗТоварыДляСканирования.Вставить(ИндексНовойСтроки + 1);
							НоваяСтрокаТЧ = ТоварыДляСканирования.Вставить(ИндексНовойСтрокиТЧ + 1);
							
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваровДляСканирования);
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
							
							НоваяСтрока.Серия = НеобработанныйТовар.Серия;
							НоваяСтрокаТЧ.Серия = НеобработанныйТовар.Серия;
							
							НоваяСтрока.ГоденДо = НеобработанныйТовар.ГоденДо;
							НоваяСтрокаТЧ.ГоденДо = НеобработанныйТовар.ГоденДо;
							
							НоваяСтрока.НомерСерии = НеобработанныйТовар.НомерСерии;
							НоваяСтрокаТЧ.НомерСерии = НеобработанныйТовар.НомерСерии;
							
							НоваяСтрока.КоличествоОтсканировано = КоличествоВЯчейку;
							
							НоваяСтрока.КоличествоУпаковокОтсканировано = КоличествоУпаковокВЯчейку;
							НоваяСтрокаТЧ.КоличествоУпаковокОтсканировано = КоличествоУпаковокВЯчейку;
							
						Иначе
							
							НоваяСтрока = СтрокиССерией[0];
							ЗаполнитьЗначенияСвойств(ОтборВТЧ, НоваяСтрока);
							
							НоваяСтрокаТЧ = ТоварыДляСканирования.НайтиСтроки(ОтборВТЧ)[0];
							
							НоваяСтрока.КоличествоОтсканировано = НоваяСтрока.КоличествоУпаковокОтсканировано * КоличествоВЯчейку;
							
							НоваяСтрока.КоличествоУпаковокОтсканировано = НоваяСтрока.КоличествоУпаковокОтсканировано + КоличествоУпаковокВЯчейку;
							НоваяСтрокаТЧ.КоличествоУпаковокОтсканировано = НоваяСтрока.КоличествоУпаковокОтсканировано;
							
						КонецЕсли;
						
						СтрокаТЧ.АктивнаяСтрока = 1;
						НоваяСтрока.АктивнаяСтрока = 1;
						
						ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СтрокаТоваровДляСканирования);
						ДобавитьУстановитьТаруВТоварыДляСканирования(Форма);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				МассивСтрокССерией = ТЗТоварыДляСканирования.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаТоваровДляСканирования Из МассивСтрокССерией Цикл
					
					Если КоличествоОтобрано = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если НеобработанныйТовар.Коэффициент > СтрокаТоваровДляСканирования.Коэффициент Тогда
						Если НеобработанныйТовар.Коэффициент % СтрокаТоваровДляСканирования.Коэффициент > 0 Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Если СтрокаТоваровДляСканирования.Коэффициент % НеобработанныйТовар.Коэффициент > 0 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Количество = СтрокаТоваровДляСканирования.КоличествоУпаковок * СтрокаТоваровДляСканирования.Коэффициент;
					КоличествоОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано *
						СтрокаТоваровДляСканирования.Коэффициент;
					
					// Проверяем все ли товары размещены.
					Если Количество = КоличествоОтсканировано Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ОтборВТЧ, СтрокаТоваровДляСканирования);
					СтрокаТЧ = ТоварыДляСканирования.НайтиСтроки(ОтборВТЧ)[0];
					
					КоличествоНеРазмещено = Количество - КоличествоОтсканировано;
					
					Если КоличествоОтобрано >= КоличествоНеРазмещено Тогда
						КоличествоОтобрано = КоличествоОтобрано - КоличествоНеРазмещено;
						
						СтрокаТоваровДляСканирования.КоличествоОтсканировано = Количество;
						
						СтрокаТЧ.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
						СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = СтрокаТоваровДляСканирования.КоличествоУпаковок;
					Иначе
						РазмещаемоеКоличество = КоличествоОтобрано + КоличествоОтсканировано;
						СтрокаТоваровДляСканирования.КоличествоОтсканировано = РазмещаемоеКоличество;
						
						КоличествоОтобрано = 0;
						
						Если Не ЗначениеЗаполнено(СтрокаТоваровДляСканирования.Упаковка)
							И МерныеЕдиницыИзмерения.Найти(СтрокаТоваровДляСканирования.ТипИзмеряемойВеличины) <> Неопределено Тогда
							
							СтрокаТЧ.КоличествоУпаковокОтсканировано = РазмещаемоеКоличество;
							СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = РазмещаемоеКоличество;
							
						Иначе
							РазмещаемоеКоличествоУпаковок = Цел(РазмещаемоеКоличество / СтрокаТоваровДляСканирования.Коэффициент);
							
							СтрокаТЧ.КоличествоУпаковокОтсканировано = РазмещаемоеКоличествоУпаковок;
							СтрокаТоваровДляСканирования.КоличествоУпаковокОтсканировано = РазмещаемоеКоличествоУпаковок;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаТЧ.АктивнаяСтрока = 1;
					СтрокаТоваровДляСканирования.АктивнаяСтрока = 1;
					
					ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СтрокаТоваровДляСканирования);
					ДобавитьУстановитьТаруВТоварыДляСканирования(Форма);
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Проверяет ли полностью распределен отобранный товар
			Если КоличествоОтобрано > 0 Тогда
				МассивНераспределенныхТоваров.Добавить(НеобработанныйТовар);
				ТоварыРаспределены = Ложь;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТЗТоварыДляСканирования Цикл
		Если СтрокаТовара.КоличествоОтсканировано % СтрокаТовара.Коэффициент > 0 Тогда
			ТоварыРаспределены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТоварыРаспределены Тогда
		Форма.ПараметрыРежима.ТоварыРаспределены = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого ОтбираемаяТара Из МассивОтбираемойТары Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ОтбираемаяТара);
		СтрокиСТарой = ТоварыДляСканирования.НайтиСтроки(Отбор);
		
		КоличествоОтобрано = 0;
		
		Для Каждого СтрокаТары Из СтрокиСТарой Цикл
			КоличествоОтобрано = КоличествоОтобрано + СтрокаТары.КоличествоУпаковокОтсканировано;
		КонецЦикла;
		
		КоличествоНеРазмещено = ОтбираемаяТара.КоличествоУпаковокОтобрано - КоличествоОтобрано;
		Если КоличествоНеРазмещено = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТары Из СтрокиСТарой Цикл
			
			Если СтрокаТары.КоличествоУпаковок = СтрокаТары.КоличествоУпаковокОтсканировано Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоРазместить = СтрокаТары.КоличествоУпаковок - СтрокаТары.КоличествоУпаковокОтсканировано;
			
			Если КоличествоНеРазмещено >= КоличествоРазместить Тогда
				КоличествоНеРазмещено = КоличествоНеРазмещено - КоличествоРазместить;
				СтрокаТары.КоличествоУпаковокОтсканировано = СтрокаТары.КоличествоУпаковок;
			Иначе
				
				СтрокаТары.КоличествоУпаковокОтсканировано = СтрокаТары.КоличествоУпаковокОтсканировано + КоличествоНеРазмещено;
				КоличествоУпаковокОтобрано = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого Строка Из ТоварыДляСканирования Цикл
		
		Строка.АктивнаяСтрока = 0;
		
		Если СерииУказываютсяПоФактуОтбора(Строка.СтатусУказанияСерий)
			И Не (ЗначениеЗаполнено(Строка.Серия)) Тогда
			
			МассивУдаляемыхСтрок.Добавить(Строка);
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.КоличествоУпаковокОтсканировано = 0 Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
		Иначе
			Строка.КоличествоУпаковок = Строка.КоличествоУпаковокОтсканировано;
			Строка.КоличествоУпаковокВДокументе = Строка.КоличествоУпаковок;
			Строка.КоличествоУпаковокОтсканировано = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТоварыДляСканирования.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Форма.ТекущаяСтрокаСканирования = Неопределено;
	
КонецПроцедуры

// Заполняет таблицы товаров и тары для сканирования, товарами и тарой из документа - складского задания.
// 
// При этом выполняется дополнительная обработка строк задания:
// - сортировка ячеек. Такое заполнение необходимо
// в том случае, если задание на отбор, размещение, перемещение создавалось
// вручную. В этом случае есть вероятность того, что строки в задании будут "смешаны",
// т.е. при выполнении такого задания работнику склада придется несколько раз подходить
// к одной и той же ячейке.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяТабличнойЧасти -Строка - имя табличной части товаров.
//
Процедура ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, ИмяТабличнойЧасти)
	
	ТоварыДокумента = Форма.Объект[ИмяТабличнойЧасти].Выгрузить();
	КолонкаНомерСтроки = ТоварыДокумента.Колонки["НомерСтроки"]; // КолонкаТаблицыЗначений
	КолонкаНомерСтроки.Имя = "НомерСтрокиИсходный";
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТоварыДляСканирования.Очистить();
	
	Пока ТоварыДокумента.Количество() > 0 Цикл
		
		// Найти в таблице товаров все строки с ячейкой из 1-ой строки.
		СтрокаТаблицыТоварыДокумента = ТоварыДокумента[0];
		
		ПараметрыОтбора = Новый Структура("Ячейка", СтрокаТаблицыТоварыДокумента.Ячейка);
		
		// Поместить эти строки в порядке следующем друг за другом.
		МассивСтрок = ТоварыДокумента.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Для каждого СтрокаТаблицыТоваров Из МассивСтрок Цикл
				
				НоваяСтрокаТовара = ТоварыДляСканирования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТаблицыТоваров);
				ТоварыДокумента.Удалить(СтрокаТаблицыТоваров);
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрокаТовара = ТоварыДляСканирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТаблицыТоварыДокумента);
			ТоварыДокумента.Удалить(СтрокаТаблицыТоварыДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.ИспользоватьМногооборотнуюТару Тогда
		
		// Теперь надо строки с тарой "опустить" вниз в каждой ячейке.
		ВГраница = ТоварыДляСканирования.Количество() - 1;
		ПерестановкаВыполнена = Истина;
		
		Пока ПерестановкаВыполнена Цикл
			
			ПерестановкаВыполнена = Ложь;
			
			Для ТекИндекс = 0 По ВГраница Цикл
				
				СтрокаТбл = ТоварыДляСканирования[ТекИндекс];
				
				Если Не ЭтоТара(СтрокаТбл) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекИндекс = ВГраница Тогда // последнюю строку не надо проверять.
					Продолжить;
				КонецЕсли;
				
				// Это строка тары, проверить ячейка в следующей строке, совпадает с ячейкой тары,
				// и  в след. ячейке лежит товар.
				СледСтрокаТбл = ТоварыДляСканирования[ТекИндекс + 1];
				
				Если Не ЭтоТовар(СледСтрокаТбл) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СледСтрокаТбл.Ячейка = СтрокаТбл.Ячейка Тогда
					
					// ... переставить строки.
					СтрокаТоваровСканирования = СтрокаСканирования();
					
					ЗаполнитьЗначенияСвойств(СтрокаТоваровСканирования, СледСтрокаТбл);
					ЗаполнитьЗначенияСвойств(СледСтрокаТбл, СтрокаТбл);
					ЗаполнитьЗначенияСвойств(СтрокаТбл, СтрокаТоваровСканирования);
					
					ПерестановкаВыполнена = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений "ТоварыДляСканирования" данными о товарах для сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗаполнитьТоварыТаруДляСканирования(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	Если ТипЗадания = "Отбор" Тогда
		
		ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, "ТоварыОтбор");
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, "ТоварыРазмещение");
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, "ТоварыОтбор");
		Иначе
			ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, "ТоварыРазмещение");
			ОтменитьНеОтобранныеТовары(Форма);
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, "Товары");
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ЗаполнитьПодготовитьТоварыТаруДляСканирования(Форма, "ОтгружаемыеТовары");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ТЗ "ЯчейкиДляСканирования" на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗаполнитьЯчейкиДляСканирования(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Если ТипЗадания = "Приемка"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЯчейкиДляСканирования.Очистить();
	
	Отбор = Новый Структура("Ячейка");
	
	Для каждого СтрокаТЗ Из ТоварыДляСканирования Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		
		МассивСтрок = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			НоваяСтрока = ЯчейкиДляСканирования.Добавить();
			
			НоваяСтрока.Ячейка = СтрокаТЗ.Ячейка;
			НоваяСтрока.Отсканирована = 0;
			НоваяСтрока.НомерЯчейки = ЯчейкиДляСканирования.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЯчеек = ЯчейкиДляСканирования.Количество();
	
	Для каждого СтрокаТЗ Из ЯчейкиДляСканирования Цикл
		СтрокаТЗ.КоличествоЯчеек = КоличествоЯчеек;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дерево значений со служебной информацией о таблице товаров,
// которые будут поставлены в очередь на сканирование. Служебная информация используется
// для отображения в элементах сканирования (порядковый номер ячейки, товара, количество ячеек).
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Функция ДеревоТоваров(Форма)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	// Заполнить количество ячеек и порядковый номер ячейки в таблице сканирования товаров.
	ДеревоТоваров = Новый ДеревоЗначений;
	
	ДеревоТоваров.Колонки.Добавить("КодСтроки");
	ДеревоТоваров.Колонки.Добавить("Ячейка");
	ДеревоТоваров.Колонки.Добавить("Номенклатура");
	ДеревоТоваров.Колонки.Добавить("Характеристика");
	ДеревоТоваров.Колонки.Добавить("Упаковка");
	
	ДеревоТоваров.Колонки.Добавить("КоличествоЯчеек");
	ДеревоТоваров.Колонки.Добавить("НомерЯчейки");
	ДеревоТоваров.Колонки.Добавить("НомерТовараВЯчейке");
	ДеревоТоваров.Колонки.Добавить("КоличествоТоваровВЯчейке");
	
	ОтборПоЯчейке = Новый Структура("Ячейка");
	ОтборПоТовару = Новый Структура("Номенклатура, Характеристика, Упаковка");
	
	Для каждого СтрокаТЗ Из ТоварыДляСканирования Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПоЯчейке, СтрокаТЗ);
		
		НайденныеСтроки = ДеревоТоваров.Строки.НайтиСтроки(ОтборПоЯчейке);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаЯчейки = ДеревоТоваров.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЯчейки, СтрокаТЗ, "Ячейка");
			
			СтрокаЯчейки.НомерЯчейки = ДеревоТоваров.Строки.Количество();
			
		Иначе
			
			СтрокаЯчейки = НайденныеСтроки[0];
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборПоТовару, СтрокаТЗ);
		НайденныеСтроки = СтрокаЯчейки.Строки.НайтиСтроки(ОтборПоТовару);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТовара = СтрокаЯчейки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаТЗ, "Ячейка, Номенклатура, Характеристика, Упаковка");
			
			СтрокаТовара.НомерТовараВЯчейке = СтрокаЯчейки.Строки.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаЯчейки Из ДеревоТоваров.Строки Цикл
		
		СтрокаЯчейки.КоличествоЯчеек = ДеревоТоваров.Строки.Количество();
		
		Для каждого СтрокаТовара Из СтрокаЯчейки.Строки Цикл
			
			СтрокаТовара.КоличествоЯчеек = СтрокаЯчейки.КоличествоЯчеек;
			СтрокаТовара.НомерЯчейки = СтрокаЯчейки.НомерЯчейки;
			СтрокаТовара.КоличествоТоваровВЯчейке = СтрокаЯчейки.Строки.Количество();
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоТоваров;
	
КонецФункции

// Проставляет в каждой строке таблицы "ТоварыДляСканирования" в служебных полях информацию,
// которую требуется отображать на форме сканирования (общее кол-во ячеек, номер ячейки, кол-во товаров и т.п.).
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗаполнитьСлужебнуюИнформациюТоваровДляСканирования(Форма)
	
	ДеревоТоваров = ДеревоТоваров(Форма);
	
	Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Упаковка");
	
	Для каждого СтрокаТбл Из Форма.ТоварыДляСканирования Цикл
		
		// Заполнить номер ячейки, количество ячеек и проч. служебную информацию.
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТбл);
		
		МассивСтрок = ДеревоТоваров.Строки.НайтиСтроки(Отбор, Истина);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТбл, МассивСтрок[0], "КоличествоЯчеек, НомерЯчейки, КоличествоТоваровВЯчейке,
			|НомерТовараВЯчейке");
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицы значений на форме рабочего места данными, необходимыми
// при сканировании задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗаполнитьДанныеДляСканированияЗадания(Форма)
	
	ЗаполнитьТоварыТаруДляСканирования(Форма);
	ЗаполнитьЯчейкиДляСканирования(Форма);
	ЗаполнитьСлужебнуюИнформациюТоваровДляСканирования(Форма);
	
КонецПроцедуры

// Устанавливает начальные значения границ и счетчика необходимых для
// отображения прогресса выполнения задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьНачальноеСостояниеВыполненияЗадания(Форма)
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Форма.СостояниеВыполненияЗадания = 0;
	
	Элементы.СостояниеВыполненияЗадания.МинимальноеЗначение = 0;
	Элементы.СостояниеВыполненияЗадания.МаксимальноеЗначение = 0;
	
	Если ТипЗадания = "Пересчет" Тогда
		МаксЗначение = Форма.ЯчейкиДляСканирования.Количество();
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		МаксЗначение = ТоварыДляСканирования.Итог("КоличествоУпаковокВДокументе") -
			ТоварыДляСканирования.Итог("КоличествоУпаковокНеОтгружать");
	Иначе
		МаксЗначение = ТоварыДляСканирования.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	Элементы.СостояниеВыполненияЗадания.МаксимальноеЗначение = МаксЗначение;
	
КонецПроцедуры

// Функция возвращает признак необходимости отображения элемента сканирования
// в зависимости от типа задания.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяЭлемента - Строка - имя элемента на форме.
//
// Возвращаемое значение:
//	Булево - Истина - отображать элемент, Ложь - нет.
//
Функция ОтображатьЭлементСканирования(Форма, ИмяЭлемента)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	Отображать = Ложь;
	
	Если ИмяЭлемента = "Ячейка" Тогда
		Если Не (ТипЗадания = "ПроверкаОтбора"
				Или ТипЗадания = "Приемка") Тогда
			
			Отображать = Истина;
			
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "КоличествоВДокументе" Тогда
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			Отображать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отображать;
	
КонецФункции

// Процедура устанавливает видимость элементов сканирования на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьВидимостьЭлементовСканирования(Форма)
	
	Элементы = Форма.Элементы;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	// Установить видимость элементов "Взять".
	ВидимостьВзять = Не (ТипЗадания = "Пересчет" Или ТипЗадания = "Приемка" Или ЭтоНаборТоваров);
	
	Элементы.СтраницаВзять.Видимость = ВидимостьВзять;
	Элементы.НадписьВзять.Видимость = ВидимостьВзять;
	Элементы.НадписьКоличествоУпаковок.Видимость = ВидимостьВзять;
	
	// Установить текущую страницу группы "Взять/отложено".
	Если ТипЗадания = "Отбор" 
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		Элементы.СтраницыВзятьОтложено.ТекущаяСтраница = Элементы.СтраницаВзять;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		Элементы.СтраницыВзятьОтложено.ТекущаяСтраница = Элементы.СтраницаОтложено;
	Иначе
		Элементы.СтраницыВзятьОтложено.ТекущаяСтраница = Элементы.СтраницаДекорация;
	КонецЕсли;
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		Если ТипЗадания = "Приемка"
			Или (ТипЗадания = "Размещение"
				И ЭтоНаборТоваров) Тогда
			
			Элементы.СтраницыДополнительнаяИнформацияЗадания.ТекущаяСтраница = Элементы.СтраницаПараметрыОтсканированныхТоваров;
			Форма.ВесОтсканированныхТоваров = Строка(0.000) + " " + Строка(Строка(Форма.ЕдиницаИзмеренияВеса));
			Форма.ОбъемОтсканированныхТоваров = Строка(0.000000) + " " + Строка(Строка(Форма.ЕдиницаИзмеренияОбъема));
			
		ИначеЕсли ТипЗадания = "Отбор"
			Или ТипЗадания = "Перемещение"
			Или (ТипЗадания = "Размещение"
				И Не ЭтоНаборТоваров) Тогда
			
			Элементы.СтраницыДополнительнаяИнформацияЗадания.ТекущаяСтраница = Элементы.СтраницаОстаткиТоваровВЯчейках;
			
		ИначеЕсли ТипЗадания = "Пересчет" Тогда
			Элементы.СтраницыДополнительнаяИнформацияЗадания.ТекущаяСтраница = Элементы.СтраницаТоварыДляПересчета;
		Иначе
			Элементы.СтраницыДополнительнаяИнформацияЗадания.ТекущаяСтраница = Элементы.СтраницаНетИнформации;
		КонецЕсли;
	КонецЕсли;
	
	// Установить видимость ячейки.
	Элементы.СканированиеЯчейка.Видимость = ОтображатьЭлементСканирования(Форма, "Ячейка");
	Элементы.СканированиеНазначение.Видимость = Форма.Объект.ИспользоватьОбособленноеОбеспечениеЗаказов;
	УстановитьВидимостьКоличестваВДокументе(Форма);
	
КонецПроцедуры

// Устанавливает схему сканирования по умолчанию.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьСхемуСканированияПоУмолчанию(Форма)
	
	Если Не ИзменениеСхемыСканированияСерийДоступно(Форма) Тогда
		Форма.РежимСканированияСерий = "ТоварСерияТовар";
	КонецЕсли;
	
	УстановитьПараметрыЭлементовСхемыСканирования(Форма);
	
КонецПроцедуры

// Вызывается при завершении отбора товаров при выполнении задания перемещения.
// При перемещении может быть отобрана только часть товаров, при размещении товаров
// должна выдаваться для обработки только отобранная часть товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОбработатьОтсканированныеТоварыОтбораПеремещения(Форма)
	
	Объект = Форма.Объект;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ТЗОтсканированныеТовары = Форма.РеквизитФормыВЗначение("ОтсканированныеТовары");
	
	Если РежимВебСервиса Тогда
		ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ОбработатьОтсканированныеТоварыОтбораПеремещения(Форма);
	Иначе
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОбработатьОтсканированныеТоварыОтбораПеремещения(
			Форма.ПараметрыРежима.Задание, ТоварыДляСканирования, ТЗОтсканированныеТовары);
	КонецЕсли;
	
	Объект.ТоварыОтбор.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыОтбор, Объект.ТоварыОтбор);
	
	Форма.ПараметрыРежима.ОтборОтсканирован = Истина;
	
КонецПроцедуры

// Выводит информацию по штрихкоду товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Товар - Структура - сведения о товаре.
//
Процедура ВывестиИнформациюПоШтрихкодуТовара(Форма, Товар)
	
	ВывестиИнформациюОТоваре(Форма, Товар);
	УстановитьЗаголовокФормы(Форма, НСтр("ru = 'Товар'"));
	
	ПерейтиНаСтраницу(Форма, "СтраницаЗапросИнформации");
	
КонецПроцедуры

// Выводит информацию по штрихкоду ячейки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Ячейка - Структура - сведения о ячейке.
//
Процедура ВывестиИнформациюПоШтрихкодуЯчейки(Форма, Ячейка)
	
	ВывестиИнформациюОЯчейке(Форма, Ячейка);
	УстановитьЗаголовокФормы(Форма, НСтр("ru = 'Ячейка'"));
	
	ПерейтиНаСтраницу(Форма, "СтраницаЗапросИнформации");
	
КонецПроцедуры

// Выводит информацию о товаре в поле табличного документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ПараметрыТовара - Структура - сведения о товаре.
//
Процедура ВывестиИнформациюОТоваре(Форма, ПараметрыТовара)
	
	Объект = Форма.Объект;
	ТабДок = Форма.ТаблицаИнформации;
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ТабДок.Очистить();
	
	ИмяМакета = ИмяМакетаИнформацииОТоваре(Форма);
	Макет = Обработки.РабочееМестоРаботникаСклада.ПолучитьМакет(ИмяМакета);
	
	ИнформацияОТоваре = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ИнформацияОТоваре(Объект.Склад, Объект.Помещение,
		ПараметрыТовара);
	
	Если ЗначениеЗаполнено(ИнформацияОТоваре.КартинкаТовара) Тогда
		
		Картинка = ИнформацияОТоваре.КартинкаТовара;
		
		ОбластьКартинкаТовара = Макет.ПолучитьОбласть("КартинкаТовара");
		РисунокТовара = ОбластьКартинкаТовара.Рисунки.Получить(0);
		
		Если ТипЗнч(Картинка) = Тип("ДвоичныеДанные") Тогда
			РисунокТовара.Картинка = Новый Картинка(Картинка);
		Иначе
			РисунокТовара.Картинка = Картинка;
		КонецЕсли;
		
		ТабДок.Вывести(ОбластьКартинкаТовара);
		
	КонецЕсли;
	
	// Вывести описание товара.
	ОбластьОписание = Макет.ПолучитьОбласть("Описание");
	ОбластьЗаголовокОстатки = Макет.ПолучитьОбласть("ЗаголовокОстатки");
	ОбластьЗаголовокТаблицыОстатков = Макет.ПолучитьОбласть("ЗаголовокТаблицыОстатков");
	ОбластьСтрокаОстаток = Макет.ПолучитьОбласть("СтрокаОстаток");
	
	Если РежимВебСервиса Тогда
		
		ОбластьОписание.Параметры.Заполнить(ПараметрыТовара);
		
		ОбластьОписание.Параметры.Характеристика = ТекущаяСтрокаСканирования.НаименованиеХарактеристики;
		
		Если Не ЗначениеЗаполнено(ПараметрыТовара.Упаковка) Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.ЕдиницаИзмерения) Тогда
				ОбластьОписание.Параметры.Упаковка = НСтр("ru = '<нет>'");
			Иначе
				ОбластьОписание.Параметры.Упаковка = ТекущаяСтрокаСканирования.НаименованиеЕдиницыИзмерения;
			КонецЕсли;
		Иначе
			ОбластьОписание.Параметры.Упаковка = ТекущаяСтрокаСканирования.НаименованиеУпаковки;
		КонецЕсли;
		
	Иначе
		
		ОбластьОписание.Параметры.Заполнить(ПараметрыТовара);
		
		Если Не ЗначениеЗаполнено(ПараметрыТовара.Упаковка) Тогда
			Если Не ЗначениеЗаполнено(ПараметрыТовара.ЕдиницаИзмерения) Тогда
				ОбластьОписание.Параметры.Упаковка = НСтр("ru = '<нет>'");
			Иначе
				ОбластьОписание.Параметры.Упаковка = ТекущаяСтрокаСканирования.НаименованиеЕдиницыИзмерения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара.Характеристика) Тогда
		ОбластьОписание.Параметры.Характеристика = НСтр("ru = '<не используются>'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара.Описание) Тогда
		ОбластьОписание.Параметры.Заполнить(Новый Структура("Описание", НСтр("ru = '<нет>'")));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара.Артикул) Тогда
		ОбластьОписание.Параметры.Артикул = НСтр("ru = '<нет>'");
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьОписание);
	
	// Вывести остатки товара.
	ТекстЗаголовкаОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Остатки, на складе: 
			|""%1"", 
			|в помещении: 
			|""%2""'"),
		?(РежимВебСервиса, ПараметрыРежима.НаименованиеСклада, Объект.Склад),
		?(РежимВебСервиса, ПараметрыРежима.НаименованиеПомещения, Объект.Помещение));
	
	ОбластьЗаголовокОстатки.Параметры.ТекстЗаголовкаОстатки = ТекстЗаголовкаОстатки;
	
	ТабДок.Вывести(ОбластьЗаголовокОстатки);
	ТабДок.Вывести(ОбластьЗаголовокТаблицыОстатков);
	
	ОстаткиТовара = ИнформацияОТоваре.ОстаткиТовара;
	
	Для Каждого СтрокаОстатков Из ОстаткиТовара Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОстаток.Параметры, СтрокаОстатков);
		ОбластьСтрокаОстаток.Параметры.Количество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), СтрокаОстатков.Количество, СтрокаОстатков.Упаковка);
		
		ТабДок.Вывести(ОбластьСтрокаОстаток);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя макета для формирования информации об излишках товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Строка - имя макета.
//
Функция ИмяМакетаИнформацииОбИзлишкахТоваров(Форма)
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
		Возврат "Информация_240х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение320х320 Тогда
		Возврат "Информация_320х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		Возврат "Информация_480х640";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает имя макета для формирования информации о ячейке.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Строка - имя макета.
//
Функция ИмяМакетаИнформацииОЯчейке(Форма)
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
		Возврат "ИнформацияОЯчейке_240х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение320х320 Тогда
		Возврат "ИнформацияОЯчейке_320х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		Возврат "ИнформацияОЯчейке_480х640";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает имя макета для формирования информации о товаре.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Строка - имя макета.
//
Функция ИмяМакетаИнформацииОТоваре(Форма)
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
		Возврат "ИнформацияОТоваре_240х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение320х320 Тогда
		Возврат "ИнформацияОТоваре_320х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		Возврат "ИнформацияОТоваре_480х640";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Выводит информацию о ячейке в табличный документ на странице "СтраницаИнформация".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - ячейка.
//
Процедура ВывестиИнформациюОЯчейке(Форма, Ячейка)
	
	Объект = Форма.Объект;
	ТабДок = Форма.ТаблицаИнформации;
	ПараметрыРежима = Форма.ПараметрыРежима;
	РежимВебСервиса = Форма.РежимВебСервиса;
	
	ТабДок.Очистить();
	
	ИмяМакета = ИмяМакетаИнформацииОЯчейке(Форма);
	Макет = Обработки.РабочееМестоРаботникаСклада.ПолучитьМакет(ИмяМакета);
	
	ОбластьОписание = Макет.ПолучитьОбласть("Описание");
	ОбластьСтрокаОстаток = Макет.ПолучитьОбласть("СтрокаОстаток");
	ОбластьЗаголовокОстатки = Макет.ПолучитьОбласть("ЗаголовокОстатки");
	ОбластьЗаголовокТаблицыОстатков = Макет.ПолучитьОбласть("ЗаголовокТаблицыОстатков");
	
	ОбластьОписание.Параметры.Заполнить(Ячейка);
	ТабДок.Вывести(ОбластьОписание);
	
	// Вывести остатки товара.
	ТекстЗаголовкаОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Остатки, на складе: 
			|""%1"", 
			|в помещении: 
			|""%2""'"),
		?(РежимВебСервиса, ПараметрыРежима.НаименованиеСклада, Объект.Склад),
		?(РежимВебСервиса, ПараметрыРежима.НаименованиеПомещения, Объект.Помещение));
	
	ОбластьЗаголовокОстатки.Параметры.ТекстЗаголовкаОстатки = ТекстЗаголовкаОстатки;
	
	ТабДок.Вывести(ОбластьЗаголовокОстатки);
	ТабДок.Вывести(ОбластьЗаголовокТаблицыОстатков);
	
	Если РежимВебСервиса Тогда
		ТоварыЯчейки = РабочееМестоРаботникаСкладаXDTO.ТоварыЯчейки(Форма, Ячейка);
	Иначе
		ТоварыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТоварыЯчейки(Объект.Склад, Объект.Помещение, Ячейка);
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТоварыЯчейки Цикл
		
		ТекстТовар = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1%2%3'"),
			?(РежимВебСервиса, СтрокаТовара.НаименованиеНоменклатуры, СтрокаТовара.Номенклатура),
			?(ЗначениеЗаполнено(СтрокаТовара.НаименованиеХарактеристики), ", " + СтрокаТовара.НаименованиеХарактеристики, ""),
			?(ЗначениеЗаполнено(СтрокаТовара.НаименованиеСерии), " , (серия: " + СтрокаТовара.НаименованиеСерии + ")", ""));
		
		ТекстКоличество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
			СтрокаТовара.Количество,
			?(ЗначениеЗаполнено(СтрокаТовара.НаименованиеУпаковки), 
				СтрокаТовара.НаименованиеУпаковки,
				СтрокаТовара.НаименованиеЕдиницыИзмерения));
		
		ОбластьСтрокаОстаток.Параметры.Товар = ТекстТовар;
		ОбластьСтрокаОстаток.Параметры.Количество = ТекстКоличество;
		
		ТабДок.Вывести(ОбластьСтрокаОстаток);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список кнопок кнопку перехода к списку заданий.
//
// Параметры:
//	Кнопки - СписокЗначений - список кнопок
//	ТипЗадания - Строка - тип задания.
//
Процедура ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ТипЗадания)
	
	Если ТипЗадания = "Отбор" Тогда
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаОтбор", 
			НСтр("ru = 'Перейти 
			|к выбору задания на отбор'"), Истина);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаРазмещение", 
			НСтр("ru = 'Перейти 
			|к выбору задания на размещение'"), Истина);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаПеремещение", 
			НСтр("ru = 'Перейти 
			|к выбору задания на перемещение'"), Истина);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаПересчет", 
			НСтр("ru = 'Перейти 
			|к выбору задания на пересчет'"), Истина);
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ОсновноеМенюПриемка", 
			НСтр("ru = 'Перейти 
			|к выбору задания на приемку'"), Истина);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ОсновноеМенюПроверкаОтбора", 
			НСтр("ru = 'Перейти 
			|к выбору задания на проверку отбора'"), Истина);
		
	Иначе
		
		КнопкаПерехода = НоваяКнопкаДиалога(
			"ПерейтиКВыборуСкладскойОперации", 
			НСтр("ru = 'Перейти 
			|к выбору операции'"), Истина);
		
	КонецЕсли;
	
	Кнопки.Добавить(КнопкаПерехода);
	
КонецПроцедуры

// Выполняет установку значений параметров режима.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ИнициализироватьПараметрыРежима(Форма)
	
	Параметры = Форма.Параметры;
	РежимВебСервиса = Форма.РежимВебСервиса;
	Форма.ПараметрыРежима = ПараметрыРежима();
	
	Если РежимВебСервиса Тогда
		Форма.ПараметрыРежима.НаименованиеСклада = Параметры.НаименованиеСклада;
		Форма.ПараметрыРежима.НаименованиеПомещения = Параметры.НаименованиеПомещения;
	КонецЕсли;
	
	Форма.ПараметрыРежима.ПорядокОбработки = Форма.ПорядокОбработкиСкладскогоЗадания;
	
	Форма.ПараметрыРежима.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Форма.Объект.Склад, Форма.Объект.Помещение);
	Форма.ПараметрыРежима.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Форма.Объект.Склад, Форма.Объект.Помещение);
	
КонецПроцедуры

// Устанавливает подсветку элемента формы.
//
// Параметры:
//	РазрешениеЭкрана - ПеречислениеСсылка.РазрешенияЭкрана
//	Элемент - КнопкаФормы - элемент формы.
//
Процедура ПодсветитьЭлемент(РазрешениеЭкрана, Элемент)
	
	Если (РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320) Тогда
		ПолужирныйШрифт = Новый Шрифт(,8, Истина);
	Иначе
		ПолужирныйШрифт = Новый Шрифт(,9,Истина);
	КонецЕсли;
	
	Элемент.ЦветФона = ЦветаСтиля.ФайлЗанятыйТекущимПользователем;
	Элемент.ЦветТекста = WebЦвета.Белоснежный;
	Элемент.Шрифт = ПолужирныйШрифт;
	
КонецПроцедуры

// Снимает подсветку с элемента формы.
//
// Параметры:
//	Элемент - КнопкаФормы - элемент формы.
//
Процедура СнятьПодсветкуЭлемента(Элемент)
	
	АвтоЦвет = Новый Цвет();
	АвтоШрифт = Новый Шрифт(,9);
	
	Элемент.ЦветФона = АвтоЦвет;
	Элемент.ЦветТекста = АвтоЦвет;
	Элемент.Шрифт = АвтоШрифт;
	
КонецПроцедуры

// Устанавливает подсветку элементов сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПодсветкуЭлементовСканирования(Форма)
	
	Элементы = Форма.Элементы;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	СнятьПодсветкуЭлемента(Элементы.СканированиеЯчейка);
	СнятьПодсветкуЭлемента(Элементы.СканированиеТовар);
	СнятьПодсветкуЭлемента(Элементы.СканированиеСерия);
	
	Если ПараметрСканирования = "Ячейка" Тогда
		ПодсветитьЭлемент(Форма.РазрешениеЭкрана, Элементы.СканированиеЯчейка);
	ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
		ПодсветитьЭлемент(Форма.РазрешениеЭкрана, Элементы.СканированиеТовар);
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		ПодсветитьЭлемент(Форма.РазрешениеЭкрана, Элементы.СканированиеСерия);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность кнопки ввода отсканированного количества товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеВвестиКоличество -КнопкаФормы - выполняет открытие страницы ввода количества товара.
//			** СканированиеНеОтгружать -КнопкаФормы - выполняет открытие страницы ввода количества неотгружаемого товара.
//
Процедура УстановитьДоступностьВводаКоличества(Форма)
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	ПараметрСканирования = ПараметрыРежима.ПараметрСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ДоступностьНеОтгружать = Ложь;
	ДоступностьВводаКоличества = Ложь;
	
	СерииУказываются = СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	СерииУказываютсяСправочно = СерииУказываютсяСправочно(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если ЭтоНаборТоваров 
		Или ТипЗадания = "Приемка"
		Или ТипЗадания = "Пересчет" Тогда
		
		Если ТипЗадания = "Приемка" Тогда
			
			Если СерииУказываются
				И СерииУказываютсяСправочно
				И СерияИдентифицируетЭкземплярТовара(ТекущаяСтрокаСканирования) Тогда
				
				ДоступностьВводаКоличества = Ложь;
				
			Иначе
				Если ПараметрСканирования = "Номенклатура" Тогда
					ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура);
				ИначеЕсли ПараметрСканирования = "Серия" Тогда
					ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ПараметрСканирования = "Номенклатура" Тогда
				ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура);
			ИначеЕсли ПараметрСканирования = "Серия" Тогда
				ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			СправочнаяСерияУникальна = СерииУказываютсяСправочно
										И СерияИдентифицируетЭкземплярТовара(ТекущаяСтрокаСканирования);
			
			Если Не СерииУказываются Тогда
				ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура);
			Иначе
				Если Не СправочнаяСерияУникальна Тогда
					ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия);
				КонецЕсли;
			КонецЕсли;
			
			ДоступностьНеОтгружать = ДоступностьВводаКоличества;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				Если ПараметрСканирования = "Ячейка" Тогда
					ДоступностьВводаКоличества = Истина;
				КонецЕсли;
			Иначе
				Если Не СерииУказываются Тогда
					ДоступностьВводаКоличества = ОтсканированныйТоварСовпадаетСТоваромСтрокиСканирования(
						ТекущаяСтрокаСканирования);
				Иначе
					ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия)
						И (ТекущаяСтрокаСканирования.Серия = ТекущаяСтрокаСканирования.СкСерия);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			Если ОтборОтсканирован И ЭтоПорядокОбработкиТоварЯчейка Тогда
				Если ПараметрСканирования = "Ячейка" Тогда
					ДоступностьВводаКоличества = Истина;
				КонецЕсли;
			Иначе
				Если Не СерииУказываются Тогда
					ДоступностьВводаКоличества = ОтсканированныйТоварСовпадаетСТоваромСтрокиСканирования(ТекущаяСтрокаСканирования);
				Иначе
					ДоступностьВводаКоличества = (ЗначениеЗаполнено(ТекущаяСтрокаСканирования.НомерСерии)
						Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.ГоденДо))
						И (ТекущаяСтрокаСканирования.НомерСерии = ТекущаяСтрокаСканирования.СкНомерСерии
							И ТекущаяСтрокаСканирования.ГоденДо = ТекущаяСтрокаСканирования.СкГоденДо);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не СерииУказываются Тогда
				ДоступностьВводаКоличества = ОтсканированныйТоварСовпадаетСТоваромСтрокиСканирования(ТекущаяСтрокаСканирования);
			Иначе
				ДоступностьВводаКоличества = (ЗначениеЗаполнено(ТекущаяСтрокаСканирования.НомерСерии)
					Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.ГоденДо))
					И (ТекущаяСтрокаСканирования.НомерСерии = ТекущаяСтрокаСканирования.СкНомерСерии
						И ТекущаяСтрокаСканирования.ГоденДо = ТекущаяСтрокаСканирования.СкГоденДо);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СканированиеВвестиКоличество.Доступность = ДоступностьВводаКоличества;
	Элементы.СканированиеНеОтгружать.Доступность  = ДоступностьНеОтгружать;
	
КонецПроцедуры

// Устанавливает доступность элемента сканирования "Серия".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеСерия -КнопкаФормы - декоративный элемент формы.
//
Процедура УстановитьДоступностьСерии(Форма)
	
	ДоступностьСерии = Форма.ИспользоватьСерииНоменклатуры;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	Элементы = Форма.Элементы;
	
	Если Форма.ИспользоватьСерииНоменклатуры
		И ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура)
		И Не СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий)
			Или Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
		
		ДоступностьСерии = Ложь;
		
	КонецЕсли;
	
	Элементы.СканированиеСерия.Доступность = ДоступностьСерии;
	
КонецПроцедуры

// Устанавливает доступность элемента сканирования "Назначение".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеНазначение -КнопкаФормы - выполняет открытие страницы указания обособленного назначения номенклатуры.
//
Процедура УстановитьДоступностьНазначения(Форма)
	
	Элементы = Форма.Элементы;
	ДоступностьНазначения = Истина;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если Не Форма.Объект.ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьНазначения =
		Не ТипЗадания = "Отбор"
		И (Не ТипЗадания = "Размещение"
			Или (Форма.ПараметрыРежима.НаборТоваров))
		И Не ТипЗадания = "Перемещение"
		И (Не ОтображатьЭлементСканирования(Форма, "Ячейка")
			Или ЭтоПорядокОбработкиТоварЯчейка
			Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкЯчейка))
		И ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура)
		И (Не СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий)
			Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия)
			Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНомерСерии)
			Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкГоденДо))
		И Не ЭтоТара(ТекущаяСтрокаСканирования);
	
	Элементы.СканированиеНазначение.Доступность = ДоступностьНазначения;
	
КонецПроцедуры

// Устанавливает текст заголовка элемента сканирования ячейки
// на странице сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеЯчейка -КнопкаФормы - декоративный элемент формы.
//
Процедура УстановитьЗаголовокЯчейки(Форма)
	
	Элементы = Форма.Элементы;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	ЗаголовокЯчейки = "";
	
	Если ТипЗадания = "Приемка" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкЯчейка) Тогда
			
			ЗаголовокЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ячейка: %1'"),
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.СкЯчейка));
			
		Иначе
			ЗаголовокЯчейки = НСтр("ru = '<Зона приемки (отгрузки)>'");
		КонецЕсли;
	Иначе
		Если ТипЗадания = "Размещение" Тогда
			
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				Если ПараметрСканирования = "Номенклатура"
					Или ПараметрСканирования = "Серия" Тогда
					
					ЗаголовокЯчейки = НСтр("ru = '<Ячейка>'");
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				Если ОтборОтсканирован Тогда
					Если ПараметрСканирования = "Номенклатура" 
						Или ПараметрСканирования = "Серия" Тогда
						
						ЗаголовокЯчейки = НСтр("ru = '<Ячейка>'");
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаголовокЯчейки) Тогда
		
		ЗаголовокЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ячейка (%1 из %2): %3'"),
			ТекущаяСтрокаСканирования.НомерЯчейки,
			ТекущаяСтрокаСканирования.КоличествоЯчеек,
			?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
		
	КонецЕсли;
	
	Элементы.СканированиеЯчейка.Заголовок = ЗаголовокЯчейки;
	
КонецПроцедуры

// Формирует и устанавливает значение заголовка на элементе сканирования "Товар".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеТовар -КнопкаФормы - выполняет открытие страницы вывода информации о товаре.
//
Процедура УстановитьЗаголовокТовара(Форма)
	
	Элементы = Форма.Элементы;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	ЭтоНеизвестныйШтрихкод = ЭтоНеизвестныйШтрихкод(ТекущаяСтрокаСканирования);
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	ЗаголовокТовара = "";
	
	Если ЭтоНаборТоваров Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура)
			Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.УпаковочныйЛист) Тогда
			
			ЗаголовокТовара = НСтр("ru = 'Добавлен: [УпаковочныйЛист] [Номенклатура] [Характеристика]'");
			
		ИначеЕсли ЭтоНеизвестныйШтрихкод Тогда
			ЗаголовокТовара = НСтр("ru = 'Добавлен штрихкод: [Штрихкод]'");
		ИначеЕсли Форма.ИспользоватьУпаковочныеЛисты 
			И ТипЗадания = "Приемка" Тогда
			
			ЗаголовокТовара = НСтр("ru = '<Товар / Упаковочный лист>'");
			
		Иначе
			ЗаголовокТовара = НСтр("ru = '<Товар>'");
		КонецЕсли;
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ЗаголовокТовара, ТекущаяСтрокаСканирования);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
			ЗаголовокТовара = НСтр("ru = '<Товар>'");
		Иначе
			ЗаголовокТовара = НСтр("ru = 'Отсканирован: [Номенклатура] [Характеристика]'");
		КонецЕсли;
		
		Если РежимВебСервиса
			И ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
			
			ЗаголовокТовара = НСтр("ru = 'Отсканирован: [НаименованиеНоменклатуры] [НаименованиеХарактеристики]'");
			
		КонецЕсли;
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ЗаголовокТовара, ТекущаяСтрокаСканирования);
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			?(РежимВебСервиса,
				НСтр("ru = 'Взять ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [НаименованиеНоменклатуры] 
					|[НаименованиеХарактеристики]'"),
				НСтр("ru = 'Взять ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] [Характеристика]'")),
			ТекущаяСтрокаСканирования);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если ЭтоПорядокОбработкиТоварЯчейка
			И (ТекущаяСтрокаСканирования = Неопределено)
			Или Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура)
			Или СтрокаЗаданияОтсканирована(ТекущаяСтрокаСканирования, Форма.ПараметрыРежима)
			И Не ПараметрСканирования = "Ячейка" Тогда
			
			ЗаголовокТовара = НСтр("ru = '<Товар>'");
			
		Иначе
			
			ЗаголовокТовара = ?(РежимВебСервиса,
				НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): 
					|[НаименованиеНоменклатуры] [НаименованиеХарактеристики]'"),
				НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] 
					|[Характеристика]'"));
			
		КонецЕсли;
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ЗаголовокТовара, ТекущаяСтрокаСканирования);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			
			ЗаголовокТовара = ?(РежимВебСервиса,
				НСтр("ru = 'Взять ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): 
					|[НаименованиеНоменклатуры] [НаименованиеХарактеристики]'"),
				НСтр("ru = 'Взять ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] 
					|[Характеристика]'"));
			
		Иначе
			
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				Если (ТекущаяСтрокаСканирования = Неопределено)
					Или Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) 
					Или СтрокаЗаданияОтсканирована(ТекущаяСтрокаСканирования, Форма.ПараметрыРежима)
					И Не ПараметрСканирования = "Ячейка" Тогда
					
					ЗаголовокТовара = НСтр("ru = '<Товар>'");
					
				Иначе
					
					ЗаголовокТовара = ?(РежимВебСервиса,
						НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): 
							|[НаименованиеНоменклатуры] [НаименованиеХарактеристики]'"),
						НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] 
							|[Характеристика]'"));
					
				КонецЕсли;
			Иначе
				
				ЗаголовокТовара = ?(РежимВебСервиса,
					НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): 
						|[НаименованиеНоменклатуры] [НаименованиеХарактеристики]'"),
					НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] 
						|[Характеристика]'"));
				
			КонецЕсли
			
		КонецЕсли;
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ЗаголовокТовара, ТекущаяСтрокаСканирования);
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			?(РежимВебСервиса,
				НСтр("ru = 'Товар: [НаименованиеНоменклатуры] [НаименованиеХарактеристики]'"),
				НСтр("ru = 'Товар: [Номенклатура] [Характеристика]'")),
			ТекущаяСтрокаСканирования);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ЗаголовокТовара = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		?(РежимВебСервиса,
			НСтр("ru = 'Товар: [НаименованиеНоменклатуры] [НаименованиеХарактеристики]'"),
			НСтр("ru = 'Товар: [Номенклатура] [Характеристика]'")),
		ТекущаяСтрокаСканирования);
		
	КонецЕсли;
	
	Элементы.СканированиеТовар.Заголовок = ЗаголовокТовара;
	
КонецПроцедуры

// Формирует и устанавливает значение заголовка на элементе сканирования "Серия" 
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеСерия -КнопкаФормы - декоративный элемент формы.
//
Процедура УстановитьЗаголовокСерии(Форма)
	
	Элементы = Форма.Элементы;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	ИспользоватьСерииНоменклатуры = Форма.ИспользоватьСерииНоменклатуры;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	СерииУказываются = СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	СерииУказываютсяСправочно = СерииУказываютсяСправочно(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	Если Не ИспользоватьСерииНоменклатуры
		Или Не СерииУказываются Тогда
		
		Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия не указывается>'");
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
		Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия>'");
		Возврат;
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
			ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
		КонецЕсли;
	Иначе
		Если ТипЗадания = "Пересчет" Тогда
			
			Если ПараметрСканирования = "Серия" Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
					ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			ЗаголовокСерии = НСтр("ru = '<Серия>'");
			
			Если СерииУказываютсяСправочно Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
					ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
				КонецЕсли;
			ИначеЕсли СерииУказываются Тогда
				ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
				Если ЭтоПорядокОбработкиТоварЯчейка Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия) Тогда
						ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
					Иначе
						 ЗаголовокСерии = НСтр("ru = '<Серия>'");
					КонецЕсли;
				Иначе
					ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.НомерСерии)
				Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.ГоденДо) Тогда
				
				Если ОтборОтсканирован 
					И ЭтоПорядокОбработкиТоварЯчейка Тогда
					
					Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНомерСерии)
						Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкГоденДо) Тогда
						
						ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
						
					КонецЕсли;
					
				Иначе
					ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.НомерСерии)
				Или ЗначениеЗаполнено(ТекущаяСтрокаСканирования.ГоденДо) Тогда
				
				ЗаголовокСерии = НСтр("ru = 'Серия: %1'");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаголовокСерии) Тогда
		ЗаголовокСерии = НСтр("ru = '<Серия>'");
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Перемещение" Тогда
		
		ПредставлениеСерии = УстановитьПредставлениеСерии(ТекущаяСтрокаСканирования);
		
		ЗаголовокСерии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСерии,
			ПредставлениеСерии);
		
	Иначе
		Если ЭтоНаборТоваров Тогда
			ЗаголовокСерии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСерии, ТекущаяСтрокаСканирования.Серия);
		Иначе
			ТекущаяСтрокаСканирования.НаименованиеСерии = УстановитьПредставлениеСерии(ТекущаяСтрокаСканирования);
			
			ЗаголовокСерии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСерии,
				?(РежимВебСервиса, ТекущаяСтрокаСканирования.НаименованиеСерии, ТекущаяСтрокаСканирования.Серия));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СканированиеСерия.Заголовок = ЗаголовокСерии;
	
КонецПроцедуры

// Формирует и устанавливает значение заголовка на элементе сканирования "Количество не отгружать".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеНеОтгружать -КнопкаФормы - выполняет открытие страницы ввода количества неотгружаемого товара.
//
Процедура УстановитьЗаголовокКоличестваНеОтгружать(Форма)
	
	Элементы = Форма.Элементы;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Элементы.СканированиеНеОтгружать.Заголовок = "";
	
	Если Не (ТипЗадания = "ПроверкаОтбора") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СканированиеНеОтгружать.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать;
	
КонецПроцедуры

// Формирует и устанавливает значение заголовка на элементе сканирования "Количество в документе".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** НадписьКоличествоВДокументе -ПолеФормы - отражает количество товаров в складском задании.
//
Процедура УстановитьЗаголовокКоличестваВДокументе(Форма)
	
	Элементы = Форма.Элементы;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	СерииУказываются = СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	Элементы.НадписьКоличествоВДокументе.Заголовок = "<>";
	
	Если ТипЗадания = "Размещение" Тогда
		Если Не ЭтоНаборТоваров
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если СерииУказываются Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия) Тогда
					Элементы.НадписьКоличествоВДокументе.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Элементы.НадписьКоличествоВДокументе.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
		КонецЕсли;
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		Элементы.НадписьКоличествоВДокументе.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
	Иначе
		Элементы.НадписьКоличествоВДокументе.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
	КонецЕсли;
	
КонецПроцедуры

// Формирует и устанавливает значение заголовка на элементе сканирования "Количество".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** НадписьВзять -ПолеФормы - отражает количество товара, которое требуется отобрать из складской ячейки.
//			** НадписьВзяли -ПолеФормы - отражает количество отобранного товара из складской ячейки.
//			** НадписьУпаковка -ПолеФормы - отражает наименование упаковки товара.
//			** НадписьКоличествоУпаковок -ПолеФормы - отражает количество упаковок товара складского задания.
//			** СканированиеВвестиКоличество -КнопкаФормы - выполняет открытие страницы указания количества товара.
//
Процедура УстановитьЗаголовокКоличества(Форма)
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоУпаковочныйЛист = ЭтоУпаковочныйЛист(ТекущаяСтрокаСканирования);
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	// Очистить все заголовки.
	Элементы.НадписьВзять.Заголовок = "";
	Элементы.НадписьВзяли.Заголовок = "";
	Элементы.НадписьУпаковка.Заголовок = "";
	Элементы.НадписьКоличествоУпаковок.Заголовок = "";
	Элементы.СканированиеВвестиКоличество.Заголовок = "";
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Упаковка) Тогда
		Элементы.НадписьУпаковка.Заголовок = ?(Форма.РежимВебСервиса, ТекущаяСтрокаСканирования.НаименованиеУпаковки,
			ТекущаяСтрокаСканирования.Упаковка);
	ИначеЕсли ЭтоУпаковочныйЛист Тогда
		Элементы.НадписьУпаковка.Заголовок = НСтр("ru = 'место'");
	Иначе
		Элементы.НадписьУпаковка.Заголовок = ?(Форма.РежимВебСервиса, ТекущаяСтрокаСканирования.НаименованиеЕдиницыИзмерения,
			ТекущаяСтрокаСканирования.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		
		Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Доб.:'");
		Иначе
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Добавлено:'");
		КонецЕсли;
		
		Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Отск.:'");
		Иначе
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Отсканировано:'");
		КонецЕсли;
		Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Взять:'");
		Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Взяли:'");
		
		Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
		Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если ЭтоПорядокОбработкиТоварЯчейка Тогда
			Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Осталось:'");
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Кладу:'");
			
			Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
			Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе - 
				ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили - ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
		Иначе
			Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Положить:'");
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Положили:'");
			
			Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
			Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Взять:'");
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Взяли:'");
			
			Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
			Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		Иначе
			Если ЭтоПорядокОбработкиТоварЯчейка Тогда
				
				Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Осталось:'");
				Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Кладу:'");
				Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
				
				Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок - 
					ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили - ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
			Иначе
				Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Положить:'");
				Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Положили:'");
				
				Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
				Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'В налич.:'");
		Иначе
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'В наличии:'");
		КонецЕсли;
		Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		
	Иначе
		Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Взять:'");
		Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
	КонецЕсли;
	
КонецПроцедуры

// Формирует и устанавливает значение заголовка на элементе сканирования "Серия" 
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СканированиеНазначение -КнопкаФормы - выполняет открытие страницы указания обособленного назначения номенклатуры.
//
Процедура УстановитьЗаголовокНазначения(Форма)
	
	Если Не Форма.Объект.ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Возврат;
	КонецЕсли;
	
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЗаголовокНазначения = НСтр("ru = '<Назначение>'");
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Назначение) Тогда
			ЗаголовокНазначения = НСтр("ru = '%1'");
		Иначе
			ЗаголовокНазначения = НСтр("ru = '<без назначения>'");
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокНазначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокНазначения,
		?(РежимВебСервиса, ТекущаяСтрокаСканирования.НаименованиеНазначения, ТекущаяСтрокаСканирования.Назначение));
	
	Форма.Элементы.СканированиеНазначение.Заголовок = ЗаголовокНазначения;
	
КонецПроцедуры

// Устанавливает цвет элементов сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьЦветаЭлементовСканирования(Форма)
	
	Форма.Элементы.СканированиеВвестиКоличество.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	
КонецПроцедуры

// Добавляет кнопки команд на страницу диалогового сообщения пользователю.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Кнопка - Структура - параметры кнопки.
//
Процедура ДобавитьКнопкуДиалогаСообщения(Форма, Кнопка)
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЦветВыделенияРамки = ЦветаСтиля.ЦветТекстаФормы;
	ИмяЭлемента = "Кнопка" + Кнопка.ИмяКоманды; 
	
	НоваяКнопка = Форма.Элементы.Добавить(
		ИмяЭлемента, 
		Тип("КнопкаФормы"), 
		Форма.Элементы.ГруппаКомандыДействий);
	
	НоваяКнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
		НоваяКнопка.Ширина = 20;
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение320х320 Тогда
		НоваяКнопка.Ширина = 25;
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		НоваяКнопка.Ширина = 44;
	КонецЕсли;
	
	НоваяКнопка.Высота = 2;
	НоваяКнопка.АвтоМаксимальнаяВысота = Истина;
	
	НоваяКнопка.Заголовок = Кнопка.Представление;
	НоваяКнопка.ИмяКоманды = Кнопка.ИмяКоманды;
	
	Если Кнопка.Выделить Тогда
		НоваяКнопка.Шрифт = Новый Шрифт(Форма.Элементы[ИмяЭлемента].Шрифт, , , Истина);
		НоваяКнопка.ЦветРамки = ЦветВыделенияРамки;
	КонецЕсли;
	
КонецПроцедуры

// Получает значения элементов подсказки пользователю. В зависимости от типа задания устанавливает
// значения элементов подсказки в соответствующий падеж.
//
// Параметры:
//	ТипЗадания - Строка - тип задания,
//	ОтборОтсканирован - Булево - признак завершения сканирования отбора при перемещении,
//	ПредставлениеТипаЗадания - Неопределено - переменная в которую записывается тип задания,
//	ТипВыполнения - Неопределено - переменная, в которую записывается тип выполнения,
//	ТипДействия - Неопределено - переменная в которую записывается тип действия.
//
Процедура ПолучитьЗначенияЭлементовСообщенияПользователю(ТипЗадания, ОтборОтсканирован, 
	ПредставлениеТипаЗадания = "", ТипВыполнения = "", ТипДействия = "")
	
	Если ТипЗадания = "Отбор" Тогда
		
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		ТипВыполнения = НСтр("ru = 'отбора'");
		ТипДействия   = НСтр("ru = 'отбор'");
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		ТипВыполнения = НСтр("ru = 'размещения'");
		ТипДействия   = НСтр("ru = 'размещение'");
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		Если ОтборОтсканирован Тогда
			ТипВыполнения = НСтр("ru = 'отбора'");
			ТипДействия   = НСтр("ru = 'отбор'");
		Иначе
			ТипВыполнения = НСтр("ru = 'размещения'");
			ТипДействия = НСтр("ru = 'размещение'");
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		ТипВыполнения = НСтр("ru = 'пересчета'");
		ТипДействия = НСтр("ru = 'пересчет'");
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ПредставлениеТипаЗадания = НСтр("ru = 'приемку'");
		
		ТипВыполнения = НСтр("ru = 'приемки'");
		ТипДействия = НСтр("ru = 'приемку'");
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ПредставлениеТипаЗадания = НСтр("ru = 'проверки отбора'");
		
		ТипВыполнения = НСтр("ru = 'проверки отбора'");
		ТипДействия = НСтр("ru = 'проверку отбора'");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру - параметры команды с назначенной горячей клавишей.
//
// Параметры:
//	ГорячаяКлавиша - Клавиша - "горячая" клавиша.
//	ИмяКоманды - Строка - имя команды.
//	ИмяЭлемента - Строка - имя элемента, который относится к команде.
//
// Возвращаемое значение:
//	Структура - параметры команды, которые содержат следующие поля:
//		* СочетаниеКлавиш - СочетаниеКлавиш - сочетание клавш, назначаемое команде.
//		* ИмяКоманды - Строка - имя команды.
//		* ИмяЭлемента - Строка - имя элемента, который привязан к команде.
//
Функция ПараметрыКоманды(ГорячаяКлавиша, ИмяКоманды, ИмяЭлемента = "")
	
	СтруктураПараметров = Новый Структура("СочетаниеКлавиш, ИмяКоманды, ИмяЭлемента");
	
	СтруктураПараметров.СочетаниеКлавиш = Новый СочетаниеКлавиш(ГорячаяКлавиша);
	СтруктураПараметров.ИмяКоманды = ИмяКоманды;
	СтруктураПараметров.ИмяЭлемента = ?(ЗначениеЗаполнено(ИмяЭлемента), ИмяЭлемента, ИмяКоманды);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает массив - имена команд для которых нужно установить горячие клавиши.
// Имена команд располагаются в порядке их следования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяСтраницы - Строка - имя страницы.
//	УдалитьКлавиши - Булево
//
// Возвращаемое значение:
//	Массив из см. ПараметрыКоманды - массив структур параметров команды.
//
Функция ПараметрыКомандНаСтраницеФормы(Форма, ИмяСтраницы, УдалитьКлавиши = Ложь)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	МассивКоманд = Новый Массив;
	
	Если ИмяСтраницы = "СтраницаВыборОперации" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ОсновноеМенюПриемка"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "ОсновноеМенюРазмещение"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "ОсновноеМенюОтбор"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "ОсновноеМенюПересчет"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СоздатьНовоеСкладскоеЗадание"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._5, "ОсновноеМенюПроверкаОтбора"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._6, "ОсновноеМенюПеремещение"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._7, "ОсновноеМенюИнформация"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._8, "ОсновноеМенюОбновить"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._9, "ОсновноеМенюОтметитьЯчейкуКПересчету"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыборЗадания" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ЗаданияВыбрать"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "ЗаданияПоказатьВсе"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "ЗаданияОбновить"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "ЗаданияПерейтиВОсновноеМеню"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаЗапросИнформации" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ИнформацияЗакрыть"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаСканирование" Тогда
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СканированиеТовар"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СканированиеНазначение"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "СканированиеНеОтгружать", "НадписьОтложено"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "СканированиеВвестиКоличество", "НадписьВзяли"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СканированиеДействия"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._5, "СканированиеВвестиЗначение"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._6, "СканированиеСервис"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._7, "СканированиеДалее"));
			
		Иначе
			
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СканированиеТовар"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СканированиеНазначение"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "СканированиеВвестиКоличество", "НадписьВзяли"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "СканированиеДействия"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СканированиеВвестиЗначение"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._5, "СканированиеСервис"));
			
			Если ЭтоНаборТоваров Тогда
				МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._6, "СканированиеДалее"));
			Иначе
				МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._6, "СканированиеОтметитьЯчейкуКПересчету"));
				МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._7, "СканированиеДалее"));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаСообщение" Тогда
		
		// На странице сообщений кнопки формируются динамически и привязываются к разным командам.
		// Чтобы получить список параметров команд, нужно пройти по всем элементам группы.
		
		СчетчикДоступныхКоманд = 0;
		
		Для каждого КнопкаФормы Из Форма.Элементы.ГруппаКомандыДействий.ПодчиненныеЭлементы Цикл
			Если СчетчикДоступныхКоманд <= 9 Тогда
				ГорячаяКлавиша = Клавиша["_" + СчетчикДоступныхКоманд];
				СчетчикДоступныхКоманд = СчетчикДоступныхКоманд + 1;
				МассивКоманд.Добавить(ПараметрыКоманды(ГорячаяКлавиша, КнопкаФормы.ИмяКоманды, КнопкаФормы.Имя));
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСтраницы = "СтраницаСервис" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СервисПродолжитьСканирование"));
		
		Если ИзменениеСхемыСканированияСерийДоступно(Форма, УдалитьКлавиши) Тогда
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СервисРежимСканированияСерийТСТ"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "СервисРежимСканированияСерийТВТ"));
		КонецЕсли;
		
		Если ИзменениеПорядкаОбходаДоступно(Форма) Тогда
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "СервисПорядокОбработкиТоварЯчейка"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СервисПорядокОбработкиЯчейкаТовар"));
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыборЗоныПриемкиОтгрузки" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ВыбратьЗонуПриемкиРазмещения"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "ОтменитьВыборЗоныПриемкиРазмещения"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыборНазначения" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "НазначенияВыбрать"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "НазначенияВернуться"));
		
	КонецЕсли;
	
	Возврат МассивКоманд;
	
КонецФункции

// Устанавливает горячую клавишу команды.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ПараметрыКоманды - см. ПараметрыКоманды
//
Процедура УстановитьГорячуюКлавишуКоманды(Форма, ПараметрыКоманды)
	
	// Установить горячую клавишу команды.
	Команда = Форма.Команды[ПараметрыКоманды.ИмяКоманды]; // КомандаФормы
	Команда.СочетаниеКлавиш = ПараметрыКоманды.СочетаниеКлавиш;
	
	// Установить заголовок связанного элемента, если он существует.
	Элемент = Форма.Элементы.Найти(ПараметрыКоманды.ИмяЭлемента);
	
	Если Не (Элемент = Неопределено) Тогда
		// ... в заголовке элемента необходимо заменить только участок горячей клавиши.
		ЗаголовокЭлемента = Элемент.Заголовок;
		ПредставлениеГК = ПредставлениеСочетанияКлавиш(ПараметрыКоманды.СочетаниеКлавиш);
		
		ЗаголовокКоманды = Команда.Заголовок;
		
		Если Не ЗначениеЗаполнено(ЗаголовокЭлемента)
			И Не ЗначениеЗаполнено(ЗаголовокКоманды) Тогда
			
			ЗаголовокЭлемента = ПредставлениеГК + ".";
			
		Иначе
			ЗаголовокЭлемента = ?(ЗначениеЗаполнено(ЗаголовокЭлемента), ЗаголовокЭлемента, ЗаголовокКоманды);
			ЗаголовокЭлемента = ВключитьГорячуюКлавишуВЗаголовокЭлемента(ЗаголовокЭлемента, ПредставлениеГК);
		КонецЕсли;
		
		Элемент.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;
	
КонецПроцедуры

// Включает код горячей клавиши в заголовок элемента.
//
// Параметры:
//	ЗаголовокЭлемента - Строка - заголовок элемента.
//	ПредставлениеГК - Строка - представление кода горячей клавиши.
//
Функция ВключитьГорячуюКлавишуВЗаголовокЭлемента(Знач ЗаголовокЭлемента, ПредставлениеГК)
	
	Если Не ЗначениеЗаполнено(ПредставлениеГК) Тогда
		Возврат ЗаголовокЭлемента;
	КонецЕсли;
	
	// В заголовке элемента, которому назначена горячая клавиша первый символ - цифра, второй - точка.
	ЗаголовокЭлемента = СокрЛП(ЗаголовокЭлемента);
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(ЗаголовокЭлемента, 1)) 
		И Сред(ЗаголовокЭлемента, 2, 1) = "." Тогда
		// Заголовок элемента уже содержит код горячей клавиши.
		ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2", ПредставлениеГК + ".", Сред(ЗаголовокЭлемента, 3));
	Иначе
		// Не содержит код горячей клавиши.
		ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2", ПредставлениеГК + ".", ЗаголовокЭлемента);
	КонецЕсли;
	
	Возврат ЗаголовокЭлемента;
	
КонецФункции

// Удаляет все горячие клавиши на странице, т.к. горячая клавиша действует в пределах
// всей формы, даже если страница скрыта.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяСтраницы - Строка - имя страницы.
//
Процедура УдалитьГорячиеКлавишиНаСтранице(Форма, ИмяСтраницы)
	
	ПараметрыКоманд = ПараметрыКомандНаСтраницеФормы(Форма, ИмяСтраницы, Истина);
	ПустоеСочетание = Новый СочетаниеКлавиш(Клавиша.Нет);
	
	Для каждого ПараметрыКоманды Из ПараметрыКоманд Цикл
		Форма.Команды[ПараметрыКоманды.ИмяКоманды].СочетаниеКлавиш = ПустоеСочетание;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет все горячие клавиши на всех страницах, т.к. горячая клавиша действует в пределах
// всей формы, даже если страница скрыта.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СтраницыФормы -ГруппаФормы - группа, содержащая страницы формы рабочего места работника склада.
//
Процедура УдалитьВсеГорячиеКлавиши(Форма)
	
	Элементы = Форма.Элементы;
	
	Для каждого Страница Из Элементы.СтраницыФормы.ПодчиненныеЭлементы Цикл
		ИмяСтраницы = Страница.Имя;
		УдалитьГорячиеКлавишиНаСтранице(Форма, ИмяСтраницы);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает горячие клавиши для команд на элементах текущей страницы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СтраницыФормы - ГруппаФормы - группа, содержащая страницы формы рабочего места работника склада.
//
Процедура УстановитьГорячиеКлавишиНаТекущейСтранице(Форма)
	
	Элементы = Форма.Элементы;
	
	УдалитьВсеГорячиеКлавиши(Форма);
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница; // ГруппаФормы
	
	ПараметрыКоманд = ПараметрыКомандНаСтраницеФормы(Форма, ТекущаяСтраница.Имя);
	
	Для каждого ПараметрыКоманды Из ПараметрыКоманд Цикл
		УстановитьГорячуюКлавишуКоманды(Форма, ПараметрыКоманды);
	КонецЦикла;
	
КонецПроцедуры

// Очищает историю переходов по страницам. Вызывается в тот момент,
// когда пользователь возвращается в основное меню.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОчиститьИсториюПереходовПоСтраницам(Форма)
	
	Форма.ПереходыПоСтраницам.Очистить();
	
КонецПроцедуры

// Вызывается при переходе на страницу формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяСтраницы - Строка - имя страницы.
//
Процедура ПриПереходеНаСтраницу(Форма, ИмяСтраницы)
	
	ПереходыПоСтраницам = Форма.ПереходыПоСтраницам;
	
	Если ИмяСтраницы = "СтраницаСканирование" 
		Или ИмяСтраницы = "СтраницаВыборОперации" Тогда
		
		ПереходыПоСтраницам.Очистить();
		
	КонецЕсли;
	
	Если ПереходыПоСтраницам.Количество() = 0 Тогда
		
		НоваяСтрока = ПереходыПоСтраницам.Добавить();
		
		НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
		НоваяСтрока.ЗаголовокСтраницы = Форма.Заголовок;
		
	Иначе
		
		Отбор = Новый Структура("ИмяСтраницы", ИмяСтраницы);
		МассивСтрок = ПереходыПоСтраницам.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			НоваяСтрока = ПереходыПоСтраницам.Добавить();
			
			НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
			НоваяСтрока.ЗаголовокСтраницы = Форма.Заголовок;
			
		Иначе
			
			ВГраница = ПереходыПоСтраницам.Количество() - 1;
			
			Для ТекИндекс = 0 По ВГраница Цикл
				
				ОбрИндекс = ВГраница - ТекИндекс;
				
				СтрокаСтраницы = ПереходыПоСтраницам[ОбрИндекс];
				
				Если СтрокаСтраницы.ИмяСтраницы = ИмяСтраницы Тогда
					Прервать;
				Иначе
					ПереходыПоСтраницам.Удалить(ОбрИндекс);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак доступности изменения схемы сканирования товаров текущего задания.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	УдалитьКлавиши - Булево
//
// Возвращаемое значение:
//	Булево - Признак доступности изменения схемы сканирования товаров.
//
Функция ИзменениеСхемыСканированияСерийДоступно(Форма, УдалитьКлавиши = Ложь)
	
	Если (Форма.ПараметрыРежима.ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка)
		И Не УдалитьКлавиши Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	ЭтоОтбор = (ТипЗадания = "Отбор");
	ЭтоПриемка = (ТипЗадания = "Приемка");
	ЭтоРазмещение = (ТипЗадания = "Размещение");
	ЭтоПеремещение = (ТипЗадания = "Перемещение");
	ЭтоЗаданиеНаПересчет = (ТипЗадания = "Пересчет");
	ЭтоПроверкаОтбора = (ТипЗадания = "ПроверкаОтбора");
	
	Возврат (ЭтоОтбор
		Или ЭтоПриемка
		Или ЭтоНаборТоваров
		Или ЭтоРазмещение
		Или ЭтоПеремещение
		Или ЭтоПроверкаОтбора
		Или ЭтоЗаданиеНаПересчет);
	
КонецФункции

// Возвращает признак доступности изменения порядка обхода товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Признак доступности изменения порядка обхода товаров.
//
Функция ИзменениеПорядкаОбходаДоступно(Форма)
	
	ЭтоНабор = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	Если ЭтоНабор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ((ТипЗадания = "Размещение")
		Или (ТипЗадания = "Перемещение"
			И ОтборОтсканирован)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Форма.ПараметрыРежима.ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка Тогда
		Если Не (ПараметрСканирования = "Номенклатура") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПараметрыРежима.ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ЯчейкаТовар Тогда
		Если Не (ПараметрСканирования = "Ячейка") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает строку - представление товара.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//	Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//
// Возвращаемое значение:
//	Строка - представление товара.
//
Функция ПредставлениеТовара(Номенклатура = Неопределено, Характеристика = Неопределено, Упаковка = Неопределено)
	
	Представление = ?(ЗначениеЗаполнено(Номенклатура), Строка(Номенклатура), "") + 
		?(ЗначениеЗаполнено(Характеристика), ", " + Характеристика, "") + 
		?(ЗначениеЗаполнено(Упаковка), ", " + Упаковка, "");
	
	Возврат Представление;
	
КонецФункции

// Дополняет текст заголовка формы необходимым количеством символов,
// для того чтобы текст заголовка отображался в середине формы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЦентрироватьТекстЗаголовкаФормы(Форма)
	
	СимволВыравниванияЛев = ".:";
	СимволВыравниванияПрав = ":.";
	ТекстЗаголовка = Форма.Заголовок;
	
	Если Не ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = СокрЛП(ТекстЗаголовка);
	ДлинаТекста = СтрДлина(ТекстЗаголовка);
	
	Если ДлинаТекста >= Форма.ДлинаТекстаЗаголовкаФормыДляСравнения Тогда
		Возврат;
	КонецЕсли;
	
	КолСимволовДополнения = Цел((Форма.ДлинаТекстаЗаголовкаФормы - ДлинаТекста - 4) / 2);
	СтрокаДополнения = "";
	
	НедостающиеСимволы = 0;
	Если КолСимволовДополнения > 10 Тогда
		НедостающиеСимволы = Цел((Форма.ДлинаТекстаЗаголовкаФормы - 4 - (КолСимволовДополнения + ДлинаТекста)) / 2);
	КонецЕсли;
	
	КолСимволовДополнения = КолСимволовДополнения + НедостающиеСимволы;
	
	// Дополнить строку заголовка пробелами.
	Пока КолСимволовДополнения > 0 Цикл
		СтрокаДополнения = СтрокаДополнения + " ";
		КолСимволовДополнения = КолСимволовДополнения - 1;
	КонецЦикла;
	
	ТекстЗаголовкаФормы = СимволВыравниванияЛев + СтрокаДополнения + ТекстЗаголовка + СтрокаДополнения +
		СимволВыравниванияПрав;
	
	Форма.Заголовок = ТекстЗаголовкаФормы;
	
КонецПроцедуры

// Возвращает количество упаковок "не отгружать" с учетом недопустимости превышения количества упаковок "в наличии" (отсканировано)
//	и недопустимости отгружать товары в количестве, превышающем количество в документе.
//
// Параметры:
//	СтрокаСканирования - см. СтрокаСканирования
//	ДопустимоеОтклонениеОтбираемыхТоваров - Число
//
// Возвращаемое значение:
//	Число - скорректированное количество неотгружаемых упаковок.
//
Функция СкорректированноеКоличествоУпаковокНеОтгружать(СтрокаСканирования, ДопустимоеОтклонениеОтбираемыхТоваров = 0)
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	ЭтоМерныйТовар = МерныеЕдиницыИзмерения.Найти(СтрокаСканирования.ТипИзмеряемойВеличины) <> Неопределено;
	
	Если ЭтоМерныйТовар Тогда
		ПредельноеКоличествоОтгружаемогоТовара = СтрокаСканирования.КоличествоУпаковокВДокументе +
			СтрокаСканирования.КоличествоУпаковокВДокументе * ДопустимоеОтклонениеОтбираемыхТоваров / 100;
		
		Если СтрокаСканирования.КоличествоУпаковокОтсканировано > ПредельноеКоличествоОтгружаемогоТовара Тогда
			Возврат Макс(СтрокаСканирования.КоличествоУпаковокОтсканировано - СтрокаСканирования.КоличествоУпаковокВДокументе,
				Мин(СтрокаСканирования.КоличествоУпаковокНеОтгружать, СтрокаСканирования.КоличествоУпаковокОтсканировано));
		Иначе
			Возврат Макс(СтрокаСканирования.КоличествоУпаковокОтсканировано - ПредельноеКоличествоОтгружаемогоТовара,
				Мин(СтрокаСканирования.КоличествоУпаковокНеОтгружать, СтрокаСканирования.КоличествоУпаковокОтсканировано));
		КонецЕсли;
	Иначе
		Возврат Макс(СтрокаСканирования.КоличествоУпаковокОтсканировано - СтрокаСканирования.КоличествоУпаковокВДокументе,
			Мин(СтрокаСканирования.КоличествоУпаковокНеОтгружать, СтрокаСканирования.КоличествоУпаковокОтсканировано));
	КонецЕсли;
	
КонецФункции

Функция ПроверитьУпаковочныйЛист(Форма, Товар)
	
	ОтсканированныеУпаковочныеЛисты = Форма.ОтсканированныеТовары.Выгрузить(
		Новый Структура("ЭтоУпаковочныйЛист", Истина), "УпаковочныйЛист").ВыгрузитьКолонку("УпаковочныйЛист");
	
	УпаковочныйЛистОтсканирован = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.УпаковочныйЛистОтсканирован(
		Товар.УпаковочныйЛист, ОтсканированныеУпаковочныеЛисты);
	
	Если Не УпаковочныйЛистОтсканирован Тогда
		Товар.КодВозврата = 0;
		Товар.ТипОшибки = "УпЛистСодержитОтсканированныеРанееУпЛисты";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция Назначения(Форма, Товар = Неопределено, ДляАвтоподбора = Ложь)
	
	Объект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТоварыДокумента = Форма.ОтсканированныеТовары.Выгрузить(, "Номенклатура, Характеристика, Назначение, Количество");
	
	Если Товар = Неопределено Тогда
		Товар = Товар();
		ЗаполнитьЗначенияСвойств(Товар, Форма.ТекущаяСтрокаСканирования);
	КонецЕсли;
	
	Назначения = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.Назначения(Объект.Склад, Объект.Распоряжение,
		Форма.ТекущаяСтрокаСканирования.Ячейка, Товар, ТоварыДокумента, ПараметрыРежима, ДляАвтоподбора);
	
	Возврат Назначения;
	
КонецФункции

// Выполняет установку условного элементов формы рабочего места работника склада.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьУсловноеОформление(Форма)
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	// Устанавливает условное оформление поля "НазначенияНазначение" ТЧ объекта "Назначения".
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НазначенияНазначение");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Назначения.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без назначения>'"));
	
	// Устанавливает условное оформление поля "НазначенияОстаток" ТЧ объекта "Назначения".
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НазначенияОстаток");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Назначения.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Устанавливает условное оформление поля "ЗаданияИсполнитель" ТЧ формы "Задания"
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗаданияИсполнитель");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задания.Исполнитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Если Форма.разрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение240х320 Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	Иначе
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<исполнитель не указан>'"));
	КонецЕсли;
	
	// Устанавливает условное оформление поля "ЗаданияПорядокДоставки" ТЧ формы "Задания".
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ЗаданияПорядокДоставки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задания.ПорядокДоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Если Форма.разрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640 Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<порядок доставки не указан>'"));
	ИначеЕсли Форма.разрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение320х320 Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<порядок не указан>'"));
	Иначе
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан>'"));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность использования упаковочных листов в складском задании.
//
// Параметры:
//	ТипЗадания - Строка - тип складкого задания.
//
//
// Возвращаемое значение:
//	Булево - Истина, если в складском задании могут использоваться упаковочные листы.
//
Функция ВЗаданииМогутИспользоватьсяУпаковочныеЛисты(ТипЗадания)
	
	Возврат ТипЗадания = "Приемка"
		Или ТипЗадания = "ПроверкаОтбора";
	
КонецФункции

// Заполняет ТЧ объекта формы <ОстаткиТоваровВЯчейке> для разрешения формы 480х640 в зависимости от типа
// выполняемой операции.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* ЯчейкиДляСканирования - ТабличнаяЧасть - таблица, содержащая информация о сканируемых ячейках складского задания.
//	ЭтоДоборТоваров - Булево - флаг, по которому определяется алгоритм заполнения данными ТЧ, в случаях
//		отбора/размещения товаров из других ячеек, неуказанных в первоначальном варианте задания.
//
Процедура ЗаполнитьОстаткиТоваровВЯчейке(Форма, ЭтоДоборТоваров = Ложь)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	Если ТипЗадания = "Приемка" 
		Или ТипЗадания = "ПроверкаОтбора"
		Или ТипЗадания = "Пересчет" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ОстаткиТоваровВЯчейке = Форма.Объект.ОстаткиТоваровВЯчейке;
	
	Если ТипЗадания = "Отбор"
		Или (ТипЗадания = "Размещение"
			И Не ЭтоНаборТоваров)
		Или (ТипЗадания = "Перемещение"
			И Не ОтборОтсканирован) Тогда
		
		ТЗЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования.Выгрузить();
		ЯчейкиДляСканирования = ТЗЯчейкиДляСканирования.ВыгрузитьКолонку("Ячейка");
		
		Если Не ЭтоДоборТоваров Тогда
			ОстаткиТоваровВЯчейке.Очистить();
		Иначе
			ТекущаяЯчейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
			ТЗОстаткиТоваровВЯчейке = ОстаткиТоваровВЯчейке.Выгрузить();
			ТЗОстаткиТоваровВЯчейке.Очистить();
			МассивЯчеек = Новый Массив;
			
			Для Каждого СтрокаЯчейкиДляСканирования Из ТЗЯчейкиДляСканирования Цикл
				Если СтрокаЯчейкиДляСканирования.Отсканирована 
					Или СтрокаЯчейкиДляСканирования.Ячейка = ТекущаяЯчейка Тогда
					
					Отбор = Новый Структура("Ячейка", СтрокаЯчейкиДляСканирования.Ячейка);
					МассивСтрок = ОстаткиТоваровВЯчейке.НайтиСтроки(Отбор);
					
					Для Каждого Строка Из МассивСтрок Цикл
						НоваяСтрока = ТЗОстаткиТоваровВЯчейке.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
					
				Иначе
					МассивЯчеек.Добавить(СтрокаЯчейкиДляСканирования.Ячейка);
				КонецЕсли;
			КонецЦикла;
			
			ОстаткиТоваровВЯчейке.Очистить();
			
			Для Каждого СтрокаТЗОстаткиТоваров Из ТЗОстаткиТоваровВЯчейке Цикл
				НоваяСтрока = ОстаткиТоваровВЯчейке.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗОстаткиТоваров);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗадания = "Перемещение" Тогда
			ТоварыРазмещение = Форма.Объект.ТоварыРазмещение.Выгрузить();
			ЯчейкиТоварыРазмещение = ТоварыРазмещение.ВыгрузитьКолонку("Ячейка");
			
			УникальныеЯчейкиТоварыРазмещение = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УникальныеЯчейкиТоварыРазмещение, ЯчейкиТоварыРазмещение, Истина);
			
			Для Каждого ЯчейкаРазмещение Из УникальныеЯчейкиТоварыРазмещение Цикл
				ЯчейкиДляСканирования.Добавить(ЯчейкаРазмещение);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЭтоДоборТоваров Тогда
			МассивЯчеек = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЯчеек, ЯчейкиДляСканирования, Истина);
		КонецЕсли;
		
		ОстаткиТоваров = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОстаткиТоваровВЯчейке(МассивЯчеек);
		
		Для Каждого СтрокаОстатков Из ОстаткиТоваров Цикл
			НоваяСтрока = ОстаткиТоваровВЯчейке.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		КонецЦикла;
		
	ИначеЕсли ТипЗадания = "Перемещение"
		И ОтборОтсканирован Тогда
		
		Для Каждого СтрокаОстаткиТоваров Из ОстаткиТоваровВЯчейке Цикл
			СтрокаОстаткиТоваров.Количество = СтрокаОстаткиТоваров.КоличествоОтсканировано;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ТЧ объекта формы <ТоварыДляПересчета> для разрешения формы 480х640 в заданиях пересчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗаполнитьТоварыДляПересчета(Форма)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	
	Если Не ТипЗадания = "Пересчет" Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыДляПересчета = Форма.Объект.ТоварыДляПересчета;
	ТоварыДляПересчета.Очистить();
	
	ТЗЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования.Выгрузить();
	ЯчейкиДляСканирования = ТЗЯчейкиДляСканирования.ВыгрузитьКолонку("Ячейка");
	
	МассивЯчеек = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЯчеек, ЯчейкиДляСканирования, Истина);
	
	ТоварыДляПересчета.Загрузить(
		РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТоварыДляПересчета(МассивЯчеек));
	
КонецПроцедуры

// Обновляет данные ТЧ <ОстаткиТоваровВЯчейке>/<ТоварыДляПересчета> для разрешения формы 480х640
// в зависимости от текущей, сканируемой ячейки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** ТоварыДляПересчета -ТаблицаФормы - таблица, хранящая сведения о инвентаризации товаров в ячейках.
//			** ОстаткиТоваровВЯчейке -ТаблицаФормы - таблица, хранящая сведения об остатках товаров в ячейках.
//	ТекущаяСтрокаСканирования - см. СтрокаСканирования
//
Процедура ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, ТекущаяСтрокаСканирования)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	
	Если ТипЗадания = "Приемка" 
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет" Тогда
		
		ТоварыДляПересчета = Форма.Объект.ТоварыДляПересчета;
		
		Отбор = Новый Структура("Ячейка", ТекущаяСтрокаСканирования.Ячейка);
		Элементы.ТоварыДляПересчета.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
		МассивСтрок = ТоварыДляПересчета.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.ТоварыДляПересчета.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		ОстаткиТоваровВЯчейке = Форма.Объект.ОстаткиТоваровВЯчейке;
		
		Отбор = Новый Структура("Ячейка", ТекущаяСтрокаСканирования.Ячейка);
		Элементы.ОстаткиТоваровВЯчейке.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
		Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
			Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение");
		Иначе
			Если (ТипЗадания = "Отбор"
					Или ТипЗадания = "Перемещение")
				И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
				
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, ГоденДо");
				
			Иначе
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
		МассивСтрок = ОстаткиТоваровВЯчейке.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		Иначе
			СтрокаОстаткиТоваров = МассивСтрок[0];
			ОстаткиТоваровВЯчейке.Удалить(СтрокаОстаткиТоваров);
			
			НоваяСтрока = ОстаткиТоваровВЯчейке.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиТоваров);
			
			Элементы.ОстаткиТоваровВЯчейке.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в ТЧ <ОстаткиТоваровВЯчейке>/<ТоварыДляПересчета> для разрешения формы 480х640
// реквизит упаковка для номенклатуры типа тара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма обработки мобильного рабочего места работника склада.
//	СтрокаТЧ - СтрокаТабличнойЧасти - строка табличной части остатков товаров в ячейке или товаров для пересчета.
//
Процедура УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(СтрокаТЧ)
	
	Если ЭтоТара(СтрокаТЧ.Номенклатура) Тогда
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ЕдиницаИзмерения");
		СтрокаТЧ.Упаковка = ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует количество остатков товара в ТЧ <ОстаткиТоваровВЯчейке> для разрешения формы 480х640
// в зависимости от типа выполняемой операции.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** ОстаткиТоваровВЯчейке -ТаблицаФормы - таблица, хранящая сведения об остатках товаров в ячейках.
//	ДобавляемоеКоличество - Число - количество товаров которое будет использовано при добавлении строки в ТЗ <ОтсканированныеТовары>.
//
Процедура УстановитьКоличествоОстатковВОстаткиТоваровВЯчейке(Форма, ДобавляемоеКоличество = Неопределено)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ОстаткиТоваровВЯчейке = Форма.Объект.ОстаткиТоваровВЯчейке;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРазмещение = (ТипЗадания = "Размещение");
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(ПараметрыРежима.ПорядокОбработки);
	
	Если ТипЗадания = "Перемещение" Тогда
		ЭтоРазмещение = ОтборОтсканирован;
	КонецЕсли;
	
	Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение");
	Иначе
		Если (ТипЗадания = "Отбор"
				Или ТипЗадания = "Перемещение")
			И СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
			
			Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, ГоденДо");
			
		Иначе
			Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
	
	Если ЭтоПорядокОбработкиТоварЯчейка Тогда
		
		МассивСтрок = ОстаткиТоваровВЯчейке.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОстаткиТоваров = МассивСтрок[0];
			ОстаткиТоваровВЯчейке.Удалить(СтрокаОстаткиТоваров);
			
			НоваяСтрока = ОстаткиТоваровВЯчейке.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиТоваров);
		Иначе
			НоваяСтрока = ОстаткиТоваровВЯчейке.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСканирования);
			НоваяСтрока.ПредставлениеСерии = УстановитьПредставлениеСерии(ТекущаяСтрокаСканирования);
		КонецЕсли;
		
		НоваяСтрока.КоличествоОтсканировано = НоваяСтрока.Количество + ТекущаяСтрокаСканирования.КоличествоУпаковокПоложили 
			+ ТекущаяСтрокаСканирования.КоличествоУпаковокПоложить;
		
		Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
			УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(СтрокаОстаткиТоваров);
		КонецЕсли;
		
		ПриПереходеКСледующейЯчейкеОстаткиТоваровВЯчейке(Форма, ТекущаяСтрокаСканирования);
		Элементы.ОстаткиТоваровВЯчейке.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	Иначе
		
		МассивСтрок = ОстаткиТоваровВЯчейке.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОстаткиТоваров = МассивСтрок[0];
			ОстаткиТоваровВЯчейке.Удалить(СтрокаОстаткиТоваров);
			
			НоваяСтрока = ОстаткиТоваровВЯчейке.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткиТоваров);
		Иначе
			НоваяСтрока = ОстаткиТоваровВЯчейке.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСканирования);
			НоваяСтрока.ПредставлениеСерии = УстановитьПредставлениеСерии(ТекущаяСтрокаСканирования);
		КонецЕсли;
		
		Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
			УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(НоваяСтрока);
		КонецЕсли;
		
		КоличествоОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
		Если СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
			Если ДобавляемоеКоличество = 1 Тогда
				КоличествоОтсканировано = 1;
			Иначе
				КоличествоОтсканировано = ДобавляемоеКоличество;
			КонецЕсли;
			
			Если ЭтоРазмещение Тогда
				НоваяСтрока.КоличествоОтсканировано = НоваяСтрока.КоличествоОтсканировано + КоличествоОтсканировано;
			Иначе
				НоваяСтрока.КоличествоОтсканировано = НоваяСтрока.КоличествоОтсканировано - КоличествоОтсканировано;
			КонецЕсли;
		Иначе
			Если ЭтоРазмещение Тогда
				НоваяСтрока.КоличествоОтсканировано = НоваяСтрока.Количество + КоличествоОтсканировано;
			Иначе
				НоваяСтрока.КоличествоОтсканировано = НоваяСтрока.Количество - КоличествоОтсканировано;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ОстаткиТоваровВЯчейке.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует фактическое количество остатков товара в ТЧ <ТоварыДляПересчета> для разрешения формы 480х640
// в зависимости от типа выполняемой операции.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** ТоварыДляПересчета -ТаблицаФормы - таблица, хранящая сведения о инвентаризации товаров в ячейках.
//
Процедура УстановитьКоличествоПоУчетуВТоварыДляПересчета(Форма)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТоварыДляПересчета = Форма.Объект.ТоварыДляПересчета;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если Не ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение");
		ОтборБезСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение");
	Иначе
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
		ОтборБезСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
	ЗаполнитьЗначенияСвойств(ОтборБезСерии, ТекущаяСтрокаСканирования);
	
	МассивСтрок = ТоварыДляПересчета.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТоварыПересчета = МассивСтрок[0];
		ТоварыДляПересчета.Удалить(СтрокаТоварыПересчета);
		
		НоваяСтрока = ТоварыДляПересчета.Вставить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыПересчета);
	Иначе
		НоваяСтрока = ТоварыДляПересчета.Вставить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСканирования);
	КонецЕсли;
	
	Если ЭтоТара(ТекущаяСтрокаСканирования) Тогда
		УстановитьЕдиницуИзмеренияТарыТоварыОстаткиТоваровВЯчейке(НоваяСтрока);
	КонецЕсли;
	
	НоваяСтрока.КоличествоОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
	Элементы.ТоварыДляПересчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

// Актуализирует данные об объеме и весе отсканированного товара в заданиях приемки и создания нового размещения
// для разрешения формы 480х640.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	СтрокаОтсканированныеТовары - СтрокаТабличнойЧасти- строка табличной части отсканированных товаров.
//	ЭтоНоваяСтрока - Булево - Истина, если это новая строка табличной части отсканированных товаров.
//
Процедура ЗаполнитьПараметрыОтсканированногоТовара(Форма, СтрокаОтсканированныеТовары, ЭтоНоваяСтрока = Ложь)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТипЗадания = "Отбор"
		Или (ТипЗадания = "Размещение"
			И Не ЭтоНаборТоваров)
		Или ТипЗадания = "Перемещение"
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоНоваяСтрока Тогда
		РеквизитыУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(
			ТекущаяСтрокаСканирования.Упаковка, ТекущаяСтрокаСканирования.Номенклатура, ,Ложь);
		
		СтрокаОтсканированныеТовары.ВесУпаковки = РеквизитыУпаковки.Вес;
		СтрокаОтсканированныеТовары.ОбъемУпаковки = РеквизитыУпаковки.Объем;
	КонецЕсли;
	
	СтрокаОтсканированныеТовары.Вес = 
		СтрокаОтсканированныеТовары.ВесУпаковки * СтрокаОтсканированныеТовары.КоличествоУпаковокОтсканировано;
	СтрокаОтсканированныеТовары.Объем = 
		СтрокаОтсканированныеТовары.ОбъемУпаковки * СтрокаОтсканированныеТовары.КоличествоУпаковокОтсканировано;
	
КонецПроцедуры

// Выводит данные об объеме и весе отсканированных товаров в заданиях приемки и создания нового размещения
// для разрешения формы 480х640.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПараметрыОтсканированныхТоваров(Форма)
	
	Если Не (Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана.Разрешение480х640) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	
	Если ТипЗадания = "Отбор" 
		Или (ТипЗадания = "Размещение" 
		И Не ЭтоНаборТоваров)
		Или ТипЗадания = "Перемещение" 
		Или ТипЗадания = "Пересчет" 
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ВесОтсканированныхТоваров = Строка(ОтсканированныеТовары.Итог("Вес")) + " " + Строка(Форма.ЕдиницаИзмеренияВеса);
	Форма.ОбъемОтсканированныхТоваров = 
		Строка(ОтсканированныеТовары.Итог("Объем")) + " " + Строка(Форма.ЕдиницаИзмеренияОбъема);
	
КонецПроцедуры

// Дополняет ТЗ формы <ТоварыДляСканирования> строками в операциях отбора/размещение в случае, если
// в соответствии с выполняемым заданием из ячейки были отобраны/размещены не все товары.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* ТоварыДляСканирования - ДанныеФормыКоллекция - таблица сканируемых товаров складского задания.
//	ЭтоПереходКСледующейЯчейке - Булево - Истина, если выполняется переход к следующей строке сканирования,
//											складского задания содержащей информацию о складской ячейке отличной от текущей строки.
//
Процедура ДополнитьНеОтобраннымиТоварамиТаблицуДляСканированияТоваров(Форма, ЭтоПереходКСледующейЯчейке)
	
	Склад = Форма.Объект.Склад;
	Помещение = Форма.Объект.Помещение;
	Распоряжение = Форма.Объект.Распоряжение;
	Задание = Форма.ПараметрыРежима.Задание;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекЯчейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Если ТекЯчейка = Справочники.СкладскиеЯчейки.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если Не (ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение")
		Или ЭтоПорядокОбработкиТоварЯчейка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Подбираются товары, которые должны быть отобраны/размещены из других ячеек, если
	// товары из текущей ячейки, в соответствии заданием не были отобраны/размещены.
	Если ЭтоПереходКСледующейЯчейке Тогда
		ТоварыОтобраны = Истина;
		Отбор = Новый Структура("АктивнаяСтрока", 1);
		АктивнаяСтрока = ТоварыДляСканирования.НайтиСтроки(Отбор)[0];
		
		Если АктивнаяСтрока.КоличествоУпаковок = АктивнаяСтрока.КоличествоУпаковокОтсканировано Тогда
			Возврат;
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		ИндексСтрокиКОтбору = ТоварыДляСканирования.Индекс(АктивнаяСтрока);
		ВГраница = ТоварыДляСканирования.Количество() - 1;
		
		Пока ТоварыОтобраны Цикл
			СтрокаОтбора = ТоварыДляСканирования.Получить(ИндексСтрокиКОтбору);
			Если СтрокаОтбора.Ячейка = ТекЯчейка Тогда
				МассивСтрок.Добавить(СтрокаОтбора);
				ИндексСтрокиКОтбору = ИндексСтрокиКОтбору + 1;
				
				Если ИндексСтрокиКОтбору > ВГраница Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Отбор = Новый Структура("АктивнаяСтрока", 1);
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		
		Если МассивСтрок[0].КоличествоУпаковок = МассивСтрок[0].КоличествоУпаковокОтсканировано Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОтметитьЯчейкуКПересчету(ТекЯчейка);
	
	ТоварыКОтбору = ТоварыДляСканирования.Выгрузить(МассивСтрок, "Номенклатура, Упаковка, Характеристика, Назначение, 
		|Серия, ТипНоменклатуры, Коэффициент, КоличествоУпаковок, КоличествоУпаковокОтсканировано");
	ТоварыКОтбору.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3, 
		ДопустимыйЗнак.Неотрицательный)));
	
	// Удаляем из ТЗ <ТоварыКОтбору> строки с товарами, которые были отобраны/размещены в соответствии с заданием.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТоваров Из ТоварыКОтбору Цикл
		Если СтрокаТоваров.КоличествоУпаковок > СтрокаТоваров.КоличествоУпаковокОтсканировано Тогда
			СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок - СтрокаТоваров.КоличествоУпаковокОтсканировано;
			Если ЭтоТара(СтрокаТоваров)
				Или (СтрокаТоваров.Коэффициент = 0) Тогда
				СтрокаТоваров.Количество = СтрокаТоваров.КоличествоУпаковок;
			Иначе
				СтрокаТоваров.Количество = СтрокаТоваров.КоличествоУпаковок * СтрокаТоваров.Коэффициент;
			КонецЕсли;
		Иначе
			УдаляемыеСтроки.Добавить(СтрокаТоваров);
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() > 0 Тогда
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			ТоварыКОтбору.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТаблицаНеотобранныхТоваров(Склад, Помещение,
		ТоварыКОтбору, Распоряжение, Задание);
	
	Если СтруктураРезультата = Неопределено Тогда
		Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
		Форма.ПараметрыРежима.ИдСообщения = "ЯчейкиНеПодобраны";
		
		ИмяСобытия = НСтр("ru = 'Ошибка при подборе ячеек для выполнения складской операции отбора (размещения) товаров'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Сообщение.Текст);
		КонецЦикла;
		
		Возврат;
	Иначе
		ТаблицаРезультатов = СтруктураРезультата.ТаблицаРезультатов;
	КонецЕсли;
	
	ЯчейкиТаблицыРезультатов = ТаблицаРезультатов.ВыгрузитьКолонку("Ячейка");
	ДобавляемыеЯчейки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДобавляемыеЯчейки, ЯчейкиТаблицыРезультатов, Истина);
	
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	ОтсканированныеЯчейки = Новый Массив;
	НеОтсканированныеЯчейки = Новый Массив;
	
	Для Каждого СтрокаЯчеекСканирования Из ЯчейкиДляСканирования Цикл
		Если СтрокаЯчеекСканирования.Отсканирована 
			Или ТекЯчейка = СтрокаЯчеекСканирования.Ячейка Тогда
			
			ОтсканированныеЯчейки.Добавить(СтрокаЯчеекСканирования.Ячейка);
			
		Иначе
			НеОтсканированныеЯчейки.Добавить(СтрокаЯчеекСканирования.Ячейка);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем из полученной ТЗ строки с товарами, по текущей ячейке или ячейкам, которые были отсканированы ранее.
	Для Каждого Ячейка Из ДобавляемыеЯчейки Цикл
		Если (Ячейка = ТекЯчейка) 
			Или Не (ОтсканированныеЯчейки.Найти(Ячейка) = Неопределено) Тогда
			
			Отбор = Новый Структура("Ячейка", Ячейка);
			МассивСтрок = ТаблицаРезультатов.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из МассивСтрок Цикл
				ТаблицаРезультатов.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
		Форма.ПараметрыРежима.ИдСообщения = "ЯчейкиНеПодобраны";
		Возврат;
	КонецЕсли;
	
	ТЗТаблицаРезультатов = ТаблицаРезультатов.Скопировать(); // ТаблицаЗначений
	ТЗТаблицаРезультатов.Свернуть("Номенклатура, Характеристика, Упаковка, Назначение, Серия", "КоличествоУпаковок");
	
	// Обновляем количество товаров ТЗ <ТоварыДляСканирования> в текущей ячейки, в зависимости от данных ТЗ с товарами,
	// которые требуется отобрать/разместить из других ячеек.
	Для Каждого СтрокаТаблицыРезультатов Из ТЗТаблицаРезультатов Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Назначение, Серия");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицыРезультатов);
		
		МассивСтрок = ТоварыКОтбору.НайтиСтроки(Отбор);
		Отбор.Вставить("Ячейка", ТекЯчейка);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Если ЭтоТара(СтрокаТаблицыРезультатов.Номенклатура) Тогда
				
				// распределяется тара
				Если МассивСтрок.Количество() > 1 Тогда
					
					КоличествоРаспределения = СтрокаТаблицыРезультатов.КоличествоУпаковок;
					МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
					
					Для Каждого Строка Из МассивСтрок Цикл
						
						Если Строка.КоличествоУпаковок < КоличествоРаспределения Тогда
							КоличествоРаспределения = КоличествоРаспределения - Строка.КоличествоУпаковок;
							Строка.КоличествоУпаковок = Строка.КоличествоУпаковокОтсканировано;
						Иначе
							Если КоличествоРаспределения = Строка.КоличествоУпаковокОтсканировано Тогда
								Строка.КоличествоУпаковок = Строка.КоличествоУпаковокОтсканировано;
							Иначе
								Строка.КоличествоУпаковок = Строка.КоличествоУпаковок - КоличествоРаспределения;
							КонецЕсли;
							
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					Отбор.Вставить("Коэффициент", МассивСтрок[0].Коэффициент);
					СтрокаТоваровСканирования = ТоварыДляСканирования.НайтиСтроки(Отбор)[0];
					
					Если МассивСтрок[0].КоличествоУпаковок = СтрокаТаблицыРезультатов.КоличествоУпаковок Тогда
						СтрокаТоваровСканирования.КоличествоУпаковок = СтрокаТоваровСканирования.КоличествоУпаковокОтсканировано;
					Иначе
						СтрокаТоваровСканирования.КоличествоУпаковок = 
							СтрокаТоваровСканирования.КоличествоУпаковок - СтрокаТаблицыРезультатов.КоличествоУпаковок;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// распределяются товары
				СтрокаТоваровСканирования = ТоварыДляСканирования.НайтиСтроки(Отбор)[0];
				Если МассивСтрок[0].КоличествоУпаковок = СтрокаТаблицыРезультатов.КоличествоУпаковок Тогда
					СтрокаТоваровСканирования.КоличествоУпаковок = СтрокаТоваровСканирования.КоличествоУпаковокОтсканировано;
				Иначе
					СтрокаТоваровСканирования.КоличествоУпаковок = 
						СтрокаТоваровСканирования.КоличествоУпаковок - СтрокаТаблицыРезультатов.КоличествоУпаковок;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// распределяется товар, как многооборотная тара
			КоличествоРаспределения = СтрокаТаблицыРезультатов.КоличествоУпаковок;
			МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из МассивСтрок Цикл
				
				Если Строка.КоличествоУпаковок < КоличествоРаспределения Тогда
					КоличествоРаспределения = КоличествоРаспределения - Строка.КоличествоУпаковок;
					Строка.КоличествоУпаковок = Строка.КоличествоУпаковокОтсканировано;
				Иначе
					Если КоличествоРаспределения = Строка.КоличествоУпаковокОтсканировано Тогда
						Строка.КоличествоУпаковок = Строка.КоличествоУпаковокОтсканировано;
					Иначе
						Строка.КоличествоУпаковок = Строка.КоличествоУпаковок - КоличествоРаспределения;
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗТоварыДляСканирования = Форма.ТоварыДляСканирования.Выгрузить();
	ТЗТоварыДляСканирования.Очистить();
	
	// Заполняем ТЗ данными о неотсканированных строках.
	Для Каждого Ячейка Из НеОтсканированныеЯчейки Цикл
		
		Отбор = Новый Структура("Ячейка", Ячейка);
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из МассивСтрок Цикл
			ТоварыДляСканирования.Удалить(Строка);
			
			НоваяСтрока = ТЗТоварыДляСканирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполняем ТЗ данными из ТЗ с товарами, которые требуется отобрать/разместить из других ячеек.
	Для Каждого СтрокаДобавляемогоТовара Из ТаблицаРезультатов Цикл
		НоваяСтрока = ТЗТоварыДляСканирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДобавляемогоТовара);
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка, Серия");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДобавляемогоТовара);
		
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		
		НоваяСтрока.ВидНоменклатуры = МассивСтрок[0].ВидНоменклатуры;
		НоваяСтрока.ТипНоменклатуры = МассивСтрок[0].ТипНоменклатуры;
		НоваяСтрока.ШтрихкодНоменклатуры = МассивСтрок[0].ШтрихкодНоменклатуры;
		
		НоваяСтрока.НомерСерии = МассивСтрок[0].НомерСерии;
		НоваяСтрока.ГоденДо = МассивСтрок[0].ГоденДо;
		
		НоваяСтрока.ИспользоватьНомерСерии = МассивСтрок[0].ИспользоватьНомерСерии;
		НоваяСтрока.ИспользоватьСрокГодностиСерии = МассивСтрок[0].ИспользоватьСрокГодностиСерии;
		НоваяСтрока.ТочностьУказанияСрокаГодностиСерии = МассивСтрок[0].ТочностьУказанияСрокаГодностиСерии;
		
		НоваяСтрока.Коэффициент = МассивСтрок[0].Коэффициент;
		НоваяСтрока.КоэффициентЕдиницыИзмеренияВеса = МассивСтрок[0].КоэффициентЕдиницыИзмеренияВеса;
		НоваяСтрока.КоэффициентЕдиницыИзмеренияОбъема = МассивСтрок[0].КоэффициентЕдиницыИзмеренияОбъема;
		
		НоваяСтрока.ВесУпаковки = МассивСтрок[0].ВесУпаковки;
		НоваяСтрока.ОбъемУпаковки = МассивСтрок[0].ОбъемУпаковки;
		
		НоваяСтрока.ЕдиницаИзмерения = МассивСтрок[0].ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияВеса = МассивСтрок[0].ЕдиницаИзмеренияВеса;
		НоваяСтрока.ЕдиницаИзмеренияОбъема = МассивСтрок[0].ЕдиницаИзмеренияОбъема;
		НоваяСтрока.ТипИзмеряемойВеличины = МассивСтрок[0].ТипИзмеряемойВеличины;
		
	КонецЦикла;
	
	МассивЯчеекТаблицыРезультатов = Новый Массив;
	ЯчейкиТаблицыРезультатов = ТаблицаРезультатов.ВыгрузитьКолонку("Ячейка");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЯчеекТаблицыРезультатов, ЯчейкиТаблицыРезультатов, Истина);
	
	ЯчейкиСоШтрихкодами = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ШтрихкодыЯчеек(МассивЯчеекТаблицыРезультатов);
	
	Для Каждого Ячейка Из ЯчейкиСоШтрихкодами Цикл
		Отбор = Новый Структура("Ячейка", Ячейка.Ячейка);
		МассивСтрок = ТЗТоварыДляСканирования.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(Строка, Ячейка);
		КонецЦикла;
	КонецЦикла;
	
	ТЗТоварыДляСканирования = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОчередьТоваровДляСканирования(Склад,
		Помещение, ТЗТоварыДляСканирования, ТекЯчейка);
	
	Для Каждого СтрокаТЗТоваровСканирования Из ТЗТоварыДляСканирования Цикл
		НоваяСтрока = ТоварыДляСканирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗТоваровСканирования);
		
		НоваяСтрока.КоличествоУпаковокВДокументе = НоваяСтрока.КоличествоУпаковок;
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрока);
		
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		НоваяСтрока.СтатусУказанияСерий = МассивСтрок[0].СтатусУказанияСерий;
	КонецЦикла;
	
	НеОтсканированныеЯчейки = Новый Массив;
	ДобавленныеЯчейки = ТЗТоварыДляСканирования.ВыгрузитьКолонку("Ячейка");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеОтсканированныеЯчейки, ДобавленныеЯчейки, Истина);
	
	ЯчейкиДляСканирования.Очистить();
	
	Для Каждого НоваяЯчейка Из ОтсканированныеЯчейки Цикл
		НоваяСтрока = ЯчейкиДляСканирования.Добавить();
		
		НоваяСтрока.Ячейка = НоваяЯчейка;
		НоваяСтрока.Отсканирована = 1;
		НоваяСтрока.НомерЯчейки = ЯчейкиДляСканирования.Количество();
	КонецЦикла;
	
	Для Каждого НоваяЯчейка Из НеОтсканированныеЯчейки Цикл
		НоваяСтрока = ЯчейкиДляСканирования.Добавить();
		
		НоваяСтрока.Ячейка = НоваяЯчейка;
		НоваяСтрока.Отсканирована = 0;
		НоваяСтрока.НомерЯчейки = ЯчейкиДляСканирования.Количество();
	КонецЦикла;
	
	КоличествоЯчеек = ЯчейкиДляСканирования.Количество();
	
	Для Каждого Ячейка Из ЯчейкиДляСканирования Цикл
		Ячейка.КоличествоЯчеек = КоличествоЯчеек;
	КонецЦикла;
	
	ЗаполнитьСлужебнуюИнформациюТоваровДляСканирования(Форма);
	
	// Очищаем очередь сканирования от строк, с нулевым количеством товаров.
	МассивПустыхСтрок = Новый Массив;
	Для Каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
		Если СтрокаСканирования.КоличествоУпаковок = 0 
			И Не СтрокаСканирования.АктивнаяСтрока = 1 Тогда
			
			МассивПустыхСтрок.Добавить(СтрокаСканирования);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
		ТоварыДляСканирования.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	ЗаполнитьОстаткиТоваровВЯчейке(Форма, Истина);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ПодобратьТоварыИзДругихЯчеекПриПереходеКСледующейЯчейке"
// на странице сообщение пользователю, после выбора пользователем действия "ПерейтиКСледующейЯчейке".
// Процедура "включает" алгоритм подбора товаров к отбору/размещению из/в других ячейках.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПодобратьТоварыИзДругихЯчеекПриПереходеКСледующейЯчейке(Форма) Экспорт
	
	ПерейтиКСледующейЯчейке(Форма, Истина);
	ОбработатьПредупреждениеПриСканированииЗначения(Форма);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОтменитьПодборТоваровИзДругихЯчеекПриПереходеКСледующейЯчейке"
// на странице сообщение пользователю, после выбора пользователем действия "ПерейтиКСледующейЯчейке".
// Процедура "выключает" алгоритм подбора товаров к отбору/размещению из/в других ячейках.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОтменитьПодборТоваровИзДругихЯчеекПриПереходеКСледующейЯчейке(Форма) Экспорт
	
	ПерейтиКСледующейЯчейке(Форма);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ПодобратьТоварыИзДругихЯчеек" на странице сообщение пользователю,
// после выбора пользователем действия "ПерейтиКСледующейЯчейке".
// Процедура "включает" алгоритм подбора товаров к отбору/размещению из/в других ячейках.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПодобратьТоварыИзДругихЯчеек(Форма) Экспорт
	
	Если ЭтоПоследняяСтрокаСканирования(Форма) Тогда
		ПерейтиКСледующейСтрокеСканирования(Форма, Истина);
	Иначе
		ПерейтиКСледующейСтрокеСканирования(Форма, Истина);
		УстановитьПараметрыЭлементовСканирования(Форма);
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
		ОбработатьПредупреждениеПриСканированииЗначения(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОтменитьПодборТоваровИзДругихЯчеек" на странице сообщение пользователю,
// после выбора пользователем действия "ПерейтиКСледующейСтрокеСканирования".
// Процедура "выключает" алгоритм подбора товаров к отбору/размещению из/в других ячейках.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ОтменитьПодборТоваровИзДругихЯчеек(Форма) Экспорт
	
	Если ЭтоПоследняяСтрокаСканирования(Форма) Тогда
		ПерейтиКСледующейСтрокеСканирования(Форма);
	Иначе
		ПерейтиКСледующейСтрокеСканирования(Форма);
		УстановитьПараметрыЭлементовСканирования(Форма);
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
		ВывестиСостояниеВыполненияЗадания(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ДобратьТовары" на странице сообщение пользователю.
// Инициализируется алгоритм отбора/размещения товаров в других ячейках.
// В зависимости от результата "добора" товаров в других ячейках формируется структура диалога - текст сообщения 
// о составе кнопок. Затем отображается диалоговое сообщение.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ДобратьТовары(Форма) Экспорт
	
	Параметр_1 = "";
	ЗаголовокПродолжить = "";
	ЗаголовокЗавершитьЗадание = "";
	РежимВебСервиса = Форма.РежимВебСервиса;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	КоличествоЯчеекВЗадании = Форма.ЯчейкиДляСканирования.Количество();
	Форма.ТоварыПодобраны = Истина;
	
	Кнопки = Новый СписокЗначений;
	ДополнитьНеОтобраннымиТоварамиТаблицуДляСканированияТоваров(Форма, Истина);
	
	Если ТипЗадания = "Размещение" Тогда
		ЗаголовокПродолжить = НСтр("ru = 'Продолжить размещение товаров в ячейку %1'");
		ЗаголовокЗавершитьЗадание = НСтр("ru = 'Завершить размещение товаров'");
	Иначе
		ЗаголовокПродолжить = НСтр("ru = 'Продолжить отбор товаров из ячейки %1'");
		ЗаголовокЗавершитьЗадание = НСтр("ru = 'Завершить выполнение задания'");
	КонецЕсли;
	
	КнопкаПерейтиКСледЯчейке = НоваяКнопкаДиалога("ПерейтиКСледующейЯчейкеСканирования", 
		НСтр("ru = 'Перейти к следующей ячейке'"));
	КнопкаПродолжить = НоваяКнопкаДиалога("ПерейтиНаПредыдущуюСтраницу", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПродолжить, ?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки,
			ТекущаяСтрокаСканирования.Ячейка)));
	КнопкаЗавершить = НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", ЗаголовокЗавершитьЗадание);
	
	Если КоличествоЯчеекВЗадании < Форма.ЯчейкиДляСканирования.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подобраны ячейки для дальнейшего %1 товаров.'");
		Если ТипЗадания = "Отбор" Тогда
			Параметр_1 = НСтр("ru = 'отбора'");
		Иначе
			Параметр_1 = НСтр("ru = 'размещения'");
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметр_1);
		
		Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
		Кнопки.Добавить(КнопкаЗавершить);
		
		ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось подобрать ячейки для %1.'");
		Если ТипЗадания = "Отбор" Тогда
			Параметр_1 = НСтр("ru = 'отбора неотобранных товаров'");
		Иначе
			Параметр_1 = НСтр("ru = 'размещения неразмещенных товаров'");
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметр_1);
		
		Кнопки.Добавить(КнопкаПродолжить);
		Кнопки.Добавить(КнопкаЗавершить);
		
		ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
		ОбработатьПредупреждениеПриСканированииЗначения(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ожидания для команды "Ок" на странице пометки ячейки к пересчету.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ВыборАдресаОКОбработчикОжидания(Форма) Экспорт
	
	Если Форма.ВводШтрихкодаОтменен Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	РежимВебСервиса = Форма.РежимВебСервиса;
	ШтрихкодЯчейки = Форма.ШтрихкодПараметраСканирования;
	
	ПараметрыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиЯчейкуПоШтрихкоду(Объект.Склад,
		Объект.Помещение, ШтрихкодЯчейки);
	
	Если ПараметрыЯчейки.КодВозврата = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отметить к пересчету ячейку ""%1"".'"), ШтрихкодЯчейки);
	Иначе
		РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОтметитьЯчейкуКПересчету(ПараметрыЯчейки.Ячейка);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ячейка ""%1"" помечена к пересчету.'"), ?(РежимВебСервиса, ПараметрыЯчейки.КодЯчейки, ПараметрыЯчейки.Ячейка));
	КонецЕсли;
	
	КнопкаПерейтиНаПредыдущуюСтраницу = НоваяКнопкаДиалога("ПерейтиНаПредыдущуюСтраницу", НСтр("ru = 'ОК'"), Истина);
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, КнопкаПерейтиНаПредыдущуюСтраницу);
	
КонецПроцедуры

// Возвращает представление серии товара строки складского задания.
//
// Параметры:
//	СтрокаСканирования - см. СтрокаСканирования
//
// Возвращаемое значение:
//	Строка - представление серии товара складского задания.
//
Функция УстановитьПредставлениеСерии(СтрокаСканирования)
	
	Представление = НСтр("ru = '%НомерСерии%'");
	
	Если СтрокаСканирования.ИспользоватьНомерСерии Тогда
		НомерСерии = СокрЛП(СтрокаСканирования.НомерСерии);
	Иначе
		НомерСерии = "";
	КонецЕсли;
	
	Если СтрокаСканирования.ИспользоватьСрокГодностиСерии Тогда
		
		Представление = НСтр("ru = '%НомерСерии% до %ГоденДо%'");
		
		Если СтрокаСканирования.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев Тогда
			ФорматСтроки = "ДФ=MM.yy";
		ИначеЕсли СтрокаСканирования.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
			ФорматСтроки = "ДФ=dd.MM.yy; ДЛФ=D";
		Иначе
			ФорматСтроки = "ДФ=dd.MM.yy; ДЛФ=DT";
		КонецЕсли;
		
		Представление = СтрЗаменить(Представление, "%ГоденДо%", Формат(СтрокаСканирования.ГоденДо, ФорматСтроки));
	КонецЕсли;
	
	Представление = СтрЗаменить(Представление, "%НомерСерии%", НомерСерии);
	
	Возврат СокрЛП(Представление);
	
КонецФункции

// Возвращает число - количество документов-заданий доступных для выполнения работником склада.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания.
//	Исполнители - Массив из СправочникСсылка.Пользователи - список исполнителей заданий.
//	Склад - СправочникСсылка.Склады - склад, для которого возвращается количество заданий.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//
// Возвращаемое значение:
//	Число - количество доступных для выполнения заданий заданного вида.
//
Функция КоличествоСкладскихЗаданийДляВыполнения(ТипЗадания, Исполнители, Склад, Помещение) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	
	Если ТипЗадания = "Отбор" 
		Или ТипЗадания = "Размещение" 
		Или ТипЗадания = "Перемещение" Тогда
		
		ВидОперации = ВидОперацииОтбораРазмещения(ТипЗадания);
		
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.ВидОперации = &ВидОперации
		|	И ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)
		|	И ОтборРазмещениеТоваров.Исполнитель В(&Исполнители)
		|	И ОтборРазмещениеТоваров.Склад = &Склад
		|	И ОтборРазмещениеТоваров.Помещение = &Помещение";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетТоваров
		|ГДЕ
		|	ПересчетТоваров.Проведен
		|	И ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Подготовлено)
		|	И ПересчетТоваров.Исполнитель В(&Исполнители)
		|	И ПересчетТоваров.Склад = &Склад
		|	И ПересчетТоваров.Помещение = &Помещение";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Проведен
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
		|	И ПриходныйОрдерНаТовары.Склад = &Склад
		|	И ПриходныйОрдерНаТовары.Помещение = &Помещение
		|	И ПриходныйОрдерНаТовары.Ответственный В(&Исполнители)";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
		|	И РасходныйОрдерНаТовары.Склад = &Склад
		|	И РасходныйОрдерНаТовары.Помещение = &Помещение
		|	И РасходныйОрдерНаТовары.Контролер В(&Исполнители)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоДокументов;
	
КонецФункции

// Проверяет, установлен ли вариант интерфейса клиентского приложения версии 8.2 по указанному имени пользователя ИБ.
//
// Параметры:
//	ИмяПользователя - Строка - Имя пользователя ИБ.
//
// Возвращаемое значение:
//	Булево - Истина, если интерфейс версии 8.2, иначе Ложь.
//
Функция ВариантИнтерфейсаКлиентскогоПриложенияВерсии8_2(ИмяПользователя) Экспорт 

	Перем ИнтерфейсВерсии82;
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, ИмяПользователя);
	
	Если Настройки = Неопределено Тогда
		                                                               
		ИнтерфейсВерсии82 = Не (Метаданные.РежимСовместимостиИнтерфейса = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.Такси
			Или Метаданные.РежимСовместимостиИнтерфейса = Метаданные.СвойстваОбъектов.РежимСовместимостиИнтерфейса.ТаксиРазрешитьВерсия8_2);	
			
	Иначе
			
		ИнтерфейсВерсии82 = (Настройки.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2)
		
	КонецЕсли;		
	
	Возврат ИнтерфейсВерсии82;
	
КонецФункции

// Устанавливает вариант интерфейса клиентского приложения версии 8.2 по указанному имени пользователя ИБ.
//
// Параметры:
//	ИмяПользователя - Строка - Имя пользователя ИБ.
//
Процедура УстановитьВариантИнтерфейсаКлиентскогоПриложенияВерсии8_2(ИмяПользователя) Экспорт
		
	НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
	НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2;
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов = Истина;
	НастройкиКлиента.РежимОткрытияФормПриложения = РежимОткрытияФормПриложения.Закладки;
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НастройкиКлиента,, ИмяПользователя);
	
КонецПроцедуры

// Проверяет указывалась ли прежде введенная справочная серия.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Серия - см. СерияНоменклатуры
// 
// Возвращаемое значение:
//	Булево - Истина, если введенная справочная серия прежде не указывалась.
//
Функция СправочнаяСерияУникальна(Форма, Серия)
	
	ОтсканированныеТовары     = Форма.ОтсканированныеТовары;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Упаковка, Серия");
	
	ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования, , "Серия");
	ЗаполнитьЗначенияСвойств(Отбор, Серия);
	
	МассивСтрок = ОтсканированныеТовары.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Форма.ПараметрыРежима.ИдСообщения = "ОшибкаСерияНеУникальна";
		Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Заполняет информацию о количестве отсканированного товара в соответствии со сведениями штрихкода.
//
// Параметры:
//	Товар - см. Товар
//
Процедура ЗаполнитьВесТовараПоШтрихкоду(Товар)
	
	ШтрихкодТовара     = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Товар.Штрихкод);
	ПараметрыШтрихкода = Новый Структура("Штрихкод, Количество", ВРег(СокрЛП(ШтрихкодТовара)), 1);
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ПараметрыШтрихкода, ПрефиксыВесовыхШтрихкодов);
	
	Товар.КоличествоПоШтрихкоду = ПараметрыШтрихкода.Количество;
	
КонецПроцедуры

// Проверяет, корректно ли указано количество товара при сканировании штрихкода.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина, если количество указано корректно.
//
Функция КоличествоПоШтрихкодуКорректно(Форма)
	
	ЕстьОшибки = Ложь;
	
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ТипЗадания        = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров   = ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	
	Если ЭтоНаборТоваров Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(ПараметрыРежима.ПорядокОбработки);
	
	КоличествоУпаковок              = ТекущаяСтрокаСканирования.КоличествоУпаковок;
	КоличествоУпаковокВДокументе    = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
	КоличествоУпаковокОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
	КоличествоПоШтрихкоду           = ТекущаяСтрокаСканирования.КоличествоПоШтрихкоду;
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	ЭтоМерныйТовар = МерныеЕдиницыИзмерения.Найти(ТекущаяСтрокаСканирования.ТипИзмеряемойВеличины) <> Неопределено;
	
	ДопустимоеОтклонениеОтбираемыхТоваров = Форма.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров;
	ПредельноеКоличествоОтбираемогоТовара = КоличествоУпаковок + КоличествоУпаковок *
		ДопустимоеОтклонениеОтбираемыхТоваров / 100;
	
	Если ТипЗадания = "Размещение" Тогда
		Если (КоличествоУпаковокОтсканировано + КоличествоПоШтрихкоду) > КоличествоУпаковокВДокументе Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		Если ОтборОтсканирован
			И ЭтоПорядокОбработкиТоварЯчейка Тогда
			
			Если КоличествоУпаковокОтсканировано + КоличествоПоШтрихкоду > КоличествоУпаковокВДокументе Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		Иначе
			Если КоличествоУпаковокОтсканировано + КоличествоПоШтрихкоду > ТекущаяСтрокаСканирования.КоличествоУпаковок Тогда
				ЕстьОшибки = Истина;
			Иначе
				Если СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) 
					И КоличествоПоШтрихкоду < КоличествоУпаковокОтсканировано Тогда
					
					Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
					ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
					
					МассивСтрок = Форма.ОтсканированныеТовары.НайтиСтроки(Отбор);
					
					НомерСерии = МассивСтрок[0].НомерСерии;
					ГоденДо = МассивСтрок[0].ГоденДо;
					КоличествоРазличныхСерий = 1;
					
					Для Каждого Строка Из МассивСтрок Цикл
						Если ТекущаяСтрокаСканирования.ИспользоватьНомерСерии
							И ТекущаяСтрокаСканирования.ИспользоватьСрокГодностиСерии Тогда
							
							Если Строка.НомерСерии <> НомерСерии
								И Строка.ГоденДо <> ГоденДо Тогда
								
								КоличествоРазличныхСерий = 2;
								Прервать;
								
							КонецЕсли;
							
						Иначе
							Если Строка.НомерСерии <> НомерСерии
								Или Строка.ГоденДо <> ГоденДо Тогда
								
								КоличествоРазличныхСерий = 2;
								Прервать;
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если КоличествоРазличныхСерий > 1 Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		Если (ЭтоМерныйТовар
				И КоличествоУпаковокОтсканировано + КоличествоПоШтрихкоду > ПредельноеКоличествоОтбираемогоТовара)
			Или (Не ЭтоМерныйТовар
				И КоличествоУпаковокОтсканировано + КоличествоПоШтрихкоду > КоличествоУпаковок) Тогда
			
			ЕстьОшибки = Истина;
			
		Иначе
			Если СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий)
				И КоличествоПоШтрихкоду < КоличествоУпаковокОтсканировано Тогда
				
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
				ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
				
				МассивСтрок = Форма.ОтсканированныеТовары.НайтиСтроки(Отбор);
				
				НомерСерии = МассивСтрок[0].НомерСерии;
				ГоденДо = МассивСтрок[0].ГоденДо;
				КоличествоРазличныхСерий = 1;
				
				Для Каждого Строка Из МассивСтрок Цикл
					Если ТекущаяСтрокаСканирования.ИспользоватьНомерСерии
						И ТекущаяСтрокаСканирования.ИспользоватьСрокГодностиСерии Тогда
						
						Если Строка.НомерСерии <> НомерСерии
							И Строка.ГоденДо <> ГоденДо Тогда
							
							КоличествоРазличныхСерий = 2;
							Прервать;
							
						КонецЕсли;
						
					Иначе
						Если Строка.НомерСерии <> НомерСерии
							Или Строка.ГоденДо <> ГоденДо Тогда
							
							КоличествоРазличныхСерий = 2;
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если КоличествоРазличныхСерий > 1 Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Форма.ПараметрыРежима.ИдСообщения = "ОшибкаКоличествоБольшеТребуемого";
		Форма.ПараметрыРежима.ВывестиПредупреждениеПриСканировании = Истина;
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, является ли штрихкодом товара.
//
// Параметры:
//	Штрихкод - Строка - отсканированный штрихкод.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
// Возвращаемое значение:
//	Булево - Истина, если это штрихкод товара.
//
Функция ЭтоШтрихкодТовара(Штрихкод, Товар = Неопределено)
	
	Товар = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиТоварИлиУпаковочныйЛист(Штрихкод, Ложь);
	
	Если Товар.КодВозврата = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, является ли штрихкодом упаковочного листа.
//
// Параметры:
//	Штрихкод - Строка - отсканированный штрихкод.
//	СрокГодности - Строка, Неопределено - срок годности серии товара.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//
// Возвращаемое значение:
//	Булево - Истина, если это штрихкод упаковочного листа.
//
Функция ЭтоШтрихкодУпаковочногоЛиста(Штрихкод, СрокГодности, Товар = Неопределено)
	
	Если ЗначениеЗаполнено(СрокГодности) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Товар)
		И ЗначениеЗаполнено(Товар.УпаковочныйЛист) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Товар = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиТоварИлиУпаковочныйЛист(Штрихкод, Истина);
	
	Если Товар.КодВозврата = 0
		Или Не ЗначениеЗаполнено(Товар.УпаковочныйЛист) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, является ли штрихкодом серии.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	НомерСерии - Строка - номер серии, отсканированного товара.
//	СрокГодностиСерии - Строка,Неопределено - срок годности серии товара.
//
// Возвращаемое значение:
//	Булево - Истина, если это штрихкод серии.
//
Функция ЭтоШтрихКодСерии(Форма, НомерСерии, СрокГодностиСерии)
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СерииУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоСканирование = Форма.ПараметрыРежима.Режим = "ВводЗначения";
	
	ПараметрыУказанияСерии = Новый Структура("ИспользоватьНомерСерии, ИспользоватьСрокГодностиСерии,
		|ТочностьУказанияСрокаГодностиСерии");
	ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерии, ТекущаяСтрокаСканирования);
	
	ПараметрыСерии = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиСерию(НомерСерии, СрокГодностиСерии,
		ТекущаяСтрокаСканирования.ВидНоменклатуры, ПараметрыУказанияСерии, ЭтоСканирование);
	
	Если ПараметрыСерии.КодВозврата = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет, является ли строка сканирования последней и выводит диалоговое окно.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	Отказ - Булево - Истина, если сканируемая строка складского задания является последней.
//
Процедура ПередПереходомКСледующейСтрокеСканирования(Форма, Отказ)
	
	Перем ТипДействия, ТипВыполнения;
	
	РежимВебСервиса = Форма.РежимВебСервиса;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ЭтоПоследняяСтрокаСканирования(Форма) Тогда
		
		Отказ = Истина;
		
		ПолучитьТипВыполненияДействия(ТипЗадания, ТипДействия, ТипВыполнения);
		ПредставлениеТипаЗадания = НРег(ПараметрыРежима.ТипЗадания);
		ПредставлениеТовара = ?(РежимВебСервиса,
			ПредставлениеТовара(ТекущаяСтрокаСканирования.НаименованиеНоменклатуры, ТекущаяСтрокаСканирования.НаименованиеХарактеристики),
			ПредставлениеТовара(ТекущаяСтрокаСканирования.Номенклатура, ТекущаяСтрокаСканирования.Характеристика));
		
		ПараметрыЗамены = Новый Структура;
		
		ПараметрыЗамены.Вставить("Товар", ПредставлениеТовара);
		ПараметрыЗамены.Вставить("Ячейка",
			?(РежимВебСервиса, ТекущаяСтрокаСканирования.КодЯчейки, ТекущаяСтрокаСканирования.Ячейка));
		ПараметрыЗамены.Вставить("ТипЗадания", ПредставлениеТипаЗадания);
		ПараметрыЗамены.Вставить("ТипВыполнения", ТипВыполнения);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Товар ""[Товар]"" в ячейке ""[Ячейка]"" последний в задании на [ТипЗадания]. 
				|Завершить выполнение [ТипВыполнения] товаров?'"),
			ПараметрыЗамены);
		
		КнопкаЗавершить = НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершить %1 товаров'"), ТипДействия), Истина);
		КнопкаПродолжить = НоваяКнопкаДиалога("ПерейтиКСканированию",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Продолжить %1 товаров'"), ТипДействия));
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КнопкаЗавершить);
		
		Если (ТипЗадания = "Отбор"
			Или ТипЗадания = "Размещение"
			Или ТипЗадания = "Перемещение"
				И ОтборОтсканирован)
			И (ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковок) Тогда
			
		Иначе
			Кнопки.Добавить(КнопкаПродолжить);
		КонецЕсли;
		
		Если ТипЗадания = "Перемещение" Тогда
			Если ОтборОтсканирован Тогда
				ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
			Иначе
				ПриЗавершенииСканированияТекущегоЗадания(Форма);
			КонецЕсли;
		Иначе
			ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе к следующей строке сканирования товаров. В зависимости от типа
// задания и состояния выполнения выводится диалоговое сообщение или выполняется переход к
// следующей строке сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ДобратьТовары - Булево - Истина, признак необходимости отбора товара из другой складской ячейки.
//
Процедура ПерейтиКСледующейСтрокеСканирования(Форма, ДобратьТовары = Ложь)
	
	Отказ = Ложь;
	
	ПередПереходомКСледующейСтрокеСканирования(Форма, Отказ);
	
	Если Не Отказ Тогда
		ПерейтиКСледующейСтрокеСканированияЗадания(Форма, ДобратьТовары);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того что товар является последним в ячейке.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Булево - Истина, если сканируемая строка товара является последней в ячейке в соответствии со складским заданием.
//
Функция ЭтоПоследнийТоварВЯчейке(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПорядокОбработкиТоварЯчейка = ЭтоПорядокОбработкиТоварЯчейка(Форма.ПараметрыРежима.ПорядокОбработки);
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоНаборТоваров
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "ПроверкаОтбора"
		Или ЭтоПорядокОбработкиТоварЯчейка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрокаСканирования);
		
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		НомерСтроки = МассивСтрок.Количество() - 1;
		СтрокаСкНоменклатуры = МассивСтрок[НомерСтроки];
		
		ЭтоПоследний = (СтрокаСкНоменклатуры.КоличествоТоваровВЯчейке = СтрокаСкНоменклатуры.НомерТовараВЯчейке);
		Возврат ЭтоПоследний;
	Иначе
		ЭтоПоследний = (ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке = ТекущаяСтрокаСканирования.НомерТовараВЯчейке);
		Возврат ЭтоПоследний;
	КонецЕсли;
	
КонецФункции

// Переводит систему в состояние ожидания сканирования штрихкода товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ПерейтиВРежимОжиданияСканированияТовара(Форма)
	
	СброситьПризнакиСканированияВсехПараметров(Форма);
	УстановитьПризнакСканированияПараметра(Форма, "Номенклатура", Истина);
	
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	
КонецПроцедуры

// Выполняет проверку указания серии товара в строке складскго задания.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания.
//	СтрокаСканирования - см. СтрокаСканирования
//
// Возвращаемое значение:
//	Булево - Истина, если серия товара указана.
//
Функция СерияЗаполнена(ТипЗадания, СтрокаСканирования)
	
	Если (ТипЗадания = "Отбор"
			Или ТипЗадания = "Перемещение")
		И СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий) Тогда
		
		Если ЗначениеЗаполнено(СтрокаСканирования.НомерСерии)
			Или ЗначениеЗаполнено(СтрокаСканирования.ГоденДо) Тогда
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСканирования.Серия) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устанавливает параметры отображения кнопки как "Нажата" или "Не нажата".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//	ИмяЭлемента - Строка - имя элемента.
//	Режим - Строка - идентификатор режима, может принимать значения: "Нажата", "НеНажата".
//
Процедура УстановитьПараметрыОтображенияКнопки(Форма, ИмяЭлемента, Режим)
	
	Элемент = Форма.Элементы[ИмяЭлемента];
	
	Если Режим = "Нажата" Тогда
		ПодсветитьЭлемент(Форма.РазрешениеЭкрана, Элемент);
	ИначеЕсли Режим = "НеНажата" Тогда
		СнятьПодсветкуЭлемента(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры кнопок управления порядком обработки складского задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьПараметрыЭлементовПорядкаОбработкиСкладскогоЗадания(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	Если ПараметрыРежима = Неопределено Тогда
		ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ЯчейкаТовар;
	Иначе
		ПорядокОбработки = ПараметрыРежима.ПорядокОбработки;
	КонецЕсли;
	
	Если ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ТоварЯчейка Тогда
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисПорядокОбработкиТоварЯчейка", "Нажата");
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисПорядокОбработкиЯчейкаТовар", "НеНажата");
	Иначе
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисПорядокОбработкиТоварЯчейка", "НеНажата");
		УстановитьПараметрыОтображенияКнопки(Форма, "СервисПорядокОбработкиЯчейкаТовар", "Нажата");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость строки с информацией о количестве упаковок товара
// в строке задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьВидимостьКоличестваВДокументе(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидимостьКолДок = ОтображатьЭлементСканирования(Форма, "КоличествоВДокументе");
	
	Элементы.ПустаяНадписьКоличестваВДокументе.Видимость = ВидимостьКолДок;
	Элементы.ГруппаКоличествоВДокументе.Видимость        = ВидимостьКолДок;
	
КонецПроцедуры

// Устанавливает доступность команд изменения схемы сканирования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы рабочего места работника склада, которые содержат:
//			** СервисРежимСканированияСерийТСТ -КнопкаФормы - выполняет установку порядка выполнения складского задания
//																размещения товаров (сначала сканируется товар, затем
//																серия товара, потом снова товар).
//			** СервисРежимСканированияСерийТВТ -КнопкаФормы - выполняет установку порядка выполнения складского задания
//																размещения товаров (сначала сканируется товар, затем
//																все серии товара).
//
Процедура УстановитьДоступностьИзмененияСхемыСканирования(Форма)
	
	ДоступностьИзмененияСхемыСканирования = ИзменениеСхемыСканированияСерийДоступно(Форма);
	
	Форма.Элементы.СервисРежимСканированияСерийТСТ.Доступность = ДоступностьИзмененияСхемыСканирования;
	Форма.Элементы.СервисРежимСканированияСерийТВТ.Доступность = ДоступностьИзмененияСхемыСканирования;
	
КонецПроцедуры

// Устанавливает доступность команд изменения порядка обхода.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура УстановитьВидимостьДоступностьИзмененияПорядкаОбхода(Форма)
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ЭтоОтбор = (Форма.ПараметрыРежима.ТипЗадания = "Отбор");
	ЭтоПриемка = (Форма.ПараметрыРежима.ТипЗадания = "Приемка");
	ЭтоПересчет = (Форма.ПараметрыРежима.ТипЗадания = "Пересчет");
	ЭтоРазмещение = (Форма.ПараметрыРежима.ТипЗадания = "Размещение");
	ЭтоПеремещение = (Форма.ПараметрыРежима.ТипЗадания = "Перемещение");
	ЭтоПроверкаОтбора = (Форма.ПараметрыРежима.ТипЗадания = "ПроверкаОтбора");
	
	// Доступность настройки порядка обхода.
	ДоступностьНастройкиПорядкаОбхода = ИзменениеПорядкаОбходаДоступно(Форма);
	
	Форма.Элементы.СервисПорядокОбработкиЯчейкаТовар.Доступность = ДоступностьНастройкиПорядкаОбхода;
	Форма.Элементы.СервисПорядокОбработкиТоварЯчейка.Доступность = ДоступностьНастройкиПорядкаОбхода;
	
	// Видимость настройки порядка обхода.
	ВидимостьНастройкиПорядкаОбхода = Не (ЭтоПроверкаОтбора Или (ЭтоРазмещение И ЭтоНаборТоваров) Или ЭтоПриемка
		Или ЭтоОтбор Или ЭтоПересчет);
	
	// В задании на перемещение видимость изменения порядка обхода доступна только на этапе размещения.
	Если ЭтоПеремещение Тогда
		Если Форма.ПараметрыРежима.ОтборОтсканирован Тогда
			ВидимостьНастройкиПорядкаОбхода = Истина
		Иначе
			ВидимостьНастройкиПорядкаОбхода = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.СервисПорядокОбработкиЯчейкаТовар.Видимость = ВидимостьНастройкиПорядкаОбхода;
	Форма.Элементы.СервисПорядокОбработкиТоварЯчейка.Видимость = ВидимостьНастройкиПорядкаОбхода;
	Форма.Элементы.ГруппаПорядокОбработкиСкладскогоЗадания.Видимость = ВидимостьНастройкиПорядкаОбхода;
	
КонецПроцедуры

// Возвращает количество строк тары, которая была отсканирована.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
// Возвращаемое значение:
//	Число - количество строк отсканирвоанной тары.
//
Функция КоличествоСтрокОтсканированнойТары(Форма)
	
	ДЗОтсканированнаяТара = Форма.РеквизитФормыВЗначение("ОтсканированнаяТара");
	
	ТаблицаТары = Новый ТаблицаЗначений;
	ТаблицаТары.Колонки.Добавить("Номенклатура");
	ТаблицаТары.Колонки.Добавить("Характеристика");
	
	Для каждого СтрокаТовара Из ДЗОтсканированнаяТара.Строки Цикл
		Для каждого СтрокаТары Из СтрокаТовара.Строки Цикл
			Если СтрокаТары.КоличествоУпаковокОтсканировано > 0 Тогда
				НоваяСтрока = ТаблицаТары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТары);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТары.Свернуть("Номенклатура, Характеристика");
	
	Возврат ТаблицаТары.Количество();
	
КонецФункции

// Инициализирует табличную часть зон приемки и отгрузки товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма рабочего места работника склада.
//
Процедура ЗаполнитьЗоныПриемкиОтгрузки(Форма)
	
	Склад = Форма.Объект.Склад;
	РежимВебСервиса = Форма.РежимВебСервиса;
	Помещение = Форма.Объект.Помещение;
	ЗоныПриемкиОтгрузки = Форма.ЗоныПриемкиОтгрузки;
	
	Если РежимВебСервиса Тогда
		ЗоныПриемкиОтгрузки.Загрузить(РабочееМестоРаботникаСкладаXDTO.ЗоныПриемкиОтгрузки(Форма));
	Иначе
		ЗоныПриемкиОтгрузки.Загрузить(РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗоныПриемкиОтгрузки(Склад, Помещение));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет настройку использования серии.
//
// Параметры:
//	СтрокаСканирования - см. СтрокаСканирования
//
// Возвращаемое значение:
//	Булево - Истина, если серия идентифицирует экземпляр товара.
//
Функция СерияИдентифицируетЭкземплярТовара(СтрокаСканирования)
	
	НастройкаИспользованияСерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСканирования.ВидНоменклатуры,
		"НастройкаИспользованияСерий");
	
	Возврат НастройкаИспользованияСерии = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара;
	
КонецФункции

// Возвращает массив, элементами которого являются значения мерных типов измеряемых величин.
//
// Возвращаемое значение:
//	Массив из ПеречислениеСсылка.ТипыИзмеряемыхВеличин - элементами являются значения мерных типов измеряемых величин.
//
Функция МерныеЕдиницыИзмерения()
	
	МерныеЕдиницыИзмерения = Новый Массив;
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	
	Возврат МерныеЕдиницыИзмерения;
	
КонецФункции

#КонецОбласти
