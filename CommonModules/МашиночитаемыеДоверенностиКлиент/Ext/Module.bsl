// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Показывает форму создания машиночитаемой доверенности
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура СоздатьМЧД(ОповещениеОЗавершении = Неопределено) Экспорт
	ОткрытьФорму("Справочник.МЧД003.Форма.ЧерновикМЧД", , , , , , ОповещениеОЗавершении);
КонецПроцедуры

// Показывает форму создания машиночитаемой доверенности
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура СоздатьМЧДПередоверия(ОповещениеОЗавершении = Неопределено) Экспорт
	ОткрытьФорму("Справочник.МЧД003.Форма.ЧерновикПередоверияМЧД", , , , , , ОповещениеОЗавершении);
КонецПроцедуры

// Показывает действия при обработке ошибок наличия подписей с невалидной МЧД.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ДополнительныеПараметры - Произвольный
//  
Процедура ОткрытьФормуПроверкиПолномочий(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	ДанныеДляПроверки = Новый Соответствие();
	ВсегоЭлементовДляПроверки = 0;
	
	Для Каждого Ошибка Из КонтекстДиагностики.Диагностика.Ошибки Цикл
		
		ВсегоЭлементовДляПроверки = ВсегоЭлементовДляПроверки + Ошибка.ДополнительныеДанные.Количество();
		ДанныеДляПроверки.Вставить(Ошибка, Ошибка.ДополнительныеДанные);
		
	КонецЦикла;
	
	Если ВсегоЭлементовДляПроверки = 1 Тогда
		
		ПараметрыПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеПараметрыПроверкиПолномочий();
		ЗаполнитьЗначенияСвойств(ПараметрыПроверки, Ошибка.ДополнительныеДанные[0]);
		ПараметрыПроверки.ЭтоОперацияЭДО = Истина;
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиПолномочий", ЭтотОбъект, ДанныеДляПроверки);
		ПроверитьПолномочияДоверенностиВручную(ПараметрыПроверки, Оповещение);
		
	Иначе
		
		ДанныеПроверки = Новый Массив();
		
		Для Каждого Ошибка Из ДанныеДляПроверки Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПроверки, Ошибка.Значение);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиПолномочий", ЭтотОбъект, ДанныеДляПроверки);
		ПроверитьПолномочияДоверенностейВручную(Новый Структура("ДанныеПроверки", ДанныеПроверки), Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОтражениеВУчете
// См. ОбменСКонтрагентамиКлиентПереопределяемый.ПриПодбореУчетногоДокумента
Процедура ПриПодбореУчетногоДокумента(Знач Настройки, Знач ОповещениеОВыборе, СтандартнаяОбработка = Истина) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе", Истина, Истина);
	ПараметрыФормы.Вставить("Контрагент", Настройки.Контрагент);
	
	ОткрытьФорму(Настройки.ИмяОбъектаМетаданных + ".ФормаВыбора", 
		ПараметрыФормы,,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// Открывает форму результатов проверки подписи 
// 
// Параметры:
// 	ПараметрыФормы - Неопределено
// 	               - См. НовыеПараметрыФормыРезультатовПроверкиПодписи
// 	ПараметрыОткрытия - см. ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД.ПараметрыОткрытияФормы
Процедура ОткрытьРезультатыПроверкиПодписи(ПараметрыФормы = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД(
		"Обработка.РезультатыПроверкиПодписи.Форма.РезультатыПроверкиПодписи", ПараметрыФормы, ПараметрыОткрытия);
		
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
// * ЭлектронныйДокумент - Неопределено
//                       - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                       - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * СообщениеЭДО - Неопределено
//                - ДокументСсылка.СообщениеЭДО
// * ПодписанныйОбъект - Неопределено
//                     - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ПредставлениеДокумента - Неопределено
//                          - ТабличныйДокумент
// * СвойстваПодписи - Неопределено
//                   - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
// * СвойстваДоверенности - Неопределено
//                        - См. МашиночитаемыеДоверенности.ОбщиеСвойстваДоверенности
// * РезультатПроверки - Неопределено
//                     - См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
Функция НовыеПараметрыФормыРезультатовПроверкиПодписи() Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", Неопределено);
	ПараметрыФормы.Вставить("СообщениеЭДО", Неопределено);
	ПараметрыФормы.Вставить("ПодписанныйОбъект", Неопределено);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Неопределено);
	ПараметрыФормы.Вставить("СвойстваПодписи", Неопределено);
	ПараметрыФормы.Вставить("СвойстваДоверенности", Неопределено);
	ПараметрыФормы.Вставить("РезультатПроверки", Неопределено);
	Возврат ПараметрыФормы;

КонецФункции

// Загружает доверенность из файла, помещенного в хранилище.
// Справочник назначение определяется по формату данных файла,
// МЧД версии 003 грузится в справочник МЧД003, файлы прочих форматов
// пытаются загрузится в справочники МашиночитаемыеДоверенностиОрганизаций (в приоритете)
// и МашиночитаемыеДоверенностиКонтрагентов.
// 
// После загрузки выполняется проверка доверенности.
// 
// Параметры:
//  АдресХранилища - Строка - адрес хранилища двоичных данных загружаемого файла
Процедура ЗагрузитьМЧДИзФайла(АдресХранилища) Экспорт
	РезультатЗагрузкиМЧД = МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧДИзФайла(АдресХранилища);
	Если Не ЗначениеЗаполнено(РезультатЗагрузкиМЧД.МЧД) Тогда
		ПоказатьПредупреждениеПриЗагрузкеМЧД(РезультатЗагрузкиМЧД.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МЧД", РезультатЗагрузкиМЧД.МЧД);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьПерезаполнитьМЧДИзФайлаЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	ПроверитьДанныеМЧД(ОповещениеОЗавершении, РезультатЗагрузкиМЧД, КонтекстДиагностики);
КонецПроцедуры

// Загружает в элемент справочника данные из архива с файлом МЧД и подписью.
// Если доверенности с таким номером нет, то создает новую, иначе перезаполняет существующую.
// Проверяет подпись файла МЧД.
//
// Параметры:
//  АдресСДаннымиФайла - Строка - Адрес во временном хранилище с двоичными данными архива.
//
Процедура ЗагрузитьПерезаполнитьМЧДКонтрагентаИзФайла(АдресСДаннымиФайла) Экспорт
	
	ЗагрузитьПерезаполнитьМЧДИзФайла(АдресСДаннымиФайла, Ложь, Истина);
	
КонецПроцедуры

// Загружает в элемент справочника данные из архива с файлом МЧД и подписью.
// Если доверенности с таким номером нет, то создает новую, иначе перезаполняет существующую.
// Проверяет подпись файла МЧД.
//
// Параметры:
//  АдресСДаннымиФайла - Строка - Адрес во временном хранилище с двоичными данными архива.
//
Процедура ЗагрузитьПерезаполнитьМЧДОрганизацииИзФайла(АдресСДаннымиФайла) Экспорт
	
	ЗагрузитьПерезаполнитьМЧДИзФайла(АдресСДаннымиФайла, Истина);
	
КонецПроцедуры

// Загружает в элемент справочника данные из архива с файлом МЧД и подписью.
// Если доверенности с таким номером нет, то создает новую, иначе перезаполняет существующую.
// Проверяет подпись файла МЧД.
//
// Параметры:
//  АдресСДаннымиФайла - Строка - Адрес во временном хранилище с двоичными данными архива.
//  ЭтоМЧДОрганизации - Булево - Признак загрузки МЧД организации.
//  ЭтоМЧДКонтрагента - Булево - Признак загрузки МЧД контрагента.
//
Процедура ЗагрузитьПерезаполнитьМЧДИзФайла(АдресСДаннымиФайла, ЭтоМЧДОрганизации = Ложь, ЭтоМЧДКонтрагента = Ложь) Экспорт
	
	Если ЭтоМЧДОрганизации Тогда 
		РезультатЗагрузкиМЧД = МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧДОрганизацииИзФайла(АдресСДаннымиФайла);
	ИначеЕсли ЭтоМЧДКонтрагента Тогда
		РезультатЗагрузкиМЧД = МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧДКонтрагентаИзФайла(АдресСДаннымиФайла);
	Иначе	
		РезультатЗагрузкиМЧД = МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧДИзФайла(АдресСДаннымиФайла);
	КонецЕсли;	
		
	Если РезультатЗагрузкиМЧД <> Неопределено И Не ЗначениеЗаполнено(РезультатЗагрузкиМЧД.МЧД) Тогда
		ПоказатьПредупреждениеПриЗагрузкеМЧД(РезультатЗагрузкиМЧД.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МЧД", РезультатЗагрузкиМЧД.МЧД);

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьПерезаполнитьМЧДИзФайлаЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПроверитьДанныеМЧД(ОповещениеОЗавершении, РезультатЗагрузкиМЧД, КонтекстДиагностики);
	
КонецПроцедуры

// Проверяет данные доверенности и данные подписи доверенности.
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - Оповещение, которое будет вызвано после проверки подписи доверенности.
//  ПараметрыПроверкиМЧД - Структура:
//  * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//        - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  РезультатПроверкиНаСервере - Структура:
//  * Результат - Булево
//  * ТекстОшибки - Строка
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ПроверитьДанныеМЧД(ОповещениеОЗавершении, ПараметрыПроверкиМЧД, КонтекстДиагностики, РезультатПроверкиНаСервере = Неопределено) Экспорт
	
	ДанныеДляПроверки = ПараметрыПроверкиМЧД.ДанныеДляПроверки;
	
	Если ДанныеДляПроверки.ДанныеДоверенности = Неопределено 
		Или ДанныеДляПроверки.ДанныеПодписи = Неопределено Тогда
		
		РезультатПроверки = Новый Структура;
		РезультатПроверки.Вставить("Результат", Ложь);
		РезультатПроверки.Вставить("ТекстОшибки", НСтр("ru = 'Нет данных файла доверенности и/или подписи.'"));
		РезультатПроверки.Вставить("КонтекстДиагностики", КонтекстДиагностики);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверкиМЧД.ТребуетсяПроверкаМЧДНаКлиенте Тогда
		ПроверитьДоверенность(ОповещениеОЗавершении, 
			ПараметрыПроверкиМЧД.ДанныеДляПроверки, КонтекстДиагностики);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатПроверкиНаСервере);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат ручной проверки полномочий МЧД.
// 
// Параметры:
//  Результаты - Неопределено
//  		   - Структура:
//  			 * Значение - КодВозвратаДиалога
//  			 * БольшеНеЗадаватьЭтотВопрос - Булево
//  ДополнительныеПараметры - Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  * ОповещениеУспешногоЗавершения - ОписаниеОповещения 
//  * ПараметрыВыполненияДействийПоЭДО - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//
Процедура ОбработатьРезультатРучногоПодтвержденияПодписания(Результаты, ДополнительныеПараметры) Экспорт
	
	Если Результаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ДополнительныеПараметры.ЭлектронныйДокумент;
	
	Настройки = НовыеНастройкиРучнойПроверкиПодписиПоМЧД();
	Настройки.БольшеНеЗадаватьЭтотВопрос = Результаты.БольшеНеЗадаватьЭтотВопрос;
	
	Если Результаты.Значение = КодВозвратаДиалога.Да Тогда
		Настройки.ПроверкаВыполнена = Истина;
	Иначе
		Настройки.ПроверкаВыполнена = Ложь;
	КонецЕсли;
	
	МашиночитаемыеДоверенностиВызовСервера.СохранитьНастройкиРучнойПроверкиПодписиПоМЧД(
		Настройки, ЭлектронныйДокумент);
		
	Если Не Настройки.ПроверкаВыполнена Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыВыполненияДействийПоЭДО = ДополнительныеПараметры.ПараметрыВыполненияДействийПоЭДО;
	
	Оповещение = 
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

// Открывает форму диалога ручной проверки доверенности.
// 
// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ДополнительныеПараметры - Структура
//
Процедура ОткрытьДиалогРучногоПодтвержденияПроверкиПодписиПоМЧД(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	ЭлектронныйДокумент = КонтекстДиагностики.Диагностика.Ошибки[0].СсылкаНаОбъект;
	
	ДополнительныеПараметры.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
	ШаблонТекста = СтрШаблон("%1 %2" + Символы.ПС +  "%3" + Символы.ПС + "%4",
		НСтр("ru = 'Этот документ подписан НЕ руководителем организации.'"),
		НСтр("ru = 'Для автоматической проверки такой подписи требуется электронная доверенность.'"),
		НСтр("ru = 'Найти подходящую доверенность автоматически не получилось.'"),
		НСтр("ru = 'Можно проверить правильность подписания этого документа самостоятельно и решить, доверять подписи этого контрагента или нет.'"));
	
	ТекстВопроса = ШаблонТекста;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ОбработатьРезультатРучногоПодтвержденияПодписания", 
			ЭтотОбъект, ДополнительныеПараметры);

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, доверяю'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет, не доверяю'"));
	
	ПараметрыВопросаПользователю = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопросаПользователю.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Истина;
	ПараметрыВопросаПользователю.Заголовок =  НСтр("ru = 'Подпись не проверена'");
	ПараметрыВопросаПользователю.Картинка = БиблиотекаКартинок.ДиалогВосклицание;
	ПараметрыВопросаПользователю.ТекстФлажка = НСтр("ru = 'Больше не задавать вопрос по документам этого контрагента'");

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещения,
		ТекстВопроса,
		Кнопки,
		ПараметрыВопросаПользователю);
			
КонецПроцедуры

// См. ИнтеграцияЭДОСобытияКлиент.ПослеПерезаполненияОбъектаУчета
Процедура ПослеПерезаполненияОбъектаУчета(ОповещениеОЗавершении, ТипДокумента, ОбъектУчета, КонтекстДиагностики) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.МашиночитаемаяДоверенность") Тогда

		ЭтоСсылкаНаДоверенность = 
			МашиночитаемыеДоверенностиКлиентСервер.ЭтоСсылкаНаДоверенность(ОбъектУчета);
			
		Если Не ЭтоСсылкаНаДоверенность Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		ПослеОтраженияПерезаполненияОбъектовУчета(ОповещениеОЗавершении, ТипДокумента, ОбъектыУчета, КонтекстДиагностики);

	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, КонтекстДиагностики);
	КонецЕсли; 
	
КонецПроцедуры

// См. ИнтеграцияЭДОСобытияКлиент.ПослеОтраженияВУчете
Процедура ПослеОтраженияВУчете(ОповещениеОЗавершении, ТипДокумента, ТаблицаДокументов, КонтекстДиагностики) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.МашиночитаемаяДоверенность") Тогда

		Если ТаблицаДокументов.Количество() = 0 Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, КонтекстДиагностики);
			Возврат;
		КонецЕсли;
		
		ОбъектыУчета = Новый Массив;
		
		Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
			
			ЭтоСсылкаНаДоверенность = 
				МашиночитаемыеДоверенностиКлиентСервер.ЭтоСсылкаНаДоверенность(СтрокаТаблицыДокументов.ОбъектУчета);
				
			Если Не ЭтоСсылкаНаДоверенность Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыУчета.Добавить(СтрокаТаблицыДокументов.ОбъектУчета);

		КонецЦикла;
		
		ПослеОтраженияПерезаполненияОбъектовУчета(ОповещениеОЗавершении, ТипДокумента, ОбъектыУчета, КонтекстДиагностики);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, КонтекстДиагностики);
	КонецЕсли; 
	
КонецПроцедуры

// Проверка доверенностей на клиенте после отражения в учете продолжение
//
// Параметры:
//  РезультатПроверки - см. МашиночитаемыеДоверенности.РезультатПроверкиДоверенности
//  Параметры - Структура:
//   * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//         - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//   * ОповещениеОЗавершении - ОписаниеОповещения - Оповещение, которое будет вызвано после обработки события с параметрами:
//        Результат - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ПослеОтраженияВУчетеЗавершение(РезультатПроверки, Параметры) Экспорт

	МЧД = Параметры.МЧД;
	КонтекстДиагностики = Параметры.КонтекстДиагностики;
	ОповещениеОЗавершении = Параметры.ОповещениеОЗавершении;

	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		КонтекстДиагностики = РезультатПроверки.КонтекстДиагностики;
		ОбработатьРезультатПроверкиМЧД(РезультатПроверки);
		МашиночитаемыеДоверенностиВызовСервера.ОтразитьРезультатПроверкиМЧД(МЧД, РезультатПроверки.Результат, 
			РезультатПроверки.ТекстОшибки);
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, КонтекстДиагностики);
	
КонецПроцедуры

// Проверяет корректность оформления доверенности.
// 
// Параметры:
//  Оповещение - ОписаниеОповещения - описание процедуры, которая будет вызвана после выполнения
//                                    проверки со следующими параметрами:
//                         * Результат - см. МашиночитаемыеДоверенности.РезультатПроверкиДоверенности
//                         * ДополнительныеПараметры - Произвольный - значение, которое было указано
//                                                      при создании объекта ОписаниеОповещения.
//  ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПроверитьДоверенность(Оповещение, ДанныеДляПроверки, КонтекстДиагностики) Экспорт
	
	Контекст = КонтекстПроверкиДоверенности();
	Контекст.ДанныеДоверенности = ДанныеДляПроверки.ДанныеДоверенности;
	Контекст.Оповещение = Оповещение;
	Контекст.КонтекстДиагностики = КонтекстДиагностики;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПроверкиПодписи", ЭтотОбъект, Контекст);
	КриптографияБЭДКлиент.ПроверитьПодпись(ОповещениеОЗавершении, ДанныеДляПроверки.ДанныеДоверенности,
		ДанныеДляПроверки.ДанныеПодписи, КонтекстДиагностики);
	
КонецПроцедуры

// Открывает общую для форму списков машиночитаемых доверенностей организаций и контрагентов.
//
Процедура ОткрытьОбщуюФормуСписковМЧД() Экспорт
	ОткрытьФорму("РегистрСведений.ЖурналМашиночитаемыхДоверенностей.ФормаСписка");
КонецПроцедуры

// Открывает форму списка машиночитаемых доверенностей.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
Процедура ОткрытьСписокМЧД(Организация = Неопределено) Экспорт
	
	ОткрытьФорму("РегистрСведений.ЖурналМашиночитаемыхДоверенностей.Форма.ФормаСписка");
	Оповестить(ИмяОповещенияПоказатьДоверенностиОрганизации(), Организация);
	
КонецПроцедуры

// Формирует пустую структуру настроек проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * БольшеНеЗадаватьЭтотВопрос - Булево
// * ПроверкаВыполнена - Булево
// 
Функция НовыеНастройкиРучнойПроверкиПодписиПоМЧД() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Настройки.Вставить("ПроверкаВыполнена", Ложь);

	Возврат Настройки;
	
КонецФункции

// Оповестить о изменении МЧД.
// 
// Параметры:
//  Доверенности - Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
//
Процедура ОповеститьОИзмененииМЧД(Доверенности) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Доверенности", Доверенности);
	
	Оповестить(ИмяОповещенияОИзмененииМЧД(), ПараметрыОповещения);
	
КонецПроцедуры

// Имя оповещения о изменении МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяОповещенияОИзмененииМЧД() Экспорт
	
	Возврат "ИзмененыМЧД";
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИмяОповещенияПоказатьДоверенностиОрганизации() Экспорт
	Возврат "ПоказатьДоверенностиОрганизации";
КонецФункции

// Возвращает имя события, возникающее при исправлении ошибки проверки полномочий.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияИсправлениеОшибкиПроверкиПолномочий() Экспорт
	
	Возврат "МашиночитаемыеДоверенности.ВыполненоИсправлениеОшибкиПроверкиПолномочий";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает имя события, возникающее на форме при регистрации передоверия в ФНС.
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияРегистрацииПередоверия() Экспорт
	
	Возврат "РегистрацияПередоверия";
	
КонецФункции

Процедура ПоказатьПредупреждениеПриЗагрузкеМЧД(ТекстПредупреждения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения,, НСтр("ru = 'Доверенность не загружена'"));
	
КонецПроцедуры
// Обрабатывает событие дерева настроек проверки полномочий.
// 
// Параметры:
//  Элемент - ТаблицаФормы
Процедура ДеревоОтбораПриАктивизацииСтроки(Элемент) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <>  Неопределено Тогда
		ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
		РазрешеноУдаление = НЕ Элемент.ТекущиеДанные.ДоступенСписок;
		РазрешеноДобавление = Элемент.ТекущиеДанные.ДоступенСписок
			ИЛИ (ТекущийРодитель <> Неопределено И ТекущийРодитель.ДоступенСписок);
		Элемент.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоОтбораКонтекстноеМенюДобавить.Доступность = РазрешеноДобавление;
		Элемент.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоОтбораДобавить.Доступность = РазрешеноДобавление;
		Элемент.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоОтбораКонтекстноеМенюУдалить.Доступность = РазрешеноУдаление;
		Элемент.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоОтбораУдалить.Доступность = РазрешеноУдаление;
		Элемент.КоманднаяПанель.ПодчиненныеЭлементы.ДеревоОтбораИзменить.Доступность =
			НЕ Элемент.ТекущиеДанные.ДоступенСписок;
		Элемент.КонтекстноеМеню.ПодчиненныеЭлементы.ДеревоОтбораКонтекстноеМенюИзменить.Доступность =
			НЕ Элемент.ТекущиеДанные.ДоступенСписок;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие дерева настроек проверки полномочий.
// 
// Параметры:
//  ДанныеСтроки - ДанныеФормыЭлементДерева
//  Отказ - Булево
//  ИдентификаторСтроки - Число
//  Модифицированность - Булево
Процедура ДеревоОтбораПередУдалением(ДанныеСтроки, Отказ, ИдентификаторСтроки, Модифицированность) Экспорт
	
	Если ДанныеСтроки.ДоступенСписок Тогда
	
		Отказ = Истина;
		Строки = ДанныеСтроки.ПолучитьЭлементы();
		
		Пока Строки.Количество() > 0 Цикл
			Строки.Удалить(0);
			Модифицированность = Истина;
		КонецЦикла;
		
		ИдентификаторСтроки = ДанныеСтроки.ПолучитьИдентификатор();
		Возврат;
	
	КонецЕсли;
	
	Если ДанныеСтроки.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево() Тогда
		
		Отказ = Истина;
		
		Если ДанныеСтроки.НачальноеЗначение <> Истина ИЛИ ДанныеСтроки.КонечноеЗначение <> Ложь Тогда
			
			ДанныеСтроки.НачальноеЗначение = Истина;
			ДанныеСтроки.КонечноеЗначение = Ложь;
			Модифицированность = Истина;
			
		КонецЕсли;
		
		ИдентификаторСтроки = ДанныеСтроки.ПолучитьИдентификатор();
	
	ИначеЕсли ДанныеСтроки.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15() Тогда
		
		Отказ = Истина;
		
		Если ДанныеСтроки.НачальноеЗначение + ДанныеСтроки.КонечноеЗначение > 0 Тогда
			
			ДанныеСтроки.НачальноеЗначение = 0;
			ДанныеСтроки.КонечноеЗначение = 0;
			Модифицированность = Истина;
			
		КонецЕсли;
		
		ИдентификаторСтроки = ДанныеСтроки.ПолучитьИдентификатор();
		
	Иначе
		
		Отказ = Истина;
		Модифицированность = Истина;
		КорневойЭлемент = ДанныеСтроки.ПолучитьРодителя();
		КорневойЭлемент.ПолучитьЭлементы().Удалить(ДанныеСтроки);
		ИдентификаторСтроки = КорневойЭлемент.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие дерева настроек проверки полномочий.
// 
// Параметры:
//  ДанныеСтроки - ДанныеФормыЭлементДерева
//  Отказ - Булево
//  Элемент - ПолеФормы
//  Оповещение - ОписаниеОповещения
Процедура ДеревоОтбораПередНачаломИзменения(ДанныеСтроки, Отказ, Элемент, Оповещение) Экспорт
	
	Если ДанныеСтроки.ДоступенСписок Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево()
		ИЛИ ДанныеСтроки.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15() Тогда
		
		Отказ = Истина;
		ПараметрыВвода = Новый Структура("НачальноеЗначение, КонечноеЗначение, Заголовок",
			ДанныеСтроки.НачальноеЗначение, ДанныеСтроки.КонечноеЗначение, ДанныеСтроки.ЗаголовокПоля);
		ОткрытьФорму("Справочник.ПравилаПроверкиПолномочийМЧД.Форма.ВводЗначения",
			ПараметрыВвода, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Элемент.ОграничениеТипа = ДанныеСтроки.Тип;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие дерева настроек проверки полномочий.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ОтменаРедактирования - Булево
//  ДеревоОтбора - ДанныеФормыДерево
Процедура ДеревоОтбораПередОкончаниемРедактирования(Элемент, ОтменаРедактирования, ДеревоОтбора) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ИдСтроки = ТекущиеДанные.ИдСтроки;
	
	Если ИдСтроки > 0 Тогда
		
		Если ОтменаРедактирования Тогда
			
			СтрокаДерева = ДеревоОтбора.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
			РодительЭлемента = СтрокаДерева.ПолучитьРодителя();
			ИндексСтроки = РодительЭлемента.ПолучитьЭлементы().Индекс(СтрокаДерева);
			РодительЭлемента.ПолучитьЭлементы().Удалить(ИндексСтроки);
			
		Иначе
			
			ТекущиеДанные.ИдСтроки = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие дерева настроек проверки полномочий.
// 
// Параметры:
//  ДеревоОтбора - ТаблицаФормы
//  Отказ - Булево
//  Элемент - ПолеФормы
Процедура ДеревоОтбораПередНачаломДобавления(ДеревоОтбора, Отказ, Элемент) Экспорт
	
	ДанныеСтроки = ДеревоОтбора.ТекущиеДанные;
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	
	Если Родитель = Неопределено И НЕ ДанныеСтроки.ДоступенСписок Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Родитель <> Неопределено И Родитель.ДоступенСписок Тогда
		
		Отказ = Истина;
		СтрокаДерева = Родитель.ПолучитьЭлементы().Добавить();
		СтрокаДерева.ИдСтроки = ДеревоОтбора.ТекущаяСтрока;
		СтрокаДерева.Картинка = ДанныеСтроки.Картинка;
		СтрокаДерева.Тип = Родитель.Тип;
		ДеревоОтбора.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		ДеревоОтбора.ИзменитьСтроку();
		Возврат;
		
	КонецЕсли;
	
	Элемент.ОграничениеТипа = ДанныеСтроки.Тип;
	
КонецПроцедуры

// Обработчик события выбора варианта проверки форм МЧД
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ОтобразитьВариантПроверки(Форма) Экспорт
	
	Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
	
	Если Форма.ВариантПроверки = Варианты.Настройка Тогда
		
		Форма.Элементы.ГруппаСкрипт.Видимость = Ложь;
		Форма.Элементы.ГруппаНастройка.Видимость = Истина;
		
	ИначеЕсли Форма.ВариантПроверки = Варианты.Скрипт Тогда
		
		Форма.Элементы.ГруппаСкрипт.Видимость = Истина;
		Форма.Элементы.ГруппаНастройка.Видимость = Ложь;
		
	КонецЕсли;
	
	СформироватьЗаголовокВкладкиПолномочия(Форма);
	
КонецПроцедуры

Функция ПредупреждениеОбОтсутствииНастройки() Экспорт
	Возврат НСтр("ru = 'Правила проверки полномочий этой доверенности не настроены. Без этого невозможно ее использование. Настройку можно выполнить позже.'");
КонецФункции

// Формирует заголовок вкладки полномочия.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ПравилоНастроено - Булево
//  
Процедура СформироватьЗаголовокВкладкиПолномочия(Форма, ПравилоНастроено = Неопределено) Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти("ГруппаПроверкаПолномочий");
	
	Если ГруппаФормы <> Неопределено И ГруппаФормы.Вид = ВидГруппыФормы.Страница Тогда
		
		Если ПравилоНастроено = Неопределено Тогда
			ПравилоНастроено = Ложь;
			Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
			
			Если Форма.ВариантПроверки = Варианты.Скрипт Тогда
				ПравилоНастроено = ЗначениеЗаполнено(Форма.Скрипт);
			ИначеЕсли Форма.ВариантПроверки = Варианты.Настройка Тогда
				ПравилоНастроено = МашиночитаемыеДоверенностиКлиентСервер.ДеревоСодержитНастройки(Форма.ДеревоОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Форма.ЗаголовокГруппаПроверкаПолномочий = ?(ПравилоНастроено, НСтр("ru = 'есть'"), НСтр("ru = 'нет'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки МЧД после отражения/перезаполнения объектов учета.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - Оповещение о завершении
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Объекты учета
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПослеОтраженияПерезаполненияОбъектовУчета(ОповещениеОЗавершении, ТипДокумента, ОбъектыУчета, КонтекстДиагностики)

	Для Каждого ОбъектУчета Из ОбъектыУчета Цикл
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("МЧД", ОбъектУчета);
		ПараметрыОповещения.Вставить("КонтекстДиагностики", КонтекстДиагностики);
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);

		Оповещение = Новый ОписаниеОповещения("ПослеОтраженияВУчетеЗавершение", ЭтотОбъект, ПараметрыОповещения);

		ТребуетсяПроверкаМЧДНаКлиенте = Не ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере();

		ПараметрыПроверкиМЧД = Новый Структура;
		ПараметрыПроверкиМЧД.Вставить("МЧД", ОбъектУчета);
		ПараметрыПроверкиМЧД.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);

		ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
		ДанныеФайлаИПодписи = МашиночитаемыеДоверенностиВызовСервера.ДанныеФайлаДоверенностиИПодписи(ОбъектУчета);
		ДанныеДляПроверки.ДанныеДоверенности = ДанныеФайлаИПодписи.ДанныеФайла;
		ДанныеДляПроверки.ДанныеПодписи = ДанныеФайлаИПодписи.ДанныеПодписи;
		ПараметрыПроверкиМЧД.Вставить("ДанныеДляПроверки", ДанныеДляПроверки);

		ПроверитьДанныеМЧД(Оповещение, ПараметрыПроверкиМЧД, КонтекстДиагностики);
			
	КонецЦикла;
	
КонецПроцедуры

// Настраивает элементы страницы полномочий.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  
Процедура НастроитьСтраницуПолномочий(Форма) Экспорт
	
	Если Форма.Объект.ВариантЗаполненияПолномочий =
		ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияПолномочийМЧД.Текст") Тогда
		
		Форма.Элементы.ГруппаМашиночитаемыеПолномочия.Видимость = Ложь;
		Форма.Элементы.ГруппаТекстовоеПолномочие.Видимость      = Истина;
		
	Иначе
		
		Форма.Элементы.ГруппаМашиночитаемыеПолномочия.Видимость = Истина;
		Форма.Элементы.ГруппаТекстовоеПолномочие.Видимость      = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОтправитьПоЭДО

// Открывает новый исходящий электронный документ из формы просмотра доверенности.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  * Объект - ДанныеФормыСтруктура:
//  ** Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//            - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОтправитьПоЭДОИзФормыПросмотра(Форма) Экспорт
	
	Если Форма.Модифицированность Тогда
		Контекст = Новый Структура("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ОтправитьПоЭДОПослеВопросаОЗаписи", МашиночитаемыеДоверенностиКлиент,
			Контекст);
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только после записи доверенности.
			|Записать?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ОтправитьПоЭДО(Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Открывает новый исходящий электронный документ из формы просмотра после вопроса о записи модифицированной доверенности.
// 
// Параметры:
//  Ответ - КодВозвратаДиалога
//  Контекст - Структура:
//  * Форма - ФормаКлиентскогоПриложения:
//  ** Объект - ДанныеФормыСтруктура:
//  *** Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//             - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОтправитьПоЭДОПослеВопросаОЗаписи(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Форма.Записать();
	
	ОтправитьПоЭДО(Контекст.Форма.Объект.Ссылка);
	
КонецПроцедуры

// Открывает новый исходящий электронный документ.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//               - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МЧД003
Процедура ОтправитьПоЭДО(Доверенность) Экспорт
	
	ПараметрыОткрытия = ИнтерфейсДокументовЭДОКлиент.НовыеПараметрыОткрытияЭлектронногоДокумента();
	ПараметрыОткрытия.НовыйДокумент = Истина;
	ИнтерфейсДокументовЭДОКлиент.ОткрытьЭлектронныйДокументОбъектаУчета(Доверенность, ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

// Получает номер (GUID) для новой машиночитаемой доверенности и записывает в реквизит доверенности
// или поле формы, предполагается использование при открытии формы доверенности, фоновое обновление.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * НомерДоверенности - Строка - при ошибке возвращается пустая строка, выводится сообщение об ошибке
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ПолучитьНомерМЧД(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомерДоверенности", "");
	
	Результат.НомерДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьНомерМЧД().НомерДоверенности;
	Если ФормаДоверенности <> Неопределено Тогда
		ФормаДоверенности.Объект.НомерДоверенности = Результат.НомерДоверенности;
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет форму при заданной форме, выгружает машиночитаемую доверенность, предлагает выбрать/подтвердить выбор
// сертификата, подписывает, отправляет на регистрацию в распределенном реестре ФНС, ожидает регистрации 1-3 минуты,
// получает СтатусВРеестреФНС, обновляет СтатусВРеестреФНС в записи справочника доверенностей,
// в том числе запоминает идентификатор транзакции.
//
// Параметры:
//   ЗарегистрироватьВРеестреФНС - Булево
//   ФорматДоверенности - Строка - формат МЧД
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана
//                           при завершении со следующими параметрами:
//     * Результат - Структура:
//      ** ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                           и возвращается пустая строка, при успехе идентификатор запоминается
//                                           в записи справочника
//      ** СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                           "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                           статуса возвращается пустая строка и выводится сообщение об ошибке,
//                                           статус обновляется в записи справочника и на форме, если передана
//      ** ДатаВремяТранзакции     - Дата
//      ** ХешДоверенности         - Строка - хеш доверенности
//      ** НомерДоверенности       - Строка - номер, извлеченный из доверенности
//      ** ИННДоверителя           - Строка - ИНН доверителя, извлеченный из доверенности
//     * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МЧД003 -
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ПодписатьЗарегистрироватьМЧД(ЗарегистрироватьВРеестреФНС,
		ФорматДоверенности,
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР();
	
	Если ФормаДоверенности <> Неопределено И НЕ ФормаДоверенности.Записать() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	СсылкаНаДоверенностьСУчетомФормы = ?(ФормаДоверенности = Неопределено, СсылкаНаДоверенность,
		ФормаДоверенности.Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", СсылкаНаДоверенностьСУчетомФормы);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ЗарегистрироватьВРеестреФНС", ЗарегистрироватьВРеестреФНС);
	
	ДополнительныеДанные = Новый Соответствие;
	ДополнительныеДанные.Вставить("ФорматДоверенности", ФорматДоверенности);
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
		
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ЗарегистрироватьМЧДПослеПодписи", ЭтотОбъект, НаборДействий));
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	Подписать(Оповещение, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.СсылкаНаДоверенность));
	
КонецПроцедуры

// Возвращает пустой результат подписания.
// 
// Возвращаемое значение:
//  Структура:
// * ПодписьВыполнена - Булево
// * ПодписанныеДанные - ДвоичныеДанные
// 					   - Неопределено
// * Подпись - ДвоичныеДанные
// 			 - Неопределено
// * Сертификат - ДвоичныеДанные
//  			- Неопределено
// * ОписаниеОшибки - Строка
// * МенеджерКриптографии - МенеджерКриптографии
// 						  - Неопределено
// 
Функция РезультатПодписать()
	
	Результат = Новый Структура;
	Результат.Вставить("ПодписьВыполнена", Ложь);
	Результат.Вставить("ПодписанныеДанные", Неопределено);
	Результат.Вставить("Подпись", Неопределено);
	Результат.Вставить("Сертификат", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// После выполнения действий по ЭДООтзыв.
// 
// Параметры:
//  РезультатПодписания - см. НовыйРезультатПодписания
//  ДополнительныеПараметры - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  * ФормаДоверенности - ФормаКлиентскогоПриложения
//  * Результат - Структура:
//  ** ИдентификаторТранзакции - Строка
//  ** СтатусТранзакции - Строка
//  ** ДатаВремяТранзакции - Неопределено,Дата
//  ** ХешДоверенности - Строка
//  ** НомерДоверенности - Строка
//  ** ИННДоверителя - Строка
//  * ЗарегистрироватьВРеестреФНС - Булево
Процедура ПослеВыполненияДействийПоЭДООтзыв(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	СвойстваПодписаннойДоверенности = РезультатПодписания.ПодписанныеДоверенности[ДополнительныеПараметры.СсылкаНаДоверенность];
	
	Если СвойстваПодписаннойДоверенности = Неопределено Тогда
		Если РезультатПодписания.КонтекстДиагностики <> Неопределено
			И ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(РезультатПодписания.КонтекстДиагностики) Тогда
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатПодписания.КонтекстДиагностики);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Подписание завершено с ошибками.'"));	
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПодписанныеДанные = СвойстваПодписаннойДоверенности.Данные;
	СвойстваПодписи = СвойстваПодписаннойДоверенности.СвойстваПодписи;

	Результат = РезультатПодписать();
	Результат.ПодписьВыполнена = Истина;

	Если ТипЗнч(ПодписанныеДанные) = Тип("Строка") И ЭтоАдресВременногоХранилища(ПодписанныеДанные) Тогда
		Результат.ПодписанныеДанные = ПолучитьИзВременногоХранилища(ПодписанныеДанные);
	Иначе
		Результат.ПодписанныеДанные = ПодписанныеДанные;
	КонецЕсли;
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
	КонецЕсли;

	Результат.Подпись = СвойстваПодписи.Подпись;
	Результат.ОписаниеОшибки = "";
	ДополнительныеПараметры.Вставить("ОтпечатокСертификатаАбонента", СвойстваПодписи.Отпечаток);
	ОтменитьМЧДПослеПодписи(Результат, ДополнительныеПараметры);	

КонецПроцедуры

// Продолжение выполнения действия по ЭДО
//
// Параметры:
//  РезультатПодписания - см. НовыйРезультатПодписания
//  ДополнительныеПараметры - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  * ФормаДоверенности - ФормаКлиентскогоПриложения
//  * Результат - Структура:
//  ** ИдентификаторТранзакции - Строка
//  ** СтатусТранзакции - Строка
//  ** ДатаВремяТранзакции - Неопределено,Дата
//  ** ХешДоверенности - Строка
//  ** НомерДоверенности - Строка
//  ** ИННДоверителя - Строка
//  * ЗарегистрироватьВРеестреФНС - Булево
Процедура ПослеВыполненияДействийПоЭДО(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Подписание завершено с ошибками.'");
	
	СвойстваПодписаннойДоверенности = РезультатПодписания.ПодписанныеДоверенности[ДополнительныеПараметры.СсылкаНаДоверенность];
	
	Если СвойстваПодписаннойДоверенности = Неопределено Тогда
		Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(РезультатПодписания.КонтекстДиагностики) Тогда
			Ошибки = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(РезультатПодписания.КонтекстДиагностики);
			Для Каждого Ошибка Из Ошибки Цикл
				Ошибка.ВидОшибки.ВыполнятьОбработчикАвтоматически = Ложь;
			КонецЦикла;
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатПодписания.КонтекстДиагностики);
		Иначе
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ПодписанныеДанные = СвойстваПодписаннойДоверенности.Данные;
	СвойстваПодписи = СвойстваПодписаннойДоверенности.СвойстваПодписи;
	
	Результат = РезультатПодписать();
	Результат.ПодписьВыполнена = Истина;
	Если ТипЗнч(ПодписанныеДанные) = Тип("Строка") И ЭтоАдресВременногоХранилища(ПодписанныеДанные) Тогда
		Результат.ПодписанныеДанные = ПолучитьИзВременногоХранилища(ПодписанныеДанные);
	Иначе
		Результат.ПодписанныеДанные = ПодписанныеДанные;
	КонецЕсли;

	Если ТипЗнч(СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
	КонецЕсли;

	Результат.Подпись = СвойстваПодписи.Подпись;
	Результат.ОписаниеОшибки = "";
	ДополнительныеПараметры.Вставить("СвойстваПодписи", СвойстваПодписи);
	ДополнительныеПараметры.Вставить("ДатаПодписи", СвойстваПодписи.ДатаПодписи);
	ЗарегистрироватьМЧДПослеПодписи(Результат, ДополнительныеПараметры);	
	
КонецПроцедуры

// Регистрирует МЧД на сервере ФНС
// 
// Параметры:
//  Результат - см. РезультатПодписать
//  ДополнительныеПараметры - Структура
Процедура ЗарегистрироватьМЧДПослеПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.ПодписьВыполнена Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось подписать доверенность: %1'"),
			Результат.ОписаниеОшибки));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДоверенности = ДополнительныеПараметры.ФормаДоверенности;
	
	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	Ссылка = ДополнительныеПараметры.СсылкаНаДоверенность;
	
	МашиночитаемыеДоверенностиВызовСервера.ВыполнитьДействияПослеПодписания(Ссылка, Результат.ПодписанныеДанные,
		ДополнительныеПараметры.СвойстваПодписи, ТребуетсяПроверкаМЧДНаКлиенте);
		
	Если ДополнительныеПараметры.ЗарегистрироватьВРеестреФНС Тогда

		Статус = ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка");
		ДатаОтправки = Дата(1, 1, 1);
		ИдентификаторТранзакции = "";
	
		РезультатРегистрации = МашиночитаемыеДоверенностиВызовСервера.ЗарегистрироватьМЧД(Ссылка,
			Результат.ПодписанныеДанные, Результат.Подпись);

		Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда
			
			ДополнительныеПараметры.Результат.ИдентификаторТранзакции 	= РезультатРегистрации.ИдентификаторТранзакции;
			ДополнительныеПараметры.Результат.СтатусТранзакции 			= "PENDING";
			ДополнительныеПараметры.Результат.ДатаВремяТранзакции 		= Неопределено;
			ДополнительныеПараметры.Результат.ХешДоверенности 			= РезультатРегистрации.ХешДоверенности;
			ДополнительныеПараметры.Результат.НомерДоверенности 		= РезультатРегистрации.НомерДоверенности;
			ДополнительныеПараметры.Результат.ИННДоверителя 			= РезультатРегистрации.ИННДоверителя;
			
			Статус = ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено");
			ДатаОтправки = ОбщегоНазначенияКлиент.ДатаСеанса();
			ИдентификаторТранзакции = РезультатРегистрации.ИдентификаторТранзакции;
			
			МашиночитаемыеДоверенностиВызовСервера.УдалитьИзОчередиНаРегистрацию(Ссылка);
			
		Иначе			
			Если ЗначениеЗаполнено(РезультатРегистрации.ОписаниеОшибкиРегистрации) Тогда
				
				ДополнительныеПараметры.Результат.ОписаниеОшибкиРегистрации =
					РезультатРегистрации.ОписаниеОшибкиРегистрации;
					
				МашиночитаемыеДоверенностиВызовСервера.УдалитьИзОчередиНаРегистрацию(Ссылка);
			
			Иначе
				МашиночитаемыеДоверенностиВызовСервера.ДобавитьВОчередьЗапросовВРеестрМЧД(
					Ссылка, МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Регистрация);
			КонецЕсли;
	
		КонецЕсли;
		
		Если ФормаДоверенности <> Неопределено Тогда
			ФормаДоверенности.Прочитать();
			Если ЗначениеЗаполнено(Статус) Тогда
				ФормаДоверенности.Объект.ДатаОтправки = ДатаОтправки;
				ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ФормаДоверенности.Объект.ДатаОтправки;
				ФормаДоверенности.Объект.ИдентификаторТранзакции = ИдентификаторТранзакции;
				ФормаДоверенности.Объект.ОтпечатокСертификата = ДополнительныеПараметры.СвойстваПодписи.Отпечаток;
			Иначе
				ФормаДоверенности.Объект.Подписана = Ложь;
				ФормаДоверенности.Объект.Верна = Ложь;
				ФормаДоверенности.Объект.ДатаПодписания = '00010101';
			КонецЕсли;
			ФормаДоверенности.Объект.СтатусВРеестреФНС = Статус;
			ФормаДоверенности.Записать();
			ФормаДоверенности.РазблокироватьДанныеФормыДляРедактирования();
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = Результат.ПодписанныеДанные;
	ДанныеДляПроверки.ДанныеПодписи = ДополнительныеПараметры.СвойстваПодписи.Подпись;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	ПараметрыПроверкиМЧД = Новый Структура;
	ПараметрыПроверкиМЧД.Вставить("МЧД", Ссылка);
	ПараметрыПроверкиМЧД.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);
	ПараметрыПроверкиМЧД.Вставить("ДанныеДляПроверки", ДанныеДляПроверки);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗарегистрироватьМЧДПослеПодписиЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПроверитьДанныеМЧД(ОповещениеОЗавершении, ПараметрыПроверкиМЧД, КонтекстДиагностики);
		
КонецПроцедуры

// Получает частичные (открытые) данные доверенности и обновляет реквизит состояния доверенности, обновляет данные для
// панели состояния в форме, если передана форма.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * ХешДоверенности    - Строка - хеш доверенности
//      * НомерДоверенности  - Строка - номер, извлеченный из доверенности
//      * ДатаВыдачи         - Дата - дата начала действия доверенности
//      * ДатаОкончания      - Дата - дата завершения действия доверенности
//      * СтатусДоверенности - Строка - "CREATED" - дата начала действия не наступила, "ACTIVE" - действует,
//                                      "EXPIRED" - истекла, "DECLINED" - отменена (отозвана), "" - не запрашивался
//      * ПубличныйКлюч      - Строка - публичный ключ эмитента доверенности
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ОбновитьСостояниеВРеестреФНС(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	// Нереестровая МЧД
	Если ФормаДоверенности.Объект.СтатусВРеестреФНС =
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка") Тогда
		Возврат
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ПубличныйКлюч", 		"");
	
	Если ФормаДоверенности <> Неопределено И НЕ ФормаДоверенности.Записать() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СостояниеИзменено = Ложь;
	ТокенДоступа = "";
	СтраницаНеНайдена = Ложь;
	Если ФормаДоверенности.Объект.СтатусВРеестреФНС =
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено") Тогда
		
		СведенияСтатусаТранзакции = МашиночитаемыеДоверенностиВызовСервера.ПолучитьСтатусТранзакцииМЧД(
			ФормаДоверенности.Объект.ИдентификаторТранзакции,
			ТокенДоступа,
			ФормаДоверенности.Объект.НомерДоверенности);
		
		Если СведенияСтатусаТранзакции.СтатусТранзакции = "SUCCESS" Тогда
			ФормаДоверенности.Объект.СтатусВРеестреФНС =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано");
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
			ФормаДоверенности.Объект.ИдентификаторТранзакции = "";
			СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = "FAILURE"
			ИЛИ СведенияСтатусаТранзакции.СтатусТранзакции = "ERROR" Тогда
				ФормаДоверенности.Объект.СтатусВРеестреФНС =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации");
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
			ФормаДоверенности.Объект.ИдентификаторТранзакции = "";
			СостояниеИзменено = Истина;
			Результат.СтатусДоверенности = НСтр("ru ='Ошибка регистрации'");
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = 404 Тогда
			СтраницаНеНайдена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если (ФормаДоверенности.Объект.СтатусВРеестреФНС <>
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено")
		И ФормаДоверенности.Объект.СтатусВРеестреФНС <>
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации"))
		ИЛИ СтраницаНеНайдена Тогда
		
		СведенияСтатусаДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
			ФормаДоверенности.Объект.НомерДоверенности,
			ТокенДоступа);
		Результат.ХешДоверенности = СведенияСтатусаДоверенности.ХешДоверенности;
		Результат.НомерДоверенности = СведенияСтатусаДоверенности.НомерДоверенности;
		Результат.ДатаВыдачи = СведенияСтатусаДоверенности.ДатаВыдачи;
		Результат.ДатаОкончания = СведенияСтатусаДоверенности.ДатаОкончания;
		Результат.СтатусДоверенности = СведенияСтатусаДоверенности.СтатусДоверенности;
		Результат.ПубличныйКлюч = СведенияСтатусаДоверенности.ПубличныйКлюч;
		
		Если СведенияСтатусаДоверенности.СтатусДоверенности = "CREATED"
			И ФормаДоверенности.Объект.СтатусВРеестреФНС <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила") Тогда
			
			ФормаДоверенности.Объект.СтатусВРеестреФНС =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила");
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
			СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "ACTIVE"
			И ФормаДоверенности.Объект.СтатусВРеестреФНС <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано")
			И ФормаДоверенности.Объект.СтатусВРеестреФНС <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв")
			И ФормаДоверенности.Объект.СтатусВРеестреФНС <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва") Тогда
			
			ФормаДоверенности.Объект.СтатусВРеестреФНС =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано");
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
			СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "EXPIRED"
			И ФормаДоверенности.Объект.СтатусВРеестреФНС <>
			ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия") Тогда
			
			ФормаДоверенности.Объект.СтатусВРеестреФНС =
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия");
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
			СостояниеИзменено = Истина;
			
		ИначеЕсли СведенияСтатусаДоверенности.СтатусДоверенности = "DECLINED"
			Или СведенияСтатусаДоверенности.СтатусДоверенности = "REVOKED" Тогда
			ДоверительИНН = ?(ЗначениеЗаполнено(ФормаДоверенности.Объект.ДоверительЮЛ_ИНН), 
				ФормаДоверенности.Объект.ДоверительЮЛ_ИНН, ФормаДоверенности.Объект.ДоверительФЛ_ИНН);
			ДатаОтзыва = МашиночитаемыеДоверенностиВызовСервера.ДатаОтзываДоверенности(
				ФормаДоверенности.Объект.НомерДоверенности, ДоверительИНН, ТокенДоступа);
			Если Не ЗначениеЗаполнено(ДатаОтзыва)
				И Не ЗначениеЗаполнено(ФормаДоверенности.Объект.ДатаОтзыва) Тогда
				ДатаОтзыва = ОбщегоНазначенияКлиент.ДатаСеанса();
			КонецЕсли;
			Если ФормаДоверенности.Объект.СтатусВРеестреФНС <>
				ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано")
				Или ФормаДоверенности.Объект.ДатаОтзыва <> ДатаОтзыва Тогда
				ФормаДоверенности.Объект.СтатусВРеестреФНС =
					ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано");
				ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
				ФормаДоверенности.Объект.ДатаОтзыва = ДатаОтзыва;
				ФормаДоверенности.Объект.Отозвана = Истина;
				СостояниеИзменено = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаДоверенности <> Неопределено И СостояниеИзменено И НЕ ФормаДоверенности.Записать() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает номер и ИНН доверенности, если не переданы, и отправляет запрос на получение полных данных
// машиночитаемой доверенности, при успехе создает и заполняет полученными данными запись справочника машиночитаемых
// доверенностей, ожидает обработки запроса до 1-3 минуты.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - задана при успехе
//      * СтатусПолучения      - "PENDING" - операция выполняется, идет запрос данных с узла ФНС, повторить попытку
//                               позже, возвращается, если за 3 минуты не удалось получить данные доверенности,
//                               при ошибке получения статуса возвращается пустая строка и выводится сообщение
//                               об ошибке
//   ФормаВладелец         - ФормаКлиентскогоПриложения
//   ОбновлятьСуществующий - Булево - Истина, если необходимо обновить существующий в базе элемент
//   ЭтоМЧДОрганизации - Булево
//
Процедура ПолучитьДанныеМЧД(ОповещениеОЗавершении,
	ФормаВладелец = Неопределено,
	ОбновлятьСуществующий = Неопределено,
	ЭтоМЧДОрганизации = Ложь) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("СсылкаНаДоверенность", Неопределено);
	Результат.Вставить("СтатусПолучения", "");
	Результат.Вставить("ОткрытьФормуДляОбновления", Ложь);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ОбновлятьСуществующий", ОбновлятьСуществующий);
	ДополнительныеПараметры.Вставить("МЧД", Неопределено);
	ДополнительныеПараметры.Вставить("ЭтоМЧДОрганизации", ЭтоМЧДОрганизации);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьДанныеМЧДПослеВводаРеквизитов", ЭтотОбъект,
		ДополнительныеПараметры);
	ОткрытьФорму("Справочник.МЧД003.Форма.ЗагрузкаИзРеестраФНС", , , , , ,
		ОписаниеОповещения);
		
КонецПроцедуры

// Получает из РР данные МЧД.
// 
// Параметры:
//  СтруктураДанных - Структура, Неопределено, КодВозвратаДиалога
//  ДополнительныеПараметры - Структура
Процедура ПолучитьДанныеМЧДПослеВводаРеквизитов(
		СтруктураДанных,
		ДополнительныеПараметры) Экспорт
	
	Если СтруктураДанных = Неопределено Или СтруктураДанных = КодВозвратаДиалога.Отмена Тогда
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеДоверенности = МашиночитаемыеДоверенностиВызовСервера.ПолучитьСведенияДоверенностиНаСервереМЧД(
		СтруктураДанных.НомерДоверенности,
		СтруктураДанных.ИННДоверителя);
		
	Если ДанныеДоверенности.Ошибка Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеДоверенности.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		Возврат;
			
	КонецЕсли;
	
	ПолныеДанные = ДанныеДоверенности.ПолныеДанные;
	
	ДополнительныеПараметры.Результат.СтатусПолучения = ПолныеДанные.СтатусПолучения;
	
	Если ПолныеДанные.СтатусПолучения = "PENDING" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьДанныеМЧДПослеПоказаПредупреждения",
			ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(ОписаниеОповещения,
			НСтр("ru = 'Запрос данных доверенности отправлен успешно, повторите попытку загрузки через несколько минут'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолныеДанные.ДанныеВыгрузки) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбновлятьСуществующий <> Неопределено Тогда
		ОбновлятьСуществующий = ДополнительныеПараметры.ОбновлятьСуществующий;
	Иначе
		ОбновлятьСуществующий = Истина;
	КонецЕсли;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ПолныеДанные.ДанныеВыгрузки;
	ДанныеДляЗагрузки.ДанныеПодписи = ПолныеДанные.ДанныеПодписи;
	ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
	ДанныеДляЗагрузки.ДанныеПодписей.Добавить(ПолныеДанные.ДанныеПодписи);
	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	
	СтатусМЧД = ДанныеДоверенности.ЧастичныеДанные.СтатусДоверенности;
	
	СтатусВРеестреФНС = МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(СтатусМЧД);
	
	ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	ДополнительныеСведения.СтатусВРеестреФНС = СтатусВРеестреФНС;
	Если ДополнительныеПараметры.Свойство("ЭтоМЧДОрганизации") Тогда
		ДополнительныеСведения.ЭтоМЧДОрганизации = ДополнительныеПараметры.ЭтоМЧДОрганизации;
	КонецЕсли;
		
	РезультатЗагрузки =
		МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧД(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, 
			ОбновлятьСуществующий, ДополнительныеСведения);
	
	Если Не ЗначениеЗаполнено(РезультатЗагрузки.МЧД) Тогда
		ТекстОшибки = ?(ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки), РезультатЗагрузки.ТекстОшибки,
			НСтр("ru = 'Не удалось загрузить полученные данные доверенности.'"));
		ДополнительныеПараметры.Результат.Вставить("ТекстОшибки", ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Результат.СсылкаНаДоверенность = РезультатЗагрузки.МЧД;
	Если РезультатЗагрузки.Свойство("ОткрытьФормуДляОбновления") Тогда
		ДополнительныеПараметры.Результат.ОткрытьФормуДляОбновления = РезультатЗагрузки.ОткрытьФормуДляОбновления;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	РезультатПроверкиНаСервере = Неопределено;
	Если РезультатЗагрузки.Свойство("РезультатПроверкиНаСервере", РезультатПроверкиНаСервере) Тогда
		РезультатПроверкиНаСервере.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	КонецЕсли;
	ДополнительныеПараметры.МЧД = РезультатЗагрузки.МЧД;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДанныеМЧДПослеВводаРеквизитовЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПроверитьДанныеМЧД(ОповещениеОЗавершении, РезультатЗагрузки, КонтекстДиагностики, РезультатПроверкиНаСервере);
	
КонецПроцедуры

// Завершение получения данных МЧД и подписи после ввода реквизитов на форме
//
// Параметры:
//  РезультатПроверки - см. МашиночитаемыеДоверенности.РезультатПроверкиДоверенности
//  ДополнительныеПараметры - Структура
//
Процедура ПолучитьДанныеМЧДПослеВводаРеквизитовЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт

	МЧД = ДополнительныеПараметры.МЧД;

	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		КонтекстДиагностики = РезультатПроверки.КонтекстДиагностики;
		ОбработатьРезультатПроверкиМЧД(РезультатПроверки);
		МашиночитаемыеДоверенностиВызовСервера.ОтразитьРезультатПроверкиМЧД(МЧД, РезультатПроверки.Результат, 
			РезультатПроверки.ТекстОшибки);
	Иначе
		КонтекстДиагностики = Неопределено;
	КонецЕсли;
	
	МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьРодительскиеДоверенности(МЧД);

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат); 
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	
КонецПроцедуры 

// Завершение процедуры регистрации МЧД после подписи 
//
// Параметры:
//  РезультатПроверки - см. МашиночитаемыеДоверенности.РезультатПроверкиДоверенности
//  ДополнительныеПараметры - Структура:
//   * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//         - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
Процедура ЗарегистрироватьМЧДПослеПодписиЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт

	МЧД = ДополнительныеПараметры.СсылкаНаДоверенность;
	
	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		КонтекстДиагностики = РезультатПроверки.КонтекстДиагностики;
		ОбработатьРезультатПроверкиМЧД(РезультатПроверки);
		МашиночитаемыеДоверенностиВызовСервера.ОтразитьРезультатПроверкиМЧД(МЧД, РезультатПроверки.Результат, 
			РезультатПроверки.ТекстОшибки, ДополнительныеПараметры.Результат.ОписаниеОшибкиРегистрации);
	Иначе
		КонтекстДиагностики = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат); 
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	
КонецПроцедуры

Процедура ПолучитьДанныеМЧДПослеПоказаПредупреждения(
		ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	
КонецПроцедуры

// Запрашивает текст причины отмены (отзыва), выгружает заявление на отмену машиночитаемой доверенности, предлагает
// выбрать/подтвердить выбор сертификата, подписывает и отправляет заявление на регистрацию в распределенном реестре
// ФНС, ожидает 1-3 минуты, получает статус транзакции заявления, обновляет статус в записи справочника доверенностей,
// в том числе запоминает идентификатор транзакции.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура:
//      * ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                           и возвращается пустая строка
//      * СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                           "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                           статуса возвращается пустая строка и выводится сообщение об ошибке
//      * ДатаВремяТранзакции     - Дата
//   СсылкаНаДоверенность  - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   ФормаДоверенности     - ФормаКлиентскогоПриложения
//
Процедура ОтменитьМЧД(
		ОповещениеОЗавершении = Неопределено,
		СсылкаНаДоверенность = Неопределено,
		ФормаДоверенности = Неопределено) Экспорт
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР();
	
	Если ФормаДоверенности <> Неопределено И НЕ ФормаДоверенности.Записать() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось сохранить доверенность'"));
		Если ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	СсылкаНаДоверенностьСУчетомФормы = ?(ФормаДоверенности = Неопределено, СсылкаНаДоверенность,
		ФормаДоверенности.Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СсылкаНаДоверенность", 	СсылкаНаДоверенностьСУчетомФормы);
	ДополнительныеПараметры.Вставить("ФормаДоверенности", 		ФормаДоверенности);
	ДополнительныеПараметры.Вставить("Результат", 				Результат);

	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Подписать"));
		
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ОтменитьМЧДПослеПодписи", ЭтотОбъект, НаборДействий));
		
	НомерДоверенности = "";
	Если ФормаДоверенности = Неопределено Тогда
		Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДоверенность);
		НомераДоверенностей = МашиночитаемыеДоверенностиВызовСервера.ПолучитьНомераДоверенностей(Доверенности);
		НомерДоверенности = НомераДоверенностей[СсылкаНаДоверенность];
	Иначе
		НомерДоверенности = ФормаДоверенности.Объект.НомерДоверенности;
	КонецЕсли;
	РезультатВыгрузки = МашиночитаемыеДоверенностиВызовСервера.ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, "Отзыв");
	ДополнительныеПараметры.Вставить("РезультатВыгрузки", РезультатВыгрузки);
	ДанныеXMLВыгрузки = ПолучитьДвоичныеДанныеИзСтроки(ДополнительныеПараметры.РезультатВыгрузки.Содержимое, "windows-1251");
	ДополнительныеПараметры.Вставить("ДанныеXMLВыгрузки", ДанныеXMLВыгрузки);

	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДООтзыв", ЭтотОбъект, ДополнительныеПараметры);
	
	Подписать(Оповещение, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.СсылкаНаДоверенность));
	
КонецПроцедуры

Процедура ОтменитьМЧДПослеПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.ПодписьВыполнена Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Не удалось подписать заявление на отмену доверенности: %1'"),
			Результат.ОписаниеОшибки));
		Если ДополнительныеПараметры.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФормаДоверенности = ДополнительныеПараметры.ФормаДоверенности;
	
	ИмяФайлаЗаявленияНаОтзыв = "revoke.xml";
	РезультатРегистрации = МашиночитаемыеДоверенностиВызовСервера.ОтменитьМЧД(
		ИмяФайлаЗаявленияНаОтзыв,
		Результат.ПодписанныеДанные,
		Результат.Подпись, 
		Результат.Сертификат, ,
		?(ФормаДоверенности = Неопределено, "", ФормаДоверенности.Объект.НомерДоверенности),
		ДополнительныеПараметры.СсылкаНаДоверенность);
	
	СтатусТранзакции = ?(ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции), "PENDING", "");
	
	ДополнительныеПараметры.Результат.ИдентификаторТранзакции 	= РезультатРегистрации.ИдентификаторТранзакции;
	ДополнительныеПараметры.Результат.СтатусТранзакции 			= СтатусТранзакции;
	ДополнительныеПараметры.Результат.ДатаВремяТранзакции 		= Неопределено;
	
	Если ФормаДоверенности <> Неопределено Тогда
		
		ФормаДоверенности.Прочитать();
		ФормаДоверенности.Объект.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаЗаявленияНаОтзыв;
		ФормаДоверенности.Объект.СтатусВРеестреФНС = ПредопределенноеЗначение(
			"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв");
			
		Если Не ЗначениеЗаполнено(ФормаДоверенности.Объект.ДатаОтправкиЗаявленияНаОтзыв) Тогда
			ФормаДоверенности.Объект.ДатаОтправкиЗаявленияНаОтзыв = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда
			
			ФормаДоверенности.Объект.ДатаОбновленияСтатуса = ОбщегоНазначенияКлиент.ДатаСеанса();
			ФормаДоверенности.Объект.ИдентификаторТранзакции = РезультатРегистрации.ИдентификаторТранзакции;
			
			ЭтоМЧД003 = ТипЗнч(ДополнительныеПараметры.СсылкаНаДоверенность) = Тип("СправочникСсылка.МЧД003");
			Если Не ЭтоМЧД003 Тогда
				ФормаДоверенности.Объект.ОтпечатокСертификата = ДополнительныеПараметры.ОтпечатокСертификатаАбонента;
			КонецЕсли;
		
		ИначеЕсли Не МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьУжеИстекла(
			РезультатРегистрации.ОписаниеОшибкиРегистрации) Тогда
			
			ФормаДоверенности.Объект.ОписаниеОшибкиРегистрации = РезультатРегистрации.ОписаниеОшибкиРегистрации;
			
			МашиночитаемыеДоверенностиВызовСервера.ДобавитьВОчередьЗапросовВРеестрМЧД(
				ДополнительныеПараметры.СсылкаНаДоверенность, 
					МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Отзыв);
				
		КонецЕсли;
		
		ФормаДоверенности.Записать();
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.Результат);
	
КонецПроцедуры

// Завершение загрузки в элемент справочника данных из архива с файлом МЧД и подписью.
//
// Параметры:
//  РезультатПроверки - см. МашиночитаемыеДоверенности.РезультатПроверкиДоверенности
//  ДополнительныеПараметры - Структура:
//   * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//         - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
Процедура ЗагрузитьПерезаполнитьМЧДИзФайлаЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт

	МЧД = ДополнительныеПараметры.МЧД;

	Если ЗначениеЗаполнено(РезультатПроверки) Тогда
		КонтекстДиагностики = РезультатПроверки.КонтекстДиагностики;
		ОбработатьРезультатПроверкиМЧД(РезультатПроверки);
		МашиночитаемыеДоверенностиВызовСервера.ОтразитьРезультатПроверкиМЧД(МЧД, РезультатПроверки.Результат, 
			РезультатПроверки.ТекстОшибки);
	Иначе
		КонтекстДиагностики = Неопределено;
	КонецЕсли;
	
	ОповеститьОбИзменении(МЧД);
	ПоказатьЗначение(Неопределено, МЧД);
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	
КонецПроцедуры

// Обработка результата проверки МЧД.
//
// Параметры:
//  РезультатПроверки - см. МашиночитаемыеДоверенности.РезультатПроверкиДоверенности
//
Процедура ОбработатьРезультатПроверкиМЧД(РезультатПроверки)
	
	Если Не РезультатПроверки.Результат Тогда
		ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
		ВидОшибки.Идентификатор = "МашиночитаемыеДоверенности_ПроверкаДоверенности";
		ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Доверенность недействительна.'");

		ТекстОшибки = РезультатПроверки.ТекстОшибки;

		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Проверка доверенности'"),
			ВидОшибки, ТекстОшибки, ТекстОшибки);
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(РезультатПроверки.КонтекстДиагностики, Ошибка, Подсистема);
	КонецЕсли;
		
КонецПроцедуры

#Область ПроверкаДоверенности

// Обрабатывает результат ручной проверки полномочий МЧД.
// 
// Параметры:
//  Результаты - Неопределено 
//  		  - Массив из Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - Строка
//  * ПолномочияПодтверждены - Булево
//  Ошибки - Соответствие из КлючИЗначение:
//	* Ключ - см. ОбработкаНеисправностейБЭДКлиентСервер.НоваяОшибка
//	* Значение - Массив из Структура:
//	  ** ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//	  ** ХешПодписи - Строка
//
Процедура ОбработатьРезультатПроверкиПолномочий(Результаты, Ошибки) Экспорт
	
	Если НЕ (ТипЗнч(Результаты) = Тип("Массив") И Результаты.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	ИсправленныеОшибки = Новый Массив();
	ВыполненныеПроверки = Новый Массив();
	
	Для Каждого Результат Из Результаты Цикл
		
		ПолномочияПодтверждены = Результат.ПолномочияПодтверждены;
		
		ПроверкаПолномочий = МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки();
		ПроверкаПолномочий.Выполнено = Истина;
		ПроверкаПолномочий.Успех = ПолномочияПодтверждены;
		ПроверкаПолномочий.РучнаяПроверка = Истина;
		Если НЕ ПолномочияПодтверждены Тогда
			ПроверкаПолномочий.Ошибка =
				МашиночитаемыеДоверенностиКлиентСервер.ТекстНеобходимостиРучнойПроверкиПолномочий();
		КонецЕсли;
		
		ДанныеПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеПроверкиПолномочий();
		ДанныеПроверки.ПодписанныйОбъект = Результат.ПодписанныйОбъект;
		ДанныеПроверки.ХешПодписи = Результат.ХешПодписи;
		ДанныеПроверки.РезультатПроверки = ПроверкаПолномочий;
		ДанныеПроверки.РучнаяПроверка = Истина;
		
		ВыполненныеПроверки.Добавить(ДанныеПроверки);
		
		Если НЕ ПолномочияПодтверждены Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			СвойстваПодписей = Ошибка.Значение;
			Индекс = СвойстваПодписей.Количество() - 1;
			
			Пока СвойстваПодписей.Количество() > 0 И Индекс >= 0 Цикл
				
				Если СвойстваПодписей[Индекс].ПодписанныйОбъект = Результат.ПодписанныйОбъект
					И СвойстваПодписей[Индекс].ХешПодписи = Результат.ХешПодписи Тогда
						
					СвойстваПодписей.Удалить(Индекс);
					
					Если СвойстваПодписей.Количество() = 0 Тогда
						ИсправленныеОшибки.Добавить(Ошибка.Ключ);
					КонецЕсли;
					
				КонецЕсли;
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВыполненныеПроверки.Количество() > 0 Тогда
		
		Результат = МашиночитаемыеДоверенностиВызовСервера.ЗаписатьРезультатПроверкиПолномочий(ВыполненныеПроверки);
		
		Если Результат.Успех Тогда
			
			Если ИсправленныеОшибки.Количество() > 0 Тогда
				ОбработкаНеисправностейБЭДКлиент.ОповеститьОбИсправленииОшибок(ИсправленныеОшибки);
				Оповестить(ИмяСобытияИсправлениеОшибкиПроверкиПолномочий(), ИсправленныеОшибки);
			КонецЕсли
			
		ИначеЕсли НЕ ПустаяСтрока(Результат.ТекстОшибки) Тогда
			
			ТекстОшибки = НСтр("ru = 'Ошибка при записи результатов проверки полномочий:'");
			ТекстОшибки = ТекстОшибки + Результат.ТекстОшибки;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму проверки полномочий доверенностей
// 
// Параметры:
//  ПараметрыПроверки - Массив из см. МашиночитаемыеДоверенностиКлиентСервер.НовыеПараметрыПроверкиПолномочий
//  ОповещениеОЗавершении - ОписаниеОповещения
//    						
Процедура ПроверитьПолномочияДоверенностейВручную(ПараметрыПроверки, ОповещениеОЗавершении)
	
	ОткрытьФорму("Обработка.РезультатыПроверкиПодписи.Форма.ПроверкаПолномочийДоверенностей",
		ПараметрыПроверки,,,,, ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Открывает форму проверки полномочий доверенности
// 
// Параметры:
//  ПараметрыПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеПараметрыПроверкиПолномочий
//  ОповещениеОЗавершении - ОписаниеОповещения
//    						
Процедура ПроверитьПолномочияДоверенностиВручную(ПараметрыПроверки, ОповещениеОЗавершении) Экспорт
	
	ОткрытьФорму("Обработка.РезультатыПроверкиПодписи.Форма.ПроверкаПолномочийДоверенности",
		ПараметрыПроверки,,,,, ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Продолжение процедуры ПроверитьДоверенность.
// 
// Параметры:
//  Результат - см. КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи
//  Контекст - см. КонтекстПроверкиДоверенности
Процедура ПослеПроверкиПодписи(Результат, Контекст) Экспорт
	
	Результат = МашиночитаемыеДоверенностиВызовСервера.РезультатПроверкиДоверенности(Контекст.ДанныеДоверенности,
		Результат, Контекст.КонтекстДиагностики);
		
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Возвращает контекст проверки доверенности.
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДоверенности - ДвоичныеДанные
//                      - Неопределено
// * Оповещение - ОписаниеОповещения
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция КонтекстПроверкиДоверенности()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДанныеДоверенности", Неопределено);
	Контекст.Вставить("Оповещение", Новый ОписаниеОповещения());
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	
	Возврат Контекст;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВводаТекстовогоОписанияПолномочия

Функция ПроверитьТекстНаСоответствиеПравиламОбработки(Текст) Экспорт
	
	КоличествоСимволов = СтрДлина(Текст);

	КоличествоПереносовСтроки = СтрЧислоВхождений(Текст, Символы.ПС) * 2;
	ВсегоСимволов = КоличествоСимволов + КоличествоПереносовСтроки;

	Если ВсегоСимволов >= 1000 Тогда

		РазницаСимволов = ВсегоСимволов - 1000;
		
		ИтоговыйТекст = Лев(Текст, 1000 - РазницаСимволов);
		Текст = ИтоговыйТекст;
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция КомментарийОшибкиПроверкиТекстаНаСоответствиеПравиламОбработки() Экспорт

	Возврат НСтр("ru = 'В одной строке полномочий для корректной регистрации МЧД может быть не более одной тысячи символов. 
		|Проверьте и при необходимости добавьте новую строку и продолжите ввод.'");

КонецФункции

#КонецОбласти

#Область Подписание

// Возвращаемое значение:
//  Структура:
//  * ПодписанныеДоверенности - см. НовыеПодписанныеДоверенности
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатПодписания()
	Результат = Новый Структура;
	Результат.Вставить("ПодписанныеДоверенности", НовыеПодписанныеДоверенности());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  * Значение - см. НовыеСвойстваПодписаннойДоверенности
Функция НовыеПодписанныеДоверенности()
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Данные - Неопределено,ДвоичныеДанные
//  * СвойстваПодписи - см. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
Функция НовыеСвойстваПодписаннойДоверенности()
	Свойства = Новый Структура;
	Свойства.Вставить("Данные", Неопределено);
	Свойства.Вставить("СвойстваПодписи", Новый Структура);
	Возврат Свойства;
КонецФункции

// Возвращаемое значение:
//  Структура -  Новый контекст подписания:
//  * ОповещениеОЗавершении - см. Подписать.ОповещениеОЗавершении
//  * Доверенности - см. Подписать.Доверенности
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ДанныеДляПодписания - см. МашиночитаемыеДоверенностиВызовСервера.ДанныеДляПодписания
//  * ИндексНабораДанных - Число
//  * ПодписанныеДоверенности - см. НовыеПодписанныеДоверенности
Функция НовыйКонтекстПодписания()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("Доверенности", Новый Массив);
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("ДанныеДляПодписания", Новый Массив);
	Контекст.Вставить("ИндексНабораДанных", 0);
	Контекст.Вставить("ПодписанныеДоверенности", НовыеПодписанныеДоверенности());
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: см. НовыйРезультатПодписания
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
Процедура Подписать(ОповещениеОЗавершении, Доверенности)
	
	КонтекстПодписания = НовыйКонтекстПодписания();
	КонтекстПодписания.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстПодписания.Доверенности = Доверенности;
	
	ПодписатьПослеПодготовкиКонтекста(КонтекстПодписания);
	
КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ПодписатьПослеПодготовкиКонтекста(КонтекстПодписания)
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеПолученияОтпечатков",
		МашиночитаемыеДоверенностиКлиент, КонтекстПодписания);
	
	КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	
КонецПроцедуры

// Параметры:
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ПодписатьПослеПолученияОтпечатков(ОтпечаткиСертификатов, КонтекстПодписания) Экспорт
	
	ДанныеДляПодписания = МашиночитаемыеДоверенностиВызовСервера.ДанныеДляПодписания(КонтекстПодписания.Доверенности,
		ОтпечаткиСертификатов, КонтекстПодписания.КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ДанныеДляПодписания) Тогда
		ЗавершитьПодписание(КонтекстПодписания);
		Возврат;
	КонецЕсли;
	
	КонтекстПодписания.ДанныеДляПодписания = ДанныеДляПодписания;
	
	ПодписатьПослеПолученияДанных(КонтекстПодписания);
	
КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ПодписатьПослеПолученияДанных(КонтекстПодписания)
	
	ДанныеДляПодписания = КонтекстПодписания.ДанныеДляПодписания;
	
	ОписаниеНабораДанных = ДанныеДляПодписания[0]; // См. ЭлектронныеДокументыЭДО.ОписаниеНабораДанныхДляИнтерактивногоПодписания
	
	Сертификаты = ОписаниеНабораДанных.Сертификаты;
	ПаролиСертификатов = ОписаниеНабораДанных.ПаролиСертификатов;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",      НСтр("ru = 'Машиночитаемая доверенность'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении",  Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий",  Ложь);
	ОписаниеДанных.Вставить("КонтекстОперации",     Неопределено);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	ОписаниеДанных.Вставить("БезПодтверждения",     Истина);
	ОписаниеДанных.Вставить("ОтборСертификатов",    Сертификаты);
	ОписаниеДанных.Вставить("НаборДанных",          ОписаниеНабораДанных.НаборДанных);
	
	Для Каждого Сертификат Из Сертификаты Цикл
		ПарольСертификата = ПаролиСертификатов[Сертификат];
		Если ЗначениеЗаполнено(ПарольСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, ПарольСертификата);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДанных = ОписаниеНабораДанных.НаборДанных.Количество();
	Если КоличествоДанных = 1 Тогда
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание машиночитаемой доверенности'"));
	Иначе
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание машиночитаемых доверенностей'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			СтрШаблон(НСтр("ru = 'Машиночитаемые доверенности (%1)'"), КоличествоДанных));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПодписания",
		МашиночитаемыеДоверенностиКлиент, КонтекстПодписания);
	
	ТипПредметаПодписания = НастройкиЭДОКлиентСервер.ТипПредметаПодписанияМЧД();
	ТипПодписи = НастройкиЭДОКлиентПовтИсп.ТипПодписи(ТипПредметаПодписания);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, КонтекстПодписания.КонтекстДиагностики, , Оповещение,
		КонтекстПодписания.ПаролиСертификатов, ТипПодписи);
	
КонецПроцедуры

// Параметры:
//  РезультатПодписания     - Неопределено,
//  						- Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** Данные - ДвоичныеДанные
//    ** Представление - Структура:
//       *** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//       *** Представление - Строка
//    ** Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//    ** СвойстваПодписи    - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ТекущийЭлементНабораДанных - Структура
//  * ПользовательНажалКнопкуПодписать - Булево
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ОбработатьРезультатПодписания(РезультатПодписания, КонтекстПодписания) Экспорт
	
	Если РезультатПодписания = Неопределено
		Или РезультатПодписания.Отказ Тогда
		ОбработатьСледующийНаборДанных(КонтекстПодписания);
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеНабора Из РезультатПодписания.НаборДанных Цикл
		Если Не ДанныеНабора.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		СвойстваДоверенности = НовыеСвойстваПодписаннойДоверенности();
		СвойстваДоверенности.Данные = ДанныеНабора.Данные;
		СвойстваДоверенности.СвойстваПодписи = ДанныеНабора.СвойстваПодписи;
		КонтекстПодписания.ПодписанныеДоверенности.Вставить(ДанныеНабора.Доверенность, СвойстваДоверенности);
	КонецЦикла;
	
	ОбработатьСледующийНаборДанных(КонтекстПодписания);
	
КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ОбработатьСледующийНаборДанных(КонтекстПодписания) 
	
	Если КонтекстПодписания.ИндексНабораДанных < КонтекстПодписания.ДанныеДляПодписания.Количество() - 1 Тогда
		КонтекстПодписания.ИндексНабораДанных = КонтекстПодписания.ИндексНабораДанных + 1;
		ПодписатьПослеПолученияДанных(КонтекстПодписания);
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодписание(КонтекстПодписания);
	
КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ЗавершитьПодписание(КонтекстПодписания)
	
	РезультатПодписания = НовыйРезультатПодписания();
	РезультатПодписания.ПодписанныеДоверенности = КонтекстПодписания.ПодписанныеДоверенности;
	РезультатПодписания.КонтекстДиагностики = КонтекстПодписания.КонтекстДиагностики;
	
	// См. Подписать.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстПодписания.ОповещениеОЗавершении, РезультатПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормой

#Область РаботаСПолямиПериодаДоверенности

// Проверяет поля периода действия доверенности, в случае некорректного заполнения выдает сообщение пользователю 
// и список полей не прошедших проверку
// 
// Параметры:
//  СведенияДоверенности - ДанныеФормыЭлементКоллекции:
//  						* ДатаВыдДовер - Дата
//  						* СрокДейст - Дата
// 
// Возвращаемое значение:
//  Массив из Строка - поля содержащие ошибки
Функция ПроверитьПоляПериодаДействия(СведенияДоверенности) Экспорт
	Результат = Новый Массив; // Массив из Строка
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ЗначениеЗаполнено(СведенияДоверенности.СрокДейст)
		И СведенияДоверенности.ДатаВыдДовер > КонецДня(СведенияДоверенности.СрокДейст) Тогда
		ТекстСообщения = НСтр("ru = 'Дата выдачи доверенности больше даты окончания. Введите корректную дату'"); 
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Результат.Добавить("ДатаВыдДовер");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияДоверенности.СрокДейст)
		И КонецДня(СведенияДоверенности.СрокДейст) < ДатаСеанса Тогда
		ТекстСообщения = НСтр("ru = 'Дата окончания срока доверенности меньше текущей. Введите корректную дату'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Результат.Добавить("СрокДейст");
	КонецЕсли;
	
	СрокДействияМенееДопустимого = ЗначениеЗаполнено(СведенияДоверенности.ДатаВыдДовер)
		И ЗначениеЗаполнено(СведенияДоверенности.СрокДейст)
		И КонецДня(СведенияДоверенности.СрокДейст) > ДатаСеанса
		И НачалоДня(СведенияДоверенности.СрокДейст) - ДатаСеанса < 24*60*60;

	Если СрокДействияМенееДопустимого Тогда
		ТекстСообщения = НСтр("ru = 'Срок действия доверенности должен быть не менее двух дней с момента регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Результат.Добавить("СрокДейст");
	КонецЕсли;
	
	Результат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	Возврат Результат;
КонецФункции

// Параметры:
//  СведенияДоверенности - ДанныеФормыЭлементКоллекции - элемент описывающий данные доверенности на форме
//  ПоляПериодаДействия - см. ПроверитьПоляПериодаДействия
Процедура ОчиститьПоляПериодаДействия(СведенияДоверенности, ПоляПериодаДействия) Экспорт
	
	Для Каждого ПолеДатыДляСброса Из ПоляПериодаДействия Цикл
		СведенияДоверенности[ПолеДатыДляСброса] = '00010101';
	КонецЦикла;

КонецПроцедуры

// Новое описание элементов полей периода доверенности.
// 
// Возвращаемое значение:
//  Структура - Новое описание элементов полей периода доверенности:
// * ДатаВыдДовер - ПолеФормы
//                - Неопределено
// * СрокДейст - ПолеФормы
//             - Неопределено
Функция НовоеОписаниеЭлементовПолейПериодаДоверенности() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаВыдДовер", Неопределено);
	Результат.Вставить("СрокДейст", Неопределено);
	
	Возврат Результат;
КонецФункции

// Элементы периода по списку полей.
// 
// Параметры:
//  ОписаниеЭлементовПолейПериода см.НовоеОписаниеЭлементовПолейПериодаДоверенности
//  СписокПолей - Массив из Строка
// 
// Возвращаемое значение:
//  Массив из ПолеФормы
Функция ЭлементыПериодаПоСпискуПолей(ОписаниеЭлементовПолейПериода, СписокПолей) Экспорт
	Результат = Новый Массив;
	
	Для Каждого НаименованиеПоля Из СписокПолей Цикл
		Если ОписаниеЭлементовПолейПериода.Свойство(НаименованиеПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ОписаниеЭлементовПолейПериода[НаименованиеПоля]);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

// Параметры:
//  ЭлементыФормы - Массив из ПолеФормы
Процедура УстановитьОформлениеПолей(ЭлементыФормы) Экспорт
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		УстановитьОтметкуНезаполненного(ЭлементФормы, Истина);
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  ЭлементыФормы - Массив из ПолеФормы
Процедура СброситьОформлениеПолей(ЭлементыФормы) Экспорт
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		УстановитьОтметкуНезаполненного(ЭлементФормы, Ложь);
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  ЭлементФормы - Массив из ПолеФормы
//  ОтметкаНезаполненного - Булево
Процедура УстановитьОтметкуНезаполненного(ЭлементФормы, ОтметкаНезаполненного)
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ОтметкаНезаполненного") Тогда
		ЭлементФормы.ОтметкаНезаполненного = ОтметкаНезаполненного;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
