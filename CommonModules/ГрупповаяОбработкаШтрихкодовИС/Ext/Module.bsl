#Область ПрограммныйИнтерфейс

// Результат серверной обработки полученных из ТСД штрихкодов.
//
// Параметры:
//   ИдентификаторСтроки - Число - идентификатор текущей проверяемой упаковки формы проверки и подбора.
//
// Возвращаемое значение:
//   Структура - результат обработки:
//    * ТребуетсяАвторизация      - Булево - обработка не выполнена: требуется авторизация во внешнем сервисе
//    * ТребуетсяАвторизацияИСМПРозница - Булево - Если Истина, то обработка не выполнена: требуется авторизация розничным токеном
//    * ОтсутствуютCDNПлощадки    - Булево - Если Истина, то обработка не выполнена: отсутствуют CDN-площадки для обращения розничным токеном
//    * ШтрихкодыДляСопоставления - Массив - Если заполнен, то обработка не выполнена: обнаружены неизвестные штрихкоды номенклатуры
//    * ЕстьОшибкиВДереве         - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * АдресДереваУпаковок                 - Строка - адрес дерева упаковок для отображения ошибки
//    * АдресУточнениеКоэффициентовУпаковок - Строка - адрес параметров открытия формы уточнения коэффициентов упаковок
//    * ОбщаяОшибка               - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * ТекстОбщейОшибки          - Строка - Расшифровка общей ошибки
//
//    * ПараметрыСканирования    - См. ШтрихкодированиеИС.ПараметрыСканирования - кэшированные параметры сканирования
//    * АгрегатТСД               - Строка - служебная упаковка пакета загрузки
//    * ТребуетсяУточнениеДанных - Булево - загружаемые штрихкодв требуют уточнения данных
//    * Счетчик      - Число  - Количество штрихкодов обработанных на сервере
//    * ШтрихкодыТСД - Массив из Структура - Штрихкоды требующие обработки
//
//    * ПредложитьЗагрузитьВУпаковке - Булево - предложить пользователю загрузить данные ТСД в одной упаковке
//    * ТекстПредложенияОЗагрузке    - Строка - доступная распознанная структура иерархии
//    * ПроверяемаяУпаковка          - Число, Неопределено - открытая до начала групповой обработки упаковка (идентификатор).
//
//    * ДобавленныеСтроки         - Массив - Добавленные строки документа
//    * ИзмененныеСтроки          - Массив - Измененные строки документа
//
//    * ЭтоВосстановлениеВложенностиУпаковок - Булево - режим пересчета детализации для формы проверки
//    * ДанныеДляВосстановлениеВложенности - Неопределено - режим пересчета детализации для формы проверки
//    * ПересчитыватьИтогиВДеревеМаркированнойПродукции - Булево - режим пересчета детализации для формы проверки
//    
//    * ПредложитьИзменитьДетализацию - Булево - предложить пользователю загрузить данные ТСД в другой детализации
//    * ОписаниеРекомендацииСменыДетализации - Строка - текстовое представление описания смены детализации
//    * РекомендуемыеДетализации - Неопределено, Массив - рекомендуемые детализации
//
Функция РезультатЗагрузкиШтрихкодовИзТСД(ИдентификаторСтроки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыСканирования",               Неопределено);
	// Результат: ошибка загрузки
	Результат.Вставить("ТребуетсяАвторизация",                Ложь);
	Результат.Вставить("ТребуетсяАвторизацияИСМПРозница",     Ложь);
	Результат.Вставить("ОтсутствуютCDNПлощадки",              Ложь);
	Результат.Вставить("ШтрихкодыДляСопоставления",           Новый Массив);
	Результат.Вставить("АдресУточнениеКоэффициентовУпаковок", "");
	Результат.Вставить("ЕстьОшибкиВДереве",                   Ложь);
	Результат.Вставить("ОбщаяОшибка",                         Ложь);
	Результат.Вставить("ТекстОбщейОшибки",                    "");
	
	Результат.Вставить("АдресДереваУпаковок",                 "");
	Результат.Вставить("АгрегатТСД",                          "00000000000000000000");
	
	// Результат: произведена загрузка или сохранены загружаемые коды
	Результат.Вставить("ТребуетсяУточнениеДанных",            Ложь);
	Результат.Вставить("Счетчик",      0); // количество обработанных кодов
	Результат.Вставить("Обработано",   0); // форма проверки
	Результат.Вставить("Всего",        0); // форма проверки
	Результат.Вставить("ШтрихкодыТСД", Новый Массив);
	
	// Формы проверки и подбора
	Результат.Вставить("ПредложитьЗагрузитьВУпаковке",                    Ложь);
	Результат.Вставить("ТекстПредложенияОЗагрузке",                       "");
	Результат.Вставить("ПроверяемаяУпаковка",                             ИдентификаторСтроки);
	Результат.Вставить("ЭтоВосстановлениеВложенностиУпаковок",            Ложь);
	Результат.Вставить("ДанныеДляВосстановлениеВложенности",              Неопределено);
	Результат.Вставить("ПересчитыватьИтогиВДеревеМаркированнойПродукции", Ложь);
	
	// Предложение сменить детализацию на рекомендуемую на основе статистики
	Результат.Вставить("ПредложитьИзменитьДетализацию",        Ложь);
	Результат.Вставить("РекомендуемыеДетализации",             Неопределено);
	Результат.Вставить("ОписаниеРекомендацииСменыДетализации", "");
	
	// Обработанные строки
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ИзмененныеСтроки",  Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Загрузка штрихкодов прервана.
// 
// Параметры:
//  ЗагрузкаДанныхТСД - См. РезультатЗагрузкиШтрихкодовИзТСД
// 
// Возвращаемое значение:
//  Булево - признак незавершенной обработки пакета данных
Функция ЗагрузкаШтрихкодовПрервана(ЗагрузкаДанныхТСД) Экспорт
	
	Возврат ЗагрузкаДанныхТСД.ТребуетсяАвторизация
		Или ЗагрузкаДанныхТСД.ОбщаяОшибка
		Или ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество()
		Или ЗагрузкаДанныхТСД.ТребуетсяУточнениеДанных
		Или ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве
		Или ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок);
	
КонецФункции

// Это служебный штрихкод сеанса загрузки данных из ТСД.
//   В качестве служебного штрихкода используется нулевой короб SSCC
// 
// Параметры:
//  ЗначениеШтрихкода - Строка - Значение штрихкода
// 
// Возвращаемое значение:
//  Булево - Это служебный штрихкод порции данных ТСД
Функция ЭтоАгрегатТСД(ЗначениеШтрихкода) Экспорт
	
	Возврат ЗначениеШтрихкода = "(00)000000000000000000"
		Или ЗначениеШтрихкода = "00000000000000000000";
	
КонецФункции

// Удаляет из массива штрихкодов обработанные для уменьшения объема данных к передаче на клиент
// 
// Параметры:
// 	РезультатЗагрузки - См. РезультатЗагрузкиШтрихкодовИзТСД
Процедура ОставитьНеобработанныеДанные(РезультатЗагрузки) Экспорт
	
	Если РезультатЗагрузки.Обработано > 0 Тогда
		РезультатЗагрузки.Счетчик = РезультатЗагрузки.Счетчик + РезультатЗагрузки.Обработано;
		ШтрихкодыТСД = Новый Массив;
		Для Индекс = РезультатЗагрузки.Обработано По РезультатЗагрузки.Всего - 1 Цикл
			ШтрихкодыТСД.Добавить(РезультатЗагрузки.ШтрихкодыТСД[Индекс]);
		КонецЦикла;
		РезультатЗагрузки.ШтрихкодыТСД = ШтрихкодыТСД;
		РезультатЗагрузки.Всего        = РезультатЗагрузки.Всего - РезультатЗагрузки.Обработано;
		РезультатЗагрузки.Обработано   = 0;
	КонецЕсли;
	
КонецПроцедуры

// Серверная часть обработки штрихкодов при их загрузке из ТСД в формы документов (без иерархической проверки)
//
// Параметры:
//   Форма                 - ФормаКлиентскогоПриложения - источник вызова
//   ШтрихкодыТСД          - Массив Из Структура - данные ТСД с преобразованными в Base64 штрихкодами
//   ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//   ТолькоКодыМаркировки  - Булево - признак обработки только кодов маркировки (без штрихкодов номенклатуры)
//
// Возвращаемое значение:
//   См. РезультатЗагрузкиШтрихкодовИзТСД
Функция ОбработатьПолученныеДанныеТСДВДокументе(Форма, ШтрихкодыТСД, ПараметрыСканирования, ТолькоКодыМаркировки = Истина) Экспорт
	
	Результат = РезультатЗагрузкиШтрихкодовИзТСД();
	Результат.ПараметрыСканирования = ПараметрыСканирования;
	ВидМаркируемойПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
	ШтрихкодТСДbase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Результат.АгрегатТСД);
	ДополнитьУпорядочитьДанныеТСД(ШтрихкодыТСД);
	
	Если ШтрихкодыТСД.Количество() И ШтрихкодыТСД[0].Свойство("НормализованныйШтрихкод") Тогда
		ШтрихкодыТСД.Удалить(0);
	КонецЕсли;
	ШтрихкодыТСД.Вставить(0, Новый Структура("Штрихкод, Количество, Уровень", ШтрихкодТСДbase64, 1, -1));
	
	ДанныеШтрихкодов            = Новый Массив;
	
	МассивПропущенныхШтрихкодов = Новый Массив;
	КешДанныхРазбора            = Новый Соответствие;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции)
		Или ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП;
	КонецЕсли;
	
	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок(Истина);
	ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок, Ложь);
	ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД = Истина;
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ДанныеРазбора = ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(Результат.АгрегатТСД,
		ВидМаркируемойПродукции, КешДанныхРазбора, НастройкиРазбораКодаМаркировки);
	НормализованныйШтрихкодУпаковки = ДанныеРазбора.НормализованныйШтрихкод;
	НормализованныйШтрихкодУпаковки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(НормализованныйШтрихкодУпаковки);
	
	ОбщиеМодули = ШтрихкодированиеОбщегоНазначенияИС.ОбщиеМодулиПодсистем();
	
	Для Каждого СтрокаДанныхТСД Из ШтрихкодыТСД Цикл
		
		СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой", Ложь);
		Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.Штрихкод);
		ДанныеРазбора = ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
			Штрихкод, ВидМаркируемойПродукции, КешДанныхРазбора,
			НастройкиРазбораКодаМаркировки);
		ЭтоШтрихкодНоменклатуры = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод);
			
		Если ДанныеРазбора.ВидУпаковки = Неопределено
			И Не ЗначениеЗаполнено(ДанныеРазбора.НормализованныйШтрихкод)
			И Не (ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки
				И ЭтоШтрихкодНоменклатуры) Тогда
			
			Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Штрихкод, "");
			
			СтрокаДанныхТСД.ШтрихкодСОшибкой = Истина;
			ОбщегоНазначенияИС.СообщитьПользователюВФорму(
				Форма.УникальныйИдентификатор,
				СтрШаблон(
					НСтр("ru = 'Код %1 не является штрихкодом потребительской, групповой или логистической
					           |упаковки для вида: %2. Пропущен.'"),
					Штрихкод, ВидМаркируемойПродукции));
			
			МассивПропущенныхШтрихкодов.Добавить(СтрокаДанныхТСД);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", ДанныеРазбора.НормализованныйШтрихкод);
		Если ДанныеРазбора.НормализованныйШтрихкод = НормализованныйШтрихкодУпаковки Тогда
			СтрокаДанныхТСД.Вставить("НормализованныйШтрихкодУпаковки", "");
		Иначе
			СтрокаДанныхТСД.Вставить("НормализованныйШтрихкодУпаковки", НормализованныйШтрихкодУпаковки);
		КонецЕсли;
		
		Если Не СтрокаДанныхТСД.ШтрихкодСОшибкой Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанныхТСД.НормализованныйШтрихкодУпаковки) Тогда
				СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[СтрокаДанныхТСД.НормализованныйШтрихкодУпаковки];
				Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				КонецЕсли;
			Иначе
				СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
			КонецЕсли;
			
			ДанныеРазбораИПримечание = КешДанныхРазбора[Штрихкод];
			ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
			
			Если Не ЭтоШтрихкодНоменклатуры
				И ЗначениеЗаполнено(ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода.ТекстОшибки) Тогда
				СтрокаДанныхТСД.ШтрихкодСОшибкой = Истина;
				ОбщегоНазначенияИС.СообщитьПользователюВФорму(
					Форма.УникальныйИдентификатор,
					СтрШаблон(
						НСтр("ru = 'Код %1 пропущен по причине:
					           |%2.'"),
					СтрокаДанныхТСД.НормализованныйШтрихкод, ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода.ТекстОшибки));
				МассивПропущенныхШтрихкодов.Добавить(СтрокаДанныхТСД);
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
			
			СтрокаДерева.ШтрихкодBase64          = СтрокаДанныхТСД.Штрихкод; // ШтрихкодBase64
			СтрокаДерева.ВидПродукции            = ВидМаркируемойПродукции;
			СтрокаДерева.ДанныеРазбора           = ДанныеРазбора;
			СтрокаДерева.Входящий                = Истина;
			СтрокаДерева.НормализованныйШтрихкод = СтрокаДанныхТСД.НормализованныйШтрихкод;
			
			Если Не ЭтоШтрихкодНоменклатуры Тогда
				// Заполнение GTIN и EAN
				Если ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
				КонецЕсли;
				
				СтрокаДерева.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
				СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
				
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				Иначе
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				КонецЕсли;
				
				ШтрихкодированиеОбщегоНазначенияИС.ПроверитьСтрокуДанныхНаВхождениеНедопустимыхСимволов(СтрокаДерева);
				
				// Нормализация используется для поиска КМ без учета МРЦ.
				// Для табачных пачек и блоков нормализованный код не содержит МРЦ.
				// Для логистические упаковки GS1-128 нормализованный код не содержит скобок.
				// Для остальной маркированной продукции нормализованный штрихкод равен штрихкоду.
				ВключаяТабачнуюПродукцию = Истина;
				Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
					ОбщиеМодули.ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(СтрокаДерева, ДанныеРазбора);
				КонецЕсли;
				
				СоответствиеСтрокДереваУпаковок.Вставить(СтрокаДанныхТСД.НормализованныйШтрихкод, СтрокаДерева);
				
			Иначе
				
				СтрокаДерева.GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
				СтрокаДерева.EAN = Штрихкод;
				СтрокаДерева.Штрихкод = Штрихкод;
				СоответствиеСтрокДереваУпаковок.Вставить(Штрихкод, СтрокаДерева);
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		ДанныеШтрихкода = Новый Структура(
			"Штрихкод, ШтрихкодBase64, Количество",
			Штрихкод, СтрокаДанныхТСД.Штрихкод, СтрокаДанныхТСД.Количество);
		
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивПропущенныхШтрихкодов.Количество() Тогда
		Для Каждого ЭлементМассива Из МассивПропущенныхШтрихкодов Цикл
			ПорядковыйНомер = ШтрихкодыТСД.Найти(ЭлементМассива);
			Если ПорядковыйНомер <> Неопределено Тогда
				ШтрихкодыТСД.Удалить(ПорядковыйНомер);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ШтрихкодированиеИС.ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	ПараметрыСканированияДляГрупповойОбработки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСканирования, Ложь);
	
	Если Не ПараметрыСканированияДляГрупповойОбработки.Свойство("ВидОперацииИСМП")
		Или ПараметрыСканированияДляГрупповойОбработки.ВидОперацииИСМП <> Перечисления["ВидыОперацийИСМП"]["ЗаказНаЭмиссиюКодовМаркировки"] Тогда
		ПараметрыСканированияДляГрупповойОбработки.ПроверятьДублиКодовМаркировки = "Иерархия";
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
		МодульШтрихкодированиеОбщегоНазначенияИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		МодульШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(ДанныеШтрихкодов,
		ПараметрыСканированияДляГрупповойОбработки, Неопределено, Форма, КешДанныхРазбора, ДанныеПоШтрихкодам);
	
	// 1. Авторизация
	ТребуетсяАвторизация = Ложь;
	Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
		РезультатОбработки = КлючИЗначение.Значение;
		Если РезультатОбработки.Свойство("ТребуетсяАвторизацияИСМП")
				И РезультатОбработки.ТребуетсяАвторизацияИСМП Тогда
			ТребуетсяАвторизация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ТребуетсяАвторизация = ТребуетсяАвторизация;
	Если ТребуетсяАвторизация Тогда
		Возврат Результат;
	КонецЕсли;
	
	УпорядочитьДанныеТСДПоРезультатамОбработкиШтрихкодов(
		ШтрихкодыТСД, РезультатОбработкиШтрихкодов.РезультатыОбработки);
	
	// 2. Проверка на ошибки
	Результат.ШтрихкодыТСД = ШтрихкодыТСД;
	ПроверитьНаОшибкиРезультатОбработкиДанныхТСД(Результат, Форма, ПараметрыСканирования);
	
	Если ЗагрузкаШтрихкодовПрервана(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 3. Уточнение данных по всему загружаемому пакету (1 элемент)
	Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
		РезультатОбработки = КлючИЗначение.Значение;
		Если РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки Тогда
			Результат.ТребуетсяУточнениеДанных = Истина;
			Результат.АдресДереваУпаковок = РезультатОбработки.АдресДереваУпаковок;
			Результат.АгрегатТСД = КлючИЗначение.Ключ;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// 4. Обработка всех строк, уточнение не требуется
	ОбработатьШтрихкоды(Форма, Результат);
	
	Возврат Результат;
	
КонецФункции

// Обработать штрихкоды.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из которой выполняется операция загрузки штрихкодов
//  Результат - См. РезультатЗагрузкиШтрихкодовИзТСД
Процедура ОбработатьШтрихкоды(Форма, Результат) Экспорт
	
	ШтрихкодыТСД             = Результат.ШтрихкодыТСД;
	ПараметрыСканирования    = Результат.ПараметрыСканирования;
	
	МенеджерОбработки        = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
	
	Для Каждого СтрокаШтрихкод Из ШтрихкодыТСД Цикл
		
		Если СтрокаШтрихкод.РезультатОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(СтрокаШтрихкод.РезультатОбработки.АдресДереваУпаковок);
		ДанныеШтрихкода = СтрокаШтрихкод.РезультатОбработки.ДанныеШтрихкода;
		
		ШтрихкодированиеИС.ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, СтрокаШтрихкод.РезультатОбработки, ВложенныеШтрихкоды.ДеревоУпаковок);
		
		РезультатДобавления = МенеджерОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
		Если РезультатДобавления <> Неопределено Тогда
			ПеренестиДобавленныеИзмененныеСтроки(Результат, РезультатДобавления);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеКОпределениюВидаУпаковки(КОпределениюВидаУпаковки) Экспорт
	
	Если ЭтоАдресВременногоХранилища(КОпределениюВидаУпаковки) Тогда
		КОпределениюВидаУпаковки = ПолучитьИзВременногоХранилища(КОпределениюВидаУпаковки);
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии",      Ложь);
	Результат.Вставить("АдресУточнениеКоэффициентовУпаковок", Неопределено);
	Результат.Вставить("УточнениеДанныхНеТребуется",          Ложь);
	Результат.Вставить("ТекстОшибки",                         "");

	СписокДанныхШтрихкодов = Новый Массив;
	Для Каждого КлючИЗначение Из КОпределениюВидаУпаковки.GTIN Цикл
		СписокДанныхШтрихкодов.Добавить(
			Новый Структура(
				"Штрихкод, Количество", КлючИЗначение.Значение, 1));
	КонецЦикла;
	
	РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(
		СписокДанныхШтрихкодов, КОпределениюВидаУпаковки.ПараметрыСканирования, Неопределено, Новый УникальныйИдентификатор());
	
	Если РезультатОбработкиШтрихкодов.ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ДанныеУточнения = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьТаблицуУточненияКоэффициентовУпаковок();
	ДанныеОписания  = ДанныеУточнения.Скопировать(, "GTIN, КоличествоПотребительскихУпаковок, ВидУпаковки");
	Отбор = Новый Структура("GTIN");
	
	Для Каждого СтрокаДанных Из РезультатОбработкиШтрихкодов.ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.GTIN = СтрокаДанных.GTIN;
		Если ДанныеУточнения.НайтиСтроки(Отбор).Количество() > 0 
			Или ДанныеОписания.НайтиСтроки(Отбор).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			СтрокаДанныеОписания = ДанныеОписания.Добавить();
			СтрокаДанныеОписания.GTIN                              = СтрокаДанных.GTIN;
			СтрокаДанныеОписания.КоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
			СтрокаДанныеОписания.ВидУпаковки                       = СтрокаДанных.ВидУпаковки;
			
		Иначе
			
			ЭлементУточнения = ДанныеУточнения.Добавить();
			ЭлементУточнения.GTIN                              = СтрокаДанных.GTIN;
			ЭлементУточнения.ВидУпаковки                       = СтрокаДанных.ВидУпаковки;
			ЭлементУточнения.ВидПродукции                      = СтрокаДанных.ВидПродукции;
			ЭлементУточнения.КоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
			
			ЭлементУточнения.Номенклатура   = СтрокаДанных.Номенклатура;
			ЭлементУточнения.Характеристика = СтрокаДанных.Характеристика;
			ЭлементУточнения.Серия          = СтрокаДанных.Серия;
			ЭлементУточнения.Упаковка       = СтрокаДанных.Упаковка;
			
			ЭлементУточнения.ПредставлениеСодержимоеУпаковки = СтрокаДанных.ПредставлениеНоменклатуры;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеУточнения.Количество() Тогда
		Результат.АдресУточнениеКоэффициентовУпаковок = ПоместитьВоВременноеХранилище(ДанныеУточнения, Новый УникальныйИдентификатор());
	ИначеЕсли ДанныеОписания.Количество() Тогда
		Отказ = Не РегистрыСведений.ОписаниеGTINИС.УстановитьОписаниеПоТаблице(ДанныеОписания);
		Если Отказ Тогда
			Результат.ТекстОшибки = НСтр("ru = 'Не удалось записать набор записей регистра сведений ОписаниеGTIN ИС.
				                               |Подробности см. в журнале регистрации.'");
		Иначе
			Результат.УточнениеДанныхНеТребуется = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеКОпределениюВидаУпаковки(ДанныеДляТСД, ВидМаркируемойПродукции, КешДанныхРазбора,
	НастройкиРазбораКодаМаркировки) Экспорт
	
	GTINКОпределениюВидаУпаковки = Новый Соответствие;
	
	Для Каждого СтрокаДанныхТСД Из ДанныеДляТСД.Штрихкоды Цикл
		
		Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.Штрихкод);
		ДанныеРазбораШтрихкода = ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
			Штрихкод, ВидМаркируемойПродукции, КешДанныхРазбора,
			НастройкиРазбораКодаМаркировки);
		ДанныеРазбора = КешДанныхРазбора[Штрихкод].ДанныеРазбора;
		
		GTIN = Неопределено;
		Если Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки)
			И Неопределено <> ДанныеРазбора 
			И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN) Тогда
			GTINКОпределениюВидаУпаковки.Вставить(GTIN, ДанныеРазбораШтрихкода.НормализованныйШтрихкод);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанныхТСД.ШтрихкодУпаковки) Тогда
			
			Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.ШтрихкодУпаковки);
			ДанныеРазбораШтрихкода = ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
				Штрихкод, ВидМаркируемойПродукции, КешДанныхРазбора,
				НастройкиРазбораКодаМаркировки);
			ДанныеРазбора = КешДанныхРазбора[Штрихкод].ДанныеРазбора;
			
			GTIN = Неопределено;
			Если Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки)
				И Неопределено <> ДанныеРазбора 
				И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN) Тогда
				GTINКОпределениюВидаУпаковки.Вставить(GTIN, ДанныеРазбораШтрихкода.НормализованныйШтрихкод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат GTINКОпределениюВидаУпаковки;
	
КонецФункции

Функция ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(Знач Штрихкод, ВидПродукции, КешДанныхРазбора = Неопределено,
	НастройкиРазбора = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидУпаковки",                                  Неопределено);
	Результат.Вставить("НормализованныйШтрихкод",                      "");
	Результат.Вставить("КодМаркировкиСоответствуетНесколькимШаблонам", Ложь);
	Результат.Вставить("ВозможнаГрупповаяУпаковкаИлиНабор",            Ложь);
	
	Если КешДанныхРазбора <> Неопределено Тогда
		ДанныеРазбораИРезультат = КешДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИРезультат <> Неопределено Тогда
			ДанныеРазбора = ДанныеРазбораИРезультат.ДанныеРазбора;
			Если ДанныеРазбора <> Неопределено Тогда
				Результат.ВидУпаковки = ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки;
				Результат.НормализованныйШтрихкод = ДанныеРазбораИРезультат.ДанныеРазбора.НормализованныйКодМаркировки;
				Результат.КодМаркировкиСоответствуетНесколькимШаблонам = ДанныеРазбораИРезультат.ПримечаниеКРазборуШтрихкода <> Неопределено
					И (ДанныеРазбораИРезультат.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки().КодМаркировкиСоответствуетНесколькимШаблонам);
				Если Не ЗначениеЗаполнено(Результат.ВидУпаковки) Тогда
					Результат.ВозможнаГрупповаяУпаковкаИлиНабор = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
						ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки,
						ДанныеРазбораИРезультат.ДанныеРазбора);
				КонецЕсли;
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатРазбора            = Неопределено;
	ПримечаниеКРазборуШтрихкода = Неопределено;
	
	Если НайтиНедопустимыеСимволыXML(Штрихкод) > 0 Тогда
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			РезультатРазбора, НастройкиРазбора.Кеш, ВидПродукции, ПримечаниеКРазборуШтрихкода,
			НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
	Иначе
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			Штрихкод, НастройкиРазбора.Кеш, ВидПродукции, ПримечаниеКРазборуШтрихкода,
			НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
	КонецЕсли;
	
	ВидУпаковки = Неопределено;
	Если ДанныеРазбора = Неопределено Тогда
		Если РезультатРазбора <> Неопределено И РезультатРазбора.Разобран Тогда
			НормализованныйШтрихкод = РезультатРазбора.ПредставлениеШтрихкода;
		Иначе
			НормализованныйШтрихкод = "";
		КонецЕсли;
	Иначе
		ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	ДанныеРазбораИРезультат = Новый Структура;
	ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
	ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
	
	Если КешДанныхРазбора <> Неопределено Тогда
		КешДанныхРазбора.Вставить(Штрихкод, ДанныеРазбораИРезультат);
	КонецЕсли;
	
	GTIN = Неопределено;
	Если ДанныеРазбора <> Неопределено
		И Не ЗначениеЗаполнено(ВидУпаковки)
		И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN) Тогда
		
		ОписаниеGTINИзКеша = КешДанныхРазбора[GTIN];
		Если ОписаниеGTINИзКеша = Неопределено Тогда
			
			ОписанияGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(GTIN);
			ОписаниеGTIN = ОписанияGTIN[GTIN];
			Если ОписаниеGTIN <> Неопределено Тогда
				КешДанныхРазбора.Вставить(GTIN, ОписаниеGTIN);
				ОписаниеGTINИзКеша = ОписаниеGTIN;
			Иначе
				КешДанныхРазбора.Вставить(GTIN, NULL);
				ОписаниеGTINИзКеша = NULL;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеGTINИзКеша <> NULL Тогда
			ВидУпаковки = ОписаниеGTINИзКеша.ВидУпаковки;
			ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки = ВидУпаковки;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ВидУпаковки                                  = ВидУпаковки;
	Результат.НормализованныйШтрихкод                      = НормализованныйШтрихкод;
	Результат.КодМаркировкиСоответствуетНесколькимШаблонам = ПримечаниеКРазборуШтрихкода <> Неопределено
		И (ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки().КодМаркировкиСоответствуетНесколькимШаблонам);
	Если Не ЗначениеЗаполнено(Результат.ВидУпаковки) И ДанныеРазбора <> Неопределено Тогда
		Результат.ВозможнаГрупповаяУпаковкаИлиНабор = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
			ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки,
			ДанныеРазбораИРезультат.ДанныеРазбора);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидУпаковкиИПредставлениеШтрихкода(Знач Штрихкод, ВидПродукции, КешДанныхРазбора = Неопределено,
	НастройкиРазбораКодовМаркировки = Неопределено, ПользовательскиеПараметрыРазбораКодаМаркировки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидУпаковки",                                  Неопределено);
	Результат.Вставить("НормализованныйШтрихкод",                      "");
	Результат.Вставить("КодМаркировкиСоответствуетНесколькимШаблонам", Ложь);
	
	Если КешДанныхРазбора <> Неопределено Тогда
		ДанныеРазбораИРезультат = КешДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИРезультат <> Неопределено Тогда
			ДанныеРазбора = ДанныеРазбораИРезультат.ДанныеРазбора;
			Если ДанныеРазбора <> Неопределено Тогда
				Результат.ВидУпаковки = ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки;
				Результат.НормализованныйШтрихкод = ДанныеРазбораИРезультат.ДанныеРазбора.НормализованныйКодМаркировки;
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатРазбора            = Неопределено;
	ПримечаниеКРазборуШтрихкода = Неопределено;
	
	Если НайтиНедопустимыеСимволыXML(Штрихкод) > 0 Тогда
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			РезультатРазбора, ВидПродукции, ПримечаниеКРазборуШтрихкода,
			НастройкиРазбораКодовМаркировки, ПользовательскиеПараметрыРазбораКодаМаркировки);
	Иначе
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			Штрихкод, ВидПродукции, ПримечаниеКРазборуШтрихкода,
			НастройкиРазбораКодовМаркировки, ПользовательскиеПараметрыРазбораКодаМаркировки);
	КонецЕсли;
	
	ВидУпаковки = Неопределено;
	Если ДанныеРазбора = Неопределено Тогда
		Если РезультатРазбора <> Неопределено И РезультатРазбора.Разобран Тогда
			НормализованныйШтрихкод = РезультатРазбора.ПредставлениеШтрихкода;
		Иначе
			НормализованныйШтрихкод = "";
		КонецЕсли;
	Иначе
		ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	ДанныеРазбораИРезультат = Новый Структура;
	ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
	ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
	
	Если КешДанныхРазбора <> Неопределено Тогда
		КешДанныхРазбора.Вставить(Штрихкод, ДанныеРазбораИРезультат);
	КонецЕсли;
	
	GTIN = Неопределено;
	Если Не ЗначениеЗаполнено(ВидУпаковки)
		И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN) Тогда
		
		ОписаниеGTINИзКеша = КешДанныхРазбора[GTIN];
		Если ОписаниеGTINИзКеша = Неопределено Тогда
			
			ОписанияGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(GTIN);
			ОписаниеGTIN = ОписанияGTIN[GTIN];
			Если ОписаниеGTIN <> Неопределено Тогда
				КешДанныхРазбора.Вставить(GTIN, ОписаниеGTIN);
				ОписаниеGTINИзКеша = ОписаниеGTIN;
			Иначе
				КешДанныхРазбора.Вставить(GTIN, NULL);
				ОписаниеGTINИзКеша = NULL;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеGTINИзКеша <> NULL Тогда
			ВидУпаковки = ОписаниеGTINИзКеша.ВидУпаковки;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ВидУпаковки                                  = ВидУпаковки;
	Результат.НормализованныйШтрихкод                      = НормализованныйШтрихкод;
	Результат.КодМаркировкиСоответствуетНесколькимШаблонам = ПримечаниеКРазборуШтрихкода <> Неопределено
		И (ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки().КодМаркировкиСоответствуетНесколькимШаблонам);
	
	Возврат Результат;
	
КонецФункции

// Подготовливает параметр сканирования ДополнительныеВариантыСопоставленияНоменклатуры
//
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ПодобраннаяМаркируемаяПродукция - ДанныеФормыКоллекция Из ДанныеФормыСтруктура - Таблица ПодобраннаяМаркируемаяПродукция из формы проверки и подбора:
//    * GTIN - Строка - GTIN
//    * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
//    * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры
//
Процедура ПодготовитьДополнительныеВариантыСопоставленияНоменклатуры(ПараметрыСканирования, ПодобраннаяМаркируемаяПродукция) Экспорт
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодготовитьДополнительныеВариантыСопоставленияНоменклатуры(
		ПараметрыСканирования, ПодобраннаяМаркируемаяПродукция)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаИзФормДокументов

// При необходимости изменяет данные поступившие из ТСД по правилам: вложение упаковки всегда должно 
// быть в массиве после строки самой упаковки; если строки с штрихкодом упаковки нет - она добавляется.
//
// Параметры:
//  ДанныеТСД - Массив - данные поступившие с ТСД (изменяемый параметр)
//
// Возвращаемое значение:
//  Булево - в данных ТСД есть иерархия
//
Функция ДополнитьУпорядочитьДанныеТСД(ДанныеТСД) Экспорт
	
	ТипЧисло  = Тип("Число");
	ТипСтрока = Тип("Строка");
	
	// 1. Дополнить данные поступившие из ТСД / внешних источников (в формате ТСД)
	ВсеШтрихкоды = Новый Соответствие;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ВсеШтрихкоды.Вставить(ЭлементМассива.Штрихкод, Истина);
	КонецЦикла;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ШтрихкодУпаковки = "";
		Если Не ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли ВсеШтрихкоды[ШтрихкодУпаковки] = Неопределено Тогда
			ВсеШтрихкоды.Вставить(ШтрихкодУпаковки, Истина);
			НовыйЭлемент = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементМассива, Ложь);
			Для Каждого КлючИЗначение Из НовыйЭлемент Цикл
				Ключ = КлючИЗначение.Ключ;
				ТипКолонки = ТипЗнч(ЭлементМассива[Ключ]);
				Если ТипКолонки = ТипСтрока Тогда
					НовыйЭлемент[Ключ] = "";
				ИначеЕсли ТипКолонки = ТипЧисло Тогда
					НовыйЭлемент[Ключ] = 0;
				Иначе
					НовыйЭлемент[Ключ] = Неопределено;
				КонецЕсли;
			КонецЦикла;
			НовыйЭлемент.Штрихкод         = ШтрихкодУпаковки;
			НовыйЭлемент.ШтрихкодУпаковки = "";
			ДанныеТСД.Добавить(НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Сортировать данные
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствия.Колонки.Добавить("Штрихкод",         Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствия.Колонки.Добавить("Обновлять",        Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствия.Колонки.Добавить("Уровень",          ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("НовыйУровень",     ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	ДобавленныеЭлементы = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки);
		
		КлючПоиска = СтрШаблон("%1-%2", ЭлементМассива.Штрихкод, ШтрихкодУпаковки);
		РезультатПоиска = ДобавленныеЭлементы[КлючПоиска];
		Если РезультатПоиска <> Неопределено Тогда
			Если РезультатПоиска.Свойство("Количество")
				// Типовой EAN13 кодируется в 20 символов base64
				И СтрДлина(РезультатПоиска.Штрихкод) <= 22 Тогда
				Если ЭлементМассива.ФорматBase64 Тогда
					Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(ЭлементМассива.Штрихкод);
				Иначе
					Штрихкод = ЭлементМассива.Штрихкод;
				КонецЕсли;
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(Штрихкод) Тогда
					РезультатПоиска.Количество = РезультатПоиска.Количество + ЭлементМассива.Количество;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ДобавленныеЭлементы.Вставить(КлючПоиска, ЭлементМассива);
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
		НоваяСтрока.Штрихкод         = ЭлементМассива.Штрихкод;
		НоваяСтрока.Уровень          = 0;
		НоваяСтрока.Элемент          = ЭлементМассива;
		
	КонецЦикла;
	
	ТаблицаСоответствия.Индексы.Добавить("Уровень");
	ТаблицаСоответствия.Индексы.Добавить("Обновлять");
	ТаблицаСоответствия.Индексы.Добавить("Уровень, Штрихкод");
	
	СтруктураПоискаУровень         = Новый Структура("Уровень");
	СтруктураПоискаОбновлять       = Новый Структура("Обновлять", Истина);
	СтруктураПоискаУровеньШтрихкод = Новый Структура("Уровень, Штрихкод");
	
	Уровень = 0;
	СчитатьИерархию = Истина;
	СтрокТаблицы    = ТаблицаСоответствия.Количество();
	Пока СчитатьИерархию И Уровень <= СтрокТаблицы Цикл
		СчитатьИерархию = Ложь;
		СтруктураПоискаУровень.Уровень = Уровень;
		СтрокиУровня = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаУровень);
		Для Каждого СтрокаТЧ Из СтрокиУровня Цикл
			Если ПустаяСтрока(СтрокаТЧ.ШтрихкодУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоискаУровеньШтрихкод.Уровень  = Уровень;
			СтруктураПоискаУровеньШтрихкод.Штрихкод = СтрокаТЧ.ШтрихкодУпаковки;
			Упаковки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаУровеньШтрихкод);
			Если Упаковки.Количество() Тогда
				СчитатьИерархию = Истина;
				СтрокаТЧ.НовыйУровень = Уровень + 1;
				СтрокаТЧ.Обновлять    = Истина;
			КонецЕсли;
		КонецЦикла;
		
		СтрокиУровня = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаОбновлять);
		Для Каждого СтрокаТЧ Из СтрокиУровня Цикл
			СтрокаТЧ.Уровень      = СтрокаТЧ.НовыйУровень;
			СтрокаТЧ.НовыйУровень = 0;
			СтрокаТЧ.Обновлять    = Ложь;
		КонецЦикла;
		
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Если Уровень > СтрокТаблицы Тогда
		ДанныеТСД = Новый Массив;
		ВызватьИсключение НСтр("ru = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок'");
	КонецЕсли;
	
	ТаблицаСоответствия.Сортировать("Уровень ВОЗР");
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		ЭлементДанных = СтрокаТЧ.Элемент;
		ЭлементДанных.Вставить("Уровень", СтрокаТЧ.Уровень);
		СортированныйМассив.Добавить(ЭлементДанных);
	КонецЦикла;
	ДанныеТСД = СортированныйМассив;
	
	Возврат Уровень > 1;
	
КонецФункции

Процедура УпорядочитьДанныеТСДПоРезультатамОбработкиШтрихкодов(ДанныеТСД, РезультатыОбработки, ЗаменыШтрихкодов = Неопределено) Экспорт
	
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("Уровень",            Новый ОписаниеТипов("Число"));
	ТаблицаСоответствия.Колонки.Добавить("ТребуетсяУточнение", Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	ТаблицаСоответствия.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаСоответствия.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаСоответствия.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаСоответствия.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаСоответствия.Колонки.Добавить("МРЦ",            Новый ОписаниеТипов("Число"));
	ТаблицаСоответствия.Колонки.Добавить("ГоденДо",        Новый ОписаниеТипов("Дата"));
	
	ЗаполнятьМРЦ     = Неопределено;
	ЗаполнятьГоденДо = Неопределено;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		РезультатОбработки = РезультатыОбработки.Получить(ЭлементМассива.НормализованныйШтрихкод);
		Если РезультатОбработки = Неопределено
			И ЗаменыШтрихкодов <> Неопределено Тогда
			ПервичныйШтрихкод = ЗаменыШтрихкодов[ЭлементМассива.НормализованныйШтрихкод];
			Если ПервичныйШтрихкод <> Неопределено Тогда
				РезультатОбработки = РезультатыОбработки.Получить(ПервичныйШтрихкод);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.Уровень = ЭлементМассива.Уровень;
		НоваяСтрока.Элемент = ЭлементМассива;
		ЭлементМассива.Вставить("РезультатОбработки", РезультатОбработки);
		
		Если РезультатОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
		
		Если ДанныеШтрихкода <> Неопределено
			И Не РезультатОбработки.ТребуетсяОбработкаШтрихкода Тогда
			
			НоваяСтрока.Номенклатура   = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Серия          = ДанныеШтрихкода.Серия;
			НоваяСтрока.GTIN           = ДанныеШтрихкода.GTIN;
			
			Если ЗаполнятьМРЦ = Неопределено Тогда
				ЗаполнятьМРЦ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатОбработки.ДанныеШтрихкода, "МРЦ");
			КонецЕсли;
			
			Если ЗаполнятьГоденДо = Неопределено Тогда
				ЗаполнятьГоденДо = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатОбработки.ДанныеШтрихкода, "ГоденДо");
			КонецЕсли;
			
			Если ЗаполнятьМРЦ Тогда
				НоваяСтрока.МРЦ = ДанныеШтрихкода.МРЦ;
			КонецЕсли;
			
			Если ЗаполнятьГоденДо Тогда
				НоваяСтрока.ГоденДо = ДанныеШтрихкода.ГоденДо;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляИндекса = Новый Массив;
	ПоляИндекса.Добавить("Уровень");
	ПоляИндекса.Добавить("Номенклатура");
	ПоляИндекса.Добавить("Характеристика");
	ПоляИндекса.Добавить("Серия");
	ПоляИндекса.Добавить("GTIN");
	Если ЗаполнятьМРЦ <> Неопределено И ЗаполнятьМРЦ Тогда
		ПоляИндекса.Добавить("МРЦ");
	КонецЕсли;
	Если ЗаполнятьГоденДо <> Неопределено И ЗаполнятьГоденДо Тогда
		ПоляИндекса.Добавить("ГоденДо");
	КонецЕсли;
	ТаблицаСоответствия.Индексы.Добавить(СтрСоединить(ПоляИндекса, ","));
	
	ПоляСортировки = Новый Массив;
	ПоляСортировки.Добавить("Уровень ВОЗР");
	ПоляСортировки.Добавить("Номенклатура УБЫВ");
	ПоляСортировки.Добавить("Характеристика УБЫВ");
	ПоляСортировки.Добавить("Серия УБЫВ");
	ПоляСортировки.Добавить("GTIN ВОЗР");
	Если ЗаполнятьМРЦ <> Неопределено И ЗаполнятьМРЦ Тогда
		ПоляСортировки.Добавить("МРЦ УБЫВ");
	КонецЕсли;
	Если ЗаполнятьГоденДо <> Неопределено И ЗаполнятьГоденДо Тогда
		ПоляСортировки.Добавить("ГоденДо УБЫВ");
	КонецЕсли;
	ТаблицаСоответствия.Сортировать(СтрСоединить(ПоляСортировки, ","));
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		СортированныйМассив.Добавить(СтрокаТЧ.Элемент);
	КонецЦикла;
	
	ДанныеТСД = СортированныйМассив;
	
КонецПроцедуры

//Переносит массивы добавленных и измененных строк по обработанному штрихкоду в общие массивы.
//
//Параметры:
//   Приемник - См. РезультатЗагрузкиШтрихкодовИзТСД
//   Источник - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Процедура ПеренестиДобавленныеИзмененныеСтроки(Приемник, Источник) Экспорт
	
	Для Каждого СтрокаТовары Из Источник.ДобавленныеСтроки Цикл
		Если Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ДобавленныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	Источник.ДобавленныеСтроки.Очистить();
	
	Для Каждого СтрокаТовары Из Источник.ИзмененныеСтроки Цикл
		Если Приемник.ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено
			И Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ИзмененныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	Источник.ИзмененныеСтроки.Очистить();
	
КонецПроцедуры

// Переносит ошибки при обработке отдельных штрихкодов в общую ошибку
//
// Параметры:
//   РезультатОбработки    - См. РезультатЗагрузкиШтрихкодовИзТСД
//   Форма                 - ФормаКлиентскогоПриложения - источник групповой обработки
//   ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ПроверитьНаОшибкиРезультатОбработкиДанныхТСД(РезультатОбработки, Форма, ПараметрыСканирования) Экспорт
	
	ТребуетсяСопоставлениеНоменклатуры = Ложь;
	
	Для Каждого Элемент Из РезультатОбработки.ШтрихкодыТСД Цикл
		
		Если Элемент.РезультатОбработки = Неопределено Тогда
			Элемент.ШтрихкодСОшибкой = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры Тогда
			ТребуетсяСопоставлениеНоменклатуры = Истина;
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок Тогда
			РезультатОбработки.АдресУточнениеКоэффициентовУпаковок = Элемент.РезультатОбработки.АдресУточнениеКоэффициентовУпаковок;
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ОбщаяОшибка Тогда
			РезультатОбработки.ОбщаяОшибка      = Истина;
			РезультатОбработки.ТекстОбщейОшибки = Элемент.РезультатОбработки.ТекстОшибки;
		КонецЕсли;
		
		Если Элемент.РезультатОбработки.ЕстьОшибкиВДеревеУпаковок Тогда
			РезультатОбработки.ЕстьОшибкиВДереве   = Истина;
			РезультатОбработки.АдресДереваУпаковок = Элемент.РезультатОбработки.АдресДереваУпаковок;
			Элемент.ШтрихкодСОшибкой = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.РезультатОбработки.ТекстОшибки) Тогда
			Элемент.ШтрихкодСОшибкой = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатОбработки.ОбщаяОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяСопоставлениеНоменклатуры
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
		
		ДанныеДляУточненияСведений = ШтрихкодированиеИСВызовСервера.ДанныеДляУточненияСведенийПользователя(Форма.КэшМаркируемойПродукции);
		Если ДанныеДляУточненияСведений.Операция = "СопоставлениеНоменклатуры" Тогда
			РезультатОбработки.ШтрихкодыДляСопоставления = ДанныеДляУточненияСведений.Данные.ШтрихкодыКСопоставлению;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеШтрихкодовСОшибками = Новый Массив;
	Для Каждого Элемент Из РезультатОбработки.ШтрихкодыТСД Цикл
		
		Если Элемент.РезультатОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.ШтрихкодСОшибкой
			И ТипЗнч(Элемент.РезультатОбработки.ДанныеШтрихкода) = Тип("Структура") Тогда
				ДанныеШтрихкодовСОшибками.Добавить(
					Элемент.РезультатОбработки.ДанныеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеШтрихкодовСОшибками.Количество() = 0 И Не РезультатОбработки.ЕстьОшибкиВДереве Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработки.ЕстьОшибкиВДереве И ДанныеШтрихкодовСОшибками.Количество() > 0 Тогда
		
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
		
		Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодовСОшибками Цикл
			
			Отбор = Новый Структура(
				"НормализованныйШтрихкод", ДанныеШтрихкода.НормализованныйШтрихкод);
			НайденныеСтроки = ДеревоУпаковок.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ДанныеШтрихкода);
				НоваяСтрокаДерева.ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ДеревоУпаковок, РезультатОбработки.АдресДереваУпаковок);
		
	ИначеЕсли ДанныеШтрихкодовСОшибками.Количество() > 0 Тогда
		
		РезультатОбработки.ЕстьОшибкиВДереве = Истина;
		ДеревоУпаковок = ИнициализироватьДеревоУпаковок(ПараметрыСканирования);
		
		Для Каждого ДанныеШтрихкода Из ДанныеШтрихкодовСОшибками Цикл
			НоваяСтрокаДерева = ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ДанныеШтрихкода);
			НоваяСтрокаДерева.ЕстьОшибки = Истина;
		КонецЦикла;
		
		РезультатОбработки.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДеревоУпаковок, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьДеревоУпаковок(ПараметрыСканирования) Экспорт
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
	ДеревоУпаковок = Модуль.ИнициализироватьДеревоУпаковок();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			Модуль.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок, ПараметрыСканирования);
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ВидОперацииИСМП") Тогда
			Для Каждого ВидПродукции Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП() Цикл
				Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ВидПродукции) Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
					Модуль.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок, ПараметрыСканирования);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, Перечисления.ВидыПродукцииИС.Алкогольная) Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		Модуль.НормализоватьКолонкиДереваУпаковок(ДеревоУпаковок);
	КонецЕсли;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

#КонецОбласти

#Область СохраненныйВыборДляГрупповойОбработки

Процедура ОбработатьУточнениеДанных(СохраненныйВыбор, ОбновляемыеШтрихкодыУпаковок, ПараметрыСканирования) Экспорт
	
	КэшированныеЗначения = Неопределено;
	РезультатВыбора = Новый Структура("ДанныеВыбора, ЗапомнитьВыбор", СохраненныйВыбор, Ложь);
	Для Каждого ОбновляемыйЭлемент Из ОбновляемыеШтрихкодыУпаковок Цикл 
		РезультатОбработки = ОбновляемыйЭлемент.РезультатОбработки;
		РезультатОбработки.ДанныеШтрихкода.Номенклатура = Неопределено; //Сбросим для перезаписи
		ШтрихкодированиеИС.ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(РезультатВыбора, РезультатОбработки, ПараметрыСканирования, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
