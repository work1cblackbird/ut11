#Область ПрограммныйИнтерфейс

#Область НастройкаСистемы

// Возвращает признак использования учета прослеживаемых, импортных товаров на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, на которую нужно получить значение возможности использования учета прослеживаемых, импортных
//					товаров.
//
// Возвращаемое значение:
//	Булево - Истина означает, что доступна возможность учета прослеживаемых, импортных товаров.
//
Функция ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата) Экспорт
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = Ложь;
	//++ Локализация
	ДатаПроверкиФО = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров")
		И НачалоМесяца(ДатаПроверкиФО) >= ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров() Тогда
		
		ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = Истина;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат ИспользоватьУчетПрослеживаемыхИмпортныхТоваров;
	
КонецФункции

// Возвращает значение даты начала использования учета прослеживаемых, импортных товаров.
//
// Возвращаемое значение:
//	Дата - дата начала использования учета прослеживаемых, импортных товаров.
//
Функция ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров() Экспорт
	
	ДатаНачалаУчета = Дата(2399, 1, 1);
	//++ Локализация
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров") Тогда
		ДатаНачалаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров.Получить());
	КонецЕсли;
	//-- Локализация
	
	Возврат ДатаНачалаУчета;
	
КонецФункции

// Вычисляет значение константы ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД.
// Значение Истина будет установлено в том случае, если существует номенклатурная позиция, в которой
// единица измерения и единица измерения ТНВЭД заполнены и не равны друг другу.
//
Процедура УстановитьФОИспользуетсяУчетВЕдиницеИзмеренияТНВЭД() Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьРазницаЕдиниц
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ЕдиницаИзмеренияТНВЭД <> Номенклатура.ЕдиницаИзмерения
	|	И Номенклатура.ЕдиницаИзмеренияТНВЭД <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	НовоеЗначение = Не Результат.Пустой();

	Если НовоеЗначение <> Константы.ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД.Получить() Тогда
		Константы.ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД.Установить(НовоеЗначение);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
	
КонецПроцедуры

// Процедура - Установить использование учета в единице измерения ТНВЭДПо номенклатуре
//  Устанавливает значение константы ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД по реквизитам элемента номенклатуры.
//  Значение Истина будет установлено в том случае, если у номенклатурной позиции единица измерения
//  и единица измерения ТНВЭД заполнены и не равны друг другу.
//  Анализируется только необходимость установки константы. Необходимости выключения константы нет, потому что
//  номенклатура с ТНВЭД может быть использована в документах и функциональность должна использоваться.
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура - элемент, вызвавший событие. 
//
Процедура УстановитьИспользованиеУчетаВЕдиницеИзмеренияТНВЭДПоНоменклатуре(Номенклатура) Экспорт

	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров.Получить() = Истина
		И Не Номенклатура.ЭтоГруппа
		И Не Номенклатура.ЕдиницаИзмеренияТНВЭД.Пустая()
		И Номенклатура.ЕдиницаИзмеренияТНВЭД <> Номенклатура.ЕдиницаИзмерения
		И Константы.ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД.Получить() <> Истина Тогда
		Константы.ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД.Установить(Истина);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
	
КонецПроцедуры

// Возвращает признак использования учета товаров в единице измерения ТН ВЭД.
//
// Возвращаемое значение:
//	Булево - Истина означает, используется учет товаров в единице измерения ТН ВЭД.
//
Функция ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД() Экспорт
	
	ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД = Ложь;
	//++ Локализация
	ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД = ПолучитьФункциональнуюОпцию("ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД");
	//-- Локализация
	
	Возврат ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД;
	
КонецФункции

#КонецОбласти

#Область ПодключениеКБСП

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании
//
// Параметры:
//	Объекты - Массив из ОбъектМетаданных - коллекция объектов метаданных с командами создания на основании.
//
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	//++ Локализация
	Объекты.Добавить(Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров);
	//-- Локализация
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов
//
// Параметры:
//	Объекты - Массив из ОбъектМетаданных - коллекция объектов метаданных с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	//++ Локализация
	Объекты.Добавить(Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров);
	//-- Локализация
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	//++ Локализация
	Списки.Вставить(Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ПрослеживаемостьУведомления, Истина);

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыКомплектации

// Возвращает параметры проверки комплекта товаров.
//
// Возвращаемое значение:
//	Структура - параметры проверки комплекта, содержащие следующие свойства:
//		* Дата - Дата - дата объекта, на которую осуществляется работа с комплектом.
//		* СборкаКомплекта - Булево - признак того, что осуществляется сборка комплекта. Значение по умолчанию Истина.
//		* Номенклатура - СправочникСсылка.Номенклатура,
//							Неопределено - номенклатура комплекта. Значение по умолчанию Неопределено.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры,
//							Неопределено - характеристика комплекта. Значение по умолчанию Неопределено.
//		* НоменклатураОсновногоКомпонента -СправочникСсылка.Номенклатура,
//											Неопределено - номенклатура основного компонента.
//											Значение по умолчанию Неопределено.
//		* ХарактеристикаОсновногоКомпонента - СправочникСсылка.ХарактеристикиНоменклатуры,
//												Неопределено - характеристика основного компонента.
//																Значение по умолчанию Неопределено.
//		* ИмяТЧ - Строка - имя табличной части объекта.
//		* Контролировать - Булево - признак того, что требуется проверить комплект.
//		* ВариантПредставленияНабораВПечатныхФормахВШапке - Булево - признак того, что поле присутствует в объекте.
//																	Иначе требуется извлечь из поля ВариантКомплектации.
//
Функция ПараметрыПроверкиКорректностиКомплекта() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Дата",				Дата(1, 1, 1));
	ПараметрыПроверки.Вставить("СборкаКомплекта",	Истина);
	
	ПараметрыПроверки.Вставить("Номенклатура");
	ПараметрыПроверки.Вставить("Характеристика");
	
	ПараметрыПроверки.Вставить("НоменклатураОсновногоКомпонента");
	ПараметрыПроверки.Вставить("ХарактеристикаОсновногоКомпонента");
	
	ПараметрыПроверки.Вставить("ИмяТЧ", "Товары");
	
	ПараметрыПроверки.Вставить("Контролировать", Истина);
	
	ПараметрыПроверки.Вставить("ВариантПредставленияНабораВПечатныхФормахВШапке", Истина);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Возвращает параметры проверки номеров ГТД.
//
// Возвращаемое значение:
//	Структура - параметры проверки комплекта, содержащие следующие свойства:
//		* ИмяТЧ - Строка - Имя ТЧ документа, которая содержки колонки АналитикаУчетаНоменклатуры и НомерГТД.
Функция ПараметрыПроверкиПрослеживаемыхНомеровГТД() Экспорт
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ", "ВидыЗапасов");
	Возврат ПараметрыПроверки;
КонецФункции

// Выполняет проверку корректности содержимого комплекта в части учета прослеживаемых товаров по РНПТ.
//
// Параметры:
//	Объект - СправочникОбъект, ДокументОбъект - объект, для которого выполняется проверка.
//	Отказ - Булево - признак продолжения дальнейшей обработки проверяемого объекта в информационной базе.
//	ПараметрыПроверки - см. ПараметрыПроверкиКорректностиКомплекта.
//
Процедура ПроверитьКорректностьКомплекта(Объект, Отказ, ПараметрыПроверки) Экспорт
	
	//++ Локализация
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиКорректностиКомплекта();
	КонецЕсли;
	
	Если Не ПараметрыПроверки.Контролировать Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОбъекта = ПараметрыПроверки.Дата;
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта	= Объект[ПараметрыПроверки.ИмяТЧ]; // ТабличнаяЧасть
	Комплектующие			= ТабличнаяЧастьОбъекта.Выгрузить();
	РедактированиеНабора	= Комплектующие.Колонки.Найти("Отменено") <> Неопределено;
	
	Если РедактированиеНабора Тогда
		ПараметрыОтбора	= Новый Структура("Отменено", Ложь);
		Комплектующие	= Объект[ПараметрыПроверки.ИмяТЧ].Выгрузить(ПараметрыОтбора);
	КонецЕсли;
	
	Если Комплектующие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СборкаКомплекта = ПараметрыПроверки.СборкаКомплекта;
	
	Номенклатура	= ПараметрыПроверки.Номенклатура;
	Характеристика	= ПараметрыПроверки.Характеристика;
	
	НоменклатураОсновногоКомпонента		= ПараметрыПроверки.НоменклатураОсновногоКомпонента;
	ХарактеристикаОсновногоКомпонента	= ПараметрыПроверки.ХарактеристикаОсновногоКомпонента;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Комплектующие",						Комплектующие);
	Запрос.УстановитьПараметр("СборкаКомплекта",					СборкаКомплекта);
	Запрос.УстановитьПараметр("НоменклатураКомплект",				Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаКомплект",				Характеристика);
	Запрос.УстановитьПараметр("НоменклатураОсновногоКомпонента",	НоменклатураОсновногоКомпонента);
	Запрос.УстановитьПараметр("ХарактеристикаОсновногоКомпонента",	ХарактеристикаОсновногоКомпонента);
	Если ПараметрыПроверки.ВариантПредставленияНабораВПечатныхФормахВШапке Тогда
		Запрос.УстановитьПараметр("ВариантПредставленияНабора", Объект.ВариантПредставленияНабораВПечатныхФормах);
	Иначе
		ВариантПредставленияНабораВПечатныхФормах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВариантКомплектации, "ВариантПредставленияНабораВПечатныхФормах");
		Запрос.УстановитьПараметр("ВариантПредставленияНабора", ВариантПредставленияНабораВПечатныхФормах);
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(ТекстЗапросаВТДанныеКомплекта());
	ТекстыЗапросов.Добавить(ТекстЗапросаВТКомплектующие());
	ТекстыЗапросов.Добавить(ТекстЗапросаВТПрослеживаемыеКомплектующие());
	ТекстыЗапросов.Добавить(ТекстЗапросаВТПрослеживаемыеКомплектующиеСгруппированная());
	ТекстыЗапросов.Добавить(ТекстЗапросаПроверокКомплекта());
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ДанныеКомплекта = РезультатЗапроса[0].Выбрать();
	ДанныеКомплекта.Следующий();
	
	ОшибкиПроверки		= РезультатЗапроса[4].Выбрать();
	ЕстьОшибкиПроверки	= Ложь;
	КлючДанных			= ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Если ОшибкиПроверки.Следующий() Тогда
		
		ТекстСообщения = "";
		
		Если ОшибкиПроверки.ПрослеживаемыеКомплектующиеВКомплектеТолькоНабор Тогда
			
			ПрослеживаемыеКомплектующие	= РезультатЗапроса[2].Выгрузить();
			ПредставлениеКомплектующих	= ПредставлениеПрослеживаемыхКомплектующих(ПрослеживаемыеКомплектующие);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияПрослеживаемыеКомплектующиеВКомплектеТолькоНабор(ДанныеКомплекта.ТипНоменклатуры),
										Номенклатура,
										ПредставлениеКомплектующих);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ЕстьОшибкиПроверки = Истина;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "", "", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибкиПроверки Тогда
		Возврат;
	КонецЕсли;
	
	ПрослеживаемыеКомплектующие = РезультатЗапроса[3].Выгрузить();
	
	Если Не СборкаКомплекта
		И ДанныеКомплекта.ПрослеживаемыйТовар Тогда
		
		ЕстьОшибкиПроверки = Истина;
		
		Если Не ПрослеживаемыеКомплектующие.Количество() Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНепрослеживаемыеКомплектующие(), Номенклатура);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "", "", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиПроверки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомплекта.ОшибкаВеденияУчетаПоГТД Тогда
		ШаблонСообщения	= ШаблонСообщенияКорректностиНастроекПрослеживаемостиНоменклатуры(ДанныеКомплекта.ТипНоменклатуры,
																							Истина);
		ТекстСообщения	= СтрШаблон(ШаблонСообщения, Номенклатура);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "", "", Отказ);
	КонецЕсли;
	
	Если Не СборкаКомплекта Тогда
		ОтборСтрок		= Новый Структура("ОшибкаВеденияУчетаПоГТД", Истина);
		СтрокиСОшибками	= ПрослеживаемыеКомплектующие.НайтиСтроки(ОтборСтрок);
		
		Для Каждого СтрокаОшибки Из СтрокиСОшибками Цикл
			ШаблонСообщения	= ШаблонСообщенияКорректностиНастроекПрослеживаемостиНоменклатуры(Перечисления.ТипыНоменклатуры.Товар);
			ТекстСообщения	= СтрШаблон(ШаблонСообщения, СтрокаОшибки.Номенклатура);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "", "", Отказ);
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Выполняет проверку корректности типа номера ГТД и наличия флага ПрослеживаемыйТовар у номенклатурной позиции.
//
// Параметры:
//	Объект - ДокументОбъект - объект, для которого выполняется проверка.
//	Отказ - Булево - признак продолжения дальнейшей обработки проверяемого объекта в информационной базе.
//	ПараметрыПроверки - см. ПараметрыПроверкиПрослеживаемыхНомеровГТД.
Процедура ПроверитьКорректностьПрослеживаемыхНомеровГТД(Объект, Отказ, ПараметрыПроверки) Экспорт
	//++ Локализация
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиПрослеживаемыхНомеровГТД();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта = Объект[ПараметрыПроверки.ИмяТЧ]; // ТабличнаяЧасть
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.АналитикаУчетаНоменклатуры КАК Справочник.КлючиАналитикиУчетаНоменклатуры) КАК АналитикаУчетаНоменклатуры,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	НЕ ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар
	|	И ТаблицаДокумента.НомерГТД.ТипНомераГТД В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
	|)
	|";
	
	ИменаКолонок = "АналитикаУчетаНоменклатуры, НомерГТД";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТабличнаяЧастьОбъекта.Выгрузить(, ИменаКолонок));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	Пока Выборка.Следующий() Цикл
		ШаблонСообщения	= ШаблонСообщенияКорректностиСоответствияТипаНомераГТДИНастроекНоменклатуры();
		ТекстСообщения	= СтрШаблон(ШаблонСообщения, Выборка.Номенклатура, СокрЛП(Выборка.НомерГТД));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, "", "", Отказ);
	КонецЦикла;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
 
 	//++ Локализация

		
	//-- Локализация
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	//++ Локализация	


	//-- Локализация	
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам прослеживаемых товаров.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	//++ Локализация		


	//-- Локализация
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
		
	//++ Локализация


	//-- Локализация
	
	
КонецПроцедуры

// Функция возвращает текст временной таблицы для определения наличия записей регистратора в расширенном 
// регистре прослеживаемости.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаВтЕстьДвиженияПоРасширенномуРегиструПрослеживаемости(Запрос, ТекстыЗапроса) Экспорт
	
	ТекстЗапроса = "";
	
	//++ Локализация


	//-- Локализация
			
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция проверяет необходимость обновления движений расширенного регистра прослеживаемости
//
// Параметры:
//  Таблицы - См. ПроведениеДокументов.ДанныеДокументаДляПроведения
//
// Возвращаемое значение:
//	Булево
//
Функция НеОбновлятьДвиженияРасширенногоРегистра(Таблицы) Экспорт
	
	НеОбновлятьДвиженияРасширенногоРегистра = Истина;
	
	//++ Локализация


	//-- Локализация
		
	Возврат НеОбновлятьДвиженияРасширенногоРегистра;
			
КонецФункции

#КонецОбласти

// Дополняет параметры проверки заполнения в таблице поля 'КоличествоПоРНПТ'.
//
// Параметры:
//	ПараметрыПроверки - Структура - коллекция параметров проверки.
//
Процедура ДополнитьПараметрыПроверкиЗаполненияКоличестваПоРНПТ(ПараметрыПроверки) Экспорт
	
	//++ Локализация
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицы",		"Объект");
	ПараметрыПроверки.Вставить("ИмяПоляДата",				"Дата");
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИмяКолонкиНоменклатура",	"Номенклатура");
	ПараметрыПроверки.Вставить("СписокСтрок",				Неопределено);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	ПараметрыПроверки.Вставить("ПроверкаПересортицыТоваров", Ложь);
	//-- Локализация
	
КонецПроцедуры

// Проверяет заполнение в таблице поля 'КоличествоПоРНПТ'.
//
// Параметры:
//	Объект - ДокументОбъект, Структура, ФормаКлиентскогоПриложения - объект, в табличной части которого выполняется проверка и который содержит:
//		* Ссылка - ДокументСсылка - ссылка на документ информационной базы.
//	Отказ - Булево - Истина, признак того, что в табличной части объекта не заполнено проверяемое поле.
//	ПараметрыПроверки - Структура, Неопределено - параметры проверки.
//
Процедура ПроверитьЗаполнениеКоличестваПоРНПТ(Объект, Отказ, ПараметрыПроверки) Экспорт
	
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = Новый Структура;
		
		ДополнитьПараметрыПроверкиЗаполненияКоличестваПоРНПТ(ПараметрыПроверки);
	КонецЕсли;
	
	ДатаОбъекта = ТекущаяДатаСеанса();
	ИмяПоляДата = ПараметрыПроверки.ИмяПоляДата;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяПоляДата) Тогда
		ДатаОбъекта = Объект[ИмяПоляДата];
	КонецЕсли;
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ОтборСтрокДляПроверки = ПараметрыПроверки.СписокСтрок;
	
	Если ОтборСтрокДляПроверки = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
		
	КонецЕсли;
	
	Если Не ПараметрыПроверки.ПроверкаПересортицыТоваров Тогда
		
		ИмяКолонкиНоменклатура = ПараметрыПроверки.ИмяКолонкиНоменклатура;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаТоваров.КоличествоПоРНПТ КАК КоличествоПоРНПТ
		|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.КоличествоПоРНПТ = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки
		|ИЗ
		|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
		|			И ТаблицаНоменклатуры.ТипНоменклатуры В(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),
		|													ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	
		|ГДЕ
		|	ТаблицаНоменклатуры.ПрослеживаемыйТовар
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Номенклатура", "ТаблицаТоваров." + ИмяКолонкиНоменклатура);
		
		ВыгружаемыеКолонки = "НомерСтроки, КоличествоПоРНПТ, " + ИмяКолонкиНоменклатура;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки					КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура					КАК Номенклатура,
		|	ТаблицаТоваров.НоменклатураОприходование	КАК НоменклатураОприходование,
		|	ТаблицаТоваров.КоличествоПоРНПТ				КАК КоличествоПоРНПТ
		|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|
		|ГДЕ
		|	ТаблицаТоваров.КоличествоПоРНПТ = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	НоменклатураОприходование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки
		|ИЗ
		|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатурыСписания
		|		ПО ТаблицаТоваров.Номенклатура = ДанныеНоменклатурыСписания.Ссылка
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатурыОприходование
		|		ПО ТаблицаТоваров.НоменклатураОприходование = ДанныеНоменклатурыОприходование.Ссылка
		|
		|ГДЕ
		|	ДанныеНоменклатурыОприходование.ПрослеживаемыйТовар
		|	И (НЕ ДанныеНоменклатурыСписания.ПрослеживаемыйТовар
		|		ИЛИ (ДанныеНоменклатурыСписания.ПрослеживаемыйТовар
		|			И ДанныеНоменклатурыСписания.ЕдиницаИзмеренияТНВЭД <> ДанныеНоменклатурыОприходование.ЕдиницаИзмеренияТНВЭД))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		ВыгружаемыеКолонки = "НомерСтроки, Номенклатура, НоменклатураОприходование, КоличествоПоРНПТ";
		
	КонецЕсли;
	
	ТаблицаТоваров = Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, ВыгружаемыеКолонки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОшибкаЗаполненияКоличестваПоРНПТ = НСтр("ru='Не заполнена колонка ""Количество по РНПТ"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ		= ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
								Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
							МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
							ПараметрыПроверки.ПредставлениеТЧ);
	КлючДанных			= ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	ПутьКДаннымТаблицы	= ПараметрыПроверки.ПутьКДаннымТаблицы;
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрЗаменить(ОшибкаЗаполненияКоличестваПоРНПТ, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КоличествоПоРНПТ");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДаннымТаблицы, Отказ);
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Возвращает параметры, используемые при установке условного оформления поля количества по РНПТ.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при установке условного оформления поля количества по РНПТ, со следующими свойствами:
//		* ИмяПоляВводаКоличествоПоРНПТ - Строка - имя поля количества по РНПТ.
//		* ИмяПоляЕдиницаИзмеренияТНВЭД - Строка - имя поля единица измерения ТН ВЭД.
//		* ПутьКПолюВедетсяУчетПоРНПТ - Строка - путь к значению поля, хранящему сведения о ведении учета по РНПТ.
//		* ПутьКПолюТипНомераГТД - Строка - путь к значению поля, хранящему сведения о типе номера ГТД.
//		* ПутьКПолюТипНоменклатуры - Строка - путь к значению поля, хранящему сведения о типе номенклатуры.
//		* ПутьКПолюДатаДокумента - Строка - путь к значению поля, хранящему сведения о дате объекта.
//		* ПутьКПолюПризнакаКорректировкиПУиПА - Строка - путь к значению поля, хранящему сведения об использовании документа корректировки приобретения услуг и прочих активов.
//
Функция ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ() Экспорт
	
	ПараметрыУсловногоОформления = Новый Структура;
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаКоличествоПоРНПТ",	"ТоварыКоличествоПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляЕдиницаИзмеренияТНВЭД",	"ТоварыНоменклатураЕдиницаИзмеренияТНВЭД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоРНПТ",		"Объект.Товары.ВедетсяУчетПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюТипНомераГТД",			"Объект.Товары.ТипНомераГТД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюТипНоменклатуры",		"Объект.Товары.ТипНоменклатуры");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюДатаДокумента",			"Объект.Дата");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюПризнакаКорректировкиПУиПА","");
	
	Возврат ПараметрыУсловногоОформления;
	
КонецФункции

// Устанавливаем условное оформление количества по РНПТ
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//		* УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление компановки данных элементов формы.
//	ПараметрыУсловногоОформления - см. ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ
//
Процедура УстановитьУсловноеОформлениеКоличестваПоРНПТ(Форма, ПараметрыУсловногоОформления = Неопределено) Экспорт
	
	Если ПараметрыУсловногоОформления = Неопределено Тогда
		ПараметрыУсловногоОформления = ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ();
	КонецЕсли;
	
	ИмяПоляВводаКоличествоПоРНПТ	= ПараметрыУсловногоОформления.ИмяПоляВводаКоличествоПоРНПТ;
	ПутьКПолюТипНоменклатуры		= ПараметрыУсловногоОформления.ПутьКПолюТипНоменклатуры;
	ДатаНачалаПрослеживаемости		= ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
	ЭлементыФормы		= Форма.Элементы;
	УсловноеОформление	= Форма.УсловноеОформление;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаКоличествоПоРНПТ].Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<товар не прослеживается>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаКоличествоПоРНПТ].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюТипНомераГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта;
	
	Если ЗначениеЗаполнено(ПараметрыУсловногоОформления.ПутьКПолюПризнакаКорректировкиПУиПА) Тогда
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюПризнакаКорректировкиПУиПА);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<прослеживаемый комплект>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь); 
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмеренияТНВЭД].Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюТипНомераГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ТипыНоменклатуры = Новый СписокЗначений;
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыНоменклатуры;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Возвращает параметры, используемые при установке условного оформления поля номера ГТД.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при установке условного оформления поля номера ГТД, со следующими свойствами:
//		* ПутьКПолюДатаДокумента - Строка - путь к значению поля, хранящему сведения о дате документа.
//		* ИмяПоляВводаНомераГТД - Строка - имя поля номера ГТД.
//		* ИмяПоляВводаСтранаПроисхождения - Строка - имя поля страны происхождения.
//		* ПутьКПолюНомерГТД - Строка - путь к значению поля, хранящему сведения о номере ГТД.
//		* ПутьКПолюВедетсяУчетПоРНПТ - Строка - путь к значению поля, хранящему сведения о ведении учета по РНПТ.
//		* ПутьКПолюТипНоменклатуры - Строка - путь к значению поля, хранящему сведения о типе номенклатуры.
//
Функция ПараметрыУстановкиУсловногоОформленияНомераГТД() Экспорт
	
	ПараметрыУсловногоОформления = Новый Структура;
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюДатаДокумента",				"Объект.Дата");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаНомераГТД",				"ТоварыНомерГТД");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаСтранаПроисхождения",	"");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюНомерГТД",					"Объект.Товары.НомерГТД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоРНПТ",			"Объект.Товары.ВедетсяУчетПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюТипНоменклатуры",			"Объект.Товары.ТипНоменклатуры");
	
	Возврат ПараметрыУсловногоОформления;
	
КонецФункции

// Устанавливаем условное оформление номеров ГТД
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//		* УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление компановки данных элементов формы.
//	ПараметрыУсловногоОформления - см. ПараметрыУстановкиУсловногоОформленияНомераГТД.
//
Процедура УстановитьУсловноеОформлениеНомераГТД(Форма, ПараметрыУсловногоОформления = Неопределено) Экспорт
	
	Если ПараметрыУсловногоОформления = Неопределено Тогда
		ПараметрыУсловногоОформления = ПараметрыУстановкиУсловногоОформленияНомераГТД();
	КонецЕсли;
	
	ПутьКПолюДатаДокумента			= ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента;
	ИмяПоляВводаНомераГТД			= ПараметрыУсловногоОформления.ИмяПоляВводаНомераГТД;
	ИмяПоляВводаСтранаПроисхождения	= ПараметрыУсловногоОформления.ИмяПоляВводаСтранаПроисхождения;
	ПутьКПолюВедетсяУчетПоРНПТ		= ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ;
	ПутьКПолюНомерГТД				= ПараметрыУсловногоОформления.ПутьКПолюНомерГТД;
	ПутьКПолюТипНоменклатуры		= ПараметрыУсловногоОформления.ПутьКПолюТипНоменклатуры;
	
	ДатаНачалаПрослеживаемости = ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНомераГТД].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюНомерГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНомераГТД].Имя);
	
	Если Не ПустаяСтрока(ИмяПоляВводаСтранаПроисхождения) Тогда
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтранаПроисхождения].Имя);
	КонецЕсли;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ТипыНоменклатуры = Новый СписокЗначений;
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыНоменклатуры;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<РНПТ не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает видимость колонки 'КоличествоПоРНПТ' в соответствующей таблице документа.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//	ДатаДокумента - Дата - дата документа, необходимая для проверки возможности использования учета прослеживаемых,
//							импортных товаров.
//	ЭлементГруппаРНТП - Строка - имя соответствующего элемента формы.
//
//	ИспользуетсяДляТоваровВСоставеОС - Булево - признак использования в функционале по Учету РНПТ в ОС.
//
Процедура УстановитьВидимостьКоличестваРНПТ(Форма,
											ДатаДокумента,
											ЭлементГруппаРНТП = "ТоварыГруппаКоличествоПоРНПТ",
											ИспользуетсяДляТоваровВСоставеОС = Ложь) Экспорт
	
	ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД = Ложь;
	//++ Локализация
	ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД = ПолучитьФункциональнуюОпцию("ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД");
	//-- Локализация
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Форма.Элементы[ЭлементГруппаРНТП].Видимость = (ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД ИЛИ ИспользуетсяДляТоваровВСоставеОС)
													И ИспользоватьУчетПрослеживаемыхИмпортныхТоваров;
	
КонецПроцедуры

// Устанавливает условное оформление для колонок 'НомерГТД', 'СтранаПроисхождения' в соответствующей таблице документа.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//
Процедура УстановитьУсловноеОформлениеВДокументеПриобретениеТоваровУслуг(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	#Область ДоступностьГТД
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ХозяйственныеОперацииЗакупкиВСтранахЕАЭС = Новый СписокЗначений;
	ХозяйственныеОперацииЗакупкиВСтранахЕАЭС.ЗагрузитьЗначения(ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС));	
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ХозяйственныеОперацииЗакупкиВСтранахЕАЭС;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

// Устанавливаем условное оформление номеров ГТД
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//		* УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление компановки данных элементов формы.
//	ИмяПоляВводаНомераГТД - Строка - 
//	ИмяПоляВводаКоличествоПоРНПТ - Строка -
//	ИмяПоляВводаЕдиницаИзмеренияТНВЭД - Строка -  
//
Процедура УстановитьУсловноеОформлениеВДокументеВводОстатковТоваров(Форма,
	ИмяПоляВводаНомераГТД,
	ИмяПоляВводаКоличествоПоРНПТ,
	ИмяПоляВводаЕдиницаИзмеренияТНВЭД) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляВводаНомераГТД].Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляВводаКоличествоПоРНПТ].Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляВводаЕдиницаИзмеренияТНВЭД].Имя);
	
	ГруппаИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Очистить данные о номере ГТД по прослеживаемым товарам.
//
// Параметры:
//	Объект - ДокументОбъект - объект, в табличной части которого выполняется очистка данных.
//
Процедура ОчиститьНомерГТДУПрослеживаемыхТоваровВДокументеПриобретениеТоваровУслуг(Объект) Экспорт
	
	//++ Локализация
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Объект.Дата)
		Или ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС).Найти(Объект.ХозяйственнаяОперация) = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки		КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТовары.НомерГТД			КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары	
	|
	|ГДЕ
	|	НЕ (ТаблицаТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))
	|	И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)";
	
	ВыгружаемыеКолонки = "НомерСтроки, Номенклатура, НомерГТД";
	
	Запрос.УстановитьПараметр("ТаблицаТовары",	Объект.Товары.Выгрузить(, ВыгружаемыеКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Товары[Выборка.НомерСтроки - 1].НомерГТД			= Неопределено;
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Устанавливает видимость колонки 'КоличествоПоРНПТ' в соответствующей таблице документа.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - форма клиентского приложения.
//	ЭтоОтчетКомиссионера - Булево - признак типа документа.
//
Процедура УстановитьУсловноеОформлениеУчетаПоГТДВДокументахКомиссионера(Форма, ЭтоОтчетКомиссионера = Истина) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	ОперацииПоКомиссии = Новый СписокЗначений;
	ОперацииПоКомиссии.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	
	#Область ВидимостьГТДиРНПТ
	
	// Настройки получаются из соглашения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Если Элементы.Найти("ТоварыКоличествоПоРНПТ") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПоРНПТ.Имя);
	КонецЕсли;
	
	Если Элементы.Найти("ТоварыНоменклатураЕдиницаИзмеренияТНВЭД") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмеренияТНВЭД.Имя);
	КонецЕсли;
	
	Если Элементы.Найти("ТоварыНомерГТД") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);
	КонецЕсли;
	
	Если Элементы.Найти("ТоварыНомерГТДСтранаПроисхождения") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);
	КонецЕсли;
	
	ГруппаИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КомиссионерНеВедетУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если Не ЭтоОтчетКомиссионера Тогда
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = ОперацииПоКомиссии;
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область ДоступностьГТД
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Если Элементы.Найти("ТоварыНомерГТД") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);
	КонецЕсли;
	
	Если Элементы.Найти("ТоварыНомерГТДСтранаПроисхождения") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если Не ЭтоОтчетКомиссионера Тогда
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = ОперацииПоКомиссии;
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Если Элементы.Найти("ТоварыНомерГТД") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);
	КонецЕсли;
	
	Если Элементы.Найти("ТоварыНомерГТДСтранаПроисхождения") <> Неопределено Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Если Не ЭтоОтчетКомиссионера Тогда
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = ОперацииПоКомиссии;
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не ведется учет по РНПТ>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

// Устанавливает условное оформление данных учета по ГТД в документе.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//
Процедура УстановитьУсловноеОформлениеУчетаПоГТДВОприходованиеИзлишковТоваров(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	ДатаНачалаПрослеживаемости = ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
	ТипыНомеровГТД = Новый СписокЗначений;
	ТипыНомеровГТД.Добавить(Перечисления.ТипыНомеровГТД.НомерРНПТ);
	ТипыНомеровГТД.Добавить(Перечисления.ТипыНомеровГТД.НомерРНПТКомплекта);
	
	// Номер ГТД 
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыНомерГТД"].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Количество по РНПТ
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыКоличествоПоРНПТ"].Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНомераГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыНомеровГТД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<без РНПТ>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыНоменклатураЕдиницаИзмеренияТНВЭД
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыНоменклатураЕдиницаИзмеренияТНВЭД"].Имя);
	
	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНомераГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыНомеровГТД;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Возвращает параметры, используемые при установке условного оформления поля номера ГТД и количества по РНПТ
// в документе пересортицы товаров.
//
// Возвращаемое значение:
//	Структура - параметры, используемые при установке условного оформления поля номера ГТД, со следующими свойствами:
//		* ПутьКПолюДатаДокумента - Строка - путь к значению поля, хранящему сведения о дате документа.
//		* ИмяПоляВводаНомераГТД - Строка - имя поля номера ГТД.
//		* ИмяПоляВводаСтранаПроисхождения - Строка - имя поля страны происхождения.
//		* ИмяПоляВводаКоличествоПоРНПТ - Строка - имя поля количества по РНПТ.
//		* ПутьКПолюВедетсяУчетПоГТД - Строка - путь к значению поля, хранящему сведения о ведении учета по ГТД номенклатуры оприходования.
//		* ПутьКПолюВедетсяУчетПоРНПТ - Строка - путь к значению поля, хранящему сведения о ведении учета по РНПТ номенклатуры оприходования.
//		* ПутьКПолюВедетсяУчетПоГТДСписание - Строка - путь к значению поля, хранящему сведения о ведении учета по ГТД номенклатуры списания.
//		* ПутьКПолюВедетсяУчетПоРНПТСписание - Строка - путь к значению поля, хранящему сведения о ведении учета по РНПТ номенклатуры списания.
//		* ПутьКПолюЕдиницаИзмеренияТНВЭД - Строка - путь к значению поля, хранящему сведения о единице измерения прослеживаемости номекналутры оприходования.
//		* ПутьКПолюЕдиницаИзмеренияТНВЭДСписание - Строка - путь к значению поля, хранящему сведения о единице измерения прослеживаемости номекналутры списания.
//
Функция ПараметрыУсловногоОформленияУчетаГТДВПересортицеТоваров() Экспорт
	
	ПараметрыУсловногоОформления = Новый Структура;
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюДатаДокумента",					"Объект.Дата");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаНомераГТД",					"ТоварыНомерГТД");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаСтранаПроисхождения",		"ТоварыНомерГТДСтранаПроисхождения");
	ПараметрыУсловногоОформления.Вставить("ИмяПоляВводаКоличествоПоРНПТ",			"ТоварыКоличествоПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоГТД",				"Объект.Товары.ВедетсяУчетПоГТД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоРНПТ",				"Объект.Товары.ВедетсяУчетПоРНПТ");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоГТДСписание",		"Объект.Товары.ВедетсяУчетПоГТДСписание");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюВедетсяУчетПоРНПТСписание",		"Объект.Товары.ВедетсяУчетПоРНПТСписание");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюЕдиницаИзмеренияТНВЭД",			"Объект.Товары.ЕдиницаИзмеренияТНВЭД");
	ПараметрыУсловногоОформления.Вставить("ПутьКПолюЕдиницаИзмеренияТНВЭДСписание",	"Объект.Товары.ЕдиницаИзмеренияТНВЭДСписание");
	
	Возврат ПараметрыУсловногоОформления;
	
КонецФункции

// Устанавливаем условное оформление поля номера ГТД и количества по РНПТ в документе пересортицы товаров.
//
// Параметры:
//	Форма - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - содержит данные формы, которая содержит:
//		* Элементы - ВсеЭлементыФормы - элементы формы клиентского приложения.
//		* УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление компановки данных элементов формы.
//	ПараметрыУсловногоОформления - см. ПараметрыУсловногоОформленияУчетаГТДВПересортицеТоваров.
//
Процедура УстановитьУсловноеОформлениеУчетаПоГТДВПересортицеТоваров(Форма, ПараметрыУсловногоОформления = Неопределено) Экспорт
	
	УсловноеОформление	= Форма.УсловноеОформление;
	ЭлементыФормы		= Форма.Элементы;
	
	Если ПараметрыУсловногоОформления = Неопределено Тогда
		ПараметрыУсловногоОформления = ПараметрыУсловногоОформленияУчетаГТДВПересортицеТоваров();
	КонецЕсли;
	
	ИмяПоляВводаНомераГТД				= ПараметрыУсловногоОформления.ИмяПоляВводаНомераГТД;
	ИмяПоляВводаСтранаПроисхождения		= ПараметрыУсловногоОформления.ИмяПоляВводаСтранаПроисхождения;
	ПутьКПолюВедетсяУчетПоРНПТ			= ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ;
	ПутьКПолюВедетсяУчетПоРНПТСписание	= ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТСписание;
	
	ДатаНачалаПрослеживаемости = ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНомераГТД].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтранаПроисхождения].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоГТДСписание);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоГТД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТСписание);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НоменклатураЛокализация.ТекстПоляПоГТД("НеУказывается"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНомераГТД].Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтранаПроисхождения].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТСписание);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюЕдиницаИзмеренияТНВЭД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюЕдиницаИзмеренияТНВЭДСписание);
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ДатаНачалаПрослеживаемости;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",НоменклатураЛокализация.ТекстПоляПоГТД("НеУказывается"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПараметрыУсловногоОформления.ИмяПоляВводаКоличествоПоРНПТ].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТСписание);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюВедетсяУчетПоРНПТ);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюЕдиницаИзмеренияТНВЭД);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыУсловногоОформления.ПутьКПолюЕдиницаИзмеренияТНВЭДСписание);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указывается>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Очистить данные о номере ГТД по прослеживаемым работам.
//
// Параметры:
//	Объект - ДокументОбъект - объект, в табличной части которого выполняется очистка данных.
//	ИмяТЧ - Строка - имя табличной части, в которой выполняется очистка данных.
//
Процедура ОчиститьНомераГТДУПрослеживаемыхРабот(Объект, ИмяТЧ = "Товары") Экспорт
	
	//++ Локализация
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1, 1, 1))
		Или ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Объект.Дата) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура	КАК Номенклатура,
	|	ТаблицаТовары.НомерГТД		КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	СправочникНоменклатура.ПрослеживаемыйТовар
	|	И ТаблицаТовары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ВыгружаемыеКолонки = "НомерСтроки, Номенклатура, НомерГТД";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ИмяТЧ].Выгрузить(, ВыгружаемыеКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Товары[Выборка.НомерСтроки - 1].НомерГТД = Неопределено;
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Очистить данные по импортным товарам.
//
// Параметры:
//	Объект - ДокументОбъект - объект, в табличной части которого выполняется очистка данных.
//	КомиссионерВедетУчетПоРНПТБезСоглашения - Булево - признак того, что учет комиссионных прослеживаемых товаров
//														осуществляется без использования соглашения.
//														Значение по умолчанию Ложь.
//
Процедура ОчиститьДанныеПоИмпортнымТоварамВДокументахКомиссионера(Объект,
																	КомиссионерВедетУчетПоРНПТБезСоглашения = Ложь) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки		КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТовары.КоличествоПоРНПТ	КАК КоличествоПоРНПТ,
	|	ТаблицаТовары.НомерГТД			КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СпрСоглашения
	|		ПО СпрСоглашения.Ссылка = &Соглашение
	|
	|ГДЕ
	|	НЕ ((&КомиссионерВедетУчетПоРНПТБезСоглашения
	|			ИЛИ ЕСТЬNULL(СпрСоглашения.КомиссионерВедетУчетПоРНПТ, ЛОЖЬ))
	|		И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|		И &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров <= &Дата
	|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ))
	|	И НЕ (ТаблицаТовары.КоличествоПоРНПТ = 0
	|		И ТаблицаТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))";
	
	ВыгружаемыеКолонки = "НомерСтроки, Номенклатура, КоличествоПоРНПТ, НомерГТД";
	
	Соглашение = ?(КомиссионерВедетУчетПоРНПТБезСоглашения,
					Неопределено,
					Объект.Соглашение);
	
	Запрос.УстановитьПараметр("ТаблицаТовары",	Объект.Товары.Выгрузить(, ВыгружаемыеКолонки));
	Запрос.УстановитьПараметр("Соглашение",		Соглашение);
	Запрос.УстановитьПараметр("Дата",			Объект.Дата);
	Запрос.УстановитьПараметр("КомиссионерВедетУчетПоРНПТБезСоглашения", КомиссионерВедетУчетПоРНПТБезСоглашения);
	
	УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Товары[Выборка.НомерСтроки - 1].КоличествоПоРНПТ	= 0;
		Объект.Товары[Выборка.НомерСтроки - 1].НомерГТД			= Неопределено;
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Проверяет заполнение в таблице поля 'НомерГТД'.
//
// Параметры:
//	Объект - ДокументОбъект - объект, в табличной части которого выполняется проверка.
//	Отказ - Булево - Истина, признак того, что в табличной части объекта не заполнено проверяемое поле.
//	КомиссионерВедетУчетПоРНПТ - Булево - Истина, признак того, что комиссионер ведет учет по РНПТ.
//
Процедура ПроверитьЗаполнениеНомераГТДВДокументахКомиссионера(Объект, Отказ, КомиссионерВедетУчетПоРНПТ = Истина) Экспорт
	
	//++ Локализация
	Если Не КомиссионерВедетУчетПоРНПТ
		Или Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Объект.Дата)Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
	|
	|ГДЕ
	|	ТаблицаТоваров.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ЕСТЬNULL(ТаблицаНоменклатуры.ПрослеживаемыйТовар, ЛОЖЬ)
	|	И (ТаблицаНоменклатуры.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|		ИЛИ (ТаблицаНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			И ТаблицаНоменклатуры.ПрослеживаемыйТовар))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(, "НомерСтроки, НомерГТД, Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонТекстаОшибки	= НСтр("ru='Не заполнена колонка ""Номер ГТД"" в строке %НомерСтроки% списка ""Товары"".'");
	КлючДанных			= ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения	= СтрЗаменить(ШаблонТекстаОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
		Поле			= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерГТД");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Заполняет КоличествоПоРНПТ в переданной табличной части.
//
// Параметры:
//	ПараметрыПересчета - см. УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ПараметрыПолученияКоэффициентаРНПТ.
//	Товары - ДанныеФормыКоллекция - Таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* МестоХранения - СправочникСсылка.Склады, СправочникСсылка.Партнеры, СправочникСсылка.ДоговорыКонтрагентов, ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.ВозвратТоваровПоставщику, ДокументСсылка.КорректировкаПриобретения - склад, поле требуется если склад указан в табличной части.
//		* Количество - Число - количество товара.
//		* КоличествоПоРНПТ - Число - прослеживаемое количество товара.
//	ЗаполняемыеСтроки - Массив Из ДанныеФормыЭлементКоллекции,
//						Массив Из СтрокаТабличнойчасти - заполняемые строки в табличной части.
//
Процедура ЗаполнитьКоличествоПоРНПТВТабличнойЧасти(ПараметрыПересчета, Товары, ЗаполняемыеСтроки = Неопределено) Экспорт
	
	//++ Локализация
	Организация			= ПараметрыПересчета.Организация;
	Соглашение			= ПараметрыПересчета.Соглашение;
	ИсключаемыйДокумент	= ПараметрыПересчета.ИсключаемыйДокумент;
	
	ТоварыКЗапросуРНПТ = Товары.Выгрузить(ЗаполняемыеСтроки);
	
	ХарактеристикиИспользуются = Истина;
	
	Если ТоварыКЗапросуРНПТ.Колонки.Найти("Характеристика") = Неопределено Тогда
		ХарактеристикиИспользуются = Ложь;
		
		ТоварыКЗапросуРНПТ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПересчета.ИменаПолейССуффиксом) Тогда
		Для Каждого КлючИЗначение Из ПараметрыПересчета.ИменаПолейССуффиксом Цикл
			Если ТоварыКЗапросуРНПТ.Колонки.Найти(КлючИЗначение.Ключ) <> Неопределено
				И ТоварыКЗапросуРНПТ.Колонки.Найти(КлючИЗначение.Значение) <> Неопределено Тогда
				
				ТоварыКЗапросуРНПТ.Колонки.Удалить(КлючИЗначение.Ключ);
				
				ТоварыКЗапросуРНПТ.Колонки[КлючИЗначение.Значение].Имя = КлючИЗначение.Ключ;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПересчета.МестоХраненияВТабличнойЧасти
		И ПараметрыПересчета.ИмяПоляМестоХранения <> "МестоХранения" Тогда
		
		ТоварыКЗапросуРНПТ.Колонки[ПараметрыПересчета.ИмяПоляМестоХранения].Имя = "МестоХранения";
		
	ИначеЕсли Не ПараметрыПересчета.МестоХраненияВТабличнойЧасти Тогда
		ТоварыКЗапросуРНПТ.Колонки.Добавить("МестоХранения", Новый ОписаниеТипов("СправочникСсылка.Склады,
																				|СправочникСсылка.Партнеры,
																				|СправочникСсылка.ДоговорыКонтрагентов,
																				|СправочникСсылка.Организации,
																				|ДокументСсылка.ПриобретениеТоваровУслуг,
																				|ДокументСсылка.ВозвратТоваровПоставщику,
																				|ДокументСсылка.КорректировкаПриобретения"));
		
		ТоварыКЗапросуРНПТ.ЗаполнитьЗначения(ПараметрыПересчета.МестоХранения, "МестоХранения");
	КонецЕсли;
	
	ТаблицаДляОбхода = ?(ЗаполняемыеСтроки = Неопределено, Товары, ЗаполняемыеСтроки);
	Для Каждого ТекущаяСтрока Из ТаблицаДляОбхода Цикл
		ТекущаяСтрока.КоличествоПоРНПТ = 0;
	КонецЦикла;
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ПараметрыПересчета.Дата) Тогда
		
		Коэффициенты = ПолучитьКоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент,
																Организация,
																ТоварыКЗапросуРНПТ,
																Соглашение);
		Коэффициенты.Колонки.МестоХранения.Имя = ПараметрыПересчета.ИмяПоляМестоХранения;
		
		ИменаКолонок = "Номенклатура, НомерГТД";
		
		Если ХарактеристикиИспользуются Тогда
			ИменаКолонок = ИменаКолонок + ", " + "Характеристика";
		КонецЕсли;
		
		Если ПараметрыПересчета.МестоХраненияВТабличнойЧасти Тогда
			ИменаКолонок = ИменаКолонок + ", " + ПараметрыПересчета.ИмяПоляМестоХранения;
		КонецЕсли;
		
		Для Каждого СтрокаКоэффициента Из Коэффициенты Цикл
			СтруктураПоиска = Новый Структура(ИменаКолонок);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКоэффициента);
			
			Если ЗначениеЗаполнено(ПараметрыПересчета.ИменаПолейССуффиксом) Тогда
				Для Каждого КлючИЗначение Из ПараметрыПересчета.ИменаПолейССуффиксом Цикл
					Если СтруктураПоиска.Свойство(КлючИЗначение.Ключ) Тогда
						СтруктураПоиска.Вставить(КлючИЗначение.Значение, СтруктураПоиска[КлючИЗначение.Ключ]);
						СтруктураПоиска.Удалить(КлючИЗначение.Ключ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				ТекущаяСтрока.КоличествоПоРНПТ = ТекущаяСтрока.Количество * СтрокаКоэффициента.Коэффициент;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Очистить КоличествоПоРНПТ.
//
// Параметры:
//	Объект - ДокументОбъект - объект, в табличной части которого выполняется очистка данных.
//
Процедура ОчиститьКоличествоПоРНПТВОприходованииИзлишковТоваров(Объект) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить(, "НомерСтроки, Номенклатура, НомерГТД"));
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|		ИЛИ ТаблицаТовары.НомерГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерГТД)
	|
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект.Товары[Выборка.НомерСтроки - 1].КоличествоПоРНПТ = 0;
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Проверяет наличие прослеживаемого товара в табличной части, и то, что дата документа
// после начала прослеживаемости импортного товара.
//
// Параметры:
//	Товары - ДанныеФормыКоллекция - Таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	ИмяКолонкиНоменклатура - Строка - имя реквизита Номенклатура в табличной части.
//
// Возвращаемое значение:
//	Булево - Истина означает, что документ содержит прослеживаемые товары в табличной части и то, что дата документа
//				больше даты начала учета прослеживаемых импортных товаров.
//
Функция ЭтоПрослеживаемыйДокумент(Товары, ДатаДокумента, ИмяКолонкиНоменклатура = "Номенклатура") Экспорт
	
	Результат = Ложь;
	//++ Локализация
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		СводнаяИнформацияОТоварахРНПТ = СводнаяИнформацияОТоварахРНПТ(Товары, ИмяКолонкиНоменклатура);
		
		Результат = СводнаяИнформацияОТоварахРНПТ.ЕстьТоварРНПТ;
	КонецЕсли;
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Показывает сообщение пользователю, в случае если включен учет прослеживаемых импортных товаров,
// и при этом в таблице товаров имеется прослеживаемая номенклатура, с выключенным учетом по номерам ГТД.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - объект, в табличной части которого выполняется проверка.
//	Товары - ДанныеФормыКоллекция - таблица товаров документа со следующими обязательными полями:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	ИмяТабличнойЧасти - Строка - имя табличной части для подсветки в ней ячейки с ошибкой.
//	ИмяНоменклатурыТабличнойЧасти - Строка - имя реквизита табличной части для подсветки ошибки в нем.
//	ПроверяемыеСтроки - Массив Из Структура, Неопределено - список строк, которые необходимо проверить в таблице.
//
Процедура ПроверитьКорректностьНастроекТоваровРНПТ(Объект,
													Товары,
													ДатаДокумента,
													ИмяТабличнойЧасти = "Товары",
													ИмяНоменклатурыТабличнойЧасти = "Номенклатура",
													ПроверяемыеСтроки = Неопределено) Экспорт
	
	//++ Локализация
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента);
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда
			ТоварыДляЗапроса = Товары.Скопировать(ПроверяемыеСтроки, ИмяНоменклатурыТабличнойЧасти + ", НомерСтроки");
		Иначе
			ТоварыДляЗапроса = Товары.Выгрузить(ПроверяемыеСтроки, ИмяНоменклатурыТабличнойЧасти + ", НомерСтроки");
		КонецЕсли;
		
		ТоварыДляЗапроса.Колонки[ИмяНоменклатурыТабличнойЧасти].Имя = "Номенклатура";
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|		ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|		ЕСТЬNULL(ТаблицаНоменклатуры.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
		|		ЕСТЬNULL(ТаблицаНоменклатуры.ВестиУчетПоГТД, ЛОЖЬ) КАК ВестиУчетПоГТД
		|	ИЗ
		|		ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|			ПО ТаблицаТоваров.Номенклатура = ТаблицаНоменклатуры.Ссылка
		|				И ТаблицаНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|														ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	
		|	) КАК ТаблицаТоваров
		|
		|ГДЕ
		|	ТаблицаТоваров.ПрослеживаемыйТовар
		|	И НЕ ТаблицаТоваров.ВестиУчетПоГТД
		|";
		
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыДляЗапроса);
		
		ШаблонТекстаОшибки = НСтр("ru='Для номенклатуры ""%1"" задан прослеживаемый код ТН ВЭД, но выключен учет по номерам ГТД.
									|Для учета товара как прослеживаемого, требуется взвести флаг учета по номерам ГТД.'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Номенклатура);
			
			ПутьКПолюНоменклатура = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти,
																					Выборка.НомерСтроки,
																					ИмяНоменклатурыТабличнойЧасти);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКПолюНоменклатура);
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Устанавливает параметры запроса, необходимые для определения использования в системе учета прослеживаемых товаров.
//
// Параметры:
//	Запрос - Запрос - запрос, для которого осуществляется установка параметров.
//
Процедура УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос) Экспорт
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьУчет = Ложь;
	//++ Локализация
	ИспользоватьУчет = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров");
	//-- Локализация
	Если Не Запрос.Параметры.Свойство("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров") Тогда
		Запрос.УстановитьПараметр("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров", ИспользоватьУчет);
	КонецЕсли;
	
	Если Не Запрос.Параметры.Свойство("ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров") Тогда
		ДатаНачалаУчета = Дата(2399, 1, 1);
		//++ Локализация
		Если ИспользоватьУчет Тогда
			ДатаНачалаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров.Получить());
		КонецЕсли;
		//-- Локализация
		Запрос.УстановитьПараметр("ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров", ДатаНачалаУчета);
	КонецЕсли;

	//++ Локализация
	Запрос.УстановитьПараметр("ИдентификаторУведомлениеОВвозеПрослеживаемыхТоваров", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УведомлениеОВвозеПрослеживаемыхТоваров")); 
	//-- Локализация
	
КонецПроцедуры

// Возвращает коэффициенты по РНПТ для указанной Организации и списка товаров.
//
// Параметры:
//	ИсключаемыйДокумент - ДокументСсылка - документ, движения которого исключаются при расчета коэффициента по РНПТ.
//	Организация - СправочникСсылка.Организации - организация, для которой рассчитываются коэффициенты по РНПТ.
//	Товары - ТаблицаЗначений - таблица, содержащая сведения о товарах.
//	Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение, для которого рассчитываются коэффициенты по РНПТ.
//	
// Возвращаемое значение:
//	ТаблицаЗначений - содержит следующие колонки:
//		* Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить значение
//															коэффициента по РНПТ.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры, для которой
//																			необходимо получить значение коэффициента
//																			по РНПТ.
//		* МестоХранения - СправочникСсылка.Склады, СправочникСсылка.Партнеры, СправочникСсылка.ДоговорыКонтрагентов, ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.ВозвратТоваровПоставщику, ДокументСсылка.КорректировкаПриобретения -
//											место хранения, где хранится номенклатура, для которой необходимо получить
//											значение коэффициента по РНПТ.
//		* Коэффициент - Число - значение коэффициента по РНПТ.
//
Функция ПолучитьКоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент, Организация, Товары, Соглашение = Неопределено) Экспорт
	
	КлючеваяОперация	= "УчетПрослеживаемыхТоваровЛокализация.ПолучитьКоэффициентыПрослеживаемыхТоваров";
	ОписаниеЗамера		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ВозвращаемоеЗначение = КоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент, Организация, Соглашение, Товары);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВозвращаемоеЗначение.Количество());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет корректность заполнения карточки ГТД прослеживаемыми данными в документе
//
// Параметры:
//	Объект - ДокументОбъект, Структура - объект, в табличной части которого выполняется проверка.
//	Товары - ДанныеФормыКоллекция - таблица документа со следующими обязательными полями:
//		* НомерГТД - СправочникСсылка.НомераГТД - номер ГТД.
//	ДатаДокумента - Дата - дата документа, для проверки использования его в прослеживаемости.
//	ИмяТабличнойЧасти - Строка - имя табличной части для подсветки в ней ячейки с ошибкой.
//	ИмяНомераГТДТабличнойЧасти - Строка - имя реквизита табличной части для подсветки ошибки в нем.
//	ПроверяемыеСтроки - Массив Из Структура, Неопределено - список строк, которые необходимо проверить в таблице.
//
Процедура ПроверитьДанныеПрослеживаемостиНомеровГТД(Объект,
													Товары,
													ДатаДокумента,
													ИмяТабличнойЧасти = "Товары",
													ИмяНомераГТДТабличнойЧасти = "НомерГТД",
													ПроверяемыеСтроки = Неопределено) Экспорт
	
	//++ Локализация
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаДокумента) Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда
		ТоварыДляЗапроса = Товары.Скопировать(ПроверяемыеСтроки, ИмяНомераГТДТабличнойЧасти + ", НомерСтроки");
	Иначе
		ТоварыДляЗапроса = Товары.Выгрузить(ПроверяемыеСтроки, ИмяНомераГТДТабличнойЧасти + ", НомерСтроки");
	КонецЕсли;
	
	ТоварыДляЗапроса.Колонки[ИмяНомераГТДТабличнойЧасти].Имя = "НомерГТД";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.НомерГТД КАК НомерГТД
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК СправочникНомераГТД
	|		ПО ТаблицаТоваров.НомерГТД = СправочникНомераГТД.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД.ПрослеживаемыеКомплектующие КАК КомплектующиеРНПТ
	|		ПО ТаблицаТоваров.НомерГТД = КомплектующиеРНПТ.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И СправочникНомераГТД.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
	|	И (КомплектующиеРНПТ.СуммаПоРНПТ = 0
	|		ИЛИ СправочникНомераГТД.СуммаПоРНПТ = 0)";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыДляЗапроса);
	Результат = Запрос.Выполнить();
	
	Если ИмяТабличнойЧасти = "ВидыЗапасов" Тогда
		
		ТекстОшибки = "";
		Если Не Результат.Пустой() Тогда
			ТекстОшибки = НСтр("ru='Документ содержит номера ГТД, в которых некорректно заполнены стоимостные показатели комплектующих.'");
		КонецЕсли;
		
		// Проверка заполненности Номеров ГТД в таблице Виды запасов расходных накладных, для прослеживаемого товара
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда
			ТоварыДляЗапроса = Товары.Скопировать(ПроверяемыеСтроки, "АналитикаУчетаНоменклатуры," + ИмяНомераГТДТабличнойЧасти);
		Иначе
			ТоварыДляЗапроса = Товары.Выгрузить(ПроверяемыеСтроки, "АналитикаУчетаНоменклатуры," + ИмяНомераГТДТабличнойЧасти);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаТоваров.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаТоваров.НомерГТД КАК НомерГТД
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
		|		ПО ТаблицаТоваров.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО КлючиАналитики.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	СправочникНоменклатура.ПрослеживаемыйТовар
		|	И ТаблицаТоваров.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТоварыДляЗапроса);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС, "");
			ТекстОшибки = ТекстОшибки + НСтр("ru='Документ содержит прослеживаемые товары с неуказанными РНПТ.'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстУточнение = НСтр("ru='Для уточнения информации откройте форму редактирования видов запасов документа.'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстУточнение;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	Иначе
		
		КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
		КлючДанных = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КлючДанных)), Объект, Неопределено);
		
		ШаблонТекстаОшибки = НСтр("ru='Не заполнены стоимостные показатели комплектующих номера ГТД ""%1"" в строке ""%2"" списка ""%3""'");
		ИмяТабличнойЧастиТекст = ?(ИмяТабличнойЧасти = "ТаблицаКорректировки", НСтр("ru = 'Данные корректировки'"), ИмяТабличнойЧасти); 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.НомерГТД, Выборка.НомерСтроки, ИмяТабличнойЧастиТекст);
			
			ПутьКПолю = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти, Выборка.НомерСтроки, ИмяНомераГТДТабличнойЧасти);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, КлючДанных, ПутьКПолю);
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Проверяет корректность заполнения карточки ГТД прослеживаемыми данными
//
// Параметры:
//	НомерГТД - СправочникСсылка.НомераГТД - номер ГТД.
//	
//	Возвращаемое значение:
//	 Число - 0 - ошибок нет, 1 - необходимо проверить стоимостные показатели.
//
Функция ПроверитьДанныеПрослеживаемостиНомераГТД(НомерГТД) Экспорт
	
	Результат = 0;
	
	//++ Локализация
	Если Не ЗначениеЗаполнено(НомерГТД) Или Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ТекущаяДатаСеанса()) Тогда
		Возврат 0
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераГТДПрослеживаемыеКомплектующие.Ссылка
		|ИЗ
		|	Справочник.НомераГТД.ПрослеживаемыеКомплектующие КАК НомераГТДПрослеживаемыеКомплектующие
		|ГДЕ
		|	НомераГТДПрослеживаемыеКомплектующие.Ссылка = &НомерГТД
		|	И НомераГТДПрослеживаемыеКомплектующие.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (НомераГТДПрослеживаемыеКомплектующие.СуммаПоРНПТ = 0
		|	ИЛИ НомераГТДПрослеживаемыеКомплектующие.Ссылка.СуммаПоРНПТ = 0)
		|";
	
	Запрос.УстановитьПараметр("НомерГТД", НомерГТД);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат =  Число(Не РезультатЗапроса.Пустой());
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Возвращает идентификатор объекта метаданных для документа ТаможеннаяДекларацияИмпорт.
//
// Возвращаемое значение:
//	СправочникСсылка.ИдентификаторыОбъектовМетаданных - .
//
Функция ИдентификаторТаможеннаяДекларацияИмпорт() Экспорт
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ТаможеннаяДекларацияИмпорт");
КонецФункции

// Возвращает количество распоряжений к оформлению уведомлений.
// 
// Параметры:
//  ТипыУведомлений - Массив из Тип, Неопределено - перечень типов уведомлений, если Неопределено, то данные получаются по всем типам.
//  Организация - СправочникСсылка.Организации, Неопределено - Организация, по которой нужно получить данные, если передано Неопределено, то по всем организациям.
//
// Возвращаемое значение:
//  Соответствие - Количество распоряжений к оформлению по типу уведомления
//
Функция КоличествоРаспоряженийКОформлениюУведомлений(ТипыУведомлений = Неопределено, Организация = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	//++ Локализация
	Если ТипыУведомлений = Неопределено Тогда
		ТипыУведомлений = Новый Массив;
		ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров"));
		ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров"));
		ТипыУведомлений.Добавить(Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТипыКОбработке = Новый Массив;
	ТекстыЗапросов = Новый Массив;
	Для Каждого ТипУведомления Из ТипыУведомлений Цикл
		
		Если ТипУведомления = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
			ТекстЗапроса = "ВЫБРАТЬ
							|	КОЛИЧЕСТВО(*) КАК Количество
							|ИЗ
							|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
							|		ТоварыКОформлениюДокументовИмпортаОстатки.Организация КАК Организация,
							|		ТоварыКОформлениюДокументовИмпортаОстатки.АналитикаУчетаНоменклатуры.Номенклатура.КодТНВЭД КАК КодТНВЭД,
							|		ТоварыКОформлениюДокументовИмпортаОстатки.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
							|		ТоварыКОформлениюДокументовИмпортаОстатки.ТипДокументаИмпорта КАК ТипДокументаИмпорта,
							|		ТоварыКОформлениюДокументовИмпортаОстатки.ДокументПоступления КАК ДокументПоступления
							|	ИЗ
							|		РегистрНакопления.ТоварыКОформлениюДокументовИмпорта.Остатки(, ТипДокументаИмпорта В (&ТипыДокументаИмпорта)
							|		И (НЕ &ИспользоватьОтборПоОрганизации
							|		ИЛИ &ИспользоватьОтборПоОрганизации
							|		И Организация = &Организация)) КАК ТоварыКОформлениюДокументовИмпортаОстатки
							|	ГДЕ
							|		ТоварыКОформлениюДокументовИмпортаОстатки.КоличествоОстаток > 0) КАК Остатки";
			
			ТекстыЗапросов.Добавить(ТекстЗапроса);
			ТипыКОбработке.Добавить(ТипУведомления);	
		ИначеЕсли ТипУведомления = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
			ТекстЗапроса = "ВЫБРАТЬ
                          |	КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
                          |		ТоварыКОформлениюДокументовИмпортаОстатки.Организация КАК Организация,
                          |		ТоварыКОформлениюДокументовИмпортаОстатки.Номенклатура.КодТНВЭД КАК НоменклатураКодТНВЭД,
                          |		ТоварыКОформлениюДокументовИмпортаОстатки.СопроводительныйДокумент КАК СопроводительныйДокумент
                          |	ИЗ
                          |		РегистрНакопления.ПрослеживаемыеТоварыОтгруженныеВЕАЭС.Остатки(
                          |				,
                          |				НЕ &ИспользоватьОтборПоОрганизации
                          |					ИЛИ &ИспользоватьОтборПоОрганизации
                          |						И Организация = &Организация) КАК ТоварыКОформлениюДокументовИмпортаОстатки
                          |	ГДЕ
                          |		ТоварыКОформлениюДокументовИмпортаОстатки.КоличествоОстаток > 0) КАК Остатки";
			
			ТекстыЗапросов.Добавить(ТекстЗапроса);			
			ТипыКОбработке.Добавить(ТипУведомления);
		ИначеЕсли ТипУведомления = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
			
			Запрос.УстановитьПараметр("КоличествоУведомленийОбОстатках",
				Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров.КоличествоУведомленийКОформлению(Организация));
			
			ТекстЗапроса = "ВЫБРАТЬ
							|&КоличествоУведомленийОбОстатках КАК Количество";
			
			ТекстыЗапросов.Добавить(ТекстЗапроса);
			ТипыКОбработке.Добавить(ТипУведомления);
			
		КонецЕсли;
		
		Результат.Вставить(ТипУведомления, 0);		
		
	КонецЦикла;
	
	Если ТипыКОбработке.Количество() > 0 Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ";");
		
		ТипыДокументаИмпорта = Новый СписокЗначений;
		ТипыДокументаИмпорта.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УведомлениеОВвозеПрослеживаемыхТоваров"));
		Запрос.УстановитьПараметр("ТипыДокументаИмпорта", ТипыДокументаИмпорта);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", ЗначениеЗаполнено(Организация));

		УстановитьПривилегированныйРежим(Истина);
				
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		УстановитьПривилегированныйРежим(Ложь);
			
		Для Каждого ТипКОбработке Из ТипыКОбработке Цикл
			ИндексРезультатаЗапроса = ТипыКОбработке.Найти(ТипКОбработке);
			Если Не ИндексРезультатаЗапроса = Неопределено Тогда
				Результат[ТипКОбработке] = РезультатЗапроса[ИндексРезультатаЗапроса].Выгрузить()[0][0];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Результат;
		
КонецФункции

// Возвращает количество возвратов к оформлению.
//  
// Возвращаемое значение:
//  Число - Количество возвратов к оформлению
//
Функция КоличествоВозвратовКОформлению() Экспорт
	
	КоличествоДокументов = 0;
	
	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.Текст = Обработки.ПанельАдминистрированияУчетПрослеживаемыхТоваров.СформироватьТекстЗапросаТаблицаВозвратыТоваровОтКомиссионеров();
	
	Запрос.УстановитьПараметр("ДатаПрослеживаемости", ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров());
	
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоДокументов = РезультатЗапроса.Выгрузить().Количество();
	
	//-- Локализация
	
	Возврат КоличествоДокументов;
	
КонецФункции

// Возвращает количество отчетов к оформлению.
//  
// Возвращаемое значение:
//  Число - Количество отчетов к оформлению
//
Функция КоличествоОтчетовКОформлению() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПереданные.Организация КАК Организация,
		|	ТоварыПереданные.АналитикаУчетаНоменклатуры.МестоХранения КАК Комиссионер,
		|	ТоварыПереданные.Соглашение КАК Соглашение,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) > 0
		|					И ТоварыПереданные.КоличествоОстаток > 0
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) < ТоварыПереданные.КоличествоОстаток
		|							ТОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0)
		|						ИНАЧЕ ТоварыПереданные.КоличествоОстаток
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоОстаток,
		|	СУММА(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) < 0
		|					И ТоварыПереданные.КоличествоОстаток < 0
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(-ТоварыПереданныеОстатки.КоличествоОстаток, 0) < -ТоварыПереданные.КоличествоОстаток
		|							ТОГДА ЕСТЬNULL(-ТоварыПереданныеОстатки.КоличествоОстаток, 0)
		|						ИНАЧЕ -ТоварыПереданные.КоличествоОстаток
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоВозврат
		|ИЗ
		|	РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
		|			&Граница,
		|			АналитикаУчетаНоменклатуры.МестоХранения <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|				И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)) КАК ТоварыПереданные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
		|				,
		|				АналитикаУчетаНоменклатуры.МестоХранения <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|					И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер)) КАК ТоварыПереданныеОстатки
		|		ПО ТоварыПереданные.Организация = ТоварыПереданныеОстатки.Организация
		|			И ТоварыПереданные.АналитикаУчетаНоменклатуры = ТоварыПереданныеОстатки.АналитикаУчетаНоменклатуры
		|			И ТоварыПереданные.Соглашение = ТоварыПереданныеОстатки.Соглашение
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПереданные.Организация,
		|	ТоварыПереданные.АналитикаУчетаНоменклатуры.МестоХранения,
		|	ТоварыПереданные.Соглашение";
	
	Граница = Новый Граница(КонецДня(ТекущаяДатаСеанса()), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
	
	КоличествоОтчетов = Запрос.Выполнить().Выгрузить().Количество();
	
	Возврат КоличествоОтчетов;
	
КонецФункции

// Заполняет 'РНПТ' в таблице ИмяТЧ.
//
// Параметры:
//	Объект - ДокументОбъект - объект, в табличной части которого заполняются РНПТ
//	ВидыЗапасов - ТаблицаЗначений - содержит следующие колонки:
//		* СтранаПроисхождения - СправочникСсылка.СтраныМира - страна, в разрезе которой 
//											должны быть заполнены РНПТ в ИмяТЧ .
//		* РНПТ - СправочникСсылка.НомераГТД - номера РНПТ для создания/подбора
//	ИмяТЧ - строка - имя ТЧ (Товары/ВидыЗапасов), в которой заполняем реквизит
//	ИмяРеквизита - строка - имя реквизита РНПТ (НомерГТД/РНПТ) для заполнения
//
Процедура ЗаполнитьНомера(Объект, ВидыЗапасов, ИмяТЧ = "Товары", ИмяРеквизита = "НомерГТД") Экспорт
	//++ Локализация
	// Создаем новые номера
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ВидыЗапасов.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВидыЗапасов.НомерГТД КАК РНПТ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ) КАК ТипНомераГТД
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ВидыЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РНПТ,
	|	СтранаПроисхождения,
	|	ТипНомераГТД";
	
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ВидыЗапасов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&РегистрационныйНомер			КАК Код,
	|	&РегистрационныйНомер			КАК РегистрационныйНомер,
	|	ВидыЗапасов.СтранаПроисхождения	КАК СтранаПроисхождения,
	|	ВидыЗапасов.ТипНомераГТД		КАК ТипНомераГТД
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК УказанныеРНПТ
	|		ПО УказанныеРНПТ.Ссылка = ВидыЗапасов.РНПТ
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ПодобранныеРНПТ
	|		ПО ПодобранныеРНПТ.СтранаПроисхождения = ВидыЗапасов.СтранаПроисхождения
	|			И ПодобранныеРНПТ.РегистрационныйНомер = &РегистрационныйНомер
	|			И НЕ ПодобранныеРНПТ.ПометкаУдаления
	|			И ПодобранныеРНПТ.ТипНомераГТД = ВидыЗапасов.ТипНомераГТД
	|
	|ГДЕ
	|	УказанныеРНПТ.Ссылка ЕСТЬ NULL
	|	И ПодобранныеРНПТ.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", Объект.РНПТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НомерГТД, Выборка);
		НомерГТД.Записать();
	КонецЦикла;
	
	// Подбираем номера РНПТ в виды запасов.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.СтранаПроисхождения,
	|	ПодобранныеРНПТ.Ссылка КАК РНПТ
	|ИЗ
	|	ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК УказанныеРНПТ
	|		ПО УказанныеРНПТ.Ссылка = ВидыЗапасов.РНПТ
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ПодобранныеРНПТ
	|		ПО ПодобранныеРНПТ.СтранаПроисхождения = ВидыЗапасов.СтранаПроисхождения
	|			И НЕ ПодобранныеРНПТ.ПометкаУдаления
	|			И ПодобранныеРНПТ.РегистрационныйНомер = &РегистрационныйНомер
	|			И ПодобранныеРНПТ.ТипНомераГТД = ВидыЗапасов.ТипНомераГТД
	|
	|ГДЕ
	|	УказанныеРНПТ.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЗапасов.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// слияние упорядоченных массивов, |Выборки| <= |ВидыЗапасов|
		Для Каждого Стр Из Объект[ИмяТЧ] Цикл
			Если ЗначениеЗаполнено(Стр[ИмяРеквизита]) Или Стр.НомерСтроки < Выборка.НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.РНПТ) Тогда
				ВызватьИсключение НСтр("ru='Обнаружены проблемы в подборе номеров РНПТ.'");
			КонецЕсли;
			
			Стр[ИмяРеквизита] = Выборка.РНПТ;

			Если Не Выборка.Следующий() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Возвращает коллекцию свойств, описывающих уведомления о ввозе товаров, зарегистрированных на основании документа поступления
//
// Параметры:
// 	ПараметрыРегистрации - см. Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииУведомленийОВвозеПрослеживаемыхТоваров
// 
// Возвращаемое значение:
// 	Структура - Структура с ключами:
//		* ПредставлениеРаспоряженияКОформлению - Строка, ФорматированнаяСтрока - описание распоряжений к оформлению на основании документа поступления.
//		* ПредставлениеУведомленияОВвозе - Строка, ФорматированнаяСтрока - описание документов, зарегистрированных на основании документа поступления.
//		* УведомленияОВвозе - Массив - ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров - ссылки на уведомление о ввозе товаров.
//		* УведомлениеОВвозеТребуется - Булево - признак необходимости ввода хотя бы одного документа УведомлениеОВвозеПрослеживаемыхТоваров по основанию
//		* ЕстьПравоИнтерактивногоДобавленияУведомленияОВвозе - Булево - признак наличия права для интерактивного добавления документа по основанию.
Функция УведомленияОВвозеПрослеживаемыхТоваровПоДокументуПоступления(ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеРаспоряженияКОформлению", "");
	Результат.Вставить("ПредставлениеУведомленияОВвозе", "");	
	Результат.Вставить("УведомленияОВвозе",  Новый Массив);
	Результат.Вставить("УведомлениеОВвозеТребуется",  Ложь);
	Результат.Вставить("КоличествоРаспоряженийКОформлению",  0);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияУведомленияОВвозе", Ложь);
	
	//++ Локализация
	
	Если ПараметрыРегистрации.ВвозТоваровИзТаможенногоСоюза
		И ПараметрыРегистрации.ВедетсяУчетПоРНПТ Тогда
	
		ТекстРаспоряженияКОформлению = "";
		НавигационнаяСсылкаРаспоряженияКОформлению = "";
		
		ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров);
		
		ТаблицаРаспоряженийКОформлению = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.РаспоряженияКОформлениюУведомленийОВвозеПоОснованию(ПараметрыРегистрации.Ссылка);	
		КоличествоРаспоряженийКОформлению = ТаблицаРаспоряженийКОформлению.Количество();
		ДокументПоОснованиюТребуется = (КоличествоРаспоряженийКОформлению>0);
	
		Если КоличествоРаспоряженийКОформлению = 1 Тогда
			Если ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
				ТекстРаспоряженияКОформлению = НСтр("ru = 'Оформить уведомление по ПТ'");
				НавигационнаяСсылкаРаспоряженияКОформлению = "ВвестиНовыйУведомлениеОВвозеПрослеживаемыхТоваров";
			Иначе
				ТекстРаспоряженияКОформлению = НСтр("ru = 'Уведомление о ввозе ПТ не оформлено'"); 
			КонецЕсли;
		ИначеЕсли КоличествоРаспоряженийКОформлению > 1 Тогда
			Если ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
				ТекстРаспоряженияКОформлению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Оформить уведомления по ПТ (%1)'"), 
											Строка(КоличествоРаспоряженийКОформлению));
				НавигационнаяСсылкаРаспоряженияКОформлению = "ОткрытьФормированиеУведомленийОВвозеПеремещении";				
			Иначе
				ТекстРаспоряженияКОформлению = НСтр("ru = 'Уведомления о ввозе ПТ не оформлены'"); 
			КонецЕсли;				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НавигационнаяСсылкаРаспоряженияКОформлению) Тогда
			ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Иначе
			ЦветТекста = Неопределено;
		КонецЕсли;

		ПредставлениеРаспоряженияКОформлению = Новый ФорматированнаяСтрока(ТекстРаспоряженияКОформлению, , ЦветТекста, , НавигационнаяСсылкаРаспоряженияКОформлению);
		
		ТекстУведомленияОВвозе = "";
		НавигационнаяСсылкаУведомленияОВвозе = "";
		
		ТаблицаУведомленийОВвозе = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.УведомленияОВвозеПрослеживаемыхТоваровПоОснованию(ПараметрыРегистрации.Ссылка, Истина);
		
		Если ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда		
			Если ТаблицаУведомленийОВвозе.Количество() = 1 Тогда
				УведомлениеОВвозе = ТаблицаУведомленийОВвозе[0];
				ТекстУведомленияОВвозе = Документы.УведомлениеОВвозеПрослеживаемыхТоваров.ПредставлениеУведомленияОВвозеПрослеживаемыхТоваров(
				                         УведомлениеОВвозе.Номер,
				                         УведомлениеОВвозе.Дата,
				                         УведомлениеОВвозе.Проведен);
				НавигационнаяСсылкаУведомленияОВвозе = "ОткрытьУведомлениеОВвозеПрослеживаемыхТоваров";
			ИначеЕсли ТаблицаУведомленийОВвозе.Количество() > 1 Тогда
				ТекстУведомленияОВвозе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                      НСтр("ru = 'Уведомления по ПТ (%1)'"),
				                      Строка(ТаблицаУведомленийОВвозе.Количество()));
				НавигационнаяСсылкаУведомленияОВвозе = "ОткрытьСписокУведомленийОВвозеПрослеживаемыхТоваров";
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НавигационнаяСсылкаУведомленияОВвозе) Тогда
			ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Иначе
			ЦветТекста = Неопределено;
		КонецЕсли;

		ПредставлениеУведомленияОВвозе = Новый ФорматированнаяСтрока(ТекстУведомленияОВвозе, , ЦветТекста, , НавигационнаяСсылкаУведомленияОВвозе);
			
		Результат = Новый Структура;
		Результат.Вставить("ПредставлениеРаспоряженияКОформлению", ПредставлениеРаспоряженияКОформлению);
		Результат.Вставить("ПредставлениеУведомленияОВвозе", ПредставлениеУведомленияОВвозе);	
		Результат.Вставить("УведомленияОВвозе",  ТаблицаУведомленийОВвозе.ВыгрузитьКолонку("Ссылка"));
		Результат.Вставить("УведомлениеОВвозеТребуется",  ДокументПоОснованиюТребуется);
		Результат.Вставить("КоличествоРаспоряженийКОформлению",  КоличествоРаспоряженийКОформлению);
		Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияУведомленияОВвозе", ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию);
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Результат;

КонецФункции

// Возвращает коллекцию свойств, описывающих уведомления о перемещении товаров, зарегистрированных на основании документа реализации
//
// Параметры:
// 	ПараметрыРегистрации - см. Документы.РеализацияТоваровУслуг.ПараметрыРегистрацииУведомленийОПеремещенииПрослеживаемыхТоваров
// 
// Возвращаемое значение:
// 	Структура - Структура с ключами:
//		* ПредставлениеРаспоряженияКОформлению - Строка, ФорматированнаяСтрока - описание распоряжений к оформлению на основании документа реализации.
//		* ПредставлениеУведомленияОПеремещении - Строка, ФорматированнаяСтрока - описание документов, зарегистрированных на основании документа реализации.
//		* УведомленияОПеремещении - Массив - ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров - ссылки на уведомление о перемещении товаров.
//		* УведомлениеОПеремещенииТребуется - Булево - признак необходимости ввода хотя бы одного документа УведомлениеОПеремещенииПрослеживаемыхТоваров по основанию
//		* ЕстьПравоИнтерактивногоДобавленияУведомленияОПеремещении - Булево - признак наличия права для интерактивного добавления документа по основанию.
Функция УведомленияОПеремещенииПрослеживаемыхТоваровПоДокументуРеализации(ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеРаспоряженияКОформлению", "");
	Результат.Вставить("ПредставлениеУведомленияОПеремещении", "");	
	Результат.Вставить("УведомленияОПеремещении",  Новый Массив);
	Результат.Вставить("УведомлениеОПеремещенииТребуется",  Ложь);
	Результат.Вставить("КоличествоРаспоряженийКОформлению",  0);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияУведомленияОПеремещении", Ложь);
	
	//++ Локализация
	
	Если ПараметрыРегистрации.ПродажаВСтраныТаможенногоСоюза
		И ПараметрыРегистрации.ВедетсяУчетПоРНПТ Тогда
	
		ТекстРаспоряженияКОформлению = "";
		НавигационнаяСсылкаРаспоряженияКОформлению = "";
		
		ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров);
		
		ТаблицаРаспоряженийКОформлению = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.РаспоряженияКОформлениюУведомленийОПеремещенииПоОснованию(ПараметрыРегистрации.Ссылка);	
		КоличествоРаспоряженийКОформлению = ТаблицаРаспоряженийКОформлению.Количество();
		ДокументПоОснованиюТребуется = (КоличествоРаспоряженийКОформлению>0);

		ТаблицаУведомленийОПеремещении = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.УведомленияОПеремещенииПрослеживаемыхТоваровПоОснованию(ПараметрыРегистрации.Ссылка, Истина);
				
		Если КоличествоРаспоряженийКОформлению > 0 И ТаблицаУведомленийОПеремещении.Количество() = 0 Тогда
			Если ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
				ТекстРаспоряженияКОформлению = НСтр("ru = 'Оформить уведомление по ПТ'");
				НавигационнаяСсылкаРаспоряженияКОформлению = "ВвестиНовыйУведомлениеОПеремещенииПрослеживаемыхТоваров";
			Иначе
				ТекстРаспоряженияКОформлению = НСтр("ru = 'Уведомление о перемещении ПТ не оформлено'"); 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НавигационнаяСсылкаРаспоряженияКОформлению) Тогда
			ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
		Иначе
			ЦветТекста = Неопределено;
		КонецЕсли;

		ПредставлениеРаспоряженияКОформлению = Новый ФорматированнаяСтрока(ТекстРаспоряженияКОформлению, , ЦветТекста, , НавигационнаяСсылкаРаспоряженияКОформлению);
		
		ТекстУведомленияОПеремещении = "";
		НавигационнаяСсылкаУведомленияОПеремещении = "";
		
		Если ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию
			И ТаблицаУведомленийОПеремещении.Количество() Тогда
			УведомлениеОПеремещении = ТаблицаУведомленийОПеремещении[0];
			ТекстУведомленияОПеремещении = Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров.ПредставлениеУведомленияОПеремещенииПрослеживаемыхТоваров(
			                         УведомлениеОПеремещении.Номер,
			                         УведомлениеОПеремещении.Дата,
			                         УведомлениеОПеремещении.Проведен,
			                         ДокументПоОснованиюТребуется);
			НавигационнаяСсылкаУведомленияОПеремещении = "ОткрытьУведомлениеОПеремещенииПрослеживаемыхТоваров";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НавигационнаяСсылкаУведомленияОПеремещении) Тогда
			Если ДокументПоОснованиюТребуется Тогда
				ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
			Иначе	
				ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
			КонецЕсли;
		Иначе
			ЦветТекста = Неопределено;
		КонецЕсли;

		ПредставлениеУведомленияОПеремещении = Новый ФорматированнаяСтрока(ТекстУведомленияОПеремещении, , ЦветТекста, , НавигационнаяСсылкаУведомленияОПеремещении);
			
		Результат = Новый Структура;
		Результат.Вставить("ПредставлениеРаспоряженияКОформлению", ПредставлениеРаспоряженияКОформлению);
		Результат.Вставить("ПредставлениеУведомленияОПеремещении", ПредставлениеУведомленияОПеремещении);	
		Результат.Вставить("УведомленияОПеремещении",  ТаблицаУведомленийОПеремещении.ВыгрузитьКолонку("Ссылка"));
		Результат.Вставить("УведомлениеОПеремещенииТребуется",  ДокументПоОснованиюТребуется);
		Результат.Вставить("КоличествоРаспоряженийКОформлению",  КоличествоРаспоряженийКОформлению);
		Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияУведомленияОПеремещении", ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию);
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Результат;

КонецФункции

// Возвращает количество передач к оформлению.
//  
// Параметры:
//	Склад - СправочникСсылка.Склады - Склад прослеживаемости.
//
// Возвращаемое значение:
//  Число - Количество передач к оформлению
//
Функция КоличествоПередачКОформлению(Склад) Экспорт
	
	КоличествоДокументов = 0;
	
	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.Текст = Обработки.ПанельАдминистрированияУчетПрослеживаемыхТоваров.СформироватьТекстЗапросаТаблицаКОформлениюПередач();
	
	ТекстУсловиеКОформлению = "
	|ГДЕ
	|ЕСТЬNULL(ВТПередачи.КолВоПередач, 0) = 0";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УсловиеКОформлению", ТекстУсловиеКОформлению);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ХОПередачаНаКомиссию", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоДокументов = РезультатЗапроса.Выгрузить().Количество();
	
	Возврат КоличествоДокументов;
	
	//-- Локализация
	
КонецФункции

// Возвращает признак наличия в документе прослеживаемых товаров по РНПТ.
//
// Параметры:
//	Ссылка - ДокументСсылка - документ, в котором выполняется проверка наличия прослеживаемых товаров по РНПТ.
//
// Возвращаемое значение:
//	Булево - Истина означает, что проверяемый документ содержит прослеживаемые товары по РНПТ.
//
Функция ЕстьПрослеживаемыйТоварВДокументе(Ссылка) Экспорт
	
	ЕстьПрослеживаемыйТовар	= Ложь;
	//++ Локализация
	ИмяТаблицыИсточника		= "";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		ИмяТаблицыИсточника = "Документ.ОтчетКомиссионераОСписании.Товары";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		ИмяТаблицыИсточника = "Документ.ОтчетКомиссионера.Товары";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ИмяТаблицыИсточника = "Документ.ОтчетКомитенту.ВидыЗапасов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		ИмяТаблицыИсточника = "Документ.ОтчетКомитентуОСписании.ВидыЗапасов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетКомитентуОЗакупках") Тогда
		ИмяТаблицыИсточника = "Документ.ОтчетКомитентуОЗакупках.Товары";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяТаблицыИсточника = "Документ.РеализацияТоваровУслуг.ВидыЗапасов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяТаблицыИсточника = "Документ.ВозвратТоваровПоставщику.ВидыЗапасов";
	КонецЕсли;
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1, 1, 1));
	
	Если ИмяТаблицыИсточника <> ""
		И ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗаполненРНПТВГТД
		|ИЗ
		|	&ИмяТаблицыИсточника КАК Товары
		|
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И ЕСТЬNULL(Товары.НомерГТД.ТипНомераГТД, НЕОПРЕДЕЛЕНО) В(ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТ),
		|																ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыИсточника", ИмяТаблицыИсточника);
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЕстьПрослеживаемыйТовар = Истина;
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат ЕстьПрослеживаемыйТовар;
		
КонецФункции

// Заполняет в документе табличную часть Прослеживаемые товары по остаткам регистра 
// Прослеживаемые товары в составе ОС
//
// Параметры:
//	Объект - ДокументОбъект - объект, в котором заполняется табличная часть
//	ДоступныеОсновныеСредства - Массив - массив основных средств, по которым отбираются остатки 
//	для заполнения табличной части
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамПрослеживаемыхТоваров(Объект, ДоступныеОсновныеСредства, ОчищатьОС = Ложь) Экспорт 
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Возвращает описание таблицы сведений о прослеживаемых комплектующих, используемую при печати данных.
//
//
// Возвращаемое значение:
//	ТаблицаЗначений - описание таблицы сведений о прослеживаемых комплектующих, со следующими колонками:
//		* НомерГТД - СправочникСсылка.НомераГТД - ссылка на номер РНПТ комплекта.
//		* НомерРНПТ - СправочникСсылка.НомераГТД - ссылка на данные комплектующей номера РНПТ комплекта
//														в информационной базе.
//		* НомерТовара - Строка - регистрационный номер товара.
//		* Количество - Число - нормативное количество комплектующих, приходящихся на единицу комплекта.
//		* ЕдиницаИзмеренияКод - Строка - код единицы измерения по ОКЕИ.
//		* ЕдиницаИзмеренияНаименование - Строка - наименование единицы измерения.
//
Функция ПустаяТаблицаПрослеживаемыеКомплектующиеДляПечатиДанных() Экспорт
	
	НомерГТДОписаниеТипа	= Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
	ЧислоОписаниеТипа		= Новый ОписаниеТипов("Число");
	СтрокаОписаниеТипа		= Новый ОписаниеТипов("Строка");
	
	ПрослеживаемыеКомплектующие = Новый ТаблицаЗначений;
	ПрослеживаемыеКомплектующие.Колонки.Добавить("НомерГТД", НомерГТДОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("НомерРНПТ", НомерГТДОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("НомерТовара", СтрокаОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("Количество", ЧислоОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("ЕдиницаИзмеренияКод", СтрокаОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("ЕдиницаИзмеренияНаименование", СтрокаОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("ОбщаяСуммаПоКомплекту", ЧислоОписаниеТипа);
	ПрослеживаемыеКомплектующие.Колонки.Добавить("СуммаПоРНПТ", ЧислоОписаниеТипа);
	
	Возврат ПрослеживаемыеКомплектующие;
	
КонецФункции

// Возвращает таблицу сведений о прослеживаемых комплектующих, используемую при печати данных.
//
// Параметры:
//	ПрослеживаемыеКомплектующие - РезультатЗапроса - сведения о прослеживаемых комплектующих.
//
// Возвращаемое значение:
//	см. ПустаяТаблицаПрослеживаемыеКомплектующиеДляПечатиДанных
//
Функция ПрослеживаемыеКомплектующиеДляПечатиДанных(ПрослеживаемыеКомплектующие) Экспорт
	
	Выборка = ПрослеживаемыеКомплектующие.Выбрать();
	ТаблицаКомплектующих = ПустаяТаблицаПрослеживаемыеКомплектующиеДляПечатиДанных();
	
	ЗаполняемыеСвойства = "НомерГТД, НомерРНПТ, Количество, ОбщаяСуммаПоКомплекту, СуммаПоРНПТ";
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКомплектующих.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, ЗаполняемыеСвойства);
		
		НоваяСтрока.НомерТовара						= СокрЛП(Строка(Выборка.НомерТовара));
		НоваяСтрока.ЕдиницаИзмеренияКод				= СокрЛП(Выборка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияНаименование	= СокрЛП(Выборка.ЕдиницаИзмеренияНаименование);
	КонецЦикла;
	
	Возврат ТаблицаКомплектующих;
	
КонецФункции

// Дополняет параметры проверки корректности указания товаров в таблице документа порчи.
//
// Параметры:
//	ПараметрыПроверки - Структура - коллекция параметров проверки.
//
Процедура ДополнитьПараметрыКорректностиУказанияНоменклатурыПорчиТоваров(ПараметрыПроверки) Экспорт
	
	//++ Локализация
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицы",		"Объект");
	ПараметрыПроверки.Вставить("ИмяПоляДата",				"Дата");
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИмяКолонкиНоменклатура",	"Номенклатура");
	ПараметрыПроверки.Вставить("ИмяКолонкиНоменклатураОприходование", "НоменклатураОприходование");
	ПараметрыПроверки.Вставить("СписокСтрок",				Неопределено);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	//-- Локализация
	
КонецПроцедуры

// Проверяет корректность указания списываемой и приходуемой номенклатуры в таблице документа почри.
//
// Параметры:
//	Объект - ДокументОбъект, Структура, ФормаКлиентскогоПриложения - объект, в табличной части которого выполняется проверка и который содержит:
//		* Ссылка - ДокументСсылка - ссылка на документ информационной базы.
//	Отказ - Булево - Истина, признак того, что в табличной части объекта не заполнено проверяемое поле.
//	ПараметрыПроверки - Структура, Неопределено - параметры проверки.
//
Процедура ПроверитьКорректностьУказанияНоменклатурыПорчиТоваров(Объект, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	//++ Локализация
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = Новый Структура;
		
		ДополнитьПараметрыКорректностиУказанияНоменклатурыПорчиТоваров(ПараметрыПроверки);
	КонецЕсли;
	
	ДатаОбъекта = ТекущаяДатаСеанса();
	ИмяПоляДата = ПараметрыПроверки.ИмяПоляДата;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяПоляДата) Тогда
		ДатаОбъекта = Объект[ИмяПоляДата];
	КонецЕсли;
	
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(ДатаОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
	ОтборСтрокДляПроверки = ПараметрыПроверки.СписокСтрок;
	
	Если ОтборСтрокДляПроверки = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
		
	КонецЕсли;
	
	ИмяКолонкиНоменклатура = ПараметрыПроверки.ИмяКолонкиНоменклатура;
	ИмяКолонкиНоменклатураОприходование = ПараметрыПроверки.ИмяКолонкиНоменклатураОприходование;
	
	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("НомерСтроки");
	ИменаКолонок.Добавить(ИмяКолонкиНоменклатура);
	ИменаКолонок.Добавить(ИмяКолонкиНоменклатураОприходование);
	
	ВыгружаемыеКолонки = СтрСоединить(ИменаКолонок, ", ");
	
	ТаблицаТоваров = Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, ВыгружаемыеКолонки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&Номенклатура1 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(&Номенклатура2 КАК Справочник.Номенклатура) КАК НоменклатураОприходование
	|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(КачественныеТовары.ВестиУчетПоГТД, ЛОЖЬ) КАК ПрослеживаемыйТовар,
	|	(ЕСТЬNULL(КачественныеТовары.ВестиУчетПоГТД, ЛОЖЬ)
	|		И ЕСТЬNULL(КачественныеТовары.ПрослеживаемыйТовар, ЛОЖЬ)) <> (ЕСТЬNULL(БракованныеТовары.ВестиУчетПоГТД, ЛОЖЬ)
	|		И ЕСТЬNULL(БракованныеТовары.ПрослеживаемыйТовар, ЛОЖЬ)) КАК ЕстьОшибкаУчета
	|ИЗ
	|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК КачественныеТовары
	|		ПО ТаблицаТоваров.Номенклатура = КачественныеТовары.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК БракованныеТовары
	|		ПО ТаблицаТоваров.НоменклатураОприходование = БракованныеТовары.Ссылка
	|	
	|ГДЕ
	|	(ЕСТЬNULL(КачественныеТовары.ВестиУчетПоГТД, ЛОЖЬ)
	|		И ЕСТЬNULL(КачественныеТовары.ПрослеживаемыйТовар, ЛОЖЬ)) <> (ЕСТЬNULL(БракованныеТовары.ВестиУчетПоГТД, ЛОЖЬ)
	|		И ЕСТЬNULL(БракованныеТовары.ПрослеживаемыйТовар, ЛОЖЬ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&Номенклатура1",
								"ТаблицаТоваров." + ИмяКолонкиНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&Номенклатура2",
								"ТаблицаТоваров." + ИмяКолонкиНоменклатураОприходование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонСообщения = НСтр("ru='Некорректно заполнены данные в строке %1 списка ""%2"".
							|%3.'");
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ		= ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
								Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
							МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
							ПараметрыПроверки.ПредставлениеТЧ);
	КлючДанных			= ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	ПутьКДаннымТаблицы	= ПараметрыПроверки.ПутьКДаннымТаблицы;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрослеживаемыйТовар Тогда
			ТекстОшибки = НСтр("ru='Списание прослеживаемого по РНПТ товара исходного качества и оприходование непрослеживаемого испорченного товара'");
		Иначе
			ТекстОшибки = НСтр("ru='Списание непрослеживаемого по РНПТ товара исходного качества и оприходование прослеживаемого испорченного товара'");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НомерСтроки, ПредставлениеТЧ, ТекстОшибки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяКолонкиНоменклатура);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДаннымТаблицы, Отказ);
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Возвращает валюту регламентированного учета, в которой учитываются стоимостные показатели элемента справочника 'НомераГТД'.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - валюта регламентированного учета.
//
Функция ВалютаРегламентированногоУчетаНомераГТД() Экспорт
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	//++ Локализация
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1, 1, 1)) Тогда
		Валюта = Справочники.Валюты.НайтиПоКоду("643");
	КонецЕсли;
	//-- Локализация
	
	Возврат Валюта;
	
КонецФункции

// Заполняет поле ПроверитьНомерГТД в дереве видов запасов
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма ФормаВводаВидовЗапасов справочника Виды запасов.
//
Процедура ЗаполнитьПолеПроверитьНомерГТДВДереве(Форма) Экспорт
	
	//++ Локализация
	Форма.ЕстьРНПТБезСтоимости = Ложь;
	НомераГТД = Новый Массив;
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоВидовЗапасов");
	
	Для Каждого СтрокаНоменклатуры Из Дерево.Строки Цикл
		НомераГТД.Добавить(СтрокаНоменклатуры.НомерГТД);
		Для Каждого Строка Из СтрокаНоменклатуры.Строки Цикл
			НомераГТД.Добавить(Строка.НомерГТД);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераГТДПрослеживаемыеКомплектующие.Ссылка КАК НомерГТД,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НомераГТДПрослеживаемыеКомплектующие.Ссылка.СуммаПоРНПТ = 0
		|					ИЛИ НомераГТДПрослеживаемыеКомплектующие.СуммаПоРНПТ = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПроверитьНомерГТД
		|ИЗ
		|	Справочник.НомераГТД.ПрослеживаемыеКомплектующие КАК НомераГТДПрослеживаемыеКомплектующие
		|ГДЕ
		|	НомераГТДПрослеживаемыеКомплектующие.Ссылка В(&НомераГТД)
		|	И НомераГТДПрослеживаемыеКомплектующие.Ссылка.ТипНомераГТД = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта)
		|
		|СГРУППИРОВАТЬ ПО
		|	НомераГТДПрослеживаемыеКомплектующие.Ссылка
		|";
	
	НомераГТД = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НомераГТД);
	Запрос.УстановитьПараметр("НомераГТД", НомераГТД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	НомераГТДДляПроверки = Новый Соответствие; 
	НомераГТДДляПроверки.Вставить(Справочники.НомераГТД.ПустаяСсылка(), 0);
	Пока Выборка.Следующий() Цикл
		НомераГТДДляПроверки.Вставить(Выборка.НомерГТД, Выборка.ПроверитьНомерГТД);
		Форма.ЕстьРНПТБезСтоимости = Макс(Форма.ЕстьРНПТБезСтоимости, Булево(Выборка.ПроверитьНомерГТД));
	КонецЦикла;
	
	Для Каждого СтрокаНоменклатуры Из Дерево.Строки Цикл
		СтрокаНоменклатуры.ПроверитьНомерГТД = НомераГТДДляПроверки.Получить(СтрокаНоменклатуры.НомерГТД);
		Для Каждого Строка Из СтрокаНоменклатуры.Строки Цикл
			Строка.ПроверитьНомерГТД = НомераГТДДляПроверки.Получить(Строка.НомерГТД);
		КонецЦикла;
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоВидовЗапасов");
	//-- Локализация
	
КонецПроцедуры

// Возвращает вид цены стоимости прослеживаемых товаров.
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЦен - вид цены стоимости прослеживаемых товаров.
//
Функция ВидЦеныСтоимостиПрослеживаемыхТоваров() Экспорт
	
	ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	
	//++ Локализация
	ВидЦены = Константы.ВидЦеныСтоимостиПрослеживаемыхТоваров.Получить();
	//-- Локализация
	
	Возврат ВидЦены;
	
КонецФункции

// Меняет заголовок на "Номер ГТД / РНПТ" или "Номер РНПТ" для переданных элементов формы. 
//
// Параметры:
// 	ЭлементыФормы     - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент
// 	ЭлементыНомерГТД  - Строка, Массив из строка - список имен элементов формы с "Номер ГТД"
// 	ТолькоРНПТ        - Булево - признак, что вводится только номер РНПТ
// 	Постфикс          - Строка - дополнительное описание заголовка
//	ИзменятьПодсказку - Булево - изменяем подсказку для элементов формы.
//
Процедура УстановитьЗаголовокНомерГТД(ЭлементыФормы, ЭлементыНомерГТД, ТолькоРНПТ = Ложь, Постфикс = "", ИзменятьПодсказку = Истина) Экспорт
	
	//++ Локализация
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Дата(1, 1, 1));
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
	
		Если ТолькоРНПТ Тогда
			Заголовок = НСтр("ru = 'Номер РНПТ'");
			Подсказка = НСтр("ru = 'Регистрационный номер партии товара'");
		Иначе
			Заголовок = НСтр("ru = 'Номер ГТД / РНПТ'");
			Подсказка = НСтр("ru = 'Номер декларации на товары / Регистрационный номер партии товара'");
		КонецЕсли;
		
		Если Постфикс <> "" Тогда
			Заголовок = Заголовок + " " + Постфикс;
			Подсказка = Подсказка + " " + Постфикс;
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭлементыФормы,
			ЭлементыНомерГТД,
			"Заголовок",
			Заголовок);
		
		Если ИзменятьПодсказку Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				ЭлементыФормы,
				ЭлементыНомерГТД,
				"Подсказка",
				Подсказка);
		КонецЕсли;
			
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Возвращает строку представления настройки ГТД в пользовательском интерфейсе.
//
// Возвращаемое значение:
//	Строка - представление настройки ГТД в пользовательском интерфейсе
Функция ПредставлениеГТД() Экспорт
	
	ПредставлениеГТД = НСтр("ru = 'ГТД'");
	
	//++ Локализация
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Дата(1, 1, 1));
	
	Если ИспользоватьУчетПрослеживаемыхИмпортныхТоваров Тогда
		ПредставлениеГТД = НСтр("ru = 'РНПТ / ГТД'");
	КонецЕсли;
	//-- Локализация
	
	Возврат ПредставлениеГТД;
	
КонецФункции

// Дополняет параметры проверки наличия прослеживаемых работ в табличной части объекта.
//
// Параметры:
//	ПараметрыПроверки - Структура - коллекция параметров проверки.
//
Процедура ДополнитьПараметрыПроверкиНаличияПрослеживаемыхРаботВТабличнойЧасти(ПараметрыПроверки) Экспорт
	
	//++ Локализация
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицы",		"Объект");
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИмяКолонкиНоменклатура",	"Номенклатура");
	//-- Локализация
	
КонецПроцедуры

// Выполняет проверку наличия прослеживаемых работ в табличной части объекта.
//
// Параметры:
//	Объект - ДокументОбъект, ФормаКлиентскогоПриложения - объект, для которого выполняется проверка и который содержит:
//		* Ссылка - ДокументСсылка - ссылка на документ информационной базы.
//	Отказ - Булево - признак продолжения дальнейшей обработки проверяемого объекта в информационной базе.
//	ПараметрыПроверки - см. ДополнитьПараметрыПроверкиНаличияПрослеживаемыхРаботВТабличнойЧасти.
//
Процедура ПроверитьНаличиеПрослеживаемыхРаботВТабличнойЧасти(Объект, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	//++ Локализация
	Если Не ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1, 1, 1)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = Новый Структура;
		
		ДополнитьПараметрыПроверкиНаличияПрослеживаемыхРаботВТабличнойЧасти(ПараметрыПроверки);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИмяТЧ						КАК ИмяТЧ,
	|	&СинонимТЧ					КАК СинонимТЧ,
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	&Номенклатура				КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоварыДляЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.ИмяТЧ		КАК ИмяТЧ,
	|	ТаблицаТоваров.СинонимТЧ	КАК СинонимТЧ,
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура	КАК Номенклатура
	|ИЗ
	|	ТаблицаТоварыДляЗапроса КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ПрослеживаемыйТовар
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&Номенклатура",
								"ТаблицаТоваров." + ПараметрыПроверки.ИмяКолонкиНоменклатура);
	
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ИмяТЧ			= ПараметрыПроверки.ИмяТЧ;
	ПредставлениеТЧ	= ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
							Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
						МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
						ПараметрыПроверки.ПредставлениеТЧ);
	
	ИменаКолонок = Новый Массив;
	ИменаКолонок.Добавить("НомерСтроки");
	ИменаКолонок.Добавить(ПараметрыПроверки.ИмяКолонкиНоменклатура);
	
	ВыгружаемыеКолонки = СтрСоединить(ИменаКолонок, ", ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",	Объект[ИмяТЧ].Выгрузить(, ВыгружаемыеКолонки));
	Запрос.УстановитьПараметр("ИмяТЧ",			МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Имя);
	Запрос.УстановитьПараметр("СинонимТЧ",		ПредставлениеТЧ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка			= РезультатЗапроса.Выбрать();
	ШаблонСообщения	= НСтр("ru = 'В строке %1 списка ""%2"" выбрана прослеживаемая работа.
							|При включенном учете прослеживаемых импортных товаров выбор такой номенклатуры запрещен.'");
	КлючДанных		= ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НомерСтроки, Выборка.СинонимТЧ);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТЧ, Выборка.НомерСтроки, "Номенклатура");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПараметрыПроверки.ПутьКДаннымТаблицы, Отказ);
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация
Функция ПараметрыСводнаяИнформацияОТоварахРНПТ()
	
	Результат = Новый Структура();
	Результат.Вставить("ЕстьТоварРНПТ", Ложь);
	Результат.Вставить("ЕстьТоварНеРНПТ", Ложь);
	Результат.Вставить("ЕстьТоварРНПТСОтличающейсяЕдиницей", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура НеОтражатьОперацииСПрослеживаемымиТоварамиПоДвижениям(Движения) Экспорт
	
	Источники = ИсточникиОтраженияОперацийОсновногоРегистра();
	
	Для Каждого Источник Из Источники Цикл
		Если Движения.Найти(Источник) <> Неопределено Тогда
			Движения[Источник].ДополнительныеСвойства.Вставить("НеОтражатьОперацииСПрослеживаемымиТоварами", Истина);			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Функция ИсточникиОтраженияОперацийОсновногоРегистра()
	
	Источники = Новый Массив;
	
	
	Возврат Источники;
	 
КонецФункции

Функция СводнаяИнформацияОТоварахРНПТ(Товары, ИмяКолонкиНоменклатура = "Номенклатура")
	
	ПараметрыСводнаяИнформацияОТоварахРНПТ = ПараметрыСводнаяИнформацияОТоварахРНПТ();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ (&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ВходящаяТаблица КАК ВходящаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Товары.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|		И ЕСТЬNULL(Товары.Номенклатура.ВестиУчетПоГТД, ЛОЖЬ) КАК ПрослеживаемыйТовар,
	|	(Товары.Номенклатура.ЕдиницаИзмерения <> Товары.Номенклатура.ЕдиницаИзмеренияТНВЭД) КАК ЕстьРазницаЕдиниц
	|ПОМЕСТИТЬ ВТНаличиеПрослеживемыхТоваров
	|ИЗ
	|	ВТТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Товары.ЕстьПрослеживаемыеТовары) КАК ЕстьТоварРНПТ,
	|	МАКСИМУМ(Товары.ЕстьНеПрослеживаемыеТовары) КАК ЕстьТоварНеРНПТ,
	|	МАКСИМУМ(Товары.ЕстьРазницаЕдиниц) КАК ЕстьТоварРНПТСОтличающейсяЕдиницей
	|ПОМЕСТИТЬ ВТСводнаяИнформация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ЕстьПрослеживаемыеТовары,
	|		ЛОЖЬ КАК ЕстьНеПрослеживаемыеТовары,
	|		Товары.ЕстьРазницаЕдиниц КАК ЕстьРазницаЕдиниц
	|	ИЗ
	|		ВТНаличиеПрослеживемыхТоваров КАК Товары
	|	ГДЕ
	|		Товары.ПрослеживаемыйТовар
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ КАК ЕстьПрослеживаемыеТовары,
	|		ИСТИНА КАК ЕстьНеПрослеживаемыеТовары,
	|		Товары.ЕстьРазницаЕдиниц КАК ЕстьРазницаЕдиниц
	|	ИЗ
	|		ВТНаличиеПрослеживемыхТоваров КАК Товары
	|	ГДЕ
	|		НЕ Товары.ПрослеживаемыйТовар
	|	
	|	) КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Товары.ЕстьТоварРНПТ, ЛОЖЬ) КАК ЕстьТоварРНПТ,
	|	ЕСТЬNULL(Товары.ЕстьТоварНеРНПТ, ЛОЖЬ) КАК ЕстьТоварНеРНПТ,
	|	ЕСТЬNULL(Товары.ЕстьТоварРНПТСОтличающейсяЕдиницей, ЛОЖЬ) КАК ЕстьТоварРНПТСОтличающейсяЕдиницей
	|ИЗ
	|	ВТСводнаяИнформация КАК Товары";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "ВходящаяТаблица." + ИмяКолонкиНоменклатура);
	Запрос.УстановитьПараметр("ВходящаяТаблица", Товары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСводнаяИнформацияОТоварахРНПТ, Выборка);
	КонецЕсли;
	
	Возврат ПараметрыСводнаяИнформацияОТоварахРНПТ;
	
КонецФункции

#Область ВариантыКомплектации

Функция ТекстЗапросаВТДанныеКомплекта()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Ссылка			КАК Номенклатура,
	|	Товары.ТипНоменклатуры	КАК ТипНоменклатуры,
	|	Товары.КодТНВЭД			КАК КодТНВЭД,
	|	Товары.ПрослеживаемыйТовар	КАК ПрослеживаемыйТовар,
	|	ВЫРАЗИТЬ(&ХарактеристикаКомплект КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	НЕ Товары.ВестиУчетПоГТД
	|		И Товары.ТипНоменклатуры В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|		И Товары.ПрослеживаемыйТовар КАК ОшибкаВеденияУчетаПоГТД
	|ПОМЕСТИТЬ ДанныеКомплекта
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК Классификатор
	|		ПО Товары.КодТНВЭД = Классификатор.Ссылка
	|
	|ГДЕ
	|	Товары.Ссылка = &НоменклатураКомплект";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКомплектующие()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Комплектующие.НомерСтроки		КАК НомерСтроки,
	|	Комплектующие.Номенклатура		КАК Номенклатура,
	|	Комплектующие.Характеристика	КАК Характеристика
	|ПОМЕСТИТЬ КомплектующиеДляЗапроса
	|ИЗ
	|	&Комплектующие КАК Комплектующие";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТПрослеживаемыеКомплектующие()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Комплектующие.НомерСтроки					КАК НомерСтроки,
	|	Комплектующие.Номенклатура					КАК Номенклатура,
	|	ВЫРАЗИТЬ(Комплектующие.Номенклатура КАК Справочник.Номенклатура).ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ЕСТЬNULL(Товары.КодТНВЭД, НЕОПРЕДЕЛЕНО)		КАК КодТНВЭД,
	|	Комплектующие.Характеристика				КАК Характеристика,
	|	Комплектующие.Номенклатура = &НоменклатураОсновногоКомпонента
	|		И Комплектующие.Характеристика = &ХарактеристикаОсновногоКомпонента КАК ОсновнаяКомплектующая,
	|	НЕ ЕСТЬNULL(Товары.ВестиУчетПоГТД, ЛОЖЬ)	КАК ОшибкаВеденияУчетаПоГТД
	|ПОМЕСТИТЬ ПрослеживаемыеКомплектующие
	|ИЗ
	|	КомплектующиеДляЗапроса КАК Комплектующие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО Комплектующие.Номенклатура = Товары.Ссылка
	|
	|ГДЕ
	|	ЕСТЬNULL(Товары.ПрослеживаемыйТовар, ЛОЖЬ)
	|	И ЕСТЬNULL(Товары.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТПрослеживаемыеКомплектующиеСгруппированная()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Комплектующие.Номенклатура				КАК Номенклатура,
	|	Комплектующие.Характеристика			КАК Характеристика,
	|	Комплектующие.ОшибкаВеденияУчетаПоГТД	КАК ОшибкаВеденияУчетаПоГТД
	|ПОМЕСТИТЬ ПрослеживаемыеКомплектующиеСгруппированная
	|ИЗ
	|	ПрослеживаемыеКомплектующие КАК Комплектующие";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПроверокКомплекта()
	
	ТекстыПроверок = Новый Массив;
	ТекстыПроверок.Добавить(ТекстЗапросаПроверкиВариантаПредставленияКомплекта());
	
	ТекстЗапроса = СтрСоединить(ТекстыПроверок, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПроверкиВариантаПредставленияКомплекта()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛОЖЬ	КАК НепрослеживаемыйКомплект,
	|	ИСТИНА	КАК ПрослеживаемыеКомплектующиеВКомплектеТолькоНабор
	|ИЗ
	|	ДанныеКомплекта КАК ДанныеКомплекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрослеживаемыеКомплектующие КАК Комплектующие
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	Комплектующие.ПрослеживаемыйТовар
	|	И ДанныеКомплекта.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
	|	И &ВариантПредставленияНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонСообщенияПрослеживаемыеКомплектующиеВКомплектеТолькоНабор(ТипНоменклатуры)
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		ТекстШаблона = НСтр("ru='Набор ""%1"" с настройкой печати ""В печатных формах выводить"" - ""Только набор"" не должен содержать прослеживаемые комплектующие:
							|%2.'");
	Иначе
		ТекстШаблона = НСтр("ru='Комплект ""%1"" с настройкой печати ""В печатных формах выводить"" - ""Только набор"" не должен содержать прослеживаемые комплектующие:
							|%2.'");
	КонецЕсли;
	
	Возврат ТекстШаблона;
	
КонецФункции

Функция ШаблонСообщенияНепрослеживаемыеКомплектующие()
	
	ТекстШаблона = НСтр("ru='Прослеживаемый по РНПТ комплект ""%1"" не содержит прослеживаемую комплектующую.
						|Для ведения корректного учета прослеживаемых по РНПТ комплектов необходимо указать комплектующую с кодом ТН ВЭД аналогичным коду комплекта.'");
	
	Возврат ТекстШаблона;
	
КонецФункции

Функция ШаблонСообщенияКорректностиНастроекПрослеживаемостиНоменклатуры(ТипНоменклатуры, ЭтоКомплект = Ложь)
	
	Если ЭтоКомплект Тогда
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
			ТекстШаблона = НСтр("ru='Для набора ""%1"" задан прослеживаемый код ТН ВЭД, но выключен учет по номерам ГТД.
								|Для учета набора как прослеживаемого, требуется взвести флаг учета по номерам ГТД.'");
		Иначе
			ТекстШаблона = НСтр("ru='Для комплекта ""%1"" задан прослеживаемый код ТН ВЭД, но выключен учет по номерам ГТД.
								|Для учета комплекта как прослеживаемого, требуется взвести флаг учета по номерам ГТД.'");
		КонецЕсли;
	Иначе
		ТекстШаблона = НСтр("ru='Для комплектующей ""%1"" задан прослеживаемый код ТН ВЭД, но выключен учет по номерам ГТД.
								|Для учета комплектующей как прослеживаемой, требуется взвести флаг учета по номерам ГТД.'");
	КонецЕсли;
	
	Возврат ТекстШаблона;
	
КонецФункции

Функция ШаблонСообщенияКорректностиСоответствияТипаНомераГТДИНастроекНоменклатуры()
	
	ТекстШаблона = НСтр("ru='Для не прослеживаемой комплектующей ""%1"" задан прослеживаемый номер ГТД (РНПТ) ""%2"".
					|Для учета товара как прослеживаемого, требуется взвести флаг учета по прослеживаемым товарам.'");
	Возврат ТекстШаблона;
	
КонецФункции

Функция ШаблонСтрокиПрослеживаемойКомплектующей(ВыводитьНомера)
	
	Если Не ВыводитьНомера Тогда
		ТекстШаблона = НСтр("ru = '""%1"" списка ""Комплектующие""'");
	Иначе
		ТекстШаблона = НСтр("ru = '""%1"" в строке %2 списка ""Комплектующие""'");
	КонецЕсли;
	
	Возврат ТекстШаблона;
	
КонецФункции

Функция ПредставлениеПрослеживаемыхКомплектующих(Товары, ВыводитьНомера = Истина)
	
	ТекстыПредставлений = Новый Массив;
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		Если ВыводитьНомера Тогда
			ПредставлениеСтроки = СтрШаблон(ШаблонСтрокиПрослеживаемойКомплектующей(ВыводитьНомера),
											СтрокаТоваров.Номенклатура,
											СтрокаТоваров.НомерСтроки);
		Иначе
			ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТоваров.Номенклатура,
																					СтрокаТоваров.Характеристика);
			ПредставлениеСтроки = СтрШаблон(ШаблонСтрокиПрослеживаемойКомплектующей(ВыводитьНомера), ПредставлениеТовара);
		КонецЕсли;
		
		ТекстыПредставлений.Добавить(ПредставлениеСтроки);
	КонецЦикла;
	
	РазделительСтрок = ";
						|";
	ПредставлениеКомплектующих = СтрСоединить(ТекстыПредставлений, РазделительСтрок);
	
	Возврат ПредставлениеКомплектующих;
	
КонецФункции

#КонецОбласти
//-- Локализация

Функция КоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент, Организация, Соглашение, Товары)
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	ВозвращаемоеЗначение.Колонки.Добавить("Номенклатура",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВозвращаемоеЗначение.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВозвращаемоеЗначение.Колонки.Добавить("МестоХранения",	Новый ОписаниеТипов("СправочникСсылка.Склады,
																				|СправочникСсылка.Партнеры,
																				|СправочникСсылка.ДоговорыКонтрагентов,
																				|СправочникСсылка.Организации,
																				|ДокументСсылка.ПриобретениеТоваровУслуг,
																				|ДокументСсылка.ВозвратТоваровПоставщику,
																				|ДокументСсылка.КорректировкаПриобретения"));
	
	Квалификатор = Новый КвалификаторыЧисла(23, 11);
	ВозвращаемоеЗначение.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число", , , Квалификатор));
	
	//++ Локализация
	
	ТекстыЗапросов = Новый СписокЗначений();
	ЗапросКоэффициентыПрослеживаемыхТоваров(ТекстыЗапросов,
			Ложь,
			"МестоХранения",
			Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов.ВыгрузитьЗначения(), ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("ИсключаемыйДокумент",	ИсключаемыйДокумент);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Товары",					Товары);
	Запрос.УстановитьПараметр("Соглашение",				Соглашение);
	Запрос.УстановитьПараметр("ЭтоОтчетОСписании",
								ТипЗнч(ИсключаемыйДокумент) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании"));
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДополнитьТекстыЗапросовИсточниковДанных(СтруктураДействий,
		ОписаниеЗапроса,
		КэшированныеЗначения) Экспорт
	
	//++ Локализация
	Перем ПараметрыПересчета;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ПересчитатьКоличествоПоРНПТ",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыПересчета) Тогда
	
		ЗапросКоэффициентыПрослеживаемыхТоваров(ОписаниеЗапроса.ТекстыЗапросов,
			Истина,
			ПараметрыПересчета.ИмяПоляМестоХранения,
			Истина);
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИсключаемыйДокумент",	ПараметрыПересчета.ИсключаемыйДокумент);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Организация",			ПараметрыПересчета.Организация);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Соглашение",				ПараметрыПересчета.Соглашение);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ЭтоОтчетОСписании",
									ТипЗнч(ПараметрыПересчета.ИсключаемыйДокумент) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании"));
		
	КонецЕсли;
	//-- Локализация
	
КонецФункции

//++ Локализация

// Запрос коэффициенты прослеживаемых товаров.
// 
// Параметры:
//  ТекстыЗапросов - Список - 
//  ЕстьВтИсточникДанных - Булево - 
//  ИмяПоляМестоХранения - Строка - 
//  ТребуетсяИдентификаторСтроки - Булево - 
Процедура ЗапросКоэффициентыПрослеживаемыхТоваров(ТекстыЗапросов,
	ЕстьВтИсточникДанных = Ложь,
	ИмяПоляМестоХранения = "МестоХранения",
	ТребуетсяИдентификаторСтроки = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.НомерГТД КАК Справочник.НомераГТД) КАК НомерГТД,
	|	Товары.ПодменноеПолеМестоХранения КАК ПодменноеПолеМестоХранения,
	|	Товары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|ПОМЕСТИТЬ ВТВходящаяТаблица
	|ИЗ
	|	ВтИсточникДанных КАК Товары";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодменноеПолеМестоХранения", ИмяПоляМестоХранения); // @query-part
	Если Не ТребуетсяИдентификаторСтроки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.ИдентификаторСтрокиВТ", "1"); // @query-part
	КонецЕсли;
	Если Не ЕстьВтИсточникДанных Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтИсточникДанных", "&Товары"); // @query-part
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТВходящаяТаблица");
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура		КАК Номенклатура,
	|	Товары.Характеристика	КАК Характеристика,
	|	Товары.ПодменноеПолеМестоХранения	КАК ПодменноеПолеМестоХранения,
	|	Товары.НомерГТД			КАК НомерГТД,
	|	Товары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	ВТВходящаяТаблица КАК Товары
	|
	|ГДЕ
	|	ЕСТЬNULL(Товары.Номенклатура.ПрослеживаемыйТовар, ЛОЖЬ)
	|	И ЕСТЬNULL(Товары.Номенклатура.ВестиУчетПоГТД, ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ПодменноеПолеМестоХранения,
	|	НомерГТД,
	|	ИдентификаторСтрокиВТ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодменноеПолеМестоХранения", ИмяПоляМестоХранения); // @query-part
	ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТТовары");
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	АналитикаУчетаНоменклатуры.КлючАналитики КАК Аналитика,
	|	ВТТовары.НомерГТД
	|ПОМЕСТИТЬ ВТАналитикиУчетаНоменклатуры
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары
	|		ПО АналитикаУчетаНоменклатуры.Номенклатура = ВТТовары.Номенклатура
	|			И АналитикаУчетаНоменклатуры.Характеристика = ВТТовары.Характеристика
	|			И АналитикаУчетаНоменклатуры.МестоХранения = ВТТовары.ПодменноеПолеМестоХранения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Аналитика,
	|	НомерГТД";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодменноеПолеМестоХранения", ИмяПоляМестоХранения); // @query-part
	ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТАналитикиУчетаНоменклатуры");
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	НаборДанных.Номенклатура КАК Номенклатура,
	|	НаборДанных.Характеристика КАК Характеристика,
	|	НаборДанных.ПодменноеПолеМестоХранения КАК ПодменноеПолеМестоХранения,
	|	НаборДанных.НомерГТД КАК НомерГТД,
	|	ВЫРАЗИТЬ(НаборДанных.КоличествоРНПТ / НаборДанных.Количество КАК ЧИСЛО(23, 11)) КАК Коэффициент
	|ПОМЕСТИТЬ ВТКоэффициентыТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.МестоХранения КАК ПодменноеПолеМестоХранения,
	|		ТоварыОстатки.НомерГТД КАК НомерГТД,
	|		ТоварыОстатки.КоличествоОстаток КАК Количество,
	|		ТоварыОстатки.КоличествоПоРНПТОстаток КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			,
	|			Организация = &Организация
	|			И (АналитикаУчетаНоменклатуры, НомерГТД) В
	|					(ВЫБРАТЬ
	|						ДанныеАналитики.Аналитика,
	|						ДанныеАналитики.НомерГТД
	|					ИЗ
	|						ВТАналитикиУчетаНоменклатуры КАК ДанныеАналитики)
	|		
	|		) КАК ТоварыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.МестоХранения КАК ПодменноеПолеМестоХранения,
	|		ТоварыСторно.НомерГТД КАК НомерГТД,
	|		-ТоварыСторно.Количество КАК Количество,
	|		-ТоварыСторно.КоличествоПоРНПТ КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК ТоварыСторно
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАналитикиУчетаНоменклатуры КАК ДанныеАналитики
	|			ПО ТоварыСторно.АналитикаУчетаНоменклатуры = ДанныеАналитики.Аналитика
	|				И ТоварыСторно.НомерГТД = ДанныеАналитики.НомерГТД
	|	
	|	ГДЕ
	|		ТоварыСторно.Регистратор = &ИсключаемыйДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.МестоХранения КАК ПодменноеПолеМестоХранения,
	|		ТоварыОстатки.НомерГТД КАК НомерГТД,
	|		ТоварыОстатки.КоличествоОстаток КАК Количество,
	|		ТоварыОстатки.КоличествоПоРНПТОстаток КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
	|			,
	|			Организация = &Организация
	|			И Соглашение = &Соглашение
	|			И (АналитикаУчетаНоменклатуры, НомерГТД) В
	|					(ВЫБРАТЬ
	|						ДанныеАналитики.Аналитика,
	|						ДанныеАналитики.НомерГТД
	|					ИЗ
	|						ВТАналитикиУчетаНоменклатуры КАК ДанныеАналитики)
	|		
	|		) КАК ТоварыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.МестоХранения КАК ПодменноеПолеМестоХранения,
	|		ТоварыСторно.НомерГТД КАК НомерГТД,
	|		-ТоварыСторно.Количество КАК Количество,
	|		-ТоварыСторно.КоличествоПоРНПТ КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыСторно
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАналитикиУчетаНоменклатуры КАК ДанныеАналитики
	|			ПО ТоварыСторно.АналитикаУчетаНоменклатуры = ДанныеАналитики.Аналитика
	|			И ТоварыСторно.НомерГТД = ДанныеАналитики.НомерГТД
	|	
	|	ГДЕ
	|		ТоварыСторно.Регистратор = &ИсключаемыйДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТоварыОстатки.АналитикаУчетаНоменклатуры.МестоХранения КАК ПодменноеПолеМестоХранения,
	|		ТоварыОстатки.НомерГТД КАК НомерГТД,
	|		ВЫБОР
	|			КОГДА &ЭтоОтчетОСписании
	|				ТОГДА ТоварыОстатки.КоличествоСписаноОстаток
	|			ИНАЧЕ ТоварыОстатки.КоличествоОстаток
	|		КОНЕЦ КАК Количество,
	|		ВЫБОР
	|			КОГДА &ЭтоОтчетОСписании
	|				ТОГДА ТоварыОстатки.КоличествоСписаноКОформлениюПоРНПТОстаток
	|			ИНАЧЕ ТоварыОстатки.КоличествоКОформлениюПоРНПТОстаток
	|		КОНЕЦ КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(
	|			,
	|			(АналитикаУчетаНоменклатуры, НомерГТД) В
	|					(ВЫБРАТЬ
	|						ДанныеАналитики.Аналитика,
	|						ДанныеАналитики.НомерГТД
	|					ИЗ
	|						ВТАналитикиУчетаНоменклатуры КАК ДанныеАналитики)
	|		
	|		) КАК ТоварыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.Номенклатура,
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.Характеристика,
	|		ТоварыСторно.АналитикаУчетаНоменклатуры.МестоХранения,
	|		ТоварыСторно.НомерГТД КАК НомерГТД,
	|		ВЫБОР
	|			КОГДА &ЭтоОтчетОСписании
	|				ТОГДА -ТоварыСторно.КоличествоСписано
	|			ИНАЧЕ -ТоварыСторно.Количество
	|		КОНЕЦ КАК Количество,
	|		ВЫБОР
	|			КОГДА &ЭтоОтчетОСписании
	|				ТОГДА -ТоварыСторно.КоличествоСписаноКОформлениюПоРНПТ
	|			ИНАЧЕ -ТоварыСторно.КоличествоКОформлениюПоРНПТ
	|		КОНЕЦ КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту КАК ТоварыСторно
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАналитикиУчетаНоменклатуры КАК ДанныеАналитики
	|			ПО ТоварыСторно.АналитикаУчетаНоменклатуры = ДанныеАналитики.Аналитика
	|				И ТоварыСторно.НомерГТД = ДанныеАналитики.НомерГТД
	|	
	|	ГДЕ
	|		ТоварыСторно.Регистратор = &ИсключаемыйДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.Характеристика КАК Характеристика,
	|		ТоварыОстатки.ДокументПриобретения КАК МестоХранения,
	|		ТоварыОстатки.НомерГТД КАК НомерГТД,
	|		ТоварыОстатки.КоличествоОстаток КАК Количество,
	|		ТоварыОстатки.КоличествоПоРНПТОстаток КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.Остатки(
	|			,
	|			Организация = &Организация
	|			И (Номенклатура, Характеристика, ДокументПриобретения, НомерГТД) В
	|					(ВЫБРАТЬ
	|						ВТТовары.Номенклатура,
	|						ВТТовары.Характеристика,
	|						ВТТовары.ПодменноеПолеМестоХранения,
	|						ВТТовары.НомерГТД
	|					ИЗ
	|						ВТТовары КАК ВТТовары)
	|		
	|		) КАК ТоварыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыСторно.Номенклатура КАК Номенклатура,
	|		ТоварыСторно.Характеристика КАК Характеристика,
	|		ТоварыСторно.ДокументПриобретения КАК ПодменноеПолеМестоХранения,
	|		ТоварыСторно.НомерГТД КАК НомерГТД,
	|		-ТоварыСторно.Количество КАК Количество,
	|		-ТоварыСторно.КоличествоПоРНПТ КАК КоличествоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках КАК ТоварыСторно
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО ТоварыСторно.Номенклатура = ВТТовары.Номенклатура
	|		И ТоварыСторно.ДокументПриобретения = ВТТовары.ПодменноеПолеМестоХранения
	|		И ТоварыСторно.НомерГТД = ВТТовары.НомерГТД
	|	
	|	ГДЕ
	|		ТоварыСторно.Регистратор = &ИсключаемыйДокумент
	|	) КАК НаборДанных
	|
	|ГДЕ
	|	НаборДанных.КоличествоРНПТ <> 0
	|	И НаборДанных.Количество <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ПодменноеПолеМестоХранения,
	|	НомерГТД";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодменноеПолеМестоХранения", ИмяПоляМестоХранения); // @query-part
	ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТКоэффициентыТоваров");
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура		КАК Номенклатура,
	|	Товары.Характеристика	КАК Характеристика,
	|	Товары.ПодменноеПолеМестоХранения	КАК ПодменноеПолеМестоХранения,
	|	Товары.НомерГТД			КАК НомерГТД,
	|	1						КАК Коэффициент,
	|	Товары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|ПОМЕСТИТЬ ВТКоэффициентыДляТоваровБезОстатка
	|ИЗ
	|	ВТТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыТоваров КАК КоэффициентыТоваров
	|		ПО Товары.Номенклатура = КоэффициентыТоваров.Номенклатура
	|			И Товары.Характеристика = КоэффициентыТоваров.Характеристика
	|			И Товары.ПодменноеПолеМестоХранения = КоэффициентыТоваров.ПодменноеПолеМестоХранения
	|			И Товары.НомерГТД = КоэффициентыТоваров.НомерГТД
	|
	|ГДЕ
	|	КоэффициентыТоваров.Номенклатура ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодменноеПолеМестоХранения", ИмяПоляМестоХранения); // @query-part
	ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТКоэффициентыДляТоваровБезОстатка");
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура		КАК Номенклатура,
	|	Товары.Характеристика	КАК Характеристика,
	|	Товары.ПодменноеПолеМестоХранения	КАК ПодменноеПолеМестоХранения,
	|	Товары.НомерГТД			КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА КоэффициентыТоваров.Коэффициент > 0
	|			ТОГДА КоэффициентыТоваров.Коэффициент
	|		ИНАЧЕ -КоэффициентыТоваров.Коэффициент
	|	КОНЕЦ								КАК Коэффициент,
	|	Товары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|ИЗ
	|	ВТТовары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициентыТоваров КАК КоэффициентыТоваров
	|		ПО Товары.Номенклатура = КоэффициентыТоваров.Номенклатура
	|			И Товары.Характеристика = КоэффициентыТоваров.Характеристика
	|			И Товары.ПодменноеПолеМестоХранения = КоэффициентыТоваров.ПодменноеПолеМестоХранения
	|			И Товары.НомерГТД = КоэффициентыТоваров.НомерГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеТоваров.Номенклатура		КАК Номенклатура,
	|	ДанныеТоваров.Характеристика	КАК Характеристика,
	|	ДанныеТоваров.ПодменноеПолеМестоХранения	КАК ПодменноеПолеМестоХранения,
	|	ДанныеТоваров.НомерГТД			КАК НомерГТД,
	|	ДанныеТоваров.Коэффициент		КАК Коэффициент,
	|	ДанныеТоваров.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ
	|ИЗ
	|	ВТКоэффициентыДляТоваровБезОстатка КАК ДанныеТоваров";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПодменноеПолеМестоХранения", ИмяПоляМестоХранения); // @query-part
	ТекстыЗапросов.Добавить(ТекстЗапроса, "РасчетКоличестваПоРНПТ");
	
КонецПроцедуры

//-- Локализация

#КонецОбласти
