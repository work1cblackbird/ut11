///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОФД".
// ОбщийМодуль.ОФДСлужебный.
//
// Серверные процедуры настройки и вызова обменов с ОФД:
//  - подключение команд к форме;
//  - инициализация параметров подключения;
//  - подготовка и вызов методов сервиса.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервиса(),
		443,
		НСтр("ru = 'Сервис интеграции с ОФД'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСППодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ОФД";
	Вид.ИмяПодменю = "ПодменюОФД";
	Вид.Заголовок = НСтр("ru = 'ОФД'");
	Вид.Отображение = ОтображениеКнопки.Текст;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыОФД";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	Если Не ОФД.ПолучениеДанныхИзОФДДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Команды.Добавить();
	Команда.Вид = "ОФД";
	Команда.Идентификатор = "ДанныеЧековОФД";
	Команда.Представление = НСтр("ru = 'Данные чеков ОФД'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 50;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Текст;
	Команда.ТипПараметра = Метаданные.ОпределяемыеТипы.ДокументОФДБИП.Тип;
	Команда.Назначение = "ДляОбъекта";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОФДСлужебныйКлиент.Подключаемый_ОткрытьФормуДанныеЧеков";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервиса(),
		НСтр("ru = 'ОФД'"));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПрикладнымРешением

// Возвращает настройку использования интеграции в текущей конфигурации.
//
// Возвращаемое значение:
//  Структура - данные по настройке интеграции:
//    * ИспользоватьЗагрузкуИтоговСмены - Булево - признак использования сценария сверки итогов
//        кассовой смены перед ее закрытием.
//    * ИспользоватьЗагрузкуДокументов - Булево - признак использования сценария загрузки продаж по данным ОФД,
//        просмотра перечня чеков на основании которых документ был загружен.
//    * КоличествоИспользуемыхСценариев - Число - количество  используемых в конфигурации .
//
Функция НастройкиИнтеграции() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИспользоватьЗагрузкуИтоговСмены", Ложь);
	Настройки.Вставить("ИспользоватьЗагрузкуДокументов",  Ложь);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииНастроекИнтеграции(Настройки);
	ОФДПереопределяемый.ПриОпределенииНастроекИнтеграции(Настройки);
	
	КоличествоИспользуемыхСценариев = 0;
	
	Для Каждого Настройка Из Настройки Цикл
		Если Настройка.Значение = Истина Тогда
			КоличествоИспользуемыхСценариев = КоличествоИспользуемыхСценариев + 1;
		КонецЕсли;
	КонецЦикла;
	
	Настройки.Вставить("КоличествоИспользуемыхСценариев", КоличествоИспользуемыхСценариев);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Создает описание результата операции в сервисе.
//
// Возвращаемое значение:
//  Структура - результат операции:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Восстанавливает значение даты из JSON, если значение не равно Неопределено.
//
// Параметры:
//  Свойство - Строка - имя свойства;
//  Значение - Строка, Неопределено - значение свойства;
//  ДополнительныеПараметры - Структура, Неопределено - параметры восстановления.
//
// Возвращаемое значение:
//  Дата, Неопределено - результат восстановления.
//
Функция ВосстановитьДатуJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		
		// Свойства с датами необходимо обрабатывать и хранить в формате UTC.
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
		Возврат Результат;
		
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД -
//  настройка подключения к ОФД.
//
// Возвращаемое значение:
//  Структура - настройки выполнения запросов к сервису ОФД:
//   * ИдентификаторУчастника - Строка - идентификатор участника ОФД;
//   * Используется - Булево - признак активности настройки;
//   * ТипАутентификации - Строка - способ авторизации в сервисе участника ОФД.
//
Функция ПараметрыНастройкиПодключения(НастройкаПодключения) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКОФД.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	НастройкиПодключенияКОФД.Наименование КАК Наименование,
		|	НастройкиПодключенияКОФД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКОФД КАК НастройкиПодключенияКОФД
		|ГДЕ
		|	НастройкиПодключенияКОФД.Ссылка = &НастройкаПодключения";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ИдентификаторУчастника) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен идентификатор участника ОФД для настройки %1.
				|Для продолжения работы необходимо перейти к настройкам подключения и выбрать ОФД из списка доступных.'"),
			ВыборкаДетальныеЗаписи.Наименование);
	КонецЕсли;
	
	ПараметрыНастройкиПодключения = Новый Структура;
	ПараметрыНастройкиПодключения.Вставить("ИдентификаторУчастника", ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
	ПараметрыНастройкиПодключения.Вставить("НастройкаПодключения",   ВыборкаДетальныеЗаписи.Ссылка);
	ПараметрыНастройкиПодключения.Вставить("Наименование",           ВыборкаДетальныеЗаписи.Наименование);
	
	Возврат ПараметрыНастройкиПодключения;
	
КонецФункции

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения() Экспорт
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка() Экспорт
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль() Экспорт
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросовСервиса

// Определяет URL для вызова сервиса получения данных из ОФД.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция, ПубличнаяОперация) Экспорт
	
	Возврат "https://"
		+ ХостСервиса()
		+ ?(ПубличнаяОперация, "/public/program-1c/public", "/public/program-1c/private")
		+ Операция;
	
КонецФункции

// Добавляет в запись JSON параметры клиента.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации.
//
Процедура ЗаписатьПараметрыКлиента(ЗаписьДанныхСообщения) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientInfo");
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//    Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
		
	Иначе
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Создает структуру настроек подключения к сервису ОФД.
//
// Возвращаемое значение:
//  Структура - настройки подключения:
//   *НастройкиПроксиСервера - Структура - параметры прокси сервера.
//
Функция ИнициализироватьПараметрыПодключения() Экспорт
	
	Возврат ОФДПовтИсп.ИнициализироватьПараметрыПодключения();
	
КонецФункции

// Определяет по коду состояния и коду ошибки сервиса тип ошибки для потребителей.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса;
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния) Экспорт
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 404
		Или КодСостояния = 422 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат "ТребуетсяОплата";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "ОтсутствуетДоступКСервису";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию ПереопределитьКодОшибкиСервиса.
//  СодержимоеОтвета  - Строка, Структура - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки, СодержимоеОтвета = "") Экспорт
	
	КодОшибкиСервиса = "";
	Если ЗначениеЗаполнено(СодержимоеОтвета) Тогда
		КодОшибкиСервиса = ОпределитьКодОшибкиСервиса(СодержимоеОтвета);
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису ОФД.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "PROVIDER_NOT_FOUND" Тогда
		Возврат НСтр("ru = 'Неизвестный провайдер. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_PROGRAM" Тогда
		Возврат НСтр("ru = 'Неизвестный идентификатор программы. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "NOT_FOUND" Тогда
		Возврат НСтр("ru = 'Касса не найдена. Проверьте настройки подключения к ОФД.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "SHIFT_NOT_FOUND" Тогда
		Возврат НСтр("ru = 'Данные по смене не найдены. Проверьте правильность передаваемого номера смены.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "INTEGRATION_IS_NOT_SUPPORTED_1C" Тогда
		Возврат НСтр("ru = 'Интеграция с ОФД не поддерживается. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "CASH_REGISTER_DEACTIVATION_LIMIT_EXCEEDED" Тогда
		Возврат НСтр("ru = 'Превышен лимит отключений кассы.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "CASH_REGISTER_NOT_ACTIVATED" Тогда
		Возврат НСтр("ru = 'Касса не подключена, сначала необходимо подключить кассу.'"); 
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "PROVIDER_DISABLED" Тогда
		Возврат НСтр("ru = 'Интеграция с ОФД отключена.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
		И КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
		И КодОшибкиСервиса = "BAD_CREDENTIALS" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации в сервисе ОФД.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
		Возврат НСтр("ru = 'Ошибка авторизации. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "USER_AUTHORISATION_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "AUTHORIZATION_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису ОФД.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ТребуетсяОплата"
		И КодОшибкиСервиса = "NO_TARIFF_FOUND" Тогда
		Возврат НСтр("ru = 'Не найден подходящий тариф, требуется оплата.'");
	КонецЕсли;
	
	Если КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS_1C" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису 1С с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису ОФД с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	КонецЕсли;
	
	Если КодОшибки = "СервисВременноНеДоступен"
		И КодОшибкиСервиса = "SERVICE_UNAVAILABLE_PAYMENT" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису ОФД.
			|Сервис временно недоступен. Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Портала 1С:ИТС. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	КонецЕсли;
	
	Если КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "UNKNOWN_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Сервис ОФД вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "UNKNOWN_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Сервис вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "BACKEND_CONNECTION_ERROR" Тогда
		Возврат НСтр("ru = 'Сервис ОФД не ответил в установленное время. Повторите операцию или обратитесь в техническую поддержку ОФД.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом ОФД.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису ОФД.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
КонецФункции

// Формирует стандартные заголовки для вызова операции.
//
// Возвращаемое значение:
//  Соответствие - заголовки операции.
//
Функция НовыйЗаголовкиВызоваОперации() Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	Возврат Заголовки;
	
КонецФункции

// Формирует заголовок аутентификации для запроса в сервис ОФД.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - настройки аутентификации в сервисе;
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокАвторизацииОФД(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	Если ДанныеАутентификации.type = "BASIC" Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password);
	ИначеЕсли ДанныеАутентификации.type = "BEARER" Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации(
			ДанныеАутентификации.token);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Определяет доступность использования функциональности подключения
// к ОФД на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, настройка подключения к ОФД доступна.
//
Функция СлужебнаяНастройкаПодключенияДоступна() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиПодключенияКОФД)
		И ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиПодключенияКОФД);
	
КонецФункции

// Определяет доступность получения данных от сервиса ОФД.
//
// Возвращаемое значение:
//  Булево - если Истина, получение данных доступно.
//
Функция ПолучениеДанныхИзОФДДоступно() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиПодключенияКОФД)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДокументыОФД);
	
КонецФункции

#КонецОбласти

#Область НастройкиАутентификацииНаФормах

// Добавляет настройки аутентификации на переданную форму.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  ДанныеНастройки = Структура - Содержит описание настройки подключения к ОФД:
//    *НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД,
//    *ТипАутентификации - Строка - Тип аутентификации в сервисе ОФД,
//    *НаименованиеУчастника - Строка - Наименование ОФД.
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки.
//
Процедура ДобавитьНастройкиАутентификации(
		Форма,
		Группа,
		ДанныеНастройки,
		ПараметрыПодсказки) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНастройки.НастройкаПодключения) Тогда
		
		ЗначенияНастроек = ЗначениеНастроекАутентификации(
			ДанныеНастройки.НастройкаПодключения);
			
		Если ПустаяСтрока(ДанныеНастройки.ТипАутентификации) Тогда
			ДанныеНастройки.ТипАутентификации = ЗначенияНастроек.Получить("ТипАутентификации");
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки = НовыйНастройкиАутентификации(ДанныеНастройки.ТипАутентификации, ПараметрыПодсказки);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(ДанныеНастройки.НастройкаПодключения)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	Форма.Настройки.Вставить("НастройкиАутентификации", Настройки.Реквизиты);
	
	Если ПараметрыПодсказки.ОтобразитьПодсказку Тогда
		Форма.Элементы.ДекорацияПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
			Настройки.Подсказка,
			ПараметрыПодсказки.АдресЛичногоКабинета,
			ДанныеНастройки.НаименованиеУчастника);
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.РежимПароля = ОписаниеРеквизита.РежимПароля;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		НовыйЭлемент.Подсказка = ОписаниеРеквизита.Подсказка;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
		Если ОписаниеРеквизита.РежимПароля = Истина Тогда
			НовыйЭлемент.УстановитьДействие(
				"ПриИзменении",
				"Подключаемый_ПриИзмененииНастройкиАутентификации");
			НовыйЭлемент.УстановитьДействие(
				"НачалоВыбора",
				"Подключаемый_НачалоВыбораНастройкиАутентификации");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеНастройки.НастройкаПодключения) Тогда
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Удаляет настройки аутентификации на переданной форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которой необходимо удалить настройки.
//
Процедура УдалитьНастройкиАутентификации(Форма) Экспорт
	
	// Если настройки не сформированы, удалять
	// ничего не нужно.
	Если Форма.Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Настройки.Свойство("НастройкиАутентификации") Тогда // АПК:1415 Реквизиты добавляются программно
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого НастройкиАутентификации Из Форма.Настройки.НастройкиАутентификации Цикл
		УдаляемыеРеквизиты.Добавить(НастройкиАутентификации.Имя);
		Форма.Элементы.Удалить(Форма.Элементы[НастройкиАутентификации.Имя]);
	КонецЦикла;

	Форма.ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
КонецПроцедуры

// Формирует декларативное описание настроек аутентификации.
//
// Параметры:
//  ТипАутентификации - Строка - идентификатор типа аутентификации;
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиАутентификации(ТипАутентификации, ПараметрыПодсказки)
	
	Реквизиты = Новый Массив;
	
	Если ПараметрыПодсказки.ОтобразитьПодсказку Тогда
		Подсказка =
			НСтр("ru = 'Для подключения к ОФД заполните настройки. Получить данные для настройки можно в <a href=""%1"">%2</a>.'");
	Иначе
		Подсказка = "";
	КонецЕсли;
	
	НастройкиАутентификации(ТипАутентификации, Реквизиты);
	
	Настройки = Новый Структура;
	Настройки.Вставить("Реквизиты", Реквизиты);
	Настройки.Вставить("Подсказка", Подсказка);
	
	Возврат Настройки;
	
КонецФункции

// Производит проверку заполнения данных аутентификации.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для проверки настроек;
//  Отказ - Булево - если Истина, запись данные не производится.
//
Процедура ПроверитьНастройкиАутентификации(Форма, Отказ) Экспорт
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит получение данных аутентификации из формы настройки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для получения настроек;
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция НастройкиАутентификацииПоДаннымФормы(Форма) Экспорт
	
	ПараметрыАутентификации = Новый Соответствие;
	Для Каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		// Обработка ошибки ввода данных аутентификации пользователем.
		Если Форма[ОписаниеРеквизита.Имя] <> УдалитьНечитаемыеСимволы(Форма[ОписаниеРеквизита.Имя]) Тогда
			Форма[ОписаниеРеквизита.Имя] = УдалитьНечитаемыеСимволы(Форма[ОписаниеРеквизита.Имя]);
		КонецЕсли;
		ПараметрыАутентификации.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  РежимПароля - Булево - признак использования режима пароля;
//  Подсказка - Строка - подсказка для поля формы.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		РежимПароля = Ложь,
		Подсказка = "")
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип",                Тип);
	ОписаниеПоля.Вставить("Имя",                Имя);
	ОписаниеПоля.Вставить("Синоним",            Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("РежимПароля",        РежимПароля);
	ОписаниеПоля.Вставить("Подсказка",          Подсказка);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКОФД") Тогда
		ОписаниеПоля.Вставить("НастройкаПодключения", Истина);
	Иначе
		ОписаниеПоля.Вставить("НастройкаПодключения", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

#КонецОбласти

#Область НастройкиОФД

// Формирует декларативное описание настроек аутентификации.
//
// Параметры:
//  ТипАутентификации - Строка - Идентификатор типа аутентификации;
//  Реквизиты - Массив из Структура - декларативное описание настройки;
//
Процедура НастройкиАутентификации(
		ТипАутентификации,
		Реквизиты)
	
	Если Врег(ТипАутентификации) = "BASIC" Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Логин",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Логин'"),
				Истина));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Пароль",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Пароль'"),
				Истина,
				Истина));
	ИначеЕсли Врег(ТипАутентификации) = "BEARER" Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Токен",
				ОбщегоНазначения.ОписаниеТипаСтрока(1000),
				НСтр("ru = 'Токен'"),
				Истина,
				Истина));
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации у ОФД.'");
	КонецЕсли;
	
КонецПроцедуры

// Производит получение данных аутентификации из безопасного хранилища.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ЗначениеНастроекАутентификации(НастройкаПодключения)
	
	Результат = Новый Соответствие;
	Данные = СервисИнтеграцииСОФД.ПолучитьНастройкиАутентификации(НастройкаПодключения);
	
	// При переходе в облако или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если Данные.type = "BASIC" Тогда
		Если ЗначениеЗаполнено(Данные) Тогда
			Результат.Вставить("Логин", Данные.login);
			Результат.Вставить("Пароль", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Иначе
			Результат.Вставить("Логин", "");
			Результат.Вставить("Пароль", "");
		КонецЕсли;
	ИначеЕсли Данные.type = "BEARER" Тогда
		Если ЗначениеЗаполнено(Данные) Тогда
			Результат.Вставить("Токен", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
		Иначе
			Результат.Вставить("Токен", "");
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации участника ОФД.'");
	КонецЕсли;
	
	Результат.Вставить("ТипАутентификации", Данные.type);
	
	Возврат Результат;
	
КонецФункции

// Выполняет преобразование параметров аутентификации в формат
// хранения и выполнения запросов к сервису.
//
// Параметры:
//  ПараметрыАутентификации - Соответствие - настройки аутентификации в сервисе;
//  Сохранение - Булево - признак обработки сохранения данных
//
// Возвращаемое значение:
//  Структура - преобразованные настройки аутентификации.
//
Функция ПреобразоватьНастройкиАутентификации(ПараметрыАутентификации, Сохранение = Ложь)
	
	ТипАутентификации = ПараметрыАутентификации.Получить("ТипАутентификации");
	
	ДанныеАутентификации = Новый Структура;
	
	Если ТипАутентификации = "BASIC" Тогда
		ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
		ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
	ИначеЕсли ТипАутентификации = "BEARER" Тогда
		ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	ДанныеАутентификации.Вставить("type", ТипАутентификации);
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// Выполняет сохранение настроек аутентификации в безопасном хранилище.
//
// НастройкаПодключения:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОФД - настройка подключения к ОФД.
//  ПараметрыАутентификации - Соответствие - настройки аутентификации.
//
Процедура СохранитьНастройкиАутентификации(
		НастройкаПодключения,
		Знач ПараметрыАутентификации) Экспорт
		
	// Обработка ошибки ввода данных аутентификации пользователем.
	Для Каждого ПараметрАутентификации Из ПараметрыАутентификации Цикл
		ПараметрыАутентификации.Вставить(
			ПараметрАутентификации.Ключ,
			УдалитьНечитаемыеСимволы(
				ПараметрАутентификации.Значение));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыАутентификации.Получить("ТипАутентификации") = "BASIC" Тогда
		
		Если ПараметрыАутентификации.Получить("Пароль") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
				НастройкаПодключения);
			ПараметрыАутентификации.Вставить("Пароль", Данные.password);
		КонецЕсли;
	
	ИначеЕсли ПараметрыАутентификации.Получить("ТипАутентификации") = "BEARER" Тогда
		
		Если ПараметрыАутентификации.Получить("Токен") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
				НастройкаПодключения);
			ПараметрыАутентификации.Вставить("Токен", Данные.token);
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		НастройкаПодключения,
		ПреобразоватьНастройкиАутентификации(ПараметрыАутентификации, Истина));
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПодключения

// Определяет хост для вызова сервиса интеграции с ОФД.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервиса()
	
	
	Возврат "ofd-integration.1c.ru";
	
КонецФункции

#КонецОбласти

#Область НастройкиПодключения

// Получает актуальный список ОФД с которыми возможна интеграция.
//
// Возвращаемое значение:
//  Структура - содержит данные участников ОФД
//
Функция ПолучитьУчастниковОФД() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеУчастников", Новый Структура);
	
	РезультатВызова = СервисИнтеграцииСОФД.ОперацияНастройкиУчастниковОФД();
	Если ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатВызова,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Для Каждого НастройкаСервис Из РезультатВызова.Настройки Цикл
		Если НастройкаСервис.integrationEnabled Тогда
			РезультатОперации.ДанныеУчастников.Вставить(
				НастройкаСервис.id,
				Новый Структура("Представление, ТипАутентификации, АдресЛичногоКабинета",
					НастройкаСервис.name,
					Врег(НастройкаСервис.authorizationType),
					НастройкаСервис.personalAccountPageUrl));
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит проверку настроек подключения к ОФД для новой настройки подключения.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника ОФД;
//  ПараметрыАутентификации - Соответствие - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки.
//
Функция ПроверитьПараметрыПодключения(
		ИдентификаторУчастника,
		ПараметрыАутентификации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ДанныеАутентификации = ПреобразоватьНастройкиАутентификации(
		ПараметрыАутентификации);
	
	ПараметрыНастройкиПодключения = Новый Структура;
	ПараметрыНастройкиПодключения.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	ПараметрыНастройкиПодключения.Вставить("НастройкаПодключения", Неопределено);
	ПараметрыНастройкиПодключения.Вставить("Используется", Истина);
	
	РезультатПроверки = СервисИнтеграцииСОФД.ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	
	Возврат Результат;
	
КонецФункции

// Производит проверку настроек подключения к ОФД для существующей настройки подключения.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой настройки подключения;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключенияОбъект(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАутентификации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыПроцедуры.НастройкаПодключения);
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = СервисИнтеграцииСОФД.ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения(
			ПараметрыПроцедуры.НастройкаПодключения),
		ПараметрыАутентификации);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Определяет доступность использования функциональности подключения
// к ОФД на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, настройка подключения к оператору фискальных данных доступна.
//
Функция НастройкаПодключенияДоступна() Экспорт
	
	Возврат ОФДПовтИсп.НастройкаПодключенияДоступна();
	
КонецФункции

// Получает список касс ККТ в сервисе ОФД.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные настройки подключения.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * ДанныеКасс - Массив из Структура - Содержит описание доступных касс ККТ в разрезе магазинов
//      по настройке подключения.
//
Функция КассыНастройкиПодключения(ПараметрыПроцедуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАутентификации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыПроцедуры.НастройкаПодключения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СервисИнтеграцииСОФД.ОперацияСписокКасс(
		ПараметрыНастройкиПодключения(ПараметрыПроцедуры.НастройкаПодключения),
		ПараметрыАутентификации);
	
КонецФункции

// Проверяет наличие настройки подключения кассы.
//
// Параметры:
//  Касса - ОпределяемыйТИП.КассаОФДБИП - касса по которой выполняется запрос.
//
// Возвращаемое значение:
//  Булево - если Истина, настройка подключения выполнена.
//
Функция ПодключениеНастроено(Касса) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиКассОФД.НастройкаПодключения КАК НастройкаПодключения,
		|	НастройкиКассОФД.НастройкаПодключения.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	НастройкиКассОФД.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
		|	НастройкиКассОФД.ЗаводскойНомерФН КАК ЗаводскойНомерФН
		|ИЗ
		|	РегистрСведений.НастройкиКассОФД КАК НастройкиКассОФД
		|ГДЕ
		|	НастройкиКассОФД.Касса = &Касса";
	
	Запрос.УстановитьПараметр("Касса", Касса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НастройкаПодключения)
		И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторУчастника)
		И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РегистрационныйНомерККТ)
		И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаводскойНомерФН) Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Производит чтение кода ошибки сервиса из тела ответа.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ОпределитьКодОшибкиСервиса(ОтветСервиса)
	
	// Ответ сервиса:
	//
	//  {
	//  "type": "string",
	//  "title": "string",
	//  "status": "string",
	//  "detail": "string",
	//  "instance": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		Если ТипЗнч(ОтветСервиса) = Тип("Строка") Тогда
			ЧтениеОтвета = Новый ЧтениеJSON;
			ЧтениеОтвета.УстановитьСтроку(ОтветСервиса);
			Результат = ПрочитатьJSON(ЧтениеОтвета);
			Возврат Результат.type;
		ИначеЕсли ТипЗнч(ОтветСервиса) = Тип("Структура") Тогда
			Возврат ОтветСервиса.type;
		Иначе
			Возврат "";
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ВалидацияНастроекКассы

// Производит валидацию общих параметров перед вызовом сервиса.
//
// Параметры:
//  Касса - ОпределяемыйТип.КассаОФДБИП - Касса, по которой выполняется запрос.
//  РезультатОперации  - Структура - результат проверки:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьНастройкиПодключения(Касса, РезультатОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(Касса) Тогда
		
		РезультатОперации.КодОшибки          = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не указана касса по которой выполняется запрос.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для получения данных необходимо указать кассу.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'ОФД'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Удаляет нечитаемые символы из строки.
//
// Параметры:
//  ИсходнаяСтрока - Строка - данные аутентификации, которые необходимо обработать.
//
// Возвращаемое значение:
//  Строка - резудьтат обработки данных аутентификации.
//
Функция УдалитьНечитаемыеСимволы(Знач ИсходнаяСтрока) Экспорт
	
	НечитаемыеСимволы = Новый Массив();
	НечитаемыеСимволы.Добавить(Символы.ВК);
	НечитаемыеСимволы.Добавить(Символы.ВТаб);
	НечитаемыеСимволы.Добавить(Символы.НПП);
	НечитаемыеСимволы.Добавить(Символы.ПС);
	НечитаемыеСимволы.Добавить(Символы.ПФ);
	НечитаемыеСимволы.Добавить(Символы.Таб);
	НечитаемыеСимволы.Добавить(Символ(182)); // символ параграфа
	НечитаемыеСимволы.Добавить(Символ(176)); // символ градуса
	НечитаемыеСимволы.Добавить(" ");
	
	Для Каждого НечитаемыйСимвол Из НечитаемыеСимволы Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, НечитаемыйСимвол, "");
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Создает описание параметров подсказки настройки подключения.
//
// Возвращаемое значение:
//  Структура - результат создания параметров подсказки:
//   *ОтобразитьПодсказку - Булево - признак отображения подсказки;
//   *АдресЛичногоКабинета - Строка - ссылка для перехода в личный кабинет.
//
Функция НовыйПараметрПодсказки() Экспорт
	
	ПараметрыПодсказки = Новый Структура;
	ПараметрыПодсказки.Вставить("ОтобразитьПодсказку", Ложь);
	ПараметрыПодсказки.Вставить("АдресЛичногоКабинета", "");
	
	Возврат ПараметрыПодсказки;
	
КонецФункции

// Формирует идентификатор для отображения скрытых символов на форме.
//
//
// Возвращаемое значение:
//  Строка - служебный идентификатор.
//
Функция СтрокаСекретныхДанныхПоУмолчанию()
	
	Возврат "18172039-3c24-4353-ab2f-7927712f71a7";
	
КонецФункции

#КонецОбласти

#КонецОбласти
