////////////////////////////////////////////////////////////////////////////////
// Подсистема "Коммерческие предложения".
// ОбщийМодуль.КоммерческиеПредложенияСлужебный.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗапросКоммерческихПредложений

#Область Исходящий

// Отправка запроса коммерческих предложений в ходе фонового задания.
// См. КоммерческиеПредложенияКлиент.ОтправитьЗапросКоммерческихПредложений.
// 
// Параметры:
//   ПараметрыОтправки - Структура.
//  
// Возвращаемое значение:
//   Структура - результат отправки:
//   * СостояниеДокумента - Структура.
//   * ДлительнаяОперация - Структура.
//
Функция ОтправитьЗапросКоммерческихПредложенийАсинхронно(Знач ПараметрыОтправки) Экспорт
	
	Результат = Новый Структура("СостояниеДокумента, ДлительнаяОперация");
	
	Если ЗапросКоммерческихПредложенийПоставщиковЗанят(ПараметрыОтправки.ЗапросКоммерческихПредложений) Тогда
		
		Результат.СостояниеДокумента = КоммерческиеПредложения.СостояниеЗапросаКоммерческихПредложенийПоставщиков(
			ПараметрыОтправки.ЗапросКоммерческихПредложений);
		
	Иначе
		
		ИмяПроцедуры = "КоммерческиеПредложенияСлужебный.ОтправитьЗапросКоммерческихПредложений";
		
		КлючФоновогоЗадания = КлючФоновогоЗаданияПоДокументу(ПараметрыОтправки.ЗапросКоммерческихПредложений, ИмяПроцедуры);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка Запроса коммерческих предложений.'");
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОтправки,
			ПараметрыВыполнения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отправка Запроса коммерческих предложений.
// См. КоммерческиеПредложенияКлиент.ОтправитьЗапросКоммерческихПредложений.
//
Процедура ОтправитьЗапросКоммерческихПредложений(Знач ПараметрыОтправки, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	РезультатОперации = Новый Структура;
	
	ЗапросКоммерческихПредложений = ПараметрыОтправки.ЗапросКоммерческихПредложений;
	
	ДействиеДобавить   = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Добавить;
	ДействиеУдалить    = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Удалить;
	
	СостояниеВыполняется = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполняется;
	СостояниеВыполнена   = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	СостояниеОшибка      = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
	
	СпособСервис                = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.Сервис;
	СпособБезЭлектроннойПодписи = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.БезЭлектроннойПодписи;
	СпособСЭлектроннойПодписью  = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.СЭлектроннойПодписью;
	
	СостояниеДокумента = НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков(ЗапросКоммерческихПредложений);
	
	// Получение данных Запроса коммерческих предложений.
	ДанныеЗапроса = ДанныеЗапросаКоммерческихПредложенийПоставщиков(ЗапросКоммерческихПредложений, Истина, Отказ);
	
	Если Отказ Тогда
		
		ПредставлениеОшибки = НСтр("ru = 'Отправка документа отменена.'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Отправка Запроса коммерческих предложений поставщикам'"),
			ПредставлениеОшибки,,
			КодСобытияКоммерческиеПредложения());
		
		ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, "", СостояниеОшибка,
			ПредставлениеОшибки);
		
		ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
		
		РезультатОперации.Вставить("СостояниеДокумента", СостояниеДокумента);
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
		
		Возврат;
		
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не БизнесСеть.ИспользоватьОбменБизнесСеть() Тогда
		Константы.ИспользоватьОбменБизнесСеть.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Определение текущего плана синхронизации.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка КАК Ссылка,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации КАК СпособСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Дата КАК Дата,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Номер КАК Номер
	|ПОМЕСТИТЬ ПланСинхронизации
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Требуется)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Дата,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Номер
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланСинхронизации.Ссылка КАК Ссылка,
	|	ПланСинхронизации.СпособСинхронизации КАК СпособСинхронизации,
	|	ПланСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	ПланСинхронизации.Дата КАК Дата,
	|	ПланСинхронизации.Номер КАК Номер
	|ИЗ
	|	ПланСинхронизации КАК ПланСинхронизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСинхронизации.СпособСинхронизации.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланСинхронизации.Ссылка КАК Основание,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Контрагент КАК Получатель
	|ИЗ
	|	ПланСинхронизации КАК ПланСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Получатели КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели
	|		ПО ПланСинхронизации.Ссылка = ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСинхронизации.СпособСинхронизации.Порядок
	|ИТОГИ ПО
	|	Основание";
	
	Запрос.УстановитьПараметр("ДокументВладелец", ЗапросКоммерческихПредложений);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПерваяОтправка    = Результат[1].Пустой();
	ПланСинхронизации = Результат[1].Выгрузить(); // ТаблицаЗначений
	
	ПланСинхронизации.Колонки.Добавить("ЭтотОбъект",
		Новый ОписаниеТипов("СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений"));
	
	ПолучателиПоОснованиям = Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОснованияИПолучатели = Новый Соответствие;
	Для Каждого ГруппировкаОснование Из ПолучателиПоОснованиям.Строки Цикл
		
		Если ГруппировкаОснование.Строки.Количество() > 1 Тогда
			
			Получатели = Новый Массив;
			Для Каждого ГруппировкаПолучатель Из ГруппировкаОснование.Строки Цикл
				Получатели.Добавить(ГруппировкаПолучатель.Получатель);
			КонецЦикла;
			
		Иначе
			Получатели = ?(ГруппировкаОснование.Строки.Количество(), ГруппировкаОснование.Строки[0].Получатель, Неопределено);
		КонецЕсли;
		
		ОснованияИПолучатели.Вставить(ГруппировкаОснование.Основание, Получатели);
		
	КонецЦикла;
	
	ПараметрыОтправкиЗапроса = ПараметрыОтправкиЗапросаКоммерческихПредложений(ДанныеЗапроса.ДанныеДокумента);
	
	Организация = ПараметрыОтправкиЗапроса.Организация;
	Адресаты    = ПараметрыОтправкиЗапроса.Адресаты;
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	
	КоличествоАдресатов = Адресаты.Количество();
	
	Если ПерваяОтправка Тогда
		
		ИспользоватьОбменЧерезЭДО = Ложь;
			
		АдресатыЭДО = Новый Соответствие;
		Если ИспользоватьОбменЧерезЭДО Тогда
			
			ОписаниеОбъектаУчета = ОбменСКонтрагентамиИнтеграция.НовоеОписаниеОбъектаУчета();
			ОписаниеОбъектаУчета.Организация = Организация;
			ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Исходящий;
			ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений;
			
			Для Каждого Получатель Из Адресаты Цикл
				
				ОписаниеОбъектаУчета.Контрагент = Получатель;
				
				НастройкиОбмена = ОбменСКонтрагентамиИнтеграция.НастройкиОтправки(ОписаниеОбъектаУчета);
					
				Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Формировать Тогда
					АдресатыЭДО.Вставить(Получатель, Истина);
				КонецЕсли;
					
			КонецЦикла;
				
		КонецЕсли;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗапросКоммерческихПредложений, "Дата, Номер");
		
		НачатьТранзакцию();
		
		Попытка
			
			// Добавление основания для отправки документа в сервис.
			ОснованиеОбъект = Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СоздатьЭлемент();
			ОснованиеОбъект.ДокументВладелец = ЗапросКоммерческихПредложений;
			ОснованиеОбъект.СпособСинхронизации = СпособСервис;
			ОснованиеОбъект.КлючИдемпотентности = Строка(Новый УникальныйИдентификатор());
			ОснованиеОбъект.Организация = Организация;
			ОснованиеОбъект.ДействиеСинхронизации = ДействиеДобавить;
			ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполняется;
			ОснованиеОбъект.Записать();
			
			ЭлементПлана = ПланСинхронизации.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементПлана, ОснованиеОбъект);
			ЭлементПлана.Дата  = РеквизитыДокумента.Дата;
			ЭлементПлана.Номер = РеквизитыДокумента.Номер;
			
			// Определение дополнительных каналов.
			Если КоличествоАдресатов
				И Не ПараметрыОтправкиЗапроса.ЧерныйСписок Тогда
				
				АдресатыБизнесСеть = Новый Массив;
				
				Если АдресатыЭДО.Количество() Тогда
					
					Для Каждого Адресат Из Адресаты Цикл
						
						Если АдресатыЭДО[Адресат] = Неопределено Тогда
							
							АдресатыБизнесСеть.Добавить(Адресат);
							
						Иначе
							
							ОснованиеОбъект = Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СоздатьЭлемент();
							ОснованиеОбъект.ДокументВладелец = ЗапросКоммерческихПредложений;
							ОснованиеОбъект.СпособСинхронизации = СпособСЭлектроннойПодписью;
							ОснованиеОбъект.Организация = Организация;
							ОснованиеОбъект.ДействиеСинхронизации = ДействиеДобавить;
							ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполняется;
							ОснованиеОбъект.Получатели.Добавить().Контрагент = Адресат;
							ОснованиеОбъект.Записать();
							
							ЭлементПлана = ПланСинхронизации.Добавить();
							ЗаполнитьЗначенияСвойств(ЭлементПлана, ОснованиеОбъект);
							ЭлементПлана.Дата  = РеквизитыДокумента.Дата;
							ЭлементПлана.Номер = РеквизитыДокумента.Номер;
							
							ОснованияИПолучатели.Вставить(ОснованиеОбъект.Ссылка, Адресат);
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					АдресатыБизнесСеть = Адресаты;
					
				КонецЕсли;
				
				Если АдресатыБизнесСеть.Количество() Тогда
					
					ОснованиеОбъект = Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СоздатьЭлемент();
					ОснованиеОбъект.ДокументВладелец = ЗапросКоммерческихПредложений;
					ОснованиеОбъект.СпособСинхронизации = СпособБезЭлектроннойПодписи;
					ОснованиеОбъект.Организация = Организация;
					ОснованиеОбъект.ДействиеСинхронизации = ДействиеДобавить;
					ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполняется;
					
					Для Каждого Адресат Из АдресатыБизнесСеть Цикл
						ОснованиеОбъект.Получатели.Добавить().Контрагент = Адресат;
					КонецЦикла;
					
					ОснованиеОбъект.Записать();
					
					ЭлементПлана = ПланСинхронизации.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементПлана, ОснованиеОбъект);
					ЭлементПлана.Дата  = РеквизитыДокумента.Дата;
					ЭлементПлана.Номер = РеквизитыДокумента.Номер;
					
					ОснованияИПолучатели.Вставить(ОснованиеОбъект.Ссылка, АдресатыБизнесСеть);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru = 'Ошибка подготовки данных для первой отправки.'");
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(
				НСтр("ru = 'Отправка Запроса коммерческих предложений поставщикам'"),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстОшибки,
				КодСобытияКоммерческиеПредложения());
			
			ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, "", СостояниеОшибка,
				ТекстОшибки);
			
			ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
			
			РезультатОперации.Вставить("СостояниеДокумента", СостояниеДокумента);
			ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Выполнение синхронизации.
	ПубликацияВСервисеВыполнена = Ложь;
	ПредставлениеОшибки = "";
	ИдентификаторСервиса = Неопределено;
	
	Если ПерваяОтправка Тогда
		
		ОснованиеОбъект = ПланСинхронизации[0].ЭтотОбъект;
		
		Если ЗначениеЗаполнено(ДанныеЗапроса.ДанныеДокумента) Тогда
			ИдентификаторСервиса = РазместитьЗапросКоммерческихПредложенийВСервисе(
														ДанныеЗапроса.ДанныеДокумента,
														ОснованиеОбъект.КлючИдемпотентности,
														ПредставлениеОшибки);
		КонецЕсли;
		
		ПубликацияВСервисеВыполнена = ЗначениеЗаполнено(ИдентификаторСервиса);
		
	Иначе
		ОснованиеОбъект = ПланСинхронизации[0].Ссылка.ПолучитьОбъект();
		
		ИдентификаторСервиса = ОснованиеОбъект.ИдентификаторСервиса;
		
		КлючИдемпотентности = ?(ОснованиеОбъект.СостояниеСинхронизации = СостояниеОшибка,
			ОснованиеОбъект.КлючИдемпотентности, Строка(Новый УникальныйИдентификатор()));
		
		НоваяВерсия = Неопределено;
		
		Если ЗначениеЗаполнено(ИдентификаторСервиса) Тогда
			
			ТекущаяВерсия = АктуальныйНомерВерсииЗапросаКоммерческихПредложенийВСервисе(
				ИдентификаторОрганизации, ИдентификаторСервиса);
			
			Если ЗначениеЗаполнено(ТекущаяВерсия) И ЗначениеЗаполнено(ДанныеЗапроса.ДанныеДокумента) Тогда
				НоваяВерсия = ОбновитьЗапросКоммерческихПредложенийВСервисе(
														ИдентификаторСервиса,
														ТекущаяВерсия,
														ДанныеЗапроса.ДанныеДокумента,
														КлючИдемпотентности,
														ПредставлениеОшибки);
			КонецЕсли;
			
			ПубликацияВСервисеВыполнена = ЗначениеЗаполнено(НоваяВерсия);
			
		Иначе
			
			Если ЗначениеЗаполнено(ДанныеЗапроса.ДанныеДокумента) Тогда
				ИдентификаторСервиса = РазместитьЗапросКоммерческихПредложенийВСервисе(
														ДанныеЗапроса.ДанныеДокумента,
														КлючИдемпотентности,
														ПредставлениеОшибки);
			КонецЕсли;
			
			ПубликацияВСервисеВыполнена = ЗначениеЗаполнено(ИдентификаторСервиса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПубликацияВСервисеВыполнена Тогда
		
		ОснованиеОбъект.ИдентификаторСервиса   = ИдентификаторСервиса;
		ОснованиеОбъект.КлючИдемпотентности    = "";
		ОснованиеОбъект.ПредставлениеОшибки    = "";
		ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполнена;
		ОснованиеОбъект.Записать();
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(ДанныеЗапроса.ДанныеДокумента,
			"ИдентификаторДокумента", ИдентификаторСервиса);
		
		Если ОснованиеОбъект.СпособСинхронизации = СпособСервис Тогда
			ПланСинхронизации.Удалить(0);
		КонецЕсли;
		
		Если Не КоличествоАдресатов
			Или ПараметрыОтправкиЗапроса.ЧерныйСписок Тогда
			
			ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, "", СостояниеВыполнена);
			
		Иначе
			Если ПерваяОтправка Тогда
				Для Каждого ЭлементПлана Из ПланСинхронизации Цикл
					ОснованиеОбъект                      = ЭлементПлана.ЭтотОбъект;
					ОснованиеОбъект.ИдентификаторСервиса = ИдентификаторСервиса;
					ОснованиеОбъект.Записать();
				КонецЦикла;
			Иначе
				Для Каждого ЭлементПлана Из ПланСинхронизации Цикл
					ОснованиеОбъект                      = ЭлементПлана.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
					ОснованиеОбъект.ИдентификаторСервиса = ИдентификаторСервиса;
					ОснованиеОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(ПредставлениеОшибки) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Ошибка работы с сервисом.'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		ОснованиеОбъект.СостояниеСинхронизации = СостояниеОшибка;
		ОснованиеОбъект.ПредставлениеОшибки    = ПредставлениеОшибки;
		ОснованиеОбъект.Записать();
		
		Если ОснованиеОбъект.СпособСинхронизации = СпособСервис Тогда
			ПланСинхронизации.Удалить(0);
		КонецЕсли;
		
		Если Не КоличествоАдресатов
			Или ПараметрыОтправкиЗапроса.ЧерныйСписок Тогда
			
			ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, "", СостояниеОшибка,
				ПредставлениеОшибки);
			
		Иначе
			
			Для Каждого ЭлементПлана Из ПланСинхронизации Цикл
				
				ОснованиеОбъект = ?(ПерваяОтправка, ЭлементПлана.ЭтотОбъект, ЭлементПлана.Ссылка.ПолучитьОбъект());
				
				ОснованиеОбъект.СостояниеСинхронизации = СостояниеОшибка;
				ОснованиеОбъект.ПредставлениеОшибки    = ПредставлениеОшибки;
				
				Если ОснованиеОбъект.Получатели.Количество() Тогда
					ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
						ОснованиеОбъект.Получатели[0].Контрагент, СостояниеОшибка, ПредставлениеОшибки);
				Иначе
					ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
						"", СостояниеОшибка, ПредставлениеОшибки);
				КонецЕсли;
				
				ОснованиеОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
		
		РезультатОперации.Вставить("СостояниеДокумента", СостояниеДокумента);
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ОснованияЭДО       = Новый Массив;
		ПараметрыОбменаЭДО = Новый Соответствие;
		
		Для Каждого ЭлементПлана Из ПланСинхронизации Цикл
			
			СписокПолучателей = ОснованияИПолучатели[ЭлементПлана.Ссылка];
			
			Если ТипЗнч(СписокПолучателей) <> Тип("Массив") Тогда
				СписокПолучателей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокПолучателей);
			КонецЕсли;
			
			Для Каждого Получатель Из СписокПолучателей Цикл
				
				// Отправка по ЭДО без ЭЦП
				Если ЗначениеЗаполнено(Получатель) Тогда
					
					Заголовок = ЗаголовокЗапросаКоммерческихПредложенийПоставщиковВБизнесСети(ЭлементПлана.Номер, ЭлементПлана.Дата);
					
					ОтправитьЗапросКоммерческихПредложенийБезЭлектроннойПодписи(ЭлементПлана.Ссылка, Организация,
						Получатель, 0, Заголовок, Отказ);
					
					СостояниеОтправки = ?(Отказ, СостояниеОшибка, СостояниеВыполнена);
					
					ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, Получатель,
						СостояниеОтправки);
					
					ОснованиеОбъект = ?(ПерваяОтправка, ЭлементПлана.ЭтотОбъект, ЭлементПлана.Ссылка.ПолучитьОбъект());
					ОснованиеОбъект.СостояниеСинхронизации = СостояниеОтправки;
					ОснованиеОбъект.Записать();
					
				КонецЕсли;
				
				Если ЭлементПлана.СпособСинхронизации = СпособСЭлектроннойПодписью Тогда
					
					Обрабатывать = Истина;
					
					Если Не ПерваяОтправка Тогда
						ЗакрытьЭлектронныйДокументПоЗапросуКоммерческихПредложенийИсходящему(СостояниеДокумента,
							ЭлементПлана.Ссылка, ОснованияИПолучатели[ЭлементПлана.Ссылка], Обрабатывать);
					КонецЕсли;
					
					Если Обрабатывать
						И ЭлементПлана.ДействиеСинхронизации <> ДействиеУдалить Тогда
						
						ОснованияЭДО.Добавить(ЭлементПлана.Ссылка);
						
						НастройкиОбменаЭДО = НастройкиОбменаЭДОПоЗапросуКоммерческихПредложенийИсходящему(Организация, Получатель);
						ПараметрыОбменаЭДО.Вставить(ЭлементПлана.Ссылка, НастройкиОбменаЭДО);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ОснованияЭДО.Количество() Тогда
			
			ОбменСКонтрагентамиИнтеграция.НачатьЭДОПоОбъектамУчета(ОснованияЭДО, ПараметрыОбменаЭДО);
			
			СостоянияОтправки = ОбменСКонтрагентамиИнтеграция.СостоянияАктуальныхДокументооборотов(ОснованияЭДО);
			
			АктуальныеДокументообороты = Новый Массив;
			
			Для Каждого СостояниеВерсии Из СостоянияОтправки Цикл
				
				АктуальныеДокументообороты.Добавить(СостояниеВерсии.Документооборот);
				
				ТекущееСостояние = Неопределено;
				ПредставлениеОшибки = "";
				
				СостояниеСинхронизацииПоСостояниюВерсииЭлектронногоДокумента(СостояниеВерсии.Состояние, ТекущееСостояние,
					ПредставлениеОшибки);
				
				ОснованиеОбъект = СостояниеВерсии.ОбъектУчета.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
				ОснованиеОбъект.СостояниеСинхронизации = ТекущееСостояние;
				ОснованиеОбъект.ПредставлениеОшибки = ПредставлениеОшибки;
				ОснованиеОбъект.Записать();
				
				Получатель = ОснованияИПолучатели[СостояниеВерсии.ОбъектУчета];
				
				Если ТипЗнч(Получатель) = Тип("Массив") Тогда
					
					Для Каждого Адресат Из Получатель Цикл
						ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, Адресат,
							ТекущееСостояние, ПредставлениеОшибки);
					КонецЦикла;
					
				Иначе
					ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, Получатель,
						ТекущееСостояние, ПредставлениеОшибки);
				КонецЕсли;
				
			КонецЦикла;
			
			РезультатОперации.Вставить("НовыеЭлектронныеДокументы", АктуальныеДокументообороты);
			
		КонецЕсли;
		
	Исключение
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Отправка Запроса коммерческих предложений поставщика'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Ошибка отправки данных.'"),
			КодСобытияКоммерческиеПредложения());
		
		ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
		
		РезультатОперации.Вставить("СостояниеДокумента", СостояниеДокумента);
		ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
		
		Возврат;
		
	КонецПопытки;
	
	ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
	
	// Вызов переопределяемого обработчика события ПослеВыполненияСинхронизации.
	Если СинхронизацияЗапросаКоммерческихПредложенийИсходящегоВыполнена(СостояниеДокумента) Тогда
		ЗапросКоммерческихПредложенийПослеВыполненияСинхронизации(СостояниеДокумента);
	КонецЕсли;
	
	РезультатОперации.Вставить("СостояниеДокумента", СостояниеДокумента);
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Возвращает перечень имен переопределяемых процедур, которые могут быть вызваны из модуля менеджера прикладного
// документа Запрос коммерческих предложений поставщиков.
//
// Возвращаемое значение:
//  Структура - Ключами Структуры являются имена процедур, значениями - признаки использования (по умолчанию - Ложь):
//              * ПослеВыполненияСинхронизации - Булево - Признак использования процедуры ПослеВыполненияСинхронизации.
//
Функция ЗапросКоммерческихПредложенийОбработчикиСобытийПереопределяемые() Экспорт
	
	ОбработчикиСобытийПереопределяемые = Новый Структура;
	ОбработчикиСобытийПереопределяемые.Вставить("ПослеВыполненияСинхронизации", Ложь);
	
	Возврат ОбработчикиСобытийПереопределяемые;
	
КонецФункции

// Проверка изменения ключевых реквизитов учетного документа Запрос коммерческих предложений поставщиков.
// Выполняется по подписке на событие ПередЗаписью прикладного документа.
// См. Подписку на событие ПроверитьИзменениеЗапросаКоммерческихПредложенийПоставщиков.
//
// Параметры:
//   Источник - ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиковОбъект - прикладной документ.
//
Процедура ПроверитьИзменениеЗапросаКоммерческихПредложенийПоставщиков(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененыКлючевыеРеквизиты = Ложь;
	
	ИмяПодсистемы =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ИмяПодсистемы) Тогда
		МенеджерДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		МенеджерДокумента.ОтметитьИзменениеЗапросаКоммерческихПредложений(Источник, ИзмененыКлючевыеРеквизиты);
	Иначе
		КоммерческиеПредложенияПереопределяемый.ОтметитьИзменениеЗапросаКоммерческихПредложенийПоставщиков(Источник,
			ИзмененыКлючевыеРеквизиты);
	КонецЕсли;
	
	ОтметитьИзменениеЗапросаКоммерческихПредложенийПоставщиков(Источник, ИзмененыКлючевыеРеквизиты);
	
КонецПроцедуры

// Обработка изменения учетного документа Запрос коммерческих предложений поставщиков.
//   Выполняется по подписке на событие ПриЗаписи прикладного документа.
//   См. Подписку на событие ОбработатьИзменениеЗапросаКоммерческихПредложенийПоставщиков.
//
// Параметры:
//  Источник - ДокументОбъект - Прикладной документ Запрос коммерческих предложений поставщиков.
//    См. ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиковОбъект.
//  Отказ    - Булево - Признак отказа от записи.
//
Процедура ОбработатьИзменениеЗапросаКоммерческихПредложенийПоставщиков(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = Неопределено;
	
	Если Источник.ПометкаУдаления Тогда
		
		ДанныеЗапроса = ДанныеЗапросаКоммерческихПредложенийПоставщиков(Источник.Ссылка, Ложь, Отказ);
		
		Если Отказ Тогда
			Возврат;
		Иначе
			ДанныеДокумента = ДанныеЗапроса.ДанныеДокумента;
		КонецЕсли;
		
		Если Не РазрешеноУдалениеЗапросаКоммерческихПредложенийПоставщиков(Источник.Ссылка, ДанныеДокумента) Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка установки пометки удаления документа %1: необходимо завершить публикацию документа в сервисе.'"),
				Источник.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник.Ссылка);
			ЭлектронноеВзаимодействие.ОбработатьОшибку(
				НСтр("ru = 'Запись документа Запрос коммерческих предложений поставщиков'"),
				НСтр("ru = 'Документ не может быть помечен на удаление, так как опубликован в сервисе.'"),
				ТекстСообщения,
				КодСобытияКоммерческиеПредложения(),
				Источник.Ссылка);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапросКоммерческихПредложенийПоставщиковЗанят(Источник.Ссылка) Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка записи документа %1: выполняется синхронизация документа с сервисом.'"),
			Источник.Ссылка);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Запись документа Запрос коммерческих предложений поставщиков'"),
			НСтр("ru = 'Документ не может быть изменен во время синхронизации данных с сервисом.'"), ТекстСообщения,
			КодСобытияКоммерческиеПредложения(),
			Источник.Ссылка);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ИзмененыКлючевыеРеквизитыЗапросаКоммерческихПредложений(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	АктуализироватьПланСинхронизацииЗапросаКоммерческихПредложенийПоставщиков(Источник.Ссылка, Отказ, ДанныеДокумента);
	
КонецПроцедуры

// Обработка изменения вложения учетного документа Запрос коммерческих предложений поставщиков.
//   Выполняется по подписке на событие ПриЗаписи присоединенного файла.
//   См. Подписку на событие ОбработатьИзменениеВложенияЗапросаКоммерческихПредложенийПоставщиков.
//
// Параметры:
//  Источник - СправочникОбъект - Присоединенный файл.
//    См. ОпределяемыйТип.ВложениеЗапросаКоммерческихПредложенийПоставщиковОбъект.
//  Отказ    - Булево - Признак отказа от записи.
//
Процедура ОбработатьИзменениеВложенияЗапросаКоммерческихПредложенийПоставщиков(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВладелецФайла");
	
	Если Не ЗначениеЗаполнено(Документ)
		Или Не Метаданные.ОпределяемыеТипы.ЗапросКоммерческихПредложенийПоставщиков.Тип.СодержитТип(ТипЗнч(Документ)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапросКоммерческихПредложенийПоставщиковЗанят(Документ) Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка записи вложения документа %1: выполняется синхронизация документа с сервисом.'"),
			Источник.Ссылка);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Запись вложения Запроса коммерческих предложений поставщиков'"),
			НСтр("ru = 'Вложения не могут быть изменены во время синхронизации данных документа с сервисом.'"),
			ТекстСообщения,
			КодСобытияКоммерческиеПредложения(),
			Документ);
		
		Возврат;
		
	КонецЕсли;
	
	АктуализироватьПланСинхронизацииЗапросаКоммерческихПредложенийПоставщиков(Документ, Отказ);
	
КонецПроцедуры

// Обработка изменения исходящего электронного документа с видом ЗапросКоммерческихПредложений.
// Выполняется по подписке на событие ПриЗаписи.
// См. Подписку на событие ОбновитьСостояниеЗапросаКоммерческихПредложенийПоставщиков.
//
// Параметры:
//  Источник - ДокументОбъект.ЭлектронныйДокументИсходящий - Исходящий электронный документ.
//  Отказ    - Булево - Признак отказа от записи.
//
Процедура ОбновитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Отказ
		Или Источник.ВидДокумента <> Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснованияЗапроса = Тип("СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений");
	
	Основания = Новый Массив;
	
	ТекстЗапроса = ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", Источник.ЭлектронныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ОбъектУчета) = ТипОснованияЗапроса Тогда
			Основания.Добавить(Выборка.ОбъектУчета);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Основания.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка КАК Основание,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка.СостояниеСинхронизации КАК СостояниеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Контрагент КАК Контрагент,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка.ДокументВладелец КАК ДокументВладелец
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Получатели КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка В(&Основания)
	|	И НЕ(ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииЗапросовКоммерческихПредложений.Удалить)
	|				И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена))";
	
	Запрос.УстановитьПараметр("Основания", Основания);
	
	СостоянияОснований = Запрос.Выполнить().Выгрузить();
	СостоянияОснований.Индексы.Добавить("Основание");
	СостоянияОснований.Индексы.Добавить("ДокументВладелец");
	
	ФактическиеСостояния = ОбменСКонтрагентамиИнтеграция.СостоянияАктуальныхДокументооборотов(
		СостоянияОснований.ВыгрузитьКолонку("Основание"));
	
	ДокументыИСостояния = Новый Соответствие;
	
	Для Каждого СостояниеЭлектронногоДокумента Из ФактическиеСостояния Цикл
		
		Если Не ЗначениеЗаполнено(СостояниеЭлектронногоДокумента.Состояние) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееСостояние = Неопределено;
		ПредставлениеОшибки = "";
		
		СостояниеСинхронизацииПоСостояниюВерсииЭлектронногоДокумента(СостояниеЭлектронногоДокумента.Состояние,
			ТекущееСостояние, ПредставлениеОшибки);
		
		ДанныеОснования = СостоянияОснований.Найти(СостояниеЭлектронногоДокумента.ОбъектУчета, "Основание");
		
		Если ДанныеОснования.СостояниеСинхронизации <> ТекущееСостояние Тогда
			
			ОснованиеОбъект = СостояниеЭлектронногоДокумента.ОбъектУчета.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
			ОснованиеОбъект.СостояниеСинхронизации = ТекущееСостояние;
			ОснованиеОбъект.ПредставлениеОшибки = ПредставлениеОшибки;
			ОснованиеОбъект.Записать();
			
		КонецЕсли;
		
		Если ДокументыИСостояния[ДанныеОснования.ДокументВладелец] = Неопределено Тогда
			
			СостояниеДокумента = НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков(ДанныеОснования.ДокументВладелец);
			
			ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
				ДанныеОснования.Контрагент, ТекущееСостояние, ПредставлениеОшибки);
			
			ДокументыИСостояния.Вставить(ДанныеОснования.ДокументВладелец, СостояниеДокумента);
			
		Иначе
			
			СостояниеДокумента = ДокументыИСостояния[ДанныеОснования.ДокументВладелец];
			ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
				ДанныеОснования.Контрагент, ТекущееСостояние, ПредставлениеОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Определение агрегированных состояний учетных документов.
	Для Каждого ДанныеПоДокументу Из ДокументыИСостояния Цикл
		
		СостояниеДокумента = ДанныеПоДокументу.Значение;
		
		ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
		
		// Вызов переопределяемого обработчика события ПослеВыполненияСинхронизации.
		Если СинхронизацияЗапросаКоммерческихПредложенийИсходящегоВыполнена(СостояниеДокумента) Тогда
			ЗапросКоммерческихПредложенийПослеВыполненияСинхронизации(СостояниеДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает заполненное дерево по Запросу коммерческих предложений поставщиков.
//
// Параметры:
//  Документ            - ДокументСсылка - См. объект ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков.
//  ПроверятьЗаполнение - Булево         - Признак необходимости проверять заполнение дерева.
//  Отказ               - Булево         - Признак отказа от формирования документа. Может быть выставлен в
//                                         переопределяемой части.
//
// Возвращаемое значение:
//  Структура - Ключи:
//              * ДанныеДокумента - ДеревоЗначений - Данные документа в виде дерева значений.
//                                  См. Макет ЗапросКоммерческихПредложений Обработки ЗапросыКоммерческихПредложений.
//              * Ошибки          - Массив         - Массив, содержащий представления ошибок заполнения дерева.
//                                                   Если параметр ПроверятьЗаполнение имеет значение Ложь, то значение
//                                                   ключа всегда будет представлено пустым массивом.
//
Функция ДанныеЗапросаКоммерческихПредложенийПоставщиков(Знач Документ, ПроверятьЗаполнение, Отказ) Экспорт
	
	Результат = Новый Структура;
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
	
	// Заполнение дерева
	ДанныеДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ЗапросыКоммерческихПредложений.ЗапросКоммерческихПредложений");
	
	ЗапросКоммерческихПредложенийПоставщиков =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческихПредложенийПоставщиков) Тогда
		МенеджерДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		МенеджерДокумента.ЗаполнитьДанныеПоЗапросуКоммерческихПредложений(Документ, ДанныеДокумента, Отказ);
	КонецЕсли;
	
	КоммерческиеПредложенияПереопределяемый.ЗаполнитьДанныеПоЗапросуКоммерческихПредложений(Документ,
		ДанныеДокумента, Отказ);
	
	Если Не Отказ Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
			ДополнитьЗапросКоммерческихПредложенийНоменклатуройСервиса(ДанныеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
	Результат.Вставить("Ошибки",          Новый Массив);
	
	// Проверка корректности заполнения
	Если Не Отказ И ПроверятьЗаполнение Тогда
		ДеревоЭлектронногоДокументаБЭД.ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(Результат.ДанныеДокумента,
			Результат.Ошибки);

		ОбработатьОшибкиФормированияДерева(Результат.Ошибки,
			Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений, Документ);
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
	
	Возврат Результат;
	
КонецФункции

// Поиск соответствия номенклатуры информационной базы номенклатуре сервиса "1С:Номенклатура" и дополнение данных
// Запроса коммерческих предложений в модели ЭДО.
//
// Параметры:
//  ДанныеДокумента - ДеревоЗначений - Данные документа в виде дерева значений.
//    См. Макет ЗапросКоммерческихПредложений Обработки ЗапросыКоммерческихПредложений.
//
Процедура ДополнитьЗапросКоммерческихПредложенийНоменклатуройСервиса(ДанныеДокумента) Экспорт
	
	Товары = ДанныеДокумента.Строки.Найти("Товары", "ПолныйПуть").Строки;
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");

	Для Каждого Позиция Из Товары Цикл
		
		УказаниеНоменклатуры = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Сервис1СНоменклатура", "ПолныйПуть", Истина);
		
		Если УказаниеНоменклатуры.Значение <> "Номенклатура" Тогда
			
			НоменклатураСсылка = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.НоменклатураСсылка", "ПолныйПуть", Истина);
			ХарактеристикаСсылка = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ХарактеристикаСсылка", "ПолныйПуть", Истина);
			
			Если НоменклатураСсылка <> Неопределено Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура", НоменклатураСсылка.Значение);
				Отбор.Вставить("Характеристика", ХарактеристикаСсылка.Значение);
				
				СопоставленнаяНоменклатура = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(Отбор);
				
				Если СопоставленнаяНоменклатура.Количество()
					И ЗначениеЗаполнено(СопоставленнаяНоменклатура[0].ИдентификаторНоменклатуры) Тогда
					
					СтрокаДерева = Позиция.Строки.Найти(
					"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура.ИдентификаторНоменклатуры",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = СопоставленнаяНоменклатура[0].ИдентификаторНоменклатуры;
					
					СтрокаДерева = Позиция.Строки.Найти(
					"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура.ИдентификаторХарактеристики",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = СопоставленнаяНоменклатура[0].ИдентификаторХарактеристики;
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = Истина;
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = Ложь;
					
					УказаниеНоменклатуры.Значение = "Номенклатура";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отмена запроса или окончание сбора коммерческих предложений в ходе фонового задания.
// См. КоммерческиеПредложенияКлиент.ОтменитьЗапросКоммерческихПредложений.
// 
// Параметры:
//  ПараметрыОтправки - см. КоммерческиеПредложенияСлужебный.ОтменитьЗапросКоммерческихПредложенийАсинхронно
// 
// Возвращаемое значение:
//  Структура:
//  * СостояниеДокумента - см. КоммерческиеПредложения.СостояниеЗапросаКоммерческихПредложенийПоставщиков
//  * ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ОтменитьЗапросКоммерческихПредложенийАсинхронно(Знач ПараметрыОтправки) Экспорт
	
	Результат = Новый Структура("СостояниеДокумента, ДлительнаяОперация");
	
	Если ЗапросКоммерческихПредложенийПоставщиковЗанят(ПараметрыОтправки.ЗапросКоммерческихПредложений) Тогда
		
		Результат.СостояниеДокумента = КоммерческиеПредложения.СостояниеЗапросаКоммерческихПредложенийПоставщиков(
			ПараметрыОтправки.ЗапросКоммерческихПредложений);
		
	Иначе
		
		ИмяПроцедуры = "КоммерческиеПредложенияСлужебный.ОтменитьЗапросКоммерческихПредложений";
		
		КлючФоновогоЗадания = КлючФоновогоЗаданияПоДокументу(ПараметрыОтправки.ЗапросКоммерческихПредложений, ИмяПроцедуры);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отмена Запроса коммерческих предложений.'");
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОтправки,
			ПараметрыВыполнения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отмена Запроса коммерческих предложений.
// См. КоммерческиеПредложенияКлиент.ОтменитьЗапросКоммерческихПредложений.
//
Процедура ОтменитьЗапросКоммерческихПредложений(Знач ПараметрыОтправки, Знач АдресРезультата) Экспорт
	
	РезультатОперации = Новый Структура;
	
	Документ = ПараметрыОтправки.ЗапросКоммерческихПредложений;
	
	СостояниеДокумента = НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков(Документ);
	
	ОтменитьОтправкуЗапросаКоммерческихПредложений(Документ, СостояниеДокумента);
	
	ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента);
	
	Если СинхронизацияЗапросаКоммерческихПредложенийИсходящегоВыполнена(СостояниеДокумента) Тогда
		
		// Пометка на удаление технических владельцев электронных документов для возможности удаления документа.
		УстановитьПометкуУдаленияОснованийЭлектронныхДокументов(ПараметрыОтправки.ЗапросКоммерческихПредложений);
		
		// Вызов переопределяемого обработчика события ПослеВыполненияСинхронизации.
		ЗапросКоммерческихПредложенийПослеВыполненияСинхронизации(СостояниеДокумента);
		
	КонецЕсли;
	
	РезультатОперации.Вставить("СостояниеДокумента", СостояниеДокумента);
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Проверяет, что переданный объект является основанием (техническим владельцем) электронного документа
// по учетному документу Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  Источник - Произвольный - Объект, который требуется проверить.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений(Знач Источник) Экспорт
	
	Возврат Тип("СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений") = ТипЗнч(Источник);
	
КонецФункции

// Получает ссылку на учетный документ Запрос коммерческих предложений поставщиков по основанию электронного документа.
//
// Параметры:
//  ОснованиеЭлектронногоДокумента - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений -
//    основание (технический владелец) электронного документа.
// 
// Возвращаемое значение:
//  ДокументСсылка - См. объект ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков.
//
Функция УчетныйДокументЗапросКоммерческихПредложений(ОснованиеЭлектронногоДокумента) Экспорт
	
	Возврат Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.УчетныйДокумент(ОснованиеЭлектронногоДокумента);
	
КонецФункции

// Заполняет параметры электронного документа для отправки Запроса коммерческих предложений по данным
// основания (технического владельца электронного документа).
//
// Параметры:
//  Основание - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений - Основание
//              (технический владелец) электронного документа.
//  Параметры - Структура - 
//
Процедура ЗаполнитьПараметрыЭлектронногоДокументаПоОснованию(Основание, Параметры) Экспорт
	
	ТипОснования = ТипЗнч(Основание);
	
	Если ТипОснования = Тип("СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений")
		И ОбщегоНазначения.СсылкаСуществует(Основание) Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"ДокументВладелец, ИдентификаторСервиса, Организация, Получатели");
		УчетныйДокументВладелец = ДанныеДокумента.ДокументВладелец;
		ИдентификаторСервиса    = ДанныеДокумента.ИдентификаторСервиса;
		Организация             = ДанныеДокумента.Организация;
		ПолучателиДокумента     = ДанныеДокумента.Получатели; // РезультатЗапроса
		Получатели              = ПолучателиДокумента.Выбрать();
		Контрагент              = Неопределено;
		Если Получатели.Следующий() Тогда
			Контрагент = Получатели.Контрагент;
		КонецЕсли;
	ИначеЕсли ТипОснования = Тип("СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений") Тогда
		УчетныйДокументВладелец = Основание.ДокументВладелец;
		ИдентификаторСервиса    = Основание.ИдентификаторСервиса;
		Организация             = Основание.Организация;
		Контрагент              = Основание.Получатели[0].Контрагент;
	Иначе
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Тип",                     Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений);
	Параметры.Вставить("Направление",             Перечисления.НаправленияЭДО.Исходящий);
	Параметры.Вставить("УчетныйДокументВладелец", УчетныйДокументВладелец);
	Параметры.Вставить("ИдентификаторВладельца",  ИдентификаторСервиса);
	Параметры.Вставить("Организация",             Организация);
	Параметры.Вставить("Контрагент",              Контрагент);
	
КонецПроцедуры

// Дополнение данных документа служебной информацией, используемой при формировании электронного документа.
//
// Параметры:
//  Основание - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений - Основание
//    (технический владелец) электронного документа.
//  ДанныеДокумента - ДеревоЗначений - Данные документа в виде дерева значений. Возвращаемый параметр.
//    См. Макет ЗапросКоммерческихПредложений Обработки ЗапросыКоммерческихПредложений.
//
Процедура ДополнитьДанныеДокументаПоОснованиюЗапросаКоммерческихПредложений(Знач Основание, ДанныеДокумента) Экспорт
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
		"ДокументВладелец, ИдентификаторСервиса, Получатели");

	ПолучателиРезультат = ДанныеОснования.Получатели; // РезультатЗапроса
	ПолучателиЗапроса = ПолучателиРезультат.Выбрать();
	
	Если ПолучателиЗапроса.Следующий() Тогда
		Контрагент = ПолучателиЗапроса.Контрагент;
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	
	ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(ДанныеДокумента,
		"УчетныйДокумент", ДанныеОснования.ДокументВладелец);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(ДанныеДокумента,
		"Контрагент", Контрагент);
	ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(ДанныеДокумента,
		"ИдентификаторВладельца", ДанныеОснования.ИдентификаторСервиса);
	
КонецПроцедуры

// Подготавливает данные формирования исходящего электронного документа по Коммерческому предложению.
//
// Параметры:
//  СсылкаНаОбъект  - ДокументСсылка - Ссылка на учетный документ, по которому необходимо создать электронный.
//                                     См. ОпределяемыйТип.КоммерческоеПредложениеИсходящее.
//  ДанныеДокумента - ДеревоЗначений - Данные, соответствующие структуре Макета КоммерческоеПредложение
//                                     Обработки ОбменСКонтрагентами.
//  Отказ           - Булево - признак отказа при заполнении.
//
Процедура ЗаполнитьДанныеПоКоммерческомуПредложению(Знач СсылкаНаОбъект, ДанныеДокумента, Отказ) Экспорт
	
	КоммерческоеПредложениеКлиенту =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеКлиенту) Тогда
		МодульМенеджераДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульМенеджераДокумента.ЗаполнитьДанныеПоКоммерческомуПредложению(СсылкаНаОбъект, ДанныеДокумента, Отказ);
	КонецЕсли;
	
	МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияПереопределяемый");
	МодульПодсистемы.ЗаполнитьДанныеПоКоммерческомуПредложению(СсылкаНаОбъект, ДанныеДокумента, Отказ);
	
КонецПроцедуры

#Область СостояниеСинхронизации

// Конструктор для создания структуры данных, описывающей состояние синхронизации прикладного документа
// Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на прикладной отправляемый или обновляемый документ.
//                              См. ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков.
//
// Возвращаемое значение:
//  Структура - Ключи:
//              * Документ - ДокументСсылка - Соответствует входному параметру Документ.
//              * СостояниеСинхронизации - ПеречислениеСсылка.СостоянияСинхронизацииЗапросовКоммерческихПредложений -
//                                         Агрегированное состояние синхронизации прикладного документа.
//              * Детализация - Соответствие - Расширенная информация по каждому получателю, где:
//                ** Ключ - ОпределяемыйТип.КонтрагентБЭД, Неопределено - Ссылка на получателя документа. Если
//                          выполняется "открытая" публикация в Бизнес-сети, то значением ключа будет Неопределено.
//                ** Значение - Структура - Детализация состояния синхронизации по указанному получателю, где:
//                   *** СостояниеСинхронизации - ПеречислениеСсылка - Состояние синхронизации по получателю.
//                   *** ПредставлениеОшибки - Строка - Если ключ СостояниеСинхронизации содержит значение перечисления
//                                                      Ошибка, то содержит текстовое представление ошибки.
//
Функция НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков(Знач Документ) Экспорт
	
	СостояниеДокумента = Новый Структура;
	СостояниеДокумента.Вставить("Документ", Документ);
	СостояниеДокумента.Вставить("СостояниеСинхронизации");
	СостояниеДокумента.Вставить("Детализация", Новый Соответствие);
	
	Возврат СостояниеДокумента;
	
КонецФункции

// Добавляет расширенную информацию в структуру данных, описывающую состояние синхронизации прикладного документа
// Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  СостояниеДокумента - Структура - Возвращаемый параметр.
//    См. функцию НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков.
//  Получатель - ОпределяемыйТип.КонтрагентБЭД, Строка - Ссылка на получателя документа. Если выполняется
//    "открытая" публикация в Бизнес-сети, то значением должна быть пустая строка.
//  СостояниеСинхронизации - ПеречислениеСсылка.СостоянияСинхронизацииЗапросовКоммерческихПредложений -
//    Состояние синхронизации по указанному получателю.
//  ПредставлениеОшибки - Строка - Если ключ СостояниеСинхронизации содержит значение перечисления
//    Ошибка, то необходимо указать текстовое представление ошибки.
//
Процедура ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
		Знач Получатель, Знач СостояниеСинхронизации, Знач ПредставлениеОшибки = "") Экспорт
	
	ДетализацияСостояния = Новый Структура;
	ДетализацияСостояния.Вставить("СостояниеСинхронизации", СостояниеСинхронизации);
	ДетализацияСостояния.Вставить("ПредставлениеОшибки",    ПредставлениеОшибки);
	
	СостояниеДокумента.Детализация.Вставить(Получатель, ДетализацияСостояния);
	
КонецПроцедуры

// Устанавливает агрегированное состояние синхронизации прикладного документа Запрос коммерческих предложений
// поставщиков на основе детализированной информации.
//
// Параметры:
//  СостояниеДокумента - Структура - Возвращаемый параметр.
//                                   См. функцию НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков.
//
Процедура ОпределитьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента) Экспорт
	
	ИтоговыеСостояния = Новый Соответствие;
	Для Каждого ДетальнаяИнформация Из СостояниеДокумента.Детализация Цикл
		ИтоговыеСостояния.Вставить(ДетальнаяИнформация.Значение.СостояниеСинхронизации, Истина);
	КонецЦикла;
	
	СостояниеТребуется   = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Требуется;
	СостояниеВыполняется = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполняется;
	СостояниеВыполнена   = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	СостояниеОшибка      = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
	
	Если ИтоговыеСостояния[СостояниеТребуется] <> Неопределено Тогда
		СостояниеДокумента.СостояниеСинхронизации = СостояниеТребуется;
	ИначеЕсли ИтоговыеСостояния[СостояниеОшибка] <> Неопределено Тогда
		СостояниеДокумента.СостояниеСинхронизации = СостояниеОшибка;
	ИначеЕсли ИтоговыеСостояния[СостояниеВыполнена] <> Неопределено Тогда
		СостояниеДокумента.СостояниеСинхронизации = СостояниеВыполнена;
	Иначе
		СостояниеДокумента.СостояниеСинхронизации = СостояниеВыполняется;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Входящий

Процедура ПриЗагрузкеНовогоЭлектронногоДокумента(ЭлектронныйДокумент, СостояниеЭДО, КонтекстДиагностики) Экспорт
	
	СведенияОДокументе = ОбменСКонтрагентами.СведенияОбЭлектронномДокументе(ЭлектронныйДокумент);
		
	Если СведенияОДокументе.ТипДокумента <> ОбменСКонтрагентами.ТипыДокументов().КоммерческоеПредложение Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = ОбменСКонтрагентамиИнтеграция.ОбъектыУчетаАктуальногоДокументооборота(ЭлектронныйДокумент);
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		Возврат;
	КонецЕсли;
	
	АктуальныеЭлектронныеДокументы = ОбменСКонтрагентамиИнтеграция.СостоянияАктуальныхДокументооборотов(ОбъектыУчета);
	ЗакрываемыеДокументы = Новый Массив;
	Для Каждого ВерсияДокумента Из АктуальныеЭлектронныеДокументы Цикл
		Если ВерсияДокумента.ЭлектронныйДокумент <> ЭлектронныйДокумент Тогда
			ЗакрываемыеДокументы.Добавить(ВерсияДокумента.ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ЗакрываемыеДокументы) Тогда
		ПричинаЗакрытия = НСтр("ru='Закрыт автоматически при получении новой версии.'");
		Для Каждого ЗакрываемыйДокумент Из ЗакрываемыеДокументы Цикл 
			ОбменСКонтрагентамиИнтеграция.ЗакрытьЭлектронныйДокумент(ЗакрываемыйДокумент, КонтекстДиагностики, ПричинаЗакрытия);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Перезаполнение учетного документа Запрос коммерческих предложений от клиента по данным электронного документа.
//
Процедура ПерезаполнитьЗапросКоммерческихПредложений(УчетныйДокумент, ЭлектронныйДокумент, СпособОбработки) Экспорт
	
	ЗапросКоммерческогоПредложенияОтКлиента =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента";
	
	Перезаполнить = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческогоПредложенияОтКлиента) Тогда
		Перезаполнить = Истина;
	Иначе
		КоммерческиеПредложенияПереопределяемый.ПерезаполнятьЗапросКоммерческихПредложенийОтКлиента(Перезаполнить);
	КонецЕсли;
	
	Если Перезаполнить Тогда
			
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ПараметрыЗаполнения.Вставить("МассивСсылок",		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчетныйДокумент));
		ПараметрыЗаполнения.Вставить("СпособОбработки",		СпособОбработки);
		
		ОбменСКонтрагентамиИнтеграция.ПерезаполнитьДокумент(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что переданный объект является прикладным документом Коммерческое предложение клиенту.
//
// Параметры:
//  Источник - Произвольный - Объект, который требуется проверить.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ЭтоЗапросКоммерческогоПредложенияОтКлиента(Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Возврат Метаданные.ОпределяемыеТипы.ЗапросКоммерческогоПредложенияОтКлиента.Тип.СодержитТип(ТипИсточника)
		Или Метаданные.ОпределяемыеТипы.ЗапросКоммерческогоПредложенияОтКлиентаОбъект.Тип.СодержитТип(ТипИсточника);
	
КонецФункции

// Проверяет, что переданный объект является прикладным документом Запрос коммерческого предложения поставщику.
//
// Параметры:
//  Источник - Произвольный - Объект, который требуется проверить.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ЭтоЗапросКоммерческогоПредложенияПоставщику(Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Возврат Метаданные.ОпределяемыеТипы.ЗапросКоммерческихПредложенийПоставщиков.Тип.СодержитТип(ТипИсточника)
		Или Метаданные.ОпределяемыеТипы.ЗапросКоммерческихПредложенийПоставщиковОбъект.Тип.СодержитТип(ТипИсточника);
	
КонецФункции

#КонецОбласти

#Область Сервис

#Область Команды

// Возвращает данные Запроса коммерческих предложений из сервиса.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор документа в сервисе.
//  Валюта        - Строка - Код валюты, в которой должны быть представлены цены.
//                           По умолчанию - "643" (Российский рубль).
// 
// Возвращаемое значение:
//  ДеревоЗначений - Данные документа в модели ЭДО.
//                   См. Макет ЗапросКоммерческихПредложений Обработки ОбменСКонтрагентами.
//                   Примечание - Строки таблицы ПрисоединенныеФайлы в качестве значения реквизита ДвоичныеДанные
//                   по умолчанию имеют значение Неопределено. Для загрузки данных присоединенных файлов в дерево
//                   см. процедуру ЗагрузитьПрисоединенныйФайлИзСервиса.
//
Функция ДанныеЗапросаКоммерческихПредложенийВСервисе(Знач Организация, Знач Идентификатор, Знач Валюта = "643") Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Идентификатор", Идентификатор);
	ПараметрыОперации.Вставить("Валюта",        Валюта);
	ПараметрыОперации.Вставить("Организация",   Организация);
	
	Отказ            = Ложь;
	ПараметрыКоманды = ПараметрыПолученияДанныхЗапросаКоммерческихПредложенийВСервисе(ПараметрыОперации);
	ОтветСервиса     = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	Результат = Неопределено;
	
	Если Не Отказ Тогда
		Результат = ЗапросКоммерческихПредложенийИзМоделиСервиса(ОтветСервиса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Загрузка присоединенного файла Запроса коммерческих предложений из сервиса и его помещение в данные документа
// в модели ЭДО.
//
// Параметры:
//  ДанныеЗапроса - ДеревоЗначений - Данные документа в модели ЭДО. Возвращаемый параметр.
//    См. функцию ДанныеЗапросаКоммерческихПредложенийВСервисе.
//  НомерФайла    - Число - Соответствует значению реквизита ПрисоединенныеФайлы.НомерСтроки в модели ЭДО.
//  Отказ         - Булево - Признак ошибки при загрузке данных из сервиса. Возвращаемый параметр.
//
Процедура ЗагрузитьПрисоединенныйФайлИзСервиса(ДанныеЗапроса, Знач НомерФайла, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВложений = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеЗапроса, "ИндексВложенийСлужебный");
	
	ИдентификаторЗапроса  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеЗапроса, "ИдентификаторДокумента");
	ИдентификаторВложения = ИндексВложений[НомерФайла];
	
	Если ИдентификаторЗапроса = Неопределено
		Или ИдентификаторВложения = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ИдентификаторЗапроса",  ИдентификаторЗапроса);
		ПараметрыОперации.Вставить("ИдентификаторВложения", ИдентификаторВложения);
		
		ПараметрыКоманды = ПараметрыПолученияПрисоединенногоФайлаИзСервиса(ПараметрыОперации);
		ОтветСервиса     = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка получения из сервиса присоединенного файла №%1.'"), НомерФайла);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПолныйПуть", "ПрисоединенныеФайлы.НомерСтроки");
	Отбор.Вставить("Значение",   НомерФайла);
	
	ИнформацияОФайле = ДанныеЗапроса.Строки.НайтиСтроки(Отбор, Истина);
	
	Если ИнформацияОФайле.Количество() Тогда
		
		СтрокаДерева = ИнформацияОФайле[0].Строки.Найти("ПрисоединенныеФайлы.НомерСтроки.ДвоичныеДанные", "ПолныйПуть");
		СтрокаДерева.Значение = ОтветСервиса.Результат;
		
		Размер = СтрокаДерева.Значение.Размер();
		СтрокаДерева = ИнформацияОФайле[0].Строки.Найти("ПрисоединенныеФайлы.НомерСтроки.Размер", "ПолныйПуть");
		СтрокаДерева.Значение = Размер;
		
		СтрокаДерева = ИнформацияОФайле[0].Строки.Найти("ПрисоединенныеФайлы.НомерСтроки.РасширениеФайла", "ПолныйПуть");
		
		Если ПустаяСтрока(СтрокаДерева.Значение) И ТипЗнч(ОтветСервиса) = Тип("Структура") Тогда
			ИмяФайла = СтрЗаменить(ОтветСервиса.Заголовки["Content-Disposition"], """", "");
			РасширениеФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - СтрНайти(ИмяФайла, "."));
			СтрокаДерева.Значение = РасширениеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск Запросов коммерческих предложений в сервисе.
//
// Параметры:
//  КритерииПоиска  - Массив Из Структура - параметры отбора Запросов коммерческих предложений,
//                                          типы элементов см. КритерийПоискаЗапросовКоммерческихПредложений.
//  НастройкиВывода - Структура - настройки вывода результатов поиска Запросов коммерческих предложений,
//                                см. НастройкиВыводаРезультатовПоискаЗапросовКоммерческихПредложений
//
// Возвращаемое значение:
//  Структура, Неопределено - При ошибке поиска возвращается Неопределено, при успешном выполнении Структура:
//    * Вывод   - Структура - данные постраничного вывода результатов со следующими ключами:
//      ** ТекущаяСтраница - Число - номер текущей страницы.
//      ** ЗапросовНаСтранице - Число - количество документов на текущей странице.
//      ** ЗапросовВсего   - Число - общее количество документов, соответствующих условиям отбора.
//      ** СтраницВсего    - Число - общее количество страниц с учетом заданного максимального количества позиций на одной странице.
//    * Запросы - ТаблицаЗначений - обобщенная информация о Запросах коммерческих предложений. Колонки:
//      ** Идентификатор - Строка - идентификатор Запроса коммерческих предложений в сервисе.
//      ** Организация - Структура - организация, разместившая Запрос коммерческих предложений. Ключи:
//         *** ИНН          - Строка - ИНН организации.
//         *** КПП          - Строка - КПП организации.
//         *** Наименование - Строка - наименование организации.
//      ** КонтактноеЛицо - Структура - данные для связи с контактным лицом. Ключи:
//         *** ФИО              - Строка - ФИО менеджера.
//         *** Телефон          - Строка - контактный телефон.
//         *** ЭлектроннаяПочта - Строка - адрес электронной почты.
//      ** ЧастичноеЗакрытиеРазрешено - Булево - коммерческое предложение потенциального Поставщика может содержать позиции только по части
//                                       товаров, указанных в Запросе коммерческих предложений. Допускается
//                                       частичное закрытие потребности покупателя.
//      ** Доставка - Структура - информация о регионе доставки товара. Ключи:
//         *** Страна - Строка - код страны по ОКСМ.
//         *** Адрес  - Массив - идентификаторы адресных объектов РФ по ФИАС от более общей локации до более точной
//                               (например: регион, область, город, улица, дом). Элементы массива имеют строковый тип.
//         *** Представление - Строка - представление адреса.
//      ** ОблагаетсяНДС   - Булево - закупка облагается НДС.
//      ** ВалютаДокумента - Строка - код валюты по ОКВ Запроса коммерческих предложений.
//      ** СуммаДокумента  - Структура - сумма документа, приведенная к указанной валюте, ключи:
//         *** Валюта  - Строка - код валюты по ОКВ, указанный во входящем параметре НастройкиВывода.
//         *** Значение - Число - сумма документа.
//      ** ДатаНачалаСбора - Дата - дата начала сбора Коммерческих предложений.
//      ** ДатаОкончанияСбора - Дата - дата окончания сбора Коммерческих предложений.
//      ** ДатаОкончанияРассмотрения - Дата - дата окончания рассмотрения поступивших Коммерческих предложений.
//      ** ВсегоПозиций - Число - общее количество позиций в Запросе коммерческого предложения.
//      ** ВсегоРелевантныхПозиций - Число - общее количество релевантных критериям поиска позиций в Запросе коммерческого предложения.
//      ** СуммаРелевантныхПозиций - Число - общая стоимость релевантных критериям поиска позиций в Запросе коммерческого предложения.
//      ** Позиции - ТаблицаЗначений - сокращенное представление позиций Запроса коммерческих предложений,
//                                     соответствующих критериям поиска, колонки:
//         *** Идентификатор - Строка - идентификатор позиции Запроса коммерческих предложений.
//         *** ПредставлениеТовара - Строка - наименование товара позиции.
//         *** ИдентификаторКатегории - Строка - идентификатор категории сервиса "1С:Номенклатура".
//         *** НаименованиеКатегории - Строка - наименование категории сервиса "1С:Номенклатура".
//         *** Цена - Структура - максимальная цена, приведенная к указанной валюте. Ключи:
//             **** Валюта   - Строка - код валюты по ОКВ, указанный во входящем параметре НастройкиВывода.
//             **** Значение - Число  - максимальная цена одной логистической упаковки товара.
//         *** ЕдиницаИзмерения - Строка - код базовой единицы измерения товара по ОКЕИ.
//         *** ЛогистическаяУпаковка - Структура - описание логистической упаковки товара. Ключи:
//             **** Числитель   - Число  - числитель в отношении к базовой единице измерения.
//             **** Знаменатель - Число  - знаменатель в отношении к базовой единице измерения.
//             **** Описание    - Строка - наименование упаковки товара.
//         *** Количество - Число - количество закупаемых логистических упаковок.
//      ** КатегорииНоменклатуры - ТаблицаЗначений - полный список Категорий сервиса 1С:Номенклатура, к которым относятся
//                                                    позиции Запроса коммерческих предложений. колонки:
//         *** Идентификатор - Строка - идентификатор категории сервиса 1С:Номенклатура.
//         *** Наименование  - Строка - наименование категории сервиса 1С:Номенклатура.
//       ** ИтогиПоискаПоТексту - Массив - перечень найденных фрагментов текста при использовании полнотекстового поиска.
//                                     Элементы массива имеют строковый тип и формат вида: "Яйцо КУРИНОЕ отборное",
//                                     где релевантные с точки зрения поиска слова выделены шрифтом в верхнем регистре.
//
Функция НайтиЗапросыКоммерческихПредложенийВСервисе(Знач Организация, Знач КритерииПоиска, Знач НастройкиВывода) Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("КритерииПоиска",  КритерииПоиска);
	ПараметрыОперации.Вставить("НастройкиВывода", НастройкиВывода);
	ПараметрыОперации.Вставить("Организация",     Организация);
	
	Отказ            = Ложь;
	ПараметрыКоманды = ПараметрыПоискаЗапросовКоммерческихПредложенийВСервисе(ПараметрыОперации);
	ОтветСервиса     = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	Результат = Неопределено;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка поиска документов в сервисе.'"));
	Иначе
		Результат = РезультатПоискаЗапросовКоммерческихПредложенийИзМоделиСервиса(ОтветСервиса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонструкторыПараметров

// Создает критерий поиска Запросов коммерческих предложений.
// 
// Возвращаемое значение:
//  Структура - параметры отбора. Заполнение любых полей является необязательным:
//    * ТекстПоискаЗапросов        - Строка - строка для полнотекстового поиска по описанию, условиям,
//                                            региону, данным вложений Запроса коммерческих предложений.
//    * ТекстПоискаПозиций         - Строка - строка для полнотекстового поиска по наименованию, описанию
//                                            реквизитам товара позиции Запроса коммерческих предложений.
//    * Покупатели                 - Массив - перечень потенциальных покупателей среди Запросов коммерческих
//                                            предложений которых необходимо выполнить поиск.
//    * РегионыДоставки            - Массив - ограничение регионов доставки товаров.
//    * Артикулы                   - Массив - артикулы товара поставщика или производителя. Элементы массива
//                                            должны иметь строковый тип.
//    * Штрихкоды                  - Массив - штрихкоды товара поставщика или производителя. Элементы массива
//                                            должны иметь строковый тип.
//    * Валюта                     - Строка - числовой код валюты по ОКВ, в которой осуществляется поиск.
//                                            По умолчанию - "643" (Российский рубль).
//    * ЦенаПозицииОт              - Число  - нижняя граница максимальной цены одной логистической упаковки
//                                            товара позиции.
//    * ЦенаПозицииДо              - Число  - верхняя граница максимальной цены одной логистической упаковки
//                                            товара позиции.
//    * СуммаПозицииОт             - Число  - нижняя граница максимальной суммы всех закупаемых логистических
//                                            упаковок товара позиции.
//    * СуммаПозицииДо             - Число  - верхняя граница максимальной суммы всех закупаемых
//                                            логистических упаковок товара позиции.
//    * СуммаДокументаОт           - Число  - нижняя граница максимальной суммы документа.
//    * СуммаДокументаДо           - Число  - верхняя граница максимальной суммы документа.
//    * ЕдиницаИзмерения           - Строка - код единицы измерения товара по ОКЕИ.
//    * МинимальноеКоличество      - Число  - минимальное искомое количество товара в указанной единице измерения.
//    * МаксимальноеКоличество     - Число  - максимальное искомое количество товара в указанной единице измерения.
//    * ЧастичноеЗакрытиеРазрешено - Булево - коммерческое предложение может содержать позиции только по
//                                            части товаров, указанных в Запросе коммерческих предложений.
//                                            Допускается частичное закрытие потребности покупателя.
//    * ИдентификаторКатегории     - Строка - идентификатор категории сервиса "1С:Номенклатура".
//    * РеквизитыКатегории         - Массив - отбор по реквизитам и значениям реквизитов категории сервиса
//                                            "1С:Номенклатура". Применяется, если заполнено значение ключа
//                                            ИдентификаторКатегории. См. ДобавитьРеквизитКатегорииВКритерийПоискаЗапросовКоммерческихПредложений.
//    * НоменклатураСервиса        - Массив - идентификаторы номенклатуры и характеристик номенклатуры
//                                            сервиса "1С:Номенклатура". 
//                                            См. ДобавитьНоменклатуруСервисаВКритерийПоискаЗапросовКоммерческихПредложений.
//
Функция КритерийПоискаЗапросовКоммерческихПредложений() Экспорт
	
	КритерийПоиска = Новый Структура;
	КритерийПоиска.Вставить("ТекстПоискаЗапросов",        "");
	КритерийПоиска.Вставить("ТекстПоискаПозиций",         "");
	КритерийПоиска.Вставить("Покупатели",                 Новый Массив);
	КритерийПоиска.Вставить("РегионыДоставки",            Новый Массив);
	КритерийПоиска.Вставить("Артикулы",                   Новый Массив);
	КритерийПоиска.Вставить("Штрихкоды",                  Новый Массив);
	КритерийПоиска.Вставить("Валюта",                     "643");
	КритерийПоиска.Вставить("ЦенаПозицииОт",              0);
	КритерийПоиска.Вставить("ЦенаПозицииДо",              0);
	КритерийПоиска.Вставить("СуммаПозицииОт",             0);
	КритерийПоиска.Вставить("СуммаПозицииДо",             0);
	КритерийПоиска.Вставить("СуммаДокументаОт",           0);
	КритерийПоиска.Вставить("СуммаДокументаДо",           0);
	КритерийПоиска.Вставить("ЕдиницаИзмерения",           "");
	КритерийПоиска.Вставить("МинимальноеКоличество",      0);
	КритерийПоиска.Вставить("МаксимальноеКоличество",     0);
	КритерийПоиска.Вставить("ЧастичноеЗакрытиеРазрешено", Неопределено);
	КритерийПоиска.Вставить("ИдентификаторКатегории",     0);
	КритерийПоиска.Вставить("РеквизитыКатегории",         Новый Массив);
	КритерийПоиска.Вставить("НоменклатураСервиса",        Новый Массив);
	
	Возврат КритерийПоиска;
	
КонецФункции

// Создает настройки вывода результатов поиска Запросов коммерческих предложений.
// 
// Возвращаемое значение:
//  Структура - Настройки вывода по умолчанию. Ключи:
//              * НомерСтраницы      - Число  - Номер текущей страницы. По умолчанию - 1.
//              * КоличествоЗапросов - Число  - Максимальное количество Запросов коммерческих предложений
//                                              на одной странице. По умолчанию - 25.
//              * КоличествоПозиций  - Число  - Максимальное количество наиболее релевантных позиций Запросов
//                                              коммерческих предложений. По умолчанию - 5.
//              * Валюта             - Строка - Код валюты по ОКВ, в которой должны быть представлены цены.
//                                              По умолчанию - "643" (Российский рубль).
//
Функция НастройкиВыводаРезультатовПоискаЗапросовКоммерческихПредложений() Экспорт
	
	НастройкиВывода = Новый Структура;
	НастройкиВывода.Вставить("НомерСтраницы",      1);
	НастройкиВывода.Вставить("КоличествоЗапросов", 25);
	НастройкиВывода.Вставить("КоличествоПозиций",  5);
	НастройкиВывода.Вставить("Валюта",             "643");
	
	Возврат НастройкиВывода;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПараметров

// Добавление в критерий поиска Запросов коммерческих предложений потенциального покупателя, среди Запросов
// которого необходимо выполнить поиск.
//
// Параметры:
//  КритерийПоиска - См. КритерийПоискаЗапросовКоммерческихПредложений
//  ИНН            - Строка    - ИНН организации-покупателя. Если указан, поиск покупателя в сервисе будет
//                               выполнен по ИНН и КПП (при наличии).
//  КПП            - Строка    - КПП организации-покупателя (при наличии).
//  Наименование   - Строка    - наименование организации-покупателя. Если не указан ИНН, поиск покупателя
//                               в сервисе будет выполнен по наименованию.
//
Процедура ДобавитьПокупателяВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска, Знач ИНН = "",
		Знач КПП = "", Знач Наименование = "") Экспорт
	
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(Наименование) Тогда
		ВызватьИсключение НСтр("ru = 'Не указаны обязательные параметры отбора позиций по покупателю.'");
	КонецЕсли;
	
	Покупатель = Новый Структура;
	Покупатель.Вставить("ИНН",          ИНН);
	Покупатель.Вставить("КПП",          КПП);
	Покупатель.Вставить("Наименование", Наименование);
	
	КритерийПоиска.Покупатели.Добавить(Покупатель);
	
КонецПроцедуры

// Добавление в критерий поиска Запросов коммерческих предложений региона доставки.
//
// Параметры:
//  КритерийПоиска - см. КритерийПоискаЗапросовКоммерческихПредложений
//  Адрес          - Строка    - идентификатор адресного объекта РФ по ФИАС.
//  Страна         - Строка    - код страны по ОКСМ. Имеет смысл только если Адрес не указан.
//
Процедура ДобавитьРегионДоставкиВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска, Знач Адрес = "",
		Знач Страна = "") Экспорт
	
	Если ПустаяСтрока(Адрес) И ПустаяСтрока(Страна) Тогда
		ВызватьИсключение НСтр("ru = 'Не указаны обязательные параметры отбора позиций по региону доставки.'");
	КонецЕсли;
	
	РегионДоставки = Новый Структура;
	РегионДоставки.Вставить("Адрес",  Адрес);
	РегионДоставки.Вставить("Страна", ?(ПустаяСтрока(Адрес), Страна, "643"));
	
	КритерийПоиска.РегионыДоставки.Добавить(РегионДоставки);
	
КонецПроцедуры

// Добавление в критерий поиска Запросов коммерческих предложений фильтра по реквизиту и значению реквизитов
// сервиса "1С:Номенклатура".
//
// Параметры:
//  КритерийПоиска - см. КритерийПоискаЗапросовКоммерческихПредложений
//  Реквизит          - Строка - идентификатор реквизита категории в сервисе "1С:Номенклатура".
//  ЗначениеРеквизита - Строка - идентификатор значения или фактическое значение реквизита категории
//                               сервиса "1С:Номенклатура".
//
Процедура ДобавитьРеквизитКатегорииВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска, Знач Реквизит,
		Знач ЗначениеРеквизита) Экспорт
	
	Если ПустаяСтрока(Реквизит) Или ПустаяСтрока(ЗначениеРеквизита) Тогда
		ВызватьИсключение НСтр("ru = 'Не указаны обязательные параметры отбора позиций по значениям реквизитов сервиса ""1С:Номенклатура"".'");
	КонецЕсли;
	
	РеквизитКатегории = Новый Структура;
	РеквизитКатегории.Вставить("Реквизит",          Реквизит);
	РеквизитКатегории.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);

	КритерийПоиска.РеквизитыКатегории.Добавить(РеквизитКатегории);
	
КонецПроцедуры

// Добавление в критерий поиска Запросов коммерческих предложений фильтра по номенклатуре и характеристике
// сервиса "1С:Номенклатура".
//
// Параметры:
//  КритерийПоиска - см. КритерийПоискаЗапросовКоммерческихПредложений
//  Номенклатура   - Строка    - идентификатор номенклатуры в сервисе "1С:Номенклатура".
//  Характеристика - Строка    - идентификатор характеристики в сервисе "1С:Номенклатура" (при наличии).
//
Процедура ДобавитьНоменклатуруСервисаВКритерийПоискаЗапросовКоммерческихПредложений(КритерийПоиска, Знач Номенклатура,
		Знач Характеристика = "") Экспорт
	
	Если ПустаяСтрока(Номенклатура) Тогда
		ВызватьИсключение НСтр("ru = 'Не указаны обязательные параметры отбора позиций по номенклатуре сервиса ""1С:Номенклатура"".'");
	КонецЕсли;
	
	ОписаниеНоменклатуры = Новый Структура;
	ОписаниеНоменклатуры.Вставить("Номенклатура",   Номенклатура);
	ОписаниеНоменклатуры.Вставить("Характеристика", Характеристика);

	КритерийПоиска.НоменклатураСервиса.Добавить(ОписаниеНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область КоммерческоеПредложение

// Проверяет, что переданный объект является прикладным документом Коммерческое предложение поставщика.
//
// Параметры:
//  Источник - Произвольный - Объект, который требуется проверить.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ЭтоКоммерческоеПредложениеПоставщика(Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Возврат Метаданные.ОпределяемыеТипы.КоммерческоеПредложениеПоставщика.Тип.СодержитТип(ТипИсточника)
		Или Метаданные.ОпределяемыеТипы.КоммерческоеПредложениеПоставщикаОбъект.Тип.СодержитТип(ТипИсточника);
	
КонецФункции

// Проверяет, что переданный объект является прикладным документом Коммерческое предложение клиенту.
//
// Параметры:
//  Источник - Произвольный - Объект, который требуется проверить.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ЭтоКоммерческоеПредложениеКлиенту(Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Возврат Метаданные.ОпределяемыеТипы.КоммерческоеПредложениеКлиенту.Тип.СодержитТип(ТипИсточника)
		Или Метаданные.ОпределяемыеТипы.КоммерческоеПредложениеКлиентуОбъект.Тип.СодержитТип(ТипИсточника);
	
КонецФункции

// Возвращает ссылку на учетный документ Запрос коммерческих предложений поставщиков по идентификатору сервиса.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор Запроса коммерческих предложений в сервисе.
// 
// Возвращаемое значение:
//  ДокументСсылка, Неопределено - Если документ найден, будет возвращена ссылка
//    (см. ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков), иначе - Неопределено.
//
Функция ЗапросКоммерческихПредложенийПоИдентификаторуСервиса(Знач Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец КАК ДокументВладелец
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ИдентификаторСервиса = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Результат = Запрос.Выполнить();
	
	ЗапросКоммерческихПредложений = Неопределено;
	
	Если Не Результат.Пустой() Тогда
		ЗапросКоммерческихПредложений = Результат.Выгрузить()[0].ДокументВладелец;
	КонецЕсли;
	
	Возврат ЗапросКоммерческихПредложений;
	
КонецФункции

// Поиск соответствия номенклатуры информационной базы номенклатуре сервиса "1С:Номенклатура" и дополнение данных
// Коммерческого предложения в модели ЭДО.
//
// Параметры:
//  ДанныеДокумента - ДеревоЗначений - Данные документа в виде дерева значений.
//    См. Макет КоммерческоеПредложение Обработки ОбменСКонтрагентами.
//
Процедура ДополнитьКоммерческоеПредложениеНоменклатуройСервиса(ДанныеДокумента) Экспорт
	
	Товары = ДанныеДокумента.Строки.Найти("Товары", "ПолныйПуть").Строки;
	
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	
	Для Каждого Позиция Из Товары Цикл
		
		ВариантОписания = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ВариантОписания", "ПолныйПуть", Истина);
		
		Если ВариантОписания.Значение <> "Сервис1СНоменклатура" Тогда
			
			НоменклатураСсылка = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.НоменклатураСсылка", "ПолныйПуть", Истина);
			ХарактеристикаСсылка = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ХарактеристикаСсылка", "ПолныйПуть", Истина);
			
			Если НоменклатураСсылка <> Неопределено Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура", НоменклатураСсылка.Значение);
				Отбор.Вставить("Характеристика", ХарактеристикаСсылка.Значение);
				
				СопоставленнаяНоменклатура = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(Отбор);
				
				Если СопоставленнаяНоменклатура.Количество()
					И ЗначениеЗаполнено(СопоставленнаяНоменклатура[0].ИдентификаторНоменклатуры) Тогда
					
					СтрокаДерева = Позиция.Строки.Найти(
					"Товары.НомерСтроки.Товар.ВариантОписания.Сервис1СНоменклатура.ИдентификаторНоменклатуры",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = СопоставленнаяНоменклатура[0].ИдентификаторНоменклатуры;
					
					СтрокаДерева = Позиция.Строки.Найти(
					"Товары.НомерСтроки.Товар.ВариантОписания.Сервис1СНоменклатура.ИдентификаторХарактеристики",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = СопоставленнаяНоменклатура[0].ИдентификаторХарактеристики;
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ВариантОписания.Сервис1СНоменклатура",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = Истина;
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ВариантОписания.УчетныеДанные",
						"ПолныйПуть", Истина);
					СтрокаДерева.Значение = Ложь;
					
					ВариантОписания.Значение = "Сервис1СНоменклатура";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АсинхронныеОперации

// Возвращает факт выполнения фонового задания, связанного с определенным документом.
//
// Параметры:
//  Документ  - ДокументСсылка - Ссылка на документ, связанный с фоновым заданием.
//  ИмяМетода - Строка - ИмяМетода фонового задания.
//
// Возвращаемое значение:
//  Булево - Факт выполнения фонового задания.
//
Функция ФоновоеЗаданиеПоДокументуВыполняется(Знач Документ, Знач ИмяМетода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	АктивноеФоновоеЗадание = АктивноеФоновоеЗаданиеПоДокументу(Документ, ИмяМетода);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат АктивноеФоновоеЗадание <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ИспользуемыеВидыЭлектронныхДокументов(ВидыЭлектронныхДокументов) Экспорт
	
	ИспользоватьЗапросКоммерческихПредложений = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков")
		Или ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента");
	
	ИспользоватьКоммерческоеПредложение = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту")
		Или ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика");
	
	ПараметрыИспользования = Новый Структура;
	ПараметрыИспользования.Вставить("ЗапросКоммерческихПредложений", ИспользоватьЗапросКоммерческихПредложений);
	ПараметрыИспользования.Вставить("КоммерческоеПредложение",       ИспользоватьКоммерческоеПредложение);
	
	КоммерческиеПредложенияПереопределяемый.ОпределитьАктуальныеВидыЭлектронныхДокументов1СЭДО(ПараметрыИспользования);
	
	ПараметрыИспользования.Свойство("ЗапросКоммерческихПредложений", ИспользоватьЗапросКоммерческихПредложений);
	ПараметрыИспользования.Свойство("КоммерческоеПредложение",       ИспользоватьКоммерческоеПредложение);
	
	Если ИспользоватьЗапросКоммерческихПредложений = Истина Тогда
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ВидыЭлектронныхДокументов, Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений);
	КонецЕсли;
	
	Если ИспользоватьКоммерческоеПредложение = Истина Тогда
		ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ВидыЭлектронныхДокументов, Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеИсходящихВидовЭлектронныхДокументов(ПредставлениеВидов) Экспорт
	
	ПредставлениеДокументов = КоммерческиеПредложенияСлужебныйПовтИсп.ПредставлениеИсходящихВидовЭлектронныхДокументов();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПредставлениеВидов, ПредставлениеДокументов, Истина);
	
КонецПроцедуры

// Параметры:
//  ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ОтключитьКонтрольОтраженияВУчетеДокументовПодсистемы(ТипДокументаЭДО) Экспорт
	
	Если ТипДокументаЭДО = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений
		Или ТипДокументаЭДО = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОпределитьСписокОперацийВходящихЭлектронныхДокументов(Знач ВидЭлектронногоДокумента, СписокОпераций) Экспорт
	
	Если ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений
		И ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульПодсистемы.ОпределитьСписокОперацийЭлектронногоДокумента(СписокОпераций);
		
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение
		И ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
		МодульПодсистемы.ОпределитьСписокОперацийЭлектронногоДокумента(СписокОпераций);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияЭДОСобытия.ПриОпределенииСпискаТиповОбъектовУчетаПоТипуДокумента.
Процедура ДополнитьСписокТиповДокументовПоВидуЭлектронногоДокумента(ТипДокумента, ОписанияОбъектовУчета) Экспорт
	
	ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(
		ОписанияОбъектовУчета,
		СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента));
	
КонецПроцедуры

// См. ИнтеграцияЭДО.ТипыОбъектовУчетаПоТипуЭлектронногоДокумента
Функция СписокТиповДокументовПоТипуЭлектронногоДокумента(Знач ТипЭлектронногоДокумента) Экспорт
	
	Результат = Новый СписокЗначений();
	
	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	Если ТипЭлектронногоДокумента = ТипыДокументов.ЗапросКоммерческихПредложений Тогда
		
		ЗапросКоммерческогоПредложенияОтКлиента =
			"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента";
		
		Если ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческогоПредложенияОтКлиента) Тогда
			МенеджерДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
			Результат.Добавить(МенеджерДокумента.ПустаяСсылка(),
				Метаданные.Документы["ЗапросКоммерческогоПредложенияОтКлиента"].Представление());
		КонецЕсли;
		
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.КоммерческоеПредложение Тогда
		
		КоммерческоеПредложениеПоставщика =
			"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика";
		
		Если ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеПоставщика) Тогда
			МенеджерДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
			Результат.Добавить(МенеджерДокумента.ПустаяСсылка(),
				Метаданные.Документы["КоммерческоеПредложениеПоставщика"].Представление());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает статус у запроса коммерческого предложения для вывода данных при поиске.
//
// Параметры:
//  ИдентификаторЗапроса - Строка - идентификатор запроса коммерческого предложения в сервисе 1С:БС.
//  СтатусЗапроса        - ПеречислениеСсылка.СтатусыЗапросаКоммерческихПредложенийДляПоиска - устанавливаемый статус запроса.
// 
Процедура УстановитьСтатусЗапросаВПоиске(Знач ИдентификаторЗапроса, Знач СтатусЗапроса) Экспорт
	
	ПустойСтатус = ЗначениеЗаполнено(СтатусЗапроса);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.СтатусыЗапросовДляПоискаКоммерческихПредложений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторЗапроса = ИдентификаторЗапроса;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() И Не ПустойСтатус Тогда
		Возврат;
	ИначеЕсли МенеджерЗаписи.Выбран() И Не ПустойСтатус Тогда
		МенеджерЗаписи.Удалить();
	ИначеЕсли МенеджерЗаписи.СтатусЗапроса = СтатусЗапроса
		Или МенеджерЗаписи.СтатусЗапроса = Перечисления.СтатусыЗапросаКоммерческихПредложенийДляПоиска.ОтветСформирован Тогда
		Возврат;
	Иначе
		МенеджерЗаписи.ИдентификаторЗапроса = ИдентификаторЗапроса;
		МенеджерЗаписи.СтатусЗапроса = СтатусЗапроса;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Менеджер по определяемому типу.
//
// Параметры:
//  ИмяОпределяемогоТипа - Строка - наименование определяемого типа.
// 
// Возвращаемое значение:
//  Произвольный - метаданные переданного типа.
//
Функция МетаданныеПоОпределяемомуТипу(ИмяОпределяемогоТипа) Экспорт
	
	Менеджер = Неопределено;
	
	ОпределяемыйТип = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа);
	Если ОпределяемыйТип <> Неопределено Тогда
	
		Тип = ОпределяемыйТип.Тип.Типы()[0];
		Менеджер = Метаданные.НайтиПоТипу(Тип);
		
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросКоммерческихПредложений

#Область Исходящий

// Возвращает параметры отправки запроса коммерческих предложений
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - См. процедуру ДанныеЗапросаКоммерческихПредложенийИсходящего.
//
// Возвращаемое значение:
//  Структура - Ключи:
//              * Организация  - ОпределяемыйТип.Организация - организация, от имени которой отправляется запрос.
//              * Адресаты     - Массив           - список контрагентов, которым должен быть направлен запрос
//                                                  коммерческих предложений. Если передан пустой список, будет
//                                                  выполнена "открытая" публикация запроса в сервисе 1С:Бизнес-сеть
//                                                  (запрос будет доступен всем организациям, зарегистрированным в
//                                                  сервисе). См. объект ОпределяемыйТип.КонтрагентБЭД.
//              * ЧерныйСписок - Булево           - если установлен в Истина, и параметр Адресаты заполнен, запрос
//                                                  будет доступен в сервисе 1С:Бизнес-сеть для всех зарегистрированных
//                                                  организаций, кроме указанных в параметре Адресаты.
//
Функция ПараметрыОтправкиЗапросаКоммерческихПредложений(Знач ДеревоДанных)
	
	НастройкиОтправки = Новый Структура;
	
	СтрокаДерева = ДеревоДанных.Строки.Найти("Организация.Ссылка", "ПолныйПуть", Истина);
	НастройкиОтправки.Вставить("Организация", СтрокаДерева.Значение);
	
	ДанныеАдресатов = ДеревоДанных.Строки.Найти("Получатели.Адресаты", "ПолныйПуть", Истина);
	
	Адресаты = Новый Массив;
	
	Если ЗначениеЗаполнено(ДанныеАдресатов.Значение) Тогда
		
		Для Каждого ДанныеАдресата Из ДанныеАдресатов.Строки Цикл
			СтрокаДерева = ДанныеАдресата.Строки.Найти("Получатели.Адресаты.НомерСтроки.Ссылка", "ПолныйПуть", Истина);
			Адресаты.Добавить(СтрокаДерева.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиОтправки.Вставить("Адресаты", Адресаты);
	
	СтрокаДерева = ДеревоДанных.Строки.Найти("Получатели.ЧерныйСписок", "ПолныйПуть", Истина);
	НастройкиОтправки.Вставить("ЧерныйСписок", ?(ЗначениеЗаполнено(СтрокаДерева.Значение), СтрокаДерева.Значение, Ложь));
	
	Возврат НастройкиОтправки;
	
КонецФункции

// Возвращает имя свойства для контроля изменения ключевых реквизитов прикладного документа Запрос коммерческих
// предложений исходящий.
//
// Возвращаемое значение:
//  Строка - Имя ключа, который используется в Структуре ДополнительныеСвойства Объекта прикладного документа
//           Запрос коммерческих предложений поставщиков для контроля изменения ключевых реквизитов.
//
Функция ИмяСвойстваКонтроляИзмененияКлючевыхРеквизитовЗапросаКоммерческихПредложений()
	
	Возврат "ЗапросКоммерческихПредложенийИзмененыКлючевыеРеквизиты";
	
КонецФункции

// Устанавливает отметку изменения ключевых реквизитов прикладного документа Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  Объект                    - ДокументОбъект - Прикладной документ Запрос коммерческих предложений поставщиков.
//                                               См. ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиковОбъект.
//  ИзмененыКлючевыеРеквизиты - Булево         - Признак изменения ключевых реквизитов документа.
//
Процедура ОтметитьИзменениеЗапросаКоммерческихПредложенийПоставщиков(Объект, Знач ИзмененыКлючевыеРеквизиты)
	
	ИмяСвойстваКонтроляИзменения = ИмяСвойстваКонтроляИзмененияКлючевыхРеквизитовЗапросаКоммерческихПредложений();
	
	Объект.ДополнительныеСвойства.Вставить(ИмяСвойстваКонтроляИзменения, ИзмененыКлючевыеРеквизиты = Истина);
	
КонецПроцедуры

// Возвращает факт изменения ключевых реквизитов прикладного документа Запрос коммерческих предложений поставщиков.
// Для установки признака изменения см. процедуру ОтметитьИзменениеЗапросаКоммерческихПредложенийПоставщиков.
//
// Параметры:
//  Объект - ДокументОбъект - Прикладной документ Запрос коммерческих предложений поставщиков.
//                            См. ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиковОбъект.
//
// Возвращаемое значение:
//  Булево - Признак изменения ключевых реквизитов документа.
//
Функция ИзмененыКлючевыеРеквизитыЗапросаКоммерческихПредложений(Знач Объект)
	
	ИзмененыКлючевыеРеквизиты = Ложь;
	
	ИмяСвойстваКонтроляИзменения = ИмяСвойстваКонтроляИзмененияКлючевыхРеквизитовЗапросаКоммерческихПредложений();
	
	Объект.ДополнительныеСвойства.Свойство(ИмяСвойстваКонтроляИзменения, ИзмененыКлючевыеРеквизиты);
	
	Возврат ИзмененыКлючевыеРеквизиты = Истина;
	
КонецФункции

// Запускает выполнение переопределяемого обработчика ПослеВыполненияСинхронизации модуля менеджера прикладного
// документа Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  СостояниеДокумента - Структура - См. функцию НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков.
//
Процедура ЗапросКоммерческихПредложенийПослеВыполненияСинхронизации(Знач СостояниеДокумента)
	
	ОбработчикиСобытийПереопределяемые =
		КоммерческиеПредложенияСлужебныйПовтИсп.ЗапросКоммерческихПредложенийОбработчикиСобытийПереопределяемые(
		СостояниеДокумента.Документ);
	
	Если ОбработчикиСобытийПереопределяемые.ПослеВыполненияСинхронизации Тогда
		ПолноеИмя = СостояниеДокумента.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		МенеджерОбъекта.ПослеВыполненияСинхронизации(СостояниеДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает факт успешного выполнения синхронизации прикладного документа Запрос коммерческих предложений поставщиков
// на основе агрегированного состояния документа.
//
// Параметры:
//  СостояниеДокумента - Структура - Возвращаемый параметр.
//                                   См. функцию НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков.
//
// Возвращаемое значение:
//  Булево - Факт успешного выполнения синхронизации.
//
Функция СинхронизацияЗапросаКоммерческихПредложенийИсходящегоВыполнена(СостояниеДокумента)
	
	СостояниеВыполнена = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	
	Возврат СостояниеДокумента.СостояниеСинхронизации = СостояниеВыполнена;
	
КонецФункции

// Интерпретирует состояние версии электронного документа в состояние синхронизации прикладного документа
// Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  СостояниеВерсии - ПеречислениеСсылка.СостоянияДокументовЭДО - Состояние версии электронного документа.
//  СостояниеСинхронизации - ПеречислениеСсылка.СостоянияСинхронизацииЗапросовКоммерческихПредложений -
//                           Возвращаемый параметр. Состояние синхронизации прикладного документа.
//  ПредставлениеОшибки - Строка - Текстовое представление ошибки.
//
Процедура СостояниеСинхронизацииПоСостояниюВерсииЭлектронногоДокумента(Знач СостояниеВерсии, СостояниеСинхронизации,
		ПредставлениеОшибки)
	
	СостояниеВыполняется = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполняется;
	СостояниеВыполнена   = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	СостояниеОшибка      = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
	
	Если СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		СостояниеСинхронизации = СостояниеВыполняется;
	ИначеЕсли СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение
		Или СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка
		Или СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору
		Или СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора
		Или СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении
		Или СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение
		Или СостояниеВерсии = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		СостояниеСинхронизации = СостояниеВыполнена;
	Иначе
		СостояниеСинхронизации = СостояниеОшибка;
		ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Состояние электронного документа - ""%1"".'"), Строка(СостояниеВерсии));
	КонецЕсли;
	
КонецПроцедуры

// Принудительно закрывает электронный документ по основанию, для которого владельцем является прикладной документ
// Запрос коммерческих предложений поставщиков.
//
// Параметры:
//  СостояниеДокумента - Структура - Возвращаемый параметр.
//                                   См. функцию НовоеСостояниеЗапросаКоммерческихПредложенийПоставщиков.
//  Основание  - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений - 
//               Техническое основание электронного документа (используется при групповой отправке вместо учетного
//               документа).
//  Получатель - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений -
//               Техническое основание электронного документа.
//  Успешно    - Булево - Возвращаемый параметр (необязательный). Признак успешного закрытия электронного документа.
//
Процедура ЗакрытьЭлектронныйДокументПоЗапросуКоммерческихПредложенийИсходящему(СостояниеДокумента,
		Знач Основание, Знач Получатель, Успешно = Истина)
	
	ПричинаЗакрытия = НСтр("ru='Закрыт автоматически при изменении учетного документа.'");
	КоличествоЗакрытых = 0;
	
	ОбменСКонтрагентамиИнтеграция.ЗакрытьЭлектронныйДокумент(Основание, Неопределено, ПричинаЗакрытия);
	
	Успешно = (КоличествоЗакрытых = 1);
	
	ОснованиеОбъект = Основание.ПолучитьОбъект();
	
	СостояниеВыполнена = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	СостояниеОшибка    = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
	
	Если Успешно Тогда
		ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполнена;
		ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, Получатель,
			ОснованиеОбъект.СостояниеСинхронизации);
	Иначе
		ОснованиеОбъект.СостояниеСинхронизации = СостояниеОшибка;
		ОснованиеОбъект.ПредставлениеОшибки = НСтр("ru = 'Не удалось закрыть электронный документ принудительно.'");
		ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента, Получатель,
			ОснованиеОбъект.СостояниеСинхронизации, ОснованиеОбъект.ПредставлениеОшибки);
	КонецЕсли;
	
	ОснованиеОбъект.Записать();
	
КонецПроцедуры

// Возвращает настройки обмена электронными документами для Запроса коммерческих предложений поставщиков.
//
// Параметры:
//  Организация  - ОпределяемыйТип.Организация   - Организация, от имени которой отправляется запрос.
//  Адресат      - ОпределяемыйТип.КонтрагентБЭД - Получатель электронного документа.
//
// Возвращаемое значение:
//  Структура - Настройки обмена электронными документами.
//
Функция НастройкиОбменаЭДОПоЗапросуКоммерческихПредложенийИсходящему(Знач Организация, Знач Адресат)
	
	ОписаниеОбъектаУчета = ОбменСКонтрагентамиИнтеграция.НовоеОписаниеОбъектаУчета();
	ОписаниеОбъектаУчета.Организация = Организация;
	ОписаниеОбъектаУчета.Контрагент = Адресат;
	ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Исходящий;
	ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений;
	
	Возврат ОбменСКонтрагентамиИнтеграция.НастройкиОтправки(ОписаниеОбъектаУчета);
	
КонецФункции

// Принудительное (досрочное) завершение Запроса коммерческих предложений поставщиков.
//
Процедура ОтменитьОтправкуЗапросаКоммерческихПредложений(Знач Документ, СостояниеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка КАК Ссылка,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации КАК СпособСинхронизации
	|ПОМЕСТИТЬ АктуальныеОснования
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации <> ЗНАЧЕНИЕ(Перечисление.СпособыСинхронизацииЗапросовКоммерческихПредложений.БезЭлектроннойПодписи)
	|	И НЕ(ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииЗапросовКоммерческихПредложений.Удалить)
	|				И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Запланированные
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииЗапросовКоммерческихПредложений.Добавить)
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Требуется)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииЗапросовКоммерческихПредложений.Добавить)
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеОснования.Ссылка КАК Основание,
	|	АктуальныеОснования.СпособСинхронизации КАК СпособСинхронизации,
	|	ЕСТЬNULL(ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Контрагент, """") КАК Контрагент,
	|	НЕ Запланированные.Ссылка ЕСТЬ NULL КАК ТребовалосьДобавить
	|ИЗ
	|	АктуальныеОснования КАК АктуальныеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Получатели КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели
	|		ПО АктуальныеОснования.Ссылка = ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запланированные КАК Запланированные
	|		ПО АктуальныеОснования.Ссылка = Запланированные.Ссылка";
	
	Запрос.УстановитьПараметр("ДокументВладелец", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СпособСервис               = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.Сервис;
	СпособСЭлектроннойПодписью = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.СЭлектроннойПодписью;
	
	ДействиеУдалить = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Удалить;
	
	СостояниеВыполнена = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	СостояниеОшибка    = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
	
	Отказ = Ложь;
	
	ИдентификаторОрганизации = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СпособСинхронизации = СпособСервис Тогда
			
			ОснованиеОбъект = Выборка.Основание.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
			
			ПредставлениеОшибки = НСтр("ru = 'Ошибка работы с сервисом.'");
			
			Если Выборка.ТребовалосьДобавить Тогда
				
				ОснованиеОбъект.ДействиеСинхронизации  = ДействиеУдалить;
				ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполнена;
				ОснованиеОбъект.Записать();
				
			Иначе
				
				Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
					ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ОснованиеОбъект.Организация);
				КонецЕсли;
				
				ТекущаяВерсия = АктуальныйНомерВерсииЗапросаКоммерческихПредложенийВСервисе(
					ИдентификаторОрганизации, 
					ОснованиеОбъект.ИдентификаторСервиса);
				
				Если Не (ОснованиеОбъект.ДействиеСинхронизации = ДействиеУдалить
					И ОснованиеОбъект.СостояниеСинхронизации = СостояниеОшибка) Тогда
					ОснованиеОбъект.КлючИдемпотентности = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				
				ОтмененоУспешно = ОтменитьЗапросКоммерческихПредложенийВСервисе(
					ИдентификаторОрганизации, 
					ОснованиеОбъект.ИдентификаторСервиса,
					ТекущаяВерсия, 
					ОснованиеОбъект.КлючИдемпотентности);
				
				Отказ = Не ОтмененоУспешно;
				
				ОснованиеОбъект.ДействиеСинхронизации  = ДействиеУдалить;
				ОснованиеОбъект.СостояниеСинхронизации = ?(ОтмененоУспешно, СостояниеВыполнена, СостояниеОшибка);
				ОснованиеОбъект.ПредставлениеОшибки    = ПредставлениеОшибки;
				ОснованиеОбъект.Записать();
				
			КонецЕсли;
			
			ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
				Выборка.Контрагент, ОснованиеОбъект.СостояниеСинхронизации, ПредставлениеОшибки);
			
		ИначеЕсли Выборка.СпособСинхронизации = СпособСЭлектроннойПодписью Тогда
			
			Если Не Отказ Тогда
				
				Если Выборка.ТребовалосьДобавить Тогда
					
					ОснованиеОбъект = Выборка.Основание.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
					ОснованиеОбъект.ДействиеСинхронизации = ДействиеУдалить;
					ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполнена;
					ОснованиеОбъект.Записать();
					
					ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
						Выборка.Контрагент, ОснованиеОбъект.СостояниеСинхронизации);
					
				Иначе
					ЗакрытьЭлектронныйДокументПоЗапросуКоммерческихПредложенийИсходящему(СостояниеДокумента,
						Выборка.Основание, Выборка.Контрагент);
				КонецЕсли;
				
			Иначе
				
				ДетализироватьСостояниеЗапросаКоммерческихПредложенийПоставщиков(СостояниеДокумента,
					Выборка.Контрагент, СостояниеОшибка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросКоммерческихПредложенийПоставщиковЗанят(Знач Документ)
	
	Возврат ФоновоеЗаданиеПоДокументуВыполняется(Документ,
		"КоммерческиеПредложенияСлужебный.ОтправитьЗапросКоммерческихПредложений")
		Или ФоновоеЗаданиеПоДокументуВыполняется(Документ,
		"КоммерческиеПредложенияСлужебный.ОтменитьЗапросКоммерческихПредложений");
	
КонецФункции

Функция РазрешеноУдалениеЗапросаКоммерческихПредложенийПоставщиков(Знач ЗапросКоммерческихПредложений,
		Знач ДанныеДокумента)
	
	УдалениеРазрешено = Ложь;
	
	ДатаОкончанияРассмотрения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеДокумента,
		"УсловияИПоложения.ДатаОкончанияРассмотрения");
	
	Если ДатаОкончанияРассмотрения < ТекущаяДатаСеанса() Тогда
		
		УстановитьПометкуУдаленияОснованийЭлектронныхДокументов(ЗапросКоммерческихПредложений);
		
		УдалениеРазрешено = Истина;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
		|ГДЕ
		|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
		|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументВладелец", ЗапросКоммерческихПредложений);
		
		УдалениеРазрешено = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат УдалениеРазрешено;
	
КонецФункции

Процедура УстановитьПометкуУдаленияОснованийЭлектронныхДокументов(Знач ЗапросКоммерческихПредложений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументВладелец", ЗапросКоммерческихПредложений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Основание = Выборка.Ссылка.ПолучитьОбъект();
		Основание.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Актуализация плана синхронизации Запроса коммерческих предложений поставщиков.
//
// Параметры:
//  Документ        - ДокументСсылка - Прикладной документ Запрос коммерческих предложений поставщиков.
//    См. ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков.
//  Отказ           - Булево - Признак наличия ошибок при актуализации плана синхронизации. Возвращаемый параметр.
//  ДанныеДокумента - ДеревоЗначений - Данные документа в модели ЭДО. Необязательный.
//    См. Макет ЗапросКоммерческихПредложений Обработки ЗапросыКоммерческихПредложений.
//
Процедура АктуализироватьПланСинхронизацииЗапросаКоммерческихПредложенийПоставщиков(Знач Документ, Отказ,
		Знач ДанныеДокумента = Неопределено)
	
	Если ДанныеДокумента = Неопределено Тогда
		
		ДанныеЗапроса = ДанныеЗапросаКоммерческихПредложенийПоставщиков(Документ, Ложь, Отказ);
		
		Если Отказ Тогда
			Возврат;
		Иначе
			ДанныеДокумента = ДанныеЗапроса.ДанныеДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтправки = ПараметрыОтправкиЗапросаКоммерческихПредложений(ДанныеДокумента);
	
	Адресаты = Новый Соответствие;
	
	Если Не ПараметрыОтправки.ЧерныйСписок Тогда
		Для Каждого Контрагент Из ПараметрыОтправки.Адресаты Цикл
			Адресаты.Вставить(Контрагент, Истина);
		КонецЦикла;
	КонецЕсли;
	
	АдресатыСЭлектроннойПодписью = Новый Соответствие;
	
	Если ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		ОписаниеОбъектаУчета = ОбменСКонтрагентамиИнтеграция.НовоеОписаниеОбъектаУчета();
		ОписаниеОбъектаУчета.Организация = ПараметрыОтправки.Организация;
		ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Исходящий;
		ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений;
		
		Для Каждого Получатель Из ПараметрыОтправки.Адресаты Цикл
			
			ОписаниеОбъектаУчета.Контрагент = Получатель;
			
			НастройкиОбмена =  ОбменСКонтрагентамиИнтеграция.НастройкиОтправки(ОписаниеОбъектаУчета);
			
			Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Формировать Тогда
				АдресатыСЭлектроннойПодписью.Вставить(Получатель, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка КАК Ссылка,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации КАК СпособСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации КАК СостояниеСинхронизации
	|ПОМЕСТИТЬ Основания
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И (ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииЗапросовКоммерческихПредложений.Удалить)
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена)) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основания.Ссылка КАК Ссылка,
	|	Основания.СпособСинхронизации КАК СпособСинхронизации,
	|	Основания.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	Основания.СостояниеСинхронизации КАК СостояниеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Контрагент КАК Контрагент
	|ИЗ
	|	Основания КАК Основания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Получатели КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели
	|		ПО Основания.Ссылка = ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложенийПолучатели.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основания.СостояниеСинхронизации.Порядок
	|ИТОГИ ПО
	|	СпособСинхронизации,
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ДокументВладелец", Документ);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОснований = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДействиеДобавить   = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Добавить;
	ДействиеИзменить   = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Изменить;
	ДействиеУдалить    = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Удалить;
	
	СостояниеТребуется   = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Требуется;
	СостояниеВыполнена   = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
	
	СпособСервис                = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.Сервис;
	СпособБезЭлектроннойПодписи = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.БезЭлектроннойПодписи;
	СпособСЭлектроннойПодписью  = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.СЭлектроннойПодписью;
	
	ОбработанныеАдресаты = Новый Соответствие;
	
	Для Каждого ГруппировкаСпособСинхронизации Из ДанныеОснований.Строки Цикл
		
		Если ГруппировкаСпособСинхронизации.СпособСинхронизации = СпособСервис Тогда
			
			Для Каждого ГруппировкаОснование Из ГруппировкаСпособСинхронизации.Строки Цикл
				
				Основание = ГруппировкаОснование; // Структура
				ОснованиеОбъект                        = Основание.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
				ОснованиеОбъект.ДействиеСинхронизации  = ДействиеИзменить;
				ОснованиеОбъект.СостояниеСинхронизации = СостояниеТребуется;
				
				ОснованиеОбъект.Получатели.Очистить();
				Если Не ПараметрыОтправки.ЧерныйСписок Тогда
					Для Каждого Контрагент Из ПараметрыОтправки.Адресаты Цикл
						ОснованиеОбъект.Получатели.Добавить().Контрагент = Контрагент;
					КонецЦикла;
				КонецЕсли;
				
				ОснованиеОбъект.Записать();
				
			КонецЦикла;
			
		ИначеЕсли ГруппировкаСпособСинхронизации.СпособСинхронизации = СпособБезЭлектроннойПодписи
			Или ГруппировкаСпособСинхронизации.СпособСинхронизации = СпособСЭлектроннойПодписью Тогда
			
			Для Каждого ГруппировкаОснование Из ГруппировкаСпособСинхронизации.Строки Цикл
				
				Основание = ГруппировкаОснование; // Структура
				ОснованиеОбъект = Основание.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
				
				Контрагент = ОснованиеОбъект.Получатели[0].Контрагент;
				
				Если ГруппировкаСпособСинхронизации.СпособСинхронизации = СпособБезЭлектроннойПодписи Тогда
					НеобходимаОтправка = Адресаты[Контрагент] <> Неопределено;
				Иначе
					НеобходимаОтправка = Адресаты[Контрагент] <> Неопределено
						И АдресатыСЭлектроннойПодписью[Контрагент] <> Неопределено;
				КонецЕсли;
				
				Если НеобходимаОтправка Тогда
					ОснованиеОбъект.ДействиеСинхронизации  = ДействиеИзменить;
					ОснованиеОбъект.СостояниеСинхронизации = СостояниеТребуется;
				Иначе
					ОснованиеОбъект.ДействиеСинхронизации  = ДействиеУдалить;
					ОснованиеОбъект.СостояниеСинхронизации = СостояниеВыполнена;
				КонецЕсли;
				
				ОснованиеОбъект.Записать();
				
				ОбработанныеАдресаты.Вставить(Контрагент, ГруппировкаСпособСинхронизации.СпособСинхронизации);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПараметрыОтправки.Адресаты.Количество()
		Или ПараметрыОтправки.ЧерныйСписок Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Контрагент Из ПараметрыОтправки.Адресаты Цикл
		
		Если ОбработанныеАдресаты[Контрагент] = Неопределено Тогда
			
			ОснованиеОбъект = Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СоздатьЭлемент();
			ОснованиеОбъект.ДокументВладелец = Документ;
			ОснованиеОбъект.СпособСинхронизации = СпособБезЭлектроннойПодписи;
			ОснованиеОбъект.Организация = ПараметрыОтправки.Организация;
			ОснованиеОбъект.ДействиеСинхронизации = ДействиеДобавить;
			ОснованиеОбъект.СостояниеСинхронизации = СостояниеТребуется;
			ОснованиеОбъект.Получатели.Добавить().Контрагент = Контрагент;
			ОснованиеОбъект.Записать();
			
			ОбработанныеАдресаты.Вставить(Контрагент, СпособБезЭлектроннойПодписи);
			
		КонецЕсли;
		
		Если ОбработанныеАдресаты[Контрагент] = СпособБезЭлектроннойПодписи Тогда
			
			Если АдресатыСЭлектроннойПодписью[Контрагент] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОснованиеОбъект = Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СоздатьЭлемент();
			ОснованиеОбъект.ДокументВладелец = Документ;
			ОснованиеОбъект.СпособСинхронизации = СпособСЭлектроннойПодписью;
			ОснованиеОбъект.Организация = ПараметрыОтправки.Организация;
			ОснованиеОбъект.ДействиеСинхронизации = ДействиеДобавить;
			ОснованиеОбъект.СостояниеСинхронизации = СостояниеТребуется;
			ОснованиеОбъект.Получатели.Добавить().Контрагент = Контрагент;
			ОснованиеОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сервис

#Область Команды

// Размещает новый Запрос коммерческих предложений в сервисе и возвращает его идентификатор.
//
// Параметры:
//  ДанныеЗапроса       - ДеревоЗначений - См. процедуру ДанныеЗапросаКоммерческихПредложенийИсходящего().
//  КлючИдемпотентности - Строка         - Используется для предотвращения дублирования Запросов коммерческих
//                                         предложений в сервисе, в случае повторных обращений на создание
//                                         (т.н. "double submit problem"), когда документ был успешно опубликован
//                                         во время предыдущего запроса, но ответ не был возвращен (например,
//                                         из-за тайм-аута).
//  ТекстОшибки         - Строка         - Человекочитаемое представление ошибки, полученное от сервиса.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Идентификатор созданного документа - в случае успешного размещения,
//                         Неопределено - при ошибке публикации.
//
Функция РазместитьЗапросКоммерческихПредложенийВСервисе(Знач ДанныеЗапроса, Знач КлючИдемпотентности, ТекстОшибки = "")
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("КлючИдемпотентности", КлючИдемпотентности);
	ПараметрыОперации.Вставить("ДанныеЗапроса",       ДанныеЗапроса);
	
	Отказ            = Ложь;
	ПараметрыКоманды = ПараметрыРазмещенияЗапросаКоммерческихПредложенийВСервисе(ПараметрыОперации);
	
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ВыполнитьЗапрос(ПараметрыКоманды, Отказ, ТекстОшибки);
	
	Если Отказ
		Или Результат = Неопределено
		Или ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Неопределено;
	
	Если Не Отказ И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		АдресНовогоРесурса = СокрЛП(Результат.Заголовки["Location"]);
		
		Если Не ПустаяСтрока(АдресНовогоРесурса) Тогда
			АдресНовогоРесурса = Сред(АдресНовогоРесурса, СтрНайти(АдресНовогоРесурса, ПараметрыКоманды.Адрес));
			АдресНовогоРесурса = СтрЗаменить(СтрЗаменить(АдресНовогоРесурса,ПараметрыКоманды.Адрес,""),"/","");
			
			Если Не ПустаяСтрока(АдресНовогоРесурса) Тогда
				Идентификатор = АдресНовогоРесурса;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Обновляет существующий Запрос коммерческих предложений в сервисе и возвращает новый номер версии документа.
//
// Параметры:
//  Идентификатор       - Строка         - Идентификатор Запроса коммерческих предложений в сервисе.
//  ТекущаяВерсия       - Число          - Текущий номер версии Запроса коммерческих предложений в сервисе, согласно
//                                         данным информационной базы.
//  ДанныеЗапроса       - ДеревоЗначений - См. процедуру ДанныеЗапросаКоммерческихПредложенийИсходящего().
//  КлючИдемпотентности - Строка         - Используется для предотвращения т.н. "double submit problem".
//  ТекстОшибки         - Строка         - Человекочитаемое представление ошибки, полученное от сервиса.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Новый номер версии документа - в случае успешного размещения, Неопределено - при ошибке.
//
Функция ОбновитьЗапросКоммерческихПредложенийВСервисе(Знач Идентификатор, Знач ТекущаяВерсия, Знач ДанныеЗапроса,
		Знач КлючИдемпотентности, ТекстОшибки = "")
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Идентификатор",       Идентификатор);
	ПараметрыОперации.Вставить("ТекущаяВерсия",       ТекущаяВерсия);
	ПараметрыОперации.Вставить("ДанныеЗапроса",       ДанныеЗапроса);
	ПараметрыОперации.Вставить("КлючИдемпотентности", КлючИдемпотентности);
	
	Отказ            = Ложь;
	ПараметрыКоманды = ПараметрыОбновленияЗапросаКоммерческихПредложенийВСервисе(ПараметрыОперации);
	
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ВыполнитьЗапрос(ПараметрыКоманды, Отказ, ТекстОшибки);
	
	НоваяВерсия = Неопределено;
	
	Если Не Отказ И ТипЗнч(Результат) = Тип("Структура") Тогда
		НоваяВерсия = Результат.Заголовки["ETag"];
	КонецЕсли;
	
	Возврат НоваяВерсия;
	
КонецФункции

// Отменяет существующий Запрос коммерческих предложений в сервисе (безвозвратно).
//
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор организации в сервисе.
//  Идентификатор       - Строка - Идентификатор Запроса коммерческих предложений в сервисе.
//  ТекущаяВерсия       - Число  - Текущий номер версии Запроса коммерческих предложений в сервисе, согласно
//                                         данным информационной базы.
//  КлючИдемпотентности - Строка - Используется для предотвращения т.н. "double submit problem".
//  ТекстОшибки         - Строка         - Человекочитаемое представление ошибки, полученное от сервиса.
//  
// Возвращаемое значение:
//  Булево - Истина - в случае успешной отмены, Ложь - при ошибке.
//
Функция ОтменитьЗапросКоммерческихПредложенийВСервисе(
			Знач ИдентификаторОрганизации, 
			Знач Идентификатор, 
			Знач ТекущаяВерсия, 
			Знач КлючИдемпотентности,
			ТекстОшибки = "")
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Идентификатор",            Идентификатор);
	ПараметрыОперации.Вставить("ТекущаяВерсия",            ТекущаяВерсия);
	ПараметрыОперации.Вставить("КлючИдемпотентности",      КлючИдемпотентности);
	ПараметрыОперации.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Отказ            = Ложь;
	ПараметрыКоманды = ПараметрыОтменыЗапросаКоммерческихПредложенийВСервисе(ПараметрыОперации);
	ВыполнитьЗапрос(ПараметрыКоманды, Отказ, ТекстОшибки);
	
	Возврат Не Отказ;
	
КонецФункции

// Возвращает актуальный номер версии Запроса коммерческих предложений в сервисе.
//
// Параметры:
//  ИдентификаторОрганизации - Строка - идентификатор организации в сервисе.
//  Идентификатор  - Строка - Идентификатор Запроса коммерческих предложений в сервисе.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Актуальный номер версии документа - в случае успешного выполнения,
//                         Неопределено - при ошибке.
//
Функция АктуальныйНомерВерсииЗапросаКоммерческихПредложенийВСервисе(Знач ИдентификаторОрганизации, Знач Идентификатор)
	
	ПараметрыОперации = Новый Структура("ИдентификаторОрганизации, Идентификатор", ИдентификаторОрганизации, Идентификатор);
	
	Отказ            = Ложь;
	ПараметрыКоманды = ПараметрыПолученияНомераВерсииЗапросаКоммерческихПредложенийВСервисе(ПараметрыОперации);
	Результат        = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	АктуальнаяВерсия = Неопределено;
	
	Если Не Отказ И ТипЗнч(Результат) = Тип("Структура") Тогда
		АктуальнаяВерсия = Результат.Заголовки["ETag"];
	КонецЕсли;
	
	Возврат АктуальнаяВерсия;
	
КонецФункции

#КонецОбласти

#Область ПараметрыКоманд

Функция ПараметрыРазмещенияЗапросаКоммерческихПредложенийВСервисе(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Размещение Запроса коммерческого предложения в сервисе'");
	ПараметрыКоманды.Адрес          = МаскаAPIРазмещенияЗапросовКоммерческихПредложенийВСервисе();
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Контент        = "application/vnd.1cbn-rfp-placement.v1+json";
	ПараметрыКоманды.Аутентификация = Истина;
	
	Организация = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ПараметрыОперации.ДанныеЗапроса, "Организация.Ссылка");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыКоманды.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	КонецЕсли;
		
	ЗапросВМоделиСервиса = ДанныеЗапросаКоммерческихПредложенийДляИзмененийВСервисе(ПараметрыОперации.ДанныеЗапроса);
	
	Если ЗапросВМоделиСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКоманды.Данные = СериализованноеЗначение(ЗапросВМоделиСервиса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("vnd-1cbn-idempotency-key", ПараметрыОперации.КлючИдемпотентности);
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(201);
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(419); // Запрос с таким ключем идемпотентности уже обрабатывался.
	
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	ПараметрыКоманды.ВозвращатьЗаголовки = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыОбновленияЗапросаКоммерческихПредложенийВСервисе(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизацииПоИдентификаторуЗапроса(ПараметрыОперации.Идентификатор);
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Обновление Запроса коммерческого предложения в сервисе'");
	ПараметрыКоманды.Адрес          =
		МаскаAPIРазмещенияЗапросовКоммерческихПредложенийВСервисе() + "/" + ПараметрыОперации.Идентификатор;
	ПараметрыКоманды.Метод          = "PUT";
	ПараметрыКоманды.Контент        = "application/vnd.1cbn-rfp-placement.v1+json";
	ПараметрыКоманды.Аутентификация = Истина;
	
	ЗапросВМоделиСервиса = ДанныеЗапросаКоммерческихПредложенийДляИзмененийВСервисе(ПараметрыОперации.ДанныеЗапроса);
	
	Если ЗапросВМоделиСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКоманды.Данные = СериализованноеЗначение(ЗапросВМоделиСервиса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("If-Match",                 ПараметрыОперации.ТекущаяВерсия);
	Заголовки.Вставить("vnd-1cbn-idempotency-key", ПараметрыОперации.КлючИдемпотентности);
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(201);
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(419); // Запрос с таким ключем идемпотентности уже обрабатывался.
	
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	ПараметрыКоманды.ВозвращатьЗаголовки = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыОтменыЗапросаКоммерческихПредложенийВСервисе(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ПараметрыОперации.ИдентификаторОрганизации;
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Обновление Запроса коммерческого предложения в сервисе'");
	ПараметрыКоманды.Адрес          =
		МаскаAPIРазмещенияЗапросовКоммерческихПредложенийВСервисе() + "/" + ПараметрыОперации.Идентификатор;
	ПараметрыКоманды.Метод          = "PATCH";
	ПараметрыКоманды.Контент        = "application/vnd.1cbn-rfp-cancel.v1+json";
	ПараметрыКоманды.Аутентификация = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("If-Match",                 ПараметрыОперации.ТекущаяВерсия);
	Заголовки.Вставить("vnd-1cbn-idempotency-key", ПараметрыОперации.КлючИдемпотентности);
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(204); // No content
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(419); // Запрос с таким ключем идемпотентности уже обрабатывался
	
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыПолученияНомераВерсииЗапросаКоммерческихПредложенийВСервисе(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ПараметрыОперации.ИдентификаторОрганизации;
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Получение Запроса коммерческого предложения из сервиса'");
	ПараметрыКоманды.Адрес          =
		МаскаAPIРазмещенияЗапросовКоммерческихПредложенийВСервисе() + "/" + ПараметрыОперации.Идентификатор;
	ПараметрыКоманды.Метод          = "GET";
	ПараметрыКоманды.Контент        = "application/vnd.1cbn-rfp-view.v1+json";
	ПараметрыКоманды.Аутентификация = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("If-None-Match", "0");
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	ПараметрыКоманды.РасширятьКонтент              = Ложь;
	ПараметрыКоманды.ВозвращатьЗаголовки           = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыПолученияДанныхЗапросаКоммерческихПредложенийВСервисе(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыОперации.Организация);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение Запроса коммерческого предложения из сервиса'");
	ПараметрыКоманды.Адрес        = СтрШаблон("%1/%2?priceCurrencyCode=%3",
		МаскаAPIВитриныЗапросовКоммерческихПредложенийВСервисе(),
		ПараметрыОперации.Идентификатор,
		ПараметрыОперации.Валюта);
	ПараметрыКоманды.Метод          = "GET";
	ПараметрыКоманды.Аутентификация = Истина;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("If-None-Match", 0);
	Заголовки.Вставить("Accept", "application/vnd.1cbn-rfp-view.v1+json");
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	ПараметрыКоманды.РасширятьКонтент = Ложь;
	
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Указанного Запроса коммерческих предложений не существует.'"));
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыПолученияПрисоединенногоФайлаИзСервиса(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизацииПоИдентификаторуЗапроса(ПараметрыОперации.ИдентификаторЗапроса);
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение вложения Запроса коммерческого предложения из сервиса'");
	ПараметрыКоманды.Адрес        = СтрШаблон("%1/%2/attachments/%3",
		МаскаAPIВитриныЗапросовКоммерческихПредложенийВСервисе(),
		ПараметрыОперации.ИдентификаторЗапроса,
		ПараметрыОперации.ИдентификаторВложения);
	ПараметрыКоманды.Метод          = "GET";
	ПараметрыКоманды.Аутентификация = Истина;
	
	ПараметрыКоманды.РасширятьКонтент = Ложь;
	ПараметрыКоманды.ВозвращатьЗаголовки = Истина;
	ПараметрыКоманды.ОтветДвоичныеДанные = Истина;
	
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Запрос коммерческих предложений или вложение к нему не найдены.'"));
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Параметры:
// 	ПараметрыОперации - Структура:
// 	  * КритерииПоиска - Массив Из Структура - состав см. КритерийПоискаЗапросовКоммерческихПредложений
//    * НастройкиВывода - Структура -
// Возвращаемое значение:
// 	Структура - Описание:
// * Заголовки - Соответствие -
Функция ПараметрыПоискаЗапросовКоммерческихПредложенийВСервисе(Знач ПараметрыОперации)
	
	ПараметрыКоманды = НовыйЗапросСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыОперации.Организация);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск позиций Запросов коммерческих предложений в сервисе'");
	ПараметрыКоманды.Адрес = СтрШаблон("%1/search?page=%2&size=%3&topPositions=%4&priceCurrencyCode=%5&embed=%6",
		МаскаAPIВитриныЗапросовКоммерческихПредложенийВСервисе(),
		ПараметрыОперации.НастройкиВывода.НомерСтраницы,
		ПараметрыОперации.НастройкиВывода.КоличествоЗапросов,
		ПараметрыОперации.НастройкиВывода.КоличествоПозиций,
		ПараметрыОперации.НастройкиВывода.Валюта,
		"querySearchHits");
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Аутентификация = ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторОрганизации);
	
	КоличествоКритериев = ПараметрыОперации.КритерииПоиска.Количество();
	
	ОтборВМоделиСервиса = Новый Структура;
	ОтборВМоделиСервиса.Вставить("customers",           Новый Массив);
	ОтборВМоделиСервиса.Вставить("deliveryRegionCodes", Новый Массив);
	
	Если КоличествоКритериев < 2 Тогда
		
		ПараметрыКоманды.Контент = "application/vnd.1cbn-rfp-query.v1+json";
		
		Если КоличествоКритериев Тогда
			
			Критерий = ПараметрыОперации.КритерииПоиска[0];
			
			ОтборЗапросов = Новый Структура;
			
			Для Каждого Покупатель Из Критерий.Покупатели Цикл
				ДобавитьПокупателяВОтборЗапросовКоммерческихПредложенийВСервисе(ОтборЗапросов, Покупатель);
			КонецЦикла;
			
			Для Каждого РегионДоставки Из Критерий.РегионыДоставки Цикл
				ДобавитьРегионДоставкиВОтборЗапросовКоммерческихПредложенийВСервисе(ОтборЗапросов, РегионДоставки);
			КонецЦикла;
			
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "isPartialPurchaseAcceptable",
				Критерий.ЧастичноеЗакрытиеРазрешено);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "totalMaxPriceFrom",
				Критерий.СуммаДокументаОт * 100);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "totalMaxPriceTo",
				Критерий.СуммаДокументаДо * 100);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "priceCurrencyCode",
				ПараметрыОперации.НастройкиВывода.Валюта);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "query",
				Критерий.ТекстПоискаЗапросов);
			
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборВМоделиСервиса, "rfpCriteria",
				ОтборЗапросов);
			
			КритерийПоискаСервиса = КритерийПоискаПозицииЗапросовКоммерческихПредложенийВСервисе(Критерий);
			
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборВМоделиСервиса, "positionsCriteria",
				КритерийПоискаСервиса);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыКоманды.Контент = "application/vnd.1cbn-rfp-multipos-query.v1+json";
		
		ОтборВМоделиСервиса.Вставить("positionCriterias", Новый Массив);
		
		Для Каждого Критерий Из ПараметрыОперации.КритерииПоиска Цикл
			
			ОтборЗапросов = Новый Структура;
			
			Для Каждого Покупатель Из Критерий.Покупатели Цикл
				ДобавитьПокупателяВОтборЗапросовКоммерческихПредложенийВСервисе(ОтборЗапросов, Покупатель);
			КонецЦикла;
			
			Для Каждого РегионДоставки Из Критерий.РегионыДоставки Цикл
				ДобавитьРегионДоставкиВОтборЗапросовКоммерческихПредложенийВСервисе(ОтборЗапросов, РегионДоставки);
			КонецЦикла;
			
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "isPartialPurchaseAcceptable",
				Критерий.ЧастичноеЗакрытиеРазрешено);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "totalMaxPriceFrom",
				Критерий.СуммаДокументаОт * 100);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "totalMaxPriceTo",
				Критерий.СуммаДокументаДо * 100);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборЗапросов, "query",
				Критерий.ТекстПоискаЗапросов);
			ЗаполнитьНеобязательноеСвойствоМодели(ОтборВМоделиСервиса, "rfpCriteria",
				ОтборЗапросов);
			
			КритерийПоискаСервиса = КритерийПоискаПозицииЗапросовКоммерческихПредложенийВСервисе(Критерий);
			
			Если ЗначениеЗаполнено(КритерийПоискаСервиса) Тогда
				ОтборВМоделиСервиса.positionCriterias.Добавить(КритерийПоискаСервиса);
			КонецЕсли;
			
		КонецЦикла;
		
		ПроверитьНеобязательноеСвойствоМодели(ОтборВМоделиСервиса, "positionCriterias");
		
	КонецЕсли;
	
	ПроверитьНеобязательноеСвойствоМодели(ОтборВМоделиСервиса, "customers");
	ПроверитьНеобязательноеСвойствоМодели(ОтборВМоделиСервиса, "deliveryRegionCodes");
	
	ПараметрыКоманды.Данные = СериализованноеЗначение(ОтборВМоделиСервиса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/vnd.1cbn-rfp-summary-page.v1+json");
	
	ПараметрыКоманды.Вставить("Заголовки", Заголовки);
	
	ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция МаскаAPIРазмещенияЗапросовКоммерческихПредложенийВСервисе()
	
	Возврат "/rfp/placement";
	
КонецФункции

Функция МаскаAPIВитриныЗапросовКоммерческихПредложенийВСервисе()
	
	Возврат "/rfp/storefront";
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Преобразует данные документа ЭДО в модель данных сервиса, использующуюся для изменения
// Запроса коммерческих предложений.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - См. процедуру ДанныеЗапросаКоммерческихПредложенийИсходящего().
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * audience             - Структура - См. функцию RfpAudience(). Необязательный.
//              * proposalRequirements - Структура - См. функцию RfpProposalRequirements().
//              * attachments          - Массив    - Прикрепленные к документу файлы. См. функцию RfpAttachmentFile().
//
Функция ДанныеЗапросаКоммерческихПредложенийДляИзмененийВСервисе(Знач ДеревоДанных)
	
	PlaceRfpCommand = Новый Структура; // Модель PlaceRfpCommandV1
	
	// DocumentOrderNumber
	СтрокаДерева = ДеревоДанных.Строки.Найти("Номер", "ПолныйПуть");
	PlaceRfpCommand.Вставить("documentOrderNumber", СтрокаДерева.Значение);
	
	
	// Audience
	ДанныеАдресатов = ДеревоДанных.Строки.Найти("Получатели.Адресаты", "ПолныйПуть", Истина);
	
	Если ЗначениеЗаполнено(ДанныеАдресатов.Значение) Тогда
		
		Audience = RfpAudience();
		
		Для Каждого ДанныеАдресата Из ДанныеАдресатов.Строки Цикл
			
			РеквизитыАдресата = Новый Структура;
			
			ВидКонтрагента = ДанныеАдресата.Строки.Найти("Получатели.Адресаты.НомерСтроки.Вид", "ПолныйПуть", Истина);
			
			Если ВидКонтрагента.Значение = "ИндивидуальныйПредприниматель" Тогда
				
				СтрокаДерева = ВидКонтрагента.Строки.Найти("Получатели.Адресаты.НомерСтроки.Вид.ИндивидуальныйПредприниматель.ИНН",
					"ПолныйПуть", Истина);
				
				РеквизитыАдресата.Вставить("inn", Строка(СтрокаДерева.Значение));
				РеквизитыАдресата.Вставить("kpp", "0");
				
			ИначеЕсли ВидКонтрагента.Значение = "ЮридическоеЛицо" Тогда
				
				СтрокаДерева = ВидКонтрагента.Строки.Найти("Получатели.Адресаты.НомерСтроки.Вид.ЮридическоеЛицо.ИНН",
					"ПолныйПуть", Истина);
				
				РеквизитыАдресата.Вставить("inn", Строка(СтрокаДерева.Значение));
				
				СтрокаДерева = ВидКонтрагента.Строки.Найти("Получатели.Адресаты.НомерСтроки.Вид.ЮридическоеЛицо.КПП",
					"ПолныйПуть", Истина);
				
				РеквизитыАдресата.Вставить("kpp", Строка(СтрокаДерева.Значение));
				
			КонецЕсли;
			
			Audience.parties.Добавить(РеквизитыАдресата);
			
		КонецЦикла;
		
		СтрокаДерева = ДеревоДанных.Строки.Найти("Получатели.ЧерныйСписок", "ПолныйПуть", Истина);
		
		Audience.restrictionType = ?(СтрокаДерева.Значение = Истина, "BLACK_LIST", "WHITE_LIST");
		
		PlaceRfpCommand.Вставить("audience", Audience);
		
	КонецЕсли;
	
	// ProposalRequirements
	ProposalRequirements = RfpProposalRequirements();
	
	Организация = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Ссылка");
	
	ИдентификаторАбонента = БизнесСеть.ИдентификаторОрганизации(Организация);
	
	Если Не ЗначениеЗаполнено(ИдентификаторАбонента) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Абонент с идентификатором %1 не найден в сервисе 1С:Бизнес-сеть.'"),
								ИдентификаторАбонента);
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Получение идентификатора абонента сервиса 1С:Бизнес-сеть'"),
			ТекстОшибки,
			НСтр("ru = 'Абонент сервиса 1С:Бизнес-сеть не найден.'"),
			КодСобытияКоммерческиеПредложения());
		Возврат Неопределено;
	КонецЕсли;
	
	ProposalRequirements.customerPartyId = ИдентификаторАбонента;
	
	Товары = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
	
	Если ЗначениеЗаполнено(Товары.Значение) Тогда
		
		// ProposalRequirements.Positions
		Для Каждого Позиция Из Товары.Строки Цикл
			
			Position = RfpPosition();
			
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.ИдентификаторСтроки", "ПолныйПуть", Истина);
			
			Position.positionCorrelationId = СтрокаДерева.Значение;
			
			СпособОписанияТовара = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Сервис1СНоменклатура", "ПолныйПуть", Истина);
			
			Если ЗначениеЗаполнено(СпособОписанияТовара.Значение) Тогда
				
				Если СпособОписанияТовара.Значение = "Номенклатура" Тогда
					
					// ProposalRequirements.Positions.Product.Ref1CnSpecification
					Ref1CnSpecification = RfpPosition_Product_1CnSpecification();
					
					СтрокаДерева =
						СпособОписанияТовара.Строки.Найти(
						"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура.ИдентификаторНоменклатуры",
						"ПолныйПуть", Истина);
					Ref1CnSpecification.Вставить("productSpecificationId", СтрокаДерева.Значение);
					
					СтрокаДерева =
						СпособОписанияТовара.Строки.Найти(
						"Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Номенклатура.ИдентификаторХарактеристики",
						"ПолныйПуть", Истина);
					ЗаполнитьНеобязательноеСвойствоМодели(Ref1CnSpecification, "productCharacteristicId", СтрокаДерева.Значение);
					
					Position.product.Вставить("ref1CnSpecification", Ref1CnSpecification);
					
				ИначеЕсли СпособОписанияТовара.Значение = "Рубрика" Тогда
					
					// ProposalRequirements.Positions.Product.CustomerSpecification
					CustomerSpecification = RfpPosition_Product_CustomerSpecification();
					
					Ref1CnCategory = Новый Структура;
					
					СтрокаДерева =
						СпособОписанияТовара.Строки.Найти("Товары.НомерСтроки.Товар.Сервис1СНоменклатура.Рубрика.ИдентификаторРубрики",
						"ПолныйПуть", Истина);
					Ref1CnCategory.Вставить("categoryId", СтрокаДерева.Значение);
					
					CustomerSpecification.Вставить("ref1CnCategory", Ref1CnCategory);
					
					НоменклатураНаименование =
						Позиция.Строки.Найти("Товары.НомерСтроки.Товар.НоменклатураНаименование", "ПолныйПуть", Истина).Значение;
					ХарактеристикаНаименование =
						Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ХарактеристикаНаименование", "ПолныйПуть", Истина).Значение;
					
					ПредставлениеНоменклатуры = ?(ЗначениеЗаполнено(ХарактеристикаНаименование),
						СтрШаблон("%1 (%2)", НоменклатураНаименование, ХарактеристикаНаименование),
						НоменклатураНаименование);
					
					CustomerSpecification.Вставить("productName", ПредставлениеНоменклатуры);
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Описание", "ПолныйПуть", Истина);
					ЗаполнитьНеобязательноеСвойствоМодели(CustomerSpecification, "productDescription", СтрокаДерева.Значение);
					
					Производитель = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Производитель", "ПолныйПуть", Истина).Значение;
					ТорговаяМарка = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ТорговаяМарка", "ПолныйПуть", Истина).Значение;
					
					ЗаполнитьНеобязательноеСвойствоМодели(CustomerSpecification.manufacturer, "tradeMark", ТорговаяМарка);
					ЗаполнитьНеобязательноеСвойствоМодели(CustomerSpecification.manufacturer, "name", Производитель);
					
					ПроверитьНеобязательноеСвойствоМодели(CustomerSpecification, "manufacturer");
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.АртикулПоставщика", "ПолныйПуть", Истина);
					ЗаполнитьНеобязательноеСвойствоМодели(CustomerSpecification, "partNumber", СтрокаДерева.Значение);
					
					СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.ЕдиницаИзмеренияКодОКЕИ", "ПолныйПуть", Истина);
					
					CustomerSpecification.Вставить("baseUnitOkeiCode", СтрокаДерева.Значение);
					
					Штрихкоды = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Штрихкоды", "ПолныйПуть", Истина).Значение;
					
					Если ЗначениеЗаполнено(Штрихкоды) Тогда
						
						Для Каждого Штрихкод Из Штрихкоды Цикл
							CustomerSpecification.barCodes.Добавить(Штрихкод);
						КонецЦикла;
						
					Иначе
						CustomerSpecification.Удалить("barCodes");
					КонецЕсли;
					
					РеквизитыТовара = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.РеквизитыТовара", "ПолныйПуть", Истина);
					
					Если ЗначениеЗаполнено(РеквизитыТовара.Значение) Тогда
						
						Для Каждого РеквизитТовара Из РеквизитыТовара.Строки Цикл
							
							ЗначенияРеквизитов = Новый Структура;
							
							СтрокаДерева =
								РеквизитТовара.Строки.Найти("Товары.НомерСтроки.Товар.РеквизитыТовара.НомерСтроки.ИмяРеквизита",
								"ПолныйПуть", Истина);
							
							ЗначенияРеквизитов.Вставить("name", СтрокаДерева.Значение);
							
							СтрокаДерева =
								РеквизитТовара.Строки.Найти("Товары.НомерСтроки.Товар.РеквизитыТовара.НомерСтроки.ЗначениеРеквизита",
								"ПолныйПуть", Истина);
							
							ЗначенияРеквизитов.Вставить("value", СтрокаДерева.Значение);
							
							CustomerSpecification.requisiteValues.Добавить(ЗначенияРеквизитов);
							
						КонецЦикла;
						
					Иначе
						CustomerSpecification.Удалить("requisiteValues");
					КонецЕсли;
					
					Position.product.Вставить("customerSpecification", CustomerSpecification);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// ProposalRequirements.Positions.AdditionalProductDescription
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Товар.Описание", "ПолныйПуть", Истина);
			
			ЗаполнитьНеобязательноеСвойствоМодели(Position.additionalProductDescription, "description", СтрокаДерева.Значение);
			
			Position.additionalProductDescription.Удалить("title");
			
			ПроверитьНеобязательноеСвойствоМодели(Position, "additionalProductDescription");
			
			// ProposalRequirements.Positions.PurchaseConditions
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.ЛогистическаяУпаковка.Описание", "ПолныйПуть", Истина);
			ЗаполнитьНеобязательноеСвойствоМодели(Position.PurchaseConditions.packaging, "description", СтрокаДерева.Значение);
			
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.ЛогистическаяУпаковка.Числитель", "ПолныйПуть", Истина);
			Position.PurchaseConditions.packaging.Вставить("unitsNumerator", СтрокаДерева.Значение);
			
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.ЛогистическаяУпаковка.Знаменатель", "ПолныйПуть", Истина);
			Position.PurchaseConditions.packaging.Вставить("unitsDenominator", СтрокаДерева.Значение);
			
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Цена", "ПолныйПуть", Истина);
			maxPrice = ?(ЗначениеЗаполнено(СтрокаДерева.Значение), СтрокаДерева.Значение * 100, 0);
			ЗаполнитьНеобязательноеСвойствоМодели(Position.PurchaseConditions, "maxPrice", maxPrice);
			
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.Количество", "ПолныйПуть", Истина);
			Position.PurchaseConditions.Вставить("numberOfPackages", СтрокаДерева.Значение);
			
			СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.СрокПоставки", "ПолныйПуть", Истина);
			
			Если СтрокаДерева.Значение = "ВДнях" Тогда
				СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.СрокПоставки.ВДнях", "ПолныйПуть", Истина);
				ЗаполнитьНеобязательноеСвойствоМодели(Position.PurchaseConditions, "maxDaysForDelivery", СтрокаДерева.Значение);
			ИначеЕсли СтрокаДерева.Значение = "НаДату" Тогда
				СтрокаДерева = Позиция.Строки.Найти("Товары.НомерСтроки.СрокПоставки.НаДату", "ПолныйПуть", Истина);
				ЗаполнитьНеобязательноеСвойствоМодели(Position.PurchaseConditions, "dateDesiredDeliveryTo",
					ДатаВФорматеСервиса(СтрокаДерева.Значение));
			КонецЕсли;
			
			ПроверитьНеобязательноеСвойствоМодели(Position.PurchaseConditions, "maxDaysForDelivery");
			ПроверитьНеобязательноеСвойствоМодели(Position.PurchaseConditions, "dateDesiredDeliveryTo");
			
			ProposalRequirements.positions.Добавить(Position);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ProposalRequirements.TermsAndConditions
	ТолькоОбеспечениеЦеликом = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ВсеИлиНичего");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions,
		"isPartialPurchaseAcceptable", ТолькоОбеспечениеЦеликом = Ложь);
	
	ПриемПередачаНаКомиссию = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ПриемПередачаНаКомиссию");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions,
		"isCommissionTransaction", ПриемПередачаНаКомиссию);
	
	КодФИАС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"АдресДоставки.Код");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions.deliveryRegion,
		"fiasRegionCode", КодФИАС);

	КодСтраны = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"АдресДоставки.КодСтраны");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions.deliveryRegion,
		"countryCode", КодСтраны);
	
	ПроверитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions, "deliveryRegion");
	
	ТолькоСНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ТолькоСНДС");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions, "vatDeductible", ТолькоСНДС);
	
	КодВалюты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ВалютаКод");
	ProposalRequirements.termsAndConditions.currencyCode = КодВалюты;
	
	ДатаНачалаСбора = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ДатаНачалаСбора");
	ProposalRequirements.termsAndConditions.dateCollectingFrom = ДатаВФорматеСервиса(ДатаНачалаСбора);
	
	ДатаОкончанияСбора = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ДатаОкончанияСбора");
	ProposalRequirements.termsAndConditions.dateCollectingTo = ДатаВФорматеСервиса(ДатаОкончанияСбора);
	
	ДатаОкончанияРассмотрения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.ДатаОкончанияРассмотрения");
	ProposalRequirements.termsAndConditions.dateConsideringTo = ДатаВФорматеСервиса(ДатаОкончанияРассмотрения);
	
	УсловияДоставки = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.УсловияДоставки");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions,
		"deliveryDescription", УсловияДоставки);
	
	УсловияОплаты = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.УсловияОплаты");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions,
		"paymentDescription", УсловияОплаты);
	
	УсловияПрочие = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"УсловияИПоложения.УсловияПрочие");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.termsAndConditions,
		"description", УсловияПрочие);
	
	// ProposalRequirements.Contacts
	КонтактноеЛицо = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"КонтактноеЛицо.ФИО");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.contacts, "contactName", КонтактноеЛицо);
	
	ЭлектроннаяПочта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"КонтактноеЛицо.ЭлектроннаяПочта");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.contacts, "email", ЭлектроннаяПочта);
	
	Телефон = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных,
		"КонтактноеЛицо.Телефон");
	ЗаполнитьНеобязательноеСвойствоМодели(ProposalRequirements.contacts, "phone", Телефон);
	
	PlaceRfpCommand.Вставить("proposalRequirements", ProposalRequirements);
	
	// Attachments
	ПрикрепленныеФайлы = ДеревоДанных.Строки.Найти("ПрисоединенныеФайлы", "ПолныйПуть");
	
	Если ЗначениеЗаполнено(ПрикрепленныеФайлы.Значение) Тогда
		
		PlaceRfpCommand.Вставить("attachments", Новый Массив);
		
		Для Каждого ПрикрепленныйФайл Из ПрикрепленныеФайлы.Строки Цикл
			
			RfpAttachmentFile = RfpAttachmentFile();
			
			СтрокаДерева = ПрикрепленныйФайл.Строки.Найти("ПрисоединенныеФайлы.НомерСтроки.ИмяФайла", "ПолныйПуть", Истина);
			ЗаполнитьНеобязательноеСвойствоМодели(RfpAttachmentFile, "title", СтрокаДерева.Значение);
			
			СтрокаДерева = ПрикрепленныйФайл.Строки.Найти("ПрисоединенныеФайлы.НомерСтроки.ДвоичныеДанные",
				"ПолныйПуть", Истина);
			RfpAttachmentFile.Content = РаботаСФайламиБЭД.Base64СтрокаИзДвоичныхДанных(СтрокаДерева.Значение);
			
			PlaceRfpCommand.Attachments.Добавить(RfpAttachmentFile);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат PlaceRfpCommand;
	
КонецФункции

// Преобразует критерий поиска позиции Запросов коммерческих предложений в модель данных сервиса.
//
// Параметры:
//  КритерийПоиска - Структура - См. функцию КритерийПоискаЗапросовКоммерческихПредложений.
// 
// Возвращаемое значение:
//  Структура - См. функцию PositionSearchCriteria.
//
Функция КритерийПоискаПозицииЗапросовКоммерческихПредложенийВСервисе(Знач КритерийПоиска)
	
	PositionSearchCriteria = PositionSearchCriteria();
	
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "query",
		КритерийПоиска.ТекстПоискаПозиций);
	
	Для Каждого Артикул Из КритерийПоиска.Артикулы Цикл
		Если Не ПустаяСтрока(Артикул) Тогда
			PositionSearchCriteria.PartNumbers.Добавить(Артикул);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Штрихкод Из КритерийПоиска.Штрихкоды Цикл
		Если Не ПустаяСтрока(Штрихкод) Тогда
			PositionSearchCriteria.BarCodes.Добавить(Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "positionMaxPriceFrom",
		КритерийПоиска.ЦенаПозицииОт * 100);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "positionMaxPriceTo",
		КритерийПоиска.ЦенаПозицииДо * 100);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "positionMaxSumPriceFrom",
		КритерийПоиска.СуммаПозицииОт * 100);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "positionMaxSumPriceTo",
		КритерийПоиска.СуммаПозицииДо * 100);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "unitOkeiCode",
		КритерийПоиска.ЕдиницаИзмерения);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "demandedUnitsNumberFrom",
		КритерийПоиска.МинимальноеКоличество);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "demandedUnitsNumberTo",
		КритерийПоиска.МаксимальноеКоличество);
	ЗаполнитьНеобязательноеСвойствоМодели(PositionSearchCriteria, "ref1CnCategoryId",
		КритерийПоиска.ИдентификаторКатегории);
	
	Если ЗначениеЗаполнено(КритерийПоиска.ИдентификаторКатегории) Тогда
		
		Для Каждого РеквизитКатегории Из КритерийПоиска.РеквизитыКатегории Цикл
			
			Если ТипЗнч(РеквизитКатегории.ЗначениеРеквизита) = Тип("Массив") Тогда 
				Для Каждого ЗначениеРеквизита Из РеквизитКатегории.ЗначениеРеквизита Цикл 
					ДобавитьCategoryRequisitesFilter(PositionSearchCriteria.ref1CnCategoryRequisitesFilter,
						РеквизитКатегории.Реквизит, ЗначениеРеквизита);
				КонецЦикла;
			Иначе
				ДобавитьCategoryRequisitesFilter(PositionSearchCriteria.ref1CnCategoryRequisitesFilter,
					РеквизитКатегории.Реквизит, РеквизитКатегории.ЗначениеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ОписаниеНоменклатуры Из КритерийПоиска.НоменклатураСервиса Цикл
		
		ProductSpecification = Новый Структура;
		ЗаполнитьНеобязательноеСвойствоМодели(ProductSpecification, "nomenclatureId",
			ОписаниеНоменклатуры.Номенклатура);
		ЗаполнитьНеобязательноеСвойствоМодели(ProductSpecification, "nomenclatureCharacteristicId",
			ОписаниеНоменклатуры.Характеристика);
		
		Если ЗначениеЗаполнено(ProductSpecification) Тогда
			PositionSearchCriteria.ref1CnProductSpecificationIds.Добавить(ProductSpecification);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Критерий Из PositionSearchCriteria Цикл
		ПроверитьНеобязательноеСвойствоМодели(PositionSearchCriteria, Критерий.Ключ);
	КонецЦикла;
	
	Возврат PositionSearchCriteria;
	
КонецФункции

Процедура ДобавитьCategoryRequisitesFilter(ref1CnCategoryRequisitesFilter, Реквизит, ЗначениеРеквизита)
	
	CategoryRequisitesFilter = Новый Структура;
	ЗаполнитьНеобязательноеСвойствоМодели(CategoryRequisitesFilter, "requisiteId",
		Реквизит);
	ЗаполнитьНеобязательноеСвойствоМодели(CategoryRequisitesFilter, "requisiteValue",
		ЗначениеРеквизита);
		
	Если ЗначениеЗаполнено(CategoryRequisitesFilter) Тогда
		ref1CnCategoryRequisitesFilter.Добавить(CategoryRequisitesFilter);
	КонецЕсли;
		
КонецПроцедуры

// Добавление в модель критерия поиска Запросов коммерческих предложений сервиса потенциального покупателя,
// среди Запросов которого необходимо выполнить поиск.
//
// Параметры:
//   Отбор - Структура.
//   Покупатель - Структура.
// 
Процедура ДобавитьПокупателяВОтборЗапросовКоммерческихПредложенийВСервисе(Отбор, Знач Покупатель)
	
	Customer = Новый Структура;
	
	Если ЗначениеЗаполнено(Покупатель.ИНН) Тогда
		ЗаполнитьНеобязательноеСвойствоМодели(Customer, "inn", Покупатель.ИНН);
		ЗаполнитьНеобязательноеСвойствоМодели(Customer, "kpp", Покупатель.КПП);
	ИначеЕсли ЗначениеЗаполнено(Покупатель.Наименование)
		И СтрДлина(Покупатель.Наименование) > 2 Тогда
		ЗаполнитьНеобязательноеСвойствоМодели(Customer, "name", Покупатель.Наименование);
	КонецЕсли;
	
	Если Не Отбор.Свойство("customers") Тогда
		Отбор.Вставить("customers", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Customer) Тогда
		Отбор.Customers.Добавить(Customer);
	КонецЕсли;
	
КонецПроцедуры

// Добавление в модель критерия поиска Запросов коммерческих предложений сервиса региона доставки.
//
Процедура ДобавитьРегионДоставкиВОтборЗапросовКоммерческихПредложенийВСервисе(Отбор, Знач РегионДоставки)
	
	DeliveryRegion = Новый Структура;
	ЗаполнитьНеобязательноеСвойствоМодели(DeliveryRegion, "countryCode", РегионДоставки.Страна);
	ЗаполнитьНеобязательноеСвойствоМодели(DeliveryRegion, "regionCode", РегионДоставки.Адрес);
	
	Если Не Отбор.Свойство("deliveryRegionCodes") Тогда
		Отбор.Вставить("deliveryRegionCodes", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(DeliveryRegion) Тогда
		Отбор.DeliveryRegionCodes.Добавить(DeliveryRegion);
	КонецЕсли;
	
КонецПроцедуры

// Преобразует модель Запроса коммерческих предложений сервиса в модель ЭДО.
//
// Параметры:
//  МодельСервиса - Структура - Модель данных RequestForProposalViewV1.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Данные документа в виде дерева значений.
//                   См. Макет ЗапросКоммерческихПредложений Обработки ОбменСКонтрагентами.
//
Функция ЗапросКоммерческихПредложенийИзМоделиСервиса(Знач МодельСервиса)
	
	ДанныеДокумента = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(
		"ОбменСКонтрагентами.ЗапросКоммерческихПредложений");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "ИдентификаторДокумента",
		ЗначениеСвойстваМоделиСервиса(МодельСервиса, "id"));
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "Номер",
		ЗначениеСвойстваМоделиСервиса(МодельСервиса, "documentOrderNumber"));
		
	ДатаРазмещения = ЗначениеСвойстваМоделиСервиса(МодельСервиса, "datePlaced");
	Если ДатаРазмещения <> Неопределено Тогда
		ДатаРазмещения = ДатаИзФорматаСервиса(Лев(ДатаРазмещения, 10));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "Дата", ДатаРазмещения);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДанныеДокумента, "Описание",
		ЗначениеСвойстваМоделиСервиса(МодельСервиса, "proposalRequirements.termsAndConditions.description"));
		
	// Организация (отправитель)
	Организация = Новый Структура;
	Организация.Вставить("Наименование", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.customerParty.name"));
	Организация.Вставить("Вид", Новый Структура);
	
	ИНН = ЗначениеСвойстваМоделиСервиса(МодельСервиса, "proposalRequirements.customerParty.inn");
	
	Если ТипЗнч(ИНН) = Тип("Строка") И Не ПустаяСтрока(ИНН) Тогда
		
		Если СтрДлина(ИНН) = 12 Тогда
			
			ИндивидуальныйПредприниматель = Новый Структура;
			ИндивидуальныйПредприниматель.Вставить("ИНН", ИНН);
			Организация.Вид.Вставить("ИндивидуальныйПредприниматель", ИндивидуальныйПредприниматель);
			
			Отправитель = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты", "", ИндивидуальныйПредприниматель);
			
		Иначе
			
			ЮридическоеЛицо = Новый Структура;
			ЮридическоеЛицо.Вставить("ИНН", ИНН);
			ЮридическоеЛицо.Вставить("КПП", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
				"proposalRequirements.customerParty.kpp"));
			
			Организация.Вид.Вставить("ЮридическоеЛицо", ЮридическоеЛицо);
			
			Отправитель = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты", "", ЮридическоеЛицо);
			
		КонецЕсли;
		
		Организация.Вставить("Ссылка", Отправитель);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, Организация, "Организация");
	
	// Контактное лицо
	КонтактноеЛицо = Новый Структура;
	КонтактноеЛицо.Вставить("ФИО", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.contacts.contactName"));
	КонтактноеЛицо.Вставить("ЭлектроннаяПочта", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.contacts.email"));
	КонтактноеЛицо.Вставить("Телефон", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.contacts.phone"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, КонтактноеЛицо, "КонтактноеЛицо");
	
	// Товары
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("ИдентификаторСтроки");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЛогистическаяУпаковка");
	Товары.Колонки.Добавить("СрокПоставки");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("Товар");
	
	Для Каждого ПозицияСервиса Из МодельСервиса.proposalRequirements.positions Цикл
		
		ТоварнаяПозиция = Товары.Добавить();
		ТоварнаяПозиция.ИдентификаторСтроки = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
			"positionCorrelationId");
		ТоварнаяПозиция.Количество = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
			"purchaseConditions.numberOfPackages");
		
		ЛогистическаяУпаковка = Новый Структура;
		ЛогистическаяУпаковка.Вставить("Описание",    ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
			"purchaseConditions.packaging.description"));
		ЛогистическаяУпаковка.Вставить("Числитель",   ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
			"purchaseConditions.packaging.unitsNumerator"));
		ЛогистическаяУпаковка.Вставить("Знаменатель", ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
			"purchaseConditions.packaging.unitsDenominator"));
		ТоварнаяПозиция.ЛогистическаяУпаковка = ЛогистическаяУпаковка;
		
		ДатаДоставки = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "purchaseConditions.dateDesiredDeliveryTo");
		
		Если ЗначениеЗаполнено(ДатаДоставки) Тогда
			ТоварнаяПозиция.СрокПоставки = Новый Структура("НаДату", ДатаИзФорматаСервиса(ДатаДоставки));
		Иначе
			ТоварнаяПозиция.СрокПоставки = Новый Структура("ВДнях", ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
				"purchaseConditions.maxDaysForDelivery"));
		КонецЕсли;
		
		Цена = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "purchaseConditions.maxPriceProjection.price");
		ТоварнаяПозиция.Цена = ?(ЗначениеЗаполнено(Цена), Окр(Цена / 100, 2), 0);
		
		ТоварнаяПозиция.Товар = Новый Структура;
		
		Если ЗначениеЗаполнено(ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification")) Тогда
			
			ТоварнаяПозиция.Товар.Вставить("НоменклатураНаименование",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.productName"));
			ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияКодОКЕИ",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.baseUnitOkeiCode"));
			ТоварнаяПозиция.Товар.Вставить("Описание",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.productDescription"));
			ТоварнаяПозиция.Товар.Вставить("АртикулПоставщика",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.partNumber"));
			ТоварнаяПозиция.Товар.Вставить("Производитель",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.manufacturer.name"));
			ТоварнаяПозиция.Товар.Вставить("ТорговаяМарка",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.manufacturer.tradeMark"));
			
			РеквизитыТовара = Новый ТаблицаЗначений;
			РеквизитыТовара.Колонки.Добавить("ИмяРеквизита");
			РеквизитыТовара.Колонки.Добавить("ЗначениеРеквизита");
			
			ДанныеРеквизитов = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.customSpecification.requisiteValues");
			
			Если ЗначениеЗаполнено(ДанныеРеквизитов) Тогда
				
				Для Каждого ОписаниеРеквизита Из ДанныеРеквизитов Цикл
					РеквизитТовара                   = РеквизитыТовара.Добавить();
					РеквизитТовара.ИмяРеквизита      = ОписаниеРеквизита.name;
					РеквизитТовара.ЗначениеРеквизита = ОписаниеРеквизита.value;
				КонецЦикла;
				
				ТоварнаяПозиция.Товар.Вставить("РеквизитыТовара", РеквизитыТовара);
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification")) Тогда
			
			Номенклатура = Новый Структура;
			Номенклатура.Вставить("ИдентификаторНоменклатуры",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification.productSpecificationId"));
			Номенклатура.Вставить("ИдентификаторХарактеристики",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification.productCharacteristicId"));
			
			Сервис1СНоменклатура = Новый Структура;
			Сервис1СНоменклатура.Вставить("Номенклатура", Номенклатура);
			
			ТоварнаяПозиция.Товар.Вставить("Сервис1СНоменклатура", Сервис1СНоменклатура);
			
			ТоварнаяПозиция.Товар.Вставить("НоменклатураНаименование",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification.productName"));
			ТоварнаяПозиция.Товар.Вставить("ХарактеристикаНаименование",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification.productCharacteristicName"));
			ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияКодОКЕИ",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification.baseUnitOkeiCode"));
			
			ТоварнаяПозиция.Товар.Вставить("Описание",
				ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "product.ref1CnSpecification.productDescription"));
			
			ТоварнаяПозиция.Товар.Вставить("Штрихкоды", ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
				"product.ref1CnSpecification.productBarCodes"));
			
		КонецЕсли;
		
		ТоварнаяПозиция.Товар.Вставить("ЕдиницаИзмеренияНаименование", ЗначениеСвойстваМоделиСервиса(ПозицияСервиса,
			"purchaseConditions.packaging.description"));
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, Товары, "Товары");
	
	// УсловияИПоложения
	УсловияИПоложения = Новый Структура;
	УсловияИПоложения.Вставить("УсловияДоставки", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.deliveryDescription"));
	УсловияИПоложения.Вставить("УсловияОплаты", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.paymentDescription"));
	УсловияИПоложения.Вставить("УсловияПрочие", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.description"));
	УсловияИПоложения.Вставить("ПриемПередачаНаКомиссию", ?(ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.isCommissionTransaction") = Истина, Истина, Ложь));
	УсловияИПоложения.Вставить("ВсеИлиНичего", ?(ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.isPartialPurchaseAcceptable") = Истина, Ложь, Истина));
	УсловияИПоложения.Вставить("ТолькоСНДС", ?(ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.vatDeductible") = Истина, Истина, Ложь));
	
	ВалютаКод = ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.totalMaxPriceProjection.currencyCode");
	
	УсловияИПоложения.Вставить("ВалютаКод", ВалютаКод);
	
	ДатаНачалаСбора = ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.dateCollectingFrom");
	ДатаОкончанияСбора = ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.dateCollectingTo");
	ДатаОкончанияРассмотрения = ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.dateConsideringTo");
	
	УсловияИПоложения.Вставить("ДатаНачалаСбора", ДатаИзФорматаСервиса(ДатаНачалаСбора));
	УсловияИПоложения.Вставить("ДатаОкончанияСбора", ДатаИзФорматаСервиса(ДатаОкончанияСбора));
	УсловияИПоложения.Вставить("ДатаОкончанияРассмотрения", ДатаИзФорматаСервиса(ДатаОкончанияРассмотрения));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, УсловияИПоложения, "УсловияИПоложения");
	
	// АдресДоставки
	АдресДоставки = Новый Структура;
	АдресДоставки.Вставить("Представление", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.delivery.address"));
	АдресДоставки.Вставить("Код", ЗначениеСвойстваМоделиСервиса(МодельСервиса,
		"proposalRequirements.termsAndConditions.delivery.fiasAddressPath"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьСтруктуруВГруппуДерева(ДанныеДокумента, АдресДоставки, "АдресДоставки");
	
	// Присоединенные файлы (без двоичных данных)
	Attachments = ЗначениеСвойстваМоделиСервиса(МодельСервиса, "attachments");
	
	Если ЗначениеЗаполнено(Attachments) Тогда
		
		Вложения = Новый ТаблицаЗначений;
		Вложения.Колонки.Добавить("ИмяФайла");
		Вложения.Колонки.Добавить("РасширениеФайла");
		
		ИндексВложений = Новый Соответствие;
		
		НомерСтроки = 1;
		
		Для Каждого Attachment Из Attachments Цикл
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.ИмяФайла = ЗначениеСвойстваМоделиСервиса(Attachment, "title");
			ОписаниеВложения.РасширениеФайла = ЗначениеСвойстваМоделиСервиса(Attachment, "fileExt");
			
			СсылкаНаВложение = ЗначениеСвойстваМоделиСервиса(Attachment, "href");
			ПозицияРазделителя = СтрНайти(СсылкаНаВложение, "/", НаправлениеПоиска.СКонца);
			ИдентификаторВложения = Прав(СсылкаНаВложение, СтрДлина(СсылкаНаВложение) - ПозицияРазделителя);
			ИндексВложений.Вставить(НомерСтроки, ИдентификаторВложения);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДокумента, Вложения, "ПрисоединенныеФайлы");
		
		ДеревоЭлектронногоДокументаБЭД.ДобавитьЗначениеВДерево(ДанныеДокумента,
			"ИндексВложенийСлужебный", ИндексВложений);
		
	КонецЕсли;
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Конвертирует результат поиска Запросов коммерческих предложений из модели сервиса в прикладную модель.
//
// Параметры:
//  МодельСервиса - Структура - найденные позиции Запросов коммерческих предложений в модели сервиса. Ключи:
//    * page - Структура   - данные постраничного вывода результатов со следующими ключами:
//      ** number        - Число - номер текущей страницы.
//      ** size          - Число - количество позиций на текущей странице.
//      ** totalElements - Число - общее количество позиций, соответствующих условиям отбора.
//      ** totalPages    - Число - общее количество страниц с учетом заданного максимального количества позиций на одной странице.
//    * _embedded - Структура - содержимое страницы данных:
//      ** items - Массив Из Структура - обобщенная информация о Запросах коммерческих предложений, с ключами:
//         *** id - Строка - идентификатор Запроса коммерческих предложений в сервисе.
//         *** customerParty - Структура - организация, разместившая Запрос коммерческих предложений. Ключи:
//             **** bnetInternalId - Строка - внутренний идентификатор Организации в сервисе "1С:Бизнес-сеть".
//             **** inn            - Строка - ИНН организации.
//             **** kpp            - Строка - КПП организации.
//             **** name           - Строка - Наименование организации.
//         *** contacts - Структура - Данные для связи с контактным лицом:
//             **** contactName - Строка - ФИО менеджера.
//             **** phone       - Строка - контактный телефон.
//             **** email       - Строка - адрес электронной почты.
//         *** isPartialPurchaseAcceptable - Булево - коммерческое предложение потенциального Поставщика может содержать
//                                                    позиции только по части товаров, указанных в Запросе коммерческих предложений.
//                                                    Допускается частичное закрытие потребности покупателя.
//         *** deliveryRegion - Структура - информация о регионе доставки товара. Ключи:
//             **** countryCode     - Строка - код страны по ОКСМ.
//             **** fiasAddressPath - Массив - идентификаторы адресных объектов РФ по ФИАС от более общей локации
//                                             до более точной (например: регион, область, город, улица, дом).
//                                             Элементы массива имеют строковый тип.
//             **** address - Строка - представление адреса.
//         *** vatDeductible - Булево - закупка облагается НДС.
//         *** currencyCode  - Строка - код валюты по ОКВ Запроса коммерческих предложений.
//         *** totalMaxPriceProjection - Структура - сумма документа, приведенная к указанной валюте:
//             **** currencyCode - Строка - код валюты по ОКВ, указанный во входящем параметре НастройкиВывода.
//             **** price - Строка - сумма документа в минимальных единицах соответствующей валюты
//                                   (копейки, центы, т.п.) с точностью 2 знака после запятой.
//         *** dateCollectingFrom - Строка - дата начала сбора Коммерческих предложений.
//         *** dateCollectingTo   - Строка - дата окончания сбора Коммерческих предложений.
//         *** dateConsideringTo  - Строка - дата окончания рассмотрения поступивших Коммерческих предложений.
//         *** positions - Структура - сокращенное представление позиций Запроса коммерческих предложений,
//                                     соответствующих критериям поиска, ключи:
//             **** totalCount - Число - общее количество позиций в Запросе коммерческого предложения.
//             **** relevantPositionsTotalCount - Число - количество релевантных позиций в Запросе коммерческого предложения.
//             **** relevantPositionsTotalMaxPrice - Число - общая стоимость найденных релевантных позиций в 
//                                                           Запросе коммерческого предложения.
//             **** relevantPositionsTotalMaxPriceProjection - Структура - общая стоимость найденных релевантных позиций
//                        в Запросе коммерческого предложения, приведенная к указанной валюте:
//                  ***** currencyCode - Строка - код валюты по ОКВ, указанный во входящем параметре НастройкиВывода.
//                  ***** price        - Строка - сумма документа в минимальных единицах соответствующей валюты
//                        (копейки, центы, т.п.) с точностью 2 знака после запятой.
//             **** items - Массив Из Структура - представление позиций, соответствующих критериям поиска, элементы:
//                  ***** positionCorrelationId       - Строка - наименование товара позиции.
//                  ***** productName                 - Строка - наименование товара позиции.
//                  ***** ref1cNomenclatureCategoryId - Строка - идентификатор категории сервиса "1С:Номенклатура".
//                  ***** ref1cNomenclatureCategoryName - Строка - наименование категории сервиса "1С:Номенклатура".
//                  ***** maxPriceProjection - Структура - максимальная цена, приведенная к указанной валюте:
//                        ****** currencyCode - Строка - код валюты по ОКВ, указанный во входящем параметре НастройкиВывода.
//                        ****** price        - Число - максимальная цена одной логистической упаковки товара позиции
//                                                      в минимальных единицах соответствующей валюты
//                                                      (копейки, центы, т.п.) с точностью 2 знака после запятой.
//                  ***** baseUnitOkeiCode - Строка - код базовой единицы измерения товара по ОКЕИ.
//                  ***** packaging - Структура - описание логистической упаковки товара. Ключи:
//                        ****** unitsNumerator - Число - числитель в отношении к базовой единице измерения.
//                        ****** unitsDenominator - Число - знаменатель в отношении к базовой единице измерения.
//                        ****** description - Строка - наименование упаковки товара.
//                  ***** numberOfPackages - Число - количество закупаемых логистических упаковок.
//         *** positionsRef1CnCategories - Массив Из Структура - полный список категорий сервиса 1С:Номенклатура,
//                                                       к которым относятся Позиции Запроса коммерческих предложений:
//             **** id   - Строка - идентификатор Категории сервиса 1С:Номенклатура.
//             **** name - Строка - наименование Категории сервиса 1С:Номенклатура.
//         *** _embedded - Массив Из Структура - информация о найденных фрагментах текста при использовании
//                                  полнотекстового поиска, элементы:
//             **** querySearchHits - Массив - перечень строковых фрагментов с выделением найденных совпадений 
//                                             тегом <em></em>. Пример: "Яйцо <em>куриное</em>".
// 
// Возвращаемое значение:
//  Структура - Прикладное представление найденных в сервисе позиций Запросов коммерческих предложений.
//    См. возвращаемое значение функции НайтиПозицииЗапросовКоммерческихПредложенийВСервисе.
//
Функция РезультатПоискаЗапросовКоммерческихПредложенийИзМоделиСервиса(Знач МодельСервиса)
	
	РезультатПоиска = Новый Структура;
	
	Вывод = Новый Структура;
	Вывод.Вставить("ТекущаяСтраница",    ЗначениеСвойстваМоделиСервиса(МодельСервиса, "page.number"));
	Вывод.Вставить("ЗапросовНаСтранице", ЗначениеСвойстваМоделиСервиса(МодельСервиса, "page.size"));
	Вывод.Вставить("ЗапросовВсего",      ЗначениеСвойстваМоделиСервиса(МодельСервиса, "page.totalElements"));
	Вывод.Вставить("СтраницВсего",       ЗначениеСвойстваМоделиСервиса(МодельСервиса, "page.totalPages"));
	
	РезультатПоиска.Вставить("Вывод", Вывод);
	
	Типы = Новый Структура;
	Типы.Вставить("Строка",          Новый ОписаниеТипов("Строка"));
	Типы.Вставить("Число",           Новый ОписаниеТипов("Число"));
	Типы.Вставить("Булево",          Новый ОписаниеТипов("Булево"));
	Типы.Вставить("Дата",            Новый ОписаниеТипов("Дата"));
	Типы.Вставить("Массив",          Новый ОписаниеТипов("Массив"));
	Типы.Вставить("Структура",       Новый ОписаниеТипов("Структура"));
	Типы.Вставить("ТаблицаЗначений", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Запросы = Новый ТаблицаЗначений;
	Запросы.Колонки.Добавить("Идентификатор",              Типы.Строка);
	Запросы.Колонки.Добавить("Организация",                Типы.Структура);
	Запросы.Колонки.Добавить("КонтактноеЛицо",             Типы.Структура);
	Запросы.Колонки.Добавить("ЧастичноеЗакрытиеРазрешено", Типы.Булево);
	Запросы.Колонки.Добавить("Доставка",                   Типы.Структура);
	Запросы.Колонки.Добавить("ОблагаетсяНДС",              Типы.Булево);
	Запросы.Колонки.Добавить("ВалютаДокумента",            Типы.Строка);
	Запросы.Колонки.Добавить("СуммаДокумента",             Типы.Структура);
	Запросы.Колонки.Добавить("ДатаНачалаСбора",            Типы.Дата);
	Запросы.Колонки.Добавить("ДатаОкончанияСбора",         Типы.Дата);
	Запросы.Колонки.Добавить("ДатаОкончанияРассмотрения",  Типы.Дата);
	Запросы.Колонки.Добавить("ВсегоПозиций",               Типы.Число);
	Запросы.Колонки.Добавить("ВсегоРелевантныхПозиций",    Типы.Число);
	Запросы.Колонки.Добавить("СуммаРелевантныхПозиций",    Типы.Число);
	Запросы.Колонки.Добавить("Позиции",                    Типы.ТаблицаЗначений);
	Запросы.Колонки.Добавить("КатегорииНоменклатуры",      Типы.ТаблицаЗначений);
	Запросы.Колонки.Добавить("ИтогиПоискаПоТексту",        Типы.Массив);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		
		ПредставлениеЗапроса = Запросы.Добавить();
		
		ПредставлениеЗапроса.Идентификатор = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "id");
		
		Организация = Новый Структура;
		Организация.Вставить("ИНН",          ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "customerParty.inn"));
		Организация.Вставить("КПП",          ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "customerParty.kpp"));
		Организация.Вставить("Наименование", ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "customerParty.name"));
		
		ПредставлениеЗапроса.Организация = Организация;
		
		КонтактноеЛицо = Новый Структура;
		КонтактноеЛицо.Вставить("ФИО",              ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "contacts.contactName"));
		КонтактноеЛицо.Вставить("Телефон",          ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "contacts.phone"));
		КонтактноеЛицо.Вставить("ЭлектроннаяПочта", ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "contacts.email"));
		
		ПредставлениеЗапроса.КонтактноеЛицо = КонтактноеЛицо;
		
		ПредставлениеЗапроса.ЧастичноеЗакрытиеРазрешено = ЗначениеСвойстваМоделиСервиса(ДокументСервиса,
			"isPartialPurchaseAcceptable");
		
		Доставка = Новый Структура;
		
		Адрес = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "deliveryRegion.fiasAddressPath");
		
		Доставка.Вставить("Страна",        ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "deliveryRegion.countryCode"));
		Доставка.Вставить("Адрес",         ?(ЗначениеЗаполнено(Адрес), Адрес, Новый Массив));
		Доставка.Вставить("Представление", ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "deliveryRegion.address"));
		
		ПредставлениеЗапроса.Доставка = Доставка;
		
		ПредставлениеЗапроса.ОблагаетсяНДС = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "vatDeductible");
		ПредставлениеЗапроса.ВалютаДокумента = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "currencyCode");
		
		СуммаДокумента = Новый Структура;
		
		СуммаДокумента.Вставить("Валюта", ЗначениеСвойстваМоделиСервиса(ДокументСервиса,
			"totalMaxPriceProjection.currencyCode"));
		
		СуммаДокументаЗначение = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "totalMaxPriceProjection.price");
		СуммаДокументаЗначение = ?(ЗначениеЗаполнено(СуммаДокументаЗначение), СуммаДокументаЗначение / 100, 0);
		СуммаДокумента.Вставить("Значение", Окр(СуммаДокументаЗначение, 2));
		
		ПредставлениеЗапроса.СуммаДокумента = СуммаДокумента;
		
		ДатаНачалаСбора           = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "dateCollectingFrom");
		ДатаОкончанияСбора        = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "dateCollectingTo");
		ДатаОкончанияРассмотрения = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "dateConsideringTo");
		
		ПредставлениеЗапроса.ДатаНачалаСбора           = ДатаИзФорматаСервиса(ДатаНачалаСбора);
		ПредставлениеЗапроса.ДатаОкончанияСбора        = ДатаИзФорматаСервиса(ДатаОкончанияСбора);
		ПредставлениеЗапроса.ДатаОкончанияРассмотрения = ДатаИзФорматаСервиса(ДатаОкончанияРассмотрения);
		
		ПредставлениеЗапроса.ВсегоПозиций = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "positions.totalCount");
		ПредставлениеЗапроса.ВсегоРелевантныхПозиций = ЗначениеСвойстваМоделиСервиса(ДокументСервиса,
			"positions.relevantPositionsTotalCount");
		
		СуммаРелевантныхПозиций = ЗначениеСвойстваМоделиСервиса(ДокументСервиса,
			"positions.relevantPositionsTotalMaxPriceProjection.price");
		ПредставлениеЗапроса.СуммаРелевантныхПозиций = ?(ЗначениеЗаполнено(СуммаРелевантныхПозиций),
			Окр(СуммаРелевантныхПозиций / 100, 2), 0);
		
		Позиции = Новый ТаблицаЗначений;
		Позиции.Колонки.Добавить("Идентификатор",          Типы.Строка);
		Позиции.Колонки.Добавить("ПредставлениеТовара",    Типы.Строка);
		Позиции.Колонки.Добавить("ИдентификаторКатегории", Типы.Строка);
		Позиции.Колонки.Добавить("НаименованиеКатегории",  Типы.Строка);
		Позиции.Колонки.Добавить("Цена",                   Типы.Структура);
		Позиции.Колонки.Добавить("ЕдиницаИзмерения",       Типы.Строка);
		Позиции.Колонки.Добавить("ЛогистическаяУпаковка",  Типы.Структура);
		Позиции.Колонки.Добавить("Количество",             Типы.Число);
		
		ОписаниеПозицийСервиса = ЗначениеСвойстваМоделиСервиса(ДокументСервиса, "positions.items");
		
		Если ЗначениеЗаполнено(ОписаниеПозицийСервиса) Тогда
			
			Для Каждого ПозицияСервиса Из ОписаниеПозицийСервиса Цикл
				
				ПредставлениеПозиции = Позиции.Добавить();
				
				ПредставлениеПозиции.Идентификатор =
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "positionCorrelationId");
				ПредставлениеПозиции.ПредставлениеТовара =
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "productName");
				ПредставлениеПозиции.ИдентификаторКатегории =
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "ref1cNomenclatureCategoryId");
				ПредставлениеПозиции.НаименованиеКатегории =
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "ref1cNomenclatureCategoryName");
				
				Цена = Новый Структура;
				Цена.Вставить("Валюта",   ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "maxPriceProjection.currencyCode"));
				Цена.Вставить("Значение", ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "maxPriceProjection.price"));
				
				ПредставлениеПозиции.Цена = Цена;
				
				ПредставлениеПозиции.ЕдиницаИзмерения = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "baseUnitOkeiCode");
				
				ЛогистическаяУпаковка = Новый Структура;
				ЛогистическаяУпаковка.Вставить("Числитель",
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "packaging.unitsNumerator"));
				ЛогистическаяУпаковка.Вставить("Знаменатель",
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "packaging.unitsDenominator"));
				ЛогистическаяУпаковка.Вставить("Описание",
					ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "packaging.description"));
				
				ПредставлениеПозиции.ЛогистическаяУпаковка = ЛогистическаяУпаковка;
				
				ПредставлениеПозиции.Количество = ЗначениеСвойстваМоделиСервиса(ПозицияСервиса, "numberOfPackages");
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПредставлениеЗапроса.Позиции = Позиции;
		
		КатегорииНоменклатуры = Новый ТаблицаЗначений;
		КатегорииНоменклатуры.Колонки.Добавить("Идентификатор", Типы.Строка);
		КатегорииНоменклатуры.Колонки.Добавить("Наименование",  Типы.Строка);
		
		Если ЗначениеЗаполнено(ДокументСервиса.positionsRef1CnCategories) Тогда
			
			Для Каждого КатегорияСервиса Из ДокументСервиса.positionsRef1CnCategories Цикл
				ОписаниеКатегории               = КатегорииНоменклатуры.Добавить();
				ОписаниеКатегории.Идентификатор = ЗначениеСвойстваМоделиСервиса(КатегорияСервиса, "id");
				ОписаниеКатегории.Наименование  = ЗначениеСвойстваМоделиСервиса(КатегорияСервиса, "name");
			КонецЦикла;
			
		КонецЕсли;
		
		ПредставлениеЗапроса.КатегорииНоменклатуры = КатегорииНоменклатуры;
		
		ИтогиПоискаПоТексту = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументСервиса._embedded) Тогда
			
			Для Каждого РасшифровкаРезультата Из ДокументСервиса._embedded Цикл
				
				Для Каждого НайденныйФрагмент Из РасшифровкаРезультата.querySearchHits Цикл
					
					ТекущийФрагмент = НайденныйФрагмент;
					
					НачалоТега = СтрНайти(ТекущийФрагмент, "<em>");
					
					Пока НачалоТега Цикл
						
						КонецТега = СтрНайти(ТекущийФрагмент, "</em>");
						
						РелевантноеЗначение = Сред(ТекущийФрагмент, НачалоТега + 4, КонецТега - НачалоТега - 4);
						
						ТекущийФрагмент = СтрЗаменить(ТекущийФрагмент, СтрШаблон("<em>%1</em>", РелевантноеЗначение),
							ВРег(РелевантноеЗначение));
						
						НачалоТега = СтрНайти(ТекущийФрагмент, "<em>");
						
					КонецЦикла;
					
					ИтогиПоискаПоТексту.Добавить(ТекущийФрагмент);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПредставлениеЗапроса.ИтогиПоискаПоТексту = ИтогиПоискаПоТексту;
		
	КонецЦикла;
	
	РезультатПоиска.Вставить("Запросы", Запросы);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает значение даты в формате сервиса.
//
// Параметры:
//  Дата - Дата - Дата, которую необходимо привести к формату сервиса.
// 
// Возвращаемое значение:
//  Строка, Null - Значение даты в формате ISO без указания времени.
//
Функция ДатаВФорматеСервиса(Знач Дата)
	
	Результат = Null;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Результат = Формат(Дата, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату из строкового формата сервиса.
//
// Параметры:
//  Дата - Строка - Строковое представление даты в формате ISO вида "ГГГГ-ММ-ДД".
// 
// Возвращаемое значение:
//  Дата - Значение даты.
//
Функция ДатаИзФорматаСервиса(Знач Дата)
	
	Результат = Дата('00010101');
	
	Если ТипЗнч(Дата) = Тип("Строка")
		И СтрНайти(Дата, "-") Тогда
		Результат = Дата(СтрЗаменить(Дата, "-", ""));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет сериализацию переданного значения в строку JSON.
//
// Параметры:
//  Данные - Произвольный - Данные, которые необходимо преобразовать в JSON.
// 
// Возвращаемое значение:
//  Строка - Сериализованное значение.
//
Функция СериализованноеЗначение(Знач Данные)
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область МоделиДанных

#Область Размещение

// Описание контрагентов, на которых распространяются ограничения доступности Запроса коммерческих предложений.
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//    * parties - Массив Из Структура - описание контрагентов, на которых распространяются ограничения
//                                      доступности Запроса коммерческих предложений. Элементы массива:
//      ** inn - Строка - ИНН контрагента.
//      ** kpp - Строка - КПП контрагента. Необязательный.
//    * restrictionType - Строка - является ли Список Организаций "Черным списком" ("BLACK_LIST") 
//                                 или "Белым списком" ("WHITE_LIST").
//
Функция RfpAudience()
	
	Модель = Новый Структура;
	Модель.Вставить("parties",         Новый Массив);
	Модель.Вставить("restrictionType", "");
	
	Возврат Модель;
	
КонецФункции

// Условия ЗКП для контрагентов.
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * customerPartyId    - Строка    - Идентификатор Организации-Покупателя в "1С:Бизнес сеть", присвоенный
//                                                 при регистрации Организации в "1С:Бизнес сеть" (36 символов).
//              * positions          - Массив    - См. функцию RfpPosition().
//              * termsAndConditions - Структура - См. функцию RfpTermsAndConditions().
//              * contacts           - Структура - См. функцию RfpContacts().
//
Функция RfpProposalRequirements()
	
	Модель = Новый Структура;
	Модель.Вставить("customerPartyId",    "");
	Модель.Вставить("positions",          Новый Массив);
	Модель.Вставить("termsAndConditions", RfpTermsAndConditions());
	Модель.Вставить("contacts",           RfpContacts());
	
	Возврат Модель;
	
КонецФункции

// Модель данных Позиции Запроса коммерческих предложений.
// 
// Возвращаемое значение:
//  Структура - модель данных со следующими ключами:
//    * positionCorrelationId - Строка    - идентификатор для корреляции Позиции ЗКП с Позицией КП (36 символов).
//    * product               - Структура - описание товара. Должно быть выполнено либо в терминах идентификаторов
//                                          эталонных карточек номенклатуры сервиса "1С:Номенклатура",
//                                          либо в терминах идентификаторов Рубрики сервиса "1С:Номенклатура", ключи:
//      ** customerSpecification - Структура - см. RfpPosition_Product_CustomerSpecification
//      ** ref1CnSpecification   - Структура - см. RfpPosition_Product_1CnSpecification
//    * additionalProductDescription - Структура - необязательный, см. RfpPosition_AdditionalProductDescription
//    * purchaseConditions    - Структура - см. RfpPosition_PurchaseConditions.
//
Функция RfpPosition()
	
	Модель = Новый Структура;
	Модель.Вставить("positionCorrelationId",        "");
	Модель.Вставить("product",                      Новый Структура);
	Модель.Вставить("additionalProductDescription", RfpPosition_AdditionalProductDescription());
	Модель.Вставить("purchaseConditions",           RfpPosition_PurchaseConditions());
	
	Возврат Модель;
	
КонецФункции

// Описание товара покупателем.
// 
// Возвращаемое значение:
//  Структура - модель данных со следующими ключами:
//              * ref1CnCategory - Структура - Описание товара в схеме сервиса "1С:Номенклатура" через Рубрику
//                                                 сервиса "1С:Номенклатура". Возможные ключи:
//                                 ** categoryId - Строка - Идентификатор Рубрики сервиса "1С:Номенклатура".
//                                 ** manufacturerId - Строка - Идентификатор Производителя сервиса
//                                                     "1С:Номенклатура". Необязательный.
//                                 ** tradeMarkId - Строка - Идентификатор Торговой марки сервиса
//                                                  "1С:Номенклатура". Необязательный.
//                                 ** requisiteValues - Массив Из Структура - спецификация товара в значениях
//                                                      Реквизитов "1С:Номенклатуры". Необязательный.
//                                                      Элементы массива должны быть представлены Структурами со
//                                                      следующими ключами:
//                                    *** id    - Строка - Идентификатор Реквизита сервиса.
//                                    *** value - Строка - Значение реквизита (число, строка,
//                                                ссылка на другой реквизит "1С:Номенклатуры" - его
//                                                идентификатор), семантика определяется типом Реквизита сервиса
//                                                "1С:Номенклатура".
//              * productName                    - Строка    - Наименование товара.
//              * productDescription - Строка    - Описание товара. Необязательный.
//              * manufacturer       - Структура - Описание Производителя. Необязательный. Ключи:
//                                     ** tradeMark - Строка - Торговая марка.
//                                     ** name      - Строка - Наименование производителя.
//              * partNumber         - Строка    - Артикул Поставщика. Необязательный.
//              * baseUnitOkeiCode   - Строка    - Код базовой единицы измерения товара по ОКЕИ.
//              * barCodes           - Массив    - Список штрихкодов Поставщика. Штрихкоды должны быть строкового типа.
//                                                 Необязательный.
//              * requisiteValues    - Массив Из Структура - реквизиты товара, специфичные для Номенклатуры Поставщика.
//                                                 Произвольные пары "наименование свойства" - "значение свойства",
//                                                 описывающие потребительские характеристики товара. Необязательный.
//                                                 Элементы должны быть представлены Структурами со следующими ключами:
//                                     ** name  - Строка - Имя реквизита (человекочитаемое).
//                                     ** value - Строка - Значение реквизита.
//
Функция RfpPosition_Product_CustomerSpecification()
	
	Модель = Новый Структура;
	Модель.Вставить("ref1CnCategory",     Новый Структура);
	Модель.Вставить("productName",        "");
	Модель.Вставить("productDescription", "");
	Модель.Вставить("manufacturer",       Новый Структура);
	Модель.Вставить("partNumber",         "");
	Модель.Вставить("baseUnitOkeiCode",   "");
	Модель.Вставить("barCodes",           Новый Массив);
	Модель.Вставить("requisiteValues",    Новый Массив);
	
	Возврат Модель;
	
КонецФункции

// Описание товара Позиции Запроса коммерческих предложений в схеме идентификаторов эталонной номенклатуры
//  сервиса "1С:Номенклатура".
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * productSpecificationId  - Строка  - Идентификатор номенклатуры сервиса "1С:Номенклатура".
//              * productCharacteristicId - Строка  - Идентификатор номенклатуры сервиса "1С:Номенклатура".
//                                                    Необязательный.
//
Функция RfpPosition_Product_1CnSpecification()
	
	Модель = Новый Структура;
	Модель.Вставить("productSpecificationId",  "");
	Модель.Вставить("productCharacteristicId", "");
	
	Возврат Модель;
	
КонецФункции

// Маркетинговое описание товара Позиции Запроса коммерческих предложений, дополняющее спецификацию товара.
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * title       - Строка  - Заголовок. Необязательный.
//              * description - Строка  - Описание. Необязательный.
//
Функция RfpPosition_AdditionalProductDescription()
	
	Модель = Новый Структура;
	Модель.Вставить("title",       "");
	Модель.Вставить("description", "");
	
	Возврат Модель;
	
КонецФункции

// Условия закупки Позиции Запроса коммерческих предложений.
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * packaging             - Структура - Описание логистической упаковки. Описывается дробью с числителем
//                                                    и знаменателем. Например, бутылка объемом 0,33 л может быть
//                                                    описана дробью 33/100, а бутылка объемом 0,75 л - дробью 3/4:
//                ** description      - Строка - Наименование упаковки товара. Необязательный.
//                ** unitsNumerator   - Число  - Количество единиц товара в упаковке (в базовых единицах измерения по ОКЕИ). Числитель.
//                ** unitsDenominator - Число  - Количество единиц товара в упаковке (в базовых единицах измерения по ОКЕИ). Знаменатель.
//              * maxPrice              - Число     - Максимальная цена в валюте ЗКП, в минимальных единицах
//                                                    соответствующей валюты (копейки, центы, пенни и т.п.) за одну
//                                                    логистическую упаковку. Необязательный.
//              * numberOfPackages      - Число     - Количество закупаемых логистических упаковок. Минимум - 1.
//              * maxDaysForDelivery    - Число     - Максимальное количество дней, необходимых Поставщику на доставку
//                                                    товара с момента оформления заказа. Минимум - 1. Необязательный.
//              * dateDesiredDeliveryTo - Строка    - Желаемая дата доставки товара.
//                                                    товара с момента оформления заказа. Минимум - 1. Необязательный.
//
Функция RfpPosition_PurchaseConditions()
	
	Модель = Новый Структура;
	Модель.Вставить("packaging",             Новый Структура);
	Модель.Вставить("maxPrice",              0);
	Модель.Вставить("numberOfPackages",      1);
	Модель.Вставить("maxDaysForDelivery",    0);
	Модель.Вставить("dateDesiredDeliveryTo", "");
	
	Возврат Модель;
	
КонецФункции

// Общие условия закупки.
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * isPartialPurchaseAcceptable    - Булево - ответное Коммерческое предложение потенциального Поставщика
//                                                          может содержать позиции только по части товаров, указанных
//                                                          в Запросе коммерческих предложений. Допускается частичное
//                                                          закрытие потребности покупателя. Необязательный.
//              * isCommissionTransaction     - Булево    - признак комиссионной сделки. Необязательный.
//              * deliveryRegion              - Структура - регион доставки. Необязательный. Ключи:
//                  ** countryCode    - Строка - Числовой код страны по ОКСМ. Необязательный.
//                  ** fiasRegionCode - Строка - Идентификатор GUID адресных объектов РФ по ФИАС. Необязательный.
//              * vatDeductible               - Булево    - закупка облагается НДС. Необязательный.
//              * currencyCode                - Строка    - трехзначный числовой код валюты по ОКВ.
//              * dateCollectingFrom          - Строка    - дата начала периода сбора Коммерческий предложений
//                                                          (включительно, MSK). Необязательный.
//              * dateCollectingTo            - Строка    - дата окончания периода сбора КП (включительно, MSK).
//              * dateConsideringTo           - Строка    - дата окончания рассмотрения КП (включительно, MSK).
//              * paymentDescription          - Строка    - описание условий оплаты в свободной форме. Необязательный.
//              * deliveryDescription         - Строка    - описание условий доставки в свободной форме.
//                                                          Необязательный.
//              * description                 - Строка    - описание в свободной форме. Необязательный.
//
Функция RfpTermsAndConditions()
	
	Модель = Новый Структура;
	Модель.Вставить("isPartialPurchaseAcceptable", Неопределено);
	Модель.Вставить("isCommissionTransaction",     Неопределено);
	Модель.Вставить("deliveryRegion",              Новый Структура);
	Модель.Вставить("vatDeductible",               Неопределено);
	Модель.Вставить("currencyCode",                "");
	Модель.Вставить("dateCollectingFrom",          "");
	Модель.Вставить("dateCollectingTo",            "");
	Модель.Вставить("dateConsideringTo",           "");
	Модель.Вставить("paymentDescription",          "");
	Модель.Вставить("deliveryDescription",         "");
	Модель.Вставить("description",                 "");
	
	Возврат Модель;
	
КонецФункции

// Контактная информация для связи по вопросам приобретения опубликованных товаров.
//  Обязательно должно быть заполнено phone или email.
// 
// Возвращаемое значение:
//  Структура - модель данных со следующими ключами:
//              * contactName - Строка - Имя менеджера. Необязательное.
//              * phone       - Строка - Контактный телефон.
//              * email       - Строка - Контактный адрес электронной почты.
//
Функция RfpContacts()
	
	Модель = Новый Структура;
	Модель.Вставить("contactName", "");
	Модель.Вставить("phone",       "");
	Модель.Вставить("email",       "");
	
	Возврат Модель;
	
КонецФункции

// Описание присоединенного к Запросу коммерческих предложений файла.
// 
// Возвращаемое значение:
//  Структура - модель данных со следующими ключами:
//              * title   - Строка - Наименование файла. Будет доступно для потенциальных поставщиков. Необязательное.
//              * content - Строка - Двоичные данные файла в формате Base64.
//
Функция RfpAttachmentFile()
	
	Модель = Новый Структура;
	Модель.Вставить("title",   "");
	Модель.Вставить("content", "");
	
	Возврат Модель;
	
КонецФункции

#КонецОбласти

#Область Витрина

// Критерии поиска позиций Запросов коммерческих предложений.
// 
// Возвращаемое значение:
//  Структура - Модель данных со следующими ключами:
//              * query                          - Строка - Строка для полнотекстового поиска по наименованию, описанию
//                                                          реквизитам товара позиции Запроса коммерческих предложений.
//              * partNumbers                    - Массив - Артикулы товара поставщика или производителя. Элементы
//                                                          массива должны иметь строковый тип.
//              * barCodes                       - Массив - Штрихкоды товара поставщика или производителя. Элементы
//                                                          массива должны иметь строковый тип.
//              * positionMaxPriceFrom           - Число  - Нижняя граница максимальной цены одной логистической
//                                                          упаковки товара позиции (в минимальных единицах
//                                                          соответствующей валюты - копейки, центы, т.п.).
//              * positionMaxPriceTo             - Число  - Верхняя граница максимальной цены одной логистической
//                                                          упаковки товара позиции (в минимальных единицах
//                                                          соответствующей валюты - копейки, центы, т.п.).
//              * positionMaxSumPriceFrom        - Число  - Нижняя граница максимальной суммы всех закупаемых
//                                                          логистических упаковок товара позиции (в минимальных
//                                                          единицах соответствующей валюты - копейки, центы, т.п.).
//              * positionMaxSumPriceTo          - Число  - Верхняя граница максимальной суммы всех закупаемых
//                                                          логистических упаковок товара позиции (в минимальных
//                                                          единицах соответствующей валюты - копейки, центы, т.п.).
//              * unitOkeiCode                   - Строка - Код единицы измерения товара по ОКЕИ.
//              * demandedUnitsNumberFrom        - Число  - Минимальное искомое количество товара в указанной единице
//                                                          измерения.
//              * demandedUnitsNumberTo          - Число  - Максимальное искомое количество товара в указанной единице
//                                                          измерения.
//              * isPartialPurchaseAcceptable    - Булево - Ответное Коммерческое предложение потенциального Поставщика
//                                                          может содержать позиции только по части товаров, указанных
//                                                          в Запросе коммерческих предложений. Допускается частичное
//                                                          закрытие потребности покупателя.
//              * ref1CnCategoryId               - Строка - Идентификатор категории сервиса "1С:Номенклатура".
//              * ref1CnCategoryRequisitesFilter - Массив Из Структура - отбор по реквизитам и значениям реквизитов категории
//                                                          сервиса "1С:Номенклатура". Применяется, если заполнено
//                                                          значение ключа ref1CnCategoryRequisitesFilter. Элементы
//                                                          должны быть представлены Структурами со следующими ключами:
//                                                 ** requisiteId    - Строка - Идентификатор реквизита
//                                                                     категории в сервисе "1С:Номенклатура".
//                                                 ** requisiteValue - Строка - Идентификатор значения
//                                                                     или фактическое значение реквизита категории сервиса
//                                                                     "1С:Номенклатура". 
//              * ref1CnProductSpecificationIds  - Массив Из Структура - Идентификаторы номенклатуры и характеристик номенклатуры
//                                                          сервиса "1С:Номенклатура". Элементы должны быть
//                                                          представлены Структурами со следующими ключами:
//                                                 ** nomenclatureId - Строка - Идентификатор номенклатуры
//                                                                              в сервисе "1С:Номенклатура".
//                                                 ** nomenclatureCharacteristicId - Строка - Идентификатор
//                                                            характеристики в сервисе "1С:Номенклатура" (при наличии).
//
Функция PositionSearchCriteria()
	
	Модель = Новый Структура;
	Модель.Вставить("query",                          "");
	Модель.Вставить("partNumbers",                    Новый Массив);
	Модель.Вставить("barCodes",                       Новый Массив);
	Модель.Вставить("positionMaxPriceFrom",           0);
	Модель.Вставить("positionMaxPriceTo",             0);
	Модель.Вставить("positionMaxSumPriceFrom",        0);
	Модель.Вставить("positionMaxSumPriceTo",          0);
	Модель.Вставить("totalMaxSumPriceFrom",           0);
	Модель.Вставить("positionMaxSumPriceTo",          0);
	Модель.Вставить("unitOkeiCode",                   "");
	Модель.Вставить("demandedUnitsNumber",            0);
	Модель.Вставить("isPartialPurchaseAcceptable",    Неопределено);
	Модель.Вставить("ref1CnCategoryId",               0);
	Модель.Вставить("ref1CnCategoryRequisitesFilter", Новый Массив);
	Модель.Вставить("ref1CnProductSpecificationIds",  Новый Массив);
	
	Возврат Модель;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

// Заполнение необязательного свойства модели.
//  Если переданное значение не заполнено, свойство модели удаляется.
//
// Параметры:
//  Модель             - Структура    - Модель данных. Возвращаемый параметр.
//  ИмяСвойства        - Строка       - Имя необязательного свойства модели, которое необходимо заполнить.
//  ЗначениеСвойства   - Произвольный - Значение для заполнения.
//
Процедура ЗаполнитьНеобязательноеСвойствоМодели(Модель, Знач ИмяСвойства, Знач ЗначениеСвойства)
	
	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		Модель.Вставить(ИмяСвойства, ЗначениеСвойства);
	Иначе
		Если Модель.Свойство(ИмяСвойства) Тогда
			Модель.Удалить(ИмяСвойства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверка необязательного свойства модели на заполненность.
//  Если значение не заполнено, свойство удаляется.
//
// Параметры:
//  Модель      - Структура - Модель данных. Возвращаемый параметр.
//  ИмяСвойства - Строка    - Имя необязательного свойства модели, заполненность которого необходимо проверить.
//
Процедура ПроверитьНеобязательноеСвойствоМодели(Модель, Знач ИмяСвойства)
	
	ЗначениеСвойства = Неопределено;
	
	Если Не Модель.Свойство(ИмяСвойства, ЗначениеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСвойства = ?(ЗначениеСвойства = Ложь, Неопределено, ЗначениеСвойства);
	
	Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		Модель.Удалить(ИмяСвойства);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение свойства модели данных сервиса по полному пути.
//  Если путь не существует, возвращает Неопределено.
//
// Параметры:
//  Модель - Структура - данные в модели сервиса.
//  Путь   - Строка    - полный путь к свойству.
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Значение 
//
Функция ЗначениеСвойстваМоделиСервиса(Знач Модель, Знач Путь)
	
	Если ТипЗнч(Модель) <> Тип("Структура")
		Или ПустаяСтрока(Путь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Путь, ".");
	
	Если ПозицияРазделителя Тогда
		ИмяСвойства = Лев(Путь, СтрДлина(Путь) - (СтрДлина(Путь) - ПозицияРазделителя) - 1);
	Иначе
		ИмяСвойства = Путь;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОставшийсяПуть = Прав(Путь, СтрДлина(Путь) - СтрДлина(ИмяСвойства) - 1);
	
	ЗначениеСвойства = Неопределено;
	Модель.Свойство(ИмяСвойства, ЗначениеСвойства);
	
	Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
		И Не ПустаяСтрока(ОставшийсяПуть) Тогда
		Возврат ЗначениеСвойстваМоделиСервиса(ЗначениеСвойства, ОставшийсяПуть);
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область АсинхронныеОперации

// Формирует ключ фонового задания, связанного с определенным документом и методом.
//
// Параметры:
//  Документ  - ДокументСсылка - Ссылка на документ, связанный с фоновым заданием.
//  ИмяМетода - Строка - ИмяМетода фонового задания.
//
// Возвращаемое значение:
//  Строка - Сформированный ключ фонового задания.
//
Функция КлючФоновогоЗаданияПоДокументу(Знач Документ, Знач ИмяМетода)
	
	КлючФоновогоЗадания = Строка(Документ.УникальныйИдентификатор());
	
	Возврат СтрШаблон("%1_%2", КлючФоновогоЗадания, ИмяМетода);
	
КонецФункции

// Возвращает активное фоновое задание, связанное с определенным документом.
//
// Параметры:
//  Документ  - ДокументСсылка - Ссылка на документ, связанный с фоновым заданием.
//  ИмяМетода - Строка - ИмяМетода фонового задания.
//
// Возвращаемое значение:
//  ФоновоеЗадание, Неопределено - Будет возвращено фоновое задание, если оно найдено, или
//                                 Неопределено, если нет.
//
Функция АктивноеФоновоеЗаданиеПоДокументу(Знач Документ, Знач ИмяМетода)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗаданияПоДокументу(Документ, ИмяМетода));
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	НайденныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если НайденныеЗадания.Количество() Тогда
		Возврат НайденныеЗадания[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область БизнесСеть

// Возвращает заголовок документа Запрос коммерческих предложений поставщиков в форме списка документов Бизнес-сети.
//
Функция ЗаголовокЗапросаКоммерческихПредложенийПоставщиковВБизнесСети(Знач Номер, Знач Дата)
	
	Возврат СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Строка(Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений),
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Истина, Истина), Формат(Дата, "ДЛФ=D"));
	
КонецФункции

// Отправка Запроса коммерческих предложений поставщиков через сервис Бизнес-сеть.
//
// Параметры:
//  Владелец       - СправочникСсылка.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений - Основание
//    (технический владелец) электронного документа.
//  Организация    - СправочникСсылка - Организация, от имени которой отправляется запрос.
//    См. объект ОпределяемыйТип.Организация.
//  Контрагент     - СправочникСсылка - Получатель документа.
//    См. объект ОпределяемыйТип.КонтрагентБЭД.
//  СуммаДокумента - Число  - Сумма отправляемого документа.
//  Заголовок      - Строка - Текстовое представление документа.
//  Отказ          - Булево - Признак неудачной отправки. Возвращаемый параметр.
//
Процедура ОтправитьЗапросКоммерческихПредложенийБезЭлектроннойПодписи(Знач Владелец, Знач Организация,
		Знач Контрагент, Знач СуммаДокумента, Знач Заголовок, Отказ)
	
	ОписанияОбъектовУчета = ОбменСКонтрагентамиИнтеграция.ОписанияОбъектовУчета(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Владелец));
	
	ДанныеДляВыгрузки = ОбменСКонтрагентамиИнтеграция.СформироватьДанныеДляВыгрузки(ОписанияОбъектовУчета);
	
	Для Каждого ДанныеДокумента Из ДанныеДляВыгрузки Цикл
		
		ПараметрыОтправки = Новый Структура;
		ПараметрыОтправки.Вставить("Отправитель",                 Организация);
		ПараметрыОтправки.Вставить("Получатель",                  Контрагент);
		ПараметрыОтправки.Вставить("Ссылка",                      Владелец);
		ПараметрыОтправки.Вставить("Заголовок",                   Заголовок);
		ПараметрыОтправки.Вставить("ВидЭД",                       Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений);
		ПараметрыОтправки.Вставить("Сумма",                       СуммаДокумента);
		ПараметрыОтправки.Вставить("СопроводительнаяИнформация",  "");
		ПараметрыОтправки.Вставить("ДвоичныеДанныеПакета",        ДанныеДокумента.ДвоичныеДанныеПакета);
		ДвоичныеДанныеПредставления = БизнесСеть.ПредставлениеДокументаДляОтправки(
			ДанныеДокумента.ДвоичныеДанныеПредставления);
		ПараметрыОтправки.Вставить("ДвоичныеДанныеПредставления", ДвоичныеДанныеПредставления);

		ПараметрыОтправки.Вставить("КонтактноеЛицо",   "");
		ПараметрыОтправки.Вставить("Телефон",          "");
		ПараметрыОтправки.Вставить("ЭлектроннаяПочта", "");
		ПараметрыОтправки.Вставить("КонтактноеЛицо",   "");
		
		ПараметрыВызова = БизнесСеть.ПараметрыКомандыОтправитьДокумент(ПараметрыОтправки, Отказ);
		БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторОрганизацииПоИдентификаторуЗапроса(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ОрганизацииБизнесСеть.Идентификатор, """") КАК Идентификатор
		|ИЗ
		|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|		ПО ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Организация = ОрганизацииБизнесСеть.Организация
		|ГДЕ
		|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ИдентификаторСервиса = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = "";
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Идентификатор;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сервис

// Выполнение команды сервиса.
//
// Параметры:
//   ЗапросСервиса - Структура - параметры вызова или имя команды.
//   Отказ         - Булево    - признак ошибки выполнения.
//   ТекстОшибки    - Строка - Текст ошибки, полученный от сервиса.
//  
// Возвращаемое значение:
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(ЗапросСервиса, Отказ, ТекстОшибки = "")
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Инициализация параметров соединения.
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения("ТорговаяПлощадка");
	ЗапросСервиса.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
	
	СтрокаАутентификации = БизнесСеть.СтрокаАутентификацииДляВыполненияКомандыСервиса(ЗапросСервиса, ПараметрыСоединения, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
		
	// Инициализация соединения.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Бизнес-сеть'")
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().БизнесСеть,);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Запрос.Заголовки.Вставить("Authorization", СтрокаАутентификации);
	КонецЕсли;	
	
	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Метод = "GET" Тогда
		
		Если ЗапросСервиса.РасширятьКонтент Тогда
			Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент + ", application/json");
		Иначе
			Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент);
		КонецЕсли;
		
	ИначеЕсли ЗапросСервиса.Метод = "POST" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PUT" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PATCH" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "DELETE" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
		Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	РезультатВыполнения = РезультатHttpЗапроса(Соединение, ЗапросСервиса, Запрос, Отказ);
	
	Если РезультатВыполнения.Ответ.КодСостояния = 401 И ЗначениеЗаполнено(СтрокаАутентификации) Тогда // истек срок токена обновления
		
		СтрокаАутентификации = БизнесСеть.СтрокаАутентификации(ЗапросСервиса.ИдентификаторОрганизации, Истина, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;

		Запрос.Заголовки.Вставить("Authorization", СтрокаАутентификации);
		
		РезультатВыполнения = РезультатHttpЗапроса(Соединение, ЗапросСервиса, Запрос, Отказ);
		
		Если Отказ ИЛИ РезультатВыполнения.Ответ.КодСостояния = 401 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = РезультатВыполнения.Ответ;
	Данные = РезультатВыполнения.Данные;
	
	// Обработка результата запроса.
	ОтветСервиса = ОбработатьОтветСервиса(Соединение, ЗапросСервиса, Ответ, Данные, Отказ, ТекстОшибки);
	
	Если ЗапросСервиса.ВозвращатьЗаголовки = Истина Тогда
		Результат = Новый Структура;
		Результат.Вставить("Заголовки", Ответ.Заголовки);
		Результат.Вставить("Результат", ОтветСервиса);
	Иначе
		Результат = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатHttpЗапроса(Соединение, ЗапросСервиса, Запрос, Отказ)
	
	Результат = Новый Структура;
	Результат.Вставить("Ответ", Неопределено);
	Результат.Вставить("Данные", Неопределено);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, Запрос);
		
		Если ЗапросСервиса.ОтветДвоичныеДанные Тогда
			Данные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			Данные = Ответ.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(Данные) Тогда
				Данные = ЗначениеИзСтрокиJSON(Данные);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ЗапросСервиса.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			ЗапросСервиса.Наименование,
			ПодробныйТекстОшибки,
			ТекстОшибки,
			КодСобытияКоммерческиеПредложения());
		Возврат Неопределено;
	КонецПопытки;

	Результат.Ответ = Ответ;
	Результат.Данные = Данные;

	Возврат Результат;
	
КонецФункции

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение)
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Торговые предложения.Преобразование данных'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ЗапросСервиса - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния - Строка     - код ответа HTTP-соединения.
//  Данные       - Структура, Строка - возвращаемые данные сервиса.
//  Отказ        - Булево - результат проверки.
//  ТекстОшибки  - Строка - Текст ошибки, который вернул сервис.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(Соединение, ЗапросСервиса, HTTPОтвет, Данные, Отказ, ТекстОшибки = "")
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		Если КодСостояния >= 500 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Внутренняя ошибка сервиса'"));
		ИначеЕсли КодСостояния >= 400 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Ошибка параметров запроса'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ, ТекстОшибки);
	КонецЕсли;
	
	Если ЗапросСервиса.ОтветДвоичныеДанные Тогда
		Результат = Данные;
	Иначе
		
		Если ЗначениеЗаполнено(ЗапросСервиса.Результат) Тогда
			Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(ЗначениеИзСтрокиJSON(Данные),
			ЗапросСервиса.Результат, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат КодСостояния;
		КонецЕсли;
		
		Если ЗапросСервиса.Обработка <> Неопределено Тогда
			Результат = ОбработатьОтветСервисаПродолжение(ЗапросСервиса.Обработка, КодСостояния, Данные, Отказ);
		Иначе
			Результат = ЗначениеИзСтрокиJSON(Данные);
		КонецЕсли;
		
		// Для метода POST идентификатор созданного объекта возвращается в заголовке.
		Если ЗапросСервиса.Метод = "POST"
			И Не ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(HTTPОтвет.Заголовки["Location"]) Тогда
			СсылкаСервиса = HTTPОтвет.Заголовки["Location"];
			Результат = Сред(СсылкаСервиса, СтрНайти(СсылкаСервиса, "/", НаправлениеПоиска.СКонца) +1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка ошибки сервиса.
//
// Параметры:
//  ЗапросСервиса - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
//  ТекстОшибки      - Строка - Текст ошибки, полученный от сервиса.
// 
Функция ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ, ТекстОшибки)

	ОбластьВозникновения = ЗапросСервиса.Ошибки.Получить(КодСостояния);
	
	Если ОбластьВозникновения = Ложь Тогда
		Возврат КодСостояния;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ОбластьВозникновения = НСтр("ru = 'Коммерческие предложения.Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Не ПустаяСтрока(ЗапросСервиса.Наименование) Тогда
		ОбластьВозникновения = ОбластьВозникновения + " (" + ЗапросСервиса.Наименование + ")";
	КонецЕсли;
	
	ТекстОшибки = "";
	ПодробныйТекстОшибки = "";
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Если Данные.Свойство("title") Тогда
			ПодробныйТекстОшибки = Данные.title;
			ТекстОшибки = ПодробныйТекстОшибки;
		КонецЕсли;
		
		Если Данные.Свойство("requestTraceId") Тогда
			ПодробныйТекстОшибки = ?(ПустаяСтрока(ПодробныйТекстОшибки), "", ПодробныйТекстОшибки + Символы.ПС)
				+ НСтр("ru = 'Идентификатор ошибки'") + ": " + Данные.requestTraceId;
		КонецЕсли;
		
		Если Данные.Свойство("detail") Тогда
			ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), "", ТекстОшибки + Символы.ПС) + Данные.detail;
			ПодробныйТекстОшибки = ?(ПустаяСтрока(ПодробныйТекстОшибки), "", ПодробныйТекстОшибки + Символы.ПС) + Данные.detail;
		КонецЕсли;
		
		Если Данные.Свойство("message") Тогда
			ПодробныйТекстОшибки = ?(ПустаяСтрока(ПодробныйТекстОшибки), "", ПодробныйТекстОшибки + Символы.ПС) + Данные.message;
			ТекстОшибки = Данные.message;
		ИначеЕсли Данные.Свойство("error_description") Тогда
			ПодробныйТекстОшибки = Данные.error_description;
			ТекстОшибки = Данные.error_description;
		ИначеЕсли Данные.Свойство("ПодробныйТекстОшибки") Тогда
			ПодробныйТекстОшибки = Данные.ПодробныйТекстОшибки;
			ТекстОшибки = Данные.ТекстОшибки;
		ИначеЕсли Данные.Свойство("validationError") И ТипЗнч(Данные.validationError) = Тип("Массив") Тогда
			РасшифровкаОшибок = Новый Массив;
			ПодробнаяРасшифровкаОшибок = Новый Массив;
			Для Каждого СтрокаОшибки Из Данные.validationError Цикл
				Если ПустаяСтрока(СтрокаОшибки.message) Тогда
					Продолжить;
				КонецЕсли;

					РасшифровкаОшибок.Добавить(СтрокаОшибки.message);
					ПодробнаяРасшифровкаОшибок.Добавить(" - " + СтрокаОшибки.message + " (" + СтрокаОшибки.field + ")");
			КонецЦикла;
			
			ТекстОшибки = СтрСоединить(РасшифровкаОшибок, "; ");
			
			ПодробныйТекстОшибки = ?(ПустаяСтрока(ПодробныйТекстОшибки),
										"",
										ПодробныйТекстОшибки + ":" + Символы.ПС)
									+ СтрСоединить(ПодробнаяРасшифровкаОшибок, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	АдресСоединенияURL = БизнесСеть.АдресСоединенияURL(Соединение.Сервер, Соединение.Порт, ЗапросСервиса.Адрес,
		Соединение.Защищенное);
	
	ПодробноеОписаниеОшибки = ОбластьВозникновения
		+ Символы.ПС
		+ ЗапросСервиса.Метод + " " + АдресСоединенияURL
		+ СтрШаблон(НСтр("ru = 'Ответ: %1'"), КодСостояния)
		+ ?(ПодробныйТекстОшибки = "", "", Символы.ПС + ПодробныйТекстОшибки)
		+ ?(ПустаяСтрока(ЗапросСервиса.Детализация), "", Символы.ПС
			+ НСтр("ru = 'Детализация'") + ": " + ЗапросСервиса.Детализация);
	
	Если Не (ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках")
		И ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина) Тогда
		
		ТекстСообщенияПользователю = ОбластьВозникновения + Символы.ПС + ТекстОшибки;
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстСообщенияПользователю = ТекстСообщенияПользователю
										+ Символы.ПС
										+ НСтр("ru ='Подробности см. в журнале регистрации.'");
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Коммерческие предложения.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ЗапросСервиса.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеОписаниеОшибки);
		
	Возврат КодСостояния;
	
КонецФункции

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ЗапросСервиса - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервисаПродолжение(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		Результат = КонвертироватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование массива структур в таблицу значений, структуры в структуру.
//
// Параметры:
//  Коллекция				 - Массив - массив структур.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция ПреобразоватьКоллекциюПоТаблицеЗначений(Знач Источник, Знач ОписаниеТаблицыЗначений, ТипРезультата = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") И НЕ ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеТаблицыЗначений.Скопировать().Добавить());
	КонецЕсли;
	
	Если ТипРезультата = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			ТипРезультата = Тип("ТаблицаЗначений");
		Иначе
			ТипРезультата = ТипЗнч(Источник);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Соответствие; // Реквизиты, получаемые через точку.
	ПравилаКонвертации  = Новый Соответствие; // Список конвертаций значений "*".
	ВложенныеКоллекции  = Новый Соответствие; // Список вложенных коллекций "|".
	
	// Создание колонок без типов.
	ВременнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "*");
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		РазделительОписание = СтрНайти(ИмяСвойстваИсточника, "|");
		Если РазделительОписание <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительОписание - 1));
			ИмяОписания = Сред(КолонкаТаблицыОписания.Заголовок, РазделительОписание + 1);
		КонецЕсли;
		
		НовоеИмяСвойстваИсточника = ИмяСвойстваИсточника;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			НовоеИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыЧерезТочку.Вставить(ИмяСвойстваИсточника, НовоеИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила конвертации.
		Если РазделительПравила <> 0 Тогда
			ПравилаКонвертации.Вставить(НовоеИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		// Добавления описание вложенной коллекции.
		Если РазделительОписание <> 0 Тогда
			ВложенныеКоллекции.Вставить(НовоеИмяСвойстваИсточника, ИмяОписания);
		КонецЕсли;
		
		ВременнаяТаблица.Колонки.Добавить(НовоеИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		
		// Источником данных является массив структур.
		
		Для каждого СтрокаИсточника Из Источник Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			КонецЕсли;
			
			// Заполнение реквизитов в структуре.
			Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
				СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
				НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника, СоставСтруктурыРеквизита);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		// Источником данных является структура.
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		
		// Заполнение реквизитов в структуре.
		Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
			СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
			НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(Источник, СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка по правилам преобразования "*".
	Для каждого ЭлементПреобразования Из ПравилаКонвертации Цикл
		ДанныеОбработки = ВременнаяТаблица.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = КонвертироватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ВременнаяТаблица.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка по описаниям вложенных коллекций "|".
	Для каждого ЭлементОписания Из ВложенныеКоллекции Цикл
		
		ТаблицаОписанияДанных = Неопределено;
		ДобавитьКолонкиТаблицыОписания(ТаблицаОписанияДанных, ЭлементОписания.Значение);
		Для каждого ЭлементКоллекции Из ВременнаяТаблица Цикл
			ОбработанныеЗначения = ПреобразоватьКоллекциюПоТаблицеЗначений(
				ЭлементКоллекции[ЭлементОписания.Ключ], ТаблицаОписанияДанных);
			ЭлементКоллекции[ЭлементОписания.Ключ] = ОбработанныеЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ВременнаяТаблица.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Финальная подготовка результата преобразования.
	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		
		// Заполнение таблицы результата.
		Результат = ОписаниеТаблицыЗначений.Скопировать();
		Для каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипРезультата = Тип("Структура") И ВременнаяТаблица.Количество() = 1 Тогда
		
		// Заполнение структуры
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВременнаяТаблица[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция КонвертироватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Перем Результат;

	Если Правило = "ДесериализацияСтавкиНДС" Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Результат = Новый Массив;
			Для каждого ЭлементКоллекции Из Значение Цикл
				СтавкаНДС = КоммерческиеПредложенияСлужебныйПовтИсп.ПолучитьСтавкуНДС(Неопределено);
				Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
					Если ЭлементКоллекции = "VAT_WITHOUT" Тогда
						СтавкаСтрокой = "БезНДС";
					Иначе
						СтавкаСтрокой = СтрЗаменить(ЭлементКоллекции, "VAT_", "НДС");
					КонецЕсли;
					СтавкаНДС = КоммерческиеПредложенияСлужебныйПовтИсп.ПолучитьСтавкуНДС(СтавкаСтрокой);
				КонецЕсли;
				Результат.Добавить(СтавкаНДС);
			КонецЦикла;
		Иначе
			Результат = ДатаИзISO(Значение);
		КонецЕсли
		
	ИначеЕсли Правило = "ДесериализацияДаты" Тогда
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Результат = Новый Массив;
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
					Результат.Добавить(ДатаИзISO(ЭлементКоллекции));
				Иначе
					Результат.Добавить(Неопределено);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат = ДатаИзISO(Значение);
		КонецЕсли;
		Возврат Результат;
		
	ИначеЕсли Правило = "ДесериализацияВалюты" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
				Результат.Добавить(КоммерческиеПредложенияСлужебныйПовтИсп.ПолучитьВалюту(ЭлементКоллекции));
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияЦены" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции) Тогда
				Результат.Добавить(ЭлементКоллекции/100);
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияНаличие" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЭлементКоллекции = "LOW" Тогда
				Результат.Добавить(1);
			ИначеЕсли ЭлементКоллекции = "MEDIUM" Тогда
				Результат.Добавить(2);
			ИначеЕсли ЭлементКоллекции = "HIGH" Тогда
				Результат.Добавить(3);
			Иначе
				Результат.Добавить(Неопределено);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияЗначенияСвойства" Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЭлементКоллекции = "true" Тогда
				Результат.Добавить(Истина);
			ИначеЕсли ЭлементКоллекции = "false" Тогда
				Результат.Добавить(Ложь);
			Иначе
				Результат.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ИстинаПоКоду200" Тогда
		
		Результат = (КодСостояния = 200);
		
	ИначеЕсли ТипЗнч(Правило) = Тип("Строка") Тогда
		
		Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СтрРазделить(Правило, "."));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации значения'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКолонкиТаблицыОписания(ТаблицаИсточник, Имя, Префикс = "")
	
	Таблица = Новый ТаблицаЗначений;
	
	Если Имя = "PageParameters" Тогда
		
		Таблица.Колонки.Добавить("Страница",          Типы().Число, "number");
		Таблица.Колонки.Добавить("РазмерСтраницы",    Типы().Число, "size");
		Таблица.Колонки.Добавить("КоличествоСтрок",   Типы().Число, "totalElements");
		Таблица.Колонки.Добавить("КоличествоСтраниц", Типы().Число, "totalPages");
		
	ИначеЕсли Имя = "Placement/TradeOffersPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Placement/TradeOffersPageV1_ListItem");
		
	ИначеЕсли Имя = "Placement/PriceListPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Placement/PriceListV1");
		
	ИначеЕсли Имя = "Placement/PriceListV1" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("ДатаНачала",    Типы().Дата,   "dateActualFrom*ДесериализацияДаты");
		Таблица.Колонки.Добавить("ДатаОкончания", Типы().Дата,   "dateActualTo*ДесериализацияДаты");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("КодВалюты",     Типы().Строка, "currencyCode");
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("КонтактноеЛицо",   Типы().Строка, "contacts.personName");
		Таблица.Колонки.Добавить("Телефон",          Типы().Строка, "contacts.phone");
		Таблица.Колонки.Добавить("ЭлектроннаяПочта", Типы().Строка, "contacts.email");
		Таблица.Колонки.Добавить("Контрагенты",      Типы().Строка, "audience*audience");
		Таблица.Колонки.Добавить("ИдентификаторОрганизации", Типы().Строка, "supplierPartyId");
		
	ИначеЕсли Имя = "Placement/TradeOfferV1" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторПрайса", Типы().Строка, "priceListId");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product", "product");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_TermsOfSale", "termsOfSale");
		Таблица.Колонки.Добавить("Наличие", Типы().Число, "stock.stockBalanceSummary.level*ДесериализацияНаличие"); // LOW, ENOUGH, HIGH // Складские остатки.
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	
	ИначеЕсли Имя = "Placement/TradeOffersPageV1_ListItem" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка,  "id");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product", "product");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_TermsOfSale", "termsOfSale");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product" Тогда
		
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product_1CNomenclature",       "ref1cNomenclature");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product_SupplierNomenclature", "supplierNomenclature");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product_1CNomenclature" Тогда
		
		// Данные сервиса 1С:Номенклатура
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка,  "productSpecificationId");
		Таблица.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка,  "productCharacteristicId");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product_SupplierNomenclature" Тогда
		
		// Данные контрагента.
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыПоставщика", Типы().Строка,  "productSpecificationId");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_TermsOfSale" Тогда
		
		// Условия поставки.
		Таблица.Колонки.Добавить("НаименованиеУпаковки", Типы().Строка, "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",    Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",  Типы().Число,  "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("СтавкаНДС",         Типы().Ссылка,    "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("Цены",              Типы().Таблица,   "price.matrix|Placement/TradeOfferDescriptionV1_TermsOfSale_PriceMatrixRow");
		Таблица.Колонки.Добавить("КратностьУпаковки", Типы().Число,     "packageMultiplicity");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",   Типы().Булево,    "includesVAT");
		Таблица.Колонки.Добавить("СрокПоставки",      Типы().Число,     "maxDaysForShipment");
		Таблица.Колонки.Добавить("НеПубликуется",     Типы().Булево,    "temporarilyOutOfSales");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_TermsOfSale_PriceMatrixRow" Тогда
		
		Таблица.Колонки.Добавить("Количество",  Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",        Типы().Число,  "price");
		Таблица.Колонки.Добавить("Комментарий", Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/TradeOfferV1" Тогда
			
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Product_1CNomenclature", "product.ref1cNomenclature"); // Описание товара в ТП в по схеме 1СН.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Product_SupplierSpecificNomenclature", "product.supplierNomenclature"); // Номенклатура контрагента.
		Таблица.Колонки.Добавить("Заголовок", Типы().Строка, "offerDescription.title");
		Таблица.Колонки.Добавить("ДополнительноеОписание", Типы().Строка, "offerDescription.description");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_TermsOfSale", "termsOfSale"); // Условия поставки.
		Таблица.Колонки.Добавить("Наличие", Типы().Число, "stock.stockBalanceSummary.level*ДесериализацияНаличие"); // LOW, ENOUGH, HIGH // Складские остатки.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_DeliveryDescription", "deliveryDescription"); // Условия доставки.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceMatrixProjection", "requestedPriceProjection"); // Цены.
		
	ИначеЕсли Имя = "Search/TradeOfferSummaryV1" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode*ЕдиницаИзмеренияПоКоду");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1_Item_Summary" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode*ЕдиницаИзмеренияПоКоду");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOffersListPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Search/TradeOffersListPageV1_Item");
	ИначеЕсли Имя = "Search/TradeOfferV1_PriceMatrix" Тогда
		
		Таблица.Колонки.Добавить("ВалютаПредложения",, "CurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("ЦеныВВалютеПредложения", Типы().Таблица, "matrix|Search/PriceMatrixRow"); // PriceMatrixRow
		
	ИначеЕсли Имя = "Search/TradeOffersListPageV1_Item" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("АртикулПроизводителя",     Типы().Строка, "productPartNumber");
		Таблица.Колонки.Добавить("АртикулПоставщика",        Типы().Строка, "supplierPartNumber");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("НаименованиеУпаковки",     Типы().Строка,  "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("Наличие",                  Типы().Число,  "stock.stockBalanceSummary.level*ДесериализацияНаличие");
		Таблица.Колонки.Добавить("СтавкаНДС",                Типы().Ссылка, "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",          Типы().Булево, "price.includesVAT");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_PriceMatrix", "price"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOfferV1_RequestedPriceProjection" Тогда
		
		Таблица.Колонки.Добавить("Валюта",, "requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("Цена",   Типы().Число, "price*ДесериализацияЦены");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Product_1CNomenclature" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКатегорииСервиса", Типы().Строка,  "categoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегорииСервиса",  Типы().Строка,  "categoryName");
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка, "productSpecificationId");
		Таблица.Колонки.Добавить("ПредставлениеНоменклатурыСервиса",   Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ОписаниеСервиса",                    Типы().Строка, "productDescription");
		Таблица.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка, "productCharacteristicId");
		Таблица.Колонки.Добавить("ПредставлениеХарактеристикиСервиса", Типы().Строка, "productCharacteristicName");
		Таблица.Колонки.Добавить("ШтрихкодыСервиса",           Типы().Массив,  "productBarCodes");
		Таблица.Колонки.Добавить("АртикулПроизводителя",       Типы().Строка,  "productPartNumber");
		Таблица.Колонки.Добавить("АдресаКартинокСервиса",      Типы().Строка,  "imageUrls");
		Таблица.Колонки.Добавить("КодЕдиницыИзмеренияСервиса", Типы().Строка,  "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка,  "manufacturer.Id");
		Таблица.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка,  "manufacturer.name");
		Таблица.Колонки.Добавить("ИдентификаторМаркиСервиса",  Типы().Строка,  "manufacturer.tradeMarkId");
		Таблица.Колонки.Добавить("НаименованиеМаркаСервиса",   Типы().Строка,  "manufacturer.tradeMark");
		Таблица.Колонки.Добавить("СвойстваСервиса",            Типы().Таблица, "requisites|Свойства-Товара");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Product_SupplierSpecificNomenclature" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторНоменклатуры", Типы().Строка, "productSpecificationId");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры",  Типы().Строка, "productName");
		Таблица.Колонки.Добавить("Описание",      Типы().Строка, "productDescription");
		Таблица.Колонки.Добавить("Марка",         Типы().Строка, "manufacturer.tradeMark");
		Таблица.Колонки.Добавить("Производитель", Типы().Строка, "manufacturer.name");
		Таблица.Колонки.Добавить("Артикул",       Типы().Массив, "productPartNumber");
		Таблица.Колонки.Добавить("Штрихкоды",     Типы().Массив, "productBarCodes");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения", Типы().Строка, "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка,  "ref1Cn.categoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",  Типы().Строка,  "ref1Cn.categoryName");
		Таблица.Колонки.Добавить("Свойства",      Типы().Массив, "ref1Cn.requisites|Свойства-Товара");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Supplier" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКонтрагента",    Типы().Строка, "bnetInternalId");
		Таблица.Колонки.Добавить("ИННКонтрагента",              Типы().Строка, "inn");
		Таблица.Колонки.Добавить("КППКонтрагента",              Типы().Строка, "kpp");
		Таблица.Колонки.Добавить("НаименованиеКонтрагента",     Типы().Строка, "name");
		Таблица.Колонки.Добавить("ПредставлениеКонтакта",   Типы().Строка, "contactPerson.name");
		Таблица.Колонки.Добавить("Телефон",          Типы().Строка, "contactPerson.phone");
		Таблица.Колонки.Добавить("ЭлектроннаяПочта", Типы().Строка, "contactPerson.email");

	ИначеЕсли Имя = "Search/TradeOfferV1_TermsOfSale" Тогда
		
		Таблица.Колонки.Добавить("УпаковкаНаименование", Типы().Строка,  "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",    Типы().Число,   "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",  Типы().Число,   "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("КоличествоЕдиниц",     Типы().Число,   "packaging.units");
		Таблица.Колонки.Добавить("СрокПоставки",         Типы().Число,   "maxDaysForShipment");
		Таблица.Колонки.Добавить("Валюта",               Типы().Ссылка,  "price.currencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("СтавкаНДС",            Типы().Ссылка,  "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",      Типы().Булево,  "price.includesVAT");
		Таблица.Колонки.Добавить("Цены",                 Типы().Таблица, "price.matrix|Search/PriceMatrixRow");
		Таблица.Колонки.Добавить("КратностьУпаковки",    Типы().Число,   "packageMultiplicity");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_DeliveryDescription" Тогда
		
		Таблица.Колонки.Добавить("РегионыДоставки",  Типы().Массив, "deliveryRegions*get-TradeOfferV1_DeliveryDescription"); // Список регионов доставки
		Таблица.Колонки.Добавить("АдресаСамовывоза", Типы().Массив, "pickupFrom*get-fias"); // Список адресов самовывоза
		
	ИначеЕсли Имя = "Search/TradeOfferV1_RequestedPriceMatrixProjection" Тогда
		
		Таблица.Колонки.Добавить("ВалютаПоиска",, "requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("ЦеныПоВалюте", Типы().Таблица, "matrix|Search/PriceMatrixRow"); // PriceMatrixRow
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1" Тогда
		
		Таблица.Колонки.Добавить("Контрагенты", Типы().Таблица, "groups|Search/TradeOfferGroupsListV1-groups");
		Таблица.Колонки.Добавить("Статистика",  Типы().Таблица, "tradeOffersStatisticsByGroup|Search/TradeOfferGroupsListV1_Statistics");
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1-groups" Тогда
		
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагенты
		Таблица.Колонки.Добавить("НайденныеСтроки", Типы().Таблица, "supplierTradeOffersByNomenclatures|Search/supplierTradeOffersByNomenclatures");
		
	ИначеЕсли Имя = "Search/supplierTradeOffersByNomenclatures" Тогда
		
		Таблица.Колонки.Добавить("НомерСтроки", Типы().Число,   "searchRequestNomenclatureCorrelationIndex");
		Таблица.Колонки.Добавить("Товары",      Типы().Таблица, "tradeOffers|Search/TradeOfferGroupsListV1_Item_Summary");
		
	ИначеЕсли Имя = "Search/PriceMatrixRow" Тогда
		
		Таблица.Колонки.Добавить("Количество",  Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",        Типы().Число,  "price*ДесериализацияЦены");
		Таблица.Колонки.Добавить("Комментарий", Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1_Statistics" Тогда
		
		// Статистика поиска торговых предложений по списку.
		Таблица.Колонки.Добавить("НомерСтроки",             Типы().Число,  "searchRequestNomenclatureCorrelationIndex");
		Таблица.Колонки.Добавить("МинимальнаяЦена",         Типы().Число,  "minPriceProjection.price");
		Таблица.Колонки.Добавить("МинимальнаяЦенаВалюта",   Типы().Ссылка, "minPriceProjection.requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("МаксимальнаяЦена",        Типы().Число,  "maxPriceProjection.price");
		Таблица.Колонки.Добавить("МаксимальнаяЦенаВалюта",  Типы().Ссылка, "maxPriceProjection.requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("МинимальныйСрокПоставки", Типы().Число,  "minDaysForShipment");
		Таблица.Колонки.Добавить("МаксимальныйСрокПоставки",Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КоличествоПредложений",   Типы().Число,  "totalTradeOffers");
		
	ИначеЕсли Имя = "Свойства-Товара" Тогда
		
		// Используется для спецификаций Search и Placement.
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("Значение",      Типы().Строка, "value*ДесериализацияЗначенияСвойства");
		Таблица.Колонки.Добавить("Представление", Типы().Строка, "valueName");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдено описание данных сервиса %1'"), Имя);
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Префикс <> "" Тогда
		Префикс = Префикс + ".";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица.Колонки Цикл
		ТаблицаИсточник.Колонки.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.ТипЗначения, Префикс + ЭлементКоллекции.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой          - Строка, Булево, Число, Дата - простой тип.
//   * Строка           - Строка.
//   * Число            - Число.
//   * Булево           - Булево.
//   * Структура        - Структура.
//   * Дата             - Дата.
//   * Таблица          - ТаблицаЗначений.
//   * Цена             - Число- денежный тип.
//   * Номенклатура     - ОпределяемыйТип.НоменклатураБЭД.
//   * Характеристика   - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД.
//   * Упаковка         - ОпределяемыйТип.УпаковкаНоменклатурыБЭД.
//   * ПрайсЛист        - ОпределяемыйТип.ТорговоеПредложение.
//   * Организация      - ОпределяемыйТип.Организация.
//   * ЕдиницаИзмерения - СправочникСсылка.
//
Функция Типы()
	
	Возврат КоммерческиеПредложенияСлужебныйПовтИсп.ТипыДанных();
	
КонецФункции

// Конвертирует дату из формата UnixTime в тип Дата.
//
// Параметры:
//  Источник - Число - число в формате UnixTime, например 1405955187848899.
// 
// Возвращаемое значение:
//  Дата - значение даты.
//
Функция ДатаИзISO(Источник)
	
	Значение = СтрЗаменить(Источник, "-", "");
	
	Возврат МестноеВремя(Значение);
	
КонецФункции

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ОтветДвоичныеДанные - Булево.
//  * ВозвращатьЗаголовки - Булево.
//  * Детализация - Строка.
//  * РасширятьКонтент - Булево.
//  * Контент - Строка.
//  * Обработка - Произвольный.
//  * РазрешенныеСостояния - Массив.
//  * Ошибки - Соответствие.
//  * ДополнительныеПараметры - Произвольный.
//  * Обработка - Произвольный.
//  * Результат - Произвольный.
//  * БлокироватьСообщенияОбОшибках - Булево.
//  * Аутентификация - Булево.
//  * Данные - Произвольный.
//  * Таймаут - Число.
//  * Метод - Строка.
//  * Адрес - Строка.
//  * Наименование - Строка.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес",        ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод",        ""); // Метод HTTP соединения, например POST. См. МетодыСоединения().
	ЗапросСервиса.Вставить("Таймаут",      0);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Данные");           // Двоичные данные или строка.
	ЗапросСервиса.Вставить("Аутентификация", Ложь);                // Требуется аутентификация.
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("Обработка");        // Описание обработки данных результата, см. ОбработатьОтветСервиса.
	ЗапросСервиса.Вставить("ДополнительныеПараметры");          // Дополнительные параметры.
	ЗапросСервиса.Вставить("Ошибки",       Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Обработка");        // Строка, ТаблицаЗначений
	ЗапросСервиса.Вставить("Контент", ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("РасширятьКонтент", Истина); // Включать "application/json" в заголовок Accept GET-запросов.
	ЗапросСервиса.Вставить("Детализация",  ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("ВозвращатьЗаголовки", Ложь); // Возвращать заголовки ответа.
	ЗапросСервиса.Вставить("ОтветДвоичныеДанные", Ложь); // Получать тело ответа, как двоичные данные.
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", Неопределено);
	ЗапросСервиса.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

Функция КодСобытияКоммерческиеПредложения()
	
	Возврат "КоммерческиеПредложения"
	
КонецФункции

Процедура ОбработатьОшибкиФормированияДерева(Ошибки, ВидЭД, СсылкаНаОбъект = Неопределено)

	Если ЗначениеЗаполнено(Ошибки) Тогда
		// Добавим маркер к каждой ошибке.
		Для Каждого ОписаниеОшибки Из Ошибки Цикл
			ОписаниеОшибки.ТекстОшибки = " - " + ОписаниеОшибки.ТекстОшибки;
		КонецЦикла;
		
		// Добавим заголовок.
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ШаблонЗаголовка = НСтр("ru = 'Не удалось сформировать электронный документ ""%1"" на основании документа ""%2"" по следующим причинам:'");
		Иначе
			ШаблонЗаголовка = НСтр("ru = 'Не удалось сформировать электронный документ ""%1"" по следующим причинам:'");
		КонецЕсли;
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, ВидЭД, СсылкаНаОбъект);
		
		ДанныеОшибки = ОбщегоНазначенияБЭДКлиентСервер.НовыеПараметрыОшибки(СсылкаНаОбъект);
		ОбщегоНазначенияБЭД.ДобавитьОшибку(Ошибки, ТекстЗаголовка, ДанныеОшибки, 0);
		
		ПодробноеОписаниеОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
		 
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Формирование электронного документа'"),
			ПодробноеОписаниеОшибки,
			ПодробноеОписаниеОшибки,
			КодСобытияКоммерческиеПредложения(),
			СсылкаНаОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
