#Область ПрограммныйИнтерфейс

#Область РаботаСоСтатусамиПроверкиПодбораСтрок

Процедура ПодключитьОбработкуКодовМаркировки(Форма, ЕстьТабличнаяЧастьШтрихкодыУпаковок=Истина, ДополнительныеКлючиШтрихкодовУпаковок = "") Экспорт
	
	Форма.КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(
		ШтрихкодированиеИС.ИнициализацияКэшаМаркируемойПродукции(), Форма.УникальныйИдентификатор);

	Если ЕстьТабличнаяЧастьШтрихкодыУпаковок Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавитьТаблицуШтрихкодовУпаковок(Форма, Новый Соответствие, ДобавляемыеРеквизиты, ДополнительныеКлючиШтрихкодовУпаковок);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

Процедура ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты, ДополнительныеКлючи = "") Экспорт
	
	Если ПараметрыИнтеграции.Получить("ДанныеШтрихкодовУпаковокГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИнтеграции.Вставить("ДанныеШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Ложь));
	
	Таблица = Новый РеквизитФормы("ДанныеШтрихкодовУпаковокГосИС", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("Сценарий", Новый ОписаниеТипов("Число"), "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип, "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип, "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип, "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Количество", Новый ОписаниеТипов("Число"), "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("БезКоличества", Новый ОписаниеТипов("Булево"), "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ПодменнаяНоменклатура", Новый ОписаниеТипов("Булево"), "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ШтрихкодыУпаковок", Новый ОписаниеТипов, "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	// Специфика таблицы
	ДополнительныеКлючиМассив = СтрРазделить(ДополнительныеКлючи, ",");
	
	Если ДополнительныеКлючиМассив.Найти("ИдентификаторПроисхожденияВЕТИС") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("ИдентификаторПроисхожденияВЕТИС",
			Метаданные.ОпределяемыеТипы["ИдентификаторПроисхожденияВЕТИС"].Тип,
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
	Если ДополнительныеКлючиМассив.Найти("СрокГодности") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("СрокГодности",
			Новый ОписаниеТипов("Дата"),
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
	Если ДополнительныеКлючиМассив.Найти("GTIN") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("GTIN",
			Метаданные.ОпределяемыеТипы.GTIN.Тип,
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
	Если ДополнительныеКлючиМассив.Найти("КоличествоПотребительскихУпаковок") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("КоличествоПотребительскихУпаковок",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)),
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
КонецПроцедуры

#Область Товары

Процедура ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("ИнтерфейсШтрихкодовУпаковокГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("ИнтерфейсШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Ложь));
	
	Колонка = Новый РеквизитФормы("МаркируемаяПродукция", Новый ОписаниеТипов("Булево"), ПутьКРеквизиту, НСтр("ru = 'Маркируемая продукция'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ВидПродукцииИС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"), ПутьКРеквизиту, НСтр("ru = 'Вид продукции'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("СтатусПроверкиГосИС", Новый ОписаниеТипов("Число"), ПутьКРеквизиту, НСтр("ru = 'Статус проверки подбора'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("АвтоматическийОСУИС", Новый ОписаниеТипов("Булево"), ПутьКРеквизиту, НСтр("ru = 'Коды ОСУ формируются автоматически'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки = Неопределено, Инициализация = Ложь) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ШтрихкодыУпаковокТоваров) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
	КонецЕсли;
	
	Если Инициализация Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		Если ПараметрыИнтеграцииГосИС.Получить("ДанныеШтрихкодовУпаковокГосИС" + Настройки.Сценарий) <> Неопределено
				И ПараметрыИнтеграцииГосИС.Получить("ДанныеШтрихкодовУпаковокГосИС" + Настройки.Сценарий).Заполнение = Истина Тогда
			Возврат;
		КонецЕсли;
		ПараметрыИнтеграцииГосИС.Вставить("ДанныеШтрихкодовУпаковокГосИС" + Настройки.Сценарий, Новый Структура("Заполнение", Истина));
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС.Выгрузить(Новый Структура("Сценарий", Неопределено));
	Для Каждого СтрокаТЧ Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
		Если СтрокаТЧ.Сценарий <> Настройки.Сценарий Тогда
			ЗаполнитьЗначенияСвойств(ДанныеШтрихкодовУпаковокГосИС.Добавить(), СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Настройки.Объект) Тогда
		Объект = Форма[Настройки.Объект];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	// Дополнительное поле сравнения
	ЕстьКоличествоПотребительскихКодов = ДанныеШтрихкодовУпаковокГосИС.Колонки.Найти("КоличествоПотребительскихУпаковок")<>Неопределено;
	
	ШтрихкодыУпаковокИсходнаяТаблица = Объект[Настройки.Штрихкоды].Выгрузить();
	
	// Частичное выбытие: строки, где указано количество в табличной части штрихкодов, обрабатываем индивидуально
	Если Настройки.ЧастичноеВыбытие Тогда
		СтрокиЧастичногоВыбытия = ШтрихкодыУпаковокИсходнаяТаблица.СкопироватьКолонки();
		Для Каждого СтрокаШтрихкод Из ШтрихкодыУпаковокИсходнаяТаблица Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкод.ЧастичноеВыбытиеКоличество) Тогда
				ЗаполнитьЗначенияСвойств(СтрокиЧастичногоВыбытия.Добавить(), СтрокаШтрихкод);
			КонецЕсли;
		КонецЦикла;
		ШтрихкодыУпаковокИсходнаяТаблица = ШтрихкодыУпаковокИсходнаяТаблица.Скопировать(Новый Структура("ЧастичноеВыбытиеКоличество", 0));
	КонецЕсли;
	
	// Дополнительные ключи связи, специфика: берем только строки с заполненными ключами (маркировка).
	ЭтоМаркировкаСоСпецификой = ДанныеШтрихкодовУпаковокГосИС.Колонки.Найти("ИдентификаторПроисхожденияВЕТИС")<>Неопределено;
	ШтрихкодыУпаковокБезИдентификатора = Новый Массив;
	Если ЭтоМаркировкаСоСпецификой Тогда
		СтрокиОставить = Новый Массив;
		Для Каждого СтрокаШтрихкоды Из ШтрихкодыУпаковокИсходнаяТаблица Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкоды.СрокГодности)
					Или ЗначениеЗаполнено(СтрокаШтрихкоды.ИдентификаторПроисхожденияВЕТИС) Тогда
				СтрокиОставить.Добавить(СтрокаШтрихкоды);
			Иначе
				ШтрихкодыУпаковокБезИдентификатора.Добавить(СтрокаШтрихкоды.ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		Если СтрокиОставить.Количество() Тогда
			
			ШтрихкодыУпаковокБезИдентификатора = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(ШтрихкодыУпаковокБезИдентификатора).ДеревоУпаковок;
			
			ШтрихкодыУпаковокИсходнаяТаблица = ШтрихкодыУпаковокИсходнаяТаблица.Скопировать(СтрокиОставить);
			ШтрихкодыУпаковокИсходнаяТаблица.Индексы.Добавить("ШтрихкодУпаковки");
			
		Иначе
			ЭтоМаркировкаСоСпецификой = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСрокГодности = ДанныеШтрихкодовУпаковокГосИС.Колонки.Найти("СрокГодности") <> Неопределено;
	
	ПоляПоиска = "Сценарий,Номенклатура,Характеристика,Серия";
	Если ЭтоМаркировкаСоСпецификой Тогда
		ПоляПоиска = ПоляПоиска + ",ИдентификаторПроисхожденияВЕТИС,СрокГодности";
	ИначеЕсли ЕстьСрокГодности Тогда
		ПоляПоиска = ПоляПоиска + ",СрокГодности";
	КонецЕсли;
	ДанныеШтрихкодовУпаковокГосИС.Индексы.Добавить(ПоляПоиска);
	
	// Дополнительные ключи связи, специфика: поля поиска для незаполненной номенклатуры.
	ЕстьGTIN = ДанныеШтрихкодовУпаковокГосИС.Колонки.Найти("GTIN")<>Неопределено;
	ПоляПоискаДляПустойНоменклатуры = ПоляПоиска + ",GTIN";
	Если ЕстьGTIN Тогда
		ДанныеШтрихкодовУпаковокГосИС.Индексы.Добавить(ПоляПоискаДляПустойНоменклатуры);
	КонецЕсли;
	
	МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		Настройки.ШтрихкодУпаковки, ",", Истина);
	ШтрихкодыУпаковок = Неопределено;
	Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
		Если ШтрихкодыУпаковок = Неопределено Тогда
			ШтрихкодыУпаковок = ШтрихкодыУпаковокИсходнаяТаблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			ШтрихкодыУпаковокДополнительное = ШтрихкодыУпаковокИсходнаяТаблица.ВыгрузитьКолонку(ИмяКолонки);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШтрихкодыУпаковок, ШтрихкодыУпаковокДополнительное);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковок.Ссылка            КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия             КАК Серия,
	|	ШтрихкодыУпаковок.Количество        КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ (&ПроизвольнаяЕдиницаУчета)
	|			ТОГДА 0
	|		КОГДА ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок = 0
	|			ТОГДА ШтрихкодыУпаковок.Количество
	|		ИНАЧЕ ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок
	|	КОНЕЦ                               КАК КоличествоПотребительскихУпаковок,
	|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ЛОЖЬ                                КАК ПодменнаяНоменклатура
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И (ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|		ИЛИ &ЭтоШтрихкодУпаковкиНабора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕстьВложенныеШтрихкоды.Ссылка КАК Родитель,
	|	ЕстьВложенныеШтрихкоды.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|		И ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|ГДЕ
	|	ЕстьВложенныеШтрихкоды.Ссылка В (&ШтрихкодУпаковки)
	|		И Не &ЭтоШтрихкодУпаковкиНабора
	|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "ШтрихкодыУпаковок.Номенклатура");
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если Не Настройки.ВключаяКомплектующие Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "&ЭтоШтрихкодУпаковкиНабора",
			"(ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок = 1
			|	ИЛИ (ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок = 0 И ШтрихкодыУпаковок.Количество = 1))");
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоШтрихкодУпаковкиНабора", Ложь);
	
	КешВложенности = Новый Соответствие;
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	СтруктураПоискаДляПустойНоменклатуры = Новый Структура(ПоляПоискаДляПустойНоменклатуры);
	СтруктураПоиска.Сценарий = Настройки.Сценарий;
	СтруктураПоискаДляПустойНоменклатуры.Сценарий = Настройки.Сценарий;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
		
		Пока СоставУпаковки.Следующий() Цикл
			
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СоставУпаковки);
			
			Если ЭтоМаркировкаСоСпецификой Тогда
				Расшифровка = ШтрихкодыУпаковокИсходнаяТаблица.Найти(ИсходныйШтрихкод, "ШтрихкодУпаковки");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Расшифровка, "ИдентификаторПроисхожденияВЕТИС, СрокГодности");
			ИначеЕсли ЕстьСрокГодности Тогда
				Расшифровка = ШтрихкодыУпаковокИсходнаяТаблица.Найти(ИсходныйШтрихкод, "ШтрихкодУпаковки");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Расшифровка, "СрокГодности");
			КонецЕсли;
			
			Если ЕстьGTIN И Не ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДляПустойНоменклатуры, СтруктураПоиска);
				Если СтрНачинаетсяС(СоставУпаковки.ЗначениеШтрихкода, "(") Тогда
					СтруктураПоискаДляПустойНоменклатуры.GTIN = Сред(СоставУпаковки.ЗначениеШтрихкода, 5, 14);
				Иначе 
					СтруктураПоискаДляПустойНоменклатуры.GTIN = Сред(СоставУпаковки.ЗначениеШтрихкода, 1, 14);
				КонецЕсли;
				СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаДляПустойНоменклатуры);
			Иначе
				СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если СтрокиКеша.Количество() Тогда
				
				СтрокиКеша0 = СтрокиКеша[0];
				Если ЕстьКоличествоПотребительскихКодов И СоставУпаковки.КоличествоПотребительскихУпаковок > 0 Тогда
					Если СоставУпаковки.Количество = 0 Тогда
						СтрокиКеша0.БезКоличества = Истина;
					КонецЕсли;
					СтрокиКеша0.Количество = СтрокиКеша0.Количество + СоставУпаковки.Количество;
					СтрокиКеша0.КоличествоПотребительскихУпаковок = СтрокиКеша0.КоличествоПотребительскихУпаковок + СоставУпаковки.КоличествоПотребительскихУпаковок;
				Иначе
					СтрокиКеша0.Количество = СтрокиКеша0.Количество + ?(СоставУпаковки.Количество = 0, 1, СоставУпаковки.Количество);
				КонецЕсли;
				СтрокиКеша0.ШтрихкодыУпаковок.Вставить(ИсходныйШтрихкод, Истина);
				
			Иначе
				
				НоваяСтрока = ДанныеШтрихкодовУпаковокГосИС.Добавить();
				НоваяСтрока.Сценарий = Настройки.Сценарий;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставУпаковки);
				Если СоставУпаковки.КоличествоПотребительскихУпаковок > 0 И СоставУпаковки.Количество = 0 Тогда
					НоваяСтрока.БезКоличества = Истина;
				ИначеЕсли НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;
				Если ЕстьGTIN И Не ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
					НоваяСтрока.GTIN = СтруктураПоискаДляПустойНоменклатуры.GTIN;
				КонецЕсли;
				НоваяСтрока.ШтрихкодыУпаковок = Новый Соответствие;
				НоваяСтрока.ШтрихкодыУпаковок.Вставить(ИсходныйШтрихкод, Истина);
				Если ЭтоМаркировкаСоСпецификой Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска, "ИдентификаторПроисхожденияВЕТИС, СрокГодности");
				ИначеЕсли ЕстьСрокГодности Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска, "СрокГодности");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыУпаковок = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыУпаковок.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоМаркировкаСоСпецификой Тогда
		Для Каждого СтрокаСостав Из ШтрихкодыУпаковокБезИдентификатора.Строки Цикл
			ДополнитьКешШтрихкодамиБезИдентификаторов(СтрокаСостав.ШтрихкодУпаковки, СтрокаСостав.Строки, ДанныеШтрихкодовУпаковокГосИС, ШтрихкодыУпаковокИсходнаяТаблица);
		КонецЦикла;
	КонецЕсли;
	
	// Обработка строк с частичным выбытием
	Если Настройки.ЧастичноеВыбытие И СтрокиЧастичногоВыбытия.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ШтрихкодыУпаковки", СтрокиЧастичногоВыбытия);
		Запрос.УстановитьПараметр("ПустаяСерия",       ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
		Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%1                             КАК ШтрихкодУпаковки,
		|	Штрихкоды.ЧастичноеВыбытиеКоличество     КАК Количество,
		|	Штрихкоды.ЧастичноеВыбытиеВариантУчета   КАК ВариантУчета,
		|	Штрихкоды.ЧастичноеВыбытиеНоменклатура   КАК НоменклатураЧастичногоВыбытия,
		|	Штрихкоды.ЧастичноеВыбытиеХарактеристика КАК ХарактеристикаЧастичногоВыбытия
		|ПОМЕСТИТЬ ЧастичноеВыбытие
		|ИЗ
		|	&ШтрихкодыУпаковки КАК Штрихкоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Штрихкоды.Ссылка КАК Штрихкод,
		|	ВЫБОР
		|		КОГДА ЧастичноеВыбытие.ВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
		|			ТОГДА ЧастичноеВыбытие.НоменклатураЧастичногоВыбытия
		|		ИНАЧЕ Штрихкоды.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЧастичноеВыбытие.ВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
		|			ТОГДА ЧастичноеВыбытие.ХарактеристикаЧастичногоВыбытия
		|		ИНАЧЕ Штрихкоды.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЧастичноеВыбытие.ВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
		|			ТОГДА &ПустаяСерия
		|		ИНАЧЕ Штрихкоды.Серия
		|	КОНЕЦ КАК Серия,
		|	ВЫБОР
		|		КОГДА ЧастичноеВыбытие.ВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПодменнаяНоменклатура,
		|	ЧастичноеВыбытие.Количество КАК Количество,
		|	Штрихкоды.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	ЧастичноеВыбытие КАК ЧастичноеВыбытие
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
		|		ПО Штрихкоды.Ссылка = ЧастичноеВыбытие.ШтрихкодУпаковки
		|", Настройки.ШтрихкодУпаковки);
		СоставУпаковки = Запрос.Выполнить().Выбрать();
		Пока СоставУпаковки.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СоставУпаковки);
			СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиКеша.Количество() Тогда
				СтрокиКеша0 = СтрокиКеша[0];
				СтрокиКеша0.Количество = СтрокиКеша0.Количество + СоставУпаковки.Количество;
				СтрокиКеша0.ШтрихкодыУпаковок.Вставить(СоставУпаковки.Штрихкод, Истина);
			Иначе
				НоваяСтрока = ДанныеШтрихкодовУпаковокГосИС.Добавить();
				НоваяСтрока.Сценарий = Настройки.Сценарий;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставУпаковки);
				НоваяСтрока.ШтрихкодыУпаковок = Новый Соответствие;
				НоваяСтрока.ШтрихкодыУпаковок.Вставить(СоставУпаковки.Штрихкод, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Политики учета серий могут предусматривать различное указание серий в разных документах.
	// Если в конкретном документе серии по номенклатуре не указываются, добавление в него кодов маркировки с сериями
	//   ошибкой не является и обрабатывается как код маркировки без серии.
	ЭтоПрикладнойДокумент = Не Настройки.ВсеМаркируемые;
	Если ЭтоПрикладнойДокумент Тогда
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
		
		Если ЗначениеЗаполнено(ПараметрыСканирования.ПараметрыУказанияСерий) Тогда
			
			УдалитьСтроки = Новый Массив;
			Для Каждого СтрокаКеша Из ДанныеШтрихкодовУпаковокГосИС Цикл
				Если СтрокаКеша.Сценарий <> Настройки.Сценарий Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаКеша.Серия)
					И Не ОбщегоНазначенияИС.ТребуетсяВыборСерии(СтрокаКеша, ПараметрыСканирования) Тогда
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКеша);
					СтруктураПоиска.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
					СтрокиБезСерий = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
					Если СтрокиБезСерий.Количество() Тогда
						СтрокаПриемник = СтрокиБезСерий[0];
						СтрокаПриемник.Количество = СтрокаПриемник.Количество + СтрокаКеша.Количество;
						СтрокаПриемник.БезКоличества = СтрокаПриемник.БезКоличества Или СтрокаКеша.БезКоличества;
						Если ЕстьКоличествоПотребительскихКодов Тогда
							СтрокаПриемник.КоличествоПотребительскихУпаковок = СтрокаПриемник.КоличествоПотребительскихУпаковок + СтрокаКеша.КоличествоПотребительскихУпаковок;
						КонецЕсли;
						Для Каждого ШтрихкодУпаковки Из СтрокаКеша.ШтрихкодыУпаковок Цикл
							СтрокаПриемник.ШтрихкодыУпаковок.Вставить(ШтрихкодУпаковки.Ключ, Истина);
						КонецЦикла;
						УдалитьСтроки.Добавить(СтрокаКеша);
					Иначе
						СтрокаКеша.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаКеша Из УдалитьСтроки Цикл
				ДанныеШтрихкодовУпаковокГосИС.Удалить(СтрокаКеша);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеШтрихкодовУпаковокГосИС Цикл
		Если СтрокаТаблицы.Сценарий = Настройки.Сценарий Тогда
			СтрокаТаблицы.ШтрихкодыУпаковок = Новый ФиксированноеСоответствие(СтрокаТаблицы.ШтрихкодыУпаковок);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ДанныеШтрихкодовУпаковокГосИС.Загрузить(ДанныеШтрихкодовУпаковокГосИС);
	
КонецПроцедуры

// Возвращает настройки, используемые для встраивания интерфейса кеша штрихкодов упаковок в конкретную форму.
// 
// Параметры:
//  ЭтоДокументГосИС - Булево - преднастройка для библиотечных документов (все товары маркируемые)
// 
// Возвращаемое значение:
//  Структура -- настройки встраивания:
// * Объект - Строка - имя реквизита формы Объект (сама форма если пусто).
// * ВсеМаркируемые - Булево - истина - не проверять товары на признак "Маркируемые".
// * ИспользоватьОСУ - Булево - истина - проверять товары на признак "АвтоматическийОСУИС".
// * Сценарий - Число - индекс используемой настройки.
// * Штрихкоды - Строка - имя табличной части "Штрихкоды упаковок".
// * ШтрихкодУпаковки - Строка - имя колонки табличной части "Штрихкоды упаковок" содержащей ссылку на штрихкод.
// * Товары - Строка - имя табличной части "Товары".
// * Серии - Строка - имя табличной части "Серии".
// * Количество - Строка - имя колонки "Количество" в табличных частях.
// * ЧастичноеВыбытие - Булево - в документе осуществляется частичное выбытие по кодам маркировки
// * ВключаяКомплектующие - Булево - для маркировки наборов в документе "Маркировка товаров ИС МП"
Функция НастройкиИсточникаКешаШтрихкодовУпаковок(ЭтоДокументГосИС = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Объект",          "Объект");
	Результат.Вставить("ВсеМаркируемые",  ЭтоДокументГосИС);
	Результат.Вставить("ИспользоватьОСУ", Не ЭтоДокументГосИС);
	
	Результат.Вставить("Сценарий",         0);
	Результат.Вставить("Штрихкоды",        "ШтрихкодыУпаковок");
	Результат.Вставить("ШтрихкодУпаковки", "ШтрихкодУпаковки");
	
	Результат.Вставить("Товары", "Товары");
	Результат.Вставить("Серии",  "");
	
	Результат.Вставить("Количество", "Количество");
	Результат.Вставить("ЧастичноеВыбытие", Ложь);
	
	Результат.Вставить("ВключаяКомплектующие", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Обновляет статусы проверки и подбора в строках таблицы товаров формы (документа)
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для обновления статусов строк.
//   Настройки           - Неопределено, Структура    - (См. НастройкиИсточникаКешаШтрихкодовУпаковок).
//   ОбновитьТовары      - Булево                     - необходимость обновить таблицу товаров по таблице штрихкодов.
//   ДополнительныеКлючи - Строка                     - ключи связи строк табличных частей.
//
Процедура ПрименитьКешШтрихкодовУпаковок(Форма, Настройки = Неопределено, ОбновитьТовары = Ложь, ДополнительныеКлючи = "") Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки.Объект) Тогда
		Объект = Форма[Настройки.Объект];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Объект[Настройки.Товары];
	
	Если ЗначениеЗаполнено(Настройки.Серии) И Объект[Настройки.Серии].Количество() Тогда
		ТабличнаяЧастьСерии = Объект[Настройки.Серии];
	Иначе
		ТабличнаяЧастьСерии = Неопределено;
	КонецЕсли;
	
	ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧастьТовары, Настройки);
	
	КолонкиТаблицыТовары = ТабличнаяЧастьТовары.Выгрузить(Новый Массив).Колонки;
	СтруктураПоиска = Новый Структура("Номенклатура");
	СтруктураПоискаБезСерий = Новый Структура("Номенклатура");
	Если КолонкиТаблицыТовары.Найти("Характеристика")<> Неопределено Тогда
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоискаБезСерий.Вставить("Характеристика");
	КонецЕсли;
	Если КолонкиТаблицыТовары.Найти("Серия")<> Неопределено Тогда
		СтруктураПоиска.Вставить("Серия");
	КонецЕсли;
	Для Каждого КлючПоиска Из СтрРазделить(ДополнительныеКлючи, ",", Ложь) Цикл
		СтруктураПоиска.Вставить(КлючПоиска);
	КонецЦикла;
	
	// Дополнительное поле сравнения
	ЕстьКоличествоПотребительскихКодов = Форма.ДанныеШтрихкодовУпаковокГосИС.Выгрузить(Новый Массив).Колонки.Найти("КоличествоПотребительскихУпаковок")<>Неопределено;
	
	Если ОбновитьТовары Тогда
		ТабличнаяЧастьШтрихкоды = Объект[Настройки.Штрихкоды];
		УдалитьСвязанныеШтрихкодыУпаковок = Новый Соответствие;
		УдалитьСтрокиШтрихкодов = Новый Массив;
		//Удалились товары
		Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
			Если СтрокаТовары.Сценарий <> Настройки.Сценарий Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			ЗаполнитьЗначенияСвойств(СтруктураПоискаБезСерий, СтрокаТовары);
			//Специфика: GTIN используется только при пустой номенклатуре
			Если СтруктураПоиска.Свойство("GTIN") И ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
				СтруктураПоиска.GTIN = "";
			КонецЕсли;
			
			Если СтрокаТовары.ПодменнаяНоменклатура Тогда
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
			Иначе
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если СтрокиТовары.Количество() = 0 И ТабличнаяЧастьСерии <> Неопределено Тогда
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
				Если СтрокиТовары.Количество() Тогда
					СтрокиТовары = ТабличнаяЧастьСерии.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокиТовары.Количество() = 0 Тогда
				Для Каждого ЭлементСоответствия Из СтрокаТовары.ШтрихкодыУпаковок Цикл
					УдалитьСвязанныеШтрихкодыУпаковок.Вставить(ЭлементСоответствия.Ключ, Истина);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		ИмяКолонкиШтрихкодУпаковки = СтрРазделить(Настройки.ШтрихкодУпаковки, ",", Ложь)[0];
		Если УдалитьСвязанныеШтрихкодыУпаковок.Количество() Тогда
			//Удалим все упаковки верхнего уровня где они есть из ТЧ
			Для Каждого СтрокаШтрихкоды Из ТабличнаяЧастьШтрихкоды Цикл
				Если УдалитьСвязанныеШтрихкодыУпаковок.Получить(СтрокаШтрихкоды[ИмяКолонкиШтрихкодУпаковки])=Истина Тогда
					УдалитьСтрокиШтрихкодов.Добавить(СтрокаШтрихкоды);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из УдалитьСтрокиШтрихкодов Цикл
				ТабличнаяЧастьШтрихкоды.Удалить(СтрокаУдалить);
			КонецЦикла;
			ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
		
		Если Настройки.ВсеМаркируемые Или СтрокаТовары.МаркируемаяПродукция Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			
			//Специфика: GTIN используется только при пустой номенклатуре
			Если СтруктураПоиска.Свойство("GTIN") И ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
				СтруктураПоиска.GTIN = "";
			КонецЕсли;
			
			СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиКеша.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаБезСерий, СтрокаТовары);
				СтрокиКешаБезСерий = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаБезСерий);
				Если (ТабличнаяЧастьСерии <> Неопределено Или СтрокиКешаБезСерий.Количество() <> 0) Тогда
					СтрокиКеша = СтрокиКешаБезСерий;
					СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
				КонецЕсли;
			КонецЕсли;
			
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу[Настройки.Количество];
			КонецЦикла;
			
			КоличествоВКеше = 0;
			БезКоличества = Ложь;
			Для Каждого СтрокаПоКлючу Из СтрокиКеша Цикл
				КоличествоВКеше = КоличествоВКеше + СтрокаПоКлючу.Количество;
				БезКоличества = БезКоличества Или СтрокаПоКлючу.БезКоличества;
			КонецЦикла;
			
			КоличествоПотребительскихКодовРазница = 0;
			Если ЕстьКоличествоПотребительскихКодов Тогда
				Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
					КоличествоПотребительскихКодовРазница = КоличествоПотребительскихКодовРазница + СтрокаПоКлючу.КоличествоПотребительскихУпаковок;
				КонецЦикла;
				Для Каждого СтрокаПоКлючу Из СтрокиКеша Цикл
					КоличествоПотребительскихКодовРазница = КоличествоПотребительскихКодовРазница - СтрокаПоКлючу.КоличествоПотребительскихУпаковок;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокиКеша.Количество() = 0 Тогда
				//установлено ранее
			ИначеЕсли КоличествоПоКлючу = КоличествоВКеше // Штучная продукция
				И (Не ЕстьКоличествоПотребительскихКодов Или КоличествоПотребительскихКодовРазница = 0) Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 1;
			ИначеЕсли БезКоличества И Не ЕстьКоличествоПотребительскихКодов Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 3;
			Иначе
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			КонецЕсли;
			
		Иначе
			СтрокаТовары.СтатусПроверкиГосИС = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Штрихкодирование

//Для связи механизма штрихкодирования и кеша строк: является входящим параметром
//   при обработке данных кода маркировки (добавлении кода маркировки или упаковки в таблицу штрихкодов упаковок),
//   для обновления кеша штрихкодов упаковок добавлением вместо пересчета.
//
//Параметры:
//   ДанныеШтрихкода - Структура, СтрокаДереваЗначений - разобранные данные штрихкода.
//   Специфика       - Строка - ключ описания специфики данных штрихкода.
//
//Возвращаемое значение:
//   Структура - поля кеша и служебная информация:
// 
// * Специфика - Строка - специфика штрихкода и кеша
// 
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров  - добавляемый штрихкод.
// * Номенклатура     - ОпределяемыйТип.Номенклатура               - номенклатура из упаковки или кода маркировки.
// * Характеристика   - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика из упаковки или кода маркировки.
// * Серия            - ОпределяемыйТип.СерияНоменклатуры          - серия из упаковки или кода маркировки.
// * Количество       - Число                                      - количество добавленных единиц.
//
// * GTIN - ОпределяемыйТип.GTIN - GTIN номенклатуры (если доступны коды маркировки остатков);
//
// * ИдентификаторПроисхожденияВЕТИС - ОпределяемыйТип.ИдентификаторПроисхожденияВЕТИС - для маркировки молочной продукции;
// * СрокГодности                    - Дата                                            - для маркировки молочной продукции;
// * СкоропортящаясяПродукция   - Булево                                          - для маркировки молочной продукции;
// * ШтрихкодОднороднойУпаковки      - СправочникСсылка.ШтрихкодыУпаковокТоваров       - для маркировки молочной продукции;
//
// * ЧастичноеВыбытиеОтдельнойНоменклатуры - Булево - при добавлении отдельной номенклатуры частичного выбытия
//
Функция ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, Специфика = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Специфика", Специфика);
	
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Серия");
	Результат.Вставить("Количество");
	Результат.Вставить("КоличествоУпаковок");
	Результат.Вставить("ШтрихкодУпаковки");
	Результат.Вставить("ЧастичноеВыбытиеОтдельнойНоменклатуры", Ложь);
	Если СтрНайти(Специфика, "КоличествоКодов") Тогда
		Результат.Вставить("КоличествоПотребительскихУпаковок");
	КонецЕсли;
	
	Если СтрНайти(Специфика, "СрокГодности") Тогда
		Результат.Вставить("СрокГодности");
		Результат.Вставить("ШтрихкодОднороднойУпаковки");
	КонецЕсли;
	Если СтрНайти(Специфика, "ВЕТИС") Тогда
		Результат.Вставить("ИдентификаторПроисхожденияВЕТИС");
		Результат.Вставить("ШтрихкодОднороднойУпаковки");
	КонецЕсли;
	Если СтрНайти(Специфика, "ДоступныКодыМаркировкиОстатков")
		Или Специфика = "ЗаказНаЭмиссию"
		Или СтрНайти(Специфика, "GTIN") Тогда
		// Коды маркировки остатков
		Результат.Вставить("GTIN");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеШтрихкода);
	Результат.КоличествоУпаковок = Результат.Количество;
	
	//Поля с разным названием
	ДанныеСпецифики = Новый Структура("СрокГодности,СкоропортящаясяПродукция");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ГоденДо") Тогда
		ДанныеСпецифики.СрокГодности = ДанныеШтрихкода.ГоденДо;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "СкоропортящаясяПродукция") Тогда
		ДанныеСпецифики.СкоропортящаясяПродукция= ДанныеШтрихкода.СкоропортящаясяПродукция;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Результат, ДанныеСпецифики);
	
	//Взаимоисключающие поля
	Если СтрНайти(Специфика, "ДоступныКодыМаркировкиОстатков") > 0 И ЗначениеЗаполнено(Результат.Номенклатура) Тогда
		Результат.GTIN = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для связи механизма штрихкодирования и кеша строк: обновление кеша по добавленному коду маркировки.
//   Прикладные документы (без специфики без заполнения табличной части).
//
// Параметры:
//   Форма             - ФормаКлиентскогоПриложения           - источник вызова.
//   ОбновляемаяСтрока - См. ДанныеШтрихкодаДляДобавленияВКеш.
//   Сценарий          - Число                                - ключ кеша
//
Процедура ДополнитьКеш(Форма, ОбновляемаяСтрока, Сценарий = 0) Экспорт
	
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС;
	
	// Дополнительные ключи связи, специфика: поля поиска для незаполненной номенклатуры.
	ПоляПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
	
	ЗаполнитьЗначенияСвойств(ПоляПоиска, ОбновляемаяСтрока);
	Если ОбновляемаяСтрока.ЧастичноеВыбытиеОтдельнойНоменклатуры Тогда
		ПоляПоиска.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	КонецЕсли;
	ПоляПоиска.Вставить("Сценарий", Сценарий);
	
	ДанныеКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(ПоляПоиска);
	Если ДанныеКеша.Количество() Тогда
		СтрокаКеша = ДанныеКеша[0];
		СтрокаКеша.Количество = СтрокаКеша.Количество + ОбновляемаяСтрока.Количество;
		Если СтрокаКеша.ШтрихкодыУпаковок.Получить(ОбновляемаяСтрока.ШтрихкодУпаковки) = Неопределено Тогда
			Штрихкоды = Новый Соответствие(СтрокаКеша.ШтрихкодыУпаковок);
			Штрихкоды.Вставить(ОбновляемаяСтрока.ШтрихкодУпаковки, Истина);
			СтрокаКеша.ШтрихкодыУпаковок = Новый ФиксированноеСоответствие(Штрихкоды);
		КонецЕсли;
	Иначе
		СтрокаКеша = ДанныеШтрихкодовУпаковокГосИС.Добавить();
		СтрокаКеша.Сценарий = Сценарий;
		ЗаполнитьЗначенияСвойств(СтрокаКеша, ОбновляемаяСтрока);
		Если ОбновляемаяСтрока.ЧастичноеВыбытиеОтдельнойНоменклатуры Тогда
			СтрокаКеша.ПодменнаяНоменклатура = Истина;
		КонецЕсли;
		Штрихкоды = Новый Соответствие;
		Штрихкоды.Вставить(ОбновляемаяСтрока.ШтрихкодУпаковки, Истина);
		СтрокаКеша.ШтрихкодыУпаковок = Новый ФиксированноеСоответствие(Штрихкоды);
	КонецЕсли;
	
КонецПроцедуры

// Для связи механизма штрихкодирования и кеша строк: обновление кеша по добавленному коду маркировки.
// Только для ТЧ ШтрихкодыУпаковок (библиотечное использование)
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова.
//  ОбновляемаяСтрока - См. ДанныеШтрихкодаДляДобавленияВКеш.
//  ДобавленныеШтрихкодыУпаковок - Неопределено, Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - уже добавленные штрихкоды упаковок (специфика документа маркировки)
//  Сценарий - Число - Ключ сценария использования
//  ИмяТЧ - Строка - Имя табличной части штрихкодов сценария использования
Процедура ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока,
	ДобавленныеШтрихкодыУпаковок = Неопределено, Сценарий = 0, ИмяТЧ = "ШтрихкодыУпаковок") Экспорт
	
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС;
	
	// Дополнительные ключи связи, специфика: поля поиска для незаполненной номенклатуры.
	КолонкиКеша = ДанныеШтрихкодовУпаковокГосИС.Выгрузить(Новый Массив).Колонки;
	ЕстьGTIN = КолонкиКеша.Найти("GTIN") <> Неопределено;
	// Дополнительное поле кеша, КМ на переменное количество: должны быть и колонка и переменное количество
	ЕстьКоличествоКодов = КолонкиКеша.Найти("КоличествоПотребительскихУпаковок") <> Неопределено
		И ОбновляемаяСтрока.Свойство("КоличествоПотребительскихУпаковок");
	// Дополнительные ключи связи, специфика: поля поиска для маркировки молочной продукции
	ДобавитьШтрихкодОднороднойУпаковки = ОбновляемаяСтрока.Свойство("ШтрихкодОднороднойУпаковки");

	ПоляПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(, ЕстьGTIN, ДобавитьШтрихкодОднороднойУпаковки);
	
	ЗаполнитьЗначенияСвойств(ПоляПоиска, ОбновляемаяСтрока);
	Если ОбновляемаяСтрока.ЧастичноеВыбытиеОтдельнойНоменклатуры Тогда
		ПоляПоиска.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	КонецЕсли;
	ПоляПоиска.Вставить("Сценарий", Сценарий);
	
	ДанныеКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(ПоляПоиска);
	Если ДанныеКеша.Количество() Тогда
		СтрокаКеша = ДанныеКеша[0];
		ШтрихкодыУпаковок = Новый Соответствие(СтрокаКеша.ШтрихкодыУпаковок);
		Если ЕстьКоличествоКодов Тогда
			СтрокаКеша.Количество = СтрокаКеша.Количество + ОбновляемаяСтрока.Количество;
			СтрокаКеша.КоличествоПотребительскихУпаковок = СтрокаКеша.КоличествоПотребительскихУпаковок + ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;
		Иначе
			СтрокаКеша.Количество = СтрокаКеша.Количество + ?(ОбновляемаяСтрока.Количество = 0, 1, ОбновляемаяСтрока.Количество);
		КонецЕсли;
	Иначе
		СтрокаКеша = ДанныеШтрихкодовУпаковокГосИС.Добавить();
		СтрокаКеша.Сценарий = Сценарий;
		ЗаполнитьЗначенияСвойств(СтрокаКеша, ОбновляемаяСтрока);
		Если ОбновляемаяСтрока.ЧастичноеВыбытиеОтдельнойНоменклатуры Тогда
			СтрокаКеша.ПодменнаяНоменклатура = Истина;
		КонецЕсли;
		ШтрихкодыУпаковок = Новый Соответствие;
	КонецЕсли;
	
	Если ОбновляемаяСтрока.Количество = 0 Тогда
		СтрокаКеша.БезКоличества = Истина;
	КонецЕсли;
	
	ДобавитьШтрихкодУпаковки = ДобавленныеШтрихкодыУпаковок.Найти(ОбновляемаяСтрока.ШтрихкодУпаковки) = Неопределено;

	// Добавление штрихкодов упаковок, специфика маркировки молочной продукции
	Если ДобавитьШтрихкодОднороднойУпаковки
		И ЗначениеЗаполнено(ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки) Тогда
		
		ШтрихкодыУпаковок.Вставить(ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки);
		
		НоваяСтрока = Форма.Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбновляемаяСтрока);
		НоваяСтрока.ШтрихкодУпаковки = ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки;
		
		ДобавитьШтрихкодУпаковки = ДобавитьШтрихкодУпаковки
			И ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки <> ОбновляемаяСтрока.ШтрихкодУпаковки;
		
	КонецЕсли;
	
	ШтрихкодыУпаковок.Вставить(ОбновляемаяСтрока.ШтрихкодУпаковки);
	
	Если ДобавитьШтрихкодУпаковки Тогда
		
		НоваяСтрока = Форма.Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбновляемаяСтрока);
		Если ДобавитьШтрихкодОднороднойУпаковки Тогда
			ОчищаемыеРеквизиты = Новый Структура("СрокГодности,ИдентификаторПроисхожденияВЕТИС");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОчищаемыеРеквизиты);
		КонецЕсли;
		ДобавленныеШтрихкодыУпаковок.Добавить(ОбновляемаяСтрока.ШтрихкодУпаковки);
		
	КонецЕсли;
	
	СтрокаКеша.ШтрихкодыУпаковок = Новый ФиксированноеСоответствие(ШтрихкодыУпаковок);
	
КонецПроцедуры

//Для связи механизма штрихкодирования и кеша строк: получение текущих данных кеша по добавляемому коду маркировки
//
//Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник вызова.
//   ОбновляемаяСтрока - (См. ДанныеШтрихкодаДляДобавленияВКеш)
//   ИмяПоляКоличество - Строка - требуемая колонка количества.
//   Сценарий - Число - индекс сценария использования.
//
//Возвращаемое значение:
//   Число - количество единиц по кодам маркировки по полям поиска текущей маркируемой продукции
//
Функция КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, ИмяПоляКоличество = "Количество", Сценарий = 0) Экспорт
	
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС;
	ПоляПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(,ОбновляемаяСтрока.Свойство("GTIN"),ОбновляемаяСтрока.Свойство("ШтрихкодОднороднойУпаковки"));
	ЗаполнитьЗначенияСвойств(ПоляПоиска, ОбновляемаяСтрока);
	ПоляПоиска.Вставить("Сценарий", Сценарий);
	ДанныеКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(ПоляПоиска);
	Если ДанныеКеша.Количество() Тогда
		Возврат ДанныеКеша[0][ИмяПоляКоличество];
	КонецЕсли;
	Возврат 0;
	
КонецФункции

// При сканировании кода маркировки, требующего уточнения, забирает количество с не полностью заполненных строк
//   с той же номенклатурой и характеристикой.
// Требования: в форме используется механика статусов проверки и подбора строк.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма в которой происходит сканирование
//   ОбновляемаяСтрока - См. ДанныеШтрихкодаДляДобавленияВКеш.
//   Настройки - см. НастройкиРаспределенияНезаполненныхСтрок
// 
// Возвращаемое значение:
//   Массив - измененные строки табличной части
Функция РаспределитьНаНезаполненныеСтроки(Форма, Знач ОбновляемаяСтрока, Настройки = Неопределено) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиРаспределенияНезаполненныхСтрок();
	КонецЕсли;
	КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
	Товары = Форма;
	Для Каждого ЭлементПути Из СтрРазделить(Настройки.Товары, ".") Цикл
		Товары = Товары[ЭлементПути];
	КонецЦикла;
	ЕстьВЕТИС = ОбновляемаяСтрока.Свойство("ИдентификаторПроисхожденияВЕТИС");
	ЕстьСрокГодности = ОбновляемаяСтрока.Свойство("СрокГодности");
	
	ИзмененныеСтроки = Новый Массив;
	
	КлючПоиска = Новый Структура;
	КлючПоиска.Вставить(Настройки.Номенклатура, ОбновляемаяСтрока.Номенклатура);
	Если ЗначениеЗаполнено(Настройки.Характеристика) Тогда
		КлючПоиска.Вставить(Настройки.Характеристика,ОбновляемаяСтрока.Характеристика);
	КонецЕсли;
	СтрокиТовары = Товары.НайтиСтроки(КлючПоиска);
	
	Для Каждого СтрокаТЧ Из СтрокиТовары Цикл
		
		Если КоличествоМаркируемойПродукции = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ДанныеПроверки = ОбщегоНазначения.СкопироватьРекурсивно(ОбновляемаяСтрока);
		СтрокаПодходит = Истина;
		СтрокиСовпадают = Истина;
		Если ЗначениеЗаполнено(Настройки.Серия) Тогда
			ДанныеПроверки.Серия = СтрокаТЧ[Настройки.Серия];
			СтрокаПодходит = СтрокаПодходит И ( ОбновляемаяСтрока.Серия = ДанныеПроверки.Серия
				Или Не ЗначениеЗаполнено(ДанныеПроверки.Серия));
			СтрокиСовпадают = СтрокиСовпадают И ОбновляемаяСтрока.Серия = ДанныеПроверки.Серия;
		КонецЕсли;
		Если ЕстьВЕТИС Тогда
			ДанныеПроверки.ИдентификаторПроисхожденияВЕТИС = СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС;
			СтрокаПодходит = СтрокаПодходит И (
				ОбновляемаяСтрока.ИдентификаторПроисхожденияВЕТИС = СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС
				Или Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС));
			СтрокиСовпадают = СтрокиСовпадают И ОбновляемаяСтрока.ИдентификаторПроисхожденияВЕТИС = ДанныеПроверки.ИдентификаторПроисхожденияВЕТИС;
		КонецЕсли;
		Если ЕстьСрокГодности Тогда
			ДанныеПроверки.СрокГодности = СтрокаТЧ.СрокГодности;
			СтрокаПодходит = СтрокаПодходит И (ОбновляемаяСтрока.СрокГодности = СтрокаТЧ.СрокГодности
				Или Не ЗначениеЗаполнено(СтрокаТЧ.СрокГодности));
			СтрокиСовпадают = СтрокиСовпадают И ОбновляемаяСтрока.СрокГодности = ДанныеПроверки.СрокГодности;
		КонецЕсли;
		
		Если СтрокаПодходит И Не СтрокиСовпадают Тогда
			КоличествоПросканировано = КоличествоПоДаннымКеша(Форма, ДанныеПроверки);
			МожноРаспределить = СтрокаТЧ[Настройки.Количество] - КоличествоПросканировано;
			Распределить = Мин(МожноРаспределить, КоличествоМаркируемойПродукции);
			Если Распределить > 0 Тогда
				КоличествоМаркируемойПродукции = КоличествоМаркируемойПродукции - Распределить;
				СтрокаТЧ[Настройки.Количество] = СтрокаТЧ[Настройки.Количество] - Распределить;
				ИзмененныеСтроки.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзмененныеСтроки;
	
КонецФункции

// Настройки распределения незаполненных строк.
// 
// Параметры:
//  ЕстьСерии - Булево - возможность распределения с недозаполненных строк с пустой/той же серией.
// 
// Возвращаемое значение:
//  Структура - описание имен полей, которые будут использоваться для поиска недозаполненных строк
Функция НастройкиРаспределенияНезаполненныхСтрок(ЕстьСерии = "Серия") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Товары",         "Объект.Товары");  // путь к табличной части на форме
	Результат.Вставить("Номенклатура",   "Номенклатура");   // имя реквизита Номенклатура
	Результат.Вставить("Характеристика", "Характеристика"); // имя реквизита Характеристика. Пусто если не используется.
	Результат.Вставить("Количество",     "Количество");     // имя реквизита Количество
	Результат.Вставить("Серия",          ЕстьСерии);        // имя реквизита Серия. Пусто если не используется.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСоСтатусамиПроверкиПодбораДокумента

Процедура ДобавитьТаблицуСтатусовПроверки(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("СтатусыПроверкиПодбораГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("СтатусыПроверкиПодбораГосИС", Новый Массив);
	
	Таблица = Новый РеквизитФормы("СтатусыПроверкиПодбораГосИС", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("Сценарий", Новый ОписаниеТипов("Число"), "СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"), "СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Статус",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиИПодбораИС"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Видимость",Новый ОписаниеТипов("Булево"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Описание",Новый ОписаниеТипов("Строка"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементов(Форма, ВидПродукции, ВидимостьЭлементов, Сценарий = 0) Экспорт
	
	// Если по разным видам продукции в статусе установлено одинаковое описание, то выводится только первое
	ОтображаемыеСтатусы = Новый Соответствие;
	Если ВидимостьЭлементов Тогда
		Для Каждого ЭлементДанных Из Форма.СтатусыПроверкиПодбораГосИС Цикл
			Если ЭлементДанных.Видимость Тогда
				Если ОтображаемыеСтатусы[ЭлементДанных.Описание] = Неопределено Тогда
					ОтображаемыеСтатусы.Вставить(ЭлементДанных.Описание, ЭлементДанных.ВидПродукции);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.НайтиСтроки(Новый Структура("ВидПродукции,Сценарий", ВидПродукции, Сценарий))[0];
	СтрокаСтатуса.Видимость = ВидимостьЭлементов;
	Если ОтображаемыеСтатусы[СтрокаСтатуса.Описание] <> СтрокаСтатуса.ВидПродукции Тогда
		СтрокаСтатуса.Видимость = Ложь;
	КонецЕсли;
	
	ИмяЭлемента = ИмяКнопкиИКоманды(Сценарий, ВидПродукции);
	Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Форма.Элементы[ИмяЭлемента].Видимость = ВидимостьЭлементов;
	КонецЕсли;
	ИмяЭлемента = ИмяКнопкиИКоманды(Сценарий, ВидПродукции, Истина);
	Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Форма.Элементы[ИмяЭлемента].Видимость = Форма.Элементы[ИмяЭлемента].Видимость И ВидимостьЭлементов;
	КонецЕсли;
	
	ОбновитьВидПодменю(Форма, Сценарий);
	ОбновитьОбщийСтатусПодменю(Форма);
	
КонецПроцедуры

Процедура УстановитьСтатусПоВидуПродукции(Форма, ВидПродукции, Статус, Сценарий) Экспорт
	
	СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.НайтиСтроки(Новый Структура("ВидПродукции, Сценарий", ВидПродукции, Сценарий));
	Если СтрокаСтатуса.Количество() = 0 Тогда
		СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.Добавить();
		СтрокаСтатуса.ВидПродукции = ВидПродукции;
		СтрокаСтатуса.Сценарий = Сценарий;
		СтрокаСтатуса.Видимость    = Истина;
	Иначе
		СтрокаСтатуса = СтрокаСтатуса[0];
	КонецЕсли;
	СтрокаСтатуса.Статус = Статус;
	
КонецПроцедуры

Функция СтатусПроверкиИПодбораДокумента(Документ, ВидМаркируемойПродукции, Сценарий = 0) Экспорт
	
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось;

	Если ЗначениеЗаполнено(Документ) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Документ", Документ);
		Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПроверкиИПодбораДокументов.СтатусПроверкиИПодбора КАК СтатусПроверкиИПодбора
		|ИЗ
		|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИС КАК СтатусыПроверкиИПодбораДокументов
		|ГДЕ
		|	СтатусыПроверкиИПодбораДокументов.Документ = &Документ
		|	И СтатусыПроверкиИПодбораДокументов.ВидМаркируемойПродукции = &ВидМаркируемойПродукции
		|	И СтатусыПроверкиИПодбораДокументов.Сценарий = &Сценарий
		|";
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтатусПроверкиИПодбора = Выборка.СтатусПроверкиИПодбора;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверкиИПодбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти
#Область СлужебныйПрограммныйИнтерфейс

#Область ЭлементыФорм

#Область ДобавлениеРеквизитов

// Добавляет на форму подменю проверки и подбора по видам продукции ГосИС
// 
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - Структура        - параметры интеграции прикладной формы
//
Процедура ДобавитьКоманднуюПанельИПодменюПроверкиИПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	ИмяКоманднойПанели = "КоманднаяПанельПроверкаИПодборПродукцииГосИС" + ПараметрыИнтеграции.Сценарий;
	Если ЭлементыФормы.Найти(ИмяКоманднойПанели)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = Форма.ПараметрыИнтеграцииГосИС.Получить("ЦветГиперссылки");
	
	ПоследующийЭлемент = ?(ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы],
		Неопределено);
	Если ПоследующийЭлемент <> Неопределено
			И ПоследующийЭлемент.Родитель <> ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы] Тогда
		ПоследующийЭлемент = Неопределено;
	КонецЕсли;
		
	ПанельСканированиеИПроверка = ЭлементыФормы.Вставить(
		ИмяКоманднойПанели,
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	ПанельСканированиеИПроверка.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	ПодменюСканированиеИПроверка = ЭлементыФормы.Добавить(
		ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий),
		Тип("ГруппаФормы"),
		ПанельСканированиеИПроверка);
	ПодменюСканированиеИПроверка.Вид = ВидГруппыФормы.Подменю;
	ПодменюСканированиеИПроверка.Заголовок = НСтр("ru = 'Проверка и подбор'");
	ПодменюСканированиеИПроверка.ЦветТекстаЗаголовка = Цвет;
	ПодменюСканированиеИПроверка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюСканированиеИПроверка.Отображение = ОтображениеКнопки.Текст;
	ПодменюСканированиеИПроверка.ШрифтЗаголовка = Новый Шрифт(ПодменюСканированиеИПроверка.ШрифтЗаголовка, , , , , Истина, , );
	
	ПодменюВозобновитьПроверку = ЭлементыФормы.Добавить(
		ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий,, Истина),
		Тип("ГруппаФормы"),
		ПодменюСканированиеИПроверка);
	ПодменюВозобновитьПроверку.Вид = ВидГруппыФормы.Подменю;
	ПодменюВозобновитьПроверку.Заголовок = НСтр("ru = 'Возобновить проверку и подбор'");
	ПодменюВозобновитьПроверку.ЦветТекстаЗаголовка = Цвет;
	ПодменюВозобновитьПроверку.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюВозобновитьПроверку.Отображение = ОтображениеКнопки.Текст;
	
	ИнформацияОПроверкеИПодборе = ЭлементыФормы.Вставить(
		"СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС" + ПараметрыИнтеграции.Сценарий,
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	
	ИнформацияОПроверкеИПодборе.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИнформацияОПроверкеИПодборе.ОтображатьЗаголовок = Ложь;
	ИнформацияОПроверкеИПодборе.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИнформацияОПроверкеИПодборе.РастягиватьПоВертикали = Ложь;
	ИнформацияОПроверкеИПодборе.РастягиватьПоГоризонтали = Истина;
	
	Картинка = ЭлементыФормы.Добавить("КартинкаПроверкаИПодборПродукцииГосИС" + ПараметрыИнтеграции.Сценарий,
		Тип("ДекорацияФормы"), ИнформацияОПроверкеИПодборе);
	Картинка.Вид      = ВидДекорацииФормы.Картинка;
	Картинка.Картинка = БиблиотекаКартинок.ИнформацияГосИС;
	
	Надпись = ЭлементыФормы.Добавить("НадписьПроверкаИПодборПродукцииГосИС" + ПараметрыИнтеграции.Сценарий,
		Тип("ДекорацияФормы"), ИнформацияОПроверкеИПодборе);
	Надпись.Вид = ВидДекорацииФормы.Надпись;
	Надпись.АвтоМаксимальнаяШирина = Ложь;
	
	
КонецПроцедуры

// Добавляет на форму кнопки проверки и подбора, возобновления проверки по видам продукции ГосИС
// 
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения                   - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - См. ПараметрыИнтеграцииФормПроверкиИПодбора
//   ВидПродукцииИС      - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для которого производится встраивание
//
Процедура ДобавитьКнопкуПроверкиИПодбора(Форма, ПараметрыИнтеграции, ВидПродукцииИС) Экспорт
	
	ИмяКомандыПроверкаПодбор = ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий, ВидПродукцииИС);
	
	Если Форма.Команды.Найти(ИмяКомандыПроверкаПодбор)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = Форма.ПараметрыИнтеграцииГосИС.Получить("ЦветГиперссылки");
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыПроверкаПодбор);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = ВидПродукцииИС;
	
	Кнопка = Форма.Элементы.Добавить(
		ИмяКомандыПроверкаПодбор,
		Тип("КнопкаФормы"),
		Форма.Элементы[ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий)]);
	Кнопка.ИмяКоманды = ИмяКомандыПроверкаПодбор;
	Кнопка.ЦветТекста = Цвет;
	Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	Кнопка.Отображение = ОтображениеКнопки.Текст;
	Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ИмяКомандыВозобновитьПроверку = ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий,ВидПродукцииИС, Истина);
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКомандыВозобновитьПроверку);
		КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		КомандаФормы.Заголовок = ПараметрыИнтеграции.Заголовки[8];
		
		Кнопка = Форма.Элементы.Добавить(
			ИмяКомандыВозобновитьПроверку,
			Тип("КнопкаФормы"),
			Форма.Элементы[ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий,,Истина)]);
		Кнопка.ИмяКоманды = ИмяКомандыВозобновитьПроверку;
		Кнопка.ЦветТекста = Цвет;
		Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму колонку статуса проверки и подбора в табличной части
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения                   - форма для встраивания
//   ПараметрыИнтеграции - Структура                          - параметры интеграции прикладной формы
//
Процедура ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		ПутьКРеквизиту = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		ПутьКРеквизиту = ПутьКРеквизиту + ".СтатусПроверкиГосИС";
		ИмяКолонкиРеквизита = СтрШаблон("%1СтатусПроверкиГосИС",ПараметрыИнтеграции.ИмяТабличнойЧастиТовары);
		
		Если Форма.Элементы.Найти(ИмяКолонкиРеквизита) = Неопределено Тогда
		
			КолонкаИнтерфейса = Форма.Элементы.Вставить(
				ИмяКолонкиРеквизита,
				Тип("ПолеФормы"),
				Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормыТовары],
				Форма.Элементы[ПараметрыИнтеграции.ИмяСледующейКолонки]);
			КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
			КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
			КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
			КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДобавленнымиРеквизитами

Процедура ОбновитьИнтерфейсПоВидуПродукции(Форма, ВидПродукцииИС, СтатусПроверкиИПодбора, ПараметрыИнтеграции) Экспорт
	
	ИмяКомандыПроверкаПодбор = ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий, ВидПродукцииИС);
	
	Если Форма.Элементы.Найти(ИмяКомандыПроверкаПодбор) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаФормы  = Форма.Элементы[ИмяКомандыПроверкаПодбор];
	
	КнопкаФормы.Заголовок = ЗаголовокКомандыПроверкиИПодбора(ПараметрыИнтеграции, СтатусПроверкиИПодбора);
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ИмяКомандыВозобновитьПроверку = ИмяКнопкиИКоманды(ПараметрыИнтеграции.Сценарий, ВидПродукцииИС, Истина);
		Форма.Элементы[ИмяКомандыВозобновитьПроверку].Видимость = СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
		
	КонецЕсли;
	
	СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.НайтиСтроки(Новый Структура("ВидПродукции, Сценарий", ВидПродукцииИС, ПараметрыИнтеграции.Сценарий));
	Если СтрокаСтатуса.Количество() Тогда
		
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется
			И ПараметрыИнтеграции.ЕстьПравоИзменение Тогда
			
			Если ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке Тогда
				СтрокаСтатуса[0].Описание = ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке;
			Иначе
				СтрокаСтатуса[0].Описание = ПараметрыИнтеграции.ИнформацияДляПользователяОПроверке;
			КонецЕсли;
		Иначе
			
			СтрокаСтатуса[0].Описание = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РеквизитыФорм

Процедура ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(ДеревоИсточник, ДеревоПриемник) Экспорт
	
	Для Каждого КолонкаИсточника Из ДеревоИсточник.Колонки Цикл
		КолонкаПриемник = ДеревоПриемник.Колонки.Найти(КолонкаИсточника.Имя);
		Если КолонкаПриемник = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка: Колонка %1 не найдена в приемнике'"), КолонкаИсточника.Имя));
		Иначе
			ТипыКолонкиИсточника = КолонкаИсточника.ТипЗначения.Типы();
			Для Каждого ТипКолонкиИсточника Из ТипыКолонкиИсточника Цикл
				Если Не КолонкаПриемник.ТипЗначения.СодержитТип(ТипКолонкиИсточника) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Внутренняя ошибка: Колонка %1 включает тип %2, который отсутствует в типе колонки приемника'"), КолонкаИсточника.Имя, ТипКолонкиИсточника));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КолонкаПриемника Из ДеревоПриемник.Колонки Цикл
		КолонкаИсточник = ДеревоИсточник.Колонки.Найти(КолонкаПриемника.Имя);
		Если КолонкаИсточник = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка: Колонка %1 не найдена в источнике'"), КолонкаПриемника.Имя));
		Иначе
			ТипыКолонкиПриемника = КолонкаПриемника.ТипЗначения.Типы();
			Для Каждого ТипКолонкиПриемника Из ТипыКолонкиПриемника Цикл
				Если Не КолонкаИсточник.ТипЗначения.СодержитТип(ТипКолонкиПриемника) Тогда
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Внутренняя ошибка: Колонка %1 включает тип %2, который отсутствует в типе колонки источника'"), КолонкаПриемника.Имя, ТипКолонкиПриемника));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВстраиванияФормПроверкиИПодбора

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции форм проверки и подбора
//   в прикладные документы конфигурации - потребителя библиотеки ГосИС.
//
// Возвращаемое значение:
//  Структура - значения, используемые для интеграции формы проверки и подбора:
//   * ИспользоватьБезМаркируемойПродукции        - Булево - признак показа гиперссылки в форме документа без
//           маркируемой продукции.
//   * БлокироватьТабличнуюЧастьТоварыПриПроверке - Булево - признак блокировки табличной части "Товары" для изменений
//           после начала проверки в форме.
//   * ИнформацияДляПользователяОБлокировке       - Строка - информационная надпись на форме над табличной частью
//           "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Истина.
//   * ИнформацияДляПользователяОПроверке         - Строка - информационная надпись на форме над табличной частью
//           "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь.
//   * ИспользоватьСтатусПроверкаЗавершена        - Булево - признак допустимости у документа состояния завершения
//           проверки. При значении Ложь проверку можно выполнять многократно.
//   * ИмяРеквизитаФормыОбъект                    - Строка - имя реквизита формы, содержащего объект документа.
//   * ИмяТабличнойЧастиТовары                    - Строка - имя табличной части документа, содержащей номенклатуру.
//   * ИмяТабличнойЧастиСерии                     - Строка - имя табличной части документа, содержащей данные по сериям.
//   * ИмяРодительскойГруппыФормы                 - Строка - имя элемента-группы формы документа, в которую необходимо
//           добавить гиперссылку для открытия формы проверки.
//   * ИмяЭлементаФормыТовары                     - Строка - имя элемента формы документа, в котором выводится табличная
//           часть с номенклатурой.
//   * ИмяПоследующегоЭлементаФормы               - Строка - имя элемента формы, перед которым необходимо добавить
//           гиперссылку для открытия формы проверки.
//   * БлокируемыеЭлементы              - Массив Из Строка - имена элементов формы документа, которые необходимо
//           заблокировать после начала работы с формой проверки.
//   * ИспользоватьСтатусПроверкиПодбораДокумента - Булево - признак наличия у формы реквизита "СтатусПроверкиГосИС".
//   * ИспользоватьКолонкуСтатусаПроверкиПодбора  - Булево - признак использования специальной колонки в таблице товаров
//           для отображения статуса проверки товара.
//   * ИмяСледующейКолонки                        - Строка - имя колонки, перед которой необходимо вставить колонку для
//           отображения статуса проверки товара.
//   * ИмяТабличнойЧастиШтрихкодыУпаковок         - Строка - имя табличной части документа, содержащей штрихкоды
//           упаковок номенклатуры.
//   * ИмяКолонкиШтрихкодУпаковки                 - Строка - имя колонки табличной части штрихкодов содержащей штрихкоды
//           упаковок номенклатуры.
//   * ДоступноЧастичноеВыбытие                   - Булево - признак наличия в табличной части штрихкодов упаковок
//           колонок частичного выбытия кодов маркировки (ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика,
//           ЧастичноеВыбытиеКоличество, ЧастичноеВыбытиеВариантУчета)
//   * ДоступныОбъемноСортовыеКоды                - Булево - возможность использования в табличной части "Товары"
//           маркируемой продукции с автоматическим указанием агрегатов ОСУ без их подбора в форме проверки
//   * ХарактеристикиИспользуются                 - Булево - общий признак использования характеристик.
//   * СерииИспользуются                          - Булево - общий признак использования серий.
//   * РазмещатьЭлементыИнтерфейса                - Булево - необходимость размещения гиперссылок проверки и подбора.
//   * ИмяРеквизитаФормы                          - Строка - имя реквизита формы для вывода гиперссылки проверки/подбора.
//   * ЕстьПравоИзменения                         - Булево - право пользователя на редактирование текущего документа.
//   * ЭтоДокументПриобретения                    - Булево - признак встраивания в документ приобретения.
//   * ЕстьЭлектронныйДокумент                    - Булево - признак наличия ЭДО по объекту.
//   * Заголовки                        - Массив Из Строка - варианты представления заголовков кнопок для пользователя.
//   * ЕстьПравоИзменение                         - Булево - доступность изменения документа.
//
Функция ПараметрыИнтеграцииФормПроверкиИПодбора() Экспорт
	
	ПараметрыИнтеграции = Новый Структура();
	
	#Область СвойстваФормыИОбъектаВстраивания
	
	ПараметрыИнтеграции.Вставить("ЭтоДокументПриобретения",            Ложь);
	ПараметрыИнтеграции.Вставить("ЕстьЭлектронныйДокумент",            Ложь);
	
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",            "Объект");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиТовары",            "Товары");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиСерии",             "Серии");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок", "ШтрихкодыУпаковок");
	ПараметрыИнтеграции.Вставить("ИмяКолонкиШтрихкодУпаковки",         "ШтрихкодУпаковки");
	ПараметрыИнтеграции.Вставить("ДоступноЧастичноеВыбытие",           Ложь);
	ПараметрыИнтеграции.Вставить("ДоступныОбъемноСортовыеКоды",        Ложь);
	
	ПараметрыИнтеграции.Вставить("БлокируемыеЭлементы", Новый Массив);
	
	ПараметрыИнтеграции.Вставить("Сценарий", 0);
	ПараметрыИнтеграции.Вставить("РазмещатьЭлементыИнтерфейса", Ложь);
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормы",           "ТекстПроверкаПодбор");
	
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",   "СтраницаТовары");
	ПараметрыИнтеграции.Вставить("ИмяПоследующегоЭлементаФормы", "Товары");
	ПараметрыИнтеграции.Вставить("ИмяЭлементаФормыТовары",       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонки",          "ТоварыНоменклатура");
	
	#КонецОбласти
	
	#Область НастройкиИнтеграцииФормыПроверки
	
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкаЗавершена",        Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьБезМаркируемойПродукции",        Ложь);
	ПараметрыИнтеграции.Вставить("БлокироватьТабличнуюЧастьТоварыПриПроверке", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкиПодбораДокумента", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуСтатусаПроверкиПодбора",  Ложь);
	
	#КонецОбласти
	
	#Область ОбщиеНастройкиСистемы
	
	ПараметрыИнтеграции.Вставить("ХарактеристикиИспользуются", ИнтеграцияИС.ХарактеристикиИспользуются());
	ПараметрыИнтеграции.Вставить("СерииИспользуются",          ИнтеграцияИС.СерииИспользуются());
	ПараметрыИнтеграции.Вставить("ЕстьПравоИзменение",      Ложь);
	
	#КонецОбласти
	
	#Область Тексты
	
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОБлокировке",
		НСтр("ru = 'До окончания работы в форме проверки и подбора внесение изменений в данной форме недоступно.'"));
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОПроверке",
		НСтр("ru = 'Выполняется проверка маркируемой продукции. При завершении проверки табличная часть может быть изменена.'"));
	
	ПараметрыИнтеграции.Вставить("Заголовки", Новый Массив);
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Проверить поступившую маркируемую продукцию'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Подобрать и проверить поступившую маркируемую продукцию'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Продолжить проверку поступившей маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Продолжить подбор и проверку маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Результаты проверки маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Результаты подбора маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Промежуточные результаты проверки маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Промежуточные результаты подбора маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Возобновить проверку маркируемой продукции'"));
	
	#КонецОбласти
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Функция ЗаголовокКомандыПроверкиИПодбора(ПараметрыИнтеграции, СтатусПроверкиИПодбора) Экспорт
	
	Результат = "";
	
	ЕстьПравоИзменение      = ПараметрыИнтеграции.ЕстьПравоИзменение;
	ЭтоДокументПриобретения = ПараметрыИнтеграции.ЭтоДокументПриобретения;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Результат = ПараметрыИнтеграции.Заголовки[2+?(ЕстьПравоИзменение,0,4)+?(ЭтоДокументПриобретения,0,1)];
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено
		И ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		Результат = ПараметрыИнтеграции.Заголовки[4+?(ЭтоДокументПриобретения,0,1)];
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось
		ИЛИ СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
	
		Результат = ПараметрыИнтеграции.Заголовки[?(ЭтоДокументПриобретения,0,1)];
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КартинкаТипыУпаковкиПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок["ПроверкаНаличияАлкогольнойПродукцииЕГАИС"];
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияТабакаИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияАльтернативногоТабакаИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияОбувиИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияОдеждыТекстиляИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияМолочнойПродукцииИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияШинИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияФотоаппаратовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияДуховИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияМедицинскихИзделийИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияВелосипедовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияУпакованнойВодыИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Антисептики Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияАнтисептиковИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияНикотиносодержащейПродукцииИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияПиваИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияБАДовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияПродукцииИзНатуральногоМехаИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СоковаяПродукция
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияСоковойПродукцииИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияБезалкогольногоПиваИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияМорепродуктовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияКормаДляЖивотныхИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияМясоИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияВетеринарныеПрепаратыИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияИгрушкиИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияРадиоэлектроннаяПродукцияИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияТитановаяМеталлопродукцияИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияКонсервированнаяПродукцияИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.РастительныеМасла Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияРастительныеМаслаИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияОптоволокноИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияПарфюмерияИБытоваяХимияИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатнаяПродукция Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияПечатнойПродукцииИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.СтроительныеМатериалы Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияСтроительныхМатериаловИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ОтопительныеПриборы Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияОтопительныхПриборовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Бакалея Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияБакалеиИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияСлабоалкогольныхНапитковИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияТелефоновИНоутбуковИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияПиротехникиИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КабельнаяПродукция Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияКабельнойПродукцииИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МоторныеМасла Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияМоторныхМаселИСМП;
	ИначеЕсли ЗначениеЗаполнено(ВидПродукции) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Для вида продукции: %1, не задана картинка с типами упаковок.'"), ВидПродукции);
	Иначе
		КартинкаТипУпаковки = Новый Картинка;
	КонецЕсли;
	
	Возврат КартинкаТипУпаковки;
	
КонецФункции

#КонецОбласти

#Область РасчетХешСумм

Процедура РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, ВключаяПодчиненные, ЕстьКолонкаСтатусПроверки = Истина, ЕстьКолонкаХешСуммаНормализации = Неопределено, ИмяПоляКоличество = Неопределено) Экспорт
	
	ДанныеДляРасчетаХешСуммы = Новый СписокЗначений();
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		ИдентификаторВДереве    = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		ПодчиненныеСтрокиДерева = СтрокаДерева.Строки;
		ИдентификаторВДереве    = СтрокаДерева.ИдентификаторСтроки;
	КонецЕсли;
	
	Если ЕстьКолонкаХешСуммаНормализации = Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ХешСуммаНормализации") Тогда
		ЕстьКолонкаХешСуммаНормализации = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		ГруппировкаОбъемноСортовогоУчетаПоGTIN = Перечисления["ПрочиеЗоныПересчетаПродукцииИСМП"]["ГруппировкаОбъемноСортовогоУчетаПоGTIN"];
	Иначе
		ГруппировкаОбъемноСортовогоУчетаПоGTIN = Неопределено;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтрокиДерева Цикл
		
		Если ЕстьКолонкаХешСуммаНормализации = Неопределено Тогда
			ЕстьКолонкаХешСуммаНормализации = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПодчиненнаяСтрока, "ХешСуммаНормализации");
		КонецЕсли;
		
		Если ЕстьКолонкаСтатусПроверки
			И ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки)
			Или (ГруппировкаОбъемноСортовогоУчетаПоGTIN <> Неопределено
				И ПодчиненнаяСтрока.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN) Тогда
			
			Если ВключаяПодчиненные Тогда
				РассчитатьХешСуммыУпаковки(ПодчиненнаяСтрока, ТаблицаХешСумм, ВключаяПодчиненные, ЕстьКолонкаСтатусПроверки, ЕстьКолонкаХешСуммаНормализации, ИмяПоляКоличество);
			КонецЕсли;
			
			ЗначениеДляРасчета = ПодчиненнаяСтрока.ХешСумма;
			Если Не ЗначениеЗаполнено(ЗначениеДляРасчета) Тогда
				СтрокаДерева.ХешСумма = "";
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если ЕстьКолонкаХешСуммаНормализации И ЗначениеЗаполнено(ПодчиненнаяСтрока.ХешСуммаНормализации) Тогда
				ЗначениеДляРасчета = ПодчиненнаяСтрока.ХешСуммаНормализации;
			Иначе
				ЗначениеДляРасчета = ПодчиненнаяСтрока.Штрихкод;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеДляРасчета) Тогда
			ДанныеДляРасчетаХешСуммы.Добавить(ЗначениеДляРасчета);
		КонецЕсли;

	КонецЦикла;
	
	Если ИмяПоляКоличество <> Неопределено
		И ДанныеДляРасчетаХешСуммы.Количество() = 0 Тогда
		
		Если ЕстьКолонкаХешСуммаНормализации = Неопределено Тогда
			ЕстьКолонкаХешСуммаНормализации = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ХешСуммаНормализации");
		КонецЕсли;
		
		Если ЕстьКолонкаХешСуммаНормализации = Истина
			И ЗначениеЗаполнено(СтрокаДерева.ХешСуммаНормализации) Тогда
			ЗначениеШтрихкода = СтрокаДерева.ХешСуммаНормализации;
		Иначе
			ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			НоменклатураGUID   = СтрокаGUID(СтрокаДерева.Номенклатура);
			ХарактеристикаGUID = СтрокаGUID(СтрокаДерева.Характеристика);
			СерияGUID          = СтрокаGUID(СтрокаДерева.Серия);
			
			Количество = СтрокаДерева.Количество;
			Если Количество = 0
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "КоличествоПоДаннымИБ") Тогда
				Количество = СтрокаДерева.КоличествоПоДаннымИБ;
			КонецЕсли;
			
			// Количество - в том числе Вес,
			// КоличествоПотребительскихУпаковок содержится в самом штрихкоде
			ДанныеДляРасчетаХешСуммы.Добавить(
			СтрШаблон("%1|%2|%3|%4|%5",
				ЗначениеШтрихкода,
				Формат(Количество, "ЧГ=0;"),
				НоменклатураGUID, ХарактеристикаGUID, СерияGUID));
			
		Иначе
			
			ДанныеДляРасчетаХешСуммы.Добавить(
				СтрШаблон("%1|%2",
					ЗначениеШтрихкода,
					Формат(СтрокаДерева[ИмяПоляКоличество], "ЧГ=0;")));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
		Или (ГруппировкаОбъемноСортовогоУчетаПоGTIN <> Неопределено
			И СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN) Тогда
		
		СтрокаДерева.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
		
		СтрокаТаблицыХешСуммы = ТаблицаХешСумм.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыХешСуммы, СтрокаДерева);
		СтрокаТаблицыХешСуммы.ИдентификаторВДереве = ИдентификаторВДереве;
		Если ИмяПоляКоличество = "КоличествоПодчиненныхПотребительскихУпаковок" Тогда
			СтрокаТаблицыХешСуммы.СодержимоеОтсутствует = (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхОтсутствует);
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаХешСумм() Экспорт

	ТаблицаХешСумм = Новый ТаблицаЗначений;
	ТаблицаХешСумм.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаХешСумм.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаХешСумм.Колонки.Добавить("ХешСуммаНормализации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("ВидУпаковки"); // Для ОСУ
	ТаблицаХешСумм.Колонки.Добавить("ТипУпаковки"); // Для ОСУ
	ТаблицаХешСумм.Колонки.Добавить("СодержимоеОтсутствует", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаХешСумм;

КонецФункции

#КонецОбласти

#Область Перемаркировка

// Возвращает таблицу для перемаркировки продукции
//
// Параметры:
//  ТаблицаХешСумм - ТаблицаЗначений - Таблица хеш сумм
//  ШтрихкодИДанныеУпаковки - Соответствие - исходящий параметр
// Возвращаемое значение:
//  См. ПустаяТаблицаПеремаркировки
Функция ТаблицаПеремаркировки(ТаблицаХешСумм, ШтрихкодИДанныеУпаковки = Неопределено) Экспорт
	
	ТаблицаПеремаркировки = ПустаяТаблицаПеремаркировки();
	Если ТаблицаХешСумм.Количество() = 0 Тогда
		Возврат ТаблицаПеремаркировки;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(ТаблицаХешСумм,,, Ложь);
	
	ШтрихкодИДанныеУпаковки = Новый Соответствие;
	Для Каждого ДанныеУпаковки Из ШтрихкодыУпаковок Цикл
		ШтрихкодИДанныеУпаковки[ДанныеУпаковки.Штрихкод] = ДанныеУпаковки;
	КонецЦикла;
	
	Для Каждого СтрокаХешСуммы Из ТаблицаХешСумм Цикл
		
		СтрокаПеремаркировки = ТаблицаПеремаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПеремаркировки, СтрокаХешСуммы);
		
		ДанныеУпаковки = ШтрихкодИДанныеУпаковки[СтрокаХешСуммы.Штрихкод];
		
		Если ДанныеУпаковки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПеремаркировки.ПустаяУпаковка = ПустаяСтрока(ДанныеУпаковки.ХешСумма);
		Если СтрокаХешСуммы.ХешСумма = ДанныеУпаковки.ХешСумма
			И ПустаяСтрока(СтрокаХешСуммы.ХешСумма) Тогда
			СтрокаПеремаркировки.ТребуетсяПеремаркировка = (СтрокаХешСуммы.СодержимоеОтсутствует
				И (ДанныеУпаковки.Количество <> 0 Или ДанныеУпаковки.КоличествоПотребительскихУпаковок <> 0));
		Иначе
			СтрокаПеремаркировки.ТребуетсяПеремаркировка = (СтрокаХешСуммы.ХешСумма <> ДанныеУпаковки.ХешСумма);
		КонецЕсли;


		Если СтрокаПеремаркировки.ТребуетсяПеремаркировка Тогда
			СтрокаПеремаркировки.ШтрихкодУпаковки = ДанныеУпаковки.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПеремаркировки;
	
КонецФункции

Процедура ОбработататьТаблицуПеремаркировкиСУчетомДетализации(Форма, ТаблицаПеремаркировки, ШтрихкодИДанныеУпаковки) Экспорт

	ШтрихкодыДляПерепроверки = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаПеремаркировки Цикл

		Если СтрокаТЧ.ТребуетсяПеремаркировка Тогда
			ШтрихкодыДляПерепроверки.Добавить(СтрокаТЧ.ШтрихкодУпаковки);
		КонецЕсли;

	КонецЦикла;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("ИмяКолонкиКоличествоПотребительскихУпаковок", "КоличествоПодчиненныхПотребительскихУпаковок");

	Если Форма.ПараметрыСканирования <> Неопределено
		И ШтрихкодыДляПерепроверки.Количество() Тогда

		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ШтрихкодыДляПерепроверки, Форма.ПараметрыСканирования);

		Индекс = Новый Соответствие;
		Для Каждого СтрокаДерева Из ВложенныеШтрихкодыУпаковок.ДеревоУпаковок.Строки Цикл
			ПроиндексироватьВложенныеШтрихкодыУпаковок(СтрокаДерева, Индекс);
		КонецЦикла;

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ШтрихкодИДанныеУпаковки",    ШтрихкодИДанныеУпаковки);
		ПараметрыПоиска.Вставить("ТаблицаПеремаркировки",      ТаблицаПеремаркировки);
		ПараметрыПоиска.Вставить("ВложенныеШтрихкодыУпаковок", ВложенныеШтрихкодыУпаковок);
		ПараметрыПоиска.Вставить("Индекс",                     Индекс);

		СнятьПризнакТребуетсяПеремаркировкаЕслиОтличаетсяТолькоДетализация(Форма.ДеревоМаркированнойПродукции, ПараметрыПоиска);

	КонецЕсли;

КонецПроцедуры

Процедура ПроиндексироватьВложенныеШтрихкодыУпаковок(СтрокаДерева, Индекс)

	Индекс.Вставить(СтрокаДерева.ШтрихкодУпаковки, СтрокаДерева);

	Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл

		ПроиндексироватьВложенныеШтрихкодыУпаковок(ВложеннаяСтрокаДерева, Индекс);

	КонецЦикла;

КонецПроцедуры

Процедура СнятьПризнакТребуетсяПеремаркировкаЕслиОтличаетсяТолькоДетализация(СтрокиДереваМаркированнойПродукции, ПараметрыПоиска)

	Если ТипЗнч(СтрокиДереваМаркированнойПродукции) = Тип("ДанныеФормыДерево")
		Или ТипЗнч(СтрокиДереваМаркированнойПродукции) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтрокиДереваМаркированнойПродукцииЭлементы = СтрокиДереваМаркированнойПродукции.ПолучитьЭлементы()
	ИначеЕсли ТипЗнч(СтрокиДереваМаркированнойПродукции) = Тип("Массив") Тогда
		СтрокиДереваМаркированнойПродукцииЭлементы = СтрокиДереваМаркированнойПродукции;
	Иначе
		СтрокиДереваМаркированнойПродукцииЭлементы = СтрокиДереваМаркированнойПродукции.Строки;
	КонецЕсли;

	Для Каждого СтрокаДереваМаркированнойПродукции Из СтрокиДереваМаркированнойПродукцииЭлементы Цикл

		СнятьПризнакТребуетсяПеремаркировкаЕслиОтличаетсяТолькоДетализация(СтрокаДереваМаркированнойПродукции, ПараметрыПоиска);

		Если ТипЗнч(СтрокаДереваМаркированнойПродукции) = Тип("ДанныеФормыЭлементДерева") Тогда
			ИдентификаторВДереве = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
			СтрокаДереваМаркированнойПродукцииЭлементы = СтрокаДереваМаркированнойПродукции.ПолучитьЭлементы();
		Иначе
			ИдентификаторВДереве = СтрокаДереваМаркированнойПродукции.ИдентификаторСтроки;
			СтрокаДереваМаркированнойПродукцииЭлементы = СтрокаДереваМаркированнойПродукции.Строки;
		КонецЕсли;

		СтрокаТаблицыПеремаркировки = ПараметрыПоиска.ТаблицаПеремаркировки.Найти(ИдентификаторВДереве, "ИдентификаторВДереве");
		Если СтрокаТаблицыПеремаркировки <> Неопределено
			И СтрокаТаблицыПеремаркировки.ТребуетсяПеремаркировка Тогда

			СтрокаДерева = ПараметрыПоиска.Индекс[СтрокаТаблицыПеремаркировки.ШтрихкодУпаковки];
			Если СтрокаДерева <> Неопределено Тогда

				КоличествоСтрокВДереве = СтрокаДерева.Строки.Количество();
				КоличествоСтрокВДеревеМаркированнойПродукции = СтрокаДереваМаркированнойПродукцииЭлементы.Количество();

				КоличествоОтсутствует = 0;
				Для Каждого ВложеннаяСтрокаДереваМаркированнойПродукции Из СтрокаДереваМаркированнойПродукцииЭлементы Цикл
					Если ВложеннаяСтрокаДереваМаркированнойПродукции.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
						КоличествоОтсутствует = КоличествоОтсутствует + 1;
					КонецЕсли;
				КонецЦикла;

				Если (КоличествоСтрокВДереве = 0
					Или КоличествоСтрокВДеревеМаркированнойПродукции = 0)
					И КоличествоОтсутствует = 0 Тогда
					// Разница в детализации
					СтрокаТаблицыПеремаркировки.ТребуетсяПеремаркировка = Ложь;
				ИначеЕсли КоличествоСтрокВДереве = (КоличествоСтрокВДеревеМаркированнойПродукции - КоличествоОтсутствует) Тогда

					ТребуетсяАнализВложенныхСтрок = Истина;
					ШтрихкодыУпаковокВложенныхСтрокДерева                       = Новый Массив;
					ШтрихкодыУпаковокВложенныхСтрокДереваМаркированнойПродукции = Новый Массив;

					Для Каждого ВложеннаяСтрокаДереваМаркированнойПродукции Из СтрокаДереваМаркированнойПродукцииЭлементы Цикл

						Если ВложеннаяСтрокаДереваМаркированнойПродукции.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
							Продолжить;
						КонецЕсли;

						ДанныеУпаковки = ПараметрыПоиска.ШтрихкодИДанныеУпаковки[ВложеннаяСтрокаДереваМаркированнойПродукции.Штрихкод];
						Если ДанныеУпаковки <> Неопределено Тогда
							ШтрихкодыУпаковокВложенныхСтрокДереваМаркированнойПродукции.Добавить(ДанныеУпаковки.Ссылка);
						Иначе
							ТребуетсяАнализВложенныхСтрок = Ложь;
							Прервать;
						КонецЕсли;

					КонецЦикла;

					Если ТребуетсяАнализВложенныхСтрок Тогда

						Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
							ШтрихкодыУпаковокВложенныхСтрокДерева.Добавить(ВложеннаяСтрокаДерева.ШтрихкодУпаковки);
						КонецЦикла;

						СпискиЗначенийИдентичны = ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(
							ШтрихкодыУпаковокВложенныхСтрокДерева,
							ШтрихкодыУпаковокВложенныхСтрокДереваМаркированнойПродукции);
						Если СпискиЗначенийИдентичны Тогда
							// Разница в детализации
							СтрокаТаблицыПеремаркировки.ТребуетсяПеремаркировка = Ложь;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Пустая таблица перемаркировки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица перемаркировки:
// * ИдентификаторВДереве - Число - Идентификатор в дереве
// * ТребуетсяПеремаркировка - Булево - Признак необходимости перемаркировки
// * ПустаяУпаковка - Булево - Признак пустой упаковки
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - Штрихкод упаковки
Функция ПустаяТаблицаПеремаркировки() Экспорт
	
	ТаблицаПеремаркировки = Новый ТаблицаЗначений;
	ТаблицаПеремаркировки.Колонки.Добавить("ИдентификаторВДереве",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаПеремаркировки.Колонки.Добавить("ТребуетсяПеремаркировка", Новый ОписаниеТипов("Булево"));
	ТаблицаПеремаркировки.Колонки.Добавить("ПустаяУпаковка",          Новый ОписаниеТипов("Булево"));
	ТаблицаПеремаркировки.Колонки.Добавить("ШтрихкодУпаковки");

	Возврат ТаблицаПеремаркировки;
	
КонецФункции

#КонецОбласти

Функция ИмяКнопкиИКоманды(Сценарий, ВидПродукции = Неопределено, ВозобновлениеПроверки = Ложь) Экспорт
	
	Индекс = "";
	Если ВидПродукции <> Неопределено Тогда
		Индекс = ОбщегоНазначенияИСКлиентСервер.ИндексВидаПродукцииИС(ВидПродукции);
	КонецЕсли;
	
	Суффикс = Формат(Сценарий, "ЧЦ=1; ЧН=0;") + "_";
	Если ВозобновлениеПроверки Тогда
		Возврат "ВозобновитьПроверкуПродукцииГосИС" + Суффикс + Индекс;
	Иначе
		Возврат "ПодобратьИПроверитьПродукциюГосИС" + Суффикс + Индекс;
	КонецЕсли;
	
КонецФункции

// Преобразовать несериализуемые значения.
// 
// Параметры:
//  ПроверяемыеДанные - Структура - Проверяемые данные:
//   * МаркированныеТовары - ТаблицаЗначений - маркированные товары для проверки,
//   * ДеревоУпаковок - ДеревоЗначений - упаковки для проверки.
Процедура ПреобразоватьНесериализуемыеЗначения(ПроверяемыеДанные) Экспорт
	
	Если Не ПроверяемыеДанные.Свойство("МаркированныеТовары") Тогда
		Возврат;
	КонецЕсли;
	
	Дерево  = ПроверяемыеДанные.ДеревоУпаковок;
	Таблица = ПроверяемыеДанные.МаркированныеТовары;
	
	ИменаКолонокДерева = Новый Массив;
	
	Для Каждого КолонкаДерева Из Дерево.Колонки Цикл
		ИменаКолонокДерева.Добавить(КолонкаДерева.Имя);
	КонецЦикла;
	
	ИменаКолонокДерева = СтрСоединить(ИменаКолонокДерева, ",");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗначенияСтрокиДерева = Новый Структура(ИменаКолонокДерева);
		ЗаполнитьЗначенияСвойств(ЗначенияСтрокиДерева, СтрокаТаблицы.СтрокаДерева);
		СтрокаТаблицы.СтрокаДерева = ЗначенияСтрокиДерева;
		СтрокаТаблицы.УпаковкаВерхнегоУровня = Неопределено; //не используется при загрузке
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСоСтатусамиПроверкиПодбораСтрокСлужебный

Процедура ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧасть, Настройки)
	
	ВсеМаркируемые  = Настройки.ВсеМаркируемые;
	ИспользоватьОСУ = Настройки.ИспользоватьОСУ;
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ВсеМаркируемые Или СтрокаТабличнойЧасти.МаркируемаяПродукция Тогда
			Если ИспользоватьОСУ И СтрокаТабличнойЧасти.АвтоматическийОСУИС Тогда
				СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 4;
			Иначе
				СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьКешШтрихкодамиБезИдентификаторов(ШтрихкодУпаковкиБезИдентификатора, ВложенныеШтрихкоды, ДанныеШтрихкодовУпаковокГосИС, ШтрихкодыУпаковокИсходнаяТаблица)
	
	Для Каждого СтрокаТаблицы Из ВложенныеШтрихкоды Цикл
		Расшифровка = ШтрихкодыУпаковокИсходнаяТаблица.Найти(СтрокаТаблицы.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		Если Расшифровка = Неопределено Тогда
			ДополнитьКешШтрихкодамиБезИдентификаторов(ШтрихкодУпаковкиБезИдентификатора, СтрокаТаблицы.Строки, ДанныеШтрихкодовУпаковокГосИС, ШтрихкодыУпаковокИсходнаяТаблица);
		Иначе
			Для Каждого СтрокаКеша Из ДанныеШтрихкодовУпаковокГосИС Цикл
				СтрокаКеша.ШтрихкодыУпаковок.Вставить(ШтрихкодУпаковкиБезИдентификатора);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция СтрокаGUID(Ссылка)

	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

#Область РаботаСДобавленнымиРеквизитами

	Процедура ОбновитьВидПодменю(Форма, Сценарий)
		
		ГруппаПроверкаИПодборПродукцииГосИС = Форма.Элементы[ИмяКнопкиИКоманды(Сценарий)];
		
		КоличествоВидимыхКнопок = 0;
		Для Каждого ЭлементФормы Из ГруппаПроверкаИПодборПродукцииГосИС.ПодчиненныеЭлементы Цикл
			Если ЭлементФормы.Видимость И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
				КоличествоВидимыхКнопок = КоличествоВидимыхКнопок + 1;
			КонецЕсли;
		КонецЦикла;
		
		ГруппаВозобновлениеПроверкиГосИС = Форма.Элементы.Найти(ИмяКнопкиИКоманды(Сценарий,,Истина));
		Если ГруппаВозобновлениеПроверкиГосИС<>Неопределено Тогда
			Для Каждого ЭлементФормы Из ГруппаВозобновлениеПроверкиГосИС.ПодчиненныеЭлементы Цикл
				Если ЭлементФормы.Видимость И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
					КоличествоВидимыхКнопок = КоличествоВидимыхКнопок + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Форма.Элементы["КоманднаяПанельПроверкаИПодборПродукцииГосИС" + Сценарий].Видимость = КоличествоВидимыхКнопок;
		
		Если КоличествоВидимыхКнопок = 1 Тогда
			ГруппаПроверкаИПодборПродукцииГосИС.Вид = ВидГруппыФормы.ГруппаКнопок;
		Иначе
			ГруппаПроверкаИПодборПродукцииГосИС.Вид = ВидГруппыФормы.Подменю;
			ГруппаПроверкаИПодборПродукцииГосИС.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяКнопкиИКоманды(Сценарий,, Истина))<>Неопределено Тогда
			Форма.Элементы[ИмяКнопкиИКоманды(Сценарий,, Истина)].Вид = ГруппаПроверкаИПодборПродукцииГосИС.Вид;
		КонецЕсли;
		
	КонецПроцедуры

Процедура ОбновитьОбщийСтатусПодменю(Форма)
	
	Сценарии = Новый Массив;
	Для Каждого СтрокаТаблицы Из Форма.СтатусыПроверкиПодбораГосИС Цикл
		Если Сценарии.Найти(СтрокаТаблицы.Сценарий) = Неопределено Тогда
			Сценарии.Добавить(СтрокаТаблицы.Сценарий);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Сценарий Из Сценарии Цикл
		
		ОбщийСтатус = Неопределено;
		ОбщееОписание = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из Форма.СтатусыПроверкиПодбораГосИС Цикл
			
			Если Не СтрокаТаблицы.Видимость Тогда
				Продолжить;
			ИначеЕсли СтрокаТаблицы.Сценарий <> Сценарий Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
				ОбщееОписание.Добавить(СтрокаТаблицы.Описание);
			КонецЕсли;
			
			Индекс = Перечисления.СтатусыПроверкиИПодбораИС.Индекс(СтрокаТаблицы.Статус);
			Если ОбщийСтатус = Неопределено Тогда
				ОбщийСтатус = Индекс;
			Иначе
				ОбщийСтатус = Мин(ОбщийСтатус, Индекс);
			КонецЕсли;
		КонецЦикла;
	
		Если ОбщееОписание.Количество() Тогда
			Форма.Элементы["СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС" + Сценарий].Видимость = Истина;
			Форма.Элементы["НадписьПроверкаИПодборПродукцииГосИС" + Сценарий].Заголовок = СтрСоединить(ОбщееОписание, Символы.ПС);
		Иначе
			Форма.Элементы["СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС" + Сценарий].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
