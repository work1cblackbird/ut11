////////////////////////////////////////////////////////////////////////////////
// В модуле собраны процедуры и функции, которые вызываются при обращении к информационной базе
// из общего модуля "РабочееМестоРаботникаСклада", а также при обращении функций web-сервиса.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает число - количество документов-заданий доступных для выполнения работником склада.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад, для которого возвращается количество заданий,
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	ТипЗадания - Строка - тип складского задания,
//	Исполнители - Массив из СправочникСсылка.Пользователи - список исполнителей заданий.
//
// Возвращаемое значение:
//	Число - количество доступных для выполнения заданий заданного вида.
//
Функция КоличествоСкладскихЗаданийДляВыполнения(Склад, Помещение, ТипЗадания, Исполнители) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ВидОперации = ВидОперацииОтбораРазмещения(ТипЗадания);
		РабочиеУчастки = РабочиеУчасткиИсполнителя(Склад, Помещение, Исполнители);
		
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		Запрос.УстановитьПараметр("РабочиеУчастки", РабочиеУчастки);
		Запрос.УстановитьПараметр("ОтборПоРабочимУчасткам", РабочиеУчастки.Количество() > 1);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.ВидОперации = &ВидОперации
		|	И ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)
		|	И ОтборРазмещениеТоваров.Исполнитель В (&Исполнители)
		|	И ОтборРазмещениеТоваров.Склад = &Склад
		|	И ОтборРазмещениеТоваров.Помещение = &Помещение
		|	И (НЕ &ОтборПоРабочимУчасткам
		|		ИЛИ ОтборРазмещениеТоваров.РабочийУчасток В(&РабочиеУчастки))";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетТоваров
		|ГДЕ
		|	ПересчетТоваров.Проведен
		|	И ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Подготовлено)
		|	И ПересчетТоваров.Исполнитель В(&Исполнители)
		|	И ПересчетТоваров.Склад = &Склад
		|	И ПересчетТоваров.Помещение = &Помещение";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Проведен
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
		|	И ПриходныйОрдерНаТовары.Склад = &Склад
		|	И ПриходныйОрдерНаТовары.Помещение = &Помещение
		|	И ПриходныйОрдерНаТовары.Исполнитель В(&Исполнители)";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
		|	И РасходныйОрдерНаТовары.Склад = &Склад
		|	И РасходныйОрдерНаТовары.Помещение = &Помещение
		|	И РасходныйОрдерНаТовары.Контролер В(&Исполнители)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоДокументов;
	
КонецФункции

// Возвращает таблицу заданий, выбранного типа операции, указанных пользователей.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад,
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада,
//	ТипЗадания - Строка - тип складских заданий,
//	Исполнитель - Массив из СправочникСсылка.Пользователи - список исполнителей заданий.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//	*Ссылка - ДокументСсылка - складской документ
//	*Номер - Строка - номер документа
//	*Исполнитель - СправочникСсылка.Пользователи
//	*НаименованиеИсполнителя - Строка
//	*НомерИсполнителя - Число 
//	*ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*НаименованиеЕдиницыИзмерения - Строка
//
Функция ТаблицаЗаданий(Склад, Помещение, ТипЗадания, Исполнитель) Экспорт
	
	ТекстЗапроса = "";
	ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	Если ТипЗадания = "Отбор" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОтборРазмещениеТоваров.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерИсполнителя,
		|	ОтборРазмещениеТоваров.Номер КАК Номер,
		|	ОтборРазмещениеТоваров.Исполнитель КАК Исполнитель,
		|	ЕСТЬNULL(ОтборРазмещениеТоваров.Исполнитель.Представление, """") КАК НаименованиеИсполнителя,
		|	ОтборРазмещениеТоваров.ВесОтбор КАК Вес,
		|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(&ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)
		|	И ОтборРазмещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Отбор)
		|	И ОтборРазмещениеТоваров.Склад = &Склад
		|	И ОтборРазмещениеТоваров.Помещение = &Помещение
		|	И ОтборРазмещениеТоваров.Исполнитель В(&Исполнитель)
		|	И (НЕ &ОтборПоРабочимУчасткам
		|		ИЛИ ОтборРазмещениеТоваров.РабочийУчасток В(&РабочиеУчастки))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсполнителя";
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОтборРазмещениеТоваров.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерИсполнителя,
		|	ОтборРазмещениеТоваров.Номер КАК Номер,
		|	ОтборРазмещениеТоваров.Исполнитель КАК Исполнитель,
		|	ЕСТЬNULL(ОтборРазмещениеТоваров.Исполнитель.Представление, """") КАК НаименованиеИсполнителя,
		|	ОтборРазмещениеТоваров.ВесОтбор КАК Вес,
		|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(&ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)
		|	И ОтборРазмещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение)
		|	И ОтборРазмещениеТоваров.Склад = &Склад
		|	И ОтборРазмещениеТоваров.Помещение = &Помещение
		|	И ОтборРазмещениеТоваров.Исполнитель В(&Исполнитель)
		|	И (НЕ &ОтборПоРабочимУчасткам
		|		ИЛИ ОтборРазмещениеТоваров.РабочийУчасток В(&РабочиеУчастки))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсполнителя";
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка КАК Ссылка,
		|	ОтборРазмещениеТоваров.Номер КАК Номер,
		|	ВЫБОР
		|		КОГДА ОтборРазмещениеТоваров.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерИсполнителя,
		|	ОтборРазмещениеТоваров.Исполнитель КАК Исполнитель,
		|	ЕСТЬNULL(ОтборРазмещениеТоваров.Исполнитель.Представление, """") КАК НаименованиеИсполнителя,
		|	ОтборРазмещениеТоваров.ВесРазмещение КАК Вес,
		|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(&ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)
		|	И ОтборРазмещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение)
		|	И ОтборРазмещениеТоваров.Склад = &Склад
		|	И ОтборРазмещениеТоваров.Помещение = &Помещение
		|	И ОтборРазмещениеТоваров.Исполнитель В(&Исполнитель)
		|	И (НЕ &ОтборПоРабочимУчасткам
		|		ИЛИ ОтборРазмещениеТоваров.РабочийУчасток В(&РабочиеУчастки))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсполнителя";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПересчетТоваров.Ссылка КАК Ссылка,
		|	ПересчетТоваров.Номер КАК Номер,
		|	ВЫБОР
		|		КОГДА ПересчетТоваров.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерИсполнителя,
		|	ПересчетТоваров.Исполнитель КАК Исполнитель,
		|	ЕСТЬNULL(ПересчетТоваров.Исполнитель.Представление, """") КАК НаименованиеИсполнителя
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетТоваров
		|ГДЕ
		|	ПересчетТоваров.Проведен
		|	И ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Подготовлено)
		|	И ПересчетТоваров.Склад = &Склад
		|	И ПересчетТоваров.Помещение = &Помещение
		|	И ПересчетТоваров.Исполнитель В(&Исполнитель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсполнителя";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
		|	РасходныйОрдерНаТовары.Номер КАК Номер,
		|	ВЫБОР
		|		КОГДА РасходныйОрдерНаТовары.Контролер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерИсполнителя,
		|	РасходныйОрдерНаТовары.Контролер КАК Исполнитель,
		|	ЕСТЬNULL(РасходныйОрдерНаТовары.Контролер.Представление, """") КАК НаименованиеИсполнителя,
		|	РасходныйОрдерНаТовары.ПорядокДоставки КАК ПорядокДоставки
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
		|	И РасходныйОрдерНаТовары.Склад = &Склад
		|	И РасходныйОрдерНаТовары.Помещение = &Помещение
		|	И РасходныйОрдерНаТовары.Контролер В(&Исполнитель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсполнителя";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
		|	ПриходныйОрдерНаТовары.Номер КАК Номер,
		|	ВЫБОР
		|		КОГДА ПриходныйОрдерНаТовары.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерИсполнителя,
		|	ПриходныйОрдерНаТовары.Исполнитель КАК Исполнитель,
		|	ЕСТЬNULL(ПриходныйОрдерНаТовары.Исполнитель.Представление, """") КАК НаименованиеИсполнителя
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Проведен
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
		|	И ПриходныйОрдерНаТовары.Склад = &Склад
		|	И ПриходныйОрдерНаТовары.Помещение = &Помещение
		|	И ПриходныйОрдерНаТовары.Исполнитель В(&Исполнитель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсполнителя";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		РабочиеУчастки = РабочиеУчасткиИсполнителя(Склад, Помещение, Исполнитель);
		
		Запрос.УстановитьПараметр("РабочиеУчастки", РабочиеУчастки);
		Запрос.УстановитьПараметр("ОтборПоРабочимУчасткам", РабочиеУчастки.Количество() > 1);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗаданий = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаЗаданий;
	
КонецФункции

// Возвращает структуру со служебной информацией о задании.
// Функция вызывается при сканировании штрихкода складского задания.
//
// Параметры:
//	Штрихкод - Строка - штрихкод задания.
//	Склад - СправочникСсылка.Склады - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания,
//	ТипЗадания - Строка - тип складского задания.
//	РежимВыбораОперации - Булево - Истина, если сканирование задания выполнено из меню "Выбор операции".
//									Ложь, если сканирование задания выполнено из меню "Главное меню" формы рабочего места.
//	ГлубинаДетализацииМаркировки - Число - глубина детализация информации по маркированным упаковкам:
//				0 - без детализации
//				999 - без ограничения вложенности
//
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ПараметрыЗаданияПоШтрихкоду(Штрихкод, Склад, Помещение, Пользователь, ТипЗадания = "",
		РежимВыбораОперации = Ложь, ГлубинаДетализацииМаркировки = 0) Экспорт
	
	Менеджеры = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТипЗадания) Тогда
		РежимВыбораОперации = Истина;
	КонецЕсли;
	
	ПараметрыЗадания = ПараметрыЗадания();
	
	Если РежимВыбораОперации
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Менеджеры.Добавить(Документы.РасходныйОрдерНаТовары.ПустаяСсылка());
		
	КонецЕсли;
	
	Если РежимВыбораОперации
		Или ТипЗадания = "Приемка" Тогда
		
		Менеджеры.Добавить(Документы.ПриходныйОрдерНаТовары.ПустаяСсылка());
		
	КонецЕсли;
	
	Если РежимВыбораОперации
		Или ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		Менеджеры.Добавить(Документы.ОтборРазмещениеТоваров.ПустаяСсылка());
		
	КонецЕсли;
	
	Если РежимВыбораОперации
		Или ТипЗадания = "Пересчет" Тогда
		
		Менеджеры.Добавить(Документы.ПересчетТоваров.ПустаяСсылка());
		
	КонецЕсли;
	
	МассивСсылок = ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.Ссылка В(&МассивСсылок)
		|	И &ОтборПоВидуОперации";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"И &ОтборПоВидуОперации", 
			"И ОтборРазмещениеТоваров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтбораРазмещенияТоваров." + ТипЗадания +")");
		
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = Нстр("ru = 'Не удалось найти складское задание по штрихкоду.'");
		
		Возврат ПараметрыЗадания;
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("Задание", МассивСсылок[0]);
	Задание = ПараметрыЗадания.Задание;
	
	Если РежимВыбораОперации Тогда
		Если ТипЗнч(Задание) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТипЗадания = "Приемка";
		ИначеЕсли ТипЗнч(Задание) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
			ТипЗадания = "Пересчет";
		ИначеЕсли ТипЗнч(Задание) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ТипЗадания = "ПроверкаОтбора";
		ИначеЕсли ТипЗнч(Задание) = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
			ТипЗадания = ТипЗадания(Задание);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗадания.ТипЗадания = ТипЗадания;
	УстановитьПараметрыЗадания(Задание, ПараметрыЗадания);
	
	Если ПринятиеСкладскогоЗаданияВРаботуДоступно(Склад, Помещение, Пользователь, ПараметрыЗадания) Тогда
		Возврат ПараметрыЗаданияПриПринятииВРаботу(Задание, Пользователь, ПараметрыЗадания);
	Иначе
		Возврат ПараметрыЗадания;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру со служебной информацией о задании.
// Функция вызывается при выборе задания из табличной части "Задания" формы обработки "РабочееМестоРаботникаСклада".
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задание,
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания
//	ПараметрыЗадания - см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ПараметрыЗаданияПриПринятииВРаботу(Задание, Пользователь, ПараметрыЗадания = Неопределено) Экспорт
	
	Если ПараметрыЗадания = Неопределено Тогда
		ТипЗадания = ТипЗадания(Задание);
		
		ПараметрыЗадания = ПараметрыЗадания();
		ПараметрыЗадания.ТипЗадания = ТипЗадания;
	КонецЕсли;
	
	ПараметрыЗадания.ИсходныйИсполнитель = ИсходныйИсполнительСкладскогоЗадания(Задание, ПараметрыЗадания.ТипЗадания);
	ПараметрыЗадания.ПорядокОбработки = ПорядокОбработкиТоваровСкладскогоЗадания(Задание, ПараметрыЗадания.ТипЗадания,
		Пользователь);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задание);
	Исключение
		
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
			|Произошла ошибка при попытке блокировки задания.'");
		
		Возврат ПараметрыЗадания;
		
	КонецПопытки;
	
	УстановитьТоварыЗадания(Задание, ПараметрыЗадания);
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		Возврат ПараметрыЗадания;
	КонецЕсли;
	
	УстановитьСтатусЗаданияВРаботе(Задание, ПараметрыЗадания, Пользователь);
	
	Если ПараметрыЗадания.КодВозврата = 0 Тогда
		
		Если ТипЗадания = "Пересчет" Тогда
			ТекстСообщения = НСтр("ru = 'При взятии складского задания в работу произошла ошибка. 
				|Скорее всего, в задании присутствуют уже заблокированные ячейки или ячейки, по которым ведется отбор/размещение.
				|Попробуйте взять задание в работу позже или обратитесь к администратору.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'При взятии складского задания в работу произошла ошибка. 
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		ПараметрыЗадания.ТекстСообщения = ТекстСообщения;
		
		Возврат ПараметрыЗадания;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗадания.Склад) Тогда
		УстановитьПараметрыЗадания(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерий(Задание, ПараметрыЗадания);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Возвращает таблицу ячеек зон приемки и отгрузки по указанному складу.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад,
//	Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица зон приемки и отгрузки:
//		* Ячейка - СправочникСсылка.СкладскиеЯчейки - адрес складской ячейки.
//		* КодЯчейки - Строка - строковое представление складской ячейки.
//		* ТипЯчейки - ПеречислениеСсылка.ТипыСкладскихЯчеек - тип складской ячейки.
//		* Склад - СправочникСсылка.Склады - склад, в котором расположена ячейка приемки (отгрузки).
//		* НаименованиеСклада - Строка - имя склада.
//
Функция ЗоныПриемкиОтгрузки(Склад, Помещение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка КАК Ячейка,
	|	СкладскиеЯчейки.Код КАК КодЯчейки,
	|	СкладскиеЯчейки.ТипСкладскойЯчейки КАК ТипЯчейки,
	|	СкладскиеЯчейки.Владелец КАК Склад,
	|	ЕСТЬNULL(СкладскиеЯчейки.Владелец.Представление, """") КАК НаименованиеСклада
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	НЕ СкладскиеЯчейки.ЭтоГруппа
	|	И НЕ СкладскиеЯчейки.ПометкаУдаления
	|	И СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = &Помещение";
	
	Результат = Запрос.Выполнить();
	ЗоныПриемкиОтгрузки = Результат.Выгрузить();
	
	Возврат ЗоныПриемкиОтгрузки;
	
КонецФункции

// Выполняет поиск ячейки по штрихкоду.
//
// Параметры:
//	Склад           - СправочникСсылка.Склады - склад.
//	Помещение       - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	ШтрихкодЯчейки  - Строка - штрихкод ячейки.
//	ЭтоСканирование - Булево - Истина, если значение штрихкода адреса ячейки получено через ТСД.
//
// Возвращаемое значение:
//	Структура - параметры ячейки, которые содержит поля:
//		* КодВозврата - Число - 1, если ячейка найдена. 0, Если ячейка не найдена.
//		* Ячейка - СправочникСсылка.СкладскиеЯчейки - найденная ячейка.
//		* ТипЯчейки - ПеречислениеСсылка.ТипыСкладскихЯчеек - тип складской ячейки.
//		* КодЯчейки - Строка- код ячейки.
//		* ШтрихкодЯчейки - Строка - штрихкод ячейки.
//
Функция НайтиЯчейкуПоШтрихкоду(Склад, Помещение, ШтрихкодЯчейки, ЭтоСканирование = Ложь) Экспорт
	
	МенеджерыОбъектов = Новый Массив();
	МенеджерыОбъектов.Добавить(Справочники.СкладскиеЯчейки.ПустаяСсылка());
	
	Если ЭтоСканирование Тогда
		МассивСсылок = ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(ШтрихкодЯчейки,
			МенеджерыОбъектов);
	Иначе
		МассивСсылок = Новый Массив;
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат НайтиЯчейкуПоКоду(Склад, Помещение, ШтрихкодЯчейки);
	Иначе
		
		ПараметрыЯчейки = Новый Структура;
		РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивСсылок[0], "Код, ТипСкладскойЯчейки, ЭтоГруппа");
		
		Если РеквизитыЯчейки.ЭтоГруппа Тогда
			ПараметрыЯчейки.Вставить("КодВозврата", 0);
			Возврат ПараметрыЯчейки;
		Иначе
			ПараметрыЯчейки.Вставить("КодВозврата", 1);
			ПараметрыЯчейки.Вставить("Ячейка", МассивСсылок[0]);
			ПараметрыЯчейки.Вставить("ТипЯчейки", РеквизитыЯчейки.ТипСкладскойЯчейки);
			ПараметрыЯчейки.Вставить("КодЯчейки", РеквизитыЯчейки.Код);
			ПараметрыЯчейки.Вставить("ШтрихкодЯчейки", ШтрихкодЯчейки);
			
			Возврат ПараметрыЯчейки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Выполняет поиск ячейки по коду.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад.
//	Помещение - СправочникСсылка - помещение склада.
//	КодЯчейки - Строка - код ячейки.
//
// Возвращаемое значение:
//	Структура - параметры ячейки, которые содержит поля:
//		* КодВозврата - Число - 1, если ячейка найдена. 0, Если ячейка не найдена.
//		* Ячейка - СправочникСсылка.СкладскиеЯчейки - найденная ячейка.
//		* ТипЯчейки - ПеречислениеСсылка.ТипыСкладскихЯчеек - тип складской ячейки.
//		* КодЯчейки - Строка- код ячейки.
//		* ШтрихкодЯчейки - Строка - штрихкод ячейки.
//
Функция НайтиЯчейкуПоКоду(Склад, Помещение, КодЯчейки) Экспорт
	
	ПараметрыЯчейки = Новый Структура("КодВозврата", 1);
	ПараметрыЯчейки.Вставить("Ячейка", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	ПараметрыЯчейки.Вставить("ТипЯчейки", Перечисления.ТипыСкладскихЯчеек.ПустаяСсылка());
	ПараметрыЯчейки.Вставить("КодЯчейки", КодЯчейки);
	ПараметрыЯчейки.Вставить("ШтрихкодЯчейки", "");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Код", КодЯчейки);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкладскиеЯчейки.Ссылка КАК Ячейка,
	|	СкладскиеЯчейки.ТипСкладскойЯчейки,
	|	СкладскиеЯчейки.Код КАК КодЯчейки,
	|	СкладскиеЯчейки.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Код = &Код
	|	И СкладскиеЯчейки.Помещение = &Помещение";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЯчеек = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаЯчеек.Количество() = 0 Тогда
		ПараметрыЯчейки.КодВозврата = 0;
		Возврат ПараметрыЯчейки;
	Иначе
		
		Если ТаблицаЯчеек[0].ЭтоГруппа Тогда
			ПараметрыЯчейки.КодВозврата = 0;
			Возврат ПараметрыЯчейки;
		Иначе
			ПараметрыЯчейки.Ячейка = ТаблицаЯчеек[0].Ячейка;
			ПараметрыЯчейки.ТипЯчейки = ТаблицаЯчеек[0].ТипСкладскойЯчейки;
			ПараметрыЯчейки.ШтрихкодЯчейки = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(ТаблицаЯчеек[0].Ячейка);
			Возврат ПараметрыЯчейки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - ячейка.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица товаров, хранящихся в ячейке, содержит колонки:
//		* Номенклатура - СправочникСсылка.Номенклатура - товар.
//		* НаименованиеНоменклатуры - Строка - наименование товара.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* НаименованиеХарактеристики - Строка - наименование характеристика товара.
//		* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара;.
//		* НаименованиеУпаковки - Строка - наименование упаковки товара.
//		* Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//		* НаименованиеСерии - Строка - представление серии товара.
//		* Количество - Число - количество товара.
//
Функция ТоварыЯчейки(Склад, Помещение, Ячейка) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.Представление, """") КАК НаименованиеУпаковки,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Серия.Представление, """") КАК НаименованиеСерии,
	|	ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения.Представление, """") КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка.Владелец = &Склад
	|				И Ячейка.Помещение = &Помещение
	|				И Ячейка = &Ячейка) КАК ТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ТоварыВЯчейкахОстатки.Упаковка";
	
	Результат = Запрос.Выполнить();
	ТоварыЯчейки = Результат.Выгрузить();
	
	Возврат ТоварыЯчейки;
	
КонецФункции

// Помечает ячейку к пересчету в регистре сведений "СостояниеЯчеекКПересчету".
//
// Параметры:
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - ячейка.
//
Процедура ОтметитьЯчейкуКПересчету(Ячейка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияПересчетовЯчеек.Ячейка,
	|	СостоянияПересчетовЯчеек.Состояние,
	|	СостоянияПересчетовЯчеек.ДатаПоследнегоПересчета
	|ИЗ
	|	РегистрСведений.СостоянияПересчетовЯчеек КАК СостоянияПересчетовЯчеек
	|ГДЕ
	|	СостоянияПересчетовЯчеек.Ячейка = &Ячейка
	|	И СостоянияПересчетовЯчеек.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПересчетовЯчеек.ПересчетВыполнен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СостояниеЯчейкиКПересчету = РегистрыСведений.СостоянияПересчетовЯчеек.СоздатьНаборЗаписей();
	СостояниеЯчейкиКПересчету.Отбор.Ячейка.Установить(Ячейка);
	СостояниеЯчейкиКПересчету.Прочитать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Выборка.Количество() = 0 Тогда
		Если СостояниеЯчейкиКПересчету.Количество() = 0 Тогда
			НовоеСостояние = СостояниеЯчейкиКПересчету.Добавить();
			
			НовоеСостояние.Ячейка = Ячейка;
			НовоеСостояние.Состояние = Перечисления.СостоянияПересчетовЯчеек.ТребуетсяПересчет;
			
			СостояниеЯчейкиКПересчету.Записать();
		КонецЕсли;
	Иначе
		Для Каждого ЗаписьНабора Из СостояниеЯчейкиКПересчету Цикл
			ЗаписьНабора.Ячейка = Ячейка;
			ЗаписьНабора.Состояние = Перечисления.СостоянияПересчетовЯчеек.ТребуетсяПересчет;
		КонецЦикла;
		
		СостояниеЯчейкиКПересчету.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск записи в регистре сведений "ШтрихкодыНоменклатуры" по указанному штрихкоду.
//
// Параметры:
//	Штрихкод - Строка - штрихкод товара.
//	ИскатьУпаковочныеЛисты - Булево - Истина - осуществляется поиск по штрихкоду среди упаковочных листов, Ложь - нет.
//
// Возвращаемое значение:
//	см. ПараметрыТовара
//
Функция НайтиТоварИлиУпаковочныйЛист(Штрихкод, ИскатьУпаковочныеЛисты) Экспорт
	
	ПараметрыТовара = ПараметрыТовара();
	Штрихкод = ВРег(СокрЛП(Штрихкод));
	ПараметрыТовара.Штрихкод = Штрихкод;
	
	// Получить данные по штрихкоду 
	МассивШтрихкодов = Новый Массив();
	МассивШтрихкодов.Добавить(Штрихкод);
	
	КешированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КешированныеЗначения, МассивШтрихкодов);
	
	Если ТоварНеНайден(Штрихкод, КешированныеЗначения.Штрихкоды)
		И ИскатьУпаковочныеЛисты Тогда
		
		Документы.УпаковочныйЛист.ДополнитьДанныеПоШтрихкодам(КешированныеЗначения, МассивШтрихкодов);
		
	КонецЕсли;
		
	Если ТоварНеНайден(Штрихкод, КешированныеЗначения.Штрихкоды) Тогда
		ПараметрыТовара.КодВозврата = 0;
		ПараметрыТовара.ТипОшибки = "НеНайденТовар";
		ПараметрыТовара.ТекстСообщения = НСтр("ru = 'Неизвестный штрихкод.'");
		
		Возврат ПараметрыТовара;
	КонецЕсли;
	
	ДанныеПоШтрихкодуТовара = КешированныеЗначения.Штрихкоды.Получить(Штрихкод);
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеПоШтрихкодуТовара);
	
	Если ЗначениеЗаполнено(ДанныеПоШтрихкодуТовара.УпаковочныйЛист) Тогда
		ПараметрыТовара.ЭтоУпаковочныйЛист = Истина;
		Возврат ПараметрыТовара;
	КонецЕсли;
	
	// Получить дополнительные сведения о номенклатуре товара.
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПоШтрихкодуТовара.Номенклатура,
		"Наименование, ВидНоменклатуры, Описание, Артикул, ВесЕдиницаИзмерения, ОбъемЕдиницаИзмерения");
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, РеквизитыНоменклатуры);
	
	ПараметрыТовара.АртикулНоменклатуры = РеквизитыНоменклатуры.Артикул;
	ПараметрыТовара.ОписаниеНоменклатуры = РеквизитыНоменклатуры.Описание;
	ПараметрыТовара.НаименованиеНоменклатуры = РеквизитыНоменклатуры.Наименование;
	
	ПараметрыТовара.ЕдиницаИзмеренияВеса = РеквизитыНоменклатуры.ВесЕдиницаИзмерения;
	ПараметрыТовара.ЕдиницаИзмеренияОбъема = РеквизитыНоменклатуры.ОбъемЕдиницаИзмерения;
	
	ПараметрыСерий = Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(ПараметрыТовара.ВидНоменклатуры);
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, ПараметрыСерий);
	
	РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыТовара.ЕдиницаИзмерения,
		"ТипИзмеряемойВеличины");
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, РеквизитыЕдиницыИзмерения);
	
	Если ПараметрыТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		Возврат ПараметрыТовара; // у тары нет упаковок
	КонецЕсли;
	
	// Получить дополнительные сведения об упаковке товара.
	Если Не ЗначениеЗаполнено(ДанныеПоШтрихкодуТовара.Упаковка) Тогда
		
		// Варианты:
		// - несколько единичных упаковок - это ошибка, непонятно что делать;
		// - одна единичная упаковка.
		Если ДанныеПоШтрихкодуТовара.НесколькоЕдиничныхУпаковок Тогда
			ПараметрыТовара.КодВозврата = 0;
			ПараметрыТовара.ТипОшибки = "УпаковкаНеПривязанаКШтрихкоду";
			ПараметрыТовара.ТекстСообщения = НСтр("ru = 'У товара не указана упаковка.'");
			
			Возврат ПараметрыТовара;
		Иначе
			// Если единичная упаковка одна, то надо проверить что она вообще есть.
			Если Не ЗначениеЗаполнено(ДанныеПоШтрихкодуТовара.ЕдиничнаяУпаковка)
				И Не (ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес
					Или ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем
					Или ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина
					Или ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь) Тогда
				
				ПараметрыТовара.КодВозврата = 0;
				ПараметрыТовара.ТипОшибки = "УпаковкаНеПривязанаКШтрихкоду";
				ПараметрыТовара.ТекстСообщения = НСтр("ru = 'У товара не указана упаковка.'");
				
				Возврат ПараметрыТовара;
				
			ИначеЕсли (ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес)
				Или (ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем)
				Или (ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина)
				Или (ПараметрыТовара.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь) Тогда
				
				УпаковкаТовара = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				
			Иначе
				УпаковкаТовара = ДанныеПоШтрихкодуТовара.ЕдиничнаяУпаковка;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		УпаковкаТовара = ДанныеПоШтрихкодуТовара.Упаковка;
	КонецЕсли;
	
	// Получить значения реквизитов упаковки.
	РеквизитыУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(УпаковкаТовара,
		ДанныеПоШтрихкодуТовара.Номенклатура,, Ложь);
	
	ПараметрыТовара.Упаковка = УпаковкаТовара;
	ПараметрыТовара.ВесУпаковки = РеквизитыУпаковки.Вес;
	ПараметрыТовара.ОбъемУпаковки = РеквизитыУпаковки.Объем;
	ПараметрыТовара.Коэффициент = РеквизитыУпаковки.Коэффициент;
	
	// Получить значения коэффициентов единиц измерения веса и объема номенклатуры.
	ПараметрыТовара.КоэффициентЕдиницыИзмеренияВеса = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ПараметрыТовара.ЕдиницаИзмеренияВеса,
		ПараметрыТовара.Номенклатура);
	ПараметрыТовара.КоэффициентЕдиницыИзмеренияОбъема = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(
		ПараметрыТовара.ЕдиницаИзмеренияОбъема, ПараметрыТовара.Номенклатура);
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Возвращает структуру со служебной информацией о товаре.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	ПараметрыТовара - Структура - данные товара.
//
// Возвращаемое значение:
//	Структура:
//		* КартинкаТовара - ДвоичныеДанные,Неопределено - картинка товара.
//		* ОстаткиТовара - ТаблицаЗначений - данные об остатках товаров в ячейках на складе:
//		**Номенклатура - СправочникСсылка.Номенклатура
//		**НаименованиеНоменклатуры - Строка
//		**Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//		**НаименованиеХарактеристики - Строка
//		**Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//		**НаименованиеУпаковки - Строка
//		**Серия - СправочникСсылка.СерииНоменклатуры
//		**НаименованиеСерии - Строка
//		**Количество - Число
//		**Ячейка - СправочникСсылка.СкладскиеЯчейки
//		**КодЯчейки - Строка
//
Функция ИнформацияОТоваре(Склад, Помещение, ПараметрыТовара) Экспорт
	
	ИнформацияОТоваре = Новый Структура("КартинкаТовара, ОстаткиТовара");
	
	// Если есть картинка товара, то вывести ее.
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыТовара.Номенклатура, "ФайлКартинки");
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		ПараметрыКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки);
		Картинка = ПолучитьИзВременногоХранилища(ПараметрыКартинки.СсылкаНаДвоичныеДанныеФайла);
		
		ИнформацияОТоваре.КартинкаТовара = Картинка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Номенклатура.Представление КАК НаименованиеНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|		ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Упаковка.Представление ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения.Представление, """")
	|		ИНАЧЕ ТоварыВЯчейкахОстатки.Упаковка.Представление
	|	КОНЕЦ КАК НаименованиеУпаковки,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ячейка.Код, """") КАК КодЯчейки,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Серия.Представление, """") КАК НаименованиеСерии,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка.Владелец = &Склад
	|				И Ячейка.Помещение = &Помещение
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Упаковка = &Упаковка) КАК ТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ячейка,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток";
		
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыТовара.Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ПараметрыТовара.Упаковка);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыТовара.Характеристика);
	
	Результат = Запрос.Выполнить();
	ОстаткиТовара = Результат.Выгрузить();	// ТаблицаЗначений
	
	ИнформацияОТоваре.ОстаткиТовара = ОстаткиТовара;
	
	Возврат ИнформацияОТоваре;
	
КонецФункции

// Выполняет поиск указанного упаковочного листа среди отсканированных прежде.
//
// Параметры:
//	УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - ссылка на упаковочный лист
//	ОтсканированныеУпаковочныеЛисты - Массив из ДокументСсылка.УпаковочныйЛист - 
//			массив ссылок на отсканированные прежде упаковочные листы.
//
// Возвращаемое значение:
//	Булево - Истина, если упаковочный лист найден среди прежде отсканированных.
//
Функция УпаковочныйЛистОтсканирован(УпаковочныйЛист, ОтсканированныеУпаковочныеЛисты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	Документ.УпаковочныйЛист.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.ЭтоУпаковочныйЛист
	|	И Товары.УпаковочныйЛист В (&ОтсканированныеУпаковочныеЛисты)";
	
	Запрос.УстановитьПараметр("Ссылка", УпаковочныйЛист);
	Запрос.УстановитьПараметр("ОтсканированныеУпаковочныеЛисты", ОтсканированныеУпаковочныеЛисты);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет поиск серии номенклатуры по заданному номеру и сроку годности.
//
// Параметры:
//	НомерСерии - Строка - номер серии.
//	СрокГодностиСерии - Дата - срок годности серии.
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры.
//	ПараметрыУказанияСерии - Структура - параметры указания серии.
//	ЭтоСканирование - Булево - Истина, если штрихкод серии номенклатуры введен вручную.
//
// Возвращаемое значение:
//	см. ПараметрыСерии
//
Функция НайтиСерию(НомерСерии, СрокГодностиСерии, ВидНоменклатуры, ПараметрыУказанияСерии,
		ЭтоСканирование = Неопределено) Экспорт
	
	Перем СрокГодности;
	
	НомерСерии = СокрЛП(НомерСерии);
	ПараметрыСерии = ПараметрыСерии();
	
	Если ЭтоСканирование <> Неопределено Тогда
		
		Если ЭтоСканирование Тогда
			
			Если ЗначениеЗаполнено(СрокГодностиСерии) Тогда
				
				Если Не СрокГодностиСерииКорректный(ПараметрыУказанияСерии, СрокГодностиСерии, СрокГодности) Тогда
					ПараметрыСерии.КодВозврата = 0;
					ПараметрыСерии.ТекстСообщения = НСтр("ru = 'Ошибка: отсканирована не та серия.'");
					Возврат ПараметрыСерии;
				КонецЕсли;
				
				ПараметрыСерии.НомерСерии = НомерСерии;
				ПараметрыСерии.ГоденДо = СрокГодности;
				
			Иначе
				ПараметрыСерии.НомерСерии = НомерСерии;
				ПараметрыСерии.ГоденДо = Дата("00010101");
			КонецЕсли;
			
		Иначе
			
			ИнформацияОСерии = ИнформацияОСерииИзШтрихкода(НомерСерии, ПараметрыУказанияСерии.ИспользоватьНомерСерии,
				ПараметрыУказанияСерии.ИспользоватьСрокГодностиСерии);
			
			Если ИнформацияОСерии.ЕстьОшибка Тогда
				ПараметрыСерии.КодВозврата = 0;
				ПараметрыСерии.ТекстСообщения = НСтр("ru = 'Ошибка: отсканирована не та серия.'");
				Возврат ПараметрыСерии;
			Иначе
				ПараметрыСерии.НомерСерии = ИнформацияОСерии.Номер;
				ПараметрыСерии.ГоденДо = ИнформацияОСерии.ГоденДо
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыСерии.НомерСерии = НомерСерии;
		ПараметрыСерии.ГоденДо = СрокГодностиСерии;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";
	
	// В зависимости от состава ключа серии, текст условия запроса будет различаться.
	Если ПараметрыУказанияСерии.ИспользоватьНомерСерии
		И Не ПараметрыУказанияСерии.ИспользоватьСрокГодностиСерии Тогда
		
		ТекстУсловия = "
		|И СерииНоменклатуры.Номер = &НомерСерии";
		
		Запрос.УстановитьПараметр("НомерСерии", ПараметрыСерии.НомерСерии);
		
	ИначеЕсли ПараметрыУказанияСерии.ИспользоватьНомерСерии 
		И ПараметрыУказанияСерии.ИспользоватьСрокГодностиСерии Тогда
		
		ТекстУсловия = "
		|И СерииНоменклатуры.Номер = &НомерСерии
		|И СерииНоменклатуры.ГоденДо = &ГоденДо";
		
		Запрос.УстановитьПараметр("НомерСерии", ПараметрыСерии.НомерСерии);
		Запрос.УстановитьПараметр("ГоденДо", ПараметрыСерии.ГоденДо);
		
	ИначеЕсли Не ПараметрыУказанияСерии.ИспользоватьНомерСерии 
		И ПараметрыУказанияСерии.ИспользоватьСрокГодностиСерии Тогда
		
		ТекстУсловия = "
		|И СерииНоменклатуры.ГоденДо = &ГоденДо";
		
		Запрос.УстановитьПараметр("ГоденДо", ПараметрыСерии.ГоденДо);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + ТекстУсловия;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ПараметрыСерии.КодВозврата = 0;
		ПараметрыСерии.ТекстСообщения = НСтр("ru = 'Ошибка: отсканирована не та серия.'");
		Возврат ПараметрыСерии;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ПараметрыСерии.Серия = Выборка.Серия;
	
	Возврат ПараметрыСерии;
	
КонецФункции

// Извлекает из штрихкода информацию о номере и сроке годности.
// Работает только для штрихкодов, сгенерированных обработкой печати штрихкодов и номеров
// серий, сгенерированных формой регистрации серий.
//
// Параметры:
//	ШтрихкодСерии - Строка - штрихкод, из которого нужно извлечь информацию,
//	ИспользоватьНомерСерии - Булево - признак, что для серии, чей штрихкод передан, используется номер,
//	ИспользоватьСрокГодностиСерии - Булево - признак, что для серии, чей штрихкод передан, используется номер.
//
// Возвращаемое значение:
//	Структура - информация о серии товара штрихкода, содержит следующие поля:
//		* Номер - Строка - номер, извлеченный из штрихкода, если номера у серии нет - пустая строка.
//		* ГоденДо - Дата - дата срока годности, если срока годности у серии нет - пустая дата.
//
Функция ИнформацияОСерииИзШтрихкода(ШтрихкодСерии, ИспользоватьНомерСерии, ИспользоватьСрокГодностиСерии) Экспорт
	
	ИнформацияИзШтрихкодаСерии = НоменклатураКлиентСервер.ИнформацияОСерииИзШтрихкода(ШтрихкодСерии, 
		ИспользоватьНомерСерии, ИспользоватьСрокГодностиСерии);
	
	ПолучитьСообщенияПользователю(Истина);
	
	Возврат ИнформацияИзШтрихкодаСерии;
	
КонецФункции

// Подбирает назначение для товара.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад, в котором осуществляется поиск назначений для указанного товара.
//	Распоряжение - ДокументСсылка - ссылка документа распоряжения.
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - ячейка, в которой осуществляется поиск назначений для указанного товара.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//	ТоварыДокумента - ТаблицаЗначений - таблица товаров документа складского задания.
//	ПараметрыРежима - Структура - параметры режима работы рабочего места работника склада.
//
// Возвращаемое значение:
//	СправочникСсылка.Назначения - подобранное назначение для указанного товара.
//
Функция ПодобратьНазначение(Склад, Распоряжение, Ячейка, Товар, ТоварыДокумента, ПараметрыРежима) Экспорт
	
	Назначения = Назначения(Склад, Распоряжение, Ячейка, Товар, ТоварыДокумента, ПараметрыРежима, Истина);
	
	Если Назначения.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ТипХарактеристикиНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
		Назначения.Колонки.Добавить("Номенклатура", ТипНоменклатура);
		Назначения.Колонки.Добавить("Характеристика", ТипХарактеристикиНоменклатуры);
		
		Назначения.ЗаполнитьЗначения(Товар.Номенклатура, "Номенклатура");
		Назначения.ЗаполнитьЗначения(Товар.Характеристика, "Характеристика");
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(Отбор, Товар);
	
	МассивСтрок = ТоварыДокумента.НайтиСтроки(Отбор);
	
	ДанныеЕстьВТЧ = (МассивСтрок.Количество() > 0);
	
	Если ЗначениеЗаполнено(Товар.Упаковка) Тогда
		ДобавляемоеКоличество = Товар.Коэффициент;
	Иначе
		ДобавляемоеКоличество = 1;
	КонецЕсли;
	
	Назначение = ШтрихкодированиеНоменклатурыСервер.ПодобратьНазначение(Товар, Назначения, "Количество", МассивСтрок,
		ДобавляемоеКоличество, ДанныеЕстьВТЧ);
	
	Возврат Назначение;
	
КонецФункции

// Возвращает таблицу назначений, в соответствии с указанными параметрами.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад, в котором осуществляется поиск назначений для указанного товара.
//	Распоряжение - ДокументСсылка - ссылка документа распоряжения.
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - ячейка, в которой осуществляется поиск назначений для указанного товара.
//	Товар - см. РабочееМестоРаботникаСкладаСервер.Товар
//	ТоварыДокумента - ТаблицаЗначений - таблица товаров документа складского задания.
//	ПараметрыРежима - Структура - параметры режима работы рабочего места работника склада.
//	ДляАвтоподбора - Булево - Истина, если назначение подбирается автоматически.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица назначений.
//
Функция Назначения(Склад, Распоряжение, Ячейка, Товар, ТоварыДокумента, ПараметрыРежима, ДляАвтоподбора = Ложь) Экспорт
	
	Задание = ПараметрыРежима.Задание;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЗонаПриемки = ПараметрыРежима.ЗонаПриемки;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	
	Запрос = Новый Запрос();
	
	ПараметрыТекстаЗапроса = Справочники.Назначения.ПараметрыФормированияЗапросаДоступныхНазначений();
	
	ПараметрыТекстаЗапроса.УчестьУжеПодобранные = Истина;
	ПараметрыТекстаЗапроса.УпорядочитьПоДатеЗаказаНазначения = Истина;
	
	Если ТипЗадания = "ПроверкаОтбора"
		И Не ДляАвтоподбора Тогда
		Запрос.Текст = Обработки.ПроверкаКоличестваТоваровВДокументе.ТекстЗапросаДоступныхНазначений(ПараметрыТекстаЗапроса);
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			Если ДляАвтоподбора Тогда
				ПараметрыТекстаЗапроса.РежимВыбора = "ПоОстаткамВЯчейке";
				Запрос.УстановитьПараметр("Ячейка", Ячейка);
			Иначе
				// Выгрузим все необеспеченные назначения
				Запрос.УстановитьПараметр("ВключатьЗаказыДавальцев", Истина);
			КонецЕсли;
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			ПараметрыТекстаЗапроса.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
			Запрос.УстановитьПараметр("Ячейка", ЗонаПриемки);
			
			Если Не ЗначениеЗаполнено(Задание) Тогда
				Задание = Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ТипЗадания = "Отбор" Тогда
			ПараметрыТекстаЗапроса.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
			Запрос.УстановитьПараметр("Ячейка", Ячейка);
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			Если Не ОтборОтсканирован Тогда
				ПараметрыТекстаЗапроса.РежимВыбора = "ОстаткиВЯчейке";
				Запрос.УстановитьПараметр("Ячейка", Ячейка);
			КонецЕсли;
			
			ПараметрыТекстаЗапроса.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
		Иначе
			Запрос.УстановитьПараметр("ПоВсемРаспоряжениям", Истина);
		КонецЕсли;
		
		Запрос.Текст =
			ОбщегоНазначения.МенеджерОбъектаПоСсылке(Задание).ТекстЗапросаДоступныхНазначений(ПараметрыТекстаЗапроса);
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Товар.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Товар.Характеристика);
	
	Запрос.УстановитьПараметр("ЭтоРабота", Ложь);
	Запрос.УстановитьПараметр("Назначение", Товар.Назначение);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ТоварыДокумента", ТоварыДокумента);
	
	Запрос.УстановитьПараметр("Регистратор", Задание);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если (ТипЗадания = "Пересчет"
			Или ТипЗадания = "ПроверкаОтбора")
		И ДляАвтоподбора Тогда
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			СтрокаРезультата.Остаток = СтрокаРезультата.Потребность;
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ТипЗадания = "Пересчет"
			Или ТипЗадания = "ПроверкаОтбора")
		И Не ДляАвтоподбора Тогда
		// Реквизит "НазначенияОстаток" не выводится
	Иначе
		УдалятьПустыеСтроки = ЭтоНаборТоваров
								И (ТипЗадания = "Размещение");
		
		ПересчитатьОстаткиПоНазначениям(Результат, Товар, УдалятьПустыеСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при завершении отбора товаров при выполнении задания перемещения.
// При перемещении может быть отобрана только часть товаров, при размещении товаров
// должна выдаваться для обработки только отобранная часть товаров.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задания,
//	ТоварыДляСканирования - ТаблицаЗначений - таблица товаров, соответствующая табличной части выполняемого задания
//											и содержащая информацию об отсканированных товарах.
//											В операциях на пересчет хранится исходная информация о товарах документа "ПересчетТоваров".
//	ТЗОтсканированныеТовары - ТаблицаЗначений - таблица товаров, содержащая информацию об отсканированных товарах статус
//												указания серий которых имеет значения 'ПоФактуОтбора'.
//
// Возвращаемое значение:
//	см. ПараметрыЗадания
//
Функция ОбработатьОтсканированныеТоварыОтбораПеремещения(Задание, ТоварыДляСканирования, ТЗОтсканированныеТовары) Экспорт
	
	ТипЗадания = ТипЗадания(Задание);
	
	ПараметрыЗадания = ПараметрыЗадания();
	ПараметрыЗадания.ТипЗадания = ТипЗадания;
	
	УстановитьТоварыЗадания(Задание, ПараметрыЗадания);
	ЗаполнитьСтатусыУказанияСерий(Задание, ПараметрыЗадания);
	
	ТоварыОтбор = ПараметрыЗадания.ТоварыОтбор;
	
	МассивТоваров = Новый Массив;
	МассивТоваровЗадания = ТоварыОтбор.ВыгрузитьКолонку("Номенклатура");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТоваров, МассивТоваровЗадания, Истина);
	
	// Устанавливаем значения реквизита "СтатусыУказанияСерий"
	Для Каждого ТоварЗадания Из МассивТоваров Цикл
		
		Отбор = Новый Структура("Номенклатура", ТоварЗадания);
		
		МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
		СтатусУказанияСерий = МассивСтрок[0].СтатусУказанияСерий;
		
		МассивСтрокОтбора = ТоварыОтбор.НайтиСтроки(Отбор);
		Для Каждого СтрокаОтбора Из МассивСтрокОтбора Цикл
			СтрокаОтбора.СтатусУказанияСерий = СтатусУказанияСерий;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТЗОтсканированныеТовары <> Неопределено Тогда
		ТЗОтсканированныеТовары.Свернуть("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Коэффициент, Серия,
			|НомерСерии, ГоденДо", "КоличествоУпаковокОтсканировано");
	КонецЕсли;
	
	Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, НомерСерии, ГоденДо, Упаковка");
	ОтборБезСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
	
	Для каждого СтрокаТоварыДляСканирования Из ТоварыДляСканирования Цикл
		
		КоличествоУпаковокОтсканировано = СтрокаТоварыДляСканирования.КоличествоУпаковокОтсканировано;
		
		Если СтрокаТоварыДляСканирования.Коэффициент <> 0 Тогда
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТоварыДляСканирования.Коэффициент;
		Иначе
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
		КонецЕсли;
		
		Если КоличествоУпаковокОтсканировано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТоварыДляСканирования);
		ЗаполнитьЗначенияСвойств(ОтборБезСерии, СтрокаТоварыДляСканирования);
		
		МассивСтрокТоварыОтбор = ТоварыОтбор.НайтиСтроки(Отбор);
		Если МассивСтрокТоварыОтбор.Количество() = 0 Тогда
			
			НоваяСтрокаТоварыОтбор = ТоварыОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыОтбор, СтрокаТоварыДляСканирования);
			
			НоваяСтрокаТоварыОтбор.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
			НоваяСтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
			НоваяСтрокаТоварыОтбор.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
			
			НоваяСтрокаТоварыОтбор.Количество = КоличествоОтсканировано;
			НоваяСтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
			
			Продолжить;
			
		Иначе
			СтрокаТоварыОтбор = МассивСтрокТоварыОтбор[0];
		КонецЕсли;
		
		Если СерииУказываютсяПоФактуОтбора(СтрокаТоварыДляСканирования.СтатусУказанияСерий)
			И (ТЗОтсканированныеТовары <> Неопределено)Тогда
			
			МассивСтрокОтсканированныеТовары = ТЗОтсканированныеТовары.НайтиСтроки(ОтборБезСерии);
			
			Если МассивСтрокОтсканированныеТовары.Количество() > 0 Тогда
				ПерваяСтрока = МассивСтрокОтсканированныеТовары[0];
			КонецЕсли;
			
			Для каждого СтрокаОтсканированныеТовары Из МассивСтрокОтсканированныеТовары Цикл
				
				Если СтрокаОтсканированныеТовары = ПерваяСтрока Тогда
					
					КоличествоСканирования = ПерваяСтрока.КоличествоУпаковокОтсканировано;
					Если МассивСтрокОтсканированныеТовары.Количество() > 0 Тогда
						
						КоличествоСканирования = 0;
						Для Каждого СтрокаТовараПоСерии Из МассивСтрокОтсканированныеТовары Цикл
							КоличествоСканирования = КоличествоСканирования + СтрокаТовараПоСерии.КоличествоУпаковокОтсканировано;
						КонецЦикла;
						
					КонецЕсли;
					
					КоличествоСканирования = КоличествоСканирования - ПерваяСтрока.КоличествоУпаковокОтсканировано;
					КоличествоУпаковокОтсканировано = СтрокаТоварыДляСканирования.КоличествоУпаковокОтсканировано
						- КоличествоСканирования;
					
					Если СтрокаТоварыДляСканирования.Коэффициент <> 0 Тогда
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТоварыДляСканирования.Коэффициент;
					Иначе
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
					КонецЕсли;
					
				Иначе
					КоличествоУпаковокОтсканировано = СтрокаОтсканированныеТовары.КоличествоУпаковокОтсканировано;
					
					Если СтрокаТоварыДляСканирования.Коэффициент <> 0 Тогда
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТоварыДляСканирования.Коэффициент;
					Иначе
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрокаТоварыОтбор = ТоварыОтбор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыОтбор, СтрокаТоварыОтбор);
				
				НоваяСтрокаТоварыОтбор.Серия = СтрокаОтсканированныеТовары.Серия;
				НоваяСтрокаТоварыОтбор.НомерСерии = СтрокаОтсканированныеТовары.НомерСерии;
				НоваяСтрокаТоварыОтбор.ГоденДо = СтрокаОтсканированныеТовары.ГоденДо;
				
				НоваяСтрокаТоварыОтбор.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
				НоваяСтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
				НоваяСтрокаТоварыОтбор.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
				
				НоваяСтрокаТоварыОтбор.Количество = КоличествоОтсканировано;
				НоваяСтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
				НоваяСтрокаТоварыОтбор.СтатусУказанияСерий = СтрокаТоварыДляСканирования.СтатусУказанияСерий;
				
			КонецЦикла;
			
			ОсталосьУпаковокОтсканировать = СтрокаТоварыДляСканирования.КоличествоУпаковок
				- СтрокаТоварыДляСканирования.КоличествоУпаковокОтсканировано;
			
			Если СтрокаТоварыДляСканирования.Коэффициент <> 0 Тогда
				ОсталосьОтсканировать = ОсталосьУпаковокОтсканировать * СтрокаТоварыДляСканирования.Коэффициент;
			Иначе
				ОсталосьОтсканировать = ОсталосьУпаковокОтсканировать;
			КонецЕсли;
			
			Если ОсталосьУпаковокОтсканировать <= 0 Тогда
				ТоварыОтбор.Удалить(СтрокаТоварыОтбор);
			Иначе
				СтрокаТоварыОтбор.КоличествоУпаковок = ОсталосьУпаковокОтсканировать;
				СтрокаТоварыОтбор.Количество = ОсталосьОтсканировать;
			КонецЕсли;
			
		Иначе
			
			Если СерииУказываютсяПоФактуОтбора(СтрокаТоварыДляСканирования.СтатусУказанияСерий) Тогда
				
				Если ЗначениеЗаполнено(СтрокаТоварыДляСканирования.НомерСерии)
					Или ЗначениеЗаполнено(СтрокаТоварыДляСканирования.ГоденДо) Тогда
					
					// Добавить строку отобранных товаров.
					НоваяСтрокаТоварыОтбор = ТоварыОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыОтбор, СтрокаТоварыОтбор);
					
					НоваяСтрокаТоварыОтбор.НомерСерии = СтрокаТоварыДляСканирования.НомерСерии;
					НоваяСтрокаТоварыОтбор.ГоденДо = СтрокаТоварыДляСканирования.ГоденДо;
					
					НоваяСтрокаТоварыОтбор.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
					НоваяСтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
					НоваяСтрокаТоварыОтбор.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
					
					НоваяСтрокаТоварыОтбор.Количество = КоличествоОтсканировано;
					НоваяСтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
					НоваяСтрокаТоварыОтбор.СтатусУказанияСерий = СтрокаТоварыДляСканирования.СтатусУказанияСерий;
					
				Иначе
					СтрокаТоварыОтбор.Количество = СтрокаТоварыДляСканирования.КоличествоУпаковок *
						СтрокаТоварыДляСканирования.Коэффициент;
					СтрокаТоварыОтбор.КоличествоУпаковок = СтрокаТоварыДляСканирования.КоличествоУпаковок;
					СтрокаТоварыОтбор.КоличествоУпаковокВДокументе = СтрокаТоварыДляСканирования.КоличествоУпаковок;
				КонецЕсли;
			Иначе
				СтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
				СтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Количество", 0);
	МассивПустыхСтрок = ТоварыОтбор.НайтиСтроки(Отбор);
	
	Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
		ТоварыОтбор.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из ТоварыОтбор Цикл
		
		Если СерииУказываютсяПоФактуОтбора(СтрокаТоваров.СтатусУказанияСерий) Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТоваров.Серия)
				И (ЗначениеЗаполнено(СтрокаТоваров.НомерСерии)
					Или ЗначениеЗаполнено(СтрокаТоваров.ГоденДо)) Тогда
				
				ПараметрыУказанияСерии = Новый Структура("ИспользоватьНомерСерии, ИспользоватьСрокГодностиСерии,
					|ТочностьУказанияСрокаГодностиСерии");
				ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерии, СтрокаТоваров);
				
				ПараметрыСерии = НайтиСерию(СтрокаТоваров.НомерСерии, СтрокаТоваров.ГоденДо, СтрокаТоваров.ВидНоменклатуры,
					ПараметрыУказанияСерии);
				
				СтрокаТоваров.Серия = ПараметрыСерии.Серия;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект = Задание.ПолучитьОбъект();
	ДокументОбъект.ТоварыОтбор.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТоварыОтбор, ДокументОбъект.ТоварыОтбор);
	
	ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
	ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Отбор);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Задание = ДокументОбъект.Ссылка;
	ПараметрыЗадания.ТоварыОтбор = ТоварыОтбор;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Отменяет выполнение текущего складского задания, переводит в первоначальный статус.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задания,
//	ИсходныйИсполнитель - СправочникСсылка.Пользователи - исполнитель складского задания.
//	ТипЗадания - Строка - тип складских заданий.
//	ПараметрыЗадания - см. ПараметрыЗадания
//
// Возвращаемое значение:
//	см. ПараметрыЗадания
//
Функция ОтменитьВыполнениеЗадания(Задание, ИсходныйИсполнитель, ТипЗадания, ПараметрыЗадания = Неопределено) Экспорт
	
	Если ПараметрыЗадания = Неопределено Тогда
		ПараметрыЗадания = ПараметрыЗадания();
	КонецЕсли;
	
	УстановитьИсходныйСтатусСкладскогоЗадания(Задание, ТипЗадания, ПараметрыЗадания);
	
	Если Не (ТипЗадания = "Приемка") Тогда
		УстановитьИсходногоИсполнителяСкладскогоЗадания(Задание, ИсходныйИсполнитель, ПараметрыЗадания);
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет" Тогда
		УстановитьЗначениеБлокировкиЯчеекВЗаданииНаПересчет(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Задание);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Вызывается при завершении выполнения набора товаров для создания нового задания на размещение.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	ЗонаПриемки - СправочникСсылка.СкладскиеЯчейки - зона, из которой отобраны товары для размещения.
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания.
//	ОтсканированныеТовары - ТаблицаЗначений - таблица отобранных товаров для операции размещения.
//	ДЗОтсканированнаяТара - ДеревоЗначений - данные о таре отобранных товаров, которые поставляются в многооборотной таре.
//
// Возвращаемое значение:
//	см. ПараметрыЗадания
//
Функция ЗавершитьВыполнениеЗаданияНовоеРазмещение(Склад, Помещение, ЗонаПриемки, Пользователь, ОтсканированныеТовары,
	ДЗОтсканированнаяТара) Экспорт
	
	ПараметрыЗадания = ПараметрыЗадания();
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ДокументОбъект.ДатаНачалаВыполнения = ТекущаяДатаСеанса();
	ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.ЗонаПриемки = ЗонаПриемки;
	ДокументОбъект.Исполнитель = Пользователь;
	ДокументОбъект.Ответственный = Пользователь;
	ДокументОбъект.Склад = Склад;
	ДокументОбъект.Помещение = Помещение;
	
	Для каждого СтрокаТбл Из ОтсканированныеТовары Цикл
		
		Если СтрокаТбл.КоличествоУпаковокОтсканировано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоУпаковокОтсканировано = СтрокаТбл.КоличествоУпаковокОтсканировано;
		
		Если СтрокаТбл.Коэффициент <> 0 Тогда
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТбл.Коэффициент;
		Иначе
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.ТоварыРазмещение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТбл);
		
		НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
		НоваяСтрока.Количество = КоличествоОтсканировано;
		
	КонецЦикла;
	
	Если ДЗОтсканированнаяТара <> Неопределено Тогда
		
		// Если есть отсканированная тара, то добавить ее в таблицу отсканированных товаров.
		Для каждого СтрокаТовара Из ДЗОтсканированнаяТара.Строки Цикл
			
			Для каждого СтрокаТары Из СтрокаТовара.Строки Цикл
				
				Если СтрокаТары.КоличествоУпаковокОтсканировано = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДокументОбъект.ТоварыРазмещение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТары);
				
				НоваяСтрока.КоличествоУпаковок = СтрокаТары.КоличествоУпаковокОтсканировано;
				НоваяСтрока.Количество = СтрокаТары.КоличествоУпаковокОтсканировано;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.РазместитьТовары("ТоварыРазмещение");
	Исключение
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'При завершении выполнения подбора товаров произошла ошибка. Не удалось 
			|выполнить размещение товаров. Обратитесь к администратору.'");
		
		// Добавить запись об ошибке в журнал регистрации.
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При создании нового задания на размещение произошла ошибка. Описание ошибки: ""%1""'"), 
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при создании нового задания на размещение.'",
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			ДокументОбъект.Ссылка.Метаданные(),
			ДокументОбъект.Ссылка,
			КомментарийЖурнала,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецПопытки;
	
	Если ПараметрыЗадания.КодВозврата = 1 Тогда
		
		// Проверить, что во всех строках документа указаны ячейки.
		РазмещениеВыполнено = Истина;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.ТоварыРазмещение Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				РазмещениеВыполнено = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазмещениеВыполнено Тогда
			
			ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
			
			ПараметрыУказанияСерий.Отбор.ИмяТЧТовары = "ТоварыРазмещение";
			ПараметрыУказанияСерий.Отбор.ИмяТЧСерии = "ТоварыРазмещение";
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Отбор);
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПроведениеИзМРМРаботникаСклада", Истина);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПараметрыЗадания.КодВозврата = 0;
				ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'При завершении выполнения подбора товаров произошла ошибка. 
					|Не удалось выполнить размещение товаров. Обратитесь к администратору.'");
			КонецПопытки;
			
		Иначе
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось разместить товары по ячейкам.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗадания.КодВозврата = 1 Тогда
		ПараметрыЗадания.Вставить("Задание", ДокументОбъект.Ссылка);
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Конструктор параметров метода ЗавершитьВыполнениеСкладскогоЗадания().
// Возвращаемое значение:
//	Структура:
//	*Задание - ДокументСсылка,Неопределено - ссылка складского задания.
//	*ТЗОтсканированныеТовары - ДанныеФормыЭлементКоллекции,ТаблицаЗначений,Неопределено - таблица товаров, содержащая информацию
//		об отсканированных товарах статус указания серий которых имеет значения 'ПоФактуОтбора' в операциях отбора,
//		размещения и перемещения. В операциях пересчета и проверка отбора - хранятся данные об отсканированных товарах.
//	*ТоварыДляСканирования - ТаблицаЗначений,Неопределено - таблица товаров, соответствующая табличной части выполняемого задания
//		и содержащая информацию об отсканированных товарах в операциях отбора, размещения, перемещения и проверки отбора.
//		В операциях на пересчет хранится исходная информация о товарах документа "ПересчетТоваров".
//	*СканированныеЗначенияМарок - ТаблицаЗначений,Неопределено
//	*ЗонаПриемки - СправочникСсылка.СкладскиеЯчейки,Неопределено - зона, куда следует перенести отобранные товары, в случае отмены
//		выполнения задания на перемещения.
//	*ОтборОтсканирован - Булево - Истина - операция отбора выполнена в заданиях перемещения.
Функция НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Задание", Неопределено);
	Результат.Вставить("ТЗОтсканированныеТовары", Неопределено);
	Результат.Вставить("ТоварыДляСканирования", Неопределено);
	Результат.Вставить("СканированныеЗначенияМарок", Неопределено);
	Результат.Вставить("ЗонаПриемки", Неопределено);
	Результат.Вставить("ЗонаОтгрузки", Неопределено);
	Результат.Вставить("ОтборОтсканирован", Ложь);
	
	Возврат Результат;
	 
КонецФункции
	
// Завершает выполнение складского задания. При сканировании товаров - отсканированные товары
// переносятся в табличные части документов, при наборе - создаются новые складские задания.
// Устанавливаются нужные статусы у документов, выполняется проведение документов.
//
// Параметры:
//	Параметры - см. НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры
//	
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ЗавершитьВыполнениеСкладскогоЗадания(Параметры) Экспорт
	
	Задание = Параметры.Задание;
	ТЗОтсканированныеТовары = Параметры.ТЗОтсканированныеТовары;
	ТоварыДляСканирования = Параметры.ТоварыДляСканирования;
	СканированныеЗначенияМарок = Параметры.СканированныеЗначенияМарок;
	ЗонаПриемки = Параметры.ЗонаПриемки;
	ЗонаОтгрузки = Параметры.ЗонаОтгрузки;
	ОтборОтсканирован = Параметры.ОтборОтсканирован;
	
	
	ТипЗадания = ТипЗадания(Задание);
	ПараметрыЗадания = ПараметрыЗадания();
	ПараметрыЗадания.ТипЗадания = ТипЗадания;
	
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	МерныеЕдиницыИзмерения = МерныеЕдиницыИзмерения();
	ДопустимоеОтклонениеОтбираемыхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если ТЗОтсканированныеТовары <> Неопределено Тогда
		ТЗОтсканированныеТовары.Свернуть("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия, НомерСерии,
			|ГоденДо, Коэффициент, СтатусУказанияСерий", "КоличествоУпаковокОтсканировано");
	КонецЕсли;
	
	УстановитьТоварыЗадания(Задание, ПараметрыЗадания);
	ЗаполнитьСтатусыУказанияСерий(Задание, ПараметрыЗадания);
	
	Если ТипЗадания = "Отбор" Тогда
		
		ПараметрыЗадания.ТоварыОтбор.Очистить();
		
		ОтборУдаляемыхСтрок = Новый Структура("КоличествоУпаковок", 0);
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
		
		МассивУдаляемыхСтрок = ТоварыДляСканирования.НайтиСтроки(ОтборУдаляемыхСтрок);
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			ТоварыДляСканирования.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
			НоваяСтрока = ПараметрыЗадания.ТоварыОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСканирования);
			
			Если НоваяСтрока.Коэффициент <> 0 Тогда
				НоваяСтрока.Количество = СтрокаСканирования.КоличествоУпаковок * НоваяСтрока.Коэффициент;
			Иначе
				НоваяСтрока.Количество = СтрокаСканирования.КоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
			
			КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
			
			Если СтрокаСканирования.Коэффициент <> 0 Тогда
				КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
			Иначе
				КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
			КонецЕсли;
			
			Если КоличествоУпаковокОтсканировано = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаСканирования);
			
			НайденныеСтроки = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(Отбор);
			Строка = НайденныеСтроки[0];
			
			Если СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий)
				И (ТЗОтсканированныеТовары <> Неопределено) Тогда
				
				НайденныеСтрокиПоСериям = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
				Если НайденныеСтрокиПоСериям.Количество() > 0 Тогда
					ПерваяСтрока = НайденныеСтрокиПоСериям[0];
				КонецЕсли;
				
				ВсегоОтсканированоУпаковок = 0;
				
				Для каждого СтрокаСканированияПоСериям Из НайденныеСтрокиПоСериям Цикл
					
					Если СтрокаСканированияПоСериям = ПерваяСтрока Тогда
						
						КоличествоОтсканировано = ПерваяСтрока.КоличествоУпаковокОтсканировано;
						Если НайденныеСтрокиПоСериям.Количество() > 0 Тогда
							
							КоличествоОтсканировано = 0;
							Для Каждого СтрокаТовараПоСерии Из НайденныеСтрокиПоСериям Цикл
								КоличествоОтсканировано = КоличествоОтсканировано + СтрокаТовараПоСерии.КоличествоУпаковокОтсканировано;
							КонецЦикла;
							
						КонецЕсли;
						
						КоличествоОтсканировано = КоличествоОтсканировано - ПерваяСтрока.КоличествоУпаковокОтсканировано;
						
						КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано
							- КоличествоОтсканировано;
						
						Если СтрокаСканирования.Коэффициент <> 0 Тогда
							КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
						Иначе
							КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
						КонецЕсли;
						
					Иначе
						КоличествоУпаковокОтсканировано = СтрокаСканированияПоСериям.КоличествоУпаковокОтсканировано;
						
						Если СтрокаСканированияПоСериям.Коэффициент <> 0 Тогда
							КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканированияПоСериям.Коэффициент;
						Иначе
							КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока = ПараметрыЗадания.ТоварыОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					
					НоваяСтрока.НомерСерии = СтрокаСканированияПоСериям.НомерСерии;
					НоваяСтрока.ГоденДо = СтрокаСканированияПоСериям.ГоденДо;
					
					НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
					НоваяСтрока.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
					НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
					
					НоваяСтрока.Количество = КоличествоОтсканировано;
					НоваяСтрока.КоличествоОтобрано = КоличествоОтсканировано;
					
					ВсегоОтсканированоУпаковок = ВсегоОтсканированоУпаковок + КоличествоУпаковокОтсканировано;
					
				КонецЦикла;
				
				ОсталосьОтсканироватьУпаковок = СтрокаСканирования.КоличествоУпаковок - ВсегоОтсканированоУпаковок;
				
				Если СтрокаСканирования.Коэффициент <> 0 Тогда
					ОсталосьОтсканировать = ОсталосьОтсканироватьУпаковок * СтрокаСканирования.Коэффициент;
				Иначе
					ОсталосьОтсканировать = ОсталосьОтсканироватьУпаковок;
				КонецЕсли;
				
				Если ОсталосьОтсканироватьУпаковок <= 0 Тогда
					ПараметрыЗадания.ТоварыОтбор.Удалить(Строка);
				Иначе
					Строка.КоличествоУпаковокВДокументе = ОсталосьОтсканироватьУпаковок;
					Строка.КоличествоУпаковок = ОсталосьОтсканироватьУпаковок;
					Строка.Количество = ОсталосьОтсканировать;
				КонецЕсли;
				
			Иначе
				
				Если СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий) Тогда
					
					Если ЗначениеЗаполнено(СтрокаСканирования.НомерСерии)
						Или ЗначениеЗаполнено(СтрокаСканирования.ГоденДо) Тогда
						
						ОтборПоСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, 
							|ГоденДо");
						ЗаполнитьЗначенияСвойств(ОтборПоСерии, СтрокаСканирования);
						
						Строка = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(ОтборПоСерии)[0];
						Строка.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
						Строка.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
						Строка.КоличествоОтобрано = КоличествоОтсканировано;
						
					КонецЕсли;
					
				Иначе
					ОтборПоСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
					ЗаполнитьЗначенияСвойств(ОтборПоСерии, СтрокаСканирования);
					
					Строка = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(ОтборПоСерии)[0];
					Строка.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
					Строка.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
					Строка.КоличествоОтобрано = КоличествоОтсканировано;
					
					Если МерныеЕдиницыИзмерения.Найти(Строка.ТипИзмеряемойВеличины) <> Неопределено
						И Строка.КоличествоУпаковок < КоличествоУпаковокОтсканировано Тогда
						
						Строка.Количество = КоличествоОтсканировано;
						Строка.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивПустыхСтрок = Новый Массив;
		
		Для Каждого ПустаяСтрока Из ПараметрыЗадания.ТоварыОтбор Цикл
			Если ПустаяСтрока.Количество <= 0 Тогда
				МассивПустыхСтрок.Добавить(ПустаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
			ПараметрыЗадания.ТоварыОтбор.Удалить(ПустаяСтрока);
		КонецЦикла;
		
		ДокументОбъект.ТоварыОтбор.Очистить();
		ЗаполнитьСерииТаблицыТоваровЗадания(ПараметрыЗадания.ТоварыОтбор);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыОтбор, ДокументОбъект.ТоварыОтбор);
		
		ТоварыОтбор = ПараметрыЗадания.ТоварыОтбор;
		МаксимальноеКоличествоОтбираемогоТовара = 0;
		
		Для Каждого СтрокаТовара Из ТоварыОтбор Цикл
			Если МерныеЕдиницыИзмерения.Найти(СтрокаТовара.ТипИзмеряемойВеличины) = Неопределено Тогда
				МаксимальноеКоличествоОтбираемогоТовара = МаксимальноеКоличествоОтбираемогоТовара +
					СтрокаТовара.КоличествоУпаковок;
			Иначе
				МаксимальноеКоличествоОтбираемогоТовара = МаксимальноеКоличествоОтбираемогоТовара +
					СтрокаТовара.КоличествоУпаковок + СтрокаТовара.КоличествоУпаковок * ДопустимоеОтклонениеОтбираемыхТоваров / 100;
			КонецЕсли;
		КонецЦикла;
		
		МаксимальноеКоличествоОтбираемогоТовара = ТоварыОтбор.Итог("КоличествоУпаковок") + 
			ТоварыОтбор.Итог("КоличествоУпаковок") * ДопустимоеОтклонениеОтбираемыхТоваров / 100;
		
		Если Не (ТоварыОтбор.Итог("КоличествоУпаковок") <= ТоварыОтбор.Итог("КоличествоУпаковокОтобрано")
				И МаксимальноеКоличествоОтбираемогоТовара >= ТоварыОтбор.Итог("КоличествоУпаковокОтобрано")) Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецЕсли;
		
		ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Отбор);
		
		РезультатПроверкиМаркировки = РабочееМестоРаботникаСкладаЛокализация.РезультатПроверкиМаркировки(
																					ТоварыДляСканирования, 
																					СканированныеЗначенияМарок);
		ПараметрыЗадания.РезультатПроверкиМаркировки = РезультатПроверкиМаркировки;
		Если ТипЗнч(СканированныеЗначенияМарок) = Тип("ТаблицаЗначений") Тогда
			Для каждого ЭлемМарка Из РезультатПроверкиМаркировки Цикл
				Если ЭлемМарка.ЗначениеПринято
					И ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлемМарка.ШтрихкодУпаковки) = Неопределено Тогда
					НовСтрока = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
					НовСтрока.ШтрихкодУпаковки = ЭлемМарка.ШтрихкодУпаковки;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗадания = "Размещение" Тогда
		
		ПараметрыЗадания.ТоварыРазмещение.Очистить();
		
		ОтборУдаляемыхСтрок = Новый Структура("КоличествоУпаковок", 0);
		МассивУдаляемыхСтрок = ТоварыДляСканирования.НайтиСтроки(ОтборУдаляемыхСтрок);
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			ТоварыДляСканирования.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
			НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСканирования);
			
			Если НоваяСтрока.Коэффициент <> 0 Тогда
				НоваяСтрока.Количество = СтрокаСканирования.КоличествоУпаковок * НоваяСтрока.Коэффициент;
			Иначе
				НоваяСтрока.Количество = СтрокаСканирования.КоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
			Индекс = ТоварыДляСканирования.Индекс(СтрокаСканирования);
			СтрокаТоварыРазмещение = ПараметрыЗадания.ТоварыРазмещение.Получить(Индекс);
			
			СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = СтрокаСканирования.КоличествоУпаковокОтсканировано;
			
			Если СтрокаТоварыРазмещение.Коэффициент <> 0 Тогда
				СтрокаТоварыРазмещение.КоличествоРазмещено = СтрокаСканирования.КоличествоУпаковокОтсканировано
					* СтрокаТоварыРазмещение.Коэффициент;
			Иначе
				СтрокаТоварыРазмещение.КоличествоРазмещено = СтрокаСканирования.КоличествоУпаковокОтсканировано;
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.ТоварыРазмещение.Очистить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыРазмещение, ДокументОбъект.ТоварыРазмещение);
		
		ЕстьНеОтсканированныеТовары = Не (ДокументОбъект.ТоварыРазмещение.Итог("КоличествоУпаковок") =
			ДокументОбъект.ТоварыРазмещение.Итог("КоличествоУпаковокРазмещено"));
		
		Если ЕстьНеОтсканированныеТовары Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецЕсли;
		
		РезультатПроверкиМаркировки = РабочееМестоРаботникаСкладаЛокализация.РезультатПроверкиМаркировки(
																						ТоварыДляСканирования, 
																						СканированныеЗначенияМарок);
		ПараметрыЗадания.РезультатПроверкиМаркировки = РезультатПроверкиМаркировки;
		Если ТипЗнч(СканированныеЗначенияМарок) = Тип("ТаблицаЗначений") Тогда
			Для каждого ЭлемМарка Из РезультатПроверкиМаркировки Цикл
				Если ЭлемМарка.ЗначениеПринято
					И ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлемМарка.ШтрихкодУпаковки) = Неопределено Тогда
					НовСтрока = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
					НовСтрока.ШтрихкодУпаковки = ЭлемМарка.ШтрихкодУпаковки;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗадания = "Перемещение" Тогда
		
		ВыполненоСОшибками = Ложь;
		
		Если Не ОтборОтсканирован Тогда
			
			// Отбор не отсканирован и выполняется досрочное завершение выполнения перемещения,
			// (т.е. что-то отобрали или вообще ничего не отбирали но размещать не стали).
			
			МассивТоваров = Новый Массив;
			МассивТоваровЗадания = ПараметрыЗадания.ТоварыОтбор.ВыгрузитьКолонку("Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТоваров, МассивТоваровЗадания, Истина);
			
			// Устанавливаем значения реквизита "СтатусыУказанияСерий"
			Для Каждого ТоварЗадания Из МассивТоваров Цикл
				
				Отбор = Новый Структура("Номенклатура", ТоварЗадания);
				МассивСтрок = ТоварыДляСканирования.НайтиСтроки(Отбор);
				
				СтатусУказанияСерий = МассивСтрок[0].СтатусУказанияСерий;
				
				МассивСтрокОтбора = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(Отбор);
				Для Каждого СтрокаОтбора Из МассивСтрокОтбора Цикл
					СтрокаОтбора.СтатусУказанияСерий = СтатусУказанияСерий;
				КонецЦикла;
				
				МассивСтрокРазмещение = ПараметрыЗадания.ТоварыРазмещение.НайтиСтроки(Отбор);
				Для Каждого СтрокаРазмещение Из МассивСтрокРазмещение Цикл
					СтрокаРазмещение.СтатусУказанияСерий = СтатусУказанияСерий;
				КонецЦикла;
				
			КонецЦикла;
			
			ТоварыОтбор = ПараметрыЗадания.ТоварыОтбор.Скопировать();
			
			Для каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
				
				Если СтрокаСканирования.КоличествоУпаковокОтсканировано <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаСканирования);
				
				НайденныеСтроки = ТоварыОтбор.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЗТоварыОтбор = НайденныеСтроки[0];
				МассивСтрокТоварыОтбор = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(Отбор);
				СтрокаТоварыОтбор = МассивСтрокТоварыОтбор[0];
				ИндексНовойСтроки = ПараметрыЗадания.ТоварыОтбор.Индекс(СтрокаТоварыОтбор);
				
				Если СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий)
					И (ТЗОтсканированныеТовары <> Неопределено) Тогда
					
					ТоварыОтбор.Удалить(СтрокаТЗТоварыОтбор);
					МассивСтрок = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
					
					Если МассивСтрок.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если МассивСтрок.Количество() > 0 Тогда
						ПерваяСтрока = МассивСтрок[0];
					КонецЕсли;
					
					Для Каждого СтрокаОтсканированныхТоваров Из МассивСтрок Цикл
						
						ИндексНовойСтроки = ИндексНовойСтроки + 1;
						Если СтрокаОтсканированныхТоваров = ПерваяСтрока Тогда
							
							КоличествоСканирования = ПерваяСтрока.КоличествоУпаковокОтсканировано;
							Если МассивСтрок.Количество() > 0 Тогда
								
								КоличествоСканирования = 0;
								Для Каждого СтрокаТовараПоСерии Из МассивСтрок Цикл
									КоличествоСканирования = КоличествоСканирования + СтрокаТовараПоСерии.КоличествоУпаковокОтсканировано;
								КонецЦикла;
								
							КонецЕсли;
							
							КоличествоСканирования = КоличествоСканирования - ПерваяСтрока.КоличествоУпаковокОтсканировано;
							
							КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано
								- КоличествоСканирования;
							
							Если СтрокаСканирования.Коэффициент <> 0 Тогда
								КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
							Иначе
								КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
							КонецЕсли;
							
						Иначе
							КоличествоУпаковокОтсканировано = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано;
							
							Если СтрокаОтсканированныхТоваров.Коэффициент <> 0 Тогда
								КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
							Иначе
								КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
							КонецЕсли;
						КонецЕсли;
						
						// Добавить строку отобранных товаров.
						НоваяСтрока = ПараметрыЗадания.ТоварыОтбор.Вставить(ИндексНовойСтроки);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыОтбор);
						
						НоваяСтрока.НомерСерии = СтрокаОтсканированныхТоваров.НомерСерии;
						НоваяСтрока.ГоденДо = СтрокаОтсканированныхТоваров.ГоденДо;
						
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
						
						НоваяСтрока.Количество = КоличествоОтсканировано;
						НоваяСтрока.КоличествоОтобрано = КоличествоОтсканировано;
						
						// Добавить строку размещенных товаров.
						НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыОтбор);
						
						НоваяСтрока.Ячейка = ЗонаПриемки;
						
						НоваяСтрока.НомерСерии = СтрокаОтсканированныхТоваров.НомерСерии;
						НоваяСтрока.ГоденДо = СтрокаОтсканированныхТоваров.ГоденДо;
						
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
						
						НоваяСтрока.Количество = КоличествоОтсканировано;
						НоваяСтрока.КоличествоРазмещено = КоличествоОтсканировано;
						
					КонецЦикла;
					
					КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
					
					Если СтрокаСканирования.Коэффициент <> 0 Тогда
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
					Иначе
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
					КонецЕсли;
					
					СтрокаТоварыОтбор.КоличествоУпаковок = СтрокаТоварыОтбор.КоличествоУпаковок - КоличествоУпаковокОтсканировано;
					СтрокаТоварыОтбор.КоличествоУпаковокВДокументе = СтрокаТоварыОтбор.КоличествоУпаковок;
					
					СтрокаТоварыОтбор.Количество = СтрокаТоварыОтбор.Количество - КоличествоОтсканировано;
					
				Иначе
					
					КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
					
					Если СтрокаСканирования.Коэффициент <> 0 Тогда
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
					Иначе
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
					КонецЕсли;
					
					Если СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий) Тогда
						
						Если ЗначениеЗаполнено(СтрокаСканирования.НомерСерии)
							Или ЗначениеЗаполнено(СтрокаСканирования.ГоденДо) Тогда
							
							ОтборПоСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, 
								|ГоденДо");
							ЗаполнитьЗначенияСвойств(ОтборПоСерии, СтрокаСканирования);
							
							СтрокаТоварыОтбор = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(ОтборПоСерии)[0];
							
							// Добавить строку отобранных товаров.
							НоваяСтрока = ПараметрыЗадания.ТоварыОтбор.Вставить(ИндексНовойСтроки + 1);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыОтбор);
							
							НоваяСтрока.НомерСерии = СтрокаСканирования.НомерСерии;
							НоваяСтрока.ГоденДо = СтрокаСканирования.ГоденДо;
							
							НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
							НоваяСтрока.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
							НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
							
							НоваяСтрока.Количество = КоличествоОтсканировано;
							НоваяСтрока.КоличествоОтобрано = КоличествоОтсканировано;
							
							// Добавить строку размещенных товаров.
							НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыОтбор);
							
							НоваяСтрока.Ячейка = ЗонаПриемки;
							
							НоваяСтрока.НомерСерии = СтрокаСканирования.НомерСерии;
							НоваяСтрока.ГоденДо = СтрокаСканирования.ГоденДо;
							
							НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
							НоваяСтрока.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
							НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
							
							НоваяСтрока.Количество = КоличествоОтсканировано;
							НоваяСтрока.КоличествоРазмещено = КоличествоОтсканировано;
							
						Иначе
							СтрокаТоварыОтбор.Количество = СтрокаСканирования.КоличествоУпаковок * СтрокаСканирования.Коэффициент;
							СтрокаТоварыОтбор.КоличествоУпаковок = СтрокаСканирования.КоличествоУпаковок;
							СтрокаТоварыОтбор.КоличествоУпаковокВДокументе = СтрокаСканирования.КоличествоУпаковок;
						КонецЕсли;
						
					Иначе
						
						ОтборПоСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия");
						ЗаполнитьЗначенияСвойств(ОтборПоСерии, СтрокаСканирования);
						
						СтрокаТоварыОтбор = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(ОтборПоСерии)[0];
						СтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
						СтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
						
						// Добавить строку размещенных товаров.
						НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыОтбор);
						
						НоваяСтрока.Ячейка = ЗонаПриемки;
						
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
						
						НоваяСтрока.Количество = КоличествоОтсканировано;
						НоваяСтрока.КоличествоРазмещено = КоличествоОтсканировано;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			МассивПустыхСтрок = Новый Массив;
			
			Для Каждого ПустаяСтрока Из ПараметрыЗадания.ТоварыОтбор Цикл
				Если ПустаяСтрока.Количество <= 0 Тогда
					МассивПустыхСтрок.Добавить(ПустаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
				ПараметрыЗадания.ТоварыОтбор.Удалить(ПустаяСтрока);
			КонецЦикла;
			
			// Перенести сведения об отобранных товарах.
			ДокументОбъект.ТоварыОтбор.Очистить();
			ЗаполнитьСерииТаблицыТоваровЗадания(ПараметрыЗадания.ТоварыОтбор);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыОтбор, ДокументОбъект.ТоварыОтбор);
			
			МассивПустыхСтрок = Новый Массив;
			
			Для Каждого ПустаяСтрока Из ПараметрыЗадания.ТоварыРазмещение Цикл
				Если ПустаяСтрока.Количество <= 0 Тогда
					МассивПустыхСтрок.Добавить(ПустаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
				ПараметрыЗадания.ТоварыРазмещение.Удалить(ПустаяСтрока);
			КонецЦикла;
			
			// Перенести сведения о размещенных товарах.
			ДокументОбъект.ТоварыРазмещение.Очистить();
			ЗаполнитьСерииТаблицыТоваровЗадания(ПараметрыЗадания.ТоварыРазмещение);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыРазмещение, ДокументОбъект.ТоварыРазмещение);
			
			// Установить статус задания - выполнено с ошибками.
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
			ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Отбор);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Размещение);
			
		Иначе
			
			// Это завершение задания на перемещение, к этому моменту:
			// в ТЧ ТоварыОтбор находятся сведения об отобранных товарах,
			// в ТЧ ТоварыРазмещение нужно внести сведения об отсканированных товарах.
			
			// Вариант, когда отобранные товары не удалось разместить.
			Если ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано") = 0 Тогда
				
				Для Каждого СтрокаТоваров Из ПараметрыЗадания.ТоварыОтбор Цикл
					
					Если СтрокаТоваров.КоличествоУпаковокОтобрано > 0 Тогда
						НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
						
						НоваяСтрока.Ячейка = ЗонаПриемки;
						
						НоваяСтрока.НомерСерии = СтрокаТоваров.НомерСерии;
						НоваяСтрока.ГоденДо = СтрокаТоваров.ГоденДо;
						НоваяСтрока.СтатусУказанияСерий = СтрокаТоваров.СтатусУказанияСерий;
						
						НоваяСтрока.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковокОтобрано;
						НоваяСтрока.КоличествоУпаковокРазмещено = СтрокаТоваров.КоличествоУпаковокОтобрано;
						НоваяСтрока.КоличествоУпаковокВДокументе = СтрокаТоваров.КоличествоУпаковокОтобрано;
						
						НоваяСтрока.Количество = СтрокаТоваров.КоличествоУпаковокОтобрано * СтрокаТоваров.Коэффициент;
						НоваяСтрока.КоличествоРазмещено = НоваяСтрока.Количество;
					КонецЕсли;
					
				КонецЦикла;
				
				ВыполненоСОшибками = Истина;
				
			Иначе
				
				МассивТоваров = Новый Массив;
				МассивТоваровЗадания = ПараметрыЗадания.ТоварыОтбор.ВыгрузитьКолонку("Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТоваров, МассивТоваровЗадания, Истина);
				
				// Устанавливаем значения реквизита "СтатусыУказанияСерий"
				Для Каждого ТоварЗадания Из МассивТоваров Цикл
					
					Отбор = Новый Структура("Номенклатура", ТоварЗадания);
					МассивСтрок = ДокументОбъект.ТоварыОтбор.НайтиСтроки(Отбор);
					
					СтатусУказанияСерий = МассивСтрок[0].СтатусУказанияСерий;
					
					МассивСтрокОтбора = ПараметрыЗадания.ТоварыОтбор.НайтиСтроки(Отбор);
					Для Каждого СтрокаОтбора Из МассивСтрокОтбора Цикл
						СтрокаОтбора.СтатусУказанияСерий = СтатусУказанияСерий;
					КонецЦикла;
					
					МассивСтрокРазмещение = ПараметрыЗадания.ТоварыРазмещение.НайтиСтроки(Отбор);
					Для Каждого СтрокаРазмещение Из МассивСтрокРазмещение Цикл
						СтрокаРазмещение.СтатусУказанияСерий = СтатусУказанияСерий;
					КонецЦикла;
					
				КонецЦикла;
				
				Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, НомерСерии, ГоденДо");
				ОтборБезСерии = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
				
				Для каждого СтрокаСканирования Из ТоварыДляСканирования Цикл
					
					КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
					
					Если СтрокаСканирования.Коэффициент <> 0 Тогда
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
					Иначе
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаСканирования);
					ЗаполнитьЗначенияСвойств(ОтборБезСерии, СтрокаСканирования);
					
					НайденныеСтроки = ПараметрыЗадания.ТоварыРазмещение.НайтиСтроки(ОтборБезСерии);
					СтрокаТоварыРазмещение = НайденныеСтроки[0];
					ИндексНовойСтроки = ПараметрыЗадания.ТоварыРазмещение.Индекс(СтрокаТоварыРазмещение);
					
					Если СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий)
						И (ТЗОтсканированныеТовары <> Неопределено) Тогда
						
						НайденныеСтрокиПоСериям = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
						
						Если НайденныеСтрокиПоСериям.Количество() > 0 Тогда
							
							ПерваяСтрока = НайденныеСтрокиПоСериям[0];
							Для каждого СтрокаОтсканированныхТоваров Из НайденныеСтрокиПоСериям Цикл
								
								ИндексНовойСтроки = ИндексНовойСтроки + 1;
								Если СтрокаОтсканированныхТоваров = ПерваяСтрока Тогда
									
									КоличествоСканирования = ПерваяСтрока.КоличествоУпаковокОтсканировано;
									Если НайденныеСтрокиПоСериям.Количество() > 0 Тогда
										
										КоличествоСканирования = 0;
										Для Каждого СтрокаТовараПоСерии Из НайденныеСтрокиПоСериям Цикл
											КоличествоСканирования = КоличествоСканирования + СтрокаТовараПоСерии.КоличествоУпаковокОтсканировано;
										КонецЦикла;
										
									КонецЕсли;
									
									КоличествоСканирования = КоличествоСканирования - ПерваяСтрока.КоличествоУпаковокОтсканировано;
									
									КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано
										- КоличествоСканирования;
									
									Если СтрокаОтсканированныхТоваров.Коэффициент <> 0 Тогда
										КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
									Иначе
										КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
									КонецЕсли;
									
								Иначе
									КоличествоУпаковокОтсканировано = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано;
									
									Если СтрокаОтсканированныхТоваров.Коэффициент <> 0 Тогда
										КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
									Иначе
										КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
									КонецЕсли;
								КонецЕсли;
								
								НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Вставить(ИндексНовойСтроки);
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыРазмещение);
								
								НоваяСтрока.НомерСерии = СтрокаОтсканированныхТоваров.НомерСерии;
								НоваяСтрока.ГоденДо = СтрокаОтсканированныхТоваров.ГоденДо;
								НоваяСтрока.СтатусУказанияСерий = СтрокаОтсканированныхТоваров.СтатусУказанияСерий;
								
								НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
								НоваяСтрока.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
								НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
								
								НоваяСтрока.Количество = КоличествоОтсканировано;
								НоваяСтрока.КоличествоРазмещено = КоличествоОтсканировано;
								
								СтрокаТоварыРазмещение.КоличествоУпаковок = СтрокаТоварыРазмещение.КоличествоУпаковок - КоличествоУпаковокОтсканировано;
								СтрокаТоварыРазмещение.КоличествоУпаковокВДокументе = СтрокаТоварыРазмещение.КоличествоУпаковок;
								СтрокаТоварыРазмещение.Количество = СтрокаТоварыРазмещение.Количество - КоличествоОтсканировано;
								
							КонецЦикла;
							
						КонецЕсли;
						
						ОсталосьУпаковокОтсканировать = СтрокаСканирования.КоличествоУпаковок -
							СтрокаСканирования.КоличествоУпаковокОтсканировано;
						
						Если СтрокаСканирования.Коэффициент <> 0 Тогда
							ОсталосьОтсканировать = ОсталосьУпаковокОтсканировать * СтрокаСканирования.Коэффициент;
						Иначе
							ОсталосьОтсканировать = ОсталосьУпаковокОтсканировать;
						КонецЕсли;
						
						Если ОсталосьУпаковокОтсканировать > 0 Тогда
							НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыРазмещение);
							
							НоваяСтрока.Ячейка = ЗонаПриемки;
							
							НоваяСтрока.НомерСерии = СтрокаСканирования.НомерСерии;
							НоваяСтрока.ГоденДо = СтрокаСканирования.ГоденДо;
							НоваяСтрока.СтатусУказанияСерий = СтрокаСканирования.СтатусУказанияСерий;
							
							НоваяСтрока.КоличествоУпаковок = ОсталосьУпаковокОтсканировать;
							НоваяСтрока.КоличествоУпаковокРазмещено = ОсталосьУпаковокОтсканировать;
							НоваяСтрока.КоличествоУпаковокВДокументе = ОсталосьУпаковокОтсканировать;
							
							НоваяСтрока.Количество = ОсталосьОтсканировать;
							НоваяСтрока.КоличествоРазмещено = ОсталосьОтсканировать;
							
							ВыполненоСОшибками = Истина;
						КонецЕсли;
						
					Иначе
						
						Если СерииУказываютсяПоФактуОтбора(СтрокаСканирования.СтатусУказанияСерий) Тогда
							
							Если КоличествоУпаковокОтсканировано > 0 Тогда
								
								НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Вставить(ИндексНовойСтроки + 1);
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСканирования);
								
								НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
								НоваяСтрока.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
								НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
								
								НоваяСтрока.Количество = КоличествоОтсканировано;
								НоваяСтрока.КоличествоРазмещено = КоличествоОтсканировано;
								
								СтрокаТоварыРазмещение.КоличествоУпаковок = СтрокаТоварыРазмещение.КоличествоУпаковок - КоличествоУпаковокОтсканировано;
								СтрокаТоварыРазмещение.КоличествоУпаковокВДокументе = СтрокаТоварыРазмещение.КоличествоУпаковок;
								СтрокаТоварыРазмещение.Количество = СтрокаТоварыРазмещение.Количество - КоличествоОтсканировано;
								
							КонецЕсли;
							
							ОсталосьУпаковокРазместить = СтрокаСканирования.КоличествоУпаковок - КоличествоУпаковокОтсканировано;
							ОсталосьРазместить = ОсталосьУпаковокРазместить * СтрокаСканирования.Коэффициент;
							
							Если ОсталосьРазместить > 0 Тогда
								
								НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСканирования);
								
								НоваяСтрока.Ячейка = ЗонаПриемки;
								
								НоваяСтрока.КоличествоУпаковокРазмещено = ОсталосьУпаковокРазместить;
								НоваяСтрока.КоличествоУпаковокВДокументе = ОсталосьУпаковокРазместить;
								НоваяСтрока.КоличествоУпаковок = ОсталосьУпаковокРазместить;
								
								НоваяСтрока.Количество = ОсталосьРазместить;
								НоваяСтрока.КоличествоРазмещено = ОсталосьРазместить;
								
								ВыполненоСОшибками = Истина;
							КонецЕсли;
							
						Иначе
							
							НайденныеСтроки = ПараметрыЗадания.ТоварыРазмещение.НайтиСтроки(Отбор);
							СтрокаТоварыРазмещение = НайденныеСтроки[0];
							
							ОсталосьУпаковокРазместить = СтрокаСканирования.КоличествоУпаковок - КоличествоУпаковокОтсканировано;
							
							Если СтрокаТоварыРазмещение.Коэффициент <> 0 Тогда
								ОсталосьРазместить = ОсталосьУпаковокРазместить * СтрокаТоварыРазмещение.Коэффициент;
							Иначе
								ОсталосьРазместить = ОсталосьУпаковокРазместить;
							КонецЕсли;
							
							Если СтрокаСканирования.КоличествоУпаковок = СтрокаСканирования.КоличествоУпаковокОтсканировано Тогда
								СтрокаТоварыРазмещение.КоличествоРазмещено = КоличествоОтсканировано;
								СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
							Иначе
								
								// Если есть отобранные, но не размещенные товары, их следует отнести в зону отгрузки.
								// Для этого - неполностью размещенную строку нужно разбить на две: в первой строке
								// будет установлено отсканированное количество, во второй - оставшееся с указанием
								// ячейки зоны отгрузки, в противном случае, документ перемещения не удастся провести.
								
								СтрокаТоварыРазмещение.КоличествоРазмещено = КоличествоОтсканировано;
								СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
								
								// Добавить новую строку с указанием оставшегося количества и ячейкой - зоной отгрузки.
								Если ОсталосьУпаковокРазместить > 0 Тогда
									НоваяСтрока = ПараметрыЗадания.ТоварыРазмещение.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыРазмещение);
									
									НоваяСтрока.Ячейка = ЗонаПриемки;
									
									НоваяСтрока.НомерСерии = СтрокаСканирования.НомерСерии;
									НоваяСтрока.ГоденДо = СтрокаСканирования.ГоденДо;
									НоваяСтрока.СтатусУказанияСерий = СтрокаСканирования.СтатусУказанияСерий;
									
									НоваяСтрока.КоличествоУпаковокРазмещено = ОсталосьУпаковокРазместить;
									НоваяСтрока.КоличествоУпаковокВДокументе = ОсталосьУпаковокРазместить;
									НоваяСтрока.КоличествоУпаковок = ОсталосьУпаковокРазместить;
									
									НоваяСтрока.Количество = ОсталосьРазместить;
									НоваяСтрока.КоличествоРазмещено = ОсталосьРазместить;
								КонецЕсли;
								
								ВыполненоСОшибками = Истина;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			МассивПустыхСтрок = Новый Массив;
			
			Для Каждого ПустаяСтрока Из ПараметрыЗадания.ТоварыРазмещение Цикл
				Если ПустаяСтрока.Количество <= 0 Тогда
					МассивПустыхСтрок.Добавить(ПустаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
				ПараметрыЗадания.ТоварыРазмещение.Удалить(ПустаяСтрока);
			КонецЦикла;
			
			// Это завершение задания на перемещение, к этому моменту:
			// в ТЧ ТоварыОтбор находятся сведения об отобранных товарах, 
			// в ТЧ ТоварыРазмещение нужно внести сведения об отсканированных товарах.
			
			ДокументОбъект.ТоварыРазмещение.Очистить();
			ЗаполнитьСерииТаблицыТоваровЗадания(ПараметрыЗадания.ТоварыРазмещение);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.ТоварыРазмещение, ДокументОбъект.ТоварыРазмещение);
			
			ТоварыОтбор = ПараметрыЗадания.ТоварыОтбор;
			ТоварыРазмещение = ПараметрыЗадания.ТоварыРазмещение;
			
			ЕстьНеОтсканированныеТовары = 
				(ТоварыОтбор.Итог("КоличествоУпаковок") <> ТоварыОтбор.Итог("КоличествоУпаковокОтобрано"))
					Или ТоварыРазмещение.Итог("КоличествоУпаковок") <> ТоварыРазмещение.Итог("КоличествоУпаковокРазмещено");
			
			Если ЕстьНеОтсканированныеТовары
				Или ВыполненоСОшибками Тогда
				
				ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
				
			Иначе
				ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецЕсли;
			
			ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Размещение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет" Тогда
		
		ДокументОбъект = Задание.ПолучитьОбъект();
		
		Если ТЗОтсканированныеТовары.Количество() > 0 Тогда
			
			ДокументОбъект.Товары.Очистить();
			ПараметрыЗадания.Товары.Очистить();
			
			Для каждого СтрокаСканирования Из ТЗОтсканированныеТовары Цикл
				
				КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
				
				Если СтрокаСканирования.Коэффициент <> 0 Тогда
					КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
				Иначе
					КоличествоОтсканировано = КоличествоУпаковокОтсканировано;
				КонецЕсли;
				
				НоваяСтрока = ПараметрыЗадания.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСканирования);
				
				НоваяСтрока.КоличествоУпаковок = 0;
				НоваяСтрока.КоличествоУпаковокФакт = КоличествоУпаковокОтсканировано;
				НоваяСтрока.Количество = 0;
				НоваяСтрока.КоличествоФакт = КоличествоОтсканировано;
				
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыЗадания.Товары, ДокументОбъект.Товары);
			ЗаполнитьКоличествоПоУчетуПриПересчетеТоваров(ДокументОбъект);
			
			Отбор = Новый Структура("КоличествоУпаковок, КоличествоУпаковокФакт", 0, 0);
			МассивСтрок = ДокументОбъект.Товары.НайтиСтроки(Отбор);
			
			Для Каждого УдаляемаяСтрока Из МассивСтрок Цикл
				Если ЗначениеЗаполнено(УдаляемаяСтрока.Номенклатура) Тогда
					ДокументОбъект.Товары.Удалить(УдаляемаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			ДокументОбъект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
			
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено;
		КонецЕсли;
		
		ДокументОбъект.БлокироватьЯчейки = Ложь;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПересчетТоваров);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект, "ДатаОкончанияВыполнения") Тогда
		ДокументОбъект.ДатаОкончанияВыполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ПараметрыЗадания.КодВозврата = 0;
		
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи и проведении складского задания произошла ошибка. Описание ошибки: ""%1""'"),
			ИнформацияОбОшибке().Описание);
		
		ПараметрыЗадания.ТекстСообщения = КомментарийЖурнала;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи и проведении складского задания из рабочего места работника склада'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание,
			КомментарийЖурнала,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(Задание);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Вызывается при завершении задания проверки отбора.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	Задание - ДокументСсылка - ссылка складского задания.
//	ОтсканированныеТовары - ТаблицаЗначений - таблица товаров, содержащая информацию об отсканированных товарах.
//	ТоварыДляСканирования - ТабличнаяЧасть - таблица товаров, соответствующая табличной части выполняемого задания и содержащая информацию об отсканированных товарах.
//	ИспользуетсяАдресноеХранение - Булево - Истина, если на складе используется адресное хранение.
//	СканированныеЗначенияМарок - СписокЗначений:
//	*Значение - СправочникСсылка - сопоставленная ссылка.
//	*Представление - Строка -  значение штрихкода марки.
//
// Возвращаемое значение:
//	см. ПараметрыЗадания
//
Функция ЗавершитьВыполнениеЗаданияПроверкаОтбора(Склад, Помещение, Задание, ОтсканированныеТовары, ТоварыДляСканирования,
		ИспользуетсяАдресноеХранение, СканированныеЗначенияМарок = Неопределено) Экспорт
	
	ПараметрыЗадания = ПараметрыЗадания();
	
	// Создать обработку проверки количества в документе.
	ОбработкаПроверки = Обработки.ПроверкаКоличестваТоваровВДокументе.Создать();
	ОбработкаПроверки.Ордер = Задание;
	ОбработкаПроверки.Склад = Склад;
	ОбработкаПроверки.Помещение = Помещение;
	ОбработкаПроверки.ВариантУчетаНедобора = "Добрать";
	
	Для Каждого СтрокаОтсканированныхТоваров Из ОтсканированныеТовары Цикл
		
		НоваяСтрока = ОбработкаПроверки.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтсканированныхТоваров);
		
		НоваяСтрока.КоличествоУпаковок = (СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано
			- СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать);
		
		Если СтрокаОтсканированныхТоваров.Коэффициент <> 0 Тогда
			НоваяСтрока.Количество = (СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано
				- СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать) * СтрокаОтсканированныхТоваров.Коэффициент;
		Иначе
			НоваяСтрока.Количество = (СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано
				- СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать);
		КонецЕсли;
		
		Если СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать > 0 Тогда
			
			Если СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать =
				СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано Тогда
				
				НоваяСтрока.НеОтгружать = 1;
				НоваяСтрока.КоличествоУпаковок = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
				
				Если СтрокаОтсканированныхТоваров.Коэффициент <> 0 Тогда
					НоваяСтрока.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать
						* СтрокаОтсканированныхТоваров.Коэффициент;
				Иначе
					НоваяСтрока.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
				КонецЕсли;
				
			Иначе
				СтрокаНеотгружаемых = ОбработкаПроверки.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНеотгружаемых, СтрокаОтсканированныхТоваров);
				
				СтрокаНеотгружаемых.НеОтгружать = 1;
				
				СтрокаНеотгружаемых.КоличествоУпаковок = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
				
				Если СтрокаОтсканированныхТоваров.Коэффициент <> 0 Тогда
					СтрокаНеотгружаемых.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать
					* СтрокаОтсканированныхТоваров.Коэффициент;
				Иначе
					СтрокаНеотгружаемых.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТоварыДляСканирования <> Неопределено Тогда
		ДополнитьЗаданиеПроверкиОтбораОтсканированнойТарой(ТоварыДляСканирования, ОбработкаПроверки.Товары);
	КонецЕсли;
	
	Если СканированныеЗначенияМарок <> Неопределено Тогда
		ПараметрыЗадания.РезультатПроверкиМаркировки = РабочееМестоРаботникаСкладаЛокализация.РезультатПроверкиМаркировки(ОтсканированныеТовары, СканированныеЗначенияМарок);
		Для каждого Элем Из ПараметрыЗадания.РезультатПроверкиМаркировки Цикл
			Если Элем.ЗначениеПринято Тогда
				НовСтрока = ОбработкаПроверки.ШтрихкодыУпаковок.Добавить();
				НовСтрока.ШтрихкодУпаковки = Элем.ШтрихкодУпаковки;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	// Разблокировать документ.
	РазблокироватьДанныеДляРедактирования(Задание);
	
	УчитываемыеПоля = УчитываемыеПриПроверкеРасходногоОрдераПоля(ИспользуетсяАдресноеХранение, Неопределено);
	
	ПроверкаПройдена = ОбработкаПроверки.ЗавершитьПроверку(УчитываемыеПоля, Истина, Истина);
	ЕстьНеотгружаемые = ОбработкаПроверки.Неотгружаемые.Количество() > 0;
	
	Если ЕстьНеотгружаемые Тогда
		ПараметрыЗадания.Вставить("НеотгружаемыеТовары", ОбработкаПроверки.Неотгружаемые);
	КонецЕсли;
	
	Если ПроверкаПройдена
		И (ЕстьНеотгружаемые
			Или ОбработкаПроверки.Недобор.Количество() > 0) Тогда
		
		ПроверкаПройдена = ОбработкаПроверки.ОтразитьРасхожденияВУчете(УчитываемыеПоля, Истина);
		
	КонецЕсли;
	
	Если Не ПроверкаПройдена Тогда
		
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'При завершении задания произошла ошибка. Не удалось провести ордер. 
			|Обратитесь к администратору.'");
		
		ИмяСобытия = НСтр("ru = 'Ошибка при записи и проведении складского ордера из рабочего места работника склада'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			
			КомментарийЖурнала = НСтр("ru = 'При записи и проведении складского задания произошла ошибка. Описание ошибки: ""%1"".'");
			КомментарийЖурнала = СтрЗаменить(КомментарийЖурнала, "%1", Сообщение.Текст);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка,
				Задание.Метаданные(),
				Задание,
				КомментарийЖурнала);
			
		КонецЦикла;
		
	Иначе
		
		Если ЕстьНеотгружаемые Тогда
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.Вставить("НеотгружаемыеТовары", ОбработкаПроверки.Неотгружаемые);
		Иначе
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Выполнение проверки отбора завершено.'");
		КонецЕсли;
		
		
	КонецЕсли;
	
	ОбработкаПроверки = Неопределено;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Возвращает структуру для хранения сведений о задании.
//
// Возвращаемое значение:
//	Структура - параметры складского задания, содержат следующие поля:
//		* КодВозврата - Число - 0 означает признак наличия ошибок, выявленных в процессе работы со складским заданием.
//		* ТекстСообщения - Строка - текст сообщения пользователю, описывающий проблемы, возникшие в процессе выполнения,
//									складского задания.
//		* Склад - СправочникСсылка.Склады - склад документа складского задания.
//		* Помещение - СправочникСсылка.СкладскиеПомещения - помещение документа складского задания.
//		* Товары - ТаблицаЗначений - товары табличной части складских документов:
//			** НомерСтроки - Число
//			** Ячейка - СправочникСсылка.СкладскиеЯчейки
//			** КодЯчейки - Строка
//			** Номенклатура - СправочникСсылка.Номенклатура
//			** НаименованиеНоменклатуры - Строка
//			** АртикулНоменклатуры - Строка
//			** ОписаниеНоменклатуры - Строка
//			** ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//			** ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//			** НаименованиеВидаНоменклатуры - Строка
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//			** НаименованиеХарактеристики - Строка
//			** Серия - СправочникСсылка.СерииНоменклатуры
//			** НаименованиеСерии - Строка
//			** Назначение - СправочникСсылка.Назначения
//			** НаименованиеНазначения - Строка
//			** Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеУпаковки - Строка
//			** Коэффициент - Число
//			** КоэффициентЕдиницыИзмеренияВеса - Число
//			** КоэффициентЕдиницыИзмеренияОбъема - Число
//			** ВесУпаковки - Число
//			** ОбъемУпаковки - Число
//			** ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеЕдиницыИзмерения - Строка
//			** ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеЕдиницыИзмеренияВеса - Строка
//			** ЕдиницаИзмеренияОбъема - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеЕдиницыИзмеренияОбъема - Строка
//			** ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин
//			** ИзлишекПорча - Число 
//			** Количество - Число 
//			** КоличествоФакт - Число 
//			** КоличествоУпаковок - Число 
//			** КоличествоУпаковокФакт - Число 
//			** КоличествоУпаковокВДокументе - Число 
//			** СтатусУказанияСерий - Число
//			** ИспользоватьНомерСерии - Булево
//			** ИспользоватьСрокГодностиСерии - Булево
//			** ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности
//		* ТоварыОтбор - ТаблицаЗначений - товары табличной части 'ТоварыОтбор' документа "ОтборРазмещениеТоваров":
//			** НомерСтроки - Число
//			** Ячейка - СправочникСсылка.СкладскиеЯчейки
//			** Номенклатура - СправочникСсылка.Номенклатура
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//			** Серия - СправочникСсылка.СерииНоменклатуры
//			** Назначение - СправочникСсылка.Назначения
//			** Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** СтатусУказанияСерий - Число
//		* ТоварыРазмещение - ТаблицаЗначений - товары табличной части 'ТоварыРазмещение' документа "ОтборРазмещениеТоваров":
//			** НомерСтроки - Число
//			** Ячейка - СправочникСсылка.СкладскиеЯчейки
//			** Номенклатура - СправочникСсылка.Номенклатура
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//			** Серия - СправочникСсылка.СерииНоменклатуры
//			** Назначение - СправочникСсылка.Назначения
//			** СтатусУказанияСерий - Число
//		* ОтгружаемыеТовары - ТаблицаЗначений - товары табличной части 'ОтгружаемыеТовары' документа "РасходныйОрдерНаТовары":
//			** НомерСтроки - Число
//			** Действие - ПеречислениеСсылка.ДействияСоСтрокамиОрдеровНаОтгрузку
//			** Номенклатура - СправочникСсылка.Номенклатура
//			** НаименованиеНоменклатуры - Строка
//			** АртикулНоменклатуры - Строка
//			** ОписаниеНоменклатуры - Строка
//			** ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//			** ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//			** НаименованиеВидаНоменклатуры - Строка
//			** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//			** НаименованиеХарактеристики - Строка
//			** Серия - СправочникСсылка.СерииНоменклатуры
//			** НаименованиеСерии - Строка
//			** Назначение - СправочникСсылка.Назначения
//			** НаименованиеНазначения - Строка
//			** Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеУпаковки - Строка
//			** Коэффициент - Число
//			** КоэффициентЕдиницыИзмеренияВеса - Число
//			** КоэффициентЕдиницыИзмеренияОбъема - Число
//			** ВесУпаковки - Число
//			** ОбъемУпаковки - Число
//			** ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеЕдиницыИзмерения - Строка
//			** ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеЕдиницыИзмеренияВеса - Строка
//			** ЕдиницаИзмеренияОбъема - СправочникСсылка.УпаковкиЕдиницыИзмерения
//			** НаименованиеЕдиницыИзмеренияОбъема - Строка
//			** ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин
//			** НеОтгружать - Число 
//			** Количество - Число 
//			** КоличествоНеОтгружать - Число 
//			** КоличествоУпаковок - Число 
//			** КоличествоУпаковокНеОтгружать - Число 
//			** КоличествоУпаковокВДокументе - Число 
//			** КоличествоУпаковокВДокументеНеотгружаемые - Число
//			** СтатусУказанияСерий - Число
//			** ИспользоватьНомерСерии - Булево
//			** ИспользоватьСрокГодностиСерии - Булево
//			** ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности
//			** ЭтоУпаковочныйЛист - Булево
//		* ТипЗадания - Строка - идентификатор типа складского задания.
//		* Статус - ПеречислениеСсылка.СтатусыОтборовРазмещенийТоваров - статус документа складского задания.
//		* Проведен - Булево - Истина, если документ складского задания проведен.
//		* ИсходныйИсполнитель - СправочникСсылка.Пользователи - первоначальный исполнитель складского задания.
//		* ПорядокОбработки - ПеречислениеСсылка.ПорядокОбработкиСкладскогоЗадания - порядок работы со складскими ячейками, 
//																					в процессе выполнения складского задания.
//		* ОтборОтсканирован - Булево - Истина, если успешно выполнен отбор товаров, по складскому заданию 'Перемещение'.
//
Функция ПараметрыЗадания() Экспорт
	
	ПараметрыЗадания = Новый Структура();
	
	ПараметрыЗадания.Вставить("КодВозврата", 1);
	ПараметрыЗадания.Вставить("ТекстСообщения", "");
	
	ПараметрыЗадания.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ПараметрыЗадания.Вставить("Помещение", Справочники.СкладскиеПомещения.ПустаяСсылка());
	
	ПараметрыЗадания.Вставить("Товары", Неопределено);
	ПараметрыЗадания.Вставить("ТоварыОтбор", Неопределено);
	ПараметрыЗадания.Вставить("ТоварыРазмещение", Неопределено);
	ПараметрыЗадания.Вставить("ОтгружаемыеТовары", Неопределено);
	
	ПараметрыЗадания.Вставить("МаркировкаВерхнегоУровня", Неопределено);
	ПараметрыЗадания.Вставить("МаркировкаДетализированная", Неопределено);
	ПараметрыЗадания.Вставить("РезультатПроверкиМаркировки", Неопределено);
	
	ПараметрыЗадания.Вставить("ТипЗадания", "");
	ПараметрыЗадания.Вставить("Статус", Неопределено);
	ПараметрыЗадания.Вставить("Проведен", Ложь);
	ПараметрыЗадания.Вставить("ИсходныйИсполнитель", Справочники.Пользователи.ПустаяСсылка());
	ПараметрыЗадания.Вставить("ПорядокОбработки", Перечисления.ПорядокОбработкиСкладскогоЗадания.ПустаяСсылка());
	
	ПараметрыЗадания.Вставить("ОтборОтсканирован", Ложь);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает ссылку на вид складской операции в зависимости от строкового описания
// вида операции (вида документов).
//
// Параметры:
//	ВидОперации - Строка - вид операции.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ВидыОперацийОтбораРазмещенияТоваров - вид складской операции.
//
Функция ВидОперацииОтбораРазмещения(ВидОперации)
	
	Если ВидОперации = "Отбор" Тогда
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
	ИначеЕсли ВидОперации = "Размещение" Тогда
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ИначеЕсли ВидОперации = "Перемещение" Тогда
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	Иначе
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает строку - тип складского задания.
//
// Параметры:
//	Задание - ДокументСсылка - складское задание, которые принято в работу.
//
// Возвращаемое значение:
//	Неопределено, Строка - тип складского задания.
//
Функция ТипЗадания(Задание) Экспорт
	
	Если Не ЗначениеЗаполнено(Задание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЗадания = ТипЗнч(Задание);
	
	Если ТипЗадания = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		
		ВидОперацииЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ВидОперации");
		
		Если Не ЗначениеЗаполнено(ВидОперацииЗадания) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ВидОперацииЗадания = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор Тогда
			Возврат "Отбор";
		КонецЕсли;
		
		Если ВидОперацииЗадания = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			Возврат "Размещение";
		КонецЕсли;
		
		Если ВидОперацииЗадания = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда
			Возврат "Перемещение";
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		
		Возврат "Пересчет";
		
	ИначеЕсли ТипЗадания = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		
		Возврат "Приемка";
		
	ИначеЕсли ТипЗадания = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Возврат "ПроверкаОтбора";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Проверяет доступно ли задание к принятию в работу или нет.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад, для которого возвращается количество заданий,
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания,
//	ПараметрыЗадания - см. ПараметрыЗадания
//
// Возвращаемое значение:
//	Булево - Истина - задание доступно к принятию в работу, Ложь - задание недоступно.
//
Функция ПринятиеСкладскогоЗаданияВРаботуДоступно(Склад, Помещение, Пользователь, ПараметрыЗадания)
	
	Задание = ПараметрыЗадания.Задание;
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	Если Не ПараметрыЗадания.Проведен Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Документ не проведен.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыЗадания.Статус <> ИсходныйСтатусСкладскогоЗадания(ПараметрыЗадания.ТипЗадания) Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Неверный статус документа.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Не (ПараметрыЗадания.Склад = Склад)
		Или Не (ПараметрыЗадания.Помещение = Помещение) Тогда
		
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Склад и помещение в документе не соответствуют настройкам 
			|пользователя.'");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Контролер") Тогда
		Исполнитель = ПараметрыЗадания.Контролер;
	ИначеЕсли ПараметрыЗадания.Свойство("Исполнитель") Тогда
		Исполнитель = ПараметрыЗадания.Исполнитель;
	ИначеЕсли ПараметрыЗадания.Свойство("Ответственный") Тогда
		Исполнитель = ПараметрыЗадания.Ответственный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Если Не (Исполнитель = Пользователь) Тогда
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Складское задание должен выполнять другой работник склада.'");
			
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает значение перечисления - исходного статуса складского задания.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания.
//
Функция ИсходныйСтатусСкладскогоЗадания(ТипЗадания)
	
	Статус = Неопределено;
	
	Если ТипЗадания = "Отбор" 
		Или ТипЗадания = "Размещение" 
		Или ТипЗадания = "Перемещение" Тогда
		
		Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Статус = Перечисления.СтатусыПересчетовТоваров.Подготовлено;
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке;
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Функция возвращает исходного исполнителя складского задания.
//
// Параметры:
//	Задание - ДокументСсылка - складского задание,
//	ТипЗадания - Строка - тип складского задания.
//
// Возвращаемое значение:
//	СправочникСсылка.Пользователи - исходный исполнитель складского задания.
//
Функция ИсходныйИсполнительСкладскогоЗадания(Задание, ТипЗадания)
	
	Если ТипЗадания = "Отбор" Тогда
		Возврат Задание.Исполнитель;
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		Возврат Задание.Исполнитель;
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		Возврат Задание.Исполнитель;
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		Возврат Задание.Исполнитель;
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		Возврат Задание.Контролер;
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		Возврат Задание.Ответственный;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает значение варианта сканирования, которое указано в рабочем участке задания.
//
// Параметры:
//	Задание - ДокументСсылка.ПриходныйОрдерНаТовары, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание, которое принимается
//		в работу.
//	ТипЗадания - Строка - тип складского задания.
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПорядокОбработкиСкладскогоЗадания - вариант сканирования.
//
Функция ПорядокОбработкиТоваровСкладскогоЗадания(Задание, ТипЗадания, Пользователь) Экспорт
	
	ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ЯчейкаТовар;
	
	Если ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		РабочийУчасток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "РабочийУчасток");
		
		Если ЗначениеЗаполнено(РабочийУчасток) Тогда
			ПорядокОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийУчасток, "ПорядокОбработкиСкладскогоЗадания");
		Иначе
			Отбор = Новый Структура("Пользователь, ОткрываемаяФорма",
				Пользователь, Перечисления.ФормыОткрываемыеПриНачалеРаботыСистемы.РабочееМестоРаботникаСклада);
			
			НастройкиОткрытияФормы	= РегистрыСведений.НастройкиОткрытияФормПриНачалеРаботыСистемы.Получить(Отбор);
			ПараметрыНастройкиФормы	= НастройкиОткрытияФормы.Параметры; // ХранилищеЗначения -
			ПорядокОбработки		= ПараметрыНастройкиФормы.Получить().ПорядокОбработкиСкладскогоЗадания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПорядокОбработки;
	
КонецФункции

// Заполняет таблицы значений товарами, необходимыми при сканировании задания.
//
// Параметры:
//	Задание - ДокументСсылка - складского задание,
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура УстановитьТоварыЗадания(Задание, ПараметрыЗадания)
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	Если Не ЗначениеЗаполнено(ТипЗадания) Тогда
		
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
			|Произошла ошибка при получении товаров задания. Не удалось получить тип задания.'");
		
		РазблокироватьДанныеДляРедактирования(Задание);
		
		Возврат;
		
	КонецЕсли;
	
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	//++ Локализация
	Если ДокументОбъект.ШтрихкодыУпаковок.Количество() > 0 Тогда
		МаркиЗадания = РабочееМестоРаботникаСкладаЛокализация.МаркиЗадания(Задание, ТипЗадания);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадания, МаркиЗадания);
	КонецЕсли;
	//-- Локализация

	// При выполнении приемки товаров по приходному ордеру, существующие данные
	// в документе затираются фактически отсканированными значениями.
	Если ТипЗадания = "Приемка" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
			|Произошла ошибка при получении товаров задания. Не удалось получить объект задания.'");
		
		РазблокироватьДанныеДляРедактирования(Задание);
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Тогда
		
		Если ДокументОбъект.ТоварыОтбор.Количество() = 0 Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Произошла ошибка при получении товаров задания. Не заполнена табличная часть ""Товары 
				|(отбор)"" складского задания.'");
			
			Возврат;
			
		КонецЕсли;
		
		ТоварыЗадания = ТоварыЗадания(Задание, ТипЗадания);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ТоварыЗадания);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если ДокументОбъект.ТоварыРазмещение.Количество() = 0 Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Произошла ошибка при получении товаров задания. Не заполнена табличная часть ""Товары 
				|(размещение)"" складского задания.'");
			
			РазблокироватьДанныеДляРедактирования(Задание);
			
			Возврат;
			
		КонецЕсли;
		
		ТоварыЗадания = ТоварыЗадания(Задание, ТипЗадания);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ТоварыЗадания);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
		Если ДокументОбъект.ТоварыОтбор.Количество() = 0 Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Произошла ошибка при получении товаров задания. Не заполнена табличная часть ""Товары 
				|(размещение)"" складского задания.'");
			
			Возврат;
			
		КонецЕсли;
		
		Если ДокументОбъект.ТоварыРазмещение.Количество() = 0 Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Произошла ошибка при получении товаров задания. Не заполнена табличная часть ""Товары 
				|(размещение)"" складского задания.'");
			
			Возврат;
			
		КонецЕсли;
		
		ТоварыЗадания = ТоварыЗадания(Задание, ТипЗадания);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ТоварыЗадания);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Если ДокументОбъект.Товары.Количество() = 0 Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Произошла ошибка при получении товаров задания. Не заполнена табличная часть складского задания.'");
			
			РазблокироватьДанныеДляРедактирования(Задание);
			
			Возврат;
			
		КонецЕсли;
		
		ТоварыЗадания = ТоварыЗадания(Задание, ТипЗадания);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ТоварыЗадания);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Отбор = Новый Структура("Действие", Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать);
		
		МассивСтрок = ДокументОбъект.ОтгружаемыеТовары.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Произошла ошибка при получении товаров задания. Не заполнена табличная часть складского задания.'");
			
			РазблокироватьДанныеДляРедактирования(Задание);
			
			Возврат;
			
		КонецЕсли;
		
		Если Не КоличествоТарыЗаданияСоответствуетКоличествуМногооборотнойТарыТоваров(Задание) Тогда
			
			ПараметрыЗадания.КодВозврата = 0;
			ПараметрыЗадания.ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. Задание на проверку отбора составлено некорректно. Обратитесь к администратору.'");
			
			РазблокироватьДанныеДляРедактирования(Задание);
			
			ИмяСобытия = НСтр("ru = 'Принятие складского задания ""Проверка отбора"" в работу.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			КомментарийЖурнала = НСтр("ru = 'Не удалось взять складское задание в работу. 
				|Не поддерживается сценарий обработки заданий ""Проверка отбора"" 
				|в списке товаров, которых указаны товары, отгружаемые с многооборотной тарой и 
				|отдельно отгружаемой тарой.'");
			
			ЗаписьЖурналаРегистрации(ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				ДокументОбъект.Ссылка.Метаданные(),
				ДокументОбъект.Ссылка,
				КомментарийЖурнала);
			
		КонецЕсли;
		
		ТоварыЗадания = ТоварыЗадания(Задание, ТипЗадания);
		ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ТоварыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку соответствия количества многооборотной тары, поставляемой с товаром, количеству
// тары, указанной в документе.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задание.
//
// Возвращаемое значение:
//	Булево - Истина - количество многооборотной тары, поставляемой с товаром, соответствует количество тары,
//		указанной в документе.
//
Функция КоличествоТарыЗаданияСоответствуетКоличествуМногооборотнойТарыТоваров(Задание)
	
	ИспользоватьМногооборотнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	
	Если Не ИспользоватьМногооборотнуюТару Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипЧисло          = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ТипНоменклатура   = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипУпаковка       = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	
	// Создать структуру дерева тары.
	Тара = Новый ДеревоЗначений();
	Тара.Колонки.Добавить("Номенклатура",                                    ТипНоменклатура);
	Тара.Колонки.Добавить("Характеристика",                                  ТипХарактеристика);
	Тара.Колонки.Добавить("Упаковка",                                        ТипУпаковка);
	Тара.Колонки.Добавить("ЕдиницаИзмерения",                                ТипУпаковка);
	Тара.Колонки.Добавить("КоличествоНоменклатуры",                          ТипЧисло);
	Тара.Колонки.Добавить("НоменклатураМногооборотнаяТара",                  ТипНоменклатура);
	Тара.Колонки.Добавить("ХарактеристикаМногооборотнаяТара",                ТипХарактеристика);
	Тара.Колонки.Добавить("РекомендуемоеКоличествоТары",                     ТипЧисло);
	Тара.Колонки.Добавить("ПодобранноеКоличествоТары",                       ТипЧисло);
	Тара.Колонки.Добавить("ДоступноеКоличествоТары",                         ТипЧисло);
	Тара.Колонки.Добавить("КоличествоТарыВДокументе",                        ТипЧисло);
	Тара.Колонки.Добавить("МинимальноеКоличествоУпаковокМногооборотнойТары", ТипЧисло);
	Тара.Колонки.Добавить("Выбрана",                                         ТипЧисло);
	
	// Заполнить дерево многооборотной тары.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура   КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Количество     КАК Количество
	|
	|ПОМЕСТИТЬ
	|	ВтТоварыДокумента
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Задание
	|	И ТоварыДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)
	|	И НЕ ТоварыДокумента.ЭтоУпаковочныйЛист
	|	И ТоварыДокумента.Количество > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                  КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                КАК Характеристика,
	|	0                                                               КАК КоличествоНоменклатуры,
	|	ВтТоварыДокумента.Номенклатура.НоменклатураМногооборотнаяТара   КАК НоменклатураМногооборотнаяТара,
	|	ВтТоварыДокумента.Номенклатура.ХарактеристикаМногооборотнаяТара КАК ХарактеристикаМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)      КАК Упаковка,
	|	0                                                               КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|
	|ПОМЕСТИТЬ
	|	ВтТара
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ВтТоварыДокумента.Номенклатура.ПоставляетсяВМногооборотнойТаре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                               КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                             КАК Характеристика,
	|	ВтТоварыДокумента.Количество                                 КАК КоличествоНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)   КАК Упаковка,
	|	0                                                            КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                       КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                     КАК Характеристика,
	|	ВЫРАЗИТЬ(ВтТоварыДокумента.Количество /
	|		&ТекстЗапросаКоэффициентУпаковки1 КАК ЧИСЛО(15,0))               КАК КоличествоНоменклатуры,
	|	УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара                  КАК НоменклатураМногооборотнаяТара,
	|	УпаковкиНоменклатуры.ХарактеристикаМногооборотнаяТара                КАК ХарактеристикаМногооборотнаяТара,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))      КАК Упаковка,
	|	УпаковкиНоменклатуры.МинимальноеКоличествоУпаковокМногооборотнойТары КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО ВтТоварыДокумента.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|				ИЛИ (ВтТоварыДокумента.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			И ВтТоварыДокумента.Номенклатура = УпаковкиНоменклатуры.Владелец)
	|			И УпаковкиНоменклатуры.ПоставляетсяВМногооборотнойТаре
	|			И НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТара.Номенклатура                                              КАК Номенклатура,
	|	втТара.Характеристика                                            КАК Характеристика,
	|	втТара.Упаковка                                                  КАК Упаковка,
	|	ВЫБОР
	|		КОГДА втТара.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Составная)
	|			ТОГДА втТара.Упаковка.КоличествоУпаковок
	|		ИНАЧЕ
	|			&ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	втТара.Упаковка.Родитель                                         КАК Родитель,
	|	втТара.Номенклатура.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(втТара.МинимальноеКоличествоУпаковокМногооборотнойТары) КАК МинимальноеКоличествоУпаковокМногооборотнойТары,
	|	МАКСИМУМ(втТара.НоменклатураМногооборотнаяТара)                  КАК НоменклатураМногооборотнаяТара,
	|	МАКСИМУМ(втТара.ХарактеристикаМногооборотнаяТара)                КАК ХарактеристикаМногооборотнаяТара,
	|	МАКСИМУМ(втТара.КоличествоНоменклатуры)                          КАК КоличествоНоменклатуры
	|ИЗ
	|	втТара КАК втТара
	|
	|СГРУППИРОВАТЬ ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Упаковка
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Упаковка
	|
	|ИТОГИ
	|	МАКСИМУМ(НоменклатураМногооборотнаяТара),
	|	МАКСИМУМ(ХарактеристикаМногооборотнаяТара)
	|
	|ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура      КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика    КАК Характеристика,
	|	СУММА(ВтТоварыДокумента.Количество) КАК НачальноеКоличествоТары,
	|	СУММА(ВтТоварыДокумента.Количество) КАК КоличествоТары,
	|	НЕОПРЕДЕЛЕНО                        КАК СтрокаДерева
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыДокумента.Номенклатура,
	|	ВтТоварыДокумента.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВтТоварыДокумента.Номенклатура.Наименование,
	|	ВтТоварыДокумента.Характеристика.Наименование";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("УпаковкиНоменклатуры", Неопределено));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("втТара.Упаковка", "втТара.Номенклатура"));
	
	Запрос.УстановитьПараметр("Задание", Задание);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[2].Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаУпаковок = Новый ТаблицаЗначений();
	ТаблицаУпаковок.Колонки.Добавить("Номенклатура",                                    ТипНоменклатура);
	ТаблицаУпаковок.Колонки.Добавить("Характеристика",                                  ТипХарактеристика);
	ТаблицаУпаковок.Колонки.Добавить("Упаковка",                                        ТипУпаковка);
	ТаблицаУпаковок.Колонки.Добавить("Родитель");
	ТаблицаУпаковок.Колонки.Добавить("КоличествоНоменклатуры",                          ТипЧисло);
	ТаблицаУпаковок.Колонки.Добавить("КоличествоУпаковок",                              ТипЧисло);
	ТаблицаУпаковок.Колонки.Добавить("НоменклатураМногооборотнаяТара",                  ТипНоменклатура);
	ТаблицаУпаковок.Колонки.Добавить("ХарактеристикаМногооборотнаяТара",                ТипХарактеристика);
	ТаблицаУпаковок.Колонки.Добавить("МинимальноеКоличествоУпаковокМногооборотнойТары", ТипЧисло);
	
	ВсяТараПодобрана = Истина;
	
	ВыборкаНоменклатура = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТараДокумента       = РезультатЗапроса[3].Выгрузить();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			ТаблицаУпаковок.Очистить();
			
			ВыборкаУпаковки = ВыборкаХарактеристики.Выбрать();
			
			Пока ВыборкаУпаковки.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаУпаковки.Упаковка) Тогда
					
					НоваяСтрокаУпаковка = ТаблицаУпаковок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка, ВыборкаУпаковки);
					
				Иначе
					
					НоваяСтрока = Тара.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУпаковки);
					
					Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураМногооборотнаяТара) Тогда
						НоваяСтрока.РекомендуемоеКоличествоТары = Цел(НоваяСтрока.КоличествоНоменклатуры);
						НоваяСтрока.ПодобранноеКоличествоТары   = НоваяСтрока.РекомендуемоеКоличествоТары;
						
						ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, НоваяСтрока, ВсяТараПодобрана);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВывестиПодчиненныеУпаковки(НоваяСтрока.Строки, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), ТаблицаУпаковок,
				ТараДокумента, ВсяТараПодобрана);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТараДокумента Цикл
		
		Если ТекСтрока.НачальноеКоличествоТары = ТекСтрока.КоличествоТары Тогда
			
			ВсяТараПодобрана = Ложь;
			
			НоваяСтрока = Тара.Строки.Добавить();
			НоваяСтрока.НоменклатураМногооборотнаяТара   = ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаМногооборотнаяТара = ТекСтрока.Характеристика;
			НоваяСтрока.КоличествоТарыВДокументе         = ТекСтрока.КоличествоТары;
			НоваяСтрока.Выбрана                          = Истина;
			
		ИначеЕсли ТекСтрока.КоличествоТары > 0 И ТекСтрока.СтрокаДерева <> Неопределено Тогда
			
			ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе = ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе
				+ ТекСтрока.КоличествоТары;
			
			Если ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе <> ТекСтрока.СтрокаДерева.ПодобранноеКоличествоТары Тогда
				ВсяТараПодобрана = Ложь;
				
				ТекСтрока.СтрокаДерева.Выбрана = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Поместить тару в хранилище.
	ТаблицаТары = Новый ТаблицаЗначений();
	ТаблицаТары.Колонки.Добавить("Номенклатура",   ТипНоменклатура);
	ТаблицаТары.Колонки.Добавить("Характеристика", ТипХарактеристика);
	ТаблицаТары.Колонки.Добавить("Количество",     ТипЧисло);
	
	ДобавитьПодобраннуюТаруВТаблицу(Тара.Строки, ТаблицаТары);
	
	ТаблицаТары.Свернуть("Номенклатура,Характеристика", "Количество");
	
	ПодобраннаяТараСоответствуетЗаданию = Истина;
	
	Для Каждого СтрокаТары Из ТаблицаТары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика", СтрокаТары.Номенклатура, СтрокаТары.Характеристика);
		ТараПоДокументу = ТараДокумента.НайтиСтроки(Отбор);
		
		Если ТараПоДокументу.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПоДокументу = 0;
		
		Для Каждого СтрокаТарыДокумента Из ТараПоДокументу Цикл
			КоличествоПоДокументу = КоличествоПоДокументу + СтрокаТарыДокумента.НачальноеКоличествоТары;
		КонецЦикла;
		
		Если КоличествоПоДокументу > СтрокаТары.Количество Тогда
			ПодобраннаяТараСоответствуетЗаданию = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодобраннаяТараСоответствуетЗаданию;
	
КонецФункции

// Заполняет колонки количества тары в таблице ТараДокумента значениями по данным о таре в документе.
//
// Параметры:
//	ТараДокумента    - ТаблицаЗначений      - итоговая таблица тары,
//	СтрокаДерева     - СтрокаДереваЗначений - строка дерева тары,
//	ВсяТараПодобрана - Булево               - признак факта заполнения всей тары.
//
Процедура ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, СтрокаДерева, ВсяТараПодобрана)
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.НоменклатураМногооборотнаяТара,
		"ИспользованиеХарактеристик");
	
	Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
		И Не ЗначениеЗаполнено(СтрокаДерева.ХарактеристикаМногооборотнаяТара) Тогда
		
		Отбор = Новый Структура("Номенклатура", СтрокаДерева.НоменклатураМногооборотнаяТара);
		ТараДокументаСтроки = ТараДокумента.НайтиСтроки(Отбор);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", СтрокаДерева.НоменклатураМногооборотнаяТара);
		Отбор.Вставить("Характеристика", СтрокаДерева.ХарактеристикаМногооборотнаяТара);
		
		ТараДокументаСтроки = ТараДокумента.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	Если ТараДокументаСтроки.Количество() > 0
		И ТараДокументаСтроки[0].КоличествоТары > 0 Тогда
		
		СтрокаДерева.КоличествоТарыВДокументе = Мин(СтрокаДерева.РекомендуемоеКоличествоТары,
			ТараДокументаСтроки[0].КоличествоТары);
		
		ТараДокументаСтроки[0].КоличествоТары = ТараДокументаСтроки[0].КоличествоТары - СтрокаДерева.КоличествоТарыВДокументе;
		ТараДокументаСтроки[0].СтрокаДерева   = СтрокаДерева;
		
	КонецЕсли;
	
	Если СтрокаДерева.КоличествоТарыВДокументе <> СтрокаДерева.ПодобранноеКоличествоТары Тогда
		ВсяТараПодобрана = Ложь;
		
		СтрокаДерева.Выбрана = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево тары подчиненными упаковками, в том случае, если упаковки товары являются вложенными.
//
// Параметры:
//	УпаковкиСтроки   - КоллекцияСтрокДереваЗначений              - строки узла,
//	УпаковкаУзел     - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка для которой выводятся подчиненные упаковки,
//	ТаблицаУпаковок  - ТаблицаЗначений                           - таблица упаковок,
//	ТараДокумента    - ТаблицаЗначений                           - таблица многооборотной тары документа,
//	ВсяТараПодобрана - Булево                                    - признак подбора всей тары, с учетом вложенных упаковок.
//
Процедура ВывестиПодчиненныеУпаковки(УпаковкиСтроки, УпаковкаУзел, ТаблицаУпаковок, ТараДокумента, ВсяТараПодобрана)
	
	Отбор               = Новый Структура("Родитель", УпаковкаУзел);
	ПодчиненныеУпаковки = ТаблицаУпаковок.НайтиСтроки(Отбор);
	
	КоличествоНоменклатуры               = УпаковкиСтроки.Родитель.КоличествоНоменклатуры;
	КоличествоНоменклатурыКРаспределению = КоличествоНоменклатуры;
	
	Для Каждого ТекСтрока Из ПодчиненныеУпаковки Цикл
		
		НоваяСтрокаУпаковка = УпаковкиСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка, ТекСтрока);
		
		ОстатокУпаковок = Цел(КоличествоНоменклатуры % ТекСтрока.КоличествоУпаковок);
		
		НоваяСтрокаУпаковка.КоличествоНоменклатуры = НоваяСтрокаУпаковка.КоличествоНоменклатуры +
			?(ОстатокУпаковок > 0 И ОстатокУпаковок >= ТекСтрока.МинимальноеКоличествоУпаковокМногооборотнойТары, 1, 0);
		
		КоличествоТары = Цел(КоличествоНоменклатурыКРаспределению / ТекСтрока.КоличествоУпаковок);
		ОстатокТары    = Цел(КоличествоНоменклатуры % ТекСтрока.КоличествоУпаковок);
		
		Если КоличествоТары > 0 Тогда
			
			НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары = КоличествоТары;
			НоваяСтрокаУпаковка.ПодобранноеКоличествоТары = НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары;
			КоличествоНоменклатурыКРаспределению = ОстатокТары;
			
		КонецЕсли;
		
		Если ТекСтрока = ПодчиненныеУпаковки[ПодчиненныеУпаковки.Количество()-1]
			И КоличествоНоменклатурыКРаспределению > 0 Тогда
			
			НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары =
				?(ЗначениеЗаполнено(НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары),
					НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары, 0)
				+ ?(КоличествоНоменклатурыКРаспределению >= ТекСтрока.МинимальноеКоличествоУпаковокМногооборотнойТары, 1, 0);
			НоваяСтрокаУпаковка.ПодобранноеКоличествоТары  = НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары;
			
		КонецЕсли;
		
		ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, НоваяСтрокаУпаковка, ВсяТараПодобрана);
		ВывестиПодчиненныеУпаковки(НоваяСтрокаУпаковка.Строки, ТекСтрока.Упаковка, ТаблицаУпаковок, ТараДокумента,
			ВсяТараПодобрана);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет подобранную тару в итоговую таблицу тары.
//
// Параметры:
//	СтрокиДерева - КоллекцияСтрокДереваЗначений - строки дерева тары,
//	ТаблицаТары  - ТаблицаЗначений              - итоговая таблица тары.
//
Процедура ДобавитьПодобраннуюТаруВТаблицу(СтрокиДерева, ТаблицаТары)
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		
		Если ТекСтрока.Выбрана Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураМногооборотнаяТара) Тогда
				НоваяСтрока = ТаблицаТары.Добавить();
				НоваяСтрока.Номенклатура   = ТекСтрока.НоменклатураМногооборотнаяТара;
				НоваяСтрока.Характеристика = ТекСтрока.ХарактеристикаМногооборотнаяТара;
				НоваяСтрока.Количество     = ТекСтрока.ПодобранноеКоличествоТары;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПодобраннуюТаруВТаблицу(ТекСтрока.Строки, ТаблицаТары);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру с данными табличных частей документа - складского задания.
// Если тип складского задания - "Перемещение", то структура содержит 2 элемента - данные
// табличной части "ТоварыОтбор" и "ТоварыРазмещение".
//
// Параметры:
//	Задание - ДокументСсылка - складское задание
//	ТипЗадания - Строка - тип складского задания
//
// Возвращаемое значение:
//	Структура:
//	*НомерСтроки - Число
//	*Ячейка - СправочникСсылка.СкладскиеЯчейки
//	*Номенклатура - СправочникСсылка.Номенклатура
//	*Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//	*Серия - СправочникСсылка.СерииНоменклатуры
//	*Назначение - СправочникСсылка.Назначения
//	*Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*СтатусУказанияСерий - Число
//
Функция ТоварыЗадания(Задание, ТипЗадания) Экспорт
	
	Если ТипЗадания = "Отбор" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ячейка КАК Ячейка,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ячейка КАК Ячейка,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ячейка КАК Ячейка,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ячейка КАК Ячейка,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ячейка КАК Ячейка,
		|	Товары.Ячейка.Код КАК КодЯчейки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Товары.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.Артикул, """") КАК АртикулНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.Описание, """") КАК ОписаниеНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
		|	Товары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(Товары.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
		|	Товары.Серия КАК Серия,
		|	ЕСТЬNULL(Товары.Серия.Представление, """") КАК НаименованиеСерии,
		|	Товары.Назначение КАК Назначение,
		|	ЕСТЬNULL(Товары.Назначение.Представление, """") КАК НаименованиеНазначения,
		|	Товары.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Представление, """") КАК НаименованиеУпаковки,
		|	ЕСТЬNULL(&Коэффициент1, 1) КАК Коэффициент,
		|	ЕСТЬNULL(&Коэффициент2, 1) КАК КоэффициентЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(&Коэффициент3, 1) КАК КоэффициентЕдиницыИзмеренияОбъема,
		|	&ВесУпаковки КАК ВесУпаковки,
		|	&ОбъемУпаковки КАК ОбъемУпаковки,
		|	ЕСТЬNULL(Товары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения,
		|	ЕСТЬNULL(Товары.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ВесЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(Товары.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ОбъемЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияОбъема,
		|	ЕСТЬNULL(Товары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
		|	Товары.ИзлишекПорча КАК ИзлишекПорча,
		|	Товары.Количество КАК Количество,
		|	Товары.КоличествоФакт КАК КоличествоФакт,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковокВДокументе,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии
		|ИЗ
		|	Документ.ПересчетТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Действие КАК Действие,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Товары.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.Артикул, """") КАК АртикулНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.Описание, """") КАК ОписаниеНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
		|	Товары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(Товары.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
		|	Товары.Серия КАК Серия,
		|	ЕСТЬNULL(Товары.Серия.Представление, """") КАК НаименованиеСерии,
		|	Товары.Назначение КАК Назначение,
		|	ЕСТЬNULL(Товары.Назначение.Представление, """") КАК НаименованиеНазначения,
		|	Товары.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Представление, """") КАК НаименованиеУпаковки,
		|	ЕСТЬNULL(&Коэффициент1, 1) КАК Коэффициент,
		|	ЕСТЬNULL(&Коэффициент2, 1) КАК КоэффициентЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(&Коэффициент3, 1) КАК КоэффициентЕдиницыИзмеренияОбъема,
		|	&ВесУпаковки КАК ВесУпаковки,
		|	&ОбъемУпаковки КАК ОбъемУпаковки,
		|	ЕСТЬNULL(Товары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения,
		|	ЕСТЬNULL(Товары.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ВесЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(Товары.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ОбъемЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияОбъема,
		|	ЕСТЬNULL(Товары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
		|	0 КАК НеОтгружать,
		|	Товары.Количество КАК Количество,
		|	0 КАК КоличествоНеОтгружать,
		|	Товары.Количество КАК КоличествоВДокументе,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	0 КАК КоличествоУпаковокНеОтгружать,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковокВДокументе,
		|	0 КАК КоличествоУпаковокВДокументеНеотгружаемые,
		|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
		|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии,
		|	Товары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		ИсточникУпаковки = "Товары.Упаковка";
		ИсточникНоменклатуры = "Товары.Номенклатура";
		ИсточникЕдиницыИзмеренияВеса = "Товары.Номенклатура.ВесЕдиницаИзмерения";
		ИсточникЕдиницыИзмеренияОбъема = "Товары.Номенклатура.ОбъемЕдиницаИзмерения";
		
		// Подстановка "Коэффициент1" - коэффициент упаковки
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
		
		// Подстановка "Коэффициент2" - коэффициент единицы измерения веса номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
		
		// Подстановка "Коэффициент3" - коэффициент единицы измерения объема номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент3",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
		
		// Подстановка "ВесУпаковки"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
		
		// Подстановка "ОбъемУпаковки"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Задание", Задание);
	
	ТоварыЗадания = Новый Структура; // см. ПараметрыЗадания
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ТипЗадания = "Отбор" Тогда
		ТоварыЗадания.Вставить("ТоварыОтбор", РезультатЗапроса[0].Выгрузить());
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ТоварыЗадания.Вставить("Товары", РезультатЗапроса[0].Выгрузить());
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		ТоварыЗадания.Вставить("ТоварыРазмещение", РезультатЗапроса[0].Выгрузить());
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		ТоварыЗадания.Вставить("ТоварыОтбор", РезультатЗапроса[0].Выгрузить());
		ТоварыЗадания.Вставить("ТоварыРазмещение", РезультатЗапроса[1].Выгрузить());
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ТоварыЗадания.Вставить("ОтгружаемыеТовары", РезультатЗапроса[0].Выгрузить());
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет" Тогда
		
		ТипСтрокаШКЯчейки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
		ТоварыЗадания.Товары.Колонки.Добавить("ШтрихкодЯчейки", ТипСтрокаШКЯчейки);
		
		Для Каждого СтрокаТоваров Из ТоварыЗадания.Товары Цикл
			СтрокаТоваров.ШтрихкодЯчейки = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаТоваров.Ячейка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТоварыЗадания;
	
КонецФункции

// Процедура устанавливает статус <ВРаботе> складскому заданию.
// 
// Параметры:
//	Задание - ДокументСсылка.ПриходныйОрдерНаТовары, ДокументСсылка.РасходныйОрдерНаТовары, ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - 
//			складское задание, которое принимается в работу.
//	ПараметрыЗадания - см. ПараметрыЗадания
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания.
//
Процедура УстановитьСтатусЗаданияВРаботе(Задание, ПараметрыЗадания, Пользователь) Экспорт
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	Если ДокументОбъект = Неопределено Тогда
		
		РазблокироватьДанныеДляРедактирования(Задание);
		
		ПараметрыЗадания.КодВозврата = 0;
		
		// Добавить запись об ошибке в журнал регистрации.
		КомментарийЖурнала = НСтр("ru = 'Не удалось взять складское задание в работу. Произошла ошибка при установке статуса 
			|задания. Описание ошибки: Не удалось получить объект задания.'");
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при постановке складского задания в работу.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание,
			КомментарийЖурнала,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗадания = "Приемка" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Исполнитель = Пользователь;
		ДокументОбъект.БлокироватьЯчейки = Истина;
		ДокументОбъект.УчетныеДанныеЗаполнены = Ложь;
		ДокументОбъект.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе;
		
	ИначеЕсли ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ДокументОбъект.Исполнитель = Пользователь;
		ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ДокументОбъект.Контролер = Пользователь;
		ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВПроцессеПроверки;
		
	КонецЕсли;
	
	Попытка
		
		Если ТипЗадания = "Отбор"
			Или ТипЗадания = "Пересчет"
			Или ТипЗадания = "Размещение"
			Или ТипЗадания = "Перемещение" Тогда
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект, "ДатаНачалаВыполнения") Тогда
				ДокументОбъект.ДатаНачалаВыполнения = ТекущаяДатаСеанса();
			КонецЕсли;
			
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			
		ИначеЕсли ТипЗадания = "Приемка"
			Или ТипЗадания = "ПроверкаОтбора" Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		РазблокироватьДанныеДляРедактирования(Задание);
		
		ПараметрыЗадания.КодВозврата = 0;
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		
		// Добавить запись об ошибке в журнал регистрации.
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось взять складское задание в работу. Произошла ошибка при установке статуса задания. 
			|Описание ошибки: ""%1"".'"),
			ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при постановке складского задания в работу.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание,
			КомментарийЖурнала,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет параметры структуры 'ПараметрыЗадания'.
//
// Параметры:
//	Задание - ДокументСсылка - складское задание
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура УстановитьПараметрыЗадания(Задание, ПараметрыЗадания) Экспорт
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	ИменаРеквизитовЗадания = Новый Массив;
	ИменаРеквизитовЗадания.Добавить("Склад");
	ИменаРеквизитовЗадания.Добавить("Статус");
	ИменаРеквизитовЗадания.Добавить("Проведен");
	ИменаРеквизитовЗадания.Добавить("Помещение");
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение"
		Или ТипЗадания = "Пересчет" Тогда
		
		ПараметрыЗадания.Вставить("Исполнитель");
		
		ИменаРеквизитовЗадания.Добавить("Исполнитель");
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ПараметрыЗадания.Вставить("ЗонаПриемки");
		ПараметрыЗадания.Вставить("ЗонаОтгрузки");
		
		ИменаРеквизитовЗадания.Добавить("ЗонаПриемки");
		ИменаРеквизитовЗадания.Добавить("ЗонаОтгрузки");
		
	КонецЕсли;
	
	Если ТипЗадания = "Приемка" Тогда
		ПараметрыЗадания.Вставить("Статус");
		ПараметрыЗадания.Вставить("Ответственный");
		
		ИменаРеквизитовЗадания.Добавить("Статус");
		ИменаРеквизитовЗадания.Добавить("Ответственный");
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Приемка" Тогда
		
		ПараметрыЗадания.Вставить("Распоряжение");
		
		ИменаРеквизитовЗадания.Добавить("Распоряжение");
		
	КонецЕсли;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		ПараметрыЗадания.Вставить("Контролер");
		ПараметрыЗадания.Вставить("ДатаОтгрузки");
		
		ИменаРеквизитовЗадания.Добавить("Контролер");
		ИменаРеквизитовЗадания.Добавить("ДатаОтгрузки");
	КонецЕсли;
	
	Если ТипЗадания = "Приемка"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		ИменаРеквизитовЗадания.Добавить("СкладскаяОперация");
		
		ПараметрыЗадания.Вставить("СкладскаяОперация");
		
	КонецЕсли;
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, ИменаРеквизитовЗадания);
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, РеквизитыЗадания);
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в табличных частях структуры 'ПараметрыЗадания'
// операций "Приемка" и "ПроверкаОтбора".
//
// Параметры:
//	Задание - ДокументСсылка - складское задание
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура ЗаполнитьСтатусыУказанияСерий(Задание, ПараметрыЗадания) Экспорт
	
	Перем ПараметрыУказанияСерий;
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	ОтборОтсканирован = ПараметрыЗадания.ОтборОтсканирован;
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ПараметрыУказанияСерий = Документы.ПересчетТоваров.ПараметрыУказанияСерий(ДокументОбъект);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Обработки.ПроверкаКоличестваТоваровВДокументе);
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ОтгружаемыеТовары";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ОтгружаемыеТовары";
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПараметрыЗадания, ПараметрыУказанияСерий.Отбор);
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПараметрыЗадания, ПараметрыУказанияСерий.Размещение);
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПараметрыЗадания, ПараметрыУказанияСерий.Отбор);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПараметрыЗадания, ПараметрыУказанияСерий.Размещение);
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПараметрыЗадания, ПараметрыУказанияСерий);
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПараметрыЗадания, ПараметрыУказанияСерий);
		
		УдаляемыеСтроки = Новый Массив;
		ОтгружаемыеТовары = ПараметрыЗадания.ОтгружаемыеТовары;
		
		Для Каждого СтрокаТовара Из ОтгружаемыеТовары Цикл
			
			Если СтрокаТовара.ЭтоУпаковочныйЛист
				Или Не (СтрокаТовара.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать) Тогда
				
				УдаляемыеСтроки.Добавить(СтрокаТовара);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТовара Из УдаляемыеСтроки Цикл
			ПараметрыЗадания.ОтгружаемыеТовары.Удалить(СтрокаТовара);
		КонецЦикла;
		
		ОтгружаемыеТовары.Колонки.Удалить("ЭтоУпаковочныйЛист");
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ЗаполнитьСтатусыУказанияСерийТоварыОтборРазмещение(Задание, ПараметрыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в табличных частях структуры 'ПараметрыЗадания'
// операций "Отбор", "Размещение" и "Перемещение".
//
// Параметры:
//	Задание - ДокументСсылка - складское задание,
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура ЗаполнитьСтатусыУказанияСерийТоварыОтборРазмещение(Задание, ПараметрыЗадания)
	
	Запрос = Новый Запрос;
	ТоварыЗадания = Новый Структура; // см. ПараметрыЗадания
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	Если ТипЗадания = "Отбор" Тогда
		
		Запрос.УстановитьПараметр("ТоварыОтбор", ПараметрыЗадания.ТоварыОтбор);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТоварыОтборДляЗапроса
		|ИЗ
		|	&ТоварыОтбор КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТоварыОтборДляЗапроса.НомерСтроки) КАК НомерСтроки,
		|	ТоварыОтбор.Ячейка КАК Ячейка,
		|	ТоварыОтбор.Ячейка.Код КАК КодЯчейки,
		|	ТоварыОтбор.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Артикул, """") КАК АртикулНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Описание, """") КАК ОписаниеНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
		|	ТоварыОтбор.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ТоварыОтбор.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
		|	ТоварыОтбор.Серия КАК Серия,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Представление, """") КАК НаименованиеСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Номер, """") КАК НомерСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ГоденДо,
		|	ТоварыОтбор.Назначение КАК Назначение,
		|	ЕСТЬNULL(ТоварыОтбор.Назначение.Представление, """") КАК НаименованиеНазначения,
		|	ТоварыОтбор.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(ТоварыОтбор.Упаковка.Представление, """") КАК НаименованиеУпаковки,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент1, 1)) КАК Коэффициент,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент2, 1)) КАК КоэффициентЕдиницыИзмеренияВеса,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент3, 1)) КАК КоэффициентЕдиницыИзмеренияОбъема,
		|	МИНИМУМ(&ВесУпаковки) КАК ВесУпаковки,
		|	МИНИМУМ(&ОбъемУпаковки) КАК ОбъемУпаковки,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияОбъема,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
		|	СУММА(ТоварыОтбор.Количество) КАК Количество,
		|	СУММА(ТоварыОтбор.КоличествоОтобрано) КАК КоличествоОтобрано,
		|	СУММА(ТоварыОтбор.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТоварыОтбор.КоличествоУпаковокОтобрано) КАК КоличествоУпаковокОтобрано,
		|	СУММА(ТоварыОтбор.КоличествоУпаковок) КАК КоличествоУпаковокВДокументе,
		|	ТоварыОтборДляЗапроса.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии
		|ИЗ
		|	ТоварыОтборДляЗапроса КАК ТоварыОтборДляЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыОтбор
		|		ПО ТоварыОтборДляЗапроса.НомерСтроки = ТоварыОтбор.НомерСтроки
		|ГДЕ
		|	ТоварыОтбор.Ссылка = &Задание
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОтбор.Номенклатура,
		|	ТоварыОтбор.Упаковка,
		|	ТоварыОтбор.Характеристика,
		|	ТоварыОтбор.Ячейка,
		|	ТоварыОтбор.Серия,
		|	ТоварыОтборДляЗапроса.СтатусУказанияСерий,
		|	ТоварыОтбор.Ячейка.Код,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Артикул, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Описание, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)),
		|	ТоварыОтбор.Назначение,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Номер, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Характеристика.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Назначение.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Упаковка.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.Представление, """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения), """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыОтбор.Ячейка.ПорядокОбхода,
		|	ТоварыОтбор.Ячейка.Код,
		|	ТоварыОтбор.Номенклатура.Наименование,
		|	ТоварыОтбор.Характеристика,
		|	ТоварыОтбор.Назначение,
		|	ТоварыОтбор.Упаковка,
		|	ТоварыОтбор.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыОтборДляЗапроса";
		
		ТекстЗапросаМерныхЕдиницУпаковки(ТекстЗапроса, "ТоварыОтбор");
		
		ИсточникУпаковки = "ТоварыОтбор.Упаковка";
		ИсточникНоменклатуры = "ТоварыОтбор.Номенклатура";
		ИсточникЕдиницыИзмеренияВеса = "ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения";
		ИсточникЕдиницыИзмеренияОбъема = "ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения";
		
		// Подстановка "Коэффициент1" - коэффициент упаковки
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
		
		// Подстановка "Коэффициент2" - коэффициент единицы измерения веса номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
		
		// Подстановка "Коэффициент3" - коэффициент единицы измерения объема номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент3",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Запрос.УстановитьПараметр("ТоварыРазмещение", ПараметрыЗадания.ТоварыРазмещение);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТоварыРазмещениеДляЗапроса
		|ИЗ
		|	&ТоварыРазмещение КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТоварыРазмещениеДляЗапроса.НомерСтроки) КАК НомерСтроки,
		|	ТоварыРазмещение.Ячейка КАК Ячейка,
		|	ТоварыРазмещение.Ячейка.Код КАК КодЯчейки,
		|	ТоварыРазмещение.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Артикул, """") КАК АртикулНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Описание, """") КАК ОписаниеНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
		|	ТоварыРазмещение.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ТоварыРазмещение.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
		|	ТоварыРазмещение.Серия КАК Серия,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Представление, """") КАК НаименованиеСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Номер, """") КАК НомерСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ГоденДо,
		|	ТоварыРазмещение.Назначение КАК Назначение,
		|	ЕСТЬNULL(ТоварыРазмещение.Назначение.Представление, """") КАК НаименованиеНазначения,
		|	ТоварыРазмещение.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(ТоварыРазмещение.Упаковка.Представление, """") КАК НаименованиеУпаковки,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент1, 1)) КАК Коэффициент,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент2, 1)) КАК КоэффициентЕдиницыИзмеренияВеса,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент3, 1)) КАК КоэффициентЕдиницыИзмеренияОбъема,
		|	МИНИМУМ(&ВесУпаковки) КАК ВесУпаковки,
		|	МИНИМУМ(&ОбъемУпаковки) КАК ОбъемУпаковки,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияОбъема,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
		|	СУММА(ТоварыРазмещение.Количество) КАК Количество,
		|	СУММА(ТоварыРазмещение.КоличествоРазмещено) КАК КоличествоРазмещено,
		|	СУММА(ТоварыРазмещение.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТоварыРазмещение.КоличествоУпаковокРазмещено) КАК КоличествоУпаковокРазмещено,
		|	СУММА(ТоварыРазмещение.КоличествоУпаковок) КАК КоличествоУпаковокВДокументе,
		|	ТоварыРазмещениеДляЗапроса.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии
		|ИЗ
		|	ТоварыРазмещениеДляЗапроса КАК ТоварыРазмещениеДляЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыРазмещение
		|		ПО ТоварыРазмещениеДляЗапроса.НомерСтроки = ТоварыРазмещение.НомерСтроки
		|ГДЕ
		|	ТоварыРазмещение.Ссылка = &Задание
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРазмещение.Номенклатура,
		|	ТоварыРазмещение.Упаковка,
		|	ТоварыРазмещение.Характеристика,
		|	ТоварыРазмещение.Ячейка,
		|	ТоварыРазмещение.Серия,
		|	ТоварыРазмещениеДляЗапроса.СтатусУказанияСерий,
		|	ТоварыРазмещение.Ячейка.Код,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Артикул, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Описание, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)),
		|	ТоварыРазмещение.Назначение,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Номер, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Характеристика.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Назначение.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Упаковка.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.Представление, """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения), """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыРазмещение.Ячейка.ПорядокОбхода,
		|	ТоварыРазмещение.Ячейка.Код,
		|	ТоварыРазмещение.Номенклатура.Наименование,
		|	ТоварыРазмещение.Характеристика,
		|	ТоварыРазмещение.Назначение,
		|	ТоварыРазмещение.Упаковка,
		|	ТоварыРазмещение.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыРазмещениеДляЗапроса";
		
		ТекстЗапросаМерныхЕдиницУпаковки(ТекстЗапроса, "ТоварыРазмещение");
		
		ИсточникУпаковки = "ТоварыРазмещение.Упаковка";
		ИсточникНоменклатуры = "ТоварыРазмещение.Номенклатура";
		ИсточникЕдиницыИзмеренияВеса = "ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения";
		ИсточникЕдиницыИзмеренияОбъема = "ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения";
		
		// Подстановка "Коэффициент1" - коэффициент упаковки
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
		
		// Подстановка "Коэффициент2" - коэффициент единицы измерения веса номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
		
		// Подстановка "Коэффициент3" - коэффициент единицы измерения объема номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент3",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Запрос.УстановитьПараметр("ТоварыОтбор", ПараметрыЗадания.ТоварыОтбор);
		Запрос.УстановитьПараметр("ТоварыРазмещение", ПараметрыЗадания.ТоварыРазмещение);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТоварыОтборДляЗапроса
		|ИЗ
		|	&ТоварыОтбор КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТоварыОтборДляЗапроса.НомерСтроки) КАК НомерСтроки,
		|	ТоварыОтбор.Ячейка КАК Ячейка,
		|	ТоварыОтбор.Ячейка.Код КАК КодЯчейки,
		|	ТоварыОтбор.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Артикул, """") КАК АртикулНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Описание, """") КАК ОписаниеНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
		|	ТоварыОтбор.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ТоварыОтбор.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
		|	ТоварыОтбор.Серия КАК Серия,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Представление, """") КАК НаименованиеСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Номер, """") КАК НомерСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ГоденДо,
		|	ТоварыОтбор.Назначение КАК Назначение,
		|	ЕСТЬNULL(ТоварыОтбор.Назначение.Представление, """") КАК НаименованиеНазначения,
		|	ТоварыОтбор.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(ТоварыОтбор.Упаковка.Представление, """") КАК НаименованиеУпаковки,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент1, 1)) КАК Коэффициент,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент2, 1)) КАК КоэффициентЕдиницыИзмеренияВеса,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент3, 1)) КАК КоэффициентЕдиницыИзмеренияОбъема,
		|	МИНИМУМ(&ВесУпаковки1) КАК ВесУпаковки,
		|	МИНИМУМ(&ОбъемУпаковки1) КАК ОбъемУпаковки,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияОбъема,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
		|	СУММА(ТоварыОтбор.Количество) КАК Количество,
		|	СУММА(ТоварыОтбор.КоличествоОтобрано) КАК КоличествоОтобрано,
		|	СУММА(ТоварыОтбор.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТоварыОтбор.КоличествоУпаковокОтобрано) КАК КоличествоУпаковокОтобрано,
		|	СУММА(ТоварыОтбор.КоличествоУпаковок) КАК КоличествоУпаковокВДокументе,
		|	ТоварыОтборДляЗапроса.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии
		|ИЗ
		|	ТоварыОтборДляЗапроса КАК ТоварыОтборДляЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ТоварыОтбор
		|		ПО ТоварыОтборДляЗапроса.НомерСтроки = ТоварыОтбор.НомерСтроки
		|ГДЕ
		|	ТоварыОтбор.Ссылка = &Задание
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОтбор.Номенклатура,
		|	ТоварыОтбор.Упаковка,
		|	ТоварыОтбор.Характеристика,
		|	ТоварыОтбор.Ячейка,
		|	ТоварыОтбор.Серия,
		|	ТоварыОтборДляЗапроса.СтатусУказанияСерий,
		|	ТоварыОтбор.Ячейка.Код,
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Артикул, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Описание, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)),
		|	ТоварыОтбор.Назначение,
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Номер, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Характеристика.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Назначение.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Упаковка.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Серия.Представление, """"),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыОтбор.Номенклатура.ВидНоменклатуры.Представление, """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения), """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыОтбор.Ячейка.ПорядокОбхода,
		|	ТоварыОтбор.Ячейка.Код,
		|	ТоварыОтбор.Номенклатура.Наименование,
		|	ТоварыОтбор.Характеристика,
		|	ТоварыОтбор.Назначение,
		|	ТоварыОтбор.Упаковка,
		|	ТоварыОтбор.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыОтборДляЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТоварыРазмещениеДляЗапроса
		|ИЗ
		|	&ТоварыРазмещение КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТоварыРазмещениеДляЗапроса.НомерСтроки) КАК НомерСтроки,
		|	ТоварыРазмещение.Ячейка КАК Ячейка,
		|	ТоварыРазмещение.Ячейка.Код КАК КодЯчейки,
		|	ТоварыРазмещение.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Представление, """") КАК НаименованиеНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Артикул, """") КАК АртикулНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Описание, """") КАК ОписаниеНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
		|	ТоварыРазмещение.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ТоварыРазмещение.Характеристика.Представление, """") КАК НаименованиеХарактеристики,
		|	ТоварыРазмещение.Серия КАК Серия,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Представление, """") КАК НаименованиеСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Номер, """") КАК НомерСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ГоденДо,
		|	ТоварыРазмещение.Назначение КАК Назначение,
		|	ЕСТЬNULL(ТоварыРазмещение.Назначение.Представление, """") КАК НаименованиеНазначения,
		|	ТоварыРазмещение.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(ТоварыРазмещение.Упаковка.Представление, """") КАК НаименованиеУпаковки,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент4, 1)) КАК Коэффициент,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент5, 1)) КАК КоэффициентЕдиницыИзмеренияВеса,
		|	МИНИМУМ(ЕСТЬNULL(&Коэффициент6, 1)) КАК КоэффициентЕдиницыИзмеренияОбъема,
		|	МИНИМУМ(&ВесУпаковки2) КАК ВесУпаковки,
		|	МИНИМУМ(&ОбъемУпаковки2) КАК ОбъемУпаковки,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмерения,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияВеса,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения), """") КАК НаименованиеЕдиницыИзмеренияОбъема,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
		|	СУММА(ТоварыРазмещение.Количество) КАК Количество,
		|	СУММА(ТоварыРазмещение.КоличествоРазмещено) КАК КоличествоРазмещено,
		|	СУММА(ТоварыРазмещение.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТоварыРазмещение.КоличествоУпаковокРазмещено) КАК КоличествоУпаковокРазмещено,
		|	СУММА(ТоварыРазмещение.КоличествоУпаковок) КАК КоличествоУпаковокВДокументе,
		|	ТоварыРазмещениеДляЗапроса.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии
		|ИЗ
		|	ТоварыРазмещениеДляЗапроса КАК ТоварыРазмещениеДляЗапроса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ТоварыРазмещение
		|		ПО ТоварыРазмещениеДляЗапроса.НомерСтроки = ТоварыРазмещение.НомерСтроки
		|ГДЕ
		|	ТоварыРазмещение.Ссылка = &Задание
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыРазмещение.Номенклатура,
		|	ТоварыРазмещение.Упаковка,
		|	ТоварыРазмещение.Характеристика,
		|	ТоварыРазмещение.Ячейка,
		|	ТоварыРазмещение.Серия,
		|	ТоварыРазмещениеДляЗапроса.СтатусУказанияСерий,
		|	ТоварыРазмещение.Ячейка.Код,
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Артикул, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Описание, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1)),
		|	ТоварыРазмещение.Назначение,
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Номер, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Характеристика.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Назначение.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Упаковка.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Серия.Представление, """"),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ТоварыРазмещение.Номенклатура.ВидНоменклатуры.Представление, """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения), """"),
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения), """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыРазмещение.Ячейка.ПорядокОбхода,
		|	ТоварыРазмещение.Ячейка.Код,
		|	ТоварыРазмещение.Номенклатура.Наименование,
		|	ТоварыРазмещение.Характеристика,
		|	ТоварыРазмещение.Назначение,
		|	ТоварыРазмещение.Упаковка,
		|	ТоварыРазмещение.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыРазмещениеДляЗапроса";
		
		ТекстЗапросаМерныхЕдиницУпаковки(ТекстЗапроса, "ТоварыОтбор", 1);
		ТекстЗапросаМерныхЕдиницУпаковки(ТекстЗапроса, "ТоварыРазмещение", 2);
		
		ИсточникУпаковки = "ТоварыОтбор.Упаковка";
		ИсточникНоменклатуры = "ТоварыОтбор.Номенклатура";
		ИсточникЕдиницыИзмеренияВеса = "ТоварыОтбор.Номенклатура.ВесЕдиницаИзмерения";
		ИсточникЕдиницыИзмеренияОбъема = "ТоварыОтбор.Номенклатура.ОбъемЕдиницаИзмерения";
		
		// Подстановка "Коэффициент1" - коэффициент упаковки
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
		
		// Подстановка "Коэффициент2" - коэффициент единицы измерения веса номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
		
		// Подстановка "Коэффициент3" - коэффициент единицы измерения объема номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент3",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
		
		
		ИсточникУпаковки = "ТоварыРазмещение.Упаковка";
		ИсточникНоменклатуры = "ТоварыРазмещение.Номенклатура";
		ИсточникЕдиницыИзмеренияВеса = "ТоварыРазмещение.Номенклатура.ВесЕдиницаИзмерения";
		ИсточникЕдиницыИзмеренияОбъема = "ТоварыРазмещение.Номенклатура.ОбъемЕдиницаИзмерения";
		
		// Подстановка "Коэффициент4" - коэффициент упаковки
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент4",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
		
		// Подстановка "Коэффициент5" - коэффициент единицы измерения веса номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент5",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
		
		// Подстановка "Коэффициент6" - коэффициент единицы измерения объема номенклатуры
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент6",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("Задание", Задание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Менеджер.Закрыть();
	
	Если ТипЗадания = "Отбор" Тогда
		ТоварыЗадания.Вставить("ТоварыОтбор", РезультатЗапроса[1].Выгрузить());
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		ТоварыЗадания.Вставить("ТоварыРазмещение", РезультатЗапроса[1].Выгрузить());
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		ТоварыЗадания.Вставить("ТоварыОтбор", РезультатЗапроса[1].Выгрузить());
		ТоварыЗадания.Вставить("ТоварыРазмещение", РезультатЗапроса[4].Выгрузить());
	КонецЕсли;
	
	ТипСтрокаШКЯчейки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ТипСтрокаШКНоменклатуры = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(360));
	
	Для Каждого ТаблицаТоваров Из ТоварыЗадания Цикл
		
		Таблица = ТаблицаТоваров.Значение; // ТаблицаЗначений
		
		Таблица.Колонки.Добавить("ШтрихкодЯчейки", ТипСтрокаШКЯчейки);
		Таблица.Колонки.Добавить("ШтрихкодНоменклатуры", ТипСтрокаШКНоменклатуры);
		
		Для Каждого СтрокаТоваров Из Таблица Цикл
			
			СтрокаТоваров.ШтрихкодЯчейки = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(СтрокаТоваров.Ячейка);
			
			ШтрихкодыНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(СтрокаТоваров.Номенклатура,
				СтрокаТоваров.Характеристика, СтрокаТоваров.Упаковка);
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка)
				И ШтрихкодыНоменклатуры.Количество() = 0
				И Не (СтрокаТоваров.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес
					Или СтрокаТоваров.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем
					Или СтрокаТоваров.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина
					Или СтрокаТоваров.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Площадь) Тогда
				
				ШтрихкодыНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(СтрокаТоваров.Номенклатура,
					СтрокаТоваров.Характеристика, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				
			КонецЕсли;
			
			Для Каждого Штрихкод Из ШтрихкодыНоменклатуры Цикл
				СтрокаТоваров.ШтрихкодНоменклатуры = СтрокаТоваров.ШтрихкодНоменклатуры + "," + Штрихкод;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ТоварыЗадания);
	
КонецПроцедуры

// Процедура подставляет в текст запроса текст запроса получения реквизитов мерных единиц
// справочника "УпаковкиЕдиницыИзмерения".
//
// Параметры:
//	ТекстЗапроса - Строка,
//	ИмяТаблицы - Строка - наименование ТЧ в тексте запроса,
//	НомерПараметра - Строка - номер параметра, заменяемого в тексте запроса.
//
Процедура ТекстЗапросаМерныхЕдиницУпаковки(ТекстЗапроса, ИмяТаблицы, НомерПараметра = "")
	
	ИсточникУпаковки = ИмяТаблицы + ".Упаковка";
	ИсточникНоменклатуры = ИмяТаблицы + ".Номенклатура";
	
	// Подстановка "Вес"
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесУпаковки" + НомерПараметра,
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
	
	// Подстановка "Объем"
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемУпаковки" + НомерПараметра,
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
	
КонецПроцедуры

// Возвращает структуру для хранения сведений о товаре.
//
// Возвращаемое значение:
// 	Структура - описание значения сканируемого товара, которое содержит следующие поля:
//	* УпаковочныйЛист - ДокументСсылка.УпаковочныйЛист - упаковочный лист, в состав которого входит товар.
//	* ЭтоУпаковочныйЛист - Булево - Истина, если товар используется в качестве упаковочного листа.
//	* ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин - тип измеряемой веоичины товара.
//	* НаименованиеЕдиницыИзмеренияОбъема - Строка - представление единицы измерения объема товара.
//	* ЕдиницаИзмеренияОбъема - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения объема товара.
//	* НаименованиеЕдиницыИзмеренияВеса - Строка - представление единицы измерения веса товара.
//	* ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения веса товара.
//	* НаименованиеЕдиницыИзмерения - Строка - представление единицы измерения товара.
//	* ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения товара.
//	* ОбъемУпаковки - Число - значение объема упаковки товара.
//	* ВесУпаковки - Число - значение веса упаковки товара.
//	* КоэффициентЕдиницыИзмеренияОбъема - Число - коэффициент объема упаковки товара.
//	* КоэффициентЕдиницыИзмеренияВеса - Число - коэффициент веса упаковки товара.
//	* Коэффициент - Число - коэффициент упаковки товара.
//	* НаименованиеУпаковки - Строка - представление упаковки товара.
//	* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
//	* НаименованиеНазначения - Строка - представление сведений об обособлении товара.
//	* Назначение - СправочникСсылка.Назначения - сведения об обособлении товара.
//	* ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности - точность срока использования серии товара.
//	* ИспользоватьСрокГодностиСерии - Булево - Истина, если используется информация о срока годности серии товара.
//	* ИспользоватьНомерСерии - Булево - Истина, если используется учет серий в разрезе номеров.
//	* ГоденДо - Дата - дата истечения срока годности серии товара.
//	* НомерСерии - Строка - номер серии.
//	* НаименованиеСерии - Строка - представление серии товара.
//	* Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//	* НаименованиеХарактеристики - Строка - представление характеристики товара.
//	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//	* ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип товара.
//	* ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид товара.
//	* КоличествоПоШтрихкоду - Число - количество товара, которое содержится в сведениях его штрихкода.
//	* Штрихкод - Строка - штрихкод товара.
//	* ОписаниеНоменклатуры - Строка - сведения о товаре.
//	* АртикулНоменклатуры - Строка - артикул товара.
//	* НаименованиеНоменклатуры - Строка - представление товара.
//	* Номенклатура - СправочникСсылка.Номенклатура - товар.
//	* ТекстСообщения - Строка - сообщение пользователю об ошибках, выявленных при сканировании штрихкода товара.
//	* ТипОшибки - Строка - тип ошибки санирования штрихкода товара.
//	* КодВозврата - Число - код результата поиска сведений о товаре. 1 - товар указан корректно.
//
Функция ПараметрыТовара()
	
	ПараметрыТовара = Новый Структура;
	
	ПараметрыТовара.Вставить("КодВозврата", 1);
	ПараметрыТовара.Вставить("ТипОшибки", "");
	ПараметрыТовара.Вставить("ТекстСообщения", "");
	
	ПараметрыТовара.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеНоменклатуры", "");
	ПараметрыТовара.Вставить("АртикулНоменклатуры", "");
	ПараметрыТовара.Вставить("ОписаниеНоменклатуры", "");
	
	ПараметрыТовара.Вставить("Штрихкод", ""); // Для сохранения штрихкодов при приемке
	ПараметрыТовара.Вставить("КоличествоПоШтрихкоду", 0);
	
	ПараметрыТовара.Вставить("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	
	ПараметрыТовара.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеХарактеристики", "");
	
	ПараметрыТовара.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеСерии", "");
	ПараметрыТовара.Вставить("НомерСерии", "");
	ПараметрыТовара.Вставить("ГоденДо", Дата("00010101"));
	
	ПараметрыТовара.Вставить("ИспользоватьНомерСерии", Ложь);
	ПараметрыТовара.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	ПараметрыТовара.Вставить("ТочностьУказанияСрокаГодностиСерии",
		Перечисления.ТочностиУказанияСрокаГодности.ПустаяСсылка());
	
	ПараметрыТовара.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеНазначения", "");
	
	ПараметрыТовара.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеУпаковки", "");
	
	ПараметрыТовара.Вставить("Коэффициент", 0);
	ПараметрыТовара.Вставить("КоэффициентЕдиницыИзмеренияВеса", 0);
	ПараметрыТовара.Вставить("КоэффициентЕдиницыИзмеренияОбъема", 0);
	
	ПараметрыТовара.Вставить("ВесУпаковки", 0);
	ПараметрыТовара.Вставить("ОбъемУпаковки", 0);
	
	ПараметрыТовара.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеЕдиницыИзмерения", "");
	ПараметрыТовара.Вставить("ЕдиницаИзмеренияВеса", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеЕдиницыИзмеренияВеса", "");
	ПараметрыТовара.Вставить("ЕдиницаИзмеренияОбъема", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ПараметрыТовара.Вставить("НаименованиеЕдиницыИзмеренияОбъема", "");
	ПараметрыТовара.Вставить("ТипИзмеряемойВеличины", Перечисления.ТипыИзмеряемыхВеличин.ПустаяСсылка());
	
	ПараметрыТовара.Вставить("ЭтоУпаковочныйЛист", Ложь);
	ПараметрыТовара.Вставить("УпаковочныйЛист", Документы.УпаковочныйЛист.ПустаяСсылка());
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Проверяет результат возвращаемый функцией 'РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам()'.
// Если соответствия по штрихкоду нет или структура параметров товара не содержит полей, то считается,
// что поиск по штрихкоду ничего не нашел.
//
// Параметры:
//	Штрихкод - Строка - штрихкод товара
//	ДанныеПоШтрихкодам - см. РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам
//
// Возвращаемое значение:
//	Булево - Истина - товар по штрихкоду не найден, Ложь - найден.
//
Функция ТоварНеНайден(Штрихкод, ДанныеПоШтрихкодам)
	
	ДанныеПоШтрихкодуТовара = ДанныеПоШтрихкодам.Получить(Штрихкод);
	
	Если ДанныеПоШтрихкодуТовара = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПоШтрихкодуТовара) = Тип("Структура") Тогда
		Если ДанныеПоШтрихкодуТовара.НеизвестныйШтрихкод Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру для хранения сведений о серии.
// 
// Возвращаемое значение:
// 	Структура - описание значения сканируемой серии товара, которое содержит следующие поля:
//	* ГоденДо - Дата - срок годности серии товара.
//	* НомерСерии - Строка - номер серии товара.
//	* Серия - СправочникСсылка.СерииНоменклатуры - ссылка на серию товара в информационной базе.
//	* ТекстСообщения - Строка - сообщение пользователю о результатах указания серии товара.
//	* ТипОшибки - Строка - идентификатор типа ошибки указания серии товара.
//	* КодВозврата - Число - код результата поиска сведений о серии товара. 1 - серия товара указана корректно.
//
Функция ПараметрыСерии()
	
	ПараметрыСерии = Новый Структура();
	
	ПараметрыСерии.Вставить("КодВозврата", 1);
	ПараметрыСерии.Вставить("ТипОшибки", "");
	ПараметрыСерии.Вставить("ТекстСообщения", "");
	
	ПараметрыСерии.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	ПараметрыСерии.Вставить("НомерСерии", "");
	ПараметрыСерии.Вставить("ГоденДо", Дата("00010101"));
	
	Возврат ПараметрыСерии;
	
КонецФункции

// Проверяет, является ли введенный вручную срок годности серии корректным.
//
// Параметры:
//	ПараметрыУказанияСерии - Структура
//	СрокГодностиСтрокой - Строка - срок годности серии строкой
//	СрокГодности - Неопределено - переменная в которую записывается дата срока годности полученная, из строки
//
// Возвращаемое значение:
//	Булево - Истина - срок годности корректный, Ложь - нет.
//
Функция СрокГодностиСерииКорректный(ПараметрыУказанияСерии, Знач СрокГодностиСтрокой, СрокГодности = Неопределено)
	
	ДатаСтрокой = "";
	СрокГодностиСтрокой = СокрЛП(СрокГодностиСтрокой);
	
	Если ПараметрыУказанияСерии.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев Тогда
		// MM.yy
		ДатаСтрокой = "20" + Прав(СрокГодностиСтрокой, 2) + Лев(СрокГодностиСтрокой, 2) + "00000000";
	ИначеЕсли ПараметрыУказанияСерии.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
		// dd.MM.yy
		ДатаСтрокой = "20" + Прав(СрокГодностиСтрокой, 2) + Сред(СрокГодностиСтрокой, 4, 2)
			+ Лев(СрокГодностиСтрокой, 2) + "000000";
	ИначеЕсли ПараметрыУказанияСерии.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		// dd.MM.yy-HH
		ДатаСтрокой = "20" + Сред(СрокГодностиСтрокой, 7, 2) + Сред(СрокГодностиСтрокой, 4, 2) + Лев(СрокГодностиСтрокой, 2)
			+ Прав(СрокГодностиСтрокой, 2) + "0000";
	КонецЕсли;
	
	Попытка
		СрокГодности = Дата(ДатаСтрокой);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Пересчитывает количество остатков товара по назначениям, в соответствии с размерностью тары,
// в которой учитывается товар.
//
// Параметры:
//	Назначения - ТаблицаЗначений - хранит данные об остатках указанного товара по назначениям.
//	Товар - СправочникСсылка.Номенклатура - товар, по которому пересчитываются остатки.
//	УдалятьПустыеСтроки - Булево
//
Процедура ПересчитатьОстаткиПоНазначениям(Назначения, Товар, УдалятьПустыеСтроки = Ложь)
	
	Если Товар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		Возврат
	КонецЕсли;
	
	Если Товар.Коэффициент <> 0 Тогда
		Коэффициент = Товар.Коэффициент;
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого Строка Из Назначения Цикл
		Строка.Остаток = Окр(Строка.Остаток / Коэффициент, 0, 0);
		
		Если Строка.Остаток = 0 Тогда
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если УдалятьПустыеСтроки Тогда
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Назначения.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает исходный статус у складского задания.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задания,
//	ТипЗадания - Строка - тип складских заданий,
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура УстановитьИсходныйСтатусСкладскогоЗадания(Задание, ТипЗадания, ПараметрыЗадания)
	
	ИсходныйСтатус = ИсходныйСтатусСкладскогоЗадания(ТипЗадания);
	
	Попытка
		ДокументОбъект = Задание.ПолучитьОбъект();
		ДокументОбъект.Статус = ИсходныйСтатус;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При установке исходного статуса складского задания произошла ошибка. Описание ошибки: ""%1""'"),
			ИнформацияОбОшибке().Описание);
		
		// Добавить запись об ошибке в журнал регистрации.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при установке исходного статуса складского задания.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание,
			ПараметрыЗадания.ТекстСообщения,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает исходного исполнителя складского задания при его отмене.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задания,
//	ИсходныйИсполнитель - СправочникСсылка.Пользователи - исходный исполнитель складского задания,
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура УстановитьИсходногоИсполнителяСкладскогоЗадания(Задание, ИсходныйИсполнитель, ПараметрыЗадания)
	
	Попытка
		ДокументОбъект = Задание.ПолучитьОбъект();
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект, "Исполнитель") Тогда
			ДокументОбъект.Исполнитель = ИсходныйИсполнитель;
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект, "Контролер") Тогда
			ДокументОбъект.Контролер = ИсходныйИсполнитель;
		КонецЕсли;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При установке исходного исполнителя складского задания произошла ошибка. Описание ошибки: ""%1""'"),
			ИнформацияОбОшибке().Описание);
		
		// Добавить запись об ошибке в журнал регистрации.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при установке исходного исполнителя складского задания.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание,
			ПараметрыЗадания.ТекстСообщения,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецПопытки;
	
КонецПроцедуры

// Снимает блокировку ячеек в задании на пересчет товаров.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка складского задания,
//	ПараметрыЗадания - см. ПараметрыЗадания
//
Процедура УстановитьЗначениеБлокировкиЯчеекВЗаданииНаПересчет(Задание, ПараметрыЗадания)
	
	Попытка
		ДокументОбъект = Задание.ПолучитьОбъект();
		ДокументОбъект.БлокироватьЯчейки = Ложь;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При снятии блокировок ячеек произошла ошибка. Описание ошибки: ""%1""'"),
			ИнформацияОбОшибке().Описание);
		
		// Добавить запись об ошибке в журнал регистрации.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при снятии блокировок ячеек.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание,
			ПараметрыЗадания.ТекстСообщения,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает признак того, что серии указываются по факту отбора (управление остатками).
//
// Параметры:
//	СтатусУказанияСерий - Число - статус указания серий.
//
// Возвращаемое значение:
//	Булево - флаг указания серии по факту отбора.
//
Функция СерииУказываютсяПоФактуОтбора(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(3);
	МассивСтатусов.Добавить(4);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

// Заполняет табличную часть "Товары" документа пересчета товаров количеством товаров по учету.
//
// Параметры:
//	ПересчетТоваровОбъект - ДокументОбъект.ПересчетТоваров - документ пересчета.
//
Процедура ЗаполнитьКоличествоПоУчетуПриПересчетеТоваров(ПересчетТоваровОбъект)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Ячейка КАК Ячейка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыВЯчейках.Ячейка КАК Ячейка,
	|	ТоварыВЯчейках.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейках.Характеристика КАК Характеристика,
	|	ТоварыВЯчейках.Назначение КАК Назначение,
	|	ТоварыВЯчейках.Упаковка КАК Упаковка,
	|	ТоварыВЯчейках.Серия,
	|	ТоварыВЯчейках.ВНаличииОстаток КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 0) = 0
	|			ТОГДА ТоварыВЯчейках.ВНаличииОстаток
	|		ИНАЧЕ ТоварыВЯчейках.ВНаличииОстаток * &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			&ДатаОстатков,
	|			Ячейка.Владелец = &Склад
	|				И Ячейка.Помещение = &Помещение
	|				И (Ячейка, Номенклатура, Характеристика, Назначение, Серия, Упаковка) В
	|					(ВЫБРАТЬ
	|						Товары.Ячейка,
	|						Товары.Номенклатура,
	|						Товары.Характеристика,
	|						Товары.Назначение,
	|						Товары.Серия,
	|						Товары.Упаковка
	|					ИЗ
	|						ВТ_Товары КАК Товары)) КАК ТоварыВЯчейках";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейках.Упаковка", Неопределено));
		
	Запрос.УстановитьПараметр("Склад", ПересчетТоваровОбъект.Склад);
	Запрос.УстановитьПараметр("Помещение", ПересчетТоваровОбъект.Помещение);
	Запрос.УстановитьПараметр("Товары", ПересчетТоваровОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОстатков", ПересчетТоваровОбъект.Дата);
	
	ПараметрыОтбора = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Серия, Упаковка");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
		
		МассивСтрок = ПересчетТоваровОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли МассивСтрок.Количество() = 1 Тогда
			СтрокаТабл = МассивСтрок[0];
			СтрокаТабл.КоличествоУпаковок = Выборка.КоличествоУпаковок;
			СтрокаТабл.Количество = Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу значений, содержащей информацию о товара ссылками серий.
//
// Параметры:
//	ТоварыЗадания - ТаблицаЗначений.
//
Процедура ЗаполнитьСерииТаблицыТоваровЗадания(ТоварыЗадания)
	
	Для Каждого СтрокаТоваров Из ТоварыЗадания Цикл
		
		Если СерииУказываютсяПоФактуОтбора(СтрокаТоваров.СтатусУказанияСерий) Тогда
		
			Если Не ЗначениеЗаполнено(СтрокаТоваров.Серия)
				И (ЗначениеЗаполнено(СтрокаТоваров.НомерСерии)
					Или ЗначениеЗаполнено(СтрокаТоваров.ГоденДо)) Тогда
				
				ПараметрыУказанияСерии = Новый Структура("ИспользоватьНомерСерии, ИспользоватьСрокГодностиСерии,
					|ТочностьУказанияСрокаГодностиСерии");
				ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерии, СтрокаТоваров);
				
				ПараметрыСерии = НайтиСерию(СтрокаТоваров.НомерСерии, СтрокаТоваров.ГоденДо, СтрокаТоваров.ВидНоменклатуры,
					ПараметрыУказанияСерии);
				
				СтрокаТоваров.Серия = ПараметрыСерии.Серия;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет задание проверки отбора отсканированной тарой.
//
// Параметры:
//	ТоварыДляСканирования - ДанныеФормыЭлементКоллекции, ТаблицаЗначений - таблица товаров, соответствующая табличной
//		части выполняемого задания и содержащая информацию об отсканированных товарах.
//	Товары - ТаблицаЗначений
//
Процедура ДополнитьЗаданиеПроверкиОтбораОтсканированнойТарой(ТоварыДляСканирования, Товары)
	
	ВГраница = Товары.Количество() - 1;
	
	Для ОбрИндекс = 0 По ВГраница Цикл
		
		СтрокаТЧТовары = Товары[ВГраница - ОбрИндекс];
		
		Если ЭтоТара(СтрокаТЧТовары) Тогда
			Товары.Удалить(СтрокаТЧТовары);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТабл Из ТоварыДляСканирования Цикл
		
		Если ЭтоТара(СтрокаТабл) Тогда
			Если СтрокаТабл.КоличествоУпаковокОтсканировано > 0 Тогда
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабл);
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Поля, по которым отобранные товары могут не сходится с ордером и это не считается недобором.
//
// Параметры:
//	ИспользуетсяАдресноеХранение - Булево - Истина, если используется на складе используется адресное хранение товаров.
//	ТекущиеДанные - ДанныеФормыЭлементКоллекции, Неопределено - если данные переданы, то рассчитывается для них, если
//																Неопределено - то в целом для ТЧ.
//
//	Возвращаемое значение:
//		Структура - параметры, используемые при проверке расходного ордера на товары:
//			* УчитыватьУпаковки - Булево - Истина, если требуется учитывать расхождения по упаковкам при проверке расходного ордера.
//			* НеУчитываемыеСтатусыСерий - Массив из Число - не учитываемые при проверке расходного ордера статусы указания серий.
//			* УчитыватьСерии - Булево - Истина, если необходимо учитывать расхождения по сериям при проверке расходного ордера.
//
Функция УчитываемыеПриПроверкеРасходногоОрдераПоля(ИспользуетсяАдресноеХранение, ТекущиеДанные) Экспорт
	
	Результат = Новый Структура("УчитыватьУпаковки, УчитыватьСерии, НеУчитываемыеСтатусыСерий");
	
	Результат.УчитыватьУпаковки = ИспользуетсяАдресноеХранение;
	
	НеУчитываемыеСтатусыСерий = Новый Массив();
	НеУчитываемыеСтатусыСерий.Добавить(0);
	НеУчитываемыеСтатусыСерий.Добавить(1);
	НеУчитываемыеСтатусыСерий.Добавить(2);
	НеУчитываемыеСтатусыСерий.Добавить(3);
	НеУчитываемыеСтатусыСерий.Добавить(4);
	
	Результат.НеУчитываемыеСтатусыСерий = НеУчитываемыеСтатусыСерий;
	
	Если ТекущиеДанные = Неопределено Тогда
		Результат.УчитыватьСерии = Истина;
	Иначе
		Результат.УчитыватьСерии = (НеУчитываемыеСтатусыСерий.Найти(ТекущиеДанные.СтатусУказанияСерий) = Неопределено);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Проверяет, является ли данная номенклатура тарой.
//
// Параметры:
//	СтруктураДанных - ДанныеФормыЭлементКоллекции, Структура - любая структура данных для проверки.
//
// Возвращаемое значение:
//	Булево - Истина - номенклатура является тарой.
//
Функция ЭтоТара(СтруктураДанных)
	
	Возврат (СтруктураДанных.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке.
//
// Параметры:
//	МассивЯчеек - Массив из СправочникСсылка.СкладскиеЯчейки - складские ячейки, по которым требуется получить остатки товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица товаров, хранящихся в ячейке:
//		* Ячейка - СправочникСсылка.СкладскиеЯчейки - складская ячейка.
//		* Номенклатура - СправочникСсылка.Номенклатура - товар, хранящийся в ячейке.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
//		* Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//		* НомерСерии - Строка - номер серии товара.
//		* ГоденДо - Дата - срок годности серии товара.
//		* ПредставлениеСерии - Строка - имя серии.
//		* Количество - Число - остаток товара в слкадской ячейке.
//		* КоличествоОтсканировано - Число - количество отсканированного товара.
//
Функция ОстаткиТоваровВЯчейке(МассивЯчеек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ячейки", МассивЯчеек);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА ТоварыВЯчейкахОстатки.Упаковка
	|		ИНАЧЕ ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ТоварыВЯчейкахОстатки.Серия.Номер КАК НомерСерии,
	|	ТоварыВЯчейкахОстатки.Серия.ГоденДо КАК ГоденДо,
	|	ТоварыВЯчейкахОстатки.Серия.Представление КАК ПредставлениеСерии,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Количество,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК КоличествоОтсканировано
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(, Ячейка В (&Ячейки)) КАК ТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Упаковка,
	|	Серия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОстаткиТоваров = РезультатЗапроса.Выгрузить();
	
	Возврат ОстаткиТоваров;
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке, помеченной к пересчету.
//
// Параметры:
//	МассивЯчеек - Массив из СправочникСсылка.СкладскиеЯчейки - складские ячейки, по которым требуется получить остатки товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица товаров, хранящихся в ячейке:
//		* Ячейка - СправочникСсылка.СкладскиеЯчейки - складская ячейка.
//		* Номенклатура - СправочникСсылка.Номенклатура - товар, хранящийся в ячейке.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара.
//		* Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товара.
//		* Серия - СправочникСсылка.СерииНоменклатуры - серия товара.
//		* НомерСерии - Строка - номер серии товара.
//		* ГоденДо - Дата - срок годности серии товара.
//		* ПредставлениеСерии - Строка - имя серии.
//		* Количество - Число - остаток товара в слкадской ячейке.
//
Функция ТоварыДляПересчета(МассивЯчеек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ячейки", МассивЯчеек);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыВЯчейкахОстатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА ТоварыВЯчейкахОстатки.Упаковка
	|		ИНАЧЕ ТоварыВЯчейкахОстатки.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(, Ячейка В (&Ячейки)) КАК ТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ячейка,
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка,
	|	Назначение,
	|	Серия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТоварыДляПересчета = РезультатЗапроса.Выгрузить();
	
	Возврат ТоварыДляПересчета;
	
КонецФункции

// Возвращает таблицу значений товаров, которые можно отобрать/разместить для дальнейшего выполнения складского задания
// в соответствии с алгоритмом подбора товаров в других ячейках, по установленным параметрам.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад.
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	ТоварыКОтбору - ТаблицаЗначений - таблица неотобранных/неразмещенных товаров в соответствии с выполняемым заданием.
//	Распоряжение - ДокументСсылка - распоряжение складского задания.
//	Задание - ДокументСсылка.ОтборРазмещениеТоваров - складское задание.
//	
// Возвращаемое значение:
// 	см. СкладыСервер.ОтобратьТоварИзЯчеек
//
Функция ТаблицаНеОтобранныхТоваров(Склад, Помещение, ТоварыКОтбору, Распоряжение, Задание) Экспорт
	
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	ТипЗадания = ТипЗадания(Задание);
	
	// Формируется запрос, в зависимости от типа выполняемой операции, для получения данных для отбора/размещения
	// из других ячеек.
	Если ТипЗадания = "Отбор" Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Менеджер;
		Запрос.УстановитьПараметр("Товары", ТоварыКОтбору);
		Запрос.УстановитьПараметр("Распоряжение", ?(ЗначениеЗаполнено(Распоряжение), Распоряжение, ""));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Серия КАК Серия,
		|	Таблица.Количество КАК Количество
		|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
		|ИЗ
		|	&Товары КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатурыДляЗапроса.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатурыДляЗапроса.Назначение КАК Назначение,
		|	ТаблицаНоменклатурыДляЗапроса.Серия КАК Серия,
		|	СУММА(ТаблицаНоменклатурыДляЗапроса.Количество) КАК Количество,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки,
		|	0 КАК Приоритет,
		|	&Распоряжение КАК Распоряжение,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
		|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
		|	ТаблицаНоменклатурыДляЗапроса.Назначение,
		|	ТаблицаНоменклатурыДляЗапроса.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";
		
		Запрос.Выполнить();
		
		СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер, Склад, Помещение);
		Менеджер.Закрыть();
		
	Иначе
		
		ОшибкаПроверки = Ложь;
		РабочийУчасток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "РабочийУчасток");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Менеджер;
		Запрос.УстановитьПараметр("Товары", ТоварыКОтбору);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Упаковка,
		|	ТаблицаНоменклатурыДляЗапроса.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатурыДляЗапроса.Назначение КАК Назначение,
		|	ВЫРАЗИТЬ(ТаблицаНоменклатурыДляЗапроса.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
		|	ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковок КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
		|ИЗ
		|	&Товары КАК ТаблицаНоменклатурыДляЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Упаковка,
		|	ТаблицаНоменклатурыДляЗапроса.Серия,
		|	ТаблицаНоменклатурыДляЗапроса.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатурыДляЗапроса.Назначение КАК Назначение,
		|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
		|	ТаблицаНоменклатурыДляЗапроса.Упаковка,
		|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
		|	ТаблицаНоменклатурыДляЗапроса.Назначение,
		|	ТаблицаНоменклатурыДляЗапроса.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";
		
		Запрос.Выполнить();
		
		СтруктураВозврата = СкладыСервер.РазместитьТоварВЯчейках(Менеджер ,Склад ,Помещение ,РабочийУчасток, 
			Справочники.СкладскиеЯчейки.ПустаяСсылка(), ОшибкаПроверки);
		
		Менеджер.Закрыть();
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив с данными штрихкодов ячеек.
//
// Параметры:
//	МассивЯчеек - Массив из СправочникСсылка.СкладскиеЯчейки - ссылки складских ячеек для которых требуется получить штрихкоды.
//
// Возвращаемое значение:
//	Массив из Структура:
//		*Ячейка - СправочникСсылка.СкладскиеЯчейки
//		*КодЯчейки - Строка
//		*ШтрихкодЯчейки - Строка
//
Функция ШтрихкодыЯчеек(МассивЯчеек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ячейки", МассивЯчеек);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка КАК Ячейка,
	|	СкладскиеЯчейки.Код КАК КодЯчейки
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Ссылка В (&Ячейки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЯчейкиСоШтрихкодами = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СтруктураЭлемента = Новый Структура("Ячейка, КодЯчейки, ШтрихкодЯчейки");
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, Выборка);
		
		СтруктураЭлемента.ШтрихкодЯчейки = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Выборка.Ячейка);
		ЯчейкиСоШтрихкодами.Добавить(СтруктураЭлемента);
	КонецЦикла;
	
	Возврат ЯчейкиСоШтрихкодами;
	
КонецФункции

// Возвращает таблицу значений после подбора товаров из других ячеек,
// хранящую информацию о товарах, которые требуется отсканировать,по исполняемому заданию.
//
// Параметры:
//	Склад - СправочникСсылка.СкладскиеПомещения - склад,
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//	ТЗТоварыДляСканирования - ТаблицаЗначений - таблица товаров, с исходной информацией о сканируемых товарах,
//	ТекЯчейка - СправочникСсылка.СкладскиеЯчейки - ячейка с которой осуществляют складские операции.
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция ОчередьТоваровДляСканирования(Склад, Помещение, ТЗТоварыДляСканирования, ТекЯчейка) Экспорт
	
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	// Формируем запрос для получения ТЗ для результативной ТЗ <ТоварыДляСканирования>.
	// В результате получим ТЗ в которой ячейки отсортированы по порядку обходу, а ячейки, код которых меньше
	// текущей ячейки, помещаются в конец очереди, так же в отсортированном порядке.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Товары", ТЗТоварыДляСканирования);
	
	РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекЯчейка, "ПорядокОбхода, Код");
	
	Запрос.УстановитьПараметр("Код", РеквизитыЯчейки.Код);
	Запрос.УстановитьПараметр("ПорядокОбхода", РеквизитыЯчейки.ПорядокОбхода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ячейка КАК Ячейка,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.КоличествоУпаковокОтсканировано КАК КоличествоУпаковокОтсканировано,
	|	Таблица.АктивнаяСтрока КАК АктивнаяСтрока,
	|	Таблица.КоличествоЯчеек КАК КоличествоЯчеек,
	|	Таблица.НомерЯчейки КАК НомерЯчейки,
	|	Таблица.КоличествоТоваровВЯчейке КАК КоличествоТоваровВЯчейке,
	|	Таблица.НомерТовараВЯчейке КАК НомерТовараВЯчейке,
	|	Таблица.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Коэффициент КАК Коэффициент,
	|	Таблица.КоличествоНеОтгружать КАК КоличествоНеОтгружать,
	|	Таблица.КоличествоУпаковокНеОтгружать КАК КоличествоУпаковокНеОтгружать,
	|	Таблица.КоличествоВДокументе КАК КоличествоВДокументе,
	|	Таблица.КоличествоУпаковокВДокументе КАК КоличествоУпаковокВДокументе,
	|	Таблица.ЕстьНедобор КАК ЕстьНедобор,
	|	Таблица.ЕстьНеОтгружаемые КАК ЕстьНеОтгружаемые,
	|	Таблица.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Таблица.НеОтгружать КАК НеОтгружать,
	|	Таблица.КоличествоУпаковокВДокументеНеотгружаемые КАК КоличествоУпаковокВДокументеНеотгружаемые,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.НомерСтрокиИсходный КАК НомерСтрокиИсходный,
	|	Таблица.ШтрихкодЯчейки КАК ШтрихкодЯчейки,
	|	Таблица.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры,
	|	Таблица.КодЯчейки КАК КодЯчейки,
	|	Таблица.ГоденДо КАК ГоденДо,
	|	Таблица.НомерСерии КАК НомерСерии,
	|	Таблица.ИспользоватьНомерСерии КАК ИспользоватьНомерСерии,
	|	Таблица.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии,
	|	Таблица.ТочностьУказанияСрокаГодностиСерии КАК ТочностьУказанияСрокаГодностиСерии,
	|	Таблица.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Таблица.ВесУпаковки КАК ВесУпаковки,
	|	Таблица.ОбъемУпаковки КАК ОбъемУпаковки,
	|	Таблица.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	Таблица.ЕдиницаИзмеренияОбъема КАК ЕдиницаИзмеренияОбъема,
	|	Таблица.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	Таблица.КоэффициентЕдиницыИзмеренияВеса КАК КоэффициентЕдиницыИзмеренияВеса,
	|	Таблица.КоэффициентЕдиницыИзмеренияОбъема КАК КоэффициентЕдиницыИзмеренияОбъема
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&Товары КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка КАК Ячейка,
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Упаковка КАК Упаковка,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Серия КАК Серия,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковокОтсканировано) КАК КоличествоУпаковокОтсканировано,
	|	МИНИМУМ(ТаблицаНоменклатурыДляЗапроса.АктивнаяСтрока) КАК АктивнаяСтрока,
	|	МАКСИМУМ(ТаблицаНоменклатурыДляЗапроса.КоличествоЯчеек) КАК КоличествоЯчеек,
	|	МАКСИМУМ(ТаблицаНоменклатурыДляЗапроса.НомерЯчейки) КАК НомерЯчейки,
	|	МАКСИМУМ(ТаблицаНоменклатурыДляЗапроса.КоличествоТоваровВЯчейке) КАК КоличествоТоваровВЯчейке,
	|	МАКСИМУМ(ТаблицаНоменклатурыДляЗапроса.НомерТовараВЯчейке) КАК НомерТовараВЯчейке,
	|	МАКСИМУМ(ТаблицаНоменклатурыДляЗапроса.СтатусУказанияСерий) КАК СтатусУказанияСерий,
	|	МИНИМУМ(ТаблицаНоменклатурыДляЗапроса.НомерСтроки) КАК НомерСтроки,
	|	МИНИМУМ(ТаблицаНоменклатурыДляЗапроса.Коэффициент) КАК Коэффициент,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоНеОтгружать) КАК КоличествоНеОтгружать,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковокНеОтгружать) КАК КоличествоУпаковокНеОтгружать,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоВДокументе) КАК КоличествоВДокументе,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковокВДокументе) КАК КоличествоУпаковокВДокументе,
	|	ТаблицаНоменклатурыДляЗапроса.ЕстьНедобор КАК ЕстьНедобор,
	|	ТаблицаНоменклатурыДляЗапроса.ЕстьНеОтгружаемые КАК ЕстьНеОтгружаемые,
	|	ТаблицаНоменклатурыДляЗапроса.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаНоменклатурыДляЗапроса.НеОтгружать КАК НеОтгружать,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.КоличествоУпаковокВДокументеНеотгружаемые) КАК КоличествоУпаковокВДокументеНеотгружаемые,
	|	ТаблицаНоменклатурыДляЗапроса.Назначение КАК Назначение,
	|	МИНИМУМ(ТаблицаНоменклатурыДляЗапроса.НомерСтрокиИсходный) КАК НомерСтрокиИсходный,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыДляЗапроса.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриоритетТовара,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ПорядокОбхода < СкладскиеЯчейки.ПорядокОбхода
	|				ТОГДА 2
	|			ИНАЧЕ ВЫБОР
	|					КОГДА &ПорядокОбхода = СкладскиеЯчейки.ПорядокОбхода
	|							И &Код > СкладскиеЯчейки.Код
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПриоритетЯчейки,
	|	ТаблицаНоменклатурыДляЗапроса.ШтрихкодЯчейки КАК ШтрихкодЯчейки,
	|	ТаблицаНоменклатурыДляЗапроса.ШтрихкодНоменклатуры КАК ШтрихкодНоменклатуры,
	|	ТаблицаНоменклатурыДляЗапроса.КодЯчейки КАК КодЯчейки,
	|	ТаблицаНоменклатурыДляЗапроса.ГоденДо КАК ГоденДо,
	|	ТаблицаНоменклатурыДляЗапроса.НомерСерии КАК НомерСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ИспользоватьНомерСерии КАК ИспользоватьНомерСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ТочностьУказанияСрокаГодностиСерии КАК ТочностьУказанияСрокаГодностиСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаНоменклатурыДляЗапроса.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатурыДляЗапроса.ВесУпаковки КАК ВесУпаковки,
	|	ТаблицаНоменклатурыДляЗапроса.ОбъемУпаковки КАК ОбъемУпаковки,
	|	ТаблицаНоменклатурыДляЗапроса.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ТаблицаНоменклатурыДляЗапроса.ЕдиницаИзмеренияОбъема КАК ЕдиницаИзмеренияОбъема,
	|	ТаблицаНоменклатурыДляЗапроса.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	МИНИМУМ(ТаблицаНоменклатурыДляЗапроса.КоэффициентЕдиницыИзмеренияВеса) КАК КоэффициентЕдиницыИзмеренияВеса,
	|	МИНИМУМ(ТаблицаНоменклатурыДляЗапроса.КоэффициентЕдиницыИзмеренияОбъема) КАК КоэффициентЕдиницыИзмеренияОбъема
	|ИЗ
	|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|		ПО ТаблицаНоменклатурыДляЗапроса.Ячейка = СкладскиеЯчейки.Ссылка
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = &Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	СкладскиеЯчейки.Ссылка,
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Упаковка,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Серия,
	|	ТаблицаНоменклатурыДляЗапроса.ЕстьНедобор,
	|	ТаблицаНоменклатурыДляЗапроса.ЕстьНеОтгружаемые,
	|	ТаблицаНоменклатурыДляЗапроса.ТипНоменклатуры,
	|	ТаблицаНоменклатурыДляЗапроса.НеОтгружать,
	|	ТаблицаНоменклатурыДляЗапроса.ШтрихкодЯчейки,
	|	ТаблицаНоменклатурыДляЗапроса.ШтрихкодНоменклатуры,
	|	ТаблицаНоменклатурыДляЗапроса.КодЯчейки,
	|	ТаблицаНоменклатурыДляЗапроса.ГоденДо,
	|	ТаблицаНоменклатурыДляЗапроса.НомерСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ИспользоватьНомерСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ИспользоватьСрокГодностиСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ТочностьУказанияСрокаГодностиСерии,
	|	ТаблицаНоменклатурыДляЗапроса.ВидНоменклатуры,
	|	ТаблицаНоменклатурыДляЗапроса.ЕдиницаИзмерения,
	|	ТаблицаНоменклатурыДляЗапроса.ВесУпаковки,
	|	ТаблицаНоменклатурыДляЗапроса.ОбъемУпаковки,
	|	ТаблицаНоменклатурыДляЗапроса.Назначение,
	|	ТаблицаНоменклатурыДляЗапроса.ЕдиницаИзмеренияВеса,
	|	ТаблицаНоменклатурыДляЗапроса.ЕдиницаИзмеренияОбъема,
	|	ТаблицаНоменклатурыДляЗапроса.ТипИзмеряемойВеличины
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладскиеЯчейки.ПорядокОбхода,
	|	ПриоритетЯчейки,
	|	СкладскиеЯчейки.Код,
	|	ПриоритетТовара,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	КоличествоУпаковок УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗТоварыДляСканирования = РезультатЗапроса.Выгрузить();
	
	Менеджер.Закрыть();
	
	ТипНаименованиеСерии = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	ТипНаименованиеДлинный = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ТипНаименованиеКороткий = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеНоменклатуры", ТипНаименованиеДлинный);
	ТЗТоварыДляСканирования.Колонки.Добавить("АртикулНоменклатуры", ТипНаименованиеДлинный);
	ТЗТоварыДляСканирования.Колонки.Добавить("ОписаниеНоменклатуры", ТипНаименованиеДлинный);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеУпаковки", ТипНаименованиеКороткий);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеХарактеристики", ТипНаименованиеДлинный);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеСерии", ТипНаименованиеДлинный);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеНазначения", ТипНаименованиеДлинный);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеЕдиницыИзмерения", ТипНаименованиеКороткий);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеЕдиницыИзмеренияВеса", ТипНаименованиеКороткий);
	ТЗТоварыДляСканирования.Колонки.Добавить("НаименованиеЕдиницыИзмеренияОбъема", ТипНаименованиеКороткий);
	
	Товары = Новый Массив;
	Отбор = Новый Структура("Номенклатура");
	НоменклатураТЗ = ТЗТоварыДляСканирования.ВыгрузитьКолонку("Номенклатура");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Товары, НоменклатураТЗ, Истина);
	
	Для Каждого Номенклатура Из Товары Цикл
		
		Отбор.Номенклатура = Номенклатура;
		
		МассивСтрок = ТЗТоварыДляСканирования.НайтиСтроки(Отбор);
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Представление,
			|Артикул, Описание");
		
		Для Каждого СтрокаТоваров Из МассивСтрок Цикл
			
			СтрокаТоваров.АртикулНоменклатуры = РеквизитыНоменклатуры.Артикул;
			СтрокаТоваров.ОписаниеНоменклатуры = РеквизитыНоменклатуры.Описание;
			СтрокаТоваров.НаименованиеНоменклатуры = РеквизитыНоменклатуры.Представление;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Характеристика) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Характеристика, "Представление");
				СтрокаТоваров.НаименованиеХарактеристики = Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Упаковка, "Представление");
				СтрокаТоваров.НаименованиеУпаковки = Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Назначение) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Назначение, "Представление");
				СтрокаТоваров.НаименованиеНазначения = Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.Серия) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Серия, "Представление");
				СтрокаТоваров.НаименованиеСерии = Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияВеса) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.ЕдиницаИзмеренияВеса, "Представление");
				СтрокаТоваров.НаименованиеЕдиницыИзмеренияВеса = Наименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияОбъема) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.ЕдиницаИзмеренияОбъема, "Представление");
				СтрокаТоваров.НаименованиеЕдиницыИзмеренияОбъема = Наименование;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТЗТоварыДляСканирования;
	
КонецФункции

// Возвращает массив, элементами которого являются значения мерных типов измеряемых величин.
//
// Возвращаемое значение:
//	Массив из ПеречислениеСсылка.ТипыИзмеряемыхВеличин - элементами являются значения мерных типов измеряемых величин.
//
Функция МерныеЕдиницыИзмерения()
	
	МерныеЕдиницыИзмерения = Новый Массив;
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	МерныеЕдиницыИзмерения.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	
	Возврат МерныеЕдиницыИзмерения;
	
КонецФункции

Функция РабочиеУчасткиИсполнителя(Склад, Помещение, Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеУчасткиРаботникиУчастка.Ссылка КАК РабочийУчасток
	|ИЗ
	|	Справочник.РабочиеУчастки.РаботникиУчастка КАК РабочиеУчасткиРаботникиУчастка
	|ГДЕ
	|	РабочиеУчасткиРаботникиУчастка.РаботникУчастка В(&Исполнители)
	|	И РабочиеУчасткиРаботникиУчастка.Ссылка.Владелец = &Склад
	|	И РабочиеУчасткиРаботникиУчастка.Ссылка.Помещение = &Помещение";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Исполнители", Исполнитель);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РабочиеУчастки = Результат.Выгрузить().ВыгрузитьКолонку("РабочийУчасток");
	РабочиеУчастки.Добавить(Справочники.РабочиеУчастки.ПустаяСсылка());
	
	Возврат РабочиеУчастки;
	
КонецФункции

#КонецОбласти