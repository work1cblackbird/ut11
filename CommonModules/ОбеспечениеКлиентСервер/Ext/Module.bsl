////////////////////////////////////////////////////////////////////////////////
// Модуль "ОбеспечениеКлиентСервер", содержит вспомогательные процедуры
// и функции для интерактивной работы пользователей с обеспечением потребностей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает строковое значение типа номенклатуры используемое в подсистеме обеспечения.
// 
// Параметры:
//  ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//
// Возвращаемое значение:
//  Строка
//
Функция ТипНоменклатурыСтрокой(ТипНоменклатуры) Экспорт
	
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
		Возврат "Товар";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		Возврат "Тара";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		Возврат "Работа";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		Возврат "Услуга";
	КонецЕсли;
	
КонецФункции

// Предназначена для описания того, каким образом производить проверку заполнения полей перед выполнением команды по
// заполнению обеспечения в документах.
//
// Параметры:
//  ИмяТабличнойЧасти - Строка, Неопределено - имя списка в котором производится проверка, если не указано, то список "Товары"
//  Синоним - Строка, Неопределено - наименование списка в котором производится проверка, если не указано, то список "Товары".
//
// Возвращаемое значение:
//  Структура - структура с полями: "Поля" и "Тексты" используемая в функции проверки заполнения (см. ОбеспечениеКлиентСервер.ПроверитьЗаполнение).
//
Функция ИнициализироватьПараметрыПроверкиЗаполнения(ИмяТабличнойЧасти = Неопределено, Синоним = Неопределено) Экспорт

	Поля = Новый Структура();
	Поля.Вставить("Номенклатура",   "Объект.Товары[%1].Номенклатура");
	Поля.Вставить("Характеристика", "Объект.Товары[%1].Характеристика");
	Поля.Вставить("Склад",          "Объект.Склад");
	Поля.Вставить("Количество",     "Объект.Товары[%1].КоличествоУпаковок");
	Поля.Вставить("КоличествоУпаковок", "Объект.Товары[%1].КоличествоУпаковок");

	Тексты = Новый Структура();
	Тексты.Вставить("Номенклатура",   НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Товары""'"));
	Тексты.Вставить("Характеристика", НСтр("ru = 'Не заполнена колонка ""Характеристика"" в строке %1 списка ""Товары""'"));
	Тексты.Вставить("Склад",          НСтр("ru = 'Поле ""Склад"" не заполнено'"));
	Тексты.Вставить("Количество",     НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""Товары""'"));
	Тексты.Вставить("КоличествоУпаковок", НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""Товары""'"));

	Если ИмяТабличнойЧасти <> Неопределено Тогда

		Для Каждого Поле Из Поля Цикл

			Поля[Поле.Ключ]   = СтрЗаменить(Поля[Поле.Ключ],   "Товары", ИмяТабличнойЧасти);
			Тексты[Поле.Ключ] = СтрЗаменить(Тексты[Поле.Ключ], "Товары", ?(Синоним <> Неопределено, Синоним, ИмяТабличнойЧасти));

		КонецЦикла;

	КонецЕсли;

	Возврат Новый Структура("Поля, Тексты", Поля, Тексты);

КонецФункции

// Создает структуру данных, содержащую параметры объединения таблиц
//
// Возвращаемое значение:
//  Структура - структура данных, содержащая параметры объединения таблиц.
//
Функция ПараметрыОбъединенияТаблиц() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ОбновлятьСтроки",  Истина);
	Результат.Вставить("ДобавлятьСтроки",  Ложь);
	Результат.Вставить("НовыеСтроки",      Неопределено);
	Результат.Вставить("ИзмененныеСтроки", Неопределено);
	Результат.Вставить("Умолчания",        Неопределено);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Прочее

// Дополняет струткру действий действием при изменении назначения.
//
// Параметры:
//  СтруктураДействий - Структура - структура действий.
//
Процедура СтруктураДействийВставитьПриИзмененииНазначения(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ПриИзмененииНазначения");
	
КонецПроцедуры

// Формирует описание периода для подсказки при классификации номенклатуры и клиентов.
//
// Параметры:
//  Период - ПеречислениеСсылка.Периодичность - периодичность расчета.
//  КоличествоПериодов - Число - количество периодов расчета
//  Подпериод - ПеречислениеСсылка.Периодичность - количество подпериодов расчета.
//
// Возвращаемое значение:
//  Строка - текстовое описание периода расчета.
//
Функция ОписаниеНастройки(Период, КоличествоПериодов, Подпериод = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КоличествоПериодов) Или Не ЗначениеЗаполнено(Период) Тогда
		
		Возврат НСтр("ru = '<период не указан>'");
		
	КонецЕсли;
	
	ПараметрыПредметаИсчисления = "";
	
	Если Период = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий день, предыдущих дня, предыдущих дней, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущая неделя, предыдущие недели, предыдущих недель, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущая декада, предыдущие декады, предыдущих декад, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий месяц, предыдущих месяца, предыдущих месяцев, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий квартал, предыдущих квартала, предыдущих кварталов, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущее полугодие, предыдущих полугодия, предыдущих полугодий, с,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий год, предыдущих года, предыдущих лет, м,,,,, 0'");
		
	Иначе
		
		ПараметрыПредметаИсчисления = "";
		
	КонецЕсли;
	
	ПредставлениеНастройки = НРег(ЧислоПрописью(КоличествоПериодов,, ПараметрыПредметаИсчисления));
	
	Если ЗначениеЗаполнено(Подпериод) Тогда
		
		Если Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по дням)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по неделям)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по декадам)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по месяцам)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по кварталам)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по полугодиям)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по годам)'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеНастройки;
	
КонецФункции

#КонецОбласти

