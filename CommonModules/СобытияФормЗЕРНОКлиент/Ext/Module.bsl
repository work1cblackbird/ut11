#Область ПрограммныйИнтерфейс

#Область Локализация

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЭтоНавигационнаяСсылкаЗЕРНО(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО").ИмяРеквизитаФормыОбъект];
	ИнтеграцияЗЕРНОКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Неопределено,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоОповещениеЗЕРНО(ИмяСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	МестоВызова = Новый Структура;
	МестоВызова.Вставить("Форма",  Форма);
	МестоВызова.Вставить("Объект", Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО").ИмяРеквизитаФормыОбъект]);
	
	Событие = Новый Структура;
	Событие.Вставить("Имя",        ИмяСобытия);
	Событие.Вставить("Параметр",   Параметр);
	Событие.Вставить("Источник",   Источник);
	Событие.Вставить("Обработано", Ложь);
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие);
	
	Если Событие.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Новый Структура;
	Подсистема.Вставить("Имя",ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы());
	Подсистема.Вставить("МодульВызовСервера",ИнтеграцияЗЕРНОВызовСервера);
	
	СобытияФормИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие, Подсистема);
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПослеЗаписи(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Вызывается при наступлении события "Выбор" в табличной части.
// Открывает форму выбранного элемента, если имя реквизита входит в массив имен.
//
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма объекта,
// ТаблицаФормы - ТаблицаФормы - таблица в которой произошло событие,
// ВыбранноеПоле - ПолеФормы
Процедура ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(Форма, ТаблицаФормы, ВыбранноеПоле) Экспорт
	
	МассивИмен = МассивИменРеквизитовФормыОткрытия();
	
	ИмяТабличнойЧасти = ТаблицаФормы.Имя;
	
	Для Каждого ИмяЭлемента Из МассивИмен Цикл
		
		Если Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Элементы[ИмяТабличнойЧасти + ИмяЭлемента] = ВыбранноеПоле
			И ЗначениеЗаполнено(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]) Тогда
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]);
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Номенклатура

// Выполняет действия при изменении номенклатуры в шапке документа.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы.
Процедура ПриИзмененииНоменклатурыВШапке(Форма, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СтруктураЗаполнения = ИнтеграцияЗЕРНОКлиентСервер.ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры();
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Форма);
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Форма.Объект, "Количество, КоличествоЗЕРНО");
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		Форма, СтруктураЗаполнения, КэшированныеЗначения, ПараметрыУказанияСерий);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураЗаполнения);
	ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураЗаполнения, "Количество, КоличествоЗЕРНО");
	
КонецПроцедуры

Процедура ПриНачалеВыбораНоменклатуры(Элемент, ВидПродукции, СтандартнаяОбработка, ОписаниеОповещения=Неопределено, Знач Реквизиты = Неопределено) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент, ИнтеграцияЗЕРНОКлиентСервер.РасширенныеВидыПродукции(ВидПродукции), СтандартнаяОбработка, ОписаниеОповещения, Реквизиты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ВидПродукции) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ИнтеграцияЗЕРНОВызовСервера.ДанныеВыбораОКПД2(Текст, ВидПродукции);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ВидПродукции) Экспорт
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ИнтеграцияЗЕРНОВызовСервера.ДанныеВыбораОКПД2(Текст, ВидПродукции);
	Если ДанныеВыбора.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КодТНВЭДАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ОКПД2) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшВидовСельхозКультур") Тогда
			ДанныеВыбора = ИнтеграцияЗЕРНОВызовСервера.ДанныеВыбораКодТНВЭД(Текст, ОКПД2, Форма["КэшВидовСельхозКультур"]);
		Иначе
			ДанныеВыбора = ИнтеграцияЗЕРНОВызовСервера.ДанныеВыбораКодТНВЭД(Текст, ОКПД2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КодТНВЭДОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ОКПД2) Экспорт
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшВидовСельхозКультур") Тогда
		ДанныеВыбора = ИнтеграцияЗЕРНОВызовСервера.ДанныеВыбораКодТНВЭД(Текст, ОКПД2, Форма["КэшВидовСельхозКультур"]);
	Иначе
		ДанныеВыбора = ИнтеграцияЗЕРНОВызовСервера.ДанныеВыбораКодТНВЭД(Текст, ОКПД2);
	КонецЕсли;
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСАдресами

Процедура ПолеАдресаПриИзменении(Форма, Элемент, ПутьКДаннымАдреса = "") Экспорт
	
	ПоляФормы = СтруктураПолейФормыАдреса(Форма, Элемент, ПутьКДаннымАдреса);
	
	Если ПоляФормы.ИмяТаблицы <> Неопределено
		И ПоляФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]        = "";
		ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = "";
		ПоляФормы.ПутьККомментарию[ПоляФормы.ИмяКомментария]  = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// структуры ВидКонтактнойИнформации.
	ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента] =
		ИнтеграцияЗЕРНОВызовСервера.ЗначенияПолейКонтактнойИнформации(Текст, Форма.ВидКонтактнойИнформации);
	ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = Текст;

КонецПроцедуры

Процедура ПолеАдресаОчистка(Форма, Элемент, СтандартнаяОбработка, ДополнительныеПоля = Неопределено, ПутьКДаннымАдреса = "") Экспорт
	
	ПоляФормы = СтруктураПолейФормыАдреса(Форма, Элемент, ПутьКДаннымАдреса);
	
	Если ПоляФормы.ИмяТаблицы <> Неопределено
		И ПоляФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем как представления, так и внутренние значения полей.
	ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]        = "";
	ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = "";
	ПоляФормы.ПутьККомментарию[ПоляФормы.ИмяКомментария]  = "";
	Если ДополнительныеПоля <> Неопределено Тогда
		Для Каждого ИмяПоля Из ДополнительныеПоля Цикл
			ПоляФормы.ПутьКЭлементу[ИмяПоля] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеАдресаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ПутьКДаннымАдреса = "") Экспорт
	
	ПоляФормы = СтруктураПолейФормыАдреса(Форма, Элемент, ПутьКДаннымАдреса);
	
	Если ПоляФормы.ИмяТаблицы <> Неопределено
		И ПоляФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] Тогда
		ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = Элемент.ТекстРедактирования;
		ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]        = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", Форма.ВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("Значение",                ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]);
	ПараметрыОткрытия.Вставить("Представление",           ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой]);
	ПараметрыОткрытия.Вставить("Комментарий",             ПоляФормы.ПутьККомментарию[ПоляФормы.ИмяКомментария]);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Укажите адрес объекта'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

Процедура ПолеАдресаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
	ДополнительныеПоля = Неопределено, ПутьКДаннымАдреса = "") Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("Действие") Тогда
		Если ВыбранноеЗначение.Действие = "ОткрытьФорму" Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент",            Элемент);
			ДополнительныеПараметры.Вставить("ДополнительныеПоля", ДополнительныеПоля);
			ДополнительныеПараметры.Вставить("ПутьКДаннымАдреса",  ПутьКДаннымАдреса);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолеАдресаОкончаниеВыбора", Форма, ДополнительныеПараметры);
			
			ОткрытьФорму(СтрШаблон("%1.%2.%3",
				ВыбранноеЗначение.Вид,
				ВыбранноеЗначение.Имя,
				ВыбранноеЗначение.ИмяФормы),,
				Форма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ПоляФормы = СтруктураПолейФормыАдреса(Форма, Элемент, ПутьКДаннымАдреса);
		Если ПоляФормы.ИмяТаблицы <> Неопределено
			И ПоляФормы.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("Адрес") Тогда
			ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]        = ВыбранноеЗначение.Адрес;
			ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = ВыбранноеЗначение.ПредставлениеАдреса;
			ПоляФормы.ПутьККомментарию[ПоляФормы.ИмяКомментария]  = ВыбранноеЗначение.КомментарийАдреса;
			Если ДополнительныеПоля <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ДополнительныеПоля Цикл
					ПоляФормы.ПутьКЭлементу[КлючИЗначение.Ключ] = ВыбранноеЗначение[КлючИЗначение.Значение];
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВыбранноеЗначение.Свойство("КонтактнаяИнформация") Тогда
			ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]        = ВыбранноеЗначение.КонтактнаяИнформация;
			ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = ВыбранноеЗначение.Представление;
			ПоляФормы.ПутьККомментарию[ПоляФормы.ИмяКомментария]  = ВыбранноеЗначение.Комментарий;
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеАдресаОкончаниеВыбора(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляФормы = СтруктураПолейФормыАдреса(Форма, ДополнительныеПараметры.Элемент, ДополнительныеПараметры.ПутьКДаннымАдреса);
	
	Если ПоляФормы.ИмяТаблицы <> Неопределено
		И ПоляФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ИнтеграцияЗЕРНОВызовСервера.ДанныеАдресаОбъекта(Результат);
	
	ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлемента]        = ДанныеДляЗаполнения.Адрес;
	ПоляФормы.ПутьКЭлементу[ПоляФормы.ИмяЭлементаСтрокой] = ДанныеДляЗаполнения.ПредставлениеАдреса;
	ПоляФормы.ПутьККомментарию[ПоляФормы.ИмяКомментария]  = ДанныеДляЗаполнения.КомментарийАдреса;
	Если ДополнительныеПараметры.ДополнительныеПоля <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДополнительныеПараметры.ДополнительныеПоля Цикл
			ПоляФормы.ПутьКЭлементу[КлючИЗначение.Ключ] = ДанныеДляЗаполнения[КлючИЗначение.Значение];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеАдресаАвтоПодбор(Форма, ВидДанных,
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Текст) Тогда
		ТекстДляАвтоПодбора = СокрЛП(Элемент.ТекстРедактирования);
	Иначе
		ТекстДляАвтоПодбора = СокрЛП(Текст);
	КонецЕсли;
	
	ДанныеВыбора = ИнтеграцияИСВызовСервера.СписокАвтоподбора(ВидДанных, ТекстДляАвтоПодбора);
	
КонецПроцедуры

Процедура ПолеИдентификатораАдресаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение.Свойство("Действие")  Тогда
		
		Если ВыбранноеЗначение.Действие = "ОткрытьФормуКонтактнойИнформации" Тогда
		
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", Форма.ВидКонтактнойИнформации);
			ПараметрыОткрытия.Вставить("Заголовок",               НСтр("ru = 'Укажите адрес объекта'"));
			
			УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
		
		ИначеЕсли ЗначениеЗаполнено(ВыбранноеЗначение.Идентификатор) Тогда
			
			Форма.Объект.ИдентификаторАдреса = ВыбранноеЗначение.Идентификатор;
			Форма.Объект.ОКТМО               = ВыбранноеЗначение.ОКТМО;
			
		КонецЕсли;
		
	Иначе
		
		ИдентификаторыАдреса = ИнтеграцияЗЕРНОВызовСервера.ИдентификаторыАдресаПоДаннымJSON(ВыбранноеЗначение.Значение);
		
		Форма.Объект.ИдентификаторАдреса = ИдентификаторыАдреса.Идентификатор;
		Форма.Объект.ОКТМО               = ИдентификаторыАдреса.ОКТМО;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияПриВыбореПартииИзФормыВыбора

Процедура ВыполнитьДействиеРазбитьСтроку(ТабличнаяЧасть, ИсходнаяСтрока, ВыделяемоеКоличествоЗЕРНО) Экспорт
	
	НоваяСтрока = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Индекс(ИсходнаяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "Идентификатор") Тогда
		НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ИсходнаяСтрока.КоличествоЗЕРНО <> 0 Тогда
		НоваяСтрока.КоличествоЗЕРНО = ВыделяемоеКоличествоЗЕРНО;
		НоваяСтрока.Количество = НоваяСтрока.КоличествоЗЕРНО * ИсходнаяСтрока.Количество / ИсходнаяСтрока.КоличествоЗЕРНО;
		ИсходнаяСтрока.КоличествоЗЕРНО = ИсходнаяСтрока.КоличествоЗЕРНО - НоваяСтрока.КоличествоЗЕРНО;
		ИсходнаяСтрока.Количество      = ИсходнаяСтрока.Количество      - НоваяСтрока.Количество;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборПартииСНедостаткомКоличества(ТабличнаяЧасть, ВыбранноеЗначение, ТекущиеДанные, ДействиеВыбораПартии) Экспорт
	
	Знак = ?(ТекущиеДанные.КоличествоЗЕРНО > 0, 1, -1);
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Остаток по партии (%1) меньше, чем указано в строке табличной части (%2)'"),
		ВыбранноеЗначение.КоличествоЗЕРНО, Знак*ТекущиеДанные.КоличествоЗЕРНО);
	ВариантыЗаполнения = Новый СписокЗначений;
	ВариантыЗаполнения.Добавить("РазбитьСтроку", НСтр("ru = 'Разбить строку'"));
	ВариантыЗаполнения.Добавить("ИзменитьСтроку", НСтр("ru = 'Изменить количество'"));
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Пропустить);
	ВариантыЗаполнения.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ДействиеВыбораПартии", ДействиеВыбораПартии);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьВыборПартииСНедостаткомКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		ВариантыЗаполнения,,
		"РазбитьСтроку");
		
КонецПроцедуры

Процедура ОбработатьВыборПартииСНедостаткомКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть         = ДополнительныеПараметры.ТабличнаяЧасть;
	ВыбранноеЗначение      = ДополнительныеПараметры.ВыбранноеЗначение;
	ТекущиеДанные          = ДополнительныеПараметры.ТекущиеДанные;
	ОбработчикВыбораПартии = ДополнительныеПараметры.ДействиеВыбораПартии;
	Знак = ?(ТекущиеДанные.Количество > 0, 1, -1);
	
	Если Результат = КодВозвратаДиалога.Пропустить Тогда
		ВыполнитьОбработкуОповещения(ОбработчикВыбораПартии, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	Коэффициент = ТекущиеДанные.Количество / ТекущиеДанные.КоличествоЗЕРНО;
	
	Если Результат = "РазбитьСтроку" Тогда
		ВыполнитьДействиеРазбитьСтроку(
			ТабличнаяЧасть, ТекущиеДанные, ТекущиеДанные.КоличествоЗЕРНО - Знак*ВыбранноеЗначение.КоличествоЗЕРНО);
		ВыполнитьОбработкуОповещения(ОбработчикВыбораПартии, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	Если Результат = "ИзменитьСтроку" Тогда
		ТекущиеДанные.КоличествоЗЕРНО = Знак * ВыбранноеЗначение.КоличествоЗЕРНО;
		ТекущиеДанные.Количество = Знак * ВыбранноеЗначение.КоличествоЗЕРНО * Коэффициент;
		ВыполнитьОбработкуОповещения(ОбработчикВыбораПартии, ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСАдресами

Функция СтруктураПолейФормыАдреса(Форма, Элемент, ПутьКДаннымАдреса)
	
	ПоляФормы = Новый Структура;
	
	Если ПустаяСтрока(ПутьКДаннымАдреса) Тогда
		ПоляФормы.Вставить("ИмяЭлемента", Элемент.Имя);
		ПоляФормы.Вставить("ИмяТаблицы",  ИмяТаблицыЭлемента(Элемент));
	Иначе
		СоставПутиКДанным = СтрРазделить(ПутьКДаннымАдреса, ".");
		Если СоставПутиКДанным[0] = "Объект" Тогда
			СоставПутиКДанным.Удалить(0);
		КонецЕсли;
		ПоляФормы.Вставить("ИмяЭлемента", СоставПутиКДанным[СоставПутиКДанным.ВГраница()]);
		Если СоставПутиКДанным.Количество() > 1 Тогда
			ПоляФормы.Вставить("ИмяТаблицы", СоставПутиКДанным[0]);
		Иначе
			ПоляФормы.Вставить("ИмяТаблицы", Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
	Если ПоляФормы.ИмяТаблицы = Неопределено Тогда
		ПоляФормы.Вставить("ТекущиеДанные",    Неопределено);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ПоляФормы.Вставить("ПутьКЭлементу",    Форма.Объект);
		Иначе
			ПоляФормы.Вставить("ПутьКЭлементу",    Форма);
		КонецЕсли;
		ПоляФормы.Вставить("ПутьККомментарию", Форма);
	Иначе
		Если Лев(ПоляФормы.ИмяЭлемента, СтрДлина(ПоляФормы.ИмяТаблицы)) = ПоляФормы.ИмяТаблицы Тогда
			ПоляФормы.ИмяЭлемента = Сред(ПоляФормы.ИмяЭлемента, СтрДлина(ПоляФормы.ИмяТаблицы) + 1);
		КонецЕсли;
		ПоляФормы.Вставить("ТекущиеДанные",    Форма.Элементы[ПоляФормы.ИмяТаблицы].ТекущиеДанные);
		ПоляФормы.Вставить("ПутьКЭлементу",    ПоляФормы.ТекущиеДанные);
		ПоляФормы.Вставить("ПутьККомментарию", ПоляФормы.ТекущиеДанные);
	КонецЕсли;
	
	ПоляФормы.Вставить("ИмяЭлементаСтрокой", СтрШаблон("%1Строкой", ПоляФормы.ИмяЭлемента));
	ПоляФормы.Вставить("ИмяКомментария",     СтрШаблон("Комментарий%1", ПоляФормы.ИмяЭлемента));
	
	Возврат ПоляФормы;
	
КонецФункции

Функция ИмяТаблицыЭлемента(Элемент)
	
	РодительЭлемента = Элемент.Родитель;
	
	Если ТипЗнч(РодительЭлемента) = Тип("ТаблицаФормы") Тогда
		Возврат РодительЭлемента.Имя;
	ИначеЕсли ТипЗнч(РодительЭлемента) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяТаблицыЭлемента(РодительЭлемента);
	
КонецФункции

#КонецОбласти

#Область Локализация

Функция ЭтоНавигационнаяСсылкаЗЕРНО(НавигационнаяСсылка)
	
	Возврат СтрНайти(НавигационнаяСсылка, "ИнтеграцияИС_КомандаНавигационнойСсылки#ЗЕРНО#") > 0;
	
КонецФункции

Функция ЭтоОповещениеЗЕРНО(ИмяСобытия)
	
	Возврат СтрНайти(ИмяСобытия, "ИнтеграцияИС_СобытиеОповещения#ЗЕРНО#") > 0;
	
КонецФункции

#КонецОбласти

Функция ИмяСобытияИзмененаНастройкаАвтоматическогоОбмена() Экспорт
	Возврат "Запись_НастройкиРегламентныхЗаданийЗЕРНО";
КонецФункции

Функция МассивИменРеквизитовФормыОткрытия()
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("Характеристика");
	Массив.Добавить("СДИЗ");
	Массив.Добавить("Партия");
	Массив.Добавить("ВыделеннаяПартия");
	Массив.Добавить("НоваяПартия");
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти
