#Область ПрограммныйИнтерфейс

Процедура ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки) Экспорт

	// Реквизиты молочной продукции ВетИС
	ОбязательныеКолонки.Вставить("ТребуетсяВыборВСД",                Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ИдентификаторПроисхожденияВЕТИС",  Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ОбязательныеКолонки.Вставить("ИдентификаторыПроисхожденияВЕТИС", Новый ОписаниеТипов("Массив"));
	ОбязательныеКолонки.Вставить("СкоропортящаясяПродукция",         Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ИдентификаторДокумента",           Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("СпособВводаВОборот",               Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));

КонецПроцедуры

Процедура РасширенныеПроверкиРезультатаОбработкиКодаМаркировки(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки) Экспорт

	Если ДанныеШтрихкода.ТребуетсяВыборВСД Тогда

		Если ЗначениеЗаполнено(ДанныеШтрихкода.ИдентификаторПроисхожденияВЕТИС) Тогда
			ДанныеШтрихкода.ТребуетсяВыборВСД = Ложь;
		Иначе
			РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
		КонецЕсли;

	КонецЕсли;

	ПропуститьПроверкуСрокаГодности =
		ИнтеграцияИСМПКлиентСервер.ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения(ДанныеШтрихкода.ВидПродукции)
		И (ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции <> Неопределено
		 И ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.СохраненВыборПустогоСрокаГодности
		 Или ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП);

	Если Не ПропуститьПроверкуСрокаГодности
		И ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.ГоденДо)
		И (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или (ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка)) Тогда

		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;

	КонецЕсли;

КонецПроцедуры

Функция ЭтоПроверкаПиваВРозницуСЧастичнымВыбытием(ПараметрыСканирования, СтрокаДанных) Экспорт

	ПроверкаПродажиПиваВРозницуСЧастичнымВыбытием = (СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках)
		И (ИнтеграцияИС.ИспользуетсяЧастичноеВыбытие(Перечисления.ВидыПродукцииИС.Пиво)
			Или ИнтеграцияИС.ИспользуетсяЧастичноеВыбытие(Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках))
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП;

	Возврат ПроверкаПродажиПиваВРозницуСЧастичнымВыбытием;

КонецФункции

// Приводит код маркировки к виду, необходимому для системы ИС МП.
// 
// Параметры:
//  СтрокаКодаМаркировки - Структура - Строка кода маркировки.
//  ПараметрыНормализации - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки
// Возвращаемое значение:
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации) Экспорт
	
	ЗначениеДляПоиска = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализации);
	
	Возврат ЗначениеДляПоиска;
	
КонецФункции

// Получает вид продукции по GTIN на остатки.
// 
// Параметры:
// 	КодМаркировки - Строка                                    - Код маркировки.
// 	Организация   - Неопределено, ОпределяемыйТип.Организация - Организация, владелец GTIN на остатки.
// Возвращаемое значение:
// 	Неопределено, Массив из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции кода маркировки остатков.
Функция ВидыПродукцииПоКодуМаркировкиОстатков(КодМаркировки, Организация = Неопределено) Экспорт

	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировки);
	Если ДанныеРазбора = Неопределено Или Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивДанныхЗаполнения = Новый Массив;

	СтрокаДанных = Новый Структура();
	СтрокаДанных.Вставить("GTIN");
	СтрокаДанных.Вставить("ВидПродукции");
	СтрокаДанных.Вставить("Номенклатура");
	СтрокаДанных.Вставить("Представление");

	СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;

	МассивДанныхЗаполнения.Добавить(СтрокаДанных);

	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		МассивДанныхЗаполнения, Организация, , "Представление");

	МассивРезультат = Новый Массив;
	ВидПродукции    = МассивДанныхЗаполнения[0].ВидПродукции;

	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		
		МассивРезультат.Добавить(ВидПродукции);
		
	Иначе
		
		Для Каждого ВидПродукции Из ДанныеРазбора.ВидыПродукции Цикл
			Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Тогда
				МассивРезультат.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;

	Возврат МассивРезультат;

КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева.
// Возвращаемое значение:
//  см. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ПараметрыСканирования, СортироватьДанные = Ложь) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки);
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(ДокументСсылка, ПараметрыСканирования);
	
	ШтрихкодыМассив = ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыМассив, ПараметрыСканирования.ДопустимыеВидыПродукции);
	Если ШтрихкодыУпаковок.Количество() > ШтрихкодыМассив.Количество() Тогда
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ШтрихкодУпаковки) И ШтрихкодыМассив.Найти(СтрокаТЧ.ШтрихкодУпаковки) = Неопределено Тогда
				ШтрихкодыУпаковок.Удалить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ШтрихкодированиеИСМПСлужебный.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок, ПараметрыСканирования, СортироватьДанные);
	
	//@skip-check constructor-function-return-section
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Сворачивает в одну строку однородные объемно-сортовые коды, пришедшие в одном УПД
//
// Параметры:
//  ВложенныеШтрихкодыУпаковок - См. ВложенныеШтрихкодыУпаковокПоДокументу
//  ШтрихкодыУПД               - ТаблицаЗначений - Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ЗначениеШтрихкода - Строка - значение штрихкода.
//   * Брак - Булево - используется при загрузке из торг2.
//   * Недостача - Булево - используется при загрузке из торг2.
//
Процедура СвернутьОднородныеОбъемноСортовыеКоды(ВложенныеШтрихкодыУпаковок, ШтрихкодыУПД) Экспорт
	
	Если ВложенныеШтрихкодыУпаковок.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКодовМаркировки = ВложенныеШтрихкодыУпаковок.ДанныеКодовМаркировки;
	ДеревоУпаковок        = ВложенныеШтрихкодыУпаковок.ВложенныеШтрихкоды.ДеревоУпаковок;
	
	Отбор = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет);
	ОбъемноСортовыеКоды = ДанныеКодовМаркировки.Скопировать(Отбор, "GTIN");
	ОбъемноСортовыеКоды.Свернуть("GTIN");
	
	УдалитьСтрокиТаблицы = Новый Массив;
	
	Для Каждого СтрокаGTIN Из ОбъемноСортовыеКоды Цикл
		Отбор.Вставить("GTIN", СтрокаGTIN.GTIN);
		ИсходныеСтроки = ДанныеКодовМаркировки.НайтиСтроки(Отбор);
		Приемник = ИсходныеСтроки[0];
		Для Индекс = 0 По ИсходныеСтроки.ВГраница() Цикл
			Источник = ИсходныеСтроки[Индекс];
			ВУПД = ШтрихкодыУПД.НайтиСтроки(
				Новый Структура("ЗначениеШтрихкода", Источник.ДанныеРазбора.КодМаркировки)).Количество();
			Если Индекс = 0 Тогда
				Если ВУПД = 1 Тогда
					Продолжить;
				Иначе 
					ВУПД = ВУПД - 1;
				КонецЕсли;
			Иначе 
				УдалитьСтрокиТаблицы.Добавить(Источник);
			КонецЕсли;
			//Преобразование числовых значений
			Вложенных = Приемник.СоставКодаМаркировки.КоличествоВложенныхЕдиниц + ВУПД * Источник.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
			Приемник.Коэффициент                               = Приемник.Коэффициент                               + ВУПД * Источник.Коэффициент;
			Приемник.Количество                                = Приемник.Количество                                + ВУПД * Источник.Количество;
			Приемник.КоличествоПотребительскихУпаковок         = Приемник.КоличествоПотребительскихУпаковок         + ВУПД * Источник.КоличествоПотребительскихУпаковок;
			Приемник.ПлановоеКоличествоПотребительскихУпаковок = Приемник.ПлановоеКоличествоПотребительскихУпаковок + Источник.ПлановоеКоличествоПотребительскихУпаковок;
			Приемник.ДанныеРазбора.СоставКодаМаркировки.КоличествоВложенныхЕдиниц = Вложенных;
			Приемник.СоставКодаМаркировки.КоличествоВложенныхЕдиниц               = Вложенных;
			//Преобразование строковых значений
			КодМаркировки                = СтрШаблон("%1%2%3%4",   "02", Приемник.GTIN,   "37", Формат(Вложенных,"ЧГ="));
			НормализованныйКодМаркировки = СтрШаблон("%1%2%3%4", "(02)", Приемник.GTIN, "(37)", Формат(Вложенных,"ЧГ="));
			Приемник.ДанныеРазбора.КодМаркировки = КодМаркировки;
			Приемник.ДанныеРазбора.НормализованныйКодМаркировки = НормализованныйКодМаркировки;
			Приемник.НормализованныйШтрихкод                    = НормализованныйКодМаркировки;
			Приемник.Штрихкод                                   = НормализованныйКодМаркировки;
			Приемник.ШтрихкодBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(НормализованныйКодМаркировки);
			//Дерево
			ЗаполнитьЗначенияСвойств(Приемник.СтрокаДерева, Приемник);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из УдалитьСтрокиТаблицы Цикл
		ДеревоУпаковок.Строки.Удалить(ЭлементМассива.СтрокаДерева);
		ДанныеКодовМаркировки.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

#Область Статусы

// Заполняет массив допустимых начальных статусов кодов при отправке отчета о нанесении.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Массив допустимых начальных статусов кодов.
//
Функция ДопустимыеНачальныеСтатусыОтчетОНанесении(ВидПродукции) Экспорт
	
	Статусы = Новый Массив;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ШтрихкодированиеМОТПКлиентСервер.ЗаполнитьДопустимыеНачальныеСтатусыОтчетОНанесении(Статусы);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьДопустимыеНачальныеСтатусыОтчетОНанесении(Статусы);
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Заполняет массив ожидаемых статусов кодов после отправки отчета о нанесении.
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Массив ожидаемых статусов кодов.
//
Функция ОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(ВидПродукции) Экспорт
	
	Статусы = Новый Массив;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ШтрихкодированиеМОТПКлиентСервер.ЗаполнитьОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Статусы);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Статусы);
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область РаспределениеТоваровПоШтрихкодамУпаковок

// Подготавливает новую структуру параметров распределение для передачи в (См. РаспределениеШтрихкодовУпаковокПоТоварам)
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыУказанияСерий  - Структура, Неопределено - Параметры указания серий.
// * ДокументСсылка          - ДокументСсылка, ДанныеФормыСтруктура, ДокументОбъект, Неопределено - Ссылка на документ,
//                             объект документа или данные формы, связанные с объектом документа.
// * ДопустимыТоварыБезМарок - Булево                  - Возможнен режим, когда марок не достаточно на все товары.
// * ДопустимыПовторяющиесяШтрихкоды - Булево - БРМК. Один и тот же код маркировки может быть использован несколько раз
Функция НовыеПараметрыРаспределенияШтрихкодовУпаковок() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДокументСсылка",                  Неопределено);
	Параметры.Вставить("ПараметрыУказанияСерий",          Неопределено);
	Параметры.Вставить("ДопустимыТоварыБезМарок",         Ложь);
	Параметры.Вставить("ДопустимыПовторяющиесяШтрихкоды", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Распределяет штрихкоды упаковок по таблице товаров с учетом групповых упаковок и подменной номенклатуры частичного выбытия.
// 
// Параметры:
// 	ПараметрыРаспределения - см. НовыеПараметрыРаспределенияШтрихкодовУпаковок
// 	Товары                 - ТаблицаЗначений:
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура               - номенклатура таблицы товаров
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика таблицы товаров (опционально)
// 	 * Упаковка           - ОпределяемыйТип.Упаковка                   - устарел. Упаковки прикладной конфигурации не используются
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры          - серия таблицы товаров (опционально)
// 	 * Количество         - Число                                      - количество единиц товаров
// 	 * Цена               - Число                                      - цена для контроля МРЦ
// 	МассивУпаковок         - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров -
// 	                         штрикходы упаковок документа
// 	                       - Массив из см. ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам -
// 	                         штрикходы упаковок документа, с дополнительным данными частичного выбытия, идентификаторами разрешительного запроса ГИС МТ
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьОшибки - Булево           - признак наличия ошибок распределения
// * Ошибки     - Массив из Строка - тексты ошибок распредления
// * РаспределенныеСтроки          - Соответствие из КлючИЗначение:
// 	* Ключ     - СтрокаТабличнойЧасти                                         - исходная строка таблицы товаров
// 	* Значение - Массив из См. НовыйРезультатРаспределенияШтрихкодовПоТоварам - результат распределения
// * СтрокиБезШтрихкодов - Соответствие из КлючИЗначение - устарел. Товар распределяется всегда для отображаения ошибок
Функция РаспределениеШтрихкодовУпаковокПоТоварам(ПараметрыРаспределения, Товары, МассивУпаковок) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("РаспределенныеСтроки", Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("СтрокиБезШтрихкодов",  Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("Ошибки",               Новый Массив());
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",           Ложь);
	
	ДанныеШапки               = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ПараметрыРаспределения.ДокументСсылка);
	ПараметрыСканирования     = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки);
	ТребуетсяЧастичноеВыбытие = ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования);
	
	ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции)
		Или ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	КонецЕсли;
	Если ПараметрыСканирования.ПараметрыУказанияСерий = Неопределено
		И ПараметрыРаспределения.ПараметрыУказанияСерий <> Неопределено Тогда
		ПараметрыСканирования.ПараметрыУказанияСерий = ПараметрыРаспределения.ПараметрыУказанияСерий;
	КонецЕсли;
	
	#Область ФормированиеИсходныхДанных
	
	// Подготовка таблицы Товаров
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Упаковка",               Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаТовары.Колонки.Добавить("Серия",                  Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Количество",             ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("Цена",                   ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("Приоритет",              ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ТаблицаТовары.Колонки.Добавить("ИндексИсходнойСтроки",   ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаТовары.Колонки.Добавить("ТребуетсяКодМаркировки", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		НоваяСтрока.ИндексИсходнойСтроки = Товары.Индекс(СтрокаТовары);
		
		Если ЗначениеЗаполнено(НоваяСтрока.КоличествоУпаковок)
			И НоваяСтрока.КоличествоУпаковок <> НоваяСтрока.Количество Тогда
			НоваяСтрока.Приоритет = 5;
		КонецЕсли;
		
		НоваяСтрока.ТребуетсяКодМаркировки = (НоваяСтрока.Количество > 0);
		
	КонецЦикла;
	
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика");
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Цена");
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия, Цена");
	ТаблицаТовары.Сортировать("Приоритет Убыв, Количество Убыв");
	
	ПовторяющиесяШтрихкоды = Новый Соответствие();
	
	// Подготовка таблицы Штрихкодов
	Если ПараметрыРаспределения.ДопустимыПовторяющиесяШтрихкоды Тогда
		
		ДанныеУпаковокПоШтрихкоду = Новый Соответствие();
		УдаляемыеЭлементы         = Новый Массив();
		
		Для Каждого ЭлементДанных Из МассивУпаковок Цикл
			
			ДанныеПоШтрихкодуУпаковки = ДанныеУпаковокПоШтрихкоду[ЭлементДанных.ШтрихкодУпаковки];
			Если ДанныеПоШтрихкодуУпаковки = Неопределено Тогда
				ДанныеПоШтрихкодуУпаковки = Новый Массив();
				ДанныеУпаковокПоШтрихкоду[ЭлементДанных.ШтрихкодУпаковки] = ДанныеПоШтрихкодуУпаковки;
			КонецЕсли;
			
			Если ДанныеПоШтрихкодуУпаковки.Количество() >= 1 Тогда
				ДанныеПовторяющегося = ПовторяющиесяШтрихкоды[ЭлементДанных.ШтрихкодУпаковки];
				Если ДанныеПовторяющегося = Неопределено Тогда
					ДанныеПовторяющегося = Новый Массив();
					ПовторяющиесяШтрихкоды[ЭлементДанных.ШтрихкодУпаковки] = ДанныеПовторяющегося;
					ДанныеПовторяющегося.Добавить(ОбщегоНазначения.СкопироватьРекурсивно(ДанныеПоШтрихкодуУпаковки[0]));
					ДанныеПоШтрихкодуУпаковки[0].ЧастичноеВыбытиеКоличество = ДанныеПоШтрихкодуУпаковки[0].ЧастичноеВыбытиеКоличество + ЭлементДанных.ЧастичноеВыбытиеКоличество;
				КонецЕсли;
				УдаляемыеЭлементы.Добавить(ЭлементДанных);
				ДанныеПовторяющегося.Добавить(ЭлементДанных);
			КонецЕсли;
			
			ДанныеПоШтрихкодуУпаковки.Добавить(ЭлементДанных);
			
		КонецЦикла;
		
		Для Каждого ЭлементДанных Из УдаляемыеЭлементы Цикл
			МассивУпаковок.Удалить(МассивУпаковок.Найти(ЭлементДанных));
		КонецЦикла;
		
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		МассивУпаковок,
		ПараметрыСканирования,,
		Истина);
	
	ТаблицаШтрихкоды = ШтрихкодыУпаковок.МаркированныеТовары.СкопироватьКолонки();
	
	ДобавляемыеКолонки = Новый Структура();
	ДобавляемыеКолонки.Вставить("Количество",        ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДобавляемыеКолонки.Вставить("ГрупповаяУпаковка", Новый ОписаниеТипов("Булево"));
	ДобавляемыеКолонки.Вставить("Приоритет",         ОбщегоНазначения.ОписаниеТипаЧисло(2));
	ДобавляемыеКолонки.Вставить("ИспользоватьСерии", Новый ОписаниеТипов("Булево"));
	ДобавляемыеКолонки.Вставить("Склад",             Метаданные.ОпределяемыеТипы.Склад.Тип);
	ДобавляемыеКолонки.Вставить("МРЦ",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ШтрихкодированиеОбщегоНазначенияМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ТаблицаШтрихкоды, ДобавляемыеКолонки);
	
	ШтрихкодированиеИС.ЗаполнитьТаблицуШтрихкодовЧастичногоВыбытияИзДереваУпаковокРекурсивно(
		ТаблицаШтрихкоды,
		ШтрихкодыУпаковок.ДеревоУпаковок,
		ТребуетсяЧастичноеВыбытие);
	
	// Заполнение служебных полей таблицы Штрихкодов
	
	Для Каждого СтрокаТаблицы Из ТаблицаШтрихкоды Цикл
		
		ДанныеПовторяющегосяКода = ПовторяющиесяШтрихкоды[СтрокаТаблицы.ШтрихкодУпаковки];
		
		Если ДанныеПовторяющегосяКода <> Неопределено Тогда
			ЭтоПерваяСтрока = Истина;
			Для Каждого СтрокаДанных Из ДанныеПовторяющегосяКода Цикл
				Если ЭтоПерваяСтрока Тогда
					СтрокаТаблицы.Количество = СтрокаДанных.ЧастичноеВыбытиеКоличество;
					ЭтоПерваяСтрока          = Ложь;
				Иначе
					НоваяСтрока = ТаблицаШтрихкоды.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Количество                                   = СтрокаДанных.ЧастичноеВыбытиеКоличество;
					НоваяСтрока.РазрешительныйРежимДатаЗапросаГИСМТ          = СтрокаДанных.РазрешительныйРежимДатаЗапросаГИСМТ;
					НоваяСтрока.РазрешительныйРежимИдентификаторЗапросаГИСМТ = СтрокаДанных.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
				КонецЕсли;
			КонецЦикла;
			ПовторяющиесяШтрихкоды[СтрокаТаблицы.ШтрихкодУпаковки] = Неопределено;
		КонецЕсли;
		
		Если ТребуетсяЧастичноеВыбытие
			И СтрокаТаблицы.ЧастичноеВыбытие
			И СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
			СтрокаТаблицы.ИспользоватьСерии = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Склад)
			И ПараметрыРаспределения.ПараметрыУказанияСерий <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ПараметрыРаспределения.ПараметрыУказанияСерий, "Склад") Тогда
			СтрокаТаблицы.Склад = ПараметрыРаспределения.ПараметрыУказанияСерий.Склад;
		КонецЕсли;
		
		СтрокаТаблицы.ИспользоватьСерии = ОбщегоНазначенияИС.ТребуетсяВыборСерии(СтрокаТаблицы, ПараметрыСканирования);
		
	КонецЦикла;
	
	ТаблицаШтрихкоды.Сортировать("Приоритет Убыв, Количество Убыв");
	
	#КонецОбласти
	
	#Область Распределение
	
	СвойстваЗаполненияЕГАИС = "Штрихкод,ВидПродукции,ВидУпаковки,СоставКодаМаркировки, ШтрихкодУпаковки,ТипШтрихкода";
	СвойстваЗаполненияИСМП  = "Штрихкод,ВидПродукции,ВидУпаковки,ПолныйКодМаркировки,СоставКодаМаркировки,
			                  |ШтрихкодУпаковки,ТипШтрихкода,КоличествоПотребительскихУпаковок,РазрешительныйРежимИдентификаторЗапросаГИСМТ,РазрешительныйРежимДатаЗапросаГИСМТ";
			                  
	Если ТребуетсяЧастичноеВыбытие Тогда
		СвойстваЗаполненияЕГАИС = СтрШаблон(
			"%1,%2",
			СвойстваЗаполненияЕГАИС,
			"ЧастичноеВыбытие,ЕмкостьПотребительскойУпаковки");
		СвойстваЗаполненияИСМП = СтрШаблон(
			"%1,%2",
			СвойстваЗаполненияИСМП,
			"ЧастичноеВыбытие,ЕмкостьПотребительскойУпаковки");
	КонецЕсли;
	
	ДанныеЗаполненияСвойствПриПроверкеККТ          = Новый Массив();
	ЗаполнитьКоличествоЧастичноеВыбытие            = Новый Массив();
	ЗаполнитьДанныеВскрытыхПотребительскихУпаковок = Новый Массив();
	
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкоды Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаШтрихкод.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаШтрихкод.Характеристика);
		
		Если СтрокаШтрихкод.ИспользоватьСерии Тогда
			СтруктураПоиска.Вставить("Серия", СтрокаШтрихкод.Серия);
		КонецЕсли;
		
		НайденныеСтрокиТовары   = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииКМ.ВключатьМРЦ = Истина;
		
		Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
			Если СтрокаТовары.Количество = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаШтрихкод.ГрупповаяУпаковка
				И СтрокаШтрихкод.Количество > СтрокаТовары.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатСписания = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
			Если СтрокаШтрихкод.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				ЗаполнитьЗначенияСвойств(РезультатСписания, СтрокаШтрихкод, СвойстваЗаполненияЕГАИС);
			Иначе
				ЗаполнитьЗначенияСвойств(РезультатСписания, СтрокаШтрихкод, СвойстваЗаполненияИСМП);
			КонецЕсли;
			
			ОперацияИС = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, РезультатСписания.ВидПродукции);
			
			Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
				РезультатСписания.ВидПродукции, ОперацияИС) Тогда
				ЗаполнитьДанныеВскрытыхПотребительскихУпаковок.Добавить(РезультатСписания);
			КонецЕсли;
			
			Если РезультатСписания.ЧастичноеВыбытие Тогда
				ИсходнаяСтрока = Товары[СтрокаТовары.ИндексИсходнойСтроки];
				ЭлементОбработки = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НоваяСтруктураУстановкиДополнительныхСвойствПриПроверкеККТ();
				ЭлементОбработки.СтрокаТовары        = ИсходнаяСтрока;
				ЭлементОбработки.СтрокаНазначения    = РезультатСписания;
				ЭлементОбработки.ЭтоЧастичноеВыбытие = РезультатСписания.ЧастичноеВыбытие;
				Если СтрокаШтрихкод.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
					ЭлементОбработки.ИсходнаяНоменклатура = СтрокаШтрихкод.ЧастичноеВыбытиеНоменклатура;
				КонецЕсли;
				ДанныеЗаполненияСвойствПриПроверкеККТ.Добавить(ЭлементОбработки);
				ЗаполнитьКоличествоЧастичноеВыбытие.Добавить(ЭлементОбработки);
			КонецЕсли;
			
			РезультатСписания.Количество    = СтрокаШтрихкод.Количество;
			РезультатСписания.КодМаркировки = СтрокаШтрихкод.Штрихкод;
			ОбработкаИтоговойСтрокиРаспределения(РезультатСписания, СтрокаШтрихкод, ПараметрыНормализацииКМ);
			
			СписатьКоличествоТоваров = СтрокаШтрихкод.Количество;
			Если СписатьКоличествоТоваров > СтрокаТовары.Количество Тогда
				СписатьКоличествоТоваров = СтрокаТовары.Количество;
			КонецЕсли;
			СтрокаТовары.Количество     = СтрокаТовары.Количество - СписатьКоличествоТоваров;
			ЭтоОшибкаТребуетВзвешивания = (СтрокаШтрихкод.ТребуетВзвешивания И СтрокаШтрихкод.Количество = 0);
			СтрокаШтрихкод.Количество   = СтрокаШтрихкод.Количество - СписатьКоличествоТоваров;
			
			Если СтрокаШтрихкод.ГрупповаяУпаковка Тогда
				РезультатСписания.КоличествоУпаковок = РезультатСписания.КоличествоУпаковок + 1;
			КонецЕсли;
			
			ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания);
			
			Если СтрокаТовары.Количество = 0 Тогда
				СтрокаТовары.ТребуетсяКодМаркировки = Ложь;
			КонецЕсли;
			
			Если ЭтоОшибкаТребуетВзвешивания Тогда
				РезультатСписания.ТекстОшибки = НСтр("ru = 'Требуется указание веса товара'");
				Прервать;
			КонецЕсли;
			
			Если СтрокаШтрихкод.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И Не ПараметрыСканирования.ПоддерживаетсяОбъемноСортовойУчет Тогда
				РезультатСписания.ТекстОшибки = НСтр("ru = 'Пробитие чеков при объемно-сортовом учете не поддерживается.'");
			КонецЕсли;
			
			Если СтрокаШтрихкод.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ЗаполнитьКоличествоЧастичноеВыбытие(ЗаполнитьКоличествоЧастичноеВыбытие, ВозвращаемоеЗначение);
	ЗаполнитьДанныеВскрытыхПотребительскихУпаковок(ЗаполнитьДанныеВскрытыхПотребительскихУпаковок);
	
	ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ПриУстановкеДополнительныхСвойствЭлеметовПроверкиСредствамиККТ(
		ДанныеЗаполненияСвойствПриПроверкеККТ);
	
	#Область КонтрольРезультатовРаспределения
	
	// Проверка штрихкодов, для которых не удалось найти товары
	
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкоды Цикл
		
		Если СтрокаШтрихкод.Количество > 0 Тогда
		
			Представление = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				СтрокаШтрихкод.Номенклатура,
				СтрокаШтрихкод.Характеристика,,
				СтрокаШтрихкод.Серия);
			
			ТекстОшибки = СтрШаблон(
					НСтр("ru ='Не удалось распределить код маркировки по товарам:
						      |%1 (%2)'"),
					СтрокаШтрихкод.Штрихкод,
					Представление);
			
			ВозвращаемоеЗначение.Ошибки.Добавить(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка товаров, для которых не удалось найти штрихкод
	
	СтруктураОтбора         = Новый Структура("ТребуетсяКодМаркировки", Истина);
	ТоварыБезКодаМаркировки = ТаблицаТовары.Скопировать(СтруктураОтбора);
	
	Если ТоварыБезКодаМаркировки.Количество() Тогда
		ДополнитьРаспределениеПоТоварамБезШтрихкодов(
			ВозвращаемоеЗначение,
			ПараметрыРаспределения,
			ПараметрыСканирования,
			ДанныеШапки.Дата,
			ТоварыБезКодаМаркировки,
			Товары);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки = (ВозвращаемоеЗначение.Ошибки.Количество() > 0);
	
	#КонецОбласти
	
	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполнение сохраняемой строки штрихкодов упаковки для обработки данных частичного выбытия.
// 
// Параметры:
//  СтрокаШтрихкод        - СтрокаТаблицыЗначений из см. ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаШтрихкодовВерхнегоУровня
//  ДанныеШтрихкода       - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(СтрокаШтрихкод, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковкиПоДаннымЧастичногоВыбытия(СтрокаШтрихкод, ДанныеШтрихкода, ПараметрыСканирования);
	ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковкиПоДаннымРазрешительнойСистемыГИСМТ(СтрокаШтрихкод, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует новую таблицу значений для поиска в пуле кодов маркировки.
// 
// Параметры:
//   КолонкиВЕТИС   - Булево - добавлять колонки специфики маркировки ВетИС.
// Возвращаемое значение:
//   ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш-сумма кода маркировки.
Функция НоваяТаблицаПоискаКодаМаркировкиВПуле(КолонкиВЕТИС = Ложь) Экспорт
	
	КодыМаркировки = Новый ТаблицаЗначений;
	КодыМаркировки.Колонки.Добавить(
		"КодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ИсходныйКодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	
	Если КолонкиВЕТИС Тогда
		КодыМаркировки.Колонки.Добавить(
			"ИдентификаторПроисхожденияВЕТИС",
			Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
		КодыМаркировки.Колонки.Добавить(
			"СкоропортящаясяПродукция",
			Новый ОписаниеТипов("Булево"));
		КодыМаркировки.Колонки.Добавить(
			"ГоденДо",
			Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	КодыМаркировки.Колонки.Добавить(
		"Количество",
		Новый ОписаниеТипов("Число"));
	
	Возврат КодыМаркировки;
	
КонецФункции

// Добавляет код маркировки в коллекцию для поиска в пуле.
// 
// Параметры:
// 	ДанныеСтроки   - Строка, СтрокаТаблицыЗначений - Значение кода маркировки или строка данных.
// 	КодыМаркировки - См. НоваяТаблицаПоискаКодаМаркировкивПуле.
// 	ЗаполнитьКолонкиВЕТИС - Булево - необходимость заполнения колонок с данными для маркировки ветис
//
Процедура ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(ДанныеСтроки, КодыМаркировки, ЗаполнитьКолонкиВЕТИС = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеСтроки) = Тип("Строка") Тогда
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = ДанныеСтроки;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.ИсходныйКодМаркировки  = НоваяСтрока.КодМаркировки;
		
	Иначе
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = ДанныеСтроки.Штрихкод;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.ИсходныйКодМаркировки  = НоваяСтрока.КодМаркировки;
		
		Если ЗаполнитьКолонкиВЕТИС Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки, "ИдентификаторПроисхожденияВЕТИС, ГоденДо, СкоропортящаясяПродукция");
		КонецЕсли;
		
		Если ДанныеСтроки.ТребуетВзвешивания
			И ЗначениеЗаполнено(ДанныеСтроки.Количество) Тогда
			НоваяСтрока.Количество = ДанныеСтроки.Количество;
		КонецЕсли;
		
		Если (ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
			
			ВключаетМРЦ = ДанныеСтроки.ДанныеРазбора <> Неопределено
				И ДанныеСтроки.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
				И ДанныеСтроки.СоставКодаМаркировки.ВключаетМРЦ;
			
			СохраненБезСкобок = ДанныеСтроки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix
				И Лев(ДанныеСтроки.Штрихкод,1) <> "(";
			
			Если ВключаетМРЦ Или СохраненБезСкобок Тогда
				
				НастройкиСохраненияВПул = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
				
				НоваяСтрока = КодыМаркировки.Добавить();
				НоваяСтрока.КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					ДанныеСтроки,
					ДанныеСтроки.ВидПродукции,
					НастройкиСохраненияВПул);
				НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
				НоваяСтрока.ИсходныйКодМаркировки  = ДанныеСтроки.Штрихкод;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск кодов маркировки в пуле, получая дополнительные поля.
// 
// Параметры:
// 	КодыМаркировки - См. НоваяТаблицаПоискаКодаМаркировкиВПуле.
// 	Поля           - Строка - Поля пула кодов через запятую, которые необходимо включить в рузультирующие данные.
// 	РазбиватьПоСрокамГодности - Булево - признак наличия дополнительных полей (идентификатор происхождения ВетИС, срок 
// 	   годности) в таблице-источнике, которые требуется сохранить
// Возвращаемое значение:
// ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Код маркировки.
// - а так же дополнительные запрашиваемые поля.
Функция РезультатПоискаВПулеКодовМаркировки(КодыМаркировки, Поля = "", РазбиватьПоСрокамГодности = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КодМаркировки          КАК КодМаркировки,
	|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	Т.ИсходныйКодМаркировки  КАК ИсходныйКодМаркировки,
	|	Т.Количество             КАК Количество,
	|	&ДополнительныеПоляИсточника
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	&КодыМаркировки КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|///////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИсходныйКодМаркировки КАК КодМаркировки,
	|	Т.Количество            КАК Количество,
	|	&ДополнительныеПоляИсточника,
	|	&ДополнительныеПоляПула
	|ИЗ
	|	КодыМаркировки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки         = Т.КодМаркировки
	|		И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
	|");
	Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
	
	Запрос.УстановитьПараметр("ДополнительныеПоляИсточника", Истина);
	Запрос.УстановитьПараметр("ДополнительныеПоляПула", Истина);
	
	Если ЗначениеЗаполнено(Поля) Тогда
		МассивПолей = СтрРазделить(Поля, ",");
		ПоляЗапроса = Новый Массив;
		Для Каждого СтрокаПоле Из МассивПолей Цикл
			ПоляЗапроса.Добавить(СтрШаблон("ПулКодовМаркировкиСУЗ.%1 КАК %1", СокрЛП(СтрокаПоле)));
		КонецЦикла;
		ТекстПолей = СтрСоединить(ПоляЗапроса, "," + Символы.ПС);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляПула", ТекстПолей);
	КонецЕсли;
	
	Если РазбиватьПоСрокамГодности Тогда
		ТекстПолей = 
		"Т.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|Т.ГоденДо КАК ГоденДо,
		|Т.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляИсточника", ТекстПолей);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция МассивGTINНаОстаткиДляВыбора(ТекущиеДанные, Объект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Номенклатура",   ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ТекущиеДанные.Характеристика);
	
	КодТНВЭД = ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(ТекущиеДанные.КодТНВЭД, Объект.ВидПродукции);
	
	Запрос.УстановитьПараметр("ДатаНачалаПоиска", ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -3));
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("НачалоGTIN",       ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
	Запрос.УстановитьПараметр("КодТНВЭД",         КодТНВЭД);
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		Запрос.УстановитьПараметр("ДлинаТНВЭД", 4);
	Иначе
		Запрос.УстановитьПараметр("ДлинаТНВЭД", 2);
	КонецЕсли;
	
	ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
		Объект.ВидПродукции, КодТНВЭД);
	
	Запрос.УстановитьПараметр("ИспользоватьВозрастнуюКатегорию", ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию);
	Запрос.УстановитьПараметр("ИспользоватьМодель",              ПараметрыОписанияОстатков.ИспользоватьМодель);
	Запрос.УстановитьПараметр("ИспользоватьНаименование",        ПараметрыОписанияОстатков.ИспользоватьНаименование);
	Запрос.УстановитьПараметр("ИспользоватьСпособВводаВОборот",  ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот);
	Запрос.УстановитьПараметр("ИспользоватьЦелевойПол",          ПараметрыОписанияОстатков.ИспользоватьЦелевойПол);
	Запрос.УстановитьПараметр("ИспользоватьТоварныйЗнак",        ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак);
	
	Запрос.УстановитьПараметр("Номенклатура",        ТекущиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",      ТекущиеДанные.Характеристика);
	Запрос.УстановитьПараметр("ЦелевойПол",          ТекущиеДанные.ЦелевойПол);
	Запрос.УстановитьПараметр("Модель",              ТекущиеДанные.Модель);
	Запрос.УстановитьПараметр("ВозрастнаяКатегория", ТекущиеДанные.ВозрастнаяКатегория);
	Запрос.УстановитьПараметр("СпособВводаВОборот",  ТекущиеДанные.СпособВводаВОборот);
	Запрос.УстановитьПараметр("ТоварныйЗнак",        ТекущиеДанные.ТоварныйЗнак);
	Запрос.УстановитьПараметр("Наименование",        ТекущиеДанные.Наименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка
	|	ПО ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Ссылка = ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Дата >= &ДатаНачалаПоиска
	|ГДЕ
	|	ПОДСТРОКА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN, 1, 3) = &НачалоGTIN
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Организация        = &Организация
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗШапка.Проведен
	|	И ПОДСТРОКА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.КодТНВЭД, 1, &ДлинаТНВЭД) = &КодТНВЭД
	|	И ВЫБОР КОГДА &ИспользоватьНаименование
	|		ТОГДА 
	|		ВЫБОР КОГДА &Наименование = """"
	|			ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Номенклатура      = &Номенклатура
	|				  И ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Характеристика  = &Характеристика
	|			ИНАЧЕ ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Наименование      = &Наименование
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьЦелевойПол
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ЦелевойПол = &ЦелевойПол
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьМодель
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Модель = &Модель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьВозрастнуюКатегорию
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ВозрастнаяКатегория = &ВозрастнаяКатегория
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьСпособВводаВОборот
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.СпособВводаВОборот = &СпособВводаВОборот
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьТоварныйЗнак
	|		ТОГДА ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.ТоварныйЗнак = &ТоварныйЗнак
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КэшОписанияОстатковИСМП.GTIN
	|ИЗ
	|	РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатковИСМП
	|ГДЕ
	|	КэшОписанияОстатковИСМП.Организация = &Организация
	|	И ВЫБОР КОГДА &ИспользоватьЦелевойПол
	|		ТОГДА КэшОписанияОстатковИСМП.ЦелевойПол = &ЦелевойПол
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьМодель
	|		ТОГДА КэшОписанияОстатковИСМП.Модель = &Модель
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьВозрастнуюКатегорию
	|		ТОГДА КэшОписанияОстатковИСМП.ВозрастнаяКатегория = &ВозрастнаяКатегория
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьТоварныйЗнак
	|		ТОГДА КэшОписанияОстатковИСМП.ТоварныйЗнак = &ТоварныйЗнак
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР КОГДА &ИспользоватьНаименование И &Наименование <> """"
	|		ТОГДА КэшОписанияОстатковИСМП.Представление = &Наименование
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И КэшОписанияОстатковИСМП.СпособВводаВОборот = &СпособВводаВОборот
	|	И (ПОДСТРОКА(КэшОписанияОстатковИСМП.КодТНВЭД, 1, &ДлинаТНВЭД) = &КодТНВЭД
	|	ИЛИ КэшОписанияОстатковИСМП.КодТНВЭД = """")
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивGTIN = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		GTIN = Выборка.GTIN;
		
		Если Не МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(GTIN)
			И Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивGTIN.Добавить(GTIN);
		
	КонецЦикла;
	
	Возврат МассивGTIN;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания)
	
	ИсходнаяСтрокаТовары = Товары.Получить(СтрокаТовары.ИндексИсходнойСтроки);
	
	РаспределенныеСтроки = ВозвращаемоеЗначение.РаспределенныеСтроки.Получить(ИсходнаяСтрокаТовары);
	Если РаспределенныеСтроки = Неопределено Тогда
		РаспределенныеСтроки = Новый Массив;
		ВозвращаемоеЗначение.РаспределенныеСтроки.Вставить(ИсходнаяСтрокаТовары, РаспределенныеСтроки);
	КонецЕсли;
	
	РаспределенныеСтроки.Добавить(РезультатСписания);
	
КонецПроцедуры

Процедура ОбработкаИтоговойСтрокиРаспределения(РезультатСписания, СтрокаШтрихкод, ПараметрыНормализацииКМ)
	
	ВСоставеКодаЕстьМРЦ = (РезультатСписания.СоставКодаМаркировки <> Неопределено
		И РезультатСписания.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
		И РезультатСписания.СоставКодаМаркировки.ВключаетМРЦ);
	
	Если (РезультатСписания.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
		Или РезультатСписания.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция)
		И РезультатСписания.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix
		И Не ВСоставеКодаЕстьМРЦ Тогда
		
		РезультатСписания.Штрихкод = СтрШаблон("%1AAAA", РезультатСписания.КодМаркировки);
	
	ИначеЕсли РезультатСписания.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И РезультатСписания.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		И ЗначениеЗаполнено(СтрокаШтрихкод.ПолныйКодМаркировки)
		И (РезультатСписания.СоставКодаМаркировки = Неопределено
		Или (РезультатСписания.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И Не РезультатСписания.СоставКодаМаркировки.ВключаетМРЦ)) Тогда
	
		ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(РезультатСписания.ПолныйКодМаркировки);
		ДанныеРазбора       = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			ПолныйКодМаркировки,
			РезультатСписания.ВидПродукции);
			
		Если ДанныеРазбора <> Неопределено Тогда
			Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
				РезультатСписания.Штрихкод = ПолныйКодМаркировки;
			Иначе
				РезультатСписания.Штрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					ДанныеРазбора, РезультатСписания.ВидПродукции, ПараметрыНормализацииКМ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Новый результат распределения штрихкодов по товарам.
// 
// Возвращаемое значение:
//  Структура - Данные о коде маркировки:
// * Количество                        - Число  - количество базовых единиц
// * КоличествоУпаковок                - Число  - Устарел. Количество упаковок
// * КоличествоПотребительскихУпаковок - Число  - количество потребительских упаковок
// * Штрихкод                          - Строка - строковое представление кода маркиаровки
// * ВидПродукции                      - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено        - вид продукции
// * ВидУпаковки                       - ПеречислениеСсылка.ВидыУпаковокИС, Неопределено         - вид упаковки
// * ШтрихкодУпаковки                  - СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - штрихкод упаковки
// * ТипШтрихкода                      - ПеречислениеСсылка.ТипыШтрихкодов, Неопределено         - тип штрихкода
// * КодМаркировки                     - Строка, Неопределено    - Нормализованный код маркировки
// * ПолныйКодМаркировки               - Строка, Неопределено    - полный код маркировки (base64)
// * СоставКодаМаркировки              - Структура, Неопределено - состав кода маркировки
// * ЧастичноеВыбытие                  - Булево                  - признак частичного выбытия части упаковки
// * ЕмкостьПотребительскойУпаковки    - Число                   - знаменатель значения частичного выбытия
// * ТекстОшибки                       - Строка, Неопределено    - текст ошибки распределения
// * КодЕдиницыИзмерения               - Строка, Неопределено    - код единицы измерения частично выбытия
// * ЧастичноеВыбытиеКоличество        - Число                   - количество частичного выбытия
// * РазрешительныйРежимИдентификаторЗапросаГИСМТ - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор запроса ГИС МТ
// * РазрешительныйРежимДатаЗапросаГИСМТ - Строка - дата получения идентификатора ГИС МТ в формате timestamp
// * ЧастичноеВыбытиеОстаток             - Неопределено, Число  - остаток во вскрытой потребительской упаковке
// * ЧастичноеВыбытиеКомментарий         - Неопределено, Строка - комментарий к вскрытию упаковки, например, Кран №1 для пива
Функция НовыйРезультатРаспределенияШтрихкодовПоТоварам()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Количество",                                   0);
	ВозвращаемоеЗначение.Вставить("КоличествоПотребительскихУпаковок",            0);
	ВозвращаемоеЗначение.Вставить("КоличествоУпаковок",                           0);
	ВозвращаемоеЗначение.Вставить("Штрихкод",                                     "");
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидУпаковки",                                  Неопределено);
	ВозвращаемоеЗначение.Вставить("КодМаркировки",                                Неопределено);
	ВозвращаемоеЗначение.Вставить("ПолныйКодМаркировки",                          Неопределено);
	ВозвращаемоеЗначение.Вставить("СоставКодаМаркировки",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ШтрихкодУпаковки",                             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТипШтрихкода",                                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕмкостьПотребительскойУпаковки",               0);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытие",                             Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                                  Неопределено);
	ВозвращаемоеЗначение.Вставить("КодЕдиницыИзмерения",                          Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеКоличество",                   0);
	ВозвращаемоеЗначение.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", "");
	ВозвращаемоеЗначение.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ",          "");
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеОстаток",                      Неопределено);
	ВозвращаемоеЗначение.Вставить("ЧастичноеВыбытиеКомментарий",                  Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполнить количество частичное выбытие.
// 
// Параметры:
//  ИсходныеСтроки - Массив из см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НоваяСтруктураУстановкиДополнительныхСвойствПриПроверкеККТ -
//  ВозвращаемоеЗначениеРаспределения - Структура из КлючИЗначение - см. РаспределениеШтрихкодовУпаковокПоТоварам
Процедура ЗаполнитьКоличествоЧастичноеВыбытие(ИсходныеСтроки, ВозвращаемоеЗначениеРаспределения)
	
	Если ИсходныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникОписания = Новый Массив();
	Для Каждого ЭлементОписания Из ИсходныеСтроки Цикл
		Если ЗначениеЗаполнено(ЭлементОписания.ИсходнаяНоменклатура) Тогда
			ИсточникОписания.Добавить(ЭлементОписания.ИсходнаяНоменклатура);
		Иначе
			ИсточникОписания.Добавить(ЭлементОписания.СтрокаТовары.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОписания = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ИсточникОписания);
	
	Для Каждого ЭлементОписания Из ИсходныеСтроки Цикл
		
		Если ЗначениеЗаполнено(ЭлементОписания.ИсходнаяНоменклатура) Тогда
			ОписаниеНоменклатуры = ДанныеОписания[ЭлементОписания.ИсходнаяНоменклатура];
		Иначе
			ОписаниеНоменклатуры = ДанныеОписания[ЭлементОписания.СтрокаТовары.Номенклатура];
		КонецЕсли;
		
		Если ОписаниеНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаРаспределения Из ВозвращаемоеЗначениеРаспределения.РаспределенныеСтроки[ЭлементОписания.СтрокаТовары] Цикл
			Если ОписаниеНоменклатуры.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				СтрокаРаспределения.ЧастичноеВыбытиеКоличество = СтрокаРаспределения.Количество;
			ИначеЕсли ЗначениеЗаполнено(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке) Тогда
				Коэффициент = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке / ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
				Если СтрокаРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
					Или СтрокаРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
					ТочностьКоличестваЧастичноговыбытия = 3;
				Иначе
					ТочностьКоличестваЧастичноговыбытия = 0;
				КонецЕсли;
				СтрокаРаспределения.ЧастичноеВыбытиеКоличество = Окр(СтрокаРаспределения.Количество / Коэффициент, ТочностьКоличестваЧастичноговыбытия);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить данные вскрытых потребительских упаковок.
// 
// Параметры:
//  СтрокиРаспределения - Массив из см. НовыйРезультатРаспределенияШтрихкодовПоТоварам
Процедура ЗаполнитьДанныеВскрытыхПотребительскихУпаковок(СтрокиРаспределения)
	
	КодыМаркировки         = Новый Массив();
	СтрокиПоКодуМаркировки = Новый Соответствие();
	
	Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
		Если Не ЗначениеЗаполнено(СтрокаРаспределения.ШтрихкодУпаковки) Тогда
			Возврат;
		КонецЕсли;
		СтрокиПоКодуМаркировки.Вставить(СтрокаРаспределения.ШтрихкодУпаковки, СтрокаРаспределения);
		КодыМаркировки.Добавить(СтрокаРаспределения.ШтрихкодУпаковки);
	КонецЦикла;
	
	Если КодыМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВскрытий = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(
		КодыМаркировки, Истина);
	
	Для Каждого КлючИЗначеине Из ДанныеВскрытий Цикл
		
		ДанныеВскрытия                                  = КлючИЗначеине.Значение;
		СтрокаРаспределения                             = СтрокиПоКодуМаркировки[КлючИЗначеине.Ключ];
		СтрокаРаспределения.ЧастичноеВыбытиеОстаток     = ДанныеВскрытия.Остаток;
		СтрокаРаспределения.ЧастичноеВыбытиеКомментарий = ДанныеВскрытия.Комментарий;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьРаспределениеПоТоварамБезШтрихкодов(ВозвращаемоеЗначение, ПараметрыРаспределения, ПараметрыСканирования, Дата, ТаблицаТовары, Товары)
	
	ВидыПродукцииТестовогоПериода = ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(Дата);
	ВидПродукцииПоНоменклатуре    = Новый Соответствие();
	
	ПоддерживаетсяОбъемноСортовойУчет = ((ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования)
		Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования))
		И ПараметрыСканирования.ПоддерживаетсяОбъемноСортовойУчет);
		
	Если ПоддерживаетсяОбъемноСортовойУчет Тогда
		
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
		
		ТаблицаДанныхОСУ = ТаблицаТовары.СкопироватьКолонки();
		ТаблицаДанныхОСУ.Колонки.Добавить("ВидУпаковки",                        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
		ТаблицаДанныхОСУ.Колонки.Добавить("ВидПродукции",                       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
		ТаблицаДанныхОСУ.Колонки.Добавить("ЗначениеШтрихкода",                  Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ТаблицаДанныхОСУ.Колонки.Добавить("Обработан",                          Новый ОписаниеТипов("Булево"));
		ТаблицаДанныхОСУ.Колонки.Добавить("Мультитоварная",                     Новый ОписаниеТипов("Булево"));
		ТаблицаДанныхОСУ.Колонки.Добавить("ТребуетВзвешивания",                 Новый ОписаниеТипов("Булево"));
		ТаблицаДанныхОСУ.Колонки.Добавить("КоличествоВПотребительскойУпаковке", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		ТаблицаДанныхОСУ.Колонки.Добавить("ТекстОшибкиИС",                      ОбщегоНазначения.ОписаниеТипаСтрока(255));
		ТаблицаТовары.Колонки.Добавить("Ссылка",                                Метаданные.ОпределяемыеТипы.ДокументыИСМППоддерживающиеСтатусыОформления.Тип);
	
		ЭлектронноеВзаимодействиеИСМП.ДополнитьРезультатКодамиОСУ(
			ТаблицаТовары, ПараметрыСканирования, ТаблицаДанныхОСУ);
	
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если ПоддерживаетсяОбъемноСортовойУчет Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиАвтоматическогоОСУ = ТаблицаДанныхОСУ.НайтиСтроки(СтруктураПоиска);
			Если СтрокиАвтоматическогоОСУ.Количество() Тогда
				СтрокаАвтоматическогоОСУ = СтрокиАвтоматическогоОСУ[0];
				Если СтрокаАвтоматическогоОСУ.КоличествоВПотребительскойУпаковке = 0 Тогда
					КоличествоПотребительскихУпаковок = 0;
				Иначе
					КоличествоПотребительскихУпаковок = Окр(СтрокаТовары.Количество / СтрокаАвтоматическогоОСУ.КоличествоВПотребительскойУпаковке, 0);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтрокаАвтоматическогоОСУ.ЗначениеШтрихкода) Тогда
					СтрокаАвтоматическогоОСУ.ЗначениеШтрихкода = "00000000000000";
				КонецЕсли;
				РезультатСписания = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
				РезультатСписания.Количество                        = СтрокаТовары.Количество;
				РезультатСписания.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
				РезультатСписания.ВидУпаковки                       = СтрокаАвтоматическогоОСУ.ВидУпаковки;
				РезультатСписания.ВидПродукции                      = СтрокаАвтоматическогоОСУ.ВидПродукции;
				РезультатСписания.ТипШтрихкода                      = Перечисления.ТипыШтрихкодов.GS1_128;
				РезультатСписания.Штрихкод = СтрШаблон(
					"(02)%1(37)%2",
					СтрокаАвтоматическогоОСУ.ЗначениеШтрихкода,
					Формат(КоличествоПотребительскихУпаковок, "ЧН=0; ЧГ=0;"));
				РезультатСписания.КодМаркировки = РезультатСписания.Штрихкод;
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					РезультатСписания.Штрихкод,
					РезультатСписания.ВидПродукции,,,
					ПользовательскиеПараметрыРазбораКодаМаркировки);
				Если ДанныеРазбора <> Неопределено Тогда
					РезультатСписания.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
				КонецЕсли;
				ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания);
				Если ЗначениеЗаполнено(СтрокаАвтоматическогоОСУ.ТекстОшибкиИС) Тогда
					РезультатСписания.ТекстОшибки = СтрокаАвтоматическогоОСУ.ТекстОшибкиИС;
				КонецЕсли;
				СтрокаТовары.ТребуетсяКодМаркировки = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВидПродукции = ВидПродукцииПоНоменклатуре.Получить(СтрокаТовары.Номенклатура);
		Если ВидПродукции = Неопределено Тогда
			ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СтрокаТовары.Номенклатура);
			ВидПродукцииПоНоменклатуре.Вставить(СтрокаТовары.Номенклатура, ВидПродукции);
		КонецЕсли;
		Если Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина)
			Или ВидыПродукцииТестовогоПериода.Найти(ВидПродукции) <> Неопределено
			Или ПараметрыРаспределения.ДопустимыТоварыБезМарок Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатСписания = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
		РезультатСписания.Количество   = СтрокаТовары.Количество;
		РезультатСписания.ВидПродукции = ВидПродукции;
		
		ДобавитьСтрокуРаспределнияВРезультат(ВозвращаемоеЗначение, Товары, СтрокаТовары, РезультатСписания);
		
		Представление = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
			СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика,, СтрокаТовары.Серия);
		
		РезультатСписания.ТекстОшибки = СтрШаблон(
			НСтр("ru ='Требуется код маркировки для товара: %1'"),
			Представление);
		
	КонецЦикла;
	
КонецПроцедуры

#Область РазрешительныйРежимГИСМТ

#Область Конструкторы

Функция ИнициализироватьСтруктуруДанныхИдентификатораГИСМТ() Экспорт

	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", "");
	СтруктураВозврата.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ",          "");

	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти

Процедура ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковкиПоДаннымЧастичногоВыбытия(СтрокаШтрихкод, ДанныеШтрихкода, ПараметрыСканирования)
	
	ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		ДанныеШтрихкода,
		ПараметрыСканирования);

	Если Не ЭтоСтрокаДанныхЧастичногоВыбытия Тогда
		Возврат;
	КонецЕсли;

	ВариантУчета   = Неопределено;
	Количество     = 0;
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;

	Если ДанныеШтрихкода.ЧастичноеВыбытие Тогда
		ВариантУчета = ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета;
		Количество   = ДанныеШтрихкода.Количество;
		Если ВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
			Номенклатура   = ДанныеШтрихкода.Номенклатура;
			Характеристика = ДанныеШтрихкода.Характеристика;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета] = ВариантУчета;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество] = Количество;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура] = Номенклатура;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика] = Характеристика;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковкиПоДаннымРазрешительнойСистемыГИСМТ(СтрокаШтрихкод, ДанныеШтрихкода, ПараметрыСканирования)
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ] = ДанныеШтрихкода.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ) Тогда
		СтрокаШтрихкод[ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ] = ДанныеШтрихкода.РазрешительныйРежимДатаЗапросаГИСМТ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
