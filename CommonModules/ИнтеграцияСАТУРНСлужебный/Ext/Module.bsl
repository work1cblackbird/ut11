#Область СлужебныйПрограммныйИнтерфейс

#Область Обмен

Процедура ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена.ОчередьСообщений.Очистить();
	ПараметрыОбмена.ЗависимостиСообщений.Очистить();
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбмена.НастройкаРегламентногоЗадания = Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Очередь.ДатаСоздания       КАК ДатаСоздания,
		|	Очередь.Сообщение          КАК Сообщение,
		|	Очередь.СообщениеОснование КАК СообщениеОснование,
		|	Очередь.ОрганизацияСАТУРН  КАК ОрганизацияСАТУРН,
		|	
		|	Очередь.Операция          КАК Операция,
		|	Очередь.Документ          КАК Документ,
		|	Очередь.ДокументОснование КАК ДокументОснование,
		|	
		|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
		|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
		|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
		|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
		|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
		|	Очередь.Пользователь                      КАК Пользователь,
		|	Очередь.ИдентификаторЗаявки               КАК ИдентификаторЗаявки
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийСАТУРН КАК Очередь
		|ГДЕ
		|	&УсловиеПоОрганизациям";
		
		Если ПараметрыОбмена.ОрганизацииСАТУРН <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "Очередь.ОрганизацияСАТУРН В(&ОрганизацияСАТУРН)");
			Запрос.УстановитьПараметр("ОрганизацияСАТУРН", ПараметрыОбмена.ОрганизацииСАТУРН);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "ИСТИНА");
		КонецЕсли;
		
		Если СообщениеИлиДокумент <> Неопределено Тогда
			
			Запрос.Текст = Запрос.Текст + Символы.ПС +
				"И (Очередь.Сообщение В(&СообщениеИлиДокумент) Или Очередь.Документ В(&СообщениеИлиДокумент))";
			
			Запрос.УстановитьПараметр("СообщениеИлиДокумент", СообщениеИлиДокумент);
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Очередь.ДатаСоздания       КАК ДатаСоздания,
		|	Очередь.Сообщение          КАК Сообщение,
		|	Очередь.СообщениеОснование КАК СообщениеОснование,
		|	Очередь.ОрганизацияСАТУРН  КАК ОрганизацияСАТУРН,
		|	
		|	Очередь.Операция          КАК Операция,
		|	Очередь.Документ          КАК Документ,
		|	Очередь.ДокументОснование КАК ДокументОснование,
		|	
		|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
		|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
		|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
		|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
		|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
		|	Очередь.Пользователь                      КАК Пользователь,
		|	Очередь.ИдентификаторЗаявки               КАК ИдентификаторЗаявки
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийСАТУРН КАК Очередь
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК НастройкиРегламентныхЗаданий
		|	ПО ВЫБОР
		|		КОГДА НастройкиРегламентныхЗаданий.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаСАТУРН.ОбменДанными)
		|		ТОГДА Очередь.ОрганизацияСАТУРН = НастройкиРегламентныхЗаданий.ОрганизацияСАТУРН
		|		ИНАЧЕ Очередь.НастройкаРегламентногоЗадания = НастройкиРегламентныхЗаданий.Ссылка
		|	КОНЕЦ
		|ГДЕ
		|	НастройкиРегламентныхЗаданий.Ссылка = &НастройкаРегламентныхЗаданий";
		
		Запрос.УстановитьПараметр("НастройкаРегламентныхЗаданий", ПараметрыОбмена.НастройкаРегламентногоЗадания);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		ПротоколОбмена               = Выборка.ПротоколОбмена.Получить();
		
		Если РеквизитыИсходящегоСообщения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания       = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение          = Выборка.Сообщение;
		ЭлементОчереди.СообщениеОснование = Выборка.СообщениеОснование;
		ЭлементОчереди.ОрганизацияСАТУРН  = Выборка.ОрганизацияСАТУРН;
		
		ЭлементОчереди.Операция          = Выборка.Операция;
		ЭлементОчереди.Документ          = Выборка.Документ;
		ЭлементОчереди.ДокументОснование = Выборка.ДокументОснование;
		
		ЭлементОчереди.РеквизитыИсходящегоСообщения      = РеквизитыИсходящегоСообщения;
		ЭлементОчереди.ПротоколОбмена                    = ПротоколОбмена;
		ЭлементОчереди.ДатаМодификацииУниверсальная      = Выборка.ДатаМодификацииУниверсальная;
		ЭлементОчереди.ИдентификаторЗаявки               = Выборка.ИдентификаторЗаявки;
		ЭлементОчереди.Пользователь                      = Выборка.Пользователь;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ЗагружатьПосле;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьДо) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.ЗагружатьДо;
			НоваяЗависимость.Сообщение2 = Выборка.Сообщение;
			НоваяЗависимость.Загрузка   = Истина;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ПротоколОбмена <> Неопределено
			И ПротоколОбмена.Количество() > 0 Тогда
			
			ПоследняяЗаписьПротоколаОбмена        = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
			ЭлементОчереди.ТекущийСтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗависимостиКУдалению = Новый Соответствие();
	Для Каждого СтрокаТЧ Из ПараметрыОбмена.ЗависимостиСообщений Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение1, "Сообщение") = Неопределено
			Или ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение2, "Сообщение") = Неопределено Тогда
			ЗависимостиКУдалению.Вставить(СтрокаТЧ, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ЗависимостиКУдалению Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере());
	
	// Собрать JSON для передаваемых документов
	// Требуется подписание документа на клиенте? Если да, то документы требуется вернуть на клиент.
	// Нужен ли запрос авторизации? Если да, то документы нужно положить в очередь и вернуться на клиент для авторизации
	// После всего - выполнить передачу и дождаться результата - изменений.
	СообщенияJSON = Новый Массив;
	Для Каждого ПараметрыОбработкиДокумента Из ВходящиеДанные Цикл
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
		ДополнительныеПараметры.Вставить("ПараметрыОбработкиДокумента", ПараметрыОбработкиДокумента);
	
		СообщенияДокументаJSON = СообщениеКПередачеJSON(
			ПараметрыОбработкиДокумента.Ссылка,
			ПараметрыОбработкиДокумента.ДальнейшееДействие,
			ДополнительныеПараметры);
		
		Для Каждого СообщениеJSON Из СообщенияДокументаJSON Цикл
			СообщенияJSON.Добавить(СообщениеJSON);
		КонецЦикла;
		
	КонецЦикла;
	
	ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ТребуетсяОжидание = ТребуетсяОжидание(ДатаСледующейИтерации, ПараметрыОбмена);
	
	Если ТребуетсяОжидание Тогда
		
		ВремяОжидания = ВремяОжидания(ДатаСледующейИтерации, ПараметрыОбмена);
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяОжидание
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере());
	
	ВыполнитьИтерацию = Истина;
	ВремяОжидания     = Неопределено;
	Пока ВыполнитьИтерацию Цикл
		
		ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
		
		ТребуетсяОжидание = ТребуетсяОжидание(ДатаСледующейИтерации, ПараметрыОбмена);
		
		Если ТребуетсяОжидание Тогда
			
			ВремяОжидания = ВремяОжидания(ДатаСледующейИтерации, ПараметрыОбмена);
			
			Если ПараметрыОбмена.ОжидатьНаСервере Тогда
				ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			ИначеЕсли ПараметрыОбмена.ОжидатьНаКлиенте И ВремяОжидания <> 0 Тогда
				ВыполнитьИтерацию = Ложь;
			КонецЕсли;
			
		Иначе
			
			ВыполнитьИтерацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТребуетсяОжидание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда

		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбменУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере());
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ТребуетсяОжидание = ТребуетсяОжидание(ДатаСледующейИтерации, ПараметрыОбмена);
	
	Если ТребуетсяОжидание Тогда
		
		ВремяОжидания = ВремяОжидания(ДатаСледующейИтерации, ПараметрыОбмена);
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание          = Неопределено;
		
		ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена);
		
		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияJSON - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  см. ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена
//
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияJSON, Реквизиты, ПроверятьХешБезСсылки = Ложь) Экспорт
	
	Реквизиты.Вставить("ВладелецФайлов", Реквизиты.Документ);
	Возврат ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.САТУРНПрисоединенныеФайлы,
		ТекстСообщенияJSON,
		Реквизиты,
		ПроверятьХешБезСсылки);
	
КонецФункции

Функция ПодготовитьДанныеКПередачеПоНастройкеРегламентногоЗадания(ПараметрыОбмена) Экспорт
	
	ВыполнитьОбработкуОчередиСообщений = Истина;
	
	Если ПараметрыОбмена.НастройкаРегламентногоЗадания = Неопределено Тогда
		Возврат ВыполнитьОбработкуОчередиСообщений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыОбмена.НастройкаРегламентногоЗадания);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРегламентныхЗаданий.ОрганизацияСАТУРН        КАК ОрганизацияСАТУРН,
	|	НастройкиРегламентныхЗаданий.ВидНастройкиОбмена       КАК ВидНастройкиОбмена,
	|	НастройкиРегламентныхЗаданий.ПараметрыНастройкиОбмена КАК ПараметрыНастройкиОбмена,
	|	ВЫБОР
	|		КОГДА ОчередьСообщений.НастройкаРегламентногоЗадания ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСообщенияВОчереди
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийСАТУРН КАК НастройкиРегламентныхЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСообщенийСАТУРН КАК ОчередьСообщений
	|		ПО НастройкиРегламентныхЗаданий.Ссылка = ОчередьСообщений.НастройкаРегламентногоЗадания
	|ГДЕ
	|	НастройкиРегламентныхЗаданий.Ссылка = &Ссылка
	|	И НастройкиРегламентныхЗаданий.ВидНастройкиОбмена <> ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаСАТУРН.ОбменДанными)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат ВыполнитьОбработкуОчередиСообщений;
	КонецЕсли;
	
	Если ИнтеграцияСАТУРНПовтИсп.ИспользоватьАвтоматическийОбменДанными(Выборка.ОрганизацияСАТУРН) Тогда
		ВыполнитьОбработкуОчередиСообщений = Ложь;
	КонецЕсли;
	
	Если Выборка.ЕстьСообщенияВОчереди Тогда
		Возврат ВыполнитьОбработкуОчередиСообщений;
	КонецЕсли;
	
	ВходящиеДанные = Новый Массив;
	
	Если Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаСАТУРН.ЗагрузкаСтатусовНакладных Тогда
		
		ПараметрыОбработкиСообщений = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиСообщений.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
		ПараметрыОбработкиСообщений.ОрганизацияСАТУРН = Выборка.ОрганизацияСАТУРН;
		ПараметрыОбработкиСообщений.Ссылка = Документы.НакладнаяСАТУРН.ПустаяСсылка();
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов);
		
		ПараметрыОбработкиСообщений.ДополнительныеПараметры = ПараметрыЗапроса;
		
	ИначеЕсли Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаСАТУРН.ЗагрузкаИмпортируемыхПартий Тогда
		
		ПараметрыОбработкиСообщений = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыПередачиДанныхКлассификаторов();
		ПараметрыОбработкиСообщений.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен;
		ПараметрыОбработкиСообщений.ОрганизацияСАТУРН  = Выборка.ОрганизацияСАТУРН;
		ПараметрыОбработкиСообщений.Ссылка             = Справочники.ИмпортируемаяПартияСАТУРН.ПустаяСсылка();
		
		ПараметрыОбработкиСообщений.ДополнительныеПараметры = Новый Структура;
		
	Иначе
		
		Возврат ВыполнитьОбработкуОчередиСообщений;
		
	КонецЕсли;
	
	ВходящиеДанные.Добавить(ПараметрыОбработкиСообщений);

	ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
	ВыполнитьОбработкуОчередиСообщений = Ложь;
	
	Возврат ВыполнитьОбработкуОчередиСообщений;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Процедура ПодготовитьКПередачеДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ВходящиеДанные    = ПараметрыФоновогоЗадания.ВходящиеДанные;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьОбменДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбменаДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена                    = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС                  = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииОбменаДанными

// Сформировать описание операции для документа
//
// Параметры:
//  Описание - Строка - Описание операции
//  ДокументСсылка - ДокументСсылка - Документ
//  НомерВерсии - Число - Номер версии
//  Постфикс - Строка - Текст дополнения
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено, Постфикс = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;

	Если ЗначениеЗаполнено(Постфикс) Тогда
		ТекстВозврата = ТекстВозврата + ". " + Постфикс;
	КонецЕсли;
	
	Возврат ТекстВозврата;

КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция обмена с САТУРН
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
//  Постфикс - Строка - Текст дополнения
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено, Постфикс = Неопределено) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии, Постфикс);
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция обмена с САТУРН
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПолученияДанных(ОперацияПередачиДанных) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПолучениеДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, Неопределено, Неопределено);
	
КонецФункции

// Возвращает операции обмена с САТУРН, разбитые на категории
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПередачаДанных - Соответствие Из КлючИЗначение- Операции передачи данных.
//    * ПолучениеДанных - Соответствие Из КлючИЗначение - Операции получения данных.
//
Функция КатегорииОпераций() Экспорт
	
	ПередачаДанных = Новый Соответствие;
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса,
		НСтр("ru = 'Оформление акта инвентаризации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента,
		НСтр("ru = 'Оформление акта инвентаризации (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента,
		НСтр("ru = 'Оформление акта инвентаризации (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету,
		НСтр("ru = 'Оформление акта инвентаризации (принятие к учету)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента,
		НСтр("ru = 'Оформление акта инвентаризации (чтение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка,
		НСтр("ru = 'Оформление акта инвентаризации (проверка актуального остатка)'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса,
		НСтр("ru = 'Оформление накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента,
		НСтр("ru = 'Оформление накладной (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента,
		НСтр("ru = 'Оформление накладной (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента,
		НСтр("ru = 'Оформление накладной (чтение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка,
		НСтр("ru = 'Оформление накладной (перевозка)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля,
		НСтр("ru = 'Оформление накладной (розничная торговля)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация,
		НСтр("ru = 'Оформление накладной (утилизация)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство,
		НСтр("ru = 'Оформление накладной (списание в производство)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт,
		НСтр("ru = 'Оформление накладной (экспорт)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки,
		НСтр("ru = 'Подтверждение входящей накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение,
		НСтр("ru = 'Чтение входящей накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки,
		НСтр("ru = 'Подтверждение входящей накладной (принято частично)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента,
		НСтр("ru = 'Подтверждение входящей накладной (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса,
		НСтр("ru = 'Подтверждение входящей накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат,
		НСтр("ru = 'Возврат накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента,
		НСтр("ru = 'Возврат накладной (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса,
		НСтр("ru = 'Возврат накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян,
		НСтр("ru = 'Подтверждение утери груза'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента,
		НСтр("ru = 'Подтверждение утери груза (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса,
		НСтр("ru = 'Подтверждение утери груза'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата,
		НСтр("ru = 'Подтверждение возврата груза'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата,
		НСтр("ru = 'Подтверждение возврата груза (частичная приемка)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента,
		НСтр("ru = 'Подтверждение возврата груза (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса,
		НСтр("ru = 'Подтверждение возврата груза'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате,
		НСтр("ru = 'Подтверждение утери груза при возврате'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента,
		НСтр("ru = 'Подтверждение утери груза при возврате (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса,
		НСтр("ru = 'Подтверждение утери груза при возврате'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра,
		НСтр("ru = 'Оформление накладной (экспорт)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр,
		НСтр("ru = 'Подтверждение приема на досмотр'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента,
		НСтр("ru = 'Подтверждение приема на досмотр (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса,
		НСтр("ru = 'Подтверждение приема на досмотр'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение,
		НСтр("ru = 'Подтверждение экспорта'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента,
		НСтр("ru = 'Подтверждение экспорта (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса,
		НСтр("ru = 'Подтверждение экспорта'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ,
		НСтр("ru = 'В экспорте отказано'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента,
		НСтр("ru = 'В экспорте отказано (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса,
		НСтр("ru = 'В экспорте отказано'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовРасчетСтатуса,
		НСтр("ru = 'Загрузка входящих накладных (расчет статуса)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов,
		НСтр("ru = 'Загрузка входящих накладных'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение,
		НСтр("ru = 'Загрузка входящих накладных (чтение документа)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовРасчетСтатуса,
		НСтр("ru = 'Загрузка статусов накладных (расчет статуса)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов,
		НСтр("ru = 'Загрузка статусов накладных'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение,
		НСтр("ru = 'Загрузка статусов накладных (чтение документа)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование,
		НСтр("ru = 'Аннулирование перевозки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование,
		НСтр("ru = 'Аннулирование списания в прозводство'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование,
		НСтр("ru = 'Аннулирование экспорта'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование,
		НСтр("ru = 'Аннулирование подтверждения накладной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса,
		НСтр("ru = 'Аннулирование подтверждения накладной (расчет статуса)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование,
		НСтр("ru = 'Аннулирование утилизации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование,
		НСтр("ru = 'Аннулирование розничной торговли'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатуса,
		НСтр("ru = 'Оформление плана применения'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияРасчетСтатусовПоДокументу,
		НСтр("ru = 'Оформление плана применения (по документу)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента,
		НСтр("ru = 'Оформление плана применения (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента,
		НСтр("ru = 'Оформление плана применения (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету,
		НСтр("ru = 'Оформление плана применения (принятие к учету)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПланПримененияАннулирование,
		НСтр("ru = 'Аннулирование плана применения'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктПримененияРасчетСтатуса,
		НСтр("ru = 'Оформление акта применения'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктПримененияСозданиеДокумента,
		НСтр("ru = 'Оформление акта применения (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктПримененияИзменениеДокумента,
		НСтр("ru = 'Оформление акта применения (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктПримененияПринятиеКУчету,
		НСтр("ru = 'Оформление акта применения (принятие к учету)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.АктПримененияАннулирование,
		НСтр("ru = 'Аннулирование акта применения'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса,
		НСтр("ru = 'Оформление импорта продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента,
		НСтр("ru = 'Оформление импорта продукции (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки,
		НСтр("ru = 'Оформление импорта продукции (подтверждение приемки)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий,
		НСтр("ru = 'Оформление импорта продукции (чтение партий)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки,
		НСтр("ru = 'Оформление импорта продукции (отмена приемки)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса,
		НСтр("ru = 'Оформление производственной операции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента,
		НСтр("ru = 'Оформление производственной операции (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента,
		НСтр("ru = 'Оформление производственной операции (изменение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету,
		НСтр("ru = 'Оформление производственной операции (принятие к учету)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента,
		НСтр("ru = 'Оформление производственной операции (чтение документа)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование,
		НСтр("ru = 'Аннулирование производственной операции'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ГенерацияТокенаАвторизации,
		НСтр("ru = 'Генерация ключа авториации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПодтверждениеТокенаАвторизации,
		НСтр("ru = 'Подтверждение ключа авториации'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса,
		НСтр("ru = 'Запрос остатков партий'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий,
		НСтр("ru = 'Запрос остатков партий'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий,
		НСтр("ru = 'Запрос родительских партий'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ОрганизацияЗапросКлассификатора,
		НСтр("ru = 'Запрос классификатора организаций'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ИмпортируемаяПартияЗапросКлассификатора,
		НСтр("ru = 'Запрос импортируемых партий'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПАТЗапросКлассификатора,
		НСтр("ru = 'Запрос классификатора ПАТ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.МестоХраненияЗапросКлассификатора,
		НСтр("ru = 'Запрос мест хранения'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.МестоПримененияЗапросКлассификатора,
		НСтр("ru = 'Запрос мест применения'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПартияЗапросКлассификатора,
		НСтр("ru = 'Запрос партий'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПАТСозданиеКлассификатора,
		НСтр("ru = 'Регистрация классификатора ПАТ (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПАТИзменениеКлассификатора,
		НСтр("ru = 'Регистрация классификатора ПАТ (изменение классификатора)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПАТСменаСтатусаИзЧерновикаВОтменено,
		НСтр("ru = 'Смена статуса классификатора ПАТ (Черновик -> Отменено)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ПАТСменаСтатусаИзЧерновикВАктуально,
		НСтр("ru = 'Смена статуса классификатора ПАТ (Черновик - > Актуально)'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ОрганизацияСозданиеКлассификатора,
		НСтр("ru = 'Регистрация классификатора Организация (создание черновика)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ОрганизацияИзменениеКлассификатора,
		НСтр("ru = 'Регистрация классификатора Организация (изменение классификатора)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВОтменено,
		НСтр("ru = 'Смена статуса классификатора Организация (Черновик -> Отменено)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВАктуально,
		НСтр("ru = 'Смена статуса классификатора Организация (Черновик - > Актуально)'"));
	
	ПолучениеДанных = Новый Соответствие;
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовРасчетСтатуса,
		НСтр("ru = 'Загрузка входящих накладных (расчет статуса)'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов,
		НСтр("ru = 'Загрузка входящих накладных'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение,
		НСтр("ru = 'Загрузка входящих накладных (чтение документа)'"));
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовРасчетСтатуса,
		НСтр("ru = 'Загрузка статусов накладных (расчет статуса)'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов,
		НСтр("ru = 'Загрузка статусов накладных'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение,
		НСтр("ru = 'Загрузка статусов накладных (чтение документа)'"));
	
	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных",  ПередачаДанных);
	Категории.Вставить("ПолучениеДанных", ПолучениеДанных);
	
	Возврат Категории;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Формирует пустую структуру изменений данных
// Параметры:
// ЭлементОчереди - Неопределено -
//                - см. СтруктураСообщенияJSON
// Возвращаемое значение:
//  Структура - Структура изменения:
// * Операция  - Неопределено
// * ИдентификаторСообщения - Неопределено
// * ИдентификаторСообщенияОснования - Неопределено
// * ОрганизацияСАТУРН - Неопределено
// * Объект - Массив из ЛюбаяСсылка-
// * ДокументОснование - Неопределено
// * ТекстОшибки - Строка -
// * НомерСтраницы - Число -
// * Сообщение - Неопределено
// * ТекстСообщения - Неопределено
// * ПротоколОбмена - Неопределено
Функция СтруктураИзменения(ЭлементОчереди = Неопределено) Экспорт
	
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("Операция",                        Неопределено);
	СтруктураИзменения.Вставить("ИдентификаторСообщения",          Неопределено);
	СтруктураИзменения.Вставить("ИдентификаторСообщенияОснования", Неопределено);
	СтруктураИзменения.Вставить("НомерСтраницы",                   0);
	
	// Источник
	СтруктураИзменения.Вставить("ОрганизацияСАТУРН", Неопределено);
	СтруктураИзменения.Вставить("Объект",            Новый Массив());
	СтруктураИзменения.Вставить("ДокументОснование", Неопределено);
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки", "");
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение",      Неопределено);
	СтруктураИзменения.Вставить("ТекстСообщения", Неопределено);
	СтруктураИзменения.Вставить("ПротоколОбмена", Неопределено);
	
	Если ЭлементОчереди <> Неопределено Тогда
		
		СтруктураИзменения.Операция                        = ЭлементОчереди.Операция;
		СтруктураИзменения.ОрганизацияСАТУРН               = ЭлементОчереди.ОрганизацияСАТУРН;
		СтруктураИзменения.ИдентификаторСообщения          = ЭлементОчереди.Сообщение;
		СтруктураИзменения.ИдентификаторСообщенияОснования = ЭлементОчереди.СообщениеОснование;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементОчереди, "РеквизитыИсходящегоСообщения") Тогда
			РеквизитыИсходящегоСообщения              = ЭлементОчереди.РеквизитыИсходящегоСообщения;
			СтруктураИзменения.ДокументОснование      = РеквизитыИсходящегоСообщения.ДокументОснование;
			СтруктураИзменения.НомерСтраницы          = РеквизитыИсходящегоСообщения.НомерСтраницы;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураИзменения;
	
КонецФункции

// Выполняет запись ошибки в журнал регистрации, добавляя имя события САТУРН.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru = 'САТУРН'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПартийВДокументах

Функция НастройкиЗаполненияПартий(ИмяТЧ, ВыделенныеСтроки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяТЧ", ИмяТЧ);
	Результат.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	Результат.Вставить("ОрганизацияСАТУРН", "ОрганизацияСАТУРН");
	Результат.Вставить("МестоХранения", "МестоХранения");
	Результат.Вставить("ЗаполнитьКоличествоСАТУРН", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Заполнить партии.
// 
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктураСКоллекцией - Объект где происходит заполнение
//  Настройки - См. НастройкиЗаполненияПартий
// 
// Возвращаемое значение:
//  Структура - информация о проведенном заполнении
Функция ЗаполнитьПартии(Объект, Настройки) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ВсегоСтрок",       0);
	РезультатЗаполнения.Вставить("ЗаполненоСтрок",   0);
	РезультатЗаполнения.Вставить("ПроблемныхСтрок",  0);
	РезультатЗаполнения.Вставить("ИзмененныеСтроки", Новый Массив);
	
	РезультатЗаполнения.Вставить("НоменклатураНеЗаполнена", 0);
	РезультатЗаполнения.Вставить("КоличествоНеЗаполнено"  , 0);
	РезультатЗаполнения.Вставить("КоэффициентНеЗаполнен"  , 0);
	
	ВсеСтроки      = Новый Массив;
	СтрокиССериями = Новый Массив;
	СтрокиБезСерий = Новый Массив;
	
	СписокСтрок = Настройки.ВыделенныеСтроки;
	
	Для каждого СтрокаДокумента Из Объект[Настройки.ИмяТЧ] Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		ИначеЕсли СписокСтрок <> Неопределено И СписокСтрок.Найти(СтрокаДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеСтроки.Добавить(СтрокаДокумента);
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.НоменклатураНеЗаполнена = РезультатЗаполнения.НоменклатураНеЗаполнена + 1;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДокумента.Количество) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.КоличествоНеЗаполнено = РезультатЗаполнения.КоличествоНеЗаполнено + 1;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДокумента.КоличествоВУпаковкеСАТУРН) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.КоэффициентНеЗаполнен = РезультатЗаполнения.КоэффициентНеЗаполнен + 1;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
				СтрокиССериями.Добавить(СтрокаДокумента);
			Иначе
				СтрокиБезСерий.Добавить(СтрокаДокумента);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗаполнения.ВсегоСтрок = СтрокиССериями.Количество() + СтрокиБезСерий.Количество() + РезультатЗаполнения.ПроблемныхСтрок;
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	Если РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура     КАК Номенклатура,
	|	ТаблицаТовары.Характеристика   КАК Характеристика,
	|	ТаблицаТовары.Серия            КАК Серия,
	|	ТаблицаТовары.Партия     КАК Партия,
	|	ТаблицаТовары.КоличествоУпаковок          КАК КоличествоУпаковок,
	|	ТаблицаТовары.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличины,
	|	ТаблицаТовары.КоличествоВУпаковкеСАТУРН   КАК КоличествоВУпаковкеСАТУРН
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Партия КАК Партия,
	|	СУММА(ТаблицаТовары.КоличествоВУпаковкеСАТУРН * ТаблицаТовары.КоличествоУпаковок) КАК Количество
	|ПОМЕСТИТЬ ПартииВДокументе
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура   КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика КАК Характеристика,
	|	ТаблицаСоответствия.Серия          КАК Серия,
	|	ТаблицаСоответствия.ПАТ            КАК ПАТ,
	|	ТаблицаСоответствия.Партия   КАК Партия,
	|	0                                  КАК Порядок
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика, ТаблицаСоответствия.Серия) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика,
	|				ТаблицаТоварыСПродукцией.Серия
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				НЕ ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура,
	|	ТаблицаСоответствия.Характеристика,
	|	&ПустаяСерия,
	|	ТаблицаСоответствия.ПАТ,
	|	ТаблицаСоответствия.Партия,
	|	1
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Партия КАК Партия,
	|	ТаблицаОстатков.КоличествоСАТУРНОстаток + ТаблицаОстатков.ВОбработкеСАТУРНОстаток - ЕСТЬNULL(ПартииВДокументе.Количество, 0) КАК КоличествоСАТУРН
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийСАТУРН.Остатки(,
	|		Партия В (ВЫБРАТЬ СписокПродукции.Партия ИЗ ТаблицаСоответствия КАК СписокПродукции)
	|		И Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовСАТУРН.Актуально)) КАК ТаблицаОстатков
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияПартийСАТУРН.СрезПоследних КАК МестаХраненияПартийСАТУРН
	|		ПО МестаХраненияПартийСАТУРН.ОрганизацияСАТУРН = &ОрганизацияСАТУРН
	|		И МестаХраненияПартийСАТУРН.МестоХранения = &МестоХранения
	|		И МестаХраненияПартийСАТУРН.Партия = ТаблицаОстатков.Партия
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПартииВДокументе КАК ПартииВДокументе
	|		ПО ПартииВДокументе.Партия = ТаблицаОстатков.Партия
	|ГДЕ
	|	ТаблицаОстатков.КоличествоСАТУРНОстаток + ТаблицаОстатков.ВОбработкеСАТУРНОстаток > ЕСТЬNULL(ПартииВДокументе.Количество, 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Партия          КАК Партия,
	|	ТаблицаОстатков.Партия.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличины,
	|	ТаблицаОстатков.КоличествоСАТУРН КАК КоличествоСАТУРН
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура   КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика КАК Характеристика,
	|	ТаблицаСоответствия.Серия          КАК Серия,
	|	ТаблицаСоответствия.ПАТ            КАК ПАТ,
	|	ТаблицаСоответствия.Партия         КАК Партия";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОрганизацияСАТУРН",   Объект[Настройки.ОрганизацияСАТУРН]);
	Запрос.УстановитьПараметр("МестоХранения", Объект[Настройки.МестоХранения]);
	
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	СписокКолонок = "Номенклатура, Характеристика, Серия, Партия, КоличествоУпаковок, ТипИзмеряемойВеличиныСАТУРН, КоличествоВУпаковкеСАТУРН";
	Запрос.УстановитьПараметр("Товары", Объект[Настройки.ИмяТЧ].Выгрузить(, СписокКолонок));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатки = Результат[Результат.ВГраница()-1].Выгрузить();
	
	Если ТаблицаОстатки.Количество() = 0 Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;
	
	ТаблицаСоответствия = Результат[Результат.ВГраница()].Выгрузить();
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Объект", Объект);
	ПараметрыЗаполнения.Вставить("Настройки", Настройки);
	ПараметрыЗаполнения.Вставить("ТаблицаОстатки", ТаблицаОстатки);
	ПараметрыЗаполнения.Вставить("ТаблицаСоответствия", ТаблицаСоответствия);
	
	ЗаполнитьВСтрокахПартии(СтрокиССериями, ПараметрыЗаполнения, РезультатЗаполнения);
	ЗаполнитьВСтрокахПартии(СтрокиБезСерий, ПараметрыЗаполнения, РезультатЗаполнения);
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

#КонецОбласти

Функция ПараметрыСеансаИС() Экспорт
	
	ПараметрыСеансаИС = Новый Структура;
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииСАТУРН", Неопределено);
	ПараметрыСеансаИС.Вставить(
		"ПараметрыЛогированияЗапросовСАТУРН",
		ЛогированиеЗапросовСАТУРН.ПараметрыЛогированияЗапросов());
	
	УчитываемыеВидыПродукции = ИнтеграцияСАТУРНКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	
	Если УчитываемыеВидыПродукции.Количество() > 0 Тогда
		//@skip-check empty-except-statement
		Попытка
 			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииСАТУРН", ПараметрыСеанса.ДанныеКлючаСессииСАТУРН);
		Исключение
			// Действие не требуется
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПараметрыСеансаИС;
	
КонецФункции

Процедура ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС) Экспорт
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииСАТУРН <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииСАТУРН = ПараметрыСеансаИС.ДанныеКлючаСессииСАТУРН;
	КонецЕсли;
	
	ЛогированиеЗапросовСАТУРН.УстановитьПараметрыЛогированияЗапросов(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовСАТУРН);
	ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовСАТУРН);
	ЛогированиеЗапросовСАТУРН.УстановитьПараметрыЛогированияЗапросов(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовСАТУРН);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру параметров оптимизации.
// В случае, если константы "Настройки обмена САТУРН" не заполнены - возвращает параметры по умолчанию.
//
// Возвращаемое значение:
//  см. ПараметрыОптимизацииПоУмолчанию
Функция ПараметрыОптимизации() Экспорт
	
	НастройкиОбменаСАТУРН = Константы.НастройкиОбменаСАТУРН.Получить().Получить();
	ПараметрыОптимизации = ПараметрыОптимизацииПоУмолчанию();
	
	Если НастройкиОбменаСАТУРН <> Неопределено Тогда
		
		Если НастройкиОбменаСАТУРН.Свойство("КоличествоЗапросовВМинуту") Тогда
			ПараметрыОптимизации.КоличествоЗапросовВМинуту = НастройкиОбменаСАТУРН.КоличествоЗапросовВМинуту;
		КонецЕсли;
		Если НастройкиОбменаСАТУРН.Свойство("ТаймаутHTTPЗапросов") Тогда
			ПараметрыОптимизации.ТаймаутHTTPЗапросов = НастройкиОбменаСАТУРН.ТаймаутHTTPЗапросов;
		КонецЕсли;
		Если НастройкиОбменаСАТУРН.Свойство("АвторизацияHTTPТестовыйКонтурЛогин") Тогда
			ПараметрыОптимизации.АвторизацияHTTPТестовыйКонтурЛогин = НастройкиОбменаСАТУРН.АвторизацияHTTPТестовыйКонтурЛогин;
		КонецЕсли;
		Если НастройкиОбменаСАТУРН.Свойство("АвторизацияHTTPТестовыйКонтурПароль") Тогда
			ПараметрыОптимизации.АвторизацияHTTPТестовыйКонтурПароль = НастройкиОбменаСАТУРН.АвторизацияHTTPТестовыйКонтурПароль;
		КонецЕсли;
		Если НастройкиОбменаСАТУРН.Свойство("КоличествоЭлементовСтраницыОтвета") Тогда
			ПараметрыОптимизации.КоличествоЭлементовСтраницыОтвета = НастройкиОбменаСАТУРН.КоличествоЭлементовСтраницыОтвета;
		КонецЕсли;
		Если НастройкиОбменаСАТУРН.Свойство("ДатаОграниченияГлубиныДереваПартий") Тогда
			ПараметрыОптимизации.ДатаОграниченияГлубиныДереваПартий = НастройкиОбменаСАТУРН.ДатаОграниченияГлубиныДереваПартий;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОптимизации;
	
КонецФункции

Функция ПараметрыПреобразования() Экспорт
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("НайтиИдентификаторы",                   Истина);
	ПараметрыПреобразования.Вставить("Идентификаторы",                        НоваяТаблицаПоискаСсылок());
	ПараметрыПреобразования.Вставить("БлокируемыеОбъекты",                    Новый Соответствие);
	ПараметрыПреобразования.Вставить("ДанныеОбъектов",                        Новый Соответствие);
	ПараметрыПреобразования.Вставить("ИменаМетаданныхПоКлассам",              Новый Соответствие);
	ПараметрыПреобразования.Вставить("ПараметрыПреобразованияПоИменамТаблиц", Новый Соответствие);
	
	ДобавитьИмяКлассаПоМетаданным(
		"fgisppa.statables.registries.patBatch_draft.seapi.PATBatch",
		Метаданные.Справочники.ПартииСАТУРН,
		ПараметрыПреобразования);
	ДобавитьИмяКлассаПоМетаданным(
		"fgisppa.statables.LC_BUC.BUC_100_rfContractor.Contractor",
		Метаданные.Справочники.КлассификаторОрганизацийСАТУРН,
		ПараметрыПреобразования);
	ДобавитьИмяКлассаПоМетаданным(
		"fgisppa.statables.LC_BUC.BUC_130_rfWarehouse.Warehouse",
		Метаданные.Справочники.МестаХраненияСАТУРН,
		ПараметрыПреобразования);
	ДобавитьИмяКлассаПоМетаданным(
		"fgisppa.statables.LC_BUC.BUC_120_rfPatProduct.PatProduct",
		Метаданные.Справочники.КлассификаторПАТСАТУРН,
		ПараметрыПреобразования);
	ДобавитьИмяКлассаПоМетаданным(
		"fgisppa.statables.LC_BUC.BUC_140_rfAcreage.Acreage",
		Метаданные.Справочники.МестаПримененияСАТУРН,
		ПараметрыПреобразования);
	ДобавитьИмяКлассаПоМетаданным(
		"fgisppa.statables.LC_BUC.BUC_020_import.PAImportRecord",
		Метаданные.Документы.ИмпортПродукцииСАТУРН,
		ПараметрыПреобразования);
	
	Возврат ПараметрыПреобразования;
	
КонецФункции

#Область ПоискИОбработкаДанных

Функция ОбработатьРезультатЗапросаСпискаОбъектов(Объект, ПараметрыОбмена = Неопределено, ИсключитьДанныеПоднадзорныхОбъектов = Истина) Экспорт
	
	СлужебныеПоля  = ИнтерфейсСАТУРН.СлужебныеПоля(ИсключитьДанныеПоднадзорныхОбъектов);
	ЭлементыДанных = Новый Массив;
	
	Если Объект.Свойство("objList")
		И Объект.objList <> Неопределено Тогда
		
		Для Каждого ВнешнийЭлементДанных Из Объект.objList._OBJ_ARRAY Цикл
			
			ЭлементДанных = СтруктураДанных(ВнешнийЭлементДанных, СлужебныеПоля, ПараметрыОбмена);
			
			ЭлементыДанных.Добавить(ЭлементДанных);
			
		КонецЦикла;
		
	Иначе
		
		ИмяСвойстваДанных = Неопределено;
		
		Если Объект.Свойство("attrTable")
			И Объект.attrTable <> Неопределено Тогда
			ИмяСвойстваДанных = "attrTable";
		ИначеЕсли Объект.Свойство("totalstable")
			И Объект.totalstable <> Неопределено Тогда
			ИмяСвойстваДанных = "totalstable";
		Иначе
			Возврат ЭлементыДанных;
		КонецЕсли;
		
		ИменаКолонок = Неопределено;
		
		Для Каждого ВнешнийЭлементДанных Из Объект[ИмяСвойстваДанных] Цикл
			
			Если ИменаКолонок = Неопределено Тогда
				
				ИменаКолонок = Новый Соответствие();
				
				Индекс = 1;
				Для Каждого ИмяКолонки Из ВнешнийЭлементДанных Цикл
					
					Если СлужебныеПоля[ИмяКолонки] = Неопределено Тогда
						ИменаКолонок.Вставить(Индекс, ИмяКолонки);
					КонецЕсли;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементДанных = Новый Структура;
				
				Индекс = 1;
				Для Каждого ЭлементМассива Из ВнешнийЭлементДанных Цикл
					
					ИмяКолонки = ИменаКолонок[Индекс];
					
					Если ИмяКолонки <> Неопределено Тогда
						Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
							ЭлементДанных.Вставить(ИмяКолонки, СтруктураДанных(ЭлементМассива, СлужебныеПоля, ПараметрыОбмена));
						ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Массив") Тогда
							ЭлементДанных.Вставить(ИмяКолонки, МассивДанных(ЭлементМассива, СлужебныеПоля, ПараметрыОбмена));
						Иначе
							ЭлементДанных.Вставить(ИмяКолонки, ЭлементМассива);
						КонецЕсли;
					КонецЕсли;
					
					Индекс = Индекс + 1;
					
				КонецЦикла;
				
				ЭлементыДанных.Добавить(ЭлементДанных);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЭлементыДанных;
	
КонецФункции

Функция СтруктураДанных(ВнешнийЭлементДанных, СлужебныеПоля, ПараметрыОбмена)
	
	ЭлементДанных = Новый Структура;
	
	Для Каждого КлючИЗначение Из ВнешнийЭлементДанных Цикл
		
		Если СлужебныеПоля[КлючИЗначение.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			ЭлементДанных.Вставить(КлючИЗначение.Ключ, СтруктураДанных(КлючИЗначение.Значение, СлужебныеПоля, ПараметрыОбмена));
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			ЭлементДанных.Вставить(КлючИЗначение.Ключ, МассивДанных(КлючИЗначение.Значение, СлужебныеПоля, ПараметрыОбмена));
		Иначе
			ЭлементДанных.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьУзелПоТипизированномуИдентификатору(ВнешнийЭлементДанных, ПараметрыОбмена);
	
	Возврат ЭлементДанных;
	
КонецФункции

Процедура ОбработатьУзелПоТипизированномуИдентификатору(ЭлементДанных, ПараметрыОбмена)
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПреобразования = ПараметрыОбмена.ПараметрыПреобразования;
	
	ИмяКласса = Неопределено;
	ЭлементДанных.Свойство("_class", ИмяКласса);
	
	Если ИмяКласса = Неопределено
		Или Не (ЭлементДанных.Свойство("_rectype")
		И ЭлементДанных._rectype = "obj") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПреобразования = ПараметрыПреобразования.ИменаМетаданныхПоКлассам[ИмяКласса];
	Если ДанныеПреобразования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПреобразования.ТребуетсяПоискСсылок
		Или ДанныеПреобразования.ТребуютсяДанныеОбъекта Тогда
		ДанныеОбъекта = ДанныеПреобразования.Менеджер.ДанныеОбъекта(ЭлементДанных);
	КонецЕсли;
	
	Если ДанныеПреобразования.ТребуютсяДанныеОбъекта Тогда
		
		ДанныеОбъектовПоТаблице = ПараметрыПреобразования.ДанныеОбъектов[ДанныеПреобразования.ИмяТаблицы];
		Если ДанныеОбъектовПоТаблице = Неопределено Тогда
			ДанныеОбъектовПоТаблице = Новый Соответствие();
			ПараметрыПреобразования.ДанныеОбъектов[ДанныеПреобразования.ИмяТаблицы] = ДанныеОбъектовПоТаблице;
		КонецЕсли;
		
		ДанныеОбъектовПоТаблице[ДанныеОбъекта.Идентификатор] = ДанныеОбъекта;
		
	КонецЕсли;
	
	Если ДанныеПреобразования.ТребуетсяПоискСсылок Тогда
		
		СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
		СтруктураПоиска.ИмяТаблицы    = ДанныеПреобразования.ИмяТаблицы;
		СтруктураПоиска.Идентификатор = ДанныеОбъекта.Идентификатор;
		
		Если ПараметрыПреобразования.Идентификаторы.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			НоваяСтрока = ПараметрыПреобразования.Идентификаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МассивДанных(ВнешнийМассивДанных, СлужебныеПоля, ПараметрыОбмена)
	
	МассивДанных = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВнешнийМассивДанных Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			МассивДанных.Добавить(СтруктураДанных(ЭлементМассива, СлужебныеПоля, ПараметрыОбмена));
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Массив") Тогда
			МассивДанных.Добавить(МассивДанных(ЭлементМассива, СлужебныеПоля, ПараметрыОбмена));
		Иначе
			МассивДанных.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

Функция СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ИмяИдентификатора = "Идентификатор") Экспорт
	
	СправочникСсылка = Неопределено;
	
	Если ПараметрыОбмена <> Неопределено Тогда
		
		НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
		
		СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
		СтруктураПоиска.ИмяТаблицы        = ИмяТаблицы;
		СтруктураПоиска.Идентификатор     = Идентификатор;
		ПоискСтрок = НайденныеСсылки.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() Тогда
			СправочникСсылка = ПоискСтрок[0].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
		СправочникСсылка = Менеджер.НайтиПоРеквизиту(ИмяИдентификатора, Идентификатор);
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Процедура ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка) Экспорт
	
	Если ПараметрыОбмена = Неопределено
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
	СтруктураПоиска.ИмяТаблицы    = ИмяТаблицы;
	СтруктураПоиска.Идентификатор = Идентификатор;
	
	НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
	
	ПоискСтрок = НайденныеСсылки.НайтиСтроки(СтруктураПоиска);
	Если ПоискСтрок.Количество() Тогда
		ПоискСтрок[0].Ссылка = СправочникСсылка;
	Иначе
		НоваяСтрока = НайденныеСсылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		НоваяСтрока.Ссылка = СправочникСсылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СсылкаНаОбъект, ОрганизацияСАТУРН) Экспорт
	
	Если ПараметрыОбмена = Неопределено
		Или ОрганизацияСАТУРН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КОтложеннойЗагрузке = ПараметрыОбмена.КОтложеннойЗагрузке;
	ДанныеПоИмениТаблицы = КОтложеннойЗагрузке[ИмяТаблицы];
	Если ДанныеПоИмениТаблицы = Неопределено Тогда
		ДанныеПоИмениТаблицы = Новый Соответствие();
		КОтложеннойЗагрузке[ИмяТаблицы] = ДанныеПоИмениТаблицы;
	КонецЕсли;
	
	ДанныеПоОрганизации = ДанныеПоИмениТаблицы[ОрганизацияСАТУРН];
	Если ДанныеПоОрганизации = Неопределено Тогда
		ДанныеПоОрганизации = Новый Соответствие();
		ДанныеПоИмениТаблицы[ОрганизацияСАТУРН] = ДанныеПоОрганизации;
	КонецЕсли;
	
	ДанныеСсылки = ДанныеПоОрганизации[Идентификатор];
	Если ДанныеСсылки = Неопределено Тогда
		ДанныеПоОрганизации[Идентификатор] = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеСвязанныхОбъектовВПараметрыОбмена(ДанныеОбъекта, МетаданныеОбъекта, Идентификатор, ПараметрыОбмена) Экспорт
	
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();
	
	ДанныеПоИмениТаблицы = ПараметрыОбмена.ПараметрыПреобразования.ДанныеОбъектов[ПолноеИмяТаблицы];
	
	Если ДанныеПоИмениТаблицы = Неопределено Тогда
		ДанныеПоИмениТаблицы = Новый Соответствие();
		ПараметрыОбмена.ПараметрыПреобразования.ДанныеОбъектов[ПолноеИмяТаблицы] = ДанныеПоИмениТаблицы;
	КонецЕсли;
	Если ДанныеПоИмениТаблицы[Идентификатор] = Неопределено Тогда
		ДанныеПоИмениТаблицы[Идентификатор] = ДанныеОбъекта;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИмяКлассаПоМетаданным(ИмяКласса, МетаданныеОбъекта, ПараметрыПреобразования, ТребуютсяДанныеОбъекта = Истина, ТребуетсяПоискСсылок = Истина, ЗагружатьНовуюВерсию = Истина)
	
	ДанныеПреобразования = Новый Структура;
	ДанныеПреобразования.Вставить("ИмяТаблицы",             МетаданныеОбъекта.ПолноеИмя());
	ДанныеПреобразования.Вставить("Менеджер",               ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеПреобразования.ИмяТаблицы));
	ДанныеПреобразования.Вставить("ТребуютсяДанныеОбъекта", ТребуютсяДанныеОбъекта);
	ДанныеПреобразования.Вставить("ТребуетсяПоискСсылок",   ТребуетсяПоискСсылок);
	ДанныеПреобразования.Вставить("ЗагружатьНовуюВерсию",   ЗагружатьНовуюВерсию);
	
	ПараметрыПреобразования.ИменаМетаданныхПоКлассам[ИмяКласса]                                  = ДанныеПреобразования;
	ПараметрыПреобразования.ПараметрыПреобразованияПоИменамТаблиц[МетаданныеОбъекта.ПолноеИмя()] = ДанныеПреобразования;
	
КонецПроцедуры

Функция ДанныеОбъекта(Идентификатор, ОписаниеОбъекта, ПараметрыОбмена = Неопределено) Экспорт
	
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыПреобразования = ПараметрыПреобразования();
	Иначе
		ПараметрыПреобразования = ПараметрыОбмена.ПараметрыПреобразования;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъекта) = Тип("Строка") Тогда
		ПолноеИмя = ОписаниеОбъекта;
	Иначе
		ПолноеИмя = ОписаниеОбъекта.ПолноеИмя();
	КонецЕсли;
	
	ДанныеОбъектовПоТаблице = ПараметрыПреобразования.ДанныеОбъектов[ПолноеИмя];
	
	Если ДанныеОбъектовПоТаблице <> Неопределено Тогда
		Возврат ДанныеОбъектовПоТаблице[Идентификатор];
	КонецЕсли;
	
КонецФункции

Функция НоваяТаблицаПоискаСсылок() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	
	ТаблицаДанных.Колонки.Добавить("ИмяТаблицы",    ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаДанных.Колонки.Добавить("Ссылка",        Справочники.ТипВсеСсылки());
	
	ТаблицаДанных.Индексы.Добавить("ИмяТаблицы");
	ТаблицаДанных.Индексы.Добавить("Ссылка");
	ТаблицаДанных.Индексы.Добавить("ИмяТаблицы, Идентификатор");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты = Неопределено) Экспорт
	
	Если ПараметрыОбмена.ПараметрыПреобразования = Неопределено Тогда
		ПараметрыОбмена.ПараметрыПреобразования = ПараметрыПреобразования();
	КонецЕсли;
	
	Идентификаторы = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
	
	ТекстыЗапросов = Новый Массив;
	Разделитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТаблицаИдентификаторов = НоваяТаблицаПоискаСсылок();
	
	ИменаТаблиц = Идентификаторы.Скопировать(, "ИмяТаблицы");
	ИменаТаблиц.Свернуть("ИмяТаблицы");
	
	Для Каждого СтрокаТаблицы Из Идентификаторы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ИменаТаблиц Цикл
		
		ИмяПоляИдентификатор = "Идентификатор";
		
		Текст =
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторов.ИмяТаблицы        КАК ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор     КАК Идентификатор,
		|	Таблица.Ссылка                           КАК Ссылка
		|ИЗ
		|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
		|		ПО ТаблицаИдентификаторов.Идентификатор = Таблица.#ИмяПоляИдентификатор
		|			И (ТаблицаИдентификаторов.ИмяТаблицы = ""&ИмяТаблицы"")
		|ГДЕ
		|	ТаблицаИдентификаторов.Ссылка = НЕОПРЕДЕЛЕНО";
		
		Текст = СтрЗаменить(Текст, "#ИмяТаблицы",           СтрокаТаблицы.ИмяТаблицы);
		Текст = СтрЗаменить(Текст, "&ИмяТаблицы",           СтрокаТаблицы.ИмяТаблицы);
		Текст = СтрЗаменить(Текст, "#ИмяПоляИдентификатор", ИмяПоляИдентификатор);
		ТекстыЗапросов.Добавить(Текст);
		
	КонецЦикла;
	
	Если ТаблицаИдентификаторов.Количество() Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторов.ИмяТаблицы        КАК ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор     КАК Идентификатор,
		|	ТаблицаИдентификаторов.Ссылка            КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаИдентификаторов
		|ИЗ
		|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор,
		|	ИмяТаблицы";
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|" + СтрСоединить(ТекстыЗапросов, Разделитель);
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДетальные = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока ВыборкаДетальные.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальные);
			ПоискСтрок = Идентификаторы.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТаблицы Из ПоискСтрок Цикл
				СтрокаТаблицы.Ссылка = ВыборкаДетальные.Ссылка;
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОчереди

Функция ОбработатьОчередьСообщений(ПараметрыОбмена)
	
	ПовторитьЦиклОбработкиСообщений  = Истина;
	
	МинимальноеКоличествоИтераций    = 0;
	МинимальнаяДатаСледующейОперации = Неопределено;
	
	Пока ПовторитьЦиклОбработкиСообщений Цикл
		
		ПовторитьЦиклОбработкиСообщений = Ложь;
		
		МинимальноеКоличествоИтераций    = 0;
		МинимальнаяДатаСледующейОперации = Неопределено;
		
		ДлительныеОперации.СообщитьПрогресс(,
			СтрШаблон(
				НСтр("ru = 'Выполняется обмен с ФГИС ""Сатурн""
				           |Пожалуйста, подождите...
				           |Сообщений в очереди: %1'"),
				КоличестовСообщенийВОчередиДляОтображения(ПараметрыОбмена)));
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			ДатаСледующейИтерации = Неопределено;
			
			УстановитьПривилегированныйРежим(Истина);
			
			НайденныеЗависимости = Неопределено;
			ЭтоАбстрактнаяОперация = Перечисления.ВидыОперацийСАТУРН.ЭтоАбстрактнаяОперация(ЭлементОчереди.Операция);
			
			Если Не ЭтоАбстрактнаяОперация
				И СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
				
				ПередатьЗапросВСервисТранзакция(ЭлементОчереди, ПараметрыОбмена);
				
			КонецЕсли;
			
			Если (ЭтоАбстрактнаяОперация Или Не СинхроннаяОбработкаОперации(ЭлементОчереди.Операция))
				И СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
				
				ЗапроситьРезультатОбработкиВСервисеТранзакция(ЭлементОчереди, ПараметрыОбмена);
				
			КонецЕсли;
			
			Если НайденныеЗависимости <> Неопределено
				И НайденныеЗависимости.Количество() Тогда
				// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
				ВОчередиЕстьЗависимыеСообщения = Ложь;
				Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
					Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") <> Неопределено Тогда
						ВОчередиЕстьЗависимыеСообщения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ВОчередиЕстьЗависимыеСообщения Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаСледующейИтерации <> Неопределено
				И (МинимальнаяДатаСледующейОперации = Неопределено Или МинимальнаяДатаСледующейОперации > ДатаСледующейИтерации) Тогда
				МинимальнаяДатаСледующейОперации = ДатаСледующейИтерации;
			КонецЕсли;
			
			Если ЭлементОчереди.КоличествоИтераций < МинимальноеКоличествоИтераций Тогда
				МинимальноеКоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
			КонецЕсли;
			
		КонецЦикла;
		
		// Действия после основного цикла очереди.
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
		
		ДобавленыЭлементыОчереди = ДобавитьВОчередьЭлементыОтложеннойЗагрузки(ПараметрыОбмена);
		
		Если МинимальнаяДатаСледующейОперации <> Неопределено
			И МинимальнаяДатаСледующейОперации < ТекущаяДатаСеанса()
			Или ДобавленыЭлементыОчереди Тогда
			ПовторитьЦиклОбработкиСообщений = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальнаяДатаСледующейОперации;
	
КонецФункции

// Добавить в очередь элементы отложенной загрузки.
// 
// Параметры:
//  ПараметрыОбмена - см. ИнтеграцияСАТУРН.ПараметрыОбмена
// 
// Возвращаемое значение:
//  Булево - Добавлено в очередь
Функция ДобавитьВОчередьЭлементыОтложеннойЗагрузки(ПараметрыОбмена)
	
	СообщенияJSON                     = Новый Массив;
	КоличествоЭлементовСтраницыОтвета = ПараметрыОбмена.ПараметрыОптимизации.КоличествоЭлементовСтраницыОтвета;
	
	Для Каждого КлючИЗначениеПоИмениТаблицы Из ПараметрыОбмена.КОтложеннойЗагрузке Цикл
		
		ИмяТаблицы = КлючИЗначениеПоИмениТаблицы.Ключ;
		
		Для Каждого КлючИЗначениеПоОрганизации Из КлючИЗначениеПоИмениТаблицы.Значение Цикл
			
			ОрганизацияСАТРУН = КлючИЗначениеПоОрганизации.Ключ;
			ЭлементыКЗагрузке = КлючИЗначениеПоОрганизации.Значение;
			ДобавленныеКлючи  = Новый Массив;
			Менеджер          = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
			
			ИдентификаторыПоКоличеству = Новый Массив;
			ГруппаИдентификаторов      = Новый Массив;
			
			ДобавленоЭлементов = 0;
			Для Каждого КлючИЗначенеЭлемент Из ЭлементыКЗагрузке Цикл
				
				Если ДобавленоЭлементов >= КоличествоЭлементовСтраницыОтвета Тогда
					ИдентификаторыПоКоличеству.Добавить(ГруппаИдентификаторов);
					ГруппаИдентификаторов = Новый Массив;
					ДобавленоЭлементов    = 0;
				КонецЕсли;
				
				ГруппаИдентификаторов.Добавить(КлючИЗначенеЭлемент.Ключ);
				ДобавленныеКлючи.Добавить(КлючИЗначенеЭлемент.Ключ);
				ДобавленоЭлементов = ДобавленоЭлементов + 1;
				
			КонецЦикла;
			
			Если ДобавленоЭлементов > 0 Тогда
				ИдентификаторыПоКоличеству.Добавить(ГруппаИдентификаторов);
			КонецЕсли;
			
			Для Каждого ДобавленныйКлюч Из ДобавленныеКлючи Цикл
				ЭлементыКЗагрузке.Удалить(ДобавленныйКлюч);
			КонецЦикла;
			
			Если ИдентификаторыПоКоличеству.Количество() Тогда
				
				Для Каждого ГруппаИдентификаторов Из ИдентификаторыПоКоличеству Цикл
					
					СообщениеJSON = СтруктураСообщенияJSON();
					СообщениеJSON.ОрганизацияСАТУРН = ОрганизацияСАТРУН;
					СообщениеJSON.Документ          = Менеджер.ПустаяСсылка();
					СообщениеJSON.Операция          = Менеджер.ОперацияЗагрузкиКлассификатора();
					СообщениеJSON.Версия            = 1;
					СообщениеJSON.Описание          = ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
					СообщениеJSON.АргументыОперации = Новый Структура;
					
					Отборы = Новый Массив;
					Отбор = Новый Структура;
					Отбор.Вставить("column", "id");
					Отбор.Вставить("condition", "=");
					Отбор.Вставить("value", ГруппаИдентификаторов);
					Отборы.Добавить(Отбор);
					СообщениеJSON.АргументыОперации.Вставить("filters", Отборы);
					
					СообщенияJSON.Добавить(СообщениеJSON);
					
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
	
	Возврат СообщенияJSON.Количество() > 0;
	
КонецФункции

Процедура ПередатьЗапросВСервисТранзакция(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка

		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийСАТУРН.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийСАТУРН");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийСАТУРН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();

		Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование) Тогда
			НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийСАТУРН.СоздатьНаборЗаписей();
			НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование.Сообщение);
			НаборЗаписейОснование.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ДатаМодификацииУниверсальная <> ЭлементОчереди.ДатаМодификацииУниверсальная Тогда
					ОтменитьТранзакцию();
					// Сообщение уже передано в ГИС, но еще не обработано.
					ЭлементОчереди.ДатаМодификацииУниверсальная = ЗаписьНабора.ДатаМодификацииУниверсальная;
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ПередатьЗапросВСервис(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по объекту %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗапроситьРезультатОбработкиВСервисеТранзакция(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка

		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийСАТУРН.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийСАТУРН");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийСАТУРН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийСАТУРН.СоздатьНаборЗаписей();
			НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование.Сообщение);
			НаборЗаписейОснование.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ДатаМодификацииУниверсальная <> ЭлементОчереди.ДатаМодификацииУниверсальная Тогда
					ОтменитьТранзакцию();
					// Сообщение уже передано в ГИС, но еще не обработано.
					ЭлементОчереди.ДатаМодификацииУниверсальная = ЗаписьНабора.ДатаМодификацииУниверсальная;
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			Если Перечисления.ВидыОперацийСАТУРН.ЭтоАбстрактнаяОперация(ЭлементОчереди.Операция) Тогда
				
				ИзмененныеОбъекты = Новый Массив;
				ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты);
				
				СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаРезультата.Объект, ИзмененныеОбъекты, Истина);
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
				РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
				Если РеквизитыИсходящегоСообщения.ЯвляетсяОснованиемСообщений
					И Перечисления.ВидыОперацийСАТУРН.ОперацииРасчетСтатуса().Найти(ЭлементОчереди.Операция) = Неопределено Тогда
					
					Если ЭлементОчереди.ПротоколОбмена <> Неопределено Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена;
						ТекстОшибки     = ОшибкаИзПротоколаОбмена(ЭлементОчереди, СтатусОбработки);
						ДанныеОбработки = Новый Структура;
						ДанныеОбработки.Вставить("СтатусОбработки", СтатусОбработки);
						ДанныеОбработки.Вставить("ТекстОшибки",     ТекстОшибки);
						
						Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
						
						ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
							ЭлементОчередиОснование.ПротоколОбмена);
						СтрокаРезультата.ПротоколОбмена = ДобавитьЗаписьВПротоколОбмена(
							ПротоколаОбменаXML,
							Реквизиты).Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
				УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			Иначе
				
				ЗапроситьРезультатОбработкиВСервисе(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			РегистрыСведений.СинхронизацияСтатусовДокументовСАТУРН.УстановитьДатуВыполненияСинхронизации(
				ЭлементОчереди.ОрганизацияСАТУРН);
			
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по объекту %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		РегистрыСведений.СинхронизацияСтатусовДокументовСАТУРН.УстановитьДатуВыполненияСинхронизации(
			ЭлементОчереди.ОрганизацияСАТУРН);
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередатьЗапросВСервис(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии(ЭлементОчереди.Пользователь, ПараметрыОбмена.ЭтоРегламентноеЗадание);
	
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.Сообщение                            = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = ДанныеКлючаСессии.ТекстОшибки;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеКлючаСессии.ТекстОшибки, ПараметрыОбмена, Истина);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		
		ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		Возврат;
		
	КонецЕсли;
	
	ТелоЗапроса = ТелоЗапросаВКонверте(
		ЭлементОчереди.Операция,
		РеквизитыИсходящегоСообщения,
		ДанныеКлючаСессии.ТокенАвторизации);
	
	РезультатЗапроса = ИнтерфейсСАТУРН.ОтправитьДанныеВСервис(
		ИнтерфейсСАТУРН.АдресРесурса(),
		ТелоЗапроса,
		ИнтерфейсСАТУРН.ПараметрыОтправкиHTTPЗапросов(ПараметрыОбмена.ПараметрыОптимизации));
	
	ЗафиксироватьДатуВыполненияЗапросаПроверкиИнтервала(ЭлементОчереди, ПараметрыОбмена);
	
	ДанныеОбработки = ОбработатьРезультатОтправкиHTTPЗапроса(РезультатЗапроса, ЭлементОчереди.Операция);
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		ПротоколОбменаХранитсяВТекущемЭлементеОчереди = ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена
			Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по объекту %1 не принято ФГИС ""Сатурн"":
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ФГИС ""Сатурн"":
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена Тогда
				
				ИзмененныеОбъекты = Новый Массив;
				ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты, ДанныеОбработки.Объект);
				
				РезультатыПередачиСообщения.ИзмененныеОбъекты = ИзмененныеОбъекты;
				
			КонецЕсли;
			
			ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.СтатусОбработки           = ДанныеОбработки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса          = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				
				РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
				ПараметрыОбновленияСтатуса.ПараметрыЗапросаОснования = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
				
				// Сохранить параметры запроса абстрактной операции расчета статуса.
				Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
					
					Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена
						И Перечисления.ВидыОперацийСАТУРН.ЭтоОперацияЗагрузкиДокументов(ЭлементОчередиОснование.Операция) Тогда
						// Если при обработке ошибки, то дату синхронизации запроса списков документов обновлять не нужно.
						РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ОбновитьДатуСинхронизации = Ложь;
					КонецЕсли;
					
					ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
					ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
					ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди
				И ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
				Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
				
				Если ЗначениеЗаполнено(Реквизиты.Документ) Тогда
					ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
						ЭлементОчереди.ПротоколОбмена);
					ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
						ПротоколаОбменаXML,
						Реквизиты);
					РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
				КонецЕсли;
				
			Иначе
				
				ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
				ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			
				ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(
					НаборЗаписей,
					НаборЗаписейОснование,
					ПараметрыОбновленияОчереди,
					РеквизитыИсходящегоСообщенияОснования);
				
			КонецЕсли;
			
			Если Не Перечисления.ВидыОперацийСАТУРН.ЭтоОперацияРаботыСКлассификаторами(ЭлементОчереди.Операция)
				И Не Перечисления.ВидыОперацийСАТУРН.ЭтоОперацияЗагрузкиДокументов(ЭлементОчереди.Операция)
				И ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				
				МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
				ПараметрыОбновленияСтатуса.ИдентификаторСтроки = ЭлементОчереди.РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
				МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(ЭлементОчереди.Документ, ЭлементОчереди.Операция, ПараметрыОбновленияСтатуса);
				
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
			КонецЕсли;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди Тогда
				
				ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
				
				// Сохранить параметры запроса абстрактной операции расчета статуса.
				Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
					ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
					ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
					ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
				КонецЕсли;
				
			Иначе
				
				ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(
					НаборЗаписей,
					НаборЗаписейОснование,
					ПараметрыОбновленияОчереди,
					РеквизитыИсходящегоСообщенияОснования);
				
			КонецЕсли;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			
			ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
			
			ПараметрыОптимизации = ПараметрыОбмена.ПараметрыОптимизации;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			ЭлементОчереди.ДатаСледующейИтерации        = ТекущаяДатаСеанса() + ПараметрыОптимизации.ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата;
			
			ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ИдентификаторСтроки = ЭлементОчереди.РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки, ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Если Не ДанныеОбработки.ТребуетсяОжидание
			И ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по %1 не принято ФГИС ""Сатурн"":
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ФГИС ""Сатурн"":
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, Истина);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		
		ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
		Если ДанныеОбработки.ТребуетсяОжидание Тогда
			ЗафиксироватьДатуВыполненияЗапросаПроверкиИнтервала(ЭлементОчереди, ПараметрыОбмена, Истина);
		Иначе
			ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьРезультатОбработкиВСервисе(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ДанныеКлючаСессии            = ИнтеграцияСАТУРН.ПолучитьКлючСессии(ЭлементОчереди.Пользователь);
	ИзмененныеОбъекты            = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ВызватьИсключение ДанныеКлючаСессии.ТекстОшибки;
	КонецЕсли;
	
	ТелоЗапроса = КонвертСообщенияJSON(ЭлементОчереди.Операция);
	ТелоЗапроса.Вставить("sid", ДанныеКлючаСессии.ТокенАвторизации);
	
	Если РеквизитыИсходящегоСообщения.АргументыОперации <> Неопределено Тогда
		ТелоЗапроса.Вставить("opargs", РеквизитыИсходящегоСообщения.АргументыОперации);
	КонецЕсли;
	
	РезультатЗапроса = ИнтерфейсСАТУРН.ОтправитьДанныеВСервис(
		ИнтерфейсСАТУРН.АдресРесурса(),
		ТелоЗапроса,
		ИнтерфейсСАТУРН.ПараметрыОтправкиHTTPЗапросов(ПараметрыОбмена.ПараметрыОптимизации));
	
	ЗафиксироватьДатуВыполненияЗапросаПроверкиИнтервала(ЭлементОчереди, ПараметрыОбмена);
	
	ДанныеОбработки = ОбработатьРезультатОтправкиHTTPЗапроса(РезультатЗапроса, ЭлементОчереди.Операция);
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		СообщениеОбработано = Истина;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка получения результата по объекту %1 из ФГИС ""Сатурн"":
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка получения результата из ФГИС ""Сатурн"":
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				
				Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчереди.ПротоколОбмена);
				ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		ИначеЕсли ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается Тогда
			
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			СообщениеОбработано = Ложь;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
			Иначе
				ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
			КонецЕсли;
			
		Иначе
			
			ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты, ДанныеОбработки.Объект);
			
			РезультатыПередачиСообщения.ИзмененныеОбъекты = ИзмененныеОбъекты;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			
			Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				
				ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
				
				// Сохранить параметры запроса абстрактной операции расчета статуса.
				Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
					ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
					ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
					ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
				КонецЕсли;
				
			Иначе
				
				ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(
					НаборЗаписей,
					НаборЗаписейОснование,
					ПараметрыОбновленияОчереди,
					РеквизитыИсходящегоСообщенияОснования);
				
			КонецЕсли;
			
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчереди.ПротоколОбмена);
				ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		Если СообщениеОбработано Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.СтатусОбработки     = ДанныеОбработки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ОперацияКвитанции   = ДанныеОбработки.Операция;
			ПараметрыОбновленияСтатуса.ИдентификаторСтроки = ЭлементОчереди.РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
			
			Если Не Перечисления.ВидыОперацийСАТУРН.ЭтоОперацияРаботыСКлассификаторами(ЭлементОчереди.Операция) Тогда
				МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, ПараметрыОбновленияСтатуса);
			КонецЕсли;
		
			ОбработатьРезультатПолученияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
		КонецЕсли;
		
	Иначе
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка получения результата по объекту %1 из ФГИС ""Сатурн"":
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка получения результата из ФГИС ""Сатурн"":
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, Истина);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		
		Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
			ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
		Иначе
			ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		КонецЕсли;
		
		ОбработатьРезультатПолученияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена)
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийСАТУРН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиДокумент, ПараметрыОбмена)
	
	ЭлементОчереди = Неопределено;
	
	Если ТипЗнч(ЭлементОчередиДокумент) <> Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого СтрокаТЧ Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если СтрокаТЧ.Документ = ЭлементОчередиДокумент Тогда
				ЭлементОчереди = СтрокаТЧ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементОчереди = ЭлементОчередиДокумент;
	КонецЕсли;
	
	Если ЭлементОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты, ПолученныеДанные = Неопределено)
	
	Если ЭлементОчереди.Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСАТУРНСлужебный.ОбработкаЗагрузкиПолученныхДанных");
		
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
	МенеджерОбъекта.ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты);
	
	ДанныеИмениШага = Новый Массив();
	Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
		ДанныеИмениШага.Добавить(ЭлементОчереди.Документ.Метаданные().Имя);
	КонецЕсли;
	ДанныеИмениШага.Добавить(XMLСтрока(ЭлементОчереди.Операция));
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, СтрСоединить(ДанныеИмениШага, "."));
	
КонецПроцедуры

Функция ОбработатьРезультатОтправкиHTTPЗапроса(РезультатЗапроса, Операция = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", РезультатЗапроса);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",          Ложь);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",             Ложь);
	ВозвращаемоеЗначение.Вставить("КодСостояния",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Объект",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	ВозвращаемоеЗначение.Вставить("ЭтоОбработаннаяОшибка",    Ложь);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",          Перечисления.СтатусыОбработкиСообщенийСАТУРН.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТребуетсяОжидание",        Ложь);
	
	Если РезультатЗапроса.HTTPОтвет = Неопределено Тогда
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = СтрШаблон(НСтр("ru = 'HTTP-запрос не отправлен:
			                                                        |%1.'"), РезультатЗапроса.ТекстОшибки);
		
	Иначе
		
		ВозвращаемоеЗначение.ЗапросОтправлен = Истина;
		ВозвращаемоеЗначение.ОтветПолучен    = Истина;
		ВозвращаемоеЗначение.КодСостояния    = РезультатЗапроса.HTTPОтвет.КодСостояния;
		
		ИсходныйТекстОтвета = РезультатЗапроса.HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если ВозвращаемоеЗначение.КодСостояния = 200 Тогда
			
			ОбъектОтвет = ОбщегоНазначенияИС.ТекстJSONВОбъект(ИсходныйТекстОтвета, Ложь);
			
			Если ОбъектОтвет = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Формат данных отличается от ожидаемого
						       |%1'"),
					ИсходныйТекстОтвета);
					
			ИначеЕсли Не ОбъектОтвет.Свойство("resCode") Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Формат данных отличается от ожидаемого
						       |%1'"),
					ИсходныйТекстОтвета);
			Иначе
				
				КодРезультата = ОбъектОтвет.resCode;
				Если ТипЗнч(ОбъектОтвет.resCode) = Тип("Строка") Тогда
					КодРезультата = ОбщегоНазначения.ОписаниеТипаЧисло(3,0).ПривестиЗначение(ОбъектОтвет.resCode);
				КонецЕсли;
				
				Если КодРезультата < 0 Тогда
					
					Если КодРезультата = -509 Тогда
						ВозвращаемоеЗначение.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка;
						ВозвращаемоеЗначение.ТребуетсяОжидание = Истина;
					Иначе
						ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена;
					КонецЕсли;
					
					Если ОбъектОтвет.Свойство("resMsg") Тогда
						ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
						НСтр("ru = '%1 (Код ошибки: %2)
						           |%3'"),
						ОбъектОтвет.resDescription,
						КодРезультата,
						ОбъектОтвет.resMsg);
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
							НСтр("ru = '%1 (Код ошибки: %2)'"),
							ОбъектОтвет.resDescription,
							КодРезультата);
					КонецЕсли;
					
				Иначе
					
					ВозвращаемоеЗначение.Объект = ОбъектОтвет.resData;
					
					Если СинхроннаяОбработкаОперации(Операция) Тогда
						ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена;
					Иначе
						ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки     = ИсходныйТекстОтвета;
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли РезультатыПередачиСообщения.РезультатОтправкиЗапроса <> Неопределено
		И ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
		РезультатыПередачиСообщения.ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Передано = Не ЗначениеЗаполнено(ТекстОшибки);
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
	
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	СтрокаРезультата.ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	
	СтрокаРезультата.Сообщение      = РезультатыПередачиСообщения.Сообщение;
	СтрокаРезультата.ТекстСообщения = РезультатыПередачиСообщения.ТекстСообщения;
	СтрокаРезультата.ПротоколОбмена = РезультатыПередачиСообщения.ПротоколОбмена;
	
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.ИзмененныеОбъекты) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтрокаРезультата.Объект,
			РезультатыПередачиСообщения.ИзмененныеОбъекты,
			Истина);
	КонецЕсли;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	Если Передано Тогда
		Если Перечисления.ВидыОперацийСАТУРН.ЭтоЗапросСписка(ЭлементОчереди.Операция) Тогда
			ПараметрыОбмена.ДатаПоследнегоЗапросаСписка = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатПолученияСообщения(РезультатыПолученияСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПолученияСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПолученияСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли РезультатыПолученияСообщения.РезультатОтправкиЗапроса <> Неопределено
		И ЗначениеЗаполнено(РезультатыПолученияСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПолученияСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
	
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	СтрокаРезультата.ПротоколОбмена    = РезультатыПолученияСообщения.ПротоколОбмена;
	СтрокаРезультата.ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	
	Если ЗначениеЗаполнено(РезультатыПолученияСообщения.ИзмененныеОбъекты) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтрокаРезультата.Объект,
			РезультатыПолученияСообщения.ИзмененныеОбъекты,
			Истина);
	КонецЕсли;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
КонецПроцедуры

Функция СинхроннаяОбработкаОперации(Операция)
	Возврат Истина;
КонецФункции

Функция КоличестовСообщенийВОчередиДляОтображения(ПараметрыОбмена)
	
	АбстрактныеОперации = Перечисления.ВидыОперацийСАТУРН.АбстрактныеОперации();
	
	Количество = 0;
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
		Если АбстрактныеОперации.Найти(ЭлементОчереди.Операция) = Неопределено Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Функция ТребуетсяОжидание(ДатаСледующейИтерации, ПараметрыОбмена)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ДатаСледующейИтерации <> Неопределено Тогда
		ВозвращаемоеЗначение = Истина;
	Иначе
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
				
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
			
			НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеЗависимости.Количество() Тогда
				ВозвращаемоеЗначение = Истина;
			Иначе
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
				
			Если ВозвращаемоеЗначение Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение); // Есть ли сообщения
	ПараметрыОтбора.Вставить("Загрузка",   Истина);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
	
	ИначеЕсли Не ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	ИначеЕсли Не ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыеПараметрыОбновленияСтатуса()
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки",           Неопределено);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции",         Неопределено);
	ПараметрыОбновленияСтатуса.Вставить("ПараметрыЗапроса",          Неопределено);
	ПараметрыОбновленияСтатуса.Вставить("ПараметрыЗапросаОснования", Неопределено);
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторСтроки",       "");
	ПараметрыОбновленияСтатуса.Вставить("ОрганизацияСАТУРН",         Неопределено);
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

Функция НовыеРезультатыПередачиСообщения()
	
	РезультатыПередачиСообщения = Новый Структура;
	
	РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса");
	РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета", Новый Структура);
	
	РезультатыПередачиСообщения.Вставить("Сообщение");
	РезультатыПередачиСообщения.Вставить("ТекстСообщения");
	
	РезультатыПередачиСообщения.Вставить("ПротоколОбмена");
	
	РезультатыПередачиСообщения.Вставить("ИзмененныеОбъекты", Новый Массив);
	
	РезультатыПередачиСообщения.РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	Возврат РезультатыПередачиСообщения;
	
КонецФункции

Функция ИнициализиоватьОчередьСообщений() Экспорт

	ОчередьСообщений = Новый ТаблицаЗначений;
	ОчередьСообщений.Колонки.Добавить("ДатаСоздания");
	ОчередьСообщений.Колонки.Добавить("Сообщение");
	ОчередьСообщений.Колонки.Добавить("СообщениеОснование");
	
	ОчередьСообщений.Колонки.Добавить("Операция");
	
	// Источник
	ОчередьСообщений.Колонки.Добавить("ОрганизацияСАТУРН");
	ОчередьСообщений.Колонки.Добавить("Документ");
	ОчередьСообщений.Колонки.Добавить("ДокументОснование");
	
	// Описание, протокол и очередь
	ОчередьСообщений.Колонки.Добавить("РеквизитыИсходящегоСообщения");
	ОчередьСообщений.Колонки.Добавить("ПротоколОбмена");
	ОчередьСообщений.Колонки.Добавить("ДатаМодификацииУниверсальная", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ИдентификаторЗаявки");
	ОчередьСообщений.Колонки.Добавить("ИдентификаторСтроки");
	
	// Временная техническая информация
	ОчередьСообщений.Колонки.Добавить("КоличествоИтераций",    Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ДатаСледующейИтерации", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ТекстОшибки",           Новый ОписаниеТипов("Строка"));
	ОчередьСообщений.Колонки.Добавить("Пользователь",          Метаданные.ОпределяемыеТипы.Пользователь.Тип);
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатус");
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатусОбработки");
	
	// Индексы
	ОчередьСообщений.Индексы.Добавить("Сообщение");
	
	Возврат ОчередьСообщений;
	
КонецФункции

Функция ИнициализироватьЗависимостиСообщений() Экспорт
	
	ЗависимостиСообщений = Новый ТаблицаЗначений;
	ЗависимостиСообщений.Колонки.Добавить("Сообщение1");
	ЗависимостиСообщений.Колонки.Добавить("Сообщение2");
	ЗависимостиСообщений.Колонки.Добавить("Загрузка");
	ЗависимостиСообщений.Колонки.Добавить("Передача");
	
	// Индексы
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение2");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Загрузка");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Передача");
	
	Возврат ЗависимостиСообщений;
	
КонецФункции

// Возвращает структуру параметров оптимизации по-умолчанию.
// 
// Возвращаемое значение:
//  Структура - Параметры оптимизации:
// * КоличествоЗапросовВМинуту - Число -
// * ТаймаутHTTPЗапросов - Число -
// * АвторизацияHTTPТестовыйКонтурЛогин - Строка -
// * АвторизацияHTTPТестовыйКонтурПароль - Строка -
// * КоличествоЭлементовСтраницыОтвета - Число -
// * ДатаОграниченияГлубиныДереваПартий - Дата -
Функция ПараметрыОптимизацииПоУмолчанию() Экспорт
	
	ПараметрыОптимизации = Новый Структура;
	ПараметрыОптимизации.Вставить("КоличествоЗапросовВМинуту",                       300);
	ПараметрыОптимизации.Вставить("ТаймаутHTTPЗапросов",                             30);
	ПараметрыОптимизации.Вставить("АвторизацияHTTPТестовыйКонтурЛогин",              "admin");
	ПараметрыОптимизации.Вставить("АвторизацияHTTPТестовыйКонтурПароль",             "qazwsx");
	ПараметрыОптимизации.Вставить("КоличествоЭлементовСтраницыОтвета",                500);
	ПараметрыОптимизации.Вставить("ДатаОграниченияГлубиныДереваПартий",               Дата(1, 1, 1));
	
	Возврат ПараметрыОптимизации;
	
КонецФункции

Функция ПараметрыОбновленияОчереди() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДанныеПротокола");
	ВозвращаемоеЗначение.Вставить("РеквизитыИсходящегоСообщения");
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализация таблицы протокола обмена элемента очереди из САТУРН
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * ДатаУниверсальная - Дата - Дата.
//  * Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - вид операции.
//  * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - статус обработки сообщения.
//  * Запрос - Строка - запрос.
//  * ЗапросЗаголовки - Строка - заголовки запроса.
//  * ЗапросТело - Строка - тело запроса.
//  * ОтветЗаголовки - Строка - заголовки ответа.
//  * ОтветТело - Строка - ответ.
//  * КодСостояния - Строка - код состояния запроса.
Функция ИнициализироватьТаблицуПротоколОбмена() Экспорт
	
	ПротоколОбмена = Новый ТаблицаЗначений;
	ПротоколОбмена.Колонки.Добавить("ДатаУниверсальная",  Новый ОписаниеТипов("Дата"));
	ПротоколОбмена.Колонки.Добавить("Операция",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийСАТУРН"));
	ПротоколОбмена.Колонки.Добавить("СтатусОбработки",    Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН"));
	ПротоколОбмена.Колонки.Добавить("Запрос",             Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросЗаголовки",    Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросТело",         Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветЗаголовки",     Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветТело",          Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("Документ",           Метаданные.ОпределяемыеТипы.ДокументыСАТУРН.Тип);
	ПротоколОбмена.Колонки.Добавить("КодСостояния",       Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЭтоВременнаяОшибка", Новый ОписаниеТипов("Булево"));
	ПротоколОбмена.Колонки.Добавить("ТекстОшибки",        Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("НомерСтраницы",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ПротоколОбмена;
	
КонецФункции

Процедура ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди, РеквизитыИсходящегоСообщенияОснования = Неопределено)
	
	Если НаборЗаписейОснование = Неопределено Тогда
		
		ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
		
	Иначе
		
		ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиОчереди, ПараметрыОбновленияОчереди,, "ДанныеПротокола");
		
		ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыЗаписиОчереди);
		
		ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиОчереди, ПараметрыОбновленияОчереди, "ДанныеПротокола");
		Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
			ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
		КонецЕсли;
		ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ИзменитьДатуМодификации = Ложь;
		
		Если ПараметрыОбновленияОчереди.ИдентификаторЗаявки <> Неопределено
			И ЗаписьНабора.ИдентификаторЗаявки <> ПараметрыОбновленияОчереди.ИдентификаторЗаявки Тогда
			ЗаписьНабора.ИдентификаторЗаявки = ПараметрыОбновленияОчереди.ИдентификаторЗаявки;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.ДанныеПротокола <> Неопределено Тогда
			ЗаписьНабора.ПротоколОбмена = ПараметрыОбновленияОчереди.ДанныеПротокола;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения <> Неопределено Тогда
			ЗаписьНабора.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения);
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ИзменитьДатуМодификации
			Или Не ЗначениеЗаполнено(ЗаписьНабора.ДатаМодификацииУниверсальная) Тогда
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование)
	Возврат (ЭлементОчереди <> ЭлементОчередиОснование И ЭлементОчередиОснование <> Неопределено);
КонецФункции

Функция ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементОчереди.СообщениеОснование) Тогда
		Возврат ЭлементОчереди;
	Иначе
		Возврат ПараметрыОбмена.ОчередьСообщений.Найти(ЭлементОчереди.СообщениеОснование, "Сообщение");
	КонецЕсли;
	
КонецФункции

Функция РезультатHTTPЗапроса() Экспорт
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

#КонецОбласти

#Область Протоколирование

Функция ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
		Возврат Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена);
	Иначе
		Возврат Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена);
	КонецЕсли;
	
КонецФункции

Функция ОшибкаИзПротоколаОбмена(ЭлементОчереди, СтатусОбработки)
	
	ТекстОшибки = "";
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка И Не СтрокаТЧ.ЭтоВременнаяОшибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена Тогда
			СтатусОбработки = СтрокаТЧ.СтатусОбработки;
			ТекстОшибки     = СтрокаТЧ.ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование)
	Возврат Не (ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование)
		И Перечисления.ВидыОперацийСАТУРН.ОперацииРасчетСтатуса().Найти(ЭлементОчередиОснование.Операция) = Неопределено)
		И Перечисления.ВидыОперацийСАТУРН.ОперацииРаботыСКлассификаторами().Найти(ЭлементОчереди.Операция) = Неопределено;
КонецФункции

Процедура ЗаписатьЛогЗапросовВПараметрыОбмена(ПараметрыОбмена)
	
	Если ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере() Тогда
		ПараметрыЛогирования = ЛогированиеЗапросовСАТУРН.ПараметрыЛогированияЗапросов();
		Если ПараметрыЛогирования.Включено Тогда
			ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.СодержаниеЛогаЗапросов(ПараметрыЛогирования);
			Если ДанныеЛогаЗапросов <> Неопределено Тогда
				ПараметрыОбмена.АдресДанныхЛогаЗапроса = ПоместитьВоВременноеХранилище(ДанныеЛогаЗапросов, ПараметрыОбмена.АдресДанныхЛогаЗапроса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",               ЭлементОчереди.Документ);
	Реквизиты.Вставить("Операция",               ЭлементОчереди.Операция);
	Реквизиты.Вставить("СообщениеОснование",     ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",                 ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",           ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("СтатусОбработки",        ДанныеОбработки.СтатусОбработки);
	Реквизиты.Вставить("Описание",               ДанныеОбработки.ТекстОшибки);
	Реквизиты.Вставить("ИдентификаторСтроки",    ЭлементОчереди.ИдентификаторСтроки);
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработкиИлиТекстОшибки, ПараметрыОбмена, ЭтоВременнаяОшибка = Ложь, Операция = Неопределено) Экспорт
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
		ЭлементОчередиОснование = ЭлементОчереди;
	КонецЕсли;
	
	Если ЭлементОчередиОснование.ПротоколОбмена = Неопределено Тогда
		
		ПротоколОбмена = ИнициализироватьТаблицуПротоколОбмена();
		ЭлементОчередиОснование.ПротоколОбмена = ПротоколОбмена;
		
	Иначе
		ПротоколОбмена = ЭлементОчередиОснование.ПротоколОбмена;
	КонецЕсли;
	
	ЗапросЗаголовки = Новый Массив;
	
	Если ТипЗнч(ДанныеОбработкиИлиТекстОшибки) = Тип("Строка") Тогда // Текст ошибки без обработки
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка;
		
		ТекстОшибки = ДанныеОбработкиИлиТекстОшибки;
		ОтветТело   = ДанныеОбработкиИлиТекстОшибки;
		
	Иначе
		
		СтатусОбработки = ДанныеОбработкиИлиТекстОшибки.СтатусОбработки;
		ДополнительныеПараметрыHTTP   = ДанныеОбработкиИлиТекстОшибки.РезультатОтправкиЗапроса;
		ПараметрыОтправкиHTTPЗапросов = ДополнительныеПараметрыHTTP.ПараметрыОтправкиHTTPЗапросов;
		HTTPМетод                     = ДополнительныеПараметрыHTTP.HTTPМетод;
		HTTPЗапрос                    = ДополнительныеПараметрыHTTP.HTTPЗапрос;
		HTTPОтвет                     = ДополнительныеПараметрыHTTP.HTTPОтвет;
		РеквизитыИсходящегоСообщения  = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			ЗапросЗаголовки.Добавить(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
		
		Если HTTPОтвет <> Неопределено Тогда
		
			КодСостояния   = HTTPОтвет.КодСостояния;
			ОтветЗаголовки = ЗаголовкиИзHTTPОтвета(HTTPОтвет);
			
			Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
				ОтветТело = HTTPОтвет.Тело;
			Иначе
				ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
			КонецЕсли;
			
			Если ДанныеОбработкиИлиТекстОшибки.Свойство("ТекстОшибки")
				И Не ЗначениеЗаполнено(ОтветТело) Тогда
				ОтветТело = ДанныеОбработкиИлиТекстОшибки.ТекстОшибки;
			КонецЕсли;
				
		Иначе
			
			ОтветТело = ДанныеОбработкиИлиТекстОшибки.ТекстОшибки;
			
		КонецЕсли;
		
		ТекстОшибки = ДанныеОбработкиИлиТекстОшибки.ТекстОшибки;
		
	КонецЕсли;
	
	КоличествоСтрокПротоколаОбмена = ПротоколОбмена.Количество();
	Если КоличествоСтрокПротоколаОбмена > 0 Тогда
		ПоследняяЗаписьПротокола = ПротоколОбмена[КоличествоСтрокПротоколаОбмена - 1];
		Если ПоследняяЗаписьПротокола.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается
			И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается
			И ОтветТело = ПоследняяЗаписьПротокола.ОтветТело Тогда
			ЗаписьПротокола = ПоследняяЗаписьПротокола;
		ИначеЕсли ПоследняяЗаписьПротокола.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка
			И СтатусОбработки= Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка
			И ЭтоВременнаяОшибка = ПоследняяЗаписьПротокола.ЭтоВременнаяОшибка
			И ОтветТело = ПоследняяЗаписьПротокола.ОтветТело Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписьПротокола = Неопределено Тогда
		ЗаписьПротокола = ПротоколОбмена.Добавить();
		ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
		Если Операция = Неопределено Тогда
			ЗаписьПротокола.Операция = ЭлементОчереди.Операция;
		Иначе
			ЗаписьПротокола.Операция = Операция;
		КонецЕсли;
		ЗаписьПротокола.СтатусОбработки = СтатусОбработки;
		ЗаписьПротокола.Документ        = ЭлементОчереди.Документ;
		ЗаписьПротокола.ТекстОшибки     = ТекстОшибки;
		Если HTTPЗапрос <> Неопределено Тогда
			ЗаписьПротокола.Запрос     = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
			ЗаписьПротокола.ЗапросТело = HTTPЗапрос.ПолучитьТелоКакСтроку();
			Если Операция = Неопределено Тогда
				ЗаписьПротокола.НомерСтраницы  = РеквизитыИсходящегоСообщения.НомерСтраницы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьПротокола.ЗапросЗаголовки    = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.КодСостояния       = КодСостояния;
	ЗаписьПротокола.ОтветЗаголовки     = ОтветЗаголовки;
	ЗаписьПротокола.ОтветТело          = ОтветТело;
	ЗаписьПротокола.ЭтоВременнаяОшибка = ЭтоВременнаяОшибка;
	
КонецПроцедуры

Функция ЗаголовкиИзHTTPОтвета(HTTPОтвет) Экспорт
	
	ОтветЗаголовки = Новый Массив;
	
	ИгноруемыеЗаголовки = Новый Соответствие;
	ИгноруемыеЗаголовки.Вставить(ВРег("Set-Cookie"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Expires"),                Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Via"),                    Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Connection"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Proxy-Connection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Server"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Vary"),                   Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Frame-Options"),        Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Transfer-Encoding"),      Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Pragma"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Content-Type-Options"), Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-XSS-Protection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Cache-Control"),          Истина);
	
	Для Каждого КлючИЗначение Из HTTPОтвет.Заголовки Цикл
		Заголовок = КлючИЗначение.Ключ;
		Если ИгноруемыеЗаголовки[ВРег(Заголовок)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтветЗаголовки.Добавить(
			СтрШаблон("%1: %2", Заголовок, КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(ОтветЗаголовки, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область Интервалы

Функция ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации)
	
	Если Перечисления.ВидыОперацийСАТУРН.ЭтоАбстрактнаяОперация(ЭлементОчереди.Операция) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОптимизации             = ПараметрыОбмена.ПараметрыОптимизации;
	ДанныеКоличестваЗапросовЗаПериод = ДанныеКоличестваЗапросовЗаПериод(ЭлементОчереди, ПараметрыОбмена);

	Если ДанныеКоличестваЗапросовЗаПериод.КоличествоЗапросовЗаМинуту >= ПараметрыОптимизации.КоличествоЗапросовВМинуту Тогда
		ДатаСледующейИтерации = ДанныеКоличестваЗапросовЗаПериод.МинимальнаяДата + 61;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДанныеКоличестваЗапросовЗаПериод(ЭлементОчереди, ПараметрыОбмена)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("КоличествоЗапросовЗаМинуту", 0);
	ВозвращаемоеЗначение.Вставить("МинимальнаяДата",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеУчетнойЗаписи",        Неопределено);
	
	Пользователь   = ЭлементОчереди.Пользователь;
	КлючиКУдалению = Новый Массив();
	ДатаПроверки   = ТекущаяДатаСеанса() - 60;
	
	Логин = ЛогинСАТУРНПоПользователю(Пользователь, ПараметрыОбмена);
	
	Если Логин = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеУчетнойЗаписи = ПараметрыОбмена.КоличествоЗапросовПоСекундам[Логин];
	Если ВозвращаемоеЗначение.ДанныеУчетнойЗаписи = Неопределено Тогда
		ВозвращаемоеЗначение.ДанныеУчетнойЗаписи = Новый Соответствие();
		ПараметрыОбмена.КоличествоЗапросовПоСекундам[Логин] = ВозвращаемоеЗначение.ДанныеУчетнойЗаписи;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ВозвращаемоеЗначение.ДанныеУчетнойЗаписи Цикл
		Если КлючИЗначение.Ключ < ДатаПроверки Тогда
			КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
		Иначе
			ВозвращаемоеЗначение.КоличествоЗапросовЗаМинуту = ВозвращаемоеЗначение.КоличествоЗапросовЗаМинуту + КлючИЗначение.Значение;
			Если ВозвращаемоеЗначение.МинимальнаяДата = Неопределено Тогда
				ВозвращаемоеЗначение.МинимальнаяДата = КлючИЗначение.Ключ;
			Иначе
				ВозвращаемоеЗначение.МинимальнаяДата = Мин(ВозвращаемоеЗначение.МинимальнаяДата, КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ Из КлючиКУдалению Цикл
		ВозвращаемоеЗначение.ДанныеУчетнойЗаписи.Удалить(Ключ);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗафиксироватьДатуВыполненияЗапросаПроверкиИнтервала(ЭлементОчереди, ПараметрыОбмена, ОбнаруженаБлокировка = Ложь) Экспорт
	
	ДанныеКоличестваЗапросовЗаПериод = ДанныеКоличестваЗапросовЗаПериод(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеКоличестваЗапросовЗаПериод.ДанныеУчетнойЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВыполненияЗапроса = ТекущаяДатаСеанса();
	
	ТекущееКоличество = ДанныеКоличестваЗапросовЗаПериод.ДанныеУчетнойЗаписи[ДатаВыполненияЗапроса];
	Если ТекущееКоличество = Неопределено Тогда
		ТекущееКоличество = 0;
	КонецЕсли;
	
	Если ОбнаруженаБлокировка Тогда
		ПараметрыОптимизации = ПараметрыОбмена.ПараметрыОптимизации;
		КоличествоЗапросов   = ПараметрыОптимизации.КоличествоЗапросовВМинуту - ТекущееКоличество + 1;
	Иначе
		КоличествоЗапросов = 1;
	КонецЕсли;
	
	ДанныеКоличестваЗапросовЗаПериод.ДанныеУчетнойЗаписи[ДатаВыполненияЗапроса] = ТекущееКоличество + КоличествоЗапросов;
	
КонецПроцедуры

Функция ЛогинСАТУРНПоПользователю(Пользователь, ПараметрыОбмена) 
	
	Логин = ПараметрыОбмена.ЛогиныПоПользователям[Пользователь];
	
	Если Логин = Неопределено Тогда
		ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьДанныеКлючаСессииИзРегистра(Пользователь);
		Если ДанныеКлючаСессии.ДанныеРегистра <> Неопределено Тогда
			Логин = ДанныеКлючаСессии.ДанныеРегистра.Логин;
			ПараметрыОбмена.ЛогиныПоПользователям[Пользователь] = Логин;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Логин;
	
КонецФункции

Функция ВремяОжидания(ДатаСледующейИтерации, ПараметрыОбмена)
	
	Если ДатаСледующейИтерации <> Неопределено Тогда
		ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
	Иначе
		ВремяОжидания = 0;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаСообщений

Функция КонвертСообщенияJSON(Операция)
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",   "execOperation");
	ТелоЗапроса.Вставить("otype", ИнтерфейсСАТУРН.ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",    ИнтерфейсСАТУРН.ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",   Неопределено);
	
	Возврат ТелоЗапроса;
	
КонецФункции

// Формирует пустую структуру сообщения JSON
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие из КлючИЗначение - Описание ошибок.
//   * ТекстСообщенияJSON          - Строка,Неопределено - Текст сообщения JSON.
//   * ТипСообщения                - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * ОрганизацияСАТУРН           - СправочникСсылка.КлассификаторОрганизацийСАТУРН, Неопределено - Организация.
//   * Операция                    - ПеречислениеСсылка.ВидыОперацийСАТУРН,Неопределено - Вид операции.
//   * Документ                    - ДокументСсылка, Неопределено - Документ.
//   * Версия                      - Число - Версия сообщения.
//   * СообщениеОснование          - СправочникСсылка.САТУРНПрисоединенныеФайлы,Неопределено - сообщение основание.
//   * ДокументОснование           - ДокументСсылка, Неопределено - Документ основание.
//   * ЯвляетсяОснованиемСообщений - Булево -
//   * Описание                    - Строка -
//   * Идентификатор               - Строка -
//   * Пользователь                - см. Пользователи.ТекущийПользователь
//   * АргументыОперации           - Неопределено -
//   * ПараметрыЗапроса            - Неопределено -
//   * ИдентификаторЗаявки         - Неопределено -
//   * ЗагружатьДо                 - Неопределено -
//   * ЗагружатьПосле              - Неопределено -
Функция СтруктураСообщенияJSON() Экспорт
	
	СообщениеJSON = Новый Структура;
	
	СообщениеJSON.Вставить("ТекстОшибки",         "");
	СообщениеJSON.Вставить("Ошибки",              Новый Соответствие);
	СообщениеJSON.Вставить("ИдентификаторЗаявки", "");
	СообщениеJSON.Вставить("ИдентификаторСтроки", "");
	
	// Для отображения в форме протокола обмена
	СообщениеJSON.Вставить("Описание", "");
	
	// Для управления очередностью
	СообщениеJSON.Вставить("Идентификатор",  Строка(Новый УникальныйИдентификатор()));
	СообщениеJSON.Вставить("ЗагружатьДо",    Неопределено);
	СообщениеJSON.Вставить("ЗагружатьПосле", Неопределено);
	
	СообщениеJSON.Вставить("ТекстСообщенияJSON", Неопределено);
	СообщениеJSON.Вставить("ТипСообщения",       Перечисления.ТипыЗапросовИС.Исходящий);
	СообщениеJSON.Вставить("Версия",             0);
	СообщениеJSON.Вставить("НомерСтраницы",      0);
	
	СообщениеJSON.Вставить("Операция",           Неопределено);
	СообщениеJSON.Вставить("СообщениеОснование", Неопределено);
	СообщениеJSON.Вставить("ПараметрыЗапроса",   Неопределено);
	СообщениеJSON.Вставить("АргументыОперации",  Неопределено);
	
	// Для определения ключа авторизации
	СообщениеJSON.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	
	// Для обновления в формах
	СообщениеJSON.Вставить("ОрганизацияСАТУРН",           Неопределено);
	СообщениеJSON.Вставить("Документ",                    Неопределено);
	СообщениеJSON.Вставить("ДокументОснование",           Неопределено);
	СообщениеJSON.Вставить("ЯвляетсяОснованиемСообщений", Ложь);
	
	Возврат СообщениеJSON;
	
КонецФункции

Процедура ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена)
	
	Если ТипЗнч(СообщенияJSON) = Тип("Структура") Тогда
		КоллекцияСообщенийJSON = Новый Массив;
		КоллекцияСообщенийJSON.Добавить(СообщенияJSON);
	Иначе
		КоллекцияСообщенийJSON = СообщенияJSON;
	КонецЕсли;
	
	Для Каждого Сообщение Из КоллекцияСообщенийJSON Цикл
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			РеквизитыОчереди = Новый Структура;
			РеквизитыОчереди.Вставить("Операция",          Сообщение.Операция);
			РеквизитыОчереди.Вставить("ОрганизацияСАТУРН", Сообщение.ОрганизацияСАТУРН);
			
			// Источник
			РеквизитыОчереди.Вставить("Документ",            Сообщение.Документ);
			РеквизитыОчереди.Вставить("ДокументОснование",   Сообщение.ДокументОснование);
			РеквизитыОчереди.Вставить("СообщениеОснование",  Сообщение.СообщениеОснование);
			РеквизитыОчереди.Вставить("ИдентификаторЗаявки", Сообщение.ИдентификаторЗаявки);
			РеквизитыОчереди.Вставить("ИдентификаторСтроки", Сообщение.ИдентификаторСтроки);
			РеквизитыОчереди.Вставить("Пользователь",        Сообщение.Пользователь);
			РеквизитыОчереди.Вставить("НастройкаРегламентногоЗадания", ПараметрыОбмена.НастройкаРегламентногоЗадания);
			
			// Описание, протокол и очередь
			РеквизитыОчереди.Вставить("РеквизитыИсходящегоСообщения", Сообщение);
			РеквизитыОчереди.Вставить("ПротоколОбмена",               Неопределено);
			РеквизитыОчереди.Вставить("ЗагружатьДо",                  Сообщение.ЗагружатьДо);
			РеквизитыОчереди.Вставить("ЗагружатьПосле",               Сообщение.ЗагружатьПосле);
			
			Попытка
				
				Результат = ПодготовитьСообщениеКПередаче(
					Сообщение,
					РеквизитыОчереди);
				
				ТекстОшибки            = Результат.ТекстОшибки;
				ПодготовленоКПередаче  = Не ЗначениеЗаполнено(ТекстОшибки);
				ИсходящееСообщение     = Результат.ИсходящееСообщение;
				
			Исключение
				
				ТекстОшибки            = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче  = Ложь;
				ИсходящееСообщение     = Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			ПредставлениеОперации = ОписаниеОперацииПередачиДанных(
				Сообщение.Операция,
				Сообщение.Документ,
				Сообщение.Версия);
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ФГИС ""Сатурн"":
				           |%2'"),
				ПредставлениеОперации,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			ИсходящееСообщение    = Неопределено;
			
		КонецЕсли;
		
		Если ПодготовленоКПередаче Тогда
			
			ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
			
			ЭлементОчереди.ДатаСоздания        = ТекущаяУниверсальнаяДата();
			ЭлементОчереди.Сообщение           = ИсходящееСообщение;
			ЭлементОчереди.СообщениеОснование  = Сообщение.СообщениеОснование;
			ЭлементОчереди.ОрганизацияСАТУРН   = Сообщение.ОрганизацияСАТУРН;
			ЭлементОчереди.Документ            = Сообщение.Документ;
			ЭлементОчереди.Пользователь        = Сообщение.Пользователь;
			ЭлементОчереди.Операция            = Сообщение.Операция;
			ЭлементОчереди.РеквизитыИсходящегоСообщения = Сообщение;
			ЭлементОчереди.ИдентификаторСтроки = Сообщение.ИдентификаторСтроки;
			ЭлементОчереди.ПротоколОбмена      = Неопределено;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьДо) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1 = Сообщение.ЗагружатьДо;
				НоваяЗависимость.Сообщение2 = ИсходящееСообщение;
				НоваяЗависимость.Загрузка   = Истина;
				НоваяЗависимость.Передача   = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1 = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2 = Сообщение.ЗагружатьПосле;
				НоваяЗависимость.Загрузка   = Ложь;
				НоваяЗависимость.Передача   = Истина;
			КонецЕсли;
			
		Иначе
			
			СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
			СтрокаРезультата.ТекстОшибки    = ТекстОшибки;
			СтрокаРезультата.Сообщение      = Сообщение.Идентификатор;
			СтрокаРезультата.ТекстСообщения = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает сообщение к передаче в сервис САТУРН.
//
// Параметры:
//  Сообщение - см. СтруктураСообщенияJSON
//  РеквизитыОчереди - Неопределено, Структура - Параметры очереди сообщений САТУРН
//
// Возвращаемое значение:
//  Структура - результат подготовки сообщения к отправке с полями:
//    * НовыйСтатус - Неопределено, ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - новый статус,
//    * ИсходящееСообщение - Строка, Неопределено - идентификатор сообщения,
//    * ТекстОшибки - Строка - текст ошибки,
//
Функция ПодготовитьСообщениеКПередаче(Сообщение, РеквизитыОчереди)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",        "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ЗначениеЗаполнено(Сообщение.Идентификатор) Тогда
			ИсходящееСообщение = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИсходящееСообщение = Сообщение.Идентификатор;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		
		Если РеквизитыОчереди <> Неопределено Тогда
			
			ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, РеквизитыОчереди);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение.Документ)
			И Не Перечисления.ВидыОперацийСАТУРН.ЭтоОперацияЗагрузкиДокументов(Сообщение.Операция)
			И Не Перечисления.ВидыОперацийСАТУРН.ЭтоОперацияРаботыСКлассификаторами(Сообщение.Операция) Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Сообщение.Документ);
			ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ИдентификаторСтроки = Сообщение.ИдентификаторСтроки;
			ПараметрыОбновленияСтатуса.ОрганизацияСАТУРН = Сообщение.ОрганизацияСАТУРН;
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(
				Сообщение.Документ, Сообщение.Операция, ПараметрыОбновленияСтатуса);
			
		Иначе
			НовыйСтатус = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение.НовыйСтатус = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Сообщение.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в САТУРН.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив из см.СтруктураСообщенияJSON
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено)
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ДокументСсылка);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УстановитьСообщениеОснование(СообщениеXML, СообщениеОснованиеXML) Экспорт
	
	Если ЗначениеЗаполнено(СообщениеОснованиеXML.СообщениеОснование) Тогда
		СообщениеXML.СообщениеОснование = СообщениеОснованиеXML.СообщениеОснование;
	Иначе
		СообщениеXML.СообщениеОснование = СообщениеОснованиеXML.Идентификатор;
		СообщениеОснованиеXML.ЯвляетсяОснованиемСообщений = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена) Экспорт
	
	Если СообщенияXML.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
	
	ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, СообщениеИсточникJSON) Экспорт
	
	СообщениеJSON.ОрганизацияСАТУРН  = СообщениеИсточникJSON.ОрганизацияСАТУРН;
	СообщениеJSON.Документ           = СообщениеИсточникJSON.Документ;
	СообщениеJSON.ДокументОснование  = СообщениеИсточникJSON.ДокументОснование;
	СообщениеJSON.Версия             = СообщениеИсточникJSON.Версия;
	СообщениеJSON.СообщениеОснование = СообщениеИсточникJSON.СообщениеОснование;
	СообщениеJSON.ЗагружатьДо        = СообщениеИсточникJSON.ЗагружатьДо;
	СообщениеJSON.Пользователь       = СообщениеИсточникJSON.Пользователь;
	СообщениеJSON.Операция           = СообщениеИсточникJSON.Операция;
	СообщениеJSON.Описание           = СообщениеИсточникJSON.Описание;
	
КонецПроцедуры

// Создает структуру сообщения и заполняет свойства ОрганизацияСАТУРН, Документ, ДокументОснование, Операция, Версия, Описание.
//
// Параметры:
//  ДанныеДокумента - ВыборкаИзРезультатаЗапроса - структура реквизитов документа, содержит ОрганизацияСАТУРН, ДокументОснование.
//  ДокументСсылка - ОпределяемыйТип.ДокументыСАТУРН - ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - операция
//  НомерВерсии - Число - номер версии, по умолчанию = 1.
//
// Возвращаемое значение:
// 	См. СтруктураСообщенияJSON.
Функция ИнициализироватьСообщениеJSON(ДанныеДокумента, ДокументСсылка, Операция, НомерВерсии = 1) Экспорт
	
	СообщениеJSON = СтруктураСообщенияJSON();
	
	СообщениеJSON.ОрганизацияСАТУРН = ДанныеДокумента.ОрганизацияСАТУРН;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = ДанныеДокумента.ДокументОснование;
	СообщениеJSON.Операция          = Операция;
	СообщениеJSON.Версия            = НомерВерсии;
	
	СообщениеJSON.Описание = ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	Возврат СообщениеJSON;
	
КонецФункции

// Добавить сообщение в регистра сведений ОчередьСообщенийСАТУРН.
//
// Параметры:
//  Сообщение - см. СтруктураСообщенияJSON
//  Реквизиты - Структура                          - реквизиты очереди сообщений САТУРН.
//
Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьСообщенийСАТУРН.СоздатьМенеджерЗаписи();
	НоваяЗапись.ДатаСоздания       = ТекущаяУниверсальнаяДата();
	НоваяЗапись.Сообщение          = Сообщение;
	НоваяЗапись.СообщениеОснование = Реквизиты.СообщениеОснование;
	
	НоваяЗапись.ИдентификаторСтроки = Реквизиты.ИдентификаторСтроки;
	НоваяЗапись.НастройкаРегламентногоЗадания = Реквизиты.НастройкаРегламентногоЗадания;
	
	НоваяЗапись.Операция          = Реквизиты.Операция;
	НоваяЗапись.ОрганизацияСАТУРН = Реквизиты.ОрганизацияСАТУРН;
	НоваяЗапись.Документ          = Реквизиты.Документ;
	НоваяЗапись.ДокументОснование = Реквизиты.ДокументОснование;
	
	// Описание, протокол и очередь
	НоваяЗапись.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(Реквизиты.РеквизитыИсходящегоСообщения);
	НоваяЗапись.ПротоколОбмена               = Новый ХранилищеЗначения(Неопределено);
	НоваяЗапись.ЗагружатьПосле               = Реквизиты.ЗагружатьПосле;
	НоваяЗапись.ЗагружатьДо                  = Реквизиты.ЗагружатьДо;
	НоваяЗапись.ИдентификаторЗаявки          = Реквизиты.ИдентификаторЗаявки;
	НоваяЗапись.Пользователь                 = Реквизиты.Пользователь;
	
	НоваяЗапись.Записать();
	
КонецПроцедуры

Функция ТелоЗапросаВКонверте(Операция, РеквизитыИсходящегоСообщения, ТокенАвторизации = "") Экспорт
	
	ТелоЗапроса = КонвертСообщенияJSON(Операция);
	ТелоЗапроса.Вставить("sid", ТокенАвторизации);
	
	Если РеквизитыИсходящегоСообщения.АргументыОперации <> Неопределено Тогда
		ТелоЗапроса.Вставить("opargs", РеквизитыИсходящегоСообщения.АргументыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыИсходящегоСообщения.ИдентификаторЗаявки) Тогда
		ТелоЗапроса.Вставить("oid", РеквизитыИсходящегоСообщения.ИдентификаторЗаявки);
	КонецЕсли;
	
	Возврат ТелоЗапроса;
	
КонецФункции

Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		HTTPЗапрос.АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

Функция ПараметрыФормированияСообщенияJSON() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ОрганизацияСАТУРН");
	ВозвращаемоеЗначение.Вставить("Операция");
	ВозвращаемоеЗначение.Вставить("НомерВерсии",   1);
	ВозвращаемоеЗначение.Вставить("НомерСтраницы", 0);
	ВозвращаемоеЗначение.Вставить("КоличествоНаСтранице", 1000);
	ВозвращаемоеЗначение.Вставить("ПараметрыЗапроса");
	ВозвращаемоеЗначение.Вставить("Документ");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

Процедура ЗаписатьПараметрыОптимизации(ПараметрыОптимизации, ВТранзакции = Истина) Экспорт
	
	Если ВТранзакции Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Константы.НастройкиОбменаСАТУРН.Установить(Новый ХранилищеЗначения(ПараметрыОптимизации));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ИнфрмацияОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Выполнение операции'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфрмацияОшибки));
			
			ВызватьИсключение;
			
		КонецПопытки;
	
	Иначе
		
		Константы.НастройкиОбменаСАТУРН.Установить(Новый ХранилищеЗначения(ПараметрыОптимизации));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПартийВДокументах

Процедура ЗаполнитьВСтрокахПартии(СписокСтрокДокумента, ПараметрыЗаполнения, РезультатЗаполнения)
	
	ТаблицаСоответствия = ПараметрыЗаполнения.ТаблицаСоответствия;
	КэшированныеЗначения = Новый Структура;
	
	Для каждого СтрокаДокумента Из СписокСтрокДокумента Цикл
		
		ОсталосьЗаполнить = СтрокаДокумента.КоличествоУпаковок;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаДокумента.Характеристика);
		Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
			СтруктураПоиска.Вставить("Серия", СтрокаДокумента.Серия);
		КонецЕсли;
		СписокСтрокСоответствия = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
		Коэффициенты = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковки(СтрокаДокумента.Номенклатура, СтрокаДокумента.Упаковка, КэшированныеЗначения);
		ПараметрыЗаполнения.Вставить("Коэффициенты", Коэффициенты);
		
		ЗаполнитьПартииПоСтрокеДокументаИСоответствию(
			СтрокаДокумента,
			СписокСтрокСоответствия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартииПоСтрокеДокументаИСоответствию(СтрокаДокумента, СписокСтрокСоответствия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)
	
	Для каждого СтрокаСоответствие Из СписокСтрокСоответствия Цикл
		
		ЗаполнитьПартиюПоСтрокеДокумента(
			СтрокаДокумента,
			СтрокаСоответствие.Партия,
			СтрокаСоответствие.ПАТ,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
			
		Если ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартиюПоСтрокеДокумента(СтрокаДокумента, Партия, ПАТ, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)

	Товары = ПараметрыЗаполнения.Объект[ПараметрыЗаполнения.Настройки.ИмяТЧ];
	ТаблицаОстатки = ПараметрыЗаполнения.ТаблицаОстатки;
	Коэффициенты   = ПараметрыЗаполнения.Коэффициенты;
	
	ЗаполнитьКоличествоСАТУРН = ПараметрыЗаполнения.Настройки.ЗаполнитьКоличествоСАТУРН;
	
	Отбор = Новый Структура("Партия", Партия);
	ОстаткиПоПартии = ТаблицаОстатки.НайтиСтроки(Отбор);
	Для Каждого СтрокаОстатки Из ОстаткиПоПартии Цикл
		
		Если СтрокаОстатки.КоличествоСАТУРН <= 0 Тогда
			Продолжить;
		ИначеЕсли ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоВУпаковкеСАТУРН = СтрокаДокумента.КоличествоВУпаковкеСАТУРН;
		ТипИзмеряемойВеличины = СтрокаДокумента.ТипИзмеряемойВеличиныСАТУРН;
		Если ТипИзмеряемойВеличины <> СтрокаОстатки.ТипИзмеряемойВеличины
			И ЗначениеЗаполнено(СтрокаОстатки.ТипИзмеряемойВеличины) Тогда
			Если СтрокаОстатки.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес Тогда
				КоличествоВУпаковкеСАТУРН = Коэффициенты.Вес;
			Иначе
				КоличествоВУпаковкеСАТУРН = Коэффициенты.Объем;
			КонецЕсли;
		КонецЕсли;
		Если КоличествоВУпаковкеСАТУРН = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоУпаковок = СтрокаОстатки.КоличествоСАТУРН / КоличествоВУпаковкеСАТУРН;
		
		Если КоличествоУпаковок < ОсталосьЗаполнить Тогда
			
			НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаДокумента) + 1);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
			НоваяСтрока.Партия = СтрокаОстатки.Партия;
			НоваяСтрока.ПАТ = ПАТ;
			Коэффициент = КоличествоУпаковок / НоваяСтрока.КоличествоУпаковок;
			НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			НоваяСтрока.Количество = НоваяСтрока.Количество * Коэффициент;
			НоваяСтрока.КоличествоВУпаковкеСАТУРН   = КоличествоВУпаковкеСАТУРН;
			НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличины;
			
			СтрокаДокумента.Количество = СтрокаДокумента.Количество - НоваяСтрока.Количество;
			СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			Если ЗаполнитьКоличествоСАТУРН Тогда
				СтрокаДокумента.КоличествоСАТУРН = СтрокаДокумента.КоличествоУпаковок;
				НоваяСтрока.КоличествоСАТУРН = НоваяСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			ОсталосьЗаполнить = ОсталосьЗаполнить - КоличествоУпаковок;
			СтрокаОстатки.КоличествоСАТУРН = 0;
			
			РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ВсегоСтрок + 1;
			РезультатЗаполнения.ИзмененныеСтроки.Добавить(НоваяСтрока);
			
		Иначе
			
			СтрокаДокумента.Партия = СтрокаОстатки.Партия;
			СтрокаДокумента.ПАТ = ПАТ;
			СтрокаДокумента.КоличествоВУпаковкеСАТУРН   = КоличествоВУпаковкеСАТУРН;
			СтрокаДокумента.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличины;
			
			Если ЗаполнитьКоличествоСАТУРН Тогда
				СтрокаДокумента.КоличествоСАТУРН = СтрокаДокумента.КоличествоУпаковок;
			КонецЕсли;
			
			ОсталосьЗаполнить = 0;
			СтрокаОстатки.КоличествоСАТУРН = СтрокаОстатки.КоличествоСАТУРН - СтрокаДокумента.Количество * КоличествоВУпаковкеСАТУРН;
			РезультатЗаполнения.ИзмененныеСтроки.Добавить(СтрокаДокумента);
			
		КонецЕсли;
		
		РезультатЗаполнения.ЗаполненоСтрок = РезультатЗаполнения.ЗаполненоСтрок + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения)

	Если РезультатЗаполнения = Неопределено Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Требуется заполнить реквизит Номенклатура'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение не требуется'");
		КартинкаСообщения = БиблиотекаКартинок.Информация32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ЗаполненоСтрок Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение успешно завершено'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		
	ИначеЕсли РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ВсегоСтрок Тогда
		
		ЧастиСтрок = Новый Массив;
		Если РезультатЗаполнения.НоменклатураНеЗаполнена > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Номенклатура'"));
		КонецЕсли;
		Если РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Количество'"));
		КонецЕсли;
		Если РезультатЗаполнения.КоэффициентНеЗаполнен > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит В упаковке'"));
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Требуется заполнить'") + " " + СтрСоединить(ЧастиСтрок, ", ");
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ЗаполненоСтрок <> 0 Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение выполнено частично'");
		
		Если РезультатЗаполнения.ПроблемныхСтрок <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции и не заполнены обязательные реквизиты'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции'");
		КонецЕсли; 
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Нет остатков продукции'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	КонецЕсли;
	
	СообщениеПользователю = Новый Структура;
	СообщениеПользователю.Вставить("ЗаголовокСообщения", ЗаголовокСообщения);
	СообщениеПользователю.Вставить("ТекстСообщения", ТекстСообщения);
	СообщениеПользователю.Вставить("КартинкаСообщения", КартинкаСообщения);
	
	РезультатЗаполнения.Вставить("СообщениеПользователю", СообщениеПользователю);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти