
#Область СлужебныйПрограммныйИнтерфейс

#Область РазборКодаМаркировки

Функция ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеЭлементаКМ.Имя = "ШтрихкодАкцизнойМарки" Тогда
		
		ТипШтрихкода = Неопределено;
		Если Не ЭтоШтрихкодАкцизнойМарки(Значение, ТипШтрихкода, ПараметрыОписанияКодаМаркировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ТипШтрихкода", ТипШтрихкода);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра) Экспорт
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	
	Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФильтрПоВидуПродукции = ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции;
	
	Если ФильтрПоВидуПродукции.Использовать
		И ФильтрПоВидуПродукции.ВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлассификаторТиповАкцизныхМарок = Настройки.ДополнительныеПараметры.ЕГАИС.КлассификаторТиповАкцизныхМарок;
	
	ТекстОшибки = "";
	СтруктураШтрихкода = РазложитьШтрихкодСНомеромИСерией(ПараметрыРазбораКодаМаркировки.КодМаркировки, ТекстОшибки, КлассификаторТиповАкцизныхМарок);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыПродукции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПродукции);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix");
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией");
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("ТипМарки",   СтруктураШтрихкода.ТипМарки);
	СоставКодаМаркировки.Вставить("СерияМарки", СтруктураШтрихкода.СерияМарки);
	СоставКодаМаркировки.Вставить("НомерМарки", СтруктураШтрихкода.НомерМарки);
	
	ДанныеРезультата = РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация);
	ДанныеРезультата.КодМаркировки        = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ТипШтрихкодаИВидУпаковки.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции        = ВидыПродукции;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	Если ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация Тогда
		ДанныеРезультата.Детализация.НачинаетсяСоСкобки                = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки;
		ДанныеРезультата.Детализация.СодержитРазделительGS             = ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		ДанныеРезультата.Детализация.ЭтоНеФормализованныйКодМаркировки = Истина;
	КонецЕсли;
	
	ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] =
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипШтрихкодаИВидУпаковки.ВидУпаковки);
	
	НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		ДанныеРезультата, ВидПродукции);
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализованныйКодМаркировки;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьЭлементКодаМаркировкиВСоставКодаМаркировки(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры) Экспорт
	
	ДобавитьРасширенныеДанныеВСоставЭлементаКодаМаркировки(Значение, СоставКодаМаркировки, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область АкцизныеМарки

// Извлекает из переданного штрихкода тип, серию и номер марки.
//
// Параметры:
//  Штрихкод - Строка - штрихкод в формате Data Matrix, виды:
//     ВВВ-СССННННННННХХХХХХХХХХХХ - акцизная марка (АМ),
//     ВВВ-СССНННННННННХХХХХХХХХХХХ - федеральная спец. марка (ФСМ).
//  ТекстОшибки - Строка - если в процессе разбора произошла ошибка, в переменную вернется ее текст.
//  КлассификаторТиповАкцизныхМарок - ТаблицаЗначений, Неопределено - предзаполненный классификатор типов марок
//
// Возвращаемое значение:
//  Структура - данные марки:
//   * ТипМарки - Строка - тип марки (3 знака),
//   * СерияМарки - Строка - серия марки (3 знака),
//   * НомерМарки - Строка - Номер марки (8 или 9 знаков).
//
Функция РазложитьШтрихкодСНомеромИСерией(Штрихкод, ТекстОшибки = "", КлассификаторТиповАкцизныхМарок = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипМарки"  , "");
	Результат.Вставить("СерияМарки", "");
	Результат.Вставить("НомерМарки", "");
	
	Если НЕ ЭтоШтрихкодDataMatrix(Штрихкод) Тогда
		ТекстОшибки = НСтр("ru='Штрихкод %1 не соответствует формату Data Matrix.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Штрихкод);
		Возврат Результат;
	КонецЕсли;
	
	ТипМарки = ТипАкцизнойМарки(Лев(Штрихкод, 3), КлассификаторТиповАкцизныхМарок);
	
	Если НЕ ЗначениеЗаполнено(ТипМарки.ВидМарки) Тогда
		ТекстОшибки = НСтр("ru='Ошибка при обработке штрихкода %1: Не удалось определить вид акцизной марки (ФСМ или АМ).'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Штрихкод);
		Возврат Результат;
	КонецЕсли;
	
	ДлинаНомера = ?(ТипМарки.ВидМарки = "АМ", 8, 9);
	
	Результат.ТипМарки   = Лев(Штрихкод, 3);
	Результат.СерияМарки = Сред(Штрихкод, 5, 3);
	Результат.НомерМарки = Сред(Штрихкод, 8, ДлинаНомера);
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие переданного штрихкода формату Data Matrix.
//
// Параметры:
//  Штрихкод - Строка - проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Истина, если штрихкод в формате Data Matrix, Ложь - в противном случае.
//
Функция ЭтоШтрихкодDataMatrix(Штрихкод) Экспорт
	
	Если СтрДлина(Штрихкод) < 15 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сред(Штрихкод, 4, 1) <> "-" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверяемыйШтрихкод = СтрЗаменить(Штрихкод, "-", "");
	
	Для Сч = 1 По Мин(15, СтрДлина(ПроверяемыйШтрихкод)) Цикл
		Если СтрНайти("0123456789", Сред(ПроверяемыйШтрихкод, Сч, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбращениеКРасширеннойВерсииГосИС

Процедура ДобавитьРасширенныеДанныеВСоставЭлементаКодаМаркировки(Значение, СоставКодаМаркировки, ДополнительныеПараметры)
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС("ЕГАИС") Тогда
		Возврат;
	КонецЕсли;
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("РазборКодаМаркировкиЕГАИССлужебныйКлиентСервер");
	#Иначе
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РазборКодаМаркировкиЕГАИССлужебныйКлиентСервер");
	#КонецЕсли
	
	Модуль.ДобавитьРасширенныеДанныеВСоставЭлементаКодаМаркировки(Значение, СоставКодаМаркировки, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область РазборКодаМаркировки

Функция ЭтоШтрихкодАкцизнойМарки(Штрихкод, ТипШтрихкода, ПараметрыОписанияКодаМаркировки) Экспорт
	
	// Взято из ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(Значение, ТипШтрихкода)
	
	ПроверкаШтрихкодаАкцизнойМарки = ПараметрыОписанияКодаМаркировки.ДополнительныеПараметры.ЕГАИС.ПроверкаШтрихкодаАкцизнойМарки;
	
	Если ПараметрыОписанияКодаМаркировки.МодульКонтекста.ЭтоСервер() Тогда
		
		Если ПроверкаШтрихкодаАкцизнойМарки.Свойство("ОбщийМодульЕГАИС") Тогда
			ОбщийМодульЕГАИС = ПроверкаШтрихкодаАкцизнойМарки.ОбщийМодульЕГАИС;
		Иначе
			ОбщийМодульЕГАИС = ПараметрыОписанияКодаМаркировки.МодульКонтекста.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИС");
		КонецЕсли;
		
		Возврат ОбщийМодульЕГАИС.ЭтоШтрихкодАкцизнойМарки(Штрихкод, ТипШтрихкода);
		
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	
	МодельXML           = ПроверкаШтрихкодаАкцизнойМарки.МодельXML;
	URIПространстваИмен = ПроверкаШтрихкодаАкцизнойМарки.URIПространстваИмен;
	ИмяТипа             = ПроверкаШтрихкодаАкцизнойМарки.ИмяТипа;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(МодельXML);
	
	ОбъектModel = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	НоваяФабрикаXDTO = Новый ФабрикаXDTO(ОбъектModel);
	
	ТипШтрихкодМарки = НоваяФабрикаXDTO.Тип(URIПространстваИмен, ИмяТипа);
	
	Попытка
		ТипШтрихкодМарки.Проверить(Штрихкод);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	#КонецЕсли
	
	Если СтрДлина(Штрихкод) = 150 Тогда
		ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix");
	Иначе 
		ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКодаМаркировки

Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки) Экспорт
	
	СоставКодаМаркировки = Новый Структура;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

#КонецОбласти

// Получает тип акцизной марки из классификатора.
//
Функция ТипАкцизнойМарки(Код, КлассификаторТиповАкцизныхМарок)
	
	Если КлассификаторТиповАкцизныхМарок = Неопределено Тогда
		Возврат РазборКодаМаркировкиЕГАИСВызовСервера.ТипАкцизнойМарки(Код);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ВидМарки"    , "");
	
	Для Каждого СтрокаТаблицы Из КлассификаторТиповАкцизныхМарок Цикл
		Если СтрокаТаблицы.Код = Код Тогда
			ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
