#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму ошибок отправки событий
// 
// Параметры:
//  ПараметрКоманды - Структура
//  ПараметрыВыполнения - Структура
//
Процедура ОткрытьФормуОшибок(ПараметрКоманды, ПараметрыВыполнения) Экспорт
	
	Форма = ПараметрыВыполнения.Форма;
	
	ЭтоЗапись = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения.ОписаниеКоманды, "Идентификатор", "")
					= ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР();
					
	Если ЭтоЗапись Тогда
		ОткрытьФормуНастроекВидеозаписи(Новый Структура, Форма);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", ПараметрКоманды);
		ОткрытьНавигационнуюСсылку("Ошибки", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

// Открывает форму ошибок
// 
// Параметры:
//  ТекстОшибки    - Строка
//                 - ФорматированнаяСтрока
//  ЗаголовокФормы - Строка
//
Процедура ПоказатьФормуОшибок(ТекстОшибки, ЗаголовокФормы = "") Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "Ошибка");
	ПараметрыФормы.Вставить("ТекстФормы", СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстОшибки));
	ЭлектронноеАктированиеЕИСКлиент.ОткрытьФормуИнформации(ПараметрыФормы);

КонецПроцедуры

// Установливает видимость элемента формы статуса ошибки ГИС НР
// 
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма на которой расположен элемент статуса ошибки
//  ПараметрОповещения - Произвольный
//
Процедура УстановитьВидимостьЭлементаФормыСтатусаОшибкиГИСНР(Форма, ПараметрОповещения = Неопределено) Экспорт
	
	ДекорацииФормыСтатусаОшибкиГИСНР
		= Форма.Элементы.Найти(ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОшибкиГИСНР());
	ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР
	= Форма.Элементы.Найти(ЭлектронноеАктированиеЕИСГИСНРКлиентСервер.ИмяДекорацииФормыСтатусаОШибкиВидеозаписиГИСНР());

	Если ДекорацииФормыСтатусаОшибкиГИСНР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Форма.Объект.Ссылка;
	УбратьВидимостьПринудительно = ТекущаяСсылка = ПараметрОповещения;
	СостояниеВидеозаписи = ПараметрыСеансаПлагина().Документы[ТекущаяСсылка];
	
	Если ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР <> Неопределено Тогда
		ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР.Заголовок = "";
		ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР.Видимость = СостояниеВидеозаписи = Ложь;
	КонецЕсли;
	
	Если УбратьВидимостьПринудительно ИЛИ СостояниеВидеозаписи = Неопределено Тогда
		ДекорацииФормыСтатусаОшибкиГИСНР.Видимость = Ложь;
	Иначе
		СостояниеОтправки
			= ЭлектронноеАктированиеЕИСГИСНРВызовСервера.ВидимостьЭлементаФормыСтатусаОшибкиГИСНР(ТекущаяСсылка);
		ДекорацииФормыСтатусаОшибкиГИСНР.Видимость = СостояниеОтправки;
		
		Если СостояниеОтправки И СостояниеВидеозаписи = Ложь
			И ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР <> Неопределено Тогда
			ДекорацииФормыСтатусаОшибкиГИСНР.Заголовок = НСтр("ru = 'Ошибка отправки события ГИС НР'");
			ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР.Заголовок
				= ", " + НСтр("ru = 'ошибка запуска видеозаписи плагина ГИС НР'");
		ИначеЕсли СостояниеВидеозаписи = Ложь И ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР <> Неопределено Тогда
			ДекорацииФормыСтатусаОшибкиГИСНР.Заголовок = "";
			ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР.Заголовок
				= НСтр("ru = 'Ошибка запуска видеозаписи плагина ГИС НР'");
			ДекорацииФормыСтатусаОшибкиВидеозаписиГИСНР.Видимость = Истина;
		Иначе
			ДекорацииФормыСтатусаОшибкиГИСНР.Заголовок = НСтр("ru = 'Ошибка отправки события ГИС НР'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает наименование оповещения об отсутствии ошибки
// 
// Возвращаемое значение:
//  Строка - Наименование оповещения об отсутствии ошибки
//
Функция ИмяОповещенияОбОтсутствииОшибки() Экспорт
	
	Возврат "ДляОбъектаОтсутствуетОшибкаМониторингаГИСНР";
	
КонецФункции

// Выполняет оповещение об отсутствии ошибки мониторинга ГИС НР для формы содержащей переданный объект учета
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - ссылка на объект учета
//
Процедура ОповеститьОбОтсутствииОшибки(ОбъектУчета) Экспорт
	
	НаименованиеОповещенияОбОтсутствииОшибки = ИмяОповещенияОбОтсутствииОшибки();
	
	Оповестить(НаименованиеОповещенияОбОтсутствииОшибки, ОбъектУчета);
	
КонецПроцедуры

// Обрабатывает нажатие гиперссылок в формах в подсистеме
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка
//  ПараметрыФормы                           - Структура - дополнительные параметры для обработки
// 
// Возвращаемое значение:
//  Булево - Истина, если успешно открылась
//
Функция ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ОбработчикОшибки = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылкуЗавершение", ЭтотОбъект);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Скачать" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ГиперссылкаНаПлагинГИСНР());
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Ошибки" Тогда
		ОткрытьФормуЖурналаРегистрацииСобытийГИСНР(Истина, ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "События" Тогда
		ОткрытьФормуЖурналаРегистрацииСобытийГИСНР(Ложь, ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ГиперссылкаНаИнформациюПоГИСНР());
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Настройки" Тогда
		ОткрытьФормуНастроекВидеозаписи(ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Сертификат" Тогда
		ВидеоЗаписьДиалогВыбораСертификата(ОбработчикОшибки);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Видеоролики" Тогда
		ВидеоЗаписьОткрытьВидеоплеер(ОбработчикОшибки, Неопределено);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Обновить" Тогда
		ВидеоЗаписьНачатьОбновлениеПлагина(ОбработчикОшибки);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ТекущийСертификат" Тогда
		ВидеоЗаписьУстановитьТекущийСертификат(ОбработчикОшибки, "", "");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СсылкаНаЛКЕИС" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ГиперссылкаНаЛКЕИС());
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обертка для операции интерактивного запуска обмена документов с сервисом ЕИС из ЭДО
//
// Параметры:
//  ПараметрыВыполненияКоманды - Структура
//  ПараметрыВыполненияДействийПоЭДО - Структура
//
// Возвращаемое значение:
//  Булево - Истина, если успешно выполнилась
//
Функция ПодготовитьПараметрыДокументовЭДО(ПараметрыВыполненияКоманды, ПараметрыВыполненияДействийПоЭДО) Экспорт
	
	Результат = Истина;
	
	Попытка
		ПараметрКоманды = ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета;
		ЕстьИсточник = Ложь;
		Если ПараметрыВыполненияКоманды.Свойство("Источник") Тогда
			ЕстьИсточник = 
			 ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			 	ПараметрыВыполненияКоманды.Источник, "ПараметрыОбменаСКонтрагентами")
				И ПараметрыВыполненияКоманды.Источник.ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие <> Неопределено
				И ПараметрыВыполненияКоманды.Источник.ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие.ЗапускПлагинаГИСНР <> Неопределено;
		КонецЕсли;
		
		Если ЕстьИсточник Тогда
			ЗапускПлагинаГИСНР = ПараметрыВыполненияКоманды.Источник.ПараметрыОбменаСКонтрагентами.ДанныеСостоянияЭДОТекущие.ЗапускПлагинаГИСНР;
			Для Каждого СтрокаМассива Из ПараметрКоманды Цикл
				НоваяСтрока = Новый Структура("ЗапускПлагинаГИСНР", ЗапускПлагинаГИСНР);
				ПараметрыВыполненияДействийПоЭДО.ДополнительныеДанныеОбъектов.Вставить(СтрокаМассива, НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обертка для операции интерактивного запуска обмена документов с сервисом ЕИС из ЭДО
//
// Параметры:
//  ПараметрыВыполненияДействий - Структура
//
// Возвращаемое значение:
//  Булево
//
Асинх Функция НачалоОперацииЛогированияЭДО(ПараметрыВыполненияДействий) Экспорт
	
	Результат = Истина;
	
	Попытка
		
		НаборДокументов = Новый Соответствие;
		
		ЗапускПлагина = 0;
		
		Для Каждого СтрокаКлюча Из ПараметрыВыполненияДействий.ДополнительныеДанныеОбъектов Цикл
			ТекущийСтатус
				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаКлюча.Значение, "ЗапускПлагинаГИСНР", 0);
			Если ТекущийСтатус > 1 Тогда
				НаборДокументов.Вставить(СтрокаКлюча.Ключ, Истина);
			КонецЕсли;
			ЗапускПлагина = Макс(ЗапускПлагина, ТекущийСтатус);
		КонецЦикла;
		
		Если ЗапускПлагина <> 0 Тогда
			ТекущиеПараметры = ПараметрыСеансаПлагина();
			ТекущиеПараметры.Документы = НаборДокументов;
			НаборДокументов = Новый Соответствие;
			Результат = Ждать НачалоОперацииЛогирования(
				Неопределено,
				ПараметрыВыполненияДействий.ОбъектыДействий.ОбъектыУчета,
				ЗапускПлагина);
		КонецЕсли;
		
	Исключение
		Результат = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обертка для операции интерактивного запуска обмена документов с сервисом ЕИС
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - процедура продолжения после работы с плагином ГИС НР
//  СписокДокументов     - Массив из ДокументСсылка
//                       - Неопределено
//  ИспользованиеПлагина - Число
//
// Возвращаемое значение:
//  Булево
//
Асинх Функция НачалоОперацииЛогирования(
		ОповещениеЗавершения,
		СписокДокументов = Неопределено,
		Знач ИспользованиеПлагина = 0) Экспорт
	
	Результат = Истина;
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("Результат", 2);
	ПараметрыЦикла.Вставить("ИдентификаторВидео", Строка(Новый УникальныйИдентификатор));
	ПараметрыЦикла.Вставить("Организация", Неопределено);
	ПараметрыЦикла.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ПараметрыЦикла.Вставить("Документы", СписокДокументов);
	
	ТекущиеПараметры = ПараметрыСеансаПлагина();
		
	ЕстьВидеоЗапись = Ложь;
	ЗадатьВопрос = НЕ ТекущиеПараметры.ВопросЗадан;
	
	Если ИспользованиеПлагина = 0 Тогда
		Возврат Результат;
	Иначе
		ЕстьВидеоЗапись = ИспользованиеПлагина = 3;
	КонецЕсли;
	
	ЭтоМобильныйКлиент = Ложь;
	#Если МобильныйКлиент Тогда
		ЭтоМобильныйКлиент = Истина;
	#КонецЕсли

	Если НЕ ЕстьВидеоЗапись 
		ИЛИ ОбщегоНазначенияКлиент.ЭтоMacOSКлиент()
		ИЛИ ЭтоМобильныйКлиент Тогда
		НачалоОперацииЛогированияРезультат(ПараметрыЦикла, Ложь);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ТекущиеПараметры.ПлагинОбнаружен Тогда
		ПараметрыЦикла.Результат = 1;
		ОбработкаТаймера(НСтр("ru = 'Плагин не обнаружен'"), ПараметрыЦикла);
		НачалоОперацииЛогированияРезультат(ПараметрыЦикла, Ложь);
		Возврат Результат;
	КонецЕсли;

	Если НЕ ЕстьВидеоЗапись И ЗадатьВопрос И ДополнительноИнформироватьПользователя() Тогда
		ВариантыОтвета = Новый СписокЗначений;
		ВариантыОтвета.Добавить("Да", НСтр("ru = 'Включить и продолжить отправку'"));
		ВариантыОтвета.Добавить("Нет", НСтр("ru = 'Продолжить'"));
		ВариантыОтвета.Добавить("Прервать", НСтр("ru = 'Настройки'"));
		
		ТекстВопроса = НСтр("ru = 'При обмене с ЕИС появилась возможность регистрировать события отправки документов'")
			+ Символы.ПС
			+ НСтр("ru = 'в государственной информационной системе ""Независимый регистратор"". Подробнее см.'")
			+ " " + НСтр("ru = '<a href='") + """" + ГиперссылкаНаИнформациюПоГИСНР() 
			+ """" + НСтр("ru = '>здесь</a>.'") + Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Включить регистрацию событий отправки документов?'");
		
		ОписаниеВопроса = Новый ОписаниеОповещения("НачалоОперацииЛогированияПродолжение", ЭтотОбъект, ПараметрыЦикла);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокКоманд", ВариантыОтвета);
		ПараметрыФормы.Вставить("Режим", "Вопрос");
		ПараметрыФормы.Вставить("Ширина", 70);
		ПараметрыФормы.Вставить("ТекстФормы", СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстВопроса));
		ЭлектронноеАктированиеЕИСКлиент.ОткрытьФормуИнформации(ПараметрыФормы, ОписаниеВопроса);
		
		Результат = Ложь;
		
	ИначеЕсли НЕ ЕстьВидеоЗапись Тогда
		НачалоОперацииЛогированияРезультат(ПараметрыЦикла, Ложь);
		
	Иначе
		Ждать НачалоОперацииЛогированияПродолжение(Неопределено, ПараметрыЦикла);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обертка для операции интерактивного окончания обмена документов с сервисом ЕИС через ЭДО
//
// Параметры:
//  ПараметрыВыполненияДействий - Структура
//  РезультатОбмена - Структура
//
Процедура ОкончаниеОперацииЛогированияЭДО(ПараметрыВыполненияДействий, РезультатОбмена) Экспорт
	
	ЗапускПлагина = 0;
	Для Каждого СтрокаКлюча Из ПараметрыВыполненияДействий.ДополнительныеДанныеОбъектов Цикл
		ТекЗначение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаКлюча.Значение, "ЗапускПлагинаГИСНР", 0);
		ЗапускПлагина = Макс(ЗапускПлагина, ТекЗначение);
	КонецЦикла; 
	
	Если ЗапускПлагина <> 3 Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбОкончанииОперации(Неопределено);

	НастройкиСеанса = ПараметрыСеансаПлагина();
	
	Если НастройкиСеанса.ВидеоЗаписьНачалась = Неопределено
		ИЛИ НЕ НастройкиСеанса.ПлагинОбнаружен Тогда
		Возврат;
	КонецЕсли;
	
	ДлительностьВидеозаписи = 0;
	
	Попытка
		
		ЕстьОшибка = РезультатОбмена.Итог <> Неопределено И РезультатОбмена.Итог.Свойство("РезультатыОтправкиПолучения")
				И РезультатОбмена.Итог.РезультатыОтправкиПолучения <> Неопределено
				И РезультатОбмена.Итог.РезультатыОтправкиПолучения.Свойство("Неудачные")
				И РезультатОбмена.Итог.РезультатыОтправкиПолучения.Неудачные <> Неопределено
				И РезультатОбмена.Итог.РезультатыОтправкиПолучения.Неудачные.Количество();
		ОбъектыУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыВыполненияДействий.ОбъектыДействий,
			"ОбъектыУчета",
			Новый Массив);

		ТекущиеНастройки = ЭлектронноеАктированиеЕИСГИСНРВызовСервера.НастройкиОбменаДокументовДляГИСНР(ОбъектыУчета);
		Для Каждого СтрокаКлюча Из ТекущиеНастройки Цикл
			ДлительностьВидеозаписи = ?(ЕстьОшибка, 1, 0)
				* Макс(ДлительностьВидеозаписи, СтрокаКлюча.Значение.ДлительностьВидеозаписи);
		КонецЦикла;
		
		Если ЕстьОшибка И ДлительностьВидеозаписи = 0 Тогда
			ДлительностьВидеозаписи = 60;
		КонецЕсли;
		
	Исключение
		ДлительностьВидеозаписи = 0;
		
	КонецПопытки;
	
	ОкончаниеОперацииЛогирования(Неопределено, "", ДлительностьВидеозаписи);
	
КонецПроцедуры

// Обертка для операции интерактивного окончания обмена документов с сервисом ЕИС
//
// Параметры:
//  ПараметрыОперации    - Структура
//                       - Неопределено
//  ТекстОшибки          - Строка - текст ошибки которая возникла процессе обмена
//  ЭтоОшибкаЭДО         - Число
//
Процедура ОкончаниеОперацииЛогирования(ПараметрыОперации = Неопределено, ТекстОшибки = "", ЭтоОшибкаЭДО = 0) Экспорт
	
	НастройкиСеанса = ПараметрыСеансаПлагина();
	
	Если ЭтоОшибкаЭДО > 0 Тогда
		НастройкиСеанса.ВидеоЗаписьПрервалась = ОбщегоНазначенияКлиент.ДатаУниверсальная() + ЭтоОшибкаЭДО;
	Иначе
		НастройкиСеанса.ВидеоЗаписьПрервалась = ОбщегоНазначенияКлиент.ДатаУниверсальная() - 1;
	КонецЕсли;
	
	Если НастройкиСеанса.ВидеоЗаписьНачалась = Неопределено
		ИЛИ НЕ НастройкиСеанса.ПлагинОбнаружен Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСеанса.ВидеоЗаписьНачалась = Неопределено;
	
	Если ПараметрыОперации <> Неопределено Тогда
		ОбработкаТаймера(ТекстОшибки, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

// Служебный идентификатор, используемый для работы таймера
//
// Возвращаемое значение:
//  Строка - константа
//
Функция ИдентификаторТаймера() Экспорт
	
	Возврат "ЭлектронноеАктированиеЕИС_Таймер";
	
КонецФункции

// Служебный номер порта, используемый по умолчанию в плагине ГИС НР
//
// Возвращаемое значение:
//  Число - номер IP порта 
//
Функция НомерПортаПоУмолчанию() Экспорт
	
	ТекущийПорт = Null;
	
	#Если НЕ ВебКлиент Тогда
		
		Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
			Попытка
				ОбъектСвойств
					= ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");

				// Читаем значение ключа StartDate из ветки HKEY_CURRENT_USER\Software\AppDataLow\nr_plugin
				ОбъектСвойств.GetStringValue(
					"2147483649",
					"Software\AppDataLow\nr_plugin",
					"PLUGIN_COMMAND_PORT",
					ТекущийПорт);
			Исключение
				ТекущийПорт = Null;
			КонецПопытки;
		КонецЕсли;
	
	#КонецЕсли
	
	Если ТекущийПорт = Null Тогда
		Результат = 9822;
	Иначе
		Результат = Число(ТекущийПорт);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возращает состояние переменной сеанса
//
// Возвращаемое значение:
//  Структура:
//    * Порт                  - Число
//                            - Неопределено
//    * СлужебнаяФорма        - ФормаКлиентскогоПриложения
//                            - Неопределено
//    * ВидеоЗаписьНачалась   - Неопределено
//                            - Дата
//    * ВидеоЗаписьПрервалась - Неопределено
//                            - Дата
//    * ПлагинОбнаружен       - Булево
//    * ВопросЗадан           - Булево
//                            - Неопределено
//    * Документы             - Соответствие из КлючИЗначение:
//      ** Ключ               - ДокументСсылка
//      ** Значение           - Булево
//
Функция ПараметрыСеансаПлагина() Экспорт
	
	Результат = ПараметрыПриложения[ИмяНастройкиПользователя()];

	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("ПлагинОбнаружен", Истина);
		Результат.Вставить("СлужебнаяФорма", Неопределено);
		Результат.Вставить("ВидеоЗаписьНачалась", Неопределено);
		Результат.Вставить("ВидеоЗаписьПрервалась", Неопределено);
		Результат.Вставить("Порт", Неопределено);
		Результат.Вставить("Документы", Новый Соответствие());
		Результат.Вставить("ВопросЗадан", Неопределено);
		ПараметрыПриложения[ИмяНастройкиПользователя()] = Результат;
	КонецЕсли;
	
	Если Результат.Порт = Неопределено Тогда
		НовоеЗначение = ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормЗагрузить(
				ИмяНастройкиПользователя(), "Порт", Неопределено);
		Результат.Вставить("Порт", НовоеЗначение);
	КонецЕсли;
	
	Если Результат.Порт = Неопределено Тогда
		Результат.Вставить("Порт", НомерПортаПоУмолчанию());
	КонецЕсли;
	
	Если Результат.ВопросЗадан = Неопределено Тогда
		НовоеЗначение =  ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормЗагрузить(
			ИмяНастройкиПользователя(), "ВопросЗадан", Ложь);
		Результат.Вставить("ВопросЗадан", НовоеЗначение);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает наименование оповещения об изменении настроек плагина ГИС НР
// 
// Возвращаемое значение:
//  Строка - константа
//
Функция ИмяОповещенияИзменениеНастройкиПлагина() Экспорт
	
	Возврат "ЭлектронноеАктированиеЕИС_НастройкиПлагина";
	
КонецФункции

// Производит запись настроек пользователя для ГИС НР
//
// Параметры:
//  ИмяНастройки - Строка
//  ТекущееЗначение - Произвольный
//
Процедура ЗаписатьНастройкиСеанса(ИмяНастройки, ТекущееЗначение) Экспорт
	
	ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормСохранить(
			ИмяНастройкиПользователя(),
			ИмяНастройки,
			ТекущееЗначение);
			
	ТекущиеНастройки = ПараметрыСеансаПлагина();
	ТекущиеНастройки.Вставить(ИмяНастройки, ТекущееЗначение);
	
КонецПроцедуры

#Область HTTPЗапросыПлагина

// Функция клиентского взаимодействия с ГИС НР по HTTP, включает видеозапись экрана
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе выполняется без ожидания
//  ИдентификаторЗаписи  - Строка - допускаются только латинские символы и цифры в ID
//  ЗаголовокОкна        - Строка - необязательный параметр с заголовком окна 1С (или часть заголовка), 
//							этот заголовок используется для определения экрана, на котором производить видеозапись.
//							Если окно с указанным заголовком не найдено, производится видеозапись на экране
//							по умолчанию.
//
// Возвращаемое значение:
//   см. ОтветПлагинаВидеозаписи
//
Асинх Функция ВидеоЗаписьВключить(ОповещениеЗавершения, ИдентификаторЗаписи, ЗаголовокОкна = "") Экспорт
	
	Попытка
		Результат = Ждать ВидеоЗаписьДоступность();
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("documentId", ИдентификаторЗаписи);
		Если ЗначениеЗаполнено(ЗаголовокОкна) Тогда
			ПараметрыОперации.Вставить("windowHeader", ЗаголовокОкна);
		КонецЕсли;
		
		Результат = Ждать ВидеоЗаписьСостояниеПлагина(Неопределено);
		
		Если НЕ Результат.Ошибка И НЕ Результат.СертификатВыбран Тогда
			Результат = ОтветПлагинаВидеозаписи(НСтр("ru = 'Укажите сертификат для подписи видеозаписи в настройках'"));
		КонецЕсли;
		
		Если НЕ Результат.Ошибка Тогда
			Результат = Ждать ВидеоЗаписьОперацияСервиса("external_startVideo", ПараметрыОперации);
		КонецЕсли;
		
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, отключает видеозапись экрана
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//
// Возвращаемое значение:
//  см. ОтветПлагинаВидеозаписи
//
Асинх Функция ВидеоЗаписьОтключить(ОповещениеЗавершения) Экспорт

	Попытка
		Ждать ВидеоЗаписьДоступность();
		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_stopVideo", Неопределено);
		
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, устанавливает новый размер места на диске под видеоролики.
// Размер хранения видеофайлов на диске в МБайт, при превышении размера старое видео будет удаляться.
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//  МаксимальныйРазмер   - Число - размер в МБайт, допустимые значения от 100 до 10240 МБайт
//
// Возвращаемое значение:
//  см. ОтветПлагинаВидеозаписи
//
Асинх Функция ВидеоЗаписьУстановитьМаксимальныйРазмер(ОповещениеЗавершения, МаксимальныйРазмер = 100) Экспорт

	Попытка
		Ждать ВидеоЗаписьДоступность();

		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_setVideoStorageSizeMb",
						Новый Структура("size", МаксимальныйРазмер));
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, сводная функция проверки работоспособности плагина
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//  ВключитьИнформацию   - Булево - дополняет результат допонительными данными о плагине
//
// Возвращаемое значение:
//  Структура :
//    * Порт                  - Число 
//                            - Неопределено
//    * ПлагинОбнаружен       - Булево
//    * ВидеозаписьДоступна   - Булево
//    * СертификатВыбран      - Булево
//    * ОшибкаЭП              - Булево
//    * МаксимальныйРазмер    - Число
//    * ЕстьОбновление        - Булево
//    * Ошибка                - Булево
//    * ТекстОшибки           - Строка
//    * ВидПроблемы           - Число - см. ЭлектронноеАктированиеЕИСГИСНР.ОписаниеПроблемПлагина
//
Асинх Функция ВидеоЗаписьИнициализация(ОповещениеЗавершения, ВключитьИнформацию = Истина) Экспорт
	
	ПлагинПроблемы = 0;
	ТекущиеНастройки = ПараметрыСеансаПлагина();

	Результат = Новый Структура;

	Результат.Вставить("Порт", ТекущиеНастройки.Порт);
	Результат.Вставить("ПлагинОбнаружен", Ложь);
	Результат.Вставить("ВидеозаписьДоступна", Ложь);
	Результат.Вставить("СертификатВыбран", Ложь);
	Результат.Вставить("ОшибкаЭП", Ложь);
	Результат.Вставить("ЕстьОбновление", Ложь);
	Результат.Вставить("МаксимальныйРазмер", 0);
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ВидПроблемы", 0);
	
	РезультатВызова = Ждать ВидеоЗаписьСостояниеПлагина(Неопределено, Ложь);
	
	Попытка
		ЗаполнитьЗначенияСвойств(Результат, РезультатВызова);
		Результат.ПлагинОбнаружен = РезультатВызова.Выполнено;
		
		ТекущиеНастройки.ПлагинОбнаружен = РезультатВызова.Выполнено;
		
		Если ВключитьИнформацию И Результат.ПлагинОбнаружен Тогда
			РезультатЗапроса = Ждать ВидеоЗаписьУстановленныйМаксимальныйРазмер(Неопределено);
			Если НЕ РезультатЗапроса.Ошибка Тогда
				Результат.МаксимальныйРазмер = РезультатЗапроса.МаксимальныйРазмер;
			КонецЕсли;

			РезультатЗапроса = Ждать ВидеоЗаписьНаличиеОбновленияПлагина(Неопределено);
			Если НЕ РезультатЗапроса.Ошибка Тогда
				Результат.ЕстьОбновление = РезультатЗапроса.ЕстьОбновление;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ПлагинПроблемы = 7;
		
	КонецПопытки;
	
	Если ПлагинПроблемы = 0 Тогда
		Если НЕ Результат.ПлагинОбнаружен Тогда
			ПлагинПроблемы = 1;
		ИначеЕсли НЕ Результат.СертификатВыбран Тогда
			ПлагинПроблемы = 3;
		ИначеЕсли Результат.ОшибкаЭП Тогда
			ПлагинПроблемы = 4;
		ИначеЕсли Результат.ЕстьОбновление Тогда
			ПлагинПроблемы = 5;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ВидПроблемы = ПлагинПроблемы;
	
	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обработчики_ОписаниеОповещения

// Служебная продолжение для НачалоОперацииЛогирования
//
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыЦикла  - Структура
//
// Возвращаемое значение:
//  Булево - Истина, если успешно
//
Асинх Функция НачалоОперацииЛогированияПродолжение(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Результат = Истина;
	
	Если РезультатВызова <> Неопределено Тогда
		ЗаписатьНастройкиСеанса("ВопросЗадан", Истина);
		ТекущиеНастройки = ПараметрыСеансаПлагина();
		ТекущиеНастройки.ВопросЗадан = Истина;
	КонецЕсли;
	
	Если РезультатВызова = "Да" Тогда
		ЭлектронноеАктированиеЕИСГИСНРВызовСервера.ИзменитьНастройкиОбменаДляГИСНР(
			ПараметрыЦикла.Организация, Истина, Ложь);
		ОповещениеПродолжения = Новый ОписаниеОповещения(
			"НачалоОперацииЛогированияПроверка",
			ЭтотОбъект,
			ПараметрыЦикла);
		ВидеоЗаписьИнициализация(ОповещениеПродолжения, Ложь);
	ИначеЕсли РезультатВызова = "Прервать" Тогда
		ЭлектронноеАктированиеЕИСКлиент.ОткрытьМастерНастроек(ПараметрыЦикла.Организация, Неопределено);
	ИначеЕсли РезультатВызова = "Нет" Тогда
		НачалоОперацииЛогированияРезультат(ПараметрыЦикла, Ложь);
	Иначе
		Результат = Ждать НачалоОперацииЛогированияПроверка(Неопределено, ПараметрыЦикла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Служебная продолжение для НачалоОперацииЛогирования
//
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыЦикла  - Структура
//
// Возвращаемое значение:
//  Булево - Истина, если успешно
//
Асинх Функция НачалоОперацииЛогированияПроверка(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ЗапускОперации = Истина;
	Результат = Истина;
	
	Если РезультатВызова <> Неопределено Тогда
		ЗапускОперации = РезультатВызова.ПлагинОбнаружен;
		Если ЗапускОперации Тогда
			ЭлектронноеАктированиеЕИСГИСНРВызовСервера.ИзменитьНастройкиОбменаДляГИСНР(
				ПараметрыЦикла.Организация, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапускОперации Тогда
		ОповещениеПродолжения = Новый ОписаниеОповещения(
			"НачалоОперацииЛогированияЗавершение",
			ЭтотОбъект,
			ПараметрыЦикла);
		
		ПояснениеЗаголовок = НСтр("ru = 'Включена видеозапись'");
		ПояснениеСодержание = НСтр("ru = 'Перейти к настройкам видеозаписи'");

		УведомитьПользователя(ПояснениеЗаголовок, ПояснениеСодержание, ПараметрыЦикла);
		Ждать НачатьВидеоФиксацию(ОповещениеПродолжения, ПараметрыЦикла);
	Иначе
		НачалоОперацииЛогированияРезультат(ПараметрыЦикла, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Служебная продолжение для НачалоОперацииЛогирования
//
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыЦикла  - Структура
//
Процедура НачалоОперацииЛогированияЗавершение(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова.Ошибка Тогда
		
		Если ДополнительноИнформироватьПользователя() Тогда
			ВариантыОтвета = Новый СписокЗначений;
			ВариантыОтвета.Добавить("Да", НСтр("ru = 'Продолжить без видеозаписи'"));
			ВариантыОтвета.Добавить("Прервать", НСтр("ru = 'Настройки'"));
			
			ТекстВопроса = НСтр("ru = 'Возникла ошибка при попытке включить видеозапись отправки документа.'")
				+ Символы.ПС
				+ НСтр("ru = 'Содержимое ошибки: <span style=""color: ЦветТекстаВажнаяНадписьЭлАктированиеЕИС"">'")
				+ РезультатВызова.ТекстОшибки + НСтр("ru = '</span>'")
				+ Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Отправить документ без включения видеозаписи действий?'");
			
			ОписаниеВопроса = Новый ОписаниеОповещения("НачалоОперацииЛогированияОшибка", ЭтотОбъект, ПараметрыЦикла);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокКоманд", ВариантыОтвета);
			ПараметрыФормы.Вставить("Режим", "Ошибка");
			ПараметрыФормы.Вставить("Ширина", 60);
			ПараметрыФормы.Вставить("ТекстФормы", СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстВопроса));
			ЭлектронноеАктированиеЕИСКлиент.ОткрытьФормуИнформации(ПараметрыФормы, ОписаниеВопроса);
		КонецЕсли;

		ОкончаниеОперацииЛогирования(ПараметрыЦикла, РезультатВызова.ТекстОшибки);

	Иначе
		НачалоОперацииЛогированияРезультат(ПараметрыЦикла, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная продолжение для НачалоОперацииЛогирования
//
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыЦикла  - Структура
//
Процедура НачалоОперацииЛогированияОшибка(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова = "Да" Тогда
		ВыполнитьОбработкуОповещения(ПараметрыЦикла.ОповещениеЗавершения, Ложь);
	ИначеЕсли РезультатВызова = "Прервать" Тогда
		ЭлектронноеАктированиеЕИСКлиент.ОткрытьМастерНастроек(ПараметрыЦикла.Организация, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоОперацииЛогированияРезультат(ПараметрыЦикла, РезультатВызова)
	
	Если ПараметрыЦикла.Документы <> Неопределено ИЛИ ПараметрыЦикла.Документы.Количество() > 0 Тогда
		ТекущиеПараметры = ПараметрыСеансаПлагина();
		Для Каждого СтрокаМассива Из ПараметрыЦикла.Документы Цикл
			ТекущиеПараметры.Документы.Вставить(СтрокаМассива, РезультатВызова);
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЦикла.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыЦикла.ОповещениеЗавершения, РезультатВызова);
	КонецЕсли;
	
КонецПроцедуры

// Служебная, используется в связке с НачалоОперацииЛогирования
// 
// Параметры:
//  Результат         - Произвольный
//  ПараметрыЦикла    - Структура
//
Процедура ОбработкаТаймера(Результат, ПараметрыЦикла) Экспорт
	
	НастройкиСеанса = ПараметрыСеансаПлагина();
	Если Результат = Истина Тогда
		Если НастройкиСеанса.ВидеоЗаписьПрервалась <> Неопределено 
			И ОбщегоНазначенияКлиент.ДатаУниверсальная() > НастройкиСеанса.ВидеоЗаписьПрервалась Тогда
			ВидеоЗаписьОтключить(Неопределено);
			НастройкиСеанса.ВидеоЗаписьПрервалась = Неопределено;
			ОтключитьТаймер("");
		Иначе
			ВидеоЗаписьСостояниеПлагина(Неопределено);
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда
		ПараметрыЦикла.Результат = 1;
		ПояснениеЗаголовок = НСтр("ru = 'Ошибка видеозаписи'");
		ПояснениеСодержимое = НСтр("ru = 'Ошибка:'") + " " + Результат
				+ Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Перейти к настройкам видеозаписи'");
	Иначе
		ПараметрыЦикла.Результат = 0;
		ПояснениеЗаголовок = НСтр("ru = 'Завершена видеозаписи'");
		ПояснениеСодержимое = НСтр("ru = 'Просмотреть ролики'");
	КонецЕсли;
				
	УведомитьПользователя(ПояснениеЗаголовок, ПояснениеСодержимое, ПараметрыЦикла);
	
КонецПроцедуры

// Служебная, константа периода минимальной длительности видеозаписи ролика
//
// Возвращаемое значение:
//  Число - секунды
//
Функция ПериодОпросаТаймераВидеозаписи()
	
	Возврат 5;
	
КонецФункции

// Служебная, используется в связке НачалоОперацииЛогирования и уведомлениях пользователя
// 
// Параметры:
//  ПараметрыОперации - Структура:
//    * Результат          - Число
//    * ИдентификаторВидео - Строка
//    * Организация        - СправочникСсылка.Организации
//                         - Неопределено
//
Процедура УправлениеВидеозаписью(ПараметрыОперации) Экспорт
	
	Если ПараметрыОперации.Результат = 0 Тогда // нужна задержка 10 секунды
		ОбработкаОткрытия = Новый ОписаниеОповещения("УправлениеВидеозаписьюЗавершение", ЭтотОбъект, ПараметрыОперации);
		ВключитьТаймер(
			ОбработкаОткрытия,
			ПериодОпросаТаймераВидеозаписи(),
			Ложь,
			НСтр("ru = 'Ожидание ответа плагина'"));
	Иначе
		ВидеоЗаписьОтключить(Неопределено);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ПараметрыОперации.Организация);
		ПараметрыФормы.Вставить("Документы", ПараметрыОперации.Документы);
		ПараметрыФормы.Вставить("ОшибкаЗапуска", ПараметрыОперации.Результат = 1);
		ОткрытьФормуНастроекВидеозаписи(ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Служебная, продолжение УправлениеВидеозаписью
//
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыОперации - Структура
//
Процедура УправлениеВидеозаписьюЗавершение(РезультатВызова, ПараметрыОперации) Экспорт
	
	ВидеоЗаписьОткрытьВидеоПлеер(Неопределено, ПараметрыОперации.ИдентификаторВидео);
	
КонецПроцедуры

// Служебная, продолжение ОткрытьНавигационнуюСсылку
//
// Параметры:
//  РезультатВызова - Структура
//  ПараметрыОперации - Структура
//
Процедура ОткрытьНавигационнуюСсылкуЗавершение(РезультатВызова, ПараметрыОперации) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВызова, "Ошибка", Истина) Тогда
		ПоказатьФормуОшибок(СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				"<b>" + НСтр("ru = 'Возникла ошибка'") + "</b>"
				+ Символы.ПС + Символы.ПС
				+ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВызова, "ТекстОшибки", "")),
				НСтр("ru = 'Ошибка открытия'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область HTTPЗапросыПлагина_Служебное

// Функция клиентского взаимодействия с ГИС НР по HTTP, возвращает текущее состояние плагина.
// Функция также используется для управления состоянием записи,должна регулярно вызываться
// (не реже раза в минуту), иначе видеозапись будет выключена по таймауту.
// 
// Параметры:
//  ОповещениеЗавершения        - ОписаниеОповещения - работает со "старой" нотации ассинхронности, 
//  							см. возвращаемое значение
//                              - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                              выполняться без ожидания
//  Проверять                   - Булево - отключает предварительную проверку запросов
//
// Возвращаемое значение:
//   Структура - см. ОтветПлагинаВидеозаписи, дополнительные поля:
//    * ПлагинОбнаружен - Булево
//    * ВидеозаписьДоступна - Булево
//    * СертификатВыбран - Булево
//    * ОшибкаЭП - Булево
//
Асинх Функция ВидеоЗаписьСостояниеПлагина(ОповещениеЗавершения, Проверять = Истина)
	
	Попытка
		Если Проверять Тогда
			Ждать ВидеоЗаписьДоступность();
		КонецЕсли;

		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_status", Неопределено);
		Результат.Вставить("ПлагинОбнаружен", Результат.Выполнено);
		Результат.Вставить("ВидеозаписьДоступна", Ложь);
		Результат.Вставить("СертификатВыбран", Ложь);
		Результат.Вставить("ОшибкаЭП", Ложь);
		
		Если Результат.Выполнено И НЕ Результат.Ошибка Тогда
			Результат.ВидеозаписьДоступна = Результат.ТекущийОбъект["state"] = "idle";
			Результат.СертификатВыбран = Результат.ТекущийОбъект["certificateSelected"] = Истина;
			Результат.ОшибкаЭП = Результат.ТекущийОбъект["signError"] = Истина;
			Результат.ТекстОшибки = Результат.ТекущийОбъект["state"];
		КонецЕсли;
		
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;
	
КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, указывает новый сертификат ЭП для видеороликов
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//  Отпечаток            - Строка - отпечаток вновь устанавливаемого сертификата для ЭП
//  ПинКод               - Строка - обязательный, если у закрытого ключа сертификата установлен
//
// Возвращаемое значение:
//  Структура - см. ОтветПлагинаВидеозаписи
//
Асинх Функция ВидеоЗаписьУстановитьТекущийСертификат(ОповещениеЗавершения, Отпечаток, ПинКод = "")
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("thumbprint", Отпечаток);
	Если ЗначениеЗаполнено(ПинКод) Тогда
		ПараметрыОперации.Вставить("pin", ПинКод);
	КонецЕсли;
	
	Попытка
		Ждать ВидеоЗаписьДоступность();
		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_selectCertificate", ПараметрыОперации);
		
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, прочитать текущее ограничение места на диске под видеоролики
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//
// Возвращаемое значение:
//  Структура - см. ОтветПлагинаВидеозаписи, дополнительные поля:
//    * МаксимальныйРазмер - Число - размер в мегабайтах
//
Асинх Функция ВидеоЗаписьУстановленныйМаксимальныйРазмер(ОповещениеЗавершения)

	Попытка
		Ждать ВидеоЗаписьДоступность();

		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_getVideoStorageSizeMb", Неопределено);
		Результат.Вставить("МаксимальныйРазмер", 0);
		Если НЕ Результат.Ошибка Тогда
			Результат.МаксимальныйРазмер = Результат.ТекущийОбъект["size"];
		КонецЕсли;
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, проверяет наличие новой версии плагина
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//
// Возвращаемое значение:
//  Структура - см. ОтветПлагинаВидеозаписи, дополнительные поля:
//    * ЕстьОбновление - Булево
//
Асинх Функция ВидеоЗаписьНаличиеОбновленияПлагина(ОповещениеЗавершения)

	Попытка
		Ждать ВидеоЗаписьДоступность();

		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_hasUpdate", Неопределено);
		Результат.Вставить("ЕстьОбновление", Ложь);
		Если НЕ Результат.Ошибка Тогда
			Результат.ЕстьОбновление = Результат.ТекущийОбъект["updateAvailable"] = Истина;
		КонецЕсли;
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, запускает обновление плагина
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//
// Возвращаемое значение:
//  Структура - см. ОтветПлагинаВидеозаписи, дополнительные поля
//
Асинх Функция ВидеоЗаписьНачатьОбновлениеПлагина(ОповещениеЗавершения)

	Попытка
		Ждать ВидеоЗаписьДоступность();

		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_doUpdate", Неопределено);

	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

Асинх Функция НачатьВидеоФиксацию(ОповещениеЗавершения, ПараметрыЦикла)
	
	РезультатВызова = Ждать ВидеоЗаписьИнициализация(Неопределено, Ложь);
	ТекстОшибки = "";
	
	Если РезультатВызова.Ошибка ИЛИ НЕ РезультатВызова.ВидеозаписьДоступна Тогда
		ТекстОшибки = РезультатВызова.ТекстОшибки;
	ИначеЕсли НЕ РезультатВызова.СертификатВыбран Тогда
		ТекстОшибки = НСтр("ru = 'В настройках не указан сертификат ЭП'");
	Иначе
		РезультатВызова = Ждать ВидеоЗаписьВключить(ОповещениеЗавершения, ПараметрыЦикла.ИдентификаторВидео);
		Если РезультатВызова.Ошибка Тогда
			ТекстОшибки = РезультатВызова.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОкончаниеОперацииЛогирования(ПараметрыЦикла, ТекстОшибки);
	Иначе
		НастройкиСеанса = ПараметрыСеансаПлагина();
		НастройкиСеанса.ВидеоЗаписьНачалась = ОбщегоНазначенияКлиент.ДатаУниверсальная();
		Обслуживание = Новый ОписаниеОповещения("ОбработкаТаймера", ЭтотОбъект, ПараметрыЦикла);
		ВключитьТаймер(Обслуживание, ПериодОпросаТаймераВидеозаписи(), Истина);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеЗавершения, РезультатВызова);
	
	Возврат РезультатВызова;
	
КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, вызывает встроенный в плагин
// диалог выбора сертификата, используемый для формирования ЭП к файлам видеозаписей экрана
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//
// Возвращаемое значение:
//  Структура - см. ОтветПлагинаВидеозаписи
//
Асинх Функция ВидеоЗаписьДиалогВыбораСертификата(ОповещениеЗавершения)
	
	Попытка
		Ждать ВидеоЗаписьДоступность();
		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_dialogSelectCertificate", Неопределено);
		
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;
	
КонецФункции

// Функция клиентского взаимодействия с ГИС НР по HTTP, открывает встроенную в плагин форму проигрывателя видеороликов
// 
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - работает со "старой" нотации ассинхронности, см. возвращаемое значение
//                       - Неопределено - в этом случае должна вызываться через Ждать, иначе будет
//                       выполняться без ожидания
//  ИдентификаторЗаписи  - Строка - если задан, то в списке проигрывателя пользователю отображается только он
//
// Возвращаемое значение:
//  Структура - см. ОтветПлагинаВидеозаписи
//
Асинх Функция ВидеоЗаписьОткрытьВидеоплеер(ОповещениеЗавершения, ИдентификаторЗаписи = "")

	Попытка
		Ждать ВидеоЗаписьДоступность();
		
		ПараметрыОперации = Неопределено;
		Если ЗначениеЗаполнено(ИдентификаторЗаписи) Тогда
			ПараметрыОперации = Новый Структура("documentId", ИдентификаторЗаписи);
		КонецЕсли;
		
		Результат = Ждать ВидеоЗаписьОперацияСервиса("external_viewVideo", ПараметрыОперации);
		
	Исключение
		Результат = ОтветПлагинаВидеозаписи(
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	СформироватьОтвет(ОповещениеЗавершения, Результат);
	
	Возврат Результат;

КонецФункции

Асинх Функция ВидеоЗаписьДоступность()

	ТекущееСостояние = ПараметрыСеансаПлагина();
	Если ТекущееСостояние = Неопределено Тогда
		ТекущееСостояние = Ждать ВидеоЗаписьИнициализация(Неопределено, Ложь);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущееСостояние.Порт) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение порта'");
	ИначеЕсли НЕ ТекущееСостояние.ПлагинОбнаружен Тогда
		ВызватьИсключение НСтр("ru = 'Плагин видеозаписи не обнаружен'");
	КонецЕсли;
	
	Возврат ТекущееСостояние;
	
КонецФункции

Асинх Функция ВидеоЗаписьОперацияСервиса(ТекущаяКоманда, ПараметрыОперации)
	
	Результат = Неопределено;
	ВсеПараметры = ПараметрыСеансаПлагина();
	
	Если ВсеПараметры <> Неопределено Тогда
		ОбъектТела = Новый Структура("cmd, params", ТекущаяКоманда, ПараметрыОперации);
		СодержимоеТела = JSONИзОбъекта(ОбъектТела);
		
		СоединениеДляПлагина = Новый HTTPСоединение(АдресСервера(), ВсеПараметры.Порт, , , , 1);
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

		НовыйЗапроса = Новый HTTPЗапрос("command", Заголовки);
		НовыйЗапроса.УстановитьТелоИзСтроки(СодержимоеТела);
		
		Ответ = Ждать СоединениеДляПлагина.ВызватьHTTPМетодАсинх("POST", НовыйЗапроса);
		Если Ответ.КодСостояния < 300 Тогда
			Результат = JSONВОбъект(Ответ.ПолучитьТелоКакСтроку());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтветПлагинаВидеозаписи(Результат);
	
КонецФункции

Процедура СформироватьОтвет(ОповещениеЗавершения, Результат)
	
	Результат.Удалить("ТекущийОбъект");
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Типовой ответ для функций плагина видеозаписи
//
// Параметры:
//  ТекущийОбъект - Произвольный
//
// Возвращаемое значение:
//  Структура:
//    * Выполнено     - Булево
//    * Ошибка        - Булево
//    * ТекстОшибки   - Строка
//    * ТекущийОбъект - Соответствие из КлючИЗначение
//                    - Строка
//                    - Массив из Произвольный
//                    - Произвольный
//                    - Неопределено
// 
Функция ОтветПлагинаВидеозаписи(ТекущийОбъект = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", ТипЗнч(ТекущийОбъект) = Тип("Соответствие"));
	Результат.Вставить("Ошибка", Истина);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ТекущийОбъект", ТекущийОбъект);
	
	Если ТекущийОбъект = Неопределено Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Запрос не выполнен'");
	ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("Строка") Тогда
		Результат.ТекстОшибки = ТекущийОбъект;
	ИначеЕсли ТекущийОбъект["status"] <> "OK" Тогда
		Результат.ТекстОшибки = ТекущийОбъект["message"];
	Иначе
		Результат.Ошибка = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АдресСервера()
	
	Возврат "127.0" + ".0.1";
	
КонецФункции

#КонецОбласти

#Область ОбработкаJSON

// Формирует текстовое представление JSON из объектов 1С
//
// Параметры:
//  ПараметрСтруктура - Массив из Произвольный
//                    - Структура
//                    - Строка
//                    - Число
//                    - Булево
//
// Возвращаемое значение:
//  Строка - текстовое содержимое
//
Функция JSONИзОбъекта(ПараметрСтруктура)
	
	Результат = "";
	СборкаJSONПростой(ПараметрСтруктура, Результат);
	
	Возврат Результат;
	
КонецФункции

// Формирует объект 1С из текстового представления JSON
//
// Параметры:
//  Текст - Строка
//
// Возвращаемое значение:
//  - Массив из Произвольный - полученный объект
//  - Соответствие из КлючИЗначение - полученный объект:
//    * Ключ - Строка
//    * Значение - Произвольный
//
Функция JSONВОбъект(Текст)
	
	НовыйТекст = СокрЛП(Текст);
	Результат = Неопределено;
	Ошибка = Ложь;
	
	Попытка
		ПервыйСимвол = Лев(НовыйТекст, 1);
		Если ПервыйСимвол = "{" Тогда
			Результат = Новый Соответствие;
			РазборJSONПростой(НовыйТекст, 2, 0, Результат, Ошибка);
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Результат = Новый Массив;
			РазборJSONПростой(НовыйТекст, 2, 1, Результат, Ошибка);
		Иначе
			Ошибка = Истина;
		КонецЕсли;
	Исключение
		Ошибка = Истина;
	КонецПопытки;
	
	Если Ошибка Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Без учета экранированных символов
// 
// Параметры:
//  ОбъектСериализации - Массив из Произвольный
//                    - Структура
//                    - Строка
//                    - Число
//                    - Булево
//  Результат - Строка
//
Процедура СборкаJSONПростой(ОбъектСериализации, Результат)
	
	Первый = "";
	ТекущийТип = ТипЗнч(ОбъектСериализации);
	
	Если ТекущийТип = Тип("Массив") Тогда
		Результат = Результат + "[";
		Для Каждого СтрокаМассива Из ОбъектСериализации Цикл
			Результат = Результат + Первый;
			СборкаJSONПростой(СтрокаМассива, Результат);
			Первый = ",";
		КонецЦикла;
		Результат = Результат + "]";
		
	ИначеЕсли ТекущийТип = Тип("Структура") ИЛИ ТекущийТип = Тип("Соответствие") Тогда
		Результат = Результат + "{";
		Для Каждого СтрокаКлюча Из ОбъектСериализации Цикл
			Результат = Результат + Первый + """" + СтрокаКлюча.Ключ + """:";
			СборкаJSONПростой(СтрокаКлюча.Значение, Результат);
			Первый = ",";
		КонецЦикла;
		Результат = Результат + "}";
		
	ИначеЕсли ТекущийТип = Тип("Булево") Тогда 
		Результат = Результат + ?(ОбъектСериализации = Истина, "true", "false");
		
	ИначеЕсли ТекущийТип = Тип("Число") Тогда 
		Результат = Результат + Формат(ОбъектСериализации, "ЧГ=0");

	ИначеЕсли ОбъектСериализации = Неопределено ИЛИ ОбъектСериализации = Null Тогда 
		Результат = Результат + "null";
		
	Иначе
		Результат = Результат + """" + Строка(ОбъектСериализации) + """";

	КонецЕсли;
	
КонецПроцедуры

Процедура РазборJSONПростой(Текст, Позиция, Родитель, ТекущееЗначение, Ошибка)
	
	ТекущееНаправление = НаправлениеПоиска.СНачала;
	ПустаяПозиция = НеНайденаПозиция();
	Переключатель = Родитель;
	
	Пока Позиция < СтрДлина(Текст) И НЕ Ошибка Цикл
	
		НовоеЗначение = Неопределено;
		ЧетвертаяПозиция = ПустаяПозиция;
		ИмяКлюча = "";
		
		Если Переключатель = 0 Тогда // работа с началом ключа
			ПерваяПозиция = СтрНайти(Текст, """", ТекущееНаправление, Позиция);
			Если ПерваяПозиция > 0 Тогда
				Позиция = ПерваяПозиция + 1;
				ИмяКлюча = СтрокаБезЭкранов(Текст, Позиция);
			Иначе
				Ошибка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Переключатель = 0 И НЕ Ошибка Тогда // работа с окончанием ключа
			НашлиПозицию = СтрНайти(Текст, ":", ТекущееНаправление, Позиция);
			Если НашлиПозицию = 0 ИЛИ ИмяКлюча = Неопределено Тогда
				Ошибка = Истина;
			Иначе
				Позиция = НашлиПозицию + 1;
				Переключатель = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если Переключатель = 1 И НЕ Ошибка Тогда // работа с началом значения
			ТретьяПозиция = СтрНайти(Текст, """", ТекущееНаправление, Позиция);
			ТретьяПозиция = Минимум(ТретьяПозиция, СтрНайти(Текст, "[", ТекущееНаправление, Позиция));
			ТретьяПозиция = Минимум(ТретьяПозиция, СтрНайти(Текст, "{", ТекущееНаправление, Позиция));
			ТретьяПозиция_1 = СтрНайти(Текст, "true", ТекущееНаправление, Позиция);
			ТретьяПозиция_2 = СтрНайти(Текст, "false", ТекущееНаправление, Позиция);
			ТретьяПозиция_3 = СтрНайти(Текст, "null", ТекущееНаправление, Позиция);
			ТретьяПозиция = Минимум(ТретьяПозиция, ТретьяПозиция_1, ТретьяПозиция_2, ТретьяПозиция_3);
			ЧетвертаяПозиция =  СтрНайти(Текст, ",", ТекущееНаправление, Позиция);
			ЧетвертаяПозиция = Минимум(ЧетвертаяПозиция, СтрНайти(Текст, "]", ТекущееНаправление, Позиция));
			ЧетвертаяПозиция = Минимум(ЧетвертаяПозиция, СтрНайти(Текст, "}", ТекущееНаправление, Позиция));

			ТекущийСимвол = Сред(Текст, ТретьяПозиция, 1);
			Если ТретьяПозиция = ПустаяПозиция ИЛИ ЧетвертаяПозиция = ПустаяПозиция Тогда
				Ошибка = Истина;
			ИначеЕсли ТретьяПозиция = ТретьяПозиция_1 Тогда
				Позиция = ТретьяПозиция_1 + 4;
				НовоеЗначение = Истина;
			ИначеЕсли ТретьяПозиция = ТретьяПозиция_2 Тогда
				Позиция = ТретьяПозиция_2 + 5;
				НовоеЗначение = Ложь;
			ИначеЕсли ТретьяПозиция = ТретьяПозиция_3 Тогда
				Позиция = ТретьяПозиция_3 + 4;
				НовоеЗначение = Неопределено;
			ИначеЕсли ТекущийСимвол = "{" Тогда
				Позиция = Позиция + 1;
				НовоеЗначение = Новый Соответствие;
				РазборJSONПростой(Текст, Позиция, 0, НовоеЗначение, Ошибка);
			ИначеЕсли ТекущийСимвол = "[" Тогда
				Позиция = Позиция + 1;
				НовоеЗначение = Новый Массив;
				РазборJSONПростой(Текст, Позиция, 1, НовоеЗначение, Ошибка);
			ИначеЕсли ТекущийСимвол = """" И ЧетвертаяПозиция > ТретьяПозиция Тогда
				Позиция = ТретьяПозиция + 1;
				НовоеЗначение = СтрокаБезЭкранов(Текст, Позиция);
				Если НовоеЗначение = Неопределено Тогда
					Ошибка = Истина;
				КонецЕсли;
			Иначе // ожидаем число
				НовоеЗначение = Число(Сред(Текст, Позиция, ЧетвертаяПозиция - Позиция));
				Позиция = ЧетвертаяПозиция;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Ошибка Тогда
			Если ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
				ТекущееЗначение.Добавить(НовоеЗначение);
			Иначе
				ТекущееЗначение.Вставить(ИмяКлюча, НовоеЗначение);
			КонецЕсли;
		КонецЕсли;

		Если Переключатель = 1 И НЕ Ошибка Тогда // работа с окончанием значения
			ЧетвертаяПозиция =  СтрНайти(Текст, ",", ТекущееНаправление, Позиция);
			ЧетвертаяПозиция = Минимум(ЧетвертаяПозиция, СтрНайти(Текст, "]", ТекущееНаправление, Позиция));
			ЧетвертаяПозиция = Минимум(ЧетвертаяПозиция, СтрНайти(Текст, "}", ТекущееНаправление, Позиция));
			Если ЧетвертаяПозиция = ПустаяПозиция Тогда
				Ошибка = Истина;
			ИначеЕсли Сред(Текст, Позиция, 1) = "," Тогда
				Позиция = ЧетвертаяПозиция + 1;
				Переключатель = Родитель;
			Иначе
				Позиция = ЧетвертаяПозиция + 1;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаБезЭкранов(Текст, Позиция)
	
	ТекущееНаправление = НаправлениеПоиска.СНачала;

	НашлиПозицию = СтрНайти(Текст, """", ТекущееНаправление, Позиция);
	Если НашлиПозицию = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВсеЭкраны = Новый Соответствие;
	Результат = "";

	НашлиЭкран = СтрНайти(Текст, "\", ТекущееНаправление, Позиция);
	Если НашлиПозицию > НашлиЭкран И НашлиЭкран > 0 Тогда
		ВсеЭкраны.Вставить("""", """");
		ВсеЭкраны.Вставить("\", "\");
		ВсеЭкраны.Вставить("/", "/");
		ВсеЭкраны.Вставить("b", Символ(8));
		ВсеЭкраны.Вставить("f", Символы.ПФ);
		ВсеЭкраны.Вставить("n", Символы.ПС);
		ВсеЭкраны.Вставить("r", Символы.ВК);
		ВсеЭкраны.Вставить("t", Символы.Таб);
		ВсеЭкраны.Вставить("u", "КодСимвола");
	КонецЕсли;
	
	Пока НашлиПозицию > НашлиЭкран И НашлиЭкран > 0 Цикл
		СледующийСимвол = ВсеЭкраны[Сред(Текст, НашлиЭкран + 1, 1)];
		
		Результат = Результат + Сред(Текст, Позиция, НашлиЭкран - Позиция);
		Позиция = НашлиЭкран + 2; 
		
		Если СледующийСимвол = Неопределено Тогда
			СледующийСимвол = "\";
		ИначеЕсли СледующийСимвол = "КодСимвола" Тогда
			Результат = Результат + Символ(ЧислоИзШестнадцатеричнойСтроки("0x" + Сред(Текст, НашлиЭкран + 2, 4)));
			Позиция = Позиция + 4;
		КонецЕсли;

		НашлиПозицию = СтрНайти(Текст, """", ТекущееНаправление, Позиция);
		НашлиЭкран = СтрНайти(Текст, "\", ТекущееНаправление, Позиция);
		
	КонецЦикла;
	
	Результат = Результат + Сред(Текст, Позиция, НашлиПозицию - Позиция);

	Позиция = НашлиПозицию + 1;

	Возврат Результат;
	
КонецФункции

Функция НеНайденаПозиция()
	
	Возврат 99999999;
	
КонецФункции

Функция Минимум(НовоеЗначение1, НовоеЗначение2, НовоеЗначение3 = 0, НовоеЗначение4 = 0)
	
	ПустаяПозиция = НеНайденаПозиция();
	Возврат Мин(?(НовоеЗначение1 = 0, ПустаяПозиция, НовоеЗначение1),
				?(НовоеЗначение2 = 0, ПустаяПозиция, НовоеЗначение2),
				?(НовоеЗначение3 = 0, ПустаяПозиция, НовоеЗначение3),
				?(НовоеЗначение4 = 0, ПустаяПозиция, НовоеЗначение4));
	
КонецФункции

#КонецОбласти

#Область Прочее

// Служебная реализация таймера, запускает его
//
// Параметры:
//  ОповещениеОбработки  - ОписаниеОповещения - процедура для вызова после каждого события
//  КоличествоСекунд     - Число - длительность каждого тика
//  Периодическое        - Булево - повторяемый тик
//  ОписаниеОперации     - Строка - если не пустая, то выводиться форма ожидания
// 
Процедура ВключитьТаймер(ОповещениеОбработки, КоличествоСекунд, Периодическое = Ложь, ОписаниеОперации = "")
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоСекунд", КоличествоСекунд);
	ПараметрыФормы.Вставить("Повторять", Периодическое);
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторТаймера());
	ПараметрыФормы.Вставить("Обработчик", ОповещениеОбработки);
	ПараметрыФормы.Вставить("ОписаниеОперации", ОписаниеОперации);
	
	ПараметрыОткрытия = Новый Структура("Открывать", НЕ ПустаяСтрока(ОписаниеОперации));
	НастройкиСеанса = ПараметрыСеансаПлагина();
	Если НЕ ПустаяСтрока(ОписаниеОперации) Тогда
		НастройкиСеанса.СлужебнаяФорма = ОткрытьФорму(
			"РегистрСведений.РезультатыОбменаДаннымиСГИСНР.Форма.СлужебныйТаймер",
			ПараметрыОткрытия, ,
			ИдентификаторТаймера(), , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		НастройкиСеанса.СлужебнаяФорма = ОткрытьФорму(
			"РегистрСведений.РезультатыОбменаДаннымиСГИСНР.Форма.СлужебныйТаймер",
			ПараметрыОткрытия, , 
			ИдентификаторТаймера());
	КонецЕсли;
	
	Оповестить("ВключитьТаймер", ПараметрыФормы, ИдентификаторТаймера());
	
КонецПроцедуры

// Возвращает гиперссылку на личный кабинет ЕИС
// 
// Возвращаемое значение:
//  Строка - Гиперссылка
//
Функция ГиперссылкаНаЛКЕИС()

	Возврат "https://zakupki.gov.ru/epz/main/public/home.html"; 
	
КонецФункции

// Выполняет оповещение об окончании операции обмена для формы содержащей переданную структуру
// 
// Параметры:
// 	КонтекстОжиданияОперации - Структура
//
Процедура ОповеститьОбОкончанииОперации(КонтекстОжиданияОперации)
	
	ОповеститьОбОтсутствииОшибки(КонтекстОжиданияОперации);
	
КонецПроцедуры

// Возвращает гиперссылку на информацию по ГИСНР
// 
// Возвращаемое значение:
//  Строка - Гиперссылка на информацию по ГИСНР
//
Функция ГиперссылкаНаИнформациюПоГИСНР()
	
	Возврат "https://zakupki.gov.ru/epz/main/public/independent_registrator.html";
	
КонецФункции

// Возвращает гиперссылку на страницу для скачивания плагина ГИС НР
// 
// Возвращаемое значение:
//  Строка - Гиперссылка
//
Функция ГиперссылкаНаПлагинГИСНР()

	Возврат "https://zakupki.gov.ru/epz/main/public/document/view.html?searchString=&sectionId=2088&strictEqual=false"; 
	
КонецФункции

// Открывает форму журнала регистрации событий ГИС НР
//
// Параметры:
//  ТолькоОшибки - Булево
//  ПараметрыФормы - Неопределено
//                 - Структура
//
Процедура ОткрытьФормуЖурналаРегистрацииСобытийГИСНР(ТолькоОшибки = Ложь, ПараметрыФормы = Неопределено)
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	ПараметрыФормы.Вставить("ТолькоОшибки", ТолькоОшибки);
	ПараметрыФормы.Вставить("ВызовПрограммный", Истина);
	
	ОткрытьФорму("РегистрСведений.РезультатыОбменаДаннымиСГИСНР.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

// Открывает формус настройками для плагина видеофиксации ГИС НР
// 
// Параметры:
//  ПараметрыФормы     - Структура - параметры для открытия формы
//  ВладелецФормы      - ФормаКлиентскогоПриложения
//  ОповещениеЗакрытия - ОписаниеОповещения
//
Процедура ОткрытьФормуНастроекВидеозаписи(
		ПараметрыФормы,
		ВладелецФормы = Неопределено,
		ОповещениеЗакрытия = Неопределено)
	
	РежимФормы = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(
		"РегистрСведений.НастройкиОбменаЕИС.Форма.НастройкиВидеозаписи",
		ПараметрыФормы,
		ВладелецФормы, , , ,
		ОповещениеЗакрытия,
		РежимФормы);

КонецПроцедуры

// Служебный идентификатор имени переменной в клиентском окружении
// 
// Возвращаемое значение:
//  Строка - константа
//
Функция ИмяНастройкиПользователя()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	Возврат "НастройкиПользователяГИСНР" + СокрЛП(ИдентификаторКлиента);
	
КонецФункции

Функция ИдентификаторЛогирования()
	
	Возврат "ВидеофиксацияДействийГИСНР";
	
КонецФункции

Процедура УведомитьПользователя(ПояснениеЗагововок, ПояснениеСодержимое, ПараметрыЦикла)

	Заголовок = ПояснениеЗагововок + " " + НСтр("ru = 'ГИС НР'");
	Статус = СтатусОповещенияПользователя.Информация;
	Если ПараметрыЦикла.Результат = 1 Тогда
		Изображение = БиблиотекаКартинок.ДиалогСтоп;
	ИначеЕсли ПараметрыЦикла.Результат = 2 Тогда
		Изображение = БиблиотекаКартинок.ДиалогВосклицание;
	Иначе
		Изображение = БиблиотекаКартинок.ДиалогИнформация;
	КонецЕсли;
	
	БыстроеУправление = Новый ОписаниеОповещения("УправлениеВидеозаписью", ЭтотОбъект, ПараметрыЦикла);
	
	ПоказатьОповещениеПользователя(
		Заголовок,
		БыстроеУправление,
		ПояснениеСодержимое,
		Изображение,
		Статус,
		ИдентификаторЛогирования());

КонецПроцедуры

// Служебная реализация таймера, принудительно останавливает таймер
//
// Параметры:
//  Параметр - Произвольный
//           - Неопределено
// 
Процедура ОтключитьТаймер(Параметр = Неопределено)
	
	Оповестить("ОтключитьТаймер", Параметр, ИдентификаторТаймера());
	
КонецПроцедуры

Функция ДополнительноИнформироватьПользователя()
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти