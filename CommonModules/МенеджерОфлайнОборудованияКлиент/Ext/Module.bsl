
#Область ПрограммныйИнтерфейс

// Выполнить частичную выгрузку данных на оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   ОтображатьСообщения     - Булево
//
Процедура НачатьВыгрузкуДанныхНаККМ(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ВыгрузкаДанныхНаККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	НаборВыгружаемыхДанных = Новый Структура;
	НаборВыгружаемыхДанных.Вставить("Настройки", Истина);
	НаборВыгружаемыхДанных.Вставить("ПрайсЛист", Истина);
	НаборВыгружаемыхДанных.Вставить("Заказы",	 Истина);
	НаборВыгружаемыхДанных.Вставить("ПолныйПрайсЛист", Ложь);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("НаборВыгружаемыхДанных"  , НаборВыгружаемыхДанных);
	Контекст.Вставить("Команда", "ВыгрузитьДанные");
	
	НачатьВыгрузкуДанныхНаККМПроверкаПодключенияРасширения(ИдентификаторУстройства, Контекст);
	
КонецПроцедуры

// Выполнить полную выгрузку данных на оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   ОтображатьСообщения     - Булево
//
Процедура НачатьПолнуюВыгрузкуПрайсЛистаНаККМ(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ПолнаяВыгрузкаПрайсЛистаНаККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	НаборВыгружаемыхДанных = Новый Структура;
	НаборВыгружаемыхДанных.Вставить("Настройки", Ложь);
	НаборВыгружаемыхДанных.Вставить("ПрайсЛист", Ложь);
	НаборВыгружаемыхДанных.Вставить("Заказы",	 Ложь);
	НаборВыгружаемыхДанных.Вставить("ПолныйПрайсЛист", Истина);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("НаборВыгружаемыхДанных"  , НаборВыгружаемыхДанных);
	Контекст.Вставить("Команда", "ВыгрузитьДанные");
	
	НачатьВыгрузкуДанныхНаККМПроверкаПодключенияРасширения(ИдентификаторУстройства, Контекст);
	
КонецПроцедуры

// Выполнить выгрузку настроек на оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   ОтображатьСообщения     - Булево
//
Процедура НачатьВыгрузкуНастроекНаККМ(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ВыгрузкаНастроекНаККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	НаборВыгружаемыхДанных = Новый Структура;
	НаборВыгружаемыхДанных.Вставить("Настройки", Истина);
	НаборВыгружаемыхДанных.Вставить("ПрайсЛист", Ложь);
	НаборВыгружаемыхДанных.Вставить("Заказы",	 Ложь);
	НаборВыгружаемыхДанных.Вставить("ПолныйПрайсЛист", Ложь);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("НаборВыгружаемыхДанных"  , НаборВыгружаемыхДанных);
	Контекст.Вставить("Команда", "ВыгрузитьНастройки");
	
	НачатьВыгрузкуДанныхНаККМПроверкаПодключенияРасширения(ИдентификаторУстройства, Контекст);
	
КонецПроцедуры

// Выполнить очистку прайс-листа на оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   ОтображатьСообщения     - Булево
//
Процедура НачатьОчисткуПрайсЛистаНаККМ(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ОчисткаПрайсЛистаНаККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	НачатьОчисткуТоваровВККМOffline(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторУстройства);
	
КонецПроцедуры

// Выполнить загрузку данных из оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   ОтображатьСообщения     - Булево
//
Процедура НачатьЗагрузкуДанныхИзККМ(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ЗагрузкаДанныхИзККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("Команда", "ЗагрузитьДанные");
	
	ЭтоПерваяЗагрузкаКассыЭвотор = МенеджерОфлайнОборудованияВызовСервера.ПроверитьИсториюЗагрузкиУстройства(ИдентификаторУстройства);
	
	Если ЭтоПерваяЗагрузкаКассыЭвотор Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
		
		ОткрытьФорму("Справочник.ОфлайнОборудование.Форма.ФормаНастройки1СЭвоторККМОфлайнПроизвольногоПериодаЗагрузки", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		НачатьЗагрузкуДанныхИзККМПроверкаПодключенияРасширения(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Выполнить загрузку данных из оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   НомерСмены              - Число
//   ОтображатьСообщения     - Булево
//
Процедура НачатьЗагрузкуОборотовИзОФД(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, НомерСмены, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ЗагрузкаДанныхИзККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("Команда", "ЗагрузитьОбороты"); 
	Контекст.Вставить("НомерСмены", НомерСмены);
	Контекст.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	НачатьЗагрузкуОборотовИзОФДПродолжение(ИдентификаторУстройства, Контекст);
	
КонецПроцедуры

// Выполнить загрузку данных из оффлайн ККМ
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   НомерСмены              - Число
//   ОтображатьСообщения     - Булево
//
Процедура НачатьЗагрузкуЧековИзОФД(ИдентификаторУстройства,
	УникальныйИдентификатор, ОповещениеПриЗавершении, НомерСмены, ОтображатьСообщения = Истина) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ЗагрузкаДанныхИзККМ";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, ОповещениеПриЗавершении);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("Команда", "ЗагрузитьЧеки");
	Контекст.Вставить("НомерСмены", НомерСмены);
	Контекст.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	НачатьЗагрузкуЧековИзОФДПродолжение(ИдентификаторУстройства, Контекст);
	
КонецПроцедуры

// Открыть форму настройки подключаемого оборудования
//
// Параметры:
//   ПараметрКоманды - Структура
//   ПараметрыВыполненияКоманды - Структура
//
Процедура ОткрытьФормуНастройки(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	// замер производительности
	КлючеваяОперация = "ОбщийМодуль.МенеджерОфлайнОборудованияКлиент.ОткрытьФормуНастройки";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
	
	ПараметрыФормы = Новый Структура();
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#Область ПроцедурыИФункцииРаботыСОборудованиемККМOffline

#Область КомандаВыгрузкаДанных

// Проверить подключение расширения перед выгрузкой данных
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   Параметры - Структура
//
Процедура НачатьВыгрузкуДанныхНаККМПроверкаПодключенияРасширения(ИдентификаторУстройства, Параметры) Экспорт // оповещение
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныхНаККМПродолжение", ЭтотОбъект, Параметры);
		ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
	#Иначе
		// В тонком и толстом клиентах расширение подключено всегда.
		НачатьВыгрузкуДанныхНаККМПродолжение(Истина, Параметры);
	#КонецЕсли
	
КонецПроцедуры

// Обработать результат подключения расширения
//
// Параметры:
//   Подключено - Булево
//   Контекст - Структура
//
Процедура НачатьВыгрузкуДанныхНаККМПродолжение(Подключено, Контекст) Экспорт // оповещение
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Контекст.СледующееОповещение <> Неопределено Тогда
			
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства",
													Ложь, ТекстСообщения, Контекст.ИдентификаторУстройства);
			
			ВыполнитьОбработкуОповещения(Контекст.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется выгрузка данных в ККМ Офлайн...'")); 
	
	ВходныеПараметры = Неопределено;
	
	ВыгрузкаДанных = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныхНаККМЗавершение", ЭтотОбъект, Контекст);
	НачатьВыполнениеКомандыОфлайнОборудования(ОписаниеОповещения, Контекст.ИдентификаторУстройства, Контекст, ВходныеПараметры, ВыгрузкаДанных);
	
КонецПроцедуры

// Обработать результат выполнения команды выгрузка данных
//
// Параметры:
//   РезультатКоманды - Структура
//   Параметры - Структура
//
Процедура НачатьВыгрузкуДанныхНаККМЗавершение(РезультатКоманды, Параметры) Экспорт // оповещение
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
								|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
	Иначе
		
		МенеджерОфлайнОборудованияВызовСервера.ОповеститьОбУдачнойВыгрузке(Параметры.ИдентификаторУстройства, Параметры.НаборВыгружаемыхДанных);
		
		ТекстСообщения = НСтр("ru='Данные успешно выгружены'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаЗагрузкаДанных

// Проверить подключение расширения перед загрузкой данных
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   Параметры - Структура
//
Процедура НачатьЗагрузкуДанныхИзККМПроверкаПодключенияРасширения(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныхИзККМПродолжение", ЭтотОбъект, Параметры);
		ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Истина);
	#Иначе
		// В тонком и толстом клиентах расширение подключено всегда.
		НачатьЗагрузкуДанныхИзККМПродолжение(Истина, Параметры);
	#КонецЕсли
	
КонецПроцедуры

// Обработать результат подключения расширения
//
// Параметры:
//   Подключено - Булево
//   Контекст - Структура
//
Процедура НачатьЗагрузкуДанныхИзККМПродолжение(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Контекст.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства",
													Ложь, ТекстСообщения, Контекст.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Контекст.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется загрузка данных из ККМ Офлайн'"));
	
	ВходныеПараметры  = Новый Массив;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныхИзККМЗавершение", ЭтотОбъект, Контекст);
	НачатьВыполнениеКомандыОфлайнОборудования(ОписаниеОповещения, Контекст.ИдентификаторУстройства, Контекст, ВходныеПараметры, Ложь);
	
КонецПроцедуры

// Обработать результат выполнения команды загрузка данных
//
// Параметры:
//   РезультатКоманды - Структура
//   Параметры - Структура
//
Процедура НачатьЗагрузкуДанныхИзККМЗавершение(РезультатКоманды, Параметры) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ВыходныеПараметры = РезультатКоманды.ВыходныеПараметры;
	
	Если РезультатКоманды.Результат Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
		Контекст.Вставить("ДанныеИзККМ", РезультатКоманды.ВыходныеПараметры[0]);
		
		РезультатПередачиДанных = МенеджерОфлайнОборудованияВызовСервера.ПередатьДанныеЗагрузки(Контекст);
		
		Если РезультатПередачиДанных.Успешно Тогда
			
			ВходныеПараметры = Неопределено;
			Если РезультатПередачиДанных.ЭтоОбработчикОФД И РезультатПередачиДанных.НесопоставленныеТоварыОФД.Количество() <> 0 Тогда
				ТекстСообщения = НСтр("ru='Необходимо выполнить сопоставление товаров'");
				Если Параметры.СледующееОповещение <> Неопределено Тогда
					
					РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(
					РезультатКоманды.Результат,
					ТекстСообщения,
					Параметры.ИдентификаторУстройства); 
					РезультатВыполнения.Вставить("НесопоставленныеТоварыОФД", РезультатПередачиДанных.НесопоставленныеТоварыОФД);
					
					ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
					Возврат;
				Иначе
					ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
				КонецЕсли; 
				
			Иначе
				Параметры.Команда = "УстановитьФлагДанныеЗагружены";
				ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныхИзККМПослеУстановкиФлагаОбработанности", ЭтотОбъект, Параметры);
				НачатьВыполнениеКомандыОфлайнОборудования(ОписаниеОповещения, Параметры.ИдентификаторУстройства, Параметры, ВходныеПараметры, Ложь);
			КонецЕсли;
			
		Иначе
			
			ВыходныеПараметры = Новый Массив;
			ЕстьОшибки = Истина;
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, РезультатПередачиДанных.СообщениеОбОшибке);
		КонецЕсли;
		
	Иначе
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		
		Параметры.Команда = "УстановитьФлагДанныеЗагружены";
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныхИзККМПослеУстановкиФлагаОбработанности", ЭтотОбъект, Параметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат выполнения команды загрузка данных
//
// Параметры:
//   РезультатКоманды - Структура
//   Параметры - Структура
//
Процедура НачатьЗагрузкуДанныхИзККМПослеУстановкиФлагаОбработанности(РезультатКоманды, Параметры) Экспорт
	
	Если РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='Данные загружены успешно'");
	Иначе
		ТекстСообщения = РезультатКоманды.ВыходныеПараметры[1];
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(
			РезультатКоманды.Результат,
			ТекстСообщения,
			Параметры.ИдентификаторУстройства);
		
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаЗагрузкаОборотов

// Обработать результат подключения расширения
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ОфлайнОборудование
//   Контекст - Структура
//
Процедура НачатьЗагрузкуОборотовИзОФДПродолжение(ИдентификаторУстройства, Контекст) Экспорт
	
	Состояние(НСтр("ru='Выполняется загрузка данных из ОФД'"));
	
	ВходныеПараметры  = Новый Массив;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОборотовИзОФДЗавершение", ЭтотОбъект, Контекст);
	НачатьВыполнениеКомандыОфлайнОборудования(ОписаниеОповещения, ИдентификаторУстройства, Контекст, ВходныеПараметры, Ложь);
	
КонецПроцедуры

// Обработать результат выполнения команды загрузка данных
//
// Параметры:
//   РезультатКоманды - Структура
//   Параметры - Структура
//
Процедура НачатьЗагрузкуОборотовИзОФДЗавершение(РезультатКоманды, Параметры) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ВыходныеПараметры = РезультатКоманды.ВыходныеПараметры;
	
	Если РезультатКоманды.Результат Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
		Контекст.Вставить("ДанныеИзККМ", ВыходныеПараметры);
		
		РезультатПередачиДанных = МенеджерОфлайнОборудованияВызовСервера.ПередатьДанныеОборотов(Контекст);
		
		Если НЕ РезультатПередачиДанных.Успешно Тогда
			
			ВыходныеПараметры = Новый Массив;
			ЕстьОшибки = Истина;
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, РезультатПередачиДанных.СообщениеОбОшибке);
			
		КонецЕсли;
		
	Иначе
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = РезультатКоманды.ВыходныеПараметры[1];
	Иначе
		ТекстСообщения = НСтр("ru='Данные загружены успешно'");
	КонецЕсли; 
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(
			РезультатКоманды.Результат,
			ТекстСообщения,
			Параметры.ИдентификаторУстройства);
		
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения); 
		
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаЗагрузкаЧеков

// Обработать результат подключения расширения
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ОфлайнОборудование
//   Контекст - Структура
//
Процедура НачатьЗагрузкуЧековИзОФДПродолжение(ИдентификаторУстройства, Контекст) Экспорт
	
	Состояние(НСтр("ru='Выполняется загрузка данных из ОФД'"));
	
	ВходныеПараметры  = Новый Массив;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуЧековИзОФДЗавершение", ЭтотОбъект, Контекст);
	НачатьВыполнениеКомандыОфлайнОборудования(ОписаниеОповещения, ИдентификаторУстройства, Контекст, ВходныеПараметры, Ложь);
	
КонецПроцедуры

// Обработать результат выполнения команды загрузка данных
//
// Параметры:
//   РезультатКоманды - Структура
//   Параметры - Структура
//
Процедура НачатьЗагрузкуЧековИзОФДЗавершение(РезультатКоманды, Параметры) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ВыходныеПараметры = РезультатКоманды.ВыходныеПараметры;
	
	Если РезультатКоманды.Результат Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ИдентификаторУстройства", Параметры.ИдентификаторУстройства);
		Контекст.Вставить("ДанныеИзККМ", ВыходныеПараметры);
		
		РезультатПередачиДанных = МенеджерОфлайнОборудованияВызовСервера.ПередатьДанныеЧеков(Контекст);
		
		Если НЕ РезультатПередачиДанных.Успешно Тогда
			
			ВыходныеПараметры = Новый Массив;
			ЕстьОшибки = Истина;
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, РезультатПередачиДанных.СообщениеОбОшибке);
			
		КонецЕсли;
		
	Иначе
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = РезультатКоманды.ВыходныеПараметры[1];
	Иначе
		ТекстСообщения = НСтр("ru='Данные загружены успешно'");
	КонецЕсли; 
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании(
			РезультатКоманды.Результат,
			ТекстСообщения,
			Параметры.ИдентификаторУстройства);
		
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения); 
		
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаОчисткаДанных

// Очищает товары в ККМ Offline.
//
// Параметры:
//   ОповещениеПриОчисткеДанные - ОписаниеОповещения - оповещение при завершении.
//   УникальныйИдентификатор - ФормаКлиентскогоПриложения -идентификатор формы.
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   ОтображатьСообщения     - Булево
//
Процедура НачатьОчисткуТоваровВККМOffline(ОповещениеПриОчисткеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("Команда"                 , "ОчиститьБазу");
	
	НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	
КонецПроцедуры

// Завершить очистку товаров в ККМ Offline.
//
// Параметры:
//   ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   Параметры - Структура
//
Процедура НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
		
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
		ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
	#Иначе
		// В тонком и толстом клиентах расширение подключено всегда.
		НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
	#КонецЕсли
	
КонецПроцедуры

// Обработать результат подключения расширения
//
// Параметры:
//   Подключено - Булево
//   Контекст - Структура
//
Процедура НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Подключено, Контекст) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Контекст.ОтображатьСообщения Тогда
			ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Контекст.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Контекст.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Контекст.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется очистка товаров в ККМ Offline...'"));
	
	ВходныеПараметры  = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Контекст);
	НачатьВыполнениеКомандыОфлайнОборудования(ОписаниеОповещения, Контекст.ИдентификаторУстройства, Контекст, ВходныеПараметры, Ложь);
	
КонецПроцедуры

// Завершить выполнение команды очистки товаров в ККМ Offline.
//
// Параметры:
//   РезультатКоманды - Структура
//   Параметры - Структура
//
Процедура НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
								|%ОписаниеОшибки%'");
		ОписаниеОшибки = ?(РезультатКоманды.ВыходныеПараметры.Количество() > 1, РезультатКоманды.ВыходныеПараметры[1], "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
	Иначе
		ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

// Завершение выбора файла
//
// Параметры:
//   Установлено - Булево
//   ДополнительныеПараметры - Структура
Процедура НачатьВыборФайлаРасширенияЗавершение(Установлено, ДополнительныеПараметры) Экспорт
	
	Если Установлено Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла[ДополнительныеПараметры.РежимДиалогаВыбораФайла]);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайла;
		Диалог.Показать(ДополнительныеПараметры.ОповещениеПриВыборе); // АПК: 1348 не используется модуль ФайловаяСистемаКлиент из БСП
	КонецЕсли;
	
КонецПроцедуры
 
// Функция начинает выбор файла.
//
// Параметры:
//   ОповещениеПриВыборе - ОписаниеОповещения - оповещение при завершении.
//   ИмяФайла - Строка 
//   РежимДиалогаВыбораФайла - Строка
Процедура НачатьВыборФайла(ОповещениеПриВыборе, Знач ИмяФайла, РежимДиалогаВыбораФайла = "Открытие") Экспорт
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла", ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла);
	Оповещение = Новый ОписаниеОповещения("НачатьВыборФайлаРасширенияЗавершение", ЭтотОбъект, ПараметрыКоманды);
	ПроверитьДоступностьРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

#КонецОбласти

// Выполнить настройку оборудования.
// 
// Параметры:
//   ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении.
//   Идентификатор - СправочникСсылка.ПодключаемоеОборудование
//
Процедура ВыполнитьНастройкуОборудования(Идентификатор, ОповещениеПриЗавершении = Неопределено) Экспорт

	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(Идентификатор);
	
	// проверять на обработчик ОФД здесь
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыФормы.Вставить("ОбработчикОфлайнОборудования", ДанныеУстройства.ОбработчикОфлайнОборудования);
	
	ФормаНастройки = ФормаНастройки(ПараметрыФормы.ОбработчикОфлайнОборудования);
	
	Если ЗначениеЗаполнено(ФормаНастройки) И ФормаНастройки <> "ОФД" Тогда
		ПараметрыКоманды = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
		ОткрытьФорму("Справочник.ОфлайнОборудование.Форма." + ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли ЗначениеЗаполнено(ФормаНастройки) И ФормаНастройки = "ОФД" Тогда
		
		МодульОФД = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОФДКлиент");
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ДатаНачала");
		НовыеЗначениеПараметров.Вставить("ДатаОкончания");
		НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Ложь);
		НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
		
		ПараметрыОборудования = Новый Структура;
		ПараметрыОборудования.Вставить("Идентификатор", Идентификатор);
		ПараметрыОборудования.Вставить("ПараметрыОборудования", НовыеЗначениеПараметров);
		
		НастройкиПодключения = Новый Структура;
		НастройкиПодключения.Вставить("Касса", Идентификатор); 
		
		Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект, ПараметрыОборудования);
		МодульОФД.ПараметрыПодключения(НастройкиПодключения, Обработчик);
	Иначе
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(НСтр("ru='Произошла ошибка инициализации формы настройки драйвера.'")); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение настройки оборудования.
//
// Параметры:
//   Результат - Структура
//   Параметры - Структура
//
Процедура ВыполнитьНастройкуОборудования_Завершение(Результат, Параметры) Экспорт
	
	РезультатЗавершения = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОфлайнОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("Идентификатор") И Параметры.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОфлайнОборудованияВызовСервера.СохранитьПараметрыУстройства(Параметры.Идентификатор, Параметры.ПараметрыОборудования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатЗавершения Тогда 
		ОбновитьПовторноИспользуемыеЗначения();
	Иначе
		СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Если Параметры.Свойство("ОповещениеПриЗавершении") И Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗавершения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает номер смены офлайн оборудования.
//
// Параметры:
//   ОфлайнОборудование - СправочникСсылка.ОфлайнОборудование - .
//
// Возвращаемое значение:
//   Число
// 
Функция НомерСменыОфлайнОборудования(ОфлайнОборудование) Экспорт
	
	НомерСмены = 0;
	СтандартнаяОбработка = Истина;
	МенеджерОфлайнОборудованияКлиентПереопределяемый.НомерСменыОфлайнОборудования(ОфлайнОборудование, НомерСмены, СтандартнаяОбработка);
	Возврат НомерСмены;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ОфлайнОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Начать выполнение команды ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКомандыОфлайнОборудования(ОповещениеПриЗавершении, Идентификатор, Контекст, ВходныеПараметры, ВыгрузкаДанных = Ложь) Экспорт
	
	ОписаниеОшибки = "";
	ВыходныеПараметры = Новый Массив();
	
	ДанныеУстройстваОфлайн = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(Идентификатор);
	Если ДанныеУстройстваОфлайн = Неопределено Тогда
		ОписаниеОшибки = ОписаниеОшибки + НСтр("ru='Не удалось получить информацию по устройству.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
	ОбработчикУстройстваОфлайн = ДанныеУстройстваОфлайн.ОбработчикОфлайнОборудования;
	ОбработчикДрайвераМодуль = ОбработчикДрайвераОфлайнОборудования(ОбработчикУстройстваОфлайн);
	
	Если ОбработчикДрайвераМодуль = Неопределено Тогда
		ОписаниеОшибки = ОписаниеОшибки + НСтр("ru='Не удалось подключить обработчик драйвера.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОписаниеОшибки);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		Результат = ЗаполнениеПараметровУстройства(ОбработчикУстройстваОфлайн, ДанныеУстройстваОфлайн.Параметры, Контекст);
		Если Не Результат Тогда
			ОписаниеОшибки = ОписаниеОшибки + НСтр("ru='Не настроены параметры устройства.
				|Для корректной работы устройства необходимо задать параметры его работы.'");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ВыгрузкаДанных Тогда
				ДанныеДляВыгрузки = МенеджерОфлайнОборудованияВызовСервера.ПолучитьДанныеДляВыгрузки(Контекст.ИдентификаторУстройства, Контекст.НаборВыгружаемыхДанных);
				ВходныеПараметры  = Новый Структура("ДанныеДляВыгрузки", ДанныеДляВыгрузки);
			КонецЕсли;
			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Контекст.Команда, ВходныеПараметры,
				Идентификатор, ДанныеУстройстваОфлайн.Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнениеПараметровУстройства(ОбработчикУстройстваОфлайн, Параметры, Контекст);
	
	Результат = Истина;
	
	Если ОбработчикУстройстваОфлайн <> Неопределено Тогда
		Если ОбработчикУстройстваОфлайн = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикАтолККМОфлайн") Тогда
			
			БазаТоваров  = Неопределено;
			ФайлОтчета   = Неопределено;
			ФлагВыгрузки = Неопределено;
			
			Параметры.Свойство("БазаТоваров",  БазаТоваров);
			Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
			Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);
			
			Если БазаТоваров  = Неопределено
				Или ФайлОтчета   = Неопределено
				Или ФлагВыгрузки = Неопределено  Тогда
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли ОбработчикУстройстваОфлайн = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикШтрихМККМОфлайн") Тогда
			
			БазаТоваров  = Неопределено;
			ФайлОтчета   = Неопределено;
			ФлагВыгрузки = Неопределено;
			
			Параметры.Свойство("БазаТоваров",  БазаТоваров);
			Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
			Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);
			
			Если БазаТоваров  = Неопределено
				Или ФайлОтчета   = Неопределено
				Или ФлагВыгрузки = Неопределено  Тогда
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли ОбработчикУстройстваОфлайн = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СККМОфлайн") Тогда
			
			Если НЕ Параметры.Свойство("ВерсияФорматаОбмена") Тогда
				// Если обновление прошло штатно, то такой ситуации не должно быть
				ТекстИсключения = НСтр("ru='Не определена версия формата обмена. Перезапишите настройки ККМ Офлайн.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			ВерсияФорматаОбмена = Параметры.ВерсияФорматаОбмена;
			
			Если ВерсияФорматаОбмена < 2000 Тогда // 100Х
				
				КаталогВыгрузки = Неопределено;
				ИмяФайлаПрайсЛиста = Неопределено;
				КаталогЗагрузки = Неопределено;
				ИмяЗагружаемогоФайла = Неопределено;
				КоличествоЭлементовВПакете = Неопределено;
				
				Параметры.Свойство("КаталогВыгрузки",  КаталогВыгрузки);
				Параметры.Свойство("ИмяФайлаПрайсЛиста",	ИмяФайлаПрайсЛиста);
				Параметры.Свойство("КаталогЗагрузки",   КаталогЗагрузки);
				Параметры.Свойство("ИмяЗагружаемогоФайла",  ИмяЗагружаемогоФайла);
				Параметры.Свойство("КоличествоЭлементовВПакете",  КоличествоЭлементовВПакете);
				
				Если КаталогВыгрузки = Неопределено
					Или КаталогЗагрузки = Неопределено
					Или ИмяФайлаПрайсЛиста = Неопределено
					Или ИмяЗагружаемогоФайла = Неопределено
					Или КоличествоЭлементовВПакете = Неопределено Тогда
					Результат = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВерсияФорматаОбмена >= 2000 Тогда // 200Х
				
				КаталогОбмена = Неопределено;
				ИмяФайлаВыгрузки = Неопределено;
				ИмяФайлаЗагрузки = Неопределено;
				
				Параметры.Свойство("КаталогОбмена", 	КаталогОбмена);
				Параметры.Свойство("ИмяФайлаВыгрузки", 	ИмяФайлаВыгрузки);
				Параметры.Свойство("ИмяФайлаЗагрузки", 	ИмяФайлаЗагрузки);
				
				Если КаталогОбмена = Неопределено
					Или ИмяФайлаВыгрузки = Неопределено
					Или ИмяФайлаЗагрузки = Неопределено Тогда
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбработчикУстройстваОфлайн = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СЭвоторККМОфлайн") Тогда
			
			ТокенПриложения = Неопределено;
			
			Параметры.Свойство("Токен", ТокенПриложения);
			
			Если ТокенПриложения = Неопределено Тогда
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли ОбработчикУстройстваОфлайн = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикОФД") Тогда
			
			Если Контекст.Команда = "ЗагрузитьОбороты" ИЛИ Контекст.Команда = "ЗагрузитьЧеки" Тогда
				Если Контекст.Свойство("НомерСмены") И ЗначениеЗаполнено(Контекст.НомерСмены) Тогда
					Параметры.Вставить("НомерСмены", Контекст.НомерСмены);
				Иначе
					Результат = Ложь;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура добавляет в массив выходных параметров сообщение об ошибке.
//		Параметры:
//			- ВыходныеПараметры - массив, в который будет помещено сообщение об ошибке.
//			- ТекстСообщения - текст сообщения, содержащий информация об ошибке.
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

// Заполняет структуру выполнения операции на Оборудовании.
// 
// Возвращаемое значение:
//  Структура.
Функция ПараметрыВыполненияОперацииНаОборудовании(Результат = Ложь, ОписаниеОшибки = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт; 
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("Результат"              , Результат);
	РезультатВыполнения.Вставить("ОписаниеОшибки"         , ОписаниеОшибки);
	РезультатВыполнения.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	РезультатВыполнения.Вставить("ПодключенноеУстройство" , Неопределено);
	Возврат РезультатВыполнения;
	
КонецФункции

#Область ПроцедурыРаботыСФайлами

// Процедура получения содержания текстовых файлов.
// Параметры:
//  ИменаФайлов  - Строка, 
//               - Массив - имя файла или массив с именами файлов.
//  ОписаниеОповещенияПриЗавершении  - ОписаниеОповещения - вызывается после завершения чтения файлов.
//  Кодировка - КодировкаТекста - кодировка при чтении текстового файла, по умолчанию КодировкаТекста.UTF8.
//
Процедура ПолучитьСодержаниеТекстовыхФайлов(ИменаФайлов, ОписаниеОповещенияПриЗавершении, Кодировка = Неопределено) Экспорт
	
	Кодировка = МенеджерОфлайнОборудованияВызовСервера.ПолучитьКодировкуФайла(Кодировка); //Массив из ОписаниеПередаваемогоФайла
	
	ПомещаемыеФайлы = Новый Массив;
	
	Если Кодировка = Неопределено Тогда
		Кодировка = МенеджерОфлайнОборудованияВызовСервера.ПолучитьКодировкуФайла();
	КонецЕсли;
	
	Если ТипЗнч(ИменаФайлов) = Тип("Строка") Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИменаФайлов);
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	ИначеЕсли ТипЗнч(ИменаФайлов) = Тип("Массив") Тогда
		Если ИменаФайлов.Количество() = 0 Тогда
			РезультатЧтенияФайлов = Новый Структура;
			РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Новый Массив);
			РезультатЧтенияФайлов.Вставить("Успешно", Истина);
			РезультатЧтенияФайлов.Вставить("ТекстОшибки","");
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
			Возврат;
		Иначе
			Для Каждого ИмяФайла Из ИменаФайлов Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		
		ОповещениеНачатьПомещениеФайла = Новый ОписаниеОповещения("ПолучитьСодержаниеТекстовыхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайловНаСервер(ОповещениеНачатьПомещениеФайла,,, ПомещаемыеФайлы);
		
	#Иначе
		
		СодержаниеФайлов = Новый Массив;
		РезультатЧтенияФайлов = Новый Структура;
		РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
		РезультатЧтенияФайлов.Вставить("Успешно", Истина);
		РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
		
		Для Каждого Файл Из ПомещаемыеФайлы Цикл
			
			СтруктураСодержанияФайла = Новый Структура;
			
			Попытка
				ЧтениеТекста = Новый ЧтениеТекста(Файл.Имя, Кодировка);
				ТекстСодержания = ЧтениеТекста.Прочитать();
			
				СтруктураСодержанияФайла.Вставить("ОписаниеПереданногоФайла", Файл);
				СтруктураСодержанияФайла.Вставить("ТекстСодержания",          ТекстСодержания);
				
				СодержаниеФайлов.Добавить(СтруктураСодержанияФайла);
				ЧтениеТекста.Закрыть();
				
			Исключение
				
				ТекстСообщения =  НСтр("ru = 'При чтении файла %ИмяФайла% произошла ошибка'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", Файл.Имя);
				РезультатЧтенияФайлов.ТекстОшибки = ТекстСообщения + Символы.ПС;
				РезультатЧтенияФайлов.Успешно = Ложь;
				
				Прервать;
				
			КонецПопытки;
			
		КонецЦикла;
		
		РезультатЧтенияФайлов.СодержаниеФайлов = СодержаниеФайлов;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура оповещения получения содержания текстовых файлов.
// Вызывается из процедуры ПолучитьСодержаниеТекстовыхФайлов.
//
Процедура ПолучитьСодержаниеТекстовыхФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	РезультатЧтенияФайлов = Новый Структура;
	РезультатЧтенияФайлов.Вставить("СодержаниеФайлов", Неопределено);
	РезультатЧтенияФайлов.Вставить("Успешно", Ложь);
	РезультатЧтенияФайлов.Вставить("ТекстОшибки", "");
	
	Если ПомещенныеФайлы = Неопределено Тогда
		РезультатЧтенияФайлов.ТекстОшибки = НСтр("ru = 'Неизвестная ошибка при передаче файлов на сервер.'");
	Иначе
		Если Не ПомещенныеФайлы.Количество() = 0 Тогда
			МассивФайлов = Новый Массив;
			Для Каждого Файл Из ПомещенныеФайлы Цикл
				МассивФайлов.Добавить(Файл.Адрес);
			КонецЦикла;
			РезультатИзвлеченияТекста = МенеджерОфлайнОборудованияВызовСервера.ПолучитьСодержаниеТекстовыхФайловИзХранилища(
				МассивФайлов, ДополнительныеПараметры.Кодировка);
			ЗаполнитьЗначенияСвойств(РезультатЧтенияФайлов, РезультатИзвлеченияТекста);
		Иначе
			РезультатЧтенияФайлов.СодержаниеФайлов = Новый Массив;
			РезультатЧтенияФайлов.Успешно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении, РезультатЧтенияФайлов);
	
КонецПроцедуры

// АПК: 581-выкл
// Проверить доступность расширения работы с Файлами.
// 
Процедура ПроверитьДоступностьРасширенияРаботыСФайлами(ОповещениеПриЗавершении, ПредлагатьУстановку = Истина) Экспорт
	
#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
	Возврат;
#Иначе
	ДополнительныеПараметры = Новый Структура("ОповещениеПриЗавершении, ПредлагатьУстановку", ОповещениеПриЗавершении, ПредлагатьУстановку);
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
#КонецЕсли
	
КонецПроцедуры
// АПК: 581-вкл

Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено И ДополнительныеПараметры.ПредлагатьУстановку Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Подключено);
	КонецЕсли
	
КонецПроцедуры

Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

// Записывает текстовый файл.
// 
// Параметры:
// 	ТекстовыйДокумент - ТекстовыйДокумент - .
// 	ИмяФайла - Строка - .
// Возвращаемое значение:
// 	Булево - Описание
Функция ЗаписатьТекстовыйФайл(ТекстовыйДокумент, ИмяФайла) Экспорт
	
	Результат = Ложь;
	
	Попытка
		ТекстовыйДокумент.Записать(ИмяФайла);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Функция возвращает объект обработчика драйвера по его наименованию.
//
// Параметры:
//  ОбработчикДрайвера - ПеречислениеСсылка.ОбработчикиОфлайнОборудования - ссылка на обработчик драйвера подключаемого оборудования.
//  ЗагружаемыйДрайвер  - Булево - признак, что драйвер загружаемый.
//
// Возвращаемое значение:
//  ОбщийМодуль - Используемый модуль обработчика драйвера.
//
Функция ОбработчикДрайвераОфлайнОборудования(ОбработчикДрайвера)
	
	Результат = Неопределено;
	
	Если ОбработчикДрайвера <> Неопределено Тогда
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикАтолККМОфлайн") Тогда
			Возврат ОфлайнОборудованиеАтолККМКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикШтрихМККМОфлайн") Тогда
			Возврат ОфлайнОборудованиеШтрихМККМКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СККМОфлайн") Тогда
			Возврат ОфлайнОборудование1СККМКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СЭвоторККМОфлайн") Тогда
			Возврат ОфлайнОборудование1СЭвоторКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СККМED") Тогда
			Возврат ОфлайнОборудование1СККМEDКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикОФД") Тогда
			Возврат ОфлайнОборудованиеОФДКлиент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает наименование формы настройки.
//
// Параметры:
//  ОбработчикДрайвера  - ПеречислениеСсылка.ОбработчикиОфлайнОборудования - ссылка на обработчик драйвера подключаемого оборудования.
//
// Возвращаемое значение:
//  Строка.
//
Функция ФормаНастройки(ОбработчикДрайвера)
	
	Результат = Неопределено;
	
	Если ОбработчикДрайвера <> Неопределено Тогда
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикАтолККМОфлайн") Тогда
			Возврат "ФормаНастройкиАтолККМОфлайн";
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикШтрихМККМОфлайн") Тогда
			Возврат "ФормаНастройкиШтрихМККМОфлайн";
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СККМОфлайн") Тогда
			Возврат "ФормаНастройки1СККМОфлайн";
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СЭвоторККМОфлайн") Тогда
			Возврат "ФормаНастройки1СЭвоторККМОфлайн";
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.Обработчик1СККМED") Тогда
			Возврат "ФормаНастройки1СККМED";
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиОфлайнОборудования.ОбработчикОФД") Тогда
			Возврат "ОФД";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
