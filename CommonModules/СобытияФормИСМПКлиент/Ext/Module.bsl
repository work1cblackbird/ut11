
#Область ПрограммныйИнтерфейс

#Область Локализация

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если СтрНачинаетсяС(Команда.Имя, "ПодобратьИПроверитьПродукциюГосИС")
		Или СтрНачинаетсяС(Команда.Имя, "ВозобновитьПроверкуПродукцииГосИС")
		Или СтрНачинаетсяС(Команда.Имя, "ПроверитьАкцизныеМаркиГосИС") Тогда
		
		Позиция = СтрНайти(Команда.Имя,"_") + 1;
		Если Позиция = 1 Тогда
			Позиция = СтрНайти(Команда.Имя, "ГосИС")+5;
			Сценарий = 0;
		Иначе
			Начало = СтрНайти(Команда.Имя, "ГосИС");
			Сценарий = Число(Сред(Команда.Имя, Начало +5, Позиция-Начало-6));
		КонецЕсли;
			
		ИндексВидаПродукции     = Число(Сред(Команда.Имя, Позиция));
		ВидМаркируемойПродукции = ОбщегоНазначенияИСКлиентСервер.ИндексВидаПродукцииИС(ИндексВидаПродукции);
		
		Если ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(ВидМаркируемойПродукции) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыУказанияСерийФормы = ИнтеграцияИСКлиент.ПараметрыУказанияСерий(Форма);
		Если СтрНачинаетсяС(Команда.Имя, "ВозобновитьПроверкуПродукцииГосИС") Тогда
			ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(Форма, ВидМаркируемойПродукции, ПараметрыУказанияСерийФормы, Сценарий);
		Иначе
			ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(Форма, ВидМаркируемойПродукции, ПараметрыУказанияСерийФормы, Сценарий);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(Команда.Имя, "РезультатыСверкиКодовМаркировки") Тогда
		
		СверкаКодовМаркировкиИСМПКлиент.ОткрытьФормуРезультатовСверкиКодовМаркировки(Форма);
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "СоответствиеТребованиямГИСМТГосИС") Тогда
		
		СоответствиеТребованиямГИСМТКлиент.ОткрытьФормуСРезультатомПроверкиДокументаНаСоответствиеТребованиямГИСМТ(Форма);
		
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки документа в ИСМП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	Если НЕ ЭтоНавигационнаяСсылкаИСМП(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ИмяРеквизитаФормыОбъект];
	ИнтеграцияИСМПКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		Форма,
		Объект,
		Неопределено,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	
	Если НЕ ЭтоОповещениеИСМП(ИмяСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	МестоВызова = Новый Структура;
	МестоВызова.Вставить("Форма",  Форма);
	МестоВызова.Вставить("Объект", Форма[Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ИмяРеквизитаФормыОбъект]);
	
	Событие = Новый Структура;
	Событие.Вставить("Имя",        ИмяСобытия);
	Событие.Вставить("Параметр",   Параметр);
	Событие.Вставить("Источник",   Источник);
	Событие.Вставить("Обработано", Ложь);
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие);
	
	Если Событие.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	Подсистема = Новый Структура;
	Подсистема.Вставить("Имя",ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы());
	Подсистема.Вставить("МодульВызовСервера",ИнтеграцияИСМПВызовСервера);
	
	СобытияФормИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие, Подсистема);
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПослеЗаписи(Форма, ПараметрыЗаписи);
	
	СоответствиеТребованиямГИСМТКлиент.ПослеЗаписи(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПроверитьВыполнениеЗадания(Форма, ДополнительныеПараметры) Экспорт
	
	СоответствиеТребованиямГИСМТКлиент.ПроверитьВыполнениеЗадания(Форма, ДополнительныеПараметры);
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииСтроки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриАктивизацииСтроки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Вызывается при наступлении события "Выбор" в табличной части.
// Открывает форму выбранного элемента, если имя реквизита входит в массив имен.
//
// Параметры:
// Форма - ФормаУправляемогоПриложения - форма объекта,
// ТаблицаФормы - ТаблицаФормы - таблица в которой произошло событие,
// ВыбранноеПоле - ПолеФормы
Процедура ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(Форма, ТаблицаФормы, ВыбранноеПоле) Экспорт
	
	МассивИмен = МассивИменРеквизитовФормыОткрытия();
	
	ИмяТабличнойЧасти = ТаблицаФормы.Имя;
	
	Для Каждого ИмяЭлемента Из МассивИмен Цикл
		
		Если Форма.Элементы.Найти(ИмяТабличнойЧасти + ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Элементы[ИмяТабличнойЧасти + ИмяЭлемента] = ВыбранноеПоле
			И ЗначениеЗаполнено(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]) Тогда
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТаблицаФормы.ТекущиеДанные[ИмяЭлемента]);
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Печать

// Открытвает форму печати кодов маркировки по переданным данным.
// Если передается объект документа - требует записи
// 
// Параметры:
// 	ФормаВладелец - Управляемая форма - владелец для открываемой формы печатит
// 	ДанныеОткрытия - Структура, ДанныеФормыОбъект - основание, по которому требуется открыть форму
// 	ОповещениеПриЗакрытии - Неопределено - Описание оповещения при закрытии формы печати
Процедура ОтрытьФормуПечатиКодовМаркировок(ФормаВладелец, ДанныеОткрытия, ОповещениеПриЗакрытии = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если ТипЗнч(ДанныеОткрытия) = Тип("Структура") Тогда
		ПараметрыФормыПечати = ДанныеОткрытия;
	Иначе
		
		Объект = ДанныеОткрытия;
		Если Объект.Ссылка.Пустая() Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму печати для нового документа.'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыФормыПечати = Новый Структура();
		ПараметрыФормыПечати.Вставить("Документ", Объект.Ссылка);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаПечати",
		ПараметрыФормыПечати,
		ФормаВладелец,
		ПараметрыФормыПечати.Документ,,,
		ОповещениеПриЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму печати кодов маркировки по переданному документу
//
// Параметры:
//     ПараметрыПечати - Структура - Сведения о печатной форме.
//       *   ОбъектыПечати - Массив - Массив ссылок выбранных объектов.
//       *   Форма - ФормаКлиентскогоПриложения - Форма, из которой вызвана команда печати.
//       *   ДополнительныеПараметры - Структура - Дополнительные параметры печати.
//         Прочие ключи структуры соответствуют колонкам таблицы КомандыПечати,
//         подробнее см. в функции   УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
// Возвращаемое значение:
// 	Неопределено - 
Функция КомандаОткрытьФормуПечатиКодовМаркировки(ПараметрыПечати) Экспорт
	
	Для Каждого ОбъектПечати Из ПараметрыПечати.ОбъектыПечати Цикл
		ПараметрыДляФормыПечати = Новый Структура("Документ", ОбъектПечати);
		ОтрытьФормуПечатиКодовМаркировок(ПараметрыПечати.Форма, ПараметрыДляФормыПечати);
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоНавигационнаяСсылкаИСМП(НавигационнаяСсылка)
	
	Возврат СтрНайти(НавигационнаяСсылка, "ИнтеграцияИС_КомандаНавигационнойСсылки#ИСМП#") > 0;
	
КонецФункции

Функция ЭтоОповещениеИСМП(ИмяСобытия)
	
	Возврат СтрНайти(ИмяСобытия, "ИнтеграцияИС_СобытиеОповещения#ИСМП#") > 0;
	
КонецФункции

Функция МассивИменРеквизитовФормыОткрытия()
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("Характеристика");
	Массив.Добавить("ИдентификаторПроисхожденияВЕТИС");
	
	Возврат Массив;
	
КонецФункции

// Определение использования характеристики в формах, где номенклатура и характеристика расположены в шапке
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Источник события
// 	Контекст - Объект - Контекст выполнения определния
// 	ИмяПоляНоменклатура - Строка - Имя поля номенклатуры
// 	ИмяПоляИспользованияХарактеристики - Строка- Имя поля признака использования номенклатуры
//
Процедура ОпределитьИспользованиеХарактеристик(
	Форма, Контекст, ИмяПоляНоменклатура, ИмяПоляИспользованияХарактеристики) Экспорт
	
	Номенклатура = Контекст[ИмяПоляНоменклатура];
	Контекст[ИмяПоляИспользованияХарактеристики] = Ложь;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура();
	ДанныеСтроки.Вставить("Номенклатура", Номенклатура);
	ДанныеСтроки.Вставить("Характеристика", Неопределено);
	ДанныеСтроки.Вставить("ХарактеристикиИспользуются", Ложь);
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(Форма, ДанныеСтроки, Новый Структура());
	Контекст[ИмяПоляИспользованияХарактеристики] = ДанныеСтроки.ХарактеристикиИспользуются;
	
КонецПроцедуры

#Область ВидПродукции

Процедура ВидПродукцииПриИзменении(Форма, Элемент) Экспорт
	
	Форма.СохраненВыборПоМаркируемойПродукции = Ложь;
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти