#Область СлужебныйПрограммныйИнтерфейс

#Область ПересчетИтогов

// Пересчитывает итоги по проверке содержимого для всех упаковок дерева. 
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(
		ДеревоМаркированнойПродукции, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для всех родительских строк
// переданной строки дерева маркируемой продукции.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  ЗагрузкаДанныхТСД - Произвольный - Загрузка данных ТСД
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(
		СтрокаДерева, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции. 
// 
// Параметры:
//  СтрокаДерева             - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//  ПересчитыватьПодчиненные - Булево - признак необходимости пересчета подчиненных упаковок.
//  ЗагрузкаДанныхТСД - Произвольный - Загрузка данных ТСД
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Если Не СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0;
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхУпаковок          = 0;
	СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего             = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	Если СтрокаДерева.НеПересчитыватьКоличествоПотребительскихУпаковок Тогда
		
		СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок = 0;
		СтрокаДерева.КоличествоПодчиненныхУпаковок          = 0;
		
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки
			Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			
			Если Не ПодчиненнаяСтрока.НеПересчитыватьКоличествоПотребительскихУпаковок
				Или ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
				
				Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
					
					СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
					
				ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
					Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
					
					СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
					
				ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
					
					СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
					
				ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
					
					СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
					
				ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
					
					СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПересчитыватьПодчиненные Тогда
				
				ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
				
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
				Или (ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")
					И ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() = 0
					Или ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + 1;
				
			ИначеЕсли ЭтоУпаковкаБлока(ПодчиненнаяСтрока)
				Или ЭтоУпаковкаНабор(ПодчиненнаяСтрока) Тогда
				
				СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       = СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       + 1;
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
				
			ИначеЕсли ПодчиненнаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				
				СтрокаДерева.КоличествоПодчиненныхУпаковок                = СтрокаДерева.КоличествоПодчиненныхУпаковок                + 1;
				СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок + ПодчиненнаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок;
				СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       = СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок       + ПодчиненнаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок;
				
			КонецЕсли;
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
			СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
			СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаДерева.КоличествоПодчиненныхВсего
		= СтрокаДерева.КоличествоПодчиненныхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхГрупповыхУпаковок
		+ СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
	                                    И СтрокаДерева.ТипУпаковки <> ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки();
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

// Определяет индекс картинки типа упаковки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока) Экспорт

	Если ЭтоУпаковкаБлока(ТекущаяСтрока)
		Или ЭтоУпаковкаНабор(ТекущаяСтрока) Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 5;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 4;
		КонецЕсли;

	ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 6;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки() Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 2;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	КонецЕсли;

КонецПроцедуры

// Формирует представление итогов по проверки содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеПроверкиПодчиненных(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
		Или ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки()
		Или ТекущаяСтрока.НеСодержитсяВДанныхДокумента Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
	
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
			ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустой блок>'");
		ИначеЕсли ЭтоУпаковкаНабор(ТекущаяСтрока) Тогда
			ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустой набор>'");
		Иначе
			ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>'");
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		И ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 
		И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2'"),
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВНаличии,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.Номенклатура;
			Иначе
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.ЧастичноеВыбытие Тогда
			
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
				НСтр("ru = '%1 - %2'"),
				ТекущаяСтрока.Количество,
				ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
		 Или ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>'");
		ИначеЕсли ЭтоУпаковкаБлока(ТекущаяСтрока) Тогда
			
			ПредставлениеСодержимоеУпаковки = "";
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
					ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.Номенклатура;
				Иначе
					ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
						ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = '<пустой блок %1>'"), ПредставлениеСодержимоеУпаковки);
			
		ИначеЕсли ЭтоУпаковкаНабор(ТекущаяСтрока) Тогда
			
			ПредставлениеСодержимоеУпаковки = "";
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				Если Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И Не ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
					ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.Номенклатура;
				Иначе
					ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
						ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = '<пустой набор %1>'"), ПредставлениеСодержимоеУпаковки);
			
		Иначе
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
		КонецЕсли;
		
	Иначе
		
		ПредставлениеСодержимоеУпаковки = Новый Массив;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'упаковок - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок));
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'блоков - %1'"), ТекущаяСтрока.КоличествоПодчиненныхГрупповыхУпаковок));
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок > 0 Тогда
			ПредставлениеСодержимоеУпаковки.Добавить(
				СтрШаблон(НСтр("ru = 'пачек - %1'"), ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ПредставлениеСодержимоеУпаковки.Добавить(
				ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
					ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия));
			
		КонецЕсли;
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрСоединить(ПредставлениеСодержимоеУпаковки, ", ");
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ТребуетсяПеремаркировка Тогда
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
			НСтр("ru = '(требуется разборка) %1'"),
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		
	КонецЕсли;
	
	// Весовая продукция
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидУпаковки) И ТекущаяСтрока.ПроизвольнаяЕдиницаУчета Тогда
		
		ОтображатьКоличество = Истина;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
			ОтображатьКоличество = (ТекущаяСтрока.КоличествоПодчиненныхВсего > 0 И ТекущаяСтрока.Количество > 0)
				Или ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок > 0;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ЧастичноеВыбытиеВариантУчета) Тогда
			ОтображатьКоличество = Ложь;
		КонецЕсли;
		
		Если ОтображатьКоличество Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон("%1 x %2",
				Формат(ТекущаяСтрока.Количество, "ЧДЦ=3; ЧН="), ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует признак допустимости и представление проверки данных МОТП для строки дерева, содержащего данные упаковки.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева, содержащая данные упаковки.
//  ПараметрыПроверкиКодовМаркировки - Структура - со свойствами:
//  * ЗапрашиватьДанныеСервиса - Булево - Признак включенной опции запроса данных сервиса
//  * КонтролироватьСтатусыКодовМаркировки - Булево - Признак необходимости временного отключения контроля статусов кодов маркировки
//  * ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП - Булево - Признак необходимости проверки вхождения кодов в серую зону МОТП
//  * ДопустимыеСтатусыКодовМаркировки - Массив Из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - допустимые статусы кода маркировки для текущей хоз.операции
//  * ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП - Дата - Дата производства, начиная с которой выполняется контроль статусов кода маркировки
//  * ИННВладельца - Строка - ИНН владельца кода маркировки по данным ИС МОТП
//  * КонтролироватьВложенностьУпаковок - Булево - Признак необходимости проверить допустимые типы вложений согласно ограничения СУЗ API.
//  * ДопустимыеВложенияАгрегатов - Соответствие Из ПеречислениеСсылка - найстройки для котроля вложенности упаковок.
//  РежимПодбораСуществующихУпаковок - Булево - режим подбора существующих упаковок
//  ЕстьПодчиненныеСтроки - Булево, Неопределено - явное указание наличия подчиненных строк
Процедура ПроверитьДопустимостьКодаМаркировки(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки, РежимПодбораСуществующихУпаковок = Истина, ЕстьПодчиненныеСтроки = Неопределено) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
	 Или ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли Не ПараметрыПроверкиКодовМаркировки.ЗапрашиватьДанныеСервиса
		Или ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Статус неопределен'");
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.СтатусКодаМаркировки)
		Или ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца) Тогда
		
		ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = (ЗначениеЗаполнено(ТекущаяСтрока.РазрешительныйРежимДатаЗапросаГИСМТ)
			И Не ЗначениеЗаполнено(ТекущаяСтрока.РазрешительныйРежимИдентификаторЗапросаГИСМТ));
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
			
		Если ПараметрыПроверкиКодовМаркировки.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
			ВыполнятьКонтрольСУчетомСеройЗоны = Не ТекущаяСтрока.ВСеройЗоне;
		Иначе
			ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
		КонецЕсли;
		
		ДатаПроизводстваДопускаетКонтроль = Истина;
		
		// Приоритет 1. Статус
		Если ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыУпаковокМОТП;
		ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")
			И ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыНаборовМОТП;
		ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			И ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыНаборовМОТП;
		Иначе
			ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыМОТП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаПроизводства)
			И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
			ДатаПроизводстваДопускаетКонтроль = ТекущаяСтрока.ДатаПроизводства >= ПараметрыПроверкиКодовМаркировки.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
		Иначе
			ДатаПроизводстваДопускаетКонтроль = Истина;
		КонецЕсли;
		
		ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыКодовМаркировки.Найти(ТекущаяСтрока.СтатусКодаМаркировки) = Неопределено;
		
		Если ТекущаяСтрока.СтатусКодаМаркировки = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен") И ЗначениеЗаполнено(ТекущаяСтрока.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
			Если ТекущаяСтрока.ИННПроизводителя = ПараметрыПроверкиКодовМаркировки.ИННВладельца Тогда
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусКодаМаркировки)
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки 
			И ОтсутствуетДопустимыйСтатус
			И Не ТекущаяСтрока.ЧастичноеВыбытие
			И ВыполнятьКонтрольСУчетомСеройЗоны
			И Не ПродажаРазрешенаВОтсутствиеОтветаГИСМТ
			И ДатаПроизводстваДопускаетКонтроль Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ТекущаяСтрока.СтатусКодаМаркировки);
		КонецЕсли;
		
		// Приоритет 2. Вложения. Пустая упаковка
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность
			И ТекущаяСтрока.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И (ЕстьПодчиненныеСтроки = Ложь И ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок = 0) Тогда
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Пустая упаковка'");
		КонецЕсли;
		
		// Приоритет 3. Вложенность стандартных упаковок
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСтандартнуюВложенность
			И ТекущаяСтрока.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок <> ТекущаяСтрока.ПлановоеКоличествоПотребительскихУпаковок И ТекущаяСтрока.ПлановоеКоличествоПотребительскихУпаковок > 0 Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(
				НСтр("ru = 'По данным ГИС МТ в упаковке %2 ед. из %1'"),
				ТекущаяСтрока.ПлановоеКоличествоПотребительскихУпаковок, ТекущаяСтрока.КоличествоПодчиненныхПотребительскихУпаковок);
		КонецЕсли;
		
		// Приоритет 4. Владелец
		Если Не ТекущаяСтрока.НедопустимыйКодМаркировки
			И ВыполнятьКонтрольСУчетомСеройЗоны
			И ДатаПроизводстваДопускаетКонтроль
			И Не ПродажаРазрешенаВОтсутствиеОтветаГИСМТ
			И ТекущаяСтрока.СтатусКодаМаркировки <> ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Неопределен")
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельцевКодовМаркировки Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца)
				И ТекущаяСтрока.ИННВладельца <> ПараметрыПроверкиКодовМаркировки.ИННВладельца Тогда
				
				Если ПараметрыПроверкиКодовМаркировки.ОрганизацииИнтеркампани[ТекущаяСтрока.ИННВладельца] = Неопределено Тогда
					
					ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
					ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
						+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
						+ СтрШаблон(НСтр("ru = 'ИНН владельца: %1'"), ТекущаяСтрока.ИННВладельца);
				
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.ИННВладельца)
				И РежимПодбораСуществующихУпаковок Тогда
				
				ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
				ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
					+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
					+ НСтр("ru = 'Владелец неопределен'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Приоритет 5. Блокировка КМ по данным ГИС МТ
		Если ЗначениеЗаполнено(ТекущаяСтрока.ОрганыБлокировкиКМ) Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки           = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(
				НСтр("ru = 'Заблокирован по решению %1'"), ТекущаяСтрока.ОрганыБлокировкиКМ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок
		И ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов <> Неопределено Тогда
		
		ПроверитьДопустимуюВложенностьУпаковок(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки);
		
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьМинимальныеРозничныеЦены И ЗначениеЗаполнено(ТекущаяСтрока.МРЦ)
		И Не ТекущаяСтрока.НедопустимыйКодМаркировки Тогда
		Если ПараметрыПроверкиКодовМаркировки.МинимальнаяРозничнаяЦена > ТекущаяСтрока.МРЦ Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки + ?(
				ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ") + НСтр(
				"ru = 'МРЦ меньше минимальной розничной цены'");
		КонецЕсли;
	КонецЕсли;
		
	Если ТекущаяСтрока.ОбработанСОшибкойВГИСМТ Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
			+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
			+ ТекущаяСтрока.ТекстОбработанСОшибкойВГИСМТ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДопустимыеВложенияАгрегатовПоВидамПродукции() Экспорт
	
	Результат = Новый Соответствие;
	
	ВложенияЛогистическаяУпаковка = Новый Массив;
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	ВложенияЛогистическаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	ВложенияЛогистическаяУпаковкаТабак = Новый Массив;
	ВложенияЛогистическаяУпаковкаТабак.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"));
	ВложенияЛогистическаяУпаковкаТабак.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	
	ВложенияГрупповаяУпаковка = Новый Массив;
	ВложенияГрупповаяУпаковка.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	ВложенияПоТипуШтрихкодаSSCC = Новый Массив;
	ВложенияПоТипуШтрихкодаSSCC.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	ВложенияПоТипуШтрихкодаSSCC.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"));
	
	ВложенияПоТипуШтрихкодаGS1 = Новый Массив;
	ВложенияПоТипуШтрихкодаGS1.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	
	ВложенияПоТипуШтрихкодаGS1Табак = Новый Массив;
	ВложенияПоТипуШтрихкодаGS1Табак.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"));
	ВложенияПоТипуШтрихкодаGS1Табак.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
	
	// АТП
	ДопустимыеВложенияАгретовАТП = Новый Соответствие;
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"),          ВложенияПоТипуШтрихкодаSSCC);
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"),       ВложенияПоТипуШтрихкодаGS1);
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"), ВложенияЛогистическаяУпаковка);
	ДопустимыеВложенияАгретовАТП.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"),     ВложенияГрупповаяУпаковка);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"), ДопустимыеВложенияАгретовАТП);
	
	// НСП
	ДопустимыеВложенияАгретовНСП = Новый Соответствие;
	ДопустимыеВложенияАгретовНСП.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"),          ВложенияПоТипуШтрихкодаSSCC);
	ДопустимыеВложенияАгретовНСП.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"),       ВложенияПоТипуШтрихкодаGS1);
	ДопустимыеВложенияАгретовНСП.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"), ВложенияЛогистическаяУпаковка);
	ДопустимыеВложенияАгретовНСП.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"),     ВложенияГрупповаяУпаковка);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция"), ДопустимыеВложенияАгретовНСП);
	
	// Табак
	ДопустимыеВложенияАгретовТабак = Новый Соответствие;
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC"),          ВложенияПоТипуШтрихкодаSSCC);
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128"),       ВложенияПоТипуШтрихкодаGS1Табак);
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая"), ВложенияЛогистическаяУпаковкаТабак);
	ДопустимыеВложенияАгретовТабак.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"),     ВложенияГрупповаяУпаковка);
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"), ДопустимыеВложенияАгретовТабак);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДопустимуюВложенностьУпаковок(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
		РодительТекущейСтроки = ТекущаяСтрока.ПолучитьРодителя();
	Иначе
		РодительТекущейСтроки = ТекущаяСтрока.Родитель;
	КонецЕсли;
	
	Если РодительТекущейСтроки <> Неопределено И ТипЗнч(РодительТекущейСтроки.ТипУпаковки) = Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда 
		
		ДопустимыеВложенияАгрегатов = ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов;
		
		ДопустимыеВложенияПоВидуУпаковки  = ДопустимыеВложенияАгрегатов.Получить(РодительТекущейСтроки.ВидУпаковки);
		ДопустимыеВложенияПоТипуШтрихкода = ДопустимыеВложенияАгрегатов.Получить(РодительТекущейСтроки.ТипШтрихкода);
		
		СтрокаОшибки = "";
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВидУпаковки) Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.'"),
				ТекущаяСтрока.Штрихкод);
			
		ИначеЕсли Не ЗначениеЗаполнено(РодительТекущейСтроки.ВидУпаковки) Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось определить вид упаковки (не заполнен коэффициент) для %1.'"),
				РодительТекущейСтроки.Штрихкод);
			
		ИначеЕсли ДопустимыеВложенияПоВидуУпаковки <> Неопределено
			И ДопустимыеВложенияПоВидуУпаковки.Найти(ТекущаяСтрока.ВидУпаковки) = Неопределено
			И (РодительТекущейСтроки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			   Или РодительТекущейСтроки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			       И ДопустимыеВложенияПоТипуШтрихкода <> Неопределено
			       И ДопустимыеВложенияПоТипуШтрихкода.Найти(ТекущаяСтрока.ВидУпаковки) = Неопределено) Тогда
			
			СтрокаОшибки = СтрШаблон(
				НСтр("ru = '%1 упаковка не может содержать %2'"),
				РодительТекущейСтроки.ВидУпаковки,
				ТекущаяСтрока.ВидУпаковки);
			
		ИначеЕсли ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			И ДопустимыеВложенияПоТипуШтрихкода <> Неопределено Тогда
			
			Если ДопустимыеВложенияПоТипуШтрихкода.Найти(ТекущаяСтрока.ТипШтрихкода) = Неопределено Тогда
				
				СтрокаОшибки = СтрШаблон(
					НСтр("ru = 'Упаковка %1 не может содержать %2'"),
					РодительТекущейСтроки.ТипШтрихкода,
					ТекущаяСтрока.ТипШтрихкода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			
			РодительТекущейСтроки.НедопустимыйКодМаркировки = Истина;
			РодительТекущейСтроки.ПредставлениеПроверкиКодаМаркировки = СтрокаОшибки;
			
		КонецЕсли;
		
		Если ПараметрыПроверкиКодовМаркировки.Свойство("КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева")
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева Тогда
			
			ПроверитьСоставАгрегата(РодительТекущейСтроки, ПараметрыПроверкиКодовМаркировки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоставАгрегата(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегата
		Или ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставАгрегатаПриИзмененииСтрокиДерева
		И ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		СтрокаОшибки = "";
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Иначе
			ВложенныеСтроки = ТекущаяСтрока.Строки;
		КонецЕсли;
		
		ТекущийВидУпаковки = Неопределено;
		
		Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтроки Цикл
			
			Если ТекущийВидУпаковки = Неопределено Тогда
				ТекущийВидУпаковки = ВложеннаяСтрокаДерева.ВидУпаковки;
				Продолжить;
			КонецЕсли;
			
			Если ВложеннаяСтрокаДерева.ВидУпаковки <> ТекущийВидУпаковки Тогда
				
				СтрокаОшибки = СтрШаблон(
					НСтр("ru = '%1 упаковка может содержать только один вид упаковок (логистические, групповые или потребительские)'"),
					ТекущаяСтрока.ВидУпаковки);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
				+ СтрокаОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставГрупповойУпаковки
		Или ПараметрыПроверкиКодовМаркировки.КонтролироватьСоставГрупповойУпаковкиПриИзмененииСтрокиДерева
		И ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		
		ТекущийТипШтрихкода = Неопределено;
		СтрокаОшибки = "";
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеСтрокиГрупповойУпаковки = ТекущаяСтрока.ПолучитьЭлементы();
		Иначе
			ВложенныеСтрокиГрупповойУпаковки = ТекущаяСтрока.Строки;
		КонецЕсли;
		
		Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтрокиГрупповойУпаковки Цикл
			
			Если ТекущийТипШтрихкода = Неопределено Тогда
				ТекущийТипШтрихкода = ВложеннаяСтрокаДерева.ТипШтрихкода;
				Продолжить;
			КонецЕсли;
			
			Если ВложеннаяСтрокаДерева.ТипШтрихкода <> ТекущийТипШтрихкода Тогда
				
				СтрокаОшибки = СтрШаблон(
					НСтр("ru = '%1 упаковка не может содержать разные шаблоны кодов маркировки'"),
					ТекущаяСтрока.ВидУпаковки);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
			
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
				+ СтрокаОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДопустимостьВложенияАгрегата(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ПараметрыПроверкиКодовМаркировки.Свойство("КонтролироватьВложенностьУпаковок")
		И ПараметрыПроверкиКодовМаркировки.КонтролироватьВложенностьУпаковок
		И ПараметрыПроверкиКодовМаркировки.ДопустимыеВложенияАгрегатов <> Неопределено Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки           = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Иначе
			ВложенныеСтроки = ТекущаяСтрока.Строки;
		КонецЕсли;
		
		Для Каждого ВложеннаяСтрокаДерева Из ВложенныеСтроки Цикл
			
			ПроверитьДопустимуюВложенностьУпаковок(ВложеннаяСтрокаДерева, ПараметрыПроверкиКодовМаркировки);
			
		КонецЦикла;
		
		Если ТекущаяСтрока.ОбработанСОшибкойВГИСМТ Тогда
			
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ")
				+ ТекущаяСтрока.ТекстОбработанСОшибкойВГИСМТ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Перемаркировка

// Формирует и отображает на форме информационную надпись о необходимости перемаркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(
		Форма, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПроверитьНеобходимостьПеремаркировки(
		Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

Процедура УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(
		СтрокаДерева, СоответствуетОтбору, ПроверкаИПодборПродукцииМОТПКлиентСервер);
	
КонецПроцедуры

Функция ЗаголовокТребуетсяПеремаркировка(Форма) Экспорт
	
	Возврат ПроверкаИПодборПродукцииИСМПКлиентСервер.ЗаголовокТребуетсяПеремаркировка(Форма);
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСтрокуПачкиБезБлока(ТекущаяСтрока, ВидПродукции) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки();
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока, ВидПродукции);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуБлокиБезКоробки(ТекущаяСтрока, ВидПродукции) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки();
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока, ВидПродукции);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

Функция ЭтоУпаковкаБлока(ТекущаяСтрока) Экспорт
	Возврат (ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
КонецФункции

Функция ЭтоУпаковкаНабор(ТекущаяСтрока) Экспорт
	Возврат (ТекущаяСтрока.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор"));
КонецФункции

#КонецОбласти


