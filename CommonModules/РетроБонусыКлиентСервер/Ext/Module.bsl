//@strict-types

#Область ПрограммныйИнтерфейс

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив из Строка - Массив имен реквизитов, для которых устанавливается видимость
//	МассивТолькоПросмотрРеквизитов - Массив из Строка - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьТолькоПросмотрЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивТолькоПросмотрРеквизитов) Экспорт
	
	Если ТипЗнч(МассивТолькоПросмотрРеквизитов) <> Тип("Массив") Тогда
		МассивТолькоПросмотрРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве реквизитов только просмотр, снимаем только просмотр элемента формы.
		ТолькоПросмотрРеквизита = (МассивТолькоПросмотрРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].ТолькоПросмотр <> ТолькоПросмотрРеквизита Тогда
			Элементы[ИмяРеквизита].ТолькоПросмотр = ТолькоПросмотрРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить установить значение списка выбора.
// 
// Параметры:
//  Объект - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента.Объект
//  ПутьКРеквизиту - Строка - Путь к реквизиту объекта формы, хранящего значение 
//  ДопустимыеЗначения - Массив из ПеречислениеСсылка - Массив допустимых значений для реквизита 
//
Процедура ПроверитьУстановитьЗначениеСпискаВыбора(Объект, Знач ПутьКРеквизиту, Знач ДопустимыеЗначения) Экспорт
	
	ТекущееЗначение = Объект[ПутьКРеквизиту]; // ПеречислениеСсылка
	
	Если ДопустимыеЗначения.Количество() = 0 Тогда
		
		Объект[ПутьКРеквизиту] = Неопределено;
		 
	ИначеЕсли ДопустимыеЗначения.Найти(ТекущееЗначение) = Неопределено Тогда
		
		Объект[ПутьКРеквизиту] = ДопустимыеЗначения[0];
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры для формирования списка доступных баз расчета продаж
//
// Возвращаемое значение:
//  Структура - Новые параметры доступных баз расчета продаж:
//	* БезРасчета - Булево - 
//	* ПоказательПродаж - ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов - 
//
Функция НовыеПараметрыДоступныхБазРасчетаПродаж() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"ПоказательПродаж",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.ПустаяСсылка"));
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава участников по виду ретро-бонуса
//
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхБазРасчетаПродаж
// 	  
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.БазыРасчетаПродажРетроБонусов
//
Функция ДоступныйСписокБазРасчетаПродаж(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	ПоказательПродаж = Параметры.ПоказательПродаж;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.БазыРасчетаПродажРетроБонусов
	
	Если БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ПустаяСсылка"));
		
	ИначеЕсли ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.Сумма") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаУпрУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаРеглУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаУпрУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаРеглУчет"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных отборов товаров
//
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* БезРасчета - Булево - 
//	* ПоказательПродаж - ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов - 
//	* БазаРасчетаПродаж - ПеречислениеСсылка.БазыРасчетаПродажРетроБонусов - 
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов -
//
Функция НовыеПараметрыДоступныхОтборовТоваров() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"ПоказательПродаж",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"БазаРасчетаПродаж",
		ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ПустаяСсылка"));
	НовыеПараметры.Вставить(
		"СоставТоваров",
		ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка"));
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава участников по виду ретро-бонуса
// 
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхОтборовТоваров
// 	  
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
//
Функция ДоступныйСписокОтборТоваров(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	БазаРасчетаПродаж = Параметры.БазаРасчетаПродаж;
	ПоказательПродаж = Параметры.ПоказательПродаж;
	СоставТоваров = Параметры.СоставТоваров;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
	
	Если БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка"));
		
	ИначеЕсли СоставТоваров = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.СегментыНоменклатуры") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	ИначеЕсли БазаРасчетаПродаж = ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены")
		  ИЛИ (ПоказательПродаж <> ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется")
			   И ПоказательПродаж <> ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.Сумма")) Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Все"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных отборов товаров
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* БезРасчета - Булево - 
//	* ИспользоватьСегментыПартнеров - Булево - 
//	* ИспользоватьДоговоры - Булево -
//	* ИспользоватьТиповыеСоглашения - Булево -
//	* ИспользоватьИндивидуальныеСоглашения - Булево -
// 
Функция НовыеПараметрыДоступныхСоставовУчастников() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить("ИспользоватьСегментыПартнеров", Ложь);
	НовыеПараметры.Вставить("ИспользоватьДоговоры", Ложь);
	НовыеПараметры.Вставить("ИспользоватьТиповыеСоглашения", Ложь);
	НовыеПараметры.Вставить("ИспользоватьИндивидуальныеСоглашения", Ложь);
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список состава участников по виду ретро-бонуса
// 
// Параметры:
// 	Параметры - см. НовыеПараметрыДоступныхСоставовУчастников
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
//
Функция ДоступныйСписокСоставУчастников(Параметры) Экспорт
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
	
	Если Параметры.БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Клиенты"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ИНН"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Клиенты"));
		
		Если Параметры.ИспользоватьСегментыПартнеров Тогда
			
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.СегментыПартнеров"));
			
		КонецЕсли;
		
		Если Параметры.ИспользоватьДоговоры Тогда
			
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры"));
			
		КонецЕсли;
		
		Если Параметры.ИспользоватьТиповыеСоглашения
		 ИЛИ Параметры.ИспользоватьИндивидуальныеСоглашения Тогда
			
			Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Соглашения"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных отборов товаров
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* БезРасчета - Булево - 
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов - 
// 
Функция НовыеПараметрыДоступныхОтборовУчастников() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("БезРасчета", Ложь);
	НовыеПараметры.Вставить(
		"СоставУчастников",
		ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.ПустаяСсылка"));
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список отбора участников по виду ретро-бонуса
// 
// Параметры:
//	Параметры - см. НовыеПараметрыДоступныхОтборовУчастников
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
//
Функция ДоступныйСписокОтбораУчастников(Параметры) Экспорт
	
	БезРасчета = Параметры.БезРасчета;
	СоставУчастников = Параметры.СоставУчастников;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.СоставыСписковРетроБонусов
	
	Если СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры")
	 ИЛИ СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Соглашения") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
	
	ИначеЕсли СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.СегментыПартнеров") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	ИначеЕсли БезРасчета Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		
	Иначе
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Все"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.КромеВыбранных"));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

// Параметры для формирования списка доступных периодичностей начислений
// 
// Возвращаемое значение:
//  Структура - Новые параметры доступных отборов товаров:
//	* ПоказательПродаж - ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов - - 
//	* ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов - 
// 
Функция НовыеПараметрыДоступныхПериодичностейНачислений() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить(
		"ПоказательПродаж",
		ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется"));
	НовыеПараметры.Вставить(
		"ПериодичностьУсловий",
		ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка"));
	
	Возврат НовыеПараметры;
	
КонецФункции

// Доступный список отбора участников по виду ретро-бонуса
// 
// Параметры:
//	Параметры - см. НовыеПараметрыДоступныхПериодичностейНачислений
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ПериодичностиРетроБонусов
//
Функция ДоступныйСписокПериодичностьНачислений(Параметры) Экспорт
	
	ПоказательПродаж = Параметры.ПоказательПродаж;
	ПериодичностьУсловий = Параметры.ПериодичностьУсловий;
	
	Значения = Новый Массив; // Массив из ПеречислениеСсылка.ПериодичностиРетроБонусов
	Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно"));
	
	Если ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.День"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.День") Тогда
		
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.День"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Неделя"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Месяц"));
		Значения.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Квартал"));
		
	ИначеЕсли ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ВесьПериод")
		  ИЛИ ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка") Тогда
		
		// Допускается установка только однократного начисления
		
	Иначе
		
		ШаблонТекста = НСтр("ru = 'Недопустимое значение ""%1"" %2 в %3'");
		ИмяРеквизита = "Объект.ПериодичностьУсловий";
		ИмяОбщегоМодуля = "РетроБонусыКлиентСервер.ДоступныйСписокПериодичностьНачислений";
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			Строка(ПериодичностьУсловий),
			ИмяРеквизита,
			ИмяОбщегоМодуля);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ПоказательПродаж - ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
// 
// Возвращаемое значение:
//  Булево
//
Функция ИспользуетсяПериодУсловийТоваров(ПоказательПродаж) Экспорт
	
	Результат = Истина;
	
	Если ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.КоличествоСовокупно")
	 ИЛИ ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.ПакетноеПредложение") Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Параметры - Структура:
// * ВалютаДокумента - СправочникСсылка.Валюты - 
// * КурсЧислитель - Число - 
// * КурсЗнаменатель - Число - 
// * ВалютаВзаиморасчетов - СправочникСсылка.Валюты -
//  Сумма - Число -
// 	ВалютаРеглУчета - СправочникСсылка.Валюты -  
// 
// Возвращаемое значение:
//  Число
//
Функция ПересчитатьСуммуВзаиморасчетовВСтроке(Параметры, Знач Сумма, ВалютаРеглУчета) Экспорт
	
	СуммаВзаиморасчетов = 0;
	
	Если Параметры.ВалютаДокумента = ВалютаРеглУчета
	   И Параметры.ВалютаВзаиморасчетов <> ВалютаРеглУчета Тогда
		
		ЧислительВалютыВзаиморасчетов = Параметры.КурсЧислитель;
		ЗнаменательВалютыВзаиморасчетов = Параметры.КурсЗнаменатель;
		ЧислительВалютыДокумента = 1;
		ЗнаменательВалютыДокумента = 1;
		
	Иначе
		
		ЧислительВалютыДокумента = Параметры.КурсЧислитель;
		ЗнаменательВалютыДокумента = Параметры.КурсЗнаменатель;
		ЧислительВалютыВзаиморасчетов = 1;
		ЗнаменательВалютыВзаиморасчетов = 1;
		
	КонецЕсли;
	
	Если Параметры.ВалютаДокумента = Параметры.ВалютаВзаиморасчетов Тогда
		
		СуммаВзаиморасчетов = Сумма;
		
	ИначеЕсли Параметры.ВалютаВзаиморасчетов = ВалютаРеглУчета
		  ИЛИ Параметры.ВалютаДокумента = ВалютаРеглУчета Тогда
		
		ПараметрыВалютыДок = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
			Параметры.ВалютаДокумента, ЧислительВалютыДокумента, ЗнаменательВалютыДокумента);
		ПараметрыВалютыВР  = Новый Структура("Валюта, КурсЧислитель, КурсЗнаменатель",
			Параметры.ВалютаВзаиморасчетов, ЧислительВалютыВзаиморасчетов, ЗнаменательВалютыВзаиморасчетов);
		
		СуммаВзаиморасчетов = РаботаСКурсамиВалютУТКлиентСервер.ПересчитатьПоКурсу(
			Сумма, ПараметрыВалютыДок, ПараметрыВалютыВР);
		
	Иначе
		
		Если ЧислительВалютыДокумента = 0
		 ИЛИ ЗнаменательВалютыДокумента = 0 Тогда
			
			СуммаВзаиморасчетов = 0;
			
		Иначе
			
			СуммаВзаиморасчетов = Сумма * ЧислительВалютыДокумента / ЗнаменательВалютыДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаВзаиморасчетов;
	
КонецФункции

#КонецОбласти