
#Область ПрограммныйИнтерфейс

#Область КлиентскаяБиблиотека

// Определяет право пользователя на использование сервиса EDI
// 
// Возвращаемое значение:
//  Булево - Истина - в случае, если используется EDI и у пользователя достаточно прав для использования,
//           Ложь - в ином случае.
Функция ЕстьПравоИспользованияEDI() Экспорт
	
	ЕстьПравоИспользоватьEDI = Пользователи.ЭтоПолноправныйПользователь() 
		Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияДокументовEDI);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменEDI") 
		Или Не ЕстьПравоИспользоватьEDI Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

#Область ОбработчикиСобытийФормы

// Обработчик подключения функций сервиса EDI к форме документа
// 
// Параметры:
// 	ПараметрыФормыДокумента - Структура - см. ДокументыEDIИнтеграция.ПараметрыПриСозданииФормыДокумента()
Процедура ПриСозданииНаСервере(ПараметрыФормыДокумента) Экспорт
	
	ФормаДокумента = ПараметрыФормыДокумента.ФормаДокумента;
	
	ДобавитьРеквизитыФормы(ФормаДокумента);
	ФормаДокумента.СвойстваEDI = НовыйСвойстваEDI(ПараметрыФормыДокумента.НастройкиФормы);
	ФормаДокумента.СвойстваEDI.МестоРазмещенияКоманд = ПараметрыФормыДокумента.МестоРазмещенияКоманд;
	
	ФормаДокумента.СвойстваEDI.ТипДокумента = ТипДокументаEDIПоТипуПрикладногоДокумента(ТипЗнч(ФормаДокумента.Объект.Ссылка));
	
	Если Не ИспользоватьПодсистему(ФормаДокумента.СвойстваEDI.ТипДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьФорму(ФормаДокумента);
	ПриСозданииЧтенииНаСервере(ФормаДокумента);
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента, Истина);
	
КонецПроцедуры

// Обработчик ПриЧтенииНаСервере формы документа, подключаемого к сервису EDI
// 
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма документа, подключаемого к сервису EDI
Процедура ПриЧтенииНаСервере(ФормаДокумента) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ПриСозданииЧтенииНаСервере(ФормаДокумента);
	
КонецПроцедуры

#Область ФормаСпискаПрикладныхДокументов

// Обработчик события ПриПолученииДанныхНаСервере в формах списков прикладных документов
// 
// Параметры:
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовEDI - тип документа.
// 	ИмяЭлемента  - Строка - содержит имя таблицы формы, из которой вызван обработчик события.
// 	Настройки    - НастройкиКомпоновкиДанных - содержит копию полных настроек динамического списка.
// 	Строки       - СтрокиДинамическогоСписка - коллекция содержит данные и оформление всех строк, получаемых в списке, кроме строк группировок
//
Процедура ПриПолученииДанныхНаСервереСписокДокументов(ТипДокумента, ИмяЭлемента, Настройки, Строки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменEDI") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Строки Цикл
		
		ДанныеСтроки = ЭлементКоллекции.Значение.Данные;
		
		Если Не ДанныеСтроки.Свойство("ТекущийСтатусEDI") Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеДокумента = ДокументыEDI.ДанныеДокументаДляФормированияСостояния();
		ДанныеДокумента.ТекущийСтатус                                  = ДанныеСтроки.ТекущийСтатусEDI;
		ДанныеДокумента.ПредыдущийСтатус                               = ДанныеСтроки.ПредыдущийСтатусEDI;
		ДанныеДокумента.ПоследнееДействие                              = ДанныеСтроки.ПоследнееДействиеEDI;
		ДанныеДокумента.СторонаВыполнившаяДействие                     = ДанныеСтроки.СторонаВыполнившаяДействиеEDI;
		ДанныеДокумента.ДатаТекущегоСтатуса                            = ДанныеСтроки.ДатаТекущегоСтатусаEDI;
		ДанныеДокумента.ДатаУточнениеСостоянияПоДаннымСтороныУчастника = ДанныеСтроки.ДатаУточнениеСостоянияПоДаннымСтороныУчастникаEDI;
		ДанныеДокумента.УточнениеСостоянияПоДаннымСтороныУчастника     = ДанныеСтроки.УточнениеСостоянияПоДаннымСтороныУчастникаEDI;
		ДанныеДокумента.ТипДокумента                                   = ДанныеСтроки.ТипДокументаEDI;
		ДанныеДокумента.СостояниеПрикладногоОбъекта                    = ДанныеСтроки.СостояниеПрикладногоОбъектаEDI;
		
		ДанныеСтроки.СостояниеEDI = ПредставлениеСостоянияEDIПрикладногоДокумента(ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор параметров внедрения подсистемы EDI в форму списка прикладных документов
// 
// Возвращаемое значение:
//   Структура - содержит:
//     * ИмяГруппыРазмещенияЭлементаПереходВСписокДокументыКЗагрузке - Строка - имя группы, в которой будет размещена декорация перехода в список документов к загрузке.
//     * ОтображатьПереходВСписокДокументыКЗагрузке                  - Булево - необходимость отображения перехода в список документов к загрузке.
//     * СостояниеEDIРазмещатьПередЭлементом                         - Строка - имя колонки списка, перед которой будет размещена колонка "Состояние EDI"
//     * ИмяПсевдонимаОсновнойТаблицы                                - Строка - имя псевдонима основной таблицы.
//     * ИмяГруппыРазмещенияЭлементаБыстрогоОтбора                   - Строка - имя группы, в которой будет размещен элемент быстрого отбора по состоянию EDI. 
//     * ТипДокумента                                                - ПеречислениеСсылка.ТипыДокументовEDI - тип документа EDI, соответствующий документу списка. 
//     * ИмяЭлементаФормыСписок                                      - Строка - имя элемента формы списка. 
//     * ИмяРеквизитаСписок                                          - Строка - имя реквизита формы, в котором содержится динамический список. 
//     * ИспользоватьОбменEDI                                        - Булево - признак использования EDI.
//
Функция ПараметрыФормыСпискаПрикладногоДокументаEDI() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИспользоватьОбменEDI"                                       , Истина);
	Параметры.Вставить("ИмяРеквизитаСписок"                                         , "");
	Параметры.Вставить("ИмяЭлементаФормыСписок"                                     , "");
	Параметры.Вставить("ТипДокумента"                                               , "");
	Параметры.Вставить("ИмяГруппыРазмещенияЭлементаБыстрогоОтбора"                  , "");
	Параметры.Вставить("ИмяПсевдонимаОсновнойТаблицы"                               , "");
	Параметры.Вставить("СостояниеEDIРазмещатьПередЭлементом"                        , "");
	Параметры.Вставить("ОтображатьПереходВСписокДокументыКЗагрузке"                 , Ложь);
	Параметры.Вставить("ИмяГруппыРазмещенияЭлементаПереходВСписокДокументыКЗагрузке", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет внедрение подсистемы EDI при создании форм списков на сервере
// 
// Параметры:
// 	Форма                 - ФормаКлиентскогоПриложения - форма, в которой возникло событие.
// 	Отказ                 - Булево                     - признак отказа от создания формы.
// 	СтандартнаяОбработка  - Булево                     - признак выполнения стандартной (системной) обработки события.
// 	ПараметрыИнтеграции   - Структура                  - см.ПараметрыФормыСпискаПрикладногоДокументаEDI 
//
Процедура ФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ИспользоватьОбменEDI Тогда
		ТипДокумента = ТипДокументаEDIПоТипуПрикладногоДокумента(ПараметрыИнтеграции.ТипДокумента);
		ПараметрыИнтеграции.ИспользоватьОбменEDI = ИспользоватьПодсистему(ТипДокумента);
	КонецЕсли;
	
	ФормаСпискаПрикладныхОбъектовСоздатьДополнительныеРеквизитыФормы(Форма, ПараметрыИнтеграции);
	
	Если ПараметрыИнтеграции.ИспользоватьОбменEDI Тогда
		
		ФормаСпискаПрикладныхОбъектовПреобразоватьЗапросДинамическогоСписка(Форма, ПараметрыИнтеграции);
		ФормаСпискаПрикладныхОбъектовСоздатьДополнительныеЭлементыФормы(Форма, ПараметрыИнтеграции);
		ФормаСпискаПрикладныхОбъектовЗаполнитьОрганизацииТребующиеПовторногоПодключения(Форма);
		
		УсловноеОформлениеСписка = Форма[ПараметрыИнтеграции.ИмяЭлементаФормыСписок].КомпоновщикНастроек.Настройки.УсловноеОформление;
		ДокументыEDI.УстановитьУсловноеОформлениеСостояние(Форма, УсловноеОформлениеСписка, Истина);
		УстановитьУсловноеОформлениеСостояниеСоответствияПрикладногоДокумента(УсловноеОформлениеСписка);
	
	КонецЕсли;
	
	ФормаСпискаИнициализация(Форма, ПараметрыИнтеграции);
	
КонецПроцедуры

// Выполняет внедрение подсистемы EDI при загрузке данных из настроек на на сервере
// 
// Параметры:
// 	Форма     - ФормаКлиентскогоПриложения - форма, в которой возникло событие.
// 	Настройки - Соответствие - загружаемые настройки.
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	Если Не Форма.ИспользоватьОбменEDI Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ТипДокументаEDI) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	СервисEDIПереопределяемый.ПриЗагрузкеДанныхИзНастроекНаСервереФормаСпискаПрикладногоДокумента(Форма, Настройки, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеРеквизитаФормыПоНастройкам(Форма, "ИспользоватьОтборПоСтатусамEDI", Настройки);
	УстановитьЗначениеРеквизитаФормыПоНастройкам(Форма, "ИспользоватьОтборПоНеактуальнойВерсииEDI", Настройки);
	УстановитьЗначениеРеквизитаФормыПоНастройкам(Форма, "ВариантОтбораПоАктуальностиВерсииEDI", Настройки);
	УстановитьЗначениеРеквизитаФормыПоНастройкам(Форма, "ОтборСтатусыEDI", Настройки);
	
	ВыбранныеСтатусыEDI = Настройки.Получить("ВыбранныеСтатусыEDI");
	Если ВыбранныеСтатусыEDI <> Неопределено Тогда
		ДокументыEDIКлиентСервер.УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(Форма.ДеревоСтатусовEDI,
		                                                                                  ВыбранныеСтатусыEDI);
	КонецЕсли;
	
	ДокументыEDIИнтеграцияКлиентСервер.ИзменитьОтборыСписокСтатусыEDI(Форма);
	
КонецПроцедуры

//  Выполняет внедрение подсистемы EDI при сохранении данных в настройках на сервере
// 
// Параметры:
// 	Форма     - ФормаКлиентскогоПриложения - форма, в которой возникло событие.
// 	Настройки - Соответствие - сохраняемые настройки.
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт
	
	Если Не Форма.ИспользоватьОбменEDI Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ТипДокументаEDI) Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ИспользоватьОтборПоСтатусамEDI",           Форма.ИспользоватьОтборПоСтатусамEDI);
	Настройки.Вставить("ИспользоватьОтборПоНеактуальнойВерсииEDI", Форма.ИспользоватьОтборПоНеактуальнойВерсииEDI);
	Настройки.Вставить("ВариантОтбораПоАктуальностиВерсииEDI",     Форма.ВариантОтбораПоАктуальностиВерсииEDI);
	Настройки.Вставить("ОтборСтатусыEDI",                          Форма.ОтборСтатусыEDI);
	Настройки.Вставить("ВыбранныеСтатусыEDI",                      ДокументыEDIКлиентСервер.ВыбранныеВДеревеСтатусыДокументов(Форма.ДеревоСтатусовEDI));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик выполнения подключаемой команды сервиса EDI на сервере.
// 
// Параметры:
// 	ФормаДокумента          - ФормаКлиентскогоПриложения - форма документа, подключаемого к сервису EDI
// 	ИмяКоманды              - Строка                     - строковый идентификатор команды документа
// 	ДополнительныеПараметры - Структура                  - дополнительные параметры выполнения команды
Процедура ВыполнитьКоманду(ФормаДокумента, ИмяКоманды, ДополнительныеПараметры) Экспорт
	
	Если ИмяКоманды = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторКомандыИнициализироватьФорму() Тогда
		
		ИнициализироватьФорму(ФормаДокумента);
		ПриСозданииЧтенииНаСервере(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторКомандыИнициализироватьТабличнуюЧастьСообщений() Тогда
		
		ИнициализироватьТабличнуюЧастьСообщений(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторКомандыВывестиСтатичныеСообщенияПротоколаВзаимодействия() Тогда
		
		ВывестиСтатичныеСообщенияПротоколаВзаимодействия(ФормаДокумента, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Конструктор параметров подключения формы к сервису EDI
// 
// Возвращаемое значение:
//  Структура - Описание:
//    * ФормаДокумента        - ФормаКлиентскогоПриложения - подключаемая к сервису форма документа
//    * НастройкиФормы        - Структура                  - сведения о настройках формы:
//      * ИмяРеквизитаОрганизация - Строка - путь к данным реквизита организации документа
//      * ИмяРеквизитаКонтрагент  - Строка - путь к данным реквизита контрагента документа
//      * ИмяРеквизитаМенеджер    - Строка - путь к данным реквизита менеджера документа
//      * ИмяГруппыФормыПанельСостояния               - Строка - имя группы для размещения панели состоянияEDI
//      * ИмяГруппыФормыПанельПротоколаВзаимодействия - Строка - имя группы для размещения протокола взаимодействия EDI
//    * МестоРазмещенияКоманд - Строка - имя группы формы для расположения подключаемых команд
Функция ПараметрыПриСозданииФормыДокумента() Экспорт
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ИмяРеквизитаОрганизация"                     , "");
	НастройкиФормы.Вставить("ИмяРеквизитаКонтрагент"                      , "");
	НастройкиФормы.Вставить("ИмяРеквизитаМенеджер"                        , "");
	НастройкиФормы.Вставить("ИмяГруппыФормыПанельСостояния"               , "");
	НастройкиФормы.Вставить("ИмяГруппыФормыПанельПротоколаВзаимодействия" , "");
	
	ПараметрыФормыДокумента = Новый Структура;
	ПараметрыФормыДокумента.Вставить("ФормаДокумента"                             , "");
	ПараметрыФормыДокумента.Вставить("НастройкиФормы"                             , НастройкиФормы);
	ПараметрыФормыДокумента.Вставить("МестоРазмещенияКоманд"                      , "");
	
	Возврат ПараметрыФормыДокумента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует массив типов документов, доступных пользователю по правам.
// 
// Параметры:
// 	МассивТипов - Массив - типы документов, для которых надо определить доступны ли они пользователю.
// Возвращаемое значение:
// 	Массив - типы документов, доступные пользователю по правам.
//
Функция МассивТиповДокументовДоступныхПоПравам(МассивТипов) Экспорт
	
	МассивДоступныхТипов = Новый Массив;
	
	НастройкиУчета = НастройкиEDI.НастройкиУчета();
	
	Для Каждого ТипДокументаEDI Из МассивТипов Цикл
		
		ТипПрикладногоДокумента = НастройкиУчета.СоответствиеДокументовEDIПрикладнымОбъектам.Получить(ТипДокументаEDI);
		
		Если ТипПрикладногоДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипПрикладногоДокумента);
		
		Если МетаданныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДоступныхТипов.Добавить(ТипДокументаEDI);
		
	КонецЦикла;
	
	Возврат МассивДоступныхТипов;
	
КонецФункции

// Заполняет таблицу, которая используется при формировании отбора по документам 
// 
// Параметры:
// 	ТаблицаДокументов   - ТаблицаЗначений - формируемая таблица.
// 	КатегорияДокументов - ПеречислениеСсылка.КатегорииДокументовEDI - категория документов EDI.
//
Процедура ЗаполнитьТаблицуОтбораДокументов(ТаблицаДокументов,  КатегорияДокументов) Экспорт
	
	Если КатегорияДокументов = Перечисления.КатегорииДокументовEDI.Закупка Тогда
		МассивТипов  = МассивИдентификаторовДокументовЗакупки();
	ИначеЕсли КатегорияДокументов = Перечисления.КатегорииДокументовEDI.Продажа Тогда
		МассивТипов  = МассивИдентификаторовДокументовПродажи();
	КонецЕсли;
	
	Для Каждого ТипДокумента Из МассивТипов Цикл
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		
		НоваяСтрока.ИдентификаторыОбъектаМетаданных = ТипДокумента;
		НоваяСтрока.Выбран                          = Истина;
		НоваяСтрока.Представление                   = Строка(ТипДокумента);
		НоваяСтрока.ТипДокумента                    = ТипДокумента;
		
	КонецЦикла
	
КонецПроцедуры

Функция НавигационнаяСсылкаПоИдентификаторуВерсииДокумента(ИдентификаторДокумента, ИдентификаторВерсииДокумента) Экспорт
	Возврат СтрШаблон("edi://document/%1/version/%2", ИдентификаторДокумента, ИдентификаторВерсииДокумента);
КонецФункции

Функция МассивИдентификаторовДокументовЗакупки() Экспорт
	
	Возврат МассивТиповДокументовДоступныхПоПравам(МассивТиповДокументовEDIЗакупки());
	
КонецФункции

Функция МассивИдентификаторовДокументовПродажи() Экспорт
	
	Возврат МассивТиповДокументовДоступныхПоПравам(МассивТиповДокументовEDIПродажи());
	
КонецФункции

Функция ХэшТипаДокументаИСтатуса(ИдентификаторТипаДокумента, СтатусДокумента) Экспорт

	Возврат РегистрыСведений.СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса(ИдентификаторТипаДокумента, СтатусДокумента);

КонецФункции

Функция ЗапросПоЗаполнениюКоличестваВДеревеСтатусов(Форма) Экспорт
	
	ИдентификаторыДокументов = ДокументыEDI.ИдентификаторыВыбранныхТиповДокументов(Форма.ТипыДокументов);
	Менеджер                 = Форма.Менеджер;
	Организация              = Форма.Организация;
	СостояниеСоответствия    = Форма.СтатусСоответствияОтбор;
	
	УсловиеПоТипамДокументов       = "ТекущиеИтогиПоСтатусамEDI.ТипДокумента В (&ТипыДокументов)";
	УсловиеПоМенеджеру             = "ТекущиеИтогиПоСтатусамEDI.Менеджер = &Менеджер";
	УсловиеПоОрганизации           = "ТекущиеИтогиПоСтатусамEDI.Организация = &Организация";
	УсловиеПоСостояниюСоответствия = "ТекущиеИтогиПоСтатусамEDI.СостояниеСоответствия = &СостояниеСоответствия";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТекущиеИтогиПоСтатусамEDI.Статус                      КАК Статус,
	|	СУММА(ТекущиеИтогиПоСтатусамEDI.КоличествоДокументов) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.ТекущиеИтогиПоСтатусамEDI КАК ТекущиеИтогиПоСтатусамEDI
	|ГДЕ
	|	&УсловиеПоТипамДокументов
	|	И &УсловиеПоМенеджеру
	|	И &УсловиеПоОрганизации
	|	И &СостояниеСоответствия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеИтогиПоСтатусамEDI.Статус";
	
	Запрос.УстановитьПараметр("Менеджер",              Менеджер);
	Запрос.УстановитьПараметр("ТипыДокументов",        ИдентификаторыДокументов);
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("СостояниеСоответствия", СостояниеСоответствия);
	
	ЕстьХотьОдноУсловиеЗапроса = Ложь;
	
	Если ИдентификаторыДокументов.Количество() = 0  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоТипамДокументов", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоТипамДокументов", УсловиеПоТипамДокументов);
		ЕстьХотьОдноУсловиеЗапроса = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоМенеджеру", "");
	Иначе
		Если Не ЕстьХотьОдноУсловиеЗапроса Тогда
			ЧтоЗаменять = "И &УсловиеПоМенеджеру";
		Иначе
			ЧтоЗаменять = "&УсловиеПоМенеджеру";
		КонецЕсли;
		ЕстьХотьОдноУсловиеЗапроса = Истина;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧтоЗаменять, УсловиеПоМенеджеру); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоОрганизации", "");
	Иначе
		Если Не ЕстьХотьОдноУсловиеЗапроса Тогда
			ЧтоЗаменять = "И &УсловиеПоОрганизации";
		Иначе
			ЧтоЗаменять = "&УсловиеПоОрганизации";
		КонецЕсли;
		ЕстьХотьОдноУсловиеЗапроса = Истина;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧтоЗаменять, УсловиеПоОрганизации); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СостояниеСоответствия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &СостояниеСоответствия", "");
	Иначе
		Если Не ЕстьХотьОдноУсловиеЗапроса Тогда
			ЧтоЗаменять = "И &СостояниеСоответствия";
		Иначе
			ЧтоЗаменять = "&СостояниеСоответствия";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЧтоЗаменять, УсловиеПоСостояниюСоответствия);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ПриУстановкеОтборовПриСозданииНаСервере(Форма) Экспорт
	
	СтруктураБыстрогоОтбора = Неопределено;
	Форма.Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыEDIКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Форма.Список,
	                                                                       "Организация",
	                                                                       Форма.Организация,
	                                                                       СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора.Свойство("СтатусСоответствия") Тогда
		Форма.СтатусСоответствияОтбор = СтруктураБыстрогоОтбора.СтатусСоответствия;
		УстановитьОтборСтатусСоответствияПрикладногоОбъекта(Форма);
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПередЗагрузкойДанныхИзНастроекНаСервереФормыСписка(Форма, Настройки) Экспорт
	
	ДокументыEDIКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Форма.Список,
	                                                                           "Организация",
	                                                                           Форма.Организация,
	                                                                           Форма.СтруктураБыстрогоОтбора, 
	                                                                           Настройки);
	
	Если Не Форма.Параметры.Свойство("СтруктураБыстрогоОтбора")
		Или Форма.Параметры.СтруктураБыстрогоОтбора = Неопределено Тогда
		
		ЗначениеНастройки = Настройки.Получить("ОтборПоСтатусамОтображается");
		Если ЗначениеНастройки <> Неопределено Тогда
			Форма.СтатусСоответствияОтбор = ЗначениеНастройки;
			УстановитьОтборСтатусСоответствияПрикладногоОбъекта(Форма);
		КонецЕсли;
		
	Иначе
		
		Если Настройки.Получить("СтатусСоответствияОтбор") <> Неопределено Тогда
			Настройки.Удалить("СтатусСоответствияОтбор");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТекстЗапросУстановитьПараметрыПоНастройкамПоставщикаEDI(Запрос, Поставщик) Экспорт
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиПоставщикаEDI.Покупатель                   КАК Покупатель,
	|	НастройкиПоставщикаEDI.РежимРаботыСЗаказамиКлиентов КАК РежимРаботыСЗаказамиКлиентов
	|ИЗ
	|	РегистрСведений.НастройкиПоставщикаEDI КАК НастройкиПоставщикаEDI
	|ГДЕ
	|	НастройкиПоставщикаEDI.Поставщик =  &Поставщик";
	
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	
КонецПроцедуры

#Область КлиентскаяБиблиотека

Процедура УстановитьУсловноеОформлениеЗагруженныйДокумент(Форма, СписокУсловноеОформление) Экспорт
	
	// Выделение цветом не актуальная версия
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом в сервисе более актуальная версия'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПрикладнойОбъект");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВажнаяНадписьEDI);
	
	// Выделение цветом требуется сопоставление номенклатуры
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом требуется сопоставление номенклатуры.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПрикладнойОбъект");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТребуетсяСопоставлениеНоменклатуры;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВажнаяНадписьEDI);
	
	// Выделение цветом не удалось актуализировать версию в сервисе
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом не удалось актуализировать версию в сервисе.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПрикладнойОбъект");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеУдалосьАктуализироватьВерсиюВСервисе;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВажнаяНадписьEDI);
	
	// Выделение цветом не загруженные данные
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом отсутствующие прикладные объекты.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеСоздавался;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеважнаяНадписьEDI);
	
	// Скрытие колонки "статус соответствия" для актуальной версии
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие колонки ""Статус соответствия"" для актуальной версии.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусСоответствия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Скрытие колонки "Прикладной объект", если документ сервиса не загружен
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Скрытие колонки ""Прикладной объект"", если документ сервиса не загружен.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПрикладнойОбъект");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПрикладнойОбъект");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

Процедура СформироватьЗаголовокСмотриТакже(Форма, КатегорияДокументов) Экспорт
	
	МассивСтрок = Новый Массив;
	
	ТекстТекущиеДела            = НСтр("ru = 'Текущие дела'");
	ТекстГиперссылкиТекущиеДела = "ОткрытьТекущиеДелаEDI";
	СтрокаТекущиеДела = ФорматированнаяСтрокаСГиперссылкой(ТекстТекущиеДела, ТекстГиперссылкиТекущиеДела);
	
	МассивСтрок.Добавить(СтрокаТекущиеДела);
	
	МассивСтрок.Добавить("; ");
	
	ТекстЛентаСобытий            = НСтр("ru = 'Лента событий'");
	ТекстГиперссылкиЛентаСобытий = "ОткрытьЛентуСобытийEDI";
	СтрокаЛентаСобытий = ФорматированнаяСтрокаСГиперссылкой(ТекстЛентаСобытий, ТекстГиперссылкиЛентаСобытий);
	
	МассивСтрок.Добавить(СтрокаЛентаСобытий);
	
	Если КатегорияДокументов = Перечисления.КатегорииДокументовEDI.Закупка Тогда
		
		Если ДокументыEDI.МассивИдентификаторовДокументовПродажи().Количество() > 0 Тогда
			
			ТекстДокументыПродажи            = НСтр("ru = 'Документы продажи'");
			ТекстГиперссылкиДокументыПродажи = "ОткрытьДокументыПродажиEDI";
			СтрокаДокументыПродажи = ФорматированнаяСтрокаСГиперссылкой(ТекстДокументыПродажи, ТекстГиперссылкиДокументыПродажи);
			
			МассивСтрок.Добавить("; ");
			МассивСтрок.Добавить(СтрокаДокументыПродажи);
			
		КонецЕсли;
		
		Если МассивТиповДокументовДляКоторыхОтслеживаетсяОтправкаПоПрикладномуОбъекту().Количество() > 0
			И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НеОтправленныеПрикладныеОбъектыEDI) Тогда
			
			ТекстГотовыеКОтправке            = НСтр("ru = 'Документы к отправке в EDI'");
			ТекстГиперссылкиГотовыеКОтправке = "ОткрытьДокументыГотовыеКОтправкеEDI";
			СтрокаГотовыеКОтправке = ФорматированнаяСтрокаСГиперссылкой(ТекстГотовыеКОтправке, ТекстГиперссылкиГотовыеКОтправке);
			
			МассивСтрок.Добавить("; ");
			МассивСтрок.Добавить(СтрокаГотовыеКОтправке);
			
		КонецЕсли;
		
	ИначеЕсли КатегорияДокументов = Перечисления.КатегорииДокументовEDI.Продажа Тогда
		
		Если ДокументыEDI.МассивИдентификаторовДокументовЗакупки().Количество() > 0 Тогда
			
			ТекстДокументыЗакупки            = НСтр("ru = 'Документы закупки'");
			ТекстГиперссылкиДокументыЗакупки = "ОткрытьДокументыЗакупкиEDI";
			СтрокаДокументыЗакупки = ФорматированнаяСтрокаСГиперссылкой(ТекстДокументыЗакупки, ТекстГиперссылкиДокументыЗакупки);
			
			МассивСтрок.Добавить("; ");
			МассивСтрок.Добавить(СтрокаДокументыЗакупки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок.Вставить(0, " ");
		МассивСтрок.Вставить(0, НСтр("ru = 'См. также:'"));
	КонецЕсли;
	
	ИтоговаяСтрока = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Форма.Элементы.ДекорацияСмотриТакже.Заголовок = ИтоговаяСтрока;
	
КонецПроцедуры

Процедура УстановитьОтборСтатусСоответствияПрикладногоОбъекта(Форма) Экспорт
	
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
	                                                                                  НСтр("ru = 'Отбор по состоянию соответствия прикладного объекта EDI'"),
	                                                                                  ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Если ЗначениеЗаполнено(Форма.СтатусСоответствияОтбор) Тогда
		
		Если Форма.СтатусСоответствияОтбор = ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НетПрикладногоОбъекта") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаЭлементовОтбора,
				"ПрикладнойОбъект",
				ВидСравненияКомпоновкиДанных.ВСписке,
				МассивПустыхЗначенийПрикладныхОбъектов(),
				НСтр("ru = 'Отбор по отсутствующему прикладному объекту'"),
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаЭлементовОтбора,
				"СтатусСоответствия",
				ВидСравненияКомпоновкиДанных.Равно,
				Форма.СтатусСоответствияОтбор,
				НСтр("ru = 'Отбор по состоянию соответствия прикладного объекта EDI'"),
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиПодписокНаСобытия

Процедура ПрикладнойДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПрикладногоОбъектаEDI = ПараметрыПрикладногоДокументаДляОпределенияВозможностиОтправки();
	
	ЗаполнениеНеВыполнялось = Истина;
	
	СервисEDIПереопределяемый.ЗаполнитьДанныеПрикладногоДокумента(Источник.Ссылка, ДанныеПрикладногоОбъектаEDI, ЗаполнениеНеВыполнялось);
	
	Если ЗаполнениеНеВыполнялось Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйДокументEDI", Источник.ЭтоНовый());
	Источник.ДополнительныеСвойства.Вставить("ДанныеДляПредложенияОтправкиEDI", ДанныеПрикладногоОбъектаEDI);
	
КонецПроцедуры

Процедура ПрикладнойДокументПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ДанныеДляПредложенияОтправкиEDI") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПрикладногоОбъектаEDIДоЗаписи    = Источник.ДополнительныеСвойства.ДанныеДляПредложенияОтправкиEDI;
	ДанныеПрикладногоОбъектаEDIПослеЗаписи = ПараметрыПрикладногоДокументаДляОпределенияВозможностиОтправки();
	
	ЗаполнениеНеВыполнялось = Истина;
	
	СервисEDIПереопределяемый.ЗаполнитьДанныеПрикладногоДокумента(Источник.Ссылка, ДанныеПрикладногоОбъектаEDIПослеЗаписи, ЗаполнениеНеВыполнялось);
	
	Если ДокументыEDI.КоллекцииРавны(ДанныеПрикладногоОбъектаEDIДоЗаписи, ДанныеПрикладногоОбъектаEDIПослеЗаписи) Тогда
		Возврат
	КонецЕсли;
	
	ДанныеПрикладногоОбъектаEDIПослеЗаписи.Вставить("ПрикладнойОбъект", Источник.Ссылка);
	
	РегистрыСведений.НеОтправленныеПрикладныеОбъектыEDI.ОтразитьНеобходимостьОтправкиПоДаннымДокумента(ДанныеПрикладногоОбъектаEDIПослеЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПриОпределенииВыполненииДоступныхДействий

Функция ТаблицаДоступныхКатегорийКоманд(МассивКатегорийКоманд) Экспорт
	
	ТаблицаКатегорий = НовыйТаблицаДоступныхКатегорийКомандПриВыводеДоступныхДействий();
	Для Каждого КатегорияКоманды Из МассивКатегорийКоманд Цикл
		НоваяСтрока = ТаблицаКатегорий.Добавить();
		НоваяСтрока.КатегорияКоманды = КатегорияКоманды;
		НоваяСтрока.Доступно         = Истина;
	КонецЦикла;
	
	Возврат ТаблицаКатегорий;
	
КонецФункции

Функция ДоступноВыполнениеКомандыДокумента(ПрикладнойОбъект, Команда) Экспорт
	
	ПараметрыВыполнения = НовыйВозможностьДействияСервисаПриВыполнении();
	ПараметрыВыполнения.ПрикладнойОбъект = ПрикладнойОбъект;
	ПараметрыВыполнения.КатегорияКоманды = КатегорияКомандыДокумента(Команда);
	
	СервисEDIПереопределяемый.ПередВыполнениемКомандыСервиса(ПараметрыВыполнения);
	
	Если Не ПараметрыВыполнения.Доступно Тогда
		ОбщегоНазначения.СообщитьПользователю(ПараметрыВыполнения.ПояснениеНедоступности, ПрикладнойОбъект);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеПрикладныхДокументов

Функция РезультатЗагрузкиОбновленияПрикладныхДокументов(ПараметрыЗагрузки) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КоличествоВыбранных",                          ПараметрыЗагрузки.КоличествоВыбранных);
	РезультатОбновления.Вставить("КоличествоКЗагрузке",                          ПараметрыЗагрузки.КоличествоКЗагрузке);
	РезультатОбновления.Вставить("КоличествоЗагруженных",                        0);
	РезультатОбновления.Вставить("КоличествоНеЗагруженныхОшибка",                0);
	РезультатОбновления.Вставить("КоличествоТребуетсяСопоставлениеНоменклатуры", 0);
	РезультатОбновления.Вставить("НоменклатураКСопоставлению",                   Новый Массив);
	РезультатОбновления.Вставить("ДанныеНеЗагруженныхДокументовОшибка",          ПараметрыЗагрузки.ДанныеНеЗагруженныхДокументовОшибка);
	РезультатОбновления.Вставить("ДанныеДокументовТребуетсяСопоставление",       Новый Массив);
	РезультатОбновления.Вставить("РезультатТребуетсяСопоставление",              Новый Массив);
	
	ДанныеДокументовТребуетсяСопоставление = Новый Массив;
	
	
	Для Каждого ДанныеДокумента Из ПараметрыЗагрузки.ДокументыКЗагрузке Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеДокумента.Организация) Тогда
			
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                 ДанныеДокумента, 
			                                                                                 НСтр("ru = 'Не указана организация.'"),
			                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторВСервисе) Тогда
			
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                 ДанныеДокумента, 
			                                                                                 НСтр("ru = 'Не указан идентификатор в сервисе 1С:EDI.'"),
			                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ТипДокумента) Тогда
		
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                 ДанныеДокумента, 
			                                                                                 НСтр("ru = 'Не указан тип документа 1С:EDI.'"),
			                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеДокумента.Менеджер         = ?(ЗначениеЗаполнено(ДанныеДокумента.Менеджер),ДанныеДокумента.Менеджер, ТекущийПользователь);
		ДанныеДокумента.ПрикладнойОбъект = ?(ЗначениеЗаполнено(ДанныеДокумента.ПрикладнойОбъект), ДанныеДокумента.ПрикладнойОбъект, Неопределено);
		
		ПараметрыВыполненияЗапроса = Новый Структура;
		ПараметрыВыполненияЗапроса.Вставить("Организация",           ДанныеДокумента.Организация);
		ПараметрыВыполненияЗапроса.Вставить("ТипДокумента",          ДанныеДокумента.ТипДокумента);
		ПараметрыВыполненияЗапроса.Вставить("ИдентификаторВСервисе", ДанныеДокумента.ИдентификаторВСервисе);
		ПараметрыВыполненияЗапроса.Вставить("ПрикладнойОбъект",      ДанныеДокумента.ПрикладнойОбъект);
		
		ОтветСервиса = РаботаСДаннымиEDIСлужебный.ДанныеДокументаСервиса(ПараметрыВыполненияЗапроса);
	
		Если Не ЗначениеЗаполнено(ОтветСервиса) Или ОтветСервиса.Ошибка Тогда
			
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                 ДанныеДокумента, 
			                                                                                 ОтветСервиса.ТекстОшибки,
			                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			
			Продолжить;
		КонецЕсли;
		
		МодельЗаказа = ОтветСервиса.Данные.ДанныеДокумента;
		
		ОписаниеСтруктурыДанных = ИнтеграцияССервисомEDIСлужебный.ОписаниеСтруктурыДанныхЗаказа();
	
		ИнтеграцияССервисомEDIСлужебный.НормализоватьДанныеПоСхеме(МодельЗаказа, ОписаниеСтруктурыДанных);
		
		ЕстьОшибки = Ложь;
		ТекстОшибки = "";
		СтороныУчастники = МенеджерКонвертацииДанныхEDI.СтороныУчастники(ДанныеДокумента.ТипДокумента, МодельЗаказа, ЕстьОшибки, ТекстОшибки);
		Если ЕстьОшибки Тогда
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                 ДанныеДокумента, 
			                                                                                 ТекстОшибки,
			                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			
			Продолжить;
		КонецЕсли;
		
		РезультатСопоставления = МенеджерКонвертацииДанныхEDI.ТоварныеПозицииЗаказа(ДанныеДокумента.ТипДокумента, МодельЗаказа,, СтороныУчастники);
		Если РезультатСопоставления.ЕстьОшибки Тогда
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                 ДанныеДокумента, 
			                                                                                 РезультатСопоставления.ТекстОшибки,
			                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			
			Продолжить;
		КонецЕсли;
		
		// если сопоставлены не все товарные позиции - нужно обработать интерактивно
		Если Не РезультатСопоставления.ВсеСтрокиСопоставлены Тогда
			
			ВыполнитьЗаписьРеестраПоДаннымСервисаПриЗагрузкеОбновлении(ДанныеДокумента,
			                                                           ОтветСервиса, 
			                                                           Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТребуетсяСопоставлениеНоменклатуры, 
			                                                           ДанныеДокумента.ПрикладнойОбъект);
			
			ДобавитьДанныеНезагруженныхДокументовТребуетсяСопоставление(ДанныеДокументовТребуетсяСопоставление,
			                                                            ДанныеДокумента,
			                                                            ОтветСервиса,
			                                                            РезультатСопоставления);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбновления.НоменклатураКСопоставлению, РезультатСопоставления.НеСопоставленныеТоварныеПозиции);
			
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеДокументовТребуетсяСопоставление, 
			                                                                                 ДанныеДокумента, 
			                                                                                 НСтр("ru = 'Требуется сопоставление номенклатуры'"), 
			                                                                                 РезультатОбновления.КоличествоТребуетсяСопоставлениеНоменклатуры);

			
			Продолжить;
			
		КонецЕсли;
		
		РезультатЗагрузкиПрикладногоДокумента(ДанныеДокумента,
		                                      РезультатСопоставления.ТаблицаСопоставления,
		                                      МодельЗаказа,
		                                      РезультатОбновления,
		                                      ОтветСервиса,
		                                      СтороныУчастники);
		
	КонецЦикла;
	
	Если ДанныеДокументовТребуетсяСопоставление.Количество() > 0 Тогда
		РезультатОбновления.РезультатТребуетсяСопоставление = ДанныеДокументовТребуетсяСопоставление;
	КонецЕсли;
	
	Если РезультатОбновления.КоличествоЗагруженных > 0 Тогда
		РаботаСДаннымиEDIСлужебный.ВыполнитьСинхронизациюРегламентно();
	КонецЕсли;
	
	Возврат РезультатОбновления;
	
КонецФункции

Функция РезультатОбновленияДокументовПослеСопоставленияНоменклатуры(ПараметрыЗагрузки) Экспорт

	ДанныеДокументовТребующихСопоставления = ПараметрыЗагрузки.РезультатТребуетсяСопоставление;
	
	ТаблицаСопоставленнойНоменклатуры = СопоставлениеНоменклатурыКонтрагентовСлужебный.ТаблицаСопоставленнойНоменклатуры(ПараметрыЗагрузки.РезультатСопоставленияНоменклатуры);
	
	Для Каждого ДанныеДокумента Из ДанныеДокументовТребующихСопоставления Цикл
		
		ВсеСтрокиСопоставлены = Истина;
		ТаблицаСопоставленоПоДокументу = СопоставлениеНоменклатурыКонтрагентовСлужебный.ТаблицаСопоставленнойНоменклатурыИзНабораНеСопоставленныхНоменклатур(
			ТаблицаСопоставленнойНоменклатуры, 
			ДанныеДокумента.НеСопоставленныеТоварныеПозиции, 
			ВсеСтрокиСопоставлены);
			
		Если Не ВсеСтрокиСопоставлены Тогда
			
			 ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(ПараметрыЗагрузки.ДанныеНеЗагруженныхДокументовОшибка, 
			                                                                                  ДанныеДокумента, 
			                                                                                  НСтр("ru = 'Не была сопоставлена номенклатура документа.'"),
			                                                                                  ПараметрыЗагрузки.КоличествоНеЗагруженныхОшибка);
			
			ПараметрыЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры = ПараметрыЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры - 1;
			
			Продолжить;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСопоставленоПоДокументу, ДанныеДокумента.ТаблицаСопоставления);
		
		ОтветСервиса = ДанныеДокумента.ОтветСервиса;
		МодельЗаказа = ОтветСервиса.Данные.ДанныеДокумента;
		ОписаниеСтруктурыДанных = ИнтеграцияССервисомEDIСлужебный.ОписаниеСтруктурыДанныхЗаказа();
	
		ИнтеграцияССервисомEDIСлужебный.НормализоватьДанныеПоСхеме(МодельЗаказа,
		                                                           ОписаниеСтруктурыДанных);
		
		РезультатЗагрузкиПрикладногоДокумента(ДанныеДокумента,
		                                      ДанныеДокумента.ТаблицаСопоставления, 
		                                      МодельЗаказа,
		                                      ПараметрыЗагрузки,
		                                      ОтветСервиса);
		
		ПараметрыЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры = ПараметрыЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры - 1;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеНеЗагруженныхДокументовОшибка", ПараметрыЗагрузки.ДанныеНеЗагруженныхДокументовОшибка);
	Результат.Вставить("КоличествоВыбранных",                 ПараметрыЗагрузки.КоличествоВыбранных);
	Результат.Вставить("КоличествоЗагруженных",               ПараметрыЗагрузки.КоличествоЗагруженных);
	Результат.Вставить("КоличествоНеЗагруженныхОшибка",       ПараметрыЗагрузки.КоличествоНеЗагруженныхОшибка);
	
	Если Результат.КоличествоЗагруженных > 0 Тогда
		РаботаСДаннымиEDIСлужебный.ВыполнитьСинхронизациюРегламентно();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция РезультатОбновленияИЗагрузкиДокументовИзСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                Ложь);
	Результат.Вставить("ТекстОшибки",            "");
	Результат.Вставить("КоличествоЗагруженных",  0);
	Результат.Вставить("КоличествоОбработанных", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиИнтеграцииEDI.Организация КАК Организация,
	|	НастройкиИнтеграцииEDI.АвтоматическиЗагружаемЗаказыКлиента     КАК АвтоматическиЗагружаемЗаказыКлиента,
	|	НастройкиИнтеграцииEDI.АвтоматическиОбновляемЗаказыКлиента     КАК АвтоматическиОбновляемЗаказыКлиента,
	|	НастройкиИнтеграцииEDI.АвтоматическиОбновляемЗаказыПоставщикам КАК АвтоматическиОбновляемЗаказыПоставщикам
	|ПОМЕСТИТЬ НастройкиОрганизаций
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииEDI КАК НастройкиИнтеграцииEDI
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияДокументовEDI.СостояниеПрикладногоОбъекта КАК СостояниеПрикладногоОбъекта,
	|	СостоянияДокументовEDI.ТипДокумента                КАК ТипДокумента,
	|	СостоянияДокументовEDI.Организация                 КАК Организация,
	|	СостоянияДокументовEDI.ИдентификаторВСервисе       КАК ИдентификаторВСервисе,
	|	СостоянияДокументовEDI.НомерДокумента              КАК НомерДокумента,
	|	СостоянияДокументовEDI.Менеджер                    КАК Менеджер,
	|	СостоянияДокументовEDI.ПрикладнойОбъект            КАК ПрикладнойОбъект,
	|	СостоянияДокументовEDI.ДатаСоздания                КАК ДатаДокумента
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.Организация В
	|			(ВЫБРАТЬ
	|				НастройкиОрганизаций.Организация КАК Организация
	|			ИЗ
	|				НастройкиОрганизаций КАК НастройкиОрганизаций
	|			ГДЕ
	|				НастройкиОрганизаций.АвтоматическиЗагружаемЗаказыКлиента)
	|	И СостоянияДокументовEDI.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовEDI.ЗаказКлиента)
	|	И СостоянияДокументовEDI.СостояниеПрикладногоОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеСоздавался)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияДокументовEDI.СостояниеПрикладногоОбъекта,
	|	СостоянияДокументовEDI.ТипДокумента,
	|	СостоянияДокументовEDI.Организация,
	|	СостоянияДокументовEDI.ИдентификаторВСервисе,
	|	СостоянияДокументовEDI.НомерДокумента,
	|	СостоянияДокументовEDI.Менеджер,
	|	СостоянияДокументовEDI.ПрикладнойОбъект,
	|	СостоянияДокументовEDI.ДатаСоздания
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.Организация В
	|			(ВЫБРАТЬ
	|				НастройкиОрганизаций.Организация КАК Организация
	|			ИЗ
	|				НастройкиОрганизаций КАК НастройкиОрганизаций
	|			ГДЕ
	|				НастройкиОрганизаций.АвтоматическиОбновляемЗаказыКлиента)
	|	И СостоянияДокументовEDI.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовEDI.ЗаказКлиента)
	|	И СостоянияДокументовEDI.СостояниеПрикладногоОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияДокументовEDI.СостояниеПрикладногоОбъекта,
	|	СостоянияДокументовEDI.ТипДокумента,
	|	СостоянияДокументовEDI.Организация,
	|	СостоянияДокументовEDI.ИдентификаторВСервисе,
	|	СостоянияДокументовEDI.НомерДокумента,
	|	СостоянияДокументовEDI.Менеджер,
	|	СостоянияДокументовEDI.ПрикладнойОбъект,
	|	СостоянияДокументовEDI.ДатаСоздания
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.Организация В
	|			(ВЫБРАТЬ
	|				НастройкиОрганизаций.Организация КАК Организация
	|			ИЗ
	|				НастройкиОрганизаций КАК НастройкиОрганизаций
	|			ГДЕ
	|				НастройкиОрганизаций.АвтоматическиОбновляемЗаказыПоставщикам)
	|	И СостоянияДокументовEDI.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовEDI.ЗаказПоставщику)
	|	И СостоянияДокументовEDI.СостояниеПрикладногоОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыЗагрузкиДокументов = ДокументыEDIИнтеграцияКлиентСервер.ПараметрыЗагрузкиОбновленияДокументов();
	
	Пока Выборка.Следующий() Цикл
	
		ПараметрыЗагрузкиДокумента = ДокументыEDIИнтеграцияКлиентСервер.ПараметрыЗагрузкиОбновленияДокумента();
		
		ПараметрыЗагрузкиДокумента.ДатаДокумента         = Выборка.ДатаДокумента;
		ПараметрыЗагрузкиДокумента.Менеджер              = Выборка.Менеджер;
		ПараметрыЗагрузкиДокумента.ИдентификаторВСервисе = Выборка.ИдентификаторВСервисе;
		ПараметрыЗагрузкиДокумента.НомерДокумента        = Выборка.НомерДокумента;
		ПараметрыЗагрузкиДокумента.ДатаДокумента         = Выборка.ДатаДокумента;
		ПараметрыЗагрузкиДокумента.Организация           = Выборка.Организация;
		ПараметрыЗагрузкиДокумента.ПрикладнойОбъект      = Выборка.ПрикладнойОбъект;
		ПараметрыЗагрузкиДокумента.ТипДокумента          = Выборка.ТипДокумента;
		
		ПараметрыЗагрузкиДокументов.ДокументыКЗагрузке.Добавить(ПараметрыЗагрузкиДокумента);
		
		ПараметрыЗагрузкиДокументов.КоличествоВыбранных = ПараметрыЗагрузкиДокументов.КоличествоВыбранных + 1;
		ПараметрыЗагрузкиДокументов.КоличествоКЗагрузке = ПараметрыЗагрузкиДокументов.КоличествоКЗагрузке + 1;
		
	КонецЦикла;
	
	РезультатОбновления = РезультатЗагрузкиОбновленияПрикладныхДокументов(ПараметрыЗагрузкиДокументов);
	
	Если РезультатОбновления.КоличествоЗагруженных
		<> РезультатОбновления.КоличествоВыбранных Тогда
		
		Результат.Успешно = Ложь;
		
		ТекстОшибки = "";
		
		Если РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка.Количество() = РезультатОбновления.КоличествоВыбранных Тогда
			
			ТекстОшибки = НСтр("ru = 'При загрузке документов возникли ошибки. Подробности см. в журнале регистрации.'");
			
		ИначеЕсли РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка.Количество() > 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'При загрузке части документов возникли ошибки. Подробности см. в журнале регистрации.'");
			
		КонецЕсли;
		
		Если РезультатОбновления.КоличествоТребуетсяСопоставлениеНоменклатуры = РезультатОбновления.КоличествоВыбранных Тогда
			
			ТекстОшибки = ТекстОшибки + " " + НСтр("ru = 'Для всех загружаемых документов требуется сопоставление номенклатуры.'");
			
		ИначеЕсли РезультатОбновления.КоличествоТребуетсяСопоставлениеНоменклатуры > 0 Тогда
			
			ТекстОшибки = ТекстОшибки + " " + НСтр("ru = 'Для некоторых документов требуется сопоставление номенклатуры.'");
			
		КонецЕсли;
		
		Результат.ТекстОшибки = ТекстОшибки;
			
	Иначе
			
		Результат.Успешно = Истина;
		
	КонецЕсли;
	
	Результат.КоличествоОбработанных = РезультатОбновления.КоличествоВыбранных;
	Результат.КоличествоЗагруженных  =  РезультатОбновления.КоличествоЗагруженных;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыйВозможностьДействияСервисаПриВыполнении() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ПрикладнойОбъект",       Неопределено);
	Данные.Вставить("КатегорияКоманды",       Перечисления.КатегорииКомандСервисаEDI.ПустаяСсылка());
	Данные.Вставить("Доступно",               Истина);
	Данные.Вставить("ПояснениеНедоступности", "");

	Возврат Данные;
	
КонецФункции



// Конструктор новой таблицы доступности команд.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * КатегорияКоманды        - ПеречислениеСсылка.КатегорииКомандСервисаEDI - категория команды.
// * Доступно               - Булево - признак доступности команды.
// * ПояснениеНедоступности - Строка - пояснение почему команда недоступна
//
Функция НовыйТаблицаДоступныхКатегорийКомандПриВыводеДоступныхДействий() Экспорт
	
	ТаблицаКатегорий = Новый ТаблицаЗначений;
	ТаблицаКатегорий.Колонки.Добавить("КатегорияКоманды",       Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииКомандСервисаEDI"));
	ТаблицаКатегорий.Колонки.Добавить("Доступно",               Новый ОписаниеТипов("Булево"));
	ТаблицаКатегорий.Колонки.Добавить("ПояснениеНедоступности", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаКатегорий;
	
КонецФункции

// Конструктор данные настроек контрагента
// 
// Возвращаемое значение:
//  Структура - описание настроек контрагента:
//    * КонтрагентЗарегистрирован - Булево - признак наличия данных контрагента в сервисе настроек
//    * ЗначениеНастройки - ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - значение настроек обмена контрагента
//    * ИндивидуальнаяНастройка - Булево - признак, что организация входит в черный или белый список контрагента
//
Функция НовыйНастройкиКонтрагента() Экспорт
	
	НастройкиКонтрагента = Новый Структура;
	
	НастройкиКонтрагента.Вставить("КонтрагентЗарегистрирован" , Ложь);
	НастройкиКонтрагента.Вставить("ЗначениеНастройки"         , Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы);
	НастройкиКонтрагента.Вставить("ИндивидуальнаяНастройка"   , Ложь);
	
	Возврат НастройкиКонтрагента;
	
КонецФункции

// Конструктор идентификаторов ключевых свойств документа
// 
// Возвращаемое значение:
//  Структура - описание настроек контрагента:
//    * ИдентификаторДокумента   - Строка - идентификатор документа в сервисе 1С:EDI
//    * ИдентификаторОрганизации - Строка - идентификатор организации в сервисе 1С:Бизнес-сеть
//    * ИдентификаторКонтрагента - Строка - идентификатор контрагента в сервисе 1С:Бизнес-сеть
//
Функция НовыйИдентификаторыОбъектов() Экспорт
	
	ИдентификаторыОбъектов = Новый Структура;
	
	ИдентификаторыОбъектов.Вставить("ИдентификаторДокумента"   , "");
	ИдентификаторыОбъектов.Вставить("ИдентификаторОрганизации" , "");
	ИдентификаторыОбъектов.Вставить("ИдентификаторКонтрагента" , "");
	
	Возврат ИдентификаторыОбъектов;
	
КонецФункции

// Конструктор представления контрагента и организации документа
// 
// Возвращаемое значение:
//  Структура - описание настроек контрагента:
//    * ПредставлениеОрганизации - Строка - строковое представление организации документа
//    * ПредставлениеКонтрагента - Строка - строковое представление контрагента документа
//
Функция НовыйПредставлениеУчастников() Экспорт
	
	ПредставлениеУчастников = Новый Структура;
	
	ПредставлениеУчастников.Вставить("ПредставлениеОрганизации", "");
	ПредставлениеУчастников.Вставить("ПредставлениеКонтрагента", "");
	
	Возврат ПредставлениеУчастников;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДокумента

Функция ЗагрузитьДокументИзСервиса(ПараметрыВыполнения) Экспорт 
	
	ДанныеПрикладногоОбъекта = РегистрыСведений.СостоянияДокументовEDI.ДанныеПрикладногоОбъектаПоДаннымСервиса(
		ПараметрыВыполнения.ИдентификаторДокумента, ПараметрыВыполнения.ТипДокумента);
	
	ДокументКЗагрузке = ДокументыEDIИнтеграцияКлиентСервер.ПараметрыЗагрузкиОбновленияДокумента();
	ДокументКЗагрузке.ИдентификаторВСервисе = ПараметрыВыполнения.ИдентификаторДокумента;
	ДокументКЗагрузке.ТипДокумента          = ПараметрыВыполнения.ТипДокумента;
	ДокументКЗагрузке.Организация           = ПараметрыВыполнения.Организация;
	
	Если Не ДанныеПрикладногоОбъекта = Неопределено Тогда
		ДокументКЗагрузке.ПрикладнойОбъект      = ДанныеПрикладногоОбъекта.ПрикладнойОбъект;
		ДокументКЗагрузке.Менеджер              = ДанныеПрикладногоОбъекта.Менеджер;
		ДокументКЗагрузке.ДатаДокумента         = ДанныеПрикладногоОбъекта.ДатаСоздания;
		ДокументКЗагрузке.НомерДокумента        = ДанныеПрикладногоОбъекта.НомерДокумента;
	КонецЕсли;
	
	ПараметрыЗагрузки = ДокументыEDIИнтеграцияКлиентСервер.ПараметрыЗагрузкиОбновленияДокументов();
	ПараметрыЗагрузки.КоличествоВыбранных = 1;
	ПараметрыЗагрузки.КоличествоКЗагрузке = 1;
	ПараметрыЗагрузки.УникальныйИдентификатор = ПараметрыВыполнения.ИдентификаторФормы;
	ПараметрыЗагрузки.ДокументыКЗагрузке.Добавить(ДокументКЗагрузке);
	
	РезультатЗагрузки = РезультатЗагрузкиОбновленияПрикладныхДокументов(ПараметрыЗагрузки);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПовторногоПодключенияОрганизации

Процедура ФормаСпискаПрикладныхОбъектовЗаполнитьОрганизацииТребующиеПовторногоПодключения(Форма) Экспорт
	
	Организации = ОрганизацииТребующиеПовторногоПодключения();
	Форма.ОрганизацииТребующиеПовторногоПодключения.ЗагрузитьЗначения(Организации);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаФункциональности

Функция ИспользоватьПодсистему(ТипДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если Не ЕстьПравоИспользованияEDI() Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменEDI") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиИнтеграцииEDI.Организация
		|ИЗ
		|	РегистрСведений.НастройкиИнтеграцииEDI КАК НастройкиИнтеграцииEDI
		|ГДЕ
		|	НастройкиИнтеграцииEDI.ОтправляемЗаказыПоставщикамEDI";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда

		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиПоставщикаEDI.Поставщик
		|ИЗ
		|	РегистрСведений.НастройкиПоставщикаEDI КАК НастройкиПоставщикаEDI
		|ГДЕ
		|	НастройкиПоставщикаEDI.Поставщик ССЫЛКА Справочник.Организации
		|	И НастройкиПоставщикаEDI.РежимРаботыСЗаказамиКлиентов В
		|		(ЗНАЧЕНИЕ(Перечисление.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика),
		|		ЗНАЧЕНИЕ(Перечисление.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя))";

	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ФормаСпискаПрикладныхОбъектовСоздатьДополнительныеРеквизитыФормы(Форма, ПараметрыИнтеграции)

	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьОбменEDI",                     Новый ОписаниеТипов("Булево")));
	
	Если ПараметрыИнтеграции.ИспользоватьОбменEDI Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НастройкиУчетаEDI",                         Новый ОписаниеТипов("")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипДокументаEDI",                           Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовEDI")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КатегорияДокументовEDI",                    Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДокументовEDI")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизитаСписокEDI",                     Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьОтборПоСтатусамEDI",            Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВариантОтбораПоАктуальностиВерсииEDI",      Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОтбораПоНеактуальнойВерсииEDI")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОтборСтатусыEDI",                           Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОтбораПоСтатусамEDI")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьОтборПоНеактуальнойВерсииEDI",  Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументыКЗагрузкеEDIОтображается",         Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОрганизацииТребующиеПовторногоПодключения", Новый ОписаниеТипов("СписокЗначений")));
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДеревоСтатусовEDI", Новый ОписаниеТипов("ДеревоЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Выбран", Новый ОписаниеТипов("Булево"), "ДеревоСтатусовEDI"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтатусПредставление", Новый ОписаниеТипов("Строка"), "ДеревоСтатусовEDI"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоличествоДокументов", Новый ОписаниеТипов("Число"), "ДеревоСтатусовEDI"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтатусСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказаEDI"), "ДеревоСтатусовEDI"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Группировка", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппировкиСтатусовEDI"), "ДеревоСтатусовEDI"));
	
	КонецЕсли;
	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ФормаСпискаПрикладныхОбъектовСоздатьДополнительныеЭлементыФормы(Форма, ПараметрыИнтеграции)

	ЭлементыФормы = Форма.Элементы;
	
	// Быстрый отбор по статусам EDI
	Элемент = ЭлементыФормы.Добавить("ОтборСтатусыEDI", 
	                                 Тип("ПолеФормы"), 
	                                 ЭлементыФормы[ПараметрыИнтеграции.ИмяГруппыРазмещенияЭлементаБыстрогоОтбора]);
	
	Элемент.ПутьКДанным            = "ОтборСтатусыEDI";
	Элемент.Вид                    = ВидПоляФормы.ПолеВвода;
	Элемент.Заголовок              = НСтр("ru = 'Статусы EDI'");
	Элемент.ПоложениеЗаголовка     = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элемент.ПодсказкаВвода         = НСтр("ru = 'Все'");
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.КнопкаОчистки          = Истина;
	Элемент.МаксимальнаяШирина     = 22;
	Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_СтатусEDIОбработкаВыбора");
	Элемент.УстановитьДействие("Очистка", "Подключаемый_СтатусEDIОчистка");
	
	// Колонка в форме списка состояние EDI
	Элемент = ЭлементыФормы.Вставить("СостояниеEDI",
	                                  Тип("ПолеФормы"), 
	                                  ЭлементыФормы[ПараметрыИнтеграции.ИмяЭлементаФормыСписок],
	                                  ЭлементыФормы[ПараметрыИнтеграции.СостояниеEDIРазмещатьПередЭлементом]);
	
	Элемент.ПутьКДанным = ПараметрыИнтеграции.ИмяРеквизитаСписок + ".СостояниеEDI";
	Элемент.Вид         = ВидПоляФормы.ПолеНадписи;
	Элемент.Заголовок   = НСтр("ru = 'Состояние EDI'");
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина     = 35;
	
	Если ПараметрыИнтеграции.ОтображатьПереходВСписокДокументыКЗагрузке Тогда
		
		Форма.ДокументыКЗагрузкеEDIОтображается = Истина;
		
		// Декорация переход к документам, готовым к загрузке
		Элемент = ЭлементыФормы.Добавить("ДокументыКЗагрузкеEDI", 
		                                 Тип("ДекорацияФормы"), 
		                                 ЭлементыФормы[ПараметрыИнтеграции.ИмяГруппыРазмещенияЭлементаПереходВСписокДокументыКЗагрузке]);
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина     = 30;
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОформляемыеДокументыEDIОбработкаНавигационнойСсылки");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаСпискаПрикладныхОбъектовПреобразоватьЗапросДинамическогоСписка(Форма, ПараметрыИнтеграции)
	
	ДинамическийСписок = Форма[ПараметрыИнтеграции.ИмяРеквизитаСписок];
	ИмяОсновнаяТаблица = ПараметрыИнтеграции.ИмяПсевдонимаОсновнойТаблицы;
	
	ТекстЗапроса = ДинамическийСписок.ТекстЗапроса;
	
	ТекстПоискаОсновнаяТаблица = " КАК " + ПараметрыИнтеграции.ИмяПсевдонимаОсновнойТаблицы;
	ТекстСоединения = ТекстПоискаОсновнаяТаблица + "
		|{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
		|	ПО &ИмяОсновнойТаблицыСсылка = СостоянияДокументовEDI.ПрикладнойОбъект}";
	
	ТекстСоединения = СтрЗаменить(ТекстСоединения, "&ИмяОсновнойТаблицыСсылка", ИмяОсновнаяТаблица + ".Ссылка");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоискаОсновнаяТаблица, ТекстСоединения);
	
	ТекстПоискаДополнительныеПоля = "&ДополнительныеПоляСостояниеEDI КАК ДополнительныеПоляСостояниеEDI";
	
	ТекстДополнительныеПоля = "ЕСТЬNULL(СостоянияДокументовEDI.ТекущийСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказаEDI.ПустаяСсылка))                          КАК ТекущийСтатусEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ПредыдущийСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказаEDI.ПустаяСсылка))                                              КАК ПредыдущийСтатусEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ПоследнееДействие, """")                                                                                             КАК ПоследнееДействиеEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.СторонаВыполнившаяДействие, ЗНАЧЕНИЕ(Перечисление.СтороныУчастникиСервисаEDI.ПустаяСсылка))                          КАК СторонаВыполнившаяДействиеEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.УточнениеСостоянияПоДаннымСтороныУчастника, """")                                                                    КАК УточнениеСостоянияПоДаннымСтороныУчастникаEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ДатаУточнениеСостоянияПоДаннымСтороныУчастника, ДАТАВРЕМЯ(1, 1, 1))                                                  КАК ДатаУточнениеСостоянияПоДаннымСтороныУчастникаEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ДатаТекущегоСтатуса, ДАТАВРЕМЯ(1, 1, 1))                                                                             КАК ДатаТекущегоСтатусаEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ТипДокумента, ЗНАЧЕНИЕ(Перечисление.ТипыДокументовEDI.ПустаяСсылка))                                                 КАК ТипДокументаEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса, """")                                                                                      КАК ХэшТипаДокументаИСтатусаEDI,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(256))                                                                                                                       КАК СостояниеEDI,
	|	ЕСТЬNULL(СостоянияДокументовEDI.СостояниеПрикладногоОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НетВСервисе)) КАК СостояниеПрикладногоОбъектаEDI";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоискаДополнительныеПоля, ТекстДополнительныеПоля);
	
	ДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
	
	ДинамическийСписок.УстановитьОбязательноеИспользование("ТекущийСтатусEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("ПредыдущийСтатусEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("ПоследнееДействиеEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("СторонаВыполнившаяДействиеEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("УточнениеСостоянияПоДаннымСтороныУчастникаEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("ДатаУточнениеСостоянияПоДаннымСтороныУчастникаEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("ДатаТекущегоСтатусаEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("ТипДокументаEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("ХэшТипаДокументаИСтатусаEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("СостояниеEDI", Истина);
	ДинамическийСписок.УстановитьОбязательноеИспользование("СостояниеПрикладногоОбъектаEDI", Истина);
	
КонецПроцедуры

Процедура ФормаСпискаИнициализация(Форма, ПараметрыИнтеграции)
	
	Форма["ИспользоватьОбменEDI"] = ПараметрыИнтеграции.ИспользоватьОбменEDI;
	
	Если ПараметрыИнтеграции.ИспользоватьОбменEDI Тогда
	
		Форма.НастройкиУчетаEDI = НастройкиEDI.НастройкиУчета();
		
		Форма.ТипДокументаEDI = Форма.НастройкиУчетаEDI.СоответствиеПрикладныхОбъектовДокументамEDI.Получить(ПараметрыИнтеграции.ТипДокумента);
		
		Если Не ЗначениеЗаполнено(Форма.ТипДокументаEDI) Тогда
			Возврат;
		КонецЕсли;
		
		ДокументыEDI.ПостроитьДеревоСтатусов(Форма.ДеревоСтатусовEDI);
		Форма.КатегорияДокументовEDI = ДокументыEDIКлиентСервер.КатегорияДокументаПоТипу(Форма.ТипДокументаEDI);
		Форма.ИмяРеквизитаСписокEDI  = ПараметрыИнтеграции.ИмяРеквизитаСписок;
		
		Если Форма.ДокументыКЗагрузкеEDIОтображается
			И ПользователюДоступнаОбработкаEDI(Форма.КатегорияДокументовEDI) Тогда
			Форма.Элементы.ДокументыКЗагрузкеEDI.Заголовок = НадписьДокументыКЗагрузке(Форма.ТипДокументаEDI);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСостояниеСоответствияПрикладногоДокумента(СписокУсловноеОформление) 
	
	// Выделение цветом документа с отклонениями в выполнении
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния если документ не актуален.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СостояниеEDI");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СостояниеПрикладногоОбъектаEDI");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СостоянияСоответствияПрикладнойДокументНеАктуален();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноКрасный);
	
	// Выделение цветом и текст для документа, которого нет в EDI
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение документа, которого нет в EDI.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СостояниеEDI");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТекущийСтатусEDI");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказаEDI.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеважнаяНадписьEDI);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'нет в EDI'"));
	
КонецПроцедуры

Процедура УстановитьЗначениеРеквизитаФормыПоНастройкам(Форма, ИмяРеквизита, Настройки) 
	
	Значение = Настройки.Получить(ИмяРеквизита);
	Если Значение <> Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("ДеревоЗначений")
			Или ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			
			Форма.ЗначениеВРеквизитФормы(Значение, ИмяРеквизита);
			
		Иначе
			
			Форма[ИмяРеквизита] = Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПользователюДоступнаОбработкаEDI(КатегорияДокументовEDI)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КатегорияДокументовEDI = Перечисления.КатегорииДокументовEDI.Закупка Тогда
		Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ОткрытьДокументыЗакупкиEDI);
	ИначеЕсли КатегорияДокументовEDI = Перечисления.КатегорииДокументовEDI.Продажа Тогда
		Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ОткрытьДокументыПродажиEDI);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НадписьДокументыКЗагрузке(ТипДокументаEDI) Экспорт
	
	КоличествоДокументов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ТипДокумента = &ТипДокумента
	|	И СостоянияДокументовEDI.ПрикладнойОбъект В (&ПустыеЗначенияПрикладныхОбъектов)";
	
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокументаEDI);
	Запрос.УстановитьПараметр("ПустыеЗначенияПрикладныхОбъектов", МассивПустыхЗначенийПрикладныхОбъектов());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КоличествоДокументов = Выборка.КоличествоДокументов;
		
	КонецЕсли;
	
	Если КоличествоДокументов = 0 Тогда
		Возврат "";
	Иначе
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В сервисе 1С:EDI к оформлению - %1'"), КоличествоДокументов);
		ТекстГиперссылки = "ОткрытьДокументыКОформлению";
		Возврат ФорматированнаяСтрокаСГиперссылкой(ТекстНадписи, ТекстГиперссылки);
	КонецЕсли;
	
КонецФункции

Функция МассивПустыхЗначенийПрикладныхОбъектов()
	
	МассивПустыхЗначений = Новый Массив;
	
	Для Каждого ТипПрикладногоОбъекта Из Метаданные.ОпределяемыеТипы.ПрикладнойОбъектEDI.Тип.Типы() Цикл
		
		МетаданныеПрикладногоОбъекта = Метаданные.НайтиПоТипу(ТипПрикладногоОбъекта);
		Если МетаданныеПрикладногоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипПрикладногоОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПустыхЗначений.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПрикладногоОбъекта.ПолноеИмя()).ПустаяСсылка());
		
	КонецЦикла;
	
	МассивПустыхЗначений.Добавить(Неопределено);
	Возврат МассивПустыхЗначений;
	
КонецФункции

Функция ПустаяСсылкаОпределяемогоТипа(ОпределяемыйТип) Экспорт
	
	Для Каждого ТипОпределяемогоТипа Из ОпределяемыйТип.Тип.Типы() Цикл
		
		МетаданныеПрикладногоОбъекта = Метаданные.НайтиПоТипу(ТипОпределяемогоТипа);
		Если МетаданныеПрикладногоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипОпределяемогоТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПрикладногоОбъекта.ПолноеИмя()).ПустаяСсылка();
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция МассивТиповДокументовEDIЗакупки()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыДокументовEDI.ЗаказПоставщику);
	
	Возврат МассивТипов;
	
КонецФункции

Функция МассивТиповДокументовEDIПродажи()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.ТипыДокументовEDI.ЗаказКлиента);
	
	Возврат МассивТипов;
	
КонецФункции

Функция ФорматированнаяСтрокаСГиперссылкой(ТекстСтроки, ТекстГиперссылки, ВыводитьГиперссылку = Истина, ЦветТекста = Неопределено, Жирный = Ложь)
	
	Если Жирный Тогда
		Шрифт = ШрифтыСтиля.ЖирныйШрифтEDI;
	Иначе
		Шрифт = Неопределено;
	КонецЕсли;
	
	Если ВыводитьГиперссылку Тогда
		
		СформированнаяСтрока =  Новый ФорматированнаяСтрока(ТекстСтроки,
		                                                    Шрифт,
		                                                    ЦветТекста,
		                                                    ,
		                                                    ТекстГиперссылки);
	Иначе
		
		СформированнаяСтрока = Новый ФорматированнаяСтрока(ТекстСтроки, Шрифт, ЦветТекста);
		
	КонецЕсли;

	Возврат СформированнаяСтрока;
	
КонецФункции

Функция ОрганизацииТребующиеПовторногоПодключения()
	
	Результат                     = Новый Массив;
	
	ПодключенныеОрганизации = БизнесСеть.ПодключенныеОрганизации();
	
	Если ПодключенныеОрганизации.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТребуетсяПовторноеПодключение", Истина);
	
	НайденныеСтроки = ПодключенныеОрганизации.НайтиСтроки(СтруктураОтбора);
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Результат.Добавить(НайденнаяСтрока.Организация);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область КлиентскаяБиблиотека

#Область Конструкторы

Функция НовыйДанныеДокумента()
	
	ДанныеДокумента = Новый Структура;
	
	ДанныеДокумента.Вставить("Ссылка"     , Неопределено);
	ДанныеДокумента.Вставить("Организация", Неопределено);
	ДанныеДокумента.Вставить("Контрагент" , Неопределено);
	ДанныеДокумента.Вставить("Менеджер"   , Неопределено);
	ДанныеДокумента.Вставить("ПоследняяНастройкаВариантаУказанияНоменклатуры" , Неопределено);

	Возврат ДанныеДокумента;
	
КонецФункции

Функция НовыйДанныеБизнесСеть()
	
	ДанныеБизнесСеть = Новый Структура;
	
	ДанныеБизнесСеть.Вставить("ОрганизацияПодключена"                    , Ложь);
	ДанныеБизнесСеть.Вставить("ОтправлятьЗаказыПоставщикам"              , Ложь);
	ДанныеБизнесСеть.Вставить("ТребуетсяПовторноеПодключениеОрганизации" , Ложь);
	
	Возврат ДанныеБизнесСеть;
	
КонецФункции

Функция КомандыПроцесса()
	
	КомандыПроцесса = Новый Структура;
	
	ЗначенияПеречисления = Метаданные.Перечисления.КомандыПроцессаЗаказаEDI.ЗначенияПеречисления;
	
	Для каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		КомандыПроцесса.Вставить(ЗначениеПеречисления.Имя, Перечисления.КомандыПроцессаЗаказаEDI[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Возврат КомандыПроцесса;
	
КонецФункции

Функция НовыйДанныеОтображенияФормы()
	
	ДанныеОтображенияФормы = Новый Структура;
	
	ДанныеОтображенияФормы.Вставить("КомандыПроцесса"              , КомандыПроцесса());
	ДанныеОтображенияФормы.Вставить("КомандыЭлементовФормы"        , Новый Структура);
	ДанныеОтображенияФормы.Вставить("ОшибкаПолученияДанныхСервиса" , Ложь);
	ДанныеОтображенияФормы.Вставить("КонфликтВерсий"               , Ложь);
	ДанныеОтображенияФормы.Вставить("ТипДокумента"                 , Неопределено);
	ДанныеОтображенияФормы.Вставить("ЦветГиперссылкиПояснения"     , ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	Возврат ДанныеОтображенияФормы;
	
КонецФункции

Функция НовыйДанныеПротоколаВзаимодействия()
	
	ДанныеПротоколаВзаимодействия = Новый Структура;
	
	ДанныеПротоколаВзаимодействия.Вставить("КоличествоНепрочитанныхСообщений"             , 0);
	ДанныеПротоколаВзаимодействия.Вставить("ОтображаемоеКоличествоНепрочитанныхСообщений" , 0);
	ДанныеПротоколаВзаимодействия.Вставить("ТребуетсяОтображатьПанель"                    , Ложь);
	ДанныеПротоколаВзаимодействия.Вставить("ИдентификаторПротокола"                       , "");
	ДанныеПротоколаВзаимодействия.Вставить("СоединениеУстановлено"                        , Ложь);
	ДанныеПротоколаВзаимодействия.Вставить("ПротоколВзаимодействияПодключен"              , Ложь);
	ДанныеПротоколаВзаимодействия.Вставить("ИнициализированаТабличнаяЧастьСообщений"      , Ложь);
	ДанныеПротоколаВзаимодействия.Вставить("ОтображениеСтатичныхСообщений"                , Ложь);
	ДанныеПротоколаВзаимодействия.Вставить("ПоследнийБлокСообщенийСообщений"              , Неопределено);
	ДанныеПротоколаВзаимодействия.Вставить("КоличествоПопытокПодключения"                 , 0);
	
	Возврат ДанныеПротоколаВзаимодействия;
	
КонецФункции

Функция НовыйСвойстваEDI(НастройкиФормы)
	
	СвойстваEDI = Новый Структура;
	
	СвойстваEDI.Вставить("ТипДокумента"                    , Неопределено);
	СвойстваEDI.Вставить("НастройкиФормы"                  , НастройкиФормы);
	СвойстваEDI.Вставить("ДанныеДокумента"                 , НовыйДанныеДокумента());
	СвойстваEDI.Вставить("ДанныеБизнесСеть"                , НовыйДанныеБизнесСеть());
	СвойстваEDI.Вставить("НастройкиКонтрагента"            , НовыйНастройкиКонтрагента());
	СвойстваEDI.Вставить("ДанныеСтатусаДокумента"          , РегистрыСведений.СостоянияДокументовEDI.ПустаяЗаписьРеестра());
	СвойстваEDI.Вставить("ДанныеОтображенияФормы"          , НовыйДанныеОтображенияФормы());
	СвойстваEDI.Вставить("СостояниеСинхронизации"          , НовыйСостояниеСинхронизацииДокумента());
	СвойстваEDI.Вставить("ДанныеПротоколаВзаимодействия"   , НовыйДанныеПротоколаВзаимодействия());
	СвойстваEDI.Вставить("ДанныеОсновногоДействия"         , НовыйДанныеОсновногоДействия());
	СвойстваEDI.Вставить("ИдентификаторыОбъектов"          , НовыйИдентификаторыОбъектов());
	СвойстваEDI.Вставить("ПредставлениеУчастников"         , НовыйПредставлениеУчастников());
	СвойстваEDI.Вставить("ФормаИнициализирована"           , Ложь);
	СвойстваEDI.Вставить("ДлительныеОперации"              , Новый Массив);
	СвойстваEDI.Вставить("ОтправленныеЗапросы"             , Новый Соответствие);
	СвойстваEDI.Вставить("ДанныеКомандДокумента"           , Новый Соответствие);
	СвойстваEDI.Вставить("ИменаЭлементовКомандEDI"         , Новый Структура);
	СвойстваEDI.Вставить("БлокироватьРеквизитыДокумента"   , Истина);
	СвойстваEDI.Вставить("МестоРазмещенияКоманд"           , "");
	
	Возврат СвойстваEDI;
	
КонецФункции

Функция НовыйДанныеОсновногоДействия()
	
	ДанныеОсновногоДействия = Новый Структура;
	
	ДанныеОсновногоДействия.Вставить("Заголовок"     , "");
	ДанныеОсновногоДействия.Вставить("Идентификатор" , "");
	ДанныеОсновногоДействия.Вставить("Ссылка"        , Перечисления.КомандыПроцессаЗаказаEDI.ПустаяСсылка());
	
	Возврат ДанныеОсновногоДействия;
	
КонецФункции

Функция НовыйСостояниеСинхронизацииДокумента()
	
	СостояниеСинхронизации = Новый Структура;
	
	СостояниеСинхронизации.Вставить("СостояниеВыполнения"             , Неопределено);
	СостояниеСинхронизации.Вставить("ДанныеСопоставленияНоменклатуры" , Неопределено);
	СостояниеСинхронизации.Вставить("НачалоВыполнения"                , '00010101');
	СостояниеСинхронизации.Вставить("ОкончаниеВыполнения"             , '00010101');
	СостояниеСинхронизации.Вставить("ТекстОшибки"                     , "");
	СостояниеСинхронизации.Вставить("КраткоеПредставлениеОшибки"      , "");
	
	Возврат СостояниеСинхронизации;
	
КонецФункции

Функция ПараметрыПрикладногоДокументаДляОпределенияВозможностиОтправки() 
	
	ПараметрыПрикладногоОбъекта = Новый Структура;
	ПараметрыПрикладногоОбъекта.Вставить("Проведен",    Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Организация", Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Контрагент",  Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Валюта",      Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Сумма",       Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Дата",        Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Номер",       Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Менеджер",    Неопределено);
	ПараметрыПрикладногоОбъекта.Вставить("Согласован",  Неопределено);
	
	Возврат ПараметрыПрикладногоОбъекта;
	
КонецФункции

#КонецОбласти

#Область РаботаСРеквизитамиФормы

Процедура ДобавитьРеквизитыФормы(ФормаДокумента)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СвойстваEDI"                   , Новый ОписаниеТипов));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПротоколВзаимодействияHTML"    , Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПротоколВзаимодействияWSS"     , Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПодробнаяИнформацияОбОшибке"   , Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("БуферОбменаEDI"                , Новый ОписаниеТипов("Строка")));
	
	ФормаДокумента.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ДобавитьРеквизитФормы(Форма, ИмяРеквизита, ЗначениеРеквизита)
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	
	ЭтоТаблица = ТипРеквизита = Тип("ТаблицаЗначений")
	             Или ТипРеквизита = Тип("ТаблицаЗначений");
	
	МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипРеквизита);
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипа));
	
	Если ЭтоТаблица Тогда
		Для каждого Колонки Из ЗначениеРеквизита.Колонки Цикл
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонки.Имя, Колонки.ТипЗначения, ИмяРеквизита));
		КонецЦикла;
	КонецЕсли; 
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если ЭтоТаблица Тогда
		Форма.ЗначениеВРеквизитФормы(ЗначениеРеквизита, ИмяРеквизита);
	Иначе
		Форма[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьТабличнуюЧастьСообщений(Форма)
	
	ТабличнаяЧастьСообщений = Новый ТаблицаЗначений;
	ТабличнаяЧастьСообщений.Колонки.Добавить("ИдентификаторСообщения"   , Новый ОписаниеТипов("Строка"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("ИдентификаторОтправителя" , Новый ОписаниеТипов("Строка"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("Дата"                     , Новый ОписаниеТипов("Дата"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("Заголовок"                , Новый ОписаниеТипов("Строка"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("Текст"                    , Новый ОписаниеТипов("Строка"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("Гиперссылка"              , Новый ОписаниеТипов("Строка"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("Статус"                   , Новый ОписаниеТипов("Строка"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("ДатаИзмерения"            , Новый ОписаниеТипов("Дата"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("СистемноеСообщение"       , Новый ОписаниеТипов("Булево"));
	ТабличнаяЧастьСообщений.Колонки.Добавить("НомерСистемногоСообщения" , Новый ОписаниеТипов("Число"));
	
	ДобавитьРеквизитФормы(Форма, "ТабличнаяЧастьСообщений", ТабличнаяЧастьСообщений);
	
	Форма.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлементамиФормы

Процедура УстановитьСвойствЭлементаФормы(ЭлементыФормы, Имя, ДополнительныеСвойства)
	
	Если ДополнительныеСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДополнительноеСвойство Из ДополнительныеСвойства Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, Имя, ДополнительноеСвойство.Ключ, 
			ДополнительноеСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЭлементФормы(ЭлементыФормы, Имя, Тип, Вид, Родитель = Неопределено, ДополнительныеСвойства = Неопределено)
	
	ЭлементФормы = ЭлементыФормы.Найти(Имя);
	
	Если Не ЭлементФормы = Неопределено Тогда
		УстановитьСвойствЭлементаФормы(ЭлементыФормы, Имя, ДополнительныеСвойства);
		Возврат ЭлементФормы;
	КонецЕсли;
	
	ЭлементФормы     = ЭлементыФормы.Добавить(Имя, Тип, Родитель);
	ЭлементФормы.Вид = Вид;
	
	УстановитьСвойствЭлементаФормы(ЭлементыФормы, Имя, ДополнительныеСвойства);
	
	Возврат ЭлементФормы;
	
КонецФункции

Процедура ДобавитьЭлементыФормы(ФормаДокумента)
	
	НастройкиФормы  = ФормаДокумента.СвойстваEDI.НастройкиФормы;
	ЭлементыФормы   = ФормаДокумента.Элементы;
	
	ИмяГруппыФормыПанельСостояния               = НастройкиФормы.ИмяГруппыФормыПанельСостояния;
	ИмяГруппыФормыПанельПротоколаВзаимодействия = НастройкиФормы.ИмяГруппыФормыПанельПротоколаВзаимодействия;
	
	#Область ПанельСостояния
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЦветФона"                 , ЦветаСтиля.ЦветФонаПанелиСостоянияEDI);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Истина);
	
	ПанельСостояния = СоздатьЭлементФормы(ЭлементыФормы, ИмяГруппыФормыПанельСостояния, Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, , ДополнительныеСвойства);
	
	#Область ПанельСостоянияСтраницы
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ОтображениеСтраниц"       , ОтображениеСтраницФормы.Нет);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Истина);
	
	ПанельСостоянияСтраницы = СоздатьЭлементФормы(ЭлементыФормы, "ПанельСостоянияСтраницы", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страницы, ПанельСостояния, ДополнительныеСвойства);
	
	#Область СтраницаПроблемаЗаполнения
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаПроблемаЗаполнения = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаПроблемаЗаполнения", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, ПанельСостоянияСтраницы, ДополнительныеСвойства);
	
	#Область НадписьПроблемаЗаполнения
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Истина);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина"   , Ложь);
	
	НадписьПроблемаЗаполнения = СоздатьЭлементФормы(ЭлементыФормы, "НадписьПроблемаЗаполнения", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаПроблемаЗаполнения, ДополнительныеСвойства);
	
	НадписьПроблемаЗаполнения.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаКонтрагентНеПринимаетЗаказы
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Истина);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаКонтрагентНеПринимаетЗаказы = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаКонтрагентНеПринимаетЗаказы", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, ПанельСостоянияСтраницы, ДополнительныеСвойства);
	
	#Область НадписьКонтрагентНеПринимаетЗаказы
	
	ТекстЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(
		НСтр("ru = 'Состояние EDI: <b>Контрагент не принимает заказы через сервис 1С:EDI</b>'"));
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок", ТекстЗаголовка);
	ДополнительныеСвойства.Вставить("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Ложь);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ДополнительныеСвойства.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	
	НадписьКонтрагентНеПринимаетЗаказы = СоздатьЭлементФормы(ЭлементыФормы, "НадписьКонтрагентНеПринимаетЗаказы", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаКонтрагентНеПринимаетЗаказы, ДополнительныеСвойства);
	
	НадписьКонтрагентНеПринимаетЗаказы.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
	
	#КонецОбласти
	
	#Область ГруппаКонтрагентНеПринимаетЗаказыДоступныеДействия
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Поведение", ПоведениеОбычнойГруппы.Всплывающая);
	ДополнительныеСвойства.Вставить("Заголовок", НСтр("ru = 'доступные действия'"));
	ДополнительныеСвойства.Вставить("Отображение", ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ЦветТекстаЗаголовка", ЦветаСтиля.ГиперссылкаЦвет);
	ДополнительныеСвойства.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Ложь);
	
	ГруппаКонтрагентНеПринимаетЗаказыДоступныеДействия = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаКонтрагентНеПринимаетЗаказыДоступныеДействия",
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, СтраницаКонтрагентНеПринимаетЗаказы, ДополнительныеСвойства);
	
	#Область ЗагрузитьНастройкиОбмена
	
	ТекстПодсказки = НСтр("ru = 'Обновить статус приема заказов контрагентом.
	                      |Будут получены актуальные данные из сервиса.'");
	
	СоздатьКомандуФормы(ФормаДокумента, "ОбновитьНастройкиКонтрагента", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Проверить статус контрагента'"), ТекстПодсказки, БиблиотекаКартинок.Обновить);
	
	#Область ЗагрузитьНастройкиОбменаТекущееСостояние
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияЗагрузитьНастройкиОбменаНадпись", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаКонтрагентНеПринимаетЗаказыДоступныеДействия, ДополнительныеСвойства);
	
	#КонецОбласти 
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды", "ОбновитьНастройкиКонтрагента");
	ДополнительныеСвойства.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.ОтображатьСнизу);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина", Ложь);
	
	ЭлементФормы = СоздатьЭлементФормы(ЭлементыФормы, "ОбновитьНастройкиКонтрагента", Тип("КнопкаФормы"), ВидКнопкиФормы.Гиперссылка, 
		ГруппаКонтрагентНеПринимаетЗаказыДоступныеДействия, ДополнительныеСвойства);
	ЭлементФормы.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаРаботаССервисом
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаРаботаССервисом = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаРаботаССервисом", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, ПанельСостоянияСтраницы, ДополнительныеСвойства);
	
	#Область ГруппаСтатусИДействия
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Ложь);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"              , Ложь);
	ДополнительныеСвойства.Вставить("Отображение"                      , ОтображениеОбычнойГруппы.Нет);
	
	ГруппаСтатусИДействия = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаСтатусИДействия", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, СтраницаРаботаССервисом, ДополнительныеСвойства);
	
	#Область СтраницыРаботаССервисом
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ОтображениеСтраниц"       , ОтображениеСтраницФормы.Нет);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Истина);
	
	СтраницыРаботаССервисом = СоздатьЭлементФормы(ЭлементыФормы, "СтраницыРаботаССервисом", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страницы, ГруппаСтатусИДействия, ДополнительныеСвойства);
	
	#Область СтраницаДействияДокумента
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаДействияДокумента = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаДействияДокумента", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, СтраницыРаботаССервисом, ДополнительныеСвойства);
	
	#Область ГруппаСостояниеДокументаБезОшибки
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"              , Ложь);
	ДополнительныеСвойства.Вставить("Отображение"                      , ОтображениеОбычнойГруппы.Нет);
	
	ГруппаСостояниеДокументаБезОшибки = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаСостояниеДокументаБезОшибки", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, СтраницаДействияДокумента, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьПредупреждениеДоступныеДействия
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.Предупреждение);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьПредупреждениеДоступныеДействия", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаСостояниеДокументаБезОшибки, ДополнительныеСвойства);
		
	#КонецОбласти
		
	#Область НадписьСтатусДокумента
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Ложь);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина"   , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"   , Ложь);
	
	НадписьСтатусДокумента = СоздатьЭлементФормы(ЭлементыФормы, "НадписьСтатусДокумента", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаСостояниеДокументаБезОшибки, ДополнительныеСвойства);
	
	НадписьСтатусДокумента.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаСостояниеДокументаОшибка
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Ложь);
	ДополнительныеСвойства.Вставить("ГоризонтальныйИнтервал"           , ИнтервалМеждуЭлементамиФормы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"              , Ложь);
	ДополнительныеСвойства.Вставить("Отображение"                      , ОтображениеОбычнойГруппы.Нет);
	
	ГруппаСостояниеДокументаОшибка = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаСостояниеДокументаОшибка", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, СтраницаДействияДокумента, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаОшибкаСинхронизации
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка"                        , БиблиотекаКартинок.ПредупреждениеEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияКартинкаОшибкаСинхронизации", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Картинка, ГруппаСостояниеДокументаОшибка, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьОшибкаСинхронизацииНачало
	
	ЗаголовокHTML = "%1 <b><span style = 'color: ПоясняющийОшибкуТекст'>%2 </span></b>";
	
	Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокHTML, 
		НСтр("ru = 'Состояние EDI:'"), НСтр("ru = 'Ошибка ('"));
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"                        , Заголовок);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьОшибкаСинхронизацииНачало", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаСостояниеДокументаОшибка, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаПояснениеОшибкиСинхронизации
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Поведение"                    , ПоведениеОбычнойГруппы.Всплывающая);
	ДополнительныеСвойства.Вставить("Заголовок"                    , НСтр("ru = 'подробно'"));
	ДополнительныеСвойства.Вставить("Отображение"                  , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ЦветТекстаЗаголовка"          , ЦветаСтиля.ПоясняющийОшибкуТекст);
	ДополнительныеСвойства.Вставить("Группировка"                  , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	
	ГруппаПояснениеОшибкиСинхронизации = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПояснениеОшибкиСинхронизации",
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, ГруппаСостояниеДокументаОшибка, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьОшибкаСинхронизацииПояснение
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЦветТекста"                   , ЦветаСтиля.ПоясняющийТекст);
	
	ДекорацияНадписьОшибкаСинхронизацииПояснение = СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьОшибкаСинхронизацииПояснение", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаПояснениеОшибкиСинхронизации, ДополнительныеСвойства);
	
	ДекорацияНадписьОшибкаСинхронизацииПояснение.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
	
	#КонецОбласти
	
	#Область ДекорацияНадписьПояснениеОшибкиСинхронизацииРазделитель
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьПояснениеОшибкиСинхронизацииРазделитель", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаПояснениеОшибкиСинхронизации, ДополнительныеСвойства);
	
	#КонецОбласти 
	
	#Область ДекорацияНадписьПерейтиВЖурналРегистрации
	
	Если ПравоДоступа("ЖурналРегистрации", Метаданные) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Подробнее см. в <a href = ""ОткрытьЖурналРегистрации"">журнале регистрации</a>'");
		ФорматированныйТекстЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗаголовка);
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("Заголовок"                        , ФорматированныйТекстЗаголовка);
		ДополнительныеСвойства.Вставить("ЦветТекста"                       , ЦветаСтиля.ПоясняющийТекст);
		
		ДекорацияНадписьПерейтиВЖурналРегистрации = СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьПерейтиВЖурналРегистрации", Тип("ДекорацияФормы"), 
			ВидДекорацииФормы.Надпись, ГруппаПояснениеОшибкиСинхронизации, ДополнительныеСвойства);
			
		ДекорацияНадписьПерейтиВЖурналРегистрации.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ГруппаПодробнаяИнформацияОбОшибке
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Поведение"                    , ПоведениеОбычнойГруппы.Свертываемая);
	ДополнительныеСвойства.Вставить("Заголовок"                    , НСтр("ru = 'Информация для технической поддержки'"));
	ДополнительныеСвойства.Вставить("Отображение"                  , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("Группировка"                  , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ОтображениеУправления"        , ОтображениеУправленияОбычнойГруппы.Картинка);
	
	ГруппаПодробнаяИнформацияОбОшибке = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПодробнаяИнформацияОбОшибке",
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, ГруппаПояснениеОшибкиСинхронизации, ДополнительныеСвойства);
	
	ГруппаПодробнаяИнформацияОбОшибке.Скрыть();
	
	#Область ПолеФормыПодробнаяИнформацияОбОшибке
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("МногострочныйРежим"     , Истина);
	ДополнительныеСвойства.Вставить("ТолькоПросмотр"         , Истина);
	ДополнительныеСвойства.Вставить("Высота"                 , 5);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали" , Ложь);
	ДополнительныеСвойства.Вставить("ПутьКДанным"            , "ПодробнаяИнформацияОбОшибке");
	ДополнительныеСвойства.Вставить("ПоложениеЗаголовка"     , ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ПолеФормыПодробнаяИнформацияОбОшибке",
		Тип("ПолеФормы"), ВидПоляФормы.ПолеВвода, ГруппаПодробнаяИнформацияОбОшибке, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область КомандаСкопироватьТекстОшибки
	
	СоздатьКомандуФормы(ФормаДокумента, "СкопироватьТекстОшибки", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Скопировать'"), НСтр("ru = 'Скопировать текст информации для технической поддержки'"), БиблиотекаКартинок.КопированиеТекстаEDI);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"        , "СкопироватьТекстОшибки");
	ДополнительныеСвойства.Вставить("Отображение"       , ОтображениеКнопки.Картинка);
	ДополнительныеСвойства.Вставить("ОтображениеФигуры" , ОтображениеФигурыКнопки.ПриАктивности);
	
	СоздатьЭлементФормы(ЭлементыФормы, "КомандаСкопироватьТекстОшибки", Тип("КнопкаФормы"), ВидКнопкиФормы.ОбычнаяКнопка, 
		ГруппаПодробнаяИнформацияОбОшибке, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ДекорацияНадписьОшибкаСинхронизацииОкончание
	
	ЗаголовокHTML = "<b><span style = 'color: ПоясняющийОшибкуТекст'>)</span></b>, <a href = ""ПовторитьВыполнениеСценария"">%1</a>";
	
	Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ЗаголовокHTML, НСтр("ru = 'повторить'"));
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"                        , Заголовок);
	
	ДекорацияНадписьОшибкаСинхронизацииОкончание = СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьОшибкаСинхронизацииОкончание", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаСостояниеДокументаОшибка, ДополнительныеСвойства);
	
	ДекорацияНадписьОшибкаСинхронизацииОкончание.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ОсновноеДействиеДокумента
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Ложь);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина", Ложь);
	
	НадписьОсновноеДействиеДокумента = СоздатьЭлементФормы(ЭлементыФормы, "НадписьОсновноеДействиеДокумента", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаДействияДокумента, ДополнительныеСвойства);
	
	НадписьОсновноеДействиеДокумента.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
	
	#КонецОбласти
	
	#Область ГруппаДоступныеДействияДокумента
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Поведение"                    , ПоведениеОбычнойГруппы.Всплывающая);
	ДополнительныеСвойства.Вставить("Заголовок"                    , НСтр("ru = 'доступные действия'"));
	ДополнительныеСвойства.Вставить("Отображение"                  , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ЦветТекстаЗаголовка"          , ЦветаСтиля.ГиперссылкаЦвет);
	ДополнительныеСвойства.Вставить("Группировка"                  , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"     , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"       , Ложь);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеВГруппе" , ВертикальноеПоложениеЭлемента.Центр);
	
	ГруппаДоступныеДействияДокумента = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаДоступныеДействияДокумента",
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, СтраницаДействияДокумента, ДополнительныеСвойства);
	
	#Область КнопкиДействийДокумента
	
	КомандыПроцесса = ФормаДокумента.СвойстваEDI.ДанныеОтображенияФормы.КомандыПроцесса;
	
	НомерКоманды = 0;
	
	Для каждого КомандаПроцесса Из КомандыПроцесса Цикл
		
		НомерКоманды = НомерКоманды + 1;
		
		ИмяДействия = СтрШаблон("ДействиеДокумента_%1", НомерКоманды);
		
		СоздатьКомандуФормы(ФормаДокумента, ИмяДействия, "Подключаемый_ВыполнитьКомандуEDI");
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ИмяКоманды", ИмяДействия);
		ДополнительныеСвойства.Вставить("ОтображениеПодсказки", ОтображениеПодсказки.ОтображатьСнизу);
		
		КомандаФормы = СоздатьЭлементФормы(ЭлементыФормы, ИмяДействия, Тип("КнопкаФормы"), ВидКнопкиФормы.Гиперссылка, 
			ГруппаДоступныеДействияДокумента, ДополнительныеСвойства);
		
		КомандаФормы.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиEDI");
		
		ИмяЭлемента = СтрШаблон("ТекстПоясненияНедоступности_%1", НомерКоманды);
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		
		СоздатьЭлементФормы(ЭлементыФормы, ИмяЭлемента,
			Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись, ГруппаДоступныеДействияДокумента, ДополнительныеСвойства);
		
	КонецЦикла;
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаКонфликтВерсий", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, СтраницыРаботаССервисом, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаПредупреждениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка", БиблиотекаКартинок.ПредупреждениеEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияКартинкаПредупреждениеКонфликтВерсий", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Картинка, СтраницаКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьПредупреждениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"  , НСтр("ru = 'Обнаружен конфликт версий документа'") + ", ");
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьПредупреждениеКонфликтВерсий", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"                , НСтр("ru = 'разрешить конфликт'"));
	ДополнительныеСвойства.Вставить("Поведение"                , ПоведениеОбычнойГруппы.Всплывающая);
	ДополнительныеСвойства.Вставить("Отображение"              , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("Группировка"              , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветТекстаЗаголовка"      , ЦветаСтиля.ГиперссылкаЦвет);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Ложь);
	
	ГруппаКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаКонфликтВерсий", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, СтраницаКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок" , НСтр("ru = 'Документ был изменен другим пользователем'"));
	ДополнительныеСвойства.Вставить("Ширина"    , 45);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьЗаголовокКонфликтВерсий", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаКонфликтВерсий, ДополнительныеСвойства);
	#КонецОбласти
	
	#Область ВерхняяГруппаКонфликтВерсий
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	
	ВерхняяГруппаКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "ВерхняяГруппаКонфликтВерсий", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, ГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ГруппаПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветФона"                       , ЦветаСтиля.ЦветФонаПодсказки);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	ДополнительныеСвойства.Вставить("Ширина"                         , 22);
	ДополнительныеСвойства.Вставить("ВертикальныйИнтервал"           , ИнтервалМеждуЭлементамиФормы.Половинный);
	
	ГруппаПоследнееИзменениеКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПоследнееИзменениеКонфликтВерсий", 
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, ВерхняяГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокПоследнееИзменениеКонфликтВерсий
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ЦветИнформацияОшибочна);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьЗаголовокПоследнееИзменениеКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись, 
		ГруппаПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаМенеджерПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	
	ГруппаМенеджерПоследнееИзменениеКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаМенеджерПоследнееИзменениеКонфликтВерсий", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаМенеджерПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.МенеджерEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаМенеджерПоследнееИзменениеКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаМенеджерПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьМенеджерПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт", ШрифтыСтиля.МелкийШрифтТекста);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьМенеджерПоследнееИзменениеКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаМенеджерПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаСуммаПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	
	ГруппаСуммаПоследнееИзменениеКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаСуммаПоследнееИзменениеКонфликтВерсий", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаСуммаПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.СуммаСерымEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаСуммаПоследнееИзменениеКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаСуммаПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьСуммаПоследнееИзменениеКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт"      , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьСуммаПоследнееИзменениеКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаСуммаПоследнееИзменениеКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ДекорацияКартинкаКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка"                       , БиблиотекаКартинок.КонфликтВерсийПриОткрытииEDI);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Центр);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область НижняяГруппаКонфликтВерсий
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Право);
	
	НижняяГруппаКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "НижняяГруппаКонфликтВерсий", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, ГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ГруппаТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветФона"                       , ЦветаСтиля.ЦветФонаПодсказки);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Право);
	ДополнительныеСвойства.Вставить("Ширина"                         , 22);
	ДополнительныеСвойства.Вставить("ВертикальныйИнтервал"           , ИнтервалМеждуЭлементамиФормы.Половинный);
	
	ГруппаТекущаяВерсияКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаТекущаяВерсияКонфликтВерсий", 
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, НижняяГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокТекущаяВерсияКонфликтВерсий
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"  , НСтр("ru = 'Моя версия'"));
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ЦветПодписи);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьЗаголовокТекущаяВерсияКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись, 
		ГруппаТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаМенеджерТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	
	ГруппаМенеджерТекущаяВерсияКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаМенеджерТекущаяВерсияКонфликтВерсий", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаМенеджерТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.МенеджерEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаМенеджерТекущаяВерсияКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаМенеджерТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьМенеджерТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт", ШрифтыСтиля.МелкийШрифтТекста);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьМенеджерТекущаяВерсияКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаМенеджерТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаСуммаТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	
	ГруппаСуммаТекущаяВерсияКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаСуммаТекущаяВерсияКонфликтВерсий", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаСуммаТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.СуммаСерымEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаСуммаТекущаяВерсияКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаСуммаТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьСуммаТекущаяВерсияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт"      , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьСуммаТекущаяВерсияКонфликтВерсий", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаСуммаТекущаяВерсияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГиперссылкаПодсказкиКонфликтВерсий
	
	СоздатьКомандуФормы(ФормаДокумента, "ПодсказкаКонфликтВерсий", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Что выбрать?'"));
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"                     , "ПодсказкаКонфликтВерсий");
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Право);
	ДополнительныеСвойства.Вставить("ЦветТекста"                     , ЦветаСтиля.ПоясняющийТекст);
	ДополнительныеСвойства.Вставить("Шрифт"                          , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("Видимость"                      , Ложь);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ГиперссылкаПодсказкиКонфликтВерсий", Тип("КнопкаФормы"), 
		ВидКнопкиФормы.Гиперссылка, ГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаКомандыРазрешенияКонфликтВерсий
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Центр);
	
	ГруппаКомандыРазрешенияКонфликтВерсий = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаКомандыРазрешенияКонфликтВерсий", Тип("ГруппаФормы"),
		ВидГруппыФормы.ОбычнаяГруппа, ГруппаКонфликтВерсий, ДополнительныеСвойства);
	
	#Область КнопкаПринятьИзмененияКонфликтВерсий
	
	СоздатьКомандуФормы(ФормаДокумента, "ПринятьИзмененияКонфликтВерсий", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Принять изменения'"), НСтр("ru = 'Принять изменения из сервиса'"), БиблиотекаКартинок.СогласоватьВерсиюEDI);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"                     , "ПринятьИзмененияКонфликтВерсий");
	
	СоздатьЭлементФормы(ЭлементыФормы, "КнопкаПринятьИзмененияКонфликтВерсий", Тип("КнопкаФормы"), 
		ВидКнопкиФормы.ОбычнаяКнопка, ГруппаКомандыРазрешенияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область КнопкаОтклонитьИзмененияКонфликтВерсий
	
	СоздатьКомандуФормы(ФормаДокумента, "ОтклонитьИзмененияКонфликтВерсий", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Загрузить последние изменения'"), , БиблиотекаКартинок.ОтменитьЗаказEDI);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"                     , "ОтклонитьИзмененияКонфликтВерсий");
	
	СоздатьЭлементФормы(ЭлементыФормы, "КнопкаОтклонитьИзмененияКонфликтВерсий", Тип("КнопкаФормы"), 
		ВидКнопкиФормы.ОбычнаяКнопка, ГруппаКомандыРазрешенияКонфликтВерсий, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"                      , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, СтраницыРаботаССервисом, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаПредупреждениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка", БиблиотекаКартинок.ПредупреждениеEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияКартинкаПредупреждениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Картинка, СтраницаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьПредупреждениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"  , НСтр("ru = 'Обнаружен конфликт версий документа'") + ", ");
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьПредупреждениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"                , НСтр("ru = 'разрешить конфликт'"));
	ДополнительныеСвойства.Вставить("Поведение"                , ПоведениеОбычнойГруппы.Всплывающая);
	ДополнительныеСвойства.Вставить("Отображение"              , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("Группировка"              , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветТекстаЗаголовка"      , ЦветаСтиля.ГиперссылкаЦвет);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали" , Ложь);
	ДополнительныеСвойства.Вставить("Ширина"                   , 55);
	
	ГруппаКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, СтраницаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок" , НСтр("ru = 'Версию документа, которую вы сохраняете, изменил другой пользователь'"));
	ДополнительныеСвойства.Вставить("Ширина"    , 45);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияНадписьЗаголовокКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	#КонецОбласти
	
	#Область ВерхняяГруппаКонфликтВерсийПриЗаписи
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Ширина"                         , 55);
	
	ВерхняяГруппаКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "ВерхняяГруппаКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, ГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ГруппаПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветФона"                       , ЦветаСтиля.ЦветФонаПодсказки);
	ДополнительныеСвойства.Вставить("Ширина"                         , 22);
	ДополнительныеСвойства.Вставить("ВертикальныйИнтервал"           , ИнтервалМеждуЭлементамиФормы.Половинный);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Центр);
	
	ГруппаПоследнееИзменениеКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПоследнееИзменениеКонфликтВерсийПриЗаписи", 
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, ВерхняяГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокПоследнееИзменениеКонфликтВерсийПриЗаписи
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ЦветИнформацияОшибочна);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьЗаголовокПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись, 
		ГруппаПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	
	ГруппаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.МенеджерEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт", ШрифтыСтиля.МелкийШрифтТекста);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	
	ГруппаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.СуммаСерымEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт"      , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ДекорацияКартинкаКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка"                       , БиблиотекаКартинок.КонфликтВерсийПриСохраненииEDI);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Центр);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область НижняяГруппаКонфликтВерсийПриЗаписи
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Истина);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Ширина"                         , 55);
	
	НижняяГруппаКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "НижняяГруппаКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа, ГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ГруппаРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветФона"                       , ЦветаСтиля.ЦветФонаПодсказки);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	ДополнительныеСвойства.Вставить("Ширина"                         , 22);
	ДополнительныеСвойства.Вставить("ВертикальныйИнтервал"           , ИнтервалМеждуЭлементамиФормы.Половинный);
	
	ГруппаРедактируемаяВерсияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаРедактируемаяВерсияКонфликтВерсийПриЗаписи", 
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, НижняяГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокРедактируемаяВерсияКонфликтВерсийПриЗаписи
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ЦветПодписи);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьЗаголовокРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись, 
		ГруппаРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	
	ГруппаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.МенеджерEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт", ШрифтыСтиля.МелкийШрифтТекста);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	
	ГруппаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.СуммаСерымEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт"      , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ДополнительныеСвойства.Вставить("ЦветФона"                       , ЦветаСтиля.ЦветФонаПоясненияОшибкиБИП);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Право);
	ДополнительныеСвойства.Вставить("Ширина"                         , 22);
	ДополнительныеСвойства.Вставить("ВертикальныйИнтервал"           , ИнтервалМеждуЭлементамиФормы.Половинный);
	
	ГруппаТекущаяВерсияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаТекущаяВерсияКонфликтВерсийПриЗаписи", 
		Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, НижняяГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияНадписьЗаголовокТекущаяВерсияКонфликтВерсийПриЗаписи
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок"  , НСтр("ru = 'Мои изменения - Сейчас'"));
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.РезультатУспехЦвет);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьЗаголовокТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись, 
		ГруппаТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	
	ГруппаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.МенеджерEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт", ШрифтыСтиля.МелкийШрифтТекста);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГруппаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Лево);
	
	ГруппаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, 
		"ГруппаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"), ВидГруппыФормы.ОбычнаяГруппа, 
		ГруппаТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область ДекорацияКартинкаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Картинка" , БиблиотекаКартинок.СуммаСерымEDI);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияКартинкаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Картинка,
		ГруппаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ДекорацияНадписьСуммаТекущаяВерсияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Шрифт"      , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("ЦветТекста" , ЦветаСтиля.ПоясняющийТекст);
	
	СоздатьЭлементФормы(ЭлементыФормы, 
		"ДекорацияНадписьСуммаТекущаяВерсияКонфликтВерсийПриЗаписи", Тип("ДекорацияФормы"), ВидДекорацииФормы.Надпись,
		ГруппаСуммаТекущаяВерсияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ГиперссылкаПодсказкиКонфликтВерсийПриЗаписи
	
	СоздатьКомандуФормы(ФормаДокумента, "ПодсказкаКонфликтВерсийПриЗаписи", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Что выбрать?'"));
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"                     , "ПодсказкаКонфликтВерсийПриЗаписи");
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Право);
	ДополнительныеСвойства.Вставить("ЦветТекста"                     , ЦветаСтиля.ПоясняющийТекст);
	ДополнительныеСвойства.Вставить("Шрифт"                          , ШрифтыСтиля.МелкийШрифтТекста);
	ДополнительныеСвойства.Вставить("Видимость"                      , Ложь);
	
	 СоздатьЭлементФормы(ЭлементыФормы, "ГиперссылкаПодсказкиКонфликтВерсийПриЗаписи", Тип("КнопкаФормы"), 
		ВидКнопкиФормы.Гиперссылка, ГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область ГруппаКомандыРазрешенияКонфликтВерсийПриЗаписи
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Отображение"                    , ОтображениеОбычнойГруппы.Нет);
	ДополнительныеСвойства.Вставить("ОтображатьЗаголовок"            , Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали"       , Ложь);
	ДополнительныеСвойства.Вставить("Группировка"                    , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложениеВГруппе" , ГоризонтальноеПоложениеЭлемента.Центр);
	
	ГруппаКомандыРазрешенияКонфликтВерсийПриЗаписи = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаКомандыРазрешенияКонфликтВерсийПриЗаписи", Тип("ГруппаФормы"),
		ВидГруппыФормы.ОбычнаяГруппа, ГруппаКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#Область КнопкаСохранитьИзмененияКонфликтВерсийПриЗаписи
	
	СоздатьКомандуФормы(ФормаДокумента, "СохранитьИзмененияКонфликтВерсий", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Сохранить мои изменения'"), НСтр("ru = 'Сохранить мои изменения в сервис'"), БиблиотекаКартинок.СохранитьФайл);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"                     , "СохранитьИзмененияКонфликтВерсий");
	
	СоздатьЭлементФормы(ЭлементыФормы, "КнопкаСохранитьИзмененияКонфликтВерсийПриЗаписи", Тип("КнопкаФормы"), 
		ВидКнопкиФормы.ОбычнаяКнопка, ГруппаКомандыРазрешенияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область КнопкаЗагрузитьИзмененияКонфликтВерсийПриЗаписи
	
	СоздатьКомандуФормы(ФормаДокумента, "ЗагрузитьИзмененияКонфликтВерсий", "Подключаемый_ВыполнитьКомандуEDI", 
		НСтр("ru = 'Отклонить изменения'"), , БиблиотекаКартинок.ЗаполнитьФорму);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды"                     , "ЗагрузитьИзмененияКонфликтВерсий");
	
	СоздатьЭлементФормы(ЭлементыФормы, "КнопкаЗагрузитьИзмененияКонфликтВерсийПриЗаписи", Тип("КнопкаФормы"), 
		ВидКнопкиФормы.ОбычнаяКнопка, ГруппаКомандыРазрешенияКонфликтВерсийПриЗаписи, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаДлительнаяОперация
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка"       , ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложениеПодчиненных" , ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали"           , Истина);
	
	СтраницаДлительнаяОперация = СоздатьЭлементФормы(ЭлементыФормы, "СтраницаДлительнаяОперацияEDI", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, ПанельСостоянияСтраницы, ДополнительныеСвойства);
	
	#Область КартинкаДлительнаяОперация
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Картинка", БиблиотекаКартинок.ДлительнаяОперация16);
	
	СоздатьЭлементФормы(ЭлементыФормы, "КартинкаДлительнаяОперацияEDI", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Картинка, СтраницаДлительнаяОперация, ДополнительныеПараметры);
	
	#КонецОбласти
	
	#Область НадписьДлительнаяОперация
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Выполняется взаимодействие с сервисом 1С:EDI'"));
	
	СоздатьЭлементФормы(ЭлементыФормы, "НадписьДлительнаяОперацияEDI", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаДлительнаяОперация, ДополнительныеПараметры);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаСкрытыеЭлементы
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	
	ПанельСостоянияСтраницаСкрытыеЭлементы = СоздатьЭлементФормы(ЭлементыФормы, "ПанельСостоянияСтраницаСкрытыеЭлементы",
		Тип("ГруппаФормы"), ВидГруппыФормы.Страница, ПанельСостоянияСтраницы, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ДекорацияРазделитель
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Истина);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина", Ложь);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияРазделитель", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, ПанельСостояния, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#Область КоманднаяПанель
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Ложь);
	
	КоманднаяПанель = СоздатьЭлементФормы(ЭлементыФормы, "КоманднаяПанельОткрытьПротоколВзаимодействия", Тип("ГруппаФормы"), 
		ВидГруппыФормы.КоманднаяПанель, ПанельСостояния, ДополнительныеСвойства);
	
	#Область КомандаОткрытьПротоколВзаимодействия
	
	КомандаФормы = СоздатьКомандуФормы(ФормаДокумента, "ОткрытьПротоколВзаимодействия", "Подключаемый_ВыполнитьКомандуEDI",
		НСтр("ru = 'Протокол EDI'"), , БиблиотекаКартинок.БизнесСетьПротокол);
	КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИмяКоманды",        "ОткрытьПротоколВзаимодействия");
	ДополнительныеСвойства.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.ПриАктивности);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ОткрытьПротоколВзаимодействия", Тип("КнопкаФормы"), ВидКнопкиФормы.ОбычнаяКнопка,
		КоманднаяПанель, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ПротоколВзаимодействияКомпонентаWSS
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали",   Ложь);
	ДополнительныеСвойства.Вставить("Ширина",                   1);
	ДополнительныеСвойства.Вставить("Высота",                   1);
	ДополнительныеСвойства.Вставить("Доступность",              Ложь);
	ДополнительныеСвойства.Вставить("ТолькоПросмотр",           Истина);
	ДополнительныеСвойства.Вставить("ПутьКДанным",              "ПротоколВзаимодействияWSS");
	ДополнительныеСвойства.Вставить("ПоложениеЗаголовка",       ПоложениеЗаголовкаЭлементаФормы.Нет);
	ДополнительныеСвойства.Вставить("ЦветРамки",                ЦветаСтиля.ЦветФонаПанелиСостоянияEDI);
	
	ПротоколВзаимодействияКомпонентаWSS = СоздатьЭлементФормы(ЭлементыФормы, "ПротоколВзаимодействияWSS", Тип("ПолеФормы"),
		ВидПоляФормы.ПолеHTMLДокумента, ПанельСостоянияСтраницаСкрытыеЭлементы, ДополнительныеСвойства);
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	
	Если ЭтоВебКлиент Тогда
		ЭлементыФормы.Переместить(ПротоколВзаимодействияКомпонентаWSS, ПанельСостояния, КоманднаяПанель);
	КонецЕсли;
	
	ПротоколВзаимодействияКомпонентаWSS.УстановитьДействие("ПриНажатии"          , "Подключаемый_ПротоколВзаимодействияПриНажатии");
	ПротоколВзаимодействияКомпонентаWSS.УстановитьДействие("ДокументСформирован" , "Подключаемый_ПротоколВзаимодействияДокументСформирован");
	
	#КонецОбласти
	
	#Область БуферОбменаEDI
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Ложь);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали",   Ложь);
	ДополнительныеСвойства.Вставить("Ширина",                   1);
	ДополнительныеСвойства.Вставить("Высота",                   1);
	ДополнительныеСвойства.Вставить("Доступность",              Ложь);
	ДополнительныеСвойства.Вставить("ТолькоПросмотр",           Истина);
	ДополнительныеСвойства.Вставить("ПутьКДанным",              "БуферОбменаEDI");
	ДополнительныеСвойства.Вставить("ПоложениеЗаголовка",       ПоложениеЗаголовкаЭлементаФормы.Нет);
	ДополнительныеСвойства.Вставить("ЦветРамки",                ЦветаСтиля.ЦветФонаПанелиСостоянияEDI);
	
	БуферОбменаEDI = СоздатьЭлементФормы(ЭлементыФормы, "БуферОбменаEDI", Тип("ПолеФормы"),
		ВидПоляФормы.ПолеHTMLДокумента, ПанельСостоянияСтраницаСкрытыеЭлементы, ДополнительныеСвойства);
	
	Если ЭтоВебКлиент Тогда
		ЭлементыФормы.Переместить(БуферОбменаEDI, ПанельСостояния, КоманднаяПанель);
	КонецЕсли;
	
	БуферОбменаEDI.УстановитьДействие("ДокументСформирован" , "Подключаемый_ПротоколВзаимодействияДокументСформирован");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ПанельПротоколаВзаимодействия
		
	ПанельПротоколаВзаимодействия = СоздатьЭлементФормы(ЭлементыФормы, 
		ИмяГруппыФормыПанельПротоколаВзаимодействия, Тип("ГруппаФормы"), 
		ВидГруппыФормы.ОбычнаяГруппа);
		
	#Область СтраницыСообщенияПротоколаВзаимодействия
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ОтображениеСтраниц", ОтображениеСтраницФормы.Нет);
	ДополнительныеСвойства.Вставить("Ширина",             25);
	
	СтраницыПротоколаВзаимодействия = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПротоколВзаимодействияСтраницы", 
		Тип("ГруппаФормы"), ВидГруппыФормы.Страницы, ПанельПротоколаВзаимодействия, ДополнительныеСвойства);
	
	#Область СтраницаПротоколВзаимодействияДоступен
	
	СтраницаДоступногоПротокола = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПротоколВзаимодействияДоступен", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, СтраницыПротоколаВзаимодействия);
	
	#Область ПротоколВзаимодействияHTML
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Истина);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали",   Истина);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина",   Ложь);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяВысота",   Ложь);
	ДополнительныеСвойства.Вставить("ПутьКДанным",              "ПротоколВзаимодействияHTML");
	ДополнительныеСвойства.Вставить("ПоложениеЗаголовка",       ПоложениеЗаголовкаЭлементаФормы.Нет);
	ДополнительныеСвойства.Вставить("ЦветРамки",                ЦветаСтиля.ЦветФонаФормы);
	
	ПротоколВзаимодействияHTML = СоздатьЭлементФормы(ЭлементыФормы, "ПротоколВзаимодействияHTML", Тип("ПолеФормы"), 
		ВидПоляФормы.ПолеHTMLДокумента, СтраницаДоступногоПротокола, ДополнительныеСвойства);
	
	ПротоколВзаимодействияHTML.УстановитьДействие("ПриНажатии"          , "Подключаемый_ПротоколВзаимодействияПриНажатии");
	ПротоколВзаимодействияHTML.УстановитьДействие("ДокументСформирован" , "Подключаемый_ПротоколВзаимодействияДокументСформирован");
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаПротоколВзаимодействияНеДоступен
	
	СтраницаНедоступногоПротокола = СоздатьЭлементФормы(ЭлементыФормы, "ГруппаПротоколВзаимодействияНедоступен", Тип("ГруппаФормы"), 
		ВидГруппыФормы.Страница, СтраницыПротоколаВзаимодействия);
	
	#Область ДекорацияПротоколВзаимодействияНеДоступен
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Заголовок", 
		НСтр("ru = 'Для взаимодействия по EDI необходимо начать процесс с отправки документа контрагенту'"));
	ДополнительныеСвойства.Вставить("РастягиватьПоГоризонтали", Истина);
	ДополнительныеСвойства.Вставить("РастягиватьПоВертикали",   Истина);
	ДополнительныеСвойства.Вставить("ГоризонтальноеПоложение",  ГоризонтальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("ВертикальноеПоложение",    ВертикальноеПоложениеЭлемента.Центр);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяШирина",   Ложь);
	ДополнительныеСвойства.Вставить("АвтоМаксимальнаяВысота",   Ложь);
	ДополнительныеСвойства.Вставить("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	СоздатьЭлементФормы(ЭлементыФормы, "ДекорацияПротоколВзаимодействияНедоступен", Тип("ДекорацияФормы"), 
		ВидДекорацииФормы.Надпись, СтраницаНедоступногоПротокола, ДополнительныеСвойства);
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКомандамиФормы

Функция СоздатьКомандуФормы(Форма, ИмяКоманды, Действие, Заголовок = "", Подсказка = "", Картинка = Неопределено)
	
	Команда = Форма.Команды.Найти(ИмяКоманды);
	
	Если Не Команда = Неопределено Тогда
		Возврат Команда;
	КонецЕсли;
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = Действие;
	Команда.Заголовок = Заголовок;
	Команда.Подсказка = Подсказка;
	
	Если Не Картинка = Неопределено Тогда
		Команда.Картинка    = Картинка;
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
	Возврат Команда;
	
КонецФункции

#КонецОбласти

#Область РаботаСHTML

Процедура ПрочитатьПоляHTML(ФормаДокумента)
	
	ФормаДокумента.ПротоколВзаимодействияHTML = ПолучитьОбщийМакет("ПротоколВзаимодействияHTMLСервисаEDI").ПолучитьТекст();
	
	ОписаниеЦвета = Новый Структура("Красный, Зеленый, Синий", 0, 0, 0);
	
	ЦветФона    = Метаданные.ЭлементыСтиля.ЦветФонаПанелиСостоянияEDI.Значение;
	ЗаполнитьЗначенияСвойств(ОписаниеЦвета, ЦветФона);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормыДокументов

Процедура ИнициализироватьФорму(ФормаДокумента)
	
	ДобавитьЭлементыФормы(ФормаДокумента);
	ПрочитатьПоляHTML(ФормаДокумента);
	
	РазместитьНаФормеПодменюКомандEDI(ФормаДокумента);
	
	ФормаДокумента.СвойстваEDI.ФормаИнициализирована = Истина;
	ФормаДокумента.СвойстваEDI.ТипДокумента = РаботаСДаннымиEDIСлужебный.ТипДокументаEDI(ФормаДокумента.Объект.Ссылка);
	
	РедактированиеРеквизитовEDIИнтеграция.ПодготовитьРеквизитыФормы(ФормаДокумента);
	РедактированиеРеквизитовEDI.СохранитьДоступностьЭлементовПоУмолчанию(ФормаДокумента);
	
КонецПроцедуры

Процедура ПриСозданииЧтенииНаСервере(ФормаДокумента)
	
	ДокументыEDIИнтеграцияКлиентСервер.ПрочитатьДанныеДокумента(ФормаДокумента);
	ДокументыEDIИнтеграцияКлиентСервер.ЗаполнитьНастройкиОрганизации(ФормаДокумента);
	
	ФормаДокумента.СвойстваEDI.ДанныеСтатусаДокумента.ТипДокумента = 
		РаботаСДаннымиEDIСлужебныйВызовСервера.ТипДокументаEDI(ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка);
	
	ЗаполнитьПоследнююНастройкуВариантаУказанияНоменклатуры(ФормаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОтсутствиеПодключения

Функция ЗначениеЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки, МенеджерПолученияЗначений = Неопределено)
	
	Результат = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст;
	
	Если МенеджерПолученияЗначений = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Или Результат = "*" Тогда
		Возврат МенеджерПолученияЗначений.ПустаяСсылка();
	Иначе
		Возврат МенеджерПолученияЗначений[Результат];
	КонецЕсли;
	
КонецФункции

Функция ТаблицаШаблоновСообщений() Экспорт 
	
	ТаблицаШаблоновСообщений = Новый ТаблицаЗначений;
	ТаблицаШаблоновСообщений.Колонки.Добавить("Действие"                  , Новый ОписаниеТипов("ПеречислениеСсылка.ДействияПроцессаЗаказаEDI"));
	ТаблицаШаблоновСообщений.Колонки.Добавить("СторонаВыполнившаяДействие", Новый ОписаниеТипов("ПеречислениеСсылка.СтороныУчастникиСервисаEDI"));
	ТаблицаШаблоновСообщений.Колонки.Добавить("СторонаОтображения"        , Новый ОписаниеТипов("ПеречислениеСсылка.СтороныУчастникиСервисаEDI"));
	ТаблицаШаблоновСообщений.Колонки.Добавить("ПредыдущийСтатус"          , Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказаEDI"));
	ТаблицаШаблоновСообщений.Колонки.Добавить("Заголовок"                 , Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновСообщений.Колонки.Добавить("ТекстСообщения"            , Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновСообщений.Колонки.Добавить("УказыватьСсылку"           , Новый ОписаниеТипов("Булево"));
	
	Макет = ПолучитьОбщийМакет("ШаблоныСообщенийEDI");
	
	Для Счетчик = 2 По Макет.ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаШаблоновСообщений.Добавить();
		НоваяСтрока.Действие                   = ЗначениеЯчейки(Макет, Счетчик, 1, Перечисления.ДействияПроцессаЗаказаEDI);
		НоваяСтрока.СторонаВыполнившаяДействие = ЗначениеЯчейки(Макет, Счетчик, 2, Перечисления.СтороныУчастникиСервисаEDI);
		НоваяСтрока.СторонаОтображения         = ЗначениеЯчейки(Макет, Счетчик, 3, Перечисления.СтороныУчастникиСервисаEDI);
		НоваяСтрока.ПредыдущийСтатус           = ЗначениеЯчейки(Макет, Счетчик, 4, Перечисления.СтатусыЗаказаEDI);
		НоваяСтрока.Заголовок                  = ЗначениеЯчейки(Макет, Счетчик, 5);
		НоваяСтрока.ТекстСообщения             = ЗначениеЯчейки(Макет, Счетчик, 6);
		НоваяСтрока.УказыватьСсылку            = ЗначениеЯчейки(Макет, Счетчик, 7) = "+";
	КонецЦикла;
	
	Возврат ТаблицаШаблоновСообщений;
	
КонецФункции

Функция ПодобратьСтрокиСообщений(ТаблицаШаблоновСообщений, СтруктураПоиска) Экспорт
	
	Строки = ТаблицаШаблоновСообщений.НайтиСтроки(СтруктураПоиска);
	
	Если Не Строки.Количество() = 0 Тогда
		Возврат Строки;
	КонецЕсли;
	
	СтруктураПоиска.ПредыдущийСтатус = Перечисления.СтатусыЗаказаEDI.ПустаяСсылка();
	
	Строки = ТаблицаШаблоновСообщений.НайтиСтроки(СтруктураПоиска);
	
	Если Не Строки.Количество() = 0 Тогда
		Возврат Строки;
	КонецЕсли;
	
	Возврат Новый Массив
	
КонецФункции

Процедура ВывестиСтатичныеСообщенияПротоколаВзаимодействия(ФормаДокумента, ДлительнаяОперация)
	
	ДанныеВерсий = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Если ДанныеВерсий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
	
	ЗаписьРеестра = РегистрыСведений.СостоянияДокументовEDI.ЗаписиРеестраПоДокументам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка)).Получить(ДокументСсылка);
		
	Если ЗаписьРеестра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВерсий.Сортировать("ДатаСтатуса");
	
	Если ДанныеВерсий = Неопределено Тогда
		Возврат; // Не удалось получить данные от сервиса
	КонецЕсли;
	
	Если Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений Тогда
		ИнициализироватьТабличнуюЧастьСообщений(ФормаДокумента);
	КонецЕсли;
	
	ТабличнаяЧастьСообщений  = ФормаДокумента.ТабличнаяЧастьСообщений;
	ТаблицаШаблоновСообщений = ТаблицаШаблоновСообщений();
	ИдентификаторыОбъектов   = ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов;
	
	ТабличнаяЧастьСообщений.Очистить();
	
	Если ЗаписьРеестра.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		СторонаОтображения = Перечисления.СтороныУчастникиСервисаEDI.Покупатель;
	ИначеЕсли ЗаписьРеестра.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		СторонаОтображения = Перечисления.СтороныУчастникиСервисаEDI.Поставщик;
	КонецЕсли;
	
	Для каждого ДанныеВерсии Из ДанныеВерсий Цикл
		
		Если ДанныеВерсии.ИдентификаторВерсии = РаботаСВерсиямиEDIСервер.ИдентификаторТекущейРевизииСервиса() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Действие, СторонаВыполнившаяДействие, ПредыдущийСтатус, СторонаОтображения");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеВерсии);
		СтруктураПоиска.СторонаОтображения = СторонаОтображения;
		
		СтрокиШаблонаСообщения = ПодобратьСтрокиСообщений(ТаблицаШаблоновСообщений, СтруктураПоиска);
		
		НомерСообщения = 0;
		
		Для каждого СтрокаШаблонаСообщения Из СтрокиШаблонаСообщения Цикл
			
			УникальныйИдентификаторСообщения = Новый УникальныйИдентификатор;
			НомерСообщения = НомерСообщения + 1;
			
			СообщениеПротокола = ТабличнаяЧастьСообщений.Добавить();
			
			СообщениеПротокола.ИдентификаторСообщения = СтрШаблон("%1#%2", УникальныйИдентификаторСообщения, Формат(НомерСообщения, "ЧГ="));
			
			СообщениеПротокола.ИдентификаторОтправителя = ?(СтрокаШаблонаСообщения.СторонаВыполнившаяДействие = СторонаОтображения,
				ИдентификаторыОбъектов.ИдентификаторОрганизации, ИдентификаторыОбъектов.ИдентификаторКонтрагента);
			СообщениеПротокола.Дата                     = ДанныеВерсии.ДатаСтатуса;
			СообщениеПротокола.Заголовок                = СтрокаШаблонаСообщения.Заголовок;
			СообщениеПротокола.Текст                    = СтрокаШаблонаСообщения.ТекстСообщения;
			СообщениеПротокола.Статус                   = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторСтатусаДоставкиОтправлен();
			СообщениеПротокола.СистемноеСообщение       = Истина;
			СообщениеПротокола.НомерСистемногоСообщения = НомерСообщения;
			
			Если СтрокаШаблонаСообщения.УказыватьСсылку Тогда
				СообщениеПротокола.Гиперссылка              = НавигационнаяСсылкаПоИдентификаторуВерсииДокумента(
					ИдентификаторыОбъектов.ИдентификаторДокумента, ДанныеВерсии.ИдентификаторВерсии);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодменюКомандEDI

Процедура РазместитьНаФормеПодменюКомандEDI(Форма)
	
	ИмяГруппыКоманд = Форма.СвойстваEDI.МестоРазмещенияКоманд;
	
	Если Не ПустаяСтрока(ИмяГруппыКоманд) Тогда
		МестоРазмещенияКомандПоУмолчанию = Форма.Элементы.Найти(ИмяГруппыКоманд);
	КонецЕсли;
	
	ПредставлениеУчитыватьНоменклатуруВладельца = Форма.ПараметрыНоменклатурыКонтрагентаБЭД.ПредставлениеУчитыватьНоменклатуруВладельца;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредставлениеУчитыватьНоменклатуруВладельца", ПредставлениеУчитыватьНоменклатуруВладельца);
	
	ИмяФормы = Форма.ИмяФормы;
	
	КомандыEDI = ДокументыEDIПовтИсп.КомандыEDIФормы(ИмяФормы, ДополнительныеПараметры).Скопировать();
	
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для Каждого КомандаEDI Из КомандыEDI Цикл
			Если ПустаяСтрока(КомандаEDI.МестоРазмещения) Тогда
				КомандаEDI.МестоРазмещения = МестоРазмещенияКомандПоУмолчанию.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаКоманд = КомандыEDI.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Если МестоРазмещенияКомандПоУмолчанию = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
		ПодменюEDI = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + "КомандыEDI", Тип("ГруппаФормы"), МестоРазмещенияКоманд);
		ПодменюEDI.Вид = ВидГруппыФормы.Подменю;
		МестоРазмещенияКомандПоУмолчанию = ПодменюEDI;
	КонецЕсли;
	
	МестоРазмещенияКомандПоУмолчанию.Картинка = БиблиотекаКартинок.ЛоготипEDI;
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		НайденныеКоманды = КомандыEDI.НайтиСтроки(Новый Структура("МестоРазмещения", МестоРазмещения));
		ЭлементФормыДляРазмещения = Форма.Элементы.Найти(МестоРазмещения);
		Если ЭлементФормыДляРазмещения = Неопределено Тогда
			ЭлементФормыДляРазмещения = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		Если НайденныеКоманды.Количество() > 0 Тогда
			ДобавитьКомандыEDI(Форма, НайденныеКоманды, ЭлементФормыДляРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	АдресКомандEDIВоВременномХранилище = "АдресКомандEDIВоВременномХранилище";
	КомандаФормы = Форма.Команды.Найти(АдресКомандEDIВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(АдресКомандEDIВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыEDI, Форма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандEDIФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаEDI Из КомандыEDI Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандEDIФормы.Добавить(), КомандаEDI);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандEDIФормы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список команд EDI для указанной формы документа.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения, Строка - форма или полное имя формы, для которой необходимо получить список команд EDI.
//  ДополнительныеПараметры - Структура                          - дополнительные параметры команд.
//
// Возвращаемое значение:
//  ТаблицаЗначений Из См. НоваяТаблицаКомандEDI
//
Функция КомандыEDIФормы(Знач Форма, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено 
		И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	КонецЕсли;
	
	КомандыEDI = НоваяТаблицаКомандEDI();
	СформироватьКомандыEDI(ОбъектМетаданных.ПолноеИмя(), КомандыEDI, ДополнительныеПараметры);
	
	КомандыEDI.Сортировать("Порядок Возр, Представление Возр");
	
	Возврат КомандыEDI;
	
КонецФункции

// Создает пустую таблицу для размещения в нее команд ЭДО.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд ЭДО:
//
//  * Идентификатор - Строка - Идентификатор команды ЭДО, по которому менеджер ЭДО определяет печатную
//                             форму, которую необходимо сформировать.
//                             Пример: "СчетЗаказ".
//                  - Массив - список идентификаторов команд ЭДО.
//
//  * Представление - Строка            - Представление команды в меню ЭДО. 
//                                         Пример: "Просмотр документа".
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление.
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню ЭДО осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню ЭДО.
//                                         Пример: БиблиотекаКартинок.ФорматPDF.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда ЭДО будет отображаться во
//                                        всех формах объекта, где встроена подсистема ЭДО.
//                                         Пример: "ФормаДокумента".
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду ЭДО. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "ЭДО". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода.
//                                        
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды ЭДО.
//
Функция НоваяТаблицаКомандEDI()
	
	Результат = Новый ТаблицаЗначений;
	
	// Описание.
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// Отображение команды.
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Отображение", Новый ОписаниеТипов("ОтображениеКнопки"));
	Результат.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Доступность", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТолькоВоВсехДействиях", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("РежимИспользованияПараметра", Новый ОписаниеТипов("РежимИспользованияПараметраКоманды"));
	
	// Служебные колонки.
	
	// По умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеТребуетсяЗаписьДокумента", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	Возврат Результат;
	
КонецФункции

// Формирование команд EDI.
//
// Параметры:
//  ПолноеИмя               - Строка          - имя объекта, например "Документ.РеализацияТоваровУслуг".
//  КомандыEDI              - ТаблицаЗначений - подготавливаемый список команд EDI.
//  ДополнительныеПараметры - Структура       - дополнительные параметры команд.
//
Процедура СформироватьКомандыEDI(Знач ПолноеИмя, КомандыEDI, Знач ДополнительныеПараметры)
	
	КомандаEDI = КомандыEDI.Добавить();
	КомандаEDI.Обработчик    = "ДокументыEDIИнтеграцияКлиент.ИзменитьВариантУказанияНоменклатурыВладельца";
	КомандаEDI.Идентификатор = "УчитыватьНоменклатуруВладельца";
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ПредставлениеУчитыватьНоменклатуруВладельца) Тогда
		Представление = ДополнительныеПараметры.ПредставлениеУчитыватьНоменклатуруВладельца;
	Иначе
		Представление = НСтр("ru = 'Учитывать номенклатуру контрагента'");
	КонецЕсли;
	КомандаEDI.Представление = Представление;
	КомандаEDI.МестоРазмещения            = "КомандаEDIДополнительное";
	КомандаEDI.ТолькоВоВсехДействиях      = Истина;
	КомандаEDI.Доступность                = Истина;
	КомандаEDI.Порядок                    = "10";
	КомандаEDI.Видимость                  = Истина;
	КомандаEDI.НеТребуетсяЗаписьДокумента = Истина;
	
	КомандаEDI = КомандыEDI.Добавить();
	КомандаEDI.Обработчик    = "ДокументыEDIИнтеграцияКлиент.ПерезаполнитьДокументАктуальнойВерсией";
	КомандаEDI.Идентификатор = "ПерезаполнитьДокументEDI";
	КомандаEDI.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
	КомандаEDI.Картинка                    = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
	КомандаEDI.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
	КомандаEDI.МестоРазмещения             = "КомандаEDIСервис";
	КомандаEDI.ТолькоВоВсехДействиях       = Истина;
	КомандаEDI.Доступность                 = Истина;
	КомандаEDI.Порядок                     = "20";
	КомандаEDI.Видимость                   = Истина;
	
#Область РазрешитьРедактированиеВФинальномСтатусе
	
	КомандаEDI = КомандыEDI.Добавить();
	КомандаEDI.Обработчик    = "ДокументыEDIИнтеграцияКлиент.РазрешитьРедактированиеДокументаВФинальномСтатусе";
	КомандаEDI.Идентификатор = "РазрешитьРедактированиеДокументаВФинальномСтатусеEDI";
	КомандаEDI.Представление = НСтр("ru = 'Разрешить редактирование в финальном статусе 1C:EDI'");
	КомандаEDI.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
	КомандаEDI.МестоРазмещения             = "КомандаEDIСервис";
	КомандаEDI.ТолькоВоВсехДействиях       = Истина;
	КомандаEDI.Доступность                 = Истина;
	КомандаEDI.Порядок                     = "30";
	КомандаEDI.Видимость                   = Истина;
	
#КонецОбласти
	
КонецПроцедуры

// Создает подменю "EDI" на форме и добавляет в него команды EDI.
Процедура ДобавитьКомандыEDI(Форма, КомандыEDI, Знач МестоРазмещенияКоманд = Неопределено)
	
	МестоРазмещения = МестоРазмещенияКоманд;
	Для Каждого ОписаниеКомандыEDI Из КомандыEDI Цикл
		
		НомерКоманды = ОписаниеКомандыEDI.Владелец().Индекс(ОписаниеКомандыEDI);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + ОписаниеКомандыEDI.Идентификатор + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуEDI";
		КомандаФормы.Заголовок = ОписаниеКомандыEDI.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыEDI.Отображение) Тогда 
			КомандаФормы.Отображение = ОписаниеКомандыEDI.Отображение;
		Иначе 
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыEDI.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыEDI.Картинка;
		КонецЕсли;
		
		ОписаниеКомандыEDI.ИмяКомандыНаФорме = ИмяКоманды;
		
		МестоРазмещенияИмя = МестоРазмещенияКоманд.Имя + ОписаниеКомандыEDI.МестоРазмещения;
		
		Если Форма.Элементы.Найти(МестоРазмещенияИмя) = Неопределено Тогда
			МестоРазмещения = Форма.Элементы.Добавить(МестоРазмещенияИмя, Тип("ГруппаФормы"), МестоРазмещения);
			МестоРазмещения.Вид = ВидГруппыФормы.ГруппаКнопок;
			МестоРазмещения.Заголовок = СтрЗаменить(ОписаниеКомандыEDI.МестоРазмещения, "КомандыEDI", "");
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещения);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		НовыйЭлемент.Видимость = ОписаниеКомандыEDI.Видимость;
		НовыйЭлемент.Пометка = ОписаниеКомандыEDI.Пометка;
		НовыйЭлемент.ТолькоВоВсехДействиях = ОписаниеКомандыEDI.ТолькоВоВсехДействиях;
		
		Если ОписаниеКомандыEDI.Идентификатор = "УчитыватьНоменклатуруВладельца" Тогда
			Форма.ПараметрыНоменклатурыКонтрагентаБЭД.ИмяКомандыУчитыватьВладельцаНоменклатуры = ИмяКоманды;
		КонецЕсли;
		
		Форма.СвойстваEDI.ИменаЭлементовКомандEDI.Вставить(ОписаниеКомандыEDI.Идентификатор, ИмяКоманды);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДоступностиДействияДокумента

Процедура ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команда, Категория)
	
	НоваяСтрока = ТаблицаКомандДокумента.Добавить();
	НоваяСтрока.Команда   = Команда;
	НоваяСтрока.Категория = Категория;
	
КонецПроцедуры
 
Процедура ЗаполнитьТаблицуКомандДокумента(ТаблицаКомандДокумента)
	
	Команды   = Перечисления.КомандыПроцессаЗаказаEDI;
	Категории = Перечисления.КатегорииКомандСервисаEDI;
	
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.СоздатьЗаказПоставщику                      , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтменитьЗаказПоставщику                     , Категории.Аннулирование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтменитьЗаказКлиента                        , Категории.Аннулирование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.СогласоватьВерсиюПоставщика                 , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.СогласоватьВерсиюПокупателя                 , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.НаправитьНаСогласованиеВерсиюПоставщика     , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.НаправитьНаСогласованиеВерсиюПокупателя     , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтозватьОтменуЗаказаПоставщику              , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтозватьОтменуЗаказаКлиента                 , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ПодтвердитьОтменуЗаказаПоставщику           , Категории.Аннулирование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ПодтвердитьОтменуЗаказаКлиента              , Категории.Аннулирование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтозватьЗапросНаИзменениеЗаказаПоставщику   , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтозватьЗапросНаИзменениеЗаказаКлиента      , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтклонитьЗапросНаИзменениеЗаказаПоставщику  , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтклонитьЗапросНаИзменениеЗаказаКлиента     , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтклонитьЗапросНаВыполнениеЗаказаПоставщику , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ПодтвердитьВыполнениеЗаказаПоставщику       , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтметитьВыполнениеЗаказаКлиента             , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтозватьОтметкуВыполненияЗаказаКлиента      , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.НаправитьЗапросНаИзменениеЗаказаПоставщику  , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.НаправитьЗапросНаИзменениеЗаказаКлиента     , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтправитьЗапросНаИзменениеЗаказаПоставщику  , Категории.Согласование);
	ДобавитьКомандуДокумента(ТаблицаКомандДокумента, Команды.ОтправитьЗапросНаИзменениеЗаказаКлиента     , Категории.Согласование);
	
КонецПроцедуры

Функция ТаблицаКомандДокумента()
	
	ТаблицаКомандДокумента = Новый ТаблицаЗначений;
	ТаблицаКомандДокумента.Колонки.Добавить("Команда"   , Новый ОписаниеТипов("ПеречислениеСсылка.КомандыПроцессаЗаказаEDI"));
	ТаблицаКомандДокумента.Колонки.Добавить("Категория" , Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииКомандСервисаEDI"));
	
	ЗаполнитьТаблицуКомандДокумента(ТаблицаКомандДокумента);
	
	Возврат ТаблицаКомандДокумента;
	
КонецФункции

Функция КатегорияКомандыДокумента(Команда) Экспорт
	
	ТаблицаКатегорийКоманд = ТаблицаКомандДокумента();
	
	НайденнаяСтрока = ТаблицаКатегорийКоманд.Найти(Команда, "Команда");
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Перечисления.КатегорииКомандСервисаEDI.ПустаяСсылка();
	Иначе
		Возврат НайденнаяСтрока.Категория;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеПрикладныхДокументов

Функция РезультатЗагрузкиПрикладногоДокумента(ДанныеДокумента, ТаблицаСопоставления, МодельЗаказа, РезультатОбновления,
	ОтветСервиса, СтороныУчастники = Неопределено)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	Если СтороныУчастники = Неопределено Тогда
		СтороныУчастники = МенеджерКонвертацииДанныхEDI.СтороныУчастники(
			ДанныеДокумента.ТипДокумента, МодельЗаказа, Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(
				РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
				ДанныеДокумента,
				ТекстОшибки,
				РезультатОбновления.КоличествоНеЗагруженныхОшибка);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	ПараметрыКонвертации = МенеджерКонвертацииДанныхEDI.НовыйПараметрыКонвертацииЗаказаEDIВОбъектФормата();
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, СтороныУчастники);
	ПараметрыКонвертации.СопоставлениеНоменклатуры = ТаблицаСопоставления;
	ПараметрыКонвертации.ПрикладнойОбъект = ДанныеДокумента.ПрикладнойОбъект;
	ПараметрыКонвертации.Ответственный = ДанныеДокумента.Менеджер;
	ПараметрыКонвертации.Склад = РаботаСДаннымиEDIСлужебный.СкладЗаказаПоУмолчанию(
		ДанныеДокумента.ТипДокумента, СтороныУчастники);
	
	СопутствующиеСсылки = Новый Массив;
	Если ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ОбъектФормата = МенеджерКонвертацииДанныхEDI.ОбъектФорматаЗаказПоставщикуИзЗаказаEDI(
			МодельЗаказа, ПараметрыКонвертации, Отказ,,СопутствующиеСсылки);
	ИначеЕсли ДанныеДокумента.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ОбъектФормата = МенеджерКонвертацииДанныхEDI.ОбъектФорматаЗаказКлиентаИзЗаказаEDI(
			МодельЗаказа, ПараметрыКонвертации, Отказ,,СопутствующиеСсылки);
	Иначе
		
		ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
		                                                                                 ДанныеДокумента, 
		                                                                                 СтрШаблон(НСтр("ru='Неизвестный тип документа EDI: %1'"), ДанныеДокумента.ТипДокумента),
		                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектКонфигурации = Метаданные.НайтиПоТипу(РаботаСДаннымиEDIСлужебный.ТипПрикладногоОбъекта(ДанныеДокумента.ТипДокумента));
	
	
	ПрикладнойОбъект = ПреобразованиеДанныхEDIСлужебный.РезультатРасширеннойЗаписиОбъектаФормата(
		ОбъектФормата, ОбъектКонфигурации, СопутствующиеСсылки, Отказ, ТекстОшибки);
	
	Если Отказ Тогда
		
		ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(РезультатОбновления.ДанныеНеЗагруженныхДокументовОшибка, 
		                                                                                 ДанныеДокумента, 
		                                                                                 ТекстОшибки,
		                                                                                 РезультатОбновления.КоличествоНеЗагруженныхОшибка);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РезультатОбновления.КоличествоЗагруженных = РезультатОбновления.КоличествоЗагруженных + 1;
	
	ОбновленныеДанныеДокумента = ВыполнитьЗаписьРеестраПоДаннымСервисаПриЗагрузкеОбновлении(ДанныеДокумента,
	                                                           ОтветСервиса, 
	                                                           Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна, 
	                                                           ПрикладнойОбъект);
	
	ПараметрыСинхронизации = РегистрыСведений.ПланСинхронизацииДокументовEDI.НовыйПараметрыСинхронизацииССервисом();
	ЗаполнитьЗначенияСвойств(ПараметрыСинхронизации, ОбновленныеДанныеДокумента);
	ПараметрыСинхронизации.Документ = ПрикладнойОбъект;
	ПараметрыСинхронизации.СценарийВыполнения = Перечисления.СценарииВыполненияКомандEDI.ОтправитьВерсиюВСервис;
	
	РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьПлан(ПараметрыСинхронизации, Отказ, ТекстОшибки);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьДанныеНезагруженныхДокументовТребуетсяСопоставление(МассивДокументов, ДанныеДокумента, ОтветСервиса, РезультатСопоставления)
	
	ДанныеДляПоследующегоСопоставления = Новый Структура;
	ДанныеДляПоследующегоСопоставления.Вставить("ТипДокумента",                    ДанныеДокумента.ТипДокумента);
	ДанныеДляПоследующегоСопоставления.Вставить("ИдентификаторВСервисе",           ДанныеДокумента.ИдентификаторВСервисе);
	ДанныеДляПоследующегоСопоставления.Вставить("Организация",                     ДанныеДокумента.Организация);
	ДанныеДляПоследующегоСопоставления.Вставить("ПрикладнойОбъект",                ДанныеДокумента.ПрикладнойОбъект);
	ДанныеДляПоследующегоСопоставления.Вставить("НомерДокумента",                  ДанныеДокумента.НомерДокумента);
	ДанныеДляПоследующегоСопоставления.Вставить("ДатаДокумента",                   ДанныеДокумента.ДатаДокумента);
	ДанныеДляПоследующегоСопоставления.Вставить("Менеджер",                        ДанныеДокумента.Менеджер);
	ДанныеДляПоследующегоСопоставления.Вставить("ОтветСервиса",                    ОтветСервиса);
	ДанныеДляПоследующегоСопоставления.Вставить("ТаблицаСопоставления",            РезультатСопоставления.ТаблицаСопоставления);
	ДанныеДляПоследующегоСопоставления.Вставить("НеСопоставленныеТоварныеПозиции", РезультатСопоставления.НеСопоставленныеТоварныеПозиции);
	
	МассивДокументов.Добавить(ДанныеДляПоследующегоСопоставления);
	
КонецПроцедуры

Функция ВыполнитьЗаписьРеестраПоДаннымСервисаПриЗагрузкеОбновлении(ДанныеДокумента, ОтветСервиса, Состояние, ПрикладнойОбъект)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИдентификаторВСервисе",                          ДанныеДокумента.ИдентификаторВСервисе);
	ПараметрыЗаписи.Вставить("ТипДокумента",                                   ДанныеДокумента.ТипДокумента);
	ПараметрыЗаписи.Вставить("СостояниеПрикладногоОбъекта",                    Состояние);
	ПараметрыЗаписи.Вставить("Менеджер",                                       ДанныеДокумента.Менеджер);
	ПараметрыЗаписи.Вставить("ПрикладнойОбъект",                               ПрикладнойОбъект);
	ПараметрыЗаписи.Вставить("НомерАктуальнойВерсии",                          ОтветСервиса.Данные.НомерАктуальнойВерсии);
	ПараметрыЗаписи.Вставить("ДатаТекущегоСтатуса",                            ОтветСервиса.Данные.ДатаТекущегоСтатуса);
	ПараметрыЗаписи.Вставить("ДатаУточнениеСостоянияПоДаннымСтороныУчастника", ОтветСервиса.Данные.ДатаУточнениеСостоянияПоДаннымСтороныУчастника);
	ПараметрыЗаписи.Вставить("ПоследнееДействие",                              ОтветСервиса.Данные.ПоследнееДействие);
	ПараметрыЗаписи.Вставить("ПредыдущийСтатус",                               ОтветСервиса.Данные.ПредыдущийСтатус);
	ПараметрыЗаписи.Вставить("СогласованнаяВерсияПокупателя",                  ОтветСервиса.Данные.СогласованнаяВерсияПокупателя);
	ПараметрыЗаписи.Вставить("СогласованнаяВерсияПоставщика",                  ОтветСервиса.Данные.СогласованнаяВерсияПоставщика);
	ПараметрыЗаписи.Вставить("СторонаВыполнившаяДействие",                     ОтветСервиса.Данные.СторонаВыполнившаяДействие);
	ПараметрыЗаписи.Вставить("ТекущийСтатус",                                  ОтветСервиса.Данные.ТекущийСтатус);
	ПараметрыЗаписи.Вставить("УточнениеСостоянияПоДаннымСтороныУчастника",     ОтветСервиса.Данные.УточнениеСостоянияПоДаннымСтороныУчастника);
	
	Если Состояние = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна Тогда
		
		ПараметрыЗаписи.Вставить("НомерТекущейВерсии",                             ОтветСервиса.Данные.НомерАктуальнойВерсии);
		
	КонецЕсли;
	
	Возврат РегистрыСведений.СостоянияДокументовEDI.ОбновленныеДанныеЗаписиРеестра(ПараметрыЗаписи);
	
КонецФункции

#КонецОбласти

#Область СостояниеПрикладногоДокумента

// Возвращает массив состояний, в которых состояние прикладного объекта считается не актуальным по отношению к сервису.
// 
// Возвращаемое значение:
// 	Массив - Описание
Функция СостоянияСоответствияПрикладнойДокументНеАктуален()
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТребуетсяСопоставлениеНоменклатуры"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеУдалосьАктуализироватьВерсиюВСервисе"));
	
	Возврат МассивСостояний;
	
КонецФункции

Функция ПредставлениеСостоянияСоответствияПрикладногоОбъектаДокументуEDI(СостояниеЗагруженногоОбъекта)
	
	Если СостояниеЗагруженногоОбъекта = ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия") Тогда
		Возврат НСтр("ru = 'в сервисе более актуальная версия'");
	ИначеЕсли СостояниеЗагруженногоОбъекта = ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеУдалосьАктуализироватьВерсиюВСервисе") Тогда
		Возврат НСтр("ru = 'не удалось актуализировать версию в сервисе'");
	ИначеЕсли СостояниеЗагруженногоОбъекта = ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТребуетсяСопоставлениеНоменклатуры") Тогда
		Возврат НСтр("ru = 'требуется сопоставление номенклатуры'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Формирует представление состояния соответствия прикладного документа данным в сервисе EDI.
// 
// Параметры:
// 	ДанныеДокумента - Структура - данные документа, необходимые для формирования представления:
//
// Возвращаемое значение:
// 	Строка - сформированное представление.
//
Функция ПредставлениеСостоянияEDIПрикладногоДокумента(ДанныеДокумента)
	
	Если ДанныеДокумента.ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ПустаяСсылка") Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаСтатус       = "";
	СтрокаДействие     = "";
	СтрокаДатаДействия = "";
	
	СтрокаСтатус       = Строка(ДанныеДокумента.ТекущийСтатус);
	СтрокаДействие     = ДокументыEDI.ПредставлениеДействия(ДанныеДокумента);
	СтрокаДатаДействия = ДокументыEDI.ПредставлениеДатыДействия(ДанныеДокумента);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаСтатус);
	Если ДанныеДокумента.ТекущийСтатус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ГотовКОтправке") Тогда
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(СтрокаДействие);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(СтрокаДатаДействия);
	КонецЕсли;
	
	ПредставлениеСтатусаEDI = СтрСоединить(МассивСтрок);
	
	ПредставлениеСостояниеСоответствия = ПредставлениеСостоянияСоответствияПрикладногоОбъектаДокументуEDI(ДанныеДокумента.СостояниеПрикладногоОбъекта);
	
	Результат = ?(ПустаяСтрока(ПредставлениеСостояниеСоответствия), ПредставлениеСтатусаEDI, "(" + ПредставлениеСостояниеСоответствия + ") " + ПредставлениеСтатусаEDI);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТипДокументаEDIПоТипуПрикладногоДокумента(ТипЗначения)
	
	Возврат НастройкиEDI.НастройкиУчета().СоответствиеПрикладныхОбъектовДокументамEDI.Получить(ТипЗначения);
	
КонецФункции

Функция МассивТиповДокументовДляКоторыхОтслеживаетсяОтправкаПоПрикладномуОбъекту()
	
	МассивТиповДокументовОтслеживаем = Новый Массив;
	МассивТиповДокументовОтслеживаем.Добавить(Перечисления.ТипыДокументовEDI.ЗаказПоставщику);
	
	ДокументыЗакупкиДоступныеПоПравам = МассивТиповДокументовДоступныхПоПравам(МассивТиповДокументовEDIЗакупки());
	
	МассивТиповДокументовОтслеживаемДоступныПоПравам = Новый Массив;
	
	Для Каждого ОтслеживаемыйДокумент Из МассивТиповДокументовОтслеживаем Цикл
		Если ДокументыЗакупкиДоступныеПоПравам.Найти(ОтслеживаемыйДокумент) <> Неопределено Тогда
			МассивТиповДокументовОтслеживаемДоступныПоПравам.Добавить(ОтслеживаемыйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивТиповДокументовОтслеживаемДоступныПоПравам;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьПоследнююНастройкуВариантаУказанияНоменклатуры(ФормаДокумента)
	
	ДанныеДокумента = ФормаДокумента.СвойстваEDI.ДанныеДокумента;
	
	ДанныеДокумента.ПоследняяНастройкаВариантаУказанияНоменклатуры = РегистрыСведений.СостоянияДокументовEDI.ПоследняяНастройкаВариантаУказанияНоменклатуры(
		ДанныеДокумента.Контрагент, ДанныеДокумента.Организация, ФормаДокумента.СвойстваEDI.ТипДокумента);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
