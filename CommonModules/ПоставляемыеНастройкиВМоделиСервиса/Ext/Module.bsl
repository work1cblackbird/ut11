///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Поставляемые настройки".
// ОбщийМодуль.ПоставляемыеНастройкиВМоделиСервиса.
//
// Серверные процедуры загрузки файлов настроек в модели сервиса:
//  - обработка поставляемых данных;
//  - обработка файлов настроек.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойТехнологииСервиса

#Область БТСПоставляемыеДанные

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	ВидДанных = Дескриптор.DataType;
	Если СтрНайти(ВидДанных, ПоставляемыеНастройкиСервер.ВидПоставляемыхДанных()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = "";
	Версия = "";
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			Версия = Число(Характеристика.Value);
		КонецЕсли;
	КонецЦикла;
	
	// Поставляемая настройка  будет загружен, если в сервис были опубликованы новые данные.
	Настройки = ПоставляемыеНастройкиСервер.ПараметрыНастройки(Идентификатор);
	Загружать = (Настройки <> Неопределено И Настройки.Версия < Версия);
	
	Если Не Загружать Тогда
		Возврат;
	КонецЕсли;
	
	// Для поставляемых, которые не обновляются автоматический,
	// файлы сохраняются в кэше подсистемы "Поставляемые настройки",
	// поэтому перед загрузкой будет проверен номер версии в кэше
	// Проверка необходима для оптимизации загрузки поставляемых файлов,
	// т.к. после обновления конфигурации поставляемые данные будут
	// запрошены из Менеджера сервиса. Если не выполнять проверку,
	// файлы будут загружены повторно, что отрицательно скажется на
	// производительности системы.
	Если Не Настройки.ОбновлятьАвтоматически Тогда
		Если Настройки.ВерсияКэш >= Версия Тогда
			Загружать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	ВидДанных = Дескриптор.DataType;
	Если СтрНайти(ВидДанных, ПоставляемыеНастройкиСервер.ВидПоставляемыхДанныхПоставляемыеНастройки()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = ПоставляемыеНастройкиСервер.ОписаниеДанныхФайла(
		ПоместитьВоВременноеХранилище(
			Новый ДвоичныеДанные(ПутьКФайлу)));
	
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			ОписаниеФайла.Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			ОписаниеФайла.Версия = Число(Характеристика.Value);
		ИначеЕсли Характеристика.Code = "КонтрольнаяСумма" Тогда
			ОписаниеФайла.КонтрольнаяСумма = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Размер" Тогда
			ОписаниеФайла.Размер = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	Настройки = ПоставляемыеНастройкиСервер.ПараметрыНастройки(ОписаниеФайла.Идентификатор);
	
	// Обновление будет выполняется интерактивно пользователем.
	Если Не Настройки.ОбновлятьАвтоматически Тогда
		ПоставляемыеНастройкиСервер.ОбновитьКэшНастройки(ОписаниеФайла);
		ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обработка поставляемой настройки %1 не требуется, т.к. настройка
					|см. реализацию метода ОбновлятьАвтоматически имеет значение Ложь подробнее
					|ПоставляемыеНастройкиПереопределяемый.ПриДобавленииНастроек
					|и ИнтеграцияПодсистемБИП.ПриДобавленииНастроек.'"),
				ОписаниеФайла.Идентификатор),
			Ложь);
		Возврат;
	КонецЕсли;
	
	Если Настройки.СохранятьФайлВКэш
		Или Не Настройки.ОбщиеДанные Тогда
		ПоставляемыеНастройкиСервер.ОбновитьКэшНастройки(ОписаниеФайла);
		ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные поставляемой настройки %1 сохранены в кэше.'"),
				ОписаниеФайла.Идентификатор),
			Ложь);
	КонецЕсли;
	
	ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало обработки Файл поставляемой настройки %1.'"),
			ОписаниеФайла.Идентификатор),
		Ложь);
	
	Если Настройки.ОбщиеДанные Тогда
		
		Обработан = Ложь;
		ПоставляемыеНастройкиСервер.ПриЗагрузкеФайлаНастройки(
			ОписаниеФайла,
			Обработан);
		
		Если Не Обработан Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поставляемые данные настройки:
					|Идентификатор: %1
					|Версия: %2'"),
				ОписаниеФайла.Идентификатор,
				ОписаниеФайла.Версия);
			
			ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
				СообщениеОбОшибке,
				Истина);
		КонецЕсли;
		
	Иначе
		
		ОбластиДляОбновления = МодульПоставляемыеДанные.ОбластиТребующиеОбработки(
			Дескриптор.FileGUID,
			ВидДанных);
		
		ЗапланироватьРаспространениеНастроек(
			ОписаниеФайла,
			Дескриптор.FileGUID,
			ОбластиДляОбновления,
			ВидДанных);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("КонтрольнаяСумма", ОписаниеФайла.КонтрольнаяСумма);
		ДанныеФайла.Вставить("Размер", ОписаниеФайла.Размер);
		ДанныеФайла.Вставить("АдресФайла", ОписаниеФайла.АдресФайла);
		
		ДанныеНастройки = Новый Структура;
		ДанныеНастройки.Вставить("Идентификатор", ОписаниеФайла.Идентификатор);
		ДанныеНастройки.Вставить("Версия", ОписаниеФайла.Версия);
		
		ПоставляемыеНастройкиСервер.ОбновитьСлужебныеДанныеНастройки(
			ДанныеНастройки,
			ДанныеФайла,
			Ложь);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершена обработка файла поставляемой настройки %1.'"),
			ОписаниеФайла.Идентификатор),
		Ложь);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

#КонецОбласти

#Область БТСОчередьЗаданий

// Выполняет обновление данных разделенной поставляемой настройки.
// в области данных.
//
// Параметры:
//  ОписаниеФайла - Структура - см. функцию ПоставляемыеНастройкиСервер.ОписаниеНастройки;
//  ИдентификаторФайла - УникальныйИдентификатор - файл обрабатываемой настройки;
//  ОбластьДанных - Число - область данных информационной базы.
//  КодОбработчика - Строка - код обработчика.
//
Процедура ОбновлениеРазделеннойНастройки(
		ОписаниеФайла,
		ИдентификаторФайла,
		ОбластьДанных,
		КодОбработчика) Экспорт
	
	// Перед выполнением обновления данных необходимо восстановить файл
	// поставляемой настройки из кэша подсистемы.
	РезультатПолученияКэша = ПоставляемыеНастройкиСервер.ПолучитьФайлыНастроек(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОписаниеФайла.Идентификатор));
	
	Если РезультатПолученияКэша = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл настройки %1 из кэша.'"),
			ОписаниеФайла.Идентификатор);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", ОписаниеФайла.Идентификатор);
	СтрокиКэша = РезультатПолученияКэша.НайтиСтроки(Отбор);
	Если СтрокиКэша = Неопределено Или СтрокиКэша.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл настройки %1 из кэша.'"),
			ОписаниеФайла.Идентификатор);
	КонецЕсли;
	
	Для Каждого СтрокаКэша Из СтрокиКэша Цикл
		Если СтрокаКэша.Идентификатор = ОписаниеФайла.Идентификатор Тогда
			ОписаниеФайла.АдресФайла = СтрокаКэша.АдресФайла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	ВерсияНастройки = ПоставляемыеНастройкиСервер.ВерсияПоставляемойНастройки(
		ОписаниеФайла.Идентификатор);
	
	// Если актуальная версия поставляемой настройки уже загружена в область,
	// повторная загрузка не требуется.
	Если ВерсияНастройки <> Неопределено И ВерсияНастройки >= Число(ОписаниеФайла.Версия) Тогда
		МодульПоставляемыеДанные.ОбластьОбработана(
			ИдентификаторФайла,
			КодОбработчика,
			ОбластьДанных);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Обработан = Ложь;
		ПоставляемыеНастройкиСервер.ПриЗагрузкеФайлаНастройки(
			ОписаниеФайла,
			Обработан);
		
		Если Обработан Тогда
			МодульПоставляемыеДанные.ОбластьОбработана(
				ИдентификаторФайла,
				КодОбработчика,
				ОбластьДанных);
		Иначе
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поставляемые данные настройки:
					|Идентификатор: %1
					|Версия: %2
					|Область данных: %3'"),
				ОписаниеФайла.Идентификатор,
				ОписаниеФайла.Версия,
				ОбластьДанных);
			
			ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
				СообщениеОбОшибке,
				Истина);
			
			// Требуется повтор выполнения операции.
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
	Исключение
		
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать данные поставляемой настройки:
				|Идентификатор: %1
				|Версия: %2
				|Область данных: %3,
				|Подробная информация об ошибке:
				|В результате выполнения обработчика ПриЗагрузкеФайлаНастройки возникло исключение:
				|%4'"),
			ОписаниеФайла.Идентификатор,
			ОписаниеФайла.Версия,
			ОбластьДанных,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПоставляемыеНастройкиСервер.ЗаписатьИнформациюВЖурналРегистрации(
			СообщениеОбОшибке);
		
		// Требуется повтор выполнения операции.
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает задания на обновление поставляемой настройки в областях
// данных информационной базы.
//
// Параметры:
//  ОписаниеФайла - Структура - см. ПоставляемыеНастройкиСервер.ОписаниеНастройки;
//  ИдентификаторФайла - УникальныйИдентификатор - файл обрабатываемой настройки;
//  ОбластиДляОбновления - Массив с- содержит список кодов областей;
//  КодОбработчика - Строка -  код обработчика.
//
Процедура ЗапланироватьРаспространениеНастроек(
		ОписаниеФайла,
		ИдентификаторФайла,
		ОбластиДляОбновления,
		КодОбработчика)
	
	МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
	
	Для Каждого ОбластьДанных Из ОбластиДляОбновления Цикл
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ОписаниеФайла);
		ПараметрыМетода.Добавить(ИдентификаторФайла);
		ПараметрыМетода.Добавить(ОбластьДанных);
		ПараметрыМетода.Добавить(КодОбработчика);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяМетода", "ОбновлениеРазделеннойНастройки");
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ТекущаяУниверсальнаяДата());
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		
		МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
