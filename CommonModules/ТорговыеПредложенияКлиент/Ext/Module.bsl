////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновление подсказки торговых предложений в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой обновляется подсказки.
//
Процедура ОбновитьПодсказкуФормы(Форма) Экспорт
	
	Если РекомендацииОтключеныДляТекущегоСеанса() Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("Подключаемый_ПодсказкаТорговыеПредложения") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеКонтекста = ДанныеКонтекстаДляПодсказки(Форма);
	Если ДанныеКонтекста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = БизнесСетьВызовСервера.ОбновитьПодсказкуФормыВФоне(ДанныеКонтекста, Форма.УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма", Форма);
	ПараметрыЗавершения.Вставить("ДанныеКонтекста", ДанныеКонтекста);
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения("ОбновитьПодсказкуФормыЗавершение",
		ЭтотОбъект, ПараметрыЗавершения);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из обработчика события которой происходит вызов процедуры.
//  ПараметрыЗаписи - Структура - параметры записи.
//
Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Оповестить("ТорговыеПредложения_ПослеЗаписи", ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Отрабатывает событие нажатия на гиперссылку на форме.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  Объект  - ДанныеФормыСтруктура       - основной объект формы.
//  Элемент - ЭлементФормы               - элемент формы.
//  СтандартнаяОбработка - Булево        - признак стандартной отработки события.
//
Процедура ТорговыеПредложенияНажатиеГиперссылки(Форма, Объект, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	
	Если Элемент.Имя = "ТорговыеПредложенияСостояниеОбмена" Тогда
		ОткрытьФормуСпискаПубликаций(Неопределено, Объект);
	ИначеЕсли Элемент.Имя = "ТорговыеПредложенияОткрытьНастройкиПубликации" Тогда
		ОткрытьФормуНастроекПубликации(Объект.Ссылка, Объект);
	ИначеЕсли Элемент.Имя = "ТорговыеПредложенияОткрытьПозицииТорговогоПредложения" Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"Обработка.ТорговыеПредложения.Форма.СостояниеПубликацииТоваров.ОткрытиеФормы");
		
		Отбор = Новый Структура("ПрайсЛист", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОчиститьСообщения();
		
		ПараметрыОткрытияФормы = ПараметрыОткрытияФормы();
		
		ПараметрыОткрытияФормы.ПараметрыФормы = ПараметрыФормы;
		ПараметрыОткрытияФормы.ВладелецФормы  = Форма;
		ПараметрыОткрытияФормы.Уникальность   = Объект.Ссылка;
		
		ОткрытьФормуСостоянияПубликацииТоваров(ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Отрабатывает событие смены флага публикации на форме.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - из обработчика события которой происходит вызов процедуры.
//  Объект  - ЛюбаяСсылка                - ссылка на объект источник события.
//  Элемент - ЭлементФормы               - элемент формы.
//  СтандартнаяОбработка - Булево        - признак стандартной отработки события.
//
Процедура ПриИзмененииПубликоватьТорговыеПредложения(Форма, Объект, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма.Элементы.ТорговыеПредложенияСостояниеОбмена.Заголовок = НСтр("ru = 'Для смены статуса публикации нажмите Записать'");
	Форма.Элементы.ТорговыеПредложенияСостояниеОбмена.Гиперссылка = Истина;
	Форма.Элементы.ТорговыеПредложенияСостояниеОбмена.Доступность = Ложь;
	Форма.Элементы.ТорговыеПредложенияСостояниеОбмена.ЦветТекста = Новый Цвет;
	Форма.Элементы.ТорговыеПредложенияОткрытьНастройкиПубликации.Доступность = Ложь;
	Форма.Элементы.ТорговыеПредложенияОткрытьПозицииТорговогоПредложения.Доступность = Ложь;
	Форма.Элементы.ТорговыеПредложенияОткрытьПозицииТорговогоПредложения.Видимость = Ложь;
	Форма.Элементы.Организация.АвтоОтметкаНезаполненного = Форма.ТорговыеПредложенияПубликовать;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеФорм

// Открытие форму подсказки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой открывается форма подсказки.
//
Процедура ОткрытьФормуПодсказок(Форма) Экспорт
	
	Подсказка = Форма.Подключаемый_ТорговыеПредложенияРекомендация;
		
	ОчиститьСообщения();
	
	Если ТипЗнч(Подсказка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СкрытьПодсказку(Форма);
	
	Если Форма.ТекущийЭлемент.Имя = "Подключаемый_БольшеНеПоказыватьТорговыеПредложения" Тогда
		ДеактивироватьРекомендацию(Форма, Форма.УникальныйИдентификатор, Подсказка);	
		Возврат;
	КонецЕсли;
	
	Организация = ОрганизацияИзФормы(Форма);
	
	ОтразитьОткликНаРекомендацию(Организация, Форма.УникальныйИдентификатор, Подсказка.Ссылки.АдресОтклика);
	
	Если Подсказка.ТипРекомендации = "ДляПокупателя" Тогда
		
		ПараметрыФормы = Новый Структура("АдресПараметровОтбора", Подсказка.ДополнительныеПараметры);
		
		ОткрытьФормуПоискаПоОтборам(ПараметрыФормы, Форма);
		
	ИначеЕсли Подсказка.ТипРекомендации = "Административный" Тогда	
		
		ПерейтиПоСсылкеРекомендации(Подсказка.Ссылки.АдресСайта);
		
		ИнтеграцияТорговыеПредложенияКлиент.ОткрытьФормуПодключенияОрганизацииСПроверкойПодключения(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования настроек публикации торгового предложения
//
// Параметры:
//  ТорговоеПредложение - ОпределяемыйТип.ТорговоеПредложение - торговое предложение, настройки которого
//                        требуется открыть.
//  ВладелецФормы       - ФормаКлиентскогоПриложения - Форма
//  ОписаниеОповещения  - ОписаниеОповещения         - оповещение о закрытии формы.
//
Процедура ОткрытьФормуНастроекПубликации(ТорговоеПредложение, ВладелецФормы = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрываемаяФорма = "РегистрСведений.СостоянияСинхронизацииТорговыеПредложения.Форма.НастройкиПубликации";
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТорговоеПредложение", ТорговоеПредложение);
	ОткрытьФорму(ОткрываемаяФорма, ПараметрыОткрытияФормы, ВладелецФормы, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму поиска товаров по отборам
//
// Параметры:
//  ПараметрыОткрытияФормы - Структура - параметры формы:
//    *ИдентификаторКатегории          - Строка - идентификатор категории сервиса
//    *ИдентификаторЗаказа             - УникальныйИдентификатор - уникальный идентификатор формы заказа
//    *ОтборАртикул                    - Строка - артикул для поиска
//    *ОтборНаименование               - Строка - наименование для поиска
//    *ОтборНоменклатураСервиса        - Строка - идентификатор номенклатуры сервиса
//    *ОтборХарактеристикаСервиса      - Строка - идентификатор характеристики сервиса
//    *Валюта                          - СправочникСсылка - ссылка на валюту
//    *Контрагент                      - СправочникСсылка - контрагент для отбора торговых предложений
//    *ИНН                             - Строка - ИНН контрагента для отбора
//    *КПП                             - Строка - КПП контрагента для отбора
//    *ОтборШтрихКоды                  - Массив из Строка - массив штрихкодов для поиска
//    *АдресТоваровВХранилище          - Строка - адрес таблицы товаров во временном хранилище
//  ВладелецФормы          - ФормаКлиентскогоПриложения, ПараметрыВыполненияКоманды - форма-владелец или 
//                                       контекст выполнения команды
//  ОписаниеОповещения     - ОписаниеОповещения - оповещение о закрытии формы.
//
Процедура ОткрытьФормуПоискаПоОтборам(ПараметрыОткрытияФормы = Неопределено, ВладелецФормы = Неопределено, 
		ОписаниеОповещения = Неопределено) Экспорт
		
	Перем Контрагент, ОтборАртикул;
	
	Если ЗначениеЗаполнено(ПараметрыОткрытияФормы)
		И ПараметрыОткрытияФормы.Свойство("ОтборАртикул", ОтборАртикул)
		И ЗначениеЗаполнено(ОтборАртикул) Тогда
		
		ПараметрыОткрытияФормы.Вставить("ОтборАртикулы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборАртикул));
	КонецЕсли;
		
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Владелец = ВладелецФормы;
	ИначеЕсли ТипЗнч(ВладелецФормы) = Тип("ПараметрыВыполненияКоманды") Тогда
		Владелец = ВладелецФормы.Источник;
		Окно = ВладелецФормы.Окно;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОткрытияФормы)
		И ПараметрыОткрытияФормы.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(Контрагент) Тогда
		
		Если ТипЗнч(Контрагент) = Тип("Структура") И Контрагент.Свойство("Ссылка")
			И ЗначениеЗаполнено(Контрагент.Ссылка) Тогда
			КлючУникальности = Контрагент.Ссылка.УникальныйИдентификатор();
		ИначеЕсли ТипЗнч(Контрагент) = Тип("Структура") И Контрагент.Свойство("ИНН")
			И Контрагент.Свойство("КПП") Тогда
			КлючУникальности = СтрШаблон("%1/%2", Контрагент.ИНН, Контрагент.КПП);
		ИначеЕсли ТипЗнч(Контрагент) = Тип("Структура") И Контрагент.Свойство("ИНН") Тогда
			КлючУникальности = Контрагент.ИНН;
		ИначеЕсли ТипЗнч(Контрагент) = Тип("Структура") Тогда
			КлючУникальности = Неопределено;
		Иначе
			КлючУникальности = Контрагент.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам", ПараметрыОткрытияФормы, Владелец, КлючУникальности, Окно, ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму формирования заказов
//
// Параметры:
//  ПараметрыОткрытияФормы - Структура - параметры формы:
//    *РежимЗапросаЦен         - Булево - признак режима запроса цен
//    *ИдентификаторЗаказа     - УникальныйИдентификатор - уникальный идентификатор формы заказа
//    *Организация             - ОпределяемыйТип.Организация - ссылка на организацию
//    *Валюта                  - СправочникСсылка - ссылка на валюту
//    *АдресТоваровВХранилище  - Строка - адрес таблицы товаров во временном хранилище
//  ВладелецФормы          - ФормаКлиентскогоПриложения - форма-владелец
//  ОписаниеОповещения     - ОписаниеОповещения - оповещение о закрытии формы.
//
Процедура ОткрытьФормуФормированияЗаказов(ПараметрыОткрытияФормы = Неопределено, ВладелецФормы = Неопределено, 
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов", ПараметрыОткрытияФормы, ВладелецФормы, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму поиска товаров
//
// Параметры:
//  ПараметрыОткрытияФормы - Структура - параметры формы. см. Параметры формы
//  ВладелецФормы          - ФормаКлиентскогоПриложения - форма-владелец
//  ОписаниеОповещения     - ОписаниеОповещения - оповещение о закрытии формы.
//
Процедура ОткрытьФормуПоискаПоТоварам(ПараметрыОткрытияФормы = Неопределено, ВладелецФормы = Неопределено, 
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПоискПоТоварам", ПараметрыОткрытияФормы, ВладелецФормы, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму помощника публикации
//
// Параметры:
//  ПараметрыОткрытияФормы - Структура - параметры формы. см. Параметры формы
//  ВладелецФормы          - ФормаКлиентскогоПриложения - форма-владелец
//  ОписаниеОповещения     - ОписаниеОповещения - оповещение о закрытии формы.
//
Процедура ОткрытьФормуПомощникаПубликации(ПараметрыОткрытияФормы = Неопределено, ВладелецФормы = Неопределено, 
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПомощникПубликации", ПараметрыОткрытияФормы, ВладелецФормы, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму списка публикаций
//
// Параметры:
//  ПараметрыОткрытияФормы - Структура - параметры формы. см. Параметры формы
//  ВладелецФормы          - ФормаКлиентскогоПриложения - форма-владелец
//  ОписаниеОповещения     - ОписаниеОповещения - оповещение о закрытии формы.
//
Процедура ОткрытьФормуСпискаПубликаций(ПараметрыОткрытияФормы = Неопределено, ВладелецФормы = Неопределено, 
		ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.СписокПубликаций", ПараметрыОткрытияФормы, ВладелецФормы, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Открывает форму состояния публикации товаров
//
// Параметры:
//  ПараметрыОткрытияФормы - Структура - параметры формы. см. ТорговыеПредложенияКлиент.ПараметрыОткрытияФормы
//
Процедура ОткрытьФормуСостоянияПубликацииТоваров(ПараметрыОткрытияФормы) Экспорт
	
	Если Не ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды = Неопределено Тогда
		
		Окно = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.Окно;
		НавигационнаяСсылка = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.НавигационнаяСсылка;
		Уникальность = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.Уникальность;
		ВладелецФормы = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.Источник;
		
	КонецЕсли;
	
	Если Не ПараметрыОткрытияФормы.Уникальность = Неопределено Тогда
		
		Уникальность = ПараметрыОткрытияФормы.Уникальность;
		
	КонецЕсли;
	
	Если Не ПараметрыОткрытияФормы.ВладелецФормы = Неопределено Тогда
		
		ВладелецФормы = ПараметрыОткрытияФормы.ВладелецФормы;
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.СостояниеПубликацииТоваров", ПараметрыОткрытияФормы.ПараметрыФормы,
		ВладелецФормы, Уникальность, Окно, НавигационнаяСсылка, ПараметрыОткрытияФормы.ОписаниеОповещения,
		ПараметрыОткрытияФормы.РежимОткрытияОкна);
	
КонецПроцедуры

// см. БизнесСетьКлиент.ОткрытьФормуПодключенияОрганизации
Процедура ОткрытьФормуПодключенияОрганизации(
		Организация, Владелец = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	ИнтеграцияТорговыеПредложенияКлиент.ОткрытьФормуПодключенияОрганизации(
		Организация, Владелец, ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

// Открывает форму создания/получения внешней ссылки прайс листа
//
// Параметры:
//  ПараметрыОткрытияФормы - см. ПараметрыОткрытияФормы
//
Процедура ОткрытьФормуВнешнейСсылкиПрайсЛиста(ПараметрыОткрытияФормы) Экспорт
	
	ИмяФормы = "Обработка.ТорговыеПредложения.Форма.ВнешняяСсылкаПрайсЛиста";
	
	Окно = Неопределено;
	НавигационнаяСсылка = Неопределено;		
	Уникальность = ПараметрыОткрытияФормы.Уникальность;
	ВладелецФормы = ПараметрыОткрытияФормы.ВладелецФормы;
		
	Если ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды <> Неопределено Тогда
			
		Окно = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.Окно;
		НавигационнаяСсылка = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.НавигационнаяСсылка;
		
		Если Уникальность = Неопределено Тогда
			Уникальность = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.Уникальность;
		КонецЕсли; 
		
		Если ВладелецФормы = Неопределено Тогда
			ВладелецФормы = ПараметрыОткрытияФормы.ПараметрыВыполненияКоманды.Источник;
		КонецЕсли;
			
	КонецЕсли;

	ОткрытьФорму(ИмяФормы, ПараметрыОткрытияФормы.ПараметрыФормы, ВладелецФормы, Уникальность, Окно, 
		НавигационнаяСсылка, ПараметрыОткрытияФормы.ОписаниеОповещения, ПараметрыОткрытияФормы.РежимОткрытияОкна);
			
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОткрытияФорм

// Конструктор универсального параметра открытия форм подсистемы.
// 
// Возвращаемое значение:
//  Структура - Структура с ключами открытия формы:
//    *ПараметрыФормы - Структура - параметры, переадресуемые в открываемую форму
//    *ВладелецФормы - ФормаКлиентскогоПриложения - владелец открываемой формы
//    *Уникальность - УникальныйИдентификатор - в данном параметре может быть задан некоторый ключ, 
//                      значение которого будет использоваться для поиска уже открытых форм. 
//    *ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды - описывает структуру, передаваемую 
//                      в обработчик команды.
//    *ОписаниеОповещения - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
//                      при закрытии формы
//    *РежимОткрытияОкна - РежимОткрытияОкнаФормы - содержит вариант открытия окна, в котором будет 
//                      размещена форма.
//
Функция ПараметрыОткрытияФормы() Экспорт 
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("ПараметрыФормы",             Неопределено);
	ПараметрыОткрытияФормы.Вставить("ВладелецФормы",              Неопределено);
	ПараметрыОткрытияФормы.Вставить("Уникальность",               Неопределено);
	ПараметрыОткрытияФормы.Вставить("ПараметрыВыполненияКоманды", Неопределено);
	ПараметрыОткрытияФормы.Вставить("ОписаниеОповещения",         Неопределено);
	ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",          Неопределено);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму корзины торговых предложений.
//
// Параметры:
//  Организация					 - ОпределяемыйТип.Организация - подключаемая организация.
//  Владелец					 - ФормаКлиентскогоПриложения - владелец формы. Если не передан,
//                                                              будет использоваться ключ уникальности формы: при наличии открытой
//                                                              формы, новая открываться не будет, а будет активироваться открытая.
//  ОписаниеОповещенияОЗакрытии	 - ОписаниеОповещения - описание оповещения о закрытии формы.
//
Процедура ОткрытьФормуКорзины(Организация, Владелец = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.Корзина", 
		ПараметрыФормы, 
		Владелец, 
		"КорзинаТорговыхПредложений", , , 
		ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Открытие карточки торгового предложения.
//
// Параметры:
//  ПараметрыОткрытия - Структура - параметры открытия, состав:
//    * Идентификатор       - Строка - идентификатор торгового предложения.
//    * ИдентификаторЗаказа - Строка - идентификатор заказа для добавления.
//    * Валюта              - СправочникСсылка - валюта торгового предложения.
//    * Номенклатура        - ОпределяемыйТип.НоменклатураБЭД - номенклатура.
//    * Характеристика      - СправочникСсылка - характеристика номенклатуры.
//  Форма             - ФормаКлиентскогоПриложения - форма владелец.
//  Идентификатор     - Строка - идентификатор торгового предложения.
//
Процедура ОткрытьТорговоеПредложение(ПараметрыОткрытия, Форма, Идентификатор) Экспорт
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.Карточка", ПараметрыОткрытия, Форма, Идентификатор);
	
КонецПроцедуры

// Открытие формы диагностики ошибок позиций торговых предложений
//
// Параметры:
//  ПараметрыОткрытияФормы      - Структура                  - параметры открытия формы диагностики
//  ФормаВладельца              - ФормаКлиентскогоПриложения - владелец формы.
//  ОписаниеОповещения          - ОписаниеОповещения         - оповещение о закрытии формы.
//
Процедура ОткрытьФормуДиагностикиТорговыхПредложений(ПараметрыОткрытияФормы, ФормаВладельца, ОписаниеОповещения = Неопределено) Экспорт 

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ТорговыеПредложения.Форма.ОшибкиПубликации.ОткрытиеФормы");
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ОшибкиПубликации", ПараметрыОткрытияФормы,
		ФормаВладельца, Новый УникальныйИдентификатор, , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Открытие формы карточки торгового предложения
//
// Параметры:
//  ПараметрыОткрытияФормы      - Структура                   - параметры открытия формы диагностики
//  ФормаВладельца              - ФормаКлиентскогоПриложения  - владелец формы.
//  ОписаниеОповещения          - ОписаниеОповещения          - оповещение о закрытии формы.
//
Процедура ОткрытьКарточкуПубликуемогоТорговогоПредложения(
	ПараметрыОткрытияФормы, ФормаВладельца, ОписаниеОповещения = Неопределено) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ТорговыеПредложения.Форма.КарточкаДляРедактирования.ОткрытиеФормы");
	
	УникальныйИдентификатор = ПараметрыОткрытияФормы.ПозицияТорговогоПредложения.Номенклатура.УникальныйИдентификатор();
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.КарточкаДляРедактирования", ПараметрыОткрытияФормы,
		ФормаВладельца, УникальныйИдентификатор, , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

// Открытие формы скидок торговых предложений.
//
// Параметры:
//  ФормаВладельца				 - ФормаКлиентскогоПриложения - владелец формы.
//  ВариантПубликацииСкидкиЗаОпт - ПеречислениеСсылка - вариант публикации скидки.
//  ТорговоеПредложение			 - ОпределяемыйТип.ТорговоеПредложение - торговое предложение.
//
Процедура ОткрытьФормуСкидкиТорговыхПредложений(
	ФормаВладельца, ВариантПубликацииСкидкиЗаОпт, ТорговоеПредложение) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТорговоеПредложение", ТорговоеПредложение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораВариантаПубликацииСкидок", ФормаВладельца);
	Если ВариантПубликацииСкидкиЗаОпт = 
		ПредопределенноеЗначение("Перечисление.ВариантыПубликацииСкидок.ВидыЦен") Тогда
			Форма = "РегистрСведений.СкидкиТорговыхПредложенийВидыЦен.Форма.ФормаНабораЗаписей";
	ИначеЕсли ВариантПубликацииСкидкиЗаОпт =
		ПредопределенноеЗначение("Перечисление.ВариантыПубликацииСкидок.ВидыСкидок") Тогда
			Форма = "РегистрСведений.СкидкиТорговыхПредложений.Форма.ФормаНабораЗаписей";
	КонецЕсли;
	
	ОткрытьФорму(Форма, ПараметрыФормы, ФормаВладельца, , , , Оповещение);
	
КонецПроцедуры

// Открытие формы настройки кратности количества упаковок в торговом предложении.
// 
// Параметры:
//  ПараметрыОткрытия - Структура - параметры открытия формы настроек:
//   * ПрайсЛист - ОпределяемыйТип.ТорговоеПредложение - торговое предложение, по которому выполняется отбор,
//                                                       а так же уникальность открытой формы.
//  ФормаВладельца - ФормаКлиентскогоПриложения - Форма владельца.
//
Процедура ОткрытьФормуНастройкаКратностиУпаковок(ПараметрыОткрытия, ФормаВладельца) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеНастроекКратностиУпаковок", ФормаВладельца);
	Форма = "РегистрСведений.ТорговыеПредложенияТорговойПлощадки.Форма.НастройкаКратностиУпаковок";
	
	ОткрытьФорму(Форма, ПараметрыОткрытия, ФормаВладельца, ПараметрыОткрытия.ПрайсЛист, , , Оповещение);
	
КонецПроцедуры

// Подключить организации торговых предложений.
// 
// Параметры:
//  ДополнительныеПараметры - Структура
//  Отказ - Булево
//
Процедура ПодключитьОрганизацииТорговыхПредложений(ДополнительныеПараметры, Отказ = Ложь) Экспорт
	
	Организации = ДополнительныеПараметры.ОрганизацииТорговыхПредложений;
	Для Каждого Организация Из Организации Цикл
		
		ИмяПроцедуры = "ПослеПодключенияОрганизации";
		ДополнительныеПараметры.Вставить("ПодключаемаяОрганизация", Организация);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			ИмяПроцедуры, ДополнительныеПараметры.Форма, ДополнительныеПараметры);
		ИнтеграцияТорговыеПредложенияКлиент.ОткрытьФормуПодключенияОрганизацииСПроверкойПодключения(
			Организация, 
			ДополнительныеПараметры.Форма, 
			ОписаниеОповещенияОЗакрытии, 
			Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СервисРекомендаций

// Данные контекста для подсказки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма для которой получается подсказка.
// 
// Возвращаемое значение:
//  Структура - данные подсказки:
//    * Основание            - Произвольный - ссылка на источник данных, например документ.
//    * Организации          - Массив из ОпределяемыйТип.Организация - организации контекста.
//    * РежимПоставщика      - Булево - контекст определяет режим поставщика.
//    * РежимПокупателя      - Булево - контекст определяет режим покупателя.
//    * РежимПоискаПоОтборам - Булево - действием подсказки является открытие формы поиска с отборами.
//    * РежимПоискаПоСписку  - Булево - действием подсказки является открытие формы поиска по списку.
//
Функция ДанныеКонтекстаДляПодсказки(Форма)
	
	ДанныеКонтекста = Новый Структура;
	ДанныеКонтекста.Вставить("Основание",            Неопределено);
	ДанныеКонтекста.Вставить("Организации",          Новый Массив);
	ДанныеКонтекста.Вставить("РежимПоставщика",      Ложь);
	ДанныеКонтекста.Вставить("РежимПокупателя",      Ложь);
	ДанныеКонтекста.Вставить("РежимПоискаПоОтборам", Ложь);
	ДанныеКонтекста.Вставить("РежимПоискаПоСписку",  Ложь);
	
	ТорговыеПредложенияКлиентПереопределяемый.ПолучитьДанныеКонтекстаДляПодсказки(Форма, ДанныеКонтекста);
	
	Возврат ДанныеКонтекста;
	
КонецФункции

// Асинхронная процедура отображения подсказок.
// См. ОбновитьПодсказкуФормы.
Процедура ОбновитьПодсказкуФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ Не Результат.Свойство("АдресРезультата")
		ИЛИ Не Результат.Свойство("АдресДополнительногоРезультата") Тогда
		
		Возврат;
	КонецЕсли;
	
	Рекомендация = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Не ЗначениеЗаполнено(Рекомендация)
		ИЛИ ТипЗнч(Рекомендация) <> Тип("Структура") Тогда
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Рекомендация.ДополнительныеПараметры = Результат.АдресДополнительногоРезультата;
	
	Рекомендация.Основание = ДополнительныеПараметры.ДанныеКонтекста.Основание;
	
	Форма.Подключаемый_ТорговыеПредложенияРекомендация = Рекомендация;
	
	ОтобразитьУстановитьЗаголовокРекомендации(
		Форма.Элементы,
		Рекомендация.ТекстРекомендации, 
		Рекомендация.ПоказыватьСсылкуДеактивации);
КонецПроцедуры

Процедура СкрытьПодсказку(Форма)
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "Подключаемый_КартинкаТорговыеПредложения", "Видимость", Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "Подключаемый_ПодсказкаТорговыеПредложения", "Видимость", Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "Подключаемый_БольшеНеПоказыватьТорговыеПредложения", "Видимость", Ложь);
	
КонецПроцедуры

Функция РекомендацииОтключеныДляТекущегоСеанса()
	
	КэшПодсистемы = ТорговыеПредложенияСлужебныйКлиент.ПараметрыПриложенияТорговыеПредложения();
	Результат = КэшПодсистемы["РекомендацииОтключены"];
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьРекомендацииДляТекущегоСеанса()
	
	КэшПодсистемы = ТорговыеПредложенияСлужебныйКлиент.ПараметрыПриложенияТорговыеПредложения();
	КэшПодсистемы["РекомендацииОтключены"] = Истина;
	
КонецПроцедуры

Процедура ОтобразитьУстановитьЗаголовокРекомендации(Элементы, ТекстРекомендации, ПоказыватьСсылкуДеактивации)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "Подключаемый_ПодсказкаТорговыеПредложения", "Заголовок", ТекстРекомендации);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "Подключаемый_КартинкаТорговыеПредложения", "Видимость", Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "Подключаемый_ПодсказкаТорговыеПредложения", "Видимость", Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "Подключаемый_БольшеНеПоказыватьТорговыеПредложения", "Видимость", ПоказыватьСсылкуДеактивации);

КонецПроцедуры

Процедура ПерейтиПоСсылкеРекомендации(АдресСайта)
	
	Если Не ЗначениеЗаполнено(АдресСайта) Тогда
		Возврат;
	КонецЕсли;	
 	
	Если Не СтрНачинаетсяС(АдресСайта, "http") Тогда
		АдресСайта = "http://" + АдресСайта;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСайта)
	
КонецПроцедуры

Процедура ОтразитьОткликНаРекомендацию(Организация, УникальныйИдентификатор, АдресРесурса)
	
	Если Не ЗначениеЗаполнено(АдресРесурса) Тогда
		Возврат;
	КонецЕсли;
	
	ТорговыеПредложенияВызовСервера.ОтразитьОткликНаРекомендацию(
		Организация, 
		УникальныйИдентификатор,
		АдресРесурса);
	
КонецПроцедуры

Процедура ДеактивироватьРекомендацию(Форма, УникальныйИдентификатор, ОписаниеПодсказки)
	
	ОтключитьРекомендацииДляТекущегоСеанса();
	
	Организация = ОрганизацияИзФормы(Форма);

	АдресРесурса = ОписаниеПодсказки.Ссылки.АдресДеактивации;
	
	Если Не ЗначениеЗаполнено(АдресРесурса) Тогда
		Возврат;
	КонецЕсли;
	
	ТорговыеПредложенияВызовСервера.ДеактивироватьРекомендацию(
		Организация, 
		УникальныйИдентификатор,
		АдресРесурса);
		
КонецПроцедуры

Функция ОрганизацияИзФормы(Форма)
	
	ДанныеКонтекста = ДанныеКонтекстаДляПодсказки(Форма);
	
	Организация = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеКонтекста.Организации) Тогда
		Организация = ДанныеКонтекста.Организации[0];
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

#КонецОбласти

#Область КорзинаТорговыхПредложений

Процедура ОповеститьОбИзмененииКорзины(АдресДанныхКорзины, Источник) Экспорт
	
	Оповестить("ТорговыеПредложения_ПеречитатьДанныеКорзины", 
		Новый Структура("АдресДанныхКорзины", АдресДанныхКорзины), 
		Источник);
	
КонецПроцедуры

Процедура ВыполнитьДействиеСТоваромКорзины(ПараметрыМетода, Форма, ОповещениеОЗавершении) Экспорт
	
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	
	ДлительнаяОперация = ТорговыеПредложенияВызовСервера.
		ВыполнитьДействиеСТоваромКорзиныВФоне(ПараметрыМетода, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура УдалитьКорзинуДиалог(Форма, Организация, АдресКорзины, Оповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("АдресКорзины", АдресКорзины);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения("УдалитьКорзинуДиалогПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru = 'Список товаров для заказа будет очищен. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура УдалитьКорзинуДиалогПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыМетода = Новый Структура(
			"Организация, АдресКорзины", 
			ДополнительныеПараметры.Организация, ДополнительныеПараметры.АдресКорзины);
		
		УдалитьКорзину(
			ПараметрыМетода, ДополнительныеПараметры.Форма, ДополнительныеПараметры.Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКорзину(ПараметрыМетода, Форма, ОповещениеОЗавершении = Неопределено) Экспорт
	
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	
	ДлительнаяОперация = ТорговыеПредложенияВызовСервера.УдалитьКорзинуВФоне(ПараметрыМетода, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Функция ОписаниеПараметровРаботыСТоваромКорзины() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация",                       Неопределено);
	Результат.Вставить("АдресКомандыДобавить",              "");
	Результат.Вставить("АдресКомандыУдалить",               "");
	Результат.Вставить("АдресКомандыИзменитьКоличество",    "");
	Результат.Вставить("АдресКорзины",                      "");

	Результат.Вставить("ПрочитатьКорзину",                  Ложь);
	Результат.Вставить("Количество",                        0);
	Результат.Вставить("ИдентификаторТорговогоПредложения", "");
	Результат.Вставить("ВидОперации",                       "Добавление"); // Добавление, Удаление
	
	Возврат Результат;
	
КонецФункции

Функция КомандыТорговогоПредложения(ИдентификаторПредложения, ТаблицаТоваров) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИзменитьКоличество", "");
	Результат.Вставить("Удалить",            "");
	
	ОтборСтрок = Новый Структура("Идентификатор", ИдентификаторПредложения);
	СтрокаДанных = ТаблицаТоваров.НайтиСтроки(ОтборСтрок);
	
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИзменитьКоличество = СтрокаДанных[0].АдресКомандыИзменитьКоличество;
	Результат.Удалить            = СтрокаДанных[0].АдресКомандыУдалить;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТорговыеПредложения

Процедура ПолучитьКатегорииТорговыхПредложенийВФоне(Форма, ОповещениеОЗавершении) Экспорт
	
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	
	ДлительнаяОперация = ТорговыеПредложенияВызовСервера.ПолучитьКатегорииТорговыхПредложенийВФоне(УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Обрабатывает интерактивное нажатие пользователя на гиперссылку реквизита
//    в карточке торгового предложения.
//
// Параметры:
//  ПозицияТорговогоПредложения   - Структура - описание позиции торгового предложения. Ключи:
//        *ПрайсЛист - ОпределяемыйТип.ТорговоеПредложение - ссылка на прайс-лист
//        *Номенклатура - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру
//        *Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику
//        *Упаковка - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - ссылка на упаковку
//  Расшифровка                   - Структура - описание способа обработки гиперссылки. Ключи:
//        *Действие - Строка - описание способа обработки гиперссылки:
//            - "ОбработкаПрикладнойЛогикой" - обработка выполняется в обработчике
//               ТорговыеПредложенияКлиентПереопределяемый.ОбработатьНажатиеПоГиперссылкеРеквизитаКарточкиТорговогоПредложения
//            - "ОбработкаЛогикойБиблиотеки" - предопределенные действия обработки гиперссылки библиотекой
//  Форма                         - ФормаКлиентскогоПриложения - форма, источник события
//  ЭлементФормы                  - ПолеФормы - элемент формы, нажатие на которое вызвало обработчик
//  СтандартнаяОбработка          - Булево - признак выполнения стандартной обработки расшифровки
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - обработчик, выполняемый после обработки перехода по гиперссылке
//
Процедура ОбработатьНажатиеПоГиперссылкеРеквизитаКарточкиТорговогоПредложения(ПозицияТорговогоПредложения,
				Расшифровка, Форма, ЭлементФормы, СтандартнаяОбработка, ОписаниеОповещенияОЗавершении) Экспорт 
	
	Перем Действие, ПредупреждениеРедактирования, ИдентификаторНоменклатурыСервиса;
	
	Если ЗначениеЗаполнено(Расшифровка)
		И ТипЗнч(Расшифровка) <> Тип("Структура") Тогда // стандартная обработка
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	ИначеЕсли Расшифровка.Свойство("ПредупреждениеРедактирования", ПредупреждениеРедактирования) Тогда
		ПоказатьПредупреждение(, ПредупреждениеРедактирования);
		Возврат;
	ИначеЕсли Расшифровка.Свойство("ТребуетсяПокупкаКарточки", ИдентификаторНоменклатурыСервиса) Тогда
		
		ИдентификаторыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторНоменклатурыСервиса);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПокупкиКарточкиНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		ОбщийМодульРаботаСНоменклатуройКлиент.КупитьКарточкиНоменклатуры(ОписаниеОповещения, 
			ИдентификаторыНоменклатуры, Форма);
			
		Возврат
	ИначеЕсли НЕ Расшифровка.Свойство("Действие", Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие = "ОбработкаПрикладнойЛогикой" Тогда
		
		ТорговыеПредложенияКлиентПереопределяемый.ОбработатьНажатиеПоГиперссылкеРеквизитаКарточкиТорговогоПредложения(
			ПозицияТорговогоПредложения, Расшифровка.ИмяРеквизита, Расшифровка.ДополнительныйРеквизит, Форма, ЭлементФормы,
			ОписаниеОповещенияОЗавершении);
		
	// ОбработкаЛогикойБиблиотеки
	Иначе
		
		ОбработатьДействиеОбработкаЛогикойБиблиотеки(ПозицияТорговогоПредложения, Расшифровка.ИмяРеквизита, 
			Расшифровка.ДополнительныйРеквизит, 
			Форма, ЭлементФормы, ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДействиеОбработкаЛогикойБиблиотеки(ПозицияТорговогоПредложения, ИмяРеквизита, 
			ДополнительныйРеквизит, Форма, ЭлементФормы, ОписаниеОповещенияОЗавершении)
		
	Если ИмяРеквизита = "ПрайсЛистыСлужебный.СпособДоставки" Тогда
		
		ПараметрыФормы = БизнесСетьСлужебныйКлиент.ОписаниеПараметровФормыНастройкиРегионов();
		
		ПараметрыФормы.Организация         = ПозицияТорговогоПредложения.Организация;
		ПараметрыФормы.ТорговоеПредложение = ПозицияТорговогоПредложения.ПрайсЛист;
		
		БизнесСетьСлужебныйКлиент.ОткрытьФормуНастройкиРегионов(
			ПараметрыФормы, 
			Форма,
			ОписаниеОповещенияОЗавершении);
		
	ИначеЕсли ИмяРеквизита = "ТоварыСлужебный.КатегорияСервиса" Тогда
		
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПозицияТорговогоПредложения.Номенклатура);
		
		ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		ОбщийМодульРаботаСНоменклатуройКлиент.СопоставитьНоменклатуруКатегорииСервиса(
			Номенклатура, Форма, ОписаниеОповещенияОЗавершении);
		
	ИначеЕсли ИмяРеквизита = "ТоварыСлужебный.НоменклатураСервиса" Тогда
		
		ПараметрыФормы = РаботаСНоменклатуройКлиент.ПараметрыФормыСопоставленийНоменклатуры();
		ПараметрыФормы.Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ПозицияТорговогоПредложения.Номенклатура);
		ПараметрыФормы.ОтображатьСопоставленные = Истина;
		
		ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		ОбщийМодульРаботаСНоменклатуройКлиент.ОткрытьФормуСопоставленияНоменклатуры(
			ПараметрыФормы, Форма, ОписаниеОповещенияОЗавершении);
		
	ИначеЕсли ИмяРеквизита = "СвойстваСлужебный.Свойство" Тогда
		
		ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		ОбщийРаботаСНоменклатуройСлужебныйВызовСервера = 
			ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройСлужебныйВызовСервера");
		
		СведенияОСопоставленииНоменклатурыБизнесСеть = 
			ОбщийРаботаСНоменклатуройСлужебныйВызовСервера.СведенияОСопоставленииНоменклатурыБизнесСеть(
				ПозицияТорговогоПредложения.Номенклатура);
		
		ПараметрыФормы = ОбщийМодульРаботаСНоменклатуройКлиент.ПараметрыФормыСопоставленияНоменклатурыСРубрикатором();
		ПараметрыФормы.СценарийИспользования = "ПубликацияТорговыхПредложений";
		
		ЗначениеСопоставления = Неопределено;
		Если СведенияОСопоставленииНоменклатурыБизнесСеть.Свойство("Номенклатура", ЗначениеСопоставления) Тогда
			ПараметрыФормы.РежимСопоставления    = "ПоНоменклатуре";
			ПараметрыФормы.Номенклатура          = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеСопоставления);
		ИначеЕсли СведенияОСопоставленииНоменклатурыБизнесСеть.Свойство("Родитель", ЗначениеСопоставления) Тогда
			ПараметрыФормы.РежимСопоставления    = "ПоИерархии";
			ПараметрыФормы.Родители               = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеСопоставления);
		ИначеЕсли СведенияОСопоставленииНоменклатурыБизнесСеть.Свойство("ВидНоменклатуры", ЗначениеСопоставления) Тогда
			ПараметрыФормы.РежимСопоставления    = "ПоВидам";
			ПараметрыФормы.ВидыНоменклатуры      = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеСопоставления);
		Иначе
			ПараметрыФормы.РежимСопоставления    = "ПоНоменклатуре";
			ПараметрыФормы.Номенклатура          = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ПозицияТорговогоПредложения.Номенклатура);
		КонецЕсли; 
		
		ОбщийМодульРаботаСНоменклатуройКлиент.ОткрытьФормуСопоставленияНоменклатурыСРубрикатором(ПараметрыФормы, Форма,
			ОписаниеОповещенияОЗавершении);
			
	ИначеЕсли ИмяРеквизита = "Контакты.ЭлектроннаяПочта" Тогда
		
		ОткрытьФормуНастроекПубликации(ПозицияТорговогоПредложения.ПрайсЛист, Форма, ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПокупкиКарточкиНоменклатуры(РезультатПокупки, ДополнительныеПараметры) Экспорт 

	Если РезультатПокупки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПокупки = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(РезультатПокупки.АдресРезультата);
	
	Если ДанныеПокупки.ЕстьОшибки Тогда
		ОбщийМодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		ОбщийМодульРаботаСНоменклатуройКлиент.СоздатьНоменклатуруОбработкаОшибки(ДанныеПокупки.ОписаниеОшибки);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СинхронизацияТорговыхПредложений

Процедура ОбновитьСтатистикуСинхронизации(ОповещениеОЗавершении, ПараметрыПроцедуры, Форма) Экспорт
	
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	
	ДлительнаяОперация = ТорговыеПредложенияВызовСервера.ОбновитьСтатистикуСинхронизацииВФоне(УникальныйИдентификатор,
		ПараметрыПроцедуры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Функция ПараметрыОбновленияСтатистикиСинхронизации(Форма) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИмяФормы",                            Форма.ИмяФормы);
	Параметры.Вставить("ИспользоватьСтатистикуСопоставления", Ложь);
	Параметры.Вставить("ИспользоватьСтатистикуПубликации",    Ложь);
	Параметры.Вставить("ИспользоватьСведенияАбонента",        Ложь);
	Параметры.Вставить("ИспользоватьРегистрациюОрганизации",  Ложь);
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьПояснениеДлительнойОперации(ЭлементФормы, ТекстПрогресса, ПроцентПрогресса = Неопределено)
	
	Если ПроцентПрогресса = Неопределено Тогда
		ТекстСостояния = ТекстПрогресса;
	Иначе
		ТекстСостояния = СтрШаблон("%1 - %2%%", ТекстПрогресса, ПроцентПрогресса)
	КонецЕсли; 
	
	ЭлементФормы.Заголовок = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
		НСтр("ru = '<span>%1. </span>
				|<a href=""%2""><span>Отменить</span></a>'"), 
			ТекстСостояния, 
			"ОтменитьФоновоеЗадание");
	
КонецПроцедуры

Функция ПараметрыСинхронизацииТорговыхПредложений(Форма) Экспорт
	
	ПараметрыСинхронизации = Новый Структура;
	ПараметрыСинхронизации.Вставить("ВыводитьПрогрессВыполнения"     , Ложь);
	ПараметрыСинхронизации.Вставить("ОповещениеОПрогрессеВыполнения" , Неопределено);
	ПараметрыСинхронизации.Вставить("ОповещениеОЗавершении"          , Неопределено);
	ПараметрыСинхронизации.Вставить("ГруппаДлительнойОперации"       , Неопределено);
	ПараметрыСинхронизации.Вставить("НадписьПрогресса"               , Неопределено);
	ПараметрыСинхронизации.Вставить("Форма"                          , Форма);
	ПараметрыСинхронизации.Вставить("ПрайсЛист"                      , Неопределено);
	
	Возврат ПараметрыСинхронизации;
	
КонецФункции

Процедура ВыполнитьСинхронизациюТорговыхПредложений(ПараметрыСинхронизации, ДлительнаяОперация) Экспорт
	
	ОчиститьСообщения();
	
	Если Не ПараметрыСинхронизации.ГруппаДлительнойОперации = Неопределено Тогда
		ПараметрыСинхронизации.ГруппаДлительнойОперации.Видимость = Истина;
	КонецЕсли;
	
	ВыводитьПрогрессВыполнения = ПараметрыСинхронизации.ВыводитьПрогрессВыполнения;
	
	Если ВыводитьПрогрессВыполнения И Не ПараметрыСинхронизации.НадписьПрогресса = Неопределено Тогда
		УстановитьПояснениеДлительнойОперации(ПараметрыСинхронизации.НадписьПрогресса, НСтр("ru = 'Выполняется синхронизация'"));
	КонецЕсли;
	
	ДлительнаяОперация = ТорговыеПредложенияВызовСервера.ВыполнитьСинхронизациюТорговыхПредложенийВФоне(
		ДлительнаяОперация, ПараметрыСинхронизации.ПрайсЛист);
	
	Оповестить("СинхронизацияТорговыхПредложений_НачалоВыполнения", , ПараметрыСинхронизации.Форма);
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОбновитьПрогрессСинхронизацииТорговыхПредложений", ЭтотОбъект, ПараметрыСинхронизации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения              = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения     = ВыводитьПрогрессВыполнения;
	
	Если ВыводитьПрогрессВыполнения Тогда
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриЗавершенииСинхронизацииТорговыхПредложений", ЭтотОбъект, ПараметрыСинхронизации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбновитьПрогрессСинхронизацииТорговыхПредложений(ДанныеПрогресса, ПараметрыСинхронизации) Экспорт 
	
	Если ДанныеПрогресса.Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("СинхронизацияТорговыхПредложений_ПрогрессВыполнения", ДанныеПрогресса, ПараметрыСинхронизации.Форма);
	
	Если Не ПараметрыСинхронизации.НадписьПрогресса = Неопределено Тогда
		Если ДанныеПрогресса.Прогресс.Свойство("Процент") Тогда
			УстановитьПояснениеДлительнойОперации(ПараметрыСинхронизации.НадписьПрогресса, ДанныеПрогресса.Прогресс.Текст, ДанныеПрогресса.Прогресс.Процент);
		Иначе
			УстановитьПояснениеДлительнойОперации(ПараметрыСинхронизации.НадписьПрогресса, ДанныеПрогресса.Прогресс.Текст);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыСинхронизации.ОповещениеОПрогрессеВыполнения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыСинхронизации.ОповещениеОПрогрессеВыполнения, ДанныеПрогресса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗавершенииСинхронизацииТорговыхПредложений(ДлительнаяОперация, ПараметрыСинхронизации) Экспорт 
	
	Если Не ПараметрыСинхронизации.ГруппаДлительнойОперации = Неопределено Тогда
		ПараметрыСинхронизации.ГруппаДлительнойОперации.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыСинхронизации.ОповещениеОЗавершении = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыСинхронизации.ОповещениеОЗавершении, ДлительнаяОперация);
	КонецЕсли;
	
	Оповестить("ТорговыеПредложения_ИзменениеСинхронизации", , ЭтотОбъект);
	
	Если ДлительнаяОперация = Неопределено Тогда // Отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Свойство("Сообщения") Тогда
		Для каждого Сообщение Из ДлительнаяОперация.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Отказ = Ложь;
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ТекстСообщения = ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
				ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		Отказ = Истина;
	КонецЕсли;
		
	Если Не Отказ Тогда
		
		СтатистикаПубликации = БизнесСетьВызовСервера.ПолучитьУдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если СтатистикаПубликации = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтатистикаПубликации.КоличествоОпубликовано = 0
				И СтатистикаПубликации.КоличествоОпубликованоЧастично = 0
				И НЕ СтатистикаПубликации.КоличествоНеОпубликовано = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, НСтр("ru = 'Публикация не выполнена'"),
				БиблиотекаКартинок.БизнесСеть);
		ИначеЕсли Не СтатистикаПубликации.КоличествоОпубликованоЧастично = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, НСтр("ru = 'Публикация выполнена частично'"),
				БиблиотекаКартинок.БизнесСеть);
		ИначеЕсли Не СтатистикаПубликации.КоличествоОпубликовано = 0
				И НЕ СтатистикаПубликации.КоличествоНеОпубликовано = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, НСтр("ru = 'Публикация выполнена частично'"),
				БиблиотекаКартинок.БизнесСеть);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, НСтр("ru = 'Публикация выполнена'"),
				БиблиотекаКартинок.БизнесСеть);
		КонецЕсли;
		
	КонецЕсли;
	
	ДлительнаяОперация = Неопределено
	
КонецПроцедуры

Процедура ОтобразитьСостояниеСинхронизацииТорговыхПредложений(ПараметрыСинхронизации, ДлительнаяОперация) Экспорт
	
	Если ДлительнаяОперация = Неопределено Или Не ДлительнаяОперация.Статус = "Выполняется" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСинхронизации.ГруппаДлительнойОперации = Неопределено Тогда
		ПараметрыСинхронизации.ГруппаДлительнойОперации.Видимость = Истина;
	КонецЕсли;
	
	ВыводитьПрогрессВыполнения = ПараметрыСинхронизации.ВыводитьПрогрессВыполнения;
	
	Если ВыводитьПрогрессВыполнения И Не ПараметрыСинхронизации.НадписьПрогресса = Неопределено Тогда
		УстановитьПояснениеДлительнойОперации(ПараметрыСинхронизации.НадписьПрогресса, НСтр("ru = 'Выполняется синхронизация'"));
	КонецЕсли;
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ОбновитьПрогрессСинхронизацииТорговыхПредложений", ЭтотОбъект, ПараметрыСинхронизации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения              = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения     = ВыводитьПрогрессВыполнения;
	
	Если ВыводитьПрогрессВыполнения Тогда
		ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриЗавершенииСинхронизацииТорговыхПредложений", ЭтотОбъект, ПараметрыСинхронизации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении
		, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПроверитьСостояниеСинхронизацииТорговыхПредложений(ДлительнаяОперация, ПараметрыСинхронизации)
	ДлительнаяОперация = 
		ТорговыеПредложенияВызовСервера.НайтиДлительнуюОперациюСинхронизацииТорговыхПредложений(ДлительнаяОперация);
	ОтобразитьСостояниеСинхронизацииТорговыхПредложений(ПараметрыСинхронизации, ДлительнаяОперация);
КонецПроцедуры

Процедура ОбработкаОповещенияСинхронизацииТорговыхПредложений(ИмяСобытия, Источник, Параметр, ДлительнаяОперация, 
		ПараметрыСинхронизации) Экспорт
	
	Если ИмяСобытия = "СинхронизацияТорговыхПредложений_НачалоВыполнения" И Не Источник = ПараметрыСинхронизации.Форма Тогда
		ПроверитьСостояниеСинхронизацииТорговыхПредложений(ДлительнаяОперация, ПараметрыСинхронизации);
	ИначеЕсли ИмяСобытия = "СинхронизацияТорговыхПредложений_ПрогрессВыполнения" И Не Источник = ПараметрыСинхронизации.Форма Тогда
		
		Если Не ПараметрыСинхронизации.НадписьПрогресса = Неопределено Тогда
			Если Параметр.Прогресс.Свойство("Процент") Тогда
				УстановитьПояснениеДлительнойОперации(ПараметрыСинхронизации.НадписьПрогресса, Параметр.Прогресс.Текст, Параметр.Прогресс.Процент);
			Иначе
				УстановитьПояснениеДлительнойОперации(ПараметрыСинхронизации.НадписьПрогресса, Параметр.Прогресс.Текст);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПараметрыСинхронизации.ОповещениеОПрогрессеВыполнения = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСинхронизации.ОповещениеОПрогрессеВыполнения, Параметр);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_ИзменениеСинхронизации" И Не Источник = ПараметрыСинхронизации.Форма Тогда
		
		Если Не ПараметрыСинхронизации.ГруппаДлительнойОперации = Неопределено Тогда
			ПараметрыСинхронизации.ГруппаДлительнойОперации.Видимость = Ложь;
		КонецЕсли;
		
		Если НЕ ПараметрыСинхронизации.ОповещениеОЗавершении = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСинхронизации.ОповещениеОЗавершении, ДлительнаяОперация);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция КоличествоВведеноКорректно(Количество, МинимальноеКоличество, КратностьУпаковки) Экспорт
	
	Результат = Ложь;
	
	Если Количество < МинимальноеКоличество Тогда
		Шаблон = СтрШаблон(НСтр("ru = 'Минимальное количество товара для заказа: %1'"), МинимальноеКоличество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Шаблон);
		Возврат Результат;
	КонецЕсли;
	
	Если (Количество / КратностьУпаковки) <> Цел(Количество / КратностьУпаковки) Тогда
		Шаблон = СтрШаблон(НСтр("ru = 'Количество товара для заказа должно быть кратно: %1'"), КратностьУпаковки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(Шаблон);
		Возврат Результат;
	КонецЕсли;
	
	Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

// Обработка ошибок фонового задания.
//
// Параметры:
//  Результат	 - Структура - результат выполнения фонового задания.
//  Отказ		 - Булево - признак ошибки выполнения фонового задания.
//
Процедура ОбработатьОшибкиФоновогоЗадания(Результат, Отказ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		// Фоновое задание отменено пользователем.
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Сообщения")
		И ЗначениеЗаполнено(Результат.Сообщения) Тогда
		Для каждого ЭлементКоллекции Из Результат.Сообщения Цикл
			ЭлементКоллекции.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Статус") И Результат.Статус = "Ошибка" Тогда
		
		Если ЗначениеЗаполнено(Результат.КраткоеПредставлениеОшибки) Тогда
			ТекстСообщения = Результат.КраткоеПредставлениеОшибки;
		ИначеЕсли ЗначениеЗаполнено(Результат.ПодробноеПредставлениеОшибки) Тогда
			ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения операции'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

