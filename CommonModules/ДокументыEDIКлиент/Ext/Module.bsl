#Область СлужебныйПрограммныйИнтерфейс

#Область ДеревоСтатусов

Процедура СвернутьАрхивДеревоСтатусов(Форма, ДеревоСтатусов) Экспорт
	
	Для каждого ЭлементКоллекции Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		
		Если ЭлементКоллекции.Группировка = ПредопределенноеЗначение("Перечисление.ГруппировкиСтатусовEDI.Архив") Тогда
			
			Форма.Элементы.ДеревоСтатусов.Свернуть(ЭлементКоллекции.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоСтатусовВыбранПриИзменении(Форма, Элемент, ДобавлятьПостфиксEDI = Ложь) Экспорт
	
	ИмяДерева = "ДеревоСтатусов";
	Если ДобавлятьПостфиксEDI Тогда
		ИмяДерева = "ДеревоСтатусовEDI"
	КонецЕсли;
	
	Элементы                   = Форма.Элементы;
	ДеревоСтатусов             = Форма[ИмяДерева];
	ЭлементФормыДеревоСтатусов = Элементы[ИмяДерева];
	
	ВыбраннаяСтрока = ЭлементФормыДеревоСтатусов.ТекущаяСтрока;
	
	ТекущаяСтрока = ДеревоСтатусов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущаяСтрока.Выбран = 2 Тогда
		ТекущаяСтрока.Выбран = 0;
	КонецЕсли;
	
	РодительскаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
	
	Если РодительскаяСтрока = Неопределено Тогда
		
		ЗначениеФлажка = ?(ТекущаяСтрока.Выбран = 1, Истина, Ложь);
		ИзменитьФлажкиПодчиненныхПриИзмененииРодителя(ЗначениеФлажка, ТекущаяСтрока);
		ЭлементФормыДеревоСтатусов.Развернуть(ВыбраннаяСтрока, Истина);
		
	Иначе
		
		ЕстьНеВыбранные = Ложь;
		ЕстьВыбранные   = Ложь;
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
		
			Если Не ПодчиненнаяСтрока.Выбран Тогда
				ЕстьНеВыбранные = Истина;
			Иначе
				ЕстьВыбранные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНеВыбранные
			И ЕстьВыбранные Тогда
			
			РодительскаяСтрока.Выбран = 2;
			
		ИначеЕсли ЕстьНеВыбранные Тогда
			
			РодительскаяСтрока.Выбран = 0;
			
		Иначе
			
			РодительскаяСтрока.Выбран = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьФлажкиПодчиненныхПриИзмененииРодителя(ЗначениеФлажка, РодительскаяСтрока) Экспорт
	
	Для каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
		
		ПодчиненнаяСтрока.Выбран = ЗначениеФлажка;
		
		ИзменитьФлажкиПодчиненныхПриИзмененииРодителя(ЗначениеФлажка, ПодчиненнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Описывает массив статусов, при которых документ требует внимания.
// 
// Параметры:
// 	КатегорияДокументовEDI - ПеречислениеСсылка.КатегорииДокументовEDI - категория документа.
// 	
// Возвращаемое значение:
// 	Массив - массив статусов.
//
Функция МассивСтатусовТребуетВнимания(КатегорияДокументовEDI) Экспорт
	
	Если КатегорияДокументовEDI = ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Закупка") Тогда
		МассивСтатусов = ДокументыEDIКлиентСервер.МассивСтатусовНаСторонеПокупателя();
	Иначе
		МассивСтатусов = ДокументыEDIКлиентСервер.МассивСтатусовНаСторонеПродавца();
	КонецЕсли;
	
	УдалитьСтатусВыполняетсяИзМассива(МассивСтатусов);
	
	Возврат МассивСтатусов;
	
КонецФункции

#КонецОбласти

#Область ПлановыеДаты

Процедура ПлановаяДатаОбработкаВыбора(Форма, ВыбранноеЗначение, Оповещение) Экспорт
	
	Если ВыбранноеЗначение = "ПроизвольныйПериод" Тогда
		
		Диалог = Новый ДиалогРедактированияСтандартногоПериода();
		Диалог.Период = Форма.ПлановаяДатаПериод;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
		ОповещениеОВыбореПериода = Новый ОписаниеОповещения("ПослеВыбораПериода", ЭтотОбъект, ДополнительныеПараметры);
		
		Диалог.Показать(ОповещениеОВыбореПериода);
		
	Иначе
		
		Если ВыбранноеЗначение = "Просрочено" Тогда
			
			Форма.ПлановаяДатаПериод.ДатаНачала    = Дата(1, 1, 1);
			Форма.ПлановаяДатаПериод.ДатаОкончания = НачалоДня(Форма.ТекущаяДата);
			Форма.ПлановаяДатаОтбор                = НСтр("ru = 'Просрочено'");
			
		ИначеЕсли ВыбранноеЗначение = "Сегодня" Тогда
			
			Форма.ПлановаяДатаПериод.ДатаНачала    = НачалоДня(Форма.ТекущаяДата);
			Форма.ПлановаяДатаПериод.ДатаОкончания = КонецДня(Форма.ТекущаяДата);
			Форма.ПлановаяДатаОтбор                = НСтр("ru = 'Сегодня'");
			
		ИначеЕсли ВыбранноеЗначение = "Завтра" Тогда
			
			Форма.ПлановаяДатаПериод.ДатаНачала    = НачалоДня(Форма.ТекущаяДата + 86400);
			Форма.ПлановаяДатаПериод.ДатаОкончания = КонецДня(Форма.ТекущаяДата + 86400);
			Форма.ПлановаяДатаОтбор                = НСтр("ru = 'Завтра'");
			
		ИначеЕсли ВыбранноеЗначение = "ТриДня" Тогда
			
			Форма.ПлановаяДатаПериод.ДатаНачала    = НачалоДня(Форма.ТекущаяДата);
			Форма.ПлановаяДатаПериод.ДатаОкончания = КонецДня(Форма.ТекущаяДата + 86400 * 2);
			Форма.ПлановаяДатаОтбор                = НСтр("ru = 'В ближайшие три дня'");
			
		ИначеЕсли ВыбранноеЗначение = "Неделя" Тогда
			
			Форма.ПлановаяДатаПериод.ДатаНачала    = НачалоДня(Форма.ТекущаяДата);
			Форма.ПлановаяДатаПериод.ДатаОкончания = КонецДня(Форма.ТекущаяДата + 86400 * 7);
			Форма.ПлановаяДатаОтбор                = НСтр("ru = 'В ближайшую неделю'");
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ТипЗнч(Результат) = Тип("СтандартныйПериод") Тогда
		
		Форма.ПлановаяДатаПериод = Результат;
		Форма.ПлановаяДатаОтбор = Строка(Результат);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыСпискаДокументов

// Обработчик команды "Изменить"
//
// Параметры:
//  Список - ТаблицаФормы - таблица формы, текущие данные которой содержат поле "Ссылка" - ссылку на изменяемый объект.
//
Процедура ИзменитьЭлемент(Список) Экспорт
	
	ДокументыEDIИнтеграцияКлиент.ИзменитьЭлемент(Список);
	
КонецПроцедуры

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обработка в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод().
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормыДокументыСервиса

#Область ОткрытиеФорм

Процедура ОткрытьФормуДокументаСервиса(ПараметрыОткрытияФормы) Экспорт 
	
	Если ДокументыEDIИнтеграцияВызовСервера.ТребуетсяПовторноеПодключениеОрганизации(ПараметрыОткрытияФормы.Организация) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуДокументаСервисаЗавершение", ЭтотОбъект, ПараметрыОткрытияФормы);
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(ПараметрыОткрытияФормы.Организация, 
			ПараметрыОткрытияФормы.ФормаВладелец, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокументаСервисаПринудительно(ПараметрыОткрытияФормы);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыПараметровОткрытияФорм


Функция НовыйПараметрыОткрытияФормыДокументаСервиса(ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("ФормаВладелец"         , ФормаВладелец);
	ПараметрыОткрытияФормы.Вставить("ОписаниеОповещения"    , Неопределено);
	ПараметрыОткрытияФормы.Вставить("ТипДокумента"          , ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ПустаяСсылка"));
	ПараметрыОткрытияФормы.Вставить("ИдентификаторВСервисе" , "");
	ПараметрыОткрытияФормы.Вставить("Организация"           , Неопределено);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСтатусВыполняетсяИзМассива(МассивСтатусов)
	
	ИндексВМассиве = МассивСтатусов.Найти(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.Выполняется"));
	
	Если ИндексВМассиве <> Неопределено Тогда
		МассивСтатусов.Удалить(ИндексВМассиве);
	КонецЕсли;
	
КонецПроцедуры 

#Область ОткрытиеФорм

Процедура ОткрытьФормуДокументаСервисаЗавершение(Результат, ПараметрыОткрытияФормы) Экспорт
	
	Если ДокументыEDIИнтеграцияВызовСервера.ТребуетсяПовторноеПодключениеОрганизации(ПараметрыОткрытияФормы.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокументаСервисаПринудительно(ПараметрыОткрытияФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуДокументаСервисаПринудительно(ПараметрыОткрытияФормы)
	
	Если ПараметрыОткрытияФормы.ФормаВладелец = Неопределено Тогда
		РежимОткрытия = РежимОткрытияОкнаФормы.Независимый;
	Иначе
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипДокумента"           , ПараметрыОткрытияФормы.ТипДокумента);
	ПараметрыФормы.Вставить("ИдентификаторВСервисе"  , ПараметрыОткрытияФормы.ИдентификаторВСервисе);
	ПараметрыФормы.Вставить("Организация"            , ПараметрыОткрытияФормы.Организация);
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ФормаЗаказа", ПараметрыФормы, ПараметрыОткрытияФормы.ФормаВладелец,
		ПараметрыОткрытияФормы.ИдентификаторВСервисе, , , ПараметрыОткрытияФормы.ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти