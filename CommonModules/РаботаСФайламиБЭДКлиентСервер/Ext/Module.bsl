#Область СлужебныйПрограммныйИнтерфейс

// Возвращает результат операции проверки и корректировки имени файла.
// 
// Параметры:
// 	ИмяФайла - Строка
// 	Кодировка - Строка - Строковое представление кодировки
// 	
// Возвращаемое значение:
//  Структура:
//  * ИмеютсяНекорректныеСимволы - Булево
//  * ИмяФайлаДоКорректировки - Строка
//  * ИмяФайлаПослеКорректировки - Строка
//
Функция ПроверитьИмяФайлаСУчетомКодировки(Знач ИмяФайла, Кодировка = "windows-1251") Экспорт
	
	// Запланированная обработка частного сценария с наличием в имени файла комбинируемых символов.
	// Эти комбинации символов встречаются довольно часто, 
	// поэтому преобразуем их до вызова метода "ПроверитьИмяФайлаСУчетомКодировки" для исключения частого оповещения 
	// пользователей о некорректности данных символов в имени файла.
	ИмяФайла = СтрЗаменить(ИмяФайла, "и" + Символ(774), "й");
	ИмяФайла = СтрЗаменить(ИмяФайла, "е" + Символ(776), "е");
	
	ИмяФайла = 
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "_");
	
	ИмяФайлаПослеКорректировки = 
		ПолучитьСтрокуИзДвоичныхДанных(
			ПолучитьДвоичныеДанныеИзСтроки(ИмяФайла, Кодировка), Кодировка);
			
	ИмяФайлаПослеКорректировки = ДопустимоеИмяФайла(ИмяФайлаПослеКорректировки, Истина);
	
	ИмеютсяНекорректныеСимволы = ИмяФайла <> ИмяФайлаПослеКорректировки;
		
	Результат = Новый Структура;
	Результат.Вставить("ИмеютсяНекорректныеСимволы", ИмеютсяНекорректныеСимволы);
	Результат.Вставить("ИмяФайлаДоКорректировки", ИмяФайла);
	Результат.Вставить("ИмяФайлаПослеКорректировки", ИмяФайлаПослеКорректировки);
	
	Возврат Результат;
	
КонецФункции

// Возвращает вид ошибки, возникающей при работе с файлами.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиРаботаСФайлами() Экспорт
	
	ОбработчикВыполненияДиагностики = "ОбработкаНеисправностейБЭДКлиент.ОткрытьМастерДиагностики";
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОшибкаРаботыСФайлами";
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = ОбработчикВыполненияДиагностики;
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка работы с файлами'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику работы с файлами'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните", ОбработчикВыполненияДиагностики);
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает пустую структуру описания файла.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  * ИмяФайла - Строка - имя файла.
//  * ДвоичныеДанные - ДвоичныеДанные - двоичные данные файла.
//                   - Неопределено
// 
Функция НовоеОписаниеФайла() Экспорт
	
	ОписаниеФайла = Новый Структура;
	
	ОписаниеФайла.Вставить("ИмяФайла", "");
	ОписаниеФайла.Вставить("ДвоичныеДанные", Неопределено);
	
	Возврат ОписаниеФайла;
		
КонецФункции

// Возвращает уникальное имя файла, полученное от исходного добавлением порядкового номера.
// 
// Параметры:
//  ИсходноеИмяФайла - Строка - Имя файла.
//  ЭтоКаталог - Булево - Истина, если это каталог.
//  
//  Возвращаемое значение:
//   Строка - Уникальное имя файла.
//
Функция ОпределитьУникальноеИмяФайла(Знач ИсходноеИмяФайла, Знач ЭтоКаталог = Ложь) Экспорт
	
	ПозицияДляДополнения = СтрНайти(ИсходноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияДляДополнения = 0 Или ЭтоКаталог Тогда
		ПозицияДляДополнения = СтрДлина(ИсходноеИмяФайла) + 1;
	КонецЕсли;
	
	Счетчик = 0;
	Пока Истина Цикл
		
		ДополнениеИмени = ?(Счетчик = 0, "", СтрШаблон(" (%1)", Формат(Счетчик, "ЧГ=0;")));
		ИмяФайла = Лев(ИсходноеИмяФайла, ПозицияДляДополнения - 1) + ДополнениеИмени
			+ Сред(ИсходноеИмяФайла, ПозицияДляДополнения);

		Файл = Новый Файл(ИмяФайла);
		Если Не Файл.Существует() Тогда
			Прервать;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции

// Проверяет имя файла на наличие недопустимых символов.
//
// Параметры:
//  ИмяФайла - Строка - проверяемое имя файла
//  УдалятьНекорректные - Булево - Если установлено значение Истина, то будет произведено удаление некорректных
//  							   символов из переданной строки, если установлено значение Ложь, 
//  							   тогда вызываем исключение с оповещением пользователя.
// Возвращаемое значение:
//  Строка
Функция ДопустимоеИмяФайла(Знач ИмяФайла, УдалятьНекорректные = Ложь) Экспорт
	
	НедопустимыеСимволы = ОбщегоНазначенияКлиентСервер.ПолучитьНедопустимыеСимволыВИмениФайла();
	НедопустимыеСимволы = НедопустимыеСимволы + "№";
	Результат = Истина;
	
	ИтоговоеИмяФайла = ИмяФайла;
	
	Для Сч = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		Символ = Сред(НедопустимыеСимволы, Сч, 1);
		Если СтрНайти(ИмяФайла, Символ) <> 0 Тогда
			Если УдалятьНекорректные Тогда
				ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НедопустимыеСимволы, ИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат ИтоговоеИмяФайла;
	КонецЕсли;
	
КонецФункции

// Параметры:
//  СписокРасширений - Строка - Список расширений, разделенных пробелами.
//  РасширениеФайла - Строка - Расширение с точкой или без точки.
// 
// Возвращаемое значение:
//  Булево - Истина, если файл с таким расширением находится в списке расширений.
//
Функция РасширениеФайлаВСписке(СписокРасширений, РасширениеФайла) Экспорт
	
	РасширениеФайлаБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	МассивРасширений = СтрРазделить(
		НРег(СписокРасширений), " ", Ложь);
	
	Если МассивРасширений.Найти(РасширениеФайлаБезТочки) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает информацию, является ли расширение форматом PDF.
// 
// Параметры:
//  Расширение - Строка - Расширение файла без точки
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоРасширениеФайлаPDF(Расширение) Экспорт
	
	Возврат ВРег(Расширение) = "PDF"
		Или ВРег(Расширение) = ".PDF";
	
КонецФункции

// Возвращает информацию, является ли расширение форматом XML.
// 
// Параметры:
//  Расширение - Строка - Расширение файла без точки
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоXML(Расширение) Экспорт
	
	Возврат ВРег(Расширение) = "XML";
	
КонецФункции

// Возвращает представление файла в виде: [ИмяФайла] ([РазмерФайлаВКилобайтах] Кб), где РазмерФайлаВКилобайтах -
// преобразованное значение параметра РазмерФайлаВБайтах. Если РазмерФайлаВБайтах не задан, возвращает ИмяФайла.
//
// Параметры:
//  ИмяФайла			- Строка
//  РазмерФайлаВБайтах	- Число
//  					- Неопределено
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеФайлаСРазмеромВКилобайтах(Знач ИмяФайла, Знач РазмерФайлаВБайтах) Экспорт

	Если РазмерФайлаВБайтах = Неопределено Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	
	РазмерФайлаВКилобайтах = Окр(РазмерФайлаВБайтах / 1024, 0);
	РазмерФайлаВКилобайтах = ?(РазмерФайлаВКилобайтах = 0, 1, РазмерФайлаВКилобайтах);
	Возврат СтрШаблон(НСтр("ru = '%1 (%2 Кб)'"), ИмяФайла, РазмерФайлаВКилобайтах);

КонецФункции

// Возвращает индекс картинки по расширению файла для КоллекцияПиктограммФайлов
// 
// Параметры:
//  РасширениеФайла - Строка - Расширение файла
// 
// Возвращаемое значение:
//  Число - Индекс пиктограммы файла для картинки КоллекцияПиктограммФайлов
//
Функция ИндексКартинкиПоРасширениюФайла(Знач РасширениеФайла) Экспорт
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
		ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Расширение = "." + НРег(РасширениеФайла) + ";";
	
	Если СтрНайти(".dt;.1cd;.cf;.cfu;", Расширение) <> 0 Тогда
		Возврат 6; // Файлы 1С.
		
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; // Табличный Файл.
		
	ИначеЕсли СтрНайти(".txt;.log;.ini;", Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл.
		
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; // Внешние обработки.
		
	ИначеЕсли СтрНайти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки.
		
	ИначеЕсли СтрНайти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML.
		
	ИначеЕсли СтрНайти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word.
		
	ИначеЕсли СтрНайти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel.
		
	ИначеЕсли СтрНайти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint.
		
	ИначеЕсли СтрНайти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access.
		
	ИначеЕсли СтрНайти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml.
		
	ИначеЕсли СтрНайти(".msg;.eml;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты.
		
	ИначеЕсли СтрНайти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы.
		
	ИначеЕсли СтрНайти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы.
		
	ИначеЕсли СтрНайти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема.
		
	ИначеЕсли СтрНайти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема.
		
	ИначеЕсли СтрНайти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg.
		
	ИначеЕсли СтрНайти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp.
		
	ИначеЕсли СтрНайти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif.
		
	ИначеЕсли СтрНайти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif.
		
	ИначеЕсли СтрНайти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png.
		
	ИначеЕсли СтрНайти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf.
		
	ИначеЕсли СтрНайти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer.
		
	ИначеЕсли СтрНайти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math.
		
	ИначеЕсли СтрНайти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress.
		
	ИначеЕсли СтрНайти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw.
		
	ИначеЕсли СтрНайти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc.
		
	ИначеЕсли СтрНайти(".mp3;",Расширение) <> 0 Тогда
		Возврат 64;
		
	ИначеЕсли СтрНайти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты.
		
	ИначеЕсли СтрНайти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx.
		
	ИначеЕсли СтрНайти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx.
		
	ИначеЕсли СтрНайти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx.
		
	ИначеЕсли СтрНайти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // Файл подписи.
		
	ИначеЕсли СтрНайти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение.
	Иначе
		Возврат 4;
	КонецЕсли;
КонецФункции
	
#КонецОбласти
