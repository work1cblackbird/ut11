
#Область ПрограммныйИнтерфейс

// Формирует структуру для создания оплаты по нескольким заявкам на расходование средств
// Если в переданных заявках отличаются ключевые реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//    МассивСсылок   - Массив - заявки на расходование средств, по которым необходимо ввести оплату
//    ФормаОплаты - Строка - форма оплаты заявки
//    РаспределениеОплаты - Массив - строки остатков распределения оплаты.
//
// Возвращаемое значение:
//    Булево - Ложь, если в переданных заказах отличаются реквизиты шапки.
//
Функция СформироватьДанныеЗаполненияОплаты(МассивСсылок, ФормаОплаты, РаспределениеОплаты) Экспорт
	
	ТекстЗапроса =
		ТекстЗапросаПроверкаСтатуса() +
		ТекстЗапросаРаспределениеОплаты();
	
	Если МассивСсылок.Количество() > 1 Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВозможностьГруппировкиЗаявок();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Если ФормаОплаты = "Безналичная" Тогда
		Запрос.УстановитьПараметр("ТипМестаОплаты", Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ИначеЕсли ФормаОплаты = "Наличная" Тогда
		Запрос.УстановитьПараметр("ТипМестаОплаты", Тип("СправочникСсылка.Кассы"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Отказ = Ложь;
	Если Не РезультатЗапроса[0].Пустой() > 0 Тогда
						
		СоответствиеДопустимыхСтатусовЗаявок = СоответствиеДопустимыхСтатусовЗаявок();
		ДопустимыеСтатусыПоУмолчанию = СоответствиеДопустимыхСтатусовЗаявок.Получить(Тип("ПеречислениеСсылка.СтатусыЗаявокНаРасходованиеДенежныхСредств"));
		
		ВыборкаЗаявки = РезультатЗапроса[0].Выбрать();
		Пока ВыборкаЗаявки.Следующий() Цикл
			
			ДопустимыеСтатусы = СоответствиеДопустимыхСтатусовЗаявок.Получить(ТипЗНЧ(ВыборкаЗаявки.Статус));
			ДопустимыеСтатусы = ?(ДопустимыеСтатусы = Неопределено,	ДопустимыеСтатусыПоУмолчанию, ДопустимыеСтатусы);
			
			ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
				ВыборкаЗаявки.Заявка,
				ВыборкаЗаявки.Статус,
				ВыборкаЗаявки.ЕстьОшибкиПроведен,
				ВыборкаЗаявки.ЕстьОшибкиСтатус,
				ДопустимыеСтатусы);
		КонецЦикла;
		
	ИначеЕсли МассивСсылок.Количество() > 1 Тогда
		
		Выборка = РезультатЗапроса[2].Выбрать();
		Выборка.Следующий();
		Если СообщитьОбОшибкахФормированияДанныхЗаполненияОплаты(Выборка) Тогда
			
			ТекстОшибки = НСтр("ru='Ввод одного документа оплаты на основании выделенных заявок невозможен'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	РаспределениеОплаты = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса[1].Выгрузить());
	
	Возврат Не Отказ;
	
КонецФункции

Функция СоответствиеДопустимыхСтатусовЗаявок()
	
	СоответствиеТиповСтатусов 		= Новый Соответствие;	
	
	ДопустимыеСтатусыПоУмолчанию 	= Новый Массив;
	ДопустимыеСтатусыПоУмолчанию.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);	
	
	ДопустимыеСтатусыЗаявокСотрудников 	= Новый Массив;
	ДопустимыеСтатусыЗаявокСотрудников.Добавить(Перечисления.СтатусыЗаявокСотрудников.Согласована);        
	
	СоответствиеТиповСтатусов.Вставить(Тип("ПеречислениеСсылка.СтатусыЗаявокСотрудников"),ДопустимыеСтатусыЗаявокСотрудников);
	СоответствиеТиповСтатусов.Вставить(Тип("ПеречислениеСсылка.СтатусыЗаявокНаРасходованиеДенежныхСредств"),ДопустимыеСтатусыПоУмолчанию);
		
	Возврат СоответствиеТиповСтатусов;
	
КонецФункции

// Преобразует двоичные данные файла в текст
//
// Параметры:
//    АдресФайла - Строка - Адрес временного хранилища с данными файла
//    Кодировка - Строка - "DOS" или "Windows".
//
// Возвращаемое значение:
//    ТекстовыйДокумент - Текст файла.
//
Функция ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка) Экспорт
	
	Если Кодировка = "UTF-8" Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ИначеЕсли Кодировка = "Windows" ИЛИ Кодировка = "DOS" Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла); // ДвоичныеДанные
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";
	ИначеЕсли Кодировка = "UTF-8" Тогда
		Кодир = "UTF-8";
	Иначе
		Кодир = "windows-1251";
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Кодир);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		Событие = НСтр("ru = 'Загрузка банковской выписки'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Удаление временного файла'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

// Получает SWIFT банка
// 
// Параметры:
//  Банк - СправочникСсылка.КлассификаторБанков - ссылка на банк
// Возвращаемое значение:
//  Строка - SWIFT банка.
Функция SWIFT(Банк) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "СВИФТБИК")
	
КонецФункции


// Возвращает признак использования списка подотчетных лиц в документе "Заявка на расходование ДС"
// 
// Параметры:
//  ЗаявкиНаОплату - Массив из ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - список документов "Заявка на расходование ДС"
// 
// Возвращаемое значение:
//  Булево
//
Функция СписокФизЛицПоЗаявкамНаОплату(ЗаявкиНаОплату) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЗаявкаНаРасходованиеДенежныхСредств.СписокФизЛиц) КАК СписокФизЛиц
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В (&СписокДокументов)";
	
	Запрос.УстановитьПараметр("СписокДокументов", ЗаявкиНаОплату);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат ?(ЗначениеЗаполнено(РезультатЗапроса.СписокФизЛиц), РезультатЗапроса.СписокФизЛиц, Ложь);
	
КонецФункции

Функция Выполнить_ПроверкаКурсовЗачетаВАвансовыхОтчетах(Параметры) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, "ДенежныеСредстваСервер.Выполнить_ПроверкаКурсовЗачетаВАвансовыхОтчетах", Параметры);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПроверкаСтатуса()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	Заявка.Статус КАК Статус,
	|	НЕ Заявка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР КОГДА НЕ (Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|	
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|	И (НЕ Заявка.Проведен ИЛИ
	|		Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	Заявка.Статус КАК Статус,
	|	НЕ Заявка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР КОГДА НЕ (Заявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокСотрудников.Согласована))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|	
	|ИЗ
	|	Документ.ЗаявкаНаКомандировку КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|	И (НЕ Заявка.Проведен ИЛИ
	|		Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокСотрудников.Согласована))
	|;
	|
	|///////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозможностьГруппировкиЗаявок()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|			ВЫБОР КОГДА Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|					ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|					ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|				ТОГДА Заявка.ФормаОплатыЗаявки
	|			КОНЕЦ) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияФормаОплаты,
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ИЛИ Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|		ТОГДА Заявка.ФормаОплатыЗаявки
	|		КОНЕЦ) КАК ФормаОплатыЗаявки,
	|	
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа)
	|			ТОГДА Заявка.Валюта
	|		КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА
	|				ВЫБОР КОГДА Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|						И Заявка.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|					ТОГДА Заявка.Касса.ВалютаДенежныхСредств
	|					КОГДА Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|						И Заявка.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|					ТОГДА Заявка.БанковскийСчет.ВалютаДенежныхСредств
	|				КОНЕЦ
	|		КОНЕЦ) КАК Валюта,
	|	МИНИМУМ(Заявка.Валюта) КАК ВалютаКандидат,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|		ВЫБОР КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа)
	|			ТОГДА Заявка.Валюта
	|		КОГДА Заявка.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА 
	|				ВЫБОР КОГДА Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|						И Заявка.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|					ТОГДА Заявка.Касса.ВалютаДенежныхСредств
	|					КОГДА Заявка.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|						И Заявка.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|					ТОГДА Заявка.БанковскийСчет.ВалютаДенежныхСредств
	|				КОНЕЦ
	|		КОНЕЦ) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВалютаОплаты,
	|	
	|	МИНИМУМ(Заявка.Организация) КАК Организация,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.Организация) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	
	|	МИНИМУМ(Заявка.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.ХозяйственнаяОперация) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
	|	
	|	МИНИМУМ(Заявка.ХозяйственнаяОперацияПоЗарплате) КАК ХозяйственнаяОперацияПоЗарплате,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.ХозяйственнаяОперацияПоЗарплате) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперацияПоЗарплате,
	|	
	|	МИНИМУМ(Заявка.Контрагент) КАК Контрагент,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.Контрагент) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	
	|	МИНИМУМ(Заявка.ПодотчетноеЛицо) КАК ПодотчетноеЛицо,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.ПодотчетноеЛицо) > 1
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияПодотчетноеЛицо,
	|	
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|		ВЫБОР КОГДА Заявка.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА Заявка.Касса
	|		КОНЕЦ) > 1
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКасса,
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|		ТОГДА Заявка.Касса
	|	КОНЕЦ) КАК Касса,
	|	
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|		ВЫБОР КОГДА Заявка.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА Заявка.БанковскийСчет
	|		КОНЕЦ) > 1
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияБанковскийСчет,
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|		ТОГДА Заявка.БанковскийСчет
	|	КОНЕЦ) КАК БанковскийСчет,
	|	
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.Подразделение) > 1 ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ИНАЧЕ МИНИМУМ(Заявка.Подразделение)
	|	КОНЕЦ КАК Подразделение,
	|	
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.БанковскийСчетКонтрагента) > 1 ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|		ИНАЧЕ МИНИМУМ(Заявка.БанковскийСчетКонтрагента)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.СтатьяДвиженияДенежныхСредств) > 1 ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|		ИНАЧЕ МИНИМУМ(Заявка.СтатьяДвиженияДенежныхСредств)
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заявка.СтатьяАктивовПассивов) > 1 ТОГДА
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)
	|		ИНАЧЕ МИНИМУМ(Заявка.СтатьяАктивовПассивов)
	|	КОНЕЦ КАК СтатьяАктивовПассивов,
	|	
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	|		ТОГДА Заявка.КассаПолучатель
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ) КАК КассаПолучатель,
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	|		ТОГДА Заявка.БанковскийСчетПолучатель
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ) КАК БанковскийСчетПолучатель,
	|	
	|	МИНИМУМ(Заявка.ВалютаКонвертации) КАК ВалютаКонвертации,
	|	МИНИМУМ(Заявка.КурсКонвертации) КАК КурсКонвертации,
	|	
	|	МИНИМУМ(ВЫБОР КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ПеречислениеВБюджет,
	|	
	|	МИНИМУМ(Заявка.АналитикаАктивовПассивов) КАК АналитикаАктивовПассивов,
	|	
	|	МИНИМУМ(Заявка.Контрагент.Наименование) КАК КонтрагентНаименование,
	|	МИНИМУМ(Заявка.Контрагент.НаименованиеПолное) КАК КонтрагентНаименованиеПолное,
	|	МИНИМУМ(Заявка.ПодотчетноеЛицо.Наименование) КАК ПодотчетноеЛицоНаименование
	|	
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|;
	|
	|//////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспределениеОплаты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ГрафикПлатежей.БанковскийСчетКасса,
	|	ГрафикПлатежей.ДатаПлатежа,
	|	СУММА(ГрафикПлатежей.Сумма) КАК Сумма
	|ИЗ
	|	РегистрСведений.ГрафикПлатежей КАК ГрафикПлатежей
	|ГДЕ
	|	ГрафикПлатежей.ОбъектОплаты В(&МассивСсылок)
	|	И ГрафикПлатежей.ПоступлениеСписание = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияДенежныхСредств.Списание)
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПлатежей.БанковскийСчетКасса,
	|	ГрафикПлатежей.ДатаПлатежа
	|;
	|
	|///////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СообщитьОбОшибкахФормированияДанныхЗаполненияОплаты(ВыборкаРеквизитыШапки)
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных заявок на расходование денежных средств отличается поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияФормаОплаты Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Форма оплаты'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Хозяйственная операция'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперацияПоЗарплате Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Хозяйственная операция по зарплате'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаОплаты Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПодотчетноеЛицо Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Подотчетное лицо'")),,,, Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента) Экспорт
	
	Возврат ДенежныеСредстваСервер.ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента);
	
КонецФункции

#КонецОбласти

#Область НалогообложениеНДС

// Устанавливает признак совпдадения обекта расчетов с документом в таблице и заполняет налогообложение строки
//
// Параметры:
// 	Параметры - Структура:
//		* Ссылка - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств,
//			ДокументСсылка.ПриходныйКассовыйОрдер,
//			ДокументСсылка.РасходныйКассовыйОрдер,
//			ДокументСсылка.СписаниеБезналичныхДенежныхСредств,
//			ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств,
//			ДокументСсылка.ОперацияПоПлатежнойКарте - Ссылка на график исполнения.
//		* НалогообложениеНСДПоумолчанию - ПеречислениеСсылка.ТипыНалогообложенияНДС - Тип налогообложения, определенный для текущего документа;
//		* ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчтетов.
//
// Возвращаемое значение:
// 	Структура - Новые значения строки:
//		* СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС по НалогообложениюНДС;
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Тип налогобложения для строки;
//		* ОбъектРасчетовСовпадаетСДокументом - Булево - Признак совпадения объекта расчетов с документом.
//
Функция ЗаполнитьРеквизитыДляНДСВСтроке(Параметры) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НалогообложениеНДС", Неопределено);
	Результат.Вставить("ОбъектРасчетовСовпадаетСДокументом", Ложь);
	
	Если ЗначениеЗаполнено(Параметры.Договор) Тогда
		НалогообложениеПоДоговору = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Договор, "НалогообложениеНДС");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОбъектРасчетов)
				И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ОбъектРасчетов, "Объект")= Параметры.Ссылка Тогда
				
			Результат.НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ОбъектРасчетов, "НалогообложениеНДС");
			Если НЕ ЗначениеЗаполнено(Результат.НалогообложениеНДС) Тогда
				Результат.НалогообложениеНДС = НалогообложениеПоДоговору;
			КонецЕсли;
			Результат.ОбъектРасчетовСовпадаетСДокументом = Ложь;
			
	Иначе
			
			Результат.НалогообложениеНДС = Параметры.НалогообложениеНСДПоумолчанию;
			Результат.ОбъектРасчетовСовпадаетСДокументом = Истина;
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти