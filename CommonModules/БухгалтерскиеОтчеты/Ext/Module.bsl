////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПредопределенныеСпискиЭлементов


// Определяет значения по умолчанию, общие для всех отчетов.
//
// Возвращаемое значение:
//  Структура - базовые значения: НачалоПериода, КонецПериода, Организация.
//
Функция БазовыеРеквизитыЗначенияПоУмолчанию() Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("НачалоПериода", '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("КонецПериода",  '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("Организация",   Справочники.Организации.ПустаяСсылка());
	
	ЗначенияПоУмолчанию.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	ЗначенияПоУмолчанию.КонецПериода  = КонецМесяца(ЗначенияПоУмолчанию.НачалоПериода);
	ЗначенияПоУмолчанию.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Получает из менеджера отчета сведения о свойствах отчета - манифест, декларирующий поддержанные в нем возможности подсистемы,
// включая реализованный программный интерфейс.
// Для проверки свойств рекомендуется использовать ЗначениеПараметраИсполненияОтчета.
//
// Параметры:
//  ИмяОтчета	 - Строка - имя отчета.
// 
// Возвращаемое значение:
//  Структура - может содержать свойства, значения которых проверяются в подсистеме.
//  Неопределено - отчет не поддерживает программный интерфейс подсистемы.
//
Функция ПараметрыИсполненияОтчета(ИмяОтчета) Экспорт
	
	Попытка
		Возврат Отчеты[ИмяОтчета].ПолучитьПараметрыИсполненияОтчета();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Позволяет проверить наличие в программном интерфейсе отчета наличие поддержки того или иного элемента.
//
// Параметры:
//  ОписаниеОтчета		 - Строка - Имя отчета.
//                       - Структура - Параметры исполнения (манифест) отчета.
//  ИмяСвойства			 - Строка - имя проверямой возможности.
//  ЗначениеПоУмолчанию	 - Булево - значение по-умолчанию; будет возвращено, если манифест отчета не содержит запрошенного свойства.
// 
// Возвращаемое значение:
//  Булево - значение свойства.
//
Функция ЗначениеПараметраИсполненияОтчета(ОписаниеОтчета, ИмяСвойства, ЗначениеПоУмолчанию = Ложь) Экспорт
	
	Если ТипЗнч(ОписаниеОтчета) = Тип("Строка") Тогда
		Манифест = ПараметрыИсполненияОтчета(ОписаниеОтчета);
	Иначе
		Манифест = ОписаниеОтчета;
	КонецЕсли;
	
	Значение = ЗначениеПоУмолчанию;
	
	Если Манифест <> Неопределено И Манифест.Свойство(ИмяСвойства) Тогда
		Значение = Манифест[ИмяСвойства];
	КонецЕсли;
	
	Возврат Значение;
		
КонецФункции

// Проверяет нужен ли для переданного типа сложный подбор.
//
// Параметры:
//	ТипЭлемента - Тип - Тип, который нужно проверить.
// Возвращаемое значение:
//	Булево - Истина если нужна сложная обработка подбора, ложь - в противном случае.
//
Функция ЭтоТипЭлементаСоСложнымПодбором(ТипЭлемента) Экспорт
	
	СложныйПодбор = Ложь;
	Возврат СложныйПодбор;
	
КонецФункции

// В отчете "Карточка счета" группировки не задаются пользователем, а явно заданы в коде.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонку "Поле", где перечислены группировки отчета.
//
Функция ГруппировкиКарточкиСчета() Экспорт
	
	ГруппировкиОтчета = Новый ТаблицаЗначений;
	ГруппировкиОтчета.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
	ГруппировкаОтчета.Поле = "СубконтоДт1";
	ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
	ГруппировкаОтчета.Поле = "СубконтоДт2";
	ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
	ГруппировкаОтчета.Поле = "СубконтоДт3";
	ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
	ГруппировкаОтчета.Поле = "СубконтоКт1";
	ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
	ГруппировкаОтчета.Поле = "СубконтоКт2";
	ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
	ГруппировкаОтчета.Поле = "СубконтоКт3";
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
		ГруппировкаОтчета.Поле = "ПодразделениеДт";
		ГруппировкаОтчета = ГруппировкиОтчета.Добавить();
		ГруппировкаОтчета.Поле = "ПодразделениеКт";
	КонецЕсли;
	
	Возврат ГруппировкиОтчета;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеТекстаСКД

// Возвращает строковое представление уникального идентификатора ссылки. Используется при выводе УИДа ссылки в СКД.
//
// Параметры:
//   Ссылка - СправочникСсылка.* - Ссылка на элемент справочника.
//
// Возвращаемое значение:
//	Строка - Строковое представление уникального идентификатора.
//
Функция ПолучитьУИДСсылкиСтрокой(Ссылка) Экспорт
	Возврат Строка(Ссылка.УникальныйИдентификатор());
КонецФункции

// Устанавливает свойства связанных наборов данных для стандартных бухгалтерских отчетов.
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	ИмяНабора - Строка - Имя связанного набора.
//	ПараметрыПоляВладельца - Структура - Содержит ключ:
//		* ИндексСубконто - Число - Номер субконто.
//		* ЗаголовокСубконто - Строка - Название вида субконто.
//	ИмяПоляПрефикс - Строка - Префикс для имени поля.
//
Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = ИмяПоляПрефикс + "1";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;

				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
				
				БухгалтерскиеОтчетыПереопределяемый.ОбработатьПолеНабораДанныхСвязаннойИнформации(ПолеНабора,
							Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс);
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область НастройкиОтчета


// Выполняет отложенную инициализацию компоновщика настроек при загрузке пользовательских настроек.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма отчета
//  Настройки			 - ПользовательскиеНастройкиКомпоновкиДанных - загружаемые настройки
//  ИмяВариантаНастроек	 - Строка - Имя варианта настроек.
//                         Допустимо передавать пустую строку для основного варианта.
//
Процедура ИнициализироватьКомпоновщикНастроекПриЗагрузкеПользовательскихНастроек(Форма, Настройки, ИмяВариантаНастроек = "") Экспорт
	
	Если БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, Форма.УникальныйИдентификатор);
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ОрганизацияИзменилась = БухгалтерскиеОтчетыКлиентСервер.ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
		БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась, ИмяВариантаНастроек);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отложенную инициализацию компоновщика настроек при формировании отчета.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма отчета
//  ИмяВариантаНастроек	 - Строка - Имя варианта настроек.
//                         Допустимо передавать пустую строку для основного варианта.
//
Процедура ИнициализироватьКомпоновщикНастроекПриФормированииОтчета(Форма, ИмяВариантаНастроек = "") Экспорт
	
	Если БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИзменилась = БухгалтерскиеОтчетыКлиентСервер.ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
	// Выше убедились, что отложенная инициализация используется, поэтому ОрганизацияИзменилась отлична от Неопределено.
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась, ИмяВариантаНастроек);
	
КонецПроцедуры

// Устанавливает имя схемы компоновки данных, которую должен использовать отчет с текущими настройками.
// Если текущая схема компоновки изменилась, сбрасывает признак инициализации компоновщика, чтобы при формировании
// отчета была выполнена повторная инициализация компоновщика с новой схемой.
// Если отчет не использует несколько рабочих схем компоновки - никаких действий не выполняется.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура УстановитьТекущуюСхемуКомпоновкиДанныхОтчета(Форма) Экспорт
	
	Если Не БухгалтерскиеОтчетыКлиентСервер.ОтчетПоддерживаетНесколькоСхемКомпоновкиДанных(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// Схема компоновки данных может поменяться при изменении реквизитов отчета.
	// Состав реквизитов, влияющих на выбор схемы компоновки, определяется программным интерфейсом конкретного отчета.
	
	ИмяОтчета = ИмяОтчета(Форма);
	
	ИмяАктуальнойсхемы = ИмяСхемыКомпоновкиДанныхОтчета(Форма.Отчет, ИмяОтчета);
	
	Если ИмяАктуальнойСхемы <> Форма.Отчет.ТекущаяСхемаКомпоновкиДанных Тогда
		Форма.Отчет.ТекущаяСхемаКомпоновкиДанных = ИмяАктуальнойСхемы;
		Форма.КомпоновщикИнициализирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя схемы компоновки данных, которую необходимо использовать в данном экземпляре отчета.
// Используется для отчетов, имеющих рабочих несколько схем. Необходимо вызывать до инициализации компоновщика.
//
// Отчет, поддерживающий использование нескольких схем, должен удовлетворять требованиям:
//  * иметь реквизит ТекущаяСхемаКомпоновкиДанных с типом Строка(80);
//  * содержать в программном интерфейсе функцию ТекущаяСхемаКомпоновкиДанных, принимающую единственный параметр
//    с типом Структура; в этот параметр передаются данные, влияющие на выбор схемы компоновки;
//  * содержать в программном интерфейсе конструктор НовыеПараметрыВыбораСхемыКомпоновкиДанных, формирующий структуру
//    параметров, влияющих на выбор схемы компоновки;
//
// Параметры:
//  КонтекстОтчета - ДанныеФормыСтруктура, Структура - необходимые сведения для выбора схемы компоновки данных.
//  ИмяОтчета      - Строка - имя отчета в метаданных.
//
// Возвращаемое значение:
//   Строка - имя используемой схемы компоновки данных.
//
Функция ИмяСхемыКомпоновкиДанныхОтчета(КонтекстОтчета, ИмяОтчета) Экспорт
	
	Если Не ОтчетПоддерживаетНесколькоСхемКомпоновкиДанных(ИмяОтчета) Тогда
		Возврат ИмяСхемыКомпоновкиДанныхПоУмолчанию();
	КонецЕсли;
	
	МенеджерОтчета = Отчеты[ИмяОтчета];
	
	ПараметрыВыбораСхемы = МенеджерОтчета.НовыеПараметрыВыбораСхемыКомпоновкиДанных();
	ЗаполнитьЗначенияСвойств(ПараметрыВыбораСхемы, КонтекстОтчета);
	
	Возврат МенеджерОтчета.ТекущаяСхемаКомпоновкиДанных(ПараметрыВыбораСхемы);
	
КонецФункции

// Проверяет применение нескольких рабочих схем компоновки данных в отчете.
// Критерий проверки - наличие реквизита ТекущаяСхемаКомпоновкиДанных у отчета.
//
// Параметры:
//  ИмяОтчета - Строка - имя отчета, заданное в конфигурации.
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует несколько рабочих схем компоновки данных.
//
Функция ОтчетПоддерживаетНесколькоСхемКомпоновкиДанных(ИмяОтчета) Экспорт
	
	МетаданныеОтчета = Метаданные.Отчеты[ИмяОтчета];
	
	Возврат МетаданныеОтчета.Реквизиты.Найти("ТекущаяСхемаКомпоновкиДанных") <> Неопределено;
	
КонецФункции


// Возвращает искомые значения из данных расшифровки.
//
// Параметры:
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки из СКД.
//  СоответствиеПолей - Соответствие - Ключи соответствуют именам искомых в данных расшифровки полей
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор элемента данных расшифровки
//                в иерархии которого нужно осуществлять поиск.
//
// Возвращаемое значение:
//  Соответствие - Ключи соответствуют именам запрошенных полей.
//
Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СоответствиеПолей, Расшифровка) Экспорт
	
	СоответствиеДанных = Новый Соответствие();
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				СоответствиеДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеДанных;

КонецФункции

// Устанавливает порядок сортировки из схемы компоновки данных.
//
// Параметры:
//  Схема - СхемаКомпоновкиДанных - Схема компоновки данных
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек
//
Процедура УстановитьПорядокСортировкиИзСхемы(Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
	Для каждого ЭлементПорядкаСхемы Из Схема.НастройкиПоУмолчанию.Порядок.Элементы Цикл
		ЭлементПорядкаКомпоновщика = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементПорядкаКомпоновщика, ЭлементПорядкаСхемы);
	КонецЦикла;
	
КонецПроцедуры

// Ищет в структуре отчета (структуре настроек) группировку по имени элемента.
//
// Параметры:
//  Структура    - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - набор группировок данного уровня настроек.
//  Имя          - Строка - имя искомого элемента структуры отчета.
//
// Возвращаемое значение:
//   ГруппировкаКомпоновкиДанных, ТаблицаКомпоновкиДанных - искомый элемент настроек.
//
Функция НайтиПоИмени(Структура, Имя) Экспорт
	Перем Группировка;
	
	Для каждого Элемент Из Структура Цикл

		Если Элемент.Имя = Имя Тогда
			Группировка = Элемент;
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл

			Если ТипЗнч(Поле) <> Тип("АвтоПолеГруппировкиКомпоновкиДанных")
			   И Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
				Группировка = Элемент;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
		Если Группировка = Неопределено
		   И Элемент.Структура.Количество() > 0 Тогда
			Группировка = НайтиПоИмени(Элемент.Структура, Имя);
		КонецЕсли;
		
		Если Группировка <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Группировка;
	
КонецФункции

#КонецОбласти 

#Область Оформление

// Определяет имя отчета (объекта метаданных), отображаемого в форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ИмяОтчета(Форма) Экспорт
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ИмяОтчетаПоИмениФормы(Форма);
	Если ИмяОтчета <> Неопределено Тогда
		Возврат ИмяОтчета;
	КонецЕсли;
	
	// Основной реквизит формы должен называться Отчет
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Возврат ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

// Устанавливает в настройках отчета заголовки групп колонок с ресурсами.
//
// Группы колонок должны быть помещены в именованные наборы колонок с уровнем группировки "детальные записи".
//
// Другими словами, настройки схемы компоновки должны быть выполнены так:
// - колонки кросс-таблицы содержат на верхнем уровне несколько наборов уровня группировки "Детальные записи";
// - каждый такой набор:
// -- соответствует группе колонок, которые в отчете объединены дополнительной шапкой;
// -- имеет имя;
// -- в выбранных полях содержит одну группу верхнего уровня;
// -- в составе группы содержит несколько выбранных полей (ресурсов), входящих в эту группу.
//
// Параметры:
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - настраиваемый объект.
//  ТекстыЗаголовков	 - Структура - 
//                         * Ключ - имя набора колонок, заданное в схеме;
//                         * Значение - Строка - заголовок колонки.
//
Процедура УстановитьЗаголовкиГруппКолонок(КомпоновщикНастроек, ТекстыЗаголовков) Экспорт
	
	Для Каждого Таблица Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ТипЗнч(Таблица) <> Тип("ТаблицаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ГруппаКолонок Из Таблица.Колонки Цикл
			
			Если ПустаяСтрока(ГруппаКолонок.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекстыЗаголовков.Свойство(ГруппаКолонок.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Поле Из ГруппаКолонок.Выбор.Элементы Цикл
				
				Если ТипЗнч(Поле) <> Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не Поле.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Поле.Заголовок = ТекстыЗаголовков[ГруппаКолонок.Имя];
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает заголовок, помещающийся без переноса при установленной в процедуре УстановитьШиринуПоказателей() ширине.
//
// Возвращаемое значение:
//	Строка - Текст заголовка для группы "Показатели".
//
Функция ЗаголовокГруппыПоказателей() Экспорт
	
	Возврат НСтр("ru = 'Показа-" + Символы.ПС + "тели'");
	
КонецФункции

// Устанавливает минимальную ширину полей с показателями,
// при которой умещается заголовок, заданный в функции ЗаголовокГруппыПоказателей().
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	НаборПоказателей - Массив - Содержит имена показателей отчета.
//
Процедура УстановитьМинимальнуюШиринуПоказателей(Схема, НаборПоказателей) Экспорт
	
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;
	
	Для Каждого Показатель Из НаборПоказателей Цикл
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "НачальныйОстаток"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "Оборот"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "КонечныйОстаток"));
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление для поля ТипГруппировки табличной части Группировка настроек отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура УстановитьУсловноеОформлениеТипГруппировки(Форма) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;


	// Тип группировки "Без групп"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без групп'"));


	// Тип группировки "С группами"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'С группами'"));


	// Тип группировки "Только группы"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Только группы'"));

КонецПроцедуры

// Удаляем из переданной коллекции настроек условного оформления автоотступ.
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Коллекция условного оформления.
//
Процедура УдалитьАвтоотступИзУсловногоОформления(УсловноеОформление) Экспорт

	// Удалим автоотступ из условного оформления.
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		ПараметрОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление, "Автоотступ");
		Если ПараметрОформления <> Неопределено И ПараметрОформления.Использование = Истина Тогда
			ЭлементыДляУдаления.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из ЭлементыДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

// Настраивает кнопки командной панели.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - на командной панели которой есть кнопка ПредварительныйПросмотр.
//
Процедура УстановитьАктивностьКнопокКоманднойПанели(Форма) Экспорт

	Если Не ПравоДоступа("Вывод", Метаданные) Тогда
		// Делает неактивной кнопку "Сохранить", если пользователю не разрешён вывод.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "Сохранить", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "СохранитьВсеДействия", "Доступность", Ложь);

	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		// Скрывает кнопку "Предварительный просмотр" при работе через браузер, т.к. она работает также как "Печать".
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПредварительныйПросмотр", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПредварительныйПросмотрВсеДействия", "Видимость", Ложь);

	КонецЕсли;	

КонецПроцедуры


#КонецОбласти

#Область Вспомогательные

// Отчет открывается в особом режиме для передачи результата в пакет отчетности. Для стандартных бухгалтерских отчетов БП.
//
// Форма         - ФормаКлиентскогоПриложения - открываемый отчет.
//
Процедура ИнициализироватьРежимВыгрузкиБП(Форма) Экспорт

	Если Не Форма.Параметры.Свойство("РежимВыгрузки") Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Выгрузить", "Видимость",                 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Выгрузить", "КнопкаПоУмолчанию",         Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Выгрузить", "АктивизироватьПоУмолчанию", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыгрузитьВсеДействия", "Видимость", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыгрузитьПослеНастройки", "Видимость", Истина);

	НаборНастроек = Неопределено;
	Если Форма.Параметры.Свойство("ПользовательскиеНастройки", НаборНастроек) И НаборНастроек <> Неопределено Тогда
		
		Форма.ПараметрыРежимаВыгрузки = ЭталонныеПараметры(НаборНастроек.ДополнительныеСвойства);
		
		Для Каждого ЭталонныйПараметр Из НаборНастроек.Элементы Цикл
			
			Если ТипЗнч(ЭталонныйПараметр) = Тип("ОтборКомпоновкиДанных") Тогда
				Форма.ПараметрыРежимаВыгрузки.Вставить("Отбор", ЭталонныйПараметр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Форма.Параметры.Свойство("ПараметрыРежимаВыгрузки", НаборНастроек) И Форма.Параметры.Свойство("ИдентификаторОтчета") Тогда
		
		Если ПустаяСтрока(НаборНастроек.ВидОтчета) Тогда
			НаборНастроек.ВидОтчета = Форма.Параметры.ИдентификаторОтчета;
		КонецЕсли;
		
		ДополнительныеСвойства = Новый Структура("ПараметрыРежимаВыгрузки", НаборНастроек);
		ЗначениеВлияющегоПараметра = Неопределено;
		ВлияющиеПараметры = Метаданные.Отчеты[Форма.Параметры.ИдентификаторОтчета].Реквизиты;
		Для Каждого ЭталонныйПараметр Из ВлияющиеПараметры Цикл
			Если Форма.Параметры.Свойство(ЭталонныйПараметр.Имя, ЗначениеВлияющегоПараметра) Тогда
				
				Если ТипЗнч(ЗначениеВлияющегоПараметра) = Тип("СписокЗначений")
				   И Не ЗначениеЗаполнено(ЗначениеВлияющегоПараметра) Тогда
					// Список не является частью настроек отчета, определяемых банками в сервисе.
					Продолжить;
				КонецЕсли;
				
				ДополнительныеСвойства.Вставить(ЭталонныйПараметр.Имя, ЗначениеВлияющегоПараметра);
				
			КонецЕсли;
		КонецЦикла;
		
		Форма.ПараметрыРежимаВыгрузки = ЭталонныеПараметры(ДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

// Отчет открывается в особом режиме для передачи результата в пакет отчетности. Для отчетов подсистемы ВариантыОтчетов из БСП.
//
// Форма         - ФормаКлиентскогоПриложения - открываемый отчет.
//
Процедура ИнициализироватьРежимВыгрузкиБСП(Форма) Экспорт

	Если Не Форма.Параметры.Свойство("РежимВыгрузки") Тогда
		Возврат;
	КонецЕсли;

	КнопкаВыгрузить = Форма.Команды.Добавить("Выгрузить");
	КнопкаВыгрузить.Действие = "БухгалтерскиеОтчетыКлиент.ОбработчикКомандыВыгрузитьБСП";
	КнопкаВыгрузить.Подсказка = НСтр("ru = 'Выгрузить'");
	ОтчетыСервер.ВывестиКоманду(Форма, КнопкаВыгрузить, "Главное", Истина);
	Форма.Элементы.Выгрузить.КнопкаПоУмолчанию = Истина;
	
	НастройкиОтчета = Форма.НастройкиОтчета;
	НастройкиОтчета.РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина;
	НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	НастройкиОтчета.Вставить("РежимВыгрузки", Истина);
	
	ПараметрыОтчета = Форма.Параметры;
	НастройкиОтчета.ФормироватьСразу = ПараметрыОтчета.РежимРасшифровки;
	ДопСвойства = ПараметрыОтчета.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("ПараметрыРежимаВыгрузки") Тогда
		
		НастройкиОтчета.Вставить("ПараметрыРежимаВыгрузки", ДопСвойства.ПараметрыРежимаВыгрузки);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеМинимальнойШириныПоля(Поле)
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 8);
	
КонецПроцедуры

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции


Функция ИмяСхемыКомпоновкиДанныхПоУмолчанию()
	
	Возврат "СхемаКомпоновкиДанных";
	
КонецФункции

// Выделяем из списка параметров, на основании которых должен формироваться отчет, те, которые определяют выводимые в нем данные.
//
// Параметры:
//  ПараметрыКомпоновкиОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета() в модуле менеджера отчета.
//
// Возвращаемое значение:
//   Структура   - параметры, идентифицирующие отчет и определяющие его данные.
//
Функция ЭталонныеПараметры(ПараметрыКомпоновкиОтчета)
	
	ВспомогательныеПараметры = БухгалтерскиеОтчетыКлиентСервер.ПараметрыНеВлияющиеНаДанныеОтчета();
	
	ЭталонныеНастройки = Новый Структура;
	ПараметрыРежимаВыгрузки = Новый Структура("ЭталонныеНастройки", ЭталонныеНастройки);
	
	Для Каждого ЭталонныйПараметр Из ПараметрыКомпоновкиОтчета Цикл
		
		Если ЭталонныйПараметр.Ключ = "ПараметрыРежимаВыгрузки" Тогда
			
			Для Каждого ПараметрИдентификации Из ЭталонныйПараметр.Значение Цикл
				ПараметрыРежимаВыгрузки.Вставить(ПараметрИдентификации.Ключ, ПараметрИдентификации.Значение);
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВспомогательныеПараметры, ЭталонныйПараметр.Ключ, Ложь) <> Истина Тогда
			
			ЭталонныеНастройки.Вставить(ЭталонныйПараметр.Ключ, ЭталонныйПараметр.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыРежимаВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаАктуальности

// Выполняет запуск фонового задания по получению актуальности данных закрытия месяца и последующую обработку результата.
//
//	Параметры:
//		ПараметрыПроверки - Структура - параметры выполнения фонового задания, см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//		ДанныеАктуализации - Структура - данные актуализации отчета, служит для последующего изменения данных формы отчета:
//			* ИдентификаторЗаданияАктуализации - Строка - идентификатор выполняемого задания актуализации;
//			* АдресХранилищаАктуализации - Строка - адрес хранения данных выполненного задания актуализации отчета.
//
Процедура ПроверитьАктуальность(ПараметрыПроверки, ДанныеАктуализации) Экспорт
	
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца)
		И ПравоДоступа("Использование", Метаданные.Обработки.ОперацииЗакрытияМесяца))
		ИЛИ ПолучитьФункциональнуюОпцию("НеИспользоватьПроверкуЗаданийЗакрытияМесяцаВОтчетахРегл") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАктуализации.ИдентификаторЗаданияАктуализации) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ДанныеАктуализации.ИдентификаторЗаданияАктуализации);
		Если ФоновоеЗадание <> Неопределено И ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ФоновоеЗадание.Отменить();
			ДанныеАктуализации.ИдентификаторЗаданияАктуализации = "";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыПроверки.УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка актуальности данных'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчеты.ОпределитьСостояниеЭтаповРасчетаЗакрытияМесяца",
		ПараметрыПроверки,
		ПараметрыВыполнения);
	
	ОбработатьРезультатВыполненияАктуализации(РезультатВыполнения, ДанныеАктуализации);
	
КонецПроцедуры

// В зависимости от результата выполнения фонового задания, изменяет данные актуализации отчета.
//
//	Параметры:
//		РезультатВыполнения - Структура - см. возвращаемое значение ДлительныеОперации.ВыполнитьВФоне();
//		ДанныеАктуализации - Структура - данные актуализации отчета, служит для последующего изменения данных формы отчета:
//			* ИдентификаторЗаданияАктуализации - Строка - идентификатор выполняемого задания актуализации;
//			* АдресХранилищаАктуализации - Строка - адрес хранения данных выполненного задания актуализации отчета.
//
Процедура ОбработатьРезультатВыполненияАктуализации(РезультатВыполнения, ДанныеАктуализации) Экспорт
	
	Если Не РезультатВыполнения.Свойство("АдресРезультата") И ЗначениеЗаполнено(ДанныеАктуализации.АдресХранилищаАктуализации) Тогда
		РезультатВыполнения.Вставить("АдресРезультата", ДанныеАктуализации.АдресХранилищаАктуализации);
	КонецЕсли;
	
	Если РезультатВыполнения.Статус = "Выполняется" И РезультатВыполнения.Свойство("ИдентификаторЗадания") Тогда
		ДанныеАктуализации.ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДанныеАктуализации.АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		ДанныеАктуализации.ИдентификаторЗаданияАктуализации = "";
		ДанныеАктуализации.АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	ИначеЕсли РезультатВыполнения.Статус = "Ошибка" Тогда
		ДанныеАктуализации.ИдентификаторЗаданияАктуализации = "";
		ДанныеАктуализации.АдресХранилищаАктуализации = ПоместитьВоВременноеХранилище(РезультатВыполнения, Новый УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

// Для определения статуса выполнения регламентных операций в фоновом задании.
//
// Параметры:
//  Параметры - Структура - см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//  АдресХранилища - Строка - адрес временного хранилища, куда будет помещен результат определения состояний.
//
Процедура ОпределитьСостояниеЭтаповРасчетаЗакрытияМесяца(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаАктуальности", КонецМесяца(Параметры.КонецПериода));
	Результат.Вставить("СостоянияЭтапов", Новый Соответствие);
	Результат.Вставить("Состояние", "НеТребуется");
	
	Если РасчетЗакрытияМесяцаВыполняется(Параметры) Тогда
		Результат.Состояние = "Выполняется";
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
		
	Результат.СостоянияЭтапов = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
		Параметры.ЭтапыЗакрытияМесяца, Результат.ДатаАктуальности, Параметры.СписокОрганизаций);
		
	Для каждого Этап Из Параметры.ЭтапыЗакрытияМесяца Цикл
		
		Если Результат.СостоянияЭтапов.Получить(Этап) = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
	 		Или Результат.СостоянияЭтапов.Получить(Этап) = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			Или Результат.СостоянияЭтапов.Получить(Этап) = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
			
			Результат.Состояние = "НеВыполнено";
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Определяет факт выполнения расчета закрытия месяца
//
//	Параметры:
//		ПараметрыПроверки - Структура - параметры выполнения фонового задания, см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//
//	Возвращаемое значение:
//		Булево - Истина, если в базе есть активные задания закрытия месяца.
//
Функция РасчетЗакрытияМесяцаВыполняется(ПараметрыПроверки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыполнениеОперацийЗакрытияМесяца.Организация КАК Организация,
	|	ВыполнениеОперацийЗакрытияМесяца.ПериодРасчета КАК ПериодРасчета,
	|	ВыполнениеОперацийЗакрытияМесяца.Операция КАК Операция,
	|	ВыполнениеОперацийЗакрытияМесяца.ДатаНачала КАК ДатаНачала,
	|	ВыполнениеОперацийЗакрытияМесяца.ДатаОкончания КАК ДатаОкончания,
	|	ВыполнениеОперацийЗакрытияМесяца.БылиОшибки КАК БылиОшибки,
	|	ВыполнениеОперацийЗакрытияМесяца.ИдентификаторРасчета КАК ИдентификаторРасчета,
	|	ВыполнениеОперацийЗакрытияМесяца.ИнформацияОЗапускеРасчета КАК ИнформацияОЗапускеРасчета
	|ИЗ
	|	РегистрСведений.ВыполнениеОперацийЗакрытияМесяца КАК ВыполнениеОперацийЗакрытияМесяца
	|ГДЕ
	|	ВыполнениеОперацийЗакрытияМесяца.Организация В(&СписокОрганизаций)
	|	И (ВыполнениеОперацийЗакрытияМесяца.Операция В(&ЭтапыЗакрытияМесяца)
	|	ИЛИ ВыполнениеОперацийЗакрытияМесяца.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка))
	|	И ВыполнениеОперацийЗакрытияМесяца.РасчетВыполняется
	|	И ВыполнениеОперацийЗакрытияМесяца.ПериодРасчета МЕЖДУ &НачалоПериодаРасчета И &КонецПериодаРасчета";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыПроверки.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЭтапыЗакрытияМесяца", ПараметрыПроверки.ЭтапыЗакрытияМесяца);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", ПараметрыПроверки.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", ПараметрыПроверки.КонецПериода);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

