
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииУстановкиСтатусовДляМассиваДокументов

// Устанавливает статус для списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив документов
// 		НовыйСтатус - Строка - Имя нового статуса для документов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Число - Количество документов у которых был изменен статус.
//
// ВАЖНО. При использования процедуры для каждого типа документа из массива должны быть объявлены функции:
// В модуле менеджера документа:
// 		Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
// 		Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
// В модуле объекта документа:
// 		Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
//
Функция УстановитьСтатусДокументов(Знач МассивДокументов, Знач НовыйСтатус, Знач ДополнительныеПараметры=Неопределено) Экспорт
	
	// Получение шаблонов сообщений стандартных ошибок
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	ШаблонОшибкиНеПроведен        = НСтр("ru='Документ %Документ% не проведен. Невозможно изменить статус'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	// Получение исключаемых типов
	МассивИсключаемыхТипов = Новый Массив;
	Если ДополнительныеПараметры <> Неопределено 
		И ДополнительныеПараметры.Свойство("ИсключаемыеТипы") Тогда
		
		МассивИсключаемыхТипов = ДополнительныеПараметры.ИсключаемыеТипы;
		
	КонецЕсли;
	
	// Получение соответствие типов документов из массива документов разных типов
	СоответствиеТипов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивДокументов);
	
	КоличествоОбработанных = 0;
	Для Каждого СоставДокументов Из СоответствиеТипов Цикл
		
		// Пропуск документов исключаемого типа
		Если МассивИсключаемыхТипов.Найти(СоставДокументов.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение менеджера документов данного типа
		МетаДокумент       = Метаданные.НайтиПоТипу(СоставДокументов.Ключ);
		МенеджерДокументов = Документы[МетаДокумент.Имя];
		
		// Получение массива ссылок документов данного типа
		МассивСсылок = СоставДокументов.Значение;
		
		// Формирование запроса
		Запрос = МенеджерДокументов.СформироватьЗапросПроверкиПриСменеСтатуса(МассивСсылок, НовыйСтатус, ДополнительныеПараметры);
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		// Цикл обхода выборки
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Универсальные проверки
			Если Выборка.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Не Выборка.Проведен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Выборка.СтатусСовпадает Тогда

				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;

			КонецЕсли;
			
			// Проверки уникальные для каждого из типов документов
			Если Не МенеджерДокументов.ПроверкаПередСменойСтатуса(Выборка, НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Установка статуса документа.'"),
					УровеньЖурналаРегистрации.Ошибка,
					МетаДокумент,
					Выборка.Ссылка,
					ТекстОшибки);
				
				Продолжить;
			КонецПопытки;
			
			// Получение объекта документа
			Объект = Выборка.Ссылка.ПолучитьОбъект(); //ДокументОбъект - 
			
			// Установка статуса документа
			Если Не Объект.УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Запись документа
			Попытка
				Объект.Записать(?(Выборка.ЗаписьПроведением, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Установка статуса документа.'"),
					УровеньЖурналаРегистрации.Ошибка,
					МетаДокумент,
					Выборка.Ссылка,
					ТекстОшибки);
				
			КонецПопытки
			
		КонецЦикла; // выборки документов данного типа
		
	КонецЦикла; // обхода соответствия типов
	
	Возврат КоличествоОбработанных;
	
КонецФункции // УстановитьСтатусДокументов()

#КонецОбласти

// Возвращает структуру, содержащую массив ссылок на документы, подлежащие пометке к удалению
// или снятию пометки с удаления, а также признак пометки на удаление документов.
//
// Параметры:
// 		ВыделенныеСтроки - Массив - массив документов динамического списка,
// 		ПутьКСсылке - Строка - имя реквизита ссылки документа.
//
// Возвращаемое значение:
// 		Структура - содержит массив ссылок на документы и признак пометки на удаление документов.
//
Функция СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, ПутьКСсылке = "") Экспорт
	
	Если Не ПустаяСтрока(ПутьКСсылке) Тогда
		МассивСсылок = Новый Массив;
		Для каждого Строка Из ВыделенныеСтроки Цикл
			МассивСсылок.Добавить(Строка[ПутьКСсылке]);
		КонецЦикла;
	Иначе
		МассивСсылок = ВыделенныеСтроки;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивСсылок", МассивСсылок);
	Результат.Вставить("ЕстьСтрокиПомеченныеНаУдаление", Ложь);
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивСсылок);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	&ИмяДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&Ссылки)
	|	И ТаблицаДокумента.ПометкаУдаления";	
	
	Запрос = Новый Запрос;
	МассивТекстовЗапросов = Новый Массив;
	Счетчик = 0;
	
	Для Каждого ТипСсылки Из СтруктураТипов Цикл
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяДокумента", ТипСсылки.Ключ); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылки", "&Ссылки" +  Формат(Счетчик,"ЧГ=0")); 
		
		Запрос.УстановитьПараметр("Ссылки" +  Формат(Счетчик,"ЧГ=0"), ТипСсылки.Значение);
		Счетчик = Счетчик + 1;
		
		МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, Разделитель);
	
	Результат.ЕстьСтрокиПомеченныеНаУдаление = Не Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

// Осуществляет пометку к удалению или снятие пометки с удаления у документов.
//
// Параметры:
// 		МассивСсылок - Массив - массив ссылок на документы,
// 		ПометитьНаУдаление - Булево - Необходимость установить пометку на удаление документа.
//
Процедура УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление) Экспорт
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			// Записать только те объекты, значение пометки удаления которых изменяется
			Если ПометитьНаУдаление
				И Не ДокументОбъект.ПометкаУдаления Тогда
				
				ДокументОбъект.ПометкаУдаления = Истина;
				
				Если ДокументОбъект.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
			ИначеЕсли Не ПометитьНаУдаление
				И ДокументОбъект.ПометкаУдаления Тогда
				
				ДокументОбъект.ПометкаУдаления = Ложь;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
		Исключение
			ТекстСообщения = ?(Не ПометитьНаУдаление
					И ДокументОбъект.ПометкаУдаления,
				НСтр("ru='Не удалось снять пометку удаления с документа: %Ссылка% по причине: %Причина%'"),
				НСтр("ru='Не удалось установить пометку удаления на документ: %Ссылка% по причине: %Причина%'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив ссылок документов динамического списка.
//
// Параметры:
// 	ВыделенныеСтроки - Массив из ДанныеФормыСтруктура - где:
// 		* Ссылка - ДокументСсылка -
//
// Возвращаемое значение:
// 	Массив Из ДокументСсылка - содержит массив ссылок на документы и признак пометки на удаление документов.
//
Функция СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

// Проверяет заполнение переданных объектов
//
// Параметры:
// 	ВыделенныеСтроки - Массив из ДанныеФормыСтруктура - где:
// 		* Ссылка - ДокументСсылка -
// 
// Возвращаемое значение:
// 	Структура - содержит:
// 		* МассивСсылок - Массив из ДокументСсылка -
//		* МожноПровести - Булево -
//		* ЕстьПомеченныеНаУдаление - Булево -
//
Функция СсылкиДокументовДляПроведения(ВыделенныеСтроки) Экспорт

	МассивСсылок = СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	МожноПровести = Истина;
	ЕстьПомеченныеНаУдаление = Ложь;
	Для каждого СсылкаНаОбъект Из МассивСсылок Цикл
		ДанныеОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		Если ДанныеОбъект.ПометкаУдаления Тогда
			ЕстьПомеченныеНаУдаление = Истина;
		Иначе
			МожноПровести = ДанныеОбъект.ПроверитьЗаполнение() И МожноПровести;
		КонецЕсли; 
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивСсылок", МассивСсылок);
	Результат.Вставить("МожноПровести", МожноПровести);
	Результат.Вставить("ЕстьПомеченныеНаУдаление", ЕстьПомеченныеНаУдаление);
	
	Возврат Результат;

КонецФункции

// Возвращает массив ссылок документов, проведение которых отменено.
//
// Параметры:
// 	МассивСсылок - Массив Из ДокументСсылка - массив ссылок документов.
//
// Возвращаемое значение:
// 	Массив Из ДокументСсылка - Массив ссылок на документы, проведение которых отменено.
//
Функция СсылкиРаспроведенныхДокументов(МассивСсылок) Экспорт
	
	НепроведенныеДокументы = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивСсылок);
	РаспроводимыеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСсылок, НепроведенныеДокументы);
	
	Для Каждого Ссылка Из РаспроводимыеДокументы Цикл
		ДокументОбъект = Ссылка.ПолучитьОбъект(); // ДокументОбъект - 
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
	Возврат РаспроводимыеДокументы;
	
КонецФункции

// Возвращает банковский счет организации, если он один в ИБ.
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчетаОрганизаций -
Функция БанковскийСчетОрганизацииПоУмолчанию() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();
	
КонецФункции

// Возвращает кассу организации, если она одна в ИБ.
//
// Возвращаемое значение:
// 	СправочникСсылка.Кассы -
Функция КассаОрганизацииПоУмолчанию() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
	
КонецФункции

// Возвращает вариант классификации по умолчанию.
//
// Возвращаемое значение:
// 	СправочникСсылка.ВариантыКлассификацииЗадолженности -
Функция ВариантКлассификацииЗадолженностиПоУмолчанию(ТолькоЕслиОдин = Ложь) Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ВариантКлассификацииЗадолженностиПоУмолчанию(ТолькоЕслиОдин);
	
КонецФункции

// Возвращает полное имя основной формы объекта.
//
// Параметры:
//  Ссылка	 - 	ЛюбаяСсылка - ссылка на объект. Например, ДокументСсылка или СправочникСсылка.
// 
// Возвращаемое значение:
//  Строка - полное имя основной формы объекта.
//
Функция ПолноеИмяФормыОбъекта(Ссылка) Экспорт
	
	ИмяФормы = "";
	ОбъектМетаданных = Ссылка.Метаданные();
	
	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ИмяФормы = ОбъектМетаданных.ПолноеИмя() + ".ФормаОбъекта";
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		ИмяФормы = ОбъектМетаданных.Формы.ФормаЭлемента.ПолноеИмя();
	КонецЕсли;
		
	Возврат ИмяФормы;
	
КонецФункции

// Проверяет статус фонового задания по указанному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор фонового задания.
// Возвращаемое значение: 
//  Структура - Содержит статусы проверяемого фонового задания.
Функция ПроверитьФоновоеЗадание(Знач ИдентификаторЗадания) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ОтмененоИлиНеНайдено", Ложь);
	Результат.Вставить("УспешноВыполнено", Ложь);
	Результат.Вставить("ЕщеВыполняется", Ложь);
	Результат.Вставить("ВыполненоСОшибками", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Начало", "");
	Результат.Вставить("Конец", "");
	
	Отбор = Новый Структура();
	Отбор.Вставить("УникальныйИдентификатор", ИдентификаторЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.ЕщеВыполняется = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.УспешноВыполнено = Истина;
		Результат.Начало = АктивныеЗадания[0].Начало;
		Результат.Конец = АктивныеЗадания[0].Конец;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ВыполненоСОшибками = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(АктивныеЗадания[0].ИнформацияОбОшибке);
		Результат.Начало = АктивныеЗадания[0].Начало;
		Результат.Конец = АктивныеЗадания[0].Конец;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - Строка - Ключ фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("УникальныйИдентификатор", ИдентификаторЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() = 0
		ИЛИ АктивныеЗадания[0].Состояние <> СостояниеФоновогоЗадания.Активно
	Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(АктивныеЗадания[0].УникальныйИдентификатор);
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Отмена выполнения фонового задания'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОбщегоНазначенияУТВызовСервера,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает значение функциональной опции по имени
//
// Параметры:
// 	Имя - Строка - Имя функциональной опции
// 
// Возвращаемое значение:
//	Произвольный - Значение функциональной опции
// 
Функция ЗначениеФункциональнойОпции(Имя) Экспорт
	Возврат ПолучитьФункциональнуюОпцию(Имя);	
КонецФункции

// Возвращает значение константы по имени
//
// Параметры:
// 	Имя - Строка - Имя константы
// 
// Возвращаемое значение:
//	Произвольный - Значение константы
// 
Функция ЗначениеКонстанты(Имя) Экспорт
	Возврат Константы[Имя].Получить();
КонецФункции

// Возвращает значение константы по имени
//
// Параметры:
// 	ИмяИлиИдентификаторДокумента - Строка -
// 					- СправочникСсылка.ИдентификаторыОбъектовМетаданных -
// 					- СправочникСсылка.ИдентификаторыОбъектовРасширений - Имя или идентификатор метаданных документа.
// 
// Возвращаемое значение:
//	Строка - Синоним документа
// 
Функция СинонимДокумента(ИмяИлиИдентификаторДокумента) Экспорт
	
	Результат = "";
	Если ТипЗнч(ИмяИлиИдентификаторДокумента) = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.Документы[ИмяИлиИдентификаторДокумента];
	ИначеЕсли ТипЗнч(ИмяИлиИдентификаторДокумента) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
		ИЛИ ТипЗнч(ИмяИлиИдентификаторДокумента) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИмяИлиИдентификаторДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеОбъекта) Тогда
		Результат = ОбъектМетаданных.ПредставлениеОбъекта;
	Иначе
		Результат = ОбъектМетаданных.Синоним;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того, что для пользователя установлен язык интерфейса
// соответствующий основному языку информационной базы.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОсновнойЯзык() Экспорт
	
	Возврат ОбщегоНазначения.ЭтоОсновнойЯзык();
	
КонецФункции

// Записать в журнал сообщить пользователю о результатах проведения.
// 
// Параметры:
//  ДанныеОНепроведенныхДокументах - см. ОбщегоНазначения.ПровестиДокументы
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка - Записать в журнал сообщить пользователю о результатах проведения
Функция ЗаписатьВЖурналСообщитьПользователюОРезультатахПроведения(ДанныеОНепроведенныхДокументах) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
	
	НепроведенныеДокументы = Новый Массив;
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ГруппаСобытий",НСтр("ru = 'Ошибка выполнения'"));
	
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		
		ПараметрыЖурнала.Вставить("Метаданные", ИнформацияОДокументе.Ссылка.Метаданные());
		ПараметрыЖурнала.Вставить("Данные", ИнформацияОДокументе.Ссылка);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки);
		
		ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала,
			УровеньЖурналаРегистрации.Ошибка,
			"",,
			ОписаниеОшибки);
		
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РеквизитыОбъекта

// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, "Код, Наименование, Родитель".
//            - Структура
//            - ФиксированнаяСтруктура - в качестве ключа передается
//                       псевдоним поля для возвращаемой структуры с результатом, а в качестве
//                       значения (опционально) фактическое имя поля в таблице.
//                       Если ключ задан, а значение не определено, то имя поля берется из ключа.
//                       Допускается указание имени поля через точку, но при этом параметр КодЯзыка для такого поля
//                       учитываться не будет.
//            - Массив
//            - ФиксированныйМассив - имена реквизитов в формате требований
//                       к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то все реквизиты вернутся со 
//                                значением Неопределено; если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу 
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита.
//
// Возвращаемое значение:
//  Структура - 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// Устарел.
// Возвращает значения реквизита, прочитанного из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  ИмяРеквизита       - Строка - имя получаемого реквизита.
//                                Допускается указание имени реквизита через точку, но при этом параметр КодЯзыка для
//                                такого реквизита учитываться не будет.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то возвращается Неопределено;
//                                если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита.
//
// Возвращаемое значение:
//  Произвольный - 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Устарел.
// Возвращает значения реквизитов, прочитанные из информационной базы для нескольких объектов.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  МассивСсылок - Массив
//         - ФиксированныйМассив - ссылки на объекты.
//                    Если массив пуст, то результатом будет пустое соответствие.
//  ИменаРеквизитов - Строка - имена реквизитов перечисленные через запятую, в формате требований к свойствам
//                       структуры. Например, "Код, Наименование, Родитель".
//            - Массив
//            - ФиксированныйМассив - имена реквизитов в формате требований
//                       к свойствам структуры.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя;
//                                если какой-либо объект будет исключен из выборки по правам, то этот объект
//                                будет исключен и из результата;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - список объектов и значений их реквизитов:
//   * Ключ - ЛюбаяСсылка - ссылка на объект;
//   * Значение - Структура:
//    ** Ключ - Строка - имя реквизита;
//    ** Значение - Произвольный - значение реквизита.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов, ВыбратьРазрешенные);
	
КонецФункции

// Устарел.
// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  МассивСсылок       - Массив - массив ссылок на объекты.
//  ИмяРеквизита       - Строка - например, "Код".
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объектам выполняется с учетом прав пользователя;
//                                если какой-либо объект будет исключен из выборки по правам, то этот объект
//                                будет исключен и из результата;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита.
//
// Возвращаемое значение:
//  Соответствие -
// 
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные);
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы по ссылке на объект в привилегированном режиме.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  ИмяРеквизита       - Строка - имя получаемого реквизита.
//                                Допускается указание имени реквизита через точку, но при этом параметр КодЯзыка для
//                                такого реквизита учитываться не будет.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то возвращается Неопределено;
//                                если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита.
//
// Возвращаемое значение:
//  Произвольный - 
Функция ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Ссылка, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

#КонецОбласти

#Область ПраваПользователей

Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(
		Пользователь,
		ПроверятьПраваАдминистрированияСистемы,
		УчитыватьПривилегированныйРежим);
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Актуализирует значения полей КИ из ее представления.
//
//  Параметры:
//		Представление - Строка - представление КИ
//		ЗначенияПолей - Строка - служебная информация, значения полей КИ
//		ТипКИ - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
Процедура ЗаполнитьЗначенияПолейКИПоПредставлению(Представление, ЗначенияПолей, ТипКИ = Неопределено) Экспорт
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(Представление, ЗначенияПолей, ТипКИ);
	
КонецПроцедуры

#КонецОбласти

#Область ПолнотекстовыйПоиск

// Определяет признак использования полнотекстового поиска, исходя из значения переданной ФО
// и настройки использования для базы данных в целом.
//
// Параметры:
//	ИмяФОИспользованияППД - Строка - имя учитываемой функциональной опции.
//
// Возвращаемое значение:
//	Булево - Истина, если используется, Ложь в обратном случае.
//
Функция ИспользуетсяПолнотекстовыйПоиск(ИмяФОИспользованияППД) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФОИспользованияППД)
		И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	
КонецФункции

#КонецОбласти

#Область СпискиВыбора

Процедура ДоступныеДляВыбораЗначенияПеречисления(ИмяПеречисления, ДанныеВыбора, Параметры, ИсключаемыеЗначения) Экспорт
	
	ОбщегоНазначенияУТ.ДоступныеДляВыбораЗначенияПеречисления(
			ИмяПеречисления,
			ДанныеВыбора,
			Параметры,
			ИсключаемыеЗначения);
			
КонецПроцедуры

// См. ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперации.
Функция ДоступныеХозяйственныеОперации(ИмяТаблицы) Экспорт
	
	Возврат ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперации(ИмяТаблицы);
	
КонецФункции

Функция ДатаСеанса() Экспорт
	Возврат ТекущаяДатаСеанса();
КонецФункции

#КонецОбласти

#Область СостояниеВыполненияДокументов

Функция ПроверитьСписокДокументов(МассивДокументов) Экспорт 
	
	СоответствиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивДокументов);
	Возврат СоответствиеТипов.Количество() = 1;
	
КонецФункции

#КонецОбласти

#Область СравнениеГрафиковКредитовИДепозитов

Функция ВладелецГрафика(ВариантГрафика) Экспорт
	
	Возврат ВариантГрафика.Владелец;
	
КонецФункции

#КонецОбласти

#Область ДосьеКонтрагента

Функция РеквизитыКонтрагента(Контрагент) Экспорт
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда		
		ЗначениеИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН");
		
	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда		
		Контрагенты = ПартнерыИКонтрагенты.ПолучитьВсехКонтрагентовПартнера(Контрагент);
		
		Если Контрагенты.Количество() = 1 Тогда		
			ЗначениеИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагенты[0], "ИНН");
		Иначе
			ЗначениеИНН = "";
			Итератор = 0;
			Пока ЗначениеИНН = "" И Итератор < Контрагенты.Количество() Цикл
				ЗначениеИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагенты[Итератор], "ИНН");
				Итератор = Итератор + 1;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ЗначениеИНН = "";
		
	КонецЕсли;
	
	Возврат ЗначениеИНН;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

// Возвращает структуру параметров, необходимых при запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы программы при запуске.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Для запрета обновления с неподдерживаемых версий
	Параметры.Вставить("ВерсияДанных", ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя, Истина)); 
	Параметры.Вставить("ВерсияМетаданных", СокрЛП(Метаданные.Версия));
	Параметры.Вставить("ЗадатьВопросОПереходеНаОнлайнВзаиморасчеты", Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат; // если нулевая область, то выходим
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") И Пользователи.ЭтоПолноправныйПользователь() Тогда
		МожноСпрашиватьОПереходе = НЕ Константы.НеСпрашиватьПроПереходНаОнлайнВзаиморасчеты.Получить();
		Параметры.ЗадатьВопросОПереходеНаОнлайнВзаиморасчеты = НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить()
			И Константы.ОтложенноеОбновлениеЗавершеноУспешно.Получить()
			И МожноСпрашиватьОПереходе;
	КонецЕсли;
	
	Параметры.Вставить("СлужебныеПодсистемы_ОбъектыУТКАУП_ФормаНачальнойНастройкиПрограммы",
		ОткрытиеФормПриНачалеРаботыСистемыВызовСервера.ФормаНачальнойНастройкиПрограммы());
		
	Параметры.Вставить("СлужебныеПодсистемы_ОбъектыУТКАУП_КомпонентаОбменаСМП", Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Подсистемы

Функция ИмяПодсистемыПланирования() Экспорт
	
		
		ИмяПодсистемыПланирования = "Планирование";
		
	
	Возврат ИмяПодсистемыПланирования;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПроверитьПараметрыРеквизитовОбъекта(ПараметрыРеквизитовОбъекта) Экспорт

	Если ПараметрыРеквизитовОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыРеквизитовОбъектаТаблица = Новый ТаблицаЗначений;
	ПараметрыРеквизитовОбъектаТаблица.Колонки.Добавить("ИмяРеквизита");
	ПараметрыРеквизитовОбъектаТаблица.Колонки.Добавить("ИмяЭлемента");
	ПараметрыРеквизитовОбъектаТаблица.Колонки.Добавить("Свойство");
	ПараметрыРеквизитовОбъектаТаблица.Колонки.Добавить("Количество");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПараметрыРеквизитовОбъекта, ПараметрыРеквизитовОбъектаТаблица);
	
	ПараметрыРеквизитовОбъектаТаблица.ЗаполнитьЗначения(1, "Количество");
	ПараметрыРеквизитовОбъектаТаблица.Свернуть("ИмяРеквизита,ИмяЭлемента,Свойство", "Количество");
	ПараметрыРеквизитовОбъектаТаблица.Сортировать("ИмяРеквизита,Свойство");
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъектаТаблица Цикл
		Если ПараметрыРеквизита.Количество > 1 И ПараметрыРеквизита.ИмяРеквизита <> "" Тогда
			ТекстСообщения = НСтр("ru = 'Для реквизита ""%1"" свойство ""%2"" определяется несколько раз. Обратитесь к администратору.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения,
										?(ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита), ПараметрыРеквизита.ИмяРеквизита, ПараметрыРеквизита.ИмяЭлемента), 
										ПараметрыРеквизита.Свойство);
										
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
