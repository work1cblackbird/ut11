
#Область ПрограммныйИнтерфейс

// Возвращает значение константы по имени
//
// Параметры:
// 	Имя - Строка - Имя константы
// 
// Возвращаемое значение:
//	Произвольный - Значение константы
// 
Функция ЗначениеКонстанты(Имя) Экспорт
	Возврат ОбщегоНазначенияУТВызовСервера.ЗначениеКонстанты(Имя);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДополнительныеРеквизитыИСведения

// Возвращает соответствие набора доп. реквизитов (сведений) и функциональных опций, влияющих на возможность его использования.
//
// Возвращаемое значение:
//	Соответствие Из КлючИЗначение - где:
//		Ключ - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
//		Значение - Строка - имена ФО конфигурации, с которыми связан этот набор.
//
Функция СвязиДопРеквизитовИФункциональныхОпций() Экспорт
	
	ОписаниеОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный
	|	И НаборыДополнительныхРеквизитовИСведений.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Заменим первый символ "_" в имени объекта на "."
		ИмяОбъекта = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		
		ПозицияРазделителя = СтрНайти(ИмяОбъекта, "_");
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = Лев(ИмяОбъекта, ПозицияРазделителя - 1) + "." + Сред(ИмяОбъекта, ПозицияРазделителя + 1);
		
		// Объекты с префиксом "Удалить" пропускаем
		Если СтрНайти(НРег(ИмяОбъекта), ".удалить") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		
		Если ОбъектМетаданных <> Неопределено Тогда
			
			ОписаниеОбъекта = ОписаниеОбъекта();
			ОписаниеОбъекта.Ссылка = Выборка.Ссылка;
			ОписаниеОбъекта.ОбъектМетаданных = ОбъектМетаданных;
			
			ОписаниеОбъектов.Вставить(ИмяОбъекта, ОписаниеОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаФО Из Метаданные.ФункциональныеОпции Цикл
		
		Если НЕ Метаданные.Константы.Содержит(МетаФО.Хранение) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
			Если МетаФО.Состав.Содержит(ОписаниеОбъекта.Значение.ОбъектМетаданных) Тогда
				ОписаниеОбъекта.Значение.ФункциональныеОпции = ОписаниеОбъекта.Значение.ФункциональныеОпции
					+ ?(ОписаниеОбъекта.Значение.ФункциональныеОпции = "", "", ",") + МетаФО.Имя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Новый Соответствие;
	Для Каждого ОписаниеОбъекта Из ОписаниеОбъектов Цикл
		Значение = ОписаниеОбъекта.Значение; // см. ОписаниеОбъекта
		Результат.Вставить(Значение.Ссылка, Значение.ФункциональныеОпции);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * ОбъектМетаданных - ОбъектМетаданных - 
// * ФункциональныеОпции - Строка -
// * Ссылка - ДокументСсылка - 
Функция ОписаниеОбъекта()
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("Ссылка");
	ОписаниеОбъекта.Вставить("ФункциональныеОпции", "");
	ОписаниеОбъекта.Вставить("ОбъектМетаданных");
	
	Возврат ОписаниеОбъекта;
КонецФункции

#КонецОбласти

#Область СвойстваОбъектаМетаданных

// Позволяет определить, есть ли среди реквизитов или стандартных реквизитов объекта реквизит с переданным именем.
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - имя метаданных объекта, в котором требуется проверить наличие реквизита
//  ИмяРеквизита - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРеквизитОбъекта(ИмяОбъектаМетаданных, ИмяРеквизита) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СвойстваОбъекта = Новый Структура("СтандартныеРеквизиты");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, МетаданныеОбъекта);
	
	Если СвойстваОбъекта.СтандартныеРеквизиты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЭтоСтандартныйРеквизит(СвойстваОбъекта.СтандартныеРеквизиты, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область ОчисткаРегистровСведений

// Возвращает информацию о регистрах сведений, в которых есть записи по указанным метаданным.
//
// Параметры:
//	ИменаОбъектовМетаданных - Строка - перечисленные через запятую полные имена метаданных,
//		записи по которым которые ищем в регистрах сведений.
//	ТолькоВедущиеИзмерения - Булево - выполнять поиск ссылок на метаданные только в ведущих измерениях.
//
// Возвращаемое значение:
//	Массив из Структура - Свойства структуры:
//		* Имя - Строка - имя регистра в метаданных
//		* Измерения - Массив Из Структура - описание измерений регистра, в которых найдены ссылки, с элементами типа Структура с ключами:
//			* Имя - Строка - Имя измерения в метаданных
//			* Типы - Массив Из Строка - описание типов измерения, в которых найдены ссылки.
//	
Функция РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, ТолькоВедущиеИзмерения = Ложь) Экспорт
	
	МассивИменМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаОбъектовМетаданных, ",",, Истина);
	
	МассивРегистров = Новый Массив;
	
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		
		Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИзмерений = Новый Массив;
		
		Для Каждого Измерение Из Регистр.Измерения Цикл
			
			Если ТолькоВедущиеИзмерения И НЕ Измерение.Ведущее Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТипов = Новый Массив;
			
			Для Каждого ТипИзмерения Из Измерение.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИзмерения);
				Если ОбъектМетаданных <> Неопределено
				 И МассивИменМетаданных.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено Тогда
					
					МассивТипов.Добавить(ОбъектМетаданных.ПолноеИмя());
					
			 	КонецЕсли;
				
			КонецЦикла; // типы
			
			Если МассивТипов.Количество() > 0 Тогда
				МассивИзмерений.Добавить(Новый Структура("Имя, Типы", Измерение.Имя, МассивТипов));
			КонецЕсли;
			
		КонецЦикла; // измерения
		
		Если МассивИзмерений.Количество() > 0 Тогда
			МассивРегистров.Добавить(Новый Структура("Имя, Измерения", Регистр.Имя, МассивИзмерений));
		КонецЕсли;
		
	КонецЦикла; // регистры
	
	Возврат МассивРегистров;
	
КонецФункции

#КонецОбласти

#Область ПроверкаКорректностиНумерации

// Проверяет наличие документов РеализацияУслугПрочихАктивов с префиксом "У"
// Используется в целях корректной нумерации документов с 6-ти значным номером.
//
// Возвращаемое значение:
// 	Строка - "0" если есть документы, "" если нет.
//
Функция ДополнительныйПрефиксНумератораДокументыРеализацииТоваров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	1 
	               |ИЗ
	               |	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	               |ГДЕ
	               |	ПОДСТРОКА(РеализацияУслугПрочихАктивов.Номер, 6, 1) = ""У""";
				   
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Возврат "0";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Классификаторы

Функция МассивИсключаемыхВидовКИКонтрагентаДляВыводаВФормеПартнера() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
	|	И НЕ ВидыКонтактнойИнформации.Ссылка В (
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента),
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента),
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента),
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента),
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксКонтрагенты)
	|	)
	|";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СоответствиеКодовОКВЭД() Экспорт

	Возврат ОрганизацииЛокализация.СоответствиеКодовКНаименованиюИзМакета("ОКВЭД2"); 

КонецФункции

// Позволяет определить, указанный документ является регистратором указанного регистра.
//
// Параметры:
//  ИмяДокумента - Строка - краткое имя документа который требуется поискать в регистраторах регистра.
//  ИмяРегистра - Строка - полное имя регистра (как в дереве метаданных). Для регистров накопления можно передавать
//                         краткие имена. Пример: "РегистрыСведений.БлокировкиСкладскихЯчеек" или "ТоварыОрганизаций".
//
// Возвращаемое значение:
//  Булево - документ является регистратором указанного регистра.
//
Функция ЭтоРегистраторРегистра(ИмяДокумента, ИмяРегистра) Экспорт
	
	Если СтрНайти(ИмяРегистра, ".") > 0 Тогда
		МетаданныеРегистра = ОбщегоНазначенияУТ.МетаданныеПоИмени(ИмяРегистра);
	Иначе// передано краткое имя регистра - только регистры накопления
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	КонецЕсли;
	ТипДокумента = Тип("ДокументСсылка."+ИмяДокумента);
	Возврат МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы().Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСЖурналамиДокументов 

// Возвращает значения хозяйственных операций доступных пользователю по группе доступа для объекта информационной базы.
//
// Параметры:
//	ИмяТаблицы - Строка - полное имя объекта информационной базы, например, "РегистрСведений.РеестрДокументов".
//
// Возвращаемое значение:
//	Массив из ПеречислениеСсылка.ХозяйственныеОперации - 
//
Функция ДоступныеХозяйственныеОперации(ИмяТаблицы) Экспорт
	
	ТипЗначения = Тип("ПеречислениеСсылка.ХозяйственныеОперации");
	
	ДоступныеХозяйственныеОперации = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка(ИмяТаблицы, ТипЗначения,,Истина);
	
	Возврат ДоступныеХозяйственныеОперации;
	
КонецФункции

#КонецОбласти

#Область Прочее
 
// Конфигурация использует только один язык.
// 
// Возвращаемое значение:
//  Булево - Конфигурация использует только один язык
Функция КонфигурацияИспользуетТолькоОдинЯзык() Экспорт
	
	Если Метаданные.Языки.Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Константы.ИспользоватьДополнительныйЯзык1.Получить()
		Или Константы.ИспользоватьДополнительныйЯзык2.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ЗначенияПустыхКлючейРеестраДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючиРеестраДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|ГДЕ
	|	КлючиРеестраДокументов.Ключ В(&ПустыеЗначения)";
	
	МассивПустыхЗначений = Новый Массив;
	
	ТипыКлючей = Метаданные.Справочники.КлючиРеестраДокументов.Реквизиты.Ключ.Тип.Типы();
	
	Для Каждого ТипКлюча из ТипыКлючей Цикл
		МассивПустыхЗначений.Добавить(ПредопределенноеЗначение(Метаданные.НайтиПоТипу(ТипКлюча).ПолноеИмя() + ".ПустаяСсылка"));
	КонецЦикла;
	
	МассивПустыхЗначений.Добавить(Неопределено);
	Запрос.УстановитьПараметр("ПустыеЗначения", МассивПустыхЗначений);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ДопустимоеОтклонениеПриОкругленииКоличества() Экспорт
	
	Возврат Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Получить();
	
КонецФункции

Функция ИспользуетсяСпособПередачиТоваровМеждуОрганизациями(СпособПередачи, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкаПередачиТоваровМеждуОрганизациями.СпособПередачиТоваров КАК СпособПередачиТоваров
	|ИЗ
	|	РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК НастройкаПередачиТоваровМеждуОрганизациями
	|ГДЕ
	|	НастройкаПередачиТоваровМеждуОрганизациями.СпособПередачиТоваров = &СпособПередачи
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ ОрганизацияПродавец = &Организация)";
	Запрос.УстановитьПараметр("СпособПередачи", СпособПередачи);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает признак того, что для пользователя установлен язык интерфейса
// соответствующий основному языку информационной базы.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОсновнойЯзык() Экспорт
	
	Возврат ОбщегоНазначения.ЭтоОсновнойЯзык();
	
КонецФункции

#КонецОбласти