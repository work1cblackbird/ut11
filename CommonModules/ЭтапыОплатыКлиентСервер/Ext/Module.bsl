
////////////////////////////////////////////////////////////////////////////////
// Модуль "ЭтапыОплатыКлиентСервер" содержит процедуры и функции для 
// формирования представления этапов оплаты,
// работы с таблицей этапов оплаты, не требующие вызова сервера.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПредставлениеЭтаповОплаты

// Возвращает представление условий оплаты для соглашений,
// включающие в себя форму оплаты, этапы оплаты.
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - форма из которой вызвана функция.
//
// Возвращаемое значение:
// 		Строка - представление условий оплаты.
//
Функция НадписьЭтапыОплатаДляСоглашений(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ФормаОплаты            = Объект.ФормаОплаты;
	ЭтапыГрафикаОплаты     = Объект.ЭтапыГрафикаОплаты;
	КоличествоЭтаповОплаты = ЭтапыГрафикаОплаты.Количество();
	
	Оформление = ПараметрыОформленияНадписиЭтапыОплаты();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты));
	
	ТекстЭтаповОплаты = "";
	Если КоличествоЭтаповОплаты = 0 Тогда
		
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='этапы не указаны'"), , Оформление.ЦветПредупреждение));
		
	ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
		
		МассивСтрок.Добавить(" ");
		Для Сч=1 По КоличествоЭтаповОплаты Цикл
			СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
			ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1% %2 дн %3'"),
				СтрокаОплаты.ПроцентПлатежа, 
				СтрокаОплаты.Сдвиг,
				СтрокаОплаты.ВариантОтсчета);
			МассивСтрок.Добавить(ТекстЭтаповОплаты);
			МассивСтрок.Добавить(", ");
		КонецЦикла;
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
	Иначе
		
		ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			КоличествоЭтаповОплаты,
			НСтр("ru='этапы'"), НСтр("ru='этапа'"), НСтр("ru='этапов'"), НСтр("ru='м'"));
			
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru='в'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
		
	КонецЕсли;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
	Возврат ТекстНадписи;
	
КонецФункции

// Порядок вариантов отсрочки.
// 
// Возвращаемое значение:
//  Соответствие - Порядок вариантов отсрочки.
Функция ПорядокВариантовОтсчета() Экспорт
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ПустаяСсылка"),0);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа"),1);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования"),2);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки"),3);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки"),4);
	Соответствие.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности"),5);
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает расчетную дату платежа без учета производственного календаря.
// 
// Параметры:
//  Параметры - см. ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа
// 
// Возвращаемое значение:
//  Дата - Дата платежа (без учета календаря)
//
Функция ДатаПлатежаБезКалендаря(Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
		Параметры.ДатаСогласования = Параметры.ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		Параметры.ДатаОтгрузки = Параметры.ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ВариантОтсчета) Тогда
		ДатаПлатежа = Дата(1,1,1);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа") И ЗначениеЗаполнено(Параметры.ДатаЗаказа) Тогда
		ДатаПлатежа = Параметры.ДатаЗаказа + 86400 * Параметры.Сдвиг;
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования") И ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
		ДатаПлатежа = Параметры.ДатаСогласования + 86400 * Параметры.Сдвиг;
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки") И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		ДатаПлатежа = Параметры.ДатаОтгрузки - 86400 * Параметры.Сдвиг;
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки") И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		ДатаПлатежа = Параметры.ДатаОтгрузки + 86400 * Параметры.Сдвиг;
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности") И ЗначениеЗаполнено(Параметры.ДатаПереходаПраваСобственности) Тогда
		ДатаПлатежа = Параметры.ДатаПереходаПраваСобственности + 86400 * (Параметры.Сдвиг);
	ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности") И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
		ДатаПлатежа = Параметры.ДатаОтгрузки + 86400 * (Параметры.Сдвиг + Параметры.СрокПереходаПраваСобственности);
	Иначе
		ДатаПлатежа = Дата(1,1,1);
	КонецЕсли;
	
	Возврат ДатаПлатежа;
	
КонецФункции

// Возвращает расчетное количество дней от дата события до даты платежа без учета производственного календаря.
// 
// Параметры:
//  Параметры - см. ЭтапыОплатыКлиентСервер.ПараметрыРасчетаДатыПлатежа
// 
// Возвращаемое значение:
//  Число - Сдвиг, дней (без учета календаря)
//
Функция СдвигБезКалендаря(Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
		Параметры.ДатаСогласования = Параметры.ДатаЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ВариантОтсчета)
		ИЛИ НЕ ЗначениеЗаполнено(Параметры.ДатаПлатежа)Тогда
		Сдвиг = 0;
	Иначе
		Если Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа") 
			И ЗначениеЗаполнено(Параметры.ДатаЗаказа) Тогда
			Сдвиг = (Параметры.ДатаПлатежа - Параметры.ДатаЗаказа) / 86400 ;
		ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования") 
			И ЗначениеЗаполнено(Параметры.ДатаСогласования) Тогда
			Сдвиг = (Параметры.ДатаПлатежа - Параметры.ДатаСогласования) / 86400 ;
		ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки") 
			И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
			Сдвиг = (Параметры.ДатаОтгрузки - Параметры.ДатаПлатежа) / 86400 ;
		ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки")
			И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
			Сдвиг = (Параметры.ДатаПлатежа - Параметры.ДатаОтгрузки) / 86400 ;
		ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")
			И ЗначениеЗаполнено(Параметры.ДатаПереходаПраваСобственности) Тогда
			Сдвиг = (Параметры.ДатаПлатежа - Параметры.ДатаПереходаПраваСобственности) / 86400 ;
		ИначеЕсли Параметры.ВариантОтсчета = ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности")
			И ЗначениеЗаполнено(Параметры.ДатаОтгрузки) Тогда
			Сдвиг = (Параметры.ДатаПлатежа - Параметры.ДатаОтгрузки) / 86400 + Параметры.СрокПереходаПраваСобственности;
		Иначе
			Сдвиг = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сдвиг;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеИРаспределениеЭтаповОплаты

// Распределяет сумму по этапам оплаты
//
// Параметры:
// ЭтапыГрафика
// 		ЭтапыГрафикаОплаты -ТаблицаЗначений - таблица этапов оплаты, в которой необходимо распределить сумму
// 		СуммаКРаспределениюОплаты - Число - сумма платежей, которую необходимо распределить по этапам
// 		СуммаКРаспределениюЗалога - Число - Необязательный, сумма залога за тару, которую необходимо распределить по этапам
// 		СуммаКРаспределениюВзаиморасчетов - Число - Необязательный, сумма взаиморасчетов документа, которую необходимо распределить по этапам.
// 		СуммаКРаспределениюВзаиморасчетовПоТаре - Число - Необязательный, сумма взаиморасчетов по таре документа, которую необходимо распределить по этапам.
//
Процедура РаспределитьСуммуПоЭтапамГрафикаОплаты(ЭтапыГрафикаОплаты, Знач СуммаКРаспределениюОплаты, 
	Знач СуммаКРаспределениюЗалога = 0, Знач СуммаКРаспределениюВзаиморасчетов = 0, Знач СуммаКРаспределениюВзаиморасчетовПоТаре = 0) Экспорт
	
	РаспределеннаяСуммаОплаты               = 0;
	РаспределеннаяСуммаЗалога               = 0;
	РаспределеннаяСуммаВзаиморасчетов       = 0;
	РаспределеннаяСуммаВзаиморасчетовПоТаре = 0;
	ВалютыСовпадают                         = СуммаКРаспределениюОплаты = СуммаКРаспределениюВзаиморасчетов;
	ТекущийЭтап                             = 0;
	ПроцентПлатежа                          = 0;
	ПроцентЗалогаЗаТару                     = 0;
	ЕстьЛишниеЭтапы                         = Ложь;
	КоличествоЭтапов                        = ЭтапыГрафикаОплаты.Количество();
	
	ЕстьТара = КоличествоЭтапов > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"СуммаЗалогаЗаТару");
	
	РаспределятьТолькоСуммуВзаиморачетов = СуммаКРаспределениюОплаты = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа")
		И (НЕ ЕстьТара ИЛИ СуммаКРаспределениюЗалога = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару"));
		
	Для Каждого ЭтапГрафикаОплаты Из ЭтапыГрафикаОплаты Цикл
		
		ДанныеЭтапа = Новый Структура();
		ДанныеЭтапа.Вставить("ПроцентПлатежа", 0);
		ДанныеЭтапа.Вставить("СуммаПлатежа", 0);
		ДанныеЭтапа.Вставить("СуммаВзаиморасчетов", 0);
		ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару", 0);
		ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару", 0);
		ДанныеЭтапа.Вставить("СуммаВзаиморасчетовПоТаре", 0);
		
		ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапГрафикаОплаты);
		
		ТекущийЭтап = ТекущийЭтап + 1;
		
		// Если сумма платежей по всем этапам менее ста процентов или 
		// проценты текущего этапа равны 0 -
		// добавим недостающие проценты.
		
		ПроцентыТекущегоЭтапаНулевые = (ДанныеЭтапа.ПроцентПлатежа = 0 И ДанныеЭтапа.ПроцентЗалогаЗаТару = 0);
		
		Если (ТекущийЭтап = КоличествоЭтапов
			И ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа") < 100)
			Или ПроцентыТекущегоЭтапаНулевые Тогда
			
			ДанныеЭтапа.ПроцентПлатежа = 100 - ПроцентПлатежа;
			
		КонецЕсли;
		Если (ТекущийЭтап = КоличествоЭтапов И ПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару < 100)
			Или ПроцентыТекущегоЭтапаНулевые Тогда
			
			ДанныеЭтапа.ПроцентЗалогаЗаТару = 100 - ПроцентЗалогаЗаТару;
			
		КонецЕсли;
		
		// Если к текущему этапу общий процент платежа более 100% - 
		// уменьшим процент текущего платежа и удалим "лишние" этапы.
		
		ПроцентПлатежаСТекущимЭтапом = ПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
		ПроцентЗалогаЗаТаруСТекущимЭтапом = ПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
		
		Если ПроцентПлатежаСТекущимЭтапом > 100 Тогда
			ДанныеЭтапа.ПроцентПлатежа = 100 - ПроцентПлатежа;
		КонецЕсли;
		Если ПроцентЗалогаЗаТаруСТекущимЭтапом > 100 Тогда
			ДанныеЭтапа.ПроцентЗалогаЗаТару = 100 - ПроцентЗалогаЗаТару;
		КонецЕсли;
		
		Если НЕ РаспределятьТолькоСуммуВзаиморачетов Тогда
			СуммаПлатежаПоЭтапу       = Окр(СуммаКРаспределениюОплаты * ДанныеЭтапа.ПроцентПлатежа / 100,
			                                2,
			                                РежимОкругления.Окр15как20);
			
			ДанныеЭтапа.СуммаПлатежа  = ?(ТекущийЭтап = КоличествоЭтапов,
			                              СуммаКРаспределениюОплаты - РаспределеннаяСуммаОплаты,
			                              СуммаПлатежаПоЭтапу);
			
			РаспределеннаяСуммаОплаты = РаспределеннаяСуммаОплаты + ДанныеЭтапа.СуммаПлатежа;
			ПроцентПлатежа            = ПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
			
			СуммаЗалогаПоЭтапу            = Окр(СуммаКРаспределениюЗалога * ДанныеЭтапа.ПроцентЗалогаЗаТару / 100,
			                                    2,
			                                    РежимОкругления.Окр15как20);
			
			ДанныеЭтапа.СуммаЗалогаЗаТару = ?(ТекущийЭтап = КоличествоЭтапов,
			                                  СуммаКРаспределениюЗалога - РаспределеннаяСуммаЗалога,
			                                  СуммаЗалогаПоЭтапу);
			
			РаспределеннаяСуммаЗалога     = РаспределеннаяСуммаЗалога + ДанныеЭтапа.СуммаЗалогаЗаТару;
			ПроцентЗалогаЗаТару           = ПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
		КонецЕсли;
		
		Если СуммаКРаспределениюВзаиморасчетов <> 0 Тогда
			Если ВалютыСовпадают Тогда
				ДанныеЭтапа.СуммаВзаиморасчетов = ДанныеЭтапа.СуммаПлатежа;
			Иначе
				СуммаВзаиморасчетовПоЭтапу = Окр(СуммаКРаспределениюВзаиморасчетов * ДанныеЭтапа.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
				
				ДанныеЭтапа.СуммаВзаиморасчетов  = ?(ТекущийЭтап = КоличествоЭтапов,
										СуммаКРаспределениюВзаиморасчетов - РаспределеннаяСуммаВзаиморасчетов,
										СуммаВзаиморасчетовПоЭтапу);
				РаспределеннаяСуммаВзаиморасчетов = РаспределеннаяСуммаВзаиморасчетов + ДанныеЭтапа.СуммаВзаиморасчетов;
			КонецЕсли;
		Иначе
			ДанныеЭтапа.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
		Если СуммаКРаспределениюВзаиморасчетовПоТаре <> 0 Тогда
			Если ВалютыСовпадают Тогда
				ДанныеЭтапа.СуммаВзаиморасчетовПоТаре = ДанныеЭтапа.СуммаЗалогаЗаТару;
			Иначе
				СуммаВзаиморасчетовПоТареПоЭтапу = Окр(СуммаКРаспределениюВзаиморасчетовПоТаре * ДанныеЭтапа.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
				
				ДанныеЭтапа.СуммаВзаиморасчетовПоТаре  = ?(ТекущийЭтап = КоличествоЭтапов,
										СуммаКРаспределениюВзаиморасчетовПоТаре - РаспределеннаяСуммаВзаиморасчетовПоТаре,
										СуммаВзаиморасчетовПоТареПоЭтапу);
				РаспределеннаяСуммаВзаиморасчетовПоТаре = РаспределеннаяСуммаВзаиморасчетовПоТаре + ДанныеЭтапа.СуммаВзаиморасчетовПоТаре;
			КонецЕсли;
		Иначе
			ДанныеЭтапа.СуммаВзаиморасчетовПоТаре = 0;
		КонецЕсли;
		
		// Если на текущем этапе превышен процент платежа и этап не последний - 
		// необходимо удалять лишние этапы.
		
		Если ТекущийЭтап <> КоличествоЭтапов
			И СуммаКРаспределениюОплаты = 0
			И СуммаКРаспределениюЗалога = 0 Тогда
			ЕстьЛишниеЭтапы = Истина;
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтапГрафикаОплаты, ДанныеЭтапа);
		
	КонецЦикла;
	
	// Удалим лишние этапы графика оплаты.
	Если ЕстьЛишниеЭтапы Тогда
		
		Для Счетчик = ТекущийЭтап По КоличествоЭтапов-1 Цикл
			ЭтапыГрафикаОплаты.Удалить(ТекущийЭтап);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(ЭтапыГрафикаОплаты, 0, "СуммаОтклоненияМерныхТоваров");
	
КонецПроцедуры

// Возвращает структуру параметров для метода ДобавитьЭтапОплатыПоУмолчанию()
// 
// Возвращаемое значение:
//  Структура - Структура параметров с ключами:
// * Объект                       - ДокументОбъект - Документ, для которого заполняются этапы графика оплаты
// * ВариантОплаты                - ПеречислениеСсылка.ВариантыКонтроляОплатыКлиентом, ПеречислениеСсылка.ВариантыКонтроляОплатыПоставщику - Вариант оплаты добавляемого этапа
// * ЖелаемаяДата                 - Дата - Желаемая дата по документу
// * ДатаСеанса                   - Дата - Дата текущего сеанса пользователя
// * СуммаОплатыПоДокументу       - Число - сумма к оплате по документу
// * СуммаЗалогаПоДокументу       - Число - сумма залога по документу.
// * СуммаОтклоненияМерныхТоваров - Число - сумма отклонения мерных товаров.
Функция ПараметрыДляДобавленияЭтапаПоУмолчанию() Экспорт
	
	ПараметрыДляДобавления = Новый Структура;
	ПараметрыДляДобавления.Вставить("Объект");
	ПараметрыДляДобавления.Вставить("ВариантОплаты");
	ПараметрыДляДобавления.Вставить("ЖелаемаяДата");
	ПараметрыДляДобавления.Вставить("ДатаСеанса");
	
	ПараметрыДляДобавления.Вставить("СуммаОплатыПоДокументу", 0);
	ПараметрыДляДобавления.Вставить("СуммаЗалогаПоДокументу", 0);
	ПараметрыДляДобавления.Вставить("СуммаОтклоненияМерныхТоваров", 0);
	
	Возврат ПараметрыДляДобавления;
	
КонецФункции

// Добавляет один этап оплаты по умолчанию
//
// Параметры:
//	 Параметры - Структура - Структура параметров с ключами, описанными в методе ПараметрыДляДобавленияЭтапаПоУмолчанию()
Процедура ДобавитьЭтапОплатыПоУмолчанию(Параметры) Экспорт
	
	ЭтапыОплаты = Параметры.Объект.ЭтапыГрафикаОплаты; // ТаблицаЗначений
	
	Если ЗначениеЗаполнено(Параметры.ЖелаемаяДата) Тогда
		ДатаПлатежа = ?(ЗначениеЗаполнено(Параметры.Объект.Дата), Макс(Параметры.ЖелаемаяДата, Параметры.Объект.Дата), Параметры.ЖелаемаяДата);
	ИначеЕсли ЗначениеЗаполнено(Параметры.Объект.Дата) Тогда
		ДатаПлатежа = Параметры.Объект.Дата;
	Иначе
		ДатаПлатежа = Параметры.ДатаСеанса;
	КонецЕсли;
	
	ДанныеЭтапа = Новый Структура;
	ДанныеЭтапа.Вставить("ДатаПлатежа",                  ДатаПлатежа);
	ДанныеЭтапа.Вставить("ВариантОплаты",                Параметры.ВариантОплаты);
	ДанныеЭтапа.Вставить("ПроцентПлатежа",               ?(Параметры.СуммаОплатыПоДокументу = 0, 0, 100));
	ДанныеЭтапа.Вставить("СуммаПлатежа",                 Параметры.СуммаОплатыПоДокументу - Параметры.СуммаОтклоненияМерныхТоваров);
	ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару",          ?(Параметры.СуммаЗалогаПоДокументу = 0, 0, 100));
	ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару",            Параметры.СуммаЗалогаПоДокументу);
	ДанныеЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", Параметры.СуммаОтклоненияМерныхТоваров);
	
	НовыйЭтап = ЭтапыОплаты.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЭтап, ДанныеЭтапа);
	
КонецПроцедуры

// Возвращает структуру параметров для расчета даты платежа или сдвига.
// 
// Возвращаемое значение:
//  Структура - Параметры расчета даты платежа:
// * ВариантОтсчета                                         - ПеречислениеСсылка.ВариантыОтсчетаДатыПлатежа - Вариант отсчета строки.
// * Сдвиг                                                  - Число - Сдвиг строки.
// * ДатаПлатежа                                            - Дата - Дата платежа строки.
// * ДатаЗаказа                                             - Дата - Дата заказа, если есть.
// * ДатаСогласования                                       - Дата - Дата согласования заказа, если есть.
// * ДатаОтгрузки                                           - Дата - Дата отгрузки строки.
// * СрокПереходаПраваСобственности                         - Число - Срок перехода права собственности из соглашения
// * Календарь - СправочникСсылка.ПроизводственныеКалендари - Календарь для учета только рабочих дней.
// * ДатаПереходаПраваСобственности                         - Дата - Дата перехода права собственности документа.
//
Функция ПараметрыРасчетаДатыПлатежа() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВариантОтсчета",                 ПредопределенноеЗначение("Перечисление.ВариантыОтсчетаДатыПлатежа.ПустаяСсылка"));
	СтруктураПараметров.Вставить("Сдвиг",                          0);
	СтруктураПараметров.Вставить("ДатаПлатежа",                    Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаЗаказа",                     Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаСогласования",               Дата(1,1,1));
	СтруктураПараметров.Вставить("ДатаОтгрузки",                   Дата(1,1,1));
	СтруктураПараметров.Вставить("СрокПереходаПраваСобственности", 0);
	СтруктураПараметров.Вставить("Календарь",                      ПредопределенноеЗначение("Справочник.ПроизводственныеКалендари.ПустаяСсылка"));
	СтруктураПараметров.Вставить("ДатаПереходаПраваСобственности", Дата(1,1,1));
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру для получение надписи этапов оплаты для документа "Реализация товаров и услуг".
//
// Возвращаемое значение:
// 		Структура:
// 			* ФормаОплаты - Неопределено.
// 			* ПорядокРасчетов - Неопределено.
// 			* ХозяйственнаяОперация - Неопределено.
// 			* Дата - Неопределено.
// 			* ДатаПлатежа - Неопределено.
// 			* СуммаВсего - Число.
// 			* СуммаПредоплаты - Число.
// 			* РеализацияПоЗаказам - Булево.
// 			* ИспользоватьСтатусыРеализацийТоваровУслуг - Булево.
//
Функция СтруктураПолученияНадписиЭтаповОплатыДляРеализацииТоваровУслуг() Экспорт
	
	СтруктураПолученияНадписи = Новый Структура();
	СтруктураПолученияНадписи.Вставить("ФормаОплаты", Неопределено);
	СтруктураПолученияНадписи.Вставить("ПорядокРасчетов", Неопределено);
	СтруктураПолученияНадписи.Вставить("ХозяйственнаяОперация", Неопределено);
	СтруктураПолученияНадписи.Вставить("Дата", Неопределено);
	СтруктураПолученияНадписи.Вставить("ДатаПлатежа", Неопределено);
	СтруктураПолученияНадписи.Вставить("СуммаВсего", 0);
	СтруктураПолученияНадписи.Вставить("СуммаПредоплаты", 0);
	СтруктураПолученияНадписи.Вставить("РеализацияПоЗаказам", Ложь);
	СтруктураПолученияНадписи.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", Ложь);
	
	Возврат СтруктураПолученияНадписи;
	
КонецФункции

// Возвращает информативное представление формы оплаты для соглашений
//
// Параметры:
// 		ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - форма оплаты. для которой нужно получить представление.
//
// Возвращаемое значение:
// 		Строка - представление формы оплаты.
//
Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru='Оплата любым способом:'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru='Оплата платежной картой:'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru='Взаимозачет:'");
	Иначе
		Представление = НСтр("ru='%ФормаОплаты% оплата:'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПараметрыОформленияНадписиЭтапыОплаты()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЦветПредупреждение", WebЦвета.Кирпичный);
	СтруктураПараметров.Вставить("ЦветВыделение", Новый Цвет(22, 39, 121));
	СтруктураПараметров.Вставить("ФорматДаты", "ДЛФ=D");
	СтруктураПараметров.Вставить("ФорматДоли", "ЧЦ=3; ЧДЦ=; ЧН=0");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура СортироватьТаблицуЭтапов(ЭтапыГрафикаОплаты) Экспорт
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокВариантовОтсчета = ПорядокВариантовОтсчета();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"НомерВариантаОплаты") Тогда
		
		Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплаты Цикл
			Если ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения")
				Или ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 1;
			ИначеЕсли ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки")
				Или ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 2;
			ИначеЕсли ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг")
				Или ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 3;
			Иначе
				ЭтапОплаты.НомерВариантаОплаты = 4;
			КонецЕсли;
			
			ЭтапОплаты.НомерВариантаОтсчета = ПорядокВариантовОтсчета[ЭтапОплаты.ВариантОтсчета];
			
		КонецЦикла;
		
		ЕстьСверхЗаказа = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапыГрафикаОплаты[0],"СверхЗаказа");
		ЭтапыГрафикаОплаты.Сортировать("НомерВариантаОплаты, ДатаПлатежа, НомерВариантаОтсчета"+?(ЕстьСверхЗаказа,",СверхЗаказа",""));
		
	Иначе
		
		Если ТипЗнч(ЭтапыГрафикаОплаты) = Тип("ТаблицаЗначений") Тогда
			ЭтапыГрафикаОплатыНовые = ЭтапыГрафикаОплаты.Скопировать();
		Иначе
			ЭтапыГрафикаОплатыНовые = ЭтапыГрафикаОплаты.Выгрузить();
		КонецЕсли;
		
		Если ЭтапыГрафикаОплатыНовые.Колонки.Найти("НомерВариантаОплаты") = Неопределено Тогда
			ЭтапыГрафикаОплатыНовые.Колонки.Добавить("НомерВариантаОплаты");
		КонецЕсли;
		
		Если ЭтапыГрафикаОплатыНовые.Колонки.Найти("НомерВариантаОтсчета") = Неопределено Тогда
			ЭтапыГрафикаОплатыНовые.Колонки.Добавить("НомерВариантаОтсчета");
		КонецЕсли;
		
		Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплатыНовые Цикл
			Если ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения")
				Или ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 1;
			ИначеЕсли ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки")
				Или ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 2;
			ИначеЕсли ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг")
				Или ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 3;
			Иначе
				ЭтапОплаты.НомерВариантаОплаты = 4;
			КонецЕсли;
			
			ЭтапОплаты.НомерВариантаОтсчета = ПорядокВариантовОтсчета[ЭтапОплаты.ВариантОтсчета];
		КонецЦикла;
		
		ЕстьСверхЗаказа = ЭтапыГрафикаОплатыНовые.Колонки.Найти("СверхЗаказа") <> Неопределено ;
		ЭтапыГрафикаОплатыНовые.Сортировать("НомерВариантаОплаты, ДатаПлатежа, НомерВариантаОтсчета"+?(ЕстьСверхЗаказа,",СверхЗаказа",""));
		
		ЭтапыГрафикаОплаты.Очистить();
		Для Каждого Стр Из ЭтапыГрафикаОплатыНовые Цикл
			ЗаполнитьЗначенияСвойств(ЭтапыГрафикаОплаты.Добавить(),Стр);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
