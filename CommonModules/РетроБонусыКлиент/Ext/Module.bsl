// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.НачислениеРетроБонусовКлиента -
//  ПараметрыВыполнения - См. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура РасчетРетроБонусовКлиентов(СсылкаНаОбъект, ПараметрыВыполнения) Экспорт
	
	ФормаДокумента = ПараметрыВыполнения.Форма;
	
	ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения.ОписаниеКоманды, "ПараметрыФормы"); // Структура
	ПараметрыФормы.Вставить("ПараметрКоманды", СсылкаНаОбъект);
	
	ИмяФормыОтчета = "Отчет.РасчетРетроБонусовКлиентов.Форма";
	ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы, ФормаДокумента, Истина);
	
КонецПроцедуры

// Параметры:
//   ЭтаФорма - См. ОбщаяФорма.ФормаОтчета
//   МенюОтчетов - Массив Из Структура
//   КлючТекущегоВарианта - Строка
//
Процедура ОбработатьРасшифровкуРасчетРетроБонусовКлиентов(ЭтаФорма, МенюОтчетов, КлючТекущегоВарианта) Экспорт
	
	Если СтрНайти(ВРег(КлючТекущегоВарианта), ВРег("Расшифровка")) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетНастройки = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	КлючВариантаРасшифровкиПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства, "КлючВариантаРасшифровкиПоНоменклатуре", "");
	КлючВариантаРасшифровкиПоДокументам = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОтчетНастройки.ДополнительныеСвойства, "КлючВариантаРасшифровкиПоДокументам", "");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Имя", КлючВариантаРасшифровкиПоНоменклатуре);
	ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расшифровка по номенклатуре'"));
	ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасчетРетроБонусовКлиентов");
	
	ПоляРасшифровки = Новый Массив; // Массив из Строка
	ПоляРасшифровки.Добавить("Организация");
	ПоляРасшифровки.Добавить("Контрагент");
	ПоляРасшифровки.Добавить("Партнер");
	ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	
	СписокПараметров = Новый Массив; // Массив из Строка
	СписокПараметров.Добавить("ДокументУсловийРетроБонусов");
	СписокПараметров.Добавить("Организация");
	СписокПараметров.Добавить("Контрагент");
	СписокПараметров.Добавить("Партнер");
	СписокПараметров.Добавить("ДатаНачала");
	СписокПараметров.Добавить("ДатаОкончания");
	СписокПараметров.Добавить("ДанныеОтчета");
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	
	МенюОтчетов.Добавить(ПараметрыОтчета);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Имя", КлючВариантаРасшифровкиПоДокументам);
	ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расшифровка по документам'"));
	ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасчетРетроБонусовКлиентов");
	
	ПоляРасшифровки = Новый Массив; // Массив из Строка
	ПоляРасшифровки.Добавить("Организация");
	ПоляРасшифровки.Добавить("Контрагент");
	ПоляРасшифровки.Добавить("Партнер");
	ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	
	СписокПараметров = Новый Массив; // Массив из Строка
	СписокПараметров.Добавить("ДокументУсловийРетроБонусов");
	СписокПараметров.Добавить("Организация");
	СписокПараметров.Добавить("Контрагент");
	СписокПараметров.Добавить("Партнер");
	СписокПараметров.Добавить("ДатаНачала");
	СписокПараметров.Добавить("ДатаОкончания");
	СписокПараметров.Добавить("ДанныеОтчета");
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	
	МенюОтчетов.Добавить(ПараметрыОтчета);
	
КонецПроцедуры

// Фиксирует актуальный состав сегментов товаров и партнеров для дальнейшего расчета
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов -
//  Форма - ФормаКлиентскогоПриложения -
//  ОповещениеОЗавершении - ОписаниеОповещения -
//  ОповещениеОперацииВыполняются - ОписаниеОповещения, Неопределено -
//
Процедура ЗафиксироватьСоставСегментов(Документ, Форма, ОповещениеОЗавершении, ОповещениеОперацииВыполняются = Неопределено) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияФиксацииСегментов(Документ);
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.Заголовок = НСтр("ru = 'Фиксация состава сегментов'");
		ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	ИначеЕсли ОповещениеОперацииВыполняются <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОперацииВыполняются);
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет фиксацию составов сегментов товаров и партнеров
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов -
//  Форма - ФормаКлиентскогоПриложения -
//  ОповещениеОЗавершении - ОписаниеОповещения -
//  ОповещениеОперацииВыполняются - ОписаниеОповещения, Неопределено -
//
Процедура ОтменитьФиксациюСоставаСегментов(Документ, Форма, ОповещениеОЗавершении, ОповещениеОперацииВыполняются = Неопределено) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияОтменыФиксацииСегментов(Документ);
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.Заголовок = НСтр("ru = 'Отмена фиксации состава сегментов'");
		ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	ИначеЕсли ОповещениеОперацииВыполняются <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОперацииВыполняются);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу рассчитанных ретро-бонусов клиентов по указанным условиям с детализацией до документа продажи.
// 
// Параметры:
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  Форма - ФормаКлиентскогоПриложения
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура РетроБонусыЗаПериодПоДокументамПродажи(ПараметрыРасчета, Форма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияПолученияРетроБонусовПоДокументамПродажи(
		ПараметрыРасчета,
		Форма.УникальныйИдентификатор);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Получение данных о рассчитанных ретро-бонусах'");
	ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Формирует документы начисления ретро-бонусов по переданным данным
// 
// Параметры:
//  АдресДанныхДляФормирования - Строка
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  ПараметрыФормирования - см. Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ПараметрыФормированияДокументов
//  Форма - ФормаКлиентскогоПриложения
//  ОповещениеОЗавершении - ОписаниеОповещения
//
Процедура СформироватьДокументыНачисления(АдресДанныхДляФормирования, ПараметрыРасчета, ПараметрыФормирования, Форма, ОповещениеОЗавершении) Экспорт
	
	ДлительнаяОперация = РетроБонусыВызовСервера.ДлительнаяОперацияФормированияДокументовНачисления(
		АдресДанныхДляФормирования,
		ПараметрыРасчета,
		ПараметрыФормирования,
		Форма.УникальныйИдентификатор);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Формирование документов начисления ретро-бонусов клиентов'");
	ПараметрыОжидания.РежимОткрытияОкнаОжидания = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ПослеФормированияОтчета(ФормаОтчета) Экспорт
	
	ДопСвойства = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		ФормаОтчета, "Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства");
	ПерваяКомпоновкаПриОткрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДопСвойства, "ПерваяКомпоновкаПриОткрытии", Ложь);
	
	Если ПерваяКомпоновкаПриОткрытии Тогда
		
		ДопСвойства.Вставить("ПерваяКомпоновкаПриОткрытии", Ложь);
		ДопСвойства.Вставить("ВариантМодифицирован", Ложь);
		ДопСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ФормаОтчета, "ПерваяКомпоновкаПриОткрытии", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ФормаОтчета, "ВариантМодифицирован", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ФормаОтчета, "ПользовательскиеНастройкиМодифицированы", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПакетнаяОбработкаСтрок

// Параметры:
//  ТекущаяСтрока - Структура:
//  				* Соглашение - СправочникСсылка.СоглашенияСКлиентами 
//  			  - ДанныеФормыЭлементКоллекции: см. Документы.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения 
// 
// Возвращаемое значение:
//  Булево
//
Функция НеобходимВызовСервераДляОбработкиСтрокиТЧ(ТекущаяСтрока, СтруктураДействий, КешированныеЗначения) Экспорт
	
	Результат = Ложь;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Соглашение)
		   И КешированныеЗначения.ПризнакиСоглашений.Получить(ТекущаяСтрока.Соглашение) = Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СтруктураПолейТЧ - Структура - Структура полей ТЧ
//  ТекущаяСтрока - Структура:
//  				* Соглашение - СправочникСсылка.СоглашенияСКлиентами 
//  			  - ДанныеФормыЭлементКоллекции: см. Документы.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ДополнительныеПараметрыЗаполнения - Структура, Неопределено - дополнительные параметры заполнения
//
Процедура ДополнитьТекущуюСтрокуСтруктурой(СтруктураПолейТЧ, ТекущаяСтрока, СтруктураДействий, ДополнительныеПараметрыЗаполнения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ") Тогда
		
		СтруктураПолейТЧ.Вставить("Соглашение");
		СтруктураПолейТЧ.Вставить("ЭтоТиповоеСоглашение");
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения = Неопределено) Экспорт
	
	ЗаполнитьПризнакСоглашенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПакетнаяОбработкаСтрок

// Параметры:
//	ТекущаяСтрока - Структура:
//		* Соглашение - СправочникСсылка.СоглашенияСКлиентами
//		* ЭтоТиповоеСоглашение - Булево
//	СтруктураДействий - См. ОбработатьСтрокуТЧ.СтруктураДействий
//	КешированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьПризнакСоглашенияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КешированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакСоглашенияВСтрокеТЧ") Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакСоглашения = КешированныеЗначения.ПризнакиСоглашений.Получить(ТекущаяСтрока.Соглашение); // Булево
	
	Если ПризнакСоглашения <> Неопределено Тогда
		ТекущаяСтрока.ЭтоТиповоеСоглашение = ПризнакСоглашения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти