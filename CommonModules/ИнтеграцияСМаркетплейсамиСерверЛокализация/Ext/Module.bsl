
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя регламентного задания.
// 
// Возвращаемое значение:
//   Строка - имя регламентного задания.
//
Функция ИмяРегламентногоЗадания() Экспорт
	
	ИмяРегламентногоЗадания = "ИнтеграцияСЯндексМаркетСервер.ЗагрузитьРекомендованныеЦеныЯндексМаркет";
	Возврат ИмяРегламентногоЗадания;
	
КонецФункции    

// Возвращает имя формы выбора.
// 
// Возвращаемое значение:
//   Строка - имя формы выбора.
//
Функция ИмяФормыВыбора() Экспорт

	ИмяФормыВыбора = НСтр("ru = 'Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыборЗагружаемыхВидовЦен'");
	Возврат ИмяФормыВыбора;

КонецФункции

// Возвращает значение функциональной опции ИспользоватьИнтеграциюСЯндексМаркет для функционала, который не локализуется.
// 
// Возвращаемое значение:
//   Булево - значение функциональной опции ИспользоватьИнтеграциюСЯндексМаркет.
//
Функция ФункциональнаяОпцияИспользоватьИнтеграциюСЯндексМаркет() Экспорт
	
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");
	Возврат ИспользоватьИнтеграциюСЯндексМаркет;
	
КонецФункции

// Возвращает значение функциональной опции ИспользоватьИнтеграциюСOzon для функционала, который не локализуется.
// 
// Возвращаемое значение:
//   Булево - значение функциональной опции ИспользоватьИнтеграциюСOzon.
//
Функция ФункциональнаяОпцияИспользоватьИнтеграциюСOzon() Экспорт
	
	ИспользоватьИнтеграциюСOzon = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	Возврат ИспользоватьИнтеграциюСOzon;
	
КонецФункции

// Возвращает настройки по способу задания цены.
//
// Возвращаемое значение:
//   - Неопределено -
//   - Структура - настройки по способу задания цены:
//       * ИмяПараметра      - Строка - имя параметра.
//       * СписокВыбора      - Строка - список выбора (строка с разделителем).
//       * ЗначениеПараметра - Строка - значение параметра.
//
Функция НастройкиПоСпособуЗаданияЦеныЯндексМаркет() Экспорт
	
	НастройкиПоСпособуЗаданияЦены = ИнтеграцияСЯндексМаркетСервер.СтруктураПараметровСпособаЗаданияЦены();
	Возврат НастройкиПоСпособуЗаданияЦены;
	
КонецФункции

// Вызывает локализуемую процедуру ЗагрузитьРекомендованныеЦеныЯндексМаркет.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми 
//                               разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания;
//     * ТаблицаВидовЦен       - ТаблицаЗначений - загружаемые виды цен:
//       ** ВидЦены              - СправочникСсылка.ВидыЦен - вид цены.
//
Процедура ЗагрузитьРекомендованныеЦеныЯндексМаркет(УчетнаяЗапись, ДополнительныеПараметры) Экспорт
	
	ИнтеграцияСЯндексМаркетСервер.ЗагрузитьРекомендованныеЦеныЯндексМаркет(УчетнаяЗапись, ДополнительныеПараметры);
	
КонецПроцедуры

// Вызывает локализуемую процедуру ЗагрузитьЦеныOzon.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись для загрузки.
//   ВидыЦен                   - Массив Из СправочникСсылка.ВидыЦен - загружаемые цены.
//
Процедура ЗагрузитьЦеныOzon(УчетнаяЗаписьМаркетплейса, ВидыЦен) Экспорт

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
	ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ВидыЦен);

КонецПроцедуры

// Возвращает настройки по способу задания цены.
//
// Возвращаемое значение:
//   - Неопределено - 
//   - Структура - параметры способа задания цены:
//       * ТипЦеныНаOzon                - Строка - обозначение типа цен на Ozon.
//       * ИмяТипЦеныНаOzon             - Строка - наименование типа цен на Ozon.
//       * УчетнаяЗаписьМаркетплейса    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//       * ИмяУчетнаяЗаписьМаркетплейса - Строка - обозначение учетной записи. 
//       * СписокВыбора                 - СписокЗначений Из Строка - список типов цен Ozon.
//
Функция НастройкиПоСпособуЗаданияЦеныOzon() Экспорт
	
	НастройкиПоСпособуЗаданияЦены = ИнтеграцияСМаркетплейсомOzonСервер.СтруктураПараметровСпособаЗаданияЦены();
	Возврат НастройкиПоСпособуЗаданияЦены;
	
КонецФункции

// Возвращает список значений выбора для способа задания цены
//
// Возвращаемое значение:
//   СписокЗначений Из Строка:
//     * Значение      - Строка - идентификатор формулы; 
//     * Представление - Строка - значение для списка выбора.
//
Функция ЗагружаемыеТипыЦенНаOzon() Экспорт
	
	СписокТиповЦенНаOzon = ИнтеграцияСМаркетплейсомOzonСервер.ЗагружаемыеТипыЦенНаOzon();
	Возврат СписокТиповЦенНаOzon;
	
КонецФункции

// Возвращает детальную информацию по типам цен, используемым учетными записями Ozon.
//
// Параметры:
//  ВключатьВыгружаемые - Булево - признак включения в результат функции выгружаемых типов цен.
//  ВключатьЗагружаемые - Булево - признак включения в результат функции загружаемых типов цен.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с описанием указанных типов цен учетной записи; содержит колонки:
//     * Идентификатор          - Строка - строковое обозначение типа цен.
//     * ИдентификаторДляФормул - Строка - шаблон для формирования идентификатора вида цен.
//     * Наименование           - Строка - наименование типа цен.
//     * ДляУчетнойЗаписи       - Булево - признак отношения типа цен к учетной записи или к интеграции в целом.
//     * ОбязательноеЗаполнение - Булево - признак обязательного заполнения в формах.
//     * Значение               - СправочникСсылка.ВидыЦен - пустая ссылка вида цен.
//
Функция ТипыЦенOzon(ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	СписокТиповЦенНаOzon = ИнтеграцияСМаркетплейсомOzonСервер.ТипыЦенOzon(ВключатьВыгружаемые, ВключатьЗагружаемые);
	Возврат СписокТиповЦенНаOzon;

КонецФункции

// Запускает обновление цен по видам цен
// 
// Параметры:
//   МассивВидовЦен - Массив Из СправочникСсылка.ВидыЦен - виды цен, по которым необходимо обновить цены.
//
Процедура ВыполнитьОбновлениеЦен(МассивВидовЦен) Экспорт
	
	Если ФункциональнаяОпцияИспользоватьИнтеграциюСЯндексМаркет() Тогда 
		МассивВидовЦенБезЯндексМаркет = Новый Массив;
		МассивВидовЦенЯндексМаркет    = Новый Массив;
		
		ТаблицаВидовЦен = Новый ТаблицаЗначений;
		ТаблицаВидовЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		
		Для Каждого ЭлементКоллекции Из МассивВидовЦен Цикл
			СпособЗаданияЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекции, "СпособЗаданияЦены");  
			Если СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗагружаетсяИзЯндексМаркет Тогда
				СтрокаТаблицы         = ТаблицаВидовЦен.Добавить();
				СтрокаТаблицы.ВидЦены = ЭлементКоллекции;
				
				МассивВидовЦенЯндексМаркет.Добавить(ЭлементКоллекции);
			Иначе
				МассивВидовЦенБезЯндексМаркет.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		МассивВидовЦен = ОбщегоНазначения.СкопироватьРекурсивно(МассивВидовЦенБезЯндексМаркет); 
		
		Если ТаблицаВидовЦен.Количество() > 0 Тогда
			ПараметрыЗадания = Новый Структура();
			ПараметрыЗадания.Вставить("ПоРасписанию",    Истина);
			ПараметрыЗадания.Вставить("ТаблицаВидовЦен", ТаблицаВидовЦен);
			
			ЗагрузитьРекомендованныеЦеныЯндексМаркет(Неопределено, ПараметрыЗадания);
		КонецЕсли;
	КонецЕсли;
	
	Если ФункциональнаяОпцияИспользоватьИнтеграциюСOzon() Тогда
		ВидыЦенБезOzon = Новый Массив;
		ВидыЦенOzon    = Новый Массив;
		УчетныеЗаписи  = Новый Массив;
		
		Для Каждого Элемент Из МассивВидовЦен Цикл
			СпособЗаданияЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "СпособЗаданияЦены");
			Если СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗагружаетсяСOzon Тогда
				Настройки = Элемент.ХранилищеНастроекПараметровСпособаЗаданияЦены.Получить();
				Если ТипЗнч(Настройки) = Тип("Структура") Тогда
					ВидыЦенOzon.Добавить(Элемент);
					Если УчетныеЗаписи.Найти(Настройки.УчетнаяЗаписьМаркетплейса) = Неопределено Тогда
						УчетныеЗаписи.Добавить(Настройки.УчетнаяЗаписьМаркетплейса);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ВидыЦенБезOzon.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		МассивВидовЦен = ОбщегоНазначения.СкопироватьРекурсивно(ВидыЦенБезOzon);
		
		Если ВидыЦенOzon.Количество() > 0 Тогда
			Для Каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
				ЗагрузитьЦеныOzon(УчетнаяЗапись, ВидыЦенOzon);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список настроек подключения к маркетплейсу Ozon.
//
// Возвращаемое значение:
//   СписокЗначений Из СправочникСсылка.УчетныеЗаписиМаркетплейсов - не помеченные на удаление учетные записи Ozon.
//
Функция СписокНастроекПодключенияКСервису() Экспорт
	
	СписокНастроек = ИнтеграцияСМаркетплейсомOzonСервер.СписокНастроекПодключенияКСервису();
	Возврат СписокНастроек;
	
КонецФункции  

// Возвращает типы цен, для которых необходима детализация по учетной записи.
//
// Возвращаемое значение:
//   Массив Из Строка - наименования загружаемых типов цен для учетных записей.
//
Функция ПолучитьТипыЦенНаOzonДляУчетныхЗаписей() Экспорт

	ТипыЦенНаOzonДляУчетныхЗаписей = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТипыЦенНаOzonДляУчетныхЗаписей();
	Возврат ТипыЦенНаOzonДляУчетныхЗаписей;

КонецФункции

// Вызывает локализуемую процедуру ДобавитьЗаполнитьУчетнуюЗапись.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - изменяемая форма.
//
Процедура ДобавитьЗаполнитьУчетнуюЗапись(Форма) Экспорт

	Если Форма.Параметры.Свойство("УчетнаяЗаписьМаркетплейса") Тогда
		ИнтеграцияСМаркетплейсамиСервер.ДобавитьЗаполнитьУчетнуюЗапись(Форма);
	КонецЕсли;

КонецПроцедуры

// Вызывает локализуемую процедуру ДобавитьЗаполнитьУчетнуюЗапись
//
// Параметры:
//   СтруктураНастроек - Структура - данные, структура настроек.
//   Компоновщик       - КомпоновщикНастроекКомпоновкиДанных - компоновщик макета компоновки данных.
//
Процедура ЗаполнитьУчетнуюЗапись(СтруктураНастроек, Компоновщик) Экспорт

	ИнтеграцияСМаркетплейсамиСервер.ЗаполнитьУчетнуюЗапись(СтруктураНастроек, Компоновщик);

КонецПроцедуры

// Заполняет учетную запись в настройках компоновщика данных.
//
// Параметры:
//   Форма                 - ФормаКлиентскогоПриложения - изменяемая форма.
//   НастройкиКомпоновщика - НастройкиКомпоновкиДанных - настройки компоновки данных.
//
Процедура УстановитьУчетнуюЗапись(Форма, НастройкиКомпоновщика) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "УчетнаяЗаписьМаркетплейса") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновщика, "УчетнаяЗаписьМаркетплейса", Форма.УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Добавляет учетную запись в структуру настроек.
//
// Параметры:
//   Форма             - ФормаКлиентскогоПриложения - изменяемая форма.
//   СтруктураНастроек - Структура - данные, структура настроек.
//
Процедура ДополнитьСтруктуруНастроекДляМаркетплейсов(Форма, СтруктураНастроек) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "УчетнаяЗаписьМаркетплейса") Тогда
		СтруктураНастроек.Вставить("УчетнаяЗаписьМаркетплейса", Форма.УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Дополняет текст запроса СКД для ценообразования. Вызывается из обработки ПодборТоваровПоОтбору.
//
// Параметры:
//   СтруктураНастроек     - Структура - данные, структура настроек;
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Модифицируемая схема.
//
Процедура ДополнитьСКДДляМаркетплейсов(СтруктураНастроек, СхемаКомпоновкиДанных) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураНастроек, "УчетнаяЗаписьМаркетплейса") Тогда
		ИнтеграцияСМаркетплейсамиСервер.ДополнитьСКДДляМаркетплейсов(СтруктураНастроек, СхемаКомпоновкиДанных);
	КонецЕсли;

КонецПроцедуры

// Дополняет текст запроса для подбора товаров. Вызывается из обработки ПодборТоваровВДокументПродажи.
//
// Параметры:
//   Форма              - ФормаКлиентскогоПриложения - изменяемая форма.
//   ШаблонТекстЗапроса - Строка - текст запроса для динамического списка.
//   ТипСписка          - Строка - может принимать значения: "СписокНоменклатура", "СписокХарактеристики", 
//                          "СписокНоменклатураПартнера".
//
Процедура ДополнитьТекстЗапросаДляМаркетплейсов(Форма, ШаблонТекстЗапроса, ТипСписка) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "УчетнаяЗаписьМаркетплейса") Тогда
		ИнтеграцияСМаркетплейсамиСервер.ДополнитьТекстЗапросаДляМаркетплейсов(ШаблонТекстЗапроса, ТипСписка, Форма.УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Дополняет условное оформление динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - изменяемая форма.
//
Процедура УстановитьУсловноеОформлениеДинамическихСписков(Форма) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "УчетнаяЗаписьМаркетплейса") Тогда
		ИнтеграцияСМаркетплейсамиСервер.УстановитьУсловноеОформлениеДинамическихСписков(Форма);
	КонецЕсли;

КонецПроцедуры

// Устанавливает параметры динамических списков формы подбора номенклатуры.
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения - изменяемая форма.
//   СписокНоменклатура   - ДинамическийСписок - реквизит формы СписокНоменклатура.
//   СписокХарактеристики - ДинамическийСписок - реквизит формы СписокХарактеристики.
//
Процедура УстановитьПараметрыДинамическогоСписка(Форма, СписокНоменклатура, СписокХарактеристики) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "УчетнаяЗаписьМаркетплейса") Тогда
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "УчетнаяЗаписьМаркетплейса", Форма.УчетнаяЗаписьМаркетплейса);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "УчетнаяЗаписьМаркетплейса", Форма.УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Сведения о выгруженных данных.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//     * Номенклатура              - СправочникСсылка.Номенклатура - найденная номенклатура.
//     * Характеристика            - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика.
//     * Упаковка                  - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка.
//     * ВидОбъектаМаркетплейса    - ПеречислениеСсылка.ВидыОбъектовМаркетплейсов - вид объекта маркетплейса.
//     * ОбъектПубликации          - СправочникСсылка.СертификатыНоменклатуры
//                                 - СправочникСсылка.НоменклатураПрисоединенныеФайлы - объект публикации.
//
Функция СведенияОВыгруженныхДанных() Экспорт

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
	Возврат ТаблицаТоваров;

КонецФункции

// Вызывает локализуемую процедуру ЗагрузитьЦеныТоваров
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись для загрузки.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   ВидыЦен                   - Массив Из СправочникСсылка.ВидыЦен - загружаемые цены.
//
Процедура ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ВидыЦен = Неопределено) Экспорт

	ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ВидыЦен);

КонецПроцедуры

// Возвращает значение произвольного типа параметра способа задания цены.
//
// Возвращаемое значение:
//   СправочникСсылка, Неопределено - значение пустая ссылка или Неопределено.
//
Функция ПараметрыСпособаЗаданияЦеныПроизвольныйТипПоУмолчанию() Экспорт

	ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка");
	Возврат ЗначениеПоУмолчанию;

КонецФункции

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//   Отказ                   - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка    - Булево - признак выполнения стандартной (системной) обработки события.
//   ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт

	КлючНазначенияФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.Параметры, "КлючНазначенияФормы", "");
	
	Если Не ПустаяСтрока(КлючНазначенияФормы) И Форма.Параметры.Свойство("ДополнительныеСвойстваДинамическихСписков") Тогда
		Для Каждого ДанныеДинамическогоСписка Из Форма.Параметры.ДополнительныеСвойстваДинамическихСписков Цикл
			ИмяДинамическогоСписка = ДанныеДинамическогоСписка.Ключ;
			ЗначенияДопСвойств     = ДанныеДинамическогоСписка.Значение;

			Попытка
				ДополнительныеСвойства = Форма[ИмяДинамическогоСписка].КомпоновщикНастроек.Настройки.ДополнительныеСвойства;

				Для Каждого ЗначениеДопСвойства Из ЗначенияДопСвойств Цикл
					ДополнительныеСвойства.Вставить(ЗначениеДопСвойства.Ключ, ЗначениеДопСвойства.Значение);
				КонецЦикла;
			Исключение
				// Не удалось найти реквизит формы.
				Продолжить;
			КонецПопытки;
		КонецЦикла;

		Если КлючНазначенияФормы = "РаботаСПоставкамиOzon" Тогда
			ГиперссылкаЖурналПродажи = Форма.Элементы.Найти("ГиперссылкаЖурналПродажи");
			Если ГиперссылкаЖурналПродажи <> Неопределено Тогда
				ГиперссылкаЖурналПродажи.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'См. также: <a href=""%1"">Документы поставок (оформленные накладные)</a>'"),
						"ДокументыЗакупки"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает дополнительные настройки для формы при загрузке данных из настроек.
//
// Параметры:
//   Форма                               - ФормаКлиентскогоПриложения - дополняемая форма.
//   КомпоновщикНастроекКомпоновкиДанных - НастройкиКомпоновкиДанных - источник дополнительных настроек, содержит 
//                                           настройки компоновки данных.
//
Процедура УстановитьОтборПриЗагрузкеДанныхИзНастроек(Форма, КомпоновщикНастроекКомпоновкиДанных) Экспорт

	Если Форма.ИмяФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка" Тогда
		ДополнительныеСвойства = КомпоновщикНастроекКомпоновкиДанных.ДополнительныеСвойства;
		Если ДополнительныеСвойства.Свойство("СтруктураБыстрогоОтбора")
				И ТипЗнч(ДополнительныеСвойства.СтруктураБыстрогоОтбора) = Тип("Структура") Тогда
			Форма.Организация             = ДополнительныеСвойства.СтруктураБыстрогоОтбора.Организация;
			Если ЗначениеЗаполнено(Форма.БанковскийСчетОтбор)
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.БанковскийСчетОтбор, "Владелец") <> Форма.Организация Тогда
				Форма.БанковскийСчетОтбор = ДополнительныеСвойства.СтруктураБыстрогоОтбора.БанковскийСчетОтбор;
			КонецЕсли;
			Форма.КонтрагентПредставление = ДополнительныеСвойства.СтруктураБыстрогоОтбора.КонтрагентПредставление;
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Документ.ВзаимозачетЗадолженности.Форма.ФормаСписка" Тогда
		ДополнительныеСвойства = КомпоновщикНастроекКомпоновкиДанных.ДополнительныеСвойства;
		Если ДополнительныеСвойства.Свойство("СтруктураБыстрогоОтбора")
				И ТипЗнч(ДополнительныеСвойства.СтруктураБыстрогоОтбора) = Тип("Структура") Тогда
			Форма.Организация = ДополнительныеСвойства.СтруктураБыстрогоОтбора.Организация;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает признак использования интеграции хотя бы с одним маркетплейсом.
//
// Возвращаемое значение:
//   Булево - признак использования интеграции.
//
Функция ИспользуетсяИнтеграцияСМаркетплейсами() Экспорт
	
	ИспользуетсяИнтеграцияСМаркетплейсами = ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсами();
	Возврат ИспользуетсяИнтеграцияСМаркетплейсами;
	
КонецФункции

#КонецОбласти
