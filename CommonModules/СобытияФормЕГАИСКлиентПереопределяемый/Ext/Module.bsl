#Область СлужебныйПрограммныйИнтерфейс

#Область ОбъектыБиблиотеки

// Открывает форму сопоставления классификатора ЕГАИС с номенклатурой.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы сопоставления,
//  ПараметрыОткрытияФормы - Структура - параметры, передаваемые в форму сопоставления.
//  СтандартнаяОбработка - Булево - признак открытия библиотечной формы
Процедура ОткрытьФормуСопоставленияКлассификаторовЕГАИС(
	Форма,
	ОповещениеПриЗавершении = Неопределено,
	ПараметрыОткрытияФормы  = Неопределено,
	СтандартнаяОбработка    = Истина) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Открывает форму выбора алкогольной продукции.
//
// Параметры:
//  ВладелецФормы        - ПолеВвода - поле в котором осуществляется выбор алкогольной продукции,
//  Реквизиты            - Структура    - параметры открытия формы и фильтры отбора,
//  СтандартнаяОбработка - Булево       - признак открытия библиотечной формы
Процедура ОткрытьФормуВыбораАлкогольнойПродукции(ВладелецФормы, Реквизиты, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеДокументы

// Открывает форму выбора документа перемещения товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
Процедура ОткрытьФормуВыбораДокументаПеремещениеТоваров(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	//++ НЕ ГОСИС
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	НовыйОтбор.Вставить("ЕстьАлкогольнаяПродукция", Истина);
	
	Если ТипЗнч(Отбор) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		СтруктураОтбора = ИнтеграцияЕГАИСВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(Отбор);
		
		Если ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			НовыйОтбор.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтбора.ТорговыйОбъект) Тогда
			НовыйОтбор.Вставить("СкладПолучатель", СтруктураОтбора.ТорговыйОбъект);
		КонецЕсли;
		
	Иначе
		
		Если Отбор.Свойство("Организация") Тогда
			НовыйОтбор.Вставить("Организация", Отбор.Организация);
		КонецЕсли;
		Если Отбор.Свойство("ТорговыйОбъект") Тогда
			НовыйОтбор.Вставить("СкладПолучатель", Отбор.ТорговыйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПеремещениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,,,,
		ОповещениеПриЗавершении);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Открывает форму выбора документа поступления товаров и услуг.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
Процедура ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	//++ НЕ ГОСИС
	НовыйОтбор = Новый Структура;
	НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
	НовыйОтбор.Вставить("ЕстьАлкогольнаяПродукция", Истина);
	
	Если ТипЗнч(Отбор) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		СтруктураОтбора = ИнтеграцияЕГАИСВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(Отбор);
		
		Если ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			НовыйОтбор.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтбора.ТорговыйОбъект) Тогда
			НовыйОтбор.Вставить("Склад", СтруктураОтбора.ТорговыйОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
			НовыйОтбор.Вставить("Контрагент", СтруктураОтбора.Контрагент);
		КонецЕсли;
		
	Иначе
		
		Если Отбор.Свойство("Организация") Тогда
			НовыйОтбор.Вставить("Организация", Отбор.Организация);
		КонецЕсли;
		Если Отбор.Свойство("ТорговыйОбъект") Тогда
			НовыйОтбор.Вставить("Склад", Отбор.ТорговыйОбъект);
		КонецЕсли;
		Если Отбор.Свойство("Контрагент") Тогда
			НовыйОтбор.Вставить("Контрагент", Отбор.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПриобретениеТоваровУслуг.ФормаВыбора",
		Новый Структура("Отбор", НовыйОтбор),
		Форма,,,,
		ОповещениеПриЗавершении);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Открывает форму создания нового документа поступления товаров и услуг на основании ТТН ЕГАИС.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на ТТН.
Процедура ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(ТТНВходящаяЕГАИС) Экспорт
	
	//++ НЕ ГОСИС
	ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.ФормаОбъекта", Новый Структура("Основание", ТТНВходящаяЕГАИС));
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
	Иначе
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт постановки на баланс ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт списания ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Возврат из регистра №2 ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Передача в регистр №2 ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Чек ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Чек ЕГАИС на возврат'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Запрос акцизных марок ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='ТТН ЕГАИС (исходящая)'"));
		КонецЕсли;
	КонецЕсли;
	
	ДопустимыеОсобенностиУчета = Новый Массив;
	ДопустимыеОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	ДопустимыеОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОсобенностьУчета",                        ДопустимыеОсобенностиУчета);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Форма.Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	
	ОткрытьФорму(
		"Обработка.ПодборТоваровВДокументПродажи.Форма",
		ПараметрыФормы,
		Форма,
		Форма.УникальныйИдентификатор,,,
		ОповещениеПриЗавершении);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
Процедура ОткрытьФормуСозданияНоменклатуры(ФормаВладелец, Знач Реквизиты) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыФормы = Новый Структура;
	
	ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция");
	
	Если НЕ(Реквизиты = Неопределено) Тогда
		ДополнительныеПараметры = Реквизиты;
		Если Реквизиты.Свойство("МаркируемаяПродукцияЕГАИС")
			И Не Реквизиты.МаркируемаяПродукцияЕГАИС Тогда
			Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(
					ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")) Тогда
				ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво");
			ИначеЕсли ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(
					ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")) Тогда
				ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	ДополнительныеПараметры.Вставить("ТипНоменклатуры",  ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	ПараметрыФормы.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - ФормаКлиентскогоПриложения - форма, где осуществлен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	//++ НЕ ГОСИС
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПартнерыИКонтрагенты

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма-владелец.
//  Реквизиты  - Структура - данные для заполнения нового контрагента:
//   * Наименование - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН - Строка - ИНН контрагента,
//   * КПП - Строка - КПП контрагента.
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	//++ НЕ ГОСИС
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Реквизиты);
	
	ОткрытьФорму(ПартнерыИКонтрагентыВызовСервера.ИмяФормыСозданияКонтрагента(), ПараметрыФормы, ФормаВладелец);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Открывает форму создания торгового объекта.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма-владелец.
//  Реквизиты - Структура - параметры формы создания торгового объекта.
Процедура ОткрытьФормуСозданияТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	//++ НЕ ГОСИС
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового", ПараметрыФормы, ФормаВладелец);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Открывает форму выбора контрагента.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма-владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
//  Элемент       - ПолеВвода - необязательный, элемент формы в который происходит выбор.
Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты, Элемент = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ОтборКонтрагентовЮЛ = Новый Массив;
	ОтборКонтрагентовЮЛ.Добавить(ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	ОтборКонтрагентовЮЛ.Добавить(ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
	ОтборКонтрагентовЮЛ.Добавить(ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Партнер", Реквизиты.ТорговыйОбъект);
	Отбор.Вставить("ЮрФизЛицо", ОтборКонтрагентовЮЛ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	ПараметрыФормы.Вставить("Отбор",     Отбор);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Открывает форму выбора торгового объекта.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма-владелец.
//  Реквизиты     - Структура - параметры формы создания номенклатуры.
Процедура ОткрытьФормуВыбораТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	//++ НЕ ГОСИС
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - ФормаКлиентскогоПриложения - форма, где осуществлен выбор.
Процедура ОбработкаВыбораТорговогоОбъекта(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	//++ НЕ ГОСИС
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Партнеры") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма владелец.
//  ВыбраннаяСерия         - Произвольный - результат выбора в подчиненной форме.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - форма, где осуществлен выбор.
//  ПараметрыЗаполнения    - см. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти
Процедура ОбработкаВыбораСерии(Форма, ВыбраннаяСерия, ИсточникВыбора, ПараметрыЗаполнения = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		Если Форма.ИмяФормы = "Документ.ОтчетОПроизводствеЕГАИС.Форма.ФормаДокумента"
			Или Форма.ИмяФормы = "Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента" Тогда
			ПараметрыУказанияСерий = ИсточникВыбора.ПараметрыУказанияСерий;
		КонецЕсли;
		НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбраннаяСерия);
		СтруктураДействий = Новый Структура;
		Если ЗначениеЗаполнено(ПараметрыЗаполнения) И ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
			СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
			ТекущиеДанные = Форма.Элементы[ПараметрыУказанияСерий.ИмяТЧТовары].ДанныеСтроки(ВыбраннаяСерия.ИдентификаторТекущейСтроки);
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, Неопределено);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС");
	
	Если ИмяСобытия = "ЗакрытиеФормыПроверкиИПодбораЕГАИС" Тогда
		Если Источник = Форма.УникальныйИдентификатор Тогда
		    ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
			ДополнительныеПараметры.ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС" Тогда
		Если (Параметр = Неопределено
			Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
			СобытияФормЕГАИСУТКлиент.СформироватьТекстДокументаЕГАИС(Форма);
		
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.НастройкиРМК.Форма.ФормаЭлемента" Тогда
		Если Форма.ИспользоватьРозничныеПродажи
			И ИмяСобытия = "Запись_ПараметрыПодключенияЕГАИС" Тогда
			
			ДополнительныеПараметры.ТребуетсяСерверныйВызов = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ Параметр.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС");
	
	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	Если Параметр.Основание = Объект.Ссылка Тогда
		СобытияФормЕГАИСУТКлиент.СформироватьТекстДокументаЕГАИС(Форма);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС");
	Объект  = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	Если "СвязатьСТТНЕГАИС" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ИнтеграцияЕГАИСВызовСервера.ВозможныеТТНЕГАИС(Объект.Организация, Объект.Склад, Объект.Контрагент));
		ПараметрыОткрытия = Новый Структура("Отбор", Отбор);
		
		ПараметрыОбработкиВыбораТТН = Новый Структура;
		ПараметрыОбработкиВыбораТТН.Вставить("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьВыборТТНЕГАИСИзСписка",
			СобытияФормЕГАИСУТКлиент,
			ПараметрыОбработкиВыбораТТН);
		
		ОткрытьФорму(
			"Документ.ТТНВходящаяЕГАИС.ФормаВыбора",
			ПараметрыОткрытия,
			Форма,,,,
			ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.НастройкиРМК.Форма.ФормаЭлемента" Тогда
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПараметрыПодключенияКЕГАИС" Тогда
		
		СтандартнаяОбработка = Ложь;
		СобытияФормЕГАИСУТКлиент.ОткрытьФормуПараметрыПодключенияЕГАИС(Форма, Форма);
		
	КонецЕсли;
	
КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента" Тогда
		
		Если ЗначениеЗаполнено(Форма.ТТНВходящаяЕГАИС) Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Ссылка",     Форма.ТТНВходящаяЕГАИС);
			ПараметрыОповещения.Вставить("Основание",  Форма.Объект.Ссылка);
			ПараметрыОповещения.Вставить("Перечитать", Истина);
			Оповестить("Запись_ТТНВходящаяЕГАИС", ПараметрыОповещения, Форма.Объект.Ссылка);
			Форма.ТТНВходящаяЕГАИС = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Справочник.НастройкиРМК.Форма.ФормаЭлемента" Тогда
		Если Команда.Имя = "НастроитьПараметрыПодключенияЕГАИС" Тогда
			ТекущаяСтрока = Форма.Элементы.КассыККМ.ТекущиеДанные;
			Если ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.СтатусПодключенияКЕгаис)
				И ТекущаяСтрока.СтатусПодключенияКЕгаис = "НеУказываются" Тогда
				ПоказатьПредупреждение(,НСтр("ru='Для данной кассы ККМ параметры подключения к ЕГАИС не указываются.'"));
			Иначе
				СобытияФормЕГАИСУТКлиент.ОткрытьФормуПараметрыПодключенияЕГАИС(Форма, ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	СобытияФормЕГАИСУТКлиент.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	СобытияФормЕГАИСУТКлиент.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	СобытияФормЕГАИСУТКлиент.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий номенклатуры для текущего объекта.
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения, ПараметрыУказанияСерий = "") Экспорт
	
	//++ НЕ ГОСИС
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	Если ПараметрыЗаполнения.ОбработатьУпаковки Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
	КонецЕсли;
	
		Если ПараметрыЗаполнения.ЗаполнитьЕдиницуИзмерения Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьТипНоменклатуры Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАртикул Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьКод Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакКод", Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПерезаполнитьНоменклатуруЕГАИС Тогда
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		
		Если (ПараметрыУказанияСерий = "") Тогда
			ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
		КонецЕсли;
			
		Если ПараметрыУказанияСерий <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта], ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			Склад = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта][ПараметрыУказанияСерий.ИмяПоляСклад];
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
	КонецЕсли;
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагМаркируемаяАлкогольнаяПродукция", Ложь);
	ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при создании характеристики в таблице Товары.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент              - ПолеФормы                   - поле, в котором происходит создание характеристики,
//  СтандартнаяОбработка - Булево                      - признак отказа от стандартной обработки события.
Процедура ХарактеристикаСоздание(Форма, ТекущаяСтрока, Элемент, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении упаковки в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении количества упаковок в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Если ПараметрыЗаполнения.ПерезаполнитьНоменклатуруЕГАИС Тогда
		
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма владелец.
//  ТекущиеДанные          - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
// 	КэшированныеЗначения   - Структура - Сохраненные значения параметров, используемых при обработке).
//  ПараметрыЗаполнения    - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти
Процедура ПриИзмененииСерии(Форма, ТекущиеДанные, КэшированныеЗначения = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Форма.ИмяФормы = "Документ.ОтчетОПроизводствеЕГАИС.Форма.ФормаДокумента" Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные,"ИдентификаторСтрокиТовары") Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, Форма.ПараметрыУказанияСерий.Сырье, ВыбранноеЗначение);
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, Форма.ПараметрыУказанияСерий.Товары, ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента" Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущиеДанные,"Организация") Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, Форма.ПараметрыУказанияСерий.Шапка, ВыбранноеЗначение);
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, Форма.ПараметрыУказанияСерий.Сырье, ВыбранноеЗначение);
		КонецЕсли;
	Иначе
		НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, Форма.ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения) И ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Характеристика,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при начале выбора упаковки в таблице Товары.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Упаковка,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
Процедура НачалоВыбораУпаковки(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Вызывается перед обработкой штрихкодов, не привязанных ни к одной номенклатуре.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после выполнения обработки,
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканировали штрихкоды,
//  ИмяСобытия - Строка - имя события, инициировавшее оповещение,
//  Параметр - Структура - данные для обработки,
//  Источник - Произвольный - источник события.
Процедура ОбработкаОповещенияОбработаныНеизвестныеШтрихкоды(ОписаниеОповещения, Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	//++ НЕ ГОСИС
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкодов);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм передачи данных в ТСД.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, инициировавшая выгрузку.
Процедура ВыгрузитьДанныеВТСД(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм заполнения формы данными из ТСД.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после заполнения данных формы,
//  Форма - ФормаКлиентскогоПриложения - форма, данные в которой требуется заполнить,
//  РезультатВыполнения - (См. МенеджерОборудованияКлиент.ПараметрыВыполненияОперацииНаОборудовании).
Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	//++ НЕ ГОСИС
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		СобытияФормИСКлиент.СообщитьОбОшибке(РезультатВыполнения);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
