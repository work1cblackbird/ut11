#Область ПрограммныйИнтерфейс

// Процедура-обработчик события "ПередЗаписью" справочников для регистрации изменений объектов в узлах плана обмена.
//
// Параметры:
//  Источник       - СправочникОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ЗарегистрироватьИзмененияСправочникаДляОбменаСМобильнымПриложениемТорговыйПредставитель(Источник, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяРаботаЧерезТорговыхПредставителей") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ТребуетсяПроверитьРегистрацию", Истина);
	Иначе	
		Источник.ДополнительныеСвойства.Вставить("ВозможноУдалениеРегистрацииИзменений", Истина);
		ВыборочнаяРегистрацияОбъекта(Источник, Отказ, "МобильноеПриложениеТорговыйПредставитель");
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для регистрации изменений объектов в узлах плана обмена.
//
// Параметры:
//  Источник       - ДокументОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи.
//  РежимПроведения - РежимПроведенияДокумента -Режим проведения.
// 
Процедура ЗарегистрироватьИзмененияДокументаДляОбменаСМобильнымПриложениемТорговыйПредставитель(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяРаботаЧерезТорговыхПредставителей") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Источник.ДополнительныеСвойства.Вставить("ВозможноУдалениеРегистрацииИзменений", НЕ Источник.ЭтоНовый());
	ВыборочнаяРегистрацияОбъекта(Источник, Отказ, "МобильноеПриложениеТорговыйПредставитель");

КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для регистрации изменений в узлах плана обмена.
//
// Параметры:
//  Источник       - РегистрСведенийНаборЗаписей - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура ЗарегистрироватьИзмененияРегистраСведенийДляОбменаСМобильнымПриложениемТорговыйПредставитель(Источник, Отказ, Замещение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяРаботаЧерезТорговыхПредставителей") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Источник.ДополнительныеСвойства.Вставить("ВозможноУдалениеРегистрацииИзменений", Истина);
	ВыборочнаяРегистрацияОбъекта(Источник, Отказ, "МобильноеПриложениеТорговыйПредставитель");

КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" справочников для регистрации изменений объектов в узлах плана обмена.
//
// Параметры:
//  Источник       - СправочникОбъект - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ЗарегистрироватьИзмененияСправочникаПриЗаписиДляОбменаСМобильнымПриложениемТорговыйПредставитель(Источник, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяРаботаЧерезТорговыхПредставителей") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПроверитьРегистрацию = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ТребуетсяПроверитьРегистрацию", ТребуетсяПроверитьРегистрацию) Тогда
		Если ТребуетсяПроверитьРегистрацию Тогда			
			ВыборочнаяРегистрацияОбъекта(Источник, Отказ, "МобильноеПриложениеТорговыйПредставитель");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует и возвращает массив, содержащий имена полей, на которые могут накладываться отборы.
//
// Параметры:
//  ИмяКласса - Строка - имя класса, к которому принадлежит объект (Справочники, Документы и т.д).
//  ИмяОбъекта - Строка - имя объекта метаданных, для которого формируется массив полей.
//
// Возвращаемое значение:
//  Массив - массив, содержащий имена полей.
//
Функция ПоляОтбораДляОбъекта(ИмяКласса, ИмяОбъекта) Экспорт

	МассивПолей = Новый Массив();

	Если ИмяКласса = "Справочники" Тогда

		Если ИмяОбъекта = "Партнеры" Тогда
			МассивПолей.Добавить("ОбслуживаетсяТорговымиПредставителями");
			МассивПолей.Добавить("Клиент");
		ИначеЕсли ИмяОбъекта = "СоглашенияСКлиентами" Тогда
			МассивПолей.Добавить("Статус");
			МассивПолей.Добавить("Типовое");
		ИначеЕсли ИмяОбъекта = "ДоговорыКонтрагентов" Тогда
			МассивПолей.Добавить("Статус");
			МассивПолей.Добавить("ХозяйственнаяОперация");
		ИначеЕсли ИмяОбъекта = "Контрагенты" Тогда
			МассивПолей.Добавить("Партнер");
		ИначеЕсли ИмяОбъекта = "КонтактныеЛицаПартнеров" Тогда
			МассивПолей.Добавить("Владелец");
		ИначеЕсли ИмяОбъекта = "ВидыЦен" Тогда
			МассивПолей.Добавить("ИспользоватьПриПродаже");
		ИначеЕсли ИмяОбъекта = "УпаковкиНоменклатуры" Тогда
			МассивПолей.Добавить("Владелец");
		ИначеЕсли ИмяОбъекта = "ХарактеристикиНоменклатуры" Тогда
			МассивПолей.Добавить("Владелец");
		КонецЕсли;

	ИначеЕсли ИмяКласса = "Документы" Тогда

		Если ИмяОбъекта = "ЗаданиеТорговомуПредставителю" Тогда
			МассивПолей.Добавить("Партнер");
			МассивПолей.Добавить("Статус");
			МассивПолей.Добавить("ТорговыйПредставитель");
		КонецЕсли;

	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда

		Если ИмяОбъекта = "ЦеныНоменклатуры" Тогда
			МассивПолей.Добавить("ВидЦены");
			МассивПолей.Добавить("Номенклатура");
		ИначеЕсли ИмяОбъекта = "ДоступностьТоваровДляВнешнихПользователей" Тогда
			МассивПолей.Добавить("Номенклатура");
			МассивПолей.Добавить("Склад");
		КонецЕсли;

	КонецЕсли;

	Возврат МассивПолей;

КонецФункции

// Возвращает структуру, содержащую имя таблицы для выборки и массив полей, которые нужно выбрать.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных, структуру описания которого требуется получить.
//  Изменения - Булево - признак того, что в качестве таблицы для выборки выступает таблица изменений.
//
// Возвращаемое значение:
//  Структура - структура, содержащая описание объекта метаданных, с полями:
//  	* ИмяКласса - Строка - имя класса объекта метаданных.
//      * ИмяОбъекта - Строка - имя объекта метаданных
//      * ИмяТаблицы - Строка - имя таблицы объекта.
//
Функция ОписаниеОбъекта(ОбъектМетаданных, Изменения) Экспорт

	Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Константы";
		ИмяТаблицы = "Константы";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Справочники";
		ИмяТаблицы = "Справочник." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Документы";
		ИмяТаблицы = "Документ." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "РегистрыСведений";
		ИмяТаблицы = "РегистрСведений." + ОбъектМетаданных.Имя;
	КонецЕсли;	
	
	// Если требуется только выборка изменений, то выбирать необходимо по таблицам изменений.
	Если Изменения Тогда
		ИмяТаблицы = ИмяТаблицы + ".Изменения";
	КонецЕсли;
	
	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("ИмяКласса", ИмяКласса);
	СтруктураОписания.Вставить("ИмяОбъекта", ОбъектМетаданных.Имя);
	СтруктураОписания.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Возврат СтруктураОписания;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет выборочную регистрацию изменений, с учетом правил обмена.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - объект, изменения которого регистрируются.
//  Отказ - Булево - отказ от записи объекта.
//  ИмяПланаОбмена - Строка - имя используемого плана обмена.
//
Процедура ВыборочнаяРегистрацияОбъекта(Объект, Отказ, ИмяПланаОбмена)
	
	// Если при записи объекта был произведен отказ, то дальнейшего анализа не требуется -
	// никаких изменений не будет.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Если объект не входит в состав плана обмена, то регистрировать нечего.
	Если Не Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Содержит(МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОписанияОбъекта = ОписаниеОбъекта(МетаданныеОбъекта, Ложь);
	
	ВыборкаУзлов = ПланыОбмена[ИмяПланаОбмена].Выбрать();

	Пока ВыборкаУзлов.Следующий() Цикл

		Если Объект.ОбменДанными.Загрузка Тогда
			Если Объект.ОбменДанными.Отправитель = ВыборкаУзлов.Ссылка Тогда
				// Для узла, по которому пришли изменения, их регистрировать не нужно.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаУзлов.Ссылка <> ПланыОбмена[ИмяПланаОбмена].ЭтотУзел() Тогда
			
			НеРегистрироватьИзменения = Ложь;
			Если Объект.ДополнительныеСвойства.Свойство("НеРегистрироватьИзменения", НеРегистрироватьИзменения) Тогда
				Если НеРегистрироватьИзменения Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектПодлежитРегистрацииВУзле(Объект, СтруктураОписанияОбъекта, ВыборкаУзлов.Ссылка) Тогда
				Объект.ОбменДанными.Получатели.Добавить(ВыборкаУзлов.Ссылка);
			Иначе
				ВозможноУдалениеРегистрацииИзменений = Ложь;
				Если Объект.ДополнительныеСвойства.Свойство("ВозможноУдалениеРегистрацииИзменений", ВозможноУдалениеРегистрацииИзменений) Тогда
					Если ВозможноУдалениеРегистрацииИзменений Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзлов.Ссылка, Объект);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Проверяет, подлежит ли объект регистрации в указанном узле обмена.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - объект, изменения которого регистрируются.
//  СтруктураОписанияОбъекта - Структура - структура, содержащая описание объекта.
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена, для которого проверяется необходимость регистрации.
//
// ВозвращаемоеЗначение:
//  Булево - признак необходимости регистрации объекта.
//
Функция ОбъектПодлежитРегистрацииВУзле(Объект, СтруктураОписанияОбъекта, УзелОбмена)
	
	ИмяКласса = СтруктураОписанияОбъекта.ИмяКласса;
	ИмяОбъекта = СтруктураОписанияОбъекта.ИмяОбъекта;
	
	Если ИмяКласса = "Константы" Тогда
		// Для констант никаких условий отбора не задается, поэтому изменения регистрируем всегда.
		Возврат Истина;
	Иначе
		
		МассивПолей = ПоляОтбораДляОбъекта(ИмяКласса, ИмяОбъекта);
		
		Если ИмяКласса = "Справочники" ИЛИ ИмяКласса = "Документы" Тогда
			
			Если МассивПолей.Найти("Ссылка") = Неопределено Тогда
				МассивПолей.Добавить("Ссылка");
			КонецЕсли;
			
			ТаблицаДанныхОбъекта = Новый ТаблицаЗначений();
			СтруктураРеквизитовОбъекта = Новый Структура();
			
			Для Каждого Поле Из МассивПолей Цикл
				ТаблицаДанныхОбъекта.Колонки.Добавить(Поле);
			КонецЦикла;
			
			СтрокаТаблицы = ТаблицаДанныхОбъекта.Добавить();
			Для Каждого Поле Из МассивПолей Цикл
				СтрокаТаблицы[Поле] = Объект[Поле];
				СтруктураРеквизитовОбъекта.Вставить(Поле, Объект[Поле]);
			КонецЦикла;
		
			Возврат МобильныеПриложения.ТребуетсяРегистрацияИзмененийОбъекта(СтруктураРеквизитовОбъекта, СтруктураОписанияОбъекта, МассивПолей, ТаблицаДанныхОбъекта, УзелОбмена);
			
		ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
