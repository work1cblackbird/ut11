#Область ПрограммныйИнтерфейс

// Версия API.
// 
// Возвращаемое значение:
//  Строка - Версия API
Функция ВерсияAPI() Экспорт
	
	Возврат "1.0.9";
	
КонецФункции

// Версия сервиса API.
// 
// Возвращаемое значение:
//  Строка - Версия сервиса API
Функция ВерсияСервисаAPI() Экспорт
	
	Возврат "1.0.5";
	
КонецФункции

// Поддерживаемые версии API.
// 
// Возвращаемое значение:
//  Массив из Строка - Поддерживаемые версии API
Функция ПоддерживаемыеВерсииAPI() Экспорт
	
	Версии = Новый Массив;
	
	Версии.Добавить(ВерсияAPI());
	Версии.Добавить("1.0.7");
	
	Возврат Версии;
	
КонецФункции

// Поддерживаемые версии сервиса API.
// 
// Возвращаемое значение:
//  Массив из Строка - Поддерживаемые версии сервиса API
Функция ПоддерживаемыеВерсииСервисаAPI() Экспорт
	
	Версии = Новый Массив;
	
	Версии.Добавить(ВерсияСервисаAPI());
	
	Возврат Версии;
	
КонецФункции

// Возвращает структуру параметров оптимизации по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Параметры оптимизации по умолчанию:
// * КоличествоЗапросовВМинуту - Число - 
// * ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата - Число - 
// * ИнтервалМеждуПолучениемРезультатов - Число - 
// * ТаймаутHTTPЗапросов - Число - 
// * КоличествоЭлементовСтраницыОтвета - Число - 
// * КоличествоЭлементовСтраницыОтветаСправочника - Число - 
// * АдресСервераТестовыйКонтур - Строка - 
// * АдресСервера - Строка - 
// * ВерсияAPI - Строка - 
// * ВерсияСервисаAPI - Строка - 
// * ИспользоватьПодтверждениеПолученияСообщения - Булево - 
// * ДатаОграниченияГлубиныДереваПартий - Дата - 
// * УчитываемыеВидыПродукции - см. УчитываемыеВидыПродукции
// * ПоддерживаемыеВерсииAPI - Массив из Строка -
// * ПоддерживаемыеВерсииСервисаAPI - Массив из Строка - 
Функция ПараметрыОптимизацииПоУмолчанию() Экспорт
	
	ПараметрыОптимизации = Новый Структура;
	ПараметрыОптимизации.Вставить("КоличествоЗапросовВМинуту",                          14);
	ПараметрыОптимизации.Вставить("ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата", 60);
	ПараметрыОптимизации.Вставить("ИнтервалМеждуПолучениемРезультатов",                 30);
	ПараметрыОптимизации.Вставить("ТаймаутHTTPЗапросов",                                30);
	ПараметрыОптимизации.Вставить("КоличествоЭлементовСтраницыОтвета",                  100);
	ПараметрыОптимизации.Вставить("КоличествоЭлементовСтраницыОтветаСправочника",       1000);
	ПараметрыОптимизации.Вставить("АдресСервераТестовыйКонтур",                         "demo-zerno.fors.ru");
	ПараметрыОптимизации.Вставить("АдресСервера",                                       "zerno.mcx.gov.ru");
	ПараметрыОптимизации.Вставить("ВерсияAPI",                                          ВерсияAPI());
	ПараметрыОптимизации.Вставить("ВерсияСервисаAPI",                                   ВерсияСервисаAPI());
	ПараметрыОптимизации.Вставить("ИспользоватьПодтверждениеПолученияСообщения",        Истина);
	ПараметрыОптимизации.Вставить("ДатаОграниченияГлубиныДереваПартий",                 Дата(1, 1, 1));
	ПараметрыОптимизации.Вставить("УчитываемыеВидыПродукции",                           УчитываемыеВидыПродукции());
	ПараметрыОптимизации.Вставить("ПоддерживаемыеВерсииAPI",                            ПоддерживаемыеВерсииAPI());
	ПараметрыОптимизации.Вставить("ПоддерживаемыеВерсииСервисаAPI",                     ПоддерживаемыеВерсииСервисаAPI());
	
	Возврат ПараметрыОптимизации;
	
КонецФункции

// Возвращает структуру параметров оптимизации.
// В случае, если константы "Настройки обмена ЗЕРНО" и "Интервал запроса измененных данных ЗЕРНО" не заполнены
// - возвращает параметры по умолчанию. см. ПараметрыОптимизацииПоУмолчанию. 
//
// Возвращаемое значение:
//  см. ПараметрыОптимизацииПоУмолчанию
//
Функция ПараметрыОптимизации() Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		НастройкиОбменаЗЕРНО = Константы.НастройкиОбменаЗЕРНО.Получить().Получить();
	КонецЕсли;
	
	ПараметрыОптимизации = ПараметрыОптимизацииПоУмолчанию();
	
	Если НастройкиОбменаЗЕРНО <> Неопределено Тогда
		
		Если НастройкиОбменаЗЕРНО.Свойство("КоличествоЗапросовВМинуту") Тогда
			ПараметрыОптимизации.КоличествоЗапросовВМинуту = НастройкиОбменаЗЕРНО.КоличествоЗапросовВМинуту;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата") Тогда
			ПараметрыОптимизации.ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата = НастройкиОбменаЗЕРНО.ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("ИнтервалМеждуПолучениемРезультатов") Тогда
			ПараметрыОптимизации.ИнтервалМеждуПолучениемРезультатов = НастройкиОбменаЗЕРНО.ИнтервалМеждуПолучениемРезультатов;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("ТаймаутHTTPЗапросов") Тогда
			ПараметрыОптимизации.ТаймаутHTTPЗапросов = НастройкиОбменаЗЕРНО.ТаймаутHTTPЗапросов;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("КоличествоЭлементовСтраницыОтвета") Тогда
			ПараметрыОптимизации.КоличествоЭлементовСтраницыОтвета = НастройкиОбменаЗЕРНО.КоличествоЭлементовСтраницыОтвета;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("КоличествоЭлементовСтраницыОтветаСправочника") Тогда
			ПараметрыОптимизации.КоличествоЭлементовСтраницыОтветаСправочника = НастройкиОбменаЗЕРНО.КоличествоЭлементовСтраницыОтветаСправочника;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("АдресСервера") Тогда
			ПараметрыОптимизации.АдресСервера = НастройкиОбменаЗЕРНО.АдресСервера;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("АдресСервераТестовыйКонтур") Тогда
			ПараметрыОптимизации.АдресСервераТестовыйКонтур = НастройкиОбменаЗЕРНО.АдресСервераТестовыйКонтур;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("ВерсияAPI") Тогда
			ПараметрыОптимизации.ВерсияAPI = НастройкиОбменаЗЕРНО.ВерсияAPI;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("ИспользоватьПодтверждениеПолученияСообщения") Тогда
			ПараметрыОптимизации.ИспользоватьПодтверждениеПолученияСообщения = НастройкиОбменаЗЕРНО.ИспользоватьПодтверждениеПолученияСообщения;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("ДатаОграниченияГлубиныДереваПартий") Тогда
			ПараметрыОптимизации.ДатаОграниченияГлубиныДереваПартий = НастройкиОбменаЗЕРНО.ДатаОграниченияГлубиныДереваПартий;
		КонецЕсли;
		Если НастройкиОбменаЗЕРНО.Свойство("УчитываемыеВидыПродукции") Тогда
			ПараметрыОптимизации.УчитываемыеВидыПродукции = ПоместитьВоВременноеХранилище(НастройкиОбменаЗЕРНО.УчитываемыеВидыПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОптимизации;
	
КонецФункции

// Пакеты XDTO.
// 
// Возвращаемое значение:
//  Структура - Пакеты XDTO:
// * ВерсияAPI - Строка - 
// * ВерсияСервисаAPI - Строка - 
// * СписокAPI - Массив из ПакетXDTO - 
// * СписокСервисаAPI - Массив из ПакетXDTO - 
Функция ПакетыXDTO() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ВерсияAPI",        ВерсияAPI());
	ВозвращаемоеЗначение.Вставить("ВерсияСервисаAPI", ВерсияСервисаAPI());
	
	ПакетыXDTO = Новый Массив;
	
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_sdiz_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_lots_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_dictionaries_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_grainmonitor_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_sdiz_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_dictionary_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_organizations_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_common_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_lots_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_grainmonitor_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_commontypes_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_sdiz_1_0_6);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_sdiz_1_0_6);
	
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_dictionaries_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_dictionary_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_lots_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_organizations_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_common_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_sdiz_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_sdiz_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_grainmonitor_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_grainmonitor_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_lots_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_sdiz_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_sdiz_1_0_7);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_commontypes_1_0_7);
	
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_dictionaries_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_dictionary_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_lots_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_organizations_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_common_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_sdiz_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_sdiz_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_grainmonitor_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_grainmonitor_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_lots_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_sdiz_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_sdiz_1_0_8);
	
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_dictionaries_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_dictionary_1_0_8);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_lots_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_organizations_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_common_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_gpb_sdiz_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_gpb_sdiz_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_grainmonitor_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_grainmonitor_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_lots_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_api_sdiz_1_0_9);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_sdiz_1_0_9);
	
	ВозвращаемоеЗначение.Вставить("СписокAPI", ПакетыXDTO);
	
	ПакетыXDTO = Новый Массив;
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_ws_types_1_0_5);
	ПакетыXDTO.Добавить(Метаданные.ПакетыXDTO.zerno_ws_faults_1_0_5);
	
	ВозвращаемоеЗначение.Вставить("СписокСервисаAPI", ПакетыXDTO);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция определяет признак использования справочника транспортных средств.
//
// Возвращаемое значение:
//	Булево - Признак использования справочника транспортных средств.
//
Функция УказываетсяТранспортноеСредство() Экспорт
	
	УказываетсяТранспортноеСредство = Ложь;
	ИнтеграцияЗЕРНОПереопределяемый.УказываетсяТранспортноеСредство(УказываетсяТранспортноеСредство);
	Возврат УказываетсяТранспортноеСредство;
	
КонецФункции

// Устанавливает видимость команды "Выполнить обмен" в формах документов, протокола и панели обмена с ЗЕРНО.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма с кнопкой "Выполнить обмен с ФГИС ЗЕРНО"
//  ИмяЭлемента - Строка - Имя кнопки формы
Процедура УстановитьВидимостьКомандыВыполнитьОбмен(Форма, ИмяЭлемента) Экспорт
	
	Если НЕ ОбщегоНазначенияИС.ПравоОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ДокументыЗЕРНО, "Изменение") Тогда
		Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументовЗЕРНО(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	РаботаСФайлами.УстановитьПометкуУдаленияПрисоединенныхФайлов(Источник, Отказ);
	
КонецПроцедуры

#Область СтатусыОформления

// Возвращает допустимые типы документа-основания для указанного документа ЗЕРНО.
//
// Параметры:
//	МетаданныеДокументаЗЕРНО - ОбъектМетаданных - метаданные документа из ОпределяемыйТип.ДокументыЗЕРНОПоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	ОписаниеТипов - ОпределяемыйТип.Основание<МетаданныеДокументаЗЕРНО.Имя>.Тип
//		тип реквизита ДокументОснование указанного документа ЗЕРНО
//
Функция ДокументыОснованияДляДокументаЗЕРНО(МетаданныеДокументаЗЕРНО) Экспорт
	
	ТипыОснования = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокументаЗЕРНО).Тип;
	
	Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ПогашениеСДИЗЗЕРНО Тогда
		ТипыОснования = Новый ОписаниеТипов(ТипыОснования, "СправочникСсылка.СДИЗЗЕРНО");
	КонецЕсли;
	
	Возврат ТипыОснования;
	
КонецФункции

// При создании на сервере формы списка документов ЗЕРНО.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИменаСписков - Строка - Имена списков
//  ИменаСписковКОформлению - Строка - Имена списков к оформлению
Процедура ПриСозданииНаСервереФормыСпискаДокументовЗЕРНО(Форма, ИменаСписков, ИменаСписковКОформлению) Экспорт
	
	ИмяДокумента = ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь);
	
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено
		ИЛИ НЕ Метаданные.ОпределяемыеТипы.ДокументыЗЕРНОПоддерживающиеСтатусыОформления.Тип.СодержитТип(Тип("ДокументСсылка." + ИмяДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	МетаРеквизитОснование      = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(Метаданные.Документы[ИмяДокумента]);
	ТипыДокументаОснования     = МетаРеквизитОснование.Тип.Типы();
	СтрокиСоединенияДокументов = Новый Массив;
	СтрокиОтбораДокументов     = Новый Массив;
	
	// Подготовим строки соединения и отбора по доступным документам-основаниям.
	Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
		
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим соединение с документом-основанием для RLS.
		СтрокиСоединенияДокументов.Добавить("	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК ДоступКДокументу" + МетаданныеОснования.Имя + "
			|		ПО Таблица.ДокументОснование = ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка");
		
		СтрокиОтбораДокументов.Добавить("ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
		
	КонецЦикла;
	
	Если СтрокиОтбораДокументов.Количество() = 0 Тогда
		
		// Нет ни одного доступного документа-основания.
		ТекстСоединения = "";
		ТекстОтбора =     " И ЛОЖЬ";
		
	Иначе
		
		ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
		ТекстОтбора     = " ИЛИ " + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + " ИЛИ ");
		
	КонецЕсли;
	
	//Выполним общие действия для всех динамических список формы.
	ИменаВсехСписков = ИменаСписков + ?(ИменаСписковКОформлению = "" ИЛИ ИменаСписков = "", "", ", ") + ИменаСписковКОформлению;
	СпискиКОформлению = Новый Структура(ИменаСписковКОформлению);
	
	Для Каждого ИмяСписка Из Новый Структура(ИменаВсехСписков) Цикл
		
		Список = Форма[ИмяСписка.Ключ];
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"ПустойДокументОснование",
			ИнтеграцияИС.МассивПустыхЗначенийСоставногоТипа(МетаРеквизитОснование.Тип));
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"БезОтбораПоОрганизацииЗЕРНО",
			Истина);
		
		Список.ТекстЗапроса = СтрЗаменить(
			Список.ТекстЗапроса,
			"//%СоединениеСОснованиями%",
			?(СпискиКОформлению.Свойство(ИмяСписка.Ключ),
				СтрЗаменить(ТекстСоединения, ".ДокументОснование", ".Основание"),
				ТекстСоединения));
		
		Список.ТекстЗапроса = СтрЗаменить(
			Список.ТекстЗапроса,
			"//%ОтборПоДоступнымОснованиям%",
			ТекстОтбора);
		
	КонецЦикла;
		
	УстановитьВидимостьКомандыВыполнитьОбмен(Форма, "СписокВыполнитьОбмен");
	
КонецПроцедуры

// Используется интеграция в форме документа основания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Объект - ДанныеФормыСтруктура
// 
// Возвращаемое значение:
//  Булево - Используется интеграция в форме документа основания
Функция ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если Не ИнтеграцияЗЕРНОВызовСервера.ВестиУчетПродукции() Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовЗЕРНО.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеОформленныхДокументовЗЕРНО(МетаданныеДокументаЗЕРНО, ДокументОснование, ДокументыПоОснованию, СтатусыОформления) Экспорт
	
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокументаЗЕРНО);
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокументаЗЕРНО)
		И МетаданныеДокументаЗЕРНО <> Метаданные.Документы.ПогашениеСДИЗЗЕРНО;
	
	Если НЕ ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов 			 = ДокументыПоОснованию[МетаданныеДокументаЗЕРНО.Имя];
	ШаблонПредставленияДокумента = ШаблонПредставленияДокументаЗЕРНОДляПоляИнтеграции(МетаданныеДокументаЗЕРНО, ДокументОснование);
	
	АрхивныйСтатус = Ложь;
	Если СтатусыОформления.Свойство(МетаданныеДокументаЗЕРНО.Имя) Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокументаЗЕРНО.Имя].Статус;
		АрхивныйСтатус   = СтатусыОформления[МетаданныеДокументаЗЕРНО.Имя].Архивный;
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ПустаяСсылка();
	КонецЕсли;
	
	ИмяКоманды   = Неопределено;
	ТекстНадписи = Неопределено;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		Если МассивДокументов.Количество() = 1 Тогда
			
			Если АрхивныйСтатус Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Иначе
				ИмяКоманды = ШаблонПредставленияДокумента.ИмяКомандыОткрыть;
			КонецЕсли;
			
			Статус = МассивДокументов[0].Статус;
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияДокумента.ПредставлениеДокумента,
				Статус);
				
			НуженРазделительВТексте = ЗначениеЗаполнено(Статус);
			
		Иначе
			
			ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыОткрытьПротоколОбмена;
			Если АрхивныйСтатус Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.СтатусОформленияАрхивный;
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокумента.ПредставлениеНесколькихДокументов,
					СокрЛП(МассивДокументов.Количество()));
			КонецЕсли;
			
			НуженРазделительВТексте = Истина;
			
		КонецЕсли;
		
		МассивИсходныйДокумент = Новый Массив;
		МассивИсходныйДокумент.Добавить(ДокументОснование); 
		
		МассивДокументовНеТребующихРасчет = РасчетСтатусовОформленияЗЕРНОПереопределяемый.ПроверитьДокументыИсключитьНеТребующиеКоличественнойПроверкиСтатусов(МассивИсходныйДокумент);
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено
			И Не АрхивныйСтатус
			И Не МассивДокументовНеТребующихРасчет.Количество() = МассивИсходныйДокумент.Количество() Тогда
			ТекстНадписи = ТекстНадписи + ?(НуженРазделительВТексте, ", ", "") + СокрЛП(СтатусОформления);
		КонецЕсли;
		
	Иначе
		
		Если Не АрхивныйСтатус
			И ДокументПоддерживаетКорректировку(МетаданныеДокументаЗЕРНО)
			И СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздатьКорректировочныйДокумент;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздатьКорректировочныйДокумент;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
			
		ИначеЕсли Не АрхивныйСтатус
			И ТребуетсяСозданиеКорректировочногоДокумента(МетаданныеДокументаЗЕРНО, ДокументОснование) Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздатьКорректировочныйДокумент;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздатьКорректировочныйДокумент;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
			
		ИначеЕсли Не АрхивныйСтатус И СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокумента.ДокументНеСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстНадписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
		,
		ИмяКоманды);
	
	// Оформление и погашение СДИЗ по одному документу
	Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ОформлениеСДИЗЗЕРНО И МассивДокументов.Количество() > 0 Тогда
		ПравоДобавления = ПравоДоступа("Добавление", Метаданные.Документы.ПогашениеСДИЗЗЕРНО);
		Если ПравоДобавления Тогда
			СДИЗКПогашению = Документы.ПогашениеСДИЗЗЕРНО.СДИЗКПогашению(ДокументОснование);
			Если СДИЗКПогашению.Количество() Тогда
				ШаблонПредставленияДокумента = ШаблонПредставленияДокументаЗЕРНОДляПоляИнтеграции(
					Метаданные.Документы.ПогашениеСДИЗЗЕРНО, ДокументОснование);
				ТекстНадписи = ШаблонПредставленияДокумента.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокумента.ИмяКомандыСоздать;
				ТекстНадписиПогашения = Новый ФорматированнаяСтрока(
					ТекстНадписи,, ЦветаСтиля.ГиперссылкаЦвет,, ИмяКоманды);
				ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
					ФорматированныйТекстНадписи, ", ", ТекстНадписиПогашения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Описание = Новый Структура;
	Описание.Вставить("ТекстНадписи",        ФорматированныйТекстНадписи);
	Описание.Вставить("СтатусОформления",    СтатусОформления);
	Описание.Вставить("МассивДокументов",    МассивДокументов);
	Описание.Вставить("МетаданныеДокумента", МетаданныеДокументаЗЕРНО);
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонПредставленияДокументаЗЕРНОДляПоляИнтеграции(МетаданныеДокументаЗЕРНО, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "ЗЕРНО";
	ИмяДокумента = МетаданныеДокументаЗЕРНО.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокументаЗЕРНО.Синоним;
	ФормыИмениДокумента.Склоненная = НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2); // имя с маленькой буквы
	ФормыИмениДокумента.РодИмени   = "С";
	
	Если МетаданныеДокументаЗЕРНО = Метаданные.Документы.ЗапросОстатковПартийЗЕРНО Тогда
		
		ФормыИмениДокумента.РодИмени = "М";
		
	КонецЕсли;
	
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			" "+НСтр("ru='оформлять не требуется'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='оформлена'"), НСтр("ru='оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='создана'"), НСтр("ru='создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='получена'"), НСтр("ru='получено'")))));
				
	// корректировочный документ
	Если ДокументПоддерживаетКорректировку(МетаданныеДокументаЗЕРНО) Тогда
		
		ПредставлениеДокумента = ПредставлениеДокументаПоддерживающегоКорректировку(МетаданныеДокументаЗЕРНО);
		
		ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
		ФормыИмениДокумента.Основная   = ПредставлениеДокумента.Корректировочный;
		ФормыИмениДокумента.Склоненная = ПолучитьСклоненияСтроки(НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2), "Л=ru_RU", "ПД=Винительный")[0];
		ФормыИмениДокумента.РодИмени   = "Ж";
		
		Шаблон.Вставить("ПредставлениеКорректировочногоДокумента",           ФормыИмениДокумента.Основная + ": %1");
		Шаблон.Вставить("ПредставлениеНесколькихКорректировочныхДокументов", ФормыИмениДокумента.Основная + " (%1)");
		
		Шаблон.Вставить("ПредставлениеКомандыСоздатьКорректировочныйДокумент",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
		Шаблон.Вставить("ПредставлениеКомандыОткрытьКорректировочныйДокумент",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
			
		Шаблон.Вставить("ИмяКомандыСоздатьКорректировочныйДокумент", ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента, Истина));
		
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// см. ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализРасхожденийПриДвиженииЗЕРНО);
	
КонецПроцедуры

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка           - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив из Строка - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = Метаданные.ПараметрыСеанса.ПараметрыЛогированияЗапросовЗЕРНО.Имя Тогда
		ЛогированиеЗапросовИС.УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//  ИменаСправочников - Соответствие из КлючИЗначение - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ДокументыЗЕРНО.Тип.СодержитТип(ТипВладелецФайла)
		Или Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("ЗЕРНОПрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// см. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекРаботыСФайлами(Настройки) Экспорт
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ДокументыЗЕРНО.Тип.Типы() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Настройки.НеОчищатьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСинхронизироватьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСоздаватьФайлыПоШаблону.Добавить(МетаданныеТипа);
	КонецЦикла;
	
КонецПроцедуры

// Шаблон представления документа для поля интеграции.
// 
// Параметры:
//  МетаданныеДокумента Метаданные документа
//  ДокументОснование Документ основание
// 
// Возвращаемое значение:
//  Структура - Шаблон представления документа для поля интеграции:
// * ПредставлениеДокумента - Число - 
// * ПредставлениеНесколькихДокументов - Число - 
// * ИмяКомандыСоздать - Строка - 
// * ИмяКомандыОткрыть - Строка - 
// * ИмяКомандыОткрытьПротоколОбмена - Строка - 
// * ПредставлениеКомандыСоздать - Строка - 
// * ПредставлениеКомандыОткрыть - Строка - 
// * СтатусОформленияАрхивный - Строка - 
// * ДокументНеОформлен - Строка - 
// * ДокументНеСоздан - Строка - 
// * ДокументНеПолучен - Строка - 
// * ПредставлениеКорректировочногоДокумента - Число - 
// * ПредставлениеНесколькихКорректировочныхДокументов - Число - 
// * ПредставлениеКомандыСоздатьКорректировочныйДокумент - Строка - 
// * ПредставлениеКомандыОткрытьКорректировочныйДокумент - Строка - 
// * ИмяКомандыСоздатьКорректировочныйДокумент - Строка - 
Функция ШаблонПредставленияДокументаДляПоляИнтеграции(МетаданныеДокумента, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "ЗЕРНО";
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокумента.Синоним;
	ФормыИмениДокумента.Склоненная = ПолучитьСклоненияСтроки(НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2), "Л=ru_RU", "ПД=Винительный")[0];
	ФормыИмениДокумента.РодИмени   = "Ж";
	
	// документ стандартный
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			НСтр("ru = 'в архиве'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'оформлена'"), НСтр("ru = 'оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'создана'"), НСтр("ru = 'создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru = 'получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru = 'получена'"), НСтр("ru = 'получено'")))));
				
	// корректировочный документ
	Если ДокументПоддерживаетКорректировку(МетаданныеДокумента) Тогда
		
		ПредставлениеДокумента = ПредставлениеДокументаПоддерживающегоКорректировку(МетаданныеДокумента);
		
		ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
		ФормыИмениДокумента.Основная   = ПредставлениеДокумента.Корректировочный;
		ФормыИмениДокумента.Склоненная = ПолучитьСклоненияСтроки(НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2), "Л=ru_RU", "ПД=Винительный")[0];
		ФормыИмениДокумента.РодИмени   = "Ж";
		
		Шаблон.Вставить("ПредставлениеКорректировочногоДокумента",           ФормыИмениДокумента.Основная + ": %1");
		Шаблон.Вставить("ПредставлениеНесколькихКорректировочныхДокументов", ФормыИмениДокумента.Основная + " (%1)");
		
		Шаблон.Вставить("ПредставлениеКомандыСоздатьКорректировочныйДокумент",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
		Шаблон.Вставить("ПредставлениеКомандыОткрытьКорректировочныйДокумент",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
			
		Шаблон.Вставить("ИмяКомандыСоздатьКорректировочныйДокумент", ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента, Истина));
		
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

//см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхЗЕРНО;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется            = Истина;
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
// @skip-warning ПустойМетод - переопределяемый метод.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
// @skip-warning ПустойМетод - переопределяемый метод.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхЗЕРНО.ИмяМетода);
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Если Не ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ВестиУчетПродукции() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = СерверныеОповещения.НовоеСерверноеОповещение(
		ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ИмяСерверногоОповещенияВыполненОбменДанныим());
	Оповещение.ИмяМодуляПолучения = "ИнтеграцияЗЕРНОСлужебныйКлиент";
	Оповещение.ПериодПроверки = 60;
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриПериодическомПолученииДанныхКлиентаНаСервере
Процедура ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты) Экспорт
	
	Если Не ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ВестиУчетПродукции() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПараметров = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ИменаПараметровПериодическогоПолученияДанных();
	
	Для Каждого КлючИЗначение Из Параметры Цикл
		
		ИмяПараметра     = КлючИЗначение.Ключ;
		ВходящееЗначение = КлючИЗначение.Значение;
		
		Если ИмяПараметра = ИменаПараметров.ИнициализацияНастроекОтветственногоЗаПодписаниеСообщений
			Или ИмяПараметра = ИменаПараметров.ОбновлениеНастроекОтветственногоЗаПодписаниеСообщений Тогда
			
			НастройкиОтветственного = Справочники.ОтветственныеЗаПодписаниеСообщенийЗЕРНО.НастройкиОтветственногоЗаПодписаниеСообщений();
			
			Результат = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.РезультатПериодическогоПолученияДанных();
			Результат.ЯвляетсяОтветственным   = НастройкиОтветственного.ЯвляетсяОтветственным;
			Результат.НастройкиОтветственного = НастройкиОтветственного;
			
			Результаты.Вставить(ИмяПараметра, Результат);
			
			Если Результат.ЯвляетсяОтветственным
				И ИмяПараметра = ИменаПараметров.ИнициализацияНастроекОтветственногоЗаПодписаниеСообщений Тогда
				//@skip-check query-in-loop
				ЗаполнитьДанныеОчередиПриУведомленииОтветственного(НастройкиОтветственного, Результат);
			КонецЕсли;
			
		ИначеЕсли ИмяПараметра = ИменаПараметров.ПроверитьНаличиеСообщенийКПодписанию Тогда
			
			НастройкиОтветственного = ВходящееЗначение; 
			Результат               = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.РезультатПериодическогоПолученияДанных();
			
			Если НастройкиОтветственного.ЯвляетсяОтветственным Тогда
				
				//@skip-check query-in-loop
				ЗаполнитьДанныеОчередиПриУведомленииОтветственного(НастройкиОтветственного, Результат);
				
				Если Результат.ДанныеАвтоподписания <> Неопределено
					Или Результат.ОрганизацииИмеющиеСообщения <> Неопределено Тогда
					Результаты.Вставить(ИмяПараметра, Результат);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область РаботаСКлассификаторами

// см. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И Не ИнтеграцияЗЕРНОВызовСервера.ВестиУчетПродукции() Тогда
		Возврат;
	КонецЕсли;
	
	// для коробки анализировать включенную опцию, для фреша всегда включать
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	РазделениеВключено            = ОбщегоНазначения.РазделениеВключено();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		
		Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
		Описатель.Наименование               = КлючИЗначение.Значение.Наименование;
		Описатель.Идентификатор              = КлючИЗначение.Ключ;
		Описатель.ОбновлятьАвтоматически     = Истина;
		Описатель.ОбщиеДанные                = Истина;
		Описатель.СохранятьФайлВКэш          = РазделениеВключено;
		Описатель.ОбработкаРазделенныхДанных = Ложь;
		
		Классификаторы.Добавить(Описатель);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РаботаСКлассификаторамиПереопределяемый.ПриОпределенииНачальногоНомераВерсииКлассификатора
Процедура ПриОпределенииНачальногоНомераВерсииКлассификатора(Идентификатор, НачальныйНомерВерсии) Экспорт
	
	Возврат;
	
КонецПроцедуры

// см. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	ДанныеКлассификатора          = ИдентификаторыКлассификаторов[Идентификатор];
	
	Если ДанныеКлассификатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные      = ПолучитьИзВременногоХранилища(Адрес); // - ДвоичныеДанные
	ВременныеФайлы      = Новый Массив();
	ФайлыКлассификатора = Новый Массив();
		
	Попытка
		
		ПотокЧтения = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ПотокЧтения);
		
		//@skip-check missing-temporary-file-deletion
		ВременныйКаталог = ПолучитьИмяВременногоФайла("cat");
		СоздатьКаталог(ВременныйКаталог);
		
		Для Каждого ЭлементАрхива Из ЧтениеZIP.Элементы Цикл
			ИмяВременногоФайла = ОбщегоНазначенияИС.ОбъединитьПути(ВременныйКаталог, ЭлементАрхива.ПолноеИмя);
			ФайлыКлассификатора.Добавить(ИмяВременногоФайла);
			ВременныеФайлы.Добавить(ИмяВременногоФайла);
			ЧтениеZIP.Извлечь(ЭлементАрхива, ВременныйКаталог);
		КонецЦикла;
		
		ЧтениеZIP.Закрыть();
		ПотокЧтения.Закрыть();
	
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка подготовки исходных файлов для загрузки классификатора %1:
			           |%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеКлассификатора.ВидКлассификатора,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОписанияОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка подготовки исходных файлов для загрузки классификатора %1:
			           |%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеКлассификатора.ВидКлассификатора,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибки,
			НСтр("ru = 'Работа с классификаторами ЗЕРНО'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение ТекстОписанияОшибки;
	КонецПопытки;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеКлассификатора.ВидКлассификатора);
	МенеджерОбъекта.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры, ФайлыКлассификатора);
	
	ВременныеФайлы.Добавить(ВременныйКаталог);
	Для Каждого ИмяВременногоФайла Из ВременныеФайлы Цикл
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.КлассификаторНСИЗЕРНО);
	Типы.Добавить(Метаданные.Справочники.РеестрЭлеваторовЗЕРНО);
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизациииКонтагенты

// Конструктор новой структуры реквизитов организации/контрагента.
// 
// Возвращаемое значение:
//  Структура - Реквизиты организации контрагента:
// * ИНН - Строка -
// * КПП - Строка -
// * ОГРН - Строка -
// * Наименование - Строка -
// * ТипОрганизации - ПеречислениеСсылка.ТипыОрганизацийЗЕРНО -
// * КодАльфа3 - Строка -
// * ЮридическийАдрес - Строка -
// * ЮридическийАдресИндекс - Строка -
// * КодРАФП - Строка -
// * Фамилия - Строка -
// * Имя - Строка -
// * ИдентификаторАдреса - Строка -
// * ОКТМО - Строка -
// * ЮридическийАдресJSON   - Строка                                   - ЮридическийАдрес JSON
Функция ИнициализироватьСтруктуруРеквизитовОрганизацииКонтрагента() Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ИНН",                    "");
	СтруктураРеквизитов.Вставить("КПП",                    "");
	СтруктураРеквизитов.Вставить("ОГРН",                   "");
	СтруктураРеквизитов.Вставить("Наименование",           "");
	СтруктураРеквизитов.Вставить("ТипОрганизации",         Перечисления.ТипыОрганизацийЗЕРНО.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("КодАльфа3",              "");
	СтруктураРеквизитов.Вставить("ЮридическийАдрес",       "");
	СтруктураРеквизитов.Вставить("ЮридическийАдресИндекс", "");
	СтруктураРеквизитов.Вставить("ЮридическийАдресJSON",   "");
	СтруктураРеквизитов.Вставить("КодРАФП",                "");
	СтруктураРеквизитов.Вставить("Фамилия",                "");
	СтруктураРеквизитов.Вставить("Имя",                    "");
	СтруктураРеквизитов.Вставить("ИдентификаторАдреса",    "");
	СтруктураРеквизитов.Вставить("ОКТМО",                  "");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Реквизиты организации контрагента.
// 
// Параметры:
//  ТаблицаИсточникиРеквизитов - ТаблицаЗначений
//  ОрганизацияКонтрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС
//  Подразделение - Неопределено - Подразделение
// 
// Возвращаемое значение:
//  Структура - Реквизиты организации контрагента:
// * ИНН - Строка - 
// * КПП - Строка - 
// * ОГРН - Строка - 
// * Наименование - Строка - 
// * ТипОрганизации - ПеречислениеСсылка.ТипыОрганизацийЗЕРНО - 
// * КодАльфа3 - Строка - 
// * ЮридическийАдрес - Строка - 
// * ЮридическийАдресИндекс - Строка - 
// * КодРАФП - Строка - 
// * Фамилия - Строка - 
// * Имя - Строка - 
// * ЮридическийАдресJSON   - Строка                                   - ЮридическийАдрес JSON
Функция РеквизитыОрганизацииКонтрагента(ТаблицаИсточникиРеквизитов, ОрганизацияКонтрагент, Подразделение = Неопределено) Экспорт
	
	Отбор = Новый Структура("ОрганизацияКонтрагент, Подразделение");
	
	Отбор.ОрганизацияКонтрагент = ОрганизацияКонтрагент;
	Если Подразделение = Неопределено Тогда
		Отбор.Подразделение = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Подразделение");
	Иначе
		Отбор.Подразделение = Подразделение;
	КонецЕсли;
	
	РеквизитыОрганизации = ТаблицаИсточникиРеквизитов.НайтиСтроки(Отбор);
	Результат = ИнициализироватьСтруктуруРеквизитовОрганизацииКонтрагента();
	Если РеквизитыОрганизации.Количество() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыОрганизации[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Таблица для получения реквизитов по органзиация/контрагент, подразделение.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов ключей реквизитов организаций:
// * Подразделение                   - ОпределяемыйТип.Подразделение              - Подразделение
// * ОрганизацияКонтрагент           - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация
// * КлючРеквизитов - СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО - Ссылка на ключ реквизитов
// * ИНН            - Строка                                           - ИНН
// * КПП            - Строка                                           - КПП
// * ОГРН           - Строка                                           - ОГРН
// * Наименование   - Строка                                           - Наименование
// * Фамилия        - Строка                                           - Фамилия
// * Имя            - Строка                                           - Имя
// * Отчество       - Строка                                           - Отчество
// * ТипОрганизации - ПеречислениеСсылка.ТипыОрганизацийЗЕРНО          -
// * Организация    - ОпределяемыйТип.Организация                      - Организация
// * Контрагент     - ОпределяемыйТип.КонтрагентГосИС                  - Контрагент
// * КодАльфа3        - Строка                                         - КодАльфа3
// * ЮридическийАдрес       - Строка                                   - ЮридическийАдрес, представление
// * ЮридическийАдресИндекс - Строка                                   - ЮридическийАдресИндекс
// * ЮридическийАдресJSON   - Строка                                   - ЮридическийАдрес JSON
Функция НоваяТаблицаОрганизацияКонтрагентПодразделение() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ОрганизацияКонтрагент", Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип);
	ТаблицаДанных.Колонки.Добавить("Подразделение",         Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	
	ТаблицаДанных.Колонки.Добавить("КлючРеквизитов", Новый ОписаниеТипов("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО"));
	ТаблицаДанных.Колонки.Добавить("ИНН",            ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДанных.Колонки.Добавить("КПП",            ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДанных.Колонки.Добавить("ОГРН",           ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДанных.Колонки.Добавить("Наименование",   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("Фамилия",        ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("Имя",            ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("Отчество",       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("ТипОрганизации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОрганизацийЗЕРНО"));
	ТаблицаДанных.Колонки.Добавить("Организация",    Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаДанных.Колонки.Добавить("Контрагент",     Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип);
	
	ТаблицаДанных.Колонки.Добавить("КодАльфа3",              ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаДанных.Колонки.Добавить("ЮридическийАдрес",       ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаДанных.Колонки.Добавить("ЮридическийАдресJSON",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДанных.Колонки.Добавить("ЮридическийАдресИндекс", ОбщегоНазначения.ОписаниеТипаСтрока(6));
	ТаблицаДанных.Колонки.Добавить("КодРАФП",                ОбщегоНазначения.ОписаниеТипаСтрока(11));
	
	ТаблицаДанных.Индексы.Добавить("ОрганизацияКонтрагент");
	ТаблицаДанных.Индексы.Добавить("ОрганизацияКонтрагент, Подразделение");
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Добавляет в таблицу отбора данные отбора
// 
// Параметры:
//  ТаблицаОтбора - см. НоваяТаблицаОрганизацияКонтрагентПодразделение.
//  ОрганизацияКонтрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация.
//  Подразделение         - ОпределяемыйТип.Подразделение              - Подразделение.
Процедура ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаОтбора, ОрганизацияКонтрагент, Подразделение = Неопределено) Экспорт
	
	СтрокаТаблицы = ТаблицаОтбора.Добавить();
	СтрокаТаблицы.ОрганизацияКонтрагент = ОрганизацияКонтрагент;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтрокаТаблицы.Подразделение = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСопоставленныеТовары(ТабличнаяЧасть, ИспользоватьОтборПоПартии = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Если ИспользоватьОтборПоПартии Тогда
		Запрос.Текст = ТекстЗапросаСопоставленныеТоварыСПартиями();
	Иначе 
		Запрос.Текст = ТекстЗапросаСопоставленныеТоварыБезПартий();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяНоменклатура",         ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика",       ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяПартия",               Справочники.РеестрПартийЗЕРНО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ОКПД2",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	Таблица.Колонки.Добавить("КодТНВЭД",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	Таблица.Колонки.Добавить("Партия",      Новый ОписаниеТипов("СправочникСсылка.РеестрПартийЗЕРНО"));
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Товары", Таблица);
	
	ТаблицаСопоставленныеТовары = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСопоставленныеТовары;
	
КонецФункции

// Сопоставляет продукцию ЗЕРНО с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ОписаниеТабличнойЧасти - Строка, ТаблицаЗначений - имя табличной части или таблица значений для сопоставления.
//
Процедура ЗаписатьСоответствиеНоменклатуры(Объект, ОписаниеТабличнойЧасти = "Товары") Экспорт
	
	Если ОписаниеТабличнойЧасти = "Шапка" Тогда
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		Данные.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		Данные.Колонки.Добавить("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
		Данные.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.РеестрПартийЗЕРНО"));
		ЗаполнитьЗначенияСвойств(Данные.Добавить(), Объект);
	ИначеЕсли ТипЗнч(ОписаниеТабличнойЧасти) = Тип("Строка") Тогда
		КолонкиДляВыгрузки = "Номенклатура, Характеристика, Серия, Партия";
		Данные = Объект[ОписаниеТабличнойЧасти].Выгрузить(, КолонкиДляВыгрузки);
	Иначе
		Данные = ОписаниеТабличнойЧасти;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ ИсходныеДанныеПредварительно
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	ИсходныеДанныеПредварительно КАК Т
	|ГДЕ
	|	Т.Партия <> &ПустаяПартия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ ТаблицаПредварительно
	|ИЗ
	|	ИсходныеДанные КАК Т
	|ГДЕ
	|	НЕ Т.Серия В (&НезаполненныеЗначенияСерии)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ПустаяСерия,
	|	Т.Партия
	|ИЗ
	|	ИсходныеДанные КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия          КАК Серия,
	|	Т.Партия         КАК Партия
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаПредварительно КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК УжеСопоставлено
	|		ПО УжеСопоставлено.Номенклатура   = Т.Номенклатура
	|		И  УжеСопоставлено.Характеристика = Т.Характеристика
	|		И  УжеСопоставлено.Серия          = Т.Серия
	|		И  УжеСопоставлено.Партия         = Т.Партия
	|ГДЕ
	|	Т.Номенклатура НЕ В (&НезаполненныеЗначенияНоменклатура)
	|	И УжеСопоставлено.Номенклатура ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Серия,
	|	Т.Партия
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия          КАК Серия,
	|	Таблица.Партия         КАК Партия,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок, ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок, 0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура   = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.Партия         = Таблица.Партия
	|		 И Сопоставлено.Серия          = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура   = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.Партия         = Таблица.Партия
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Партия");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("НезаполненныеЗначенияНоменклатура", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Номенклатура));
	Запрос.УстановитьПараметр("ПустаяПартия", Справочники.РеестрПартийЗЕРНО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеПартийЗЕРНО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.Партия.Установить(Выборка.Партия, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура   = Выборка.Номенклатура;
		НоваяЗапись.Характеристика = Выборка.Характеристика;
		НоваяЗапись.Серия          = Выборка.Серия;
		НоваяЗапись.Партия         = Выборка.Партия;
		НоваяЗапись.Порядок        = Выборка.Порядок + 1;
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеПартийЗЕРНО);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		// Требуется повторная инициализация поля (серия соответствия может быть сброшена заполнением статуса)
		НоваяЗапись.Серия          = Выборка.Серия;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры ЗЕРНО произошла ошибка:'")
			+ Символы.ПС + "%1";
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПередЗаписьюОбъекта(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ДокументОснование")
		И ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		
		ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьСоответствиеШапкиОбъектов(ДокументОбъект.ДокументОснование, ДокументОбъект);
		
	КонецЕсли;
	
	ИнтеграцияИСПереопределяемый.ПередЗаписьюОбъекта(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура УстановитьДоступностьПоляСтатус(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Не Объект.Проведен
		И Не ПравоДоступа("Изменение", Объект.Ссылка.Метаданные()) Тогда
		
		Элементы.СтатусЗЕРНОПредставление.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает признак, что документ может быть создан как корректировочный при ошибках оформления
// 
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - метаданные объекта, который надо определить
// 
// Возвращаемое значение:
//  Булево - Истина, если может быть оформлен корректирующий документ по ошибкам оформления
Функция ДокументПоддерживаетКорректировку(МетаданныеДокумента) Экспорт
	
	МассивМетаданных = Новый Массив;
	МассивМетаданных.Добавить(Метаданные.Документы.ОформлениеСДИЗЗЕРНО);
	
	Возврат МассивМетаданных.Найти(МетаданныеДокумента) <> Неопределено;
	
КонецФункции

// Требуется создание корректировочного документа.
// 
// Параметры:
//  МетаданныеДокументаЗЕРНО - ОбъектМетаданных - метаданные документа ЗЕРНО
//  Документ - ОпределяемыйТип.ОснованиеОформлениеСДИЗЗЕРНО - прикладной документ, по которому требуется указать, создается
//  	обычный документ или корректировочный
// 
// Возвращаемое значение:
//  Булево - Истина, если по документу надо создать корректировочный. Доступно только если метаданные документа ЗЕРНО
//		поддерживают такую функциональность
Функция ТребуетсяСозданиеКорректировочногоДокумента(МетаданныеДокументаЗЕРНО, Документ) Экспорт
	
	СоздатьДокументКорректировки = Ложь;
	
	Если Не ДокументПоддерживаетКорректировку(МетаданныеДокументаЗЕРНО) Тогда
		Возврат СоздатьДокументКорректировки;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОПереопределяемый.ТребуетсяСозданиеКорректировочногоДокумента(МетаданныеДокументаЗЕРНО, Документ, СоздатьДокументКорректировки);
	Возврат СоздатьДокументКорректировки;
	
КонецФункции

// Функция возвращает заголовок документа, поддерживающего корректировку.
// 
// Параметры:
//  СсылкаНаДокумент         - ДокументСсылка - ссылка на любой документ, поддерживающий корректировку
//  КорректировочныйДокумент - Булево - признак, что документ является корректировочным
//  НомерДокумента           - Строка, Число - номер документа
//  ДатаДокумента            - Дата - дата документа
// 
// Возвращаемое значение:
//  Строка - заголовок-представление документа в зависимости от переданных параметров
Функция ЗаголовокДокументаПоддерживающегоКорректировку(СсылкаНаДокумент, КорректировочныйДокумент, НомерДокумента, ДатаДокумента) Экспорт
	
	ФорматПредставленияДокумента         = НСтр("ru = '%1 %2 от %3'");
	ФорматПредставленияНовогоДокумента   = НСтр("ru = '%1 (создание)'");
	
	ПредставленияДокументаОформлениеСДИЗ = ПредставлениеДокументаПоддерживающегоКорректировку(СсылкаНаДокумент.Метаданные());
	
	Если КорректировочныйДокумент Тогда
		НаименованиеДокумента = ПредставленияДокументаОформлениеСДИЗ.Корректировочный;
	Иначе
		НаименованиеДокумента = ПредставленияДокументаОформлениеСДИЗ.Основной;
	КонецЕсли;
	
	Если СсылкаНаДокумент.Пустая() Тогда
		Представление = СтрШаблон(ФорматПредставленияНовогоДокумента, НаименованиеДокумента);
	Иначе
		Представление = СтрШаблон(ФорматПредставленияДокумента, НаименованиеДокумента, НомерДокумента, ДатаДокумента);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет ОКПД2, по которым необходимо формировать внесение сведений об урожае с использованием Госмониторинга.
// 
// Возвращаемое значение:
//  Массив из Строка - массив ОКПД2.
//
Функция ОКПД2ПодлежащиеГосмониторингу() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("01.11.11.111");
	Результат.Добавить("01.11.11.121");
	Результат.Добавить("01.11.12.111");
	Результат.Добавить("01.11.12.121");
	Результат.Добавить("01.11.12.141");
	
	Возврат Результат;
	
КонецФункции

// Определяет по ОКПД2 необходимость использования Госмониторинга при внесении сведений об урожае.
// 
// Параметры:
//  ОКПД2 - Строка - ОКПД2 вида продукции.
// Возвращаемое значение:
//  Булево - Истина, если использует.
//
Функция ОКПД2ИспользуетГосмониторинг(ОКПД2) Экспорт
	
	Результат = ОКПД2ПодлежащиеГосмониторингу().Найти(ОКПД2) <> Неопределено;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСВнешнимиСервисами

// Параметры обмена.
// 
// Параметры:
//  ЗначениеОтбора - Неопределено - Организации или настройка регламентного задания
//  УникальныйИдентификатор - Неопределено - Уникальный идентификатор
// 
// Возвращаемое значение:
//  Структура - Параметры обмена:
// * Организации - Неопределено -
// * СообщенияКПодписанию - Неопределено -
// * ОжидатьНаСервере - Булево -
// * ОжидатьНаКлиенте - Булево -
// * ФоновоеЗадание - Неопределено -
// * Изменения - Массив из Структура-
// * ОбработанныеЭлементыОчереди - Массив из СтрокаТаблицыЗначений -
// * ОчередьСообщений - ТаблицаЗначений 
// * ЗависимостиСообщений - ТаблицаЗначений 
// * УникальныйИдентификатор - Неопределено -
// * АдресВоВременномХранилище - Неопределено -
// * АдресДанныхЛогаЗапроса - Неопределено -
// * СтопЛист - ТаблицаЗначений -:
// * Организация - ОпределяемыйТип.Организация - 
// * ДатыПоследнегоЗапросаРезультата - Соответствие из КлючИЗначение -
Функция ПараметрыОбмена(ЗначениеОтбора = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбмена = Новый Структура;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.НастройкиРегламентныхЗаданийЗЕРНО") Тогда
		ПараметрыОбмена.Вставить("НастройкаРегламентногоЗадания", ЗначениеОтбора);
		ПараметрыОбмена.Вставить("ВидНастройкиОбмена",            ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеОтбора, "ВидНастройкиОбмена"));
		// Организации определяются из настройки регламентного задания
		ПараметрыОбмена.Вставить("Организации",                   Неопределено);
		ПараметрыОбмена.Вставить("ИмяЗапросаЗерно",               Неопределено);
	Иначе
		ПараметрыОбмена.Вставить("НастройкаРегламентногоЗадания", Неопределено);
		ПараметрыОбмена.Вставить("ВидНастройкиОбмена",            Неопределено);
		ПараметрыОбмена.Вставить("Организации",                   ЗначениеОтбора);
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("СообщенияКПодписанию",     Неопределено);
	ПараметрыОбмена.Вставить("СообщенияПослеПодписания", Неопределено);
	
	ПараметрыОбмена.Вставить("ОжидатьНаСервере", Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте", Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",   Неопределено);
	ПараметрыОбмена.Вставить("Изменения",        Новый Массив);
	
	ПараметрыОбмена.Вставить("ПараметрыПреобразования",     Неопределено);
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьСообщений",            ИнициализиоватьОчередьСообщений());
	ПараметрыОбмена.Вставить("ЗависимостиСообщений",        ИнициализироватьЗависимостиСообщений());
	ПараметрыОбмена.Вставить("ПараметрыОптимизации",        ПараметрыОптимизации());
	
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", Неопределено);
	КонецЕсли;
	
	ТаблицаСтопЛист = Новый ТаблицаЗначений;
	ТаблицаСтопЛист.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	ПараметрыОбмена.Вставить("СтопЛист", ТаблицаСтопЛист);
	ПараметрыОбмена.Вставить("КоличествоЗапросовПоСекундам",      Новый Соответствие());
	ПараметрыОбмена.Вставить("ДатыПоследнегоЗапросаРезультата",   Новый Соответствие());
	ПараметрыОбмена.Вставить("КОтложеннойЗагрузке",               Новый Соответствие());
	ПараметрыОбмена.Вставить("ДатыБлокировкиОтправителя",         Новый Соответствие());
	ПараметрыОбмена.Вставить("ДоступныОбновленияКлассификаторов", ДоступныОбновленияКлассификаторов());
	ПараметрыОбмена.Вставить("ПрерватьОбработкуОчереди",          Ложь);
	ПараметрыОбмена.Вставить("СертификатыПользователя",           Неопределено);
	ПараметрыОбмена.Вставить("КоличествоБлокировок",        0);
	
	Возврат ПараметрыОбмена;
	
КонецФункции

#КонецОбласти

Функция ФорматироватьЛогЗапросов(ИсходныйТекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Если КоличествоСтрок = 0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	Для СмещениеСКонца = 0 По КоличествоСтрок - 1 Цикл
		
		НомерСтрокиСКонца = КоличествоСтрок - СмещениеСКонца;
		ТекущаяСтрока     = ТекстовыйДокумент.ПолучитьСтроку(НомерСтрокиСКонца);
		ДанныеСтроки      = Новый Массив();
		Если СтрНачинаетсяС(ТекущаяСтрока, "<soap:Envelope") Тогда
			Попытка
				ДанныеСтроки.Добавить(РаботаСXMLИС.ФорматироватьXML(ТекущаяСтрока));
			Исключение
				Продолжить;
			КонецПопытки;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстовыйДокумент.УдалитьСтроку(НомерСтрокиСКонца);
		ТекстовыйДокумент.ВставитьСтроку(НомерСтрокиСКонца, СтрСоединить(ДанныеСтроки, Символы.ПС));
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
	
КонецФункции

#Область ДальнейшиеДействия

Функция НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействие, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействие", ДальнейшееДействие) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ЗЕРНО в форме документа.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО- содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru = 'Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru = 'Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru = 'Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействие1";
	
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ВсеТребующиеДействияСписок = Новый СписокЗначений;
		ВсеТребующиеДействияСписок.ЗагрузитьЗначения(ВсеТребующиеДействия);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ВсеТребующиеОжиданияСписок = Новый СписокЗначений;
		ВсеТребующиеОжиданияСписок.ЗагрузитьЗначения(ВсеТребующиеОжидания);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоля, ВсеТребующиеОжиданияСписок, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый СписокЗначений();
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру параметров заполнения табличной части.
// 
// Возвращаемое значение:
//  Структура - 
Функция ПараметрыЗаполненияТабличнойЧастиТовары() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ЗаполнитьАртикул",               Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКод",                   Ложь);
//	ПараметрыЗаполнения.Вставить("ЗаполнитьЕдиницуИзмерения",      Истина);
//	ПараметрыЗаполнения.Вставить("ЗаполнитьТипНоменклатуры",       Истина);
//	ПараметрыЗаполнения.Вставить("ОбработатьУпаковки",             Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиниц",    Истина);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоУпаковок",  Истина);
	ПараметрыЗаполнения.Вставить("ПроверитьСериюРассчитатьСтатус", Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКодТНВЭД",              Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКодОКПД2",              Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКоличествоЗЕРНО",       Ложь);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

//Получает виды продукции, имеющиеся в таблице номенклатуры
//
//Параметры:
//   Товары - ТаблицаЗначений - входящая таблица товаров с колонками:
//    * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура,
//Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции по переданной номенклатуре
//
Функция ВидыПродукцииПоТаблицеНоменклатуры(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоВидуПродукции.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВидыПродукцииРасширенные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	
	Возврат ИнтеграцияЗЕРНОКлиентСервер.ВидыПродукции(ВидыПродукцииРасширенные);
	
КонецФункции

#Область ОКПД2

// Определяет текст запроса получения информации по кодам ОКПД2 такой как: "Код", "НаименованиеПолное", "Ссылка"
// для списков формы подбора ОКДП2
// 
// Возвращаемое значение:
// 	Строка - Фрагмент запроса, выборкой которого является временная таблица КодыОКПД2 с полями: Код, НаименованиеПолное, Ссылка.
Функция ОпределитьТекстЗапросаКлассификатораОКПД2() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Неопределено КАК Ссылка,
	|	"""" КАК Код,
	|	"""" КАК НаименованиеПолное
	|ПОМЕСТИТЬ ВременнаяТаблица
	|";
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииТекстаЗапросаКлассификатораОКПД2(ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьДанныеСопоставленногоКлассификатораОКПД2(ОКПД2) Экспорт
	
	ЭлементСправочника = Неопределено;
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииСопоставленногоКлассификатораОКПД2(ОКПД2, ЭлементСправочника);
	Возврат ЭлементСправочника;
	
КонецФункции

#КонецОбласти

#Область ТНВЭД

// Определяет текст запроса получения информации по кодам ТН ВЭД такой как: "Код", "НаименованиеПолное", "Ссылка"
// для списков формы подбора ТНВЭД
// 
// Возвращаемое значение:
// 	Строка - Фрагмент запроса, выборкой которого является временная таблица ВременнаяТаблица с полями: Код, НаименованиеПолное, Ссылка.
Функция ОпределитьТекстЗапросаКлассификатораТНВЭД() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Неопределено КАК Ссылка,
	|	"""" КАК Код,
	|	"""" КАК НаименованиеПолное
	|ПОМЕСТИТЬ ВременнаяТаблица
	|";
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииТекстаЗапросаКлассификатораТНВЭД(ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьДанныеСопоставленногоКлассификатораТНВЭД(ТНВЭД, Наименование) Экспорт
	
	ЭлементСправочника = Неопределено;
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииСопоставленногоКлассификатораТНВЭД(ТНВЭД, Наименование, ЭлементСправочника);
	Возврат ЭлементСправочника;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЗаписыватьСтатус = Истина, СообщениеПрерывания = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗЕРНОПрисоединенныеФайлы.Ссылка                       КАК Сообщение,
	|	ЗЕРНОПрисоединенныеФайлы.Операция                     КАК Операция,
	|	ЗЕРНОПрисоединенныеФайлы.ТипСообщения                 КАК ТипСообщения,
	|	ЗЕРНОПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаСоздания,
	|	ЛОЖЬ                                                  КАК КПередаче,
	|	ВЫБОР КОГДА ЗЕРНОПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	ЗЕРНОПрисоединенныеФайлы.СтатусОбработки КАК СтатусОбработки,
	|	НЕОПРЕДЕЛЕНО                             КАК ПротоколОбмена,
	|	ЗЕРНОПрисоединенныеФайлы.Версия          КАК Версия,
	|	ЗЕРНОПрисоединенныеФайлы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ЗЕРНОПрисоединенныеФайлы
	|ГДЕ
	|	ЗЕРНОПрисоединенныеФайлы.Документ = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийЗЕРНО.Сообщение                  КАК Сообщение,
	|	ОчередьСообщенийЗЕРНО.Операция                   КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)  КАК ТипСообщения,
	|	ОчередьСообщенийЗЕРНО.ДатаСоздания               КАК ДатаСоздания,
	|	ВЫБОР КОГДА ОчередьСообщенийЗЕРНО.ТекущееДействие = ЗНАЧЕНИЕ(Перечисление.ДействиеССообщениемЗЕРНО.Отправка) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР КОГДА ОчередьСообщенийЗЕРНО.ТекущееДействие <> ЗНАЧЕНИЕ(Перечисление.ДействиеССообщениемЗЕРНО.Отправка) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	НЕОПРЕДЕЛЕНО                         КАК СтатусОбработки,
	|	ОчередьСообщенийЗЕРНО.ПротоколОбмена КАК ПротоколОбмена,
	|	1,
	|	ОчередьСообщенийЗЕРНО.ИдентификаторСтроки
	|
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
	|ГДЕ
	|	ОчередьСообщенийЗЕРНО.СсылкаНаОбъект = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания ВОЗР
	|";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектСинхронизации.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	АбстрактныеОперации = Перечисления.ВидыОперацийЗЕРНО.АбстрактныеОперации();
	ОперацииРасчетСтатусаПоСтроке = Перечисления.ВидыОперацийЗЕРНО.ОперацииРасчетСтатусаПоСтроке();
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	АбстрактнаяОперацияРасчетСтатуса = ДокументыПоддерживающиеСтатусыСообщенийВТабличнойЧасти().Получить(ТипДокумента);
	
	КешИдентификаторовСтрок = Новый Соответствие;
	ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Ложь;
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Пока Выборка.Следующий() Цикл
			
			Если СообщениеПрерывания <> Неопределено
				И Выборка.Сообщение = СообщениеПрерывания Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыОбновления = Неопределено;
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
						ДокументСсылка,
						Выборка.Операция);
					Если АбстрактнаяОперацияРасчетСтатуса <> Неопределено Тогда
						ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Истина;
					КонецЕсли;
					
				ИначеЕсли Выборка.Передан Тогда
					
					СтатусОбработки = Выборка.СтатусОбработки;
					
					ЭтоСообщениеВОчередиОбмена = Ложь;
					
					Если Не ЗначениеЗаполнено(СтатусОбработки) Тогда
						Если ОперацииРасчетСтатусаПоСтроке.Найти(Выборка.Операция) <> Неопределено Тогда
							// не требуется считать статус и хранить в регистре, требуется обработка очереди сообщений
							Продолжить;
						КонецЕсли;
						Если Выборка.ПротоколОбмена <> Неопределено Тогда
							ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
							ЭтоСообщениеВОчередиОбмена = Истина;
							Если АбстрактнаяОперацияРасчетСтатуса <> Неопределено Тогда
								ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Истина;
							КонецЕсли;
						КонецЕсли;
						Если ПротоколОбмена = Неопределено Тогда
							Если АбстрактныеОперации.Найти(Выборка.Операция) <> Неопределено Тогда
								СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается;
								ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Истина;
							Иначе
								Продолжить;
							КонецЕсли;
						ИначеЕсли ПротоколОбмена.Количество() > 0 Тогда
							ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
							СтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
						КонецЕсли;
					КонецЕсли;
					
					Если ЭтоСообщениеВОчередиОбмена
						И ПоследняяЗаписьПротоколаОбмена <> Неопределено
						И ПоследняяЗаписьПротоколаОбмена.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.Отправка Тогда
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
							ДокументСсылка,
							Выборка.Операция,
							СтатусОбработки);
						
					Иначе
						
						ПараметрыОбновленияСтатуса = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
						ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
						ПараметрыОбновленияСтатуса.ПротоколОбмена    = Выборка.ПротоколОбмена;
						ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
						
						Если ЭтоСообщениеВОчередиОбмена И ПустаяСтрока(Выборка.ИдентификаторСтроки) Тогда
							// Требуется обработка сообщения и запись результатов в протокол при выполнении обмена.
							ПараметрыОбновленияСтатуса.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается;
						Иначе
							ПараметрыОбновленияСтатуса.СтатусОбработки = СтатусОбработки;
						КонецЕсли;
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
							ДокументСсылка,
							Выборка.Операция,
							ПараметрыОбновленияСтатуса);
						
					КонецЕсли;
					
					Если ПараметрыОбновления <> Неопределено Тогда
						ПараметрыОбновления.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ПротоколОбмена <> Неопределено Тогда
					ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
				КонецЕсли;
				Если ПротоколОбмена = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.СтатусОбработки   = Выборка.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
				ПараметрыОбновленияСтатуса.ПротоколОбмена    = ПротоколОбмена;
				ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
					ДокументСсылка,
					Выборка.Операция,
					ПараметрыОбновленияСтатуса);
				
				ПараметрыОбновления.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторСтроки)
				И КешИдентификаторовСтрок.Получить(Выборка.ИдентификаторСтроки) = Неопределено Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
				ЗаписьНабора.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				
				КешИдентификаторовСтрок.Вставить(Выборка.ИдентификаторСтроки, Истина);
				
			КонецЕсли;
			
			Если СообщениеПрерывания = Неопределено Тогда
				
				Если ПараметрыОбновления <> Неопределено Тогда
					РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				КонецЕсли;
				
			Иначе
				
				Если (Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПроигнорирована
					Или Выборка.СтатусОбработки = Неопределено) Тогда
					
					Если ПараметрыОбновления <> Неопределено Тогда
						РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаписыватьСтатус Тогда
		
		// Перед расчетом результирующего статуса записать набор данных в регистре.
		НаборЗаписей.Записать();
		
		Если Выборка.Количество() > 0 
			И Не ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса
			И АбстрактнаяОперацияРасчетСтатуса <> Неопределено Тогда
			
			ПараметрыОбновленияСтатуса = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = АбстрактнаяОперацияРасчетСтатуса;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена;
			
			ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
				ДокументСсылка,
				АбстрактнаяОперацияРасчетСтатуса,
				ПараметрыОбновленияСтатуса);
			
			НаборЗаписей = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектСинхронизации.Установить(ДокументСсылка);
			НаборЗаписей.Отбор.ИдентификаторСтроки.Установить("");
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
			
			Если ПараметрыОбновления <> Неопределено Тогда
				РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ИнициализиоватьОчередьСообщений()

	ОчередьСообщений = Новый ТаблицаЗначений;
	ОчередьСообщений.Колонки.Добавить("ДатаСоздания");
	ОчередьСообщений.Колонки.Добавить("Сообщение");
	ОчередьСообщений.Колонки.Добавить("СообщениеОснование");
	
	ОчередьСообщений.Колонки.Добавить("Операция");
	ОчередьСообщений.Колонки.Добавить("ВидПродукции");
	
	// Источник
	ОчередьСообщений.Колонки.Добавить("Организация");
	ОчередьСообщений.Колонки.Добавить("СсылкаНаОбъект");
	
	// Описание, протокол и очередь
	ОчередьСообщений.Колонки.Добавить("РеквизитыИсходящегоСообщения");
	ОчередьСообщений.Колонки.Добавить("ПротоколОбмена");
	ОчередьСообщений.Колонки.Добавить("ДатаМодификацииУниверсальная", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ИдентификаторСтроки");
	ОчередьСообщений.Колонки.Добавить("ИдентификаторЦепочки");
	
	// Временная техническая информация
	ОчередьСообщений.Колонки.Добавить("КоличествоИтераций",    Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ДатаСледующейИтерации", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("НомерСтраницы",         Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ТекстОшибки",           Новый ОписаниеТипов("Строка"));
	ОчередьСообщений.Колонки.Добавить("ТребуетсяПодписать",    Новый ОписаниеТипов("Булево"));
	ОчередьСообщений.Колонки.Добавить("Сертификат",            Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ОчередьСообщений.Колонки.Добавить("Подразделение",         Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатус");
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатусОбработки");
	ОчередьСообщений.Колонки.Добавить("ТекущееДействие");
	
	// Индексы
	ОчередьСообщений.Индексы.Добавить("Сообщение");
	
	Возврат ОчередьСообщений;
	
КонецФункции

Функция ИнициализироватьЗависимостиСообщений() Экспорт
	
	ЗависимостиСообщений = Новый ТаблицаЗначений;
	ЗависимостиСообщений.Колонки.Добавить("Сообщение1");
	ЗависимостиСообщений.Колонки.Добавить("Сообщение2");
	ЗависимостиСообщений.Колонки.Добавить("Загрузка");
	ЗависимостиСообщений.Колонки.Добавить("Передача");
	
	// Индексы
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение2");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Загрузка");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Передача");
	
	Возврат ЗависимостиСообщений;
	
КонецФункции

Функция СостояниеОбмена(Организации) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	// Таблица ключ реквизитов организаций
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	СоответствиеКлючейОрганизацийИОрганизаций.КлючОрганизации КАК КлючОрганизации
	|ПОМЕСТИТЬ СоответствиеКлючейОрганизацийИОрганизаций
	|ИЗ
	|	&СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|");
	
	// Организация элеватор
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ ЭлеваторыОрганизации
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеквизитовОрганизацийЗЕРНО КАК КлючиРеквизитовОрганизацийЗЕРНО	
	|		ПО КлючиРеквизитовОрганизацийЗЕРНО.Ссылка = СоответствиеКлючейОрганизацийИОрганизаций.КлючОрганизации
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрЭлеваторовЗЕРНО КАК РеестрЭлеваторовЗЕРНО
	|		ПО РеестрЭлеваторовЗЕРНО.ИНН = КлючиРеквизитовОрганизацийЗЕРНО.ИНН
	|		И РеестрЭлеваторовЗЕРНО.КПП = КлючиРеквизитовОрганизацийЗЕРНО.КПП
	|");
	
	// Владельцы партий
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	КлючиПартийЗЕРНО.Элеватор <> Значение(Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка)
	|		И КлючиПартийЗЕРНО.Элеватор <> СоответствиеКлючейОрганизацийИОрганизаций.КлючОрганизации КАК ОстаткиНаХраненииЭлеватора,
	|	КлючиПартийЗЕРНО.Элеватор КАК Элеватор,
	|	КлючиПартийЗЕРНО.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ ВладельцыПартий
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки КАК ОстаткиПартийЗЕРНООстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО ОстаткиПартийЗЕРНООстатки.Партия = КлючиПартийЗЕРНО.Партия
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.КлючОрганизации = КлючиПартийЗЕРНО.ВладелецПартии
	|");
	
	// Регистр Синхронизация классификаторов ЗЕРНО
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияДанныхЗЕРНО.ИмяЗапроса                                      КАК ИмяЗапроса,
	|	СинхронизацияДанныхЗЕРНО.Организация                                     КАК Организация,
	|	СинхронизацияДанныхЗЕРНО.Подразделение                                   КАК Подразделение,
	|	ЕСТЬNULL(СинхронизацияДанныхЗЕРНО.ДатаСинхронизации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСинхронизации,
	|	ЕСТЬNULL(СинхронизацияДанныхЗЕРНО.ДатаОбмена, ДАТАВРЕМЯ(1, 1, 1))        КАК ДатаОбмена
	|ПОМЕСТИТЬ СинхронизацияДанныхЗЕРНО
	|ИЗ
	|	РегистрСведений.СинхронизацияДанныхЗЕРНО КАК СинхронизацияДанныхЗЕРНО
	|ГДЕ
	|	(&БезОтбора
	|	ИЛИ СинхронизацияДанныхЗЕРНО.Организация В (&Организация))
	|	И СинхронизацияДанныхЗЕРНО.ИмяЗапроса В (&ИмяЗапросаСДИЗ)");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СинхронизацияДанныхЗЕРНО.ИмяЗапроса    КАК ИмяЗапроса,
	|	СинхронизацияДанныхЗЕРНО.Организация   КАК Организация,
	|	СинхронизацияДанныхЗЕРНО.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВтДлительноеОтсутствиеОбменаСДИЗ
	|ИЗ
	|	СинхронизацияДанныхЗЕРНО КАК СинхронизацияДанныхЗЕРНО
	|ГДЕ
	|	(
	|		(СинхронизацияДанныхЗЕРНО.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1) 
	|			И РАЗНОСТЬДАТ(СинхронизацияДанныхЗЕРНО.ДатаСинхронизации, &ТекущаяДата, Секунда) > &ИнтервалДлительногоОтсутствияОбмена)
	|		ИЛИ СинхронизацияДанныхЗЕРНО.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1)
	|	)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИмяЗапроса    КАК ИмяЗапроса,
	|	Т.Организация   КАК Организация,
	|	Т.Подразделение КАК Подразделение
	|ИЗ
	|	ВтДлительноеОтсутствиеОбменаСДИЗ КАК Т
	|",
	"ДлительноеОтсутствиеОбменаСДИЗ");
	
	// Ответственные за подсписание сообщений не настроены
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|ПОМЕСТИТЬ ОтветственныеЗаПодписаниеСообщенийНеНастроены
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЗаПодписаниеСообщенийЗЕРНО КАК ОтветственныеЗаПодписаниеСообщенийЗЕРНО
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.Организация = ОтветственныеЗаПодписаниеСообщенийЗЕРНО.Организация
	|		ИЛИ ОтветственныеЗаПодписаниеСообщенийЗЕРНО.Организация = &ПустаяОрганизация
	|ГДЕ
	|	ОтветственныеЗаПодписаниеСообщенийЗЕРНО.Организация ЕСТЬ NULL");

	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийЗЕРНО.Сообщение), 0) КАК КоличествоСообщений
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
	|ГДЕ
	|	&БезОтбора ИЛИ ОчередьСообщенийЗЕРНО.Организация В(&Организация)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийЗЕРНО.Сообщение), 0) > 0
	|",
	"ЕстьСообщенияОжидающиеОтправки");
	
	// Длительность выполнения регламентного задания
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания КАК Настройка,
	|	ИсторияВыполненияОбменов.ДатаНачала КАК ДатаНачала,
	|	РАЗНОСТЬДАТ(ИсторияВыполненияОбменов.ДатаНачала, ИсторияВыполненияОбменов.ДатаОкончания, СЕКУНДА) КАК ВремяВыполнения
	|ПОМЕСТИТЬ ТаблицаВремяВыполнения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания КАК НастройкаРегламентногоЗадания,
	|		МАКСИМУМ(ИсторияВыполненияОбменов.ДатаНачала) КАК ДатаНачала
	|	ИЗ
	|		РегистрСведений.ИсторияВыполненияОбменовСЗЕРНО КАК ИсторияВыполненияОбменов
	|	ГДЕ
	|		ИсторияВыполненияОбменов.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	СГРУППИРОВАТЬ ПО
	|		ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания) КАК НачалоВыполнения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияВыполненияОбменовСЗЕРНО КАК ИсторияВыполненияОбменов
	|		ПО НачалоВыполнения.НастройкаРегламентногоЗадания = ИсторияВыполненияОбменов.НастройкаРегламентногоЗадания
	|		И НачалоВыполнения.ДатаНачала = ИсторияВыполненияОбменов.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.Организация = Настройки.Организация
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВремяВыполнения КАК ТаблицаВремяВыполнения
	|		ПО Настройки.Ссылка = ТаблицаВремяВыполнения.Настройка
	|ГДЕ
	|	ТаблицаВремяВыполнения.ВремяВыполнения > &ВремяВыполнения
	|",
	"ДлительностьРегламентныхЗаданийОбмена");
	
	// Настройка отправки сообщений из общей очереди
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ИсторияВыполненияОбменов.ДатаНачала) > 0
	|			ТОГДА СУММА(ИсторияВыполненияОбменов.КоличествоБлокировок) / КОЛИЧЕСТВО(ИсторияВыполненияОбменов.ДатаНачала)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоБлокировокОбмена
	|ПОМЕСТИТЬ ВТБлокировкиОбменаЗаПериод
	|ИЗ
	|	РегистрСведений.ИсторияВыполненияОбменовСЗЕРНО КАК ИсторияВыполненияОбменов
	|ГДЕ
	|	ИсторияВыполненияОбменов.ДатаНачала > ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -7)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТБлокировкиОбменаЗаПериод.КоличествоБлокировокОбмена
	|ИЗ
	|	ВТБлокировкиОбменаЗаПериод КАК ВТБлокировкиОбменаЗаПериод
	|ГДЕ
	|	ВТБлокировкиОбменаЗаПериод.КоличествоБлокировокОбмена > &ДопустимоеКоличествоБлокировок",
	"ОтправкаСообщенийИзОбщейОчереди");
	
	// Загрузка партий. Собственные партии, вид операции зерно
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание КАК РегламентноеЗадание
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаПартий)
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастроекОбмена = &ХэшЗерноСобственныеПартии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВладельцыПартий КАК ВладельцыПартий
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.Организация = ВладельцыПартий.Организация
	|		И ВладельцыПартий.ВидПродукции = Значение(Перечисление.ВидыПродукцииИС.Зерно)
	|",
	"НастройкаРегламентногоОбменаЗагрузкиПартийЗерноСобственныеПартии");
	
	// Загрузка остатков партий
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание КАК РегламентноеЗадание
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаОстатковПартий)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВладельцыПартий КАК ВладельцыПартий
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.Организация = ВладельцыПартий.Организация
	|		И ВладельцыПартий.ОстаткиНаХраненииЭлеватора
	|",
	"НастройкаРегламентногоОбменаЗагрузкиОстатковПартий");
	
	// Загрузка СДИЗ по виду операции зерно для СХТП
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание КАК РегламентноеЗадание
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлеваторыОрганизации КАК ЭлеваторыОрганизации
	|		ПО ЭлеваторыОрганизации.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаСДИЗ)
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастроекОбмена = &ХэшЗерноСХТП
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВладельцыПартий КАК ВладельцыПартий
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.Организация = ВладельцыПартий.Организация
	|		И ВладельцыПартий.ВидПродукции = Значение(Перечисление.ВидыПродукцииИС.Зерно)
	|ГДЕ
	|	ЭлеваторыОрганизации.Организация ЕСТЬ NULL
	|",
	"НастройкаРегламентногоОбменаЗагрузкиСДИЗЗерноСХТП");
	
	// Загрузка СДИЗ по виду операции зерно для Элеватора
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание КАК РегламентноеЗадание
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлеваторыОрганизации КАК ЭлеваторыОрганизации
	|		ПО ЭлеваторыОрганизации.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаСДИЗ)
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастроекОбмена = &ХэшЗерноЭлеватор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВладельцыПартий КАК ВладельцыПартий
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.КлючОрганизации = ВладельцыПартий.Элеватор
	|		И ВладельцыПартий.ВидПродукции = Значение(Перечисление.ВидыПродукцииИС.Зерно)
	|",
	"НастройкаРегламентногоОбменаЗагрузкиСДИЗЗерноЭлеватор");
	
	// Загрузка СДИЗ по виду операции ППЗ
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация,
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание КАК РегламентноеЗадание
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаСДИЗ)
	|		И НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастроекОбмена = &ХэшППЗ
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВладельцыПартий КАК ВладельцыПартий
	|		ПО СоответствиеКлючейОрганизацийИОрганизаций.Организация = ВладельцыПартий.Организация
	|		И ВладельцыПартий.ВидПродукции = Значение(Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна)
	|",
	"НастройкаРегламентногоОбменаЗагрузкиСДИЗППЗ");
	
	// Задание для отправки сообщений во ФГИС для клиент-серверной базы
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Настройки.РегламентноеЗадание КАК РегламентноеЗадание,
	|	СоответствиеКлючейОрганизацийИОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ ОтправкаСообщенийВоФГИС
	|ИЗ
	|	СоответствиеКлючейОрганизацийИОрганизаций КАК СоответствиеКлючейОрганизацийИОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК Настройки
	|		ПО Настройки.Организация = СоответствиеКлючейОрганизацийИОрганизаций.Организация
	|		И Настройки.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ОбменДанными)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтправкаСообщенийВоФГИС.РегламентноеЗадание,
	|	ОтправкаСообщенийВоФГИС.Организация
	|ИЗ
	|	ОтправкаСообщенийВоФГИС КАК ОтправкаСообщенийВоФГИС
	|ГДЕ
	|	НЕ &ЭтоФайловаяИБ
	|",
	"НастройкаРегламентногоОбменаДанными");
	
	// Настройте сертификат на сервере (не для фреша), если включено любое задание обмена и не настроены ответственные за подписание
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ СертификатыОрганизаций
	|ИЗ
	|	&СертификатыОрганизаций КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание,
	|	НастройкиРегламентныхЗаданийЗЕРНО.Организация КАК Организация
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыОрганизаций КАК СертификатыОрганизаций
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СертификатыОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтветственныеЗаПодписаниеСообщенийНеНастроены КАК
	|			ОтветственныеЗаПодписаниеСообщенийНеНастроены
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = ОтветственныеЗаПодписаниеСообщенийНеНастроены.Организация
	|ГДЕ
	|	НЕ &РазделениеВключено
	|	И СертификатыОрганизаций.Организация ЕСТЬ NULL",
	"НастройкаСертификатаНаСервере");
	
	// Настройте ответственных за подписание сообщений, если включено любое задание обмена и сертификаты не настроены
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание,
	|	НастройкиРегламентныхЗаданийЗЕРНО.Организация КАК Организация
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтветственныеЗаПодписаниеСообщенийНеНастроены КАК ОтветственныеЗаПодписаниеСообщенийНеНастроены
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = ОтветственныеЗаПодписаниеСообщенийНеНастроены.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СертификатыОрганизаций КАК СертификатыОрганизаций
	|		ПО НастройкиРегламентныхЗаданийЗЕРНО.Организация = СертификатыОрганизаций.Организация
	|ГДЕ
	|	СертификатыОрганизаций.Организация ЕСТЬ NULL
	|",
	"НастройкаОтветственныхЗаПодписаниеСообщений");
	
	ХэшиНастроекРегламентныхЗаданий = ХэшиНастроекРегламентныхЗаданий();
	
	Интервал = 60*60*24; // 1 день
	Смещение = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс()) - ТекущаяУниверсальнаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                               Организации);
	Запрос.УстановитьПараметр("СоответствиеКлючейОрганизацийИОрганизаций", СоответствиеКлючейОрганизацийИОрганизаций(Организации));
	Запрос.УстановитьПараметр("БезОтбора",                                 Организации.Количество() = 0);
	Запрос.УстановитьПараметр("ВремяВыполнения",                           ОбменДаннымиЗЕРНО.ДопустимоеВремяВыполненияРегламентногоЗаданияПоНастройкеОбмена());
	Запрос.УстановитьПараметр("ЭтоФайловаяИБ",                             ОбщегоНазначения.ИнформационнаяБазаФайловая());
	Запрос.УстановитьПараметр("СертификатыОрганизаций",                    ИнтеграцияИС.СертификатыОрганизаций());
	Запрос.УстановитьПараметр("РазделениеВключено",                        ОбщегоНазначения.РазделениеВключено());
	Запрос.УстановитьПараметр("ПустаяОрганизация",                         ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"));
	Запрос.УстановитьПараметр("ХэшЗерноСобственныеПартии",                 ХэшиНастроекРегламентныхЗаданий.ЗерноСобственныеПартии);
	Запрос.УстановитьПараметр("ХэшЗерноПартииНаХранении",                  ХэшиНастроекРегламентныхЗаданий.ЗерноПартииНаХранении);
	Запрос.УстановитьПараметр("ХэшППЗ",                                    ХэшиНастроекРегламентныхЗаданий.ППЗ);
	Запрос.УстановитьПараметр("ХэшЗерноСХТП",                              ХэшиНастроекРегламентныхЗаданий.ЗерноСХТП);
	Запрос.УстановитьПараметр("ХэшЗерноЭлеватор",                          ХэшиНастроекРегламентныхЗаданий.ЗерноЭлеватор);
	Запрос.УстановитьПараметр("ИнтервалДлительногоОтсутствияОбмена",       7*60*60*24);
	Запрос.УстановитьПараметр("Интервал",                                  Интервал);
	Запрос.УстановитьПараметр("Смещение",                                  Смещение);
	Запрос.УстановитьПараметр("ТекущаяДата",                               ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ДопустимоеКоличествоБлокировок",            3);
	Запрос.УстановитьПараметр("ИмяЗапросаСДИЗ",                            ИмяЗапросаСДИЗ());
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат РезультатыЗапроса;
	
КонецФункции

Функция ХэшиНастроекРегламентныхЗаданий()
	
	СтруктураХэшей = Новый Структура();
	
	ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаСДИЗ;
	
	ПараметрыНастройкиОбмена = Новый Структура("ВидПродукции, ТипОрганизации", Перечисления.ВидыПродукцииИС.Зерно, 0);
	СтруктураХэшей.Вставить("ЗерноСХТП", Справочники.НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастройкиОбмена(ВидНастройкиОбмена, ПараметрыНастройкиОбмена));
	
	ПараметрыНастройкиОбмена = Новый Структура("ВидПродукции, ТипОрганизации", Перечисления.ВидыПродукцииИС.Зерно, 1);
	СтруктураХэшей.Вставить("ЗерноЭлеватор", Справочники.НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастройкиОбмена(ВидНастройкиОбмена, ПараметрыНастройкиОбмена));
	
	ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаПартий;
	
	ПараметрыНастройкиОбмена = Новый Структура("ВидПродукции, Операция", Перечисления.ВидыПродукцииИС.Зерно, Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий);
	СтруктураХэшей.Вставить("ЗерноСобственныеПартии", Справочники.НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастройкиОбмена(ВидНастройкиОбмена, ПараметрыНастройкиОбмена));
	
	ПараметрыНастройкиОбмена = Новый Структура("ВидПродукции, Операция", Перечисления.ВидыПродукцииИС.Зерно, Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении);
	СтруктураХэшей.Вставить("ЗерноПартииНаХранении", Справочники.НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастройкиОбмена(ВидНастройкиОбмена, ПараметрыНастройкиОбмена));
	
	ПараметрыНастройкиОбмена = Новый Структура("ВидПродукции", Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна);
	СтруктураХэшей.Вставить("ППЗ", Справочники.НастройкиРегламентныхЗаданийЗЕРНО.ХешСуммаПараметровНастройкиОбмена(ВидНастройкиОбмена, ПараметрыНастройкиОбмена));
	
	Возврат СтруктураХэшей;
	
КонецФункции

Функция СоответствиеКлючейОрганизацийИОрганизаций(Знач Организации) Экспорт
	
	Если Организации.Количество() = 0 Тогда
		Организации = ОбщегоНазначенияИС.ДоступныеОрганизации();
	КонецЕсли;
	КлючиОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(Организации.ВыгрузитьЗначения());
	СоответствиеКлючейОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(КлючиОрганизаций);
	
	СоответствиеКлючейОрганизацийИОрганизаций = Новый ТаблицаЗначений;
	СоответствиеКлючейОрганизацийИОрганизаций.Колонки.Добавить("Организация",   Метаданные.ОпределяемыеТипы.Организация.Тип);
	СоответствиеКлючейОрганизацийИОрганизаций.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	СоответствиеКлючейОрганизацийИОрганизаций.Колонки.Добавить("КлючОрганизации", Новый ОписаниеТипов("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО"));
	
	Для Каждого ЭлементСоответствия ИЗ СоответствиеКлючейОрганизаций Цикл
		Строка = СоответствиеКлючейОрганизацийИОрганизаций.Добавить();
		Строка.Организация     = ЭлементСоответствия.Значение.Организация;
		Строка.Подразделение   = ЭлементСоответствия.Значение.Подразделение;
		Строка.КлючОрганизации = ЭлементСоответствия.Ключ;
	КонецЦикла;
	
	Возврат СоответствиеКлючейОрганизацийИОрганизаций;
	
КонецФункции

Процедура РассчитатьСтатусУказанияТранспортныхСредств(Объект, ИдентификаторСтроки = Неопределено) Экспорт
	
	ТаблицаСДИЗ = Новый ТаблицаЗначений;
	ТаблицаСДИЗ.Колонки.Добавить("СДИЗ",         Новый ОписаниеТипов("СправочникСсылка.СДИЗЗЕРНО"));
	ТаблицаСДИЗ.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаСДИЗ.Колонки.Добавить("ЕстьТС",       Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если ИдентификаторСтроки <> Неопределено
			И ИдентификаторСтроки <> СтрокаТовары.Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.СДИЗ) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТоваров", СтрокаТовары.Идентификатор);
			СтрокиТранспорта = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
			НоваяСтрока = ТаблицаСДИЗ.Добавить();
			НоваяСтрока.СДИЗ         = СтрокаТовары.СДИЗ;
			НоваяСтрока.ИндексСтроки = Объект.Товары.Индекс(СтрокаТовары);
			НоваяСтрока.ЕстьТС       = (СтрокиТранспорта.Количество() > 0);
		Иначе
			СтрокаТовары.СтатусУказанияТранспорта = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТаблицаСДИЗ.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанных.СДИЗ,
		|	ТаблицаДанных.ИндексСтроки,
		|	ТаблицаДанных.ЕстьТС
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.СДИЗ,
		|	ТаблицаДанных.ИндексСтроки,
		|	ТаблицаДанных.ЕстьТС,
		|	ЕСТЬNULL(СДИЗЗЕРНОТранспортныеСредства.ТипТранспорта, НЕОПРЕДЕЛЕНО) КАК ТипТранспорта
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО.ТранспортныеСредства КАК СДИЗЗЕРНОТранспортныеСредства
		|		ПО ТаблицаДанных.СДИЗ = СДИЗЗЕРНОТранспортныеСредства.Ссылка
		|		И СДИЗЗЕРНОТранспортныеСредства.НомерСтроки = 1";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаСДИЗ);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаТовары = Объект.Товары[ВыборкаДетальныеЗаписи.ИндексСтроки];
		Если ВыборкаДетальныеЗаписи.ТипТранспорта = Неопределено Тогда
			СтрокаТовары.СтатусУказанияТранспорта = 0;
		ИначеЕсли ВыборкаДетальныеЗаписи.ЕстьТС Тогда
			СтрокаТовары.СтатусУказанияТранспорта = 2;
		Иначе
			СтрокаТовары.СтатусУказанияТранспорта = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользоватьАвтоматическийОбменДанными(Организация, Подразделение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиРегламентныхЗаданийЗЕРНО.РегламентноеЗадание
		|ИЗ
		|	Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданийЗЕРНО
		|ГДЕ
		|	НастройкиРегламентныхЗаданийЗЕРНО.Организация = &Организация
		|	И ВЫБОР
		|		КОГДА &ИспользоватьПодразделение
		|			ТОГДА НастройкиРегламентныхЗаданийЗЕРНО.Подразделение = &Подразделение
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|	И НастройкиРегламентныхЗаданийЗЕРНО.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ОбменДанными)";
	
	Если ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс()
		И Подразделение <> Неопределено Тогда
		ИспользоватьПодразделение = Истина;
	Иначе
		ИспользоватьПодразделение = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("Подразделение",             Подразделение);
	Запрос.УстановитьПараметр("ИспользоватьПодразделение", ИспользоватьПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Задание = РегламентныеЗаданияСервер.Задание(ВыборкаДетальныеЗаписи.РегламентноеЗадание);
		Если Задание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Задание.Использование Тогда
			ВозвращаемоеЗначение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполнить данные очереди при уведомлении ответственного.
// 
// Параметры:
//  НастройкиОтветственного - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.НастройкиОтветственногоЗаПодписаниеСообщений
//  Результат - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.РезультатПериодическогоПолученияДанных
Процедура ЗаполнитьДанныеОчередиПриУведомленииОтветственного(НастройкиОтветственного, Результат)
	
	ТаблицаОтбора = НоваяТаблицаОтбораСообщенийКПодписанию();
	
	Если НастройкиОтветственного.ВсеОрганизацииВсеПодразделения <> Неопределено Тогда
		ТаблицаОтбора.Добавить();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из НастройкиОтветственного.ОрганизацииПоВсемПодразделениям Цикл
		НоваяСтрока = ТаблицаОтбора.Добавить();
		НоваяСтрока.Организация          = КлючИЗначение.Ключ;
		НоваяСтрока.УчитыватьОрганизацию = Истина;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НастройкиОтветственного.ПодразделенияПоВсемОрганизациям Цикл
		НоваяСтрока = ТаблицаОтбора.Добавить();
		НоваяСтрока.Подразделение          = КлючИЗначение.Ключ;
		НоваяСтрока.УчитыватьПодразделение = Истина;
	КонецЦикла;
	
	Для Каждого КлючИЗначениеОрганизация Из НастройкиОтветственного.ОрганизацииИПодразделения Цикл
		
		Для Каждого КлючИЗначениеПодразделение Из КлючИЗначениеОрганизация.Значение Цикл
			НоваяСтрока = ТаблицаОтбора.Добавить();
			НоваяСтрока.Организация            = КлючИЗначениеОрганизация.Ключ;
			НоваяСтрока.Подразделение          = КлючИЗначениеПодразделение.Ключ;
			НоваяСтрока.УчитыватьОрганизацию   = Истина;
			НоваяСтрока.УчитыватьПодразделение = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеСообщений = ИнтеграцияЗЕРНОВызовСервера.СообщенияВОчередиТребующиеПодписания(ТаблицаОтбора);
	
	Для Каждого КлючИЗначение Из ДанныеСообщений.СообщенияКПодписанию Цикл
		
		Для Каждого ДанныеСообщения Из КлючИЗначение.Значение Цикл
			
			Если Не ДанныеСообщения.ДоступныСертификаты Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ОперацияПодписываетсяНаКлиентеБезПодтверждения(ДанныеСообщения.Операция) Тогда
				
				КоллекцияПоОрганизации = ИнтеграцияЗЕРНОСлужебный.МассивИзСоответствияПоКлючу(
					Результат.ДанныеАвтоподписания,
					КлючИЗначение.Ключ);
				КоллекцияПоОрганизации.Добавить(ДанныеСообщения);
			
			Иначе
				
				ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ДобавитьМинимальнуюДатуСообщенияПоОранизации(
					Результат.ОрганизацииИмеющиеСообщения, 
					ДанныеСообщения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.ДоступныеСертификаты = ДанныеСообщений.ДоступныеСертификаты;
	
КонецПроцедуры

// Новая таблица отбора сообщений к подписанию.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица отбора сообщений к подписанию:
// * Организация            - ОпределяемыйТип.Организация -
// * Подразделение          - ОпределяемыйТип.Подразделение -
// * УчитыватьПодразделение - Булево -
// * УчитыватьОрганизацию   - Булево -
Функция НоваяТаблицаОтбораСообщенийКПодписанию() Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений();
	ВозвращаемоеЗначение.Колонки.Добавить("Организация",            Метаданные.ОпределяемыеТипы.Организация.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("Подразделение",          Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("УчитыватьОрганизацию",   Новый ОписаниеТипов("Булево"));
	ВозвращаемоеЗначение.Колонки.Добавить("УчитыватьПодразделение", Новый ОписаниеТипов("Булево"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция УчитываемыеВидыПродукции()
	
	УчитываемыеВидыПродукции = НоваяТаблицаУчитываемыеВидыПродукции();
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если Не РазделениеВключено
		Или РазделениеВключено
			И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ДоступныеОрганизации = ОбщегоНазначенияИС.ДоступныеОрганизации();
		
		Для Каждого Организация Из ДоступныеОрганизации Цикл
			НоваяСтрока = УчитываемыеВидыПродукции.Добавить();
			НоваяСтрока.Организация = Организация.Значение;
			НоваяСтрока.УчетЗерна = Истина;
			НоваяСтрока.УчетПродуктовПереработкиЗерна = Истина;
			НоваяСтрока.ОрганизацияЯвляетсяЭлеватором = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(УчитываемыеВидыПродукции);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

Функция НоваяТаблицаУчитываемыеВидыПродукции()
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений();
	ВозвращаемоеЗначение.Колонки.Добавить("Организация",                   Метаданные.ОпределяемыеТипы.Организация.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("Подразделение",                 Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("УчетЗерна",                     Новый ОписаниеТипов("Булево"));
	ВозвращаемоеЗначение.Колонки.Добавить("УчетПродуктовПереработкиЗерна", Новый ОписаниеТипов("Булево"));
	ВозвращаемоеЗначение.Колонки.Добавить("ОрганизацияЯвляетсяЭлеватором", Новый ОписаниеТипов("Булево"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИмяЗапросаСДИЗ()
	
	ИмяЗапросаСДИЗ = Новый Массив;
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерно);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноОтказОтПогашения);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноПогашение);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеватор);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеваторОтказОтПогашения);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеваторПогашение);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗ);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗОтказОтПогашения);
	ИмяЗапросаСДИЗ.Добавить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗПогашение);
	
	Возврат ИмяЗапросаСДИЗ;
	
КонецФункции

#Область Статусы

// Получить представление статуса ЗЕРНО.
//
// Параметры:
//  Статус                     - ПеречислениеСсылка - Статус документа ЗЕРНО.
//  ВходящиеДальнейшееДействие - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - входящие дальнейшие действия.
//  ДопустимыеДействия         - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Список разрешенных дальнейших действий.
//  КраткоеПредставление       - Булево - Краткое представление для отображения в строке товаров
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ЗЕРНО.
//
Функция ПредставлениеСтатуса(Статус, ВходящиеДальнейшееДействие, ДопустимыеДействия) Экспорт
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО") Тогда
		МассивДопустимыеДействия = Новый Массив;
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(Статус) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВнимания = СтатусыЦветТекстаТребуетВнимания();
		
		ПредставленниеСтатуса = Строка(Статус);
		
		Если СтатусыЦветТекстаТребуетВнимания.Найти(Статус) <> Неопределено Тогда
			СтатусПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					ПредставленниеСтатуса,,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусПредставление = Новый ФорматированнаяСтрока(ПредставленниеСтатуса);
		КонецЕсли;
		
	Иначе
		СтатусПредставление = Статус;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО")
		И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки     = "";
		ЯвляетсяГиперссылкой = Истина;
		Представление        = НРег(Строка(ДальнейшееДействие));
		Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
			ТекстГиперссылки = "АннулироватьОперацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию Тогда
			ТекстГиперссылки = "ОтменитьОперацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеПередачуДанных Тогда
			ТекстГиперссылки = "ОтменитьПередачуДанных";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СоздайтеМестаФормированияПартий Тогда
			ТекстГиперссылки = "СоздатьМестаФормированияПартий";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СформируйтеПартии Тогда
			ТекстГиперссылки = "СформироватьПартии";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеОтказОтГашения Тогда
			ТекстГиперссылки = "ОтказатьсяОтГашения";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуСДИЗ Тогда
			ТекстГиперссылки = "КорректироватьСДИЗ";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуПогашенияСДИЗ Тогда
			ТекстГиперссылки = "КорректироватьПогашениеСДИЗ";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			Если НЕ ЯвляетсяГиперссылкой Тогда
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)));
			Иначе
				
				ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
				
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					Представление,
					Новый Шрифт(,,,,Истина),
					ЦветСтиля,
					,
					ТекстГиперссылки);
			КонецЕсли;
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

// Получить статусы ЗЕРНО, цвет текста которых "требует внимания"
// 
// Возвращаемое значение:
//  Массив - Статусы ЗЕРНО, для которых требуется устанавливать цвет "требует внимания"
//
Функция СтатусыЦветТекстаТребуетВнимания() Экспорт
	
	СтатусыЦветТекстаТребуетВнимания = Новый Массив;
	
	Для Каждого Статус Из Документы.ФормированиеПартийЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ОформлениеСДИЗЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.СписаниеПартийЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ПогашениеСДИЗЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ФормированиеПартийИзДругихПартийЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ЗапросОстатковПартийЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Для Каждого Статус Из Документы.ФормированиеПартийПриПроизводствеЗЕРНО.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	Возврат СтатусыЦветТекстаТребуетВнимания;
	
КонецФункции

// Выполняет начальную запись в регистр "Статусы документов ИС МП"
// 
// Параметры:
//  Источник - ДокументОбъект.ФормированиеПартийЗЕРНО, ДокументОбъект.ФормированиеПартийИзДругихПартийЗЕРНО - документ ЗЕРНО.
Процедура ЗаписатьСтатусДокументаЗЕРНОПоУмолчанию(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый)
		Или Источник.ДополнительныеСвойства.Свойство("ТребуетсяПерезаписьСтатусаПоУмолчанию");
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

// Функция формирует представления всех документов, поддерживающих корректировку.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ОбъектМетаданных - метаданные документа, поддерживающего корректировку
//   * Значение - Структура из КлючИЗначение:
//     ** Основной - Строка - шаблон основного представления документа
//     ** Корректировочный - Строка - шаблон представления корректировочного документа
Функция ПредставленияДокументовПоддерживающихКорректировку()
	
	СоответствиеПредставлений = Новый Соответствие();
	
	// Оформление СДИЗ
	МетаданныеДокументаОформлениеСДИЗ = Метаданные.Документы.ОформлениеСДИЗЗЕРНО;
	СтруктураПредставлений = Новый Структура("Основной, Корректировочный", "", "");
	
	СтруктураПредставлений.Основной         = МетаданныеДокументаОформлениеСДИЗ.Синоним;
	СтруктураПредставлений.Корректировочный = СтрШаблон(НСтр("ru = 'Корректировка %1'"), 
		ПолучитьСклоненияСтроки(НРег(Лев(МетаданныеДокументаОформлениеСДИЗ.Синоним, 1)) + Сред(МетаданныеДокументаОформлениеСДИЗ.Синоним, 2), "Л=ru_RU", "ПД=Родительный")[0]);
	
	СоответствиеПредставлений.Вставить(МетаданныеДокументаОформлениеСДИЗ, СтруктураПредставлений);
	
	// Погашение СДИЗ
	МетаданныеДокументаПогашениеСДИЗ = Метаданные.Документы.ПогашениеСДИЗЗЕРНО;
	СтруктураПредставлений = Новый Структура("Основной, Корректировочный", "", "");
	
	СтруктураПредставлений.Основной         = МетаданныеДокументаПогашениеСДИЗ.Синоним;
	СтруктураПредставлений.Корректировочный = СтрШаблон(НСтр("ru = 'Корректировка %1'"), 
	ПолучитьСклоненияСтроки(НРег(Лев(МетаданныеДокументаПогашениеСДИЗ.Синоним, 1)) + Сред(МетаданныеДокументаПогашениеСДИЗ.Синоним, 2), "Л=ru_RU", "ПД=Родительный")[0]);
	
	СоответствиеПредставлений.Вставить(МетаданныеДокументаПогашениеСДИЗ, СтруктураПредставлений);
	
	Возврат СоответствиеПредставлений;
	
КонецФункции

// Функция формирует представление конкретного документа, поддерживающего корректировку.
// 
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - метаданные документа, поддерживающего корректировку
// 
// Возвращаемое значение:
//  Структура - Представление документа поддерживающего корректировку:
//   * Основной - Строка - шаблон основного представления документа
//   * Корректировочный - Строка - шаблон представления корректировочного документа
Функция ПредставлениеДокументаПоддерживающегоКорректировку(МетаданныеДокумента)
	
	ВозвращаемоеЗначение = Новый Структура("Основной, Корректировочный", "", "");
	
	ПредставлениеНаименований = ПредставленияДокументовПоддерживающихКорректировку().Получить(МетаданныеДокумента);
	
	Если Не ПредставлениеНаименований = Неопределено Тогда
		
		ВозвращаемоеЗначение.Основной         = ПредставлениеНаименований.Основной;
		ВозвращаемоеЗначение.Корректировочный = ПредставлениеНаименований.Корректировочный;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

Процедура ИнициализироватьКэшВидовСельхозКультур(Форма, КодыОКПД2) Экспорт
	
	Если ЗначениеЗаполнено(КодыОКПД2) Тогда
		Форма.КэшВидовСельхозКультур.Загрузить(
			РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(КодыОКПД2));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСлужебныеРеквизитыПотребительскихСвойств(Форма, ОКПД2, ИнициализироватьТип = Ложь,
	НазначениеПартии = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	СтранаНазначения = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СтранаНазначения") Тогда
		СтранаНазначения = Объект.СтранаНазначения;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "НазначениеПартии") Тогда
		НазначениеПартии = Объект.НазначениеПартии;
	КонецЕсли;
	
	ПотребительскиеСвойства = ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(ОКПД2, НазначениеПартии, ,СтранаНазначения);
	ОбновитьКэшПотребительскихСвойств(Форма, ПотребительскиеСвойства, ОКПД2);
	
	Если ПотребительскиеСвойства <> Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура("ОКПД2, ПотребительскоеСвойство");
		ПараметрыОтбора.ОКПД2 = ОКПД2;
		
		Для Каждого СтрокаПотребительскогоСвойства Из Объект.ПотребительскиеСвойства Цикл
			
			ПараметрыОтбора.ПотребительскоеСвойство = СтрокаПотребительскогоСвойства.ПотребительскоеСвойство;
			НайденныеСтроки = ПотребительскиеСвойства.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если ИнициализироватьТип И СтрокаПотребительскогоСвойства.Значение = Неопределено Тогда
					
					ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьСтрокуПотребительскогоСвойства(Форма, СтрокаПотребительскогоСвойства, НайденнаяСтрока);
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(СтрокаПотребительскогоСвойства,
						НайденнаяСтрока,
						"ПредставлениеДиапазона, ДиапазонС, ДиапазонПо");
					Если НайденнаяСтрока.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число") Тогда
						СтрокаПотребительскогоСвойства.ДиапазонИспользуется = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКэшПотребительскихСвойств(Форма, ПотребительскиеСвойства, Знач КодыОКПД2) Экспорт
	
	Если Не ЗначениеЗаполнено(ПотребительскиеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КодыОКПД2) = Тип("Массив") Тогда
		КодыОКПД2 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыОКПД2);
	Иначе
		КодыОКПД2 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодыОКПД2);
	КонецЕсли;
	
	Отбор = Новый Структура("ОКПД2");
	Для Каждого ОКПД2 ИЗ КодыОКПД2 Цикл
		Отбор.ОКПД2 = ОКПД2;
		ПотребительскиеСвойстваТекущейСтроки = ПотребительскиеСвойства.НайтиСтроки(Отбор);
		Если ПотребительскиеСвойстваТекущейСтроки.Количество() Тогда
			ОбновитьКэшПотребительскихСвойствПоСтроке(Форма, ПотребительскиеСвойства, ОКПД2);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКэшПотребительскихСвойствПоСтроке(Форма, ПотребительскиеСвойства, Знач ОКПД2) Экспорт
	
	ПараметрыПоиска = Новый Структура("ОКПД2", ОКПД2);
	
	НайденныеСтроки = Форма.КэшПотребительскихСвойств.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Для Каждого СтрокаПотребительскогоСвойства Из ПотребительскиеСвойства Цикл
			НоваяСтрока = Форма.КэшПотребительскихСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПотребительскогоСвойства);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(Знач ОКПД2, Знач НазначениеПартии = Неопределено, Знач Операция = Неопределено,
	Знач СтранаНазначения = Неопределено) Экспорт
	
	Если ТипЗнч(ОКПД2) = Тип("Массив") Тогда
		КодыОКПД2 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОКПД2);
	Иначе
		КодыОКПД2 = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОКПД2);
	КонецЕсли;
	
	НазначениеПотребительскогоСвойства = НазначениеПотребительскогоСвойстваДаннымПартии(НазначениеПартии);
	
	Если НазначениеПартии <> ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ") Тогда
		СтранаНазначения = Неопределено;
	КонецЕсли;
	
	ПотребительскиеСвойства =  РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО.ДопустимыеПотребительскиеСвойства(
		КодыОКПД2, НазначениеПотребительскогоСвойства, СтранаНазначения);
	
	Возврат ПотребительскиеСвойства;
	
КонецФункции

Процедура СкопироватьПотребительскиеСвойстваПартии(Партия, ПотребительскиеСвойства, КэшПотребительскихСвойств) Экспорт
	
	СвойстваПартии = Справочники.РеестрПартийЗЕРНО.ПотребительскиеСвойстваПартии(Партия);
	
	Для Каждого СтрокаПотребительскоеСвойство Из СвойстваПартии Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПотребительскоеСвойство.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ПотребительскоеСвойство", СтрокаПотребительскоеСвойство.ПотребительскоеСвойство);
		НайденныеСтроки = ПотребительскиеСвойства.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			СкопироватьЗначениеПотребительскогоСвойства(
				СтрокаПотребительскоеСвойство, НайденнаяСтрока, КэшПотребительскихСвойств);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьЗначениеПотребительскогоСвойства(СтрокаИсточник, СтрокаПриемник, КэшПотребительскихСвойств) Экспорт
	
	Если ТипЗнч(СтрокаПриемник.Значение) = ТипЗнч(СтрокаИсточник.Значение) Тогда
		
		СтрокаПриемник.Значение = СтрокаИсточник.Значение;
		
	Иначе
		
		Отбор = Новый Структура("ПотребительскоеСвойство", СтрокаИсточник.ПотребительскоеСвойство);
		ДанныеПотребительскогоСвойства = КэшПотребительскихСвойств.НайтиСтроки(Отбор);
		
		Если ДанныеПотребительскогоСвойства.Количество() > 0 Тогда
			
			ТипЗначенияСвойства = ДанныеПотребительскогоСвойства[0].ТипЗначения;
			Если ТипЗначенияСвойства = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Строка Тогда
				
				СтрокаПриемник.Значение = Строка(СтрокаИсточник.Значение);
				
			ИначеЕсли ТипЗначенияСвойства = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Перечисление Тогда
				
				ДоступныеЗначения = СтрРазделить(ДанныеПотребительскогоСвойства[0].ДопустимыеЗначения, "|");
				Если ДоступныеЗначения.Найти(Строка(СтрокаИсточник.Значение)) <> Неопределено Тогда
					СтрокаПриемник.Значение = СтрокаИсточник.Значение;
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияСвойства = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число Тогда
				
				ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(11, 4);
				СтрокаПриемник.Значение = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаИсточник.Значение);
				
			ИначеЕсли ТипЗначенияСвойства = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Булево Тогда
				
				ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
				СтрокаПриемник.Значение = ОписаниеТипаБулево.ПривестиЗначение(СтрокаИсточник.Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВыбораОКПД2(Текст, ВидПродукции) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	КлассификаторНСИЗЕРНО.Идентификатор,
	|	КлассификаторНСИЗЕРНО.Наименование
	|ИЗ
	|	Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|ГДЕ
	|	КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)
	|	И КлассификаторНСИЗЕРНО.ВидПродукции В (&ВидПродукции)
	|	И НЕ КлассификаторНСИЗЕРНО.ПометкаУдаления
	|	И (КлассификаторНСИЗЕРНО.Идентификатор ПОДОБНО &СтрокаПоиска
	|	ИЛИ КлассификаторНСИЗЕРНО.Наименование ПОДОБНО &СтрокаПоиска)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрВидПродукции = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	Иначе
		ПараметрВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидПродукции", ПараметрВидПродукции);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(Выборка.Наименование, Выборка.Идентификатор);
		ДанныеВыбора.Добавить(
			Новый Структура("Код, Представление", Выборка.Идентификатор, Представление),
			Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция НаименованияКодовОКПД2ПоТабличнойЧасти(ИсточникДанных) Экспорт
	
	Если ТипЗнч(ИсточникДанных) = Тип("ТаблицаЗначений") Тогда
		ПараметрТаблицаОКПД2 = ИсточникДанных;
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
		ПараметрТаблицаОКПД2 = Новый ТаблицаЗначений();
		ПараметрТаблицаОКПД2.Колонки.Добавить("ОКПД2", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ПараметрТаблицаОКПД2.Добавить().ОКПД2 = ИсточникДанных;
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Массив") Тогда
		ПараметрТаблицаОКПД2 = Новый ТаблицаЗначений();
		ПараметрТаблицаОКПД2.Колонки.Добавить("ОКПД2", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		Для Каждого ОКПД2 Из ИсточникДанных Цикл
			ПараметрТаблицаОКПД2.Добавить().ОКПД2 = ОКПД2;
		КонецЦикла;
	Иначе
		Колонки = "ОКПД2";
		ПараметрТаблицаОКПД2 = ИсточникДанных.Выгрузить(, Колонки);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникДанных", ПараметрТаблицаОКПД2);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОКПД2.ОКПД2 КАК ОКПД2
	|ПОМЕСТИТЬ КодыОКПД2
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаОКПД2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыОКПД2.ОКПД2                                    КАК Идентификатор,
	|	ЕстьNULL(КлассификаторНСИЗЕРНО.Наименование, """") КАК Наименование
	|ИЗ
	|	КодыОКПД2 КАК КодыОКПД2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|		ПО КодыОКПД2.ОКПД2 = КлассификаторНСИЗЕРНО.Идентификатор
	|ГДЕ
	|	КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)
	|СГРУППИРОВАТЬ ПО 
	|	КодыОКПД2.ОКПД2,
	|	ЕстьNULL(КлассификаторНСИЗЕРНО.Наименование, """")";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Заполняет значение кода ТН ВЭД по сформированной таблице из регистра ВидыСельскохозяйственныхКультурЗЕРНО по значению ОКПД2.
// КодТНВЭД очищается, если переданное значение не соответствует таблице отбора.
// 
// Параметры:
//  КодТНВЭД - Строка - текущий код КодТНВЭД, параметр для заполнения.
//  ОКПД2 - Строка - код ОКПД2 для отбора.
//  ТаблицаОКПД2ТНВЭД - См. РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2
Процедура ЗаполнитьТНВЭДПоВидуСельхозКультур(КодТНВЭД, ОКПД2, ТаблицаОКПД2ТНВЭД) Экспорт
	
	Если ТаблицаОКПД2ТНВЭД.Количество() = 1 Тогда
		КодТНВЭД = ТаблицаОКПД2ТНВЭД[0].КодТНВЭД;
	ИначеЕсли ЗначениеЗаполнено(КодТНВЭД)
		И ТаблицаОКПД2ТНВЭД.Найти(КодТНВЭД) = Неопределено Тогда
		КодТНВЭД = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКэшВидовСельхозКультур(Форма, ВидыСельхозКультур) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидыСельхозКультур) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВидыСельхозКультур Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ОКПД2", СтрокаТаблицы.ОКПД2);
		ПараметрыОтбора.Вставить("КодТНВЭД", СтрокаТаблицы.КодТНВЭД);
		
		НайденныеСтроки = Форма.КэшВидовСельхозКультур.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаКэша = Форма.КэшВидовСельхозКультур.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКэша, СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные выбора при подборе ТНВЭД
// 
// Параметры:
//  Текст - Строка.
//  КодыОКПД2 - Массив из Строка
//            - Строка
//  ДанныеКэша - Неопределено,
//            - ТаблицаЗначений:
//   * ОКПД2 - Строка - Исходный ОКПД2.
//   * КодТНВЭД - Строка - Код ТН ВЭД.
//   * Представление - Строка - представление ТН ВЭД.
// 
// Возвращаемое значение:
//  СписокЗначений.
Функция ДанныеВыбораКодТНВЭД(Текст, КодыОКПД2, Знач ДанныеКэша = Неопределено) Экспорт
	
	ДанныеВыбора   = Новый СписокЗначений;
	СписокЗапросов = Новый СписокЗначений;
	
	ИспользоватьДанныеКэша = ЗначениеЗаполнено(ДанныеКэша);
	
	Если ИспользоватьДанныеКэша Тогда
		
		Если ТипЗнч(ДанныеКэша) = Тип("ДанныеФормыКоллекция") Тогда
			ТаблицаОтбора = ДанныеКэша.Выгрузить();
		Иначе
			ТаблицаОтбора = ДанныеКэша;
		КонецЕсли;
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеВидовСельхозКультур.ОКПД2 КАК СТРОКА(36))          КАК ОКПД2,
		|	ВЫРАЗИТЬ(ДанныеВидовСельхозКультур.КодТНВЭД КАК СТРОКА(10))       КАК КодТНВЭД,
		|	ВЫРАЗИТЬ(ДанныеВидовСельхозКультур.Представление КАК СТРОКА(255)) КАК ТНВЭДНаименование
		|ПОМЕСТИТЬ ДанныеВидовСельхозКультур
		|ИЗ
		|	&ТаблицаОтбора КАК ДанныеВидовСельхозКультур
		|");
		
		ИмяТаблицы = "ДанныеВидовСельхозКультур";
		
	Иначе
		
		ИмяТаблицы = "РегистрСведений.ВидыСельскохозяйственныхКультурЗЕРНО";
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 51
	|	ВидыСельскохозяйственныхКультурЗЕРНО.ОКПД2             КАК ОКПД2,
	|	ВидыСельскохозяйственныхКультурЗЕРНО.КодТНВЭД          КАК КодТНВЭД,
	|	ВидыСельскохозяйственныхКультурЗЕРНО.ТНВЭДНаименование КАК Наименование
	|ИЗ
	|	%1 КАК ВидыСельскохозяйственныхКультурЗЕРНО
	|ГДЕ
	|	ВидыСельскохозяйственныхКультурЗЕРНО.ОКПД2 В (&ОКПД2)
	|	И (ВидыСельскохозяйственныхКультурЗЕРНО.КодТНВЭД ПОДОБНО &СтрокаПоиска
	|		ИЛИ ВидыСельскохозяйственныхКультурЗЕРНО.ТНВЭДНаименование ПОДОБНО &СтрокаПоиска)
	|	//УсловиеОтбораДействуетПо";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Если ИспользоватьДанныеКэша Тогда
		Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//УсловиеОтбораДействуетПо",
			"И (ВидыСельскохозяйственныхКультурЗЕРНО.ДействуетПо >= &Дата
			|	Или ВидыСельскохозяйственныхКультурЗЕРНО.ДействуетПо = ДатаВремя(1,1,1))");
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	КонецЕсли;
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ДанныеТНВЭД");
	
	Запрос.УстановитьПараметр("ОКПД2", КодыОКПД2);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ДанныеТНВЭД = РезультатЗапроса["ДанныеТНВЭД"].Выбрать();
	
	Пока ДанныеТНВЭД.Следующий() Цикл
		
		Если ИспользоватьДанныеКэша Тогда
			Представление = ДанныеТНВЭД.Наименование;
		Иначе
			Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеКодТНВЭД(ДанныеТНВЭД.Наименование, ДанныеТНВЭД.КодТНВЭД);
		КонецЕсли;
		
		ДанныеВыбора.Добавить(ДанныеТНВЭД.КодТНВЭД, Представление);
		
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

#Область СопоставлениеНоменклатуры

//Возвращает текст запроса - однозначно сопоставленных позиций
Функция ТекстЗапросаСопоставленныеТоварыБезПартий()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Партия КАК Партия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтрокиТовара,
	|	МАКСИМУМ(СоответствиеНоменклатуры.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеНоменклатуры.Характеристика) КАК Характеристика
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеНоменклатуры
	|		ПО СоответствиеНоменклатуры.Партия = ТабличнаяЧасть.Партия
	|ГДЕ
	|	ТабличнаяЧасть.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Номенклатура) = 1
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Характеристика) < 2";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСопоставленныеТоварыСПартиями()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Партия КАК Партия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Партия КАК Партия,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Номенклатура) КАК КоличествоНоменклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Характеристика) КАК КоличествоХарактеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Серия) КАК КоличествоСерия
	|ПОМЕСТИТЬ ВтКоличествоСопоставлено1
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеНоменклатуры
	|		ПО СоответствиеНоменклатуры.Партия = ТабличнаяЧасть.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Партия КАК Партия,
	|	ТабличнаяЧасть.КоличествоНоменклатура КАК КоличествоНоменклатура,
	|	ТабличнаяЧасть.КоличествоХарактеристика КАК КоличествоХарактеристика,
	|	ТабличнаяЧасть.КоличествоСерия КАК КоличествоСерия,
	|	ИСТИНА КАК ЕстьПартия
	|ПОМЕСТИТЬ ВтКоличествоСопоставлено
	|ИЗ
	|	ВтКоличествоСопоставлено1 КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Партия КАК Партия,
	|	СоответствиеНоменклатуры.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатуры.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатуры.Серия КАК Серия,
	|	КоличествоСопоставлено.КоличествоНоменклатура КАК КоличествоНоменклатура,
	|	КоличествоСопоставлено.КоличествоХарактеристика КАК КоличествоХарактеристика,
	|	КоличествоСопоставлено.КоличествоСерия КАК КоличествоСерия,
	|	КоличествоСопоставлено.ЕстьПартия КАК ЕстьПартия
	|ПОМЕСТИТЬ ВтСопоставлено
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО КоличествоСопоставлено.Партия = ТабличнаяЧасть.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеНоменклатуры
	|		ПО СоответствиеНоменклатуры.Партия = КоличествоСопоставлено.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.Партия КАК Партия
	|ИЗ
	|	ВтСопоставлено КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки КАК НомерСтрокиТовара,
	|	ЕСТЬNULL(КоличествоСопоставлено.КоличествоНоменклатура, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = &ПустаяНоменклатура
	|				И ЕСТЬNULL(СопоставленоПозиций.Номенклатура, &ПустаяНоменклатура) <> &ПустаяНоменклатура
	|			ТОГДА СопоставленоПозиций.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика = &ПустаяХарактеристика
	|				И ЕСТЬNULL(СопоставленоПозиций.Характеристика, &ПустаяХарактеристика) <> &ПустаяХарактеристика
	|			ТОГДА СопоставленоПозиций.Характеристика
	|		ИНАЧЕ Товары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Серия = &ПустаяСерия
	|				И ЕСТЬNULL(СопоставленоПозиций.КоличествоСерия, 0) = 1
	|			ТОГДА СопоставленоПозиций.Серия
	|		ИНАЧЕ Товары.Серия
	|	КОНЕЦ КАК Серия
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСопоставлено КАК СопоставленоПозиций
	|		ПО СопоставленоПозиций.Партия = Товары.Партия
	|			И (СопоставленоПозиций.КоличествоНоменклатура = 1)
	|			И (СопоставленоПозиций.КоличествоХарактеристика < 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО КоличествоСопоставлено.Партия = Товары.Партия
	|";
	 
	 Возврат ТекстЗапроса;
	 
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСлужебныеРеквизитыНоменклатуры(Форма, ТекущаяСтрока = Неопределено) Экспорт
	
	ТаблицаЗаполнения = Новый ТаблицаЗначений;
	
	ТаблицаЗаполнения.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаЗаполнения.Колонки.Добавить("Характеристика",   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаЗаполнения.Колонки.Добавить("Серия",            Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаЗаполнения.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаЗаполнения.Колонки.Добавить("ТипНоменклатуры",  Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	
	ТаблицаЗаполнения.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаполнения.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число"));
		
	Если ТекущаяСтрока = Неопределено Тогда
		
		СтрокаТаблицы = ТаблицаЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Форма.Объект);
		СтрокаТаблицы.НомерСтроки = 1;
		
	Иначе
		
		СтрокаТаблицы = ТаблицаЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущаяСтрока);
		СтрокаТаблицы.НомерСтроки = 1;
		
	КонецЕсли;
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТаблицаЗаполнения);
	Если ТекущаяСтрока = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтрокаТаблицы);
	Иначе
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

Функция ДанныеЗемельногоУчастка(ЗемельныйУчасток) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗемельныйУчасток,
		"Адрес, АдресСтрокой");
		
	Данные = Новый Структура;
	Данные.Вставить("ВладелецАдреса",           ЗемельныйУчасток);
	Данные.Вставить("Адрес",                    ЗначенияРеквизитов.Адрес);
	Данные.Вставить("ПредставлениеАдреса",      ЗначенияРеквизитов.АдресСтрокой);
	Данные.Вставить("КомментарийАдреса",        ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(Данные.Адрес));
	
	Возврат Данные;
	
КонецФункции

Функция ОператорыАдреса(Адрес) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Адрес);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОператорыАдреса.СкладКонтрагент КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ОператорыАдреса.СкладКонтрагент) КАК Представление
	|ИЗ
	|	Справочник.КлючиАдресовЗЕРНО.ОператорыАдреса КАК ОператорыАдреса
	|ГДЕ
	|	ОператорыАдреса.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ОператорыАдреса.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкаТипаОрганизацияКонтрагент

Процедура НастроитьТипОрганизацияКонтрагент(Форма, ТипДанных, ИмяЭлемента, ОбновлятьПодсказкуВвода = Истина) Экспорт
	
	ИсточникДанных = Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ИсточникДанных = Форма.Объект;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если ТипДанных = 0 Тогда
		ОписаниеТипа = Метаданные.ОпределяемыеТипы.Организация.Тип;
		Если ОбновлятьПодсказкуВвода Тогда
			ОбновитьПодсказкуВводаВладелецПартии(Форма, ИмяЭлемента);
		КонецЕсли;
	Иначе
		ОписаниеТипа = Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип;
		Если ОбновлятьПодсказкуВвода Тогда
			ОбновитьПодсказкуВводаВладелецПартии(Форма, ИмяЭлемента, Ложь);
		КонецЕсли;
	КонецЕсли;
	Элементы[ИмяЭлемента].ВыбиратьТип = Ложь;
	Элементы[ИмяЭлемента].ДоступныеТипы = ОписаниеТипа;
	
	ИсточникДанных[ИмяЭлемента] = ОписаниеТипа.ПривестиЗначение(ИсточникДанных[ИмяЭлемента]);
	
КонецПроцедуры

Процедура ОбновитьПодсказкуВводаВладелецПартии(Форма, ИмяЭлемента, ОтображатьПодсказку = Истина) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ОтображатьПодсказку Тогда
		Элементы[ИмяЭлемента].ПодсказкаВвода = Строка(Объект.Организация);
		Элементы[ИмяЭлемента].АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы[ИмяЭлемента].ПодсказкаВвода = "";
		Элементы[ИмяЭлемента].АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьТипОрганизацияКонтрагент(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат 0;
	Иначе
		ОписаниеТиповОрганизация = Метаданные.ОпределяемыеТипы.Организация.Тип;
		Если ОписаниеТиповОрганизация.СодержитТип(ТипЗнч(Значение)) Тогда
			Возврат 0;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НастройкаТипаОрганизацияКонтрагент

Функция ОпределитьТипСкладКонтрагент(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат 0;
	Иначе
		ОписаниеТиповСклад = Метаданные.ОпределяемыеТипы.Склад.Тип;
		Если ОписаниеТиповСклад.СодержитТип(ТипЗнч(Значение)) Тогда
			Возврат 0;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСКлассификаторами

Функция ДанныеЗагруженнойВерсииКлассификатора(ВидКлассификатора) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Версия",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ДатаОбновления", Неопределено);
	
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	
	ИдентификаторКлассификатора = Неопределено;
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		Если КлючИЗначение.Значение.ВидКлассификатора = ВидКлассификатора Тогда
			ИдентификаторКлассификатора = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторКлассификатора = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.Версия         = РаботаСКлассификаторами.ВерсияКлассификатора(ИдентификаторКлассификатора);
	ВозвращаемоеЗначение.ДатаОбновления = РаботаСКлассификаторами.ДатаОбновленияКлассификатора(ИдентификаторКлассификатора);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИдентификаторыКлассификаторов() Экспорт
	
	Идентификаторы = Новый Соответствие();
	Идентификаторы.Вставить(
		"ElevatorsZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Реестр элеваторов (ФГИС ""Зерно"")'"),
			Справочники.РеестрЭлеваторовЗЕРНО.ПустаяСсылка()));
	Идентификаторы.Вставить(
		"LotsPurposeZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Назначения партий (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПартии));
	Идентификаторы.Вставить(
		"QualityIndicatorZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Потребительские свойства (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство));
	Идентификаторы.Вставить(
		"ReasonWriteOffZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Причины списания (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаСписания));
	Идентификаторы.Вставить(
		"ProbeZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Виды отбора проб (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ВидОтбораПроб));
	Идентификаторы.Вставить(
		"TransportZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Виды транспортных средств (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ВидТранспортногоСредства));
	Идентификаторы.Вставить(
		"UnitOfMeasureZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Единицы измерения (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ЕдиницаИзмерения));
	Идентификаторы.Вставить(
		"WeightDiscrepancyCauseZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Причины расхождения веса (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаРасхожденияВеса));
	Идентификаторы.Вставить(
		"DocumentZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Виды документов (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ВидДокумента));
	Идентификаторы.Вставить(
		"IndicatorPurposeZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Назначения потребительских свойств (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПотребительскогоСвойства));
	Идентификаторы.Вставить(
		"LotDocumentZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Документы на партию (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ДокументНаПартию));
	Идентификаторы.Вставить(
		"LotReturnReasonZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Причины возврата партии (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаВозвратаПартии));
	Идентификаторы.Вставить(
		"PropertyRightTransferDocZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Документы права собственности (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ДокументПраваСобственности));
	Идентификаторы.Вставить(
		"ProcessingMethodZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Способы переработки (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.СпособПереработки));
	Идентификаторы.Вставить(
		"PropertyRightZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Сведения о собственности (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.СведенияОСобственности));
	Идентификаторы.Вставить(
		"LotsTargetZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Цели использования партии (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ЦельИспользованияПартии));
	Идентификаторы.Вставить(
		"OKPD2ZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'ОКПД2 (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2));
	Идентификаторы.Вставить(
		"TNVEDZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'ТН ВЭД (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ТНВЭД));
	Идентификаторы.Вставить(
		"QualityIndicatorLimitZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Допустимые значения потребительских свойств (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств));
	Идентификаторы.Вставить(
		"AgricultureZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Виды с/х культур (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры));
	Идентификаторы.Вставить(
		"ElevatorServiceZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Типы услуг элеватора (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ТипУслугиЭлеватора));
	Идентификаторы.Вставить(
		"StorageKindZERNO",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Типы хранения (ФГИС ""Зерно"")'"),
			Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения));
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ДокументыПоддерживающиеСтатусыСообщенийВТабличнойЧасти()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(Тип("ДокументСсылка.ФормированиеПартийЗЕРНО"), Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса);
	Результат.Вставить(Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО"), Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРасчетСтатуса);
	Результат.Вставить(Тип("ДокументСсылка.ПогашениеСДИЗЗЕРНО"), Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса);
	Результат.Вставить(Тип("ДокументСсылка.ПогашениеСДИЗЗЕРНО"), Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса);
	Результат.Вставить(Тип("ДокументСсылка.ПогашениеСДИЗЗЕРНО"), Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса);
	Результат.Вставить(Тип("ДокументСсылка.СписаниеПартийЗЕРНО"), Перечисления.ВидыОперацийЗЕРНО.СписаниеПартиийРасчетСтатуса);
	
	Возврат Результат;
	
КонецФункции

// Определяет назначение потребительского свойства по данным партии.
// Параметры:
//  НазначениеПартии - СправочникСсылка.КлассификаторНСИЗЕРНО - с видом классификатора НазначениеПартии.
//  Операция - Неопределено, ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция документа (для госмониторинга).
//  
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторНСИЗЕРНО - с видом классификатора НазначениеПотребительскогоСвойства.
Функция НазначениеПотребительскогоСвойстваДаннымПартии(НазначениеПартии, Операция = Неопределено) Экспорт
	
	Результат = Справочники.КлассификаторНСИЗЕРНО.НазначениеПотребительскогоСвойстваФормированиеПартии;
	
	Если НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВвозНаТерриториюРФ
		Или НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
		
		Результат = Справочники.КлассификаторНСИЗЕРНО.НазначениеПотребительскогоСвойстваВвозВывоз;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступнаЗагрузкаКлассификаторов() Экспорт
	
	РазделениеВключено                     = ОбщегоНазначения.РазделениеВключено();
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	ДоступнаЗагрузкаКлассификаторов = (Не РазделениеВключено
		Или РазделениеВключено И Не ДоступноИспользованиеРазделенныхДанных);
	
	Возврат ДоступнаЗагрузкаКлассификаторов;
	
КонецФункции

Функция ПроблемыКлассификаторовВПанелиОбмена(РасширенноеОписаниеТребуетсяЗагрузка = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДоступноОбновлениеОписание");
	ВозвращаемоеЗначение.Вставить("ДоступноОбновлениеТекстПодсказки");
	ВозвращаемоеЗначение.Вставить("ТребуетсяЗагрузкаОписание");
	ВозвращаемоеЗначение.Вставить("ТребуетсяЗагрузкаТекстПодсказки");
	ВозвращаемоеЗначение.Вставить(
		"ИнтерактивнаяЗагрузкаДоступна",
		РаботаСКлассификаторами.ИнтерактивнаяЗагрузкаКлассификаторовДоступна());
	
	РазделениеВключено             = ОбщегоНазначения.РазделениеВключено();
	ИдентификаторыКлассификаторов  = ИдентификаторыКлассификаторов();
	ИдентификаторыДляЗагрузки      = Новый Массив();
	ВидыКлассификаторовКОбновлению = Новый Массив();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		ИдентификаторыДляЗагрузки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ДанныеПодсказки = Новый Массив;
	
	Если РазделениеВключено Тогда
		
		ИдентификаторКлассификатора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.КлассификаторНСИЗЕРНО.ВидТранспортногоСредстваАвтомобиль,
			"Идентификатор");
		
		Если Не ЗначениеЗаполнено(ИдентификаторКлассификатора) Тогда
			ВозвращаемоеЗначение.ДоступноОбновлениеОписание = НСтр("ru = 'Отсутствуют классификаторы'");
			ДанныеПодсказки.Добавить(НСтр("ru = 'Требуется загрузить классификаторы ФГИС ""Зерно"". Обратитесь к администратору сервиса.'"));
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДоступныеОбновления = РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов(ИдентификаторыДляЗагрузки);
		
		ДоступныеКлассификаторыДляОбновления = Новый Массив();
		ДоступныеКлассификаторыДляЗагрузки   = Новый Массив();
		
		Если ЗначениеЗаполнено(ДоступныеОбновления.КодОшибки)
			И ДоступныеОбновления.КодОшибки <> "ОбновлениеНеТребуется" Тогда
			
			ВозвращаемоеЗначение.ДоступноОбновлениеОписание = НСтр("ru = 'Не удалось проверить актуальность классификаторов через Интернет-поддержку'");
			ДанныеПодсказки.Добавить(ДоступныеОбновления.СообщениеОбОшибке);
			
		Иначе
			
			Для Каждого СтрокаТаблицы Из ДоступныеОбновления.ДоступныеВерсии Цикл
				ТекущаяВерсия = РаботаСКлассификаторами.ВерсияКлассификатора(СтрокаТаблицы.Идентификатор);
				Если ЗначениеЗаполнено(ТекущаяВерсия) Тогда
					ДоступныеКлассификаторыДляОбновления.Добавить(СтрокаТаблицы.Наименование);
				Иначе
					ДоступныеКлассификаторыДляЗагрузки.Добавить(СтрокаТаблицы.Наименование);
				КонецЕсли;
				ВидыКлассификаторовКОбновлению.Добавить(ИдентификаторыКлассификаторов[СтрокаТаблицы.Идентификатор].ВидКлассификатора);
			КонецЦикла;
			
		КонецЕсли;
	
		Если ДоступныеКлассификаторыДляОбновления.Количество()
			Или ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
			
			ВозвращаемоеЗначение.ДоступноОбновлениеОписание = НСтр("ru = 'Доступны обновления классификаторов'");
			
			Если ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
				ДанныеПодсказки.Добавить(НСтр("ru = 'Требуется загрузить классификаторы:'"));
				ДанныеПодсказки.Добавить(" ");
				ДанныеПодсказки.Добавить(СтрСоединить(ДоступныеКлассификаторыДляЗагрузки, ", "));
			КонецЕсли;
			
			Если ДоступныеКлассификаторыДляОбновления.Количество() Тогда
				Если ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
					ДанныеПодсказки.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеПодсказки.Добавить(НСтр("ru = 'Требуется обновить классификаторы:'"));
				ДанныеПодсказки.Добавить(" ");
				ДанныеПодсказки.Добавить(СтрСоединить(ДоступныеКлассификаторыДляОбновления, ", "));
			КонецЕсли;
			
			Если Не ВозвращаемоеЗначение.ИнтерактивнаяЗагрузкаДоступна Тогда
				ДанныеПодсказки.Добавить(Символы.ПС);
				ДанныеПодсказки.Добавить(НСтр("ru='У Вас недостачно прав для выполнения данной операции, обратитесь к администратору.'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДоступноОбновлениеТекстПодсказки = Новый ФорматированнаяСтрока(ДанныеПодсказки);
	
	// Требуется загрузка
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлассификаторНСИЗЕРНО.ВидКлассификатора КАК ВидКлассификатора,
		|	КлассификаторНСИЗЕРНО.Идентификатор     КАК Идентификатор
		|ИЗ
		|	Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
		|ГДЕ
		|	КлассификаторНСИЗЕРНО.ТребуетсяЗагрузка
		|	И КлассификаторНСИЗЕРНО.Идентификатор <> """"
		|	И КлассификаторНСИЗЕРНО.ВидКлассификатора <> ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ПустаяСсылка)
		|	И НЕ КлассификаторНСИЗЕРНО.ВидКлассификатора В (&ВидыКлассификаторовКОбновлению)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.РеестрЭлеваторовЗЕРНО.ПустаяСсылка) КАК ВидКлассификатора,
		|	РеестрЭлеваторовЗЕРНО.Идентификатор                     КАК Идентификатор
		|ИЗ
		|	Справочник.РеестрЭлеваторовЗЕРНО КАК РеестрЭлеваторовЗЕРНО
		|ГДЕ
		|	РеестрЭлеваторовЗЕРНО.ТребуетсяЗагрузка
		|	И РеестрЭлеваторовЗЕРНО.Идентификатор <> """"
		|	И НЕ ЗНАЧЕНИЕ(Справочник.РеестрЭлеваторовЗЕРНО.ПустаяСсылка) В (&ВидыКлассификаторовКОбновлению)
		|ИТОГИ
		|	КОЛИЧЕСТВО(Идентификатор) КАК Идентификатор
		|ПО
		|	ВидКлассификатора";
	
	Запрос.УстановитьПараметр("ВидыКлассификаторовКОбновлению", ВидыКлассификаторовКОбновлению);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидКлассификатора = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КоличествоЭлементовТребуетсяЗагрузка = 0;
	
	ДанныеПодсказки = Новый Массив();
	
	ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧасти("Идентификатор");
	
	Пока ВыборкаВидКлассификатора.Следующий() Цикл
		
		ВыборкаПоИдентификатору = ВыборкаВидКлассификатора.Выбрать();
		
		ДанныеПоВидуКлассификатора = Новый ТаблицаЗначений();
		ДанныеПоВидуКлассификатора.Колонки.Добавить("Идентификатор");
		Пока ВыборкаПоИдентификатору.Следующий() Цикл
			НоваяСтрока = ДанныеПоВидуКлассификатора.Добавить();
			НоваяСтрока.Идентификатор = ВыборкаПоИдентификатору.Идентификатор;
		КонецЦикла;
		
		Если РасширенноеОписаниеТребуетсяЗагрузка Тогда
			
			Если ДанныеПодсказки.Количество() Тогда
				ДанныеПодсказки.Добавить(Символы.ПС);
			КонецЕсли;
			
			Если ТипЗнч(ВыборкаВидКлассификатора.ВидКлассификатора) = Тип("СправочникСсылка.РеестрЭлеваторовЗЕРНО") Тогда
				ДанныеПодсказки.Добавить(
					СтрШаблон(
						НСтр("ru = 'Требуется загрузка из реестра элеваторов ФГИС ""Зерно"" (%1 шт.): %2'"),
						ДанныеПоВидуКлассификатора.Количество(),
						СтрСоединить(ДанныеПоВидуКлассификатора.ВыгрузитьКолонку("Идентификатор"), ", ")));
			Иначе
				ДанныеПодсказки.Добавить(
					СтрШаблон(
						НСтр("ru = 'Требуется загрузка %1 (%2 шт.): %3'"),
						ВыборкаВидКлассификатора.ВидКлассификатора,
						ДанныеПоВидуКлассификатора.Количество(),
						СтрСоединить(ДанныеПоВидуКлассификатора.ВыгрузитьКолонку("Идентификатор"), ", ")));
			КонецЕсли;
			
		Иначе
			
			Если ДанныеПодсказки.Количество() Тогда
				ДанныеПодсказки.Добавить(", ");
			КонецЕсли;
			
			ПредставлениеКлассификатора = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				ДанныеПоВидуКлассификатора,
				ПараметрыФормированияНадписи);
			
			Если ТипЗнч(ВыборкаВидКлассификатора.ВидКлассификатора) = Тип("СправочникСсылка.РеестрЭлеваторовЗЕРНО") Тогда
				ДанныеПодсказки.Добавить(
					СтрШаблон(
						"%1: %2",
						Метаданные.Справочники.РеестрЭлеваторовЗЕРНО.Синоним,
						ПредставлениеКлассификатора));
			Иначе
				ДанныеПодсказки.Добавить(
					СтрШаблон(
						"%1: %2",
						Строка(ВыборкаВидКлассификатора.ВидКлассификатора),
						ПредставлениеКлассификатора));
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоЭлементовТребуетсяЗагрузка = КоличествоЭлементовТребуетсяЗагрузка + ДанныеПоВидуКлассификатора.Количество();
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоличествоЭлементовТребуетсяЗагрузка) Тогда
		ВозвращаемоеЗначение.ТребуетсяЗагрузкаОписание = СтрШаблон(
			НСтр("ru = 'Требуется загрузка поставляемых данных классификаторов (%1 шт.)'"),
			КоличествоЭлементовТребуетсяЗагрузка);
		ДанныеПодсказки.Добавить(Символы.ПС);
			ДанныеПодсказки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Информация'"),,,, "ПросмотрОписанияОкружения"));
			ДанныеПодсказки.Добавить(" ");
			ДанныеПодсказки.Добавить(НСтр("ru = 'для службы поддержки'"));
		ВозвращаемоеЗначение.ТребуетсяЗагрузкаТекстПодсказки = Новый ФорматированнаяСтрока(ДанныеПодсказки);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДоступныОбновленияКлассификаторов()
	
	ВозвращаемоеЗначение = Новый Массив();
	
	Если Не ДоступнаЗагрузкаКлассификаторов() Тогда
		
		ИдентификаторыКлассификаторов  = ИдентификаторыКлассификаторов();
		ИдентификаторыДляПроверки      = Новый Массив();
		Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
			ИдентификаторыДляПроверки.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		ДоступныеОбновления = РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов(ИдентификаторыДляПроверки);
	
		Если Не (ЗначениеЗаполнено(ДоступныеОбновления.КодОшибки)
			И ДоступныеОбновления.КодОшибки <> "ОбновлениеНеТребуется") Тогда
			
			Для Каждого СтрокаТаблицы Из ДоступныеОбновления.ДоступныеВерсии Цикл
				ВозвращаемоеЗначение.Добавить(ИдентификаторыКлассификаторов[СтрокаТаблицы.Идентификатор].ВидКлассификатора);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// см. РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОпределенииИдентификаторовКлассификаторов
Процедура ПриОпределенииИдентификаторовКлассификаторовВМоделиСервиса(Идентификаторы) Экспорт
	
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		
		Идентификаторы.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КлючиПартии

Процедура ПартияЗЕРНОПриЗаписиПриЗаписиОбработчик(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Источник.ОКПД2);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторНСИЗЕРНО.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|ГДЕ
	|	КлассификаторНСИЗЕРНО.Идентификатор = &Идентификатор
	|	И КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Набор = РегистрыСведений.КлючиПартийЗЕРНО.СоздатьНаборЗаписей();
	Набор.Отбор.Партия.Установить(Источник.Ссылка);
	Запись = Набор.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Источник);
	Запись.ВидПродукции = Выборка.ВидПродукции;
	Запись.Партия = Источник.Ссылка;
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеМестоположений

Функция НеСопоставленныеКлючиАдресов(Отбор) Экспорт
	
	Запрос = Новый Запрос;
	
	УсловияОтбора = Новый Массив; 
	
	Если Отбор.Свойство("Организация") Тогда
		ЗначенияОтбора = МассивЗначенийОтбора(Отбор.Организация);
		Если ЗначенияОтбора.Количество() > 0 Тогда
			ЗначенияОтбора = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ЗначенияОтбора);
		КонецЕсли;
	ИначеЕсли Отбор.Свойство("ВладелецПартии") Тогда
		ЗначенияОтбора = МассивЗначенийОтбора(Отбор.ВладелецПартии);
	Иначе
		ЗначенияОтбора = Новый Массив;
	КонецЕсли;
	
	Если ЗначенияОтбора.Количество() > 0 Тогда
		УсловияОтбора.Добавить("Партия.ВладелецПартии В (&ВладелецПартии)");
		Запрос.УстановитьПараметр("ВладелецПартии", ЗначенияОтбора);
	КонецЕсли;
	
	Если Отбор.Свойство("Элеватор") Тогда
		ЗначенияОтбора = МассивЗначенийОтбора(Отбор.Элеватор);
	Иначе
		ЗначенияОтбора = Новый Массив;
	КонецЕсли;
	
	Если ЗначенияОтбора.Количество() > 0 Тогда
		УсловияОтбора.Добавить("Партия.Элеватор В (&Элеватор)");
		Запрос.УстановитьПараметр("Элеватор", ЗначенияОтбора);
	КонецЕсли;
	
	Если Отбор.Свойство("Местоположение") Тогда
		ЗначенияОтбора = МассивЗначенийОтбора(Отбор.Местоположение);
	Иначе
		ЗначенияОтбора = Новый Массив;
	КонецЕсли;
	
	Если ЗначенияОтбора.Количество() > 0 Тогда
		УсловияОтбора.Добавить("Партия.Местоположение В (&Местоположение)");
		Запрос.УстановитьПараметр("Местоположение", ЗначенияОтбора);
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	КлючиАдресов.Ссылка КАК Ссылка
	|ИЗ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, %1) КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАдресовЗЕРНО КАК КлючиАдресов
	|	 ПО Остатки.Партия.Местоположение = КлючиАдресов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАдресовЗЕРНО.ОператорыАдреса КАК КлючиАдресовОператорыАдреса
	|	 ПО КлючиАдресов.Ссылка = КлючиАдресовОператорыАдреса.Ссылка
	|ГДЕ
	|	КлючиАдресовОператорыАдреса.Ссылка ЕСТЬ NULL",
	СтрСоединить(УсловияОтбора, " И "));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


Функция МассивЗначенийОтбора(ЗначениеОтбора)
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		Возврат ЗначениеОтбора;
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		Возврат ЗначениеОтбора.ВыгрузитьЗначения();
	ИначеЕсли ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Результат = Новый Массив;
		Результат.Добавить(ЗначениеОтбора);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

#КонецОбласти

#КонецОбласти
