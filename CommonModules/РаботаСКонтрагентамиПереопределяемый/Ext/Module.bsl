///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроверкаКонтрагентовВДокументах

// Формирование описания расположения счета-фактуры в документе.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа-основания, для которого необходимо получить описание счета-фактуры.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание счета-фактуры.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание) Экспорт
	
		
КонецПроцедуры

// Формирование описания расположения контрагента, находящегося в шапке документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание расположения контрагента.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПартнерыИКонтрагенты.ЕстьРеквизитФормы(Форма,"ИспользоватьПартнеровКакКонтрагентов") Тогда
		ИспользоватьПартнеровКакКонтрагентов = Ложь;
	Иначе
		ИспользоватьПартнеровКакКонтрагентов = Форма.ИспользоватьПартнеровКакКонтрагентов;
	КонецЕсли;
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных по контрагенту в шапке.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		Если Форма.ИмяФормы = "Документ.ВводОстатков.Форма.ФормаРасчетыСПартнерами" 
			Или Форма.ИмяФормы = "Документ.ВводОстатковВзаиморасчетов.Форма.ФормаРасчетыСПартнерами" Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметровОформляемогоЭлемента = ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.СтруктураПараметровОформляемогоЭлемента();
		
		СтруктураПараметровОформляемогоЭлемента.ВидОтображения               = "УправлениеСтраницами";
		
		СтруктураПараметровОформляемогоЭлемента.СтраницаЕстьПроблема         = ?(ИспользоватьПартнеровКакКонтрагентов,
		                                                                       Форма.Элементы.СтраницаЕстьПроблемаПартнер,
		                                                                       Форма.Элементы.СтраницаЕстьПроблемаКонтрагент);
		СтруктураПараметровОформляемогоЭлемента.СтраницаНетПроблемы          = ?(ИспользоватьПартнеровКакКонтрагентов,
		                                                                       Форма.Элементы.СтраницаНетПроблемыПартнер,
		                                                                       Форма.Элементы.СтраницаНетПроблемыКонтрагент);
		СтруктураПараметровОформляемогоЭлемента.ГруппаСтраниц                = ?(ИспользоватьПартнеровКакКонтрагентов,
		                                                                       Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаПартнер,
		                                                                       Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагент);
		СтруктураПараметровОформляемогоЭлемента.ЭлементФормыПодсказка        = ?(ИспользоватьПартнеровКакКонтрагентов,
		                                                                       Форма.Элементы.ПроблемаПроверкаКонтрагентаПартнер,
		                                                                       Форма.Элементы.ПроблемаПроверкаКонтрагента);
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗаписьКнигиПокупок")
		  И ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ЗаписьКнигиПродаж")
		  И ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
		  И ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		  И ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		  И ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		  И ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
			СтруктураПараметровОформляемогоЭлемента.ОтключатьВидимостьБезусловно = ?(ИспользоватьПартнеровКакКонтрагентов,
			                                                                       Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагент,
			                                                                       Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаПартнер);
		КонецЕсли;
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка, 
			СтруктураПараметровОформляемогоЭлемента, 
			ДокументОбъект.Контрагент);
			
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Формирование описания  расположения контрагентов, находящихся в табличной части документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
//				Структура колонок указана в функции ШаблонТаблицыОписанияТабличныхЧастей модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеДокументовСТабличнымиЧастями(Форма, Описание) Экспорт
	
	//++ НЕ ГОСИС
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		ТипыВводаОстатков = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
			Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "Товары", "ТоварыПокупатель", "ТоварыДатаСчетаФактурыКомиссионера");
				
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "Покупатели", "ПокупателиПокупатель", "");
				
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураКомитента") Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "Покупатели", "ПокупателиСубкомиссионер", "")
			
		ИначеЕсли ТипыВводаОстатков.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "ЗадолженностьКлиентов", "ЗадолженностьКлиентовКонтрагент", "");
				
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписаниеТабличныхЧастей(
				Форма, Описание, "ОплатаПоставщикам", "ОплатаПоставщикамКонтрагент", "");
			
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Формирование описания расположения контрагентов в счете-фактуре.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма счета-фактуры, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
//@skip-warning
Процедура СформироватьОписаниеСчетовФактур(Форма, Описание) Экспорт
	
	//++ НЕ ГОСИС
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	ТипДокумента	= ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
		Или ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
		Или ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный")
		Или ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
		Или ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
		Или ТипДокумента = Тип("ДокументСсылка.ЗаписьКнигиПокупок") Тогда
		
		СтруктураПараметровОформляемогоЭлемента = ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.СтруктураПараметровОформляемогоЭлемента();
		
		// Контрагент
		СтруктураПараметровОформляемогоЭлемента.ВидОтображения               = "УправлениеСтраницами";
		СтруктураПараметровОформляемогоЭлемента.СтраницаЕстьПроблема         =  Форма.Элементы.СтраницаЕстьПроблемаКонтрагент;
		СтруктураПараметровОформляемогоЭлемента.СтраницаНетПроблемы          =  Форма.Элементы.СтраницаНетПроблемыКонтрагент;
		СтруктураПараметровОформляемогоЭлемента.ГруппаСтраниц                =  Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагент;
		СтруктураПараметровОформляемогоЭлемента.ЭлементФормыПодсказка        =  Форма.Элементы.ПроблемаПроверкаКонтрагента;
		СтруктураПараметровОформляемогоЭлемента.Имя                          =  "Контрагент";
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка,
			СтруктураПараметровОформляемогоЭлемента,
			ДокументОбъект.Контрагент);
			
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураКомитента") Тогда
		
		СтруктураПараметровОформляемогоЭлемента = ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.СтруктураПараметровОформляемогоЭлемента();
		
		// Комитент
		СтруктураПараметровОформляемогоЭлемента.ВидОтображения               = "УправлениеСтраницами";
		СтруктураПараметровОформляемогоЭлемента.СтраницаЕстьПроблема         =  Форма.Элементы.СтраницаЕстьПроблемаКонтрагент;
		СтруктураПараметровОформляемогоЭлемента.СтраницаНетПроблемы          =  Форма.Элементы.СтраницаНетПроблемыКонтрагент;
		СтруктураПараметровОформляемогоЭлемента.ГруппаСтраниц                =  Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагент;
		СтруктураПараметровОформляемогоЭлемента.ЭлементФормыПодсказка        =  Форма.Элементы.ПроблемаПроверкаКонтрагента;
		СтруктураПараметровОформляемогоЭлемента.Имя                          =  "Комитент";
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка,
			СтруктураПараметровОформляемогоЭлемента,
			ДокументОбъект.Комитент);
			
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
	
		СтруктураПараметровОформляемогоЭлемента = ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.СтруктураПараметровОформляемогоЭлемента();
			
		// Покупатель
		СтруктураПараметровОформляемогоЭлемента.ВидОтображения               = "УправлениеСтраницами";
		СтруктураПараметровОформляемогоЭлемента.СтраницаЕстьПроблема         =  Форма.Элементы.СтраницаЕстьПроблемаПокупатель;
		СтруктураПараметровОформляемогоЭлемента.СтраницаНетПроблемы          =  Форма.Элементы.СтраницаНетПроблемыПокупатель;
		СтруктураПараметровОформляемогоЭлемента.ГруппаСтраниц                =  Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаПокупатель;
		СтруктураПараметровОформляемогоЭлемента.ЭлементФормыПодсказка        =  Форма.Элементы.ПроблемаПроверкаПокупатель;
		СтруктураПараметровОформляемогоЭлемента.Имя                          =  "Покупатель";
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание,  
			ДокументСсылка,
			СтруктураПараметровОформляемогоЭлемента,
			?(ТипДокумента = Тип("ДокументСсылка.СчетФактураНалоговыйАгент"), ДокументОбъект.Поставщик, ДокументОбъект.Покупатель));
		
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		СтруктураПараметровОформляемогоЭлемента = ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.СтруктураПараметровОформляемогоЭлемента();
		
		// КонтрагентДебитор
		СтруктураПараметровОформляемогоЭлемента.ВидОтображения               = "УправлениеСтраницами";
		СтруктураПараметровОформляемогоЭлемента.СтраницаЕстьПроблема         =  Форма.Элементы.СтраницаЕстьПроблемаКонтрагентДебитор;
		СтруктураПараметровОформляемогоЭлемента.СтраницаНетПроблемы          =  Форма.Элементы.СтраницаНетПроблемыКонтрагентДебитор;
		СтруктураПараметровОформляемогоЭлемента.ГруппаСтраниц                =  Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагентДебитор;
		СтруктураПараметровОформляемогоЭлемента.ЭлементФормыПодсказка        =  Форма.Элементы.ПроблемаПроверкаКонтрагентаДебитор;
		СтруктураПараметровОформляемогоЭлемента.Имя                          =  "КонтрагентДебитор";
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка,
			СтруктураПараметровОформляемогоЭлемента,
			ДокументОбъект.КонтрагентДебитор);
			
		СтруктураПараметровОформляемогоЭлемента = ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.СтруктураПараметровОформляемогоЭлемента();
		
		// КонтрагентКредитор
		СтруктураПараметровОформляемогоЭлемента.ВидОтображения               = "УправлениеСтраницами";
		СтруктураПараметровОформляемогоЭлемента.СтраницаЕстьПроблема         =  Форма.Элементы.СтраницаЕстьПроблемаКонтрагентКредитор;
		СтруктураПараметровОформляемогоЭлемента.СтраницаНетПроблемы          =  Форма.Элементы.СтраницаНетПроблемыКонтрагентКредитор;
		СтруктураПараметровОформляемогоЭлемента.ГруппаСтраниц                =  Форма.Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагентКредитор;
		СтруктураПараметровОформляемогоЭлемента.ЭлементФормыПодсказка        =  Форма.Элементы.ПроблемаПроверкаКонтрагентаКредитор;
		СтруктураПараметровОформляемогоЭлемента.Имя                          =  "КонтрагентКредитор";
		
		ПроверкаКонтрагентов.ДополнитьОписание(
			Описание, 
			ДокументСсылка,
			СтруктураПараметровОформляемогоЭлемента,
			ДокументОбъект.КонтрагентКредитор);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Возвращает массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
// Параметры:
//  Тип	 			- Тип - Тип счета-фактуры, для которой необходимо получить описание.
//  ИменаРеквизитов	- Массив из Строка - массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
//@skip-warning
Процедура ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитов) Экспорт
	
	//++ НЕ ГОСИС
	Если Тип = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ИменаРеквизитов.Добавить("Контрагент");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
		
		ИменаРеквизитов.Добавить("Контрагент");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.СчетФактураКомитента") Тогда
		
		ИменаРеквизитов.Добавить("Комитент");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		
		ИменаРеквизитов.Добавить("Поставщик");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ИменаРеквизитов.Добавить("Контрагент");
	
	ИначеЕсли Тип = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
		
		ИменаРеквизитов.Добавить("Контрагент");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.ЗаписьКнигиПокупок") Тогда
		
		ИменаРеквизитов.Добавить("Контрагент");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.СчетФактураПолученныйАванс") Тогда
		
		ИменаРеквизитов.Добавить("Контрагент");
		
	ИначеЕсли Тип = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		ИменаРеквизитов.Добавить("КонтрагентДебитор");
		ИменаРеквизитов.Добавить("КонтрагентКредитор"); 
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получение даты документа, в котором используется проверка контрагентов.
// 		Проверка контрагентов будет выполняться по состоянию на эту дату. 
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - Документ, в котором используется проверка контрагентов.
//  Дата			 - Дата - Результат получения даты документа.
//
//@skip-warning
Процедура ОпределитьДатуВДокументе(ДокументОбъект, Дата) Экспорт
	
	//++ НЕ ГОСИС
	Дата = НачалоДня(ДокументОбъект.Дата);
	Если Дата = Дата(1,1,1) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определение даты в счете-фактуре.
//
// Параметры:
//  СчетФактураОбъект	 - ДанныеФормыСтруктура, ДокументОбъект - Счет-фактура, чью дату необходимо получить.
//  Дата				 - Дата - Результат, дата счета-фактуры.
//
//@skip-warning
Процедура ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата) Экспорт
	
	//++ НЕ ГОСИС
	ДокументСсылка = СчетФактураОбъект.Ссылка;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураПолученный")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураКомитента")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураПолученныйАванс") Тогда
		
		Дата = ?(ЗначениеЗаполнено(СчетФактураОбъект.Исправление), НачалоДня(СчетФактураОбъект.ДатаИсправления), НачалоДня(СчетФактураОбъект.ДатаСоставления));
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаписьКнигиПокупок")Тогда
		
		Дата = НачалоДня(СчетФактураОбъект.Дата);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Возможность переопределить стандартное заполнение данных о контрагентах в счет-фактурах, созданных на основании документа.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДокументОбъект       - Произвольный - данные содержащие информацию о счет-фактурах.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СтандартнаяОбработка, ДокументОбъект, ДанныеКонтрагентов, Форма) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(ДокументОбъект) = Тип("ТаблицаЗначений") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для Каждого СтрокаТаблицы Из ДокументОбъект Цикл
		
			ПроверкаКонтрагентов.ДополнитьДанныеКонтрагентовВДокументе(
			                                          СтрокаТаблицы.Ссылка,
			                                          ДанныеКонтрагентов,
			                                          СтрокаТаблицы.Контрагент,
			                                          СтрокаТаблицы.Дата);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура")
		И ДокументОбъект.Свойство("Ссылка")   Тогда
		 
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
			Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
			Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаписьКнигиПокупок") Тогда
		
			Если ЗначениеЗаполнено(ДокументОбъект.КППКонтрагента)
				ИЛИ ЗначениеЗаполнено(ДокументОбъект.ИННКонтрагента) Тогда
			
				СтандартнаяОбработка = Ложь;
				
				СтрокаОписания = ДанныеКонтрагентов.Добавить();
				СтрокаОписания.Ссылка     = ДокументОбъект.Ссылка;
				СтрокаОписания.Контрагент = ДокументОбъект.Контрагент;
				СтрокаОписания.Дата       = ДокументОбъект.Дата;
				СтрокаОписания.Состояние  = Неопределено;
				
				Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
					РеквизитыКонтрагента = Справочники.Организации.ПолучитьРеквизитыОрганизации(ДокументОбъект.Контрагент);
				Иначе
					РеквизитыКонтрагента = ПартнерыИКонтрагенты.РеквизитыКонтрагента(ДокументОбъект.Контрагент, ДокументОбъект.Дата);
				КонецЕсли;
				
				СтрокаОписания.ЭтоИностранныйКонтрагент = РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
				                                          Или РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
				СтрокаОписания.ЭтоЮридическоеЛицо       = РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				
				Если ЗначениеЗаполнено(ДокументОбъект.ИННКонтрагента) Тогда
					СтрокаОписания.ИНН = ДокументОбъект.ИННКонтрагента;
				Иначе
					СтрокаОписания.ИНН = РеквизитыКонтрагента.ИНН;
				КонецЕсли;
				
				Если РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
					
					Если ЗначениеЗаполнено(ДокументОбъект.КППКонтрагента) Тогда
						СтрокаОписания.КПП = ДокументОбъект.КППКонтрагента;
					Иначе
						СтрокаОписания.КПП = РеквизитыКонтрагента.КПП;
					КонецЕсли;
					
				Иначе
					
					СтрокаОписания.КПП = "";
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураКомиссионеру") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Для Каждого СтрокаПокупатель Из ДокументОбъект.Покупатели Цикл
				
				Если ЗначениеЗаполнено(СтрокаПокупатель.Покупатель) И 
					ТипЗнч(СтрокаПокупатель.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				
					СтрокаОписания = ДанныеКонтрагентов.Добавить();
					СтрокаОписания.Ссылка     = ДокументОбъект.Ссылка;
					СтрокаОписания.Контрагент = СтрокаПокупатель.Покупатель;
					СтрокаОписания.Дата       = ДокументОбъект.Дата;
					СтрокаОписания.Состояние  = Неопределено;
					
					Если ТипЗнч(СтрокаПокупатель.Покупатель) = Тип("СправочникСсылка.Организации") Тогда
						РеквизитыКонтрагента = Справочники.Организации.ПолучитьРеквизитыОрганизации(СтрокаПокупатель.Покупатель);
					Иначе
						РеквизитыКонтрагента = ПартнерыИКонтрагенты.РеквизитыКонтрагента(СтрокаПокупатель.Покупатель, ДокументОбъект.Дата);
					КонецЕсли;
					
					СтрокаОписания.ЭтоИностранныйКонтрагент = РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
					                                          Или РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
					СтрокаОписания.ЭтоЮридическоеЛицо       = (РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
					
					Если ЗначениеЗаполнено(СтрокаПокупатель.ИННПокупателя) Тогда
						СтрокаОписания.ИНН = СтрокаПокупатель.ИННПокупателя;
					Иначе
						СтрокаОписания.ИНН = РеквизитыКонтрагента.ИНН;
					КонецЕсли;
					
					Если РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
						
						Если ЗначениеЗаполнено(СтрокаПокупатель.КПППокупателя) Тогда
							СтрокаОписания.КПП = СтрокаПокупатель.КПППокупателя;
						Иначе
							СтрокаОписания.КПП = РеквизитыКонтрагента.КПП;
						КонецЕсли;
						
					Иначе
						
						СтрокаОписания.КПП = "";
						
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураКомитента") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДатаСведений = ?(ДокументОбъект.Исправление, ДокументОбъект.ДатаИсправления, ДокументОбъект.ДатаСоставления);
			
			СтрокаОписания = ДанныеКонтрагентов.Добавить();
			СтрокаОписания.Ссылка     = ДокументОбъект.Ссылка;
			СтрокаОписания.Контрагент = ДокументОбъект.Комитент;
			СтрокаОписания.Дата       = ДатаСведений;
			СтрокаОписания.Состояние  = Неопределено;
			
			Если ТипЗнч(ДокументОбъект.Комитент) = Тип("СправочникСсылка.Организации") Тогда
				РеквизитыКонтрагента = Справочники.Организации.ПолучитьРеквизитыОрганизации(ДокументОбъект.Комитент);
			Иначе
				РеквизитыКонтрагента = ПартнерыИКонтрагенты.РеквизитыКонтрагента(ДокументОбъект.Комитент, ДатаСведений);
			КонецЕсли;
			
			СтрокаОписания.ЭтоИностранныйКонтрагент = РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
			                                          Или РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			СтрокаОписания.ЭтоЮридическоеЛицо       = (РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ИННКомитента) Тогда
				СтрокаОписания.ИНН        = ДокументОбъект.ИННКомитента;
			Иначе
				СтрокаОписания.ИНН        = РеквизитыКонтрагента.ИНН;
			КонецЕсли;
			
			Если РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				
				Если ЗначениеЗаполнено(ДокументОбъект.КППКомитента) Тогда
					СтрокаОписания.КПП        = ДокументОбъект.КППКомитента;
				Иначе
					СтрокаОписания.КПП        = РеквизитыКонтрагента.КПП;
				КонецЕсли;
				
			Иначе
				
				СтрокаОписания.КПП = "";
				
			КонецЕсли;
			
			Для Каждого СтрокаПокупатель Из ДокументОбъект.Покупатели Цикл
				
				Если ЗначениеЗаполнено(СтрокаПокупатель.Покупатель) И 
					ТипЗнч(СтрокаПокупатель.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				
					СтрокаОписания = ДанныеКонтрагентов.Добавить();
					СтрокаОписания.Ссылка     = ДокументОбъект.Ссылка;
					СтрокаОписания.Контрагент = СтрокаПокупатель.Субкомиссионер;
					СтрокаОписания.Дата       = ДатаСведений;
					СтрокаОписания.Состояние  = Неопределено;
					
					Если ТипЗнч(СтрокаПокупатель.Субкомиссионер) = Тип("СправочникСсылка.Организации") Тогда
						РеквизитыКонтрагента = Справочники.Организации.ПолучитьРеквизитыОрганизации(СтрокаПокупатель.Субкомиссионер);
					Иначе
						РеквизитыКонтрагента = ПартнерыИКонтрагенты.РеквизитыКонтрагента(СтрокаПокупатель.Субкомиссионер, ДатаСведений);
					КонецЕсли;
					
					СтрокаОписания.ЭтоИностранныйКонтрагент = РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
					                                          Или РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
					СтрокаОписания.ЭтоЮридическоеЛицо       = (РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
					
					Если ЗначениеЗаполнено(СтрокаПокупатель.ИННСубкомиссионера) Тогда
						СтрокаОписания.ИНН = СтрокаПокупатель.ИННСубкомиссионера;
					Иначе
						СтрокаОписания.ИНН = РеквизитыКонтрагента.ИНН;
					КонецЕсли;
					
					Если РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
						
						Если ЗначениеЗаполнено(СтрокаПокупатель.КППСубкомиссионера) Тогда
							СтрокаОписания.КПП = СтрокаПокупатель.КППСубкомиссионера;
						Иначе
							СтрокаОписания.КПП = РеквизитыКонтрагента.КПП;
						КонецЕсли;
						
					Иначе
						
						СтрокаОписания.КПП = "";
						
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
			Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
			Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДатаСведений = ?(ДокументОбъект.Исправление, ДокументОбъект.ДатаИсправления, ДокументОбъект.ДатаСоставления);
			
			СтрокаОписания = ДанныеКонтрагентов.Добавить();
			СтрокаОписания.Ссылка     = ДокументОбъект.Ссылка;
			СтрокаОписания.Контрагент = ДокументОбъект.Контрагент;
			СтрокаОписания.Дата       = ДатаСведений;
			СтрокаОписания.Состояние  = Неопределено;
			
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				РеквизитыКонтрагента = Справочники.Организации.ПолучитьРеквизитыОрганизации(ДокументОбъект.Контрагент);
			Иначе
				РеквизитыКонтрагента = ПартнерыИКонтрагенты.РеквизитыКонтрагента(ДокументОбъект.Контрагент, ДатаСведений);
			КонецЕсли;
			
			СтрокаОписания.ЭтоИностранныйКонтрагент = РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
			                                          Или РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			СтрокаОписания.ЭтоЮридическоеЛицо       = (РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ИННКонтрагента) Тогда
				СтрокаОписания.ИНН = ДокументОбъект.ИННКонтрагента;
			Иначе
				СтрокаОписания.ИНН = РеквизитыКонтрагента.ИНН;
			КонецЕсли;
			
			Если РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				
				Если ЗначениеЗаполнено(ДокументОбъект.КППКонтрагента) Тогда
					СтрокаОписания.КПП = ДокументОбъект.КППКонтрагента;
				Иначе
					СтрокаОписания.КПП = РеквизитыКонтрагента.КПП;
				КонецЕсли;
				
			Иначе
				
				СтрокаОписания.КПП = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Возможность переопределить стандартное сохранение результатов проверки контрагентов счет-фактур, выписанных на основании
//             документа основания в форме документа основания. 
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  ДанныеКонтрагентов   - ТаблицаЗначений - подготавливаемая таблица с данными о контрагентах.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура ЗапомнитьРезультатПроверкиКонтрагентовСчетФактурыВДокументе(СтандартнаяОбработка, ДанныеКонтрагентов, Форма) Экспорт
	
	
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов при создании в форме документа.
//
// Параметры:
//   Форма          - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//   НовыеРеквизиты - Структура - сформированная структура дополнительных реквизитов документа, которая может быть дополнена.
//
//@skip-warning
Процедура ДополнитьРеквизитыФормыДокумент(Форма, НовыеРеквизиты) Экспорт
	
	//++ НЕ ГОСИС
	НовыеРеквизиты.Вставить("СписокСчетФактур", Неопределено);
	НовыеРеквизиты.Вставить("СчетаФактурыНесколькихТипов", Ложь);
	НовыеРеквизиты.Вставить("СписокТиповСчетовФактур", Новый СписокЗначений);
	
	ТипСсылки = ТипЗнч(Форма.Объект.Ссылка);
	ПустоСостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка();
	
	Если ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионера")
		Или ТипСсылки = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		НовыеРеквизиты.СчетаФактурыНесколькихТипов = Истина;
		НовыеРеквизиты.СписокТиповСчетовФактур.Добавить(ПустоСостояниеПроверки, "СчетФактураКомиссионеру");
		НовыеРеквизиты.СписокТиповСчетовФактур.Добавить(ПустоСостояниеПроверки, "СчетФактураПолученный");
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
		Или ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		НовыеРеквизиты.СчетаФактурыНесколькихТипов = Истина;
		НовыеРеквизиты.СписокТиповСчетовФактур.Добавить(ПустоСостояниеПроверки, "СчетФактураВыданный");
		НовыеРеквизиты.СписокТиповСчетовФактур.Добавить(ПустоСостояниеПроверки, "СчетФактураПолученный");
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Возможность переопределить сохраняемые результаты проверки контрагентов в документе.
//
// Параметры:
//  СтандартнаяОбработка - Булево - необходимо установить в Ложь, если стандартная обработка переопределяется.
//  СохраняемоеЗначение  - Соответствие - сохраняемые данные.
//  Форма                - ФормаКлиентскогоПриложения, Неопределено - Форма из которой выполняется вызов.
//
//@skip-warning
Процедура СохраняемыеРезультатыПроверкиСчетФактурыВДокументе(СтандартнаяОбработка, СохраняемоеЗначение, Форма) Экспорт
	
	//++ НЕ ГОСИС

	СписокСчетФактур = Форма.РеквизитыПроверкиКонтрагентов.СписокСчетФактур;
	
	Если СписокСчетФактур = Неопределено Тогда
		Возврат;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
	Для Каждого ЭлементСпискаСчетФактур Из СписокСчетФактур Цикл
		
		СохраненноеЗначение = СохраняемоеЗначение.Получить(ЭлементСпискаСчетФактур.Значение);
		Если СохраненноеЗначение <> Неопределено Тогда
			Если НЕ ЭлементСпискаСчетФактур.Пометка ИЛИ СохраненноеЗначение = ЭлементСпискаСчетФактур.Значение Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СохраняемоеЗначение.Вставить(ЭлементСпискаСчетФактур.Значение, ЭлементСпискаСчетФактур.Пометка);
		
	КонецЦикла;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Отображения результата проверки контрагента в документе.
//
// Параметры:
//  Форма	 				- ФормаКлиентскогоПриложения - Форма документа, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура) формы документа.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыДокумент ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
//
//@skip-warning
Процедура ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Прорисовать состояния контрагентов в документе.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СостояниеПроверки		 - Перечисления.СостоянияПроверкиКонтрагентов	 - Указывает, в каком состояние проверка:
//  	завершилась, не завершилась, выполняется или отсутствует доступ к веб-сервису.
//  ДополнительныеПараметры	 - Неопределено, Структура - Параметры, показывающие в каком элементе формы произошло
//  												изменение и это изменение вызвало запуск проверки контрагента. Описание структуры см в
//  												ПроверкаКонтрагентовКлиентСервер.ПараметрыФоновогоЗадания.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//  										процедуре.
//  										Пример см в ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе.
//
//@skip-warning
Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	
	ЭтоДокументСКонтрагентомВШапке          = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма); 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	ЭтоДокументСоСчетомФактуройВПодвале     = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма);
	ЭтоСчетФактура                          = ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма);
	
	Если ЭтоДокументСКонтрагентомВШапке
		ИЛИ ЭтоДокументСоСчетомФактуройВПодвале
		ИЛИ ЭтоСчетФактура Тогда
		
		Если ДополнительныеПараметры = Неопределено Тогда
			Элемент = Неопределено;
		ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно.
			Возврат;
		ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившеесяПоле") Тогда
			// Это поле с контрагентом или счетом-фактурой.
			Элемент = Форма.Элементы[ДополнительныеПараметры.ИзменившеесяПоле];
		Иначе
			Элемент = Неопределено;
		КонецЕсли;
		
		Описание = ПроверкаКонтрагентов.ОписаниеДокументов(Форма);
		
		Для каждого СтрокаОписания Из Описание Цикл
		
			// Прорисовываем результат либо для всех элементов, либо только для переданного.
			Если Элемент = Неопределено ИЛИ Элемент = СтрокаОписания.Элемент Тогда
				
				ПараметрыПрорисовки = Новый Структура;
				ПараметрыПрорисовки.Вставить("СостояниеКонтрагента", 	СтрокаОписания.СостояниеКонтрагента);
				
				ПараметрыПрорисовки.Вставить("ЭлементРодитель", 		СтрокаОписания.ЭлементРодитель);
				ПараметрыПрорисовки.Вставить("Элемент", 				СтрокаОписания.Элемент);
				
				// Разный алгоритм для счета-фактуры и обычного контрагента.
				Если ЭтоДокументСоСчетомФактуройВПодвале И ТипЗнч(СтрокаОписания.Ссылка) = Тип("ТаблицаЗначений") Тогда 
					КонтрагентЗаполнен  	= Ложь;
					Для Каждого СтрокаОписания ИЗ СтрокаОписания.Ссылка Цикл
						Если ЗначениеЗаполнено(СтрокаОписания.Контрагент) Тогда
							КонтрагентЗаполнен = Истина;
						КонецЕсли;
					КонецЦикла;
					КонтрагентовНесколько 	= Истина;
				Иначе
					КонтрагентЗаполнен 		= ЗначениеЗаполнено(СтрокаОписания.Контрагент);
					КонтрагентовНесколько 	= Ложь;
				КонецЕсли;
				ПараметрыПрорисовки.Вставить("КонтрагентЗаполнен", 		КонтрагентЗаполнен);
				ПараметрыПрорисовки.Вставить("КонтрагентовНесколько", 	КонтрагентовНесколько);
				ПараметрыПрорисовки.Вставить("ПричинаОтключенияПроверкиФНС", СтрокаОписания.ПричинаОтключенияПроверкиФНС);
				
				ПроверкаКонтрагентовКлиентСерверПереопределяемыйУТ.УстановитьТекстПодсказкиВДокументе(ПараметрыПрорисовки, СостояниеПроверки);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка документов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка документов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеСпискаДокументов(Список, СтандартнаяОбработка = Истина) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Установка условного оформления в табличной части документа.
//
// Параметры:
//  Форма				 	 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма, СтандартнаяОбработка = Истина) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Добавление колонки с результатом проверки контрагента в таблицу формы документа.
//
// Параметры:
//  Форма				 	 - ФормаКлиентскогоПриложения - Форма документа, в котором выполняется проверка контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма, СтандартнаяОбработка = Истина) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Добавление строки с данными проверяемого контрагента при проверке контрагентов в документе.
//
// Параметры:
//	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//		Значение по умолчанию - Истина;
//	Ссылка - ДокументСсылка - ссылка на документ, в котором выполняется проверка контрагентов;
//	ДанныеКонтрагентов - ТаблицаЗначений - содержит данные проверяемых контрагентов.
//		Структуру колонок таблицы см. в функции ШаблонТаблицыДанныеКонтрагента;
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - проверяемый контрагент, ссылка на
//		элемент справочника контрагентов;
//	Дата - Дата - дата, на которую выполняется проверка;
//	Состояние - ПеречислениеСсылка.СостоянияПроверкиКонтрагентов - текущее состояние
//		проверки существования контрагента.
//
//@skip-warning
Процедура ДобавитьСтрокуВДанныеКонтрагентовВДокументе(
	СтандартнаяОбработка,
	Ссылка,
	ДанныеКонтрагентов,
	Контрагент,
	Дата,
	Состояние = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	
	КПП = "";
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ИННКонтрагента, КППКонтрагента");
		ИНН = РеквизитыДокумента.ИННКонтрагента;
		КПП = РеквизитыДокумента.КППКонтрагента;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИсторияКППКонтрагентов.КПП КАК КПП
	|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияКППКонтрагентов.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП) КАК КПП,
	|	Контрагенты.ИНН КАК ИНН,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент), ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИностранныйКонтрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.Параметры.Вставить("Контрагент", Контрагент);
	Запрос.Параметры.Вставить("ДатаСведений", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		ДанныеКонтрагента.Ссылка      = Ссылка;
		ДанныеКонтрагента.Контрагент  = Контрагент;
		ДанныеКонтрагента.Дата        = Дата;
		ДанныеКонтрагента.Состояние   = Состояние;
		
		ДанныеКонтрагента.ИНН                      = ?(ПустаяСтрока(ИНН), Выборка.ИНН, ИНН);
		ДанныеКонтрагента.КПП                      = ?(ПустаяСтрока(КПП), Выборка.КПП, КПП);
		ДанныеКонтрагента.ЭтоЮридическоеЛицо       = Выборка.ЭтоЮридическоеЛицо;
		ДанныеКонтрагента.ЭтоИностранныйКонтрагент = Выборка.ЭтоИностранныйКонтрагент;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Выделение контрагента с ошибкой в строке отчета.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - Табличный документ отчета, в котором выделяется строка с некорректным
//                                           контрагентом.
//  НомерСтроки			 - Число - Номер строки табличного документа, в которой находится некорректный контрагент.
//
//@skip-warning
Процедура ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, НомерСтроки) Экспорт
	
	//++ НЕ ГОСИС
	Область = ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, ТабличныйДокумент.ШиринаТаблицы);
	Область.ЦветФона = ЦветаСтиля.ЦветФонаНекорректногоЗначенияБИП;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Предназначена для формирования отчета, в котором используется проверка контрагентов, из общего модуля.
//
// Параметры:
//  ПараметрыФормированияОтчета	 - Структура - Параметры, с которыми необходимо сформировать отчет.
//  Отчет						 - ТабличныйДокумент - результат формирования отчета.
//
//@skip-warning
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, Отчет = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ПараметрыФормированияОтчета.Свойство("ЭтоКнигаПродаж") Тогда
		
		Отчеты.КнигаПродаж.ПодготовитьОтчет(ПараметрыФормированияОтчета);
		
	КонецЕсли;

	Если ПараметрыФормированияОтчета.Свойство("ЭтоКнигаПокупок") Тогда
		
		Отчеты.КнигаПокупок.ПодготовитьОтчет(ПараметрыФормированияОтчета);
		
	КонецЕсли;

	Если ПараметрыФормированияОтчета.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		
		ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыФормированияОтчета, ВременныйАдресХранилища);
		Результат = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
		
		Отчет = Результат.СформированныйЖурнал;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры 

// Вывод результата проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - ФормаКлиентскогоПриложения - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
//
//@skip-warning
Процедура ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыФормированияОтчета = Форма.РеквизитыПроверкиКонтрагентов;
	
	Если Форма.ИмяФормы = Метаданные.Отчеты.ЖурналУчетаСчетовФактур.Формы.ФормаОтчета.ПолноеИмя() Тогда
		СтандартнаяОбработка = Ложь;
		
		ПолеТабличногоДокумента.Очистить();
		
		// Вывод отчета
		Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется
			И НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки Тогда // пользователь выбрал режим просмотра - "Только контрагенты с ошибками"
			
			// Выводим только контрагентов с ошибками
			ПолеТабличногоДокумента.Вывести(Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам);
		Иначе
			ПолеТабличногоДокумента.Вывести(РезультатФормированияОтчета);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Вывод раздела отчета с проверкой контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - ФормаКлиентскогоПриложения - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  НомерРаздела	 			 - Число - Номер раздела отчета.
//  СтандартнаяОбработка		 - Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                    стандартную обработку.
//
//@skip-warning
Процедура ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела, СтандартнаяОбработка) Экспорт

	

КонецПроцедуры

// Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
// 	Пример см. в ПроверкаКонтрагентов.ВыводитьСтрокуОтчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент				- СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН						- Строка - ИНН контрагента.
//  КПП						- Строка - ИНН контрагента.
//  Дата					- Дата - Дата, на которую необходимо выполнять проверку контрагента.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//  Результат				- Булево - Определяет, нужно ли выводить строку.
//
//@skip-warning
Процедура ОпределитьНужноЛиВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата, Результат, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	Если СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;

		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;

		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;

		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет, нужно ли проверять контрагентов в разделе отчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НомерРаздела			- Число - Номер раздела отчета.
//  ДополнительныеПараметры	- Произвольный - Дополнительная информация, связанная с разделом.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//
//@skip-warning
Процедура ОпределитьНужноЛиПроверятьКонтрагентовВРазделеОтчета(СтруктураПараметров, НомерРаздела, ДополнительныеПараметры, СтандартнаяОбработка) Экспорт

	//++ НЕ ГОСИС
	Если СтруктураПараметров.Свойство("ЭтоКнигаПродаж") Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЭтоДопЛист") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.Свойство("ЭтоКнигаПокупок") Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЭтоДопЛист") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Отображения результата проверки контрагента в отчете.
//
// Параметры:
//  Форма	 				- ФормаКлиентскогоПриложения - Форма отчета, для которого выводится результат проверки контрагента.
//		Результат проверки хранится в реквизите РеквизитыПроверкиКонтрагентов(Структура),
//		ПроверкаКонтрагентовНедействующиеКонтрагенты формы отчета.
//		Структуру полей РеквизитыПроверкиКонтрагентов см. процедуре ИнициализироватьРеквизитыФормыОтчета ОМ
//		ПроверкаКонтрагентов.
//  СтандартнаяОбработка	- Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                  процедуре.
//
//@skip-warning
Процедура ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Установка условного оформления в форме выбора или списка справочника контрагентов.
//
// Параметры:
//  Список				 	 - ДинамическийСписок - Динамический список формы выбора или списка справочника контрагентов.
//  СтандартнаяОбработка	 - Булево - Если Ложь, то игнорируется стандартное действие и выполняется указанное в данной
//                                   процедуре.
//
//@skip-warning
Процедура УстановитьУсловноеОформлениеСпискаКонтрагентов(Список, СтандартнаяОбработка = Истина) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Важно: заполнение реализации метода обязательно.
// Определяет свойства справочников контрагентов.
// Параметры:
//	СвойстваСправочников - ТаблицаЗначений - в таблице заполняется список
//		справочников контрагентов и их свойства. Колонки таблицы:
//		* Имя - Строка - имя справочника;
//		* Иерархический - Булево - справочник является иерархическим;
//		* РеквизитИНН - Строка- имя реквизита ИНН;
//		* РеквизитКПП - Строка- имя реквизита КПП;
//		* ОтключитьСозданиеИзДосьеКонтрагента - Булево - если Истина,
//			тогда не будет предлагаться создание элемента справочника из
//			отчета "Досье контрагента".
//
//@skip-warning
Процедура ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников) Экспорт
	
	//++ НЕ ГОСИС
	НоваяСтрока = СвойстваСправочников.Добавить();
	НоваяСтрока.Имя = "Контрагенты";
	НоваяСтрока.Иерархический = Ложь;
	НоваяСтрока.РеквизитИНН = "ИНН";
	НоваяСтрока.РеквизитКПП = "КПП";
	НоваяСтрока.ОтключитьСозданиеИзДосьеКонтрагента = Ложь;
	
	НоваяСтрока = СвойстваСправочников.Добавить();
	НоваяСтрока.Имя = "Организации";
	НоваяСтрока.Иерархический = Ложь;
	НоваяСтрока.РеквизитИНН = "ИНН";
	НоваяСтрока.РеквизитКПП = "КПП";
	НоваяСтрока.ОтключитьСозданиеИзДосьеКонтрагента = Ложь;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет, является ли контрагент физическим или юридическим лицом.
//
// Параметры:
//  СтандартнаяОбработка  - Булево - если стандартный механизм переопределяется, то должно быть установлено значение "Ложь".
//  ЭтоЮрЛицо             - Булево - Истина, если юридическое лицо, и Ложь, если физическое.
//  ДанныеКонтрагента     - Структура - структура, которая содержит данные обрабатываемого контрагента.
//
//@skip-warning
Процедура ПриОпределенииВидаКонтрагента(СтандартнаяОбработка, ЭтоЮрЛицо, ДанныеКонтрагента) Экспорт

	//++ НЕ ГОСИС
	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("ЮрФизЛицо") Тогда
		ЮрФизЛицо = ДанныеКонтрагента.ДополнительныеПараметры.ЮрФизЛицо;
		ЭтоЮрЛицо = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяется, является ли контрагент иностранным.
//
// Параметры:
//  ДанныеКонтрагента   - СтрокаТаблицыЗначений - Содержит информацию о контрагенте. 
//      Подробнее о колонках таблицы можно узнать в описании к процедуре ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента().
//  ЯвляетсяИностранным - Булево - Результат проверки.
//
//@skip-warning
Процедура ПриОпределенииКонтрагентЯвляетсяИностранным(ДанныеКонтрагента, ЯвляетсяИностранным) Экспорт
	
	//++ НЕ ГОСИС
	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("ЮрФизЛицо") Тогда
		ЮрФизЛицо = ДанныеКонтрагента.ДополнительныеПараметры.ЮрФизЛицо;
	ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) И НЕ ДанныеКонтрагента.Контрагент.Пустая() Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента.Контрагент, "ЮрФизЛицо");
	Иначе
		ЮрФизлицо = Перечисления.ЮрФизЛицо.ПустаяСсылка();
	КонецЕсли;
	
	ЯвляетсяИностранным = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Или ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяется, необходимо ли отключить проверку состояния контрагента в базе ФНС.
//
// Параметры:
//  ДанныеКонтрагента - СтрокаТаблицыЗначений:
//    * Контрагент - Произвольный - ссылки на все справочники, описанные в методе
//        см. РаботаСКонтрагентами.СвойстваСправочниковКонтрагентов.
//    * ИНН - Строка
//    * КПП - Строка
//    * ЭтоЮридическоеЛицо - Неопределено, Булево
//    * ЭтоИностранныйКонтрагент - Неопределено, Булево
//    * ОтключитьПроверкуФНС - Неопределено, Булево
//    * ПричинаОтключенияПроверкиФНС - Строка
//    * Дата - Дата - дата актуальности состояния.
//    * ДополнительныеПараметры - Структура - дополнительные сведения о контрагенте.
//    * Состояние - ПеречислениеСсылка.СостоянияСуществованияКонтрагента
//    * ОбластьДанныхВспомогательныеДанные - Число - добавляется если внедрена подсистема РаботаВМоделиСервиса.
//  ОтключитьПроверкуФНС - Булево, Неопределено - результат проверки состояния контрагента. Если установить Истина, то
//    проверка состояния контрагента в базе ФНС выполняться не будет.
//  ПричинаОтключения - Строка - краткое описание причины отключения проверки контрагента. Установленный текст будет
//    отображаться в окне подсказки поля контрагента, если параметр ОтключитьПроверкуФНС будет установлен в значение
//    Истина.
//
//@skip-warning
Процедура ПриОпределенииСтатусаПроверкиКонтрагентаВБазеФНС(
	ДанныеКонтрагента,
	ОтключитьПроверкуФНС,
	ПричинаОтключения) Экспорт
	
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов для формы справочника. 
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой дополняется структура РеквизитыПроверкиКонтрагентов.
//  НовыеРеквизиты  - Структура - структура, которая транслируется в реквизит формы РеквизитыПроверкиКонтрагентов.
//
//@skip-warning
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты) Экспорт
	
	//++ НЕ ГОСИС
	НовыеРеквизиты.Вставить("ЮрФизЛицо", Неопределено);
	НовыеРеквизиты.Вставить("НеИспользоватьКэш", Ложь);
	
	Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
		НовыеРеквизиты.ЮрФизЛицо = Форма.Объект.ЮрФизЛицо;
		Если НовыеРеквизиты.ПроверкаИспользуется Тогда
			НовыеРеквизиты.ЮрФизЛицо                 = Форма.Объект.ЮрФизЛицо;
			НовыеРеквизиты.ЭтоЮридическоеЛицо        = (Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") 
			                                                            Или  Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
			НовыеРеквизиты.ЭтоИностранныйКонтрагент  = (Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
			                                            Или Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
		КонецЕсли;

	ИначеЕсли Форма.ИмяФормы  = "Справочник.Партнеры.Форма.ФормаЭлементаРеквизитыКонтрагента" Тогда
		НовыеРеквизиты.ЮрФизЛицо = Форма.ЮрФизЛицо;
		Если НовыеРеквизиты.ПроверкаИспользуется Тогда
			НовыеРеквизиты.ЮрФизЛицо                 = Форма.ЮрФизЛицо;
			НовыеРеквизиты.ЭтоЮридическоеЛицо        = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") 
			                                            Или  Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
			НовыеРеквизиты.ЭтоИностранныйКонтрагент  = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
			                                            Или Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИнформацииДляДосьеКонтрагента

// Определение состава и порядка вывода в отчет "Досье контрагента" данных из информационной базы.
//
// Параметры:
//  ТаблицаОписания - ТаблицаЗначений - описание см. Отчеты.ДосьеКонтрагента.НоваяТаблицаОписаниеДанныхПрограммы.
//
//@skip-warning
Процедура ЗаполнитьОписаниеДанныхПрограммы(ТаблицаОписания) Экспорт

	
КонецПроцедуры

// Заполнение информации о контрагенте по данным информационной базы для отчета "Досье контрагента".
//
// Параметры:
//  ИнформацияОСвязях  - Структура - описание см. РаботаСКонтрагентами.НоваяИнформацияОСвязяхЮридическогоЛица
//                 и РаботаСКонтрагентами.НоваяИнформацияОСвязяхПредпринимателя.
//                 При заполнении в структуру ИнформацияОСвязях.ДанныеПрограммы добавляются данные о контрагенте.
//                 Ключи структуры должны соответствовать полям ИмяДанных таблицы, заполненной 
//                 в процедуре ЗаполнитьОписаниеДанныхПрограммы.
//  Контрагент  - ОпределяемыйТип.КонтрагентБИП - ссылка на контрагента в информационной базе.
//                 Если при вызове процедуры ссылка пустая, необходимо найти контрагента до данным,
//                 содержащимся в структуре ИнформацияОСвязях.
//
//@skip-warning
Процедура ДополнитьИнформациюДаннымиПрограммы(ИнформацияОСвязях, Контрагент) Экспорт
	
	
КонецПроцедуры 

// Заполнение идентификатора конфигурации для статистики переходов по ссылкам сервиса 1С:Контрагент.
//
// Параметры:
//  ИдентификаторКонфигурации  - Строка - идентификатор. 
//                 Рекомендуется использовать латинские строчные буквы и цифры.
//
//@skip-warning
Процедура ЗаполнитьИдентификаторКонфигурации(ИдентификаторКонфигурации) Экспорт


КонецПроцедуры

#КонецОбласти 

#Область ПрочиеПроцедуры

// Определение цветов выделения результатов проверки контрагентов.
// 		Для примера см. функцию ЦветаРезультатовПроверки ОМ ПроверкаКонтрагентовКлиентСервер.
//
// Параметры:
//  Цвета	 - Структура - Имена ключей - это названия цветов, которые необходимо определить.
// 		Список ключей см ПроверкаКонтрагентовВызовСервера.ЦветаРезультатовПроверки().
//
//@skip-warning
Процедура ПриОпределенииЦветовРезультатовПроверки(Цвета) Экспорт
	
	//++ НЕ ГОСИС
	Цвета.ЦветФонаКорректногоКонтрагентаВДокументе = ЦветаСтиля.РезультатПроблемаЦвет;
	
	Цвета.Вставить("ЦветТекстаКонтрагентаНеЗаполненИННКПП",
		ЦветаСтиля.ЦветТекстаКонтрагентаНеЗаполненИННКПП);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполнение значений колонок ЭтоЮридическоеЛицо, ЭтоИностранныйКонтрагент, ОтключитьПроверкуФНС и
// ПричинаОтключенияПроверкиФНС в таблице с данными контрагента.
//
// Параметры:
//   ДанныеКонтрагентов - ТаблицаЗначений - таблица с данными контрагентов
//     см. ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента.
//   СтандартнаяОбработка - Булево - если Истина, то заполнение будет выполнено стандартным образом путем перебора
//     каждой строки таблицы.
//
//@skip-warning
Процедура ДополнитьДанныеКонтрагентов(ДанныеКонтрагентов, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
