////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПАКЕТАМИ ОБМЕНА С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "1С:ЗАКАЗЫ"
// - выгрузка объектов обмена
// - загрузка объектов обмена
// - настройка узлов обмена
// - отправка push-уведомлений
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыгрузкаДанных

// Возвращает сообщение обмена с информацией по заданиям для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьЗадания(ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка заданий'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 5);
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по клиентам для мобильного приложения.
// Если переданный параметр "ВсеКлиенты" = Истина, регистрируются все элементы справочника "Партнеры",
// если переданный параметр "УникальныйИдентификатор" не пустой,
// зарегистрируется только одино объект по переданной ссылке.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  ВсеКлиенты - Булево - флаг регистрации всех элементов справочника "Партнеры";
//  УникальныйИдентификатор - Строка - 
//    строковое представление уникального идентификатора элементов справочника "Партнеры";
//  АдресДанных - строка - адрес(имя временного файла) подготовленных данных для обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьКлиентов(ИдентификаторМобильногоУстройства, ВсеКлиенты, УникальныйИдентификатор, АдресДанных) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства);
		
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка клиентов'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(АдресДанных) Тогда
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ЗарегистрироватьИзмененияКлиентовДляПланаОбмена(УзелОбмена,
		ВсеКлиенты, УникальныйИдентификатор, Отказ, СообщениеОбмена);
	Иначе
		СтруктураОтвета.ResultMessage = АдресДанных;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
			СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 6, , СтруктураОтвета);
		Иначе
			СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 3, , СтруктураОтвета);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОтвета.Continue Тогда
		АдресДанных = СтруктураОтвета.ResultMessage;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по настройкам приложения для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - Settings (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьНастройки(ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка настроек'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьНастройкиДляОбмена(УзелОбмена, СтруктураОтвета);
	
	Возврат ОтветWS(СтруктураОтвета, "Settings");
КонецФункции

// Возвращает сообщение обмена с информацией по остаткам номенклатуры для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  АдресДанных - строка - адрес(имя временного файла) подготовленных данных для обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - Settings (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьОстатки(ИдентификаторМобильногоУстройства, АдресДанных) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка остатков на складах'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		СтруктураОтвета.ResultMessage = АдресДанных;
	КонецЕсли;
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 2,, СтруктураОтвета);
	Если СтруктураОтвета.Continue Тогда
		АдресДанных = СтруктураОтвета.ResultMessage;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по ценам номенклатуры по типовым соглашениям для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  ВсеЦены - Булево - флаг выборки всех цен номенклатуры;
//  АдресДанных - строка - адрес(имя временного файла) подготовленных данных для обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьПрайсЛист(ИдентификаторМобильногоУстройства, ВсеЦены = Ложь, АдресДанных = "") Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка цен'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		СтруктураОтвета.ResultMessage = АдресДанных;
	КонецЕсли;
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, 1, ВсеЦены, СтруктураОтвета);
	Если СтруктураОтвета.Continue Тогда
		АдресДанных = СтруктураОтвета.ResultMessage;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по справочникам для мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьСправочники(ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Отправка основных справочников'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СообщениеОбмена = "";
	Отказ = Ложь;
	СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ);
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

// Возвращает сообщение обмена с информацией по текущим статусам документов.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange);
//  ТипДокумента - число - определяет тип документов.
//
// Возвращаемое значение:
//  ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ВыгрузитьСтатусыДокументов(ИдентификаторМобильногоУстройства, СообщениеОбмена, ТипДокумента) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета, 
		ИдентификаторМобильногоУстройства);
		
	Отказ = Ложь;
	СообщениеОтвета = "";
	Если УзелОбмена = Неопределено Тогда
		СообщениеОтвета = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОтвета = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		Идентификаторы = ИдентификаторыДокументовИзСообщения(СообщениеОбмена.ResultMessage, ТипДокумента);
		СообщениеОтвета = СформированныйОтветСтатусыДокументов(Идентификаторы, УзелОбмена, ТипДокумента);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ВыгрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	КомментарийКОбмену = "";
	Если ТипДокумента = 0 Тогда
		КомментарийКОбмену = НСтр("ru = 'Отправка состояния заказов клиентов'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ТипДокумента = 1 Тогда
		КомментарийКОбмену = НСтр("ru = 'Отправка состояния заявок на возврат'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	СтруктураОтвета.Вставить("Комментарий", КомментарийКОбмену);
	
	СтруктураОтвета.ResultMessage = СообщениеОтвета;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета);
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Возвращает сообщение обмена с информацией по записи заданий из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи;
//  НастройкиЗадания - ОбъектXDTO - JobTargetSettings (http://www.1c.ru/CustomerOrders/Exchange),
//    настройки использования заданий торговыми представителями.
//
// Возвращаемое значение:
//  ОбъектXDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьЗаданияТорговымПредставителям(ИдентификаторМобильногоУстройства, СообщениеОбмена, НастройкиЗадания) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 3;
		ПараметрыЧтенияПакетаОбмена.НастройкиЗадания = НастройкиЗадания;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение заданий'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи заказов из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  ОбъектXDTO - Permit (http://www.1c.ru/ CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьЗаказыКлиентов(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение заказов'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи заявок на возврат товаров из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  ОбъектXDTO - Permit (http://www.1c.ru/ CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьЗаявкиНаВозвратТоваровОтКлиента(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 4;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение заказов'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи заказов из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  ОбъектXDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьОплатыКлиентов(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%", 
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 2;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение регистрации оплат'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

// Возвращает сообщение обмена с информацией по записи справочников из мобильного приложения.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена;
//  СообщениеОбмена - Строка - данные для записи.
//
// Возвращаемое значение:
//  ОбъектXDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗагрузитьСправочники(ИдентификаторМобильногоУстройства, СообщениеОбмена) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
		
	Отказ = Ложь;
	Если УзелОбмена = Неопределено Тогда
		СообщениеОбмена = НСтр("ru = 'Не найден узел обмена для устройства %ИдентификаторМобильногоУстройства%.'");
		СообщениеОбмена = СтрЗаменить(СообщениеОбмена, "%ИдентификаторМобильногоУстройства%",
			ИдентификаторМобильногоУстройства);
		Отказ = Истина;
	Иначе
		СообщениеОбмена = СообщениеОбмена.ResultMessage;
		ПараметрыЧтенияПакетаОбмена = ПараметрыЧтенияПакетаОбмена();
		ПараметрыЧтенияПакетаОбмена.ВТранзакции = Истина;
		ПараметрыЧтенияПакетаОбмена.ТипОбъекта = 1;
		ПрочитатьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, ПараметрыЧтенияПакетаОбмена);
	КонецЕсли;
	
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение справочников'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СтруктураОтвета.ResultMessage = СообщениеОбмена;
	СтруктураОтвета.Success = НЕ Отказ;
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

// Заполняет настройки компоновщика по переданным источнику, макету и настройкам.
//
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек данных, в котором необходимо заполнить настройки;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки;
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных - настройки для заполнения.
//
Процедура ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроек, Источник, ИмяМакета = "СхемаКомпоновкиНастроекОбмена", НастройкиКомпоновки = Неопределено) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновки = Источник.ПолучитьМакет(ИмяМакета);
	Если НастройкиКомпоновки = Неопределено Тогда
		НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	КонецЕсли;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор());
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	СоответствияЭлементовОтбора = Источник.СоответствияЭлементовОтбораФункциональнымОпциям();
	УстановитьОтборыКомпоновщикаПоФункциональнымОпциям(КомпоновщикНастроек, СоответствияЭлементовОтбора);
КонецПроцедуры

// Возвращает идентификатор пользовательской настройки.
//
// Параметры:
//  ИмяЭлемента - строка - имя элемента пользовательских настроек;
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек данных, в котором осуществляется поиск;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки.
//
// Возвращаемое значение:
//  Строка - идентификатор настройки.
//
Функция ИдентификаторПользовательскойНастройки(ИмяЭлемента, КомпоновщикНастроек, Источник, ИмяМакета) Экспорт
	
	ИДПользовательскойНастройки = "";
	
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство(ИмяЭлемента) Тогда
		ИДПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства[ИмяЭлемента];
		Если ЗначениеЗаполнено(ИДПользовательскойНастройки) Тогда
			Возврат ИДПользовательскойНастройки;
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновки = Источник.ПолучитьМакет(ИмяМакета);
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	МассивПолейОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиКомпоновки.Отбор, ИмяЭлемента);
	Для Каждого НайденныйЭлемент Из МассивПолейОтбора Цикл
		ИДПользовательскойНастройки = НайденныйЭлемент.ИдентификаторПользовательскойНастройки;
	КонецЦикла;
	
	Возврат ИДПользовательскойНастройки;
КонецФункции

// Возвращает реквизиты узла плана обмена.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена.
//
// Возвращаемое значение:
//  Структура - реквизиты узла обмена.
//
Функция РеквизитыУзла(УзелОбмена) Экспорт
	
	РеквизитыУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена,
	"НомерПринятого, НомерОтправленного, ПрефиксДляДанныхМобильногоУстройства, ВидНастройкиОбмена, НастройкиОбмена");
	
	Если НЕ ЗначениеЗаполнено(РеквизитыУзла.ВидНастройкиОбмена) Тогда
		РеквизитыУзлаНастройкиОбмена =  РеквизитыУзла.НастройкиОбмена; // ХранилищеЗначения
		НастройкаКомпоновки = РеквизитыУзлаНастройкиОбмена.Получить();
	Иначе
		РеквизитНастройкиОбмена =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыУзла.ВидНастройкиОбмена, "НастройкиОбмена"); // ХранилищеЗначения
		НастройкаКомпоновки = РеквизитНастройкиОбмена.Получить();
	КонецЕсли;
	
	Если НастройкаКомпоновки = Неопределено Тогда
		Возврат РеквизитыУзла;
	КонецЕсли;
	
	ПланОбменаМенеджер = ПланыОбмена[УзелОбмена.Метаданные().Имя];
	
	РеквизитыГлавногоУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланОбменаМенеджер.ЭтотУзел(),
	"ВариантОтправкиPushУведомлений, НомерПриложенияGoogleCloud");
	
	РеквизитыУзла.Вставить("ОтправляютсяPushУведомления",
		ЗначениеЗаполнено(РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений)
		И НЕ РеквизитыГлавногоУзла.ВариантОтправкиPushУведомлений =
			Перечисления.ВариантыОтправкиPushУведомлений.НеОтправлять);
	РеквизитыУзла.Вставить("НомерПриложенияGoogleCloud", РеквизитыГлавногоУзла.НомерПриложенияGoogleCloud);
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроекКомпоновкиДанных, ПланОбменаМенеджер,, НастройкаКомпоновки);
	
	ТребуемыеРеквизиты = ПланОбменаМенеджер.РеквизитыШапкиФормы();
	Для Каждого Реквизит Из ТребуемыеРеквизиты Цикл
		РеквизитыУзла.Вставить(Реквизит);
	КонецЦикла;
	
	СоответствияЭлементовОтбора = ПланОбменаМенеджер.СоответствияЭлементовОтбораФункциональнымОпциям();
	УстановитьОтборыКомпоновщикаВРеквизитыКоллекции(РеквизитыУзла, КомпоновщикНастроекКомпоновкиДанных,
		СоответствияЭлементовОтбора, ТребуемыеРеквизиты);
	Возврат РеквизитыУзла;
КонецФункции

// Заполняет отборы из компоновщика настроек в реквизиты коллекции.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция, Структура - коллекция реквизитов;
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек данных, из отбора которого заполняются реквизиты;
//  СоответствияЭлементовОтбора - Массив - массив соответствий;
//  ТребуемыеРеквизиты - Массив - массив реквизитов к установке.
//
Процедура УстановитьОтборыКомпоновщикаВРеквизитыКоллекции(Коллекция, КомпоновщикНастроек, СоответствияЭлементовОтбора, ТребуемыеРеквизиты) Экспорт
	
	// Зависимые от ФО
	Для Каждого Соответствие Из СоответствияЭлементовОтбора Цикл
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ИндексРеквизита = ТребуемыеРеквизиты.Найти(КлючИЗначение.Значение);
			Если ИндексРеквизита = Неопределено Тогда
				Продолжить;
			Иначе
				ТребуемыеРеквизиты.Удалить(ИндексРеквизита);
			КонецЕсли;
			Использование = ПолучитьФункциональнуюОпцию(КлючИЗначение.Ключ);
			Если ТипЗнч(Коллекция) = Тип("ФормаКлиентскогоПриложения") Тогда
				Коллекция[КлючИЗначение.Ключ] = Использование;
			КонецЕсли;
			Если Использование Тогда
				Коллекция[КлючИЗначение.Значение] = ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек,
					КлючИЗначение.Значение);
				КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек,
					КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Независимые от ФО
	Для Каждого ИмяРеквизита Из ТребуемыеРеквизиты Цикл
		Коллекция[ИмяРеквизита] = ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяРеквизита);
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, ИмяРеквизита);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет отбор компоновщика настроек из реквизита коллекции.
//
// Параметры:
//  ИмяРеквизита - строка - имя реквизита коллекции;
//  Коллекция - ДанныеФормыКоллекция, Структура - коллекция реквизитов;
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек данных для заполнения;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки.
//
Процедура УстановитьРеквизитФормыВОтборыКомпоновщика(ИмяРеквизита, Коллекция, КомпоновщикНастроек, Источник, ИмяМакета = "СхемаКомпоновкиНастроекОбмена") Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор,
		ИмяРеквизита, Коллекция[ИмяРеквизита], ВидСравненияКомпоновкиДанных.Равно,,
			ЗначениеЗаполнено(Коллекция[ИмяРеквизита]),,
			ИдентификаторПользовательскойНастройки(ИмяРеквизита, КомпоновщикНастроек, Источник, ИмяМакета));
КонецПроцедуры

// Заполняет отбор компоновщика настроек реквизитами коллекции.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция, Структура - коллекция реквизитов;
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек данных для заполнения;
//  Источник - произвольный - объект метаданных, в макете которого находится схема компоновки данных;
//  ИмяМакета - Строка - имя макета, содержащего схему компоновки.
//
Процедура УстановитьРеквизитыФормыВОтборыКомпоновщика(Коллекция, КомпоновщикНастроек, Источник, ИмяМакета = "СхемаКомпоновкиНастроекОбмена") Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыУстановки = Источник.РеквизитыШапкиФормы();
	Для Каждого РеквизитУстановки Из РеквизитыУстановки Цикл
		УстановитьРеквизитФормыВОтборыКомпоновщика(РеквизитУстановки, Коллекция, КомпоновщикНастроек, Источник, ИмяМакета);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСДоставляемымиУведомлениям

// Возвращает флаг возможности отправки push-уведомления на мобильное устройство.
//
// Параметры:
//  Получатель - ПланОбменаСсылка - Проверяемый узел, настроенный на синхронизацию с мобильным устройством.
//
// Возвращаемое значение:
//  Булево - флаг возможности отправки push-уведомления.
//
Функция ВозможнаОтправка(Получатель) Экспорт
	
	ВозможнаОтправка = Ложь;
	ИдентификаторПодписчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель,
		"ИдентификаторПодписчикаДоставляемыхУведомлений"); // ХранилищеЗначения
	Если НЕ ИдентификаторПодписчика = Неопределено Тогда
		Идентификатор = ИдентификаторПодписчика.Получить();
		Если НЕ Идентификатор = Неопределено Тогда
			ВозможнаОтправка = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат ВозможнаОтправка;
КонецФункции

// Отправляет push-уведомления на мобильные устройства пользователям указанного мобильного приложения.
//
// Параметры:
//  УведомлениеТекст - Строка - текст уведомления;
//  Получатели - Массив - массив получателей уведомления;
//  ПолучателиБезДоставки - Массив - массив получателей уведомления, которым оно не было отправлено;
//  ИмяУзла - Строка - имя плана обмена, связанного с мобильным приложением.
//
Процедура ОтправитьУведомление(УведомлениеТекст, Получатели, ПолучателиБезДоставки, ИмяУзла = "МобильноеПриложениеЗаказыКлиентов") Экспорт
	
	Узел = ПланыОбмена[ИмяУзла].ЭтотУзел();
	
	ИспользоватьPushУведомления = Узел.ВариантОтправкиPushУведомлений;
	ИспользоватьAPNS = Узел.ИспользоватьAPNS;
	ИспользоватьGCM = Узел.ИспользоватьGCM;
	Если Не ЗначениеЗаполнено(ИспользоватьPushУведомления)
		ИЛИ ИспользоватьPushУведомления = Перечисления.ВариантыОтправкиPushУведомлений.НеОтправлять Тогда
		ПолучателиБезДоставки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Получатели);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка,
	|	МобильноеПриложениеЗаказыКлиентов.ИдентификаторПодписчикаДоставляемыхУведомлений
	|ИЗ
	|	&ПланОбменаИмяУзла КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка В(&Получатели)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПланОбменаИмяУзла", "ПланОбмена." + ИмяУзла);
	Запрос.УстановитьПараметр("Получатели", Получатели);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ПолучателиБезДоставки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Получатели);
		Возврат;
	КонецЕсли;
	
	Уведомление = Новый ДоставляемоеУведомление;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторПодписчикаДоставляемыхУведомлений = Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений; // ХранилищеЗначения
		Если НЕ ИдентификаторПодписчикаДоставляемыхУведомлений = Неопределено Тогда
			Идентификатор = ИдентификаторПодписчикаДоставляемыхУведомлений.Получить();
			Если НЕ Идентификатор = Неопределено Тогда
				Если ИспользоватьPushУведомления =
						Перечисления.ВариантыОтправкиPushУведомлений.ОтправлятьЧерезВспомогательныйСервис Тогда
					Уведомление.Получатели.Добавить(Идентификатор);
				Иначе
					Если ((Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS И ИспользоватьAPNS)
						ИЛИ (Идентификатор.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.GCM И ИспользоватьGCM)) Тогда
						Уведомление.Получатели.Добавить(Идентификатор);
					Иначе
						ПолучателиБезДоставки.Добавить(Выборка.Ссылка);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПолучателиБезДоставки.Добавить(Выборка.Ссылка);
			КонецЕсли;
		Иначе
			ПолучателиБезДоставки.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Уведомление.Получатели.Количество() > 0 Тогда
		Уведомление.Текст = УведомлениеТекст;
		ДанныеАутентификации = "";
		Сертификат = Неопределено;
		ИспользоватьСервис =
			ИспользоватьPushУведомления = Перечисления.ВариантыОтправкиPushУведомлений.ОтправлятьЧерезВспомогательныйСервис;
		Если ИспользоватьСервис Тогда
			ДанныеАутентификации = Узел.ЛогинСервисаПередачиPushУведомлений;
		Иначе
			ДанныеАутентификации = Новый Соответствие();
			Если ИспользоватьGCM Тогда
				ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.GCM] = Узел.КлючСервераОтправителяGCM;
			КонецЕсли;
			Если ИспользоватьAPNS Тогда
				Сертификат = Узел.СертификатМобильногоПриложенияIOS; // ХранилищеЗначения
				Если НЕ Сертификат = Неопределено Тогда
					Сертификат = Сертификат.Получить();
					Если НЕ Сертификат = Неопределено Тогда
						ДанныеАутентификации[ТипПодписчикаДоставляемыхУведомлений.APNS] = Сертификат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УдаленныеТокены = Новый Массив;
		Попытка
			ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, СокрЛП(ДанныеАутентификации),
				УдаленныеТокены, ИспользоватьСервис);
		Исключение
			ВызватьИсключение(ОписаниеОшибки());
		КонецПопытки;
		НеИспользоватьИдентификаторы(УдаленныеТокены);
		
		Если НЕ Сертификат = Неопределено Тогда
			УдаленныеТокены = ОтправкаДоставляемыхУведомлений.ПолучитьИсключенныхПолучателей(Сертификат, ИспользоватьСервис);
			НеИспользоватьИдентификаторы(УдаленныеТокены);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Операция записи идентификатора получателя push-уведомлений, сформированного на мобильном устройстве.
//
// Параметры:
//  ИдентификаторМобильногоУстройства - строка - не изменяемый код мобильного приложения, используется как код узла плана обмена;
//  ИдентификаторПодписчикаДоставляемыхУведомлений - ХранилищеЗначения - идентификатор получателя push-уведомлений.
//
// Возвращаемое значение:
//  ОбъектXDTO - MessageExchange (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция ЗаписьИдентификатораПодписчикаДоставляемыхУведомлений(ИдентификаторМобильногоУстройства, ИдентификаторПодписчикаДоставляемыхУведомлений) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	
	УстановитьПривилегированныйРежим(Истина);
	УзелОбменаСсылка = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());
	
	Если УзелОбменаСсылка = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета);
	КонецЕсли;
	
	УзелОбмена = УзелОбменаСсылка;//ПланОбменаСсылка - 
		
	СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
	СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
		КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
	СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Получение идентификатора подписчика push-уведомлений'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	НовыйИдентификатор = СериализаторXDTO.ПрочитатьXDTO(ИдентификаторПодписчикаДоставляемыхУведомлений);
	НовыйИдентификаторПодписчика =
		Новый ХранилищеЗначения(НовыйИдентификатор, Новый СжатиеДанных(9));
	УзелОбменаОбъект.ИдентификаторПодписчикаДоставляемыхУведомлений = НовыйИдентификаторПодписчика;
	Попытка
		УзелОбменаОбъект.Записать();
	Исключение
		СтруктураОтвета.ResultMessage = ОписаниеОшибки();
		СтруктураОтвета.Success = Ложь;
	КонецПопытки;
	
	Возврат ОтветWS(СтруктураОтвета, "MessageExchange");
КонецФункции

#КонецОбласти

#Область ФункцииВозвратаСтруктурыОбъектовОбменаПакетаXDTO_CustomerOrders

// Возвращает структуру объекта мобильного приложения "Валюты" для обмена.
//
// Возвращаемое значение:
//  Структура.
//
Функция СтруктураВалюты() Экспорт
	
	СтруктураВалюты = СтандартнаяСтруктураОбъекта();
	СтруктураВалюты.Вставить("Code");
	
	Возврат СтруктураВалюты;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Виды контактной информации" для обмена.
//
// Параметры:
//  ЭтоГруппа - Булево - признак группы.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураВидаКИ(Знач ЭтоГруппа) Экспорт
	
	СтруктураВидаКИ = СтандартнаяСтруктураОбъекта();
	СтруктураВидаКИ.Вставить("IsFolder");
	СтруктураВидаКИ.Вставить("Parent");
	СтруктураВидаКИ.Вставить("PredefinedDataName");
	СтруктураВидаКИ.Вставить("ERPКод"); //@NON-NLS-1
	
	Если Не ЭтоГруппа Тогда
	
		СтруктураВидаКИ.Вставить("Тип"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("РеквизитДопУпорядочивания"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("РедактированиеТолькоВДиалоге"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("МожноИзменятьСпособРедактирования"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("АдресТолькоРоссийский"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("ВключатьСтрануВПредставление"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("ОбязательноеЗаполнение"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("ПроверятьКорректность"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("СкрыватьНеактуальныеАдреса"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("Подсказка"); //@NON-NLS-1
		СтруктураВидаКИ.Вставить("РазрешитьВводНесколькихЗначений"); //@NON-NLS-1
		// Поддержка мобильного приложения до версии 3.0.2.
		СтруктураВидаКИ.Вставить("ЗапрещатьВводНекорректного"); //@NON-NLS-1
		
	КонецЕсли;
	
	Возврат СтруктураВидаКИ;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Виды номенклатуры" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураВидаНоменклатуры() Экспорт
	
	СтруктураВидаНоменклатуры = СтандартнаяСтруктураОбъекта();
	СтруктураВидаНоменклатуры.Вставить("IsFolder");
	СтруктураВидаНоменклатуры.Вставить("Parent");
	
	СтруктураВидаНоменклатуры.Вставить("ERPКод"); //@NON-NLS-1
	
	Возврат СтруктураВидаНоменклатуры;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Виды цен" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураВидаЦены() Экспорт
	
	СтруктураВидаЦены = СтандартнаяСтруктураОбъекта();
	СтруктураВидаЦены.Вставить("ERPКод"); //@NON-NLS-1
	СтруктураВидаЦены.Вставить("ВалютаЦены"); //@NON-NLS-1
	СтруктураВидаЦены.Вставить("ЦенаВключаетНДС"); //@NON-NLS-1
	
	Возврат СтруктураВидаЦены;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Договоры клиентов" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураДоговора() Экспорт
	
	СтруктураДоговора = СтандартнаяСтруктураОбъекта();
	СтруктураДоговора.Вставить("ERPКодДоговора"); //@NON-NLS-1
	СтруктураДоговора.Вставить("ERPКодСоглашения"); //@NON-NLS-1
	СтруктураДоговора.Вставить("ВалютаВзаиморасчетов"); //@NON-NLS-1
	СтруктураДоговора.Вставить("ВидЦены"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Дата"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Действует"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Клиент"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Комиссия"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Контрагент"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Номер"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Организация"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Пояснение"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Склад"); //@NON-NLS-1
	СтруктураДоговора.Вставить("УникальныйКлюч"); //@NON-NLS-1
	СтруктураДоговора.Вставить("Типовое"); //@NON-NLS-1
	СтруктураДоговора.Вставить("ЕстьУточнениеЦен"); //@NON-NLS-1
	СтруктураДоговора.Вставить("ИспользуютсяДоговорыКонтрагентов"); //@NON-NLS-1
	СтруктураДоговора.Вставить("ФормаОплаты"); //@NON-NLS-1
	СтруктураДоговора.Вставить("РасчетыПоДоговору"); //@NON-NLS-1
	СтруктураДоговора.Вставить("СуммаДолгаПоДоговору"); //@NON-NLS-1
	
	Возврат СтруктураДоговора;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Дополнительные реквизиты и сведения" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураДопРеквизита() Экспорт
	
	СтруктураДопРеквизита = СтандартнаяСтруктураОбъекта();
	СтруктураДопРеквизита.Вставить("PredefinedDataName");
	СтруктураДопРеквизита.Вставить("ПометкаУдаления"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("Наименование"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ИмяПредопределенныхДанных"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("Виден"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ВладелецДополнительныхЗначений"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ДополнительныеЗначенияИспользуются"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ДополнительныеЗначенияСВесом"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("Доступен"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("Заголовок"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ЗаголовокФормыВыбораЗначения"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ЗаголовокФормыЗначения"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ЗаполнятьОбязательно"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("МногострочноеПолеВвода"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("НаборСвойств"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ТипЗначения"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ФорматСвойства"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ЭтоДополнительноеСведение"); //@NON-NLS-1
	СтруктураДопРеквизита.Вставить("ЗависимостиДополнительныхРеквизитов"); //@NON-NLS-1
	
	Возврат СтруктураДопРеквизита;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Единицы измерения" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураЕдиницыИзмерения() Экспорт
	
	СтруктураЕдиницыИзмерения = СтандартнаяСтруктураОбъекта();
	СтруктураЕдиницыИзмерения.Вставить("Code");
	СтруктураЕдиницыИзмерения.Вставить("PredefinedDataName");
	СтруктураЕдиницыИзмерения.Вставить("МеждународноеСокращение"); //@NON-NLS-1
	СтруктураЕдиницыИзмерения.Вставить("НаименованиеПолное"); //@NON-NLS-1
	
	Возврат СтруктураЕдиницыИзмерения;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Значение свойств объекта"
//  и "Значение свойств объекта (Иерархия)" для обмена.
//
// Параметры:
//  Иерархия - Булево - признак иерархичности;
//  ЭтоГруппа - Булево - признак группы.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураЗначенияСвойствОбъекта(Иерархия, ЭтоГруппа) Экспорт
	
	СтруктураЗСО = СтандартнаяСтруктураОбъекта();
	СтруктураЗСО.Вставить("PredefinedDataName");
	СтруктураЗСО.Вставить("Owner");
	СтруктураЗСО.Вставить("Parent");
	
	Если Не Иерархия Тогда
		СтруктураЗСО.Вставить("IsFolder");
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		СтруктураЗСО.Вставить("Вес"); //@NON-NLS-1
	КонецЕсли;
	
	Возврат СтруктураЗСО;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Контактные лица клиента" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураКонтактногоЛица() Экспорт
	
	СтруктураКонтактногоЛица = СтандартнаяСтруктураОбъекта();
	СтруктураКонтактногоЛица.Вставить("Owner", "");
	СтруктураКонтактногоЛица.Вставить("ERPКод", ""); //@NON-NLS-1
	СтруктураКонтактногоЛица.Вставить("ДатаРождения", Дата("00010101")); //@NON-NLS-1
	СтруктураКонтактногоЛица.Вставить("ДолжностьПоВизитке", ""); //@NON-NLS-1
	СтруктураКонтактногоЛица.Вставить("Комментарий", ""); //@NON-NLS-1
	СтруктураКонтактногоЛица.Вставить("КонтактнаяИнформация"); //@NON-NLS-1
	
	Возврат СтруктураКонтактногоЛица;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Контрагента" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураКонтрагента() Экспорт
	
	СтруктураКонтрагента = СтандартнаяСтруктураОбъекта();
	СтруктураКонтрагента.Вставить("ERPКод"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("ИНН"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("ИННКПП"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("Клиент"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("КПП"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("НаименованиеПолное"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("ПредставлениеКонтрагента"); //@NON-NLS-1
	СтруктураКонтрагента.Вставить("ЮрФизЛицо"); //@NON-NLS-1
	
	Возврат СтруктураКонтрагента;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Номенклатура" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураНоменклатуры() Экспорт
	
	СтруктураНоменклатуры = СтандартнаяСтруктураОбъекта();
	СтруктураНоменклатуры.Вставить("IsFolder");
	СтруктураНоменклатуры.Вставить("Parent");
	СтруктураНоменклатуры.Вставить("Code");
	
	СтруктураНоменклатуры.Вставить("ERPКодНоменклатура"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ERPКодХарактеристика"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("Артикул"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ВидНоменклатуры"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ЕдиницаЗаказа"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ЕдиницаИзмерения"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("НаименованиеПолное"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("СтавкаНДСЧислом"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("СтрокаПоиска"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("Услуга"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ЦеноваяГруппа"); //@NON-NLS-1
	
	СтруктураНоменклатуры.Вставить("ВесЕдиницаИзмерения"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ВесЗнаменатель"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ВесИспользовать"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ВесМожноУказыватьВДокументах"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ВесЧислитель"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("Описание"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ФайлКартинки"); //@NON-NLS-1
	
	СтруктураНоменклатуры.Вставить("Штрихкод"); //@NON-NLS-1
	СтруктураНоменклатуры.Вставить("ДополнительныеРеквизиты"); //@NON-NLS-1
	
	Возврат СтруктураНоменклатуры;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Номенклатура" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураНоменклатурыПрисоединенныеФайлы() Экспорт
	
	СтруктураНоменклатурыПрисоединенныеФайлы = СтандартнаяСтруктураОбъекта();
	СтруктураНоменклатурыПрисоединенныеФайлы.Вставить("ВладелецФайла"); //@NON-NLS-1
	СтруктураНоменклатурыПрисоединенныеФайлы.Вставить("ДатаСоздания"); //@NON-NLS-1
	СтруктураНоменклатурыПрисоединенныеФайлы.Вставить("Описание"); //@NON-NLS-1
	СтруктураНоменклатурыПрисоединенныеФайлы.Вставить("Размер"); //@NON-NLS-1
	СтруктураНоменклатурыПрисоединенныеФайлы.Вставить("Расширение"); //@NON-NLS-1
	СтруктураНоменклатурыПрисоединенныеФайлы.Вставить("ХранимыйФайл"); //@NON-NLS-1
	
	Возврат СтруктураНоменклатурыПрисоединенныеФайлы;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Клиенты" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураПартнера() Экспорт
	
	СтруктураПартнера = СтандартнаяСтруктураОбъекта();
	СтруктураПартнера.Вставить("Parent");
	СтруктураПартнера.Вставить("Code");
	СтруктураПартнера.Вставить("ERPКод"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ВидЦены"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ВремяДоставкиПо"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ВремяДоставкиС"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ДополнительнаяИнформацияПоДоставке"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ОтгрузкаЗапрещена"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ПричинаДобавленияВСтопЛист"); //@NON-NLS-1
	СтруктураПартнера.Вставить("Самовывоз"); //@NON-NLS-1
	СтруктураПартнера.Вставить("Склад"); //@NON-NLS-1
	СтруктураПартнера.Вставить("СтрокаПоиска"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ФормаОплаты"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ДополнительнаяИнформация"); //@NON-NLS-1
	СтруктураПартнера.Вставить("КонтактнаяИнформация"); //@NON-NLS-1
	СтруктураПартнера.Вставить("ДополнительныеРеквизиты"); //@NON-NLS-1
	
	Возврат СтруктураПартнера;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Организации" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураОрганизации() Экспорт
	
	СтруктураОрганизации = СтандартнаяСтруктураОбъекта();
	СтруктураОрганизации.Вставить("ERPКод"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("Префикс"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("СистемаНалогообложения"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("Руководитель"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("ГлавныйБухгалтер"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("ИНН"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("КПП"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("СвидетельствоСерияНомер"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("СвидетельствоДатаВыдачи"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("НаименованиеПолное"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("ЮрФизЛицо"); //@NON-NLS-1
	
	СтруктураОрганизации.Вставить("НомерСчета"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("Банк"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("БИК"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("ГородБанка"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("КоррСчет"); //@NON-NLS-1
	
	СтруктураОрганизации.Вставить("КонтактнаяИнформация"); //@NON-NLS-1
	СтруктураОрганизации.Вставить("ДополнительныеРеквизиты"); //@NON-NLS-1
	
	Возврат СтруктураОрганизации;
	
КонецФункции

// Возвращает структуру ответного сообщения для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру ответов.
//
Функция СтруктураОтвета() Экспорт
	
	КомпонентыОбмена = Новый Структура;
	КомпонентыОбмена.Вставить("КлючСообщенияЖурналаРегистрации",
		ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными());
	
	КомпонентыОбмена.Вставить("УзелКорреспондента", Неопределено);
	КомпонентыОбмена.Вставить("Комментарий", "");
	КомпонентыОбмена.Вставить("ДействиеПриОбмене", Неопределено);
	КомпонентыОбмена.Вставить("РезультатВыполненияОбмена", Неопределено);
	КомпонентыОбмена.Вставить("ДатаНачала", Дата("00010101000000"));
	КомпонентыОбмена.Вставить("ДатаОкончания", Дата("00010101000000"));
	
	КомпонентыОбмена.Вставить("ResultMessage", "");
	КомпонентыОбмена.Вставить("Success", Истина);
	КомпонентыОбмена.Вставить("Continue", Ложь);
	
	Возврат КомпонентыОбмена;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Номенклатура" для обмена для групп.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураРодителяНоменклатуры() Экспорт
	
	СтруктураРодителяНоменклатуры = СтандартнаяСтруктураОбъекта();
	СтруктураРодителяНоменклатуры.Вставить("IsFolder");
	СтруктураРодителяНоменклатуры.Вставить("Parent");
	СтруктураРодителяНоменклатуры.Вставить("Code");
	
	СтруктураРодителяНоменклатуры.Вставить("ERPКодНоменклатура"); //@NON-NLS-1
	СтруктураРодителяНоменклатуры.Вставить("СтрокаПоиска"); //@NON-NLS-1
	
	Возврат СтруктураРодителяНоменклатуры;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Склады" для обмена.
//
// Параметры:
//  ЭтоГруппа - Булево - признак создания структуры для группы.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураСклада(Знач ЭтоГруппа) Экспорт
	
	СтруктураСклада = СтандартнаяСтруктураОбъекта();
	СтруктураСклада.Вставить("IsFolder");
	СтруктураСклада.Вставить("Parent");
	СтруктураСклада.Вставить("ERPКод"); //@NON-NLS-1
	
	Если Не ЭтоГруппа Тогда
		СтруктураСклада.Вставить("ГруппаСкладов"); //@NON-NLS-1
		СтруктураСклада.Вставить("КонтактнаяИнформация"); //@NON-NLS-1
	КонецЕсли;
	
	Возврат СтруктураСклада;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Страны мира" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураСтраны() Экспорт
	
	СтруктураСтраны = СтандартнаяСтруктураОбъекта();
	СтруктураСтраны.Вставить("Code");
	СтруктураСтраны.Вставить("PredefinedDataName");
	СтруктураСтраны.Вставить("НаименованиеПолное"); //@NON-NLS-1
	СтруктураСтраны.Вставить("КодАльфа2"); //@NON-NLS-1
	СтруктураСтраны.Вставить("КодАльфа3"); //@NON-NLS-1
	
	Возврат СтруктураСтраны;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Статус задания торговому представителю" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураСтатусаЗаданияТорговомуПредставителю() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ref");
	Структура.Вставить("Статус"); //@NON-NLS-1
	Структура.Вставить("ПечатнаяФормаЗаказа"); //@NON-NLS-1
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Статус заказа клиенту" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураСтатусаЗаказаКлиента() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ref", "");
	Структура.Вставить("Статус", ""); //@NON-NLS-1
	Структура.Вставить("Проведен", Ложь); //@NON-NLS-1
	Структура.Вставить("ПометкаУдаления", Ложь); //@NON-NLS-1
	Структура.Вставить("Состояние", ""); //@NON-NLS-1
	Структура.Вставить("Просрочен", Ложь); //@NON-NLS-1
	Структура.Вставить("ДатаОтгрузки", Дата("00010101000000")); //@NON-NLS-1
	Структура.Вставить("Изменен", Ложь); //@NON-NLS-1
	Структура.Вставить("СуммаДолгаПоДокументуУП", 0); //@NON-NLS-1
	Структура.Вставить("ПечатнаяФормаДокумента", //@NON-NLS-1
		Новый ХранилищеЗначения(Новый ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	Структура.Вставить("СуммаДокументаУП", 0); //@NON-NLS-1
	Структура.Вставить("СуммаНДСДокументаУП", 0); //@NON-NLS-1
	Структура.Вставить("ДатаСледующегоПлатежа", Дата("00010101000000")); //@NON-NLS-1
	Структура.Вставить("ДатаПредоплатыПоДокументу", Дата("00010101000000")); //@NON-NLS-1
	Структура.Вставить("СуммаПредоплатыПоДокументу", 0); //@NON-NLS-1
	
	//+ УП 2.2.
	Структура.Вставить("ДополнительныеРеквизиты"); //@NON-NLS-1
	//- УП 2.2.
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Статуса заявки на возврат" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураСтатусаЗаявкиНаВозврат() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ref", "");
	Структура.Вставить("Статус", ""); //@NON-NLS-1
	Структура.Вставить("Проведен", Ложь); //@NON-NLS-1
	Структура.Вставить("ПометкаУдаления", Ложь); //@NON-NLS-1
	Структура.Вставить("Состояние", ""); //@NON-NLS-1
	Структура.Вставить("ДатаПоступления", Дата("00010101000000")); //@NON-NLS-1
	Структура.Вставить("ДатаОтгрузки", Дата("00010101000000")); //@NON-NLS-1
	Структура.Вставить("Изменен", Ложь); //@NON-NLS-1
	Структура.Вставить("СуммаДокументаУП", 0); //@NON-NLS-1
	Структура.Вставить("СуммаНДСДокументаУП", 0); //@NON-NLS-1
	Структура.Вставить("СуммаДолгаПоДокументуУП", 0); //@NON-NLS-1
	Структура.Вставить("ПечатнаяФормаДокумента", //@NON-NLS-1
		Новый ХранилищеЗначения(Новый ТабличныйДокумент, Новый СжатиеДанных(9)));
		
	//+ УП 2.2.
	Структура.Вставить("ДополнительныеРеквизиты"); //@NON-NLS-1
	//- УП 2.2.
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Упаковки" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураУпаковки() Экспорт
	
	СтруктураУпаковки = СтандартнаяСтруктураОбъекта();
	СтруктураУпаковки.Вставить("Owner");
	СтруктураУпаковки.Вставить("Parent");
	СтруктураУпаковки.Вставить("ERPКод"); //@NON-NLS-1
	СтруктураУпаковки.Вставить("ЕдиницаИзмерения"); //@NON-NLS-1
	СтруктураУпаковки.Вставить("Коэффициент"); //@NON-NLS-1
	СтруктураУпаковки.Вставить("НаименованиеПолное"); //@NON-NLS-1
	СтруктураУпаковки.Вставить("Вес"); //@NON-NLS-1
	СтруктураУпаковки.Вставить("ВесЕдиницаИзмерения"); //@NON-NLS-1
	СтруктураУпаковки.Вставить("Штрихкод"); //@NON-NLS-1
		
	Возврат СтруктураУпаковки;
	
КонецФункции

// Возвращает структуру объекта мобильного приложения "Ценовые группы" для обмена.
//
// Возвращаемое значение:
//  Структура - содержит структуру реквизитов.
//
Функция СтруктураЦеновойГруппы() Экспорт
	
	СтруктураЦеновойГруппы = СтандартнаяСтруктураОбъекта();
	СтруктураЦеновойГруппы.Вставить("Описание"); //@NON-NLS-1
	
	Возврат СтруктураЦеновойГруппы;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Возвращает описание типов дополнительных реквизитов, участвующих в обмене.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типов значения.
//
Функция ОписаниеТиповЗначенияДопРеквизита() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	Массив.Добавить(Тип("Дата"));
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("Число"));
	Массив.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	Массив.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"));
	
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции

// Возвращает текст запроса контактных лиц клиента.
//
// Возвращаемое значение:
//  Строка - текст запроса контактных лиц.
//
Функция ТекстЗапросаКонтактныхЛицКлиента() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛицаПартнеров.ПометкаУдаления КАК DeletionMark,
	|	КонтактныеЛицаПартнеров.Наименование КАК Description,
	|	&КодВладельца КАК Owner,
	|	"""" КАК ERPКод,
	|	КонтактныеЛицаПартнеров.Комментарий,
	|	КонтактныеЛицаПартнеров.ДолжностьПоВизитке,
	|	КонтактныеЛицаПартнеров.ДатаРождения
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса поиска договора.
//
// Возвращаемое значение:
//  Строка - текст запроса поиска договора.
//
Функция ТекстЗапросаПоискаДоговора() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Приоритет,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ДоговорыКонтрагентов.Согласован
	|	И ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Дата = &Дата
	|	И ДоговорыКонтрагентов.Партнер = &Партнер
	|	И ДоговорыКонтрагентов.Партнер.ОбслуживаетсяТорговымиПредставителями
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ДоговорыКонтрагентов.Согласован
	|	И ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Дата = &Дата
	|	И ДоговорыКонтрагентов.Партнер = &Партнер
	|	И ДоговорыКонтрагентов.Партнер.ОбслуживаетсяТорговымиПредставителями
	|	И НЕ ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ДоговорыКонтрагентов.Согласован
	|	И ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Партнер = &Партнер
	|	И НЕ ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ДоговорыКонтрагентов.Согласован
	|	И ДоговорыКонтрагентов.Партнер = &Партнер
	|	И НЕ ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И ДоговорыКонтрагентов.Согласован
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ ДоговорыКонтрагентов.Согласован
	|	И ДоговорыКонтрагентов.Номер = &Номер
	|	И ДоговорыКонтрагентов.Дата = &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса поиска индивидуальных соглашений.
//
// Возвращаемое значение:
//  Строка - текст запроса поиска индивидуального соглашения.
//
Функция ТекстЗапросаПоискаИндивидуальныхСоглашений() Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Приоритет,
	|	СоглашенияСКлиентами.Ссылка КАК Соглашение,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Партнер = &Партнер
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|	И СоглашенияСКлиентами.Контрагент = &Контрагент
	|	И СоглашенияСКлиентами.Склад = &Склад
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Партнер = &Партнер
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|	И СоглашенияСКлиентами.Контрагент = &Контрагент
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Партнер = &Партнер
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|	И НЕ СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Партнер = &Партнер
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Организация = &Организация
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|		КОНЕЦ
	|	И НЕ СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Партнер = &Партнер
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Организация = &Организация
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|		КОНЕЦ
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса поиска типовых соглашений.
//
// Возвращаемое значение:
//  Строка - текст запроса поиска типовых соглашений.
//
Функция ТекстЗапросаПоискаТиповыхСоглашений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК Приоритет,
	|	СоглашенияСКлиентами.Ссылка КАК Соглашение,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК СегментыПартнеров
	|		ПО (ВЫБОР
	|				КОГДА НЕ &ИспользуютсяСегментыПартнеров
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ СоглашенияСКлиентами.СегментПартнеров = СегментыПартнеров.Сегмент
	|								И &Партнер = СегментыПартнеров.Партнер
	|					КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|	И СоглашенияСКлиентами.Склад = &Склад
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК СегментыПартнеров
	|		ПО (ВЫБОР
	|				КОГДА НЕ &ИспользуютсяСегментыПартнеров
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ СоглашенияСКлиентами.СегментПартнеров = СегментыПартнеров.Сегмент
	|								И &Партнер = СегментыПартнеров.Партнер
	|					КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Склад = &Склад
	|		КОНЕЦ
	|	И НЕ СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК СегментыПартнеров
	|		ПО (ВЫБОР
	|				КОГДА НЕ &ИспользуютсяСегментыПартнеров
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ СоглашенияСКлиентами.СегментПартнеров = СегментыПартнеров.Сегмент
	|								И &Партнер = СегментыПартнеров.Партнер
	|					КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Склад = &Склад
	|		КОНЕЦ
	|	И НЕ СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК СегментыПартнеров
	|		ПО (ВЫБОР
	|				КОГДА НЕ &ИспользуютсяСегментыПартнеров
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ СоглашенияСКлиентами.СегментПартнеров = СегментыПартнеров.Сегмент
	|								И &Партнер = СегментыПартнеров.Партнер
	|					КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СоглашенияСКлиентами.Типовое
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Организация = &Организация
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Склад = &Склад
	|		КОНЕЦ
	|	И НЕ СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	СоглашенияСКлиентами.Ссылка,
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК СегментыПартнеров
	|		ПО (ВЫБОР
	|				КОГДА &ЭтоНовыйПартнер
	|					ТОГДА ИСТИНА
	|				КОГДА НЕ &ИспользуютсяСегментыПартнеров
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ СоглашенияСКлиентами.СегментПартнеров = СегментыПартнеров.Сегмент
	|								И &Партнер = СегментыПартнеров.Партнер
	|					КОНЕЦ
	|			КОНЕЦ)
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СоглашенияСКлиентами.Типовое
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Организация = &Организация
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.ВидЦен = &ВидЦен
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентами.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентами.Склад = &Склад
	|		КОНЕЦ
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса для выборки реквизитов объектов.
//
// Параметры:
//  Индивидуальный - Булево - признак типа прайса.
//
// Возвращаемое значение:
//  Строка - текст запроса реквизитов прайса.
//
Функция ТекстЗапросаРеквизитовОбъектовПрайса(Индивидуальный) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Параметр1,
	|	ТаблицаПрайса.ВидЦены КАК ВидЦены,
	|	ТаблицаПрайса.Цена КАК Цена,
	|	ТаблицаПрайса.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаПрайса.РодительНоменклатуры КАК РодительНоменклатуры,
	|	ТаблицаПрайса.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаПрайса.СтрокаПоиска КАК СтрокаПоиска,
	|	ТаблицаПрайса.НоменклатураСсылка КАК НоменклатураСсылка,
	|	ТаблицаПрайса.УпаковкаСсылка КАК УпаковкаСсылка,
	|	ТаблицаПрайса.ВладелецУпаковкиСсылка КАК ВладелецУпаковкиСсылка,
	|	ТаблицаПрайса.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
	|	ТаблицаПрайса.ХарактеристикаСсылка КАК ХарактеристикаСсылка,
	|	ТаблицаПрайса.ВидЦеныСсылка КАК ВидЦеныСсылка,
	|	ТаблицаПрайса.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	ТаблицаПрайса.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ТаблицаПрайса.ИдНоменклатуры КАК ИдНоменклатуры,
	|	ТаблицаПрайса.ИдХарактеристики КАК ИдХарактеристики,
	|	ТаблицаПрайса.ИдУпаковки КАК ИдУпаковки,
	|	ТаблицаПрайса.Номенклатура КАК Номенклатура,
	|	ТаблицаПрайса.Упаковка КАК Упаковка,
	|	ТаблицаПрайса.ИспользоватьВес КАК ИспользоватьВес,
	|	ТаблицаПрайса.ИспользоватьКартинки КАК ИспользоватьКартинки,
	|	ТаблицаПрайса.ФайлКартинкиСсылка КАК ФайлКартинкиСсылка,
	|	ТаблицаПрайса.ТребуетсяОтправкаКартинки КАК ТребуетсяОтправкаКартинки,
	|	ТаблицаПрайса.ТребуетсяОтправкаТовара КАК ТребуетсяОтправкаТовара
	|ПОМЕСТИТЬ ВременныйПрайс
	|ИЗ
	|	&ТаблицаПрайса КАК ТаблицаПрайса
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	&Параметр2,
	|	ВидЦены,
	|	Цена,
	|	ВидНоменклатуры,
	|	РодительНоменклатуры,
	|	ЦеноваяГруппа,
	|	СтрокаПоиска,
	|	НоменклатураСсылка,
	|	УпаковкаСсылка,
	|	ВладелецУпаковкиСсылка,
	|	ЕдиницаИзмеренияСсылка,
	|	ХарактеристикаСсылка,
	|	ВидЦеныСсылка,
	|	ИспользоватьУпаковки,
	|	ХарактеристикиИспользуются,
	|	ИдНоменклатуры,
	|	ИдХарактеристики,
	|	ИдУпаковки,
	|	Номенклатура,
	|	Упаковка,
	|	ИспользоватьВес,
	|	ИспользоватьКартинки,
	|	ФайлКартинкиСсылка,
	|	ТребуетсяОтправкаКартинки,
	|	ТребуетсяОтправкаТовара
	|;";
	
	Если Индивидуальный Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр1", "ТаблицаПрайса.ДоговорКлиента КАК ДоговорКлиента");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр2", "ДоговорКлиента");
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр2,", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&Параметр1,
	|	ТаблицаПрайса.ВидЦены,
	|	ТаблицаПрайса.Цена,
	|	ТаблицаПрайса.ВидНоменклатуры,
	|	ТаблицаПрайса.РодительНоменклатуры,
	|	ТаблицаПрайса.ЦеноваяГруппа,
	|	ТаблицаПрайса.СтрокаПоиска,
	|	ТаблицаПрайса.НоменклатураСсылка,
	|	ТаблицаПрайса.УпаковкаСсылка,
	|	ТаблицаПрайса.ВладелецУпаковкиСсылка,
	|	ТаблицаПрайса.ЕдиницаИзмеренияСсылка КАК НоменклатураЕдиницаИзмерения,
	|	ТаблицаПрайса.ХарактеристикаСсылка,
	|	ТаблицаПрайса.ВидЦеныСсылка,
	|	ТаблицаПрайса.ИспользоватьУпаковки,
	|	ТаблицаПрайса.ХарактеристикиИспользуются,
	|	ТаблицаПрайса.ИдНоменклатуры,
	|	ТаблицаПрайса.ИдХарактеристики,
	|	ТаблицаПрайса.ИдУпаковки,
	|	ТаблицаПрайса.ИспользоватьВес,
	|	ТаблицаПрайса.ФайлКартинкиСсылка,
	|	ТаблицаПрайса.ТребуетсяОтправкаКартинки,
	|	ТаблицаПрайса.ТребуетсяОтправкаТовара, &Параметр2, &Параметр3, &Параметр4, &Параметр5, &Параметр6
	|ИЗ
	|	ВременныйПрайс КАК ТаблицаПрайса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТаблицаПрайса.НоменклатураСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК СправочникВидыЦен
	|		ПО (СправочникВидыЦен.Ссылка = ТаблицаПрайса.ВидЦеныСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (УпаковкиНоменклатуры.Ссылка = ТаблицаПрайса.УпаковкаСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ТаблицаПрайса.ХарактеристикиИспользуются)
	|			И (ХарактеристикиНоменклатуры.Ссылка = ТаблицаПрайса.ХарактеристикаСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы КАК СоответствиеУпаковки
	|		ПО (СоответствиеУпаковки.ИдНоменклатуры = ТаблицаПрайса.ИдНоменклатуры)
	|			И (СоответствиеУпаковки.ИдХарактеристики = ТаблицаПрайса.ИдХарактеристики)
	|			И (СоответствиеУпаковки.ИдУпаковки = ТаблицаПрайса.ИдУпаковки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы КАК СоответствиеНоменклатуры
	|		ПО (СоответствиеНоменклатуры.ИдНоменклатуры = ТаблицаПрайса.ИдНоменклатуры)
	|			И (СоответствиеНоменклатуры.ИдХарактеристики = ТаблицаПрайса.ИдХарактеристики)
	|			И (СоответствиеНоменклатуры.ИдУпаковки = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК ФайлыНоменклатуры
	|		ПО (ФайлыНоменклатуры.Ссылка = СправочникНоменклатура.ФайлКартинки)
	|			И (ТаблицаПрайса.ТребуетсяОтправкаКартинки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО ТаблицаПрайса.НоменклатураСсылка = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременныйПрайс";
	
	ТекстНоменклатура = "
	|	СправочникНоменклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	СправочникНоменклатура.Код КАК НоменклатураКод,
	|	СправочникНоменклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СправочникНоменклатура.Артикул КАК НоменклатураАртикул,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДССсылка,
	|	ВЫБОР
	|		КОГДА НЕ СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Услуга,
	|	СправочникНоменклатура.Родитель КАК НоменклатураРодитель,
	|	СправочникНоменклатура.Родитель.ПометкаУдаления КАК НоменклатураРодительПометкаУдаления,
	|	СправочникНоменклатура.Родитель.Родитель КАК НоменклатураРодительРодитель,
	|	СправочникНоменклатура.Родитель.Код КАК НоменклатураРодительКод,
	|	СправочникНоменклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	СправочникНоменклатура.ВидНоменклатуры.ПометкаУдаления КАК НоменклатураВидНоменклатурыПометкаУдаления,
	|	СправочникНоменклатура.ВидНоменклатуры.Родитель КАК НоменклатураВидНоменклатурыРодитель,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК НоменклатураЦеноваяГруппа,
	|	СправочникНоменклатура.ЦеноваяГруппа.ПометкаУдаления КАК НоменклатураЦеноваяГруппаПометкаУдаления,
	|	СправочникНоменклатура.ЦеноваяГруппа.Описание КАК НоменклатураЦеноваяГруппаОписание,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Код КАК НоменклатураЕдиницаИзмеренияКод,
	|	СправочникНоменклатура.ЕдиницаИзмерения.ПометкаУдаления КАК НоменклатураЕдиницаИзмеренияПометкаУдаления,
	|	СправочникНоменклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК НоменклатураЕдиницаИзмеренияМеждународноеСокращение,
	|	СправочникНоменклатура.ЕдиницаИзмерения.НаименованиеПолное КАК НоменклатураЕдиницаИзмеренияНаименованиеПолное,
	|	СправочникНоменклатура.ЕдиницаИзмерения.ИмяПредопределенныхДанных КАК НоменклатураЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	СправочникНоменклатура.ВесЕдиницаИзмерения КАК ВесУпаковкаСсылка,
	|	СправочникНоменклатура.ВесИспользовать,
	|	СправочникНоменклатура.ВесМожноУказыватьВДокументах,
	|	СправочникНоменклатура.ВесЗнаменатель,
	|	СправочникНоменклатура.ВесЧислитель,
	|	ВЫРАЗИТЬ(СправочникНоменклатура.Описание КАК СТРОКА(1000)) КАК НоменклатураОписание";
	
	ТекстФайлаКартинки = "
	|	ЕСТЬNULL(ФайлыНоменклатуры.Наименование, """") КАК ФайлКартинкиНаименование,
	|	ЕСТЬNULL(ФайлыНоменклатуры.ПометкаУдаления, ЛОЖЬ) КАК ФайлКартинкиПометкаУдаления,
	|	ЕСТЬNULL(ФайлыНоменклатуры.ВладелецФайла, """") КАК ФайлКартинкиВладелецФайла,
	|	ЕСТЬNULL(ФайлыНоменклатуры.ДатаСоздания, """") КАК ФайлКартинкиДатаСоздания,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ФайлыНоменклатуры.Описание, """") КАК СТРОКА(1000)) КАК ФайлКартинкиОписание,
	|	ЕСТЬNULL(ФайлыНоменклатуры.Размер, 0) КАК ФайлКартинкиРазмер,
	|	ЕСТЬNULL(ФайлыНоменклатуры.Расширение, """") КАК ФайлКартинкиРасширение";
	
	ТекстУпаковка = "
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ПометкаУдаления, ЛОЖЬ) КАК УпаковкиНоменклатурыПометкаУдаления,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Наименование, """") КАК УпаковкиНоменклатурыНаименование,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкиНоменклатурыКоэффициент,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкиНоменклатурыЕдиницаИзмерения,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Код, """") КАК УпаковкиНоменклатурыЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.ПометкаУдаления, ЛОЖЬ) КАК УпаковкиНоменклатурыЕдиницаИзмеренияПометкаУдаления,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.МеждународноеСокращение, """") КАК УпаковкиНоменклатурыЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.НаименованиеПолное, """") КАК УпаковкиНоменклатурыЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.ИмяПредопределенныхДанных, """") КАК УпаковкиНоменклатурыЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкиНоменклатурыВесЕдиницаИзмерения,
	|	ЕСТЬNULL(&ТекстЗапросаВесУпаковки, 0) КАК УпаковкиНоменклатурыВес,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.Код, """") КАК УпаковкиНоменклатурыВесЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.ПометкаУдаления, ЛОЖЬ) КАК УпаковкиНоменклатурыВесЕдиницаИзмеренияПометкаУдаления,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.МеждународноеСокращение, """") КАК УпаковкиНоменклатурыВесЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.НаименованиеПолное, """") КАК УпаковкиНоменклатурыВесЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.ИмяПредопределенныхДанных, """") КАК УпаковкиНоменклатурыВесЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Родитель, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкиНоменклатурыРодитель";
	
	ТекстПрочее = "
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.НаименованиеПолное, """") КАК ХарактеристикаНаименованиеПолное,
	|	СправочникВидыЦен.Наименование КАК ВидЦеныНаименование,
	|	СправочникВидыЦен.ПометкаУдаления КАК ВидЦеныПометкаУдаления,
	|	СправочникВидыЦен.ЦенаВключаетНДС КАК ВидЦеныЦенаВключаетНДС";
	
	ТекстПоискаСоответствия = "
	|	ВЫБОР
	|		КОГДА ТаблицаПрайса.ХарактеристикиИспользуются
	|			ТОГДА ЕСТЬNULL(СоответствиеНоменклатуры.ИдОбъектаМП, """")
	|		ИНАЧЕ ТаблицаПрайса.ИдНоменклатуры
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаПрайса.ХарактеристикиИспользуются
	|			ТОГДА ВЫБОР
	|					КОГДА СоответствиеНоменклатуры.ИдОбъектаМП ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписатьСоответствиеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаПрайса.ХарактеристикиИспользуются
	|			ТОГДА ЕСТЬNULL(СоответствиеУпаковки.ИдОбъектаМП, """")
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПрайса.ИспользоватьУпаковки
	|					ТОГДА ВЫБОР
	|							КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПрайса.ВладелецУпаковкиСсылка) = ТИП(Справочник.Номенклатура)
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ ТаблицаПрайса.УпаковкаСсылка = ТаблицаПрайса.ЕдиницаИзмеренияСсылка
	|											ТОГДА ТаблицаПрайса.ИдУпаковки
	|										ИНАЧЕ ЕСТЬNULL(СоответствиеУпаковки.ИдОбъектаМП, """")
	|									КОНЕЦ
	|							ИНАЧЕ ЕСТЬNULL(СоответствиеУпаковки.ИдОбъектаМП, """")
	|						КОНЕЦ
	|				ИНАЧЕ ЕСТЬNULL(СоответствиеУпаковки.ИдОбъектаМП, """")
	|			КОНЕЦ
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаПрайса.ХарактеристикиИспользуются
	|			ТОГДА ВЫБОР
	|					КОГДА СоответствиеУпаковки.ИдОбъектаМП ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПрайса.ИспользоватьУпаковки
	|					ТОГДА ВЫБОР
	|							КОГДА ТИПЗНАЧЕНИЯ(ТаблицаПрайса.ВладелецУпаковкиСсылка) = ТИП(Справочник.Номенклатура)
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ ТаблицаПрайса.УпаковкаСсылка = ТаблицаПрайса.ЕдиницаИзмеренияСсылка
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА СоответствиеУпаковки.ИдОбъектаМП ЕСТЬ NULL 
	|													ТОГДА ИСТИНА
	|												ИНАЧЕ ЛОЖЬ
	|											КОНЕЦ
	|									КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СоответствиеУпаковки.ИдОбъектаМП ЕСТЬ NULL 
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаписатьСоответствиеУпаковки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр1", ?(Индивидуальный, "ТаблицаПрайса.ДоговорКлиента", "ЛОЖЬ КАК Выгружен"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр2", ТекстНоменклатура);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр3", ТекстФайлаКартинки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр4", ТекстУпаковка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр5", ТекстПрочее);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Параметр6", ТекстПоискаСоответствия);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры",
			"СправочникНоменклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"УпаковкиНоменклатуры",
			"СправочникНоменклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Возвращает строковое представление URI пространства имен web -сервиса.
//
// Возвращаемое значение:
//  Строка - описание пространства имен.
//
Функция URIПространстваИмен() Экспорт
	
	Возврат "http://www.1c.ru/CustomerOrders/Exchange";
КонецФункции

// Возвращает сообщение обмена с информацией по началу обмена с мобильным приложения.
//
// Параметры:
//  ВерсияМобильногоПриложения - Строка - версия мобильного приложения;
//  ИдентификаторМобильногоУстройства - Строка - не изменяемый код данного мобильного приложения,
//    используется как код узла плана обмена.
//
// Возвращаемое значение:
//  ОбъектXDTO - Permit (http:// www.1c.ru/CustomerOrders/Exchange) - сформированное сообщение обмена.
//
Функция НачалоОбмена(ВерсияМобильногоПриложения, ИдентификаторМобильногоУстройства) Экспорт
	
	СтруктураОтвета = МобильноеПриложениеЗаказыКлиентов.СтруктураОтвета();
	СтруктураОтвета.Вставить("DeleteAppData", Ложь);
	
	Если Не Константы.ИспользоватьМобильноеПриложение1СЗаказыКлиентов.Получить() Тогда
		СтруктураОтвета.Success = Ложь;
		СтруктураОтвета.ResultMessage = НСтр("ru = 'Нет разрешения на синхронизацию данных с информационной базой.'");
		Возврат ОтветWS(СтруктураОтвета, "Permit");
	КонецЕсли;
	
	Если ВерсияМобильногоПриложения = "1" Тогда
		СтруктураОтвета.Success = Ложь;
		СтруктураОтвета.ResultMessage = НСтр("ru = 'Требуется обновление мобильного приложения.'");
		Возврат ОтветWS(СтруктураОтвета, "Permit");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГлавныйУзелОбмена = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ЭтотУзел();
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлавныйУзелОбмена, "Код")) Тогда
		
		ГлавныйУзелОбъект = ГлавныйУзелОбмена.ПолучитьОбъект();
		ГлавныйУзелОбъект.Код = "001";
		ГлавныйУзелОбъект.Наименование = НСтр("ru = 'Центральный'");
		ГлавныйУзелОбъект.Записать();
		
	КонецЕсли;
	
	УзелОбмена = МобильноеПриложениеЗаказыКлиентовПереопределяемый.НайтиУзелОбмена(СтруктураОтвета,
		ИдентификаторМобильногоУстройства, Пользователи.ТекущийПользователь());

	Если УзелОбмена = Неопределено Тогда
		Возврат ОтветWS(СтруктураОтвета, "Permit");
	Иначе
		СтруктураОтвета.Вставить("УзелКорреспондента", УзелОбмена);
		СтруктураОтвета.Вставить("КлючСообщенияЖурналаРегистрации",
			КлючСообщенияЖурналаРегистрации(УзелОбмена, СокрЛП(Перечисления.ДействияПриОбмене.ЗагрузкаДанных)));
		СтруктураОтвета.Вставить("ДействиеПриОбмене", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
		СтруктураОтвета.Вставить("ДатаНачала", ТекущаяДатаСеанса());
		СтруктураОтвета.Вставить("Комментарий", НСтр("ru = 'Начало обмена'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
	
		Если УзелОбмена.ПометкаУдаления Тогда
			СтруктураОтвета.Success = Ложь;
			СтруктураОтвета.ResultMessage = НСтр("ru = 'Соединение с устройством запрещено.
			|Данные были очищены.'");
			СтруктураОтвета.DeleteAppData = Истина;
			Возврат ОтветWS(СтруктураОтвета, "Permit");
		КонецЕсли;
		
		Если НЕ ВерсияМобильногоПриложения = "3.0.7" Тогда
			Попытка
				ЗаписьВерсииПриложения = 
				РегистрыСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы.СоздатьМенеджерЗаписи();
				ЗаписьВерсииПриложения.ИдНоменклатуры = ИдентификаторМобильногоУстройства;
				ЗаписьВерсииПриложения.ИдОбъектаМП = ИдентификаторМобильногоУстройства;
				ЗаписьВерсииПриложения.Записать(Истина);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен 1С:Заказы'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			ЗаписиВерсииПриложения = 
				РегистрыСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы.СоздатьНаборЗаписей();
			ЗаписиВерсииПриложения.Отбор["ИдНоменклатуры"].Использование = Истина;
			ЗаписиВерсииПриложения.Отбор["ИдНоменклатуры"].Значение = ИдентификаторМобильногоУстройства;
			
			ЗаписиВерсииПриложения.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветWS(СтруктураОтвета, "Permit");
КонецФункции

// Выполняет очистку записей истории обмена для узла.
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена.
// 
Процедура ОчиститьИсториюОбмена(УзелОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДляУдаления = Новый Структура("УзелИнформационнойБазы", УзелОбмена);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		РегистрМенеджер = "СостоянияОбменовДаннымиОбластейДанных";
		РегистрМенеджерУспешно = "СостоянияУспешныхОбменовДаннымиОбластейДанных";
	Иначе
		РегистрМенеджер = "СостоянияОбменовДанными";
		РегистрМенеджерУспешно = "СостоянияУспешныхОбменовДанными";
	КонецЕсли;
	
	ОбменДаннымиСлужебный.УдалитьНаборЗаписейВРегистреСведений(СтруктураДляУдаления, РегистрМенеджер);
	ОбменДаннымиСлужебный.УдалитьНаборЗаписейВРегистреСведений(СтруктураДляУдаления, РегистрМенеджерУспешно);
КонецПроцедуры

// Процедура, на основании анализа типа переданных данных,
// преобразовывает эти данные в тип "УдалениеОбъекта" для удаления этих данных.
//
// Параметры:
//  Данные - СправочникОбъект, ДокументОбъект, УдалениеОбъекта, Неопределено - объект, набор записей, который нужно преобразовать.
//
Процедура УдалениеДанных(Данные) Экспорт
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные
		Данные.Очистить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбменаСлужебные

Функция ЗначениеЭлементаОтбораИзПользовательскихНастроек(КомпоновщикНастроек, ИмяЭлемента)
	
	Если ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор,
		ИмяЭлемента);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(ИмяЭлемента,
			ИдентификаторПользовательскойНастройки);
		ЭлементПользовательскихНастроек = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскихНастроек <> Неопределено 
			И ЭлементПользовательскихНастроек.Использование Тогда
				Возврат ЭлементПользовательскихНастроек.ПравоеЗначение;
		Иначе
			Если ЭлементПользовательскихНастроек = Неопределено
				И ЭлементОтбора.Использование Тогда
					Возврат ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура УстановитьОтборыКомпоновщикаПоФункциональнымОпциям(КомпоновщикНастроек, СоответствияЭлементовОтбора)
	
	Для Каждого Соответствие Из СоответствияЭлементовОтбора Цикл
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если Не ПолучитьФункциональнуюОпцию(КлючИЗначение.Ключ) Тогда
				КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек,
					КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСДоставляемымиУведомлениям

Процедура НеИспользоватьИдентификаторы(Токены, ИмяУзла = "МобильноеПриложениеЗаказыКлиентов")
	
	Если Токены.Количество() > 0 Тогда
		ПланыОбменаМенеджер = ПланыОбмена[ИмяУзла];//ПланОбменаМенеджер - 
		Выборка = ПланыОбменаМенеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений <> Неопределено Тогда
				Идентификатор = Выборка.ИдентификаторПодписчикаДоставляемыхУведомлений.Получить();
				Если Идентификатор <> Неопределено И Токены.Найти(Идентификатор.ИдентификаторУстройства) Тогда
					Узел = Выборка.ПолучитьОбъект();
					Узел.ИдентификаторПодписчикаДоставляемыхУведомлений = Неопределено;
					Узел.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистрациейСобытий

Процедура ЗаписатьИсториюВыполненияОбмена(РезультатОбмена, ИмяОбъектаXDTO)
	
	Если ИмяОбъектаXDTO = "MessageExchange" Тогда
		Если РезультатОбмена.Success Тогда
			РезультатОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
			УровеньЖР = УровеньЖурналаРегистрации.Информация;
		Иначе
			РезультатОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
	Иначе
		РезультатОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	// Фиксируем событие в журнале регистрации.
	ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(
		РезультатОбмена.Комментарий, РезультатОбмена, УровеньЖР);
	
	// Фиксируем состояние обмена.
	ЗаписатьСостояниеОбмена(РезультатОбмена);
КонецПроцедуры

Процедура ЗаписатьСостояниеОбмена(РезультатОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		РегистрМенеджер = РегистрыСведений.СостоянияОбменовДаннымиОбластейДанных;
		РегистрМенеджерУспешно = РегистрыСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных;
	Иначе
		РегистрМенеджер = РегистрыСведений.СостоянияОбменовДанными;
		РегистрМенеджерУспешно = РегистрыСведений.СостоянияУспешныхОбменовДанными;
	КонецЕсли;
	
	ЗаписьСостояния = РегистрМенеджер.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьСостояния, РезультатОбмена);
	ЗаписьСостояния.УзелИнформационнойБазы = РезультатОбмена.УзелКорреспондента;
	ЗаписьСостояния.ДатаОкончания = ТекущаяДатаСеанса();
	ЗаписьСостояния.Записать();
	
	Если ЗначениеЗаполнено(ЗаписьСостояния.ДействиеПриОбмене)
		И (ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено) Тогда
		
		ЗаписьУспешногоСостояния = РегистрМенеджерУспешно.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьУспешногоСостояния, ЗаписьСостояния);
		ЗаписьУспешногоСостояния.Записать();
	КонецЕсли;
КонецПроцедуры

Функция КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене)
	
	ИмяПланаОбмена = "";
	ИмяУстройства = "";
	Если ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		ИмяПланаОбмена = СокрЛП(УзелИнформационнойБазы.Метаданные());
		ИмяУстройства = СокрЛП(УзелИнформационнойБазы);
	КонецЕсли;
	
	КлючСообщения = НСтр("ru = 'Обмен данными. [ИмяПланаОбмена]. Устройство: [ИмяУстройства]. [ДействиеПриОбмене]'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяУстройства]", ИмяУстройства);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
КонецФункции

#КонецОбласти

Функция ДанныеДляПродолжения(Данные)
	
	АдресХранилища = ПолучитьИмяВременногоФайла("xml");
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(АдресХранилища);
		ЗаписатьXML(ЗаписьXML, Данные);
		ЗаписьXML.Закрыть();
	Исключение
		АдресХранилища = "";
	КонецПопытки;
	Возврат АдресХранилища;
КонецФункции

Процедура ЗаписатьДоговорСоглашение(Данные, Сообщение)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "CatalogObject.ДоговорыКлиентов");
	
	МобильныйДоговор = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ МобильныйДоговор.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
			МобильныйДоговор[СокрЛП(Свойство)] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьДоговорСоглашение(МобильныйДоговор, Сообщение);
КонецПроцедуры

// Параметры:
// - Данные - 
// - УзелОбмена - 
// - Сообщение - 
// - НастройкиЗадания - 
//
Процедура ЗаписатьЗаданиеТорговомуПредставителю(Данные, УзелОбмена, Сообщение, НастройкиЗадания)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "DocumentObject.ЗаданиеТорговомуПредставителю");
	ТипОбъектаТовары = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.Товары");
	ТипОбъектаЗадачи = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.Задачи");
	МобильноеЗадание = ФабрикаXDTO.Создать(ТипОбъекта);
	
	// Данные шапки документа
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ СокрЛП(Свойство) = "Товары" И НЕ СокрЛП(Свойство) = "Задачи" //@NON-NLS-1 @NON-NLS-2
			И НЕ СокрЛП(Свойство) = "ДолгиПоЗаказам" И НЕ СокрЛП(Свойство) = "РасшифровкаДебиторскойЗадолженности" Тогда //@NON-NLS-1 @NON-NLS-2
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ СокрЛП(Свойство) = "Товары" И НЕ СокрЛП(Свойство) = "Задачи" И НЕ СокрЛП(Свойство) = "ВидЦены" //@NON-NLS-1 @NON-NLS-2
		И НЕ СокрЛП(Свойство) = "ДолгиПоЗаказам" И НЕ СокрЛП(Свойство) = "РасшифровкаДебиторскойЗадолженности" Тогда //@NON-NLS-1 @NON-NLS-2
			Если НЕ МобильноеЗадание.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильноеЗадание[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Данные ТЧ "Товары"
	ДанныеТовары = Данные["Товары"]; //@NON-NLS-1
	СвойстваДанныеТовары = ДанныеТовары.Свойства(); // КоллекцияСвойствXDTO
	Если НЕ СвойстваДанныеТовары.Получить("Row") = Неопределено Тогда //@NON-NLS-1
		Если ТипЗнч(Данные["Товары"].Row) = Тип("СписокXDTO") Тогда //@NON-NLS-1
			Для Каждого ЭлементСписка Из Данные["Товары"].Row Цикл //@NON-NLS-1
				МобильноеЗаданиеТовары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
				ЗаполнитьЗначенияСвойств(МобильноеЗаданиеТовары, ЭлементСписка);
				ОбъектТабличнаяЧасть = МобильноеЗадание.Товары;//СписокXDTO -  
				ОбъектТабличнаяЧасть.Добавить(МобильноеЗаданиеТовары);
			КонецЦикла;
		Иначе
			МобильноеЗаданиеТовары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
			ЗаполнитьЗначенияСвойств(МобильноеЗаданиеТовары, Данные["Товары"].Row); //@NON-NLS-1
			ОбъектТабличнаяЧасть = МобильноеЗадание.Товары;//СписокXDTO -  
			ОбъектТабличнаяЧасть.Добавить(МобильноеЗаданиеТовары);
		КонецЕсли;
	КонецЕсли;
	
	// Данные ТЧ "Задачи"
	ДанныеЗадачи = Данные["Задачи"]; //@NON-NLS-1
	СвойстваДанныеЗадачи = ДанныеЗадачи.Свойства(); // КоллекцияСвойствXDTO
	Если НЕ СвойстваДанныеЗадачи.Получить("Row") = Неопределено Тогда //@NON-NLS-1
		Если ТипЗнч(Данные["Задачи"].Row) = Тип("СписокXDTO") Тогда //@NON-NLS-1
			Для Каждого ЭлементСписка Из Данные["Задачи"].Row Цикл //@NON-NLS-1
				МобильноеЗаданиеЗадачи = ФабрикаXDTO.Создать(ТипОбъектаЗадачи);
				МобильноеЗаданиеЗадачи.Выполнена = ЭлементСписка["Выполнена"]; //@NON-NLS-1
				Если НЕ ТипЗнч(ЭлементСписка.ОписаниеЗадачи) = Тип("ОбъектXDTO") Тогда
					МобильноеЗаданиеЗадачи.ОписаниеЗадачи = ЭлементСписка["ОписаниеЗадачи"]; //@NON-NLS-1
				КонецЕсли;
				Если НЕ ТипЗнч(ЭлементСписка.ОписаниеРезультата) = Тип("ОбъектXDTO") Тогда
					МобильноеЗаданиеЗадачи.ОписаниеРезультата = ЭлементСписка["ОписаниеРезультата"]; //@NON-NLS-1
				КонецЕсли;
				ОбъектТабличнаяЧасть = МобильноеЗадание.Задачи;//СписокXDTO -  
				ОбъектТабличнаяЧасть.Добавить(МобильноеЗаданиеЗадачи);
			КонецЦикла;
		Иначе
			МобильноеЗаданиеЗадачи = ФабрикаXDTO.Создать(ТипОбъектаЗадачи);
			МобильноеЗаданиеЗадачи.Выполнена = Данные["Задачи"].Row["Выполнена"]; //@NON-NLS-1 @NON-NLS-2
			Если НЕ ТипЗнч(Данные["Задачи"].Row.ОписаниеЗадачи) = Тип("ОбъектXDTO") Тогда //@NON-NLS-1
				МобильноеЗаданиеЗадачи.ОписаниеЗадачи = Данные["Задачи"].Row["ОписаниеЗадачи"]; //@NON-NLS-1 @NON-NLS-2
			КонецЕсли;
			Если НЕ ТипЗнч(Данные["Задачи"].Row.ОписаниеРезультата) = Тип("ОбъектXDTO") Тогда //@NON-NLS-1
				МобильноеЗаданиеЗадачи.ОписаниеРезультата = Данные["Задачи"].Row["ОписаниеРезультата"]; //@NON-NLS-1 @NON-NLS-2
			КонецЕсли;
			ОбъектТабличнаяЧасть = МобильноеЗадание.Задачи;//СписокXDTO -  
			ОбъектТабличнаяЧасть.Добавить(МобильноеЗаданиеЗадачи);
		КонецЕсли;
	КонецЕсли;
		
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьЗаданиеТорговомуПредставителю(
		МобильноеЗадание, УзелОбмена, Сообщение, НастройкиЗадания);
КонецПроцедуры

Процедура ЗаписатьЗаказКлиента(Данные, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "DocumentObject.ЗаказКлиента");
	ТипОбъектаТовары = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаказКлиента.Товары");
	ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаказКлиента.ДополнительныеРеквизиты");
	
	МобильныйЗаказ = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "Товары" //@NON-NLS-1
				И НЕ СокрЛП(Свойство) = "ДополнительныеРеквизиты" Тогда //@NON-NLS-1
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ ЭтоТабличнаяЧасть Тогда
			Если НЕ МобильныйЗаказ.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильныйЗаказ[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МобильныйЗаказ.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
					Для Каждого ЭлементСписка Из Значение.Row Цикл
						Если СокрЛП(Свойство) = "Товары" Тогда //@NON-NLS-1
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
						Иначе
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
						КонецЕсли;
						ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
						ОбъектТабличнаяЧасть = МобильныйЗаказ[СокрЛП(Свойство)];//СписокXDTO -  
						ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
						
					КонецЦикла;
				Иначе
					Если СокрЛП(Свойство) = "Товары" Тогда //@NON-NLS-1
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
					Иначе
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					КонецЕсли;
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
					ОбъектТабличнаяЧасть = МобильныйЗаказ[СокрЛП(Свойство)];//СписокXDTO -  
					ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьЗаказКлиента(МобильныйЗаказ, Сообщение);

КонецПроцедуры

Процедура ЗаписатьЗаявкуНаВозвратТоваровОтКлиента(Данные, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "DocumentObject.ЗаявкаНаВозвратТоваровОтКлиента");
	ТипОбъектаТовары = ФабрикаXDTO.Тип(URIИмен, "DocumentTabularSectionRow.ЗаявкаНаВозвратТоваровОтКлиента.Товары");
	ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIИмен,
		"DocumentTabularSectionRow.ЗаявкаНаВозвратТоваровОтКлиента.ДополнительныеРеквизиты");
	
	МобильнаяЗаявкаНаВозврат = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "Товары" //@NON-NLS-1
				И НЕ СокрЛП(Свойство) = "ДополнительныеРеквизиты" Тогда //@NON-NLS-1
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ ЭтоТабличнаяЧасть Тогда
			Если НЕ МобильнаяЗаявкаНаВозврат.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильнаяЗаявкаНаВозврат[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МобильнаяЗаявкаНаВозврат.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
					Для Каждого ЭлементСписка Из Значение.Row Цикл
						Если СокрЛП(Свойство) = "Товары" Тогда //@NON-NLS-1
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
						Иначе
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
						КонецЕсли;
						ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
						ОбъектТабличнаяЧасть = МобильнаяЗаявкаНаВозврат[СокрЛП(Свойство)];//СписокXDTO -  
						ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
					КонецЦикла;
				Иначе
					Если СокрЛП(Свойство) = "Товары" Тогда //@NON-NLS-1
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаТовары);
					Иначе
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					КонецЕсли;
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
					ОбъектТабличнаяЧасть = МобильнаяЗаявкаНаВозврат[СокрЛП(Свойство)];//СписокXDTO -  
					ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьЗаявкуНаВозвратТоваровОтКлиента(
		МобильнаяЗаявкаНаВозврат, Сообщение);
КонецПроцедуры

Процедура ЗаписатьКлиента(Данные, УзелОбмена, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "CatalogObject.Клиенты");
	ТипОбъектаКИ = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.Клиенты.КонтактнаяИнформация");
	ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.Клиенты.ДополнительныеРеквизиты");
	
	МобильныйПартнер = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "ДополнительныеРеквизиты" //@NON-NLS-1
				И НЕ СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда //@NON-NLS-1
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если Не ЭтоТабличнаяЧасть Тогда
			Если НЕ МобильныйПартнер.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				МобильныйПартнер[СокрЛП(Свойство)] = Значение;
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МобильныйПартнер.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
				Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
					Для Каждого ЭлементСписка Из Значение.Row Цикл
						Если СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда //@NON-NLS-1
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
						Иначе
							МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
						КонецЕсли;
						ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
						ОбъектТабличнаяЧасть = МобильныйПартнер[СокрЛП(Свойство)];//СписокXDTO -  
						ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
					КонецЦикла;
				Иначе
					Если СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда //@NON-NLS-1
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
					Иначе
						МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					КонецЕсли;
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
					ОбъектТабличнаяЧасть = МобильныйПартнер[СокрЛП(Свойство)];//СписокXDTO -  
					ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьКлиента(МобильныйПартнер, УзелОбмена, Сообщение);
КонецПроцедуры

Процедура ЗаписатьКонтактноеЛицоКлиента(Данные, Сообщение)
	
	URIИмен = URIПространстваИмен();
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "CatalogObject.КонтактныеЛицаКлиентов");
	ТипОбъектаКИ = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.КонтактныеЛицаКлиентов.КонтактнаяИнформация");
	
	МобильноеКонтактноеЛицо = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)]) 
				И НЕ СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда //@NON-NLS-1
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если Не ЭтоТабличнаяЧасть Тогда
			МобильноеКонтактноеЛицо[СокрЛП(Свойство)] = Значение;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
				Для Каждого ЭлементСписка Из Значение.Row Цикл
					МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
					ОбъектТабличнаяЧасть = МобильноеКонтактноеЛицо[СокрЛП(Свойство)];//СписокXDTO -  
					ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
				КонецЦикла;
			Иначе
				МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
				ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
				ОбъектТабличнаяЧасть = МобильноеКонтактноеЛицо[СокрЛП(Свойство)];//СписокXDTO -  
				ОбъектТабличнаяЧасть.Добавить(МобильныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьКонтактноеЛицоКлиента(МобильноеКонтактноеЛицо,
		Сообщение);
КонецПроцедуры

Процедура ЗаписатьКонтрагента(Данные, Сообщение)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "CatalogObject.Контрагенты");
	
	МобильныйКонтрагент = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		МобильныйКонтрагент[СокрЛП(Свойство)] = Значение;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьКонтрагента(МобильныйКонтрагент, Сообщение);
КонецПроцедуры

Процедура ЗаписатьОплатуКлиента(Данные, УзелОбмена, Сообщение)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), "DocumentObject.ОплатаКлиента");
	МобильнаяОплата = ФабрикаXDTO.Создать(ТипОбъекта);
	
	// Данные шапки документа
	Для каждого Свойство Из Данные.Свойства() Цикл
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если НЕ МобильнаяОплата.Свойства().Получить(СокрЛП(Свойство)) = Неопределено Тогда
			МобильнаяОплата[СокрЛП(Свойство)] = Значение;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.СоздатьОбновитьОплатуКлиента(МобильнаяОплата, УзелОбмена,
		Сообщение);
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение)
	
	Для Каждого Свойство Из Значение.Свойства() Цикл
		Если ТипЗнч(Значение[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			МобильныеДанные[СокрЛП(Свойство)] = СериализаторXDTO.ПрочитатьXDTO(Значение[СокрЛП(Свойство)]);
		Иначе
			МобильныеДанные[СокрЛП(Свойство)] = Значение[СокрЛП(Свойство)];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИдентификаторыДокументовИзСообщения(СообщениеОбмена, ТипДокумента)
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОбработатьСообщениеОбмена(СообщениеОбмена, Ложь);
	
	Идентификаторы = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
	
	ЛокальноеИмя = "";
	Если ТипДокумента = 0 Тогда
		ЛокальноеИмя = "DocumentRef.ЗаказКлиента"; //@NON-NLS-1
	ИначеЕсли ТипДокумента = 1 Тогда
		ЛокальноеИмя = "DocumentRef.ЗаявкаНаВозвратТоваровОтКлиента"; //@NON-NLS-1
	КонецЕсли;
	
	Пока ЧтениеXML.ЛокальноеИмя = ЛокальноеИмя Цикл
		
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		
		Если ТипДанныхXML.ИмяТипа = ЛокальноеИмя Тогда

			If ЛокальноеИмя = "DocumentRef.ЗаказКлиента" Then //@NON-NLS-1
				Данные = ПрочитатьXML(ЧтениеXML, Тип("ДокументСсылка.ЗаказКлиента"));
			ElsIf ЛокальноеИмя = "DocumentRef.ЗаявкаНаВозвратТоваровОтКлиента" Then //@NON-NLS-1
				Данные = ПрочитатьXML(ЧтениеXML, Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
			EndIf;
				
			Идентификаторы.Добавить(Данные);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Идентификаторы;
КонецФункции

Функция ОтветWS(РезультатОбмена, ИмяОбъектаXDTO = "MessageExchange", КомпонентыОбмена = Неопределено)
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен(), ИмяОбъектаXDTO);
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, РезультатОбмена);
	
	ЗаписатьИсториюВыполненияОбмена(РезультатОбмена, ИмяОбъектаXDTO);
		
	Возврат ОбъектОбмена;
КонецФункции

Функция ПараметрыЧтенияПакетаОбмена();
	
	ПараметрыЧтения = Новый Структура;
	ПараметрыЧтения.Вставить("ВТранзакции", Ложь);
	ПараметрыЧтения.Вставить("ТипОбъекта", 0);
	ПараметрыЧтения.Вставить("НастройкиЗадания", Неопределено);
	
	Возврат ПараметрыЧтения;
КонецФункции

Функция ПодготовленныеДанные(АдресХранилища)
	
	ВыбФайл = Новый Файл(АдресХранилища);
	Если НЕ ВыбФайл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(АдресХранилища);
	Данные = Неопределено;
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Данные = ПрочитатьXML(ЧтениеXML);
	КонецЦикла;
	УдалитьФайлы(ВыбФайл);
	Возврат Данные;
КонецФункции

Процедура ПрочитатьПакетОбмена(УзелОбмена, Сообщение, Отказ, ПараметрыЧтения)
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОбработатьСообщениеОбмена(Сообщение, Ложь);
	
	СообщениеОбмена = Сообщение;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	ОтветноеСообщение = Новый Массив;
	
	Если ПараметрыЧтения.ВТранзакции Тогда
		НачатьТранзакцию();
		Попытка
			ПрочитатьДанныеПакетаОбмена(УзелОбмена, ПараметрыЧтения, ЧтениеXML, ОтветноеСообщение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен 1С:Заказы'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		Попытка
			ПрочитатьДанныеПакетаОбмена(УзелОбмена, ПараметрыЧтения, ЧтениеXML, ОтветноеСообщение);
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен 1С:Заказы'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	URIИмен = URIПространстваИмен();
	
	Сообщение = Новый ЗаписьXML;
	
	Сообщение.УстановитьСтроку("UTF-8");
	Сообщение.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Сообщение, УзелОбмена);
	
	Для каждого Ответ Из ОтветноеСообщение Цикл
		
		ЛокальноеИмяОбъекта = "";
		Если ПараметрыЧтения.ТипОбъекта = 0 Тогда
			ЛокальноеИмяОбъекта = "OrderStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 1 Тогда
			ЛокальноеИмяОбъекта = "CatalogStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 2 Тогда
			ЛокальноеИмяОбъекта = "PaymentStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 3 Тогда
			ЛокальноеИмяОбъекта = "JobTargetStatus";
		ИначеЕсли ПараметрыЧтения.ТипОбъекта = 4 Тогда
			ЛокальноеИмяОбъекта = "RequestToReturnStatus";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЛокальноеИмяОбъекта) Тогда
			ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ЛокальноеИмяОбъекта);
			ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
			ЗаполнитьЗначенияСвойств(ОбъектОбмена, Ответ);
		
			ФабрикаXDTO.ЗаписатьXML(Сообщение, ОбъектОбмена);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	Сообщение = Сообщение.Закрыть();
	
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОбработатьСообщениеОбмена(Сообщение);
	
КонецПроцедуры

Процедура ПрочитатьДанныеПакетаОбмена(УзелОбмена, ПараметрыЧтения, ЧтениеXML, ОтветноеСообщение)
	
	Пока ЧтениеXML.ЛокальноеИмя = "DocumentObject.ЗаказКлиента" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ЗаказКлиента" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentObject.ЗаданиеТорговомуПредставителю" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ЗаданиеТорговомуПредставителю" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentObject.ЗаявкаНаВозвратТоваровОтКлиента" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ЗаявкаНаВозвратТоваровОтКлиента" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentObject.ОплатаКлиента" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "DocumentRef.ОплатаКлиента" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.Клиенты" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.Контрагенты" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.ДоговорыКлиентов" //@NON-NLS-1
		ИЛИ ЧтениеXML.ЛокальноеИмя = "CatalogObject.КонтактныеЛицаКлиентов" //@NON-NLS-1
		ИЛИ СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ЗаказКлиента" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьЗаказКлиента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ЗаданиеТорговомуПредставителю" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьЗаданиеТорговомуПредставителю(Данные, УзелОбмена, ОтветноеСообщение, ПараметрыЧтения.НастройкиЗадания);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ОплатаКлиента" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьОплатуКлиента(Данные, УзелОбмена, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "DocumentObject.ЗаявкаНаВозвратТоваровОтКлиента" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьЗаявкуНаВозвратТоваровОтКлиента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.Клиенты" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьКлиента(Данные, УзелОбмена, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.Контрагенты" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьКонтрагента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.ДоговорыКлиентов" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьДоговорСоглашение(Данные, ОтветноеСообщение);
		КонецЕсли;
		
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.КонтактныеЛицаКлиентов" Тогда //@NON-NLS-1
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаписатьКонтактноеЛицоКлиента(Данные, ОтветноеСообщение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформированныйОтветСтатусыДокументов(Идентификаторы, УзелОбмена, ТипДокумента)
	
	ОтветноеСообщениеXML = Новый ЗаписьXML;
	
	ОтветноеСообщениеXML.УстановитьСтроку("UTF-8");
	ОтветноеСообщениеXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ОтветноеСообщениеXML, УзелОбмена);
	
	ОтветныеДанные = Новый Массив;
	ЛокальноеИмяОбъекта = "";
	Если ТипДокумента = 0 Тогда
		ОтветныеДанные = МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОтветныеДанныеСтатусыЗаказовКлиентов(
			ОтветноеСообщениеXML, Идентификаторы);
		ЛокальноеИмяОбъекта = "OrderStatus";
		ИмяДопРеквизитов = "DocumentTabularSectionRow.ЗаказКлиента.ДополнительныеРеквизиты";
	ИначеЕсли ТипДокумента = 1 Тогда
		ОтветныеДанные = МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОтветныеДанныеСтатусыЗаявкиНаВозврат(
			ОтветноеСообщениеXML, Идентификаторы);
		ЛокальноеИмяОбъекта = "RequestToReturnStatus";
		ИмяДопРеквизитов = "DocumentTabularSectionRow.ЗаказКлиента.ДополнительныеРеквизиты";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛокальноеИмяОбъекта) Тогда
		URIПространстваИмен = URIПространстваИмен();
		ТипОбъекта = ФабрикаXDTO.Тип(URIПространстваИмен, ЛокальноеИмяОбъекта);
		ТипОбъектаДопРеквизиты = ФабрикаXDTO.Тип(URIПространстваИмен, ИмяДопРеквизитов);
		Для каждого Ответ Из ОтветныеДанные Цикл
			ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
			ЗаполнитьЗначенияСвойств(ОбъектОбмена, Ответ);
			
			Если Ответ.Свойство("ДополнительныеРеквизиты") Тогда
				Для Каждого СтрокаОтвета Из Ответ.ДополнительныеРеквизиты Цикл
					ДополнительныеРеквизиты = ФабрикаXDTO.Создать(ТипОбъектаДопРеквизиты);
					ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты, СтрокаОтвета);
					ОбъектТабличнаяЧасть = ОбъектОбмена["ДополнительныеРеквизиты"];//СписокXDTO -  
					ОбъектТабличнаяЧасть.Добавить(ДополнительныеРеквизиты);
				КонецЦикла;
			КонецЕсли;
			ФабрикаXDTO.ЗаписатьXML(ОтветноеСообщениеXML, ОбъектОбмена);
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	СообщениеОбмена = ОтветноеСообщениеXML.Закрыть();
	МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОбработатьСообщениеОбмена(СообщениеОбмена);
	
	Возврат СообщениеОбмена;
КонецФункции

Процедура СформироватьПакетОбмена(УзелОбмена, СообщениеОбмена, Отказ, Режим = 0, ВсеЦены = Ложь, СтруктураОтвета = Неопределено)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ДанныеПредыдущейЧастиОбмена = Неопределено;
	Если Режим = 0 Тогда
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьСправочникиДляОбмена(ЗаписьXML, УзелОбмена);
	ИначеЕсли Режим = 1 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьПрайсЛистДляОбмена(ЗаписьXML, СообщениеОбмена, УзелОбмена,
			ЗаписьСообщения.НомерСообщения, ВсеЦены, ДанныеПредыдущейЧастиОбмена);
	ИначеЕсли Режим = 2 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьДоступныеОстатки(ЗаписьXML, УзелОбмена,
			ДанныеПредыдущейЧастиОбмена);
	ИначеЕсли Режим = 3 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьКлиентовДляОбмена(ЗаписьXML, УзелОбмена,
			ДанныеПредыдущейЧастиОбмена);
	ИначеЕсли Режим = 4 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ResultMessage");
		ЗаписьXML.Отступ = Истина;
		ЗаписьXML.ЗаписатьБезОбработки(СообщениеОбмена);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ИначеЕсли Режим = 5 Тогда
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьЗаданияДляОбмена(ЗаписьXML, УзелОбмена, СообщениеОбмена,
			ЗаписьСообщения.НомерСообщения);
	ИначеЕсли Режим = 6 Тогда
		Если ЗначениеЗаполнено(СтруктураОтвета.ResultMessage) Тогда
			ДопСвойстваВХранилище = ПодготовленныеДанные(СтруктураОтвета.ResultMessage);
			Если НЕ ДопСвойстваВХранилище = Неопределено 
				И ТипЗнч(ДопСвойстваВХранилище) = Тип("ХранилищеЗначения") Тогда
				ДанныеПредыдущейЧастиОбмена = ДопСвойстваВХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ВыгрузитьКлиентовДляОбмена(ЗаписьXML, УзелОбмена,
			ДанныеПредыдущейЧастиОбмена, Истина);
	КонецЕсли;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Если НЕ Отказ Тогда
		СообщениеОбмена = ЗаписьXML.Закрыть();
		Если НЕ ДанныеПредыдущейЧастиОбмена = Неопределено Тогда
			СтруктураОтвета.ResultMessage = "";
			СтруктураОтвета.Continue = Ложь;
			Если ДанныеПредыдущейЧастиОбмена.Продолжение Тогда
				СтруктураОтвета.ResultMessage = ДанныеДляПродолжения(Новый ХранилищеЗначения(ДанныеПредыдущейЧастиОбмена,
					Новый СжатиеДанных(9)));
				Если Не ПустаяСтрока(СтруктураОтвета.ResultMessage) Тогда
					СтруктураОтвета.Continue = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ОбработатьСообщениеОбмена(СообщениеОбмена);
	КонецЕсли;
КонецПроцедуры

Функция ЭтоТаблицаОбъекта(Знач СвойствоXDTO)
	
	Если СвойствоXDTO.Свойства().Количество() = 1 Тогда
		СвойствоXDTOСвойства = СвойствоXDTO.Свойства(); // КоллекцияСвойствXDTO
		Возврат СвойствоXDTOСвойства.Получить(0).ВерхняяГраница <> 1;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция СтандартнаяСтруктураОбъекта()
	
	СтруктураСправочника = Новый Структура;
	СтруктураСправочника.Вставить("ref");
	СтруктураСправочника.Вставить("DeletionMark");
	СтруктураСправочника.Вставить("Description");
	
	Возврат СтруктураСправочника;
	
КонецФункции

#КонецОбласти