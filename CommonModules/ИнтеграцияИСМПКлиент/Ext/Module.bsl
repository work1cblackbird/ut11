#Область ПрограммныйИнтерфейс

#Область ОбменДанными

// Выполняет подготовку к передаче в сервис ИС МП сообщения по документу и начинает процедуру обмена
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыОбработкиДокументов - (См. ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов)
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции
Процедура ПодготовитьКПередаче(Форма, ПараметрыОбработкиДокументов, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ВходящиеДанные = Новый Массив;
	ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Форма.УникальныйИдентификатор);
	
	ИнтеграцияИСМПСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Выполняет подготовку к передаче в сервис ИС МП сообщения по документу и начинает процедуру обмена
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыЗагрузки - Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.Организация - Организация
//   * Интервал - Структура - Структура со свойствами:
//     ** НачалоПериода - Дата - Дата начала периода.
//     ** КонецПериода - Дата - Дата окончания периода.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции
Процедура ЗагрузитьВходящиеДокументы(Форма, ПараметрыЗагрузки, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ЗагрузитьВходящиеДокументы(
		ПараметрыЗагрузки,
		Форма.УникальныйИдентификатор);
	
	ИнтеграцияИСМПСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ИС МП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник команды выполнения обмена
//  Организация - Неопределено, Массив Из ОпределяемыйТип.Организация, ОпределяемыйТип.Организация - 
//        Организация или несколько организаций, по которым необходимо выполнить обмен.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
Процедура ВыполнитьОбмен(Форма, Организация = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ВыполнитьОбмен(
		Организация,
		Форма.УникальныйИдентификатор);
	
	ИнтеграцияИСМПСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//   ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
Процедура ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияИСМПВызовСервера.ОтменитьПоследнююОперацию(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ИнтеграцияИСМПСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ИнтеграцияИСМПВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = ИнтеграцияИСМПВызовСервера.ОтменитьПередачу(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ИнтеграцияИСМПСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОрганизацииДляОбмена(Форма) Экспорт
	
	Организации = Форма.Организации.ВыгрузитьЗначения();
	Если Организации.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Организации.Количество() = 1 Тогда
		Возврат Организации[0];
	Иначе
		Возврат Организации;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаВСпискахДокументов

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках.
//
// Параметры:
//  ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда.
//  ПараметрыПередачи - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - действие, которое будет выполнено.
//                    - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
Процедура ПодготовитьСообщенияКПередаче(ДинамическийСписок, ПараметрыПередачи) Экспорт
	
	ОчищатьСообщения = Истина;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ОчищатьСообщения = ПараметрыПередачи.ОчищатьСообщения;
	КонецЕсли;
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДополнительныеПараметры = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДальнейшееДействие = ПараметрыПередачи.ДальнейшееДействие;
	Иначе
		ДальнейшееДействие = ПараметрыПередачи;
	КонецЕсли;
	
	Контекст = ИнтеграцияИСКлиент.СтруктураПодготовкиСообщенийКПередаче(
		ДинамическийСписок, ДальнейшееДействие,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		Контекст.ПараметрыПередачи = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура")
		И ПараметрыПередачи.ИменаКолонокДальнейшиеДействия <> Неопределено Тогда
		ИменаКолонокДальнейшиеДействия = ПараметрыПередачи.ИменаКолонокДальнейшиеДействия;
	Иначе
		ИменаКолонокДальнейшиеДействия = Новый Массив;
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеИСМП1");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеИСМП2");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеИСМП3");
	КонецЕсли;
	
	ИнтеграцияИСКлиент.ОпределитьДоступностьДействий(
		Контекст, ИменаКолонокДальнейшиеДействия, "Организация");
	
	ИнтеграцияИСКлиент.ПодготовитьСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Обработчик завершения процедуры ПодготовитьСообщенияКПередаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов - массив - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - массив - документы, исключенные из обработки,
//   * ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда,
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - действие, которое будет выполнено.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
Процедура ПодготовитьСообщенияКПередачеЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ВходящиеДанные = Новый Массив;
	Для Каждого ДокументСсылка Из Контекст.МассивДокументов Цикл
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = ДокументСсылка;
		ПараметрыОбработкиДокументов.Организация        = Контекст.РеквизитыДокументов[ДокументСсылка].Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = Контекст.ДальнейшееДействие;
		
		ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
		
	КонецЦикла;
	
	Форма = Неопределено;
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДинамическийСписок")
		И ТипЗнч(Контекст.ДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		Форма = ИнтеграцияИСКлиент.ПолучитьФормуПоЭлементуФормы(Контекст.ДинамическийСписок);
	КонецЕсли;
	
	РезультатОбмена = ИнтеграцияИСМПВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Форма.УникальныйИдентификатор);
	
	ОповещениеПриЗавершении = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	КонецЕсли;
	
	ИнтеграцияИСМПСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Выполняет архивирование документов.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияИСМПВызовСервера.АрхивироватьДокументы(
		ДополнительныеПараметры.ДокументыКАрхивированию);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияИСМПСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование распоряжений к оформлению.
// 
// Параметры:
// 	Результат - КодВозвратаДиалога - Ответ на вопрос архивирования.
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
Процедура АрхивироватьРаспоряжения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = ИнтеграцияИСМПВызовСервера.АрхивироватьРаспоряженияКОформлению(
		ДополнительныеПараметры.Распоряжения,
		ДополнительныеПараметры.ПустаяСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ИнтеграцияИСМПСлужебныйКлиент.ПослеЗавершенияОбмена(
			Изменения, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду создания документа, с предварительным выбором вида продукции или способа ввода в оборот.
//   Для заказа на эмиссию может открыть форму резервирования кодов.
// 
// Параметры:
//  ПолноеИмяДокумента - Строка - Полное имя документа
//  ДокументОснование - Произвольный - Документ основание
//  Владелец - Произвольный - Владелец
//  ОписаниеОповещения - Неопределено, ОписаниеОповещения - Описание оповещения
Процедура ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование = Неопределено, Владелец = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ПолноеИмяДокумента = "Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ"
		И ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) <> Тип("Структура")
		И ИнтеграцияИСМПВызовСервера.ТребуетсяПерейтиВПул(ДокументОснование) Тогда
		
		ПараметрыФормы = Новый Структура("Документ", ДокументОснование);
		Открытьформу("РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаРезервирования", ПараметрыФормы, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбъектаВыбора = ПараметрыИнтерактивногоВыбораОтбораЗаполнения(ПолноеИмяДокумента, ДокументОснование);
	
	Если ПараметрыОбъектаВыбора.ОбъектыДляВыбора.Количество() > 1 Тогда
		
		ПараметрыВыбораИзСписка = Новый Структура;
		ПараметрыВыбораИзСписка.Вставить("ОбъектыДляВыбора",   ПараметрыОбъектаВыбора.ОбъектыДляВыбора);
		ПараметрыВыбораИзСписка.Вставить("ПолноеИмяДокумента", ПолноеИмяДокумента);
		ПараметрыВыбораИзСписка.Вставить("ДокументОснование",  ДокументОснование);
		ПараметрыВыбораИзСписка.Вставить("Владелец",           Владелец);
		ПараметрыВыбораИзСписка.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыВыбораИзСписка.Вставить("ИмяФильтра",         ПараметрыОбъектаВыбора.ИмяФильтра);
		
		ИнтеграцияИСКлиент.ВыбратьИзСпискаИОткрытьФормуСозданияДокумента(ПараметрыВыбораИзСписка);
		
	Иначе
		
		ИнтеграцияИСКлиент.ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование, Владелец, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВФормахДокументов

#Область Сертификация

Функция НастройкиРаботыССертификацией(ИмяРеквизитаКеш = "КэшСертификации", ИмяРеквизитаСертификация = "ТоварыСертификация") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Кэш",           ИмяРеквизитаКеш);
	Результат.Вставить("ТаблицаФормы", "Товары");
	Результат.Вставить("Номенклатура", "Номенклатура");
	Результат.Вставить("Сертификация",  ИмяРеквизитаСертификация);
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСписокВыбораСертификации(Форма, НастройкиРаботыССертификацией = Неопределено) Экспорт
	
	Если НастройкиРаботыССертификацией = Неопределено Тогда
		НастройкиРаботыССертификацией = НастройкиРаботыССертификацией();
	КонецЕсли;
	
	ИспользоватьПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(Форма);
	ЭтоПаспортСоответствия = НастройкиРаботыССертификацией.Сертификация = "ТоварыПаспортСоответствия";
	
	ТекущиеДанные = Форма.Элементы[НастройкиРаботыССертификацией.ТаблицаФормы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КэшСертификации = Форма[НастройкиРаботыССертификацией.Кэш];
	Номенклатура = ТекущиеДанные[НастройкиРаботыССертификацией.Номенклатура];
	ЭлементСертификация = Форма.Элементы[НастройкиРаботыССертификацией.Сертификация];
	
	ЭлементСертификация.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из КэшСертификации Цикл
		Если (Не ЗначениеЗаполнено(СтрокаКэша.Номенклатура) Или Номенклатура = СтрокаКэша.Номенклатура)
			И (Не ИспользоватьПаспортСоответствия
				Или (ЭтоПаспортСоответствия И ЗначениеЗаполнено(СтрокаКэша.КемВыдан)
					Или Не ЭтоПаспортСоответствия И Не ЗначениеЗаполнено(СтрокаКэша.КемВыдан))) Тогда
			ЭлементСертификация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПервичныйДокумент

Функция НастройкиРаботыСПервичнымДокументом() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Кэш", "КэшПервичныхДокументов");
	Результат.Вставить("ТаблицаФормы", "Товары");
	Результат.Вставить("ПричинаПеремаркировки", "ПричинаПеремаркировки");
	Результат.Вставить("ПервичныйДокумент", "ТоварыПредставлениеПервичногоДокумента");
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСписокВыбораПервичногоДокумента(Форма, НастройкиРаботыСПервичнымДокументом = Неопределено) Экспорт
	
	Если НастройкиРаботыСПервичнымДокументом = Неопределено Тогда
		НастройкиРаботыСПервичнымДокументом = НастройкиРаботыСПервичнымДокументом();
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы[НастройкиРаботыСПервичнымДокументом.ТаблицаФормы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПричинуПеремаркировки = НастройкиРаботыСПервичнымДокументом.Свойство("ПричинаПеремаркировки");
	Если ИспользоватьПричинуПеремаркировки Тогда
		ПричинаПеремаркировки = ТекущиеДанные[НастройкиРаботыСПервичнымДокументом.ПричинаПеремаркировки];
	КонецЕсли;
	
	Кэш = Форма[НастройкиРаботыСПервичнымДокументом.Кэш];
	ЭлементПервичныйДокумент = Форма.Элементы[НастройкиРаботыСПервичнымДокументом.ПервичныйДокумент];
	
	ЭлементПервичныйДокумент.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из Кэш Цикл
		
		Если Не ИспользоватьПричинуПеремаркировки
			Или ИнтеграцияИСМПКлиентСервер.СоответствиеПричинПеремаркировкиПервичногоДокумента(
			СтрокаКэша.ПричинаПеремаркировки,
			ПричинаПеремаркировки) Тогда
				
			ЭлементПервичныйДокумент.СписокВыбора.Добавить(
				Формат(Кэш.Индекс(СтрокаКэша), "ЧРД=; ЧН=0; ЧГ=0;"), СтрокаКэша.ПредставлениеПервичногоДокумента);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтборПоОрганизации

Процедура ОткрытьФормуВыбораОрганизаций(Форма, Префикс, Префиксы = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Организации",           Форма.Организации.ВыгрузитьЗначения());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	ДополнительныеПараметры.Вставить("Префикс",                 Префикс);
	ДополнительныеПараметры.Вставить("Префиксы",                Префиксы);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВыбораСпискаОрганизацийИСМП",
		ПараметрыОткрытияФормы,
		Форма,,,,
		Новый ОписаниеОповещения("ПослеЗавершенияВыбораОрганизаций", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ПослеЗавершенияВыбораОрганизаций(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма             = ДополнительныеПараметры.Форма;
	СписокОрганизаций = Результат.Организации;
	ПрименятьОтбор    = ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
	
	Если Результат.СохраненыНастройки Тогда
		Форма.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам();
	КонецЕсли;
	
	ОбработатьВыборОрганизаций(Форма, СписокОрганизаций, ПрименятьОтбор,
		ДополнительныеПараметры.Префикс, ДополнительныеПараметры.Префиксы);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, СписокОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборОрганизаций(Форма, Результат, ПрименятьОтбор, Префикс = Неопределено, Префиксы = Неопределено) Экспорт
	
	ИнтеграцияИСКлиентСервер.НастроитьОтборПоОрганизации(Форма, Результат, Префикс, Префиксы);
	
	Если ПрименятьОтбор Тогда
		ВключаяПустоеЗначение = (Форма.ИмяФормы = "ОбщаяФорма.ВскрытыеПотребительскиеУпаковкиИС");
		ОрганизацияОтборПриИзменении(Форма, ВключаяПустоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтветственныеЗаАктуализациюТокеновАвторизации

// Подключает обработчик ожидания для инициализации напоминаний ответственному за актуализацию токенов авторизации.
//
Процедура ПодключитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВыполнитьИнициализациюНастроекОтветственногоЗаАктуализациюТокеновАвторизации", 10, Истина);
	
КонецПроцедуры

// Проверяет наличие напоминаний для ответственного за актуализацию токенов авторизации ИС МП.
// При необходимости, открывает форму актуализации токенов авторизации ИС МП.
//
Процедура ПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации(ПараметрыПроверкиНапоминаний) Экспорт
	
	НастройкиОтветственного = ПараметрыПроверкиНапоминаний.НастройкиОтветственного;
	ИмяПараметраНастроек    = ПараметрыПроверкиНапоминаний.ИмяПараметраНастроек;
	Напоминания             = ПараметрыПроверкиНапоминаний.Напоминания;
	ДатаСеанса              = ПараметрыПроверкиНапоминаний.ДатаСеанса;
	
	ТребуетсяАктуализация = Ложь;
	Если НастройкиОтветственного.ТребуетсяПроверкаНапоминаний Тогда
		
		ОповеститьЧерез       = 0;
		Для Каждого Напоминание из Напоминания Цикл
			Если Не Напоминание.ОповещениеИспользуется Тогда
				Продолжить;
			КонецЕсли;
			Если Напоминание.ТребуетсяАктуализация
				И Напоминание.ОповеститьЧерез = 0 Тогда
				ТребуетсяАктуализация = Истина;
				ОповеститьЧерез = 0;
				Прервать;
			КонецЕсли;
			Если Напоминание.ОповеститьЧерез > 0
				И (ОповеститьЧерез = 0
				Или Напоминание.ОповеститьЧерез < ОповеститьЧерез) Тогда
				ОповеститьЧерез = Напоминание.ОповеститьЧерез;
			КонецЕсли;
		КонецЦикла;
		
		Если ОповеститьЧерез > 0 Тогда
			ПараметрыПриложения[ИмяПараметраНастроек].ВремяСледующейПроверки = ДатаСеанса + ОповеститьЧерез;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТребуетсяАктуализация
		Или НастройкиОтветственного.ОткрытаФормаАктуализации Тогда
		ИнтерфейсАвторизацииИСМПКлиент.ОткрытьФормуАктуализацииТокеновАвторизации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаНоменклатуры

// Открывает форму настройки видов упаковок по GTIN для номенклатуры.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма-владелец открываемой формы настройки.
//  Номенклатура  - ОпределяемыйТип.Номенклатура - Ссылка на номенклатуру для которой выполняется настройка.
//  ВидПродукции  - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, если не указана - определяется по номенклатуре.
//                  Вид продукции следует указывать обязательно, если форма может открываться для модифицированной карточки номенклатуры,
//                  когда вид продукции записанного элемента отличается от модифицированного в форме. Вид продукции, в том числе,
//                  определяет доступные виды упаковок.
Процедура ОткрытьФормуНастройкиВидовУпаковокПоНоменклатуре(ФормаВладелец, Номенклатура, ВидПродукции = Неопределено) Экспорт
	
	ДанныеПоискаGTIN = Новый Массив;
	СтрокаДанных     = Новый Структура;
	СтрокаДанных.Вставить("Номенклатура", Номенклатура);
	ДанныеПоискаGTIN.Добавить(СтрокаДанных);
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
	ПараметрыОткрытия.УточнениеВидаУпаковки            = Истина;
	ПараметрыОткрытия.ДанныеПоискаGTIN                 = ДанныеПоискаGTIN;
	ПараметрыОткрытия.ИспользоватьХарактеристики       = Ложь;
	ПараметрыОткрытия.ВидПродукции                     = ВидПродукции;
	ПараметрыОткрытия.ЭтоНастройкаКарточкиНоменклатуры = Истина;
	
	ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

// Открыть форму списка вскрытых потребительских упаковок.
// 
// Параметры:
//  ПараметрыОткрытия - см. ИнтеграцияИСКлиент.ПараметрыОткрытияФормыСпискаПотребительскихУпаковок
Процедура ОткрытьФормуСпискаВскрытыхПотребительскихУпаковок(ПараметрыОткрытия) Экспорт
	
	Если ПараметрыОткрытия.ПараметрыФормы = Неопределено Тогда
		ПараметрыОткрытия.ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыОткрытия.ПараметрыФормы.Вставить("ИмяПодсистемы", "ИСМП");
	
	Если ЗначениеЗаполнено(ПараметрыОткрытия.Организациия) Тогда
		
		СтруктураБыстрогоОтбора = Неопределено;
		Если Не ПараметрыОткрытия.ПараметрыФормы.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора) Тогда
			СтруктураБыстрогоОтбора = Новый Структура();
			ПараметрыОткрытия.ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		КонецЕсли;
		
		СтруктураБыстрогоОтбора.Вставить("Организация", ПараметрыОткрытия.Организациия);
		СтруктураБыстрогоОтбора.Вставить("Организации", Новый СписокЗначений());
		СтруктураБыстрогоОтбора.Организации.Добавить(ПараметрыОткрытия.Организациия);
		
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ВскрытыеПотребительскиеУпаковкиИС",
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыОткрытия.ВладелецФормы,,,,
		ПараметрыОткрытия.ОповещениеОЗакрытии,
		ПараметрыОткрытия.РежимОткрытияОкна);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаПараметров

// Параметры открытия формы уточнения упаковок по GTIN.
// 
// Возвращаемое значение:
//  Структура - Параметры открытия формы уточнения упаковок по GTIN:
// * ВидПродукции                        - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// * УточнениеВидаУпаковки               - Булево - Режим уточнения вида упаковки.
// * ДоступноРедактированиеВидаУпаковки  - Булево - Доступность редактирования вида упаковки.
// * АдресУточнениеКоэффициентовУпаковок - Неопределено, Строка - Адрес во временном хранилище данных уточнения.
// * ДанныеПоискаGTIN - Неопределено, Массив из Структура: {Номенклатура, Характеристика} - Данные для заполнения GTIN.
// * ИспользоватьХарактеристики          - Булево - Признак использования характеристик при заполннении GTIN
// * ЭтоНастройкаКарточкиНоменклатуры    - Булево - Признак открытия карточки для настройки номенклатуры.
Функция ПараметрыОткрытияФормыУточненияУпаковокПоGTIN() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидПродукции",                        Неопределено);
	ПараметрыОткрытия.Вставить("УточнениеВидаУпаковки",               Ложь);
	ПараметрыОткрытия.Вставить("ДоступноРедактированиеВидаУпаковки",  Ложь);
	ПараметрыОткрытия.Вставить("АдресУточнениеКоэффициентовУпаковок", Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеПоискаGTIN",                    Неопределено);
	ПараметрыОткрытия.Вставить("ИспользоватьХарактеристики",          Истина);
	ПараметрыОткрытия.Вставить("ЭтоНастройкаКарточкиНоменклатуры",    Ложь);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Открыть форму настройки видов упаковок по GTIN.
// 
// Параметры:
//  ПараметрыОткрытия  - см. ПараметрыОткрытияФормыУточненияУпаковокПоGTIN
//  ФормаВладелец      - ФормаКлиентскогоПриложения       - Владелец открываемой формы.
//  ОписаниеОповещения - ОписаниеОповещения, Неопределено - Описание оповещения о закрытии формы уточнения.
Процедура ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ФормаВладелец, ОписаниеОповещения = Неопределено) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.УточнениеКоэффициентовУпаковокИСМП",
		ПараметрыОткрытия, ФормаВладелец,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РазрешительныйРежимCDNПлощадки

Процедура ОбработатьРезультатАктуализацииCDNПлощадок(РезультатОбмена, Форма, Организация, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	Если РезультатОбмена <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ТекстСообщения             = НСтр("ru='Выполняется обновление CDN-площадок'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = ВыводитьОкноОжидания;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
		ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
		ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
		ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
		ПараметрыЗавершенияДлительнойОперации.Организация             = Организация;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатОбмена,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ИнтеграцияИСМПКлиент, ПараметрыЗавершенияДлительнойОперации),
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗавершенияДлительнойОперации()
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма");
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	ПараметрыЗавершения.Вставить("Организация");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

#КонецОбласти

Процедура ОрганизацияОтборПриИзменении(Форма, ВключаяПустоеЗначение)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		
		Если ВключаяПустоеЗначение Тогда
			ИнтеграцияИСМПКлиентСервер.УстновитьОтборПоОрганизацииИПустомуЗначению(Форма);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.Список,
				"Организация",
				Форма.Организации,
				ВидСравненияКомпоновкиДанных.ВСписке,,
				Форма.Организации.Количество() > 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокКОформлению,
			"Организация",
			Форма.Организации,
			ВидСравненияКомпоновкиДанных.ВСписке,,
			Форма.Организации.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснования(Форма, Объект,
			Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, СобытиеОбработано = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",  Форма);
	Контекст.Вставить("Объект", Объект);
	Контекст.Вставить("ДокументОснование", Объект.Ссылка);
	Контекст.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
	Контекст.Вставить("СобытиеОбработано", СобытиеОбработано);
	
	Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ОбработкаНавигационнойСсылкиВФормеДокументаОснованияЗавершение",
			ЭтотОбъект,
			Контекст);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" %2. Записать?'"),
			Контекст.ДокументОснование,
			?(НЕ ЗначениеЗаполнено(Контекст.ДокументОснование), НСтр("ru='не записан'"), НСтр("ru='был изменен'")));
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснования(
			Контекст.ДокументОснование,
			НавигационнаяСсылкаФорматированнойСтроки,
			Форма,
			СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиВФормеДокументаОснованияЗавершение(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Объект.Проведен Тогда
		Если Контекст.Форма.ПроверитьЗаполнение() Тогда
			Контекст.Форма.Записать();
		КонецЕсли;
	Иначе
		Контекст.Форма.Записать();
	КонецЕсли;
	
	Если НЕ Контекст.Форма.Модифицированность И ЗначениеЗаполнено(Контекст.ДокументОснование) Тогда
		
		ВыполнитьКомандуГиперссылкиВФормеДокументаОснования(
			Контекст.ДокументОснование,
			Контекст.НавигационнаяСсылкаФорматированнойСтроки,
			Контекст.Форма,
			Контекст.СобытиеОбработано);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуГиперссылкиВФормеДокументаОснования(ДокументОснование, НавигационнаяСсылкаФорматированнойСтроки, Форма, СобытиеОбработано)
	
	ОписаниеКоманды = ИнтеграцияИСКлиентСервер.ПреобразоватьИмяКомандыНавигационнойСсылкиВоВнутреннийФормат(
		НавигационнаяСсылкаФорматированнойСтроки);
	
	// Открытие протокола обмена
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьПротоколОбмена(ОписаниеКоманды) Тогда
		
		ОткрытьПротоколОбмена(ДокументОснование, Форма, Истина);
		
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Создание документа
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиСоздатьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокумента = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		
		ОткрытьФормуСозданияДокумента(ПолноеИмяДокумента, ДокументОснование, Форма);
		СобытиеОбработано = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Открытие документа
	Если ИнтеграцияИСКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьОбъект(ОписаниеКоманды) Тогда
		
		ПолноеИмяДокумента   = ИнтеграцияИСКлиентСервер.ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды);
		ЧастиИмениОбъекта    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяДокумента, ".");
		ДокументыПоОснованию = ИнтеграцияИСМПВызовСервера.ДокументыИСМППоДокументуОснованию(ДокументОснование);
		МассивДокументов     = ДокументыПоОснованию[ЧастиИмениОбъекта[1]];
		
		Если МассивДокументов.Количество() = 1 Тогда
			ПоказатьЗначение(, МассивДокументов[0].Ссылка);
			СобытиеОбработано = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Открытие формы резервирования кодов маркировки
	Если ИнтеграцияИСМПКлиентСервер.ЭтоКомандаНавигационнойСсылкиПулКодовМаркировки(ОписаниеКоманды) Тогда
		
		ПараметрыФормы = Новый Структура("Документ", ДокументОснование);
		
		Открытьформу(
			"РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаРезервирования",
			ПараметрыФормы, Форма);
		
		СобытиеОбработано = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	//открытие формы сверки кодов маркировки
	Если ИнтеграцияИСМПКлиентСервер.ЭтоКомандаНавигационнойСсылкиОткрытьФормуСверкиКодовМаркировки(ОписаниеКоманды) Тогда
		
		СверкаКодовМаркировкиИСМПКлиент.ОткрытьФормуРезультатовСверкиКодовМаркировки(Форма);
		
		СобытиеОбработано = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	// Открытие произвольной навигационной ссылки
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
	СобытиеОбработано = Истина;
	
КонецПроцедуры

Функция ПараметрыИнтерактивногоВыбораОтбораЗаполнения(ПолноеИмяДокумента, ДокументОснование)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ИмяФильтра");
	ВозвращаемоеЗначение.Вставить("ОбъектыДляВыбора");
	
	ВозвращаемоеЗначение.ИмяФильтра       = "ЗаполнениеСВидомПродукции";
	ВозвращаемоеЗначение.ОбъектыДляВыбора = ИнтеграцияИСМПВызовСервера.ВидыПродукцииДанныхЗаполнения(
		ПолноеИмяДокумента, ДокументОснование);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОткрытьПротоколОбмена(Документ, Владелец = Неопределено, ДляДокументаОснования = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("ДляДокументаОснования", ДляДокументаОснования);
	
	ОткрытьФорму(
		"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает пользовательское представление заголовка формы загрузки кодов маркировки
//
// Параметры:
//   Владелец         - ФормаКлиентскогоПриложения - источник вызова.
//   ДоступнаИерархия - Булево           - режим иерархической загрузки (из форм проверки и подбора).
//
// Возвращаемое значение:
//   Строка - заголовок
//
Функция ЗаголовокФормыЗагрузкиКодовМаркировки(Владелец, ДоступнаИерархия = Ложь) Экспорт
	
	ВозвращаемоеЗначение = НСтр("ru = 'Загрузка кодов маркировки'");
	Если Не ДоступнаИерархия
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Владелец.Объект, "Ссылка")
		И ЗначениеЗаполнено(Владелец.Объект.Ссылка) Тогда
		ВозвращаемоеЗначение = СтрШаблон(НСтр("ru = 'Загрузка кодов маркировки в %1'"), Владелец.Объект.Ссылка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник) Экспорт
	
	Если ПолноеИмяОбъекта = "РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС"
		Или ПолноеИмяОбъекта = "ОбщаяФорма.ВскрытыеПотребительскиеУпаковкиИС" Тогда
		ТипДокумента = Тип("ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПодключениеКегаКОборудованиюРозливаПриСканированииЗавершение(Результат, ПараметрыПродолжения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = ПараметрыПродолжения.ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода;
	РезультатОбработкиШтрихкода.ТребуетсяВскрытиеПотребительскойУпаковки = Ложь;
	
	ШтрихкодированиеИСКлиент.УточнитьДанныеУПользователя(
		ПараметрыПродолжения.ФормаВладелец,
		ПараметрыПродолжения.ПараметрыОткрытияФормы,
		ПараметрыПродолжения.ОповещениеПоЗавершениюУточненияДанных);
	
КонецПроцедуры

#КонецОбласти