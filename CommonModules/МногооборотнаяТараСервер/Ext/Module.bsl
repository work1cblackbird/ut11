///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО УЧЕТУ МНОГООБОРОТНОЙ ТАРЫ

#Область ПрограммныйИнтерфейс

// Заполняет в документе подобранную обработкой многооборотную тару
//
// Параметры:
// Объект - ДокументОбъект            - Документ, в котором необходимо заполнить многооборотную тару.
// АдресТарыВХранилище                - Строка - Адрес таблицы многооборотной тары во временном хранилище.
// ИмяТаблицы                         - Строка - Имя таблицы документа, в которой необходимо заполнить многооборотную тару.
// ИменаКолонок                       - Строка - Имена колонок таблицы, по которым необходимо осуществлять поиск строк.
//                                              "Номенклатура, Характеристика, Склад, Дата" (Имена могут меняться в
//                                              зависимости от документа).
// СтруктураДействийИзмененныеСтроки  - Структура - Действия с измененными строками.
// СтруктураДействийДобавленныеСтроки - Структура - Действия с добавленными строками.
// КэшированныеЗначения               - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьМногооборотнуюТаруИзХранилища(Объект,
	                                             Знач АдресТарыВХранилище,
	                                             Знач ИмяТаблицы,
	                                             Знач ИменаКолонок,
	                                             Знач СтруктураДействийИзмененныеСтроки,
	                                             Знач СтруктураДействийДобавленныеСтроки,
	                                             КэшированныеЗначения = Неопределено) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "СостояниеЗаполненияМногооборотнойТары") Тогда
		Объект.СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.Заполнена;
	КонецЕсли;
	
	ТараИзХранилища = ПолучитьИзВременногоХранилища(АдресТарыВХранилище);
	МассивУдаляемыхСтрок = Новый Массив();
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонок, ",");
	
	Если МассивКолонок.Количество() < 2 Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Неверно задан параметр %1 функции'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, "ИменаКолонок");
		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ИскатьПозицииБезНаборов = Неопределено;
	Для Каждого СтрокаТЧ Из Объект[ИмяТаблицы] Цикл
		ИскатьПозицииБезНаборов = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "НоменклатураНабора");
		Прервать;
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из ТараИзХранилища Цикл
		
		СтруктураПоиска = Новый Структура(ИменаКолонок);
		СтруктураПоиска[МассивКолонок[0]] = СтрокаТоваров.Номенклатура;
		СтруктураПоиска[МассивКолонок[1]] = СтрокаТоваров.Характеристика;
		Если МассивКолонок.Количество() = 4 Тогда
			Если ЗначениеЗаполнено(МассивКолонок[3]) Тогда
				СтруктураПоиска[МассивКолонок[3]] = СтрокаТоваров.Дата;
			КонецЕсли;
			Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
				СтруктураПоиска[МассивКолонок[2]] = СтрокаТоваров.Склад;
			КонецЕсли;
		ИначеЕсли МассивКолонок.Количество() = 3 Тогда
			Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
				СтруктураПоиска[МассивКолонок[2]] = СтрокаТоваров.Склад;
			КонецЕсли;
		КонецЕсли;
		
		ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Номенклатура, "ИспользованиеХарактеристик");
		ХарактеристикаНеУказана    = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
			И НЕ ЗначениеЗаполнено(СтрокаТоваров.Характеристика);
			
		Если ХарактеристикаНеУказана Тогда
			
			СтруктураПоиска.Удалить(МассивКолонок[1]);
			
		КонецЕсли;
		
		Если ИмяТаблицы <> "Комплектующие" И ИскатьПозицииБезНаборов = Истина Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка());
		КонецЕсли;
		
		МассивСтрокТЧТовары = Объект[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаТоваров.Количество = 0 Тогда
			
			Для Каждого ТекЭлемент Из МассивСтрокТЧТовары Цикл
				МассивУдаляемыхСтрок.Добавить(ТекЭлемент);
			КонецЦикла;
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
			
			Если МассивКолонок.Количество() = 4 Тогда
				Если ЗначениеЗаполнено(МассивКолонок[3]) Тогда
					СтрокаТЧТовары[МассивКолонок[3]] = СтрокаТоваров.Дата;
				КонецЕсли;
				Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
					СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
				КонецЕсли;
			ИначеЕсли МассивКолонок.Количество() = 3 Тогда
				Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
					СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
				КонецЕсли;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействийДобавленныеСтроки, КэшированныеЗначения);
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 0 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
			Если СтрокаТЧТовары.Количество <> СтрокаТоваров.Количество Тогда
				
				ПредыдущаяХарактеристика = СтрокаТЧТовары.Характеристика;
				
				ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
					
				Если ХарактеристикаНеУказана Тогда 
					
					СтрокаТЧТовары.Характеристика = ПредыдущаяХарактеристика;
					
				КонецЕсли;
				
				Если МассивКолонок.Количество() = 4 Тогда
					Если ЗначениеЗаполнено(МассивКолонок[3]) Тогда
						СтрокаТЧТовары[МассивКолонок[3]] = СтрокаТоваров.Дата;
					КонецЕсли;
					Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
						СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
					КонецЕсли;
				ИначеЕсли МассивКолонок.Количество() = 3 Тогда
					Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
						СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
					КонецЕсли;
				КонецЕсли;
					
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействийИзмененныеСтроки, КэшированныеЗначения);
				
			КонецЕсли;
			
			Если МассивСтрокТЧТовары.Количество() > 1 Тогда
				Для Счетчик = 2 По МассивСтрокТЧТовары.Количество() Цикл
					МассивУдаляемыхСтрок.Добавить(МассивСтрокТЧТовары[Счетчик-1]);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаляемыхСтрок Цикл
		Объект[ИмяТаблицы].Удалить(ТекЭлемент);
	КонецЦикла;

КонецПроцедуры

// Рассчитывает дату возврата многооборотной тары по условиям соглашения
//
// Параметры:
//  Объект                                   - ДокументОбъект - Документ, для которого считается срок возврата тары
//  СрокВозвратаМногооборотнойТары           - Число - Срок возврата многооборотной тары в днях
//  РассчитыватьДатуВозвратаТарыПоКалендарю  - Булево - Определяет вариант расчета даты: по всем дня или по основному
//                                                      календарю предприятия.
//  Календарь                                - СправочникСсылка.ПроизводственныеКалендари - Определяет календарь
//                                                                                          возврата тары.
//
// Возвращаемое значение:
//  Дата - рассчитанная дата возврата.
//
Функция РассчитатьДатуВозвратаМногооборотнойТары(Знач Объект,
	                                             Знач СрокВозвратаМногооборотнойТары,
	                                             Знач РассчитыватьДатуВозвратаТарыПоКалендарю,
	                                             Знач Календарь) Экспорт
	
	ОдинДень = 86400;
	
	ДатаОтсчетаВозвратаТары = ОпределитьДатуОтсчетаВозвратаТары(Объект);
	
	Если Не ЗначениеЗаполнено(ДатаОтсчетаВозвратаТары) Тогда
		ДатаОтсчетаВозвратаТары = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СрокВозвратаМногооборотнойТары) Тогда
		СрокВозвратаМногооборотнойТары = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РассчитыватьДатуВозвратаТарыПоКалендарю) 
		И РассчитыватьДатуВозвратаТарыПоКалендарю И ЗначениеЗаполнено(Календарь) Тогда
		ДатаВозвратаМногооборотнойТары = КалендарныеГрафики.ДатаПоКалендарю(
			Календарь,
			ДатаОтсчетаВозвратаТары,
			СрокВозвратаМногооборотнойТары);
	Иначе
		ДатаВозвратаМногооборотнойТары = ДатаОтсчетаВозвратаТары + ОдинДень * СрокВозвратаМногооборотнойТары;
	КонецЕсли;
	
	Возврат НачалоДня(ДатаВозвратаМногооборотнойТары);
	
КонецФункции

// Сбрасывает состояние заполнения многооборотной тары в документе после изменения табличной части.
//
// Параметры:
// 	СостояниеЗаполненияМногооборотнойТары - ПеречислениеСсылка.СостоянияЗаполненияМногооборотнойТары - 
//
Процедура ОбновитьСостояниеЗаполненияМногооборотнойТары(СостояниеЗаполненияМногооборотнойТары) Экспорт
	
	Если СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.Заполнена Тогда
		СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПредлагатьЗаполнить;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет связанные с возвратной тарой колонки таблицы
//
// Параметры:
// Товары - ДанныеФормыКоллекция - Таблица документа, в которой необходимо обновить колонки
// ВернутьМногооборотнуюТару - Булево - если Истина, то тара возвратная
// СтруктураДополнительныхДействий - Структура - Дополнительные действия, которые необходимо выполнить.
//
Процедура ОбновитьПризнакБезВозвратнойТары(Товары, ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий = Неопределено) Экспорт
	
	Если СтруктураДополнительныхДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	Иначе
		СтруктураДействий = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДополнительныхДействий);
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров проверки указания многооборотной тары в документе
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ИмяТЧ      - Строка - имя табличной части документа, которую нужно проверить
//   * ЕстьЯчейки - Булево - признак, что в ТЧ есть ячейки.
//
Функция ПараметрыПроверкиУказанияМногооборотнойТары() Экспорт
	
	ПараметрыПроверкиУказанияМногооборотнойТары = Новый Структура;
	ПараметрыПроверкиУказанияМногооборотнойТары.Вставить("ИмяТЧ", "Товары");
	ПараметрыПроверкиУказанияМногооборотнойТары.Вставить("ЕстьЯчейки", Истина);
	ПараметрыПроверкиУказанияМногооборотнойТары.Вставить("ОтборСтрок", Неопределено);
	
	Возврат ПараметрыПроверкиУказанияМногооборотнойТары;
	
КонецФункции

// Процедура проверят, что в табличной части тары указано не меньше, чем упаковок, которые ее требуют.
// 
// Параметры:
//		Объект - ДокументОбъект - проверяемый документ	
//		ПараметрыПроверкиУказанияМногооборотнойТары - Структура - возвращается функцией ПараметрыПроверкиУказанияМногооборотнойТары
//		Отказ - Булево - результат проверки.
//
Процедура ПроверитьУказаниеМногооборотнойТары(Объект, ПараметрыПроверкиУказанияМногооборотнойТары, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПараметрыПроверкиУказанияМногооборотнойТары.ЕстьЯчейки Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК Количество,
		|	ТаблицаТовары.Номенклатура КАК ТараНоменклатура,
		|	ТаблицаТовары.Характеристика КАК ТараХарактеристика,
		|	ТаблицаТовары.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ ТараВДокументе
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.ТараНоменклатура КАК ТараНоменклатура,
		|	ВложенныйЗапрос.ТараХарактеристика КАК ТараХарактеристика,
		|	ВложенныйЗапрос.Ячейка КАК Ячейка
		|ПОМЕСТИТЬ НеобходимаяТара
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
		|		УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
		|		УпаковкиНоменклатуры.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика,
		|		ТаблицаТовары.Ячейка КАК Ячейка
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|			ПО ТаблицаТовары.Упаковка = УпаковкиНоменклатуры.Ссылка
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И УпаковкиНоменклатуры.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|		И УпаковкиНоменклатуры.ПоставляетсяВМногооборотнойТаре
		|		И ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МИНИМУМ(ТаблицаТовары.КоличествоУпаковок * ВариантыПереупаковки.Количество),
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара,
		|		ТаблицаТовары.Ячейка
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
		|			ПО ТаблицаТовары.Упаковка = ВариантыПереупаковки.Источник
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И ВариантыПереупаковки.Источник.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|		И ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
		|		И ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	СГРУППИРОВАТЬ ПО
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара,
		|		ТаблицаТовары.Ячейка
		|
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТараНоменклатура,
		|	ВложенныйЗапрос.ТараХарактеристика,
		|	ВложенныйЗапрос.Ячейка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимаяТара.ТараНоменклатура КАК ТараНоменклатура,
		|	НеобходимаяТара.ТараХарактеристика КАК ТараХарактеристика,
		|	ЕСТЬNULL(ТараВДокументе.Количество, 0) КАК КоличествоТарыДобавлено,
		|	НеобходимаяТара.Количество КАК КоличествоТарыТребуется,
		|	ВЫРАЗИТЬ(НеобходимаяТара.ТараНоменклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НеобходимаяТара.Ячейка КАК Ячейка
		|ИЗ
		|	НеобходимаяТара КАК НеобходимаяТара
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТараВДокументе КАК ТараВДокументе
		|		ПО НеобходимаяТара.ТараНоменклатура = ТараВДокументе.ТараНоменклатура
		|			И НеобходимаяТара.ТараХарактеристика = ТараВДокументе.ТараХарактеристика
		|			И НеобходимаяТара.Ячейка = ТараВДокументе.Ячейка
		|ГДЕ
		|	НеобходимаяТара.Количество > ЕСТЬNULL(ТараВДокументе.Количество, 0)";
		
		Если ПараметрыПроверкиУказанияМногооборотнойТары.ОтборСтрок = Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ПараметрыПроверкиУказанияМногооборотнойТары.ИмяТЧ].Выгрузить(,"Номенклатура,Характеристика,Упаковка,Ячейка,КоличествоУпаковок"));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ПараметрыПроверкиУказанияМногооборотнойТары.ИмяТЧ].Выгрузить(
																												ПараметрыПроверкиУказанияМногооборотнойТары.ОтборСтрок,
																												"Номенклатура,Характеристика,Упаковка,Ячейка,КоличествоУпаковок"));
		КонецЕсли;
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК Количество,
		|	ТаблицаТовары.Номенклатура КАК ТараНоменклатура,
		|	ТаблицаТовары.Характеристика КАК ТараХарактеристика
		|ПОМЕСТИТЬ ТараВДокументе
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.ТараНоменклатура КАК ТараНоменклатура,
		|	ВложенныйЗапрос.ТараХарактеристика КАК ТараХарактеристика
		|ПОМЕСТИТЬ НеобходимаяТара
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
		|		УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара КАК ТараНоменклатура,
		|		УпаковкиНоменклатуры.ХарактеристикаМногооборотнаяТара КАК ТараХарактеристика
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|			ПО ТаблицаТовары.Упаковка = УпаковкиНоменклатуры.Ссылка
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И УпаковкиНоменклатуры.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|		И УпаковкиНоменклатуры.ПоставляетсяВМногооборотнойТаре
		|		И ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МИНИМУМ(ТаблицаТовары.КоличествоУпаковок * ВариантыПереупаковки.Количество),
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
		|			ПО ТаблицаТовары.Упаковка = ВариантыПереупаковки.Источник
		|	ГДЕ
		|		ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|		И ВариантыПереупаковки.Источник.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|		И ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре
		|		И ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	СГРУППИРОВАТЬ ПО
		|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
		|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара
		|
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ТараНоменклатура,
		|	ВложенныйЗапрос.ТараХарактеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимаяТара.ТараНоменклатура КАК ТараНоменклатура,
		|	НеобходимаяТара.ТараХарактеристика КАК ТараХарактеристика,
		|	ЕСТЬNULL(ТараВДокументе.Количество, 0) КАК КоличествоТарыДобавлено,
		|	НеобходимаяТара.Количество КАК КоличествоТарыТребуется,
		|	ВЫРАЗИТЬ(НеобходимаяТара.ТараНоменклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	НеобходимаяТара КАК НеобходимаяТара
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТараВДокументе КАК ТараВДокументе
		|		ПО НеобходимаяТара.ТараНоменклатура = ТараВДокументе.ТараНоменклатура
		|			И НеобходимаяТара.ТараХарактеристика = ТараВДокументе.ТараХарактеристика
		|ГДЕ
		|	НеобходимаяТара.Количество > ЕСТЬNULL(ТараВДокументе.Количество, 0)";
		
		Если ПараметрыПроверкиУказанияМногооборотнойТары.ОтборСтрок = Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ПараметрыПроверкиУказанияМногооборотнойТары.ИмяТЧ].Выгрузить(,"Номенклатура,Характеристика,Упаковка,КоличествоУпаковок"));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ПараметрыПроверкиУказанияМногооборотнойТары.ИмяТЧ].Выгрузить(
																											ПараметрыПроверкиУказанияМногооборотнойТары.ОтборСтрок,
																											"Номенклатура,Характеристика,Упаковка,КоличествоУпаковок"));
		КонецЕсли;
			
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МетаданныеОбъекта = Объект.Метаданные();
	ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ПараметрыПроверкиУказанияМногооборотнойТары.ИмяТЧ].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если ПараметрыПроверкиУказанияМногооборотнойТары.ЕстьЯчейки И ЗначениеЗаполнено(Выборка.Ячейка) Тогда
			ТекстСообщения = НСтр("ru = 'В списке %ИмяТЧ% для упаковок в ячейке %Ячейка%, поставляемых в многооборотной таре ""%Тара%"", указано недостаточное количество тары. Не хватает %Количество% %ЕдиницаИзмерения%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Ячейка%" , Выборка.Ячейка);
		Иначе
			ТекстСообщения = НСтр("ru = 'В списке %ИмяТЧ% для упаковок, поставляемых в многооборотной таре ""%Тара%"", указано недостаточное количество тары. Не хватает %Количество% %ЕдиницаИзмерения%.'");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%ИмяТЧ%" , ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Количество%" , Выборка.КоличествоТарыТребуется - Выборка.КоличествоТарыДобавлено);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Тара%" , НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.ТараНоменклатура,Выборка.ТараХарактеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%ЕдиницаИзмерения%" , Выборка.ЕдиницаИзмерения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу многооборотной тары по номенклатуре и упаковке (с учетом иерархии упаковок).
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для отбора.
//  Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка для отбора.
//
//  Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * Номенклатура               - СправочникСсылка.Номенклатура - номенклатура тары для переданного товара.
//    * Характеристика             - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика тары для переданного товара.
//    * ХарактеристикиИспользуются - Булево - признак использования характеристик для номенклатура тары.
//    * Количество                 - Число - количество номенклатуры.
//
Функция МногооборотнаяТараНоменклатуры(Номенклатура, Упаковка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.Количество) КАК КоличествоУпаковок,
	|	1 КАК Коэффициент
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.НоменклатураМногооборотнаяТара КАК Номенклатура,
	|		Номенклатура.ХарактеристикаМногооборотнаяТара КАК Характеристика,
	|		ВЫБОР
	|			КОГДА Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ХарактеристикиИспользуются,
	|		1 КАК Количество
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	ГДЕ
	|		Номенклатура.ПоставляетсяВМногооборотнойТаре
	|		И Номенклатура.Ссылка = &Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара,
	|		УпаковкиНоменклатуры.ХарактеристикаМногооборотнаяТара,
	|		ВЫБОР
	|			КОГДА УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		1
	|	ИЗ
	|		Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|	ГДЕ
	|		УпаковкиНоменклатуры.ПоставляетсяВМногооборотнойТаре
	|		И УпаковкиНоменклатуры.Ссылка = &Упаковка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара,
	|		ВариантыПереупаковки.Упаковка.ХарактеристикаМногооборотнаяТара,
	|		ВЫБОР
	|			КОГДА ВариантыПереупаковки.Упаковка.НоменклатураМногооборотнаяТара.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВариантыПереупаковки.Количество
	|	ИЗ
	|		РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|	ГДЕ
	|		&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		И ВариантыПереупаковки.Источник = &Упаковка
	|		И ВариантыПереупаковки.Упаковка.ПоставляетсяВМногооборотнойТаре) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ХарактеристикиИспользуются";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область УсловноеОформление

// Функция-конструктор параметров установки условного оформления строк с многооборотной тарой.
//
// Возвращаемое значение:
// 	Структура - Структура параметров:
//      * Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//      * ЭтоПоступление - Булево - Истина, если это документ поступления
//      * ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС, если оно отличается от "ТоварыСтавкаНДС"
//      * ИмяПоляВводаЦены - Строка - Наименование элемента формы, содержащего цену, если оно отличается от "ТоварыЦена"
//      * ИмяПоляВводаСуммы - Строка - Наименование элемента формы, содержащего сумму, если оно отличается от "ТоварыСумма"
//      * ПутьКТЧОтбора - Строка - Полный путь к ТЧ, содержащей указанные выше поля, если он отличается от "Объект.Товары.
//
Функция ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой() Экспорт
	
	ПараметрыУстановки = Новый Структура;
	
	ПараметрыУстановки.Вставить("Форма");
	ПараметрыУстановки.Вставить("ЭтоПоступление");
	ПараметрыУстановки.Вставить("ЭтоПередача", Ложь);
	ПараметрыУстановки.Вставить("ИмяПоляВводаСтавкиНДС", "ТоварыСтавкаНДС");
	ПараметрыУстановки.Вставить("ИмяПоляВводаЦены", "ТоварыЦена");
	ПараметрыУстановки.Вставить("ИмяПоляВводаСуммы", "ТоварыСумма");
	ПараметрыУстановки.Вставить("ПутьКТЧОтбора","Объект.Товары");
	ПараметрыУстановки.Вставить("ПутьКПолюОтбораВернутьМногооборотнуюТару","Объект.ВернутьМногооборотнуюТару");
	ПараметрыУстановки.Вставить("ПутьКПолюОтбораТребуетсяЗалогЗаТару","Объект.ТребуетсяЗалогЗаТару");
	
	Возврат ПараметрыУстановки;
	
КонецФункции

// Устанавливаем условное оформление цены, суммы, ставки НДС строк с многооборотной тарой.
//
// Параметры:
// 	ПараметрыУстановки - см. МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой
//
Процедура УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки) Экспорт

	Форма                 = ПараметрыУстановки.Форма;
	ЭтоПоступление        = ПараметрыУстановки.ЭтоПоступление;
	ЭтоПередача           = ПараметрыУстановки.ЭтоПередача;
	ИмяПоляВводаСтавкиНДС = ПараметрыУстановки.ИмяПоляВводаСтавкиНДС;
	ИмяПоляВводаЦены      = ПараметрыУстановки.ИмяПоляВводаЦены;
	ИмяПоляВводаСуммы     = ПараметрыУстановки.ИмяПоляВводаСуммы;
	ПутьКТЧОтбора         = ПараметрыУстановки.ПутьКТЧОтбора;
	ПутьКПолюОтбораВернутьМногооборотнуюТару	= ПараметрыУстановки.ПутьКПолюОтбораВернутьМногооборотнуюТару;
	ПутьКПолюОтбораТребуетсяЗалогЗаТару			= ПараметрыУстановки.ПутьКПолюОтбораТребуетсяЗалогЗаТару;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ПутьКПолюОтбораТипаНоменклатуры	= ПутьКТЧОтбора + ".ТипНоменклатуры";
	ПутьКПолюОтбораЦены				= ПутьКТЧОтбора + ".Цена";
	ПутьКПолюОтбораСуммы			= ПутьКТЧОтбора + ".Сумма";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		Если Не ЭтоПередача Тогда
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеФормы = ЭлементыФормы[ИмяПоляВводаЦены]; // ПолеФормы
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
			
			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораЦены);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеФормы = ЭлементыФормы[ИмяПоляВводаСуммы]; // ПолеФормы
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
			
			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСуммы);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяПоляВводаСтавкиНДС <> "" Тогда
		//
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеФормы = ЭлементыФормы[ИмяПоляВводаСтавкиНДС]; // ПолеФормы
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВернутьМногооборотнуюТару);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
		
	КонецЕсли;
	
	Если Не ЭтоПередача Тогда
		
		Если ЭтоПоступление Тогда
			//
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеФормы = ЭлементыФормы[ИмяПоляВводаЦены]; // ПолеФормы
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
			
			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораЦены);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
			
			ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
			
			ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТребуетсяЗалогЗаТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВернутьМногооборотнуюТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
			//
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеФормы = ЭлементыФормы[ИмяПоляВводаСуммы]; // ПолеФормы
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
			
			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСуммы);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
			
			ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
			
			ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТребуетсяЗалогЗаТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВернутьМногооборотнуюТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
		Иначе
			//
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеФормы = ЭлементыФормы[ИмяПоляВводаЦены]; // ПолеФормы
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораЦены);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

			ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
			ОтборЭлемента.ПравоеЗначение = СписокЗначений;

			ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

			ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

			ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТребуетсяЗалогЗаТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВернутьМногооборотнуюТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;

			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

			//
			
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеФормы = ЭлементыФормы[ИмяПоляВводаСуммы]; // ПолеФормы
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСуммы);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

			ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
			СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
			ОтборЭлемента.ПравоеЗначение = СписокЗначений;

			ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

			ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипаНоменклатуры);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

			ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТребуетсяЗалогЗаТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

			ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВернутьМногооборотнуюТару);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;

			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Прочее

// Функция возвращает дату отсчета возврата тары в зависимости от документа и хозяйственной операции.
//
// Параметры:
//		Объект - ДокументОбъект - проверяемый документ.
//	
//	Возвращаемое значение
//		ДатаОтсчетаВозвратаТары - Дата - дата отсчета возврата тары.
//
Функция ОпределитьДатуОтсчетаВозвратаТары(Объект)
	
	ЕстьДатаПереходаПраваСобственности = ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаПереходаПраваСобственности", Объект.Метаданные());
	ЕстьХозОперация = ОбщегоНазначения.ЕстьРеквизитОбъекта("ХозяйственнаяОперация", Объект.Метаданные());
	
	ХозОперация = ?(ЕстьХозОперация, Объект.ХозяйственнаяОперация, Неопределено);
	ДатаПереходаПраваСобственности = ?(ЕстьДатаПереходаПраваСобственности, 
		Объект.ДатаПереходаПраваСобственности, 
		Дата('00010101'));
	
	Если (ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
		ИЛИ ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности)
		И ЗначениеЗаполнено(ДатаПереходаПраваСобственности) Тогда
		
		ДатаОтсчетаВозвратаТары = ДатаПереходаПраваСобственности;
	Иначе
		ДатаОтсчетаВозвратаТары = Объект.Дата;
	КонецЕсли;
	
	Возврат ДатаОтсчетаВозвратаТары;
	
КонецФункции

#КонецОбласти

#КонецОбласти

