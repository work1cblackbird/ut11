// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

// Возвращает признак того, что в форме указывается построчный статус проверки и подбора
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
//  Булево - Указывается построчный статус в форме
Функция ЕстьПострочныйСтатусПроверкиВФорме(Форма) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат Ложь;
	КонецЕсли;
    Если Форма.ПараметрыИнтеграцииГосИС.Получить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")) <> Неопределено Тогда
		Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"));
	ИначеЕсли Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП") <> Неопределено
			И Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ВидыПродукции.Количество() > 0 Тогда
		Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить(Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ВидыПродукции[0])[0];
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВнутреннееПотребление.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента"



		Или ((Форма.ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаДокумента"
				Или Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента")
			И Настройки.ИспользоватьКолонкуСтатусаПроверкиПодбора)
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет соответствие переданного документа проверяемому типу.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - Контекст для определения типа документа.
//  Имя      - Строка - имя объекта метаданного документа.
//
// Возвращаемое значение:
// 	Булево - это документ.
Функция ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт

	Результат = Ложь;

	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1", Имя));

	Если ТипКонтекста = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1", Имя)) Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает значение особености учета номенклатуры по переданному виду продукции ИС
// или вид продукции ИС по переданной особенности учета номенклатуры.
// Параметры:
//  ОсобенностьУчетаИлиВидПродукции - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры, ПеречислениеСсылка.ВидыПродукцииИС - особеннсоть учета номенклатуры или вид продукции ИС
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - вид продукции ИС или особенность учета номенклатуры
//
Функция ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчетаИлиВидПродукции) Экспорт
	
	Если ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БАДы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Зерно") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Бакалея") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МоторныеМасла") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БАДы");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Зерно");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗерна");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Бакалея");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МоторныеМасла");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ПодключаемыеКомандыИС

// Команды ввода выбора основания акта постановки на баланс ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыАктПостановкиНаБалансЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОприходованиеИзлишковТоваров", НСтр("ru = 'Оприходование излишков товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваров", НСтр("ru = 'Пересортицу товаров'"));
	
КонецПроцедуры

// Команды ввода выбора основания акта списания ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыАктСписанияЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",   НСтр("ru = 'Внутреннее потребление'"),     "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхПродажах", НСтр("ru = 'Отчет о розничных продажах'"), "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваров",      НСтр("ru = 'Пересортицу товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",  НСтр("ru = 'Реализацию товаров услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",           НСтр("ru = 'Сборку товаров'"),             "ИспользоватьСборкуРазборку");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СписаниеНедостачТоваров", НСтр("ru = 'Списание недостач товаров'"));
	
КонецПроцедуры

// Команды ввода выбора основания отчета о производстве ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыОтчетОПроизводствеЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров", НСтр("ru = 'Сборку товаров'"), "ИспользоватьСборкуРазборку");
	
	
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПрочееОприходованиеТоваров", НСтр("ru = 'Прочее оприходование товаров'"), "ИспользоватьПрочееОприходованиеТоваров");
	
КонецПроцедуры

// Команды ввода выбора основания исходящей ТТН ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыТТНИсходящаяЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров услуг'"));
	
КонецПроцедуры

// Команды ввода выбора основания входящей ТТН ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыТТНВходящаяЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	
КонецПроцедуры

// Команды ввода выбора основания уведомления о планируемом импорте ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыУведомлениеОПланируемомИмпортеЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), "ИспользоватьЗаказыПоставщикам");
	
КонецПроцедуры

// Команды ввода выбора основания чека ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыЧекЕГАИС(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",   НСтр("ru = 'Внутреннее потребление'"), "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваров",      НСтр("ru = 'Пересортицу товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",  НСтр("ru = 'Реализацию товаров услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",           НСтр("ru = 'Сборку товаров'"),         "ИспользоватьСборкуРазборку");
	
КонецПроцедуры

// Команды ввода выбора основания чека на возврат ЕГАИС.
// 
// Параметры:
//  Команды - Массив Из См. ПодключаемыеКомандыИСКлиенСервер.ОписаниеКоманды - Добавляемые на форму команды
Процедура КомандыЧекЕГАИСВозврат(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента", НСтр("ru = 'Возврат товаров от клиента'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЭтоРозничныйДокумент(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Контрагент = Контекст.Объект.Контрагент;
		Возврат РозничныеПродажиВызовСервера.КонтрагентЭтоФизическоеЛицо(Контрагент);
	ИначеЕсли ТипЗнч(Контекст) = Тип("Структура") Тогда
		Контрагент = Контекст.Контрагент;
		Возврат РозничныеПродажиВызовСервера.КонтрагентЭтоФизическоеЛицо(Контрагент);
	Иначе
		Возврат ИнтеграцияИСВызовСервераУТ.КонтрагентЭтоФизическоеЛицоВДокументе(Контекст);
	КонецЕсли;
	
КонецФункции

Функция ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25(ДобавитьРазделитель = Истина) Экспорт
	
	ВозвращаемоеЗначение = "";
	
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Номенклатура

Функция ТекстПредставленияПотребительскаяУпаковкаОтсутствует(ВСкобках = Ложь, НачалоСтроки = Ложь) Экспорт
	
	Если ВСкобках Тогда
		Шаблон = "%1";
	Иначе
		Шаблон = "<%1>";
	КонецЕсли;
	
	Если НачалоСтроки Тогда
		Текст = НСтр("ru = 'Отсутствует'");
	Иначе
		Текст = НСтр("ru = 'отсутствует'");
	КонецЕсли;
	
	Возврат СтрШаблон(Шаблон, Текст);
	
КонецФункции

Функция ДополнительноеОписаниеВидовУпаковокНоменклатуры(ОсобенностьУчета, ПотребительскаяУпаковка, СубпотребительскаяУпаковка, ЕдиницаХранения) Экспорт
	
	ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчета);
	
	ТекстПояснения = Неопределено;
	
	Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции) Тогда
		
		Если ЗначениеЗаполнено(СубпотребительскаяУпаковка) Тогда
			ТекстПояснения = СтрШаблон(
				"%1: %2",
				ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции),
				СубпотребительскаяУпаковка);
		ИначеЕсли ЗначениеЗаполнено(ПотребительскаяУпаковка) Тогда
			ТекстПояснения = СтрШаблон(
				"%1: %2",
				ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции),
				ЕдиницаХранения);
		Иначе
			ТекстПояснения = СтрШаблон(
				"%1: %2",
				ИнтеграцияИСКлиентСервер.ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции),
				НСтр("ru = 'не настроена'"));
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ТекстПояснения;
	
КонецФункции

Функция ИсточникДанныхПоВидамУпаковок(ИсточникДанных) Экспорт
	Если ТипЗнч(ИсточникДанных) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИсточникНабора = ИсточникДанных.Объект;
		СсылкаНаОбъект = ИсточникНабора.Ссылка;
	Иначе
		ИсточникНабора = ИсточникДанных;
		СсылкаНаОбъект = ИсточникДанных.Ссылка;
	КонецЕсли;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура")
		И ИспользуетсяОбщийНаборУпаковок(ИсточникНабора) Тогда
		СсылкаНаОбъект = ИсточникНабора.НаборУпаковок;
	КонецЕсли;
	Возврат СсылкаНаОбъект;
КонецФункции

Функция ИспользуетсяОбщийНаборУпаковок(ДанныеФормыОбъект) Экспорт
	Возврат (ДанныеФормыОбъект.ИспользоватьУпаковки
		И ДанныеФормыОбъект.НаборУпаковок <> ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры"));
КонецФункции

Процедура НастройкаЭлементовВидаУпаковки(Форма, ПользовательРазрешилРедактирование = Ложь, ИспользоватьСерверныйВызов = Истина) Экспорт
	
	Объект          = Форма.Объект;
	Элементы        = Форма.Элементы;
	ЭтоНоменклатура = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура");
	Если ЭтоНоменклатура Тогда
		ИспользуетсяОбщийНабор = ИспользуетсяОбщийНаборУпаковок(Объект);
	Иначе
		ИспользуетсяОбщийНабор = Ложь;
	КонецЕсли;
	
	Если ИспользоватьСерверныйВызов Тогда
		Форма.ЭтоМернаяЕдиницаИС = ИнтеграцияИСВызовСервераУТ.ЭтоМернаяЕдиницаХранения(Объект.ЕдиницаИзмерения);
	КонецЕсли;
	
	ДоступностьКнопки    = Ложь;
	ДоступностьЭлементов = (Не ИспользуетсяОбщийНабор);
	Если (ЭтоНоменклатура
		И ДоступностьЭлементов
		И Не Объект.ИспользоватьУпаковки) Тогда
		ДоступностьЭлементов = Ложь;
	КонецЕсли;
	Если ПользовательРазрешилРедактирование Тогда
		Элементы.ПотребительскаяУпаковкаИС.ТолькоПросмотр      = Ложь;
		Элементы.ИспользуетсяЧастичноеВыбытиеИС.ТолькоПросмотр = Ложь;
		Элементы.УпаковкаЧастичногоВыбытияИС.ТолькоПросмотр    = Ложь;
		ДоступностьКнопки = ЭтоНоменклатура И Не ИспользуетсяОбщийНабор;
	Иначе
		Элементы.ПотребительскаяУпаковкаИС.ТолькоПросмотр      = Истина;
		Элементы.УпаковкаЧастичногоВыбытияИС.ТолькоПросмотр    = Истина;
		Элементы.ИспользуетсяЧастичноеВыбытиеИС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЭтоНоменклатура Тогда
		Элементы.ПотребительскаяУпаковкаИС.Доступность                   = ДоступностьЭлементов;
		Элементы.УпаковкаЧастичногоВыбытияИС.Доступность                 = ДоступностьЭлементов;
		Элементы.ИспользуетсяЧастичноеВыбытиеИС.Доступность              = ДоступностьЭлементов;
		Элементы.КомандаЗаполнитьУпаковкуЧастичногоВыбытияИС.Доступность = ДоступностьКнопки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС) Тогда
		Если Форма.ЭтоМернаяЕдиницаИС
			Или Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			Элементы.УпаковкаЧастичногоВыбытияИС.ПодсказкаВвода = ТекстПредставленияПотребительскаяУпаковкаОтсутствует(Истина, Истина);
		Иначе
			Элементы.УпаковкаЧастичногоВыбытияИС.ПодсказкаВвода = Объект.ЕдиницаИзмерения;
		КонецЕсли;
	Иначе
		Если Форма.ЭтоМернаяЕдиницаИС
			Или Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
			Элементы.ПотребительскаяУпаковкаИС.ПодсказкаВвода = ТекстПредставленияПотребительскаяУпаковкаОтсутствует(Истина, Истина);
		Иначе
			Элементы.ПотребительскаяУпаковкаИС.ПодсказкаВвода = Объект.ЕдиницаИзмерения;
		КонецЕсли;
		Элементы.УпаковкаЧастичногоВыбытияИС.ПодсказкаВвода = ТекстПредставленияПотребительскаяУпаковкаОтсутствует(Истина, Истина);
	КонецЕсли;
	
	ВидимостьУпаковкиЧастичногоВыбытия = (Форма.ИспользуетсяЧастичноеВыбытиеИС
		                                  И Элементы.ИспользуетсяЧастичноеВыбытиеИС.Видимость);
	Элементы.УпаковкаЧастичногоВыбытияИС.Видимость = ВидимостьУпаковкиЧастичногоВыбытия;
	Если ЭтоНоменклатура Тогда
		Элементы.КомандаЗаполнитьУпаковкуЧастичногоВыбытияИС.Видимость = ВидимостьУпаковкиЧастичногоВыбытия
			И ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Объект.ОсобенностьУчета) <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаИзмененияПолейУпаковок(Форма, ИмяЭлемента) Экспорт
	
	Объект          = Форма.Объект;
	ЕдиницаХранения = Объект.ЕдиницаИзмерения;
	
	Если ИмяЭлемента = "ПотребительскаяУпаковкаИС" Тогда
		
		Если ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС) Тогда
			
			Если Форма.ПотребительскаяУпаковкаИС = Форма.УпаковкаЧастичногоВыбытияИС Тогда
				Если Форма.ЭтоМернаяЕдиницаИС Тогда
					Форма.УпаковкаЧастичногоВыбытияИС = ЕдиницаХранения;
				Иначе
					Форма.УпаковкаЧастичногоВыбытияИС = Неопределено;
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли Форма.ЭтоМернаяЕдиницаИС Тогда
			
			Форма.УпаковкаЧастичногоВыбытияИС = ЕдиницаХранения;
			
		Иначе
			
			Форма.ПотребительскаяУпаковкаИС = ЕдиницаХранения;
			
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "УпаковкаЧастичногоВыбытияИС" Тогда
		
		Если ЗначениеЗаполнено(Форма.УпаковкаЧастичногоВыбытияИС) Тогда
		
			Если Форма.ПотребительскаяУпаковкаИС = Форма.УпаковкаЧастичногоВыбытияИС Тогда
				Если Форма.ЭтоМернаяЕдиницаИС Тогда
					Форма.ПотребительскаяУпаковкаИС = Неопределено;
				Иначе
					Форма.ПотребительскаяУпаковкаИС = ЕдиницаХранения;
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС) Тогда
			
			Если Форма.ПотребительскаяУпаковкаИС <> ЕдиницаХранения Тогда
				Форма.УпаковкаЧастичногоВыбытияИС = ЕдиницаХранения;
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ИмяЭлемента = "ИспользуетсяЧастичноеВыбытиеИС" Тогда
		
		Если Форма.ИспользуетсяЧастичноеВыбытиеИС Тогда
			
			Если Форма.ЭтоМернаяЕдиницаИС Тогда
				Форма.УпаковкаЧастичногоВыбытияИС = ЕдиницаХранения;
				Если Форма.ПотребительскаяУпаковкаИС = ЕдиницаХранения Тогда
					Форма.ПотребительскаяУпаковкаИС = Неопределено;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Форма.ПотребительскаяУпаковкаИС)
				И Форма.ПотребительскаяУпаковкаИС <> ЕдиницаХранения Тогда
				Форма.УпаковкаЧастичногоВыбытияИС = ЕдиницаХранения;
			КонецЕсли;
		
		Иначе
			Форма.УпаковкаЧастичногоВыбытияИС = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеРеквизитамиУпаковокПриПереключенииИспользованияНабораУпаковок(Форма, РедактированиеРеквизитовРазрешено) Экспорт
	
	Форма.ИспользуетсяЧастичноеВыбытиеИС = Ложь;
	Форма.ПотребительскаяУпаковкаИС      = Неопределено;
	Форма.УпаковкаЧастичногоВыбытияИС    = Неопределено;
	
	НастройкаЭлементовВидаУпаковки(Форма, РедактированиеРеквизитовРазрешено);
	
КонецПроцедуры

Процедура УправлениеПризнакомИспользованияЧастичногоВыбытия(Форма) Экспорт
	
	Если Не Форма.Объект.ИспользоватьУпаковки Тогда
		Форма.ИспользуетсяЧастичноеВыбытиеИС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ВидПродукции, Сценарий = 0) Экспорт
	
	Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоФормаПроверкиИПодбора(Контекст) Тогда
		ВключитьПоддержкуВидовПродукцииИС(Контекст.Контекст, ПараметрыСканирования, ВидПродукции, Контекст.ФормаПроверкиИПодбора.Сценарий);
		Возврат;
	КонецЕсли;

	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМ") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМ(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМКоррекции") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМКоррекции(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМВозврат") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМВозврат(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПриходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПараметрыСканированияПриходныйКассовыйОрдер(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РасходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПараметрыСканированияРасходныйКассовыйОрдер(ПараметрыСканирования, Контекст, ВидПродукции);

	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ОперацияПоПлатежнойКарте") Тогда
		
		ЗаполнитьПараметрыСканированияОперацияПоПлатежнойКарте(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РеализацияТоваровУслуг") Тогда
		
		ЗаполнитьПараметрыСканированияРеализацияТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РасходныйОрдерНаТовары") Тогда
		
		ЗаполнитьПараметрыСканированияРасходныйОрдерНаТовары(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПриходныйОрдерНаТовары") Тогда
		
		ЗаполнитьПараметрыСканированияРасходныйОрдерНаТовары(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ОтборРазмещениеТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияРасходныйОрдерНаТовары(ПараметрыСканирования, Контекст, ВидПродукции);
	
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.АктОРасхожденияхПослеОтгрузки") Тогда
		
		ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеОтгрузки(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.АктОРасхожденияхПослеПриемки") Тогда
		
		ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеПриемки(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.КорректировкаПриобретения") Тогда
		
		ЗаполнитьПараметрыСканированияКорректировкаПриобретения(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровОтКлиента") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровОтКлиента(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПриобретениеТоваровУслуг") Тогда
		
		ЗаполнитьПараметрыСканированияПриобретениеТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровПоставщику(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПеремещениеТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияПеремещениеТоваров(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.КорректировкаРеализации") Тогда
		
		ЗаполнитьПараметрыСканированияКорректировкаРеализации(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПрочееОприходованиеТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияПрочееОприходованиеТоваров(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.СборкаТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияСборкаТоваров(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ЗаполнитьПараметрыСканированияПередачаТоваровМеждуОрганизациями(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровМеждуОрганизациями(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПередачаТоваровХранителю") Тогда
		
		ЗаполнитьПараметрыСканированияПередачаТоваровХранителю(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВнутреннееПотребление") Тогда
		
		ЗаполнитьПараметрыСканированияВнутреннееПотребление(ПараметрыСканирования, Контекст, ВидПродукции);
		

		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Обработка.МобильноеРабочееМестоКладовщика") Тогда
		
		ЗаполнитьПараметрыСканированияМобильноеРабочееМестоКладовщика(ПараметрыСканирования, Контекст, ВидПродукции);
	КонецЕсли;
	
	ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	
КонецПроцедуры

Функция ТребуетсяЗаполнениеПродукцииСАТУРН(Форма, ТекущаяСтрока) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ПАТ")
		И Форма.ИмяФормы <> "Документ.ЗапросОстатковПартийСАТУРН.Форма.ФормаДокумента"
		И Форма.ИмяФормы <> "Документ.ИмпортПродукцииСАТУРН.Форма.ФормаДокумента"
		И Не (Форма.ИмяФормы = "Документ.НакладнаяСАТУРН.Форма.ФормаДокумента"
			И (Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути")
				Или Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.КВозврату")));
	
КонецФункции

Процедура ЗаполнитьПараметрыСканированияЧекККМКоррекции(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст,"ИспользуетсяРегистрацияРозничныхПродажВЕГАИС")
		И ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Истина;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки     = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
		ПараметрыСканирования.ОрганизацияЕГАИС = ИсточникДанных.ОрганизацияЕГАИС;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Ложь;
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			
			Реквизиты = Новый Структура("Склад", ИсточникДанных.Склад);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
				Реквизиты.Вставить("Организация", ИсточникДанных.Организация);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
			ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
			ЗаполнитьККТФФД12ЧекККМ(ПараметрыСканирования, Контекст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекККМ(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Ложь;
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст,"ИспользуетсяРегистрацияРозничныхПродажВЕГАИС")
		И ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВскрытаяБутылка"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок              = Истина;
		ПараметрыСканирования.Операция                           = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки          = Истина;
		ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки = Истина;
		ПараметрыСканирования.ТребуетсяЧастичноеВыбытие          = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			
			Реквизиты = Новый Структура("Склад, ДатаДокумента", ИсточникДанных.Склад, ИсточникДанных.Дата);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
				Реквизиты.Вставить("Организация", ИсточникДанных.Организация);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
			ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
			ЗаполнитьПараметрыРеквизитовРазрешительнойСистемыГИСМТ(ПараметрыСканирования, Контекст);
			ЗаполнитьККТФФД12ЧекККМ(ПараметрыСканирования, Контекст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукции)
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")) = Неопределено
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")) <> Неопределено Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Удалить(
			ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(
				ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"))) ;
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекККМВозврат(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат";
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Реализована"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок              = Истина;
		ПараметрыСканирования.Операция                           = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки          = Истина;
		ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
	КонецЕсли;
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
		ЗаполнитьККТФФД12ЧекККМ(ПараметрыСканирования, Контекст);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукции)
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")) = Неопределено
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")) <> Неопределено Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Удалить(
			ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(
				ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"))) ;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПриходныйКассовыйОрдер(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
		
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
		ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст);
	КонецЕсли;

	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРасходныйКассовыйОрдер(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
		ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст);
	КонецЕсли;

	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияОперацияПоПлатежнойКарте(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		Возврат;
	КонецЕсли;
	
	#ЕСЛИ Клиент ТОГДА
		ПоступлениеОплатыОтКлиента = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента");
		ВозвратОплатыКлиенту = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту");
	#ИНАЧЕ
		ПоступлениеОплатыОтКлиента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		ВозвратОплатыКлиенту = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	#КОНЕЦЕСЛИ
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ВключенаПоддержкаИСМП = Ложь;

	Если Контекст.Объект.ХозяйственнаяОперация = ПоступлениеОплатыОтКлиента Тогда
		ВключенаПоддержкаИСМП = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции);
	ИначеЕсли Контекст.Объект.ХозяйственнаяОперация = ВозвратОплатыКлиенту Тогда
		ВключенаПоддержкаИСМП = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст);
	КонецЕсли;

	Если Контекст.Объект.ХозяйственнаяОперация = ПоступлениеОплатыОтКлиента Тогда
		Реквизиты = Новый Структура("ДатаДокумента", Контекст.Объект.Дата);
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРеализацияТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ЭтоРозничныйДокумент(Контекст) Тогда
		
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
			ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
			ЗаполнитьПараметрыРеквизитовРазрешительнойСистемыГИСМТ(ПараметрыСканирования, Контекст);
			ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст);
		КонецЕсли;

	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРасходныйОрдерНаТовары(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияМобильноеРабочееМестоКладовщика(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции);
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Истина;

КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеОтгрузки(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеПриемки(ПараметрыСканирования, Контекст, ВидПродукции)

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияКорректировкаПриобретения(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияКорректировкаРеализации(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ЭтоРозничныйДокумент(Контекст) Тогда
		
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
			ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст);
		КонецЕсли;

	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	НастройкиИСМП = Новый Структура;
	НастройкиИСМП.Вставить("КонтролироватьОкончаниеСрокаГодности", Ложь);
	НастройкиИСМП.Вставить("ЗапрашиватьДанныеСервисаИСМП",         Ложь);
	НастройкиИСМП.Вставить("ДопустимыПроверкиСеройЗоныМОТП",       Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, НастройкиИСМП);

	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровОтКлиента(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ЭтоРозничныйДокумент(Контекст) Тогда
		
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
			ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
			ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст);
		КонецЕсли;
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовогоВозврата(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПриобретениеТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции)

	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции);

	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровПоставщику(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукциИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПеремещениеТоваров(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПередачаТоваровМеждуОрганизациями(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровМеждуОрганизациями(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияСборкаТоваров(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВнутреннееПотребление(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПередачаТоваровХранителю(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(
			ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПрочееОприходованиеТоваров(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукциИСМП
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	Настройки = ШтрихкодированиеИСМПКлиентСервер.НастройкиПараметровСканированияДокументаПроизводства();
	Настройки.Организация = ИсточникДанных.Организация;
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаПроизводства(ПараметрыСканирования, ВидПродукции, Настройки);
	
	#КонецОбласти
	
КонецПроцедуры



Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст)
	
	Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"))
		Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"))
		Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция")) Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Организация") Тогда
			ПараметрыСканирования.Организация = Контекст.Объект.Организация;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Организация") Тогда
			ПараметрыСканирования.Организация = Контекст.Организация;
		КонецЕсли;
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
			ОбщегоНазначенияИСКлиентСерверПереопределяемый.ПриОпределенииПараметровУказанияСерий(
				ПараметрыСканирования.ПараметрыУказанияСерий, Контекст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст)
	
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество     = "ЧастичноеВыбытиеКоличество";
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета   = "ЧастичноеВыбытиеВариантУчета";
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура   = "ЧастичноеВыбытиеНоменклатура";
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика = "ЧастичноеВыбытиеХарактеристика";
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРеквизитовРазрешительнойСистемыГИСМТ(ПараметрыСканирования, Контекст)
	
	ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ = "РазрешительныйРежимИдентификаторЗапросаГИСМТ";
	ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ          = "РазрешительныйРежимДатаЗапросаГИСМТ";
	
КонецПроцедуры

Процедура ЗаполнитьККТФФД12ЧекККМ(ПараметрыСканирования, Контекст)
	
	ПараметрыКассыККМ = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыКассыККМ") Тогда
		ПараметрыКассыККМ = Контекст.ПараметрыКассыККМ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "КассаККМ") Тогда
		ПараметрыКассыККМ = РозничныеПродажиВызовСервера.ПараметрыКассыККМ(Контекст.КассаККМ);
	КонецЕсли;
	
	Если ПараметрыКассыККМ <> Неопределено Тогда
		
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
			ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ   = Истина;
			ПараметрыСканирования.ККТФФД12ИСМП                     = ИдентификаторУстройства;
			ПараметрыСканирования.НомерФискальногоНакопителя       = РозничныеПродажиВызовСервера.ЗаводскойНомерФискальногоНакопителя(ИдентификаторУстройства);
			Если ТипЗнч(Контекст) = Тип("Структура") Тогда
				Если Контекст.Свойство("Ссылка") Тогда
					СсылкаНаОбъект = Контекст.Ссылка;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
				СсылкаНаОбъект = Контекст.Объект.Ссылка;
			Иначе
				СсылкаНаОбъект = Контекст;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПараметрыСканирования.СсылкаНаОбъект) Тогда
				ПараметрыСканирования.СсылкаНаОбъект = СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьККТФФД12(ПараметрыСканирования, Контекст)
	
	Организация = Неопределено;
	
	Если ТипЗнч(Контекст) = Тип("Структура") Тогда
		Если Контекст.Свойство("Организация") Тогда
			Организация = Контекст.Организация;
		КонецЕсли;
		Если Контекст.Свойство("Ссылка") Тогда
			СсылкаНаОбъект = Контекст.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Организация    = Контекст.Объект.Организация;
		СсылкаНаОбъект = Контекст.Объект.Ссылка;
	Иначе
		Организация    = ПараметрыСканирования.Организация;
		СсылкаНаОбъект = Контекст;
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		
		ОборудованиеПодключенноеПоОрганизации = ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеПоОрганизации(Организация);
		СписокПодключенныхККТ = ОборудованиеПодключенноеПоОрганизации.ККТ;
		
		Если СписокПодключенныхККТ.Количество() = 1 Тогда
			
			ИдентификаторУстройства = СписокПодключенныхККТ[0];
			
			Если МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ   = Истина;
				ПараметрыСканирования.ККТФФД12ИСМП                     = ИдентификаторУстройства;
				ПараметрыСканирования.НомерФискальногоНакопителя       = РозничныеПродажиВызовСервера.ЗаводскойНомерФискальногоНакопителя(ИдентификаторУстройства);
				Если Не ЗначениеЗаполнено(ПараметрыСканирования.СсылкаНаОбъект) Тогда
					ПараметрыСканирования.СсылкаНаОбъект = СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Корректирует имена табличных частей с данными в зависимости от источника.
//	Параметры:
//	ПараметрыУказанияСерий - Структура - анализируемые ключи (их наличие обязательно):
//	*ИмяТЧТовары - Строка
//	*ИмяТЧСерии- Строка
//	*ПолноеИмяОбъекта - Строка
Процедура ПараметрыУказанияСерийЗаменитьИмяТЧ(ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(ПараметрыУказанияСерий) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыУказанияСерий.Свойство("ПолноеИмяОбъекта")
		ИЛИ НЕ ПараметрыУказанияСерий.Свойство("ИмяТЧТовары")
		ИЛИ НЕ ПараметрыУказанияСерий.Свойство("ИмяТЧСерии") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокументаОбъекта = ИнтеграцияИСМПУТКлиентСервер.ИмяДокументаИзПолногоИмениОбъекта(ПараметрыУказанияСерий["ПолноеИмяОбъекта"]); 
	Если ИмяДокументаОбъекта = "РасходныйОрдерНаТовары" Тогда
		ПараметрыУказанияСерий.ИмяТЧТовары = "ОтгружаемыеТовары";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ОтгружаемыеТовары";
	ИначеЕсли ИмяДокументаОбъекта = "ОтборРазмещениеТоваров" Тогда
		ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыОтбор";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ТоварыОтбор";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти
